#ifndef DrumAnyWhere_H_   /* Include guard */
#define DrumAnyWHere_H_

#include <stdio.h>
#include <system.h>
#include <math.h>
#include <string.h>
#include <stdlib.h>
#include "includes.h"
#include "altera_up_avalon_audio.h"
#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_avalon_pio_regs.h"
#include "altera_up_avalon_character_lcd.h"
#include <efs.h>
#include <ls.h>
#include <errno.h>
#include "altera_avalon_pio_regs.h"


// method declarations

// sd
euint8* sdRead(char* fileName, EmbeddedFileSystem *efsl, File *readFile);
void parseWav(euint8* fileBuffer, unsigned long numberSamples, unsigned int* fileBufL);
void sdInit(EmbeddedFileSystem *efsl, File *readFile);

// audio 
void audioInit(alt_up_av_config_dev * audio_config_dev);
void audio_isr(void* context, alt_u32 id);
void synthesize();

// buttons
static void init_button_pio();
static void interrupt_isr_buttonPress(void *context, alt_u32 id);

typedef struct {
	unsigned int* waveform;
	int index;
	int scale;
	int numberOfSamples;
}Drum;

#define numDrums
Drum* drums[numDrums];


#define   TASK_STACKSIZE       2048
OS_STK    task1_stk[TASK_STACKSIZE];
OS_STK    task2_stk[TASK_STACKSIZE];

/* Definition of Task Priorities */
#define TASK1_PRIORITY      1
#define TASK2_PRIORITY      2


// globals 
alt_up_character_lcd_dev* myLCD;
int button;
alt_up_audio_dev * audio_dev;

#define SAMPLE_SIZE 16

// sample sizes for sounds
#define snareNumberSamples 7235
#define crashNumberSamples 63342
#define hihatNumberSamples 98218
#define hihat2NumberSamples 6313
#define kickNumberSamples 25448
#define tomNumberSamples 57006
#define tom2NumberSamples 16926

#define snareConst 0
#define crashConst 1
#define hihatConst 2
#define hihat2Const 3
#define kickConst 4
#define tomConst 5
#define tom2Const 6


// arrays to hold waveforms
unsigned int snare[snareNumberSamples];
unsigned int crash[crashNumberSamples];
unsigned int hihat[hihatNumberSamples];
unsigned int hihat2[hihat2NumberSamples];
unsigned int kick[kickNumberSamples];
unsigned int tom[tomNumberSamples];
unsigned int tom2[tom2NumberSamples];

int isPlaying[numDrums] = {0, 0, 0, 0, 0, 0, 0};
unsigned int nextToPlay[SAMPLE_SIZE];

OS_EVENT* semaphore;
int count = 0;
volatile int edge_capture;

#endif
