/*************************************************************************
* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.      *
* All rights reserved. All use of this software and documentation is     *
* subject to the License Agreement located at the end of this file below.*
**************************************************************************
* Description:                                                           *
* The following is a simple hello world program running MicroC/OS-II.The * 
* purpose of the design is to be a very simple application that just     *
* demonstrates MicroC/OS-II running on NIOS II.The design doesn't account*
* for issues such as checking system call return codes. etc.             *
*                                                                        *
* Requirements:                                                          *
*   -Supported Example Hardware Platforms                                *
*     Standard                                                           *
*     Full Featured                                                      *
*     Low Cost                                                           *
*   -Supported Development Boards                                        *
*     Nios II Development Board, Stratix II Edition                      *
*     Nios Development Board, Stratix Professional Edition               *
*     Nios Development Board, Stratix Edition                            *
*     Nios Development Board, Cyclone Edition                            *
*   -System Library Settings                                             *
*     RTOS Type - MicroC/OS-II                                           *
*     Periodic System Timer                                              *
*   -Know Issues                                                         *
*     If this design is run on the ISS, terminal output will take several*
*     minutes per iteration.                                             *
**************************************************************************/


#include <stdio.h>
#include <math.h>
#include <string.h>
#include "includes.h"
#include "altera_up_avalon_audio.h"
#include "altera_up_avalon_audio_and_video_config.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "altera_up_avalon_character_lcd.h"
#include <efs.h>
#include <ls.h>

/* Definition of Task Stacks */
#define   TASK_STACKSIZE       2048
OS_STK    task1_stk[TASK_STACKSIZE];
OS_STK    task2_stk[TASK_STACKSIZE];
OS_STK	  task3_stk[TASK_STACKSIZE];

/* Definition of Task Priorities */

#define TASK1_PRIORITY      3
#define TASK2_PRIORITY      2
#define TASK3_PRIORITY		1

#define PI 3.14159265
#define     BUFFER_SIZE    128

OS_EVENT *lcd_sem;

// WAVE file header format
typedef struct {
	unsigned char riff[4];						// RIFF string
	unsigned int overall_size	;				// overall size of file in bytes
	unsigned char wave[4];						// WAVE string
	unsigned char fmt_chunk_marker[4];			// fmt string with trailing null char
	unsigned int length_of_fmt;					// length of the format data
	unsigned int format_type;					// format type. 1-PCM, 3- IEEE float, 6 - 8bit A law, 7 - 8bit mu law
	unsigned int channels;						// no.of channels
	unsigned int sample_rate;					// sampling rate (blocks per second)
	unsigned int byterate;						// SampleRate * NumChannels * BitsPerSample/8
	unsigned int block_align;					// NumChannels * BitsPerSample/8
	unsigned int bits_per_sample;				// bits per sample, 8- 8bits, 16- 16 bits etc
	unsigned char data_chunk_header [4];		// DATA string or FLLR string
	unsigned int data_size;						// NumSamples * NumChannels * BitsPerSample/8 - size of the next chunk that will be read
}HEADER;

typedef struct {
	euint8 *fileBuffer;
	unsigned int *fileBufL;
	unsigned int *fileBufR;
	HEADER wavHeader;
	int buffersize;
	int numberSamples;
}sdCardInfo;

sdCardInfo sdRead();
sdCardInfo sdCard;
unsigned int l_buf[BUFFER_SIZE];
alt_up_audio_dev * audio_dev;

///* Handle audio data movement */
//void audio_isr (void * context, alt_u32 id) {
//
//
//	alt_up_audio_dev * audio_dev = (alt_up_audio_dev *) context;
//    int size1 = alt_up_audio_write_fifo (audio_dev, l_buf, 128, ALT_UP_AUDIO_RIGHT);
//	int size2 = alt_up_audio_write_fifo (audio_dev, l_buf, 128, ALT_UP_AUDIO_LEFT);
//
//	int total = size1 + size2;
//	printf("size1: %d size2: %d total printed %d\n",size1, size2, total);
//
//}

/* The main function creates two task and starts multi-tasking */
int main(void) {


	alt_up_av_config_dev * audio_config_dev;
	audio_config_dev = alt_up_av_config_open_dev("/dev/audio_and_video_config_0");

	if ( audio_config_dev == NULL)
		printf("Error: could not open audio config device \n");
	else
		printf("Opened audio config device \n");

	audio_dev = alt_up_audio_open_dev ("/dev/audio_0");
	if ( audio_dev == NULL)
		printf("Error: could not open audio device \n");
	else
		printf("Opened audio device \n");

	alt_up_av_config_reset(audio_config_dev);
	alt_up_audio_reset_audio_core(audio_dev);

	/* Write to configuration registers in the audio codec; see datasheet for what these values mean */
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x0, 0x17);
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x1, 0x17);
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x2, 0x68);
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x3, 0x68);
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x4, 0x15);
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x5, 0x06);
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x6, 0x00);
//	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x7, 0x10);
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x8, 0x22);


	sdCard = sdRead();

	int i;
	for(i = 0; i < BUFFER_SIZE; i++){
	  // Do we need to shift the values by 0x7fff like above for l_buff?
		//
	  l_buf[i] = (sin(2000 * (2 * PI) * i / 32000))*0x6fff;
	  //printf(" sin: %d\n", l_buf[i]);
	}

	int k = 0;
	int count = 0;
	while(1) {

		int fifospace = alt_up_audio_write_fifo_space(audio_dev, ALT_UP_AUDIO_RIGHT);
		if(fifospace >= 128) {
			if(count >= sdCard.numberSamples) {
				count = 0;
			}
				alt_up_audio_write_fifo(audio_dev, sdCard.fileBufL + count, 128, ALT_UP_AUDIO_RIGHT);
				alt_up_audio_write_fifo(audio_dev, sdCard.fileBufL + count, 128, ALT_UP_AUDIO_LEFT);
				count += 128;

		}
	}
		//printf("fifo: %d\n", fifospace);

//			printf("%d\n",*leftChannel);
//			leftChannel++;
//			k++;
//			if(k == 128) {
//				k = 0;
//			}

//	alt_up_audio_disable_write_interrupt(audio_dev);
//	alt_up_audio_disable_read_interrupt(audio_dev);
//	alt_irq_register(AUDIO_0_IRQ, (void*)audio_dev, audio_isr);
//	alt_up_audio_enable_write_interrupt(audio_dev);


//	short leftChannel;
//	long samples = sdCard.numberSamples;
//	unsigned int * temp = sdCard.fileBufL + samples;
//
//	while(1) {
//		int size = 0;
//		int i;
//		for(i = 0; i < sdCard.numberSamples; i += 128) {
//		   int size = alt_up_audio_write_fifo (audio_dev, sdCard.fileBufL[i], 128, ALT_UP_AUDIO_RIGHT);
//		   int size2 =alt_up_audio_write_fifo (audio_dev, sdCard.fileBufR[i], 128, ALT_UP_AUDIO_LEFT);
//
//		}
//		printf("size: %d\n", size);
		//OSTimeDlyHMSM(0,0,0,250);
//	}
}

sdCardInfo sdRead() {

	// Create EFSL containers
		EmbeddedFileSystem efsl;

		char fileName[LIST_MAXLENFILENAME] = {"crash.wav"};
		File readFile;
		sdCardInfo sdCard;

		// Initialises the filesystem on the SD card, if the filesystem does not
		// init properly then it displays an error message.
		printf("Attempting to init filesystem");
		int ret = efs_init(&efsl, SD_CARD_SPI_MASTER_NAME);

		// Initialize efsl
		if(ret != 0)
		{
		printf("...could not initialize filesystem.\n");
		}
		else
		printf("...success!\n");

		// You could do some scanning of the file system here using the UNIX-like
		// API functions such as "ls_openDir(...)" and "ls_getNext(...). Reference
		// the included PDF for the documentation to do such a thing. This example
		// simply shows reading a file with a known filename.

		// Open the test file
		printf("\nAttempting to open file: \"%s\"\n", fileName);

		int ret1 = file_fopen(&readFile, &efsl.myFs, fileName, 'r');
		printf("ret1: %d\n", ret1);
		if (file_fopen(&readFile, &efsl.myFs, fileName, 'r') != 0)
		{
			printf("Error:\tCould not open file\n");
		}
		else
		{
			printf("Reading file...\n");
		}

		// Create a memory buffer to read the file into
		sdCard.fileBuffer = malloc(readFile.FileSize * sizeof(eint8));
		sdCard.buffersize = (int)readFile.FileSize * sizeof(eint8);
		printf("buffersize: %d \n", sdCard.buffersize);

		if (!(sdCard.fileBuffer))
		{
			printf("malloc failed!\n");
		}

		// Read all the file's contents into the buffer. See the file_fread(...) function
		// for the ability to read chunks of the file at a time, which is desirable for
		// larger files.
		unsigned int bytesRead = file_read(&readFile, readFile.FileSize, sdCard.fileBuffer);

		printf("%u bytes read from the file\n", bytesRead);

		// Close the file
		if (file_fclose(&readFile) != 0) {

			printf("Error:\tCould not close file properly\n");
		}

		//Header Info
		sdCard.wavHeader.riff[0] = sdCard.fileBuffer[0];
		sdCard.wavHeader.riff[1] = sdCard.fileBuffer[1];
		sdCard.wavHeader.riff[2] = sdCard.fileBuffer[2];
		sdCard.wavHeader.riff[3] = sdCard.fileBuffer[3];

		sdCard.wavHeader.overall_size = sdCard.fileBuffer[4] | (sdCard.fileBuffer[5] << 8) | (sdCard.fileBuffer[6] << 16) | (sdCard.fileBuffer[7] << 24);

		sdCard.wavHeader.wave[0] = sdCard.fileBuffer[8];
		sdCard.wavHeader.wave[1] = sdCard.fileBuffer[9];
		sdCard.wavHeader.wave[2] = sdCard.fileBuffer[10];
		sdCard.wavHeader.wave[3] = sdCard.fileBuffer[11];

		sdCard.wavHeader.fmt_chunk_marker[0] = sdCard.fileBuffer[12];
		sdCard.wavHeader.fmt_chunk_marker[1] = sdCard.fileBuffer[13];
		sdCard.wavHeader.fmt_chunk_marker[2] = sdCard.fileBuffer[14];
		sdCard.wavHeader.fmt_chunk_marker[3] = sdCard.fileBuffer[15];

		sdCard.wavHeader.length_of_fmt = sdCard.fileBuffer[16] | (sdCard.fileBuffer[17] << 8) | (sdCard.fileBuffer[18] << 16) | (sdCard.fileBuffer[19] << 24);

		sdCard.wavHeader.format_type = sdCard.fileBuffer[20] | sdCard.fileBuffer[21] << 8;

		sdCard.wavHeader.channels = sdCard.fileBuffer[22] | sdCard.fileBuffer[23] << 8;

		sdCard.wavHeader.sample_rate = sdCard.fileBuffer[24] | (sdCard.fileBuffer[25] << 8) | (sdCard.fileBuffer[26] << 16) | (sdCard.fileBuffer[27] << 24);

		sdCard.wavHeader.byterate = sdCard.fileBuffer[28] | (sdCard.fileBuffer[29] << 8) | (sdCard.fileBuffer[30] << 16) | (sdCard.fileBuffer[31] << 24);

		sdCard.wavHeader.block_align = sdCard.fileBuffer[32] | sdCard.fileBuffer[33] << 8;

		sdCard.wavHeader.bits_per_sample = sdCard.fileBuffer[34] | sdCard.fileBuffer[35] << 8;

		sdCard.wavHeader.data_chunk_header[0] = sdCard.fileBuffer[36];
		sdCard.wavHeader.data_chunk_header[1] = sdCard.fileBuffer[37];
		sdCard.wavHeader.data_chunk_header[2] = sdCard.fileBuffer[38];
		sdCard.wavHeader.data_chunk_header[3] = sdCard.fileBuffer[39];

		sdCard.wavHeader.data_size = sdCard.fileBuffer[40] | (sdCard.fileBuffer[41] << 8) | (sdCard.fileBuffer[42] << 16) | (sdCard.fileBuffer[43] << 24);


		printf("riff: %s\n", sdCard.wavHeader.riff);
		printf("overall_size: %d\n", sdCard.wavHeader.overall_size);
		printf("wave: %s\n", sdCard.wavHeader.wave);
		printf("fmt: %s\n", sdCard.wavHeader.fmt_chunk_marker);
		printf("fmt size: %d\n", sdCard.wavHeader.length_of_fmt);
		printf("format type: %d\n", sdCard.wavHeader.format_type);
		printf("channels: %d\n", sdCard.wavHeader.channels);
		printf("sample rate: %d\n", sdCard.wavHeader.sample_rate);
		printf("byte rate: %d\n", sdCard.wavHeader.byterate);
		printf("block align: %d\n", sdCard.wavHeader.block_align);
		printf("bits per sample: %d\n", sdCard.wavHeader.bits_per_sample);
		printf("data chunk header: %s\n", sdCard.wavHeader.data_chunk_header);
		printf("data size: %d\n", sdCard.wavHeader.data_size);

//		sdCard.numberSamples = (8*sdCard.wavHeader.data_size)/(sdCard.wavHeader.channels*sdCard.wavHeader.bits_per_sample);
		sdCard.numberSamples = 63342;
		printf("Samples: %d\n", sdCard.numberSamples);
		sdCard.fileBufL = malloc(sdCard.numberSamples * sizeof(eint16));
		sdCard.fileBufR = malloc(sdCard.numberSamples * sizeof(eint16));

		int i;
		for(i = 0; i < sdCard.numberSamples; i++) {
			sdCard.fileBufL[i] = sdCard.fileBuffer[i*4+44] | (sdCard.fileBuffer[i*4+45] << 8);
			sdCard.fileBufR[i] = sdCard.fileBuffer[i*4+44] | (sdCard.fileBuffer[i*4+45] << 8);

//			printf("LEFT: %d\n", sdCard.fileBufL[i]);
//			printf("RIGHT: %d\n", sdCard.fileBufR[i]);
		}



//		// Print out the contents
//		printf("\nFile contents (in hex):\n");
//		int j;
//		for (j = 0; j < bytesRead; ++j)
//		{
//			printf("%c", sdCard.fileBuffer[j]);
//		}

		// Unmount the file system
		fs_umount(&efsl.myFs);
		return sdCard;

		// Free the file buffer memory
		//free(fileBuffer);
	}


//void loadToRam () {
//	sdCardInfo sd = sdRead();
//}

/******************************************************************************
*                                                                             *
* License Agreement                                                           *
*                                                                             *
* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *
* All rights reserved.                                                        *
*                                                                             *
* Permission is hereby granted, free of charge, to any person obtaining a     *
* copy of this software and associated documentation files (the "Software"),  *
* to deal in the Software without restriction, including without limitation   *
* the rights to use, copy, modify, merge, publish, distribute, sublicense,    *
* and/or sell copies of the Software, and to permit persons to whom the       *
* Software is furnished to do so, subject to the following conditions:        *
*                                                                             *
* The above copyright notice and this permission notice shall be included in  *
* all copies or substantial portions of the Software.                         *
*                                                                             *
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  *
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,    *
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER      *
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING     *
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER         *
* DEALINGS IN THE SOFTWARE.                                                   *
*                                                                             *
* This agreement shall be governed in all respects by the laws of the State   *
* of California and by the laws of the United States of America.              *
* Altera does not recommend, suggest or require that this reference design    *
* file be used in conjunction or combination with any other product.          *
******************************************************************************/
