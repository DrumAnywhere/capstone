
i2c.elf:     file format elf32-littlenios2
i2c.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0080019c

Program Header:
    LOAD off    0x00001020 vaddr 0x01104020 paddr 0x00800000 align 2**12
         filesz 0x0000019c memsz 0x0000019c flags r-x
    LOAD off    0x0000219c vaddr 0x0080019c paddr 0x0080019c align 2**12
         filesz 0x0001a5f8 memsz 0x0001a5f8 flags r-x
    LOAD off    0x0001c794 vaddr 0x0081a794 paddr 0x0081c308 align 2**12
         filesz 0x00001b74 memsz 0x00001b74 flags rw-
    LOAD off    0x0001ee7c vaddr 0x0081de7c paddr 0x0081de7c align 2**12
         filesz 0x00000000 memsz 0x00007574 flags rw-
    LOAD off    0x0001f000 vaddr 0x01104000 paddr 0x01104000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01104000  01104000  0001f000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  01104020  00800000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00019ebc  0080019c  0080019c  0000219c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000073c  0081a058  0081a058  0001c058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b74  0081a794  0081c308  0001c794  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00007574  0081de7c  0081de7c  0001ee7c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0001f020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000010f8  00000000  00000000  0001f048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000025dd  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000341f7  00000000  00000000  0002271d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000abf2  00000000  00000000  00056914  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001fd1c  00000000  00000000  00061506  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002b20  00000000  00000000  00081224  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002b94  00000000  00000000  00083d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000f2d9  00000000  00000000  000868d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00095bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000cc0  00000000  00000000  00095bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  0009b97d  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0009b983  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009b98f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009b990  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0009b991  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0009b995  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0009b999  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0009b99d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0009b9a8  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0009b9b3  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  0009b9be  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000043  00000000  00000000  0009b9cb  2**0
                  CONTENTS, READONLY
 29 .jdi          000051db  00000000  00000000  0009ba0e  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00080af6  00000000  00000000  000a0be9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01104000 l    d  .entry	00000000 .entry
01104020 l    d  .exceptions	00000000 .exceptions
0080019c l    d  .text	00000000 .text
0081a058 l    d  .rodata	00000000 .rodata
0081a794 l    d  .rwdata	00000000 .rwdata
0081de7c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001d4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 mpu9250.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
0081a2a4 l     O .rodata	00000010 bp
0081a2b4 l     O .rodata	00000010 dp_l
0081a2c4 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
0081a2d4 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
008042a4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00805210 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0081a794 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00805e50 l     F .text	00000058 __sprint_r
0081a46e l     O .rodata	00000010 blanks.3452
0081a45e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00807ecc l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008098f4 l     F .text	00000058 std
00809a00 l     F .text	00000008 __fp_lock
00809a08 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0081c258 l     O .rwdata	00000004 charset
0081a4a0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0081a5e8 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0080e178 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080e1d8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080e2dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080e400 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080e4e0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080e640 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0080e88c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081c27c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0080ec64 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0081c280 l     O .rwdata	00000004 lockid
0081dea8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0081c284 l     O .rwdata	00000004 lockid
0081deb0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0081069c l     F .text	00000044 OS_InitMisc
008106e0 l     F .text	0000006c OS_InitRdyList
00810844 l     F .text	000000e0 OS_InitTCBList
008105c0 l     F .text	000000dc OS_InitEventList
0081074c l     F .text	0000007c OS_InitTaskIdle
008107c8 l     F .text	0000007c OS_InitTaskStat
00810ab8 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
008129d8 l     F .text	00000110 OS_FlagTaskRdy
00812730 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0081b150 l     O .rwdata	0000106c jtag_uart_0
0081c1bc l     O .rwdata	00000030 audio_and_video_config_0
0081c1ec l     O .rwdata	00000030 audio_0
0081c21c l     O .rwdata	0000002c character_lcd_0
00817350 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00817608 l     F .text	000002c4 altera_avalon_jtag_uart_irq
008178cc l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008180e4 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00818a94 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00818f38 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00819088 l     F .text	000000f8 alt_file_locked
0081930c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00819e34 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00819fe8 l     F .text	00000040 alt_sim_halt
0080b6e4 g     F .text	00000094 _mprec_log10
0081c2d2 g     O .rwdata	00000002 OSTaskNameSize
0080b7d0 g     F .text	00000088 __any_on
0080cf58 g     F .text	00000070 _isatty_r
0081a5c0 g     O .rodata	00000028 __mprec_tinytens
0080e6a0 g     F .text	000000c8 alt_main
00805d28 g     F .text	000000a0 _puts_r
00825160 g     O .bss	00000100 alt_irq
00803c68 g     F .text	00000018 fabs
0080cfc8 g     F .text	00000078 _lseek_r
008132cc g     F .text	000000d4 OS_MemInit
0081c308 g       *ABS*	00000000 __flash_rwdata_start
0081722c g     F .text	00000064 OSTimeSet
00818260 g     F .text	00000034 alt_up_character_lcd_send_cmd
00804dc4 g     F .text	00000088 __eqdf2
0080f218 g     F .text	000006b4 OSEventPendMulti
008253f0 g       *ABS*	00000000 __alt_heap_start
00819914 g     F .text	00000020 OSTaskCreateHook
0081df3c g     O .bss	00002000 task1_stk
00805cb0 g     F .text	00000044 printf
0081c2aa g     O .rwdata	00000002 OSMboxEn
0080f920 g     F .text	0000007c OSIntEnter
0080ca10 g     F .text	00000068 __sseek
0080995c g     F .text	000000a4 __sinit
0081c2ba g     O .rwdata	00000002 OSQEn
0080a668 g     F .text	00000084 _setlocale_r
00809a5c g     F .text	0000009c __sfmoreglue
0080eed4 g     F .text	000000d0 __malloc_unlock
00819970 g     F .text	0000001c OSTaskStatHook
0081deb8 g     O .bss	00000001 OSLockNesting
0081c2f8 g     O .rwdata	00000002 OSDataSize
0081deb9 g     O .bss	00000001 OSRunning
0080b160 g     F .text	000000e0 memmove
008199a8 g     F .text	0000001c OSInitHookBegin
0081c2f0 g     O .rwdata	00000002 OSTmrSize
00809a4c g     F .text	00000010 _cleanup
0080b858 g     F .text	000000bc _Balloc
0081debc g     O .bss	00000004 OSIdleCtr
00804ed4 g     F .text	00000088 __gtdf2
008195e0 g       .text	00000000 OSStartTsk
00805ca0 g     F .text	00000010 __errno
008181e4 g     F .text	0000007c get_DDRAM_addr
00810dec g     F .text	000002e0 OS_TCBInit
00801f68 g     F .text	00000144 i2c_write
01104000 g     F .entry	0000000c __reset
0081c2f6 g     O .rwdata	00000002 OSTmrWheelTblSize
00800000 g       *ABS*	00000000 __flash_exceptions_start
0081c296 g     O .rwdata	00000002 OSEventSize
0081dec0 g     O .bss	00000001 OSPrioHighRdy
0080cee4 g     F .text	00000074 _fstat_r
00819934 g     F .text	00000020 OSTaskDelHook
0081de94 g     O .bss	00000004 errno
00805164 g     F .text	00000038 __make_dp
008195c0 g       .text	00000000 OSStartHighRdy
008159e4 g     F .text	00000200 OSTaskCreateExt
0081224c g     F .text	00000068 OSFlagPendGetFlagsRdy
0081c2d6 g     O .rwdata	00000002 OSTaskStatStkSize
00805760 g     F .text	0000002c __make_fp
00811258 g     F .text	00000334 OSFlagAccept
00813a08 g     F .text	000000c8 OSQFlush
008133a0 g     F .text	00000154 OSQAccept
0081dea0 g     O .bss	00000004 alt_argv
00824248 g       *ABS*	00000000 _gp
0080ea20 g     F .text	00000120 usleep
00815810 g     F .text	000001d4 OSTaskCreate
0081529c g     F .text	00000574 OSTaskChangePrio
0081deb4 g     O .bss	00000004 alt_heapsem
008110cc g     F .text	0000018c OSDebugInit
00815be4 g     F .text	0000040c OSTaskDel
0081afd0 g     O .rwdata	00000180 alt_fd_list
00821f3c g     O .bss	00000370 OSFlagTbl
0081039c g     F .text	000000b8 OS_EventTaskRemove
00818bbc g     F .text	00000094 alt_find_dev
0080b0c0 g     F .text	000000a0 memcpy
0081c2c0 g     O .rwdata	00000002 OSRdyTblSize
008183f8 g     F .text	0000004c alt_up_character_lcd_write_fd
00809a40 g     F .text	0000000c _cleanup_r
0080506c g     F .text	000000f8 __floatsidf
00819010 g     F .text	00000078 alt_io_redirect
00804f5c g     F .text	00000088 __ltdf2
0081a058 g       *ABS*	00000000 __DTOR_END__
00805dc8 g     F .text	00000014 puts
0080efa4 g     F .text	00000130 OSEventNameGet
0081c2a4 g     O .rwdata	00000002 OSFlagMax
0080b634 g     F .text	000000b0 __ratio
0080f99c g     F .text	00000100 OSIntExit
0081c2de g     O .rwdata	00000002 OSTCBSize
0081dec1 g     O .bss	00000001 OSPrioCur
00817b48 g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00805cf4 g     F .text	00000034 _printf_r
01104000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0080534c g     F .text	00000008 __udivsi3
0080e33c g     F .text	000000c4 isatty
0081c2c4 g     O .rwdata	00000002 OSStkWidth
0081a4d0 g     O .rodata	000000c8 __mprec_tens
0081c2b8 g     O .rwdata	00000002 OSPtrSize
00801be8 g     F .text	0000015c I2C_ReadFromDeviceRegister
0080a644 g     F .text	00000008 __locale_charset
0081c298 g     O .rwdata	00000002 OSEventTblSize
00819534 g       .text	00000000 OSCtxSw
0081de88 g     O .bss	00000004 __malloc_top_pad
0081dec4 g     O .bss	00000004 OSTCBList
0081de98 g     O .bss	00000004 alt_fd_list_lock
0081c254 g     O .rwdata	00000004 __mb_cur_max
0080a64c g     F .text	0000000c _localeconv_r
0080bfbc g     F .text	0000003c __i2b
0080a028 g     F .text	0000049c __sfvwrite_r
008222ac g     O .bss	00000c30 OSMemTbl
0081dec8 g     O .bss	00000001 OSTickStepState
0080c998 g     F .text	00000070 _sbrk_r
0081c2bc g     O .rwdata	00000002 OSQMax
00822edc g     O .bss	00000800 OSTaskStatStk
00812eb4 g     F .text	0000010c OSMemNameGet
0081c29c g     O .rwdata	00000002 OSFlagEn
0080d040 g     F .text	00000078 _read_r
0081c2e2 g     O .rwdata	00000002 OSTimeTickHookEn
00813f6c g     F .text	00000180 OSQPost
00812ae8 g     F .text	000000ac OS_FlagUnlink
0081ab94 g     O .rwdata	0000000c __lc_ctype
0081c274 g     O .rwdata	00000004 alt_max_fd
00810978 g     F .text	0000006c OS_MemCopy
008109e4 g     F .text	000000d4 OS_Sched
00805aa0 g     F .text	00000138 __unpack_d
0080cdc0 g     F .text	00000110 _fclose_r
00812db0 g     F .text	00000104 OSMemGet
00816318 g     F .text	000001c4 OSTaskNameSet
008098c0 g     F .text	00000034 fflush
0081de8c g     O .bss	00000004 __malloc_max_sbrked_mem
0081decc g     O .bss	00000004 OSCtxSwCtr
0081998c g     F .text	0000001c OSTimeTickHook
0081c2a6 g     O .rwdata	00000002 OSFlagNameSize
00804190 g     F .text	00000054 __extendsfdf2
00810454 g     F .text	00000104 OS_EventTaskRemoveMulti
00804734 g     F .text	00000074 __adddf3
00810248 g     F .text	00000154 OS_EventTaskWaitMulti
0080b514 g     F .text	00000120 __b2d
0081c2be g     O .rwdata	00000002 OSQSize
0080d724 g     F .text	00000660 __umoddi3
0080e54c g     F .text	000000f4 lseek
00814b48 g     F .text	0000027c OSSemPend
0081c248 g     O .rwdata	00000004 __fdlib_version
0081c250 g     O .rwdata	00000004 _global_impure_ptr
0080c364 g     F .text	000005f4 _realloc_r
0081c2a8 g     O .rwdata	00000002 OSLowestPrio
008253f0 g       *ABS*	00000000 __bss_end
00818e40 g     F .text	000000f8 alt_iic_isr_register
008199fc g     F .text	00000020 OSTCBInitHook
0081c2ee g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00819404 g     F .text	00000110 alt_tick
0080d0b8 g     F .text	0000066c __udivdi3
0081c290 g     O .rwdata	00000002 OSEventEn
0081a598 g     O .rodata	00000028 __mprec_bigtens
0080c244 g     F .text	00000120 __s2b
0081c2ea g     O .rwdata	00000002 OSTmrCfgNameSize
0080dee4 g     F .text	00000194 __floatunsidf
0080b434 g     F .text	00000060 __mcmp
00809a28 g     F .text	00000018 __fp_lock_all
00818df8 g     F .text	00000048 alt_ic_irq_enabled
008128f4 g     F .text	000000e4 OS_FlagInit
0081936c g     F .text	00000098 alt_alarm_stop
00801900 g     F .text	00000130 I2C_WriteToDeviceRegister
0081c2cc g     O .rwdata	00000002 OSTaskIdleStkSize
0081df08 g     O .bss	00000004 alt_irq_active
008146d4 g     F .text	000000c0 OSSemAccept
008130e0 g     F .text	000000f0 OSMemPut
00812b94 g     F .text	0000021c OSMemCreate
0081ded0 g     O .bss	00000004 OSIdleCtrMax
011040ec g     F .exceptions	000000d0 alt_irq_handler
0081afa8 g     O .rwdata	00000028 alt_dev_null
0081c2e0 g     O .rwdata	00000002 OSTicksPerSec
00803ce4 g     F .text	00000210 rint
00805698 g     F .text	000000c8 __unpack_f
008186e0 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00801e68 g     F .text	00000088 i2c_start
00819534 g       .text	00000000 OSIntCtxSw
008189c4 g     F .text	0000001c alt_dcache_flush_all
0080b300 g     F .text	00000070 __hi0bits
0080de0c g     F .text	000000d8 __fixdfsi
0081ded4 g     O .bss	00000004 OSTCBFreeList
0081c308 g       *ABS*	00000000 __ram_rwdata_end
00814dc4 g     F .text	0000017c OSSemPendAbort
0081c26c g     O .rwdata	00000008 alt_dev_list
0080eb40 g     F .text	00000124 write
0081c2e4 g     O .rwdata	00000002 OSVersionNbr
0081a794 g       *ABS*	00000000 __ram_rodata_end
0080e204 g     F .text	000000d8 fstat
00804fe4 g     F .text	00000088 __ledf2
0081c28c g     O .rwdata	00000004 OSEndiannessTest
0080c124 g     F .text	00000120 __pow5mult
0081de7c g     O .bss	00000004 __nlocale_changed
00805354 g     F .text	00000008 __umodsi3
0081c29e g     O .rwdata	00000002 OSFlagGrpSize
008253f0 g       *ABS*	00000000 end
00805538 g     F .text	00000160 __pack_f
008174d0 g     F .text	00000138 altera_avalon_jtag_uart_init
00810c5c g     F .text	000000c8 OS_TaskStat
0081a054 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00818154 g     F .text	00000090 alt_avalon_timer_sc_init
008054b8 g     F .text	00000080 __clzsi2
00817e08 g     F .text	000002dc altera_avalon_jtag_uart_write
0080994c g     F .text	00000004 __sfp_lock_acquire
0080afdc g     F .text	000000e4 memchr
00810924 g     F .text	00000054 OS_MemClr
00818308 g     F .text	00000078 alt_up_character_lcd_write
00805ea8 g     F .text	00001ec4 ___vfprintf_internal_r
00819604 g     F .text	00000310 OSTaskStkInit
008013fc g     F .text	000002c4 task1
00801a30 g     F .text	000000c4 I2C_WriteMore
00809d14 g     F .text	00000314 _free_r
0080ffa4 g     F .text	00000194 OS_EventTaskRdy
00819e38 g     F .text	000001b0 __call_exitprocs
0081ded8 g     O .bss	00000001 OSCPUUsage
0081de80 g     O .bss	00000004 __mlocale_changed
0081c260 g     O .rwdata	00000004 __malloc_sbrk_base
0080019c g     F .text	0000003c _start
008016c0 g     F .text	0000002c task2
0081df0c g     O .bss	00000004 _alt_tick_rate
00813ad0 g     F .text	00000320 OSQPend
00816cdc g     F .text	0000014c OSTimeDly
0080bc1c g     F .text	0000014c __lshift
0081df10 g     O .bss	00000004 _alt_nticks
0080e768 g     F .text	00000124 read
008172c4 g     F .text	0000008c alt_sys_init
0081856c g     F .text	000000b0 alt_up_character_lcd_shift_display
008040f8 g     F .text	00000098 __floatsisf
00819d00 g     F .text	00000134 __register_exitproc
0081ded9 g     O .bss	00000001 OSTaskCtr
00816e28 g     F .text	00000190 OSTimeDlyHMSM
0080bd68 g     F .text	00000254 __multiply
0081861c g     F .text	00000090 alt_up_character_lcd_erase_pos
008026a0 g     F .text	00001300 __ieee754_pow
008179e0 g     F .text	00000074 altera_avalon_jtag_uart_close
00802218 g     F .text	00000488 pow
0080535c g     F .text	00000038 __mulsi3
0081a794 g       *ABS*	00000000 __ram_rwdata_start
00801808 g     F .text	000000f8 I2C_WriteToDevice
0081a058 g       *ABS*	00000000 __ram_rodata_start
0081df14 g     O .bss	00000028 __malloc_current_mallinfo
0081c292 g     O .rwdata	00000002 OSEventMax
0080b914 g     F .text	0000017c __d2b
00814f40 g     F .text	00000128 OSSemPost
0080fb28 g     F .text	000000e4 OSSchedUnlock
00817388 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00819b3c g     F .text	00000104 alt_get_fd
0081dedc g     O .bss	00000004 OSMemFreeList
0080fc7c g     F .text	000000ac OSStatInit
00818868 g     F .text	0000015c alt_busy_sleep
0081265c g     F .text	000000d4 OSFlagQuery
00805bd8 g     F .text	000000c8 __fpcmp_parts_d
0081c2c8 g     O .rwdata	00000002 OSTaskCreateExtEn
0080cd50 g     F .text	00000070 _close_r
00819c8c g     F .text	00000074 memcmp
0080ff88 g     F .text	0000001c OS_Dummy
00817438 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
008253f0 g       *ABS*	00000000 __alt_stack_base
00817480 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00807d90 g     F .text	0000013c __swsetup_r
008236dc g     O .bss	000001e0 OSQTbl
00801af4 g     F .text	000000f4 I2C_ReadFromDevice
00804b6c g     F .text	00000258 __divdf3
00809af8 g     F .text	000000f0 __sfp
0080b778 g     F .text	00000058 __copybits
0081aba0 g     O .rwdata	00000408 __malloc_av_
00809958 g     F .text	00000004 __sinit_lock_release
008001d8 g     F .text	00001224 MPU9250SelfTest
00801ef0 g     F .text	00000078 i2c_stop
0081dee0 g     O .bss	00000004 OSTCBHighRdy
008047a8 g     F .text	000003c4 __muldf3
0080caf4 g     F .text	00000060 __sread
0081dee4 g     O .bss	00000004 OSQFreeList
00819a1c g     F .text	00000120 alt_find_file
008189e0 g     F .text	000000b4 alt_dev_llist_insert
0080edcc g     F .text	00000108 __malloc_lock
0080e964 g     F .text	000000bc sbrk
0080f0d4 g     F .text	00000144 OSEventNameSet
008096c4 g     F .text	000001fc _fflush_r
0080cc88 g     F .text	000000c8 _calloc_r
0081dee8 g     O .bss	00000001 OSRdyGrp
0081de7c g       *ABS*	00000000 __bss_start
0080b240 g     F .text	00000098 memset
008016ec g     F .text	000000ac main
0081dea4 g     O .bss	00000004 alt_envp
0081de90 g     O .bss	00000004 __malloc_max_total_mem
008173e0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
008020ac g     F .text	0000016c i2c_read
0081a614 g     O .rodata	00000100 OSUnMapTbl
0081c2c2 g     O .rwdata	00000002 OSSemEn
008184bc g     F .text	000000b0 alt_up_character_lcd_shift_cursor
008122b4 g     F .text	000003a8 OSFlagPost
0080ca08 g     F .text	00000008 __sclose
00803ccc g     F .text	00000008 matherr
01000000 g       *ABS*	00000000 __alt_heap_limit
0080ced0 g     F .text	00000014 fclose
00810138 g     F .text	00000110 OS_EventTaskWait
0081ff3c g     O .bss	00002000 task2_stk
0080519c g     F .text	00000074 __truncdfsf2
00810d24 g     F .text	000000c8 OS_TaskStatStkChk
00825260 g     O .bss	00000190 _atexit0
00815ff0 g     F .text	00000170 OSTaskDelReq
00808110 g     F .text	000015b4 _dtoa_r
0080a89c g     F .text	00000740 _malloc_r
0081c278 g     O .rwdata	00000004 alt_errno
0080fc0c g     F .text	00000070 OSStart
0080ed70 g     F .text	0000005c __env_unlock
0080a58c g     F .text	000000b8 _fwalk
008164dc g     F .text	00000218 OSTaskResume
008131d0 g     F .text	000000fc OSMemQuery
0081c2d4 g     O .rwdata	00000002 OSTaskStatEn
0081c2ae g     O .rwdata	00000002 OSMemMax
008140ec g     F .text	00000188 OSQPostFront
0080528c g     F .text	00000060 __divsi3
0081dee9 g     O .bss	00000003 OSRdyTbl
0081c288 g     O .rwdata	00000002 OSDebugEn
0081a2e4 g     O .rodata	00000014 __thenan_df
008182c8 g     F .text	00000040 alt_up_character_lcd_open_dev
00809be8 g     F .text	0000012c _malloc_trim_r
0081a058 g       *ABS*	00000000 __CTOR_END__
00803c80 g     F .text	0000001c finite
0081c2a0 g     O .rwdata	00000002 OSFlagNodeSize
0081c2e8 g     O .rwdata	00000002 OSTmrCfgMax
00818294 g     F .text	00000034 alt_up_character_lcd_init
0080cb54 g     F .text	000000bc strcmp
008134f4 g     F .text	00000214 OSQCreate
00816160 g     F .text	000001b8 OSTaskNameGet
0081a058 g       *ABS*	00000000 __flash_rodata_start
00814274 g     F .text	00000234 OSQPostOpt
0080fd28 g     F .text	00000240 OSTimeTick
0081c2d0 g     O .rwdata	00000002 OSTaskMax
0081a058 g       *ABS*	00000000 __DTOR_LIST__
00814794 g     F .text	00000114 OSSemCreate
0081c2f4 g     O .rwdata	00000002 OSTmrWheelSize
008040d4 g     F .text	00000024 copysign
00804e4c g     F .text	00000088 __nedf2
0081c2ca g     O .rwdata	00000002 OSTaskDelEn
01080000 g       *ABS*	00000000 __alt_mem_sram_0
00815068 g     F .text	00000130 OSSemQuery
00813708 g     F .text	00000300 OSQDel
00813df0 g     F .text	0000017c OSQPendAbort
00817290 g     F .text	00000034 alt_irq_init
0080e8ec g     F .text	00000078 alt_release_fd
008186ac g     F .text	00000034 alt_up_character_lcd_cursor_off
0081a2f8 g     O .rodata	00000100 __clz_tab
0081de84 g     O .bss	00000004 _PathLocale
00819c40 g     F .text	00000014 atexit
0080cc10 g     F .text	00000078 _write_r
0080fa9c g     F .text	0000008c OSSchedLock
0080a6ec g     F .text	0000001c setlocale
0081158c g     F .text	0000013c OSFlagCreate
00801798 g     F .text	00000038 I2C_Start
0081c24c g     O .rwdata	00000004 _impure_ptr
0081de9c g     O .bss	00000004 alt_argc
00803ef4 g     F .text	000001e0 scalbn
00818b58 g     F .text	00000064 _do_dtors
00801df0 g     F .text	00000078 i2c_selectAddress
0081c29a g     O .rwdata	00000002 OSEventMultiEn
008116c8 g     F .text	000002a8 OSFlagDel
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
0081deec g     O .bss	00000004 OSEventFreeList
01104020 g       .exceptions	00000000 alt_irq_entry
0080b494 g     F .text	00000080 __ulp
0080c958 g     F .text	00000040 __isinfd
00811c08 g     F .text	00000644 OSFlagPend
0081c2e6 g     O .rwdata	00000002 OSTmrEn
00809a10 g     F .text	00000018 __fp_unlock_all
0081c264 g     O .rwdata	00000008 alt_fs_list
00810b28 g     F .text	00000080 OS_StrCopy
0081c2b0 g     O .rwdata	00000002 OSMemNameSize
00803cd4 g     F .text	00000010 nan
008199c4 g     F .text	0000001c OSInitHookEnd
01104020 g       *ABS*	00000000 __ram_exceptions_start
0081c2dc g     O .rwdata	00000002 OSTCBPrioTblMax
0080a658 g     F .text	00000010 localeconv
008039a0 g     F .text	000002c8 __ieee754_sqrt
0081c2d8 g     O .rwdata	00000002 OSTaskStatStkChkEn
00818c6c g     F .text	00000050 alt_ic_isr_register
0081c2ac g     O .rwdata	00000002 OSMemEn
0081c2b6 g     O .rwdata	00000002 OSMutexEn
0081c308 g       *ABS*	00000000 _edata
008253f0 g       *ABS*	00000000 _end
0081def0 g     O .bss	00000001 OSIntNesting
011041bc g       *ABS*	00000000 __ram_exceptions_end
00817a54 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00816fb8 g     F .text	00000210 OSTimeDlyResume
00811ab4 g     F .text	00000154 OSFlagNameSet
008166f4 g     F .text	000001fc OSTaskStkChk
00818d58 g     F .text	000000a0 alt_ic_irq_disable
0081c2b2 g     O .rwdata	00000002 OSMemSize
0080ca78 g     F .text	0000007c __swrite
0081c25c g     O .rwdata	00000004 __malloc_trim_threshold
00819514 g     F .text	00000020 altera_nios2_qsys_irq_init
0081def4 g     O .bss	00000004 OSTCBCur
00819c54 g     F .text	00000038 exit
0081c2b4 g     O .rwdata	00000002 OSMemTblSize
0080a4c4 g     F .text	000000c8 _fwalk_reent
008041e4 g     F .text	000000c0 __floatunsisf
0080ba90 g     F .text	0000018c __mdiff
008052ec g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
01104020 g     F .exceptions	00000000 alt_exception
00809950 g     F .text	00000004 __sfp_lock_release
0080f8cc g     F .text	00000054 OSInit
00816b1c g     F .text	00000144 OSTaskQuery
00818380 g     F .text	00000078 alt_up_character_lcd_string
00814628 g     F .text	000000ac OS_QInit
00810ba8 g     F .text	00000058 OS_StrLen
00812fc0 g     F .text	00000120 OSMemNameSet
0081c2ce g     O .rwdata	00000002 OSTaskProfileEn
0081def8 g     O .bss	00000004 OSTime
008017d0 g     F .text	00000038 I2C_Stop
008238bc g     O .bss	00000800 OSTaskIdleStk
0081a028 g     F .text	0000002c _exit
00803c9c g     F .text	00000030 __isnand
00818714 g     F .text	00000154 alt_alarm_start
00811970 g     F .text	00000144 OSFlagNameGet
008171c8 g     F .text	00000064 OSTimeGet
00805394 g     F .text	00000124 __muldi3
0080a708 g     F .text	00000194 __smakebuf_r
00805ddc g     F .text	00000074 strlen
00819954 g     F .text	0000001c OSTaskSwHook
00819180 g     F .text	0000018c open
008240bc g     O .bss	00000b40 OSEventTbl
0080dd84 g     F .text	00000088 __gedf2
00824bfc g     O .bss	00000510 OSTCBTbl
00815198 g     F .text	00000104 OSSemSet
00818c50 g     F .text	0000001c alt_icache_flush_all
00818444 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0081c2fc g     O .rwdata	00000004 alt_priority_mask
008148a8 g     F .text	000002a0 OSSemDel
0081defc g     O .bss	00000004 OSFlagFreeList
00818cbc g     F .text	0000009c alt_ic_irq_enable
0081c294 g     O .rwdata	00000002 OSEventNameSize
00807d6c g     F .text	00000024 __vfprintf_internal
0081df00 g     O .bss	00000001 OSStatRdy
0082510c g     O .bss	00000054 OSTCBPrioTbl
0080ecc4 g     F .text	000000ac __env_lock
0081c2da g     O .rwdata	00000002 OSTaskSwHookEn
008046b4 g     F .text	00000080 __subdf3
00801d44 g     F .text	000000ac I2C_ReadMore
0080b370 g     F .text	000000c4 __lo0bits
0081c300 g     O .rwdata	00000008 alt_alarm_list
0081c2a2 g     O .rwdata	00000002 OSFlagWidth
00818af4 g     F .text	00000064 _do_ctors
0080e078 g     F .text	00000100 close
0081deac g     O .bss	00000004 alt_envsem
0081df04 g     O .bss	00000004 OSIdleCtrRun
0080ff68 g     F .text	00000020 OSVersion
0081c2ec g     O .rwdata	00000002 OSTmrCfgWheelSize
0080e460 g     F .text	00000080 alt_load
00816c60 g     F .text	0000007c OS_TaskStkClr
0080578c g     F .text	00000314 __pack_d
0081c2c6 g     O .rwdata	00000002 OSTaskCreateEn
00810558 g     F .text	00000068 OS_EventWaitListInit
008199e0 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00809954 g     F .text	00000004 __sinit_lock_acquire
0080bff8 g     F .text	0000012c __multadd
008168f0 g     F .text	0000022c OSTaskSuspend
0080b2d8 g     F .text	00000028 _Bfree
00810c00 g     F .text	0000005c OS_TaskIdle
0081c2f2 g     O .rwdata	00000002 OSTmrTblSize
008144a8 g     F .text	00000180 OSQQuery



Disassembly of section .entry:

01104000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1104000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
 1104004:	08406714 	ori	at,at,412
    jmp r1
 1104008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01104020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1104020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1104024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1104028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 110402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1104030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1104034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1104038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 110403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1104040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1104044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1104048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 110404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1104050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1104054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1104058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 110405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1104060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1104064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1104068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 110406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1104070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1104074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1104078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 110407c:	10000326 	beq	r2,zero,110408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1104080:	20000226 	beq	r4,zero,110408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1104084:	11040ec0 	call	11040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1104088:	00000306 	br	1104098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 110408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1104090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1104094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1104098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 110409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 11040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 11040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 11040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 11040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 11040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 11040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 11040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 11040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 11040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 11040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 11040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 11040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 11040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 11040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 11040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 11040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 11040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 11040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 11040e8:	ef80083a 	eret

011040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 11040ec:	defff904 	addi	sp,sp,-28
 11040f0:	dfc00615 	stw	ra,24(sp)
 11040f4:	df000515 	stw	fp,20(sp)
 11040f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 11040fc:	080f9200 	call	80f920 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1104100:	0005313a 	rdctl	r2,ipending
 1104104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1104108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 110410c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 1104110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1104114:	00800044 	movi	r2,1
 1104118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 110411c:	e0ffff17 	ldw	r3,-4(fp)
 1104120:	e0bffe17 	ldw	r2,-8(fp)
 1104124:	1884703a 	and	r2,r3,r2
 1104128:	1005003a 	cmpeq	r2,r2,zero
 110412c:	1000161e 	bne	r2,zero,1104188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 1104130:	e0bffd17 	ldw	r2,-12(fp)
 1104134:	00c020b4 	movhi	r3,130
 1104138:	18d45804 	addi	r3,r3,20832
 110413c:	100490fa 	slli	r2,r2,3
 1104140:	10c5883a 	add	r2,r2,r3
 1104144:	11400017 	ldw	r5,0(r2)
 1104148:	e0bffd17 	ldw	r2,-12(fp)
 110414c:	00c020b4 	movhi	r3,130
 1104150:	18d45804 	addi	r3,r3,20832
 1104154:	100490fa 	slli	r2,r2,3
 1104158:	10c5883a 	add	r2,r2,r3
 110415c:	10800104 	addi	r2,r2,4
 1104160:	11000017 	ldw	r4,0(r2)
 1104164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1104168:	0005313a 	rdctl	r2,ipending
 110416c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1104170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1104174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1104178:	e0bfff17 	ldw	r2,-4(fp)
 110417c:	1004c03a 	cmpne	r2,r2,zero
 1104180:	103fe31e 	bne	r2,zero,1104110 <alt_irq_handler+0x24>
 1104184:	00000706 	br	11041a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1104188:	e0bffe17 	ldw	r2,-8(fp)
 110418c:	1085883a 	add	r2,r2,r2
 1104190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1104194:	e0bffd17 	ldw	r2,-12(fp)
 1104198:	10800044 	addi	r2,r2,1
 110419c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 11041a0:	003fde06 	br	110411c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 11041a4:	080f99c0 	call	80f99c <OSIntExit>
}
 11041a8:	e037883a 	mov	sp,fp
 11041ac:	dfc00117 	ldw	ra,4(sp)
 11041b0:	df000017 	ldw	fp,0(sp)
 11041b4:	dec00204 	addi	sp,sp,8
 11041b8:	f800283a 	ret

Disassembly of section .text:

0080019c <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  80019c:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001a0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001a4:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  8001a8:	d6909214 	ori	gp,gp,16968
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001ac:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001b0:	10b79f14 	ori	r2,r2,56956

    movhi r3, %hi(__bss_end)
  8001b4:	00c020b4 	movhi	r3,130
    ori r3, r3, %lo(__bss_end)
  8001b8:	18d4fc14 	ori	r3,r3,21488

    beq r2, r3, 1f
  8001bc:	10c00326 	beq	r2,r3,8001cc <_start+0x30>

0:
    stw zero, (r2)
  8001c0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001c4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001c8:	10fffd36 	bltu	r2,r3,8001c0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001cc:	080e4600 	call	80e460 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001d0:	080e6a00 	call	80e6a0 <alt_main>

008001d4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001d4:	003fff06 	br	8001d4 <alt_after_alt_main>

008001d8 <MPU9250SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
// Should return percent deviation from factory trim values, +/- 14 or less
// deviation is a pass.
void MPU9250SelfTest(float * destination)
{
  8001d8:	deffdf04 	addi	sp,sp,-132
  8001dc:	dfc02015 	stw	ra,128(sp)
  8001e0:	df001f15 	stw	fp,124(sp)
  8001e4:	dc801e15 	stw	r18,120(sp)
  8001e8:	dc401d15 	stw	r17,116(sp)
  8001ec:	dc001c15 	stw	r16,112(sp)
  8001f0:	df001c04 	addi	fp,sp,112
  8001f4:	e13fff15 	stw	r4,-4(fp)
  alt_u8 deviceAddress = 0xD0;
  8001f8:	00bff404 	movi	r2,-48
  8001fc:	e0bfe845 	stb	r2,-95(fp)
  alt_u8 rawData[6];
  alt_u8 selfTest[6];
  alt_u32 gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
  800200:	e03fec15 	stw	zero,-80(fp)
  800204:	e03fed15 	stw	zero,-76(fp)
  800208:	e03fee15 	stw	zero,-72(fp)
  80020c:	e03fef15 	stw	zero,-68(fp)
  800210:	e03ff015 	stw	zero,-64(fp)
  800214:	e03ff115 	stw	zero,-60(fp)
  800218:	e03ff215 	stw	zero,-56(fp)
  80021c:	e03ff315 	stw	zero,-52(fp)
  800220:	e03ff415 	stw	zero,-48(fp)
  800224:	e03ff515 	stw	zero,-44(fp)
  800228:	e03ff615 	stw	zero,-40(fp)
  80022c:	e03ff715 	stw	zero,-36(fp)
  float factoryTrim[6];
  alt_u8 FS = 0;
  800230:	e03fe805 	stb	zero,-96(fp)
  alt_u8 ReadBuf[1];
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  800234:	01004474 	movhi	r4,273
  800238:	21241c04 	addi	r4,r4,-28560
  80023c:	01404474 	movhi	r5,273
  800240:	29641804 	addi	r5,r5,-28576
  800244:	08017980 	call	801798 <I2C_Start>
  // Set gyro sample rate to 1 kHz
  if(!I2C_ReadFromDeviceRegister(I2C_SCL_BASE,I2C_SDA_BASE, deviceAddress, 0x75, (alt_u8*)&ReadBuf, 1, true)){
  800248:	e0bfe843 	ldbu	r2,-95(fp)
  80024c:	11803fcc 	andi	r6,r2,255
  800250:	3180201c 	xori	r6,r6,128
  800254:	31bfe004 	addi	r6,r6,-128
  800258:	e0bffe04 	addi	r2,fp,-8
  80025c:	d8800015 	stw	r2,0(sp)
  800260:	00800044 	movi	r2,1
  800264:	d8800115 	stw	r2,4(sp)
  800268:	00800044 	movi	r2,1
  80026c:	d8800215 	stw	r2,8(sp)
  800270:	01004474 	movhi	r4,273
  800274:	21241c04 	addi	r4,r4,-28560
  800278:	01404474 	movhi	r5,273
  80027c:	29641804 	addi	r5,r5,-28576
  800280:	01c01d44 	movi	r7,117
  800284:	0801be80 	call	801be8 <I2C_ReadFromDeviceRegister>

  }
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  800288:	01004474 	movhi	r4,273
  80028c:	21241c04 	addi	r4,r4,-28560
  800290:	01404474 	movhi	r5,273
  800294:	29641804 	addi	r5,r5,-28576
  800298:	08017d00 	call	8017d0 <I2C_Stop>
  printf("WHO AM I: %0x\n", ReadBuf[0]);
  80029c:	e0bffe03 	ldbu	r2,-8(fp)
  8002a0:	11403fcc 	andi	r5,r2,255
  8002a4:	010020b4 	movhi	r4,130
  8002a8:	21281604 	addi	r4,r4,-24488
  8002ac:	0805cb00 	call	805cb0 <printf>
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  8002b0:	01004474 	movhi	r4,273
  8002b4:	21241c04 	addi	r4,r4,-28560
  8002b8:	01404474 	movhi	r5,273
  8002bc:	29641804 	addi	r5,r5,-28576
  8002c0:	08017980 	call	801798 <I2C_Start>
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, SMPLRT_DIV,(alt_u8*) 0x00, 1);
  8002c4:	e0bfe843 	ldbu	r2,-95(fp)
  8002c8:	11803fcc 	andi	r6,r2,255
  8002cc:	3180201c 	xori	r6,r6,128
  8002d0:	31bfe004 	addi	r6,r6,-128
  8002d4:	d8000015 	stw	zero,0(sp)
  8002d8:	00800044 	movi	r2,1
  8002dc:	d8800115 	stw	r2,4(sp)
  8002e0:	01004474 	movhi	r4,273
  8002e4:	21241c04 	addi	r4,r4,-28560
  8002e8:	01404474 	movhi	r5,273
  8002ec:	29641804 	addi	r5,r5,-28576
  8002f0:	01c00644 	movi	r7,25
  8002f4:	08019000 	call	801900 <I2C_WriteToDeviceRegister>
  // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, CONFIG, (alt_u8*)0x02, 1);
  8002f8:	e0bfe843 	ldbu	r2,-95(fp)
  8002fc:	11803fcc 	andi	r6,r2,255
  800300:	3180201c 	xori	r6,r6,128
  800304:	31bfe004 	addi	r6,r6,-128
  800308:	00800084 	movi	r2,2
  80030c:	d8800015 	stw	r2,0(sp)
  800310:	00800044 	movi	r2,1
  800314:	d8800115 	stw	r2,4(sp)
  800318:	01004474 	movhi	r4,273
  80031c:	21241c04 	addi	r4,r4,-28560
  800320:	01404474 	movhi	r5,273
  800324:	29641804 	addi	r5,r5,-28576
  800328:	01c00684 	movi	r7,26
  80032c:	08019000 	call	801900 <I2C_WriteToDeviceRegister>
  // Set full scale range for the gyro to 250 dps
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, GYRO_CONFIG, (alt_u8*) (1<<FS), 1);
  800330:	e0bfe843 	ldbu	r2,-95(fp)
  800334:	11803fcc 	andi	r6,r2,255
  800338:	3180201c 	xori	r6,r6,128
  80033c:	31bfe004 	addi	r6,r6,-128
  800340:	e0ffe803 	ldbu	r3,-96(fp)
  800344:	00800044 	movi	r2,1
  800348:	10c4983a 	sll	r2,r2,r3
  80034c:	d8800015 	stw	r2,0(sp)
  800350:	00800044 	movi	r2,1
  800354:	d8800115 	stw	r2,4(sp)
  800358:	01004474 	movhi	r4,273
  80035c:	21241c04 	addi	r4,r4,-28560
  800360:	01404474 	movhi	r5,273
  800364:	29641804 	addi	r5,r5,-28576
  800368:	01c006c4 	movi	r7,27
  80036c:	08019000 	call	801900 <I2C_WriteToDeviceRegister>
  // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, ACCEL_CONFIG2, (alt_u8*)0x02, 1);
  800370:	e0bfe843 	ldbu	r2,-95(fp)
  800374:	11803fcc 	andi	r6,r2,255
  800378:	3180201c 	xori	r6,r6,128
  80037c:	31bfe004 	addi	r6,r6,-128
  800380:	00800084 	movi	r2,2
  800384:	d8800015 	stw	r2,0(sp)
  800388:	00800044 	movi	r2,1
  80038c:	d8800115 	stw	r2,4(sp)
  800390:	01004474 	movhi	r4,273
  800394:	21241c04 	addi	r4,r4,-28560
  800398:	01404474 	movhi	r5,273
  80039c:	29641804 	addi	r5,r5,-28576
  8003a0:	01c00744 	movi	r7,29
  8003a4:	08019000 	call	801900 <I2C_WriteToDeviceRegister>
  // Set full scale range for the accelerometer to 2 g
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, ACCEL_CONFIG,(alt_u8*) (1<<FS), 1);
  8003a8:	e0bfe843 	ldbu	r2,-95(fp)
  8003ac:	11803fcc 	andi	r6,r2,255
  8003b0:	3180201c 	xori	r6,r6,128
  8003b4:	31bfe004 	addi	r6,r6,-128
  8003b8:	e0ffe803 	ldbu	r3,-96(fp)
  8003bc:	00800044 	movi	r2,1
  8003c0:	10c4983a 	sll	r2,r2,r3
  8003c4:	d8800015 	stw	r2,0(sp)
  8003c8:	00800044 	movi	r2,1
  8003cc:	d8800115 	stw	r2,4(sp)
  8003d0:	01004474 	movhi	r4,273
  8003d4:	21241c04 	addi	r4,r4,-28560
  8003d8:	01404474 	movhi	r5,273
  8003dc:	29641804 	addi	r5,r5,-28576
  8003e0:	01c00704 	movi	r7,28
  8003e4:	08019000 	call	801900 <I2C_WriteToDeviceRegister>
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  8003e8:	01004474 	movhi	r4,273
  8003ec:	21241c04 	addi	r4,r4,-28560
  8003f0:	01404474 	movhi	r5,273
  8003f4:	29641804 	addi	r5,r5,-28576
  8003f8:	08017d00 	call	8017d0 <I2C_Stop>


  int ii;
  // Get average current values of gyro and acclerometer
  for ( ii = 0; ii < 200; ii= ii+1) {
  8003fc:	e03fe715 	stw	zero,-100(fp)
  800400:	00007a06 	br	8005ec <MPU9250SelfTest+0x414>

  	printf("BHW::ii = %d \n", ii );
  800404:	010020b4 	movhi	r4,130
  800408:	21281a04 	addi	r4,r4,-24472
  80040c:	e17fe717 	ldw	r5,-100(fp)
  800410:	0805cb00 	call	805cb0 <printf>
  	I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  800414:	01004474 	movhi	r4,273
  800418:	21241c04 	addi	r4,r4,-28560
  80041c:	01404474 	movhi	r5,273
  800420:	29641804 	addi	r5,r5,-28576
  800424:	08017980 	call	801798 <I2C_Start>
    // Read the six raw data registers into data array
	I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, 0xD0, ACCEL_XOUT_H, (alt_u8*)&rawData[0],6, true);
  800428:	e0bfe884 	addi	r2,fp,-94
  80042c:	d8800015 	stw	r2,0(sp)
  800430:	00800184 	movi	r2,6
  800434:	d8800115 	stw	r2,4(sp)
  800438:	00800044 	movi	r2,1
  80043c:	d8800215 	stw	r2,8(sp)
  800440:	01004474 	movhi	r4,273
  800444:	21241c04 	addi	r4,r4,-28560
  800448:	01404474 	movhi	r5,273
  80044c:	29641804 	addi	r5,r5,-28576
  800450:	01bff404 	movi	r6,-48
  800454:	01c00ec4 	movi	r7,59
  800458:	0801be80 	call	801be8 <I2C_ReadFromDeviceRegister>
    I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  80045c:	01004474 	movhi	r4,273
  800460:	21241c04 	addi	r4,r4,-28560
  800464:	01404474 	movhi	r5,273
  800468:	29641804 	addi	r5,r5,-28576
  80046c:	08017d00 	call	8017d0 <I2C_Stop>

	// Turn the MSB and LSB into a signed 16-bit value
    aAvg[0] += (alt_u16)(((alt_u16)rawData[0] << 8) | rawData[1]) ;
  800470:	e13fef17 	ldw	r4,-68(fp)
  800474:	e0bfe883 	ldbu	r2,-94(fp)
  800478:	10803fcc 	andi	r2,r2,255
  80047c:	1004923a 	slli	r2,r2,8
  800480:	1007883a 	mov	r3,r2
  800484:	e0bfe8c3 	ldbu	r2,-93(fp)
  800488:	10803fcc 	andi	r2,r2,255
  80048c:	1884b03a 	or	r2,r3,r2
  800490:	10bfffcc 	andi	r2,r2,65535
  800494:	2085883a 	add	r2,r4,r2
  800498:	e0bfef15 	stw	r2,-68(fp)
    aAvg[1] += (alt_u16)(((alt_u16)rawData[2] << 8) | rawData[3]) ;
  80049c:	e13ff017 	ldw	r4,-64(fp)
  8004a0:	e0bfe903 	ldbu	r2,-92(fp)
  8004a4:	10803fcc 	andi	r2,r2,255
  8004a8:	1004923a 	slli	r2,r2,8
  8004ac:	1007883a 	mov	r3,r2
  8004b0:	e0bfe943 	ldbu	r2,-91(fp)
  8004b4:	10803fcc 	andi	r2,r2,255
  8004b8:	1884b03a 	or	r2,r3,r2
  8004bc:	10bfffcc 	andi	r2,r2,65535
  8004c0:	2085883a 	add	r2,r4,r2
  8004c4:	e0bff015 	stw	r2,-64(fp)
    aAvg[2] += (alt_u16)(((alt_u16)rawData[4] << 8) | rawData[5]) ;
  8004c8:	e13ff117 	ldw	r4,-60(fp)
  8004cc:	e0bfe983 	ldbu	r2,-90(fp)
  8004d0:	10803fcc 	andi	r2,r2,255
  8004d4:	1004923a 	slli	r2,r2,8
  8004d8:	1007883a 	mov	r3,r2
  8004dc:	e0bfe9c3 	ldbu	r2,-89(fp)
  8004e0:	10803fcc 	andi	r2,r2,255
  8004e4:	1884b03a 	or	r2,r3,r2
  8004e8:	10bfffcc 	andi	r2,r2,65535
  8004ec:	2085883a 	add	r2,r4,r2
  8004f0:	e0bff115 	stw	r2,-60(fp)

  	I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  8004f4:	01004474 	movhi	r4,273
  8004f8:	21241c04 	addi	r4,r4,-28560
  8004fc:	01404474 	movhi	r5,273
  800500:	29641804 	addi	r5,r5,-28576
  800504:	08017980 	call	801798 <I2C_Start>

    // Read the six raw data registers sequentially into data array
	I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, GYRO_XOUT_H, (alt_u8*)&rawData[0], 6, true);
  800508:	e0bfe843 	ldbu	r2,-95(fp)
  80050c:	11803fcc 	andi	r6,r2,255
  800510:	3180201c 	xori	r6,r6,128
  800514:	31bfe004 	addi	r6,r6,-128
  800518:	e0bfe884 	addi	r2,fp,-94
  80051c:	d8800015 	stw	r2,0(sp)
  800520:	00800184 	movi	r2,6
  800524:	d8800115 	stw	r2,4(sp)
  800528:	00800044 	movi	r2,1
  80052c:	d8800215 	stw	r2,8(sp)
  800530:	01004474 	movhi	r4,273
  800534:	21241c04 	addi	r4,r4,-28560
  800538:	01404474 	movhi	r5,273
  80053c:	29641804 	addi	r5,r5,-28576
  800540:	01c010c4 	movi	r7,67
  800544:	0801be80 	call	801be8 <I2C_ReadFromDeviceRegister>
    I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  800548:	01004474 	movhi	r4,273
  80054c:	21241c04 	addi	r4,r4,-28560
  800550:	01404474 	movhi	r5,273
  800554:	29641804 	addi	r5,r5,-28576
  800558:	08017d00 	call	8017d0 <I2C_Stop>

	// Turn the MSB and LSB into a signed 16-bit value
    gAvg[0] += (alt_u16)(((alt_u16)rawData[0] << 8) | rawData[1]) ;
  80055c:	e13fec17 	ldw	r4,-80(fp)
  800560:	e0bfe883 	ldbu	r2,-94(fp)
  800564:	10803fcc 	andi	r2,r2,255
  800568:	1004923a 	slli	r2,r2,8
  80056c:	1007883a 	mov	r3,r2
  800570:	e0bfe8c3 	ldbu	r2,-93(fp)
  800574:	10803fcc 	andi	r2,r2,255
  800578:	1884b03a 	or	r2,r3,r2
  80057c:	10bfffcc 	andi	r2,r2,65535
  800580:	2085883a 	add	r2,r4,r2
  800584:	e0bfec15 	stw	r2,-80(fp)
    gAvg[1] += (alt_u16)(((alt_u16)rawData[2] << 8) | rawData[3]) ;
  800588:	e13fed17 	ldw	r4,-76(fp)
  80058c:	e0bfe903 	ldbu	r2,-92(fp)
  800590:	10803fcc 	andi	r2,r2,255
  800594:	1004923a 	slli	r2,r2,8
  800598:	1007883a 	mov	r3,r2
  80059c:	e0bfe943 	ldbu	r2,-91(fp)
  8005a0:	10803fcc 	andi	r2,r2,255
  8005a4:	1884b03a 	or	r2,r3,r2
  8005a8:	10bfffcc 	andi	r2,r2,65535
  8005ac:	2085883a 	add	r2,r4,r2
  8005b0:	e0bfed15 	stw	r2,-76(fp)
    gAvg[2] += (alt_u16)(((alt_u16)rawData[4] << 8) | rawData[5]) ;
  8005b4:	e13fee17 	ldw	r4,-72(fp)
  8005b8:	e0bfe983 	ldbu	r2,-90(fp)
  8005bc:	10803fcc 	andi	r2,r2,255
  8005c0:	1004923a 	slli	r2,r2,8
  8005c4:	1007883a 	mov	r3,r2
  8005c8:	e0bfe9c3 	ldbu	r2,-89(fp)
  8005cc:	10803fcc 	andi	r2,r2,255
  8005d0:	1884b03a 	or	r2,r3,r2
  8005d4:	10bfffcc 	andi	r2,r2,65535
  8005d8:	2085883a 	add	r2,r4,r2
  8005dc:	e0bfee15 	stw	r2,-72(fp)
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);


  int ii;
  // Get average current values of gyro and acclerometer
  for ( ii = 0; ii < 200; ii= ii+1) {
  8005e0:	e0bfe717 	ldw	r2,-100(fp)
  8005e4:	10800044 	addi	r2,r2,1
  8005e8:	e0bfe715 	stw	r2,-100(fp)
  8005ec:	e0bfe717 	ldw	r2,-100(fp)
  8005f0:	10803210 	cmplti	r2,r2,200
  8005f4:	103f831e 	bne	r2,zero,800404 <MPU9250SelfTest+0x22c>
    gAvg[2] += (alt_u16)(((alt_u16)rawData[4] << 8) | rawData[5]) ;

  }

  // Get average of 200 values and store as average current readings
  for ( ii =0; ii < 3; ii = ii+1)
  8005f8:	e03fe715 	stw	zero,-100(fp)
  8005fc:	00002506 	br	800694 <MPU9250SelfTest+0x4bc>
  {
    aAvg[ii] /= 200;
  800600:	e43fe717 	ldw	r16,-100(fp)
  800604:	e0bfe717 	ldw	r2,-100(fp)
  800608:	1085883a 	add	r2,r2,r2
  80060c:	1085883a 	add	r2,r2,r2
  800610:	e0ffe704 	addi	r3,fp,-100
  800614:	10c5883a 	add	r2,r2,r3
  800618:	10800804 	addi	r2,r2,32
  80061c:	11000017 	ldw	r4,0(r2)
  800620:	01403204 	movi	r5,200
  800624:	080534c0 	call	80534c <__udivsi3>
  800628:	1007883a 	mov	r3,r2
  80062c:	8405883a 	add	r2,r16,r16
  800630:	1085883a 	add	r2,r2,r2
  800634:	e13fe704 	addi	r4,fp,-100
  800638:	1105883a 	add	r2,r2,r4
  80063c:	10800804 	addi	r2,r2,32
  800640:	10c00015 	stw	r3,0(r2)
    gAvg[ii] /= 200;
  800644:	e43fe717 	ldw	r16,-100(fp)
  800648:	e0bfe717 	ldw	r2,-100(fp)
  80064c:	1085883a 	add	r2,r2,r2
  800650:	1085883a 	add	r2,r2,r2
  800654:	e0ffe704 	addi	r3,fp,-100
  800658:	10c5883a 	add	r2,r2,r3
  80065c:	10800504 	addi	r2,r2,20
  800660:	11000017 	ldw	r4,0(r2)
  800664:	01403204 	movi	r5,200
  800668:	080534c0 	call	80534c <__udivsi3>
  80066c:	1007883a 	mov	r3,r2
  800670:	8405883a 	add	r2,r16,r16
  800674:	1085883a 	add	r2,r2,r2
  800678:	e13fe704 	addi	r4,fp,-100
  80067c:	1105883a 	add	r2,r2,r4
  800680:	10800504 	addi	r2,r2,20
  800684:	10c00015 	stw	r3,0(r2)
    gAvg[2] += (alt_u16)(((alt_u16)rawData[4] << 8) | rawData[5]) ;

  }

  // Get average of 200 values and store as average current readings
  for ( ii =0; ii < 3; ii = ii+1)
  800688:	e0bfe717 	ldw	r2,-100(fp)
  80068c:	10800044 	addi	r2,r2,1
  800690:	e0bfe715 	stw	r2,-100(fp)
  800694:	e0bfe717 	ldw	r2,-100(fp)
  800698:	108000d0 	cmplti	r2,r2,3
  80069c:	103fd81e 	bne	r2,zero,800600 <MPU9250SelfTest+0x428>
  {
    aAvg[ii] /= 200;
    gAvg[ii] /= 200;
  }
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  8006a0:	01004474 	movhi	r4,273
  8006a4:	21241c04 	addi	r4,r4,-28560
  8006a8:	01404474 	movhi	r5,273
  8006ac:	29641804 	addi	r5,r5,-28576
  8006b0:	08017980 	call	801798 <I2C_Start>


  // Configure the accelerometer for self-test
  // Enable self test on all three axes and set accelerometer range to +/- 2 g
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, ACCEL_CONFIG, (alt_u8*)0xE0, 1);
  8006b4:	e0bfe843 	ldbu	r2,-95(fp)
  8006b8:	11803fcc 	andi	r6,r2,255
  8006bc:	3180201c 	xori	r6,r6,128
  8006c0:	31bfe004 	addi	r6,r6,-128
  8006c4:	00803804 	movi	r2,224
  8006c8:	d8800015 	stw	r2,0(sp)
  8006cc:	00800044 	movi	r2,1
  8006d0:	d8800115 	stw	r2,4(sp)
  8006d4:	01004474 	movhi	r4,273
  8006d8:	21241c04 	addi	r4,r4,-28560
  8006dc:	01404474 	movhi	r5,273
  8006e0:	29641804 	addi	r5,r5,-28576
  8006e4:	01c00704 	movi	r7,28
  8006e8:	08019000 	call	801900 <I2C_WriteToDeviceRegister>
  // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, GYRO_CONFIG, (alt_u8*)0xE0, 1);
  8006ec:	e0bfe843 	ldbu	r2,-95(fp)
  8006f0:	11803fcc 	andi	r6,r2,255
  8006f4:	3180201c 	xori	r6,r6,128
  8006f8:	31bfe004 	addi	r6,r6,-128
  8006fc:	00803804 	movi	r2,224
  800700:	d8800015 	stw	r2,0(sp)
  800704:	00800044 	movi	r2,1
  800708:	d8800115 	stw	r2,4(sp)
  80070c:	01004474 	movhi	r4,273
  800710:	21241c04 	addi	r4,r4,-28560
  800714:	01404474 	movhi	r5,273
  800718:	29641804 	addi	r5,r5,-28576
  80071c:	01c006c4 	movi	r7,27
  800720:	08019000 	call	801900 <I2C_WriteToDeviceRegister>

  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  800724:	01004474 	movhi	r4,273
  800728:	21241c04 	addi	r4,r4,-28560
  80072c:	01404474 	movhi	r5,273
  800730:	29641804 	addi	r5,r5,-28576
  800734:	08017d00 	call	8017d0 <I2C_Stop>
  OSTimeDlyHMSM(0, 0, 0, 25);;  // Delay a while to let the device stabilize
  800738:	0009883a 	mov	r4,zero
  80073c:	000b883a 	mov	r5,zero
  800740:	000d883a 	mov	r6,zero
  800744:	01c00644 	movi	r7,25
  800748:	0816e280 	call	816e28 <OSTimeDlyHMSM>


  // Get average self-test values of gyro and acclerometer
  for ( ii =0; ii < 200; ii = ii+1)
  80074c:	e03fe715 	stw	zero,-100(fp)
  800750:	00007906 	br	800938 <MPU9250SelfTest+0x760>
  {
	I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  800754:	01004474 	movhi	r4,273
  800758:	21241c04 	addi	r4,r4,-28560
  80075c:	01404474 	movhi	r5,273
  800760:	29641804 	addi	r5,r5,-28576
  800764:	08017980 	call	801798 <I2C_Start>
    // Read the six raw data registers into data array
	I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, ACCEL_XOUT_H, &rawData[0], 6, true);
  800768:	e0bfe843 	ldbu	r2,-95(fp)
  80076c:	11803fcc 	andi	r6,r2,255
  800770:	3180201c 	xori	r6,r6,128
  800774:	31bfe004 	addi	r6,r6,-128
  800778:	e0bfe884 	addi	r2,fp,-94
  80077c:	d8800015 	stw	r2,0(sp)
  800780:	00800184 	movi	r2,6
  800784:	d8800115 	stw	r2,4(sp)
  800788:	00800044 	movi	r2,1
  80078c:	d8800215 	stw	r2,8(sp)
  800790:	01004474 	movhi	r4,273
  800794:	21241c04 	addi	r4,r4,-28560
  800798:	01404474 	movhi	r5,273
  80079c:	29641804 	addi	r5,r5,-28576
  8007a0:	01c00ec4 	movi	r7,59
  8007a4:	0801be80 	call	801be8 <I2C_ReadFromDeviceRegister>
    I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  8007a8:	01004474 	movhi	r4,273
  8007ac:	21241c04 	addi	r4,r4,-28560
  8007b0:	01404474 	movhi	r5,273
  8007b4:	29641804 	addi	r5,r5,-28576
  8007b8:	08017d00 	call	8017d0 <I2C_Stop>

	// Turn the MSB and LSB into a signed 16-bit value
    aSTAvg[0] += (alt_u16)(((alt_u16)rawData[0] << 8) | rawData[1]) ;
  8007bc:	e13ff217 	ldw	r4,-56(fp)
  8007c0:	e0bfe883 	ldbu	r2,-94(fp)
  8007c4:	10803fcc 	andi	r2,r2,255
  8007c8:	1004923a 	slli	r2,r2,8
  8007cc:	1007883a 	mov	r3,r2
  8007d0:	e0bfe8c3 	ldbu	r2,-93(fp)
  8007d4:	10803fcc 	andi	r2,r2,255
  8007d8:	1884b03a 	or	r2,r3,r2
  8007dc:	10bfffcc 	andi	r2,r2,65535
  8007e0:	2085883a 	add	r2,r4,r2
  8007e4:	e0bff215 	stw	r2,-56(fp)
    aSTAvg[1] += (alt_u16)(((alt_u16)rawData[2] << 8) | rawData[3]) ;
  8007e8:	e13ff317 	ldw	r4,-52(fp)
  8007ec:	e0bfe903 	ldbu	r2,-92(fp)
  8007f0:	10803fcc 	andi	r2,r2,255
  8007f4:	1004923a 	slli	r2,r2,8
  8007f8:	1007883a 	mov	r3,r2
  8007fc:	e0bfe943 	ldbu	r2,-91(fp)
  800800:	10803fcc 	andi	r2,r2,255
  800804:	1884b03a 	or	r2,r3,r2
  800808:	10bfffcc 	andi	r2,r2,65535
  80080c:	2085883a 	add	r2,r4,r2
  800810:	e0bff315 	stw	r2,-52(fp)
    aSTAvg[2] += (alt_u16)(((alt_u16)rawData[4] << 8) | rawData[5]) ;
  800814:	e13ff417 	ldw	r4,-48(fp)
  800818:	e0bfe983 	ldbu	r2,-90(fp)
  80081c:	10803fcc 	andi	r2,r2,255
  800820:	1004923a 	slli	r2,r2,8
  800824:	1007883a 	mov	r3,r2
  800828:	e0bfe9c3 	ldbu	r2,-89(fp)
  80082c:	10803fcc 	andi	r2,r2,255
  800830:	1884b03a 	or	r2,r3,r2
  800834:	10bfffcc 	andi	r2,r2,65535
  800838:	2085883a 	add	r2,r4,r2
  80083c:	e0bff415 	stw	r2,-48(fp)

    I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  800840:	01004474 	movhi	r4,273
  800844:	21241c04 	addi	r4,r4,-28560
  800848:	01404474 	movhi	r5,273
  80084c:	29641804 	addi	r5,r5,-28576
  800850:	08017980 	call	801798 <I2C_Start>
    // Read the six raw data registers sequentially into data array
	I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, GYRO_XOUT_H, &rawData[0], 6, true);
  800854:	e0bfe843 	ldbu	r2,-95(fp)
  800858:	11803fcc 	andi	r6,r2,255
  80085c:	3180201c 	xori	r6,r6,128
  800860:	31bfe004 	addi	r6,r6,-128
  800864:	e0bfe884 	addi	r2,fp,-94
  800868:	d8800015 	stw	r2,0(sp)
  80086c:	00800184 	movi	r2,6
  800870:	d8800115 	stw	r2,4(sp)
  800874:	00800044 	movi	r2,1
  800878:	d8800215 	stw	r2,8(sp)
  80087c:	01004474 	movhi	r4,273
  800880:	21241c04 	addi	r4,r4,-28560
  800884:	01404474 	movhi	r5,273
  800888:	29641804 	addi	r5,r5,-28576
  80088c:	01c010c4 	movi	r7,67
  800890:	0801be80 	call	801be8 <I2C_ReadFromDeviceRegister>
    I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  800894:	01004474 	movhi	r4,273
  800898:	21241c04 	addi	r4,r4,-28560
  80089c:	01404474 	movhi	r5,273
  8008a0:	29641804 	addi	r5,r5,-28576
  8008a4:	08017d00 	call	8017d0 <I2C_Stop>

	// Turn the MSB and LSB into a signed 16-bit value
    gSTAvg[0] += (alt_u16)(((alt_u16)rawData[0] << 8) | rawData[1]) ;
  8008a8:	e13ff517 	ldw	r4,-44(fp)
  8008ac:	e0bfe883 	ldbu	r2,-94(fp)
  8008b0:	10803fcc 	andi	r2,r2,255
  8008b4:	1004923a 	slli	r2,r2,8
  8008b8:	1007883a 	mov	r3,r2
  8008bc:	e0bfe8c3 	ldbu	r2,-93(fp)
  8008c0:	10803fcc 	andi	r2,r2,255
  8008c4:	1884b03a 	or	r2,r3,r2
  8008c8:	10bfffcc 	andi	r2,r2,65535
  8008cc:	2085883a 	add	r2,r4,r2
  8008d0:	e0bff515 	stw	r2,-44(fp)
    gSTAvg[1] += (alt_u16)(((alt_u16)rawData[2] << 8) | rawData[3]) ;
  8008d4:	e13ff617 	ldw	r4,-40(fp)
  8008d8:	e0bfe903 	ldbu	r2,-92(fp)
  8008dc:	10803fcc 	andi	r2,r2,255
  8008e0:	1004923a 	slli	r2,r2,8
  8008e4:	1007883a 	mov	r3,r2
  8008e8:	e0bfe943 	ldbu	r2,-91(fp)
  8008ec:	10803fcc 	andi	r2,r2,255
  8008f0:	1884b03a 	or	r2,r3,r2
  8008f4:	10bfffcc 	andi	r2,r2,65535
  8008f8:	2085883a 	add	r2,r4,r2
  8008fc:	e0bff615 	stw	r2,-40(fp)
    gSTAvg[2] += (alt_u16)(((alt_u16)rawData[4] << 8) | rawData[5]) ;
  800900:	e13ff717 	ldw	r4,-36(fp)
  800904:	e0bfe983 	ldbu	r2,-90(fp)
  800908:	10803fcc 	andi	r2,r2,255
  80090c:	1004923a 	slli	r2,r2,8
  800910:	1007883a 	mov	r3,r2
  800914:	e0bfe9c3 	ldbu	r2,-89(fp)
  800918:	10803fcc 	andi	r2,r2,255
  80091c:	1884b03a 	or	r2,r3,r2
  800920:	10bfffcc 	andi	r2,r2,65535
  800924:	2085883a 	add	r2,r4,r2
  800928:	e0bff715 	stw	r2,-36(fp)
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  OSTimeDlyHMSM(0, 0, 0, 25);;  // Delay a while to let the device stabilize


  // Get average self-test values of gyro and acclerometer
  for ( ii =0; ii < 200; ii = ii+1)
  80092c:	e0bfe717 	ldw	r2,-100(fp)
  800930:	10800044 	addi	r2,r2,1
  800934:	e0bfe715 	stw	r2,-100(fp)
  800938:	e0bfe717 	ldw	r2,-100(fp)
  80093c:	10803210 	cmplti	r2,r2,200
  800940:	103f841e 	bne	r2,zero,800754 <MPU9250SelfTest+0x57c>
    gSTAvg[1] += (alt_u16)(((alt_u16)rawData[2] << 8) | rawData[3]) ;
    gSTAvg[2] += (alt_u16)(((alt_u16)rawData[4] << 8) | rawData[5]) ;
  }

  // Get average of 200 values and store as average self-test readings
  for ( ii =0; ii < 3; ii = ii+1)
  800944:	e03fe715 	stw	zero,-100(fp)
  800948:	00002506 	br	8009e0 <MPU9250SelfTest+0x808>
  {
    aSTAvg[ii] /= 200;
  80094c:	e43fe717 	ldw	r16,-100(fp)
  800950:	e0bfe717 	ldw	r2,-100(fp)
  800954:	1085883a 	add	r2,r2,r2
  800958:	1085883a 	add	r2,r2,r2
  80095c:	e0ffe704 	addi	r3,fp,-100
  800960:	10c5883a 	add	r2,r2,r3
  800964:	10800b04 	addi	r2,r2,44
  800968:	11000017 	ldw	r4,0(r2)
  80096c:	01403204 	movi	r5,200
  800970:	080534c0 	call	80534c <__udivsi3>
  800974:	1007883a 	mov	r3,r2
  800978:	8405883a 	add	r2,r16,r16
  80097c:	1085883a 	add	r2,r2,r2
  800980:	e13fe704 	addi	r4,fp,-100
  800984:	1105883a 	add	r2,r2,r4
  800988:	10800b04 	addi	r2,r2,44
  80098c:	10c00015 	stw	r3,0(r2)
    gSTAvg[ii] /= 200;
  800990:	e43fe717 	ldw	r16,-100(fp)
  800994:	e0bfe717 	ldw	r2,-100(fp)
  800998:	1085883a 	add	r2,r2,r2
  80099c:	1085883a 	add	r2,r2,r2
  8009a0:	e0ffe704 	addi	r3,fp,-100
  8009a4:	10c5883a 	add	r2,r2,r3
  8009a8:	10800e04 	addi	r2,r2,56
  8009ac:	11000017 	ldw	r4,0(r2)
  8009b0:	01403204 	movi	r5,200
  8009b4:	080534c0 	call	80534c <__udivsi3>
  8009b8:	1007883a 	mov	r3,r2
  8009bc:	8405883a 	add	r2,r16,r16
  8009c0:	1085883a 	add	r2,r2,r2
  8009c4:	e13fe704 	addi	r4,fp,-100
  8009c8:	1105883a 	add	r2,r2,r4
  8009cc:	10800e04 	addi	r2,r2,56
  8009d0:	10c00015 	stw	r3,0(r2)
    gSTAvg[1] += (alt_u16)(((alt_u16)rawData[2] << 8) | rawData[3]) ;
    gSTAvg[2] += (alt_u16)(((alt_u16)rawData[4] << 8) | rawData[5]) ;
  }

  // Get average of 200 values and store as average self-test readings
  for ( ii =0; ii < 3; ii = ii+1)
  8009d4:	e0bfe717 	ldw	r2,-100(fp)
  8009d8:	10800044 	addi	r2,r2,1
  8009dc:	e0bfe715 	stw	r2,-100(fp)
  8009e0:	e0bfe717 	ldw	r2,-100(fp)
  8009e4:	108000d0 	cmplti	r2,r2,3
  8009e8:	103fd81e 	bne	r2,zero,80094c <MPU9250SelfTest+0x774>
  {
    aSTAvg[ii] /= 200;
    gSTAvg[ii] /= 200;
  }

  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  8009ec:	01004474 	movhi	r4,273
  8009f0:	21241c04 	addi	r4,r4,-28560
  8009f4:	01404474 	movhi	r5,273
  8009f8:	29641804 	addi	r5,r5,-28576
  8009fc:	08017980 	call	801798 <I2C_Start>

  // Configure the gyro and accelerometer for normal operation
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, ACCEL_CONFIG, (alt_u8*)0x00, 1);
  800a00:	e0bfe843 	ldbu	r2,-95(fp)
  800a04:	11803fcc 	andi	r6,r2,255
  800a08:	3180201c 	xori	r6,r6,128
  800a0c:	31bfe004 	addi	r6,r6,-128
  800a10:	d8000015 	stw	zero,0(sp)
  800a14:	00800044 	movi	r2,1
  800a18:	d8800115 	stw	r2,4(sp)
  800a1c:	01004474 	movhi	r4,273
  800a20:	21241c04 	addi	r4,r4,-28560
  800a24:	01404474 	movhi	r5,273
  800a28:	29641804 	addi	r5,r5,-28576
  800a2c:	01c00704 	movi	r7,28
  800a30:	08019000 	call	801900 <I2C_WriteToDeviceRegister>
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  800a34:	01004474 	movhi	r4,273
  800a38:	21241c04 	addi	r4,r4,-28560
  800a3c:	01404474 	movhi	r5,273
  800a40:	29641804 	addi	r5,r5,-28576
  800a44:	08017d00 	call	8017d0 <I2C_Stop>
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  800a48:	01004474 	movhi	r4,273
  800a4c:	21241c04 	addi	r4,r4,-28560
  800a50:	01404474 	movhi	r5,273
  800a54:	29641804 	addi	r5,r5,-28576
  800a58:	08017980 	call	801798 <I2C_Start>

  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, GYRO_CONFIG, (alt_u8*)0x00, 1);
  800a5c:	e0bfe843 	ldbu	r2,-95(fp)
  800a60:	11803fcc 	andi	r6,r2,255
  800a64:	3180201c 	xori	r6,r6,128
  800a68:	31bfe004 	addi	r6,r6,-128
  800a6c:	d8000015 	stw	zero,0(sp)
  800a70:	00800044 	movi	r2,1
  800a74:	d8800115 	stw	r2,4(sp)
  800a78:	01004474 	movhi	r4,273
  800a7c:	21241c04 	addi	r4,r4,-28560
  800a80:	01404474 	movhi	r5,273
  800a84:	29641804 	addi	r5,r5,-28576
  800a88:	01c006c4 	movi	r7,27
  800a8c:	08019000 	call	801900 <I2C_WriteToDeviceRegister>
  OSTimeDlyHMSM(0, 0, 0, 25);;  // Delay a while to let the device stabilize
  800a90:	0009883a 	mov	r4,zero
  800a94:	000b883a 	mov	r5,zero
  800a98:	000d883a 	mov	r6,zero
  800a9c:	01c00644 	movi	r7,25
  800aa0:	0816e280 	call	816e28 <OSTimeDlyHMSM>

  // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
  // X-axis accel self-test results
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  800aa4:	01004474 	movhi	r4,273
  800aa8:	21241c04 	addi	r4,r4,-28560
  800aac:	01404474 	movhi	r5,273
  800ab0:	29641804 	addi	r5,r5,-28576
  800ab4:	08017d00 	call	8017d0 <I2C_Stop>
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  800ab8:	01004474 	movhi	r4,273
  800abc:	21241c04 	addi	r4,r4,-28560
  800ac0:	01404474 	movhi	r5,273
  800ac4:	29641804 	addi	r5,r5,-28576
  800ac8:	08017980 	call	801798 <I2C_Start>
  I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, SELF_TEST_X_ACCEL, &selfTest[0] , 1, true);
  800acc:	e0bfe843 	ldbu	r2,-95(fp)
  800ad0:	11803fcc 	andi	r6,r2,255
  800ad4:	3180201c 	xori	r6,r6,128
  800ad8:	31bfe004 	addi	r6,r6,-128
  800adc:	e0bfea04 	addi	r2,fp,-88
  800ae0:	d8800015 	stw	r2,0(sp)
  800ae4:	00800044 	movi	r2,1
  800ae8:	d8800115 	stw	r2,4(sp)
  800aec:	00800044 	movi	r2,1
  800af0:	d8800215 	stw	r2,8(sp)
  800af4:	01004474 	movhi	r4,273
  800af8:	21241c04 	addi	r4,r4,-28560
  800afc:	01404474 	movhi	r5,273
  800b00:	29641804 	addi	r5,r5,-28576
  800b04:	01c00344 	movi	r7,13
  800b08:	0801be80 	call	801be8 <I2C_ReadFromDeviceRegister>
  // Y-axis accel self-test results
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  800b0c:	01004474 	movhi	r4,273
  800b10:	21241c04 	addi	r4,r4,-28560
  800b14:	01404474 	movhi	r5,273
  800b18:	29641804 	addi	r5,r5,-28576
  800b1c:	08017d00 	call	8017d0 <I2C_Stop>
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  800b20:	01004474 	movhi	r4,273
  800b24:	21241c04 	addi	r4,r4,-28560
  800b28:	01404474 	movhi	r5,273
  800b2c:	29641804 	addi	r5,r5,-28576
  800b30:	08017980 	call	801798 <I2C_Start>
  I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, SELF_TEST_Y_ACCEL, &selfTest[1] , 1, true);
  800b34:	e0bfe843 	ldbu	r2,-95(fp)
  800b38:	11803fcc 	andi	r6,r2,255
  800b3c:	3180201c 	xori	r6,r6,128
  800b40:	31bfe004 	addi	r6,r6,-128
  800b44:	e0bfea04 	addi	r2,fp,-88
  800b48:	10800044 	addi	r2,r2,1
  800b4c:	d8800015 	stw	r2,0(sp)
  800b50:	00800044 	movi	r2,1
  800b54:	d8800115 	stw	r2,4(sp)
  800b58:	00800044 	movi	r2,1
  800b5c:	d8800215 	stw	r2,8(sp)
  800b60:	01004474 	movhi	r4,273
  800b64:	21241c04 	addi	r4,r4,-28560
  800b68:	01404474 	movhi	r5,273
  800b6c:	29641804 	addi	r5,r5,-28576
  800b70:	01c00384 	movi	r7,14
  800b74:	0801be80 	call	801be8 <I2C_ReadFromDeviceRegister>
  // Z-axis accel self-test results
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  800b78:	01004474 	movhi	r4,273
  800b7c:	21241c04 	addi	r4,r4,-28560
  800b80:	01404474 	movhi	r5,273
  800b84:	29641804 	addi	r5,r5,-28576
  800b88:	08017d00 	call	8017d0 <I2C_Stop>
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  800b8c:	01004474 	movhi	r4,273
  800b90:	21241c04 	addi	r4,r4,-28560
  800b94:	01404474 	movhi	r5,273
  800b98:	29641804 	addi	r5,r5,-28576
  800b9c:	08017980 	call	801798 <I2C_Start>
  I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, SELF_TEST_Z_ACCEL, &selfTest[2] , 1, true);
  800ba0:	e0bfe843 	ldbu	r2,-95(fp)
  800ba4:	11803fcc 	andi	r6,r2,255
  800ba8:	3180201c 	xori	r6,r6,128
  800bac:	31bfe004 	addi	r6,r6,-128
  800bb0:	e0bfea04 	addi	r2,fp,-88
  800bb4:	10800084 	addi	r2,r2,2
  800bb8:	d8800015 	stw	r2,0(sp)
  800bbc:	00800044 	movi	r2,1
  800bc0:	d8800115 	stw	r2,4(sp)
  800bc4:	00800044 	movi	r2,1
  800bc8:	d8800215 	stw	r2,8(sp)
  800bcc:	01004474 	movhi	r4,273
  800bd0:	21241c04 	addi	r4,r4,-28560
  800bd4:	01404474 	movhi	r5,273
  800bd8:	29641804 	addi	r5,r5,-28576
  800bdc:	01c003c4 	movi	r7,15
  800be0:	0801be80 	call	801be8 <I2C_ReadFromDeviceRegister>
  // X-axis gyro self-test results
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  800be4:	01004474 	movhi	r4,273
  800be8:	21241c04 	addi	r4,r4,-28560
  800bec:	01404474 	movhi	r5,273
  800bf0:	29641804 	addi	r5,r5,-28576
  800bf4:	08017d00 	call	8017d0 <I2C_Stop>
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  800bf8:	01004474 	movhi	r4,273
  800bfc:	21241c04 	addi	r4,r4,-28560
  800c00:	01404474 	movhi	r5,273
  800c04:	29641804 	addi	r5,r5,-28576
  800c08:	08017980 	call	801798 <I2C_Start>
  I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, SELF_TEST_X_GYRO, &selfTest[3] , 1, true);
  800c0c:	e0bfe843 	ldbu	r2,-95(fp)
  800c10:	11803fcc 	andi	r6,r2,255
  800c14:	3180201c 	xori	r6,r6,128
  800c18:	31bfe004 	addi	r6,r6,-128
  800c1c:	e0bfea04 	addi	r2,fp,-88
  800c20:	108000c4 	addi	r2,r2,3
  800c24:	d8800015 	stw	r2,0(sp)
  800c28:	00800044 	movi	r2,1
  800c2c:	d8800115 	stw	r2,4(sp)
  800c30:	00800044 	movi	r2,1
  800c34:	d8800215 	stw	r2,8(sp)
  800c38:	01004474 	movhi	r4,273
  800c3c:	21241c04 	addi	r4,r4,-28560
  800c40:	01404474 	movhi	r5,273
  800c44:	29641804 	addi	r5,r5,-28576
  800c48:	000f883a 	mov	r7,zero
  800c4c:	0801be80 	call	801be8 <I2C_ReadFromDeviceRegister>
  // Y-axis gyro self-test results
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  800c50:	01004474 	movhi	r4,273
  800c54:	21241c04 	addi	r4,r4,-28560
  800c58:	01404474 	movhi	r5,273
  800c5c:	29641804 	addi	r5,r5,-28576
  800c60:	08017d00 	call	8017d0 <I2C_Stop>
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  800c64:	01004474 	movhi	r4,273
  800c68:	21241c04 	addi	r4,r4,-28560
  800c6c:	01404474 	movhi	r5,273
  800c70:	29641804 	addi	r5,r5,-28576
  800c74:	08017980 	call	801798 <I2C_Start>
  I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, SELF_TEST_Y_GYRO, &selfTest[4] , 1, true);
  800c78:	e0bfe843 	ldbu	r2,-95(fp)
  800c7c:	11803fcc 	andi	r6,r2,255
  800c80:	3180201c 	xori	r6,r6,128
  800c84:	31bfe004 	addi	r6,r6,-128
  800c88:	e0bfea04 	addi	r2,fp,-88
  800c8c:	10800104 	addi	r2,r2,4
  800c90:	d8800015 	stw	r2,0(sp)
  800c94:	00800044 	movi	r2,1
  800c98:	d8800115 	stw	r2,4(sp)
  800c9c:	00800044 	movi	r2,1
  800ca0:	d8800215 	stw	r2,8(sp)
  800ca4:	01004474 	movhi	r4,273
  800ca8:	21241c04 	addi	r4,r4,-28560
  800cac:	01404474 	movhi	r5,273
  800cb0:	29641804 	addi	r5,r5,-28576
  800cb4:	01c00044 	movi	r7,1
  800cb8:	0801be80 	call	801be8 <I2C_ReadFromDeviceRegister>
  // Z-axis gyro self-test results
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  800cbc:	01004474 	movhi	r4,273
  800cc0:	21241c04 	addi	r4,r4,-28560
  800cc4:	01404474 	movhi	r5,273
  800cc8:	29641804 	addi	r5,r5,-28576
  800ccc:	08017d00 	call	8017d0 <I2C_Stop>
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  800cd0:	01004474 	movhi	r4,273
  800cd4:	21241c04 	addi	r4,r4,-28560
  800cd8:	01404474 	movhi	r5,273
  800cdc:	29641804 	addi	r5,r5,-28576
  800ce0:	08017980 	call	801798 <I2C_Start>
  I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, SELF_TEST_Z_GYRO, &selfTest[5] , 1, true);
  800ce4:	e0bfe843 	ldbu	r2,-95(fp)
  800ce8:	11803fcc 	andi	r6,r2,255
  800cec:	3180201c 	xori	r6,r6,128
  800cf0:	31bfe004 	addi	r6,r6,-128
  800cf4:	e0bfea04 	addi	r2,fp,-88
  800cf8:	10800144 	addi	r2,r2,5
  800cfc:	d8800015 	stw	r2,0(sp)
  800d00:	00800044 	movi	r2,1
  800d04:	d8800115 	stw	r2,4(sp)
  800d08:	00800044 	movi	r2,1
  800d0c:	d8800215 	stw	r2,8(sp)
  800d10:	01004474 	movhi	r4,273
  800d14:	21241c04 	addi	r4,r4,-28560
  800d18:	01404474 	movhi	r5,273
  800d1c:	29641804 	addi	r5,r5,-28576
  800d20:	01c00084 	movi	r7,2
  800d24:	0801be80 	call	801be8 <I2C_ReadFromDeviceRegister>

  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  800d28:	01004474 	movhi	r4,273
  800d2c:	21241c04 	addi	r4,r4,-28560
  800d30:	01404474 	movhi	r5,273
  800d34:	29641804 	addi	r5,r5,-28576
  800d38:	08017d00 	call	8017d0 <I2C_Stop>


  // Retrieve factory self-test value from self-test code reads
  // FT[Xa] factory trim calculation
  factoryTrim[0] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[0] - 1.0) ));
  800d3c:	e0ffe803 	ldbu	r3,-96(fp)
  800d40:	00828f04 	movi	r2,2620
  800d44:	10c8983a 	sll	r4,r2,r3
  800d48:	08040f80 	call	8040f8 <__floatsisf>
  800d4c:	1009883a 	mov	r4,r2
  800d50:	08041900 	call	804190 <__extendsfdf2>
  800d54:	1021883a 	mov	r16,r2
  800d58:	1823883a 	mov	r17,r3
  800d5c:	e0bfea03 	ldbu	r2,-88(fp)
  800d60:	11003fcc 	andi	r4,r2,255
  800d64:	08041e40 	call	8041e4 <__floatunsisf>
  800d68:	1009883a 	mov	r4,r2
  800d6c:	08041900 	call	804190 <__extendsfdf2>
  800d70:	100b883a 	mov	r5,r2
  800d74:	180d883a 	mov	r6,r3
  800d78:	2809883a 	mov	r4,r5
  800d7c:	300b883a 	mov	r5,r6
  800d80:	000d883a 	mov	r6,zero
  800d84:	01cffc34 	movhi	r7,16368
  800d88:	08046b40 	call	8046b4 <__subdf3>
  800d8c:	1009883a 	mov	r4,r2
  800d90:	180b883a 	mov	r5,r3
  800d94:	2005883a 	mov	r2,r4
  800d98:	2807883a 	mov	r3,r5
  800d9c:	0130a3f4 	movhi	r4,49807
  800da0:	21170a44 	addi	r4,r4,23593
  800da4:	014ffc34 	movhi	r5,16368
  800da8:	294a3d44 	addi	r5,r5,10485
  800dac:	100d883a 	mov	r6,r2
  800db0:	180f883a 	mov	r7,r3
  800db4:	08022180 	call	802218 <pow>
  800db8:	1009883a 	mov	r4,r2
  800dbc:	180b883a 	mov	r5,r3
  800dc0:	2005883a 	mov	r2,r4
  800dc4:	2807883a 	mov	r3,r5
  800dc8:	8009883a 	mov	r4,r16
  800dcc:	880b883a 	mov	r5,r17
  800dd0:	100d883a 	mov	r6,r2
  800dd4:	180f883a 	mov	r7,r3
  800dd8:	08047a80 	call	8047a8 <__muldf3>
  800ddc:	1009883a 	mov	r4,r2
  800de0:	180b883a 	mov	r5,r3
  800de4:	2005883a 	mov	r2,r4
  800de8:	2807883a 	mov	r3,r5
  800dec:	1009883a 	mov	r4,r2
  800df0:	180b883a 	mov	r5,r3
  800df4:	080519c0 	call	80519c <__truncdfsf2>
  800df8:	e0bff815 	stw	r2,-32(fp)
  // FT[Ya] factory trim calculation
  factoryTrim[1] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[1] - 1.0) ));
  800dfc:	e0ffe803 	ldbu	r3,-96(fp)
  800e00:	00828f04 	movi	r2,2620
  800e04:	10c8983a 	sll	r4,r2,r3
  800e08:	08040f80 	call	8040f8 <__floatsisf>
  800e0c:	1009883a 	mov	r4,r2
  800e10:	08041900 	call	804190 <__extendsfdf2>
  800e14:	1021883a 	mov	r16,r2
  800e18:	1823883a 	mov	r17,r3
  800e1c:	e0bfea43 	ldbu	r2,-87(fp)
  800e20:	11003fcc 	andi	r4,r2,255
  800e24:	08041e40 	call	8041e4 <__floatunsisf>
  800e28:	1009883a 	mov	r4,r2
  800e2c:	08041900 	call	804190 <__extendsfdf2>
  800e30:	100b883a 	mov	r5,r2
  800e34:	180d883a 	mov	r6,r3
  800e38:	2809883a 	mov	r4,r5
  800e3c:	300b883a 	mov	r5,r6
  800e40:	000d883a 	mov	r6,zero
  800e44:	01cffc34 	movhi	r7,16368
  800e48:	08046b40 	call	8046b4 <__subdf3>
  800e4c:	1009883a 	mov	r4,r2
  800e50:	180b883a 	mov	r5,r3
  800e54:	2005883a 	mov	r2,r4
  800e58:	2807883a 	mov	r3,r5
  800e5c:	0130a3f4 	movhi	r4,49807
  800e60:	21170a44 	addi	r4,r4,23593
  800e64:	014ffc34 	movhi	r5,16368
  800e68:	294a3d44 	addi	r5,r5,10485
  800e6c:	100d883a 	mov	r6,r2
  800e70:	180f883a 	mov	r7,r3
  800e74:	08022180 	call	802218 <pow>
  800e78:	100f883a 	mov	r7,r2
  800e7c:	1811883a 	mov	r8,r3
  800e80:	8009883a 	mov	r4,r16
  800e84:	880b883a 	mov	r5,r17
  800e88:	380d883a 	mov	r6,r7
  800e8c:	400f883a 	mov	r7,r8
  800e90:	08047a80 	call	8047a8 <__muldf3>
  800e94:	1009883a 	mov	r4,r2
  800e98:	180b883a 	mov	r5,r3
  800e9c:	2005883a 	mov	r2,r4
  800ea0:	2807883a 	mov	r3,r5
  800ea4:	1009883a 	mov	r4,r2
  800ea8:	180b883a 	mov	r5,r3
  800eac:	080519c0 	call	80519c <__truncdfsf2>
  800eb0:	e0bff915 	stw	r2,-28(fp)
  // FT[Za] factory trim calculation
  factoryTrim[2] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[2] - 1.0) ));
  800eb4:	e0ffe803 	ldbu	r3,-96(fp)
  800eb8:	00828f04 	movi	r2,2620
  800ebc:	10c8983a 	sll	r4,r2,r3
  800ec0:	08040f80 	call	8040f8 <__floatsisf>
  800ec4:	1009883a 	mov	r4,r2
  800ec8:	08041900 	call	804190 <__extendsfdf2>
  800ecc:	1021883a 	mov	r16,r2
  800ed0:	1823883a 	mov	r17,r3
  800ed4:	e0bfea83 	ldbu	r2,-86(fp)
  800ed8:	11003fcc 	andi	r4,r2,255
  800edc:	08041e40 	call	8041e4 <__floatunsisf>
  800ee0:	1009883a 	mov	r4,r2
  800ee4:	08041900 	call	804190 <__extendsfdf2>
  800ee8:	100b883a 	mov	r5,r2
  800eec:	180d883a 	mov	r6,r3
  800ef0:	2809883a 	mov	r4,r5
  800ef4:	300b883a 	mov	r5,r6
  800ef8:	000d883a 	mov	r6,zero
  800efc:	01cffc34 	movhi	r7,16368
  800f00:	08046b40 	call	8046b4 <__subdf3>
  800f04:	1009883a 	mov	r4,r2
  800f08:	180b883a 	mov	r5,r3
  800f0c:	2005883a 	mov	r2,r4
  800f10:	2807883a 	mov	r3,r5
  800f14:	0130a3f4 	movhi	r4,49807
  800f18:	21170a44 	addi	r4,r4,23593
  800f1c:	014ffc34 	movhi	r5,16368
  800f20:	294a3d44 	addi	r5,r5,10485
  800f24:	100d883a 	mov	r6,r2
  800f28:	180f883a 	mov	r7,r3
  800f2c:	08022180 	call	802218 <pow>
  800f30:	100f883a 	mov	r7,r2
  800f34:	1811883a 	mov	r8,r3
  800f38:	8009883a 	mov	r4,r16
  800f3c:	880b883a 	mov	r5,r17
  800f40:	380d883a 	mov	r6,r7
  800f44:	400f883a 	mov	r7,r8
  800f48:	08047a80 	call	8047a8 <__muldf3>
  800f4c:	1009883a 	mov	r4,r2
  800f50:	180b883a 	mov	r5,r3
  800f54:	2005883a 	mov	r2,r4
  800f58:	2807883a 	mov	r3,r5
  800f5c:	1009883a 	mov	r4,r2
  800f60:	180b883a 	mov	r5,r3
  800f64:	080519c0 	call	80519c <__truncdfsf2>
  800f68:	e0bffa15 	stw	r2,-24(fp)
  // FT[Xg] factory trim calculation
  factoryTrim[3] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[3] - 1.0) ));
  800f6c:	e0ffe803 	ldbu	r3,-96(fp)
  800f70:	00828f04 	movi	r2,2620
  800f74:	10c8983a 	sll	r4,r2,r3
  800f78:	08040f80 	call	8040f8 <__floatsisf>
  800f7c:	1009883a 	mov	r4,r2
  800f80:	08041900 	call	804190 <__extendsfdf2>
  800f84:	1021883a 	mov	r16,r2
  800f88:	1823883a 	mov	r17,r3
  800f8c:	e0bfeac3 	ldbu	r2,-85(fp)
  800f90:	11003fcc 	andi	r4,r2,255
  800f94:	08041e40 	call	8041e4 <__floatunsisf>
  800f98:	1009883a 	mov	r4,r2
  800f9c:	08041900 	call	804190 <__extendsfdf2>
  800fa0:	100b883a 	mov	r5,r2
  800fa4:	180d883a 	mov	r6,r3
  800fa8:	2809883a 	mov	r4,r5
  800fac:	300b883a 	mov	r5,r6
  800fb0:	000d883a 	mov	r6,zero
  800fb4:	01cffc34 	movhi	r7,16368
  800fb8:	08046b40 	call	8046b4 <__subdf3>
  800fbc:	1009883a 	mov	r4,r2
  800fc0:	180b883a 	mov	r5,r3
  800fc4:	2005883a 	mov	r2,r4
  800fc8:	2807883a 	mov	r3,r5
  800fcc:	0130a3f4 	movhi	r4,49807
  800fd0:	21170a44 	addi	r4,r4,23593
  800fd4:	014ffc34 	movhi	r5,16368
  800fd8:	294a3d44 	addi	r5,r5,10485
  800fdc:	100d883a 	mov	r6,r2
  800fe0:	180f883a 	mov	r7,r3
  800fe4:	08022180 	call	802218 <pow>
  800fe8:	100f883a 	mov	r7,r2
  800fec:	1811883a 	mov	r8,r3
  800ff0:	8009883a 	mov	r4,r16
  800ff4:	880b883a 	mov	r5,r17
  800ff8:	380d883a 	mov	r6,r7
  800ffc:	400f883a 	mov	r7,r8
  801000:	08047a80 	call	8047a8 <__muldf3>
  801004:	1009883a 	mov	r4,r2
  801008:	180b883a 	mov	r5,r3
  80100c:	2005883a 	mov	r2,r4
  801010:	2807883a 	mov	r3,r5
  801014:	1009883a 	mov	r4,r2
  801018:	180b883a 	mov	r5,r3
  80101c:	080519c0 	call	80519c <__truncdfsf2>
  801020:	e0bffb15 	stw	r2,-20(fp)
  // FT[Yg] factory trim calculation
  factoryTrim[4] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[4] - 1.0) ));
  801024:	e0ffe803 	ldbu	r3,-96(fp)
  801028:	00828f04 	movi	r2,2620
  80102c:	10c8983a 	sll	r4,r2,r3
  801030:	08040f80 	call	8040f8 <__floatsisf>
  801034:	1009883a 	mov	r4,r2
  801038:	08041900 	call	804190 <__extendsfdf2>
  80103c:	1021883a 	mov	r16,r2
  801040:	1823883a 	mov	r17,r3
  801044:	e0bfeb03 	ldbu	r2,-84(fp)
  801048:	11003fcc 	andi	r4,r2,255
  80104c:	08041e40 	call	8041e4 <__floatunsisf>
  801050:	1009883a 	mov	r4,r2
  801054:	08041900 	call	804190 <__extendsfdf2>
  801058:	100b883a 	mov	r5,r2
  80105c:	180d883a 	mov	r6,r3
  801060:	2809883a 	mov	r4,r5
  801064:	300b883a 	mov	r5,r6
  801068:	000d883a 	mov	r6,zero
  80106c:	01cffc34 	movhi	r7,16368
  801070:	08046b40 	call	8046b4 <__subdf3>
  801074:	1009883a 	mov	r4,r2
  801078:	180b883a 	mov	r5,r3
  80107c:	2005883a 	mov	r2,r4
  801080:	2807883a 	mov	r3,r5
  801084:	0130a3f4 	movhi	r4,49807
  801088:	21170a44 	addi	r4,r4,23593
  80108c:	014ffc34 	movhi	r5,16368
  801090:	294a3d44 	addi	r5,r5,10485
  801094:	100d883a 	mov	r6,r2
  801098:	180f883a 	mov	r7,r3
  80109c:	08022180 	call	802218 <pow>
  8010a0:	100f883a 	mov	r7,r2
  8010a4:	1811883a 	mov	r8,r3
  8010a8:	8009883a 	mov	r4,r16
  8010ac:	880b883a 	mov	r5,r17
  8010b0:	380d883a 	mov	r6,r7
  8010b4:	400f883a 	mov	r7,r8
  8010b8:	08047a80 	call	8047a8 <__muldf3>
  8010bc:	1009883a 	mov	r4,r2
  8010c0:	180b883a 	mov	r5,r3
  8010c4:	2005883a 	mov	r2,r4
  8010c8:	2807883a 	mov	r3,r5
  8010cc:	1009883a 	mov	r4,r2
  8010d0:	180b883a 	mov	r5,r3
  8010d4:	080519c0 	call	80519c <__truncdfsf2>
  8010d8:	e0bffc15 	stw	r2,-16(fp)
  // FT[Zg] factory trim calculation
  factoryTrim[5] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[5] - 1.0) ));
  8010dc:	e0ffe803 	ldbu	r3,-96(fp)
  8010e0:	00828f04 	movi	r2,2620
  8010e4:	10c8983a 	sll	r4,r2,r3
  8010e8:	08040f80 	call	8040f8 <__floatsisf>
  8010ec:	1009883a 	mov	r4,r2
  8010f0:	08041900 	call	804190 <__extendsfdf2>
  8010f4:	1021883a 	mov	r16,r2
  8010f8:	1823883a 	mov	r17,r3
  8010fc:	e0bfeb43 	ldbu	r2,-83(fp)
  801100:	11003fcc 	andi	r4,r2,255
  801104:	08041e40 	call	8041e4 <__floatunsisf>
  801108:	1009883a 	mov	r4,r2
  80110c:	08041900 	call	804190 <__extendsfdf2>
  801110:	100b883a 	mov	r5,r2
  801114:	180d883a 	mov	r6,r3
  801118:	2809883a 	mov	r4,r5
  80111c:	300b883a 	mov	r5,r6
  801120:	000d883a 	mov	r6,zero
  801124:	01cffc34 	movhi	r7,16368
  801128:	08046b40 	call	8046b4 <__subdf3>
  80112c:	1009883a 	mov	r4,r2
  801130:	180b883a 	mov	r5,r3
  801134:	2005883a 	mov	r2,r4
  801138:	2807883a 	mov	r3,r5
  80113c:	0130a3f4 	movhi	r4,49807
  801140:	21170a44 	addi	r4,r4,23593
  801144:	014ffc34 	movhi	r5,16368
  801148:	294a3d44 	addi	r5,r5,10485
  80114c:	100d883a 	mov	r6,r2
  801150:	180f883a 	mov	r7,r3
  801154:	08022180 	call	802218 <pow>
  801158:	100f883a 	mov	r7,r2
  80115c:	1811883a 	mov	r8,r3
  801160:	8009883a 	mov	r4,r16
  801164:	880b883a 	mov	r5,r17
  801168:	380d883a 	mov	r6,r7
  80116c:	400f883a 	mov	r7,r8
  801170:	08047a80 	call	8047a8 <__muldf3>
  801174:	1009883a 	mov	r4,r2
  801178:	180b883a 	mov	r5,r3
  80117c:	2005883a 	mov	r2,r4
  801180:	2807883a 	mov	r3,r5
  801184:	1009883a 	mov	r4,r2
  801188:	180b883a 	mov	r5,r3
  80118c:	080519c0 	call	80519c <__truncdfsf2>
  801190:	e0bffd15 	stw	r2,-12(fp)

  // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim
  // of the Self-Test Response
  // To get percent, must multiply by 100
  for ( ii =0; ii < 3; ii = ii+1)
  801194:	e03fe715 	stw	zero,-100(fp)
  801198:	00008d06 	br	8013d0 <MPU9250SelfTest+0x11f8>
  {
    // Report percent differences
    destination[ii] = 100.0 * ((float)(aSTAvg[ii] - aAvg[ii])) / factoryTrim[ii]
  80119c:	e0bfe717 	ldw	r2,-100(fp)
  8011a0:	1085883a 	add	r2,r2,r2
  8011a4:	1085883a 	add	r2,r2,r2
  8011a8:	1007883a 	mov	r3,r2
  8011ac:	e0bfff17 	ldw	r2,-4(fp)
  8011b0:	18a5883a 	add	r18,r3,r2
  8011b4:	e0bfe717 	ldw	r2,-100(fp)
  8011b8:	1085883a 	add	r2,r2,r2
  8011bc:	1085883a 	add	r2,r2,r2
  8011c0:	e0ffe704 	addi	r3,fp,-100
  8011c4:	10c5883a 	add	r2,r2,r3
  8011c8:	10800b04 	addi	r2,r2,44
  8011cc:	10c00017 	ldw	r3,0(r2)
  8011d0:	e0bfe717 	ldw	r2,-100(fp)
  8011d4:	1085883a 	add	r2,r2,r2
  8011d8:	1085883a 	add	r2,r2,r2
  8011dc:	e13fe704 	addi	r4,fp,-100
  8011e0:	1105883a 	add	r2,r2,r4
  8011e4:	10800804 	addi	r2,r2,32
  8011e8:	10800017 	ldw	r2,0(r2)
  8011ec:	1889c83a 	sub	r4,r3,r2
  8011f0:	08041e40 	call	8041e4 <__floatunsisf>
  8011f4:	1009883a 	mov	r4,r2
  8011f8:	08041900 	call	804190 <__extendsfdf2>
  8011fc:	100b883a 	mov	r5,r2
  801200:	180d883a 	mov	r6,r3
  801204:	2809883a 	mov	r4,r5
  801208:	300b883a 	mov	r5,r6
  80120c:	000d883a 	mov	r6,zero
  801210:	01d01674 	movhi	r7,16473
  801214:	08047a80 	call	8047a8 <__muldf3>
  801218:	1009883a 	mov	r4,r2
  80121c:	180b883a 	mov	r5,r3
  801220:	2021883a 	mov	r16,r4
  801224:	2823883a 	mov	r17,r5
  801228:	e0bfe717 	ldw	r2,-100(fp)
  80122c:	1085883a 	add	r2,r2,r2
  801230:	1085883a 	add	r2,r2,r2
  801234:	e0ffe704 	addi	r3,fp,-100
  801238:	10c5883a 	add	r2,r2,r3
  80123c:	10801104 	addi	r2,r2,68
  801240:	10800017 	ldw	r2,0(r2)
  801244:	1009883a 	mov	r4,r2
  801248:	08041900 	call	804190 <__extendsfdf2>
  80124c:	100f883a 	mov	r7,r2
  801250:	1811883a 	mov	r8,r3
  801254:	8009883a 	mov	r4,r16
  801258:	880b883a 	mov	r5,r17
  80125c:	380d883a 	mov	r6,r7
  801260:	400f883a 	mov	r7,r8
  801264:	0804b6c0 	call	804b6c <__divdf3>
  801268:	1009883a 	mov	r4,r2
  80126c:	180b883a 	mov	r5,r3
  801270:	2005883a 	mov	r2,r4
  801274:	2807883a 	mov	r3,r5
  801278:	1009883a 	mov	r4,r2
  80127c:	180b883a 	mov	r5,r3
  801280:	000d883a 	mov	r6,zero
  801284:	01d01674 	movhi	r7,16473
  801288:	08046b40 	call	8046b4 <__subdf3>
  80128c:	1009883a 	mov	r4,r2
  801290:	180b883a 	mov	r5,r3
  801294:	2005883a 	mov	r2,r4
  801298:	2807883a 	mov	r3,r5
  80129c:	1009883a 	mov	r4,r2
  8012a0:	180b883a 	mov	r5,r3
  8012a4:	080519c0 	call	80519c <__truncdfsf2>
  8012a8:	90800015 	stw	r2,0(r18)
      - 100.;
    // Report percent differences
    destination[ii+3] = 100.0*((float)(gSTAvg[ii] - gAvg[ii]))/factoryTrim[ii+3]
  8012ac:	e0bfe717 	ldw	r2,-100(fp)
  8012b0:	1085883a 	add	r2,r2,r2
  8012b4:	1085883a 	add	r2,r2,r2
  8012b8:	1007883a 	mov	r3,r2
  8012bc:	e0bfff17 	ldw	r2,-4(fp)
  8012c0:	1885883a 	add	r2,r3,r2
  8012c4:	14800304 	addi	r18,r2,12
  8012c8:	e0bfe717 	ldw	r2,-100(fp)
  8012cc:	1085883a 	add	r2,r2,r2
  8012d0:	1085883a 	add	r2,r2,r2
  8012d4:	e13fe704 	addi	r4,fp,-100
  8012d8:	1105883a 	add	r2,r2,r4
  8012dc:	10800e04 	addi	r2,r2,56
  8012e0:	10c00017 	ldw	r3,0(r2)
  8012e4:	e0bfe717 	ldw	r2,-100(fp)
  8012e8:	1085883a 	add	r2,r2,r2
  8012ec:	1085883a 	add	r2,r2,r2
  8012f0:	e13fe704 	addi	r4,fp,-100
  8012f4:	1105883a 	add	r2,r2,r4
  8012f8:	10800504 	addi	r2,r2,20
  8012fc:	10800017 	ldw	r2,0(r2)
  801300:	1889c83a 	sub	r4,r3,r2
  801304:	08041e40 	call	8041e4 <__floatunsisf>
  801308:	1009883a 	mov	r4,r2
  80130c:	08041900 	call	804190 <__extendsfdf2>
  801310:	100b883a 	mov	r5,r2
  801314:	180d883a 	mov	r6,r3
  801318:	2809883a 	mov	r4,r5
  80131c:	300b883a 	mov	r5,r6
  801320:	000d883a 	mov	r6,zero
  801324:	01d01674 	movhi	r7,16473
  801328:	08047a80 	call	8047a8 <__muldf3>
  80132c:	1009883a 	mov	r4,r2
  801330:	180b883a 	mov	r5,r3
  801334:	2021883a 	mov	r16,r4
  801338:	2823883a 	mov	r17,r5
  80133c:	e0bfe717 	ldw	r2,-100(fp)
  801340:	108000c4 	addi	r2,r2,3
  801344:	1085883a 	add	r2,r2,r2
  801348:	1085883a 	add	r2,r2,r2
  80134c:	e0ffe704 	addi	r3,fp,-100
  801350:	10c5883a 	add	r2,r2,r3
  801354:	10801104 	addi	r2,r2,68
  801358:	10800017 	ldw	r2,0(r2)
  80135c:	1009883a 	mov	r4,r2
  801360:	08041900 	call	804190 <__extendsfdf2>
  801364:	100f883a 	mov	r7,r2
  801368:	1811883a 	mov	r8,r3
  80136c:	8009883a 	mov	r4,r16
  801370:	880b883a 	mov	r5,r17
  801374:	380d883a 	mov	r6,r7
  801378:	400f883a 	mov	r7,r8
  80137c:	0804b6c0 	call	804b6c <__divdf3>
  801380:	1009883a 	mov	r4,r2
  801384:	180b883a 	mov	r5,r3
  801388:	2005883a 	mov	r2,r4
  80138c:	2807883a 	mov	r3,r5
  801390:	1009883a 	mov	r4,r2
  801394:	180b883a 	mov	r5,r3
  801398:	000d883a 	mov	r6,zero
  80139c:	01d01674 	movhi	r7,16473
  8013a0:	08046b40 	call	8046b4 <__subdf3>
  8013a4:	1009883a 	mov	r4,r2
  8013a8:	180b883a 	mov	r5,r3
  8013ac:	2005883a 	mov	r2,r4
  8013b0:	2807883a 	mov	r3,r5
  8013b4:	1009883a 	mov	r4,r2
  8013b8:	180b883a 	mov	r5,r3
  8013bc:	080519c0 	call	80519c <__truncdfsf2>
  8013c0:	90800015 	stw	r2,0(r18)
  factoryTrim[5] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[5] - 1.0) ));

  // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim
  // of the Self-Test Response
  // To get percent, must multiply by 100
  for ( ii =0; ii < 3; ii = ii+1)
  8013c4:	e0bfe717 	ldw	r2,-100(fp)
  8013c8:	10800044 	addi	r2,r2,1
  8013cc:	e0bfe715 	stw	r2,-100(fp)
  8013d0:	e0bfe717 	ldw	r2,-100(fp)
  8013d4:	108000d0 	cmplti	r2,r2,3
  8013d8:	103f701e 	bne	r2,zero,80119c <MPU9250SelfTest+0xfc4>
      - 100.;
    // Report percent differences
    destination[ii+3] = 100.0*((float)(gSTAvg[ii] - gAvg[ii]))/factoryTrim[ii+3]
      - 100.;
  }
}
  8013dc:	e037883a 	mov	sp,fp
  8013e0:	dfc00417 	ldw	ra,16(sp)
  8013e4:	df000317 	ldw	fp,12(sp)
  8013e8:	dc800217 	ldw	r18,8(sp)
  8013ec:	dc400117 	ldw	r17,4(sp)
  8013f0:	dc000017 	ldw	r16,0(sp)
  8013f4:	dec00504 	addi	sp,sp,20
  8013f8:	f800283a 	ret

008013fc <task1>:



/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
  8013fc:	defff104 	addi	sp,sp,-60
  801400:	dfc00e15 	stw	ra,56(sp)
  801404:	df000d15 	stw	fp,52(sp)
  801408:	df000d04 	addi	fp,sp,52
  80140c:	e13fff15 	stw	r4,-4(fp)
  alt_u8 ReadBuf[6];
  //alt_u8 deviceAddress1 = 0x68;
  alt_u8 deviceAddress2 = 0xD0;
  801410:	00bff404 	movi	r2,-48
  801414:	e0bff6c5 	stb	r2,-37(fp)
  alt_u8 registerAddress = 0x75;
  801418:	00801d44 	movi	r2,117
  80141c:	e0bff685 	stb	r2,-38(fp)
  alt_u16 buflen = 1;
  801420:	00800044 	movi	r2,1
  801424:	e0bff60d 	sth	r2,-40(fp)
  float selfTest[6];

    I2C_Start(I2C_SCL_BASE,I2C_SDA_BASE);
  801428:	01004474 	movhi	r4,273
  80142c:	21241c04 	addi	r4,r4,-28560
  801430:	01404474 	movhi	r5,273
  801434:	29641804 	addi	r5,r5,-28576
  801438:	08017980 	call	801798 <I2C_Start>
    if(!I2C_ReadFromDeviceRegister(I2C_SCL_BASE,I2C_SDA_BASE, deviceAddress2, registerAddress, (alt_u8*)&ReadBuf, buflen, true)){
  80143c:	e0bff6c3 	ldbu	r2,-37(fp)
  801440:	11803fcc 	andi	r6,r2,255
  801444:	3180201c 	xori	r6,r6,128
  801448:	31bfe004 	addi	r6,r6,-128
  80144c:	e1fff683 	ldbu	r7,-38(fp)
  801450:	e0fff60b 	ldhu	r3,-40(fp)
  801454:	e0bff704 	addi	r2,fp,-36
  801458:	d8800015 	stw	r2,0(sp)
  80145c:	d8c00115 	stw	r3,4(sp)
  801460:	00800044 	movi	r2,1
  801464:	d8800215 	stw	r2,8(sp)
  801468:	01004474 	movhi	r4,273
  80146c:	21241c04 	addi	r4,r4,-28560
  801470:	01404474 	movhi	r5,273
  801474:	29641804 	addi	r5,r5,-28576
  801478:	0801be80 	call	801be8 <I2C_ReadFromDeviceRegister>

	  }
    I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  80147c:	01004474 	movhi	r4,273
  801480:	21241c04 	addi	r4,r4,-28560
  801484:	01404474 	movhi	r5,273
  801488:	29641804 	addi	r5,r5,-28576
  80148c:	08017d00 	call	8017d0 <I2C_Stop>
    printf("WHO AM I: %0x\n", ReadBuf[0]);
  801490:	e0bff703 	ldbu	r2,-36(fp)
  801494:	11403fcc 	andi	r5,r2,255
  801498:	010020b4 	movhi	r4,130
  80149c:	21281e04 	addi	r4,r4,-24456
  8014a0:	0805cb00 	call	805cb0 <printf>
    MPU9250SelfTest(selfTest);
  8014a4:	e13ff904 	addi	r4,fp,-28
  8014a8:	08001d80 	call	8001d8 <MPU9250SelfTest>
    printf("x-axis self test: acceleration trim within : ");
  8014ac:	010020b4 	movhi	r4,130
  8014b0:	21282204 	addi	r4,r4,-24440
  8014b4:	0805cb00 	call	805cb0 <printf>
   	printf("%.1f", selfTest[0]); printf("%% of factory value\n");
  8014b8:	e0bff917 	ldw	r2,-28(fp)
  8014bc:	1009883a 	mov	r4,r2
  8014c0:	08041900 	call	804190 <__extendsfdf2>
  8014c4:	100d883a 	mov	r6,r2
  8014c8:	180f883a 	mov	r7,r3
  8014cc:	010020b4 	movhi	r4,130
  8014d0:	21282e04 	addi	r4,r4,-24392
  8014d4:	300b883a 	mov	r5,r6
  8014d8:	380d883a 	mov	r6,r7
  8014dc:	0805cb00 	call	805cb0 <printf>
  8014e0:	010020b4 	movhi	r4,130
  8014e4:	21283004 	addi	r4,r4,-24384
  8014e8:	0805cb00 	call	805cb0 <printf>
  	printf("y-axis self test: acceleration trim within : ");
  8014ec:	010020b4 	movhi	r4,130
  8014f0:	21283604 	addi	r4,r4,-24360
  8014f4:	0805cb00 	call	805cb0 <printf>
  	printf("%.1f", selfTest[1]); printf("%% of factory value\n");
  8014f8:	e0bffa17 	ldw	r2,-24(fp)
  8014fc:	1009883a 	mov	r4,r2
  801500:	08041900 	call	804190 <__extendsfdf2>
  801504:	100d883a 	mov	r6,r2
  801508:	180f883a 	mov	r7,r3
  80150c:	010020b4 	movhi	r4,130
  801510:	21282e04 	addi	r4,r4,-24392
  801514:	300b883a 	mov	r5,r6
  801518:	380d883a 	mov	r6,r7
  80151c:	0805cb00 	call	805cb0 <printf>
  801520:	010020b4 	movhi	r4,130
  801524:	21283004 	addi	r4,r4,-24384
  801528:	0805cb00 	call	805cb0 <printf>
  	printf("z-axis self test: acceleration trim within : ");
  80152c:	010020b4 	movhi	r4,130
  801530:	21284204 	addi	r4,r4,-24312
  801534:	0805cb00 	call	805cb0 <printf>
  	printf("%.1f", selfTest[2]); printf("%% of factory value\n");
  801538:	e0bffb17 	ldw	r2,-20(fp)
  80153c:	1009883a 	mov	r4,r2
  801540:	08041900 	call	804190 <__extendsfdf2>
  801544:	100d883a 	mov	r6,r2
  801548:	180f883a 	mov	r7,r3
  80154c:	010020b4 	movhi	r4,130
  801550:	21282e04 	addi	r4,r4,-24392
  801554:	300b883a 	mov	r5,r6
  801558:	380d883a 	mov	r6,r7
  80155c:	0805cb00 	call	805cb0 <printf>
  801560:	010020b4 	movhi	r4,130
  801564:	21283004 	addi	r4,r4,-24384
  801568:	0805cb00 	call	805cb0 <printf>
  	printf("x-axis self test: gyration trim within : ");
  80156c:	010020b4 	movhi	r4,130
  801570:	21284e04 	addi	r4,r4,-24264
  801574:	0805cb00 	call	805cb0 <printf>
  	printf("%.1f", selfTest[3]); printf("%% of factory value\n");
  801578:	e0bffc17 	ldw	r2,-16(fp)
  80157c:	1009883a 	mov	r4,r2
  801580:	08041900 	call	804190 <__extendsfdf2>
  801584:	100d883a 	mov	r6,r2
  801588:	180f883a 	mov	r7,r3
  80158c:	010020b4 	movhi	r4,130
  801590:	21282e04 	addi	r4,r4,-24392
  801594:	300b883a 	mov	r5,r6
  801598:	380d883a 	mov	r6,r7
  80159c:	0805cb00 	call	805cb0 <printf>
  8015a0:	010020b4 	movhi	r4,130
  8015a4:	21283004 	addi	r4,r4,-24384
  8015a8:	0805cb00 	call	805cb0 <printf>
  	printf("y-axis self test: gyration trim within : ");
  8015ac:	010020b4 	movhi	r4,130
  8015b0:	21285904 	addi	r4,r4,-24220
  8015b4:	0805cb00 	call	805cb0 <printf>
  	printf("%.1f", selfTest[4]); printf("%% of factory value\n");
  8015b8:	e0bffd17 	ldw	r2,-12(fp)
  8015bc:	1009883a 	mov	r4,r2
  8015c0:	08041900 	call	804190 <__extendsfdf2>
  8015c4:	100d883a 	mov	r6,r2
  8015c8:	180f883a 	mov	r7,r3
  8015cc:	010020b4 	movhi	r4,130
  8015d0:	21282e04 	addi	r4,r4,-24392
  8015d4:	300b883a 	mov	r5,r6
  8015d8:	380d883a 	mov	r6,r7
  8015dc:	0805cb00 	call	805cb0 <printf>
  8015e0:	010020b4 	movhi	r4,130
  8015e4:	21283004 	addi	r4,r4,-24384
  8015e8:	0805cb00 	call	805cb0 <printf>
  	printf("z-axis self test: gyration trim within : ");
  8015ec:	010020b4 	movhi	r4,130
  8015f0:	21286404 	addi	r4,r4,-24176
  8015f4:	0805cb00 	call	805cb0 <printf>
  	printf("%.1f", selfTest[5]); printf("%% of factory value\n");
  8015f8:	e0bffe17 	ldw	r2,-8(fp)
  8015fc:	1009883a 	mov	r4,r2
  801600:	08041900 	call	804190 <__extendsfdf2>
  801604:	100d883a 	mov	r6,r2
  801608:	180f883a 	mov	r7,r3
  80160c:	010020b4 	movhi	r4,130
  801610:	21282e04 	addi	r4,r4,-24392
  801614:	300b883a 	mov	r5,r6
  801618:	380d883a 	mov	r6,r7
  80161c:	0805cb00 	call	805cb0 <printf>
  801620:	010020b4 	movhi	r4,130
  801624:	21283004 	addi	r4,r4,-24384
  801628:	0805cb00 	call	805cb0 <printf>
  while (1)
  { 
    printf("Hello from task1\n");
  80162c:	010020b4 	movhi	r4,130
  801630:	21286f04 	addi	r4,r4,-24132
  801634:	0805dc80 	call	805dc8 <puts>
    I2C_Start(I2C_SCL_BASE,I2C_SDA_BASE);
  801638:	01004474 	movhi	r4,273
  80163c:	21241c04 	addi	r4,r4,-28560
  801640:	01404474 	movhi	r5,273
  801644:	29641804 	addi	r5,r5,-28576
  801648:	08017980 	call	801798 <I2C_Start>
	if(!I2C_ReadFromDeviceRegister(I2C_SCL_BASE,I2C_SDA_BASE, 0xD0, registerAddress, (alt_u8*)&ReadBuf[0], 6, true)){
  80164c:	e1fff683 	ldbu	r7,-38(fp)
  801650:	e0bff704 	addi	r2,fp,-36
  801654:	d8800015 	stw	r2,0(sp)
  801658:	00800184 	movi	r2,6
  80165c:	d8800115 	stw	r2,4(sp)
  801660:	00800044 	movi	r2,1
  801664:	d8800215 	stw	r2,8(sp)
  801668:	01004474 	movhi	r4,273
  80166c:	21241c04 	addi	r4,r4,-28560
  801670:	01404474 	movhi	r5,273
  801674:	29641804 	addi	r5,r5,-28576
  801678:	01bff404 	movi	r6,-48
  80167c:	0801be80 	call	801be8 <I2C_ReadFromDeviceRegister>

	  }
	printf("WHO AM I: %0x\n", ReadBuf[0]);
  801680:	e0bff703 	ldbu	r2,-36(fp)
  801684:	11403fcc 	andi	r5,r2,255
  801688:	010020b4 	movhi	r4,130
  80168c:	21281e04 	addi	r4,r4,-24456
  801690:	0805cb00 	call	805cb0 <printf>
	I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  801694:	01004474 	movhi	r4,273
  801698:	21241c04 	addi	r4,r4,-28560
  80169c:	01404474 	movhi	r5,273
  8016a0:	29641804 	addi	r5,r5,-28576
  8016a4:	08017d00 	call	8017d0 <I2C_Stop>

    OSTimeDlyHMSM(0, 0, 1, 0);
  8016a8:	0009883a 	mov	r4,zero
  8016ac:	000b883a 	mov	r5,zero
  8016b0:	01800044 	movi	r6,1
  8016b4:	000f883a 	mov	r7,zero
  8016b8:	0816e280 	call	816e28 <OSTimeDlyHMSM>

  }
  8016bc:	003fdb06 	br	80162c <task1+0x230>

008016c0 <task2>:
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
  8016c0:	defffd04 	addi	sp,sp,-12
  8016c4:	dfc00215 	stw	ra,8(sp)
  8016c8:	df000115 	stw	fp,4(sp)
  8016cc:	df000104 	addi	fp,sp,4
  8016d0:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    //printf("Hello from task2\n");
    OSTimeDlyHMSM(0, 0, 1, 0);
  8016d4:	0009883a 	mov	r4,zero
  8016d8:	000b883a 	mov	r5,zero
  8016dc:	01800044 	movi	r6,1
  8016e0:	000f883a 	mov	r7,zero
  8016e4:	0816e280 	call	816e28 <OSTimeDlyHMSM>
  }
  8016e8:	003ffa06 	br	8016d4 <task2+0x14>

008016ec <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
  8016ec:	defff904 	addi	sp,sp,-28
  8016f0:	dfc00615 	stw	ra,24(sp)
  8016f4:	df000515 	stw	fp,20(sp)
  8016f8:	df000504 	addi	fp,sp,20
  
  OSTaskCreateExt(task1,
  8016fc:	018020b4 	movhi	r6,130
  801700:	31bfce04 	addi	r6,r6,-200
  801704:	00800044 	movi	r2,1
  801708:	d8800015 	stw	r2,0(sp)
  80170c:	008020b4 	movhi	r2,130
  801710:	10b7cf04 	addi	r2,r2,-8388
  801714:	d8800115 	stw	r2,4(sp)
  801718:	00820004 	movi	r2,2048
  80171c:	d8800215 	stw	r2,8(sp)
  801720:	d8000315 	stw	zero,12(sp)
  801724:	d8000415 	stw	zero,16(sp)
  801728:	01002034 	movhi	r4,128
  80172c:	2104ff04 	addi	r4,r4,5116
  801730:	000b883a 	mov	r5,zero
  801734:	01c00044 	movi	r7,1
  801738:	08159e40 	call	8159e4 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(task2,
  80173c:	018020b4 	movhi	r6,130
  801740:	3187ce04 	addi	r6,r6,7992
  801744:	00800084 	movi	r2,2
  801748:	d8800015 	stw	r2,0(sp)
  80174c:	008020b4 	movhi	r2,130
  801750:	10bfcf04 	addi	r2,r2,-196
  801754:	d8800115 	stw	r2,4(sp)
  801758:	00820004 	movi	r2,2048
  80175c:	d8800215 	stw	r2,8(sp)
  801760:	d8000315 	stw	zero,12(sp)
  801764:	d8000415 	stw	zero,16(sp)
  801768:	01002034 	movhi	r4,128
  80176c:	2105b004 	addi	r4,r4,5824
  801770:	000b883a 	mov	r5,zero
  801774:	01c00084 	movi	r7,2
  801778:	08159e40 	call	8159e4 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
  80177c:	080fc0c0 	call	80fc0c <OSStart>
  return 0;
  801780:	0005883a 	mov	r2,zero
}
  801784:	e037883a 	mov	sp,fp
  801788:	dfc00117 	ldw	ra,4(sp)
  80178c:	df000017 	ldw	fp,0(sp)
  801790:	dec00204 	addi	sp,sp,8
  801794:	f800283a 	ret

00801798 <I2C_Start>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

/* Write an i2c start condition */
void I2C_Start(alt_u32 clk_base, alt_u32 data_base)
{
  801798:	defffc04 	addi	sp,sp,-16
  80179c:	dfc00315 	stw	ra,12(sp)
  8017a0:	df000215 	stw	fp,8(sp)
  8017a4:	df000204 	addi	fp,sp,8
  8017a8:	e13ffe15 	stw	r4,-8(fp)
  8017ac:	e17fff15 	stw	r5,-4(fp)
	i2c_start(clk_base, data_base);
  8017b0:	e13ffe17 	ldw	r4,-8(fp)
  8017b4:	e17fff17 	ldw	r5,-4(fp)
  8017b8:	0801e680 	call	801e68 <i2c_start>
}
  8017bc:	e037883a 	mov	sp,fp
  8017c0:	dfc00117 	ldw	ra,4(sp)
  8017c4:	df000017 	ldw	fp,0(sp)
  8017c8:	dec00204 	addi	sp,sp,8
  8017cc:	f800283a 	ret

008017d0 <I2C_Stop>:

/* Write an i2c stop condition */
void I2C_Stop(alt_u32 clk_base, alt_u32 data_base)
{
  8017d0:	defffc04 	addi	sp,sp,-16
  8017d4:	dfc00315 	stw	ra,12(sp)
  8017d8:	df000215 	stw	fp,8(sp)
  8017dc:	df000204 	addi	fp,sp,8
  8017e0:	e13ffe15 	stw	r4,-8(fp)
  8017e4:	e17fff15 	stw	r5,-4(fp)
	i2c_stop(clk_base, data_base);
  8017e8:	e13ffe17 	ldw	r4,-8(fp)
  8017ec:	e17fff17 	ldw	r5,-4(fp)
  8017f0:	0801ef00 	call	801ef0 <i2c_stop>
}
  8017f4:	e037883a 	mov	sp,fp
  8017f8:	dfc00117 	ldw	ra,4(sp)
  8017fc:	df000017 	ldw	fp,0(sp)
  801800:	dec00204 	addi	sp,sp,8
  801804:	f800283a 	ret

00801808 <I2C_WriteToDevice>:

/* Write len bytes of data to specified device */
bool I2C_WriteToDevice(alt_u32 clk_base, alt_u32 data_base, alt_8 deviceAddr, alt_u8 *pData, alt_u16 len)
{
  801808:	defff604 	addi	sp,sp,-40
  80180c:	dfc00915 	stw	ra,36(sp)
  801810:	df000815 	stw	fp,32(sp)
  801814:	df000804 	addi	fp,sp,32
  801818:	e13ffa15 	stw	r4,-24(fp)
  80181c:	e17ffb15 	stw	r5,-20(fp)
  801820:	e1fffd15 	stw	r7,-12(fp)
  801824:	e0800217 	ldw	r2,8(fp)
  801828:	e1bffc05 	stb	r6,-16(fp)
  80182c:	e0bffe0d 	sth	r2,-8(fp)
	int i;
	bool bSuccess = true;
  801830:	00800044 	movi	r2,1
  801834:	e0bff805 	stb	r2,-32(fp)

	if (!i2c_selectAddress(clk_base, data_base, deviceAddr))
  801838:	e1bffc07 	ldb	r6,-16(fp)
  80183c:	e13ffa17 	ldw	r4,-24(fp)
  801840:	e17ffb17 	ldw	r5,-20(fp)
  801844:	0801df00 	call	801df0 <i2c_selectAddress>
  801848:	1080005c 	xori	r2,r2,1
  80184c:	10803fcc 	andi	r2,r2,255
  801850:	1005003a 	cmpeq	r2,r2,zero
  801854:	1000021e 	bne	r2,zero,801860 <I2C_WriteToDevice+0x58>
		return false;
  801858:	e03fff15 	stw	zero,-4(fp)
  80185c:	00002206 	br	8018e8 <I2C_WriteToDevice+0xe0>

	for (i = 0; i < len && bSuccess; i++)
  801860:	e03ff915 	stw	zero,-28(fp)
  801864:	00000d06 	br	80189c <I2C_WriteToDevice+0x94>
	{
		bSuccess = i2c_write(clk_base, data_base, *pData);
  801868:	e0bffd17 	ldw	r2,-12(fp)
  80186c:	10800003 	ldbu	r2,0(r2)
  801870:	11803fcc 	andi	r6,r2,255
  801874:	e13ffa17 	ldw	r4,-24(fp)
  801878:	e17ffb17 	ldw	r5,-20(fp)
  80187c:	0801f680 	call	801f68 <i2c_write>
  801880:	e0bff805 	stb	r2,-32(fp)
		pData++;
  801884:	e0bffd17 	ldw	r2,-12(fp)
  801888:	10800044 	addi	r2,r2,1
  80188c:	e0bffd15 	stw	r2,-12(fp)
	bool bSuccess = true;

	if (!i2c_selectAddress(clk_base, data_base, deviceAddr))
		return false;

	for (i = 0; i < len && bSuccess; i++)
  801890:	e0bff917 	ldw	r2,-28(fp)
  801894:	10800044 	addi	r2,r2,1
  801898:	e0bff915 	stw	r2,-28(fp)
  80189c:	e0fffe0b 	ldhu	r3,-8(fp)
  8018a0:	e0bff917 	ldw	r2,-28(fp)
  8018a4:	10c0030e 	bge	r2,r3,8018b4 <I2C_WriteToDevice+0xac>
  8018a8:	e0bff803 	ldbu	r2,-32(fp)
  8018ac:	1004c03a 	cmpne	r2,r2,zero
  8018b0:	103fed1e 	bne	r2,zero,801868 <I2C_WriteToDevice+0x60>
	{
		bSuccess = i2c_write(clk_base, data_base, *pData);
		pData++;
	}

	if (!bSuccess)
  8018b4:	e0bff803 	ldbu	r2,-32(fp)
  8018b8:	1080005c 	xori	r2,r2,1
  8018bc:	10803fcc 	andi	r2,r2,255
  8018c0:	1005003a 	cmpeq	r2,r2,zero
  8018c4:	1000061e 	bne	r2,zero,8018e0 <I2C_WriteToDevice+0xd8>
	{
		printf("I2C Error: Data write to device 0x%02x failed\n", deviceAddr);
  8018c8:	e17ffc07 	ldb	r5,-16(fp)
  8018cc:	010020b4 	movhi	r4,130
  8018d0:	21287404 	addi	r4,r4,-24112
  8018d4:	0805cb00 	call	805cb0 <printf>
		return false;
  8018d8:	e03fff15 	stw	zero,-4(fp)
  8018dc:	00000206 	br	8018e8 <I2C_WriteToDevice+0xe0>
	}
    
    return true;
  8018e0:	00800044 	movi	r2,1
  8018e4:	e0bfff15 	stw	r2,-4(fp)
  8018e8:	e0bfff17 	ldw	r2,-4(fp)
}
  8018ec:	e037883a 	mov	sp,fp
  8018f0:	dfc00117 	ldw	ra,4(sp)
  8018f4:	df000017 	ldw	fp,0(sp)
  8018f8:	dec00204 	addi	sp,sp,8
  8018fc:	f800283a 	ret

00801900 <I2C_WriteToDeviceRegister>:

/* Write len bytes of data to specified control register of specified device */
bool I2C_WriteToDeviceRegister(alt_u32 clk_base, alt_u32 data_base, alt_8 deviceAddr,
							   alt_u8 controlAddr, alt_u8 *pData, alt_u16 len)
{
  801900:	defff604 	addi	sp,sp,-40
  801904:	dfc00915 	stw	ra,36(sp)
  801908:	df000815 	stw	fp,32(sp)
  80190c:	df000804 	addi	fp,sp,32
  801910:	e13ffa15 	stw	r4,-24(fp)
  801914:	e17ffb15 	stw	r5,-20(fp)
  801918:	e0800317 	ldw	r2,12(fp)
  80191c:	e1bffc05 	stb	r6,-16(fp)
  801920:	e1fffd05 	stb	r7,-12(fp)
  801924:	e0bffe0d 	sth	r2,-8(fp)
	int i;
	bool bSuccess = true;
  801928:	00800044 	movi	r2,1
  80192c:	e0bff805 	stb	r2,-32(fp)

	if (!i2c_selectAddress(clk_base, data_base, deviceAddr))
  801930:	e1bffc07 	ldb	r6,-16(fp)
  801934:	e13ffa17 	ldw	r4,-24(fp)
  801938:	e17ffb17 	ldw	r5,-20(fp)
  80193c:	0801df00 	call	801df0 <i2c_selectAddress>
  801940:	1080005c 	xori	r2,r2,1
  801944:	10803fcc 	andi	r2,r2,255
  801948:	1005003a 	cmpeq	r2,r2,zero
  80194c:	1000021e 	bne	r2,zero,801958 <I2C_WriteToDeviceRegister+0x58>
		return false;
  801950:	e03fff15 	stw	zero,-4(fp)
  801954:	00003006 	br	801a18 <I2C_WriteToDeviceRegister+0x118>

	if (!i2c_selectAddress(clk_base, data_base, controlAddr))
  801958:	e0bffd03 	ldbu	r2,-12(fp)
  80195c:	11803fcc 	andi	r6,r2,255
  801960:	3180201c 	xori	r6,r6,128
  801964:	31bfe004 	addi	r6,r6,-128
  801968:	e13ffa17 	ldw	r4,-24(fp)
  80196c:	e17ffb17 	ldw	r5,-20(fp)
  801970:	0801df00 	call	801df0 <i2c_selectAddress>
  801974:	1080005c 	xori	r2,r2,1
  801978:	10803fcc 	andi	r2,r2,255
  80197c:	1005003a 	cmpeq	r2,r2,zero
  801980:	1000021e 	bne	r2,zero,80198c <I2C_WriteToDeviceRegister+0x8c>
		return false;
  801984:	e03fff15 	stw	zero,-4(fp)
  801988:	00002306 	br	801a18 <I2C_WriteToDeviceRegister+0x118>

	for (i = 0; i < len && bSuccess; i++)
  80198c:	e03ff915 	stw	zero,-28(fp)
  801990:	00000d06 	br	8019c8 <I2C_WriteToDeviceRegister+0xc8>
	{
		bSuccess = i2c_write(clk_base, data_base, *pData);
  801994:	e0800217 	ldw	r2,8(fp)
  801998:	10800003 	ldbu	r2,0(r2)
  80199c:	11803fcc 	andi	r6,r2,255
  8019a0:	e13ffa17 	ldw	r4,-24(fp)
  8019a4:	e17ffb17 	ldw	r5,-20(fp)
  8019a8:	0801f680 	call	801f68 <i2c_write>
  8019ac:	e0bff805 	stb	r2,-32(fp)
		pData++;
  8019b0:	e0800217 	ldw	r2,8(fp)
  8019b4:	10800044 	addi	r2,r2,1
  8019b8:	e0800215 	stw	r2,8(fp)
		return false;

	if (!i2c_selectAddress(clk_base, data_base, controlAddr))
		return false;

	for (i = 0; i < len && bSuccess; i++)
  8019bc:	e0bff917 	ldw	r2,-28(fp)
  8019c0:	10800044 	addi	r2,r2,1
  8019c4:	e0bff915 	stw	r2,-28(fp)
  8019c8:	e0fffe0b 	ldhu	r3,-8(fp)
  8019cc:	e0bff917 	ldw	r2,-28(fp)
  8019d0:	10c0030e 	bge	r2,r3,8019e0 <I2C_WriteToDeviceRegister+0xe0>
  8019d4:	e0bff803 	ldbu	r2,-32(fp)
  8019d8:	1004c03a 	cmpne	r2,r2,zero
  8019dc:	103fed1e 	bne	r2,zero,801994 <I2C_WriteToDeviceRegister+0x94>
	{
		bSuccess = i2c_write(clk_base, data_base, *pData);
		pData++;
	}

	if (!bSuccess)
  8019e0:	e0bff803 	ldbu	r2,-32(fp)
  8019e4:	1080005c 	xori	r2,r2,1
  8019e8:	10803fcc 	andi	r2,r2,255
  8019ec:	1005003a 	cmpeq	r2,r2,zero
  8019f0:	1000071e 	bne	r2,zero,801a10 <I2C_WriteToDeviceRegister+0x110>
	{
		printf("I2C Error: Data write to register 0x%02x on device 0x%02x failed\n", deviceAddr, controlAddr);
  8019f4:	e17ffc07 	ldb	r5,-16(fp)
  8019f8:	e1bffd03 	ldbu	r6,-12(fp)
  8019fc:	010020b4 	movhi	r4,130
  801a00:	21288004 	addi	r4,r4,-24064
  801a04:	0805cb00 	call	805cb0 <printf>
		return false;
  801a08:	e03fff15 	stw	zero,-4(fp)
  801a0c:	00000206 	br	801a18 <I2C_WriteToDeviceRegister+0x118>
	}

    return true;
  801a10:	00800044 	movi	r2,1
  801a14:	e0bfff15 	stw	r2,-4(fp)
  801a18:	e0bfff17 	ldw	r2,-4(fp)
}
  801a1c:	e037883a 	mov	sp,fp
  801a20:	dfc00117 	ldw	ra,4(sp)
  801a24:	df000017 	ldw	fp,0(sp)
  801a28:	dec00204 	addi	sp,sp,8
  801a2c:	f800283a 	ret

00801a30 <I2C_WriteMore>:

/* Write len bytes of data to last address */
bool I2C_WriteMore(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, alt_u16 len)
{
  801a30:	defff704 	addi	sp,sp,-36
  801a34:	dfc00815 	stw	ra,32(sp)
  801a38:	df000715 	stw	fp,28(sp)
  801a3c:	df000704 	addi	fp,sp,28
  801a40:	e13ffb15 	stw	r4,-20(fp)
  801a44:	e17ffc15 	stw	r5,-16(fp)
  801a48:	e1bffd15 	stw	r6,-12(fp)
  801a4c:	e1fffe0d 	sth	r7,-8(fp)
	int i;
	bool bSuccess = true;
  801a50:	00800044 	movi	r2,1
  801a54:	e0bff905 	stb	r2,-28(fp)

	for (i = 0; i < len && bSuccess; i++)
  801a58:	e03ffa15 	stw	zero,-24(fp)
  801a5c:	00000d06 	br	801a94 <I2C_WriteMore+0x64>
	{
		bSuccess = i2c_write(clk_base, data_base, *pData);
  801a60:	e0bffd17 	ldw	r2,-12(fp)
  801a64:	10800003 	ldbu	r2,0(r2)
  801a68:	11803fcc 	andi	r6,r2,255
  801a6c:	e13ffb17 	ldw	r4,-20(fp)
  801a70:	e17ffc17 	ldw	r5,-16(fp)
  801a74:	0801f680 	call	801f68 <i2c_write>
  801a78:	e0bff905 	stb	r2,-28(fp)
		pData++;
  801a7c:	e0bffd17 	ldw	r2,-12(fp)
  801a80:	10800044 	addi	r2,r2,1
  801a84:	e0bffd15 	stw	r2,-12(fp)
bool I2C_WriteMore(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, alt_u16 len)
{
	int i;
	bool bSuccess = true;

	for (i = 0; i < len && bSuccess; i++)
  801a88:	e0bffa17 	ldw	r2,-24(fp)
  801a8c:	10800044 	addi	r2,r2,1
  801a90:	e0bffa15 	stw	r2,-24(fp)
  801a94:	e0fffe0b 	ldhu	r3,-8(fp)
  801a98:	e0bffa17 	ldw	r2,-24(fp)
  801a9c:	10c0030e 	bge	r2,r3,801aac <I2C_WriteMore+0x7c>
  801aa0:	e0bff903 	ldbu	r2,-28(fp)
  801aa4:	1004c03a 	cmpne	r2,r2,zero
  801aa8:	103fed1e 	bne	r2,zero,801a60 <I2C_WriteMore+0x30>
	{
		bSuccess = i2c_write(clk_base, data_base, *pData);
		pData++;
	}

	if (!bSuccess)
  801aac:	e0bff903 	ldbu	r2,-28(fp)
  801ab0:	1080005c 	xori	r2,r2,1
  801ab4:	10803fcc 	andi	r2,r2,255
  801ab8:	1005003a 	cmpeq	r2,r2,zero
  801abc:	1000051e 	bne	r2,zero,801ad4 <I2C_WriteMore+0xa4>
	{
		printf("I2C Error: Additional data write failed\n");
  801ac0:	010020b4 	movhi	r4,130
  801ac4:	21289104 	addi	r4,r4,-23996
  801ac8:	0805dc80 	call	805dc8 <puts>
		return false;
  801acc:	e03fff15 	stw	zero,-4(fp)
  801ad0:	00000206 	br	801adc <I2C_WriteMore+0xac>
	}

    return true;
  801ad4:	00800044 	movi	r2,1
  801ad8:	e0bfff15 	stw	r2,-4(fp)
  801adc:	e0bfff17 	ldw	r2,-4(fp)
}
  801ae0:	e037883a 	mov	sp,fp
  801ae4:	dfc00117 	ldw	ra,4(sp)
  801ae8:	df000017 	ldw	fp,0(sp)
  801aec:	dec00204 	addi	sp,sp,8
  801af0:	f800283a 	ret

00801af4 <I2C_ReadFromDevice>:

/* Read len bytes of data from specified device */
bool I2C_ReadFromDevice(alt_u32 clk_base, alt_u32 data_base, alt_8 deviceAddr, alt_u8 *pBuf, alt_u16 len, bool endRead)
{
  801af4:	defff604 	addi	sp,sp,-40
  801af8:	dfc00915 	stw	ra,36(sp)
  801afc:	df000815 	stw	fp,32(sp)
  801b00:	df000804 	addi	fp,sp,32
  801b04:	e13ff915 	stw	r4,-28(fp)
  801b08:	e17ffa15 	stw	r5,-24(fp)
  801b0c:	e1fffc15 	stw	r7,-16(fp)
  801b10:	e0800217 	ldw	r2,8(fp)
  801b14:	e0c00317 	ldw	r3,12(fp)
  801b18:	e1bffb05 	stb	r6,-20(fp)
  801b1c:	e0bffd0d 	sth	r2,-12(fp)
  801b20:	e0fffe05 	stb	r3,-8(fp)
    int i;
    deviceAddr |= 1; // Read address
  801b24:	e0bffb03 	ldbu	r2,-20(fp)
  801b28:	10800054 	ori	r2,r2,1
  801b2c:	e0bffb05 	stb	r2,-20(fp)

	if (!i2c_selectAddress(clk_base, data_base, deviceAddr))
  801b30:	e1bffb07 	ldb	r6,-20(fp)
  801b34:	e13ff917 	ldw	r4,-28(fp)
  801b38:	e17ffa17 	ldw	r5,-24(fp)
  801b3c:	0801df00 	call	801df0 <i2c_selectAddress>
  801b40:	1080005c 	xori	r2,r2,1
  801b44:	10803fcc 	andi	r2,r2,255
  801b48:	1005003a 	cmpeq	r2,r2,zero
  801b4c:	1000021e 	bne	r2,zero,801b58 <I2C_ReadFromDevice+0x64>
		return false;
  801b50:	e03fff15 	stw	zero,-4(fp)
  801b54:	00001e06 	br	801bd0 <I2C_ReadFromDevice+0xdc>
    
	for (i = 0; i < len; i++)
  801b58:	e03ff815 	stw	zero,-32(fp)
  801b5c:	00001706 	br	801bbc <I2C_ReadFromDevice+0xc8>
	{
		if (i == (len - 1))
  801b60:	e0bffd0b 	ldhu	r2,-12(fp)
  801b64:	10ffffc4 	addi	r3,r2,-1
  801b68:	e0bff817 	ldw	r2,-32(fp)
  801b6c:	1880081e 	bne	r3,r2,801b90 <I2C_ReadFromDevice+0x9c>
		{
			i2c_read(clk_base, data_base, pBuf, !endRead);  // last byte
  801b70:	e0bffe03 	ldbu	r2,-8(fp)
  801b74:	1080005c 	xori	r2,r2,1
  801b78:	11c03fcc 	andi	r7,r2,255
  801b7c:	e13ff917 	ldw	r4,-28(fp)
  801b80:	e17ffa17 	ldw	r5,-24(fp)
  801b84:	e1bffc17 	ldw	r6,-16(fp)
  801b88:	08020ac0 	call	8020ac <i2c_read>
  801b8c:	00000806 	br	801bb0 <I2C_ReadFromDevice+0xbc>
		}
		else
		{
			i2c_read(clk_base, data_base, pBuf, true);  // read
  801b90:	e13ff917 	ldw	r4,-28(fp)
  801b94:	e17ffa17 	ldw	r5,-24(fp)
  801b98:	e1bffc17 	ldw	r6,-16(fp)
  801b9c:	01c00044 	movi	r7,1
  801ba0:	08020ac0 	call	8020ac <i2c_read>
			pBuf++;
  801ba4:	e0bffc17 	ldw	r2,-16(fp)
  801ba8:	10800044 	addi	r2,r2,1
  801bac:	e0bffc15 	stw	r2,-16(fp)
    deviceAddr |= 1; // Read address

	if (!i2c_selectAddress(clk_base, data_base, deviceAddr))
		return false;
    
	for (i = 0; i < len; i++)
  801bb0:	e0bff817 	ldw	r2,-32(fp)
  801bb4:	10800044 	addi	r2,r2,1
  801bb8:	e0bff815 	stw	r2,-32(fp)
  801bbc:	e0fffd0b 	ldhu	r3,-12(fp)
  801bc0:	e0bff817 	ldw	r2,-32(fp)
  801bc4:	10ffe616 	blt	r2,r3,801b60 <I2C_ReadFromDevice+0x6c>
			i2c_read(clk_base, data_base, pBuf, true);  // read
			pBuf++;
		}
	}

	return true;
  801bc8:	00800044 	movi	r2,1
  801bcc:	e0bfff15 	stw	r2,-4(fp)
  801bd0:	e0bfff17 	ldw	r2,-4(fp)
}
  801bd4:	e037883a 	mov	sp,fp
  801bd8:	dfc00117 	ldw	ra,4(sp)
  801bdc:	df000017 	ldw	fp,0(sp)
  801be0:	dec00204 	addi	sp,sp,8
  801be4:	f800283a 	ret

00801be8 <I2C_ReadFromDeviceRegister>:

/* Read len bytes of data from specified control register of specified device */
bool I2C_ReadFromDeviceRegister(alt_u32 clk_base, alt_u32 data_base, alt_8 deviceAddr,
								alt_u8 controlAddr, alt_u8 *pBuf, alt_u16 len, bool endRead)
{
  801be8:	defff604 	addi	sp,sp,-40
  801bec:	dfc00915 	stw	ra,36(sp)
  801bf0:	df000815 	stw	fp,32(sp)
  801bf4:	df000804 	addi	fp,sp,32
  801bf8:	e13ff915 	stw	r4,-28(fp)
  801bfc:	e17ffa15 	stw	r5,-24(fp)
  801c00:	e0800317 	ldw	r2,12(fp)
  801c04:	e0c00417 	ldw	r3,16(fp)
  801c08:	e1bffb05 	stb	r6,-20(fp)
  801c0c:	e1fffc05 	stb	r7,-16(fp)
  801c10:	e0bffd0d 	sth	r2,-12(fp)
  801c14:	e0fffe05 	stb	r3,-8(fp)
    int i;

	if (!i2c_selectAddress(clk_base, data_base, deviceAddr))
  801c18:	e1bffb07 	ldb	r6,-20(fp)
  801c1c:	e13ff917 	ldw	r4,-28(fp)
  801c20:	e17ffa17 	ldw	r5,-24(fp)
  801c24:	0801df00 	call	801df0 <i2c_selectAddress>
  801c28:	1080005c 	xori	r2,r2,1
  801c2c:	10803fcc 	andi	r2,r2,255
  801c30:	1005003a 	cmpeq	r2,r2,zero
  801c34:	1000021e 	bne	r2,zero,801c40 <I2C_ReadFromDeviceRegister+0x58>
		return false;
  801c38:	e03fff15 	stw	zero,-4(fp)
  801c3c:	00003b06 	br	801d2c <I2C_ReadFromDeviceRegister+0x144>

	if (!i2c_selectAddress(clk_base, data_base, controlAddr))
  801c40:	e0bffc03 	ldbu	r2,-16(fp)
  801c44:	11803fcc 	andi	r6,r2,255
  801c48:	3180201c 	xori	r6,r6,128
  801c4c:	31bfe004 	addi	r6,r6,-128
  801c50:	e13ff917 	ldw	r4,-28(fp)
  801c54:	e17ffa17 	ldw	r5,-24(fp)
  801c58:	0801df00 	call	801df0 <i2c_selectAddress>
  801c5c:	1080005c 	xori	r2,r2,1
  801c60:	10803fcc 	andi	r2,r2,255
  801c64:	1005003a 	cmpeq	r2,r2,zero
  801c68:	1000021e 	bne	r2,zero,801c74 <I2C_ReadFromDeviceRegister+0x8c>
		return false;
  801c6c:	e03fff15 	stw	zero,-4(fp)
  801c70:	00002e06 	br	801d2c <I2C_ReadFromDeviceRegister+0x144>

    i2c_start(clk_base, data_base);  // restart
  801c74:	e13ff917 	ldw	r4,-28(fp)
  801c78:	e17ffa17 	ldw	r5,-24(fp)
  801c7c:	0801e680 	call	801e68 <i2c_start>
    deviceAddr |= 1; // Read address
  801c80:	e0bffb03 	ldbu	r2,-20(fp)
  801c84:	10800054 	ori	r2,r2,1
  801c88:	e0bffb05 	stb	r2,-20(fp)

	if (!i2c_selectAddress(clk_base, data_base, deviceAddr))
  801c8c:	e1bffb07 	ldb	r6,-20(fp)
  801c90:	e13ff917 	ldw	r4,-28(fp)
  801c94:	e17ffa17 	ldw	r5,-24(fp)
  801c98:	0801df00 	call	801df0 <i2c_selectAddress>
  801c9c:	1080005c 	xori	r2,r2,1
  801ca0:	10803fcc 	andi	r2,r2,255
  801ca4:	1005003a 	cmpeq	r2,r2,zero
  801ca8:	1000021e 	bne	r2,zero,801cb4 <I2C_ReadFromDeviceRegister+0xcc>
		return false;
  801cac:	e03fff15 	stw	zero,-4(fp)
  801cb0:	00001e06 	br	801d2c <I2C_ReadFromDeviceRegister+0x144>

	for (i = 0; i < len; i++)
  801cb4:	e03ff815 	stw	zero,-32(fp)
  801cb8:	00001706 	br	801d18 <I2C_ReadFromDeviceRegister+0x130>
	{
		if (i == (len - 1))
  801cbc:	e0bffd0b 	ldhu	r2,-12(fp)
  801cc0:	10ffffc4 	addi	r3,r2,-1
  801cc4:	e0bff817 	ldw	r2,-32(fp)
  801cc8:	1880081e 	bne	r3,r2,801cec <I2C_ReadFromDeviceRegister+0x104>
		{
			i2c_read(clk_base, data_base, pBuf, !endRead);  // last byte
  801ccc:	e0bffe03 	ldbu	r2,-8(fp)
  801cd0:	1080005c 	xori	r2,r2,1
  801cd4:	11c03fcc 	andi	r7,r2,255
  801cd8:	e13ff917 	ldw	r4,-28(fp)
  801cdc:	e17ffa17 	ldw	r5,-24(fp)
  801ce0:	e1800217 	ldw	r6,8(fp)
  801ce4:	08020ac0 	call	8020ac <i2c_read>
  801ce8:	00000806 	br	801d0c <I2C_ReadFromDeviceRegister+0x124>
		}
		else
		{
			i2c_read(clk_base, data_base, pBuf, true);  // read
  801cec:	e13ff917 	ldw	r4,-28(fp)
  801cf0:	e17ffa17 	ldw	r5,-24(fp)
  801cf4:	e1800217 	ldw	r6,8(fp)
  801cf8:	01c00044 	movi	r7,1
  801cfc:	08020ac0 	call	8020ac <i2c_read>
			pBuf++;
  801d00:	e0800217 	ldw	r2,8(fp)
  801d04:	10800044 	addi	r2,r2,1
  801d08:	e0800215 	stw	r2,8(fp)
    deviceAddr |= 1; // Read address

	if (!i2c_selectAddress(clk_base, data_base, deviceAddr))
		return false;

	for (i = 0; i < len; i++)
  801d0c:	e0bff817 	ldw	r2,-32(fp)
  801d10:	10800044 	addi	r2,r2,1
  801d14:	e0bff815 	stw	r2,-32(fp)
  801d18:	e0fffd0b 	ldhu	r3,-12(fp)
  801d1c:	e0bff817 	ldw	r2,-32(fp)
  801d20:	10ffe616 	blt	r2,r3,801cbc <I2C_ReadFromDeviceRegister+0xd4>
			i2c_read(clk_base, data_base, pBuf, true);  // read
			pBuf++;
		}
	}

	return true;
  801d24:	00800044 	movi	r2,1
  801d28:	e0bfff15 	stw	r2,-4(fp)
  801d2c:	e0bfff17 	ldw	r2,-4(fp)
}
  801d30:	e037883a 	mov	sp,fp
  801d34:	dfc00117 	ldw	ra,4(sp)
  801d38:	df000017 	ldw	fp,0(sp)
  801d3c:	dec00204 	addi	sp,sp,8
  801d40:	f800283a 	ret

00801d44 <I2C_ReadMore>:

/* Read len bytes of data from last address */
void I2C_ReadMore(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pBuf, alt_u16 len, bool endRead)
{
  801d44:	defff804 	addi	sp,sp,-32
  801d48:	dfc00715 	stw	ra,28(sp)
  801d4c:	df000615 	stw	fp,24(sp)
  801d50:	df000604 	addi	fp,sp,24
  801d54:	e13ffb15 	stw	r4,-20(fp)
  801d58:	e17ffc15 	stw	r5,-16(fp)
  801d5c:	e1bffd15 	stw	r6,-12(fp)
  801d60:	e0800217 	ldw	r2,8(fp)
  801d64:	e1fffe0d 	sth	r7,-8(fp)
  801d68:	e0bfff05 	stb	r2,-4(fp)
    int i;

	for (i = 0; i < len; i++)
  801d6c:	e03ffa15 	stw	zero,-24(fp)
  801d70:	00001706 	br	801dd0 <I2C_ReadMore+0x8c>
	{
		if (i == (len - 1))
  801d74:	e0bffe0b 	ldhu	r2,-8(fp)
  801d78:	10ffffc4 	addi	r3,r2,-1
  801d7c:	e0bffa17 	ldw	r2,-24(fp)
  801d80:	1880081e 	bne	r3,r2,801da4 <I2C_ReadMore+0x60>
		{
			i2c_read(clk_base, data_base, pBuf, !endRead);  // last byte
  801d84:	e0bfff03 	ldbu	r2,-4(fp)
  801d88:	1080005c 	xori	r2,r2,1
  801d8c:	11c03fcc 	andi	r7,r2,255
  801d90:	e13ffb17 	ldw	r4,-20(fp)
  801d94:	e17ffc17 	ldw	r5,-16(fp)
  801d98:	e1bffd17 	ldw	r6,-12(fp)
  801d9c:	08020ac0 	call	8020ac <i2c_read>
  801da0:	00000806 	br	801dc4 <I2C_ReadMore+0x80>
		}
		else
		{
			i2c_read(clk_base, data_base, pBuf, true);  // read
  801da4:	e13ffb17 	ldw	r4,-20(fp)
  801da8:	e17ffc17 	ldw	r5,-16(fp)
  801dac:	e1bffd17 	ldw	r6,-12(fp)
  801db0:	01c00044 	movi	r7,1
  801db4:	08020ac0 	call	8020ac <i2c_read>
			pBuf++;
  801db8:	e0bffd17 	ldw	r2,-12(fp)
  801dbc:	10800044 	addi	r2,r2,1
  801dc0:	e0bffd15 	stw	r2,-12(fp)
/* Read len bytes of data from last address */
void I2C_ReadMore(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pBuf, alt_u16 len, bool endRead)
{
    int i;

	for (i = 0; i < len; i++)
  801dc4:	e0bffa17 	ldw	r2,-24(fp)
  801dc8:	10800044 	addi	r2,r2,1
  801dcc:	e0bffa15 	stw	r2,-24(fp)
  801dd0:	e0fffe0b 	ldhu	r3,-8(fp)
  801dd4:	e0bffa17 	ldw	r2,-24(fp)
  801dd8:	10ffe616 	blt	r2,r3,801d74 <I2C_ReadMore+0x30>
		{
			i2c_read(clk_base, data_base, pBuf, true);  // read
			pBuf++;
		}
	}
}
  801ddc:	e037883a 	mov	sp,fp
  801de0:	dfc00117 	ldw	ra,4(sp)
  801de4:	df000017 	ldw	fp,0(sp)
  801de8:	dec00204 	addi	sp,sp,8
  801dec:	f800283a 	ret

00801df0 <i2c_selectAddress>:
///////////// Internal functions (i2c_XXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////

// write the given address on the i2c bus
bool i2c_selectAddress(alt_u32 clk_base, alt_u32 data_base, alt_8 address)
{
  801df0:	defffa04 	addi	sp,sp,-24
  801df4:	dfc00515 	stw	ra,20(sp)
  801df8:	df000415 	stw	fp,16(sp)
  801dfc:	df000404 	addi	fp,sp,16
  801e00:	e13ffc15 	stw	r4,-16(fp)
  801e04:	e17ffd15 	stw	r5,-12(fp)
  801e08:	e1bffe05 	stb	r6,-8(fp)
    if (!i2c_write(clk_base, data_base, address))
  801e0c:	e0bffe03 	ldbu	r2,-8(fp)
  801e10:	11803fcc 	andi	r6,r2,255
  801e14:	e13ffc17 	ldw	r4,-16(fp)
  801e18:	e17ffd17 	ldw	r5,-12(fp)
  801e1c:	0801f680 	call	801f68 <i2c_write>
  801e20:	1080005c 	xori	r2,r2,1
  801e24:	10803fcc 	andi	r2,r2,255
  801e28:	1005003a 	cmpeq	r2,r2,zero
  801e2c:	1000061e 	bne	r2,zero,801e48 <i2c_selectAddress+0x58>
    {
		printf("I2C Error: Address write to device 0x%02x failed\n", address);
  801e30:	e17ffe07 	ldb	r5,-8(fp)
  801e34:	010020b4 	movhi	r4,130
  801e38:	21289b04 	addi	r4,r4,-23956
  801e3c:	0805cb00 	call	805cb0 <printf>
    	return false;
  801e40:	e03fff15 	stw	zero,-4(fp)
  801e44:	00000206 	br	801e50 <i2c_selectAddress+0x60>
    }

    return true;
  801e48:	00800044 	movi	r2,1
  801e4c:	e0bfff15 	stw	r2,-4(fp)
  801e50:	e0bfff17 	ldw	r2,-4(fp)
}
  801e54:	e037883a 	mov	sp,fp
  801e58:	dfc00117 	ldw	ra,4(sp)
  801e5c:	df000017 	ldw	fp,0(sp)
  801e60:	dec00204 	addi	sp,sp,8
  801e64:	f800283a 	ret

00801e68 <i2c_start>:

//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base)
{
  801e68:	defffc04 	addi	sp,sp,-16
  801e6c:	dfc00315 	stw	ra,12(sp)
  801e70:	df000215 	stw	fp,8(sp)
  801e74:	df000204 	addi	fp,sp,8
  801e78:	e13ffe15 	stw	r4,-8(fp)
  801e7c:	e17fff15 	stw	r5,-4(fp)
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
  801e80:	e0bfff17 	ldw	r2,-4(fp)
  801e84:	10800104 	addi	r2,r2,4
  801e88:	1007883a 	mov	r3,r2
  801e8c:	00800044 	movi	r2,1
  801e90:	18800035 	stwio	r2,0(r3)
    
    // start condition
    SDA_HIGH(data_base); // data high
  801e94:	e0bfff17 	ldw	r2,-4(fp)
  801e98:	1007883a 	mov	r3,r2
  801e9c:	00800044 	movi	r2,1
  801ea0:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base);
  801ea4:	e0bffe17 	ldw	r2,-8(fp)
  801ea8:	1007883a 	mov	r3,r2
  801eac:	00800044 	movi	r2,1
  801eb0:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;
  801eb4:	01000044 	movi	r4,1
  801eb8:	080ea200 	call	80ea20 <usleep>
    SDA_LOW(data_base); // data low
  801ebc:	e0bfff17 	ldw	r2,-4(fp)
  801ec0:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; 
  801ec4:	01000044 	movi	r4,1
  801ec8:	080ea200 	call	80ea20 <usleep>
    SCL_LOW(clk_base); // clock low
  801ecc:	e0bffe17 	ldw	r2,-8(fp)
  801ed0:	10000035 	stwio	zero,0(r2)
    SCL_DELAY;
  801ed4:	01000044 	movi	r4,1
  801ed8:	080ea200 	call	80ea20 <usleep>
}
  801edc:	e037883a 	mov	sp,fp
  801ee0:	dfc00117 	ldw	ra,4(sp)
  801ee4:	df000017 	ldw	fp,0(sp)
  801ee8:	dec00204 	addi	sp,sp,8
  801eec:	f800283a 	ret

00801ef0 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base)
{
  801ef0:	defffc04 	addi	sp,sp,-16
  801ef4:	dfc00315 	stw	ra,12(sp)
  801ef8:	df000215 	stw	fp,8(sp)
  801efc:	df000204 	addi	fp,sp,8
  801f00:	e13ffe15 	stw	r4,-8(fp)
  801f04:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
  801f08:	e0bfff17 	ldw	r2,-4(fp)
  801f0c:	10800104 	addi	r2,r2,4
  801f10:	1007883a 	mov	r3,r2
  801f14:	00800044 	movi	r2,1
  801f18:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
  801f1c:	e0bfff17 	ldw	r2,-4(fp)
  801f20:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
  801f24:	e0bffe17 	ldw	r2,-8(fp)
  801f28:	1007883a 	mov	r3,r2
  801f2c:	00800044 	movi	r2,1
  801f30:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high long delay
  801f34:	01000044 	movi	r4,1
  801f38:	080ea200 	call	80ea20 <usleep>
    SDA_HIGH(data_base); // data high
  801f3c:	e0bfff17 	ldw	r2,-4(fp)
  801f40:	1007883a 	mov	r3,r2
  801f44:	00800044 	movi	r2,1
  801f48:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // data high delay
  801f4c:	01000044 	movi	r4,1
  801f50:	080ea200 	call	80ea20 <usleep>
}
  801f54:	e037883a 	mov	sp,fp
  801f58:	dfc00117 	ldw	ra,4(sp)
  801f5c:	df000017 	ldw	fp,0(sp)
  801f60:	dec00204 	addi	sp,sp,8
  801f64:	f800283a 	ret

00801f68 <i2c_write>:

// return true if device response ack
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data)
{
  801f68:	defff904 	addi	sp,sp,-28
  801f6c:	dfc00615 	stw	ra,24(sp)
  801f70:	df000515 	stw	fp,20(sp)
  801f74:	df000504 	addi	fp,sp,20
  801f78:	e13ffd15 	stw	r4,-12(fp)
  801f7c:	e17ffe15 	stw	r5,-8(fp)
  801f80:	e1bfff05 	stb	r6,-4(fp)
    alt_u8 Mask = 0x80;
  801f84:	00bfe004 	movi	r2,-128
  801f88:	e0bffc45 	stb	r2,-15(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
  801f8c:	e0bffe17 	ldw	r2,-8(fp)
  801f90:	10800104 	addi	r2,r2,4
  801f94:	1007883a 	mov	r3,r2
  801f98:	00800044 	movi	r2,1
  801f9c:	18800035 	stwio	r2,0(r3)
    
    for (i = 0; i < 8; i++)
  801fa0:	e03ffb15 	stw	zero,-20(fp)
  801fa4:	00002306 	br	802034 <i2c_write+0xcc>
    {
        SCL_LOW(clk_base);  // new, make sure data change at clk low
  801fa8:	e0bffd17 	ldw	r2,-12(fp)
  801fac:	10000035 	stwio	zero,0(r2)
        // output data on bus
        if (Data & Mask)
  801fb0:	e0ffff03 	ldbu	r3,-4(fp)
  801fb4:	e0bffc43 	ldbu	r2,-15(fp)
  801fb8:	1884703a 	and	r2,r3,r2
  801fbc:	10803fcc 	andi	r2,r2,255
  801fc0:	1005003a 	cmpeq	r2,r2,zero
  801fc4:	1000051e 	bne	r2,zero,801fdc <i2c_write+0x74>
        { // there is a delay in this command
            SDA_HIGH(data_base);
  801fc8:	e0bffe17 	ldw	r2,-8(fp)
  801fcc:	1007883a 	mov	r3,r2
  801fd0:	00800044 	movi	r2,1
  801fd4:	18800035 	stwio	r2,0(r3)
  801fd8:	00000206 	br	801fe4 <i2c_write+0x7c>
        }
        else
        {
            SDA_LOW(data_base);
  801fdc:	e0bffe17 	ldw	r2,-8(fp)
  801fe0:	10000035 	stwio	zero,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
  801fe4:	e0bffc43 	ldbu	r2,-15(fp)
  801fe8:	1004d07a 	srli	r2,r2,1
  801fec:	e0bffc45 	stb	r2,-15(fp)
        // clock high
        SCL_HIGH(clk_base);
  801ff0:	e0bffd17 	ldw	r2,-12(fp)
  801ff4:	1007883a 	mov	r3,r2
  801ff8:	00800044 	movi	r2,1
  801ffc:	18800035 	stwio	r2,0(r3)
        while (SCL_READ(clk_base) == 0); // clock stretching
  802000:	e0bffd17 	ldw	r2,-12(fp)
  802004:	10800037 	ldwio	r2,0(r2)
  802008:	1005003a 	cmpeq	r2,r2,zero
  80200c:	103ffc1e 	bne	r2,zero,802000 <i2c_write+0x98>
        SCL_DELAY;
  802010:	01000044 	movi	r4,1
  802014:	080ea200 	call	80ea20 <usleep>
        SCL_LOW(clk_base);
  802018:	e0bffd17 	ldw	r2,-12(fp)
  80201c:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
  802020:	01000044 	movi	r4,1
  802024:	080ea200 	call	80ea20 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for (i = 0; i < 8; i++)
  802028:	e0bffb17 	ldw	r2,-20(fp)
  80202c:	10800044 	addi	r2,r2,1
  802030:	e0bffb15 	stw	r2,-20(fp)
  802034:	e0bffb17 	ldw	r2,-20(fp)
  802038:	10800210 	cmplti	r2,r2,8
  80203c:	103fda1e 	bne	r2,zero,801fa8 <i2c_write+0x40>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
  802040:	e0bffe17 	ldw	r2,-8(fp)
  802044:	10800104 	addi	r2,r2,4
  802048:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
  80204c:	e0bffd17 	ldw	r2,-12(fp)
  802050:	1007883a 	mov	r3,r2
  802054:	00800044 	movi	r2,1
  802058:	18800035 	stwio	r2,0(r3)
    while (SCL_READ(clk_base) == 0); // clock stretching
  80205c:	e0bffd17 	ldw	r2,-12(fp)
  802060:	10800037 	ldwio	r2,0(r2)
  802064:	1005003a 	cmpeq	r2,r2,zero
  802068:	103ffc1e 	bne	r2,zero,80205c <i2c_write+0xf4>
    SCL_DELAY;  // clock high delay
  80206c:	01000044 	movi	r4,1
  802070:	080ea200 	call	80ea20 <usleep>
    bAck = SDA_READ(data_base)?false:true;  // get ack
  802074:	e0bffe17 	ldw	r2,-8(fp)
  802078:	10800037 	ldwio	r2,0(r2)
  80207c:	1005003a 	cmpeq	r2,r2,zero
  802080:	e0bffc05 	stb	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
  802084:	e0bffd17 	ldw	r2,-12(fp)
  802088:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
  80208c:	01000044 	movi	r4,1
  802090:	080ea200 	call	80ea20 <usleep>
    return bAck;
  802094:	e0bffc03 	ldbu	r2,-16(fp)
}    
  802098:	e037883a 	mov	sp,fp
  80209c:	dfc00117 	ldw	ra,4(sp)
  8020a0:	df000017 	ldw	fp,0(sp)
  8020a4:	dec00204 	addi	sp,sp,8
  8020a8:	f800283a 	ret

008020ac <i2c_read>:

// return true if device response ack
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck)
{
  8020ac:	defff804 	addi	sp,sp,-32
  8020b0:	dfc00715 	stw	ra,28(sp)
  8020b4:	df000615 	stw	fp,24(sp)
  8020b8:	df000604 	addi	fp,sp,24
  8020bc:	e13ffc15 	stw	r4,-16(fp)
  8020c0:	e17ffd15 	stw	r5,-12(fp)
  8020c4:	e1bffe15 	stw	r6,-8(fp)
  8020c8:	e1ffff05 	stb	r7,-4(fp)
    alt_u8 Data = 0;
  8020cc:	e03ffb05 	stb	zero,-20(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
  8020d0:	e0bffd17 	ldw	r2,-12(fp)
  8020d4:	10800104 	addi	r2,r2,4
  8020d8:	10000035 	stwio	zero,0(r2)
    SCL_LOW(clk_base); // clock low
  8020dc:	e0bffc17 	ldw	r2,-16(fp)
  8020e0:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
  8020e4:	01000044 	movi	r4,1
  8020e8:	080ea200 	call	80ea20 <usleep>

    for (i = 0; i < 8; i++)
  8020ec:	e03ffa15 	stw	zero,-24(fp)
  8020f0:	00001b06 	br	802160 <i2c_read+0xb4>
    {
        Data <<= 1;
  8020f4:	e0bffb03 	ldbu	r2,-20(fp)
  8020f8:	1085883a 	add	r2,r2,r2
  8020fc:	e0bffb05 	stb	r2,-20(fp)
        SCL_HIGH(clk_base);  // clock high
  802100:	e0bffc17 	ldw	r2,-16(fp)
  802104:	1007883a 	mov	r3,r2
  802108:	00800044 	movi	r2,1
  80210c:	18800035 	stwio	r2,0(r3)
        while (SCL_READ(clk_base) == 0); // clock stretching
  802110:	e0bffc17 	ldw	r2,-16(fp)
  802114:	10800037 	ldwio	r2,0(r2)
  802118:	1005003a 	cmpeq	r2,r2,zero
  80211c:	103ffc1e 	bne	r2,zero,802110 <i2c_read+0x64>
        SCL_DELAY;
  802120:	01000044 	movi	r4,1
  802124:	080ea200 	call	80ea20 <usleep>
        if (SDA_READ(data_base))  // read data   
  802128:	e0bffd17 	ldw	r2,-12(fp)
  80212c:	10800037 	ldwio	r2,0(r2)
  802130:	1005003a 	cmpeq	r2,r2,zero
  802134:	1000031e 	bne	r2,zero,802144 <i2c_read+0x98>
        {
            Data |= 0x01;
  802138:	e0bffb03 	ldbu	r2,-20(fp)
  80213c:	10800054 	ori	r2,r2,1
  802140:	e0bffb05 	stb	r2,-20(fp)
        else
        {
        	//printf("0");
        }

        SCL_LOW(clk_base);  // clock low
  802144:	e0bffc17 	ldw	r2,-16(fp)
  802148:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
  80214c:	01000044 	movi	r4,1
  802150:	080ea200 	call	80ea20 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for (i = 0; i < 8; i++)
  802154:	e0bffa17 	ldw	r2,-24(fp)
  802158:	10800044 	addi	r2,r2,1
  80215c:	e0bffa15 	stw	r2,-24(fp)
  802160:	e0bffa17 	ldw	r2,-24(fp)
  802164:	10800210 	cmplti	r2,r2,8
  802168:	103fe21e 	bne	r2,zero,8020f4 <i2c_read+0x48>
        SCL_LOW(clk_base);  // clock low
        SCL_DELAY;
    }
    //printf("\n");
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
  80216c:	e0bffc17 	ldw	r2,-16(fp)
  802170:	10000035 	stwio	zero,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
  802174:	e0bffd17 	ldw	r2,-12(fp)
  802178:	10800104 	addi	r2,r2,4
  80217c:	1007883a 	mov	r3,r2
  802180:	00800044 	movi	r2,1
  802184:	18800035 	stwio	r2,0(r3)
    if (bAck)
  802188:	e0bfff03 	ldbu	r2,-4(fp)
  80218c:	1005003a 	cmpeq	r2,r2,zero
  802190:	1000031e 	bne	r2,zero,8021a0 <i2c_read+0xf4>
        SDA_LOW(data_base);
  802194:	e0bffd17 	ldw	r2,-12(fp)
  802198:	10000035 	stwio	zero,0(r2)
  80219c:	00000406 	br	8021b0 <i2c_read+0x104>
    else
        SDA_HIGH(data_base);
  8021a0:	e0bffd17 	ldw	r2,-12(fp)
  8021a4:	1007883a 	mov	r3,r2
  8021a8:	00800044 	movi	r2,1
  8021ac:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base); // clock high
  8021b0:	e0bffc17 	ldw	r2,-16(fp)
  8021b4:	1007883a 	mov	r3,r2
  8021b8:	00800044 	movi	r2,1
  8021bc:	18800035 	stwio	r2,0(r3)
    while (SCL_READ(clk_base) == 0); // clock stretching
  8021c0:	e0bffc17 	ldw	r2,-16(fp)
  8021c4:	10800037 	ldwio	r2,0(r2)
  8021c8:	1005003a 	cmpeq	r2,r2,zero
  8021cc:	103ffc1e 	bne	r2,zero,8021c0 <i2c_read+0x114>
    SCL_DELAY; // clock high  delay
  8021d0:	01000044 	movi	r4,1
  8021d4:	080ea200 	call	80ea20 <usleep>
    SCL_LOW(clk_base); // clock low
  8021d8:	e0bffc17 	ldw	r2,-16(fp)
  8021dc:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
  8021e0:	01000044 	movi	r4,1
  8021e4:	080ea200 	call	80ea20 <usleep>
    SDA_LOW(data_base);  // data low
  8021e8:	e0bffd17 	ldw	r2,-12(fp)
  8021ec:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // data low delay
  8021f0:	01000044 	movi	r4,1
  8021f4:	080ea200 	call	80ea20 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
  8021f8:	e0fffe17 	ldw	r3,-8(fp)
  8021fc:	e0bffb03 	ldbu	r2,-20(fp)
  802200:	18800005 	stb	r2,0(r3)
}
  802204:	e037883a 	mov	sp,fp
  802208:	dfc00117 	ldw	ra,4(sp)
  80220c:	df000017 	ldw	fp,0(sp)
  802210:	dec00204 	addi	sp,sp,8
  802214:	f800283a 	ret

00802218 <pow>:
  802218:	deffee04 	addi	sp,sp,-72
  80221c:	ddc01015 	stw	r23,64(sp)
  802220:	05c020b4 	movhi	r23,130
  802224:	bdf09204 	addi	r23,r23,-15800
  802228:	dd800f15 	stw	r22,60(sp)
  80222c:	dd400e15 	stw	r21,56(sp)
  802230:	dd000d15 	stw	r20,52(sp)
  802234:	dcc00c15 	stw	r19,48(sp)
  802238:	dc800b15 	stw	r18,44(sp)
  80223c:	dc400a15 	stw	r17,40(sp)
  802240:	dc000915 	stw	r16,36(sp)
  802244:	2029883a 	mov	r20,r4
  802248:	dfc01115 	stw	ra,68(sp)
  80224c:	3025883a 	mov	r18,r6
  802250:	282b883a 	mov	r21,r5
  802254:	3827883a 	mov	r19,r7
  802258:	08026a00 	call	8026a0 <__ieee754_pow>
  80225c:	b9000017 	ldw	r4,0(r23)
  802260:	05bfffc4 	movi	r22,-1
  802264:	1021883a 	mov	r16,r2
  802268:	1823883a 	mov	r17,r3
  80226c:	25800426 	beq	r4,r22,802280 <pow+0x68>
  802270:	9009883a 	mov	r4,r18
  802274:	980b883a 	mov	r5,r19
  802278:	0803c9c0 	call	803c9c <__isnand>
  80227c:	10000d26 	beq	r2,zero,8022b4 <pow+0x9c>
  802280:	8005883a 	mov	r2,r16
  802284:	8807883a 	mov	r3,r17
  802288:	dfc01117 	ldw	ra,68(sp)
  80228c:	ddc01017 	ldw	r23,64(sp)
  802290:	dd800f17 	ldw	r22,60(sp)
  802294:	dd400e17 	ldw	r21,56(sp)
  802298:	dd000d17 	ldw	r20,52(sp)
  80229c:	dcc00c17 	ldw	r19,48(sp)
  8022a0:	dc800b17 	ldw	r18,44(sp)
  8022a4:	dc400a17 	ldw	r17,40(sp)
  8022a8:	dc000917 	ldw	r16,36(sp)
  8022ac:	dec01204 	addi	sp,sp,72
  8022b0:	f800283a 	ret
  8022b4:	a009883a 	mov	r4,r20
  8022b8:	a80b883a 	mov	r5,r21
  8022bc:	0803c9c0 	call	803c9c <__isnand>
  8022c0:	1000151e 	bne	r2,zero,802318 <pow+0x100>
  8022c4:	000d883a 	mov	r6,zero
  8022c8:	000f883a 	mov	r7,zero
  8022cc:	a009883a 	mov	r4,r20
  8022d0:	a80b883a 	mov	r5,r21
  8022d4:	0804dc40 	call	804dc4 <__eqdf2>
  8022d8:	1000541e 	bne	r2,zero,80242c <pow+0x214>
  8022dc:	000d883a 	mov	r6,zero
  8022e0:	000f883a 	mov	r7,zero
  8022e4:	9009883a 	mov	r4,r18
  8022e8:	980b883a 	mov	r5,r19
  8022ec:	0804dc40 	call	804dc4 <__eqdf2>
  8022f0:	10002c1e 	bne	r2,zero,8023a4 <pow+0x18c>
  8022f4:	b8800017 	ldw	r2,0(r23)
  8022f8:	d8000615 	stw	zero,24(sp)
  8022fc:	d8000715 	stw	zero,28(sp)
  802300:	10001226 	beq	r2,zero,80234c <pow+0x134>
  802304:	008ffc34 	movhi	r2,16368
  802308:	d8800715 	stw	r2,28(sp)
  80230c:	dc000617 	ldw	r16,24(sp)
  802310:	dc400717 	ldw	r17,28(sp)
  802314:	003fda06 	br	802280 <pow+0x68>
  802318:	000d883a 	mov	r6,zero
  80231c:	000f883a 	mov	r7,zero
  802320:	9009883a 	mov	r4,r18
  802324:	980b883a 	mov	r5,r19
  802328:	0804dc40 	call	804dc4 <__eqdf2>
  80232c:	103fd41e 	bne	r2,zero,802280 <pow+0x68>
  802330:	b8c00017 	ldw	r3,0(r23)
  802334:	010ffc34 	movhi	r4,16368
  802338:	d8000615 	stw	zero,24(sp)
  80233c:	d9000715 	stw	r4,28(sp)
  802340:	1d801526 	beq	r3,r22,802398 <pow+0x180>
  802344:	00800084 	movi	r2,2
  802348:	18801326 	beq	r3,r2,802398 <pow+0x180>
  80234c:	008020b4 	movhi	r2,130
  802350:	10a8a804 	addi	r2,r2,-23904
  802354:	00c00044 	movi	r3,1
  802358:	d809883a 	mov	r4,sp
  80235c:	dcc00515 	stw	r19,20(sp)
  802360:	dd400315 	stw	r21,12(sp)
  802364:	d8800115 	stw	r2,4(sp)
  802368:	d8c00015 	stw	r3,0(sp)
  80236c:	dc800415 	stw	r18,16(sp)
  802370:	dd000215 	stw	r20,8(sp)
  802374:	d8000815 	stw	zero,32(sp)
  802378:	0803ccc0 	call	803ccc <matherr>
  80237c:	10002726 	beq	r2,zero,80241c <pow+0x204>
  802380:	d8800817 	ldw	r2,32(sp)
  802384:	103fe126 	beq	r2,zero,80230c <pow+0xf4>
  802388:	0805ca00 	call	805ca0 <__errno>
  80238c:	d8c00817 	ldw	r3,32(sp)
  802390:	10c00015 	stw	r3,0(r2)
  802394:	003fdd06 	br	80230c <pow+0xf4>
  802398:	d9000715 	stw	r4,28(sp)
  80239c:	d8000615 	stw	zero,24(sp)
  8023a0:	003fda06 	br	80230c <pow+0xf4>
  8023a4:	9009883a 	mov	r4,r18
  8023a8:	980b883a 	mov	r5,r19
  8023ac:	0803c800 	call	803c80 <finite>
  8023b0:	103fb326 	beq	r2,zero,802280 <pow+0x68>
  8023b4:	000d883a 	mov	r6,zero
  8023b8:	000f883a 	mov	r7,zero
  8023bc:	9009883a 	mov	r4,r18
  8023c0:	980b883a 	mov	r5,r19
  8023c4:	0804f5c0 	call	804f5c <__ltdf2>
  8023c8:	103fad0e 	bge	r2,zero,802280 <pow+0x68>
  8023cc:	b9000017 	ldw	r4,0(r23)
  8023d0:	00800044 	movi	r2,1
  8023d4:	00c020b4 	movhi	r3,130
  8023d8:	18e8a804 	addi	r3,r3,-23904
  8023dc:	d8800015 	stw	r2,0(sp)
  8023e0:	d8c00115 	stw	r3,4(sp)
  8023e4:	dd400315 	stw	r21,12(sp)
  8023e8:	dcc00515 	stw	r19,20(sp)
  8023ec:	d8000815 	stw	zero,32(sp)
  8023f0:	dd000215 	stw	r20,8(sp)
  8023f4:	dc800415 	stw	r18,16(sp)
  8023f8:	20005626 	beq	r4,zero,802554 <pow+0x33c>
  8023fc:	00bffc34 	movhi	r2,65520
  802400:	d8800715 	stw	r2,28(sp)
  802404:	00800084 	movi	r2,2
  802408:	d8000615 	stw	zero,24(sp)
  80240c:	20800326 	beq	r4,r2,80241c <pow+0x204>
  802410:	d809883a 	mov	r4,sp
  802414:	0803ccc0 	call	803ccc <matherr>
  802418:	103fd91e 	bne	r2,zero,802380 <pow+0x168>
  80241c:	0805ca00 	call	805ca0 <__errno>
  802420:	00c00844 	movi	r3,33
  802424:	10c00015 	stw	r3,0(r2)
  802428:	003fd506 	br	802380 <pow+0x168>
  80242c:	8009883a 	mov	r4,r16
  802430:	880b883a 	mov	r5,r17
  802434:	0803c800 	call	803c80 <finite>
  802438:	10002426 	beq	r2,zero,8024cc <pow+0x2b4>
  80243c:	000d883a 	mov	r6,zero
  802440:	000f883a 	mov	r7,zero
  802444:	8009883a 	mov	r4,r16
  802448:	880b883a 	mov	r5,r17
  80244c:	0804dc40 	call	804dc4 <__eqdf2>
  802450:	103f8b1e 	bne	r2,zero,802280 <pow+0x68>
  802454:	a009883a 	mov	r4,r20
  802458:	a80b883a 	mov	r5,r21
  80245c:	0803c800 	call	803c80 <finite>
  802460:	103f8726 	beq	r2,zero,802280 <pow+0x68>
  802464:	9009883a 	mov	r4,r18
  802468:	980b883a 	mov	r5,r19
  80246c:	0803c800 	call	803c80 <finite>
  802470:	103f8326 	beq	r2,zero,802280 <pow+0x68>
  802474:	b9000017 	ldw	r4,0(r23)
  802478:	00800104 	movi	r2,4
  80247c:	d8800015 	stw	r2,0(sp)
  802480:	00c020b4 	movhi	r3,130
  802484:	18e8a804 	addi	r3,r3,-23904
  802488:	00800084 	movi	r2,2
  80248c:	d8c00115 	stw	r3,4(sp)
  802490:	dd400315 	stw	r21,12(sp)
  802494:	dcc00515 	stw	r19,20(sp)
  802498:	d8000815 	stw	zero,32(sp)
  80249c:	dd000215 	stw	r20,8(sp)
  8024a0:	dc800415 	stw	r18,16(sp)
  8024a4:	d8000615 	stw	zero,24(sp)
  8024a8:	d8000715 	stw	zero,28(sp)
  8024ac:	20800326 	beq	r4,r2,8024bc <pow+0x2a4>
  8024b0:	d809883a 	mov	r4,sp
  8024b4:	0803ccc0 	call	803ccc <matherr>
  8024b8:	103fb11e 	bne	r2,zero,802380 <pow+0x168>
  8024bc:	0805ca00 	call	805ca0 <__errno>
  8024c0:	00c00884 	movi	r3,34
  8024c4:	10c00015 	stw	r3,0(r2)
  8024c8:	003fad06 	br	802380 <pow+0x168>
  8024cc:	a009883a 	mov	r4,r20
  8024d0:	a80b883a 	mov	r5,r21
  8024d4:	0803c800 	call	803c80 <finite>
  8024d8:	103fd826 	beq	r2,zero,80243c <pow+0x224>
  8024dc:	9009883a 	mov	r4,r18
  8024e0:	980b883a 	mov	r5,r19
  8024e4:	0803c800 	call	803c80 <finite>
  8024e8:	103fd426 	beq	r2,zero,80243c <pow+0x224>
  8024ec:	880b883a 	mov	r5,r17
  8024f0:	8009883a 	mov	r4,r16
  8024f4:	0803c9c0 	call	803c9c <__isnand>
  8024f8:	10001926 	beq	r2,zero,802560 <pow+0x348>
  8024fc:	bc000017 	ldw	r16,0(r23)
  802500:	00800044 	movi	r2,1
  802504:	00c020b4 	movhi	r3,130
  802508:	18e8a804 	addi	r3,r3,-23904
  80250c:	d8800015 	stw	r2,0(sp)
  802510:	d8c00115 	stw	r3,4(sp)
  802514:	dd400315 	stw	r21,12(sp)
  802518:	dcc00515 	stw	r19,20(sp)
  80251c:	d8000815 	stw	zero,32(sp)
  802520:	dd000215 	stw	r20,8(sp)
  802524:	dc800415 	stw	r18,16(sp)
  802528:	80000a26 	beq	r16,zero,802554 <pow+0x33c>
  80252c:	0009883a 	mov	r4,zero
  802530:	000d883a 	mov	r6,zero
  802534:	000b883a 	mov	r5,zero
  802538:	000f883a 	mov	r7,zero
  80253c:	0804b6c0 	call	804b6c <__divdf3>
  802540:	d8800615 	stw	r2,24(sp)
  802544:	00800084 	movi	r2,2
  802548:	d8c00715 	stw	r3,28(sp)
  80254c:	80bfb01e 	bne	r16,r2,802410 <pow+0x1f8>
  802550:	003fb206 	br	80241c <pow+0x204>
  802554:	d8000615 	stw	zero,24(sp)
  802558:	d8000715 	stw	zero,28(sp)
  80255c:	003fac06 	br	802410 <pow+0x1f8>
  802560:	b8800017 	ldw	r2,0(r23)
  802564:	00c000c4 	movi	r3,3
  802568:	010020b4 	movhi	r4,130
  80256c:	2128a804 	addi	r4,r4,-23904
  802570:	d8c00015 	stw	r3,0(sp)
  802574:	d9000115 	stw	r4,4(sp)
  802578:	d8000815 	stw	zero,32(sp)
  80257c:	dd000215 	stw	r20,8(sp)
  802580:	dd400315 	stw	r21,12(sp)
  802584:	dc800415 	stw	r18,16(sp)
  802588:	dcc00515 	stw	r19,20(sp)
  80258c:	1000251e 	bne	r2,zero,802624 <pow+0x40c>
  802590:	05b80034 	movhi	r22,57344
  802594:	0091fc34 	movhi	r2,18416
  802598:	10bfffc4 	addi	r2,r2,-1
  80259c:	000d883a 	mov	r6,zero
  8025a0:	000f883a 	mov	r7,zero
  8025a4:	a80b883a 	mov	r5,r21
  8025a8:	a009883a 	mov	r4,r20
  8025ac:	d8800715 	stw	r2,28(sp)
  8025b0:	dd800615 	stw	r22,24(sp)
  8025b4:	0804f5c0 	call	804f5c <__ltdf2>
  8025b8:	103fbd0e 	bge	r2,zero,8024b0 <pow+0x298>
  8025bc:	0005883a 	mov	r2,zero
  8025c0:	00cff834 	movhi	r3,16352
  8025c4:	180f883a 	mov	r7,r3
  8025c8:	100d883a 	mov	r6,r2
  8025cc:	980b883a 	mov	r5,r19
  8025d0:	9009883a 	mov	r4,r18
  8025d4:	08047a80 	call	8047a8 <__muldf3>
  8025d8:	1009883a 	mov	r4,r2
  8025dc:	180b883a 	mov	r5,r3
  8025e0:	1021883a 	mov	r16,r2
  8025e4:	1823883a 	mov	r17,r3
  8025e8:	0803ce40 	call	803ce4 <rint>
  8025ec:	180f883a 	mov	r7,r3
  8025f0:	8009883a 	mov	r4,r16
  8025f4:	880b883a 	mov	r5,r17
  8025f8:	100d883a 	mov	r6,r2
  8025fc:	0804e4c0 	call	804e4c <__nedf2>
  802600:	10000426 	beq	r2,zero,802614 <pow+0x3fc>
  802604:	00b1fc34 	movhi	r2,51184
  802608:	10bfffc4 	addi	r2,r2,-1
  80260c:	dd800615 	stw	r22,24(sp)
  802610:	d8800715 	stw	r2,28(sp)
  802614:	b8c00017 	ldw	r3,0(r23)
  802618:	00800084 	movi	r2,2
  80261c:	18bfa41e 	bne	r3,r2,8024b0 <pow+0x298>
  802620:	003fa606 	br	8024bc <pow+0x2a4>
  802624:	009ffc34 	movhi	r2,32752
  802628:	000d883a 	mov	r6,zero
  80262c:	000f883a 	mov	r7,zero
  802630:	a80b883a 	mov	r5,r21
  802634:	a009883a 	mov	r4,r20
  802638:	d8800715 	stw	r2,28(sp)
  80263c:	d8000615 	stw	zero,24(sp)
  802640:	0804f5c0 	call	804f5c <__ltdf2>
  802644:	103ff30e 	bge	r2,zero,802614 <pow+0x3fc>
  802648:	0005883a 	mov	r2,zero
  80264c:	00cff834 	movhi	r3,16352
  802650:	180f883a 	mov	r7,r3
  802654:	100d883a 	mov	r6,r2
  802658:	980b883a 	mov	r5,r19
  80265c:	9009883a 	mov	r4,r18
  802660:	08047a80 	call	8047a8 <__muldf3>
  802664:	1009883a 	mov	r4,r2
  802668:	180b883a 	mov	r5,r3
  80266c:	1021883a 	mov	r16,r2
  802670:	1823883a 	mov	r17,r3
  802674:	0803ce40 	call	803ce4 <rint>
  802678:	180f883a 	mov	r7,r3
  80267c:	8009883a 	mov	r4,r16
  802680:	880b883a 	mov	r5,r17
  802684:	100d883a 	mov	r6,r2
  802688:	0804e4c0 	call	804e4c <__nedf2>
  80268c:	103fe126 	beq	r2,zero,802614 <pow+0x3fc>
  802690:	00bffc34 	movhi	r2,65520
  802694:	d8800715 	stw	r2,28(sp)
  802698:	d8000615 	stw	zero,24(sp)
  80269c:	003fdd06 	br	802614 <pow+0x3fc>

008026a0 <__ieee754_pow>:
  8026a0:	deffbb04 	addi	sp,sp,-276
  8026a4:	3005883a 	mov	r2,r6
  8026a8:	dd404015 	stw	r21,256(sp)
  8026ac:	dd003f15 	stw	r20,252(sp)
  8026b0:	d9802815 	stw	r6,160(sp)
  8026b4:	2029883a 	mov	r20,r4
  8026b8:	282b883a 	mov	r21,r5
  8026bc:	3009883a 	mov	r4,r6
  8026c0:	380b883a 	mov	r5,r7
  8026c4:	01a00034 	movhi	r6,32768
  8026c8:	31bfffc4 	addi	r6,r6,-1
  8026cc:	dc003b15 	stw	r16,236(sp)
  8026d0:	29a0703a 	and	r16,r5,r6
  8026d4:	1404b03a 	or	r2,r2,r16
  8026d8:	dd804115 	stw	r22,260(sp)
  8026dc:	dc403c15 	stw	r17,240(sp)
  8026e0:	d9c02915 	stw	r7,164(sp)
  8026e4:	382d883a 	mov	r22,r7
  8026e8:	dfc04415 	stw	ra,272(sp)
  8026ec:	200f883a 	mov	r7,r4
  8026f0:	df004315 	stw	fp,268(sp)
  8026f4:	ddc04215 	stw	r23,264(sp)
  8026f8:	dcc03e15 	stw	r19,248(sp)
  8026fc:	dc803d15 	stw	r18,244(sp)
  802700:	a023883a 	mov	r17,r20
  802704:	2809883a 	mov	r4,r5
  802708:	10000826 	beq	r2,zero,80272c <__ieee754_pow+0x8c>
  80270c:	a9a4703a 	and	r18,r21,r6
  802710:	009ffc34 	movhi	r2,32752
  802714:	a827883a 	mov	r19,r21
  802718:	1480180e 	bge	r2,r18,80277c <__ieee754_pow+0xdc>
  80271c:	00b00434 	movhi	r2,49168
  802720:	9085883a 	add	r2,r18,r2
  802724:	8884b03a 	or	r2,r17,r2
  802728:	1000321e 	bne	r2,zero,8027f4 <__ieee754_pow+0x154>
  80272c:	0009883a 	mov	r4,zero
  802730:	014ffc34 	movhi	r5,16368
  802734:	d9002815 	stw	r4,160(sp)
  802738:	d9402915 	stw	r5,164(sp)
  80273c:	d9002817 	ldw	r4,160(sp)
  802740:	d9402917 	ldw	r5,164(sp)
  802744:	2005883a 	mov	r2,r4
  802748:	2807883a 	mov	r3,r5
  80274c:	dfc04417 	ldw	ra,272(sp)
  802750:	df004317 	ldw	fp,268(sp)
  802754:	ddc04217 	ldw	r23,264(sp)
  802758:	dd804117 	ldw	r22,260(sp)
  80275c:	dd404017 	ldw	r21,256(sp)
  802760:	dd003f17 	ldw	r20,252(sp)
  802764:	dcc03e17 	ldw	r19,248(sp)
  802768:	dc803d17 	ldw	r18,244(sp)
  80276c:	dc403c17 	ldw	r17,240(sp)
  802770:	dc003b17 	ldw	r16,236(sp)
  802774:	dec04504 	addi	sp,sp,276
  802778:	f800283a 	ret
  80277c:	90802b26 	beq	r18,r2,80282c <__ieee754_pow+0x18c>
  802780:	143fe616 	blt	r2,r16,80271c <__ieee754_pow+0x7c>
  802784:	80806126 	beq	r16,r2,80290c <__ieee754_pow+0x26c>
  802788:	982e403a 	cmpge	r23,r19,zero
  80278c:	b8004e26 	beq	r23,zero,8028c8 <__ieee754_pow+0x228>
  802790:	0039883a 	mov	fp,zero
  802794:	3800281e 	bne	r7,zero,802838 <__ieee754_pow+0x198>
  802798:	009ffc34 	movhi	r2,32752
  80279c:	80804f26 	beq	r16,r2,8028dc <__ieee754_pow+0x23c>
  8027a0:	008ffc34 	movhi	r2,16368
  8027a4:	80808226 	beq	r16,r2,8029b0 <__ieee754_pow+0x310>
  8027a8:	00900034 	movhi	r2,16384
  8027ac:	20828426 	beq	r4,r2,8031c0 <__ieee754_pow+0xb20>
  8027b0:	008ff834 	movhi	r2,16352
  8027b4:	2080201e 	bne	r4,r2,802838 <__ieee754_pow+0x198>
  8027b8:	98001f16 	blt	r19,zero,802838 <__ieee754_pow+0x198>
  8027bc:	a80b883a 	mov	r5,r21
  8027c0:	a009883a 	mov	r4,r20
  8027c4:	dfc04417 	ldw	ra,272(sp)
  8027c8:	df004317 	ldw	fp,268(sp)
  8027cc:	ddc04217 	ldw	r23,264(sp)
  8027d0:	dd804117 	ldw	r22,260(sp)
  8027d4:	dd404017 	ldw	r21,256(sp)
  8027d8:	dd003f17 	ldw	r20,252(sp)
  8027dc:	dcc03e17 	ldw	r19,248(sp)
  8027e0:	dc803d17 	ldw	r18,244(sp)
  8027e4:	dc403c17 	ldw	r17,240(sp)
  8027e8:	dc003b17 	ldw	r16,236(sp)
  8027ec:	dec04504 	addi	sp,sp,276
  8027f0:	08039a01 	jmpi	8039a0 <__ieee754_sqrt>
  8027f4:	010020b4 	movhi	r4,130
  8027f8:	21290f04 	addi	r4,r4,-23492
  8027fc:	dfc04417 	ldw	ra,272(sp)
  802800:	df004317 	ldw	fp,268(sp)
  802804:	ddc04217 	ldw	r23,264(sp)
  802808:	dd804117 	ldw	r22,260(sp)
  80280c:	dd404017 	ldw	r21,256(sp)
  802810:	dd003f17 	ldw	r20,252(sp)
  802814:	dcc03e17 	ldw	r19,248(sp)
  802818:	dc803d17 	ldw	r18,244(sp)
  80281c:	dc403c17 	ldw	r17,240(sp)
  802820:	dc003b17 	ldw	r16,236(sp)
  802824:	dec04504 	addi	sp,sp,276
  802828:	0803cd41 	jmpi	803cd4 <nan>
  80282c:	a03fbb1e 	bne	r20,zero,80271c <__ieee754_pow+0x7c>
  802830:	003fd306 	br	802780 <__ieee754_pow+0xe0>
  802834:	0039883a 	mov	fp,zero
  802838:	a009883a 	mov	r4,r20
  80283c:	a80b883a 	mov	r5,r21
  802840:	0803c680 	call	803c68 <fabs>
  802844:	1015883a 	mov	r10,r2
  802848:	1817883a 	mov	r11,r3
  80284c:	88001226 	beq	r17,zero,802898 <__ieee754_pow+0x1f8>
  802850:	9804d7fa 	srli	r2,r19,31
  802854:	10bfffc4 	addi	r2,r2,-1
  802858:	1706b03a 	or	r3,r2,fp
  80285c:	d8802515 	stw	r2,148(sp)
  802860:	18002c1e 	bne	r3,zero,802914 <__ieee754_pow+0x274>
  802864:	a80f883a 	mov	r7,r21
  802868:	a009883a 	mov	r4,r20
  80286c:	a80b883a 	mov	r5,r21
  802870:	a00d883a 	mov	r6,r20
  802874:	08046b40 	call	8046b4 <__subdf3>
  802878:	1009883a 	mov	r4,r2
  80287c:	180b883a 	mov	r5,r3
  802880:	100d883a 	mov	r6,r2
  802884:	180f883a 	mov	r7,r3
  802888:	0804b6c0 	call	804b6c <__divdf3>
  80288c:	d8802815 	stw	r2,160(sp)
  802890:	d8c02915 	stw	r3,164(sp)
  802894:	003fa906 	br	80273c <__ieee754_pow+0x9c>
  802898:	009ffc34 	movhi	r2,32752
  80289c:	90800326 	beq	r18,r2,8028ac <__ieee754_pow+0x20c>
  8028a0:	90000226 	beq	r18,zero,8028ac <__ieee754_pow+0x20c>
  8028a4:	008ffc34 	movhi	r2,16368
  8028a8:	90bfe91e 	bne	r18,r2,802850 <__ieee754_pow+0x1b0>
  8028ac:	b0026316 	blt	r22,zero,80323c <__ieee754_pow+0xb9c>
  8028b0:	5011883a 	mov	r8,r10
  8028b4:	5813883a 	mov	r9,r11
  8028b8:	b8023126 	beq	r23,zero,803180 <__ieee754_pow+0xae0>
  8028bc:	da002815 	stw	r8,160(sp)
  8028c0:	da402915 	stw	r9,164(sp)
  8028c4:	003f9d06 	br	80273c <__ieee754_pow+0x9c>
  8028c8:	0090d034 	movhi	r2,17216
  8028cc:	10bfffc4 	addi	r2,r2,-1
  8028d0:	1400270e 	bge	r2,r16,802970 <__ieee754_pow+0x2d0>
  8028d4:	07000084 	movi	fp,2
  8028d8:	003fae06 	br	802794 <__ieee754_pow+0xf4>
  8028dc:	00b00434 	movhi	r2,49168
  8028e0:	9085883a 	add	r2,r18,r2
  8028e4:	8884b03a 	or	r2,r17,r2
  8028e8:	103f9026 	beq	r2,zero,80272c <__ieee754_pow+0x8c>
  8028ec:	008ffc34 	movhi	r2,16368
  8028f0:	10bfffc4 	addi	r2,r2,-1
  8028f4:	1482d00e 	bge	r2,r18,803438 <__ieee754_pow+0xd98>
  8028f8:	b03f900e 	bge	r22,zero,80273c <__ieee754_pow+0x9c>
  8028fc:	0005883a 	mov	r2,zero
  802900:	d8802815 	stw	r2,160(sp)
  802904:	d8802915 	stw	r2,164(sp)
  802908:	003f8c06 	br	80273c <__ieee754_pow+0x9c>
  80290c:	383f9e26 	beq	r7,zero,802788 <__ieee754_pow+0xe8>
  802910:	003f8206 	br	80271c <__ieee754_pow+0x7c>
  802914:	00907834 	movhi	r2,16864
  802918:	1400290e 	bge	r2,r16,8029c0 <__ieee754_pow+0x320>
  80291c:	0090fc34 	movhi	r2,17392
  802920:	1402500e 	bge	r2,r16,803264 <__ieee754_pow+0xbc4>
  802924:	008ffc34 	movhi	r2,16368
  802928:	10bfffc4 	addi	r2,r2,-1
  80292c:	14800b0e 	bge	r2,r18,80295c <__ieee754_pow+0x2bc>
  802930:	05800b0e 	bge	zero,r22,802960 <__ieee754_pow+0x2c0>
  802934:	00a20034 	movhi	r2,34816
  802938:	109d6704 	addi	r2,r2,30108
  80293c:	00df8e34 	movhi	r3,32312
  802940:	18f90f04 	addi	r3,r3,-7108
  802944:	100d883a 	mov	r6,r2
  802948:	180f883a 	mov	r7,r3
  80294c:	1009883a 	mov	r4,r2
  802950:	180b883a 	mov	r5,r3
  802954:	08047a80 	call	8047a8 <__muldf3>
  802958:	003fcc06 	br	80288c <__ieee754_pow+0x1ec>
  80295c:	b03ff516 	blt	r22,zero,802934 <__ieee754_pow+0x294>
  802960:	0007883a 	mov	r3,zero
  802964:	d8c02815 	stw	r3,160(sp)
  802968:	d8c02915 	stw	r3,164(sp)
  80296c:	003f7306 	br	80273c <__ieee754_pow+0x9c>
  802970:	008ffc34 	movhi	r2,16368
  802974:	10bfffc4 	addi	r2,r2,-1
  802978:	143f850e 	bge	r2,r16,802790 <__ieee754_pow+0xf0>
  80297c:	8005d53a 	srai	r2,r16,20
  802980:	01400504 	movi	r5,20
  802984:	10ff0044 	addi	r3,r2,-1023
  802988:	28c3e10e 	bge	r5,r3,803910 <__ieee754_pow+0x1270>
  80298c:	00800d04 	movi	r2,52
  802990:	10c5c83a 	sub	r2,r2,r3
  802994:	3886d83a 	srl	r3,r7,r2
  802998:	1884983a 	sll	r2,r3,r2
  80299c:	38bf7c1e 	bne	r7,r2,802790 <__ieee754_pow+0xf0>
  8029a0:	18c0004c 	andi	r3,r3,1
  8029a4:	00800084 	movi	r2,2
  8029a8:	10f9c83a 	sub	fp,r2,r3
  8029ac:	003f7906 	br	802794 <__ieee754_pow+0xf4>
  8029b0:	b0038516 	blt	r22,zero,8037c8 <__ieee754_pow+0x1128>
  8029b4:	dd002815 	stw	r20,160(sp)
  8029b8:	dd402915 	stw	r21,164(sp)
  8029bc:	003f5f06 	br	80273c <__ieee754_pow+0x9c>
  8029c0:	00800434 	movhi	r2,16
  8029c4:	10bfffc4 	addi	r2,r2,-1
  8029c8:	1482900e 	bge	r2,r18,80340c <__ieee754_pow+0xd6c>
  8029cc:	000b883a 	mov	r5,zero
  8029d0:	9005d53a 	srai	r2,r18,20
  8029d4:	00c00434 	movhi	r3,16
  8029d8:	18ffffc4 	addi	r3,r3,-1
  8029dc:	90c8703a 	and	r4,r18,r3
  8029e0:	2887883a 	add	r3,r5,r2
  8029e4:	18bf0044 	addi	r2,r3,-1023
  8029e8:	d8800015 	stw	r2,0(sp)
  8029ec:	00800134 	movhi	r2,4
  8029f0:	10a62384 	addi	r2,r2,-26482
  8029f4:	250ffc34 	orhi	r20,r4,16368
  8029f8:	1101ee0e 	bge	r2,r4,8031b4 <__ieee754_pow+0xb14>
  8029fc:	00800334 	movhi	r2,12
  802a00:	10ad9e44 	addi	r2,r2,-18823
  802a04:	1101e716 	blt	r2,r4,8031a4 <__ieee754_pow+0xb04>
  802a08:	01000044 	movi	r4,1
  802a0c:	04000334 	movhi	r16,12
  802a10:	200890fa 	slli	r4,r4,3
  802a14:	da800115 	stw	r10,4(sp)
  802a18:	dd000215 	stw	r20,8(sp)
  802a1c:	d9002c15 	stw	r4,176(sp)
  802a20:	d9402c17 	ldw	r5,176(sp)
  802a24:	010020b4 	movhi	r4,130
  802a28:	2128a904 	addi	r4,r4,-23900
  802a2c:	a02bd07a 	srai	r21,r20,1
  802a30:	2909883a 	add	r4,r5,r4
  802a34:	25800017 	ldw	r22,0(r4)
  802a38:	25c00117 	ldw	r23,4(r4)
  802a3c:	a00b883a 	mov	r5,r20
  802a40:	5009883a 	mov	r4,r10
  802a44:	b00d883a 	mov	r6,r22
  802a48:	b80f883a 	mov	r7,r23
  802a4c:	08046b40 	call	8046b4 <__subdf3>
  802a50:	d9000117 	ldw	r4,4(sp)
  802a54:	a00b883a 	mov	r5,r20
  802a58:	b00d883a 	mov	r6,r22
  802a5c:	b80f883a 	mov	r7,r23
  802a60:	1025883a 	mov	r18,r2
  802a64:	1827883a 	mov	r19,r3
  802a68:	08047340 	call	804734 <__adddf3>
  802a6c:	0011883a 	mov	r8,zero
  802a70:	024ffc34 	movhi	r9,16368
  802a74:	480b883a 	mov	r5,r9
  802a78:	4009883a 	mov	r4,r8
  802a7c:	180f883a 	mov	r7,r3
  802a80:	100d883a 	mov	r6,r2
  802a84:	0804b6c0 	call	804b6c <__divdf3>
  802a88:	d8c02e15 	stw	r3,184(sp)
  802a8c:	d8800f15 	stw	r2,60(sp)
  802a90:	d8802d15 	stw	r2,180(sp)
  802a94:	d8802e17 	ldw	r2,184(sp)
  802a98:	d9800f17 	ldw	r6,60(sp)
  802a9c:	9009883a 	mov	r4,r18
  802aa0:	980b883a 	mov	r5,r19
  802aa4:	100f883a 	mov	r7,r2
  802aa8:	dc800b15 	stw	r18,44(sp)
  802aac:	dcc00c15 	stw	r19,48(sp)
  802ab0:	d8801015 	stw	r2,64(sp)
  802ab4:	08047a80 	call	8047a8 <__muldf3>
  802ab8:	d8c03015 	stw	r3,192(sp)
  802abc:	d9003017 	ldw	r4,192(sp)
  802ac0:	d8802f15 	stw	r2,188(sp)
  802ac4:	d8800315 	stw	r2,12(sp)
  802ac8:	ad480034 	orhi	r21,r21,8192
  802acc:	0005883a 	mov	r2,zero
  802ad0:	ac2b883a 	add	r21,r21,r16
  802ad4:	000b883a 	mov	r5,zero
  802ad8:	1021883a 	mov	r16,r2
  802adc:	2005883a 	mov	r2,r4
  802ae0:	800d883a 	mov	r6,r16
  802ae4:	a80f883a 	mov	r7,r21
  802ae8:	d9000415 	stw	r4,16(sp)
  802aec:	d9002715 	stw	r4,156(sp)
  802af0:	d9402615 	stw	r5,152(sp)
  802af4:	d9401615 	stw	r5,88(sp)
  802af8:	d9001715 	stw	r4,92(sp)
  802afc:	100b883a 	mov	r5,r2
  802b00:	0009883a 	mov	r4,zero
  802b04:	08047a80 	call	8047a8 <__muldf3>
  802b08:	d9000b17 	ldw	r4,44(sp)
  802b0c:	980b883a 	mov	r5,r19
  802b10:	180f883a 	mov	r7,r3
  802b14:	100d883a 	mov	r6,r2
  802b18:	08046b40 	call	8046b4 <__subdf3>
  802b1c:	8009883a 	mov	r4,r16
  802b20:	a80b883a 	mov	r5,r21
  802b24:	b80f883a 	mov	r7,r23
  802b28:	b00d883a 	mov	r6,r22
  802b2c:	1021883a 	mov	r16,r2
  802b30:	1823883a 	mov	r17,r3
  802b34:	08046b40 	call	8046b4 <__subdf3>
  802b38:	d9000117 	ldw	r4,4(sp)
  802b3c:	a00b883a 	mov	r5,r20
  802b40:	180f883a 	mov	r7,r3
  802b44:	100d883a 	mov	r6,r2
  802b48:	08046b40 	call	8046b4 <__subdf3>
  802b4c:	d9001617 	ldw	r4,88(sp)
  802b50:	d9402717 	ldw	r5,156(sp)
  802b54:	180f883a 	mov	r7,r3
  802b58:	100d883a 	mov	r6,r2
  802b5c:	08047a80 	call	8047a8 <__muldf3>
  802b60:	180f883a 	mov	r7,r3
  802b64:	880b883a 	mov	r5,r17
  802b68:	8009883a 	mov	r4,r16
  802b6c:	100d883a 	mov	r6,r2
  802b70:	08046b40 	call	8046b4 <__subdf3>
  802b74:	d9000f17 	ldw	r4,60(sp)
  802b78:	d9402e17 	ldw	r5,184(sp)
  802b7c:	180f883a 	mov	r7,r3
  802b80:	100d883a 	mov	r6,r2
  802b84:	08047a80 	call	8047a8 <__muldf3>
  802b88:	d9000317 	ldw	r4,12(sp)
  802b8c:	d9403017 	ldw	r5,192(sp)
  802b90:	d8803115 	stw	r2,196(sp)
  802b94:	200d883a 	mov	r6,r4
  802b98:	280f883a 	mov	r7,r5
  802b9c:	d8c03215 	stw	r3,200(sp)
  802ba0:	08047a80 	call	8047a8 <__muldf3>
  802ba4:	1009883a 	mov	r4,r2
  802ba8:	180b883a 	mov	r5,r3
  802bac:	100d883a 	mov	r6,r2
  802bb0:	180f883a 	mov	r7,r3
  802bb4:	1021883a 	mov	r16,r2
  802bb8:	1823883a 	mov	r17,r3
  802bbc:	08047a80 	call	8047a8 <__muldf3>
  802bc0:	02129174 	movhi	r8,19013
  802bc4:	4213bbc4 	addi	r8,r8,20207
  802bc8:	024ff2b4 	movhi	r9,16330
  802bcc:	4a5f8a04 	addi	r9,r9,32296
  802bd0:	480f883a 	mov	r7,r9
  802bd4:	8009883a 	mov	r4,r16
  802bd8:	880b883a 	mov	r5,r17
  802bdc:	400d883a 	mov	r6,r8
  802be0:	1029883a 	mov	r20,r2
  802be4:	182b883a 	mov	r21,r3
  802be8:	08047a80 	call	8047a8 <__muldf3>
  802bec:	0224f2b4 	movhi	r8,37834
  802bf0:	4236d944 	addi	r8,r8,-9371
  802bf4:	024ff3b4 	movhi	r9,16334
  802bf8:	4a619284 	addi	r9,r9,-31158
  802bfc:	480f883a 	mov	r7,r9
  802c00:	400d883a 	mov	r6,r8
  802c04:	180b883a 	mov	r5,r3
  802c08:	1009883a 	mov	r4,r2
  802c0c:	08047340 	call	804734 <__adddf3>
  802c10:	180f883a 	mov	r7,r3
  802c14:	8009883a 	mov	r4,r16
  802c18:	880b883a 	mov	r5,r17
  802c1c:	100d883a 	mov	r6,r2
  802c20:	08047a80 	call	8047a8 <__muldf3>
  802c24:	022a4774 	movhi	r8,43293
  802c28:	42104044 	addi	r8,r8,16641
  802c2c:	024ff474 	movhi	r9,16337
  802c30:	4a5d1804 	addi	r9,r9,29792
  802c34:	480f883a 	mov	r7,r9
  802c38:	400d883a 	mov	r6,r8
  802c3c:	180b883a 	mov	r5,r3
  802c40:	1009883a 	mov	r4,r2
  802c44:	08047340 	call	804734 <__adddf3>
  802c48:	180f883a 	mov	r7,r3
  802c4c:	8009883a 	mov	r4,r16
  802c50:	880b883a 	mov	r5,r17
  802c54:	100d883a 	mov	r6,r2
  802c58:	08047a80 	call	8047a8 <__muldf3>
  802c5c:	021463f4 	movhi	r8,20879
  802c60:	42099344 	addi	r8,r8,9805
  802c64:	024ff574 	movhi	r9,16341
  802c68:	4a555544 	addi	r9,r9,21845
  802c6c:	480f883a 	mov	r7,r9
  802c70:	400d883a 	mov	r6,r8
  802c74:	180b883a 	mov	r5,r3
  802c78:	1009883a 	mov	r4,r2
  802c7c:	08047340 	call	804734 <__adddf3>
  802c80:	180f883a 	mov	r7,r3
  802c84:	8009883a 	mov	r4,r16
  802c88:	880b883a 	mov	r5,r17
  802c8c:	100d883a 	mov	r6,r2
  802c90:	08047a80 	call	8047a8 <__muldf3>
  802c94:	0236dc34 	movhi	r8,56176
  802c98:	422affc4 	addi	r8,r8,-21505
  802c9c:	024ff6f4 	movhi	r9,16347
  802ca0:	4a5b6d84 	addi	r9,r9,28086
  802ca4:	480f883a 	mov	r7,r9
  802ca8:	400d883a 	mov	r6,r8
  802cac:	180b883a 	mov	r5,r3
  802cb0:	1009883a 	mov	r4,r2
  802cb4:	08047340 	call	804734 <__adddf3>
  802cb8:	180f883a 	mov	r7,r3
  802cbc:	8009883a 	mov	r4,r16
  802cc0:	880b883a 	mov	r5,r17
  802cc4:	100d883a 	mov	r6,r2
  802cc8:	08047a80 	call	8047a8 <__muldf3>
  802ccc:	020cccf4 	movhi	r8,13107
  802cd0:	420cc0c4 	addi	r8,r8,13059
  802cd4:	024ff8f4 	movhi	r9,16355
  802cd8:	4a4cccc4 	addi	r9,r9,13107
  802cdc:	480f883a 	mov	r7,r9
  802ce0:	400d883a 	mov	r6,r8
  802ce4:	180b883a 	mov	r5,r3
  802ce8:	1009883a 	mov	r4,r2
  802cec:	08047340 	call	804734 <__adddf3>
  802cf0:	180f883a 	mov	r7,r3
  802cf4:	a80b883a 	mov	r5,r21
  802cf8:	a009883a 	mov	r4,r20
  802cfc:	100d883a 	mov	r6,r2
  802d00:	08047a80 	call	8047a8 <__muldf3>
  802d04:	d9000317 	ldw	r4,12(sp)
  802d08:	d9403017 	ldw	r5,192(sp)
  802d0c:	d9801617 	ldw	r6,88(sp)
  802d10:	d9c02717 	ldw	r7,156(sp)
  802d14:	1021883a 	mov	r16,r2
  802d18:	1823883a 	mov	r17,r3
  802d1c:	08047340 	call	804734 <__adddf3>
  802d20:	d9003117 	ldw	r4,196(sp)
  802d24:	d9403217 	ldw	r5,200(sp)
  802d28:	180f883a 	mov	r7,r3
  802d2c:	100d883a 	mov	r6,r2
  802d30:	d9001415 	stw	r4,80(sp)
  802d34:	d9401515 	stw	r5,84(sp)
  802d38:	08047a80 	call	8047a8 <__muldf3>
  802d3c:	180f883a 	mov	r7,r3
  802d40:	8009883a 	mov	r4,r16
  802d44:	880b883a 	mov	r5,r17
  802d48:	100d883a 	mov	r6,r2
  802d4c:	08047340 	call	804734 <__adddf3>
  802d50:	d9001617 	ldw	r4,88(sp)
  802d54:	d9402717 	ldw	r5,156(sp)
  802d58:	d8803315 	stw	r2,204(sp)
  802d5c:	200d883a 	mov	r6,r4
  802d60:	280f883a 	mov	r7,r5
  802d64:	d8c03415 	stw	r3,208(sp)
  802d68:	08047a80 	call	8047a8 <__muldf3>
  802d6c:	182f883a 	mov	r23,r3
  802d70:	05500234 	movhi	r21,16392
  802d74:	0029883a 	mov	r20,zero
  802d78:	b80b883a 	mov	r5,r23
  802d7c:	a00d883a 	mov	r6,r20
  802d80:	a80f883a 	mov	r7,r21
  802d84:	1009883a 	mov	r4,r2
  802d88:	d8800715 	stw	r2,28(sp)
  802d8c:	d8c00815 	stw	r3,32(sp)
  802d90:	08047340 	call	804734 <__adddf3>
  802d94:	d9003317 	ldw	r4,204(sp)
  802d98:	d9403417 	ldw	r5,208(sp)
  802d9c:	180f883a 	mov	r7,r3
  802da0:	100d883a 	mov	r6,r2
  802da4:	d9000515 	stw	r4,20(sp)
  802da8:	d9400615 	stw	r5,24(sp)
  802dac:	08047340 	call	804734 <__adddf3>
  802db0:	d9001617 	ldw	r4,88(sp)
  802db4:	d9402717 	ldw	r5,156(sp)
  802db8:	0025883a 	mov	r18,zero
  802dbc:	900d883a 	mov	r6,r18
  802dc0:	180f883a 	mov	r7,r3
  802dc4:	1823883a 	mov	r17,r3
  802dc8:	08047a80 	call	8047a8 <__muldf3>
  802dcc:	d9001417 	ldw	r4,80(sp)
  802dd0:	d9403217 	ldw	r5,200(sp)
  802dd4:	880f883a 	mov	r7,r17
  802dd8:	900d883a 	mov	r6,r18
  802ddc:	d8803515 	stw	r2,212(sp)
  802de0:	d8c03615 	stw	r3,216(sp)
  802de4:	08047a80 	call	8047a8 <__muldf3>
  802de8:	a80f883a 	mov	r7,r21
  802dec:	880b883a 	mov	r5,r17
  802df0:	000d883a 	mov	r6,zero
  802df4:	9009883a 	mov	r4,r18
  802df8:	1021883a 	mov	r16,r2
  802dfc:	1823883a 	mov	r17,r3
  802e00:	08046b40 	call	8046b4 <__subdf3>
  802e04:	d9800717 	ldw	r6,28(sp)
  802e08:	b80f883a 	mov	r7,r23
  802e0c:	180b883a 	mov	r5,r3
  802e10:	1009883a 	mov	r4,r2
  802e14:	08046b40 	call	8046b4 <__subdf3>
  802e18:	d9000517 	ldw	r4,20(sp)
  802e1c:	d9403417 	ldw	r5,208(sp)
  802e20:	180f883a 	mov	r7,r3
  802e24:	100d883a 	mov	r6,r2
  802e28:	08046b40 	call	8046b4 <__subdf3>
  802e2c:	d9000317 	ldw	r4,12(sp)
  802e30:	d9403017 	ldw	r5,192(sp)
  802e34:	180f883a 	mov	r7,r3
  802e38:	100d883a 	mov	r6,r2
  802e3c:	08047a80 	call	8047a8 <__muldf3>
  802e40:	180f883a 	mov	r7,r3
  802e44:	880b883a 	mov	r5,r17
  802e48:	8009883a 	mov	r4,r16
  802e4c:	100d883a 	mov	r6,r2
  802e50:	08047340 	call	804734 <__adddf3>
  802e54:	102d883a 	mov	r22,r2
  802e58:	d9003617 	ldw	r4,216(sp)
  802e5c:	d8803517 	ldw	r2,212(sp)
  802e60:	d9403617 	ldw	r5,216(sp)
  802e64:	182f883a 	mov	r23,r3
  802e68:	b00d883a 	mov	r6,r22
  802e6c:	b80f883a 	mov	r7,r23
  802e70:	d9000a15 	stw	r4,40(sp)
  802e74:	1009883a 	mov	r4,r2
  802e78:	054ffbf4 	movhi	r21,16367
  802e7c:	ad71c244 	addi	r21,r21,-14583
  802e80:	dd800d15 	stw	r22,52(sp)
  802e84:	ddc00e15 	stw	r23,56(sp)
  802e88:	05380034 	movhi	r20,57344
  802e8c:	d8800915 	stw	r2,36(sp)
  802e90:	08047340 	call	804734 <__adddf3>
  802e94:	180b883a 	mov	r5,r3
  802e98:	a00d883a 	mov	r6,r20
  802e9c:	a80f883a 	mov	r7,r21
  802ea0:	9009883a 	mov	r4,r18
  802ea4:	1823883a 	mov	r17,r3
  802ea8:	08047a80 	call	8047a8 <__muldf3>
  802eac:	020516f4 	movhi	r8,5211
  802eb0:	42007d44 	addi	r8,r8,501
  802eb4:	026f8fb4 	movhi	r9,48702
  802eb8:	4a4bf804 	addi	r9,r9,12256
  802ebc:	480f883a 	mov	r7,r9
  802ec0:	400d883a 	mov	r6,r8
  802ec4:	880b883a 	mov	r5,r17
  802ec8:	9009883a 	mov	r4,r18
  802ecc:	d8803715 	stw	r2,220(sp)
  802ed0:	d8c03815 	stw	r3,224(sp)
  802ed4:	08047a80 	call	8047a8 <__muldf3>
  802ed8:	d9800917 	ldw	r6,36(sp)
  802edc:	d9c03617 	ldw	r7,216(sp)
  802ee0:	880b883a 	mov	r5,r17
  802ee4:	9009883a 	mov	r4,r18
  802ee8:	1021883a 	mov	r16,r2
  802eec:	1823883a 	mov	r17,r3
  802ef0:	08046b40 	call	8046b4 <__subdf3>
  802ef4:	d9000d17 	ldw	r4,52(sp)
  802ef8:	b80b883a 	mov	r5,r23
  802efc:	180f883a 	mov	r7,r3
  802f00:	100d883a 	mov	r6,r2
  802f04:	08046b40 	call	8046b4 <__subdf3>
  802f08:	180b883a 	mov	r5,r3
  802f0c:	a80f883a 	mov	r7,r21
  802f10:	01b70eb4 	movhi	r6,56378
  802f14:	3180ff44 	addi	r6,r6,1021
  802f18:	1009883a 	mov	r4,r2
  802f1c:	08047a80 	call	8047a8 <__muldf3>
  802f20:	180f883a 	mov	r7,r3
  802f24:	880b883a 	mov	r5,r17
  802f28:	8009883a 	mov	r4,r16
  802f2c:	100d883a 	mov	r6,r2
  802f30:	08047340 	call	804734 <__adddf3>
  802f34:	d9402c17 	ldw	r5,176(sp)
  802f38:	010020b4 	movhi	r4,130
  802f3c:	2128ad04 	addi	r4,r4,-23884
  802f40:	2909883a 	add	r4,r5,r4
  802f44:	22400117 	ldw	r9,4(r4)
  802f48:	22000017 	ldw	r8,0(r4)
  802f4c:	180b883a 	mov	r5,r3
  802f50:	480f883a 	mov	r7,r9
  802f54:	400d883a 	mov	r6,r8
  802f58:	1009883a 	mov	r4,r2
  802f5c:	08047340 	call	804734 <__adddf3>
  802f60:	d9000017 	ldw	r4,0(sp)
  802f64:	182f883a 	mov	r23,r3
  802f68:	102d883a 	mov	r22,r2
  802f6c:	080506c0 	call	80506c <__floatsidf>
  802f70:	d9402c17 	ldw	r5,176(sp)
  802f74:	010020b4 	movhi	r4,130
  802f78:	2128b104 	addi	r4,r4,-23868
  802f7c:	b00d883a 	mov	r6,r22
  802f80:	2911883a 	add	r8,r5,r4
  802f84:	d9003717 	ldw	r4,220(sp)
  802f88:	d9403817 	ldw	r5,224(sp)
  802f8c:	45000017 	ldw	r20,0(r8)
  802f90:	d9002315 	stw	r4,140(sp)
  802f94:	d9003817 	ldw	r4,224(sp)
  802f98:	45400117 	ldw	r21,4(r8)
  802f9c:	b80f883a 	mov	r7,r23
  802fa0:	d9002415 	stw	r4,144(sp)
  802fa4:	d9002317 	ldw	r4,140(sp)
  802fa8:	1021883a 	mov	r16,r2
  802fac:	1823883a 	mov	r17,r3
  802fb0:	dd802115 	stw	r22,132(sp)
  802fb4:	ddc02215 	stw	r23,136(sp)
  802fb8:	08047340 	call	804734 <__adddf3>
  802fbc:	180b883a 	mov	r5,r3
  802fc0:	1009883a 	mov	r4,r2
  802fc4:	a00d883a 	mov	r6,r20
  802fc8:	a80f883a 	mov	r7,r21
  802fcc:	08047340 	call	804734 <__adddf3>
  802fd0:	180f883a 	mov	r7,r3
  802fd4:	8009883a 	mov	r4,r16
  802fd8:	880b883a 	mov	r5,r17
  802fdc:	100d883a 	mov	r6,r2
  802fe0:	08047340 	call	804734 <__adddf3>
  802fe4:	180b883a 	mov	r5,r3
  802fe8:	0009883a 	mov	r4,zero
  802fec:	800d883a 	mov	r6,r16
  802ff0:	880f883a 	mov	r7,r17
  802ff4:	d9001b15 	stw	r4,108(sp)
  802ff8:	d8c01c15 	stw	r3,112(sp)
  802ffc:	08046b40 	call	8046b4 <__subdf3>
  803000:	180b883a 	mov	r5,r3
  803004:	a80f883a 	mov	r7,r21
  803008:	1009883a 	mov	r4,r2
  80300c:	a00d883a 	mov	r6,r20
  803010:	08046b40 	call	8046b4 <__subdf3>
  803014:	d9802317 	ldw	r6,140(sp)
  803018:	d9c03817 	ldw	r7,224(sp)
  80301c:	180b883a 	mov	r5,r3
  803020:	1009883a 	mov	r4,r2
  803024:	08046b40 	call	8046b4 <__subdf3>
  803028:	d9002117 	ldw	r4,132(sp)
  80302c:	1011883a 	mov	r8,r2
  803030:	1813883a 	mov	r9,r3
  803034:	b80b883a 	mov	r5,r23
  803038:	480f883a 	mov	r7,r9
  80303c:	400d883a 	mov	r6,r8
  803040:	08046b40 	call	8046b4 <__subdf3>
  803044:	1823883a 	mov	r17,r3
  803048:	d8c02517 	ldw	r3,148(sp)
  80304c:	1021883a 	mov	r16,r2
  803050:	e0bfffc4 	addi	r2,fp,-1
  803054:	1884b03a 	or	r2,r3,r2
  803058:	1000731e 	bne	r2,zero,803228 <__ieee754_pow+0xb88>
  80305c:	0009883a 	mov	r4,zero
  803060:	016ffc34 	movhi	r5,49136
  803064:	d9001915 	stw	r4,100(sp)
  803068:	d9401a15 	stw	r5,104(sp)
  80306c:	d9402917 	ldw	r5,164(sp)
  803070:	d9002817 	ldw	r4,160(sp)
  803074:	0029883a 	mov	r20,zero
  803078:	a00d883a 	mov	r6,r20
  80307c:	280f883a 	mov	r7,r5
  803080:	2827883a 	mov	r19,r5
  803084:	08046b40 	call	8046b4 <__subdf3>
  803088:	d9001b17 	ldw	r4,108(sp)
  80308c:	d9401c17 	ldw	r5,112(sp)
  803090:	180f883a 	mov	r7,r3
  803094:	100d883a 	mov	r6,r2
  803098:	08047a80 	call	8047a8 <__muldf3>
  80309c:	d9c02917 	ldw	r7,164(sp)
  8030a0:	d9802817 	ldw	r6,160(sp)
  8030a4:	880b883a 	mov	r5,r17
  8030a8:	8009883a 	mov	r4,r16
  8030ac:	1823883a 	mov	r17,r3
  8030b0:	1021883a 	mov	r16,r2
  8030b4:	08047a80 	call	8047a8 <__muldf3>
  8030b8:	180f883a 	mov	r7,r3
  8030bc:	880b883a 	mov	r5,r17
  8030c0:	8009883a 	mov	r4,r16
  8030c4:	100d883a 	mov	r6,r2
  8030c8:	08047340 	call	804734 <__adddf3>
  8030cc:	d9401c17 	ldw	r5,112(sp)
  8030d0:	d9001b17 	ldw	r4,108(sp)
  8030d4:	a00d883a 	mov	r6,r20
  8030d8:	980f883a 	mov	r7,r19
  8030dc:	1029883a 	mov	r20,r2
  8030e0:	182b883a 	mov	r21,r3
  8030e4:	08047a80 	call	8047a8 <__muldf3>
  8030e8:	1025883a 	mov	r18,r2
  8030ec:	1827883a 	mov	r19,r3
  8030f0:	a009883a 	mov	r4,r20
  8030f4:	a80b883a 	mov	r5,r21
  8030f8:	900d883a 	mov	r6,r18
  8030fc:	980f883a 	mov	r7,r19
  803100:	dd001d15 	stw	r20,116(sp)
  803104:	dc801f15 	stw	r18,124(sp)
  803108:	dd401e15 	stw	r21,120(sp)
  80310c:	dcc02015 	stw	r19,128(sp)
  803110:	08047340 	call	804734 <__adddf3>
  803114:	1823883a 	mov	r17,r3
  803118:	01102434 	movhi	r4,16528
  80311c:	213fffc4 	addi	r4,r4,-1
  803120:	1021883a 	mov	r16,r2
  803124:	182f883a 	mov	r23,r3
  803128:	dc401815 	stw	r17,96(sp)
  80312c:	100b883a 	mov	r5,r2
  803130:	20c02c0e 	bge	r4,r3,8031e4 <__ieee754_pow+0xb44>
  803134:	00afdc34 	movhi	r2,49008
  803138:	1885883a 	add	r2,r3,r2
  80313c:	2884b03a 	or	r2,r5,r2
  803140:	1001a626 	beq	r2,zero,8037dc <__ieee754_pow+0x113c>
  803144:	04220034 	movhi	r16,34816
  803148:	841d6704 	addi	r16,r16,30108
  80314c:	045f8e34 	movhi	r17,32312
  803150:	8c790f04 	addi	r17,r17,-7108
  803154:	d9401a17 	ldw	r5,104(sp)
  803158:	d9001917 	ldw	r4,100(sp)
  80315c:	800d883a 	mov	r6,r16
  803160:	880f883a 	mov	r7,r17
  803164:	08047a80 	call	8047a8 <__muldf3>
  803168:	180b883a 	mov	r5,r3
  80316c:	800d883a 	mov	r6,r16
  803170:	880f883a 	mov	r7,r17
  803174:	1009883a 	mov	r4,r2
  803178:	08047a80 	call	8047a8 <__muldf3>
  80317c:	003dc306 	br	80288c <__ieee754_pow+0x1ec>
  803180:	00b00434 	movhi	r2,49168
  803184:	9085883a 	add	r2,r18,r2
  803188:	e084b03a 	or	r2,fp,r2
  80318c:	1000af1e 	bne	r2,zero,80344c <__ieee754_pow+0xdac>
  803190:	480f883a 	mov	r7,r9
  803194:	4009883a 	mov	r4,r8
  803198:	480b883a 	mov	r5,r9
  80319c:	400d883a 	mov	r6,r8
  8031a0:	003db406 	br	802874 <__ieee754_pow+0x1d4>
  8031a4:	00bffc34 	movhi	r2,65520
  8031a8:	18ff0084 	addi	r3,r3,-1022
  8031ac:	a0a9883a 	add	r20,r20,r2
  8031b0:	d8c00015 	stw	r3,0(sp)
  8031b4:	0009883a 	mov	r4,zero
  8031b8:	04000234 	movhi	r16,8
  8031bc:	003e1406 	br	802a10 <__ieee754_pow+0x370>
  8031c0:	a80f883a 	mov	r7,r21
  8031c4:	a009883a 	mov	r4,r20
  8031c8:	a80b883a 	mov	r5,r21
  8031cc:	a00d883a 	mov	r6,r20
  8031d0:	08047a80 	call	8047a8 <__muldf3>
  8031d4:	180b883a 	mov	r5,r3
  8031d8:	d8802815 	stw	r2,160(sp)
  8031dc:	d9402915 	stw	r5,164(sp)
  8031e0:	003d5606 	br	80273c <__ieee754_pow+0x9c>
  8031e4:	d9001817 	ldw	r4,96(sp)
  8031e8:	00a00034 	movhi	r2,32768
  8031ec:	10bfffc4 	addi	r2,r2,-1
  8031f0:	00d02474 	movhi	r3,16529
  8031f4:	18f2ffc4 	addi	r3,r3,-13313
  8031f8:	20b8703a 	and	fp,r4,r2
  8031fc:	1f009d0e 	bge	r3,fp,803474 <__ieee754_pow+0xdd4>
  803200:	008fdbf4 	movhi	r2,16239
  803204:	108d0004 	addi	r2,r2,13312
  803208:	2085883a 	add	r2,r4,r2
  80320c:	1144b03a 	or	r2,r2,r5
  803210:	1001c626 	beq	r2,zero,80392c <__ieee754_pow+0x128c>
  803214:	0430be74 	movhi	r16,49913
  803218:	843cd644 	addi	r16,r16,-3239
  80321c:	04406974 	movhi	r17,421
  803220:	8c5b87c4 	addi	r17,r17,28191
  803224:	003fcb06 	br	803154 <__ieee754_pow+0xab4>
  803228:	0005883a 	mov	r2,zero
  80322c:	00cffc34 	movhi	r3,16368
  803230:	d8801915 	stw	r2,100(sp)
  803234:	d8c01a15 	stw	r3,104(sp)
  803238:	003f8c06 	br	80306c <__ieee754_pow+0x9cc>
  80323c:	0005883a 	mov	r2,zero
  803240:	00cffc34 	movhi	r3,16368
  803244:	180b883a 	mov	r5,r3
  803248:	580f883a 	mov	r7,r11
  80324c:	1009883a 	mov	r4,r2
  803250:	500d883a 	mov	r6,r10
  803254:	0804b6c0 	call	804b6c <__divdf3>
  803258:	1011883a 	mov	r8,r2
  80325c:	1813883a 	mov	r9,r3
  803260:	003d9506 	br	8028b8 <__ieee754_pow+0x218>
  803264:	008ffc34 	movhi	r2,16368
  803268:	10bfff84 	addi	r2,r2,-2
  80326c:	14bdbb0e 	bge	r2,r18,80295c <__ieee754_pow+0x2bc>
  803270:	008ffc34 	movhi	r2,16368
  803274:	14bdae16 	blt	r2,r18,802930 <__ieee754_pow+0x290>
  803278:	580b883a 	mov	r5,r11
  80327c:	5009883a 	mov	r4,r10
  803280:	000d883a 	mov	r6,zero
  803284:	100f883a 	mov	r7,r2
  803288:	08046b40 	call	8046b4 <__subdf3>
  80328c:	1021883a 	mov	r16,r2
  803290:	1823883a 	mov	r17,r3
  803294:	00980034 	movhi	r2,24576
  803298:	00cffdf4 	movhi	r3,16375
  80329c:	18c551c4 	addi	r3,r3,5447
  8032a0:	8009883a 	mov	r4,r16
  8032a4:	880b883a 	mov	r5,r17
  8032a8:	180f883a 	mov	r7,r3
  8032ac:	100d883a 	mov	r6,r2
  8032b0:	08047a80 	call	8047a8 <__muldf3>
  8032b4:	023e17b4 	movhi	r8,63582
  8032b8:	4237d104 	addi	r8,r8,-8380
  8032bc:	024f9574 	movhi	r9,15957
  8032c0:	4a6b82c4 	addi	r9,r9,-20981
  8032c4:	480f883a 	mov	r7,r9
  8032c8:	400d883a 	mov	r6,r8
  8032cc:	8009883a 	mov	r4,r16
  8032d0:	880b883a 	mov	r5,r17
  8032d4:	102d883a 	mov	r22,r2
  8032d8:	182f883a 	mov	r23,r3
  8032dc:	08047a80 	call	8047a8 <__muldf3>
  8032e0:	8009883a 	mov	r4,r16
  8032e4:	880b883a 	mov	r5,r17
  8032e8:	800d883a 	mov	r6,r16
  8032ec:	880f883a 	mov	r7,r17
  8032f0:	d8802a15 	stw	r2,168(sp)
  8032f4:	d8c02b15 	stw	r3,172(sp)
  8032f8:	08047a80 	call	8047a8 <__muldf3>
  8032fc:	0011883a 	mov	r8,zero
  803300:	026ff434 	movhi	r9,49104
  803304:	480f883a 	mov	r7,r9
  803308:	8009883a 	mov	r4,r16
  80330c:	880b883a 	mov	r5,r17
  803310:	400d883a 	mov	r6,r8
  803314:	1029883a 	mov	r20,r2
  803318:	182b883a 	mov	r21,r3
  80331c:	08047a80 	call	8047a8 <__muldf3>
  803320:	02155574 	movhi	r8,21845
  803324:	42155544 	addi	r8,r8,21845
  803328:	024ff574 	movhi	r9,16341
  80332c:	4a555544 	addi	r9,r9,21845
  803330:	480f883a 	mov	r7,r9
  803334:	400d883a 	mov	r6,r8
  803338:	180b883a 	mov	r5,r3
  80333c:	1009883a 	mov	r4,r2
  803340:	08047340 	call	804734 <__adddf3>
  803344:	180f883a 	mov	r7,r3
  803348:	8009883a 	mov	r4,r16
  80334c:	880b883a 	mov	r5,r17
  803350:	100d883a 	mov	r6,r2
  803354:	08047a80 	call	8047a8 <__muldf3>
  803358:	0011883a 	mov	r8,zero
  80335c:	024ff834 	movhi	r9,16352
  803360:	480b883a 	mov	r5,r9
  803364:	4009883a 	mov	r4,r8
  803368:	180f883a 	mov	r7,r3
  80336c:	100d883a 	mov	r6,r2
  803370:	08046b40 	call	8046b4 <__subdf3>
  803374:	180f883a 	mov	r7,r3
  803378:	a80b883a 	mov	r5,r21
  80337c:	a009883a 	mov	r4,r20
  803380:	100d883a 	mov	r6,r2
  803384:	08047a80 	call	8047a8 <__muldf3>
  803388:	02194b34 	movhi	r8,25900
  80338c:	4220bf84 	addi	r8,r8,-32002
  803390:	026ffdf4 	movhi	r9,49143
  803394:	4a4551c4 	addi	r9,r9,5447
  803398:	480f883a 	mov	r7,r9
  80339c:	400d883a 	mov	r6,r8
  8033a0:	180b883a 	mov	r5,r3
  8033a4:	1009883a 	mov	r4,r2
  8033a8:	08047a80 	call	8047a8 <__muldf3>
  8033ac:	d9402b17 	ldw	r5,172(sp)
  8033b0:	d9002a17 	ldw	r4,168(sp)
  8033b4:	180f883a 	mov	r7,r3
  8033b8:	100d883a 	mov	r6,r2
  8033bc:	08047340 	call	804734 <__adddf3>
  8033c0:	100d883a 	mov	r6,r2
  8033c4:	b009883a 	mov	r4,r22
  8033c8:	b80b883a 	mov	r5,r23
  8033cc:	180f883a 	mov	r7,r3
  8033d0:	1021883a 	mov	r16,r2
  8033d4:	1823883a 	mov	r17,r3
  8033d8:	08047340 	call	804734 <__adddf3>
  8033dc:	180b883a 	mov	r5,r3
  8033e0:	0009883a 	mov	r4,zero
  8033e4:	b00d883a 	mov	r6,r22
  8033e8:	b80f883a 	mov	r7,r23
  8033ec:	d9001b15 	stw	r4,108(sp)
  8033f0:	d8c01c15 	stw	r3,112(sp)
  8033f4:	08046b40 	call	8046b4 <__subdf3>
  8033f8:	1011883a 	mov	r8,r2
  8033fc:	1813883a 	mov	r9,r3
  803400:	8009883a 	mov	r4,r16
  803404:	880b883a 	mov	r5,r17
  803408:	003f0b06 	br	803038 <__ieee754_pow+0x998>
  80340c:	0005883a 	mov	r2,zero
  803410:	00d0d034 	movhi	r3,17216
  803414:	580b883a 	mov	r5,r11
  803418:	5009883a 	mov	r4,r10
  80341c:	180f883a 	mov	r7,r3
  803420:	100d883a 	mov	r6,r2
  803424:	08047a80 	call	8047a8 <__muldf3>
  803428:	1015883a 	mov	r10,r2
  80342c:	1825883a 	mov	r18,r3
  803430:	017ff2c4 	movi	r5,-53
  803434:	003d6606 	br	8029d0 <__ieee754_pow+0x330>
  803438:	b03d300e 	bge	r22,zero,8028fc <__ieee754_pow+0x25c>
  80343c:	d9402917 	ldw	r5,164(sp)
  803440:	28e0003c 	xorhi	r3,r5,32768
  803444:	d8c02915 	stw	r3,164(sp)
  803448:	003cbc06 	br	80273c <__ieee754_pow+0x9c>
  80344c:	00800044 	movi	r2,1
  803450:	e0bd1a1e 	bne	fp,r2,8028bc <__ieee754_pow+0x21c>
  803454:	48e0003c 	xorhi	r3,r9,32768
  803458:	da002815 	stw	r8,160(sp)
  80345c:	d8c02915 	stw	r3,164(sp)
  803460:	003cb606 	br	80273c <__ieee754_pow+0x9c>
  803464:	d9001817 	ldw	r4,96(sp)
  803468:	00a00034 	movhi	r2,32768
  80346c:	10bfffc4 	addi	r2,r2,-1
  803470:	20b8703a 	and	fp,r4,r2
  803474:	008ff834 	movhi	r2,16352
  803478:	1700fc16 	blt	r2,fp,80386c <__ieee754_pow+0x11cc>
  80347c:	0039883a 	mov	fp,zero
  803480:	d8001315 	stw	zero,76(sp)
  803484:	0025883a 	mov	r18,zero
  803488:	0005883a 	mov	r2,zero
  80348c:	00cff9b4 	movhi	r3,16358
  803490:	18cb90c4 	addi	r3,r3,11843
  803494:	9009883a 	mov	r4,r18
  803498:	b80b883a 	mov	r5,r23
  80349c:	180f883a 	mov	r7,r3
  8034a0:	100d883a 	mov	r6,r2
  8034a4:	08047a80 	call	8047a8 <__muldf3>
  8034a8:	d9c02017 	ldw	r7,128(sp)
  8034ac:	d9801f17 	ldw	r6,124(sp)
  8034b0:	9009883a 	mov	r4,r18
  8034b4:	b80b883a 	mov	r5,r23
  8034b8:	b823883a 	mov	r17,r23
  8034bc:	102d883a 	mov	r22,r2
  8034c0:	182f883a 	mov	r23,r3
  8034c4:	08046b40 	call	8046b4 <__subdf3>
  8034c8:	d9401e17 	ldw	r5,120(sp)
  8034cc:	d9001d17 	ldw	r4,116(sp)
  8034d0:	180f883a 	mov	r7,r3
  8034d4:	100d883a 	mov	r6,r2
  8034d8:	08046b40 	call	8046b4 <__subdf3>
  8034dc:	023fbeb4 	movhi	r8,65274
  8034e0:	420e7bc4 	addi	r8,r8,14831
  8034e4:	024ff9b4 	movhi	r9,16358
  8034e8:	4a4b9084 	addi	r9,r9,11842
  8034ec:	480f883a 	mov	r7,r9
  8034f0:	400d883a 	mov	r6,r8
  8034f4:	180b883a 	mov	r5,r3
  8034f8:	1009883a 	mov	r4,r2
  8034fc:	08047a80 	call	8047a8 <__muldf3>
  803500:	02032a34 	movhi	r8,3240
  803504:	421b0e44 	addi	r8,r8,27705
  803508:	026f8834 	movhi	r9,48672
  80350c:	4a571844 	addi	r9,r9,23649
  803510:	480f883a 	mov	r7,r9
  803514:	400d883a 	mov	r6,r8
  803518:	9009883a 	mov	r4,r18
  80351c:	880b883a 	mov	r5,r17
  803520:	1021883a 	mov	r16,r2
  803524:	1823883a 	mov	r17,r3
  803528:	08047a80 	call	8047a8 <__muldf3>
  80352c:	180f883a 	mov	r7,r3
  803530:	880b883a 	mov	r5,r17
  803534:	8009883a 	mov	r4,r16
  803538:	100d883a 	mov	r6,r2
  80353c:	08047340 	call	804734 <__adddf3>
  803540:	100d883a 	mov	r6,r2
  803544:	b009883a 	mov	r4,r22
  803548:	b80b883a 	mov	r5,r23
  80354c:	180f883a 	mov	r7,r3
  803550:	1021883a 	mov	r16,r2
  803554:	1823883a 	mov	r17,r3
  803558:	08047340 	call	804734 <__adddf3>
  80355c:	1009883a 	mov	r4,r2
  803560:	180b883a 	mov	r5,r3
  803564:	b00d883a 	mov	r6,r22
  803568:	b80f883a 	mov	r7,r23
  80356c:	d8803915 	stw	r2,228(sp)
  803570:	d8c03a15 	stw	r3,232(sp)
  803574:	d8801115 	stw	r2,68(sp)
  803578:	d8c01215 	stw	r3,72(sp)
  80357c:	08046b40 	call	8046b4 <__subdf3>
  803580:	180f883a 	mov	r7,r3
  803584:	8009883a 	mov	r4,r16
  803588:	880b883a 	mov	r5,r17
  80358c:	100d883a 	mov	r6,r2
  803590:	08046b40 	call	8046b4 <__subdf3>
  803594:	d9001117 	ldw	r4,68(sp)
  803598:	d9403a17 	ldw	r5,232(sp)
  80359c:	1029883a 	mov	r20,r2
  8035a0:	200d883a 	mov	r6,r4
  8035a4:	280f883a 	mov	r7,r5
  8035a8:	182b883a 	mov	r21,r3
  8035ac:	08047a80 	call	8047a8 <__muldf3>
  8035b0:	1021883a 	mov	r16,r2
  8035b4:	1823883a 	mov	r17,r3
  8035b8:	009caff4 	movhi	r2,29375
  8035bc:	10a93404 	addi	r2,r2,-23344
  8035c0:	00cf99b4 	movhi	r3,15974
  8035c4:	18cdda44 	addi	r3,r3,14185
  8035c8:	8009883a 	mov	r4,r16
  8035cc:	880b883a 	mov	r5,r17
  8035d0:	180f883a 	mov	r7,r3
  8035d4:	100d883a 	mov	r6,r2
  8035d8:	08047a80 	call	8047a8 <__muldf3>
  8035dc:	023174b4 	movhi	r8,50642
  8035e0:	421afc44 	addi	r8,r8,27633
  8035e4:	024faf34 	movhi	r9,16060
  8035e8:	4a6f5044 	addi	r9,r9,-17087
  8035ec:	480f883a 	mov	r7,r9
  8035f0:	400d883a 	mov	r6,r8
  8035f4:	180b883a 	mov	r5,r3
  8035f8:	1009883a 	mov	r4,r2
  8035fc:	08046b40 	call	8046b4 <__subdf3>
  803600:	180f883a 	mov	r7,r3
  803604:	8009883a 	mov	r4,r16
  803608:	880b883a 	mov	r5,r17
  80360c:	100d883a 	mov	r6,r2
  803610:	08047a80 	call	8047a8 <__muldf3>
  803614:	022bc9b4 	movhi	r8,44838
  803618:	42378b04 	addi	r8,r8,-8660
  80361c:	024fc474 	movhi	r9,16145
  803620:	4a559a84 	addi	r9,r9,22122
  803624:	480f883a 	mov	r7,r9
  803628:	400d883a 	mov	r6,r8
  80362c:	180b883a 	mov	r5,r3
  803630:	1009883a 	mov	r4,r2
  803634:	08047340 	call	804734 <__adddf3>
  803638:	180f883a 	mov	r7,r3
  80363c:	8009883a 	mov	r4,r16
  803640:	880b883a 	mov	r5,r17
  803644:	100d883a 	mov	r6,r2
  803648:	08047a80 	call	8047a8 <__muldf3>
  80364c:	0205aff4 	movhi	r8,5823
  803650:	422f64c4 	addi	r8,r8,-17005
  803654:	024fd9f4 	movhi	r9,16231
  803658:	4a705b04 	addi	r9,r9,-16020
  80365c:	480f883a 	mov	r7,r9
  803660:	400d883a 	mov	r6,r8
  803664:	180b883a 	mov	r5,r3
  803668:	1009883a 	mov	r4,r2
  80366c:	08046b40 	call	8046b4 <__subdf3>
  803670:	180f883a 	mov	r7,r3
  803674:	8009883a 	mov	r4,r16
  803678:	880b883a 	mov	r5,r17
  80367c:	100d883a 	mov	r6,r2
  803680:	08047a80 	call	8047a8 <__muldf3>
  803684:	02155574 	movhi	r8,21845
  803688:	42154f84 	addi	r8,r8,21822
  80368c:	024ff174 	movhi	r9,16325
  803690:	4a555544 	addi	r9,r9,21845
  803694:	480f883a 	mov	r7,r9
  803698:	400d883a 	mov	r6,r8
  80369c:	180b883a 	mov	r5,r3
  8036a0:	1009883a 	mov	r4,r2
  8036a4:	08047340 	call	804734 <__adddf3>
  8036a8:	180f883a 	mov	r7,r3
  8036ac:	8009883a 	mov	r4,r16
  8036b0:	880b883a 	mov	r5,r17
  8036b4:	100d883a 	mov	r6,r2
  8036b8:	08047a80 	call	8047a8 <__muldf3>
  8036bc:	d9001117 	ldw	r4,68(sp)
  8036c0:	d9403a17 	ldw	r5,232(sp)
  8036c4:	180f883a 	mov	r7,r3
  8036c8:	100d883a 	mov	r6,r2
  8036cc:	08046b40 	call	8046b4 <__subdf3>
  8036d0:	d9001117 	ldw	r4,68(sp)
  8036d4:	d9403a17 	ldw	r5,232(sp)
  8036d8:	100d883a 	mov	r6,r2
  8036dc:	180f883a 	mov	r7,r3
  8036e0:	1021883a 	mov	r16,r2
  8036e4:	1823883a 	mov	r17,r3
  8036e8:	08047a80 	call	8047a8 <__muldf3>
  8036ec:	0011883a 	mov	r8,zero
  8036f0:	02500034 	movhi	r9,16384
  8036f4:	480f883a 	mov	r7,r9
  8036f8:	400d883a 	mov	r6,r8
  8036fc:	8009883a 	mov	r4,r16
  803700:	880b883a 	mov	r5,r17
  803704:	1021883a 	mov	r16,r2
  803708:	1823883a 	mov	r17,r3
  80370c:	08046b40 	call	8046b4 <__subdf3>
  803710:	180f883a 	mov	r7,r3
  803714:	880b883a 	mov	r5,r17
  803718:	8009883a 	mov	r4,r16
  80371c:	100d883a 	mov	r6,r2
  803720:	0804b6c0 	call	804b6c <__divdf3>
  803724:	d9001117 	ldw	r4,68(sp)
  803728:	d9403a17 	ldw	r5,232(sp)
  80372c:	a00d883a 	mov	r6,r20
  803730:	a80f883a 	mov	r7,r21
  803734:	1025883a 	mov	r18,r2
  803738:	1827883a 	mov	r19,r3
  80373c:	08047a80 	call	8047a8 <__muldf3>
  803740:	180f883a 	mov	r7,r3
  803744:	a009883a 	mov	r4,r20
  803748:	a80b883a 	mov	r5,r21
  80374c:	100d883a 	mov	r6,r2
  803750:	08047340 	call	804734 <__adddf3>
  803754:	180f883a 	mov	r7,r3
  803758:	980b883a 	mov	r5,r19
  80375c:	9009883a 	mov	r4,r18
  803760:	100d883a 	mov	r6,r2
  803764:	08046b40 	call	8046b4 <__subdf3>
  803768:	d9801117 	ldw	r6,68(sp)
  80376c:	d9c03a17 	ldw	r7,232(sp)
  803770:	180b883a 	mov	r5,r3
  803774:	1009883a 	mov	r4,r2
  803778:	08046b40 	call	8046b4 <__subdf3>
  80377c:	0011883a 	mov	r8,zero
  803780:	024ffc34 	movhi	r9,16368
  803784:	480b883a 	mov	r5,r9
  803788:	180f883a 	mov	r7,r3
  80378c:	4009883a 	mov	r4,r8
  803790:	100d883a 	mov	r6,r2
  803794:	08046b40 	call	8046b4 <__subdf3>
  803798:	100b883a 	mov	r5,r2
  80379c:	d8801317 	ldw	r2,76(sp)
  8037a0:	10d5883a 	add	r10,r2,r3
  8037a4:	5005d53a 	srai	r2,r10,20
  8037a8:	0080720e 	bge	zero,r2,803974 <__ieee754_pow+0x12d4>
  8037ac:	2811883a 	mov	r8,r5
  8037b0:	5013883a 	mov	r9,r10
  8037b4:	d9c01a17 	ldw	r7,104(sp)
  8037b8:	d9801917 	ldw	r6,100(sp)
  8037bc:	480b883a 	mov	r5,r9
  8037c0:	4009883a 	mov	r4,r8
  8037c4:	003e8206 	br	8031d0 <__ieee754_pow+0xb30>
  8037c8:	0009883a 	mov	r4,zero
  8037cc:	800b883a 	mov	r5,r16
  8037d0:	a80f883a 	mov	r7,r21
  8037d4:	a00d883a 	mov	r6,r20
  8037d8:	003c2b06 	br	802888 <__ieee754_pow+0x1e8>
  8037dc:	d9001d17 	ldw	r4,116(sp)
  8037e0:	00994b34 	movhi	r2,25900
  8037e4:	10a0bf84 	addi	r2,r2,-32002
  8037e8:	00cf25f4 	movhi	r3,15511
  8037ec:	18c551c4 	addi	r3,r3,5447
  8037f0:	a80b883a 	mov	r5,r21
  8037f4:	180f883a 	mov	r7,r3
  8037f8:	100d883a 	mov	r6,r2
  8037fc:	08047340 	call	804734 <__adddf3>
  803800:	d9801f17 	ldw	r6,124(sp)
  803804:	880b883a 	mov	r5,r17
  803808:	8009883a 	mov	r4,r16
  80380c:	980f883a 	mov	r7,r19
  803810:	1021883a 	mov	r16,r2
  803814:	1823883a 	mov	r17,r3
  803818:	08046b40 	call	8046b4 <__subdf3>
  80381c:	180f883a 	mov	r7,r3
  803820:	880b883a 	mov	r5,r17
  803824:	8009883a 	mov	r4,r16
  803828:	100d883a 	mov	r6,r2
  80382c:	0804ed40 	call	804ed4 <__gtdf2>
  803830:	00bf0c0e 	bge	zero,r2,803464 <__ieee754_pow+0xdc4>
  803834:	04220034 	movhi	r16,34816
  803838:	841d6704 	addi	r16,r16,30108
  80383c:	045f8e34 	movhi	r17,32312
  803840:	8c790f04 	addi	r17,r17,-7108
  803844:	d9401a17 	ldw	r5,104(sp)
  803848:	d9001917 	ldw	r4,100(sp)
  80384c:	800d883a 	mov	r6,r16
  803850:	880f883a 	mov	r7,r17
  803854:	08047a80 	call	8047a8 <__muldf3>
  803858:	180b883a 	mov	r5,r3
  80385c:	800d883a 	mov	r6,r16
  803860:	880f883a 	mov	r7,r17
  803864:	1009883a 	mov	r4,r2
  803868:	003e5906 	br	8031d0 <__ieee754_pow+0xb30>
  80386c:	e005d53a 	srai	r2,fp,20
  803870:	01800434 	movhi	r6,16
  803874:	d9401817 	ldw	r5,96(sp)
  803878:	10bf0084 	addi	r2,r2,-1022
  80387c:	308dd83a 	sra	r6,r6,r2
  803880:	02000434 	movhi	r8,16
  803884:	423fffc4 	addi	r8,r8,-1
  803888:	0005883a 	mov	r2,zero
  80388c:	298d883a 	add	r6,r5,r6
  803890:	318b883a 	add	r5,r6,r6
  803894:	320e703a 	and	r7,r6,r8
  803898:	1013883a 	mov	r9,r2
  80389c:	280ad57a 	srli	r5,r5,21
  8038a0:	d8801817 	ldw	r2,96(sp)
  8038a4:	01000504 	movi	r4,20
  8038a8:	297f0044 	addi	r5,r5,-1023
  8038ac:	4151d83a 	sra	r8,r8,r5
  8038b0:	39c00434 	orhi	r7,r7,16
  8038b4:	2149c83a 	sub	r4,r4,r5
  8038b8:	0210303a 	nor	r8,zero,r8
  8038bc:	3939d83a 	sra	fp,r7,r4
  8038c0:	320e703a 	and	r7,r6,r8
  8038c4:	10002916 	blt	r2,zero,80396c <__ieee754_pow+0x12cc>
  8038c8:	d9402017 	ldw	r5,128(sp)
  8038cc:	d9001f17 	ldw	r4,124(sp)
  8038d0:	480d883a 	mov	r6,r9
  8038d4:	08046b40 	call	8046b4 <__subdf3>
  8038d8:	180b883a 	mov	r5,r3
  8038dc:	d9402015 	stw	r5,128(sp)
  8038e0:	280f883a 	mov	r7,r5
  8038e4:	d9001d17 	ldw	r4,116(sp)
  8038e8:	d9401e17 	ldw	r5,120(sp)
  8038ec:	1007883a 	mov	r3,r2
  8038f0:	180d883a 	mov	r6,r3
  8038f4:	d8801f15 	stw	r2,124(sp)
  8038f8:	08047340 	call	804734 <__adddf3>
  8038fc:	180b883a 	mov	r5,r3
  803900:	e006953a 	slli	r3,fp,20
  803904:	282f883a 	mov	r23,r5
  803908:	d8c01315 	stw	r3,76(sp)
  80390c:	003edd06 	br	803484 <__ieee754_pow+0xde4>
  803910:	383bc81e 	bne	r7,zero,802834 <__ieee754_pow+0x194>
  803914:	28c5c83a 	sub	r2,r5,r3
  803918:	8087d83a 	sra	r3,r16,r2
  80391c:	1884983a 	sll	r2,r3,r2
  803920:	80801b26 	beq	r16,r2,803990 <__ieee754_pow+0x12f0>
  803924:	0039883a 	mov	fp,zero
  803928:	003b9d06 	br	8027a0 <__ieee754_pow+0x100>
  80392c:	d9801f17 	ldw	r6,124(sp)
  803930:	8009883a 	mov	r4,r16
  803934:	880b883a 	mov	r5,r17
  803938:	980f883a 	mov	r7,r19
  80393c:	08046b40 	call	8046b4 <__subdf3>
  803940:	d9001d17 	ldw	r4,116(sp)
  803944:	a80b883a 	mov	r5,r21
  803948:	180f883a 	mov	r7,r3
  80394c:	100d883a 	mov	r6,r2
  803950:	0804fe40 	call	804fe4 <__ledf2>
  803954:	00bfc516 	blt	zero,r2,80386c <__ieee754_pow+0x11cc>
  803958:	0430be74 	movhi	r16,49913
  80395c:	843cd644 	addi	r16,r16,-3239
  803960:	04406974 	movhi	r17,421
  803964:	8c5b87c4 	addi	r17,r17,28191
  803968:	003fb606 	br	803844 <__ieee754_pow+0x11a4>
  80396c:	0739c83a 	sub	fp,zero,fp
  803970:	003fd506 	br	8038c8 <__ieee754_pow+0x1228>
  803974:	2809883a 	mov	r4,r5
  803978:	e00d883a 	mov	r6,fp
  80397c:	180b883a 	mov	r5,r3
  803980:	0803ef40 	call	803ef4 <scalbn>
  803984:	1011883a 	mov	r8,r2
  803988:	1813883a 	mov	r9,r3
  80398c:	003f8906 	br	8037b4 <__ieee754_pow+0x1114>
  803990:	18c0004c 	andi	r3,r3,1
  803994:	00800084 	movi	r2,2
  803998:	10f9c83a 	sub	fp,r2,r3
  80399c:	003b8006 	br	8027a0 <__ieee754_pow+0x100>

008039a0 <__ieee754_sqrt>:
  8039a0:	defffd04 	addi	sp,sp,-12
  8039a4:	dc000015 	stw	r16,0(sp)
  8039a8:	009ffc34 	movhi	r2,32752
  8039ac:	2021883a 	mov	r16,r4
  8039b0:	291ffc2c 	andhi	r4,r5,32752
  8039b4:	dc400115 	stw	r17,4(sp)
  8039b8:	dfc00215 	stw	ra,8(sp)
  8039bc:	2823883a 	mov	r17,r5
  8039c0:	280f883a 	mov	r7,r5
  8039c4:	2807883a 	mov	r3,r5
  8039c8:	8011883a 	mov	r8,r16
  8039cc:	20807d26 	beq	r4,r2,803bc4 <__ieee754_sqrt+0x224>
  8039d0:	01408d0e 	bge	zero,r5,803c08 <__ieee754_sqrt+0x268>
  8039d4:	380dd53a 	srai	r6,r7,20
  8039d8:	3000131e 	bne	r6,zero,803a28 <__ieee754_sqrt+0x88>
  8039dc:	1800041e 	bne	r3,zero,8039f0 <__ieee754_sqrt+0x50>
  8039e0:	400ed2fa 	srli	r7,r8,11
  8039e4:	31bffac4 	addi	r6,r6,-21
  8039e8:	4010957a 	slli	r8,r8,21
  8039ec:	383ffc26 	beq	r7,zero,8039e0 <__ieee754_sqrt+0x40>
  8039f0:	3880042c 	andhi	r2,r7,16
  8039f4:	1000991e 	bne	r2,zero,803c5c <__ieee754_sqrt+0x2bc>
  8039f8:	0009883a 	mov	r4,zero
  8039fc:	39cf883a 	add	r7,r7,r7
  803a00:	3880042c 	andhi	r2,r7,16
  803a04:	21000044 	addi	r4,r4,1
  803a08:	103ffc26 	beq	r2,zero,8039fc <__ieee754_sqrt+0x5c>
  803a0c:	00800804 	movi	r2,32
  803a10:	1105c83a 	sub	r2,r2,r4
  803a14:	4086d83a 	srl	r3,r8,r2
  803a18:	4110983a 	sll	r8,r8,r4
  803a1c:	3105c83a 	sub	r2,r6,r4
  803a20:	38ceb03a 	or	r7,r7,r3
  803a24:	11800044 	addi	r6,r2,1
  803a28:	31bf0044 	addi	r6,r6,-1023
  803a2c:	30c0004c 	andi	r3,r6,1
  803a30:	00800434 	movhi	r2,16
  803a34:	10bfffc4 	addi	r2,r2,-1
  803a38:	3884703a 	and	r2,r7,r2
  803a3c:	1807003a 	cmpeq	r3,r3,zero
  803a40:	11000434 	orhi	r4,r2,16
  803a44:	18005426 	beq	r3,zero,803b98 <__ieee754_sqrt+0x1f8>
  803a48:	4004d7fa 	srli	r2,r8,31
  803a4c:	4207883a 	add	r3,r8,r8
  803a50:	02800834 	movhi	r10,32
  803a54:	1105883a 	add	r2,r2,r4
  803a58:	2089883a 	add	r4,r4,r2
  803a5c:	0011883a 	mov	r8,zero
  803a60:	000b883a 	mov	r5,zero
  803a64:	0013883a 	mov	r9,zero
  803a68:	02c00584 	movi	r11,22
  803a6c:	520f883a 	add	r7,r10,r8
  803a70:	1804d7fa 	srli	r2,r3,31
  803a74:	4a400044 	addi	r9,r9,1
  803a78:	18c7883a 	add	r3,r3,r3
  803a7c:	21c00316 	blt	r4,r7,803a8c <__ieee754_sqrt+0xec>
  803a80:	21c9c83a 	sub	r4,r4,r7
  803a84:	2a8b883a 	add	r5,r5,r10
  803a88:	51d1883a 	add	r8,r10,r7
  803a8c:	1105883a 	add	r2,r2,r4
  803a90:	5014d07a 	srli	r10,r10,1
  803a94:	2089883a 	add	r4,r4,r2
  803a98:	4afff41e 	bne	r9,r11,803a6c <__ieee754_sqrt+0xcc>
  803a9c:	02600034 	movhi	r9,32768
  803aa0:	0017883a 	mov	r11,zero
  803aa4:	0019883a 	mov	r12,zero
  803aa8:	0015883a 	mov	r10,zero
  803aac:	4821883a 	mov	r16,r9
  803ab0:	03c00804 	movi	r15,32
  803ab4:	00000806 	br	803ad8 <__ieee754_sqrt+0x138>
  803ab8:	22003426 	beq	r4,r8,803b8c <__ieee754_sqrt+0x1ec>
  803abc:	1804d7fa 	srli	r2,r3,31
  803ac0:	52800044 	addi	r10,r10,1
  803ac4:	18c7883a 	add	r3,r3,r3
  803ac8:	1105883a 	add	r2,r2,r4
  803acc:	2089883a 	add	r4,r4,r2
  803ad0:	4812d07a 	srli	r9,r9,1
  803ad4:	53c01326 	beq	r10,r15,803b24 <__ieee754_sqrt+0x184>
  803ad8:	4acf883a 	add	r7,r9,r11
  803adc:	413ff60e 	bge	r8,r4,803ab8 <__ieee754_sqrt+0x118>
  803ae0:	38a0002c 	andhi	r2,r7,32768
  803ae4:	3a57883a 	add	r11,r7,r9
  803ae8:	14002426 	beq	r2,r16,803b7c <__ieee754_sqrt+0x1dc>
  803aec:	4005883a 	mov	r2,r8
  803af0:	2209c83a 	sub	r4,r4,r8
  803af4:	19c0012e 	bgeu	r3,r7,803afc <__ieee754_sqrt+0x15c>
  803af8:	213fffc4 	addi	r4,r4,-1
  803afc:	19c7c83a 	sub	r3,r3,r7
  803b00:	1011883a 	mov	r8,r2
  803b04:	1804d7fa 	srli	r2,r3,31
  803b08:	52800044 	addi	r10,r10,1
  803b0c:	6259883a 	add	r12,r12,r9
  803b10:	1105883a 	add	r2,r2,r4
  803b14:	18c7883a 	add	r3,r3,r3
  803b18:	2089883a 	add	r4,r4,r2
  803b1c:	4812d07a 	srli	r9,r9,1
  803b20:	53ffed1e 	bne	r10,r15,803ad8 <__ieee754_sqrt+0x138>
  803b24:	20c4b03a 	or	r2,r4,r3
  803b28:	1000201e 	bne	r2,zero,803bac <__ieee754_sqrt+0x20c>
  803b2c:	600ed07a 	srli	r7,r12,1
  803b30:	2880004c 	andi	r2,r5,1
  803b34:	1005003a 	cmpeq	r2,r2,zero
  803b38:	1000011e 	bne	r2,zero,803b40 <__ieee754_sqrt+0x1a0>
  803b3c:	39e00034 	orhi	r7,r7,32768
  803b40:	300dd07a 	srai	r6,r6,1
  803b44:	280bd07a 	srai	r5,r5,1
  803b48:	010ff834 	movhi	r4,16352
  803b4c:	300c953a 	slli	r6,r6,20
  803b50:	290b883a 	add	r5,r5,r4
  803b54:	3821883a 	mov	r16,r7
  803b58:	299d883a 	add	r14,r5,r6
  803b5c:	7023883a 	mov	r17,r14
  803b60:	8005883a 	mov	r2,r16
  803b64:	8807883a 	mov	r3,r17
  803b68:	dfc00217 	ldw	ra,8(sp)
  803b6c:	dc400117 	ldw	r17,4(sp)
  803b70:	dc000017 	ldw	r16,0(sp)
  803b74:	dec00304 	addi	sp,sp,12
  803b78:	f800283a 	ret
  803b7c:	5884703a 	and	r2,r11,r2
  803b80:	103fda1e 	bne	r2,zero,803aec <__ieee754_sqrt+0x14c>
  803b84:	40800044 	addi	r2,r8,1
  803b88:	003fd906 	br	803af0 <__ieee754_sqrt+0x150>
  803b8c:	19ffd42e 	bgeu	r3,r7,803ae0 <__ieee754_sqrt+0x140>
  803b90:	2011883a 	mov	r8,r4
  803b94:	003fc906 	br	803abc <__ieee754_sqrt+0x11c>
  803b98:	4004d7fa 	srli	r2,r8,31
  803b9c:	4211883a 	add	r8,r8,r8
  803ba0:	1105883a 	add	r2,r2,r4
  803ba4:	2089883a 	add	r4,r4,r2
  803ba8:	003fa706 	br	803a48 <__ieee754_sqrt+0xa8>
  803bac:	00bfffc4 	movi	r2,-1
  803bb0:	60802726 	beq	r12,r2,803c50 <__ieee754_sqrt+0x2b0>
  803bb4:	6080004c 	andi	r2,r12,1
  803bb8:	6085883a 	add	r2,r12,r2
  803bbc:	100ed07a 	srli	r7,r2,1
  803bc0:	003fdb06 	br	803b30 <__ieee754_sqrt+0x190>
  803bc4:	8009883a 	mov	r4,r16
  803bc8:	800d883a 	mov	r6,r16
  803bcc:	08047a80 	call	8047a8 <__muldf3>
  803bd0:	180f883a 	mov	r7,r3
  803bd4:	880b883a 	mov	r5,r17
  803bd8:	8009883a 	mov	r4,r16
  803bdc:	100d883a 	mov	r6,r2
  803be0:	08047340 	call	804734 <__adddf3>
  803be4:	1021883a 	mov	r16,r2
  803be8:	1823883a 	mov	r17,r3
  803bec:	8005883a 	mov	r2,r16
  803bf0:	8807883a 	mov	r3,r17
  803bf4:	dfc00217 	ldw	ra,8(sp)
  803bf8:	dc400117 	ldw	r17,4(sp)
  803bfc:	dc000017 	ldw	r16,0(sp)
  803c00:	dec00304 	addi	sp,sp,12
  803c04:	f800283a 	ret
  803c08:	00a00034 	movhi	r2,32768
  803c0c:	10bfffc4 	addi	r2,r2,-1
  803c10:	2884703a 	and	r2,r5,r2
  803c14:	8084b03a 	or	r2,r16,r2
  803c18:	103fd126 	beq	r2,zero,803b60 <__ieee754_sqrt+0x1c0>
  803c1c:	283f6d26 	beq	r5,zero,8039d4 <__ieee754_sqrt+0x34>
  803c20:	280f883a 	mov	r7,r5
  803c24:	8009883a 	mov	r4,r16
  803c28:	800d883a 	mov	r6,r16
  803c2c:	08046b40 	call	8046b4 <__subdf3>
  803c30:	1009883a 	mov	r4,r2
  803c34:	180b883a 	mov	r5,r3
  803c38:	100d883a 	mov	r6,r2
  803c3c:	180f883a 	mov	r7,r3
  803c40:	0804b6c0 	call	804b6c <__divdf3>
  803c44:	1021883a 	mov	r16,r2
  803c48:	1823883a 	mov	r17,r3
  803c4c:	003fc406 	br	803b60 <__ieee754_sqrt+0x1c0>
  803c50:	29400044 	addi	r5,r5,1
  803c54:	000f883a 	mov	r7,zero
  803c58:	003fb506 	br	803b30 <__ieee754_sqrt+0x190>
  803c5c:	0009883a 	mov	r4,zero
  803c60:	00800804 	movi	r2,32
  803c64:	003f6b06 	br	803a14 <__ieee754_sqrt+0x74>

00803c68 <fabs>:
  803c68:	01e00034 	movhi	r7,32768
  803c6c:	39ffffc4 	addi	r7,r7,-1
  803c70:	394e703a 	and	r7,r7,r5
  803c74:	2005883a 	mov	r2,r4
  803c78:	3807883a 	mov	r3,r7
  803c7c:	f800283a 	ret

00803c80 <finite>:
  803c80:	00a00034 	movhi	r2,32768
  803c84:	10bfffc4 	addi	r2,r2,-1
  803c88:	2884703a 	and	r2,r5,r2
  803c8c:	01600434 	movhi	r5,32784
  803c90:	1145883a 	add	r2,r2,r5
  803c94:	1004d7fa 	srli	r2,r2,31
  803c98:	f800283a 	ret

00803c9c <__isnand>:
  803c9c:	200d883a 	mov	r6,r4
  803ca0:	0109c83a 	sub	r4,zero,r4
  803ca4:	2188b03a 	or	r4,r4,r6
  803ca8:	2008d7fa 	srli	r4,r4,31
  803cac:	00a00034 	movhi	r2,32768
  803cb0:	10bfffc4 	addi	r2,r2,-1
  803cb4:	1144703a 	and	r2,r2,r5
  803cb8:	2088b03a 	or	r4,r4,r2
  803cbc:	009ffc34 	movhi	r2,32752
  803cc0:	1105c83a 	sub	r2,r2,r4
  803cc4:	1004d7fa 	srli	r2,r2,31
  803cc8:	f800283a 	ret

00803ccc <matherr>:
  803ccc:	0005883a 	mov	r2,zero
  803cd0:	f800283a 	ret

00803cd4 <nan>:
  803cd4:	015ffe34 	movhi	r5,32760
  803cd8:	0005883a 	mov	r2,zero
  803cdc:	2807883a 	mov	r3,r5
  803ce0:	f800283a 	ret

00803ce4 <rint>:
  803ce4:	2015883a 	mov	r10,r4
  803ce8:	2809d53a 	srai	r4,r5,20
  803cec:	defff904 	addi	sp,sp,-28
  803cf0:	034004c4 	movi	r13,19
  803cf4:	2101ffcc 	andi	r4,r4,2047
  803cf8:	227f0044 	addi	r9,r4,-1023
  803cfc:	dc800415 	stw	r18,16(sp)
  803d00:	dfc00615 	stw	ra,24(sp)
  803d04:	dcc00515 	stw	r19,20(sp)
  803d08:	dc400315 	stw	r17,12(sp)
  803d0c:	dc000215 	stw	r16,8(sp)
  803d10:	2817883a 	mov	r11,r5
  803d14:	500d883a 	mov	r6,r10
  803d18:	2824d7fa 	srli	r18,r5,31
  803d1c:	6a403016 	blt	r13,r9,803de0 <rint+0xfc>
  803d20:	48004916 	blt	r9,zero,803e48 <rint+0x164>
  803d24:	00800434 	movhi	r2,16
  803d28:	10bfffc4 	addi	r2,r2,-1
  803d2c:	1247d83a 	sra	r3,r2,r9
  803d30:	2809883a 	mov	r4,r5
  803d34:	1944703a 	and	r2,r3,r5
  803d38:	5084b03a 	or	r2,r10,r2
  803d3c:	10001f26 	beq	r2,zero,803dbc <rint+0xd8>
  803d40:	180ad07a 	srli	r5,r3,1
  803d44:	5944703a 	and	r2,r11,r5
  803d48:	5084b03a 	or	r2,r10,r2
  803d4c:	10000626 	beq	r2,zero,803d68 <rint+0x84>
  803d50:	4b406626 	beq	r9,r13,803eec <rint+0x208>
  803d54:	00c000b4 	movhi	r3,2
  803d58:	1a47d83a 	sra	r3,r3,r9
  803d5c:	0144303a 	nor	r2,zero,r5
  803d60:	5884703a 	and	r2,r11,r2
  803d64:	10c8b03a 	or	r4,r2,r3
  803d68:	900690fa 	slli	r3,r18,3
  803d6c:	008020b4 	movhi	r2,130
  803d70:	10a8b504 	addi	r2,r2,-23852
  803d74:	200f883a 	mov	r7,r4
  803d78:	1887883a 	add	r3,r3,r2
  803d7c:	1c000017 	ldw	r16,0(r3)
  803d80:	1c400117 	ldw	r17,4(r3)
  803d84:	8009883a 	mov	r4,r16
  803d88:	880b883a 	mov	r5,r17
  803d8c:	08047340 	call	804734 <__adddf3>
  803d90:	d8800015 	stw	r2,0(sp)
  803d94:	d8c00115 	stw	r3,4(sp)
  803d98:	d8800017 	ldw	r2,0(sp)
  803d9c:	d8c00117 	ldw	r3,4(sp)
  803da0:	880f883a 	mov	r7,r17
  803da4:	800d883a 	mov	r6,r16
  803da8:	180b883a 	mov	r5,r3
  803dac:	1009883a 	mov	r4,r2
  803db0:	08046b40 	call	8046b4 <__subdf3>
  803db4:	1015883a 	mov	r10,r2
  803db8:	1817883a 	mov	r11,r3
  803dbc:	5005883a 	mov	r2,r10
  803dc0:	5807883a 	mov	r3,r11
  803dc4:	dfc00617 	ldw	ra,24(sp)
  803dc8:	dcc00517 	ldw	r19,20(sp)
  803dcc:	dc800417 	ldw	r18,16(sp)
  803dd0:	dc400317 	ldw	r17,12(sp)
  803dd4:	dc000217 	ldw	r16,8(sp)
  803dd8:	dec00704 	addi	sp,sp,28
  803ddc:	f800283a 	ret
  803de0:	00800cc4 	movi	r2,51
  803de4:	12400f16 	blt	r2,r9,803e24 <rint+0x140>
  803de8:	213efb44 	addi	r4,r4,-1043
  803dec:	00bfffc4 	movi	r2,-1
  803df0:	1104d83a 	srl	r2,r2,r4
  803df4:	5086703a 	and	r3,r10,r2
  803df8:	183ff026 	beq	r3,zero,803dbc <rint+0xd8>
  803dfc:	100ad07a 	srli	r5,r2,1
  803e00:	5144703a 	and	r2,r10,r5
  803e04:	10000526 	beq	r2,zero,803e1c <rint+0x138>
  803e08:	00d00034 	movhi	r3,16384
  803e0c:	1907d83a 	sra	r3,r3,r4
  803e10:	0144303a 	nor	r2,zero,r5
  803e14:	5084703a 	and	r2,r10,r2
  803e18:	10ccb03a 	or	r6,r2,r3
  803e1c:	5809883a 	mov	r4,r11
  803e20:	003fd106 	br	803d68 <rint+0x84>
  803e24:	00810004 	movi	r2,1024
  803e28:	48bfe41e 	bne	r9,r2,803dbc <rint+0xd8>
  803e2c:	5009883a 	mov	r4,r10
  803e30:	500d883a 	mov	r6,r10
  803e34:	280f883a 	mov	r7,r5
  803e38:	08047340 	call	804734 <__adddf3>
  803e3c:	1015883a 	mov	r10,r2
  803e40:	1817883a 	mov	r11,r3
  803e44:	003fdd06 	br	803dbc <rint+0xd8>
  803e48:	04e00034 	movhi	r19,32768
  803e4c:	9cffffc4 	addi	r19,r19,-1
  803e50:	2cc4703a 	and	r2,r5,r19
  803e54:	5084b03a 	or	r2,r10,r2
  803e58:	103fd826 	beq	r2,zero,803dbc <rint+0xd8>
  803e5c:	00c00434 	movhi	r3,16
  803e60:	18ffffc4 	addi	r3,r3,-1
  803e64:	28c6703a 	and	r3,r5,r3
  803e68:	50c6b03a 	or	r3,r10,r3
  803e6c:	00cdc83a 	sub	r6,zero,r3
  803e70:	900a90fa 	slli	r5,r18,3
  803e74:	1986b03a 	or	r3,r3,r6
  803e78:	010020b4 	movhi	r4,130
  803e7c:	2128b504 	addi	r4,r4,-23852
  803e80:	1806d33a 	srli	r3,r3,12
  803e84:	290b883a 	add	r5,r5,r4
  803e88:	2c000017 	ldw	r16,0(r5)
  803e8c:	2c400117 	ldw	r17,4(r5)
  803e90:	593fffac 	andhi	r4,r11,65534
  803e94:	18c0022c 	andhi	r3,r3,8
  803e98:	1906b03a 	or	r3,r3,r4
  803e9c:	500d883a 	mov	r6,r10
  803ea0:	180f883a 	mov	r7,r3
  803ea4:	8009883a 	mov	r4,r16
  803ea8:	880b883a 	mov	r5,r17
  803eac:	08047340 	call	804734 <__adddf3>
  803eb0:	d8800015 	stw	r2,0(sp)
  803eb4:	d8c00115 	stw	r3,4(sp)
  803eb8:	d8800017 	ldw	r2,0(sp)
  803ebc:	d8c00117 	ldw	r3,4(sp)
  803ec0:	880f883a 	mov	r7,r17
  803ec4:	800d883a 	mov	r6,r16
  803ec8:	180b883a 	mov	r5,r3
  803ecc:	1009883a 	mov	r4,r2
  803ed0:	08046b40 	call	8046b4 <__subdf3>
  803ed4:	901297fa 	slli	r9,r18,31
  803ed8:	98d0703a 	and	r8,r19,r3
  803edc:	1015883a 	mov	r10,r2
  803ee0:	4250b03a 	or	r8,r8,r9
  803ee4:	4017883a 	mov	r11,r8
  803ee8:	003fb406 	br	803dbc <rint+0xd8>
  803eec:	01900034 	movhi	r6,16384
  803ef0:	003f9d06 	br	803d68 <rint+0x84>

00803ef4 <scalbn>:
  803ef4:	2011883a 	mov	r8,r4
  803ef8:	291ffc2c 	andhi	r4,r5,32752
  803efc:	2009d53a 	srai	r4,r4,20
  803f00:	defffd04 	addi	sp,sp,-12
  803f04:	dc000015 	stw	r16,0(sp)
  803f08:	dfc00215 	stw	ra,8(sp)
  803f0c:	dc400115 	stw	r17,4(sp)
  803f10:	2813883a 	mov	r9,r5
  803f14:	2815883a 	mov	r10,r5
  803f18:	3021883a 	mov	r16,r6
  803f1c:	2000281e 	bne	r4,zero,803fc0 <scalbn+0xcc>
  803f20:	00a00034 	movhi	r2,32768
  803f24:	10bfffc4 	addi	r2,r2,-1
  803f28:	2884703a 	and	r2,r5,r2
  803f2c:	4084b03a 	or	r2,r8,r2
  803f30:	10001826 	beq	r2,zero,803f94 <scalbn+0xa0>
  803f34:	0005883a 	mov	r2,zero
  803f38:	00d0d434 	movhi	r3,17232
  803f3c:	4009883a 	mov	r4,r8
  803f40:	100d883a 	mov	r6,r2
  803f44:	180f883a 	mov	r7,r3
  803f48:	08047a80 	call	8047a8 <__muldf3>
  803f4c:	100b883a 	mov	r5,r2
  803f50:	1011883a 	mov	r8,r2
  803f54:	00bffff4 	movhi	r2,65535
  803f58:	108f2c04 	addi	r2,r2,15536
  803f5c:	180d883a 	mov	r6,r3
  803f60:	1813883a 	mov	r9,r3
  803f64:	8080120e 	bge	r16,r2,803fb0 <scalbn+0xbc>
  803f68:	00b0be74 	movhi	r2,49913
  803f6c:	10bcd644 	addi	r2,r2,-3239
  803f70:	00c06974 	movhi	r3,421
  803f74:	18db87c4 	addi	r3,r3,28191
  803f78:	2809883a 	mov	r4,r5
  803f7c:	180f883a 	mov	r7,r3
  803f80:	300b883a 	mov	r5,r6
  803f84:	100d883a 	mov	r6,r2
  803f88:	08047a80 	call	8047a8 <__muldf3>
  803f8c:	1011883a 	mov	r8,r2
  803f90:	1813883a 	mov	r9,r3
  803f94:	4005883a 	mov	r2,r8
  803f98:	4807883a 	mov	r3,r9
  803f9c:	dfc00217 	ldw	ra,8(sp)
  803fa0:	dc400117 	ldw	r17,4(sp)
  803fa4:	dc000017 	ldw	r16,0(sp)
  803fa8:	dec00304 	addi	sp,sp,12
  803fac:	f800283a 	ret
  803fb0:	189ffc2c 	andhi	r2,r3,32752
  803fb4:	1005d53a 	srai	r2,r2,20
  803fb8:	1815883a 	mov	r10,r3
  803fbc:	113ff284 	addi	r4,r2,-54
  803fc0:	0081ffc4 	movi	r2,2047
  803fc4:	20801126 	beq	r4,r2,80400c <scalbn+0x118>
  803fc8:	2409883a 	add	r4,r4,r16
  803fcc:	0081ff84 	movi	r2,2046
  803fd0:	11001c16 	blt	r2,r4,804044 <scalbn+0x150>
  803fd4:	0100290e 	bge	zero,r4,80407c <scalbn+0x188>
  803fd8:	200a953a 	slli	r5,r4,20
  803fdc:	01200434 	movhi	r4,32784
  803fe0:	213fffc4 	addi	r4,r4,-1
  803fe4:	5108703a 	and	r4,r10,r4
  803fe8:	2148b03a 	or	r4,r4,r5
  803fec:	2013883a 	mov	r9,r4
  803ff0:	4005883a 	mov	r2,r8
  803ff4:	4807883a 	mov	r3,r9
  803ff8:	dfc00217 	ldw	ra,8(sp)
  803ffc:	dc400117 	ldw	r17,4(sp)
  804000:	dc000017 	ldw	r16,0(sp)
  804004:	dec00304 	addi	sp,sp,12
  804008:	f800283a 	ret
  80400c:	480f883a 	mov	r7,r9
  804010:	4009883a 	mov	r4,r8
  804014:	480b883a 	mov	r5,r9
  804018:	400d883a 	mov	r6,r8
  80401c:	08047340 	call	804734 <__adddf3>
  804020:	1011883a 	mov	r8,r2
  804024:	1813883a 	mov	r9,r3
  804028:	4005883a 	mov	r2,r8
  80402c:	4807883a 	mov	r3,r9
  804030:	dfc00217 	ldw	ra,8(sp)
  804034:	dc400117 	ldw	r17,4(sp)
  804038:	dc000017 	ldw	r16,0(sp)
  80403c:	dec00304 	addi	sp,sp,12
  804040:	f800283a 	ret
  804044:	04220034 	movhi	r16,34816
  804048:	841d6704 	addi	r16,r16,30108
  80404c:	045f8e34 	movhi	r17,32312
  804050:	8c790f04 	addi	r17,r17,-7108
  804054:	480f883a 	mov	r7,r9
  804058:	400d883a 	mov	r6,r8
  80405c:	8009883a 	mov	r4,r16
  804060:	880b883a 	mov	r5,r17
  804064:	08040d40 	call	8040d4 <copysign>
  804068:	180b883a 	mov	r5,r3
  80406c:	800d883a 	mov	r6,r16
  804070:	880f883a 	mov	r7,r17
  804074:	1009883a 	mov	r4,r2
  804078:	003fc306 	br	803f88 <scalbn+0x94>
  80407c:	00bff284 	movi	r2,-54
  804080:	11000716 	blt	r2,r4,8040a0 <scalbn+0x1ac>
  804084:	00b0d414 	movui	r2,50000
  804088:	143fee16 	blt	r2,r16,804044 <scalbn+0x150>
  80408c:	0430be74 	movhi	r16,49913
  804090:	843cd644 	addi	r16,r16,-3239
  804094:	04406974 	movhi	r17,421
  804098:	8c5b87c4 	addi	r17,r17,28191
  80409c:	003fed06 	br	804054 <scalbn+0x160>
  8040a0:	21000d84 	addi	r4,r4,54
  8040a4:	2008953a 	slli	r4,r4,20
  8040a8:	01e00434 	movhi	r7,32784
  8040ac:	39ffffc4 	addi	r7,r7,-1
  8040b0:	51ce703a 	and	r7,r10,r7
  8040b4:	390eb03a 	or	r7,r7,r4
  8040b8:	024f2434 	movhi	r9,15504
  8040bc:	4009883a 	mov	r4,r8
  8040c0:	0011883a 	mov	r8,zero
  8040c4:	380b883a 	mov	r5,r7
  8040c8:	400d883a 	mov	r6,r8
  8040cc:	480f883a 	mov	r7,r9
  8040d0:	003fad06 	br	803f88 <scalbn+0x94>

008040d4 <copysign>:
  8040d4:	3813883a 	mov	r9,r7
  8040d8:	01e00034 	movhi	r7,32768
  8040dc:	39ffffc4 	addi	r7,r7,-1
  8040e0:	394e703a 	and	r7,r7,r5
  8040e4:	4aa0002c 	andhi	r10,r9,32768
  8040e8:	3a8eb03a 	or	r7,r7,r10
  8040ec:	2005883a 	mov	r2,r4
  8040f0:	3807883a 	mov	r3,r7
  8040f4:	f800283a 	ret

008040f8 <__floatsisf>:
  8040f8:	2006d7fa 	srli	r3,r4,31
  8040fc:	defffa04 	addi	sp,sp,-24
  804100:	008000c4 	movi	r2,3
  804104:	dfc00515 	stw	ra,20(sp)
  804108:	dc000415 	stw	r16,16(sp)
  80410c:	d8800015 	stw	r2,0(sp)
  804110:	d8c00115 	stw	r3,4(sp)
  804114:	2000081e 	bne	r4,zero,804138 <__floatsisf+0x40>
  804118:	00800084 	movi	r2,2
  80411c:	d8800015 	stw	r2,0(sp)
  804120:	d809883a 	mov	r4,sp
  804124:	08055380 	call	805538 <__pack_f>
  804128:	dfc00517 	ldw	ra,20(sp)
  80412c:	dc000417 	ldw	r16,16(sp)
  804130:	dec00604 	addi	sp,sp,24
  804134:	f800283a 	ret
  804138:	00800784 	movi	r2,30
  80413c:	1807003a 	cmpeq	r3,r3,zero
  804140:	d8800215 	stw	r2,8(sp)
  804144:	18000e1e 	bne	r3,zero,804180 <__floatsisf+0x88>
  804148:	00a00034 	movhi	r2,32768
  80414c:	20800e26 	beq	r4,r2,804188 <__floatsisf+0x90>
  804150:	0121c83a 	sub	r16,zero,r4
  804154:	8009883a 	mov	r4,r16
  804158:	dc000315 	stw	r16,12(sp)
  80415c:	08054b80 	call	8054b8 <__clzsi2>
  804160:	117fffc4 	addi	r5,r2,-1
  804164:	017fee0e 	bge	zero,r5,804120 <__floatsisf+0x28>
  804168:	d8800217 	ldw	r2,8(sp)
  80416c:	8146983a 	sll	r3,r16,r5
  804170:	1145c83a 	sub	r2,r2,r5
  804174:	d8c00315 	stw	r3,12(sp)
  804178:	d8800215 	stw	r2,8(sp)
  80417c:	003fe806 	br	804120 <__floatsisf+0x28>
  804180:	2021883a 	mov	r16,r4
  804184:	003ff306 	br	804154 <__floatsisf+0x5c>
  804188:	00b3c034 	movhi	r2,52992
  80418c:	003fe606 	br	804128 <__floatsisf+0x30>

00804190 <__extendsfdf2>:
  804190:	defff904 	addi	sp,sp,-28
  804194:	d9000115 	stw	r4,4(sp)
  804198:	d9400204 	addi	r5,sp,8
  80419c:	d9000104 	addi	r4,sp,4
  8041a0:	dfc00615 	stw	ra,24(sp)
  8041a4:	08056980 	call	805698 <__unpack_f>
  8041a8:	d9c00517 	ldw	r7,20(sp)
  8041ac:	0011883a 	mov	r8,zero
  8041b0:	400697ba 	slli	r3,r8,30
  8041b4:	3812d0ba 	srli	r9,r7,2
  8041b8:	380497ba 	slli	r2,r7,30
  8041bc:	d9000217 	ldw	r4,8(sp)
  8041c0:	d9400317 	ldw	r5,12(sp)
  8041c4:	d9800417 	ldw	r6,16(sp)
  8041c8:	48c6b03a 	or	r3,r9,r3
  8041cc:	100f883a 	mov	r7,r2
  8041d0:	d8c00015 	stw	r3,0(sp)
  8041d4:	08051640 	call	805164 <__make_dp>
  8041d8:	dfc00617 	ldw	ra,24(sp)
  8041dc:	dec00704 	addi	sp,sp,28
  8041e0:	f800283a 	ret

008041e4 <__floatunsisf>:
  8041e4:	defff904 	addi	sp,sp,-28
  8041e8:	dc400515 	stw	r17,20(sp)
  8041ec:	dc000415 	stw	r16,16(sp)
  8041f0:	dfc00615 	stw	ra,24(sp)
  8041f4:	04400784 	movi	r17,30
  8041f8:	2021883a 	mov	r16,r4
  8041fc:	d8000115 	stw	zero,4(sp)
  804200:	2000091e 	bne	r4,zero,804228 <__floatunsisf+0x44>
  804204:	00800084 	movi	r2,2
  804208:	d8800015 	stw	r2,0(sp)
  80420c:	d809883a 	mov	r4,sp
  804210:	08055380 	call	805538 <__pack_f>
  804214:	dfc00617 	ldw	ra,24(sp)
  804218:	dc400517 	ldw	r17,20(sp)
  80421c:	dc000417 	ldw	r16,16(sp)
  804220:	dec00704 	addi	sp,sp,28
  804224:	f800283a 	ret
  804228:	008000c4 	movi	r2,3
  80422c:	d9000315 	stw	r4,12(sp)
  804230:	d8800015 	stw	r2,0(sp)
  804234:	dc400215 	stw	r17,8(sp)
  804238:	08054b80 	call	8054b8 <__clzsi2>
  80423c:	117fffc4 	addi	r5,r2,-1
  804240:	0147c83a 	sub	r3,zero,r5
  804244:	00800044 	movi	r2,1
  804248:	10c4983a 	sll	r2,r2,r3
  80424c:	80c6d83a 	srl	r3,r16,r3
  804250:	8949c83a 	sub	r4,r17,r5
  804254:	10bfffc4 	addi	r2,r2,-1
  804258:	8084703a 	and	r2,r16,r2
  80425c:	1004c03a 	cmpne	r2,r2,zero
  804260:	1886b03a 	or	r3,r3,r2
  804264:	28000c16 	blt	r5,zero,804298 <__floatunsisf+0xb4>
  804268:	8144983a 	sll	r2,r16,r5
  80426c:	8947c83a 	sub	r3,r17,r5
  804270:	283fe626 	beq	r5,zero,80420c <__floatunsisf+0x28>
  804274:	d809883a 	mov	r4,sp
  804278:	d8800315 	stw	r2,12(sp)
  80427c:	d8c00215 	stw	r3,8(sp)
  804280:	08055380 	call	805538 <__pack_f>
  804284:	dfc00617 	ldw	ra,24(sp)
  804288:	dc400517 	ldw	r17,20(sp)
  80428c:	dc000417 	ldw	r16,16(sp)
  804290:	dec00704 	addi	sp,sp,28
  804294:	f800283a 	ret
  804298:	d8c00315 	stw	r3,12(sp)
  80429c:	d9000215 	stw	r4,8(sp)
  8042a0:	003fda06 	br	80420c <__floatunsisf+0x28>

008042a4 <_fpadd_parts>:
  8042a4:	defff804 	addi	sp,sp,-32
  8042a8:	dcc00315 	stw	r19,12(sp)
  8042ac:	2027883a 	mov	r19,r4
  8042b0:	21000017 	ldw	r4,0(r4)
  8042b4:	00c00044 	movi	r3,1
  8042b8:	dd400515 	stw	r21,20(sp)
  8042bc:	dd000415 	stw	r20,16(sp)
  8042c0:	ddc00715 	stw	r23,28(sp)
  8042c4:	dd800615 	stw	r22,24(sp)
  8042c8:	dc800215 	stw	r18,8(sp)
  8042cc:	dc400115 	stw	r17,4(sp)
  8042d0:	dc000015 	stw	r16,0(sp)
  8042d4:	282b883a 	mov	r21,r5
  8042d8:	3029883a 	mov	r20,r6
  8042dc:	1900632e 	bgeu	r3,r4,80446c <_fpadd_parts+0x1c8>
  8042e0:	28800017 	ldw	r2,0(r5)
  8042e4:	1880812e 	bgeu	r3,r2,8044ec <_fpadd_parts+0x248>
  8042e8:	00c00104 	movi	r3,4
  8042ec:	20c0dc26 	beq	r4,r3,804660 <_fpadd_parts+0x3bc>
  8042f0:	10c07e26 	beq	r2,r3,8044ec <_fpadd_parts+0x248>
  8042f4:	00c00084 	movi	r3,2
  8042f8:	10c06726 	beq	r2,r3,804498 <_fpadd_parts+0x1f4>
  8042fc:	20c07b26 	beq	r4,r3,8044ec <_fpadd_parts+0x248>
  804300:	9dc00217 	ldw	r23,8(r19)
  804304:	28c00217 	ldw	r3,8(r5)
  804308:	9c400317 	ldw	r17,12(r19)
  80430c:	2bc00317 	ldw	r15,12(r5)
  804310:	b8cdc83a 	sub	r6,r23,r3
  804314:	9c800417 	ldw	r18,16(r19)
  804318:	2c000417 	ldw	r16,16(r5)
  80431c:	3009883a 	mov	r4,r6
  804320:	30009716 	blt	r6,zero,804580 <_fpadd_parts+0x2dc>
  804324:	00800fc4 	movi	r2,63
  804328:	11806b16 	blt	r2,r6,8044d8 <_fpadd_parts+0x234>
  80432c:	0100a40e 	bge	zero,r4,8045c0 <_fpadd_parts+0x31c>
  804330:	35bff804 	addi	r22,r6,-32
  804334:	b000bc16 	blt	r22,zero,804628 <_fpadd_parts+0x384>
  804338:	8596d83a 	srl	r11,r16,r22
  80433c:	0019883a 	mov	r12,zero
  804340:	0013883a 	mov	r9,zero
  804344:	01000044 	movi	r4,1
  804348:	0015883a 	mov	r10,zero
  80434c:	b000be16 	blt	r22,zero,804648 <_fpadd_parts+0x3a4>
  804350:	2590983a 	sll	r8,r4,r22
  804354:	000f883a 	mov	r7,zero
  804358:	00bfffc4 	movi	r2,-1
  80435c:	3889883a 	add	r4,r7,r2
  804360:	408b883a 	add	r5,r8,r2
  804364:	21cd803a 	cmpltu	r6,r4,r7
  804368:	314b883a 	add	r5,r6,r5
  80436c:	7904703a 	and	r2,r15,r4
  804370:	8146703a 	and	r3,r16,r5
  804374:	10c4b03a 	or	r2,r2,r3
  804378:	10000226 	beq	r2,zero,804384 <_fpadd_parts+0xe0>
  80437c:	02400044 	movi	r9,1
  804380:	0015883a 	mov	r10,zero
  804384:	5a5eb03a 	or	r15,r11,r9
  804388:	62a0b03a 	or	r16,r12,r10
  80438c:	99400117 	ldw	r5,4(r19)
  804390:	a8800117 	ldw	r2,4(r21)
  804394:	28806e26 	beq	r5,r2,804550 <_fpadd_parts+0x2ac>
  804398:	28006626 	beq	r5,zero,804534 <_fpadd_parts+0x290>
  80439c:	7c45c83a 	sub	r2,r15,r17
  8043a0:	7889803a 	cmpltu	r4,r15,r2
  8043a4:	8487c83a 	sub	r3,r16,r18
  8043a8:	1909c83a 	sub	r4,r3,r4
  8043ac:	100d883a 	mov	r6,r2
  8043b0:	200f883a 	mov	r7,r4
  8043b4:	38007716 	blt	r7,zero,804594 <_fpadd_parts+0x2f0>
  8043b8:	a5c00215 	stw	r23,8(r20)
  8043bc:	a1c00415 	stw	r7,16(r20)
  8043c0:	a0000115 	stw	zero,4(r20)
  8043c4:	a1800315 	stw	r6,12(r20)
  8043c8:	a2000317 	ldw	r8,12(r20)
  8043cc:	a2400417 	ldw	r9,16(r20)
  8043d0:	00bfffc4 	movi	r2,-1
  8043d4:	408b883a 	add	r5,r8,r2
  8043d8:	2a09803a 	cmpltu	r4,r5,r8
  8043dc:	488d883a 	add	r6,r9,r2
  8043e0:	01c40034 	movhi	r7,4096
  8043e4:	39ffffc4 	addi	r7,r7,-1
  8043e8:	218d883a 	add	r6,r4,r6
  8043ec:	39801736 	bltu	r7,r6,80444c <_fpadd_parts+0x1a8>
  8043f0:	31c06526 	beq	r6,r7,804588 <_fpadd_parts+0x2e4>
  8043f4:	a3000217 	ldw	r12,8(r20)
  8043f8:	4209883a 	add	r4,r8,r8
  8043fc:	00bfffc4 	movi	r2,-1
  804400:	220f803a 	cmpltu	r7,r4,r8
  804404:	4a4b883a 	add	r5,r9,r9
  804408:	394f883a 	add	r7,r7,r5
  80440c:	2095883a 	add	r10,r4,r2
  804410:	3897883a 	add	r11,r7,r2
  804414:	510d803a 	cmpltu	r6,r10,r4
  804418:	6099883a 	add	r12,r12,r2
  80441c:	32d7883a 	add	r11,r6,r11
  804420:	00840034 	movhi	r2,4096
  804424:	10bfffc4 	addi	r2,r2,-1
  804428:	2011883a 	mov	r8,r4
  80442c:	3813883a 	mov	r9,r7
  804430:	a1000315 	stw	r4,12(r20)
  804434:	a1c00415 	stw	r7,16(r20)
  804438:	a3000215 	stw	r12,8(r20)
  80443c:	12c00336 	bltu	r2,r11,80444c <_fpadd_parts+0x1a8>
  804440:	58bfed1e 	bne	r11,r2,8043f8 <_fpadd_parts+0x154>
  804444:	00bfff84 	movi	r2,-2
  804448:	12bfeb2e 	bgeu	r2,r10,8043f8 <_fpadd_parts+0x154>
  80444c:	a2800417 	ldw	r10,16(r20)
  804450:	008000c4 	movi	r2,3
  804454:	00c80034 	movhi	r3,8192
  804458:	18ffffc4 	addi	r3,r3,-1
  80445c:	a2400317 	ldw	r9,12(r20)
  804460:	a0800015 	stw	r2,0(r20)
  804464:	1a802336 	bltu	r3,r10,8044f4 <_fpadd_parts+0x250>
  804468:	a027883a 	mov	r19,r20
  80446c:	9805883a 	mov	r2,r19
  804470:	ddc00717 	ldw	r23,28(sp)
  804474:	dd800617 	ldw	r22,24(sp)
  804478:	dd400517 	ldw	r21,20(sp)
  80447c:	dd000417 	ldw	r20,16(sp)
  804480:	dcc00317 	ldw	r19,12(sp)
  804484:	dc800217 	ldw	r18,8(sp)
  804488:	dc400117 	ldw	r17,4(sp)
  80448c:	dc000017 	ldw	r16,0(sp)
  804490:	dec00804 	addi	sp,sp,32
  804494:	f800283a 	ret
  804498:	20fff41e 	bne	r4,r3,80446c <_fpadd_parts+0x1c8>
  80449c:	31000015 	stw	r4,0(r6)
  8044a0:	98800117 	ldw	r2,4(r19)
  8044a4:	30800115 	stw	r2,4(r6)
  8044a8:	98c00217 	ldw	r3,8(r19)
  8044ac:	30c00215 	stw	r3,8(r6)
  8044b0:	98800317 	ldw	r2,12(r19)
  8044b4:	30800315 	stw	r2,12(r6)
  8044b8:	98c00417 	ldw	r3,16(r19)
  8044bc:	30c00415 	stw	r3,16(r6)
  8044c0:	98800117 	ldw	r2,4(r19)
  8044c4:	28c00117 	ldw	r3,4(r5)
  8044c8:	3027883a 	mov	r19,r6
  8044cc:	10c4703a 	and	r2,r2,r3
  8044d0:	30800115 	stw	r2,4(r6)
  8044d4:	003fe506 	br	80446c <_fpadd_parts+0x1c8>
  8044d8:	1dc02616 	blt	r3,r23,804574 <_fpadd_parts+0x2d0>
  8044dc:	0023883a 	mov	r17,zero
  8044e0:	182f883a 	mov	r23,r3
  8044e4:	0025883a 	mov	r18,zero
  8044e8:	003fa806 	br	80438c <_fpadd_parts+0xe8>
  8044ec:	a827883a 	mov	r19,r21
  8044f0:	003fde06 	br	80446c <_fpadd_parts+0x1c8>
  8044f4:	01800044 	movi	r6,1
  8044f8:	500497fa 	slli	r2,r10,31
  8044fc:	4808d07a 	srli	r4,r9,1
  804500:	518ad83a 	srl	r5,r10,r6
  804504:	a2000217 	ldw	r8,8(r20)
  804508:	1108b03a 	or	r4,r2,r4
  80450c:	0007883a 	mov	r3,zero
  804510:	4984703a 	and	r2,r9,r6
  804514:	208cb03a 	or	r6,r4,r2
  804518:	28ceb03a 	or	r7,r5,r3
  80451c:	42000044 	addi	r8,r8,1
  804520:	a027883a 	mov	r19,r20
  804524:	a1c00415 	stw	r7,16(r20)
  804528:	a2000215 	stw	r8,8(r20)
  80452c:	a1800315 	stw	r6,12(r20)
  804530:	003fce06 	br	80446c <_fpadd_parts+0x1c8>
  804534:	8bc5c83a 	sub	r2,r17,r15
  804538:	8889803a 	cmpltu	r4,r17,r2
  80453c:	9407c83a 	sub	r3,r18,r16
  804540:	1909c83a 	sub	r4,r3,r4
  804544:	100d883a 	mov	r6,r2
  804548:	200f883a 	mov	r7,r4
  80454c:	003f9906 	br	8043b4 <_fpadd_parts+0x110>
  804550:	7c45883a 	add	r2,r15,r17
  804554:	13c9803a 	cmpltu	r4,r2,r15
  804558:	8487883a 	add	r3,r16,r18
  80455c:	20c9883a 	add	r4,r4,r3
  804560:	a1400115 	stw	r5,4(r20)
  804564:	a5c00215 	stw	r23,8(r20)
  804568:	a0800315 	stw	r2,12(r20)
  80456c:	a1000415 	stw	r4,16(r20)
  804570:	003fb606 	br	80444c <_fpadd_parts+0x1a8>
  804574:	001f883a 	mov	r15,zero
  804578:	0021883a 	mov	r16,zero
  80457c:	003f8306 	br	80438c <_fpadd_parts+0xe8>
  804580:	018dc83a 	sub	r6,zero,r6
  804584:	003f6706 	br	804324 <_fpadd_parts+0x80>
  804588:	00bfff84 	movi	r2,-2
  80458c:	117faf36 	bltu	r2,r5,80444c <_fpadd_parts+0x1a8>
  804590:	003f9806 	br	8043f4 <_fpadd_parts+0x150>
  804594:	0005883a 	mov	r2,zero
  804598:	1189c83a 	sub	r4,r2,r6
  80459c:	1105803a 	cmpltu	r2,r2,r4
  8045a0:	01cbc83a 	sub	r5,zero,r7
  8045a4:	2885c83a 	sub	r2,r5,r2
  8045a8:	01800044 	movi	r6,1
  8045ac:	a1800115 	stw	r6,4(r20)
  8045b0:	a5c00215 	stw	r23,8(r20)
  8045b4:	a1000315 	stw	r4,12(r20)
  8045b8:	a0800415 	stw	r2,16(r20)
  8045bc:	003f8206 	br	8043c8 <_fpadd_parts+0x124>
  8045c0:	203f7226 	beq	r4,zero,80438c <_fpadd_parts+0xe8>
  8045c4:	35bff804 	addi	r22,r6,-32
  8045c8:	b9af883a 	add	r23,r23,r6
  8045cc:	b0003116 	blt	r22,zero,804694 <_fpadd_parts+0x3f0>
  8045d0:	959ad83a 	srl	r13,r18,r22
  8045d4:	001d883a 	mov	r14,zero
  8045d8:	000f883a 	mov	r7,zero
  8045dc:	01000044 	movi	r4,1
  8045e0:	0011883a 	mov	r8,zero
  8045e4:	b0002516 	blt	r22,zero,80467c <_fpadd_parts+0x3d8>
  8045e8:	2594983a 	sll	r10,r4,r22
  8045ec:	0013883a 	mov	r9,zero
  8045f0:	00bfffc4 	movi	r2,-1
  8045f4:	4889883a 	add	r4,r9,r2
  8045f8:	508b883a 	add	r5,r10,r2
  8045fc:	224d803a 	cmpltu	r6,r4,r9
  804600:	314b883a 	add	r5,r6,r5
  804604:	8904703a 	and	r2,r17,r4
  804608:	9146703a 	and	r3,r18,r5
  80460c:	10c4b03a 	or	r2,r2,r3
  804610:	10000226 	beq	r2,zero,80461c <_fpadd_parts+0x378>
  804614:	01c00044 	movi	r7,1
  804618:	0011883a 	mov	r8,zero
  80461c:	69e2b03a 	or	r17,r13,r7
  804620:	7224b03a 	or	r18,r14,r8
  804624:	003f5906 	br	80438c <_fpadd_parts+0xe8>
  804628:	8407883a 	add	r3,r16,r16
  80462c:	008007c4 	movi	r2,31
  804630:	1185c83a 	sub	r2,r2,r6
  804634:	1886983a 	sll	r3,r3,r2
  804638:	7996d83a 	srl	r11,r15,r6
  80463c:	8198d83a 	srl	r12,r16,r6
  804640:	1ad6b03a 	or	r11,r3,r11
  804644:	003f3e06 	br	804340 <_fpadd_parts+0x9c>
  804648:	2006d07a 	srli	r3,r4,1
  80464c:	008007c4 	movi	r2,31
  804650:	1185c83a 	sub	r2,r2,r6
  804654:	1890d83a 	srl	r8,r3,r2
  804658:	218e983a 	sll	r7,r4,r6
  80465c:	003f3e06 	br	804358 <_fpadd_parts+0xb4>
  804660:	113f821e 	bne	r2,r4,80446c <_fpadd_parts+0x1c8>
  804664:	28c00117 	ldw	r3,4(r5)
  804668:	98800117 	ldw	r2,4(r19)
  80466c:	10ff7f26 	beq	r2,r3,80446c <_fpadd_parts+0x1c8>
  804670:	04c020b4 	movhi	r19,130
  804674:	9ce8b904 	addi	r19,r19,-23836
  804678:	003f7c06 	br	80446c <_fpadd_parts+0x1c8>
  80467c:	2006d07a 	srli	r3,r4,1
  804680:	008007c4 	movi	r2,31
  804684:	1185c83a 	sub	r2,r2,r6
  804688:	1894d83a 	srl	r10,r3,r2
  80468c:	2192983a 	sll	r9,r4,r6
  804690:	003fd706 	br	8045f0 <_fpadd_parts+0x34c>
  804694:	9487883a 	add	r3,r18,r18
  804698:	008007c4 	movi	r2,31
  80469c:	1185c83a 	sub	r2,r2,r6
  8046a0:	1886983a 	sll	r3,r3,r2
  8046a4:	899ad83a 	srl	r13,r17,r6
  8046a8:	919cd83a 	srl	r14,r18,r6
  8046ac:	1b5ab03a 	or	r13,r3,r13
  8046b0:	003fc906 	br	8045d8 <_fpadd_parts+0x334>

008046b4 <__subdf3>:
  8046b4:	deffea04 	addi	sp,sp,-88
  8046b8:	dcc01415 	stw	r19,80(sp)
  8046bc:	dcc00404 	addi	r19,sp,16
  8046c0:	2011883a 	mov	r8,r4
  8046c4:	2813883a 	mov	r9,r5
  8046c8:	dc401315 	stw	r17,76(sp)
  8046cc:	d809883a 	mov	r4,sp
  8046d0:	980b883a 	mov	r5,r19
  8046d4:	dc400904 	addi	r17,sp,36
  8046d8:	dfc01515 	stw	ra,84(sp)
  8046dc:	da400115 	stw	r9,4(sp)
  8046e0:	d9c00315 	stw	r7,12(sp)
  8046e4:	da000015 	stw	r8,0(sp)
  8046e8:	d9800215 	stw	r6,8(sp)
  8046ec:	0805aa00 	call	805aa0 <__unpack_d>
  8046f0:	d9000204 	addi	r4,sp,8
  8046f4:	880b883a 	mov	r5,r17
  8046f8:	0805aa00 	call	805aa0 <__unpack_d>
  8046fc:	d8800a17 	ldw	r2,40(sp)
  804700:	880b883a 	mov	r5,r17
  804704:	9809883a 	mov	r4,r19
  804708:	d9800e04 	addi	r6,sp,56
  80470c:	1080005c 	xori	r2,r2,1
  804710:	d8800a15 	stw	r2,40(sp)
  804714:	08042a40 	call	8042a4 <_fpadd_parts>
  804718:	1009883a 	mov	r4,r2
  80471c:	080578c0 	call	80578c <__pack_d>
  804720:	dfc01517 	ldw	ra,84(sp)
  804724:	dcc01417 	ldw	r19,80(sp)
  804728:	dc401317 	ldw	r17,76(sp)
  80472c:	dec01604 	addi	sp,sp,88
  804730:	f800283a 	ret

00804734 <__adddf3>:
  804734:	deffea04 	addi	sp,sp,-88
  804738:	dcc01415 	stw	r19,80(sp)
  80473c:	dcc00404 	addi	r19,sp,16
  804740:	2011883a 	mov	r8,r4
  804744:	2813883a 	mov	r9,r5
  804748:	dc401315 	stw	r17,76(sp)
  80474c:	d809883a 	mov	r4,sp
  804750:	980b883a 	mov	r5,r19
  804754:	dc400904 	addi	r17,sp,36
  804758:	dfc01515 	stw	ra,84(sp)
  80475c:	da400115 	stw	r9,4(sp)
  804760:	d9c00315 	stw	r7,12(sp)
  804764:	da000015 	stw	r8,0(sp)
  804768:	d9800215 	stw	r6,8(sp)
  80476c:	0805aa00 	call	805aa0 <__unpack_d>
  804770:	d9000204 	addi	r4,sp,8
  804774:	880b883a 	mov	r5,r17
  804778:	0805aa00 	call	805aa0 <__unpack_d>
  80477c:	d9800e04 	addi	r6,sp,56
  804780:	9809883a 	mov	r4,r19
  804784:	880b883a 	mov	r5,r17
  804788:	08042a40 	call	8042a4 <_fpadd_parts>
  80478c:	1009883a 	mov	r4,r2
  804790:	080578c0 	call	80578c <__pack_d>
  804794:	dfc01517 	ldw	ra,84(sp)
  804798:	dcc01417 	ldw	r19,80(sp)
  80479c:	dc401317 	ldw	r17,76(sp)
  8047a0:	dec01604 	addi	sp,sp,88
  8047a4:	f800283a 	ret

008047a8 <__muldf3>:
  8047a8:	deffe004 	addi	sp,sp,-128
  8047ac:	dc401815 	stw	r17,96(sp)
  8047b0:	dc400404 	addi	r17,sp,16
  8047b4:	2011883a 	mov	r8,r4
  8047b8:	2813883a 	mov	r9,r5
  8047bc:	dc001715 	stw	r16,92(sp)
  8047c0:	d809883a 	mov	r4,sp
  8047c4:	880b883a 	mov	r5,r17
  8047c8:	dc000904 	addi	r16,sp,36
  8047cc:	dfc01f15 	stw	ra,124(sp)
  8047d0:	da400115 	stw	r9,4(sp)
  8047d4:	d9c00315 	stw	r7,12(sp)
  8047d8:	da000015 	stw	r8,0(sp)
  8047dc:	d9800215 	stw	r6,8(sp)
  8047e0:	ddc01e15 	stw	r23,120(sp)
  8047e4:	dd801d15 	stw	r22,116(sp)
  8047e8:	dd401c15 	stw	r21,112(sp)
  8047ec:	dd001b15 	stw	r20,108(sp)
  8047f0:	dcc01a15 	stw	r19,104(sp)
  8047f4:	dc801915 	stw	r18,100(sp)
  8047f8:	0805aa00 	call	805aa0 <__unpack_d>
  8047fc:	d9000204 	addi	r4,sp,8
  804800:	800b883a 	mov	r5,r16
  804804:	0805aa00 	call	805aa0 <__unpack_d>
  804808:	d9000417 	ldw	r4,16(sp)
  80480c:	00800044 	movi	r2,1
  804810:	1100102e 	bgeu	r2,r4,804854 <__muldf3+0xac>
  804814:	d8c00917 	ldw	r3,36(sp)
  804818:	10c0062e 	bgeu	r2,r3,804834 <__muldf3+0x8c>
  80481c:	00800104 	movi	r2,4
  804820:	20800a26 	beq	r4,r2,80484c <__muldf3+0xa4>
  804824:	1880cc26 	beq	r3,r2,804b58 <__muldf3+0x3b0>
  804828:	00800084 	movi	r2,2
  80482c:	20800926 	beq	r4,r2,804854 <__muldf3+0xac>
  804830:	1880191e 	bne	r3,r2,804898 <__muldf3+0xf0>
  804834:	d8c00a17 	ldw	r3,40(sp)
  804838:	d8800517 	ldw	r2,20(sp)
  80483c:	8009883a 	mov	r4,r16
  804840:	10c4c03a 	cmpne	r2,r2,r3
  804844:	d8800a15 	stw	r2,40(sp)
  804848:	00000706 	br	804868 <__muldf3+0xc0>
  80484c:	00800084 	movi	r2,2
  804850:	1880c326 	beq	r3,r2,804b60 <__muldf3+0x3b8>
  804854:	d8800517 	ldw	r2,20(sp)
  804858:	d8c00a17 	ldw	r3,40(sp)
  80485c:	8809883a 	mov	r4,r17
  804860:	10c4c03a 	cmpne	r2,r2,r3
  804864:	d8800515 	stw	r2,20(sp)
  804868:	080578c0 	call	80578c <__pack_d>
  80486c:	dfc01f17 	ldw	ra,124(sp)
  804870:	ddc01e17 	ldw	r23,120(sp)
  804874:	dd801d17 	ldw	r22,116(sp)
  804878:	dd401c17 	ldw	r21,112(sp)
  80487c:	dd001b17 	ldw	r20,108(sp)
  804880:	dcc01a17 	ldw	r19,104(sp)
  804884:	dc801917 	ldw	r18,100(sp)
  804888:	dc401817 	ldw	r17,96(sp)
  80488c:	dc001717 	ldw	r16,92(sp)
  804890:	dec02004 	addi	sp,sp,128
  804894:	f800283a 	ret
  804898:	dd800717 	ldw	r22,28(sp)
  80489c:	dc800c17 	ldw	r18,48(sp)
  8048a0:	002b883a 	mov	r21,zero
  8048a4:	0023883a 	mov	r17,zero
  8048a8:	a80b883a 	mov	r5,r21
  8048ac:	b00d883a 	mov	r6,r22
  8048b0:	880f883a 	mov	r7,r17
  8048b4:	ddc00817 	ldw	r23,32(sp)
  8048b8:	dcc00d17 	ldw	r19,52(sp)
  8048bc:	9009883a 	mov	r4,r18
  8048c0:	08053940 	call	805394 <__muldi3>
  8048c4:	001b883a 	mov	r13,zero
  8048c8:	680f883a 	mov	r7,r13
  8048cc:	b009883a 	mov	r4,r22
  8048d0:	000b883a 	mov	r5,zero
  8048d4:	980d883a 	mov	r6,r19
  8048d8:	b82d883a 	mov	r22,r23
  8048dc:	002f883a 	mov	r23,zero
  8048e0:	db401615 	stw	r13,88(sp)
  8048e4:	d8801315 	stw	r2,76(sp)
  8048e8:	d8c01415 	stw	r3,80(sp)
  8048ec:	dcc01515 	stw	r19,84(sp)
  8048f0:	08053940 	call	805394 <__muldi3>
  8048f4:	b00d883a 	mov	r6,r22
  8048f8:	000b883a 	mov	r5,zero
  8048fc:	9009883a 	mov	r4,r18
  804900:	b80f883a 	mov	r7,r23
  804904:	1021883a 	mov	r16,r2
  804908:	1823883a 	mov	r17,r3
  80490c:	08053940 	call	805394 <__muldi3>
  804910:	8085883a 	add	r2,r16,r2
  804914:	140d803a 	cmpltu	r6,r2,r16
  804918:	88c7883a 	add	r3,r17,r3
  80491c:	30cd883a 	add	r6,r6,r3
  804920:	1029883a 	mov	r20,r2
  804924:	302b883a 	mov	r21,r6
  804928:	da801317 	ldw	r10,76(sp)
  80492c:	dac01417 	ldw	r11,80(sp)
  804930:	db001517 	ldw	r12,84(sp)
  804934:	db401617 	ldw	r13,88(sp)
  804938:	3440612e 	bgeu	r6,r17,804ac0 <__muldf3+0x318>
  80493c:	0009883a 	mov	r4,zero
  804940:	5105883a 	add	r2,r10,r4
  804944:	128d803a 	cmpltu	r6,r2,r10
  804948:	5d07883a 	add	r3,r11,r20
  80494c:	30cd883a 	add	r6,r6,r3
  804950:	0021883a 	mov	r16,zero
  804954:	04400044 	movi	r17,1
  804958:	1025883a 	mov	r18,r2
  80495c:	3027883a 	mov	r19,r6
  804960:	32c06236 	bltu	r6,r11,804aec <__muldf3+0x344>
  804964:	59807a26 	beq	r11,r6,804b50 <__muldf3+0x3a8>
  804968:	680b883a 	mov	r5,r13
  80496c:	b80f883a 	mov	r7,r23
  804970:	6009883a 	mov	r4,r12
  804974:	b00d883a 	mov	r6,r22
  804978:	08053940 	call	805394 <__muldi3>
  80497c:	1009883a 	mov	r4,r2
  804980:	000f883a 	mov	r7,zero
  804984:	1545883a 	add	r2,r2,r21
  804988:	1111803a 	cmpltu	r8,r2,r4
  80498c:	19c7883a 	add	r3,r3,r7
  804990:	40c7883a 	add	r3,r8,r3
  804994:	88cb883a 	add	r5,r17,r3
  804998:	d8c00617 	ldw	r3,24(sp)
  80499c:	8089883a 	add	r4,r16,r2
  8049a0:	d8800b17 	ldw	r2,44(sp)
  8049a4:	18c00104 	addi	r3,r3,4
  8049a8:	240d803a 	cmpltu	r6,r4,r16
  8049ac:	10c7883a 	add	r3,r2,r3
  8049b0:	2013883a 	mov	r9,r4
  8049b4:	d8800a17 	ldw	r2,40(sp)
  8049b8:	d9000517 	ldw	r4,20(sp)
  8049bc:	314d883a 	add	r6,r6,r5
  8049c0:	3015883a 	mov	r10,r6
  8049c4:	2088c03a 	cmpne	r4,r4,r2
  8049c8:	00880034 	movhi	r2,8192
  8049cc:	10bfffc4 	addi	r2,r2,-1
  8049d0:	d9000f15 	stw	r4,60(sp)
  8049d4:	d8c01015 	stw	r3,64(sp)
  8049d8:	1180162e 	bgeu	r2,r6,804a34 <__muldf3+0x28c>
  8049dc:	1811883a 	mov	r8,r3
  8049e0:	101f883a 	mov	r15,r2
  8049e4:	980497fa 	slli	r2,r19,31
  8049e8:	9016d07a 	srli	r11,r18,1
  8049ec:	500697fa 	slli	r3,r10,31
  8049f0:	480cd07a 	srli	r6,r9,1
  8049f4:	500ed07a 	srli	r7,r10,1
  8049f8:	12d6b03a 	or	r11,r2,r11
  8049fc:	00800044 	movi	r2,1
  804a00:	198cb03a 	or	r6,r3,r6
  804a04:	4888703a 	and	r4,r9,r2
  804a08:	9818d07a 	srli	r12,r19,1
  804a0c:	001b883a 	mov	r13,zero
  804a10:	03a00034 	movhi	r14,32768
  804a14:	3013883a 	mov	r9,r6
  804a18:	3815883a 	mov	r10,r7
  804a1c:	4091883a 	add	r8,r8,r2
  804a20:	20000226 	beq	r4,zero,804a2c <__muldf3+0x284>
  804a24:	5b64b03a 	or	r18,r11,r13
  804a28:	63a6b03a 	or	r19,r12,r14
  804a2c:	7abfed36 	bltu	r15,r10,8049e4 <__muldf3+0x23c>
  804a30:	da001015 	stw	r8,64(sp)
  804a34:	00840034 	movhi	r2,4096
  804a38:	10bfffc4 	addi	r2,r2,-1
  804a3c:	12801436 	bltu	r2,r10,804a90 <__muldf3+0x2e8>
  804a40:	da001017 	ldw	r8,64(sp)
  804a44:	101f883a 	mov	r15,r2
  804a48:	4a45883a 	add	r2,r9,r9
  804a4c:	124d803a 	cmpltu	r6,r2,r9
  804a50:	5287883a 	add	r3,r10,r10
  804a54:	9497883a 	add	r11,r18,r18
  804a58:	5c8f803a 	cmpltu	r7,r11,r18
  804a5c:	9cd9883a 	add	r12,r19,r19
  804a60:	01000044 	movi	r4,1
  804a64:	30cd883a 	add	r6,r6,r3
  804a68:	3b0f883a 	add	r7,r7,r12
  804a6c:	423fffc4 	addi	r8,r8,-1
  804a70:	1013883a 	mov	r9,r2
  804a74:	3015883a 	mov	r10,r6
  804a78:	111ab03a 	or	r13,r2,r4
  804a7c:	98003016 	blt	r19,zero,804b40 <__muldf3+0x398>
  804a80:	5825883a 	mov	r18,r11
  804a84:	3827883a 	mov	r19,r7
  804a88:	7abfef2e 	bgeu	r15,r10,804a48 <__muldf3+0x2a0>
  804a8c:	da001015 	stw	r8,64(sp)
  804a90:	00803fc4 	movi	r2,255
  804a94:	488e703a 	and	r7,r9,r2
  804a98:	00802004 	movi	r2,128
  804a9c:	0007883a 	mov	r3,zero
  804aa0:	0011883a 	mov	r8,zero
  804aa4:	38801826 	beq	r7,r2,804b08 <__muldf3+0x360>
  804aa8:	008000c4 	movi	r2,3
  804aac:	d9000e04 	addi	r4,sp,56
  804ab0:	da801215 	stw	r10,72(sp)
  804ab4:	d8800e15 	stw	r2,56(sp)
  804ab8:	da401115 	stw	r9,68(sp)
  804abc:	003f6a06 	br	804868 <__muldf3+0xc0>
  804ac0:	89802126 	beq	r17,r6,804b48 <__muldf3+0x3a0>
  804ac4:	0009883a 	mov	r4,zero
  804ac8:	5105883a 	add	r2,r10,r4
  804acc:	128d803a 	cmpltu	r6,r2,r10
  804ad0:	5d07883a 	add	r3,r11,r20
  804ad4:	30cd883a 	add	r6,r6,r3
  804ad8:	0021883a 	mov	r16,zero
  804adc:	0023883a 	mov	r17,zero
  804ae0:	1025883a 	mov	r18,r2
  804ae4:	3027883a 	mov	r19,r6
  804ae8:	32ff9e2e 	bgeu	r6,r11,804964 <__muldf3+0x1bc>
  804aec:	00800044 	movi	r2,1
  804af0:	8089883a 	add	r4,r16,r2
  804af4:	240d803a 	cmpltu	r6,r4,r16
  804af8:	344d883a 	add	r6,r6,r17
  804afc:	2021883a 	mov	r16,r4
  804b00:	3023883a 	mov	r17,r6
  804b04:	003f9806 	br	804968 <__muldf3+0x1c0>
  804b08:	403fe71e 	bne	r8,zero,804aa8 <__muldf3+0x300>
  804b0c:	01004004 	movi	r4,256
  804b10:	4904703a 	and	r2,r9,r4
  804b14:	10c4b03a 	or	r2,r2,r3
  804b18:	103fe31e 	bne	r2,zero,804aa8 <__muldf3+0x300>
  804b1c:	94c4b03a 	or	r2,r18,r19
  804b20:	103fe126 	beq	r2,zero,804aa8 <__muldf3+0x300>
  804b24:	49c5883a 	add	r2,r9,r7
  804b28:	1251803a 	cmpltu	r8,r2,r9
  804b2c:	4291883a 	add	r8,r8,r10
  804b30:	013fc004 	movi	r4,-256
  804b34:	1112703a 	and	r9,r2,r4
  804b38:	4015883a 	mov	r10,r8
  804b3c:	003fda06 	br	804aa8 <__muldf3+0x300>
  804b40:	6813883a 	mov	r9,r13
  804b44:	003fce06 	br	804a80 <__muldf3+0x2d8>
  804b48:	143f7c36 	bltu	r2,r16,80493c <__muldf3+0x194>
  804b4c:	003fdd06 	br	804ac4 <__muldf3+0x31c>
  804b50:	12bf852e 	bgeu	r2,r10,804968 <__muldf3+0x1c0>
  804b54:	003fe506 	br	804aec <__muldf3+0x344>
  804b58:	00800084 	movi	r2,2
  804b5c:	20bf351e 	bne	r4,r2,804834 <__muldf3+0x8c>
  804b60:	010020b4 	movhi	r4,130
  804b64:	2128b904 	addi	r4,r4,-23836
  804b68:	003f3f06 	br	804868 <__muldf3+0xc0>

00804b6c <__divdf3>:
  804b6c:	deffed04 	addi	sp,sp,-76
  804b70:	dcc01115 	stw	r19,68(sp)
  804b74:	dcc00404 	addi	r19,sp,16
  804b78:	2011883a 	mov	r8,r4
  804b7c:	2813883a 	mov	r9,r5
  804b80:	dc000e15 	stw	r16,56(sp)
  804b84:	d809883a 	mov	r4,sp
  804b88:	980b883a 	mov	r5,r19
  804b8c:	dc000904 	addi	r16,sp,36
  804b90:	dfc01215 	stw	ra,72(sp)
  804b94:	da400115 	stw	r9,4(sp)
  804b98:	d9c00315 	stw	r7,12(sp)
  804b9c:	da000015 	stw	r8,0(sp)
  804ba0:	d9800215 	stw	r6,8(sp)
  804ba4:	dc801015 	stw	r18,64(sp)
  804ba8:	dc400f15 	stw	r17,60(sp)
  804bac:	0805aa00 	call	805aa0 <__unpack_d>
  804bb0:	d9000204 	addi	r4,sp,8
  804bb4:	800b883a 	mov	r5,r16
  804bb8:	0805aa00 	call	805aa0 <__unpack_d>
  804bbc:	d9000417 	ldw	r4,16(sp)
  804bc0:	00800044 	movi	r2,1
  804bc4:	11000b2e 	bgeu	r2,r4,804bf4 <__divdf3+0x88>
  804bc8:	d9400917 	ldw	r5,36(sp)
  804bcc:	1140762e 	bgeu	r2,r5,804da8 <__divdf3+0x23c>
  804bd0:	d8800517 	ldw	r2,20(sp)
  804bd4:	d8c00a17 	ldw	r3,40(sp)
  804bd8:	01800104 	movi	r6,4
  804bdc:	10c4f03a 	xor	r2,r2,r3
  804be0:	d8800515 	stw	r2,20(sp)
  804be4:	21800226 	beq	r4,r6,804bf0 <__divdf3+0x84>
  804be8:	00800084 	movi	r2,2
  804bec:	2080141e 	bne	r4,r2,804c40 <__divdf3+0xd4>
  804bf0:	29000926 	beq	r5,r4,804c18 <__divdf3+0xac>
  804bf4:	9809883a 	mov	r4,r19
  804bf8:	080578c0 	call	80578c <__pack_d>
  804bfc:	dfc01217 	ldw	ra,72(sp)
  804c00:	dcc01117 	ldw	r19,68(sp)
  804c04:	dc801017 	ldw	r18,64(sp)
  804c08:	dc400f17 	ldw	r17,60(sp)
  804c0c:	dc000e17 	ldw	r16,56(sp)
  804c10:	dec01304 	addi	sp,sp,76
  804c14:	f800283a 	ret
  804c18:	010020b4 	movhi	r4,130
  804c1c:	2128b904 	addi	r4,r4,-23836
  804c20:	080578c0 	call	80578c <__pack_d>
  804c24:	dfc01217 	ldw	ra,72(sp)
  804c28:	dcc01117 	ldw	r19,68(sp)
  804c2c:	dc801017 	ldw	r18,64(sp)
  804c30:	dc400f17 	ldw	r17,60(sp)
  804c34:	dc000e17 	ldw	r16,56(sp)
  804c38:	dec01304 	addi	sp,sp,76
  804c3c:	f800283a 	ret
  804c40:	29805b26 	beq	r5,r6,804db0 <__divdf3+0x244>
  804c44:	28802d26 	beq	r5,r2,804cfc <__divdf3+0x190>
  804c48:	d8c00617 	ldw	r3,24(sp)
  804c4c:	d8800b17 	ldw	r2,44(sp)
  804c50:	d9c00817 	ldw	r7,32(sp)
  804c54:	dc400d17 	ldw	r17,52(sp)
  804c58:	188bc83a 	sub	r5,r3,r2
  804c5c:	d9800717 	ldw	r6,28(sp)
  804c60:	dc000c17 	ldw	r16,48(sp)
  804c64:	d9400615 	stw	r5,24(sp)
  804c68:	3c403836 	bltu	r7,r17,804d4c <__divdf3+0x1e0>
  804c6c:	89c03626 	beq	r17,r7,804d48 <__divdf3+0x1dc>
  804c70:	0015883a 	mov	r10,zero
  804c74:	001d883a 	mov	r14,zero
  804c78:	02c40034 	movhi	r11,4096
  804c7c:	001f883a 	mov	r15,zero
  804c80:	003f883a 	mov	ra,zero
  804c84:	04800f44 	movi	r18,61
  804c88:	00000f06 	br	804cc8 <__divdf3+0x15c>
  804c8c:	601d883a 	mov	r14,r12
  804c90:	681f883a 	mov	r15,r13
  804c94:	400d883a 	mov	r6,r8
  804c98:	100f883a 	mov	r7,r2
  804c9c:	3191883a 	add	r8,r6,r6
  804ca0:	5808d07a 	srli	r4,r11,1
  804ca4:	4185803a 	cmpltu	r2,r8,r6
  804ca8:	39d3883a 	add	r9,r7,r7
  804cac:	28c6b03a 	or	r3,r5,r3
  804cb0:	1245883a 	add	r2,r2,r9
  804cb4:	1815883a 	mov	r10,r3
  804cb8:	2017883a 	mov	r11,r4
  804cbc:	400d883a 	mov	r6,r8
  804cc0:	100f883a 	mov	r7,r2
  804cc4:	fc801726 	beq	ra,r18,804d24 <__divdf3+0x1b8>
  804cc8:	580a97fa 	slli	r5,r11,31
  804ccc:	5006d07a 	srli	r3,r10,1
  804cd0:	ffc00044 	addi	ra,ra,1
  804cd4:	3c7ff136 	bltu	r7,r17,804c9c <__divdf3+0x130>
  804cd8:	3411c83a 	sub	r8,r6,r16
  804cdc:	3205803a 	cmpltu	r2,r6,r8
  804ce0:	3c53c83a 	sub	r9,r7,r17
  804ce4:	7298b03a 	or	r12,r14,r10
  804ce8:	7adab03a 	or	r13,r15,r11
  804cec:	4885c83a 	sub	r2,r9,r2
  804cf0:	89ffe61e 	bne	r17,r7,804c8c <__divdf3+0x120>
  804cf4:	343fe936 	bltu	r6,r16,804c9c <__divdf3+0x130>
  804cf8:	003fe406 	br	804c8c <__divdf3+0x120>
  804cfc:	9809883a 	mov	r4,r19
  804d00:	d9800415 	stw	r6,16(sp)
  804d04:	080578c0 	call	80578c <__pack_d>
  804d08:	dfc01217 	ldw	ra,72(sp)
  804d0c:	dcc01117 	ldw	r19,68(sp)
  804d10:	dc801017 	ldw	r18,64(sp)
  804d14:	dc400f17 	ldw	r17,60(sp)
  804d18:	dc000e17 	ldw	r16,56(sp)
  804d1c:	dec01304 	addi	sp,sp,76
  804d20:	f800283a 	ret
  804d24:	00803fc4 	movi	r2,255
  804d28:	7090703a 	and	r8,r14,r2
  804d2c:	00802004 	movi	r2,128
  804d30:	0007883a 	mov	r3,zero
  804d34:	0013883a 	mov	r9,zero
  804d38:	40800d26 	beq	r8,r2,804d70 <__divdf3+0x204>
  804d3c:	dbc00815 	stw	r15,32(sp)
  804d40:	db800715 	stw	r14,28(sp)
  804d44:	003fab06 	br	804bf4 <__divdf3+0x88>
  804d48:	343fc92e 	bgeu	r6,r16,804c70 <__divdf3+0x104>
  804d4c:	3185883a 	add	r2,r6,r6
  804d50:	1189803a 	cmpltu	r4,r2,r6
  804d54:	39c7883a 	add	r3,r7,r7
  804d58:	20c9883a 	add	r4,r4,r3
  804d5c:	297fffc4 	addi	r5,r5,-1
  804d60:	100d883a 	mov	r6,r2
  804d64:	200f883a 	mov	r7,r4
  804d68:	d9400615 	stw	r5,24(sp)
  804d6c:	003fc006 	br	804c70 <__divdf3+0x104>
  804d70:	483ff21e 	bne	r9,zero,804d3c <__divdf3+0x1d0>
  804d74:	01004004 	movi	r4,256
  804d78:	7104703a 	and	r2,r14,r4
  804d7c:	10c4b03a 	or	r2,r2,r3
  804d80:	103fee1e 	bne	r2,zero,804d3c <__divdf3+0x1d0>
  804d84:	31c4b03a 	or	r2,r6,r7
  804d88:	103fec26 	beq	r2,zero,804d3c <__divdf3+0x1d0>
  804d8c:	7205883a 	add	r2,r14,r8
  804d90:	1391803a 	cmpltu	r8,r2,r14
  804d94:	43d1883a 	add	r8,r8,r15
  804d98:	013fc004 	movi	r4,-256
  804d9c:	111c703a 	and	r14,r2,r4
  804da0:	401f883a 	mov	r15,r8
  804da4:	003fe506 	br	804d3c <__divdf3+0x1d0>
  804da8:	8009883a 	mov	r4,r16
  804dac:	003f9206 	br	804bf8 <__divdf3+0x8c>
  804db0:	9809883a 	mov	r4,r19
  804db4:	d8000715 	stw	zero,28(sp)
  804db8:	d8000815 	stw	zero,32(sp)
  804dbc:	d8000615 	stw	zero,24(sp)
  804dc0:	003f8d06 	br	804bf8 <__divdf3+0x8c>

00804dc4 <__eqdf2>:
  804dc4:	deffef04 	addi	sp,sp,-68
  804dc8:	dc400f15 	stw	r17,60(sp)
  804dcc:	dc400404 	addi	r17,sp,16
  804dd0:	2005883a 	mov	r2,r4
  804dd4:	2807883a 	mov	r3,r5
  804dd8:	dc000e15 	stw	r16,56(sp)
  804ddc:	d809883a 	mov	r4,sp
  804de0:	880b883a 	mov	r5,r17
  804de4:	dc000904 	addi	r16,sp,36
  804de8:	d8c00115 	stw	r3,4(sp)
  804dec:	d8800015 	stw	r2,0(sp)
  804df0:	d9800215 	stw	r6,8(sp)
  804df4:	dfc01015 	stw	ra,64(sp)
  804df8:	d9c00315 	stw	r7,12(sp)
  804dfc:	0805aa00 	call	805aa0 <__unpack_d>
  804e00:	d9000204 	addi	r4,sp,8
  804e04:	800b883a 	mov	r5,r16
  804e08:	0805aa00 	call	805aa0 <__unpack_d>
  804e0c:	d8800417 	ldw	r2,16(sp)
  804e10:	00c00044 	movi	r3,1
  804e14:	180d883a 	mov	r6,r3
  804e18:	1880062e 	bgeu	r3,r2,804e34 <__eqdf2+0x70>
  804e1c:	d8800917 	ldw	r2,36(sp)
  804e20:	8809883a 	mov	r4,r17
  804e24:	800b883a 	mov	r5,r16
  804e28:	1880022e 	bgeu	r3,r2,804e34 <__eqdf2+0x70>
  804e2c:	0805bd80 	call	805bd8 <__fpcmp_parts_d>
  804e30:	100d883a 	mov	r6,r2
  804e34:	3005883a 	mov	r2,r6
  804e38:	dfc01017 	ldw	ra,64(sp)
  804e3c:	dc400f17 	ldw	r17,60(sp)
  804e40:	dc000e17 	ldw	r16,56(sp)
  804e44:	dec01104 	addi	sp,sp,68
  804e48:	f800283a 	ret

00804e4c <__nedf2>:
  804e4c:	deffef04 	addi	sp,sp,-68
  804e50:	dc400f15 	stw	r17,60(sp)
  804e54:	dc400404 	addi	r17,sp,16
  804e58:	2005883a 	mov	r2,r4
  804e5c:	2807883a 	mov	r3,r5
  804e60:	dc000e15 	stw	r16,56(sp)
  804e64:	d809883a 	mov	r4,sp
  804e68:	880b883a 	mov	r5,r17
  804e6c:	dc000904 	addi	r16,sp,36
  804e70:	d8c00115 	stw	r3,4(sp)
  804e74:	d8800015 	stw	r2,0(sp)
  804e78:	d9800215 	stw	r6,8(sp)
  804e7c:	dfc01015 	stw	ra,64(sp)
  804e80:	d9c00315 	stw	r7,12(sp)
  804e84:	0805aa00 	call	805aa0 <__unpack_d>
  804e88:	d9000204 	addi	r4,sp,8
  804e8c:	800b883a 	mov	r5,r16
  804e90:	0805aa00 	call	805aa0 <__unpack_d>
  804e94:	d8800417 	ldw	r2,16(sp)
  804e98:	00c00044 	movi	r3,1
  804e9c:	180d883a 	mov	r6,r3
  804ea0:	1880062e 	bgeu	r3,r2,804ebc <__nedf2+0x70>
  804ea4:	d8800917 	ldw	r2,36(sp)
  804ea8:	8809883a 	mov	r4,r17
  804eac:	800b883a 	mov	r5,r16
  804eb0:	1880022e 	bgeu	r3,r2,804ebc <__nedf2+0x70>
  804eb4:	0805bd80 	call	805bd8 <__fpcmp_parts_d>
  804eb8:	100d883a 	mov	r6,r2
  804ebc:	3005883a 	mov	r2,r6
  804ec0:	dfc01017 	ldw	ra,64(sp)
  804ec4:	dc400f17 	ldw	r17,60(sp)
  804ec8:	dc000e17 	ldw	r16,56(sp)
  804ecc:	dec01104 	addi	sp,sp,68
  804ed0:	f800283a 	ret

00804ed4 <__gtdf2>:
  804ed4:	deffef04 	addi	sp,sp,-68
  804ed8:	dc400f15 	stw	r17,60(sp)
  804edc:	dc400404 	addi	r17,sp,16
  804ee0:	2005883a 	mov	r2,r4
  804ee4:	2807883a 	mov	r3,r5
  804ee8:	dc000e15 	stw	r16,56(sp)
  804eec:	d809883a 	mov	r4,sp
  804ef0:	880b883a 	mov	r5,r17
  804ef4:	dc000904 	addi	r16,sp,36
  804ef8:	d8c00115 	stw	r3,4(sp)
  804efc:	d8800015 	stw	r2,0(sp)
  804f00:	d9800215 	stw	r6,8(sp)
  804f04:	dfc01015 	stw	ra,64(sp)
  804f08:	d9c00315 	stw	r7,12(sp)
  804f0c:	0805aa00 	call	805aa0 <__unpack_d>
  804f10:	d9000204 	addi	r4,sp,8
  804f14:	800b883a 	mov	r5,r16
  804f18:	0805aa00 	call	805aa0 <__unpack_d>
  804f1c:	d8800417 	ldw	r2,16(sp)
  804f20:	00c00044 	movi	r3,1
  804f24:	01bfffc4 	movi	r6,-1
  804f28:	1880062e 	bgeu	r3,r2,804f44 <__gtdf2+0x70>
  804f2c:	d8800917 	ldw	r2,36(sp)
  804f30:	8809883a 	mov	r4,r17
  804f34:	800b883a 	mov	r5,r16
  804f38:	1880022e 	bgeu	r3,r2,804f44 <__gtdf2+0x70>
  804f3c:	0805bd80 	call	805bd8 <__fpcmp_parts_d>
  804f40:	100d883a 	mov	r6,r2
  804f44:	3005883a 	mov	r2,r6
  804f48:	dfc01017 	ldw	ra,64(sp)
  804f4c:	dc400f17 	ldw	r17,60(sp)
  804f50:	dc000e17 	ldw	r16,56(sp)
  804f54:	dec01104 	addi	sp,sp,68
  804f58:	f800283a 	ret

00804f5c <__ltdf2>:
  804f5c:	deffef04 	addi	sp,sp,-68
  804f60:	dc400f15 	stw	r17,60(sp)
  804f64:	dc400404 	addi	r17,sp,16
  804f68:	2005883a 	mov	r2,r4
  804f6c:	2807883a 	mov	r3,r5
  804f70:	dc000e15 	stw	r16,56(sp)
  804f74:	d809883a 	mov	r4,sp
  804f78:	880b883a 	mov	r5,r17
  804f7c:	dc000904 	addi	r16,sp,36
  804f80:	d8c00115 	stw	r3,4(sp)
  804f84:	d8800015 	stw	r2,0(sp)
  804f88:	d9800215 	stw	r6,8(sp)
  804f8c:	dfc01015 	stw	ra,64(sp)
  804f90:	d9c00315 	stw	r7,12(sp)
  804f94:	0805aa00 	call	805aa0 <__unpack_d>
  804f98:	d9000204 	addi	r4,sp,8
  804f9c:	800b883a 	mov	r5,r16
  804fa0:	0805aa00 	call	805aa0 <__unpack_d>
  804fa4:	d8800417 	ldw	r2,16(sp)
  804fa8:	00c00044 	movi	r3,1
  804fac:	180d883a 	mov	r6,r3
  804fb0:	1880062e 	bgeu	r3,r2,804fcc <__ltdf2+0x70>
  804fb4:	d8800917 	ldw	r2,36(sp)
  804fb8:	8809883a 	mov	r4,r17
  804fbc:	800b883a 	mov	r5,r16
  804fc0:	1880022e 	bgeu	r3,r2,804fcc <__ltdf2+0x70>
  804fc4:	0805bd80 	call	805bd8 <__fpcmp_parts_d>
  804fc8:	100d883a 	mov	r6,r2
  804fcc:	3005883a 	mov	r2,r6
  804fd0:	dfc01017 	ldw	ra,64(sp)
  804fd4:	dc400f17 	ldw	r17,60(sp)
  804fd8:	dc000e17 	ldw	r16,56(sp)
  804fdc:	dec01104 	addi	sp,sp,68
  804fe0:	f800283a 	ret

00804fe4 <__ledf2>:
  804fe4:	deffef04 	addi	sp,sp,-68
  804fe8:	dc400f15 	stw	r17,60(sp)
  804fec:	dc400404 	addi	r17,sp,16
  804ff0:	2005883a 	mov	r2,r4
  804ff4:	2807883a 	mov	r3,r5
  804ff8:	dc000e15 	stw	r16,56(sp)
  804ffc:	d809883a 	mov	r4,sp
  805000:	880b883a 	mov	r5,r17
  805004:	dc000904 	addi	r16,sp,36
  805008:	d8c00115 	stw	r3,4(sp)
  80500c:	d8800015 	stw	r2,0(sp)
  805010:	d9800215 	stw	r6,8(sp)
  805014:	dfc01015 	stw	ra,64(sp)
  805018:	d9c00315 	stw	r7,12(sp)
  80501c:	0805aa00 	call	805aa0 <__unpack_d>
  805020:	d9000204 	addi	r4,sp,8
  805024:	800b883a 	mov	r5,r16
  805028:	0805aa00 	call	805aa0 <__unpack_d>
  80502c:	d8800417 	ldw	r2,16(sp)
  805030:	00c00044 	movi	r3,1
  805034:	180d883a 	mov	r6,r3
  805038:	1880062e 	bgeu	r3,r2,805054 <__ledf2+0x70>
  80503c:	d8800917 	ldw	r2,36(sp)
  805040:	8809883a 	mov	r4,r17
  805044:	800b883a 	mov	r5,r16
  805048:	1880022e 	bgeu	r3,r2,805054 <__ledf2+0x70>
  80504c:	0805bd80 	call	805bd8 <__fpcmp_parts_d>
  805050:	100d883a 	mov	r6,r2
  805054:	3005883a 	mov	r2,r6
  805058:	dfc01017 	ldw	ra,64(sp)
  80505c:	dc400f17 	ldw	r17,60(sp)
  805060:	dc000e17 	ldw	r16,56(sp)
  805064:	dec01104 	addi	sp,sp,68
  805068:	f800283a 	ret

0080506c <__floatsidf>:
  80506c:	2006d7fa 	srli	r3,r4,31
  805070:	defff604 	addi	sp,sp,-40
  805074:	008000c4 	movi	r2,3
  805078:	dfc00915 	stw	ra,36(sp)
  80507c:	dcc00815 	stw	r19,32(sp)
  805080:	dc800715 	stw	r18,28(sp)
  805084:	dc400615 	stw	r17,24(sp)
  805088:	dc000515 	stw	r16,20(sp)
  80508c:	d8800015 	stw	r2,0(sp)
  805090:	d8c00115 	stw	r3,4(sp)
  805094:	20000f1e 	bne	r4,zero,8050d4 <__floatsidf+0x68>
  805098:	00800084 	movi	r2,2
  80509c:	d8800015 	stw	r2,0(sp)
  8050a0:	d809883a 	mov	r4,sp
  8050a4:	080578c0 	call	80578c <__pack_d>
  8050a8:	1009883a 	mov	r4,r2
  8050ac:	180b883a 	mov	r5,r3
  8050b0:	2005883a 	mov	r2,r4
  8050b4:	2807883a 	mov	r3,r5
  8050b8:	dfc00917 	ldw	ra,36(sp)
  8050bc:	dcc00817 	ldw	r19,32(sp)
  8050c0:	dc800717 	ldw	r18,28(sp)
  8050c4:	dc400617 	ldw	r17,24(sp)
  8050c8:	dc000517 	ldw	r16,20(sp)
  8050cc:	dec00a04 	addi	sp,sp,40
  8050d0:	f800283a 	ret
  8050d4:	00800f04 	movi	r2,60
  8050d8:	1807003a 	cmpeq	r3,r3,zero
  8050dc:	d8800215 	stw	r2,8(sp)
  8050e0:	18001126 	beq	r3,zero,805128 <__floatsidf+0xbc>
  8050e4:	0027883a 	mov	r19,zero
  8050e8:	2025883a 	mov	r18,r4
  8050ec:	d9000315 	stw	r4,12(sp)
  8050f0:	dcc00415 	stw	r19,16(sp)
  8050f4:	08054b80 	call	8054b8 <__clzsi2>
  8050f8:	11000744 	addi	r4,r2,29
  8050fc:	013fe80e 	bge	zero,r4,8050a0 <__floatsidf+0x34>
  805100:	10bfff44 	addi	r2,r2,-3
  805104:	10000c16 	blt	r2,zero,805138 <__floatsidf+0xcc>
  805108:	90a2983a 	sll	r17,r18,r2
  80510c:	0021883a 	mov	r16,zero
  805110:	d8800217 	ldw	r2,8(sp)
  805114:	dc400415 	stw	r17,16(sp)
  805118:	dc000315 	stw	r16,12(sp)
  80511c:	1105c83a 	sub	r2,r2,r4
  805120:	d8800215 	stw	r2,8(sp)
  805124:	003fde06 	br	8050a0 <__floatsidf+0x34>
  805128:	00a00034 	movhi	r2,32768
  80512c:	20800a26 	beq	r4,r2,805158 <__floatsidf+0xec>
  805130:	0109c83a 	sub	r4,zero,r4
  805134:	003feb06 	br	8050e4 <__floatsidf+0x78>
  805138:	9006d07a 	srli	r3,r18,1
  80513c:	008007c4 	movi	r2,31
  805140:	1105c83a 	sub	r2,r2,r4
  805144:	1886d83a 	srl	r3,r3,r2
  805148:	9922983a 	sll	r17,r19,r4
  80514c:	9120983a 	sll	r16,r18,r4
  805150:	1c62b03a 	or	r17,r3,r17
  805154:	003fee06 	br	805110 <__floatsidf+0xa4>
  805158:	0009883a 	mov	r4,zero
  80515c:	01707834 	movhi	r5,49632
  805160:	003fd306 	br	8050b0 <__floatsidf+0x44>

00805164 <__make_dp>:
  805164:	defff904 	addi	sp,sp,-28
  805168:	d8c00717 	ldw	r3,28(sp)
  80516c:	d9000015 	stw	r4,0(sp)
  805170:	d809883a 	mov	r4,sp
  805174:	dfc00515 	stw	ra,20(sp)
  805178:	d9c00615 	stw	r7,24(sp)
  80517c:	d9400115 	stw	r5,4(sp)
  805180:	d9800215 	stw	r6,8(sp)
  805184:	d8c00415 	stw	r3,16(sp)
  805188:	d9c00315 	stw	r7,12(sp)
  80518c:	080578c0 	call	80578c <__pack_d>
  805190:	dfc00517 	ldw	ra,20(sp)
  805194:	dec00704 	addi	sp,sp,28
  805198:	f800283a 	ret

0080519c <__truncdfsf2>:
  80519c:	defff804 	addi	sp,sp,-32
  8051a0:	2005883a 	mov	r2,r4
  8051a4:	2807883a 	mov	r3,r5
  8051a8:	d809883a 	mov	r4,sp
  8051ac:	d9400204 	addi	r5,sp,8
  8051b0:	d8c00115 	stw	r3,4(sp)
  8051b4:	d8800015 	stw	r2,0(sp)
  8051b8:	dfc00715 	stw	ra,28(sp)
  8051bc:	0805aa00 	call	805aa0 <__unpack_d>
  8051c0:	d9c00517 	ldw	r7,20(sp)
  8051c4:	da000617 	ldw	r8,24(sp)
  8051c8:	02d00034 	movhi	r11,16384
  8051cc:	5affffc4 	addi	r11,r11,-1
  8051d0:	3812d7ba 	srli	r9,r7,30
  8051d4:	401a90ba 	slli	r13,r8,2
  8051d8:	3ac4703a 	and	r2,r7,r11
  8051dc:	0007883a 	mov	r3,zero
  8051e0:	6a52b03a 	or	r9,r13,r9
  8051e4:	10c4b03a 	or	r2,r2,r3
  8051e8:	d9000217 	ldw	r4,8(sp)
  8051ec:	d9400317 	ldw	r5,12(sp)
  8051f0:	d9800417 	ldw	r6,16(sp)
  8051f4:	480f883a 	mov	r7,r9
  8051f8:	10000126 	beq	r2,zero,805200 <__truncdfsf2+0x64>
  8051fc:	49c00054 	ori	r7,r9,1
  805200:	08057600 	call	805760 <__make_fp>
  805204:	dfc00717 	ldw	ra,28(sp)
  805208:	dec00804 	addi	sp,sp,32
  80520c:	f800283a 	ret

00805210 <udivmodsi4>:
  805210:	29001b2e 	bgeu	r5,r4,805280 <udivmodsi4+0x70>
  805214:	28001a16 	blt	r5,zero,805280 <udivmodsi4+0x70>
  805218:	00800044 	movi	r2,1
  80521c:	0007883a 	mov	r3,zero
  805220:	01c007c4 	movi	r7,31
  805224:	00000306 	br	805234 <udivmodsi4+0x24>
  805228:	19c01326 	beq	r3,r7,805278 <udivmodsi4+0x68>
  80522c:	18c00044 	addi	r3,r3,1
  805230:	28000416 	blt	r5,zero,805244 <udivmodsi4+0x34>
  805234:	294b883a 	add	r5,r5,r5
  805238:	1085883a 	add	r2,r2,r2
  80523c:	293ffa36 	bltu	r5,r4,805228 <udivmodsi4+0x18>
  805240:	10000d26 	beq	r2,zero,805278 <udivmodsi4+0x68>
  805244:	0007883a 	mov	r3,zero
  805248:	21400236 	bltu	r4,r5,805254 <udivmodsi4+0x44>
  80524c:	2149c83a 	sub	r4,r4,r5
  805250:	1886b03a 	or	r3,r3,r2
  805254:	1004d07a 	srli	r2,r2,1
  805258:	280ad07a 	srli	r5,r5,1
  80525c:	103ffa1e 	bne	r2,zero,805248 <udivmodsi4+0x38>
  805260:	30000226 	beq	r6,zero,80526c <udivmodsi4+0x5c>
  805264:	2005883a 	mov	r2,r4
  805268:	f800283a 	ret
  80526c:	1809883a 	mov	r4,r3
  805270:	2005883a 	mov	r2,r4
  805274:	f800283a 	ret
  805278:	0007883a 	mov	r3,zero
  80527c:	003ff806 	br	805260 <udivmodsi4+0x50>
  805280:	00800044 	movi	r2,1
  805284:	0007883a 	mov	r3,zero
  805288:	003fef06 	br	805248 <udivmodsi4+0x38>

0080528c <__divsi3>:
  80528c:	defffe04 	addi	sp,sp,-8
  805290:	dc000015 	stw	r16,0(sp)
  805294:	dfc00115 	stw	ra,4(sp)
  805298:	0021883a 	mov	r16,zero
  80529c:	20000c16 	blt	r4,zero,8052d0 <__divsi3+0x44>
  8052a0:	000d883a 	mov	r6,zero
  8052a4:	28000e16 	blt	r5,zero,8052e0 <__divsi3+0x54>
  8052a8:	08052100 	call	805210 <udivmodsi4>
  8052ac:	1007883a 	mov	r3,r2
  8052b0:	8005003a 	cmpeq	r2,r16,zero
  8052b4:	1000011e 	bne	r2,zero,8052bc <__divsi3+0x30>
  8052b8:	00c7c83a 	sub	r3,zero,r3
  8052bc:	1805883a 	mov	r2,r3
  8052c0:	dfc00117 	ldw	ra,4(sp)
  8052c4:	dc000017 	ldw	r16,0(sp)
  8052c8:	dec00204 	addi	sp,sp,8
  8052cc:	f800283a 	ret
  8052d0:	0109c83a 	sub	r4,zero,r4
  8052d4:	04000044 	movi	r16,1
  8052d8:	000d883a 	mov	r6,zero
  8052dc:	283ff20e 	bge	r5,zero,8052a8 <__divsi3+0x1c>
  8052e0:	014bc83a 	sub	r5,zero,r5
  8052e4:	8021003a 	cmpeq	r16,r16,zero
  8052e8:	003fef06 	br	8052a8 <__divsi3+0x1c>

008052ec <__modsi3>:
  8052ec:	deffff04 	addi	sp,sp,-4
  8052f0:	dfc00015 	stw	ra,0(sp)
  8052f4:	01800044 	movi	r6,1
  8052f8:	2807883a 	mov	r3,r5
  8052fc:	20000416 	blt	r4,zero,805310 <__modsi3+0x24>
  805300:	28000c16 	blt	r5,zero,805334 <__modsi3+0x48>
  805304:	dfc00017 	ldw	ra,0(sp)
  805308:	dec00104 	addi	sp,sp,4
  80530c:	08052101 	jmpi	805210 <udivmodsi4>
  805310:	0109c83a 	sub	r4,zero,r4
  805314:	28000b16 	blt	r5,zero,805344 <__modsi3+0x58>
  805318:	180b883a 	mov	r5,r3
  80531c:	01800044 	movi	r6,1
  805320:	08052100 	call	805210 <udivmodsi4>
  805324:	0085c83a 	sub	r2,zero,r2
  805328:	dfc00017 	ldw	ra,0(sp)
  80532c:	dec00104 	addi	sp,sp,4
  805330:	f800283a 	ret
  805334:	014bc83a 	sub	r5,zero,r5
  805338:	dfc00017 	ldw	ra,0(sp)
  80533c:	dec00104 	addi	sp,sp,4
  805340:	08052101 	jmpi	805210 <udivmodsi4>
  805344:	0147c83a 	sub	r3,zero,r5
  805348:	003ff306 	br	805318 <__modsi3+0x2c>

0080534c <__udivsi3>:
  80534c:	000d883a 	mov	r6,zero
  805350:	08052101 	jmpi	805210 <udivmodsi4>

00805354 <__umodsi3>:
  805354:	01800044 	movi	r6,1
  805358:	08052101 	jmpi	805210 <udivmodsi4>

0080535c <__mulsi3>:
  80535c:	20000a26 	beq	r4,zero,805388 <__mulsi3+0x2c>
  805360:	0007883a 	mov	r3,zero
  805364:	2080004c 	andi	r2,r4,1
  805368:	1005003a 	cmpeq	r2,r2,zero
  80536c:	2008d07a 	srli	r4,r4,1
  805370:	1000011e 	bne	r2,zero,805378 <__mulsi3+0x1c>
  805374:	1947883a 	add	r3,r3,r5
  805378:	294b883a 	add	r5,r5,r5
  80537c:	203ff91e 	bne	r4,zero,805364 <__mulsi3+0x8>
  805380:	1805883a 	mov	r2,r3
  805384:	f800283a 	ret
  805388:	0007883a 	mov	r3,zero
  80538c:	1805883a 	mov	r2,r3
  805390:	f800283a 	ret

00805394 <__muldi3>:
  805394:	defff204 	addi	sp,sp,-56
  805398:	df000c15 	stw	fp,48(sp)
  80539c:	3038d43a 	srli	fp,r6,16
  8053a0:	dd000815 	stw	r20,32(sp)
  8053a4:	dc400515 	stw	r17,20(sp)
  8053a8:	2028d43a 	srli	r20,r4,16
  8053ac:	247fffcc 	andi	r17,r4,65535
  8053b0:	dc000415 	stw	r16,16(sp)
  8053b4:	343fffcc 	andi	r16,r6,65535
  8053b8:	dcc00715 	stw	r19,28(sp)
  8053bc:	d9000015 	stw	r4,0(sp)
  8053c0:	2827883a 	mov	r19,r5
  8053c4:	8809883a 	mov	r4,r17
  8053c8:	d9400115 	stw	r5,4(sp)
  8053cc:	800b883a 	mov	r5,r16
  8053d0:	d9800215 	stw	r6,8(sp)
  8053d4:	dfc00d15 	stw	ra,52(sp)
  8053d8:	d9c00315 	stw	r7,12(sp)
  8053dc:	dd800a15 	stw	r22,40(sp)
  8053e0:	dd400915 	stw	r21,36(sp)
  8053e4:	302d883a 	mov	r22,r6
  8053e8:	ddc00b15 	stw	r23,44(sp)
  8053ec:	dc800615 	stw	r18,24(sp)
  8053f0:	080535c0 	call	80535c <__mulsi3>
  8053f4:	8809883a 	mov	r4,r17
  8053f8:	e00b883a 	mov	r5,fp
  8053fc:	102b883a 	mov	r21,r2
  805400:	080535c0 	call	80535c <__mulsi3>
  805404:	800b883a 	mov	r5,r16
  805408:	a009883a 	mov	r4,r20
  80540c:	1023883a 	mov	r17,r2
  805410:	080535c0 	call	80535c <__mulsi3>
  805414:	a009883a 	mov	r4,r20
  805418:	e00b883a 	mov	r5,fp
  80541c:	1021883a 	mov	r16,r2
  805420:	080535c0 	call	80535c <__mulsi3>
  805424:	a8ffffcc 	andi	r3,r21,65535
  805428:	a82ad43a 	srli	r21,r21,16
  80542c:	8c23883a 	add	r17,r17,r16
  805430:	1011883a 	mov	r8,r2
  805434:	ac6b883a 	add	r21,r21,r17
  805438:	a804943a 	slli	r2,r21,16
  80543c:	b009883a 	mov	r4,r22
  805440:	980b883a 	mov	r5,r19
  805444:	10c7883a 	add	r3,r2,r3
  805448:	a812d43a 	srli	r9,r21,16
  80544c:	180d883a 	mov	r6,r3
  805450:	ac00022e 	bgeu	r21,r16,80545c <__muldi3+0xc8>
  805454:	00800074 	movhi	r2,1
  805458:	4091883a 	add	r8,r8,r2
  80545c:	4267883a 	add	r19,r8,r9
  805460:	302d883a 	mov	r22,r6
  805464:	080535c0 	call	80535c <__mulsi3>
  805468:	d9400317 	ldw	r5,12(sp)
  80546c:	d9000017 	ldw	r4,0(sp)
  805470:	1023883a 	mov	r17,r2
  805474:	080535c0 	call	80535c <__mulsi3>
  805478:	14cb883a 	add	r5,r2,r19
  80547c:	894b883a 	add	r5,r17,r5
  805480:	b005883a 	mov	r2,r22
  805484:	2807883a 	mov	r3,r5
  805488:	dfc00d17 	ldw	ra,52(sp)
  80548c:	df000c17 	ldw	fp,48(sp)
  805490:	ddc00b17 	ldw	r23,44(sp)
  805494:	dd800a17 	ldw	r22,40(sp)
  805498:	dd400917 	ldw	r21,36(sp)
  80549c:	dd000817 	ldw	r20,32(sp)
  8054a0:	dcc00717 	ldw	r19,28(sp)
  8054a4:	dc800617 	ldw	r18,24(sp)
  8054a8:	dc400517 	ldw	r17,20(sp)
  8054ac:	dc000417 	ldw	r16,16(sp)
  8054b0:	dec00e04 	addi	sp,sp,56
  8054b4:	f800283a 	ret

008054b8 <__clzsi2>:
  8054b8:	00bfffd4 	movui	r2,65535
  8054bc:	11000e36 	bltu	r2,r4,8054f8 <__clzsi2+0x40>
  8054c0:	00803fc4 	movi	r2,255
  8054c4:	01400204 	movi	r5,8
  8054c8:	0007883a 	mov	r3,zero
  8054cc:	11001036 	bltu	r2,r4,805510 <__clzsi2+0x58>
  8054d0:	000b883a 	mov	r5,zero
  8054d4:	20c6d83a 	srl	r3,r4,r3
  8054d8:	008020b4 	movhi	r2,130
  8054dc:	10a8be04 	addi	r2,r2,-23816
  8054e0:	1887883a 	add	r3,r3,r2
  8054e4:	18800003 	ldbu	r2,0(r3)
  8054e8:	00c00804 	movi	r3,32
  8054ec:	2885883a 	add	r2,r5,r2
  8054f0:	1885c83a 	sub	r2,r3,r2
  8054f4:	f800283a 	ret
  8054f8:	01400404 	movi	r5,16
  8054fc:	00804034 	movhi	r2,256
  805500:	10bfffc4 	addi	r2,r2,-1
  805504:	2807883a 	mov	r3,r5
  805508:	113ff22e 	bgeu	r2,r4,8054d4 <__clzsi2+0x1c>
  80550c:	01400604 	movi	r5,24
  805510:	2807883a 	mov	r3,r5
  805514:	20c6d83a 	srl	r3,r4,r3
  805518:	008020b4 	movhi	r2,130
  80551c:	10a8be04 	addi	r2,r2,-23816
  805520:	1887883a 	add	r3,r3,r2
  805524:	18800003 	ldbu	r2,0(r3)
  805528:	00c00804 	movi	r3,32
  80552c:	2885883a 	add	r2,r5,r2
  805530:	1885c83a 	sub	r2,r3,r2
  805534:	f800283a 	ret

00805538 <__pack_f>:
  805538:	20c00017 	ldw	r3,0(r4)
  80553c:	01c00044 	movi	r7,1
  805540:	21800317 	ldw	r6,12(r4)
  805544:	21400117 	ldw	r5,4(r4)
  805548:	38c02d2e 	bgeu	r7,r3,805600 <__pack_f+0xc8>
  80554c:	00800104 	movi	r2,4
  805550:	18802826 	beq	r3,r2,8055f4 <__pack_f+0xbc>
  805554:	00800084 	movi	r2,2
  805558:	18800126 	beq	r3,r2,805560 <__pack_f+0x28>
  80555c:	3000101e 	bne	r6,zero,8055a0 <__pack_f+0x68>
  805560:	000d883a 	mov	r6,zero
  805564:	0007883a 	mov	r3,zero
  805568:	19003fcc 	andi	r4,r3,255
  80556c:	200895fa 	slli	r4,r4,23
  805570:	00c02034 	movhi	r3,128
  805574:	18ffffc4 	addi	r3,r3,-1
  805578:	30c6703a 	and	r3,r6,r3
  80557c:	10a0002c 	andhi	r2,r2,32768
  805580:	10c4b03a 	or	r2,r2,r3
  805584:	280a97fa 	slli	r5,r5,31
  805588:	1104b03a 	or	r2,r2,r4
  80558c:	00e00034 	movhi	r3,32768
  805590:	18ffffc4 	addi	r3,r3,-1
  805594:	10c4703a 	and	r2,r2,r3
  805598:	1144b03a 	or	r2,r2,r5
  80559c:	f800283a 	ret
  8055a0:	21000217 	ldw	r4,8(r4)
  8055a4:	00bfe084 	movi	r2,-126
  8055a8:	20801b16 	blt	r4,r2,805618 <__pack_f+0xe0>
  8055ac:	00801fc4 	movi	r2,127
  8055b0:	11001016 	blt	r2,r4,8055f4 <__pack_f+0xbc>
  8055b4:	308e703a 	and	r7,r6,r2
  8055b8:	2087883a 	add	r3,r4,r2
  8055bc:	00801004 	movi	r2,64
  8055c0:	38800526 	beq	r7,r2,8055d8 <__pack_f+0xa0>
  8055c4:	31800fc4 	addi	r6,r6,63
  8055c8:	30000716 	blt	r6,zero,8055e8 <__pack_f+0xb0>
  8055cc:	300490ba 	slli	r2,r6,2
  8055d0:	100cd27a 	srli	r6,r2,9
  8055d4:	003fe406 	br	805568 <__pack_f+0x30>
  8055d8:	3080200c 	andi	r2,r6,128
  8055dc:	103ffa26 	beq	r2,zero,8055c8 <__pack_f+0x90>
  8055e0:	31cd883a 	add	r6,r6,r7
  8055e4:	003ff806 	br	8055c8 <__pack_f+0x90>
  8055e8:	300cd07a 	srli	r6,r6,1
  8055ec:	18c00044 	addi	r3,r3,1
  8055f0:	003ff606 	br	8055cc <__pack_f+0x94>
  8055f4:	000d883a 	mov	r6,zero
  8055f8:	00ffffc4 	movi	r3,-1
  8055fc:	003fda06 	br	805568 <__pack_f+0x30>
  805600:	31800434 	orhi	r6,r6,16
  805604:	00802034 	movhi	r2,128
  805608:	10bfffc4 	addi	r2,r2,-1
  80560c:	308c703a 	and	r6,r6,r2
  805610:	00ffffc4 	movi	r3,-1
  805614:	003fd406 	br	805568 <__pack_f+0x30>
  805618:	1109c83a 	sub	r4,r2,r4
  80561c:	00800644 	movi	r2,25
  805620:	11001216 	blt	r2,r4,80566c <__pack_f+0x134>
  805624:	3904983a 	sll	r2,r7,r4
  805628:	3106d83a 	srl	r3,r6,r4
  80562c:	10bfffc4 	addi	r2,r2,-1
  805630:	3084703a 	and	r2,r6,r2
  805634:	1004c03a 	cmpne	r2,r2,zero
  805638:	1886b03a 	or	r3,r3,r2
  80563c:	19001fcc 	andi	r4,r3,127
  805640:	00801004 	movi	r2,64
  805644:	20800c26 	beq	r4,r2,805678 <__pack_f+0x140>
  805648:	18c00fc4 	addi	r3,r3,63
  80564c:	00900034 	movhi	r2,16384
  805650:	10bfffc4 	addi	r2,r2,-1
  805654:	180cd1fa 	srli	r6,r3,7
  805658:	10c7803a 	cmpltu	r3,r2,r3
  80565c:	00802034 	movhi	r2,128
  805660:	10bfffc4 	addi	r2,r2,-1
  805664:	308c703a 	and	r6,r6,r2
  805668:	003fbf06 	br	805568 <__pack_f+0x30>
  80566c:	0007883a 	mov	r3,zero
  805670:	000d883a 	mov	r6,zero
  805674:	003ff906 	br	80565c <__pack_f+0x124>
  805678:	1880200c 	andi	r2,r3,128
  80567c:	10000126 	beq	r2,zero,805684 <__pack_f+0x14c>
  805680:	1907883a 	add	r3,r3,r4
  805684:	180cd1fa 	srli	r6,r3,7
  805688:	00900034 	movhi	r2,16384
  80568c:	10bfffc4 	addi	r2,r2,-1
  805690:	10c7803a 	cmpltu	r3,r2,r3
  805694:	003ff106 	br	80565c <__pack_f+0x124>

00805698 <__unpack_f>:
  805698:	21800017 	ldw	r6,0(r4)
  80569c:	00c02034 	movhi	r3,128
  8056a0:	18ffffc4 	addi	r3,r3,-1
  8056a4:	3004d5fa 	srli	r2,r6,23
  8056a8:	3008d7fa 	srli	r4,r6,31
  8056ac:	30ce703a 	and	r7,r6,r3
  8056b0:	10c03fcc 	andi	r3,r2,255
  8056b4:	29000115 	stw	r4,4(r5)
  8056b8:	1800131e 	bne	r3,zero,805708 <__unpack_f+0x70>
  8056bc:	38000f26 	beq	r7,zero,8056fc <__unpack_f+0x64>
  8056c0:	380691fa 	slli	r3,r7,7
  8056c4:	01bfe084 	movi	r6,-126
  8056c8:	008000c4 	movi	r2,3
  8056cc:	01100034 	movhi	r4,16384
  8056d0:	213fffc4 	addi	r4,r4,-1
  8056d4:	28800015 	stw	r2,0(r5)
  8056d8:	29800215 	stw	r6,8(r5)
  8056dc:	20c00536 	bltu	r4,r3,8056f4 <__unpack_f+0x5c>
  8056e0:	3005883a 	mov	r2,r6
  8056e4:	18c7883a 	add	r3,r3,r3
  8056e8:	10bfffc4 	addi	r2,r2,-1
  8056ec:	20fffd2e 	bgeu	r4,r3,8056e4 <__unpack_f+0x4c>
  8056f0:	28800215 	stw	r2,8(r5)
  8056f4:	28c00315 	stw	r3,12(r5)
  8056f8:	f800283a 	ret
  8056fc:	00800084 	movi	r2,2
  805700:	28800015 	stw	r2,0(r5)
  805704:	f800283a 	ret
  805708:	00803fc4 	movi	r2,255
  80570c:	18800826 	beq	r3,r2,805730 <__unpack_f+0x98>
  805710:	380491fa 	slli	r2,r7,7
  805714:	18ffe044 	addi	r3,r3,-127
  805718:	28c00215 	stw	r3,8(r5)
  80571c:	10900034 	orhi	r2,r2,16384
  805720:	28800315 	stw	r2,12(r5)
  805724:	008000c4 	movi	r2,3
  805728:	28800015 	stw	r2,0(r5)
  80572c:	f800283a 	ret
  805730:	3800031e 	bne	r7,zero,805740 <__unpack_f+0xa8>
  805734:	00800104 	movi	r2,4
  805738:	28800015 	stw	r2,0(r5)
  80573c:	f800283a 	ret
  805740:	3080042c 	andhi	r2,r6,16
  805744:	10000426 	beq	r2,zero,805758 <__unpack_f+0xc0>
  805748:	00800044 	movi	r2,1
  80574c:	28800015 	stw	r2,0(r5)
  805750:	29c00315 	stw	r7,12(r5)
  805754:	f800283a 	ret
  805758:	28000015 	stw	zero,0(r5)
  80575c:	003ffc06 	br	805750 <__unpack_f+0xb8>

00805760 <__make_fp>:
  805760:	defffb04 	addi	sp,sp,-20
  805764:	d9000015 	stw	r4,0(sp)
  805768:	d809883a 	mov	r4,sp
  80576c:	dfc00415 	stw	ra,16(sp)
  805770:	d9400115 	stw	r5,4(sp)
  805774:	d9800215 	stw	r6,8(sp)
  805778:	d9c00315 	stw	r7,12(sp)
  80577c:	08055380 	call	805538 <__pack_f>
  805780:	dfc00417 	ldw	ra,16(sp)
  805784:	dec00504 	addi	sp,sp,20
  805788:	f800283a 	ret

0080578c <__pack_d>:
  80578c:	20c00017 	ldw	r3,0(r4)
  805790:	defffd04 	addi	sp,sp,-12
  805794:	dc000015 	stw	r16,0(sp)
  805798:	dc800215 	stw	r18,8(sp)
  80579c:	dc400115 	stw	r17,4(sp)
  8057a0:	00800044 	movi	r2,1
  8057a4:	22000317 	ldw	r8,12(r4)
  8057a8:	001f883a 	mov	r15,zero
  8057ac:	22400417 	ldw	r9,16(r4)
  8057b0:	24000117 	ldw	r16,4(r4)
  8057b4:	10c0552e 	bgeu	r2,r3,80590c <__pack_d+0x180>
  8057b8:	00800104 	movi	r2,4
  8057bc:	18804f26 	beq	r3,r2,8058fc <__pack_d+0x170>
  8057c0:	00800084 	movi	r2,2
  8057c4:	18800226 	beq	r3,r2,8057d0 <__pack_d+0x44>
  8057c8:	4244b03a 	or	r2,r8,r9
  8057cc:	10001a1e 	bne	r2,zero,805838 <__pack_d+0xac>
  8057d0:	000d883a 	mov	r6,zero
  8057d4:	000f883a 	mov	r7,zero
  8057d8:	0011883a 	mov	r8,zero
  8057dc:	00800434 	movhi	r2,16
  8057e0:	10bfffc4 	addi	r2,r2,-1
  8057e4:	301d883a 	mov	r14,r6
  8057e8:	3884703a 	and	r2,r7,r2
  8057ec:	400a953a 	slli	r5,r8,20
  8057f0:	79bffc2c 	andhi	r6,r15,65520
  8057f4:	308cb03a 	or	r6,r6,r2
  8057f8:	00e00434 	movhi	r3,32784
  8057fc:	18ffffc4 	addi	r3,r3,-1
  805800:	800497fa 	slli	r2,r16,31
  805804:	30c6703a 	and	r3,r6,r3
  805808:	1946b03a 	or	r3,r3,r5
  80580c:	01600034 	movhi	r5,32768
  805810:	297fffc4 	addi	r5,r5,-1
  805814:	194a703a 	and	r5,r3,r5
  805818:	288ab03a 	or	r5,r5,r2
  80581c:	2807883a 	mov	r3,r5
  805820:	7005883a 	mov	r2,r14
  805824:	dc800217 	ldw	r18,8(sp)
  805828:	dc400117 	ldw	r17,4(sp)
  80582c:	dc000017 	ldw	r16,0(sp)
  805830:	dec00304 	addi	sp,sp,12
  805834:	f800283a 	ret
  805838:	21000217 	ldw	r4,8(r4)
  80583c:	00bf0084 	movi	r2,-1022
  805840:	20803f16 	blt	r4,r2,805940 <__pack_d+0x1b4>
  805844:	0080ffc4 	movi	r2,1023
  805848:	11002c16 	blt	r2,r4,8058fc <__pack_d+0x170>
  80584c:	00803fc4 	movi	r2,255
  805850:	408c703a 	and	r6,r8,r2
  805854:	00802004 	movi	r2,128
  805858:	0007883a 	mov	r3,zero
  80585c:	000f883a 	mov	r7,zero
  805860:	2280ffc4 	addi	r10,r4,1023
  805864:	30801e26 	beq	r6,r2,8058e0 <__pack_d+0x154>
  805868:	00801fc4 	movi	r2,127
  80586c:	4089883a 	add	r4,r8,r2
  805870:	220d803a 	cmpltu	r6,r4,r8
  805874:	324d883a 	add	r6,r6,r9
  805878:	2011883a 	mov	r8,r4
  80587c:	3013883a 	mov	r9,r6
  805880:	00880034 	movhi	r2,8192
  805884:	10bfffc4 	addi	r2,r2,-1
  805888:	12400d36 	bltu	r2,r9,8058c0 <__pack_d+0x134>
  80588c:	4804963a 	slli	r2,r9,24
  805890:	400cd23a 	srli	r6,r8,8
  805894:	480ed23a 	srli	r7,r9,8
  805898:	013fffc4 	movi	r4,-1
  80589c:	118cb03a 	or	r6,r2,r6
  8058a0:	01400434 	movhi	r5,16
  8058a4:	297fffc4 	addi	r5,r5,-1
  8058a8:	3104703a 	and	r2,r6,r4
  8058ac:	3946703a 	and	r3,r7,r5
  8058b0:	5201ffcc 	andi	r8,r10,2047
  8058b4:	100d883a 	mov	r6,r2
  8058b8:	180f883a 	mov	r7,r3
  8058bc:	003fc706 	br	8057dc <__pack_d+0x50>
  8058c0:	480897fa 	slli	r4,r9,31
  8058c4:	4004d07a 	srli	r2,r8,1
  8058c8:	4806d07a 	srli	r3,r9,1
  8058cc:	52800044 	addi	r10,r10,1
  8058d0:	2084b03a 	or	r2,r4,r2
  8058d4:	1011883a 	mov	r8,r2
  8058d8:	1813883a 	mov	r9,r3
  8058dc:	003feb06 	br	80588c <__pack_d+0x100>
  8058e0:	383fe11e 	bne	r7,zero,805868 <__pack_d+0xdc>
  8058e4:	01004004 	movi	r4,256
  8058e8:	4104703a 	and	r2,r8,r4
  8058ec:	10c4b03a 	or	r2,r2,r3
  8058f0:	103fe326 	beq	r2,zero,805880 <__pack_d+0xf4>
  8058f4:	3005883a 	mov	r2,r6
  8058f8:	003fdc06 	br	80586c <__pack_d+0xe0>
  8058fc:	000d883a 	mov	r6,zero
  805900:	000f883a 	mov	r7,zero
  805904:	0201ffc4 	movi	r8,2047
  805908:	003fb406 	br	8057dc <__pack_d+0x50>
  80590c:	0005883a 	mov	r2,zero
  805910:	00c00234 	movhi	r3,8
  805914:	408cb03a 	or	r6,r8,r2
  805918:	48ceb03a 	or	r7,r9,r3
  80591c:	013fffc4 	movi	r4,-1
  805920:	01400434 	movhi	r5,16
  805924:	297fffc4 	addi	r5,r5,-1
  805928:	3104703a 	and	r2,r6,r4
  80592c:	3946703a 	and	r3,r7,r5
  805930:	100d883a 	mov	r6,r2
  805934:	180f883a 	mov	r7,r3
  805938:	0201ffc4 	movi	r8,2047
  80593c:	003fa706 	br	8057dc <__pack_d+0x50>
  805940:	1109c83a 	sub	r4,r2,r4
  805944:	00800e04 	movi	r2,56
  805948:	11004316 	blt	r2,r4,805a58 <__pack_d+0x2cc>
  80594c:	21fff804 	addi	r7,r4,-32
  805950:	38004516 	blt	r7,zero,805a68 <__pack_d+0x2dc>
  805954:	49d8d83a 	srl	r12,r9,r7
  805958:	001b883a 	mov	r13,zero
  80595c:	0023883a 	mov	r17,zero
  805960:	01400044 	movi	r5,1
  805964:	0025883a 	mov	r18,zero
  805968:	38004716 	blt	r7,zero,805a88 <__pack_d+0x2fc>
  80596c:	29d6983a 	sll	r11,r5,r7
  805970:	0015883a 	mov	r10,zero
  805974:	00bfffc4 	movi	r2,-1
  805978:	5089883a 	add	r4,r10,r2
  80597c:	588b883a 	add	r5,r11,r2
  805980:	228d803a 	cmpltu	r6,r4,r10
  805984:	314b883a 	add	r5,r6,r5
  805988:	4104703a 	and	r2,r8,r4
  80598c:	4946703a 	and	r3,r9,r5
  805990:	10c4b03a 	or	r2,r2,r3
  805994:	10000226 	beq	r2,zero,8059a0 <__pack_d+0x214>
  805998:	04400044 	movi	r17,1
  80599c:	0025883a 	mov	r18,zero
  8059a0:	00803fc4 	movi	r2,255
  8059a4:	644eb03a 	or	r7,r12,r17
  8059a8:	3892703a 	and	r9,r7,r2
  8059ac:	00802004 	movi	r2,128
  8059b0:	6c90b03a 	or	r8,r13,r18
  8059b4:	0015883a 	mov	r10,zero
  8059b8:	48801626 	beq	r9,r2,805a14 <__pack_d+0x288>
  8059bc:	01001fc4 	movi	r4,127
  8059c0:	3905883a 	add	r2,r7,r4
  8059c4:	11cd803a 	cmpltu	r6,r2,r7
  8059c8:	320d883a 	add	r6,r6,r8
  8059cc:	100f883a 	mov	r7,r2
  8059d0:	00840034 	movhi	r2,4096
  8059d4:	10bfffc4 	addi	r2,r2,-1
  8059d8:	3011883a 	mov	r8,r6
  8059dc:	0007883a 	mov	r3,zero
  8059e0:	11801b36 	bltu	r2,r6,805a50 <__pack_d+0x2c4>
  8059e4:	4004963a 	slli	r2,r8,24
  8059e8:	3808d23a 	srli	r4,r7,8
  8059ec:	400ad23a 	srli	r5,r8,8
  8059f0:	1813883a 	mov	r9,r3
  8059f4:	1108b03a 	or	r4,r2,r4
  8059f8:	00bfffc4 	movi	r2,-1
  8059fc:	00c00434 	movhi	r3,16
  805a00:	18ffffc4 	addi	r3,r3,-1
  805a04:	208c703a 	and	r6,r4,r2
  805a08:	28ce703a 	and	r7,r5,r3
  805a0c:	4a01ffcc 	andi	r8,r9,2047
  805a10:	003f7206 	br	8057dc <__pack_d+0x50>
  805a14:	503fe91e 	bne	r10,zero,8059bc <__pack_d+0x230>
  805a18:	01004004 	movi	r4,256
  805a1c:	3904703a 	and	r2,r7,r4
  805a20:	0007883a 	mov	r3,zero
  805a24:	10c4b03a 	or	r2,r2,r3
  805a28:	10000626 	beq	r2,zero,805a44 <__pack_d+0x2b8>
  805a2c:	3a45883a 	add	r2,r7,r9
  805a30:	11cd803a 	cmpltu	r6,r2,r7
  805a34:	320d883a 	add	r6,r6,r8
  805a38:	100f883a 	mov	r7,r2
  805a3c:	3011883a 	mov	r8,r6
  805a40:	0007883a 	mov	r3,zero
  805a44:	00840034 	movhi	r2,4096
  805a48:	10bfffc4 	addi	r2,r2,-1
  805a4c:	123fe52e 	bgeu	r2,r8,8059e4 <__pack_d+0x258>
  805a50:	00c00044 	movi	r3,1
  805a54:	003fe306 	br	8059e4 <__pack_d+0x258>
  805a58:	0009883a 	mov	r4,zero
  805a5c:	0013883a 	mov	r9,zero
  805a60:	000b883a 	mov	r5,zero
  805a64:	003fe406 	br	8059f8 <__pack_d+0x26c>
  805a68:	4a47883a 	add	r3,r9,r9
  805a6c:	008007c4 	movi	r2,31
  805a70:	1105c83a 	sub	r2,r2,r4
  805a74:	1886983a 	sll	r3,r3,r2
  805a78:	4118d83a 	srl	r12,r8,r4
  805a7c:	491ad83a 	srl	r13,r9,r4
  805a80:	1b18b03a 	or	r12,r3,r12
  805a84:	003fb506 	br	80595c <__pack_d+0x1d0>
  805a88:	2806d07a 	srli	r3,r5,1
  805a8c:	008007c4 	movi	r2,31
  805a90:	1105c83a 	sub	r2,r2,r4
  805a94:	1896d83a 	srl	r11,r3,r2
  805a98:	2914983a 	sll	r10,r5,r4
  805a9c:	003fb506 	br	805974 <__pack_d+0x1e8>

00805aa0 <__unpack_d>:
  805aa0:	20c00117 	ldw	r3,4(r4)
  805aa4:	22400017 	ldw	r9,0(r4)
  805aa8:	00800434 	movhi	r2,16
  805aac:	10bfffc4 	addi	r2,r2,-1
  805ab0:	1808d53a 	srli	r4,r3,20
  805ab4:	180cd7fa 	srli	r6,r3,31
  805ab8:	1894703a 	and	r10,r3,r2
  805abc:	2201ffcc 	andi	r8,r4,2047
  805ac0:	281b883a 	mov	r13,r5
  805ac4:	4817883a 	mov	r11,r9
  805ac8:	29800115 	stw	r6,4(r5)
  805acc:	5019883a 	mov	r12,r10
  805ad0:	40001e1e 	bne	r8,zero,805b4c <__unpack_d+0xac>
  805ad4:	4a84b03a 	or	r2,r9,r10
  805ad8:	10001926 	beq	r2,zero,805b40 <__unpack_d+0xa0>
  805adc:	4804d63a 	srli	r2,r9,24
  805ae0:	500c923a 	slli	r6,r10,8
  805ae4:	013f0084 	movi	r4,-1022
  805ae8:	00c40034 	movhi	r3,4096
  805aec:	18ffffc4 	addi	r3,r3,-1
  805af0:	118cb03a 	or	r6,r2,r6
  805af4:	008000c4 	movi	r2,3
  805af8:	480a923a 	slli	r5,r9,8
  805afc:	68800015 	stw	r2,0(r13)
  805b00:	69000215 	stw	r4,8(r13)
  805b04:	19800b36 	bltu	r3,r6,805b34 <__unpack_d+0x94>
  805b08:	200f883a 	mov	r7,r4
  805b0c:	1811883a 	mov	r8,r3
  805b10:	2945883a 	add	r2,r5,r5
  805b14:	1149803a 	cmpltu	r4,r2,r5
  805b18:	3187883a 	add	r3,r6,r6
  805b1c:	20c9883a 	add	r4,r4,r3
  805b20:	100b883a 	mov	r5,r2
  805b24:	200d883a 	mov	r6,r4
  805b28:	39ffffc4 	addi	r7,r7,-1
  805b2c:	413ff82e 	bgeu	r8,r4,805b10 <__unpack_d+0x70>
  805b30:	69c00215 	stw	r7,8(r13)
  805b34:	69800415 	stw	r6,16(r13)
  805b38:	69400315 	stw	r5,12(r13)
  805b3c:	f800283a 	ret
  805b40:	00800084 	movi	r2,2
  805b44:	28800015 	stw	r2,0(r5)
  805b48:	f800283a 	ret
  805b4c:	0081ffc4 	movi	r2,2047
  805b50:	40800f26 	beq	r8,r2,805b90 <__unpack_d+0xf0>
  805b54:	480cd63a 	srli	r6,r9,24
  805b58:	5006923a 	slli	r3,r10,8
  805b5c:	4804923a 	slli	r2,r9,8
  805b60:	0009883a 	mov	r4,zero
  805b64:	30c6b03a 	or	r3,r6,r3
  805b68:	01440034 	movhi	r5,4096
  805b6c:	110cb03a 	or	r6,r2,r4
  805b70:	423f0044 	addi	r8,r8,-1023
  805b74:	194eb03a 	or	r7,r3,r5
  805b78:	008000c4 	movi	r2,3
  805b7c:	69c00415 	stw	r7,16(r13)
  805b80:	6a000215 	stw	r8,8(r13)
  805b84:	68800015 	stw	r2,0(r13)
  805b88:	69800315 	stw	r6,12(r13)
  805b8c:	f800283a 	ret
  805b90:	4a84b03a 	or	r2,r9,r10
  805b94:	1000031e 	bne	r2,zero,805ba4 <__unpack_d+0x104>
  805b98:	00800104 	movi	r2,4
  805b9c:	28800015 	stw	r2,0(r5)
  805ba0:	f800283a 	ret
  805ba4:	0009883a 	mov	r4,zero
  805ba8:	01400234 	movhi	r5,8
  805bac:	4904703a 	and	r2,r9,r4
  805bb0:	5146703a 	and	r3,r10,r5
  805bb4:	10c4b03a 	or	r2,r2,r3
  805bb8:	10000526 	beq	r2,zero,805bd0 <__unpack_d+0x130>
  805bbc:	00800044 	movi	r2,1
  805bc0:	68800015 	stw	r2,0(r13)
  805bc4:	6b000415 	stw	r12,16(r13)
  805bc8:	6ac00315 	stw	r11,12(r13)
  805bcc:	f800283a 	ret
  805bd0:	68000015 	stw	zero,0(r13)
  805bd4:	003ffb06 	br	805bc4 <__unpack_d+0x124>

00805bd8 <__fpcmp_parts_d>:
  805bd8:	21800017 	ldw	r6,0(r4)
  805bdc:	00c00044 	movi	r3,1
  805be0:	19800a2e 	bgeu	r3,r6,805c0c <__fpcmp_parts_d+0x34>
  805be4:	28800017 	ldw	r2,0(r5)
  805be8:	1880082e 	bgeu	r3,r2,805c0c <__fpcmp_parts_d+0x34>
  805bec:	00c00104 	movi	r3,4
  805bf0:	30c02626 	beq	r6,r3,805c8c <__fpcmp_parts_d+0xb4>
  805bf4:	10c02226 	beq	r2,r3,805c80 <__fpcmp_parts_d+0xa8>
  805bf8:	00c00084 	movi	r3,2
  805bfc:	30c00526 	beq	r6,r3,805c14 <__fpcmp_parts_d+0x3c>
  805c00:	10c0071e 	bne	r2,r3,805c20 <__fpcmp_parts_d+0x48>
  805c04:	20800117 	ldw	r2,4(r4)
  805c08:	1000091e 	bne	r2,zero,805c30 <__fpcmp_parts_d+0x58>
  805c0c:	00800044 	movi	r2,1
  805c10:	f800283a 	ret
  805c14:	10c01a1e 	bne	r2,r3,805c80 <__fpcmp_parts_d+0xa8>
  805c18:	0005883a 	mov	r2,zero
  805c1c:	f800283a 	ret
  805c20:	22000117 	ldw	r8,4(r4)
  805c24:	28800117 	ldw	r2,4(r5)
  805c28:	40800326 	beq	r8,r2,805c38 <__fpcmp_parts_d+0x60>
  805c2c:	403ff726 	beq	r8,zero,805c0c <__fpcmp_parts_d+0x34>
  805c30:	00bfffc4 	movi	r2,-1
  805c34:	f800283a 	ret
  805c38:	20c00217 	ldw	r3,8(r4)
  805c3c:	28800217 	ldw	r2,8(r5)
  805c40:	10fffa16 	blt	r2,r3,805c2c <__fpcmp_parts_d+0x54>
  805c44:	18800916 	blt	r3,r2,805c6c <__fpcmp_parts_d+0x94>
  805c48:	21c00417 	ldw	r7,16(r4)
  805c4c:	28c00417 	ldw	r3,16(r5)
  805c50:	21800317 	ldw	r6,12(r4)
  805c54:	28800317 	ldw	r2,12(r5)
  805c58:	19fff436 	bltu	r3,r7,805c2c <__fpcmp_parts_d+0x54>
  805c5c:	38c00526 	beq	r7,r3,805c74 <__fpcmp_parts_d+0x9c>
  805c60:	38c00236 	bltu	r7,r3,805c6c <__fpcmp_parts_d+0x94>
  805c64:	19ffec1e 	bne	r3,r7,805c18 <__fpcmp_parts_d+0x40>
  805c68:	30bfeb2e 	bgeu	r6,r2,805c18 <__fpcmp_parts_d+0x40>
  805c6c:	403fe71e 	bne	r8,zero,805c0c <__fpcmp_parts_d+0x34>
  805c70:	003fef06 	br	805c30 <__fpcmp_parts_d+0x58>
  805c74:	11bffa2e 	bgeu	r2,r6,805c60 <__fpcmp_parts_d+0x88>
  805c78:	403fe426 	beq	r8,zero,805c0c <__fpcmp_parts_d+0x34>
  805c7c:	003fec06 	br	805c30 <__fpcmp_parts_d+0x58>
  805c80:	28800117 	ldw	r2,4(r5)
  805c84:	103fe11e 	bne	r2,zero,805c0c <__fpcmp_parts_d+0x34>
  805c88:	003fe906 	br	805c30 <__fpcmp_parts_d+0x58>
  805c8c:	11bfdd1e 	bne	r2,r6,805c04 <__fpcmp_parts_d+0x2c>
  805c90:	28c00117 	ldw	r3,4(r5)
  805c94:	20800117 	ldw	r2,4(r4)
  805c98:	1885c83a 	sub	r2,r3,r2
  805c9c:	f800283a 	ret

00805ca0 <__errno>:
  805ca0:	00c020b4 	movhi	r3,130
  805ca4:	18f09304 	addi	r3,r3,-15796
  805ca8:	18800017 	ldw	r2,0(r3)
  805cac:	f800283a 	ret

00805cb0 <printf>:
  805cb0:	defffb04 	addi	sp,sp,-20
  805cb4:	dfc00115 	stw	ra,4(sp)
  805cb8:	d9400215 	stw	r5,8(sp)
  805cbc:	d9800315 	stw	r6,12(sp)
  805cc0:	d9c00415 	stw	r7,16(sp)
  805cc4:	008020b4 	movhi	r2,130
  805cc8:	10b09304 	addi	r2,r2,-15796
  805ccc:	10c00017 	ldw	r3,0(r2)
  805cd0:	200b883a 	mov	r5,r4
  805cd4:	d8800204 	addi	r2,sp,8
  805cd8:	19000217 	ldw	r4,8(r3)
  805cdc:	100d883a 	mov	r6,r2
  805ce0:	d8800015 	stw	r2,0(sp)
  805ce4:	0807d6c0 	call	807d6c <__vfprintf_internal>
  805ce8:	dfc00117 	ldw	ra,4(sp)
  805cec:	dec00504 	addi	sp,sp,20
  805cf0:	f800283a 	ret

00805cf4 <_printf_r>:
  805cf4:	defffc04 	addi	sp,sp,-16
  805cf8:	dfc00115 	stw	ra,4(sp)
  805cfc:	d9800215 	stw	r6,8(sp)
  805d00:	d9c00315 	stw	r7,12(sp)
  805d04:	280d883a 	mov	r6,r5
  805d08:	21400217 	ldw	r5,8(r4)
  805d0c:	d8c00204 	addi	r3,sp,8
  805d10:	180f883a 	mov	r7,r3
  805d14:	d8c00015 	stw	r3,0(sp)
  805d18:	0805ea80 	call	805ea8 <___vfprintf_internal_r>
  805d1c:	dfc00117 	ldw	ra,4(sp)
  805d20:	dec00404 	addi	sp,sp,16
  805d24:	f800283a 	ret

00805d28 <_puts_r>:
  805d28:	defff604 	addi	sp,sp,-40
  805d2c:	dc400715 	stw	r17,28(sp)
  805d30:	2023883a 	mov	r17,r4
  805d34:	2809883a 	mov	r4,r5
  805d38:	dfc00915 	stw	ra,36(sp)
  805d3c:	dcc00815 	stw	r19,32(sp)
  805d40:	2827883a 	mov	r19,r5
  805d44:	0805ddc0 	call	805ddc <strlen>
  805d48:	89400217 	ldw	r5,8(r17)
  805d4c:	00c020b4 	movhi	r3,130
  805d50:	18e8ff04 	addi	r3,r3,-23556
  805d54:	01c00044 	movi	r7,1
  805d58:	12000044 	addi	r8,r2,1
  805d5c:	d8c00515 	stw	r3,20(sp)
  805d60:	d9c00615 	stw	r7,24(sp)
  805d64:	d8c00304 	addi	r3,sp,12
  805d68:	01c00084 	movi	r7,2
  805d6c:	8809883a 	mov	r4,r17
  805d70:	d80d883a 	mov	r6,sp
  805d74:	d8c00015 	stw	r3,0(sp)
  805d78:	dcc00315 	stw	r19,12(sp)
  805d7c:	da000215 	stw	r8,8(sp)
  805d80:	d9c00115 	stw	r7,4(sp)
  805d84:	d8800415 	stw	r2,16(sp)
  805d88:	080a0280 	call	80a028 <__sfvwrite_r>
  805d8c:	00ffffc4 	movi	r3,-1
  805d90:	10000626 	beq	r2,zero,805dac <_puts_r+0x84>
  805d94:	1805883a 	mov	r2,r3
  805d98:	dfc00917 	ldw	ra,36(sp)
  805d9c:	dcc00817 	ldw	r19,32(sp)
  805da0:	dc400717 	ldw	r17,28(sp)
  805da4:	dec00a04 	addi	sp,sp,40
  805da8:	f800283a 	ret
  805dac:	00c00284 	movi	r3,10
  805db0:	1805883a 	mov	r2,r3
  805db4:	dfc00917 	ldw	ra,36(sp)
  805db8:	dcc00817 	ldw	r19,32(sp)
  805dbc:	dc400717 	ldw	r17,28(sp)
  805dc0:	dec00a04 	addi	sp,sp,40
  805dc4:	f800283a 	ret

00805dc8 <puts>:
  805dc8:	008020b4 	movhi	r2,130
  805dcc:	10b09304 	addi	r2,r2,-15796
  805dd0:	200b883a 	mov	r5,r4
  805dd4:	11000017 	ldw	r4,0(r2)
  805dd8:	0805d281 	jmpi	805d28 <_puts_r>

00805ddc <strlen>:
  805ddc:	208000cc 	andi	r2,r4,3
  805de0:	2011883a 	mov	r8,r4
  805de4:	1000161e 	bne	r2,zero,805e40 <strlen+0x64>
  805de8:	20c00017 	ldw	r3,0(r4)
  805dec:	017fbff4 	movhi	r5,65279
  805df0:	297fbfc4 	addi	r5,r5,-257
  805df4:	01e02074 	movhi	r7,32897
  805df8:	39e02004 	addi	r7,r7,-32640
  805dfc:	1945883a 	add	r2,r3,r5
  805e00:	11c4703a 	and	r2,r2,r7
  805e04:	00c6303a 	nor	r3,zero,r3
  805e08:	1886703a 	and	r3,r3,r2
  805e0c:	18000c1e 	bne	r3,zero,805e40 <strlen+0x64>
  805e10:	280d883a 	mov	r6,r5
  805e14:	380b883a 	mov	r5,r7
  805e18:	21000104 	addi	r4,r4,4
  805e1c:	20800017 	ldw	r2,0(r4)
  805e20:	1187883a 	add	r3,r2,r6
  805e24:	1946703a 	and	r3,r3,r5
  805e28:	0084303a 	nor	r2,zero,r2
  805e2c:	10c4703a 	and	r2,r2,r3
  805e30:	103ff926 	beq	r2,zero,805e18 <strlen+0x3c>
  805e34:	20800007 	ldb	r2,0(r4)
  805e38:	10000326 	beq	r2,zero,805e48 <strlen+0x6c>
  805e3c:	21000044 	addi	r4,r4,1
  805e40:	20800007 	ldb	r2,0(r4)
  805e44:	103ffd1e 	bne	r2,zero,805e3c <strlen+0x60>
  805e48:	2205c83a 	sub	r2,r4,r8
  805e4c:	f800283a 	ret

00805e50 <__sprint_r>:
  805e50:	30800217 	ldw	r2,8(r6)
  805e54:	defffe04 	addi	sp,sp,-8
  805e58:	dc000015 	stw	r16,0(sp)
  805e5c:	dfc00115 	stw	ra,4(sp)
  805e60:	3021883a 	mov	r16,r6
  805e64:	0007883a 	mov	r3,zero
  805e68:	1000061e 	bne	r2,zero,805e84 <__sprint_r+0x34>
  805e6c:	1805883a 	mov	r2,r3
  805e70:	30000115 	stw	zero,4(r6)
  805e74:	dfc00117 	ldw	ra,4(sp)
  805e78:	dc000017 	ldw	r16,0(sp)
  805e7c:	dec00204 	addi	sp,sp,8
  805e80:	f800283a 	ret
  805e84:	080a0280 	call	80a028 <__sfvwrite_r>
  805e88:	1007883a 	mov	r3,r2
  805e8c:	1805883a 	mov	r2,r3
  805e90:	80000115 	stw	zero,4(r16)
  805e94:	80000215 	stw	zero,8(r16)
  805e98:	dfc00117 	ldw	ra,4(sp)
  805e9c:	dc000017 	ldw	r16,0(sp)
  805ea0:	dec00204 	addi	sp,sp,8
  805ea4:	f800283a 	ret

00805ea8 <___vfprintf_internal_r>:
  805ea8:	defea404 	addi	sp,sp,-1392
  805eac:	dd815815 	stw	r22,1376(sp)
  805eb0:	dc015215 	stw	r16,1352(sp)
  805eb4:	d9c15115 	stw	r7,1348(sp)
  805eb8:	dfc15b15 	stw	ra,1388(sp)
  805ebc:	df015a15 	stw	fp,1384(sp)
  805ec0:	ddc15915 	stw	r23,1380(sp)
  805ec4:	dd415715 	stw	r21,1372(sp)
  805ec8:	dd015615 	stw	r20,1368(sp)
  805ecc:	dcc15515 	stw	r19,1364(sp)
  805ed0:	dc815415 	stw	r18,1360(sp)
  805ed4:	dc415315 	stw	r17,1356(sp)
  805ed8:	282d883a 	mov	r22,r5
  805edc:	3021883a 	mov	r16,r6
  805ee0:	d9014f15 	stw	r4,1340(sp)
  805ee4:	080a64c0 	call	80a64c <_localeconv_r>
  805ee8:	10800017 	ldw	r2,0(r2)
  805eec:	d9c15117 	ldw	r7,1348(sp)
  805ef0:	d8814915 	stw	r2,1316(sp)
  805ef4:	d8814f17 	ldw	r2,1340(sp)
  805ef8:	10000226 	beq	r2,zero,805f04 <___vfprintf_internal_r+0x5c>
  805efc:	10800e17 	ldw	r2,56(r2)
  805f00:	10020d26 	beq	r2,zero,806738 <___vfprintf_internal_r+0x890>
  805f04:	b080030b 	ldhu	r2,12(r22)
  805f08:	1080020c 	andi	r2,r2,8
  805f0c:	10020e26 	beq	r2,zero,806748 <___vfprintf_internal_r+0x8a0>
  805f10:	b0800417 	ldw	r2,16(r22)
  805f14:	10020c26 	beq	r2,zero,806748 <___vfprintf_internal_r+0x8a0>
  805f18:	b200030b 	ldhu	r8,12(r22)
  805f1c:	00800284 	movi	r2,10
  805f20:	40c0068c 	andi	r3,r8,26
  805f24:	18802f1e 	bne	r3,r2,805fe4 <___vfprintf_internal_r+0x13c>
  805f28:	b080038f 	ldh	r2,14(r22)
  805f2c:	10002d16 	blt	r2,zero,805fe4 <___vfprintf_internal_r+0x13c>
  805f30:	b240038b 	ldhu	r9,14(r22)
  805f34:	b2800717 	ldw	r10,28(r22)
  805f38:	b2c00917 	ldw	r11,36(r22)
  805f3c:	d9014f17 	ldw	r4,1340(sp)
  805f40:	dc402904 	addi	r17,sp,164
  805f44:	d8804004 	addi	r2,sp,256
  805f48:	00c10004 	movi	r3,1024
  805f4c:	423fff4c 	andi	r8,r8,65533
  805f50:	800d883a 	mov	r6,r16
  805f54:	880b883a 	mov	r5,r17
  805f58:	da002c0d 	sth	r8,176(sp)
  805f5c:	da402c8d 	sth	r9,178(sp)
  805f60:	da803015 	stw	r10,192(sp)
  805f64:	dac03215 	stw	r11,200(sp)
  805f68:	d8802d15 	stw	r2,180(sp)
  805f6c:	d8c02e15 	stw	r3,184(sp)
  805f70:	d8802915 	stw	r2,164(sp)
  805f74:	d8c02b15 	stw	r3,172(sp)
  805f78:	d8002f15 	stw	zero,188(sp)
  805f7c:	0805ea80 	call	805ea8 <___vfprintf_internal_r>
  805f80:	d8814b15 	stw	r2,1324(sp)
  805f84:	10000416 	blt	r2,zero,805f98 <___vfprintf_internal_r+0xf0>
  805f88:	d9014f17 	ldw	r4,1340(sp)
  805f8c:	880b883a 	mov	r5,r17
  805f90:	08096c40 	call	8096c4 <_fflush_r>
  805f94:	1002321e 	bne	r2,zero,806860 <___vfprintf_internal_r+0x9b8>
  805f98:	d8802c0b 	ldhu	r2,176(sp)
  805f9c:	1080100c 	andi	r2,r2,64
  805fa0:	10000326 	beq	r2,zero,805fb0 <___vfprintf_internal_r+0x108>
  805fa4:	b080030b 	ldhu	r2,12(r22)
  805fa8:	10801014 	ori	r2,r2,64
  805fac:	b080030d 	sth	r2,12(r22)
  805fb0:	d8814b17 	ldw	r2,1324(sp)
  805fb4:	dfc15b17 	ldw	ra,1388(sp)
  805fb8:	df015a17 	ldw	fp,1384(sp)
  805fbc:	ddc15917 	ldw	r23,1380(sp)
  805fc0:	dd815817 	ldw	r22,1376(sp)
  805fc4:	dd415717 	ldw	r21,1372(sp)
  805fc8:	dd015617 	ldw	r20,1368(sp)
  805fcc:	dcc15517 	ldw	r19,1364(sp)
  805fd0:	dc815417 	ldw	r18,1360(sp)
  805fd4:	dc415317 	ldw	r17,1356(sp)
  805fd8:	dc015217 	ldw	r16,1352(sp)
  805fdc:	dec15c04 	addi	sp,sp,1392
  805fe0:	f800283a 	ret
  805fe4:	0005883a 	mov	r2,zero
  805fe8:	0007883a 	mov	r3,zero
  805fec:	dd401904 	addi	r21,sp,100
  805ff0:	d8814215 	stw	r2,1288(sp)
  805ff4:	802f883a 	mov	r23,r16
  805ff8:	d8c14315 	stw	r3,1292(sp)
  805ffc:	d8014b15 	stw	zero,1324(sp)
  806000:	d8014815 	stw	zero,1312(sp)
  806004:	d8014415 	stw	zero,1296(sp)
  806008:	d8014715 	stw	zero,1308(sp)
  80600c:	dd400c15 	stw	r21,48(sp)
  806010:	d8000e15 	stw	zero,56(sp)
  806014:	d8000d15 	stw	zero,52(sp)
  806018:	b8800007 	ldb	r2,0(r23)
  80601c:	10001926 	beq	r2,zero,806084 <___vfprintf_internal_r+0x1dc>
  806020:	00c00944 	movi	r3,37
  806024:	10c01726 	beq	r2,r3,806084 <___vfprintf_internal_r+0x1dc>
  806028:	b821883a 	mov	r16,r23
  80602c:	00000106 	br	806034 <___vfprintf_internal_r+0x18c>
  806030:	10c00326 	beq	r2,r3,806040 <___vfprintf_internal_r+0x198>
  806034:	84000044 	addi	r16,r16,1
  806038:	80800007 	ldb	r2,0(r16)
  80603c:	103ffc1e 	bne	r2,zero,806030 <___vfprintf_internal_r+0x188>
  806040:	85e7c83a 	sub	r19,r16,r23
  806044:	98000e26 	beq	r19,zero,806080 <___vfprintf_internal_r+0x1d8>
  806048:	dc800e17 	ldw	r18,56(sp)
  80604c:	dc400d17 	ldw	r17,52(sp)
  806050:	008001c4 	movi	r2,7
  806054:	94e5883a 	add	r18,r18,r19
  806058:	8c400044 	addi	r17,r17,1
  80605c:	adc00015 	stw	r23,0(r21)
  806060:	dc800e15 	stw	r18,56(sp)
  806064:	acc00115 	stw	r19,4(r21)
  806068:	dc400d15 	stw	r17,52(sp)
  80606c:	14428b16 	blt	r2,r17,806a9c <___vfprintf_internal_r+0xbf4>
  806070:	ad400204 	addi	r21,r21,8
  806074:	d9014b17 	ldw	r4,1324(sp)
  806078:	24c9883a 	add	r4,r4,r19
  80607c:	d9014b15 	stw	r4,1324(sp)
  806080:	802f883a 	mov	r23,r16
  806084:	b8800007 	ldb	r2,0(r23)
  806088:	10013c26 	beq	r2,zero,80657c <___vfprintf_internal_r+0x6d4>
  80608c:	bdc00044 	addi	r23,r23,1
  806090:	d8000405 	stb	zero,16(sp)
  806094:	b8c00007 	ldb	r3,0(r23)
  806098:	04ffffc4 	movi	r19,-1
  80609c:	d8014c15 	stw	zero,1328(sp)
  8060a0:	d8014a15 	stw	zero,1320(sp)
  8060a4:	d8c14d15 	stw	r3,1332(sp)
  8060a8:	bdc00044 	addi	r23,r23,1
  8060ac:	d9414d17 	ldw	r5,1332(sp)
  8060b0:	00801604 	movi	r2,88
  8060b4:	28fff804 	addi	r3,r5,-32
  8060b8:	10c06036 	bltu	r2,r3,80623c <___vfprintf_internal_r+0x394>
  8060bc:	18c5883a 	add	r2,r3,r3
  8060c0:	1085883a 	add	r2,r2,r2
  8060c4:	00c02034 	movhi	r3,128
  8060c8:	18d83604 	addi	r3,r3,24792
  8060cc:	10c5883a 	add	r2,r2,r3
  8060d0:	11000017 	ldw	r4,0(r2)
  8060d4:	2000683a 	jmp	r4
  8060d8:	0080704c 	andi	r2,zero,449
  8060dc:	0080623c 	xorhi	r2,zero,392
  8060e0:	0080623c 	xorhi	r2,zero,392
  8060e4:	00807038 	rdprs	r2,zero,448
  8060e8:	0080623c 	xorhi	r2,zero,392
  8060ec:	0080623c 	xorhi	r2,zero,392
  8060f0:	0080623c 	xorhi	r2,zero,392
  8060f4:	0080623c 	xorhi	r2,zero,392
  8060f8:	0080623c 	xorhi	r2,zero,392
  8060fc:	0080623c 	xorhi	r2,zero,392
  806100:	00806e18 	cmpnei	r2,zero,440
  806104:	00807028 	cmpgeui	r2,zero,448
  806108:	0080623c 	xorhi	r2,zero,392
  80610c:	00806e30 	cmpltui	r2,zero,440
  806110:	008070d0 	cmplti	r2,zero,451
  806114:	0080623c 	xorhi	r2,zero,392
  806118:	008070bc 	xorhi	r2,zero,450
  80611c:	00807078 	rdprs	r2,zero,449
  806120:	00807078 	rdprs	r2,zero,449
  806124:	00807078 	rdprs	r2,zero,449
  806128:	00807078 	rdprs	r2,zero,449
  80612c:	00807078 	rdprs	r2,zero,449
  806130:	00807078 	rdprs	r2,zero,449
  806134:	00807078 	rdprs	r2,zero,449
  806138:	00807078 	rdprs	r2,zero,449
  80613c:	00807078 	rdprs	r2,zero,449
  806140:	0080623c 	xorhi	r2,zero,392
  806144:	0080623c 	xorhi	r2,zero,392
  806148:	0080623c 	xorhi	r2,zero,392
  80614c:	0080623c 	xorhi	r2,zero,392
  806150:	0080623c 	xorhi	r2,zero,392
  806154:	0080623c 	xorhi	r2,zero,392
  806158:	0080623c 	xorhi	r2,zero,392
  80615c:	0080623c 	xorhi	r2,zero,392
  806160:	0080623c 	xorhi	r2,zero,392
  806164:	0080623c 	xorhi	r2,zero,392
  806168:	00806894 	movui	r2,418
  80616c:	00806f00 	call	806f0 <OSCtxSw_SWITCH_PC+0x806b0>
  806170:	0080623c 	xorhi	r2,zero,392
  806174:	00806f00 	call	806f0 <OSCtxSw_SWITCH_PC+0x806b0>
  806178:	0080623c 	xorhi	r2,zero,392
  80617c:	0080623c 	xorhi	r2,zero,392
  806180:	0080623c 	xorhi	r2,zero,392
  806184:	0080623c 	xorhi	r2,zero,392
  806188:	00807064 	muli	r2,zero,449
  80618c:	0080623c 	xorhi	r2,zero,392
  806190:	0080623c 	xorhi	r2,zero,392
  806194:	00806948 	cmpgei	r2,zero,421
  806198:	0080623c 	xorhi	r2,zero,392
  80619c:	0080623c 	xorhi	r2,zero,392
  8061a0:	0080623c 	xorhi	r2,zero,392
  8061a4:	0080623c 	xorhi	r2,zero,392
  8061a8:	0080623c 	xorhi	r2,zero,392
  8061ac:	00806994 	movui	r2,422
  8061b0:	0080623c 	xorhi	r2,zero,392
  8061b4:	0080623c 	xorhi	r2,zero,392
  8061b8:	00806fb4 	movhi	r2,446
  8061bc:	0080623c 	xorhi	r2,zero,392
  8061c0:	0080623c 	xorhi	r2,zero,392
  8061c4:	0080623c 	xorhi	r2,zero,392
  8061c8:	0080623c 	xorhi	r2,zero,392
  8061cc:	0080623c 	xorhi	r2,zero,392
  8061d0:	0080623c 	xorhi	r2,zero,392
  8061d4:	0080623c 	xorhi	r2,zero,392
  8061d8:	0080623c 	xorhi	r2,zero,392
  8061dc:	0080623c 	xorhi	r2,zero,392
  8061e0:	0080623c 	xorhi	r2,zero,392
  8061e4:	00806f88 	cmpgei	r2,zero,446
  8061e8:	008068a0 	cmpeqi	r2,zero,418
  8061ec:	00806f00 	call	806f0 <OSCtxSw_SWITCH_PC+0x806b0>
  8061f0:	00806f00 	call	806f0 <OSCtxSw_SWITCH_PC+0x806b0>
  8061f4:	00806f00 	call	806f0 <OSCtxSw_SWITCH_PC+0x806b0>
  8061f8:	00806eec 	andhi	r2,zero,443
  8061fc:	008068a0 	cmpeqi	r2,zero,418
  806200:	0080623c 	xorhi	r2,zero,392
  806204:	0080623c 	xorhi	r2,zero,392
  806208:	00806e74 	movhi	r2,441
  80620c:	0080623c 	xorhi	r2,zero,392
  806210:	00806e44 	movi	r2,441
  806214:	00806954 	movui	r2,421
  806218:	00806ea4 	muli	r2,zero,442
  80621c:	00806e90 	cmplti	r2,zero,442
  806220:	0080623c 	xorhi	r2,zero,392
  806224:	00807138 	rdprs	r2,zero,452
  806228:	0080623c 	xorhi	r2,zero,392
  80622c:	008069a0 	cmpeqi	r2,zero,422
  806230:	0080623c 	xorhi	r2,zero,392
  806234:	0080623c 	xorhi	r2,zero,392
  806238:	00807018 	cmpnei	r2,zero,448
  80623c:	d9014d17 	ldw	r4,1332(sp)
  806240:	2000ce26 	beq	r4,zero,80657c <___vfprintf_internal_r+0x6d4>
  806244:	01400044 	movi	r5,1
  806248:	d9800f04 	addi	r6,sp,60
  80624c:	d9c14015 	stw	r7,1280(sp)
  806250:	d9414515 	stw	r5,1300(sp)
  806254:	d9814115 	stw	r6,1284(sp)
  806258:	280f883a 	mov	r7,r5
  80625c:	d9000f05 	stb	r4,60(sp)
  806260:	d8000405 	stb	zero,16(sp)
  806264:	d8014615 	stw	zero,1304(sp)
  806268:	d8c14c17 	ldw	r3,1328(sp)
  80626c:	1880008c 	andi	r2,r3,2
  806270:	1005003a 	cmpeq	r2,r2,zero
  806274:	d8815015 	stw	r2,1344(sp)
  806278:	1000031e 	bne	r2,zero,806288 <___vfprintf_internal_r+0x3e0>
  80627c:	d9014517 	ldw	r4,1300(sp)
  806280:	21000084 	addi	r4,r4,2
  806284:	d9014515 	stw	r4,1300(sp)
  806288:	d9414c17 	ldw	r5,1328(sp)
  80628c:	2940210c 	andi	r5,r5,132
  806290:	d9414e15 	stw	r5,1336(sp)
  806294:	28002d1e 	bne	r5,zero,80634c <___vfprintf_internal_r+0x4a4>
  806298:	d9814a17 	ldw	r6,1320(sp)
  80629c:	d8814517 	ldw	r2,1300(sp)
  8062a0:	30a1c83a 	sub	r16,r6,r2
  8062a4:	0400290e 	bge	zero,r16,80634c <___vfprintf_internal_r+0x4a4>
  8062a8:	00800404 	movi	r2,16
  8062ac:	14045e0e 	bge	r2,r16,807428 <___vfprintf_internal_r+0x1580>
  8062b0:	dc800e17 	ldw	r18,56(sp)
  8062b4:	dc400d17 	ldw	r17,52(sp)
  8062b8:	1027883a 	mov	r19,r2
  8062bc:	070020b4 	movhi	fp,130
  8062c0:	e7291b84 	addi	fp,fp,-23442
  8062c4:	050001c4 	movi	r20,7
  8062c8:	00000306 	br	8062d8 <___vfprintf_internal_r+0x430>
  8062cc:	843ffc04 	addi	r16,r16,-16
  8062d0:	ad400204 	addi	r21,r21,8
  8062d4:	9c00130e 	bge	r19,r16,806324 <___vfprintf_internal_r+0x47c>
  8062d8:	94800404 	addi	r18,r18,16
  8062dc:	8c400044 	addi	r17,r17,1
  8062e0:	af000015 	stw	fp,0(r21)
  8062e4:	acc00115 	stw	r19,4(r21)
  8062e8:	dc800e15 	stw	r18,56(sp)
  8062ec:	dc400d15 	stw	r17,52(sp)
  8062f0:	a47ff60e 	bge	r20,r17,8062cc <___vfprintf_internal_r+0x424>
  8062f4:	d9014f17 	ldw	r4,1340(sp)
  8062f8:	b00b883a 	mov	r5,r22
  8062fc:	d9800c04 	addi	r6,sp,48
  806300:	d9c15115 	stw	r7,1348(sp)
  806304:	0805e500 	call	805e50 <__sprint_r>
  806308:	d9c15117 	ldw	r7,1348(sp)
  80630c:	10009e1e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  806310:	843ffc04 	addi	r16,r16,-16
  806314:	dc800e17 	ldw	r18,56(sp)
  806318:	dc400d17 	ldw	r17,52(sp)
  80631c:	dd401904 	addi	r21,sp,100
  806320:	9c3fed16 	blt	r19,r16,8062d8 <___vfprintf_internal_r+0x430>
  806324:	9425883a 	add	r18,r18,r16
  806328:	8c400044 	addi	r17,r17,1
  80632c:	008001c4 	movi	r2,7
  806330:	af000015 	stw	fp,0(r21)
  806334:	ac000115 	stw	r16,4(r21)
  806338:	dc800e15 	stw	r18,56(sp)
  80633c:	dc400d15 	stw	r17,52(sp)
  806340:	1441f516 	blt	r2,r17,806b18 <___vfprintf_internal_r+0xc70>
  806344:	ad400204 	addi	r21,r21,8
  806348:	00000206 	br	806354 <___vfprintf_internal_r+0x4ac>
  80634c:	dc800e17 	ldw	r18,56(sp)
  806350:	dc400d17 	ldw	r17,52(sp)
  806354:	d8800407 	ldb	r2,16(sp)
  806358:	10000b26 	beq	r2,zero,806388 <___vfprintf_internal_r+0x4e0>
  80635c:	00800044 	movi	r2,1
  806360:	94800044 	addi	r18,r18,1
  806364:	8c400044 	addi	r17,r17,1
  806368:	a8800115 	stw	r2,4(r21)
  80636c:	d8c00404 	addi	r3,sp,16
  806370:	008001c4 	movi	r2,7
  806374:	a8c00015 	stw	r3,0(r21)
  806378:	dc800e15 	stw	r18,56(sp)
  80637c:	dc400d15 	stw	r17,52(sp)
  806380:	1441da16 	blt	r2,r17,806aec <___vfprintf_internal_r+0xc44>
  806384:	ad400204 	addi	r21,r21,8
  806388:	d9015017 	ldw	r4,1344(sp)
  80638c:	20000b1e 	bne	r4,zero,8063bc <___vfprintf_internal_r+0x514>
  806390:	d8800444 	addi	r2,sp,17
  806394:	94800084 	addi	r18,r18,2
  806398:	8c400044 	addi	r17,r17,1
  80639c:	a8800015 	stw	r2,0(r21)
  8063a0:	00c00084 	movi	r3,2
  8063a4:	008001c4 	movi	r2,7
  8063a8:	a8c00115 	stw	r3,4(r21)
  8063ac:	dc800e15 	stw	r18,56(sp)
  8063b0:	dc400d15 	stw	r17,52(sp)
  8063b4:	1441c216 	blt	r2,r17,806ac0 <___vfprintf_internal_r+0xc18>
  8063b8:	ad400204 	addi	r21,r21,8
  8063bc:	d9414e17 	ldw	r5,1336(sp)
  8063c0:	00802004 	movi	r2,128
  8063c4:	2880b126 	beq	r5,r2,80668c <___vfprintf_internal_r+0x7e4>
  8063c8:	d8c14617 	ldw	r3,1304(sp)
  8063cc:	19e1c83a 	sub	r16,r3,r7
  8063d0:	0400260e 	bge	zero,r16,80646c <___vfprintf_internal_r+0x5c4>
  8063d4:	00800404 	movi	r2,16
  8063d8:	1403cf0e 	bge	r2,r16,807318 <___vfprintf_internal_r+0x1470>
  8063dc:	1027883a 	mov	r19,r2
  8063e0:	070020b4 	movhi	fp,130
  8063e4:	e7291784 	addi	fp,fp,-23458
  8063e8:	050001c4 	movi	r20,7
  8063ec:	00000306 	br	8063fc <___vfprintf_internal_r+0x554>
  8063f0:	843ffc04 	addi	r16,r16,-16
  8063f4:	ad400204 	addi	r21,r21,8
  8063f8:	9c00130e 	bge	r19,r16,806448 <___vfprintf_internal_r+0x5a0>
  8063fc:	94800404 	addi	r18,r18,16
  806400:	8c400044 	addi	r17,r17,1
  806404:	af000015 	stw	fp,0(r21)
  806408:	acc00115 	stw	r19,4(r21)
  80640c:	dc800e15 	stw	r18,56(sp)
  806410:	dc400d15 	stw	r17,52(sp)
  806414:	a47ff60e 	bge	r20,r17,8063f0 <___vfprintf_internal_r+0x548>
  806418:	d9014f17 	ldw	r4,1340(sp)
  80641c:	b00b883a 	mov	r5,r22
  806420:	d9800c04 	addi	r6,sp,48
  806424:	d9c15115 	stw	r7,1348(sp)
  806428:	0805e500 	call	805e50 <__sprint_r>
  80642c:	d9c15117 	ldw	r7,1348(sp)
  806430:	1000551e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  806434:	843ffc04 	addi	r16,r16,-16
  806438:	dc800e17 	ldw	r18,56(sp)
  80643c:	dc400d17 	ldw	r17,52(sp)
  806440:	dd401904 	addi	r21,sp,100
  806444:	9c3fed16 	blt	r19,r16,8063fc <___vfprintf_internal_r+0x554>
  806448:	9425883a 	add	r18,r18,r16
  80644c:	8c400044 	addi	r17,r17,1
  806450:	008001c4 	movi	r2,7
  806454:	af000015 	stw	fp,0(r21)
  806458:	ac000115 	stw	r16,4(r21)
  80645c:	dc800e15 	stw	r18,56(sp)
  806460:	dc400d15 	stw	r17,52(sp)
  806464:	14418216 	blt	r2,r17,806a70 <___vfprintf_internal_r+0xbc8>
  806468:	ad400204 	addi	r21,r21,8
  80646c:	d9014c17 	ldw	r4,1328(sp)
  806470:	2080400c 	andi	r2,r4,256
  806474:	10004a1e 	bne	r2,zero,8065a0 <___vfprintf_internal_r+0x6f8>
  806478:	d9414117 	ldw	r5,1284(sp)
  80647c:	91e5883a 	add	r18,r18,r7
  806480:	8c400044 	addi	r17,r17,1
  806484:	008001c4 	movi	r2,7
  806488:	a9400015 	stw	r5,0(r21)
  80648c:	a9c00115 	stw	r7,4(r21)
  806490:	dc800e15 	stw	r18,56(sp)
  806494:	dc400d15 	stw	r17,52(sp)
  806498:	14416716 	blt	r2,r17,806a38 <___vfprintf_internal_r+0xb90>
  80649c:	a8c00204 	addi	r3,r21,8
  8064a0:	d9814c17 	ldw	r6,1328(sp)
  8064a4:	3080010c 	andi	r2,r6,4
  8064a8:	10002826 	beq	r2,zero,80654c <___vfprintf_internal_r+0x6a4>
  8064ac:	d8814a17 	ldw	r2,1320(sp)
  8064b0:	d9014517 	ldw	r4,1300(sp)
  8064b4:	1121c83a 	sub	r16,r2,r4
  8064b8:	0400240e 	bge	zero,r16,80654c <___vfprintf_internal_r+0x6a4>
  8064bc:	00800404 	movi	r2,16
  8064c0:	1404550e 	bge	r2,r16,807618 <___vfprintf_internal_r+0x1770>
  8064c4:	dc400d17 	ldw	r17,52(sp)
  8064c8:	1027883a 	mov	r19,r2
  8064cc:	070020b4 	movhi	fp,130
  8064d0:	e7291b84 	addi	fp,fp,-23442
  8064d4:	050001c4 	movi	r20,7
  8064d8:	00000306 	br	8064e8 <___vfprintf_internal_r+0x640>
  8064dc:	843ffc04 	addi	r16,r16,-16
  8064e0:	18c00204 	addi	r3,r3,8
  8064e4:	9c00110e 	bge	r19,r16,80652c <___vfprintf_internal_r+0x684>
  8064e8:	94800404 	addi	r18,r18,16
  8064ec:	8c400044 	addi	r17,r17,1
  8064f0:	1f000015 	stw	fp,0(r3)
  8064f4:	1cc00115 	stw	r19,4(r3)
  8064f8:	dc800e15 	stw	r18,56(sp)
  8064fc:	dc400d15 	stw	r17,52(sp)
  806500:	a47ff60e 	bge	r20,r17,8064dc <___vfprintf_internal_r+0x634>
  806504:	d9014f17 	ldw	r4,1340(sp)
  806508:	b00b883a 	mov	r5,r22
  80650c:	d9800c04 	addi	r6,sp,48
  806510:	0805e500 	call	805e50 <__sprint_r>
  806514:	10001c1e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  806518:	843ffc04 	addi	r16,r16,-16
  80651c:	dc800e17 	ldw	r18,56(sp)
  806520:	dc400d17 	ldw	r17,52(sp)
  806524:	d8c01904 	addi	r3,sp,100
  806528:	9c3fef16 	blt	r19,r16,8064e8 <___vfprintf_internal_r+0x640>
  80652c:	9425883a 	add	r18,r18,r16
  806530:	8c400044 	addi	r17,r17,1
  806534:	008001c4 	movi	r2,7
  806538:	1f000015 	stw	fp,0(r3)
  80653c:	1c000115 	stw	r16,4(r3)
  806540:	dc800e15 	stw	r18,56(sp)
  806544:	dc400d15 	stw	r17,52(sp)
  806548:	1440cb16 	blt	r2,r17,806878 <___vfprintf_internal_r+0x9d0>
  80654c:	d8814a17 	ldw	r2,1320(sp)
  806550:	d9414517 	ldw	r5,1300(sp)
  806554:	1140010e 	bge	r2,r5,80655c <___vfprintf_internal_r+0x6b4>
  806558:	2805883a 	mov	r2,r5
  80655c:	d9814b17 	ldw	r6,1324(sp)
  806560:	308d883a 	add	r6,r6,r2
  806564:	d9814b15 	stw	r6,1324(sp)
  806568:	90013b1e 	bne	r18,zero,806a58 <___vfprintf_internal_r+0xbb0>
  80656c:	d9c14017 	ldw	r7,1280(sp)
  806570:	dd401904 	addi	r21,sp,100
  806574:	d8000d15 	stw	zero,52(sp)
  806578:	003ea706 	br	806018 <___vfprintf_internal_r+0x170>
  80657c:	d8800e17 	ldw	r2,56(sp)
  806580:	1005451e 	bne	r2,zero,807a98 <___vfprintf_internal_r+0x1bf0>
  806584:	d8000d15 	stw	zero,52(sp)
  806588:	b080030b 	ldhu	r2,12(r22)
  80658c:	1080100c 	andi	r2,r2,64
  806590:	103e8726 	beq	r2,zero,805fb0 <___vfprintf_internal_r+0x108>
  806594:	00bfffc4 	movi	r2,-1
  806598:	d8814b15 	stw	r2,1324(sp)
  80659c:	003e8406 	br	805fb0 <___vfprintf_internal_r+0x108>
  8065a0:	d9814d17 	ldw	r6,1332(sp)
  8065a4:	00801944 	movi	r2,101
  8065a8:	11806e16 	blt	r2,r6,806764 <___vfprintf_internal_r+0x8bc>
  8065ac:	d9414717 	ldw	r5,1308(sp)
  8065b0:	00c00044 	movi	r3,1
  8065b4:	1943490e 	bge	r3,r5,8072dc <___vfprintf_internal_r+0x1434>
  8065b8:	d8814117 	ldw	r2,1284(sp)
  8065bc:	94800044 	addi	r18,r18,1
  8065c0:	8c400044 	addi	r17,r17,1
  8065c4:	a8800015 	stw	r2,0(r21)
  8065c8:	008001c4 	movi	r2,7
  8065cc:	a8c00115 	stw	r3,4(r21)
  8065d0:	dc800e15 	stw	r18,56(sp)
  8065d4:	dc400d15 	stw	r17,52(sp)
  8065d8:	1441ca16 	blt	r2,r17,806d04 <___vfprintf_internal_r+0xe5c>
  8065dc:	a8c00204 	addi	r3,r21,8
  8065e0:	d9014917 	ldw	r4,1316(sp)
  8065e4:	00800044 	movi	r2,1
  8065e8:	94800044 	addi	r18,r18,1
  8065ec:	8c400044 	addi	r17,r17,1
  8065f0:	18800115 	stw	r2,4(r3)
  8065f4:	008001c4 	movi	r2,7
  8065f8:	19000015 	stw	r4,0(r3)
  8065fc:	dc800e15 	stw	r18,56(sp)
  806600:	dc400d15 	stw	r17,52(sp)
  806604:	1441b616 	blt	r2,r17,806ce0 <___vfprintf_internal_r+0xe38>
  806608:	1cc00204 	addi	r19,r3,8
  80660c:	d9014217 	ldw	r4,1288(sp)
  806610:	d9414317 	ldw	r5,1292(sp)
  806614:	000d883a 	mov	r6,zero
  806618:	000f883a 	mov	r7,zero
  80661c:	0804e4c0 	call	804e4c <__nedf2>
  806620:	10017426 	beq	r2,zero,806bf4 <___vfprintf_internal_r+0xd4c>
  806624:	d9414717 	ldw	r5,1308(sp)
  806628:	d9814117 	ldw	r6,1284(sp)
  80662c:	8c400044 	addi	r17,r17,1
  806630:	2c85883a 	add	r2,r5,r18
  806634:	14bfffc4 	addi	r18,r2,-1
  806638:	28bfffc4 	addi	r2,r5,-1
  80663c:	30c00044 	addi	r3,r6,1
  806640:	98800115 	stw	r2,4(r19)
  806644:	008001c4 	movi	r2,7
  806648:	98c00015 	stw	r3,0(r19)
  80664c:	dc800e15 	stw	r18,56(sp)
  806650:	dc400d15 	stw	r17,52(sp)
  806654:	14418e16 	blt	r2,r17,806c90 <___vfprintf_internal_r+0xde8>
  806658:	9cc00204 	addi	r19,r19,8
  80665c:	d9414817 	ldw	r5,1312(sp)
  806660:	d8800804 	addi	r2,sp,32
  806664:	8c400044 	addi	r17,r17,1
  806668:	9165883a 	add	r18,r18,r5
  80666c:	98800015 	stw	r2,0(r19)
  806670:	008001c4 	movi	r2,7
  806674:	99400115 	stw	r5,4(r19)
  806678:	dc800e15 	stw	r18,56(sp)
  80667c:	dc400d15 	stw	r17,52(sp)
  806680:	1440ed16 	blt	r2,r17,806a38 <___vfprintf_internal_r+0xb90>
  806684:	98c00204 	addi	r3,r19,8
  806688:	003f8506 	br	8064a0 <___vfprintf_internal_r+0x5f8>
  80668c:	d9814a17 	ldw	r6,1320(sp)
  806690:	d8814517 	ldw	r2,1300(sp)
  806694:	30a1c83a 	sub	r16,r6,r2
  806698:	043f4b0e 	bge	zero,r16,8063c8 <___vfprintf_internal_r+0x520>
  80669c:	00800404 	movi	r2,16
  8066a0:	14043a0e 	bge	r2,r16,80778c <___vfprintf_internal_r+0x18e4>
  8066a4:	1027883a 	mov	r19,r2
  8066a8:	070020b4 	movhi	fp,130
  8066ac:	e7291784 	addi	fp,fp,-23458
  8066b0:	050001c4 	movi	r20,7
  8066b4:	00000306 	br	8066c4 <___vfprintf_internal_r+0x81c>
  8066b8:	843ffc04 	addi	r16,r16,-16
  8066bc:	ad400204 	addi	r21,r21,8
  8066c0:	9c00130e 	bge	r19,r16,806710 <___vfprintf_internal_r+0x868>
  8066c4:	94800404 	addi	r18,r18,16
  8066c8:	8c400044 	addi	r17,r17,1
  8066cc:	af000015 	stw	fp,0(r21)
  8066d0:	acc00115 	stw	r19,4(r21)
  8066d4:	dc800e15 	stw	r18,56(sp)
  8066d8:	dc400d15 	stw	r17,52(sp)
  8066dc:	a47ff60e 	bge	r20,r17,8066b8 <___vfprintf_internal_r+0x810>
  8066e0:	d9014f17 	ldw	r4,1340(sp)
  8066e4:	b00b883a 	mov	r5,r22
  8066e8:	d9800c04 	addi	r6,sp,48
  8066ec:	d9c15115 	stw	r7,1348(sp)
  8066f0:	0805e500 	call	805e50 <__sprint_r>
  8066f4:	d9c15117 	ldw	r7,1348(sp)
  8066f8:	103fa31e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  8066fc:	843ffc04 	addi	r16,r16,-16
  806700:	dc800e17 	ldw	r18,56(sp)
  806704:	dc400d17 	ldw	r17,52(sp)
  806708:	dd401904 	addi	r21,sp,100
  80670c:	9c3fed16 	blt	r19,r16,8066c4 <___vfprintf_internal_r+0x81c>
  806710:	9425883a 	add	r18,r18,r16
  806714:	8c400044 	addi	r17,r17,1
  806718:	008001c4 	movi	r2,7
  80671c:	af000015 	stw	fp,0(r21)
  806720:	ac000115 	stw	r16,4(r21)
  806724:	dc800e15 	stw	r18,56(sp)
  806728:	dc400d15 	stw	r17,52(sp)
  80672c:	14416116 	blt	r2,r17,806cb4 <___vfprintf_internal_r+0xe0c>
  806730:	ad400204 	addi	r21,r21,8
  806734:	003f2406 	br	8063c8 <___vfprintf_internal_r+0x520>
  806738:	d9014f17 	ldw	r4,1340(sp)
  80673c:	080995c0 	call	80995c <__sinit>
  806740:	d9c15117 	ldw	r7,1348(sp)
  806744:	003def06 	br	805f04 <___vfprintf_internal_r+0x5c>
  806748:	d9014f17 	ldw	r4,1340(sp)
  80674c:	b00b883a 	mov	r5,r22
  806750:	d9c15115 	stw	r7,1348(sp)
  806754:	0807d900 	call	807d90 <__swsetup_r>
  806758:	d9c15117 	ldw	r7,1348(sp)
  80675c:	103dee26 	beq	r2,zero,805f18 <___vfprintf_internal_r+0x70>
  806760:	003f8c06 	br	806594 <___vfprintf_internal_r+0x6ec>
  806764:	d9014217 	ldw	r4,1288(sp)
  806768:	d9414317 	ldw	r5,1292(sp)
  80676c:	000d883a 	mov	r6,zero
  806770:	000f883a 	mov	r7,zero
  806774:	0804dc40 	call	804dc4 <__eqdf2>
  806778:	1000f21e 	bne	r2,zero,806b44 <___vfprintf_internal_r+0xc9c>
  80677c:	008020b4 	movhi	r2,130
  806780:	10a91704 	addi	r2,r2,-23460
  806784:	94800044 	addi	r18,r18,1
  806788:	8c400044 	addi	r17,r17,1
  80678c:	a8800015 	stw	r2,0(r21)
  806790:	00c00044 	movi	r3,1
  806794:	008001c4 	movi	r2,7
  806798:	a8c00115 	stw	r3,4(r21)
  80679c:	dc800e15 	stw	r18,56(sp)
  8067a0:	dc400d15 	stw	r17,52(sp)
  8067a4:	14430016 	blt	r2,r17,8073a8 <___vfprintf_internal_r+0x1500>
  8067a8:	a8c00204 	addi	r3,r21,8
  8067ac:	d8800517 	ldw	r2,20(sp)
  8067b0:	d9014717 	ldw	r4,1308(sp)
  8067b4:	11015c0e 	bge	r2,r4,806d28 <___vfprintf_internal_r+0xe80>
  8067b8:	dc400d17 	ldw	r17,52(sp)
  8067bc:	d9814917 	ldw	r6,1316(sp)
  8067c0:	00800044 	movi	r2,1
  8067c4:	94800044 	addi	r18,r18,1
  8067c8:	8c400044 	addi	r17,r17,1
  8067cc:	18800115 	stw	r2,4(r3)
  8067d0:	008001c4 	movi	r2,7
  8067d4:	19800015 	stw	r6,0(r3)
  8067d8:	dc800e15 	stw	r18,56(sp)
  8067dc:	dc400d15 	stw	r17,52(sp)
  8067e0:	14431616 	blt	r2,r17,80743c <___vfprintf_internal_r+0x1594>
  8067e4:	18c00204 	addi	r3,r3,8
  8067e8:	d8814717 	ldw	r2,1308(sp)
  8067ec:	143fffc4 	addi	r16,r2,-1
  8067f0:	043f2b0e 	bge	zero,r16,8064a0 <___vfprintf_internal_r+0x5f8>
  8067f4:	00800404 	movi	r2,16
  8067f8:	1402a80e 	bge	r2,r16,80729c <___vfprintf_internal_r+0x13f4>
  8067fc:	dc400d17 	ldw	r17,52(sp)
  806800:	1027883a 	mov	r19,r2
  806804:	070020b4 	movhi	fp,130
  806808:	e7291784 	addi	fp,fp,-23458
  80680c:	050001c4 	movi	r20,7
  806810:	00000306 	br	806820 <___vfprintf_internal_r+0x978>
  806814:	18c00204 	addi	r3,r3,8
  806818:	843ffc04 	addi	r16,r16,-16
  80681c:	9c02a20e 	bge	r19,r16,8072a8 <___vfprintf_internal_r+0x1400>
  806820:	94800404 	addi	r18,r18,16
  806824:	8c400044 	addi	r17,r17,1
  806828:	1f000015 	stw	fp,0(r3)
  80682c:	1cc00115 	stw	r19,4(r3)
  806830:	dc800e15 	stw	r18,56(sp)
  806834:	dc400d15 	stw	r17,52(sp)
  806838:	a47ff60e 	bge	r20,r17,806814 <___vfprintf_internal_r+0x96c>
  80683c:	d9014f17 	ldw	r4,1340(sp)
  806840:	b00b883a 	mov	r5,r22
  806844:	d9800c04 	addi	r6,sp,48
  806848:	0805e500 	call	805e50 <__sprint_r>
  80684c:	103f4e1e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  806850:	dc800e17 	ldw	r18,56(sp)
  806854:	dc400d17 	ldw	r17,52(sp)
  806858:	d8c01904 	addi	r3,sp,100
  80685c:	003fee06 	br	806818 <___vfprintf_internal_r+0x970>
  806860:	d8802c0b 	ldhu	r2,176(sp)
  806864:	00ffffc4 	movi	r3,-1
  806868:	d8c14b15 	stw	r3,1324(sp)
  80686c:	1080100c 	andi	r2,r2,64
  806870:	103dcc1e 	bne	r2,zero,805fa4 <___vfprintf_internal_r+0xfc>
  806874:	003dce06 	br	805fb0 <___vfprintf_internal_r+0x108>
  806878:	d9014f17 	ldw	r4,1340(sp)
  80687c:	b00b883a 	mov	r5,r22
  806880:	d9800c04 	addi	r6,sp,48
  806884:	0805e500 	call	805e50 <__sprint_r>
  806888:	103f3f1e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  80688c:	dc800e17 	ldw	r18,56(sp)
  806890:	003f2e06 	br	80654c <___vfprintf_internal_r+0x6a4>
  806894:	d9414c17 	ldw	r5,1328(sp)
  806898:	29400414 	ori	r5,r5,16
  80689c:	d9414c15 	stw	r5,1328(sp)
  8068a0:	d9814c17 	ldw	r6,1328(sp)
  8068a4:	3080080c 	andi	r2,r6,32
  8068a8:	10014f1e 	bne	r2,zero,806de8 <___vfprintf_internal_r+0xf40>
  8068ac:	d8c14c17 	ldw	r3,1328(sp)
  8068b0:	1880040c 	andi	r2,r3,16
  8068b4:	1002f01e 	bne	r2,zero,807478 <___vfprintf_internal_r+0x15d0>
  8068b8:	d9014c17 	ldw	r4,1328(sp)
  8068bc:	2080100c 	andi	r2,r4,64
  8068c0:	1002ed26 	beq	r2,zero,807478 <___vfprintf_internal_r+0x15d0>
  8068c4:	3880000f 	ldh	r2,0(r7)
  8068c8:	39c00104 	addi	r7,r7,4
  8068cc:	d9c14015 	stw	r7,1280(sp)
  8068d0:	1023d7fa 	srai	r17,r2,31
  8068d4:	1021883a 	mov	r16,r2
  8068d8:	88037816 	blt	r17,zero,8076bc <___vfprintf_internal_r+0x1814>
  8068dc:	01000044 	movi	r4,1
  8068e0:	98000416 	blt	r19,zero,8068f4 <___vfprintf_internal_r+0xa4c>
  8068e4:	d8c14c17 	ldw	r3,1328(sp)
  8068e8:	00bfdfc4 	movi	r2,-129
  8068ec:	1886703a 	and	r3,r3,r2
  8068f0:	d8c14c15 	stw	r3,1328(sp)
  8068f4:	8444b03a 	or	r2,r16,r17
  8068f8:	10022c1e 	bne	r2,zero,8071ac <___vfprintf_internal_r+0x1304>
  8068fc:	98022b1e 	bne	r19,zero,8071ac <___vfprintf_internal_r+0x1304>
  806900:	20803fcc 	andi	r2,r4,255
  806904:	1002a126 	beq	r2,zero,80738c <___vfprintf_internal_r+0x14e4>
  806908:	d8c01904 	addi	r3,sp,100
  80690c:	dd000f04 	addi	r20,sp,60
  806910:	d8c14115 	stw	r3,1284(sp)
  806914:	d8c14117 	ldw	r3,1284(sp)
  806918:	dcc14515 	stw	r19,1300(sp)
  80691c:	a0c5c83a 	sub	r2,r20,r3
  806920:	11c00a04 	addi	r7,r2,40
  806924:	99c0010e 	bge	r19,r7,80692c <___vfprintf_internal_r+0xa84>
  806928:	d9c14515 	stw	r7,1300(sp)
  80692c:	dcc14615 	stw	r19,1304(sp)
  806930:	d8800407 	ldb	r2,16(sp)
  806934:	103e4c26 	beq	r2,zero,806268 <___vfprintf_internal_r+0x3c0>
  806938:	d8814517 	ldw	r2,1300(sp)
  80693c:	10800044 	addi	r2,r2,1
  806940:	d8814515 	stw	r2,1300(sp)
  806944:	003e4806 	br	806268 <___vfprintf_internal_r+0x3c0>
  806948:	d9814c17 	ldw	r6,1328(sp)
  80694c:	31800414 	ori	r6,r6,16
  806950:	d9814c15 	stw	r6,1328(sp)
  806954:	d8c14c17 	ldw	r3,1328(sp)
  806958:	1880080c 	andi	r2,r3,32
  80695c:	1001271e 	bne	r2,zero,806dfc <___vfprintf_internal_r+0xf54>
  806960:	d9414c17 	ldw	r5,1328(sp)
  806964:	2880040c 	andi	r2,r5,16
  806968:	1002bc1e 	bne	r2,zero,80745c <___vfprintf_internal_r+0x15b4>
  80696c:	d9814c17 	ldw	r6,1328(sp)
  806970:	3080100c 	andi	r2,r6,64
  806974:	1002b926 	beq	r2,zero,80745c <___vfprintf_internal_r+0x15b4>
  806978:	3c00000b 	ldhu	r16,0(r7)
  80697c:	0009883a 	mov	r4,zero
  806980:	39c00104 	addi	r7,r7,4
  806984:	0023883a 	mov	r17,zero
  806988:	d9c14015 	stw	r7,1280(sp)
  80698c:	d8000405 	stb	zero,16(sp)
  806990:	003fd306 	br	8068e0 <___vfprintf_internal_r+0xa38>
  806994:	d9014c17 	ldw	r4,1328(sp)
  806998:	21000414 	ori	r4,r4,16
  80699c:	d9014c15 	stw	r4,1328(sp)
  8069a0:	d9414c17 	ldw	r5,1328(sp)
  8069a4:	2880080c 	andi	r2,r5,32
  8069a8:	1001081e 	bne	r2,zero,806dcc <___vfprintf_internal_r+0xf24>
  8069ac:	d8c14c17 	ldw	r3,1328(sp)
  8069b0:	1880040c 	andi	r2,r3,16
  8069b4:	1002b61e 	bne	r2,zero,807490 <___vfprintf_internal_r+0x15e8>
  8069b8:	d9014c17 	ldw	r4,1328(sp)
  8069bc:	2080100c 	andi	r2,r4,64
  8069c0:	1002b326 	beq	r2,zero,807490 <___vfprintf_internal_r+0x15e8>
  8069c4:	3c00000b 	ldhu	r16,0(r7)
  8069c8:	01000044 	movi	r4,1
  8069cc:	39c00104 	addi	r7,r7,4
  8069d0:	0023883a 	mov	r17,zero
  8069d4:	d9c14015 	stw	r7,1280(sp)
  8069d8:	d8000405 	stb	zero,16(sp)
  8069dc:	003fc006 	br	8068e0 <___vfprintf_internal_r+0xa38>
  8069e0:	d9014f17 	ldw	r4,1340(sp)
  8069e4:	b00b883a 	mov	r5,r22
  8069e8:	d9800c04 	addi	r6,sp,48
  8069ec:	0805e500 	call	805e50 <__sprint_r>
  8069f0:	103ee51e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  8069f4:	dc800e17 	ldw	r18,56(sp)
  8069f8:	d8c01904 	addi	r3,sp,100
  8069fc:	d9814c17 	ldw	r6,1328(sp)
  806a00:	3080004c 	andi	r2,r6,1
  806a04:	1005003a 	cmpeq	r2,r2,zero
  806a08:	103ea51e 	bne	r2,zero,8064a0 <___vfprintf_internal_r+0x5f8>
  806a0c:	00800044 	movi	r2,1
  806a10:	dc400d17 	ldw	r17,52(sp)
  806a14:	18800115 	stw	r2,4(r3)
  806a18:	d8814917 	ldw	r2,1316(sp)
  806a1c:	94800044 	addi	r18,r18,1
  806a20:	8c400044 	addi	r17,r17,1
  806a24:	18800015 	stw	r2,0(r3)
  806a28:	008001c4 	movi	r2,7
  806a2c:	dc800e15 	stw	r18,56(sp)
  806a30:	dc400d15 	stw	r17,52(sp)
  806a34:	1442240e 	bge	r2,r17,8072c8 <___vfprintf_internal_r+0x1420>
  806a38:	d9014f17 	ldw	r4,1340(sp)
  806a3c:	b00b883a 	mov	r5,r22
  806a40:	d9800c04 	addi	r6,sp,48
  806a44:	0805e500 	call	805e50 <__sprint_r>
  806a48:	103ecf1e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  806a4c:	dc800e17 	ldw	r18,56(sp)
  806a50:	d8c01904 	addi	r3,sp,100
  806a54:	003e9206 	br	8064a0 <___vfprintf_internal_r+0x5f8>
  806a58:	d9014f17 	ldw	r4,1340(sp)
  806a5c:	b00b883a 	mov	r5,r22
  806a60:	d9800c04 	addi	r6,sp,48
  806a64:	0805e500 	call	805e50 <__sprint_r>
  806a68:	103ec026 	beq	r2,zero,80656c <___vfprintf_internal_r+0x6c4>
  806a6c:	003ec606 	br	806588 <___vfprintf_internal_r+0x6e0>
  806a70:	d9014f17 	ldw	r4,1340(sp)
  806a74:	b00b883a 	mov	r5,r22
  806a78:	d9800c04 	addi	r6,sp,48
  806a7c:	d9c15115 	stw	r7,1348(sp)
  806a80:	0805e500 	call	805e50 <__sprint_r>
  806a84:	d9c15117 	ldw	r7,1348(sp)
  806a88:	103ebf1e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  806a8c:	dc800e17 	ldw	r18,56(sp)
  806a90:	dc400d17 	ldw	r17,52(sp)
  806a94:	dd401904 	addi	r21,sp,100
  806a98:	003e7406 	br	80646c <___vfprintf_internal_r+0x5c4>
  806a9c:	d9014f17 	ldw	r4,1340(sp)
  806aa0:	b00b883a 	mov	r5,r22
  806aa4:	d9800c04 	addi	r6,sp,48
  806aa8:	d9c15115 	stw	r7,1348(sp)
  806aac:	0805e500 	call	805e50 <__sprint_r>
  806ab0:	d9c15117 	ldw	r7,1348(sp)
  806ab4:	103eb41e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  806ab8:	dd401904 	addi	r21,sp,100
  806abc:	003d6d06 	br	806074 <___vfprintf_internal_r+0x1cc>
  806ac0:	d9014f17 	ldw	r4,1340(sp)
  806ac4:	b00b883a 	mov	r5,r22
  806ac8:	d9800c04 	addi	r6,sp,48
  806acc:	d9c15115 	stw	r7,1348(sp)
  806ad0:	0805e500 	call	805e50 <__sprint_r>
  806ad4:	d9c15117 	ldw	r7,1348(sp)
  806ad8:	103eab1e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  806adc:	dc800e17 	ldw	r18,56(sp)
  806ae0:	dc400d17 	ldw	r17,52(sp)
  806ae4:	dd401904 	addi	r21,sp,100
  806ae8:	003e3406 	br	8063bc <___vfprintf_internal_r+0x514>
  806aec:	d9014f17 	ldw	r4,1340(sp)
  806af0:	b00b883a 	mov	r5,r22
  806af4:	d9800c04 	addi	r6,sp,48
  806af8:	d9c15115 	stw	r7,1348(sp)
  806afc:	0805e500 	call	805e50 <__sprint_r>
  806b00:	d9c15117 	ldw	r7,1348(sp)
  806b04:	103ea01e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  806b08:	dc800e17 	ldw	r18,56(sp)
  806b0c:	dc400d17 	ldw	r17,52(sp)
  806b10:	dd401904 	addi	r21,sp,100
  806b14:	003e1c06 	br	806388 <___vfprintf_internal_r+0x4e0>
  806b18:	d9014f17 	ldw	r4,1340(sp)
  806b1c:	b00b883a 	mov	r5,r22
  806b20:	d9800c04 	addi	r6,sp,48
  806b24:	d9c15115 	stw	r7,1348(sp)
  806b28:	0805e500 	call	805e50 <__sprint_r>
  806b2c:	d9c15117 	ldw	r7,1348(sp)
  806b30:	103e951e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  806b34:	dc800e17 	ldw	r18,56(sp)
  806b38:	dc400d17 	ldw	r17,52(sp)
  806b3c:	dd401904 	addi	r21,sp,100
  806b40:	003e0406 	br	806354 <___vfprintf_internal_r+0x4ac>
  806b44:	d9000517 	ldw	r4,20(sp)
  806b48:	0102580e 	bge	zero,r4,8074ac <___vfprintf_internal_r+0x1604>
  806b4c:	d9814717 	ldw	r6,1308(sp)
  806b50:	21807a16 	blt	r4,r6,806d3c <___vfprintf_internal_r+0xe94>
  806b54:	d8814117 	ldw	r2,1284(sp)
  806b58:	91a5883a 	add	r18,r18,r6
  806b5c:	8c400044 	addi	r17,r17,1
  806b60:	a8800015 	stw	r2,0(r21)
  806b64:	008001c4 	movi	r2,7
  806b68:	a9800115 	stw	r6,4(r21)
  806b6c:	dc800e15 	stw	r18,56(sp)
  806b70:	dc400d15 	stw	r17,52(sp)
  806b74:	1442fc16 	blt	r2,r17,807768 <___vfprintf_internal_r+0x18c0>
  806b78:	a8c00204 	addi	r3,r21,8
  806b7c:	d9414717 	ldw	r5,1308(sp)
  806b80:	2161c83a 	sub	r16,r4,r5
  806b84:	043f9d0e 	bge	zero,r16,8069fc <___vfprintf_internal_r+0xb54>
  806b88:	00800404 	movi	r2,16
  806b8c:	1402190e 	bge	r2,r16,8073f4 <___vfprintf_internal_r+0x154c>
  806b90:	dc400d17 	ldw	r17,52(sp)
  806b94:	1027883a 	mov	r19,r2
  806b98:	070020b4 	movhi	fp,130
  806b9c:	e7291784 	addi	fp,fp,-23458
  806ba0:	050001c4 	movi	r20,7
  806ba4:	00000306 	br	806bb4 <___vfprintf_internal_r+0xd0c>
  806ba8:	18c00204 	addi	r3,r3,8
  806bac:	843ffc04 	addi	r16,r16,-16
  806bb0:	9c02130e 	bge	r19,r16,807400 <___vfprintf_internal_r+0x1558>
  806bb4:	94800404 	addi	r18,r18,16
  806bb8:	8c400044 	addi	r17,r17,1
  806bbc:	1f000015 	stw	fp,0(r3)
  806bc0:	1cc00115 	stw	r19,4(r3)
  806bc4:	dc800e15 	stw	r18,56(sp)
  806bc8:	dc400d15 	stw	r17,52(sp)
  806bcc:	a47ff60e 	bge	r20,r17,806ba8 <___vfprintf_internal_r+0xd00>
  806bd0:	d9014f17 	ldw	r4,1340(sp)
  806bd4:	b00b883a 	mov	r5,r22
  806bd8:	d9800c04 	addi	r6,sp,48
  806bdc:	0805e500 	call	805e50 <__sprint_r>
  806be0:	103e691e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  806be4:	dc800e17 	ldw	r18,56(sp)
  806be8:	dc400d17 	ldw	r17,52(sp)
  806bec:	d8c01904 	addi	r3,sp,100
  806bf0:	003fee06 	br	806bac <___vfprintf_internal_r+0xd04>
  806bf4:	d8814717 	ldw	r2,1308(sp)
  806bf8:	143fffc4 	addi	r16,r2,-1
  806bfc:	043e970e 	bge	zero,r16,80665c <___vfprintf_internal_r+0x7b4>
  806c00:	00800404 	movi	r2,16
  806c04:	1400180e 	bge	r2,r16,806c68 <___vfprintf_internal_r+0xdc0>
  806c08:	1029883a 	mov	r20,r2
  806c0c:	070020b4 	movhi	fp,130
  806c10:	e7291784 	addi	fp,fp,-23458
  806c14:	054001c4 	movi	r21,7
  806c18:	00000306 	br	806c28 <___vfprintf_internal_r+0xd80>
  806c1c:	9cc00204 	addi	r19,r19,8
  806c20:	843ffc04 	addi	r16,r16,-16
  806c24:	a400120e 	bge	r20,r16,806c70 <___vfprintf_internal_r+0xdc8>
  806c28:	94800404 	addi	r18,r18,16
  806c2c:	8c400044 	addi	r17,r17,1
  806c30:	9f000015 	stw	fp,0(r19)
  806c34:	9d000115 	stw	r20,4(r19)
  806c38:	dc800e15 	stw	r18,56(sp)
  806c3c:	dc400d15 	stw	r17,52(sp)
  806c40:	ac7ff60e 	bge	r21,r17,806c1c <___vfprintf_internal_r+0xd74>
  806c44:	d9014f17 	ldw	r4,1340(sp)
  806c48:	b00b883a 	mov	r5,r22
  806c4c:	d9800c04 	addi	r6,sp,48
  806c50:	0805e500 	call	805e50 <__sprint_r>
  806c54:	103e4c1e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  806c58:	dc800e17 	ldw	r18,56(sp)
  806c5c:	dc400d17 	ldw	r17,52(sp)
  806c60:	dcc01904 	addi	r19,sp,100
  806c64:	003fee06 	br	806c20 <___vfprintf_internal_r+0xd78>
  806c68:	070020b4 	movhi	fp,130
  806c6c:	e7291784 	addi	fp,fp,-23458
  806c70:	9425883a 	add	r18,r18,r16
  806c74:	8c400044 	addi	r17,r17,1
  806c78:	008001c4 	movi	r2,7
  806c7c:	9f000015 	stw	fp,0(r19)
  806c80:	9c000115 	stw	r16,4(r19)
  806c84:	dc800e15 	stw	r18,56(sp)
  806c88:	dc400d15 	stw	r17,52(sp)
  806c8c:	147e720e 	bge	r2,r17,806658 <___vfprintf_internal_r+0x7b0>
  806c90:	d9014f17 	ldw	r4,1340(sp)
  806c94:	b00b883a 	mov	r5,r22
  806c98:	d9800c04 	addi	r6,sp,48
  806c9c:	0805e500 	call	805e50 <__sprint_r>
  806ca0:	103e391e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  806ca4:	dc800e17 	ldw	r18,56(sp)
  806ca8:	dc400d17 	ldw	r17,52(sp)
  806cac:	dcc01904 	addi	r19,sp,100
  806cb0:	003e6a06 	br	80665c <___vfprintf_internal_r+0x7b4>
  806cb4:	d9014f17 	ldw	r4,1340(sp)
  806cb8:	b00b883a 	mov	r5,r22
  806cbc:	d9800c04 	addi	r6,sp,48
  806cc0:	d9c15115 	stw	r7,1348(sp)
  806cc4:	0805e500 	call	805e50 <__sprint_r>
  806cc8:	d9c15117 	ldw	r7,1348(sp)
  806ccc:	103e2e1e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  806cd0:	dc800e17 	ldw	r18,56(sp)
  806cd4:	dc400d17 	ldw	r17,52(sp)
  806cd8:	dd401904 	addi	r21,sp,100
  806cdc:	003dba06 	br	8063c8 <___vfprintf_internal_r+0x520>
  806ce0:	d9014f17 	ldw	r4,1340(sp)
  806ce4:	b00b883a 	mov	r5,r22
  806ce8:	d9800c04 	addi	r6,sp,48
  806cec:	0805e500 	call	805e50 <__sprint_r>
  806cf0:	103e251e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  806cf4:	dc800e17 	ldw	r18,56(sp)
  806cf8:	dc400d17 	ldw	r17,52(sp)
  806cfc:	dcc01904 	addi	r19,sp,100
  806d00:	003e4206 	br	80660c <___vfprintf_internal_r+0x764>
  806d04:	d9014f17 	ldw	r4,1340(sp)
  806d08:	b00b883a 	mov	r5,r22
  806d0c:	d9800c04 	addi	r6,sp,48
  806d10:	0805e500 	call	805e50 <__sprint_r>
  806d14:	103e1c1e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  806d18:	dc800e17 	ldw	r18,56(sp)
  806d1c:	dc400d17 	ldw	r17,52(sp)
  806d20:	d8c01904 	addi	r3,sp,100
  806d24:	003e2e06 	br	8065e0 <___vfprintf_internal_r+0x738>
  806d28:	d9414c17 	ldw	r5,1328(sp)
  806d2c:	2880004c 	andi	r2,r5,1
  806d30:	1005003a 	cmpeq	r2,r2,zero
  806d34:	103dda1e 	bne	r2,zero,8064a0 <___vfprintf_internal_r+0x5f8>
  806d38:	003e9f06 	br	8067b8 <___vfprintf_internal_r+0x910>
  806d3c:	d8c14117 	ldw	r3,1284(sp)
  806d40:	9125883a 	add	r18,r18,r4
  806d44:	8c400044 	addi	r17,r17,1
  806d48:	008001c4 	movi	r2,7
  806d4c:	a8c00015 	stw	r3,0(r21)
  806d50:	a9000115 	stw	r4,4(r21)
  806d54:	dc800e15 	stw	r18,56(sp)
  806d58:	dc400d15 	stw	r17,52(sp)
  806d5c:	14426c16 	blt	r2,r17,807710 <___vfprintf_internal_r+0x1868>
  806d60:	a8c00204 	addi	r3,r21,8
  806d64:	d9414917 	ldw	r5,1316(sp)
  806d68:	00800044 	movi	r2,1
  806d6c:	94800044 	addi	r18,r18,1
  806d70:	8c400044 	addi	r17,r17,1
  806d74:	18800115 	stw	r2,4(r3)
  806d78:	008001c4 	movi	r2,7
  806d7c:	19400015 	stw	r5,0(r3)
  806d80:	dc800e15 	stw	r18,56(sp)
  806d84:	dc400d15 	stw	r17,52(sp)
  806d88:	2021883a 	mov	r16,r4
  806d8c:	14425616 	blt	r2,r17,8076e8 <___vfprintf_internal_r+0x1840>
  806d90:	19400204 	addi	r5,r3,8
  806d94:	d9814717 	ldw	r6,1308(sp)
  806d98:	8c400044 	addi	r17,r17,1
  806d9c:	dc400d15 	stw	r17,52(sp)
  806da0:	3107c83a 	sub	r3,r6,r4
  806da4:	d9014117 	ldw	r4,1284(sp)
  806da8:	90e5883a 	add	r18,r18,r3
  806dac:	28c00115 	stw	r3,4(r5)
  806db0:	8105883a 	add	r2,r16,r4
  806db4:	28800015 	stw	r2,0(r5)
  806db8:	008001c4 	movi	r2,7
  806dbc:	dc800e15 	stw	r18,56(sp)
  806dc0:	147f1d16 	blt	r2,r17,806a38 <___vfprintf_internal_r+0xb90>
  806dc4:	28c00204 	addi	r3,r5,8
  806dc8:	003db506 	br	8064a0 <___vfprintf_internal_r+0x5f8>
  806dcc:	3c000017 	ldw	r16,0(r7)
  806dd0:	3c400117 	ldw	r17,4(r7)
  806dd4:	39800204 	addi	r6,r7,8
  806dd8:	01000044 	movi	r4,1
  806ddc:	d9814015 	stw	r6,1280(sp)
  806de0:	d8000405 	stb	zero,16(sp)
  806de4:	003ebe06 	br	8068e0 <___vfprintf_internal_r+0xa38>
  806de8:	3c000017 	ldw	r16,0(r7)
  806dec:	3c400117 	ldw	r17,4(r7)
  806df0:	38800204 	addi	r2,r7,8
  806df4:	d8814015 	stw	r2,1280(sp)
  806df8:	003eb706 	br	8068d8 <___vfprintf_internal_r+0xa30>
  806dfc:	3c000017 	ldw	r16,0(r7)
  806e00:	3c400117 	ldw	r17,4(r7)
  806e04:	39000204 	addi	r4,r7,8
  806e08:	d9014015 	stw	r4,1280(sp)
  806e0c:	0009883a 	mov	r4,zero
  806e10:	d8000405 	stb	zero,16(sp)
  806e14:	003eb206 	br	8068e0 <___vfprintf_internal_r+0xa38>
  806e18:	38c00017 	ldw	r3,0(r7)
  806e1c:	39c00104 	addi	r7,r7,4
  806e20:	d8c14a15 	stw	r3,1320(sp)
  806e24:	1800d70e 	bge	r3,zero,807184 <___vfprintf_internal_r+0x12dc>
  806e28:	00c7c83a 	sub	r3,zero,r3
  806e2c:	d8c14a15 	stw	r3,1320(sp)
  806e30:	d9014c17 	ldw	r4,1328(sp)
  806e34:	b8c00007 	ldb	r3,0(r23)
  806e38:	21000114 	ori	r4,r4,4
  806e3c:	d9014c15 	stw	r4,1328(sp)
  806e40:	003c9806 	br	8060a4 <___vfprintf_internal_r+0x1fc>
  806e44:	d9814c17 	ldw	r6,1328(sp)
  806e48:	3080080c 	andi	r2,r6,32
  806e4c:	1001f626 	beq	r2,zero,807628 <___vfprintf_internal_r+0x1780>
  806e50:	d9014b17 	ldw	r4,1324(sp)
  806e54:	38800017 	ldw	r2,0(r7)
  806e58:	39c00104 	addi	r7,r7,4
  806e5c:	d9c14015 	stw	r7,1280(sp)
  806e60:	2007d7fa 	srai	r3,r4,31
  806e64:	d9c14017 	ldw	r7,1280(sp)
  806e68:	11000015 	stw	r4,0(r2)
  806e6c:	10c00115 	stw	r3,4(r2)
  806e70:	003c6906 	br	806018 <___vfprintf_internal_r+0x170>
  806e74:	b8c00007 	ldb	r3,0(r23)
  806e78:	00801b04 	movi	r2,108
  806e7c:	18825526 	beq	r3,r2,8077d4 <___vfprintf_internal_r+0x192c>
  806e80:	d9414c17 	ldw	r5,1328(sp)
  806e84:	29400414 	ori	r5,r5,16
  806e88:	d9414c15 	stw	r5,1328(sp)
  806e8c:	003c8506 	br	8060a4 <___vfprintf_internal_r+0x1fc>
  806e90:	d9814c17 	ldw	r6,1328(sp)
  806e94:	b8c00007 	ldb	r3,0(r23)
  806e98:	31800814 	ori	r6,r6,32
  806e9c:	d9814c15 	stw	r6,1328(sp)
  806ea0:	003c8006 	br	8060a4 <___vfprintf_internal_r+0x1fc>
  806ea4:	d8814c17 	ldw	r2,1328(sp)
  806ea8:	3c000017 	ldw	r16,0(r7)
  806eac:	00c01e04 	movi	r3,120
  806eb0:	10800094 	ori	r2,r2,2
  806eb4:	d8814c15 	stw	r2,1328(sp)
  806eb8:	39c00104 	addi	r7,r7,4
  806ebc:	014020b4 	movhi	r5,130
  806ec0:	29690004 	addi	r5,r5,-23552
  806ec4:	00800c04 	movi	r2,48
  806ec8:	0023883a 	mov	r17,zero
  806ecc:	01000084 	movi	r4,2
  806ed0:	d9c14015 	stw	r7,1280(sp)
  806ed4:	d8c14d15 	stw	r3,1332(sp)
  806ed8:	d9414415 	stw	r5,1296(sp)
  806edc:	d8800445 	stb	r2,17(sp)
  806ee0:	d8c00485 	stb	r3,18(sp)
  806ee4:	d8000405 	stb	zero,16(sp)
  806ee8:	003e7d06 	br	8068e0 <___vfprintf_internal_r+0xa38>
  806eec:	d8814c17 	ldw	r2,1328(sp)
  806ef0:	b8c00007 	ldb	r3,0(r23)
  806ef4:	10801014 	ori	r2,r2,64
  806ef8:	d8814c15 	stw	r2,1328(sp)
  806efc:	003c6906 	br	8060a4 <___vfprintf_internal_r+0x1fc>
  806f00:	d9414c17 	ldw	r5,1328(sp)
  806f04:	2880020c 	andi	r2,r5,8
  806f08:	1001e526 	beq	r2,zero,8076a0 <___vfprintf_internal_r+0x17f8>
  806f0c:	39800017 	ldw	r6,0(r7)
  806f10:	38800204 	addi	r2,r7,8
  806f14:	d8814015 	stw	r2,1280(sp)
  806f18:	d9814215 	stw	r6,1288(sp)
  806f1c:	39c00117 	ldw	r7,4(r7)
  806f20:	d9c14315 	stw	r7,1292(sp)
  806f24:	d9014217 	ldw	r4,1288(sp)
  806f28:	d9414317 	ldw	r5,1292(sp)
  806f2c:	080c9580 	call	80c958 <__isinfd>
  806f30:	10021d26 	beq	r2,zero,8077a8 <___vfprintf_internal_r+0x1900>
  806f34:	d9014217 	ldw	r4,1288(sp)
  806f38:	d9414317 	ldw	r5,1292(sp)
  806f3c:	000d883a 	mov	r6,zero
  806f40:	000f883a 	mov	r7,zero
  806f44:	0804f5c0 	call	804f5c <__ltdf2>
  806f48:	1002d016 	blt	r2,zero,807a8c <___vfprintf_internal_r+0x1be4>
  806f4c:	d9414d17 	ldw	r5,1332(sp)
  806f50:	008011c4 	movi	r2,71
  806f54:	11421016 	blt	r2,r5,807798 <___vfprintf_internal_r+0x18f0>
  806f58:	018020b4 	movhi	r6,130
  806f5c:	31a90504 	addi	r6,r6,-23532
  806f60:	d9814115 	stw	r6,1284(sp)
  806f64:	d9014c17 	ldw	r4,1328(sp)
  806f68:	00c000c4 	movi	r3,3
  806f6c:	00bfdfc4 	movi	r2,-129
  806f70:	2088703a 	and	r4,r4,r2
  806f74:	180f883a 	mov	r7,r3
  806f78:	d8c14515 	stw	r3,1300(sp)
  806f7c:	d9014c15 	stw	r4,1328(sp)
  806f80:	d8014615 	stw	zero,1304(sp)
  806f84:	003e6a06 	br	806930 <___vfprintf_internal_r+0xa88>
  806f88:	38800017 	ldw	r2,0(r7)
  806f8c:	00c00044 	movi	r3,1
  806f90:	39c00104 	addi	r7,r7,4
  806f94:	d9c14015 	stw	r7,1280(sp)
  806f98:	d9000f04 	addi	r4,sp,60
  806f9c:	180f883a 	mov	r7,r3
  806fa0:	d8c14515 	stw	r3,1300(sp)
  806fa4:	d9014115 	stw	r4,1284(sp)
  806fa8:	d8800f05 	stb	r2,60(sp)
  806fac:	d8000405 	stb	zero,16(sp)
  806fb0:	003cac06 	br	806264 <___vfprintf_internal_r+0x3bc>
  806fb4:	014020b4 	movhi	r5,130
  806fb8:	29690b04 	addi	r5,r5,-23508
  806fbc:	d9414415 	stw	r5,1296(sp)
  806fc0:	d9814c17 	ldw	r6,1328(sp)
  806fc4:	3080080c 	andi	r2,r6,32
  806fc8:	1000ff26 	beq	r2,zero,8073c8 <___vfprintf_internal_r+0x1520>
  806fcc:	3c000017 	ldw	r16,0(r7)
  806fd0:	3c400117 	ldw	r17,4(r7)
  806fd4:	38800204 	addi	r2,r7,8
  806fd8:	d8814015 	stw	r2,1280(sp)
  806fdc:	d9414c17 	ldw	r5,1328(sp)
  806fe0:	2880004c 	andi	r2,r5,1
  806fe4:	1005003a 	cmpeq	r2,r2,zero
  806fe8:	1000b91e 	bne	r2,zero,8072d0 <___vfprintf_internal_r+0x1428>
  806fec:	8444b03a 	or	r2,r16,r17
  806ff0:	1000b726 	beq	r2,zero,8072d0 <___vfprintf_internal_r+0x1428>
  806ff4:	d9814d17 	ldw	r6,1332(sp)
  806ff8:	29400094 	ori	r5,r5,2
  806ffc:	00800c04 	movi	r2,48
  807000:	01000084 	movi	r4,2
  807004:	d9414c15 	stw	r5,1328(sp)
  807008:	d8800445 	stb	r2,17(sp)
  80700c:	d9800485 	stb	r6,18(sp)
  807010:	d8000405 	stb	zero,16(sp)
  807014:	003e3206 	br	8068e0 <___vfprintf_internal_r+0xa38>
  807018:	018020b4 	movhi	r6,130
  80701c:	31a90004 	addi	r6,r6,-23552
  807020:	d9814415 	stw	r6,1296(sp)
  807024:	003fe606 	br	806fc0 <___vfprintf_internal_r+0x1118>
  807028:	00800ac4 	movi	r2,43
  80702c:	d8800405 	stb	r2,16(sp)
  807030:	b8c00007 	ldb	r3,0(r23)
  807034:	003c1b06 	br	8060a4 <___vfprintf_internal_r+0x1fc>
  807038:	d8814c17 	ldw	r2,1328(sp)
  80703c:	b8c00007 	ldb	r3,0(r23)
  807040:	10800054 	ori	r2,r2,1
  807044:	d8814c15 	stw	r2,1328(sp)
  807048:	003c1606 	br	8060a4 <___vfprintf_internal_r+0x1fc>
  80704c:	d8800407 	ldb	r2,16(sp)
  807050:	10004c1e 	bne	r2,zero,807184 <___vfprintf_internal_r+0x12dc>
  807054:	00800804 	movi	r2,32
  807058:	d8800405 	stb	r2,16(sp)
  80705c:	b8c00007 	ldb	r3,0(r23)
  807060:	003c1006 	br	8060a4 <___vfprintf_internal_r+0x1fc>
  807064:	d9814c17 	ldw	r6,1328(sp)
  807068:	b8c00007 	ldb	r3,0(r23)
  80706c:	31800214 	ori	r6,r6,8
  807070:	d9814c15 	stw	r6,1328(sp)
  807074:	003c0b06 	br	8060a4 <___vfprintf_internal_r+0x1fc>
  807078:	0009883a 	mov	r4,zero
  80707c:	04000244 	movi	r16,9
  807080:	01400284 	movi	r5,10
  807084:	d9c15115 	stw	r7,1348(sp)
  807088:	080535c0 	call	80535c <__mulsi3>
  80708c:	b9000007 	ldb	r4,0(r23)
  807090:	d8c14d17 	ldw	r3,1332(sp)
  807094:	bdc00044 	addi	r23,r23,1
  807098:	d9014d15 	stw	r4,1332(sp)
  80709c:	d9414d17 	ldw	r5,1332(sp)
  8070a0:	1885883a 	add	r2,r3,r2
  8070a4:	113ff404 	addi	r4,r2,-48
  8070a8:	28bff404 	addi	r2,r5,-48
  8070ac:	d9c15117 	ldw	r7,1348(sp)
  8070b0:	80bff32e 	bgeu	r16,r2,807080 <___vfprintf_internal_r+0x11d8>
  8070b4:	d9014a15 	stw	r4,1320(sp)
  8070b8:	003bfc06 	br	8060ac <___vfprintf_internal_r+0x204>
  8070bc:	d8814c17 	ldw	r2,1328(sp)
  8070c0:	b8c00007 	ldb	r3,0(r23)
  8070c4:	10802014 	ori	r2,r2,128
  8070c8:	d8814c15 	stw	r2,1328(sp)
  8070cc:	003bf506 	br	8060a4 <___vfprintf_internal_r+0x1fc>
  8070d0:	b8c00007 	ldb	r3,0(r23)
  8070d4:	00800a84 	movi	r2,42
  8070d8:	bdc00044 	addi	r23,r23,1
  8070dc:	18831826 	beq	r3,r2,807d40 <___vfprintf_internal_r+0x1e98>
  8070e0:	d8c14d15 	stw	r3,1332(sp)
  8070e4:	18bff404 	addi	r2,r3,-48
  8070e8:	00c00244 	movi	r3,9
  8070ec:	18827b36 	bltu	r3,r2,807adc <___vfprintf_internal_r+0x1c34>
  8070f0:	1821883a 	mov	r16,r3
  8070f4:	0009883a 	mov	r4,zero
  8070f8:	01400284 	movi	r5,10
  8070fc:	d9c15115 	stw	r7,1348(sp)
  807100:	080535c0 	call	80535c <__mulsi3>
  807104:	d9414d17 	ldw	r5,1332(sp)
  807108:	b9800007 	ldb	r6,0(r23)
  80710c:	d9c15117 	ldw	r7,1348(sp)
  807110:	1145883a 	add	r2,r2,r5
  807114:	113ff404 	addi	r4,r2,-48
  807118:	30bff404 	addi	r2,r6,-48
  80711c:	d9814d15 	stw	r6,1332(sp)
  807120:	bdc00044 	addi	r23,r23,1
  807124:	80bff42e 	bgeu	r16,r2,8070f8 <___vfprintf_internal_r+0x1250>
  807128:	2027883a 	mov	r19,r4
  80712c:	203bdf0e 	bge	r4,zero,8060ac <___vfprintf_internal_r+0x204>
  807130:	04ffffc4 	movi	r19,-1
  807134:	003bdd06 	br	8060ac <___vfprintf_internal_r+0x204>
  807138:	d8000405 	stb	zero,16(sp)
  80713c:	39800017 	ldw	r6,0(r7)
  807140:	39c00104 	addi	r7,r7,4
  807144:	d9c14015 	stw	r7,1280(sp)
  807148:	d9814115 	stw	r6,1284(sp)
  80714c:	3001c926 	beq	r6,zero,807874 <___vfprintf_internal_r+0x19cc>
  807150:	98000e16 	blt	r19,zero,80718c <___vfprintf_internal_r+0x12e4>
  807154:	d9014117 	ldw	r4,1284(sp)
  807158:	000b883a 	mov	r5,zero
  80715c:	980d883a 	mov	r6,r19
  807160:	080afdc0 	call	80afdc <memchr>
  807164:	10025926 	beq	r2,zero,807acc <___vfprintf_internal_r+0x1c24>
  807168:	d8c14117 	ldw	r3,1284(sp)
  80716c:	10cfc83a 	sub	r7,r2,r3
  807170:	99c19e16 	blt	r19,r7,8077ec <___vfprintf_internal_r+0x1944>
  807174:	d9c14515 	stw	r7,1300(sp)
  807178:	38000916 	blt	r7,zero,8071a0 <___vfprintf_internal_r+0x12f8>
  80717c:	d8014615 	stw	zero,1304(sp)
  807180:	003deb06 	br	806930 <___vfprintf_internal_r+0xa88>
  807184:	b8c00007 	ldb	r3,0(r23)
  807188:	003bc606 	br	8060a4 <___vfprintf_internal_r+0x1fc>
  80718c:	d9014117 	ldw	r4,1284(sp)
  807190:	0805ddc0 	call	805ddc <strlen>
  807194:	d8814515 	stw	r2,1300(sp)
  807198:	100f883a 	mov	r7,r2
  80719c:	103ff70e 	bge	r2,zero,80717c <___vfprintf_internal_r+0x12d4>
  8071a0:	d8014515 	stw	zero,1300(sp)
  8071a4:	d8014615 	stw	zero,1304(sp)
  8071a8:	003de106 	br	806930 <___vfprintf_internal_r+0xa88>
  8071ac:	20c03fcc 	andi	r3,r4,255
  8071b0:	00800044 	movi	r2,1
  8071b4:	18802d26 	beq	r3,r2,80726c <___vfprintf_internal_r+0x13c4>
  8071b8:	18800e36 	bltu	r3,r2,8071f4 <___vfprintf_internal_r+0x134c>
  8071bc:	00800084 	movi	r2,2
  8071c0:	1880fa26 	beq	r3,r2,8075ac <___vfprintf_internal_r+0x1704>
  8071c4:	010020b4 	movhi	r4,130
  8071c8:	21291004 	addi	r4,r4,-23488
  8071cc:	0805ddc0 	call	805ddc <strlen>
  8071d0:	100f883a 	mov	r7,r2
  8071d4:	dcc14515 	stw	r19,1300(sp)
  8071d8:	9880010e 	bge	r19,r2,8071e0 <___vfprintf_internal_r+0x1338>
  8071dc:	d8814515 	stw	r2,1300(sp)
  8071e0:	008020b4 	movhi	r2,130
  8071e4:	10a91004 	addi	r2,r2,-23488
  8071e8:	dcc14615 	stw	r19,1304(sp)
  8071ec:	d8814115 	stw	r2,1284(sp)
  8071f0:	003dcf06 	br	806930 <___vfprintf_internal_r+0xa88>
  8071f4:	d9401904 	addi	r5,sp,100
  8071f8:	dd000f04 	addi	r20,sp,60
  8071fc:	d9414115 	stw	r5,1284(sp)
  807200:	880a977a 	slli	r5,r17,29
  807204:	d9814117 	ldw	r6,1284(sp)
  807208:	8004d0fa 	srli	r2,r16,3
  80720c:	8806d0fa 	srli	r3,r17,3
  807210:	810001cc 	andi	r4,r16,7
  807214:	2884b03a 	or	r2,r5,r2
  807218:	31bfffc4 	addi	r6,r6,-1
  80721c:	21000c04 	addi	r4,r4,48
  807220:	d9814115 	stw	r6,1284(sp)
  807224:	10cab03a 	or	r5,r2,r3
  807228:	31000005 	stb	r4,0(r6)
  80722c:	1021883a 	mov	r16,r2
  807230:	1823883a 	mov	r17,r3
  807234:	283ff21e 	bne	r5,zero,807200 <___vfprintf_internal_r+0x1358>
  807238:	d8c14c17 	ldw	r3,1328(sp)
  80723c:	1880004c 	andi	r2,r3,1
  807240:	1005003a 	cmpeq	r2,r2,zero
  807244:	103db31e 	bne	r2,zero,806914 <___vfprintf_internal_r+0xa6c>
  807248:	20803fcc 	andi	r2,r4,255
  80724c:	1080201c 	xori	r2,r2,128
  807250:	10bfe004 	addi	r2,r2,-128
  807254:	00c00c04 	movi	r3,48
  807258:	10fdae26 	beq	r2,r3,806914 <___vfprintf_internal_r+0xa6c>
  80725c:	31bfffc4 	addi	r6,r6,-1
  807260:	d9814115 	stw	r6,1284(sp)
  807264:	30c00005 	stb	r3,0(r6)
  807268:	003daa06 	br	806914 <___vfprintf_internal_r+0xa6c>
  80726c:	88800068 	cmpgeui	r2,r17,1
  807270:	10002c1e 	bne	r2,zero,807324 <___vfprintf_internal_r+0x147c>
  807274:	8800021e 	bne	r17,zero,807280 <___vfprintf_internal_r+0x13d8>
  807278:	00800244 	movi	r2,9
  80727c:	14002936 	bltu	r2,r16,807324 <___vfprintf_internal_r+0x147c>
  807280:	d90018c4 	addi	r4,sp,99
  807284:	dd000f04 	addi	r20,sp,60
  807288:	d9014115 	stw	r4,1284(sp)
  80728c:	d9014117 	ldw	r4,1284(sp)
  807290:	80800c04 	addi	r2,r16,48
  807294:	20800005 	stb	r2,0(r4)
  807298:	003d9e06 	br	806914 <___vfprintf_internal_r+0xa6c>
  80729c:	dc400d17 	ldw	r17,52(sp)
  8072a0:	070020b4 	movhi	fp,130
  8072a4:	e7291784 	addi	fp,fp,-23458
  8072a8:	9425883a 	add	r18,r18,r16
  8072ac:	8c400044 	addi	r17,r17,1
  8072b0:	008001c4 	movi	r2,7
  8072b4:	1f000015 	stw	fp,0(r3)
  8072b8:	1c000115 	stw	r16,4(r3)
  8072bc:	dc800e15 	stw	r18,56(sp)
  8072c0:	dc400d15 	stw	r17,52(sp)
  8072c4:	147ddc16 	blt	r2,r17,806a38 <___vfprintf_internal_r+0xb90>
  8072c8:	18c00204 	addi	r3,r3,8
  8072cc:	003c7406 	br	8064a0 <___vfprintf_internal_r+0x5f8>
  8072d0:	01000084 	movi	r4,2
  8072d4:	d8000405 	stb	zero,16(sp)
  8072d8:	003d8106 	br	8068e0 <___vfprintf_internal_r+0xa38>
  8072dc:	d9814c17 	ldw	r6,1328(sp)
  8072e0:	30c4703a 	and	r2,r6,r3
  8072e4:	1005003a 	cmpeq	r2,r2,zero
  8072e8:	103cb326 	beq	r2,zero,8065b8 <___vfprintf_internal_r+0x710>
  8072ec:	d9014117 	ldw	r4,1284(sp)
  8072f0:	94800044 	addi	r18,r18,1
  8072f4:	8c400044 	addi	r17,r17,1
  8072f8:	008001c4 	movi	r2,7
  8072fc:	a9000015 	stw	r4,0(r21)
  807300:	a8c00115 	stw	r3,4(r21)
  807304:	dc800e15 	stw	r18,56(sp)
  807308:	dc400d15 	stw	r17,52(sp)
  80730c:	147e6016 	blt	r2,r17,806c90 <___vfprintf_internal_r+0xde8>
  807310:	acc00204 	addi	r19,r21,8
  807314:	003cd106 	br	80665c <___vfprintf_internal_r+0x7b4>
  807318:	070020b4 	movhi	fp,130
  80731c:	e7291784 	addi	fp,fp,-23458
  807320:	003c4906 	br	806448 <___vfprintf_internal_r+0x5a0>
  807324:	dd000f04 	addi	r20,sp,60
  807328:	dc801904 	addi	r18,sp,100
  80732c:	8009883a 	mov	r4,r16
  807330:	880b883a 	mov	r5,r17
  807334:	01800284 	movi	r6,10
  807338:	000f883a 	mov	r7,zero
  80733c:	080d7240 	call	80d724 <__umoddi3>
  807340:	12000c04 	addi	r8,r2,48
  807344:	94bfffc4 	addi	r18,r18,-1
  807348:	8009883a 	mov	r4,r16
  80734c:	880b883a 	mov	r5,r17
  807350:	01800284 	movi	r6,10
  807354:	000f883a 	mov	r7,zero
  807358:	92000005 	stb	r8,0(r18)
  80735c:	080d0b80 	call	80d0b8 <__udivdi3>
  807360:	1009883a 	mov	r4,r2
  807364:	1021883a 	mov	r16,r2
  807368:	18800068 	cmpgeui	r2,r3,1
  80736c:	1823883a 	mov	r17,r3
  807370:	103fee1e 	bne	r2,zero,80732c <___vfprintf_internal_r+0x1484>
  807374:	1800021e 	bne	r3,zero,807380 <___vfprintf_internal_r+0x14d8>
  807378:	00800244 	movi	r2,9
  80737c:	113feb36 	bltu	r2,r4,80732c <___vfprintf_internal_r+0x1484>
  807380:	94bfffc4 	addi	r18,r18,-1
  807384:	dc814115 	stw	r18,1284(sp)
  807388:	003fc006 	br	80728c <___vfprintf_internal_r+0x13e4>
  80738c:	d9014c17 	ldw	r4,1328(sp)
  807390:	2080004c 	andi	r2,r4,1
  807394:	10009a1e 	bne	r2,zero,807600 <___vfprintf_internal_r+0x1758>
  807398:	d9401904 	addi	r5,sp,100
  80739c:	dd000f04 	addi	r20,sp,60
  8073a0:	d9414115 	stw	r5,1284(sp)
  8073a4:	003d5b06 	br	806914 <___vfprintf_internal_r+0xa6c>
  8073a8:	d9014f17 	ldw	r4,1340(sp)
  8073ac:	b00b883a 	mov	r5,r22
  8073b0:	d9800c04 	addi	r6,sp,48
  8073b4:	0805e500 	call	805e50 <__sprint_r>
  8073b8:	103c731e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  8073bc:	dc800e17 	ldw	r18,56(sp)
  8073c0:	d8c01904 	addi	r3,sp,100
  8073c4:	003cf906 	br	8067ac <___vfprintf_internal_r+0x904>
  8073c8:	d8c14c17 	ldw	r3,1328(sp)
  8073cc:	1880040c 	andi	r2,r3,16
  8073d0:	1000711e 	bne	r2,zero,807598 <___vfprintf_internal_r+0x16f0>
  8073d4:	d9014c17 	ldw	r4,1328(sp)
  8073d8:	2080100c 	andi	r2,r4,64
  8073dc:	10006e26 	beq	r2,zero,807598 <___vfprintf_internal_r+0x16f0>
  8073e0:	3c00000b 	ldhu	r16,0(r7)
  8073e4:	0023883a 	mov	r17,zero
  8073e8:	39c00104 	addi	r7,r7,4
  8073ec:	d9c14015 	stw	r7,1280(sp)
  8073f0:	003efa06 	br	806fdc <___vfprintf_internal_r+0x1134>
  8073f4:	dc400d17 	ldw	r17,52(sp)
  8073f8:	070020b4 	movhi	fp,130
  8073fc:	e7291784 	addi	fp,fp,-23458
  807400:	9425883a 	add	r18,r18,r16
  807404:	8c400044 	addi	r17,r17,1
  807408:	008001c4 	movi	r2,7
  80740c:	1f000015 	stw	fp,0(r3)
  807410:	1c000115 	stw	r16,4(r3)
  807414:	dc800e15 	stw	r18,56(sp)
  807418:	dc400d15 	stw	r17,52(sp)
  80741c:	147d7016 	blt	r2,r17,8069e0 <___vfprintf_internal_r+0xb38>
  807420:	18c00204 	addi	r3,r3,8
  807424:	003d7506 	br	8069fc <___vfprintf_internal_r+0xb54>
  807428:	dc800e17 	ldw	r18,56(sp)
  80742c:	dc400d17 	ldw	r17,52(sp)
  807430:	070020b4 	movhi	fp,130
  807434:	e7291b84 	addi	fp,fp,-23442
  807438:	003bba06 	br	806324 <___vfprintf_internal_r+0x47c>
  80743c:	d9014f17 	ldw	r4,1340(sp)
  807440:	b00b883a 	mov	r5,r22
  807444:	d9800c04 	addi	r6,sp,48
  807448:	0805e500 	call	805e50 <__sprint_r>
  80744c:	103c4e1e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  807450:	dc800e17 	ldw	r18,56(sp)
  807454:	d8c01904 	addi	r3,sp,100
  807458:	003ce306 	br	8067e8 <___vfprintf_internal_r+0x940>
  80745c:	3c000017 	ldw	r16,0(r7)
  807460:	0009883a 	mov	r4,zero
  807464:	39c00104 	addi	r7,r7,4
  807468:	0023883a 	mov	r17,zero
  80746c:	d9c14015 	stw	r7,1280(sp)
  807470:	d8000405 	stb	zero,16(sp)
  807474:	003d1a06 	br	8068e0 <___vfprintf_internal_r+0xa38>
  807478:	38800017 	ldw	r2,0(r7)
  80747c:	39c00104 	addi	r7,r7,4
  807480:	d9c14015 	stw	r7,1280(sp)
  807484:	1023d7fa 	srai	r17,r2,31
  807488:	1021883a 	mov	r16,r2
  80748c:	003d1206 	br	8068d8 <___vfprintf_internal_r+0xa30>
  807490:	3c000017 	ldw	r16,0(r7)
  807494:	01000044 	movi	r4,1
  807498:	39c00104 	addi	r7,r7,4
  80749c:	0023883a 	mov	r17,zero
  8074a0:	d9c14015 	stw	r7,1280(sp)
  8074a4:	d8000405 	stb	zero,16(sp)
  8074a8:	003d0d06 	br	8068e0 <___vfprintf_internal_r+0xa38>
  8074ac:	008020b4 	movhi	r2,130
  8074b0:	10a91704 	addi	r2,r2,-23460
  8074b4:	94800044 	addi	r18,r18,1
  8074b8:	8c400044 	addi	r17,r17,1
  8074bc:	a8800015 	stw	r2,0(r21)
  8074c0:	00c00044 	movi	r3,1
  8074c4:	008001c4 	movi	r2,7
  8074c8:	a8c00115 	stw	r3,4(r21)
  8074cc:	dc800e15 	stw	r18,56(sp)
  8074d0:	dc400d15 	stw	r17,52(sp)
  8074d4:	1440ca16 	blt	r2,r17,807800 <___vfprintf_internal_r+0x1958>
  8074d8:	a8c00204 	addi	r3,r21,8
  8074dc:	2000061e 	bne	r4,zero,8074f8 <___vfprintf_internal_r+0x1650>
  8074e0:	d9414717 	ldw	r5,1308(sp)
  8074e4:	2800041e 	bne	r5,zero,8074f8 <___vfprintf_internal_r+0x1650>
  8074e8:	d9814c17 	ldw	r6,1328(sp)
  8074ec:	3080004c 	andi	r2,r6,1
  8074f0:	1005003a 	cmpeq	r2,r2,zero
  8074f4:	103bea1e 	bne	r2,zero,8064a0 <___vfprintf_internal_r+0x5f8>
  8074f8:	00800044 	movi	r2,1
  8074fc:	dc400d17 	ldw	r17,52(sp)
  807500:	18800115 	stw	r2,4(r3)
  807504:	d8814917 	ldw	r2,1316(sp)
  807508:	94800044 	addi	r18,r18,1
  80750c:	8c400044 	addi	r17,r17,1
  807510:	18800015 	stw	r2,0(r3)
  807514:	008001c4 	movi	r2,7
  807518:	dc800e15 	stw	r18,56(sp)
  80751c:	dc400d15 	stw	r17,52(sp)
  807520:	1440ca16 	blt	r2,r17,80784c <___vfprintf_internal_r+0x19a4>
  807524:	18c00204 	addi	r3,r3,8
  807528:	0121c83a 	sub	r16,zero,r4
  80752c:	0400500e 	bge	zero,r16,807670 <___vfprintf_internal_r+0x17c8>
  807530:	00800404 	movi	r2,16
  807534:	1400800e 	bge	r2,r16,807738 <___vfprintf_internal_r+0x1890>
  807538:	1027883a 	mov	r19,r2
  80753c:	070020b4 	movhi	fp,130
  807540:	e7291784 	addi	fp,fp,-23458
  807544:	050001c4 	movi	r20,7
  807548:	00000306 	br	807558 <___vfprintf_internal_r+0x16b0>
  80754c:	18c00204 	addi	r3,r3,8
  807550:	843ffc04 	addi	r16,r16,-16
  807554:	9c007a0e 	bge	r19,r16,807740 <___vfprintf_internal_r+0x1898>
  807558:	94800404 	addi	r18,r18,16
  80755c:	8c400044 	addi	r17,r17,1
  807560:	1f000015 	stw	fp,0(r3)
  807564:	1cc00115 	stw	r19,4(r3)
  807568:	dc800e15 	stw	r18,56(sp)
  80756c:	dc400d15 	stw	r17,52(sp)
  807570:	a47ff60e 	bge	r20,r17,80754c <___vfprintf_internal_r+0x16a4>
  807574:	d9014f17 	ldw	r4,1340(sp)
  807578:	b00b883a 	mov	r5,r22
  80757c:	d9800c04 	addi	r6,sp,48
  807580:	0805e500 	call	805e50 <__sprint_r>
  807584:	103c001e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  807588:	dc800e17 	ldw	r18,56(sp)
  80758c:	dc400d17 	ldw	r17,52(sp)
  807590:	d8c01904 	addi	r3,sp,100
  807594:	003fee06 	br	807550 <___vfprintf_internal_r+0x16a8>
  807598:	3c000017 	ldw	r16,0(r7)
  80759c:	0023883a 	mov	r17,zero
  8075a0:	39c00104 	addi	r7,r7,4
  8075a4:	d9c14015 	stw	r7,1280(sp)
  8075a8:	003e8c06 	br	806fdc <___vfprintf_internal_r+0x1134>
  8075ac:	d9401904 	addi	r5,sp,100
  8075b0:	dd000f04 	addi	r20,sp,60
  8075b4:	d9414115 	stw	r5,1284(sp)
  8075b8:	d9814417 	ldw	r6,1296(sp)
  8075bc:	880a973a 	slli	r5,r17,28
  8075c0:	8004d13a 	srli	r2,r16,4
  8075c4:	810003cc 	andi	r4,r16,15
  8075c8:	3109883a 	add	r4,r6,r4
  8075cc:	2884b03a 	or	r2,r5,r2
  8075d0:	21400003 	ldbu	r5,0(r4)
  8075d4:	d9014117 	ldw	r4,1284(sp)
  8075d8:	8806d13a 	srli	r3,r17,4
  8075dc:	1021883a 	mov	r16,r2
  8075e0:	213fffc4 	addi	r4,r4,-1
  8075e4:	d9014115 	stw	r4,1284(sp)
  8075e8:	d9814117 	ldw	r6,1284(sp)
  8075ec:	10c8b03a 	or	r4,r2,r3
  8075f0:	1823883a 	mov	r17,r3
  8075f4:	31400005 	stb	r5,0(r6)
  8075f8:	203fef1e 	bne	r4,zero,8075b8 <___vfprintf_internal_r+0x1710>
  8075fc:	003cc506 	br	806914 <___vfprintf_internal_r+0xa6c>
  807600:	00800c04 	movi	r2,48
  807604:	d98018c4 	addi	r6,sp,99
  807608:	dd000f04 	addi	r20,sp,60
  80760c:	d88018c5 	stb	r2,99(sp)
  807610:	d9814115 	stw	r6,1284(sp)
  807614:	003cbf06 	br	806914 <___vfprintf_internal_r+0xa6c>
  807618:	dc400d17 	ldw	r17,52(sp)
  80761c:	070020b4 	movhi	fp,130
  807620:	e7291b84 	addi	fp,fp,-23442
  807624:	003bc106 	br	80652c <___vfprintf_internal_r+0x684>
  807628:	d9414c17 	ldw	r5,1328(sp)
  80762c:	2880040c 	andi	r2,r5,16
  807630:	10007c26 	beq	r2,zero,807824 <___vfprintf_internal_r+0x197c>
  807634:	38800017 	ldw	r2,0(r7)
  807638:	39c00104 	addi	r7,r7,4
  80763c:	d9c14015 	stw	r7,1280(sp)
  807640:	d9814b17 	ldw	r6,1324(sp)
  807644:	d9c14017 	ldw	r7,1280(sp)
  807648:	11800015 	stw	r6,0(r2)
  80764c:	003a7206 	br	806018 <___vfprintf_internal_r+0x170>
  807650:	d9014f17 	ldw	r4,1340(sp)
  807654:	b00b883a 	mov	r5,r22
  807658:	d9800c04 	addi	r6,sp,48
  80765c:	0805e500 	call	805e50 <__sprint_r>
  807660:	103bc91e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  807664:	dc800e17 	ldw	r18,56(sp)
  807668:	dc400d17 	ldw	r17,52(sp)
  80766c:	d8c01904 	addi	r3,sp,100
  807670:	d9014717 	ldw	r4,1308(sp)
  807674:	d9414117 	ldw	r5,1284(sp)
  807678:	8c400044 	addi	r17,r17,1
  80767c:	9125883a 	add	r18,r18,r4
  807680:	008001c4 	movi	r2,7
  807684:	19400015 	stw	r5,0(r3)
  807688:	19000115 	stw	r4,4(r3)
  80768c:	dc800e15 	stw	r18,56(sp)
  807690:	dc400d15 	stw	r17,52(sp)
  807694:	147ce816 	blt	r2,r17,806a38 <___vfprintf_internal_r+0xb90>
  807698:	18c00204 	addi	r3,r3,8
  80769c:	003b8006 	br	8064a0 <___vfprintf_internal_r+0x5f8>
  8076a0:	38c00017 	ldw	r3,0(r7)
  8076a4:	39000204 	addi	r4,r7,8
  8076a8:	d9014015 	stw	r4,1280(sp)
  8076ac:	d8c14215 	stw	r3,1288(sp)
  8076b0:	39c00117 	ldw	r7,4(r7)
  8076b4:	d9c14315 	stw	r7,1292(sp)
  8076b8:	003e1a06 	br	806f24 <___vfprintf_internal_r+0x107c>
  8076bc:	0005883a 	mov	r2,zero
  8076c0:	1409c83a 	sub	r4,r2,r16
  8076c4:	1105803a 	cmpltu	r2,r2,r4
  8076c8:	044bc83a 	sub	r5,zero,r17
  8076cc:	2885c83a 	sub	r2,r5,r2
  8076d0:	2021883a 	mov	r16,r4
  8076d4:	1023883a 	mov	r17,r2
  8076d8:	01000044 	movi	r4,1
  8076dc:	00800b44 	movi	r2,45
  8076e0:	d8800405 	stb	r2,16(sp)
  8076e4:	003c7e06 	br	8068e0 <___vfprintf_internal_r+0xa38>
  8076e8:	d9014f17 	ldw	r4,1340(sp)
  8076ec:	b00b883a 	mov	r5,r22
  8076f0:	d9800c04 	addi	r6,sp,48
  8076f4:	0805e500 	call	805e50 <__sprint_r>
  8076f8:	103ba31e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  8076fc:	dc800e17 	ldw	r18,56(sp)
  807700:	dc400d17 	ldw	r17,52(sp)
  807704:	d9000517 	ldw	r4,20(sp)
  807708:	d9401904 	addi	r5,sp,100
  80770c:	003da106 	br	806d94 <___vfprintf_internal_r+0xeec>
  807710:	d9014f17 	ldw	r4,1340(sp)
  807714:	b00b883a 	mov	r5,r22
  807718:	d9800c04 	addi	r6,sp,48
  80771c:	0805e500 	call	805e50 <__sprint_r>
  807720:	103b991e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  807724:	dc800e17 	ldw	r18,56(sp)
  807728:	dc400d17 	ldw	r17,52(sp)
  80772c:	d9000517 	ldw	r4,20(sp)
  807730:	d8c01904 	addi	r3,sp,100
  807734:	003d8b06 	br	806d64 <___vfprintf_internal_r+0xebc>
  807738:	070020b4 	movhi	fp,130
  80773c:	e7291784 	addi	fp,fp,-23458
  807740:	9425883a 	add	r18,r18,r16
  807744:	8c400044 	addi	r17,r17,1
  807748:	008001c4 	movi	r2,7
  80774c:	1f000015 	stw	fp,0(r3)
  807750:	1c000115 	stw	r16,4(r3)
  807754:	dc800e15 	stw	r18,56(sp)
  807758:	dc400d15 	stw	r17,52(sp)
  80775c:	147fbc16 	blt	r2,r17,807650 <___vfprintf_internal_r+0x17a8>
  807760:	18c00204 	addi	r3,r3,8
  807764:	003fc206 	br	807670 <___vfprintf_internal_r+0x17c8>
  807768:	d9014f17 	ldw	r4,1340(sp)
  80776c:	b00b883a 	mov	r5,r22
  807770:	d9800c04 	addi	r6,sp,48
  807774:	0805e500 	call	805e50 <__sprint_r>
  807778:	103b831e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  80777c:	dc800e17 	ldw	r18,56(sp)
  807780:	d9000517 	ldw	r4,20(sp)
  807784:	d8c01904 	addi	r3,sp,100
  807788:	003cfc06 	br	806b7c <___vfprintf_internal_r+0xcd4>
  80778c:	070020b4 	movhi	fp,130
  807790:	e7291784 	addi	fp,fp,-23458
  807794:	003bde06 	br	806710 <___vfprintf_internal_r+0x868>
  807798:	008020b4 	movhi	r2,130
  80779c:	10a90604 	addi	r2,r2,-23528
  8077a0:	d8814115 	stw	r2,1284(sp)
  8077a4:	003def06 	br	806f64 <___vfprintf_internal_r+0x10bc>
  8077a8:	d9014217 	ldw	r4,1288(sp)
  8077ac:	d9414317 	ldw	r5,1292(sp)
  8077b0:	0803c9c0 	call	803c9c <__isnand>
  8077b4:	10003926 	beq	r2,zero,80789c <___vfprintf_internal_r+0x19f4>
  8077b8:	d9414d17 	ldw	r5,1332(sp)
  8077bc:	008011c4 	movi	r2,71
  8077c0:	1140ce16 	blt	r2,r5,807afc <___vfprintf_internal_r+0x1c54>
  8077c4:	018020b4 	movhi	r6,130
  8077c8:	31a90704 	addi	r6,r6,-23524
  8077cc:	d9814115 	stw	r6,1284(sp)
  8077d0:	003de406 	br	806f64 <___vfprintf_internal_r+0x10bc>
  8077d4:	d9014c17 	ldw	r4,1328(sp)
  8077d8:	bdc00044 	addi	r23,r23,1
  8077dc:	b8c00007 	ldb	r3,0(r23)
  8077e0:	21000814 	ori	r4,r4,32
  8077e4:	d9014c15 	stw	r4,1328(sp)
  8077e8:	003a2e06 	br	8060a4 <___vfprintf_internal_r+0x1fc>
  8077ec:	dcc14515 	stw	r19,1300(sp)
  8077f0:	98011016 	blt	r19,zero,807c34 <___vfprintf_internal_r+0x1d8c>
  8077f4:	980f883a 	mov	r7,r19
  8077f8:	d8014615 	stw	zero,1304(sp)
  8077fc:	003c4c06 	br	806930 <___vfprintf_internal_r+0xa88>
  807800:	d9014f17 	ldw	r4,1340(sp)
  807804:	b00b883a 	mov	r5,r22
  807808:	d9800c04 	addi	r6,sp,48
  80780c:	0805e500 	call	805e50 <__sprint_r>
  807810:	103b5d1e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  807814:	dc800e17 	ldw	r18,56(sp)
  807818:	d9000517 	ldw	r4,20(sp)
  80781c:	d8c01904 	addi	r3,sp,100
  807820:	003f2e06 	br	8074dc <___vfprintf_internal_r+0x1634>
  807824:	d8c14c17 	ldw	r3,1328(sp)
  807828:	1880100c 	andi	r2,r3,64
  80782c:	1000a026 	beq	r2,zero,807ab0 <___vfprintf_internal_r+0x1c08>
  807830:	38800017 	ldw	r2,0(r7)
  807834:	39c00104 	addi	r7,r7,4
  807838:	d9c14015 	stw	r7,1280(sp)
  80783c:	d9014b17 	ldw	r4,1324(sp)
  807840:	d9c14017 	ldw	r7,1280(sp)
  807844:	1100000d 	sth	r4,0(r2)
  807848:	0039f306 	br	806018 <___vfprintf_internal_r+0x170>
  80784c:	d9014f17 	ldw	r4,1340(sp)
  807850:	b00b883a 	mov	r5,r22
  807854:	d9800c04 	addi	r6,sp,48
  807858:	0805e500 	call	805e50 <__sprint_r>
  80785c:	103b4a1e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  807860:	dc800e17 	ldw	r18,56(sp)
  807864:	dc400d17 	ldw	r17,52(sp)
  807868:	d9000517 	ldw	r4,20(sp)
  80786c:	d8c01904 	addi	r3,sp,100
  807870:	003f2d06 	br	807528 <___vfprintf_internal_r+0x1680>
  807874:	00800184 	movi	r2,6
  807878:	14c09a36 	bltu	r2,r19,807ae4 <___vfprintf_internal_r+0x1c3c>
  80787c:	dcc14515 	stw	r19,1300(sp)
  807880:	9800010e 	bge	r19,zero,807888 <___vfprintf_internal_r+0x19e0>
  807884:	d8014515 	stw	zero,1300(sp)
  807888:	008020b4 	movhi	r2,130
  80788c:	10a90904 	addi	r2,r2,-23516
  807890:	980f883a 	mov	r7,r19
  807894:	d8814115 	stw	r2,1284(sp)
  807898:	003a7206 	br	806264 <___vfprintf_internal_r+0x3bc>
  80789c:	00bfffc4 	movi	r2,-1
  8078a0:	9880e226 	beq	r19,r2,807c2c <___vfprintf_internal_r+0x1d84>
  8078a4:	d9414d17 	ldw	r5,1332(sp)
  8078a8:	008019c4 	movi	r2,103
  8078ac:	2880dc26 	beq	r5,r2,807c20 <___vfprintf_internal_r+0x1d78>
  8078b0:	008011c4 	movi	r2,71
  8078b4:	2880da26 	beq	r5,r2,807c20 <___vfprintf_internal_r+0x1d78>
  8078b8:	d9414c17 	ldw	r5,1328(sp)
  8078bc:	d9014317 	ldw	r4,1292(sp)
  8078c0:	d9814217 	ldw	r6,1288(sp)
  8078c4:	29404014 	ori	r5,r5,256
  8078c8:	d9414c15 	stw	r5,1328(sp)
  8078cc:	2000cc16 	blt	r4,zero,807c00 <___vfprintf_internal_r+0x1d58>
  8078d0:	3021883a 	mov	r16,r6
  8078d4:	2023883a 	mov	r17,r4
  8078d8:	0039883a 	mov	fp,zero
  8078dc:	d9414d17 	ldw	r5,1332(sp)
  8078e0:	00801984 	movi	r2,102
  8078e4:	2880b726 	beq	r5,r2,807bc4 <___vfprintf_internal_r+0x1d1c>
  8078e8:	00801184 	movi	r2,70
  8078ec:	2880b526 	beq	r5,r2,807bc4 <___vfprintf_internal_r+0x1d1c>
  8078f0:	00801944 	movi	r2,101
  8078f4:	2880c826 	beq	r5,r2,807c18 <___vfprintf_internal_r+0x1d70>
  8078f8:	00801144 	movi	r2,69
  8078fc:	2880c626 	beq	r5,r2,807c18 <___vfprintf_internal_r+0x1d70>
  807900:	9829883a 	mov	r20,r19
  807904:	d9014f17 	ldw	r4,1340(sp)
  807908:	d8800504 	addi	r2,sp,20
  80790c:	880d883a 	mov	r6,r17
  807910:	d8800115 	stw	r2,4(sp)
  807914:	d8c00604 	addi	r3,sp,24
  807918:	d8800704 	addi	r2,sp,28
  80791c:	800b883a 	mov	r5,r16
  807920:	01c00084 	movi	r7,2
  807924:	d8c00215 	stw	r3,8(sp)
  807928:	d8800315 	stw	r2,12(sp)
  80792c:	dd000015 	stw	r20,0(sp)
  807930:	08081100 	call	808110 <_dtoa_r>
  807934:	d9814d17 	ldw	r6,1332(sp)
  807938:	d8814115 	stw	r2,1284(sp)
  80793c:	008019c4 	movi	r2,103
  807940:	30809526 	beq	r6,r2,807b98 <___vfprintf_internal_r+0x1cf0>
  807944:	d8c14d17 	ldw	r3,1332(sp)
  807948:	008011c4 	movi	r2,71
  80794c:	18809226 	beq	r3,r2,807b98 <___vfprintf_internal_r+0x1cf0>
  807950:	d9414117 	ldw	r5,1284(sp)
  807954:	d9814d17 	ldw	r6,1332(sp)
  807958:	00801984 	movi	r2,102
  80795c:	2d25883a 	add	r18,r5,r20
  807960:	30808626 	beq	r6,r2,807b7c <___vfprintf_internal_r+0x1cd4>
  807964:	00801184 	movi	r2,70
  807968:	30808426 	beq	r6,r2,807b7c <___vfprintf_internal_r+0x1cd4>
  80796c:	000d883a 	mov	r6,zero
  807970:	000f883a 	mov	r7,zero
  807974:	880b883a 	mov	r5,r17
  807978:	8009883a 	mov	r4,r16
  80797c:	0804dc40 	call	804dc4 <__eqdf2>
  807980:	1000751e 	bne	r2,zero,807b58 <___vfprintf_internal_r+0x1cb0>
  807984:	9005883a 	mov	r2,r18
  807988:	dc800715 	stw	r18,28(sp)
  80798c:	d9014117 	ldw	r4,1284(sp)
  807990:	d9414d17 	ldw	r5,1332(sp)
  807994:	00c019c4 	movi	r3,103
  807998:	1125c83a 	sub	r18,r2,r4
  80799c:	28c06826 	beq	r5,r3,807b40 <___vfprintf_internal_r+0x1c98>
  8079a0:	008011c4 	movi	r2,71
  8079a4:	28806626 	beq	r5,r2,807b40 <___vfprintf_internal_r+0x1c98>
  8079a8:	d9000517 	ldw	r4,20(sp)
  8079ac:	d8c14d17 	ldw	r3,1332(sp)
  8079b0:	00801944 	movi	r2,101
  8079b4:	10c05516 	blt	r2,r3,807b0c <___vfprintf_internal_r+0x1c64>
  8079b8:	213fffc4 	addi	r4,r4,-1
  8079bc:	d9000515 	stw	r4,20(sp)
  8079c0:	d8c00805 	stb	r3,32(sp)
  8079c4:	2021883a 	mov	r16,r4
  8079c8:	2000c116 	blt	r4,zero,807cd0 <___vfprintf_internal_r+0x1e28>
  8079cc:	00800ac4 	movi	r2,43
  8079d0:	d8800845 	stb	r2,33(sp)
  8079d4:	00800244 	movi	r2,9
  8079d8:	1400af0e 	bge	r2,r16,807c98 <___vfprintf_internal_r+0x1df0>
  8079dc:	1027883a 	mov	r19,r2
  8079e0:	dc400b84 	addi	r17,sp,46
  8079e4:	8009883a 	mov	r4,r16
  8079e8:	01400284 	movi	r5,10
  8079ec:	08052ec0 	call	8052ec <__modsi3>
  8079f0:	10800c04 	addi	r2,r2,48
  8079f4:	8c7fffc4 	addi	r17,r17,-1
  8079f8:	8009883a 	mov	r4,r16
  8079fc:	01400284 	movi	r5,10
  807a00:	88800005 	stb	r2,0(r17)
  807a04:	080528c0 	call	80528c <__divsi3>
  807a08:	1021883a 	mov	r16,r2
  807a0c:	98bff516 	blt	r19,r2,8079e4 <___vfprintf_internal_r+0x1b3c>
  807a10:	10c00c04 	addi	r3,r2,48
  807a14:	d88009c4 	addi	r2,sp,39
  807a18:	108001c4 	addi	r2,r2,7
  807a1c:	897fffc4 	addi	r5,r17,-1
  807a20:	88ffffc5 	stb	r3,-1(r17)
  807a24:	2880a72e 	bgeu	r5,r2,807cc4 <___vfprintf_internal_r+0x1e1c>
  807a28:	1009883a 	mov	r4,r2
  807a2c:	d9800804 	addi	r6,sp,32
  807a30:	d8c00884 	addi	r3,sp,34
  807a34:	28800003 	ldbu	r2,0(r5)
  807a38:	29400044 	addi	r5,r5,1
  807a3c:	18800005 	stb	r2,0(r3)
  807a40:	18c00044 	addi	r3,r3,1
  807a44:	293ffb36 	bltu	r5,r4,807a34 <___vfprintf_internal_r+0x1b8c>
  807a48:	1987c83a 	sub	r3,r3,r6
  807a4c:	00800044 	movi	r2,1
  807a50:	d8c14815 	stw	r3,1312(sp)
  807a54:	90cf883a 	add	r7,r18,r3
  807a58:	1480960e 	bge	r2,r18,807cb4 <___vfprintf_internal_r+0x1e0c>
  807a5c:	39c00044 	addi	r7,r7,1
  807a60:	d9c14515 	stw	r7,1300(sp)
  807a64:	38003416 	blt	r7,zero,807b38 <___vfprintf_internal_r+0x1c90>
  807a68:	e0803fcc 	andi	r2,fp,255
  807a6c:	1080201c 	xori	r2,r2,128
  807a70:	10bfe004 	addi	r2,r2,-128
  807a74:	10004e26 	beq	r2,zero,807bb0 <___vfprintf_internal_r+0x1d08>
  807a78:	00800b44 	movi	r2,45
  807a7c:	dc814715 	stw	r18,1308(sp)
  807a80:	d8014615 	stw	zero,1304(sp)
  807a84:	d8800405 	stb	r2,16(sp)
  807a88:	003bab06 	br	806938 <___vfprintf_internal_r+0xa90>
  807a8c:	00800b44 	movi	r2,45
  807a90:	d8800405 	stb	r2,16(sp)
  807a94:	003d2d06 	br	806f4c <___vfprintf_internal_r+0x10a4>
  807a98:	d9014f17 	ldw	r4,1340(sp)
  807a9c:	b00b883a 	mov	r5,r22
  807aa0:	d9800c04 	addi	r6,sp,48
  807aa4:	0805e500 	call	805e50 <__sprint_r>
  807aa8:	103ab71e 	bne	r2,zero,806588 <___vfprintf_internal_r+0x6e0>
  807aac:	003ab506 	br	806584 <___vfprintf_internal_r+0x6dc>
  807ab0:	38800017 	ldw	r2,0(r7)
  807ab4:	39c00104 	addi	r7,r7,4
  807ab8:	d9c14015 	stw	r7,1280(sp)
  807abc:	d9414b17 	ldw	r5,1324(sp)
  807ac0:	d9c14017 	ldw	r7,1280(sp)
  807ac4:	11400015 	stw	r5,0(r2)
  807ac8:	00395306 	br	806018 <___vfprintf_internal_r+0x170>
  807acc:	980f883a 	mov	r7,r19
  807ad0:	dcc14515 	stw	r19,1300(sp)
  807ad4:	d8014615 	stw	zero,1304(sp)
  807ad8:	003b9506 	br	806930 <___vfprintf_internal_r+0xa88>
  807adc:	0027883a 	mov	r19,zero
  807ae0:	00397206 	br	8060ac <___vfprintf_internal_r+0x204>
  807ae4:	00c020b4 	movhi	r3,130
  807ae8:	18e90904 	addi	r3,r3,-23516
  807aec:	100f883a 	mov	r7,r2
  807af0:	d8814515 	stw	r2,1300(sp)
  807af4:	d8c14115 	stw	r3,1284(sp)
  807af8:	0039da06 	br	806264 <___vfprintf_internal_r+0x3bc>
  807afc:	008020b4 	movhi	r2,130
  807b00:	10a90804 	addi	r2,r2,-23520
  807b04:	d8814115 	stw	r2,1284(sp)
  807b08:	003d1606 	br	806f64 <___vfprintf_internal_r+0x10bc>
  807b0c:	d9414d17 	ldw	r5,1332(sp)
  807b10:	00801984 	movi	r2,102
  807b14:	28804926 	beq	r5,r2,807c3c <___vfprintf_internal_r+0x1d94>
  807b18:	200f883a 	mov	r7,r4
  807b1c:	24805716 	blt	r4,r18,807c7c <___vfprintf_internal_r+0x1dd4>
  807b20:	d9414c17 	ldw	r5,1328(sp)
  807b24:	2880004c 	andi	r2,r5,1
  807b28:	10000126 	beq	r2,zero,807b30 <___vfprintf_internal_r+0x1c88>
  807b2c:	21c00044 	addi	r7,r4,1
  807b30:	d9c14515 	stw	r7,1300(sp)
  807b34:	383fcc0e 	bge	r7,zero,807a68 <___vfprintf_internal_r+0x1bc0>
  807b38:	d8014515 	stw	zero,1300(sp)
  807b3c:	003fca06 	br	807a68 <___vfprintf_internal_r+0x1bc0>
  807b40:	d9000517 	ldw	r4,20(sp)
  807b44:	00bfff04 	movi	r2,-4
  807b48:	1100480e 	bge	r2,r4,807c6c <___vfprintf_internal_r+0x1dc4>
  807b4c:	99004716 	blt	r19,r4,807c6c <___vfprintf_internal_r+0x1dc4>
  807b50:	d8c14d15 	stw	r3,1332(sp)
  807b54:	003ff006 	br	807b18 <___vfprintf_internal_r+0x1c70>
  807b58:	d8800717 	ldw	r2,28(sp)
  807b5c:	14bf8b2e 	bgeu	r2,r18,80798c <___vfprintf_internal_r+0x1ae4>
  807b60:	9007883a 	mov	r3,r18
  807b64:	01000c04 	movi	r4,48
  807b68:	11000005 	stb	r4,0(r2)
  807b6c:	10800044 	addi	r2,r2,1
  807b70:	d8800715 	stw	r2,28(sp)
  807b74:	18bffc1e 	bne	r3,r2,807b68 <___vfprintf_internal_r+0x1cc0>
  807b78:	003f8406 	br	80798c <___vfprintf_internal_r+0x1ae4>
  807b7c:	d8814117 	ldw	r2,1284(sp)
  807b80:	10c00007 	ldb	r3,0(r2)
  807b84:	00800c04 	movi	r2,48
  807b88:	18805b26 	beq	r3,r2,807cf8 <___vfprintf_internal_r+0x1e50>
  807b8c:	d9000517 	ldw	r4,20(sp)
  807b90:	9125883a 	add	r18,r18,r4
  807b94:	003f7506 	br	80796c <___vfprintf_internal_r+0x1ac4>
  807b98:	d9014c17 	ldw	r4,1328(sp)
  807b9c:	2080004c 	andi	r2,r4,1
  807ba0:	1005003a 	cmpeq	r2,r2,zero
  807ba4:	103f6a26 	beq	r2,zero,807950 <___vfprintf_internal_r+0x1aa8>
  807ba8:	d8800717 	ldw	r2,28(sp)
  807bac:	003f7706 	br	80798c <___vfprintf_internal_r+0x1ae4>
  807bb0:	d9c14515 	stw	r7,1300(sp)
  807bb4:	38004d16 	blt	r7,zero,807cec <___vfprintf_internal_r+0x1e44>
  807bb8:	dc814715 	stw	r18,1308(sp)
  807bbc:	d8014615 	stw	zero,1304(sp)
  807bc0:	003b5b06 	br	806930 <___vfprintf_internal_r+0xa88>
  807bc4:	d9014f17 	ldw	r4,1340(sp)
  807bc8:	d8800504 	addi	r2,sp,20
  807bcc:	d8800115 	stw	r2,4(sp)
  807bd0:	d8c00604 	addi	r3,sp,24
  807bd4:	d8800704 	addi	r2,sp,28
  807bd8:	800b883a 	mov	r5,r16
  807bdc:	880d883a 	mov	r6,r17
  807be0:	01c000c4 	movi	r7,3
  807be4:	d8c00215 	stw	r3,8(sp)
  807be8:	d8800315 	stw	r2,12(sp)
  807bec:	dcc00015 	stw	r19,0(sp)
  807bf0:	9829883a 	mov	r20,r19
  807bf4:	08081100 	call	808110 <_dtoa_r>
  807bf8:	d8814115 	stw	r2,1284(sp)
  807bfc:	003f5106 	br	807944 <___vfprintf_internal_r+0x1a9c>
  807c00:	d8c14217 	ldw	r3,1288(sp)
  807c04:	d9014317 	ldw	r4,1292(sp)
  807c08:	07000b44 	movi	fp,45
  807c0c:	1821883a 	mov	r16,r3
  807c10:	2460003c 	xorhi	r17,r4,32768
  807c14:	003f3106 	br	8078dc <___vfprintf_internal_r+0x1a34>
  807c18:	9d000044 	addi	r20,r19,1
  807c1c:	003f3906 	br	807904 <___vfprintf_internal_r+0x1a5c>
  807c20:	983f251e 	bne	r19,zero,8078b8 <___vfprintf_internal_r+0x1a10>
  807c24:	04c00044 	movi	r19,1
  807c28:	003f2306 	br	8078b8 <___vfprintf_internal_r+0x1a10>
  807c2c:	04c00184 	movi	r19,6
  807c30:	003f2106 	br	8078b8 <___vfprintf_internal_r+0x1a10>
  807c34:	d8014515 	stw	zero,1300(sp)
  807c38:	003eee06 	br	8077f4 <___vfprintf_internal_r+0x194c>
  807c3c:	200f883a 	mov	r7,r4
  807c40:	0100370e 	bge	zero,r4,807d20 <___vfprintf_internal_r+0x1e78>
  807c44:	9800031e 	bne	r19,zero,807c54 <___vfprintf_internal_r+0x1dac>
  807c48:	d9814c17 	ldw	r6,1328(sp)
  807c4c:	3080004c 	andi	r2,r6,1
  807c50:	103fb726 	beq	r2,zero,807b30 <___vfprintf_internal_r+0x1c88>
  807c54:	20800044 	addi	r2,r4,1
  807c58:	98a7883a 	add	r19,r19,r2
  807c5c:	dcc14515 	stw	r19,1300(sp)
  807c60:	980f883a 	mov	r7,r19
  807c64:	983f800e 	bge	r19,zero,807a68 <___vfprintf_internal_r+0x1bc0>
  807c68:	003fb306 	br	807b38 <___vfprintf_internal_r+0x1c90>
  807c6c:	d9814d17 	ldw	r6,1332(sp)
  807c70:	31bfff84 	addi	r6,r6,-2
  807c74:	d9814d15 	stw	r6,1332(sp)
  807c78:	003f4c06 	br	8079ac <___vfprintf_internal_r+0x1b04>
  807c7c:	0100180e 	bge	zero,r4,807ce0 <___vfprintf_internal_r+0x1e38>
  807c80:	00800044 	movi	r2,1
  807c84:	1485883a 	add	r2,r2,r18
  807c88:	d8814515 	stw	r2,1300(sp)
  807c8c:	100f883a 	mov	r7,r2
  807c90:	103f750e 	bge	r2,zero,807a68 <___vfprintf_internal_r+0x1bc0>
  807c94:	003fa806 	br	807b38 <___vfprintf_internal_r+0x1c90>
  807c98:	80c00c04 	addi	r3,r16,48
  807c9c:	00800c04 	movi	r2,48
  807ca0:	d8c008c5 	stb	r3,35(sp)
  807ca4:	d9800804 	addi	r6,sp,32
  807ca8:	d8c00904 	addi	r3,sp,36
  807cac:	d8800885 	stb	r2,34(sp)
  807cb0:	003f6506 	br	807a48 <___vfprintf_internal_r+0x1ba0>
  807cb4:	d9014c17 	ldw	r4,1328(sp)
  807cb8:	2084703a 	and	r2,r4,r2
  807cbc:	103f9c26 	beq	r2,zero,807b30 <___vfprintf_internal_r+0x1c88>
  807cc0:	003f6606 	br	807a5c <___vfprintf_internal_r+0x1bb4>
  807cc4:	d9800804 	addi	r6,sp,32
  807cc8:	d8c00884 	addi	r3,sp,34
  807ccc:	003f5e06 	br	807a48 <___vfprintf_internal_r+0x1ba0>
  807cd0:	00800b44 	movi	r2,45
  807cd4:	0121c83a 	sub	r16,zero,r4
  807cd8:	d8800845 	stb	r2,33(sp)
  807cdc:	003f3d06 	br	8079d4 <___vfprintf_internal_r+0x1b2c>
  807ce0:	00800084 	movi	r2,2
  807ce4:	1105c83a 	sub	r2,r2,r4
  807ce8:	003fe606 	br	807c84 <___vfprintf_internal_r+0x1ddc>
  807cec:	d8014515 	stw	zero,1300(sp)
  807cf0:	dc814715 	stw	r18,1308(sp)
  807cf4:	003fb106 	br	807bbc <___vfprintf_internal_r+0x1d14>
  807cf8:	000d883a 	mov	r6,zero
  807cfc:	000f883a 	mov	r7,zero
  807d00:	8009883a 	mov	r4,r16
  807d04:	880b883a 	mov	r5,r17
  807d08:	0804e4c0 	call	804e4c <__nedf2>
  807d0c:	103f9f26 	beq	r2,zero,807b8c <___vfprintf_internal_r+0x1ce4>
  807d10:	00800044 	movi	r2,1
  807d14:	1509c83a 	sub	r4,r2,r20
  807d18:	d9000515 	stw	r4,20(sp)
  807d1c:	003f9b06 	br	807b8c <___vfprintf_internal_r+0x1ce4>
  807d20:	98000d1e 	bne	r19,zero,807d58 <___vfprintf_internal_r+0x1eb0>
  807d24:	d8c14c17 	ldw	r3,1328(sp)
  807d28:	1880004c 	andi	r2,r3,1
  807d2c:	10000a1e 	bne	r2,zero,807d58 <___vfprintf_internal_r+0x1eb0>
  807d30:	01000044 	movi	r4,1
  807d34:	200f883a 	mov	r7,r4
  807d38:	d9014515 	stw	r4,1300(sp)
  807d3c:	003f4a06 	br	807a68 <___vfprintf_internal_r+0x1bc0>
  807d40:	3cc00017 	ldw	r19,0(r7)
  807d44:	39c00104 	addi	r7,r7,4
  807d48:	983d0e0e 	bge	r19,zero,807184 <___vfprintf_internal_r+0x12dc>
  807d4c:	b8c00007 	ldb	r3,0(r23)
  807d50:	04ffffc4 	movi	r19,-1
  807d54:	0038d306 	br	8060a4 <___vfprintf_internal_r+0x1fc>
  807d58:	9cc00084 	addi	r19,r19,2
  807d5c:	dcc14515 	stw	r19,1300(sp)
  807d60:	980f883a 	mov	r7,r19
  807d64:	983f400e 	bge	r19,zero,807a68 <___vfprintf_internal_r+0x1bc0>
  807d68:	003f7306 	br	807b38 <___vfprintf_internal_r+0x1c90>

00807d6c <__vfprintf_internal>:
  807d6c:	008020b4 	movhi	r2,130
  807d70:	10b09304 	addi	r2,r2,-15796
  807d74:	2013883a 	mov	r9,r4
  807d78:	11000017 	ldw	r4,0(r2)
  807d7c:	2805883a 	mov	r2,r5
  807d80:	300f883a 	mov	r7,r6
  807d84:	480b883a 	mov	r5,r9
  807d88:	100d883a 	mov	r6,r2
  807d8c:	0805ea81 	jmpi	805ea8 <___vfprintf_internal_r>

00807d90 <__swsetup_r>:
  807d90:	008020b4 	movhi	r2,130
  807d94:	10b09304 	addi	r2,r2,-15796
  807d98:	10c00017 	ldw	r3,0(r2)
  807d9c:	defffd04 	addi	sp,sp,-12
  807da0:	dc400115 	stw	r17,4(sp)
  807da4:	dc000015 	stw	r16,0(sp)
  807da8:	dfc00215 	stw	ra,8(sp)
  807dac:	2023883a 	mov	r17,r4
  807db0:	2821883a 	mov	r16,r5
  807db4:	18000226 	beq	r3,zero,807dc0 <__swsetup_r+0x30>
  807db8:	18800e17 	ldw	r2,56(r3)
  807dbc:	10001f26 	beq	r2,zero,807e3c <__swsetup_r+0xac>
  807dc0:	8100030b 	ldhu	r4,12(r16)
  807dc4:	2080020c 	andi	r2,r4,8
  807dc8:	10002826 	beq	r2,zero,807e6c <__swsetup_r+0xdc>
  807dcc:	81400417 	ldw	r5,16(r16)
  807dd0:	28001d26 	beq	r5,zero,807e48 <__swsetup_r+0xb8>
  807dd4:	2080004c 	andi	r2,r4,1
  807dd8:	1005003a 	cmpeq	r2,r2,zero
  807ddc:	10000b26 	beq	r2,zero,807e0c <__swsetup_r+0x7c>
  807de0:	2080008c 	andi	r2,r4,2
  807de4:	10001226 	beq	r2,zero,807e30 <__swsetup_r+0xa0>
  807de8:	0005883a 	mov	r2,zero
  807dec:	80800215 	stw	r2,8(r16)
  807df0:	28000b26 	beq	r5,zero,807e20 <__swsetup_r+0x90>
  807df4:	0005883a 	mov	r2,zero
  807df8:	dfc00217 	ldw	ra,8(sp)
  807dfc:	dc400117 	ldw	r17,4(sp)
  807e00:	dc000017 	ldw	r16,0(sp)
  807e04:	dec00304 	addi	sp,sp,12
  807e08:	f800283a 	ret
  807e0c:	80800517 	ldw	r2,20(r16)
  807e10:	80000215 	stw	zero,8(r16)
  807e14:	0085c83a 	sub	r2,zero,r2
  807e18:	80800615 	stw	r2,24(r16)
  807e1c:	283ff51e 	bne	r5,zero,807df4 <__swsetup_r+0x64>
  807e20:	2080200c 	andi	r2,r4,128
  807e24:	103ff326 	beq	r2,zero,807df4 <__swsetup_r+0x64>
  807e28:	00bfffc4 	movi	r2,-1
  807e2c:	003ff206 	br	807df8 <__swsetup_r+0x68>
  807e30:	80800517 	ldw	r2,20(r16)
  807e34:	80800215 	stw	r2,8(r16)
  807e38:	003fed06 	br	807df0 <__swsetup_r+0x60>
  807e3c:	1809883a 	mov	r4,r3
  807e40:	080995c0 	call	80995c <__sinit>
  807e44:	003fde06 	br	807dc0 <__swsetup_r+0x30>
  807e48:	20c0a00c 	andi	r3,r4,640
  807e4c:	00808004 	movi	r2,512
  807e50:	18bfe026 	beq	r3,r2,807dd4 <__swsetup_r+0x44>
  807e54:	8809883a 	mov	r4,r17
  807e58:	800b883a 	mov	r5,r16
  807e5c:	080a7080 	call	80a708 <__smakebuf_r>
  807e60:	8100030b 	ldhu	r4,12(r16)
  807e64:	81400417 	ldw	r5,16(r16)
  807e68:	003fda06 	br	807dd4 <__swsetup_r+0x44>
  807e6c:	2080040c 	andi	r2,r4,16
  807e70:	103fed26 	beq	r2,zero,807e28 <__swsetup_r+0x98>
  807e74:	2080010c 	andi	r2,r4,4
  807e78:	10001226 	beq	r2,zero,807ec4 <__swsetup_r+0x134>
  807e7c:	81400c17 	ldw	r5,48(r16)
  807e80:	28000526 	beq	r5,zero,807e98 <__swsetup_r+0x108>
  807e84:	80801004 	addi	r2,r16,64
  807e88:	28800226 	beq	r5,r2,807e94 <__swsetup_r+0x104>
  807e8c:	8809883a 	mov	r4,r17
  807e90:	0809d140 	call	809d14 <_free_r>
  807e94:	80000c15 	stw	zero,48(r16)
  807e98:	8080030b 	ldhu	r2,12(r16)
  807e9c:	81400417 	ldw	r5,16(r16)
  807ea0:	80000115 	stw	zero,4(r16)
  807ea4:	10bff6cc 	andi	r2,r2,65499
  807ea8:	8080030d 	sth	r2,12(r16)
  807eac:	81400015 	stw	r5,0(r16)
  807eb0:	8080030b 	ldhu	r2,12(r16)
  807eb4:	10800214 	ori	r2,r2,8
  807eb8:	113fffcc 	andi	r4,r2,65535
  807ebc:	8080030d 	sth	r2,12(r16)
  807ec0:	003fc306 	br	807dd0 <__swsetup_r+0x40>
  807ec4:	81400417 	ldw	r5,16(r16)
  807ec8:	003ff906 	br	807eb0 <__swsetup_r+0x120>

00807ecc <quorem>:
  807ecc:	28c00417 	ldw	r3,16(r5)
  807ed0:	20800417 	ldw	r2,16(r4)
  807ed4:	defff104 	addi	sp,sp,-60
  807ed8:	dfc00e15 	stw	ra,56(sp)
  807edc:	df000d15 	stw	fp,52(sp)
  807ee0:	ddc00c15 	stw	r23,48(sp)
  807ee4:	dd800b15 	stw	r22,44(sp)
  807ee8:	dd400a15 	stw	r21,40(sp)
  807eec:	dd000915 	stw	r20,36(sp)
  807ef0:	dcc00815 	stw	r19,32(sp)
  807ef4:	dc800715 	stw	r18,28(sp)
  807ef8:	dc400615 	stw	r17,24(sp)
  807efc:	dc000515 	stw	r16,20(sp)
  807f00:	d9000315 	stw	r4,12(sp)
  807f04:	d9400415 	stw	r5,16(sp)
  807f08:	10c07f16 	blt	r2,r3,808108 <quorem+0x23c>
  807f0c:	1d3fffc4 	addi	r20,r3,-1
  807f10:	d8c00417 	ldw	r3,16(sp)
  807f14:	d9000317 	ldw	r4,12(sp)
  807f18:	a505883a 	add	r2,r20,r20
  807f1c:	1085883a 	add	r2,r2,r2
  807f20:	1cc00504 	addi	r19,r3,20
  807f24:	25c00504 	addi	r23,r4,20
  807f28:	98ad883a 	add	r22,r19,r2
  807f2c:	15c7883a 	add	r3,r2,r23
  807f30:	b1400017 	ldw	r5,0(r22)
  807f34:	19000017 	ldw	r4,0(r3)
  807f38:	d8c00015 	stw	r3,0(sp)
  807f3c:	29400044 	addi	r5,r5,1
  807f40:	d9000215 	stw	r4,8(sp)
  807f44:	080534c0 	call	80534c <__udivsi3>
  807f48:	1039883a 	mov	fp,r2
  807f4c:	10003d1e 	bne	r2,zero,808044 <quorem+0x178>
  807f50:	d9400417 	ldw	r5,16(sp)
  807f54:	d9000317 	ldw	r4,12(sp)
  807f58:	080b4340 	call	80b434 <__mcmp>
  807f5c:	10002c16 	blt	r2,zero,808010 <quorem+0x144>
  807f60:	e7000044 	addi	fp,fp,1
  807f64:	b80f883a 	mov	r7,r23
  807f68:	0011883a 	mov	r8,zero
  807f6c:	0009883a 	mov	r4,zero
  807f70:	99400017 	ldw	r5,0(r19)
  807f74:	38c00017 	ldw	r3,0(r7)
  807f78:	9cc00104 	addi	r19,r19,4
  807f7c:	28bfffcc 	andi	r2,r5,65535
  807f80:	2085883a 	add	r2,r4,r2
  807f84:	11bfffcc 	andi	r6,r2,65535
  807f88:	193fffcc 	andi	r4,r3,65535
  807f8c:	1004d43a 	srli	r2,r2,16
  807f90:	280ad43a 	srli	r5,r5,16
  807f94:	2189c83a 	sub	r4,r4,r6
  807f98:	2209883a 	add	r4,r4,r8
  807f9c:	1806d43a 	srli	r3,r3,16
  807fa0:	288b883a 	add	r5,r5,r2
  807fa4:	200dd43a 	srai	r6,r4,16
  807fa8:	28bfffcc 	andi	r2,r5,65535
  807fac:	1887c83a 	sub	r3,r3,r2
  807fb0:	1987883a 	add	r3,r3,r6
  807fb4:	3900000d 	sth	r4,0(r7)
  807fb8:	38c0008d 	sth	r3,2(r7)
  807fbc:	2808d43a 	srli	r4,r5,16
  807fc0:	39c00104 	addi	r7,r7,4
  807fc4:	1811d43a 	srai	r8,r3,16
  807fc8:	b4ffe92e 	bgeu	r22,r19,807f70 <quorem+0xa4>
  807fcc:	a505883a 	add	r2,r20,r20
  807fd0:	1085883a 	add	r2,r2,r2
  807fd4:	b885883a 	add	r2,r23,r2
  807fd8:	10c00017 	ldw	r3,0(r2)
  807fdc:	18000c1e 	bne	r3,zero,808010 <quorem+0x144>
  807fe0:	113fff04 	addi	r4,r2,-4
  807fe4:	b900082e 	bgeu	r23,r4,808008 <quorem+0x13c>
  807fe8:	10bfff17 	ldw	r2,-4(r2)
  807fec:	10000326 	beq	r2,zero,807ffc <quorem+0x130>
  807ff0:	00000506 	br	808008 <quorem+0x13c>
  807ff4:	20800017 	ldw	r2,0(r4)
  807ff8:	1000031e 	bne	r2,zero,808008 <quorem+0x13c>
  807ffc:	213fff04 	addi	r4,r4,-4
  808000:	a53fffc4 	addi	r20,r20,-1
  808004:	b93ffb36 	bltu	r23,r4,807ff4 <quorem+0x128>
  808008:	d9000317 	ldw	r4,12(sp)
  80800c:	25000415 	stw	r20,16(r4)
  808010:	e005883a 	mov	r2,fp
  808014:	dfc00e17 	ldw	ra,56(sp)
  808018:	df000d17 	ldw	fp,52(sp)
  80801c:	ddc00c17 	ldw	r23,48(sp)
  808020:	dd800b17 	ldw	r22,44(sp)
  808024:	dd400a17 	ldw	r21,40(sp)
  808028:	dd000917 	ldw	r20,36(sp)
  80802c:	dcc00817 	ldw	r19,32(sp)
  808030:	dc800717 	ldw	r18,28(sp)
  808034:	dc400617 	ldw	r17,24(sp)
  808038:	dc000517 	ldw	r16,20(sp)
  80803c:	dec00f04 	addi	sp,sp,60
  808040:	f800283a 	ret
  808044:	b823883a 	mov	r17,r23
  808048:	9825883a 	mov	r18,r19
  80804c:	d8000115 	stw	zero,4(sp)
  808050:	002b883a 	mov	r21,zero
  808054:	94000017 	ldw	r16,0(r18)
  808058:	e009883a 	mov	r4,fp
  80805c:	94800104 	addi	r18,r18,4
  808060:	817fffcc 	andi	r5,r16,65535
  808064:	080535c0 	call	80535c <__mulsi3>
  808068:	800ad43a 	srli	r5,r16,16
  80806c:	e009883a 	mov	r4,fp
  808070:	a8a1883a 	add	r16,r21,r2
  808074:	080535c0 	call	80535c <__mulsi3>
  808078:	89000017 	ldw	r4,0(r17)
  80807c:	80ffffcc 	andi	r3,r16,65535
  808080:	8020d43a 	srli	r16,r16,16
  808084:	217fffcc 	andi	r5,r4,65535
  808088:	28cbc83a 	sub	r5,r5,r3
  80808c:	d8c00117 	ldw	r3,4(sp)
  808090:	2008d43a 	srli	r4,r4,16
  808094:	1405883a 	add	r2,r2,r16
  808098:	28cb883a 	add	r5,r5,r3
  80809c:	280dd43a 	srai	r6,r5,16
  8080a0:	10ffffcc 	andi	r3,r2,65535
  8080a4:	20c9c83a 	sub	r4,r4,r3
  8080a8:	2189883a 	add	r4,r4,r6
  8080ac:	8900008d 	sth	r4,2(r17)
  8080b0:	2009d43a 	srai	r4,r4,16
  8080b4:	8940000d 	sth	r5,0(r17)
  8080b8:	102ad43a 	srli	r21,r2,16
  8080bc:	8c400104 	addi	r17,r17,4
  8080c0:	d9000115 	stw	r4,4(sp)
  8080c4:	b4bfe32e 	bgeu	r22,r18,808054 <quorem+0x188>
  8080c8:	d9000217 	ldw	r4,8(sp)
  8080cc:	203fa01e 	bne	r4,zero,807f50 <quorem+0x84>
  8080d0:	d8800017 	ldw	r2,0(sp)
  8080d4:	10ffff04 	addi	r3,r2,-4
  8080d8:	b8c0082e 	bgeu	r23,r3,8080fc <quorem+0x230>
  8080dc:	10bfff17 	ldw	r2,-4(r2)
  8080e0:	10000326 	beq	r2,zero,8080f0 <quorem+0x224>
  8080e4:	00000506 	br	8080fc <quorem+0x230>
  8080e8:	18800017 	ldw	r2,0(r3)
  8080ec:	1000031e 	bne	r2,zero,8080fc <quorem+0x230>
  8080f0:	18ffff04 	addi	r3,r3,-4
  8080f4:	a53fffc4 	addi	r20,r20,-1
  8080f8:	b8fffb36 	bltu	r23,r3,8080e8 <quorem+0x21c>
  8080fc:	d8c00317 	ldw	r3,12(sp)
  808100:	1d000415 	stw	r20,16(r3)
  808104:	003f9206 	br	807f50 <quorem+0x84>
  808108:	0005883a 	mov	r2,zero
  80810c:	003fc106 	br	808014 <quorem+0x148>

00808110 <_dtoa_r>:
  808110:	22001017 	ldw	r8,64(r4)
  808114:	deffda04 	addi	sp,sp,-152
  808118:	dd402115 	stw	r21,132(sp)
  80811c:	dd002015 	stw	r20,128(sp)
  808120:	dc801e15 	stw	r18,120(sp)
  808124:	dc401d15 	stw	r17,116(sp)
  808128:	dfc02515 	stw	ra,148(sp)
  80812c:	df002415 	stw	fp,144(sp)
  808130:	ddc02315 	stw	r23,140(sp)
  808134:	dd802215 	stw	r22,136(sp)
  808138:	dcc01f15 	stw	r19,124(sp)
  80813c:	dc001c15 	stw	r16,112(sp)
  808140:	d9001615 	stw	r4,88(sp)
  808144:	3023883a 	mov	r17,r6
  808148:	2829883a 	mov	r20,r5
  80814c:	d9c01715 	stw	r7,92(sp)
  808150:	dc802817 	ldw	r18,160(sp)
  808154:	302b883a 	mov	r21,r6
  808158:	40000a26 	beq	r8,zero,808184 <_dtoa_r+0x74>
  80815c:	20801117 	ldw	r2,68(r4)
  808160:	400b883a 	mov	r5,r8
  808164:	40800115 	stw	r2,4(r8)
  808168:	20c01117 	ldw	r3,68(r4)
  80816c:	00800044 	movi	r2,1
  808170:	10c4983a 	sll	r2,r2,r3
  808174:	40800215 	stw	r2,8(r8)
  808178:	080b2d80 	call	80b2d8 <_Bfree>
  80817c:	d8c01617 	ldw	r3,88(sp)
  808180:	18001015 	stw	zero,64(r3)
  808184:	8800a316 	blt	r17,zero,808414 <_dtoa_r+0x304>
  808188:	90000015 	stw	zero,0(r18)
  80818c:	a8dffc2c 	andhi	r3,r21,32752
  808190:	009ffc34 	movhi	r2,32752
  808194:	18809126 	beq	r3,r2,8083dc <_dtoa_r+0x2cc>
  808198:	000d883a 	mov	r6,zero
  80819c:	000f883a 	mov	r7,zero
  8081a0:	a009883a 	mov	r4,r20
  8081a4:	a80b883a 	mov	r5,r21
  8081a8:	dd001215 	stw	r20,72(sp)
  8081ac:	dd401315 	stw	r21,76(sp)
  8081b0:	0804e4c0 	call	804e4c <__nedf2>
  8081b4:	1000171e 	bne	r2,zero,808214 <_dtoa_r+0x104>
  8081b8:	d9802717 	ldw	r6,156(sp)
  8081bc:	00800044 	movi	r2,1
  8081c0:	30800015 	stw	r2,0(r6)
  8081c4:	d8802917 	ldw	r2,164(sp)
  8081c8:	10029b26 	beq	r2,zero,808c38 <_dtoa_r+0xb28>
  8081cc:	d9002917 	ldw	r4,164(sp)
  8081d0:	008020b4 	movhi	r2,130
  8081d4:	10a91744 	addi	r2,r2,-23459
  8081d8:	10ffffc4 	addi	r3,r2,-1
  8081dc:	20800015 	stw	r2,0(r4)
  8081e0:	1805883a 	mov	r2,r3
  8081e4:	dfc02517 	ldw	ra,148(sp)
  8081e8:	df002417 	ldw	fp,144(sp)
  8081ec:	ddc02317 	ldw	r23,140(sp)
  8081f0:	dd802217 	ldw	r22,136(sp)
  8081f4:	dd402117 	ldw	r21,132(sp)
  8081f8:	dd002017 	ldw	r20,128(sp)
  8081fc:	dcc01f17 	ldw	r19,124(sp)
  808200:	dc801e17 	ldw	r18,120(sp)
  808204:	dc401d17 	ldw	r17,116(sp)
  808208:	dc001c17 	ldw	r16,112(sp)
  80820c:	dec02604 	addi	sp,sp,152
  808210:	f800283a 	ret
  808214:	d9001617 	ldw	r4,88(sp)
  808218:	d9401217 	ldw	r5,72(sp)
  80821c:	d8800104 	addi	r2,sp,4
  808220:	a80d883a 	mov	r6,r21
  808224:	d9c00204 	addi	r7,sp,8
  808228:	d8800015 	stw	r2,0(sp)
  80822c:	080b9140 	call	80b914 <__d2b>
  808230:	d8800715 	stw	r2,28(sp)
  808234:	a804d53a 	srli	r2,r21,20
  808238:	1101ffcc 	andi	r4,r2,2047
  80823c:	20008626 	beq	r4,zero,808458 <_dtoa_r+0x348>
  808240:	d8c01217 	ldw	r3,72(sp)
  808244:	00800434 	movhi	r2,16
  808248:	10bfffc4 	addi	r2,r2,-1
  80824c:	ddc00117 	ldw	r23,4(sp)
  808250:	a884703a 	and	r2,r21,r2
  808254:	1811883a 	mov	r8,r3
  808258:	124ffc34 	orhi	r9,r2,16368
  80825c:	25bf0044 	addi	r22,r4,-1023
  808260:	d8000815 	stw	zero,32(sp)
  808264:	0005883a 	mov	r2,zero
  808268:	00cffe34 	movhi	r3,16376
  80826c:	480b883a 	mov	r5,r9
  808270:	4009883a 	mov	r4,r8
  808274:	180f883a 	mov	r7,r3
  808278:	100d883a 	mov	r6,r2
  80827c:	08046b40 	call	8046b4 <__subdf3>
  808280:	0218dbf4 	movhi	r8,25455
  808284:	4210d844 	addi	r8,r8,17249
  808288:	024ff4f4 	movhi	r9,16339
  80828c:	4a61e9c4 	addi	r9,r9,-30809
  808290:	480f883a 	mov	r7,r9
  808294:	400d883a 	mov	r6,r8
  808298:	180b883a 	mov	r5,r3
  80829c:	1009883a 	mov	r4,r2
  8082a0:	08047a80 	call	8047a8 <__muldf3>
  8082a4:	0222d874 	movhi	r8,35681
  8082a8:	42322cc4 	addi	r8,r8,-14157
  8082ac:	024ff1f4 	movhi	r9,16327
  8082b0:	4a628a04 	addi	r9,r9,-30168
  8082b4:	480f883a 	mov	r7,r9
  8082b8:	400d883a 	mov	r6,r8
  8082bc:	180b883a 	mov	r5,r3
  8082c0:	1009883a 	mov	r4,r2
  8082c4:	08047340 	call	804734 <__adddf3>
  8082c8:	b009883a 	mov	r4,r22
  8082cc:	1021883a 	mov	r16,r2
  8082d0:	1823883a 	mov	r17,r3
  8082d4:	080506c0 	call	80506c <__floatsidf>
  8082d8:	021427f4 	movhi	r8,20639
  8082dc:	421e7ec4 	addi	r8,r8,31227
  8082e0:	024ff4f4 	movhi	r9,16339
  8082e4:	4a5104c4 	addi	r9,r9,17427
  8082e8:	480f883a 	mov	r7,r9
  8082ec:	400d883a 	mov	r6,r8
  8082f0:	180b883a 	mov	r5,r3
  8082f4:	1009883a 	mov	r4,r2
  8082f8:	08047a80 	call	8047a8 <__muldf3>
  8082fc:	180f883a 	mov	r7,r3
  808300:	880b883a 	mov	r5,r17
  808304:	100d883a 	mov	r6,r2
  808308:	8009883a 	mov	r4,r16
  80830c:	08047340 	call	804734 <__adddf3>
  808310:	1009883a 	mov	r4,r2
  808314:	180b883a 	mov	r5,r3
  808318:	1021883a 	mov	r16,r2
  80831c:	1823883a 	mov	r17,r3
  808320:	080de0c0 	call	80de0c <__fixdfsi>
  808324:	000d883a 	mov	r6,zero
  808328:	000f883a 	mov	r7,zero
  80832c:	8009883a 	mov	r4,r16
  808330:	880b883a 	mov	r5,r17
  808334:	d8800d15 	stw	r2,52(sp)
  808338:	0804f5c0 	call	804f5c <__ltdf2>
  80833c:	10031716 	blt	r2,zero,808f9c <_dtoa_r+0xe8c>
  808340:	d8c00d17 	ldw	r3,52(sp)
  808344:	00800584 	movi	r2,22
  808348:	10c1482e 	bgeu	r2,r3,80886c <_dtoa_r+0x75c>
  80834c:	01000044 	movi	r4,1
  808350:	d9000c15 	stw	r4,48(sp)
  808354:	bd85c83a 	sub	r2,r23,r22
  808358:	11bfffc4 	addi	r6,r2,-1
  80835c:	30030b16 	blt	r6,zero,808f8c <_dtoa_r+0xe7c>
  808360:	d9800a15 	stw	r6,40(sp)
  808364:	d8001115 	stw	zero,68(sp)
  808368:	d8c00d17 	ldw	r3,52(sp)
  80836c:	1802ff16 	blt	r3,zero,808f6c <_dtoa_r+0xe5c>
  808370:	d9000a17 	ldw	r4,40(sp)
  808374:	d8c00915 	stw	r3,36(sp)
  808378:	d8001015 	stw	zero,64(sp)
  80837c:	20c9883a 	add	r4,r4,r3
  808380:	d9000a15 	stw	r4,40(sp)
  808384:	d9001717 	ldw	r4,92(sp)
  808388:	00800244 	movi	r2,9
  80838c:	11004636 	bltu	r2,r4,8084a8 <_dtoa_r+0x398>
  808390:	00800144 	movi	r2,5
  808394:	11020416 	blt	r2,r4,808ba8 <_dtoa_r+0xa98>
  808398:	04400044 	movi	r17,1
  80839c:	d8c01717 	ldw	r3,92(sp)
  8083a0:	00800144 	movi	r2,5
  8083a4:	10c1ed36 	bltu	r2,r3,808b5c <_dtoa_r+0xa4c>
  8083a8:	18c5883a 	add	r2,r3,r3
  8083ac:	1085883a 	add	r2,r2,r2
  8083b0:	00c02074 	movhi	r3,129
  8083b4:	18e0f104 	addi	r3,r3,-31804
  8083b8:	10c5883a 	add	r2,r2,r3
  8083bc:	11000017 	ldw	r4,0(r2)
  8083c0:	2000683a 	jmp	r4
  8083c4:	008084b0 	cmpltui	r2,zero,530
  8083c8:	008084b0 	cmpltui	r2,zero,530
  8083cc:	00808eb0 	cmpltui	r2,zero,570
  8083d0:	00808e88 	cmpgei	r2,zero,570
  8083d4:	00808ecc 	andi	r2,zero,571
  8083d8:	00808ed8 	cmpnei	r2,zero,571
  8083dc:	d9002717 	ldw	r4,156(sp)
  8083e0:	0089c3c4 	movi	r2,9999
  8083e4:	20800015 	stw	r2,0(r4)
  8083e8:	a0001026 	beq	r20,zero,80842c <_dtoa_r+0x31c>
  8083ec:	00c020b4 	movhi	r3,130
  8083f0:	18e92304 	addi	r3,r3,-23412
  8083f4:	d9802917 	ldw	r6,164(sp)
  8083f8:	303f7926 	beq	r6,zero,8081e0 <_dtoa_r+0xd0>
  8083fc:	188000c7 	ldb	r2,3(r3)
  808400:	190000c4 	addi	r4,r3,3
  808404:	1000101e 	bne	r2,zero,808448 <_dtoa_r+0x338>
  808408:	d8802917 	ldw	r2,164(sp)
  80840c:	11000015 	stw	r4,0(r2)
  808410:	003f7306 	br	8081e0 <_dtoa_r+0xd0>
  808414:	00a00034 	movhi	r2,32768
  808418:	10bfffc4 	addi	r2,r2,-1
  80841c:	00c00044 	movi	r3,1
  808420:	88aa703a 	and	r21,r17,r2
  808424:	90c00015 	stw	r3,0(r18)
  808428:	003f5806 	br	80818c <_dtoa_r+0x7c>
  80842c:	00800434 	movhi	r2,16
  808430:	10bfffc4 	addi	r2,r2,-1
  808434:	a884703a 	and	r2,r21,r2
  808438:	103fec1e 	bne	r2,zero,8083ec <_dtoa_r+0x2dc>
  80843c:	00c020b4 	movhi	r3,130
  808440:	18e92004 	addi	r3,r3,-23424
  808444:	003feb06 	br	8083f4 <_dtoa_r+0x2e4>
  808448:	d8802917 	ldw	r2,164(sp)
  80844c:	19000204 	addi	r4,r3,8
  808450:	11000015 	stw	r4,0(r2)
  808454:	003f6206 	br	8081e0 <_dtoa_r+0xd0>
  808458:	ddc00117 	ldw	r23,4(sp)
  80845c:	d8800217 	ldw	r2,8(sp)
  808460:	01000804 	movi	r4,32
  808464:	b8c10c84 	addi	r3,r23,1074
  808468:	18a3883a 	add	r17,r3,r2
  80846c:	2441b80e 	bge	r4,r17,808b50 <_dtoa_r+0xa40>
  808470:	00c01004 	movi	r3,64
  808474:	1c47c83a 	sub	r3,r3,r17
  808478:	88bff804 	addi	r2,r17,-32
  80847c:	a8c6983a 	sll	r3,r21,r3
  808480:	a084d83a 	srl	r2,r20,r2
  808484:	1888b03a 	or	r4,r3,r2
  808488:	080dee40 	call	80dee4 <__floatunsidf>
  80848c:	1011883a 	mov	r8,r2
  808490:	00bf8434 	movhi	r2,65040
  808494:	01000044 	movi	r4,1
  808498:	10d3883a 	add	r9,r2,r3
  80849c:	8dbef344 	addi	r22,r17,-1075
  8084a0:	d9000815 	stw	r4,32(sp)
  8084a4:	003f6f06 	br	808264 <_dtoa_r+0x154>
  8084a8:	d8001715 	stw	zero,92(sp)
  8084ac:	04400044 	movi	r17,1
  8084b0:	00bfffc4 	movi	r2,-1
  8084b4:	00c00044 	movi	r3,1
  8084b8:	d8800e15 	stw	r2,56(sp)
  8084bc:	d8002615 	stw	zero,152(sp)
  8084c0:	d8800f15 	stw	r2,60(sp)
  8084c4:	d8c00b15 	stw	r3,44(sp)
  8084c8:	1021883a 	mov	r16,r2
  8084cc:	d8801617 	ldw	r2,88(sp)
  8084d0:	10001115 	stw	zero,68(r2)
  8084d4:	d8801617 	ldw	r2,88(sp)
  8084d8:	11401117 	ldw	r5,68(r2)
  8084dc:	1009883a 	mov	r4,r2
  8084e0:	080b8580 	call	80b858 <_Balloc>
  8084e4:	d8c01617 	ldw	r3,88(sp)
  8084e8:	d8800515 	stw	r2,20(sp)
  8084ec:	18801015 	stw	r2,64(r3)
  8084f0:	00800384 	movi	r2,14
  8084f4:	14006836 	bltu	r2,r16,808698 <_dtoa_r+0x588>
  8084f8:	8805003a 	cmpeq	r2,r17,zero
  8084fc:	1000661e 	bne	r2,zero,808698 <_dtoa_r+0x588>
  808500:	d9000d17 	ldw	r4,52(sp)
  808504:	0102300e 	bge	zero,r4,808dc8 <_dtoa_r+0xcb8>
  808508:	208003cc 	andi	r2,r4,15
  80850c:	100490fa 	slli	r2,r2,3
  808510:	2025d13a 	srai	r18,r4,4
  808514:	00c020b4 	movhi	r3,130
  808518:	18e93404 	addi	r3,r3,-23344
  80851c:	10c5883a 	add	r2,r2,r3
  808520:	90c0040c 	andi	r3,r18,16
  808524:	14000017 	ldw	r16,0(r2)
  808528:	14400117 	ldw	r17,4(r2)
  80852c:	18036a1e 	bne	r3,zero,8092d8 <_dtoa_r+0x11c8>
  808530:	05800084 	movi	r22,2
  808534:	90001026 	beq	r18,zero,808578 <_dtoa_r+0x468>
  808538:	04c020b4 	movhi	r19,130
  80853c:	9ce96604 	addi	r19,r19,-23144
  808540:	9080004c 	andi	r2,r18,1
  808544:	1005003a 	cmpeq	r2,r2,zero
  808548:	1000081e 	bne	r2,zero,80856c <_dtoa_r+0x45c>
  80854c:	99800017 	ldw	r6,0(r19)
  808550:	99c00117 	ldw	r7,4(r19)
  808554:	880b883a 	mov	r5,r17
  808558:	8009883a 	mov	r4,r16
  80855c:	08047a80 	call	8047a8 <__muldf3>
  808560:	1021883a 	mov	r16,r2
  808564:	b5800044 	addi	r22,r22,1
  808568:	1823883a 	mov	r17,r3
  80856c:	9025d07a 	srai	r18,r18,1
  808570:	9cc00204 	addi	r19,r19,8
  808574:	903ff21e 	bne	r18,zero,808540 <_dtoa_r+0x430>
  808578:	a80b883a 	mov	r5,r21
  80857c:	a009883a 	mov	r4,r20
  808580:	880f883a 	mov	r7,r17
  808584:	800d883a 	mov	r6,r16
  808588:	0804b6c0 	call	804b6c <__divdf3>
  80858c:	1029883a 	mov	r20,r2
  808590:	182b883a 	mov	r21,r3
  808594:	d8c00c17 	ldw	r3,48(sp)
  808598:	1805003a 	cmpeq	r2,r3,zero
  80859c:	1000081e 	bne	r2,zero,8085c0 <_dtoa_r+0x4b0>
  8085a0:	0005883a 	mov	r2,zero
  8085a4:	00cffc34 	movhi	r3,16368
  8085a8:	180f883a 	mov	r7,r3
  8085ac:	a009883a 	mov	r4,r20
  8085b0:	a80b883a 	mov	r5,r21
  8085b4:	100d883a 	mov	r6,r2
  8085b8:	0804f5c0 	call	804f5c <__ltdf2>
  8085bc:	1003fe16 	blt	r2,zero,8095b8 <_dtoa_r+0x14a8>
  8085c0:	b009883a 	mov	r4,r22
  8085c4:	080506c0 	call	80506c <__floatsidf>
  8085c8:	180b883a 	mov	r5,r3
  8085cc:	1009883a 	mov	r4,r2
  8085d0:	a00d883a 	mov	r6,r20
  8085d4:	a80f883a 	mov	r7,r21
  8085d8:	08047a80 	call	8047a8 <__muldf3>
  8085dc:	0011883a 	mov	r8,zero
  8085e0:	02500734 	movhi	r9,16412
  8085e4:	1009883a 	mov	r4,r2
  8085e8:	180b883a 	mov	r5,r3
  8085ec:	480f883a 	mov	r7,r9
  8085f0:	400d883a 	mov	r6,r8
  8085f4:	08047340 	call	804734 <__adddf3>
  8085f8:	d9000f17 	ldw	r4,60(sp)
  8085fc:	102d883a 	mov	r22,r2
  808600:	00bf3034 	movhi	r2,64704
  808604:	18b9883a 	add	fp,r3,r2
  808608:	e02f883a 	mov	r23,fp
  80860c:	20028f1e 	bne	r4,zero,80904c <_dtoa_r+0xf3c>
  808610:	0005883a 	mov	r2,zero
  808614:	00d00534 	movhi	r3,16404
  808618:	a009883a 	mov	r4,r20
  80861c:	a80b883a 	mov	r5,r21
  808620:	180f883a 	mov	r7,r3
  808624:	100d883a 	mov	r6,r2
  808628:	08046b40 	call	8046b4 <__subdf3>
  80862c:	1009883a 	mov	r4,r2
  808630:	e00f883a 	mov	r7,fp
  808634:	180b883a 	mov	r5,r3
  808638:	b00d883a 	mov	r6,r22
  80863c:	1025883a 	mov	r18,r2
  808640:	1827883a 	mov	r19,r3
  808644:	0804ed40 	call	804ed4 <__gtdf2>
  808648:	00834f16 	blt	zero,r2,809388 <_dtoa_r+0x1278>
  80864c:	e0e0003c 	xorhi	r3,fp,32768
  808650:	9009883a 	mov	r4,r18
  808654:	980b883a 	mov	r5,r19
  808658:	180f883a 	mov	r7,r3
  80865c:	b00d883a 	mov	r6,r22
  808660:	0804f5c0 	call	804f5c <__ltdf2>
  808664:	1000080e 	bge	r2,zero,808688 <_dtoa_r+0x578>
  808668:	0027883a 	mov	r19,zero
  80866c:	0025883a 	mov	r18,zero
  808670:	d8802617 	ldw	r2,152(sp)
  808674:	df000517 	ldw	fp,20(sp)
  808678:	d8000615 	stw	zero,24(sp)
  80867c:	0084303a 	nor	r2,zero,r2
  808680:	d8800d15 	stw	r2,52(sp)
  808684:	00019b06 	br	808cf4 <_dtoa_r+0xbe4>
  808688:	d9801217 	ldw	r6,72(sp)
  80868c:	d8801317 	ldw	r2,76(sp)
  808690:	3029883a 	mov	r20,r6
  808694:	102b883a 	mov	r21,r2
  808698:	d8c00217 	ldw	r3,8(sp)
  80869c:	18008516 	blt	r3,zero,8088b4 <_dtoa_r+0x7a4>
  8086a0:	d9000d17 	ldw	r4,52(sp)
  8086a4:	00800384 	movi	r2,14
  8086a8:	11008216 	blt	r2,r4,8088b4 <_dtoa_r+0x7a4>
  8086ac:	200490fa 	slli	r2,r4,3
  8086b0:	d9802617 	ldw	r6,152(sp)
  8086b4:	00c020b4 	movhi	r3,130
  8086b8:	18e93404 	addi	r3,r3,-23344
  8086bc:	10c5883a 	add	r2,r2,r3
  8086c0:	14800017 	ldw	r18,0(r2)
  8086c4:	14c00117 	ldw	r19,4(r2)
  8086c8:	30031e16 	blt	r6,zero,809344 <_dtoa_r+0x1234>
  8086cc:	d9000517 	ldw	r4,20(sp)
  8086d0:	d8c00f17 	ldw	r3,60(sp)
  8086d4:	a823883a 	mov	r17,r21
  8086d8:	a021883a 	mov	r16,r20
  8086dc:	192b883a 	add	r21,r3,r4
  8086e0:	2039883a 	mov	fp,r4
  8086e4:	00000f06 	br	808724 <_dtoa_r+0x614>
  8086e8:	0005883a 	mov	r2,zero
  8086ec:	00d00934 	movhi	r3,16420
  8086f0:	5009883a 	mov	r4,r10
  8086f4:	580b883a 	mov	r5,r11
  8086f8:	180f883a 	mov	r7,r3
  8086fc:	100d883a 	mov	r6,r2
  808700:	08047a80 	call	8047a8 <__muldf3>
  808704:	180b883a 	mov	r5,r3
  808708:	000d883a 	mov	r6,zero
  80870c:	000f883a 	mov	r7,zero
  808710:	1009883a 	mov	r4,r2
  808714:	1021883a 	mov	r16,r2
  808718:	1823883a 	mov	r17,r3
  80871c:	0804e4c0 	call	804e4c <__nedf2>
  808720:	10004526 	beq	r2,zero,808838 <_dtoa_r+0x728>
  808724:	900d883a 	mov	r6,r18
  808728:	980f883a 	mov	r7,r19
  80872c:	8009883a 	mov	r4,r16
  808730:	880b883a 	mov	r5,r17
  808734:	0804b6c0 	call	804b6c <__divdf3>
  808738:	180b883a 	mov	r5,r3
  80873c:	1009883a 	mov	r4,r2
  808740:	080de0c0 	call	80de0c <__fixdfsi>
  808744:	1009883a 	mov	r4,r2
  808748:	1029883a 	mov	r20,r2
  80874c:	080506c0 	call	80506c <__floatsidf>
  808750:	180f883a 	mov	r7,r3
  808754:	9009883a 	mov	r4,r18
  808758:	980b883a 	mov	r5,r19
  80875c:	100d883a 	mov	r6,r2
  808760:	08047a80 	call	8047a8 <__muldf3>
  808764:	180f883a 	mov	r7,r3
  808768:	880b883a 	mov	r5,r17
  80876c:	8009883a 	mov	r4,r16
  808770:	100d883a 	mov	r6,r2
  808774:	08046b40 	call	8046b4 <__subdf3>
  808778:	1015883a 	mov	r10,r2
  80877c:	a0800c04 	addi	r2,r20,48
  808780:	e0800005 	stb	r2,0(fp)
  808784:	e7000044 	addi	fp,fp,1
  808788:	1817883a 	mov	r11,r3
  80878c:	e57fd61e 	bne	fp,r21,8086e8 <_dtoa_r+0x5d8>
  808790:	500d883a 	mov	r6,r10
  808794:	180f883a 	mov	r7,r3
  808798:	5009883a 	mov	r4,r10
  80879c:	180b883a 	mov	r5,r3
  8087a0:	08047340 	call	804734 <__adddf3>
  8087a4:	100d883a 	mov	r6,r2
  8087a8:	9009883a 	mov	r4,r18
  8087ac:	980b883a 	mov	r5,r19
  8087b0:	180f883a 	mov	r7,r3
  8087b4:	1021883a 	mov	r16,r2
  8087b8:	1823883a 	mov	r17,r3
  8087bc:	0804f5c0 	call	804f5c <__ltdf2>
  8087c0:	10000816 	blt	r2,zero,8087e4 <_dtoa_r+0x6d4>
  8087c4:	980b883a 	mov	r5,r19
  8087c8:	800d883a 	mov	r6,r16
  8087cc:	880f883a 	mov	r7,r17
  8087d0:	9009883a 	mov	r4,r18
  8087d4:	0804dc40 	call	804dc4 <__eqdf2>
  8087d8:	1000171e 	bne	r2,zero,808838 <_dtoa_r+0x728>
  8087dc:	a080004c 	andi	r2,r20,1
  8087e0:	10001526 	beq	r2,zero,808838 <_dtoa_r+0x728>
  8087e4:	d8800d17 	ldw	r2,52(sp)
  8087e8:	d8800415 	stw	r2,16(sp)
  8087ec:	e009883a 	mov	r4,fp
  8087f0:	213fffc4 	addi	r4,r4,-1
  8087f4:	20c00007 	ldb	r3,0(r4)
  8087f8:	00800e44 	movi	r2,57
  8087fc:	1880081e 	bne	r3,r2,808820 <_dtoa_r+0x710>
  808800:	d8800517 	ldw	r2,20(sp)
  808804:	113ffa1e 	bne	r2,r4,8087f0 <_dtoa_r+0x6e0>
  808808:	d8c00417 	ldw	r3,16(sp)
  80880c:	d9800517 	ldw	r6,20(sp)
  808810:	00800c04 	movi	r2,48
  808814:	18c00044 	addi	r3,r3,1
  808818:	d8c00415 	stw	r3,16(sp)
  80881c:	30800005 	stb	r2,0(r6)
  808820:	20800003 	ldbu	r2,0(r4)
  808824:	d8c00417 	ldw	r3,16(sp)
  808828:	27000044 	addi	fp,r4,1
  80882c:	10800044 	addi	r2,r2,1
  808830:	d8c00d15 	stw	r3,52(sp)
  808834:	20800005 	stb	r2,0(r4)
  808838:	d9001617 	ldw	r4,88(sp)
  80883c:	d9400717 	ldw	r5,28(sp)
  808840:	080b2d80 	call	80b2d8 <_Bfree>
  808844:	e0000005 	stb	zero,0(fp)
  808848:	d9800d17 	ldw	r6,52(sp)
  80884c:	d8c02717 	ldw	r3,156(sp)
  808850:	d9002917 	ldw	r4,164(sp)
  808854:	30800044 	addi	r2,r6,1
  808858:	18800015 	stw	r2,0(r3)
  80885c:	20029c26 	beq	r4,zero,8092d0 <_dtoa_r+0x11c0>
  808860:	d8c00517 	ldw	r3,20(sp)
  808864:	27000015 	stw	fp,0(r4)
  808868:	003e5d06 	br	8081e0 <_dtoa_r+0xd0>
  80886c:	d9800d17 	ldw	r6,52(sp)
  808870:	00c020b4 	movhi	r3,130
  808874:	18e93404 	addi	r3,r3,-23344
  808878:	d9001217 	ldw	r4,72(sp)
  80887c:	300490fa 	slli	r2,r6,3
  808880:	d9401317 	ldw	r5,76(sp)
  808884:	10c5883a 	add	r2,r2,r3
  808888:	12000017 	ldw	r8,0(r2)
  80888c:	12400117 	ldw	r9,4(r2)
  808890:	400d883a 	mov	r6,r8
  808894:	480f883a 	mov	r7,r9
  808898:	0804f5c0 	call	804f5c <__ltdf2>
  80889c:	1000030e 	bge	r2,zero,8088ac <_dtoa_r+0x79c>
  8088a0:	d8800d17 	ldw	r2,52(sp)
  8088a4:	10bfffc4 	addi	r2,r2,-1
  8088a8:	d8800d15 	stw	r2,52(sp)
  8088ac:	d8000c15 	stw	zero,48(sp)
  8088b0:	003ea806 	br	808354 <_dtoa_r+0x244>
  8088b4:	d9000b17 	ldw	r4,44(sp)
  8088b8:	202cc03a 	cmpne	r22,r4,zero
  8088bc:	b000c71e 	bne	r22,zero,808bdc <_dtoa_r+0xacc>
  8088c0:	dc001117 	ldw	r16,68(sp)
  8088c4:	dc801017 	ldw	r18,64(sp)
  8088c8:	0027883a 	mov	r19,zero
  8088cc:	04000b0e 	bge	zero,r16,8088fc <_dtoa_r+0x7ec>
  8088d0:	d8c00a17 	ldw	r3,40(sp)
  8088d4:	00c0090e 	bge	zero,r3,8088fc <_dtoa_r+0x7ec>
  8088d8:	8005883a 	mov	r2,r16
  8088dc:	1c011316 	blt	r3,r16,808d2c <_dtoa_r+0xc1c>
  8088e0:	d9000a17 	ldw	r4,40(sp)
  8088e4:	d9801117 	ldw	r6,68(sp)
  8088e8:	80a1c83a 	sub	r16,r16,r2
  8088ec:	2089c83a 	sub	r4,r4,r2
  8088f0:	308dc83a 	sub	r6,r6,r2
  8088f4:	d9000a15 	stw	r4,40(sp)
  8088f8:	d9801115 	stw	r6,68(sp)
  8088fc:	d8801017 	ldw	r2,64(sp)
  808900:	0080150e 	bge	zero,r2,808958 <_dtoa_r+0x848>
  808904:	d8c00b17 	ldw	r3,44(sp)
  808908:	1805003a 	cmpeq	r2,r3,zero
  80890c:	1001c91e 	bne	r2,zero,809034 <_dtoa_r+0xf24>
  808910:	04800e0e 	bge	zero,r18,80894c <_dtoa_r+0x83c>
  808914:	d9001617 	ldw	r4,88(sp)
  808918:	980b883a 	mov	r5,r19
  80891c:	900d883a 	mov	r6,r18
  808920:	080c1240 	call	80c124 <__pow5mult>
  808924:	d9001617 	ldw	r4,88(sp)
  808928:	d9800717 	ldw	r6,28(sp)
  80892c:	100b883a 	mov	r5,r2
  808930:	1027883a 	mov	r19,r2
  808934:	080bd680 	call	80bd68 <__multiply>
  808938:	d9001617 	ldw	r4,88(sp)
  80893c:	d9400717 	ldw	r5,28(sp)
  808940:	1023883a 	mov	r17,r2
  808944:	080b2d80 	call	80b2d8 <_Bfree>
  808948:	dc400715 	stw	r17,28(sp)
  80894c:	d9001017 	ldw	r4,64(sp)
  808950:	248dc83a 	sub	r6,r4,r18
  808954:	30010e1e 	bne	r6,zero,808d90 <_dtoa_r+0xc80>
  808958:	d9001617 	ldw	r4,88(sp)
  80895c:	04400044 	movi	r17,1
  808960:	880b883a 	mov	r5,r17
  808964:	080bfbc0 	call	80bfbc <__i2b>
  808968:	d9800917 	ldw	r6,36(sp)
  80896c:	1025883a 	mov	r18,r2
  808970:	0180040e 	bge	zero,r6,808984 <_dtoa_r+0x874>
  808974:	d9001617 	ldw	r4,88(sp)
  808978:	100b883a 	mov	r5,r2
  80897c:	080c1240 	call	80c124 <__pow5mult>
  808980:	1025883a 	mov	r18,r2
  808984:	d8801717 	ldw	r2,92(sp)
  808988:	8880f30e 	bge	r17,r2,808d58 <_dtoa_r+0xc48>
  80898c:	0023883a 	mov	r17,zero
  808990:	d9800917 	ldw	r6,36(sp)
  808994:	30019e1e 	bne	r6,zero,809010 <_dtoa_r+0xf00>
  808998:	00c00044 	movi	r3,1
  80899c:	d9000a17 	ldw	r4,40(sp)
  8089a0:	20c5883a 	add	r2,r4,r3
  8089a4:	10c007cc 	andi	r3,r2,31
  8089a8:	1800841e 	bne	r3,zero,808bbc <_dtoa_r+0xaac>
  8089ac:	00800704 	movi	r2,28
  8089b0:	d9000a17 	ldw	r4,40(sp)
  8089b4:	d9801117 	ldw	r6,68(sp)
  8089b8:	80a1883a 	add	r16,r16,r2
  8089bc:	2089883a 	add	r4,r4,r2
  8089c0:	308d883a 	add	r6,r6,r2
  8089c4:	d9000a15 	stw	r4,40(sp)
  8089c8:	d9801115 	stw	r6,68(sp)
  8089cc:	d8801117 	ldw	r2,68(sp)
  8089d0:	0080050e 	bge	zero,r2,8089e8 <_dtoa_r+0x8d8>
  8089d4:	d9400717 	ldw	r5,28(sp)
  8089d8:	d9001617 	ldw	r4,88(sp)
  8089dc:	100d883a 	mov	r6,r2
  8089e0:	080bc1c0 	call	80bc1c <__lshift>
  8089e4:	d8800715 	stw	r2,28(sp)
  8089e8:	d8c00a17 	ldw	r3,40(sp)
  8089ec:	00c0050e 	bge	zero,r3,808a04 <_dtoa_r+0x8f4>
  8089f0:	d9001617 	ldw	r4,88(sp)
  8089f4:	900b883a 	mov	r5,r18
  8089f8:	180d883a 	mov	r6,r3
  8089fc:	080bc1c0 	call	80bc1c <__lshift>
  808a00:	1025883a 	mov	r18,r2
  808a04:	d9000c17 	ldw	r4,48(sp)
  808a08:	2005003a 	cmpeq	r2,r4,zero
  808a0c:	10016f26 	beq	r2,zero,808fcc <_dtoa_r+0xebc>
  808a10:	d9000f17 	ldw	r4,60(sp)
  808a14:	0102170e 	bge	zero,r4,809274 <_dtoa_r+0x1164>
  808a18:	d9800b17 	ldw	r6,44(sp)
  808a1c:	3005003a 	cmpeq	r2,r6,zero
  808a20:	1000881e 	bne	r2,zero,808c44 <_dtoa_r+0xb34>
  808a24:	0400050e 	bge	zero,r16,808a3c <_dtoa_r+0x92c>
  808a28:	d9001617 	ldw	r4,88(sp)
  808a2c:	980b883a 	mov	r5,r19
  808a30:	800d883a 	mov	r6,r16
  808a34:	080bc1c0 	call	80bc1c <__lshift>
  808a38:	1027883a 	mov	r19,r2
  808a3c:	8804c03a 	cmpne	r2,r17,zero
  808a40:	1002541e 	bne	r2,zero,809394 <_dtoa_r+0x1284>
  808a44:	980b883a 	mov	r5,r19
  808a48:	dd800517 	ldw	r22,20(sp)
  808a4c:	dcc00615 	stw	r19,24(sp)
  808a50:	a700004c 	andi	fp,r20,1
  808a54:	2827883a 	mov	r19,r5
  808a58:	d9000717 	ldw	r4,28(sp)
  808a5c:	900b883a 	mov	r5,r18
  808a60:	0807ecc0 	call	807ecc <quorem>
  808a64:	d9000717 	ldw	r4,28(sp)
  808a68:	d9400617 	ldw	r5,24(sp)
  808a6c:	1023883a 	mov	r17,r2
  808a70:	8dc00c04 	addi	r23,r17,48
  808a74:	080b4340 	call	80b434 <__mcmp>
  808a78:	d9001617 	ldw	r4,88(sp)
  808a7c:	900b883a 	mov	r5,r18
  808a80:	980d883a 	mov	r6,r19
  808a84:	1029883a 	mov	r20,r2
  808a88:	080ba900 	call	80ba90 <__mdiff>
  808a8c:	102b883a 	mov	r21,r2
  808a90:	10800317 	ldw	r2,12(r2)
  808a94:	1001281e 	bne	r2,zero,808f38 <_dtoa_r+0xe28>
  808a98:	d9000717 	ldw	r4,28(sp)
  808a9c:	a80b883a 	mov	r5,r21
  808aa0:	080b4340 	call	80b434 <__mcmp>
  808aa4:	d9001617 	ldw	r4,88(sp)
  808aa8:	1021883a 	mov	r16,r2
  808aac:	a80b883a 	mov	r5,r21
  808ab0:	080b2d80 	call	80b2d8 <_Bfree>
  808ab4:	8000041e 	bne	r16,zero,808ac8 <_dtoa_r+0x9b8>
  808ab8:	d8801717 	ldw	r2,92(sp)
  808abc:	1000021e 	bne	r2,zero,808ac8 <_dtoa_r+0x9b8>
  808ac0:	e004c03a 	cmpne	r2,fp,zero
  808ac4:	10011726 	beq	r2,zero,808f24 <_dtoa_r+0xe14>
  808ac8:	a0010616 	blt	r20,zero,808ee4 <_dtoa_r+0xdd4>
  808acc:	a000041e 	bne	r20,zero,808ae0 <_dtoa_r+0x9d0>
  808ad0:	d8c01717 	ldw	r3,92(sp)
  808ad4:	1800021e 	bne	r3,zero,808ae0 <_dtoa_r+0x9d0>
  808ad8:	e004c03a 	cmpne	r2,fp,zero
  808adc:	10010126 	beq	r2,zero,808ee4 <_dtoa_r+0xdd4>
  808ae0:	04023d16 	blt	zero,r16,8093d8 <_dtoa_r+0x12c8>
  808ae4:	b5c00005 	stb	r23,0(r22)
  808ae8:	d9800517 	ldw	r6,20(sp)
  808aec:	d9000f17 	ldw	r4,60(sp)
  808af0:	b5800044 	addi	r22,r22,1
  808af4:	3105883a 	add	r2,r6,r4
  808af8:	b0806526 	beq	r22,r2,808c90 <_dtoa_r+0xb80>
  808afc:	d9400717 	ldw	r5,28(sp)
  808b00:	d9001617 	ldw	r4,88(sp)
  808b04:	01800284 	movi	r6,10
  808b08:	000f883a 	mov	r7,zero
  808b0c:	080bff80 	call	80bff8 <__multadd>
  808b10:	d8800715 	stw	r2,28(sp)
  808b14:	d8800617 	ldw	r2,24(sp)
  808b18:	14c10c26 	beq	r2,r19,808f4c <_dtoa_r+0xe3c>
  808b1c:	d9400617 	ldw	r5,24(sp)
  808b20:	d9001617 	ldw	r4,88(sp)
  808b24:	01800284 	movi	r6,10
  808b28:	000f883a 	mov	r7,zero
  808b2c:	080bff80 	call	80bff8 <__multadd>
  808b30:	d9001617 	ldw	r4,88(sp)
  808b34:	980b883a 	mov	r5,r19
  808b38:	01800284 	movi	r6,10
  808b3c:	000f883a 	mov	r7,zero
  808b40:	d8800615 	stw	r2,24(sp)
  808b44:	080bff80 	call	80bff8 <__multadd>
  808b48:	1027883a 	mov	r19,r2
  808b4c:	003fc206 	br	808a58 <_dtoa_r+0x948>
  808b50:	2445c83a 	sub	r2,r4,r17
  808b54:	a088983a 	sll	r4,r20,r2
  808b58:	003e4b06 	br	808488 <_dtoa_r+0x378>
  808b5c:	01bfffc4 	movi	r6,-1
  808b60:	00800044 	movi	r2,1
  808b64:	d9800e15 	stw	r6,56(sp)
  808b68:	d9800f15 	stw	r6,60(sp)
  808b6c:	d8800b15 	stw	r2,44(sp)
  808b70:	d8c01617 	ldw	r3,88(sp)
  808b74:	008005c4 	movi	r2,23
  808b78:	18001115 	stw	zero,68(r3)
  808b7c:	1580082e 	bgeu	r2,r22,808ba0 <_dtoa_r+0xa90>
  808b80:	00c00104 	movi	r3,4
  808b84:	0009883a 	mov	r4,zero
  808b88:	18c7883a 	add	r3,r3,r3
  808b8c:	18800504 	addi	r2,r3,20
  808b90:	21000044 	addi	r4,r4,1
  808b94:	b0bffc2e 	bgeu	r22,r2,808b88 <_dtoa_r+0xa78>
  808b98:	d9801617 	ldw	r6,88(sp)
  808b9c:	31001115 	stw	r4,68(r6)
  808ba0:	dc000f17 	ldw	r16,60(sp)
  808ba4:	003e4b06 	br	8084d4 <_dtoa_r+0x3c4>
  808ba8:	d9801717 	ldw	r6,92(sp)
  808bac:	0023883a 	mov	r17,zero
  808bb0:	31bfff04 	addi	r6,r6,-4
  808bb4:	d9801715 	stw	r6,92(sp)
  808bb8:	003df806 	br	80839c <_dtoa_r+0x28c>
  808bbc:	00800804 	movi	r2,32
  808bc0:	10c9c83a 	sub	r4,r2,r3
  808bc4:	00c00104 	movi	r3,4
  808bc8:	19005a16 	blt	r3,r4,808d34 <_dtoa_r+0xc24>
  808bcc:	008000c4 	movi	r2,3
  808bd0:	113f7e16 	blt	r2,r4,8089cc <_dtoa_r+0x8bc>
  808bd4:	20800704 	addi	r2,r4,28
  808bd8:	003f7506 	br	8089b0 <_dtoa_r+0x8a0>
  808bdc:	d9801717 	ldw	r6,92(sp)
  808be0:	00800044 	movi	r2,1
  808be4:	1180a10e 	bge	r2,r6,808e6c <_dtoa_r+0xd5c>
  808be8:	d9800f17 	ldw	r6,60(sp)
  808bec:	d8c01017 	ldw	r3,64(sp)
  808bf0:	30bfffc4 	addi	r2,r6,-1
  808bf4:	1881c616 	blt	r3,r2,809310 <_dtoa_r+0x1200>
  808bf8:	18a5c83a 	sub	r18,r3,r2
  808bfc:	d8800f17 	ldw	r2,60(sp)
  808c00:	10026216 	blt	r2,zero,80958c <_dtoa_r+0x147c>
  808c04:	dc001117 	ldw	r16,68(sp)
  808c08:	1007883a 	mov	r3,r2
  808c0c:	d9800a17 	ldw	r6,40(sp)
  808c10:	d8801117 	ldw	r2,68(sp)
  808c14:	d9001617 	ldw	r4,88(sp)
  808c18:	30cd883a 	add	r6,r6,r3
  808c1c:	10c5883a 	add	r2,r2,r3
  808c20:	01400044 	movi	r5,1
  808c24:	d9800a15 	stw	r6,40(sp)
  808c28:	d8801115 	stw	r2,68(sp)
  808c2c:	080bfbc0 	call	80bfbc <__i2b>
  808c30:	1027883a 	mov	r19,r2
  808c34:	003f2506 	br	8088cc <_dtoa_r+0x7bc>
  808c38:	00c020b4 	movhi	r3,130
  808c3c:	18e91704 	addi	r3,r3,-23460
  808c40:	003d6706 	br	8081e0 <_dtoa_r+0xd0>
  808c44:	dd800517 	ldw	r22,20(sp)
  808c48:	04000044 	movi	r16,1
  808c4c:	00000706 	br	808c6c <_dtoa_r+0xb5c>
  808c50:	d9400717 	ldw	r5,28(sp)
  808c54:	d9001617 	ldw	r4,88(sp)
  808c58:	01800284 	movi	r6,10
  808c5c:	000f883a 	mov	r7,zero
  808c60:	080bff80 	call	80bff8 <__multadd>
  808c64:	d8800715 	stw	r2,28(sp)
  808c68:	84000044 	addi	r16,r16,1
  808c6c:	d9000717 	ldw	r4,28(sp)
  808c70:	900b883a 	mov	r5,r18
  808c74:	0807ecc0 	call	807ecc <quorem>
  808c78:	15c00c04 	addi	r23,r2,48
  808c7c:	b5c00005 	stb	r23,0(r22)
  808c80:	d8c00f17 	ldw	r3,60(sp)
  808c84:	b5800044 	addi	r22,r22,1
  808c88:	80fff116 	blt	r16,r3,808c50 <_dtoa_r+0xb40>
  808c8c:	d8000615 	stw	zero,24(sp)
  808c90:	d9400717 	ldw	r5,28(sp)
  808c94:	d9001617 	ldw	r4,88(sp)
  808c98:	01800044 	movi	r6,1
  808c9c:	080bc1c0 	call	80bc1c <__lshift>
  808ca0:	1009883a 	mov	r4,r2
  808ca4:	900b883a 	mov	r5,r18
  808ca8:	d8800715 	stw	r2,28(sp)
  808cac:	080b4340 	call	80b434 <__mcmp>
  808cb0:	00803c0e 	bge	zero,r2,808da4 <_dtoa_r+0xc94>
  808cb4:	b009883a 	mov	r4,r22
  808cb8:	213fffc4 	addi	r4,r4,-1
  808cbc:	21400003 	ldbu	r5,0(r4)
  808cc0:	00800e44 	movi	r2,57
  808cc4:	28c03fcc 	andi	r3,r5,255
  808cc8:	18c0201c 	xori	r3,r3,128
  808ccc:	18ffe004 	addi	r3,r3,-128
  808cd0:	1881981e 	bne	r3,r2,809334 <_dtoa_r+0x1224>
  808cd4:	d9800517 	ldw	r6,20(sp)
  808cd8:	21bff71e 	bne	r4,r6,808cb8 <_dtoa_r+0xba8>
  808cdc:	d8800d17 	ldw	r2,52(sp)
  808ce0:	37000044 	addi	fp,r6,1
  808ce4:	10800044 	addi	r2,r2,1
  808ce8:	d8800d15 	stw	r2,52(sp)
  808cec:	00800c44 	movi	r2,49
  808cf0:	30800005 	stb	r2,0(r6)
  808cf4:	d9001617 	ldw	r4,88(sp)
  808cf8:	900b883a 	mov	r5,r18
  808cfc:	080b2d80 	call	80b2d8 <_Bfree>
  808d00:	983ecd26 	beq	r19,zero,808838 <_dtoa_r+0x728>
  808d04:	d8c00617 	ldw	r3,24(sp)
  808d08:	18000426 	beq	r3,zero,808d1c <_dtoa_r+0xc0c>
  808d0c:	1cc00326 	beq	r3,r19,808d1c <_dtoa_r+0xc0c>
  808d10:	d9001617 	ldw	r4,88(sp)
  808d14:	180b883a 	mov	r5,r3
  808d18:	080b2d80 	call	80b2d8 <_Bfree>
  808d1c:	d9001617 	ldw	r4,88(sp)
  808d20:	980b883a 	mov	r5,r19
  808d24:	080b2d80 	call	80b2d8 <_Bfree>
  808d28:	003ec306 	br	808838 <_dtoa_r+0x728>
  808d2c:	1805883a 	mov	r2,r3
  808d30:	003eeb06 	br	8088e0 <_dtoa_r+0x7d0>
  808d34:	d9800a17 	ldw	r6,40(sp)
  808d38:	d8c01117 	ldw	r3,68(sp)
  808d3c:	20bfff04 	addi	r2,r4,-4
  808d40:	308d883a 	add	r6,r6,r2
  808d44:	1887883a 	add	r3,r3,r2
  808d48:	80a1883a 	add	r16,r16,r2
  808d4c:	d9800a15 	stw	r6,40(sp)
  808d50:	d8c01115 	stw	r3,68(sp)
  808d54:	003f1d06 	br	8089cc <_dtoa_r+0x8bc>
  808d58:	a03f0c1e 	bne	r20,zero,80898c <_dtoa_r+0x87c>
  808d5c:	00800434 	movhi	r2,16
  808d60:	10bfffc4 	addi	r2,r2,-1
  808d64:	a884703a 	and	r2,r21,r2
  808d68:	103f081e 	bne	r2,zero,80898c <_dtoa_r+0x87c>
  808d6c:	a89ffc2c 	andhi	r2,r21,32752
  808d70:	103f0626 	beq	r2,zero,80898c <_dtoa_r+0x87c>
  808d74:	d8c01117 	ldw	r3,68(sp)
  808d78:	d9000a17 	ldw	r4,40(sp)
  808d7c:	18c00044 	addi	r3,r3,1
  808d80:	21000044 	addi	r4,r4,1
  808d84:	d8c01115 	stw	r3,68(sp)
  808d88:	d9000a15 	stw	r4,40(sp)
  808d8c:	003f0006 	br	808990 <_dtoa_r+0x880>
  808d90:	d9400717 	ldw	r5,28(sp)
  808d94:	d9001617 	ldw	r4,88(sp)
  808d98:	080c1240 	call	80c124 <__pow5mult>
  808d9c:	d8800715 	stw	r2,28(sp)
  808da0:	003eed06 	br	808958 <_dtoa_r+0x848>
  808da4:	1000021e 	bne	r2,zero,808db0 <_dtoa_r+0xca0>
  808da8:	b880004c 	andi	r2,r23,1
  808dac:	103fc11e 	bne	r2,zero,808cb4 <_dtoa_r+0xba4>
  808db0:	b5bfffc4 	addi	r22,r22,-1
  808db4:	b0c00007 	ldb	r3,0(r22)
  808db8:	00800c04 	movi	r2,48
  808dbc:	18bffc26 	beq	r3,r2,808db0 <_dtoa_r+0xca0>
  808dc0:	b7000044 	addi	fp,r22,1
  808dc4:	003fcb06 	br	808cf4 <_dtoa_r+0xbe4>
  808dc8:	d9800d17 	ldw	r6,52(sp)
  808dcc:	018fc83a 	sub	r7,zero,r6
  808dd0:	3801f726 	beq	r7,zero,8095b0 <_dtoa_r+0x14a0>
  808dd4:	398003cc 	andi	r6,r7,15
  808dd8:	300c90fa 	slli	r6,r6,3
  808ddc:	014020b4 	movhi	r5,130
  808de0:	29693404 	addi	r5,r5,-23344
  808de4:	d9001217 	ldw	r4,72(sp)
  808de8:	314d883a 	add	r6,r6,r5
  808dec:	30c00117 	ldw	r3,4(r6)
  808df0:	30800017 	ldw	r2,0(r6)
  808df4:	d9401317 	ldw	r5,76(sp)
  808df8:	3821d13a 	srai	r16,r7,4
  808dfc:	100d883a 	mov	r6,r2
  808e00:	180f883a 	mov	r7,r3
  808e04:	08047a80 	call	8047a8 <__muldf3>
  808e08:	1011883a 	mov	r8,r2
  808e0c:	1813883a 	mov	r9,r3
  808e10:	1029883a 	mov	r20,r2
  808e14:	182b883a 	mov	r21,r3
  808e18:	8001e526 	beq	r16,zero,8095b0 <_dtoa_r+0x14a0>
  808e1c:	05800084 	movi	r22,2
  808e20:	044020b4 	movhi	r17,130
  808e24:	8c696604 	addi	r17,r17,-23144
  808e28:	8080004c 	andi	r2,r16,1
  808e2c:	1005003a 	cmpeq	r2,r2,zero
  808e30:	1000081e 	bne	r2,zero,808e54 <_dtoa_r+0xd44>
  808e34:	89800017 	ldw	r6,0(r17)
  808e38:	89c00117 	ldw	r7,4(r17)
  808e3c:	480b883a 	mov	r5,r9
  808e40:	4009883a 	mov	r4,r8
  808e44:	08047a80 	call	8047a8 <__muldf3>
  808e48:	1011883a 	mov	r8,r2
  808e4c:	b5800044 	addi	r22,r22,1
  808e50:	1813883a 	mov	r9,r3
  808e54:	8021d07a 	srai	r16,r16,1
  808e58:	8c400204 	addi	r17,r17,8
  808e5c:	803ff21e 	bne	r16,zero,808e28 <_dtoa_r+0xd18>
  808e60:	4029883a 	mov	r20,r8
  808e64:	482b883a 	mov	r21,r9
  808e68:	003dca06 	br	808594 <_dtoa_r+0x484>
  808e6c:	d9000817 	ldw	r4,32(sp)
  808e70:	2005003a 	cmpeq	r2,r4,zero
  808e74:	1001f61e 	bne	r2,zero,809650 <_dtoa_r+0x1540>
  808e78:	dc001117 	ldw	r16,68(sp)
  808e7c:	dc801017 	ldw	r18,64(sp)
  808e80:	18c10cc4 	addi	r3,r3,1075
  808e84:	003f6106 	br	808c0c <_dtoa_r+0xafc>
  808e88:	d8000b15 	stw	zero,44(sp)
  808e8c:	d9802617 	ldw	r6,152(sp)
  808e90:	d8c00d17 	ldw	r3,52(sp)
  808e94:	30800044 	addi	r2,r6,1
  808e98:	18ad883a 	add	r22,r3,r2
  808e9c:	b13fffc4 	addi	r4,r22,-1
  808ea0:	d9000e15 	stw	r4,56(sp)
  808ea4:	0581f60e 	bge	zero,r22,809680 <_dtoa_r+0x1570>
  808ea8:	dd800f15 	stw	r22,60(sp)
  808eac:	003f3006 	br	808b70 <_dtoa_r+0xa60>
  808eb0:	d8000b15 	stw	zero,44(sp)
  808eb4:	d9002617 	ldw	r4,152(sp)
  808eb8:	0101eb0e 	bge	zero,r4,809668 <_dtoa_r+0x1558>
  808ebc:	202d883a 	mov	r22,r4
  808ec0:	d9000e15 	stw	r4,56(sp)
  808ec4:	d9000f15 	stw	r4,60(sp)
  808ec8:	003f2906 	br	808b70 <_dtoa_r+0xa60>
  808ecc:	01800044 	movi	r6,1
  808ed0:	d9800b15 	stw	r6,44(sp)
  808ed4:	003ff706 	br	808eb4 <_dtoa_r+0xda4>
  808ed8:	01000044 	movi	r4,1
  808edc:	d9000b15 	stw	r4,44(sp)
  808ee0:	003fea06 	br	808e8c <_dtoa_r+0xd7c>
  808ee4:	04000c0e 	bge	zero,r16,808f18 <_dtoa_r+0xe08>
  808ee8:	d9400717 	ldw	r5,28(sp)
  808eec:	d9001617 	ldw	r4,88(sp)
  808ef0:	01800044 	movi	r6,1
  808ef4:	080bc1c0 	call	80bc1c <__lshift>
  808ef8:	1009883a 	mov	r4,r2
  808efc:	900b883a 	mov	r5,r18
  808f00:	d8800715 	stw	r2,28(sp)
  808f04:	080b4340 	call	80b434 <__mcmp>
  808f08:	0081e00e 	bge	zero,r2,80968c <_dtoa_r+0x157c>
  808f0c:	bdc00044 	addi	r23,r23,1
  808f10:	00800e84 	movi	r2,58
  808f14:	b881a226 	beq	r23,r2,8095a0 <_dtoa_r+0x1490>
  808f18:	b7000044 	addi	fp,r22,1
  808f1c:	b5c00005 	stb	r23,0(r22)
  808f20:	003f7406 	br	808cf4 <_dtoa_r+0xbe4>
  808f24:	00800e44 	movi	r2,57
  808f28:	b8819d26 	beq	r23,r2,8095a0 <_dtoa_r+0x1490>
  808f2c:	053ffa0e 	bge	zero,r20,808f18 <_dtoa_r+0xe08>
  808f30:	8dc00c44 	addi	r23,r17,49
  808f34:	003ff806 	br	808f18 <_dtoa_r+0xe08>
  808f38:	d9001617 	ldw	r4,88(sp)
  808f3c:	a80b883a 	mov	r5,r21
  808f40:	04000044 	movi	r16,1
  808f44:	080b2d80 	call	80b2d8 <_Bfree>
  808f48:	003edf06 	br	808ac8 <_dtoa_r+0x9b8>
  808f4c:	d9001617 	ldw	r4,88(sp)
  808f50:	980b883a 	mov	r5,r19
  808f54:	01800284 	movi	r6,10
  808f58:	000f883a 	mov	r7,zero
  808f5c:	080bff80 	call	80bff8 <__multadd>
  808f60:	1027883a 	mov	r19,r2
  808f64:	d8800615 	stw	r2,24(sp)
  808f68:	003ebb06 	br	808a58 <_dtoa_r+0x948>
  808f6c:	d9801117 	ldw	r6,68(sp)
  808f70:	d8800d17 	ldw	r2,52(sp)
  808f74:	d8000915 	stw	zero,36(sp)
  808f78:	308dc83a 	sub	r6,r6,r2
  808f7c:	0087c83a 	sub	r3,zero,r2
  808f80:	d9801115 	stw	r6,68(sp)
  808f84:	d8c01015 	stw	r3,64(sp)
  808f88:	003cfe06 	br	808384 <_dtoa_r+0x274>
  808f8c:	018dc83a 	sub	r6,zero,r6
  808f90:	d9801115 	stw	r6,68(sp)
  808f94:	d8000a15 	stw	zero,40(sp)
  808f98:	003cf306 	br	808368 <_dtoa_r+0x258>
  808f9c:	d9000d17 	ldw	r4,52(sp)
  808fa0:	080506c0 	call	80506c <__floatsidf>
  808fa4:	880b883a 	mov	r5,r17
  808fa8:	8009883a 	mov	r4,r16
  808fac:	180f883a 	mov	r7,r3
  808fb0:	100d883a 	mov	r6,r2
  808fb4:	0804e4c0 	call	804e4c <__nedf2>
  808fb8:	103ce126 	beq	r2,zero,808340 <_dtoa_r+0x230>
  808fbc:	d9800d17 	ldw	r6,52(sp)
  808fc0:	31bfffc4 	addi	r6,r6,-1
  808fc4:	d9800d15 	stw	r6,52(sp)
  808fc8:	003cdd06 	br	808340 <_dtoa_r+0x230>
  808fcc:	d9000717 	ldw	r4,28(sp)
  808fd0:	900b883a 	mov	r5,r18
  808fd4:	080b4340 	call	80b434 <__mcmp>
  808fd8:	103e8d0e 	bge	r2,zero,808a10 <_dtoa_r+0x900>
  808fdc:	d9400717 	ldw	r5,28(sp)
  808fe0:	d9001617 	ldw	r4,88(sp)
  808fe4:	01800284 	movi	r6,10
  808fe8:	000f883a 	mov	r7,zero
  808fec:	080bff80 	call	80bff8 <__multadd>
  808ff0:	d9800d17 	ldw	r6,52(sp)
  808ff4:	d8800715 	stw	r2,28(sp)
  808ff8:	31bfffc4 	addi	r6,r6,-1
  808ffc:	d9800d15 	stw	r6,52(sp)
  809000:	b001a71e 	bne	r22,zero,8096a0 <_dtoa_r+0x1590>
  809004:	d8800e17 	ldw	r2,56(sp)
  809008:	d8800f15 	stw	r2,60(sp)
  80900c:	003e8006 	br	808a10 <_dtoa_r+0x900>
  809010:	90800417 	ldw	r2,16(r18)
  809014:	1085883a 	add	r2,r2,r2
  809018:	1085883a 	add	r2,r2,r2
  80901c:	1485883a 	add	r2,r2,r18
  809020:	11000417 	ldw	r4,16(r2)
  809024:	080b3000 	call	80b300 <__hi0bits>
  809028:	00c00804 	movi	r3,32
  80902c:	1887c83a 	sub	r3,r3,r2
  809030:	003e5a06 	br	80899c <_dtoa_r+0x88c>
  809034:	d9400717 	ldw	r5,28(sp)
  809038:	d9801017 	ldw	r6,64(sp)
  80903c:	d9001617 	ldw	r4,88(sp)
  809040:	080c1240 	call	80c124 <__pow5mult>
  809044:	d8800715 	stw	r2,28(sp)
  809048:	003e4306 	br	808958 <_dtoa_r+0x848>
  80904c:	d9800f17 	ldw	r6,60(sp)
  809050:	d8800d17 	ldw	r2,52(sp)
  809054:	d9800315 	stw	r6,12(sp)
  809058:	d8800415 	stw	r2,16(sp)
  80905c:	d8c00b17 	ldw	r3,44(sp)
  809060:	1805003a 	cmpeq	r2,r3,zero
  809064:	1000e21e 	bne	r2,zero,8093f0 <_dtoa_r+0x12e0>
  809068:	d9000317 	ldw	r4,12(sp)
  80906c:	0005883a 	mov	r2,zero
  809070:	00cff834 	movhi	r3,16352
  809074:	200c90fa 	slli	r6,r4,3
  809078:	010020b4 	movhi	r4,130
  80907c:	21293404 	addi	r4,r4,-23344
  809080:	180b883a 	mov	r5,r3
  809084:	310d883a 	add	r6,r6,r4
  809088:	327fff17 	ldw	r9,-4(r6)
  80908c:	323ffe17 	ldw	r8,-8(r6)
  809090:	1009883a 	mov	r4,r2
  809094:	480f883a 	mov	r7,r9
  809098:	400d883a 	mov	r6,r8
  80909c:	0804b6c0 	call	804b6c <__divdf3>
  8090a0:	180b883a 	mov	r5,r3
  8090a4:	b00d883a 	mov	r6,r22
  8090a8:	b80f883a 	mov	r7,r23
  8090ac:	1009883a 	mov	r4,r2
  8090b0:	08046b40 	call	8046b4 <__subdf3>
  8090b4:	a80b883a 	mov	r5,r21
  8090b8:	a009883a 	mov	r4,r20
  8090bc:	d8c01915 	stw	r3,100(sp)
  8090c0:	d8801815 	stw	r2,96(sp)
  8090c4:	080de0c0 	call	80de0c <__fixdfsi>
  8090c8:	1009883a 	mov	r4,r2
  8090cc:	1027883a 	mov	r19,r2
  8090d0:	080506c0 	call	80506c <__floatsidf>
  8090d4:	a80b883a 	mov	r5,r21
  8090d8:	a009883a 	mov	r4,r20
  8090dc:	180f883a 	mov	r7,r3
  8090e0:	100d883a 	mov	r6,r2
  8090e4:	08046b40 	call	8046b4 <__subdf3>
  8090e8:	d9801817 	ldw	r6,96(sp)
  8090ec:	1823883a 	mov	r17,r3
  8090f0:	d8801415 	stw	r2,80(sp)
  8090f4:	302d883a 	mov	r22,r6
  8090f8:	d9800517 	ldw	r6,20(sp)
  8090fc:	9cc00c04 	addi	r19,r19,48
  809100:	dc401515 	stw	r17,84(sp)
  809104:	d8c01917 	ldw	r3,100(sp)
  809108:	34c00005 	stb	r19,0(r6)
  80910c:	d8800517 	ldw	r2,20(sp)
  809110:	d9401917 	ldw	r5,100(sp)
  809114:	d9801417 	ldw	r6,80(sp)
  809118:	b009883a 	mov	r4,r22
  80911c:	880f883a 	mov	r7,r17
  809120:	182f883a 	mov	r23,r3
  809124:	17000044 	addi	fp,r2,1
  809128:	0804ed40 	call	804ed4 <__gtdf2>
  80912c:	00804e16 	blt	zero,r2,809268 <_dtoa_r+0x1158>
  809130:	d9801417 	ldw	r6,80(sp)
  809134:	0005883a 	mov	r2,zero
  809138:	00cffc34 	movhi	r3,16368
  80913c:	180b883a 	mov	r5,r3
  809140:	880f883a 	mov	r7,r17
  809144:	1009883a 	mov	r4,r2
  809148:	08046b40 	call	8046b4 <__subdf3>
  80914c:	d9401917 	ldw	r5,100(sp)
  809150:	180f883a 	mov	r7,r3
  809154:	b009883a 	mov	r4,r22
  809158:	100d883a 	mov	r6,r2
  80915c:	0804ed40 	call	804ed4 <__gtdf2>
  809160:	00bda216 	blt	zero,r2,8087ec <_dtoa_r+0x6dc>
  809164:	d8c00317 	ldw	r3,12(sp)
  809168:	00800044 	movi	r2,1
  80916c:	10c01216 	blt	r2,r3,8091b8 <_dtoa_r+0x10a8>
  809170:	003d4506 	br	808688 <_dtoa_r+0x578>
  809174:	d9801417 	ldw	r6,80(sp)
  809178:	0005883a 	mov	r2,zero
  80917c:	00cffc34 	movhi	r3,16368
  809180:	180b883a 	mov	r5,r3
  809184:	880f883a 	mov	r7,r17
  809188:	1009883a 	mov	r4,r2
  80918c:	08046b40 	call	8046b4 <__subdf3>
  809190:	d9c01b17 	ldw	r7,108(sp)
  809194:	180b883a 	mov	r5,r3
  809198:	1009883a 	mov	r4,r2
  80919c:	b00d883a 	mov	r6,r22
  8091a0:	0804f5c0 	call	804f5c <__ltdf2>
  8091a4:	103d9116 	blt	r2,zero,8087ec <_dtoa_r+0x6dc>
  8091a8:	d9800517 	ldw	r6,20(sp)
  8091ac:	d9000317 	ldw	r4,12(sp)
  8091b0:	3105883a 	add	r2,r6,r4
  8091b4:	e0bd3426 	beq	fp,r2,808688 <_dtoa_r+0x578>
  8091b8:	04500934 	movhi	r17,16420
  8091bc:	0021883a 	mov	r16,zero
  8091c0:	b80b883a 	mov	r5,r23
  8091c4:	b009883a 	mov	r4,r22
  8091c8:	800d883a 	mov	r6,r16
  8091cc:	880f883a 	mov	r7,r17
  8091d0:	08047a80 	call	8047a8 <__muldf3>
  8091d4:	d9401517 	ldw	r5,84(sp)
  8091d8:	d9001417 	ldw	r4,80(sp)
  8091dc:	880f883a 	mov	r7,r17
  8091e0:	000d883a 	mov	r6,zero
  8091e4:	d8801a15 	stw	r2,104(sp)
  8091e8:	d8c01b15 	stw	r3,108(sp)
  8091ec:	08047a80 	call	8047a8 <__muldf3>
  8091f0:	180b883a 	mov	r5,r3
  8091f4:	1009883a 	mov	r4,r2
  8091f8:	1823883a 	mov	r17,r3
  8091fc:	1021883a 	mov	r16,r2
  809200:	080de0c0 	call	80de0c <__fixdfsi>
  809204:	1009883a 	mov	r4,r2
  809208:	102b883a 	mov	r21,r2
  80920c:	080506c0 	call	80506c <__floatsidf>
  809210:	880b883a 	mov	r5,r17
  809214:	8009883a 	mov	r4,r16
  809218:	180f883a 	mov	r7,r3
  80921c:	100d883a 	mov	r6,r2
  809220:	08046b40 	call	8046b4 <__subdf3>
  809224:	1021883a 	mov	r16,r2
  809228:	d9001b17 	ldw	r4,108(sp)
  80922c:	1823883a 	mov	r17,r3
  809230:	dc001415 	stw	r16,80(sp)
  809234:	ad400c04 	addi	r21,r21,48
  809238:	dc401515 	stw	r17,84(sp)
  80923c:	d8801a17 	ldw	r2,104(sp)
  809240:	e5400005 	stb	r21,0(fp)
  809244:	202f883a 	mov	r23,r4
  809248:	d9c01b17 	ldw	r7,108(sp)
  80924c:	d9001417 	ldw	r4,80(sp)
  809250:	880b883a 	mov	r5,r17
  809254:	100d883a 	mov	r6,r2
  809258:	102d883a 	mov	r22,r2
  80925c:	e7000044 	addi	fp,fp,1
  809260:	0804f5c0 	call	804f5c <__ltdf2>
  809264:	103fc30e 	bge	r2,zero,809174 <_dtoa_r+0x1064>
  809268:	d9000417 	ldw	r4,16(sp)
  80926c:	d9000d15 	stw	r4,52(sp)
  809270:	003d7106 	br	808838 <_dtoa_r+0x728>
  809274:	d9801717 	ldw	r6,92(sp)
  809278:	00800084 	movi	r2,2
  80927c:	11bde60e 	bge	r2,r6,808a18 <_dtoa_r+0x908>
  809280:	203cfb1e 	bne	r4,zero,808670 <_dtoa_r+0x560>
  809284:	d9001617 	ldw	r4,88(sp)
  809288:	900b883a 	mov	r5,r18
  80928c:	01800144 	movi	r6,5
  809290:	000f883a 	mov	r7,zero
  809294:	080bff80 	call	80bff8 <__multadd>
  809298:	d9000717 	ldw	r4,28(sp)
  80929c:	100b883a 	mov	r5,r2
  8092a0:	1025883a 	mov	r18,r2
  8092a4:	080b4340 	call	80b434 <__mcmp>
  8092a8:	00bcf10e 	bge	zero,r2,808670 <_dtoa_r+0x560>
  8092ac:	d8c00d17 	ldw	r3,52(sp)
  8092b0:	d9000517 	ldw	r4,20(sp)
  8092b4:	d8000615 	stw	zero,24(sp)
  8092b8:	18c00044 	addi	r3,r3,1
  8092bc:	d8c00d15 	stw	r3,52(sp)
  8092c0:	00800c44 	movi	r2,49
  8092c4:	27000044 	addi	fp,r4,1
  8092c8:	20800005 	stb	r2,0(r4)
  8092cc:	003e8906 	br	808cf4 <_dtoa_r+0xbe4>
  8092d0:	d8c00517 	ldw	r3,20(sp)
  8092d4:	003bc206 	br	8081e0 <_dtoa_r+0xd0>
  8092d8:	018020b4 	movhi	r6,130
  8092dc:	31a96604 	addi	r6,r6,-23144
  8092e0:	30c00917 	ldw	r3,36(r6)
  8092e4:	30800817 	ldw	r2,32(r6)
  8092e8:	d9001217 	ldw	r4,72(sp)
  8092ec:	d9401317 	ldw	r5,76(sp)
  8092f0:	180f883a 	mov	r7,r3
  8092f4:	100d883a 	mov	r6,r2
  8092f8:	0804b6c0 	call	804b6c <__divdf3>
  8092fc:	948003cc 	andi	r18,r18,15
  809300:	058000c4 	movi	r22,3
  809304:	1029883a 	mov	r20,r2
  809308:	182b883a 	mov	r21,r3
  80930c:	003c8906 	br	808534 <_dtoa_r+0x424>
  809310:	d9001017 	ldw	r4,64(sp)
  809314:	d9800917 	ldw	r6,36(sp)
  809318:	0025883a 	mov	r18,zero
  80931c:	1105c83a 	sub	r2,r2,r4
  809320:	2089883a 	add	r4,r4,r2
  809324:	308d883a 	add	r6,r6,r2
  809328:	d9001015 	stw	r4,64(sp)
  80932c:	d9800915 	stw	r6,36(sp)
  809330:	003e3206 	br	808bfc <_dtoa_r+0xaec>
  809334:	28800044 	addi	r2,r5,1
  809338:	27000044 	addi	fp,r4,1
  80933c:	20800005 	stb	r2,0(r4)
  809340:	003e6c06 	br	808cf4 <_dtoa_r+0xbe4>
  809344:	d8800f17 	ldw	r2,60(sp)
  809348:	00bce016 	blt	zero,r2,8086cc <_dtoa_r+0x5bc>
  80934c:	d9800f17 	ldw	r6,60(sp)
  809350:	303cc51e 	bne	r6,zero,808668 <_dtoa_r+0x558>
  809354:	0005883a 	mov	r2,zero
  809358:	00d00534 	movhi	r3,16404
  80935c:	980b883a 	mov	r5,r19
  809360:	180f883a 	mov	r7,r3
  809364:	9009883a 	mov	r4,r18
  809368:	100d883a 	mov	r6,r2
  80936c:	08047a80 	call	8047a8 <__muldf3>
  809370:	180b883a 	mov	r5,r3
  809374:	a80f883a 	mov	r7,r21
  809378:	1009883a 	mov	r4,r2
  80937c:	a00d883a 	mov	r6,r20
  809380:	080dd840 	call	80dd84 <__gedf2>
  809384:	103cb80e 	bge	r2,zero,808668 <_dtoa_r+0x558>
  809388:	0027883a 	mov	r19,zero
  80938c:	0025883a 	mov	r18,zero
  809390:	003fc606 	br	8092ac <_dtoa_r+0x119c>
  809394:	99400117 	ldw	r5,4(r19)
  809398:	d9001617 	ldw	r4,88(sp)
  80939c:	080b8580 	call	80b858 <_Balloc>
  8093a0:	99800417 	ldw	r6,16(r19)
  8093a4:	11000304 	addi	r4,r2,12
  8093a8:	99400304 	addi	r5,r19,12
  8093ac:	318d883a 	add	r6,r6,r6
  8093b0:	318d883a 	add	r6,r6,r6
  8093b4:	31800204 	addi	r6,r6,8
  8093b8:	1023883a 	mov	r17,r2
  8093bc:	080b0c00 	call	80b0c0 <memcpy>
  8093c0:	d9001617 	ldw	r4,88(sp)
  8093c4:	880b883a 	mov	r5,r17
  8093c8:	01800044 	movi	r6,1
  8093cc:	080bc1c0 	call	80bc1c <__lshift>
  8093d0:	100b883a 	mov	r5,r2
  8093d4:	003d9c06 	br	808a48 <_dtoa_r+0x938>
  8093d8:	00800e44 	movi	r2,57
  8093dc:	b8807026 	beq	r23,r2,8095a0 <_dtoa_r+0x1490>
  8093e0:	b8800044 	addi	r2,r23,1
  8093e4:	b7000044 	addi	fp,r22,1
  8093e8:	b0800005 	stb	r2,0(r22)
  8093ec:	003e4106 	br	808cf4 <_dtoa_r+0xbe4>
  8093f0:	d8800317 	ldw	r2,12(sp)
  8093f4:	018020b4 	movhi	r6,130
  8093f8:	31a93404 	addi	r6,r6,-23344
  8093fc:	b009883a 	mov	r4,r22
  809400:	100e90fa 	slli	r7,r2,3
  809404:	b80b883a 	mov	r5,r23
  809408:	398f883a 	add	r7,r7,r6
  80940c:	38bffe17 	ldw	r2,-8(r7)
  809410:	d9800517 	ldw	r6,20(sp)
  809414:	38ffff17 	ldw	r3,-4(r7)
  809418:	37000044 	addi	fp,r6,1
  80941c:	180f883a 	mov	r7,r3
  809420:	100d883a 	mov	r6,r2
  809424:	08047a80 	call	8047a8 <__muldf3>
  809428:	a80b883a 	mov	r5,r21
  80942c:	a009883a 	mov	r4,r20
  809430:	182f883a 	mov	r23,r3
  809434:	102d883a 	mov	r22,r2
  809438:	080de0c0 	call	80de0c <__fixdfsi>
  80943c:	1009883a 	mov	r4,r2
  809440:	1027883a 	mov	r19,r2
  809444:	080506c0 	call	80506c <__floatsidf>
  809448:	a80b883a 	mov	r5,r21
  80944c:	a009883a 	mov	r4,r20
  809450:	180f883a 	mov	r7,r3
  809454:	100d883a 	mov	r6,r2
  809458:	08046b40 	call	8046b4 <__subdf3>
  80945c:	180b883a 	mov	r5,r3
  809460:	d8c00517 	ldw	r3,20(sp)
  809464:	9cc00c04 	addi	r19,r19,48
  809468:	1009883a 	mov	r4,r2
  80946c:	1cc00005 	stb	r19,0(r3)
  809470:	2021883a 	mov	r16,r4
  809474:	d9000317 	ldw	r4,12(sp)
  809478:	00800044 	movi	r2,1
  80947c:	2823883a 	mov	r17,r5
  809480:	20802226 	beq	r4,r2,80950c <_dtoa_r+0x13fc>
  809484:	1029883a 	mov	r20,r2
  809488:	0005883a 	mov	r2,zero
  80948c:	00d00934 	movhi	r3,16420
  809490:	180f883a 	mov	r7,r3
  809494:	100d883a 	mov	r6,r2
  809498:	880b883a 	mov	r5,r17
  80949c:	8009883a 	mov	r4,r16
  8094a0:	08047a80 	call	8047a8 <__muldf3>
  8094a4:	180b883a 	mov	r5,r3
  8094a8:	1009883a 	mov	r4,r2
  8094ac:	1823883a 	mov	r17,r3
  8094b0:	1021883a 	mov	r16,r2
  8094b4:	080de0c0 	call	80de0c <__fixdfsi>
  8094b8:	1009883a 	mov	r4,r2
  8094bc:	102b883a 	mov	r21,r2
  8094c0:	080506c0 	call	80506c <__floatsidf>
  8094c4:	880b883a 	mov	r5,r17
  8094c8:	8009883a 	mov	r4,r16
  8094cc:	180f883a 	mov	r7,r3
  8094d0:	100d883a 	mov	r6,r2
  8094d4:	08046b40 	call	8046b4 <__subdf3>
  8094d8:	180b883a 	mov	r5,r3
  8094dc:	d8c00517 	ldw	r3,20(sp)
  8094e0:	1009883a 	mov	r4,r2
  8094e4:	ad400c04 	addi	r21,r21,48
  8094e8:	1d05883a 	add	r2,r3,r20
  8094ec:	15400005 	stb	r21,0(r2)
  8094f0:	2021883a 	mov	r16,r4
  8094f4:	d9000317 	ldw	r4,12(sp)
  8094f8:	a5000044 	addi	r20,r20,1
  8094fc:	2823883a 	mov	r17,r5
  809500:	a13fe11e 	bne	r20,r4,809488 <_dtoa_r+0x1378>
  809504:	e505883a 	add	r2,fp,r20
  809508:	173fffc4 	addi	fp,r2,-1
  80950c:	0025883a 	mov	r18,zero
  809510:	04cff834 	movhi	r19,16352
  809514:	b009883a 	mov	r4,r22
  809518:	b80b883a 	mov	r5,r23
  80951c:	900d883a 	mov	r6,r18
  809520:	980f883a 	mov	r7,r19
  809524:	08047340 	call	804734 <__adddf3>
  809528:	180b883a 	mov	r5,r3
  80952c:	1009883a 	mov	r4,r2
  809530:	800d883a 	mov	r6,r16
  809534:	880f883a 	mov	r7,r17
  809538:	0804f5c0 	call	804f5c <__ltdf2>
  80953c:	103cab16 	blt	r2,zero,8087ec <_dtoa_r+0x6dc>
  809540:	0009883a 	mov	r4,zero
  809544:	980b883a 	mov	r5,r19
  809548:	b80f883a 	mov	r7,r23
  80954c:	b00d883a 	mov	r6,r22
  809550:	08046b40 	call	8046b4 <__subdf3>
  809554:	180b883a 	mov	r5,r3
  809558:	880f883a 	mov	r7,r17
  80955c:	1009883a 	mov	r4,r2
  809560:	800d883a 	mov	r6,r16
  809564:	0804ed40 	call	804ed4 <__gtdf2>
  809568:	00bc470e 	bge	zero,r2,808688 <_dtoa_r+0x578>
  80956c:	00c00c04 	movi	r3,48
  809570:	e73fffc4 	addi	fp,fp,-1
  809574:	e0800007 	ldb	r2,0(fp)
  809578:	10fffd26 	beq	r2,r3,809570 <_dtoa_r+0x1460>
  80957c:	d9800417 	ldw	r6,16(sp)
  809580:	e7000044 	addi	fp,fp,1
  809584:	d9800d15 	stw	r6,52(sp)
  809588:	003cab06 	br	808838 <_dtoa_r+0x728>
  80958c:	d8c00f17 	ldw	r3,60(sp)
  809590:	d9001117 	ldw	r4,68(sp)
  809594:	20e1c83a 	sub	r16,r4,r3
  809598:	0007883a 	mov	r3,zero
  80959c:	003d9b06 	br	808c0c <_dtoa_r+0xafc>
  8095a0:	00800e44 	movi	r2,57
  8095a4:	b0800005 	stb	r2,0(r22)
  8095a8:	b5800044 	addi	r22,r22,1
  8095ac:	003dc106 	br	808cb4 <_dtoa_r+0xba4>
  8095b0:	05800084 	movi	r22,2
  8095b4:	003bf706 	br	808594 <_dtoa_r+0x484>
  8095b8:	d9000f17 	ldw	r4,60(sp)
  8095bc:	013c000e 	bge	zero,r4,8085c0 <_dtoa_r+0x4b0>
  8095c0:	d9800e17 	ldw	r6,56(sp)
  8095c4:	01bc300e 	bge	zero,r6,808688 <_dtoa_r+0x578>
  8095c8:	0005883a 	mov	r2,zero
  8095cc:	00d00934 	movhi	r3,16420
  8095d0:	a80b883a 	mov	r5,r21
  8095d4:	180f883a 	mov	r7,r3
  8095d8:	a009883a 	mov	r4,r20
  8095dc:	100d883a 	mov	r6,r2
  8095e0:	08047a80 	call	8047a8 <__muldf3>
  8095e4:	b1000044 	addi	r4,r22,1
  8095e8:	1021883a 	mov	r16,r2
  8095ec:	1823883a 	mov	r17,r3
  8095f0:	080506c0 	call	80506c <__floatsidf>
  8095f4:	880b883a 	mov	r5,r17
  8095f8:	8009883a 	mov	r4,r16
  8095fc:	180f883a 	mov	r7,r3
  809600:	100d883a 	mov	r6,r2
  809604:	08047a80 	call	8047a8 <__muldf3>
  809608:	0011883a 	mov	r8,zero
  80960c:	02500734 	movhi	r9,16412
  809610:	180b883a 	mov	r5,r3
  809614:	480f883a 	mov	r7,r9
  809618:	1009883a 	mov	r4,r2
  80961c:	400d883a 	mov	r6,r8
  809620:	08047340 	call	804734 <__adddf3>
  809624:	102d883a 	mov	r22,r2
  809628:	00bf3034 	movhi	r2,64704
  80962c:	10ef883a 	add	r23,r2,r3
  809630:	d8800d17 	ldw	r2,52(sp)
  809634:	d8c00e17 	ldw	r3,56(sp)
  809638:	8029883a 	mov	r20,r16
  80963c:	10bfffc4 	addi	r2,r2,-1
  809640:	882b883a 	mov	r21,r17
  809644:	d8800415 	stw	r2,16(sp)
  809648:	d8c00315 	stw	r3,12(sp)
  80964c:	003e8306 	br	80905c <_dtoa_r+0xf4c>
  809650:	d8800117 	ldw	r2,4(sp)
  809654:	dc001117 	ldw	r16,68(sp)
  809658:	dc801017 	ldw	r18,64(sp)
  80965c:	00c00d84 	movi	r3,54
  809660:	1887c83a 	sub	r3,r3,r2
  809664:	003d6906 	br	808c0c <_dtoa_r+0xafc>
  809668:	01800044 	movi	r6,1
  80966c:	3021883a 	mov	r16,r6
  809670:	d9800f15 	stw	r6,60(sp)
  809674:	d9802615 	stw	r6,152(sp)
  809678:	d9800e15 	stw	r6,56(sp)
  80967c:	003b9306 	br	8084cc <_dtoa_r+0x3bc>
  809680:	b021883a 	mov	r16,r22
  809684:	dd800f15 	stw	r22,60(sp)
  809688:	003b9006 	br	8084cc <_dtoa_r+0x3bc>
  80968c:	103e221e 	bne	r2,zero,808f18 <_dtoa_r+0xe08>
  809690:	b880004c 	andi	r2,r23,1
  809694:	1005003a 	cmpeq	r2,r2,zero
  809698:	103e1f1e 	bne	r2,zero,808f18 <_dtoa_r+0xe08>
  80969c:	003e1b06 	br	808f0c <_dtoa_r+0xdfc>
  8096a0:	d9001617 	ldw	r4,88(sp)
  8096a4:	980b883a 	mov	r5,r19
  8096a8:	01800284 	movi	r6,10
  8096ac:	000f883a 	mov	r7,zero
  8096b0:	080bff80 	call	80bff8 <__multadd>
  8096b4:	d8c00e17 	ldw	r3,56(sp)
  8096b8:	1027883a 	mov	r19,r2
  8096bc:	d8c00f15 	stw	r3,60(sp)
  8096c0:	003cd306 	br	808a10 <_dtoa_r+0x900>

008096c4 <_fflush_r>:
  8096c4:	defffb04 	addi	sp,sp,-20
  8096c8:	dcc00315 	stw	r19,12(sp)
  8096cc:	dc800215 	stw	r18,8(sp)
  8096d0:	dfc00415 	stw	ra,16(sp)
  8096d4:	dc400115 	stw	r17,4(sp)
  8096d8:	dc000015 	stw	r16,0(sp)
  8096dc:	2027883a 	mov	r19,r4
  8096e0:	2825883a 	mov	r18,r5
  8096e4:	20000226 	beq	r4,zero,8096f0 <_fflush_r+0x2c>
  8096e8:	20800e17 	ldw	r2,56(r4)
  8096ec:	10005626 	beq	r2,zero,809848 <_fflush_r+0x184>
  8096f0:	9100030b 	ldhu	r4,12(r18)
  8096f4:	20ffffcc 	andi	r3,r4,65535
  8096f8:	18e0001c 	xori	r3,r3,32768
  8096fc:	18e00004 	addi	r3,r3,-32768
  809700:	1880020c 	andi	r2,r3,8
  809704:	1000261e 	bne	r2,zero,8097a0 <_fflush_r+0xdc>
  809708:	90c00117 	ldw	r3,4(r18)
  80970c:	20820014 	ori	r2,r4,2048
  809710:	9080030d 	sth	r2,12(r18)
  809714:	1009883a 	mov	r4,r2
  809718:	00c0400e 	bge	zero,r3,80981c <_fflush_r+0x158>
  80971c:	92000a17 	ldw	r8,40(r18)
  809720:	40004026 	beq	r8,zero,809824 <_fflush_r+0x160>
  809724:	2084000c 	andi	r2,r4,4096
  809728:	10005326 	beq	r2,zero,809878 <_fflush_r+0x1b4>
  80972c:	94001417 	ldw	r16,80(r18)
  809730:	9080030b 	ldhu	r2,12(r18)
  809734:	1080010c 	andi	r2,r2,4
  809738:	1000481e 	bne	r2,zero,80985c <_fflush_r+0x198>
  80973c:	91400717 	ldw	r5,28(r18)
  809740:	9809883a 	mov	r4,r19
  809744:	800d883a 	mov	r6,r16
  809748:	000f883a 	mov	r7,zero
  80974c:	403ee83a 	callr	r8
  809750:	8080261e 	bne	r16,r2,8097ec <_fflush_r+0x128>
  809754:	9080030b 	ldhu	r2,12(r18)
  809758:	91000417 	ldw	r4,16(r18)
  80975c:	90000115 	stw	zero,4(r18)
  809760:	10bdffcc 	andi	r2,r2,63487
  809764:	10ffffcc 	andi	r3,r2,65535
  809768:	18c4000c 	andi	r3,r3,4096
  80976c:	9080030d 	sth	r2,12(r18)
  809770:	91000015 	stw	r4,0(r18)
  809774:	18002b26 	beq	r3,zero,809824 <_fflush_r+0x160>
  809778:	0007883a 	mov	r3,zero
  80977c:	1805883a 	mov	r2,r3
  809780:	94001415 	stw	r16,80(r18)
  809784:	dfc00417 	ldw	ra,16(sp)
  809788:	dcc00317 	ldw	r19,12(sp)
  80978c:	dc800217 	ldw	r18,8(sp)
  809790:	dc400117 	ldw	r17,4(sp)
  809794:	dc000017 	ldw	r16,0(sp)
  809798:	dec00504 	addi	sp,sp,20
  80979c:	f800283a 	ret
  8097a0:	94400417 	ldw	r17,16(r18)
  8097a4:	88001f26 	beq	r17,zero,809824 <_fflush_r+0x160>
  8097a8:	90800017 	ldw	r2,0(r18)
  8097ac:	18c000cc 	andi	r3,r3,3
  8097b0:	94400015 	stw	r17,0(r18)
  8097b4:	1461c83a 	sub	r16,r2,r17
  8097b8:	18002526 	beq	r3,zero,809850 <_fflush_r+0x18c>
  8097bc:	0005883a 	mov	r2,zero
  8097c0:	90800215 	stw	r2,8(r18)
  8097c4:	0400170e 	bge	zero,r16,809824 <_fflush_r+0x160>
  8097c8:	90c00917 	ldw	r3,36(r18)
  8097cc:	91400717 	ldw	r5,28(r18)
  8097d0:	880d883a 	mov	r6,r17
  8097d4:	800f883a 	mov	r7,r16
  8097d8:	9809883a 	mov	r4,r19
  8097dc:	183ee83a 	callr	r3
  8097e0:	88a3883a 	add	r17,r17,r2
  8097e4:	80a1c83a 	sub	r16,r16,r2
  8097e8:	00bff616 	blt	zero,r2,8097c4 <_fflush_r+0x100>
  8097ec:	9080030b 	ldhu	r2,12(r18)
  8097f0:	00ffffc4 	movi	r3,-1
  8097f4:	10801014 	ori	r2,r2,64
  8097f8:	9080030d 	sth	r2,12(r18)
  8097fc:	1805883a 	mov	r2,r3
  809800:	dfc00417 	ldw	ra,16(sp)
  809804:	dcc00317 	ldw	r19,12(sp)
  809808:	dc800217 	ldw	r18,8(sp)
  80980c:	dc400117 	ldw	r17,4(sp)
  809810:	dc000017 	ldw	r16,0(sp)
  809814:	dec00504 	addi	sp,sp,20
  809818:	f800283a 	ret
  80981c:	90800f17 	ldw	r2,60(r18)
  809820:	00bfbe16 	blt	zero,r2,80971c <_fflush_r+0x58>
  809824:	0007883a 	mov	r3,zero
  809828:	1805883a 	mov	r2,r3
  80982c:	dfc00417 	ldw	ra,16(sp)
  809830:	dcc00317 	ldw	r19,12(sp)
  809834:	dc800217 	ldw	r18,8(sp)
  809838:	dc400117 	ldw	r17,4(sp)
  80983c:	dc000017 	ldw	r16,0(sp)
  809840:	dec00504 	addi	sp,sp,20
  809844:	f800283a 	ret
  809848:	080995c0 	call	80995c <__sinit>
  80984c:	003fa806 	br	8096f0 <_fflush_r+0x2c>
  809850:	90800517 	ldw	r2,20(r18)
  809854:	90800215 	stw	r2,8(r18)
  809858:	003fda06 	br	8097c4 <_fflush_r+0x100>
  80985c:	90800117 	ldw	r2,4(r18)
  809860:	90c00c17 	ldw	r3,48(r18)
  809864:	80a1c83a 	sub	r16,r16,r2
  809868:	183fb426 	beq	r3,zero,80973c <_fflush_r+0x78>
  80986c:	90800f17 	ldw	r2,60(r18)
  809870:	80a1c83a 	sub	r16,r16,r2
  809874:	003fb106 	br	80973c <_fflush_r+0x78>
  809878:	91400717 	ldw	r5,28(r18)
  80987c:	9809883a 	mov	r4,r19
  809880:	000d883a 	mov	r6,zero
  809884:	01c00044 	movi	r7,1
  809888:	403ee83a 	callr	r8
  80988c:	1021883a 	mov	r16,r2
  809890:	00bfffc4 	movi	r2,-1
  809894:	80800226 	beq	r16,r2,8098a0 <_fflush_r+0x1dc>
  809898:	92000a17 	ldw	r8,40(r18)
  80989c:	003fa406 	br	809730 <_fflush_r+0x6c>
  8098a0:	98c00017 	ldw	r3,0(r19)
  8098a4:	00800744 	movi	r2,29
  8098a8:	18bfde26 	beq	r3,r2,809824 <_fflush_r+0x160>
  8098ac:	9080030b 	ldhu	r2,12(r18)
  8098b0:	8007883a 	mov	r3,r16
  8098b4:	10801014 	ori	r2,r2,64
  8098b8:	9080030d 	sth	r2,12(r18)
  8098bc:	003fcf06 	br	8097fc <_fflush_r+0x138>

008098c0 <fflush>:
  8098c0:	01402074 	movhi	r5,129
  8098c4:	2965b104 	addi	r5,r5,-26940
  8098c8:	2007883a 	mov	r3,r4
  8098cc:	20000526 	beq	r4,zero,8098e4 <fflush+0x24>
  8098d0:	008020b4 	movhi	r2,130
  8098d4:	10b09304 	addi	r2,r2,-15796
  8098d8:	11000017 	ldw	r4,0(r2)
  8098dc:	180b883a 	mov	r5,r3
  8098e0:	08096c41 	jmpi	8096c4 <_fflush_r>
  8098e4:	008020b4 	movhi	r2,130
  8098e8:	10b09404 	addi	r2,r2,-15792
  8098ec:	11000017 	ldw	r4,0(r2)
  8098f0:	080a4c41 	jmpi	80a4c4 <_fwalk_reent>

008098f4 <std>:
  8098f4:	00802074 	movhi	r2,129
  8098f8:	10b28204 	addi	r2,r2,-13816
  8098fc:	20800b15 	stw	r2,44(r4)
  809900:	00802074 	movhi	r2,129
  809904:	10b2bd04 	addi	r2,r2,-13580
  809908:	20800815 	stw	r2,32(r4)
  80990c:	00c02074 	movhi	r3,129
  809910:	18f29e04 	addi	r3,r3,-13704
  809914:	00802074 	movhi	r2,129
  809918:	10b28404 	addi	r2,r2,-13808
  80991c:	2140030d 	sth	r5,12(r4)
  809920:	2180038d 	sth	r6,14(r4)
  809924:	20c00915 	stw	r3,36(r4)
  809928:	20800a15 	stw	r2,40(r4)
  80992c:	20000015 	stw	zero,0(r4)
  809930:	20000115 	stw	zero,4(r4)
  809934:	20000215 	stw	zero,8(r4)
  809938:	20000415 	stw	zero,16(r4)
  80993c:	20000515 	stw	zero,20(r4)
  809940:	20000615 	stw	zero,24(r4)
  809944:	21000715 	stw	r4,28(r4)
  809948:	f800283a 	ret

0080994c <__sfp_lock_acquire>:
  80994c:	f800283a 	ret

00809950 <__sfp_lock_release>:
  809950:	f800283a 	ret

00809954 <__sinit_lock_acquire>:
  809954:	f800283a 	ret

00809958 <__sinit_lock_release>:
  809958:	f800283a 	ret

0080995c <__sinit>:
  80995c:	20800e17 	ldw	r2,56(r4)
  809960:	defffd04 	addi	sp,sp,-12
  809964:	dc400115 	stw	r17,4(sp)
  809968:	dc000015 	stw	r16,0(sp)
  80996c:	dfc00215 	stw	ra,8(sp)
  809970:	04400044 	movi	r17,1
  809974:	01400104 	movi	r5,4
  809978:	000d883a 	mov	r6,zero
  80997c:	2021883a 	mov	r16,r4
  809980:	2200bb04 	addi	r8,r4,748
  809984:	200f883a 	mov	r7,r4
  809988:	10000526 	beq	r2,zero,8099a0 <__sinit+0x44>
  80998c:	dfc00217 	ldw	ra,8(sp)
  809990:	dc400117 	ldw	r17,4(sp)
  809994:	dc000017 	ldw	r16,0(sp)
  809998:	dec00304 	addi	sp,sp,12
  80999c:	f800283a 	ret
  8099a0:	21000117 	ldw	r4,4(r4)
  8099a4:	00802074 	movhi	r2,129
  8099a8:	10a69004 	addi	r2,r2,-26048
  8099ac:	00c000c4 	movi	r3,3
  8099b0:	80800f15 	stw	r2,60(r16)
  8099b4:	80c0b915 	stw	r3,740(r16)
  8099b8:	8200ba15 	stw	r8,744(r16)
  8099bc:	84400e15 	stw	r17,56(r16)
  8099c0:	8000b815 	stw	zero,736(r16)
  8099c4:	08098f40 	call	8098f4 <std>
  8099c8:	81000217 	ldw	r4,8(r16)
  8099cc:	880d883a 	mov	r6,r17
  8099d0:	800f883a 	mov	r7,r16
  8099d4:	01400284 	movi	r5,10
  8099d8:	08098f40 	call	8098f4 <std>
  8099dc:	81000317 	ldw	r4,12(r16)
  8099e0:	800f883a 	mov	r7,r16
  8099e4:	01400484 	movi	r5,18
  8099e8:	01800084 	movi	r6,2
  8099ec:	dfc00217 	ldw	ra,8(sp)
  8099f0:	dc400117 	ldw	r17,4(sp)
  8099f4:	dc000017 	ldw	r16,0(sp)
  8099f8:	dec00304 	addi	sp,sp,12
  8099fc:	08098f41 	jmpi	8098f4 <std>

00809a00 <__fp_lock>:
  809a00:	0005883a 	mov	r2,zero
  809a04:	f800283a 	ret

00809a08 <__fp_unlock>:
  809a08:	0005883a 	mov	r2,zero
  809a0c:	f800283a 	ret

00809a10 <__fp_unlock_all>:
  809a10:	008020b4 	movhi	r2,130
  809a14:	10b09304 	addi	r2,r2,-15796
  809a18:	11000017 	ldw	r4,0(r2)
  809a1c:	01402074 	movhi	r5,129
  809a20:	29668204 	addi	r5,r5,-26104
  809a24:	080a58c1 	jmpi	80a58c <_fwalk>

00809a28 <__fp_lock_all>:
  809a28:	008020b4 	movhi	r2,130
  809a2c:	10b09304 	addi	r2,r2,-15796
  809a30:	11000017 	ldw	r4,0(r2)
  809a34:	01402074 	movhi	r5,129
  809a38:	29668004 	addi	r5,r5,-26112
  809a3c:	080a58c1 	jmpi	80a58c <_fwalk>

00809a40 <_cleanup_r>:
  809a40:	01402074 	movhi	r5,129
  809a44:	2973b404 	addi	r5,r5,-12592
  809a48:	080a58c1 	jmpi	80a58c <_fwalk>

00809a4c <_cleanup>:
  809a4c:	008020b4 	movhi	r2,130
  809a50:	10b09404 	addi	r2,r2,-15792
  809a54:	11000017 	ldw	r4,0(r2)
  809a58:	0809a401 	jmpi	809a40 <_cleanup_r>

00809a5c <__sfmoreglue>:
  809a5c:	defffc04 	addi	sp,sp,-16
  809a60:	dc000015 	stw	r16,0(sp)
  809a64:	2821883a 	mov	r16,r5
  809a68:	dc400115 	stw	r17,4(sp)
  809a6c:	01401704 	movi	r5,92
  809a70:	2023883a 	mov	r17,r4
  809a74:	8009883a 	mov	r4,r16
  809a78:	dfc00315 	stw	ra,12(sp)
  809a7c:	dcc00215 	stw	r19,8(sp)
  809a80:	080535c0 	call	80535c <__mulsi3>
  809a84:	11400304 	addi	r5,r2,12
  809a88:	8809883a 	mov	r4,r17
  809a8c:	1027883a 	mov	r19,r2
  809a90:	080a89c0 	call	80a89c <_malloc_r>
  809a94:	10c00304 	addi	r3,r2,12
  809a98:	1023883a 	mov	r17,r2
  809a9c:	1809883a 	mov	r4,r3
  809aa0:	980d883a 	mov	r6,r19
  809aa4:	000b883a 	mov	r5,zero
  809aa8:	10000b26 	beq	r2,zero,809ad8 <__sfmoreglue+0x7c>
  809aac:	14000115 	stw	r16,4(r2)
  809ab0:	10c00215 	stw	r3,8(r2)
  809ab4:	10000015 	stw	zero,0(r2)
  809ab8:	080b2400 	call	80b240 <memset>
  809abc:	8805883a 	mov	r2,r17
  809ac0:	dfc00317 	ldw	ra,12(sp)
  809ac4:	dcc00217 	ldw	r19,8(sp)
  809ac8:	dc400117 	ldw	r17,4(sp)
  809acc:	dc000017 	ldw	r16,0(sp)
  809ad0:	dec00404 	addi	sp,sp,16
  809ad4:	f800283a 	ret
  809ad8:	0023883a 	mov	r17,zero
  809adc:	8805883a 	mov	r2,r17
  809ae0:	dfc00317 	ldw	ra,12(sp)
  809ae4:	dcc00217 	ldw	r19,8(sp)
  809ae8:	dc400117 	ldw	r17,4(sp)
  809aec:	dc000017 	ldw	r16,0(sp)
  809af0:	dec00404 	addi	sp,sp,16
  809af4:	f800283a 	ret

00809af8 <__sfp>:
  809af8:	defffd04 	addi	sp,sp,-12
  809afc:	008020b4 	movhi	r2,130
  809b00:	10b09404 	addi	r2,r2,-15792
  809b04:	dc000015 	stw	r16,0(sp)
  809b08:	14000017 	ldw	r16,0(r2)
  809b0c:	dc400115 	stw	r17,4(sp)
  809b10:	dfc00215 	stw	ra,8(sp)
  809b14:	80800e17 	ldw	r2,56(r16)
  809b18:	2023883a 	mov	r17,r4
  809b1c:	10002626 	beq	r2,zero,809bb8 <__sfp+0xc0>
  809b20:	8400b804 	addi	r16,r16,736
  809b24:	80800117 	ldw	r2,4(r16)
  809b28:	81000217 	ldw	r4,8(r16)
  809b2c:	10ffffc4 	addi	r3,r2,-1
  809b30:	18000916 	blt	r3,zero,809b58 <__sfp+0x60>
  809b34:	2080030f 	ldh	r2,12(r4)
  809b38:	10000b26 	beq	r2,zero,809b68 <__sfp+0x70>
  809b3c:	017fffc4 	movi	r5,-1
  809b40:	00000206 	br	809b4c <__sfp+0x54>
  809b44:	2080030f 	ldh	r2,12(r4)
  809b48:	10000726 	beq	r2,zero,809b68 <__sfp+0x70>
  809b4c:	18ffffc4 	addi	r3,r3,-1
  809b50:	21001704 	addi	r4,r4,92
  809b54:	197ffb1e 	bne	r3,r5,809b44 <__sfp+0x4c>
  809b58:	80800017 	ldw	r2,0(r16)
  809b5c:	10001926 	beq	r2,zero,809bc4 <__sfp+0xcc>
  809b60:	1021883a 	mov	r16,r2
  809b64:	003fef06 	br	809b24 <__sfp+0x2c>
  809b68:	00bfffc4 	movi	r2,-1
  809b6c:	00c00044 	movi	r3,1
  809b70:	2080038d 	sth	r2,14(r4)
  809b74:	20c0030d 	sth	r3,12(r4)
  809b78:	20000015 	stw	zero,0(r4)
  809b7c:	20000215 	stw	zero,8(r4)
  809b80:	20000115 	stw	zero,4(r4)
  809b84:	20000415 	stw	zero,16(r4)
  809b88:	20000515 	stw	zero,20(r4)
  809b8c:	20000615 	stw	zero,24(r4)
  809b90:	20000c15 	stw	zero,48(r4)
  809b94:	20000d15 	stw	zero,52(r4)
  809b98:	20001115 	stw	zero,68(r4)
  809b9c:	20001215 	stw	zero,72(r4)
  809ba0:	2005883a 	mov	r2,r4
  809ba4:	dfc00217 	ldw	ra,8(sp)
  809ba8:	dc400117 	ldw	r17,4(sp)
  809bac:	dc000017 	ldw	r16,0(sp)
  809bb0:	dec00304 	addi	sp,sp,12
  809bb4:	f800283a 	ret
  809bb8:	8009883a 	mov	r4,r16
  809bbc:	080995c0 	call	80995c <__sinit>
  809bc0:	003fd706 	br	809b20 <__sfp+0x28>
  809bc4:	8809883a 	mov	r4,r17
  809bc8:	01400104 	movi	r5,4
  809bcc:	0809a5c0 	call	809a5c <__sfmoreglue>
  809bd0:	80800015 	stw	r2,0(r16)
  809bd4:	103fe21e 	bne	r2,zero,809b60 <__sfp+0x68>
  809bd8:	00800304 	movi	r2,12
  809bdc:	0009883a 	mov	r4,zero
  809be0:	88800015 	stw	r2,0(r17)
  809be4:	003fee06 	br	809ba0 <__sfp+0xa8>

00809be8 <_malloc_trim_r>:
  809be8:	defffb04 	addi	sp,sp,-20
  809bec:	dcc00315 	stw	r19,12(sp)
  809bf0:	04c020b4 	movhi	r19,130
  809bf4:	9ceae804 	addi	r19,r19,-21600
  809bf8:	dc800215 	stw	r18,8(sp)
  809bfc:	dc400115 	stw	r17,4(sp)
  809c00:	dc000015 	stw	r16,0(sp)
  809c04:	2823883a 	mov	r17,r5
  809c08:	2025883a 	mov	r18,r4
  809c0c:	dfc00415 	stw	ra,16(sp)
  809c10:	080edcc0 	call	80edcc <__malloc_lock>
  809c14:	98800217 	ldw	r2,8(r19)
  809c18:	9009883a 	mov	r4,r18
  809c1c:	000b883a 	mov	r5,zero
  809c20:	10c00117 	ldw	r3,4(r2)
  809c24:	00bfff04 	movi	r2,-4
  809c28:	18a0703a 	and	r16,r3,r2
  809c2c:	8463c83a 	sub	r17,r16,r17
  809c30:	8c43fbc4 	addi	r17,r17,4079
  809c34:	8822d33a 	srli	r17,r17,12
  809c38:	0083ffc4 	movi	r2,4095
  809c3c:	8c7fffc4 	addi	r17,r17,-1
  809c40:	8822933a 	slli	r17,r17,12
  809c44:	1440060e 	bge	r2,r17,809c60 <_malloc_trim_r+0x78>
  809c48:	080c9980 	call	80c998 <_sbrk_r>
  809c4c:	98c00217 	ldw	r3,8(r19)
  809c50:	9009883a 	mov	r4,r18
  809c54:	044bc83a 	sub	r5,zero,r17
  809c58:	80c7883a 	add	r3,r16,r3
  809c5c:	10c00926 	beq	r2,r3,809c84 <_malloc_trim_r+0x9c>
  809c60:	080eed40 	call	80eed4 <__malloc_unlock>
  809c64:	0005883a 	mov	r2,zero
  809c68:	dfc00417 	ldw	ra,16(sp)
  809c6c:	dcc00317 	ldw	r19,12(sp)
  809c70:	dc800217 	ldw	r18,8(sp)
  809c74:	dc400117 	ldw	r17,4(sp)
  809c78:	dc000017 	ldw	r16,0(sp)
  809c7c:	dec00504 	addi	sp,sp,20
  809c80:	f800283a 	ret
  809c84:	9009883a 	mov	r4,r18
  809c88:	080c9980 	call	80c998 <_sbrk_r>
  809c8c:	844dc83a 	sub	r6,r16,r17
  809c90:	00ffffc4 	movi	r3,-1
  809c94:	9009883a 	mov	r4,r18
  809c98:	000b883a 	mov	r5,zero
  809c9c:	01c020b4 	movhi	r7,130
  809ca0:	39f7c504 	addi	r7,r7,-8428
  809ca4:	31800054 	ori	r6,r6,1
  809ca8:	10c00926 	beq	r2,r3,809cd0 <_malloc_trim_r+0xe8>
  809cac:	38800017 	ldw	r2,0(r7)
  809cb0:	98c00217 	ldw	r3,8(r19)
  809cb4:	9009883a 	mov	r4,r18
  809cb8:	1445c83a 	sub	r2,r2,r17
  809cbc:	38800015 	stw	r2,0(r7)
  809cc0:	19800115 	stw	r6,4(r3)
  809cc4:	080eed40 	call	80eed4 <__malloc_unlock>
  809cc8:	00800044 	movi	r2,1
  809ccc:	003fe606 	br	809c68 <_malloc_trim_r+0x80>
  809cd0:	080c9980 	call	80c998 <_sbrk_r>
  809cd4:	99800217 	ldw	r6,8(r19)
  809cd8:	100f883a 	mov	r7,r2
  809cdc:	9009883a 	mov	r4,r18
  809ce0:	1187c83a 	sub	r3,r2,r6
  809ce4:	008003c4 	movi	r2,15
  809ce8:	19400054 	ori	r5,r3,1
  809cec:	10ffdc0e 	bge	r2,r3,809c60 <_malloc_trim_r+0x78>
  809cf0:	008020b4 	movhi	r2,130
  809cf4:	10b09804 	addi	r2,r2,-15776
  809cf8:	10c00017 	ldw	r3,0(r2)
  809cfc:	008020b4 	movhi	r2,130
  809d00:	10b7c504 	addi	r2,r2,-8428
  809d04:	31400115 	stw	r5,4(r6)
  809d08:	38c7c83a 	sub	r3,r7,r3
  809d0c:	10c00015 	stw	r3,0(r2)
  809d10:	003fd306 	br	809c60 <_malloc_trim_r+0x78>

00809d14 <_free_r>:
  809d14:	defffd04 	addi	sp,sp,-12
  809d18:	dc400115 	stw	r17,4(sp)
  809d1c:	dc000015 	stw	r16,0(sp)
  809d20:	dfc00215 	stw	ra,8(sp)
  809d24:	2821883a 	mov	r16,r5
  809d28:	2023883a 	mov	r17,r4
  809d2c:	28005a26 	beq	r5,zero,809e98 <_free_r+0x184>
  809d30:	080edcc0 	call	80edcc <__malloc_lock>
  809d34:	823ffe04 	addi	r8,r16,-8
  809d38:	41400117 	ldw	r5,4(r8)
  809d3c:	00bfff84 	movi	r2,-2
  809d40:	028020b4 	movhi	r10,130
  809d44:	52aae804 	addi	r10,r10,-21600
  809d48:	288e703a 	and	r7,r5,r2
  809d4c:	41cd883a 	add	r6,r8,r7
  809d50:	30c00117 	ldw	r3,4(r6)
  809d54:	51000217 	ldw	r4,8(r10)
  809d58:	00bfff04 	movi	r2,-4
  809d5c:	1892703a 	and	r9,r3,r2
  809d60:	5017883a 	mov	r11,r10
  809d64:	31006726 	beq	r6,r4,809f04 <_free_r+0x1f0>
  809d68:	2880004c 	andi	r2,r5,1
  809d6c:	1005003a 	cmpeq	r2,r2,zero
  809d70:	32400115 	stw	r9,4(r6)
  809d74:	10001a1e 	bne	r2,zero,809de0 <_free_r+0xcc>
  809d78:	000b883a 	mov	r5,zero
  809d7c:	3247883a 	add	r3,r6,r9
  809d80:	18800117 	ldw	r2,4(r3)
  809d84:	1080004c 	andi	r2,r2,1
  809d88:	1000231e 	bne	r2,zero,809e18 <_free_r+0x104>
  809d8c:	280ac03a 	cmpne	r5,r5,zero
  809d90:	3a4f883a 	add	r7,r7,r9
  809d94:	2800451e 	bne	r5,zero,809eac <_free_r+0x198>
  809d98:	31000217 	ldw	r4,8(r6)
  809d9c:	008020b4 	movhi	r2,130
  809da0:	10aaea04 	addi	r2,r2,-21592
  809da4:	20807b26 	beq	r4,r2,809f94 <_free_r+0x280>
  809da8:	30800317 	ldw	r2,12(r6)
  809dac:	3a07883a 	add	r3,r7,r8
  809db0:	19c00015 	stw	r7,0(r3)
  809db4:	11000215 	stw	r4,8(r2)
  809db8:	20800315 	stw	r2,12(r4)
  809dbc:	38800054 	ori	r2,r7,1
  809dc0:	40800115 	stw	r2,4(r8)
  809dc4:	28001a26 	beq	r5,zero,809e30 <_free_r+0x11c>
  809dc8:	8809883a 	mov	r4,r17
  809dcc:	dfc00217 	ldw	ra,8(sp)
  809dd0:	dc400117 	ldw	r17,4(sp)
  809dd4:	dc000017 	ldw	r16,0(sp)
  809dd8:	dec00304 	addi	sp,sp,12
  809ddc:	080eed41 	jmpi	80eed4 <__malloc_unlock>
  809de0:	80bffe17 	ldw	r2,-8(r16)
  809de4:	50c00204 	addi	r3,r10,8
  809de8:	4091c83a 	sub	r8,r8,r2
  809dec:	41000217 	ldw	r4,8(r8)
  809df0:	388f883a 	add	r7,r7,r2
  809df4:	20c06126 	beq	r4,r3,809f7c <_free_r+0x268>
  809df8:	40800317 	ldw	r2,12(r8)
  809dfc:	3247883a 	add	r3,r6,r9
  809e00:	000b883a 	mov	r5,zero
  809e04:	11000215 	stw	r4,8(r2)
  809e08:	20800315 	stw	r2,12(r4)
  809e0c:	18800117 	ldw	r2,4(r3)
  809e10:	1080004c 	andi	r2,r2,1
  809e14:	103fdd26 	beq	r2,zero,809d8c <_free_r+0x78>
  809e18:	38800054 	ori	r2,r7,1
  809e1c:	3a07883a 	add	r3,r7,r8
  809e20:	280ac03a 	cmpne	r5,r5,zero
  809e24:	40800115 	stw	r2,4(r8)
  809e28:	19c00015 	stw	r7,0(r3)
  809e2c:	283fe61e 	bne	r5,zero,809dc8 <_free_r+0xb4>
  809e30:	00807fc4 	movi	r2,511
  809e34:	11c01f2e 	bgeu	r2,r7,809eb4 <_free_r+0x1a0>
  809e38:	3806d27a 	srli	r3,r7,9
  809e3c:	1800481e 	bne	r3,zero,809f60 <_free_r+0x24c>
  809e40:	3804d0fa 	srli	r2,r7,3
  809e44:	100690fa 	slli	r3,r2,3
  809e48:	1acd883a 	add	r6,r3,r11
  809e4c:	31400217 	ldw	r5,8(r6)
  809e50:	31405926 	beq	r6,r5,809fb8 <_free_r+0x2a4>
  809e54:	28800117 	ldw	r2,4(r5)
  809e58:	00ffff04 	movi	r3,-4
  809e5c:	10c4703a 	and	r2,r2,r3
  809e60:	3880022e 	bgeu	r7,r2,809e6c <_free_r+0x158>
  809e64:	29400217 	ldw	r5,8(r5)
  809e68:	317ffa1e 	bne	r6,r5,809e54 <_free_r+0x140>
  809e6c:	29800317 	ldw	r6,12(r5)
  809e70:	41800315 	stw	r6,12(r8)
  809e74:	41400215 	stw	r5,8(r8)
  809e78:	8809883a 	mov	r4,r17
  809e7c:	2a000315 	stw	r8,12(r5)
  809e80:	32000215 	stw	r8,8(r6)
  809e84:	dfc00217 	ldw	ra,8(sp)
  809e88:	dc400117 	ldw	r17,4(sp)
  809e8c:	dc000017 	ldw	r16,0(sp)
  809e90:	dec00304 	addi	sp,sp,12
  809e94:	080eed41 	jmpi	80eed4 <__malloc_unlock>
  809e98:	dfc00217 	ldw	ra,8(sp)
  809e9c:	dc400117 	ldw	r17,4(sp)
  809ea0:	dc000017 	ldw	r16,0(sp)
  809ea4:	dec00304 	addi	sp,sp,12
  809ea8:	f800283a 	ret
  809eac:	31000217 	ldw	r4,8(r6)
  809eb0:	003fbd06 	br	809da8 <_free_r+0x94>
  809eb4:	3806d0fa 	srli	r3,r7,3
  809eb8:	00800044 	movi	r2,1
  809ebc:	51400117 	ldw	r5,4(r10)
  809ec0:	180890fa 	slli	r4,r3,3
  809ec4:	1807d0ba 	srai	r3,r3,2
  809ec8:	22c9883a 	add	r4,r4,r11
  809ecc:	21800217 	ldw	r6,8(r4)
  809ed0:	10c4983a 	sll	r2,r2,r3
  809ed4:	41000315 	stw	r4,12(r8)
  809ed8:	41800215 	stw	r6,8(r8)
  809edc:	288ab03a 	or	r5,r5,r2
  809ee0:	22000215 	stw	r8,8(r4)
  809ee4:	8809883a 	mov	r4,r17
  809ee8:	51400115 	stw	r5,4(r10)
  809eec:	32000315 	stw	r8,12(r6)
  809ef0:	dfc00217 	ldw	ra,8(sp)
  809ef4:	dc400117 	ldw	r17,4(sp)
  809ef8:	dc000017 	ldw	r16,0(sp)
  809efc:	dec00304 	addi	sp,sp,12
  809f00:	080eed41 	jmpi	80eed4 <__malloc_unlock>
  809f04:	2880004c 	andi	r2,r5,1
  809f08:	3a4d883a 	add	r6,r7,r9
  809f0c:	1000071e 	bne	r2,zero,809f2c <_free_r+0x218>
  809f10:	80bffe17 	ldw	r2,-8(r16)
  809f14:	4091c83a 	sub	r8,r8,r2
  809f18:	41000317 	ldw	r4,12(r8)
  809f1c:	40c00217 	ldw	r3,8(r8)
  809f20:	308d883a 	add	r6,r6,r2
  809f24:	20c00215 	stw	r3,8(r4)
  809f28:	19000315 	stw	r4,12(r3)
  809f2c:	008020b4 	movhi	r2,130
  809f30:	10b09704 	addi	r2,r2,-15780
  809f34:	11000017 	ldw	r4,0(r2)
  809f38:	30c00054 	ori	r3,r6,1
  809f3c:	52000215 	stw	r8,8(r10)
  809f40:	40c00115 	stw	r3,4(r8)
  809f44:	313fa036 	bltu	r6,r4,809dc8 <_free_r+0xb4>
  809f48:	008020b4 	movhi	r2,130
  809f4c:	10b7a204 	addi	r2,r2,-8568
  809f50:	11400017 	ldw	r5,0(r2)
  809f54:	8809883a 	mov	r4,r17
  809f58:	0809be80 	call	809be8 <_malloc_trim_r>
  809f5c:	003f9a06 	br	809dc8 <_free_r+0xb4>
  809f60:	00800104 	movi	r2,4
  809f64:	10c0072e 	bgeu	r2,r3,809f84 <_free_r+0x270>
  809f68:	00800504 	movi	r2,20
  809f6c:	10c01936 	bltu	r2,r3,809fd4 <_free_r+0x2c0>
  809f70:	188016c4 	addi	r2,r3,91
  809f74:	100690fa 	slli	r3,r2,3
  809f78:	003fb306 	br	809e48 <_free_r+0x134>
  809f7c:	01400044 	movi	r5,1
  809f80:	003f7e06 	br	809d7c <_free_r+0x68>
  809f84:	3804d1ba 	srli	r2,r7,6
  809f88:	10800e04 	addi	r2,r2,56
  809f8c:	100690fa 	slli	r3,r2,3
  809f90:	003fad06 	br	809e48 <_free_r+0x134>
  809f94:	22000315 	stw	r8,12(r4)
  809f98:	22000215 	stw	r8,8(r4)
  809f9c:	3a05883a 	add	r2,r7,r8
  809fa0:	38c00054 	ori	r3,r7,1
  809fa4:	11c00015 	stw	r7,0(r2)
  809fa8:	41000215 	stw	r4,8(r8)
  809fac:	40c00115 	stw	r3,4(r8)
  809fb0:	41000315 	stw	r4,12(r8)
  809fb4:	003f8406 	br	809dc8 <_free_r+0xb4>
  809fb8:	1005d0ba 	srai	r2,r2,2
  809fbc:	00c00044 	movi	r3,1
  809fc0:	51000117 	ldw	r4,4(r10)
  809fc4:	1886983a 	sll	r3,r3,r2
  809fc8:	20c8b03a 	or	r4,r4,r3
  809fcc:	51000115 	stw	r4,4(r10)
  809fd0:	003fa706 	br	809e70 <_free_r+0x15c>
  809fd4:	00801504 	movi	r2,84
  809fd8:	10c00436 	bltu	r2,r3,809fec <_free_r+0x2d8>
  809fdc:	3804d33a 	srli	r2,r7,12
  809fe0:	10801b84 	addi	r2,r2,110
  809fe4:	100690fa 	slli	r3,r2,3
  809fe8:	003f9706 	br	809e48 <_free_r+0x134>
  809fec:	00805504 	movi	r2,340
  809ff0:	10c00436 	bltu	r2,r3,80a004 <_free_r+0x2f0>
  809ff4:	3804d3fa 	srli	r2,r7,15
  809ff8:	10801dc4 	addi	r2,r2,119
  809ffc:	100690fa 	slli	r3,r2,3
  80a000:	003f9106 	br	809e48 <_free_r+0x134>
  80a004:	00815504 	movi	r2,1364
  80a008:	10c0032e 	bgeu	r2,r3,80a018 <_free_r+0x304>
  80a00c:	00801f84 	movi	r2,126
  80a010:	00c0fc04 	movi	r3,1008
  80a014:	003f8c06 	br	809e48 <_free_r+0x134>
  80a018:	3804d4ba 	srli	r2,r7,18
  80a01c:	10801f04 	addi	r2,r2,124
  80a020:	100690fa 	slli	r3,r2,3
  80a024:	003f8806 	br	809e48 <_free_r+0x134>

0080a028 <__sfvwrite_r>:
  80a028:	30800217 	ldw	r2,8(r6)
  80a02c:	defff504 	addi	sp,sp,-44
  80a030:	df000915 	stw	fp,36(sp)
  80a034:	dd800715 	stw	r22,28(sp)
  80a038:	dc800315 	stw	r18,12(sp)
  80a03c:	dfc00a15 	stw	ra,40(sp)
  80a040:	ddc00815 	stw	r23,32(sp)
  80a044:	dd400615 	stw	r21,24(sp)
  80a048:	dd000515 	stw	r20,20(sp)
  80a04c:	dcc00415 	stw	r19,16(sp)
  80a050:	dc400215 	stw	r17,8(sp)
  80a054:	dc000115 	stw	r16,4(sp)
  80a058:	302d883a 	mov	r22,r6
  80a05c:	2039883a 	mov	fp,r4
  80a060:	2825883a 	mov	r18,r5
  80a064:	10001c26 	beq	r2,zero,80a0d8 <__sfvwrite_r+0xb0>
  80a068:	29c0030b 	ldhu	r7,12(r5)
  80a06c:	3880020c 	andi	r2,r7,8
  80a070:	10002726 	beq	r2,zero,80a110 <__sfvwrite_r+0xe8>
  80a074:	28800417 	ldw	r2,16(r5)
  80a078:	10002526 	beq	r2,zero,80a110 <__sfvwrite_r+0xe8>
  80a07c:	3880008c 	andi	r2,r7,2
  80a080:	b5400017 	ldw	r21,0(r22)
  80a084:	10002826 	beq	r2,zero,80a128 <__sfvwrite_r+0x100>
  80a088:	0021883a 	mov	r16,zero
  80a08c:	0023883a 	mov	r17,zero
  80a090:	880d883a 	mov	r6,r17
  80a094:	e009883a 	mov	r4,fp
  80a098:	00810004 	movi	r2,1024
  80a09c:	80006e26 	beq	r16,zero,80a258 <__sfvwrite_r+0x230>
  80a0a0:	800f883a 	mov	r7,r16
  80a0a4:	91400717 	ldw	r5,28(r18)
  80a0a8:	1400012e 	bgeu	r2,r16,80a0b0 <__sfvwrite_r+0x88>
  80a0ac:	100f883a 	mov	r7,r2
  80a0b0:	90c00917 	ldw	r3,36(r18)
  80a0b4:	183ee83a 	callr	r3
  80a0b8:	1007883a 	mov	r3,r2
  80a0bc:	80a1c83a 	sub	r16,r16,r2
  80a0c0:	88a3883a 	add	r17,r17,r2
  80a0c4:	00806d0e 	bge	zero,r2,80a27c <__sfvwrite_r+0x254>
  80a0c8:	b0800217 	ldw	r2,8(r22)
  80a0cc:	10c5c83a 	sub	r2,r2,r3
  80a0d0:	b0800215 	stw	r2,8(r22)
  80a0d4:	103fee1e 	bne	r2,zero,80a090 <__sfvwrite_r+0x68>
  80a0d8:	0009883a 	mov	r4,zero
  80a0dc:	2005883a 	mov	r2,r4
  80a0e0:	dfc00a17 	ldw	ra,40(sp)
  80a0e4:	df000917 	ldw	fp,36(sp)
  80a0e8:	ddc00817 	ldw	r23,32(sp)
  80a0ec:	dd800717 	ldw	r22,28(sp)
  80a0f0:	dd400617 	ldw	r21,24(sp)
  80a0f4:	dd000517 	ldw	r20,20(sp)
  80a0f8:	dcc00417 	ldw	r19,16(sp)
  80a0fc:	dc800317 	ldw	r18,12(sp)
  80a100:	dc400217 	ldw	r17,8(sp)
  80a104:	dc000117 	ldw	r16,4(sp)
  80a108:	dec00b04 	addi	sp,sp,44
  80a10c:	f800283a 	ret
  80a110:	0807d900 	call	807d90 <__swsetup_r>
  80a114:	1000e41e 	bne	r2,zero,80a4a8 <__sfvwrite_r+0x480>
  80a118:	91c0030b 	ldhu	r7,12(r18)
  80a11c:	b5400017 	ldw	r21,0(r22)
  80a120:	3880008c 	andi	r2,r7,2
  80a124:	103fd81e 	bne	r2,zero,80a088 <__sfvwrite_r+0x60>
  80a128:	3880004c 	andi	r2,r7,1
  80a12c:	1005003a 	cmpeq	r2,r2,zero
  80a130:	10005726 	beq	r2,zero,80a290 <__sfvwrite_r+0x268>
  80a134:	0029883a 	mov	r20,zero
  80a138:	002f883a 	mov	r23,zero
  80a13c:	a0004226 	beq	r20,zero,80a248 <__sfvwrite_r+0x220>
  80a140:	3880800c 	andi	r2,r7,512
  80a144:	94000217 	ldw	r16,8(r18)
  80a148:	10008b26 	beq	r2,zero,80a378 <__sfvwrite_r+0x350>
  80a14c:	800d883a 	mov	r6,r16
  80a150:	a400a536 	bltu	r20,r16,80a3e8 <__sfvwrite_r+0x3c0>
  80a154:	3881200c 	andi	r2,r7,1152
  80a158:	10002726 	beq	r2,zero,80a1f8 <__sfvwrite_r+0x1d0>
  80a15c:	90800517 	ldw	r2,20(r18)
  80a160:	92000417 	ldw	r8,16(r18)
  80a164:	91400017 	ldw	r5,0(r18)
  80a168:	1087883a 	add	r3,r2,r2
  80a16c:	1887883a 	add	r3,r3,r2
  80a170:	1808d7fa 	srli	r4,r3,31
  80a174:	2a21c83a 	sub	r16,r5,r8
  80a178:	80800044 	addi	r2,r16,1
  80a17c:	20c9883a 	add	r4,r4,r3
  80a180:	2027d07a 	srai	r19,r4,1
  80a184:	a085883a 	add	r2,r20,r2
  80a188:	980d883a 	mov	r6,r19
  80a18c:	9880022e 	bgeu	r19,r2,80a198 <__sfvwrite_r+0x170>
  80a190:	1027883a 	mov	r19,r2
  80a194:	100d883a 	mov	r6,r2
  80a198:	3881000c 	andi	r2,r7,1024
  80a19c:	1000b826 	beq	r2,zero,80a480 <__sfvwrite_r+0x458>
  80a1a0:	300b883a 	mov	r5,r6
  80a1a4:	e009883a 	mov	r4,fp
  80a1a8:	080a89c0 	call	80a89c <_malloc_r>
  80a1ac:	10003126 	beq	r2,zero,80a274 <__sfvwrite_r+0x24c>
  80a1b0:	91400417 	ldw	r5,16(r18)
  80a1b4:	1009883a 	mov	r4,r2
  80a1b8:	800d883a 	mov	r6,r16
  80a1bc:	1023883a 	mov	r17,r2
  80a1c0:	080b0c00 	call	80b0c0 <memcpy>
  80a1c4:	90c0030b 	ldhu	r3,12(r18)
  80a1c8:	00beffc4 	movi	r2,-1025
  80a1cc:	1886703a 	and	r3,r3,r2
  80a1d0:	18c02014 	ori	r3,r3,128
  80a1d4:	90c0030d 	sth	r3,12(r18)
  80a1d8:	9c07c83a 	sub	r3,r19,r16
  80a1dc:	8c05883a 	add	r2,r17,r16
  80a1e0:	a00d883a 	mov	r6,r20
  80a1e4:	a021883a 	mov	r16,r20
  80a1e8:	90800015 	stw	r2,0(r18)
  80a1ec:	90c00215 	stw	r3,8(r18)
  80a1f0:	94400415 	stw	r17,16(r18)
  80a1f4:	94c00515 	stw	r19,20(r18)
  80a1f8:	91000017 	ldw	r4,0(r18)
  80a1fc:	b80b883a 	mov	r5,r23
  80a200:	a023883a 	mov	r17,r20
  80a204:	080b1600 	call	80b160 <memmove>
  80a208:	90c00217 	ldw	r3,8(r18)
  80a20c:	90800017 	ldw	r2,0(r18)
  80a210:	a027883a 	mov	r19,r20
  80a214:	1c07c83a 	sub	r3,r3,r16
  80a218:	1405883a 	add	r2,r2,r16
  80a21c:	90c00215 	stw	r3,8(r18)
  80a220:	a021883a 	mov	r16,r20
  80a224:	90800015 	stw	r2,0(r18)
  80a228:	b0800217 	ldw	r2,8(r22)
  80a22c:	1405c83a 	sub	r2,r2,r16
  80a230:	b0800215 	stw	r2,8(r22)
  80a234:	103fa826 	beq	r2,zero,80a0d8 <__sfvwrite_r+0xb0>
  80a238:	a469c83a 	sub	r20,r20,r17
  80a23c:	91c0030b 	ldhu	r7,12(r18)
  80a240:	bcef883a 	add	r23,r23,r19
  80a244:	a03fbe1e 	bne	r20,zero,80a140 <__sfvwrite_r+0x118>
  80a248:	adc00017 	ldw	r23,0(r21)
  80a24c:	ad000117 	ldw	r20,4(r21)
  80a250:	ad400204 	addi	r21,r21,8
  80a254:	003fb906 	br	80a13c <__sfvwrite_r+0x114>
  80a258:	ac400017 	ldw	r17,0(r21)
  80a25c:	ac000117 	ldw	r16,4(r21)
  80a260:	ad400204 	addi	r21,r21,8
  80a264:	003f8a06 	br	80a090 <__sfvwrite_r+0x68>
  80a268:	91400417 	ldw	r5,16(r18)
  80a26c:	e009883a 	mov	r4,fp
  80a270:	0809d140 	call	809d14 <_free_r>
  80a274:	00800304 	movi	r2,12
  80a278:	e0800015 	stw	r2,0(fp)
  80a27c:	9080030b 	ldhu	r2,12(r18)
  80a280:	013fffc4 	movi	r4,-1
  80a284:	10801014 	ori	r2,r2,64
  80a288:	9080030d 	sth	r2,12(r18)
  80a28c:	003f9306 	br	80a0dc <__sfvwrite_r+0xb4>
  80a290:	0027883a 	mov	r19,zero
  80a294:	002f883a 	mov	r23,zero
  80a298:	d8000015 	stw	zero,0(sp)
  80a29c:	0029883a 	mov	r20,zero
  80a2a0:	98001e26 	beq	r19,zero,80a31c <__sfvwrite_r+0x2f4>
  80a2a4:	d8c00017 	ldw	r3,0(sp)
  80a2a8:	1804c03a 	cmpne	r2,r3,zero
  80a2ac:	10005e26 	beq	r2,zero,80a428 <__sfvwrite_r+0x400>
  80a2b0:	9821883a 	mov	r16,r19
  80a2b4:	a4c0012e 	bgeu	r20,r19,80a2bc <__sfvwrite_r+0x294>
  80a2b8:	a021883a 	mov	r16,r20
  80a2bc:	91000017 	ldw	r4,0(r18)
  80a2c0:	90800417 	ldw	r2,16(r18)
  80a2c4:	91800217 	ldw	r6,8(r18)
  80a2c8:	91c00517 	ldw	r7,20(r18)
  80a2cc:	1100022e 	bgeu	r2,r4,80a2d8 <__sfvwrite_r+0x2b0>
  80a2d0:	31e3883a 	add	r17,r6,r7
  80a2d4:	8c001616 	blt	r17,r16,80a330 <__sfvwrite_r+0x308>
  80a2d8:	81c03816 	blt	r16,r7,80a3bc <__sfvwrite_r+0x394>
  80a2dc:	90c00917 	ldw	r3,36(r18)
  80a2e0:	91400717 	ldw	r5,28(r18)
  80a2e4:	e009883a 	mov	r4,fp
  80a2e8:	b80d883a 	mov	r6,r23
  80a2ec:	183ee83a 	callr	r3
  80a2f0:	1023883a 	mov	r17,r2
  80a2f4:	00bfe10e 	bge	zero,r2,80a27c <__sfvwrite_r+0x254>
  80a2f8:	a469c83a 	sub	r20,r20,r17
  80a2fc:	a0001826 	beq	r20,zero,80a360 <__sfvwrite_r+0x338>
  80a300:	b0800217 	ldw	r2,8(r22)
  80a304:	1445c83a 	sub	r2,r2,r17
  80a308:	b0800215 	stw	r2,8(r22)
  80a30c:	103f7226 	beq	r2,zero,80a0d8 <__sfvwrite_r+0xb0>
  80a310:	9c67c83a 	sub	r19,r19,r17
  80a314:	bc6f883a 	add	r23,r23,r17
  80a318:	983fe21e 	bne	r19,zero,80a2a4 <__sfvwrite_r+0x27c>
  80a31c:	adc00017 	ldw	r23,0(r21)
  80a320:	acc00117 	ldw	r19,4(r21)
  80a324:	ad400204 	addi	r21,r21,8
  80a328:	d8000015 	stw	zero,0(sp)
  80a32c:	003fdc06 	br	80a2a0 <__sfvwrite_r+0x278>
  80a330:	b80b883a 	mov	r5,r23
  80a334:	880d883a 	mov	r6,r17
  80a338:	080b1600 	call	80b160 <memmove>
  80a33c:	90c00017 	ldw	r3,0(r18)
  80a340:	e009883a 	mov	r4,fp
  80a344:	900b883a 	mov	r5,r18
  80a348:	1c47883a 	add	r3,r3,r17
  80a34c:	90c00015 	stw	r3,0(r18)
  80a350:	08096c40 	call	8096c4 <_fflush_r>
  80a354:	103fc91e 	bne	r2,zero,80a27c <__sfvwrite_r+0x254>
  80a358:	a469c83a 	sub	r20,r20,r17
  80a35c:	a03fe81e 	bne	r20,zero,80a300 <__sfvwrite_r+0x2d8>
  80a360:	e009883a 	mov	r4,fp
  80a364:	900b883a 	mov	r5,r18
  80a368:	08096c40 	call	8096c4 <_fflush_r>
  80a36c:	103fc31e 	bne	r2,zero,80a27c <__sfvwrite_r+0x254>
  80a370:	d8000015 	stw	zero,0(sp)
  80a374:	003fe206 	br	80a300 <__sfvwrite_r+0x2d8>
  80a378:	91000017 	ldw	r4,0(r18)
  80a37c:	90800417 	ldw	r2,16(r18)
  80a380:	1100022e 	bgeu	r2,r4,80a38c <__sfvwrite_r+0x364>
  80a384:	8023883a 	mov	r17,r16
  80a388:	85003136 	bltu	r16,r20,80a450 <__sfvwrite_r+0x428>
  80a38c:	91c00517 	ldw	r7,20(r18)
  80a390:	a1c01836 	bltu	r20,r7,80a3f4 <__sfvwrite_r+0x3cc>
  80a394:	90c00917 	ldw	r3,36(r18)
  80a398:	91400717 	ldw	r5,28(r18)
  80a39c:	e009883a 	mov	r4,fp
  80a3a0:	b80d883a 	mov	r6,r23
  80a3a4:	183ee83a 	callr	r3
  80a3a8:	1021883a 	mov	r16,r2
  80a3ac:	00bfb30e 	bge	zero,r2,80a27c <__sfvwrite_r+0x254>
  80a3b0:	1023883a 	mov	r17,r2
  80a3b4:	1027883a 	mov	r19,r2
  80a3b8:	003f9b06 	br	80a228 <__sfvwrite_r+0x200>
  80a3bc:	b80b883a 	mov	r5,r23
  80a3c0:	800d883a 	mov	r6,r16
  80a3c4:	080b1600 	call	80b160 <memmove>
  80a3c8:	90c00217 	ldw	r3,8(r18)
  80a3cc:	90800017 	ldw	r2,0(r18)
  80a3d0:	8023883a 	mov	r17,r16
  80a3d4:	1c07c83a 	sub	r3,r3,r16
  80a3d8:	1405883a 	add	r2,r2,r16
  80a3dc:	90c00215 	stw	r3,8(r18)
  80a3e0:	90800015 	stw	r2,0(r18)
  80a3e4:	003fc406 	br	80a2f8 <__sfvwrite_r+0x2d0>
  80a3e8:	a00d883a 	mov	r6,r20
  80a3ec:	a021883a 	mov	r16,r20
  80a3f0:	003f8106 	br	80a1f8 <__sfvwrite_r+0x1d0>
  80a3f4:	b80b883a 	mov	r5,r23
  80a3f8:	a00d883a 	mov	r6,r20
  80a3fc:	080b1600 	call	80b160 <memmove>
  80a400:	90c00217 	ldw	r3,8(r18)
  80a404:	90800017 	ldw	r2,0(r18)
  80a408:	a021883a 	mov	r16,r20
  80a40c:	1d07c83a 	sub	r3,r3,r20
  80a410:	1505883a 	add	r2,r2,r20
  80a414:	a023883a 	mov	r17,r20
  80a418:	a027883a 	mov	r19,r20
  80a41c:	90c00215 	stw	r3,8(r18)
  80a420:	90800015 	stw	r2,0(r18)
  80a424:	003f8006 	br	80a228 <__sfvwrite_r+0x200>
  80a428:	b809883a 	mov	r4,r23
  80a42c:	01400284 	movi	r5,10
  80a430:	980d883a 	mov	r6,r19
  80a434:	080afdc0 	call	80afdc <memchr>
  80a438:	10001726 	beq	r2,zero,80a498 <__sfvwrite_r+0x470>
  80a43c:	15c5c83a 	sub	r2,r2,r23
  80a440:	15000044 	addi	r20,r2,1
  80a444:	00800044 	movi	r2,1
  80a448:	d8800015 	stw	r2,0(sp)
  80a44c:	003f9806 	br	80a2b0 <__sfvwrite_r+0x288>
  80a450:	b80b883a 	mov	r5,r23
  80a454:	800d883a 	mov	r6,r16
  80a458:	080b1600 	call	80b160 <memmove>
  80a45c:	90c00017 	ldw	r3,0(r18)
  80a460:	e009883a 	mov	r4,fp
  80a464:	900b883a 	mov	r5,r18
  80a468:	1c07883a 	add	r3,r3,r16
  80a46c:	90c00015 	stw	r3,0(r18)
  80a470:	8027883a 	mov	r19,r16
  80a474:	08096c40 	call	8096c4 <_fflush_r>
  80a478:	103f6b26 	beq	r2,zero,80a228 <__sfvwrite_r+0x200>
  80a47c:	003f7f06 	br	80a27c <__sfvwrite_r+0x254>
  80a480:	400b883a 	mov	r5,r8
  80a484:	e009883a 	mov	r4,fp
  80a488:	080c3640 	call	80c364 <_realloc_r>
  80a48c:	103f7626 	beq	r2,zero,80a268 <__sfvwrite_r+0x240>
  80a490:	1023883a 	mov	r17,r2
  80a494:	003f5006 	br	80a1d8 <__sfvwrite_r+0x1b0>
  80a498:	00c00044 	movi	r3,1
  80a49c:	9d000044 	addi	r20,r19,1
  80a4a0:	d8c00015 	stw	r3,0(sp)
  80a4a4:	003f8206 	br	80a2b0 <__sfvwrite_r+0x288>
  80a4a8:	9080030b 	ldhu	r2,12(r18)
  80a4ac:	00c00244 	movi	r3,9
  80a4b0:	013fffc4 	movi	r4,-1
  80a4b4:	10801014 	ori	r2,r2,64
  80a4b8:	9080030d 	sth	r2,12(r18)
  80a4bc:	e0c00015 	stw	r3,0(fp)
  80a4c0:	003f0606 	br	80a0dc <__sfvwrite_r+0xb4>

0080a4c4 <_fwalk_reent>:
  80a4c4:	defff704 	addi	sp,sp,-36
  80a4c8:	dcc00315 	stw	r19,12(sp)
  80a4cc:	24c0b804 	addi	r19,r4,736
  80a4d0:	dd800615 	stw	r22,24(sp)
  80a4d4:	dd400515 	stw	r21,20(sp)
  80a4d8:	dfc00815 	stw	ra,32(sp)
  80a4dc:	ddc00715 	stw	r23,28(sp)
  80a4e0:	dd000415 	stw	r20,16(sp)
  80a4e4:	dc800215 	stw	r18,8(sp)
  80a4e8:	dc400115 	stw	r17,4(sp)
  80a4ec:	dc000015 	stw	r16,0(sp)
  80a4f0:	202b883a 	mov	r21,r4
  80a4f4:	282d883a 	mov	r22,r5
  80a4f8:	080994c0 	call	80994c <__sfp_lock_acquire>
  80a4fc:	98002126 	beq	r19,zero,80a584 <_fwalk_reent+0xc0>
  80a500:	002f883a 	mov	r23,zero
  80a504:	9c800117 	ldw	r18,4(r19)
  80a508:	9c000217 	ldw	r16,8(r19)
  80a50c:	90bfffc4 	addi	r2,r18,-1
  80a510:	10000d16 	blt	r2,zero,80a548 <_fwalk_reent+0x84>
  80a514:	0023883a 	mov	r17,zero
  80a518:	053fffc4 	movi	r20,-1
  80a51c:	8080030f 	ldh	r2,12(r16)
  80a520:	8c400044 	addi	r17,r17,1
  80a524:	10000626 	beq	r2,zero,80a540 <_fwalk_reent+0x7c>
  80a528:	8080038f 	ldh	r2,14(r16)
  80a52c:	800b883a 	mov	r5,r16
  80a530:	a809883a 	mov	r4,r21
  80a534:	15000226 	beq	r2,r20,80a540 <_fwalk_reent+0x7c>
  80a538:	b03ee83a 	callr	r22
  80a53c:	b8aeb03a 	or	r23,r23,r2
  80a540:	84001704 	addi	r16,r16,92
  80a544:	947ff51e 	bne	r18,r17,80a51c <_fwalk_reent+0x58>
  80a548:	9cc00017 	ldw	r19,0(r19)
  80a54c:	983fed1e 	bne	r19,zero,80a504 <_fwalk_reent+0x40>
  80a550:	08099500 	call	809950 <__sfp_lock_release>
  80a554:	b805883a 	mov	r2,r23
  80a558:	dfc00817 	ldw	ra,32(sp)
  80a55c:	ddc00717 	ldw	r23,28(sp)
  80a560:	dd800617 	ldw	r22,24(sp)
  80a564:	dd400517 	ldw	r21,20(sp)
  80a568:	dd000417 	ldw	r20,16(sp)
  80a56c:	dcc00317 	ldw	r19,12(sp)
  80a570:	dc800217 	ldw	r18,8(sp)
  80a574:	dc400117 	ldw	r17,4(sp)
  80a578:	dc000017 	ldw	r16,0(sp)
  80a57c:	dec00904 	addi	sp,sp,36
  80a580:	f800283a 	ret
  80a584:	002f883a 	mov	r23,zero
  80a588:	003ff106 	br	80a550 <_fwalk_reent+0x8c>

0080a58c <_fwalk>:
  80a58c:	defff804 	addi	sp,sp,-32
  80a590:	dcc00315 	stw	r19,12(sp)
  80a594:	24c0b804 	addi	r19,r4,736
  80a598:	dd400515 	stw	r21,20(sp)
  80a59c:	dfc00715 	stw	ra,28(sp)
  80a5a0:	dd800615 	stw	r22,24(sp)
  80a5a4:	dd000415 	stw	r20,16(sp)
  80a5a8:	dc800215 	stw	r18,8(sp)
  80a5ac:	dc400115 	stw	r17,4(sp)
  80a5b0:	dc000015 	stw	r16,0(sp)
  80a5b4:	282b883a 	mov	r21,r5
  80a5b8:	080994c0 	call	80994c <__sfp_lock_acquire>
  80a5bc:	98001f26 	beq	r19,zero,80a63c <_fwalk+0xb0>
  80a5c0:	002d883a 	mov	r22,zero
  80a5c4:	9c800117 	ldw	r18,4(r19)
  80a5c8:	9c000217 	ldw	r16,8(r19)
  80a5cc:	90bfffc4 	addi	r2,r18,-1
  80a5d0:	10000c16 	blt	r2,zero,80a604 <_fwalk+0x78>
  80a5d4:	0023883a 	mov	r17,zero
  80a5d8:	053fffc4 	movi	r20,-1
  80a5dc:	8080030f 	ldh	r2,12(r16)
  80a5e0:	8c400044 	addi	r17,r17,1
  80a5e4:	10000526 	beq	r2,zero,80a5fc <_fwalk+0x70>
  80a5e8:	8080038f 	ldh	r2,14(r16)
  80a5ec:	8009883a 	mov	r4,r16
  80a5f0:	15000226 	beq	r2,r20,80a5fc <_fwalk+0x70>
  80a5f4:	a83ee83a 	callr	r21
  80a5f8:	b0acb03a 	or	r22,r22,r2
  80a5fc:	84001704 	addi	r16,r16,92
  80a600:	947ff61e 	bne	r18,r17,80a5dc <_fwalk+0x50>
  80a604:	9cc00017 	ldw	r19,0(r19)
  80a608:	983fee1e 	bne	r19,zero,80a5c4 <_fwalk+0x38>
  80a60c:	08099500 	call	809950 <__sfp_lock_release>
  80a610:	b005883a 	mov	r2,r22
  80a614:	dfc00717 	ldw	ra,28(sp)
  80a618:	dd800617 	ldw	r22,24(sp)
  80a61c:	dd400517 	ldw	r21,20(sp)
  80a620:	dd000417 	ldw	r20,16(sp)
  80a624:	dcc00317 	ldw	r19,12(sp)
  80a628:	dc800217 	ldw	r18,8(sp)
  80a62c:	dc400117 	ldw	r17,4(sp)
  80a630:	dc000017 	ldw	r16,0(sp)
  80a634:	dec00804 	addi	sp,sp,32
  80a638:	f800283a 	ret
  80a63c:	002d883a 	mov	r22,zero
  80a640:	003ff206 	br	80a60c <_fwalk+0x80>

0080a644 <__locale_charset>:
  80a644:	d0a00417 	ldw	r2,-32752(gp)
  80a648:	f800283a 	ret

0080a64c <_localeconv_r>:
  80a64c:	008020b4 	movhi	r2,130
  80a650:	10a92804 	addi	r2,r2,-23392
  80a654:	f800283a 	ret

0080a658 <localeconv>:
  80a658:	008020b4 	movhi	r2,130
  80a65c:	10b09304 	addi	r2,r2,-15796
  80a660:	11000017 	ldw	r4,0(r2)
  80a664:	080a64c1 	jmpi	80a64c <_localeconv_r>

0080a668 <_setlocale_r>:
  80a668:	defffc04 	addi	sp,sp,-16
  80a66c:	00c020b4 	movhi	r3,130
  80a670:	18e8fe04 	addi	r3,r3,-23560
  80a674:	dc800215 	stw	r18,8(sp)
  80a678:	dc400115 	stw	r17,4(sp)
  80a67c:	dc000015 	stw	r16,0(sp)
  80a680:	2023883a 	mov	r17,r4
  80a684:	2825883a 	mov	r18,r5
  80a688:	dfc00315 	stw	ra,12(sp)
  80a68c:	3021883a 	mov	r16,r6
  80a690:	3009883a 	mov	r4,r6
  80a694:	180b883a 	mov	r5,r3
  80a698:	30000926 	beq	r6,zero,80a6c0 <_setlocale_r+0x58>
  80a69c:	080cb540 	call	80cb54 <strcmp>
  80a6a0:	8009883a 	mov	r4,r16
  80a6a4:	014020b4 	movhi	r5,130
  80a6a8:	29690f04 	addi	r5,r5,-23492
  80a6ac:	10000b1e 	bne	r2,zero,80a6dc <_setlocale_r+0x74>
  80a6b0:	8c000d15 	stw	r16,52(r17)
  80a6b4:	8c800c15 	stw	r18,48(r17)
  80a6b8:	00c020b4 	movhi	r3,130
  80a6bc:	18e8fe04 	addi	r3,r3,-23560
  80a6c0:	1805883a 	mov	r2,r3
  80a6c4:	dfc00317 	ldw	ra,12(sp)
  80a6c8:	dc800217 	ldw	r18,8(sp)
  80a6cc:	dc400117 	ldw	r17,4(sp)
  80a6d0:	dc000017 	ldw	r16,0(sp)
  80a6d4:	dec00404 	addi	sp,sp,16
  80a6d8:	f800283a 	ret
  80a6dc:	080cb540 	call	80cb54 <strcmp>
  80a6e0:	0007883a 	mov	r3,zero
  80a6e4:	103ff226 	beq	r2,zero,80a6b0 <_setlocale_r+0x48>
  80a6e8:	003ff506 	br	80a6c0 <_setlocale_r+0x58>

0080a6ec <setlocale>:
  80a6ec:	018020b4 	movhi	r6,130
  80a6f0:	31b09304 	addi	r6,r6,-15796
  80a6f4:	2007883a 	mov	r3,r4
  80a6f8:	31000017 	ldw	r4,0(r6)
  80a6fc:	280d883a 	mov	r6,r5
  80a700:	180b883a 	mov	r5,r3
  80a704:	080a6681 	jmpi	80a668 <_setlocale_r>

0080a708 <__smakebuf_r>:
  80a708:	2880030b 	ldhu	r2,12(r5)
  80a70c:	deffed04 	addi	sp,sp,-76
  80a710:	dc401015 	stw	r17,64(sp)
  80a714:	1080008c 	andi	r2,r2,2
  80a718:	dc000f15 	stw	r16,60(sp)
  80a71c:	dfc01215 	stw	ra,72(sp)
  80a720:	dc801115 	stw	r18,68(sp)
  80a724:	2821883a 	mov	r16,r5
  80a728:	2023883a 	mov	r17,r4
  80a72c:	10000b26 	beq	r2,zero,80a75c <__smakebuf_r+0x54>
  80a730:	28c010c4 	addi	r3,r5,67
  80a734:	00800044 	movi	r2,1
  80a738:	28800515 	stw	r2,20(r5)
  80a73c:	28c00415 	stw	r3,16(r5)
  80a740:	28c00015 	stw	r3,0(r5)
  80a744:	dfc01217 	ldw	ra,72(sp)
  80a748:	dc801117 	ldw	r18,68(sp)
  80a74c:	dc401017 	ldw	r17,64(sp)
  80a750:	dc000f17 	ldw	r16,60(sp)
  80a754:	dec01304 	addi	sp,sp,76
  80a758:	f800283a 	ret
  80a75c:	2940038f 	ldh	r5,14(r5)
  80a760:	28002116 	blt	r5,zero,80a7e8 <__smakebuf_r+0xe0>
  80a764:	d80d883a 	mov	r6,sp
  80a768:	080cee40 	call	80cee4 <_fstat_r>
  80a76c:	10001e16 	blt	r2,zero,80a7e8 <__smakebuf_r+0xe0>
  80a770:	d8800117 	ldw	r2,4(sp)
  80a774:	00e00014 	movui	r3,32768
  80a778:	113c000c 	andi	r4,r2,61440
  80a77c:	20c03126 	beq	r4,r3,80a844 <__smakebuf_r+0x13c>
  80a780:	8080030b 	ldhu	r2,12(r16)
  80a784:	00c80004 	movi	r3,8192
  80a788:	10820014 	ori	r2,r2,2048
  80a78c:	8080030d 	sth	r2,12(r16)
  80a790:	20c01e26 	beq	r4,r3,80a80c <__smakebuf_r+0x104>
  80a794:	04810004 	movi	r18,1024
  80a798:	8809883a 	mov	r4,r17
  80a79c:	900b883a 	mov	r5,r18
  80a7a0:	080a89c0 	call	80a89c <_malloc_r>
  80a7a4:	1009883a 	mov	r4,r2
  80a7a8:	10003126 	beq	r2,zero,80a870 <__smakebuf_r+0x168>
  80a7ac:	80c0030b 	ldhu	r3,12(r16)
  80a7b0:	00802074 	movhi	r2,129
  80a7b4:	10a69004 	addi	r2,r2,-26048
  80a7b8:	88800f15 	stw	r2,60(r17)
  80a7bc:	18c02014 	ori	r3,r3,128
  80a7c0:	84800515 	stw	r18,20(r16)
  80a7c4:	80c0030d 	sth	r3,12(r16)
  80a7c8:	81000415 	stw	r4,16(r16)
  80a7cc:	81000015 	stw	r4,0(r16)
  80a7d0:	dfc01217 	ldw	ra,72(sp)
  80a7d4:	dc801117 	ldw	r18,68(sp)
  80a7d8:	dc401017 	ldw	r17,64(sp)
  80a7dc:	dc000f17 	ldw	r16,60(sp)
  80a7e0:	dec01304 	addi	sp,sp,76
  80a7e4:	f800283a 	ret
  80a7e8:	80c0030b 	ldhu	r3,12(r16)
  80a7ec:	1880200c 	andi	r2,r3,128
  80a7f0:	10000426 	beq	r2,zero,80a804 <__smakebuf_r+0xfc>
  80a7f4:	04801004 	movi	r18,64
  80a7f8:	18820014 	ori	r2,r3,2048
  80a7fc:	8080030d 	sth	r2,12(r16)
  80a800:	003fe506 	br	80a798 <__smakebuf_r+0x90>
  80a804:	04810004 	movi	r18,1024
  80a808:	003ffb06 	br	80a7f8 <__smakebuf_r+0xf0>
  80a80c:	8140038f 	ldh	r5,14(r16)
  80a810:	8809883a 	mov	r4,r17
  80a814:	080cf580 	call	80cf58 <_isatty_r>
  80a818:	103fde26 	beq	r2,zero,80a794 <__smakebuf_r+0x8c>
  80a81c:	8080030b 	ldhu	r2,12(r16)
  80a820:	80c010c4 	addi	r3,r16,67
  80a824:	04810004 	movi	r18,1024
  80a828:	10800054 	ori	r2,r2,1
  80a82c:	8080030d 	sth	r2,12(r16)
  80a830:	00800044 	movi	r2,1
  80a834:	80c00415 	stw	r3,16(r16)
  80a838:	80800515 	stw	r2,20(r16)
  80a83c:	80c00015 	stw	r3,0(r16)
  80a840:	003fd506 	br	80a798 <__smakebuf_r+0x90>
  80a844:	80c00a17 	ldw	r3,40(r16)
  80a848:	00802074 	movhi	r2,129
  80a84c:	10b28404 	addi	r2,r2,-13808
  80a850:	18bfcb1e 	bne	r3,r2,80a780 <__smakebuf_r+0x78>
  80a854:	8080030b 	ldhu	r2,12(r16)
  80a858:	00c10004 	movi	r3,1024
  80a85c:	1825883a 	mov	r18,r3
  80a860:	10c4b03a 	or	r2,r2,r3
  80a864:	8080030d 	sth	r2,12(r16)
  80a868:	80c01315 	stw	r3,76(r16)
  80a86c:	003fca06 	br	80a798 <__smakebuf_r+0x90>
  80a870:	8100030b 	ldhu	r4,12(r16)
  80a874:	2080800c 	andi	r2,r4,512
  80a878:	103fb21e 	bne	r2,zero,80a744 <__smakebuf_r+0x3c>
  80a87c:	80c010c4 	addi	r3,r16,67
  80a880:	21000094 	ori	r4,r4,2
  80a884:	00800044 	movi	r2,1
  80a888:	80800515 	stw	r2,20(r16)
  80a88c:	8100030d 	sth	r4,12(r16)
  80a890:	80c00415 	stw	r3,16(r16)
  80a894:	80c00015 	stw	r3,0(r16)
  80a898:	003faa06 	br	80a744 <__smakebuf_r+0x3c>

0080a89c <_malloc_r>:
  80a89c:	defff604 	addi	sp,sp,-40
  80a8a0:	28c002c4 	addi	r3,r5,11
  80a8a4:	00800584 	movi	r2,22
  80a8a8:	dc800215 	stw	r18,8(sp)
  80a8ac:	dfc00915 	stw	ra,36(sp)
  80a8b0:	df000815 	stw	fp,32(sp)
  80a8b4:	ddc00715 	stw	r23,28(sp)
  80a8b8:	dd800615 	stw	r22,24(sp)
  80a8bc:	dd400515 	stw	r21,20(sp)
  80a8c0:	dd000415 	stw	r20,16(sp)
  80a8c4:	dcc00315 	stw	r19,12(sp)
  80a8c8:	dc400115 	stw	r17,4(sp)
  80a8cc:	dc000015 	stw	r16,0(sp)
  80a8d0:	2025883a 	mov	r18,r4
  80a8d4:	10c01236 	bltu	r2,r3,80a920 <_malloc_r+0x84>
  80a8d8:	04400404 	movi	r17,16
  80a8dc:	8940142e 	bgeu	r17,r5,80a930 <_malloc_r+0x94>
  80a8e0:	00800304 	movi	r2,12
  80a8e4:	0007883a 	mov	r3,zero
  80a8e8:	90800015 	stw	r2,0(r18)
  80a8ec:	1805883a 	mov	r2,r3
  80a8f0:	dfc00917 	ldw	ra,36(sp)
  80a8f4:	df000817 	ldw	fp,32(sp)
  80a8f8:	ddc00717 	ldw	r23,28(sp)
  80a8fc:	dd800617 	ldw	r22,24(sp)
  80a900:	dd400517 	ldw	r21,20(sp)
  80a904:	dd000417 	ldw	r20,16(sp)
  80a908:	dcc00317 	ldw	r19,12(sp)
  80a90c:	dc800217 	ldw	r18,8(sp)
  80a910:	dc400117 	ldw	r17,4(sp)
  80a914:	dc000017 	ldw	r16,0(sp)
  80a918:	dec00a04 	addi	sp,sp,40
  80a91c:	f800283a 	ret
  80a920:	00bffe04 	movi	r2,-8
  80a924:	18a2703a 	and	r17,r3,r2
  80a928:	883fed16 	blt	r17,zero,80a8e0 <_malloc_r+0x44>
  80a92c:	897fec36 	bltu	r17,r5,80a8e0 <_malloc_r+0x44>
  80a930:	9009883a 	mov	r4,r18
  80a934:	080edcc0 	call	80edcc <__malloc_lock>
  80a938:	00807dc4 	movi	r2,503
  80a93c:	14402b2e 	bgeu	r2,r17,80a9ec <_malloc_r+0x150>
  80a940:	8806d27a 	srli	r3,r17,9
  80a944:	18003f1e 	bne	r3,zero,80aa44 <_malloc_r+0x1a8>
  80a948:	880cd0fa 	srli	r6,r17,3
  80a94c:	300490fa 	slli	r2,r6,3
  80a950:	02c020b4 	movhi	r11,130
  80a954:	5aeae804 	addi	r11,r11,-21600
  80a958:	12cb883a 	add	r5,r2,r11
  80a95c:	2c000317 	ldw	r16,12(r5)
  80a960:	580f883a 	mov	r7,r11
  80a964:	2c00041e 	bne	r5,r16,80a978 <_malloc_r+0xdc>
  80a968:	00000a06 	br	80a994 <_malloc_r+0xf8>
  80a96c:	1800860e 	bge	r3,zero,80ab88 <_malloc_r+0x2ec>
  80a970:	84000317 	ldw	r16,12(r16)
  80a974:	2c000726 	beq	r5,r16,80a994 <_malloc_r+0xf8>
  80a978:	80800117 	ldw	r2,4(r16)
  80a97c:	00ffff04 	movi	r3,-4
  80a980:	10c8703a 	and	r4,r2,r3
  80a984:	2447c83a 	sub	r3,r4,r17
  80a988:	008003c4 	movi	r2,15
  80a98c:	10fff70e 	bge	r2,r3,80a96c <_malloc_r+0xd0>
  80a990:	31bfffc4 	addi	r6,r6,-1
  80a994:	32400044 	addi	r9,r6,1
  80a998:	028020b4 	movhi	r10,130
  80a99c:	52aaea04 	addi	r10,r10,-21592
  80a9a0:	54000217 	ldw	r16,8(r10)
  80a9a4:	8280a026 	beq	r16,r10,80ac28 <_malloc_r+0x38c>
  80a9a8:	80800117 	ldw	r2,4(r16)
  80a9ac:	00ffff04 	movi	r3,-4
  80a9b0:	10ca703a 	and	r5,r2,r3
  80a9b4:	2c4dc83a 	sub	r6,r5,r17
  80a9b8:	008003c4 	movi	r2,15
  80a9bc:	11808316 	blt	r2,r6,80abcc <_malloc_r+0x330>
  80a9c0:	52800315 	stw	r10,12(r10)
  80a9c4:	52800215 	stw	r10,8(r10)
  80a9c8:	30002916 	blt	r6,zero,80aa70 <_malloc_r+0x1d4>
  80a9cc:	8147883a 	add	r3,r16,r5
  80a9d0:	18800117 	ldw	r2,4(r3)
  80a9d4:	9009883a 	mov	r4,r18
  80a9d8:	10800054 	ori	r2,r2,1
  80a9dc:	18800115 	stw	r2,4(r3)
  80a9e0:	080eed40 	call	80eed4 <__malloc_unlock>
  80a9e4:	80c00204 	addi	r3,r16,8
  80a9e8:	003fc006 	br	80a8ec <_malloc_r+0x50>
  80a9ec:	02c020b4 	movhi	r11,130
  80a9f0:	5aeae804 	addi	r11,r11,-21600
  80a9f4:	8ac5883a 	add	r2,r17,r11
  80a9f8:	14000317 	ldw	r16,12(r2)
  80a9fc:	580f883a 	mov	r7,r11
  80aa00:	8806d0fa 	srli	r3,r17,3
  80aa04:	14006c26 	beq	r2,r16,80abb8 <_malloc_r+0x31c>
  80aa08:	80c00117 	ldw	r3,4(r16)
  80aa0c:	00bfff04 	movi	r2,-4
  80aa10:	81800317 	ldw	r6,12(r16)
  80aa14:	1886703a 	and	r3,r3,r2
  80aa18:	80c7883a 	add	r3,r16,r3
  80aa1c:	18800117 	ldw	r2,4(r3)
  80aa20:	81400217 	ldw	r5,8(r16)
  80aa24:	9009883a 	mov	r4,r18
  80aa28:	10800054 	ori	r2,r2,1
  80aa2c:	18800115 	stw	r2,4(r3)
  80aa30:	31400215 	stw	r5,8(r6)
  80aa34:	29800315 	stw	r6,12(r5)
  80aa38:	080eed40 	call	80eed4 <__malloc_unlock>
  80aa3c:	80c00204 	addi	r3,r16,8
  80aa40:	003faa06 	br	80a8ec <_malloc_r+0x50>
  80aa44:	00800104 	movi	r2,4
  80aa48:	10c0052e 	bgeu	r2,r3,80aa60 <_malloc_r+0x1c4>
  80aa4c:	00800504 	movi	r2,20
  80aa50:	10c07836 	bltu	r2,r3,80ac34 <_malloc_r+0x398>
  80aa54:	198016c4 	addi	r6,r3,91
  80aa58:	300490fa 	slli	r2,r6,3
  80aa5c:	003fbc06 	br	80a950 <_malloc_r+0xb4>
  80aa60:	8804d1ba 	srli	r2,r17,6
  80aa64:	11800e04 	addi	r6,r2,56
  80aa68:	300490fa 	slli	r2,r6,3
  80aa6c:	003fb806 	br	80a950 <_malloc_r+0xb4>
  80aa70:	00807fc4 	movi	r2,511
  80aa74:	1140bb36 	bltu	r2,r5,80ad64 <_malloc_r+0x4c8>
  80aa78:	2806d0fa 	srli	r3,r5,3
  80aa7c:	573ffe04 	addi	fp,r10,-8
  80aa80:	00800044 	movi	r2,1
  80aa84:	180890fa 	slli	r4,r3,3
  80aa88:	1807d0ba 	srai	r3,r3,2
  80aa8c:	e1c00117 	ldw	r7,4(fp)
  80aa90:	5909883a 	add	r4,r11,r4
  80aa94:	21400217 	ldw	r5,8(r4)
  80aa98:	10c4983a 	sll	r2,r2,r3
  80aa9c:	81000315 	stw	r4,12(r16)
  80aaa0:	81400215 	stw	r5,8(r16)
  80aaa4:	388eb03a 	or	r7,r7,r2
  80aaa8:	2c000315 	stw	r16,12(r5)
  80aaac:	24000215 	stw	r16,8(r4)
  80aab0:	e1c00115 	stw	r7,4(fp)
  80aab4:	4807883a 	mov	r3,r9
  80aab8:	4800cd16 	blt	r9,zero,80adf0 <_malloc_r+0x554>
  80aabc:	1807d0ba 	srai	r3,r3,2
  80aac0:	00800044 	movi	r2,1
  80aac4:	10c8983a 	sll	r4,r2,r3
  80aac8:	39004436 	bltu	r7,r4,80abdc <_malloc_r+0x340>
  80aacc:	21c4703a 	and	r2,r4,r7
  80aad0:	10000a1e 	bne	r2,zero,80aafc <_malloc_r+0x260>
  80aad4:	2109883a 	add	r4,r4,r4
  80aad8:	00bfff04 	movi	r2,-4
  80aadc:	4884703a 	and	r2,r9,r2
  80aae0:	3906703a 	and	r3,r7,r4
  80aae4:	12400104 	addi	r9,r2,4
  80aae8:	1800041e 	bne	r3,zero,80aafc <_malloc_r+0x260>
  80aaec:	2109883a 	add	r4,r4,r4
  80aaf0:	3904703a 	and	r2,r7,r4
  80aaf4:	4a400104 	addi	r9,r9,4
  80aaf8:	103ffc26 	beq	r2,zero,80aaec <_malloc_r+0x250>
  80aafc:	480490fa 	slli	r2,r9,3
  80ab00:	4819883a 	mov	r12,r9
  80ab04:	023fff04 	movi	r8,-4
  80ab08:	589b883a 	add	r13,r11,r2
  80ab0c:	6807883a 	mov	r3,r13
  80ab10:	014003c4 	movi	r5,15
  80ab14:	1c000317 	ldw	r16,12(r3)
  80ab18:	1c00041e 	bne	r3,r16,80ab2c <_malloc_r+0x290>
  80ab1c:	0000a706 	br	80adbc <_malloc_r+0x520>
  80ab20:	3000ab0e 	bge	r6,zero,80add0 <_malloc_r+0x534>
  80ab24:	84000317 	ldw	r16,12(r16)
  80ab28:	1c00a426 	beq	r3,r16,80adbc <_malloc_r+0x520>
  80ab2c:	80800117 	ldw	r2,4(r16)
  80ab30:	1204703a 	and	r2,r2,r8
  80ab34:	144dc83a 	sub	r6,r2,r17
  80ab38:	29bff90e 	bge	r5,r6,80ab20 <_malloc_r+0x284>
  80ab3c:	81000317 	ldw	r4,12(r16)
  80ab40:	80c00217 	ldw	r3,8(r16)
  80ab44:	89400054 	ori	r5,r17,1
  80ab48:	8445883a 	add	r2,r16,r17
  80ab4c:	20c00215 	stw	r3,8(r4)
  80ab50:	19000315 	stw	r4,12(r3)
  80ab54:	81400115 	stw	r5,4(r16)
  80ab58:	1187883a 	add	r3,r2,r6
  80ab5c:	31000054 	ori	r4,r6,1
  80ab60:	50800315 	stw	r2,12(r10)
  80ab64:	50800215 	stw	r2,8(r10)
  80ab68:	19800015 	stw	r6,0(r3)
  80ab6c:	11000115 	stw	r4,4(r2)
  80ab70:	12800215 	stw	r10,8(r2)
  80ab74:	12800315 	stw	r10,12(r2)
  80ab78:	9009883a 	mov	r4,r18
  80ab7c:	080eed40 	call	80eed4 <__malloc_unlock>
  80ab80:	80c00204 	addi	r3,r16,8
  80ab84:	003f5906 	br	80a8ec <_malloc_r+0x50>
  80ab88:	8109883a 	add	r4,r16,r4
  80ab8c:	20800117 	ldw	r2,4(r4)
  80ab90:	80c00217 	ldw	r3,8(r16)
  80ab94:	81400317 	ldw	r5,12(r16)
  80ab98:	10800054 	ori	r2,r2,1
  80ab9c:	20800115 	stw	r2,4(r4)
  80aba0:	28c00215 	stw	r3,8(r5)
  80aba4:	19400315 	stw	r5,12(r3)
  80aba8:	9009883a 	mov	r4,r18
  80abac:	080eed40 	call	80eed4 <__malloc_unlock>
  80abb0:	80c00204 	addi	r3,r16,8
  80abb4:	003f4d06 	br	80a8ec <_malloc_r+0x50>
  80abb8:	80800204 	addi	r2,r16,8
  80abbc:	14000317 	ldw	r16,12(r2)
  80abc0:	143f911e 	bne	r2,r16,80aa08 <_malloc_r+0x16c>
  80abc4:	1a400084 	addi	r9,r3,2
  80abc8:	003f7306 	br	80a998 <_malloc_r+0xfc>
  80abcc:	88c00054 	ori	r3,r17,1
  80abd0:	8445883a 	add	r2,r16,r17
  80abd4:	80c00115 	stw	r3,4(r16)
  80abd8:	003fdf06 	br	80ab58 <_malloc_r+0x2bc>
  80abdc:	e4000217 	ldw	r16,8(fp)
  80abe0:	00bfff04 	movi	r2,-4
  80abe4:	80c00117 	ldw	r3,4(r16)
  80abe8:	802d883a 	mov	r22,r16
  80abec:	18aa703a 	and	r21,r3,r2
  80abf0:	ac401636 	bltu	r21,r17,80ac4c <_malloc_r+0x3b0>
  80abf4:	ac49c83a 	sub	r4,r21,r17
  80abf8:	008003c4 	movi	r2,15
  80abfc:	1100130e 	bge	r2,r4,80ac4c <_malloc_r+0x3b0>
  80ac00:	88800054 	ori	r2,r17,1
  80ac04:	8447883a 	add	r3,r16,r17
  80ac08:	80800115 	stw	r2,4(r16)
  80ac0c:	20800054 	ori	r2,r4,1
  80ac10:	18800115 	stw	r2,4(r3)
  80ac14:	e0c00215 	stw	r3,8(fp)
  80ac18:	9009883a 	mov	r4,r18
  80ac1c:	080eed40 	call	80eed4 <__malloc_unlock>
  80ac20:	80c00204 	addi	r3,r16,8
  80ac24:	003f3106 	br	80a8ec <_malloc_r+0x50>
  80ac28:	39c00117 	ldw	r7,4(r7)
  80ac2c:	573ffe04 	addi	fp,r10,-8
  80ac30:	003fa006 	br	80aab4 <_malloc_r+0x218>
  80ac34:	00801504 	movi	r2,84
  80ac38:	10c06736 	bltu	r2,r3,80add8 <_malloc_r+0x53c>
  80ac3c:	8804d33a 	srli	r2,r17,12
  80ac40:	11801b84 	addi	r6,r2,110
  80ac44:	300490fa 	slli	r2,r6,3
  80ac48:	003f4106 	br	80a950 <_malloc_r+0xb4>
  80ac4c:	d0a71017 	ldw	r2,-25536(gp)
  80ac50:	d0e00617 	ldw	r3,-32744(gp)
  80ac54:	053fffc4 	movi	r20,-1
  80ac58:	10800404 	addi	r2,r2,16
  80ac5c:	88a7883a 	add	r19,r17,r2
  80ac60:	1d000326 	beq	r3,r20,80ac70 <_malloc_r+0x3d4>
  80ac64:	98c3ffc4 	addi	r3,r19,4095
  80ac68:	00bc0004 	movi	r2,-4096
  80ac6c:	18a6703a 	and	r19,r3,r2
  80ac70:	9009883a 	mov	r4,r18
  80ac74:	980b883a 	mov	r5,r19
  80ac78:	080c9980 	call	80c998 <_sbrk_r>
  80ac7c:	1009883a 	mov	r4,r2
  80ac80:	15000426 	beq	r2,r20,80ac94 <_malloc_r+0x3f8>
  80ac84:	854b883a 	add	r5,r16,r21
  80ac88:	1029883a 	mov	r20,r2
  80ac8c:	11405a2e 	bgeu	r2,r5,80adf8 <_malloc_r+0x55c>
  80ac90:	87000c26 	beq	r16,fp,80acc4 <_malloc_r+0x428>
  80ac94:	e4000217 	ldw	r16,8(fp)
  80ac98:	80c00117 	ldw	r3,4(r16)
  80ac9c:	00bfff04 	movi	r2,-4
  80aca0:	1884703a 	and	r2,r3,r2
  80aca4:	14400336 	bltu	r2,r17,80acb4 <_malloc_r+0x418>
  80aca8:	1449c83a 	sub	r4,r2,r17
  80acac:	008003c4 	movi	r2,15
  80acb0:	113fd316 	blt	r2,r4,80ac00 <_malloc_r+0x364>
  80acb4:	9009883a 	mov	r4,r18
  80acb8:	080eed40 	call	80eed4 <__malloc_unlock>
  80acbc:	0007883a 	mov	r3,zero
  80acc0:	003f0a06 	br	80a8ec <_malloc_r+0x50>
  80acc4:	05c020b4 	movhi	r23,130
  80acc8:	bdf7c504 	addi	r23,r23,-8428
  80accc:	b8800017 	ldw	r2,0(r23)
  80acd0:	988d883a 	add	r6,r19,r2
  80acd4:	b9800015 	stw	r6,0(r23)
  80acd8:	d0e00617 	ldw	r3,-32744(gp)
  80acdc:	00bfffc4 	movi	r2,-1
  80ace0:	18808e26 	beq	r3,r2,80af1c <_malloc_r+0x680>
  80ace4:	2145c83a 	sub	r2,r4,r5
  80ace8:	3085883a 	add	r2,r6,r2
  80acec:	b8800015 	stw	r2,0(r23)
  80acf0:	20c001cc 	andi	r3,r4,7
  80acf4:	18005f1e 	bne	r3,zero,80ae74 <_malloc_r+0x5d8>
  80acf8:	000b883a 	mov	r5,zero
  80acfc:	a4c5883a 	add	r2,r20,r19
  80ad00:	1083ffcc 	andi	r2,r2,4095
  80ad04:	00c40004 	movi	r3,4096
  80ad08:	1887c83a 	sub	r3,r3,r2
  80ad0c:	28e7883a 	add	r19,r5,r3
  80ad10:	9009883a 	mov	r4,r18
  80ad14:	980b883a 	mov	r5,r19
  80ad18:	080c9980 	call	80c998 <_sbrk_r>
  80ad1c:	1007883a 	mov	r3,r2
  80ad20:	00bfffc4 	movi	r2,-1
  80ad24:	18807a26 	beq	r3,r2,80af10 <_malloc_r+0x674>
  80ad28:	1d05c83a 	sub	r2,r3,r20
  80ad2c:	9885883a 	add	r2,r19,r2
  80ad30:	10c00054 	ori	r3,r2,1
  80ad34:	b8800017 	ldw	r2,0(r23)
  80ad38:	a021883a 	mov	r16,r20
  80ad3c:	a0c00115 	stw	r3,4(r20)
  80ad40:	9885883a 	add	r2,r19,r2
  80ad44:	b8800015 	stw	r2,0(r23)
  80ad48:	e5000215 	stw	r20,8(fp)
  80ad4c:	b7003626 	beq	r22,fp,80ae28 <_malloc_r+0x58c>
  80ad50:	018003c4 	movi	r6,15
  80ad54:	35404b36 	bltu	r6,r21,80ae84 <_malloc_r+0x5e8>
  80ad58:	00800044 	movi	r2,1
  80ad5c:	a0800115 	stw	r2,4(r20)
  80ad60:	003fcd06 	br	80ac98 <_malloc_r+0x3fc>
  80ad64:	2808d27a 	srli	r4,r5,9
  80ad68:	2000371e 	bne	r4,zero,80ae48 <_malloc_r+0x5ac>
  80ad6c:	2808d0fa 	srli	r4,r5,3
  80ad70:	200690fa 	slli	r3,r4,3
  80ad74:	1ad1883a 	add	r8,r3,r11
  80ad78:	41800217 	ldw	r6,8(r8)
  80ad7c:	41805b26 	beq	r8,r6,80aeec <_malloc_r+0x650>
  80ad80:	30800117 	ldw	r2,4(r6)
  80ad84:	00ffff04 	movi	r3,-4
  80ad88:	10c4703a 	and	r2,r2,r3
  80ad8c:	2880022e 	bgeu	r5,r2,80ad98 <_malloc_r+0x4fc>
  80ad90:	31800217 	ldw	r6,8(r6)
  80ad94:	41bffa1e 	bne	r8,r6,80ad80 <_malloc_r+0x4e4>
  80ad98:	32000317 	ldw	r8,12(r6)
  80ad9c:	39c00117 	ldw	r7,4(r7)
  80ada0:	82000315 	stw	r8,12(r16)
  80ada4:	81800215 	stw	r6,8(r16)
  80ada8:	070020b4 	movhi	fp,130
  80adac:	e72ae804 	addi	fp,fp,-21600
  80adb0:	34000315 	stw	r16,12(r6)
  80adb4:	44000215 	stw	r16,8(r8)
  80adb8:	003f3e06 	br	80aab4 <_malloc_r+0x218>
  80adbc:	63000044 	addi	r12,r12,1
  80adc0:	608000cc 	andi	r2,r12,3
  80adc4:	10005d26 	beq	r2,zero,80af3c <_malloc_r+0x6a0>
  80adc8:	18c00204 	addi	r3,r3,8
  80adcc:	003f5106 	br	80ab14 <_malloc_r+0x278>
  80add0:	8089883a 	add	r4,r16,r2
  80add4:	003f6d06 	br	80ab8c <_malloc_r+0x2f0>
  80add8:	00805504 	movi	r2,340
  80addc:	10c02036 	bltu	r2,r3,80ae60 <_malloc_r+0x5c4>
  80ade0:	8804d3fa 	srli	r2,r17,15
  80ade4:	11801dc4 	addi	r6,r2,119
  80ade8:	300490fa 	slli	r2,r6,3
  80adec:	003ed806 	br	80a950 <_malloc_r+0xb4>
  80adf0:	48c000c4 	addi	r3,r9,3
  80adf4:	003f3106 	br	80aabc <_malloc_r+0x220>
  80adf8:	05c020b4 	movhi	r23,130
  80adfc:	bdf7c504 	addi	r23,r23,-8428
  80ae00:	b8800017 	ldw	r2,0(r23)
  80ae04:	988d883a 	add	r6,r19,r2
  80ae08:	b9800015 	stw	r6,0(r23)
  80ae0c:	293fb21e 	bne	r5,r4,80acd8 <_malloc_r+0x43c>
  80ae10:	2083ffcc 	andi	r2,r4,4095
  80ae14:	103fb01e 	bne	r2,zero,80acd8 <_malloc_r+0x43c>
  80ae18:	e4000217 	ldw	r16,8(fp)
  80ae1c:	9d45883a 	add	r2,r19,r21
  80ae20:	10800054 	ori	r2,r2,1
  80ae24:	80800115 	stw	r2,4(r16)
  80ae28:	b8c00017 	ldw	r3,0(r23)
  80ae2c:	d0a71117 	ldw	r2,-25532(gp)
  80ae30:	10c0012e 	bgeu	r2,r3,80ae38 <_malloc_r+0x59c>
  80ae34:	d0e71115 	stw	r3,-25532(gp)
  80ae38:	d0a71217 	ldw	r2,-25528(gp)
  80ae3c:	10ff962e 	bgeu	r2,r3,80ac98 <_malloc_r+0x3fc>
  80ae40:	d0e71215 	stw	r3,-25528(gp)
  80ae44:	003f9406 	br	80ac98 <_malloc_r+0x3fc>
  80ae48:	00800104 	movi	r2,4
  80ae4c:	11001e36 	bltu	r2,r4,80aec8 <_malloc_r+0x62c>
  80ae50:	2804d1ba 	srli	r2,r5,6
  80ae54:	11000e04 	addi	r4,r2,56
  80ae58:	200690fa 	slli	r3,r4,3
  80ae5c:	003fc506 	br	80ad74 <_malloc_r+0x4d8>
  80ae60:	00815504 	movi	r2,1364
  80ae64:	10c01d2e 	bgeu	r2,r3,80aedc <_malloc_r+0x640>
  80ae68:	01801f84 	movi	r6,126
  80ae6c:	0080fc04 	movi	r2,1008
  80ae70:	003eb706 	br	80a950 <_malloc_r+0xb4>
  80ae74:	00800204 	movi	r2,8
  80ae78:	10cbc83a 	sub	r5,r2,r3
  80ae7c:	2169883a 	add	r20,r4,r5
  80ae80:	003f9e06 	br	80acfc <_malloc_r+0x460>
  80ae84:	00bffe04 	movi	r2,-8
  80ae88:	a93ffd04 	addi	r4,r21,-12
  80ae8c:	2088703a 	and	r4,r4,r2
  80ae90:	b10b883a 	add	r5,r22,r4
  80ae94:	00c00144 	movi	r3,5
  80ae98:	28c00215 	stw	r3,8(r5)
  80ae9c:	28c00115 	stw	r3,4(r5)
  80aea0:	b0800117 	ldw	r2,4(r22)
  80aea4:	1080004c 	andi	r2,r2,1
  80aea8:	2084b03a 	or	r2,r4,r2
  80aeac:	b0800115 	stw	r2,4(r22)
  80aeb0:	313fdd2e 	bgeu	r6,r4,80ae28 <_malloc_r+0x58c>
  80aeb4:	b1400204 	addi	r5,r22,8
  80aeb8:	9009883a 	mov	r4,r18
  80aebc:	0809d140 	call	809d14 <_free_r>
  80aec0:	e4000217 	ldw	r16,8(fp)
  80aec4:	003fd806 	br	80ae28 <_malloc_r+0x58c>
  80aec8:	00800504 	movi	r2,20
  80aecc:	11001536 	bltu	r2,r4,80af24 <_malloc_r+0x688>
  80aed0:	210016c4 	addi	r4,r4,91
  80aed4:	200690fa 	slli	r3,r4,3
  80aed8:	003fa606 	br	80ad74 <_malloc_r+0x4d8>
  80aedc:	8804d4ba 	srli	r2,r17,18
  80aee0:	11801f04 	addi	r6,r2,124
  80aee4:	300490fa 	slli	r2,r6,3
  80aee8:	003e9906 	br	80a950 <_malloc_r+0xb4>
  80aeec:	2009d0ba 	srai	r4,r4,2
  80aef0:	014020b4 	movhi	r5,130
  80aef4:	296ae804 	addi	r5,r5,-21600
  80aef8:	00c00044 	movi	r3,1
  80aefc:	28800117 	ldw	r2,4(r5)
  80af00:	1906983a 	sll	r3,r3,r4
  80af04:	10c4b03a 	or	r2,r2,r3
  80af08:	28800115 	stw	r2,4(r5)
  80af0c:	003fa306 	br	80ad9c <_malloc_r+0x500>
  80af10:	0027883a 	mov	r19,zero
  80af14:	00c00044 	movi	r3,1
  80af18:	003f8606 	br	80ad34 <_malloc_r+0x498>
  80af1c:	d1200615 	stw	r4,-32744(gp)
  80af20:	003f7306 	br	80acf0 <_malloc_r+0x454>
  80af24:	00801504 	movi	r2,84
  80af28:	11001936 	bltu	r2,r4,80af90 <_malloc_r+0x6f4>
  80af2c:	2804d33a 	srli	r2,r5,12
  80af30:	11001b84 	addi	r4,r2,110
  80af34:	200690fa 	slli	r3,r4,3
  80af38:	003f8e06 	br	80ad74 <_malloc_r+0x4d8>
  80af3c:	480b883a 	mov	r5,r9
  80af40:	6807883a 	mov	r3,r13
  80af44:	288000cc 	andi	r2,r5,3
  80af48:	18fffe04 	addi	r3,r3,-8
  80af4c:	297fffc4 	addi	r5,r5,-1
  80af50:	10001526 	beq	r2,zero,80afa8 <_malloc_r+0x70c>
  80af54:	18800217 	ldw	r2,8(r3)
  80af58:	10fffa26 	beq	r2,r3,80af44 <_malloc_r+0x6a8>
  80af5c:	2109883a 	add	r4,r4,r4
  80af60:	393f1e36 	bltu	r7,r4,80abdc <_malloc_r+0x340>
  80af64:	203f1d26 	beq	r4,zero,80abdc <_malloc_r+0x340>
  80af68:	21c4703a 	and	r2,r4,r7
  80af6c:	10000226 	beq	r2,zero,80af78 <_malloc_r+0x6dc>
  80af70:	6013883a 	mov	r9,r12
  80af74:	003ee106 	br	80aafc <_malloc_r+0x260>
  80af78:	2109883a 	add	r4,r4,r4
  80af7c:	3904703a 	and	r2,r7,r4
  80af80:	63000104 	addi	r12,r12,4
  80af84:	103ffc26 	beq	r2,zero,80af78 <_malloc_r+0x6dc>
  80af88:	6013883a 	mov	r9,r12
  80af8c:	003edb06 	br	80aafc <_malloc_r+0x260>
  80af90:	00805504 	movi	r2,340
  80af94:	11000836 	bltu	r2,r4,80afb8 <_malloc_r+0x71c>
  80af98:	2804d3fa 	srli	r2,r5,15
  80af9c:	11001dc4 	addi	r4,r2,119
  80afa0:	200690fa 	slli	r3,r4,3
  80afa4:	003f7306 	br	80ad74 <_malloc_r+0x4d8>
  80afa8:	0104303a 	nor	r2,zero,r4
  80afac:	388e703a 	and	r7,r7,r2
  80afb0:	e1c00115 	stw	r7,4(fp)
  80afb4:	003fe906 	br	80af5c <_malloc_r+0x6c0>
  80afb8:	00815504 	movi	r2,1364
  80afbc:	1100032e 	bgeu	r2,r4,80afcc <_malloc_r+0x730>
  80afc0:	01001f84 	movi	r4,126
  80afc4:	00c0fc04 	movi	r3,1008
  80afc8:	003f6a06 	br	80ad74 <_malloc_r+0x4d8>
  80afcc:	2804d4ba 	srli	r2,r5,18
  80afd0:	11001f04 	addi	r4,r2,124
  80afd4:	200690fa 	slli	r3,r4,3
  80afd8:	003f6606 	br	80ad74 <_malloc_r+0x4d8>

0080afdc <memchr>:
  80afdc:	008000c4 	movi	r2,3
  80afe0:	29403fcc 	andi	r5,r5,255
  80afe4:	2007883a 	mov	r3,r4
  80afe8:	1180022e 	bgeu	r2,r6,80aff4 <memchr+0x18>
  80afec:	2084703a 	and	r2,r4,r2
  80aff0:	10000b26 	beq	r2,zero,80b020 <memchr+0x44>
  80aff4:	313fffc4 	addi	r4,r6,-1
  80aff8:	3000051e 	bne	r6,zero,80b010 <memchr+0x34>
  80affc:	00002c06 	br	80b0b0 <memchr+0xd4>
  80b000:	213fffc4 	addi	r4,r4,-1
  80b004:	00bfffc4 	movi	r2,-1
  80b008:	18c00044 	addi	r3,r3,1
  80b00c:	20802826 	beq	r4,r2,80b0b0 <memchr+0xd4>
  80b010:	18800003 	ldbu	r2,0(r3)
  80b014:	28bffa1e 	bne	r5,r2,80b000 <memchr+0x24>
  80b018:	1805883a 	mov	r2,r3
  80b01c:	f800283a 	ret
  80b020:	0011883a 	mov	r8,zero
  80b024:	0007883a 	mov	r3,zero
  80b028:	01c00104 	movi	r7,4
  80b02c:	4004923a 	slli	r2,r8,8
  80b030:	18c00044 	addi	r3,r3,1
  80b034:	1151883a 	add	r8,r2,r5
  80b038:	19fffc1e 	bne	r3,r7,80b02c <memchr+0x50>
  80b03c:	02bfbff4 	movhi	r10,65279
  80b040:	52bfbfc4 	addi	r10,r10,-257
  80b044:	02602074 	movhi	r9,32897
  80b048:	4a602004 	addi	r9,r9,-32640
  80b04c:	02c000c4 	movi	r11,3
  80b050:	20800017 	ldw	r2,0(r4)
  80b054:	31bfff04 	addi	r6,r6,-4
  80b058:	200f883a 	mov	r7,r4
  80b05c:	1204f03a 	xor	r2,r2,r8
  80b060:	1287883a 	add	r3,r2,r10
  80b064:	1a46703a 	and	r3,r3,r9
  80b068:	0084303a 	nor	r2,zero,r2
  80b06c:	10c4703a 	and	r2,r2,r3
  80b070:	10000b26 	beq	r2,zero,80b0a0 <memchr+0xc4>
  80b074:	20800003 	ldbu	r2,0(r4)
  80b078:	28800f26 	beq	r5,r2,80b0b8 <memchr+0xdc>
  80b07c:	20800043 	ldbu	r2,1(r4)
  80b080:	21c00044 	addi	r7,r4,1
  80b084:	28800c26 	beq	r5,r2,80b0b8 <memchr+0xdc>
  80b088:	20800083 	ldbu	r2,2(r4)
  80b08c:	21c00084 	addi	r7,r4,2
  80b090:	28800926 	beq	r5,r2,80b0b8 <memchr+0xdc>
  80b094:	208000c3 	ldbu	r2,3(r4)
  80b098:	21c000c4 	addi	r7,r4,3
  80b09c:	28800626 	beq	r5,r2,80b0b8 <memchr+0xdc>
  80b0a0:	21000104 	addi	r4,r4,4
  80b0a4:	59bfea36 	bltu	r11,r6,80b050 <memchr+0x74>
  80b0a8:	2007883a 	mov	r3,r4
  80b0ac:	003fd106 	br	80aff4 <memchr+0x18>
  80b0b0:	0005883a 	mov	r2,zero
  80b0b4:	f800283a 	ret
  80b0b8:	3805883a 	mov	r2,r7
  80b0bc:	f800283a 	ret

0080b0c0 <memcpy>:
  80b0c0:	01c003c4 	movi	r7,15
  80b0c4:	2007883a 	mov	r3,r4
  80b0c8:	3980032e 	bgeu	r7,r6,80b0d8 <memcpy+0x18>
  80b0cc:	2904b03a 	or	r2,r5,r4
  80b0d0:	108000cc 	andi	r2,r2,3
  80b0d4:	10000926 	beq	r2,zero,80b0fc <memcpy+0x3c>
  80b0d8:	30000626 	beq	r6,zero,80b0f4 <memcpy+0x34>
  80b0dc:	30cd883a 	add	r6,r6,r3
  80b0e0:	28800003 	ldbu	r2,0(r5)
  80b0e4:	29400044 	addi	r5,r5,1
  80b0e8:	18800005 	stb	r2,0(r3)
  80b0ec:	18c00044 	addi	r3,r3,1
  80b0f0:	30fffb1e 	bne	r6,r3,80b0e0 <memcpy+0x20>
  80b0f4:	2005883a 	mov	r2,r4
  80b0f8:	f800283a 	ret
  80b0fc:	3811883a 	mov	r8,r7
  80b100:	200f883a 	mov	r7,r4
  80b104:	28c00017 	ldw	r3,0(r5)
  80b108:	31bffc04 	addi	r6,r6,-16
  80b10c:	38c00015 	stw	r3,0(r7)
  80b110:	28800117 	ldw	r2,4(r5)
  80b114:	38800115 	stw	r2,4(r7)
  80b118:	28c00217 	ldw	r3,8(r5)
  80b11c:	38c00215 	stw	r3,8(r7)
  80b120:	28800317 	ldw	r2,12(r5)
  80b124:	29400404 	addi	r5,r5,16
  80b128:	38800315 	stw	r2,12(r7)
  80b12c:	39c00404 	addi	r7,r7,16
  80b130:	41bff436 	bltu	r8,r6,80b104 <memcpy+0x44>
  80b134:	008000c4 	movi	r2,3
  80b138:	1180072e 	bgeu	r2,r6,80b158 <memcpy+0x98>
  80b13c:	1007883a 	mov	r3,r2
  80b140:	28800017 	ldw	r2,0(r5)
  80b144:	31bfff04 	addi	r6,r6,-4
  80b148:	29400104 	addi	r5,r5,4
  80b14c:	38800015 	stw	r2,0(r7)
  80b150:	39c00104 	addi	r7,r7,4
  80b154:	19bffa36 	bltu	r3,r6,80b140 <memcpy+0x80>
  80b158:	3807883a 	mov	r3,r7
  80b15c:	003fde06 	br	80b0d8 <memcpy+0x18>

0080b160 <memmove>:
  80b160:	2807883a 	mov	r3,r5
  80b164:	2011883a 	mov	r8,r4
  80b168:	29000c2e 	bgeu	r5,r4,80b19c <memmove+0x3c>
  80b16c:	298f883a 	add	r7,r5,r6
  80b170:	21c00a2e 	bgeu	r4,r7,80b19c <memmove+0x3c>
  80b174:	30000726 	beq	r6,zero,80b194 <memmove+0x34>
  80b178:	2187883a 	add	r3,r4,r6
  80b17c:	198dc83a 	sub	r6,r3,r6
  80b180:	39ffffc4 	addi	r7,r7,-1
  80b184:	38800003 	ldbu	r2,0(r7)
  80b188:	18ffffc4 	addi	r3,r3,-1
  80b18c:	18800005 	stb	r2,0(r3)
  80b190:	19bffb1e 	bne	r3,r6,80b180 <memmove+0x20>
  80b194:	2005883a 	mov	r2,r4
  80b198:	f800283a 	ret
  80b19c:	01c003c4 	movi	r7,15
  80b1a0:	39800a36 	bltu	r7,r6,80b1cc <memmove+0x6c>
  80b1a4:	303ffb26 	beq	r6,zero,80b194 <memmove+0x34>
  80b1a8:	400f883a 	mov	r7,r8
  80b1ac:	320d883a 	add	r6,r6,r8
  80b1b0:	28800003 	ldbu	r2,0(r5)
  80b1b4:	29400044 	addi	r5,r5,1
  80b1b8:	38800005 	stb	r2,0(r7)
  80b1bc:	39c00044 	addi	r7,r7,1
  80b1c0:	39bffb1e 	bne	r7,r6,80b1b0 <memmove+0x50>
  80b1c4:	2005883a 	mov	r2,r4
  80b1c8:	f800283a 	ret
  80b1cc:	1904b03a 	or	r2,r3,r4
  80b1d0:	108000cc 	andi	r2,r2,3
  80b1d4:	103ff31e 	bne	r2,zero,80b1a4 <memmove+0x44>
  80b1d8:	3811883a 	mov	r8,r7
  80b1dc:	180b883a 	mov	r5,r3
  80b1e0:	200f883a 	mov	r7,r4
  80b1e4:	28c00017 	ldw	r3,0(r5)
  80b1e8:	31bffc04 	addi	r6,r6,-16
  80b1ec:	38c00015 	stw	r3,0(r7)
  80b1f0:	28800117 	ldw	r2,4(r5)
  80b1f4:	38800115 	stw	r2,4(r7)
  80b1f8:	28c00217 	ldw	r3,8(r5)
  80b1fc:	38c00215 	stw	r3,8(r7)
  80b200:	28800317 	ldw	r2,12(r5)
  80b204:	29400404 	addi	r5,r5,16
  80b208:	38800315 	stw	r2,12(r7)
  80b20c:	39c00404 	addi	r7,r7,16
  80b210:	41bff436 	bltu	r8,r6,80b1e4 <memmove+0x84>
  80b214:	008000c4 	movi	r2,3
  80b218:	1180072e 	bgeu	r2,r6,80b238 <memmove+0xd8>
  80b21c:	1007883a 	mov	r3,r2
  80b220:	28800017 	ldw	r2,0(r5)
  80b224:	31bfff04 	addi	r6,r6,-4
  80b228:	29400104 	addi	r5,r5,4
  80b22c:	38800015 	stw	r2,0(r7)
  80b230:	39c00104 	addi	r7,r7,4
  80b234:	19bffa36 	bltu	r3,r6,80b220 <memmove+0xc0>
  80b238:	3811883a 	mov	r8,r7
  80b23c:	003fd906 	br	80b1a4 <memmove+0x44>

0080b240 <memset>:
  80b240:	008000c4 	movi	r2,3
  80b244:	29403fcc 	andi	r5,r5,255
  80b248:	2007883a 	mov	r3,r4
  80b24c:	1180022e 	bgeu	r2,r6,80b258 <memset+0x18>
  80b250:	2084703a 	and	r2,r4,r2
  80b254:	10000826 	beq	r2,zero,80b278 <memset+0x38>
  80b258:	30000526 	beq	r6,zero,80b270 <memset+0x30>
  80b25c:	2805883a 	mov	r2,r5
  80b260:	30cd883a 	add	r6,r6,r3
  80b264:	18800005 	stb	r2,0(r3)
  80b268:	18c00044 	addi	r3,r3,1
  80b26c:	19bffd1e 	bne	r3,r6,80b264 <memset+0x24>
  80b270:	2005883a 	mov	r2,r4
  80b274:	f800283a 	ret
  80b278:	2804923a 	slli	r2,r5,8
  80b27c:	020003c4 	movi	r8,15
  80b280:	200f883a 	mov	r7,r4
  80b284:	2884b03a 	or	r2,r5,r2
  80b288:	1006943a 	slli	r3,r2,16
  80b28c:	10c6b03a 	or	r3,r2,r3
  80b290:	41800a2e 	bgeu	r8,r6,80b2bc <memset+0x7c>
  80b294:	4005883a 	mov	r2,r8
  80b298:	31bffc04 	addi	r6,r6,-16
  80b29c:	38c00015 	stw	r3,0(r7)
  80b2a0:	38c00115 	stw	r3,4(r7)
  80b2a4:	38c00215 	stw	r3,8(r7)
  80b2a8:	38c00315 	stw	r3,12(r7)
  80b2ac:	39c00404 	addi	r7,r7,16
  80b2b0:	11bff936 	bltu	r2,r6,80b298 <memset+0x58>
  80b2b4:	008000c4 	movi	r2,3
  80b2b8:	1180052e 	bgeu	r2,r6,80b2d0 <memset+0x90>
  80b2bc:	31bfff04 	addi	r6,r6,-4
  80b2c0:	008000c4 	movi	r2,3
  80b2c4:	38c00015 	stw	r3,0(r7)
  80b2c8:	39c00104 	addi	r7,r7,4
  80b2cc:	11bffb36 	bltu	r2,r6,80b2bc <memset+0x7c>
  80b2d0:	3807883a 	mov	r3,r7
  80b2d4:	003fe006 	br	80b258 <memset+0x18>

0080b2d8 <_Bfree>:
  80b2d8:	28000826 	beq	r5,zero,80b2fc <_Bfree+0x24>
  80b2dc:	28800117 	ldw	r2,4(r5)
  80b2e0:	21001317 	ldw	r4,76(r4)
  80b2e4:	1085883a 	add	r2,r2,r2
  80b2e8:	1085883a 	add	r2,r2,r2
  80b2ec:	1105883a 	add	r2,r2,r4
  80b2f0:	10c00017 	ldw	r3,0(r2)
  80b2f4:	28c00015 	stw	r3,0(r5)
  80b2f8:	11400015 	stw	r5,0(r2)
  80b2fc:	f800283a 	ret

0080b300 <__hi0bits>:
  80b300:	20bfffec 	andhi	r2,r4,65535
  80b304:	10001426 	beq	r2,zero,80b358 <__hi0bits+0x58>
  80b308:	0007883a 	mov	r3,zero
  80b30c:	20bfc02c 	andhi	r2,r4,65280
  80b310:	1000021e 	bne	r2,zero,80b31c <__hi0bits+0x1c>
  80b314:	2008923a 	slli	r4,r4,8
  80b318:	18c00204 	addi	r3,r3,8
  80b31c:	20bc002c 	andhi	r2,r4,61440
  80b320:	1000021e 	bne	r2,zero,80b32c <__hi0bits+0x2c>
  80b324:	2008913a 	slli	r4,r4,4
  80b328:	18c00104 	addi	r3,r3,4
  80b32c:	20b0002c 	andhi	r2,r4,49152
  80b330:	1000031e 	bne	r2,zero,80b340 <__hi0bits+0x40>
  80b334:	2105883a 	add	r2,r4,r4
  80b338:	18c00084 	addi	r3,r3,2
  80b33c:	1089883a 	add	r4,r2,r2
  80b340:	20000316 	blt	r4,zero,80b350 <__hi0bits+0x50>
  80b344:	2090002c 	andhi	r2,r4,16384
  80b348:	10000626 	beq	r2,zero,80b364 <__hi0bits+0x64>
  80b34c:	18c00044 	addi	r3,r3,1
  80b350:	1805883a 	mov	r2,r3
  80b354:	f800283a 	ret
  80b358:	2008943a 	slli	r4,r4,16
  80b35c:	00c00404 	movi	r3,16
  80b360:	003fea06 	br	80b30c <__hi0bits+0xc>
  80b364:	00c00804 	movi	r3,32
  80b368:	1805883a 	mov	r2,r3
  80b36c:	f800283a 	ret

0080b370 <__lo0bits>:
  80b370:	20c00017 	ldw	r3,0(r4)
  80b374:	188001cc 	andi	r2,r3,7
  80b378:	10000a26 	beq	r2,zero,80b3a4 <__lo0bits+0x34>
  80b37c:	1880004c 	andi	r2,r3,1
  80b380:	1005003a 	cmpeq	r2,r2,zero
  80b384:	10002126 	beq	r2,zero,80b40c <__lo0bits+0x9c>
  80b388:	1880008c 	andi	r2,r3,2
  80b38c:	1000251e 	bne	r2,zero,80b424 <__lo0bits+0xb4>
  80b390:	1804d0ba 	srli	r2,r3,2
  80b394:	01400084 	movi	r5,2
  80b398:	20800015 	stw	r2,0(r4)
  80b39c:	2805883a 	mov	r2,r5
  80b3a0:	f800283a 	ret
  80b3a4:	18bfffcc 	andi	r2,r3,65535
  80b3a8:	10001526 	beq	r2,zero,80b400 <__lo0bits+0x90>
  80b3ac:	000b883a 	mov	r5,zero
  80b3b0:	18803fcc 	andi	r2,r3,255
  80b3b4:	1000021e 	bne	r2,zero,80b3c0 <__lo0bits+0x50>
  80b3b8:	1806d23a 	srli	r3,r3,8
  80b3bc:	29400204 	addi	r5,r5,8
  80b3c0:	188003cc 	andi	r2,r3,15
  80b3c4:	1000021e 	bne	r2,zero,80b3d0 <__lo0bits+0x60>
  80b3c8:	1806d13a 	srli	r3,r3,4
  80b3cc:	29400104 	addi	r5,r5,4
  80b3d0:	188000cc 	andi	r2,r3,3
  80b3d4:	1000021e 	bne	r2,zero,80b3e0 <__lo0bits+0x70>
  80b3d8:	1806d0ba 	srli	r3,r3,2
  80b3dc:	29400084 	addi	r5,r5,2
  80b3e0:	1880004c 	andi	r2,r3,1
  80b3e4:	1000031e 	bne	r2,zero,80b3f4 <__lo0bits+0x84>
  80b3e8:	1806d07a 	srli	r3,r3,1
  80b3ec:	18000a26 	beq	r3,zero,80b418 <__lo0bits+0xa8>
  80b3f0:	29400044 	addi	r5,r5,1
  80b3f4:	2805883a 	mov	r2,r5
  80b3f8:	20c00015 	stw	r3,0(r4)
  80b3fc:	f800283a 	ret
  80b400:	1806d43a 	srli	r3,r3,16
  80b404:	01400404 	movi	r5,16
  80b408:	003fe906 	br	80b3b0 <__lo0bits+0x40>
  80b40c:	000b883a 	mov	r5,zero
  80b410:	2805883a 	mov	r2,r5
  80b414:	f800283a 	ret
  80b418:	01400804 	movi	r5,32
  80b41c:	2805883a 	mov	r2,r5
  80b420:	f800283a 	ret
  80b424:	1804d07a 	srli	r2,r3,1
  80b428:	01400044 	movi	r5,1
  80b42c:	20800015 	stw	r2,0(r4)
  80b430:	003fda06 	br	80b39c <__lo0bits+0x2c>

0080b434 <__mcmp>:
  80b434:	20800417 	ldw	r2,16(r4)
  80b438:	28c00417 	ldw	r3,16(r5)
  80b43c:	10cfc83a 	sub	r7,r2,r3
  80b440:	38000c1e 	bne	r7,zero,80b474 <__mcmp+0x40>
  80b444:	18c5883a 	add	r2,r3,r3
  80b448:	1085883a 	add	r2,r2,r2
  80b44c:	10c00504 	addi	r3,r2,20
  80b450:	21000504 	addi	r4,r4,20
  80b454:	28cb883a 	add	r5,r5,r3
  80b458:	2085883a 	add	r2,r4,r2
  80b45c:	10bfff04 	addi	r2,r2,-4
  80b460:	297fff04 	addi	r5,r5,-4
  80b464:	11800017 	ldw	r6,0(r2)
  80b468:	28c00017 	ldw	r3,0(r5)
  80b46c:	30c0031e 	bne	r6,r3,80b47c <__mcmp+0x48>
  80b470:	20bffa36 	bltu	r4,r2,80b45c <__mcmp+0x28>
  80b474:	3805883a 	mov	r2,r7
  80b478:	f800283a 	ret
  80b47c:	30c00336 	bltu	r6,r3,80b48c <__mcmp+0x58>
  80b480:	01c00044 	movi	r7,1
  80b484:	3805883a 	mov	r2,r7
  80b488:	f800283a 	ret
  80b48c:	01ffffc4 	movi	r7,-1
  80b490:	003ff806 	br	80b474 <__mcmp+0x40>

0080b494 <__ulp>:
  80b494:	295ffc2c 	andhi	r5,r5,32752
  80b498:	013f3034 	movhi	r4,64704
  80b49c:	290b883a 	add	r5,r5,r4
  80b4a0:	0145c83a 	sub	r2,zero,r5
  80b4a4:	1007d53a 	srai	r3,r2,20
  80b4a8:	000d883a 	mov	r6,zero
  80b4ac:	0140040e 	bge	zero,r5,80b4c0 <__ulp+0x2c>
  80b4b0:	280f883a 	mov	r7,r5
  80b4b4:	3807883a 	mov	r3,r7
  80b4b8:	3005883a 	mov	r2,r6
  80b4bc:	f800283a 	ret
  80b4c0:	008004c4 	movi	r2,19
  80b4c4:	193ffb04 	addi	r4,r3,-20
  80b4c8:	10c00c0e 	bge	r2,r3,80b4fc <__ulp+0x68>
  80b4cc:	008007c4 	movi	r2,31
  80b4d0:	1107c83a 	sub	r3,r2,r4
  80b4d4:	00800784 	movi	r2,30
  80b4d8:	01400044 	movi	r5,1
  80b4dc:	11000216 	blt	r2,r4,80b4e8 <__ulp+0x54>
  80b4e0:	00800044 	movi	r2,1
  80b4e4:	10ca983a 	sll	r5,r2,r3
  80b4e8:	000f883a 	mov	r7,zero
  80b4ec:	280d883a 	mov	r6,r5
  80b4f0:	3807883a 	mov	r3,r7
  80b4f4:	3005883a 	mov	r2,r6
  80b4f8:	f800283a 	ret
  80b4fc:	00800234 	movhi	r2,8
  80b500:	10cfd83a 	sra	r7,r2,r3
  80b504:	000d883a 	mov	r6,zero
  80b508:	3005883a 	mov	r2,r6
  80b50c:	3807883a 	mov	r3,r7
  80b510:	f800283a 	ret

0080b514 <__b2d>:
  80b514:	20800417 	ldw	r2,16(r4)
  80b518:	defff904 	addi	sp,sp,-28
  80b51c:	dd000415 	stw	r20,16(sp)
  80b520:	1085883a 	add	r2,r2,r2
  80b524:	25000504 	addi	r20,r4,20
  80b528:	1085883a 	add	r2,r2,r2
  80b52c:	dc000015 	stw	r16,0(sp)
  80b530:	a0a1883a 	add	r16,r20,r2
  80b534:	dd400515 	stw	r21,20(sp)
  80b538:	857fff17 	ldw	r21,-4(r16)
  80b53c:	dc400115 	stw	r17,4(sp)
  80b540:	dfc00615 	stw	ra,24(sp)
  80b544:	a809883a 	mov	r4,r21
  80b548:	2823883a 	mov	r17,r5
  80b54c:	dcc00315 	stw	r19,12(sp)
  80b550:	dc800215 	stw	r18,8(sp)
  80b554:	080b3000 	call	80b300 <__hi0bits>
  80b558:	100b883a 	mov	r5,r2
  80b55c:	00800804 	movi	r2,32
  80b560:	1145c83a 	sub	r2,r2,r5
  80b564:	88800015 	stw	r2,0(r17)
  80b568:	00800284 	movi	r2,10
  80b56c:	80ffff04 	addi	r3,r16,-4
  80b570:	11401416 	blt	r2,r5,80b5c4 <__b2d+0xb0>
  80b574:	008002c4 	movi	r2,11
  80b578:	1149c83a 	sub	r4,r2,r5
  80b57c:	a0c02736 	bltu	r20,r3,80b61c <__b2d+0x108>
  80b580:	000d883a 	mov	r6,zero
  80b584:	28800544 	addi	r2,r5,21
  80b588:	a906d83a 	srl	r3,r21,r4
  80b58c:	a884983a 	sll	r2,r21,r2
  80b590:	1ccffc34 	orhi	r19,r3,16368
  80b594:	11a4b03a 	or	r18,r2,r6
  80b598:	9005883a 	mov	r2,r18
  80b59c:	9807883a 	mov	r3,r19
  80b5a0:	dfc00617 	ldw	ra,24(sp)
  80b5a4:	dd400517 	ldw	r21,20(sp)
  80b5a8:	dd000417 	ldw	r20,16(sp)
  80b5ac:	dcc00317 	ldw	r19,12(sp)
  80b5b0:	dc800217 	ldw	r18,8(sp)
  80b5b4:	dc400117 	ldw	r17,4(sp)
  80b5b8:	dc000017 	ldw	r16,0(sp)
  80b5bc:	dec00704 	addi	sp,sp,28
  80b5c0:	f800283a 	ret
  80b5c4:	a0c00e36 	bltu	r20,r3,80b600 <__b2d+0xec>
  80b5c8:	293ffd44 	addi	r4,r5,-11
  80b5cc:	000d883a 	mov	r6,zero
  80b5d0:	20000f26 	beq	r4,zero,80b610 <__b2d+0xfc>
  80b5d4:	00800804 	movi	r2,32
  80b5d8:	110bc83a 	sub	r5,r2,r4
  80b5dc:	a0c01236 	bltu	r20,r3,80b628 <__b2d+0x114>
  80b5e0:	000f883a 	mov	r7,zero
  80b5e4:	a904983a 	sll	r2,r21,r4
  80b5e8:	3146d83a 	srl	r3,r6,r5
  80b5ec:	3108983a 	sll	r4,r6,r4
  80b5f0:	108ffc34 	orhi	r2,r2,16368
  80b5f4:	18a6b03a 	or	r19,r3,r2
  80b5f8:	3924b03a 	or	r18,r7,r4
  80b5fc:	003fe606 	br	80b598 <__b2d+0x84>
  80b600:	293ffd44 	addi	r4,r5,-11
  80b604:	81bffe17 	ldw	r6,-8(r16)
  80b608:	80fffe04 	addi	r3,r16,-8
  80b60c:	203ff11e 	bne	r4,zero,80b5d4 <__b2d+0xc0>
  80b610:	accffc34 	orhi	r19,r21,16368
  80b614:	3025883a 	mov	r18,r6
  80b618:	003fdf06 	br	80b598 <__b2d+0x84>
  80b61c:	18bfff17 	ldw	r2,-4(r3)
  80b620:	110cd83a 	srl	r6,r2,r4
  80b624:	003fd706 	br	80b584 <__b2d+0x70>
  80b628:	18bfff17 	ldw	r2,-4(r3)
  80b62c:	114ed83a 	srl	r7,r2,r5
  80b630:	003fec06 	br	80b5e4 <__b2d+0xd0>

0080b634 <__ratio>:
  80b634:	defff904 	addi	sp,sp,-28
  80b638:	dc400215 	stw	r17,8(sp)
  80b63c:	2823883a 	mov	r17,r5
  80b640:	d80b883a 	mov	r5,sp
  80b644:	dfc00615 	stw	ra,24(sp)
  80b648:	dd000515 	stw	r20,20(sp)
  80b64c:	dcc00415 	stw	r19,16(sp)
  80b650:	dc800315 	stw	r18,12(sp)
  80b654:	2025883a 	mov	r18,r4
  80b658:	080b5140 	call	80b514 <__b2d>
  80b65c:	8809883a 	mov	r4,r17
  80b660:	d9400104 	addi	r5,sp,4
  80b664:	1027883a 	mov	r19,r2
  80b668:	1829883a 	mov	r20,r3
  80b66c:	080b5140 	call	80b514 <__b2d>
  80b670:	89000417 	ldw	r4,16(r17)
  80b674:	91c00417 	ldw	r7,16(r18)
  80b678:	d9800117 	ldw	r6,4(sp)
  80b67c:	180b883a 	mov	r5,r3
  80b680:	390fc83a 	sub	r7,r7,r4
  80b684:	1009883a 	mov	r4,r2
  80b688:	d8800017 	ldw	r2,0(sp)
  80b68c:	380e917a 	slli	r7,r7,5
  80b690:	2011883a 	mov	r8,r4
  80b694:	1185c83a 	sub	r2,r2,r6
  80b698:	11c5883a 	add	r2,r2,r7
  80b69c:	1006953a 	slli	r3,r2,20
  80b6a0:	2813883a 	mov	r9,r5
  80b6a4:	00800d0e 	bge	zero,r2,80b6dc <__ratio+0xa8>
  80b6a8:	1d29883a 	add	r20,r3,r20
  80b6ac:	a00b883a 	mov	r5,r20
  80b6b0:	480f883a 	mov	r7,r9
  80b6b4:	9809883a 	mov	r4,r19
  80b6b8:	400d883a 	mov	r6,r8
  80b6bc:	0804b6c0 	call	804b6c <__divdf3>
  80b6c0:	dfc00617 	ldw	ra,24(sp)
  80b6c4:	dd000517 	ldw	r20,20(sp)
  80b6c8:	dcc00417 	ldw	r19,16(sp)
  80b6cc:	dc800317 	ldw	r18,12(sp)
  80b6d0:	dc400217 	ldw	r17,8(sp)
  80b6d4:	dec00704 	addi	sp,sp,28
  80b6d8:	f800283a 	ret
  80b6dc:	28d3c83a 	sub	r9,r5,r3
  80b6e0:	003ff206 	br	80b6ac <__ratio+0x78>

0080b6e4 <_mprec_log10>:
  80b6e4:	defffe04 	addi	sp,sp,-8
  80b6e8:	008005c4 	movi	r2,23
  80b6ec:	dc000015 	stw	r16,0(sp)
  80b6f0:	dfc00115 	stw	ra,4(sp)
  80b6f4:	2021883a 	mov	r16,r4
  80b6f8:	11000c16 	blt	r2,r4,80b72c <_mprec_log10+0x48>
  80b6fc:	200490fa 	slli	r2,r4,3
  80b700:	00c020b4 	movhi	r3,130
  80b704:	18e93404 	addi	r3,r3,-23344
  80b708:	10c5883a 	add	r2,r2,r3
  80b70c:	12400117 	ldw	r9,4(r2)
  80b710:	12000017 	ldw	r8,0(r2)
  80b714:	4807883a 	mov	r3,r9
  80b718:	4005883a 	mov	r2,r8
  80b71c:	dfc00117 	ldw	ra,4(sp)
  80b720:	dc000017 	ldw	r16,0(sp)
  80b724:	dec00204 	addi	sp,sp,8
  80b728:	f800283a 	ret
  80b72c:	0011883a 	mov	r8,zero
  80b730:	024ffc34 	movhi	r9,16368
  80b734:	0005883a 	mov	r2,zero
  80b738:	00d00934 	movhi	r3,16420
  80b73c:	480b883a 	mov	r5,r9
  80b740:	4009883a 	mov	r4,r8
  80b744:	180f883a 	mov	r7,r3
  80b748:	100d883a 	mov	r6,r2
  80b74c:	08047a80 	call	8047a8 <__muldf3>
  80b750:	843fffc4 	addi	r16,r16,-1
  80b754:	1011883a 	mov	r8,r2
  80b758:	1813883a 	mov	r9,r3
  80b75c:	803ff51e 	bne	r16,zero,80b734 <_mprec_log10+0x50>
  80b760:	4005883a 	mov	r2,r8
  80b764:	4807883a 	mov	r3,r9
  80b768:	dfc00117 	ldw	ra,4(sp)
  80b76c:	dc000017 	ldw	r16,0(sp)
  80b770:	dec00204 	addi	sp,sp,8
  80b774:	f800283a 	ret

0080b778 <__copybits>:
  80b778:	297fffc4 	addi	r5,r5,-1
  80b77c:	30800417 	ldw	r2,16(r6)
  80b780:	280bd17a 	srai	r5,r5,5
  80b784:	31800504 	addi	r6,r6,20
  80b788:	1085883a 	add	r2,r2,r2
  80b78c:	294b883a 	add	r5,r5,r5
  80b790:	294b883a 	add	r5,r5,r5
  80b794:	1085883a 	add	r2,r2,r2
  80b798:	290b883a 	add	r5,r5,r4
  80b79c:	3087883a 	add	r3,r6,r2
  80b7a0:	29400104 	addi	r5,r5,4
  80b7a4:	30c0052e 	bgeu	r6,r3,80b7bc <__copybits+0x44>
  80b7a8:	30800017 	ldw	r2,0(r6)
  80b7ac:	31800104 	addi	r6,r6,4
  80b7b0:	20800015 	stw	r2,0(r4)
  80b7b4:	21000104 	addi	r4,r4,4
  80b7b8:	30fffb36 	bltu	r6,r3,80b7a8 <__copybits+0x30>
  80b7bc:	2140032e 	bgeu	r4,r5,80b7cc <__copybits+0x54>
  80b7c0:	20000015 	stw	zero,0(r4)
  80b7c4:	21000104 	addi	r4,r4,4
  80b7c8:	217ffd36 	bltu	r4,r5,80b7c0 <__copybits+0x48>
  80b7cc:	f800283a 	ret

0080b7d0 <__any_on>:
  80b7d0:	20800417 	ldw	r2,16(r4)
  80b7d4:	2807d17a 	srai	r3,r5,5
  80b7d8:	21000504 	addi	r4,r4,20
  80b7dc:	10c00d0e 	bge	r2,r3,80b814 <__any_on+0x44>
  80b7e0:	1085883a 	add	r2,r2,r2
  80b7e4:	1085883a 	add	r2,r2,r2
  80b7e8:	208d883a 	add	r6,r4,r2
  80b7ec:	2180182e 	bgeu	r4,r6,80b850 <__any_on+0x80>
  80b7f0:	30bfff17 	ldw	r2,-4(r6)
  80b7f4:	30ffff04 	addi	r3,r6,-4
  80b7f8:	1000041e 	bne	r2,zero,80b80c <__any_on+0x3c>
  80b7fc:	20c0142e 	bgeu	r4,r3,80b850 <__any_on+0x80>
  80b800:	18ffff04 	addi	r3,r3,-4
  80b804:	18800017 	ldw	r2,0(r3)
  80b808:	103ffc26 	beq	r2,zero,80b7fc <__any_on+0x2c>
  80b80c:	00800044 	movi	r2,1
  80b810:	f800283a 	ret
  80b814:	18800a0e 	bge	r3,r2,80b840 <__any_on+0x70>
  80b818:	294007cc 	andi	r5,r5,31
  80b81c:	28000826 	beq	r5,zero,80b840 <__any_on+0x70>
  80b820:	18c5883a 	add	r2,r3,r3
  80b824:	1085883a 	add	r2,r2,r2
  80b828:	208d883a 	add	r6,r4,r2
  80b82c:	30c00017 	ldw	r3,0(r6)
  80b830:	1944d83a 	srl	r2,r3,r5
  80b834:	1144983a 	sll	r2,r2,r5
  80b838:	18bff41e 	bne	r3,r2,80b80c <__any_on+0x3c>
  80b83c:	003feb06 	br	80b7ec <__any_on+0x1c>
  80b840:	18c5883a 	add	r2,r3,r3
  80b844:	1085883a 	add	r2,r2,r2
  80b848:	208d883a 	add	r6,r4,r2
  80b84c:	003fe706 	br	80b7ec <__any_on+0x1c>
  80b850:	0005883a 	mov	r2,zero
  80b854:	f800283a 	ret

0080b858 <_Balloc>:
  80b858:	20c01317 	ldw	r3,76(r4)
  80b85c:	defffb04 	addi	sp,sp,-20
  80b860:	dcc00315 	stw	r19,12(sp)
  80b864:	dc800215 	stw	r18,8(sp)
  80b868:	dfc00415 	stw	ra,16(sp)
  80b86c:	2825883a 	mov	r18,r5
  80b870:	dc400115 	stw	r17,4(sp)
  80b874:	dc000015 	stw	r16,0(sp)
  80b878:	2027883a 	mov	r19,r4
  80b87c:	01800404 	movi	r6,16
  80b880:	01400104 	movi	r5,4
  80b884:	18001726 	beq	r3,zero,80b8e4 <_Balloc+0x8c>
  80b888:	01400044 	movi	r5,1
  80b88c:	9485883a 	add	r2,r18,r18
  80b890:	2ca2983a 	sll	r17,r5,r18
  80b894:	1085883a 	add	r2,r2,r2
  80b898:	10c7883a 	add	r3,r2,r3
  80b89c:	1c000017 	ldw	r16,0(r3)
  80b8a0:	8c4d883a 	add	r6,r17,r17
  80b8a4:	318d883a 	add	r6,r6,r6
  80b8a8:	9809883a 	mov	r4,r19
  80b8ac:	31800504 	addi	r6,r6,20
  80b8b0:	80001226 	beq	r16,zero,80b8fc <_Balloc+0xa4>
  80b8b4:	80800017 	ldw	r2,0(r16)
  80b8b8:	18800015 	stw	r2,0(r3)
  80b8bc:	80000415 	stw	zero,16(r16)
  80b8c0:	80000315 	stw	zero,12(r16)
  80b8c4:	8005883a 	mov	r2,r16
  80b8c8:	dfc00417 	ldw	ra,16(sp)
  80b8cc:	dcc00317 	ldw	r19,12(sp)
  80b8d0:	dc800217 	ldw	r18,8(sp)
  80b8d4:	dc400117 	ldw	r17,4(sp)
  80b8d8:	dc000017 	ldw	r16,0(sp)
  80b8dc:	dec00504 	addi	sp,sp,20
  80b8e0:	f800283a 	ret
  80b8e4:	080cc880 	call	80cc88 <_calloc_r>
  80b8e8:	1007883a 	mov	r3,r2
  80b8ec:	0021883a 	mov	r16,zero
  80b8f0:	98801315 	stw	r2,76(r19)
  80b8f4:	103fe41e 	bne	r2,zero,80b888 <_Balloc+0x30>
  80b8f8:	003ff206 	br	80b8c4 <_Balloc+0x6c>
  80b8fc:	080cc880 	call	80cc88 <_calloc_r>
  80b900:	103ff026 	beq	r2,zero,80b8c4 <_Balloc+0x6c>
  80b904:	1021883a 	mov	r16,r2
  80b908:	14800115 	stw	r18,4(r2)
  80b90c:	14400215 	stw	r17,8(r2)
  80b910:	003fea06 	br	80b8bc <_Balloc+0x64>

0080b914 <__d2b>:
  80b914:	defff504 	addi	sp,sp,-44
  80b918:	dcc00515 	stw	r19,20(sp)
  80b91c:	04c00044 	movi	r19,1
  80b920:	dc000215 	stw	r16,8(sp)
  80b924:	2821883a 	mov	r16,r5
  80b928:	980b883a 	mov	r5,r19
  80b92c:	ddc00915 	stw	r23,36(sp)
  80b930:	dd800815 	stw	r22,32(sp)
  80b934:	dd400715 	stw	r21,28(sp)
  80b938:	dd000615 	stw	r20,24(sp)
  80b93c:	dc800415 	stw	r18,16(sp)
  80b940:	dc400315 	stw	r17,12(sp)
  80b944:	dfc00a15 	stw	ra,40(sp)
  80b948:	3023883a 	mov	r17,r6
  80b94c:	382d883a 	mov	r22,r7
  80b950:	ddc00b17 	ldw	r23,44(sp)
  80b954:	080b8580 	call	80b858 <_Balloc>
  80b958:	1025883a 	mov	r18,r2
  80b95c:	00a00034 	movhi	r2,32768
  80b960:	10bfffc4 	addi	r2,r2,-1
  80b964:	8888703a 	and	r4,r17,r2
  80b968:	202ad53a 	srli	r21,r4,20
  80b96c:	00800434 	movhi	r2,16
  80b970:	10bfffc4 	addi	r2,r2,-1
  80b974:	8886703a 	and	r3,r17,r2
  80b978:	a829003a 	cmpeq	r20,r21,zero
  80b97c:	800b883a 	mov	r5,r16
  80b980:	d8c00115 	stw	r3,4(sp)
  80b984:	94000504 	addi	r16,r18,20
  80b988:	a000021e 	bne	r20,zero,80b994 <__d2b+0x80>
  80b98c:	18c00434 	orhi	r3,r3,16
  80b990:	d8c00115 	stw	r3,4(sp)
  80b994:	28002726 	beq	r5,zero,80ba34 <__d2b+0x120>
  80b998:	d809883a 	mov	r4,sp
  80b99c:	d9400015 	stw	r5,0(sp)
  80b9a0:	080b3700 	call	80b370 <__lo0bits>
  80b9a4:	100d883a 	mov	r6,r2
  80b9a8:	10003526 	beq	r2,zero,80ba80 <__d2b+0x16c>
  80b9ac:	d8c00117 	ldw	r3,4(sp)
  80b9b0:	00800804 	movi	r2,32
  80b9b4:	1185c83a 	sub	r2,r2,r6
  80b9b8:	d9000017 	ldw	r4,0(sp)
  80b9bc:	1886983a 	sll	r3,r3,r2
  80b9c0:	1906b03a 	or	r3,r3,r4
  80b9c4:	90c00515 	stw	r3,20(r18)
  80b9c8:	d8c00117 	ldw	r3,4(sp)
  80b9cc:	1986d83a 	srl	r3,r3,r6
  80b9d0:	d8c00115 	stw	r3,4(sp)
  80b9d4:	180b003a 	cmpeq	r5,r3,zero
  80b9d8:	00800084 	movi	r2,2
  80b9dc:	114bc83a 	sub	r5,r2,r5
  80b9e0:	80c00115 	stw	r3,4(r16)
  80b9e4:	91400415 	stw	r5,16(r18)
  80b9e8:	a0001a1e 	bne	r20,zero,80ba54 <__d2b+0x140>
  80b9ec:	3545883a 	add	r2,r6,r21
  80b9f0:	10bef344 	addi	r2,r2,-1075
  80b9f4:	00c00d44 	movi	r3,53
  80b9f8:	b0800015 	stw	r2,0(r22)
  80b9fc:	1987c83a 	sub	r3,r3,r6
  80ba00:	b8c00015 	stw	r3,0(r23)
  80ba04:	9005883a 	mov	r2,r18
  80ba08:	dfc00a17 	ldw	ra,40(sp)
  80ba0c:	ddc00917 	ldw	r23,36(sp)
  80ba10:	dd800817 	ldw	r22,32(sp)
  80ba14:	dd400717 	ldw	r21,28(sp)
  80ba18:	dd000617 	ldw	r20,24(sp)
  80ba1c:	dcc00517 	ldw	r19,20(sp)
  80ba20:	dc800417 	ldw	r18,16(sp)
  80ba24:	dc400317 	ldw	r17,12(sp)
  80ba28:	dc000217 	ldw	r16,8(sp)
  80ba2c:	dec00b04 	addi	sp,sp,44
  80ba30:	f800283a 	ret
  80ba34:	d9000104 	addi	r4,sp,4
  80ba38:	080b3700 	call	80b370 <__lo0bits>
  80ba3c:	11800804 	addi	r6,r2,32
  80ba40:	d8800117 	ldw	r2,4(sp)
  80ba44:	94c00415 	stw	r19,16(r18)
  80ba48:	980b883a 	mov	r5,r19
  80ba4c:	90800515 	stw	r2,20(r18)
  80ba50:	a03fe626 	beq	r20,zero,80b9ec <__d2b+0xd8>
  80ba54:	2945883a 	add	r2,r5,r5
  80ba58:	1085883a 	add	r2,r2,r2
  80ba5c:	1405883a 	add	r2,r2,r16
  80ba60:	113fff17 	ldw	r4,-4(r2)
  80ba64:	30fef384 	addi	r3,r6,-1074
  80ba68:	2820917a 	slli	r16,r5,5
  80ba6c:	b0c00015 	stw	r3,0(r22)
  80ba70:	080b3000 	call	80b300 <__hi0bits>
  80ba74:	80a1c83a 	sub	r16,r16,r2
  80ba78:	bc000015 	stw	r16,0(r23)
  80ba7c:	003fe106 	br	80ba04 <__d2b+0xf0>
  80ba80:	d8800017 	ldw	r2,0(sp)
  80ba84:	90800515 	stw	r2,20(r18)
  80ba88:	d8c00117 	ldw	r3,4(sp)
  80ba8c:	003fd106 	br	80b9d4 <__d2b+0xc0>

0080ba90 <__mdiff>:
  80ba90:	defffb04 	addi	sp,sp,-20
  80ba94:	dc000015 	stw	r16,0(sp)
  80ba98:	2821883a 	mov	r16,r5
  80ba9c:	dc800215 	stw	r18,8(sp)
  80baa0:	300b883a 	mov	r5,r6
  80baa4:	2025883a 	mov	r18,r4
  80baa8:	8009883a 	mov	r4,r16
  80baac:	dc400115 	stw	r17,4(sp)
  80bab0:	dfc00415 	stw	ra,16(sp)
  80bab4:	dcc00315 	stw	r19,12(sp)
  80bab8:	3023883a 	mov	r17,r6
  80babc:	080b4340 	call	80b434 <__mcmp>
  80bac0:	10004226 	beq	r2,zero,80bbcc <__mdiff+0x13c>
  80bac4:	10005016 	blt	r2,zero,80bc08 <__mdiff+0x178>
  80bac8:	0027883a 	mov	r19,zero
  80bacc:	81400117 	ldw	r5,4(r16)
  80bad0:	9009883a 	mov	r4,r18
  80bad4:	080b8580 	call	80b858 <_Balloc>
  80bad8:	1019883a 	mov	r12,r2
  80badc:	82800417 	ldw	r10,16(r16)
  80bae0:	88800417 	ldw	r2,16(r17)
  80bae4:	81800504 	addi	r6,r16,20
  80bae8:	5287883a 	add	r3,r10,r10
  80baec:	1085883a 	add	r2,r2,r2
  80baf0:	18c7883a 	add	r3,r3,r3
  80baf4:	1085883a 	add	r2,r2,r2
  80baf8:	8a000504 	addi	r8,r17,20
  80bafc:	64c00315 	stw	r19,12(r12)
  80bb00:	30db883a 	add	r13,r6,r3
  80bb04:	4097883a 	add	r11,r8,r2
  80bb08:	61c00504 	addi	r7,r12,20
  80bb0c:	0013883a 	mov	r9,zero
  80bb10:	31000017 	ldw	r4,0(r6)
  80bb14:	41400017 	ldw	r5,0(r8)
  80bb18:	42000104 	addi	r8,r8,4
  80bb1c:	20bfffcc 	andi	r2,r4,65535
  80bb20:	28ffffcc 	andi	r3,r5,65535
  80bb24:	10c5c83a 	sub	r2,r2,r3
  80bb28:	1245883a 	add	r2,r2,r9
  80bb2c:	2008d43a 	srli	r4,r4,16
  80bb30:	280ad43a 	srli	r5,r5,16
  80bb34:	1007d43a 	srai	r3,r2,16
  80bb38:	3880000d 	sth	r2,0(r7)
  80bb3c:	2149c83a 	sub	r4,r4,r5
  80bb40:	20c9883a 	add	r4,r4,r3
  80bb44:	3900008d 	sth	r4,2(r7)
  80bb48:	31800104 	addi	r6,r6,4
  80bb4c:	39c00104 	addi	r7,r7,4
  80bb50:	2013d43a 	srai	r9,r4,16
  80bb54:	42ffee36 	bltu	r8,r11,80bb10 <__mdiff+0x80>
  80bb58:	33400c2e 	bgeu	r6,r13,80bb8c <__mdiff+0xfc>
  80bb5c:	30800017 	ldw	r2,0(r6)
  80bb60:	31800104 	addi	r6,r6,4
  80bb64:	10ffffcc 	andi	r3,r2,65535
  80bb68:	1a47883a 	add	r3,r3,r9
  80bb6c:	1004d43a 	srli	r2,r2,16
  80bb70:	1809d43a 	srai	r4,r3,16
  80bb74:	38c0000d 	sth	r3,0(r7)
  80bb78:	1105883a 	add	r2,r2,r4
  80bb7c:	3880008d 	sth	r2,2(r7)
  80bb80:	1013d43a 	srai	r9,r2,16
  80bb84:	39c00104 	addi	r7,r7,4
  80bb88:	337ff436 	bltu	r6,r13,80bb5c <__mdiff+0xcc>
  80bb8c:	38bfff17 	ldw	r2,-4(r7)
  80bb90:	38ffff04 	addi	r3,r7,-4
  80bb94:	1000041e 	bne	r2,zero,80bba8 <__mdiff+0x118>
  80bb98:	18ffff04 	addi	r3,r3,-4
  80bb9c:	18800017 	ldw	r2,0(r3)
  80bba0:	52bfffc4 	addi	r10,r10,-1
  80bba4:	103ffc26 	beq	r2,zero,80bb98 <__mdiff+0x108>
  80bba8:	6005883a 	mov	r2,r12
  80bbac:	62800415 	stw	r10,16(r12)
  80bbb0:	dfc00417 	ldw	ra,16(sp)
  80bbb4:	dcc00317 	ldw	r19,12(sp)
  80bbb8:	dc800217 	ldw	r18,8(sp)
  80bbbc:	dc400117 	ldw	r17,4(sp)
  80bbc0:	dc000017 	ldw	r16,0(sp)
  80bbc4:	dec00504 	addi	sp,sp,20
  80bbc8:	f800283a 	ret
  80bbcc:	9009883a 	mov	r4,r18
  80bbd0:	000b883a 	mov	r5,zero
  80bbd4:	080b8580 	call	80b858 <_Balloc>
  80bbd8:	1019883a 	mov	r12,r2
  80bbdc:	00800044 	movi	r2,1
  80bbe0:	60800415 	stw	r2,16(r12)
  80bbe4:	6005883a 	mov	r2,r12
  80bbe8:	60000515 	stw	zero,20(r12)
  80bbec:	dfc00417 	ldw	ra,16(sp)
  80bbf0:	dcc00317 	ldw	r19,12(sp)
  80bbf4:	dc800217 	ldw	r18,8(sp)
  80bbf8:	dc400117 	ldw	r17,4(sp)
  80bbfc:	dc000017 	ldw	r16,0(sp)
  80bc00:	dec00504 	addi	sp,sp,20
  80bc04:	f800283a 	ret
  80bc08:	880d883a 	mov	r6,r17
  80bc0c:	04c00044 	movi	r19,1
  80bc10:	8023883a 	mov	r17,r16
  80bc14:	3021883a 	mov	r16,r6
  80bc18:	003fac06 	br	80bacc <__mdiff+0x3c>

0080bc1c <__lshift>:
  80bc1c:	defff904 	addi	sp,sp,-28
  80bc20:	28800417 	ldw	r2,16(r5)
  80bc24:	dc000015 	stw	r16,0(sp)
  80bc28:	3021d17a 	srai	r16,r6,5
  80bc2c:	28c00217 	ldw	r3,8(r5)
  80bc30:	10800044 	addi	r2,r2,1
  80bc34:	dc400115 	stw	r17,4(sp)
  80bc38:	80a3883a 	add	r17,r16,r2
  80bc3c:	dd400515 	stw	r21,20(sp)
  80bc40:	dd000415 	stw	r20,16(sp)
  80bc44:	dc800215 	stw	r18,8(sp)
  80bc48:	dfc00615 	stw	ra,24(sp)
  80bc4c:	2825883a 	mov	r18,r5
  80bc50:	dcc00315 	stw	r19,12(sp)
  80bc54:	3029883a 	mov	r20,r6
  80bc58:	202b883a 	mov	r21,r4
  80bc5c:	29400117 	ldw	r5,4(r5)
  80bc60:	1c40030e 	bge	r3,r17,80bc70 <__lshift+0x54>
  80bc64:	18c7883a 	add	r3,r3,r3
  80bc68:	29400044 	addi	r5,r5,1
  80bc6c:	1c7ffd16 	blt	r3,r17,80bc64 <__lshift+0x48>
  80bc70:	a809883a 	mov	r4,r21
  80bc74:	080b8580 	call	80b858 <_Balloc>
  80bc78:	1027883a 	mov	r19,r2
  80bc7c:	11400504 	addi	r5,r2,20
  80bc80:	0400090e 	bge	zero,r16,80bca8 <__lshift+0x8c>
  80bc84:	2805883a 	mov	r2,r5
  80bc88:	0007883a 	mov	r3,zero
  80bc8c:	18c00044 	addi	r3,r3,1
  80bc90:	10000015 	stw	zero,0(r2)
  80bc94:	10800104 	addi	r2,r2,4
  80bc98:	80fffc1e 	bne	r16,r3,80bc8c <__lshift+0x70>
  80bc9c:	8405883a 	add	r2,r16,r16
  80bca0:	1085883a 	add	r2,r2,r2
  80bca4:	288b883a 	add	r5,r5,r2
  80bca8:	90800417 	ldw	r2,16(r18)
  80bcac:	91000504 	addi	r4,r18,20
  80bcb0:	a18007cc 	andi	r6,r20,31
  80bcb4:	1085883a 	add	r2,r2,r2
  80bcb8:	1085883a 	add	r2,r2,r2
  80bcbc:	208f883a 	add	r7,r4,r2
  80bcc0:	30001e26 	beq	r6,zero,80bd3c <__lshift+0x120>
  80bcc4:	00800804 	movi	r2,32
  80bcc8:	1191c83a 	sub	r8,r2,r6
  80bccc:	0007883a 	mov	r3,zero
  80bcd0:	20800017 	ldw	r2,0(r4)
  80bcd4:	1184983a 	sll	r2,r2,r6
  80bcd8:	1884b03a 	or	r2,r3,r2
  80bcdc:	28800015 	stw	r2,0(r5)
  80bce0:	20c00017 	ldw	r3,0(r4)
  80bce4:	21000104 	addi	r4,r4,4
  80bce8:	29400104 	addi	r5,r5,4
  80bcec:	1a06d83a 	srl	r3,r3,r8
  80bcf0:	21fff736 	bltu	r4,r7,80bcd0 <__lshift+0xb4>
  80bcf4:	28c00015 	stw	r3,0(r5)
  80bcf8:	18000126 	beq	r3,zero,80bd00 <__lshift+0xe4>
  80bcfc:	8c400044 	addi	r17,r17,1
  80bd00:	88bfffc4 	addi	r2,r17,-1
  80bd04:	98800415 	stw	r2,16(r19)
  80bd08:	a809883a 	mov	r4,r21
  80bd0c:	900b883a 	mov	r5,r18
  80bd10:	080b2d80 	call	80b2d8 <_Bfree>
  80bd14:	9805883a 	mov	r2,r19
  80bd18:	dfc00617 	ldw	ra,24(sp)
  80bd1c:	dd400517 	ldw	r21,20(sp)
  80bd20:	dd000417 	ldw	r20,16(sp)
  80bd24:	dcc00317 	ldw	r19,12(sp)
  80bd28:	dc800217 	ldw	r18,8(sp)
  80bd2c:	dc400117 	ldw	r17,4(sp)
  80bd30:	dc000017 	ldw	r16,0(sp)
  80bd34:	dec00704 	addi	sp,sp,28
  80bd38:	f800283a 	ret
  80bd3c:	20800017 	ldw	r2,0(r4)
  80bd40:	21000104 	addi	r4,r4,4
  80bd44:	28800015 	stw	r2,0(r5)
  80bd48:	29400104 	addi	r5,r5,4
  80bd4c:	21ffec2e 	bgeu	r4,r7,80bd00 <__lshift+0xe4>
  80bd50:	20800017 	ldw	r2,0(r4)
  80bd54:	21000104 	addi	r4,r4,4
  80bd58:	28800015 	stw	r2,0(r5)
  80bd5c:	29400104 	addi	r5,r5,4
  80bd60:	21fff636 	bltu	r4,r7,80bd3c <__lshift+0x120>
  80bd64:	003fe606 	br	80bd00 <__lshift+0xe4>

0080bd68 <__multiply>:
  80bd68:	defff004 	addi	sp,sp,-64
  80bd6c:	dc800815 	stw	r18,32(sp)
  80bd70:	dc400715 	stw	r17,28(sp)
  80bd74:	2c800417 	ldw	r18,16(r5)
  80bd78:	34400417 	ldw	r17,16(r6)
  80bd7c:	dcc00915 	stw	r19,36(sp)
  80bd80:	dc000615 	stw	r16,24(sp)
  80bd84:	dfc00f15 	stw	ra,60(sp)
  80bd88:	df000e15 	stw	fp,56(sp)
  80bd8c:	ddc00d15 	stw	r23,52(sp)
  80bd90:	dd800c15 	stw	r22,48(sp)
  80bd94:	dd400b15 	stw	r21,44(sp)
  80bd98:	dd000a15 	stw	r20,40(sp)
  80bd9c:	2821883a 	mov	r16,r5
  80bda0:	3027883a 	mov	r19,r6
  80bda4:	9440040e 	bge	r18,r17,80bdb8 <__multiply+0x50>
  80bda8:	8825883a 	mov	r18,r17
  80bdac:	2c400417 	ldw	r17,16(r5)
  80bdb0:	2827883a 	mov	r19,r5
  80bdb4:	3021883a 	mov	r16,r6
  80bdb8:	80800217 	ldw	r2,8(r16)
  80bdbc:	9447883a 	add	r3,r18,r17
  80bdc0:	d8c00415 	stw	r3,16(sp)
  80bdc4:	81400117 	ldw	r5,4(r16)
  80bdc8:	10c0010e 	bge	r2,r3,80bdd0 <__multiply+0x68>
  80bdcc:	29400044 	addi	r5,r5,1
  80bdd0:	080b8580 	call	80b858 <_Balloc>
  80bdd4:	d8800515 	stw	r2,20(sp)
  80bdd8:	d9000417 	ldw	r4,16(sp)
  80bddc:	d8c00517 	ldw	r3,20(sp)
  80bde0:	2105883a 	add	r2,r4,r4
  80bde4:	1085883a 	add	r2,r2,r2
  80bde8:	19000504 	addi	r4,r3,20
  80bdec:	2085883a 	add	r2,r4,r2
  80bdf0:	d8800315 	stw	r2,12(sp)
  80bdf4:	2080052e 	bgeu	r4,r2,80be0c <__multiply+0xa4>
  80bdf8:	2005883a 	mov	r2,r4
  80bdfc:	d8c00317 	ldw	r3,12(sp)
  80be00:	10000015 	stw	zero,0(r2)
  80be04:	10800104 	addi	r2,r2,4
  80be08:	10fffc36 	bltu	r2,r3,80bdfc <__multiply+0x94>
  80be0c:	8c45883a 	add	r2,r17,r17
  80be10:	9487883a 	add	r3,r18,r18
  80be14:	9dc00504 	addi	r23,r19,20
  80be18:	1085883a 	add	r2,r2,r2
  80be1c:	84000504 	addi	r16,r16,20
  80be20:	18c7883a 	add	r3,r3,r3
  80be24:	b885883a 	add	r2,r23,r2
  80be28:	dc000015 	stw	r16,0(sp)
  80be2c:	d8800215 	stw	r2,8(sp)
  80be30:	80f9883a 	add	fp,r16,r3
  80be34:	b880432e 	bgeu	r23,r2,80bf44 <__multiply+0x1dc>
  80be38:	d9000115 	stw	r4,4(sp)
  80be3c:	b9000017 	ldw	r4,0(r23)
  80be40:	253fffcc 	andi	r20,r4,65535
  80be44:	a0001a26 	beq	r20,zero,80beb0 <__multiply+0x148>
  80be48:	dcc00017 	ldw	r19,0(sp)
  80be4c:	dc800117 	ldw	r18,4(sp)
  80be50:	002b883a 	mov	r21,zero
  80be54:	9c400017 	ldw	r17,0(r19)
  80be58:	94000017 	ldw	r16,0(r18)
  80be5c:	a009883a 	mov	r4,r20
  80be60:	897fffcc 	andi	r5,r17,65535
  80be64:	080535c0 	call	80535c <__mulsi3>
  80be68:	880ad43a 	srli	r5,r17,16
  80be6c:	80ffffcc 	andi	r3,r16,65535
  80be70:	a8c7883a 	add	r3,r21,r3
  80be74:	a009883a 	mov	r4,r20
  80be78:	10e3883a 	add	r17,r2,r3
  80be7c:	8020d43a 	srli	r16,r16,16
  80be80:	080535c0 	call	80535c <__mulsi3>
  80be84:	8806d43a 	srli	r3,r17,16
  80be88:	1405883a 	add	r2,r2,r16
  80be8c:	9cc00104 	addi	r19,r19,4
  80be90:	1887883a 	add	r3,r3,r2
  80be94:	90c0008d 	sth	r3,2(r18)
  80be98:	9440000d 	sth	r17,0(r18)
  80be9c:	182ad43a 	srli	r21,r3,16
  80bea0:	94800104 	addi	r18,r18,4
  80bea4:	9f3feb36 	bltu	r19,fp,80be54 <__multiply+0xec>
  80bea8:	95400015 	stw	r21,0(r18)
  80beac:	b9000017 	ldw	r4,0(r23)
  80beb0:	202ad43a 	srli	r21,r4,16
  80beb4:	a8001c26 	beq	r21,zero,80bf28 <__multiply+0x1c0>
  80beb8:	d9000117 	ldw	r4,4(sp)
  80bebc:	dd000017 	ldw	r20,0(sp)
  80bec0:	002d883a 	mov	r22,zero
  80bec4:	24c00017 	ldw	r19,0(r4)
  80bec8:	2025883a 	mov	r18,r4
  80becc:	9823883a 	mov	r17,r19
  80bed0:	a4000017 	ldw	r16,0(r20)
  80bed4:	a809883a 	mov	r4,r21
  80bed8:	a5000104 	addi	r20,r20,4
  80bedc:	817fffcc 	andi	r5,r16,65535
  80bee0:	080535c0 	call	80535c <__mulsi3>
  80bee4:	8806d43a 	srli	r3,r17,16
  80bee8:	800ad43a 	srli	r5,r16,16
  80beec:	94c0000d 	sth	r19,0(r18)
  80bef0:	b0c7883a 	add	r3,r22,r3
  80bef4:	10e1883a 	add	r16,r2,r3
  80bef8:	9400008d 	sth	r16,2(r18)
  80befc:	a809883a 	mov	r4,r21
  80bf00:	94800104 	addi	r18,r18,4
  80bf04:	080535c0 	call	80535c <__mulsi3>
  80bf08:	94400017 	ldw	r17,0(r18)
  80bf0c:	8020d43a 	srli	r16,r16,16
  80bf10:	88ffffcc 	andi	r3,r17,65535
  80bf14:	10c5883a 	add	r2,r2,r3
  80bf18:	80a7883a 	add	r19,r16,r2
  80bf1c:	982cd43a 	srli	r22,r19,16
  80bf20:	a73feb36 	bltu	r20,fp,80bed0 <__multiply+0x168>
  80bf24:	94c00015 	stw	r19,0(r18)
  80bf28:	d8800217 	ldw	r2,8(sp)
  80bf2c:	bdc00104 	addi	r23,r23,4
  80bf30:	b880042e 	bgeu	r23,r2,80bf44 <__multiply+0x1dc>
  80bf34:	d8c00117 	ldw	r3,4(sp)
  80bf38:	18c00104 	addi	r3,r3,4
  80bf3c:	d8c00115 	stw	r3,4(sp)
  80bf40:	003fbe06 	br	80be3c <__multiply+0xd4>
  80bf44:	d9000417 	ldw	r4,16(sp)
  80bf48:	01000c0e 	bge	zero,r4,80bf7c <__multiply+0x214>
  80bf4c:	d8c00317 	ldw	r3,12(sp)
  80bf50:	18bfff17 	ldw	r2,-4(r3)
  80bf54:	18ffff04 	addi	r3,r3,-4
  80bf58:	10000326 	beq	r2,zero,80bf68 <__multiply+0x200>
  80bf5c:	00000706 	br	80bf7c <__multiply+0x214>
  80bf60:	18800017 	ldw	r2,0(r3)
  80bf64:	1000051e 	bne	r2,zero,80bf7c <__multiply+0x214>
  80bf68:	d9000417 	ldw	r4,16(sp)
  80bf6c:	18ffff04 	addi	r3,r3,-4
  80bf70:	213fffc4 	addi	r4,r4,-1
  80bf74:	d9000415 	stw	r4,16(sp)
  80bf78:	203ff91e 	bne	r4,zero,80bf60 <__multiply+0x1f8>
  80bf7c:	d8800417 	ldw	r2,16(sp)
  80bf80:	d8c00517 	ldw	r3,20(sp)
  80bf84:	18800415 	stw	r2,16(r3)
  80bf88:	1805883a 	mov	r2,r3
  80bf8c:	dfc00f17 	ldw	ra,60(sp)
  80bf90:	df000e17 	ldw	fp,56(sp)
  80bf94:	ddc00d17 	ldw	r23,52(sp)
  80bf98:	dd800c17 	ldw	r22,48(sp)
  80bf9c:	dd400b17 	ldw	r21,44(sp)
  80bfa0:	dd000a17 	ldw	r20,40(sp)
  80bfa4:	dcc00917 	ldw	r19,36(sp)
  80bfa8:	dc800817 	ldw	r18,32(sp)
  80bfac:	dc400717 	ldw	r17,28(sp)
  80bfb0:	dc000617 	ldw	r16,24(sp)
  80bfb4:	dec01004 	addi	sp,sp,64
  80bfb8:	f800283a 	ret

0080bfbc <__i2b>:
  80bfbc:	defffd04 	addi	sp,sp,-12
  80bfc0:	dc000015 	stw	r16,0(sp)
  80bfc4:	04000044 	movi	r16,1
  80bfc8:	dc800115 	stw	r18,4(sp)
  80bfcc:	2825883a 	mov	r18,r5
  80bfd0:	800b883a 	mov	r5,r16
  80bfd4:	dfc00215 	stw	ra,8(sp)
  80bfd8:	080b8580 	call	80b858 <_Balloc>
  80bfdc:	14000415 	stw	r16,16(r2)
  80bfe0:	14800515 	stw	r18,20(r2)
  80bfe4:	dfc00217 	ldw	ra,8(sp)
  80bfe8:	dc800117 	ldw	r18,4(sp)
  80bfec:	dc000017 	ldw	r16,0(sp)
  80bff0:	dec00304 	addi	sp,sp,12
  80bff4:	f800283a 	ret

0080bff8 <__multadd>:
  80bff8:	defff604 	addi	sp,sp,-40
  80bffc:	dd800615 	stw	r22,24(sp)
  80c000:	2d800417 	ldw	r22,16(r5)
  80c004:	df000815 	stw	fp,32(sp)
  80c008:	ddc00715 	stw	r23,28(sp)
  80c00c:	dd400515 	stw	r21,20(sp)
  80c010:	dd000415 	stw	r20,16(sp)
  80c014:	dcc00315 	stw	r19,12(sp)
  80c018:	dc800215 	stw	r18,8(sp)
  80c01c:	dfc00915 	stw	ra,36(sp)
  80c020:	dc400115 	stw	r17,4(sp)
  80c024:	dc000015 	stw	r16,0(sp)
  80c028:	282f883a 	mov	r23,r5
  80c02c:	2039883a 	mov	fp,r4
  80c030:	302b883a 	mov	r21,r6
  80c034:	3829883a 	mov	r20,r7
  80c038:	2c800504 	addi	r18,r5,20
  80c03c:	0027883a 	mov	r19,zero
  80c040:	94400017 	ldw	r17,0(r18)
  80c044:	a80b883a 	mov	r5,r21
  80c048:	9cc00044 	addi	r19,r19,1
  80c04c:	893fffcc 	andi	r4,r17,65535
  80c050:	080535c0 	call	80535c <__mulsi3>
  80c054:	8808d43a 	srli	r4,r17,16
  80c058:	1521883a 	add	r16,r2,r20
  80c05c:	a80b883a 	mov	r5,r21
  80c060:	080535c0 	call	80535c <__mulsi3>
  80c064:	8008d43a 	srli	r4,r16,16
  80c068:	843fffcc 	andi	r16,r16,65535
  80c06c:	1105883a 	add	r2,r2,r4
  80c070:	1006943a 	slli	r3,r2,16
  80c074:	1028d43a 	srli	r20,r2,16
  80c078:	1c07883a 	add	r3,r3,r16
  80c07c:	90c00015 	stw	r3,0(r18)
  80c080:	94800104 	addi	r18,r18,4
  80c084:	9dbfee16 	blt	r19,r22,80c040 <__multadd+0x48>
  80c088:	a0000826 	beq	r20,zero,80c0ac <__multadd+0xb4>
  80c08c:	b8800217 	ldw	r2,8(r23)
  80c090:	b080130e 	bge	r22,r2,80c0e0 <__multadd+0xe8>
  80c094:	b585883a 	add	r2,r22,r22
  80c098:	1085883a 	add	r2,r2,r2
  80c09c:	15c5883a 	add	r2,r2,r23
  80c0a0:	b0c00044 	addi	r3,r22,1
  80c0a4:	15000515 	stw	r20,20(r2)
  80c0a8:	b8c00415 	stw	r3,16(r23)
  80c0ac:	b805883a 	mov	r2,r23
  80c0b0:	dfc00917 	ldw	ra,36(sp)
  80c0b4:	df000817 	ldw	fp,32(sp)
  80c0b8:	ddc00717 	ldw	r23,28(sp)
  80c0bc:	dd800617 	ldw	r22,24(sp)
  80c0c0:	dd400517 	ldw	r21,20(sp)
  80c0c4:	dd000417 	ldw	r20,16(sp)
  80c0c8:	dcc00317 	ldw	r19,12(sp)
  80c0cc:	dc800217 	ldw	r18,8(sp)
  80c0d0:	dc400117 	ldw	r17,4(sp)
  80c0d4:	dc000017 	ldw	r16,0(sp)
  80c0d8:	dec00a04 	addi	sp,sp,40
  80c0dc:	f800283a 	ret
  80c0e0:	b9400117 	ldw	r5,4(r23)
  80c0e4:	e009883a 	mov	r4,fp
  80c0e8:	29400044 	addi	r5,r5,1
  80c0ec:	080b8580 	call	80b858 <_Balloc>
  80c0f0:	b9800417 	ldw	r6,16(r23)
  80c0f4:	b9400304 	addi	r5,r23,12
  80c0f8:	11000304 	addi	r4,r2,12
  80c0fc:	318d883a 	add	r6,r6,r6
  80c100:	318d883a 	add	r6,r6,r6
  80c104:	31800204 	addi	r6,r6,8
  80c108:	1023883a 	mov	r17,r2
  80c10c:	080b0c00 	call	80b0c0 <memcpy>
  80c110:	b80b883a 	mov	r5,r23
  80c114:	e009883a 	mov	r4,fp
  80c118:	080b2d80 	call	80b2d8 <_Bfree>
  80c11c:	882f883a 	mov	r23,r17
  80c120:	003fdc06 	br	80c094 <__multadd+0x9c>

0080c124 <__pow5mult>:
  80c124:	defffa04 	addi	sp,sp,-24
  80c128:	308000cc 	andi	r2,r6,3
  80c12c:	dd000415 	stw	r20,16(sp)
  80c130:	dcc00315 	stw	r19,12(sp)
  80c134:	dc000015 	stw	r16,0(sp)
  80c138:	dfc00515 	stw	ra,20(sp)
  80c13c:	dc800215 	stw	r18,8(sp)
  80c140:	dc400115 	stw	r17,4(sp)
  80c144:	3021883a 	mov	r16,r6
  80c148:	2027883a 	mov	r19,r4
  80c14c:	2829883a 	mov	r20,r5
  80c150:	10002b1e 	bne	r2,zero,80c200 <__pow5mult+0xdc>
  80c154:	8025d0ba 	srai	r18,r16,2
  80c158:	90001b26 	beq	r18,zero,80c1c8 <__pow5mult+0xa4>
  80c15c:	9c001217 	ldw	r16,72(r19)
  80c160:	8000081e 	bne	r16,zero,80c184 <__pow5mult+0x60>
  80c164:	00003006 	br	80c228 <__pow5mult+0x104>
  80c168:	800b883a 	mov	r5,r16
  80c16c:	800d883a 	mov	r6,r16
  80c170:	9809883a 	mov	r4,r19
  80c174:	90001426 	beq	r18,zero,80c1c8 <__pow5mult+0xa4>
  80c178:	80800017 	ldw	r2,0(r16)
  80c17c:	10001b26 	beq	r2,zero,80c1ec <__pow5mult+0xc8>
  80c180:	1021883a 	mov	r16,r2
  80c184:	9080004c 	andi	r2,r18,1
  80c188:	1005003a 	cmpeq	r2,r2,zero
  80c18c:	9025d07a 	srai	r18,r18,1
  80c190:	800d883a 	mov	r6,r16
  80c194:	9809883a 	mov	r4,r19
  80c198:	a00b883a 	mov	r5,r20
  80c19c:	103ff21e 	bne	r2,zero,80c168 <__pow5mult+0x44>
  80c1a0:	080bd680 	call	80bd68 <__multiply>
  80c1a4:	a00b883a 	mov	r5,r20
  80c1a8:	9809883a 	mov	r4,r19
  80c1ac:	1023883a 	mov	r17,r2
  80c1b0:	080b2d80 	call	80b2d8 <_Bfree>
  80c1b4:	8829883a 	mov	r20,r17
  80c1b8:	800b883a 	mov	r5,r16
  80c1bc:	800d883a 	mov	r6,r16
  80c1c0:	9809883a 	mov	r4,r19
  80c1c4:	903fec1e 	bne	r18,zero,80c178 <__pow5mult+0x54>
  80c1c8:	a005883a 	mov	r2,r20
  80c1cc:	dfc00517 	ldw	ra,20(sp)
  80c1d0:	dd000417 	ldw	r20,16(sp)
  80c1d4:	dcc00317 	ldw	r19,12(sp)
  80c1d8:	dc800217 	ldw	r18,8(sp)
  80c1dc:	dc400117 	ldw	r17,4(sp)
  80c1e0:	dc000017 	ldw	r16,0(sp)
  80c1e4:	dec00604 	addi	sp,sp,24
  80c1e8:	f800283a 	ret
  80c1ec:	080bd680 	call	80bd68 <__multiply>
  80c1f0:	80800015 	stw	r2,0(r16)
  80c1f4:	1021883a 	mov	r16,r2
  80c1f8:	10000015 	stw	zero,0(r2)
  80c1fc:	003fe106 	br	80c184 <__pow5mult+0x60>
  80c200:	1085883a 	add	r2,r2,r2
  80c204:	00c020b4 	movhi	r3,130
  80c208:	18e97a04 	addi	r3,r3,-23064
  80c20c:	1085883a 	add	r2,r2,r2
  80c210:	10c5883a 	add	r2,r2,r3
  80c214:	11bfff17 	ldw	r6,-4(r2)
  80c218:	000f883a 	mov	r7,zero
  80c21c:	080bff80 	call	80bff8 <__multadd>
  80c220:	1029883a 	mov	r20,r2
  80c224:	003fcb06 	br	80c154 <__pow5mult+0x30>
  80c228:	9809883a 	mov	r4,r19
  80c22c:	01409c44 	movi	r5,625
  80c230:	080bfbc0 	call	80bfbc <__i2b>
  80c234:	98801215 	stw	r2,72(r19)
  80c238:	1021883a 	mov	r16,r2
  80c23c:	10000015 	stw	zero,0(r2)
  80c240:	003fd006 	br	80c184 <__pow5mult+0x60>

0080c244 <__s2b>:
  80c244:	defff904 	addi	sp,sp,-28
  80c248:	dcc00315 	stw	r19,12(sp)
  80c24c:	dc800215 	stw	r18,8(sp)
  80c250:	2827883a 	mov	r19,r5
  80c254:	2025883a 	mov	r18,r4
  80c258:	01400244 	movi	r5,9
  80c25c:	39000204 	addi	r4,r7,8
  80c260:	dd000415 	stw	r20,16(sp)
  80c264:	dc400115 	stw	r17,4(sp)
  80c268:	dfc00615 	stw	ra,24(sp)
  80c26c:	dd400515 	stw	r21,20(sp)
  80c270:	dc000015 	stw	r16,0(sp)
  80c274:	3829883a 	mov	r20,r7
  80c278:	3023883a 	mov	r17,r6
  80c27c:	080528c0 	call	80528c <__divsi3>
  80c280:	00c00044 	movi	r3,1
  80c284:	1880350e 	bge	r3,r2,80c35c <__s2b+0x118>
  80c288:	000b883a 	mov	r5,zero
  80c28c:	18c7883a 	add	r3,r3,r3
  80c290:	29400044 	addi	r5,r5,1
  80c294:	18bffd16 	blt	r3,r2,80c28c <__s2b+0x48>
  80c298:	9009883a 	mov	r4,r18
  80c29c:	080b8580 	call	80b858 <_Balloc>
  80c2a0:	1011883a 	mov	r8,r2
  80c2a4:	d8800717 	ldw	r2,28(sp)
  80c2a8:	00c00044 	movi	r3,1
  80c2ac:	01800244 	movi	r6,9
  80c2b0:	40800515 	stw	r2,20(r8)
  80c2b4:	40c00415 	stw	r3,16(r8)
  80c2b8:	3440260e 	bge	r6,r17,80c354 <__s2b+0x110>
  80c2bc:	3021883a 	mov	r16,r6
  80c2c0:	99ab883a 	add	r21,r19,r6
  80c2c4:	9c05883a 	add	r2,r19,r16
  80c2c8:	11c00007 	ldb	r7,0(r2)
  80c2cc:	400b883a 	mov	r5,r8
  80c2d0:	9009883a 	mov	r4,r18
  80c2d4:	39fff404 	addi	r7,r7,-48
  80c2d8:	01800284 	movi	r6,10
  80c2dc:	080bff80 	call	80bff8 <__multadd>
  80c2e0:	84000044 	addi	r16,r16,1
  80c2e4:	1011883a 	mov	r8,r2
  80c2e8:	8c3ff61e 	bne	r17,r16,80c2c4 <__s2b+0x80>
  80c2ec:	ac45883a 	add	r2,r21,r17
  80c2f0:	117ffe04 	addi	r5,r2,-8
  80c2f4:	880d883a 	mov	r6,r17
  80c2f8:	35000c0e 	bge	r6,r20,80c32c <__s2b+0xe8>
  80c2fc:	a185c83a 	sub	r2,r20,r6
  80c300:	2821883a 	mov	r16,r5
  80c304:	28a3883a 	add	r17,r5,r2
  80c308:	81c00007 	ldb	r7,0(r16)
  80c30c:	400b883a 	mov	r5,r8
  80c310:	9009883a 	mov	r4,r18
  80c314:	39fff404 	addi	r7,r7,-48
  80c318:	01800284 	movi	r6,10
  80c31c:	080bff80 	call	80bff8 <__multadd>
  80c320:	84000044 	addi	r16,r16,1
  80c324:	1011883a 	mov	r8,r2
  80c328:	847ff71e 	bne	r16,r17,80c308 <__s2b+0xc4>
  80c32c:	4005883a 	mov	r2,r8
  80c330:	dfc00617 	ldw	ra,24(sp)
  80c334:	dd400517 	ldw	r21,20(sp)
  80c338:	dd000417 	ldw	r20,16(sp)
  80c33c:	dcc00317 	ldw	r19,12(sp)
  80c340:	dc800217 	ldw	r18,8(sp)
  80c344:	dc400117 	ldw	r17,4(sp)
  80c348:	dc000017 	ldw	r16,0(sp)
  80c34c:	dec00704 	addi	sp,sp,28
  80c350:	f800283a 	ret
  80c354:	99400284 	addi	r5,r19,10
  80c358:	003fe706 	br	80c2f8 <__s2b+0xb4>
  80c35c:	000b883a 	mov	r5,zero
  80c360:	003fcd06 	br	80c298 <__s2b+0x54>

0080c364 <_realloc_r>:
  80c364:	defff404 	addi	sp,sp,-48
  80c368:	dd800815 	stw	r22,32(sp)
  80c36c:	dc800415 	stw	r18,16(sp)
  80c370:	dc400315 	stw	r17,12(sp)
  80c374:	dfc00b15 	stw	ra,44(sp)
  80c378:	df000a15 	stw	fp,40(sp)
  80c37c:	ddc00915 	stw	r23,36(sp)
  80c380:	dd400715 	stw	r21,28(sp)
  80c384:	dd000615 	stw	r20,24(sp)
  80c388:	dcc00515 	stw	r19,20(sp)
  80c38c:	dc000215 	stw	r16,8(sp)
  80c390:	2825883a 	mov	r18,r5
  80c394:	3023883a 	mov	r17,r6
  80c398:	202d883a 	mov	r22,r4
  80c39c:	2800c926 	beq	r5,zero,80c6c4 <_realloc_r+0x360>
  80c3a0:	080edcc0 	call	80edcc <__malloc_lock>
  80c3a4:	943ffe04 	addi	r16,r18,-8
  80c3a8:	88c002c4 	addi	r3,r17,11
  80c3ac:	00800584 	movi	r2,22
  80c3b0:	82000117 	ldw	r8,4(r16)
  80c3b4:	10c01b2e 	bgeu	r2,r3,80c424 <_realloc_r+0xc0>
  80c3b8:	00bffe04 	movi	r2,-8
  80c3bc:	188e703a 	and	r7,r3,r2
  80c3c0:	3839883a 	mov	fp,r7
  80c3c4:	38001a16 	blt	r7,zero,80c430 <_realloc_r+0xcc>
  80c3c8:	e4401936 	bltu	fp,r17,80c430 <_realloc_r+0xcc>
  80c3cc:	013fff04 	movi	r4,-4
  80c3d0:	4126703a 	and	r19,r8,r4
  80c3d4:	99c02616 	blt	r19,r7,80c470 <_realloc_r+0x10c>
  80c3d8:	802b883a 	mov	r21,r16
  80c3dc:	9829883a 	mov	r20,r19
  80c3e0:	84000204 	addi	r16,r16,8
  80c3e4:	a80f883a 	mov	r7,r21
  80c3e8:	a70dc83a 	sub	r6,r20,fp
  80c3ec:	008003c4 	movi	r2,15
  80c3f0:	1180c136 	bltu	r2,r6,80c6f8 <_realloc_r+0x394>
  80c3f4:	38800117 	ldw	r2,4(r7)
  80c3f8:	a549883a 	add	r4,r20,r21
  80c3fc:	1080004c 	andi	r2,r2,1
  80c400:	a084b03a 	or	r2,r20,r2
  80c404:	38800115 	stw	r2,4(r7)
  80c408:	20c00117 	ldw	r3,4(r4)
  80c40c:	18c00054 	ori	r3,r3,1
  80c410:	20c00115 	stw	r3,4(r4)
  80c414:	b009883a 	mov	r4,r22
  80c418:	080eed40 	call	80eed4 <__malloc_unlock>
  80c41c:	8023883a 	mov	r17,r16
  80c420:	00000606 	br	80c43c <_realloc_r+0xd8>
  80c424:	01c00404 	movi	r7,16
  80c428:	3839883a 	mov	fp,r7
  80c42c:	e47fe72e 	bgeu	fp,r17,80c3cc <_realloc_r+0x68>
  80c430:	00800304 	movi	r2,12
  80c434:	0023883a 	mov	r17,zero
  80c438:	b0800015 	stw	r2,0(r22)
  80c43c:	8805883a 	mov	r2,r17
  80c440:	dfc00b17 	ldw	ra,44(sp)
  80c444:	df000a17 	ldw	fp,40(sp)
  80c448:	ddc00917 	ldw	r23,36(sp)
  80c44c:	dd800817 	ldw	r22,32(sp)
  80c450:	dd400717 	ldw	r21,28(sp)
  80c454:	dd000617 	ldw	r20,24(sp)
  80c458:	dcc00517 	ldw	r19,20(sp)
  80c45c:	dc800417 	ldw	r18,16(sp)
  80c460:	dc400317 	ldw	r17,12(sp)
  80c464:	dc000217 	ldw	r16,8(sp)
  80c468:	dec00c04 	addi	sp,sp,48
  80c46c:	f800283a 	ret
  80c470:	008020b4 	movhi	r2,130
  80c474:	10aae804 	addi	r2,r2,-21600
  80c478:	12400217 	ldw	r9,8(r2)
  80c47c:	84cd883a 	add	r6,r16,r19
  80c480:	802b883a 	mov	r21,r16
  80c484:	3240b926 	beq	r6,r9,80c76c <_realloc_r+0x408>
  80c488:	31400117 	ldw	r5,4(r6)
  80c48c:	00bfff84 	movi	r2,-2
  80c490:	2884703a 	and	r2,r5,r2
  80c494:	1185883a 	add	r2,r2,r6
  80c498:	10c00117 	ldw	r3,4(r2)
  80c49c:	18c0004c 	andi	r3,r3,1
  80c4a0:	1807003a 	cmpeq	r3,r3,zero
  80c4a4:	1800a326 	beq	r3,zero,80c734 <_realloc_r+0x3d0>
  80c4a8:	2908703a 	and	r4,r5,r4
  80c4ac:	9929883a 	add	r20,r19,r4
  80c4b0:	a1c0a30e 	bge	r20,r7,80c740 <_realloc_r+0x3dc>
  80c4b4:	4080004c 	andi	r2,r8,1
  80c4b8:	1000551e 	bne	r2,zero,80c610 <_realloc_r+0x2ac>
  80c4bc:	80800017 	ldw	r2,0(r16)
  80c4c0:	80afc83a 	sub	r23,r16,r2
  80c4c4:	b8c00117 	ldw	r3,4(r23)
  80c4c8:	00bfff04 	movi	r2,-4
  80c4cc:	1884703a 	and	r2,r3,r2
  80c4d0:	30002e26 	beq	r6,zero,80c58c <_realloc_r+0x228>
  80c4d4:	3240b926 	beq	r6,r9,80c7bc <_realloc_r+0x458>
  80c4d8:	98a9883a 	add	r20,r19,r2
  80c4dc:	2509883a 	add	r4,r4,r20
  80c4e0:	d9000015 	stw	r4,0(sp)
  80c4e4:	21c02a16 	blt	r4,r7,80c590 <_realloc_r+0x22c>
  80c4e8:	30800317 	ldw	r2,12(r6)
  80c4ec:	30c00217 	ldw	r3,8(r6)
  80c4f0:	01400904 	movi	r5,36
  80c4f4:	99bfff04 	addi	r6,r19,-4
  80c4f8:	18800315 	stw	r2,12(r3)
  80c4fc:	10c00215 	stw	r3,8(r2)
  80c500:	b9000317 	ldw	r4,12(r23)
  80c504:	b8800217 	ldw	r2,8(r23)
  80c508:	b82b883a 	mov	r21,r23
  80c50c:	bc000204 	addi	r16,r23,8
  80c510:	20800215 	stw	r2,8(r4)
  80c514:	11000315 	stw	r4,12(r2)
  80c518:	2980e436 	bltu	r5,r6,80c8ac <_realloc_r+0x548>
  80c51c:	008004c4 	movi	r2,19
  80c520:	9009883a 	mov	r4,r18
  80c524:	8011883a 	mov	r8,r16
  80c528:	11800f2e 	bgeu	r2,r6,80c568 <_realloc_r+0x204>
  80c52c:	90800017 	ldw	r2,0(r18)
  80c530:	ba000404 	addi	r8,r23,16
  80c534:	91000204 	addi	r4,r18,8
  80c538:	b8800215 	stw	r2,8(r23)
  80c53c:	90c00117 	ldw	r3,4(r18)
  80c540:	008006c4 	movi	r2,27
  80c544:	b8c00315 	stw	r3,12(r23)
  80c548:	1180072e 	bgeu	r2,r6,80c568 <_realloc_r+0x204>
  80c54c:	90c00217 	ldw	r3,8(r18)
  80c550:	ba000604 	addi	r8,r23,24
  80c554:	91000404 	addi	r4,r18,16
  80c558:	b8c00415 	stw	r3,16(r23)
  80c55c:	90800317 	ldw	r2,12(r18)
  80c560:	b8800515 	stw	r2,20(r23)
  80c564:	3140e726 	beq	r6,r5,80c904 <_realloc_r+0x5a0>
  80c568:	20800017 	ldw	r2,0(r4)
  80c56c:	dd000017 	ldw	r20,0(sp)
  80c570:	b80f883a 	mov	r7,r23
  80c574:	40800015 	stw	r2,0(r8)
  80c578:	20c00117 	ldw	r3,4(r4)
  80c57c:	40c00115 	stw	r3,4(r8)
  80c580:	20800217 	ldw	r2,8(r4)
  80c584:	40800215 	stw	r2,8(r8)
  80c588:	003f9706 	br	80c3e8 <_realloc_r+0x84>
  80c58c:	98a9883a 	add	r20,r19,r2
  80c590:	a1c01f16 	blt	r20,r7,80c610 <_realloc_r+0x2ac>
  80c594:	b8c00317 	ldw	r3,12(r23)
  80c598:	b8800217 	ldw	r2,8(r23)
  80c59c:	99bfff04 	addi	r6,r19,-4
  80c5a0:	01400904 	movi	r5,36
  80c5a4:	b82b883a 	mov	r21,r23
  80c5a8:	18800215 	stw	r2,8(r3)
  80c5ac:	10c00315 	stw	r3,12(r2)
  80c5b0:	bc000204 	addi	r16,r23,8
  80c5b4:	2980c336 	bltu	r5,r6,80c8c4 <_realloc_r+0x560>
  80c5b8:	008004c4 	movi	r2,19
  80c5bc:	9009883a 	mov	r4,r18
  80c5c0:	8011883a 	mov	r8,r16
  80c5c4:	11800f2e 	bgeu	r2,r6,80c604 <_realloc_r+0x2a0>
  80c5c8:	90800017 	ldw	r2,0(r18)
  80c5cc:	ba000404 	addi	r8,r23,16
  80c5d0:	91000204 	addi	r4,r18,8
  80c5d4:	b8800215 	stw	r2,8(r23)
  80c5d8:	90c00117 	ldw	r3,4(r18)
  80c5dc:	008006c4 	movi	r2,27
  80c5e0:	b8c00315 	stw	r3,12(r23)
  80c5e4:	1180072e 	bgeu	r2,r6,80c604 <_realloc_r+0x2a0>
  80c5e8:	90c00217 	ldw	r3,8(r18)
  80c5ec:	ba000604 	addi	r8,r23,24
  80c5f0:	91000404 	addi	r4,r18,16
  80c5f4:	b8c00415 	stw	r3,16(r23)
  80c5f8:	90800317 	ldw	r2,12(r18)
  80c5fc:	b8800515 	stw	r2,20(r23)
  80c600:	3140c726 	beq	r6,r5,80c920 <_realloc_r+0x5bc>
  80c604:	20800017 	ldw	r2,0(r4)
  80c608:	b80f883a 	mov	r7,r23
  80c60c:	003fd906 	br	80c574 <_realloc_r+0x210>
  80c610:	880b883a 	mov	r5,r17
  80c614:	b009883a 	mov	r4,r22
  80c618:	080a89c0 	call	80a89c <_malloc_r>
  80c61c:	1023883a 	mov	r17,r2
  80c620:	10002526 	beq	r2,zero,80c6b8 <_realloc_r+0x354>
  80c624:	80800117 	ldw	r2,4(r16)
  80c628:	00ffff84 	movi	r3,-2
  80c62c:	893ffe04 	addi	r4,r17,-8
  80c630:	10c4703a 	and	r2,r2,r3
  80c634:	8085883a 	add	r2,r16,r2
  80c638:	20809526 	beq	r4,r2,80c890 <_realloc_r+0x52c>
  80c63c:	99bfff04 	addi	r6,r19,-4
  80c640:	01c00904 	movi	r7,36
  80c644:	39804536 	bltu	r7,r6,80c75c <_realloc_r+0x3f8>
  80c648:	008004c4 	movi	r2,19
  80c64c:	9009883a 	mov	r4,r18
  80c650:	880b883a 	mov	r5,r17
  80c654:	11800f2e 	bgeu	r2,r6,80c694 <_realloc_r+0x330>
  80c658:	90800017 	ldw	r2,0(r18)
  80c65c:	89400204 	addi	r5,r17,8
  80c660:	91000204 	addi	r4,r18,8
  80c664:	88800015 	stw	r2,0(r17)
  80c668:	90c00117 	ldw	r3,4(r18)
  80c66c:	008006c4 	movi	r2,27
  80c670:	88c00115 	stw	r3,4(r17)
  80c674:	1180072e 	bgeu	r2,r6,80c694 <_realloc_r+0x330>
  80c678:	90c00217 	ldw	r3,8(r18)
  80c67c:	89400404 	addi	r5,r17,16
  80c680:	91000404 	addi	r4,r18,16
  80c684:	88c00215 	stw	r3,8(r17)
  80c688:	90800317 	ldw	r2,12(r18)
  80c68c:	88800315 	stw	r2,12(r17)
  80c690:	31c09126 	beq	r6,r7,80c8d8 <_realloc_r+0x574>
  80c694:	20800017 	ldw	r2,0(r4)
  80c698:	28800015 	stw	r2,0(r5)
  80c69c:	20c00117 	ldw	r3,4(r4)
  80c6a0:	28c00115 	stw	r3,4(r5)
  80c6a4:	20800217 	ldw	r2,8(r4)
  80c6a8:	28800215 	stw	r2,8(r5)
  80c6ac:	900b883a 	mov	r5,r18
  80c6b0:	b009883a 	mov	r4,r22
  80c6b4:	0809d140 	call	809d14 <_free_r>
  80c6b8:	b009883a 	mov	r4,r22
  80c6bc:	080eed40 	call	80eed4 <__malloc_unlock>
  80c6c0:	003f5e06 	br	80c43c <_realloc_r+0xd8>
  80c6c4:	300b883a 	mov	r5,r6
  80c6c8:	dfc00b17 	ldw	ra,44(sp)
  80c6cc:	df000a17 	ldw	fp,40(sp)
  80c6d0:	ddc00917 	ldw	r23,36(sp)
  80c6d4:	dd800817 	ldw	r22,32(sp)
  80c6d8:	dd400717 	ldw	r21,28(sp)
  80c6dc:	dd000617 	ldw	r20,24(sp)
  80c6e0:	dcc00517 	ldw	r19,20(sp)
  80c6e4:	dc800417 	ldw	r18,16(sp)
  80c6e8:	dc400317 	ldw	r17,12(sp)
  80c6ec:	dc000217 	ldw	r16,8(sp)
  80c6f0:	dec00c04 	addi	sp,sp,48
  80c6f4:	080a89c1 	jmpi	80a89c <_malloc_r>
  80c6f8:	38800117 	ldw	r2,4(r7)
  80c6fc:	e54b883a 	add	r5,fp,r21
  80c700:	31000054 	ori	r4,r6,1
  80c704:	1080004c 	andi	r2,r2,1
  80c708:	1704b03a 	or	r2,r2,fp
  80c70c:	38800115 	stw	r2,4(r7)
  80c710:	29000115 	stw	r4,4(r5)
  80c714:	2987883a 	add	r3,r5,r6
  80c718:	18800117 	ldw	r2,4(r3)
  80c71c:	29400204 	addi	r5,r5,8
  80c720:	b009883a 	mov	r4,r22
  80c724:	10800054 	ori	r2,r2,1
  80c728:	18800115 	stw	r2,4(r3)
  80c72c:	0809d140 	call	809d14 <_free_r>
  80c730:	003f3806 	br	80c414 <_realloc_r+0xb0>
  80c734:	000d883a 	mov	r6,zero
  80c738:	0009883a 	mov	r4,zero
  80c73c:	003f5d06 	br	80c4b4 <_realloc_r+0x150>
  80c740:	30c00217 	ldw	r3,8(r6)
  80c744:	30800317 	ldw	r2,12(r6)
  80c748:	800f883a 	mov	r7,r16
  80c74c:	84000204 	addi	r16,r16,8
  80c750:	10c00215 	stw	r3,8(r2)
  80c754:	18800315 	stw	r2,12(r3)
  80c758:	003f2306 	br	80c3e8 <_realloc_r+0x84>
  80c75c:	8809883a 	mov	r4,r17
  80c760:	900b883a 	mov	r5,r18
  80c764:	080b1600 	call	80b160 <memmove>
  80c768:	003fd006 	br	80c6ac <_realloc_r+0x348>
  80c76c:	30800117 	ldw	r2,4(r6)
  80c770:	e0c00404 	addi	r3,fp,16
  80c774:	1108703a 	and	r4,r2,r4
  80c778:	9905883a 	add	r2,r19,r4
  80c77c:	10ff4d16 	blt	r2,r3,80c4b4 <_realloc_r+0x150>
  80c780:	1705c83a 	sub	r2,r2,fp
  80c784:	870b883a 	add	r5,r16,fp
  80c788:	10800054 	ori	r2,r2,1
  80c78c:	28800115 	stw	r2,4(r5)
  80c790:	80c00117 	ldw	r3,4(r16)
  80c794:	008020b4 	movhi	r2,130
  80c798:	10aae804 	addi	r2,r2,-21600
  80c79c:	b009883a 	mov	r4,r22
  80c7a0:	18c0004c 	andi	r3,r3,1
  80c7a4:	e0c6b03a 	or	r3,fp,r3
  80c7a8:	11400215 	stw	r5,8(r2)
  80c7ac:	80c00115 	stw	r3,4(r16)
  80c7b0:	080eed40 	call	80eed4 <__malloc_unlock>
  80c7b4:	84400204 	addi	r17,r16,8
  80c7b8:	003f2006 	br	80c43c <_realloc_r+0xd8>
  80c7bc:	98a9883a 	add	r20,r19,r2
  80c7c0:	2509883a 	add	r4,r4,r20
  80c7c4:	e0800404 	addi	r2,fp,16
  80c7c8:	d9000115 	stw	r4,4(sp)
  80c7cc:	20bf7016 	blt	r4,r2,80c590 <_realloc_r+0x22c>
  80c7d0:	b8c00317 	ldw	r3,12(r23)
  80c7d4:	b8800217 	ldw	r2,8(r23)
  80c7d8:	99bfff04 	addi	r6,r19,-4
  80c7dc:	01400904 	movi	r5,36
  80c7e0:	18800215 	stw	r2,8(r3)
  80c7e4:	10c00315 	stw	r3,12(r2)
  80c7e8:	bc400204 	addi	r17,r23,8
  80c7ec:	29804136 	bltu	r5,r6,80c8f4 <_realloc_r+0x590>
  80c7f0:	008004c4 	movi	r2,19
  80c7f4:	9009883a 	mov	r4,r18
  80c7f8:	880f883a 	mov	r7,r17
  80c7fc:	11800f2e 	bgeu	r2,r6,80c83c <_realloc_r+0x4d8>
  80c800:	90800017 	ldw	r2,0(r18)
  80c804:	b9c00404 	addi	r7,r23,16
  80c808:	91000204 	addi	r4,r18,8
  80c80c:	b8800215 	stw	r2,8(r23)
  80c810:	90c00117 	ldw	r3,4(r18)
  80c814:	008006c4 	movi	r2,27
  80c818:	b8c00315 	stw	r3,12(r23)
  80c81c:	1180072e 	bgeu	r2,r6,80c83c <_realloc_r+0x4d8>
  80c820:	90c00217 	ldw	r3,8(r18)
  80c824:	b9c00604 	addi	r7,r23,24
  80c828:	91000404 	addi	r4,r18,16
  80c82c:	b8c00415 	stw	r3,16(r23)
  80c830:	90800317 	ldw	r2,12(r18)
  80c834:	b8800515 	stw	r2,20(r23)
  80c838:	31404026 	beq	r6,r5,80c93c <_realloc_r+0x5d8>
  80c83c:	20800017 	ldw	r2,0(r4)
  80c840:	38800015 	stw	r2,0(r7)
  80c844:	20c00117 	ldw	r3,4(r4)
  80c848:	38c00115 	stw	r3,4(r7)
  80c84c:	20800217 	ldw	r2,8(r4)
  80c850:	38800215 	stw	r2,8(r7)
  80c854:	d8c00117 	ldw	r3,4(sp)
  80c858:	bf0b883a 	add	r5,r23,fp
  80c85c:	b009883a 	mov	r4,r22
  80c860:	1f05c83a 	sub	r2,r3,fp
  80c864:	10800054 	ori	r2,r2,1
  80c868:	28800115 	stw	r2,4(r5)
  80c86c:	b8c00117 	ldw	r3,4(r23)
  80c870:	008020b4 	movhi	r2,130
  80c874:	10aae804 	addi	r2,r2,-21600
  80c878:	11400215 	stw	r5,8(r2)
  80c87c:	18c0004c 	andi	r3,r3,1
  80c880:	e0c6b03a 	or	r3,fp,r3
  80c884:	b8c00115 	stw	r3,4(r23)
  80c888:	080eed40 	call	80eed4 <__malloc_unlock>
  80c88c:	003eeb06 	br	80c43c <_realloc_r+0xd8>
  80c890:	20800117 	ldw	r2,4(r4)
  80c894:	00ffff04 	movi	r3,-4
  80c898:	800f883a 	mov	r7,r16
  80c89c:	10c4703a 	and	r2,r2,r3
  80c8a0:	98a9883a 	add	r20,r19,r2
  80c8a4:	84000204 	addi	r16,r16,8
  80c8a8:	003ecf06 	br	80c3e8 <_realloc_r+0x84>
  80c8ac:	900b883a 	mov	r5,r18
  80c8b0:	8009883a 	mov	r4,r16
  80c8b4:	080b1600 	call	80b160 <memmove>
  80c8b8:	dd000017 	ldw	r20,0(sp)
  80c8bc:	b80f883a 	mov	r7,r23
  80c8c0:	003ec906 	br	80c3e8 <_realloc_r+0x84>
  80c8c4:	900b883a 	mov	r5,r18
  80c8c8:	8009883a 	mov	r4,r16
  80c8cc:	080b1600 	call	80b160 <memmove>
  80c8d0:	b80f883a 	mov	r7,r23
  80c8d4:	003ec406 	br	80c3e8 <_realloc_r+0x84>
  80c8d8:	90c00417 	ldw	r3,16(r18)
  80c8dc:	89400604 	addi	r5,r17,24
  80c8e0:	91000604 	addi	r4,r18,24
  80c8e4:	88c00415 	stw	r3,16(r17)
  80c8e8:	90800517 	ldw	r2,20(r18)
  80c8ec:	88800515 	stw	r2,20(r17)
  80c8f0:	003f6806 	br	80c694 <_realloc_r+0x330>
  80c8f4:	900b883a 	mov	r5,r18
  80c8f8:	8809883a 	mov	r4,r17
  80c8fc:	080b1600 	call	80b160 <memmove>
  80c900:	003fd406 	br	80c854 <_realloc_r+0x4f0>
  80c904:	90c00417 	ldw	r3,16(r18)
  80c908:	91000604 	addi	r4,r18,24
  80c90c:	ba000804 	addi	r8,r23,32
  80c910:	b8c00615 	stw	r3,24(r23)
  80c914:	90800517 	ldw	r2,20(r18)
  80c918:	b8800715 	stw	r2,28(r23)
  80c91c:	003f1206 	br	80c568 <_realloc_r+0x204>
  80c920:	90c00417 	ldw	r3,16(r18)
  80c924:	91000604 	addi	r4,r18,24
  80c928:	ba000804 	addi	r8,r23,32
  80c92c:	b8c00615 	stw	r3,24(r23)
  80c930:	90800517 	ldw	r2,20(r18)
  80c934:	b8800715 	stw	r2,28(r23)
  80c938:	003f3206 	br	80c604 <_realloc_r+0x2a0>
  80c93c:	90c00417 	ldw	r3,16(r18)
  80c940:	91000604 	addi	r4,r18,24
  80c944:	b9c00804 	addi	r7,r23,32
  80c948:	b8c00615 	stw	r3,24(r23)
  80c94c:	90800517 	ldw	r2,20(r18)
  80c950:	b8800715 	stw	r2,28(r23)
  80c954:	003fb906 	br	80c83c <_realloc_r+0x4d8>

0080c958 <__isinfd>:
  80c958:	200d883a 	mov	r6,r4
  80c95c:	0109c83a 	sub	r4,zero,r4
  80c960:	2188b03a 	or	r4,r4,r6
  80c964:	2008d7fa 	srli	r4,r4,31
  80c968:	00a00034 	movhi	r2,32768
  80c96c:	10bfffc4 	addi	r2,r2,-1
  80c970:	1144703a 	and	r2,r2,r5
  80c974:	2088b03a 	or	r4,r4,r2
  80c978:	009ffc34 	movhi	r2,32752
  80c97c:	1105c83a 	sub	r2,r2,r4
  80c980:	0087c83a 	sub	r3,zero,r2
  80c984:	10c4b03a 	or	r2,r2,r3
  80c988:	1004d7fa 	srli	r2,r2,31
  80c98c:	00c00044 	movi	r3,1
  80c990:	1885c83a 	sub	r2,r3,r2
  80c994:	f800283a 	ret

0080c998 <_sbrk_r>:
  80c998:	defffd04 	addi	sp,sp,-12
  80c99c:	dc000015 	stw	r16,0(sp)
  80c9a0:	040020b4 	movhi	r16,130
  80c9a4:	8437a504 	addi	r16,r16,-8556
  80c9a8:	dc400115 	stw	r17,4(sp)
  80c9ac:	80000015 	stw	zero,0(r16)
  80c9b0:	2023883a 	mov	r17,r4
  80c9b4:	2809883a 	mov	r4,r5
  80c9b8:	dfc00215 	stw	ra,8(sp)
  80c9bc:	080e9640 	call	80e964 <sbrk>
  80c9c0:	1007883a 	mov	r3,r2
  80c9c4:	00bfffc4 	movi	r2,-1
  80c9c8:	18800626 	beq	r3,r2,80c9e4 <_sbrk_r+0x4c>
  80c9cc:	1805883a 	mov	r2,r3
  80c9d0:	dfc00217 	ldw	ra,8(sp)
  80c9d4:	dc400117 	ldw	r17,4(sp)
  80c9d8:	dc000017 	ldw	r16,0(sp)
  80c9dc:	dec00304 	addi	sp,sp,12
  80c9e0:	f800283a 	ret
  80c9e4:	80800017 	ldw	r2,0(r16)
  80c9e8:	103ff826 	beq	r2,zero,80c9cc <_sbrk_r+0x34>
  80c9ec:	88800015 	stw	r2,0(r17)
  80c9f0:	1805883a 	mov	r2,r3
  80c9f4:	dfc00217 	ldw	ra,8(sp)
  80c9f8:	dc400117 	ldw	r17,4(sp)
  80c9fc:	dc000017 	ldw	r16,0(sp)
  80ca00:	dec00304 	addi	sp,sp,12
  80ca04:	f800283a 	ret

0080ca08 <__sclose>:
  80ca08:	2940038f 	ldh	r5,14(r5)
  80ca0c:	080cd501 	jmpi	80cd50 <_close_r>

0080ca10 <__sseek>:
  80ca10:	defffe04 	addi	sp,sp,-8
  80ca14:	dc000015 	stw	r16,0(sp)
  80ca18:	2821883a 	mov	r16,r5
  80ca1c:	2940038f 	ldh	r5,14(r5)
  80ca20:	dfc00115 	stw	ra,4(sp)
  80ca24:	080cfc80 	call	80cfc8 <_lseek_r>
  80ca28:	1007883a 	mov	r3,r2
  80ca2c:	00bfffc4 	movi	r2,-1
  80ca30:	18800926 	beq	r3,r2,80ca58 <__sseek+0x48>
  80ca34:	8080030b 	ldhu	r2,12(r16)
  80ca38:	80c01415 	stw	r3,80(r16)
  80ca3c:	10840014 	ori	r2,r2,4096
  80ca40:	8080030d 	sth	r2,12(r16)
  80ca44:	1805883a 	mov	r2,r3
  80ca48:	dfc00117 	ldw	ra,4(sp)
  80ca4c:	dc000017 	ldw	r16,0(sp)
  80ca50:	dec00204 	addi	sp,sp,8
  80ca54:	f800283a 	ret
  80ca58:	8080030b 	ldhu	r2,12(r16)
  80ca5c:	10bbffcc 	andi	r2,r2,61439
  80ca60:	8080030d 	sth	r2,12(r16)
  80ca64:	1805883a 	mov	r2,r3
  80ca68:	dfc00117 	ldw	ra,4(sp)
  80ca6c:	dc000017 	ldw	r16,0(sp)
  80ca70:	dec00204 	addi	sp,sp,8
  80ca74:	f800283a 	ret

0080ca78 <__swrite>:
  80ca78:	2880030b 	ldhu	r2,12(r5)
  80ca7c:	defffb04 	addi	sp,sp,-20
  80ca80:	dcc00315 	stw	r19,12(sp)
  80ca84:	1080400c 	andi	r2,r2,256
  80ca88:	dc800215 	stw	r18,8(sp)
  80ca8c:	dc400115 	stw	r17,4(sp)
  80ca90:	dc000015 	stw	r16,0(sp)
  80ca94:	3027883a 	mov	r19,r6
  80ca98:	3825883a 	mov	r18,r7
  80ca9c:	dfc00415 	stw	ra,16(sp)
  80caa0:	2821883a 	mov	r16,r5
  80caa4:	000d883a 	mov	r6,zero
  80caa8:	01c00084 	movi	r7,2
  80caac:	2023883a 	mov	r17,r4
  80cab0:	10000226 	beq	r2,zero,80cabc <__swrite+0x44>
  80cab4:	2940038f 	ldh	r5,14(r5)
  80cab8:	080cfc80 	call	80cfc8 <_lseek_r>
  80cabc:	8080030b 	ldhu	r2,12(r16)
  80cac0:	8140038f 	ldh	r5,14(r16)
  80cac4:	8809883a 	mov	r4,r17
  80cac8:	10bbffcc 	andi	r2,r2,61439
  80cacc:	980d883a 	mov	r6,r19
  80cad0:	900f883a 	mov	r7,r18
  80cad4:	8080030d 	sth	r2,12(r16)
  80cad8:	dfc00417 	ldw	ra,16(sp)
  80cadc:	dcc00317 	ldw	r19,12(sp)
  80cae0:	dc800217 	ldw	r18,8(sp)
  80cae4:	dc400117 	ldw	r17,4(sp)
  80cae8:	dc000017 	ldw	r16,0(sp)
  80caec:	dec00504 	addi	sp,sp,20
  80caf0:	080cc101 	jmpi	80cc10 <_write_r>

0080caf4 <__sread>:
  80caf4:	defffe04 	addi	sp,sp,-8
  80caf8:	dc000015 	stw	r16,0(sp)
  80cafc:	2821883a 	mov	r16,r5
  80cb00:	2940038f 	ldh	r5,14(r5)
  80cb04:	dfc00115 	stw	ra,4(sp)
  80cb08:	080d0400 	call	80d040 <_read_r>
  80cb0c:	1007883a 	mov	r3,r2
  80cb10:	10000816 	blt	r2,zero,80cb34 <__sread+0x40>
  80cb14:	80801417 	ldw	r2,80(r16)
  80cb18:	10c5883a 	add	r2,r2,r3
  80cb1c:	80801415 	stw	r2,80(r16)
  80cb20:	1805883a 	mov	r2,r3
  80cb24:	dfc00117 	ldw	ra,4(sp)
  80cb28:	dc000017 	ldw	r16,0(sp)
  80cb2c:	dec00204 	addi	sp,sp,8
  80cb30:	f800283a 	ret
  80cb34:	8080030b 	ldhu	r2,12(r16)
  80cb38:	10bbffcc 	andi	r2,r2,61439
  80cb3c:	8080030d 	sth	r2,12(r16)
  80cb40:	1805883a 	mov	r2,r3
  80cb44:	dfc00117 	ldw	ra,4(sp)
  80cb48:	dc000017 	ldw	r16,0(sp)
  80cb4c:	dec00204 	addi	sp,sp,8
  80cb50:	f800283a 	ret

0080cb54 <strcmp>:
  80cb54:	2144b03a 	or	r2,r4,r5
  80cb58:	108000cc 	andi	r2,r2,3
  80cb5c:	10001d1e 	bne	r2,zero,80cbd4 <strcmp+0x80>
  80cb60:	200f883a 	mov	r7,r4
  80cb64:	28800017 	ldw	r2,0(r5)
  80cb68:	21000017 	ldw	r4,0(r4)
  80cb6c:	280d883a 	mov	r6,r5
  80cb70:	2080161e 	bne	r4,r2,80cbcc <strcmp+0x78>
  80cb74:	023fbff4 	movhi	r8,65279
  80cb78:	423fbfc4 	addi	r8,r8,-257
  80cb7c:	2207883a 	add	r3,r4,r8
  80cb80:	01602074 	movhi	r5,32897
  80cb84:	29602004 	addi	r5,r5,-32640
  80cb88:	1946703a 	and	r3,r3,r5
  80cb8c:	0104303a 	nor	r2,zero,r4
  80cb90:	10c4703a 	and	r2,r2,r3
  80cb94:	10001c1e 	bne	r2,zero,80cc08 <strcmp+0xb4>
  80cb98:	4013883a 	mov	r9,r8
  80cb9c:	2811883a 	mov	r8,r5
  80cba0:	00000106 	br	80cba8 <strcmp+0x54>
  80cba4:	1800181e 	bne	r3,zero,80cc08 <strcmp+0xb4>
  80cba8:	39c00104 	addi	r7,r7,4
  80cbac:	39000017 	ldw	r4,0(r7)
  80cbb0:	31800104 	addi	r6,r6,4
  80cbb4:	31400017 	ldw	r5,0(r6)
  80cbb8:	2245883a 	add	r2,r4,r9
  80cbbc:	1204703a 	and	r2,r2,r8
  80cbc0:	0106303a 	nor	r3,zero,r4
  80cbc4:	1886703a 	and	r3,r3,r2
  80cbc8:	217ff626 	beq	r4,r5,80cba4 <strcmp+0x50>
  80cbcc:	3809883a 	mov	r4,r7
  80cbd0:	300b883a 	mov	r5,r6
  80cbd4:	20c00007 	ldb	r3,0(r4)
  80cbd8:	1800051e 	bne	r3,zero,80cbf0 <strcmp+0x9c>
  80cbdc:	00000606 	br	80cbf8 <strcmp+0xa4>
  80cbe0:	21000044 	addi	r4,r4,1
  80cbe4:	20c00007 	ldb	r3,0(r4)
  80cbe8:	29400044 	addi	r5,r5,1
  80cbec:	18000226 	beq	r3,zero,80cbf8 <strcmp+0xa4>
  80cbf0:	28800007 	ldb	r2,0(r5)
  80cbf4:	18bffa26 	beq	r3,r2,80cbe0 <strcmp+0x8c>
  80cbf8:	20c00003 	ldbu	r3,0(r4)
  80cbfc:	28800003 	ldbu	r2,0(r5)
  80cc00:	1885c83a 	sub	r2,r3,r2
  80cc04:	f800283a 	ret
  80cc08:	0005883a 	mov	r2,zero
  80cc0c:	f800283a 	ret

0080cc10 <_write_r>:
  80cc10:	defffd04 	addi	sp,sp,-12
  80cc14:	dc000015 	stw	r16,0(sp)
  80cc18:	040020b4 	movhi	r16,130
  80cc1c:	8437a504 	addi	r16,r16,-8556
  80cc20:	dc400115 	stw	r17,4(sp)
  80cc24:	80000015 	stw	zero,0(r16)
  80cc28:	2023883a 	mov	r17,r4
  80cc2c:	2809883a 	mov	r4,r5
  80cc30:	300b883a 	mov	r5,r6
  80cc34:	380d883a 	mov	r6,r7
  80cc38:	dfc00215 	stw	ra,8(sp)
  80cc3c:	080eb400 	call	80eb40 <write>
  80cc40:	1007883a 	mov	r3,r2
  80cc44:	00bfffc4 	movi	r2,-1
  80cc48:	18800626 	beq	r3,r2,80cc64 <_write_r+0x54>
  80cc4c:	1805883a 	mov	r2,r3
  80cc50:	dfc00217 	ldw	ra,8(sp)
  80cc54:	dc400117 	ldw	r17,4(sp)
  80cc58:	dc000017 	ldw	r16,0(sp)
  80cc5c:	dec00304 	addi	sp,sp,12
  80cc60:	f800283a 	ret
  80cc64:	80800017 	ldw	r2,0(r16)
  80cc68:	103ff826 	beq	r2,zero,80cc4c <_write_r+0x3c>
  80cc6c:	88800015 	stw	r2,0(r17)
  80cc70:	1805883a 	mov	r2,r3
  80cc74:	dfc00217 	ldw	ra,8(sp)
  80cc78:	dc400117 	ldw	r17,4(sp)
  80cc7c:	dc000017 	ldw	r16,0(sp)
  80cc80:	dec00304 	addi	sp,sp,12
  80cc84:	f800283a 	ret

0080cc88 <_calloc_r>:
  80cc88:	defffe04 	addi	sp,sp,-8
  80cc8c:	dc400015 	stw	r17,0(sp)
  80cc90:	2023883a 	mov	r17,r4
  80cc94:	2809883a 	mov	r4,r5
  80cc98:	300b883a 	mov	r5,r6
  80cc9c:	dfc00115 	stw	ra,4(sp)
  80cca0:	080535c0 	call	80535c <__mulsi3>
  80cca4:	100b883a 	mov	r5,r2
  80cca8:	8809883a 	mov	r4,r17
  80ccac:	080a89c0 	call	80a89c <_malloc_r>
  80ccb0:	1023883a 	mov	r17,r2
  80ccb4:	01c00904 	movi	r7,36
  80ccb8:	10000d26 	beq	r2,zero,80ccf0 <_calloc_r+0x68>
  80ccbc:	10ffff17 	ldw	r3,-4(r2)
  80ccc0:	1009883a 	mov	r4,r2
  80ccc4:	00bfff04 	movi	r2,-4
  80ccc8:	1886703a 	and	r3,r3,r2
  80cccc:	1887883a 	add	r3,r3,r2
  80ccd0:	180d883a 	mov	r6,r3
  80ccd4:	000b883a 	mov	r5,zero
  80ccd8:	38c01736 	bltu	r7,r3,80cd38 <_calloc_r+0xb0>
  80ccdc:	008004c4 	movi	r2,19
  80cce0:	10c00836 	bltu	r2,r3,80cd04 <_calloc_r+0x7c>
  80cce4:	20000215 	stw	zero,8(r4)
  80cce8:	20000015 	stw	zero,0(r4)
  80ccec:	20000115 	stw	zero,4(r4)
  80ccf0:	8805883a 	mov	r2,r17
  80ccf4:	dfc00117 	ldw	ra,4(sp)
  80ccf8:	dc400017 	ldw	r17,0(sp)
  80ccfc:	dec00204 	addi	sp,sp,8
  80cd00:	f800283a 	ret
  80cd04:	008006c4 	movi	r2,27
  80cd08:	88000015 	stw	zero,0(r17)
  80cd0c:	88000115 	stw	zero,4(r17)
  80cd10:	89000204 	addi	r4,r17,8
  80cd14:	10fff32e 	bgeu	r2,r3,80cce4 <_calloc_r+0x5c>
  80cd18:	88000215 	stw	zero,8(r17)
  80cd1c:	88000315 	stw	zero,12(r17)
  80cd20:	89000404 	addi	r4,r17,16
  80cd24:	19ffef1e 	bne	r3,r7,80cce4 <_calloc_r+0x5c>
  80cd28:	89000604 	addi	r4,r17,24
  80cd2c:	88000415 	stw	zero,16(r17)
  80cd30:	88000515 	stw	zero,20(r17)
  80cd34:	003feb06 	br	80cce4 <_calloc_r+0x5c>
  80cd38:	080b2400 	call	80b240 <memset>
  80cd3c:	8805883a 	mov	r2,r17
  80cd40:	dfc00117 	ldw	ra,4(sp)
  80cd44:	dc400017 	ldw	r17,0(sp)
  80cd48:	dec00204 	addi	sp,sp,8
  80cd4c:	f800283a 	ret

0080cd50 <_close_r>:
  80cd50:	defffd04 	addi	sp,sp,-12
  80cd54:	dc000015 	stw	r16,0(sp)
  80cd58:	040020b4 	movhi	r16,130
  80cd5c:	8437a504 	addi	r16,r16,-8556
  80cd60:	dc400115 	stw	r17,4(sp)
  80cd64:	80000015 	stw	zero,0(r16)
  80cd68:	2023883a 	mov	r17,r4
  80cd6c:	2809883a 	mov	r4,r5
  80cd70:	dfc00215 	stw	ra,8(sp)
  80cd74:	080e0780 	call	80e078 <close>
  80cd78:	1007883a 	mov	r3,r2
  80cd7c:	00bfffc4 	movi	r2,-1
  80cd80:	18800626 	beq	r3,r2,80cd9c <_close_r+0x4c>
  80cd84:	1805883a 	mov	r2,r3
  80cd88:	dfc00217 	ldw	ra,8(sp)
  80cd8c:	dc400117 	ldw	r17,4(sp)
  80cd90:	dc000017 	ldw	r16,0(sp)
  80cd94:	dec00304 	addi	sp,sp,12
  80cd98:	f800283a 	ret
  80cd9c:	80800017 	ldw	r2,0(r16)
  80cda0:	103ff826 	beq	r2,zero,80cd84 <_close_r+0x34>
  80cda4:	88800015 	stw	r2,0(r17)
  80cda8:	1805883a 	mov	r2,r3
  80cdac:	dfc00217 	ldw	ra,8(sp)
  80cdb0:	dc400117 	ldw	r17,4(sp)
  80cdb4:	dc000017 	ldw	r16,0(sp)
  80cdb8:	dec00304 	addi	sp,sp,12
  80cdbc:	f800283a 	ret

0080cdc0 <_fclose_r>:
  80cdc0:	defffc04 	addi	sp,sp,-16
  80cdc4:	dc400115 	stw	r17,4(sp)
  80cdc8:	dc000015 	stw	r16,0(sp)
  80cdcc:	dfc00315 	stw	ra,12(sp)
  80cdd0:	dc800215 	stw	r18,8(sp)
  80cdd4:	2821883a 	mov	r16,r5
  80cdd8:	2023883a 	mov	r17,r4
  80cddc:	28002926 	beq	r5,zero,80ce84 <_fclose_r+0xc4>
  80cde0:	080994c0 	call	80994c <__sfp_lock_acquire>
  80cde4:	88000226 	beq	r17,zero,80cdf0 <_fclose_r+0x30>
  80cde8:	88800e17 	ldw	r2,56(r17)
  80cdec:	10002d26 	beq	r2,zero,80cea4 <_fclose_r+0xe4>
  80cdf0:	8080030f 	ldh	r2,12(r16)
  80cdf4:	10002226 	beq	r2,zero,80ce80 <_fclose_r+0xc0>
  80cdf8:	8809883a 	mov	r4,r17
  80cdfc:	800b883a 	mov	r5,r16
  80ce00:	08096c40 	call	8096c4 <_fflush_r>
  80ce04:	1025883a 	mov	r18,r2
  80ce08:	80800b17 	ldw	r2,44(r16)
  80ce0c:	10000426 	beq	r2,zero,80ce20 <_fclose_r+0x60>
  80ce10:	81400717 	ldw	r5,28(r16)
  80ce14:	8809883a 	mov	r4,r17
  80ce18:	103ee83a 	callr	r2
  80ce1c:	10002a16 	blt	r2,zero,80cec8 <_fclose_r+0x108>
  80ce20:	8080030b 	ldhu	r2,12(r16)
  80ce24:	1080200c 	andi	r2,r2,128
  80ce28:	1000231e 	bne	r2,zero,80ceb8 <_fclose_r+0xf8>
  80ce2c:	81400c17 	ldw	r5,48(r16)
  80ce30:	28000526 	beq	r5,zero,80ce48 <_fclose_r+0x88>
  80ce34:	80801004 	addi	r2,r16,64
  80ce38:	28800226 	beq	r5,r2,80ce44 <_fclose_r+0x84>
  80ce3c:	8809883a 	mov	r4,r17
  80ce40:	0809d140 	call	809d14 <_free_r>
  80ce44:	80000c15 	stw	zero,48(r16)
  80ce48:	81401117 	ldw	r5,68(r16)
  80ce4c:	28000326 	beq	r5,zero,80ce5c <_fclose_r+0x9c>
  80ce50:	8809883a 	mov	r4,r17
  80ce54:	0809d140 	call	809d14 <_free_r>
  80ce58:	80001115 	stw	zero,68(r16)
  80ce5c:	8000030d 	sth	zero,12(r16)
  80ce60:	08099500 	call	809950 <__sfp_lock_release>
  80ce64:	9005883a 	mov	r2,r18
  80ce68:	dfc00317 	ldw	ra,12(sp)
  80ce6c:	dc800217 	ldw	r18,8(sp)
  80ce70:	dc400117 	ldw	r17,4(sp)
  80ce74:	dc000017 	ldw	r16,0(sp)
  80ce78:	dec00404 	addi	sp,sp,16
  80ce7c:	f800283a 	ret
  80ce80:	08099500 	call	809950 <__sfp_lock_release>
  80ce84:	0025883a 	mov	r18,zero
  80ce88:	9005883a 	mov	r2,r18
  80ce8c:	dfc00317 	ldw	ra,12(sp)
  80ce90:	dc800217 	ldw	r18,8(sp)
  80ce94:	dc400117 	ldw	r17,4(sp)
  80ce98:	dc000017 	ldw	r16,0(sp)
  80ce9c:	dec00404 	addi	sp,sp,16
  80cea0:	f800283a 	ret
  80cea4:	8809883a 	mov	r4,r17
  80cea8:	080995c0 	call	80995c <__sinit>
  80ceac:	8080030f 	ldh	r2,12(r16)
  80ceb0:	103fd11e 	bne	r2,zero,80cdf8 <_fclose_r+0x38>
  80ceb4:	003ff206 	br	80ce80 <_fclose_r+0xc0>
  80ceb8:	81400417 	ldw	r5,16(r16)
  80cebc:	8809883a 	mov	r4,r17
  80cec0:	0809d140 	call	809d14 <_free_r>
  80cec4:	003fd906 	br	80ce2c <_fclose_r+0x6c>
  80cec8:	04bfffc4 	movi	r18,-1
  80cecc:	003fd406 	br	80ce20 <_fclose_r+0x60>

0080ced0 <fclose>:
  80ced0:	008020b4 	movhi	r2,130
  80ced4:	10b09304 	addi	r2,r2,-15796
  80ced8:	200b883a 	mov	r5,r4
  80cedc:	11000017 	ldw	r4,0(r2)
  80cee0:	080cdc01 	jmpi	80cdc0 <_fclose_r>

0080cee4 <_fstat_r>:
  80cee4:	defffd04 	addi	sp,sp,-12
  80cee8:	dc000015 	stw	r16,0(sp)
  80ceec:	040020b4 	movhi	r16,130
  80cef0:	8437a504 	addi	r16,r16,-8556
  80cef4:	dc400115 	stw	r17,4(sp)
  80cef8:	80000015 	stw	zero,0(r16)
  80cefc:	2023883a 	mov	r17,r4
  80cf00:	2809883a 	mov	r4,r5
  80cf04:	300b883a 	mov	r5,r6
  80cf08:	dfc00215 	stw	ra,8(sp)
  80cf0c:	080e2040 	call	80e204 <fstat>
  80cf10:	1007883a 	mov	r3,r2
  80cf14:	00bfffc4 	movi	r2,-1
  80cf18:	18800626 	beq	r3,r2,80cf34 <_fstat_r+0x50>
  80cf1c:	1805883a 	mov	r2,r3
  80cf20:	dfc00217 	ldw	ra,8(sp)
  80cf24:	dc400117 	ldw	r17,4(sp)
  80cf28:	dc000017 	ldw	r16,0(sp)
  80cf2c:	dec00304 	addi	sp,sp,12
  80cf30:	f800283a 	ret
  80cf34:	80800017 	ldw	r2,0(r16)
  80cf38:	103ff826 	beq	r2,zero,80cf1c <_fstat_r+0x38>
  80cf3c:	88800015 	stw	r2,0(r17)
  80cf40:	1805883a 	mov	r2,r3
  80cf44:	dfc00217 	ldw	ra,8(sp)
  80cf48:	dc400117 	ldw	r17,4(sp)
  80cf4c:	dc000017 	ldw	r16,0(sp)
  80cf50:	dec00304 	addi	sp,sp,12
  80cf54:	f800283a 	ret

0080cf58 <_isatty_r>:
  80cf58:	defffd04 	addi	sp,sp,-12
  80cf5c:	dc000015 	stw	r16,0(sp)
  80cf60:	040020b4 	movhi	r16,130
  80cf64:	8437a504 	addi	r16,r16,-8556
  80cf68:	dc400115 	stw	r17,4(sp)
  80cf6c:	80000015 	stw	zero,0(r16)
  80cf70:	2023883a 	mov	r17,r4
  80cf74:	2809883a 	mov	r4,r5
  80cf78:	dfc00215 	stw	ra,8(sp)
  80cf7c:	080e33c0 	call	80e33c <isatty>
  80cf80:	1007883a 	mov	r3,r2
  80cf84:	00bfffc4 	movi	r2,-1
  80cf88:	18800626 	beq	r3,r2,80cfa4 <_isatty_r+0x4c>
  80cf8c:	1805883a 	mov	r2,r3
  80cf90:	dfc00217 	ldw	ra,8(sp)
  80cf94:	dc400117 	ldw	r17,4(sp)
  80cf98:	dc000017 	ldw	r16,0(sp)
  80cf9c:	dec00304 	addi	sp,sp,12
  80cfa0:	f800283a 	ret
  80cfa4:	80800017 	ldw	r2,0(r16)
  80cfa8:	103ff826 	beq	r2,zero,80cf8c <_isatty_r+0x34>
  80cfac:	88800015 	stw	r2,0(r17)
  80cfb0:	1805883a 	mov	r2,r3
  80cfb4:	dfc00217 	ldw	ra,8(sp)
  80cfb8:	dc400117 	ldw	r17,4(sp)
  80cfbc:	dc000017 	ldw	r16,0(sp)
  80cfc0:	dec00304 	addi	sp,sp,12
  80cfc4:	f800283a 	ret

0080cfc8 <_lseek_r>:
  80cfc8:	defffd04 	addi	sp,sp,-12
  80cfcc:	dc000015 	stw	r16,0(sp)
  80cfd0:	040020b4 	movhi	r16,130
  80cfd4:	8437a504 	addi	r16,r16,-8556
  80cfd8:	dc400115 	stw	r17,4(sp)
  80cfdc:	80000015 	stw	zero,0(r16)
  80cfe0:	2023883a 	mov	r17,r4
  80cfe4:	2809883a 	mov	r4,r5
  80cfe8:	300b883a 	mov	r5,r6
  80cfec:	380d883a 	mov	r6,r7
  80cff0:	dfc00215 	stw	ra,8(sp)
  80cff4:	080e54c0 	call	80e54c <lseek>
  80cff8:	1007883a 	mov	r3,r2
  80cffc:	00bfffc4 	movi	r2,-1
  80d000:	18800626 	beq	r3,r2,80d01c <_lseek_r+0x54>
  80d004:	1805883a 	mov	r2,r3
  80d008:	dfc00217 	ldw	ra,8(sp)
  80d00c:	dc400117 	ldw	r17,4(sp)
  80d010:	dc000017 	ldw	r16,0(sp)
  80d014:	dec00304 	addi	sp,sp,12
  80d018:	f800283a 	ret
  80d01c:	80800017 	ldw	r2,0(r16)
  80d020:	103ff826 	beq	r2,zero,80d004 <_lseek_r+0x3c>
  80d024:	88800015 	stw	r2,0(r17)
  80d028:	1805883a 	mov	r2,r3
  80d02c:	dfc00217 	ldw	ra,8(sp)
  80d030:	dc400117 	ldw	r17,4(sp)
  80d034:	dc000017 	ldw	r16,0(sp)
  80d038:	dec00304 	addi	sp,sp,12
  80d03c:	f800283a 	ret

0080d040 <_read_r>:
  80d040:	defffd04 	addi	sp,sp,-12
  80d044:	dc000015 	stw	r16,0(sp)
  80d048:	040020b4 	movhi	r16,130
  80d04c:	8437a504 	addi	r16,r16,-8556
  80d050:	dc400115 	stw	r17,4(sp)
  80d054:	80000015 	stw	zero,0(r16)
  80d058:	2023883a 	mov	r17,r4
  80d05c:	2809883a 	mov	r4,r5
  80d060:	300b883a 	mov	r5,r6
  80d064:	380d883a 	mov	r6,r7
  80d068:	dfc00215 	stw	ra,8(sp)
  80d06c:	080e7680 	call	80e768 <read>
  80d070:	1007883a 	mov	r3,r2
  80d074:	00bfffc4 	movi	r2,-1
  80d078:	18800626 	beq	r3,r2,80d094 <_read_r+0x54>
  80d07c:	1805883a 	mov	r2,r3
  80d080:	dfc00217 	ldw	ra,8(sp)
  80d084:	dc400117 	ldw	r17,4(sp)
  80d088:	dc000017 	ldw	r16,0(sp)
  80d08c:	dec00304 	addi	sp,sp,12
  80d090:	f800283a 	ret
  80d094:	80800017 	ldw	r2,0(r16)
  80d098:	103ff826 	beq	r2,zero,80d07c <_read_r+0x3c>
  80d09c:	88800015 	stw	r2,0(r17)
  80d0a0:	1805883a 	mov	r2,r3
  80d0a4:	dfc00217 	ldw	ra,8(sp)
  80d0a8:	dc400117 	ldw	r17,4(sp)
  80d0ac:	dc000017 	ldw	r16,0(sp)
  80d0b0:	dec00304 	addi	sp,sp,12
  80d0b4:	f800283a 	ret

0080d0b8 <__udivdi3>:
  80d0b8:	defff104 	addi	sp,sp,-60
  80d0bc:	0015883a 	mov	r10,zero
  80d0c0:	2005883a 	mov	r2,r4
  80d0c4:	3011883a 	mov	r8,r6
  80d0c8:	df000d15 	stw	fp,52(sp)
  80d0cc:	dd400a15 	stw	r21,40(sp)
  80d0d0:	dcc00815 	stw	r19,32(sp)
  80d0d4:	dfc00e15 	stw	ra,56(sp)
  80d0d8:	ddc00c15 	stw	r23,48(sp)
  80d0dc:	dd800b15 	stw	r22,44(sp)
  80d0e0:	dd000915 	stw	r20,36(sp)
  80d0e4:	dc800715 	stw	r18,28(sp)
  80d0e8:	dc400615 	stw	r17,24(sp)
  80d0ec:	dc000515 	stw	r16,20(sp)
  80d0f0:	da800315 	stw	r10,12(sp)
  80d0f4:	4027883a 	mov	r19,r8
  80d0f8:	1039883a 	mov	fp,r2
  80d0fc:	282b883a 	mov	r21,r5
  80d100:	da800415 	stw	r10,16(sp)
  80d104:	3800401e 	bne	r7,zero,80d208 <__udivdi3+0x150>
  80d108:	2a006536 	bltu	r5,r8,80d2a0 <__udivdi3+0x1e8>
  80d10c:	4000b526 	beq	r8,zero,80d3e4 <__udivdi3+0x32c>
  80d110:	00bfffd4 	movui	r2,65535
  80d114:	14c0ad36 	bltu	r2,r19,80d3cc <__udivdi3+0x314>
  80d118:	00803fc4 	movi	r2,255
  80d11c:	14c15e36 	bltu	r2,r19,80d698 <__udivdi3+0x5e0>
  80d120:	000b883a 	mov	r5,zero
  80d124:	0005883a 	mov	r2,zero
  80d128:	9884d83a 	srl	r2,r19,r2
  80d12c:	010020b4 	movhi	r4,130
  80d130:	2128be04 	addi	r4,r4,-23816
  80d134:	01800804 	movi	r6,32
  80d138:	1105883a 	add	r2,r2,r4
  80d13c:	10c00003 	ldbu	r3,0(r2)
  80d140:	28c7883a 	add	r3,r5,r3
  80d144:	30e9c83a 	sub	r20,r6,r3
  80d148:	a0010a1e 	bne	r20,zero,80d574 <__udivdi3+0x4bc>
  80d14c:	982ed43a 	srli	r23,r19,16
  80d150:	acebc83a 	sub	r21,r21,r19
  80d154:	9dbfffcc 	andi	r22,r19,65535
  80d158:	05000044 	movi	r20,1
  80d15c:	a809883a 	mov	r4,r21
  80d160:	b80b883a 	mov	r5,r23
  80d164:	080534c0 	call	80534c <__udivsi3>
  80d168:	100b883a 	mov	r5,r2
  80d16c:	b009883a 	mov	r4,r22
  80d170:	1021883a 	mov	r16,r2
  80d174:	080535c0 	call	80535c <__mulsi3>
  80d178:	a809883a 	mov	r4,r21
  80d17c:	b80b883a 	mov	r5,r23
  80d180:	1023883a 	mov	r17,r2
  80d184:	08053540 	call	805354 <__umodsi3>
  80d188:	1004943a 	slli	r2,r2,16
  80d18c:	e006d43a 	srli	r3,fp,16
  80d190:	10c4b03a 	or	r2,r2,r3
  80d194:	1440042e 	bgeu	r2,r17,80d1a8 <__udivdi3+0xf0>
  80d198:	14c5883a 	add	r2,r2,r19
  80d19c:	843fffc4 	addi	r16,r16,-1
  80d1a0:	14c00136 	bltu	r2,r19,80d1a8 <__udivdi3+0xf0>
  80d1a4:	14415c36 	bltu	r2,r17,80d718 <__udivdi3+0x660>
  80d1a8:	1463c83a 	sub	r17,r2,r17
  80d1ac:	8809883a 	mov	r4,r17
  80d1b0:	b80b883a 	mov	r5,r23
  80d1b4:	080534c0 	call	80534c <__udivsi3>
  80d1b8:	100b883a 	mov	r5,r2
  80d1bc:	b009883a 	mov	r4,r22
  80d1c0:	102b883a 	mov	r21,r2
  80d1c4:	080535c0 	call	80535c <__mulsi3>
  80d1c8:	8809883a 	mov	r4,r17
  80d1cc:	b80b883a 	mov	r5,r23
  80d1d0:	1025883a 	mov	r18,r2
  80d1d4:	08053540 	call	805354 <__umodsi3>
  80d1d8:	1004943a 	slli	r2,r2,16
  80d1dc:	e0ffffcc 	andi	r3,fp,65535
  80d1e0:	10c4b03a 	or	r2,r2,r3
  80d1e4:	1480042e 	bgeu	r2,r18,80d1f8 <__udivdi3+0x140>
  80d1e8:	9885883a 	add	r2,r19,r2
  80d1ec:	ad7fffc4 	addi	r21,r21,-1
  80d1f0:	14c00136 	bltu	r2,r19,80d1f8 <__udivdi3+0x140>
  80d1f4:	14813c36 	bltu	r2,r18,80d6e8 <__udivdi3+0x630>
  80d1f8:	8004943a 	slli	r2,r16,16
  80d1fc:	a009883a 	mov	r4,r20
  80d200:	a884b03a 	or	r2,r21,r2
  80d204:	00001506 	br	80d25c <__udivdi3+0x1a4>
  80d208:	380d883a 	mov	r6,r7
  80d20c:	29c06c36 	bltu	r5,r7,80d3c0 <__udivdi3+0x308>
  80d210:	00bfffd4 	movui	r2,65535
  80d214:	11c06436 	bltu	r2,r7,80d3a8 <__udivdi3+0x2f0>
  80d218:	00803fc4 	movi	r2,255
  80d21c:	11c11836 	bltu	r2,r7,80d680 <__udivdi3+0x5c8>
  80d220:	000b883a 	mov	r5,zero
  80d224:	0005883a 	mov	r2,zero
  80d228:	3084d83a 	srl	r2,r6,r2
  80d22c:	010020b4 	movhi	r4,130
  80d230:	2128be04 	addi	r4,r4,-23816
  80d234:	01c00804 	movi	r7,32
  80d238:	1105883a 	add	r2,r2,r4
  80d23c:	10c00003 	ldbu	r3,0(r2)
  80d240:	28c7883a 	add	r3,r5,r3
  80d244:	38edc83a 	sub	r22,r7,r3
  80d248:	b000731e 	bne	r22,zero,80d418 <__udivdi3+0x360>
  80d24c:	35400136 	bltu	r6,r21,80d254 <__udivdi3+0x19c>
  80d250:	e4c05b36 	bltu	fp,r19,80d3c0 <__udivdi3+0x308>
  80d254:	00800044 	movi	r2,1
  80d258:	0009883a 	mov	r4,zero
  80d25c:	d8800315 	stw	r2,12(sp)
  80d260:	d9400317 	ldw	r5,12(sp)
  80d264:	2007883a 	mov	r3,r4
  80d268:	d9000415 	stw	r4,16(sp)
  80d26c:	2805883a 	mov	r2,r5
  80d270:	dfc00e17 	ldw	ra,56(sp)
  80d274:	df000d17 	ldw	fp,52(sp)
  80d278:	ddc00c17 	ldw	r23,48(sp)
  80d27c:	dd800b17 	ldw	r22,44(sp)
  80d280:	dd400a17 	ldw	r21,40(sp)
  80d284:	dd000917 	ldw	r20,36(sp)
  80d288:	dcc00817 	ldw	r19,32(sp)
  80d28c:	dc800717 	ldw	r18,28(sp)
  80d290:	dc400617 	ldw	r17,24(sp)
  80d294:	dc000517 	ldw	r16,20(sp)
  80d298:	dec00f04 	addi	sp,sp,60
  80d29c:	f800283a 	ret
  80d2a0:	00bfffd4 	movui	r2,65535
  80d2a4:	12005636 	bltu	r2,r8,80d400 <__udivdi3+0x348>
  80d2a8:	00803fc4 	movi	r2,255
  80d2ac:	12010036 	bltu	r2,r8,80d6b0 <__udivdi3+0x5f8>
  80d2b0:	000b883a 	mov	r5,zero
  80d2b4:	0005883a 	mov	r2,zero
  80d2b8:	9884d83a 	srl	r2,r19,r2
  80d2bc:	010020b4 	movhi	r4,130
  80d2c0:	2128be04 	addi	r4,r4,-23816
  80d2c4:	01800804 	movi	r6,32
  80d2c8:	1105883a 	add	r2,r2,r4
  80d2cc:	10c00003 	ldbu	r3,0(r2)
  80d2d0:	28c7883a 	add	r3,r5,r3
  80d2d4:	30cbc83a 	sub	r5,r6,r3
  80d2d8:	28000626 	beq	r5,zero,80d2f4 <__udivdi3+0x23c>
  80d2dc:	3145c83a 	sub	r2,r6,r5
  80d2e0:	e084d83a 	srl	r2,fp,r2
  80d2e4:	a946983a 	sll	r3,r21,r5
  80d2e8:	e178983a 	sll	fp,fp,r5
  80d2ec:	9966983a 	sll	r19,r19,r5
  80d2f0:	18aab03a 	or	r21,r3,r2
  80d2f4:	982ed43a 	srli	r23,r19,16
  80d2f8:	a809883a 	mov	r4,r21
  80d2fc:	9cbfffcc 	andi	r18,r19,65535
  80d300:	b80b883a 	mov	r5,r23
  80d304:	080534c0 	call	80534c <__udivsi3>
  80d308:	100b883a 	mov	r5,r2
  80d30c:	9009883a 	mov	r4,r18
  80d310:	1021883a 	mov	r16,r2
  80d314:	080535c0 	call	80535c <__mulsi3>
  80d318:	a809883a 	mov	r4,r21
  80d31c:	b80b883a 	mov	r5,r23
  80d320:	1023883a 	mov	r17,r2
  80d324:	08053540 	call	805354 <__umodsi3>
  80d328:	1004943a 	slli	r2,r2,16
  80d32c:	e006d43a 	srli	r3,fp,16
  80d330:	10c4b03a 	or	r2,r2,r3
  80d334:	1440042e 	bgeu	r2,r17,80d348 <__udivdi3+0x290>
  80d338:	14c5883a 	add	r2,r2,r19
  80d33c:	843fffc4 	addi	r16,r16,-1
  80d340:	14c00136 	bltu	r2,r19,80d348 <__udivdi3+0x290>
  80d344:	1440ea36 	bltu	r2,r17,80d6f0 <__udivdi3+0x638>
  80d348:	1463c83a 	sub	r17,r2,r17
  80d34c:	8809883a 	mov	r4,r17
  80d350:	b80b883a 	mov	r5,r23
  80d354:	080534c0 	call	80534c <__udivsi3>
  80d358:	100b883a 	mov	r5,r2
  80d35c:	9009883a 	mov	r4,r18
  80d360:	102b883a 	mov	r21,r2
  80d364:	080535c0 	call	80535c <__mulsi3>
  80d368:	8809883a 	mov	r4,r17
  80d36c:	b80b883a 	mov	r5,r23
  80d370:	1025883a 	mov	r18,r2
  80d374:	08053540 	call	805354 <__umodsi3>
  80d378:	1004943a 	slli	r2,r2,16
  80d37c:	e0ffffcc 	andi	r3,fp,65535
  80d380:	10c4b03a 	or	r2,r2,r3
  80d384:	1480042e 	bgeu	r2,r18,80d398 <__udivdi3+0x2e0>
  80d388:	9885883a 	add	r2,r19,r2
  80d38c:	ad7fffc4 	addi	r21,r21,-1
  80d390:	14c00136 	bltu	r2,r19,80d398 <__udivdi3+0x2e0>
  80d394:	1480d936 	bltu	r2,r18,80d6fc <__udivdi3+0x644>
  80d398:	8004943a 	slli	r2,r16,16
  80d39c:	0009883a 	mov	r4,zero
  80d3a0:	a884b03a 	or	r2,r21,r2
  80d3a4:	003fad06 	br	80d25c <__udivdi3+0x1a4>
  80d3a8:	00804034 	movhi	r2,256
  80d3ac:	10bfffc4 	addi	r2,r2,-1
  80d3b0:	11c0b636 	bltu	r2,r7,80d68c <__udivdi3+0x5d4>
  80d3b4:	01400404 	movi	r5,16
  80d3b8:	2805883a 	mov	r2,r5
  80d3bc:	003f9a06 	br	80d228 <__udivdi3+0x170>
  80d3c0:	0005883a 	mov	r2,zero
  80d3c4:	0009883a 	mov	r4,zero
  80d3c8:	003fa406 	br	80d25c <__udivdi3+0x1a4>
  80d3cc:	00804034 	movhi	r2,256
  80d3d0:	10bfffc4 	addi	r2,r2,-1
  80d3d4:	14c0b336 	bltu	r2,r19,80d6a4 <__udivdi3+0x5ec>
  80d3d8:	01400404 	movi	r5,16
  80d3dc:	2805883a 	mov	r2,r5
  80d3e0:	003f5106 	br	80d128 <__udivdi3+0x70>
  80d3e4:	01000044 	movi	r4,1
  80d3e8:	000b883a 	mov	r5,zero
  80d3ec:	080534c0 	call	80534c <__udivsi3>
  80d3f0:	1027883a 	mov	r19,r2
  80d3f4:	00bfffd4 	movui	r2,65535
  80d3f8:	14fff436 	bltu	r2,r19,80d3cc <__udivdi3+0x314>
  80d3fc:	003f4606 	br	80d118 <__udivdi3+0x60>
  80d400:	00804034 	movhi	r2,256
  80d404:	10bfffc4 	addi	r2,r2,-1
  80d408:	1200ac36 	bltu	r2,r8,80d6bc <__udivdi3+0x604>
  80d40c:	01400404 	movi	r5,16
  80d410:	2805883a 	mov	r2,r5
  80d414:	003fa806 	br	80d2b8 <__udivdi3+0x200>
  80d418:	3d85c83a 	sub	r2,r7,r22
  80d41c:	3588983a 	sll	r4,r6,r22
  80d420:	9886d83a 	srl	r3,r19,r2
  80d424:	a8a2d83a 	srl	r17,r21,r2
  80d428:	e084d83a 	srl	r2,fp,r2
  80d42c:	20eeb03a 	or	r23,r4,r3
  80d430:	b824d43a 	srli	r18,r23,16
  80d434:	ad86983a 	sll	r3,r21,r22
  80d438:	8809883a 	mov	r4,r17
  80d43c:	900b883a 	mov	r5,r18
  80d440:	1886b03a 	or	r3,r3,r2
  80d444:	d8c00115 	stw	r3,4(sp)
  80d448:	bc3fffcc 	andi	r16,r23,65535
  80d44c:	080534c0 	call	80534c <__udivsi3>
  80d450:	100b883a 	mov	r5,r2
  80d454:	8009883a 	mov	r4,r16
  80d458:	1029883a 	mov	r20,r2
  80d45c:	080535c0 	call	80535c <__mulsi3>
  80d460:	900b883a 	mov	r5,r18
  80d464:	8809883a 	mov	r4,r17
  80d468:	102b883a 	mov	r21,r2
  80d46c:	08053540 	call	805354 <__umodsi3>
  80d470:	d9400117 	ldw	r5,4(sp)
  80d474:	1004943a 	slli	r2,r2,16
  80d478:	9da6983a 	sll	r19,r19,r22
  80d47c:	2806d43a 	srli	r3,r5,16
  80d480:	10c4b03a 	or	r2,r2,r3
  80d484:	1540032e 	bgeu	r2,r21,80d494 <__udivdi3+0x3dc>
  80d488:	15c5883a 	add	r2,r2,r23
  80d48c:	a53fffc4 	addi	r20,r20,-1
  80d490:	15c0912e 	bgeu	r2,r23,80d6d8 <__udivdi3+0x620>
  80d494:	1563c83a 	sub	r17,r2,r21
  80d498:	8809883a 	mov	r4,r17
  80d49c:	900b883a 	mov	r5,r18
  80d4a0:	080534c0 	call	80534c <__udivsi3>
  80d4a4:	100b883a 	mov	r5,r2
  80d4a8:	8009883a 	mov	r4,r16
  80d4ac:	102b883a 	mov	r21,r2
  80d4b0:	080535c0 	call	80535c <__mulsi3>
  80d4b4:	8809883a 	mov	r4,r17
  80d4b8:	900b883a 	mov	r5,r18
  80d4bc:	1021883a 	mov	r16,r2
  80d4c0:	08053540 	call	805354 <__umodsi3>
  80d4c4:	da800117 	ldw	r10,4(sp)
  80d4c8:	1004943a 	slli	r2,r2,16
  80d4cc:	50ffffcc 	andi	r3,r10,65535
  80d4d0:	10c6b03a 	or	r3,r2,r3
  80d4d4:	1c00032e 	bgeu	r3,r16,80d4e4 <__udivdi3+0x42c>
  80d4d8:	1dc7883a 	add	r3,r3,r23
  80d4dc:	ad7fffc4 	addi	r21,r21,-1
  80d4e0:	1dc0792e 	bgeu	r3,r23,80d6c8 <__udivdi3+0x610>
  80d4e4:	a004943a 	slli	r2,r20,16
  80d4e8:	982ed43a 	srli	r23,r19,16
  80d4ec:	9cffffcc 	andi	r19,r19,65535
  80d4f0:	a8a4b03a 	or	r18,r21,r2
  80d4f4:	947fffcc 	andi	r17,r18,65535
  80d4f8:	902ad43a 	srli	r21,r18,16
  80d4fc:	8809883a 	mov	r4,r17
  80d500:	980b883a 	mov	r5,r19
  80d504:	1c21c83a 	sub	r16,r3,r16
  80d508:	080535c0 	call	80535c <__mulsi3>
  80d50c:	8809883a 	mov	r4,r17
  80d510:	b80b883a 	mov	r5,r23
  80d514:	1029883a 	mov	r20,r2
  80d518:	080535c0 	call	80535c <__mulsi3>
  80d51c:	980b883a 	mov	r5,r19
  80d520:	a809883a 	mov	r4,r21
  80d524:	1023883a 	mov	r17,r2
  80d528:	080535c0 	call	80535c <__mulsi3>
  80d52c:	a809883a 	mov	r4,r21
  80d530:	b80b883a 	mov	r5,r23
  80d534:	1027883a 	mov	r19,r2
  80d538:	080535c0 	call	80535c <__mulsi3>
  80d53c:	1009883a 	mov	r4,r2
  80d540:	a004d43a 	srli	r2,r20,16
  80d544:	8ce3883a 	add	r17,r17,r19
  80d548:	1447883a 	add	r3,r2,r17
  80d54c:	1cc0022e 	bgeu	r3,r19,80d558 <__udivdi3+0x4a0>
  80d550:	00800074 	movhi	r2,1
  80d554:	2089883a 	add	r4,r4,r2
  80d558:	1804d43a 	srli	r2,r3,16
  80d55c:	2085883a 	add	r2,r4,r2
  80d560:	80804436 	bltu	r16,r2,80d674 <__udivdi3+0x5bc>
  80d564:	80803e26 	beq	r16,r2,80d660 <__udivdi3+0x5a8>
  80d568:	9005883a 	mov	r2,r18
  80d56c:	0009883a 	mov	r4,zero
  80d570:	003f3a06 	br	80d25c <__udivdi3+0x1a4>
  80d574:	9d26983a 	sll	r19,r19,r20
  80d578:	3505c83a 	sub	r2,r6,r20
  80d57c:	a8a2d83a 	srl	r17,r21,r2
  80d580:	982ed43a 	srli	r23,r19,16
  80d584:	e084d83a 	srl	r2,fp,r2
  80d588:	ad06983a 	sll	r3,r21,r20
  80d58c:	8809883a 	mov	r4,r17
  80d590:	b80b883a 	mov	r5,r23
  80d594:	1886b03a 	or	r3,r3,r2
  80d598:	d8c00015 	stw	r3,0(sp)
  80d59c:	9dbfffcc 	andi	r22,r19,65535
  80d5a0:	080534c0 	call	80534c <__udivsi3>
  80d5a4:	100b883a 	mov	r5,r2
  80d5a8:	b009883a 	mov	r4,r22
  80d5ac:	d8800215 	stw	r2,8(sp)
  80d5b0:	080535c0 	call	80535c <__mulsi3>
  80d5b4:	8809883a 	mov	r4,r17
  80d5b8:	b80b883a 	mov	r5,r23
  80d5bc:	102b883a 	mov	r21,r2
  80d5c0:	08053540 	call	805354 <__umodsi3>
  80d5c4:	d9000017 	ldw	r4,0(sp)
  80d5c8:	1004943a 	slli	r2,r2,16
  80d5cc:	2006d43a 	srli	r3,r4,16
  80d5d0:	10c4b03a 	or	r2,r2,r3
  80d5d4:	1540052e 	bgeu	r2,r21,80d5ec <__udivdi3+0x534>
  80d5d8:	d9400217 	ldw	r5,8(sp)
  80d5dc:	14c5883a 	add	r2,r2,r19
  80d5e0:	297fffc4 	addi	r5,r5,-1
  80d5e4:	d9400215 	stw	r5,8(sp)
  80d5e8:	14c0462e 	bgeu	r2,r19,80d704 <__udivdi3+0x64c>
  80d5ec:	1563c83a 	sub	r17,r2,r21
  80d5f0:	8809883a 	mov	r4,r17
  80d5f4:	b80b883a 	mov	r5,r23
  80d5f8:	080534c0 	call	80534c <__udivsi3>
  80d5fc:	100b883a 	mov	r5,r2
  80d600:	b009883a 	mov	r4,r22
  80d604:	1025883a 	mov	r18,r2
  80d608:	080535c0 	call	80535c <__mulsi3>
  80d60c:	8809883a 	mov	r4,r17
  80d610:	b80b883a 	mov	r5,r23
  80d614:	1021883a 	mov	r16,r2
  80d618:	08053540 	call	805354 <__umodsi3>
  80d61c:	da800017 	ldw	r10,0(sp)
  80d620:	1004943a 	slli	r2,r2,16
  80d624:	50ffffcc 	andi	r3,r10,65535
  80d628:	10c6b03a 	or	r3,r2,r3
  80d62c:	1c00062e 	bgeu	r3,r16,80d648 <__udivdi3+0x590>
  80d630:	1cc7883a 	add	r3,r3,r19
  80d634:	94bfffc4 	addi	r18,r18,-1
  80d638:	1cc00336 	bltu	r3,r19,80d648 <__udivdi3+0x590>
  80d63c:	1c00022e 	bgeu	r3,r16,80d648 <__udivdi3+0x590>
  80d640:	94bfffc4 	addi	r18,r18,-1
  80d644:	1cc7883a 	add	r3,r3,r19
  80d648:	d9000217 	ldw	r4,8(sp)
  80d64c:	e538983a 	sll	fp,fp,r20
  80d650:	1c2bc83a 	sub	r21,r3,r16
  80d654:	2004943a 	slli	r2,r4,16
  80d658:	90a8b03a 	or	r20,r18,r2
  80d65c:	003ebf06 	br	80d15c <__udivdi3+0xa4>
  80d660:	1804943a 	slli	r2,r3,16
  80d664:	e588983a 	sll	r4,fp,r22
  80d668:	a0ffffcc 	andi	r3,r20,65535
  80d66c:	10c5883a 	add	r2,r2,r3
  80d670:	20bfbd2e 	bgeu	r4,r2,80d568 <__udivdi3+0x4b0>
  80d674:	90bfffc4 	addi	r2,r18,-1
  80d678:	0009883a 	mov	r4,zero
  80d67c:	003ef706 	br	80d25c <__udivdi3+0x1a4>
  80d680:	01400204 	movi	r5,8
  80d684:	2805883a 	mov	r2,r5
  80d688:	003ee706 	br	80d228 <__udivdi3+0x170>
  80d68c:	01400604 	movi	r5,24
  80d690:	2805883a 	mov	r2,r5
  80d694:	003ee406 	br	80d228 <__udivdi3+0x170>
  80d698:	01400204 	movi	r5,8
  80d69c:	2805883a 	mov	r2,r5
  80d6a0:	003ea106 	br	80d128 <__udivdi3+0x70>
  80d6a4:	01400604 	movi	r5,24
  80d6a8:	2805883a 	mov	r2,r5
  80d6ac:	003e9e06 	br	80d128 <__udivdi3+0x70>
  80d6b0:	01400204 	movi	r5,8
  80d6b4:	2805883a 	mov	r2,r5
  80d6b8:	003eff06 	br	80d2b8 <__udivdi3+0x200>
  80d6bc:	01400604 	movi	r5,24
  80d6c0:	2805883a 	mov	r2,r5
  80d6c4:	003efc06 	br	80d2b8 <__udivdi3+0x200>
  80d6c8:	1c3f862e 	bgeu	r3,r16,80d4e4 <__udivdi3+0x42c>
  80d6cc:	1dc7883a 	add	r3,r3,r23
  80d6d0:	ad7fffc4 	addi	r21,r21,-1
  80d6d4:	003f8306 	br	80d4e4 <__udivdi3+0x42c>
  80d6d8:	157f6e2e 	bgeu	r2,r21,80d494 <__udivdi3+0x3dc>
  80d6dc:	a53fffc4 	addi	r20,r20,-1
  80d6e0:	15c5883a 	add	r2,r2,r23
  80d6e4:	003f6b06 	br	80d494 <__udivdi3+0x3dc>
  80d6e8:	ad7fffc4 	addi	r21,r21,-1
  80d6ec:	003ec206 	br	80d1f8 <__udivdi3+0x140>
  80d6f0:	843fffc4 	addi	r16,r16,-1
  80d6f4:	14c5883a 	add	r2,r2,r19
  80d6f8:	003f1306 	br	80d348 <__udivdi3+0x290>
  80d6fc:	ad7fffc4 	addi	r21,r21,-1
  80d700:	003f2506 	br	80d398 <__udivdi3+0x2e0>
  80d704:	157fb92e 	bgeu	r2,r21,80d5ec <__udivdi3+0x534>
  80d708:	297fffc4 	addi	r5,r5,-1
  80d70c:	14c5883a 	add	r2,r2,r19
  80d710:	d9400215 	stw	r5,8(sp)
  80d714:	003fb506 	br	80d5ec <__udivdi3+0x534>
  80d718:	843fffc4 	addi	r16,r16,-1
  80d71c:	14c5883a 	add	r2,r2,r19
  80d720:	003ea106 	br	80d1a8 <__udivdi3+0xf0>

0080d724 <__umoddi3>:
  80d724:	defff004 	addi	sp,sp,-64
  80d728:	3011883a 	mov	r8,r6
  80d72c:	000d883a 	mov	r6,zero
  80d730:	dd400b15 	stw	r21,44(sp)
  80d734:	dcc00915 	stw	r19,36(sp)
  80d738:	dc000615 	stw	r16,24(sp)
  80d73c:	dfc00f15 	stw	ra,60(sp)
  80d740:	df000e15 	stw	fp,56(sp)
  80d744:	ddc00d15 	stw	r23,52(sp)
  80d748:	dd800c15 	stw	r22,48(sp)
  80d74c:	dd000a15 	stw	r20,40(sp)
  80d750:	dc800815 	stw	r18,32(sp)
  80d754:	dc400715 	stw	r17,28(sp)
  80d758:	2817883a 	mov	r11,r5
  80d75c:	d9800415 	stw	r6,16(sp)
  80d760:	4027883a 	mov	r19,r8
  80d764:	d9800515 	stw	r6,20(sp)
  80d768:	2021883a 	mov	r16,r4
  80d76c:	282b883a 	mov	r21,r5
  80d770:	38002c1e 	bne	r7,zero,80d824 <__umoddi3+0x100>
  80d774:	2a005636 	bltu	r5,r8,80d8d0 <__umoddi3+0x1ac>
  80d778:	40009a26 	beq	r8,zero,80d9e4 <__umoddi3+0x2c0>
  80d77c:	00bfffd4 	movui	r2,65535
  80d780:	14c09236 	bltu	r2,r19,80d9cc <__umoddi3+0x2a8>
  80d784:	00803fc4 	movi	r2,255
  80d788:	14c15c36 	bltu	r2,r19,80dcfc <__umoddi3+0x5d8>
  80d78c:	000b883a 	mov	r5,zero
  80d790:	0005883a 	mov	r2,zero
  80d794:	9884d83a 	srl	r2,r19,r2
  80d798:	010020b4 	movhi	r4,130
  80d79c:	2128be04 	addi	r4,r4,-23816
  80d7a0:	01800804 	movi	r6,32
  80d7a4:	1105883a 	add	r2,r2,r4
  80d7a8:	10c00003 	ldbu	r3,0(r2)
  80d7ac:	28c7883a 	add	r3,r5,r3
  80d7b0:	30e5c83a 	sub	r18,r6,r3
  80d7b4:	9000a41e 	bne	r18,zero,80da48 <__umoddi3+0x324>
  80d7b8:	982ed43a 	srli	r23,r19,16
  80d7bc:	acebc83a 	sub	r21,r21,r19
  80d7c0:	9d3fffcc 	andi	r20,r19,65535
  80d7c4:	002d883a 	mov	r22,zero
  80d7c8:	a809883a 	mov	r4,r21
  80d7cc:	b80b883a 	mov	r5,r23
  80d7d0:	080534c0 	call	80534c <__udivsi3>
  80d7d4:	100b883a 	mov	r5,r2
  80d7d8:	a009883a 	mov	r4,r20
  80d7dc:	080535c0 	call	80535c <__mulsi3>
  80d7e0:	a809883a 	mov	r4,r21
  80d7e4:	b80b883a 	mov	r5,r23
  80d7e8:	1023883a 	mov	r17,r2
  80d7ec:	08053540 	call	805354 <__umodsi3>
  80d7f0:	1004943a 	slli	r2,r2,16
  80d7f4:	8006d43a 	srli	r3,r16,16
  80d7f8:	10c4b03a 	or	r2,r2,r3
  80d7fc:	1440032e 	bgeu	r2,r17,80d80c <__umoddi3+0xe8>
  80d800:	14c5883a 	add	r2,r2,r19
  80d804:	14c00136 	bltu	r2,r19,80d80c <__umoddi3+0xe8>
  80d808:	14415836 	bltu	r2,r17,80dd6c <__umoddi3+0x648>
  80d80c:	1463c83a 	sub	r17,r2,r17
  80d810:	8809883a 	mov	r4,r17
  80d814:	b80b883a 	mov	r5,r23
  80d818:	080534c0 	call	80534c <__udivsi3>
  80d81c:	a009883a 	mov	r4,r20
  80d820:	00005306 	br	80d970 <__umoddi3+0x24c>
  80d824:	380d883a 	mov	r6,r7
  80d828:	29c0132e 	bgeu	r5,r7,80d878 <__umoddi3+0x154>
  80d82c:	d9000415 	stw	r4,16(sp)
  80d830:	d9400515 	stw	r5,20(sp)
  80d834:	d9400417 	ldw	r5,16(sp)
  80d838:	5813883a 	mov	r9,r11
  80d83c:	2811883a 	mov	r8,r5
  80d840:	4005883a 	mov	r2,r8
  80d844:	4807883a 	mov	r3,r9
  80d848:	dfc00f17 	ldw	ra,60(sp)
  80d84c:	df000e17 	ldw	fp,56(sp)
  80d850:	ddc00d17 	ldw	r23,52(sp)
  80d854:	dd800c17 	ldw	r22,48(sp)
  80d858:	dd400b17 	ldw	r21,44(sp)
  80d85c:	dd000a17 	ldw	r20,40(sp)
  80d860:	dcc00917 	ldw	r19,36(sp)
  80d864:	dc800817 	ldw	r18,32(sp)
  80d868:	dc400717 	ldw	r17,28(sp)
  80d86c:	dc000617 	ldw	r16,24(sp)
  80d870:	dec01004 	addi	sp,sp,64
  80d874:	f800283a 	ret
  80d878:	00bfffd4 	movui	r2,65535
  80d87c:	11c06636 	bltu	r2,r7,80da18 <__umoddi3+0x2f4>
  80d880:	00803fc4 	movi	r2,255
  80d884:	11c12036 	bltu	r2,r7,80dd08 <__umoddi3+0x5e4>
  80d888:	000b883a 	mov	r5,zero
  80d88c:	0005883a 	mov	r2,zero
  80d890:	3084d83a 	srl	r2,r6,r2
  80d894:	010020b4 	movhi	r4,130
  80d898:	2128be04 	addi	r4,r4,-23816
  80d89c:	01c00804 	movi	r7,32
  80d8a0:	1105883a 	add	r2,r2,r4
  80d8a4:	10c00003 	ldbu	r3,0(r2)
  80d8a8:	28c7883a 	add	r3,r5,r3
  80d8ac:	38e5c83a 	sub	r18,r7,r3
  80d8b0:	9000941e 	bne	r18,zero,80db04 <__umoddi3+0x3e0>
  80d8b4:	35405e36 	bltu	r6,r21,80da30 <__umoddi3+0x30c>
  80d8b8:	84c05d2e 	bgeu	r16,r19,80da30 <__umoddi3+0x30c>
  80d8bc:	8011883a 	mov	r8,r16
  80d8c0:	a813883a 	mov	r9,r21
  80d8c4:	dc000415 	stw	r16,16(sp)
  80d8c8:	dd400515 	stw	r21,20(sp)
  80d8cc:	003fdc06 	br	80d840 <__umoddi3+0x11c>
  80d8d0:	00bfffd4 	movui	r2,65535
  80d8d4:	12004a36 	bltu	r2,r8,80da00 <__umoddi3+0x2dc>
  80d8d8:	00803fc4 	movi	r2,255
  80d8dc:	12010d36 	bltu	r2,r8,80dd14 <__umoddi3+0x5f0>
  80d8e0:	000b883a 	mov	r5,zero
  80d8e4:	0005883a 	mov	r2,zero
  80d8e8:	9884d83a 	srl	r2,r19,r2
  80d8ec:	010020b4 	movhi	r4,130
  80d8f0:	2128be04 	addi	r4,r4,-23816
  80d8f4:	01800804 	movi	r6,32
  80d8f8:	1105883a 	add	r2,r2,r4
  80d8fc:	10c00003 	ldbu	r3,0(r2)
  80d900:	28c7883a 	add	r3,r5,r3
  80d904:	30c7c83a 	sub	r3,r6,r3
  80d908:	1800dc1e 	bne	r3,zero,80dc7c <__umoddi3+0x558>
  80d90c:	002d883a 	mov	r22,zero
  80d910:	982ed43a 	srli	r23,r19,16
  80d914:	a809883a 	mov	r4,r21
  80d918:	9cbfffcc 	andi	r18,r19,65535
  80d91c:	b80b883a 	mov	r5,r23
  80d920:	080534c0 	call	80534c <__udivsi3>
  80d924:	100b883a 	mov	r5,r2
  80d928:	9009883a 	mov	r4,r18
  80d92c:	080535c0 	call	80535c <__mulsi3>
  80d930:	a809883a 	mov	r4,r21
  80d934:	b80b883a 	mov	r5,r23
  80d938:	1023883a 	mov	r17,r2
  80d93c:	08053540 	call	805354 <__umodsi3>
  80d940:	1004943a 	slli	r2,r2,16
  80d944:	8006d43a 	srli	r3,r16,16
  80d948:	10c4b03a 	or	r2,r2,r3
  80d94c:	1440032e 	bgeu	r2,r17,80d95c <__umoddi3+0x238>
  80d950:	14c5883a 	add	r2,r2,r19
  80d954:	14c00136 	bltu	r2,r19,80d95c <__umoddi3+0x238>
  80d958:	14410236 	bltu	r2,r17,80dd64 <__umoddi3+0x640>
  80d95c:	1463c83a 	sub	r17,r2,r17
  80d960:	8809883a 	mov	r4,r17
  80d964:	b80b883a 	mov	r5,r23
  80d968:	080534c0 	call	80534c <__udivsi3>
  80d96c:	9009883a 	mov	r4,r18
  80d970:	100b883a 	mov	r5,r2
  80d974:	080535c0 	call	80535c <__mulsi3>
  80d978:	8809883a 	mov	r4,r17
  80d97c:	b80b883a 	mov	r5,r23
  80d980:	102b883a 	mov	r21,r2
  80d984:	08053540 	call	805354 <__umodsi3>
  80d988:	1004943a 	slli	r2,r2,16
  80d98c:	80ffffcc 	andi	r3,r16,65535
  80d990:	10c4b03a 	or	r2,r2,r3
  80d994:	1540042e 	bgeu	r2,r21,80d9a8 <__umoddi3+0x284>
  80d998:	14c5883a 	add	r2,r2,r19
  80d99c:	14c00236 	bltu	r2,r19,80d9a8 <__umoddi3+0x284>
  80d9a0:	1540012e 	bgeu	r2,r21,80d9a8 <__umoddi3+0x284>
  80d9a4:	14c5883a 	add	r2,r2,r19
  80d9a8:	1545c83a 	sub	r2,r2,r21
  80d9ac:	1584d83a 	srl	r2,r2,r22
  80d9b0:	0013883a 	mov	r9,zero
  80d9b4:	d8800415 	stw	r2,16(sp)
  80d9b8:	d8c00417 	ldw	r3,16(sp)
  80d9bc:	0005883a 	mov	r2,zero
  80d9c0:	d8800515 	stw	r2,20(sp)
  80d9c4:	1811883a 	mov	r8,r3
  80d9c8:	003f9d06 	br	80d840 <__umoddi3+0x11c>
  80d9cc:	00804034 	movhi	r2,256
  80d9d0:	10bfffc4 	addi	r2,r2,-1
  80d9d4:	14c0c636 	bltu	r2,r19,80dcf0 <__umoddi3+0x5cc>
  80d9d8:	01400404 	movi	r5,16
  80d9dc:	2805883a 	mov	r2,r5
  80d9e0:	003f6c06 	br	80d794 <__umoddi3+0x70>
  80d9e4:	01000044 	movi	r4,1
  80d9e8:	000b883a 	mov	r5,zero
  80d9ec:	080534c0 	call	80534c <__udivsi3>
  80d9f0:	1027883a 	mov	r19,r2
  80d9f4:	00bfffd4 	movui	r2,65535
  80d9f8:	14fff436 	bltu	r2,r19,80d9cc <__umoddi3+0x2a8>
  80d9fc:	003f6106 	br	80d784 <__umoddi3+0x60>
  80da00:	00804034 	movhi	r2,256
  80da04:	10bfffc4 	addi	r2,r2,-1
  80da08:	1200c536 	bltu	r2,r8,80dd20 <__umoddi3+0x5fc>
  80da0c:	01400404 	movi	r5,16
  80da10:	2805883a 	mov	r2,r5
  80da14:	003fb406 	br	80d8e8 <__umoddi3+0x1c4>
  80da18:	00804034 	movhi	r2,256
  80da1c:	10bfffc4 	addi	r2,r2,-1
  80da20:	11c0c236 	bltu	r2,r7,80dd2c <__umoddi3+0x608>
  80da24:	01400404 	movi	r5,16
  80da28:	2805883a 	mov	r2,r5
  80da2c:	003f9806 	br	80d890 <__umoddi3+0x16c>
  80da30:	84c9c83a 	sub	r4,r16,r19
  80da34:	8105803a 	cmpltu	r2,r16,r4
  80da38:	a987c83a 	sub	r3,r21,r6
  80da3c:	18abc83a 	sub	r21,r3,r2
  80da40:	2021883a 	mov	r16,r4
  80da44:	003f9d06 	br	80d8bc <__umoddi3+0x198>
  80da48:	9ca6983a 	sll	r19,r19,r18
  80da4c:	3485c83a 	sub	r2,r6,r18
  80da50:	a8a2d83a 	srl	r17,r21,r2
  80da54:	982ed43a 	srli	r23,r19,16
  80da58:	ac86983a 	sll	r3,r21,r18
  80da5c:	8084d83a 	srl	r2,r16,r2
  80da60:	8809883a 	mov	r4,r17
  80da64:	b80b883a 	mov	r5,r23
  80da68:	18b8b03a 	or	fp,r3,r2
  80da6c:	9d3fffcc 	andi	r20,r19,65535
  80da70:	080534c0 	call	80534c <__udivsi3>
  80da74:	100b883a 	mov	r5,r2
  80da78:	a009883a 	mov	r4,r20
  80da7c:	080535c0 	call	80535c <__mulsi3>
  80da80:	8809883a 	mov	r4,r17
  80da84:	b80b883a 	mov	r5,r23
  80da88:	102b883a 	mov	r21,r2
  80da8c:	08053540 	call	805354 <__umodsi3>
  80da90:	1004943a 	slli	r2,r2,16
  80da94:	e006d43a 	srli	r3,fp,16
  80da98:	902d883a 	mov	r22,r18
  80da9c:	10c4b03a 	or	r2,r2,r3
  80daa0:	1540022e 	bgeu	r2,r21,80daac <__umoddi3+0x388>
  80daa4:	14c5883a 	add	r2,r2,r19
  80daa8:	14c0ab2e 	bgeu	r2,r19,80dd58 <__umoddi3+0x634>
  80daac:	1563c83a 	sub	r17,r2,r21
  80dab0:	8809883a 	mov	r4,r17
  80dab4:	b80b883a 	mov	r5,r23
  80dab8:	080534c0 	call	80534c <__udivsi3>
  80dabc:	100b883a 	mov	r5,r2
  80dac0:	a009883a 	mov	r4,r20
  80dac4:	080535c0 	call	80535c <__mulsi3>
  80dac8:	8809883a 	mov	r4,r17
  80dacc:	b80b883a 	mov	r5,r23
  80dad0:	102b883a 	mov	r21,r2
  80dad4:	08053540 	call	805354 <__umodsi3>
  80dad8:	1004943a 	slli	r2,r2,16
  80dadc:	e0ffffcc 	andi	r3,fp,65535
  80dae0:	10c4b03a 	or	r2,r2,r3
  80dae4:	1540042e 	bgeu	r2,r21,80daf8 <__umoddi3+0x3d4>
  80dae8:	14c5883a 	add	r2,r2,r19
  80daec:	14c00236 	bltu	r2,r19,80daf8 <__umoddi3+0x3d4>
  80daf0:	1540012e 	bgeu	r2,r21,80daf8 <__umoddi3+0x3d4>
  80daf4:	14c5883a 	add	r2,r2,r19
  80daf8:	84a0983a 	sll	r16,r16,r18
  80dafc:	156bc83a 	sub	r21,r2,r21
  80db00:	003f3106 	br	80d7c8 <__umoddi3+0xa4>
  80db04:	3c8fc83a 	sub	r7,r7,r18
  80db08:	3486983a 	sll	r3,r6,r18
  80db0c:	99c4d83a 	srl	r2,r19,r7
  80db10:	a9e2d83a 	srl	r17,r21,r7
  80db14:	ac8c983a 	sll	r6,r21,r18
  80db18:	18acb03a 	or	r22,r3,r2
  80db1c:	b02ed43a 	srli	r23,r22,16
  80db20:	81c4d83a 	srl	r2,r16,r7
  80db24:	8809883a 	mov	r4,r17
  80db28:	b80b883a 	mov	r5,r23
  80db2c:	308cb03a 	or	r6,r6,r2
  80db30:	d9c00315 	stw	r7,12(sp)
  80db34:	d9800215 	stw	r6,8(sp)
  80db38:	b53fffcc 	andi	r20,r22,65535
  80db3c:	080534c0 	call	80534c <__udivsi3>
  80db40:	100b883a 	mov	r5,r2
  80db44:	a009883a 	mov	r4,r20
  80db48:	1039883a 	mov	fp,r2
  80db4c:	080535c0 	call	80535c <__mulsi3>
  80db50:	8809883a 	mov	r4,r17
  80db54:	b80b883a 	mov	r5,r23
  80db58:	102b883a 	mov	r21,r2
  80db5c:	08053540 	call	805354 <__umodsi3>
  80db60:	d9000217 	ldw	r4,8(sp)
  80db64:	1004943a 	slli	r2,r2,16
  80db68:	9ca6983a 	sll	r19,r19,r18
  80db6c:	2006d43a 	srli	r3,r4,16
  80db70:	84a0983a 	sll	r16,r16,r18
  80db74:	dcc00015 	stw	r19,0(sp)
  80db78:	10c4b03a 	or	r2,r2,r3
  80db7c:	dc000115 	stw	r16,4(sp)
  80db80:	1540032e 	bgeu	r2,r21,80db90 <__umoddi3+0x46c>
  80db84:	1585883a 	add	r2,r2,r22
  80db88:	e73fffc4 	addi	fp,fp,-1
  80db8c:	15806e2e 	bgeu	r2,r22,80dd48 <__umoddi3+0x624>
  80db90:	1563c83a 	sub	r17,r2,r21
  80db94:	8809883a 	mov	r4,r17
  80db98:	b80b883a 	mov	r5,r23
  80db9c:	080534c0 	call	80534c <__udivsi3>
  80dba0:	100b883a 	mov	r5,r2
  80dba4:	a009883a 	mov	r4,r20
  80dba8:	1021883a 	mov	r16,r2
  80dbac:	080535c0 	call	80535c <__mulsi3>
  80dbb0:	b80b883a 	mov	r5,r23
  80dbb4:	8809883a 	mov	r4,r17
  80dbb8:	1029883a 	mov	r20,r2
  80dbbc:	08053540 	call	805354 <__umodsi3>
  80dbc0:	d9400217 	ldw	r5,8(sp)
  80dbc4:	1004943a 	slli	r2,r2,16
  80dbc8:	28ffffcc 	andi	r3,r5,65535
  80dbcc:	10c4b03a 	or	r2,r2,r3
  80dbd0:	1500032e 	bgeu	r2,r20,80dbe0 <__umoddi3+0x4bc>
  80dbd4:	1585883a 	add	r2,r2,r22
  80dbd8:	843fffc4 	addi	r16,r16,-1
  80dbdc:	1580562e 	bgeu	r2,r22,80dd38 <__umoddi3+0x614>
  80dbe0:	d9800017 	ldw	r6,0(sp)
  80dbe4:	e022943a 	slli	r17,fp,16
  80dbe8:	302ed43a 	srli	r23,r6,16
  80dbec:	8462b03a 	or	r17,r16,r17
  80dbf0:	34ffffcc 	andi	r19,r6,65535
  80dbf4:	882ad43a 	srli	r21,r17,16
  80dbf8:	8c7fffcc 	andi	r17,r17,65535
  80dbfc:	8809883a 	mov	r4,r17
  80dc00:	980b883a 	mov	r5,r19
  80dc04:	1521c83a 	sub	r16,r2,r20
  80dc08:	080535c0 	call	80535c <__mulsi3>
  80dc0c:	8809883a 	mov	r4,r17
  80dc10:	b80b883a 	mov	r5,r23
  80dc14:	1029883a 	mov	r20,r2
  80dc18:	080535c0 	call	80535c <__mulsi3>
  80dc1c:	980b883a 	mov	r5,r19
  80dc20:	a809883a 	mov	r4,r21
  80dc24:	1023883a 	mov	r17,r2
  80dc28:	080535c0 	call	80535c <__mulsi3>
  80dc2c:	a809883a 	mov	r4,r21
  80dc30:	b80b883a 	mov	r5,r23
  80dc34:	1027883a 	mov	r19,r2
  80dc38:	080535c0 	call	80535c <__mulsi3>
  80dc3c:	100b883a 	mov	r5,r2
  80dc40:	a004d43a 	srli	r2,r20,16
  80dc44:	8ce3883a 	add	r17,r17,r19
  80dc48:	1449883a 	add	r4,r2,r17
  80dc4c:	24c0022e 	bgeu	r4,r19,80dc58 <__umoddi3+0x534>
  80dc50:	00800074 	movhi	r2,1
  80dc54:	288b883a 	add	r5,r5,r2
  80dc58:	2004d43a 	srli	r2,r4,16
  80dc5c:	2008943a 	slli	r4,r4,16
  80dc60:	a0ffffcc 	andi	r3,r20,65535
  80dc64:	288d883a 	add	r6,r5,r2
  80dc68:	20c9883a 	add	r4,r4,r3
  80dc6c:	81800b36 	bltu	r16,r6,80dc9c <__umoddi3+0x578>
  80dc70:	81804026 	beq	r16,r6,80dd74 <__umoddi3+0x650>
  80dc74:	818dc83a 	sub	r6,r16,r6
  80dc78:	00000f06 	br	80dcb8 <__umoddi3+0x594>
  80dc7c:	30c5c83a 	sub	r2,r6,r3
  80dc80:	182d883a 	mov	r22,r3
  80dc84:	8084d83a 	srl	r2,r16,r2
  80dc88:	a8c6983a 	sll	r3,r21,r3
  80dc8c:	9da6983a 	sll	r19,r19,r22
  80dc90:	85a0983a 	sll	r16,r16,r22
  80dc94:	18aab03a 	or	r21,r3,r2
  80dc98:	003f1d06 	br	80d910 <__umoddi3+0x1ec>
  80dc9c:	d8c00017 	ldw	r3,0(sp)
  80dca0:	20c5c83a 	sub	r2,r4,r3
  80dca4:	2089803a 	cmpltu	r4,r4,r2
  80dca8:	3587c83a 	sub	r3,r6,r22
  80dcac:	1907c83a 	sub	r3,r3,r4
  80dcb0:	80cdc83a 	sub	r6,r16,r3
  80dcb4:	1009883a 	mov	r4,r2
  80dcb8:	d9400117 	ldw	r5,4(sp)
  80dcbc:	2905c83a 	sub	r2,r5,r4
  80dcc0:	2887803a 	cmpltu	r3,r5,r2
  80dcc4:	30c7c83a 	sub	r3,r6,r3
  80dcc8:	d9800317 	ldw	r6,12(sp)
  80dccc:	1484d83a 	srl	r2,r2,r18
  80dcd0:	1988983a 	sll	r4,r3,r6
  80dcd4:	1c86d83a 	srl	r3,r3,r18
  80dcd8:	2088b03a 	or	r4,r4,r2
  80dcdc:	2011883a 	mov	r8,r4
  80dce0:	1813883a 	mov	r9,r3
  80dce4:	d9000415 	stw	r4,16(sp)
  80dce8:	d8c00515 	stw	r3,20(sp)
  80dcec:	003ed406 	br	80d840 <__umoddi3+0x11c>
  80dcf0:	01400604 	movi	r5,24
  80dcf4:	2805883a 	mov	r2,r5
  80dcf8:	003ea606 	br	80d794 <__umoddi3+0x70>
  80dcfc:	01400204 	movi	r5,8
  80dd00:	2805883a 	mov	r2,r5
  80dd04:	003ea306 	br	80d794 <__umoddi3+0x70>
  80dd08:	01400204 	movi	r5,8
  80dd0c:	2805883a 	mov	r2,r5
  80dd10:	003edf06 	br	80d890 <__umoddi3+0x16c>
  80dd14:	01400204 	movi	r5,8
  80dd18:	2805883a 	mov	r2,r5
  80dd1c:	003ef206 	br	80d8e8 <__umoddi3+0x1c4>
  80dd20:	01400604 	movi	r5,24
  80dd24:	2805883a 	mov	r2,r5
  80dd28:	003eef06 	br	80d8e8 <__umoddi3+0x1c4>
  80dd2c:	01400604 	movi	r5,24
  80dd30:	2805883a 	mov	r2,r5
  80dd34:	003ed606 	br	80d890 <__umoddi3+0x16c>
  80dd38:	153fa92e 	bgeu	r2,r20,80dbe0 <__umoddi3+0x4bc>
  80dd3c:	843fffc4 	addi	r16,r16,-1
  80dd40:	1585883a 	add	r2,r2,r22
  80dd44:	003fa606 	br	80dbe0 <__umoddi3+0x4bc>
  80dd48:	157f912e 	bgeu	r2,r21,80db90 <__umoddi3+0x46c>
  80dd4c:	e73fffc4 	addi	fp,fp,-1
  80dd50:	1585883a 	add	r2,r2,r22
  80dd54:	003f8e06 	br	80db90 <__umoddi3+0x46c>
  80dd58:	157f542e 	bgeu	r2,r21,80daac <__umoddi3+0x388>
  80dd5c:	14c5883a 	add	r2,r2,r19
  80dd60:	003f5206 	br	80daac <__umoddi3+0x388>
  80dd64:	14c5883a 	add	r2,r2,r19
  80dd68:	003efc06 	br	80d95c <__umoddi3+0x238>
  80dd6c:	14c5883a 	add	r2,r2,r19
  80dd70:	003ea606 	br	80d80c <__umoddi3+0xe8>
  80dd74:	d8800117 	ldw	r2,4(sp)
  80dd78:	113fc836 	bltu	r2,r4,80dc9c <__umoddi3+0x578>
  80dd7c:	000d883a 	mov	r6,zero
  80dd80:	003fcd06 	br	80dcb8 <__umoddi3+0x594>

0080dd84 <__gedf2>:
  80dd84:	deffef04 	addi	sp,sp,-68
  80dd88:	dc400f15 	stw	r17,60(sp)
  80dd8c:	dc400404 	addi	r17,sp,16
  80dd90:	2005883a 	mov	r2,r4
  80dd94:	2807883a 	mov	r3,r5
  80dd98:	dc000e15 	stw	r16,56(sp)
  80dd9c:	d809883a 	mov	r4,sp
  80dda0:	880b883a 	mov	r5,r17
  80dda4:	dc000904 	addi	r16,sp,36
  80dda8:	d8c00115 	stw	r3,4(sp)
  80ddac:	d8800015 	stw	r2,0(sp)
  80ddb0:	d9800215 	stw	r6,8(sp)
  80ddb4:	dfc01015 	stw	ra,64(sp)
  80ddb8:	d9c00315 	stw	r7,12(sp)
  80ddbc:	0805aa00 	call	805aa0 <__unpack_d>
  80ddc0:	d9000204 	addi	r4,sp,8
  80ddc4:	800b883a 	mov	r5,r16
  80ddc8:	0805aa00 	call	805aa0 <__unpack_d>
  80ddcc:	d8800417 	ldw	r2,16(sp)
  80ddd0:	00c00044 	movi	r3,1
  80ddd4:	01bfffc4 	movi	r6,-1
  80ddd8:	1880062e 	bgeu	r3,r2,80ddf4 <__gedf2+0x70>
  80dddc:	d8800917 	ldw	r2,36(sp)
  80dde0:	8809883a 	mov	r4,r17
  80dde4:	800b883a 	mov	r5,r16
  80dde8:	1880022e 	bgeu	r3,r2,80ddf4 <__gedf2+0x70>
  80ddec:	0805bd80 	call	805bd8 <__fpcmp_parts_d>
  80ddf0:	100d883a 	mov	r6,r2
  80ddf4:	3005883a 	mov	r2,r6
  80ddf8:	dfc01017 	ldw	ra,64(sp)
  80ddfc:	dc400f17 	ldw	r17,60(sp)
  80de00:	dc000e17 	ldw	r16,56(sp)
  80de04:	dec01104 	addi	sp,sp,68
  80de08:	f800283a 	ret

0080de0c <__fixdfsi>:
  80de0c:	defff804 	addi	sp,sp,-32
  80de10:	2005883a 	mov	r2,r4
  80de14:	2807883a 	mov	r3,r5
  80de18:	d809883a 	mov	r4,sp
  80de1c:	d9400204 	addi	r5,sp,8
  80de20:	d8c00115 	stw	r3,4(sp)
  80de24:	d8800015 	stw	r2,0(sp)
  80de28:	dfc00715 	stw	ra,28(sp)
  80de2c:	0805aa00 	call	805aa0 <__unpack_d>
  80de30:	d8c00217 	ldw	r3,8(sp)
  80de34:	00800084 	movi	r2,2
  80de38:	1880051e 	bne	r3,r2,80de50 <__fixdfsi+0x44>
  80de3c:	0007883a 	mov	r3,zero
  80de40:	1805883a 	mov	r2,r3
  80de44:	dfc00717 	ldw	ra,28(sp)
  80de48:	dec00804 	addi	sp,sp,32
  80de4c:	f800283a 	ret
  80de50:	00800044 	movi	r2,1
  80de54:	10fff92e 	bgeu	r2,r3,80de3c <__fixdfsi+0x30>
  80de58:	00800104 	movi	r2,4
  80de5c:	18800426 	beq	r3,r2,80de70 <__fixdfsi+0x64>
  80de60:	d8c00417 	ldw	r3,16(sp)
  80de64:	183ff516 	blt	r3,zero,80de3c <__fixdfsi+0x30>
  80de68:	00800784 	movi	r2,30
  80de6c:	10c0080e 	bge	r2,r3,80de90 <__fixdfsi+0x84>
  80de70:	d8800317 	ldw	r2,12(sp)
  80de74:	1000121e 	bne	r2,zero,80dec0 <__fixdfsi+0xb4>
  80de78:	00e00034 	movhi	r3,32768
  80de7c:	18ffffc4 	addi	r3,r3,-1
  80de80:	1805883a 	mov	r2,r3
  80de84:	dfc00717 	ldw	ra,28(sp)
  80de88:	dec00804 	addi	sp,sp,32
  80de8c:	f800283a 	ret
  80de90:	00800f04 	movi	r2,60
  80de94:	10d1c83a 	sub	r8,r2,r3
  80de98:	40bff804 	addi	r2,r8,-32
  80de9c:	d9800517 	ldw	r6,20(sp)
  80dea0:	d9c00617 	ldw	r7,24(sp)
  80dea4:	10000816 	blt	r2,zero,80dec8 <__fixdfsi+0xbc>
  80dea8:	3888d83a 	srl	r4,r7,r2
  80deac:	d8800317 	ldw	r2,12(sp)
  80deb0:	2007883a 	mov	r3,r4
  80deb4:	103fe226 	beq	r2,zero,80de40 <__fixdfsi+0x34>
  80deb8:	0107c83a 	sub	r3,zero,r4
  80debc:	003fe006 	br	80de40 <__fixdfsi+0x34>
  80dec0:	00e00034 	movhi	r3,32768
  80dec4:	003fde06 	br	80de40 <__fixdfsi+0x34>
  80dec8:	39c7883a 	add	r3,r7,r7
  80decc:	008007c4 	movi	r2,31
  80ded0:	1205c83a 	sub	r2,r2,r8
  80ded4:	1886983a 	sll	r3,r3,r2
  80ded8:	3208d83a 	srl	r4,r6,r8
  80dedc:	1908b03a 	or	r4,r3,r4
  80dee0:	003ff206 	br	80deac <__fixdfsi+0xa0>

0080dee4 <__floatunsidf>:
  80dee4:	defff204 	addi	sp,sp,-56
  80dee8:	dfc00d15 	stw	ra,52(sp)
  80deec:	ddc00c15 	stw	r23,48(sp)
  80def0:	dd800b15 	stw	r22,44(sp)
  80def4:	dd400a15 	stw	r21,40(sp)
  80def8:	dd000915 	stw	r20,36(sp)
  80defc:	dcc00815 	stw	r19,32(sp)
  80df00:	dc800715 	stw	r18,28(sp)
  80df04:	dc400615 	stw	r17,24(sp)
  80df08:	dc000515 	stw	r16,20(sp)
  80df0c:	d8000115 	stw	zero,4(sp)
  80df10:	20000f1e 	bne	r4,zero,80df50 <__floatunsidf+0x6c>
  80df14:	00800084 	movi	r2,2
  80df18:	d8800015 	stw	r2,0(sp)
  80df1c:	d809883a 	mov	r4,sp
  80df20:	080578c0 	call	80578c <__pack_d>
  80df24:	dfc00d17 	ldw	ra,52(sp)
  80df28:	ddc00c17 	ldw	r23,48(sp)
  80df2c:	dd800b17 	ldw	r22,44(sp)
  80df30:	dd400a17 	ldw	r21,40(sp)
  80df34:	dd000917 	ldw	r20,36(sp)
  80df38:	dcc00817 	ldw	r19,32(sp)
  80df3c:	dc800717 	ldw	r18,28(sp)
  80df40:	dc400617 	ldw	r17,24(sp)
  80df44:	dc000517 	ldw	r16,20(sp)
  80df48:	dec00e04 	addi	sp,sp,56
  80df4c:	f800283a 	ret
  80df50:	008000c4 	movi	r2,3
  80df54:	00c00f04 	movi	r3,60
  80df58:	002f883a 	mov	r23,zero
  80df5c:	202d883a 	mov	r22,r4
  80df60:	d8800015 	stw	r2,0(sp)
  80df64:	d8c00215 	stw	r3,8(sp)
  80df68:	d9000315 	stw	r4,12(sp)
  80df6c:	ddc00415 	stw	r23,16(sp)
  80df70:	08054b80 	call	8054b8 <__clzsi2>
  80df74:	12400744 	addi	r9,r2,29
  80df78:	48000b16 	blt	r9,zero,80dfa8 <__floatunsidf+0xc4>
  80df7c:	483fe726 	beq	r9,zero,80df1c <__floatunsidf+0x38>
  80df80:	10bfff44 	addi	r2,r2,-3
  80df84:	10002e16 	blt	r2,zero,80e040 <__floatunsidf+0x15c>
  80df88:	b0a2983a 	sll	r17,r22,r2
  80df8c:	0021883a 	mov	r16,zero
  80df90:	d8800217 	ldw	r2,8(sp)
  80df94:	dc400415 	stw	r17,16(sp)
  80df98:	dc000315 	stw	r16,12(sp)
  80df9c:	1245c83a 	sub	r2,r2,r9
  80dfa0:	d8800215 	stw	r2,8(sp)
  80dfa4:	003fdd06 	br	80df1c <__floatunsidf+0x38>
  80dfa8:	0255c83a 	sub	r10,zero,r9
  80dfac:	51bff804 	addi	r6,r10,-32
  80dfb0:	30001b16 	blt	r6,zero,80e020 <__floatunsidf+0x13c>
  80dfb4:	b9a8d83a 	srl	r20,r23,r6
  80dfb8:	002b883a 	mov	r21,zero
  80dfbc:	000f883a 	mov	r7,zero
  80dfc0:	01000044 	movi	r4,1
  80dfc4:	0011883a 	mov	r8,zero
  80dfc8:	30002516 	blt	r6,zero,80e060 <__floatunsidf+0x17c>
  80dfcc:	21a6983a 	sll	r19,r4,r6
  80dfd0:	0025883a 	mov	r18,zero
  80dfd4:	00bfffc4 	movi	r2,-1
  80dfd8:	9089883a 	add	r4,r18,r2
  80dfdc:	988b883a 	add	r5,r19,r2
  80dfe0:	248d803a 	cmpltu	r6,r4,r18
  80dfe4:	314b883a 	add	r5,r6,r5
  80dfe8:	b104703a 	and	r2,r22,r4
  80dfec:	b946703a 	and	r3,r23,r5
  80dff0:	10c4b03a 	or	r2,r2,r3
  80dff4:	10000226 	beq	r2,zero,80e000 <__floatunsidf+0x11c>
  80dff8:	01c00044 	movi	r7,1
  80dffc:	0011883a 	mov	r8,zero
  80e000:	d9000217 	ldw	r4,8(sp)
  80e004:	a1c4b03a 	or	r2,r20,r7
  80e008:	aa06b03a 	or	r3,r21,r8
  80e00c:	2249c83a 	sub	r4,r4,r9
  80e010:	d8c00415 	stw	r3,16(sp)
  80e014:	d9000215 	stw	r4,8(sp)
  80e018:	d8800315 	stw	r2,12(sp)
  80e01c:	003fbf06 	br	80df1c <__floatunsidf+0x38>
  80e020:	bdc7883a 	add	r3,r23,r23
  80e024:	008007c4 	movi	r2,31
  80e028:	1285c83a 	sub	r2,r2,r10
  80e02c:	1886983a 	sll	r3,r3,r2
  80e030:	b2a8d83a 	srl	r20,r22,r10
  80e034:	baaad83a 	srl	r21,r23,r10
  80e038:	1d28b03a 	or	r20,r3,r20
  80e03c:	003fdf06 	br	80dfbc <__floatunsidf+0xd8>
  80e040:	b006d07a 	srli	r3,r22,1
  80e044:	008007c4 	movi	r2,31
  80e048:	1245c83a 	sub	r2,r2,r9
  80e04c:	1886d83a 	srl	r3,r3,r2
  80e050:	ba62983a 	sll	r17,r23,r9
  80e054:	b260983a 	sll	r16,r22,r9
  80e058:	1c62b03a 	or	r17,r3,r17
  80e05c:	003fcc06 	br	80df90 <__floatunsidf+0xac>
  80e060:	2006d07a 	srli	r3,r4,1
  80e064:	008007c4 	movi	r2,31
  80e068:	1285c83a 	sub	r2,r2,r10
  80e06c:	18a6d83a 	srl	r19,r3,r2
  80e070:	22a4983a 	sll	r18,r4,r10
  80e074:	003fd706 	br	80dfd4 <__floatunsidf+0xf0>

0080e078 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80e078:	defff804 	addi	sp,sp,-32
  80e07c:	dfc00715 	stw	ra,28(sp)
  80e080:	df000615 	stw	fp,24(sp)
  80e084:	df000604 	addi	fp,sp,24
  80e088:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80e08c:	e0bffc17 	ldw	r2,-16(fp)
  80e090:	1004803a 	cmplt	r2,r2,zero
  80e094:	1000091e 	bne	r2,zero,80e0bc <close+0x44>
  80e098:	e13ffc17 	ldw	r4,-16(fp)
  80e09c:	01400304 	movi	r5,12
  80e0a0:	080535c0 	call	80535c <__mulsi3>
  80e0a4:	1007883a 	mov	r3,r2
  80e0a8:	008020b4 	movhi	r2,130
  80e0ac:	10abf404 	addi	r2,r2,-20528
  80e0b0:	1887883a 	add	r3,r3,r2
  80e0b4:	e0ffff15 	stw	r3,-4(fp)
  80e0b8:	00000106 	br	80e0c0 <close+0x48>
  80e0bc:	e03fff15 	stw	zero,-4(fp)
  80e0c0:	e0bfff17 	ldw	r2,-4(fp)
  80e0c4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80e0c8:	e0bffb17 	ldw	r2,-20(fp)
  80e0cc:	1005003a 	cmpeq	r2,r2,zero
  80e0d0:	10001d1e 	bne	r2,zero,80e148 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80e0d4:	e0bffb17 	ldw	r2,-20(fp)
  80e0d8:	10800017 	ldw	r2,0(r2)
  80e0dc:	10800417 	ldw	r2,16(r2)
  80e0e0:	1005003a 	cmpeq	r2,r2,zero
  80e0e4:	1000071e 	bne	r2,zero,80e104 <close+0x8c>
  80e0e8:	e0bffb17 	ldw	r2,-20(fp)
  80e0ec:	10800017 	ldw	r2,0(r2)
  80e0f0:	10800417 	ldw	r2,16(r2)
  80e0f4:	e13ffb17 	ldw	r4,-20(fp)
  80e0f8:	103ee83a 	callr	r2
  80e0fc:	e0bffe15 	stw	r2,-8(fp)
  80e100:	00000106 	br	80e108 <close+0x90>
  80e104:	e03ffe15 	stw	zero,-8(fp)
  80e108:	e0bffe17 	ldw	r2,-8(fp)
  80e10c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80e110:	e13ffc17 	ldw	r4,-16(fp)
  80e114:	080e8ec0 	call	80e8ec <alt_release_fd>
    if (rval < 0)
  80e118:	e0bffa17 	ldw	r2,-24(fp)
  80e11c:	1004403a 	cmpge	r2,r2,zero
  80e120:	1000071e 	bne	r2,zero,80e140 <close+0xc8>
    {
      ALT_ERRNO = -rval;
  80e124:	080e1780 	call	80e178 <alt_get_errno>
  80e128:	e0fffa17 	ldw	r3,-24(fp)
  80e12c:	00c7c83a 	sub	r3,zero,r3
  80e130:	10c00015 	stw	r3,0(r2)
      return -1;
  80e134:	00bfffc4 	movi	r2,-1
  80e138:	e0bffd15 	stw	r2,-12(fp)
  80e13c:	00000806 	br	80e160 <close+0xe8>
    }
    return 0;
  80e140:	e03ffd15 	stw	zero,-12(fp)
  80e144:	00000606 	br	80e160 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80e148:	080e1780 	call	80e178 <alt_get_errno>
  80e14c:	1007883a 	mov	r3,r2
  80e150:	00801444 	movi	r2,81
  80e154:	18800015 	stw	r2,0(r3)
    return -1;
  80e158:	00bfffc4 	movi	r2,-1
  80e15c:	e0bffd15 	stw	r2,-12(fp)
  80e160:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80e164:	e037883a 	mov	sp,fp
  80e168:	dfc00117 	ldw	ra,4(sp)
  80e16c:	df000017 	ldw	fp,0(sp)
  80e170:	dec00204 	addi	sp,sp,8
  80e174:	f800283a 	ret

0080e178 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e178:	defffd04 	addi	sp,sp,-12
  80e17c:	dfc00215 	stw	ra,8(sp)
  80e180:	df000115 	stw	fp,4(sp)
  80e184:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e188:	008020b4 	movhi	r2,130
  80e18c:	10b09e04 	addi	r2,r2,-15752
  80e190:	10800017 	ldw	r2,0(r2)
  80e194:	1005003a 	cmpeq	r2,r2,zero
  80e198:	1000061e 	bne	r2,zero,80e1b4 <alt_get_errno+0x3c>
  80e19c:	008020b4 	movhi	r2,130
  80e1a0:	10b09e04 	addi	r2,r2,-15752
  80e1a4:	10800017 	ldw	r2,0(r2)
  80e1a8:	103ee83a 	callr	r2
  80e1ac:	e0bfff15 	stw	r2,-4(fp)
  80e1b0:	00000306 	br	80e1c0 <alt_get_errno+0x48>
  80e1b4:	008020b4 	movhi	r2,130
  80e1b8:	10b7a504 	addi	r2,r2,-8556
  80e1bc:	e0bfff15 	stw	r2,-4(fp)
  80e1c0:	e0bfff17 	ldw	r2,-4(fp)
}
  80e1c4:	e037883a 	mov	sp,fp
  80e1c8:	dfc00117 	ldw	ra,4(sp)
  80e1cc:	df000017 	ldw	fp,0(sp)
  80e1d0:	dec00204 	addi	sp,sp,8
  80e1d4:	f800283a 	ret

0080e1d8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80e1d8:	defffc04 	addi	sp,sp,-16
  80e1dc:	df000315 	stw	fp,12(sp)
  80e1e0:	df000304 	addi	fp,sp,12
  80e1e4:	e13ffd15 	stw	r4,-12(fp)
  80e1e8:	e17ffe15 	stw	r5,-8(fp)
  80e1ec:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80e1f0:	e0bfff17 	ldw	r2,-4(fp)
}
  80e1f4:	e037883a 	mov	sp,fp
  80e1f8:	df000017 	ldw	fp,0(sp)
  80e1fc:	dec00104 	addi	sp,sp,4
  80e200:	f800283a 	ret

0080e204 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80e204:	defff904 	addi	sp,sp,-28
  80e208:	dfc00615 	stw	ra,24(sp)
  80e20c:	df000515 	stw	fp,20(sp)
  80e210:	df000504 	addi	fp,sp,20
  80e214:	e13ffc15 	stw	r4,-16(fp)
  80e218:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e21c:	e0bffc17 	ldw	r2,-16(fp)
  80e220:	1004803a 	cmplt	r2,r2,zero
  80e224:	1000091e 	bne	r2,zero,80e24c <fstat+0x48>
  80e228:	e13ffc17 	ldw	r4,-16(fp)
  80e22c:	01400304 	movi	r5,12
  80e230:	080535c0 	call	80535c <__mulsi3>
  80e234:	1007883a 	mov	r3,r2
  80e238:	008020b4 	movhi	r2,130
  80e23c:	10abf404 	addi	r2,r2,-20528
  80e240:	1887883a 	add	r3,r3,r2
  80e244:	e0ffff15 	stw	r3,-4(fp)
  80e248:	00000106 	br	80e250 <fstat+0x4c>
  80e24c:	e03fff15 	stw	zero,-4(fp)
  80e250:	e0bfff17 	ldw	r2,-4(fp)
  80e254:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80e258:	e0bffb17 	ldw	r2,-20(fp)
  80e25c:	1005003a 	cmpeq	r2,r2,zero
  80e260:	1000121e 	bne	r2,zero,80e2ac <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80e264:	e0bffb17 	ldw	r2,-20(fp)
  80e268:	10800017 	ldw	r2,0(r2)
  80e26c:	10800817 	ldw	r2,32(r2)
  80e270:	1005003a 	cmpeq	r2,r2,zero
  80e274:	1000081e 	bne	r2,zero,80e298 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  80e278:	e0bffb17 	ldw	r2,-20(fp)
  80e27c:	10800017 	ldw	r2,0(r2)
  80e280:	10800817 	ldw	r2,32(r2)
  80e284:	e13ffb17 	ldw	r4,-20(fp)
  80e288:	e17ffd17 	ldw	r5,-12(fp)
  80e28c:	103ee83a 	callr	r2
  80e290:	e0bffe15 	stw	r2,-8(fp)
  80e294:	00000b06 	br	80e2c4 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80e298:	e0fffd17 	ldw	r3,-12(fp)
  80e29c:	00880004 	movi	r2,8192
  80e2a0:	18800115 	stw	r2,4(r3)
      return 0;
  80e2a4:	e03ffe15 	stw	zero,-8(fp)
  80e2a8:	00000606 	br	80e2c4 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80e2ac:	080e2dc0 	call	80e2dc <alt_get_errno>
  80e2b0:	1007883a 	mov	r3,r2
  80e2b4:	00801444 	movi	r2,81
  80e2b8:	18800015 	stw	r2,0(r3)
    return -1;
  80e2bc:	00bfffc4 	movi	r2,-1
  80e2c0:	e0bffe15 	stw	r2,-8(fp)
  80e2c4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80e2c8:	e037883a 	mov	sp,fp
  80e2cc:	dfc00117 	ldw	ra,4(sp)
  80e2d0:	df000017 	ldw	fp,0(sp)
  80e2d4:	dec00204 	addi	sp,sp,8
  80e2d8:	f800283a 	ret

0080e2dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e2dc:	defffd04 	addi	sp,sp,-12
  80e2e0:	dfc00215 	stw	ra,8(sp)
  80e2e4:	df000115 	stw	fp,4(sp)
  80e2e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e2ec:	008020b4 	movhi	r2,130
  80e2f0:	10b09e04 	addi	r2,r2,-15752
  80e2f4:	10800017 	ldw	r2,0(r2)
  80e2f8:	1005003a 	cmpeq	r2,r2,zero
  80e2fc:	1000061e 	bne	r2,zero,80e318 <alt_get_errno+0x3c>
  80e300:	008020b4 	movhi	r2,130
  80e304:	10b09e04 	addi	r2,r2,-15752
  80e308:	10800017 	ldw	r2,0(r2)
  80e30c:	103ee83a 	callr	r2
  80e310:	e0bfff15 	stw	r2,-4(fp)
  80e314:	00000306 	br	80e324 <alt_get_errno+0x48>
  80e318:	008020b4 	movhi	r2,130
  80e31c:	10b7a504 	addi	r2,r2,-8556
  80e320:	e0bfff15 	stw	r2,-4(fp)
  80e324:	e0bfff17 	ldw	r2,-4(fp)
}
  80e328:	e037883a 	mov	sp,fp
  80e32c:	dfc00117 	ldw	ra,4(sp)
  80e330:	df000017 	ldw	fp,0(sp)
  80e334:	dec00204 	addi	sp,sp,8
  80e338:	f800283a 	ret

0080e33c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80e33c:	deffeb04 	addi	sp,sp,-84
  80e340:	dfc01415 	stw	ra,80(sp)
  80e344:	df001315 	stw	fp,76(sp)
  80e348:	df001304 	addi	fp,sp,76
  80e34c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e350:	e0bffd17 	ldw	r2,-12(fp)
  80e354:	1004803a 	cmplt	r2,r2,zero
  80e358:	1000091e 	bne	r2,zero,80e380 <isatty+0x44>
  80e35c:	e13ffd17 	ldw	r4,-12(fp)
  80e360:	01400304 	movi	r5,12
  80e364:	080535c0 	call	80535c <__mulsi3>
  80e368:	1007883a 	mov	r3,r2
  80e36c:	008020b4 	movhi	r2,130
  80e370:	10abf404 	addi	r2,r2,-20528
  80e374:	1887883a 	add	r3,r3,r2
  80e378:	e0ffff15 	stw	r3,-4(fp)
  80e37c:	00000106 	br	80e384 <isatty+0x48>
  80e380:	e03fff15 	stw	zero,-4(fp)
  80e384:	e0bfff17 	ldw	r2,-4(fp)
  80e388:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80e38c:	e0bfed17 	ldw	r2,-76(fp)
  80e390:	1005003a 	cmpeq	r2,r2,zero
  80e394:	10000f1e 	bne	r2,zero,80e3d4 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80e398:	e0bfed17 	ldw	r2,-76(fp)
  80e39c:	10800017 	ldw	r2,0(r2)
  80e3a0:	10800817 	ldw	r2,32(r2)
  80e3a4:	1004c03a 	cmpne	r2,r2,zero
  80e3a8:	1000031e 	bne	r2,zero,80e3b8 <isatty+0x7c>
    {
      return 1;
  80e3ac:	00800044 	movi	r2,1
  80e3b0:	e0bffe15 	stw	r2,-8(fp)
  80e3b4:	00000c06 	br	80e3e8 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80e3b8:	e17fee04 	addi	r5,fp,-72
  80e3bc:	e13ffd17 	ldw	r4,-12(fp)
  80e3c0:	080e2040 	call	80e204 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80e3c4:	e0bfef17 	ldw	r2,-68(fp)
  80e3c8:	10880020 	cmpeqi	r2,r2,8192
  80e3cc:	e0bffe15 	stw	r2,-8(fp)
  80e3d0:	00000506 	br	80e3e8 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80e3d4:	080e4000 	call	80e400 <alt_get_errno>
  80e3d8:	1007883a 	mov	r3,r2
  80e3dc:	00801444 	movi	r2,81
  80e3e0:	18800015 	stw	r2,0(r3)
    return 0;
  80e3e4:	e03ffe15 	stw	zero,-8(fp)
  80e3e8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80e3ec:	e037883a 	mov	sp,fp
  80e3f0:	dfc00117 	ldw	ra,4(sp)
  80e3f4:	df000017 	ldw	fp,0(sp)
  80e3f8:	dec00204 	addi	sp,sp,8
  80e3fc:	f800283a 	ret

0080e400 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e400:	defffd04 	addi	sp,sp,-12
  80e404:	dfc00215 	stw	ra,8(sp)
  80e408:	df000115 	stw	fp,4(sp)
  80e40c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e410:	008020b4 	movhi	r2,130
  80e414:	10b09e04 	addi	r2,r2,-15752
  80e418:	10800017 	ldw	r2,0(r2)
  80e41c:	1005003a 	cmpeq	r2,r2,zero
  80e420:	1000061e 	bne	r2,zero,80e43c <alt_get_errno+0x3c>
  80e424:	008020b4 	movhi	r2,130
  80e428:	10b09e04 	addi	r2,r2,-15752
  80e42c:	10800017 	ldw	r2,0(r2)
  80e430:	103ee83a 	callr	r2
  80e434:	e0bfff15 	stw	r2,-4(fp)
  80e438:	00000306 	br	80e448 <alt_get_errno+0x48>
  80e43c:	008020b4 	movhi	r2,130
  80e440:	10b7a504 	addi	r2,r2,-8556
  80e444:	e0bfff15 	stw	r2,-4(fp)
  80e448:	e0bfff17 	ldw	r2,-4(fp)
}
  80e44c:	e037883a 	mov	sp,fp
  80e450:	dfc00117 	ldw	ra,4(sp)
  80e454:	df000017 	ldw	fp,0(sp)
  80e458:	dec00204 	addi	sp,sp,8
  80e45c:	f800283a 	ret

0080e460 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80e460:	defffe04 	addi	sp,sp,-8
  80e464:	dfc00115 	stw	ra,4(sp)
  80e468:	df000015 	stw	fp,0(sp)
  80e46c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80e470:	010020b4 	movhi	r4,130
  80e474:	2130c204 	addi	r4,r4,-15608
  80e478:	014020b4 	movhi	r5,130
  80e47c:	2969e504 	addi	r5,r5,-22636
  80e480:	018020b4 	movhi	r6,130
  80e484:	31b0c204 	addi	r6,r6,-15608
  80e488:	080e4e00 	call	80e4e0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80e48c:	01002034 	movhi	r4,128
  80e490:	21000004 	addi	r4,r4,0
  80e494:	01404434 	movhi	r5,272
  80e498:	29500804 	addi	r5,r5,16416
  80e49c:	01804434 	movhi	r6,272
  80e4a0:	31906f04 	addi	r6,r6,16828
  80e4a4:	080e4e00 	call	80e4e0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80e4a8:	010020b4 	movhi	r4,130
  80e4ac:	21281604 	addi	r4,r4,-24488
  80e4b0:	014020b4 	movhi	r5,130
  80e4b4:	29681604 	addi	r5,r5,-24488
  80e4b8:	018020b4 	movhi	r6,130
  80e4bc:	31a9e504 	addi	r6,r6,-22636
  80e4c0:	080e4e00 	call	80e4e0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80e4c4:	08189c40 	call	8189c4 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80e4c8:	0818c500 	call	818c50 <alt_icache_flush_all>
}
  80e4cc:	e037883a 	mov	sp,fp
  80e4d0:	dfc00117 	ldw	ra,4(sp)
  80e4d4:	df000017 	ldw	fp,0(sp)
  80e4d8:	dec00204 	addi	sp,sp,8
  80e4dc:	f800283a 	ret

0080e4e0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80e4e0:	defffc04 	addi	sp,sp,-16
  80e4e4:	df000315 	stw	fp,12(sp)
  80e4e8:	df000304 	addi	fp,sp,12
  80e4ec:	e13ffd15 	stw	r4,-12(fp)
  80e4f0:	e17ffe15 	stw	r5,-8(fp)
  80e4f4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80e4f8:	e0fffe17 	ldw	r3,-8(fp)
  80e4fc:	e0bffd17 	ldw	r2,-12(fp)
  80e500:	18800e26 	beq	r3,r2,80e53c <alt_load_section+0x5c>
  {
    while( to != end )
  80e504:	00000a06 	br	80e530 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80e508:	e0bffd17 	ldw	r2,-12(fp)
  80e50c:	10c00017 	ldw	r3,0(r2)
  80e510:	e0bffe17 	ldw	r2,-8(fp)
  80e514:	10c00015 	stw	r3,0(r2)
  80e518:	e0bffe17 	ldw	r2,-8(fp)
  80e51c:	10800104 	addi	r2,r2,4
  80e520:	e0bffe15 	stw	r2,-8(fp)
  80e524:	e0bffd17 	ldw	r2,-12(fp)
  80e528:	10800104 	addi	r2,r2,4
  80e52c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80e530:	e0fffe17 	ldw	r3,-8(fp)
  80e534:	e0bfff17 	ldw	r2,-4(fp)
  80e538:	18bff31e 	bne	r3,r2,80e508 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80e53c:	e037883a 	mov	sp,fp
  80e540:	df000017 	ldw	fp,0(sp)
  80e544:	dec00104 	addi	sp,sp,4
  80e548:	f800283a 	ret

0080e54c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80e54c:	defff804 	addi	sp,sp,-32
  80e550:	dfc00715 	stw	ra,28(sp)
  80e554:	df000615 	stw	fp,24(sp)
  80e558:	df000604 	addi	fp,sp,24
  80e55c:	e13ffc15 	stw	r4,-16(fp)
  80e560:	e17ffd15 	stw	r5,-12(fp)
  80e564:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80e568:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e56c:	e0bffc17 	ldw	r2,-16(fp)
  80e570:	1004803a 	cmplt	r2,r2,zero
  80e574:	1000091e 	bne	r2,zero,80e59c <lseek+0x50>
  80e578:	e13ffc17 	ldw	r4,-16(fp)
  80e57c:	01400304 	movi	r5,12
  80e580:	080535c0 	call	80535c <__mulsi3>
  80e584:	1007883a 	mov	r3,r2
  80e588:	008020b4 	movhi	r2,130
  80e58c:	10abf404 	addi	r2,r2,-20528
  80e590:	1887883a 	add	r3,r3,r2
  80e594:	e0ffff15 	stw	r3,-4(fp)
  80e598:	00000106 	br	80e5a0 <lseek+0x54>
  80e59c:	e03fff15 	stw	zero,-4(fp)
  80e5a0:	e0bfff17 	ldw	r2,-4(fp)
  80e5a4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80e5a8:	e0bffb17 	ldw	r2,-20(fp)
  80e5ac:	1005003a 	cmpeq	r2,r2,zero
  80e5b0:	1000111e 	bne	r2,zero,80e5f8 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80e5b4:	e0bffb17 	ldw	r2,-20(fp)
  80e5b8:	10800017 	ldw	r2,0(r2)
  80e5bc:	10800717 	ldw	r2,28(r2)
  80e5c0:	1005003a 	cmpeq	r2,r2,zero
  80e5c4:	1000091e 	bne	r2,zero,80e5ec <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80e5c8:	e0bffb17 	ldw	r2,-20(fp)
  80e5cc:	10800017 	ldw	r2,0(r2)
  80e5d0:	10800717 	ldw	r2,28(r2)
  80e5d4:	e13ffb17 	ldw	r4,-20(fp)
  80e5d8:	e17ffd17 	ldw	r5,-12(fp)
  80e5dc:	e1bffe17 	ldw	r6,-8(fp)
  80e5e0:	103ee83a 	callr	r2
  80e5e4:	e0bffa15 	stw	r2,-24(fp)
  80e5e8:	00000506 	br	80e600 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80e5ec:	00bfde84 	movi	r2,-134
  80e5f0:	e0bffa15 	stw	r2,-24(fp)
  80e5f4:	00000206 	br	80e600 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  80e5f8:	00bfebc4 	movi	r2,-81
  80e5fc:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80e600:	e0bffa17 	ldw	r2,-24(fp)
  80e604:	1004403a 	cmpge	r2,r2,zero
  80e608:	1000071e 	bne	r2,zero,80e628 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  80e60c:	080e6400 	call	80e640 <alt_get_errno>
  80e610:	1007883a 	mov	r3,r2
  80e614:	e0bffa17 	ldw	r2,-24(fp)
  80e618:	0085c83a 	sub	r2,zero,r2
  80e61c:	18800015 	stw	r2,0(r3)
    rc = -1;
  80e620:	00bfffc4 	movi	r2,-1
  80e624:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80e628:	e0bffa17 	ldw	r2,-24(fp)
}
  80e62c:	e037883a 	mov	sp,fp
  80e630:	dfc00117 	ldw	ra,4(sp)
  80e634:	df000017 	ldw	fp,0(sp)
  80e638:	dec00204 	addi	sp,sp,8
  80e63c:	f800283a 	ret

0080e640 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e640:	defffd04 	addi	sp,sp,-12
  80e644:	dfc00215 	stw	ra,8(sp)
  80e648:	df000115 	stw	fp,4(sp)
  80e64c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e650:	008020b4 	movhi	r2,130
  80e654:	10b09e04 	addi	r2,r2,-15752
  80e658:	10800017 	ldw	r2,0(r2)
  80e65c:	1005003a 	cmpeq	r2,r2,zero
  80e660:	1000061e 	bne	r2,zero,80e67c <alt_get_errno+0x3c>
  80e664:	008020b4 	movhi	r2,130
  80e668:	10b09e04 	addi	r2,r2,-15752
  80e66c:	10800017 	ldw	r2,0(r2)
  80e670:	103ee83a 	callr	r2
  80e674:	e0bfff15 	stw	r2,-4(fp)
  80e678:	00000306 	br	80e688 <alt_get_errno+0x48>
  80e67c:	008020b4 	movhi	r2,130
  80e680:	10b7a504 	addi	r2,r2,-8556
  80e684:	e0bfff15 	stw	r2,-4(fp)
  80e688:	e0bfff17 	ldw	r2,-4(fp)
}
  80e68c:	e037883a 	mov	sp,fp
  80e690:	dfc00117 	ldw	ra,4(sp)
  80e694:	df000017 	ldw	fp,0(sp)
  80e698:	dec00204 	addi	sp,sp,8
  80e69c:	f800283a 	ret

0080e6a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80e6a0:	defffb04 	addi	sp,sp,-20
  80e6a4:	dfc00415 	stw	ra,16(sp)
  80e6a8:	df000315 	stw	fp,12(sp)
  80e6ac:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80e6b0:	0009883a 	mov	r4,zero
  80e6b4:	08172900 	call	817290 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80e6b8:	080f8cc0 	call	80f8cc <OSInit>
  80e6bc:	01000044 	movi	r4,1
  80e6c0:	08147940 	call	814794 <OSSemCreate>
  80e6c4:	1007883a 	mov	r3,r2
  80e6c8:	008020b4 	movhi	r2,130
  80e6cc:	10b7ab04 	addi	r2,r2,-8532
  80e6d0:	10c00015 	stw	r3,0(r2)
  80e6d4:	01000044 	movi	r4,1
  80e6d8:	08147940 	call	814794 <OSSemCreate>
  80e6dc:	1007883a 	mov	r3,r2
  80e6e0:	008020b4 	movhi	r2,130
  80e6e4:	10b7ad04 	addi	r2,r2,-8524
  80e6e8:	10c00015 	stw	r3,0(r2)
  80e6ec:	008020b4 	movhi	r2,130
  80e6f0:	10b7a604 	addi	r2,r2,-8552
  80e6f4:	e0bffd15 	stw	r2,-12(fp)
  80e6f8:	00800044 	movi	r2,1
  80e6fc:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  80e700:	e13ffe0b 	ldhu	r4,-8(fp)
  80e704:	08147940 	call	814794 <OSSemCreate>
  80e708:	1007883a 	mov	r3,r2
  80e70c:	e0bffd17 	ldw	r2,-12(fp)
  80e710:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80e714:	08172c40 	call	8172c4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80e718:	010020b4 	movhi	r4,130
  80e71c:	21298004 	addi	r4,r4,-23040
  80e720:	014020b4 	movhi	r5,130
  80e724:	29698004 	addi	r5,r5,-23040
  80e728:	018020b4 	movhi	r6,130
  80e72c:	31a98004 	addi	r6,r6,-23040
  80e730:	08190100 	call	819010 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80e734:	0818af40 	call	818af4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80e738:	010020b4 	movhi	r4,130
  80e73c:	2122d604 	addi	r4,r4,-29864
  80e740:	0819c400 	call	819c40 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80e744:	d1271517 	ldw	r4,-25516(gp)
  80e748:	d1671617 	ldw	r5,-25512(gp)
  80e74c:	d1a71717 	ldw	r6,-25508(gp)
  80e750:	08016ec0 	call	8016ec <main>
  80e754:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80e758:	01000044 	movi	r4,1
  80e75c:	080e0780 	call	80e078 <close>
  exit (result);
  80e760:	e13fff17 	ldw	r4,-4(fp)
  80e764:	0819c540 	call	819c54 <exit>

0080e768 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80e768:	defff704 	addi	sp,sp,-36
  80e76c:	dfc00815 	stw	ra,32(sp)
  80e770:	df000715 	stw	fp,28(sp)
  80e774:	df000704 	addi	fp,sp,28
  80e778:	e13ffb15 	stw	r4,-20(fp)
  80e77c:	e17ffc15 	stw	r5,-16(fp)
  80e780:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e784:	e0bffb17 	ldw	r2,-20(fp)
  80e788:	1004803a 	cmplt	r2,r2,zero
  80e78c:	1000091e 	bne	r2,zero,80e7b4 <read+0x4c>
  80e790:	e13ffb17 	ldw	r4,-20(fp)
  80e794:	01400304 	movi	r5,12
  80e798:	080535c0 	call	80535c <__mulsi3>
  80e79c:	1007883a 	mov	r3,r2
  80e7a0:	008020b4 	movhi	r2,130
  80e7a4:	10abf404 	addi	r2,r2,-20528
  80e7a8:	1887883a 	add	r3,r3,r2
  80e7ac:	e0ffff15 	stw	r3,-4(fp)
  80e7b0:	00000106 	br	80e7b8 <read+0x50>
  80e7b4:	e03fff15 	stw	zero,-4(fp)
  80e7b8:	e0bfff17 	ldw	r2,-4(fp)
  80e7bc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80e7c0:	e0bffa17 	ldw	r2,-24(fp)
  80e7c4:	1005003a 	cmpeq	r2,r2,zero
  80e7c8:	1000241e 	bne	r2,zero,80e85c <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80e7cc:	e0bffa17 	ldw	r2,-24(fp)
  80e7d0:	10800217 	ldw	r2,8(r2)
  80e7d4:	108000cc 	andi	r2,r2,3
  80e7d8:	10800060 	cmpeqi	r2,r2,1
  80e7dc:	10001a1e 	bne	r2,zero,80e848 <read+0xe0>
  80e7e0:	e0bffa17 	ldw	r2,-24(fp)
  80e7e4:	10800017 	ldw	r2,0(r2)
  80e7e8:	10800517 	ldw	r2,20(r2)
  80e7ec:	1005003a 	cmpeq	r2,r2,zero
  80e7f0:	1000151e 	bne	r2,zero,80e848 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80e7f4:	e0bffa17 	ldw	r2,-24(fp)
  80e7f8:	10800017 	ldw	r2,0(r2)
  80e7fc:	10800517 	ldw	r2,20(r2)
  80e800:	e17ffc17 	ldw	r5,-16(fp)
  80e804:	e1bffd17 	ldw	r6,-12(fp)
  80e808:	e13ffa17 	ldw	r4,-24(fp)
  80e80c:	103ee83a 	callr	r2
  80e810:	e0bff915 	stw	r2,-28(fp)
  80e814:	e0bff917 	ldw	r2,-28(fp)
  80e818:	1004403a 	cmpge	r2,r2,zero
  80e81c:	1000071e 	bne	r2,zero,80e83c <read+0xd4>
        {
          ALT_ERRNO = -rval;
  80e820:	080e88c0 	call	80e88c <alt_get_errno>
  80e824:	e0fff917 	ldw	r3,-28(fp)
  80e828:	00c7c83a 	sub	r3,zero,r3
  80e82c:	10c00015 	stw	r3,0(r2)
          return -1;
  80e830:	00bfffc4 	movi	r2,-1
  80e834:	e0bffe15 	stw	r2,-8(fp)
  80e838:	00000e06 	br	80e874 <read+0x10c>
        }
        return rval;
  80e83c:	e0bff917 	ldw	r2,-28(fp)
  80e840:	e0bffe15 	stw	r2,-8(fp)
  80e844:	00000b06 	br	80e874 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80e848:	080e88c0 	call	80e88c <alt_get_errno>
  80e84c:	1007883a 	mov	r3,r2
  80e850:	00800344 	movi	r2,13
  80e854:	18800015 	stw	r2,0(r3)
  80e858:	00000406 	br	80e86c <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80e85c:	080e88c0 	call	80e88c <alt_get_errno>
  80e860:	1007883a 	mov	r3,r2
  80e864:	00801444 	movi	r2,81
  80e868:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80e86c:	00bfffc4 	movi	r2,-1
  80e870:	e0bffe15 	stw	r2,-8(fp)
  80e874:	e0bffe17 	ldw	r2,-8(fp)
}
  80e878:	e037883a 	mov	sp,fp
  80e87c:	dfc00117 	ldw	ra,4(sp)
  80e880:	df000017 	ldw	fp,0(sp)
  80e884:	dec00204 	addi	sp,sp,8
  80e888:	f800283a 	ret

0080e88c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e88c:	defffd04 	addi	sp,sp,-12
  80e890:	dfc00215 	stw	ra,8(sp)
  80e894:	df000115 	stw	fp,4(sp)
  80e898:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e89c:	008020b4 	movhi	r2,130
  80e8a0:	10b09e04 	addi	r2,r2,-15752
  80e8a4:	10800017 	ldw	r2,0(r2)
  80e8a8:	1005003a 	cmpeq	r2,r2,zero
  80e8ac:	1000061e 	bne	r2,zero,80e8c8 <alt_get_errno+0x3c>
  80e8b0:	008020b4 	movhi	r2,130
  80e8b4:	10b09e04 	addi	r2,r2,-15752
  80e8b8:	10800017 	ldw	r2,0(r2)
  80e8bc:	103ee83a 	callr	r2
  80e8c0:	e0bfff15 	stw	r2,-4(fp)
  80e8c4:	00000306 	br	80e8d4 <alt_get_errno+0x48>
  80e8c8:	008020b4 	movhi	r2,130
  80e8cc:	10b7a504 	addi	r2,r2,-8556
  80e8d0:	e0bfff15 	stw	r2,-4(fp)
  80e8d4:	e0bfff17 	ldw	r2,-4(fp)
}
  80e8d8:	e037883a 	mov	sp,fp
  80e8dc:	dfc00117 	ldw	ra,4(sp)
  80e8e0:	df000017 	ldw	fp,0(sp)
  80e8e4:	dec00204 	addi	sp,sp,8
  80e8e8:	f800283a 	ret

0080e8ec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80e8ec:	defffc04 	addi	sp,sp,-16
  80e8f0:	dfc00315 	stw	ra,12(sp)
  80e8f4:	df000215 	stw	fp,8(sp)
  80e8f8:	dc000115 	stw	r16,4(sp)
  80e8fc:	df000104 	addi	fp,sp,4
  80e900:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80e904:	e0bfff17 	ldw	r2,-4(fp)
  80e908:	108000d0 	cmplti	r2,r2,3
  80e90c:	10000f1e 	bne	r2,zero,80e94c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  80e910:	e13fff17 	ldw	r4,-4(fp)
  80e914:	040020b4 	movhi	r16,130
  80e918:	842bf404 	addi	r16,r16,-20528
  80e91c:	01400304 	movi	r5,12
  80e920:	080535c0 	call	80535c <__mulsi3>
  80e924:	1405883a 	add	r2,r2,r16
  80e928:	10800204 	addi	r2,r2,8
  80e92c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80e930:	e13fff17 	ldw	r4,-4(fp)
  80e934:	040020b4 	movhi	r16,130
  80e938:	842bf404 	addi	r16,r16,-20528
  80e93c:	01400304 	movi	r5,12
  80e940:	080535c0 	call	80535c <__mulsi3>
  80e944:	1405883a 	add	r2,r2,r16
  80e948:	10000015 	stw	zero,0(r2)
  }
}
  80e94c:	e037883a 	mov	sp,fp
  80e950:	dfc00217 	ldw	ra,8(sp)
  80e954:	df000117 	ldw	fp,4(sp)
  80e958:	dc000017 	ldw	r16,0(sp)
  80e95c:	dec00304 	addi	sp,sp,12
  80e960:	f800283a 	ret

0080e964 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80e964:	defff804 	addi	sp,sp,-32
  80e968:	df000715 	stw	fp,28(sp)
  80e96c:	df000704 	addi	fp,sp,28
  80e970:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e974:	0005303a 	rdctl	r2,status
  80e978:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e97c:	e0fffb17 	ldw	r3,-20(fp)
  80e980:	00bfff84 	movi	r2,-2
  80e984:	1884703a 	and	r2,r3,r2
  80e988:	1001703a 	wrctl	status,r2
  
  return context;
  80e98c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80e990:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80e994:	d0a00d17 	ldw	r2,-32716(gp)
  80e998:	10c000c4 	addi	r3,r2,3
  80e99c:	00bfff04 	movi	r2,-4
  80e9a0:	1884703a 	and	r2,r3,r2
  80e9a4:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80e9a8:	d0e00d17 	ldw	r3,-32716(gp)
  80e9ac:	e0bffe17 	ldw	r2,-8(fp)
  80e9b0:	1887883a 	add	r3,r3,r2
  80e9b4:	00804034 	movhi	r2,256
  80e9b8:	10800004 	addi	r2,r2,0
  80e9bc:	10c0072e 	bgeu	r2,r3,80e9dc <sbrk+0x78>
  80e9c0:	e0bffd17 	ldw	r2,-12(fp)
  80e9c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e9c8:	e0bffa17 	ldw	r2,-24(fp)
  80e9cc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80e9d0:	00bfffc4 	movi	r2,-1
  80e9d4:	e0bfff15 	stw	r2,-4(fp)
  80e9d8:	00000c06 	br	80ea0c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80e9dc:	d0a00d17 	ldw	r2,-32716(gp)
  80e9e0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80e9e4:	d0e00d17 	ldw	r3,-32716(gp)
  80e9e8:	e0bffe17 	ldw	r2,-8(fp)
  80e9ec:	1885883a 	add	r2,r3,r2
  80e9f0:	d0a00d15 	stw	r2,-32716(gp)
  80e9f4:	e0bffd17 	ldw	r2,-12(fp)
  80e9f8:	e0bff915 	stw	r2,-28(fp)
  80e9fc:	e0bff917 	ldw	r2,-28(fp)
  80ea00:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80ea04:	e0bffc17 	ldw	r2,-16(fp)
  80ea08:	e0bfff15 	stw	r2,-4(fp)
  80ea0c:	e0bfff17 	ldw	r2,-4(fp)
} 
  80ea10:	e037883a 	mov	sp,fp
  80ea14:	df000017 	ldw	fp,0(sp)
  80ea18:	dec00104 	addi	sp,sp,4
  80ea1c:	f800283a 	ret

0080ea20 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80ea20:	defff904 	addi	sp,sp,-28
  80ea24:	dfc00615 	stw	ra,24(sp)
  80ea28:	df000515 	stw	fp,20(sp)
  80ea2c:	dc000415 	stw	r16,16(sp)
  80ea30:	df000404 	addi	fp,sp,16
  80ea34:	e13ffe15 	stw	r4,-8(fp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
  80ea38:	008020b4 	movhi	r2,130
  80ea3c:	10b7ae44 	addi	r2,r2,-8519
  80ea40:	10800003 	ldbu	r2,0(r2)
  80ea44:	10803fcc 	andi	r2,r2,255
  80ea48:	1004c03a 	cmpne	r2,r2,zero
  80ea4c:	1000041e 	bne	r2,zero,80ea60 <usleep+0x40>
  {
    return alt_busy_sleep (us);
  80ea50:	e13ffe17 	ldw	r4,-8(fp)
  80ea54:	08188680 	call	818868 <alt_busy_sleep>
  80ea58:	e0bfff15 	stw	r2,-4(fp)
  80ea5c:	00003106 	br	80eb24 <usleep+0x104>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80ea60:	008020b4 	movhi	r2,130
  80ea64:	10b7c304 	addi	r2,r2,-8436
  80ea68:	10800017 	ldw	r2,0(r2)

  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
  80ea6c:	e0bffc15 	stw	r2,-16(fp)
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
  80ea70:	e13ffe17 	ldw	r4,-8(fp)
  80ea74:	014003f4 	movhi	r5,15
  80ea78:	29509004 	addi	r5,r5,16960
  80ea7c:	080534c0 	call	80534c <__udivsi3>
  80ea80:	1009883a 	mov	r4,r2
  80ea84:	e17ffc17 	ldw	r5,-16(fp)
  80ea88:	080535c0 	call	80535c <__mulsi3>
  80ea8c:	1021883a 	mov	r16,r2
  80ea90:	e13ffe17 	ldw	r4,-8(fp)
  80ea94:	014003f4 	movhi	r5,15
  80ea98:	29509004 	addi	r5,r5,16960
  80ea9c:	08053540 	call	805354 <__umodsi3>
  80eaa0:	1009883a 	mov	r4,r2
  80eaa4:	e17ffc17 	ldw	r5,-16(fp)
  80eaa8:	080535c0 	call	80535c <__mulsi3>
  80eaac:	1009883a 	mov	r4,r2
  80eab0:	014003f4 	movhi	r5,15
  80eab4:	29509004 	addi	r5,r5,16960
  80eab8:	080534c0 	call	80534c <__udivsi3>
  80eabc:	8085883a 	add	r2,r16,r2
  80eac0:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
  80eac4:	00000706 	br	80eae4 <usleep+0xc4>
  {
    OSTimeDly(0xffff);
  80eac8:	013fffd4 	movui	r4,65535
  80eacc:	0816cdc0 	call	816cdc <OSTimeDly>
    ticks -= 0xffff;
  80ead0:	e0bffd17 	ldw	r2,-12(fp)
  80ead4:	00fffff4 	movhi	r3,65535
  80ead8:	18c00044 	addi	r3,r3,1
  80eadc:	10c5883a 	add	r2,r2,r3
  80eae0:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
  80eae4:	e0fffd17 	ldw	r3,-12(fp)
  80eae8:	00bfffd4 	movui	r2,65535
  80eaec:	10fff636 	bltu	r2,r3,80eac8 <usleep+0xa8>
  {
    OSTimeDly(0xffff);
    ticks -= 0xffff;
  }

  OSTimeDly ((INT16U) (ticks));
  80eaf0:	e0bffd17 	ldw	r2,-12(fp)
  80eaf4:	113fffcc 	andi	r4,r2,65535
  80eaf8:	0816cdc0 	call	816cdc <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
  80eafc:	010003f4 	movhi	r4,15
  80eb00:	21109004 	addi	r4,r4,16960
  80eb04:	e17ffc17 	ldw	r5,-16(fp)
  80eb08:	080534c0 	call	80534c <__udivsi3>
  80eb0c:	100b883a 	mov	r5,r2
  80eb10:	e13ffe17 	ldw	r4,-8(fp)
  80eb14:	08053540 	call	805354 <__umodsi3>
  80eb18:	1009883a 	mov	r4,r2
  80eb1c:	08188680 	call	818868 <alt_busy_sleep>

  return 0;  
  80eb20:	e03fff15 	stw	zero,-4(fp)
  80eb24:	e0bfff17 	ldw	r2,-4(fp)
}
  80eb28:	e037883a 	mov	sp,fp
  80eb2c:	dfc00217 	ldw	ra,8(sp)
  80eb30:	df000117 	ldw	fp,4(sp)
  80eb34:	dc000017 	ldw	r16,0(sp)
  80eb38:	dec00304 	addi	sp,sp,12
  80eb3c:	f800283a 	ret

0080eb40 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80eb40:	defff704 	addi	sp,sp,-36
  80eb44:	dfc00815 	stw	ra,32(sp)
  80eb48:	df000715 	stw	fp,28(sp)
  80eb4c:	df000704 	addi	fp,sp,28
  80eb50:	e13ffb15 	stw	r4,-20(fp)
  80eb54:	e17ffc15 	stw	r5,-16(fp)
  80eb58:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80eb5c:	e0bffb17 	ldw	r2,-20(fp)
  80eb60:	1004803a 	cmplt	r2,r2,zero
  80eb64:	1000091e 	bne	r2,zero,80eb8c <write+0x4c>
  80eb68:	e13ffb17 	ldw	r4,-20(fp)
  80eb6c:	01400304 	movi	r5,12
  80eb70:	080535c0 	call	80535c <__mulsi3>
  80eb74:	1007883a 	mov	r3,r2
  80eb78:	008020b4 	movhi	r2,130
  80eb7c:	10abf404 	addi	r2,r2,-20528
  80eb80:	1887883a 	add	r3,r3,r2
  80eb84:	e0ffff15 	stw	r3,-4(fp)
  80eb88:	00000106 	br	80eb90 <write+0x50>
  80eb8c:	e03fff15 	stw	zero,-4(fp)
  80eb90:	e0bfff17 	ldw	r2,-4(fp)
  80eb94:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80eb98:	e0bffa17 	ldw	r2,-24(fp)
  80eb9c:	1005003a 	cmpeq	r2,r2,zero
  80eba0:	1000241e 	bne	r2,zero,80ec34 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80eba4:	e0bffa17 	ldw	r2,-24(fp)
  80eba8:	10800217 	ldw	r2,8(r2)
  80ebac:	108000cc 	andi	r2,r2,3
  80ebb0:	1005003a 	cmpeq	r2,r2,zero
  80ebb4:	10001a1e 	bne	r2,zero,80ec20 <write+0xe0>
  80ebb8:	e0bffa17 	ldw	r2,-24(fp)
  80ebbc:	10800017 	ldw	r2,0(r2)
  80ebc0:	10800617 	ldw	r2,24(r2)
  80ebc4:	1005003a 	cmpeq	r2,r2,zero
  80ebc8:	1000151e 	bne	r2,zero,80ec20 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80ebcc:	e0bffa17 	ldw	r2,-24(fp)
  80ebd0:	10800017 	ldw	r2,0(r2)
  80ebd4:	10800617 	ldw	r2,24(r2)
  80ebd8:	e17ffc17 	ldw	r5,-16(fp)
  80ebdc:	e1bffd17 	ldw	r6,-12(fp)
  80ebe0:	e13ffa17 	ldw	r4,-24(fp)
  80ebe4:	103ee83a 	callr	r2
  80ebe8:	e0bff915 	stw	r2,-28(fp)
  80ebec:	e0bff917 	ldw	r2,-28(fp)
  80ebf0:	1004403a 	cmpge	r2,r2,zero
  80ebf4:	1000071e 	bne	r2,zero,80ec14 <write+0xd4>
      {
        ALT_ERRNO = -rval;
  80ebf8:	080ec640 	call	80ec64 <alt_get_errno>
  80ebfc:	e0fff917 	ldw	r3,-28(fp)
  80ec00:	00c7c83a 	sub	r3,zero,r3
  80ec04:	10c00015 	stw	r3,0(r2)
        return -1;
  80ec08:	00bfffc4 	movi	r2,-1
  80ec0c:	e0bffe15 	stw	r2,-8(fp)
  80ec10:	00000e06 	br	80ec4c <write+0x10c>
      }
      return rval;
  80ec14:	e0bff917 	ldw	r2,-28(fp)
  80ec18:	e0bffe15 	stw	r2,-8(fp)
  80ec1c:	00000b06 	br	80ec4c <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80ec20:	080ec640 	call	80ec64 <alt_get_errno>
  80ec24:	1007883a 	mov	r3,r2
  80ec28:	00800344 	movi	r2,13
  80ec2c:	18800015 	stw	r2,0(r3)
  80ec30:	00000406 	br	80ec44 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80ec34:	080ec640 	call	80ec64 <alt_get_errno>
  80ec38:	1007883a 	mov	r3,r2
  80ec3c:	00801444 	movi	r2,81
  80ec40:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80ec44:	00bfffc4 	movi	r2,-1
  80ec48:	e0bffe15 	stw	r2,-8(fp)
  80ec4c:	e0bffe17 	ldw	r2,-8(fp)
}
  80ec50:	e037883a 	mov	sp,fp
  80ec54:	dfc00117 	ldw	ra,4(sp)
  80ec58:	df000017 	ldw	fp,0(sp)
  80ec5c:	dec00204 	addi	sp,sp,8
  80ec60:	f800283a 	ret

0080ec64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ec64:	defffd04 	addi	sp,sp,-12
  80ec68:	dfc00215 	stw	ra,8(sp)
  80ec6c:	df000115 	stw	fp,4(sp)
  80ec70:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ec74:	008020b4 	movhi	r2,130
  80ec78:	10b09e04 	addi	r2,r2,-15752
  80ec7c:	10800017 	ldw	r2,0(r2)
  80ec80:	1005003a 	cmpeq	r2,r2,zero
  80ec84:	1000061e 	bne	r2,zero,80eca0 <alt_get_errno+0x3c>
  80ec88:	008020b4 	movhi	r2,130
  80ec8c:	10b09e04 	addi	r2,r2,-15752
  80ec90:	10800017 	ldw	r2,0(r2)
  80ec94:	103ee83a 	callr	r2
  80ec98:	e0bfff15 	stw	r2,-4(fp)
  80ec9c:	00000306 	br	80ecac <alt_get_errno+0x48>
  80eca0:	008020b4 	movhi	r2,130
  80eca4:	10b7a504 	addi	r2,r2,-8556
  80eca8:	e0bfff15 	stw	r2,-4(fp)
  80ecac:	e0bfff17 	ldw	r2,-4(fp)
}
  80ecb0:	e037883a 	mov	sp,fp
  80ecb4:	dfc00117 	ldw	ra,4(sp)
  80ecb8:	df000017 	ldw	fp,0(sp)
  80ecbc:	dec00204 	addi	sp,sp,8
  80ecc0:	f800283a 	ret

0080ecc4 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  80ecc4:	deffdf04 	addi	sp,sp,-132
  80ecc8:	dfc02015 	stw	ra,128(sp)
  80eccc:	df001f15 	stw	fp,124(sp)
  80ecd0:	df001f04 	addi	fp,sp,124
  80ecd4:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  80ecd8:	e17fe204 	addi	r5,fp,-120
  80ecdc:	01003fc4 	movi	r4,255
  80ece0:	0816b1c0 	call	816b1c <OSTaskQuery>
  80ece4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80ece8:	e0bffe83 	ldbu	r2,-6(fp)
  80ecec:	10803fcc 	andi	r2,r2,255
  80ecf0:	1004c03a 	cmpne	r2,r2,zero
  80ecf4:	1000191e 	bne	r2,zero,80ed5c <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
  80ecf8:	e0bfee83 	ldbu	r2,-70(fp)
  80ecfc:	10803fcc 	andi	r2,r2,255
  80ed00:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  80ed04:	d1271917 	ldw	r4,-25500(gp)
  80ed08:	e17ffd04 	addi	r5,fp,-12
  80ed0c:	08150680 	call	815068 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  80ed10:	e0bffe43 	ldbu	r2,-7(fp)
  80ed14:	10803fcc 	andi	r2,r2,255
  80ed18:	1005003a 	cmpeq	r2,r2,zero
  80ed1c:	1000071e 	bne	r2,zero,80ed3c <__env_lock+0x78>
  80ed20:	d0e00e17 	ldw	r3,-32712(gp)
  80ed24:	e0bfe117 	ldw	r2,-124(fp)
  80ed28:	10c0041e 	bne	r2,r3,80ed3c <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
  80ed2c:	d0a71817 	ldw	r2,-25504(gp)
  80ed30:	10800044 	addi	r2,r2,1
  80ed34:	d0a71815 	stw	r2,-25504(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
  80ed38:	00000806 	br	80ed5c <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  80ed3c:	d1271917 	ldw	r4,-25500(gp)
  80ed40:	e1bffe84 	addi	r6,fp,-6
  80ed44:	000b883a 	mov	r5,zero
  80ed48:	0814b480 	call	814b48 <OSSemPend>
    locks  = 1;
  80ed4c:	00800044 	movi	r2,1
  80ed50:	d0a71815 	stw	r2,-25504(gp)
    lockid = id;
  80ed54:	e0bfe117 	ldw	r2,-124(fp)
  80ed58:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  80ed5c:	e037883a 	mov	sp,fp
  80ed60:	dfc00117 	ldw	ra,4(sp)
  80ed64:	df000017 	ldw	fp,0(sp)
  80ed68:	dec00204 	addi	sp,sp,8
  80ed6c:	f800283a 	ret

0080ed70 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  80ed70:	defffd04 	addi	sp,sp,-12
  80ed74:	dfc00215 	stw	ra,8(sp)
  80ed78:	df000115 	stw	fp,4(sp)
  80ed7c:	df000104 	addi	fp,sp,4
  80ed80:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  80ed84:	d0a71817 	ldw	r2,-25504(gp)
  80ed88:	1005003a 	cmpeq	r2,r2,zero
  80ed8c:	10000a1e 	bne	r2,zero,80edb8 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  80ed90:	d0a71817 	ldw	r2,-25504(gp)
  80ed94:	10bfffc4 	addi	r2,r2,-1
  80ed98:	d0a71815 	stw	r2,-25504(gp)
  80ed9c:	d0a71817 	ldw	r2,-25504(gp)
  80eda0:	1004c03a 	cmpne	r2,r2,zero
  80eda4:	1000041e 	bne	r2,zero,80edb8 <__env_unlock+0x48>
  {
    lockid = -1;
  80eda8:	00bfffc4 	movi	r2,-1
  80edac:	d0a00e15 	stw	r2,-32712(gp)
    OSSemPost( alt_envsem );
  80edb0:	d1271917 	ldw	r4,-25500(gp)
  80edb4:	0814f400 	call	814f40 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  80edb8:	e037883a 	mov	sp,fp
  80edbc:	dfc00117 	ldw	ra,4(sp)
  80edc0:	df000017 	ldw	fp,0(sp)
  80edc4:	dec00204 	addi	sp,sp,8
  80edc8:	f800283a 	ret

0080edcc <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  80edcc:	deffdb04 	addi	sp,sp,-148
  80edd0:	dfc02415 	stw	ra,144(sp)
  80edd4:	df002315 	stw	fp,140(sp)
  80edd8:	df002304 	addi	fp,sp,140
  80eddc:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ede0:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  80ede4:	008020b4 	movhi	r2,130
  80ede8:	10b7ae44 	addi	r2,r2,-8519
  80edec:	10800003 	ldbu	r2,0(r2)
  80edf0:	10803fcc 	andi	r2,r2,255
  80edf4:	10800058 	cmpnei	r2,r2,1
  80edf8:	1000311e 	bne	r2,zero,80eec0 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  80edfc:	e17fe204 	addi	r5,fp,-120
  80ee00:	01003fc4 	movi	r4,255
  80ee04:	0816b1c0 	call	816b1c <OSTaskQuery>
  80ee08:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80ee0c:	e0bffe83 	ldbu	r2,-6(fp)
  80ee10:	10803fcc 	andi	r2,r2,255
  80ee14:	1004c03a 	cmpne	r2,r2,zero
  80ee18:	1000291e 	bne	r2,zero,80eec0 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
  80ee1c:	e0bfee83 	ldbu	r2,-70(fp)
  80ee20:	10803fcc 	andi	r2,r2,255
  80ee24:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  80ee28:	d1271b17 	ldw	r4,-25492(gp)
  80ee2c:	e17ffd04 	addi	r5,fp,-12
  80ee30:	08150680 	call	815068 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ee34:	0005303a 	rdctl	r2,status
  80ee38:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ee3c:	e0ffdf17 	ldw	r3,-132(fp)
  80ee40:	00bfff84 	movi	r2,-2
  80ee44:	1884703a 	and	r2,r3,r2
  80ee48:	1001703a 	wrctl	status,r2
  
  return context;
  80ee4c:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
  80ee50:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
  80ee54:	e0bffd0b 	ldhu	r2,-12(fp)
  80ee58:	10bfffcc 	andi	r2,r2,65535
  80ee5c:	1004c03a 	cmpne	r2,r2,zero
  80ee60:	10000b1e 	bne	r2,zero,80ee90 <__malloc_lock+0xc4>
  80ee64:	d0e00f17 	ldw	r3,-32708(gp)
  80ee68:	e0bfe117 	ldw	r2,-124(fp)
  80ee6c:	10c0081e 	bne	r2,r3,80ee90 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
  80ee70:	d0a71a17 	ldw	r2,-25496(gp)
  80ee74:	10800044 	addi	r2,r2,1
  80ee78:	d0a71a15 	stw	r2,-25496(gp)
  80ee7c:	e0bfe017 	ldw	r2,-128(fp)
  80ee80:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ee84:	e0bfde17 	ldw	r2,-136(fp)
  80ee88:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
  80ee8c:	00000c06 	br	80eec0 <__malloc_lock+0xf4>
  80ee90:	e0bfe017 	ldw	r2,-128(fp)
  80ee94:	e0bfdd15 	stw	r2,-140(fp)
  80ee98:	e0bfdd17 	ldw	r2,-140(fp)
  80ee9c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  80eea0:	d1271b17 	ldw	r4,-25492(gp)
  80eea4:	e1bffe84 	addi	r6,fp,-6
  80eea8:	000b883a 	mov	r5,zero
  80eeac:	0814b480 	call	814b48 <OSSemPend>
    locks  = 1;
  80eeb0:	00800044 	movi	r2,1
  80eeb4:	d0a71a15 	stw	r2,-25496(gp)
    lockid = id;
  80eeb8:	e0bfe117 	ldw	r2,-124(fp)
  80eebc:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  80eec0:	e037883a 	mov	sp,fp
  80eec4:	dfc00117 	ldw	ra,4(sp)
  80eec8:	df000017 	ldw	fp,0(sp)
  80eecc:	dec00204 	addi	sp,sp,8
  80eed0:	f800283a 	ret

0080eed4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80eed4:	defff804 	addi	sp,sp,-32
  80eed8:	dfc00715 	stw	ra,28(sp)
  80eedc:	df000615 	stw	fp,24(sp)
  80eee0:	df000604 	addi	fp,sp,24
  80eee4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80eee8:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
  80eeec:	008020b4 	movhi	r2,130
  80eef0:	10b7ae44 	addi	r2,r2,-8519
  80eef4:	10800003 	ldbu	r2,0(r2)
  80eef8:	10803fcc 	andi	r2,r2,255
  80eefc:	10800058 	cmpnei	r2,r2,1
  80ef00:	1000231e 	bne	r2,zero,80ef90 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ef04:	0005303a 	rdctl	r2,status
  80ef08:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ef0c:	e0fffd17 	ldw	r3,-12(fp)
  80ef10:	00bfff84 	movi	r2,-2
  80ef14:	1884703a 	and	r2,r3,r2
  80ef18:	1001703a 	wrctl	status,r2
  
  return context;
  80ef1c:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
  80ef20:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
  80ef24:	d0a71a17 	ldw	r2,-25496(gp)
  80ef28:	1004c03a 	cmpne	r2,r2,zero
  80ef2c:	1000051e 	bne	r2,zero,80ef44 <__malloc_unlock+0x70>
  80ef30:	e0bffe17 	ldw	r2,-8(fp)
  80ef34:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ef38:	e0bffc17 	ldw	r2,-16(fp)
  80ef3c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  80ef40:	00001306 	br	80ef90 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  80ef44:	d0a71a17 	ldw	r2,-25496(gp)
  80ef48:	10bfffc4 	addi	r2,r2,-1
  80ef4c:	d0a71a15 	stw	r2,-25496(gp)
  80ef50:	d0a71a17 	ldw	r2,-25496(gp)
  80ef54:	1004c03a 	cmpne	r2,r2,zero
  80ef58:	1000091e 	bne	r2,zero,80ef80 <__malloc_unlock+0xac>
  {
    lockid = -1;
  80ef5c:	00bfffc4 	movi	r2,-1
  80ef60:	d0a00f15 	stw	r2,-32708(gp)
  80ef64:	e0bffe17 	ldw	r2,-8(fp)
  80ef68:	e0bffb15 	stw	r2,-20(fp)
  80ef6c:	e0bffb17 	ldw	r2,-20(fp)
  80ef70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  80ef74:	d1271b17 	ldw	r4,-25492(gp)
  80ef78:	0814f400 	call	814f40 <OSSemPost>
  80ef7c:	00000406 	br	80ef90 <__malloc_unlock+0xbc>
  80ef80:	e0bffe17 	ldw	r2,-8(fp)
  80ef84:	e0bffa15 	stw	r2,-24(fp)
  80ef88:	e0bffa17 	ldw	r2,-24(fp)
  80ef8c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  80ef90:	e037883a 	mov	sp,fp
  80ef94:	dfc00117 	ldw	ra,4(sp)
  80ef98:	df000017 	ldw	fp,0(sp)
  80ef9c:	dec00204 	addi	sp,sp,8
  80efa0:	f800283a 	ret

0080efa4 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  80efa4:	defff604 	addi	sp,sp,-40
  80efa8:	dfc00915 	stw	ra,36(sp)
  80efac:	df000815 	stw	fp,32(sp)
  80efb0:	df000804 	addi	fp,sp,32
  80efb4:	e13ffc15 	stw	r4,-16(fp)
  80efb8:	e17ffd15 	stw	r5,-12(fp)
  80efbc:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80efc0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80efc4:	e0bffe17 	ldw	r2,-8(fp)
  80efc8:	1004c03a 	cmpne	r2,r2,zero
  80efcc:	1000021e 	bne	r2,zero,80efd8 <OSEventNameGet+0x34>
        return (0);
  80efd0:	e03fff15 	stw	zero,-4(fp)
  80efd4:	00003906 	br	80f0bc <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  80efd8:	e0bffc17 	ldw	r2,-16(fp)
  80efdc:	1004c03a 	cmpne	r2,r2,zero
  80efe0:	1000051e 	bne	r2,zero,80eff8 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  80efe4:	e0fffe17 	ldw	r3,-8(fp)
  80efe8:	00800104 	movi	r2,4
  80efec:	18800005 	stb	r2,0(r3)
        return (0);
  80eff0:	e03fff15 	stw	zero,-4(fp)
  80eff4:	00003106 	br	80f0bc <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80eff8:	e0bffd17 	ldw	r2,-12(fp)
  80effc:	1004c03a 	cmpne	r2,r2,zero
  80f000:	1000051e 	bne	r2,zero,80f018 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  80f004:	e0fffe17 	ldw	r3,-8(fp)
  80f008:	00800304 	movi	r2,12
  80f00c:	18800005 	stb	r2,0(r3)
        return (0);
  80f010:	e03fff15 	stw	zero,-4(fp)
  80f014:	00002906 	br	80f0bc <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80f018:	d0a72a03 	ldbu	r2,-25432(gp)
  80f01c:	10803fcc 	andi	r2,r2,255
  80f020:	1005003a 	cmpeq	r2,r2,zero
  80f024:	1000051e 	bne	r2,zero,80f03c <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
  80f028:	e0fffe17 	ldw	r3,-8(fp)
  80f02c:	00800444 	movi	r2,17
  80f030:	18800005 	stb	r2,0(r3)
        return (0);
  80f034:	e03fff15 	stw	zero,-4(fp)
  80f038:	00002006 	br	80f0bc <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
  80f03c:	e0bffc17 	ldw	r2,-16(fp)
  80f040:	10800003 	ldbu	r2,0(r2)
  80f044:	10803fcc 	andi	r2,r2,255
  80f048:	10bfffc4 	addi	r2,r2,-1
  80f04c:	10800128 	cmpgeui	r2,r2,4
  80f050:	1000161e 	bne	r2,zero,80f0ac <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f054:	0005303a 	rdctl	r2,status
  80f058:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f05c:	e0fff917 	ldw	r3,-28(fp)
  80f060:	00bfff84 	movi	r2,-2
  80f064:	1884703a 	and	r2,r3,r2
  80f068:	1001703a 	wrctl	status,r2
  
  return context;
  80f06c:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  80f070:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  80f074:	e0bffc17 	ldw	r2,-16(fp)
  80f078:	11400384 	addi	r5,r2,14
  80f07c:	e13ffd17 	ldw	r4,-12(fp)
  80f080:	0810b280 	call	810b28 <OS_StrCopy>
  80f084:	e0bffb05 	stb	r2,-20(fp)
  80f088:	e0bffa17 	ldw	r2,-24(fp)
  80f08c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f090:	e0bff817 	ldw	r2,-32(fp)
  80f094:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80f098:	e0bffe17 	ldw	r2,-8(fp)
  80f09c:	10000005 	stb	zero,0(r2)
    return (len);
  80f0a0:	e0bffb03 	ldbu	r2,-20(fp)
  80f0a4:	e0bfff15 	stw	r2,-4(fp)
  80f0a8:	00000406 	br	80f0bc <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  80f0ac:	e0fffe17 	ldw	r3,-8(fp)
  80f0b0:	00800044 	movi	r2,1
  80f0b4:	18800005 	stb	r2,0(r3)
             return (0);
  80f0b8:	e03fff15 	stw	zero,-4(fp)
  80f0bc:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
  80f0c0:	e037883a 	mov	sp,fp
  80f0c4:	dfc00117 	ldw	ra,4(sp)
  80f0c8:	df000017 	ldw	fp,0(sp)
  80f0cc:	dec00204 	addi	sp,sp,8
  80f0d0:	f800283a 	ret

0080f0d4 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  80f0d4:	defff604 	addi	sp,sp,-40
  80f0d8:	dfc00915 	stw	ra,36(sp)
  80f0dc:	df000815 	stw	fp,32(sp)
  80f0e0:	df000804 	addi	fp,sp,32
  80f0e4:	e13ffd15 	stw	r4,-12(fp)
  80f0e8:	e17ffe15 	stw	r5,-8(fp)
  80f0ec:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f0f0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80f0f4:	e0bfff17 	ldw	r2,-4(fp)
  80f0f8:	1005003a 	cmpeq	r2,r2,zero
  80f0fc:	1000411e 	bne	r2,zero,80f204 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  80f100:	e0bffd17 	ldw	r2,-12(fp)
  80f104:	1004c03a 	cmpne	r2,r2,zero
  80f108:	1000041e 	bne	r2,zero,80f11c <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  80f10c:	e0ffff17 	ldw	r3,-4(fp)
  80f110:	00800104 	movi	r2,4
  80f114:	18800005 	stb	r2,0(r3)
        return;
  80f118:	00003a06 	br	80f204 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80f11c:	e0bffe17 	ldw	r2,-8(fp)
  80f120:	1004c03a 	cmpne	r2,r2,zero
  80f124:	1000041e 	bne	r2,zero,80f138 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  80f128:	e0ffff17 	ldw	r3,-4(fp)
  80f12c:	00800304 	movi	r2,12
  80f130:	18800005 	stb	r2,0(r3)
        return;
  80f134:	00003306 	br	80f204 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80f138:	d0a72a03 	ldbu	r2,-25432(gp)
  80f13c:	10803fcc 	andi	r2,r2,255
  80f140:	1005003a 	cmpeq	r2,r2,zero
  80f144:	1000041e 	bne	r2,zero,80f158 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
  80f148:	e0ffff17 	ldw	r3,-4(fp)
  80f14c:	00800484 	movi	r2,18
  80f150:	18800005 	stb	r2,0(r3)
        return;
  80f154:	00002b06 	br	80f204 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
  80f158:	e0bffd17 	ldw	r2,-12(fp)
  80f15c:	10800003 	ldbu	r2,0(r2)
  80f160:	10803fcc 	andi	r2,r2,255
  80f164:	10bfffc4 	addi	r2,r2,-1
  80f168:	10800128 	cmpgeui	r2,r2,4
  80f16c:	10000f1e 	bne	r2,zero,80f1ac <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f170:	0005303a 	rdctl	r2,status
  80f174:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f178:	e0fffa17 	ldw	r3,-24(fp)
  80f17c:	00bfff84 	movi	r2,-2
  80f180:	1884703a 	and	r2,r3,r2
  80f184:	1001703a 	wrctl	status,r2
  
  return context;
  80f188:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  80f18c:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  80f190:	e13ffe17 	ldw	r4,-8(fp)
  80f194:	0810ba80 	call	810ba8 <OS_StrLen>
  80f198:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  80f19c:	e0bffc03 	ldbu	r2,-16(fp)
  80f1a0:	10800828 	cmpgeui	r2,r2,32
  80f1a4:	1000051e 	bne	r2,zero,80f1bc <OSEventNameSet+0xe8>
  80f1a8:	00000c06 	br	80f1dc <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  80f1ac:	e0ffff17 	ldw	r3,-4(fp)
  80f1b0:	00800044 	movi	r2,1
  80f1b4:	18800005 	stb	r2,0(r3)
             return;
  80f1b8:	00001206 	br	80f204 <OSEventNameSet+0x130>
  80f1bc:	e0bffb17 	ldw	r2,-20(fp)
  80f1c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f1c4:	e0bff917 	ldw	r2,-28(fp)
  80f1c8:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  80f1cc:	e0ffff17 	ldw	r3,-4(fp)
  80f1d0:	008002c4 	movi	r2,11
  80f1d4:	18800005 	stb	r2,0(r3)
        return;
  80f1d8:	00000a06 	br	80f204 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  80f1dc:	e0bffd17 	ldw	r2,-12(fp)
  80f1e0:	11000384 	addi	r4,r2,14
  80f1e4:	e17ffe17 	ldw	r5,-8(fp)
  80f1e8:	0810b280 	call	810b28 <OS_StrCopy>
  80f1ec:	e0bffb17 	ldw	r2,-20(fp)
  80f1f0:	e0bff815 	stw	r2,-32(fp)
  80f1f4:	e0bff817 	ldw	r2,-32(fp)
  80f1f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80f1fc:	e0bfff17 	ldw	r2,-4(fp)
  80f200:	10000005 	stb	zero,0(r2)
}
  80f204:	e037883a 	mov	sp,fp
  80f208:	dfc00117 	ldw	ra,4(sp)
  80f20c:	df000017 	ldw	fp,0(sp)
  80f210:	dec00204 	addi	sp,sp,8
  80f214:	f800283a 	ret

0080f218 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  80f218:	deffe704 	addi	sp,sp,-100
  80f21c:	dfc01815 	stw	ra,96(sp)
  80f220:	df001715 	stw	fp,92(sp)
  80f224:	df001704 	addi	fp,sp,92
  80f228:	e13ff615 	stw	r4,-40(fp)
  80f22c:	e17ff715 	stw	r5,-36(fp)
  80f230:	e1bff815 	stw	r6,-32(fp)
  80f234:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  80f238:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  80f23c:	e0800217 	ldw	r2,8(fp)
  80f240:	1004c03a 	cmpne	r2,r2,zero
  80f244:	1000021e 	bne	r2,zero,80f250 <OSEventPendMulti+0x38>
        return (0);
  80f248:	e03fff15 	stw	zero,-4(fp)
  80f24c:	00019906 	br	80f8b4 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  80f250:	e0bff617 	ldw	r2,-40(fp)
  80f254:	1004c03a 	cmpne	r2,r2,zero
  80f258:	1000051e 	bne	r2,zero,80f270 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
  80f25c:	e0c00217 	ldw	r3,8(fp)
  80f260:	00800104 	movi	r2,4
  80f264:	18800005 	stb	r2,0(r3)
        return (0);
  80f268:	e03fff15 	stw	zero,-4(fp)
  80f26c:	00019106 	br	80f8b4 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  80f270:	e0bff717 	ldw	r2,-36(fp)
  80f274:	1004c03a 	cmpne	r2,r2,zero
  80f278:	1000051e 	bne	r2,zero,80f290 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
  80f27c:	e0c00217 	ldw	r3,8(fp)
  80f280:	00800104 	movi	r2,4
  80f284:	18800005 	stb	r2,0(r3)
        return (0);
  80f288:	e03fff15 	stw	zero,-4(fp)
  80f28c:	00018906 	br	80f8b4 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  80f290:	e0bff817 	ldw	r2,-32(fp)
  80f294:	1004c03a 	cmpne	r2,r2,zero
  80f298:	1000051e 	bne	r2,zero,80f2b0 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
  80f29c:	e0c00217 	ldw	r3,8(fp)
  80f2a0:	00800104 	movi	r2,4
  80f2a4:	18800005 	stb	r2,0(r3)
        return (0);
  80f2a8:	e03fff15 	stw	zero,-4(fp)
  80f2ac:	00018106 	br	80f8b4 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  80f2b0:	e0bff717 	ldw	r2,-36(fp)
  80f2b4:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  80f2b8:	e0bff617 	ldw	r2,-40(fp)
  80f2bc:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
  80f2c0:	e0bff517 	ldw	r2,-44(fp)
  80f2c4:	10800017 	ldw	r2,0(r2)
  80f2c8:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
  80f2cc:	00001806 	br	80f330 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  80f2d0:	e0bff417 	ldw	r2,-48(fp)
  80f2d4:	10800003 	ldbu	r2,0(r2)
  80f2d8:	10803fcc 	andi	r2,r2,255
  80f2dc:	e0bffe15 	stw	r2,-8(fp)
  80f2e0:	e0fffe17 	ldw	r3,-8(fp)
  80f2e4:	188000a0 	cmpeqi	r2,r3,2
  80f2e8:	10000b1e 	bne	r2,zero,80f318 <OSEventPendMulti+0x100>
  80f2ec:	e0fffe17 	ldw	r3,-8(fp)
  80f2f0:	188000e0 	cmpeqi	r2,r3,3
  80f2f4:	1000081e 	bne	r2,zero,80f318 <OSEventPendMulti+0x100>
  80f2f8:	e0fffe17 	ldw	r3,-8(fp)
  80f2fc:	18800060 	cmpeqi	r2,r3,1
  80f300:	1000051e 	bne	r2,zero,80f318 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  80f304:	e0c00217 	ldw	r3,8(fp)
  80f308:	00800044 	movi	r2,1
  80f30c:	18800005 	stb	r2,0(r3)
                 return (0);
  80f310:	e03fff15 	stw	zero,-4(fp)
  80f314:	00016706 	br	80f8b4 <OSEventPendMulti+0x69c>
        }
        pevents++;
  80f318:	e0bff517 	ldw	r2,-44(fp)
  80f31c:	10800104 	addi	r2,r2,4
  80f320:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  80f324:	e0bff517 	ldw	r2,-44(fp)
  80f328:	10800017 	ldw	r2,0(r2)
  80f32c:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  80f330:	e0bff417 	ldw	r2,-48(fp)
  80f334:	1004c03a 	cmpne	r2,r2,zero
  80f338:	103fe51e 	bne	r2,zero,80f2d0 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  80f33c:	d0a72a03 	ldbu	r2,-25432(gp)
  80f340:	10803fcc 	andi	r2,r2,255
  80f344:	1005003a 	cmpeq	r2,r2,zero
  80f348:	1000051e 	bne	r2,zero,80f360 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  80f34c:	e0c00217 	ldw	r3,8(fp)
  80f350:	00800084 	movi	r2,2
  80f354:	18800005 	stb	r2,0(r3)
        return (0);
  80f358:	e03fff15 	stw	zero,-4(fp)
  80f35c:	00015506 	br	80f8b4 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  80f360:	d0a71c03 	ldbu	r2,-25488(gp)
  80f364:	10803fcc 	andi	r2,r2,255
  80f368:	1005003a 	cmpeq	r2,r2,zero
  80f36c:	1000051e 	bne	r2,zero,80f384 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  80f370:	e0c00217 	ldw	r3,8(fp)
  80f374:	00800344 	movi	r2,13
  80f378:	18800005 	stb	r2,0(r3)
        return (0);
  80f37c:	e03fff15 	stw	zero,-4(fp)
  80f380:	00014c06 	br	80f8b4 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f384:	0005303a 	rdctl	r2,status
  80f388:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f38c:	e0ffef17 	ldw	r3,-68(fp)
  80f390:	00bfff84 	movi	r2,-2
  80f394:	1884703a 	and	r2,r3,r2
  80f398:	1001703a 	wrctl	status,r2
  
  return context;
  80f39c:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  80f3a0:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
  80f3a4:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
  80f3a8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  80f3ac:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
  80f3b0:	e0bff617 	ldw	r2,-40(fp)
  80f3b4:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
  80f3b8:	e0bff517 	ldw	r2,-44(fp)
  80f3bc:	10800017 	ldw	r2,0(r2)
  80f3c0:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  80f3c4:	00008f06 	br	80f604 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
  80f3c8:	e0bff417 	ldw	r2,-48(fp)
  80f3cc:	10800003 	ldbu	r2,0(r2)
  80f3d0:	10803fcc 	andi	r2,r2,255
  80f3d4:	e0bffd15 	stw	r2,-12(fp)
  80f3d8:	e0fffd17 	ldw	r3,-12(fp)
  80f3dc:	188000a0 	cmpeqi	r2,r3,2
  80f3e0:	1000441e 	bne	r2,zero,80f4f4 <OSEventPendMulti+0x2dc>
  80f3e4:	e0fffd17 	ldw	r3,-12(fp)
  80f3e8:	188000e0 	cmpeqi	r2,r3,3
  80f3ec:	1000041e 	bne	r2,zero,80f400 <OSEventPendMulti+0x1e8>
  80f3f0:	e0fffd17 	ldw	r3,-12(fp)
  80f3f4:	18800060 	cmpeqi	r2,r3,1
  80f3f8:	1000211e 	bne	r2,zero,80f480 <OSEventPendMulti+0x268>
  80f3fc:	00006f06 	br	80f5bc <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  80f400:	e0bff417 	ldw	r2,-48(fp)
  80f404:	1080020b 	ldhu	r2,8(r2)
  80f408:	10bfffcc 	andi	r2,r2,65535
  80f40c:	1005003a 	cmpeq	r2,r2,zero
  80f410:	1000171e 	bne	r2,zero,80f470 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  80f414:	e0bff417 	ldw	r2,-48(fp)
  80f418:	1080020b 	ldhu	r2,8(r2)
  80f41c:	10bfffc4 	addi	r2,r2,-1
  80f420:	1007883a 	mov	r3,r2
  80f424:	e0bff417 	ldw	r2,-48(fp)
  80f428:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  80f42c:	e0fff717 	ldw	r3,-36(fp)
  80f430:	e0bff417 	ldw	r2,-48(fp)
  80f434:	18800015 	stw	r2,0(r3)
  80f438:	e0bff717 	ldw	r2,-36(fp)
  80f43c:	10800104 	addi	r2,r2,4
  80f440:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
  80f444:	00800044 	movi	r2,1
  80f448:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  80f44c:	e0bff817 	ldw	r2,-32(fp)
  80f450:	10000015 	stw	zero,0(r2)
  80f454:	e0bff817 	ldw	r2,-32(fp)
  80f458:	10800104 	addi	r2,r2,4
  80f45c:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
  80f460:	e0bff18b 	ldhu	r2,-58(fp)
  80f464:	10800044 	addi	r2,r2,1
  80f468:	e0bff18d 	sth	r2,-58(fp)
  80f46c:	00005f06 	br	80f5ec <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  80f470:	e0bff103 	ldbu	r2,-60(fp)
  80f474:	10800054 	ori	r2,r2,1
  80f478:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  80f47c:	00005b06 	br	80f5ec <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  80f480:	e0bff417 	ldw	r2,-48(fp)
  80f484:	10800117 	ldw	r2,4(r2)
  80f488:	1005003a 	cmpeq	r2,r2,zero
  80f48c:	1000151e 	bne	r2,zero,80f4e4 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  80f490:	e0bff417 	ldw	r2,-48(fp)
  80f494:	10c00117 	ldw	r3,4(r2)
  80f498:	e0bff817 	ldw	r2,-32(fp)
  80f49c:	10c00015 	stw	r3,0(r2)
  80f4a0:	e0bff817 	ldw	r2,-32(fp)
  80f4a4:	10800104 	addi	r2,r2,4
  80f4a8:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
  80f4ac:	e0bff417 	ldw	r2,-48(fp)
  80f4b0:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  80f4b4:	e0fff717 	ldw	r3,-36(fp)
  80f4b8:	e0bff417 	ldw	r2,-48(fp)
  80f4bc:	18800015 	stw	r2,0(r3)
  80f4c0:	e0bff717 	ldw	r2,-36(fp)
  80f4c4:	10800104 	addi	r2,r2,4
  80f4c8:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
  80f4cc:	00800044 	movi	r2,1
  80f4d0:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  80f4d4:	e0bff18b 	ldhu	r2,-58(fp)
  80f4d8:	10800044 	addi	r2,r2,1
  80f4dc:	e0bff18d 	sth	r2,-58(fp)
  80f4e0:	00004206 	br	80f5ec <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  80f4e4:	e0bff103 	ldbu	r2,-60(fp)
  80f4e8:	10800094 	ori	r2,r2,2
  80f4ec:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  80f4f0:	00003e06 	br	80f5ec <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  80f4f4:	e0bff417 	ldw	r2,-48(fp)
  80f4f8:	10800117 	ldw	r2,4(r2)
  80f4fc:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  80f500:	e0bff317 	ldw	r2,-52(fp)
  80f504:	1080058b 	ldhu	r2,22(r2)
  80f508:	10bfffcc 	andi	r2,r2,65535
  80f50c:	1005003a 	cmpeq	r2,r2,zero
  80f510:	1000261e 	bne	r2,zero,80f5ac <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  80f514:	e0bff317 	ldw	r2,-52(fp)
  80f518:	11000417 	ldw	r4,16(r2)
  80f51c:	20c00017 	ldw	r3,0(r4)
  80f520:	e0bff817 	ldw	r2,-32(fp)
  80f524:	10c00015 	stw	r3,0(r2)
  80f528:	e0bff817 	ldw	r2,-32(fp)
  80f52c:	10800104 	addi	r2,r2,4
  80f530:	e0bff815 	stw	r2,-32(fp)
  80f534:	20c00104 	addi	r3,r4,4
  80f538:	e0bff317 	ldw	r2,-52(fp)
  80f53c:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  80f540:	e0bff317 	ldw	r2,-52(fp)
  80f544:	10c00417 	ldw	r3,16(r2)
  80f548:	e0bff317 	ldw	r2,-52(fp)
  80f54c:	10800217 	ldw	r2,8(r2)
  80f550:	1880041e 	bne	r3,r2,80f564 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  80f554:	e0bff317 	ldw	r2,-52(fp)
  80f558:	10c00117 	ldw	r3,4(r2)
  80f55c:	e0bff317 	ldw	r2,-52(fp)
  80f560:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  80f564:	e0bff317 	ldw	r2,-52(fp)
  80f568:	1080058b 	ldhu	r2,22(r2)
  80f56c:	10bfffc4 	addi	r2,r2,-1
  80f570:	1007883a 	mov	r3,r2
  80f574:	e0bff317 	ldw	r2,-52(fp)
  80f578:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  80f57c:	e0fff717 	ldw	r3,-36(fp)
  80f580:	e0bff417 	ldw	r2,-48(fp)
  80f584:	18800015 	stw	r2,0(r3)
  80f588:	e0bff717 	ldw	r2,-36(fp)
  80f58c:	10800104 	addi	r2,r2,4
  80f590:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
  80f594:	00800044 	movi	r2,1
  80f598:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  80f59c:	e0bff18b 	ldhu	r2,-58(fp)
  80f5a0:	10800044 	addi	r2,r2,1
  80f5a4:	e0bff18d 	sth	r2,-58(fp)
  80f5a8:	00001006 	br	80f5ec <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  80f5ac:	e0bff103 	ldbu	r2,-60(fp)
  80f5b0:	10800114 	ori	r2,r2,4
  80f5b4:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  80f5b8:	00000c06 	br	80f5ec <OSEventPendMulti+0x3d4>
  80f5bc:	e0bff017 	ldw	r2,-64(fp)
  80f5c0:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f5c4:	e0bfee17 	ldw	r2,-72(fp)
  80f5c8:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  80f5cc:	e0bff717 	ldw	r2,-36(fp)
  80f5d0:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  80f5d4:	e0c00217 	ldw	r3,8(fp)
  80f5d8:	00800044 	movi	r2,1
  80f5dc:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
  80f5e0:	e0bff18b 	ldhu	r2,-58(fp)
  80f5e4:	e0bfff15 	stw	r2,-4(fp)
  80f5e8:	0000b206 	br	80f8b4 <OSEventPendMulti+0x69c>
        }
        pevents++;
  80f5ec:	e0bff517 	ldw	r2,-44(fp)
  80f5f0:	10800104 	addi	r2,r2,4
  80f5f4:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  80f5f8:	e0bff517 	ldw	r2,-44(fp)
  80f5fc:	10800017 	ldw	r2,0(r2)
  80f600:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  80f604:	e0bff417 	ldw	r2,-48(fp)
  80f608:	1004c03a 	cmpne	r2,r2,zero
  80f60c:	103f6e1e 	bne	r2,zero,80f3c8 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  80f610:	e0bff203 	ldbu	r2,-56(fp)
  80f614:	10800058 	cmpnei	r2,r2,1
  80f618:	10000b1e 	bne	r2,zero,80f648 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  80f61c:	e0bff717 	ldw	r2,-36(fp)
  80f620:	10000015 	stw	zero,0(r2)
  80f624:	e0bff017 	ldw	r2,-64(fp)
  80f628:	e0bfed15 	stw	r2,-76(fp)
  80f62c:	e0bfed17 	ldw	r2,-76(fp)
  80f630:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  80f634:	e0800217 	ldw	r2,8(fp)
  80f638:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  80f63c:	e0fff18b 	ldhu	r3,-58(fp)
  80f640:	e0ffff15 	stw	r3,-4(fp)
  80f644:	00009b06 	br	80f8b4 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  80f648:	d1272b17 	ldw	r4,-25428(gp)
  80f64c:	d0a72b17 	ldw	r2,-25428(gp)
  80f650:	10c00c03 	ldbu	r3,48(r2)
  80f654:	e0bff103 	ldbu	r2,-60(fp)
  80f658:	1884b03a 	or	r2,r3,r2
  80f65c:	1007883a 	mov	r3,r2
  80f660:	00bfe004 	movi	r2,-128
  80f664:	1884b03a 	or	r2,r3,r2
  80f668:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80f66c:	d0a72b17 	ldw	r2,-25428(gp)
  80f670:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  80f674:	d0e72b17 	ldw	r3,-25428(gp)
  80f678:	e0bff90b 	ldhu	r2,-28(fp)
  80f67c:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  80f680:	e13ff617 	ldw	r4,-40(fp)
  80f684:	08102480 	call	810248 <OS_EventTaskWaitMulti>
  80f688:	e0bff017 	ldw	r2,-64(fp)
  80f68c:	e0bfec15 	stw	r2,-80(fp)
  80f690:	e0bfec17 	ldw	r2,-80(fp)
  80f694:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  80f698:	08109e40 	call	8109e4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f69c:	0005303a 	rdctl	r2,status
  80f6a0:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f6a4:	e0ffeb17 	ldw	r3,-84(fp)
  80f6a8:	00bfff84 	movi	r2,-2
  80f6ac:	1884703a 	and	r2,r3,r2
  80f6b0:	1001703a 	wrctl	status,r2
  
  return context;
  80f6b4:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
  80f6b8:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  80f6bc:	d0a72b17 	ldw	r2,-25428(gp)
  80f6c0:	10800c43 	ldbu	r2,49(r2)
  80f6c4:	10803fcc 	andi	r2,r2,255
  80f6c8:	e0bffc15 	stw	r2,-16(fp)
  80f6cc:	e0fffc17 	ldw	r3,-16(fp)
  80f6d0:	1805003a 	cmpeq	r2,r3,zero
  80f6d4:	1000041e 	bne	r2,zero,80f6e8 <OSEventPendMulti+0x4d0>
  80f6d8:	e0fffc17 	ldw	r3,-16(fp)
  80f6dc:	188000a0 	cmpeqi	r2,r3,2
  80f6e0:	1000011e 	bne	r2,zero,80f6e8 <OSEventPendMulti+0x4d0>
  80f6e4:	00001906 	br	80f74c <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  80f6e8:	d0a72b17 	ldw	r2,-25428(gp)
  80f6ec:	10800717 	ldw	r2,28(r2)
  80f6f0:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  80f6f4:	e0bff417 	ldw	r2,-48(fp)
  80f6f8:	1005003a 	cmpeq	r2,r2,zero
  80f6fc:	10000c1e 	bne	r2,zero,80f730 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  80f700:	e0fff717 	ldw	r3,-36(fp)
  80f704:	e0bff417 	ldw	r2,-48(fp)
  80f708:	18800015 	stw	r2,0(r3)
  80f70c:	e0bff717 	ldw	r2,-36(fp)
  80f710:	10800104 	addi	r2,r2,4
  80f714:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  80f718:	e0bff717 	ldw	r2,-36(fp)
  80f71c:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  80f720:	e0bff18b 	ldhu	r2,-58(fp)
  80f724:	10800044 	addi	r2,r2,1
  80f728:	e0bff18d 	sth	r2,-58(fp)
  80f72c:	00000a06 	br	80f758 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  80f730:	d0a72b17 	ldw	r2,-25428(gp)
  80f734:	00c00044 	movi	r3,1
  80f738:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  80f73c:	d1272b17 	ldw	r4,-25428(gp)
  80f740:	e17ff617 	ldw	r5,-40(fp)
  80f744:	08104540 	call	810454 <OS_EventTaskRemoveMulti>
             }
			 break;
  80f748:	00000306 	br	80f758 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  80f74c:	d1272b17 	ldw	r4,-25428(gp)
  80f750:	e17ff617 	ldw	r5,-40(fp)
  80f754:	08104540 	call	810454 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
  80f758:	d0a72b17 	ldw	r2,-25428(gp)
  80f75c:	10800c43 	ldbu	r2,49(r2)
  80f760:	10803fcc 	andi	r2,r2,255
  80f764:	e0bffb15 	stw	r2,-20(fp)
  80f768:	e0fffb17 	ldw	r3,-20(fp)
  80f76c:	1805003a 	cmpeq	r2,r3,zero
  80f770:	1000041e 	bne	r2,zero,80f784 <OSEventPendMulti+0x56c>
  80f774:	e0fffb17 	ldw	r3,-20(fp)
  80f778:	188000a0 	cmpeqi	r2,r3,2
  80f77c:	10002c1e 	bne	r2,zero,80f830 <OSEventPendMulti+0x618>
  80f780:	00003406 	br	80f854 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  80f784:	e0bff417 	ldw	r2,-48(fp)
  80f788:	10800003 	ldbu	r2,0(r2)
  80f78c:	10803fcc 	andi	r2,r2,255
  80f790:	e0bffa15 	stw	r2,-24(fp)
  80f794:	e0fffa17 	ldw	r3,-24(fp)
  80f798:	18800050 	cmplti	r2,r3,1
  80f79c:	1000151e 	bne	r2,zero,80f7f4 <OSEventPendMulti+0x5dc>
  80f7a0:	e0fffa17 	ldw	r3,-24(fp)
  80f7a4:	188000d0 	cmplti	r2,r3,3
  80f7a8:	10000a1e 	bne	r2,zero,80f7d4 <OSEventPendMulti+0x5bc>
  80f7ac:	e0fffa17 	ldw	r3,-24(fp)
  80f7b0:	188000e0 	cmpeqi	r2,r3,3
  80f7b4:	1000011e 	bne	r2,zero,80f7bc <OSEventPendMulti+0x5a4>
  80f7b8:	00000e06 	br	80f7f4 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  80f7bc:	e0bff817 	ldw	r2,-32(fp)
  80f7c0:	10000015 	stw	zero,0(r2)
  80f7c4:	e0bff817 	ldw	r2,-32(fp)
  80f7c8:	10800104 	addi	r2,r2,4
  80f7cc:	e0bff815 	stw	r2,-32(fp)
                      break;
  80f7d0:	00001406 	br	80f824 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  80f7d4:	d0a72b17 	ldw	r2,-25428(gp)
  80f7d8:	10c00917 	ldw	r3,36(r2)
  80f7dc:	e0bff817 	ldw	r2,-32(fp)
  80f7e0:	10c00015 	stw	r3,0(r2)
  80f7e4:	e0bff817 	ldw	r2,-32(fp)
  80f7e8:	10800104 	addi	r2,r2,4
  80f7ec:	e0bff815 	stw	r2,-32(fp)
                      break;
  80f7f0:	00000c06 	br	80f824 <OSEventPendMulti+0x60c>
  80f7f4:	e0bff017 	ldw	r2,-64(fp)
  80f7f8:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f7fc:	e0bfea17 	ldw	r2,-88(fp)
  80f800:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  80f804:	e0bff717 	ldw	r2,-36(fp)
  80f808:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  80f80c:	e0c00217 	ldw	r3,8(fp)
  80f810:	00800044 	movi	r2,1
  80f814:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
  80f818:	e0bff18b 	ldhu	r2,-58(fp)
  80f81c:	e0bfff15 	stw	r2,-4(fp)
  80f820:	00002406 	br	80f8b4 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
  80f824:	e0800217 	ldw	r2,8(fp)
  80f828:	10000005 	stb	zero,0(r2)
             break;
  80f82c:	00001106 	br	80f874 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  80f830:	e0bff817 	ldw	r2,-32(fp)
  80f834:	10000015 	stw	zero,0(r2)
  80f838:	e0bff817 	ldw	r2,-32(fp)
  80f83c:	10800104 	addi	r2,r2,4
  80f840:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  80f844:	e0c00217 	ldw	r3,8(fp)
  80f848:	00800384 	movi	r2,14
  80f84c:	18800005 	stb	r2,0(r3)
             break;
  80f850:	00000806 	br	80f874 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  80f854:	e0bff817 	ldw	r2,-32(fp)
  80f858:	10000015 	stw	zero,0(r2)
  80f85c:	e0bff817 	ldw	r2,-32(fp)
  80f860:	10800104 	addi	r2,r2,4
  80f864:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  80f868:	e0c00217 	ldw	r3,8(fp)
  80f86c:	00800284 	movi	r2,10
  80f870:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  80f874:	d0a72b17 	ldw	r2,-25428(gp)
  80f878:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  80f87c:	d0a72b17 	ldw	r2,-25428(gp)
  80f880:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  80f884:	d0a72b17 	ldw	r2,-25428(gp)
  80f888:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  80f88c:	d0a72b17 	ldw	r2,-25428(gp)
  80f890:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  80f894:	d0a72b17 	ldw	r2,-25428(gp)
  80f898:	10000915 	stw	zero,36(r2)
  80f89c:	e0bff017 	ldw	r2,-64(fp)
  80f8a0:	e0bfe915 	stw	r2,-92(fp)
  80f8a4:	e0bfe917 	ldw	r2,-92(fp)
  80f8a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  80f8ac:	e0fff18b 	ldhu	r3,-58(fp)
  80f8b0:	e0ffff15 	stw	r3,-4(fp)
  80f8b4:	e0bfff17 	ldw	r2,-4(fp)
}
  80f8b8:	e037883a 	mov	sp,fp
  80f8bc:	dfc00117 	ldw	ra,4(sp)
  80f8c0:	df000017 	ldw	fp,0(sp)
  80f8c4:	dec00204 	addi	sp,sp,8
  80f8c8:	f800283a 	ret

0080f8cc <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  80f8cc:	defffe04 	addi	sp,sp,-8
  80f8d0:	dfc00115 	stw	ra,4(sp)
  80f8d4:	df000015 	stw	fp,0(sp)
  80f8d8:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  80f8dc:	08199a80 	call	8199a8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  80f8e0:	081069c0 	call	81069c <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  80f8e4:	08106e00 	call	8106e0 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  80f8e8:	08108440 	call	810844 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  80f8ec:	08105c00 	call	8105c0 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  80f8f0:	08128f40 	call	8128f4 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  80f8f4:	08132cc0 	call	8132cc <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  80f8f8:	08146280 	call	814628 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  80f8fc:	081074c0 	call	81074c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  80f900:	08107c80 	call	8107c8 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  80f904:	08199c40 	call	8199c4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  80f908:	08110cc0 	call	8110cc <OSDebugInit>
#endif
}
  80f90c:	e037883a 	mov	sp,fp
  80f910:	dfc00117 	ldw	ra,4(sp)
  80f914:	df000017 	ldw	fp,0(sp)
  80f918:	dec00204 	addi	sp,sp,8
  80f91c:	f800283a 	ret

0080f920 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  80f920:	defffc04 	addi	sp,sp,-16
  80f924:	df000315 	stw	fp,12(sp)
  80f928:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80f92c:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
  80f930:	d0a71c43 	ldbu	r2,-25487(gp)
  80f934:	10803fcc 	andi	r2,r2,255
  80f938:	10800058 	cmpnei	r2,r2,1
  80f93c:	1000131e 	bne	r2,zero,80f98c <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f940:	0005303a 	rdctl	r2,status
  80f944:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f948:	e0fffe17 	ldw	r3,-8(fp)
  80f94c:	00bfff84 	movi	r2,-2
  80f950:	1884703a 	and	r2,r3,r2
  80f954:	1001703a 	wrctl	status,r2
  
  return context;
  80f958:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80f95c:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
  80f960:	d0a72a03 	ldbu	r2,-25432(gp)
  80f964:	10803fcc 	andi	r2,r2,255
  80f968:	10803fe0 	cmpeqi	r2,r2,255
  80f96c:	1000031e 	bne	r2,zero,80f97c <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  80f970:	d0a72a03 	ldbu	r2,-25432(gp)
  80f974:	10800044 	addi	r2,r2,1
  80f978:	d0a72a05 	stb	r2,-25432(gp)
  80f97c:	e0bfff17 	ldw	r2,-4(fp)
  80f980:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f984:	e0bffd17 	ldw	r2,-12(fp)
  80f988:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
  80f98c:	e037883a 	mov	sp,fp
  80f990:	df000017 	ldw	fp,0(sp)
  80f994:	dec00104 	addi	sp,sp,4
  80f998:	f800283a 	ret

0080f99c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  80f99c:	defffb04 	addi	sp,sp,-20
  80f9a0:	dfc00415 	stw	ra,16(sp)
  80f9a4:	df000315 	stw	fp,12(sp)
  80f9a8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80f9ac:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
  80f9b0:	d0a71c43 	ldbu	r2,-25487(gp)
  80f9b4:	10803fcc 	andi	r2,r2,255
  80f9b8:	10800058 	cmpnei	r2,r2,1
  80f9bc:	1000321e 	bne	r2,zero,80fa88 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f9c0:	0005303a 	rdctl	r2,status
  80f9c4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f9c8:	e0fffe17 	ldw	r3,-8(fp)
  80f9cc:	00bfff84 	movi	r2,-2
  80f9d0:	1884703a 	and	r2,r3,r2
  80f9d4:	1001703a 	wrctl	status,r2
  
  return context;
  80f9d8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80f9dc:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  80f9e0:	d0a72a03 	ldbu	r2,-25432(gp)
  80f9e4:	10803fcc 	andi	r2,r2,255
  80f9e8:	1005003a 	cmpeq	r2,r2,zero
  80f9ec:	1000031e 	bne	r2,zero,80f9fc <OSIntExit+0x60>
            OSIntNesting--;
  80f9f0:	d0a72a03 	ldbu	r2,-25432(gp)
  80f9f4:	10bfffc4 	addi	r2,r2,-1
  80f9f8:	d0a72a05 	stb	r2,-25432(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  80f9fc:	d0a72a03 	ldbu	r2,-25432(gp)
  80fa00:	10803fcc 	andi	r2,r2,255
  80fa04:	1004c03a 	cmpne	r2,r2,zero
  80fa08:	10001b1e 	bne	r2,zero,80fa78 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  80fa0c:	d0a71c03 	ldbu	r2,-25488(gp)
  80fa10:	10803fcc 	andi	r2,r2,255
  80fa14:	1004c03a 	cmpne	r2,r2,zero
  80fa18:	1000171e 	bne	r2,zero,80fa78 <OSIntExit+0xdc>
                OS_SchedNew();
  80fa1c:	0810ab80 	call	810ab8 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  80fa20:	d0a71e03 	ldbu	r2,-25480(gp)
  80fa24:	d0e71e43 	ldbu	r3,-25479(gp)
  80fa28:	11003fcc 	andi	r4,r2,255
  80fa2c:	18803fcc 	andi	r2,r3,255
  80fa30:	20801126 	beq	r4,r2,80fa78 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  80fa34:	d0a71e03 	ldbu	r2,-25480(gp)
  80fa38:	10803fcc 	andi	r2,r2,255
  80fa3c:	00c020b4 	movhi	r3,130
  80fa40:	18d44304 	addi	r3,r3,20748
  80fa44:	1085883a 	add	r2,r2,r2
  80fa48:	1085883a 	add	r2,r2,r2
  80fa4c:	10c5883a 	add	r2,r2,r3
  80fa50:	10800017 	ldw	r2,0(r2)
  80fa54:	d0a72615 	stw	r2,-25448(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  80fa58:	d0e72617 	ldw	r3,-25448(gp)
  80fa5c:	18800e17 	ldw	r2,56(r3)
  80fa60:	10800044 	addi	r2,r2,1
  80fa64:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  80fa68:	d0a72117 	ldw	r2,-25468(gp)
  80fa6c:	10800044 	addi	r2,r2,1
  80fa70:	d0a72115 	stw	r2,-25468(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  80fa74:	08195340 	call	819534 <OSCtxSw>
  80fa78:	e0bfff17 	ldw	r2,-4(fp)
  80fa7c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fa80:	e0bffd17 	ldw	r2,-12(fp)
  80fa84:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  80fa88:	e037883a 	mov	sp,fp
  80fa8c:	dfc00117 	ldw	ra,4(sp)
  80fa90:	df000017 	ldw	fp,0(sp)
  80fa94:	dec00204 	addi	sp,sp,8
  80fa98:	f800283a 	ret

0080fa9c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  80fa9c:	defffc04 	addi	sp,sp,-16
  80faa0:	df000315 	stw	fp,12(sp)
  80faa4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80faa8:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  80faac:	d0a71c43 	ldbu	r2,-25487(gp)
  80fab0:	10803fcc 	andi	r2,r2,255
  80fab4:	10800058 	cmpnei	r2,r2,1
  80fab8:	1000171e 	bne	r2,zero,80fb18 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fabc:	0005303a 	rdctl	r2,status
  80fac0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fac4:	e0fffe17 	ldw	r3,-8(fp)
  80fac8:	00bfff84 	movi	r2,-2
  80facc:	1884703a 	and	r2,r3,r2
  80fad0:	1001703a 	wrctl	status,r2
  
  return context;
  80fad4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80fad8:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  80fadc:	d0a72a03 	ldbu	r2,-25432(gp)
  80fae0:	10803fcc 	andi	r2,r2,255
  80fae4:	1004c03a 	cmpne	r2,r2,zero
  80fae8:	1000071e 	bne	r2,zero,80fb08 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  80faec:	d0a71c03 	ldbu	r2,-25488(gp)
  80faf0:	10803fcc 	andi	r2,r2,255
  80faf4:	10803fe0 	cmpeqi	r2,r2,255
  80faf8:	1000031e 	bne	r2,zero,80fb08 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  80fafc:	d0a71c03 	ldbu	r2,-25488(gp)
  80fb00:	10800044 	addi	r2,r2,1
  80fb04:	d0a71c05 	stb	r2,-25488(gp)
  80fb08:	e0bfff17 	ldw	r2,-4(fp)
  80fb0c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fb10:	e0bffd17 	ldw	r2,-12(fp)
  80fb14:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  80fb18:	e037883a 	mov	sp,fp
  80fb1c:	df000017 	ldw	fp,0(sp)
  80fb20:	dec00104 	addi	sp,sp,4
  80fb24:	f800283a 	ret

0080fb28 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  80fb28:	defff804 	addi	sp,sp,-32
  80fb2c:	dfc00715 	stw	ra,28(sp)
  80fb30:	df000615 	stw	fp,24(sp)
  80fb34:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80fb38:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  80fb3c:	d0a71c43 	ldbu	r2,-25487(gp)
  80fb40:	10803fcc 	andi	r2,r2,255
  80fb44:	10800058 	cmpnei	r2,r2,1
  80fb48:	10002b1e 	bne	r2,zero,80fbf8 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fb4c:	0005303a 	rdctl	r2,status
  80fb50:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fb54:	e0fffe17 	ldw	r3,-8(fp)
  80fb58:	00bfff84 	movi	r2,-2
  80fb5c:	1884703a 	and	r2,r3,r2
  80fb60:	1001703a 	wrctl	status,r2
  
  return context;
  80fb64:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80fb68:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  80fb6c:	d0a71c03 	ldbu	r2,-25488(gp)
  80fb70:	10803fcc 	andi	r2,r2,255
  80fb74:	1005003a 	cmpeq	r2,r2,zero
  80fb78:	10001b1e 	bne	r2,zero,80fbe8 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  80fb7c:	d0a71c03 	ldbu	r2,-25488(gp)
  80fb80:	10bfffc4 	addi	r2,r2,-1
  80fb84:	d0a71c05 	stb	r2,-25488(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  80fb88:	d0a71c03 	ldbu	r2,-25488(gp)
  80fb8c:	10803fcc 	andi	r2,r2,255
  80fb90:	1004c03a 	cmpne	r2,r2,zero
  80fb94:	10000f1e 	bne	r2,zero,80fbd4 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  80fb98:	d0a72a03 	ldbu	r2,-25432(gp)
  80fb9c:	10803fcc 	andi	r2,r2,255
  80fba0:	1004c03a 	cmpne	r2,r2,zero
  80fba4:	1000061e 	bne	r2,zero,80fbc0 <OSSchedUnlock+0x98>
  80fba8:	e0bfff17 	ldw	r2,-4(fp)
  80fbac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fbb0:	e0bffd17 	ldw	r2,-12(fp)
  80fbb4:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  80fbb8:	08109e40 	call	8109e4 <OS_Sched>
  80fbbc:	00000e06 	br	80fbf8 <OSSchedUnlock+0xd0>
  80fbc0:	e0bfff17 	ldw	r2,-4(fp)
  80fbc4:	e0bffc15 	stw	r2,-16(fp)
  80fbc8:	e0bffc17 	ldw	r2,-16(fp)
  80fbcc:	1001703a 	wrctl	status,r2
  80fbd0:	00000906 	br	80fbf8 <OSSchedUnlock+0xd0>
  80fbd4:	e0bfff17 	ldw	r2,-4(fp)
  80fbd8:	e0bffb15 	stw	r2,-20(fp)
  80fbdc:	e0bffb17 	ldw	r2,-20(fp)
  80fbe0:	1001703a 	wrctl	status,r2
  80fbe4:	00000406 	br	80fbf8 <OSSchedUnlock+0xd0>
  80fbe8:	e0bfff17 	ldw	r2,-4(fp)
  80fbec:	e0bffa15 	stw	r2,-24(fp)
  80fbf0:	e0bffa17 	ldw	r2,-24(fp)
  80fbf4:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  80fbf8:	e037883a 	mov	sp,fp
  80fbfc:	dfc00117 	ldw	ra,4(sp)
  80fc00:	df000017 	ldw	fp,0(sp)
  80fc04:	dec00204 	addi	sp,sp,8
  80fc08:	f800283a 	ret

0080fc0c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  80fc0c:	defffe04 	addi	sp,sp,-8
  80fc10:	dfc00115 	stw	ra,4(sp)
  80fc14:	df000015 	stw	fp,0(sp)
  80fc18:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  80fc1c:	d0a71c43 	ldbu	r2,-25487(gp)
  80fc20:	10803fcc 	andi	r2,r2,255
  80fc24:	1004c03a 	cmpne	r2,r2,zero
  80fc28:	10000f1e 	bne	r2,zero,80fc68 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  80fc2c:	0810ab80 	call	810ab8 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  80fc30:	d0a71e03 	ldbu	r2,-25480(gp)
  80fc34:	d0a71e45 	stb	r2,-25479(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  80fc38:	d0a71e03 	ldbu	r2,-25480(gp)
  80fc3c:	10803fcc 	andi	r2,r2,255
  80fc40:	00c020b4 	movhi	r3,130
  80fc44:	18d44304 	addi	r3,r3,20748
  80fc48:	1085883a 	add	r2,r2,r2
  80fc4c:	1085883a 	add	r2,r2,r2
  80fc50:	10c5883a 	add	r2,r2,r3
  80fc54:	10800017 	ldw	r2,0(r2)
  80fc58:	d0a72615 	stw	r2,-25448(gp)
        OSTCBCur      = OSTCBHighRdy;
  80fc5c:	d0a72617 	ldw	r2,-25448(gp)
  80fc60:	d0a72b15 	stw	r2,-25428(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  80fc64:	08195c00 	call	8195c0 <OSStartHighRdy>
    }
}
  80fc68:	e037883a 	mov	sp,fp
  80fc6c:	dfc00117 	ldw	ra,4(sp)
  80fc70:	df000017 	ldw	fp,0(sp)
  80fc74:	dec00204 	addi	sp,sp,8
  80fc78:	f800283a 	ret

0080fc7c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  80fc7c:	defff904 	addi	sp,sp,-28
  80fc80:	dfc00615 	stw	ra,24(sp)
  80fc84:	df000515 	stw	fp,20(sp)
  80fc88:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80fc8c:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  80fc90:	01000084 	movi	r4,2
  80fc94:	0816cdc0 	call	816cdc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fc98:	0005303a 	rdctl	r2,status
  80fc9c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fca0:	e0fffe17 	ldw	r3,-8(fp)
  80fca4:	00bfff84 	movi	r2,-2
  80fca8:	1884703a 	and	r2,r3,r2
  80fcac:	1001703a 	wrctl	status,r2
  
  return context;
  80fcb0:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  80fcb4:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  80fcb8:	d0271d15 	stw	zero,-25484(gp)
  80fcbc:	e0bfff17 	ldw	r2,-4(fp)
  80fcc0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fcc4:	e0bffd17 	ldw	r2,-12(fp)
  80fcc8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  80fccc:	01001904 	movi	r4,100
  80fcd0:	0816cdc0 	call	816cdc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fcd4:	0005303a 	rdctl	r2,status
  80fcd8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fcdc:	e0fffc17 	ldw	r3,-16(fp)
  80fce0:	00bfff84 	movi	r2,-2
  80fce4:	1884703a 	and	r2,r3,r2
  80fce8:	1001703a 	wrctl	status,r2
  
  return context;
  80fcec:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  80fcf0:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  80fcf4:	d0a71d17 	ldw	r2,-25484(gp)
  80fcf8:	d0a72215 	stw	r2,-25464(gp)
    OSStatRdy    = OS_TRUE;
  80fcfc:	00800044 	movi	r2,1
  80fd00:	d0a72e05 	stb	r2,-25416(gp)
  80fd04:	e0bfff17 	ldw	r2,-4(fp)
  80fd08:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fd0c:	e0bffb17 	ldw	r2,-20(fp)
  80fd10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  80fd14:	e037883a 	mov	sp,fp
  80fd18:	dfc00117 	ldw	ra,4(sp)
  80fd1c:	df000017 	ldw	fp,0(sp)
  80fd20:	dec00204 	addi	sp,sp,8
  80fd24:	f800283a 	ret

0080fd28 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  80fd28:	defff604 	addi	sp,sp,-40
  80fd2c:	dfc00915 	stw	ra,36(sp)
  80fd30:	df000815 	stw	fp,32(sp)
  80fd34:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80fd38:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  80fd3c:	081998c0 	call	81998c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fd40:	0005303a 	rdctl	r2,status
  80fd44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fd48:	e0fffb17 	ldw	r3,-20(fp)
  80fd4c:	00bfff84 	movi	r2,-2
  80fd50:	1884703a 	and	r2,r3,r2
  80fd54:	1001703a 	wrctl	status,r2
  
  return context;
  80fd58:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  80fd5c:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
  80fd60:	d0a72c17 	ldw	r2,-25424(gp)
  80fd64:	10800044 	addi	r2,r2,1
  80fd68:	d0a72c15 	stw	r2,-25424(gp)
  80fd6c:	e0bffc17 	ldw	r2,-16(fp)
  80fd70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fd74:	e0bffa17 	ldw	r2,-24(fp)
  80fd78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  80fd7c:	d0a71c43 	ldbu	r2,-25487(gp)
  80fd80:	10803fcc 	andi	r2,r2,255
  80fd84:	10800058 	cmpnei	r2,r2,1
  80fd88:	1000721e 	bne	r2,zero,80ff54 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  80fd8c:	d0a72003 	ldbu	r2,-25472(gp)
  80fd90:	10803fcc 	andi	r2,r2,255
  80fd94:	e0bfff15 	stw	r2,-4(fp)
  80fd98:	e0ffff17 	ldw	r3,-4(fp)
  80fd9c:	18800060 	cmpeqi	r2,r3,1
  80fda0:	10000a1e 	bne	r2,zero,80fdcc <OSTimeTick+0xa4>
  80fda4:	e0ffff17 	ldw	r3,-4(fp)
  80fda8:	188000a0 	cmpeqi	r2,r3,2
  80fdac:	1000091e 	bne	r2,zero,80fdd4 <OSTimeTick+0xac>
  80fdb0:	e0ffff17 	ldw	r3,-4(fp)
  80fdb4:	1805003a 	cmpeq	r2,r3,zero
  80fdb8:	1000011e 	bne	r2,zero,80fdc0 <OSTimeTick+0x98>
  80fdbc:	00000a06 	br	80fde8 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  80fdc0:	00800044 	movi	r2,1
  80fdc4:	e0bffd05 	stb	r2,-12(fp)
                 break;
  80fdc8:	00000a06 	br	80fdf4 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  80fdcc:	e03ffd05 	stb	zero,-12(fp)
                 break;
  80fdd0:	00000806 	br	80fdf4 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  80fdd4:	00800044 	movi	r2,1
  80fdd8:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  80fddc:	00800044 	movi	r2,1
  80fde0:	d0a72005 	stb	r2,-25472(gp)
                 break;
  80fde4:	00000306 	br	80fdf4 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  80fde8:	00800044 	movi	r2,1
  80fdec:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  80fdf0:	d0272005 	stb	zero,-25472(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  80fdf4:	e0bffd03 	ldbu	r2,-12(fp)
  80fdf8:	1005003a 	cmpeq	r2,r2,zero
  80fdfc:	1000551e 	bne	r2,zero,80ff54 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  80fe00:	d0a71f17 	ldw	r2,-25476(gp)
  80fe04:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  80fe08:	00004d06 	br	80ff40 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fe0c:	0005303a 	rdctl	r2,status
  80fe10:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fe14:	e0fff917 	ldw	r3,-28(fp)
  80fe18:	00bfff84 	movi	r2,-2
  80fe1c:	1884703a 	and	r2,r3,r2
  80fe20:	1001703a 	wrctl	status,r2
  
  return context;
  80fe24:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
  80fe28:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  80fe2c:	e0bffe17 	ldw	r2,-8(fp)
  80fe30:	10800b8b 	ldhu	r2,46(r2)
  80fe34:	10bfffcc 	andi	r2,r2,65535
  80fe38:	1005003a 	cmpeq	r2,r2,zero
  80fe3c:	1000391e 	bne	r2,zero,80ff24 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  80fe40:	e0bffe17 	ldw	r2,-8(fp)
  80fe44:	10800b8b 	ldhu	r2,46(r2)
  80fe48:	10bfffc4 	addi	r2,r2,-1
  80fe4c:	1007883a 	mov	r3,r2
  80fe50:	e0bffe17 	ldw	r2,-8(fp)
  80fe54:	10c00b8d 	sth	r3,46(r2)
  80fe58:	e0bffe17 	ldw	r2,-8(fp)
  80fe5c:	10800b8b 	ldhu	r2,46(r2)
  80fe60:	10bfffcc 	andi	r2,r2,65535
  80fe64:	1004c03a 	cmpne	r2,r2,zero
  80fe68:	10002e1e 	bne	r2,zero,80ff24 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  80fe6c:	e0bffe17 	ldw	r2,-8(fp)
  80fe70:	10800c03 	ldbu	r2,48(r2)
  80fe74:	10803fcc 	andi	r2,r2,255
  80fe78:	10800dcc 	andi	r2,r2,55
  80fe7c:	1005003a 	cmpeq	r2,r2,zero
  80fe80:	10000b1e 	bne	r2,zero,80feb0 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  80fe84:	e0bffe17 	ldw	r2,-8(fp)
  80fe88:	10c00c03 	ldbu	r3,48(r2)
  80fe8c:	00bff204 	movi	r2,-56
  80fe90:	1884703a 	and	r2,r3,r2
  80fe94:	1007883a 	mov	r3,r2
  80fe98:	e0bffe17 	ldw	r2,-8(fp)
  80fe9c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  80fea0:	e0fffe17 	ldw	r3,-8(fp)
  80fea4:	00800044 	movi	r2,1
  80fea8:	18800c45 	stb	r2,49(r3)
  80feac:	00000206 	br	80feb8 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  80feb0:	e0bffe17 	ldw	r2,-8(fp)
  80feb4:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  80feb8:	e0bffe17 	ldw	r2,-8(fp)
  80febc:	10800c03 	ldbu	r2,48(r2)
  80fec0:	10803fcc 	andi	r2,r2,255
  80fec4:	1080020c 	andi	r2,r2,8
  80fec8:	1004c03a 	cmpne	r2,r2,zero
  80fecc:	1000151e 	bne	r2,zero,80ff24 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  80fed0:	e0bffe17 	ldw	r2,-8(fp)
  80fed4:	10c00d83 	ldbu	r3,54(r2)
  80fed8:	d0a72803 	ldbu	r2,-25440(gp)
  80fedc:	1884b03a 	or	r2,r3,r2
  80fee0:	d0a72805 	stb	r2,-25440(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80fee4:	e0bffe17 	ldw	r2,-8(fp)
  80fee8:	10800d03 	ldbu	r2,52(r2)
  80feec:	11003fcc 	andi	r4,r2,255
  80fef0:	e0bffe17 	ldw	r2,-8(fp)
  80fef4:	10800d03 	ldbu	r2,52(r2)
  80fef8:	10c03fcc 	andi	r3,r2,255
  80fefc:	d0a72844 	addi	r2,gp,-25439
  80ff00:	1885883a 	add	r2,r3,r2
  80ff04:	10c00003 	ldbu	r3,0(r2)
  80ff08:	e0bffe17 	ldw	r2,-8(fp)
  80ff0c:	10800d43 	ldbu	r2,53(r2)
  80ff10:	1884b03a 	or	r2,r3,r2
  80ff14:	1007883a 	mov	r3,r2
  80ff18:	d0a72844 	addi	r2,gp,-25439
  80ff1c:	2085883a 	add	r2,r4,r2
  80ff20:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  80ff24:	e0bffe17 	ldw	r2,-8(fp)
  80ff28:	10800517 	ldw	r2,20(r2)
  80ff2c:	e0bffe15 	stw	r2,-8(fp)
  80ff30:	e0bffc17 	ldw	r2,-16(fp)
  80ff34:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ff38:	e0bff817 	ldw	r2,-32(fp)
  80ff3c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  80ff40:	e0bffe17 	ldw	r2,-8(fp)
  80ff44:	10800c83 	ldbu	r2,50(r2)
  80ff48:	10803fcc 	andi	r2,r2,255
  80ff4c:	10800518 	cmpnei	r2,r2,20
  80ff50:	103fae1e 	bne	r2,zero,80fe0c <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  80ff54:	e037883a 	mov	sp,fp
  80ff58:	dfc00117 	ldw	ra,4(sp)
  80ff5c:	df000017 	ldw	fp,0(sp)
  80ff60:	dec00204 	addi	sp,sp,8
  80ff64:	f800283a 	ret

0080ff68 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  80ff68:	deffff04 	addi	sp,sp,-4
  80ff6c:	df000015 	stw	fp,0(sp)
  80ff70:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  80ff74:	00804784 	movi	r2,286
}
  80ff78:	e037883a 	mov	sp,fp
  80ff7c:	df000017 	ldw	fp,0(sp)
  80ff80:	dec00104 	addi	sp,sp,4
  80ff84:	f800283a 	ret

0080ff88 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  80ff88:	deffff04 	addi	sp,sp,-4
  80ff8c:	df000015 	stw	fp,0(sp)
  80ff90:	d839883a 	mov	fp,sp
}
  80ff94:	e037883a 	mov	sp,fp
  80ff98:	df000017 	ldw	fp,0(sp)
  80ff9c:	dec00104 	addi	sp,sp,4
  80ffa0:	f800283a 	ret

0080ffa4 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  80ffa4:	defff804 	addi	sp,sp,-32
  80ffa8:	dfc00715 	stw	ra,28(sp)
  80ffac:	df000615 	stw	fp,24(sp)
  80ffb0:	df000604 	addi	fp,sp,24
  80ffb4:	e13ffc15 	stw	r4,-16(fp)
  80ffb8:	e17ffd15 	stw	r5,-12(fp)
  80ffbc:	e1bffe05 	stb	r6,-8(fp)
  80ffc0:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  80ffc4:	e0bffc17 	ldw	r2,-16(fp)
  80ffc8:	10800283 	ldbu	r2,10(r2)
  80ffcc:	10c03fcc 	andi	r3,r2,255
  80ffd0:	008020b4 	movhi	r2,130
  80ffd4:	10a98504 	addi	r2,r2,-23020
  80ffd8:	10c5883a 	add	r2,r2,r3
  80ffdc:	10800003 	ldbu	r2,0(r2)
  80ffe0:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  80ffe4:	e0fffa83 	ldbu	r3,-22(fp)
  80ffe8:	e0bffc17 	ldw	r2,-16(fp)
  80ffec:	1885883a 	add	r2,r3,r2
  80fff0:	10800204 	addi	r2,r2,8
  80fff4:	108000c3 	ldbu	r2,3(r2)
  80fff8:	10c03fcc 	andi	r3,r2,255
  80fffc:	008020b4 	movhi	r2,130
  810000:	10a98504 	addi	r2,r2,-23020
  810004:	10c5883a 	add	r2,r2,r3
  810008:	10800003 	ldbu	r2,0(r2)
  81000c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  810010:	e0bffa83 	ldbu	r2,-22(fp)
  810014:	100490fa 	slli	r2,r2,3
  810018:	1007883a 	mov	r3,r2
  81001c:	e0bffa43 	ldbu	r2,-23(fp)
  810020:	1885883a 	add	r2,r3,r2
  810024:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  810028:	e0bffa03 	ldbu	r2,-24(fp)
  81002c:	00c020b4 	movhi	r3,130
  810030:	18d44304 	addi	r3,r3,20748
  810034:	1085883a 	add	r2,r2,r2
  810038:	1085883a 	add	r2,r2,r2
  81003c:	10c5883a 	add	r2,r2,r3
  810040:	10800017 	ldw	r2,0(r2)
  810044:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  810048:	e0bffb17 	ldw	r2,-20(fp)
  81004c:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  810050:	e0fffb17 	ldw	r3,-20(fp)
  810054:	e0bffd17 	ldw	r2,-12(fp)
  810058:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  81005c:	e0bffb17 	ldw	r2,-20(fp)
  810060:	10800c03 	ldbu	r2,48(r2)
  810064:	1007883a 	mov	r3,r2
  810068:	e0bffe03 	ldbu	r2,-8(fp)
  81006c:	0084303a 	nor	r2,zero,r2
  810070:	1884703a 	and	r2,r3,r2
  810074:	1007883a 	mov	r3,r2
  810078:	e0bffb17 	ldw	r2,-20(fp)
  81007c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  810080:	e0fffb17 	ldw	r3,-20(fp)
  810084:	e0bfff03 	ldbu	r2,-4(fp)
  810088:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  81008c:	e0bffb17 	ldw	r2,-20(fp)
  810090:	10800c03 	ldbu	r2,48(r2)
  810094:	10803fcc 	andi	r2,r2,255
  810098:	1080020c 	andi	r2,r2,8
  81009c:	1004c03a 	cmpne	r2,r2,zero
  8100a0:	1000111e 	bne	r2,zero,8100e8 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  8100a4:	e0bffb17 	ldw	r2,-20(fp)
  8100a8:	10c00d83 	ldbu	r3,54(r2)
  8100ac:	d0a72803 	ldbu	r2,-25440(gp)
  8100b0:	1884b03a 	or	r2,r3,r2
  8100b4:	d0a72805 	stb	r2,-25440(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  8100b8:	e13ffa83 	ldbu	r4,-22(fp)
  8100bc:	e0fffa83 	ldbu	r3,-22(fp)
  8100c0:	d0a72844 	addi	r2,gp,-25439
  8100c4:	1885883a 	add	r2,r3,r2
  8100c8:	10c00003 	ldbu	r3,0(r2)
  8100cc:	e0bffb17 	ldw	r2,-20(fp)
  8100d0:	10800d43 	ldbu	r2,53(r2)
  8100d4:	1884b03a 	or	r2,r3,r2
  8100d8:	1007883a 	mov	r3,r2
  8100dc:	d0a72844 	addi	r2,gp,-25439
  8100e0:	2085883a 	add	r2,r4,r2
  8100e4:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  8100e8:	e13ffb17 	ldw	r4,-20(fp)
  8100ec:	e17ffc17 	ldw	r5,-16(fp)
  8100f0:	081039c0 	call	81039c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  8100f4:	e0bffb17 	ldw	r2,-20(fp)
  8100f8:	10800817 	ldw	r2,32(r2)
  8100fc:	1005003a 	cmpeq	r2,r2,zero
  810100:	1000071e 	bne	r2,zero,810120 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  810104:	e0bffb17 	ldw	r2,-20(fp)
  810108:	11400817 	ldw	r5,32(r2)
  81010c:	e13ffb17 	ldw	r4,-20(fp)
  810110:	08104540 	call	810454 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  810114:	e0fffb17 	ldw	r3,-20(fp)
  810118:	e0bffc17 	ldw	r2,-16(fp)
  81011c:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
  810120:	e0bffa03 	ldbu	r2,-24(fp)
}
  810124:	e037883a 	mov	sp,fp
  810128:	dfc00117 	ldw	ra,4(sp)
  81012c:	df000017 	ldw	fp,0(sp)
  810130:	dec00204 	addi	sp,sp,8
  810134:	f800283a 	ret

00810138 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  810138:	defffd04 	addi	sp,sp,-12
  81013c:	df000215 	stw	fp,8(sp)
  810140:	df000204 	addi	fp,sp,8
  810144:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  810148:	d0e72b17 	ldw	r3,-25428(gp)
  81014c:	e0bfff17 	ldw	r2,-4(fp)
  810150:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  810154:	d0a72b17 	ldw	r2,-25428(gp)
  810158:	10800d03 	ldbu	r2,52(r2)
  81015c:	11003fcc 	andi	r4,r2,255
  810160:	d0a72b17 	ldw	r2,-25428(gp)
  810164:	10800d03 	ldbu	r2,52(r2)
  810168:	10c03fcc 	andi	r3,r2,255
  81016c:	e0bfff17 	ldw	r2,-4(fp)
  810170:	1885883a 	add	r2,r3,r2
  810174:	10800204 	addi	r2,r2,8
  810178:	10c000c3 	ldbu	r3,3(r2)
  81017c:	d0a72b17 	ldw	r2,-25428(gp)
  810180:	10800d43 	ldbu	r2,53(r2)
  810184:	1884b03a 	or	r2,r3,r2
  810188:	1007883a 	mov	r3,r2
  81018c:	e0bfff17 	ldw	r2,-4(fp)
  810190:	2085883a 	add	r2,r4,r2
  810194:	10800204 	addi	r2,r2,8
  810198:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  81019c:	e0bfff17 	ldw	r2,-4(fp)
  8101a0:	10c00283 	ldbu	r3,10(r2)
  8101a4:	d0a72b17 	ldw	r2,-25428(gp)
  8101a8:	10800d83 	ldbu	r2,54(r2)
  8101ac:	1884b03a 	or	r2,r3,r2
  8101b0:	1007883a 	mov	r3,r2
  8101b4:	e0bfff17 	ldw	r2,-4(fp)
  8101b8:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  8101bc:	d0a72b17 	ldw	r2,-25428(gp)
  8101c0:	10800d03 	ldbu	r2,52(r2)
  8101c4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  8101c8:	e13ffe03 	ldbu	r4,-8(fp)
  8101cc:	e0fffe03 	ldbu	r3,-8(fp)
  8101d0:	d0a72844 	addi	r2,gp,-25439
  8101d4:	1885883a 	add	r2,r3,r2
  8101d8:	10800003 	ldbu	r2,0(r2)
  8101dc:	1007883a 	mov	r3,r2
  8101e0:	d0a72b17 	ldw	r2,-25428(gp)
  8101e4:	10800d43 	ldbu	r2,53(r2)
  8101e8:	0084303a 	nor	r2,zero,r2
  8101ec:	1884703a 	and	r2,r3,r2
  8101f0:	1007883a 	mov	r3,r2
  8101f4:	d0a72844 	addi	r2,gp,-25439
  8101f8:	2085883a 	add	r2,r4,r2
  8101fc:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  810200:	e0fffe03 	ldbu	r3,-8(fp)
  810204:	d0a72844 	addi	r2,gp,-25439
  810208:	1885883a 	add	r2,r3,r2
  81020c:	10800003 	ldbu	r2,0(r2)
  810210:	10803fcc 	andi	r2,r2,255
  810214:	1004c03a 	cmpne	r2,r2,zero
  810218:	1000071e 	bne	r2,zero,810238 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  81021c:	d0a72b17 	ldw	r2,-25428(gp)
  810220:	10800d83 	ldbu	r2,54(r2)
  810224:	0084303a 	nor	r2,zero,r2
  810228:	1007883a 	mov	r3,r2
  81022c:	d0a72803 	ldbu	r2,-25440(gp)
  810230:	1884703a 	and	r2,r3,r2
  810234:	d0a72805 	stb	r2,-25440(gp)
    }
}
  810238:	e037883a 	mov	sp,fp
  81023c:	df000017 	ldw	fp,0(sp)
  810240:	dec00104 	addi	sp,sp,4
  810244:	f800283a 	ret

00810248 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  810248:	defffb04 	addi	sp,sp,-20
  81024c:	df000415 	stw	fp,16(sp)
  810250:	df000404 	addi	fp,sp,16
  810254:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  810258:	d0a72b17 	ldw	r2,-25428(gp)
  81025c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  810260:	d0e72b17 	ldw	r3,-25428(gp)
  810264:	e0bfff17 	ldw	r2,-4(fp)
  810268:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
  81026c:	e0bfff17 	ldw	r2,-4(fp)
  810270:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
  810274:	e0bffe17 	ldw	r2,-8(fp)
  810278:	10800017 	ldw	r2,0(r2)
  81027c:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  810280:	00002006 	br	810304 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  810284:	d0a72b17 	ldw	r2,-25428(gp)
  810288:	10800d03 	ldbu	r2,52(r2)
  81028c:	11003fcc 	andi	r4,r2,255
  810290:	d0a72b17 	ldw	r2,-25428(gp)
  810294:	10800d03 	ldbu	r2,52(r2)
  810298:	10c03fcc 	andi	r3,r2,255
  81029c:	e0bffd17 	ldw	r2,-12(fp)
  8102a0:	1885883a 	add	r2,r3,r2
  8102a4:	10800204 	addi	r2,r2,8
  8102a8:	10c000c3 	ldbu	r3,3(r2)
  8102ac:	d0a72b17 	ldw	r2,-25428(gp)
  8102b0:	10800d43 	ldbu	r2,53(r2)
  8102b4:	1884b03a 	or	r2,r3,r2
  8102b8:	1007883a 	mov	r3,r2
  8102bc:	e0bffd17 	ldw	r2,-12(fp)
  8102c0:	2085883a 	add	r2,r4,r2
  8102c4:	10800204 	addi	r2,r2,8
  8102c8:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  8102cc:	e0bffd17 	ldw	r2,-12(fp)
  8102d0:	10c00283 	ldbu	r3,10(r2)
  8102d4:	d0a72b17 	ldw	r2,-25428(gp)
  8102d8:	10800d83 	ldbu	r2,54(r2)
  8102dc:	1884b03a 	or	r2,r3,r2
  8102e0:	1007883a 	mov	r3,r2
  8102e4:	e0bffd17 	ldw	r2,-12(fp)
  8102e8:	10c00285 	stb	r3,10(r2)
        pevents++;
  8102ec:	e0bffe17 	ldw	r2,-8(fp)
  8102f0:	10800104 	addi	r2,r2,4
  8102f4:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
  8102f8:	e0bffe17 	ldw	r2,-8(fp)
  8102fc:	10800017 	ldw	r2,0(r2)
  810300:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  810304:	e0bffd17 	ldw	r2,-12(fp)
  810308:	1004c03a 	cmpne	r2,r2,zero
  81030c:	103fdd1e 	bne	r2,zero,810284 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  810310:	d0a72b17 	ldw	r2,-25428(gp)
  810314:	10800d03 	ldbu	r2,52(r2)
  810318:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  81031c:	e13ffc03 	ldbu	r4,-16(fp)
  810320:	e0fffc03 	ldbu	r3,-16(fp)
  810324:	d0a72844 	addi	r2,gp,-25439
  810328:	1885883a 	add	r2,r3,r2
  81032c:	10800003 	ldbu	r2,0(r2)
  810330:	1007883a 	mov	r3,r2
  810334:	d0a72b17 	ldw	r2,-25428(gp)
  810338:	10800d43 	ldbu	r2,53(r2)
  81033c:	0084303a 	nor	r2,zero,r2
  810340:	1884703a 	and	r2,r3,r2
  810344:	1007883a 	mov	r3,r2
  810348:	d0a72844 	addi	r2,gp,-25439
  81034c:	2085883a 	add	r2,r4,r2
  810350:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  810354:	e0fffc03 	ldbu	r3,-16(fp)
  810358:	d0a72844 	addi	r2,gp,-25439
  81035c:	1885883a 	add	r2,r3,r2
  810360:	10800003 	ldbu	r2,0(r2)
  810364:	10803fcc 	andi	r2,r2,255
  810368:	1004c03a 	cmpne	r2,r2,zero
  81036c:	1000071e 	bne	r2,zero,81038c <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  810370:	d0a72b17 	ldw	r2,-25428(gp)
  810374:	10800d83 	ldbu	r2,54(r2)
  810378:	0084303a 	nor	r2,zero,r2
  81037c:	1007883a 	mov	r3,r2
  810380:	d0a72803 	ldbu	r2,-25440(gp)
  810384:	1884703a 	and	r2,r3,r2
  810388:	d0a72805 	stb	r2,-25440(gp)
    }
}
  81038c:	e037883a 	mov	sp,fp
  810390:	df000017 	ldw	fp,0(sp)
  810394:	dec00104 	addi	sp,sp,4
  810398:	f800283a 	ret

0081039c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  81039c:	defffc04 	addi	sp,sp,-16
  8103a0:	df000315 	stw	fp,12(sp)
  8103a4:	df000304 	addi	fp,sp,12
  8103a8:	e13ffe15 	stw	r4,-8(fp)
  8103ac:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  8103b0:	e0bffe17 	ldw	r2,-8(fp)
  8103b4:	10800d03 	ldbu	r2,52(r2)
  8103b8:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  8103bc:	e13ffd03 	ldbu	r4,-12(fp)
  8103c0:	e0fffd03 	ldbu	r3,-12(fp)
  8103c4:	e0bfff17 	ldw	r2,-4(fp)
  8103c8:	1885883a 	add	r2,r3,r2
  8103cc:	10800204 	addi	r2,r2,8
  8103d0:	108000c3 	ldbu	r2,3(r2)
  8103d4:	1007883a 	mov	r3,r2
  8103d8:	e0bffe17 	ldw	r2,-8(fp)
  8103dc:	10800d43 	ldbu	r2,53(r2)
  8103e0:	0084303a 	nor	r2,zero,r2
  8103e4:	1884703a 	and	r2,r3,r2
  8103e8:	1007883a 	mov	r3,r2
  8103ec:	e0bfff17 	ldw	r2,-4(fp)
  8103f0:	2085883a 	add	r2,r4,r2
  8103f4:	10800204 	addi	r2,r2,8
  8103f8:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
  8103fc:	e0fffd03 	ldbu	r3,-12(fp)
  810400:	e0bfff17 	ldw	r2,-4(fp)
  810404:	1885883a 	add	r2,r3,r2
  810408:	10800204 	addi	r2,r2,8
  81040c:	108000c3 	ldbu	r2,3(r2)
  810410:	10803fcc 	andi	r2,r2,255
  810414:	1004c03a 	cmpne	r2,r2,zero
  810418:	10000a1e 	bne	r2,zero,810444 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  81041c:	e0bfff17 	ldw	r2,-4(fp)
  810420:	10800283 	ldbu	r2,10(r2)
  810424:	1007883a 	mov	r3,r2
  810428:	e0bffe17 	ldw	r2,-8(fp)
  81042c:	10800d83 	ldbu	r2,54(r2)
  810430:	0084303a 	nor	r2,zero,r2
  810434:	1884703a 	and	r2,r3,r2
  810438:	1007883a 	mov	r3,r2
  81043c:	e0bfff17 	ldw	r2,-4(fp)
  810440:	10c00285 	stb	r3,10(r2)
    }
}
  810444:	e037883a 	mov	sp,fp
  810448:	df000017 	ldw	fp,0(sp)
  81044c:	dec00104 	addi	sp,sp,4
  810450:	f800283a 	ret

00810454 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  810454:	defffa04 	addi	sp,sp,-24
  810458:	df000515 	stw	fp,20(sp)
  81045c:	df000504 	addi	fp,sp,20
  810460:	e13ffe15 	stw	r4,-8(fp)
  810464:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  810468:	e0bffe17 	ldw	r2,-8(fp)
  81046c:	10800d03 	ldbu	r2,52(r2)
  810470:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
  810474:	e0bffe17 	ldw	r2,-8(fp)
  810478:	10800d83 	ldbu	r2,54(r2)
  81047c:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
  810480:	e0bffe17 	ldw	r2,-8(fp)
  810484:	10800d43 	ldbu	r2,53(r2)
  810488:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
  81048c:	e0bfff17 	ldw	r2,-4(fp)
  810490:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
  810494:	e0bffd17 	ldw	r2,-12(fp)
  810498:	10800017 	ldw	r2,0(r2)
  81049c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  8104a0:	00002606 	br	81053c <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
  8104a4:	e13ffb83 	ldbu	r4,-18(fp)
  8104a8:	e0fffb83 	ldbu	r3,-18(fp)
  8104ac:	e0bffc17 	ldw	r2,-16(fp)
  8104b0:	1885883a 	add	r2,r3,r2
  8104b4:	10800204 	addi	r2,r2,8
  8104b8:	108000c3 	ldbu	r2,3(r2)
  8104bc:	1007883a 	mov	r3,r2
  8104c0:	e0bffb03 	ldbu	r2,-20(fp)
  8104c4:	0084303a 	nor	r2,zero,r2
  8104c8:	1884703a 	and	r2,r3,r2
  8104cc:	1007883a 	mov	r3,r2
  8104d0:	e0bffc17 	ldw	r2,-16(fp)
  8104d4:	2085883a 	add	r2,r4,r2
  8104d8:	10800204 	addi	r2,r2,8
  8104dc:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
  8104e0:	e0fffb83 	ldbu	r3,-18(fp)
  8104e4:	e0bffc17 	ldw	r2,-16(fp)
  8104e8:	1885883a 	add	r2,r3,r2
  8104ec:	10800204 	addi	r2,r2,8
  8104f0:	108000c3 	ldbu	r2,3(r2)
  8104f4:	10803fcc 	andi	r2,r2,255
  8104f8:	1004c03a 	cmpne	r2,r2,zero
  8104fc:	1000091e 	bne	r2,zero,810524 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
  810500:	e0bffc17 	ldw	r2,-16(fp)
  810504:	10800283 	ldbu	r2,10(r2)
  810508:	1007883a 	mov	r3,r2
  81050c:	e0bffb43 	ldbu	r2,-19(fp)
  810510:	0084303a 	nor	r2,zero,r2
  810514:	1884703a 	and	r2,r3,r2
  810518:	1007883a 	mov	r3,r2
  81051c:	e0bffc17 	ldw	r2,-16(fp)
  810520:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  810524:	e0bffd17 	ldw	r2,-12(fp)
  810528:	10800104 	addi	r2,r2,4
  81052c:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
  810530:	e0bffd17 	ldw	r2,-12(fp)
  810534:	10800017 	ldw	r2,0(r2)
  810538:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  81053c:	e0bffc17 	ldw	r2,-16(fp)
  810540:	1004c03a 	cmpne	r2,r2,zero
  810544:	103fd71e 	bne	r2,zero,8104a4 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  810548:	e037883a 	mov	sp,fp
  81054c:	df000017 	ldw	fp,0(sp)
  810550:	dec00104 	addi	sp,sp,4
  810554:	f800283a 	ret

00810558 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  810558:	defffc04 	addi	sp,sp,-16
  81055c:	df000315 	stw	fp,12(sp)
  810560:	df000304 	addi	fp,sp,12
  810564:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  810568:	e0bfff17 	ldw	r2,-4(fp)
  81056c:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  810570:	e0bfff17 	ldw	r2,-4(fp)
  810574:	108002c4 	addi	r2,r2,11
  810578:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  81057c:	e03ffd05 	stb	zero,-12(fp)
  810580:	00000806 	br	8105a4 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
  810584:	e0bffe17 	ldw	r2,-8(fp)
  810588:	10000005 	stb	zero,0(r2)
  81058c:	e0bffe17 	ldw	r2,-8(fp)
  810590:	10800044 	addi	r2,r2,1
  810594:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  810598:	e0bffd03 	ldbu	r2,-12(fp)
  81059c:	10800044 	addi	r2,r2,1
  8105a0:	e0bffd05 	stb	r2,-12(fp)
  8105a4:	e0bffd03 	ldbu	r2,-12(fp)
  8105a8:	108000f0 	cmpltui	r2,r2,3
  8105ac:	103ff51e 	bne	r2,zero,810584 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
  8105b0:	e037883a 	mov	sp,fp
  8105b4:	df000017 	ldw	fp,0(sp)
  8105b8:	dec00104 	addi	sp,sp,4
  8105bc:	f800283a 	ret

008105c0 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  8105c0:	defffb04 	addi	sp,sp,-20
  8105c4:	dfc00415 	stw	ra,16(sp)
  8105c8:	df000315 	stw	fp,12(sp)
  8105cc:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  8105d0:	010020b4 	movhi	r4,130
  8105d4:	21102f04 	addi	r4,r4,16572
  8105d8:	0142d004 	movi	r5,2880
  8105dc:	08109240 	call	810924 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  8105e0:	008020b4 	movhi	r2,130
  8105e4:	10902f04 	addi	r2,r2,16572
  8105e8:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  8105ec:	008020b4 	movhi	r2,130
  8105f0:	10903b04 	addi	r2,r2,16620
  8105f4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  8105f8:	e03fff0d 	sth	zero,-4(fp)
  8105fc:	00001306 	br	81064c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  810600:	e0bffe17 	ldw	r2,-8(fp)
  810604:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  810608:	e0fffe17 	ldw	r3,-8(fp)
  81060c:	e0bffd17 	ldw	r2,-12(fp)
  810610:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  810614:	e0fffe17 	ldw	r3,-8(fp)
  810618:	00800fc4 	movi	r2,63
  81061c:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  810620:	e0bffe17 	ldw	r2,-8(fp)
  810624:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  810628:	e0bffe17 	ldw	r2,-8(fp)
  81062c:	10800c04 	addi	r2,r2,48
  810630:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  810634:	e0bffd17 	ldw	r2,-12(fp)
  810638:	10800c04 	addi	r2,r2,48
  81063c:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  810640:	e0bfff0b 	ldhu	r2,-4(fp)
  810644:	10800044 	addi	r2,r2,1
  810648:	e0bfff0d 	sth	r2,-4(fp)
  81064c:	e0bfff0b 	ldhu	r2,-4(fp)
  810650:	10800ef0 	cmpltui	r2,r2,59
  810654:	103fea1e 	bne	r2,zero,810600 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  810658:	e0bffe17 	ldw	r2,-8(fp)
  81065c:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  810660:	e0bffe17 	ldw	r2,-8(fp)
  810664:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  810668:	e0fffe17 	ldw	r3,-8(fp)
  81066c:	00800fc4 	movi	r2,63
  810670:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  810674:	e0bffe17 	ldw	r2,-8(fp)
  810678:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  81067c:	008020b4 	movhi	r2,130
  810680:	10902f04 	addi	r2,r2,16572
  810684:	d0a72915 	stw	r2,-25436(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  810688:	e037883a 	mov	sp,fp
  81068c:	dfc00117 	ldw	ra,4(sp)
  810690:	df000017 	ldw	fp,0(sp)
  810694:	dec00204 	addi	sp,sp,8
  810698:	f800283a 	ret

0081069c <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  81069c:	deffff04 	addi	sp,sp,-4
  8106a0:	df000015 	stw	fp,0(sp)
  8106a4:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  8106a8:	d0272c15 	stw	zero,-25424(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  8106ac:	d0272a05 	stb	zero,-25432(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  8106b0:	d0271c05 	stb	zero,-25488(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  8106b4:	d0272445 	stb	zero,-25455(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  8106b8:	d0271c45 	stb	zero,-25487(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  8106bc:	d0272115 	stw	zero,-25468(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  8106c0:	d0271d15 	stw	zero,-25484(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  8106c4:	d0272f15 	stw	zero,-25412(gp)
    OSIdleCtrMax  = 0L;
  8106c8:	d0272215 	stw	zero,-25464(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  8106cc:	d0272e05 	stb	zero,-25416(gp)
#endif
}
  8106d0:	e037883a 	mov	sp,fp
  8106d4:	df000017 	ldw	fp,0(sp)
  8106d8:	dec00104 	addi	sp,sp,4
  8106dc:	f800283a 	ret

008106e0 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  8106e0:	defffd04 	addi	sp,sp,-12
  8106e4:	df000215 	stw	fp,8(sp)
  8106e8:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  8106ec:	d0272805 	stb	zero,-25440(gp)
    prdytbl       = &OSRdyTbl[0];
  8106f0:	d0a72844 	addi	r2,gp,-25439
  8106f4:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  8106f8:	e03fff05 	stb	zero,-4(fp)
  8106fc:	00000806 	br	810720 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
  810700:	e0bffe17 	ldw	r2,-8(fp)
  810704:	10000005 	stb	zero,0(r2)
  810708:	e0bffe17 	ldw	r2,-8(fp)
  81070c:	10800044 	addi	r2,r2,1
  810710:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  810714:	e0bfff03 	ldbu	r2,-4(fp)
  810718:	10800044 	addi	r2,r2,1
  81071c:	e0bfff05 	stb	r2,-4(fp)
  810720:	e0bfff03 	ldbu	r2,-4(fp)
  810724:	108000f0 	cmpltui	r2,r2,3
  810728:	103ff51e 	bne	r2,zero,810700 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  81072c:	d0271e45 	stb	zero,-25479(gp)
    OSPrioHighRdy = 0;
  810730:	d0271e05 	stb	zero,-25480(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  810734:	d0272615 	stw	zero,-25448(gp)
    OSTCBCur      = (OS_TCB *)0;
  810738:	d0272b15 	stw	zero,-25428(gp)
}
  81073c:	e037883a 	mov	sp,fp
  810740:	df000017 	ldw	fp,0(sp)
  810744:	dec00104 	addi	sp,sp,4
  810748:	f800283a 	ret

0081074c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  81074c:	defff804 	addi	sp,sp,-32
  810750:	dfc00715 	stw	ra,28(sp)
  810754:	df000615 	stw	fp,24(sp)
  810758:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  81075c:	018020b4 	movhi	r6,130
  810760:	31902e04 	addi	r6,r6,16568
  810764:	00bfffd4 	movui	r2,65535
  810768:	d8800015 	stw	r2,0(sp)
  81076c:	008020b4 	movhi	r2,130
  810770:	108e2f04 	addi	r2,r2,14524
  810774:	d8800115 	stw	r2,4(sp)
  810778:	00808004 	movi	r2,512
  81077c:	d8800215 	stw	r2,8(sp)
  810780:	d8000315 	stw	zero,12(sp)
  810784:	008000c4 	movi	r2,3
  810788:	d8800415 	stw	r2,16(sp)
  81078c:	01002074 	movhi	r4,129
  810790:	21030004 	addi	r4,r4,3072
  810794:	000b883a 	mov	r5,zero
  810798:	01c00504 	movi	r7,20
  81079c:	08159e40 	call	8159e4 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  8107a0:	014020b4 	movhi	r5,130
  8107a4:	2969c504 	addi	r5,r5,-22764
  8107a8:	01000504 	movi	r4,20
  8107ac:	e1bfff04 	addi	r6,fp,-4
  8107b0:	08163180 	call	816318 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  8107b4:	e037883a 	mov	sp,fp
  8107b8:	dfc00117 	ldw	ra,4(sp)
  8107bc:	df000017 	ldw	fp,0(sp)
  8107c0:	dec00204 	addi	sp,sp,8
  8107c4:	f800283a 	ret

008107c8 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  8107c8:	defff804 	addi	sp,sp,-32
  8107cc:	dfc00715 	stw	ra,28(sp)
  8107d0:	df000615 	stw	fp,24(sp)
  8107d4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  8107d8:	018020b4 	movhi	r6,130
  8107dc:	318db604 	addi	r6,r6,14040
  8107e0:	00bfff94 	movui	r2,65534
  8107e4:	d8800015 	stw	r2,0(sp)
  8107e8:	008020b4 	movhi	r2,130
  8107ec:	108bb704 	addi	r2,r2,11996
  8107f0:	d8800115 	stw	r2,4(sp)
  8107f4:	00808004 	movi	r2,512
  8107f8:	d8800215 	stw	r2,8(sp)
  8107fc:	d8000315 	stw	zero,12(sp)
  810800:	008000c4 	movi	r2,3
  810804:	d8800415 	stw	r2,16(sp)
  810808:	01002074 	movhi	r4,129
  81080c:	21031704 	addi	r4,r4,3164
  810810:	000b883a 	mov	r5,zero
  810814:	01c004c4 	movi	r7,19
  810818:	08159e40 	call	8159e4 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  81081c:	014020b4 	movhi	r5,130
  810820:	2969c904 	addi	r5,r5,-22748
  810824:	010004c4 	movi	r4,19
  810828:	e1bfff04 	addi	r6,fp,-4
  81082c:	08163180 	call	816318 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  810830:	e037883a 	mov	sp,fp
  810834:	dfc00117 	ldw	ra,4(sp)
  810838:	df000017 	ldw	fp,0(sp)
  81083c:	dec00204 	addi	sp,sp,8
  810840:	f800283a 	ret

00810844 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  810844:	defffb04 	addi	sp,sp,-20
  810848:	dfc00415 	stw	ra,16(sp)
  81084c:	df000315 	stw	fp,12(sp)
  810850:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  810854:	010020b4 	movhi	r4,130
  810858:	2112ff04 	addi	r4,r4,19452
  81085c:	01414404 	movi	r5,1296
  810860:	08109240 	call	810924 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  810864:	010020b4 	movhi	r4,130
  810868:	21144304 	addi	r4,r4,20748
  81086c:	01401504 	movi	r5,84
  810870:	08109240 	call	810924 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  810874:	008020b4 	movhi	r2,130
  810878:	1092ff04 	addi	r2,r2,19452
  81087c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  810880:	008020b4 	movhi	r2,130
  810884:	10931a04 	addi	r2,r2,19560
  810888:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  81088c:	e03fff05 	stb	zero,-4(fp)
  810890:	00001106 	br	8108d8 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  810894:	e0fffe17 	ldw	r3,-8(fp)
  810898:	e0bffd17 	ldw	r2,-12(fp)
  81089c:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  8108a0:	e0fffe17 	ldw	r3,-8(fp)
  8108a4:	00800fc4 	movi	r2,63
  8108a8:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  8108ac:	e0bffe17 	ldw	r2,-8(fp)
  8108b0:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  8108b4:	e0bffe17 	ldw	r2,-8(fp)
  8108b8:	10801b04 	addi	r2,r2,108
  8108bc:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  8108c0:	e0bffd17 	ldw	r2,-12(fp)
  8108c4:	10801b04 	addi	r2,r2,108
  8108c8:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  8108cc:	e0bfff03 	ldbu	r2,-4(fp)
  8108d0:	10800044 	addi	r2,r2,1
  8108d4:	e0bfff05 	stb	r2,-4(fp)
  8108d8:	e0bfff03 	ldbu	r2,-4(fp)
  8108dc:	108002f0 	cmpltui	r2,r2,11
  8108e0:	103fec1e 	bne	r2,zero,810894 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  8108e4:	e0bffe17 	ldw	r2,-8(fp)
  8108e8:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  8108ec:	e0fffe17 	ldw	r3,-8(fp)
  8108f0:	00800fc4 	movi	r2,63
  8108f4:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  8108f8:	e0bffe17 	ldw	r2,-8(fp)
  8108fc:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  810900:	d0271f15 	stw	zero,-25476(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  810904:	008020b4 	movhi	r2,130
  810908:	1092ff04 	addi	r2,r2,19452
  81090c:	d0a72315 	stw	r2,-25460(gp)
}
  810910:	e037883a 	mov	sp,fp
  810914:	dfc00117 	ldw	ra,4(sp)
  810918:	df000017 	ldw	fp,0(sp)
  81091c:	dec00204 	addi	sp,sp,8
  810920:	f800283a 	ret

00810924 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  810924:	defffd04 	addi	sp,sp,-12
  810928:	df000215 	stw	fp,8(sp)
  81092c:	df000204 	addi	fp,sp,8
  810930:	e13ffe15 	stw	r4,-8(fp)
  810934:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
  810938:	00000806 	br	81095c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  81093c:	e0bffe17 	ldw	r2,-8(fp)
  810940:	10000005 	stb	zero,0(r2)
  810944:	e0bffe17 	ldw	r2,-8(fp)
  810948:	10800044 	addi	r2,r2,1
  81094c:	e0bffe15 	stw	r2,-8(fp)
        size--;
  810950:	e0bfff0b 	ldhu	r2,-4(fp)
  810954:	10bfffc4 	addi	r2,r2,-1
  810958:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  81095c:	e0bfff0b 	ldhu	r2,-4(fp)
  810960:	1004c03a 	cmpne	r2,r2,zero
  810964:	103ff51e 	bne	r2,zero,81093c <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  810968:	e037883a 	mov	sp,fp
  81096c:	df000017 	ldw	fp,0(sp)
  810970:	dec00104 	addi	sp,sp,4
  810974:	f800283a 	ret

00810978 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  810978:	defffc04 	addi	sp,sp,-16
  81097c:	df000315 	stw	fp,12(sp)
  810980:	df000304 	addi	fp,sp,12
  810984:	e13ffd15 	stw	r4,-12(fp)
  810988:	e17ffe15 	stw	r5,-8(fp)
  81098c:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
  810990:	00000d06 	br	8109c8 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
  810994:	e0bffe17 	ldw	r2,-8(fp)
  810998:	10c00003 	ldbu	r3,0(r2)
  81099c:	e0bffd17 	ldw	r2,-12(fp)
  8109a0:	10c00005 	stb	r3,0(r2)
  8109a4:	e0bffd17 	ldw	r2,-12(fp)
  8109a8:	10800044 	addi	r2,r2,1
  8109ac:	e0bffd15 	stw	r2,-12(fp)
  8109b0:	e0bffe17 	ldw	r2,-8(fp)
  8109b4:	10800044 	addi	r2,r2,1
  8109b8:	e0bffe15 	stw	r2,-8(fp)
        size--;
  8109bc:	e0bfff0b 	ldhu	r2,-4(fp)
  8109c0:	10bfffc4 	addi	r2,r2,-1
  8109c4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  8109c8:	e0bfff0b 	ldhu	r2,-4(fp)
  8109cc:	1004c03a 	cmpne	r2,r2,zero
  8109d0:	103ff01e 	bne	r2,zero,810994 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
  8109d4:	e037883a 	mov	sp,fp
  8109d8:	df000017 	ldw	fp,0(sp)
  8109dc:	dec00104 	addi	sp,sp,4
  8109e0:	f800283a 	ret

008109e4 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  8109e4:	defffb04 	addi	sp,sp,-20
  8109e8:	dfc00415 	stw	ra,16(sp)
  8109ec:	df000315 	stw	fp,12(sp)
  8109f0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  8109f4:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8109f8:	0005303a 	rdctl	r2,status
  8109fc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810a00:	e0fffe17 	ldw	r3,-8(fp)
  810a04:	00bfff84 	movi	r2,-2
  810a08:	1884703a 	and	r2,r3,r2
  810a0c:	1001703a 	wrctl	status,r2
  
  return context;
  810a10:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  810a14:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  810a18:	d0a72a03 	ldbu	r2,-25432(gp)
  810a1c:	10803fcc 	andi	r2,r2,255
  810a20:	1004c03a 	cmpne	r2,r2,zero
  810a24:	10001b1e 	bne	r2,zero,810a94 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  810a28:	d0a71c03 	ldbu	r2,-25488(gp)
  810a2c:	10803fcc 	andi	r2,r2,255
  810a30:	1004c03a 	cmpne	r2,r2,zero
  810a34:	1000171e 	bne	r2,zero,810a94 <OS_Sched+0xb0>
            OS_SchedNew();
  810a38:	0810ab80 	call	810ab8 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  810a3c:	d0a71e03 	ldbu	r2,-25480(gp)
  810a40:	d0e71e43 	ldbu	r3,-25479(gp)
  810a44:	11003fcc 	andi	r4,r2,255
  810a48:	18803fcc 	andi	r2,r3,255
  810a4c:	20801126 	beq	r4,r2,810a94 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  810a50:	d0a71e03 	ldbu	r2,-25480(gp)
  810a54:	10803fcc 	andi	r2,r2,255
  810a58:	00c020b4 	movhi	r3,130
  810a5c:	18d44304 	addi	r3,r3,20748
  810a60:	1085883a 	add	r2,r2,r2
  810a64:	1085883a 	add	r2,r2,r2
  810a68:	10c5883a 	add	r2,r2,r3
  810a6c:	10800017 	ldw	r2,0(r2)
  810a70:	d0a72615 	stw	r2,-25448(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  810a74:	d0e72617 	ldw	r3,-25448(gp)
  810a78:	18800e17 	ldw	r2,56(r3)
  810a7c:	10800044 	addi	r2,r2,1
  810a80:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  810a84:	d0a72117 	ldw	r2,-25468(gp)
  810a88:	10800044 	addi	r2,r2,1
  810a8c:	d0a72115 	stw	r2,-25468(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  810a90:	08195340 	call	819534 <OSCtxSw>
  810a94:	e0bfff17 	ldw	r2,-4(fp)
  810a98:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810a9c:	e0bffd17 	ldw	r2,-12(fp)
  810aa0:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  810aa4:	e037883a 	mov	sp,fp
  810aa8:	dfc00117 	ldw	ra,4(sp)
  810aac:	df000017 	ldw	fp,0(sp)
  810ab0:	dec00204 	addi	sp,sp,8
  810ab4:	f800283a 	ret

00810ab8 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  810ab8:	defffe04 	addi	sp,sp,-8
  810abc:	df000115 	stw	fp,4(sp)
  810ac0:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  810ac4:	d0a72803 	ldbu	r2,-25440(gp)
  810ac8:	10c03fcc 	andi	r3,r2,255
  810acc:	008020b4 	movhi	r2,130
  810ad0:	10a98504 	addi	r2,r2,-23020
  810ad4:	10c5883a 	add	r2,r2,r3
  810ad8:	10800003 	ldbu	r2,0(r2)
  810adc:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  810ae0:	e0bfff03 	ldbu	r2,-4(fp)
  810ae4:	100490fa 	slli	r2,r2,3
  810ae8:	1009883a 	mov	r4,r2
  810aec:	e0ffff03 	ldbu	r3,-4(fp)
  810af0:	d0a72844 	addi	r2,gp,-25439
  810af4:	1885883a 	add	r2,r3,r2
  810af8:	10800003 	ldbu	r2,0(r2)
  810afc:	10c03fcc 	andi	r3,r2,255
  810b00:	008020b4 	movhi	r2,130
  810b04:	10a98504 	addi	r2,r2,-23020
  810b08:	10c5883a 	add	r2,r2,r3
  810b0c:	10800003 	ldbu	r2,0(r2)
  810b10:	2085883a 	add	r2,r4,r2
  810b14:	d0a71e05 	stb	r2,-25480(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  810b18:	e037883a 	mov	sp,fp
  810b1c:	df000017 	ldw	fp,0(sp)
  810b20:	dec00104 	addi	sp,sp,4
  810b24:	f800283a 	ret

00810b28 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  810b28:	defffc04 	addi	sp,sp,-16
  810b2c:	df000315 	stw	fp,12(sp)
  810b30:	df000304 	addi	fp,sp,12
  810b34:	e13ffe15 	stw	r4,-8(fp)
  810b38:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  810b3c:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  810b40:	00000d06 	br	810b78 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
  810b44:	e0bfff17 	ldw	r2,-4(fp)
  810b48:	10c00003 	ldbu	r3,0(r2)
  810b4c:	e0bffe17 	ldw	r2,-8(fp)
  810b50:	10c00005 	stb	r3,0(r2)
  810b54:	e0bffe17 	ldw	r2,-8(fp)
  810b58:	10800044 	addi	r2,r2,1
  810b5c:	e0bffe15 	stw	r2,-8(fp)
  810b60:	e0bfff17 	ldw	r2,-4(fp)
  810b64:	10800044 	addi	r2,r2,1
  810b68:	e0bfff15 	stw	r2,-4(fp)
        len++;
  810b6c:	e0bffd03 	ldbu	r2,-12(fp)
  810b70:	10800044 	addi	r2,r2,1
  810b74:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  810b78:	e0bfff17 	ldw	r2,-4(fp)
  810b7c:	10800003 	ldbu	r2,0(r2)
  810b80:	10803fcc 	andi	r2,r2,255
  810b84:	1004c03a 	cmpne	r2,r2,zero
  810b88:	103fee1e 	bne	r2,zero,810b44 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  810b8c:	e0bffe17 	ldw	r2,-8(fp)
  810b90:	10000005 	stb	zero,0(r2)
    return (len);
  810b94:	e0bffd03 	ldbu	r2,-12(fp)
}
  810b98:	e037883a 	mov	sp,fp
  810b9c:	df000017 	ldw	fp,0(sp)
  810ba0:	dec00104 	addi	sp,sp,4
  810ba4:	f800283a 	ret

00810ba8 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  810ba8:	defffd04 	addi	sp,sp,-12
  810bac:	df000215 	stw	fp,8(sp)
  810bb0:	df000204 	addi	fp,sp,8
  810bb4:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  810bb8:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  810bbc:	00000606 	br	810bd8 <OS_StrLen+0x30>
        psrc++;
  810bc0:	e0bfff17 	ldw	r2,-4(fp)
  810bc4:	10800044 	addi	r2,r2,1
  810bc8:	e0bfff15 	stw	r2,-4(fp)
        len++;
  810bcc:	e0bffe03 	ldbu	r2,-8(fp)
  810bd0:	10800044 	addi	r2,r2,1
  810bd4:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  810bd8:	e0bfff17 	ldw	r2,-4(fp)
  810bdc:	10800003 	ldbu	r2,0(r2)
  810be0:	10803fcc 	andi	r2,r2,255
  810be4:	1004c03a 	cmpne	r2,r2,zero
  810be8:	103ff51e 	bne	r2,zero,810bc0 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
  810bec:	e0bffe03 	ldbu	r2,-8(fp)
}
  810bf0:	e037883a 	mov	sp,fp
  810bf4:	df000017 	ldw	fp,0(sp)
  810bf8:	dec00104 	addi	sp,sp,4
  810bfc:	f800283a 	ret

00810c00 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  810c00:	defffa04 	addi	sp,sp,-24
  810c04:	dfc00515 	stw	ra,20(sp)
  810c08:	df000415 	stw	fp,16(sp)
  810c0c:	df000404 	addi	fp,sp,16
  810c10:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  810c14:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810c18:	0005303a 	rdctl	r2,status
  810c1c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810c20:	e0fffd17 	ldw	r3,-12(fp)
  810c24:	00bfff84 	movi	r2,-2
  810c28:	1884703a 	and	r2,r3,r2
  810c2c:	1001703a 	wrctl	status,r2
  
  return context;
  810c30:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  810c34:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
  810c38:	d0a71d17 	ldw	r2,-25484(gp)
  810c3c:	10800044 	addi	r2,r2,1
  810c40:	d0a71d15 	stw	r2,-25484(gp)
  810c44:	e0bffe17 	ldw	r2,-8(fp)
  810c48:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810c4c:	e0bffc17 	ldw	r2,-16(fp)
  810c50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  810c54:	08199e00 	call	8199e0 <OSTaskIdleHook>
    }
  810c58:	003fef06 	br	810c18 <OS_TaskIdle+0x18>

00810c5c <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  810c5c:	defffa04 	addi	sp,sp,-24
  810c60:	dfc00515 	stw	ra,20(sp)
  810c64:	df000415 	stw	fp,16(sp)
  810c68:	df000404 	addi	fp,sp,16
  810c6c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  810c70:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  810c74:	00000206 	br	810c80 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  810c78:	01003204 	movi	r4,200
  810c7c:	0816cdc0 	call	816cdc <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  810c80:	d0a72e03 	ldbu	r2,-25416(gp)
  810c84:	10803fcc 	andi	r2,r2,255
  810c88:	1005003a 	cmpeq	r2,r2,zero
  810c8c:	103ffa1e 	bne	r2,zero,810c78 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  810c90:	d1272217 	ldw	r4,-25464(gp)
  810c94:	01401904 	movi	r5,100
  810c98:	080534c0 	call	80534c <__udivsi3>
  810c9c:	d0a72215 	stw	r2,-25464(gp)
    if (OSIdleCtrMax == 0L) {
  810ca0:	d0a72217 	ldw	r2,-25464(gp)
  810ca4:	1004c03a 	cmpne	r2,r2,zero
  810ca8:	1000031e 	bne	r2,zero,810cb8 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
  810cac:	d0272405 	stb	zero,-25456(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  810cb0:	01003fc4 	movi	r4,255
  810cb4:	08168f00 	call	8168f0 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810cb8:	0005303a 	rdctl	r2,status
  810cbc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810cc0:	e0fffd17 	ldw	r3,-12(fp)
  810cc4:	00bfff84 	movi	r2,-2
  810cc8:	1884703a 	and	r2,r3,r2
  810ccc:	1001703a 	wrctl	status,r2
  
  return context;
  810cd0:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  810cd4:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  810cd8:	d0a71d17 	ldw	r2,-25484(gp)
  810cdc:	d0a72f15 	stw	r2,-25412(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  810ce0:	d0271d15 	stw	zero,-25484(gp)
  810ce4:	e0bffe17 	ldw	r2,-8(fp)
  810ce8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810cec:	e0bffc17 	ldw	r2,-16(fp)
  810cf0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  810cf4:	d1272f17 	ldw	r4,-25412(gp)
  810cf8:	d1672217 	ldw	r5,-25464(gp)
  810cfc:	080534c0 	call	80534c <__udivsi3>
  810d00:	1007883a 	mov	r3,r2
  810d04:	00801904 	movi	r2,100
  810d08:	10c5c83a 	sub	r2,r2,r3
  810d0c:	d0a72405 	stb	r2,-25456(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  810d10:	08199700 	call	819970 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  810d14:	0810d240 	call	810d24 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  810d18:	01001904 	movi	r4,100
  810d1c:	0816cdc0 	call	816cdc <OSTimeDly>
    }
  810d20:	003fe506 	br	810cb8 <OS_TaskStat+0x5c>

00810d24 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  810d24:	defffa04 	addi	sp,sp,-24
  810d28:	dfc00515 	stw	ra,20(sp)
  810d2c:	df000415 	stw	fp,16(sp)
  810d30:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  810d34:	e03ffc05 	stb	zero,-16(fp)
  810d38:	00002406 	br	810dcc <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  810d3c:	e13ffc03 	ldbu	r4,-16(fp)
  810d40:	e17ffe04 	addi	r5,fp,-8
  810d44:	08166f40 	call	8166f4 <OSTaskStkChk>
  810d48:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  810d4c:	e0bffc43 	ldbu	r2,-15(fp)
  810d50:	1004c03a 	cmpne	r2,r2,zero
  810d54:	10001a1e 	bne	r2,zero,810dc0 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  810d58:	e0bffc03 	ldbu	r2,-16(fp)
  810d5c:	00c020b4 	movhi	r3,130
  810d60:	18d44304 	addi	r3,r3,20748
  810d64:	1085883a 	add	r2,r2,r2
  810d68:	1085883a 	add	r2,r2,r2
  810d6c:	10c5883a 	add	r2,r2,r3
  810d70:	10800017 	ldw	r2,0(r2)
  810d74:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  810d78:	e0bffd17 	ldw	r2,-12(fp)
  810d7c:	1005003a 	cmpeq	r2,r2,zero
  810d80:	10000f1e 	bne	r2,zero,810dc0 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  810d84:	e0bffd17 	ldw	r2,-12(fp)
  810d88:	10800060 	cmpeqi	r2,r2,1
  810d8c:	10000c1e 	bne	r2,zero,810dc0 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  810d90:	e0bffd17 	ldw	r2,-12(fp)
  810d94:	10c00217 	ldw	r3,8(r2)
  810d98:	e0bffd17 	ldw	r2,-12(fp)
  810d9c:	10800317 	ldw	r2,12(r2)
  810da0:	1085883a 	add	r2,r2,r2
  810da4:	1085883a 	add	r2,r2,r2
  810da8:	1887883a 	add	r3,r3,r2
  810dac:	e0bffd17 	ldw	r2,-12(fp)
  810db0:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  810db4:	e0ffff17 	ldw	r3,-4(fp)
  810db8:	e0bffd17 	ldw	r2,-12(fp)
  810dbc:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  810dc0:	e0bffc03 	ldbu	r2,-16(fp)
  810dc4:	10800044 	addi	r2,r2,1
  810dc8:	e0bffc05 	stb	r2,-16(fp)
  810dcc:	e0bffc03 	ldbu	r2,-16(fp)
  810dd0:	10800570 	cmpltui	r2,r2,21
  810dd4:	103fd91e 	bne	r2,zero,810d3c <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
  810dd8:	e037883a 	mov	sp,fp
  810ddc:	dfc00117 	ldw	ra,4(sp)
  810de0:	df000017 	ldw	fp,0(sp)
  810de4:	dec00204 	addi	sp,sp,8
  810de8:	f800283a 	ret

00810dec <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  810dec:	defff104 	addi	sp,sp,-60
  810df0:	dfc00e15 	stw	ra,56(sp)
  810df4:	df000d15 	stw	fp,52(sp)
  810df8:	df000d04 	addi	fp,sp,52
  810dfc:	e17ffb15 	stw	r5,-20(fp)
  810e00:	e1bffc15 	stw	r6,-16(fp)
  810e04:	e0800417 	ldw	r2,16(fp)
  810e08:	e13ffa05 	stb	r4,-24(fp)
  810e0c:	e1fffd0d 	sth	r7,-12(fp)
  810e10:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  810e14:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810e18:	0005303a 	rdctl	r2,status
  810e1c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810e20:	e0fff717 	ldw	r3,-36(fp)
  810e24:	00bfff84 	movi	r2,-2
  810e28:	1884703a 	and	r2,r3,r2
  810e2c:	1001703a 	wrctl	status,r2
  
  return context;
  810e30:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
  810e34:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  810e38:	d0a72317 	ldw	r2,-25460(gp)
  810e3c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
  810e40:	e0bff917 	ldw	r2,-28(fp)
  810e44:	1005003a 	cmpeq	r2,r2,zero
  810e48:	1000941e 	bne	r2,zero,81109c <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  810e4c:	e0bff917 	ldw	r2,-28(fp)
  810e50:	10800517 	ldw	r2,20(r2)
  810e54:	d0a72315 	stw	r2,-25460(gp)
  810e58:	e0bff817 	ldw	r2,-32(fp)
  810e5c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810e60:	e0bff617 	ldw	r2,-40(fp)
  810e64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  810e68:	e0fff917 	ldw	r3,-28(fp)
  810e6c:	e0bffb17 	ldw	r2,-20(fp)
  810e70:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  810e74:	e0fff917 	ldw	r3,-28(fp)
  810e78:	e0bffa03 	ldbu	r2,-24(fp)
  810e7c:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  810e80:	e0bff917 	ldw	r2,-28(fp)
  810e84:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  810e88:	e0bff917 	ldw	r2,-28(fp)
  810e8c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  810e90:	e0bff917 	ldw	r2,-28(fp)
  810e94:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  810e98:	e0fff917 	ldw	r3,-28(fp)
  810e9c:	e0800317 	ldw	r2,12(fp)
  810ea0:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  810ea4:	e0fff917 	ldw	r3,-28(fp)
  810ea8:	e0800217 	ldw	r2,8(fp)
  810eac:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  810eb0:	e0fff917 	ldw	r3,-28(fp)
  810eb4:	e0bffc17 	ldw	r2,-16(fp)
  810eb8:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  810ebc:	e0fff917 	ldw	r3,-28(fp)
  810ec0:	e0bffe0b 	ldhu	r2,-8(fp)
  810ec4:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  810ec8:	e0fff917 	ldw	r3,-28(fp)
  810ecc:	e0bffd0b 	ldhu	r2,-12(fp)
  810ed0:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  810ed4:	e0bff917 	ldw	r2,-28(fp)
  810ed8:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  810edc:	e0bffa03 	ldbu	r2,-24(fp)
  810ee0:	1004d0fa 	srli	r2,r2,3
  810ee4:	1007883a 	mov	r3,r2
  810ee8:	e0bff917 	ldw	r2,-28(fp)
  810eec:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  810ef0:	e0bffa03 	ldbu	r2,-24(fp)
  810ef4:	108001cc 	andi	r2,r2,7
  810ef8:	1007883a 	mov	r3,r2
  810efc:	e0bff917 	ldw	r2,-28(fp)
  810f00:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  810f04:	e0bff917 	ldw	r2,-28(fp)
  810f08:	10800d03 	ldbu	r2,52(r2)
  810f0c:	10c03fcc 	andi	r3,r2,255
  810f10:	00800044 	movi	r2,1
  810f14:	10c4983a 	sll	r2,r2,r3
  810f18:	1007883a 	mov	r3,r2
  810f1c:	e0bff917 	ldw	r2,-28(fp)
  810f20:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  810f24:	e0bff917 	ldw	r2,-28(fp)
  810f28:	10800cc3 	ldbu	r2,51(r2)
  810f2c:	10c03fcc 	andi	r3,r2,255
  810f30:	00800044 	movi	r2,1
  810f34:	10c4983a 	sll	r2,r2,r3
  810f38:	1007883a 	mov	r3,r2
  810f3c:	e0bff917 	ldw	r2,-28(fp)
  810f40:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  810f44:	e0bff917 	ldw	r2,-28(fp)
  810f48:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  810f4c:	e0bff917 	ldw	r2,-28(fp)
  810f50:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  810f54:	e0bff917 	ldw	r2,-28(fp)
  810f58:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  810f5c:	e0bff917 	ldw	r2,-28(fp)
  810f60:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  810f64:	e0bff917 	ldw	r2,-28(fp)
  810f68:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  810f6c:	e0bff917 	ldw	r2,-28(fp)
  810f70:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  810f74:	e0bff917 	ldw	r2,-28(fp)
  810f78:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  810f7c:	e0bff917 	ldw	r2,-28(fp)
  810f80:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  810f84:	e0bff917 	ldw	r2,-28(fp)
  810f88:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  810f8c:	e0fff917 	ldw	r3,-28(fp)
  810f90:	00800fc4 	movi	r2,63
  810f94:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  810f98:	e0bff917 	ldw	r2,-28(fp)
  810f9c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  810fa0:	e13ff917 	ldw	r4,-28(fp)
  810fa4:	08199fc0 	call	8199fc <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  810fa8:	e13ff917 	ldw	r4,-28(fp)
  810fac:	08199140 	call	819914 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810fb0:	0005303a 	rdctl	r2,status
  810fb4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810fb8:	e0fff517 	ldw	r3,-44(fp)
  810fbc:	00bfff84 	movi	r2,-2
  810fc0:	1884703a 	and	r2,r3,r2
  810fc4:	1001703a 	wrctl	status,r2
  
  return context;
  810fc8:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  810fcc:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
  810fd0:	e0bffa03 	ldbu	r2,-24(fp)
  810fd4:	00c020b4 	movhi	r3,130
  810fd8:	18d44304 	addi	r3,r3,20748
  810fdc:	1085883a 	add	r2,r2,r2
  810fe0:	1085883a 	add	r2,r2,r2
  810fe4:	10c7883a 	add	r3,r2,r3
  810fe8:	e0bff917 	ldw	r2,-28(fp)
  810fec:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  810ff0:	d0e71f17 	ldw	r3,-25476(gp)
  810ff4:	e0bff917 	ldw	r2,-28(fp)
  810ff8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  810ffc:	e0bff917 	ldw	r2,-28(fp)
  811000:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  811004:	d0a71f17 	ldw	r2,-25476(gp)
  811008:	1005003a 	cmpeq	r2,r2,zero
  81100c:	1000031e 	bne	r2,zero,81101c <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
  811010:	d0e71f17 	ldw	r3,-25476(gp)
  811014:	e0bff917 	ldw	r2,-28(fp)
  811018:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
  81101c:	e0bff917 	ldw	r2,-28(fp)
  811020:	d0a71f15 	stw	r2,-25476(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  811024:	e0bff917 	ldw	r2,-28(fp)
  811028:	10c00d83 	ldbu	r3,54(r2)
  81102c:	d0a72803 	ldbu	r2,-25440(gp)
  811030:	1884b03a 	or	r2,r3,r2
  811034:	d0a72805 	stb	r2,-25440(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  811038:	e0bff917 	ldw	r2,-28(fp)
  81103c:	10800d03 	ldbu	r2,52(r2)
  811040:	11003fcc 	andi	r4,r2,255
  811044:	e0bff917 	ldw	r2,-28(fp)
  811048:	10800d03 	ldbu	r2,52(r2)
  81104c:	10c03fcc 	andi	r3,r2,255
  811050:	d0a72844 	addi	r2,gp,-25439
  811054:	1885883a 	add	r2,r3,r2
  811058:	10c00003 	ldbu	r3,0(r2)
  81105c:	e0bff917 	ldw	r2,-28(fp)
  811060:	10800d43 	ldbu	r2,53(r2)
  811064:	1884b03a 	or	r2,r3,r2
  811068:	1007883a 	mov	r3,r2
  81106c:	d0a72844 	addi	r2,gp,-25439
  811070:	2085883a 	add	r2,r4,r2
  811074:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  811078:	d0a72443 	ldbu	r2,-25455(gp)
  81107c:	10800044 	addi	r2,r2,1
  811080:	d0a72445 	stb	r2,-25455(gp)
  811084:	e0bff817 	ldw	r2,-32(fp)
  811088:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81108c:	e0bff417 	ldw	r2,-48(fp)
  811090:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  811094:	e03fff15 	stw	zero,-4(fp)
  811098:	00000606 	br	8110b4 <OS_TCBInit+0x2c8>
  81109c:	e0bff817 	ldw	r2,-32(fp)
  8110a0:	e0bff315 	stw	r2,-52(fp)
  8110a4:	e0bff317 	ldw	r2,-52(fp)
  8110a8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  8110ac:	00801084 	movi	r2,66
  8110b0:	e0bfff15 	stw	r2,-4(fp)
  8110b4:	e0bfff17 	ldw	r2,-4(fp)
}
  8110b8:	e037883a 	mov	sp,fp
  8110bc:	dfc00117 	ldw	ra,4(sp)
  8110c0:	df000017 	ldw	fp,0(sp)
  8110c4:	dec00204 	addi	sp,sp,8
  8110c8:	f800283a 	ret

008110cc <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  8110cc:	defffe04 	addi	sp,sp,-8
  8110d0:	df000115 	stw	fp,4(sp)
  8110d4:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  8110d8:	d0a01004 	addi	r2,gp,-32704
  8110dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  8110e0:	d0a01104 	addi	r2,gp,-32700
  8110e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  8110e8:	d0a01284 	addi	r2,gp,-32694
  8110ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  8110f0:	d0a01304 	addi	r2,gp,-32692
  8110f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  8110f8:	d0a01204 	addi	r2,gp,-32696
  8110fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  811100:	d0a01384 	addi	r2,gp,-32690
  811104:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  811108:	d0a01404 	addi	r2,gp,-32688
  81110c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  811110:	d0a01484 	addi	r2,gp,-32686
  811114:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  811118:	d0a01504 	addi	r2,gp,-32684
  81111c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  811120:	d0a01584 	addi	r2,gp,-32682
  811124:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  811128:	d0a01604 	addi	r2,gp,-32680
  81112c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  811130:	d0a01684 	addi	r2,gp,-32678
  811134:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  811138:	d0a01704 	addi	r2,gp,-32676
  81113c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  811140:	d0a01784 	addi	r2,gp,-32674
  811144:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  811148:	d0a01804 	addi	r2,gp,-32672
  81114c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  811150:	d0a01884 	addi	r2,gp,-32670
  811154:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  811158:	d0a01904 	addi	r2,gp,-32668
  81115c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  811160:	d0a01984 	addi	r2,gp,-32666
  811164:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  811168:	d0a01a04 	addi	r2,gp,-32664
  81116c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  811170:	d0a01a84 	addi	r2,gp,-32662
  811174:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  811178:	d0a01b04 	addi	r2,gp,-32660
  81117c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  811180:	d0a01b84 	addi	r2,gp,-32658
  811184:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  811188:	d0a01c04 	addi	r2,gp,-32656
  81118c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  811190:	d0a01c84 	addi	r2,gp,-32654
  811194:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  811198:	d0a01d04 	addi	r2,gp,-32652
  81119c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  8111a0:	d0a01d84 	addi	r2,gp,-32650
  8111a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  8111a8:	d0a01e04 	addi	r2,gp,-32648
  8111ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  8111b0:	d0a01e84 	addi	r2,gp,-32646
  8111b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  8111b8:	d0a01f04 	addi	r2,gp,-32644
  8111bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  8111c0:	d0a01f84 	addi	r2,gp,-32642
  8111c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  8111c8:	d0a02004 	addi	r2,gp,-32640
  8111cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  8111d0:	d0a02084 	addi	r2,gp,-32638
  8111d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  8111d8:	d0a02104 	addi	r2,gp,-32636
  8111dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  8111e0:	d0a02184 	addi	r2,gp,-32634
  8111e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  8111e8:	d0a02204 	addi	r2,gp,-32632
  8111ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  8111f0:	d0a02284 	addi	r2,gp,-32630
  8111f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  8111f8:	d0a02304 	addi	r2,gp,-32628
  8111fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  811200:	d0a02384 	addi	r2,gp,-32626
  811204:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  811208:	d0a02404 	addi	r2,gp,-32624
  81120c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  811210:	d0a02484 	addi	r2,gp,-32622
  811214:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  811218:	d0a02504 	addi	r2,gp,-32620
  81121c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  811220:	d0a02584 	addi	r2,gp,-32618
  811224:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  811228:	d0a02604 	addi	r2,gp,-32616
  81122c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  811230:	d0a02684 	addi	r2,gp,-32614
  811234:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  811238:	d0a02704 	addi	r2,gp,-32612
  81123c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  811240:	d0a02c04 	addi	r2,gp,-32592
  811244:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  811248:	e037883a 	mov	sp,fp
  81124c:	df000017 	ldw	fp,0(sp)
  811250:	dec00104 	addi	sp,sp,4
  811254:	f800283a 	ret

00811258 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  811258:	defff104 	addi	sp,sp,-60
  81125c:	df000e15 	stw	fp,56(sp)
  811260:	df000e04 	addi	fp,sp,56
  811264:	e13ffa15 	stw	r4,-24(fp)
  811268:	e1fffd15 	stw	r7,-12(fp)
  81126c:	e17ffb0d 	sth	r5,-20(fp)
  811270:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  811274:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  811278:	e0bffd17 	ldw	r2,-12(fp)
  81127c:	1004c03a 	cmpne	r2,r2,zero
  811280:	1000021e 	bne	r2,zero,81128c <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
  811284:	e03fff15 	stw	zero,-4(fp)
  811288:	0000bb06 	br	811578 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  81128c:	e0bffa17 	ldw	r2,-24(fp)
  811290:	1004c03a 	cmpne	r2,r2,zero
  811294:	1000051e 	bne	r2,zero,8112ac <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  811298:	e0fffd17 	ldw	r3,-12(fp)
  81129c:	00801b84 	movi	r2,110
  8112a0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8112a4:	e03fff15 	stw	zero,-4(fp)
  8112a8:	0000b306 	br	811578 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  8112ac:	e0bffa17 	ldw	r2,-24(fp)
  8112b0:	10800003 	ldbu	r2,0(r2)
  8112b4:	10803fcc 	andi	r2,r2,255
  8112b8:	10800160 	cmpeqi	r2,r2,5
  8112bc:	1000051e 	bne	r2,zero,8112d4 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  8112c0:	e0fffd17 	ldw	r3,-12(fp)
  8112c4:	00800044 	movi	r2,1
  8112c8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8112cc:	e03fff15 	stw	zero,-4(fp)
  8112d0:	0000a906 	br	811578 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  8112d4:	e0fffc03 	ldbu	r3,-16(fp)
  8112d8:	00bfe004 	movi	r2,-128
  8112dc:	1884703a 	and	r2,r3,r2
  8112e0:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  8112e4:	e0bff943 	ldbu	r2,-27(fp)
  8112e8:	1005003a 	cmpeq	r2,r2,zero
  8112ec:	1000061e 	bne	r2,zero,811308 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
  8112f0:	e0bffc03 	ldbu	r2,-16(fp)
  8112f4:	10801fcc 	andi	r2,r2,127
  8112f8:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
  8112fc:	00800044 	movi	r2,1
  811300:	e0bff905 	stb	r2,-28(fp)
  811304:	00000106 	br	81130c <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
  811308:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  81130c:	e0bffd17 	ldw	r2,-12(fp)
  811310:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811314:	0005303a 	rdctl	r2,status
  811318:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81131c:	e0fff717 	ldw	r3,-36(fp)
  811320:	00bfff84 	movi	r2,-2
  811324:	1884703a 	and	r2,r3,r2
  811328:	1001703a 	wrctl	status,r2
  
  return context;
  81132c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  811330:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
  811334:	e0bffc03 	ldbu	r2,-16(fp)
  811338:	e0bffe15 	stw	r2,-8(fp)
  81133c:	e0fffe17 	ldw	r3,-8(fp)
  811340:	18800060 	cmpeqi	r2,r3,1
  811344:	1000651e 	bne	r2,zero,8114dc <OSFlagAccept+0x284>
  811348:	e0fffe17 	ldw	r3,-8(fp)
  81134c:	18800088 	cmpgei	r2,r3,2
  811350:	1000041e 	bne	r2,zero,811364 <OSFlagAccept+0x10c>
  811354:	e0fffe17 	ldw	r3,-8(fp)
  811358:	1805003a 	cmpeq	r2,r3,zero
  81135c:	1000421e 	bne	r2,zero,811468 <OSFlagAccept+0x210>
  811360:	00007b06 	br	811550 <OSFlagAccept+0x2f8>
  811364:	e0fffe17 	ldw	r3,-8(fp)
  811368:	188000a0 	cmpeqi	r2,r3,2
  81136c:	1000041e 	bne	r2,zero,811380 <OSFlagAccept+0x128>
  811370:	e0fffe17 	ldw	r3,-8(fp)
  811374:	188000e0 	cmpeqi	r2,r3,3
  811378:	10001e1e 	bne	r2,zero,8113f4 <OSFlagAccept+0x19c>
  81137c:	00007406 	br	811550 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  811380:	e0bffa17 	ldw	r2,-24(fp)
  811384:	10c0020b 	ldhu	r3,8(r2)
  811388:	e0bffb0b 	ldhu	r2,-20(fp)
  81138c:	1884703a 	and	r2,r3,r2
  811390:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  811394:	e0fff98b 	ldhu	r3,-26(fp)
  811398:	e0bffb0b 	ldhu	r2,-20(fp)
  81139c:	18800d1e 	bne	r3,r2,8113d4 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8113a0:	e0bff903 	ldbu	r2,-28(fp)
  8113a4:	10800058 	cmpnei	r2,r2,1
  8113a8:	10000d1e 	bne	r2,zero,8113e0 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  8113ac:	e0bffa17 	ldw	r2,-24(fp)
  8113b0:	1080020b 	ldhu	r2,8(r2)
  8113b4:	1007883a 	mov	r3,r2
  8113b8:	e0bff98b 	ldhu	r2,-26(fp)
  8113bc:	0084303a 	nor	r2,zero,r2
  8113c0:	1884703a 	and	r2,r3,r2
  8113c4:	1007883a 	mov	r3,r2
  8113c8:	e0bffa17 	ldw	r2,-24(fp)
  8113cc:	10c0020d 	sth	r3,8(r2)
  8113d0:	00000306 	br	8113e0 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  8113d4:	e0fffd17 	ldw	r3,-12(fp)
  8113d8:	00801c04 	movi	r2,112
  8113dc:	18800005 	stb	r2,0(r3)
  8113e0:	e0bff817 	ldw	r2,-32(fp)
  8113e4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8113e8:	e0bff617 	ldw	r2,-40(fp)
  8113ec:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  8113f0:	00005f06 	br	811570 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  8113f4:	e0bffa17 	ldw	r2,-24(fp)
  8113f8:	10c0020b 	ldhu	r3,8(r2)
  8113fc:	e0bffb0b 	ldhu	r2,-20(fp)
  811400:	1884703a 	and	r2,r3,r2
  811404:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  811408:	e0bff98b 	ldhu	r2,-26(fp)
  81140c:	1005003a 	cmpeq	r2,r2,zero
  811410:	10000d1e 	bne	r2,zero,811448 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  811414:	e0bff903 	ldbu	r2,-28(fp)
  811418:	10800058 	cmpnei	r2,r2,1
  81141c:	10000d1e 	bne	r2,zero,811454 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  811420:	e0bffa17 	ldw	r2,-24(fp)
  811424:	1080020b 	ldhu	r2,8(r2)
  811428:	1007883a 	mov	r3,r2
  81142c:	e0bff98b 	ldhu	r2,-26(fp)
  811430:	0084303a 	nor	r2,zero,r2
  811434:	1884703a 	and	r2,r3,r2
  811438:	1007883a 	mov	r3,r2
  81143c:	e0bffa17 	ldw	r2,-24(fp)
  811440:	10c0020d 	sth	r3,8(r2)
  811444:	00000306 	br	811454 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  811448:	e0fffd17 	ldw	r3,-12(fp)
  81144c:	00801c04 	movi	r2,112
  811450:	18800005 	stb	r2,0(r3)
  811454:	e0bff817 	ldw	r2,-32(fp)
  811458:	e0bff515 	stw	r2,-44(fp)
  81145c:	e0bff517 	ldw	r2,-44(fp)
  811460:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  811464:	00004206 	br	811570 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  811468:	e0bffa17 	ldw	r2,-24(fp)
  81146c:	1080020b 	ldhu	r2,8(r2)
  811470:	0084303a 	nor	r2,zero,r2
  811474:	1007883a 	mov	r3,r2
  811478:	e0bffb0b 	ldhu	r2,-20(fp)
  81147c:	1884703a 	and	r2,r3,r2
  811480:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  811484:	e0fff98b 	ldhu	r3,-26(fp)
  811488:	e0bffb0b 	ldhu	r2,-20(fp)
  81148c:	18800b1e 	bne	r3,r2,8114bc <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  811490:	e0bff903 	ldbu	r2,-28(fp)
  811494:	10800058 	cmpnei	r2,r2,1
  811498:	10000b1e 	bne	r2,zero,8114c8 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  81149c:	e0bffa17 	ldw	r2,-24(fp)
  8114a0:	10c0020b 	ldhu	r3,8(r2)
  8114a4:	e0bff98b 	ldhu	r2,-26(fp)
  8114a8:	1884b03a 	or	r2,r3,r2
  8114ac:	1007883a 	mov	r3,r2
  8114b0:	e0bffa17 	ldw	r2,-24(fp)
  8114b4:	10c0020d 	sth	r3,8(r2)
  8114b8:	00000306 	br	8114c8 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  8114bc:	e0fffd17 	ldw	r3,-12(fp)
  8114c0:	00801c04 	movi	r2,112
  8114c4:	18800005 	stb	r2,0(r3)
  8114c8:	e0bff817 	ldw	r2,-32(fp)
  8114cc:	e0bff415 	stw	r2,-48(fp)
  8114d0:	e0bff417 	ldw	r2,-48(fp)
  8114d4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  8114d8:	00002506 	br	811570 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  8114dc:	e0bffa17 	ldw	r2,-24(fp)
  8114e0:	1080020b 	ldhu	r2,8(r2)
  8114e4:	0084303a 	nor	r2,zero,r2
  8114e8:	1007883a 	mov	r3,r2
  8114ec:	e0bffb0b 	ldhu	r2,-20(fp)
  8114f0:	1884703a 	and	r2,r3,r2
  8114f4:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  8114f8:	e0bff98b 	ldhu	r2,-26(fp)
  8114fc:	1005003a 	cmpeq	r2,r2,zero
  811500:	10000b1e 	bne	r2,zero,811530 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  811504:	e0bff903 	ldbu	r2,-28(fp)
  811508:	10800058 	cmpnei	r2,r2,1
  81150c:	10000b1e 	bne	r2,zero,81153c <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  811510:	e0bffa17 	ldw	r2,-24(fp)
  811514:	10c0020b 	ldhu	r3,8(r2)
  811518:	e0bff98b 	ldhu	r2,-26(fp)
  81151c:	1884b03a 	or	r2,r3,r2
  811520:	1007883a 	mov	r3,r2
  811524:	e0bffa17 	ldw	r2,-24(fp)
  811528:	10c0020d 	sth	r3,8(r2)
  81152c:	00000306 	br	81153c <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  811530:	e0fffd17 	ldw	r3,-12(fp)
  811534:	00801c04 	movi	r2,112
  811538:	18800005 	stb	r2,0(r3)
  81153c:	e0bff817 	ldw	r2,-32(fp)
  811540:	e0bff315 	stw	r2,-52(fp)
  811544:	e0bff317 	ldw	r2,-52(fp)
  811548:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  81154c:	00000806 	br	811570 <OSFlagAccept+0x318>
  811550:	e0bff817 	ldw	r2,-32(fp)
  811554:	e0bff215 	stw	r2,-56(fp)
  811558:	e0bff217 	ldw	r2,-56(fp)
  81155c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  811560:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  811564:	e0fffd17 	ldw	r3,-12(fp)
  811568:	00801bc4 	movi	r2,111
  81156c:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
  811570:	e0bff98b 	ldhu	r2,-26(fp)
  811574:	e0bfff15 	stw	r2,-4(fp)
  811578:	e0bfff17 	ldw	r2,-4(fp)
}
  81157c:	e037883a 	mov	sp,fp
  811580:	df000017 	ldw	fp,0(sp)
  811584:	dec00104 	addi	sp,sp,4
  811588:	f800283a 	ret

0081158c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  81158c:	defff704 	addi	sp,sp,-36
  811590:	df000815 	stw	fp,32(sp)
  811594:	df000804 	addi	fp,sp,32
  811598:	e17ffe15 	stw	r5,-8(fp)
  81159c:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  8115a0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  8115a4:	e0bffe17 	ldw	r2,-8(fp)
  8115a8:	1004c03a 	cmpne	r2,r2,zero
  8115ac:	1000021e 	bne	r2,zero,8115b8 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  8115b0:	e03fff15 	stw	zero,-4(fp)
  8115b4:	00003f06 	br	8116b4 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  8115b8:	008020b4 	movhi	r2,130
  8115bc:	10b7bc04 	addi	r2,r2,-8464
  8115c0:	10800003 	ldbu	r2,0(r2)
  8115c4:	10803fcc 	andi	r2,r2,255
  8115c8:	1005003a 	cmpeq	r2,r2,zero
  8115cc:	1000051e 	bne	r2,zero,8115e4 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  8115d0:	e0fffe17 	ldw	r3,-8(fp)
  8115d4:	00800404 	movi	r2,16
  8115d8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
  8115dc:	e03fff15 	stw	zero,-4(fp)
  8115e0:	00003406 	br	8116b4 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8115e4:	0005303a 	rdctl	r2,status
  8115e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8115ec:	e0fffa17 	ldw	r3,-24(fp)
  8115f0:	00bfff84 	movi	r2,-2
  8115f4:	1884703a 	and	r2,r3,r2
  8115f8:	1001703a 	wrctl	status,r2
  
  return context;
  8115fc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  811600:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  811604:	008020b4 	movhi	r2,130
  811608:	10b7bf04 	addi	r2,r2,-8452
  81160c:	10800017 	ldw	r2,0(r2)
  811610:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  811614:	e0bffc17 	ldw	r2,-16(fp)
  811618:	1005003a 	cmpeq	r2,r2,zero
  81161c:	10001c1e 	bne	r2,zero,811690 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  811620:	008020b4 	movhi	r2,130
  811624:	10b7bf04 	addi	r2,r2,-8452
  811628:	10800017 	ldw	r2,0(r2)
  81162c:	10800117 	ldw	r2,4(r2)
  811630:	1007883a 	mov	r3,r2
  811634:	008020b4 	movhi	r2,130
  811638:	10b7bf04 	addi	r2,r2,-8452
  81163c:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  811640:	e0fffc17 	ldw	r3,-16(fp)
  811644:	00800144 	movi	r2,5
  811648:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  81164c:	e0fffc17 	ldw	r3,-16(fp)
  811650:	e0bffd0b 	ldhu	r2,-12(fp)
  811654:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  811658:	e0bffc17 	ldw	r2,-16(fp)
  81165c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  811660:	e0fffc17 	ldw	r3,-16(fp)
  811664:	00800fc4 	movi	r2,63
  811668:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  81166c:	e0bffc17 	ldw	r2,-16(fp)
  811670:	100002c5 	stb	zero,11(r2)
  811674:	e0bffb17 	ldw	r2,-20(fp)
  811678:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81167c:	e0bff917 	ldw	r2,-28(fp)
  811680:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  811684:	e0bffe17 	ldw	r2,-8(fp)
  811688:	10000005 	stb	zero,0(r2)
  81168c:	00000706 	br	8116ac <OSFlagCreate+0x120>
  811690:	e0bffb17 	ldw	r2,-20(fp)
  811694:	e0bff815 	stw	r2,-32(fp)
  811698:	e0bff817 	ldw	r2,-32(fp)
  81169c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  8116a0:	e0fffe17 	ldw	r3,-8(fp)
  8116a4:	00801c84 	movi	r2,114
  8116a8:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  8116ac:	e0bffc17 	ldw	r2,-16(fp)
  8116b0:	e0bfff15 	stw	r2,-4(fp)
  8116b4:	e0bfff17 	ldw	r2,-4(fp)
}
  8116b8:	e037883a 	mov	sp,fp
  8116bc:	df000017 	ldw	fp,0(sp)
  8116c0:	dec00104 	addi	sp,sp,4
  8116c4:	f800283a 	ret

008116c8 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  8116c8:	defff004 	addi	sp,sp,-64
  8116cc:	dfc00f15 	stw	ra,60(sp)
  8116d0:	df000e15 	stw	fp,56(sp)
  8116d4:	df000e04 	addi	fp,sp,56
  8116d8:	e13ffb15 	stw	r4,-20(fp)
  8116dc:	e1bffd15 	stw	r6,-12(fp)
  8116e0:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  8116e4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8116e8:	e0bffd17 	ldw	r2,-12(fp)
  8116ec:	1004c03a 	cmpne	r2,r2,zero
  8116f0:	1000031e 	bne	r2,zero,811700 <OSFlagDel+0x38>
        return (pgrp);
  8116f4:	e0bffb17 	ldw	r2,-20(fp)
  8116f8:	e0bfff15 	stw	r2,-4(fp)
  8116fc:	00009606 	br	811958 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  811700:	e0bffb17 	ldw	r2,-20(fp)
  811704:	1004c03a 	cmpne	r2,r2,zero
  811708:	1000061e 	bne	r2,zero,811724 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  81170c:	e0fffd17 	ldw	r3,-12(fp)
  811710:	00801b84 	movi	r2,110
  811714:	18800005 	stb	r2,0(r3)
        return (pgrp);
  811718:	e0fffb17 	ldw	r3,-20(fp)
  81171c:	e0ffff15 	stw	r3,-4(fp)
  811720:	00008d06 	br	811958 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  811724:	008020b4 	movhi	r2,130
  811728:	10b7bc04 	addi	r2,r2,-8464
  81172c:	10800003 	ldbu	r2,0(r2)
  811730:	10803fcc 	andi	r2,r2,255
  811734:	1005003a 	cmpeq	r2,r2,zero
  811738:	1000061e 	bne	r2,zero,811754 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  81173c:	e0fffd17 	ldw	r3,-12(fp)
  811740:	008003c4 	movi	r2,15
  811744:	18800005 	stb	r2,0(r3)
        return (pgrp);
  811748:	e0bffb17 	ldw	r2,-20(fp)
  81174c:	e0bfff15 	stw	r2,-4(fp)
  811750:	00008106 	br	811958 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  811754:	e0bffb17 	ldw	r2,-20(fp)
  811758:	10800003 	ldbu	r2,0(r2)
  81175c:	10803fcc 	andi	r2,r2,255
  811760:	10800160 	cmpeqi	r2,r2,5
  811764:	1000061e 	bne	r2,zero,811780 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
  811768:	e0fffd17 	ldw	r3,-12(fp)
  81176c:	00800044 	movi	r2,1
  811770:	18800005 	stb	r2,0(r3)
        return (pgrp);
  811774:	e0fffb17 	ldw	r3,-20(fp)
  811778:	e0ffff15 	stw	r3,-4(fp)
  81177c:	00007606 	br	811958 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811780:	0005303a 	rdctl	r2,status
  811784:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811788:	e0fff617 	ldw	r3,-40(fp)
  81178c:	00bfff84 	movi	r2,-2
  811790:	1884703a 	and	r2,r3,r2
  811794:	1001703a 	wrctl	status,r2
  
  return context;
  811798:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  81179c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  8117a0:	e0bffb17 	ldw	r2,-20(fp)
  8117a4:	10800117 	ldw	r2,4(r2)
  8117a8:	1005003a 	cmpeq	r2,r2,zero
  8117ac:	1000031e 	bne	r2,zero,8117bc <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  8117b0:	00800044 	movi	r2,1
  8117b4:	e0bffa05 	stb	r2,-24(fp)
  8117b8:	00000106 	br	8117c0 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  8117bc:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  8117c0:	e0bffc03 	ldbu	r2,-16(fp)
  8117c4:	e0bffe15 	stw	r2,-8(fp)
  8117c8:	e0fffe17 	ldw	r3,-8(fp)
  8117cc:	1805003a 	cmpeq	r2,r3,zero
  8117d0:	1000041e 	bne	r2,zero,8117e4 <OSFlagDel+0x11c>
  8117d4:	e0fffe17 	ldw	r3,-8(fp)
  8117d8:	18800060 	cmpeqi	r2,r3,1
  8117dc:	1000281e 	bne	r2,zero,811880 <OSFlagDel+0x1b8>
  8117e0:	00005206 	br	81192c <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  8117e4:	e0bffa03 	ldbu	r2,-24(fp)
  8117e8:	1004c03a 	cmpne	r2,r2,zero
  8117ec:	10001a1e 	bne	r2,zero,811858 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  8117f0:	e0fffb17 	ldw	r3,-20(fp)
  8117f4:	00800fc4 	movi	r2,63
  8117f8:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  8117fc:	e0bffb17 	ldw	r2,-20(fp)
  811800:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  811804:	e0bffb17 	ldw	r2,-20(fp)
  811808:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  81180c:	008020b4 	movhi	r2,130
  811810:	10b7bf04 	addi	r2,r2,-8452
  811814:	10c00017 	ldw	r3,0(r2)
  811818:	e0bffb17 	ldw	r2,-20(fp)
  81181c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  811820:	e0bffb17 	ldw	r2,-20(fp)
  811824:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  811828:	00c020b4 	movhi	r3,130
  81182c:	18f7bf04 	addi	r3,r3,-8452
  811830:	e0bffb17 	ldw	r2,-20(fp)
  811834:	18800015 	stw	r2,0(r3)
  811838:	e0bff717 	ldw	r2,-36(fp)
  81183c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811840:	e0bff517 	ldw	r2,-44(fp)
  811844:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  811848:	e0bffd17 	ldw	r2,-12(fp)
  81184c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  811850:	e03ff815 	stw	zero,-32(fp)
  811854:	00003e06 	br	811950 <OSFlagDel+0x288>
  811858:	e0bff717 	ldw	r2,-36(fp)
  81185c:	e0bff415 	stw	r2,-48(fp)
  811860:	e0bff417 	ldw	r2,-48(fp)
  811864:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  811868:	e0fffd17 	ldw	r3,-12(fp)
  81186c:	00801244 	movi	r2,73
  811870:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
  811874:	e0bffb17 	ldw	r2,-20(fp)
  811878:	e0bff815 	stw	r2,-32(fp)
             }
             break;
  81187c:	00003406 	br	811950 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  811880:	e0bffb17 	ldw	r2,-20(fp)
  811884:	10800117 	ldw	r2,4(r2)
  811888:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  81188c:	00000606 	br	8118a8 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  811890:	e13ff917 	ldw	r4,-28(fp)
  811894:	000b883a 	mov	r5,zero
  811898:	08129d80 	call	8129d8 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  81189c:	e0bff917 	ldw	r2,-28(fp)
  8118a0:	10800017 	ldw	r2,0(r2)
  8118a4:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  8118a8:	e0bff917 	ldw	r2,-28(fp)
  8118ac:	1004c03a 	cmpne	r2,r2,zero
  8118b0:	103ff71e 	bne	r2,zero,811890 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  8118b4:	e0fffb17 	ldw	r3,-20(fp)
  8118b8:	00800fc4 	movi	r2,63
  8118bc:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  8118c0:	e0bffb17 	ldw	r2,-20(fp)
  8118c4:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  8118c8:	e0bffb17 	ldw	r2,-20(fp)
  8118cc:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  8118d0:	008020b4 	movhi	r2,130
  8118d4:	10b7bf04 	addi	r2,r2,-8452
  8118d8:	10c00017 	ldw	r3,0(r2)
  8118dc:	e0bffb17 	ldw	r2,-20(fp)
  8118e0:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  8118e4:	e0bffb17 	ldw	r2,-20(fp)
  8118e8:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  8118ec:	00c020b4 	movhi	r3,130
  8118f0:	18f7bf04 	addi	r3,r3,-8452
  8118f4:	e0bffb17 	ldw	r2,-20(fp)
  8118f8:	18800015 	stw	r2,0(r3)
  8118fc:	e0bff717 	ldw	r2,-36(fp)
  811900:	e0bff315 	stw	r2,-52(fp)
  811904:	e0bff317 	ldw	r2,-52(fp)
  811908:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  81190c:	e0bffa03 	ldbu	r2,-24(fp)
  811910:	10800058 	cmpnei	r2,r2,1
  811914:	1000011e 	bne	r2,zero,81191c <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  811918:	08109e40 	call	8109e4 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  81191c:	e0bffd17 	ldw	r2,-12(fp)
  811920:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  811924:	e03ff815 	stw	zero,-32(fp)
             break;
  811928:	00000906 	br	811950 <OSFlagDel+0x288>
  81192c:	e0bff717 	ldw	r2,-36(fp)
  811930:	e0bff215 	stw	r2,-56(fp)
  811934:	e0bff217 	ldw	r2,-56(fp)
  811938:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  81193c:	e0fffd17 	ldw	r3,-12(fp)
  811940:	008001c4 	movi	r2,7
  811944:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
  811948:	e0bffb17 	ldw	r2,-20(fp)
  81194c:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
  811950:	e0bff817 	ldw	r2,-32(fp)
  811954:	e0bfff15 	stw	r2,-4(fp)
  811958:	e0bfff17 	ldw	r2,-4(fp)
}
  81195c:	e037883a 	mov	sp,fp
  811960:	dfc00117 	ldw	ra,4(sp)
  811964:	df000017 	ldw	fp,0(sp)
  811968:	dec00204 	addi	sp,sp,8
  81196c:	f800283a 	ret

00811970 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  811970:	defff504 	addi	sp,sp,-44
  811974:	dfc00a15 	stw	ra,40(sp)
  811978:	df000915 	stw	fp,36(sp)
  81197c:	df000904 	addi	fp,sp,36
  811980:	e13ffc15 	stw	r4,-16(fp)
  811984:	e17ffd15 	stw	r5,-12(fp)
  811988:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81198c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  811990:	e0bffe17 	ldw	r2,-8(fp)
  811994:	1004c03a 	cmpne	r2,r2,zero
  811998:	1000021e 	bne	r2,zero,8119a4 <OSFlagNameGet+0x34>
        return (0);
  81199c:	e03fff15 	stw	zero,-4(fp)
  8119a0:	00003e06 	br	811a9c <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  8119a4:	e0bffc17 	ldw	r2,-16(fp)
  8119a8:	1004c03a 	cmpne	r2,r2,zero
  8119ac:	1000051e 	bne	r2,zero,8119c4 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  8119b0:	e0fffe17 	ldw	r3,-8(fp)
  8119b4:	00801b84 	movi	r2,110
  8119b8:	18800005 	stb	r2,0(r3)
        return (0);
  8119bc:	e03fff15 	stw	zero,-4(fp)
  8119c0:	00003606 	br	811a9c <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  8119c4:	e0bffd17 	ldw	r2,-12(fp)
  8119c8:	1004c03a 	cmpne	r2,r2,zero
  8119cc:	1000051e 	bne	r2,zero,8119e4 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  8119d0:	e0fffe17 	ldw	r3,-8(fp)
  8119d4:	00800304 	movi	r2,12
  8119d8:	18800005 	stb	r2,0(r3)
        return (0);
  8119dc:	e03fff15 	stw	zero,-4(fp)
  8119e0:	00002e06 	br	811a9c <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8119e4:	008020b4 	movhi	r2,130
  8119e8:	10b7bc04 	addi	r2,r2,-8464
  8119ec:	10800003 	ldbu	r2,0(r2)
  8119f0:	10803fcc 	andi	r2,r2,255
  8119f4:	1005003a 	cmpeq	r2,r2,zero
  8119f8:	1000051e 	bne	r2,zero,811a10 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  8119fc:	e0fffe17 	ldw	r3,-8(fp)
  811a00:	00800444 	movi	r2,17
  811a04:	18800005 	stb	r2,0(r3)
        return (0);
  811a08:	e03fff15 	stw	zero,-4(fp)
  811a0c:	00002306 	br	811a9c <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811a10:	0005303a 	rdctl	r2,status
  811a14:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811a18:	e0fff917 	ldw	r3,-28(fp)
  811a1c:	00bfff84 	movi	r2,-2
  811a20:	1884703a 	and	r2,r3,r2
  811a24:	1001703a 	wrctl	status,r2
  
  return context;
  811a28:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  811a2c:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  811a30:	e0bffc17 	ldw	r2,-16(fp)
  811a34:	10800003 	ldbu	r2,0(r2)
  811a38:	10803fcc 	andi	r2,r2,255
  811a3c:	10800160 	cmpeqi	r2,r2,5
  811a40:	1000091e 	bne	r2,zero,811a68 <OSFlagNameGet+0xf8>
  811a44:	e0bffa17 	ldw	r2,-24(fp)
  811a48:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811a4c:	e0bff817 	ldw	r2,-32(fp)
  811a50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  811a54:	e0fffe17 	ldw	r3,-8(fp)
  811a58:	00800044 	movi	r2,1
  811a5c:	18800005 	stb	r2,0(r3)
        return (0);
  811a60:	e03fff15 	stw	zero,-4(fp)
  811a64:	00000d06 	br	811a9c <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  811a68:	e0bffc17 	ldw	r2,-16(fp)
  811a6c:	11400284 	addi	r5,r2,10
  811a70:	e13ffd17 	ldw	r4,-12(fp)
  811a74:	0810b280 	call	810b28 <OS_StrCopy>
  811a78:	e0bffb05 	stb	r2,-20(fp)
  811a7c:	e0bffa17 	ldw	r2,-24(fp)
  811a80:	e0bff715 	stw	r2,-36(fp)
  811a84:	e0bff717 	ldw	r2,-36(fp)
  811a88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  811a8c:	e0bffe17 	ldw	r2,-8(fp)
  811a90:	10000005 	stb	zero,0(r2)
    return (len);
  811a94:	e0bffb03 	ldbu	r2,-20(fp)
  811a98:	e0bfff15 	stw	r2,-4(fp)
  811a9c:	e0bfff17 	ldw	r2,-4(fp)
}
  811aa0:	e037883a 	mov	sp,fp
  811aa4:	dfc00117 	ldw	ra,4(sp)
  811aa8:	df000017 	ldw	fp,0(sp)
  811aac:	dec00204 	addi	sp,sp,8
  811ab0:	f800283a 	ret

00811ab4 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  811ab4:	defff504 	addi	sp,sp,-44
  811ab8:	dfc00a15 	stw	ra,40(sp)
  811abc:	df000915 	stw	fp,36(sp)
  811ac0:	df000904 	addi	fp,sp,36
  811ac4:	e13ffd15 	stw	r4,-12(fp)
  811ac8:	e17ffe15 	stw	r5,-8(fp)
  811acc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  811ad0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  811ad4:	e0bfff17 	ldw	r2,-4(fp)
  811ad8:	1005003a 	cmpeq	r2,r2,zero
  811adc:	1000451e 	bne	r2,zero,811bf4 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  811ae0:	e0bffd17 	ldw	r2,-12(fp)
  811ae4:	1004c03a 	cmpne	r2,r2,zero
  811ae8:	1000041e 	bne	r2,zero,811afc <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  811aec:	e0ffff17 	ldw	r3,-4(fp)
  811af0:	00801b84 	movi	r2,110
  811af4:	18800005 	stb	r2,0(r3)
        return;
  811af8:	00003e06 	br	811bf4 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  811afc:	e0bffe17 	ldw	r2,-8(fp)
  811b00:	1004c03a 	cmpne	r2,r2,zero
  811b04:	1000041e 	bne	r2,zero,811b18 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  811b08:	e0ffff17 	ldw	r3,-4(fp)
  811b0c:	00800304 	movi	r2,12
  811b10:	18800005 	stb	r2,0(r3)
        return;
  811b14:	00003706 	br	811bf4 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  811b18:	008020b4 	movhi	r2,130
  811b1c:	10b7bc04 	addi	r2,r2,-8464
  811b20:	10800003 	ldbu	r2,0(r2)
  811b24:	10803fcc 	andi	r2,r2,255
  811b28:	1005003a 	cmpeq	r2,r2,zero
  811b2c:	1000041e 	bne	r2,zero,811b40 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  811b30:	e0ffff17 	ldw	r3,-4(fp)
  811b34:	00800484 	movi	r2,18
  811b38:	18800005 	stb	r2,0(r3)
        return;
  811b3c:	00002d06 	br	811bf4 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811b40:	0005303a 	rdctl	r2,status
  811b44:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811b48:	e0fffa17 	ldw	r3,-24(fp)
  811b4c:	00bfff84 	movi	r2,-2
  811b50:	1884703a 	and	r2,r3,r2
  811b54:	1001703a 	wrctl	status,r2
  
  return context;
  811b58:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  811b5c:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  811b60:	e0bffd17 	ldw	r2,-12(fp)
  811b64:	10800003 	ldbu	r2,0(r2)
  811b68:	10803fcc 	andi	r2,r2,255
  811b6c:	10800160 	cmpeqi	r2,r2,5
  811b70:	1000081e 	bne	r2,zero,811b94 <OSFlagNameSet+0xe0>
  811b74:	e0bffb17 	ldw	r2,-20(fp)
  811b78:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811b7c:	e0bff917 	ldw	r2,-28(fp)
  811b80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  811b84:	e0ffff17 	ldw	r3,-4(fp)
  811b88:	00800044 	movi	r2,1
  811b8c:	18800005 	stb	r2,0(r3)
        return;
  811b90:	00001806 	br	811bf4 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  811b94:	e13ffe17 	ldw	r4,-8(fp)
  811b98:	0810ba80 	call	810ba8 <OS_StrLen>
  811b9c:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  811ba0:	e0bffc03 	ldbu	r2,-16(fp)
  811ba4:	10800830 	cmpltui	r2,r2,32
  811ba8:	1000081e 	bne	r2,zero,811bcc <OSFlagNameSet+0x118>
  811bac:	e0bffb17 	ldw	r2,-20(fp)
  811bb0:	e0bff815 	stw	r2,-32(fp)
  811bb4:	e0bff817 	ldw	r2,-32(fp)
  811bb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  811bbc:	e0ffff17 	ldw	r3,-4(fp)
  811bc0:	00801cc4 	movi	r2,115
  811bc4:	18800005 	stb	r2,0(r3)
        return;
  811bc8:	00000a06 	br	811bf4 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  811bcc:	e0bffd17 	ldw	r2,-12(fp)
  811bd0:	11000284 	addi	r4,r2,10
  811bd4:	e17ffe17 	ldw	r5,-8(fp)
  811bd8:	0810b280 	call	810b28 <OS_StrCopy>
  811bdc:	e0bffb17 	ldw	r2,-20(fp)
  811be0:	e0bff715 	stw	r2,-36(fp)
  811be4:	e0bff717 	ldw	r2,-36(fp)
  811be8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  811bec:	e0bfff17 	ldw	r2,-4(fp)
  811bf0:	10000005 	stb	zero,0(r2)
    return;
}
  811bf4:	e037883a 	mov	sp,fp
  811bf8:	dfc00117 	ldw	ra,4(sp)
  811bfc:	df000017 	ldw	fp,0(sp)
  811c00:	dec00204 	addi	sp,sp,8
  811c04:	f800283a 	ret

00811c08 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  811c08:	deffe004 	addi	sp,sp,-128
  811c0c:	dfc01f15 	stw	ra,124(sp)
  811c10:	df001e15 	stw	fp,120(sp)
  811c14:	df001e04 	addi	fp,sp,120
  811c18:	e13ff915 	stw	r4,-28(fp)
  811c1c:	e17ffa0d 	sth	r5,-24(fp)
  811c20:	e1bffb05 	stb	r6,-20(fp)
  811c24:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  811c28:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  811c2c:	e0800217 	ldw	r2,8(fp)
  811c30:	1004c03a 	cmpne	r2,r2,zero
  811c34:	1000021e 	bne	r2,zero,811c40 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
  811c38:	e03fff15 	stw	zero,-4(fp)
  811c3c:	00017d06 	br	812234 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  811c40:	e0bff917 	ldw	r2,-28(fp)
  811c44:	1004c03a 	cmpne	r2,r2,zero
  811c48:	1000051e 	bne	r2,zero,811c60 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  811c4c:	e0c00217 	ldw	r3,8(fp)
  811c50:	00801b84 	movi	r2,110
  811c54:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  811c58:	e03fff15 	stw	zero,-4(fp)
  811c5c:	00017506 	br	812234 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  811c60:	008020b4 	movhi	r2,130
  811c64:	10b7bc04 	addi	r2,r2,-8464
  811c68:	10800003 	ldbu	r2,0(r2)
  811c6c:	10803fcc 	andi	r2,r2,255
  811c70:	1005003a 	cmpeq	r2,r2,zero
  811c74:	1000051e 	bne	r2,zero,811c8c <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  811c78:	e0c00217 	ldw	r3,8(fp)
  811c7c:	00800084 	movi	r2,2
  811c80:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  811c84:	e03fff15 	stw	zero,-4(fp)
  811c88:	00016a06 	br	812234 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  811c8c:	008020b4 	movhi	r2,130
  811c90:	10b7ae04 	addi	r2,r2,-8520
  811c94:	10800003 	ldbu	r2,0(r2)
  811c98:	10803fcc 	andi	r2,r2,255
  811c9c:	1005003a 	cmpeq	r2,r2,zero
  811ca0:	1000051e 	bne	r2,zero,811cb8 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  811ca4:	e0c00217 	ldw	r3,8(fp)
  811ca8:	00800344 	movi	r2,13
  811cac:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  811cb0:	e03fff15 	stw	zero,-4(fp)
  811cb4:	00015f06 	br	812234 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  811cb8:	e0bff917 	ldw	r2,-28(fp)
  811cbc:	10800003 	ldbu	r2,0(r2)
  811cc0:	10803fcc 	andi	r2,r2,255
  811cc4:	10800160 	cmpeqi	r2,r2,5
  811cc8:	1000051e 	bne	r2,zero,811ce0 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
  811ccc:	e0c00217 	ldw	r3,8(fp)
  811cd0:	00800044 	movi	r2,1
  811cd4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  811cd8:	e03fff15 	stw	zero,-4(fp)
  811cdc:	00015506 	br	812234 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  811ce0:	e0fffb03 	ldbu	r3,-20(fp)
  811ce4:	00bfe004 	movi	r2,-128
  811ce8:	1884703a 	and	r2,r3,r2
  811cec:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  811cf0:	e0bff283 	ldbu	r2,-54(fp)
  811cf4:	1005003a 	cmpeq	r2,r2,zero
  811cf8:	1000071e 	bne	r2,zero,811d18 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  811cfc:	00c01fc4 	movi	r3,127
  811d00:	e0bffb03 	ldbu	r2,-20(fp)
  811d04:	10c4703a 	and	r2,r2,r3
  811d08:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
  811d0c:	00800044 	movi	r2,1
  811d10:	e0bff205 	stb	r2,-56(fp)
  811d14:	00000106 	br	811d1c <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
  811d18:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811d1c:	0005303a 	rdctl	r2,status
  811d20:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811d24:	e0fff017 	ldw	r3,-64(fp)
  811d28:	00bfff84 	movi	r2,-2
  811d2c:	1884703a 	and	r2,r3,r2
  811d30:	1001703a 	wrctl	status,r2
  
  return context;
  811d34:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  811d38:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
  811d3c:	e0bffb03 	ldbu	r2,-20(fp)
  811d40:	e0bffe15 	stw	r2,-8(fp)
  811d44:	e0fffe17 	ldw	r3,-8(fp)
  811d48:	18800060 	cmpeqi	r2,r3,1
  811d4c:	1000981e 	bne	r2,zero,811fb0 <OSFlagPend+0x3a8>
  811d50:	e0fffe17 	ldw	r3,-8(fp)
  811d54:	18800088 	cmpgei	r2,r3,2
  811d58:	1000041e 	bne	r2,zero,811d6c <OSFlagPend+0x164>
  811d5c:	e0fffe17 	ldw	r3,-8(fp)
  811d60:	1805003a 	cmpeq	r2,r3,zero
  811d64:	1000641e 	bne	r2,zero,811ef8 <OSFlagPend+0x2f0>
  811d68:	0000bf06 	br	812068 <OSFlagPend+0x460>
  811d6c:	e0fffe17 	ldw	r3,-8(fp)
  811d70:	188000a0 	cmpeqi	r2,r3,2
  811d74:	1000041e 	bne	r2,zero,811d88 <OSFlagPend+0x180>
  811d78:	e0fffe17 	ldw	r3,-8(fp)
  811d7c:	188000e0 	cmpeqi	r2,r3,3
  811d80:	10002f1e 	bne	r2,zero,811e40 <OSFlagPend+0x238>
  811d84:	0000b806 	br	812068 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  811d88:	e0bff917 	ldw	r2,-28(fp)
  811d8c:	10c0020b 	ldhu	r3,8(r2)
  811d90:	e0bffa0b 	ldhu	r2,-24(fp)
  811d94:	1884703a 	and	r2,r3,r2
  811d98:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  811d9c:	e0fff30b 	ldhu	r3,-52(fp)
  811da0:	e0bffa0b 	ldhu	r2,-24(fp)
  811da4:	18801a1e 	bne	r3,r2,811e10 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  811da8:	e0bff203 	ldbu	r2,-56(fp)
  811dac:	10800058 	cmpnei	r2,r2,1
  811db0:	1000091e 	bne	r2,zero,811dd8 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  811db4:	e0bff917 	ldw	r2,-28(fp)
  811db8:	1080020b 	ldhu	r2,8(r2)
  811dbc:	1007883a 	mov	r3,r2
  811dc0:	e0bff30b 	ldhu	r2,-52(fp)
  811dc4:	0084303a 	nor	r2,zero,r2
  811dc8:	1884703a 	and	r2,r3,r2
  811dcc:	1007883a 	mov	r3,r2
  811dd0:	e0bff917 	ldw	r2,-28(fp)
  811dd4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  811dd8:	008020b4 	movhi	r2,130
  811ddc:	10b7bd04 	addi	r2,r2,-8460
  811de0:	10c00017 	ldw	r3,0(r2)
  811de4:	e0bff30b 	ldhu	r2,-52(fp)
  811de8:	18800b0d 	sth	r2,44(r3)
  811dec:	e0bff117 	ldw	r2,-60(fp)
  811df0:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811df4:	e0bfef17 	ldw	r2,-68(fp)
  811df8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  811dfc:	e0800217 	ldw	r2,8(fp)
  811e00:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  811e04:	e0bff30b 	ldhu	r2,-52(fp)
  811e08:	e0bfff15 	stw	r2,-4(fp)
  811e0c:	00010906 	br	812234 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  811e10:	e1bffa0b 	ldhu	r6,-24(fp)
  811e14:	e1fffb03 	ldbu	r7,-20(fp)
  811e18:	e0bffc0b 	ldhu	r2,-16(fp)
  811e1c:	e17ff404 	addi	r5,fp,-48
  811e20:	d8800015 	stw	r2,0(sp)
  811e24:	e13ff917 	ldw	r4,-28(fp)
  811e28:	08127300 	call	812730 <OS_FlagBlock>
  811e2c:	e0bff117 	ldw	r2,-60(fp)
  811e30:	e0bfee15 	stw	r2,-72(fp)
  811e34:	e0bfee17 	ldw	r2,-72(fp)
  811e38:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  811e3c:	00009506 	br	812094 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  811e40:	e0bff917 	ldw	r2,-28(fp)
  811e44:	10c0020b 	ldhu	r3,8(r2)
  811e48:	e0bffa0b 	ldhu	r2,-24(fp)
  811e4c:	1884703a 	and	r2,r3,r2
  811e50:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  811e54:	e0bff30b 	ldhu	r2,-52(fp)
  811e58:	1005003a 	cmpeq	r2,r2,zero
  811e5c:	10001a1e 	bne	r2,zero,811ec8 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  811e60:	e0bff203 	ldbu	r2,-56(fp)
  811e64:	10800058 	cmpnei	r2,r2,1
  811e68:	1000091e 	bne	r2,zero,811e90 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  811e6c:	e0bff917 	ldw	r2,-28(fp)
  811e70:	1080020b 	ldhu	r2,8(r2)
  811e74:	1007883a 	mov	r3,r2
  811e78:	e0bff30b 	ldhu	r2,-52(fp)
  811e7c:	0084303a 	nor	r2,zero,r2
  811e80:	1884703a 	and	r2,r3,r2
  811e84:	1007883a 	mov	r3,r2
  811e88:	e0bff917 	ldw	r2,-28(fp)
  811e8c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  811e90:	008020b4 	movhi	r2,130
  811e94:	10b7bd04 	addi	r2,r2,-8460
  811e98:	10c00017 	ldw	r3,0(r2)
  811e9c:	e0bff30b 	ldhu	r2,-52(fp)
  811ea0:	18800b0d 	sth	r2,44(r3)
  811ea4:	e0bff117 	ldw	r2,-60(fp)
  811ea8:	e0bfed15 	stw	r2,-76(fp)
  811eac:	e0bfed17 	ldw	r2,-76(fp)
  811eb0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  811eb4:	e0800217 	ldw	r2,8(fp)
  811eb8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  811ebc:	e0fff30b 	ldhu	r3,-52(fp)
  811ec0:	e0ffff15 	stw	r3,-4(fp)
  811ec4:	0000db06 	br	812234 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  811ec8:	e1bffa0b 	ldhu	r6,-24(fp)
  811ecc:	e1fffb03 	ldbu	r7,-20(fp)
  811ed0:	e0bffc0b 	ldhu	r2,-16(fp)
  811ed4:	e17ff404 	addi	r5,fp,-48
  811ed8:	d8800015 	stw	r2,0(sp)
  811edc:	e13ff917 	ldw	r4,-28(fp)
  811ee0:	08127300 	call	812730 <OS_FlagBlock>
  811ee4:	e0bff117 	ldw	r2,-60(fp)
  811ee8:	e0bfec15 	stw	r2,-80(fp)
  811eec:	e0bfec17 	ldw	r2,-80(fp)
  811ef0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  811ef4:	00006706 	br	812094 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  811ef8:	e0bff917 	ldw	r2,-28(fp)
  811efc:	1080020b 	ldhu	r2,8(r2)
  811f00:	0084303a 	nor	r2,zero,r2
  811f04:	1007883a 	mov	r3,r2
  811f08:	e0bffa0b 	ldhu	r2,-24(fp)
  811f0c:	1884703a 	and	r2,r3,r2
  811f10:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  811f14:	e0fff30b 	ldhu	r3,-52(fp)
  811f18:	e0bffa0b 	ldhu	r2,-24(fp)
  811f1c:	1880181e 	bne	r3,r2,811f80 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  811f20:	e0bff203 	ldbu	r2,-56(fp)
  811f24:	10800058 	cmpnei	r2,r2,1
  811f28:	1000071e 	bne	r2,zero,811f48 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  811f2c:	e0bff917 	ldw	r2,-28(fp)
  811f30:	10c0020b 	ldhu	r3,8(r2)
  811f34:	e0bff30b 	ldhu	r2,-52(fp)
  811f38:	1884b03a 	or	r2,r3,r2
  811f3c:	1007883a 	mov	r3,r2
  811f40:	e0bff917 	ldw	r2,-28(fp)
  811f44:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  811f48:	008020b4 	movhi	r2,130
  811f4c:	10b7bd04 	addi	r2,r2,-8460
  811f50:	10c00017 	ldw	r3,0(r2)
  811f54:	e0bff30b 	ldhu	r2,-52(fp)
  811f58:	18800b0d 	sth	r2,44(r3)
  811f5c:	e0bff117 	ldw	r2,-60(fp)
  811f60:	e0bfeb15 	stw	r2,-84(fp)
  811f64:	e0bfeb17 	ldw	r2,-84(fp)
  811f68:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  811f6c:	e0800217 	ldw	r2,8(fp)
  811f70:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  811f74:	e0bff30b 	ldhu	r2,-52(fp)
  811f78:	e0bfff15 	stw	r2,-4(fp)
  811f7c:	0000ad06 	br	812234 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  811f80:	e1bffa0b 	ldhu	r6,-24(fp)
  811f84:	e1fffb03 	ldbu	r7,-20(fp)
  811f88:	e0bffc0b 	ldhu	r2,-16(fp)
  811f8c:	e17ff404 	addi	r5,fp,-48
  811f90:	d8800015 	stw	r2,0(sp)
  811f94:	e13ff917 	ldw	r4,-28(fp)
  811f98:	08127300 	call	812730 <OS_FlagBlock>
  811f9c:	e0bff117 	ldw	r2,-60(fp)
  811fa0:	e0bfea15 	stw	r2,-88(fp)
  811fa4:	e0bfea17 	ldw	r2,-88(fp)
  811fa8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  811fac:	00003906 	br	812094 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  811fb0:	e0bff917 	ldw	r2,-28(fp)
  811fb4:	1080020b 	ldhu	r2,8(r2)
  811fb8:	0084303a 	nor	r2,zero,r2
  811fbc:	1007883a 	mov	r3,r2
  811fc0:	e0bffa0b 	ldhu	r2,-24(fp)
  811fc4:	1884703a 	and	r2,r3,r2
  811fc8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  811fcc:	e0bff30b 	ldhu	r2,-52(fp)
  811fd0:	1005003a 	cmpeq	r2,r2,zero
  811fd4:	1000181e 	bne	r2,zero,812038 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  811fd8:	e0bff203 	ldbu	r2,-56(fp)
  811fdc:	10800058 	cmpnei	r2,r2,1
  811fe0:	1000071e 	bne	r2,zero,812000 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  811fe4:	e0bff917 	ldw	r2,-28(fp)
  811fe8:	10c0020b 	ldhu	r3,8(r2)
  811fec:	e0bff30b 	ldhu	r2,-52(fp)
  811ff0:	1884b03a 	or	r2,r3,r2
  811ff4:	1007883a 	mov	r3,r2
  811ff8:	e0bff917 	ldw	r2,-28(fp)
  811ffc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  812000:	008020b4 	movhi	r2,130
  812004:	10b7bd04 	addi	r2,r2,-8460
  812008:	10c00017 	ldw	r3,0(r2)
  81200c:	e0bff30b 	ldhu	r2,-52(fp)
  812010:	18800b0d 	sth	r2,44(r3)
  812014:	e0bff117 	ldw	r2,-60(fp)
  812018:	e0bfe915 	stw	r2,-92(fp)
  81201c:	e0bfe917 	ldw	r2,-92(fp)
  812020:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  812024:	e0800217 	ldw	r2,8(fp)
  812028:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  81202c:	e0fff30b 	ldhu	r3,-52(fp)
  812030:	e0ffff15 	stw	r3,-4(fp)
  812034:	00007f06 	br	812234 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  812038:	e1bffa0b 	ldhu	r6,-24(fp)
  81203c:	e1fffb03 	ldbu	r7,-20(fp)
  812040:	e0bffc0b 	ldhu	r2,-16(fp)
  812044:	e17ff404 	addi	r5,fp,-48
  812048:	d8800015 	stw	r2,0(sp)
  81204c:	e13ff917 	ldw	r4,-28(fp)
  812050:	08127300 	call	812730 <OS_FlagBlock>
  812054:	e0bff117 	ldw	r2,-60(fp)
  812058:	e0bfe815 	stw	r2,-96(fp)
  81205c:	e0bfe817 	ldw	r2,-96(fp)
  812060:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  812064:	00000b06 	br	812094 <OSFlagPend+0x48c>
  812068:	e0bff117 	ldw	r2,-60(fp)
  81206c:	e0bfe715 	stw	r2,-100(fp)
  812070:	e0bfe717 	ldw	r2,-100(fp)
  812074:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  812078:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  81207c:	e0c00217 	ldw	r3,8(fp)
  812080:	00801bc4 	movi	r2,111
  812084:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
  812088:	e0bff30b 	ldhu	r2,-52(fp)
  81208c:	e0bfff15 	stw	r2,-4(fp)
  812090:	00006806 	br	812234 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  812094:	08109e40 	call	8109e4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812098:	0005303a 	rdctl	r2,status
  81209c:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8120a0:	e0ffe617 	ldw	r3,-104(fp)
  8120a4:	00bfff84 	movi	r2,-2
  8120a8:	1884703a 	and	r2,r3,r2
  8120ac:	1001703a 	wrctl	status,r2
  
  return context;
  8120b0:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
  8120b4:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  8120b8:	008020b4 	movhi	r2,130
  8120bc:	10b7bd04 	addi	r2,r2,-8460
  8120c0:	10800017 	ldw	r2,0(r2)
  8120c4:	10800c43 	ldbu	r2,49(r2)
  8120c8:	10803fcc 	andi	r2,r2,255
  8120cc:	1005003a 	cmpeq	r2,r2,zero
  8120d0:	1000221e 	bne	r2,zero,81215c <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  8120d4:	008020b4 	movhi	r2,130
  8120d8:	10b7bd04 	addi	r2,r2,-8460
  8120dc:	10800017 	ldw	r2,0(r2)
  8120e0:	10800c43 	ldbu	r2,49(r2)
  8120e4:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  8120e8:	008020b4 	movhi	r2,130
  8120ec:	10b7bd04 	addi	r2,r2,-8460
  8120f0:	10800017 	ldw	r2,0(r2)
  8120f4:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  8120f8:	e13ff404 	addi	r4,fp,-48
  8120fc:	0812ae80 	call	812ae8 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  812100:	008020b4 	movhi	r2,130
  812104:	10b7bd04 	addi	r2,r2,-8460
  812108:	10800017 	ldw	r2,0(r2)
  81210c:	10000c05 	stb	zero,48(r2)
  812110:	e0bff117 	ldw	r2,-60(fp)
  812114:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812118:	e0bfe517 	ldw	r2,-108(fp)
  81211c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  812120:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
  812124:	e0bff243 	ldbu	r2,-55(fp)
  812128:	108000a0 	cmpeqi	r2,r2,2
  81212c:	1000011e 	bne	r2,zero,812134 <OSFlagPend+0x52c>
  812130:	00000406 	br	812144 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  812134:	e0c00217 	ldw	r3,8(fp)
  812138:	00800384 	movi	r2,14
  81213c:	18800005 	stb	r2,0(r3)
                 break;
  812140:	00000306 	br	812150 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  812144:	e0c00217 	ldw	r3,8(fp)
  812148:	00800284 	movi	r2,10
  81214c:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
  812150:	e0fff30b 	ldhu	r3,-52(fp)
  812154:	e0ffff15 	stw	r3,-4(fp)
  812158:	00003606 	br	812234 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  81215c:	008020b4 	movhi	r2,130
  812160:	10b7bd04 	addi	r2,r2,-8460
  812164:	10800017 	ldw	r2,0(r2)
  812168:	10800b0b 	ldhu	r2,44(r2)
  81216c:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  812170:	e0bff203 	ldbu	r2,-56(fp)
  812174:	10800058 	cmpnei	r2,r2,1
  812178:	1000261e 	bne	r2,zero,812214 <OSFlagPend+0x60c>
        switch (wait_type) {
  81217c:	e0bffb03 	ldbu	r2,-20(fp)
  812180:	e0bffd15 	stw	r2,-12(fp)
  812184:	e0fffd17 	ldw	r3,-12(fp)
  812188:	1804803a 	cmplt	r2,r3,zero
  81218c:	1000181e 	bne	r2,zero,8121f0 <OSFlagPend+0x5e8>
  812190:	e0fffd17 	ldw	r3,-12(fp)
  812194:	18800090 	cmplti	r2,r3,2
  812198:	10000d1e 	bne	r2,zero,8121d0 <OSFlagPend+0x5c8>
  81219c:	e0fffd17 	ldw	r3,-12(fp)
  8121a0:	18800108 	cmpgei	r2,r3,4
  8121a4:	1000121e 	bne	r2,zero,8121f0 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  8121a8:	e0bff917 	ldw	r2,-28(fp)
  8121ac:	1080020b 	ldhu	r2,8(r2)
  8121b0:	1007883a 	mov	r3,r2
  8121b4:	e0bff30b 	ldhu	r2,-52(fp)
  8121b8:	0084303a 	nor	r2,zero,r2
  8121bc:	1884703a 	and	r2,r3,r2
  8121c0:	1007883a 	mov	r3,r2
  8121c4:	e0bff917 	ldw	r2,-28(fp)
  8121c8:	10c0020d 	sth	r3,8(r2)
                 break;
  8121cc:	00001106 	br	812214 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  8121d0:	e0bff917 	ldw	r2,-28(fp)
  8121d4:	10c0020b 	ldhu	r3,8(r2)
  8121d8:	e0bff30b 	ldhu	r2,-52(fp)
  8121dc:	1884b03a 	or	r2,r3,r2
  8121e0:	1007883a 	mov	r3,r2
  8121e4:	e0bff917 	ldw	r2,-28(fp)
  8121e8:	10c0020d 	sth	r3,8(r2)
                 break;
  8121ec:	00000906 	br	812214 <OSFlagPend+0x60c>
  8121f0:	e0bff117 	ldw	r2,-60(fp)
  8121f4:	e0bfe415 	stw	r2,-112(fp)
  8121f8:	e0bfe417 	ldw	r2,-112(fp)
  8121fc:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  812200:	e0c00217 	ldw	r3,8(fp)
  812204:	00801bc4 	movi	r2,111
  812208:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  81220c:	e03fff15 	stw	zero,-4(fp)
  812210:	00000806 	br	812234 <OSFlagPend+0x62c>
  812214:	e0bff117 	ldw	r2,-60(fp)
  812218:	e0bfe315 	stw	r2,-116(fp)
  81221c:	e0bfe317 	ldw	r2,-116(fp)
  812220:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  812224:	e0800217 	ldw	r2,8(fp)
  812228:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  81222c:	e0bff30b 	ldhu	r2,-52(fp)
  812230:	e0bfff15 	stw	r2,-4(fp)
  812234:	e0bfff17 	ldw	r2,-4(fp)
}
  812238:	e037883a 	mov	sp,fp
  81223c:	dfc00117 	ldw	ra,4(sp)
  812240:	df000017 	ldw	fp,0(sp)
  812244:	dec00204 	addi	sp,sp,8
  812248:	f800283a 	ret

0081224c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  81224c:	defffb04 	addi	sp,sp,-20
  812250:	df000415 	stw	fp,16(sp)
  812254:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  812258:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81225c:	0005303a 	rdctl	r2,status
  812260:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812264:	e0fffd17 	ldw	r3,-12(fp)
  812268:	00bfff84 	movi	r2,-2
  81226c:	1884703a 	and	r2,r3,r2
  812270:	1001703a 	wrctl	status,r2
  
  return context;
  812274:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  812278:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  81227c:	008020b4 	movhi	r2,130
  812280:	10b7bd04 	addi	r2,r2,-8460
  812284:	10800017 	ldw	r2,0(r2)
  812288:	10800b0b 	ldhu	r2,44(r2)
  81228c:	e0bfff0d 	sth	r2,-4(fp)
  812290:	e0bffe17 	ldw	r2,-8(fp)
  812294:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812298:	e0bffc17 	ldw	r2,-16(fp)
  81229c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  8122a0:	e0bfff0b 	ldhu	r2,-4(fp)
}
  8122a4:	e037883a 	mov	sp,fp
  8122a8:	df000017 	ldw	fp,0(sp)
  8122ac:	dec00104 	addi	sp,sp,4
  8122b0:	f800283a 	ret

008122b4 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  8122b4:	deffed04 	addi	sp,sp,-76
  8122b8:	dfc01215 	stw	ra,72(sp)
  8122bc:	df001115 	stw	fp,68(sp)
  8122c0:	df001104 	addi	fp,sp,68
  8122c4:	e13ff915 	stw	r4,-28(fp)
  8122c8:	e1fffc15 	stw	r7,-16(fp)
  8122cc:	e17ffa0d 	sth	r5,-24(fp)
  8122d0:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  8122d4:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  8122d8:	e0bffc17 	ldw	r2,-16(fp)
  8122dc:	1004c03a 	cmpne	r2,r2,zero
  8122e0:	1000021e 	bne	r2,zero,8122ec <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
  8122e4:	e03fff15 	stw	zero,-4(fp)
  8122e8:	0000d606 	br	812644 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  8122ec:	e0bff917 	ldw	r2,-28(fp)
  8122f0:	1004c03a 	cmpne	r2,r2,zero
  8122f4:	1000051e 	bne	r2,zero,81230c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  8122f8:	e0fffc17 	ldw	r3,-16(fp)
  8122fc:	00801b84 	movi	r2,110
  812300:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  812304:	e03fff15 	stw	zero,-4(fp)
  812308:	0000ce06 	br	812644 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  81230c:	e0bff917 	ldw	r2,-28(fp)
  812310:	10800003 	ldbu	r2,0(r2)
  812314:	10803fcc 	andi	r2,r2,255
  812318:	10800160 	cmpeqi	r2,r2,5
  81231c:	1000051e 	bne	r2,zero,812334 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  812320:	e0fffc17 	ldw	r3,-16(fp)
  812324:	00800044 	movi	r2,1
  812328:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  81232c:	e03fff15 	stw	zero,-4(fp)
  812330:	0000c406 	br	812644 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812334:	0005303a 	rdctl	r2,status
  812338:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81233c:	e0fff417 	ldw	r3,-48(fp)
  812340:	00bfff84 	movi	r2,-2
  812344:	1884703a 	and	r2,r3,r2
  812348:	1001703a 	wrctl	status,r2
  
  return context;
  81234c:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  812350:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
  812354:	e0bffb03 	ldbu	r2,-20(fp)
  812358:	e0bffe15 	stw	r2,-8(fp)
  81235c:	e0fffe17 	ldw	r3,-8(fp)
  812360:	1805003a 	cmpeq	r2,r3,zero
  812364:	1000041e 	bne	r2,zero,812378 <OSFlagPost+0xc4>
  812368:	e0fffe17 	ldw	r3,-8(fp)
  81236c:	18800060 	cmpeqi	r2,r3,1
  812370:	10000b1e 	bne	r2,zero,8123a0 <OSFlagPost+0xec>
  812374:	00001206 	br	8123c0 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  812378:	e0bff917 	ldw	r2,-28(fp)
  81237c:	1080020b 	ldhu	r2,8(r2)
  812380:	1007883a 	mov	r3,r2
  812384:	e0bffa0b 	ldhu	r2,-24(fp)
  812388:	0084303a 	nor	r2,zero,r2
  81238c:	1884703a 	and	r2,r3,r2
  812390:	1007883a 	mov	r3,r2
  812394:	e0bff917 	ldw	r2,-28(fp)
  812398:	10c0020d 	sth	r3,8(r2)
             break;
  81239c:	00001106 	br	8123e4 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  8123a0:	e0bff917 	ldw	r2,-28(fp)
  8123a4:	10c0020b 	ldhu	r3,8(r2)
  8123a8:	e0bffa0b 	ldhu	r2,-24(fp)
  8123ac:	1884b03a 	or	r2,r3,r2
  8123b0:	1007883a 	mov	r3,r2
  8123b4:	e0bff917 	ldw	r2,-28(fp)
  8123b8:	10c0020d 	sth	r3,8(r2)
             break;
  8123bc:	00000906 	br	8123e4 <OSFlagPost+0x130>
  8123c0:	e0bff517 	ldw	r2,-44(fp)
  8123c4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8123c8:	e0bff317 	ldw	r2,-52(fp)
  8123cc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  8123d0:	e0fffc17 	ldw	r3,-16(fp)
  8123d4:	00801c44 	movi	r2,113
  8123d8:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
  8123dc:	e03fff15 	stw	zero,-4(fp)
  8123e0:	00009806 	br	812644 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  8123e4:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  8123e8:	e0bff917 	ldw	r2,-28(fp)
  8123ec:	10800117 	ldw	r2,4(r2)
  8123f0:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  8123f4:	00007506 	br	8125cc <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
  8123f8:	e0bff817 	ldw	r2,-32(fp)
  8123fc:	10800483 	ldbu	r2,18(r2)
  812400:	10803fcc 	andi	r2,r2,255
  812404:	e0bffd15 	stw	r2,-12(fp)
  812408:	e0fffd17 	ldw	r3,-12(fp)
  81240c:	18800060 	cmpeqi	r2,r3,1
  812410:	10004d1e 	bne	r2,zero,812548 <OSFlagPost+0x294>
  812414:	e0fffd17 	ldw	r3,-12(fp)
  812418:	18800088 	cmpgei	r2,r3,2
  81241c:	1000041e 	bne	r2,zero,812430 <OSFlagPost+0x17c>
  812420:	e0fffd17 	ldw	r3,-12(fp)
  812424:	1805003a 	cmpeq	r2,r3,zero
  812428:	1000301e 	bne	r2,zero,8124ec <OSFlagPost+0x238>
  81242c:	00005b06 	br	81259c <OSFlagPost+0x2e8>
  812430:	e0fffd17 	ldw	r3,-12(fp)
  812434:	188000a0 	cmpeqi	r2,r3,2
  812438:	1000041e 	bne	r2,zero,81244c <OSFlagPost+0x198>
  81243c:	e0fffd17 	ldw	r3,-12(fp)
  812440:	188000e0 	cmpeqi	r2,r3,3
  812444:	1000161e 	bne	r2,zero,8124a0 <OSFlagPost+0x1ec>
  812448:	00005406 	br	81259c <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  81244c:	e0bff917 	ldw	r2,-28(fp)
  812450:	10c0020b 	ldhu	r3,8(r2)
  812454:	e0bff817 	ldw	r2,-32(fp)
  812458:	1080040b 	ldhu	r2,16(r2)
  81245c:	1884703a 	and	r2,r3,r2
  812460:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  812464:	e0bff817 	ldw	r2,-32(fp)
  812468:	1080040b 	ldhu	r2,16(r2)
  81246c:	10ffffcc 	andi	r3,r2,65535
  812470:	e0bff68b 	ldhu	r2,-38(fp)
  812474:	1880521e 	bne	r3,r2,8125c0 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  812478:	e17ff68b 	ldhu	r5,-38(fp)
  81247c:	e13ff817 	ldw	r4,-32(fp)
  812480:	08129d80 	call	8129d8 <OS_FlagTaskRdy>
  812484:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  812488:	e0bff603 	ldbu	r2,-40(fp)
  81248c:	10800058 	cmpnei	r2,r2,1
  812490:	10004b1e 	bne	r2,zero,8125c0 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  812494:	00800044 	movi	r2,1
  812498:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  81249c:	00004806 	br	8125c0 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  8124a0:	e0bff917 	ldw	r2,-28(fp)
  8124a4:	10c0020b 	ldhu	r3,8(r2)
  8124a8:	e0bff817 	ldw	r2,-32(fp)
  8124ac:	1080040b 	ldhu	r2,16(r2)
  8124b0:	1884703a 	and	r2,r3,r2
  8124b4:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  8124b8:	e0bff68b 	ldhu	r2,-38(fp)
  8124bc:	1005003a 	cmpeq	r2,r2,zero
  8124c0:	10003f1e 	bne	r2,zero,8125c0 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  8124c4:	e17ff68b 	ldhu	r5,-38(fp)
  8124c8:	e13ff817 	ldw	r4,-32(fp)
  8124cc:	08129d80 	call	8129d8 <OS_FlagTaskRdy>
  8124d0:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  8124d4:	e0bff603 	ldbu	r2,-40(fp)
  8124d8:	10800058 	cmpnei	r2,r2,1
  8124dc:	1000381e 	bne	r2,zero,8125c0 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  8124e0:	00800044 	movi	r2,1
  8124e4:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  8124e8:	00003506 	br	8125c0 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  8124ec:	e0bff917 	ldw	r2,-28(fp)
  8124f0:	1080020b 	ldhu	r2,8(r2)
  8124f4:	0084303a 	nor	r2,zero,r2
  8124f8:	1007883a 	mov	r3,r2
  8124fc:	e0bff817 	ldw	r2,-32(fp)
  812500:	1080040b 	ldhu	r2,16(r2)
  812504:	1884703a 	and	r2,r3,r2
  812508:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  81250c:	e0bff817 	ldw	r2,-32(fp)
  812510:	1080040b 	ldhu	r2,16(r2)
  812514:	10ffffcc 	andi	r3,r2,65535
  812518:	e0bff68b 	ldhu	r2,-38(fp)
  81251c:	1880281e 	bne	r3,r2,8125c0 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  812520:	e17ff68b 	ldhu	r5,-38(fp)
  812524:	e13ff817 	ldw	r4,-32(fp)
  812528:	08129d80 	call	8129d8 <OS_FlagTaskRdy>
  81252c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  812530:	e0bff603 	ldbu	r2,-40(fp)
  812534:	10800058 	cmpnei	r2,r2,1
  812538:	1000211e 	bne	r2,zero,8125c0 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  81253c:	00800044 	movi	r2,1
  812540:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  812544:	00001e06 	br	8125c0 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  812548:	e0bff917 	ldw	r2,-28(fp)
  81254c:	1080020b 	ldhu	r2,8(r2)
  812550:	0084303a 	nor	r2,zero,r2
  812554:	1007883a 	mov	r3,r2
  812558:	e0bff817 	ldw	r2,-32(fp)
  81255c:	1080040b 	ldhu	r2,16(r2)
  812560:	1884703a 	and	r2,r3,r2
  812564:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  812568:	e0bff68b 	ldhu	r2,-38(fp)
  81256c:	1005003a 	cmpeq	r2,r2,zero
  812570:	1000131e 	bne	r2,zero,8125c0 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  812574:	e17ff68b 	ldhu	r5,-38(fp)
  812578:	e13ff817 	ldw	r4,-32(fp)
  81257c:	08129d80 	call	8129d8 <OS_FlagTaskRdy>
  812580:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  812584:	e0bff603 	ldbu	r2,-40(fp)
  812588:	10800058 	cmpnei	r2,r2,1
  81258c:	10000c1e 	bne	r2,zero,8125c0 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  812590:	00800044 	movi	r2,1
  812594:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  812598:	00000906 	br	8125c0 <OSFlagPost+0x30c>
  81259c:	e0bff517 	ldw	r2,-44(fp)
  8125a0:	e0bff215 	stw	r2,-56(fp)
  8125a4:	e0bff217 	ldw	r2,-56(fp)
  8125a8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  8125ac:	e0fffc17 	ldw	r3,-16(fp)
  8125b0:	00801bc4 	movi	r2,111
  8125b4:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  8125b8:	e03fff15 	stw	zero,-4(fp)
  8125bc:	00002106 	br	812644 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  8125c0:	e0bff817 	ldw	r2,-32(fp)
  8125c4:	10800017 	ldw	r2,0(r2)
  8125c8:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  8125cc:	e0bff817 	ldw	r2,-32(fp)
  8125d0:	1004c03a 	cmpne	r2,r2,zero
  8125d4:	103f881e 	bne	r2,zero,8123f8 <OSFlagPost+0x144>
  8125d8:	e0bff517 	ldw	r2,-44(fp)
  8125dc:	e0bff115 	stw	r2,-60(fp)
  8125e0:	e0bff117 	ldw	r2,-60(fp)
  8125e4:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  8125e8:	e0bff783 	ldbu	r2,-34(fp)
  8125ec:	10800058 	cmpnei	r2,r2,1
  8125f0:	1000011e 	bne	r2,zero,8125f8 <OSFlagPost+0x344>
        OS_Sched();
  8125f4:	08109e40 	call	8109e4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8125f8:	0005303a 	rdctl	r2,status
  8125fc:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812600:	e0fff017 	ldw	r3,-64(fp)
  812604:	00bfff84 	movi	r2,-2
  812608:	1884703a 	and	r2,r3,r2
  81260c:	1001703a 	wrctl	status,r2
  
  return context;
  812610:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
  812614:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
  812618:	e0bff917 	ldw	r2,-28(fp)
  81261c:	1080020b 	ldhu	r2,8(r2)
  812620:	e0bff70d 	sth	r2,-36(fp)
  812624:	e0bff517 	ldw	r2,-44(fp)
  812628:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81262c:	e0bfef17 	ldw	r2,-68(fp)
  812630:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  812634:	e0bffc17 	ldw	r2,-16(fp)
  812638:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  81263c:	e0bff70b 	ldhu	r2,-36(fp)
  812640:	e0bfff15 	stw	r2,-4(fp)
  812644:	e0bfff17 	ldw	r2,-4(fp)
}
  812648:	e037883a 	mov	sp,fp
  81264c:	dfc00117 	ldw	ra,4(sp)
  812650:	df000017 	ldw	fp,0(sp)
  812654:	dec00204 	addi	sp,sp,8
  812658:	f800283a 	ret

0081265c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  81265c:	defff804 	addi	sp,sp,-32
  812660:	df000715 	stw	fp,28(sp)
  812664:	df000704 	addi	fp,sp,28
  812668:	e13ffd15 	stw	r4,-12(fp)
  81266c:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  812670:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  812674:	e0bffe17 	ldw	r2,-8(fp)
  812678:	1004c03a 	cmpne	r2,r2,zero
  81267c:	1000021e 	bne	r2,zero,812688 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
  812680:	e03fff15 	stw	zero,-4(fp)
  812684:	00002506 	br	81271c <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  812688:	e0bffd17 	ldw	r2,-12(fp)
  81268c:	1004c03a 	cmpne	r2,r2,zero
  812690:	1000051e 	bne	r2,zero,8126a8 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  812694:	e0fffe17 	ldw	r3,-8(fp)
  812698:	00801b84 	movi	r2,110
  81269c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8126a0:	e03fff15 	stw	zero,-4(fp)
  8126a4:	00001d06 	br	81271c <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  8126a8:	e0bffd17 	ldw	r2,-12(fp)
  8126ac:	10800003 	ldbu	r2,0(r2)
  8126b0:	10803fcc 	andi	r2,r2,255
  8126b4:	10800160 	cmpeqi	r2,r2,5
  8126b8:	1000051e 	bne	r2,zero,8126d0 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  8126bc:	e0fffe17 	ldw	r3,-8(fp)
  8126c0:	00800044 	movi	r2,1
  8126c4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8126c8:	e03fff15 	stw	zero,-4(fp)
  8126cc:	00001306 	br	81271c <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8126d0:	0005303a 	rdctl	r2,status
  8126d4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8126d8:	e0fffa17 	ldw	r3,-24(fp)
  8126dc:	00bfff84 	movi	r2,-2
  8126e0:	1884703a 	and	r2,r3,r2
  8126e4:	1001703a 	wrctl	status,r2
  
  return context;
  8126e8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  8126ec:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
  8126f0:	e0bffd17 	ldw	r2,-12(fp)
  8126f4:	1080020b 	ldhu	r2,8(r2)
  8126f8:	e0bffc0d 	sth	r2,-16(fp)
  8126fc:	e0bffb17 	ldw	r2,-20(fp)
  812700:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812704:	e0bff917 	ldw	r2,-28(fp)
  812708:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81270c:	e0bffe17 	ldw	r2,-8(fp)
  812710:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  812714:	e0bffc0b 	ldhu	r2,-16(fp)
  812718:	e0bfff15 	stw	r2,-4(fp)
  81271c:	e0bfff17 	ldw	r2,-4(fp)
}
  812720:	e037883a 	mov	sp,fp
  812724:	df000017 	ldw	fp,0(sp)
  812728:	dec00104 	addi	sp,sp,4
  81272c:	f800283a 	ret

00812730 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  812730:	defff804 	addi	sp,sp,-32
  812734:	df000715 	stw	fp,28(sp)
  812738:	df000704 	addi	fp,sp,28
  81273c:	e13ffb15 	stw	r4,-20(fp)
  812740:	e17ffc15 	stw	r5,-16(fp)
  812744:	e0800117 	ldw	r2,4(fp)
  812748:	e1bffd0d 	sth	r6,-12(fp)
  81274c:	e1fffe05 	stb	r7,-8(fp)
  812750:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  812754:	008020b4 	movhi	r2,130
  812758:	10b7bd04 	addi	r2,r2,-8460
  81275c:	10c00017 	ldw	r3,0(r2)
  812760:	008020b4 	movhi	r2,130
  812764:	10b7bd04 	addi	r2,r2,-8460
  812768:	10800017 	ldw	r2,0(r2)
  81276c:	10800c03 	ldbu	r2,48(r2)
  812770:	10800814 	ori	r2,r2,32
  812774:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  812778:	008020b4 	movhi	r2,130
  81277c:	10b7bd04 	addi	r2,r2,-8460
  812780:	10800017 	ldw	r2,0(r2)
  812784:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  812788:	008020b4 	movhi	r2,130
  81278c:	10b7bd04 	addi	r2,r2,-8460
  812790:	10c00017 	ldw	r3,0(r2)
  812794:	e0bfff0b 	ldhu	r2,-4(fp)
  812798:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  81279c:	008020b4 	movhi	r2,130
  8127a0:	10b7bd04 	addi	r2,r2,-8460
  8127a4:	10c00017 	ldw	r3,0(r2)
  8127a8:	e0bffc17 	ldw	r2,-16(fp)
  8127ac:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  8127b0:	e0fffc17 	ldw	r3,-16(fp)
  8127b4:	e0bffd0b 	ldhu	r2,-12(fp)
  8127b8:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  8127bc:	e0fffc17 	ldw	r3,-16(fp)
  8127c0:	e0bffe03 	ldbu	r2,-8(fp)
  8127c4:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  8127c8:	008020b4 	movhi	r2,130
  8127cc:	10b7bd04 	addi	r2,r2,-8460
  8127d0:	10c00017 	ldw	r3,0(r2)
  8127d4:	e0bffc17 	ldw	r2,-16(fp)
  8127d8:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  8127dc:	e0bffb17 	ldw	r2,-20(fp)
  8127e0:	10c00117 	ldw	r3,4(r2)
  8127e4:	e0bffc17 	ldw	r2,-16(fp)
  8127e8:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  8127ec:	e0bffc17 	ldw	r2,-16(fp)
  8127f0:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  8127f4:	e0fffc17 	ldw	r3,-16(fp)
  8127f8:	e0bffb17 	ldw	r2,-20(fp)
  8127fc:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  812800:	e0bffb17 	ldw	r2,-20(fp)
  812804:	10800117 	ldw	r2,4(r2)
  812808:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  81280c:	e0bffa17 	ldw	r2,-24(fp)
  812810:	1005003a 	cmpeq	r2,r2,zero
  812814:	1000031e 	bne	r2,zero,812824 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  812818:	e0fffa17 	ldw	r3,-24(fp)
  81281c:	e0bffc17 	ldw	r2,-16(fp)
  812820:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  812824:	e0fffb17 	ldw	r3,-20(fp)
  812828:	e0bffc17 	ldw	r2,-16(fp)
  81282c:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  812830:	008020b4 	movhi	r2,130
  812834:	10b7bd04 	addi	r2,r2,-8460
  812838:	10800017 	ldw	r2,0(r2)
  81283c:	10800d03 	ldbu	r2,52(r2)
  812840:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  812844:	e13ff903 	ldbu	r4,-28(fp)
  812848:	e0fff903 	ldbu	r3,-28(fp)
  81284c:	008020b4 	movhi	r2,130
  812850:	10b7ba44 	addi	r2,r2,-8471
  812854:	10c5883a 	add	r2,r2,r3
  812858:	10800003 	ldbu	r2,0(r2)
  81285c:	1007883a 	mov	r3,r2
  812860:	008020b4 	movhi	r2,130
  812864:	10b7bd04 	addi	r2,r2,-8460
  812868:	10800017 	ldw	r2,0(r2)
  81286c:	10800d43 	ldbu	r2,53(r2)
  812870:	0084303a 	nor	r2,zero,r2
  812874:	1884703a 	and	r2,r3,r2
  812878:	1007883a 	mov	r3,r2
  81287c:	008020b4 	movhi	r2,130
  812880:	10b7ba44 	addi	r2,r2,-8471
  812884:	1105883a 	add	r2,r2,r4
  812888:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  81288c:	e0fff903 	ldbu	r3,-28(fp)
  812890:	008020b4 	movhi	r2,130
  812894:	10b7ba44 	addi	r2,r2,-8471
  812898:	10c5883a 	add	r2,r2,r3
  81289c:	10800003 	ldbu	r2,0(r2)
  8128a0:	10803fcc 	andi	r2,r2,255
  8128a4:	1004c03a 	cmpne	r2,r2,zero
  8128a8:	10000e1e 	bne	r2,zero,8128e4 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  8128ac:	008020b4 	movhi	r2,130
  8128b0:	10b7bd04 	addi	r2,r2,-8460
  8128b4:	10800017 	ldw	r2,0(r2)
  8128b8:	10800d83 	ldbu	r2,54(r2)
  8128bc:	0084303a 	nor	r2,zero,r2
  8128c0:	1007883a 	mov	r3,r2
  8128c4:	008020b4 	movhi	r2,130
  8128c8:	10b7ba04 	addi	r2,r2,-8472
  8128cc:	10800003 	ldbu	r2,0(r2)
  8128d0:	1884703a 	and	r2,r3,r2
  8128d4:	1007883a 	mov	r3,r2
  8128d8:	008020b4 	movhi	r2,130
  8128dc:	10b7ba04 	addi	r2,r2,-8472
  8128e0:	10c00005 	stb	r3,0(r2)
    }
}
  8128e4:	e037883a 	mov	sp,fp
  8128e8:	df000017 	ldw	fp,0(sp)
  8128ec:	dec00104 	addi	sp,sp,4
  8128f0:	f800283a 	ret

008128f4 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  8128f4:	defffb04 	addi	sp,sp,-20
  8128f8:	dfc00415 	stw	ra,16(sp)
  8128fc:	df000315 	stw	fp,12(sp)
  812900:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  812904:	010020b4 	movhi	r4,130
  812908:	2107cf04 	addi	r4,r4,7996
  81290c:	0140dc04 	movi	r5,880
  812910:	08109240 	call	810924 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  812914:	008020b4 	movhi	r2,130
  812918:	1087cf04 	addi	r2,r2,7996
  81291c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  812920:	008020b4 	movhi	r2,130
  812924:	1087da04 	addi	r2,r2,8040
  812928:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  81292c:	e03fff0d 	sth	zero,-4(fp)
  812930:	00001306 	br	812980 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  812934:	e0bffe17 	ldw	r2,-8(fp)
  812938:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  81293c:	e0fffe17 	ldw	r3,-8(fp)
  812940:	e0bffd17 	ldw	r2,-12(fp)
  812944:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  812948:	e0fffe17 	ldw	r3,-8(fp)
  81294c:	00800fc4 	movi	r2,63
  812950:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  812954:	e0bffe17 	ldw	r2,-8(fp)
  812958:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  81295c:	e0bffe17 	ldw	r2,-8(fp)
  812960:	10800b04 	addi	r2,r2,44
  812964:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  812968:	e0bffd17 	ldw	r2,-12(fp)
  81296c:	10800b04 	addi	r2,r2,44
  812970:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  812974:	e0bfff0b 	ldhu	r2,-4(fp)
  812978:	10800044 	addi	r2,r2,1
  81297c:	e0bfff0d 	sth	r2,-4(fp)
  812980:	e0bfff0b 	ldhu	r2,-4(fp)
  812984:	108004f0 	cmpltui	r2,r2,19
  812988:	103fea1e 	bne	r2,zero,812934 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  81298c:	e0bffe17 	ldw	r2,-8(fp)
  812990:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  812994:	e0bffe17 	ldw	r2,-8(fp)
  812998:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  81299c:	e0fffe17 	ldw	r3,-8(fp)
  8129a0:	00800fc4 	movi	r2,63
  8129a4:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  8129a8:	e0bffe17 	ldw	r2,-8(fp)
  8129ac:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  8129b0:	00c020b4 	movhi	r3,130
  8129b4:	18f7bf04 	addi	r3,r3,-8452
  8129b8:	008020b4 	movhi	r2,130
  8129bc:	1087cf04 	addi	r2,r2,7996
  8129c0:	18800015 	stw	r2,0(r3)
#endif
}
  8129c4:	e037883a 	mov	sp,fp
  8129c8:	dfc00117 	ldw	ra,4(sp)
  8129cc:	df000017 	ldw	fp,0(sp)
  8129d0:	dec00204 	addi	sp,sp,8
  8129d4:	f800283a 	ret

008129d8 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  8129d8:	defffa04 	addi	sp,sp,-24
  8129dc:	dfc00515 	stw	ra,20(sp)
  8129e0:	df000415 	stw	fp,16(sp)
  8129e4:	df000404 	addi	fp,sp,16
  8129e8:	e13ffe15 	stw	r4,-8(fp)
  8129ec:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  8129f0:	e0bffe17 	ldw	r2,-8(fp)
  8129f4:	10800217 	ldw	r2,8(r2)
  8129f8:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  8129fc:	e0bffd17 	ldw	r2,-12(fp)
  812a00:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  812a04:	e0fffd17 	ldw	r3,-12(fp)
  812a08:	e0bfff0b 	ldhu	r2,-4(fp)
  812a0c:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  812a10:	e0bffd17 	ldw	r2,-12(fp)
  812a14:	10c00c03 	ldbu	r3,48(r2)
  812a18:	00bff7c4 	movi	r2,-33
  812a1c:	1884703a 	and	r2,r3,r2
  812a20:	1007883a 	mov	r3,r2
  812a24:	e0bffd17 	ldw	r2,-12(fp)
  812a28:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  812a2c:	e0bffd17 	ldw	r2,-12(fp)
  812a30:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  812a34:	e0bffd17 	ldw	r2,-12(fp)
  812a38:	10800c03 	ldbu	r2,48(r2)
  812a3c:	10803fcc 	andi	r2,r2,255
  812a40:	1004c03a 	cmpne	r2,r2,zero
  812a44:	10001f1e 	bne	r2,zero,812ac4 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  812a48:	e0bffd17 	ldw	r2,-12(fp)
  812a4c:	10c00d83 	ldbu	r3,54(r2)
  812a50:	008020b4 	movhi	r2,130
  812a54:	10b7ba04 	addi	r2,r2,-8472
  812a58:	10800003 	ldbu	r2,0(r2)
  812a5c:	1884b03a 	or	r2,r3,r2
  812a60:	1007883a 	mov	r3,r2
  812a64:	008020b4 	movhi	r2,130
  812a68:	10b7ba04 	addi	r2,r2,-8472
  812a6c:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  812a70:	e0bffd17 	ldw	r2,-12(fp)
  812a74:	10800d03 	ldbu	r2,52(r2)
  812a78:	11003fcc 	andi	r4,r2,255
  812a7c:	e0bffd17 	ldw	r2,-12(fp)
  812a80:	10800d03 	ldbu	r2,52(r2)
  812a84:	10c03fcc 	andi	r3,r2,255
  812a88:	008020b4 	movhi	r2,130
  812a8c:	10b7ba44 	addi	r2,r2,-8471
  812a90:	10c5883a 	add	r2,r2,r3
  812a94:	10c00003 	ldbu	r3,0(r2)
  812a98:	e0bffd17 	ldw	r2,-12(fp)
  812a9c:	10800d43 	ldbu	r2,53(r2)
  812aa0:	1884b03a 	or	r2,r3,r2
  812aa4:	1007883a 	mov	r3,r2
  812aa8:	008020b4 	movhi	r2,130
  812aac:	10b7ba44 	addi	r2,r2,-8471
  812ab0:	1105883a 	add	r2,r2,r4
  812ab4:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
  812ab8:	00800044 	movi	r2,1
  812abc:	e0bffc05 	stb	r2,-16(fp)
  812ac0:	00000106 	br	812ac8 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
  812ac4:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  812ac8:	e13ffe17 	ldw	r4,-8(fp)
  812acc:	0812ae80 	call	812ae8 <OS_FlagUnlink>
    return (sched);
  812ad0:	e0bffc03 	ldbu	r2,-16(fp)
}
  812ad4:	e037883a 	mov	sp,fp
  812ad8:	dfc00117 	ldw	ra,4(sp)
  812adc:	df000017 	ldw	fp,0(sp)
  812ae0:	dec00204 	addi	sp,sp,8
  812ae4:	f800283a 	ret

00812ae8 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  812ae8:	defffa04 	addi	sp,sp,-24
  812aec:	df000515 	stw	fp,20(sp)
  812af0:	df000504 	addi	fp,sp,20
  812af4:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  812af8:	e0bfff17 	ldw	r2,-4(fp)
  812afc:	10800117 	ldw	r2,4(r2)
  812b00:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  812b04:	e0bfff17 	ldw	r2,-4(fp)
  812b08:	10800017 	ldw	r2,0(r2)
  812b0c:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  812b10:	e0bffc17 	ldw	r2,-16(fp)
  812b14:	1004c03a 	cmpne	r2,r2,zero
  812b18:	10000c1e 	bne	r2,zero,812b4c <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  812b1c:	e0bfff17 	ldw	r2,-4(fp)
  812b20:	10800317 	ldw	r2,12(r2)
  812b24:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  812b28:	e0fffd17 	ldw	r3,-12(fp)
  812b2c:	e0bffb17 	ldw	r2,-20(fp)
  812b30:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  812b34:	e0bffb17 	ldw	r2,-20(fp)
  812b38:	1005003a 	cmpeq	r2,r2,zero
  812b3c:	10000c1e 	bne	r2,zero,812b70 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  812b40:	e0bffb17 	ldw	r2,-20(fp)
  812b44:	10000115 	stw	zero,4(r2)
  812b48:	00000906 	br	812b70 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  812b4c:	e0fffc17 	ldw	r3,-16(fp)
  812b50:	e0bffb17 	ldw	r2,-20(fp)
  812b54:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  812b58:	e0bffb17 	ldw	r2,-20(fp)
  812b5c:	1005003a 	cmpeq	r2,r2,zero
  812b60:	1000031e 	bne	r2,zero,812b70 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  812b64:	e0fffb17 	ldw	r3,-20(fp)
  812b68:	e0bffc17 	ldw	r2,-16(fp)
  812b6c:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  812b70:	e0bfff17 	ldw	r2,-4(fp)
  812b74:	10800217 	ldw	r2,8(r2)
  812b78:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  812b7c:	e0bffe17 	ldw	r2,-8(fp)
  812b80:	10000a15 	stw	zero,40(r2)
#endif
}
  812b84:	e037883a 	mov	sp,fp
  812b88:	df000017 	ldw	fp,0(sp)
  812b8c:	dec00104 	addi	sp,sp,4
  812b90:	f800283a 	ret

00812b94 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  812b94:	defff304 	addi	sp,sp,-52
  812b98:	df000c15 	stw	fp,48(sp)
  812b9c:	df000c04 	addi	fp,sp,48
  812ba0:	e13ffb15 	stw	r4,-20(fp)
  812ba4:	e17ffc15 	stw	r5,-16(fp)
  812ba8:	e1bffd15 	stw	r6,-12(fp)
  812bac:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  812bb0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  812bb4:	e0bffe17 	ldw	r2,-8(fp)
  812bb8:	1004c03a 	cmpne	r2,r2,zero
  812bbc:	1000021e 	bne	r2,zero,812bc8 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
  812bc0:	e03fff15 	stw	zero,-4(fp)
  812bc4:	00007506 	br	812d9c <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  812bc8:	e0bffb17 	ldw	r2,-20(fp)
  812bcc:	1004c03a 	cmpne	r2,r2,zero
  812bd0:	1000051e 	bne	r2,zero,812be8 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  812bd4:	e0fffe17 	ldw	r3,-8(fp)
  812bd8:	00801884 	movi	r2,98
  812bdc:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  812be0:	e03fff15 	stw	zero,-4(fp)
  812be4:	00006d06 	br	812d9c <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  812be8:	e0bffb17 	ldw	r2,-20(fp)
  812bec:	108000cc 	andi	r2,r2,3
  812bf0:	1005003a 	cmpeq	r2,r2,zero
  812bf4:	1000051e 	bne	r2,zero,812c0c <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  812bf8:	e0fffe17 	ldw	r3,-8(fp)
  812bfc:	00801884 	movi	r2,98
  812c00:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  812c04:	e03fff15 	stw	zero,-4(fp)
  812c08:	00006406 	br	812d9c <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  812c0c:	e0bffc17 	ldw	r2,-16(fp)
  812c10:	108000a8 	cmpgeui	r2,r2,2
  812c14:	1000051e 	bne	r2,zero,812c2c <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  812c18:	e0fffe17 	ldw	r3,-8(fp)
  812c1c:	008016c4 	movi	r2,91
  812c20:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  812c24:	e03fff15 	stw	zero,-4(fp)
  812c28:	00005c06 	br	812d9c <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  812c2c:	e0bffd17 	ldw	r2,-12(fp)
  812c30:	10800128 	cmpgeui	r2,r2,4
  812c34:	1000051e 	bne	r2,zero,812c4c <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  812c38:	e0fffe17 	ldw	r3,-8(fp)
  812c3c:	00801704 	movi	r2,92
  812c40:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  812c44:	e03fff15 	stw	zero,-4(fp)
  812c48:	00005406 	br	812d9c <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812c4c:	0005303a 	rdctl	r2,status
  812c50:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812c54:	e0fff517 	ldw	r3,-44(fp)
  812c58:	00bfff84 	movi	r2,-2
  812c5c:	1884703a 	and	r2,r3,r2
  812c60:	1001703a 	wrctl	status,r2
  
  return context;
  812c64:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  812c68:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  812c6c:	008020b4 	movhi	r2,130
  812c70:	10b7b704 	addi	r2,r2,-8484
  812c74:	10800017 	ldw	r2,0(r2)
  812c78:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  812c7c:	008020b4 	movhi	r2,130
  812c80:	10b7b704 	addi	r2,r2,-8484
  812c84:	10800017 	ldw	r2,0(r2)
  812c88:	1005003a 	cmpeq	r2,r2,zero
  812c8c:	1000081e 	bne	r2,zero,812cb0 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  812c90:	008020b4 	movhi	r2,130
  812c94:	10b7b704 	addi	r2,r2,-8484
  812c98:	10800017 	ldw	r2,0(r2)
  812c9c:	10800117 	ldw	r2,4(r2)
  812ca0:	1007883a 	mov	r3,r2
  812ca4:	008020b4 	movhi	r2,130
  812ca8:	10b7b704 	addi	r2,r2,-8484
  812cac:	10c00015 	stw	r3,0(r2)
  812cb0:	e0bff617 	ldw	r2,-40(fp)
  812cb4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812cb8:	e0bff417 	ldw	r2,-48(fp)
  812cbc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  812cc0:	e0bffa17 	ldw	r2,-24(fp)
  812cc4:	1004c03a 	cmpne	r2,r2,zero
  812cc8:	1000051e 	bne	r2,zero,812ce0 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
  812ccc:	e0fffe17 	ldw	r3,-8(fp)
  812cd0:	00801684 	movi	r2,90
  812cd4:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  812cd8:	e03fff15 	stw	zero,-4(fp)
  812cdc:	00002f06 	br	812d9c <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  812ce0:	e0bffb17 	ldw	r2,-20(fp)
  812ce4:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  812ce8:	e0bffb17 	ldw	r2,-20(fp)
  812cec:	1007883a 	mov	r3,r2
  812cf0:	e0bffd17 	ldw	r2,-12(fp)
  812cf4:	1885883a 	add	r2,r3,r2
  812cf8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
  812cfc:	e03ff715 	stw	zero,-36(fp)
  812d00:	00000d06 	br	812d38 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  812d04:	e0fff817 	ldw	r3,-32(fp)
  812d08:	e0bff917 	ldw	r2,-28(fp)
  812d0c:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  812d10:	e0bff917 	ldw	r2,-28(fp)
  812d14:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  812d18:	e0bff917 	ldw	r2,-28(fp)
  812d1c:	1007883a 	mov	r3,r2
  812d20:	e0bffd17 	ldw	r2,-12(fp)
  812d24:	1885883a 	add	r2,r3,r2
  812d28:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  812d2c:	e0bff717 	ldw	r2,-36(fp)
  812d30:	10800044 	addi	r2,r2,1
  812d34:	e0bff715 	stw	r2,-36(fp)
  812d38:	e0bffc17 	ldw	r2,-16(fp)
  812d3c:	10ffffc4 	addi	r3,r2,-1
  812d40:	e0bff717 	ldw	r2,-36(fp)
  812d44:	10ffef36 	bltu	r2,r3,812d04 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  812d48:	e0bff817 	ldw	r2,-32(fp)
  812d4c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  812d50:	e0fffa17 	ldw	r3,-24(fp)
  812d54:	e0bffb17 	ldw	r2,-20(fp)
  812d58:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  812d5c:	e0fffa17 	ldw	r3,-24(fp)
  812d60:	e0bffb17 	ldw	r2,-20(fp)
  812d64:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  812d68:	e0fffa17 	ldw	r3,-24(fp)
  812d6c:	e0bffc17 	ldw	r2,-16(fp)
  812d70:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
  812d74:	e0fffa17 	ldw	r3,-24(fp)
  812d78:	e0bffc17 	ldw	r2,-16(fp)
  812d7c:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  812d80:	e0fffa17 	ldw	r3,-24(fp)
  812d84:	e0bffd17 	ldw	r2,-12(fp)
  812d88:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
  812d8c:	e0bffe17 	ldw	r2,-8(fp)
  812d90:	10000005 	stb	zero,0(r2)
    return (pmem);
  812d94:	e0bffa17 	ldw	r2,-24(fp)
  812d98:	e0bfff15 	stw	r2,-4(fp)
  812d9c:	e0bfff17 	ldw	r2,-4(fp)
}
  812da0:	e037883a 	mov	sp,fp
  812da4:	df000017 	ldw	fp,0(sp)
  812da8:	dec00104 	addi	sp,sp,4
  812dac:	f800283a 	ret

00812db0 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  812db0:	defff704 	addi	sp,sp,-36
  812db4:	df000815 	stw	fp,32(sp)
  812db8:	df000804 	addi	fp,sp,32
  812dbc:	e13ffd15 	stw	r4,-12(fp)
  812dc0:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  812dc4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  812dc8:	e0bffe17 	ldw	r2,-8(fp)
  812dcc:	1004c03a 	cmpne	r2,r2,zero
  812dd0:	1000021e 	bne	r2,zero,812ddc <OSMemGet+0x2c>
        return ((void *)0);
  812dd4:	e03fff15 	stw	zero,-4(fp)
  812dd8:	00003106 	br	812ea0 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  812ddc:	e0bffd17 	ldw	r2,-12(fp)
  812de0:	1004c03a 	cmpne	r2,r2,zero
  812de4:	1000051e 	bne	r2,zero,812dfc <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  812de8:	e0fffe17 	ldw	r3,-8(fp)
  812dec:	00801804 	movi	r2,96
  812df0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  812df4:	e03fff15 	stw	zero,-4(fp)
  812df8:	00002906 	br	812ea0 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812dfc:	0005303a 	rdctl	r2,status
  812e00:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812e04:	e0fffa17 	ldw	r3,-24(fp)
  812e08:	00bfff84 	movi	r2,-2
  812e0c:	1884703a 	and	r2,r3,r2
  812e10:	1001703a 	wrctl	status,r2
  
  return context;
  812e14:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  812e18:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  812e1c:	e0bffd17 	ldw	r2,-12(fp)
  812e20:	10800417 	ldw	r2,16(r2)
  812e24:	1005003a 	cmpeq	r2,r2,zero
  812e28:	1000151e 	bne	r2,zero,812e80 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  812e2c:	e0bffd17 	ldw	r2,-12(fp)
  812e30:	10800117 	ldw	r2,4(r2)
  812e34:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  812e38:	e0bffc17 	ldw	r2,-16(fp)
  812e3c:	10c00017 	ldw	r3,0(r2)
  812e40:	e0bffd17 	ldw	r2,-12(fp)
  812e44:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  812e48:	e0bffd17 	ldw	r2,-12(fp)
  812e4c:	10800417 	ldw	r2,16(r2)
  812e50:	10ffffc4 	addi	r3,r2,-1
  812e54:	e0bffd17 	ldw	r2,-12(fp)
  812e58:	10c00415 	stw	r3,16(r2)
  812e5c:	e0bffb17 	ldw	r2,-20(fp)
  812e60:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812e64:	e0bff917 	ldw	r2,-28(fp)
  812e68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  812e6c:	e0bffe17 	ldw	r2,-8(fp)
  812e70:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  812e74:	e0bffc17 	ldw	r2,-16(fp)
  812e78:	e0bfff15 	stw	r2,-4(fp)
  812e7c:	00000806 	br	812ea0 <OSMemGet+0xf0>
  812e80:	e0bffb17 	ldw	r2,-20(fp)
  812e84:	e0bff815 	stw	r2,-32(fp)
  812e88:	e0bff817 	ldw	r2,-32(fp)
  812e8c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  812e90:	e0fffe17 	ldw	r3,-8(fp)
  812e94:	00801744 	movi	r2,93
  812e98:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  812e9c:	e03fff15 	stw	zero,-4(fp)
  812ea0:	e0bfff17 	ldw	r2,-4(fp)
}
  812ea4:	e037883a 	mov	sp,fp
  812ea8:	df000017 	ldw	fp,0(sp)
  812eac:	dec00104 	addi	sp,sp,4
  812eb0:	f800283a 	ret

00812eb4 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  812eb4:	defff604 	addi	sp,sp,-40
  812eb8:	dfc00915 	stw	ra,36(sp)
  812ebc:	df000815 	stw	fp,32(sp)
  812ec0:	df000804 	addi	fp,sp,32
  812ec4:	e13ffc15 	stw	r4,-16(fp)
  812ec8:	e17ffd15 	stw	r5,-12(fp)
  812ecc:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812ed0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  812ed4:	e0bffe17 	ldw	r2,-8(fp)
  812ed8:	1004c03a 	cmpne	r2,r2,zero
  812edc:	1000021e 	bne	r2,zero,812ee8 <OSMemNameGet+0x34>
        return (0);
  812ee0:	e03fff15 	stw	zero,-4(fp)
  812ee4:	00003006 	br	812fa8 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  812ee8:	e0bffc17 	ldw	r2,-16(fp)
  812eec:	1004c03a 	cmpne	r2,r2,zero
  812ef0:	1000051e 	bne	r2,zero,812f08 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  812ef4:	e0fffe17 	ldw	r3,-8(fp)
  812ef8:	00801804 	movi	r2,96
  812efc:	18800005 	stb	r2,0(r3)
        return (0);
  812f00:	e03fff15 	stw	zero,-4(fp)
  812f04:	00002806 	br	812fa8 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  812f08:	e0bffd17 	ldw	r2,-12(fp)
  812f0c:	1004c03a 	cmpne	r2,r2,zero
  812f10:	1000051e 	bne	r2,zero,812f28 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  812f14:	e0fffe17 	ldw	r3,-8(fp)
  812f18:	00800304 	movi	r2,12
  812f1c:	18800005 	stb	r2,0(r3)
        return (0);
  812f20:	e03fff15 	stw	zero,-4(fp)
  812f24:	00002006 	br	812fa8 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  812f28:	008020b4 	movhi	r2,130
  812f2c:	10b7bc04 	addi	r2,r2,-8464
  812f30:	10800003 	ldbu	r2,0(r2)
  812f34:	10803fcc 	andi	r2,r2,255
  812f38:	1005003a 	cmpeq	r2,r2,zero
  812f3c:	1000051e 	bne	r2,zero,812f54 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  812f40:	e0fffe17 	ldw	r3,-8(fp)
  812f44:	00800444 	movi	r2,17
  812f48:	18800005 	stb	r2,0(r3)
        return (0);
  812f4c:	e03fff15 	stw	zero,-4(fp)
  812f50:	00001506 	br	812fa8 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812f54:	0005303a 	rdctl	r2,status
  812f58:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812f5c:	e0fff917 	ldw	r3,-28(fp)
  812f60:	00bfff84 	movi	r2,-2
  812f64:	1884703a 	and	r2,r3,r2
  812f68:	1001703a 	wrctl	status,r2
  
  return context;
  812f6c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  812f70:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  812f74:	e0bffc17 	ldw	r2,-16(fp)
  812f78:	11400504 	addi	r5,r2,20
  812f7c:	e13ffd17 	ldw	r4,-12(fp)
  812f80:	0810b280 	call	810b28 <OS_StrCopy>
  812f84:	e0bffb05 	stb	r2,-20(fp)
  812f88:	e0bffa17 	ldw	r2,-24(fp)
  812f8c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812f90:	e0bff817 	ldw	r2,-32(fp)
  812f94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  812f98:	e0bffe17 	ldw	r2,-8(fp)
  812f9c:	10000005 	stb	zero,0(r2)
    return (len);
  812fa0:	e0bffb03 	ldbu	r2,-20(fp)
  812fa4:	e0bfff15 	stw	r2,-4(fp)
  812fa8:	e0bfff17 	ldw	r2,-4(fp)
}
  812fac:	e037883a 	mov	sp,fp
  812fb0:	dfc00117 	ldw	ra,4(sp)
  812fb4:	df000017 	ldw	fp,0(sp)
  812fb8:	dec00204 	addi	sp,sp,8
  812fbc:	f800283a 	ret

00812fc0 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  812fc0:	defff604 	addi	sp,sp,-40
  812fc4:	dfc00915 	stw	ra,36(sp)
  812fc8:	df000815 	stw	fp,32(sp)
  812fcc:	df000804 	addi	fp,sp,32
  812fd0:	e13ffd15 	stw	r4,-12(fp)
  812fd4:	e17ffe15 	stw	r5,-8(fp)
  812fd8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812fdc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  812fe0:	e0bfff17 	ldw	r2,-4(fp)
  812fe4:	1005003a 	cmpeq	r2,r2,zero
  812fe8:	1000381e 	bne	r2,zero,8130cc <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  812fec:	e0bffd17 	ldw	r2,-12(fp)
  812ff0:	1004c03a 	cmpne	r2,r2,zero
  812ff4:	1000041e 	bne	r2,zero,813008 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  812ff8:	e0ffff17 	ldw	r3,-4(fp)
  812ffc:	00801804 	movi	r2,96
  813000:	18800005 	stb	r2,0(r3)
        return;
  813004:	00003106 	br	8130cc <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  813008:	e0bffe17 	ldw	r2,-8(fp)
  81300c:	1004c03a 	cmpne	r2,r2,zero
  813010:	1000041e 	bne	r2,zero,813024 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  813014:	e0ffff17 	ldw	r3,-4(fp)
  813018:	00800304 	movi	r2,12
  81301c:	18800005 	stb	r2,0(r3)
        return;
  813020:	00002a06 	br	8130cc <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  813024:	008020b4 	movhi	r2,130
  813028:	10b7bc04 	addi	r2,r2,-8464
  81302c:	10800003 	ldbu	r2,0(r2)
  813030:	10803fcc 	andi	r2,r2,255
  813034:	1005003a 	cmpeq	r2,r2,zero
  813038:	1000041e 	bne	r2,zero,81304c <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  81303c:	e0ffff17 	ldw	r3,-4(fp)
  813040:	00800484 	movi	r2,18
  813044:	18800005 	stb	r2,0(r3)
        return;
  813048:	00002006 	br	8130cc <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81304c:	0005303a 	rdctl	r2,status
  813050:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813054:	e0fffa17 	ldw	r3,-24(fp)
  813058:	00bfff84 	movi	r2,-2
  81305c:	1884703a 	and	r2,r3,r2
  813060:	1001703a 	wrctl	status,r2
  
  return context;
  813064:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  813068:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  81306c:	e13ffe17 	ldw	r4,-8(fp)
  813070:	0810ba80 	call	810ba8 <OS_StrLen>
  813074:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  813078:	e0bffc03 	ldbu	r2,-16(fp)
  81307c:	10800830 	cmpltui	r2,r2,32
  813080:	1000081e 	bne	r2,zero,8130a4 <OSMemNameSet+0xe4>
  813084:	e0bffb17 	ldw	r2,-20(fp)
  813088:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81308c:	e0bff917 	ldw	r2,-28(fp)
  813090:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  813094:	e0ffff17 	ldw	r3,-4(fp)
  813098:	008018c4 	movi	r2,99
  81309c:	18800005 	stb	r2,0(r3)
        return;
  8130a0:	00000a06 	br	8130cc <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  8130a4:	e0bffd17 	ldw	r2,-12(fp)
  8130a8:	11000504 	addi	r4,r2,20
  8130ac:	e17ffe17 	ldw	r5,-8(fp)
  8130b0:	0810b280 	call	810b28 <OS_StrCopy>
  8130b4:	e0bffb17 	ldw	r2,-20(fp)
  8130b8:	e0bff815 	stw	r2,-32(fp)
  8130bc:	e0bff817 	ldw	r2,-32(fp)
  8130c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8130c4:	e0bfff17 	ldw	r2,-4(fp)
  8130c8:	10000005 	stb	zero,0(r2)
}
  8130cc:	e037883a 	mov	sp,fp
  8130d0:	dfc00117 	ldw	ra,4(sp)
  8130d4:	df000017 	ldw	fp,0(sp)
  8130d8:	dec00204 	addi	sp,sp,8
  8130dc:	f800283a 	ret

008130e0 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  8130e0:	defff804 	addi	sp,sp,-32
  8130e4:	df000715 	stw	fp,28(sp)
  8130e8:	df000704 	addi	fp,sp,28
  8130ec:	e13ffd15 	stw	r4,-12(fp)
  8130f0:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8130f4:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  8130f8:	e0bffd17 	ldw	r2,-12(fp)
  8130fc:	1004c03a 	cmpne	r2,r2,zero
  813100:	1000031e 	bne	r2,zero,813110 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  813104:	00801804 	movi	r2,96
  813108:	e0bfff15 	stw	r2,-4(fp)
  81310c:	00002b06 	br	8131bc <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  813110:	e0bffe17 	ldw	r2,-8(fp)
  813114:	1004c03a 	cmpne	r2,r2,zero
  813118:	1000031e 	bne	r2,zero,813128 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
  81311c:	008017c4 	movi	r2,95
  813120:	e0bfff15 	stw	r2,-4(fp)
  813124:	00002506 	br	8131bc <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813128:	0005303a 	rdctl	r2,status
  81312c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813130:	e0fffb17 	ldw	r3,-20(fp)
  813134:	00bfff84 	movi	r2,-2
  813138:	1884703a 	and	r2,r3,r2
  81313c:	1001703a 	wrctl	status,r2
  
  return context;
  813140:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  813144:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  813148:	e0bffd17 	ldw	r2,-12(fp)
  81314c:	10c00417 	ldw	r3,16(r2)
  813150:	e0bffd17 	ldw	r2,-12(fp)
  813154:	10800317 	ldw	r2,12(r2)
  813158:	18800736 	bltu	r3,r2,813178 <OSMemPut+0x98>
  81315c:	e0bffc17 	ldw	r2,-16(fp)
  813160:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813164:	e0bffa17 	ldw	r2,-24(fp)
  813168:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  81316c:	00801784 	movi	r2,94
  813170:	e0bfff15 	stw	r2,-4(fp)
  813174:	00001106 	br	8131bc <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  813178:	e0fffe17 	ldw	r3,-8(fp)
  81317c:	e0bffd17 	ldw	r2,-12(fp)
  813180:	10800117 	ldw	r2,4(r2)
  813184:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
  813188:	e0fffd17 	ldw	r3,-12(fp)
  81318c:	e0bffe17 	ldw	r2,-8(fp)
  813190:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  813194:	e0bffd17 	ldw	r2,-12(fp)
  813198:	10800417 	ldw	r2,16(r2)
  81319c:	10c00044 	addi	r3,r2,1
  8131a0:	e0bffd17 	ldw	r2,-12(fp)
  8131a4:	10c00415 	stw	r3,16(r2)
  8131a8:	e0bffc17 	ldw	r2,-16(fp)
  8131ac:	e0bff915 	stw	r2,-28(fp)
  8131b0:	e0bff917 	ldw	r2,-28(fp)
  8131b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  8131b8:	e03fff15 	stw	zero,-4(fp)
  8131bc:	e0bfff17 	ldw	r2,-4(fp)
}
  8131c0:	e037883a 	mov	sp,fp
  8131c4:	df000017 	ldw	fp,0(sp)
  8131c8:	dec00104 	addi	sp,sp,4
  8131cc:	f800283a 	ret

008131d0 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  8131d0:	defff904 	addi	sp,sp,-28
  8131d4:	df000615 	stw	fp,24(sp)
  8131d8:	df000604 	addi	fp,sp,24
  8131dc:	e13ffd15 	stw	r4,-12(fp)
  8131e0:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8131e4:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  8131e8:	e0bffd17 	ldw	r2,-12(fp)
  8131ec:	1004c03a 	cmpne	r2,r2,zero
  8131f0:	1000031e 	bne	r2,zero,813200 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  8131f4:	00801804 	movi	r2,96
  8131f8:	e0bfff15 	stw	r2,-4(fp)
  8131fc:	00002e06 	br	8132b8 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  813200:	e0bffe17 	ldw	r2,-8(fp)
  813204:	1004c03a 	cmpne	r2,r2,zero
  813208:	1000031e 	bne	r2,zero,813218 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
  81320c:	00801844 	movi	r2,97
  813210:	e0bfff15 	stw	r2,-4(fp)
  813214:	00002806 	br	8132b8 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813218:	0005303a 	rdctl	r2,status
  81321c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813220:	e0fffb17 	ldw	r3,-20(fp)
  813224:	00bfff84 	movi	r2,-2
  813228:	1884703a 	and	r2,r3,r2
  81322c:	1001703a 	wrctl	status,r2
  
  return context;
  813230:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  813234:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  813238:	e0bffd17 	ldw	r2,-12(fp)
  81323c:	10c00017 	ldw	r3,0(r2)
  813240:	e0bffe17 	ldw	r2,-8(fp)
  813244:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  813248:	e0bffd17 	ldw	r2,-12(fp)
  81324c:	10c00117 	ldw	r3,4(r2)
  813250:	e0bffe17 	ldw	r2,-8(fp)
  813254:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  813258:	e0bffd17 	ldw	r2,-12(fp)
  81325c:	10c00217 	ldw	r3,8(r2)
  813260:	e0bffe17 	ldw	r2,-8(fp)
  813264:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  813268:	e0bffd17 	ldw	r2,-12(fp)
  81326c:	10c00317 	ldw	r3,12(r2)
  813270:	e0bffe17 	ldw	r2,-8(fp)
  813274:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  813278:	e0bffd17 	ldw	r2,-12(fp)
  81327c:	10c00417 	ldw	r3,16(r2)
  813280:	e0bffe17 	ldw	r2,-8(fp)
  813284:	10c00415 	stw	r3,16(r2)
  813288:	e0bffc17 	ldw	r2,-16(fp)
  81328c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813290:	e0bffa17 	ldw	r2,-24(fp)
  813294:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  813298:	e0bffe17 	ldw	r2,-8(fp)
  81329c:	10c00317 	ldw	r3,12(r2)
  8132a0:	e0bffe17 	ldw	r2,-8(fp)
  8132a4:	10800417 	ldw	r2,16(r2)
  8132a8:	1887c83a 	sub	r3,r3,r2
  8132ac:	e0bffe17 	ldw	r2,-8(fp)
  8132b0:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  8132b4:	e03fff15 	stw	zero,-4(fp)
  8132b8:	e0bfff17 	ldw	r2,-4(fp)
}
  8132bc:	e037883a 	mov	sp,fp
  8132c0:	df000017 	ldw	fp,0(sp)
  8132c4:	dec00104 	addi	sp,sp,4
  8132c8:	f800283a 	ret

008132cc <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  8132cc:	defffc04 	addi	sp,sp,-16
  8132d0:	dfc00315 	stw	ra,12(sp)
  8132d4:	df000215 	stw	fp,8(sp)
  8132d8:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  8132dc:	010020b4 	movhi	r4,130
  8132e0:	2108ab04 	addi	r4,r4,8876
  8132e4:	01430c04 	movi	r5,3120
  8132e8:	08109240 	call	810924 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  8132ec:	008020b4 	movhi	r2,130
  8132f0:	1088ab04 	addi	r2,r2,8876
  8132f4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  8132f8:	e03ffe0d 	sth	zero,-8(fp)
  8132fc:	00001406 	br	813350 <OS_MemInit+0x84>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  813300:	e13ffe0b 	ldhu	r4,-8(fp)
  813304:	01400d04 	movi	r5,52
  813308:	080535c0 	call	80535c <__mulsi3>
  81330c:	1007883a 	mov	r3,r2
  813310:	008020b4 	movhi	r2,130
  813314:	1088b804 	addi	r2,r2,8928
  813318:	1887883a 	add	r3,r3,r2
  81331c:	e0bfff17 	ldw	r2,-4(fp)
  813320:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  813324:	e0ffff17 	ldw	r3,-4(fp)
  813328:	00800fc4 	movi	r2,63
  81332c:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  813330:	e0bfff17 	ldw	r2,-4(fp)
  813334:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  813338:	e0bfff17 	ldw	r2,-4(fp)
  81333c:	10800d04 	addi	r2,r2,52
  813340:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  813344:	e0bffe0b 	ldhu	r2,-8(fp)
  813348:	10800044 	addi	r2,r2,1
  81334c:	e0bffe0d 	sth	r2,-8(fp)
  813350:	e0bffe0b 	ldhu	r2,-8(fp)
  813354:	10800ef0 	cmpltui	r2,r2,59
  813358:	103fe91e 	bne	r2,zero,813300 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  81335c:	e0bfff17 	ldw	r2,-4(fp)
  813360:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  813364:	e0ffff17 	ldw	r3,-4(fp)
  813368:	00800fc4 	movi	r2,63
  81336c:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  813370:	e0bfff17 	ldw	r2,-4(fp)
  813374:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  813378:	00c020b4 	movhi	r3,130
  81337c:	18f7b704 	addi	r3,r3,-8484
  813380:	008020b4 	movhi	r2,130
  813384:	1088ab04 	addi	r2,r2,8876
  813388:	18800015 	stw	r2,0(r3)
#endif
}
  81338c:	e037883a 	mov	sp,fp
  813390:	dfc00117 	ldw	ra,4(sp)
  813394:	df000017 	ldw	fp,0(sp)
  813398:	dec00204 	addi	sp,sp,8
  81339c:	f800283a 	ret

008133a0 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  8133a0:	defff704 	addi	sp,sp,-36
  8133a4:	df000815 	stw	fp,32(sp)
  8133a8:	df000804 	addi	fp,sp,32
  8133ac:	e13ffd15 	stw	r4,-12(fp)
  8133b0:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8133b4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8133b8:	e0bffe17 	ldw	r2,-8(fp)
  8133bc:	1004c03a 	cmpne	r2,r2,zero
  8133c0:	1000021e 	bne	r2,zero,8133cc <OSQAccept+0x2c>
        return ((void *)0);
  8133c4:	e03fff15 	stw	zero,-4(fp)
  8133c8:	00004506 	br	8134e0 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  8133cc:	e0bffd17 	ldw	r2,-12(fp)
  8133d0:	1004c03a 	cmpne	r2,r2,zero
  8133d4:	1000051e 	bne	r2,zero,8133ec <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  8133d8:	e0fffe17 	ldw	r3,-8(fp)
  8133dc:	00800104 	movi	r2,4
  8133e0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  8133e4:	e03fff15 	stw	zero,-4(fp)
  8133e8:	00003d06 	br	8134e0 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  8133ec:	e0bffd17 	ldw	r2,-12(fp)
  8133f0:	10800003 	ldbu	r2,0(r2)
  8133f4:	10803fcc 	andi	r2,r2,255
  8133f8:	108000a0 	cmpeqi	r2,r2,2
  8133fc:	1000051e 	bne	r2,zero,813414 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  813400:	e0fffe17 	ldw	r3,-8(fp)
  813404:	00800044 	movi	r2,1
  813408:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81340c:	e03fff15 	stw	zero,-4(fp)
  813410:	00003306 	br	8134e0 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813414:	0005303a 	rdctl	r2,status
  813418:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81341c:	e0fff917 	ldw	r3,-28(fp)
  813420:	00bfff84 	movi	r2,-2
  813424:	1884703a 	and	r2,r3,r2
  813428:	1001703a 	wrctl	status,r2
  
  return context;
  81342c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  813430:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  813434:	e0bffd17 	ldw	r2,-12(fp)
  813438:	10800117 	ldw	r2,4(r2)
  81343c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  813440:	e0bffb17 	ldw	r2,-20(fp)
  813444:	1080058b 	ldhu	r2,22(r2)
  813448:	10bfffcc 	andi	r2,r2,65535
  81344c:	1005003a 	cmpeq	r2,r2,zero
  813450:	1000191e 	bne	r2,zero,8134b8 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  813454:	e0bffb17 	ldw	r2,-20(fp)
  813458:	10c00417 	ldw	r3,16(r2)
  81345c:	18800017 	ldw	r2,0(r3)
  813460:	e0bffc15 	stw	r2,-16(fp)
  813464:	18c00104 	addi	r3,r3,4
  813468:	e0bffb17 	ldw	r2,-20(fp)
  81346c:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  813470:	e0bffb17 	ldw	r2,-20(fp)
  813474:	1080058b 	ldhu	r2,22(r2)
  813478:	10bfffc4 	addi	r2,r2,-1
  81347c:	1007883a 	mov	r3,r2
  813480:	e0bffb17 	ldw	r2,-20(fp)
  813484:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  813488:	e0bffb17 	ldw	r2,-20(fp)
  81348c:	10c00417 	ldw	r3,16(r2)
  813490:	e0bffb17 	ldw	r2,-20(fp)
  813494:	10800217 	ldw	r2,8(r2)
  813498:	1880041e 	bne	r3,r2,8134ac <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
  81349c:	e0bffb17 	ldw	r2,-20(fp)
  8134a0:	10c00117 	ldw	r3,4(r2)
  8134a4:	e0bffb17 	ldw	r2,-20(fp)
  8134a8:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  8134ac:	e0bffe17 	ldw	r2,-8(fp)
  8134b0:	10000005 	stb	zero,0(r2)
  8134b4:	00000406 	br	8134c8 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  8134b8:	e0fffe17 	ldw	r3,-8(fp)
  8134bc:	008007c4 	movi	r2,31
  8134c0:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  8134c4:	e03ffc15 	stw	zero,-16(fp)
  8134c8:	e0bffa17 	ldw	r2,-24(fp)
  8134cc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8134d0:	e0bff817 	ldw	r2,-32(fp)
  8134d4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  8134d8:	e0bffc17 	ldw	r2,-16(fp)
  8134dc:	e0bfff15 	stw	r2,-4(fp)
  8134e0:	e0bfff17 	ldw	r2,-4(fp)
}
  8134e4:	e037883a 	mov	sp,fp
  8134e8:	df000017 	ldw	fp,0(sp)
  8134ec:	dec00104 	addi	sp,sp,4
  8134f0:	f800283a 	ret

008134f4 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  8134f4:	defff304 	addi	sp,sp,-52
  8134f8:	dfc00c15 	stw	ra,48(sp)
  8134fc:	df000b15 	stw	fp,44(sp)
  813500:	df000b04 	addi	fp,sp,44
  813504:	e13ffd15 	stw	r4,-12(fp)
  813508:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81350c:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  813510:	008020b4 	movhi	r2,130
  813514:	10b7bc04 	addi	r2,r2,-8464
  813518:	10800003 	ldbu	r2,0(r2)
  81351c:	10803fcc 	andi	r2,r2,255
  813520:	1005003a 	cmpeq	r2,r2,zero
  813524:	1000021e 	bne	r2,zero,813530 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  813528:	e03fff15 	stw	zero,-4(fp)
  81352c:	00007006 	br	8136f0 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813530:	0005303a 	rdctl	r2,status
  813534:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813538:	e0fff917 	ldw	r3,-28(fp)
  81353c:	00bfff84 	movi	r2,-2
  813540:	1884703a 	and	r2,r3,r2
  813544:	1001703a 	wrctl	status,r2
  
  return context;
  813548:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81354c:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  813550:	008020b4 	movhi	r2,130
  813554:	10b7bb04 	addi	r2,r2,-8468
  813558:	10800017 	ldw	r2,0(r2)
  81355c:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  813560:	008020b4 	movhi	r2,130
  813564:	10b7bb04 	addi	r2,r2,-8468
  813568:	10800017 	ldw	r2,0(r2)
  81356c:	1005003a 	cmpeq	r2,r2,zero
  813570:	1000081e 	bne	r2,zero,813594 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  813574:	008020b4 	movhi	r2,130
  813578:	10b7bb04 	addi	r2,r2,-8468
  81357c:	10800017 	ldw	r2,0(r2)
  813580:	10800117 	ldw	r2,4(r2)
  813584:	1007883a 	mov	r3,r2
  813588:	008020b4 	movhi	r2,130
  81358c:	10b7bb04 	addi	r2,r2,-8468
  813590:	10c00015 	stw	r3,0(r2)
  813594:	e0bffa17 	ldw	r2,-24(fp)
  813598:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81359c:	e0bff817 	ldw	r2,-32(fp)
  8135a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  8135a4:	e0bffc17 	ldw	r2,-16(fp)
  8135a8:	1005003a 	cmpeq	r2,r2,zero
  8135ac:	10004e1e 	bne	r2,zero,8136e8 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8135b0:	0005303a 	rdctl	r2,status
  8135b4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8135b8:	e0fff717 	ldw	r3,-36(fp)
  8135bc:	00bfff84 	movi	r2,-2
  8135c0:	1884703a 	and	r2,r3,r2
  8135c4:	1001703a 	wrctl	status,r2
  
  return context;
  8135c8:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
  8135cc:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  8135d0:	008020b4 	movhi	r2,130
  8135d4:	10b7b904 	addi	r2,r2,-8476
  8135d8:	10800017 	ldw	r2,0(r2)
  8135dc:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  8135e0:	e0bffb17 	ldw	r2,-20(fp)
  8135e4:	1005003a 	cmpeq	r2,r2,zero
  8135e8:	1000311e 	bne	r2,zero,8136b0 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  8135ec:	008020b4 	movhi	r2,130
  8135f0:	10b7b904 	addi	r2,r2,-8476
  8135f4:	10800017 	ldw	r2,0(r2)
  8135f8:	10c00017 	ldw	r3,0(r2)
  8135fc:	008020b4 	movhi	r2,130
  813600:	10b7b904 	addi	r2,r2,-8476
  813604:	10c00015 	stw	r3,0(r2)
  813608:	e0bffa17 	ldw	r2,-24(fp)
  81360c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813610:	e0bff617 	ldw	r2,-40(fp)
  813614:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  813618:	e0fffb17 	ldw	r3,-20(fp)
  81361c:	e0bffd17 	ldw	r2,-12(fp)
  813620:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
  813624:	e0bffe0b 	ldhu	r2,-8(fp)
  813628:	1085883a 	add	r2,r2,r2
  81362c:	1085883a 	add	r2,r2,r2
  813630:	1007883a 	mov	r3,r2
  813634:	e0bffd17 	ldw	r2,-12(fp)
  813638:	1887883a 	add	r3,r3,r2
  81363c:	e0bffb17 	ldw	r2,-20(fp)
  813640:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  813644:	e0fffb17 	ldw	r3,-20(fp)
  813648:	e0bffd17 	ldw	r2,-12(fp)
  81364c:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
  813650:	e0fffb17 	ldw	r3,-20(fp)
  813654:	e0bffd17 	ldw	r2,-12(fp)
  813658:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
  81365c:	e0fffb17 	ldw	r3,-20(fp)
  813660:	e0bffe0b 	ldhu	r2,-8(fp)
  813664:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
  813668:	e0bffb17 	ldw	r2,-20(fp)
  81366c:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  813670:	e0fffc17 	ldw	r3,-16(fp)
  813674:	00800084 	movi	r2,2
  813678:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
  81367c:	e0bffc17 	ldw	r2,-16(fp)
  813680:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  813684:	e0fffc17 	ldw	r3,-16(fp)
  813688:	e0bffb17 	ldw	r2,-20(fp)
  81368c:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  813690:	e0fffc17 	ldw	r3,-16(fp)
  813694:	00800fc4 	movi	r2,63
  813698:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  81369c:	e0bffc17 	ldw	r2,-16(fp)
  8136a0:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  8136a4:	e13ffc17 	ldw	r4,-16(fp)
  8136a8:	08105580 	call	810558 <OS_EventWaitListInit>
  8136ac:	00000e06 	br	8136e8 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  8136b0:	008020b4 	movhi	r2,130
  8136b4:	10b7bb04 	addi	r2,r2,-8468
  8136b8:	10c00017 	ldw	r3,0(r2)
  8136bc:	e0bffc17 	ldw	r2,-16(fp)
  8136c0:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  8136c4:	00c020b4 	movhi	r3,130
  8136c8:	18f7bb04 	addi	r3,r3,-8468
  8136cc:	e0bffc17 	ldw	r2,-16(fp)
  8136d0:	18800015 	stw	r2,0(r3)
  8136d4:	e0bffa17 	ldw	r2,-24(fp)
  8136d8:	e0bff515 	stw	r2,-44(fp)
  8136dc:	e0bff517 	ldw	r2,-44(fp)
  8136e0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  8136e4:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
  8136e8:	e0bffc17 	ldw	r2,-16(fp)
  8136ec:	e0bfff15 	stw	r2,-4(fp)
  8136f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8136f4:	e037883a 	mov	sp,fp
  8136f8:	dfc00117 	ldw	ra,4(sp)
  8136fc:	df000017 	ldw	fp,0(sp)
  813700:	dec00204 	addi	sp,sp,8
  813704:	f800283a 	ret

00813708 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  813708:	defff004 	addi	sp,sp,-64
  81370c:	dfc00f15 	stw	ra,60(sp)
  813710:	df000e15 	stw	fp,56(sp)
  813714:	df000e04 	addi	fp,sp,56
  813718:	e13ffb15 	stw	r4,-20(fp)
  81371c:	e1bffd15 	stw	r6,-12(fp)
  813720:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  813724:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  813728:	e0bffd17 	ldw	r2,-12(fp)
  81372c:	1004c03a 	cmpne	r2,r2,zero
  813730:	1000031e 	bne	r2,zero,813740 <OSQDel+0x38>
        return (pevent);
  813734:	e0bffb17 	ldw	r2,-20(fp)
  813738:	e0bfff15 	stw	r2,-4(fp)
  81373c:	0000ac06 	br	8139f0 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  813740:	e0bffb17 	ldw	r2,-20(fp)
  813744:	1004c03a 	cmpne	r2,r2,zero
  813748:	1000061e 	bne	r2,zero,813764 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  81374c:	e0fffd17 	ldw	r3,-12(fp)
  813750:	00800104 	movi	r2,4
  813754:	18800005 	stb	r2,0(r3)
        return (pevent);
  813758:	e0fffb17 	ldw	r3,-20(fp)
  81375c:	e0ffff15 	stw	r3,-4(fp)
  813760:	0000a306 	br	8139f0 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  813764:	e0bffb17 	ldw	r2,-20(fp)
  813768:	10800003 	ldbu	r2,0(r2)
  81376c:	10803fcc 	andi	r2,r2,255
  813770:	108000a0 	cmpeqi	r2,r2,2
  813774:	1000061e 	bne	r2,zero,813790 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  813778:	e0fffd17 	ldw	r3,-12(fp)
  81377c:	00800044 	movi	r2,1
  813780:	18800005 	stb	r2,0(r3)
        return (pevent);
  813784:	e0bffb17 	ldw	r2,-20(fp)
  813788:	e0bfff15 	stw	r2,-4(fp)
  81378c:	00009806 	br	8139f0 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  813790:	008020b4 	movhi	r2,130
  813794:	10b7bc04 	addi	r2,r2,-8464
  813798:	10800003 	ldbu	r2,0(r2)
  81379c:	10803fcc 	andi	r2,r2,255
  8137a0:	1005003a 	cmpeq	r2,r2,zero
  8137a4:	1000061e 	bne	r2,zero,8137c0 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  8137a8:	e0fffd17 	ldw	r3,-12(fp)
  8137ac:	008003c4 	movi	r2,15
  8137b0:	18800005 	stb	r2,0(r3)
        return (pevent);
  8137b4:	e0fffb17 	ldw	r3,-20(fp)
  8137b8:	e0ffff15 	stw	r3,-4(fp)
  8137bc:	00008c06 	br	8139f0 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8137c0:	0005303a 	rdctl	r2,status
  8137c4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8137c8:	e0fff617 	ldw	r3,-40(fp)
  8137cc:	00bfff84 	movi	r2,-2
  8137d0:	1884703a 	and	r2,r3,r2
  8137d4:	1001703a 	wrctl	status,r2
  
  return context;
  8137d8:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  8137dc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  8137e0:	e0bffb17 	ldw	r2,-20(fp)
  8137e4:	10800283 	ldbu	r2,10(r2)
  8137e8:	10803fcc 	andi	r2,r2,255
  8137ec:	1005003a 	cmpeq	r2,r2,zero
  8137f0:	1000031e 	bne	r2,zero,813800 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  8137f4:	00800044 	movi	r2,1
  8137f8:	e0bffa05 	stb	r2,-24(fp)
  8137fc:	00000106 	br	813804 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  813800:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  813804:	e0bffc03 	ldbu	r2,-16(fp)
  813808:	e0bffe15 	stw	r2,-8(fp)
  81380c:	e0fffe17 	ldw	r3,-8(fp)
  813810:	1805003a 	cmpeq	r2,r3,zero
  813814:	1000041e 	bne	r2,zero,813828 <OSQDel+0x120>
  813818:	e0fffe17 	ldw	r3,-8(fp)
  81381c:	18800060 	cmpeqi	r2,r3,1
  813820:	1000391e 	bne	r2,zero,813908 <OSQDel+0x200>
  813824:	00006706 	br	8139c4 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  813828:	e0bffa03 	ldbu	r2,-24(fp)
  81382c:	1004c03a 	cmpne	r2,r2,zero
  813830:	1000261e 	bne	r2,zero,8138cc <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  813834:	e0fffb17 	ldw	r3,-20(fp)
  813838:	00800fc4 	movi	r2,63
  81383c:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  813840:	e0bffb17 	ldw	r2,-20(fp)
  813844:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  813848:	e0bffb17 	ldw	r2,-20(fp)
  81384c:	10800117 	ldw	r2,4(r2)
  813850:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  813854:	008020b4 	movhi	r2,130
  813858:	10b7b904 	addi	r2,r2,-8476
  81385c:	10c00017 	ldw	r3,0(r2)
  813860:	e0bff817 	ldw	r2,-32(fp)
  813864:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  813868:	00c020b4 	movhi	r3,130
  81386c:	18f7b904 	addi	r3,r3,-8476
  813870:	e0bff817 	ldw	r2,-32(fp)
  813874:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  813878:	e0bffb17 	ldw	r2,-20(fp)
  81387c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  813880:	008020b4 	movhi	r2,130
  813884:	10b7bb04 	addi	r2,r2,-8468
  813888:	10c00017 	ldw	r3,0(r2)
  81388c:	e0bffb17 	ldw	r2,-20(fp)
  813890:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  813894:	e0bffb17 	ldw	r2,-20(fp)
  813898:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  81389c:	00c020b4 	movhi	r3,130
  8138a0:	18f7bb04 	addi	r3,r3,-8468
  8138a4:	e0bffb17 	ldw	r2,-20(fp)
  8138a8:	18800015 	stw	r2,0(r3)
  8138ac:	e0bff717 	ldw	r2,-36(fp)
  8138b0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8138b4:	e0bff517 	ldw	r2,-44(fp)
  8138b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  8138bc:	e0bffd17 	ldw	r2,-12(fp)
  8138c0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  8138c4:	e03ff915 	stw	zero,-28(fp)
  8138c8:	00004706 	br	8139e8 <OSQDel+0x2e0>
  8138cc:	e0bff717 	ldw	r2,-36(fp)
  8138d0:	e0bff415 	stw	r2,-48(fp)
  8138d4:	e0bff417 	ldw	r2,-48(fp)
  8138d8:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  8138dc:	e0fffd17 	ldw	r3,-12(fp)
  8138e0:	00801244 	movi	r2,73
  8138e4:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  8138e8:	e0bffb17 	ldw	r2,-20(fp)
  8138ec:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  8138f0:	00003d06 	br	8139e8 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  8138f4:	e13ffb17 	ldw	r4,-20(fp)
  8138f8:	000b883a 	mov	r5,zero
  8138fc:	01800104 	movi	r6,4
  813900:	000f883a 	mov	r7,zero
  813904:	080ffa40 	call	80ffa4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  813908:	e0bffb17 	ldw	r2,-20(fp)
  81390c:	10800283 	ldbu	r2,10(r2)
  813910:	10803fcc 	andi	r2,r2,255
  813914:	1004c03a 	cmpne	r2,r2,zero
  813918:	103ff61e 	bne	r2,zero,8138f4 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  81391c:	e0fffb17 	ldw	r3,-20(fp)
  813920:	00800fc4 	movi	r2,63
  813924:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  813928:	e0bffb17 	ldw	r2,-20(fp)
  81392c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  813930:	e0bffb17 	ldw	r2,-20(fp)
  813934:	10800117 	ldw	r2,4(r2)
  813938:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  81393c:	008020b4 	movhi	r2,130
  813940:	10b7b904 	addi	r2,r2,-8476
  813944:	10c00017 	ldw	r3,0(r2)
  813948:	e0bff817 	ldw	r2,-32(fp)
  81394c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  813950:	00c020b4 	movhi	r3,130
  813954:	18f7b904 	addi	r3,r3,-8476
  813958:	e0bff817 	ldw	r2,-32(fp)
  81395c:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  813960:	e0bffb17 	ldw	r2,-20(fp)
  813964:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  813968:	008020b4 	movhi	r2,130
  81396c:	10b7bb04 	addi	r2,r2,-8468
  813970:	10c00017 	ldw	r3,0(r2)
  813974:	e0bffb17 	ldw	r2,-20(fp)
  813978:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  81397c:	e0bffb17 	ldw	r2,-20(fp)
  813980:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  813984:	00c020b4 	movhi	r3,130
  813988:	18f7bb04 	addi	r3,r3,-8468
  81398c:	e0bffb17 	ldw	r2,-20(fp)
  813990:	18800015 	stw	r2,0(r3)
  813994:	e0bff717 	ldw	r2,-36(fp)
  813998:	e0bff315 	stw	r2,-52(fp)
  81399c:	e0bff317 	ldw	r2,-52(fp)
  8139a0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  8139a4:	e0bffa03 	ldbu	r2,-24(fp)
  8139a8:	10800058 	cmpnei	r2,r2,1
  8139ac:	1000011e 	bne	r2,zero,8139b4 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  8139b0:	08109e40 	call	8109e4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  8139b4:	e0bffd17 	ldw	r2,-12(fp)
  8139b8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  8139bc:	e03ff915 	stw	zero,-28(fp)
             break;
  8139c0:	00000906 	br	8139e8 <OSQDel+0x2e0>
  8139c4:	e0bff717 	ldw	r2,-36(fp)
  8139c8:	e0bff215 	stw	r2,-56(fp)
  8139cc:	e0bff217 	ldw	r2,-56(fp)
  8139d0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  8139d4:	e0fffd17 	ldw	r3,-12(fp)
  8139d8:	008001c4 	movi	r2,7
  8139dc:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  8139e0:	e0bffb17 	ldw	r2,-20(fp)
  8139e4:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  8139e8:	e0bff917 	ldw	r2,-28(fp)
  8139ec:	e0bfff15 	stw	r2,-4(fp)
  8139f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8139f4:	e037883a 	mov	sp,fp
  8139f8:	dfc00117 	ldw	ra,4(sp)
  8139fc:	df000017 	ldw	fp,0(sp)
  813a00:	dec00204 	addi	sp,sp,8
  813a04:	f800283a 	ret

00813a08 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  813a08:	defff904 	addi	sp,sp,-28
  813a0c:	df000615 	stw	fp,24(sp)
  813a10:	df000604 	addi	fp,sp,24
  813a14:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  813a18:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  813a1c:	e0bffe17 	ldw	r2,-8(fp)
  813a20:	1004c03a 	cmpne	r2,r2,zero
  813a24:	1000031e 	bne	r2,zero,813a34 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
  813a28:	00800104 	movi	r2,4
  813a2c:	e0bfff15 	stw	r2,-4(fp)
  813a30:	00002206 	br	813abc <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  813a34:	e0bffe17 	ldw	r2,-8(fp)
  813a38:	10800003 	ldbu	r2,0(r2)
  813a3c:	10803fcc 	andi	r2,r2,255
  813a40:	108000a0 	cmpeqi	r2,r2,2
  813a44:	1000031e 	bne	r2,zero,813a54 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
  813a48:	00800044 	movi	r2,1
  813a4c:	e0bfff15 	stw	r2,-4(fp)
  813a50:	00001a06 	br	813abc <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813a54:	0005303a 	rdctl	r2,status
  813a58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813a5c:	e0fffb17 	ldw	r3,-20(fp)
  813a60:	00bfff84 	movi	r2,-2
  813a64:	1884703a 	and	r2,r3,r2
  813a68:	1001703a 	wrctl	status,r2
  
  return context;
  813a6c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  813a70:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  813a74:	e0bffe17 	ldw	r2,-8(fp)
  813a78:	10800117 	ldw	r2,4(r2)
  813a7c:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
  813a80:	e0bffd17 	ldw	r2,-12(fp)
  813a84:	10c00117 	ldw	r3,4(r2)
  813a88:	e0bffd17 	ldw	r2,-12(fp)
  813a8c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  813a90:	e0bffd17 	ldw	r2,-12(fp)
  813a94:	10c00117 	ldw	r3,4(r2)
  813a98:	e0bffd17 	ldw	r2,-12(fp)
  813a9c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  813aa0:	e0bffd17 	ldw	r2,-12(fp)
  813aa4:	1000058d 	sth	zero,22(r2)
  813aa8:	e0bffc17 	ldw	r2,-16(fp)
  813aac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813ab0:	e0bffa17 	ldw	r2,-24(fp)
  813ab4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  813ab8:	e03fff15 	stw	zero,-4(fp)
  813abc:	e0bfff17 	ldw	r2,-4(fp)
}
  813ac0:	e037883a 	mov	sp,fp
  813ac4:	df000017 	ldw	fp,0(sp)
  813ac8:	dec00104 	addi	sp,sp,4
  813acc:	f800283a 	ret

00813ad0 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  813ad0:	defff104 	addi	sp,sp,-60
  813ad4:	dfc00e15 	stw	ra,56(sp)
  813ad8:	df000d15 	stw	fp,52(sp)
  813adc:	df000d04 	addi	fp,sp,52
  813ae0:	e13ffb15 	stw	r4,-20(fp)
  813ae4:	e1bffd15 	stw	r6,-12(fp)
  813ae8:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  813aec:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  813af0:	e0bffd17 	ldw	r2,-12(fp)
  813af4:	1004c03a 	cmpne	r2,r2,zero
  813af8:	1000021e 	bne	r2,zero,813b04 <OSQPend+0x34>
        return ((void *)0);
  813afc:	e03fff15 	stw	zero,-4(fp)
  813b00:	0000b506 	br	813dd8 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  813b04:	e0bffb17 	ldw	r2,-20(fp)
  813b08:	1004c03a 	cmpne	r2,r2,zero
  813b0c:	1000051e 	bne	r2,zero,813b24 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  813b10:	e0fffd17 	ldw	r3,-12(fp)
  813b14:	00800104 	movi	r2,4
  813b18:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  813b1c:	e03fff15 	stw	zero,-4(fp)
  813b20:	0000ad06 	br	813dd8 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  813b24:	e0bffb17 	ldw	r2,-20(fp)
  813b28:	10800003 	ldbu	r2,0(r2)
  813b2c:	10803fcc 	andi	r2,r2,255
  813b30:	108000a0 	cmpeqi	r2,r2,2
  813b34:	1000051e 	bne	r2,zero,813b4c <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  813b38:	e0fffd17 	ldw	r3,-12(fp)
  813b3c:	00800044 	movi	r2,1
  813b40:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  813b44:	e03fff15 	stw	zero,-4(fp)
  813b48:	0000a306 	br	813dd8 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  813b4c:	008020b4 	movhi	r2,130
  813b50:	10b7bc04 	addi	r2,r2,-8464
  813b54:	10800003 	ldbu	r2,0(r2)
  813b58:	10803fcc 	andi	r2,r2,255
  813b5c:	1005003a 	cmpeq	r2,r2,zero
  813b60:	1000051e 	bne	r2,zero,813b78 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  813b64:	e0fffd17 	ldw	r3,-12(fp)
  813b68:	00800084 	movi	r2,2
  813b6c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  813b70:	e03fff15 	stw	zero,-4(fp)
  813b74:	00009806 	br	813dd8 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  813b78:	008020b4 	movhi	r2,130
  813b7c:	10b7ae04 	addi	r2,r2,-8520
  813b80:	10800003 	ldbu	r2,0(r2)
  813b84:	10803fcc 	andi	r2,r2,255
  813b88:	1005003a 	cmpeq	r2,r2,zero
  813b8c:	1000051e 	bne	r2,zero,813ba4 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  813b90:	e0fffd17 	ldw	r3,-12(fp)
  813b94:	00800344 	movi	r2,13
  813b98:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  813b9c:	e03fff15 	stw	zero,-4(fp)
  813ba0:	00008d06 	br	813dd8 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813ba4:	0005303a 	rdctl	r2,status
  813ba8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813bac:	e0fff717 	ldw	r3,-36(fp)
  813bb0:	00bfff84 	movi	r2,-2
  813bb4:	1884703a 	and	r2,r3,r2
  813bb8:	1001703a 	wrctl	status,r2
  
  return context;
  813bbc:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  813bc0:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  813bc4:	e0bffb17 	ldw	r2,-20(fp)
  813bc8:	10800117 	ldw	r2,4(r2)
  813bcc:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  813bd0:	e0bff917 	ldw	r2,-28(fp)
  813bd4:	1080058b 	ldhu	r2,22(r2)
  813bd8:	10bfffcc 	andi	r2,r2,65535
  813bdc:	1005003a 	cmpeq	r2,r2,zero
  813be0:	10001f1e 	bne	r2,zero,813c60 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  813be4:	e0bff917 	ldw	r2,-28(fp)
  813be8:	10c00417 	ldw	r3,16(r2)
  813bec:	18800017 	ldw	r2,0(r3)
  813bf0:	e0bffa15 	stw	r2,-24(fp)
  813bf4:	18c00104 	addi	r3,r3,4
  813bf8:	e0bff917 	ldw	r2,-28(fp)
  813bfc:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  813c00:	e0bff917 	ldw	r2,-28(fp)
  813c04:	1080058b 	ldhu	r2,22(r2)
  813c08:	10bfffc4 	addi	r2,r2,-1
  813c0c:	1007883a 	mov	r3,r2
  813c10:	e0bff917 	ldw	r2,-28(fp)
  813c14:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  813c18:	e0bff917 	ldw	r2,-28(fp)
  813c1c:	10c00417 	ldw	r3,16(r2)
  813c20:	e0bff917 	ldw	r2,-28(fp)
  813c24:	10800217 	ldw	r2,8(r2)
  813c28:	1880041e 	bne	r3,r2,813c3c <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
  813c2c:	e0bff917 	ldw	r2,-28(fp)
  813c30:	10c00117 	ldw	r3,4(r2)
  813c34:	e0bff917 	ldw	r2,-28(fp)
  813c38:	10c00415 	stw	r3,16(r2)
  813c3c:	e0bff817 	ldw	r2,-32(fp)
  813c40:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813c44:	e0bff617 	ldw	r2,-40(fp)
  813c48:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  813c4c:	e0bffd17 	ldw	r2,-12(fp)
  813c50:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  813c54:	e0bffa17 	ldw	r2,-24(fp)
  813c58:	e0bfff15 	stw	r2,-4(fp)
  813c5c:	00005e06 	br	813dd8 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  813c60:	008020b4 	movhi	r2,130
  813c64:	10b7bd04 	addi	r2,r2,-8460
  813c68:	10c00017 	ldw	r3,0(r2)
  813c6c:	008020b4 	movhi	r2,130
  813c70:	10b7bd04 	addi	r2,r2,-8460
  813c74:	10800017 	ldw	r2,0(r2)
  813c78:	10800c03 	ldbu	r2,48(r2)
  813c7c:	10800114 	ori	r2,r2,4
  813c80:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  813c84:	008020b4 	movhi	r2,130
  813c88:	10b7bd04 	addi	r2,r2,-8460
  813c8c:	10800017 	ldw	r2,0(r2)
  813c90:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  813c94:	008020b4 	movhi	r2,130
  813c98:	10b7bd04 	addi	r2,r2,-8460
  813c9c:	10c00017 	ldw	r3,0(r2)
  813ca0:	e0bffc0b 	ldhu	r2,-16(fp)
  813ca4:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  813ca8:	e13ffb17 	ldw	r4,-20(fp)
  813cac:	08101380 	call	810138 <OS_EventTaskWait>
  813cb0:	e0bff817 	ldw	r2,-32(fp)
  813cb4:	e0bff515 	stw	r2,-44(fp)
  813cb8:	e0bff517 	ldw	r2,-44(fp)
  813cbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  813cc0:	08109e40 	call	8109e4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813cc4:	0005303a 	rdctl	r2,status
  813cc8:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813ccc:	e0fff417 	ldw	r3,-48(fp)
  813cd0:	00bfff84 	movi	r2,-2
  813cd4:	1884703a 	and	r2,r3,r2
  813cd8:	1001703a 	wrctl	status,r2
  
  return context;
  813cdc:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
  813ce0:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  813ce4:	008020b4 	movhi	r2,130
  813ce8:	10b7bd04 	addi	r2,r2,-8460
  813cec:	10800017 	ldw	r2,0(r2)
  813cf0:	10800c43 	ldbu	r2,49(r2)
  813cf4:	10803fcc 	andi	r2,r2,255
  813cf8:	e0bffe15 	stw	r2,-8(fp)
  813cfc:	e0fffe17 	ldw	r3,-8(fp)
  813d00:	1805003a 	cmpeq	r2,r3,zero
  813d04:	1000041e 	bne	r2,zero,813d18 <OSQPend+0x248>
  813d08:	e0fffe17 	ldw	r3,-8(fp)
  813d0c:	188000a0 	cmpeqi	r2,r3,2
  813d10:	1000091e 	bne	r2,zero,813d38 <OSQPend+0x268>
  813d14:	00000d06 	br	813d4c <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  813d18:	008020b4 	movhi	r2,130
  813d1c:	10b7bd04 	addi	r2,r2,-8460
  813d20:	10800017 	ldw	r2,0(r2)
  813d24:	10800917 	ldw	r2,36(r2)
  813d28:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
  813d2c:	e0bffd17 	ldw	r2,-12(fp)
  813d30:	10000005 	stb	zero,0(r2)
             break;
  813d34:	00000e06 	br	813d70 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  813d38:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  813d3c:	e0fffd17 	ldw	r3,-12(fp)
  813d40:	00800384 	movi	r2,14
  813d44:	18800005 	stb	r2,0(r3)
             break;
  813d48:	00000906 	br	813d70 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  813d4c:	008020b4 	movhi	r2,130
  813d50:	10b7bd04 	addi	r2,r2,-8460
  813d54:	11000017 	ldw	r4,0(r2)
  813d58:	e17ffb17 	ldw	r5,-20(fp)
  813d5c:	081039c0 	call	81039c <OS_EventTaskRemove>
             pmsg = (void *)0;
  813d60:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  813d64:	e0fffd17 	ldw	r3,-12(fp)
  813d68:	00800284 	movi	r2,10
  813d6c:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  813d70:	008020b4 	movhi	r2,130
  813d74:	10b7bd04 	addi	r2,r2,-8460
  813d78:	10800017 	ldw	r2,0(r2)
  813d7c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  813d80:	008020b4 	movhi	r2,130
  813d84:	10b7bd04 	addi	r2,r2,-8460
  813d88:	10800017 	ldw	r2,0(r2)
  813d8c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  813d90:	008020b4 	movhi	r2,130
  813d94:	10b7bd04 	addi	r2,r2,-8460
  813d98:	10800017 	ldw	r2,0(r2)
  813d9c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  813da0:	008020b4 	movhi	r2,130
  813da4:	10b7bd04 	addi	r2,r2,-8460
  813da8:	10800017 	ldw	r2,0(r2)
  813dac:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  813db0:	008020b4 	movhi	r2,130
  813db4:	10b7bd04 	addi	r2,r2,-8460
  813db8:	10800017 	ldw	r2,0(r2)
  813dbc:	10000915 	stw	zero,36(r2)
  813dc0:	e0bff817 	ldw	r2,-32(fp)
  813dc4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813dc8:	e0bff317 	ldw	r2,-52(fp)
  813dcc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  813dd0:	e0bffa17 	ldw	r2,-24(fp)
  813dd4:	e0bfff15 	stw	r2,-4(fp)
  813dd8:	e0bfff17 	ldw	r2,-4(fp)
}
  813ddc:	e037883a 	mov	sp,fp
  813de0:	dfc00117 	ldw	ra,4(sp)
  813de4:	df000017 	ldw	fp,0(sp)
  813de8:	dec00204 	addi	sp,sp,8
  813dec:	f800283a 	ret

00813df0 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  813df0:	defff504 	addi	sp,sp,-44
  813df4:	dfc00a15 	stw	ra,40(sp)
  813df8:	df000915 	stw	fp,36(sp)
  813dfc:	df000904 	addi	fp,sp,36
  813e00:	e13ffc15 	stw	r4,-16(fp)
  813e04:	e1bffe15 	stw	r6,-8(fp)
  813e08:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  813e0c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  813e10:	e0bffe17 	ldw	r2,-8(fp)
  813e14:	1004c03a 	cmpne	r2,r2,zero
  813e18:	1000021e 	bne	r2,zero,813e24 <OSQPendAbort+0x34>
        return (0);
  813e1c:	e03fff15 	stw	zero,-4(fp)
  813e20:	00004c06 	br	813f54 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  813e24:	e0bffc17 	ldw	r2,-16(fp)
  813e28:	1004c03a 	cmpne	r2,r2,zero
  813e2c:	1000051e 	bne	r2,zero,813e44 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  813e30:	e0fffe17 	ldw	r3,-8(fp)
  813e34:	00800104 	movi	r2,4
  813e38:	18800005 	stb	r2,0(r3)
        return (0);
  813e3c:	e03fff15 	stw	zero,-4(fp)
  813e40:	00004406 	br	813f54 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  813e44:	e0bffc17 	ldw	r2,-16(fp)
  813e48:	10800003 	ldbu	r2,0(r2)
  813e4c:	10803fcc 	andi	r2,r2,255
  813e50:	108000a0 	cmpeqi	r2,r2,2
  813e54:	1000051e 	bne	r2,zero,813e6c <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  813e58:	e0fffe17 	ldw	r3,-8(fp)
  813e5c:	00800044 	movi	r2,1
  813e60:	18800005 	stb	r2,0(r3)
        return (0);
  813e64:	e03fff15 	stw	zero,-4(fp)
  813e68:	00003a06 	br	813f54 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813e6c:	0005303a 	rdctl	r2,status
  813e70:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813e74:	e0fff917 	ldw	r3,-28(fp)
  813e78:	00bfff84 	movi	r2,-2
  813e7c:	1884703a 	and	r2,r3,r2
  813e80:	1001703a 	wrctl	status,r2
  
  return context;
  813e84:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  813e88:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  813e8c:	e0bffc17 	ldw	r2,-16(fp)
  813e90:	10800283 	ldbu	r2,10(r2)
  813e94:	10803fcc 	andi	r2,r2,255
  813e98:	1005003a 	cmpeq	r2,r2,zero
  813e9c:	1000261e 	bne	r2,zero,813f38 <OSQPendAbort+0x148>
        nbr_tasks = 0;
  813ea0:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  813ea4:	e0bffd03 	ldbu	r2,-12(fp)
  813ea8:	10800060 	cmpeqi	r2,r2,1
  813eac:	1000091e 	bne	r2,zero,813ed4 <OSQPendAbort+0xe4>
  813eb0:	00000e06 	br	813eec <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  813eb4:	e13ffc17 	ldw	r4,-16(fp)
  813eb8:	000b883a 	mov	r5,zero
  813ebc:	01800104 	movi	r6,4
  813ec0:	01c00084 	movi	r7,2
  813ec4:	080ffa40 	call	80ffa4 <OS_EventTaskRdy>
                     nbr_tasks++;
  813ec8:	e0bffb03 	ldbu	r2,-20(fp)
  813ecc:	10800044 	addi	r2,r2,1
  813ed0:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  813ed4:	e0bffc17 	ldw	r2,-16(fp)
  813ed8:	10800283 	ldbu	r2,10(r2)
  813edc:	10803fcc 	andi	r2,r2,255
  813ee0:	1004c03a 	cmpne	r2,r2,zero
  813ee4:	103ff31e 	bne	r2,zero,813eb4 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  813ee8:	00000806 	br	813f0c <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  813eec:	e13ffc17 	ldw	r4,-16(fp)
  813ef0:	000b883a 	mov	r5,zero
  813ef4:	01800104 	movi	r6,4
  813ef8:	01c00084 	movi	r7,2
  813efc:	080ffa40 	call	80ffa4 <OS_EventTaskRdy>
                 nbr_tasks++;
  813f00:	e0bffb03 	ldbu	r2,-20(fp)
  813f04:	10800044 	addi	r2,r2,1
  813f08:	e0bffb05 	stb	r2,-20(fp)
  813f0c:	e0bffa17 	ldw	r2,-24(fp)
  813f10:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813f14:	e0bff817 	ldw	r2,-32(fp)
  813f18:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  813f1c:	08109e40 	call	8109e4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  813f20:	e0fffe17 	ldw	r3,-8(fp)
  813f24:	00800384 	movi	r2,14
  813f28:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  813f2c:	e0bffb03 	ldbu	r2,-20(fp)
  813f30:	e0bfff15 	stw	r2,-4(fp)
  813f34:	00000706 	br	813f54 <OSQPendAbort+0x164>
  813f38:	e0bffa17 	ldw	r2,-24(fp)
  813f3c:	e0bff715 	stw	r2,-36(fp)
  813f40:	e0bff717 	ldw	r2,-36(fp)
  813f44:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  813f48:	e0bffe17 	ldw	r2,-8(fp)
  813f4c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  813f50:	e03fff15 	stw	zero,-4(fp)
  813f54:	e0bfff17 	ldw	r2,-4(fp)
}
  813f58:	e037883a 	mov	sp,fp
  813f5c:	dfc00117 	ldw	ra,4(sp)
  813f60:	df000017 	ldw	fp,0(sp)
  813f64:	dec00204 	addi	sp,sp,8
  813f68:	f800283a 	ret

00813f6c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  813f6c:	defff504 	addi	sp,sp,-44
  813f70:	dfc00a15 	stw	ra,40(sp)
  813f74:	df000915 	stw	fp,36(sp)
  813f78:	df000904 	addi	fp,sp,36
  813f7c:	e13ffd15 	stw	r4,-12(fp)
  813f80:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  813f84:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  813f88:	e0bffd17 	ldw	r2,-12(fp)
  813f8c:	1004c03a 	cmpne	r2,r2,zero
  813f90:	1000031e 	bne	r2,zero,813fa0 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
  813f94:	00800104 	movi	r2,4
  813f98:	e0bfff15 	stw	r2,-4(fp)
  813f9c:	00004d06 	br	8140d4 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  813fa0:	e0bffd17 	ldw	r2,-12(fp)
  813fa4:	10800003 	ldbu	r2,0(r2)
  813fa8:	10803fcc 	andi	r2,r2,255
  813fac:	108000a0 	cmpeqi	r2,r2,2
  813fb0:	1000031e 	bne	r2,zero,813fc0 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
  813fb4:	00800044 	movi	r2,1
  813fb8:	e0bfff15 	stw	r2,-4(fp)
  813fbc:	00004506 	br	8140d4 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813fc0:	0005303a 	rdctl	r2,status
  813fc4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813fc8:	e0fffa17 	ldw	r3,-24(fp)
  813fcc:	00bfff84 	movi	r2,-2
  813fd0:	1884703a 	and	r2,r3,r2
  813fd4:	1001703a 	wrctl	status,r2
  
  return context;
  813fd8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  813fdc:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  813fe0:	e0bffd17 	ldw	r2,-12(fp)
  813fe4:	10800283 	ldbu	r2,10(r2)
  813fe8:	10803fcc 	andi	r2,r2,255
  813fec:	1005003a 	cmpeq	r2,r2,zero
  813ff0:	10000c1e 	bne	r2,zero,814024 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  813ff4:	e13ffd17 	ldw	r4,-12(fp)
  813ff8:	e17ffe17 	ldw	r5,-8(fp)
  813ffc:	01800104 	movi	r6,4
  814000:	000f883a 	mov	r7,zero
  814004:	080ffa40 	call	80ffa4 <OS_EventTaskRdy>
  814008:	e0bffb17 	ldw	r2,-20(fp)
  81400c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814010:	e0bff917 	ldw	r2,-28(fp)
  814014:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  814018:	08109e40 	call	8109e4 <OS_Sched>
        return (OS_ERR_NONE);
  81401c:	e03fff15 	stw	zero,-4(fp)
  814020:	00002c06 	br	8140d4 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  814024:	e0bffd17 	ldw	r2,-12(fp)
  814028:	10800117 	ldw	r2,4(r2)
  81402c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  814030:	e0bffc17 	ldw	r2,-16(fp)
  814034:	10c0058b 	ldhu	r3,22(r2)
  814038:	e0bffc17 	ldw	r2,-16(fp)
  81403c:	1080050b 	ldhu	r2,20(r2)
  814040:	18ffffcc 	andi	r3,r3,65535
  814044:	10bfffcc 	andi	r2,r2,65535
  814048:	18800736 	bltu	r3,r2,814068 <OSQPost+0xfc>
  81404c:	e0bffb17 	ldw	r2,-20(fp)
  814050:	e0bff815 	stw	r2,-32(fp)
  814054:	e0bff817 	ldw	r2,-32(fp)
  814058:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  81405c:	00800784 	movi	r2,30
  814060:	e0bfff15 	stw	r2,-4(fp)
  814064:	00001b06 	br	8140d4 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  814068:	e0bffc17 	ldw	r2,-16(fp)
  81406c:	10c00317 	ldw	r3,12(r2)
  814070:	e0bffe17 	ldw	r2,-8(fp)
  814074:	18800015 	stw	r2,0(r3)
  814078:	18c00104 	addi	r3,r3,4
  81407c:	e0bffc17 	ldw	r2,-16(fp)
  814080:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  814084:	e0bffc17 	ldw	r2,-16(fp)
  814088:	1080058b 	ldhu	r2,22(r2)
  81408c:	10800044 	addi	r2,r2,1
  814090:	1007883a 	mov	r3,r2
  814094:	e0bffc17 	ldw	r2,-16(fp)
  814098:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  81409c:	e0bffc17 	ldw	r2,-16(fp)
  8140a0:	10c00317 	ldw	r3,12(r2)
  8140a4:	e0bffc17 	ldw	r2,-16(fp)
  8140a8:	10800217 	ldw	r2,8(r2)
  8140ac:	1880041e 	bne	r3,r2,8140c0 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
  8140b0:	e0bffc17 	ldw	r2,-16(fp)
  8140b4:	10c00117 	ldw	r3,4(r2)
  8140b8:	e0bffc17 	ldw	r2,-16(fp)
  8140bc:	10c00315 	stw	r3,12(r2)
  8140c0:	e0bffb17 	ldw	r2,-20(fp)
  8140c4:	e0bff715 	stw	r2,-36(fp)
  8140c8:	e0bff717 	ldw	r2,-36(fp)
  8140cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8140d0:	e03fff15 	stw	zero,-4(fp)
  8140d4:	e0bfff17 	ldw	r2,-4(fp)
}
  8140d8:	e037883a 	mov	sp,fp
  8140dc:	dfc00117 	ldw	ra,4(sp)
  8140e0:	df000017 	ldw	fp,0(sp)
  8140e4:	dec00204 	addi	sp,sp,8
  8140e8:	f800283a 	ret

008140ec <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  8140ec:	defff504 	addi	sp,sp,-44
  8140f0:	dfc00a15 	stw	ra,40(sp)
  8140f4:	df000915 	stw	fp,36(sp)
  8140f8:	df000904 	addi	fp,sp,36
  8140fc:	e13ffd15 	stw	r4,-12(fp)
  814100:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  814104:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  814108:	e0bffd17 	ldw	r2,-12(fp)
  81410c:	1004c03a 	cmpne	r2,r2,zero
  814110:	1000031e 	bne	r2,zero,814120 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
  814114:	00800104 	movi	r2,4
  814118:	e0bfff15 	stw	r2,-4(fp)
  81411c:	00004f06 	br	81425c <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  814120:	e0bffd17 	ldw	r2,-12(fp)
  814124:	10800003 	ldbu	r2,0(r2)
  814128:	10803fcc 	andi	r2,r2,255
  81412c:	108000a0 	cmpeqi	r2,r2,2
  814130:	1000031e 	bne	r2,zero,814140 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
  814134:	00800044 	movi	r2,1
  814138:	e0bfff15 	stw	r2,-4(fp)
  81413c:	00004706 	br	81425c <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814140:	0005303a 	rdctl	r2,status
  814144:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814148:	e0fffa17 	ldw	r3,-24(fp)
  81414c:	00bfff84 	movi	r2,-2
  814150:	1884703a 	and	r2,r3,r2
  814154:	1001703a 	wrctl	status,r2
  
  return context;
  814158:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81415c:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  814160:	e0bffd17 	ldw	r2,-12(fp)
  814164:	10800283 	ldbu	r2,10(r2)
  814168:	10803fcc 	andi	r2,r2,255
  81416c:	1005003a 	cmpeq	r2,r2,zero
  814170:	10000c1e 	bne	r2,zero,8141a4 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  814174:	e13ffd17 	ldw	r4,-12(fp)
  814178:	e17ffe17 	ldw	r5,-8(fp)
  81417c:	01800104 	movi	r6,4
  814180:	000f883a 	mov	r7,zero
  814184:	080ffa40 	call	80ffa4 <OS_EventTaskRdy>
  814188:	e0bffb17 	ldw	r2,-20(fp)
  81418c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814190:	e0bff917 	ldw	r2,-28(fp)
  814194:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  814198:	08109e40 	call	8109e4 <OS_Sched>
        return (OS_ERR_NONE);
  81419c:	e03fff15 	stw	zero,-4(fp)
  8141a0:	00002e06 	br	81425c <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  8141a4:	e0bffd17 	ldw	r2,-12(fp)
  8141a8:	10800117 	ldw	r2,4(r2)
  8141ac:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  8141b0:	e0bffc17 	ldw	r2,-16(fp)
  8141b4:	10c0058b 	ldhu	r3,22(r2)
  8141b8:	e0bffc17 	ldw	r2,-16(fp)
  8141bc:	1080050b 	ldhu	r2,20(r2)
  8141c0:	18ffffcc 	andi	r3,r3,65535
  8141c4:	10bfffcc 	andi	r2,r2,65535
  8141c8:	18800736 	bltu	r3,r2,8141e8 <OSQPostFront+0xfc>
  8141cc:	e0bffb17 	ldw	r2,-20(fp)
  8141d0:	e0bff815 	stw	r2,-32(fp)
  8141d4:	e0bff817 	ldw	r2,-32(fp)
  8141d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  8141dc:	00800784 	movi	r2,30
  8141e0:	e0bfff15 	stw	r2,-4(fp)
  8141e4:	00001d06 	br	81425c <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  8141e8:	e0bffc17 	ldw	r2,-16(fp)
  8141ec:	10c00417 	ldw	r3,16(r2)
  8141f0:	e0bffc17 	ldw	r2,-16(fp)
  8141f4:	10800117 	ldw	r2,4(r2)
  8141f8:	1880041e 	bne	r3,r2,81420c <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
  8141fc:	e0bffc17 	ldw	r2,-16(fp)
  814200:	10c00217 	ldw	r3,8(r2)
  814204:	e0bffc17 	ldw	r2,-16(fp)
  814208:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  81420c:	e0bffc17 	ldw	r2,-16(fp)
  814210:	10800417 	ldw	r2,16(r2)
  814214:	10ffff04 	addi	r3,r2,-4
  814218:	e0bffc17 	ldw	r2,-16(fp)
  81421c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  814220:	e0bffc17 	ldw	r2,-16(fp)
  814224:	10c00417 	ldw	r3,16(r2)
  814228:	e0bffe17 	ldw	r2,-8(fp)
  81422c:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  814230:	e0bffc17 	ldw	r2,-16(fp)
  814234:	1080058b 	ldhu	r2,22(r2)
  814238:	10800044 	addi	r2,r2,1
  81423c:	1007883a 	mov	r3,r2
  814240:	e0bffc17 	ldw	r2,-16(fp)
  814244:	10c0058d 	sth	r3,22(r2)
  814248:	e0bffb17 	ldw	r2,-20(fp)
  81424c:	e0bff715 	stw	r2,-36(fp)
  814250:	e0bff717 	ldw	r2,-36(fp)
  814254:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  814258:	e03fff15 	stw	zero,-4(fp)
  81425c:	e0bfff17 	ldw	r2,-4(fp)
}
  814260:	e037883a 	mov	sp,fp
  814264:	dfc00117 	ldw	ra,4(sp)
  814268:	df000017 	ldw	fp,0(sp)
  81426c:	dec00204 	addi	sp,sp,8
  814270:	f800283a 	ret

00814274 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  814274:	defff404 	addi	sp,sp,-48
  814278:	dfc00b15 	stw	ra,44(sp)
  81427c:	df000a15 	stw	fp,40(sp)
  814280:	df000a04 	addi	fp,sp,40
  814284:	e13ffc15 	stw	r4,-16(fp)
  814288:	e17ffd15 	stw	r5,-12(fp)
  81428c:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  814290:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  814294:	e0bffc17 	ldw	r2,-16(fp)
  814298:	1004c03a 	cmpne	r2,r2,zero
  81429c:	1000031e 	bne	r2,zero,8142ac <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
  8142a0:	00800104 	movi	r2,4
  8142a4:	e0bfff15 	stw	r2,-4(fp)
  8142a8:	00007906 	br	814490 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  8142ac:	e0bffc17 	ldw	r2,-16(fp)
  8142b0:	10800003 	ldbu	r2,0(r2)
  8142b4:	10803fcc 	andi	r2,r2,255
  8142b8:	108000a0 	cmpeqi	r2,r2,2
  8142bc:	1000031e 	bne	r2,zero,8142cc <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
  8142c0:	00800044 	movi	r2,1
  8142c4:	e0bfff15 	stw	r2,-4(fp)
  8142c8:	00007106 	br	814490 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8142cc:	0005303a 	rdctl	r2,status
  8142d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8142d4:	e0fff917 	ldw	r3,-28(fp)
  8142d8:	00bfff84 	movi	r2,-2
  8142dc:	1884703a 	and	r2,r3,r2
  8142e0:	1001703a 	wrctl	status,r2
  
  return context;
  8142e4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  8142e8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  8142ec:	e0bffc17 	ldw	r2,-16(fp)
  8142f0:	10800283 	ldbu	r2,10(r2)
  8142f4:	10803fcc 	andi	r2,r2,255
  8142f8:	1005003a 	cmpeq	r2,r2,zero
  8142fc:	1000211e 	bne	r2,zero,814384 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  814300:	e0bffe03 	ldbu	r2,-8(fp)
  814304:	1080004c 	andi	r2,r2,1
  814308:	10803fcc 	andi	r2,r2,255
  81430c:	1005003a 	cmpeq	r2,r2,zero
  814310:	10000c1e 	bne	r2,zero,814344 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  814314:	00000506 	br	81432c <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  814318:	e13ffc17 	ldw	r4,-16(fp)
  81431c:	e17ffd17 	ldw	r5,-12(fp)
  814320:	01800104 	movi	r6,4
  814324:	000f883a 	mov	r7,zero
  814328:	080ffa40 	call	80ffa4 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  81432c:	e0bffc17 	ldw	r2,-16(fp)
  814330:	10800283 	ldbu	r2,10(r2)
  814334:	10803fcc 	andi	r2,r2,255
  814338:	1004c03a 	cmpne	r2,r2,zero
  81433c:	103ff61e 	bne	r2,zero,814318 <OSQPostOpt+0xa4>
  814340:	00000506 	br	814358 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  814344:	e13ffc17 	ldw	r4,-16(fp)
  814348:	e17ffd17 	ldw	r5,-12(fp)
  81434c:	01800104 	movi	r6,4
  814350:	000f883a 	mov	r7,zero
  814354:	080ffa40 	call	80ffa4 <OS_EventTaskRdy>
  814358:	e0bffa17 	ldw	r2,-24(fp)
  81435c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814360:	e0bff817 	ldw	r2,-32(fp)
  814364:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  814368:	e0bffe03 	ldbu	r2,-8(fp)
  81436c:	1080010c 	andi	r2,r2,4
  814370:	1004c03a 	cmpne	r2,r2,zero
  814374:	1000011e 	bne	r2,zero,81437c <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
  814378:	08109e40 	call	8109e4 <OS_Sched>
        }
        return (OS_ERR_NONE);
  81437c:	e03fff15 	stw	zero,-4(fp)
  814380:	00004306 	br	814490 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  814384:	e0bffc17 	ldw	r2,-16(fp)
  814388:	10800117 	ldw	r2,4(r2)
  81438c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  814390:	e0bffb17 	ldw	r2,-20(fp)
  814394:	10c0058b 	ldhu	r3,22(r2)
  814398:	e0bffb17 	ldw	r2,-20(fp)
  81439c:	1080050b 	ldhu	r2,20(r2)
  8143a0:	18ffffcc 	andi	r3,r3,65535
  8143a4:	10bfffcc 	andi	r2,r2,65535
  8143a8:	18800736 	bltu	r3,r2,8143c8 <OSQPostOpt+0x154>
  8143ac:	e0bffa17 	ldw	r2,-24(fp)
  8143b0:	e0bff715 	stw	r2,-36(fp)
  8143b4:	e0bff717 	ldw	r2,-36(fp)
  8143b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  8143bc:	00800784 	movi	r2,30
  8143c0:	e0bfff15 	stw	r2,-4(fp)
  8143c4:	00003206 	br	814490 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  8143c8:	e0bffe03 	ldbu	r2,-8(fp)
  8143cc:	1080008c 	andi	r2,r2,2
  8143d0:	1005003a 	cmpeq	r2,r2,zero
  8143d4:	1000131e 	bne	r2,zero,814424 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  8143d8:	e0bffb17 	ldw	r2,-20(fp)
  8143dc:	10c00417 	ldw	r3,16(r2)
  8143e0:	e0bffb17 	ldw	r2,-20(fp)
  8143e4:	10800117 	ldw	r2,4(r2)
  8143e8:	1880041e 	bne	r3,r2,8143fc <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  8143ec:	e0bffb17 	ldw	r2,-20(fp)
  8143f0:	10c00217 	ldw	r3,8(r2)
  8143f4:	e0bffb17 	ldw	r2,-20(fp)
  8143f8:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  8143fc:	e0bffb17 	ldw	r2,-20(fp)
  814400:	10800417 	ldw	r2,16(r2)
  814404:	10ffff04 	addi	r3,r2,-4
  814408:	e0bffb17 	ldw	r2,-20(fp)
  81440c:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  814410:	e0bffb17 	ldw	r2,-20(fp)
  814414:	10c00417 	ldw	r3,16(r2)
  814418:	e0bffd17 	ldw	r2,-12(fp)
  81441c:	18800015 	stw	r2,0(r3)
  814420:	00001006 	br	814464 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  814424:	e0bffb17 	ldw	r2,-20(fp)
  814428:	10c00317 	ldw	r3,12(r2)
  81442c:	e0bffd17 	ldw	r2,-12(fp)
  814430:	18800015 	stw	r2,0(r3)
  814434:	18c00104 	addi	r3,r3,4
  814438:	e0bffb17 	ldw	r2,-20(fp)
  81443c:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  814440:	e0bffb17 	ldw	r2,-20(fp)
  814444:	10c00317 	ldw	r3,12(r2)
  814448:	e0bffb17 	ldw	r2,-20(fp)
  81444c:	10800217 	ldw	r2,8(r2)
  814450:	1880041e 	bne	r3,r2,814464 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
  814454:	e0bffb17 	ldw	r2,-20(fp)
  814458:	10c00117 	ldw	r3,4(r2)
  81445c:	e0bffb17 	ldw	r2,-20(fp)
  814460:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  814464:	e0bffb17 	ldw	r2,-20(fp)
  814468:	1080058b 	ldhu	r2,22(r2)
  81446c:	10800044 	addi	r2,r2,1
  814470:	1007883a 	mov	r3,r2
  814474:	e0bffb17 	ldw	r2,-20(fp)
  814478:	10c0058d 	sth	r3,22(r2)
  81447c:	e0bffa17 	ldw	r2,-24(fp)
  814480:	e0bff615 	stw	r2,-40(fp)
  814484:	e0bff617 	ldw	r2,-40(fp)
  814488:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81448c:	e03fff15 	stw	zero,-4(fp)
  814490:	e0bfff17 	ldw	r2,-4(fp)
}
  814494:	e037883a 	mov	sp,fp
  814498:	dfc00117 	ldw	ra,4(sp)
  81449c:	df000017 	ldw	fp,0(sp)
  8144a0:	dec00204 	addi	sp,sp,8
  8144a4:	f800283a 	ret

008144a8 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  8144a8:	defff504 	addi	sp,sp,-44
  8144ac:	df000a15 	stw	fp,40(sp)
  8144b0:	df000a04 	addi	fp,sp,40
  8144b4:	e13ffd15 	stw	r4,-12(fp)
  8144b8:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  8144bc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  8144c0:	e0bffd17 	ldw	r2,-12(fp)
  8144c4:	1004c03a 	cmpne	r2,r2,zero
  8144c8:	1000031e 	bne	r2,zero,8144d8 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  8144cc:	00800104 	movi	r2,4
  8144d0:	e0bfff15 	stw	r2,-4(fp)
  8144d4:	00004f06 	br	814614 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  8144d8:	e0bffe17 	ldw	r2,-8(fp)
  8144dc:	1004c03a 	cmpne	r2,r2,zero
  8144e0:	1000031e 	bne	r2,zero,8144f0 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  8144e4:	00800244 	movi	r2,9
  8144e8:	e0bfff15 	stw	r2,-4(fp)
  8144ec:	00004906 	br	814614 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  8144f0:	e0bffd17 	ldw	r2,-12(fp)
  8144f4:	10800003 	ldbu	r2,0(r2)
  8144f8:	10803fcc 	andi	r2,r2,255
  8144fc:	108000a0 	cmpeqi	r2,r2,2
  814500:	1000031e 	bne	r2,zero,814510 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  814504:	00800044 	movi	r2,1
  814508:	e0bfff15 	stw	r2,-4(fp)
  81450c:	00004106 	br	814614 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814510:	0005303a 	rdctl	r2,status
  814514:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814518:	e0fff717 	ldw	r3,-36(fp)
  81451c:	00bfff84 	movi	r2,-2
  814520:	1884703a 	and	r2,r3,r2
  814524:	1001703a 	wrctl	status,r2
  
  return context;
  814528:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  81452c:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  814530:	e0bffd17 	ldw	r2,-12(fp)
  814534:	10c00283 	ldbu	r3,10(r2)
  814538:	e0bffe17 	ldw	r2,-8(fp)
  81453c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  814540:	e0bffd17 	ldw	r2,-12(fp)
  814544:	108002c4 	addi	r2,r2,11
  814548:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  81454c:	e0bffe17 	ldw	r2,-8(fp)
  814550:	10800204 	addi	r2,r2,8
  814554:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  814558:	e03ffb05 	stb	zero,-20(fp)
  81455c:	00000d06 	br	814594 <OSQQuery+0xec>
        *pdest++ = *psrc++;
  814560:	e0bffa17 	ldw	r2,-24(fp)
  814564:	10c00003 	ldbu	r3,0(r2)
  814568:	e0bff917 	ldw	r2,-28(fp)
  81456c:	10c00005 	stb	r3,0(r2)
  814570:	e0bff917 	ldw	r2,-28(fp)
  814574:	10800044 	addi	r2,r2,1
  814578:	e0bff915 	stw	r2,-28(fp)
  81457c:	e0bffa17 	ldw	r2,-24(fp)
  814580:	10800044 	addi	r2,r2,1
  814584:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  814588:	e0bffb03 	ldbu	r2,-20(fp)
  81458c:	10800044 	addi	r2,r2,1
  814590:	e0bffb05 	stb	r2,-20(fp)
  814594:	e0bffb03 	ldbu	r2,-20(fp)
  814598:	108000f0 	cmpltui	r2,r2,3
  81459c:	103ff01e 	bne	r2,zero,814560 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  8145a0:	e0bffd17 	ldw	r2,-12(fp)
  8145a4:	10800117 	ldw	r2,4(r2)
  8145a8:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  8145ac:	e0bffc17 	ldw	r2,-16(fp)
  8145b0:	1080058b 	ldhu	r2,22(r2)
  8145b4:	10bfffcc 	andi	r2,r2,65535
  8145b8:	1005003a 	cmpeq	r2,r2,zero
  8145bc:	1000061e 	bne	r2,zero,8145d8 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  8145c0:	e0bffc17 	ldw	r2,-16(fp)
  8145c4:	10800417 	ldw	r2,16(r2)
  8145c8:	10c00017 	ldw	r3,0(r2)
  8145cc:	e0bffe17 	ldw	r2,-8(fp)
  8145d0:	10c00015 	stw	r3,0(r2)
  8145d4:	00000206 	br	8145e0 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
  8145d8:	e0bffe17 	ldw	r2,-8(fp)
  8145dc:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  8145e0:	e0bffc17 	ldw	r2,-16(fp)
  8145e4:	10c0058b 	ldhu	r3,22(r2)
  8145e8:	e0bffe17 	ldw	r2,-8(fp)
  8145ec:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  8145f0:	e0bffc17 	ldw	r2,-16(fp)
  8145f4:	10c0050b 	ldhu	r3,20(r2)
  8145f8:	e0bffe17 	ldw	r2,-8(fp)
  8145fc:	10c0018d 	sth	r3,6(r2)
  814600:	e0bff817 	ldw	r2,-32(fp)
  814604:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814608:	e0bff617 	ldw	r2,-40(fp)
  81460c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  814610:	e03fff15 	stw	zero,-4(fp)
  814614:	e0bfff17 	ldw	r2,-4(fp)
}
  814618:	e037883a 	mov	sp,fp
  81461c:	df000017 	ldw	fp,0(sp)
  814620:	dec00104 	addi	sp,sp,4
  814624:	f800283a 	ret

00814628 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  814628:	defffb04 	addi	sp,sp,-20
  81462c:	dfc00415 	stw	ra,16(sp)
  814630:	df000315 	stw	fp,12(sp)
  814634:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  814638:	010020b4 	movhi	r4,130
  81463c:	210db704 	addi	r4,r4,14044
  814640:	01407804 	movi	r5,480
  814644:	08109240 	call	810924 <OS_MemClr>
    pq1 = &OSQTbl[0];
  814648:	008020b4 	movhi	r2,130
  81464c:	108db704 	addi	r2,r2,14044
  814650:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  814654:	008020b4 	movhi	r2,130
  814658:	108dbd04 	addi	r2,r2,14068
  81465c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  814660:	e03fff0d 	sth	zero,-4(fp)
  814664:	00000c06 	br	814698 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  814668:	e0fffe17 	ldw	r3,-8(fp)
  81466c:	e0bffd17 	ldw	r2,-12(fp)
  814670:	18800015 	stw	r2,0(r3)
        pq1++;
  814674:	e0bffe17 	ldw	r2,-8(fp)
  814678:	10800604 	addi	r2,r2,24
  81467c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  814680:	e0bffd17 	ldw	r2,-12(fp)
  814684:	10800604 	addi	r2,r2,24
  814688:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  81468c:	e0bfff0b 	ldhu	r2,-4(fp)
  814690:	10800044 	addi	r2,r2,1
  814694:	e0bfff0d 	sth	r2,-4(fp)
  814698:	e0bfff0b 	ldhu	r2,-4(fp)
  81469c:	108004f0 	cmpltui	r2,r2,19
  8146a0:	103ff11e 	bne	r2,zero,814668 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  8146a4:	e0bffe17 	ldw	r2,-8(fp)
  8146a8:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  8146ac:	00c020b4 	movhi	r3,130
  8146b0:	18f7b904 	addi	r3,r3,-8476
  8146b4:	008020b4 	movhi	r2,130
  8146b8:	108db704 	addi	r2,r2,14044
  8146bc:	18800015 	stw	r2,0(r3)
#endif
}
  8146c0:	e037883a 	mov	sp,fp
  8146c4:	dfc00117 	ldw	ra,4(sp)
  8146c8:	df000017 	ldw	fp,0(sp)
  8146cc:	dec00204 	addi	sp,sp,8
  8146d0:	f800283a 	ret

008146d4 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  8146d4:	defff904 	addi	sp,sp,-28
  8146d8:	df000615 	stw	fp,24(sp)
  8146dc:	df000604 	addi	fp,sp,24
  8146e0:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8146e4:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8146e8:	e0bffe17 	ldw	r2,-8(fp)
  8146ec:	1004c03a 	cmpne	r2,r2,zero
  8146f0:	1000021e 	bne	r2,zero,8146fc <OSSemAccept+0x28>
        return (0);
  8146f4:	e03fff15 	stw	zero,-4(fp)
  8146f8:	00002106 	br	814780 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8146fc:	e0bffe17 	ldw	r2,-8(fp)
  814700:	10800003 	ldbu	r2,0(r2)
  814704:	10803fcc 	andi	r2,r2,255
  814708:	108000e0 	cmpeqi	r2,r2,3
  81470c:	1000021e 	bne	r2,zero,814718 <OSSemAccept+0x44>
        return (0);
  814710:	e03fff15 	stw	zero,-4(fp)
  814714:	00001a06 	br	814780 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814718:	0005303a 	rdctl	r2,status
  81471c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814720:	e0fffb17 	ldw	r3,-20(fp)
  814724:	00bfff84 	movi	r2,-2
  814728:	1884703a 	and	r2,r3,r2
  81472c:	1001703a 	wrctl	status,r2
  
  return context;
  814730:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  814734:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
  814738:	e0bffe17 	ldw	r2,-8(fp)
  81473c:	1080020b 	ldhu	r2,8(r2)
  814740:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  814744:	e0bffd0b 	ldhu	r2,-12(fp)
  814748:	1005003a 	cmpeq	r2,r2,zero
  81474c:	1000061e 	bne	r2,zero,814768 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  814750:	e0bffe17 	ldw	r2,-8(fp)
  814754:	1080020b 	ldhu	r2,8(r2)
  814758:	10bfffc4 	addi	r2,r2,-1
  81475c:	1007883a 	mov	r3,r2
  814760:	e0bffe17 	ldw	r2,-8(fp)
  814764:	10c0020d 	sth	r3,8(r2)
  814768:	e0bffc17 	ldw	r2,-16(fp)
  81476c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814770:	e0bffa17 	ldw	r2,-24(fp)
  814774:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  814778:	e0bffd0b 	ldhu	r2,-12(fp)
  81477c:	e0bfff15 	stw	r2,-4(fp)
  814780:	e0bfff17 	ldw	r2,-4(fp)
}
  814784:	e037883a 	mov	sp,fp
  814788:	df000017 	ldw	fp,0(sp)
  81478c:	dec00104 	addi	sp,sp,4
  814790:	f800283a 	ret

00814794 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  814794:	defff804 	addi	sp,sp,-32
  814798:	dfc00715 	stw	ra,28(sp)
  81479c:	df000615 	stw	fp,24(sp)
  8147a0:	df000604 	addi	fp,sp,24
  8147a4:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8147a8:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8147ac:	008020b4 	movhi	r2,130
  8147b0:	10b7bc04 	addi	r2,r2,-8464
  8147b4:	10800003 	ldbu	r2,0(r2)
  8147b8:	10803fcc 	andi	r2,r2,255
  8147bc:	1005003a 	cmpeq	r2,r2,zero
  8147c0:	1000021e 	bne	r2,zero,8147cc <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  8147c4:	e03fff15 	stw	zero,-4(fp)
  8147c8:	00003106 	br	814890 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8147cc:	0005303a 	rdctl	r2,status
  8147d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8147d4:	e0fffb17 	ldw	r3,-20(fp)
  8147d8:	00bfff84 	movi	r2,-2
  8147dc:	1884703a 	and	r2,r3,r2
  8147e0:	1001703a 	wrctl	status,r2
  
  return context;
  8147e4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  8147e8:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  8147ec:	008020b4 	movhi	r2,130
  8147f0:	10b7bb04 	addi	r2,r2,-8468
  8147f4:	10800017 	ldw	r2,0(r2)
  8147f8:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  8147fc:	008020b4 	movhi	r2,130
  814800:	10b7bb04 	addi	r2,r2,-8468
  814804:	10800017 	ldw	r2,0(r2)
  814808:	1005003a 	cmpeq	r2,r2,zero
  81480c:	1000081e 	bne	r2,zero,814830 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  814810:	008020b4 	movhi	r2,130
  814814:	10b7bb04 	addi	r2,r2,-8468
  814818:	10800017 	ldw	r2,0(r2)
  81481c:	10800117 	ldw	r2,4(r2)
  814820:	1007883a 	mov	r3,r2
  814824:	008020b4 	movhi	r2,130
  814828:	10b7bb04 	addi	r2,r2,-8468
  81482c:	10c00015 	stw	r3,0(r2)
  814830:	e0bffc17 	ldw	r2,-16(fp)
  814834:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814838:	e0bffa17 	ldw	r2,-24(fp)
  81483c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  814840:	e0bffd17 	ldw	r2,-12(fp)
  814844:	1005003a 	cmpeq	r2,r2,zero
  814848:	10000f1e 	bne	r2,zero,814888 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  81484c:	e0fffd17 	ldw	r3,-12(fp)
  814850:	008000c4 	movi	r2,3
  814854:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  814858:	e0fffd17 	ldw	r3,-12(fp)
  81485c:	e0bffe0b 	ldhu	r2,-8(fp)
  814860:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  814864:	e0bffd17 	ldw	r2,-12(fp)
  814868:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  81486c:	e0fffd17 	ldw	r3,-12(fp)
  814870:	00800fc4 	movi	r2,63
  814874:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  814878:	e0bffd17 	ldw	r2,-12(fp)
  81487c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  814880:	e13ffd17 	ldw	r4,-12(fp)
  814884:	08105580 	call	810558 <OS_EventWaitListInit>
    }
    return (pevent);
  814888:	e0bffd17 	ldw	r2,-12(fp)
  81488c:	e0bfff15 	stw	r2,-4(fp)
  814890:	e0bfff17 	ldw	r2,-4(fp)
}
  814894:	e037883a 	mov	sp,fp
  814898:	dfc00117 	ldw	ra,4(sp)
  81489c:	df000017 	ldw	fp,0(sp)
  8148a0:	dec00204 	addi	sp,sp,8
  8148a4:	f800283a 	ret

008148a8 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  8148a8:	defff104 	addi	sp,sp,-60
  8148ac:	dfc00e15 	stw	ra,56(sp)
  8148b0:	df000d15 	stw	fp,52(sp)
  8148b4:	df000d04 	addi	fp,sp,52
  8148b8:	e13ffb15 	stw	r4,-20(fp)
  8148bc:	e1bffd15 	stw	r6,-12(fp)
  8148c0:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8148c4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8148c8:	e0bffd17 	ldw	r2,-12(fp)
  8148cc:	1004c03a 	cmpne	r2,r2,zero
  8148d0:	1000031e 	bne	r2,zero,8148e0 <OSSemDel+0x38>
        return (pevent);
  8148d4:	e0bffb17 	ldw	r2,-20(fp)
  8148d8:	e0bfff15 	stw	r2,-4(fp)
  8148dc:	00009406 	br	814b30 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  8148e0:	e0bffb17 	ldw	r2,-20(fp)
  8148e4:	1004c03a 	cmpne	r2,r2,zero
  8148e8:	1000061e 	bne	r2,zero,814904 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  8148ec:	e0fffd17 	ldw	r3,-12(fp)
  8148f0:	00800104 	movi	r2,4
  8148f4:	18800005 	stb	r2,0(r3)
        return (pevent);
  8148f8:	e0fffb17 	ldw	r3,-20(fp)
  8148fc:	e0ffff15 	stw	r3,-4(fp)
  814900:	00008b06 	br	814b30 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  814904:	e0bffb17 	ldw	r2,-20(fp)
  814908:	10800003 	ldbu	r2,0(r2)
  81490c:	10803fcc 	andi	r2,r2,255
  814910:	108000e0 	cmpeqi	r2,r2,3
  814914:	1000061e 	bne	r2,zero,814930 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  814918:	e0fffd17 	ldw	r3,-12(fp)
  81491c:	00800044 	movi	r2,1
  814920:	18800005 	stb	r2,0(r3)
        return (pevent);
  814924:	e0bffb17 	ldw	r2,-20(fp)
  814928:	e0bfff15 	stw	r2,-4(fp)
  81492c:	00008006 	br	814b30 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  814930:	008020b4 	movhi	r2,130
  814934:	10b7bc04 	addi	r2,r2,-8464
  814938:	10800003 	ldbu	r2,0(r2)
  81493c:	10803fcc 	andi	r2,r2,255
  814940:	1005003a 	cmpeq	r2,r2,zero
  814944:	1000061e 	bne	r2,zero,814960 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  814948:	e0fffd17 	ldw	r3,-12(fp)
  81494c:	008003c4 	movi	r2,15
  814950:	18800005 	stb	r2,0(r3)
        return (pevent);
  814954:	e0fffb17 	ldw	r3,-20(fp)
  814958:	e0ffff15 	stw	r3,-4(fp)
  81495c:	00007406 	br	814b30 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814960:	0005303a 	rdctl	r2,status
  814964:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814968:	e0fff717 	ldw	r3,-36(fp)
  81496c:	00bfff84 	movi	r2,-2
  814970:	1884703a 	and	r2,r3,r2
  814974:	1001703a 	wrctl	status,r2
  
  return context;
  814978:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  81497c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  814980:	e0bffb17 	ldw	r2,-20(fp)
  814984:	10800283 	ldbu	r2,10(r2)
  814988:	10803fcc 	andi	r2,r2,255
  81498c:	1005003a 	cmpeq	r2,r2,zero
  814990:	1000031e 	bne	r2,zero,8149a0 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  814994:	00800044 	movi	r2,1
  814998:	e0bffa05 	stb	r2,-24(fp)
  81499c:	00000106 	br	8149a4 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  8149a0:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  8149a4:	e0bffc03 	ldbu	r2,-16(fp)
  8149a8:	e0bffe15 	stw	r2,-8(fp)
  8149ac:	e0fffe17 	ldw	r3,-8(fp)
  8149b0:	1805003a 	cmpeq	r2,r3,zero
  8149b4:	1000041e 	bne	r2,zero,8149c8 <OSSemDel+0x120>
  8149b8:	e0fffe17 	ldw	r3,-8(fp)
  8149bc:	18800060 	cmpeqi	r2,r3,1
  8149c0:	10002d1e 	bne	r2,zero,814a78 <OSSemDel+0x1d0>
  8149c4:	00004f06 	br	814b04 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  8149c8:	e0bffa03 	ldbu	r2,-24(fp)
  8149cc:	1004c03a 	cmpne	r2,r2,zero
  8149d0:	10001a1e 	bne	r2,zero,814a3c <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  8149d4:	e0fffb17 	ldw	r3,-20(fp)
  8149d8:	00800fc4 	movi	r2,63
  8149dc:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  8149e0:	e0bffb17 	ldw	r2,-20(fp)
  8149e4:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  8149e8:	e0bffb17 	ldw	r2,-20(fp)
  8149ec:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  8149f0:	008020b4 	movhi	r2,130
  8149f4:	10b7bb04 	addi	r2,r2,-8468
  8149f8:	10c00017 	ldw	r3,0(r2)
  8149fc:	e0bffb17 	ldw	r2,-20(fp)
  814a00:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  814a04:	e0bffb17 	ldw	r2,-20(fp)
  814a08:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  814a0c:	00c020b4 	movhi	r3,130
  814a10:	18f7bb04 	addi	r3,r3,-8468
  814a14:	e0bffb17 	ldw	r2,-20(fp)
  814a18:	18800015 	stw	r2,0(r3)
  814a1c:	e0bff817 	ldw	r2,-32(fp)
  814a20:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814a24:	e0bff617 	ldw	r2,-40(fp)
  814a28:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  814a2c:	e0bffd17 	ldw	r2,-12(fp)
  814a30:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  814a34:	e03ff915 	stw	zero,-28(fp)
  814a38:	00003b06 	br	814b28 <OSSemDel+0x280>
  814a3c:	e0bff817 	ldw	r2,-32(fp)
  814a40:	e0bff515 	stw	r2,-44(fp)
  814a44:	e0bff517 	ldw	r2,-44(fp)
  814a48:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  814a4c:	e0fffd17 	ldw	r3,-12(fp)
  814a50:	00801244 	movi	r2,73
  814a54:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  814a58:	e0bffb17 	ldw	r2,-20(fp)
  814a5c:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  814a60:	00003106 	br	814b28 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  814a64:	e13ffb17 	ldw	r4,-20(fp)
  814a68:	000b883a 	mov	r5,zero
  814a6c:	01800044 	movi	r6,1
  814a70:	000f883a 	mov	r7,zero
  814a74:	080ffa40 	call	80ffa4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  814a78:	e0bffb17 	ldw	r2,-20(fp)
  814a7c:	10800283 	ldbu	r2,10(r2)
  814a80:	10803fcc 	andi	r2,r2,255
  814a84:	1004c03a 	cmpne	r2,r2,zero
  814a88:	103ff61e 	bne	r2,zero,814a64 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  814a8c:	e0fffb17 	ldw	r3,-20(fp)
  814a90:	00800fc4 	movi	r2,63
  814a94:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  814a98:	e0bffb17 	ldw	r2,-20(fp)
  814a9c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  814aa0:	e0bffb17 	ldw	r2,-20(fp)
  814aa4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  814aa8:	008020b4 	movhi	r2,130
  814aac:	10b7bb04 	addi	r2,r2,-8468
  814ab0:	10c00017 	ldw	r3,0(r2)
  814ab4:	e0bffb17 	ldw	r2,-20(fp)
  814ab8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  814abc:	e0bffb17 	ldw	r2,-20(fp)
  814ac0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  814ac4:	00c020b4 	movhi	r3,130
  814ac8:	18f7bb04 	addi	r3,r3,-8468
  814acc:	e0bffb17 	ldw	r2,-20(fp)
  814ad0:	18800015 	stw	r2,0(r3)
  814ad4:	e0bff817 	ldw	r2,-32(fp)
  814ad8:	e0bff415 	stw	r2,-48(fp)
  814adc:	e0bff417 	ldw	r2,-48(fp)
  814ae0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  814ae4:	e0bffa03 	ldbu	r2,-24(fp)
  814ae8:	10800058 	cmpnei	r2,r2,1
  814aec:	1000011e 	bne	r2,zero,814af4 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  814af0:	08109e40 	call	8109e4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  814af4:	e0bffd17 	ldw	r2,-12(fp)
  814af8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  814afc:	e03ff915 	stw	zero,-28(fp)
             break;
  814b00:	00000906 	br	814b28 <OSSemDel+0x280>
  814b04:	e0bff817 	ldw	r2,-32(fp)
  814b08:	e0bff315 	stw	r2,-52(fp)
  814b0c:	e0bff317 	ldw	r2,-52(fp)
  814b10:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  814b14:	e0fffd17 	ldw	r3,-12(fp)
  814b18:	008001c4 	movi	r2,7
  814b1c:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  814b20:	e0bffb17 	ldw	r2,-20(fp)
  814b24:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  814b28:	e0bff917 	ldw	r2,-28(fp)
  814b2c:	e0bfff15 	stw	r2,-4(fp)
  814b30:	e0bfff17 	ldw	r2,-4(fp)
}
  814b34:	e037883a 	mov	sp,fp
  814b38:	dfc00117 	ldw	ra,4(sp)
  814b3c:	df000017 	ldw	fp,0(sp)
  814b40:	dec00204 	addi	sp,sp,8
  814b44:	f800283a 	ret

00814b48 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  814b48:	defff404 	addi	sp,sp,-48
  814b4c:	dfc00b15 	stw	ra,44(sp)
  814b50:	df000a15 	stw	fp,40(sp)
  814b54:	df000a04 	addi	fp,sp,40
  814b58:	e13ffc15 	stw	r4,-16(fp)
  814b5c:	e1bffe15 	stw	r6,-8(fp)
  814b60:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  814b64:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  814b68:	e0bffe17 	ldw	r2,-8(fp)
  814b6c:	1005003a 	cmpeq	r2,r2,zero
  814b70:	10008f1e 	bne	r2,zero,814db0 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  814b74:	e0bffc17 	ldw	r2,-16(fp)
  814b78:	1004c03a 	cmpne	r2,r2,zero
  814b7c:	1000041e 	bne	r2,zero,814b90 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  814b80:	e0fffe17 	ldw	r3,-8(fp)
  814b84:	00800104 	movi	r2,4
  814b88:	18800005 	stb	r2,0(r3)
        return;
  814b8c:	00008806 	br	814db0 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  814b90:	e0bffc17 	ldw	r2,-16(fp)
  814b94:	10800003 	ldbu	r2,0(r2)
  814b98:	10803fcc 	andi	r2,r2,255
  814b9c:	108000e0 	cmpeqi	r2,r2,3
  814ba0:	1000041e 	bne	r2,zero,814bb4 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  814ba4:	e0fffe17 	ldw	r3,-8(fp)
  814ba8:	00800044 	movi	r2,1
  814bac:	18800005 	stb	r2,0(r3)
        return;
  814bb0:	00007f06 	br	814db0 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  814bb4:	008020b4 	movhi	r2,130
  814bb8:	10b7bc04 	addi	r2,r2,-8464
  814bbc:	10800003 	ldbu	r2,0(r2)
  814bc0:	10803fcc 	andi	r2,r2,255
  814bc4:	1005003a 	cmpeq	r2,r2,zero
  814bc8:	1000041e 	bne	r2,zero,814bdc <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  814bcc:	e0fffe17 	ldw	r3,-8(fp)
  814bd0:	00800084 	movi	r2,2
  814bd4:	18800005 	stb	r2,0(r3)
        return;
  814bd8:	00007506 	br	814db0 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  814bdc:	008020b4 	movhi	r2,130
  814be0:	10b7ae04 	addi	r2,r2,-8520
  814be4:	10800003 	ldbu	r2,0(r2)
  814be8:	10803fcc 	andi	r2,r2,255
  814bec:	1005003a 	cmpeq	r2,r2,zero
  814bf0:	1000041e 	bne	r2,zero,814c04 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  814bf4:	e0fffe17 	ldw	r3,-8(fp)
  814bf8:	00800344 	movi	r2,13
  814bfc:	18800005 	stb	r2,0(r3)
        return;
  814c00:	00006b06 	br	814db0 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814c04:	0005303a 	rdctl	r2,status
  814c08:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814c0c:	e0fffa17 	ldw	r3,-24(fp)
  814c10:	00bfff84 	movi	r2,-2
  814c14:	1884703a 	and	r2,r3,r2
  814c18:	1001703a 	wrctl	status,r2
  
  return context;
  814c1c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  814c20:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  814c24:	e0bffc17 	ldw	r2,-16(fp)
  814c28:	1080020b 	ldhu	r2,8(r2)
  814c2c:	10bfffcc 	andi	r2,r2,65535
  814c30:	1005003a 	cmpeq	r2,r2,zero
  814c34:	10000d1e 	bne	r2,zero,814c6c <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  814c38:	e0bffc17 	ldw	r2,-16(fp)
  814c3c:	1080020b 	ldhu	r2,8(r2)
  814c40:	10bfffc4 	addi	r2,r2,-1
  814c44:	1007883a 	mov	r3,r2
  814c48:	e0bffc17 	ldw	r2,-16(fp)
  814c4c:	10c0020d 	sth	r3,8(r2)
  814c50:	e0bffb17 	ldw	r2,-20(fp)
  814c54:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814c58:	e0bff917 	ldw	r2,-28(fp)
  814c5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  814c60:	e0bffe17 	ldw	r2,-8(fp)
  814c64:	10000005 	stb	zero,0(r2)
        return;
  814c68:	00005106 	br	814db0 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  814c6c:	008020b4 	movhi	r2,130
  814c70:	10b7bd04 	addi	r2,r2,-8460
  814c74:	10c00017 	ldw	r3,0(r2)
  814c78:	008020b4 	movhi	r2,130
  814c7c:	10b7bd04 	addi	r2,r2,-8460
  814c80:	10800017 	ldw	r2,0(r2)
  814c84:	10800c03 	ldbu	r2,48(r2)
  814c88:	10800054 	ori	r2,r2,1
  814c8c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  814c90:	008020b4 	movhi	r2,130
  814c94:	10b7bd04 	addi	r2,r2,-8460
  814c98:	10800017 	ldw	r2,0(r2)
  814c9c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  814ca0:	008020b4 	movhi	r2,130
  814ca4:	10b7bd04 	addi	r2,r2,-8460
  814ca8:	10c00017 	ldw	r3,0(r2)
  814cac:	e0bffd0b 	ldhu	r2,-12(fp)
  814cb0:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  814cb4:	e13ffc17 	ldw	r4,-16(fp)
  814cb8:	08101380 	call	810138 <OS_EventTaskWait>
  814cbc:	e0bffb17 	ldw	r2,-20(fp)
  814cc0:	e0bff815 	stw	r2,-32(fp)
  814cc4:	e0bff817 	ldw	r2,-32(fp)
  814cc8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  814ccc:	08109e40 	call	8109e4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814cd0:	0005303a 	rdctl	r2,status
  814cd4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814cd8:	e0fff717 	ldw	r3,-36(fp)
  814cdc:	00bfff84 	movi	r2,-2
  814ce0:	1884703a 	and	r2,r3,r2
  814ce4:	1001703a 	wrctl	status,r2
  
  return context;
  814ce8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  814cec:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  814cf0:	008020b4 	movhi	r2,130
  814cf4:	10b7bd04 	addi	r2,r2,-8460
  814cf8:	10800017 	ldw	r2,0(r2)
  814cfc:	10800c43 	ldbu	r2,49(r2)
  814d00:	10803fcc 	andi	r2,r2,255
  814d04:	e0bfff15 	stw	r2,-4(fp)
  814d08:	e0ffff17 	ldw	r3,-4(fp)
  814d0c:	1805003a 	cmpeq	r2,r3,zero
  814d10:	1000041e 	bne	r2,zero,814d24 <OSSemPend+0x1dc>
  814d14:	e0ffff17 	ldw	r3,-4(fp)
  814d18:	188000a0 	cmpeqi	r2,r3,2
  814d1c:	1000041e 	bne	r2,zero,814d30 <OSSemPend+0x1e8>
  814d20:	00000706 	br	814d40 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  814d24:	e0bffe17 	ldw	r2,-8(fp)
  814d28:	10000005 	stb	zero,0(r2)
             break;
  814d2c:	00000c06 	br	814d60 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  814d30:	e0fffe17 	ldw	r3,-8(fp)
  814d34:	00800384 	movi	r2,14
  814d38:	18800005 	stb	r2,0(r3)
             break;
  814d3c:	00000806 	br	814d60 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  814d40:	008020b4 	movhi	r2,130
  814d44:	10b7bd04 	addi	r2,r2,-8460
  814d48:	11000017 	ldw	r4,0(r2)
  814d4c:	e17ffc17 	ldw	r5,-16(fp)
  814d50:	081039c0 	call	81039c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  814d54:	e0fffe17 	ldw	r3,-8(fp)
  814d58:	00800284 	movi	r2,10
  814d5c:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  814d60:	008020b4 	movhi	r2,130
  814d64:	10b7bd04 	addi	r2,r2,-8460
  814d68:	10800017 	ldw	r2,0(r2)
  814d6c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  814d70:	008020b4 	movhi	r2,130
  814d74:	10b7bd04 	addi	r2,r2,-8460
  814d78:	10800017 	ldw	r2,0(r2)
  814d7c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  814d80:	008020b4 	movhi	r2,130
  814d84:	10b7bd04 	addi	r2,r2,-8460
  814d88:	10800017 	ldw	r2,0(r2)
  814d8c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  814d90:	008020b4 	movhi	r2,130
  814d94:	10b7bd04 	addi	r2,r2,-8460
  814d98:	10800017 	ldw	r2,0(r2)
  814d9c:	10000815 	stw	zero,32(r2)
  814da0:	e0bffb17 	ldw	r2,-20(fp)
  814da4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814da8:	e0bff617 	ldw	r2,-40(fp)
  814dac:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
  814db0:	e037883a 	mov	sp,fp
  814db4:	dfc00117 	ldw	ra,4(sp)
  814db8:	df000017 	ldw	fp,0(sp)
  814dbc:	dec00204 	addi	sp,sp,8
  814dc0:	f800283a 	ret

00814dc4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  814dc4:	defff504 	addi	sp,sp,-44
  814dc8:	dfc00a15 	stw	ra,40(sp)
  814dcc:	df000915 	stw	fp,36(sp)
  814dd0:	df000904 	addi	fp,sp,36
  814dd4:	e13ffc15 	stw	r4,-16(fp)
  814dd8:	e1bffe15 	stw	r6,-8(fp)
  814ddc:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  814de0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  814de4:	e0bffe17 	ldw	r2,-8(fp)
  814de8:	1004c03a 	cmpne	r2,r2,zero
  814dec:	1000021e 	bne	r2,zero,814df8 <OSSemPendAbort+0x34>
        return (0);
  814df0:	e03fff15 	stw	zero,-4(fp)
  814df4:	00004c06 	br	814f28 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  814df8:	e0bffc17 	ldw	r2,-16(fp)
  814dfc:	1004c03a 	cmpne	r2,r2,zero
  814e00:	1000051e 	bne	r2,zero,814e18 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  814e04:	e0fffe17 	ldw	r3,-8(fp)
  814e08:	00800104 	movi	r2,4
  814e0c:	18800005 	stb	r2,0(r3)
        return (0);
  814e10:	e03fff15 	stw	zero,-4(fp)
  814e14:	00004406 	br	814f28 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  814e18:	e0bffc17 	ldw	r2,-16(fp)
  814e1c:	10800003 	ldbu	r2,0(r2)
  814e20:	10803fcc 	andi	r2,r2,255
  814e24:	108000e0 	cmpeqi	r2,r2,3
  814e28:	1000051e 	bne	r2,zero,814e40 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  814e2c:	e0fffe17 	ldw	r3,-8(fp)
  814e30:	00800044 	movi	r2,1
  814e34:	18800005 	stb	r2,0(r3)
        return (0);
  814e38:	e03fff15 	stw	zero,-4(fp)
  814e3c:	00003a06 	br	814f28 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814e40:	0005303a 	rdctl	r2,status
  814e44:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814e48:	e0fff917 	ldw	r3,-28(fp)
  814e4c:	00bfff84 	movi	r2,-2
  814e50:	1884703a 	and	r2,r3,r2
  814e54:	1001703a 	wrctl	status,r2
  
  return context;
  814e58:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  814e5c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  814e60:	e0bffc17 	ldw	r2,-16(fp)
  814e64:	10800283 	ldbu	r2,10(r2)
  814e68:	10803fcc 	andi	r2,r2,255
  814e6c:	1005003a 	cmpeq	r2,r2,zero
  814e70:	1000261e 	bne	r2,zero,814f0c <OSSemPendAbort+0x148>
        nbr_tasks = 0;
  814e74:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  814e78:	e0bffd03 	ldbu	r2,-12(fp)
  814e7c:	10800060 	cmpeqi	r2,r2,1
  814e80:	1000091e 	bne	r2,zero,814ea8 <OSSemPendAbort+0xe4>
  814e84:	00000e06 	br	814ec0 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  814e88:	e13ffc17 	ldw	r4,-16(fp)
  814e8c:	000b883a 	mov	r5,zero
  814e90:	01800044 	movi	r6,1
  814e94:	01c00084 	movi	r7,2
  814e98:	080ffa40 	call	80ffa4 <OS_EventTaskRdy>
                     nbr_tasks++;
  814e9c:	e0bffb03 	ldbu	r2,-20(fp)
  814ea0:	10800044 	addi	r2,r2,1
  814ea4:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  814ea8:	e0bffc17 	ldw	r2,-16(fp)
  814eac:	10800283 	ldbu	r2,10(r2)
  814eb0:	10803fcc 	andi	r2,r2,255
  814eb4:	1004c03a 	cmpne	r2,r2,zero
  814eb8:	103ff31e 	bne	r2,zero,814e88 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  814ebc:	00000806 	br	814ee0 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  814ec0:	e13ffc17 	ldw	r4,-16(fp)
  814ec4:	000b883a 	mov	r5,zero
  814ec8:	01800044 	movi	r6,1
  814ecc:	01c00084 	movi	r7,2
  814ed0:	080ffa40 	call	80ffa4 <OS_EventTaskRdy>
                 nbr_tasks++;
  814ed4:	e0bffb03 	ldbu	r2,-20(fp)
  814ed8:	10800044 	addi	r2,r2,1
  814edc:	e0bffb05 	stb	r2,-20(fp)
  814ee0:	e0bffa17 	ldw	r2,-24(fp)
  814ee4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814ee8:	e0bff817 	ldw	r2,-32(fp)
  814eec:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  814ef0:	08109e40 	call	8109e4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  814ef4:	e0fffe17 	ldw	r3,-8(fp)
  814ef8:	00800384 	movi	r2,14
  814efc:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  814f00:	e0bffb03 	ldbu	r2,-20(fp)
  814f04:	e0bfff15 	stw	r2,-4(fp)
  814f08:	00000706 	br	814f28 <OSSemPendAbort+0x164>
  814f0c:	e0bffa17 	ldw	r2,-24(fp)
  814f10:	e0bff715 	stw	r2,-36(fp)
  814f14:	e0bff717 	ldw	r2,-36(fp)
  814f18:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  814f1c:	e0bffe17 	ldw	r2,-8(fp)
  814f20:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  814f24:	e03fff15 	stw	zero,-4(fp)
  814f28:	e0bfff17 	ldw	r2,-4(fp)
}
  814f2c:	e037883a 	mov	sp,fp
  814f30:	dfc00117 	ldw	ra,4(sp)
  814f34:	df000017 	ldw	fp,0(sp)
  814f38:	dec00204 	addi	sp,sp,8
  814f3c:	f800283a 	ret

00814f40 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  814f40:	defff704 	addi	sp,sp,-36
  814f44:	dfc00815 	stw	ra,32(sp)
  814f48:	df000715 	stw	fp,28(sp)
  814f4c:	df000704 	addi	fp,sp,28
  814f50:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  814f54:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  814f58:	e0bffe17 	ldw	r2,-8(fp)
  814f5c:	1004c03a 	cmpne	r2,r2,zero
  814f60:	1000031e 	bne	r2,zero,814f70 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
  814f64:	00800104 	movi	r2,4
  814f68:	e0bfff15 	stw	r2,-4(fp)
  814f6c:	00003806 	br	815050 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  814f70:	e0bffe17 	ldw	r2,-8(fp)
  814f74:	10800003 	ldbu	r2,0(r2)
  814f78:	10803fcc 	andi	r2,r2,255
  814f7c:	108000e0 	cmpeqi	r2,r2,3
  814f80:	1000031e 	bne	r2,zero,814f90 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
  814f84:	00800044 	movi	r2,1
  814f88:	e0bfff15 	stw	r2,-4(fp)
  814f8c:	00003006 	br	815050 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814f90:	0005303a 	rdctl	r2,status
  814f94:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814f98:	e0fffc17 	ldw	r3,-16(fp)
  814f9c:	00bfff84 	movi	r2,-2
  814fa0:	1884703a 	and	r2,r3,r2
  814fa4:	1001703a 	wrctl	status,r2
  
  return context;
  814fa8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  814fac:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  814fb0:	e0bffe17 	ldw	r2,-8(fp)
  814fb4:	10800283 	ldbu	r2,10(r2)
  814fb8:	10803fcc 	andi	r2,r2,255
  814fbc:	1005003a 	cmpeq	r2,r2,zero
  814fc0:	10000c1e 	bne	r2,zero,814ff4 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  814fc4:	e13ffe17 	ldw	r4,-8(fp)
  814fc8:	000b883a 	mov	r5,zero
  814fcc:	01800044 	movi	r6,1
  814fd0:	000f883a 	mov	r7,zero
  814fd4:	080ffa40 	call	80ffa4 <OS_EventTaskRdy>
  814fd8:	e0bffd17 	ldw	r2,-12(fp)
  814fdc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814fe0:	e0bffb17 	ldw	r2,-20(fp)
  814fe4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  814fe8:	08109e40 	call	8109e4 <OS_Sched>
        return (OS_ERR_NONE);
  814fec:	e03fff15 	stw	zero,-4(fp)
  814ff0:	00001706 	br	815050 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  814ff4:	e0bffe17 	ldw	r2,-8(fp)
  814ff8:	1080020b 	ldhu	r2,8(r2)
  814ffc:	10ffffcc 	andi	r3,r2,65535
  815000:	00bfffd4 	movui	r2,65535
  815004:	18800c26 	beq	r3,r2,815038 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  815008:	e0bffe17 	ldw	r2,-8(fp)
  81500c:	1080020b 	ldhu	r2,8(r2)
  815010:	10800044 	addi	r2,r2,1
  815014:	1007883a 	mov	r3,r2
  815018:	e0bffe17 	ldw	r2,-8(fp)
  81501c:	10c0020d 	sth	r3,8(r2)
  815020:	e0bffd17 	ldw	r2,-12(fp)
  815024:	e0bffa15 	stw	r2,-24(fp)
  815028:	e0bffa17 	ldw	r2,-24(fp)
  81502c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  815030:	e03fff15 	stw	zero,-4(fp)
  815034:	00000606 	br	815050 <OSSemPost+0x110>
  815038:	e0bffd17 	ldw	r2,-12(fp)
  81503c:	e0bff915 	stw	r2,-28(fp)
  815040:	e0bff917 	ldw	r2,-28(fp)
  815044:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  815048:	00800c84 	movi	r2,50
  81504c:	e0bfff15 	stw	r2,-4(fp)
  815050:	e0bfff17 	ldw	r2,-4(fp)
}
  815054:	e037883a 	mov	sp,fp
  815058:	dfc00117 	ldw	ra,4(sp)
  81505c:	df000017 	ldw	fp,0(sp)
  815060:	dec00204 	addi	sp,sp,8
  815064:	f800283a 	ret

00815068 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  815068:	defff604 	addi	sp,sp,-40
  81506c:	df000915 	stw	fp,36(sp)
  815070:	df000904 	addi	fp,sp,36
  815074:	e13ffd15 	stw	r4,-12(fp)
  815078:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81507c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  815080:	e0bffd17 	ldw	r2,-12(fp)
  815084:	1004c03a 	cmpne	r2,r2,zero
  815088:	1000031e 	bne	r2,zero,815098 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  81508c:	00800104 	movi	r2,4
  815090:	e0bfff15 	stw	r2,-4(fp)
  815094:	00003b06 	br	815184 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  815098:	e0bffe17 	ldw	r2,-8(fp)
  81509c:	1004c03a 	cmpne	r2,r2,zero
  8150a0:	1000031e 	bne	r2,zero,8150b0 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  8150a4:	00800244 	movi	r2,9
  8150a8:	e0bfff15 	stw	r2,-4(fp)
  8150ac:	00003506 	br	815184 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  8150b0:	e0bffd17 	ldw	r2,-12(fp)
  8150b4:	10800003 	ldbu	r2,0(r2)
  8150b8:	10803fcc 	andi	r2,r2,255
  8150bc:	108000e0 	cmpeqi	r2,r2,3
  8150c0:	1000031e 	bne	r2,zero,8150d0 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  8150c4:	00800044 	movi	r2,1
  8150c8:	e0bfff15 	stw	r2,-4(fp)
  8150cc:	00002d06 	br	815184 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8150d0:	0005303a 	rdctl	r2,status
  8150d4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8150d8:	e0fff817 	ldw	r3,-32(fp)
  8150dc:	00bfff84 	movi	r2,-2
  8150e0:	1884703a 	and	r2,r3,r2
  8150e4:	1001703a 	wrctl	status,r2
  
  return context;
  8150e8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  8150ec:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  8150f0:	e0bffd17 	ldw	r2,-12(fp)
  8150f4:	10c00283 	ldbu	r3,10(r2)
  8150f8:	e0bffe17 	ldw	r2,-8(fp)
  8150fc:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  815100:	e0bffd17 	ldw	r2,-12(fp)
  815104:	108002c4 	addi	r2,r2,11
  815108:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  81510c:	e0bffe17 	ldw	r2,-8(fp)
  815110:	10800084 	addi	r2,r2,2
  815114:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  815118:	e03ffa05 	stb	zero,-24(fp)
  81511c:	00000d06 	br	815154 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
  815120:	e0bffc17 	ldw	r2,-16(fp)
  815124:	10c00003 	ldbu	r3,0(r2)
  815128:	e0bffb17 	ldw	r2,-20(fp)
  81512c:	10c00005 	stb	r3,0(r2)
  815130:	e0bffb17 	ldw	r2,-20(fp)
  815134:	10800044 	addi	r2,r2,1
  815138:	e0bffb15 	stw	r2,-20(fp)
  81513c:	e0bffc17 	ldw	r2,-16(fp)
  815140:	10800044 	addi	r2,r2,1
  815144:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  815148:	e0bffa03 	ldbu	r2,-24(fp)
  81514c:	10800044 	addi	r2,r2,1
  815150:	e0bffa05 	stb	r2,-24(fp)
  815154:	e0bffa03 	ldbu	r2,-24(fp)
  815158:	108000f0 	cmpltui	r2,r2,3
  81515c:	103ff01e 	bne	r2,zero,815120 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  815160:	e0bffd17 	ldw	r2,-12(fp)
  815164:	10c0020b 	ldhu	r3,8(r2)
  815168:	e0bffe17 	ldw	r2,-8(fp)
  81516c:	10c0000d 	sth	r3,0(r2)
  815170:	e0bff917 	ldw	r2,-28(fp)
  815174:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815178:	e0bff717 	ldw	r2,-36(fp)
  81517c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  815180:	e03fff15 	stw	zero,-4(fp)
  815184:	e0bfff17 	ldw	r2,-4(fp)
}
  815188:	e037883a 	mov	sp,fp
  81518c:	df000017 	ldw	fp,0(sp)
  815190:	dec00104 	addi	sp,sp,4
  815194:	f800283a 	ret

00815198 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  815198:	defff904 	addi	sp,sp,-28
  81519c:	df000615 	stw	fp,24(sp)
  8151a0:	df000604 	addi	fp,sp,24
  8151a4:	e13ffd15 	stw	r4,-12(fp)
  8151a8:	e1bfff15 	stw	r6,-4(fp)
  8151ac:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8151b0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8151b4:	e0bfff17 	ldw	r2,-4(fp)
  8151b8:	1005003a 	cmpeq	r2,r2,zero
  8151bc:	1000331e 	bne	r2,zero,81528c <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8151c0:	e0bffd17 	ldw	r2,-12(fp)
  8151c4:	1004c03a 	cmpne	r2,r2,zero
  8151c8:	1000041e 	bne	r2,zero,8151dc <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  8151cc:	e0ffff17 	ldw	r3,-4(fp)
  8151d0:	00800104 	movi	r2,4
  8151d4:	18800005 	stb	r2,0(r3)
        return;
  8151d8:	00002c06 	br	81528c <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8151dc:	e0bffd17 	ldw	r2,-12(fp)
  8151e0:	10800003 	ldbu	r2,0(r2)
  8151e4:	10803fcc 	andi	r2,r2,255
  8151e8:	108000e0 	cmpeqi	r2,r2,3
  8151ec:	1000041e 	bne	r2,zero,815200 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  8151f0:	e0ffff17 	ldw	r3,-4(fp)
  8151f4:	00800044 	movi	r2,1
  8151f8:	18800005 	stb	r2,0(r3)
        return;
  8151fc:	00002306 	br	81528c <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815200:	0005303a 	rdctl	r2,status
  815204:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815208:	e0fffb17 	ldw	r3,-20(fp)
  81520c:	00bfff84 	movi	r2,-2
  815210:	1884703a 	and	r2,r3,r2
  815214:	1001703a 	wrctl	status,r2
  
  return context;
  815218:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  81521c:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
  815220:	e0bfff17 	ldw	r2,-4(fp)
  815224:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  815228:	e0bffd17 	ldw	r2,-12(fp)
  81522c:	1080020b 	ldhu	r2,8(r2)
  815230:	10bfffcc 	andi	r2,r2,65535
  815234:	1005003a 	cmpeq	r2,r2,zero
  815238:	1000041e 	bne	r2,zero,81524c <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  81523c:	e0fffd17 	ldw	r3,-12(fp)
  815240:	e0bffe0b 	ldhu	r2,-8(fp)
  815244:	1880020d 	sth	r2,8(r3)
  815248:	00000c06 	br	81527c <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  81524c:	e0bffd17 	ldw	r2,-12(fp)
  815250:	10800283 	ldbu	r2,10(r2)
  815254:	10803fcc 	andi	r2,r2,255
  815258:	1004c03a 	cmpne	r2,r2,zero
  81525c:	1000041e 	bne	r2,zero,815270 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  815260:	e0fffd17 	ldw	r3,-12(fp)
  815264:	e0bffe0b 	ldhu	r2,-8(fp)
  815268:	1880020d 	sth	r2,8(r3)
  81526c:	00000306 	br	81527c <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  815270:	e0ffff17 	ldw	r3,-4(fp)
  815274:	00801244 	movi	r2,73
  815278:	18800005 	stb	r2,0(r3)
  81527c:	e0bffc17 	ldw	r2,-16(fp)
  815280:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815284:	e0bffa17 	ldw	r2,-24(fp)
  815288:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
  81528c:	e037883a 	mov	sp,fp
  815290:	df000017 	ldw	fp,0(sp)
  815294:	dec00104 	addi	sp,sp,4
  815298:	f800283a 	ret

0081529c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  81529c:	defff004 	addi	sp,sp,-64
  8152a0:	dfc00f15 	stw	ra,60(sp)
  8152a4:	df000e15 	stw	fp,56(sp)
  8152a8:	df000e04 	addi	fp,sp,56
  8152ac:	e13ffd05 	stb	r4,-12(fp)
  8152b0:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  8152b4:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  8152b8:	e0bffd03 	ldbu	r2,-12(fp)
  8152bc:	10800530 	cmpltui	r2,r2,20
  8152c0:	1000061e 	bne	r2,zero,8152dc <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
  8152c4:	e0bffd03 	ldbu	r2,-12(fp)
  8152c8:	10803fe0 	cmpeqi	r2,r2,255
  8152cc:	1000031e 	bne	r2,zero,8152dc <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
  8152d0:	00800a84 	movi	r2,42
  8152d4:	e0bfff15 	stw	r2,-4(fp)
  8152d8:	00014706 	br	8157f8 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  8152dc:	e0bffe03 	ldbu	r2,-8(fp)
  8152e0:	10800530 	cmpltui	r2,r2,20
  8152e4:	1000031e 	bne	r2,zero,8152f4 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  8152e8:	00800a84 	movi	r2,42
  8152ec:	e0bfff15 	stw	r2,-4(fp)
  8152f0:	00014106 	br	8157f8 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8152f4:	0005303a 	rdctl	r2,status
  8152f8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8152fc:	e0fff617 	ldw	r3,-40(fp)
  815300:	00bfff84 	movi	r2,-2
  815304:	1884703a 	and	r2,r3,r2
  815308:	1001703a 	wrctl	status,r2
  
  return context;
  81530c:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  815310:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  815314:	e0bffe03 	ldbu	r2,-8(fp)
  815318:	00c020b4 	movhi	r3,130
  81531c:	18d44304 	addi	r3,r3,20748
  815320:	1085883a 	add	r2,r2,r2
  815324:	1085883a 	add	r2,r2,r2
  815328:	10c5883a 	add	r2,r2,r3
  81532c:	10800017 	ldw	r2,0(r2)
  815330:	1005003a 	cmpeq	r2,r2,zero
  815334:	1000071e 	bne	r2,zero,815354 <OSTaskChangePrio+0xb8>
  815338:	e0bff717 	ldw	r2,-36(fp)
  81533c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815340:	e0bff517 	ldw	r2,-44(fp)
  815344:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  815348:	00800a04 	movi	r2,40
  81534c:	e0bfff15 	stw	r2,-4(fp)
  815350:	00012906 	br	8157f8 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  815354:	e0bffd03 	ldbu	r2,-12(fp)
  815358:	10803fd8 	cmpnei	r2,r2,255
  81535c:	1000051e 	bne	r2,zero,815374 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  815360:	008020b4 	movhi	r2,130
  815364:	10b7bd04 	addi	r2,r2,-8460
  815368:	10800017 	ldw	r2,0(r2)
  81536c:	10800c83 	ldbu	r2,50(r2)
  815370:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  815374:	e0bffd03 	ldbu	r2,-12(fp)
  815378:	00c020b4 	movhi	r3,130
  81537c:	18d44304 	addi	r3,r3,20748
  815380:	1085883a 	add	r2,r2,r2
  815384:	1085883a 	add	r2,r2,r2
  815388:	10c5883a 	add	r2,r2,r3
  81538c:	10800017 	ldw	r2,0(r2)
  815390:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  815394:	e0bffa17 	ldw	r2,-24(fp)
  815398:	1004c03a 	cmpne	r2,r2,zero
  81539c:	1000071e 	bne	r2,zero,8153bc <OSTaskChangePrio+0x120>
  8153a0:	e0bff717 	ldw	r2,-36(fp)
  8153a4:	e0bff415 	stw	r2,-48(fp)
  8153a8:	e0bff417 	ldw	r2,-48(fp)
  8153ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  8153b0:	00800a44 	movi	r2,41
  8153b4:	e0bfff15 	stw	r2,-4(fp)
  8153b8:	00010f06 	br	8157f8 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  8153bc:	e0bffa17 	ldw	r2,-24(fp)
  8153c0:	10800058 	cmpnei	r2,r2,1
  8153c4:	1000071e 	bne	r2,zero,8153e4 <OSTaskChangePrio+0x148>
  8153c8:	e0bff717 	ldw	r2,-36(fp)
  8153cc:	e0bff315 	stw	r2,-52(fp)
  8153d0:	e0bff317 	ldw	r2,-52(fp)
  8153d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  8153d8:	008010c4 	movi	r2,67
  8153dc:	e0bfff15 	stw	r2,-4(fp)
  8153e0:	00010506 	br	8157f8 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  8153e4:	e0bffe03 	ldbu	r2,-8(fp)
  8153e8:	1004d0fa 	srli	r2,r2,3
  8153ec:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  8153f0:	e0bffe03 	ldbu	r2,-8(fp)
  8153f4:	108001cc 	andi	r2,r2,7
  8153f8:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
  8153fc:	e0fff983 	ldbu	r3,-26(fp)
  815400:	00800044 	movi	r2,1
  815404:	10c4983a 	sll	r2,r2,r3
  815408:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
  81540c:	e0fff943 	ldbu	r3,-27(fp)
  815410:	00800044 	movi	r2,1
  815414:	10c4983a 	sll	r2,r2,r3
  815418:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  81541c:	e0bffd03 	ldbu	r2,-12(fp)
  815420:	00c020b4 	movhi	r3,130
  815424:	18d44304 	addi	r3,r3,20748
  815428:	1085883a 	add	r2,r2,r2
  81542c:	1085883a 	add	r2,r2,r2
  815430:	10c5883a 	add	r2,r2,r3
  815434:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  815438:	e0bffe03 	ldbu	r2,-8(fp)
  81543c:	00c020b4 	movhi	r3,130
  815440:	18d44304 	addi	r3,r3,20748
  815444:	1085883a 	add	r2,r2,r2
  815448:	1085883a 	add	r2,r2,r2
  81544c:	10c7883a 	add	r3,r2,r3
  815450:	e0bffa17 	ldw	r2,-24(fp)
  815454:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
  815458:	e0bffa17 	ldw	r2,-24(fp)
  81545c:	10800d03 	ldbu	r2,52(r2)
  815460:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
  815464:	e0bffa17 	ldw	r2,-24(fp)
  815468:	10800d83 	ldbu	r2,54(r2)
  81546c:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  815470:	e0bffa17 	ldw	r2,-24(fp)
  815474:	10800d43 	ldbu	r2,53(r2)
  815478:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  81547c:	e0fff903 	ldbu	r3,-28(fp)
  815480:	008020b4 	movhi	r2,130
  815484:	10b7ba44 	addi	r2,r2,-8471
  815488:	10c5883a 	add	r2,r2,r3
  81548c:	10c00003 	ldbu	r3,0(r2)
  815490:	e0bff803 	ldbu	r2,-32(fp)
  815494:	1884703a 	and	r2,r3,r2
  815498:	10803fcc 	andi	r2,r2,255
  81549c:	1005003a 	cmpeq	r2,r2,zero
  8154a0:	1000381e 	bne	r2,zero,815584 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
  8154a4:	e13ff903 	ldbu	r4,-28(fp)
  8154a8:	e0fff903 	ldbu	r3,-28(fp)
  8154ac:	008020b4 	movhi	r2,130
  8154b0:	10b7ba44 	addi	r2,r2,-8471
  8154b4:	10c5883a 	add	r2,r2,r3
  8154b8:	10800003 	ldbu	r2,0(r2)
  8154bc:	1007883a 	mov	r3,r2
  8154c0:	e0bff803 	ldbu	r2,-32(fp)
  8154c4:	0084303a 	nor	r2,zero,r2
  8154c8:	1884703a 	and	r2,r3,r2
  8154cc:	1007883a 	mov	r3,r2
  8154d0:	008020b4 	movhi	r2,130
  8154d4:	10b7ba44 	addi	r2,r2,-8471
  8154d8:	1105883a 	add	r2,r2,r4
  8154dc:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  8154e0:	e0fff903 	ldbu	r3,-28(fp)
  8154e4:	008020b4 	movhi	r2,130
  8154e8:	10b7ba44 	addi	r2,r2,-8471
  8154ec:	10c5883a 	add	r2,r2,r3
  8154f0:	10800003 	ldbu	r2,0(r2)
  8154f4:	10803fcc 	andi	r2,r2,255
  8154f8:	1004c03a 	cmpne	r2,r2,zero
  8154fc:	10000b1e 	bne	r2,zero,81552c <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
  815500:	e0bff843 	ldbu	r2,-31(fp)
  815504:	0084303a 	nor	r2,zero,r2
  815508:	1007883a 	mov	r3,r2
  81550c:	008020b4 	movhi	r2,130
  815510:	10b7ba04 	addi	r2,r2,-8472
  815514:	10800003 	ldbu	r2,0(r2)
  815518:	1884703a 	and	r2,r3,r2
  81551c:	1007883a 	mov	r3,r2
  815520:	008020b4 	movhi	r2,130
  815524:	10b7ba04 	addi	r2,r2,-8472
  815528:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  81552c:	008020b4 	movhi	r2,130
  815530:	10b7ba04 	addi	r2,r2,-8472
  815534:	10c00003 	ldbu	r3,0(r2)
  815538:	e0bff8c3 	ldbu	r2,-29(fp)
  81553c:	1884b03a 	or	r2,r3,r2
  815540:	1007883a 	mov	r3,r2
  815544:	008020b4 	movhi	r2,130
  815548:	10b7ba04 	addi	r2,r2,-8472
  81554c:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
  815550:	e13ff983 	ldbu	r4,-26(fp)
  815554:	e0fff983 	ldbu	r3,-26(fp)
  815558:	008020b4 	movhi	r2,130
  81555c:	10b7ba44 	addi	r2,r2,-8471
  815560:	10c5883a 	add	r2,r2,r3
  815564:	10c00003 	ldbu	r3,0(r2)
  815568:	e0bff883 	ldbu	r2,-30(fp)
  81556c:	1884b03a 	or	r2,r3,r2
  815570:	1007883a 	mov	r3,r2
  815574:	008020b4 	movhi	r2,130
  815578:	10b7ba44 	addi	r2,r2,-8471
  81557c:	1105883a 	add	r2,r2,r4
  815580:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  815584:	e0bffa17 	ldw	r2,-24(fp)
  815588:	10800717 	ldw	r2,28(r2)
  81558c:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
  815590:	e0bffc17 	ldw	r2,-16(fp)
  815594:	1005003a 	cmpeq	r2,r2,zero
  815598:	1000341e 	bne	r2,zero,81566c <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  81559c:	e13ff903 	ldbu	r4,-28(fp)
  8155a0:	e0fff903 	ldbu	r3,-28(fp)
  8155a4:	e0bffc17 	ldw	r2,-16(fp)
  8155a8:	1885883a 	add	r2,r3,r2
  8155ac:	10800204 	addi	r2,r2,8
  8155b0:	108000c3 	ldbu	r2,3(r2)
  8155b4:	1007883a 	mov	r3,r2
  8155b8:	e0bff803 	ldbu	r2,-32(fp)
  8155bc:	0084303a 	nor	r2,zero,r2
  8155c0:	1884703a 	and	r2,r3,r2
  8155c4:	1007883a 	mov	r3,r2
  8155c8:	e0bffc17 	ldw	r2,-16(fp)
  8155cc:	2085883a 	add	r2,r4,r2
  8155d0:	10800204 	addi	r2,r2,8
  8155d4:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  8155d8:	e0fff903 	ldbu	r3,-28(fp)
  8155dc:	e0bffc17 	ldw	r2,-16(fp)
  8155e0:	1885883a 	add	r2,r3,r2
  8155e4:	10800204 	addi	r2,r2,8
  8155e8:	108000c3 	ldbu	r2,3(r2)
  8155ec:	10803fcc 	andi	r2,r2,255
  8155f0:	1004c03a 	cmpne	r2,r2,zero
  8155f4:	1000091e 	bne	r2,zero,81561c <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
  8155f8:	e0bffc17 	ldw	r2,-16(fp)
  8155fc:	10800283 	ldbu	r2,10(r2)
  815600:	1007883a 	mov	r3,r2
  815604:	e0bff843 	ldbu	r2,-31(fp)
  815608:	0084303a 	nor	r2,zero,r2
  81560c:	1884703a 	and	r2,r3,r2
  815610:	1007883a 	mov	r3,r2
  815614:	e0bffc17 	ldw	r2,-16(fp)
  815618:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  81561c:	e0bffc17 	ldw	r2,-16(fp)
  815620:	10c00283 	ldbu	r3,10(r2)
  815624:	e0bff8c3 	ldbu	r2,-29(fp)
  815628:	1884b03a 	or	r2,r3,r2
  81562c:	1007883a 	mov	r3,r2
  815630:	e0bffc17 	ldw	r2,-16(fp)
  815634:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  815638:	e13ff983 	ldbu	r4,-26(fp)
  81563c:	e0fff983 	ldbu	r3,-26(fp)
  815640:	e0bffc17 	ldw	r2,-16(fp)
  815644:	1885883a 	add	r2,r3,r2
  815648:	10800204 	addi	r2,r2,8
  81564c:	10c000c3 	ldbu	r3,3(r2)
  815650:	e0bff883 	ldbu	r2,-30(fp)
  815654:	1884b03a 	or	r2,r3,r2
  815658:	1007883a 	mov	r3,r2
  81565c:	e0bffc17 	ldw	r2,-16(fp)
  815660:	2085883a 	add	r2,r4,r2
  815664:	10800204 	addi	r2,r2,8
  815668:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  81566c:	e0bffa17 	ldw	r2,-24(fp)
  815670:	10800817 	ldw	r2,32(r2)
  815674:	1005003a 	cmpeq	r2,r2,zero
  815678:	1000441e 	bne	r2,zero,81578c <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
  81567c:	e0bffa17 	ldw	r2,-24(fp)
  815680:	10800817 	ldw	r2,32(r2)
  815684:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
  815688:	e0bffb17 	ldw	r2,-20(fp)
  81568c:	10800017 	ldw	r2,0(r2)
  815690:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
  815694:	00003a06 	br	815780 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  815698:	e13ff903 	ldbu	r4,-28(fp)
  81569c:	e0fff903 	ldbu	r3,-28(fp)
  8156a0:	e0bffc17 	ldw	r2,-16(fp)
  8156a4:	1885883a 	add	r2,r3,r2
  8156a8:	10800204 	addi	r2,r2,8
  8156ac:	108000c3 	ldbu	r2,3(r2)
  8156b0:	1007883a 	mov	r3,r2
  8156b4:	e0bff803 	ldbu	r2,-32(fp)
  8156b8:	0084303a 	nor	r2,zero,r2
  8156bc:	1884703a 	and	r2,r3,r2
  8156c0:	1007883a 	mov	r3,r2
  8156c4:	e0bffc17 	ldw	r2,-16(fp)
  8156c8:	2085883a 	add	r2,r4,r2
  8156cc:	10800204 	addi	r2,r2,8
  8156d0:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  8156d4:	e0fff903 	ldbu	r3,-28(fp)
  8156d8:	e0bffc17 	ldw	r2,-16(fp)
  8156dc:	1885883a 	add	r2,r3,r2
  8156e0:	10800204 	addi	r2,r2,8
  8156e4:	108000c3 	ldbu	r2,3(r2)
  8156e8:	10803fcc 	andi	r2,r2,255
  8156ec:	1004c03a 	cmpne	r2,r2,zero
  8156f0:	1000091e 	bne	r2,zero,815718 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
  8156f4:	e0bffc17 	ldw	r2,-16(fp)
  8156f8:	10800283 	ldbu	r2,10(r2)
  8156fc:	1007883a 	mov	r3,r2
  815700:	e0bff843 	ldbu	r2,-31(fp)
  815704:	0084303a 	nor	r2,zero,r2
  815708:	1884703a 	and	r2,r3,r2
  81570c:	1007883a 	mov	r3,r2
  815710:	e0bffc17 	ldw	r2,-16(fp)
  815714:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  815718:	e0bffc17 	ldw	r2,-16(fp)
  81571c:	10c00283 	ldbu	r3,10(r2)
  815720:	e0bff8c3 	ldbu	r2,-29(fp)
  815724:	1884b03a 	or	r2,r3,r2
  815728:	1007883a 	mov	r3,r2
  81572c:	e0bffc17 	ldw	r2,-16(fp)
  815730:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  815734:	e13ff983 	ldbu	r4,-26(fp)
  815738:	e0fff983 	ldbu	r3,-26(fp)
  81573c:	e0bffc17 	ldw	r2,-16(fp)
  815740:	1885883a 	add	r2,r3,r2
  815744:	10800204 	addi	r2,r2,8
  815748:	10c000c3 	ldbu	r3,3(r2)
  81574c:	e0bff883 	ldbu	r2,-30(fp)
  815750:	1884b03a 	or	r2,r3,r2
  815754:	1007883a 	mov	r3,r2
  815758:	e0bffc17 	ldw	r2,-16(fp)
  81575c:	2085883a 	add	r2,r4,r2
  815760:	10800204 	addi	r2,r2,8
  815764:	10c000c5 	stb	r3,3(r2)
            pevents++;
  815768:	e0bffb17 	ldw	r2,-20(fp)
  81576c:	10800104 	addi	r2,r2,4
  815770:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
  815774:	e0bffb17 	ldw	r2,-20(fp)
  815778:	10800017 	ldw	r2,0(r2)
  81577c:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  815780:	e0bffc17 	ldw	r2,-16(fp)
  815784:	1004c03a 	cmpne	r2,r2,zero
  815788:	103fc31e 	bne	r2,zero,815698 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  81578c:	e0fffa17 	ldw	r3,-24(fp)
  815790:	e0bffe03 	ldbu	r2,-8(fp)
  815794:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
  815798:	e0fffa17 	ldw	r3,-24(fp)
  81579c:	e0bff983 	ldbu	r2,-26(fp)
  8157a0:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
  8157a4:	e0fffa17 	ldw	r3,-24(fp)
  8157a8:	e0bff943 	ldbu	r2,-27(fp)
  8157ac:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
  8157b0:	e0fffa17 	ldw	r3,-24(fp)
  8157b4:	e0bff8c3 	ldbu	r2,-29(fp)
  8157b8:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
  8157bc:	e0fffa17 	ldw	r3,-24(fp)
  8157c0:	e0bff883 	ldbu	r2,-30(fp)
  8157c4:	18800d45 	stb	r2,53(r3)
  8157c8:	e0bff717 	ldw	r2,-36(fp)
  8157cc:	e0bff215 	stw	r2,-56(fp)
  8157d0:	e0bff217 	ldw	r2,-56(fp)
  8157d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  8157d8:	008020b4 	movhi	r2,130
  8157dc:	10b7ae44 	addi	r2,r2,-8519
  8157e0:	10800003 	ldbu	r2,0(r2)
  8157e4:	10803fcc 	andi	r2,r2,255
  8157e8:	10800058 	cmpnei	r2,r2,1
  8157ec:	1000011e 	bne	r2,zero,8157f4 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
  8157f0:	08109e40 	call	8109e4 <OS_Sched>
    }
    return (OS_ERR_NONE);
  8157f4:	e03fff15 	stw	zero,-4(fp)
  8157f8:	e0bfff17 	ldw	r2,-4(fp)
}
  8157fc:	e037883a 	mov	sp,fp
  815800:	dfc00117 	ldw	ra,4(sp)
  815804:	df000017 	ldw	fp,0(sp)
  815808:	dec00204 	addi	sp,sp,8
  81580c:	f800283a 	ret

00815810 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  815810:	deffed04 	addi	sp,sp,-76
  815814:	dfc01215 	stw	ra,72(sp)
  815818:	df001115 	stw	fp,68(sp)
  81581c:	df001104 	addi	fp,sp,68
  815820:	e13ffb15 	stw	r4,-20(fp)
  815824:	e17ffc15 	stw	r5,-16(fp)
  815828:	e1bffd15 	stw	r6,-12(fp)
  81582c:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  815830:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  815834:	e0bffe03 	ldbu	r2,-8(fp)
  815838:	10800570 	cmpltui	r2,r2,21
  81583c:	1000031e 	bne	r2,zero,81584c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  815840:	00800a84 	movi	r2,42
  815844:	e0bfff15 	stw	r2,-4(fp)
  815848:	00006006 	br	8159cc <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81584c:	0005303a 	rdctl	r2,status
  815850:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815854:	e0fff717 	ldw	r3,-36(fp)
  815858:	00bfff84 	movi	r2,-2
  81585c:	1884703a 	and	r2,r3,r2
  815860:	1001703a 	wrctl	status,r2
  
  return context;
  815864:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  815868:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  81586c:	008020b4 	movhi	r2,130
  815870:	10b7bc04 	addi	r2,r2,-8464
  815874:	10800003 	ldbu	r2,0(r2)
  815878:	10803fcc 	andi	r2,r2,255
  81587c:	1005003a 	cmpeq	r2,r2,zero
  815880:	1000071e 	bne	r2,zero,8158a0 <OSTaskCreate+0x90>
  815884:	e0bff817 	ldw	r2,-32(fp)
  815888:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81588c:	e0bff617 	ldw	r2,-40(fp)
  815890:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  815894:	00800f04 	movi	r2,60
  815898:	e0bfff15 	stw	r2,-4(fp)
  81589c:	00004b06 	br	8159cc <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  8158a0:	e0bffe03 	ldbu	r2,-8(fp)
  8158a4:	00c020b4 	movhi	r3,130
  8158a8:	18d44304 	addi	r3,r3,20748
  8158ac:	1085883a 	add	r2,r2,r2
  8158b0:	1085883a 	add	r2,r2,r2
  8158b4:	10c5883a 	add	r2,r2,r3
  8158b8:	10800017 	ldw	r2,0(r2)
  8158bc:	1004c03a 	cmpne	r2,r2,zero
  8158c0:	10003c1e 	bne	r2,zero,8159b4 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  8158c4:	e0bffe03 	ldbu	r2,-8(fp)
  8158c8:	00c020b4 	movhi	r3,130
  8158cc:	18d44304 	addi	r3,r3,20748
  8158d0:	1085883a 	add	r2,r2,r2
  8158d4:	1085883a 	add	r2,r2,r2
  8158d8:	10c7883a 	add	r3,r2,r3
  8158dc:	00800044 	movi	r2,1
  8158e0:	18800015 	stw	r2,0(r3)
  8158e4:	e0bff817 	ldw	r2,-32(fp)
  8158e8:	e0bff515 	stw	r2,-44(fp)
  8158ec:	e0bff517 	ldw	r2,-44(fp)
  8158f0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  8158f4:	e13ffb17 	ldw	r4,-20(fp)
  8158f8:	e17ffc17 	ldw	r5,-16(fp)
  8158fc:	e1bffd17 	ldw	r6,-12(fp)
  815900:	000f883a 	mov	r7,zero
  815904:	08196040 	call	819604 <OSTaskStkInit>
  815908:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  81590c:	e13ffe03 	ldbu	r4,-8(fp)
  815910:	d8000015 	stw	zero,0(sp)
  815914:	d8000115 	stw	zero,4(sp)
  815918:	d8000215 	stw	zero,8(sp)
  81591c:	e17ffa17 	ldw	r5,-24(fp)
  815920:	000d883a 	mov	r6,zero
  815924:	000f883a 	mov	r7,zero
  815928:	0810dec0 	call	810dec <OS_TCBInit>
  81592c:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
  815930:	e0bff903 	ldbu	r2,-28(fp)
  815934:	1004c03a 	cmpne	r2,r2,zero
  815938:	1000081e 	bne	r2,zero,81595c <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  81593c:	008020b4 	movhi	r2,130
  815940:	10b7ae44 	addi	r2,r2,-8519
  815944:	10800003 	ldbu	r2,0(r2)
  815948:	10803fcc 	andi	r2,r2,255
  81594c:	10800058 	cmpnei	r2,r2,1
  815950:	1000151e 	bne	r2,zero,8159a8 <OSTaskCreate+0x198>
                OS_Sched();
  815954:	08109e40 	call	8109e4 <OS_Sched>
  815958:	00001306 	br	8159a8 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81595c:	0005303a 	rdctl	r2,status
  815960:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815964:	e0fff417 	ldw	r3,-48(fp)
  815968:	00bfff84 	movi	r2,-2
  81596c:	1884703a 	and	r2,r3,r2
  815970:	1001703a 	wrctl	status,r2
  
  return context;
  815974:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  815978:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  81597c:	e0bffe03 	ldbu	r2,-8(fp)
  815980:	00c020b4 	movhi	r3,130
  815984:	18d44304 	addi	r3,r3,20748
  815988:	1085883a 	add	r2,r2,r2
  81598c:	1085883a 	add	r2,r2,r2
  815990:	10c5883a 	add	r2,r2,r3
  815994:	10000015 	stw	zero,0(r2)
  815998:	e0bff817 	ldw	r2,-32(fp)
  81599c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8159a0:	e0bff317 	ldw	r2,-52(fp)
  8159a4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  8159a8:	e0bff903 	ldbu	r2,-28(fp)
  8159ac:	e0bfff15 	stw	r2,-4(fp)
  8159b0:	00000606 	br	8159cc <OSTaskCreate+0x1bc>
  8159b4:	e0bff817 	ldw	r2,-32(fp)
  8159b8:	e0bff215 	stw	r2,-56(fp)
  8159bc:	e0bff217 	ldw	r2,-56(fp)
  8159c0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  8159c4:	00800a04 	movi	r2,40
  8159c8:	e0bfff15 	stw	r2,-4(fp)
  8159cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8159d0:	e037883a 	mov	sp,fp
  8159d4:	dfc00117 	ldw	ra,4(sp)
  8159d8:	df000017 	ldw	fp,0(sp)
  8159dc:	dec00204 	addi	sp,sp,8
  8159e0:	f800283a 	ret

008159e4 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  8159e4:	deffeb04 	addi	sp,sp,-84
  8159e8:	dfc01415 	stw	ra,80(sp)
  8159ec:	df001315 	stw	fp,76(sp)
  8159f0:	df001304 	addi	fp,sp,76
  8159f4:	e13ff915 	stw	r4,-28(fp)
  8159f8:	e17ffa15 	stw	r5,-24(fp)
  8159fc:	e1bffb15 	stw	r6,-20(fp)
  815a00:	e0800217 	ldw	r2,8(fp)
  815a04:	e0c00617 	ldw	r3,24(fp)
  815a08:	e1fffc05 	stb	r7,-16(fp)
  815a0c:	e0bffd0d 	sth	r2,-12(fp)
  815a10:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  815a14:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  815a18:	e0bffc03 	ldbu	r2,-16(fp)
  815a1c:	10800570 	cmpltui	r2,r2,21
  815a20:	1000031e 	bne	r2,zero,815a30 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  815a24:	00800a84 	movi	r2,42
  815a28:	e0bfff15 	stw	r2,-4(fp)
  815a2c:	00006706 	br	815bcc <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815a30:	0005303a 	rdctl	r2,status
  815a34:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815a38:	e0fff517 	ldw	r3,-44(fp)
  815a3c:	00bfff84 	movi	r2,-2
  815a40:	1884703a 	and	r2,r3,r2
  815a44:	1001703a 	wrctl	status,r2
  
  return context;
  815a48:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  815a4c:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  815a50:	008020b4 	movhi	r2,130
  815a54:	10b7bc04 	addi	r2,r2,-8464
  815a58:	10800003 	ldbu	r2,0(r2)
  815a5c:	10803fcc 	andi	r2,r2,255
  815a60:	1005003a 	cmpeq	r2,r2,zero
  815a64:	1000071e 	bne	r2,zero,815a84 <OSTaskCreateExt+0xa0>
  815a68:	e0bff617 	ldw	r2,-40(fp)
  815a6c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815a70:	e0bff417 	ldw	r2,-48(fp)
  815a74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  815a78:	00800f04 	movi	r2,60
  815a7c:	e0bfff15 	stw	r2,-4(fp)
  815a80:	00005206 	br	815bcc <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  815a84:	e0bffc03 	ldbu	r2,-16(fp)
  815a88:	00c020b4 	movhi	r3,130
  815a8c:	18d44304 	addi	r3,r3,20748
  815a90:	1085883a 	add	r2,r2,r2
  815a94:	1085883a 	add	r2,r2,r2
  815a98:	10c5883a 	add	r2,r2,r3
  815a9c:	10800017 	ldw	r2,0(r2)
  815aa0:	1004c03a 	cmpne	r2,r2,zero
  815aa4:	1000431e 	bne	r2,zero,815bb4 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  815aa8:	e0bffc03 	ldbu	r2,-16(fp)
  815aac:	00c020b4 	movhi	r3,130
  815ab0:	18d44304 	addi	r3,r3,20748
  815ab4:	1085883a 	add	r2,r2,r2
  815ab8:	1085883a 	add	r2,r2,r2
  815abc:	10c7883a 	add	r3,r2,r3
  815ac0:	00800044 	movi	r2,1
  815ac4:	18800015 	stw	r2,0(r3)
  815ac8:	e0bff617 	ldw	r2,-40(fp)
  815acc:	e0bff315 	stw	r2,-52(fp)
  815ad0:	e0bff317 	ldw	r2,-52(fp)
  815ad4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  815ad8:	e1bffe0b 	ldhu	r6,-8(fp)
  815adc:	e1000317 	ldw	r4,12(fp)
  815ae0:	e1400417 	ldw	r5,16(fp)
  815ae4:	0816c600 	call	816c60 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  815ae8:	e1fffe0b 	ldhu	r7,-8(fp)
  815aec:	e13ff917 	ldw	r4,-28(fp)
  815af0:	e17ffa17 	ldw	r5,-24(fp)
  815af4:	e1bffb17 	ldw	r6,-20(fp)
  815af8:	08196040 	call	819604 <OSTaskStkInit>
  815afc:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  815b00:	e13ffc03 	ldbu	r4,-16(fp)
  815b04:	e1fffd0b 	ldhu	r7,-12(fp)
  815b08:	e0fffe0b 	ldhu	r3,-8(fp)
  815b0c:	e0800417 	ldw	r2,16(fp)
  815b10:	d8800015 	stw	r2,0(sp)
  815b14:	e0800517 	ldw	r2,20(fp)
  815b18:	d8800115 	stw	r2,4(sp)
  815b1c:	d8c00215 	stw	r3,8(sp)
  815b20:	e17ff817 	ldw	r5,-32(fp)
  815b24:	e1800317 	ldw	r6,12(fp)
  815b28:	0810dec0 	call	810dec <OS_TCBInit>
  815b2c:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
  815b30:	e0bff703 	ldbu	r2,-36(fp)
  815b34:	1004c03a 	cmpne	r2,r2,zero
  815b38:	1000081e 	bne	r2,zero,815b5c <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  815b3c:	008020b4 	movhi	r2,130
  815b40:	10b7ae44 	addi	r2,r2,-8519
  815b44:	10800003 	ldbu	r2,0(r2)
  815b48:	10803fcc 	andi	r2,r2,255
  815b4c:	10800058 	cmpnei	r2,r2,1
  815b50:	1000151e 	bne	r2,zero,815ba8 <OSTaskCreateExt+0x1c4>
                OS_Sched();
  815b54:	08109e40 	call	8109e4 <OS_Sched>
  815b58:	00001306 	br	815ba8 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815b5c:	0005303a 	rdctl	r2,status
  815b60:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815b64:	e0fff217 	ldw	r3,-56(fp)
  815b68:	00bfff84 	movi	r2,-2
  815b6c:	1884703a 	and	r2,r3,r2
  815b70:	1001703a 	wrctl	status,r2
  
  return context;
  815b74:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  815b78:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  815b7c:	e0bffc03 	ldbu	r2,-16(fp)
  815b80:	00c020b4 	movhi	r3,130
  815b84:	18d44304 	addi	r3,r3,20748
  815b88:	1085883a 	add	r2,r2,r2
  815b8c:	1085883a 	add	r2,r2,r2
  815b90:	10c5883a 	add	r2,r2,r3
  815b94:	10000015 	stw	zero,0(r2)
  815b98:	e0bff617 	ldw	r2,-40(fp)
  815b9c:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815ba0:	e0bff117 	ldw	r2,-60(fp)
  815ba4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  815ba8:	e0bff703 	ldbu	r2,-36(fp)
  815bac:	e0bfff15 	stw	r2,-4(fp)
  815bb0:	00000606 	br	815bcc <OSTaskCreateExt+0x1e8>
  815bb4:	e0bff617 	ldw	r2,-40(fp)
  815bb8:	e0bff015 	stw	r2,-64(fp)
  815bbc:	e0bff017 	ldw	r2,-64(fp)
  815bc0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  815bc4:	00800a04 	movi	r2,40
  815bc8:	e0bfff15 	stw	r2,-4(fp)
  815bcc:	e0bfff17 	ldw	r2,-4(fp)
}
  815bd0:	e037883a 	mov	sp,fp
  815bd4:	dfc00117 	ldw	ra,4(sp)
  815bd8:	df000017 	ldw	fp,0(sp)
  815bdc:	dec00204 	addi	sp,sp,8
  815be0:	f800283a 	ret

00815be4 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  815be4:	defff304 	addi	sp,sp,-52
  815be8:	dfc00c15 	stw	ra,48(sp)
  815bec:	df000b15 	stw	fp,44(sp)
  815bf0:	df000b04 	addi	fp,sp,44
  815bf4:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  815bf8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  815bfc:	008020b4 	movhi	r2,130
  815c00:	10b7bc04 	addi	r2,r2,-8464
  815c04:	10800003 	ldbu	r2,0(r2)
  815c08:	10803fcc 	andi	r2,r2,255
  815c0c:	1005003a 	cmpeq	r2,r2,zero
  815c10:	1000031e 	bne	r2,zero,815c20 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
  815c14:	00801004 	movi	r2,64
  815c18:	e0bfff15 	stw	r2,-4(fp)
  815c1c:	0000ee06 	br	815fd8 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  815c20:	e0bffe03 	ldbu	r2,-8(fp)
  815c24:	10800518 	cmpnei	r2,r2,20
  815c28:	1000031e 	bne	r2,zero,815c38 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
  815c2c:	00800f84 	movi	r2,62
  815c30:	e0bfff15 	stw	r2,-4(fp)
  815c34:	0000e806 	br	815fd8 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  815c38:	e0bffe03 	ldbu	r2,-8(fp)
  815c3c:	10800530 	cmpltui	r2,r2,20
  815c40:	1000061e 	bne	r2,zero,815c5c <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
  815c44:	e0bffe03 	ldbu	r2,-8(fp)
  815c48:	10803fe0 	cmpeqi	r2,r2,255
  815c4c:	1000031e 	bne	r2,zero,815c5c <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
  815c50:	00800a84 	movi	r2,42
  815c54:	e0bfff15 	stw	r2,-4(fp)
  815c58:	0000df06 	br	815fd8 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815c5c:	0005303a 	rdctl	r2,status
  815c60:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815c64:	e0fffa17 	ldw	r3,-24(fp)
  815c68:	00bfff84 	movi	r2,-2
  815c6c:	1884703a 	and	r2,r3,r2
  815c70:	1001703a 	wrctl	status,r2
  
  return context;
  815c74:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  815c78:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  815c7c:	e0bffe03 	ldbu	r2,-8(fp)
  815c80:	10803fd8 	cmpnei	r2,r2,255
  815c84:	1000051e 	bne	r2,zero,815c9c <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  815c88:	008020b4 	movhi	r2,130
  815c8c:	10b7bd04 	addi	r2,r2,-8460
  815c90:	10800017 	ldw	r2,0(r2)
  815c94:	10800c83 	ldbu	r2,50(r2)
  815c98:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  815c9c:	e0bffe03 	ldbu	r2,-8(fp)
  815ca0:	00c020b4 	movhi	r3,130
  815ca4:	18d44304 	addi	r3,r3,20748
  815ca8:	1085883a 	add	r2,r2,r2
  815cac:	1085883a 	add	r2,r2,r2
  815cb0:	10c5883a 	add	r2,r2,r3
  815cb4:	10800017 	ldw	r2,0(r2)
  815cb8:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  815cbc:	e0bffc17 	ldw	r2,-16(fp)
  815cc0:	1004c03a 	cmpne	r2,r2,zero
  815cc4:	1000071e 	bne	r2,zero,815ce4 <OSTaskDel+0x100>
  815cc8:	e0bffb17 	ldw	r2,-20(fp)
  815ccc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815cd0:	e0bff917 	ldw	r2,-28(fp)
  815cd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  815cd8:	008010c4 	movi	r2,67
  815cdc:	e0bfff15 	stw	r2,-4(fp)
  815ce0:	0000bd06 	br	815fd8 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  815ce4:	e0bffc17 	ldw	r2,-16(fp)
  815ce8:	10800058 	cmpnei	r2,r2,1
  815cec:	1000071e 	bne	r2,zero,815d0c <OSTaskDel+0x128>
  815cf0:	e0bffb17 	ldw	r2,-20(fp)
  815cf4:	e0bff815 	stw	r2,-32(fp)
  815cf8:	e0bff817 	ldw	r2,-32(fp)
  815cfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  815d00:	00800f44 	movi	r2,61
  815d04:	e0bfff15 	stw	r2,-4(fp)
  815d08:	0000b306 	br	815fd8 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  815d0c:	e0bffc17 	ldw	r2,-16(fp)
  815d10:	10800d03 	ldbu	r2,52(r2)
  815d14:	11003fcc 	andi	r4,r2,255
  815d18:	e0bffc17 	ldw	r2,-16(fp)
  815d1c:	10800d03 	ldbu	r2,52(r2)
  815d20:	10c03fcc 	andi	r3,r2,255
  815d24:	008020b4 	movhi	r2,130
  815d28:	10b7ba44 	addi	r2,r2,-8471
  815d2c:	10c5883a 	add	r2,r2,r3
  815d30:	10800003 	ldbu	r2,0(r2)
  815d34:	1007883a 	mov	r3,r2
  815d38:	e0bffc17 	ldw	r2,-16(fp)
  815d3c:	10800d43 	ldbu	r2,53(r2)
  815d40:	0084303a 	nor	r2,zero,r2
  815d44:	1884703a 	and	r2,r3,r2
  815d48:	1007883a 	mov	r3,r2
  815d4c:	008020b4 	movhi	r2,130
  815d50:	10b7ba44 	addi	r2,r2,-8471
  815d54:	1105883a 	add	r2,r2,r4
  815d58:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  815d5c:	e0bffc17 	ldw	r2,-16(fp)
  815d60:	10800d03 	ldbu	r2,52(r2)
  815d64:	10c03fcc 	andi	r3,r2,255
  815d68:	008020b4 	movhi	r2,130
  815d6c:	10b7ba44 	addi	r2,r2,-8471
  815d70:	10c5883a 	add	r2,r2,r3
  815d74:	10800003 	ldbu	r2,0(r2)
  815d78:	10803fcc 	andi	r2,r2,255
  815d7c:	1004c03a 	cmpne	r2,r2,zero
  815d80:	10000c1e 	bne	r2,zero,815db4 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  815d84:	e0bffc17 	ldw	r2,-16(fp)
  815d88:	10800d83 	ldbu	r2,54(r2)
  815d8c:	0084303a 	nor	r2,zero,r2
  815d90:	1007883a 	mov	r3,r2
  815d94:	008020b4 	movhi	r2,130
  815d98:	10b7ba04 	addi	r2,r2,-8472
  815d9c:	10800003 	ldbu	r2,0(r2)
  815da0:	1884703a 	and	r2,r3,r2
  815da4:	1007883a 	mov	r3,r2
  815da8:	008020b4 	movhi	r2,130
  815dac:	10b7ba04 	addi	r2,r2,-8472
  815db0:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  815db4:	e0bffc17 	ldw	r2,-16(fp)
  815db8:	10800717 	ldw	r2,28(r2)
  815dbc:	1005003a 	cmpeq	r2,r2,zero
  815dc0:	1000041e 	bne	r2,zero,815dd4 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  815dc4:	e0bffc17 	ldw	r2,-16(fp)
  815dc8:	11400717 	ldw	r5,28(r2)
  815dcc:	e13ffc17 	ldw	r4,-16(fp)
  815dd0:	081039c0 	call	81039c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  815dd4:	e0bffc17 	ldw	r2,-16(fp)
  815dd8:	10800817 	ldw	r2,32(r2)
  815ddc:	1005003a 	cmpeq	r2,r2,zero
  815de0:	1000041e 	bne	r2,zero,815df4 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  815de4:	e0bffc17 	ldw	r2,-16(fp)
  815de8:	11400817 	ldw	r5,32(r2)
  815dec:	e13ffc17 	ldw	r4,-16(fp)
  815df0:	08104540 	call	810454 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  815df4:	e0bffc17 	ldw	r2,-16(fp)
  815df8:	10800a17 	ldw	r2,40(r2)
  815dfc:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  815e00:	e0bffd17 	ldw	r2,-12(fp)
  815e04:	1005003a 	cmpeq	r2,r2,zero
  815e08:	1000021e 	bne	r2,zero,815e14 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  815e0c:	e13ffd17 	ldw	r4,-12(fp)
  815e10:	0812ae80 	call	812ae8 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  815e14:	e0bffc17 	ldw	r2,-16(fp)
  815e18:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  815e1c:	e0bffc17 	ldw	r2,-16(fp)
  815e20:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  815e24:	e0bffc17 	ldw	r2,-16(fp)
  815e28:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  815e2c:	008020b4 	movhi	r2,130
  815e30:	10b7ae04 	addi	r2,r2,-8520
  815e34:	10800003 	ldbu	r2,0(r2)
  815e38:	10803fcc 	andi	r2,r2,255
  815e3c:	10803fe0 	cmpeqi	r2,r2,255
  815e40:	1000081e 	bne	r2,zero,815e64 <OSTaskDel+0x280>
        OSLockNesting++;
  815e44:	008020b4 	movhi	r2,130
  815e48:	10b7ae04 	addi	r2,r2,-8520
  815e4c:	10800003 	ldbu	r2,0(r2)
  815e50:	10800044 	addi	r2,r2,1
  815e54:	1007883a 	mov	r3,r2
  815e58:	008020b4 	movhi	r2,130
  815e5c:	10b7ae04 	addi	r2,r2,-8520
  815e60:	10c00005 	stb	r3,0(r2)
  815e64:	e0bffb17 	ldw	r2,-20(fp)
  815e68:	e0bff715 	stw	r2,-36(fp)
  815e6c:	e0bff717 	ldw	r2,-36(fp)
  815e70:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  815e74:	080ff880 	call	80ff88 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815e78:	0005303a 	rdctl	r2,status
  815e7c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815e80:	e0fff617 	ldw	r3,-40(fp)
  815e84:	00bfff84 	movi	r2,-2
  815e88:	1884703a 	and	r2,r3,r2
  815e8c:	1001703a 	wrctl	status,r2
  
  return context;
  815e90:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  815e94:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  815e98:	008020b4 	movhi	r2,130
  815e9c:	10b7ae04 	addi	r2,r2,-8520
  815ea0:	10800003 	ldbu	r2,0(r2)
  815ea4:	10803fcc 	andi	r2,r2,255
  815ea8:	1005003a 	cmpeq	r2,r2,zero
  815eac:	1000081e 	bne	r2,zero,815ed0 <OSTaskDel+0x2ec>
        OSLockNesting--;
  815eb0:	008020b4 	movhi	r2,130
  815eb4:	10b7ae04 	addi	r2,r2,-8520
  815eb8:	10800003 	ldbu	r2,0(r2)
  815ebc:	10bfffc4 	addi	r2,r2,-1
  815ec0:	1007883a 	mov	r3,r2
  815ec4:	008020b4 	movhi	r2,130
  815ec8:	10b7ae04 	addi	r2,r2,-8520
  815ecc:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  815ed0:	e13ffc17 	ldw	r4,-16(fp)
  815ed4:	08199340 	call	819934 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  815ed8:	008020b4 	movhi	r2,130
  815edc:	10b7b644 	addi	r2,r2,-8487
  815ee0:	10800003 	ldbu	r2,0(r2)
  815ee4:	10bfffc4 	addi	r2,r2,-1
  815ee8:	1007883a 	mov	r3,r2
  815eec:	008020b4 	movhi	r2,130
  815ef0:	10b7b644 	addi	r2,r2,-8487
  815ef4:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  815ef8:	e0bffe03 	ldbu	r2,-8(fp)
  815efc:	00c020b4 	movhi	r3,130
  815f00:	18d44304 	addi	r3,r3,20748
  815f04:	1085883a 	add	r2,r2,r2
  815f08:	1085883a 	add	r2,r2,r2
  815f0c:	10c5883a 	add	r2,r2,r3
  815f10:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  815f14:	e0bffc17 	ldw	r2,-16(fp)
  815f18:	10800617 	ldw	r2,24(r2)
  815f1c:	1004c03a 	cmpne	r2,r2,zero
  815f20:	1000091e 	bne	r2,zero,815f48 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  815f24:	e0bffc17 	ldw	r2,-16(fp)
  815f28:	10800517 	ldw	r2,20(r2)
  815f2c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  815f30:	e0bffc17 	ldw	r2,-16(fp)
  815f34:	10c00517 	ldw	r3,20(r2)
  815f38:	008020b4 	movhi	r2,130
  815f3c:	10b7b104 	addi	r2,r2,-8508
  815f40:	10c00015 	stw	r3,0(r2)
  815f44:	00000a06 	br	815f70 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  815f48:	e0bffc17 	ldw	r2,-16(fp)
  815f4c:	10c00617 	ldw	r3,24(r2)
  815f50:	e0bffc17 	ldw	r2,-16(fp)
  815f54:	10800517 	ldw	r2,20(r2)
  815f58:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  815f5c:	e0bffc17 	ldw	r2,-16(fp)
  815f60:	10c00517 	ldw	r3,20(r2)
  815f64:	e0bffc17 	ldw	r2,-16(fp)
  815f68:	10800617 	ldw	r2,24(r2)
  815f6c:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  815f70:	008020b4 	movhi	r2,130
  815f74:	10b7b504 	addi	r2,r2,-8492
  815f78:	10c00017 	ldw	r3,0(r2)
  815f7c:	e0bffc17 	ldw	r2,-16(fp)
  815f80:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  815f84:	00c020b4 	movhi	r3,130
  815f88:	18f7b504 	addi	r3,r3,-8492
  815f8c:	e0bffc17 	ldw	r2,-16(fp)
  815f90:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  815f94:	e0fffc17 	ldw	r3,-16(fp)
  815f98:	00800fc4 	movi	r2,63
  815f9c:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  815fa0:	e0bffc17 	ldw	r2,-16(fp)
  815fa4:	10001345 	stb	zero,77(r2)
  815fa8:	e0bffb17 	ldw	r2,-20(fp)
  815fac:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815fb0:	e0bff517 	ldw	r2,-44(fp)
  815fb4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  815fb8:	008020b4 	movhi	r2,130
  815fbc:	10b7ae44 	addi	r2,r2,-8519
  815fc0:	10800003 	ldbu	r2,0(r2)
  815fc4:	10803fcc 	andi	r2,r2,255
  815fc8:	10800058 	cmpnei	r2,r2,1
  815fcc:	1000011e 	bne	r2,zero,815fd4 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
  815fd0:	08109e40 	call	8109e4 <OS_Sched>
    }
    return (OS_ERR_NONE);
  815fd4:	e03fff15 	stw	zero,-4(fp)
  815fd8:	e0bfff17 	ldw	r2,-4(fp)
}
  815fdc:	e037883a 	mov	sp,fp
  815fe0:	dfc00117 	ldw	ra,4(sp)
  815fe4:	df000017 	ldw	fp,0(sp)
  815fe8:	dec00204 	addi	sp,sp,8
  815fec:	f800283a 	ret

00815ff0 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  815ff0:	defff404 	addi	sp,sp,-48
  815ff4:	df000b15 	stw	fp,44(sp)
  815ff8:	df000b04 	addi	fp,sp,44
  815ffc:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  816000:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  816004:	e0bffe03 	ldbu	r2,-8(fp)
  816008:	10800518 	cmpnei	r2,r2,20
  81600c:	1000031e 	bne	r2,zero,81601c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  816010:	00800f84 	movi	r2,62
  816014:	e0bfff15 	stw	r2,-4(fp)
  816018:	00004c06 	br	81614c <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  81601c:	e0bffe03 	ldbu	r2,-8(fp)
  816020:	10800530 	cmpltui	r2,r2,20
  816024:	1000061e 	bne	r2,zero,816040 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
  816028:	e0bffe03 	ldbu	r2,-8(fp)
  81602c:	10803fe0 	cmpeqi	r2,r2,255
  816030:	1000031e 	bne	r2,zero,816040 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
  816034:	00800a84 	movi	r2,42
  816038:	e0bfff15 	stw	r2,-4(fp)
  81603c:	00004306 	br	81614c <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  816040:	e0bffe03 	ldbu	r2,-8(fp)
  816044:	10803fd8 	cmpnei	r2,r2,255
  816048:	1000141e 	bne	r2,zero,81609c <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81604c:	0005303a 	rdctl	r2,status
  816050:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816054:	e0fffa17 	ldw	r3,-24(fp)
  816058:	00bfff84 	movi	r2,-2
  81605c:	1884703a 	and	r2,r3,r2
  816060:	1001703a 	wrctl	status,r2
  
  return context;
  816064:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  816068:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  81606c:	008020b4 	movhi	r2,130
  816070:	10b7bd04 	addi	r2,r2,-8460
  816074:	10800017 	ldw	r2,0(r2)
  816078:	10800dc3 	ldbu	r2,55(r2)
  81607c:	e0bffd05 	stb	r2,-12(fp)
  816080:	e0bffb17 	ldw	r2,-20(fp)
  816084:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816088:	e0bff917 	ldw	r2,-28(fp)
  81608c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  816090:	e0bffd03 	ldbu	r2,-12(fp)
  816094:	e0bfff15 	stw	r2,-4(fp)
  816098:	00002c06 	br	81614c <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81609c:	0005303a 	rdctl	r2,status
  8160a0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8160a4:	e0fff817 	ldw	r3,-32(fp)
  8160a8:	00bfff84 	movi	r2,-2
  8160ac:	1884703a 	and	r2,r3,r2
  8160b0:	1001703a 	wrctl	status,r2
  
  return context;
  8160b4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  8160b8:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
  8160bc:	e0bffe03 	ldbu	r2,-8(fp)
  8160c0:	00c020b4 	movhi	r3,130
  8160c4:	18d44304 	addi	r3,r3,20748
  8160c8:	1085883a 	add	r2,r2,r2
  8160cc:	1085883a 	add	r2,r2,r2
  8160d0:	10c5883a 	add	r2,r2,r3
  8160d4:	10800017 	ldw	r2,0(r2)
  8160d8:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  8160dc:	e0bffc17 	ldw	r2,-16(fp)
  8160e0:	1004c03a 	cmpne	r2,r2,zero
  8160e4:	1000071e 	bne	r2,zero,816104 <OSTaskDelReq+0x114>
  8160e8:	e0bffb17 	ldw	r2,-20(fp)
  8160ec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8160f0:	e0bff717 	ldw	r2,-36(fp)
  8160f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  8160f8:	008010c4 	movi	r2,67
  8160fc:	e0bfff15 	stw	r2,-4(fp)
  816100:	00001206 	br	81614c <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  816104:	e0bffc17 	ldw	r2,-16(fp)
  816108:	10800058 	cmpnei	r2,r2,1
  81610c:	1000071e 	bne	r2,zero,81612c <OSTaskDelReq+0x13c>
  816110:	e0bffb17 	ldw	r2,-20(fp)
  816114:	e0bff615 	stw	r2,-40(fp)
  816118:	e0bff617 	ldw	r2,-40(fp)
  81611c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  816120:	00800f44 	movi	r2,61
  816124:	e0bfff15 	stw	r2,-4(fp)
  816128:	00000806 	br	81614c <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  81612c:	e0fffc17 	ldw	r3,-16(fp)
  816130:	00800fc4 	movi	r2,63
  816134:	18800dc5 	stb	r2,55(r3)
  816138:	e0bffb17 	ldw	r2,-20(fp)
  81613c:	e0bff515 	stw	r2,-44(fp)
  816140:	e0bff517 	ldw	r2,-44(fp)
  816144:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  816148:	e03fff15 	stw	zero,-4(fp)
  81614c:	e0bfff17 	ldw	r2,-4(fp)
}
  816150:	e037883a 	mov	sp,fp
  816154:	df000017 	ldw	fp,0(sp)
  816158:	dec00104 	addi	sp,sp,4
  81615c:	f800283a 	ret

00816160 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  816160:	defff304 	addi	sp,sp,-52
  816164:	dfc00c15 	stw	ra,48(sp)
  816168:	df000b15 	stw	fp,44(sp)
  81616c:	df000b04 	addi	fp,sp,44
  816170:	e17ffd15 	stw	r5,-12(fp)
  816174:	e1bffe15 	stw	r6,-8(fp)
  816178:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  81617c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  816180:	e0bffe17 	ldw	r2,-8(fp)
  816184:	1004c03a 	cmpne	r2,r2,zero
  816188:	1000021e 	bne	r2,zero,816194 <OSTaskNameGet+0x34>
        return (0);
  81618c:	e03fff15 	stw	zero,-4(fp)
  816190:	00005b06 	br	816300 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  816194:	e0bffc03 	ldbu	r2,-16(fp)
  816198:	10800570 	cmpltui	r2,r2,21
  81619c:	1000081e 	bne	r2,zero,8161c0 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  8161a0:	e0bffc03 	ldbu	r2,-16(fp)
  8161a4:	10803fe0 	cmpeqi	r2,r2,255
  8161a8:	1000051e 	bne	r2,zero,8161c0 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  8161ac:	e0fffe17 	ldw	r3,-8(fp)
  8161b0:	00800a84 	movi	r2,42
  8161b4:	18800005 	stb	r2,0(r3)
            return (0);
  8161b8:	e03fff15 	stw	zero,-4(fp)
  8161bc:	00005006 	br	816300 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  8161c0:	e0bffd17 	ldw	r2,-12(fp)
  8161c4:	1004c03a 	cmpne	r2,r2,zero
  8161c8:	1000051e 	bne	r2,zero,8161e0 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  8161cc:	e0fffe17 	ldw	r3,-8(fp)
  8161d0:	00800304 	movi	r2,12
  8161d4:	18800005 	stb	r2,0(r3)
        return (0);
  8161d8:	e03fff15 	stw	zero,-4(fp)
  8161dc:	00004806 	br	816300 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  8161e0:	008020b4 	movhi	r2,130
  8161e4:	10b7bc04 	addi	r2,r2,-8464
  8161e8:	10800003 	ldbu	r2,0(r2)
  8161ec:	10803fcc 	andi	r2,r2,255
  8161f0:	1005003a 	cmpeq	r2,r2,zero
  8161f4:	1000051e 	bne	r2,zero,81620c <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
  8161f8:	e0fffe17 	ldw	r3,-8(fp)
  8161fc:	00800444 	movi	r2,17
  816200:	18800005 	stb	r2,0(r3)
        return (0);
  816204:	e03fff15 	stw	zero,-4(fp)
  816208:	00003d06 	br	816300 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81620c:	0005303a 	rdctl	r2,status
  816210:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816214:	e0fff817 	ldw	r3,-32(fp)
  816218:	00bfff84 	movi	r2,-2
  81621c:	1884703a 	and	r2,r3,r2
  816220:	1001703a 	wrctl	status,r2
  
  return context;
  816224:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  816228:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  81622c:	e0bffc03 	ldbu	r2,-16(fp)
  816230:	10803fd8 	cmpnei	r2,r2,255
  816234:	1000051e 	bne	r2,zero,81624c <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
  816238:	008020b4 	movhi	r2,130
  81623c:	10b7bd04 	addi	r2,r2,-8460
  816240:	10800017 	ldw	r2,0(r2)
  816244:	10800c83 	ldbu	r2,50(r2)
  816248:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81624c:	e0bffc03 	ldbu	r2,-16(fp)
  816250:	00c020b4 	movhi	r3,130
  816254:	18d44304 	addi	r3,r3,20748
  816258:	1085883a 	add	r2,r2,r2
  81625c:	1085883a 	add	r2,r2,r2
  816260:	10c5883a 	add	r2,r2,r3
  816264:	10800017 	ldw	r2,0(r2)
  816268:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  81626c:	e0bffb17 	ldw	r2,-20(fp)
  816270:	1004c03a 	cmpne	r2,r2,zero
  816274:	1000091e 	bne	r2,zero,81629c <OSTaskNameGet+0x13c>
  816278:	e0bff917 	ldw	r2,-28(fp)
  81627c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816280:	e0bff717 	ldw	r2,-36(fp)
  816284:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  816288:	e0fffe17 	ldw	r3,-8(fp)
  81628c:	008010c4 	movi	r2,67
  816290:	18800005 	stb	r2,0(r3)
        return (0);
  816294:	e03fff15 	stw	zero,-4(fp)
  816298:	00001906 	br	816300 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  81629c:	e0bffb17 	ldw	r2,-20(fp)
  8162a0:	10800058 	cmpnei	r2,r2,1
  8162a4:	1000091e 	bne	r2,zero,8162cc <OSTaskNameGet+0x16c>
  8162a8:	e0bff917 	ldw	r2,-28(fp)
  8162ac:	e0bff615 	stw	r2,-40(fp)
  8162b0:	e0bff617 	ldw	r2,-40(fp)
  8162b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  8162b8:	e0fffe17 	ldw	r3,-8(fp)
  8162bc:	008010c4 	movi	r2,67
  8162c0:	18800005 	stb	r2,0(r3)
        return (0);
  8162c4:	e03fff15 	stw	zero,-4(fp)
  8162c8:	00000d06 	br	816300 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  8162cc:	e0bffb17 	ldw	r2,-20(fp)
  8162d0:	11401304 	addi	r5,r2,76
  8162d4:	e13ffd17 	ldw	r4,-12(fp)
  8162d8:	0810b280 	call	810b28 <OS_StrCopy>
  8162dc:	e0bffa05 	stb	r2,-24(fp)
  8162e0:	e0bff917 	ldw	r2,-28(fp)
  8162e4:	e0bff515 	stw	r2,-44(fp)
  8162e8:	e0bff517 	ldw	r2,-44(fp)
  8162ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8162f0:	e0bffe17 	ldw	r2,-8(fp)
  8162f4:	10000005 	stb	zero,0(r2)
    return (len);
  8162f8:	e0bffa03 	ldbu	r2,-24(fp)
  8162fc:	e0bfff15 	stw	r2,-4(fp)
  816300:	e0bfff17 	ldw	r2,-4(fp)
}
  816304:	e037883a 	mov	sp,fp
  816308:	dfc00117 	ldw	ra,4(sp)
  81630c:	df000017 	ldw	fp,0(sp)
  816310:	dec00204 	addi	sp,sp,8
  816314:	f800283a 	ret

00816318 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  816318:	defff304 	addi	sp,sp,-52
  81631c:	dfc00c15 	stw	ra,48(sp)
  816320:	df000b15 	stw	fp,44(sp)
  816324:	df000b04 	addi	fp,sp,44
  816328:	e17ffe15 	stw	r5,-8(fp)
  81632c:	e1bfff15 	stw	r6,-4(fp)
  816330:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  816334:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  816338:	e0bfff17 	ldw	r2,-4(fp)
  81633c:	1005003a 	cmpeq	r2,r2,zero
  816340:	1000611e 	bne	r2,zero,8164c8 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  816344:	e0bffd03 	ldbu	r2,-12(fp)
  816348:	10800570 	cmpltui	r2,r2,21
  81634c:	1000071e 	bne	r2,zero,81636c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  816350:	e0bffd03 	ldbu	r2,-12(fp)
  816354:	10803fe0 	cmpeqi	r2,r2,255
  816358:	1000041e 	bne	r2,zero,81636c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  81635c:	e0ffff17 	ldw	r3,-4(fp)
  816360:	00800a84 	movi	r2,42
  816364:	18800005 	stb	r2,0(r3)
            return;
  816368:	00005706 	br	8164c8 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  81636c:	e0bffe17 	ldw	r2,-8(fp)
  816370:	1004c03a 	cmpne	r2,r2,zero
  816374:	1000041e 	bne	r2,zero,816388 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  816378:	e0ffff17 	ldw	r3,-4(fp)
  81637c:	00800304 	movi	r2,12
  816380:	18800005 	stb	r2,0(r3)
        return;
  816384:	00005006 	br	8164c8 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  816388:	008020b4 	movhi	r2,130
  81638c:	10b7bc04 	addi	r2,r2,-8464
  816390:	10800003 	ldbu	r2,0(r2)
  816394:	10803fcc 	andi	r2,r2,255
  816398:	1005003a 	cmpeq	r2,r2,zero
  81639c:	1000041e 	bne	r2,zero,8163b0 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
  8163a0:	e0ffff17 	ldw	r3,-4(fp)
  8163a4:	00800484 	movi	r2,18
  8163a8:	18800005 	stb	r2,0(r3)
        return;
  8163ac:	00004606 	br	8164c8 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8163b0:	0005303a 	rdctl	r2,status
  8163b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8163b8:	e0fff917 	ldw	r3,-28(fp)
  8163bc:	00bfff84 	movi	r2,-2
  8163c0:	1884703a 	and	r2,r3,r2
  8163c4:	1001703a 	wrctl	status,r2
  
  return context;
  8163c8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  8163cc:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  8163d0:	e0bffd03 	ldbu	r2,-12(fp)
  8163d4:	10803fd8 	cmpnei	r2,r2,255
  8163d8:	1000051e 	bne	r2,zero,8163f0 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
  8163dc:	008020b4 	movhi	r2,130
  8163e0:	10b7bd04 	addi	r2,r2,-8460
  8163e4:	10800017 	ldw	r2,0(r2)
  8163e8:	10800c83 	ldbu	r2,50(r2)
  8163ec:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8163f0:	e0bffd03 	ldbu	r2,-12(fp)
  8163f4:	00c020b4 	movhi	r3,130
  8163f8:	18d44304 	addi	r3,r3,20748
  8163fc:	1085883a 	add	r2,r2,r2
  816400:	1085883a 	add	r2,r2,r2
  816404:	10c5883a 	add	r2,r2,r3
  816408:	10800017 	ldw	r2,0(r2)
  81640c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  816410:	e0bffb17 	ldw	r2,-20(fp)
  816414:	1004c03a 	cmpne	r2,r2,zero
  816418:	1000081e 	bne	r2,zero,81643c <OSTaskNameSet+0x124>
  81641c:	e0bffa17 	ldw	r2,-24(fp)
  816420:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816424:	e0bff817 	ldw	r2,-32(fp)
  816428:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  81642c:	e0ffff17 	ldw	r3,-4(fp)
  816430:	008010c4 	movi	r2,67
  816434:	18800005 	stb	r2,0(r3)
        return;
  816438:	00002306 	br	8164c8 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  81643c:	e0bffb17 	ldw	r2,-20(fp)
  816440:	10800058 	cmpnei	r2,r2,1
  816444:	1000081e 	bne	r2,zero,816468 <OSTaskNameSet+0x150>
  816448:	e0bffa17 	ldw	r2,-24(fp)
  81644c:	e0bff715 	stw	r2,-36(fp)
  816450:	e0bff717 	ldw	r2,-36(fp)
  816454:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  816458:	e0ffff17 	ldw	r3,-4(fp)
  81645c:	008010c4 	movi	r2,67
  816460:	18800005 	stb	r2,0(r3)
        return;
  816464:	00001806 	br	8164c8 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  816468:	e13ffe17 	ldw	r4,-8(fp)
  81646c:	0810ba80 	call	810ba8 <OS_StrLen>
  816470:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  816474:	e0bffc03 	ldbu	r2,-16(fp)
  816478:	10800830 	cmpltui	r2,r2,32
  81647c:	1000081e 	bne	r2,zero,8164a0 <OSTaskNameSet+0x188>
  816480:	e0bffa17 	ldw	r2,-24(fp)
  816484:	e0bff615 	stw	r2,-40(fp)
  816488:	e0bff617 	ldw	r2,-40(fp)
  81648c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  816490:	e0ffff17 	ldw	r3,-4(fp)
  816494:	00801044 	movi	r2,65
  816498:	18800005 	stb	r2,0(r3)
        return;
  81649c:	00000a06 	br	8164c8 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  8164a0:	e0bffb17 	ldw	r2,-20(fp)
  8164a4:	11001304 	addi	r4,r2,76
  8164a8:	e17ffe17 	ldw	r5,-8(fp)
  8164ac:	0810b280 	call	810b28 <OS_StrCopy>
  8164b0:	e0bffa17 	ldw	r2,-24(fp)
  8164b4:	e0bff515 	stw	r2,-44(fp)
  8164b8:	e0bff517 	ldw	r2,-44(fp)
  8164bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8164c0:	e0bfff17 	ldw	r2,-4(fp)
  8164c4:	10000005 	stb	zero,0(r2)
}
  8164c8:	e037883a 	mov	sp,fp
  8164cc:	dfc00117 	ldw	ra,4(sp)
  8164d0:	df000017 	ldw	fp,0(sp)
  8164d4:	dec00204 	addi	sp,sp,8
  8164d8:	f800283a 	ret

008164dc <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  8164dc:	defff304 	addi	sp,sp,-52
  8164e0:	dfc00c15 	stw	ra,48(sp)
  8164e4:	df000b15 	stw	fp,44(sp)
  8164e8:	df000b04 	addi	fp,sp,44
  8164ec:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  8164f0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  8164f4:	e0bffe03 	ldbu	r2,-8(fp)
  8164f8:	10800530 	cmpltui	r2,r2,20
  8164fc:	1000031e 	bne	r2,zero,81650c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  816500:	00800a84 	movi	r2,42
  816504:	e0bfff15 	stw	r2,-4(fp)
  816508:	00007406 	br	8166dc <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81650c:	0005303a 	rdctl	r2,status
  816510:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816514:	e0fffb17 	ldw	r3,-20(fp)
  816518:	00bfff84 	movi	r2,-2
  81651c:	1884703a 	and	r2,r3,r2
  816520:	1001703a 	wrctl	status,r2
  
  return context;
  816524:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  816528:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
  81652c:	e0bffe03 	ldbu	r2,-8(fp)
  816530:	00c020b4 	movhi	r3,130
  816534:	18d44304 	addi	r3,r3,20748
  816538:	1085883a 	add	r2,r2,r2
  81653c:	1085883a 	add	r2,r2,r2
  816540:	10c5883a 	add	r2,r2,r3
  816544:	10800017 	ldw	r2,0(r2)
  816548:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  81654c:	e0bffd17 	ldw	r2,-12(fp)
  816550:	1004c03a 	cmpne	r2,r2,zero
  816554:	1000071e 	bne	r2,zero,816574 <OSTaskResume+0x98>
  816558:	e0bffc17 	ldw	r2,-16(fp)
  81655c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816560:	e0bffa17 	ldw	r2,-24(fp)
  816564:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  816568:	00801184 	movi	r2,70
  81656c:	e0bfff15 	stw	r2,-4(fp)
  816570:	00005a06 	br	8166dc <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  816574:	e0bffd17 	ldw	r2,-12(fp)
  816578:	10800058 	cmpnei	r2,r2,1
  81657c:	1000071e 	bne	r2,zero,81659c <OSTaskResume+0xc0>
  816580:	e0bffc17 	ldw	r2,-16(fp)
  816584:	e0bff915 	stw	r2,-28(fp)
  816588:	e0bff917 	ldw	r2,-28(fp)
  81658c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  816590:	008010c4 	movi	r2,67
  816594:	e0bfff15 	stw	r2,-4(fp)
  816598:	00005006 	br	8166dc <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  81659c:	e0bffd17 	ldw	r2,-12(fp)
  8165a0:	10800c03 	ldbu	r2,48(r2)
  8165a4:	10803fcc 	andi	r2,r2,255
  8165a8:	1080020c 	andi	r2,r2,8
  8165ac:	1005003a 	cmpeq	r2,r2,zero
  8165b0:	1000441e 	bne	r2,zero,8166c4 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  8165b4:	e0bffd17 	ldw	r2,-12(fp)
  8165b8:	10c00c03 	ldbu	r3,48(r2)
  8165bc:	00bffdc4 	movi	r2,-9
  8165c0:	1884703a 	and	r2,r3,r2
  8165c4:	1007883a 	mov	r3,r2
  8165c8:	e0bffd17 	ldw	r2,-12(fp)
  8165cc:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  8165d0:	e0bffd17 	ldw	r2,-12(fp)
  8165d4:	10800c03 	ldbu	r2,48(r2)
  8165d8:	10803fcc 	andi	r2,r2,255
  8165dc:	1004c03a 	cmpne	r2,r2,zero
  8165e0:	1000321e 	bne	r2,zero,8166ac <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
  8165e4:	e0bffd17 	ldw	r2,-12(fp)
  8165e8:	10800b8b 	ldhu	r2,46(r2)
  8165ec:	10bfffcc 	andi	r2,r2,65535
  8165f0:	1004c03a 	cmpne	r2,r2,zero
  8165f4:	1000281e 	bne	r2,zero,816698 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  8165f8:	e0bffd17 	ldw	r2,-12(fp)
  8165fc:	10c00d83 	ldbu	r3,54(r2)
  816600:	008020b4 	movhi	r2,130
  816604:	10b7ba04 	addi	r2,r2,-8472
  816608:	10800003 	ldbu	r2,0(r2)
  81660c:	1884b03a 	or	r2,r3,r2
  816610:	1007883a 	mov	r3,r2
  816614:	008020b4 	movhi	r2,130
  816618:	10b7ba04 	addi	r2,r2,-8472
  81661c:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  816620:	e0bffd17 	ldw	r2,-12(fp)
  816624:	10800d03 	ldbu	r2,52(r2)
  816628:	11003fcc 	andi	r4,r2,255
  81662c:	e0bffd17 	ldw	r2,-12(fp)
  816630:	10800d03 	ldbu	r2,52(r2)
  816634:	10c03fcc 	andi	r3,r2,255
  816638:	008020b4 	movhi	r2,130
  81663c:	10b7ba44 	addi	r2,r2,-8471
  816640:	10c5883a 	add	r2,r2,r3
  816644:	10c00003 	ldbu	r3,0(r2)
  816648:	e0bffd17 	ldw	r2,-12(fp)
  81664c:	10800d43 	ldbu	r2,53(r2)
  816650:	1884b03a 	or	r2,r3,r2
  816654:	1007883a 	mov	r3,r2
  816658:	008020b4 	movhi	r2,130
  81665c:	10b7ba44 	addi	r2,r2,-8471
  816660:	1105883a 	add	r2,r2,r4
  816664:	10c00005 	stb	r3,0(r2)
  816668:	e0bffc17 	ldw	r2,-16(fp)
  81666c:	e0bff815 	stw	r2,-32(fp)
  816670:	e0bff817 	ldw	r2,-32(fp)
  816674:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  816678:	008020b4 	movhi	r2,130
  81667c:	10b7ae44 	addi	r2,r2,-8519
  816680:	10800003 	ldbu	r2,0(r2)
  816684:	10803fcc 	andi	r2,r2,255
  816688:	10800058 	cmpnei	r2,r2,1
  81668c:	10000b1e 	bne	r2,zero,8166bc <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
  816690:	08109e40 	call	8109e4 <OS_Sched>
  816694:	00000906 	br	8166bc <OSTaskResume+0x1e0>
  816698:	e0bffc17 	ldw	r2,-16(fp)
  81669c:	e0bff715 	stw	r2,-36(fp)
  8166a0:	e0bff717 	ldw	r2,-36(fp)
  8166a4:	1001703a 	wrctl	status,r2
  8166a8:	00000406 	br	8166bc <OSTaskResume+0x1e0>
  8166ac:	e0bffc17 	ldw	r2,-16(fp)
  8166b0:	e0bff615 	stw	r2,-40(fp)
  8166b4:	e0bff617 	ldw	r2,-40(fp)
  8166b8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  8166bc:	e03fff15 	stw	zero,-4(fp)
  8166c0:	00000606 	br	8166dc <OSTaskResume+0x200>
  8166c4:	e0bffc17 	ldw	r2,-16(fp)
  8166c8:	e0bff515 	stw	r2,-44(fp)
  8166cc:	e0bff517 	ldw	r2,-44(fp)
  8166d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  8166d4:	00801104 	movi	r2,68
  8166d8:	e0bfff15 	stw	r2,-4(fp)
  8166dc:	e0bfff17 	ldw	r2,-4(fp)
}
  8166e0:	e037883a 	mov	sp,fp
  8166e4:	dfc00117 	ldw	ra,4(sp)
  8166e8:	df000017 	ldw	fp,0(sp)
  8166ec:	dec00204 	addi	sp,sp,8
  8166f0:	f800283a 	ret

008166f4 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  8166f4:	defff204 	addi	sp,sp,-56
  8166f8:	df000d15 	stw	fp,52(sp)
  8166fc:	df000d04 	addi	fp,sp,52
  816700:	e17ffe15 	stw	r5,-8(fp)
  816704:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  816708:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  81670c:	e0bffd03 	ldbu	r2,-12(fp)
  816710:	10800570 	cmpltui	r2,r2,21
  816714:	1000061e 	bne	r2,zero,816730 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  816718:	e0bffd03 	ldbu	r2,-12(fp)
  81671c:	10803fe0 	cmpeqi	r2,r2,255
  816720:	1000031e 	bne	r2,zero,816730 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  816724:	00800a84 	movi	r2,42
  816728:	e0bfff15 	stw	r2,-4(fp)
  81672c:	00006b06 	br	8168dc <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  816730:	e0bffe17 	ldw	r2,-8(fp)
  816734:	1004c03a 	cmpne	r2,r2,zero
  816738:	1000031e 	bne	r2,zero,816748 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
  81673c:	00800244 	movi	r2,9
  816740:	e0bfff15 	stw	r2,-4(fp)
  816744:	00006506 	br	8168dc <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  816748:	e0bffe17 	ldw	r2,-8(fp)
  81674c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  816750:	e0bffe17 	ldw	r2,-8(fp)
  816754:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816758:	0005303a 	rdctl	r2,status
  81675c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816760:	e0fff717 	ldw	r3,-36(fp)
  816764:	00bfff84 	movi	r2,-2
  816768:	1884703a 	and	r2,r3,r2
  81676c:	1001703a 	wrctl	status,r2
  
  return context;
  816770:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  816774:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  816778:	e0bffd03 	ldbu	r2,-12(fp)
  81677c:	10803fd8 	cmpnei	r2,r2,255
  816780:	1000051e 	bne	r2,zero,816798 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
  816784:	008020b4 	movhi	r2,130
  816788:	10b7bd04 	addi	r2,r2,-8460
  81678c:	10800017 	ldw	r2,0(r2)
  816790:	10800c83 	ldbu	r2,50(r2)
  816794:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  816798:	e0bffd03 	ldbu	r2,-12(fp)
  81679c:	00c020b4 	movhi	r3,130
  8167a0:	18d44304 	addi	r3,r3,20748
  8167a4:	1085883a 	add	r2,r2,r2
  8167a8:	1085883a 	add	r2,r2,r2
  8167ac:	10c5883a 	add	r2,r2,r3
  8167b0:	10800017 	ldw	r2,0(r2)
  8167b4:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  8167b8:	e0bffc17 	ldw	r2,-16(fp)
  8167bc:	1004c03a 	cmpne	r2,r2,zero
  8167c0:	1000071e 	bne	r2,zero,8167e0 <OSTaskStkChk+0xec>
  8167c4:	e0bff817 	ldw	r2,-32(fp)
  8167c8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8167cc:	e0bff617 	ldw	r2,-40(fp)
  8167d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8167d4:	008010c4 	movi	r2,67
  8167d8:	e0bfff15 	stw	r2,-4(fp)
  8167dc:	00003f06 	br	8168dc <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  8167e0:	e0bffc17 	ldw	r2,-16(fp)
  8167e4:	10800058 	cmpnei	r2,r2,1
  8167e8:	1000071e 	bne	r2,zero,816808 <OSTaskStkChk+0x114>
  8167ec:	e0bff817 	ldw	r2,-32(fp)
  8167f0:	e0bff515 	stw	r2,-44(fp)
  8167f4:	e0bff517 	ldw	r2,-44(fp)
  8167f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8167fc:	008010c4 	movi	r2,67
  816800:	e0bfff15 	stw	r2,-4(fp)
  816804:	00003506 	br	8168dc <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  816808:	e0bffc17 	ldw	r2,-16(fp)
  81680c:	1080040b 	ldhu	r2,16(r2)
  816810:	10bfffcc 	andi	r2,r2,65535
  816814:	1080004c 	andi	r2,r2,1
  816818:	1004c03a 	cmpne	r2,r2,zero
  81681c:	1000071e 	bne	r2,zero,81683c <OSTaskStkChk+0x148>
  816820:	e0bff817 	ldw	r2,-32(fp)
  816824:	e0bff415 	stw	r2,-48(fp)
  816828:	e0bff417 	ldw	r2,-48(fp)
  81682c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  816830:	00801144 	movi	r2,69
  816834:	e0bfff15 	stw	r2,-4(fp)
  816838:	00002806 	br	8168dc <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
  81683c:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
  816840:	e0bffc17 	ldw	r2,-16(fp)
  816844:	10800317 	ldw	r2,12(r2)
  816848:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
  81684c:	e0bffc17 	ldw	r2,-16(fp)
  816850:	10800217 	ldw	r2,8(r2)
  816854:	e0bffb15 	stw	r2,-20(fp)
  816858:	e0bff817 	ldw	r2,-32(fp)
  81685c:	e0bff315 	stw	r2,-52(fp)
  816860:	e0bff317 	ldw	r2,-52(fp)
  816864:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  816868:	00000306 	br	816878 <OSTaskStkChk+0x184>
        nfree++;
  81686c:	e0bffa17 	ldw	r2,-24(fp)
  816870:	10800044 	addi	r2,r2,1
  816874:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  816878:	e0bffb17 	ldw	r2,-20(fp)
  81687c:	10800017 	ldw	r2,0(r2)
  816880:	1005003a 	cmpeq	r2,r2,zero
  816884:	1007883a 	mov	r3,r2
  816888:	e0bffb17 	ldw	r2,-20(fp)
  81688c:	10800104 	addi	r2,r2,4
  816890:	e0bffb15 	stw	r2,-20(fp)
  816894:	18803fcc 	andi	r2,r3,255
  816898:	1004c03a 	cmpne	r2,r2,zero
  81689c:	103ff31e 	bne	r2,zero,81686c <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  8168a0:	e0bffa17 	ldw	r2,-24(fp)
  8168a4:	1085883a 	add	r2,r2,r2
  8168a8:	1085883a 	add	r2,r2,r2
  8168ac:	1007883a 	mov	r3,r2
  8168b0:	e0bffe17 	ldw	r2,-8(fp)
  8168b4:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  8168b8:	e0fff917 	ldw	r3,-28(fp)
  8168bc:	e0bffa17 	ldw	r2,-24(fp)
  8168c0:	1885c83a 	sub	r2,r3,r2
  8168c4:	1085883a 	add	r2,r2,r2
  8168c8:	1085883a 	add	r2,r2,r2
  8168cc:	1007883a 	mov	r3,r2
  8168d0:	e0bffe17 	ldw	r2,-8(fp)
  8168d4:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  8168d8:	e03fff15 	stw	zero,-4(fp)
  8168dc:	e0bfff17 	ldw	r2,-4(fp)
}
  8168e0:	e037883a 	mov	sp,fp
  8168e4:	df000017 	ldw	fp,0(sp)
  8168e8:	dec00104 	addi	sp,sp,4
  8168ec:	f800283a 	ret

008168f0 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  8168f0:	defff404 	addi	sp,sp,-48
  8168f4:	dfc00b15 	stw	ra,44(sp)
  8168f8:	df000a15 	stw	fp,40(sp)
  8168fc:	df000a04 	addi	fp,sp,40
  816900:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  816904:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  816908:	e0bffe03 	ldbu	r2,-8(fp)
  81690c:	10800518 	cmpnei	r2,r2,20
  816910:	1000031e 	bne	r2,zero,816920 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  816914:	008011c4 	movi	r2,71
  816918:	e0bfff15 	stw	r2,-4(fp)
  81691c:	00007906 	br	816b04 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  816920:	e0bffe03 	ldbu	r2,-8(fp)
  816924:	10800530 	cmpltui	r2,r2,20
  816928:	1000061e 	bne	r2,zero,816944 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
  81692c:	e0bffe03 	ldbu	r2,-8(fp)
  816930:	10803fe0 	cmpeqi	r2,r2,255
  816934:	1000031e 	bne	r2,zero,816944 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
  816938:	00800a84 	movi	r2,42
  81693c:	e0bfff15 	stw	r2,-4(fp)
  816940:	00007006 	br	816b04 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816944:	0005303a 	rdctl	r2,status
  816948:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81694c:	e0fff917 	ldw	r3,-28(fp)
  816950:	00bfff84 	movi	r2,-2
  816954:	1884703a 	and	r2,r3,r2
  816958:	1001703a 	wrctl	status,r2
  
  return context;
  81695c:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  816960:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  816964:	e0bffe03 	ldbu	r2,-8(fp)
  816968:	10803fd8 	cmpnei	r2,r2,255
  81696c:	1000081e 	bne	r2,zero,816990 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
  816970:	008020b4 	movhi	r2,130
  816974:	10b7bd04 	addi	r2,r2,-8460
  816978:	10800017 	ldw	r2,0(r2)
  81697c:	10800c83 	ldbu	r2,50(r2)
  816980:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
  816984:	00800044 	movi	r2,1
  816988:	e0bffd05 	stb	r2,-12(fp)
  81698c:	00000b06 	br	8169bc <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  816990:	008020b4 	movhi	r2,130
  816994:	10b7bd04 	addi	r2,r2,-8460
  816998:	10800017 	ldw	r2,0(r2)
  81699c:	10800c83 	ldbu	r2,50(r2)
  8169a0:	10c03fcc 	andi	r3,r2,255
  8169a4:	e0bffe03 	ldbu	r2,-8(fp)
  8169a8:	1880031e 	bne	r3,r2,8169b8 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
  8169ac:	00800044 	movi	r2,1
  8169b0:	e0bffd05 	stb	r2,-12(fp)
  8169b4:	00000106 	br	8169bc <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  8169b8:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8169bc:	e0bffe03 	ldbu	r2,-8(fp)
  8169c0:	00c020b4 	movhi	r3,130
  8169c4:	18d44304 	addi	r3,r3,20748
  8169c8:	1085883a 	add	r2,r2,r2
  8169cc:	1085883a 	add	r2,r2,r2
  8169d0:	10c5883a 	add	r2,r2,r3
  8169d4:	10800017 	ldw	r2,0(r2)
  8169d8:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  8169dc:	e0bffc17 	ldw	r2,-16(fp)
  8169e0:	1004c03a 	cmpne	r2,r2,zero
  8169e4:	1000071e 	bne	r2,zero,816a04 <OSTaskSuspend+0x114>
  8169e8:	e0bffa17 	ldw	r2,-24(fp)
  8169ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8169f0:	e0bff817 	ldw	r2,-32(fp)
  8169f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  8169f8:	00801204 	movi	r2,72
  8169fc:	e0bfff15 	stw	r2,-4(fp)
  816a00:	00004006 	br	816b04 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  816a04:	e0bffc17 	ldw	r2,-16(fp)
  816a08:	10800058 	cmpnei	r2,r2,1
  816a0c:	1000071e 	bne	r2,zero,816a2c <OSTaskSuspend+0x13c>
  816a10:	e0bffa17 	ldw	r2,-24(fp)
  816a14:	e0bff715 	stw	r2,-36(fp)
  816a18:	e0bff717 	ldw	r2,-36(fp)
  816a1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  816a20:	008010c4 	movi	r2,67
  816a24:	e0bfff15 	stw	r2,-4(fp)
  816a28:	00003606 	br	816b04 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
  816a2c:	e0bffc17 	ldw	r2,-16(fp)
  816a30:	10800d03 	ldbu	r2,52(r2)
  816a34:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  816a38:	e13ffb03 	ldbu	r4,-20(fp)
  816a3c:	e0fffb03 	ldbu	r3,-20(fp)
  816a40:	008020b4 	movhi	r2,130
  816a44:	10b7ba44 	addi	r2,r2,-8471
  816a48:	10c5883a 	add	r2,r2,r3
  816a4c:	10800003 	ldbu	r2,0(r2)
  816a50:	1007883a 	mov	r3,r2
  816a54:	e0bffc17 	ldw	r2,-16(fp)
  816a58:	10800d43 	ldbu	r2,53(r2)
  816a5c:	0084303a 	nor	r2,zero,r2
  816a60:	1884703a 	and	r2,r3,r2
  816a64:	1007883a 	mov	r3,r2
  816a68:	008020b4 	movhi	r2,130
  816a6c:	10b7ba44 	addi	r2,r2,-8471
  816a70:	1105883a 	add	r2,r2,r4
  816a74:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  816a78:	e0fffb03 	ldbu	r3,-20(fp)
  816a7c:	008020b4 	movhi	r2,130
  816a80:	10b7ba44 	addi	r2,r2,-8471
  816a84:	10c5883a 	add	r2,r2,r3
  816a88:	10800003 	ldbu	r2,0(r2)
  816a8c:	10803fcc 	andi	r2,r2,255
  816a90:	1004c03a 	cmpne	r2,r2,zero
  816a94:	10000c1e 	bne	r2,zero,816ac8 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  816a98:	e0bffc17 	ldw	r2,-16(fp)
  816a9c:	10800d83 	ldbu	r2,54(r2)
  816aa0:	0084303a 	nor	r2,zero,r2
  816aa4:	1007883a 	mov	r3,r2
  816aa8:	008020b4 	movhi	r2,130
  816aac:	10b7ba04 	addi	r2,r2,-8472
  816ab0:	10800003 	ldbu	r2,0(r2)
  816ab4:	1884703a 	and	r2,r3,r2
  816ab8:	1007883a 	mov	r3,r2
  816abc:	008020b4 	movhi	r2,130
  816ac0:	10b7ba04 	addi	r2,r2,-8472
  816ac4:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  816ac8:	e0bffc17 	ldw	r2,-16(fp)
  816acc:	10800c03 	ldbu	r2,48(r2)
  816ad0:	10800214 	ori	r2,r2,8
  816ad4:	1007883a 	mov	r3,r2
  816ad8:	e0bffc17 	ldw	r2,-16(fp)
  816adc:	10c00c05 	stb	r3,48(r2)
  816ae0:	e0bffa17 	ldw	r2,-24(fp)
  816ae4:	e0bff615 	stw	r2,-40(fp)
  816ae8:	e0bff617 	ldw	r2,-40(fp)
  816aec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  816af0:	e0bffd03 	ldbu	r2,-12(fp)
  816af4:	10800058 	cmpnei	r2,r2,1
  816af8:	1000011e 	bne	r2,zero,816b00 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
  816afc:	08109e40 	call	8109e4 <OS_Sched>
    }
    return (OS_ERR_NONE);
  816b00:	e03fff15 	stw	zero,-4(fp)
  816b04:	e0bfff17 	ldw	r2,-4(fp)
}
  816b08:	e037883a 	mov	sp,fp
  816b0c:	dfc00117 	ldw	ra,4(sp)
  816b10:	df000017 	ldw	fp,0(sp)
  816b14:	dec00204 	addi	sp,sp,8
  816b18:	f800283a 	ret

00816b1c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  816b1c:	defff504 	addi	sp,sp,-44
  816b20:	dfc00a15 	stw	ra,40(sp)
  816b24:	df000915 	stw	fp,36(sp)
  816b28:	df000904 	addi	fp,sp,36
  816b2c:	e17ffe15 	stw	r5,-8(fp)
  816b30:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  816b34:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  816b38:	e0bffd03 	ldbu	r2,-12(fp)
  816b3c:	10800570 	cmpltui	r2,r2,21
  816b40:	1000061e 	bne	r2,zero,816b5c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  816b44:	e0bffd03 	ldbu	r2,-12(fp)
  816b48:	10803fe0 	cmpeqi	r2,r2,255
  816b4c:	1000031e 	bne	r2,zero,816b5c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  816b50:	00800a84 	movi	r2,42
  816b54:	e0bfff15 	stw	r2,-4(fp)
  816b58:	00003b06 	br	816c48 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  816b5c:	e0bffe17 	ldw	r2,-8(fp)
  816b60:	1004c03a 	cmpne	r2,r2,zero
  816b64:	1000031e 	bne	r2,zero,816b74 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
  816b68:	00800244 	movi	r2,9
  816b6c:	e0bfff15 	stw	r2,-4(fp)
  816b70:	00003506 	br	816c48 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816b74:	0005303a 	rdctl	r2,status
  816b78:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816b7c:	e0fffa17 	ldw	r3,-24(fp)
  816b80:	00bfff84 	movi	r2,-2
  816b84:	1884703a 	and	r2,r3,r2
  816b88:	1001703a 	wrctl	status,r2
  
  return context;
  816b8c:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  816b90:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  816b94:	e0bffd03 	ldbu	r2,-12(fp)
  816b98:	10803fd8 	cmpnei	r2,r2,255
  816b9c:	1000051e 	bne	r2,zero,816bb4 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
  816ba0:	008020b4 	movhi	r2,130
  816ba4:	10b7bd04 	addi	r2,r2,-8460
  816ba8:	10800017 	ldw	r2,0(r2)
  816bac:	10800c83 	ldbu	r2,50(r2)
  816bb0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  816bb4:	e0bffd03 	ldbu	r2,-12(fp)
  816bb8:	00c020b4 	movhi	r3,130
  816bbc:	18d44304 	addi	r3,r3,20748
  816bc0:	1085883a 	add	r2,r2,r2
  816bc4:	1085883a 	add	r2,r2,r2
  816bc8:	10c5883a 	add	r2,r2,r3
  816bcc:	10800017 	ldw	r2,0(r2)
  816bd0:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  816bd4:	e0bffc17 	ldw	r2,-16(fp)
  816bd8:	1004c03a 	cmpne	r2,r2,zero
  816bdc:	1000071e 	bne	r2,zero,816bfc <OSTaskQuery+0xe0>
  816be0:	e0bffb17 	ldw	r2,-20(fp)
  816be4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816be8:	e0bff917 	ldw	r2,-28(fp)
  816bec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  816bf0:	00800a44 	movi	r2,41
  816bf4:	e0bfff15 	stw	r2,-4(fp)
  816bf8:	00001306 	br	816c48 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  816bfc:	e0bffc17 	ldw	r2,-16(fp)
  816c00:	10800058 	cmpnei	r2,r2,1
  816c04:	1000071e 	bne	r2,zero,816c24 <OSTaskQuery+0x108>
  816c08:	e0bffb17 	ldw	r2,-20(fp)
  816c0c:	e0bff815 	stw	r2,-32(fp)
  816c10:	e0bff817 	ldw	r2,-32(fp)
  816c14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  816c18:	008010c4 	movi	r2,67
  816c1c:	e0bfff15 	stw	r2,-4(fp)
  816c20:	00000906 	br	816c48 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  816c24:	e13ffe17 	ldw	r4,-8(fp)
  816c28:	e17ffc17 	ldw	r5,-16(fp)
  816c2c:	01801b04 	movi	r6,108
  816c30:	08109780 	call	810978 <OS_MemCopy>
  816c34:	e0bffb17 	ldw	r2,-20(fp)
  816c38:	e0bff715 	stw	r2,-36(fp)
  816c3c:	e0bff717 	ldw	r2,-36(fp)
  816c40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  816c44:	e03fff15 	stw	zero,-4(fp)
  816c48:	e0bfff17 	ldw	r2,-4(fp)
}
  816c4c:	e037883a 	mov	sp,fp
  816c50:	dfc00117 	ldw	ra,4(sp)
  816c54:	df000017 	ldw	fp,0(sp)
  816c58:	dec00204 	addi	sp,sp,8
  816c5c:	f800283a 	ret

00816c60 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  816c60:	defffc04 	addi	sp,sp,-16
  816c64:	df000315 	stw	fp,12(sp)
  816c68:	df000304 	addi	fp,sp,12
  816c6c:	e13ffd15 	stw	r4,-12(fp)
  816c70:	e17ffe15 	stw	r5,-8(fp)
  816c74:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  816c78:	e0bfff0b 	ldhu	r2,-4(fp)
  816c7c:	1080004c 	andi	r2,r2,1
  816c80:	10803fcc 	andi	r2,r2,255
  816c84:	1005003a 	cmpeq	r2,r2,zero
  816c88:	1000101e 	bne	r2,zero,816ccc <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  816c8c:	e0bfff0b 	ldhu	r2,-4(fp)
  816c90:	1080008c 	andi	r2,r2,2
  816c94:	1005003a 	cmpeq	r2,r2,zero
  816c98:	10000c1e 	bne	r2,zero,816ccc <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  816c9c:	00000806 	br	816cc0 <OS_TaskStkClr+0x60>
                size--;
  816ca0:	e0bffe17 	ldw	r2,-8(fp)
  816ca4:	10bfffc4 	addi	r2,r2,-1
  816ca8:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  816cac:	e0bffd17 	ldw	r2,-12(fp)
  816cb0:	10000015 	stw	zero,0(r2)
  816cb4:	e0bffd17 	ldw	r2,-12(fp)
  816cb8:	10800104 	addi	r2,r2,4
  816cbc:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  816cc0:	e0bffe17 	ldw	r2,-8(fp)
  816cc4:	1004c03a 	cmpne	r2,r2,zero
  816cc8:	103ff51e 	bne	r2,zero,816ca0 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  816ccc:	e037883a 	mov	sp,fp
  816cd0:	df000017 	ldw	fp,0(sp)
  816cd4:	dec00104 	addi	sp,sp,4
  816cd8:	f800283a 	ret

00816cdc <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  816cdc:	defff904 	addi	sp,sp,-28
  816ce0:	dfc00615 	stw	ra,24(sp)
  816ce4:	df000515 	stw	fp,20(sp)
  816ce8:	df000504 	addi	fp,sp,20
  816cec:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  816cf0:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  816cf4:	008020b4 	movhi	r2,130
  816cf8:	10b7bc04 	addi	r2,r2,-8464
  816cfc:	10800003 	ldbu	r2,0(r2)
  816d00:	10803fcc 	andi	r2,r2,255
  816d04:	1004c03a 	cmpne	r2,r2,zero
  816d08:	1000421e 	bne	r2,zero,816e14 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  816d0c:	e0bfff0b 	ldhu	r2,-4(fp)
  816d10:	1005003a 	cmpeq	r2,r2,zero
  816d14:	10003f1e 	bne	r2,zero,816e14 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816d18:	0005303a 	rdctl	r2,status
  816d1c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816d20:	e0fffc17 	ldw	r3,-16(fp)
  816d24:	00bfff84 	movi	r2,-2
  816d28:	1884703a 	and	r2,r3,r2
  816d2c:	1001703a 	wrctl	status,r2
  
  return context;
  816d30:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
  816d34:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  816d38:	008020b4 	movhi	r2,130
  816d3c:	10b7bd04 	addi	r2,r2,-8460
  816d40:	10800017 	ldw	r2,0(r2)
  816d44:	10800d03 	ldbu	r2,52(r2)
  816d48:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  816d4c:	e13ffe03 	ldbu	r4,-8(fp)
  816d50:	e0fffe03 	ldbu	r3,-8(fp)
  816d54:	008020b4 	movhi	r2,130
  816d58:	10b7ba44 	addi	r2,r2,-8471
  816d5c:	10c5883a 	add	r2,r2,r3
  816d60:	10800003 	ldbu	r2,0(r2)
  816d64:	1007883a 	mov	r3,r2
  816d68:	008020b4 	movhi	r2,130
  816d6c:	10b7bd04 	addi	r2,r2,-8460
  816d70:	10800017 	ldw	r2,0(r2)
  816d74:	10800d43 	ldbu	r2,53(r2)
  816d78:	0084303a 	nor	r2,zero,r2
  816d7c:	1884703a 	and	r2,r3,r2
  816d80:	1007883a 	mov	r3,r2
  816d84:	008020b4 	movhi	r2,130
  816d88:	10b7ba44 	addi	r2,r2,-8471
  816d8c:	1105883a 	add	r2,r2,r4
  816d90:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
  816d94:	e0fffe03 	ldbu	r3,-8(fp)
  816d98:	008020b4 	movhi	r2,130
  816d9c:	10b7ba44 	addi	r2,r2,-8471
  816da0:	10c5883a 	add	r2,r2,r3
  816da4:	10800003 	ldbu	r2,0(r2)
  816da8:	10803fcc 	andi	r2,r2,255
  816dac:	1004c03a 	cmpne	r2,r2,zero
  816db0:	10000e1e 	bne	r2,zero,816dec <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  816db4:	008020b4 	movhi	r2,130
  816db8:	10b7bd04 	addi	r2,r2,-8460
  816dbc:	10800017 	ldw	r2,0(r2)
  816dc0:	10800d83 	ldbu	r2,54(r2)
  816dc4:	0084303a 	nor	r2,zero,r2
  816dc8:	1007883a 	mov	r3,r2
  816dcc:	008020b4 	movhi	r2,130
  816dd0:	10b7ba04 	addi	r2,r2,-8472
  816dd4:	10800003 	ldbu	r2,0(r2)
  816dd8:	1884703a 	and	r2,r3,r2
  816ddc:	1007883a 	mov	r3,r2
  816de0:	008020b4 	movhi	r2,130
  816de4:	10b7ba04 	addi	r2,r2,-8472
  816de8:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  816dec:	008020b4 	movhi	r2,130
  816df0:	10b7bd04 	addi	r2,r2,-8460
  816df4:	10c00017 	ldw	r3,0(r2)
  816df8:	e0bfff0b 	ldhu	r2,-4(fp)
  816dfc:	18800b8d 	sth	r2,46(r3)
  816e00:	e0bffd17 	ldw	r2,-12(fp)
  816e04:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816e08:	e0bffb17 	ldw	r2,-20(fp)
  816e0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  816e10:	08109e40 	call	8109e4 <OS_Sched>
    }
}
  816e14:	e037883a 	mov	sp,fp
  816e18:	dfc00117 	ldw	ra,4(sp)
  816e1c:	df000017 	ldw	fp,0(sp)
  816e20:	dec00204 	addi	sp,sp,8
  816e24:	f800283a 	ret

00816e28 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  816e28:	defff604 	addi	sp,sp,-40
  816e2c:	dfc00915 	stw	ra,36(sp)
  816e30:	df000815 	stw	fp,32(sp)
  816e34:	dc000715 	stw	r16,28(sp)
  816e38:	df000704 	addi	fp,sp,28
  816e3c:	e13ffb05 	stb	r4,-20(fp)
  816e40:	e17ffc05 	stb	r5,-16(fp)
  816e44:	e1bffd05 	stb	r6,-12(fp)
  816e48:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  816e4c:	008020b4 	movhi	r2,130
  816e50:	10b7bc04 	addi	r2,r2,-8464
  816e54:	10800003 	ldbu	r2,0(r2)
  816e58:	10803fcc 	andi	r2,r2,255
  816e5c:	1005003a 	cmpeq	r2,r2,zero
  816e60:	1000031e 	bne	r2,zero,816e70 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  816e64:	00801544 	movi	r2,85
  816e68:	e0bfff15 	stw	r2,-4(fp)
  816e6c:	00004b06 	br	816f9c <OSTimeDlyHMSM+0x174>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  816e70:	e0bffb03 	ldbu	r2,-20(fp)
  816e74:	1004c03a 	cmpne	r2,r2,zero
  816e78:	10000c1e 	bne	r2,zero,816eac <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
  816e7c:	e0bffc03 	ldbu	r2,-16(fp)
  816e80:	1004c03a 	cmpne	r2,r2,zero
  816e84:	1000091e 	bne	r2,zero,816eac <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
  816e88:	e0bffd03 	ldbu	r2,-12(fp)
  816e8c:	1004c03a 	cmpne	r2,r2,zero
  816e90:	1000061e 	bne	r2,zero,816eac <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
  816e94:	e0bffe0b 	ldhu	r2,-8(fp)
  816e98:	1004c03a 	cmpne	r2,r2,zero
  816e9c:	1000031e 	bne	r2,zero,816eac <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
  816ea0:	00801504 	movi	r2,84
  816ea4:	e0bfff15 	stw	r2,-4(fp)
  816ea8:	00003c06 	br	816f9c <OSTimeDlyHMSM+0x174>
                }
            }
        }
    }
    if (minutes > 59) {
  816eac:	e0bffc03 	ldbu	r2,-16(fp)
  816eb0:	10800f30 	cmpltui	r2,r2,60
  816eb4:	1000031e 	bne	r2,zero,816ec4 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  816eb8:	00801444 	movi	r2,81
  816ebc:	e0bfff15 	stw	r2,-4(fp)
  816ec0:	00003606 	br	816f9c <OSTimeDlyHMSM+0x174>
    }
    if (seconds > 59) {
  816ec4:	e0bffd03 	ldbu	r2,-12(fp)
  816ec8:	10800f30 	cmpltui	r2,r2,60
  816ecc:	1000031e 	bne	r2,zero,816edc <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
  816ed0:	00801484 	movi	r2,82
  816ed4:	e0bfff15 	stw	r2,-4(fp)
  816ed8:	00003006 	br	816f9c <OSTimeDlyHMSM+0x174>
    }
    if (ms > 999) {
  816edc:	e0bffe0b 	ldhu	r2,-8(fp)
  816ee0:	1080fa30 	cmpltui	r2,r2,1000
  816ee4:	1000031e 	bne	r2,zero,816ef4 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
  816ee8:	008014c4 	movi	r2,83
  816eec:	e0bfff15 	stw	r2,-4(fp)
  816ef0:	00002a06 	br	816f9c <OSTimeDlyHMSM+0x174>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  816ef4:	e13ffb03 	ldbu	r4,-20(fp)
  816ef8:	01438404 	movi	r5,3600
  816efc:	080535c0 	call	80535c <__mulsi3>
  816f00:	1021883a 	mov	r16,r2
  816f04:	e13ffc03 	ldbu	r4,-16(fp)
  816f08:	01400f04 	movi	r5,60
  816f0c:	080535c0 	call	80535c <__mulsi3>
  816f10:	8087883a 	add	r3,r16,r2
  816f14:	e0bffd03 	ldbu	r2,-12(fp)
  816f18:	1889883a 	add	r4,r3,r2
  816f1c:	0140fa04 	movi	r5,1000
  816f20:	080535c0 	call	80535c <__mulsi3>
  816f24:	1021883a 	mov	r16,r2
  816f28:	e13ffe0b 	ldhu	r4,-8(fp)
  816f2c:	0140fa04 	movi	r5,1000
  816f30:	080535c0 	call	80535c <__mulsi3>
  816f34:	1009883a 	mov	r4,r2
  816f38:	0140fa04 	movi	r5,1000
  816f3c:	080534c0 	call	80534c <__udivsi3>
  816f40:	8085883a 	add	r2,r16,r2
  816f44:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  816f48:	e0bffa17 	ldw	r2,-24(fp)
  816f4c:	1004d43a 	srli	r2,r2,16
  816f50:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  816f54:	e0bffa17 	ldw	r2,-24(fp)
  816f58:	10bfffcc 	andi	r2,r2,65535
  816f5c:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  816f60:	e0bffa17 	ldw	r2,-24(fp)
  816f64:	113fffcc 	andi	r4,r2,65535
  816f68:	0816cdc0 	call	816cdc <OSTimeDly>
    while (loops > 0) {
  816f6c:	00000706 	br	816f8c <OSTimeDlyHMSM+0x164>
        OSTimeDly((INT16U)32768u);
  816f70:	01200014 	movui	r4,32768
  816f74:	0816cdc0 	call	816cdc <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  816f78:	01200014 	movui	r4,32768
  816f7c:	0816cdc0 	call	816cdc <OSTimeDly>
        loops--;
  816f80:	e0bff90b 	ldhu	r2,-28(fp)
  816f84:	10bfffc4 	addi	r2,r2,-1
  816f88:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  816f8c:	e0bff90b 	ldhu	r2,-28(fp)
  816f90:	1004c03a 	cmpne	r2,r2,zero
  816f94:	103ff61e 	bne	r2,zero,816f70 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  816f98:	e03fff15 	stw	zero,-4(fp)
  816f9c:	e0bfff17 	ldw	r2,-4(fp)
}
  816fa0:	e037883a 	mov	sp,fp
  816fa4:	dfc00217 	ldw	ra,8(sp)
  816fa8:	df000117 	ldw	fp,4(sp)
  816fac:	dc000017 	ldw	r16,0(sp)
  816fb0:	dec00304 	addi	sp,sp,12
  816fb4:	f800283a 	ret

00816fb8 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  816fb8:	defff404 	addi	sp,sp,-48
  816fbc:	dfc00b15 	stw	ra,44(sp)
  816fc0:	df000a15 	stw	fp,40(sp)
  816fc4:	df000a04 	addi	fp,sp,40
  816fc8:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  816fcc:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  816fd0:	e0bffe03 	ldbu	r2,-8(fp)
  816fd4:	10800530 	cmpltui	r2,r2,20
  816fd8:	1000031e 	bne	r2,zero,816fe8 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  816fdc:	00800a84 	movi	r2,42
  816fe0:	e0bfff15 	stw	r2,-4(fp)
  816fe4:	00007206 	br	8171b0 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816fe8:	0005303a 	rdctl	r2,status
  816fec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816ff0:	e0fffb17 	ldw	r3,-20(fp)
  816ff4:	00bfff84 	movi	r2,-2
  816ff8:	1884703a 	and	r2,r3,r2
  816ffc:	1001703a 	wrctl	status,r2
  
  return context;
  817000:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  817004:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  817008:	e0bffe03 	ldbu	r2,-8(fp)
  81700c:	00c020b4 	movhi	r3,130
  817010:	18d44304 	addi	r3,r3,20748
  817014:	1085883a 	add	r2,r2,r2
  817018:	1085883a 	add	r2,r2,r2
  81701c:	10c5883a 	add	r2,r2,r3
  817020:	10800017 	ldw	r2,0(r2)
  817024:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
  817028:	e0bffd17 	ldw	r2,-12(fp)
  81702c:	1004c03a 	cmpne	r2,r2,zero
  817030:	1000071e 	bne	r2,zero,817050 <OSTimeDlyResume+0x98>
  817034:	e0bffc17 	ldw	r2,-16(fp)
  817038:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81703c:	e0bffa17 	ldw	r2,-24(fp)
  817040:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  817044:	008010c4 	movi	r2,67
  817048:	e0bfff15 	stw	r2,-4(fp)
  81704c:	00005806 	br	8171b0 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  817050:	e0bffd17 	ldw	r2,-12(fp)
  817054:	10800058 	cmpnei	r2,r2,1
  817058:	1000071e 	bne	r2,zero,817078 <OSTimeDlyResume+0xc0>
  81705c:	e0bffc17 	ldw	r2,-16(fp)
  817060:	e0bff915 	stw	r2,-28(fp)
  817064:	e0bff917 	ldw	r2,-28(fp)
  817068:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  81706c:	008010c4 	movi	r2,67
  817070:	e0bfff15 	stw	r2,-4(fp)
  817074:	00004e06 	br	8171b0 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  817078:	e0bffd17 	ldw	r2,-12(fp)
  81707c:	10800b8b 	ldhu	r2,46(r2)
  817080:	10bfffcc 	andi	r2,r2,65535
  817084:	1004c03a 	cmpne	r2,r2,zero
  817088:	1000071e 	bne	r2,zero,8170a8 <OSTimeDlyResume+0xf0>
  81708c:	e0bffc17 	ldw	r2,-16(fp)
  817090:	e0bff815 	stw	r2,-32(fp)
  817094:	e0bff817 	ldw	r2,-32(fp)
  817098:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  81709c:	00801404 	movi	r2,80
  8170a0:	e0bfff15 	stw	r2,-4(fp)
  8170a4:	00004206 	br	8171b0 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  8170a8:	e0bffd17 	ldw	r2,-12(fp)
  8170ac:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  8170b0:	e0bffd17 	ldw	r2,-12(fp)
  8170b4:	10800c03 	ldbu	r2,48(r2)
  8170b8:	10803fcc 	andi	r2,r2,255
  8170bc:	10800dcc 	andi	r2,r2,55
  8170c0:	1005003a 	cmpeq	r2,r2,zero
  8170c4:	10000b1e 	bne	r2,zero,8170f4 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  8170c8:	e0bffd17 	ldw	r2,-12(fp)
  8170cc:	10c00c03 	ldbu	r3,48(r2)
  8170d0:	00bff204 	movi	r2,-56
  8170d4:	1884703a 	and	r2,r3,r2
  8170d8:	1007883a 	mov	r3,r2
  8170dc:	e0bffd17 	ldw	r2,-12(fp)
  8170e0:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  8170e4:	e0fffd17 	ldw	r3,-12(fp)
  8170e8:	00800044 	movi	r2,1
  8170ec:	18800c45 	stb	r2,49(r3)
  8170f0:	00000206 	br	8170fc <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  8170f4:	e0bffd17 	ldw	r2,-12(fp)
  8170f8:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  8170fc:	e0bffd17 	ldw	r2,-12(fp)
  817100:	10800c03 	ldbu	r2,48(r2)
  817104:	10803fcc 	andi	r2,r2,255
  817108:	1080020c 	andi	r2,r2,8
  81710c:	1004c03a 	cmpne	r2,r2,zero
  817110:	1000221e 	bne	r2,zero,81719c <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  817114:	e0bffd17 	ldw	r2,-12(fp)
  817118:	10c00d83 	ldbu	r3,54(r2)
  81711c:	008020b4 	movhi	r2,130
  817120:	10b7ba04 	addi	r2,r2,-8472
  817124:	10800003 	ldbu	r2,0(r2)
  817128:	1884b03a 	or	r2,r3,r2
  81712c:	1007883a 	mov	r3,r2
  817130:	008020b4 	movhi	r2,130
  817134:	10b7ba04 	addi	r2,r2,-8472
  817138:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  81713c:	e0bffd17 	ldw	r2,-12(fp)
  817140:	10800d03 	ldbu	r2,52(r2)
  817144:	11003fcc 	andi	r4,r2,255
  817148:	e0bffd17 	ldw	r2,-12(fp)
  81714c:	10800d03 	ldbu	r2,52(r2)
  817150:	10c03fcc 	andi	r3,r2,255
  817154:	008020b4 	movhi	r2,130
  817158:	10b7ba44 	addi	r2,r2,-8471
  81715c:	10c5883a 	add	r2,r2,r3
  817160:	10c00003 	ldbu	r3,0(r2)
  817164:	e0bffd17 	ldw	r2,-12(fp)
  817168:	10800d43 	ldbu	r2,53(r2)
  81716c:	1884b03a 	or	r2,r3,r2
  817170:	1007883a 	mov	r3,r2
  817174:	008020b4 	movhi	r2,130
  817178:	10b7ba44 	addi	r2,r2,-8471
  81717c:	1105883a 	add	r2,r2,r4
  817180:	10c00005 	stb	r3,0(r2)
  817184:	e0bffc17 	ldw	r2,-16(fp)
  817188:	e0bff715 	stw	r2,-36(fp)
  81718c:	e0bff717 	ldw	r2,-36(fp)
  817190:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  817194:	08109e40 	call	8109e4 <OS_Sched>
  817198:	00000406 	br	8171ac <OSTimeDlyResume+0x1f4>
  81719c:	e0bffc17 	ldw	r2,-16(fp)
  8171a0:	e0bff615 	stw	r2,-40(fp)
  8171a4:	e0bff617 	ldw	r2,-40(fp)
  8171a8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  8171ac:	e03fff15 	stw	zero,-4(fp)
  8171b0:	e0bfff17 	ldw	r2,-4(fp)
}
  8171b4:	e037883a 	mov	sp,fp
  8171b8:	dfc00117 	ldw	ra,4(sp)
  8171bc:	df000017 	ldw	fp,0(sp)
  8171c0:	dec00204 	addi	sp,sp,8
  8171c4:	f800283a 	ret

008171c8 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  8171c8:	defffb04 	addi	sp,sp,-20
  8171cc:	df000415 	stw	fp,16(sp)
  8171d0:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8171d4:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8171d8:	0005303a 	rdctl	r2,status
  8171dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8171e0:	e0fffd17 	ldw	r3,-12(fp)
  8171e4:	00bfff84 	movi	r2,-2
  8171e8:	1884703a 	and	r2,r3,r2
  8171ec:	1001703a 	wrctl	status,r2
  
  return context;
  8171f0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  8171f4:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
  8171f8:	008020b4 	movhi	r2,130
  8171fc:	10b7be04 	addi	r2,r2,-8456
  817200:	10800017 	ldw	r2,0(r2)
  817204:	e0bfff15 	stw	r2,-4(fp)
  817208:	e0bffe17 	ldw	r2,-8(fp)
  81720c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817210:	e0bffc17 	ldw	r2,-16(fp)
  817214:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  817218:	e0bfff17 	ldw	r2,-4(fp)
}
  81721c:	e037883a 	mov	sp,fp
  817220:	df000017 	ldw	fp,0(sp)
  817224:	dec00104 	addi	sp,sp,4
  817228:	f800283a 	ret

0081722c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  81722c:	defffb04 	addi	sp,sp,-20
  817230:	df000415 	stw	fp,16(sp)
  817234:	df000404 	addi	fp,sp,16
  817238:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81723c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817240:	0005303a 	rdctl	r2,status
  817244:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817248:	e0fffd17 	ldw	r3,-12(fp)
  81724c:	00bfff84 	movi	r2,-2
  817250:	1884703a 	and	r2,r3,r2
  817254:	1001703a 	wrctl	status,r2
  
  return context;
  817258:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  81725c:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
  817260:	00c020b4 	movhi	r3,130
  817264:	18f7be04 	addi	r3,r3,-8456
  817268:	e0bfff17 	ldw	r2,-4(fp)
  81726c:	18800015 	stw	r2,0(r3)
  817270:	e0bffe17 	ldw	r2,-8(fp)
  817274:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817278:	e0bffc17 	ldw	r2,-16(fp)
  81727c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  817280:	e037883a 	mov	sp,fp
  817284:	df000017 	ldw	fp,0(sp)
  817288:	dec00104 	addi	sp,sp,4
  81728c:	f800283a 	ret

00817290 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  817290:	defffd04 	addi	sp,sp,-12
  817294:	dfc00215 	stw	ra,8(sp)
  817298:	df000115 	stw	fp,4(sp)
  81729c:	df000104 	addi	fp,sp,4
  8172a0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  8172a4:	08195140 	call	819514 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8172a8:	00800044 	movi	r2,1
  8172ac:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8172b0:	e037883a 	mov	sp,fp
  8172b4:	dfc00117 	ldw	ra,4(sp)
  8172b8:	df000017 	ldw	fp,0(sp)
  8172bc:	dec00204 	addi	sp,sp,8
  8172c0:	f800283a 	ret

008172c4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8172c4:	defffe04 	addi	sp,sp,-8
  8172c8:	dfc00115 	stw	ra,4(sp)
  8172cc:	df000015 	stw	fp,0(sp)
  8172d0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  8172d4:	01004474 	movhi	r4,273
  8172d8:	21241004 	addi	r4,r4,-28608
  8172dc:	000b883a 	mov	r5,zero
  8172e0:	000d883a 	mov	r6,zero
  8172e4:	01c0fa04 	movi	r7,1000
  8172e8:	08181540 	call	818154 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  8172ec:	010020b4 	movhi	r4,130
  8172f0:	212c5e04 	addi	r4,r4,-20104
  8172f4:	000b883a 	mov	r5,zero
  8172f8:	01800044 	movi	r6,1
  8172fc:	08174d00 	call	8174d0 <altera_avalon_jtag_uart_init>
  817300:	010020b4 	movhi	r4,130
  817304:	212c5404 	addi	r4,r4,-20144
  817308:	08173500 	call	817350 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SD_CARD_SPI_MASTER, sd_card_spi_master);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
  81730c:	010020b4 	movhi	r4,130
  817310:	21306f04 	addi	r4,r4,-15940
  817314:	08173500 	call	817350 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
  817318:	010020b4 	movhi	r4,130
  81731c:	21307b04 	addi	r4,r4,-15892
  817320:	08173500 	call	817350 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  817324:	010020b4 	movhi	r4,130
  817328:	21308704 	addi	r4,r4,-15844
  81732c:	08182940 	call	818294 <alt_up_character_lcd_init>
  817330:	010020b4 	movhi	r4,130
  817334:	21308704 	addi	r4,r4,-15844
  817338:	08173500 	call	817350 <alt_dev_reg>
}
  81733c:	e037883a 	mov	sp,fp
  817340:	dfc00117 	ldw	ra,4(sp)
  817344:	df000017 	ldw	fp,0(sp)
  817348:	dec00204 	addi	sp,sp,8
  81734c:	f800283a 	ret

00817350 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  817350:	defffd04 	addi	sp,sp,-12
  817354:	dfc00215 	stw	ra,8(sp)
  817358:	df000115 	stw	fp,4(sp)
  81735c:	df000104 	addi	fp,sp,4
  817360:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  817364:	e13fff17 	ldw	r4,-4(fp)
  817368:	014020b4 	movhi	r5,130
  81736c:	29709b04 	addi	r5,r5,-15764
  817370:	08189e00 	call	8189e0 <alt_dev_llist_insert>
}
  817374:	e037883a 	mov	sp,fp
  817378:	dfc00117 	ldw	ra,4(sp)
  81737c:	df000017 	ldw	fp,0(sp)
  817380:	dec00204 	addi	sp,sp,8
  817384:	f800283a 	ret

00817388 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  817388:	defffa04 	addi	sp,sp,-24
  81738c:	dfc00515 	stw	ra,20(sp)
  817390:	df000415 	stw	fp,16(sp)
  817394:	df000404 	addi	fp,sp,16
  817398:	e13ffd15 	stw	r4,-12(fp)
  81739c:	e17ffe15 	stw	r5,-8(fp)
  8173a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8173a4:	e0bffd17 	ldw	r2,-12(fp)
  8173a8:	10800017 	ldw	r2,0(r2)
  8173ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8173b0:	e0bffc17 	ldw	r2,-16(fp)
  8173b4:	11000a04 	addi	r4,r2,40
  8173b8:	e0bffd17 	ldw	r2,-12(fp)
  8173bc:	11c00217 	ldw	r7,8(r2)
  8173c0:	e17ffe17 	ldw	r5,-8(fp)
  8173c4:	e1bfff17 	ldw	r6,-4(fp)
  8173c8:	0817b480 	call	817b48 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8173cc:	e037883a 	mov	sp,fp
  8173d0:	dfc00117 	ldw	ra,4(sp)
  8173d4:	df000017 	ldw	fp,0(sp)
  8173d8:	dec00204 	addi	sp,sp,8
  8173dc:	f800283a 	ret

008173e0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8173e0:	defffa04 	addi	sp,sp,-24
  8173e4:	dfc00515 	stw	ra,20(sp)
  8173e8:	df000415 	stw	fp,16(sp)
  8173ec:	df000404 	addi	fp,sp,16
  8173f0:	e13ffd15 	stw	r4,-12(fp)
  8173f4:	e17ffe15 	stw	r5,-8(fp)
  8173f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8173fc:	e0bffd17 	ldw	r2,-12(fp)
  817400:	10800017 	ldw	r2,0(r2)
  817404:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  817408:	e0bffc17 	ldw	r2,-16(fp)
  81740c:	11000a04 	addi	r4,r2,40
  817410:	e0bffd17 	ldw	r2,-12(fp)
  817414:	11c00217 	ldw	r7,8(r2)
  817418:	e17ffe17 	ldw	r5,-8(fp)
  81741c:	e1bfff17 	ldw	r6,-4(fp)
  817420:	0817e080 	call	817e08 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  817424:	e037883a 	mov	sp,fp
  817428:	dfc00117 	ldw	ra,4(sp)
  81742c:	df000017 	ldw	fp,0(sp)
  817430:	dec00204 	addi	sp,sp,8
  817434:	f800283a 	ret

00817438 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  817438:	defffc04 	addi	sp,sp,-16
  81743c:	dfc00315 	stw	ra,12(sp)
  817440:	df000215 	stw	fp,8(sp)
  817444:	df000204 	addi	fp,sp,8
  817448:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81744c:	e0bfff17 	ldw	r2,-4(fp)
  817450:	10800017 	ldw	r2,0(r2)
  817454:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  817458:	e0bffe17 	ldw	r2,-8(fp)
  81745c:	11000a04 	addi	r4,r2,40
  817460:	e0bfff17 	ldw	r2,-4(fp)
  817464:	11400217 	ldw	r5,8(r2)
  817468:	08179e00 	call	8179e0 <altera_avalon_jtag_uart_close>
}
  81746c:	e037883a 	mov	sp,fp
  817470:	dfc00117 	ldw	ra,4(sp)
  817474:	df000017 	ldw	fp,0(sp)
  817478:	dec00204 	addi	sp,sp,8
  81747c:	f800283a 	ret

00817480 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  817480:	defffa04 	addi	sp,sp,-24
  817484:	dfc00515 	stw	ra,20(sp)
  817488:	df000415 	stw	fp,16(sp)
  81748c:	df000404 	addi	fp,sp,16
  817490:	e13ffd15 	stw	r4,-12(fp)
  817494:	e17ffe15 	stw	r5,-8(fp)
  817498:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  81749c:	e0bffd17 	ldw	r2,-12(fp)
  8174a0:	10800017 	ldw	r2,0(r2)
  8174a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  8174a8:	e0bffc17 	ldw	r2,-16(fp)
  8174ac:	11000a04 	addi	r4,r2,40
  8174b0:	e17ffe17 	ldw	r5,-8(fp)
  8174b4:	e1bfff17 	ldw	r6,-4(fp)
  8174b8:	0817a540 	call	817a54 <altera_avalon_jtag_uart_ioctl>
}
  8174bc:	e037883a 	mov	sp,fp
  8174c0:	dfc00117 	ldw	ra,4(sp)
  8174c4:	df000017 	ldw	fp,0(sp)
  8174c8:	dec00204 	addi	sp,sp,8
  8174cc:	f800283a 	ret

008174d0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  8174d0:	defff404 	addi	sp,sp,-48
  8174d4:	dfc00b15 	stw	ra,44(sp)
  8174d8:	df000a15 	stw	fp,40(sp)
  8174dc:	df000a04 	addi	fp,sp,40
  8174e0:	e13ffd15 	stw	r4,-12(fp)
  8174e4:	e17ffe15 	stw	r5,-8(fp)
  8174e8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  8174ec:	e0bffd17 	ldw	r2,-12(fp)
  8174f0:	10800c04 	addi	r2,r2,48
  8174f4:	e0bffb15 	stw	r2,-20(fp)
  8174f8:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  8174fc:	e13ffc0b 	ldhu	r4,-16(fp)
  817500:	e17ffc84 	addi	r5,fp,-14
  817504:	081158c0 	call	81158c <OSFlagCreate>
  817508:	1007883a 	mov	r3,r2
  81750c:	e0bffb17 	ldw	r2,-20(fp)
  817510:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  817514:	e0bffd17 	ldw	r2,-12(fp)
  817518:	10800a04 	addi	r2,r2,40
  81751c:	e0bff915 	stw	r2,-28(fp)
  817520:	00800044 	movi	r2,1
  817524:	e0bffa0d 	sth	r2,-24(fp)
  817528:	e13ffa0b 	ldhu	r4,-24(fp)
  81752c:	08147940 	call	814794 <OSSemCreate>
  817530:	1007883a 	mov	r3,r2
  817534:	e0bff917 	ldw	r2,-28(fp)
  817538:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  81753c:	e0bffd17 	ldw	r2,-12(fp)
  817540:	10800b04 	addi	r2,r2,44
  817544:	e0bff715 	stw	r2,-36(fp)
  817548:	00800044 	movi	r2,1
  81754c:	e0bff80d 	sth	r2,-32(fp)
  817550:	e13ff80b 	ldhu	r4,-32(fp)
  817554:	08147940 	call	814794 <OSSemCreate>
  817558:	1007883a 	mov	r3,r2
  81755c:	e0bff717 	ldw	r2,-36(fp)
  817560:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  817564:	e0fffd17 	ldw	r3,-12(fp)
  817568:	00800044 	movi	r2,1
  81756c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  817570:	e0bffd17 	ldw	r2,-12(fp)
  817574:	10800017 	ldw	r2,0(r2)
  817578:	11000104 	addi	r4,r2,4
  81757c:	e0bffd17 	ldw	r2,-12(fp)
  817580:	10800817 	ldw	r2,32(r2)
  817584:	1007883a 	mov	r3,r2
  817588:	2005883a 	mov	r2,r4
  81758c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  817590:	e13ffe17 	ldw	r4,-8(fp)
  817594:	e17fff17 	ldw	r5,-4(fp)
  817598:	d8000015 	stw	zero,0(sp)
  81759c:	01802074 	movhi	r6,129
  8175a0:	319d8204 	addi	r6,r6,30216
  8175a4:	e1fffd17 	ldw	r7,-12(fp)
  8175a8:	0818c6c0 	call	818c6c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  8175ac:	e0bffd17 	ldw	r2,-12(fp)
  8175b0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  8175b4:	e0bffd17 	ldw	r2,-12(fp)
  8175b8:	11000204 	addi	r4,r2,8
  8175bc:	008020b4 	movhi	r2,130
  8175c0:	10b7c304 	addi	r2,r2,-8436
  8175c4:	10800017 	ldw	r2,0(r2)
  8175c8:	100b883a 	mov	r5,r2
  8175cc:	01802074 	movhi	r6,129
  8175d0:	319e3304 	addi	r6,r6,30924
  8175d4:	e1fffd17 	ldw	r7,-12(fp)
  8175d8:	08187140 	call	818714 <alt_alarm_start>
  8175dc:	1004403a 	cmpge	r2,r2,zero
  8175e0:	1000041e 	bne	r2,zero,8175f4 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  8175e4:	e0fffd17 	ldw	r3,-12(fp)
  8175e8:	00a00034 	movhi	r2,32768
  8175ec:	10bfffc4 	addi	r2,r2,-1
  8175f0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  8175f4:	e037883a 	mov	sp,fp
  8175f8:	dfc00117 	ldw	ra,4(sp)
  8175fc:	df000017 	ldw	fp,0(sp)
  817600:	dec00204 	addi	sp,sp,8
  817604:	f800283a 	ret

00817608 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  817608:	defff204 	addi	sp,sp,-56
  81760c:	dfc00d15 	stw	ra,52(sp)
  817610:	df000c15 	stw	fp,48(sp)
  817614:	df000c04 	addi	fp,sp,48
  817618:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  81761c:	e0bfff17 	ldw	r2,-4(fp)
  817620:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  817624:	e0bffd17 	ldw	r2,-12(fp)
  817628:	10800017 	ldw	r2,0(r2)
  81762c:	e0bffc15 	stw	r2,-16(fp)
  817630:	00000006 	br	817634 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  817634:	e0bffc17 	ldw	r2,-16(fp)
  817638:	10800104 	addi	r2,r2,4
  81763c:	10800037 	ldwio	r2,0(r2)
  817640:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  817644:	e0bffb17 	ldw	r2,-20(fp)
  817648:	1080c00c 	andi	r2,r2,768
  81764c:	1005003a 	cmpeq	r2,r2,zero
  817650:	1000991e 	bne	r2,zero,8178b8 <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  817654:	e0bffb17 	ldw	r2,-20(fp)
  817658:	1080400c 	andi	r2,r2,256
  81765c:	1005003a 	cmpeq	r2,r2,zero
  817660:	1000481e 	bne	r2,zero,817784 <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  817664:	00800074 	movhi	r2,1
  817668:	e0bffa15 	stw	r2,-24(fp)
  81766c:	00000006 	br	817670 <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  817670:	e0bffd17 	ldw	r2,-12(fp)
  817674:	10800d17 	ldw	r2,52(r2)
  817678:	10800044 	addi	r2,r2,1
  81767c:	1081ffcc 	andi	r2,r2,2047
  817680:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  817684:	e0bffd17 	ldw	r2,-12(fp)
  817688:	10c00e17 	ldw	r3,56(r2)
  81768c:	e0bff917 	ldw	r2,-28(fp)
  817690:	18802826 	beq	r3,r2,817734 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  817694:	e0bffc17 	ldw	r2,-16(fp)
  817698:	10800037 	ldwio	r2,0(r2)
  81769c:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  8176a0:	e0bffa17 	ldw	r2,-24(fp)
  8176a4:	10a0000c 	andi	r2,r2,32768
  8176a8:	1005003a 	cmpeq	r2,r2,zero
  8176ac:	1000211e 	bne	r2,zero,817734 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8176b0:	e0bffd17 	ldw	r2,-12(fp)
  8176b4:	10c00d17 	ldw	r3,52(r2)
  8176b8:	e0bffa17 	ldw	r2,-24(fp)
  8176bc:	1009883a 	mov	r4,r2
  8176c0:	e0bffd17 	ldw	r2,-12(fp)
  8176c4:	1885883a 	add	r2,r3,r2
  8176c8:	10801104 	addi	r2,r2,68
  8176cc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8176d0:	e0bffd17 	ldw	r2,-12(fp)
  8176d4:	10800d17 	ldw	r2,52(r2)
  8176d8:	10800044 	addi	r2,r2,1
  8176dc:	10c1ffcc 	andi	r3,r2,2047
  8176e0:	e0bffd17 	ldw	r2,-12(fp)
  8176e4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  8176e8:	e0bffd17 	ldw	r2,-12(fp)
  8176ec:	10800c17 	ldw	r2,48(r2)
  8176f0:	e0bff615 	stw	r2,-40(fp)
  8176f4:	00800044 	movi	r2,1
  8176f8:	e0bff70d 	sth	r2,-36(fp)
  8176fc:	00800044 	movi	r2,1
  817700:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  817704:	008020b4 	movhi	r2,130
  817708:	10b7ae44 	addi	r2,r2,-8519
  81770c:	10800003 	ldbu	r2,0(r2)
  817710:	10803fcc 	andi	r2,r2,255
  817714:	1005003a 	cmpeq	r2,r2,zero
  817718:	103fd51e 	bne	r2,zero,817670 <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
  81771c:	e17ff70b 	ldhu	r5,-36(fp)
  817720:	e1bff783 	ldbu	r6,-34(fp)
  817724:	e1fffe04 	addi	r7,fp,-8
  817728:	e13ff617 	ldw	r4,-40(fp)
  81772c:	08122b40 	call	8122b4 <OSFlagPost>
    return err;
  817730:	003fcf06 	br	817670 <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  817734:	e0bffa17 	ldw	r2,-24(fp)
  817738:	10bfffec 	andhi	r2,r2,65535
  81773c:	1005003a 	cmpeq	r2,r2,zero
  817740:	1000101e 	bne	r2,zero,817784 <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  817744:	e0bffd17 	ldw	r2,-12(fp)
  817748:	10c00817 	ldw	r3,32(r2)
  81774c:	00bfff84 	movi	r2,-2
  817750:	1886703a 	and	r3,r3,r2
  817754:	e0bffd17 	ldw	r2,-12(fp)
  817758:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  81775c:	e0bffc17 	ldw	r2,-16(fp)
  817760:	11000104 	addi	r4,r2,4
  817764:	e0bffd17 	ldw	r2,-12(fp)
  817768:	10800817 	ldw	r2,32(r2)
  81776c:	1007883a 	mov	r3,r2
  817770:	2005883a 	mov	r2,r4
  817774:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  817778:	e0bffc17 	ldw	r2,-16(fp)
  81777c:	10800104 	addi	r2,r2,4
  817780:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  817784:	e0bffb17 	ldw	r2,-20(fp)
  817788:	1080800c 	andi	r2,r2,512
  81778c:	1005003a 	cmpeq	r2,r2,zero
  817790:	103fa81e 	bne	r2,zero,817634 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  817794:	e0bffb17 	ldw	r2,-20(fp)
  817798:	10bfffec 	andhi	r2,r2,65535
  81779c:	1004d43a 	srli	r2,r2,16
  8177a0:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  8177a4:	00002706 	br	817844 <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  8177a8:	e13ffc17 	ldw	r4,-16(fp)
  8177ac:	e0bffd17 	ldw	r2,-12(fp)
  8177b0:	10c01017 	ldw	r3,64(r2)
  8177b4:	e0bffd17 	ldw	r2,-12(fp)
  8177b8:	1885883a 	add	r2,r3,r2
  8177bc:	10821104 	addi	r2,r2,2116
  8177c0:	10800003 	ldbu	r2,0(r2)
  8177c4:	10c03fcc 	andi	r3,r2,255
  8177c8:	18c0201c 	xori	r3,r3,128
  8177cc:	18ffe004 	addi	r3,r3,-128
  8177d0:	2005883a 	mov	r2,r4
  8177d4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8177d8:	e0bffd17 	ldw	r2,-12(fp)
  8177dc:	10801017 	ldw	r2,64(r2)
  8177e0:	10800044 	addi	r2,r2,1
  8177e4:	10c1ffcc 	andi	r3,r2,2047
  8177e8:	e0bffd17 	ldw	r2,-12(fp)
  8177ec:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  8177f0:	e0bffd17 	ldw	r2,-12(fp)
  8177f4:	10800c17 	ldw	r2,48(r2)
  8177f8:	e0bff415 	stw	r2,-48(fp)
  8177fc:	00800084 	movi	r2,2
  817800:	e0bff50d 	sth	r2,-44(fp)
  817804:	00800044 	movi	r2,1
  817808:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  81780c:	008020b4 	movhi	r2,130
  817810:	10b7ae44 	addi	r2,r2,-8519
  817814:	10800003 	ldbu	r2,0(r2)
  817818:	10803fcc 	andi	r2,r2,255
  81781c:	1005003a 	cmpeq	r2,r2,zero
  817820:	1000051e 	bne	r2,zero,817838 <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
  817824:	e17ff50b 	ldhu	r5,-44(fp)
  817828:	e1bff583 	ldbu	r6,-42(fp)
  81782c:	e1fffe44 	addi	r7,fp,-7
  817830:	e13ff417 	ldw	r4,-48(fp)
  817834:	08122b40 	call	8122b4 <OSFlagPost>

        space--;
  817838:	e0bff817 	ldw	r2,-32(fp)
  81783c:	10bfffc4 	addi	r2,r2,-1
  817840:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  817844:	e0bff817 	ldw	r2,-32(fp)
  817848:	1005003a 	cmpeq	r2,r2,zero
  81784c:	1000051e 	bne	r2,zero,817864 <altera_avalon_jtag_uart_irq+0x25c>
  817850:	e0bffd17 	ldw	r2,-12(fp)
  817854:	10c01017 	ldw	r3,64(r2)
  817858:	e0bffd17 	ldw	r2,-12(fp)
  81785c:	10800f17 	ldw	r2,60(r2)
  817860:	18bfd11e 	bne	r3,r2,8177a8 <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  817864:	e0bff817 	ldw	r2,-32(fp)
  817868:	1005003a 	cmpeq	r2,r2,zero
  81786c:	103f711e 	bne	r2,zero,817634 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  817870:	e0bffd17 	ldw	r2,-12(fp)
  817874:	10c00817 	ldw	r3,32(r2)
  817878:	00bfff44 	movi	r2,-3
  81787c:	1886703a 	and	r3,r3,r2
  817880:	e0bffd17 	ldw	r2,-12(fp)
  817884:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  817888:	e0bffd17 	ldw	r2,-12(fp)
  81788c:	10800017 	ldw	r2,0(r2)
  817890:	11000104 	addi	r4,r2,4
  817894:	e0bffd17 	ldw	r2,-12(fp)
  817898:	10800817 	ldw	r2,32(r2)
  81789c:	1007883a 	mov	r3,r2
  8178a0:	2005883a 	mov	r2,r4
  8178a4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8178a8:	e0bffc17 	ldw	r2,-16(fp)
  8178ac:	10800104 	addi	r2,r2,4
  8178b0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  8178b4:	003f5f06 	br	817634 <altera_avalon_jtag_uart_irq+0x2c>
}
  8178b8:	e037883a 	mov	sp,fp
  8178bc:	dfc00117 	ldw	ra,4(sp)
  8178c0:	df000017 	ldw	fp,0(sp)
  8178c4:	dec00204 	addi	sp,sp,8
  8178c8:	f800283a 	ret

008178cc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  8178cc:	defff804 	addi	sp,sp,-32
  8178d0:	dfc00715 	stw	ra,28(sp)
  8178d4:	df000615 	stw	fp,24(sp)
  8178d8:	df000604 	addi	fp,sp,24
  8178dc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  8178e0:	e0bfff17 	ldw	r2,-4(fp)
  8178e4:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  8178e8:	e0bffd17 	ldw	r2,-12(fp)
  8178ec:	10800017 	ldw	r2,0(r2)
  8178f0:	10800104 	addi	r2,r2,4
  8178f4:	10800037 	ldwio	r2,0(r2)
  8178f8:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  8178fc:	e0bffc17 	ldw	r2,-16(fp)
  817900:	1081000c 	andi	r2,r2,1024
  817904:	1005003a 	cmpeq	r2,r2,zero
  817908:	10000c1e 	bne	r2,zero,81793c <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  81790c:	e0bffd17 	ldw	r2,-12(fp)
  817910:	10800017 	ldw	r2,0(r2)
  817914:	11000104 	addi	r4,r2,4
  817918:	e0bffd17 	ldw	r2,-12(fp)
  81791c:	10800817 	ldw	r2,32(r2)
  817920:	10810014 	ori	r2,r2,1024
  817924:	1007883a 	mov	r3,r2
  817928:	2005883a 	mov	r2,r4
  81792c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  817930:	e0bffd17 	ldw	r2,-12(fp)
  817934:	10000915 	stw	zero,36(r2)
  817938:	00002106 	br	8179c0 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  81793c:	e0bffd17 	ldw	r2,-12(fp)
  817940:	10c00917 	ldw	r3,36(r2)
  817944:	00a00034 	movhi	r2,32768
  817948:	10bfff04 	addi	r2,r2,-4
  81794c:	10c01c36 	bltu	r2,r3,8179c0 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
  817950:	e0bffd17 	ldw	r2,-12(fp)
  817954:	10800917 	ldw	r2,36(r2)
  817958:	10c00044 	addi	r3,r2,1
  81795c:	e0bffd17 	ldw	r2,-12(fp)
  817960:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  817964:	e0bffd17 	ldw	r2,-12(fp)
  817968:	10c00917 	ldw	r3,36(r2)
  81796c:	e0bffd17 	ldw	r2,-12(fp)
  817970:	10800117 	ldw	r2,4(r2)
  817974:	18801236 	bltu	r3,r2,8179c0 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  817978:	e0bffd17 	ldw	r2,-12(fp)
  81797c:	10800c17 	ldw	r2,48(r2)
  817980:	e0bffa15 	stw	r2,-24(fp)
  817984:	00800104 	movi	r2,4
  817988:	e0bffb0d 	sth	r2,-20(fp)
  81798c:	00800044 	movi	r2,1
  817990:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  817994:	008020b4 	movhi	r2,130
  817998:	10b7ae44 	addi	r2,r2,-8519
  81799c:	10800003 	ldbu	r2,0(r2)
  8179a0:	10803fcc 	andi	r2,r2,255
  8179a4:	1005003a 	cmpeq	r2,r2,zero
  8179a8:	1000051e 	bne	r2,zero,8179c0 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
  8179ac:	e17ffb0b 	ldhu	r5,-20(fp)
  8179b0:	e1bffb83 	ldbu	r6,-18(fp)
  8179b4:	e1fffe04 	addi	r7,fp,-8
  8179b8:	e13ffa17 	ldw	r4,-24(fp)
  8179bc:	08122b40 	call	8122b4 <OSFlagPost>
  8179c0:	008020b4 	movhi	r2,130
  8179c4:	10b7c304 	addi	r2,r2,-8436
  8179c8:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
  8179cc:	e037883a 	mov	sp,fp
  8179d0:	dfc00117 	ldw	ra,4(sp)
  8179d4:	df000017 	ldw	fp,0(sp)
  8179d8:	dec00204 	addi	sp,sp,8
  8179dc:	f800283a 	ret

008179e0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  8179e0:	defffc04 	addi	sp,sp,-16
  8179e4:	df000315 	stw	fp,12(sp)
  8179e8:	df000304 	addi	fp,sp,12
  8179ec:	e13ffd15 	stw	r4,-12(fp)
  8179f0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8179f4:	00000706 	br	817a14 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  8179f8:	e0bffe17 	ldw	r2,-8(fp)
  8179fc:	1090000c 	andi	r2,r2,16384
  817a00:	1005003a 	cmpeq	r2,r2,zero
  817a04:	1000031e 	bne	r2,zero,817a14 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  817a08:	00bffd44 	movi	r2,-11
  817a0c:	e0bfff15 	stw	r2,-4(fp)
  817a10:	00000b06 	br	817a40 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  817a14:	e0bffd17 	ldw	r2,-12(fp)
  817a18:	10c01017 	ldw	r3,64(r2)
  817a1c:	e0bffd17 	ldw	r2,-12(fp)
  817a20:	10800f17 	ldw	r2,60(r2)
  817a24:	18800526 	beq	r3,r2,817a3c <altera_avalon_jtag_uart_close+0x5c>
  817a28:	e0bffd17 	ldw	r2,-12(fp)
  817a2c:	10c00917 	ldw	r3,36(r2)
  817a30:	e0bffd17 	ldw	r2,-12(fp)
  817a34:	10800117 	ldw	r2,4(r2)
  817a38:	18bfef36 	bltu	r3,r2,8179f8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  817a3c:	e03fff15 	stw	zero,-4(fp)
  817a40:	e0bfff17 	ldw	r2,-4(fp)
}
  817a44:	e037883a 	mov	sp,fp
  817a48:	df000017 	ldw	fp,0(sp)
  817a4c:	dec00104 	addi	sp,sp,4
  817a50:	f800283a 	ret

00817a54 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  817a54:	defff804 	addi	sp,sp,-32
  817a58:	df000715 	stw	fp,28(sp)
  817a5c:	df000704 	addi	fp,sp,28
  817a60:	e13ffb15 	stw	r4,-20(fp)
  817a64:	e17ffc15 	stw	r5,-16(fp)
  817a68:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  817a6c:	00bff9c4 	movi	r2,-25
  817a70:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  817a74:	e0bffc17 	ldw	r2,-16(fp)
  817a78:	e0bfff15 	stw	r2,-4(fp)
  817a7c:	e0ffff17 	ldw	r3,-4(fp)
  817a80:	189a8060 	cmpeqi	r2,r3,27137
  817a84:	1000041e 	bne	r2,zero,817a98 <altera_avalon_jtag_uart_ioctl+0x44>
  817a88:	e0ffff17 	ldw	r3,-4(fp)
  817a8c:	189a80a0 	cmpeqi	r2,r3,27138
  817a90:	10001b1e 	bne	r2,zero,817b00 <altera_avalon_jtag_uart_ioctl+0xac>
  817a94:	00002706 	br	817b34 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  817a98:	e0bffb17 	ldw	r2,-20(fp)
  817a9c:	10c00117 	ldw	r3,4(r2)
  817aa0:	00a00034 	movhi	r2,32768
  817aa4:	10bfffc4 	addi	r2,r2,-1
  817aa8:	18802226 	beq	r3,r2,817b34 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  817aac:	e0bffd17 	ldw	r2,-12(fp)
  817ab0:	10800017 	ldw	r2,0(r2)
  817ab4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  817ab8:	e0bff917 	ldw	r2,-28(fp)
  817abc:	10800090 	cmplti	r2,r2,2
  817ac0:	1000071e 	bne	r2,zero,817ae0 <altera_avalon_jtag_uart_ioctl+0x8c>
  817ac4:	e0fff917 	ldw	r3,-28(fp)
  817ac8:	00a00034 	movhi	r2,32768
  817acc:	10bfffc4 	addi	r2,r2,-1
  817ad0:	18800326 	beq	r3,r2,817ae0 <altera_avalon_jtag_uart_ioctl+0x8c>
  817ad4:	e0bff917 	ldw	r2,-28(fp)
  817ad8:	e0bffe15 	stw	r2,-8(fp)
  817adc:	00000306 	br	817aec <altera_avalon_jtag_uart_ioctl+0x98>
  817ae0:	00e00034 	movhi	r3,32768
  817ae4:	18ffff84 	addi	r3,r3,-2
  817ae8:	e0fffe15 	stw	r3,-8(fp)
  817aec:	e0bffb17 	ldw	r2,-20(fp)
  817af0:	e0fffe17 	ldw	r3,-8(fp)
  817af4:	10c00115 	stw	r3,4(r2)
      rc = 0;
  817af8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  817afc:	00000d06 	br	817b34 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  817b00:	e0bffb17 	ldw	r2,-20(fp)
  817b04:	10c00117 	ldw	r3,4(r2)
  817b08:	00a00034 	movhi	r2,32768
  817b0c:	10bfffc4 	addi	r2,r2,-1
  817b10:	18800826 	beq	r3,r2,817b34 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  817b14:	e13ffd17 	ldw	r4,-12(fp)
  817b18:	e0bffb17 	ldw	r2,-20(fp)
  817b1c:	10c00917 	ldw	r3,36(r2)
  817b20:	e0bffb17 	ldw	r2,-20(fp)
  817b24:	10800117 	ldw	r2,4(r2)
  817b28:	1885803a 	cmpltu	r2,r3,r2
  817b2c:	20800015 	stw	r2,0(r4)
      rc = 0;
  817b30:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  817b34:	e0bffa17 	ldw	r2,-24(fp)
}
  817b38:	e037883a 	mov	sp,fp
  817b3c:	df000017 	ldw	fp,0(sp)
  817b40:	dec00104 	addi	sp,sp,4
  817b44:	f800283a 	ret

00817b48 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  817b48:	deffeb04 	addi	sp,sp,-84
  817b4c:	dfc01415 	stw	ra,80(sp)
  817b50:	df001315 	stw	fp,76(sp)
  817b54:	df001304 	addi	fp,sp,76
  817b58:	e13ffb15 	stw	r4,-20(fp)
  817b5c:	e17ffc15 	stw	r5,-16(fp)
  817b60:	e1bffd15 	stw	r6,-12(fp)
  817b64:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  817b68:	e0bffc17 	ldw	r2,-16(fp)
  817b6c:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  817b70:	e0bffb17 	ldw	r2,-20(fp)
  817b74:	10800a17 	ldw	r2,40(r2)
  817b78:	e0bff315 	stw	r2,-52(fp)
  817b7c:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  817b80:	e17ff40b 	ldhu	r5,-48(fp)
  817b84:	e1bffa44 	addi	r6,fp,-23
  817b88:	e13ff317 	ldw	r4,-52(fp)
  817b8c:	0814b480 	call	814b48 <OSSemPend>

  while (space > 0)
  817b90:	00006406 	br	817d24 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  817b94:	e0bffb17 	ldw	r2,-20(fp)
  817b98:	10800d17 	ldw	r2,52(r2)
  817b9c:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
  817ba0:	e0bffb17 	ldw	r2,-20(fp)
  817ba4:	10800e17 	ldw	r2,56(r2)
  817ba8:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
  817bac:	e0fff617 	ldw	r3,-40(fp)
  817bb0:	e0bff517 	ldw	r2,-44(fp)
  817bb4:	18800536 	bltu	r3,r2,817bcc <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
  817bb8:	e0bff617 	ldw	r2,-40(fp)
  817bbc:	e0fff517 	ldw	r3,-44(fp)
  817bc0:	10c5c83a 	sub	r2,r2,r3
  817bc4:	e0bff715 	stw	r2,-36(fp)
  817bc8:	00000406 	br	817bdc <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  817bcc:	00820004 	movi	r2,2048
  817bd0:	e0fff517 	ldw	r3,-44(fp)
  817bd4:	10c5c83a 	sub	r2,r2,r3
  817bd8:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  817bdc:	e0bff717 	ldw	r2,-36(fp)
  817be0:	1005003a 	cmpeq	r2,r2,zero
  817be4:	10001f1e 	bne	r2,zero,817c64 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  817be8:	e0fffd17 	ldw	r3,-12(fp)
  817bec:	e0bff717 	ldw	r2,-36(fp)
  817bf0:	1880022e 	bgeu	r3,r2,817bfc <altera_avalon_jtag_uart_read+0xb4>
        n = space;
  817bf4:	e0bffd17 	ldw	r2,-12(fp)
  817bf8:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  817bfc:	e0bffb17 	ldw	r2,-20(fp)
  817c00:	10c01104 	addi	r3,r2,68
  817c04:	e0bff517 	ldw	r2,-44(fp)
  817c08:	1887883a 	add	r3,r3,r2
  817c0c:	e0bff917 	ldw	r2,-28(fp)
  817c10:	1009883a 	mov	r4,r2
  817c14:	180b883a 	mov	r5,r3
  817c18:	e1bff717 	ldw	r6,-36(fp)
  817c1c:	080b0c00 	call	80b0c0 <memcpy>
      ptr   += n;
  817c20:	e0fff717 	ldw	r3,-36(fp)
  817c24:	e0bff917 	ldw	r2,-28(fp)
  817c28:	10c5883a 	add	r2,r2,r3
  817c2c:	e0bff915 	stw	r2,-28(fp)
      space -= n;
  817c30:	e0fffd17 	ldw	r3,-12(fp)
  817c34:	e0bff717 	ldw	r2,-36(fp)
  817c38:	1885c83a 	sub	r2,r3,r2
  817c3c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  817c40:	e0fff517 	ldw	r3,-44(fp)
  817c44:	e0bff717 	ldw	r2,-36(fp)
  817c48:	1885883a 	add	r2,r3,r2
  817c4c:	10c1ffcc 	andi	r3,r2,2047
  817c50:	e0bffb17 	ldw	r2,-20(fp)
  817c54:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  817c58:	e0bffd17 	ldw	r2,-12(fp)
  817c5c:	10800048 	cmpgei	r2,r2,1
  817c60:	103fcc1e 	bne	r2,zero,817b94 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
  817c64:	e0fff917 	ldw	r3,-28(fp)
  817c68:	e0bffc17 	ldw	r2,-16(fp)
  817c6c:	1880301e 	bne	r3,r2,817d30 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  817c70:	e0bffe17 	ldw	r2,-8(fp)
  817c74:	1090000c 	andi	r2,r2,16384
  817c78:	1004c03a 	cmpne	r2,r2,zero
  817c7c:	10002c1e 	bne	r2,zero,817d30 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  817c80:	008020b4 	movhi	r2,130
  817c84:	10b7ae44 	addi	r2,r2,-8519
  817c88:	10800003 	ldbu	r2,0(r2)
  817c8c:	10803fcc 	andi	r2,r2,255
  817c90:	10800058 	cmpnei	r2,r2,1
  817c94:	1000161e 	bne	r2,zero,817cf0 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  817c98:	e0bffb17 	ldw	r2,-20(fp)
  817c9c:	10800c17 	ldw	r2,48(r2)
  817ca0:	e0bff015 	stw	r2,-64(fp)
  817ca4:	00800144 	movi	r2,5
  817ca8:	e0bff10d 	sth	r2,-60(fp)
  817cac:	00bfe0c4 	movi	r2,-125
  817cb0:	e0bff185 	stb	r2,-58(fp)
  817cb4:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  817cb8:	008020b4 	movhi	r2,130
  817cbc:	10b7ae44 	addi	r2,r2,-8519
  817cc0:	10800003 	ldbu	r2,0(r2)
  817cc4:	10803fcc 	andi	r2,r2,255
  817cc8:	1005003a 	cmpeq	r2,r2,zero
  817ccc:	1000111e 	bne	r2,zero,817d14 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  817cd0:	e17ff10b 	ldhu	r5,-60(fp)
  817cd4:	e1bff183 	ldbu	r6,-58(fp)
  817cd8:	e1fff20b 	ldhu	r7,-56(fp)
  817cdc:	e0bffa04 	addi	r2,fp,-24
  817ce0:	d8800015 	stw	r2,0(sp)
  817ce4:	e13ff017 	ldw	r4,-64(fp)
  817ce8:	0811c080 	call	811c08 <OSFlagPend>
    return err;
  817cec:	00000906 	br	817d14 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  817cf0:	e0bffb17 	ldw	r2,-20(fp)
  817cf4:	10c00d17 	ldw	r3,52(r2)
  817cf8:	e0bff617 	ldw	r2,-40(fp)
  817cfc:	1880051e 	bne	r3,r2,817d14 <altera_avalon_jtag_uart_read+0x1cc>
  817d00:	e0bffb17 	ldw	r2,-20(fp)
  817d04:	10c00917 	ldw	r3,36(r2)
  817d08:	e0bffb17 	ldw	r2,-20(fp)
  817d0c:	10800117 	ldw	r2,4(r2)
  817d10:	18bff736 	bltu	r3,r2,817cf0 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  817d14:	e0bffb17 	ldw	r2,-20(fp)
  817d18:	10c00d17 	ldw	r3,52(r2)
  817d1c:	e0bff617 	ldw	r2,-40(fp)
  817d20:	18800326 	beq	r3,r2,817d30 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  817d24:	e0bffd17 	ldw	r2,-12(fp)
  817d28:	10800048 	cmpgei	r2,r2,1
  817d2c:	103f991e 	bne	r2,zero,817b94 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  817d30:	e0bffb17 	ldw	r2,-20(fp)
  817d34:	11000a17 	ldw	r4,40(r2)
  817d38:	0814f400 	call	814f40 <OSSemPost>

  if (ptr != buffer)
  817d3c:	e0fff917 	ldw	r3,-28(fp)
  817d40:	e0bffc17 	ldw	r2,-16(fp)
  817d44:	18801926 	beq	r3,r2,817dac <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817d48:	0005303a 	rdctl	r2,status
  817d4c:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817d50:	e0ffef17 	ldw	r3,-68(fp)
  817d54:	00bfff84 	movi	r2,-2
  817d58:	1884703a 	and	r2,r3,r2
  817d5c:	1001703a 	wrctl	status,r2
  
  return context;
  817d60:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  817d64:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  817d68:	e0bffb17 	ldw	r2,-20(fp)
  817d6c:	10800817 	ldw	r2,32(r2)
  817d70:	10c00054 	ori	r3,r2,1
  817d74:	e0bffb17 	ldw	r2,-20(fp)
  817d78:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  817d7c:	e0bffb17 	ldw	r2,-20(fp)
  817d80:	10800017 	ldw	r2,0(r2)
  817d84:	11000104 	addi	r4,r2,4
  817d88:	e0bffb17 	ldw	r2,-20(fp)
  817d8c:	10800817 	ldw	r2,32(r2)
  817d90:	1007883a 	mov	r3,r2
  817d94:	2005883a 	mov	r2,r4
  817d98:	10c00035 	stwio	r3,0(r2)
  817d9c:	e0bff817 	ldw	r2,-32(fp)
  817da0:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817da4:	e0bfee17 	ldw	r2,-72(fp)
  817da8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  817dac:	e0fff917 	ldw	r3,-28(fp)
  817db0:	e0bffc17 	ldw	r2,-16(fp)
  817db4:	18800526 	beq	r3,r2,817dcc <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
  817db8:	e0fff917 	ldw	r3,-28(fp)
  817dbc:	e0bffc17 	ldw	r2,-16(fp)
  817dc0:	1887c83a 	sub	r3,r3,r2
  817dc4:	e0ffff15 	stw	r3,-4(fp)
  817dc8:	00000906 	br	817df0 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  817dcc:	e0bffe17 	ldw	r2,-8(fp)
  817dd0:	1090000c 	andi	r2,r2,16384
  817dd4:	1005003a 	cmpeq	r2,r2,zero
  817dd8:	1000031e 	bne	r2,zero,817de8 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
  817ddc:	00bffd44 	movi	r2,-11
  817de0:	e0bfff15 	stw	r2,-4(fp)
  817de4:	00000206 	br	817df0 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  817de8:	00bffec4 	movi	r2,-5
  817dec:	e0bfff15 	stw	r2,-4(fp)
  817df0:	e0bfff17 	ldw	r2,-4(fp)
}
  817df4:	e037883a 	mov	sp,fp
  817df8:	dfc00117 	ldw	ra,4(sp)
  817dfc:	df000017 	ldw	fp,0(sp)
  817e00:	dec00204 	addi	sp,sp,8
  817e04:	f800283a 	ret

00817e08 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  817e08:	deffeb04 	addi	sp,sp,-84
  817e0c:	dfc01415 	stw	ra,80(sp)
  817e10:	df001315 	stw	fp,76(sp)
  817e14:	df001304 	addi	fp,sp,76
  817e18:	e13ffb15 	stw	r4,-20(fp)
  817e1c:	e17ffc15 	stw	r5,-16(fp)
  817e20:	e1bffd15 	stw	r6,-12(fp)
  817e24:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  817e28:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  817e2c:	e0bffc17 	ldw	r2,-16(fp)
  817e30:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  817e34:	e0bffb17 	ldw	r2,-20(fp)
  817e38:	10800b17 	ldw	r2,44(r2)
  817e3c:	e0bff315 	stw	r2,-52(fp)
  817e40:	e03ff40d 	sth	zero,-48(fp)
  817e44:	e17ff40b 	ldhu	r5,-48(fp)
  817e48:	e1bffa04 	addi	r6,fp,-24
  817e4c:	e13ff317 	ldw	r4,-52(fp)
  817e50:	0814b480 	call	814b48 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  817e54:	00003a06 	br	817f40 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  817e58:	e0bffb17 	ldw	r2,-20(fp)
  817e5c:	10800f17 	ldw	r2,60(r2)
  817e60:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  817e64:	e0bffb17 	ldw	r2,-20(fp)
  817e68:	10801017 	ldw	r2,64(r2)
  817e6c:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
  817e70:	e0fff917 	ldw	r3,-28(fp)
  817e74:	e0bff817 	ldw	r2,-32(fp)
  817e78:	1880062e 	bgeu	r3,r2,817e94 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
  817e7c:	e0fff817 	ldw	r3,-32(fp)
  817e80:	e0bff917 	ldw	r2,-28(fp)
  817e84:	1885c83a 	sub	r2,r3,r2
  817e88:	10bfffc4 	addi	r2,r2,-1
  817e8c:	e0bff715 	stw	r2,-36(fp)
  817e90:	00000c06 	br	817ec4 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
  817e94:	e0bff817 	ldw	r2,-32(fp)
  817e98:	1005003a 	cmpeq	r2,r2,zero
  817e9c:	1000051e 	bne	r2,zero,817eb4 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  817ea0:	00820004 	movi	r2,2048
  817ea4:	e0fff917 	ldw	r3,-28(fp)
  817ea8:	10c5c83a 	sub	r2,r2,r3
  817eac:	e0bff715 	stw	r2,-36(fp)
  817eb0:	00000406 	br	817ec4 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  817eb4:	0081ffc4 	movi	r2,2047
  817eb8:	e0fff917 	ldw	r3,-28(fp)
  817ebc:	10c5c83a 	sub	r2,r2,r3
  817ec0:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  817ec4:	e0bff717 	ldw	r2,-36(fp)
  817ec8:	1005003a 	cmpeq	r2,r2,zero
  817ecc:	10001f1e 	bne	r2,zero,817f4c <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
  817ed0:	e0fffd17 	ldw	r3,-12(fp)
  817ed4:	e0bff717 	ldw	r2,-36(fp)
  817ed8:	1880022e 	bgeu	r3,r2,817ee4 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  817edc:	e0bffd17 	ldw	r2,-12(fp)
  817ee0:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  817ee4:	e0bffb17 	ldw	r2,-20(fp)
  817ee8:	10c21104 	addi	r3,r2,2116
  817eec:	e0bff917 	ldw	r2,-28(fp)
  817ef0:	1885883a 	add	r2,r3,r2
  817ef4:	e0fffc17 	ldw	r3,-16(fp)
  817ef8:	1009883a 	mov	r4,r2
  817efc:	180b883a 	mov	r5,r3
  817f00:	e1bff717 	ldw	r6,-36(fp)
  817f04:	080b0c00 	call	80b0c0 <memcpy>
      ptr   += n;
  817f08:	e0fff717 	ldw	r3,-36(fp)
  817f0c:	e0bffc17 	ldw	r2,-16(fp)
  817f10:	10c5883a 	add	r2,r2,r3
  817f14:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  817f18:	e0fffd17 	ldw	r3,-12(fp)
  817f1c:	e0bff717 	ldw	r2,-36(fp)
  817f20:	1885c83a 	sub	r2,r3,r2
  817f24:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  817f28:	e0fff917 	ldw	r3,-28(fp)
  817f2c:	e0bff717 	ldw	r2,-36(fp)
  817f30:	1885883a 	add	r2,r3,r2
  817f34:	10c1ffcc 	andi	r3,r2,2047
  817f38:	e0bffb17 	ldw	r2,-20(fp)
  817f3c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  817f40:	e0bffd17 	ldw	r2,-12(fp)
  817f44:	10800048 	cmpgei	r2,r2,1
  817f48:	103fc31e 	bne	r2,zero,817e58 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817f4c:	0005303a 	rdctl	r2,status
  817f50:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817f54:	e0fff217 	ldw	r3,-56(fp)
  817f58:	00bfff84 	movi	r2,-2
  817f5c:	1884703a 	and	r2,r3,r2
  817f60:	1001703a 	wrctl	status,r2
  
  return context;
  817f64:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  817f68:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  817f6c:	e0bffb17 	ldw	r2,-20(fp)
  817f70:	10800817 	ldw	r2,32(r2)
  817f74:	10c00094 	ori	r3,r2,2
  817f78:	e0bffb17 	ldw	r2,-20(fp)
  817f7c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  817f80:	e0bffb17 	ldw	r2,-20(fp)
  817f84:	10800017 	ldw	r2,0(r2)
  817f88:	11000104 	addi	r4,r2,4
  817f8c:	e0bffb17 	ldw	r2,-20(fp)
  817f90:	10800817 	ldw	r2,32(r2)
  817f94:	1007883a 	mov	r3,r2
  817f98:	2005883a 	mov	r2,r4
  817f9c:	10c00035 	stwio	r3,0(r2)
  817fa0:	e0bff617 	ldw	r2,-40(fp)
  817fa4:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817fa8:	e0bff117 	ldw	r2,-60(fp)
  817fac:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  817fb0:	e0bffd17 	ldw	r2,-12(fp)
  817fb4:	10800050 	cmplti	r2,r2,1
  817fb8:	10002d1e 	bne	r2,zero,818070 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
  817fbc:	e0bffe17 	ldw	r2,-8(fp)
  817fc0:	1090000c 	andi	r2,r2,16384
  817fc4:	1004c03a 	cmpne	r2,r2,zero
  817fc8:	10002c1e 	bne	r2,zero,81807c <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  817fcc:	008020b4 	movhi	r2,130
  817fd0:	10b7ae44 	addi	r2,r2,-8519
  817fd4:	10800003 	ldbu	r2,0(r2)
  817fd8:	10803fcc 	andi	r2,r2,255
  817fdc:	10800058 	cmpnei	r2,r2,1
  817fe0:	1000161e 	bne	r2,zero,81803c <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
  817fe4:	e0bffb17 	ldw	r2,-20(fp)
  817fe8:	10800c17 	ldw	r2,48(r2)
  817fec:	e0bfee15 	stw	r2,-72(fp)
  817ff0:	00800184 	movi	r2,6
  817ff4:	e0bfef0d 	sth	r2,-68(fp)
  817ff8:	00bfe0c4 	movi	r2,-125
  817ffc:	e0bfef85 	stb	r2,-66(fp)
  818000:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  818004:	008020b4 	movhi	r2,130
  818008:	10b7ae44 	addi	r2,r2,-8519
  81800c:	10800003 	ldbu	r2,0(r2)
  818010:	10803fcc 	andi	r2,r2,255
  818014:	1005003a 	cmpeq	r2,r2,zero
  818018:	1000111e 	bne	r2,zero,818060 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  81801c:	e17fef0b 	ldhu	r5,-68(fp)
  818020:	e1bfef83 	ldbu	r6,-66(fp)
  818024:	e1fff00b 	ldhu	r7,-64(fp)
  818028:	e0bffa44 	addi	r2,fp,-23
  81802c:	d8800015 	stw	r2,0(sp)
  818030:	e13fee17 	ldw	r4,-72(fp)
  818034:	0811c080 	call	811c08 <OSFlagPend>
    return err;
  818038:	00000906 	br	818060 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  81803c:	e0bffb17 	ldw	r2,-20(fp)
  818040:	10c01017 	ldw	r3,64(r2)
  818044:	e0bff817 	ldw	r2,-32(fp)
  818048:	1880051e 	bne	r3,r2,818060 <altera_avalon_jtag_uart_write+0x258>
  81804c:	e0bffb17 	ldw	r2,-20(fp)
  818050:	10c00917 	ldw	r3,36(r2)
  818054:	e0bffb17 	ldw	r2,-20(fp)
  818058:	10800117 	ldw	r2,4(r2)
  81805c:	18bff736 	bltu	r3,r2,81803c <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  818060:	e0bffb17 	ldw	r2,-20(fp)
  818064:	10c01017 	ldw	r3,64(r2)
  818068:	e0bff817 	ldw	r2,-32(fp)
  81806c:	18800326 	beq	r3,r2,81807c <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
  818070:	e0bffd17 	ldw	r2,-12(fp)
  818074:	10800048 	cmpgei	r2,r2,1
  818078:	103fb11e 	bne	r2,zero,817f40 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  81807c:	e0bffb17 	ldw	r2,-20(fp)
  818080:	11000b17 	ldw	r4,44(r2)
  818084:	0814f400 	call	814f40 <OSSemPost>

  if (ptr != start)
  818088:	e0fffc17 	ldw	r3,-16(fp)
  81808c:	e0bff517 	ldw	r2,-44(fp)
  818090:	18800526 	beq	r3,r2,8180a8 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
  818094:	e0fffc17 	ldw	r3,-16(fp)
  818098:	e0bff517 	ldw	r2,-44(fp)
  81809c:	1887c83a 	sub	r3,r3,r2
  8180a0:	e0ffff15 	stw	r3,-4(fp)
  8180a4:	00000906 	br	8180cc <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
  8180a8:	e0bffe17 	ldw	r2,-8(fp)
  8180ac:	1090000c 	andi	r2,r2,16384
  8180b0:	1005003a 	cmpeq	r2,r2,zero
  8180b4:	1000031e 	bne	r2,zero,8180c4 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
  8180b8:	00bffd44 	movi	r2,-11
  8180bc:	e0bfff15 	stw	r2,-4(fp)
  8180c0:	00000206 	br	8180cc <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
  8180c4:	00bffec4 	movi	r2,-5
  8180c8:	e0bfff15 	stw	r2,-4(fp)
  8180cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8180d0:	e037883a 	mov	sp,fp
  8180d4:	dfc00117 	ldw	ra,4(sp)
  8180d8:	df000017 	ldw	fp,0(sp)
  8180dc:	dec00204 	addi	sp,sp,8
  8180e0:	f800283a 	ret

008180e4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8180e4:	defffa04 	addi	sp,sp,-24
  8180e8:	dfc00515 	stw	ra,20(sp)
  8180ec:	df000415 	stw	fp,16(sp)
  8180f0:	df000404 	addi	fp,sp,16
  8180f4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8180f8:	e0bfff17 	ldw	r2,-4(fp)
  8180fc:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  818100:	e0bfff17 	ldw	r2,-4(fp)
  818104:	10800104 	addi	r2,r2,4
  818108:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81810c:	0005303a 	rdctl	r2,status
  818110:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818114:	e0fffd17 	ldw	r3,-12(fp)
  818118:	00bfff84 	movi	r2,-2
  81811c:	1884703a 	and	r2,r3,r2
  818120:	1001703a 	wrctl	status,r2
  
  return context;
  818124:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  818128:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  81812c:	08194040 	call	819404 <alt_tick>
  818130:	e0bffe17 	ldw	r2,-8(fp)
  818134:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818138:	e0bffc17 	ldw	r2,-16(fp)
  81813c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  818140:	e037883a 	mov	sp,fp
  818144:	dfc00117 	ldw	ra,4(sp)
  818148:	df000017 	ldw	fp,0(sp)
  81814c:	dec00204 	addi	sp,sp,8
  818150:	f800283a 	ret

00818154 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  818154:	defff804 	addi	sp,sp,-32
  818158:	dfc00715 	stw	ra,28(sp)
  81815c:	df000615 	stw	fp,24(sp)
  818160:	df000604 	addi	fp,sp,24
  818164:	e13ffc15 	stw	r4,-16(fp)
  818168:	e17ffd15 	stw	r5,-12(fp)
  81816c:	e1bffe15 	stw	r6,-8(fp)
  818170:	e1ffff15 	stw	r7,-4(fp)
  818174:	e0bfff17 	ldw	r2,-4(fp)
  818178:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  81817c:	008020b4 	movhi	r2,130
  818180:	10b7c304 	addi	r2,r2,-8436
  818184:	10800017 	ldw	r2,0(r2)
  818188:	1004c03a 	cmpne	r2,r2,zero
  81818c:	1000041e 	bne	r2,zero,8181a0 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  818190:	00c020b4 	movhi	r3,130
  818194:	18f7c304 	addi	r3,r3,-8436
  818198:	e0bffb17 	ldw	r2,-20(fp)
  81819c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8181a0:	e0bffc17 	ldw	r2,-16(fp)
  8181a4:	10800104 	addi	r2,r2,4
  8181a8:	1007883a 	mov	r3,r2
  8181ac:	008001c4 	movi	r2,7
  8181b0:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8181b4:	d8000015 	stw	zero,0(sp)
  8181b8:	e13ffd17 	ldw	r4,-12(fp)
  8181bc:	e17ffe17 	ldw	r5,-8(fp)
  8181c0:	018020b4 	movhi	r6,130
  8181c4:	31a03904 	addi	r6,r6,-32540
  8181c8:	e1fffc17 	ldw	r7,-16(fp)
  8181cc:	0818c6c0 	call	818c6c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8181d0:	e037883a 	mov	sp,fp
  8181d4:	dfc00117 	ldw	ra,4(sp)
  8181d8:	df000017 	ldw	fp,0(sp)
  8181dc:	dec00204 	addi	sp,sp,8
  8181e0:	f800283a 	ret

008181e4 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  8181e4:	defffc04 	addi	sp,sp,-16
  8181e8:	df000315 	stw	fp,12(sp)
  8181ec:	df000304 	addi	fp,sp,12
  8181f0:	e13ffe15 	stw	r4,-8(fp)
  8181f4:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  8181f8:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  8181fc:	e0bfff17 	ldw	r2,-4(fp)
  818200:	1004c03a 	cmpne	r2,r2,zero
  818204:	1000061e 	bne	r2,zero,818220 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  818208:	e0bffe17 	ldw	r2,-8(fp)
  81820c:	1007883a 	mov	r3,r2
  818210:	e0bffd03 	ldbu	r2,-12(fp)
  818214:	10c4b03a 	or	r2,r2,r3
  818218:	e0bffd05 	stb	r2,-12(fp)
  81821c:	00000806 	br	818240 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  818220:	e0bffe17 	ldw	r2,-8(fp)
  818224:	1007883a 	mov	r3,r2
  818228:	e0bffd03 	ldbu	r2,-12(fp)
  81822c:	10c4b03a 	or	r2,r2,r3
  818230:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  818234:	e0bffd03 	ldbu	r2,-12(fp)
  818238:	10801014 	ori	r2,r2,64
  81823c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  818240:	e0fffd03 	ldbu	r3,-12(fp)
  818244:	00bfe004 	movi	r2,-128
  818248:	1884b03a 	or	r2,r3,r2
  81824c:	10803fcc 	andi	r2,r2,255
}
  818250:	e037883a 	mov	sp,fp
  818254:	df000017 	ldw	fp,0(sp)
  818258:	dec00104 	addi	sp,sp,4
  81825c:	f800283a 	ret

00818260 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  818260:	defffd04 	addi	sp,sp,-12
  818264:	df000215 	stw	fp,8(sp)
  818268:	df000204 	addi	fp,sp,8
  81826c:	e13ffe15 	stw	r4,-8(fp)
  818270:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  818274:	e0bffe17 	ldw	r2,-8(fp)
  818278:	10800a17 	ldw	r2,40(r2)
  81827c:	e0ffff03 	ldbu	r3,-4(fp)
  818280:	10c00025 	stbio	r3,0(r2)
}
  818284:	e037883a 	mov	sp,fp
  818288:	df000017 	ldw	fp,0(sp)
  81828c:	dec00104 	addi	sp,sp,4
  818290:	f800283a 	ret

00818294 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  818294:	defffe04 	addi	sp,sp,-8
  818298:	df000115 	stw	fp,4(sp)
  81829c:	df000104 	addi	fp,sp,4
  8182a0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  8182a4:	e0bfff17 	ldw	r2,-4(fp)
  8182a8:	10800a17 	ldw	r2,40(r2)
  8182ac:	1007883a 	mov	r3,r2
  8182b0:	00800044 	movi	r2,1
  8182b4:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  8182b8:	e037883a 	mov	sp,fp
  8182bc:	df000017 	ldw	fp,0(sp)
  8182c0:	dec00104 	addi	sp,sp,4
  8182c4:	f800283a 	ret

008182c8 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  8182c8:	defffc04 	addi	sp,sp,-16
  8182cc:	dfc00315 	stw	ra,12(sp)
  8182d0:	df000215 	stw	fp,8(sp)
  8182d4:	df000204 	addi	fp,sp,8
  8182d8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  8182dc:	e13fff17 	ldw	r4,-4(fp)
  8182e0:	014020b4 	movhi	r5,130
  8182e4:	29709b04 	addi	r5,r5,-15764
  8182e8:	0818bbc0 	call	818bbc <alt_find_dev>
  8182ec:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  8182f0:	e0bffe17 	ldw	r2,-8(fp)
}
  8182f4:	e037883a 	mov	sp,fp
  8182f8:	dfc00117 	ldw	ra,4(sp)
  8182fc:	df000017 	ldw	fp,0(sp)
  818300:	dec00204 	addi	sp,sp,8
  818304:	f800283a 	ret

00818308 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  818308:	defffb04 	addi	sp,sp,-20
  81830c:	df000415 	stw	fp,16(sp)
  818310:	df000404 	addi	fp,sp,16
  818314:	e13ffd15 	stw	r4,-12(fp)
  818318:	e17ffe15 	stw	r5,-8(fp)
  81831c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  818320:	e03ffc15 	stw	zero,-16(fp)
  818324:	00000f06 	br	818364 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  818328:	e0bffd17 	ldw	r2,-12(fp)
  81832c:	10800a17 	ldw	r2,40(r2)
  818330:	11000044 	addi	r4,r2,1
  818334:	e0fffc17 	ldw	r3,-16(fp)
  818338:	e0bffe17 	ldw	r2,-8(fp)
  81833c:	1885883a 	add	r2,r3,r2
  818340:	10800003 	ldbu	r2,0(r2)
  818344:	10c03fcc 	andi	r3,r2,255
  818348:	18c0201c 	xori	r3,r3,128
  81834c:	18ffe004 	addi	r3,r3,-128
  818350:	2005883a 	mov	r2,r4
  818354:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  818358:	e0bffc17 	ldw	r2,-16(fp)
  81835c:	10800044 	addi	r2,r2,1
  818360:	e0bffc15 	stw	r2,-16(fp)
  818364:	e0fffc17 	ldw	r3,-16(fp)
  818368:	e0bfff17 	ldw	r2,-4(fp)
  81836c:	18bfee36 	bltu	r3,r2,818328 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  818370:	e037883a 	mov	sp,fp
  818374:	df000017 	ldw	fp,0(sp)
  818378:	dec00104 	addi	sp,sp,4
  81837c:	f800283a 	ret

00818380 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  818380:	defffd04 	addi	sp,sp,-12
  818384:	df000215 	stw	fp,8(sp)
  818388:	df000204 	addi	fp,sp,8
  81838c:	e13ffe15 	stw	r4,-8(fp)
  818390:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  818394:	00000d06 	br	8183cc <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  818398:	e0bffe17 	ldw	r2,-8(fp)
  81839c:	10800a17 	ldw	r2,40(r2)
  8183a0:	11000044 	addi	r4,r2,1
  8183a4:	e0bfff17 	ldw	r2,-4(fp)
  8183a8:	10800003 	ldbu	r2,0(r2)
  8183ac:	10c03fcc 	andi	r3,r2,255
  8183b0:	18c0201c 	xori	r3,r3,128
  8183b4:	18ffe004 	addi	r3,r3,-128
  8183b8:	2005883a 	mov	r2,r4
  8183bc:	10c00025 	stbio	r3,0(r2)
		++ptr;
  8183c0:	e0bfff17 	ldw	r2,-4(fp)
  8183c4:	10800044 	addi	r2,r2,1
  8183c8:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  8183cc:	e0bfff17 	ldw	r2,-4(fp)
  8183d0:	10800003 	ldbu	r2,0(r2)
  8183d4:	10803fcc 	andi	r2,r2,255
  8183d8:	1080201c 	xori	r2,r2,128
  8183dc:	10bfe004 	addi	r2,r2,-128
  8183e0:	1004c03a 	cmpne	r2,r2,zero
  8183e4:	103fec1e 	bne	r2,zero,818398 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  8183e8:	e037883a 	mov	sp,fp
  8183ec:	df000017 	ldw	fp,0(sp)
  8183f0:	dec00104 	addi	sp,sp,4
  8183f4:	f800283a 	ret

008183f8 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  8183f8:	defffb04 	addi	sp,sp,-20
  8183fc:	dfc00415 	stw	ra,16(sp)
  818400:	df000315 	stw	fp,12(sp)
  818404:	df000304 	addi	fp,sp,12
  818408:	e13ffd15 	stw	r4,-12(fp)
  81840c:	e17ffe15 	stw	r5,-8(fp)
  818410:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  818414:	e0bffd17 	ldw	r2,-12(fp)
  818418:	10800017 	ldw	r2,0(r2)
  81841c:	1009883a 	mov	r4,r2
  818420:	e1bfff17 	ldw	r6,-4(fp)
  818424:	e17ffe17 	ldw	r5,-8(fp)
  818428:	08183080 	call	818308 <alt_up_character_lcd_write>
	return 0;
  81842c:	0005883a 	mov	r2,zero
}
  818430:	e037883a 	mov	sp,fp
  818434:	dfc00117 	ldw	ra,4(sp)
  818438:	df000017 	ldw	fp,0(sp)
  81843c:	dec00204 	addi	sp,sp,8
  818440:	f800283a 	ret

00818444 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  818444:	defff904 	addi	sp,sp,-28
  818448:	dfc00615 	stw	ra,24(sp)
  81844c:	df000515 	stw	fp,20(sp)
  818450:	df000504 	addi	fp,sp,20
  818454:	e13ffc15 	stw	r4,-16(fp)
  818458:	e17ffd15 	stw	r5,-12(fp)
  81845c:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  818460:	e0bffd17 	ldw	r2,-12(fp)
  818464:	10800a28 	cmpgeui	r2,r2,40
  818468:	1000031e 	bne	r2,zero,818478 <alt_up_character_lcd_set_cursor_pos+0x34>
  81846c:	e0bffe17 	ldw	r2,-8(fp)
  818470:	108000b0 	cmpltui	r2,r2,2
  818474:	1000031e 	bne	r2,zero,818484 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  818478:	00bfffc4 	movi	r2,-1
  81847c:	e0bfff15 	stw	r2,-4(fp)
  818480:	00000806 	br	8184a4 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  818484:	e13ffd17 	ldw	r4,-12(fp)
  818488:	e17ffe17 	ldw	r5,-8(fp)
  81848c:	08181e40 	call	8181e4 <get_DDRAM_addr>
  818490:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  818494:	e17ffb03 	ldbu	r5,-20(fp)
  818498:	e13ffc17 	ldw	r4,-16(fp)
  81849c:	08182600 	call	818260 <alt_up_character_lcd_send_cmd>
	return 0;
  8184a0:	e03fff15 	stw	zero,-4(fp)
  8184a4:	e0bfff17 	ldw	r2,-4(fp)
}
  8184a8:	e037883a 	mov	sp,fp
  8184ac:	dfc00117 	ldw	ra,4(sp)
  8184b0:	df000017 	ldw	fp,0(sp)
  8184b4:	dec00204 	addi	sp,sp,8
  8184b8:	f800283a 	ret

008184bc <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  8184bc:	defff904 	addi	sp,sp,-28
  8184c0:	dfc00615 	stw	ra,24(sp)
  8184c4:	df000515 	stw	fp,20(sp)
  8184c8:	df000504 	addi	fp,sp,20
  8184cc:	e13ffc15 	stw	r4,-16(fp)
  8184d0:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  8184d4:	e0bffd17 	ldw	r2,-12(fp)
  8184d8:	1005003a 	cmpeq	r2,r2,zero
  8184dc:	10001e1e 	bne	r2,zero,818558 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  8184e0:	e0bffd17 	ldw	r2,-12(fp)
  8184e4:	10800050 	cmplti	r2,r2,1
  8184e8:	1000031e 	bne	r2,zero,8184f8 <alt_up_character_lcd_shift_cursor+0x3c>
  8184ec:	00800504 	movi	r2,20
  8184f0:	e0bfff05 	stb	r2,-4(fp)
  8184f4:	00000206 	br	818500 <alt_up_character_lcd_shift_cursor+0x44>
  8184f8:	00c00404 	movi	r3,16
  8184fc:	e0ffff05 	stb	r3,-4(fp)
  818500:	e0bfff03 	ldbu	r2,-4(fp)
  818504:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  818508:	e0fffd17 	ldw	r3,-12(fp)
  81850c:	e0fffe15 	stw	r3,-8(fp)
  818510:	e0fffe17 	ldw	r3,-8(fp)
  818514:	1804403a 	cmpge	r2,r3,zero
  818518:	1000031e 	bne	r2,zero,818528 <alt_up_character_lcd_shift_cursor+0x6c>
  81851c:	e0bffe17 	ldw	r2,-8(fp)
  818520:	0085c83a 	sub	r2,zero,r2
  818524:	e0bffe15 	stw	r2,-8(fp)
  818528:	e0fffe17 	ldw	r3,-8(fp)
  81852c:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  818530:	00000306 	br	818540 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  818534:	e17ffb43 	ldbu	r5,-19(fp)
  818538:	e13ffc17 	ldw	r4,-16(fp)
  81853c:	08182600 	call	818260 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  818540:	e0bffb03 	ldbu	r2,-20(fp)
  818544:	10bfffc4 	addi	r2,r2,-1
  818548:	e0bffb05 	stb	r2,-20(fp)
  81854c:	e0bffb03 	ldbu	r2,-20(fp)
  818550:	10803fd8 	cmpnei	r2,r2,255
  818554:	103ff71e 	bne	r2,zero,818534 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  818558:	e037883a 	mov	sp,fp
  81855c:	dfc00117 	ldw	ra,4(sp)
  818560:	df000017 	ldw	fp,0(sp)
  818564:	dec00204 	addi	sp,sp,8
  818568:	f800283a 	ret

0081856c <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  81856c:	defff904 	addi	sp,sp,-28
  818570:	dfc00615 	stw	ra,24(sp)
  818574:	df000515 	stw	fp,20(sp)
  818578:	df000504 	addi	fp,sp,20
  81857c:	e13ffc15 	stw	r4,-16(fp)
  818580:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  818584:	e0bffd17 	ldw	r2,-12(fp)
  818588:	1005003a 	cmpeq	r2,r2,zero
  81858c:	10001e1e 	bne	r2,zero,818608 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  818590:	e0bffd17 	ldw	r2,-12(fp)
  818594:	10800050 	cmplti	r2,r2,1
  818598:	1000031e 	bne	r2,zero,8185a8 <alt_up_character_lcd_shift_display+0x3c>
  81859c:	00800704 	movi	r2,28
  8185a0:	e0bfff05 	stb	r2,-4(fp)
  8185a4:	00000206 	br	8185b0 <alt_up_character_lcd_shift_display+0x44>
  8185a8:	00c00604 	movi	r3,24
  8185ac:	e0ffff05 	stb	r3,-4(fp)
  8185b0:	e0bfff03 	ldbu	r2,-4(fp)
  8185b4:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  8185b8:	e0fffd17 	ldw	r3,-12(fp)
  8185bc:	e0fffe15 	stw	r3,-8(fp)
  8185c0:	e0fffe17 	ldw	r3,-8(fp)
  8185c4:	1804403a 	cmpge	r2,r3,zero
  8185c8:	1000031e 	bne	r2,zero,8185d8 <alt_up_character_lcd_shift_display+0x6c>
  8185cc:	e0bffe17 	ldw	r2,-8(fp)
  8185d0:	0085c83a 	sub	r2,zero,r2
  8185d4:	e0bffe15 	stw	r2,-8(fp)
  8185d8:	e0fffe17 	ldw	r3,-8(fp)
  8185dc:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  8185e0:	00000306 	br	8185f0 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  8185e4:	e17ffb43 	ldbu	r5,-19(fp)
  8185e8:	e13ffc17 	ldw	r4,-16(fp)
  8185ec:	08182600 	call	818260 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  8185f0:	e0bffb03 	ldbu	r2,-20(fp)
  8185f4:	10bfffc4 	addi	r2,r2,-1
  8185f8:	e0bffb05 	stb	r2,-20(fp)
  8185fc:	e0bffb03 	ldbu	r2,-20(fp)
  818600:	10803fd8 	cmpnei	r2,r2,255
  818604:	103ff71e 	bne	r2,zero,8185e4 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  818608:	e037883a 	mov	sp,fp
  81860c:	dfc00117 	ldw	ra,4(sp)
  818610:	df000017 	ldw	fp,0(sp)
  818614:	dec00204 	addi	sp,sp,8
  818618:	f800283a 	ret

0081861c <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  81861c:	defff904 	addi	sp,sp,-28
  818620:	dfc00615 	stw	ra,24(sp)
  818624:	df000515 	stw	fp,20(sp)
  818628:	df000504 	addi	fp,sp,20
  81862c:	e13ffc15 	stw	r4,-16(fp)
  818630:	e17ffd15 	stw	r5,-12(fp)
  818634:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  818638:	e0bffd17 	ldw	r2,-12(fp)
  81863c:	10800a28 	cmpgeui	r2,r2,40
  818640:	1000031e 	bne	r2,zero,818650 <alt_up_character_lcd_erase_pos+0x34>
  818644:	e0bffe17 	ldw	r2,-8(fp)
  818648:	108000b0 	cmpltui	r2,r2,2
  81864c:	1000031e 	bne	r2,zero,81865c <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  818650:	00bfffc4 	movi	r2,-1
  818654:	e0bfff15 	stw	r2,-4(fp)
  818658:	00000e06 	br	818694 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  81865c:	e13ffd17 	ldw	r4,-12(fp)
  818660:	e17ffe17 	ldw	r5,-8(fp)
  818664:	08181e40 	call	8181e4 <get_DDRAM_addr>
  818668:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  81866c:	e17ffb03 	ldbu	r5,-20(fp)
  818670:	e13ffc17 	ldw	r4,-16(fp)
  818674:	08182600 	call	818260 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
  818678:	e0bffc17 	ldw	r2,-16(fp)
  81867c:	10800a17 	ldw	r2,40(r2)
  818680:	10800044 	addi	r2,r2,1
  818684:	1007883a 	mov	r3,r2
  818688:	00800084 	movi	r2,2
  81868c:	18800025 	stbio	r2,0(r3)
	return 0;
  818690:	e03fff15 	stw	zero,-4(fp)
  818694:	e0bfff17 	ldw	r2,-4(fp)
}
  818698:	e037883a 	mov	sp,fp
  81869c:	dfc00117 	ldw	ra,4(sp)
  8186a0:	df000017 	ldw	fp,0(sp)
  8186a4:	dec00204 	addi	sp,sp,8
  8186a8:	f800283a 	ret

008186ac <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  8186ac:	defffd04 	addi	sp,sp,-12
  8186b0:	dfc00215 	stw	ra,8(sp)
  8186b4:	df000115 	stw	fp,4(sp)
  8186b8:	df000104 	addi	fp,sp,4
  8186bc:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  8186c0:	e13fff17 	ldw	r4,-4(fp)
  8186c4:	01400304 	movi	r5,12
  8186c8:	08182600 	call	818260 <alt_up_character_lcd_send_cmd>
}
  8186cc:	e037883a 	mov	sp,fp
  8186d0:	dfc00117 	ldw	ra,4(sp)
  8186d4:	df000017 	ldw	fp,0(sp)
  8186d8:	dec00204 	addi	sp,sp,8
  8186dc:	f800283a 	ret

008186e0 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  8186e0:	defffd04 	addi	sp,sp,-12
  8186e4:	dfc00215 	stw	ra,8(sp)
  8186e8:	df000115 	stw	fp,4(sp)
  8186ec:	df000104 	addi	fp,sp,4
  8186f0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  8186f4:	e13fff17 	ldw	r4,-4(fp)
  8186f8:	014003c4 	movi	r5,15
  8186fc:	08182600 	call	818260 <alt_up_character_lcd_send_cmd>
}
  818700:	e037883a 	mov	sp,fp
  818704:	dfc00117 	ldw	ra,4(sp)
  818708:	df000017 	ldw	fp,0(sp)
  81870c:	dec00204 	addi	sp,sp,8
  818710:	f800283a 	ret

00818714 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  818714:	defff404 	addi	sp,sp,-48
  818718:	df000b15 	stw	fp,44(sp)
  81871c:	df000b04 	addi	fp,sp,44
  818720:	e13ffb15 	stw	r4,-20(fp)
  818724:	e17ffc15 	stw	r5,-16(fp)
  818728:	e1bffd15 	stw	r6,-12(fp)
  81872c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  818730:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  818734:	008020b4 	movhi	r2,130
  818738:	10b7c304 	addi	r2,r2,-8436
  81873c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  818740:	1005003a 	cmpeq	r2,r2,zero
  818744:	1000411e 	bne	r2,zero,81884c <alt_alarm_start+0x138>
  {
    if (alarm)
  818748:	e0bffb17 	ldw	r2,-20(fp)
  81874c:	1005003a 	cmpeq	r2,r2,zero
  818750:	10003b1e 	bne	r2,zero,818840 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  818754:	e0fffb17 	ldw	r3,-20(fp)
  818758:	e0bffd17 	ldw	r2,-12(fp)
  81875c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  818760:	e0fffb17 	ldw	r3,-20(fp)
  818764:	e0bffe17 	ldw	r2,-8(fp)
  818768:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81876c:	0005303a 	rdctl	r2,status
  818770:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818774:	e0fff817 	ldw	r3,-32(fp)
  818778:	00bfff84 	movi	r2,-2
  81877c:	1884703a 	and	r2,r3,r2
  818780:	1001703a 	wrctl	status,r2
  
  return context;
  818784:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  818788:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  81878c:	008020b4 	movhi	r2,130
  818790:	10b7c404 	addi	r2,r2,-8432
  818794:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  818798:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  81879c:	e0fffc17 	ldw	r3,-16(fp)
  8187a0:	e0bff917 	ldw	r2,-28(fp)
  8187a4:	1885883a 	add	r2,r3,r2
  8187a8:	10c00044 	addi	r3,r2,1
  8187ac:	e0bffb17 	ldw	r2,-20(fp)
  8187b0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  8187b4:	e0bffb17 	ldw	r2,-20(fp)
  8187b8:	10c00217 	ldw	r3,8(r2)
  8187bc:	e0bff917 	ldw	r2,-28(fp)
  8187c0:	1880042e 	bgeu	r3,r2,8187d4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  8187c4:	e0fffb17 	ldw	r3,-20(fp)
  8187c8:	00800044 	movi	r2,1
  8187cc:	18800405 	stb	r2,16(r3)
  8187d0:	00000206 	br	8187dc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  8187d4:	e0bffb17 	ldw	r2,-20(fp)
  8187d8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  8187dc:	e0fffb17 	ldw	r3,-20(fp)
  8187e0:	008020b4 	movhi	r2,130
  8187e4:	10b0c004 	addi	r2,r2,-15616
  8187e8:	e0bff615 	stw	r2,-40(fp)
  8187ec:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8187f0:	e0fff717 	ldw	r3,-36(fp)
  8187f4:	e0bff617 	ldw	r2,-40(fp)
  8187f8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  8187fc:	e0bff617 	ldw	r2,-40(fp)
  818800:	10c00017 	ldw	r3,0(r2)
  818804:	e0bff717 	ldw	r2,-36(fp)
  818808:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81880c:	e0bff617 	ldw	r2,-40(fp)
  818810:	10c00017 	ldw	r3,0(r2)
  818814:	e0bff717 	ldw	r2,-36(fp)
  818818:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81881c:	e0fff617 	ldw	r3,-40(fp)
  818820:	e0bff717 	ldw	r2,-36(fp)
  818824:	18800015 	stw	r2,0(r3)
  818828:	e0bffa17 	ldw	r2,-24(fp)
  81882c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818830:	e0bff517 	ldw	r2,-44(fp)
  818834:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  818838:	e03fff15 	stw	zero,-4(fp)
  81883c:	00000506 	br	818854 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  818840:	00bffa84 	movi	r2,-22
  818844:	e0bfff15 	stw	r2,-4(fp)
  818848:	00000206 	br	818854 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  81884c:	00bfde84 	movi	r2,-134
  818850:	e0bfff15 	stw	r2,-4(fp)
  818854:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  818858:	e037883a 	mov	sp,fp
  81885c:	df000017 	ldw	fp,0(sp)
  818860:	dec00104 	addi	sp,sp,4
  818864:	f800283a 	ret

00818868 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  818868:	defffa04 	addi	sp,sp,-24
  81886c:	dfc00515 	stw	ra,20(sp)
  818870:	df000415 	stw	fp,16(sp)
  818874:	df000404 	addi	fp,sp,16
  818878:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
  81887c:	00800244 	movi	r2,9
  818880:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  818884:	e13ffc17 	ldw	r4,-16(fp)
  818888:	014003f4 	movhi	r5,15
  81888c:	29509004 	addi	r5,r5,16960
  818890:	080535c0 	call	80535c <__mulsi3>
  818894:	100b883a 	mov	r5,r2
  818898:	0100bef4 	movhi	r4,763
  81889c:	213c2004 	addi	r4,r4,-3968
  8188a0:	080534c0 	call	80534c <__udivsi3>
  8188a4:	100b883a 	mov	r5,r2
  8188a8:	01200034 	movhi	r4,32768
  8188ac:	213fffc4 	addi	r4,r4,-1
  8188b0:	080534c0 	call	80534c <__udivsi3>
  8188b4:	100b883a 	mov	r5,r2
  8188b8:	e13fff17 	ldw	r4,-4(fp)
  8188bc:	080534c0 	call	80534c <__udivsi3>
  8188c0:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  8188c4:	e0bffd17 	ldw	r2,-12(fp)
  8188c8:	1005003a 	cmpeq	r2,r2,zero
  8188cc:	10002a1e 	bne	r2,zero,818978 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
  8188d0:	e03ffe15 	stw	zero,-8(fp)
  8188d4:	00001706 	br	818934 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  8188d8:	00a00034 	movhi	r2,32768
  8188dc:	10bfffc4 	addi	r2,r2,-1
  8188e0:	10bfffc4 	addi	r2,r2,-1
  8188e4:	103ffe1e 	bne	r2,zero,8188e0 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  8188e8:	e13ffc17 	ldw	r4,-16(fp)
  8188ec:	014003f4 	movhi	r5,15
  8188f0:	29509004 	addi	r5,r5,16960
  8188f4:	080535c0 	call	80535c <__mulsi3>
  8188f8:	100b883a 	mov	r5,r2
  8188fc:	0100bef4 	movhi	r4,763
  818900:	213c2004 	addi	r4,r4,-3968
  818904:	080534c0 	call	80534c <__udivsi3>
  818908:	100b883a 	mov	r5,r2
  81890c:	01200034 	movhi	r4,32768
  818910:	213fffc4 	addi	r4,r4,-1
  818914:	080534c0 	call	80534c <__udivsi3>
  818918:	1007883a 	mov	r3,r2
  81891c:	e0bfff17 	ldw	r2,-4(fp)
  818920:	10c5c83a 	sub	r2,r2,r3
  818924:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  818928:	e0bffe17 	ldw	r2,-8(fp)
  81892c:	10800044 	addi	r2,r2,1
  818930:	e0bffe15 	stw	r2,-8(fp)
  818934:	e0fffe17 	ldw	r3,-8(fp)
  818938:	e0bffd17 	ldw	r2,-12(fp)
  81893c:	18bfe616 	blt	r3,r2,8188d8 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  818940:	e13ffc17 	ldw	r4,-16(fp)
  818944:	014003f4 	movhi	r5,15
  818948:	29509004 	addi	r5,r5,16960
  81894c:	080535c0 	call	80535c <__mulsi3>
  818950:	100b883a 	mov	r5,r2
  818954:	0100bef4 	movhi	r4,763
  818958:	213c2004 	addi	r4,r4,-3968
  81895c:	080534c0 	call	80534c <__udivsi3>
  818960:	1009883a 	mov	r4,r2
  818964:	e17fff17 	ldw	r5,-4(fp)
  818968:	080535c0 	call	80535c <__mulsi3>
  81896c:	10bfffc4 	addi	r2,r2,-1
  818970:	103ffe1e 	bne	r2,zero,81896c <alt_busy_sleep+0x104>
  818974:	00000d06 	br	8189ac <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  818978:	e13ffc17 	ldw	r4,-16(fp)
  81897c:	014003f4 	movhi	r5,15
  818980:	29509004 	addi	r5,r5,16960
  818984:	080535c0 	call	80535c <__mulsi3>
  818988:	100b883a 	mov	r5,r2
  81898c:	0100bef4 	movhi	r4,763
  818990:	213c2004 	addi	r4,r4,-3968
  818994:	080534c0 	call	80534c <__udivsi3>
  818998:	1009883a 	mov	r4,r2
  81899c:	e17fff17 	ldw	r5,-4(fp)
  8189a0:	080535c0 	call	80535c <__mulsi3>
  8189a4:	10bfffc4 	addi	r2,r2,-1
  8189a8:	00bffe16 	blt	zero,r2,8189a4 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  8189ac:	0005883a 	mov	r2,zero
}
  8189b0:	e037883a 	mov	sp,fp
  8189b4:	dfc00117 	ldw	ra,4(sp)
  8189b8:	df000017 	ldw	fp,0(sp)
  8189bc:	dec00204 	addi	sp,sp,8
  8189c0:	f800283a 	ret

008189c4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  8189c4:	deffff04 	addi	sp,sp,-4
  8189c8:	df000015 	stw	fp,0(sp)
  8189cc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  8189d0:	e037883a 	mov	sp,fp
  8189d4:	df000017 	ldw	fp,0(sp)
  8189d8:	dec00104 	addi	sp,sp,4
  8189dc:	f800283a 	ret

008189e0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8189e0:	defff904 	addi	sp,sp,-28
  8189e4:	dfc00615 	stw	ra,24(sp)
  8189e8:	df000515 	stw	fp,20(sp)
  8189ec:	df000504 	addi	fp,sp,20
  8189f0:	e13ffd15 	stw	r4,-12(fp)
  8189f4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8189f8:	e0bffd17 	ldw	r2,-12(fp)
  8189fc:	1005003a 	cmpeq	r2,r2,zero
  818a00:	1000041e 	bne	r2,zero,818a14 <alt_dev_llist_insert+0x34>
  818a04:	e0bffd17 	ldw	r2,-12(fp)
  818a08:	10800217 	ldw	r2,8(r2)
  818a0c:	1004c03a 	cmpne	r2,r2,zero
  818a10:	1000071e 	bne	r2,zero,818a30 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  818a14:	0818a940 	call	818a94 <alt_get_errno>
  818a18:	1007883a 	mov	r3,r2
  818a1c:	00800584 	movi	r2,22
  818a20:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  818a24:	00bffa84 	movi	r2,-22
  818a28:	e0bfff15 	stw	r2,-4(fp)
  818a2c:	00001306 	br	818a7c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  818a30:	e0fffd17 	ldw	r3,-12(fp)
  818a34:	e0bffe17 	ldw	r2,-8(fp)
  818a38:	e0bffb15 	stw	r2,-20(fp)
  818a3c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  818a40:	e0fffc17 	ldw	r3,-16(fp)
  818a44:	e0bffb17 	ldw	r2,-20(fp)
  818a48:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  818a4c:	e0bffb17 	ldw	r2,-20(fp)
  818a50:	10c00017 	ldw	r3,0(r2)
  818a54:	e0bffc17 	ldw	r2,-16(fp)
  818a58:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  818a5c:	e0bffb17 	ldw	r2,-20(fp)
  818a60:	10c00017 	ldw	r3,0(r2)
  818a64:	e0bffc17 	ldw	r2,-16(fp)
  818a68:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  818a6c:	e0fffb17 	ldw	r3,-20(fp)
  818a70:	e0bffc17 	ldw	r2,-16(fp)
  818a74:	18800015 	stw	r2,0(r3)

  return 0;  
  818a78:	e03fff15 	stw	zero,-4(fp)
  818a7c:	e0bfff17 	ldw	r2,-4(fp)
}
  818a80:	e037883a 	mov	sp,fp
  818a84:	dfc00117 	ldw	ra,4(sp)
  818a88:	df000017 	ldw	fp,0(sp)
  818a8c:	dec00204 	addi	sp,sp,8
  818a90:	f800283a 	ret

00818a94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  818a94:	defffd04 	addi	sp,sp,-12
  818a98:	dfc00215 	stw	ra,8(sp)
  818a9c:	df000115 	stw	fp,4(sp)
  818aa0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  818aa4:	008020b4 	movhi	r2,130
  818aa8:	10b09e04 	addi	r2,r2,-15752
  818aac:	10800017 	ldw	r2,0(r2)
  818ab0:	1005003a 	cmpeq	r2,r2,zero
  818ab4:	1000061e 	bne	r2,zero,818ad0 <alt_get_errno+0x3c>
  818ab8:	008020b4 	movhi	r2,130
  818abc:	10b09e04 	addi	r2,r2,-15752
  818ac0:	10800017 	ldw	r2,0(r2)
  818ac4:	103ee83a 	callr	r2
  818ac8:	e0bfff15 	stw	r2,-4(fp)
  818acc:	00000306 	br	818adc <alt_get_errno+0x48>
  818ad0:	008020b4 	movhi	r2,130
  818ad4:	10b7a504 	addi	r2,r2,-8556
  818ad8:	e0bfff15 	stw	r2,-4(fp)
  818adc:	e0bfff17 	ldw	r2,-4(fp)
}
  818ae0:	e037883a 	mov	sp,fp
  818ae4:	dfc00117 	ldw	ra,4(sp)
  818ae8:	df000017 	ldw	fp,0(sp)
  818aec:	dec00204 	addi	sp,sp,8
  818af0:	f800283a 	ret

00818af4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  818af4:	defffd04 	addi	sp,sp,-12
  818af8:	dfc00215 	stw	ra,8(sp)
  818afc:	df000115 	stw	fp,4(sp)
  818b00:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  818b04:	00bfff04 	movi	r2,-4
  818b08:	00c020b4 	movhi	r3,130
  818b0c:	18e81604 	addi	r3,r3,-24488
  818b10:	1885883a 	add	r2,r3,r2
  818b14:	e0bfff15 	stw	r2,-4(fp)
  818b18:	00000606 	br	818b34 <_do_ctors+0x40>
        (*ctor) (); 
  818b1c:	e0bfff17 	ldw	r2,-4(fp)
  818b20:	10800017 	ldw	r2,0(r2)
  818b24:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  818b28:	e0bfff17 	ldw	r2,-4(fp)
  818b2c:	10bfff04 	addi	r2,r2,-4
  818b30:	e0bfff15 	stw	r2,-4(fp)
  818b34:	e0ffff17 	ldw	r3,-4(fp)
  818b38:	008020b4 	movhi	r2,130
  818b3c:	10a81504 	addi	r2,r2,-24492
  818b40:	18bff62e 	bgeu	r3,r2,818b1c <_do_ctors+0x28>
        (*ctor) (); 
}
  818b44:	e037883a 	mov	sp,fp
  818b48:	dfc00117 	ldw	ra,4(sp)
  818b4c:	df000017 	ldw	fp,0(sp)
  818b50:	dec00204 	addi	sp,sp,8
  818b54:	f800283a 	ret

00818b58 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  818b58:	defffd04 	addi	sp,sp,-12
  818b5c:	dfc00215 	stw	ra,8(sp)
  818b60:	df000115 	stw	fp,4(sp)
  818b64:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  818b68:	00bfff04 	movi	r2,-4
  818b6c:	00c020b4 	movhi	r3,130
  818b70:	18e81604 	addi	r3,r3,-24488
  818b74:	1885883a 	add	r2,r3,r2
  818b78:	e0bfff15 	stw	r2,-4(fp)
  818b7c:	00000606 	br	818b98 <_do_dtors+0x40>
        (*dtor) (); 
  818b80:	e0bfff17 	ldw	r2,-4(fp)
  818b84:	10800017 	ldw	r2,0(r2)
  818b88:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  818b8c:	e0bfff17 	ldw	r2,-4(fp)
  818b90:	10bfff04 	addi	r2,r2,-4
  818b94:	e0bfff15 	stw	r2,-4(fp)
  818b98:	e0ffff17 	ldw	r3,-4(fp)
  818b9c:	008020b4 	movhi	r2,130
  818ba0:	10a81604 	addi	r2,r2,-24488
  818ba4:	18bff62e 	bgeu	r3,r2,818b80 <_do_dtors+0x28>
        (*dtor) (); 
}
  818ba8:	e037883a 	mov	sp,fp
  818bac:	dfc00117 	ldw	ra,4(sp)
  818bb0:	df000017 	ldw	fp,0(sp)
  818bb4:	dec00204 	addi	sp,sp,8
  818bb8:	f800283a 	ret

00818bbc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  818bbc:	defff904 	addi	sp,sp,-28
  818bc0:	dfc00615 	stw	ra,24(sp)
  818bc4:	df000515 	stw	fp,20(sp)
  818bc8:	df000504 	addi	fp,sp,20
  818bcc:	e13ffd15 	stw	r4,-12(fp)
  818bd0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  818bd4:	e0bffe17 	ldw	r2,-8(fp)
  818bd8:	10800017 	ldw	r2,0(r2)
  818bdc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  818be0:	e13ffd17 	ldw	r4,-12(fp)
  818be4:	0805ddc0 	call	805ddc <strlen>
  818be8:	10800044 	addi	r2,r2,1
  818bec:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  818bf0:	00000d06 	br	818c28 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  818bf4:	e0bffc17 	ldw	r2,-16(fp)
  818bf8:	11000217 	ldw	r4,8(r2)
  818bfc:	e1bffb17 	ldw	r6,-20(fp)
  818c00:	e17ffd17 	ldw	r5,-12(fp)
  818c04:	0819c8c0 	call	819c8c <memcmp>
  818c08:	1004c03a 	cmpne	r2,r2,zero
  818c0c:	1000031e 	bne	r2,zero,818c1c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  818c10:	e0bffc17 	ldw	r2,-16(fp)
  818c14:	e0bfff15 	stw	r2,-4(fp)
  818c18:	00000706 	br	818c38 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  818c1c:	e0bffc17 	ldw	r2,-16(fp)
  818c20:	10800017 	ldw	r2,0(r2)
  818c24:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  818c28:	e0fffe17 	ldw	r3,-8(fp)
  818c2c:	e0bffc17 	ldw	r2,-16(fp)
  818c30:	10fff01e 	bne	r2,r3,818bf4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  818c34:	e03fff15 	stw	zero,-4(fp)
  818c38:	e0bfff17 	ldw	r2,-4(fp)
}
  818c3c:	e037883a 	mov	sp,fp
  818c40:	dfc00117 	ldw	ra,4(sp)
  818c44:	df000017 	ldw	fp,0(sp)
  818c48:	dec00204 	addi	sp,sp,8
  818c4c:	f800283a 	ret

00818c50 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  818c50:	deffff04 	addi	sp,sp,-4
  818c54:	df000015 	stw	fp,0(sp)
  818c58:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  818c5c:	e037883a 	mov	sp,fp
  818c60:	df000017 	ldw	fp,0(sp)
  818c64:	dec00104 	addi	sp,sp,4
  818c68:	f800283a 	ret

00818c6c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  818c6c:	defff904 	addi	sp,sp,-28
  818c70:	dfc00615 	stw	ra,24(sp)
  818c74:	df000515 	stw	fp,20(sp)
  818c78:	df000504 	addi	fp,sp,20
  818c7c:	e13ffc15 	stw	r4,-16(fp)
  818c80:	e17ffd15 	stw	r5,-12(fp)
  818c84:	e1bffe15 	stw	r6,-8(fp)
  818c88:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  818c8c:	e0800217 	ldw	r2,8(fp)
  818c90:	d8800015 	stw	r2,0(sp)
  818c94:	e13ffc17 	ldw	r4,-16(fp)
  818c98:	e17ffd17 	ldw	r5,-12(fp)
  818c9c:	e1bffe17 	ldw	r6,-8(fp)
  818ca0:	e1ffff17 	ldw	r7,-4(fp)
  818ca4:	0818e400 	call	818e40 <alt_iic_isr_register>
}  
  818ca8:	e037883a 	mov	sp,fp
  818cac:	dfc00117 	ldw	ra,4(sp)
  818cb0:	df000017 	ldw	fp,0(sp)
  818cb4:	dec00204 	addi	sp,sp,8
  818cb8:	f800283a 	ret

00818cbc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  818cbc:	defff904 	addi	sp,sp,-28
  818cc0:	df000615 	stw	fp,24(sp)
  818cc4:	df000604 	addi	fp,sp,24
  818cc8:	e13ffe15 	stw	r4,-8(fp)
  818ccc:	e17fff15 	stw	r5,-4(fp)
  818cd0:	e0bfff17 	ldw	r2,-4(fp)
  818cd4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818cd8:	0005303a 	rdctl	r2,status
  818cdc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818ce0:	e0fffb17 	ldw	r3,-20(fp)
  818ce4:	00bfff84 	movi	r2,-2
  818ce8:	1884703a 	and	r2,r3,r2
  818cec:	1001703a 	wrctl	status,r2
  
  return context;
  818cf0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  818cf4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  818cf8:	e0fffc17 	ldw	r3,-16(fp)
  818cfc:	00800044 	movi	r2,1
  818d00:	10c4983a 	sll	r2,r2,r3
  818d04:	1007883a 	mov	r3,r2
  818d08:	008020b4 	movhi	r2,130
  818d0c:	10b7c204 	addi	r2,r2,-8440
  818d10:	10800017 	ldw	r2,0(r2)
  818d14:	1886b03a 	or	r3,r3,r2
  818d18:	008020b4 	movhi	r2,130
  818d1c:	10b7c204 	addi	r2,r2,-8440
  818d20:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  818d24:	008020b4 	movhi	r2,130
  818d28:	10b7c204 	addi	r2,r2,-8440
  818d2c:	10800017 	ldw	r2,0(r2)
  818d30:	100170fa 	wrctl	ienable,r2
  818d34:	e0bffd17 	ldw	r2,-12(fp)
  818d38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818d3c:	e0bffa17 	ldw	r2,-24(fp)
  818d40:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  818d44:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  818d48:	e037883a 	mov	sp,fp
  818d4c:	df000017 	ldw	fp,0(sp)
  818d50:	dec00104 	addi	sp,sp,4
  818d54:	f800283a 	ret

00818d58 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  818d58:	defff904 	addi	sp,sp,-28
  818d5c:	df000615 	stw	fp,24(sp)
  818d60:	df000604 	addi	fp,sp,24
  818d64:	e13ffe15 	stw	r4,-8(fp)
  818d68:	e17fff15 	stw	r5,-4(fp)
  818d6c:	e0bfff17 	ldw	r2,-4(fp)
  818d70:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818d74:	0005303a 	rdctl	r2,status
  818d78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818d7c:	e0fffb17 	ldw	r3,-20(fp)
  818d80:	00bfff84 	movi	r2,-2
  818d84:	1884703a 	and	r2,r3,r2
  818d88:	1001703a 	wrctl	status,r2
  
  return context;
  818d8c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  818d90:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  818d94:	e0fffc17 	ldw	r3,-16(fp)
  818d98:	00800044 	movi	r2,1
  818d9c:	10c4983a 	sll	r2,r2,r3
  818da0:	0084303a 	nor	r2,zero,r2
  818da4:	1007883a 	mov	r3,r2
  818da8:	008020b4 	movhi	r2,130
  818dac:	10b7c204 	addi	r2,r2,-8440
  818db0:	10800017 	ldw	r2,0(r2)
  818db4:	1886703a 	and	r3,r3,r2
  818db8:	008020b4 	movhi	r2,130
  818dbc:	10b7c204 	addi	r2,r2,-8440
  818dc0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  818dc4:	008020b4 	movhi	r2,130
  818dc8:	10b7c204 	addi	r2,r2,-8440
  818dcc:	10800017 	ldw	r2,0(r2)
  818dd0:	100170fa 	wrctl	ienable,r2
  818dd4:	e0bffd17 	ldw	r2,-12(fp)
  818dd8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818ddc:	e0bffa17 	ldw	r2,-24(fp)
  818de0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  818de4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  818de8:	e037883a 	mov	sp,fp
  818dec:	df000017 	ldw	fp,0(sp)
  818df0:	dec00104 	addi	sp,sp,4
  818df4:	f800283a 	ret

00818df8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  818df8:	defffc04 	addi	sp,sp,-16
  818dfc:	df000315 	stw	fp,12(sp)
  818e00:	df000304 	addi	fp,sp,12
  818e04:	e13ffe15 	stw	r4,-8(fp)
  818e08:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  818e0c:	000530fa 	rdctl	r2,ienable
  818e10:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  818e14:	e0ffff17 	ldw	r3,-4(fp)
  818e18:	00800044 	movi	r2,1
  818e1c:	10c4983a 	sll	r2,r2,r3
  818e20:	1007883a 	mov	r3,r2
  818e24:	e0bffd17 	ldw	r2,-12(fp)
  818e28:	1884703a 	and	r2,r3,r2
  818e2c:	1004c03a 	cmpne	r2,r2,zero
}
  818e30:	e037883a 	mov	sp,fp
  818e34:	df000017 	ldw	fp,0(sp)
  818e38:	dec00104 	addi	sp,sp,4
  818e3c:	f800283a 	ret

00818e40 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  818e40:	defff404 	addi	sp,sp,-48
  818e44:	dfc00b15 	stw	ra,44(sp)
  818e48:	df000a15 	stw	fp,40(sp)
  818e4c:	df000a04 	addi	fp,sp,40
  818e50:	e13ffb15 	stw	r4,-20(fp)
  818e54:	e17ffc15 	stw	r5,-16(fp)
  818e58:	e1bffd15 	stw	r6,-12(fp)
  818e5c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  818e60:	00bffa84 	movi	r2,-22
  818e64:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  818e68:	e0bffc17 	ldw	r2,-16(fp)
  818e6c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  818e70:	e0bff917 	ldw	r2,-28(fp)
  818e74:	10800808 	cmpgei	r2,r2,32
  818e78:	1000291e 	bne	r2,zero,818f20 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818e7c:	0005303a 	rdctl	r2,status
  818e80:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818e84:	e0fff717 	ldw	r3,-36(fp)
  818e88:	00bfff84 	movi	r2,-2
  818e8c:	1884703a 	and	r2,r3,r2
  818e90:	1001703a 	wrctl	status,r2
  
  return context;
  818e94:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  818e98:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  818e9c:	e0bff917 	ldw	r2,-28(fp)
  818ea0:	00c020b4 	movhi	r3,130
  818ea4:	18d45804 	addi	r3,r3,20832
  818ea8:	100490fa 	slli	r2,r2,3
  818eac:	10c7883a 	add	r3,r2,r3
  818eb0:	e0bffd17 	ldw	r2,-12(fp)
  818eb4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  818eb8:	e0bff917 	ldw	r2,-28(fp)
  818ebc:	00c020b4 	movhi	r3,130
  818ec0:	18d45804 	addi	r3,r3,20832
  818ec4:	100490fa 	slli	r2,r2,3
  818ec8:	10c5883a 	add	r2,r2,r3
  818ecc:	10c00104 	addi	r3,r2,4
  818ed0:	e0bffe17 	ldw	r2,-8(fp)
  818ed4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  818ed8:	e0bffd17 	ldw	r2,-12(fp)
  818edc:	1005003a 	cmpeq	r2,r2,zero
  818ee0:	1000051e 	bne	r2,zero,818ef8 <alt_iic_isr_register+0xb8>
  818ee4:	e17ff917 	ldw	r5,-28(fp)
  818ee8:	e13ffb17 	ldw	r4,-20(fp)
  818eec:	0818cbc0 	call	818cbc <alt_ic_irq_enable>
  818ef0:	e0bfff15 	stw	r2,-4(fp)
  818ef4:	00000406 	br	818f08 <alt_iic_isr_register+0xc8>
  818ef8:	e17ff917 	ldw	r5,-28(fp)
  818efc:	e13ffb17 	ldw	r4,-20(fp)
  818f00:	0818d580 	call	818d58 <alt_ic_irq_disable>
  818f04:	e0bfff15 	stw	r2,-4(fp)
  818f08:	e0bfff17 	ldw	r2,-4(fp)
  818f0c:	e0bffa15 	stw	r2,-24(fp)
  818f10:	e0bff817 	ldw	r2,-32(fp)
  818f14:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818f18:	e0bff617 	ldw	r2,-40(fp)
  818f1c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  818f20:	e0bffa17 	ldw	r2,-24(fp)
}
  818f24:	e037883a 	mov	sp,fp
  818f28:	dfc00117 	ldw	ra,4(sp)
  818f2c:	df000017 	ldw	fp,0(sp)
  818f30:	dec00204 	addi	sp,sp,8
  818f34:	f800283a 	ret

00818f38 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  818f38:	defff804 	addi	sp,sp,-32
  818f3c:	dfc00715 	stw	ra,28(sp)
  818f40:	df000615 	stw	fp,24(sp)
  818f44:	dc000515 	stw	r16,20(sp)
  818f48:	df000504 	addi	fp,sp,20
  818f4c:	e13ffc15 	stw	r4,-16(fp)
  818f50:	e17ffd15 	stw	r5,-12(fp)
  818f54:	e1bffe15 	stw	r6,-8(fp)
  818f58:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  818f5c:	e13ffd17 	ldw	r4,-12(fp)
  818f60:	e17ffe17 	ldw	r5,-8(fp)
  818f64:	e1bfff17 	ldw	r6,-4(fp)
  818f68:	08191800 	call	819180 <open>
  818f6c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  818f70:	e0bffb17 	ldw	r2,-20(fp)
  818f74:	1004803a 	cmplt	r2,r2,zero
  818f78:	10001f1e 	bne	r2,zero,818ff8 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  818f7c:	e13ffb17 	ldw	r4,-20(fp)
  818f80:	040020b4 	movhi	r16,130
  818f84:	842bf404 	addi	r16,r16,-20528
  818f88:	01400304 	movi	r5,12
  818f8c:	080535c0 	call	80535c <__mulsi3>
  818f90:	1405883a 	add	r2,r2,r16
  818f94:	10c00017 	ldw	r3,0(r2)
  818f98:	e0bffc17 	ldw	r2,-16(fp)
  818f9c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  818fa0:	e13ffb17 	ldw	r4,-20(fp)
  818fa4:	040020b4 	movhi	r16,130
  818fa8:	842bf404 	addi	r16,r16,-20528
  818fac:	01400304 	movi	r5,12
  818fb0:	080535c0 	call	80535c <__mulsi3>
  818fb4:	1405883a 	add	r2,r2,r16
  818fb8:	10800104 	addi	r2,r2,4
  818fbc:	10c00017 	ldw	r3,0(r2)
  818fc0:	e0bffc17 	ldw	r2,-16(fp)
  818fc4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  818fc8:	e13ffb17 	ldw	r4,-20(fp)
  818fcc:	040020b4 	movhi	r16,130
  818fd0:	842bf404 	addi	r16,r16,-20528
  818fd4:	01400304 	movi	r5,12
  818fd8:	080535c0 	call	80535c <__mulsi3>
  818fdc:	1405883a 	add	r2,r2,r16
  818fe0:	10800204 	addi	r2,r2,8
  818fe4:	10c00017 	ldw	r3,0(r2)
  818fe8:	e0bffc17 	ldw	r2,-16(fp)
  818fec:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  818ff0:	e13ffb17 	ldw	r4,-20(fp)
  818ff4:	080e8ec0 	call	80e8ec <alt_release_fd>
  }
} 
  818ff8:	e037883a 	mov	sp,fp
  818ffc:	dfc00217 	ldw	ra,8(sp)
  819000:	df000117 	ldw	fp,4(sp)
  819004:	dc000017 	ldw	r16,0(sp)
  819008:	dec00304 	addi	sp,sp,12
  81900c:	f800283a 	ret

00819010 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  819010:	defffb04 	addi	sp,sp,-20
  819014:	dfc00415 	stw	ra,16(sp)
  819018:	df000315 	stw	fp,12(sp)
  81901c:	df000304 	addi	fp,sp,12
  819020:	e13ffd15 	stw	r4,-12(fp)
  819024:	e17ffe15 	stw	r5,-8(fp)
  819028:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  81902c:	010020b4 	movhi	r4,130
  819030:	212bf704 	addi	r4,r4,-20516
  819034:	e17ffd17 	ldw	r5,-12(fp)
  819038:	01800044 	movi	r6,1
  81903c:	01c07fc4 	movi	r7,511
  819040:	0818f380 	call	818f38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  819044:	010020b4 	movhi	r4,130
  819048:	212bf404 	addi	r4,r4,-20528
  81904c:	e17ffe17 	ldw	r5,-8(fp)
  819050:	000d883a 	mov	r6,zero
  819054:	01c07fc4 	movi	r7,511
  819058:	0818f380 	call	818f38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  81905c:	010020b4 	movhi	r4,130
  819060:	212bfa04 	addi	r4,r4,-20504
  819064:	e17fff17 	ldw	r5,-4(fp)
  819068:	01800044 	movi	r6,1
  81906c:	01c07fc4 	movi	r7,511
  819070:	0818f380 	call	818f38 <alt_open_fd>
}  
  819074:	e037883a 	mov	sp,fp
  819078:	dfc00117 	ldw	ra,4(sp)
  81907c:	df000017 	ldw	fp,0(sp)
  819080:	dec00204 	addi	sp,sp,8
  819084:	f800283a 	ret

00819088 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  819088:	defffa04 	addi	sp,sp,-24
  81908c:	dfc00515 	stw	ra,20(sp)
  819090:	df000415 	stw	fp,16(sp)
  819094:	dc000315 	stw	r16,12(sp)
  819098:	df000304 	addi	fp,sp,12
  81909c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8190a0:	e0bffe17 	ldw	r2,-8(fp)
  8190a4:	10800217 	ldw	r2,8(r2)
  8190a8:	10d00034 	orhi	r3,r2,16384
  8190ac:	e0bffe17 	ldw	r2,-8(fp)
  8190b0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8190b4:	e03ffd15 	stw	zero,-12(fp)
  8190b8:	00002306 	br	819148 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8190bc:	e13ffd17 	ldw	r4,-12(fp)
  8190c0:	040020b4 	movhi	r16,130
  8190c4:	842bf404 	addi	r16,r16,-20528
  8190c8:	01400304 	movi	r5,12
  8190cc:	080535c0 	call	80535c <__mulsi3>
  8190d0:	1405883a 	add	r2,r2,r16
  8190d4:	10c00017 	ldw	r3,0(r2)
  8190d8:	e0bffe17 	ldw	r2,-8(fp)
  8190dc:	10800017 	ldw	r2,0(r2)
  8190e0:	1880161e 	bne	r3,r2,81913c <alt_file_locked+0xb4>
  8190e4:	e13ffd17 	ldw	r4,-12(fp)
  8190e8:	040020b4 	movhi	r16,130
  8190ec:	842bf404 	addi	r16,r16,-20528
  8190f0:	01400304 	movi	r5,12
  8190f4:	080535c0 	call	80535c <__mulsi3>
  8190f8:	1405883a 	add	r2,r2,r16
  8190fc:	10800204 	addi	r2,r2,8
  819100:	10800017 	ldw	r2,0(r2)
  819104:	1004403a 	cmpge	r2,r2,zero
  819108:	10000c1e 	bne	r2,zero,81913c <alt_file_locked+0xb4>
  81910c:	e13ffd17 	ldw	r4,-12(fp)
  819110:	01400304 	movi	r5,12
  819114:	080535c0 	call	80535c <__mulsi3>
  819118:	1007883a 	mov	r3,r2
  81911c:	008020b4 	movhi	r2,130
  819120:	10abf404 	addi	r2,r2,-20528
  819124:	1887883a 	add	r3,r3,r2
  819128:	e0bffe17 	ldw	r2,-8(fp)
  81912c:	18800326 	beq	r3,r2,81913c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  819130:	00bffcc4 	movi	r2,-13
  819134:	e0bfff15 	stw	r2,-4(fp)
  819138:	00000a06 	br	819164 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81913c:	e0bffd17 	ldw	r2,-12(fp)
  819140:	10800044 	addi	r2,r2,1
  819144:	e0bffd15 	stw	r2,-12(fp)
  819148:	008020b4 	movhi	r2,130
  81914c:	10b09d04 	addi	r2,r2,-15756
  819150:	10800017 	ldw	r2,0(r2)
  819154:	1007883a 	mov	r3,r2
  819158:	e0bffd17 	ldw	r2,-12(fp)
  81915c:	18bfd72e 	bgeu	r3,r2,8190bc <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  819160:	e03fff15 	stw	zero,-4(fp)
  819164:	e0bfff17 	ldw	r2,-4(fp)
}
  819168:	e037883a 	mov	sp,fp
  81916c:	dfc00217 	ldw	ra,8(sp)
  819170:	df000117 	ldw	fp,4(sp)
  819174:	dc000017 	ldw	r16,0(sp)
  819178:	dec00304 	addi	sp,sp,12
  81917c:	f800283a 	ret

00819180 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  819180:	defff404 	addi	sp,sp,-48
  819184:	dfc00b15 	stw	ra,44(sp)
  819188:	df000a15 	stw	fp,40(sp)
  81918c:	df000a04 	addi	fp,sp,40
  819190:	e13ffb15 	stw	r4,-20(fp)
  819194:	e17ffc15 	stw	r5,-16(fp)
  819198:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  81919c:	00bfffc4 	movi	r2,-1
  8191a0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  8191a4:	00bffb44 	movi	r2,-19
  8191a8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  8191ac:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8191b0:	e13ffb17 	ldw	r4,-20(fp)
  8191b4:	014020b4 	movhi	r5,130
  8191b8:	29709b04 	addi	r5,r5,-15764
  8191bc:	0818bbc0 	call	818bbc <alt_find_dev>
  8191c0:	e0bffa15 	stw	r2,-24(fp)
  8191c4:	e0bffa17 	ldw	r2,-24(fp)
  8191c8:	1004c03a 	cmpne	r2,r2,zero
  8191cc:	1000051e 	bne	r2,zero,8191e4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8191d0:	e13ffb17 	ldw	r4,-20(fp)
  8191d4:	0819a1c0 	call	819a1c <alt_find_file>
  8191d8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  8191dc:	00800044 	movi	r2,1
  8191e0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8191e4:	e0bffa17 	ldw	r2,-24(fp)
  8191e8:	1005003a 	cmpeq	r2,r2,zero
  8191ec:	1000311e 	bne	r2,zero,8192b4 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  8191f0:	e13ffa17 	ldw	r4,-24(fp)
  8191f4:	0819b3c0 	call	819b3c <alt_get_fd>
  8191f8:	e0bff815 	stw	r2,-32(fp)
  8191fc:	e0bff817 	ldw	r2,-32(fp)
  819200:	1004403a 	cmpge	r2,r2,zero
  819204:	1000031e 	bne	r2,zero,819214 <open+0x94>
    {
      status = index;
  819208:	e0bff817 	ldw	r2,-32(fp)
  81920c:	e0bff715 	stw	r2,-36(fp)
  819210:	00002a06 	br	8192bc <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  819214:	e13ff817 	ldw	r4,-32(fp)
  819218:	01400304 	movi	r5,12
  81921c:	080535c0 	call	80535c <__mulsi3>
  819220:	1007883a 	mov	r3,r2
  819224:	008020b4 	movhi	r2,130
  819228:	10abf404 	addi	r2,r2,-20528
  81922c:	1885883a 	add	r2,r3,r2
  819230:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  819234:	e0fffc17 	ldw	r3,-16(fp)
  819238:	00900034 	movhi	r2,16384
  81923c:	10bfffc4 	addi	r2,r2,-1
  819240:	1886703a 	and	r3,r3,r2
  819244:	e0bff917 	ldw	r2,-28(fp)
  819248:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81924c:	e0bff617 	ldw	r2,-40(fp)
  819250:	1004c03a 	cmpne	r2,r2,zero
  819254:	1000061e 	bne	r2,zero,819270 <open+0xf0>
  819258:	e13ff917 	ldw	r4,-28(fp)
  81925c:	08190880 	call	819088 <alt_file_locked>
  819260:	e0bff715 	stw	r2,-36(fp)
  819264:	e0bff717 	ldw	r2,-36(fp)
  819268:	1004803a 	cmplt	r2,r2,zero
  81926c:	1000131e 	bne	r2,zero,8192bc <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  819270:	e0bffa17 	ldw	r2,-24(fp)
  819274:	10800317 	ldw	r2,12(r2)
  819278:	1005003a 	cmpeq	r2,r2,zero
  81927c:	1000091e 	bne	r2,zero,8192a4 <open+0x124>
  819280:	e0bffa17 	ldw	r2,-24(fp)
  819284:	10800317 	ldw	r2,12(r2)
  819288:	e13ff917 	ldw	r4,-28(fp)
  81928c:	e17ffb17 	ldw	r5,-20(fp)
  819290:	e1bffc17 	ldw	r6,-16(fp)
  819294:	e1fffd17 	ldw	r7,-12(fp)
  819298:	103ee83a 	callr	r2
  81929c:	e0bfff15 	stw	r2,-4(fp)
  8192a0:	00000106 	br	8192a8 <open+0x128>
  8192a4:	e03fff15 	stw	zero,-4(fp)
  8192a8:	e0bfff17 	ldw	r2,-4(fp)
  8192ac:	e0bff715 	stw	r2,-36(fp)
  8192b0:	00000206 	br	8192bc <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  8192b4:	00bffb44 	movi	r2,-19
  8192b8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8192bc:	e0bff717 	ldw	r2,-36(fp)
  8192c0:	1004403a 	cmpge	r2,r2,zero
  8192c4:	1000091e 	bne	r2,zero,8192ec <open+0x16c>
  {
    alt_release_fd (index);  
  8192c8:	e13ff817 	ldw	r4,-32(fp)
  8192cc:	080e8ec0 	call	80e8ec <alt_release_fd>
    ALT_ERRNO = -status;
  8192d0:	081930c0 	call	81930c <alt_get_errno>
  8192d4:	e0fff717 	ldw	r3,-36(fp)
  8192d8:	00c7c83a 	sub	r3,zero,r3
  8192dc:	10c00015 	stw	r3,0(r2)
    return -1;
  8192e0:	00bfffc4 	movi	r2,-1
  8192e4:	e0bffe15 	stw	r2,-8(fp)
  8192e8:	00000206 	br	8192f4 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  8192ec:	e0bff817 	ldw	r2,-32(fp)
  8192f0:	e0bffe15 	stw	r2,-8(fp)
  8192f4:	e0bffe17 	ldw	r2,-8(fp)
}
  8192f8:	e037883a 	mov	sp,fp
  8192fc:	dfc00117 	ldw	ra,4(sp)
  819300:	df000017 	ldw	fp,0(sp)
  819304:	dec00204 	addi	sp,sp,8
  819308:	f800283a 	ret

0081930c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81930c:	defffd04 	addi	sp,sp,-12
  819310:	dfc00215 	stw	ra,8(sp)
  819314:	df000115 	stw	fp,4(sp)
  819318:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81931c:	008020b4 	movhi	r2,130
  819320:	10b09e04 	addi	r2,r2,-15752
  819324:	10800017 	ldw	r2,0(r2)
  819328:	1005003a 	cmpeq	r2,r2,zero
  81932c:	1000061e 	bne	r2,zero,819348 <alt_get_errno+0x3c>
  819330:	008020b4 	movhi	r2,130
  819334:	10b09e04 	addi	r2,r2,-15752
  819338:	10800017 	ldw	r2,0(r2)
  81933c:	103ee83a 	callr	r2
  819340:	e0bfff15 	stw	r2,-4(fp)
  819344:	00000306 	br	819354 <alt_get_errno+0x48>
  819348:	008020b4 	movhi	r2,130
  81934c:	10b7a504 	addi	r2,r2,-8556
  819350:	e0bfff15 	stw	r2,-4(fp)
  819354:	e0bfff17 	ldw	r2,-4(fp)
}
  819358:	e037883a 	mov	sp,fp
  81935c:	dfc00117 	ldw	ra,4(sp)
  819360:	df000017 	ldw	fp,0(sp)
  819364:	dec00204 	addi	sp,sp,8
  819368:	f800283a 	ret

0081936c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  81936c:	defffa04 	addi	sp,sp,-24
  819370:	df000515 	stw	fp,20(sp)
  819374:	df000504 	addi	fp,sp,20
  819378:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81937c:	0005303a 	rdctl	r2,status
  819380:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819384:	e0fffd17 	ldw	r3,-12(fp)
  819388:	00bfff84 	movi	r2,-2
  81938c:	1884703a 	and	r2,r3,r2
  819390:	1001703a 	wrctl	status,r2
  
  return context;
  819394:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  819398:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  81939c:	e0bfff17 	ldw	r2,-4(fp)
  8193a0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8193a4:	e0bffc17 	ldw	r2,-16(fp)
  8193a8:	10c00017 	ldw	r3,0(r2)
  8193ac:	e0bffc17 	ldw	r2,-16(fp)
  8193b0:	10800117 	ldw	r2,4(r2)
  8193b4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  8193b8:	e0bffc17 	ldw	r2,-16(fp)
  8193bc:	10c00117 	ldw	r3,4(r2)
  8193c0:	e0bffc17 	ldw	r2,-16(fp)
  8193c4:	10800017 	ldw	r2,0(r2)
  8193c8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8193cc:	e0fffc17 	ldw	r3,-16(fp)
  8193d0:	e0bffc17 	ldw	r2,-16(fp)
  8193d4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  8193d8:	e0fffc17 	ldw	r3,-16(fp)
  8193dc:	e0bffc17 	ldw	r2,-16(fp)
  8193e0:	18800015 	stw	r2,0(r3)
  8193e4:	e0bffe17 	ldw	r2,-8(fp)
  8193e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8193ec:	e0bffb17 	ldw	r2,-20(fp)
  8193f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  8193f4:	e037883a 	mov	sp,fp
  8193f8:	df000017 	ldw	fp,0(sp)
  8193fc:	dec00104 	addi	sp,sp,4
  819400:	f800283a 	ret

00819404 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  819404:	defffb04 	addi	sp,sp,-20
  819408:	dfc00415 	stw	ra,16(sp)
  81940c:	df000315 	stw	fp,12(sp)
  819410:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  819414:	d0a02e17 	ldw	r2,-32584(gp)
  819418:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  81941c:	d0a73217 	ldw	r2,-25400(gp)
  819420:	10800044 	addi	r2,r2,1
  819424:	d0a73215 	stw	r2,-25400(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  819428:	00003106 	br	8194f0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  81942c:	e0bffe17 	ldw	r2,-8(fp)
  819430:	10800017 	ldw	r2,0(r2)
  819434:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  819438:	e0bffe17 	ldw	r2,-8(fp)
  81943c:	10800403 	ldbu	r2,16(r2)
  819440:	10803fcc 	andi	r2,r2,255
  819444:	1005003a 	cmpeq	r2,r2,zero
  819448:	1000051e 	bne	r2,zero,819460 <alt_tick+0x5c>
  81944c:	d0a73217 	ldw	r2,-25400(gp)
  819450:	1004c03a 	cmpne	r2,r2,zero
  819454:	1000021e 	bne	r2,zero,819460 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  819458:	e0bffe17 	ldw	r2,-8(fp)
  81945c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  819460:	e0bffe17 	ldw	r2,-8(fp)
  819464:	10c00217 	ldw	r3,8(r2)
  819468:	d0a73217 	ldw	r2,-25400(gp)
  81946c:	10c01e36 	bltu	r2,r3,8194e8 <alt_tick+0xe4>
  819470:	e0bffe17 	ldw	r2,-8(fp)
  819474:	10800403 	ldbu	r2,16(r2)
  819478:	10803fcc 	andi	r2,r2,255
  81947c:	1004c03a 	cmpne	r2,r2,zero
  819480:	1000191e 	bne	r2,zero,8194e8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  819484:	e0bffe17 	ldw	r2,-8(fp)
  819488:	10c00317 	ldw	r3,12(r2)
  81948c:	e0bffe17 	ldw	r2,-8(fp)
  819490:	11000517 	ldw	r4,20(r2)
  819494:	183ee83a 	callr	r3
  819498:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  81949c:	e0bffd17 	ldw	r2,-12(fp)
  8194a0:	1004c03a 	cmpne	r2,r2,zero
  8194a4:	1000031e 	bne	r2,zero,8194b4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  8194a8:	e13ffe17 	ldw	r4,-8(fp)
  8194ac:	081936c0 	call	81936c <alt_alarm_stop>
  8194b0:	00000d06 	br	8194e8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  8194b4:	e0bffe17 	ldw	r2,-8(fp)
  8194b8:	10c00217 	ldw	r3,8(r2)
  8194bc:	e0bffd17 	ldw	r2,-12(fp)
  8194c0:	1887883a 	add	r3,r3,r2
  8194c4:	e0bffe17 	ldw	r2,-8(fp)
  8194c8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8194cc:	e0bffe17 	ldw	r2,-8(fp)
  8194d0:	10c00217 	ldw	r3,8(r2)
  8194d4:	d0a73217 	ldw	r2,-25400(gp)
  8194d8:	1880032e 	bgeu	r3,r2,8194e8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  8194dc:	e0fffe17 	ldw	r3,-8(fp)
  8194e0:	00800044 	movi	r2,1
  8194e4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  8194e8:	e0bfff17 	ldw	r2,-4(fp)
  8194ec:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8194f0:	d0e02e04 	addi	r3,gp,-32584
  8194f4:	e0bffe17 	ldw	r2,-8(fp)
  8194f8:	10ffcc1e 	bne	r2,r3,81942c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  8194fc:	080fd280 	call	80fd28 <OSTimeTick>
}
  819500:	e037883a 	mov	sp,fp
  819504:	dfc00117 	ldw	ra,4(sp)
  819508:	df000017 	ldw	fp,0(sp)
  81950c:	dec00204 	addi	sp,sp,8
  819510:	f800283a 	ret

00819514 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  819514:	deffff04 	addi	sp,sp,-4
  819518:	df000015 	stw	fp,0(sp)
  81951c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  819520:	000170fa 	wrctl	ienable,zero
}
  819524:	e037883a 	mov	sp,fp
  819528:	df000017 	ldw	fp,0(sp)
  81952c:	dec00104 	addi	sp,sp,4
  819530:	f800283a 	ret

00819534 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  819534:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  819538:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  81953c:	d1272b17 	ldw	r4,-25428(gp)

      stw ra,  0(sp)
  819540:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  819544:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  819548:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  81954c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  819550:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  819554:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  819558:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  81955c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  819560:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  819564:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  819568:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  81956c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  819570:	08199540 	call	819954 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  819574:	d1272617 	ldw	r4,-25448(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  819578:	d1671e07 	ldb	r5,-25480(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  81957c:	d1272b15 	stw	r4,-25428(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  819580:	d1671e45 	stb	r5,-25479(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  819584:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  819588:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  81958c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  819590:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  819594:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  819598:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  81959c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  8195a0:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  8195a4:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  8195a8:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  8195ac:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  8195b0:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  8195b4:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  8195b8:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  8195bc:	f800283a 	ret

008195c0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  8195c0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  8195c4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  8195c8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  8195cc:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  8195d0:	08199540 	call	819954 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  8195d4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  8195d8:	d4a71c45 	stb	r18,-25487(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  8195dc:	003fe506 	br	819574 <OSCtxSw+0x40>

008195e0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  8195e0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  8195e4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  8195e8:	10800054 	ori	r2,r2,1
      wrctl status, r2
  8195ec:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  8195f0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  8195f4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  8195f8:	dec00204 	addi	sp,sp,8

      callr r2
  8195fc:	103ee83a 	callr	r2

      nop
  819600:	0001883a 	nop

00819604 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  819604:	defff704 	addi	sp,sp,-36
  819608:	dfc00815 	stw	ra,32(sp)
  81960c:	df000715 	stw	fp,28(sp)
  819610:	df000704 	addi	fp,sp,28
  819614:	e13ffc15 	stw	r4,-16(fp)
  819618:	e17ffd15 	stw	r5,-12(fp)
  81961c:	e1bffe15 	stw	r6,-8(fp)
  819620:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  819624:	e0bffe17 	ldw	r2,-8(fp)
  819628:	1007883a 	mov	r3,r2
  81962c:	00bfff04 	movi	r2,-4
  819630:	1884703a 	and	r2,r3,r2
  819634:	10bf0004 	addi	r2,r2,-1024
  819638:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  81963c:	e0bff917 	ldw	r2,-28(fp)
  819640:	10000015 	stw	zero,0(r2)
  819644:	e0bff917 	ldw	r2,-28(fp)
  819648:	10c0bb04 	addi	r3,r2,748
  81964c:	e0bff917 	ldw	r2,-28(fp)
  819650:	10c00115 	stw	r3,4(r2)
  819654:	e0bff917 	ldw	r2,-28(fp)
  819658:	1080bb04 	addi	r2,r2,748
  81965c:	10c01704 	addi	r3,r2,92
  819660:	e0bff917 	ldw	r2,-28(fp)
  819664:	10c00215 	stw	r3,8(r2)
  819668:	e0bff917 	ldw	r2,-28(fp)
  81966c:	1080bb04 	addi	r2,r2,748
  819670:	10c02e04 	addi	r3,r2,184
  819674:	e0bff917 	ldw	r2,-28(fp)
  819678:	10c00315 	stw	r3,12(r2)
  81967c:	e0bff917 	ldw	r2,-28(fp)
  819680:	10000415 	stw	zero,16(r2)
  819684:	e0bff917 	ldw	r2,-28(fp)
  819688:	10800504 	addi	r2,r2,20
  81968c:	1009883a 	mov	r4,r2
  819690:	01800644 	movi	r6,25
  819694:	000b883a 	mov	r5,zero
  819698:	080b2400 	call	80b240 <memset>
  81969c:	e0bff917 	ldw	r2,-28(fp)
  8196a0:	10000c15 	stw	zero,48(r2)
  8196a4:	e0fff917 	ldw	r3,-28(fp)
  8196a8:	008020b4 	movhi	r2,130
  8196ac:	10a9e404 	addi	r2,r2,-22640
  8196b0:	18800d15 	stw	r2,52(r3)
  8196b4:	e0bff917 	ldw	r2,-28(fp)
  8196b8:	10000e15 	stw	zero,56(r2)
  8196bc:	e0bff917 	ldw	r2,-28(fp)
  8196c0:	10000f15 	stw	zero,60(r2)
  8196c4:	e0bff917 	ldw	r2,-28(fp)
  8196c8:	10001015 	stw	zero,64(r2)
  8196cc:	e0bff917 	ldw	r2,-28(fp)
  8196d0:	10001115 	stw	zero,68(r2)
  8196d4:	e0bff917 	ldw	r2,-28(fp)
  8196d8:	10001215 	stw	zero,72(r2)
  8196dc:	e0bff917 	ldw	r2,-28(fp)
  8196e0:	10001315 	stw	zero,76(r2)
  8196e4:	e0bff917 	ldw	r2,-28(fp)
  8196e8:	10001415 	stw	zero,80(r2)
  8196ec:	e0bff917 	ldw	r2,-28(fp)
  8196f0:	10001515 	stw	zero,84(r2)
  8196f4:	e0bff917 	ldw	r2,-28(fp)
  8196f8:	10001615 	stw	zero,88(r2)
  8196fc:	e0bff917 	ldw	r2,-28(fp)
  819700:	10001715 	stw	zero,92(r2)
  819704:	e0bff917 	ldw	r2,-28(fp)
  819708:	10001805 	stb	zero,96(r2)
  81970c:	e0bff917 	ldw	r2,-28(fp)
  819710:	10801f04 	addi	r2,r2,124
  819714:	10000015 	stw	zero,0(r2)
  819718:	10000115 	stw	zero,4(r2)
  81971c:	10000215 	stw	zero,8(r2)
  819720:	10000315 	stw	zero,12(r2)
  819724:	10000415 	stw	zero,16(r2)
  819728:	10000515 	stw	zero,20(r2)
  81972c:	10000615 	stw	zero,24(r2)
  819730:	10000715 	stw	zero,28(r2)
  819734:	10000815 	stw	zero,32(r2)
  819738:	e0bff917 	ldw	r2,-28(fp)
  81973c:	10002815 	stw	zero,160(r2)
  819740:	e0fff917 	ldw	r3,-28(fp)
  819744:	00800044 	movi	r2,1
  819748:	18802915 	stw	r2,164(r3)
  81974c:	18002a15 	stw	zero,168(r3)
  819750:	e0fff917 	ldw	r3,-28(fp)
  819754:	008cc384 	movi	r2,13070
  819758:	18802b0d 	sth	r2,172(r3)
  81975c:	e0fff917 	ldw	r3,-28(fp)
  819760:	00aaf344 	movi	r2,-21555
  819764:	18802b8d 	sth	r2,174(r3)
  819768:	e0fff917 	ldw	r3,-28(fp)
  81976c:	00848d04 	movi	r2,4660
  819770:	18802c0d 	sth	r2,176(r3)
  819774:	e0fff917 	ldw	r3,-28(fp)
  819778:	00b99b44 	movi	r2,-6547
  81977c:	18802c8d 	sth	r2,178(r3)
  819780:	e0fff917 	ldw	r3,-28(fp)
  819784:	00b7bb04 	movi	r2,-8468
  819788:	18802d0d 	sth	r2,180(r3)
  81978c:	e0fff917 	ldw	r3,-28(fp)
  819790:	00800144 	movi	r2,5
  819794:	18802d8d 	sth	r2,182(r3)
  819798:	e0fff917 	ldw	r3,-28(fp)
  81979c:	008002c4 	movi	r2,11
  8197a0:	18802e0d 	sth	r2,184(r3)
  8197a4:	e0bff917 	ldw	r2,-28(fp)
  8197a8:	10002f15 	stw	zero,188(r2)
  8197ac:	e0bff917 	ldw	r2,-28(fp)
  8197b0:	10003015 	stw	zero,192(r2)
  8197b4:	e0bff917 	ldw	r2,-28(fp)
  8197b8:	10003115 	stw	zero,196(r2)
  8197bc:	e0bff917 	ldw	r2,-28(fp)
  8197c0:	10003215 	stw	zero,200(r2)
  8197c4:	e0bff917 	ldw	r2,-28(fp)
  8197c8:	10003315 	stw	zero,204(r2)
  8197cc:	e0bff917 	ldw	r2,-28(fp)
  8197d0:	10003415 	stw	zero,208(r2)
  8197d4:	e0bff917 	ldw	r2,-28(fp)
  8197d8:	10003e15 	stw	zero,248(r2)
  8197dc:	e0bff917 	ldw	r2,-28(fp)
  8197e0:	10003f15 	stw	zero,252(r2)
  8197e4:	e0bff917 	ldw	r2,-28(fp)
  8197e8:	10004015 	stw	zero,256(r2)
  8197ec:	e0bff917 	ldw	r2,-28(fp)
  8197f0:	10004115 	stw	zero,260(r2)
  8197f4:	e0bff917 	ldw	r2,-28(fp)
  8197f8:	10004215 	stw	zero,264(r2)
  8197fc:	e0bff917 	ldw	r2,-28(fp)
  819800:	10004315 	stw	zero,268(r2)
  819804:	e0bff917 	ldw	r2,-28(fp)
  819808:	10004415 	stw	zero,272(r2)
  81980c:	e0bff917 	ldw	r2,-28(fp)
  819810:	10004515 	stw	zero,276(r2)
  819814:	e0bff917 	ldw	r2,-28(fp)
  819818:	10004615 	stw	zero,280(r2)
  81981c:	e0bff917 	ldw	r2,-28(fp)
  819820:	10004715 	stw	zero,284(r2)
  819824:	e0bff917 	ldw	r2,-28(fp)
  819828:	10003505 	stb	zero,212(r2)
  81982c:	e0bff917 	ldw	r2,-28(fp)
  819830:	10003705 	stb	zero,220(r2)
  819834:	e0bff917 	ldw	r2,-28(fp)
  819838:	10003d15 	stw	zero,244(r2)
  81983c:	e0bff917 	ldw	r2,-28(fp)
  819840:	10005215 	stw	zero,328(r2)
  819844:	e0bff917 	ldw	r2,-28(fp)
  819848:	10005315 	stw	zero,332(r2)
  81984c:	e0bff917 	ldw	r2,-28(fp)
  819850:	10005415 	stw	zero,336(r2)
  819854:	e0bff917 	ldw	r2,-28(fp)
  819858:	10005515 	stw	zero,340(r2)
  81985c:	e0bff917 	ldw	r2,-28(fp)
  819860:	1000b515 	stw	zero,724(r2)
  819864:	e0bff917 	ldw	r2,-28(fp)
  819868:	10007515 	stw	zero,468(r2)
  81986c:	e0bff917 	ldw	r2,-28(fp)
  819870:	1000b715 	stw	zero,732(r2)
  819874:	e0bff917 	ldw	r2,-28(fp)
  819878:	1000b815 	stw	zero,736(r2)
  81987c:	e0bff917 	ldw	r2,-28(fp)
  819880:	1000b915 	stw	zero,740(r2)
  819884:	e0bff917 	ldw	r2,-28(fp)
  819888:	1000ba15 	stw	zero,744(r2)
  81988c:	e0bff917 	ldw	r2,-28(fp)
  819890:	1080bb04 	addi	r2,r2,748
  819894:	1009883a 	mov	r4,r2
  819898:	01804504 	movi	r6,276
  81989c:	000b883a 	mov	r5,zero
  8198a0:	080b2400 	call	80b240 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  8198a4:	e0bff917 	ldw	r2,-28(fp)
  8198a8:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  8198ac:	e0bffb17 	ldw	r2,-20(fp)
  8198b0:	10bff304 	addi	r2,r2,-52
  8198b4:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  8198b8:	e0bffa17 	ldw	r2,-24(fp)
  8198bc:	10c00c04 	addi	r3,r2,48
  8198c0:	e0bffc17 	ldw	r2,-16(fp)
  8198c4:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  8198c8:	e0bffa17 	ldw	r2,-24(fp)
  8198cc:	10c00b04 	addi	r3,r2,44
  8198d0:	e0bffd17 	ldw	r2,-12(fp)
  8198d4:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  8198d8:	e0bffa17 	ldw	r2,-24(fp)
  8198dc:	10c00a04 	addi	r3,r2,40
  8198e0:	e0bff917 	ldw	r2,-28(fp)
  8198e4:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  8198e8:	008020b4 	movhi	r2,130
  8198ec:	10a57804 	addi	r2,r2,-27168
  8198f0:	10c00104 	addi	r3,r2,4
  8198f4:	e0bffa17 	ldw	r2,-24(fp)
  8198f8:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  8198fc:	e0bffa17 	ldw	r2,-24(fp)
}
  819900:	e037883a 	mov	sp,fp
  819904:	dfc00117 	ldw	ra,4(sp)
  819908:	df000017 	ldw	fp,0(sp)
  81990c:	dec00204 	addi	sp,sp,8
  819910:	f800283a 	ret

00819914 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  819914:	defffe04 	addi	sp,sp,-8
  819918:	df000115 	stw	fp,4(sp)
  81991c:	df000104 	addi	fp,sp,4
  819920:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  819924:	e037883a 	mov	sp,fp
  819928:	df000017 	ldw	fp,0(sp)
  81992c:	dec00104 	addi	sp,sp,4
  819930:	f800283a 	ret

00819934 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  819934:	defffe04 	addi	sp,sp,-8
  819938:	df000115 	stw	fp,4(sp)
  81993c:	df000104 	addi	fp,sp,4
  819940:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  819944:	e037883a 	mov	sp,fp
  819948:	df000017 	ldw	fp,0(sp)
  81994c:	dec00104 	addi	sp,sp,4
  819950:	f800283a 	ret

00819954 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  819954:	deffff04 	addi	sp,sp,-4
  819958:	df000015 	stw	fp,0(sp)
  81995c:	d839883a 	mov	fp,sp
}
  819960:	e037883a 	mov	sp,fp
  819964:	df000017 	ldw	fp,0(sp)
  819968:	dec00104 	addi	sp,sp,4
  81996c:	f800283a 	ret

00819970 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  819970:	deffff04 	addi	sp,sp,-4
  819974:	df000015 	stw	fp,0(sp)
  819978:	d839883a 	mov	fp,sp
}
  81997c:	e037883a 	mov	sp,fp
  819980:	df000017 	ldw	fp,0(sp)
  819984:	dec00104 	addi	sp,sp,4
  819988:	f800283a 	ret

0081998c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  81998c:	deffff04 	addi	sp,sp,-4
  819990:	df000015 	stw	fp,0(sp)
  819994:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  819998:	e037883a 	mov	sp,fp
  81999c:	df000017 	ldw	fp,0(sp)
  8199a0:	dec00104 	addi	sp,sp,4
  8199a4:	f800283a 	ret

008199a8 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  8199a8:	deffff04 	addi	sp,sp,-4
  8199ac:	df000015 	stw	fp,0(sp)
  8199b0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  8199b4:	e037883a 	mov	sp,fp
  8199b8:	df000017 	ldw	fp,0(sp)
  8199bc:	dec00104 	addi	sp,sp,4
  8199c0:	f800283a 	ret

008199c4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  8199c4:	deffff04 	addi	sp,sp,-4
  8199c8:	df000015 	stw	fp,0(sp)
  8199cc:	d839883a 	mov	fp,sp
}
  8199d0:	e037883a 	mov	sp,fp
  8199d4:	df000017 	ldw	fp,0(sp)
  8199d8:	dec00104 	addi	sp,sp,4
  8199dc:	f800283a 	ret

008199e0 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  8199e0:	deffff04 	addi	sp,sp,-4
  8199e4:	df000015 	stw	fp,0(sp)
  8199e8:	d839883a 	mov	fp,sp
}
  8199ec:	e037883a 	mov	sp,fp
  8199f0:	df000017 	ldw	fp,0(sp)
  8199f4:	dec00104 	addi	sp,sp,4
  8199f8:	f800283a 	ret

008199fc <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  8199fc:	defffe04 	addi	sp,sp,-8
  819a00:	df000115 	stw	fp,4(sp)
  819a04:	df000104 	addi	fp,sp,4
  819a08:	e13fff15 	stw	r4,-4(fp)
}
  819a0c:	e037883a 	mov	sp,fp
  819a10:	df000017 	ldw	fp,0(sp)
  819a14:	dec00104 	addi	sp,sp,4
  819a18:	f800283a 	ret

00819a1c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  819a1c:	defffa04 	addi	sp,sp,-24
  819a20:	dfc00515 	stw	ra,20(sp)
  819a24:	df000415 	stw	fp,16(sp)
  819a28:	df000404 	addi	fp,sp,16
  819a2c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  819a30:	008020b4 	movhi	r2,130
  819a34:	10b09904 	addi	r2,r2,-15772
  819a38:	10800017 	ldw	r2,0(r2)
  819a3c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  819a40:	00003306 	br	819b10 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  819a44:	e0bffd17 	ldw	r2,-12(fp)
  819a48:	11000217 	ldw	r4,8(r2)
  819a4c:	0805ddc0 	call	805ddc <strlen>
  819a50:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  819a54:	e0bffd17 	ldw	r2,-12(fp)
  819a58:	10c00217 	ldw	r3,8(r2)
  819a5c:	e0bffc17 	ldw	r2,-16(fp)
  819a60:	1885883a 	add	r2,r3,r2
  819a64:	10bfffc4 	addi	r2,r2,-1
  819a68:	10800003 	ldbu	r2,0(r2)
  819a6c:	10803fcc 	andi	r2,r2,255
  819a70:	1080201c 	xori	r2,r2,128
  819a74:	10bfe004 	addi	r2,r2,-128
  819a78:	10800bd8 	cmpnei	r2,r2,47
  819a7c:	1000031e 	bne	r2,zero,819a8c <alt_find_file+0x70>
    {
      len -= 1;
  819a80:	e0bffc17 	ldw	r2,-16(fp)
  819a84:	10bfffc4 	addi	r2,r2,-1
  819a88:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  819a8c:	e0bffc17 	ldw	r2,-16(fp)
  819a90:	1007883a 	mov	r3,r2
  819a94:	e0bffe17 	ldw	r2,-8(fp)
  819a98:	1885883a 	add	r2,r3,r2
  819a9c:	10800003 	ldbu	r2,0(r2)
  819aa0:	10803fcc 	andi	r2,r2,255
  819aa4:	1080201c 	xori	r2,r2,128
  819aa8:	10bfe004 	addi	r2,r2,-128
  819aac:	10800be0 	cmpeqi	r2,r2,47
  819ab0:	10000a1e 	bne	r2,zero,819adc <alt_find_file+0xc0>
  819ab4:	e0bffc17 	ldw	r2,-16(fp)
  819ab8:	1007883a 	mov	r3,r2
  819abc:	e0bffe17 	ldw	r2,-8(fp)
  819ac0:	1885883a 	add	r2,r3,r2
  819ac4:	10800003 	ldbu	r2,0(r2)
  819ac8:	10803fcc 	andi	r2,r2,255
  819acc:	1080201c 	xori	r2,r2,128
  819ad0:	10bfe004 	addi	r2,r2,-128
  819ad4:	1004c03a 	cmpne	r2,r2,zero
  819ad8:	10000a1e 	bne	r2,zero,819b04 <alt_find_file+0xe8>
  819adc:	e0bffd17 	ldw	r2,-12(fp)
  819ae0:	11000217 	ldw	r4,8(r2)
  819ae4:	e1bffc17 	ldw	r6,-16(fp)
  819ae8:	e17ffe17 	ldw	r5,-8(fp)
  819aec:	0819c8c0 	call	819c8c <memcmp>
  819af0:	1004c03a 	cmpne	r2,r2,zero
  819af4:	1000031e 	bne	r2,zero,819b04 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  819af8:	e0bffd17 	ldw	r2,-12(fp)
  819afc:	e0bfff15 	stw	r2,-4(fp)
  819b00:	00000806 	br	819b24 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  819b04:	e0bffd17 	ldw	r2,-12(fp)
  819b08:	10800017 	ldw	r2,0(r2)
  819b0c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  819b10:	00c020b4 	movhi	r3,130
  819b14:	18f09904 	addi	r3,r3,-15772
  819b18:	e0bffd17 	ldw	r2,-12(fp)
  819b1c:	10ffc91e 	bne	r2,r3,819a44 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  819b20:	e03fff15 	stw	zero,-4(fp)
  819b24:	e0bfff17 	ldw	r2,-4(fp)
}
  819b28:	e037883a 	mov	sp,fp
  819b2c:	dfc00117 	ldw	ra,4(sp)
  819b30:	df000017 	ldw	fp,0(sp)
  819b34:	dec00204 	addi	sp,sp,8
  819b38:	f800283a 	ret

00819b3c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  819b3c:	defff704 	addi	sp,sp,-36
  819b40:	dfc00815 	stw	ra,32(sp)
  819b44:	df000715 	stw	fp,28(sp)
  819b48:	dc000615 	stw	r16,24(sp)
  819b4c:	df000604 	addi	fp,sp,24
  819b50:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  819b54:	00bffa04 	movi	r2,-24
  819b58:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  819b5c:	008020b4 	movhi	r2,130
  819b60:	10b7a604 	addi	r2,r2,-8552
  819b64:	10800017 	ldw	r2,0(r2)
  819b68:	e0bffa15 	stw	r2,-24(fp)
  819b6c:	e03ffb0d 	sth	zero,-20(fp)
  819b70:	e17ffb0b 	ldhu	r5,-20(fp)
  819b74:	e1bffe04 	addi	r6,fp,-8
  819b78:	e13ffa17 	ldw	r4,-24(fp)
  819b7c:	0814b480 	call	814b48 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  819b80:	e03ffd15 	stw	zero,-12(fp)
  819b84:	00002006 	br	819c08 <alt_get_fd+0xcc>
  {
    if (!alt_fd_list[i].dev)
  819b88:	e13ffd17 	ldw	r4,-12(fp)
  819b8c:	040020b4 	movhi	r16,130
  819b90:	842bf404 	addi	r16,r16,-20528
  819b94:	01400304 	movi	r5,12
  819b98:	080535c0 	call	80535c <__mulsi3>
  819b9c:	1405883a 	add	r2,r2,r16
  819ba0:	10800017 	ldw	r2,0(r2)
  819ba4:	1004c03a 	cmpne	r2,r2,zero
  819ba8:	1000141e 	bne	r2,zero,819bfc <alt_get_fd+0xc0>
    {
      alt_fd_list[i].dev = dev;
  819bac:	e13ffd17 	ldw	r4,-12(fp)
  819bb0:	040020b4 	movhi	r16,130
  819bb4:	842bf404 	addi	r16,r16,-20528
  819bb8:	01400304 	movi	r5,12
  819bbc:	080535c0 	call	80535c <__mulsi3>
  819bc0:	1407883a 	add	r3,r2,r16
  819bc4:	e0bfff17 	ldw	r2,-4(fp)
  819bc8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  819bcc:	008020b4 	movhi	r2,130
  819bd0:	10b09d04 	addi	r2,r2,-15756
  819bd4:	10c00017 	ldw	r3,0(r2)
  819bd8:	e0bffd17 	ldw	r2,-12(fp)
  819bdc:	1880040e 	bge	r3,r2,819bf0 <alt_get_fd+0xb4>
      {
        alt_max_fd = i;
  819be0:	00c020b4 	movhi	r3,130
  819be4:	18f09d04 	addi	r3,r3,-15756
  819be8:	e0bffd17 	ldw	r2,-12(fp)
  819bec:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  819bf0:	e0bffd17 	ldw	r2,-12(fp)
  819bf4:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
  819bf8:	00000606 	br	819c14 <alt_get_fd+0xd8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  819bfc:	e0bffd17 	ldw	r2,-12(fp)
  819c00:	10800044 	addi	r2,r2,1
  819c04:	e0bffd15 	stw	r2,-12(fp)
  819c08:	e0bffd17 	ldw	r2,-12(fp)
  819c0c:	10800810 	cmplti	r2,r2,32
  819c10:	103fdd1e 	bne	r2,zero,819b88 <alt_get_fd+0x4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  819c14:	008020b4 	movhi	r2,130
  819c18:	10b7a604 	addi	r2,r2,-8552
  819c1c:	11000017 	ldw	r4,0(r2)
  819c20:	0814f400 	call	814f40 <OSSemPost>

  return rc;
  819c24:	e0bffc17 	ldw	r2,-16(fp)
}
  819c28:	e037883a 	mov	sp,fp
  819c2c:	dfc00217 	ldw	ra,8(sp)
  819c30:	df000117 	ldw	fp,4(sp)
  819c34:	dc000017 	ldw	r16,0(sp)
  819c38:	dec00304 	addi	sp,sp,12
  819c3c:	f800283a 	ret

00819c40 <atexit>:
  819c40:	200b883a 	mov	r5,r4
  819c44:	000d883a 	mov	r6,zero
  819c48:	0009883a 	mov	r4,zero
  819c4c:	000f883a 	mov	r7,zero
  819c50:	0819d001 	jmpi	819d00 <__register_exitproc>

00819c54 <exit>:
  819c54:	defffe04 	addi	sp,sp,-8
  819c58:	000b883a 	mov	r5,zero
  819c5c:	dc000015 	stw	r16,0(sp)
  819c60:	dfc00115 	stw	ra,4(sp)
  819c64:	2021883a 	mov	r16,r4
  819c68:	0819e380 	call	819e38 <__call_exitprocs>
  819c6c:	008020b4 	movhi	r2,130
  819c70:	10b09404 	addi	r2,r2,-15792
  819c74:	11000017 	ldw	r4,0(r2)
  819c78:	20800f17 	ldw	r2,60(r4)
  819c7c:	10000126 	beq	r2,zero,819c84 <exit+0x30>
  819c80:	103ee83a 	callr	r2
  819c84:	8009883a 	mov	r4,r16
  819c88:	081a0280 	call	81a028 <_exit>

00819c8c <memcmp>:
  819c8c:	00c000c4 	movi	r3,3
  819c90:	1980032e 	bgeu	r3,r6,819ca0 <memcmp+0x14>
  819c94:	2144b03a 	or	r2,r4,r5
  819c98:	10c4703a 	and	r2,r2,r3
  819c9c:	10000f26 	beq	r2,zero,819cdc <memcmp+0x50>
  819ca0:	31ffffc4 	addi	r7,r6,-1
  819ca4:	3000061e 	bne	r6,zero,819cc0 <memcmp+0x34>
  819ca8:	00000a06 	br	819cd4 <memcmp+0x48>
  819cac:	39ffffc4 	addi	r7,r7,-1
  819cb0:	00bfffc4 	movi	r2,-1
  819cb4:	21000044 	addi	r4,r4,1
  819cb8:	29400044 	addi	r5,r5,1
  819cbc:	38800526 	beq	r7,r2,819cd4 <memcmp+0x48>
  819cc0:	20c00003 	ldbu	r3,0(r4)
  819cc4:	28800003 	ldbu	r2,0(r5)
  819cc8:	18bff826 	beq	r3,r2,819cac <memcmp+0x20>
  819ccc:	1885c83a 	sub	r2,r3,r2
  819cd0:	f800283a 	ret
  819cd4:	0005883a 	mov	r2,zero
  819cd8:	f800283a 	ret
  819cdc:	180f883a 	mov	r7,r3
  819ce0:	20c00017 	ldw	r3,0(r4)
  819ce4:	28800017 	ldw	r2,0(r5)
  819ce8:	18bfed1e 	bne	r3,r2,819ca0 <memcmp+0x14>
  819cec:	31bfff04 	addi	r6,r6,-4
  819cf0:	21000104 	addi	r4,r4,4
  819cf4:	29400104 	addi	r5,r5,4
  819cf8:	39bff936 	bltu	r7,r6,819ce0 <memcmp+0x54>
  819cfc:	003fe806 	br	819ca0 <memcmp+0x14>

00819d00 <__register_exitproc>:
  819d00:	defffa04 	addi	sp,sp,-24
  819d04:	008020b4 	movhi	r2,130
  819d08:	10b09404 	addi	r2,r2,-15792
  819d0c:	dc000015 	stw	r16,0(sp)
  819d10:	14000017 	ldw	r16,0(r2)
  819d14:	dd000415 	stw	r20,16(sp)
  819d18:	2829883a 	mov	r20,r5
  819d1c:	81405217 	ldw	r5,328(r16)
  819d20:	dcc00315 	stw	r19,12(sp)
  819d24:	dc800215 	stw	r18,8(sp)
  819d28:	dc400115 	stw	r17,4(sp)
  819d2c:	dfc00515 	stw	ra,20(sp)
  819d30:	2023883a 	mov	r17,r4
  819d34:	3027883a 	mov	r19,r6
  819d38:	3825883a 	mov	r18,r7
  819d3c:	28002526 	beq	r5,zero,819dd4 <__register_exitproc+0xd4>
  819d40:	29000117 	ldw	r4,4(r5)
  819d44:	008007c4 	movi	r2,31
  819d48:	11002716 	blt	r2,r4,819de8 <__register_exitproc+0xe8>
  819d4c:	8800101e 	bne	r17,zero,819d90 <__register_exitproc+0x90>
  819d50:	2105883a 	add	r2,r4,r4
  819d54:	1085883a 	add	r2,r2,r2
  819d58:	20c00044 	addi	r3,r4,1
  819d5c:	1145883a 	add	r2,r2,r5
  819d60:	0009883a 	mov	r4,zero
  819d64:	15000215 	stw	r20,8(r2)
  819d68:	28c00115 	stw	r3,4(r5)
  819d6c:	2005883a 	mov	r2,r4
  819d70:	dfc00517 	ldw	ra,20(sp)
  819d74:	dd000417 	ldw	r20,16(sp)
  819d78:	dcc00317 	ldw	r19,12(sp)
  819d7c:	dc800217 	ldw	r18,8(sp)
  819d80:	dc400117 	ldw	r17,4(sp)
  819d84:	dc000017 	ldw	r16,0(sp)
  819d88:	dec00604 	addi	sp,sp,24
  819d8c:	f800283a 	ret
  819d90:	29802204 	addi	r6,r5,136
  819d94:	00800044 	movi	r2,1
  819d98:	110e983a 	sll	r7,r2,r4
  819d9c:	30c04017 	ldw	r3,256(r6)
  819da0:	2105883a 	add	r2,r4,r4
  819da4:	1085883a 	add	r2,r2,r2
  819da8:	1185883a 	add	r2,r2,r6
  819dac:	19c6b03a 	or	r3,r3,r7
  819db0:	14802015 	stw	r18,128(r2)
  819db4:	14c00015 	stw	r19,0(r2)
  819db8:	00800084 	movi	r2,2
  819dbc:	30c04015 	stw	r3,256(r6)
  819dc0:	88bfe31e 	bne	r17,r2,819d50 <__register_exitproc+0x50>
  819dc4:	30804117 	ldw	r2,260(r6)
  819dc8:	11c4b03a 	or	r2,r2,r7
  819dcc:	30804115 	stw	r2,260(r6)
  819dd0:	003fdf06 	br	819d50 <__register_exitproc+0x50>
  819dd4:	008020b4 	movhi	r2,130
  819dd8:	10949804 	addi	r2,r2,21088
  819ddc:	100b883a 	mov	r5,r2
  819de0:	80805215 	stw	r2,328(r16)
  819de4:	003fd606 	br	819d40 <__register_exitproc+0x40>
  819de8:	00800034 	movhi	r2,0
  819dec:	10800004 	addi	r2,r2,0
  819df0:	1000021e 	bne	r2,zero,819dfc <__register_exitproc+0xfc>
  819df4:	013fffc4 	movi	r4,-1
  819df8:	003fdc06 	br	819d6c <__register_exitproc+0x6c>
  819dfc:	01006404 	movi	r4,400
  819e00:	103ee83a 	callr	r2
  819e04:	1007883a 	mov	r3,r2
  819e08:	103ffa26 	beq	r2,zero,819df4 <__register_exitproc+0xf4>
  819e0c:	80805217 	ldw	r2,328(r16)
  819e10:	180b883a 	mov	r5,r3
  819e14:	18000115 	stw	zero,4(r3)
  819e18:	18800015 	stw	r2,0(r3)
  819e1c:	80c05215 	stw	r3,328(r16)
  819e20:	18006215 	stw	zero,392(r3)
  819e24:	18006315 	stw	zero,396(r3)
  819e28:	0009883a 	mov	r4,zero
  819e2c:	883fc826 	beq	r17,zero,819d50 <__register_exitproc+0x50>
  819e30:	003fd706 	br	819d90 <__register_exitproc+0x90>

00819e34 <register_fini>:
  819e34:	f800283a 	ret

00819e38 <__call_exitprocs>:
  819e38:	008020b4 	movhi	r2,130
  819e3c:	10b09404 	addi	r2,r2,-15792
  819e40:	10800017 	ldw	r2,0(r2)
  819e44:	defff304 	addi	sp,sp,-52
  819e48:	df000b15 	stw	fp,44(sp)
  819e4c:	d8800115 	stw	r2,4(sp)
  819e50:	00800034 	movhi	r2,0
  819e54:	10800004 	addi	r2,r2,0
  819e58:	1005003a 	cmpeq	r2,r2,zero
  819e5c:	d8800215 	stw	r2,8(sp)
  819e60:	d8800117 	ldw	r2,4(sp)
  819e64:	dd400815 	stw	r21,32(sp)
  819e68:	dd000715 	stw	r20,28(sp)
  819e6c:	10805204 	addi	r2,r2,328
  819e70:	dfc00c15 	stw	ra,48(sp)
  819e74:	ddc00a15 	stw	r23,40(sp)
  819e78:	dd800915 	stw	r22,36(sp)
  819e7c:	dcc00615 	stw	r19,24(sp)
  819e80:	dc800515 	stw	r18,20(sp)
  819e84:	dc400415 	stw	r17,16(sp)
  819e88:	dc000315 	stw	r16,12(sp)
  819e8c:	282b883a 	mov	r21,r5
  819e90:	2039883a 	mov	fp,r4
  819e94:	d8800015 	stw	r2,0(sp)
  819e98:	2829003a 	cmpeq	r20,r5,zero
  819e9c:	d8800117 	ldw	r2,4(sp)
  819ea0:	14405217 	ldw	r17,328(r2)
  819ea4:	88001026 	beq	r17,zero,819ee8 <__call_exitprocs+0xb0>
  819ea8:	ddc00017 	ldw	r23,0(sp)
  819eac:	88800117 	ldw	r2,4(r17)
  819eb0:	8c802204 	addi	r18,r17,136
  819eb4:	143fffc4 	addi	r16,r2,-1
  819eb8:	80000916 	blt	r16,zero,819ee0 <__call_exitprocs+0xa8>
  819ebc:	05bfffc4 	movi	r22,-1
  819ec0:	a000151e 	bne	r20,zero,819f18 <__call_exitprocs+0xe0>
  819ec4:	8409883a 	add	r4,r16,r16
  819ec8:	2105883a 	add	r2,r4,r4
  819ecc:	1485883a 	add	r2,r2,r18
  819ed0:	10c02017 	ldw	r3,128(r2)
  819ed4:	a8c01126 	beq	r21,r3,819f1c <__call_exitprocs+0xe4>
  819ed8:	843fffc4 	addi	r16,r16,-1
  819edc:	85bff81e 	bne	r16,r22,819ec0 <__call_exitprocs+0x88>
  819ee0:	d8800217 	ldw	r2,8(sp)
  819ee4:	10003126 	beq	r2,zero,819fac <__call_exitprocs+0x174>
  819ee8:	dfc00c17 	ldw	ra,48(sp)
  819eec:	df000b17 	ldw	fp,44(sp)
  819ef0:	ddc00a17 	ldw	r23,40(sp)
  819ef4:	dd800917 	ldw	r22,36(sp)
  819ef8:	dd400817 	ldw	r21,32(sp)
  819efc:	dd000717 	ldw	r20,28(sp)
  819f00:	dcc00617 	ldw	r19,24(sp)
  819f04:	dc800517 	ldw	r18,20(sp)
  819f08:	dc400417 	ldw	r17,16(sp)
  819f0c:	dc000317 	ldw	r16,12(sp)
  819f10:	dec00d04 	addi	sp,sp,52
  819f14:	f800283a 	ret
  819f18:	8409883a 	add	r4,r16,r16
  819f1c:	88c00117 	ldw	r3,4(r17)
  819f20:	2105883a 	add	r2,r4,r4
  819f24:	1445883a 	add	r2,r2,r17
  819f28:	18ffffc4 	addi	r3,r3,-1
  819f2c:	11800217 	ldw	r6,8(r2)
  819f30:	1c001526 	beq	r3,r16,819f88 <__call_exitprocs+0x150>
  819f34:	10000215 	stw	zero,8(r2)
  819f38:	303fe726 	beq	r6,zero,819ed8 <__call_exitprocs+0xa0>
  819f3c:	00c00044 	movi	r3,1
  819f40:	1c06983a 	sll	r3,r3,r16
  819f44:	90804017 	ldw	r2,256(r18)
  819f48:	8cc00117 	ldw	r19,4(r17)
  819f4c:	1884703a 	and	r2,r3,r2
  819f50:	10001426 	beq	r2,zero,819fa4 <__call_exitprocs+0x16c>
  819f54:	90804117 	ldw	r2,260(r18)
  819f58:	1884703a 	and	r2,r3,r2
  819f5c:	10000c1e 	bne	r2,zero,819f90 <__call_exitprocs+0x158>
  819f60:	2105883a 	add	r2,r4,r4
  819f64:	1485883a 	add	r2,r2,r18
  819f68:	11400017 	ldw	r5,0(r2)
  819f6c:	e009883a 	mov	r4,fp
  819f70:	303ee83a 	callr	r6
  819f74:	88800117 	ldw	r2,4(r17)
  819f78:	98bfc81e 	bne	r19,r2,819e9c <__call_exitprocs+0x64>
  819f7c:	b8800017 	ldw	r2,0(r23)
  819f80:	147fd526 	beq	r2,r17,819ed8 <__call_exitprocs+0xa0>
  819f84:	003fc506 	br	819e9c <__call_exitprocs+0x64>
  819f88:	8c000115 	stw	r16,4(r17)
  819f8c:	003fea06 	br	819f38 <__call_exitprocs+0x100>
  819f90:	2105883a 	add	r2,r4,r4
  819f94:	1485883a 	add	r2,r2,r18
  819f98:	11000017 	ldw	r4,0(r2)
  819f9c:	303ee83a 	callr	r6
  819fa0:	003ff406 	br	819f74 <__call_exitprocs+0x13c>
  819fa4:	303ee83a 	callr	r6
  819fa8:	003ff206 	br	819f74 <__call_exitprocs+0x13c>
  819fac:	88800117 	ldw	r2,4(r17)
  819fb0:	1000081e 	bne	r2,zero,819fd4 <__call_exitprocs+0x19c>
  819fb4:	89000017 	ldw	r4,0(r17)
  819fb8:	20000726 	beq	r4,zero,819fd8 <__call_exitprocs+0x1a0>
  819fbc:	b9000015 	stw	r4,0(r23)
  819fc0:	8809883a 	mov	r4,r17
  819fc4:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  819fc8:	bc400017 	ldw	r17,0(r23)
  819fcc:	883fb71e 	bne	r17,zero,819eac <__call_exitprocs+0x74>
  819fd0:	003fc506 	br	819ee8 <__call_exitprocs+0xb0>
  819fd4:	89000017 	ldw	r4,0(r17)
  819fd8:	882f883a 	mov	r23,r17
  819fdc:	2023883a 	mov	r17,r4
  819fe0:	883fb21e 	bne	r17,zero,819eac <__call_exitprocs+0x74>
  819fe4:	003fc006 	br	819ee8 <__call_exitprocs+0xb0>

00819fe8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  819fe8:	defffd04 	addi	sp,sp,-12
  819fec:	df000215 	stw	fp,8(sp)
  819ff0:	df000204 	addi	fp,sp,8
  819ff4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  819ff8:	e0bfff17 	ldw	r2,-4(fp)
  819ffc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  81a000:	e0bffe17 	ldw	r2,-8(fp)
  81a004:	1005003a 	cmpeq	r2,r2,zero
  81a008:	1000021e 	bne	r2,zero,81a014 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  81a00c:	002af070 	cmpltui	zero,zero,43969
  81a010:	00000106 	br	81a018 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  81a014:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  81a018:	e037883a 	mov	sp,fp
  81a01c:	df000017 	ldw	fp,0(sp)
  81a020:	dec00104 	addi	sp,sp,4
  81a024:	f800283a 	ret

0081a028 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  81a028:	defffd04 	addi	sp,sp,-12
  81a02c:	dfc00215 	stw	ra,8(sp)
  81a030:	df000115 	stw	fp,4(sp)
  81a034:	df000104 	addi	fp,sp,4
  81a038:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  81a03c:	008020b4 	movhi	r2,130
  81a040:	10b7ae44 	addi	r2,r2,-8519
  81a044:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  81a048:	e13fff17 	ldw	r4,-4(fp)
  81a04c:	0819fe80 	call	819fe8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  81a050:	003fff06 	br	81a050 <_exit+0x28>
  81a054:	00819e34 	movhi	r2,1656
