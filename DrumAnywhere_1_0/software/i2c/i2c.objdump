
i2c.elf:     file format elf32-littlenios2
i2c.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0080019c

Program Header:
    LOAD off    0x00001020 vaddr 0x01104020 paddr 0x00800000 align 2**12
         filesz 0x0000019c memsz 0x0000019c flags r-x
    LOAD off    0x0000219c vaddr 0x0080019c paddr 0x0080019c align 2**12
         filesz 0x0001bf10 memsz 0x0001bf10 flags r-x
    LOAD off    0x0001e0ac vaddr 0x0081c0ac paddr 0x0081dc20 align 2**12
         filesz 0x00001b74 memsz 0x00001b74 flags rw-
    LOAD off    0x00020794 vaddr 0x0081f794 paddr 0x0081f794 align 2**12
         filesz 0x00000000 memsz 0x00007574 flags rw-
    LOAD off    0x00020000 vaddr 0x01104000 paddr 0x01104000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01104000  01104000  00020000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  01104020  00800000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b79c  0080019c  0080019c  0000219c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000774  0081b938  0081b938  0001d938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b74  0081c0ac  0081dc20  0001e0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00007574  0081f794  0081f794  00020794  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001138  00000000  00000000  00020048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002662  00000000  00000000  00021180  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00034d29  00000000  00000000  000237e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b108  00000000  00000000  0005850b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000207e5  00000000  00000000  00063613  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002bb8  00000000  00000000  00083df8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002bbb  00000000  00000000  000869b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000f551  00000000  00000000  0008956b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00098abc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000da0  00000000  00000000  00098b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  0009ea20  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0009ea26  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009ea32  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009ea33  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0009ea34  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0009ea38  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0009ea3c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0009ea40  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0009ea4b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0009ea56  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  0009ea61  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000043  00000000  00000000  0009ea6e  2**0
                  CONTENTS, READONLY
 29 .jdi          000051db  00000000  00000000  0009eab1  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00080af6  00000000  00000000  000a3c8c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01104000 l    d  .entry	00000000 .entry
01104020 l    d  .exceptions	00000000 .exceptions
0080019c l    d  .text	00000000 .text
0081b938 l    d  .rodata	00000000 .rodata
0081c0ac l    d  .rwdata	00000000 .rwdata
0081f794 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001d4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 mpu9250.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
0081bbac l     O .rodata	00000010 bp
0081bbbc l     O .rodata	00000010 dp_l
0081bbcc l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
0081bbdc l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00805b84 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00806af0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0081c0ac l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00807730 l     F .text	00000058 __sprint_r
0081bd86 l     O .rodata	00000010 blanks.3452
0081bd76 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
008097ac l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080b1d4 l     F .text	00000058 std
0080b2e0 l     F .text	00000008 __fp_lock
0080b2e8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0081db70 l     O .rwdata	00000004 charset
0081bdb8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0081bf00 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0080fa58 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080fab8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080fbbc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080fce0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080fdc0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080ff20 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0081016c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081db94 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00810544 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0081db98 l     O .rwdata	00000004 lockid
0081f7c0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0081db9c l     O .rwdata	00000004 lockid
0081f7c8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00811f7c l     F .text	00000044 OS_InitMisc
00811fc0 l     F .text	0000006c OS_InitRdyList
00812124 l     F .text	000000e0 OS_InitTCBList
00811ea0 l     F .text	000000dc OS_InitEventList
0081202c l     F .text	0000007c OS_InitTaskIdle
008120a8 l     F .text	0000007c OS_InitTaskStat
00812398 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
008142b8 l     F .text	00000110 OS_FlagTaskRdy
00814010 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0081ca68 l     O .rwdata	0000106c jtag_uart_0
0081dad4 l     O .rwdata	00000030 audio_and_video_config_0
0081db04 l     O .rwdata	00000030 audio_0
0081db34 l     O .rwdata	0000002c character_lcd_0
00818c30 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00818ee8 l     F .text	000002c4 altera_avalon_jtag_uart_irq
008191ac l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008199c4 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0081a374 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0081a818 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0081a968 l     F .text	000000f8 alt_file_locked
0081abec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0081b714 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0081b8c8 l     F .text	00000040 alt_sim_halt
0080cfc4 g     F .text	00000094 _mprec_log10
0081dbea g     O .rwdata	00000002 OSTaskNameSize
0080d0b0 g     F .text	00000088 __any_on
0080e838 g     F .text	00000070 _isatty_r
0081bed8 g     O .rodata	00000028 __mprec_tinytens
0080ff80 g     F .text	000000c8 alt_main
00807608 g     F .text	000000a0 _puts_r
00826a78 g     O .bss	00000100 alt_irq
008051f4 g     F .text	00000018 fabs
0080e8a8 g     F .text	00000078 _lseek_r
00814bac g     F .text	000000d4 OS_MemInit
0081dc20 g       *ABS*	00000000 __flash_rwdata_start
00818b0c g     F .text	00000064 OSTimeSet
00819b40 g     F .text	00000034 alt_up_character_lcd_send_cmd
008066a4 g     F .text	00000088 __eqdf2
00810af8 g     F .text	000006b4 OSEventPendMulti
00826d08 g       *ABS*	00000000 __alt_heap_start
0081b1f4 g     F .text	00000020 OSTaskCreateHook
0081f854 g     O .bss	00002000 task1_stk
00807590 g     F .text	00000044 printf
0081dbc2 g     O .rwdata	00000002 OSMboxEn
00811200 g     F .text	0000007c OSIntEnter
0080e2f0 g     F .text	00000068 __sseek
0080b23c g     F .text	000000a4 __sinit
0081dbd2 g     O .rwdata	00000002 OSQEn
0080bf48 g     F .text	00000084 _setlocale_r
0080b33c g     F .text	0000009c __sfmoreglue
008107b4 g     F .text	000000d0 __malloc_unlock
0081b250 g     F .text	0000001c OSTaskStatHook
0081f7d0 g     O .bss	00000001 OSLockNesting
00805864 g     F .text	00000174 __divsf3
0081dc10 g     O .rwdata	00000002 OSDataSize
0081f7d1 g     O .bss	00000001 OSRunning
0080ca40 g     F .text	000000e0 memmove
0081b288 g     F .text	0000001c OSInitHookBegin
0081dc08 g     O .rwdata	00000002 OSTmrSize
0080b32c g     F .text	00000010 _cleanup
0080d138 g     F .text	000000bc _Balloc
0081f7d4 g     O .bss	00000004 OSIdleCtr
008067b4 g     F .text	00000088 __gtdf2
0081aec0 g       .text	00000000 OSStartTsk
00807580 g     F .text	00000010 __errno
00819ac4 g     F .text	0000007c get_DDRAM_addr
008126cc g     F .text	000002e0 OS_TCBInit
008034f4 g     F .text	00000144 i2c_write
01104000 g     F .entry	0000000c __reset
0081dc0e g     O .rwdata	00000002 OSTmrWheelTblSize
00800000 g       *ABS*	00000000 __flash_exceptions_start
0081dbae g     O .rwdata	00000002 OSEventSize
0081f7d8 g     O .bss	00000001 OSPrioHighRdy
0080e7c4 g     F .text	00000074 _fstat_r
0081b214 g     F .text	00000020 OSTaskDelHook
0081f7ac g     O .bss	00000004 errno
00806a44 g     F .text	00000038 __make_dp
0081aea0 g       .text	00000000 OSStartHighRdy
008172c4 g     F .text	00000200 OSTaskCreateExt
00813b2c g     F .text	00000068 OSFlagPendGetFlagsRdy
0081dbee g     O .rwdata	00000002 OSTaskStatStkSize
00807040 g     F .text	0000002c __make_fp
00812b38 g     F .text	00000334 OSFlagAccept
008152e8 g     F .text	000000c8 OSQFlush
00814c80 g     F .text	00000154 OSQAccept
0081f7b8 g     O .bss	00000004 alt_argv
00825b60 g       *ABS*	00000000 _gp
00810300 g     F .text	00000120 usleep
008170f0 g     F .text	000001d4 OSTaskCreate
00816b7c g     F .text	00000574 OSTaskChangePrio
0081f7cc g     O .bss	00000004 alt_heapsem
008129ac g     F .text	0000018c OSDebugInit
008174c4 g     F .text	0000040c OSTaskDel
0081c8e8 g     O .rwdata	00000180 alt_fd_list
00823854 g     O .bss	00000370 OSFlagTbl
00811c7c g     F .text	000000b8 OS_EventTaskRemove
0081a49c g     F .text	00000094 alt_find_dev
0080c9a0 g     F .text	000000a0 memcpy
0081dbd8 g     O .rwdata	00000002 OSRdyTblSize
00819cd8 g     F .text	0000004c alt_up_character_lcd_write_fd
0080b320 g     F .text	0000000c _cleanup_r
0080694c g     F .text	000000f8 __floatsidf
0081a8f0 g     F .text	00000078 alt_io_redirect
0080683c g     F .text	00000088 __ltdf2
0081b938 g       *ABS*	00000000 __DTOR_END__
008076a8 g     F .text	00000014 puts
00810884 g     F .text	00000130 OSEventNameGet
0081dbbc g     O .rwdata	00000002 OSFlagMax
0080cf14 g     F .text	000000b0 __ratio
0081127c g     F .text	00000100 OSIntExit
0081dbf6 g     O .rwdata	00000002 OSTCBSize
0081f7d9 g     O .bss	00000001 OSPrioCur
00819428 g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
008075d4 g     F .text	00000034 _printf_r
01104000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00806c2c g     F .text	00000008 __udivsi3
0080fc1c g     F .text	000000c4 isatty
008001d8 g     F .text	00000480 initMPU9250
0081dbdc g     O .rwdata	00000002 OSStkWidth
0081bde8 g     O .rodata	000000c8 __mprec_tens
0081dbd0 g     O .rwdata	00000002 OSPtrSize
00803174 g     F .text	0000015c I2C_ReadFromDeviceRegister
0080bf24 g     F .text	00000008 __locale_charset
0081dbb0 g     O .rwdata	00000002 OSEventTblSize
0081ae14 g       .text	00000000 OSCtxSw
0081f7a0 g     O .bss	00000004 __malloc_top_pad
0081f7dc g     O .bss	00000004 OSTCBList
0081f7b0 g     O .bss	00000004 alt_fd_list_lock
0081db6c g     O .rwdata	00000004 __mb_cur_max
0080bf2c g     F .text	0000000c _localeconv_r
0080d89c g     F .text	0000003c __i2b
0080b908 g     F .text	0000049c __sfvwrite_r
00823bc4 g     O .bss	00000c30 OSMemTbl
0081f7e0 g     O .bss	00000001 OSTickStepState
0080e278 g     F .text	00000070 _sbrk_r
0081dbd4 g     O .rwdata	00000002 OSQMax
008247f4 g     O .bss	00000800 OSTaskStatStk
00814794 g     F .text	0000010c OSMemNameGet
0081dbb4 g     O .rwdata	00000002 OSFlagEn
0080e920 g     F .text	00000078 _read_r
0081dbfa g     O .rwdata	00000002 OSTimeTickHookEn
0081584c g     F .text	00000180 OSQPost
008143c8 g     F .text	000000ac OS_FlagUnlink
0081c4ac g     O .rwdata	0000000c __lc_ctype
0081db8c g     O .rwdata	00000004 alt_max_fd
00812258 g     F .text	0000006c OS_MemCopy
008122c4 g     F .text	000000d4 OS_Sched
00807380 g     F .text	00000138 __unpack_d
0080e6a0 g     F .text	00000110 _fclose_r
00814690 g     F .text	00000104 OSMemGet
00817bf8 g     F .text	000001c4 OSTaskNameSet
0080b1a0 g     F .text	00000034 fflush
0081f7a4 g     O .bss	00000004 __malloc_max_sbrked_mem
0081f7e4 g     O .bss	00000004 OSCtxSwCtr
0081b26c g     F .text	0000001c OSTimeTickHook
0081dbbe g     O .rwdata	00000002 OSFlagNameSize
00805a70 g     F .text	00000054 __extendsfdf2
00811d34 g     F .text	00000104 OS_EventTaskRemoveMulti
00806014 g     F .text	00000074 __adddf3
00811b28 g     F .text	00000154 OS_EventTaskWaitMulti
0080cdf4 g     F .text	00000120 __b2d
0081dbd6 g     O .rwdata	00000002 OSQSize
0080f004 g     F .text	00000660 __umoddi3
0080fe2c g     F .text	000000f4 lseek
00816428 g     F .text	0000027c OSSemPend
0081db60 g     O .rwdata	00000004 __fdlib_version
0081db68 g     O .rwdata	00000004 _global_impure_ptr
0080dc44 g     F .text	000005f4 _realloc_r
0081dbc0 g     O .rwdata	00000002 OSLowestPrio
00826d08 g       *ABS*	00000000 __bss_end
0081a720 g     F .text	000000f8 alt_iic_isr_register
0081b2dc g     F .text	00000020 OSTCBInitHook
0081dc06 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0081ace4 g     F .text	00000110 alt_tick
0080e998 g     F .text	0000066c __udivdi3
0081dba8 g     O .rwdata	00000002 OSEventEn
0081beb0 g     O .rodata	00000028 __mprec_bigtens
0080db24 g     F .text	00000120 __s2b
0081dc02 g     O .rwdata	00000002 OSTmrCfgNameSize
0080f7c4 g     F .text	00000194 __floatunsidf
0080cd14 g     F .text	00000060 __mcmp
0080b308 g     F .text	00000018 __fp_lock_all
0081a6d8 g     F .text	00000048 alt_ic_irq_enabled
008141d4 g     F .text	000000e4 OS_FlagInit
0081ac4c g     F .text	00000098 alt_alarm_stop
00802e8c g     F .text	00000130 I2C_WriteToDeviceRegister
0081dbe4 g     O .rwdata	00000002 OSTaskIdleStkSize
0081f820 g     O .bss	00000004 alt_irq_active
00815fb4 g     F .text	000000c0 OSSemAccept
008149c0 g     F .text	000000f0 OSMemPut
00814474 g     F .text	0000021c OSMemCreate
0081f7e8 g     O .bss	00000004 OSIdleCtrMax
011040ec g     F .exceptions	000000d0 alt_irq_handler
0081c8c0 g     O .rwdata	00000028 alt_dev_null
0081dbf8 g     O .rwdata	00000002 OSTicksPerSec
00805270 g     F .text	00000210 rint
00806f78 g     F .text	000000c8 __unpack_f
00819fc0 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
008033f4 g     F .text	00000088 i2c_start
0081ae14 g       .text	00000000 OSIntCtxSw
0081a2a4 g     F .text	0000001c alt_dcache_flush_all
0080cbe0 g     F .text	00000070 __hi0bits
0080f6ec g     F .text	000000d8 __fixdfsi
0081f7ec g     O .bss	00000004 OSTCBFreeList
0081dc20 g       *ABS*	00000000 __ram_rwdata_end
008166a4 g     F .text	0000017c OSSemPendAbort
0081db84 g     O .rwdata	00000008 alt_dev_list
00810420 g     F .text	00000124 write
0081dbfc g     O .rwdata	00000002 OSVersionNbr
0081c0ac g       *ABS*	00000000 __ram_rodata_end
0080fae4 g     F .text	000000d8 fstat
008068c4 g     F .text	00000088 __ledf2
0081dba4 g     O .rwdata	00000004 OSEndiannessTest
0080da04 g     F .text	00000120 __pow5mult
0081f794 g     O .bss	00000004 __nlocale_changed
00806c34 g     F .text	00000008 __umodsi3
0081dbb6 g     O .rwdata	00000002 OSFlagGrpSize
00826d08 g       *ABS*	00000000 end
00806e18 g     F .text	00000160 __pack_f
00818db0 g     F .text	00000138 altera_avalon_jtag_uart_init
0081253c g     F .text	000000c8 OS_TaskStat
0081b934 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00819a34 g     F .text	00000090 alt_avalon_timer_sc_init
00806d98 g     F .text	00000080 __clzsi2
008196e8 g     F .text	000002dc altera_avalon_jtag_uart_write
0080b22c g     F .text	00000004 __sfp_lock_acquire
0080c8bc g     F .text	000000e4 memchr
00812204 g     F .text	00000054 OS_MemClr
00819be8 g     F .text	00000078 alt_up_character_lcd_write
00807788 g     F .text	00001ec4 ___vfprintf_internal_r
0081aee4 g     F .text	00000310 OSTaskStkInit
00802924 g     F .text	00000328 task1
00802fbc g     F .text	000000c4 I2C_WriteMore
0080b5f4 g     F .text	00000314 _free_r
00811884 g     F .text	00000194 OS_EventTaskRdy
0081b718 g     F .text	000001b0 __call_exitprocs
0081f7f0 g     O .bss	00000001 OSCPUUsage
0081f798 g     O .bss	00000004 __mlocale_changed
0081db78 g     O .rwdata	00000004 __malloc_sbrk_base
0080019c g     F .text	0000003c _start
00802c4c g     F .text	0000002c task2
0081f824 g     O .bss	00000004 _alt_tick_rate
008153b0 g     F .text	00000320 OSQPend
008185bc g     F .text	0000014c OSTimeDly
0080d4fc g     F .text	0000014c __lshift
0081f828 g     O .bss	00000004 _alt_nticks
00810048 g     F .text	00000124 read
00818ba4 g     F .text	0000008c alt_sys_init
00819e4c g     F .text	000000b0 alt_up_character_lcd_shift_display
008059d8 g     F .text	00000098 __floatsisf
0081b5e0 g     F .text	00000134 __register_exitproc
0081f7f1 g     O .bss	00000001 OSTaskCtr
00818708 g     F .text	00000190 OSTimeDlyHMSM
0080d648 g     F .text	00000254 __multiply
00819efc g     F .text	00000090 alt_up_character_lcd_erase_pos
00803c2c g     F .text	00001300 __ieee754_pow
008192c0 g     F .text	00000074 altera_avalon_jtag_uart_close
008037a4 g     F .text	00000488 pow
00806c3c g     F .text	00000038 __mulsi3
0081c0ac g       *ABS*	00000000 __ram_rwdata_start
00802d94 g     F .text	000000f8 I2C_WriteToDevice
0081b938 g       *ABS*	00000000 __ram_rodata_start
0081f82c g     O .bss	00000028 __malloc_current_mallinfo
0081dbaa g     O .rwdata	00000002 OSEventMax
0080d1f4 g     F .text	0000017c __d2b
00816820 g     F .text	00000128 OSSemPost
00811408 g     F .text	000000e4 OSSchedUnlock
00818c68 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0081b41c g     F .text	00000104 alt_get_fd
0081f7f4 g     O .bss	00000004 OSMemFreeList
0081155c g     F .text	000000ac OSStatInit
0081a148 g     F .text	0000015c alt_busy_sleep
00813f3c g     F .text	000000d4 OSFlagQuery
008074b8 g     F .text	000000c8 __fpcmp_parts_d
0081dbe0 g     O .rwdata	00000002 OSTaskCreateExtEn
0080e630 g     F .text	00000070 _close_r
0081b56c g     F .text	00000074 memcmp
00811868 g     F .text	0000001c OS_Dummy
00818d18 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00826d08 g       *ABS*	00000000 __alt_stack_base
00818d60 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00809670 g     F .text	0000013c __swsetup_r
00824ff4 g     O .bss	000001e0 OSQTbl
0080644c g     F .text	00000258 __divdf3
00803080 g     F .text	000000f4 I2C_ReadFromDevice
0080b3d8 g     F .text	000000f0 __sfp
0080d058 g     F .text	00000058 __copybits
0081c4b8 g     O .rwdata	00000408 __malloc_av_
0080b238 g     F .text	00000004 __sinit_lock_release
008016d8 g     F .text	0000124c MPU9250SelfTest
0080347c g     F .text	00000078 i2c_stop
0081f7f8 g     O .bss	00000004 OSTCBHighRdy
00806088 g     F .text	000003c4 __muldf3
0080e3d4 g     F .text	00000060 __sread
0081bbec g     O .rodata	00000010 __thenan_sf
0081f7fc g     O .bss	00000004 OSQFreeList
0081b2fc g     F .text	00000120 alt_find_file
0081a2c0 g     F .text	000000b4 alt_dev_llist_insert
008106ac g     F .text	00000108 __malloc_lock
00810244 g     F .text	000000bc sbrk
008109b4 g     F .text	00000144 OSEventNameSet
0080afa4 g     F .text	000001fc _fflush_r
0080e568 g     F .text	000000c8 _calloc_r
0081f800 g     O .bss	00000001 OSRdyGrp
0081f794 g       *ABS*	00000000 __bss_start
0080cb20 g     F .text	00000098 memset
00802c78 g     F .text	000000ac main
0081f7bc g     O .bss	00000004 alt_envp
0081f7a8 g     O .bss	00000004 __malloc_max_total_mem
00818cc0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00803638 g     F .text	0000016c i2c_read
0081bf2c g     O .rodata	00000100 OSUnMapTbl
0081dbda g     O .rwdata	00000002 OSSemEn
00819d9c g     F .text	000000b0 alt_up_character_lcd_shift_cursor
00813b94 g     F .text	000003a8 OSFlagPost
0080e2e8 g     F .text	00000008 __sclose
00805258 g     F .text	00000008 matherr
01000000 g       *ABS*	00000000 __alt_heap_limit
0080e7b0 g     F .text	00000014 fclose
00811a18 g     F .text	00000110 OS_EventTaskWait
00821854 g     O .bss	00002000 task2_stk
00806a7c g     F .text	00000074 __truncdfsf2
00812604 g     F .text	000000c8 OS_TaskStatStkChk
00826b78 g     O .bss	00000190 _atexit0
008178d0 g     F .text	00000170 OSTaskDelReq
008099f0 g     F .text	000015b4 _dtoa_r
0080c17c g     F .text	00000740 _malloc_r
0081db90 g     O .rwdata	00000004 alt_errno
008114ec g     F .text	00000070 OSStart
00810650 g     F .text	0000005c __env_unlock
0080be6c g     F .text	000000b8 _fwalk
00817dbc g     F .text	00000218 OSTaskResume
00814ab0 g     F .text	000000fc OSMemQuery
0081dbec g     O .rwdata	00000002 OSTaskStatEn
0081dbc6 g     O .rwdata	00000002 OSMemMax
008159cc g     F .text	00000188 OSQPostFront
00806b6c g     F .text	00000060 __divsi3
0081f801 g     O .bss	00000003 OSRdyTbl
0081dba0 g     O .rwdata	00000002 OSDebugEn
0081bbfc g     O .rodata	00000014 __thenan_df
00819ba8 g     F .text	00000040 alt_up_character_lcd_open_dev
0080b4c8 g     F .text	0000012c _malloc_trim_r
0081b938 g       *ABS*	00000000 __CTOR_END__
00805684 g     F .text	000001e0 __mulsf3
0080520c g     F .text	0000001c finite
0081dbb8 g     O .rwdata	00000002 OSFlagNodeSize
0081dc00 g     O .rwdata	00000002 OSTmrCfgMax
00819b74 g     F .text	00000034 alt_up_character_lcd_init
0080e434 g     F .text	000000bc strcmp
00814dd4 g     F .text	00000214 OSQCreate
00817a40 g     F .text	000001b8 OSTaskNameGet
0081b938 g       *ABS*	00000000 __flash_rodata_start
00815b54 g     F .text	00000234 OSQPostOpt
00811608 g     F .text	00000240 OSTimeTick
0081dbe8 g     O .rwdata	00000002 OSTaskMax
0081b938 g       *ABS*	00000000 __DTOR_LIST__
00816074 g     F .text	00000114 OSSemCreate
0081dc0c g     O .rwdata	00000002 OSTmrWheelSize
00805660 g     F .text	00000024 copysign
0080672c g     F .text	00000088 __nedf2
0081dbe2 g     O .rwdata	00000002 OSTaskDelEn
01080000 g       *ABS*	00000000 __alt_mem_sram_0
00816948 g     F .text	00000130 OSSemQuery
00814fe8 g     F .text	00000300 OSQDel
008156d0 g     F .text	0000017c OSQPendAbort
00818b70 g     F .text	00000034 alt_irq_init
008101cc g     F .text	00000078 alt_release_fd
00819f8c g     F .text	00000034 alt_up_character_lcd_cursor_off
0081bc10 g     O .rodata	00000100 __clz_tab
0081f79c g     O .bss	00000004 _PathLocale
0081b520 g     F .text	00000014 atexit
0080e4f0 g     F .text	00000078 _write_r
0081137c g     F .text	0000008c OSSchedLock
0080bfcc g     F .text	0000001c setlocale
00812e6c g     F .text	0000013c OSFlagCreate
00802d24 g     F .text	00000038 I2C_Start
0081db64 g     O .rwdata	00000004 _impure_ptr
0081f7b4 g     O .bss	00000004 alt_argc
00805480 g     F .text	000001e0 scalbn
0081a438 g     F .text	00000064 _do_dtors
0080337c g     F .text	00000078 i2c_selectAddress
0081dbb2 g     O .rwdata	00000002 OSEventMultiEn
00812fa8 g     F .text	000002a8 OSFlagDel
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
0081f804 g     O .bss	00000004 OSEventFreeList
01104020 g       .exceptions	00000000 alt_irq_entry
0080cd74 g     F .text	00000080 __ulp
0080e238 g     F .text	00000040 __isinfd
008134e8 g     F .text	00000644 OSFlagPend
0081dbfe g     O .rwdata	00000002 OSTmrEn
0080b2f0 g     F .text	00000018 __fp_unlock_all
0081db7c g     O .rwdata	00000008 alt_fs_list
00812408 g     F .text	00000080 OS_StrCopy
0081dbc8 g     O .rwdata	00000002 OSMemNameSize
00805260 g     F .text	00000010 nan
0081b2a4 g     F .text	0000001c OSInitHookEnd
01104020 g       *ABS*	00000000 __ram_exceptions_start
0081dbf4 g     O .rwdata	00000002 OSTCBPrioTblMax
0080bf38 g     F .text	00000010 localeconv
00804f2c g     F .text	000002c8 __ieee754_sqrt
0081dbf0 g     O .rwdata	00000002 OSTaskStatStkChkEn
0081a54c g     F .text	00000050 alt_ic_isr_register
0081dbc4 g     O .rwdata	00000002 OSMemEn
0081dbce g     O .rwdata	00000002 OSMutexEn
0081dc20 g       *ABS*	00000000 _edata
00826d08 g       *ABS*	00000000 _end
0081f808 g     O .bss	00000001 OSIntNesting
011041bc g       *ABS*	00000000 __ram_exceptions_end
00819334 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00818898 g     F .text	00000210 OSTimeDlyResume
00813394 g     F .text	00000154 OSFlagNameSet
00817fd4 g     F .text	000001fc OSTaskStkChk
0081a638 g     F .text	000000a0 alt_ic_irq_disable
0081dbca g     O .rwdata	00000002 OSMemSize
0080e358 g     F .text	0000007c __swrite
0081db74 g     O .rwdata	00000004 __malloc_trim_threshold
0081adf4 g     F .text	00000020 altera_nios2_qsys_irq_init
0081f80c g     O .bss	00000004 OSTCBCur
0081b534 g     F .text	00000038 exit
0081dbcc g     O .rwdata	00000002 OSMemTblSize
0080bda4 g     F .text	000000c8 _fwalk_reent
00805ac4 g     F .text	000000c0 __floatunsisf
0080d370 g     F .text	0000018c __mdiff
00806bcc g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
01104020 g     F .exceptions	00000000 alt_exception
0080b230 g     F .text	00000004 __sfp_lock_release
008111ac g     F .text	00000054 OSInit
008183fc g     F .text	00000144 OSTaskQuery
00819c60 g     F .text	00000078 alt_up_character_lcd_string
00815f08 g     F .text	000000ac OS_QInit
00812488 g     F .text	00000058 OS_StrLen
008148a0 g     F .text	00000120 OSMemNameSet
0081dbe6 g     O .rwdata	00000002 OSTaskProfileEn
0081f810 g     O .bss	00000004 OSTime
00802d5c g     F .text	00000038 I2C_Stop
008251d4 g     O .bss	00000800 OSTaskIdleStk
0081b908 g     F .text	0000002c _exit
00805228 g     F .text	00000030 __isnand
00819ff4 g     F .text	00000154 alt_alarm_start
00813250 g     F .text	00000144 OSFlagNameGet
00818aa8 g     F .text	00000064 OSTimeGet
00806c74 g     F .text	00000124 __muldi3
0080bfe8 g     F .text	00000194 __smakebuf_r
008076bc g     F .text	00000074 strlen
0081b234 g     F .text	0000001c OSTaskSwHook
0081aa60 g     F .text	0000018c open
008259d4 g     O .bss	00000b40 OSEventTbl
0080f664 g     F .text	00000088 __gedf2
00800658 g     F .text	00001080 calibrateMPU9250
00826514 g     O .bss	00000510 OSTCBTbl
00816a78 g     F .text	00000104 OSSemSet
0081a530 g     F .text	0000001c alt_icache_flush_all
00819d24 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0081dc14 g     O .rwdata	00000004 alt_priority_mask
00816188 g     F .text	000002a0 OSSemDel
0081f814 g     O .bss	00000004 OSFlagFreeList
0081a59c g     F .text	0000009c alt_ic_irq_enable
0081dbac g     O .rwdata	00000002 OSEventNameSize
0080964c g     F .text	00000024 __vfprintf_internal
0081f818 g     O .bss	00000001 OSStatRdy
00826a24 g     O .bss	00000054 OSTCBPrioTbl
008105a4 g     F .text	000000ac __env_lock
0081dbf2 g     O .rwdata	00000002 OSTaskSwHookEn
00805f94 g     F .text	00000080 __subdf3
008032d0 g     F .text	000000ac I2C_ReadMore
0080cc50 g     F .text	000000c4 __lo0bits
0081dc18 g     O .rwdata	00000008 alt_alarm_list
0081dbba g     O .rwdata	00000002 OSFlagWidth
0081a3d4 g     F .text	00000064 _do_ctors
0080f958 g     F .text	00000100 close
0081f7c4 g     O .bss	00000004 alt_envsem
0081f81c g     O .bss	00000004 OSIdleCtrRun
00811848 g     F .text	00000020 OSVersion
0081dc04 g     O .rwdata	00000002 OSTmrCfgWheelSize
0080fd40 g     F .text	00000080 alt_load
00818540 g     F .text	0000007c OS_TaskStkClr
0080706c g     F .text	00000314 __pack_d
0081dbde g     O .rwdata	00000002 OSTaskCreateEn
00811e38 g     F .text	00000068 OS_EventWaitListInit
0081b2c0 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
0080b234 g     F .text	00000004 __sinit_lock_acquire
0080d8d8 g     F .text	0000012c __multadd
008181d0 g     F .text	0000022c OSTaskSuspend
0080cbb8 g     F .text	00000028 _Bfree
008124e0 g     F .text	0000005c OS_TaskIdle
0081dc0a g     O .rwdata	00000002 OSTmrTblSize
00815d88 g     F .text	00000180 OSQQuery



Disassembly of section .entry:

01104000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1104000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
 1104004:	08406714 	ori	at,at,412
    jmp r1
 1104008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01104020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1104020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1104024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1104028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 110402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1104030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1104034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1104038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 110403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1104040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1104044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1104048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 110404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1104050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1104054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1104058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 110405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1104060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1104064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1104068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 110406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1104070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1104074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1104078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 110407c:	10000326 	beq	r2,zero,110408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1104080:	20000226 	beq	r4,zero,110408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1104084:	11040ec0 	call	11040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1104088:	00000306 	br	1104098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 110408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1104090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1104094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1104098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 110409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 11040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 11040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 11040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 11040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 11040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 11040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 11040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 11040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 11040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 11040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 11040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 11040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 11040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 11040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 11040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 11040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 11040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 11040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 11040e8:	ef80083a 	eret

011040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 11040ec:	defff904 	addi	sp,sp,-28
 11040f0:	dfc00615 	stw	ra,24(sp)
 11040f4:	df000515 	stw	fp,20(sp)
 11040f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 11040fc:	08112000 	call	811200 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1104100:	0005313a 	rdctl	r2,ipending
 1104104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1104108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 110410c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 1104110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1104114:	00800044 	movi	r2,1
 1104118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 110411c:	e0ffff17 	ldw	r3,-4(fp)
 1104120:	e0bffe17 	ldw	r2,-8(fp)
 1104124:	1884703a 	and	r2,r3,r2
 1104128:	1005003a 	cmpeq	r2,r2,zero
 110412c:	1000161e 	bne	r2,zero,1104188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 1104130:	e0bffd17 	ldw	r2,-12(fp)
 1104134:	00c020b4 	movhi	r3,130
 1104138:	18da9e04 	addi	r3,r3,27256
 110413c:	100490fa 	slli	r2,r2,3
 1104140:	10c5883a 	add	r2,r2,r3
 1104144:	11400017 	ldw	r5,0(r2)
 1104148:	e0bffd17 	ldw	r2,-12(fp)
 110414c:	00c020b4 	movhi	r3,130
 1104150:	18da9e04 	addi	r3,r3,27256
 1104154:	100490fa 	slli	r2,r2,3
 1104158:	10c5883a 	add	r2,r2,r3
 110415c:	10800104 	addi	r2,r2,4
 1104160:	11000017 	ldw	r4,0(r2)
 1104164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1104168:	0005313a 	rdctl	r2,ipending
 110416c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1104170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1104174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1104178:	e0bfff17 	ldw	r2,-4(fp)
 110417c:	1004c03a 	cmpne	r2,r2,zero
 1104180:	103fe31e 	bne	r2,zero,1104110 <alt_irq_handler+0x24>
 1104184:	00000706 	br	11041a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1104188:	e0bffe17 	ldw	r2,-8(fp)
 110418c:	1085883a 	add	r2,r2,r2
 1104190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1104194:	e0bffd17 	ldw	r2,-12(fp)
 1104198:	10800044 	addi	r2,r2,1
 110419c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 11041a0:	003fde06 	br	110411c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 11041a4:	081127c0 	call	81127c <OSIntExit>
}
 11041a8:	e037883a 	mov	sp,fp
 11041ac:	dfc00117 	ldw	ra,4(sp)
 11041b0:	df000017 	ldw	fp,0(sp)
 11041b4:	dec00204 	addi	sp,sp,8
 11041b8:	f800283a 	ret

Disassembly of section .text:

0080019c <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  80019c:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001a0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001a4:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  8001a8:	d696d814 	ori	gp,gp,23392
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001ac:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001b0:	10bde514 	ori	r2,r2,63380

    movhi r3, %hi(__bss_end)
  8001b4:	00c020b4 	movhi	r3,130
    ori r3, r3, %lo(__bss_end)
  8001b8:	18db4214 	ori	r3,r3,27912

    beq r2, r3, 1f
  8001bc:	10c00326 	beq	r2,r3,8001cc <_start+0x30>

0:
    stw zero, (r2)
  8001c0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001c4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001c8:	10fffd36 	bltu	r2,r3,8001c0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001cc:	080fd400 	call	80fd40 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001d0:	080ff800 	call	80ff80 <alt_main>

008001d4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001d4:	003fff06 	br	8001d4 <alt_after_alt_main>

008001d8 <initMPU9250>:
#include "../i2c/I2C.h"
#include <stdio.h>
#include "altera_avalon_pio_regs.h"
#include <math.h>

void initMPU9250(){
  8001d8:	defffa04 	addi	sp,sp,-24
  8001dc:	dfc00515 	stw	ra,20(sp)
  8001e0:	df000415 	stw	fp,16(sp)
  8001e4:	df000404 	addi	fp,sp,16
  alt_u8 deviceAddress = 0xD0;
  8001e8:	00bff404 	movi	r2,-48
  8001ec:	e0bfff45 	stb	r2,-3(fp)
  alt_u8 c;
  // wake up device
  // Clear sleep mode bit (6), enable all sensors
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  8001f0:	01004474 	movhi	r4,273
  8001f4:	21241c04 	addi	r4,r4,-28560
  8001f8:	01404474 	movhi	r5,273
  8001fc:	29641804 	addi	r5,r5,-28576
  800200:	0802d240 	call	802d24 <I2C_Start>
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, PWR_MGMT_1, 0x00, 1);
  800204:	e0bfff43 	ldbu	r2,-3(fp)
  800208:	11803fcc 	andi	r6,r2,255
  80020c:	3180201c 	xori	r6,r6,128
  800210:	31bfe004 	addi	r6,r6,-128
  800214:	d8000015 	stw	zero,0(sp)
  800218:	00800044 	movi	r2,1
  80021c:	d8800115 	stw	r2,4(sp)
  800220:	01004474 	movhi	r4,273
  800224:	21241c04 	addi	r4,r4,-28560
  800228:	01404474 	movhi	r5,273
  80022c:	29641804 	addi	r5,r5,-28576
  800230:	01c01ac4 	movi	r7,107
  800234:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>

  OSTimeDlyHMSM(0, 0, 0, 100); ; // Wait for all registers to reset
  800238:	0009883a 	mov	r4,zero
  80023c:	000b883a 	mov	r5,zero
  800240:	000d883a 	mov	r6,zero
  800244:	01c01904 	movi	r7,100
  800248:	08187080 	call	818708 <OSTimeDlyHMSM>

  // Get stable time source
  // Auto select clock source to be PLL gyroscope reference if ready else
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, PWR_MGMT_1, 0x01, 1);
  80024c:	e0bfff43 	ldbu	r2,-3(fp)
  800250:	11803fcc 	andi	r6,r2,255
  800254:	3180201c 	xori	r6,r6,128
  800258:	31bfe004 	addi	r6,r6,-128
  80025c:	00800044 	movi	r2,1
  800260:	d8800015 	stw	r2,0(sp)
  800264:	00800044 	movi	r2,1
  800268:	d8800115 	stw	r2,4(sp)
  80026c:	01004474 	movhi	r4,273
  800270:	21241c04 	addi	r4,r4,-28560
  800274:	01404474 	movhi	r5,273
  800278:	29641804 	addi	r5,r5,-28576
  80027c:	01c01ac4 	movi	r7,107
  800280:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>

  OSTimeDlyHMSM(0, 0, 0, 200);
  800284:	0009883a 	mov	r4,zero
  800288:	000b883a 	mov	r5,zero
  80028c:	000d883a 	mov	r6,zero
  800290:	01c03204 	movi	r7,200
  800294:	08187080 	call	818708 <OSTimeDlyHMSM>
  // minimum delay time for this setting is 5.9 ms, which means sensor fusion
  // update rates cannot be higher than 1 / 0.0059 = 170 Hz
  // DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
  // With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!),
  // 8 kHz, or 1 kHz
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, CONFIG, 0x03, 1);
  800298:	e0bfff43 	ldbu	r2,-3(fp)
  80029c:	11803fcc 	andi	r6,r2,255
  8002a0:	3180201c 	xori	r6,r6,128
  8002a4:	31bfe004 	addi	r6,r6,-128
  8002a8:	008000c4 	movi	r2,3
  8002ac:	d8800015 	stw	r2,0(sp)
  8002b0:	00800044 	movi	r2,1
  8002b4:	d8800115 	stw	r2,4(sp)
  8002b8:	01004474 	movhi	r4,273
  8002bc:	21241c04 	addi	r4,r4,-28560
  8002c0:	01404474 	movhi	r5,273
  8002c4:	29641804 	addi	r5,r5,-28576
  8002c8:	01c00684 	movi	r7,26
  8002cc:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>

  // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  // Use a 200 Hz rate; a rate consistent with the filter update rate
  // determined inset in CONFIG above.
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, SMPLRT_DIV, 0x04, 1);
  8002d0:	e0bfff43 	ldbu	r2,-3(fp)
  8002d4:	11803fcc 	andi	r6,r2,255
  8002d8:	3180201c 	xori	r6,r6,128
  8002dc:	31bfe004 	addi	r6,r6,-128
  8002e0:	00800104 	movi	r2,4
  8002e4:	d8800015 	stw	r2,0(sp)
  8002e8:	00800044 	movi	r2,1
  8002ec:	d8800115 	stw	r2,4(sp)
  8002f0:	01004474 	movhi	r4,273
  8002f4:	21241c04 	addi	r4,r4,-28560
  8002f8:	01404474 	movhi	r5,273
  8002fc:	29641804 	addi	r5,r5,-28576
  800300:	01c00644 	movi	r7,25
  800304:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>

  // Set gyroscope full scale range
  // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are
  // left-shifted into positions 4:3
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  800308:	01004474 	movhi	r4,273
  80030c:	21241c04 	addi	r4,r4,-28560
  800310:	01404474 	movhi	r5,273
  800314:	29641804 	addi	r5,r5,-28576
  800318:	0802d5c0 	call	802d5c <I2C_Stop>
  // get current GYRO_CONFIG register value
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  80031c:	01004474 	movhi	r4,273
  800320:	21241c04 	addi	r4,r4,-28560
  800324:	01404474 	movhi	r5,273
  800328:	29641804 	addi	r5,r5,-28576
  80032c:	0802d240 	call	802d24 <I2C_Start>
  I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, GYRO_CONFIG, c, 1, true);
  800330:	e0bfff43 	ldbu	r2,-3(fp)
  800334:	11803fcc 	andi	r6,r2,255
  800338:	3180201c 	xori	r6,r6,128
  80033c:	31bfe004 	addi	r6,r6,-128
  800340:	e0bfff03 	ldbu	r2,-4(fp)
  800344:	d8800015 	stw	r2,0(sp)
  800348:	00800044 	movi	r2,1
  80034c:	d8800115 	stw	r2,4(sp)
  800350:	00800044 	movi	r2,1
  800354:	d8800215 	stw	r2,8(sp)
  800358:	01004474 	movhi	r4,273
  80035c:	21241c04 	addi	r4,r4,-28560
  800360:	01404474 	movhi	r5,273
  800364:	29641804 	addi	r5,r5,-28576
  800368:	01c006c4 	movi	r7,27
  80036c:	08031740 	call	803174 <I2C_ReadFromDeviceRegister>
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  800370:	01004474 	movhi	r4,273
  800374:	21241c04 	addi	r4,r4,-28560
  800378:	01404474 	movhi	r5,273
  80037c:	29641804 	addi	r5,r5,-28576
  800380:	0802d5c0 	call	802d5c <I2C_Stop>
  // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
  800384:	e0ffff03 	ldbu	r3,-4(fp)
  800388:	00bfff44 	movi	r2,-3
  80038c:	1884703a 	and	r2,r3,r2
  800390:	e0bfff05 	stb	r2,-4(fp)
  c = c & ~0x18; // Clear AFS bits [4:3]
  800394:	e0ffff03 	ldbu	r3,-4(fp)
  800398:	00bff9c4 	movi	r2,-25
  80039c:	1884703a 	and	r2,r3,r2
  8003a0:	e0bfff05 	stb	r2,-4(fp)
  c = c | GFS_250DPS   << 3; // Set full scale range for the gyro
  // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of
  // GYRO_CONFIG
  // c =| 0x00;
  // Write new GYRO_CONFIG value to register
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  8003a4:	01004474 	movhi	r4,273
  8003a8:	21241c04 	addi	r4,r4,-28560
  8003ac:	01404474 	movhi	r5,273
  8003b0:	29641804 	addi	r5,r5,-28576
  8003b4:	0802d240 	call	802d24 <I2C_Start>
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, GYRO_CONFIG, c, 1);
  8003b8:	e0bfff43 	ldbu	r2,-3(fp)
  8003bc:	11803fcc 	andi	r6,r2,255
  8003c0:	3180201c 	xori	r6,r6,128
  8003c4:	31bfe004 	addi	r6,r6,-128
  8003c8:	e0bfff03 	ldbu	r2,-4(fp)
  8003cc:	d8800015 	stw	r2,0(sp)
  8003d0:	00800044 	movi	r2,1
  8003d4:	d8800115 	stw	r2,4(sp)
  8003d8:	01004474 	movhi	r4,273
  8003dc:	21241c04 	addi	r4,r4,-28560
  8003e0:	01404474 	movhi	r5,273
  8003e4:	29641804 	addi	r5,r5,-28576
  8003e8:	01c006c4 	movi	r7,27
  8003ec:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  8003f0:	01004474 	movhi	r4,273
  8003f4:	21241c04 	addi	r4,r4,-28560
  8003f8:	01404474 	movhi	r5,273
  8003fc:	29641804 	addi	r5,r5,-28576
  800400:	0802d5c0 	call	802d5c <I2C_Stop>

  // Set accelerometer full-scale range configuration
  // Get current ACCEL_CONFIG register value
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  800404:	01004474 	movhi	r4,273
  800408:	21241c04 	addi	r4,r4,-28560
  80040c:	01404474 	movhi	r5,273
  800410:	29641804 	addi	r5,r5,-28576
  800414:	0802d240 	call	802d24 <I2C_Start>
  I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, ACCEL_CONFIG, c, 1, true);
  800418:	e0bfff43 	ldbu	r2,-3(fp)
  80041c:	11803fcc 	andi	r6,r2,255
  800420:	3180201c 	xori	r6,r6,128
  800424:	31bfe004 	addi	r6,r6,-128
  800428:	e0bfff03 	ldbu	r2,-4(fp)
  80042c:	d8800015 	stw	r2,0(sp)
  800430:	00800044 	movi	r2,1
  800434:	d8800115 	stw	r2,4(sp)
  800438:	00800044 	movi	r2,1
  80043c:	d8800215 	stw	r2,8(sp)
  800440:	01004474 	movhi	r4,273
  800444:	21241c04 	addi	r4,r4,-28560
  800448:	01404474 	movhi	r5,273
  80044c:	29641804 	addi	r5,r5,-28576
  800450:	01c00704 	movi	r7,28
  800454:	08031740 	call	803174 <I2C_ReadFromDeviceRegister>
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  800458:	01004474 	movhi	r4,273
  80045c:	21241c04 	addi	r4,r4,-28560
  800460:	01404474 	movhi	r5,273
  800464:	29641804 	addi	r5,r5,-28576
  800468:	0802d5c0 	call	802d5c <I2C_Stop>
  // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
  80046c:	e0ffff03 	ldbu	r3,-4(fp)
  800470:	00bff9c4 	movi	r2,-25
  800474:	1884703a 	and	r2,r3,r2
  800478:	e0bfff05 	stb	r2,-4(fp)
  c = c | AFS_2G << 3; // Set full scale range for the accelerometer
  // Write new ACCEL_CONFIG register value
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  80047c:	01004474 	movhi	r4,273
  800480:	21241c04 	addi	r4,r4,-28560
  800484:	01404474 	movhi	r5,273
  800488:	29641804 	addi	r5,r5,-28576
  80048c:	0802d240 	call	802d24 <I2C_Start>
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, ACCEL_CONFIG, c, 1);
  800490:	e0bfff43 	ldbu	r2,-3(fp)
  800494:	11803fcc 	andi	r6,r2,255
  800498:	3180201c 	xori	r6,r6,128
  80049c:	31bfe004 	addi	r6,r6,-128
  8004a0:	e0bfff03 	ldbu	r2,-4(fp)
  8004a4:	d8800015 	stw	r2,0(sp)
  8004a8:	00800044 	movi	r2,1
  8004ac:	d8800115 	stw	r2,4(sp)
  8004b0:	01004474 	movhi	r4,273
  8004b4:	21241c04 	addi	r4,r4,-28560
  8004b8:	01404474 	movhi	r5,273
  8004bc:	29641804 	addi	r5,r5,-28576
  8004c0:	01c00704 	movi	r7,28
  8004c4:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  8004c8:	01004474 	movhi	r4,273
  8004cc:	21241c04 	addi	r4,r4,-28560
  8004d0:	01404474 	movhi	r5,273
  8004d4:	29641804 	addi	r5,r5,-28576
  8004d8:	0802d5c0 	call	802d5c <I2C_Stop>
  // Set accelerometer sample rate configuration
  // It is possible to get a 4 kHz sample rate from the accelerometer by
  // choosing 1 for accel_fchoice_b bit [3]; in this case the bandwidth is
  // 1.13 kHz
  // Get current ACCEL_CONFIG2 register value
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  8004dc:	01004474 	movhi	r4,273
  8004e0:	21241c04 	addi	r4,r4,-28560
  8004e4:	01404474 	movhi	r5,273
  8004e8:	29641804 	addi	r5,r5,-28576
  8004ec:	0802d240 	call	802d24 <I2C_Start>
  I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, ACCEL_CONFIG2, c, 1, true);
  8004f0:	e0bfff43 	ldbu	r2,-3(fp)
  8004f4:	11803fcc 	andi	r6,r2,255
  8004f8:	3180201c 	xori	r6,r6,128
  8004fc:	31bfe004 	addi	r6,r6,-128
  800500:	e0bfff03 	ldbu	r2,-4(fp)
  800504:	d8800015 	stw	r2,0(sp)
  800508:	00800044 	movi	r2,1
  80050c:	d8800115 	stw	r2,4(sp)
  800510:	00800044 	movi	r2,1
  800514:	d8800215 	stw	r2,8(sp)
  800518:	01004474 	movhi	r4,273
  80051c:	21241c04 	addi	r4,r4,-28560
  800520:	01404474 	movhi	r5,273
  800524:	29641804 	addi	r5,r5,-28576
  800528:	01c00744 	movi	r7,29
  80052c:	08031740 	call	803174 <I2C_ReadFromDeviceRegister>
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  800530:	01004474 	movhi	r4,273
  800534:	21241c04 	addi	r4,r4,-28560
  800538:	01404474 	movhi	r5,273
  80053c:	29641804 	addi	r5,r5,-28576
  800540:	0802d5c0 	call	802d5c <I2C_Stop>
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
  800544:	e0ffff03 	ldbu	r3,-4(fp)
  800548:	00bffc04 	movi	r2,-16
  80054c:	1884703a 	and	r2,r3,r2
  800550:	e0bfff05 	stb	r2,-4(fp)
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
  800554:	e0bfff03 	ldbu	r2,-4(fp)
  800558:	108000d4 	ori	r2,r2,3
  80055c:	e0bfff05 	stb	r2,-4(fp)

  // Write new ACCEL_CONFIG2 register value
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  800560:	01004474 	movhi	r4,273
  800564:	21241c04 	addi	r4,r4,-28560
  800568:	01404474 	movhi	r5,273
  80056c:	29641804 	addi	r5,r5,-28576
  800570:	0802d240 	call	802d24 <I2C_Start>
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, ACCEL_CONFIG2, c, 1);
  800574:	e0bfff43 	ldbu	r2,-3(fp)
  800578:	11803fcc 	andi	r6,r2,255
  80057c:	3180201c 	xori	r6,r6,128
  800580:	31bfe004 	addi	r6,r6,-128
  800584:	e0bfff03 	ldbu	r2,-4(fp)
  800588:	d8800015 	stw	r2,0(sp)
  80058c:	00800044 	movi	r2,1
  800590:	d8800115 	stw	r2,4(sp)
  800594:	01004474 	movhi	r4,273
  800598:	21241c04 	addi	r4,r4,-28560
  80059c:	01404474 	movhi	r5,273
  8005a0:	29641804 	addi	r5,r5,-28576
  8005a4:	01c00744 	movi	r7,29
  8005a8:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, hold interrupt pin level HIGH
  // until interrupt cleared, clear on read of INT_STATUS, and enable
  // I2C_BYPASS_EN so additional chips can join the I2C bus and all can be
  // controlled by the Arduino as master.
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, INT_PIN_CFG, 0x22, 1);
  8005ac:	e0bfff43 	ldbu	r2,-3(fp)
  8005b0:	11803fcc 	andi	r6,r2,255
  8005b4:	3180201c 	xori	r6,r6,128
  8005b8:	31bfe004 	addi	r6,r6,-128
  8005bc:	00800884 	movi	r2,34
  8005c0:	d8800015 	stw	r2,0(sp)
  8005c4:	00800044 	movi	r2,1
  8005c8:	d8800115 	stw	r2,4(sp)
  8005cc:	01004474 	movhi	r4,273
  8005d0:	21241c04 	addi	r4,r4,-28560
  8005d4:	01404474 	movhi	r5,273
  8005d8:	29641804 	addi	r5,r5,-28576
  8005dc:	01c00dc4 	movi	r7,55
  8005e0:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>

  // Enable data ready (bit 0) interrupt
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, INT_ENABLE, 0x01, 1);
  8005e4:	e0bfff43 	ldbu	r2,-3(fp)
  8005e8:	11803fcc 	andi	r6,r2,255
  8005ec:	3180201c 	xori	r6,r6,128
  8005f0:	31bfe004 	addi	r6,r6,-128
  8005f4:	00800044 	movi	r2,1
  8005f8:	d8800015 	stw	r2,0(sp)
  8005fc:	00800044 	movi	r2,1
  800600:	d8800115 	stw	r2,4(sp)
  800604:	01004474 	movhi	r4,273
  800608:	21241c04 	addi	r4,r4,-28560
  80060c:	01404474 	movhi	r5,273
  800610:	29641804 	addi	r5,r5,-28576
  800614:	01c00e04 	movi	r7,56
  800618:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>

  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  80061c:	01004474 	movhi	r4,273
  800620:	21241c04 	addi	r4,r4,-28560
  800624:	01404474 	movhi	r5,273
  800628:	29641804 	addi	r5,r5,-28576
  80062c:	0802d5c0 	call	802d5c <I2C_Stop>
  OSTimeDlyHMSM(0, 0, 0, 100);
  800630:	0009883a 	mov	r4,zero
  800634:	000b883a 	mov	r5,zero
  800638:	000d883a 	mov	r6,zero
  80063c:	01c01904 	movi	r7,100
  800640:	08187080 	call	818708 <OSTimeDlyHMSM>
}
  800644:	e037883a 	mov	sp,fp
  800648:	dfc00117 	ldw	ra,4(sp)
  80064c:	df000017 	ldw	fp,0(sp)
  800650:	dec00204 	addi	sp,sp,8
  800654:	f800283a 	ret

00800658 <calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device
// initialization. It calculates the average of the at-rest readings and then
// loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(float * gyroBias, float * accelBias) {
  800658:	deffd704 	addi	sp,sp,-164
  80065c:	dfc02815 	stw	ra,160(sp)
  800660:	df002715 	stw	fp,156(sp)
  800664:	dc402615 	stw	r17,152(sp)
  800668:	dc002515 	stw	r16,148(sp)
  80066c:	df002504 	addi	fp,sp,148
  800670:	e13ff215 	stw	r4,-56(fp)
  800674:	e17ff315 	stw	r5,-52(fp)

  alt_u8 deviceAddress = 0xD0;
  800678:	00bff404 	movi	r2,-48
  80067c:	e0bfe185 	stb	r2,-122(fp)
  alt_u8 data[12]; // data array to hold accelerometer and gyro x, y, z, data
  alt_u16 ii, packet_count, fifo_count;
  alt_32 gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
  800680:	e03fe515 	stw	zero,-108(fp)
  800684:	e03fe615 	stw	zero,-104(fp)
  800688:	e03fe715 	stw	zero,-100(fp)
  80068c:	e03fe815 	stw	zero,-96(fp)
  800690:	e03fe915 	stw	zero,-92(fp)
  800694:	e03fea15 	stw	zero,-88(fp)

  // reset device
  // Write a one to bit 7 reset bit; toggle reset device
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  800698:	01004474 	movhi	r4,273
  80069c:	21241c04 	addi	r4,r4,-28560
  8006a0:	01404474 	movhi	r5,273
  8006a4:	29641804 	addi	r5,r5,-28576
  8006a8:	0802d240 	call	802d24 <I2C_Start>
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, PWR_MGMT_1, READ_FLAG, 1);
  8006ac:	e0bfe183 	ldbu	r2,-122(fp)
  8006b0:	11803fcc 	andi	r6,r2,255
  8006b4:	3180201c 	xori	r6,r6,128
  8006b8:	31bfe004 	addi	r6,r6,-128
  8006bc:	00802004 	movi	r2,128
  8006c0:	d8800015 	stw	r2,0(sp)
  8006c4:	00800044 	movi	r2,1
  8006c8:	d8800115 	stw	r2,4(sp)
  8006cc:	01004474 	movhi	r4,273
  8006d0:	21241c04 	addi	r4,r4,-28560
  8006d4:	01404474 	movhi	r5,273
  8006d8:	29641804 	addi	r5,r5,-28576
  8006dc:	01c01ac4 	movi	r7,107
  8006e0:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  OSTimeDlyHMSM(0, 0, 0, 100);
  8006e4:	0009883a 	mov	r4,zero
  8006e8:	000b883a 	mov	r5,zero
  8006ec:	000d883a 	mov	r6,zero
  8006f0:	01c01904 	movi	r7,100
  8006f4:	08187080 	call	818708 <OSTimeDlyHMSM>
  // get stable time source; Auto select clock source to be PLL gyroscope
  // reference if ready else use the internal oscillator, bits 2:0 = 001
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, PWR_MGMT_1, 0x01, 1);
  8006f8:	e0bfe183 	ldbu	r2,-122(fp)
  8006fc:	11803fcc 	andi	r6,r2,255
  800700:	3180201c 	xori	r6,r6,128
  800704:	31bfe004 	addi	r6,r6,-128
  800708:	00800044 	movi	r2,1
  80070c:	d8800015 	stw	r2,0(sp)
  800710:	00800044 	movi	r2,1
  800714:	d8800115 	stw	r2,4(sp)
  800718:	01004474 	movhi	r4,273
  80071c:	21241c04 	addi	r4,r4,-28560
  800720:	01404474 	movhi	r5,273
  800724:	29641804 	addi	r5,r5,-28576
  800728:	01c01ac4 	movi	r7,107
  80072c:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, PWR_MGMT_2, 0x00, 1);
  800730:	e0bfe183 	ldbu	r2,-122(fp)
  800734:	11803fcc 	andi	r6,r2,255
  800738:	3180201c 	xori	r6,r6,128
  80073c:	31bfe004 	addi	r6,r6,-128
  800740:	d8000015 	stw	zero,0(sp)
  800744:	00800044 	movi	r2,1
  800748:	d8800115 	stw	r2,4(sp)
  80074c:	01004474 	movhi	r4,273
  800750:	21241c04 	addi	r4,r4,-28560
  800754:	01404474 	movhi	r5,273
  800758:	29641804 	addi	r5,r5,-28576
  80075c:	01c01b04 	movi	r7,108
  800760:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>

  OSTimeDlyHMSM(0, 0, 0, 200);
  800764:	0009883a 	mov	r4,zero
  800768:	000b883a 	mov	r5,zero
  80076c:	000d883a 	mov	r6,zero
  800770:	01c03204 	movi	r7,200
  800774:	08187080 	call	818708 <OSTimeDlyHMSM>

  // Configure device for bias calculation
  // Disable all interrupts
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, INT_ENABLE, 0x00, 1);
  800778:	e0bfe183 	ldbu	r2,-122(fp)
  80077c:	11803fcc 	andi	r6,r2,255
  800780:	3180201c 	xori	r6,r6,128
  800784:	31bfe004 	addi	r6,r6,-128
  800788:	d8000015 	stw	zero,0(sp)
  80078c:	00800044 	movi	r2,1
  800790:	d8800115 	stw	r2,4(sp)
  800794:	01004474 	movhi	r4,273
  800798:	21241c04 	addi	r4,r4,-28560
  80079c:	01404474 	movhi	r5,273
  8007a0:	29641804 	addi	r5,r5,-28576
  8007a4:	01c00e04 	movi	r7,56
  8007a8:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  // Disable FIFO
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, FIFO_EN, 0x00, 1);
  8007ac:	e0bfe183 	ldbu	r2,-122(fp)
  8007b0:	11803fcc 	andi	r6,r2,255
  8007b4:	3180201c 	xori	r6,r6,128
  8007b8:	31bfe004 	addi	r6,r6,-128
  8007bc:	d8000015 	stw	zero,0(sp)
  8007c0:	00800044 	movi	r2,1
  8007c4:	d8800115 	stw	r2,4(sp)
  8007c8:	01004474 	movhi	r4,273
  8007cc:	21241c04 	addi	r4,r4,-28560
  8007d0:	01404474 	movhi	r5,273
  8007d4:	29641804 	addi	r5,r5,-28576
  8007d8:	01c008c4 	movi	r7,35
  8007dc:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  // Turn on internal clock source
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, PWR_MGMT_1, 0x00, 1);
  8007e0:	e0bfe183 	ldbu	r2,-122(fp)
  8007e4:	11803fcc 	andi	r6,r2,255
  8007e8:	3180201c 	xori	r6,r6,128
  8007ec:	31bfe004 	addi	r6,r6,-128
  8007f0:	d8000015 	stw	zero,0(sp)
  8007f4:	00800044 	movi	r2,1
  8007f8:	d8800115 	stw	r2,4(sp)
  8007fc:	01004474 	movhi	r4,273
  800800:	21241c04 	addi	r4,r4,-28560
  800804:	01404474 	movhi	r5,273
  800808:	29641804 	addi	r5,r5,-28576
  80080c:	01c01ac4 	movi	r7,107
  800810:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  // Disable I2C master
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, I2C_MST_CTRL, 0x00, 1);
  800814:	e0bfe183 	ldbu	r2,-122(fp)
  800818:	11803fcc 	andi	r6,r2,255
  80081c:	3180201c 	xori	r6,r6,128
  800820:	31bfe004 	addi	r6,r6,-128
  800824:	d8000015 	stw	zero,0(sp)
  800828:	00800044 	movi	r2,1
  80082c:	d8800115 	stw	r2,4(sp)
  800830:	01004474 	movhi	r4,273
  800834:	21241c04 	addi	r4,r4,-28560
  800838:	01404474 	movhi	r5,273
  80083c:	29641804 	addi	r5,r5,-28576
  800840:	01c00904 	movi	r7,36
  800844:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  // Disable FIFO and I2C master modes
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress,  USER_CTRL, 0x00, 1);
  800848:	e0bfe183 	ldbu	r2,-122(fp)
  80084c:	11803fcc 	andi	r6,r2,255
  800850:	3180201c 	xori	r6,r6,128
  800854:	31bfe004 	addi	r6,r6,-128
  800858:	d8000015 	stw	zero,0(sp)
  80085c:	00800044 	movi	r2,1
  800860:	d8800115 	stw	r2,4(sp)
  800864:	01004474 	movhi	r4,273
  800868:	21241c04 	addi	r4,r4,-28560
  80086c:	01404474 	movhi	r5,273
  800870:	29641804 	addi	r5,r5,-28576
  800874:	01c01a84 	movi	r7,106
  800878:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  // Reset FIFO and DMP
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress,  USER_CTRL, 0x0C, 1);
  80087c:	e0bfe183 	ldbu	r2,-122(fp)
  800880:	11803fcc 	andi	r6,r2,255
  800884:	3180201c 	xori	r6,r6,128
  800888:	31bfe004 	addi	r6,r6,-128
  80088c:	00800304 	movi	r2,12
  800890:	d8800015 	stw	r2,0(sp)
  800894:	00800044 	movi	r2,1
  800898:	d8800115 	stw	r2,4(sp)
  80089c:	01004474 	movhi	r4,273
  8008a0:	21241c04 	addi	r4,r4,-28560
  8008a4:	01404474 	movhi	r5,273
  8008a8:	29641804 	addi	r5,r5,-28576
  8008ac:	01c01a84 	movi	r7,106
  8008b0:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  OSTimeDlyHMSM(0, 0, 0, 15);
  8008b4:	0009883a 	mov	r4,zero
  8008b8:	000b883a 	mov	r5,zero
  8008bc:	000d883a 	mov	r6,zero
  8008c0:	01c003c4 	movi	r7,15
  8008c4:	08187080 	call	818708 <OSTimeDlyHMSM>

  // Configure MPU6050 gyro and accelerometer for bias calculation
  // Set low-pass filter to 188 Hz
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, CONFIG, 0x01, 1);
  8008c8:	e0bfe183 	ldbu	r2,-122(fp)
  8008cc:	11803fcc 	andi	r6,r2,255
  8008d0:	3180201c 	xori	r6,r6,128
  8008d4:	31bfe004 	addi	r6,r6,-128
  8008d8:	00800044 	movi	r2,1
  8008dc:	d8800015 	stw	r2,0(sp)
  8008e0:	00800044 	movi	r2,1
  8008e4:	d8800115 	stw	r2,4(sp)
  8008e8:	01004474 	movhi	r4,273
  8008ec:	21241c04 	addi	r4,r4,-28560
  8008f0:	01404474 	movhi	r5,273
  8008f4:	29641804 	addi	r5,r5,-28576
  8008f8:	01c00684 	movi	r7,26
  8008fc:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  // Set sample rate to 1 kHz
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress,  SMPLRT_DIV, 0x00, 1);
  800900:	e0bfe183 	ldbu	r2,-122(fp)
  800904:	11803fcc 	andi	r6,r2,255
  800908:	3180201c 	xori	r6,r6,128
  80090c:	31bfe004 	addi	r6,r6,-128
  800910:	d8000015 	stw	zero,0(sp)
  800914:	00800044 	movi	r2,1
  800918:	d8800115 	stw	r2,4(sp)
  80091c:	01004474 	movhi	r4,273
  800920:	21241c04 	addi	r4,r4,-28560
  800924:	01404474 	movhi	r5,273
  800928:	29641804 	addi	r5,r5,-28576
  80092c:	01c00644 	movi	r7,25
  800930:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, GYRO_CONFIG, 0x00, 1);
  800934:	e0bfe183 	ldbu	r2,-122(fp)
  800938:	11803fcc 	andi	r6,r2,255
  80093c:	3180201c 	xori	r6,r6,128
  800940:	31bfe004 	addi	r6,r6,-128
  800944:	d8000015 	stw	zero,0(sp)
  800948:	00800044 	movi	r2,1
  80094c:	d8800115 	stw	r2,4(sp)
  800950:	01004474 	movhi	r4,273
  800954:	21241c04 	addi	r4,r4,-28560
  800958:	01404474 	movhi	r5,273
  80095c:	29641804 	addi	r5,r5,-28576
  800960:	01c006c4 	movi	r7,27
  800964:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  // Set accelerometer full-scale to 2 g, maximum sensitivity
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress,  ACCEL_CONFIG, 0x00, 1);
  800968:	e0bfe183 	ldbu	r2,-122(fp)
  80096c:	11803fcc 	andi	r6,r2,255
  800970:	3180201c 	xori	r6,r6,128
  800974:	31bfe004 	addi	r6,r6,-128
  800978:	d8000015 	stw	zero,0(sp)
  80097c:	00800044 	movi	r2,1
  800980:	d8800115 	stw	r2,4(sp)
  800984:	01004474 	movhi	r4,273
  800988:	21241c04 	addi	r4,r4,-28560
  80098c:	01404474 	movhi	r5,273
  800990:	29641804 	addi	r5,r5,-28576
  800994:	01c00704 	movi	r7,28
  800998:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>

  alt_u16  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
  80099c:	008020c4 	movi	r2,131
  8009a0:	e0bfdf8d 	sth	r2,-130(fp)
  alt_u16  accelsensitivity = 16384; // = 16384 LSB/g
  8009a4:	00900004 	movi	r2,16384
  8009a8:	e0bfdf0d 	sth	r2,-132(fp)

  // Configure FIFO to capture accelerometer and gyro data for bias calculation
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress,  USER_CTRL, 0x40, 1);  // Enable FIFO
  8009ac:	e0bfe183 	ldbu	r2,-122(fp)
  8009b0:	11803fcc 	andi	r6,r2,255
  8009b4:	3180201c 	xori	r6,r6,128
  8009b8:	31bfe004 	addi	r6,r6,-128
  8009bc:	00801004 	movi	r2,64
  8009c0:	d8800015 	stw	r2,0(sp)
  8009c4:	00800044 	movi	r2,1
  8009c8:	d8800115 	stw	r2,4(sp)
  8009cc:	01004474 	movhi	r4,273
  8009d0:	21241c04 	addi	r4,r4,-28560
  8009d4:	01404474 	movhi	r5,273
  8009d8:	29641804 	addi	r5,r5,-28576
  8009dc:	01c01a84 	movi	r7,106
  8009e0:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in
  // MPU-9150)
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress,  FIFO_EN, 0x78, 1);
  8009e4:	e0bfe183 	ldbu	r2,-122(fp)
  8009e8:	11803fcc 	andi	r6,r2,255
  8009ec:	3180201c 	xori	r6,r6,128
  8009f0:	31bfe004 	addi	r6,r6,-128
  8009f4:	00801e04 	movi	r2,120
  8009f8:	d8800015 	stw	r2,0(sp)
  8009fc:	00800044 	movi	r2,1
  800a00:	d8800115 	stw	r2,4(sp)
  800a04:	01004474 	movhi	r4,273
  800a08:	21241c04 	addi	r4,r4,-28560
  800a0c:	01404474 	movhi	r5,273
  800a10:	29641804 	addi	r5,r5,-28576
  800a14:	01c008c4 	movi	r7,35
  800a18:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>

  OSTimeDlyHMSM(0, 0, 0, 40);  // accumulate 40 samples in 40 milliseconds = 480 bytes
  800a1c:	0009883a 	mov	r4,zero
  800a20:	000b883a 	mov	r5,zero
  800a24:	000d883a 	mov	r6,zero
  800a28:	01c00a04 	movi	r7,40
  800a2c:	08187080 	call	818708 <OSTimeDlyHMSM>

  // At end of sample accumulation, turn off FIFO sensor read
  // Disable gyro and accelerometer sensors for FIFO
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress,  FIFO_EN, 0x00, 1);
  800a30:	e0bfe183 	ldbu	r2,-122(fp)
  800a34:	11803fcc 	andi	r6,r2,255
  800a38:	3180201c 	xori	r6,r6,128
  800a3c:	31bfe004 	addi	r6,r6,-128
  800a40:	d8000015 	stw	zero,0(sp)
  800a44:	00800044 	movi	r2,1
  800a48:	d8800115 	stw	r2,4(sp)
  800a4c:	01004474 	movhi	r4,273
  800a50:	21241c04 	addi	r4,r4,-28560
  800a54:	01404474 	movhi	r5,273
  800a58:	29641804 	addi	r5,r5,-28576
  800a5c:	01c008c4 	movi	r7,35
  800a60:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>


  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  800a64:	01004474 	movhi	r4,273
  800a68:	21241c04 	addi	r4,r4,-28560
  800a6c:	01404474 	movhi	r5,273
  800a70:	29641804 	addi	r5,r5,-28576
  800a74:	0802d5c0 	call	802d5c <I2C_Stop>

  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  800a78:	01004474 	movhi	r4,273
  800a7c:	21241c04 	addi	r4,r4,-28560
  800a80:	01404474 	movhi	r5,273
  800a84:	29641804 	addi	r5,r5,-28576
  800a88:	0802d240 	call	802d24 <I2C_Start>
  // Read FIFO sample count
  I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, FIFO_COUNTH, &data[0], 2, true);
  800a8c:	e0bfe183 	ldbu	r2,-122(fp)
  800a90:	11803fcc 	andi	r6,r2,255
  800a94:	3180201c 	xori	r6,r6,128
  800a98:	31bfe004 	addi	r6,r6,-128
  800a9c:	e0bfe1c4 	addi	r2,fp,-121
  800aa0:	d8800015 	stw	r2,0(sp)
  800aa4:	00800084 	movi	r2,2
  800aa8:	d8800115 	stw	r2,4(sp)
  800aac:	00800044 	movi	r2,1
  800ab0:	d8800215 	stw	r2,8(sp)
  800ab4:	01004474 	movhi	r4,273
  800ab8:	21241c04 	addi	r4,r4,-28560
  800abc:	01404474 	movhi	r5,273
  800ac0:	29641804 	addi	r5,r5,-28576
  800ac4:	01c01c84 	movi	r7,114
  800ac8:	08031740 	call	803174 <I2C_ReadFromDeviceRegister>
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  800acc:	01004474 	movhi	r4,273
  800ad0:	21241c04 	addi	r4,r4,-28560
  800ad4:	01404474 	movhi	r5,273
  800ad8:	29641804 	addi	r5,r5,-28576
  800adc:	0802d5c0 	call	802d5c <I2C_Stop>

  fifo_count = ((alt_u16)data[0] << 8) | data[1];
  800ae0:	e0bfe1c3 	ldbu	r2,-121(fp)
  800ae4:	10803fcc 	andi	r2,r2,255
  800ae8:	1004923a 	slli	r2,r2,8
  800aec:	1007883a 	mov	r3,r2
  800af0:	e0bfe203 	ldbu	r2,-120(fp)
  800af4:	10803fcc 	andi	r2,r2,255
  800af8:	1884b03a 	or	r2,r3,r2
  800afc:	e0bfe00d 	sth	r2,-128(fp)
  // How many sets of full gyro and accelerometer data for averaging
  packet_count = fifo_count/12;
  800b00:	e13fe00b 	ldhu	r4,-128(fp)
  800b04:	01400304 	movi	r5,12
  800b08:	0806c2c0 	call	806c2c <__udivsi3>
  800b0c:	e0bfe08d 	sth	r2,-126(fp)

  for (ii = 0; ii < packet_count; ii++)
  800b10:	e03fe10d 	sth	zero,-124(fp)
  800b14:	00007d06 	br	800d0c <calibrateMPU9250+0x6b4>
  {
    alt_16 accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
  800b18:	e03fef0d 	sth	zero,-68(fp)
  800b1c:	e03fef8d 	sth	zero,-66(fp)
  800b20:	e03ff00d 	sth	zero,-64(fp)
  800b24:	e03ff08d 	sth	zero,-62(fp)
  800b28:	e03ff10d 	sth	zero,-60(fp)
  800b2c:	e03ff18d 	sth	zero,-58(fp)
    // Read data for averaging
    I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  800b30:	01004474 	movhi	r4,273
  800b34:	21241c04 	addi	r4,r4,-28560
  800b38:	01404474 	movhi	r5,273
  800b3c:	29641804 	addi	r5,r5,-28576
  800b40:	0802d240 	call	802d24 <I2C_Start>
	// Read FIFO sample count
	I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, FIFO_R_W, &data[0], 12, true);
  800b44:	e0bfe183 	ldbu	r2,-122(fp)
  800b48:	11803fcc 	andi	r6,r2,255
  800b4c:	3180201c 	xori	r6,r6,128
  800b50:	31bfe004 	addi	r6,r6,-128
  800b54:	e0bfe1c4 	addi	r2,fp,-121
  800b58:	d8800015 	stw	r2,0(sp)
  800b5c:	00800304 	movi	r2,12
  800b60:	d8800115 	stw	r2,4(sp)
  800b64:	00800044 	movi	r2,1
  800b68:	d8800215 	stw	r2,8(sp)
  800b6c:	01004474 	movhi	r4,273
  800b70:	21241c04 	addi	r4,r4,-28560
  800b74:	01404474 	movhi	r5,273
  800b78:	29641804 	addi	r5,r5,-28576
  800b7c:	01c01d04 	movi	r7,116
  800b80:	08031740 	call	803174 <I2C_ReadFromDeviceRegister>
	I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  800b84:	01004474 	movhi	r4,273
  800b88:	21241c04 	addi	r4,r4,-28560
  800b8c:	01404474 	movhi	r5,273
  800b90:	29641804 	addi	r5,r5,-28576
  800b94:	0802d5c0 	call	802d5c <I2C_Stop>
    // Form signed 16-bit integer for each sample in FIFO
    accel_temp[0] = (alt_16) (((alt_16)data[0] << 8) | data[1]  );
  800b98:	e0bfe1c3 	ldbu	r2,-121(fp)
  800b9c:	10803fcc 	andi	r2,r2,255
  800ba0:	1004923a 	slli	r2,r2,8
  800ba4:	1007883a 	mov	r3,r2
  800ba8:	e0bfe203 	ldbu	r2,-120(fp)
  800bac:	10803fcc 	andi	r2,r2,255
  800bb0:	1884b03a 	or	r2,r3,r2
  800bb4:	e0bfef0d 	sth	r2,-68(fp)
    accel_temp[1] = (alt_16) (((alt_16)data[2] << 8) | data[3]  );
  800bb8:	e0bfe243 	ldbu	r2,-119(fp)
  800bbc:	10803fcc 	andi	r2,r2,255
  800bc0:	1004923a 	slli	r2,r2,8
  800bc4:	1007883a 	mov	r3,r2
  800bc8:	e0bfe283 	ldbu	r2,-118(fp)
  800bcc:	10803fcc 	andi	r2,r2,255
  800bd0:	1884b03a 	or	r2,r3,r2
  800bd4:	e0bfef8d 	sth	r2,-66(fp)
    accel_temp[2] = (alt_16) (((alt_16)data[4] << 8) | data[5]  );
  800bd8:	e0bfe2c3 	ldbu	r2,-117(fp)
  800bdc:	10803fcc 	andi	r2,r2,255
  800be0:	1004923a 	slli	r2,r2,8
  800be4:	1007883a 	mov	r3,r2
  800be8:	e0bfe303 	ldbu	r2,-116(fp)
  800bec:	10803fcc 	andi	r2,r2,255
  800bf0:	1884b03a 	or	r2,r3,r2
  800bf4:	e0bff00d 	sth	r2,-64(fp)
    gyro_temp[0]  = (alt_16) (((alt_16)data[6] << 8) | data[7]  );
  800bf8:	e0bfe343 	ldbu	r2,-115(fp)
  800bfc:	10803fcc 	andi	r2,r2,255
  800c00:	1004923a 	slli	r2,r2,8
  800c04:	1007883a 	mov	r3,r2
  800c08:	e0bfe383 	ldbu	r2,-114(fp)
  800c0c:	10803fcc 	andi	r2,r2,255
  800c10:	1884b03a 	or	r2,r3,r2
  800c14:	e0bff08d 	sth	r2,-62(fp)
    gyro_temp[1]  = (alt_16) (((alt_16)data[8] << 8) | data[9]  );
  800c18:	e0bfe3c3 	ldbu	r2,-113(fp)
  800c1c:	10803fcc 	andi	r2,r2,255
  800c20:	1004923a 	slli	r2,r2,8
  800c24:	1007883a 	mov	r3,r2
  800c28:	e0bfe403 	ldbu	r2,-112(fp)
  800c2c:	10803fcc 	andi	r2,r2,255
  800c30:	1884b03a 	or	r2,r3,r2
  800c34:	e0bff10d 	sth	r2,-60(fp)
    gyro_temp[2]  = (alt_16) (((alt_16)data[10] << 8) | data[11]);
  800c38:	e0bfe443 	ldbu	r2,-111(fp)
  800c3c:	10803fcc 	andi	r2,r2,255
  800c40:	1004923a 	slli	r2,r2,8
  800c44:	1007883a 	mov	r3,r2
  800c48:	e0bfe483 	ldbu	r2,-110(fp)
  800c4c:	10803fcc 	andi	r2,r2,255
  800c50:	1884b03a 	or	r2,r3,r2
  800c54:	e0bff18d 	sth	r2,-58(fp)

    // Sum individual signed 16-bit biases to get accumulated signed 32-bit
    // biases.
    accel_bias[0] += (alt_32) accel_temp[0];
  800c58:	e0ffe817 	ldw	r3,-96(fp)
  800c5c:	e0bfef0b 	ldhu	r2,-68(fp)
  800c60:	10bfffcc 	andi	r2,r2,65535
  800c64:	10a0001c 	xori	r2,r2,32768
  800c68:	10a00004 	addi	r2,r2,-32768
  800c6c:	1885883a 	add	r2,r3,r2
  800c70:	e0bfe815 	stw	r2,-96(fp)
    accel_bias[1] += (alt_32) accel_temp[1];
  800c74:	e0ffe917 	ldw	r3,-92(fp)
  800c78:	e0bfef8b 	ldhu	r2,-66(fp)
  800c7c:	10bfffcc 	andi	r2,r2,65535
  800c80:	10a0001c 	xori	r2,r2,32768
  800c84:	10a00004 	addi	r2,r2,-32768
  800c88:	1885883a 	add	r2,r3,r2
  800c8c:	e0bfe915 	stw	r2,-92(fp)
    accel_bias[2] += (alt_32) accel_temp[2];
  800c90:	e0ffea17 	ldw	r3,-88(fp)
  800c94:	e0bff00b 	ldhu	r2,-64(fp)
  800c98:	10bfffcc 	andi	r2,r2,65535
  800c9c:	10a0001c 	xori	r2,r2,32768
  800ca0:	10a00004 	addi	r2,r2,-32768
  800ca4:	1885883a 	add	r2,r3,r2
  800ca8:	e0bfea15 	stw	r2,-88(fp)
    gyro_bias[0]  += (alt_32) gyro_temp[0];
  800cac:	e0ffe517 	ldw	r3,-108(fp)
  800cb0:	e0bff08b 	ldhu	r2,-62(fp)
  800cb4:	10bfffcc 	andi	r2,r2,65535
  800cb8:	10a0001c 	xori	r2,r2,32768
  800cbc:	10a00004 	addi	r2,r2,-32768
  800cc0:	1885883a 	add	r2,r3,r2
  800cc4:	e0bfe515 	stw	r2,-108(fp)
    gyro_bias[1]  += (alt_32) gyro_temp[1];
  800cc8:	e0ffe617 	ldw	r3,-104(fp)
  800ccc:	e0bff10b 	ldhu	r2,-60(fp)
  800cd0:	10bfffcc 	andi	r2,r2,65535
  800cd4:	10a0001c 	xori	r2,r2,32768
  800cd8:	10a00004 	addi	r2,r2,-32768
  800cdc:	1885883a 	add	r2,r3,r2
  800ce0:	e0bfe615 	stw	r2,-104(fp)
    gyro_bias[2]  += (alt_32) gyro_temp[2];
  800ce4:	e0ffe717 	ldw	r3,-100(fp)
  800ce8:	e0bff18b 	ldhu	r2,-58(fp)
  800cec:	10bfffcc 	andi	r2,r2,65535
  800cf0:	10a0001c 	xori	r2,r2,32768
  800cf4:	10a00004 	addi	r2,r2,-32768
  800cf8:	1885883a 	add	r2,r3,r2
  800cfc:	e0bfe715 	stw	r2,-100(fp)

  fifo_count = ((alt_u16)data[0] << 8) | data[1];
  // How many sets of full gyro and accelerometer data for averaging
  packet_count = fifo_count/12;

  for (ii = 0; ii < packet_count; ii++)
  800d00:	e0bfe10b 	ldhu	r2,-124(fp)
  800d04:	10800044 	addi	r2,r2,1
  800d08:	e0bfe10d 	sth	r2,-124(fp)
  800d0c:	e0ffe10b 	ldhu	r3,-124(fp)
  800d10:	e0bfe08b 	ldhu	r2,-126(fp)
  800d14:	18bf8036 	bltu	r3,r2,800b18 <calibrateMPU9250+0x4c0>
    gyro_bias[0]  += (alt_32) gyro_temp[0];
    gyro_bias[1]  += (alt_32) gyro_temp[1];
    gyro_bias[2]  += (alt_32) gyro_temp[2];
  }
  // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
  accel_bias[0] /= (alt_32) packet_count;
  800d18:	e13fe817 	ldw	r4,-96(fp)
  800d1c:	e17fe08b 	ldhu	r5,-126(fp)
  800d20:	0806b6c0 	call	806b6c <__divsi3>
  800d24:	e0bfe815 	stw	r2,-96(fp)
  accel_bias[1] /= (alt_32) packet_count;
  800d28:	e13fe917 	ldw	r4,-92(fp)
  800d2c:	e17fe08b 	ldhu	r5,-126(fp)
  800d30:	0806b6c0 	call	806b6c <__divsi3>
  800d34:	e0bfe915 	stw	r2,-92(fp)
  accel_bias[2] /= (alt_32) packet_count;
  800d38:	e13fea17 	ldw	r4,-88(fp)
  800d3c:	e17fe08b 	ldhu	r5,-126(fp)
  800d40:	0806b6c0 	call	806b6c <__divsi3>
  800d44:	e0bfea15 	stw	r2,-88(fp)
  gyro_bias[0]  /= (alt_32) packet_count;
  800d48:	e13fe517 	ldw	r4,-108(fp)
  800d4c:	e17fe08b 	ldhu	r5,-126(fp)
  800d50:	0806b6c0 	call	806b6c <__divsi3>
  800d54:	e0bfe515 	stw	r2,-108(fp)
  gyro_bias[1]  /= (alt_32) packet_count;
  800d58:	e13fe617 	ldw	r4,-104(fp)
  800d5c:	e17fe08b 	ldhu	r5,-126(fp)
  800d60:	0806b6c0 	call	806b6c <__divsi3>
  800d64:	e0bfe615 	stw	r2,-104(fp)
  gyro_bias[2]  /= (alt_32) packet_count;
  800d68:	e13fe717 	ldw	r4,-100(fp)
  800d6c:	e17fe08b 	ldhu	r5,-126(fp)
  800d70:	0806b6c0 	call	806b6c <__divsi3>
  800d74:	e0bfe715 	stw	r2,-100(fp)

  // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
  if (accel_bias[2] > 0L)
  800d78:	e0bfea17 	ldw	r2,-88(fp)
  800d7c:	10800050 	cmplti	r2,r2,1
  800d80:	1000051e 	bne	r2,zero,800d98 <calibrateMPU9250+0x740>
  {
    accel_bias[2] -= (alt_32) accelsensitivity;
  800d84:	e0bfea17 	ldw	r2,-88(fp)
  800d88:	e0ffdf0b 	ldhu	r3,-132(fp)
  800d8c:	10c5c83a 	sub	r2,r2,r3
  800d90:	e0bfea15 	stw	r2,-88(fp)
  800d94:	00000406 	br	800da8 <calibrateMPU9250+0x750>
  }
  else
  {
    accel_bias[2] += (alt_32) accelsensitivity;
  800d98:	e0bfea17 	ldw	r2,-88(fp)
  800d9c:	e0ffdf0b 	ldhu	r3,-132(fp)
  800da0:	10c5883a 	add	r2,r2,r3
  800da4:	e0bfea15 	stw	r2,-88(fp)

  // Construct the gyro biases for push to the hardware gyro bias registers,
  // which are reset to zero upon device startup.
  // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input
  // format.
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF;
  800da8:	e0bfe517 	ldw	r2,-108(fp)
  800dac:	0085c83a 	sub	r2,zero,r2
  800db0:	e0bff715 	stw	r2,-36(fp)
  800db4:	e0fff717 	ldw	r3,-36(fp)
  800db8:	1804403a 	cmpge	r2,r3,zero
  800dbc:	1000031e 	bne	r2,zero,800dcc <calibrateMPU9250+0x774>
  800dc0:	e0bff717 	ldw	r2,-36(fp)
  800dc4:	108000c4 	addi	r2,r2,3
  800dc8:	e0bff715 	stw	r2,-36(fp)
  800dcc:	e0fff717 	ldw	r3,-36(fp)
  800dd0:	1805d0ba 	srai	r2,r3,2
  800dd4:	1005d23a 	srai	r2,r2,8
  800dd8:	1007883a 	mov	r3,r2
  800ddc:	00bfffc4 	movi	r2,-1
  800de0:	1884703a 	and	r2,r3,r2
  800de4:	e0bfe1c5 	stb	r2,-121(fp)
  // Biases are additive, so change sign on calculated average gyro biases
  data[1] = (-gyro_bias[0]/4)       & 0xFF;
  800de8:	e0bfe517 	ldw	r2,-108(fp)
  800dec:	0085c83a 	sub	r2,zero,r2
  800df0:	e0bff815 	stw	r2,-32(fp)
  800df4:	e0fff817 	ldw	r3,-32(fp)
  800df8:	1804403a 	cmpge	r2,r3,zero
  800dfc:	1000031e 	bne	r2,zero,800e0c <calibrateMPU9250+0x7b4>
  800e00:	e0bff817 	ldw	r2,-32(fp)
  800e04:	108000c4 	addi	r2,r2,3
  800e08:	e0bff815 	stw	r2,-32(fp)
  800e0c:	e0fff817 	ldw	r3,-32(fp)
  800e10:	1805d0ba 	srai	r2,r3,2
  800e14:	1007883a 	mov	r3,r2
  800e18:	00bfffc4 	movi	r2,-1
  800e1c:	1884703a 	and	r2,r3,r2
  800e20:	e0bfe205 	stb	r2,-120(fp)
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
  800e24:	e0bfe617 	ldw	r2,-104(fp)
  800e28:	0085c83a 	sub	r2,zero,r2
  800e2c:	e0bff915 	stw	r2,-28(fp)
  800e30:	e0fff917 	ldw	r3,-28(fp)
  800e34:	1804403a 	cmpge	r2,r3,zero
  800e38:	1000031e 	bne	r2,zero,800e48 <calibrateMPU9250+0x7f0>
  800e3c:	e0bff917 	ldw	r2,-28(fp)
  800e40:	108000c4 	addi	r2,r2,3
  800e44:	e0bff915 	stw	r2,-28(fp)
  800e48:	e0fff917 	ldw	r3,-28(fp)
  800e4c:	1805d0ba 	srai	r2,r3,2
  800e50:	1005d23a 	srai	r2,r2,8
  800e54:	1007883a 	mov	r3,r2
  800e58:	00bfffc4 	movi	r2,-1
  800e5c:	1884703a 	and	r2,r3,r2
  800e60:	e0bfe245 	stb	r2,-119(fp)
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
  800e64:	e0bfe617 	ldw	r2,-104(fp)
  800e68:	0085c83a 	sub	r2,zero,r2
  800e6c:	e0bffa15 	stw	r2,-24(fp)
  800e70:	e0fffa17 	ldw	r3,-24(fp)
  800e74:	1804403a 	cmpge	r2,r3,zero
  800e78:	1000031e 	bne	r2,zero,800e88 <calibrateMPU9250+0x830>
  800e7c:	e0bffa17 	ldw	r2,-24(fp)
  800e80:	108000c4 	addi	r2,r2,3
  800e84:	e0bffa15 	stw	r2,-24(fp)
  800e88:	e0fffa17 	ldw	r3,-24(fp)
  800e8c:	1805d0ba 	srai	r2,r3,2
  800e90:	1007883a 	mov	r3,r2
  800e94:	00bfffc4 	movi	r2,-1
  800e98:	1884703a 	and	r2,r3,r2
  800e9c:	e0bfe285 	stb	r2,-118(fp)
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
  800ea0:	e0bfe717 	ldw	r2,-100(fp)
  800ea4:	0085c83a 	sub	r2,zero,r2
  800ea8:	e0bffb15 	stw	r2,-20(fp)
  800eac:	e0fffb17 	ldw	r3,-20(fp)
  800eb0:	1804403a 	cmpge	r2,r3,zero
  800eb4:	1000031e 	bne	r2,zero,800ec4 <calibrateMPU9250+0x86c>
  800eb8:	e0bffb17 	ldw	r2,-20(fp)
  800ebc:	108000c4 	addi	r2,r2,3
  800ec0:	e0bffb15 	stw	r2,-20(fp)
  800ec4:	e0fffb17 	ldw	r3,-20(fp)
  800ec8:	1805d0ba 	srai	r2,r3,2
  800ecc:	1005d23a 	srai	r2,r2,8
  800ed0:	1007883a 	mov	r3,r2
  800ed4:	00bfffc4 	movi	r2,-1
  800ed8:	1884703a 	and	r2,r3,r2
  800edc:	e0bfe2c5 	stb	r2,-117(fp)
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
  800ee0:	e0bfe717 	ldw	r2,-100(fp)
  800ee4:	0085c83a 	sub	r2,zero,r2
  800ee8:	e0bffc15 	stw	r2,-16(fp)
  800eec:	e0fffc17 	ldw	r3,-16(fp)
  800ef0:	1804403a 	cmpge	r2,r3,zero
  800ef4:	1000031e 	bne	r2,zero,800f04 <calibrateMPU9250+0x8ac>
  800ef8:	e0bffc17 	ldw	r2,-16(fp)
  800efc:	108000c4 	addi	r2,r2,3
  800f00:	e0bffc15 	stw	r2,-16(fp)
  800f04:	e0fffc17 	ldw	r3,-16(fp)
  800f08:	1805d0ba 	srai	r2,r3,2
  800f0c:	1007883a 	mov	r3,r2
  800f10:	00bfffc4 	movi	r2,-1
  800f14:	1884703a 	and	r2,r3,r2
  800f18:	e0bfe305 	stb	r2,-116(fp)

  // Push gyro biases to hardware registers

  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  800f1c:	01004474 	movhi	r4,273
  800f20:	21241c04 	addi	r4,r4,-28560
  800f24:	01404474 	movhi	r5,273
  800f28:	29641804 	addi	r5,r5,-28576
  800f2c:	0802d240 	call	802d24 <I2C_Start>
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress,  XG_OFFSET_H, data[0], 1);
  800f30:	e0bfe183 	ldbu	r2,-122(fp)
  800f34:	11803fcc 	andi	r6,r2,255
  800f38:	3180201c 	xori	r6,r6,128
  800f3c:	31bfe004 	addi	r6,r6,-128
  800f40:	e0bfe1c3 	ldbu	r2,-121(fp)
  800f44:	10803fcc 	andi	r2,r2,255
  800f48:	d8800015 	stw	r2,0(sp)
  800f4c:	00800044 	movi	r2,1
  800f50:	d8800115 	stw	r2,4(sp)
  800f54:	01004474 	movhi	r4,273
  800f58:	21241c04 	addi	r4,r4,-28560
  800f5c:	01404474 	movhi	r5,273
  800f60:	29641804 	addi	r5,r5,-28576
  800f64:	01c004c4 	movi	r7,19
  800f68:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress,  XG_OFFSET_L, data[1], 1);
  800f6c:	e0bfe183 	ldbu	r2,-122(fp)
  800f70:	11803fcc 	andi	r6,r2,255
  800f74:	3180201c 	xori	r6,r6,128
  800f78:	31bfe004 	addi	r6,r6,-128
  800f7c:	e0bfe203 	ldbu	r2,-120(fp)
  800f80:	10803fcc 	andi	r2,r2,255
  800f84:	d8800015 	stw	r2,0(sp)
  800f88:	00800044 	movi	r2,1
  800f8c:	d8800115 	stw	r2,4(sp)
  800f90:	01004474 	movhi	r4,273
  800f94:	21241c04 	addi	r4,r4,-28560
  800f98:	01404474 	movhi	r5,273
  800f9c:	29641804 	addi	r5,r5,-28576
  800fa0:	01c00504 	movi	r7,20
  800fa4:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, YG_OFFSET_H, data[2], 1);
  800fa8:	e0bfe183 	ldbu	r2,-122(fp)
  800fac:	11803fcc 	andi	r6,r2,255
  800fb0:	3180201c 	xori	r6,r6,128
  800fb4:	31bfe004 	addi	r6,r6,-128
  800fb8:	e0bfe243 	ldbu	r2,-119(fp)
  800fbc:	10803fcc 	andi	r2,r2,255
  800fc0:	d8800015 	stw	r2,0(sp)
  800fc4:	00800044 	movi	r2,1
  800fc8:	d8800115 	stw	r2,4(sp)
  800fcc:	01004474 	movhi	r4,273
  800fd0:	21241c04 	addi	r4,r4,-28560
  800fd4:	01404474 	movhi	r5,273
  800fd8:	29641804 	addi	r5,r5,-28576
  800fdc:	01c00544 	movi	r7,21
  800fe0:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, YG_OFFSET_L, data[3], 1);
  800fe4:	e0bfe183 	ldbu	r2,-122(fp)
  800fe8:	11803fcc 	andi	r6,r2,255
  800fec:	3180201c 	xori	r6,r6,128
  800ff0:	31bfe004 	addi	r6,r6,-128
  800ff4:	e0bfe283 	ldbu	r2,-118(fp)
  800ff8:	10803fcc 	andi	r2,r2,255
  800ffc:	d8800015 	stw	r2,0(sp)
  801000:	00800044 	movi	r2,1
  801004:	d8800115 	stw	r2,4(sp)
  801008:	01004474 	movhi	r4,273
  80100c:	21241c04 	addi	r4,r4,-28560
  801010:	01404474 	movhi	r5,273
  801014:	29641804 	addi	r5,r5,-28576
  801018:	01c00584 	movi	r7,22
  80101c:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, ZG_OFFSET_H, data[4], 1);
  801020:	e0bfe183 	ldbu	r2,-122(fp)
  801024:	11803fcc 	andi	r6,r2,255
  801028:	3180201c 	xori	r6,r6,128
  80102c:	31bfe004 	addi	r6,r6,-128
  801030:	e0bfe2c3 	ldbu	r2,-117(fp)
  801034:	10803fcc 	andi	r2,r2,255
  801038:	d8800015 	stw	r2,0(sp)
  80103c:	00800044 	movi	r2,1
  801040:	d8800115 	stw	r2,4(sp)
  801044:	01004474 	movhi	r4,273
  801048:	21241c04 	addi	r4,r4,-28560
  80104c:	01404474 	movhi	r5,273
  801050:	29641804 	addi	r5,r5,-28576
  801054:	01c005c4 	movi	r7,23
  801058:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, ZG_OFFSET_L, data[5], 1);
  80105c:	e0bfe183 	ldbu	r2,-122(fp)
  801060:	11803fcc 	andi	r6,r2,255
  801064:	3180201c 	xori	r6,r6,128
  801068:	31bfe004 	addi	r6,r6,-128
  80106c:	e0bfe303 	ldbu	r2,-116(fp)
  801070:	10803fcc 	andi	r2,r2,255
  801074:	d8800015 	stw	r2,0(sp)
  801078:	00800044 	movi	r2,1
  80107c:	d8800115 	stw	r2,4(sp)
  801080:	01004474 	movhi	r4,273
  801084:	21241c04 	addi	r4,r4,-28560
  801088:	01404474 	movhi	r5,273
  80108c:	29641804 	addi	r5,r5,-28576
  801090:	01c00604 	movi	r7,24
  801094:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  801098:	01004474 	movhi	r4,273
  80109c:	21241c04 	addi	r4,r4,-28560
  8010a0:	01404474 	movhi	r5,273
  8010a4:	29641804 	addi	r5,r5,-28576
  8010a8:	0802d5c0 	call	802d5c <I2C_Stop>


  // Output scaled gyro biases for display in the main program
  gyroBias[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
  8010ac:	e13fe517 	ldw	r4,-108(fp)
  8010b0:	08059d80 	call	8059d8 <__floatsisf>
  8010b4:	1021883a 	mov	r16,r2
  8010b8:	e13fdf8b 	ldhu	r4,-130(fp)
  8010bc:	0805ac40 	call	805ac4 <__floatunsisf>
  8010c0:	8009883a 	mov	r4,r16
  8010c4:	100b883a 	mov	r5,r2
  8010c8:	08058640 	call	805864 <__divsf3>
  8010cc:	1007883a 	mov	r3,r2
  8010d0:	e0bff217 	ldw	r2,-56(fp)
  8010d4:	10c00015 	stw	r3,0(r2)
  gyroBias[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
  8010d8:	e0bff217 	ldw	r2,-56(fp)
  8010dc:	14400104 	addi	r17,r2,4
  8010e0:	e13fe617 	ldw	r4,-104(fp)
  8010e4:	08059d80 	call	8059d8 <__floatsisf>
  8010e8:	1021883a 	mov	r16,r2
  8010ec:	e13fdf8b 	ldhu	r4,-130(fp)
  8010f0:	0805ac40 	call	805ac4 <__floatunsisf>
  8010f4:	8009883a 	mov	r4,r16
  8010f8:	100b883a 	mov	r5,r2
  8010fc:	08058640 	call	805864 <__divsf3>
  801100:	88800015 	stw	r2,0(r17)
  gyroBias[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
  801104:	e0bff217 	ldw	r2,-56(fp)
  801108:	14400204 	addi	r17,r2,8
  80110c:	e13fe717 	ldw	r4,-100(fp)
  801110:	08059d80 	call	8059d8 <__floatsisf>
  801114:	1021883a 	mov	r16,r2
  801118:	e13fdf8b 	ldhu	r4,-130(fp)
  80111c:	0805ac40 	call	805ac4 <__floatunsisf>
  801120:	8009883a 	mov	r4,r16
  801124:	100b883a 	mov	r5,r2
  801128:	08058640 	call	805864 <__divsf3>
  80112c:	88800015 	stw	r2,0(r17)
  // preserved since it is used for temperature compensation calculations.
  // Accelerometer bias registers expect bias input as 2048 LSB per g, so that
  // the accelerometer biases calculated above must be divided by 8.

  // A place to hold the factory accelerometer trim biases
  alt_32 accel_bias_reg[3] = {0, 0, 0};
  801130:	e03feb15 	stw	zero,-84(fp)
  801134:	e03fec15 	stw	zero,-80(fp)
  801138:	e03fed15 	stw	zero,-76(fp)
  // Read factory accelerometer trim values
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  80113c:	01004474 	movhi	r4,273
  801140:	21241c04 	addi	r4,r4,-28560
  801144:	01404474 	movhi	r5,273
  801148:	29641804 	addi	r5,r5,-28576
  80114c:	0802d240 	call	802d24 <I2C_Start>
  I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, XA_OFFSET_H, &data[0], 2, true);
  801150:	e0bfe183 	ldbu	r2,-122(fp)
  801154:	11803fcc 	andi	r6,r2,255
  801158:	3180201c 	xori	r6,r6,128
  80115c:	31bfe004 	addi	r6,r6,-128
  801160:	e0bfe1c4 	addi	r2,fp,-121
  801164:	d8800015 	stw	r2,0(sp)
  801168:	00800084 	movi	r2,2
  80116c:	d8800115 	stw	r2,4(sp)
  801170:	00800044 	movi	r2,1
  801174:	d8800215 	stw	r2,8(sp)
  801178:	01004474 	movhi	r4,273
  80117c:	21241c04 	addi	r4,r4,-28560
  801180:	01404474 	movhi	r5,273
  801184:	29641804 	addi	r5,r5,-28576
  801188:	01c01dc4 	movi	r7,119
  80118c:	08031740 	call	803174 <I2C_ReadFromDeviceRegister>
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  801190:	01004474 	movhi	r4,273
  801194:	21241c04 	addi	r4,r4,-28560
  801198:	01404474 	movhi	r5,273
  80119c:	29641804 	addi	r5,r5,-28576
  8011a0:	0802d5c0 	call	802d5c <I2C_Stop>
  accel_bias_reg[0] = (alt_32) (((alt_16)data[0] << 8) | data[1]);
  8011a4:	e0bfe1c3 	ldbu	r2,-121(fp)
  8011a8:	10803fcc 	andi	r2,r2,255
  8011ac:	1006923a 	slli	r3,r2,8
  8011b0:	e0bfe203 	ldbu	r2,-120(fp)
  8011b4:	10803fcc 	andi	r2,r2,255
  8011b8:	1884b03a 	or	r2,r3,r2
  8011bc:	e0bfeb15 	stw	r2,-84(fp)
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  8011c0:	01004474 	movhi	r4,273
  8011c4:	21241c04 	addi	r4,r4,-28560
  8011c8:	01404474 	movhi	r5,273
  8011cc:	29641804 	addi	r5,r5,-28576
  8011d0:	0802d240 	call	802d24 <I2C_Start>
  I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, YA_OFFSET_H, &data[0], 2, true);
  8011d4:	e0bfe183 	ldbu	r2,-122(fp)
  8011d8:	11803fcc 	andi	r6,r2,255
  8011dc:	3180201c 	xori	r6,r6,128
  8011e0:	31bfe004 	addi	r6,r6,-128
  8011e4:	e0bfe1c4 	addi	r2,fp,-121
  8011e8:	d8800015 	stw	r2,0(sp)
  8011ec:	00800084 	movi	r2,2
  8011f0:	d8800115 	stw	r2,4(sp)
  8011f4:	00800044 	movi	r2,1
  8011f8:	d8800215 	stw	r2,8(sp)
  8011fc:	01004474 	movhi	r4,273
  801200:	21241c04 	addi	r4,r4,-28560
  801204:	01404474 	movhi	r5,273
  801208:	29641804 	addi	r5,r5,-28576
  80120c:	01c01e84 	movi	r7,122
  801210:	08031740 	call	803174 <I2C_ReadFromDeviceRegister>
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  801214:	01004474 	movhi	r4,273
  801218:	21241c04 	addi	r4,r4,-28560
  80121c:	01404474 	movhi	r5,273
  801220:	29641804 	addi	r5,r5,-28576
  801224:	0802d5c0 	call	802d5c <I2C_Stop>
  accel_bias_reg[1] = (alt_32) (((alt_16)data[0] << 8) | data[1]);
  801228:	e0bfe1c3 	ldbu	r2,-121(fp)
  80122c:	10803fcc 	andi	r2,r2,255
  801230:	1006923a 	slli	r3,r2,8
  801234:	e0bfe203 	ldbu	r2,-120(fp)
  801238:	10803fcc 	andi	r2,r2,255
  80123c:	1884b03a 	or	r2,r3,r2
  801240:	e0bfec15 	stw	r2,-80(fp)
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  801244:	01004474 	movhi	r4,273
  801248:	21241c04 	addi	r4,r4,-28560
  80124c:	01404474 	movhi	r5,273
  801250:	29641804 	addi	r5,r5,-28576
  801254:	0802d240 	call	802d24 <I2C_Start>
  I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, ZA_OFFSET_H, &data[0], 2, true);
  801258:	e0bfe183 	ldbu	r2,-122(fp)
  80125c:	11803fcc 	andi	r6,r2,255
  801260:	3180201c 	xori	r6,r6,128
  801264:	31bfe004 	addi	r6,r6,-128
  801268:	e0bfe1c4 	addi	r2,fp,-121
  80126c:	d8800015 	stw	r2,0(sp)
  801270:	00800084 	movi	r2,2
  801274:	d8800115 	stw	r2,4(sp)
  801278:	00800044 	movi	r2,1
  80127c:	d8800215 	stw	r2,8(sp)
  801280:	01004474 	movhi	r4,273
  801284:	21241c04 	addi	r4,r4,-28560
  801288:	01404474 	movhi	r5,273
  80128c:	29641804 	addi	r5,r5,-28576
  801290:	01c01f44 	movi	r7,125
  801294:	08031740 	call	803174 <I2C_ReadFromDeviceRegister>
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  801298:	01004474 	movhi	r4,273
  80129c:	21241c04 	addi	r4,r4,-28560
  8012a0:	01404474 	movhi	r5,273
  8012a4:	29641804 	addi	r5,r5,-28576
  8012a8:	0802d5c0 	call	802d5c <I2C_Stop>
  accel_bias_reg[2] = (alt_32) (((alt_16)data[0] << 8) | data[1]);
  8012ac:	e0bfe1c3 	ldbu	r2,-121(fp)
  8012b0:	10803fcc 	andi	r2,r2,255
  8012b4:	1006923a 	slli	r3,r2,8
  8012b8:	e0bfe203 	ldbu	r2,-120(fp)
  8012bc:	10803fcc 	andi	r2,r2,255
  8012c0:	1884b03a 	or	r2,r3,r2
  8012c4:	e0bfed15 	stw	r2,-76(fp)

  // Define mask for temperature compensation bit 0 of lower byte of
  // accelerometer bias registers
  alt_u32 mask = 1uL;
  8012c8:	00800044 	movi	r2,1
  8012cc:	e0bfde15 	stw	r2,-136(fp)
  // Define array to hold mask bit for each accelerometer bias axis
  alt_u8 mask_bit[3] = {0, 0, 0};
  8012d0:	e03fee05 	stb	zero,-72(fp)
  8012d4:	e03fee45 	stb	zero,-71(fp)
  8012d8:	e03fee85 	stb	zero,-70(fp)

  for (ii = 0; ii < 3; ii++)
  8012dc:	e03fe10d 	sth	zero,-124(fp)
  8012e0:	00001406 	br	801334 <calibrateMPU9250+0xcdc>
  {
    // If temperature compensation bit is set, record that fact in mask_bit
    if ((accel_bias_reg[ii] & mask))
  8012e4:	e0bfe10b 	ldhu	r2,-124(fp)
  8012e8:	1085883a 	add	r2,r2,r2
  8012ec:	1085883a 	add	r2,r2,r2
  8012f0:	e0ffde04 	addi	r3,fp,-136
  8012f4:	10c5883a 	add	r2,r2,r3
  8012f8:	10800d04 	addi	r2,r2,52
  8012fc:	10800017 	ldw	r2,0(r2)
  801300:	1007883a 	mov	r3,r2
  801304:	e0bfde17 	ldw	r2,-136(fp)
  801308:	1884703a 	and	r2,r3,r2
  80130c:	1005003a 	cmpeq	r2,r2,zero
  801310:	1000051e 	bne	r2,zero,801328 <calibrateMPU9250+0xcd0>
    {
      mask_bit[ii] = 0x01;
  801314:	e0ffe10b 	ldhu	r3,-124(fp)
  801318:	e0bfee04 	addi	r2,fp,-72
  80131c:	10c7883a 	add	r3,r2,r3
  801320:	00800044 	movi	r2,1
  801324:	18800005 	stb	r2,0(r3)
  // accelerometer bias registers
  alt_u32 mask = 1uL;
  // Define array to hold mask bit for each accelerometer bias axis
  alt_u8 mask_bit[3] = {0, 0, 0};

  for (ii = 0; ii < 3; ii++)
  801328:	e0bfe10b 	ldhu	r2,-124(fp)
  80132c:	10800044 	addi	r2,r2,1
  801330:	e0bfe10d 	sth	r2,-124(fp)
  801334:	e0bfe10b 	ldhu	r2,-124(fp)
  801338:	108000f0 	cmpltui	r2,r2,3
  80133c:	103fe91e 	bne	r2,zero,8012e4 <calibrateMPU9250+0xc8c>

  // Construct total accelerometer bias, including calculated average
  // accelerometer bias from above
  // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g
  // (16 g full scale)
  accel_bias_reg[0] -= (accel_bias[0]/8);
  801340:	e0bfeb17 	ldw	r2,-84(fp)
  801344:	e0bff615 	stw	r2,-40(fp)
  801348:	e0bfe817 	ldw	r2,-96(fp)
  80134c:	e0bffd15 	stw	r2,-12(fp)
  801350:	e0fffd17 	ldw	r3,-12(fp)
  801354:	1804403a 	cmpge	r2,r3,zero
  801358:	1000031e 	bne	r2,zero,801368 <calibrateMPU9250+0xd10>
  80135c:	e0bffd17 	ldw	r2,-12(fp)
  801360:	108001c4 	addi	r2,r2,7
  801364:	e0bffd15 	stw	r2,-12(fp)
  801368:	e0fffd17 	ldw	r3,-12(fp)
  80136c:	1805d0fa 	srai	r2,r3,3
  801370:	e0fff617 	ldw	r3,-40(fp)
  801374:	1885c83a 	sub	r2,r3,r2
  801378:	e0bfeb15 	stw	r2,-84(fp)
  accel_bias_reg[1] -= (accel_bias[1]/8);
  80137c:	e0bfec17 	ldw	r2,-80(fp)
  801380:	e0bff515 	stw	r2,-44(fp)
  801384:	e0bfe917 	ldw	r2,-92(fp)
  801388:	e0bffe15 	stw	r2,-8(fp)
  80138c:	e0fffe17 	ldw	r3,-8(fp)
  801390:	1804403a 	cmpge	r2,r3,zero
  801394:	1000031e 	bne	r2,zero,8013a4 <calibrateMPU9250+0xd4c>
  801398:	e0bffe17 	ldw	r2,-8(fp)
  80139c:	108001c4 	addi	r2,r2,7
  8013a0:	e0bffe15 	stw	r2,-8(fp)
  8013a4:	e0fffe17 	ldw	r3,-8(fp)
  8013a8:	1805d0fa 	srai	r2,r3,3
  8013ac:	e0fff517 	ldw	r3,-44(fp)
  8013b0:	1885c83a 	sub	r2,r3,r2
  8013b4:	e0bfec15 	stw	r2,-80(fp)
  accel_bias_reg[2] -= (accel_bias[2]/8);
  8013b8:	e0bfed17 	ldw	r2,-76(fp)
  8013bc:	e0bff415 	stw	r2,-48(fp)
  8013c0:	e0bfea17 	ldw	r2,-88(fp)
  8013c4:	e0bfff15 	stw	r2,-4(fp)
  8013c8:	e0ffff17 	ldw	r3,-4(fp)
  8013cc:	1804403a 	cmpge	r2,r3,zero
  8013d0:	1000031e 	bne	r2,zero,8013e0 <calibrateMPU9250+0xd88>
  8013d4:	e0bfff17 	ldw	r2,-4(fp)
  8013d8:	108001c4 	addi	r2,r2,7
  8013dc:	e0bfff15 	stw	r2,-4(fp)
  8013e0:	e0ffff17 	ldw	r3,-4(fp)
  8013e4:	1805d0fa 	srai	r2,r3,3
  8013e8:	e0fff417 	ldw	r3,-48(fp)
  8013ec:	1885c83a 	sub	r2,r3,r2
  8013f0:	e0bfed15 	stw	r2,-76(fp)

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
  8013f4:	e0bfeb17 	ldw	r2,-84(fp)
  8013f8:	1005d23a 	srai	r2,r2,8
  8013fc:	1007883a 	mov	r3,r2
  801400:	00bfffc4 	movi	r2,-1
  801404:	1884703a 	and	r2,r3,r2
  801408:	e0bfe1c5 	stb	r2,-121(fp)
  data[1] = (accel_bias_reg[0])      & 0xFF;
  80140c:	e0bfeb17 	ldw	r2,-84(fp)
  801410:	1007883a 	mov	r3,r2
  801414:	00bfffc4 	movi	r2,-1
  801418:	1884703a 	and	r2,r3,r2
  80141c:	e0bfe205 	stb	r2,-120(fp)
  // preserve temperature compensation bit when writing back to accelerometer
  // bias registers
  data[1] = data[1] | mask_bit[0];
  801420:	e0ffe203 	ldbu	r3,-120(fp)
  801424:	e0bfee03 	ldbu	r2,-72(fp)
  801428:	1884b03a 	or	r2,r3,r2
  80142c:	e0bfe205 	stb	r2,-120(fp)
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
  801430:	e0bfec17 	ldw	r2,-80(fp)
  801434:	1005d23a 	srai	r2,r2,8
  801438:	1007883a 	mov	r3,r2
  80143c:	00bfffc4 	movi	r2,-1
  801440:	1884703a 	and	r2,r3,r2
  801444:	e0bfe245 	stb	r2,-119(fp)
  data[3] = (accel_bias_reg[1])      & 0xFF;
  801448:	e0bfec17 	ldw	r2,-80(fp)
  80144c:	1007883a 	mov	r3,r2
  801450:	00bfffc4 	movi	r2,-1
  801454:	1884703a 	and	r2,r3,r2
  801458:	e0bfe285 	stb	r2,-118(fp)
  // Preserve temperature compensation bit when writing back to accelerometer
  // bias registers
  data[3] = data[3] | mask_bit[1];
  80145c:	e0ffe283 	ldbu	r3,-118(fp)
  801460:	e0bfee43 	ldbu	r2,-71(fp)
  801464:	1884b03a 	or	r2,r3,r2
  801468:	e0bfe285 	stb	r2,-118(fp)
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
  80146c:	e0bfed17 	ldw	r2,-76(fp)
  801470:	1005d23a 	srai	r2,r2,8
  801474:	1007883a 	mov	r3,r2
  801478:	00bfffc4 	movi	r2,-1
  80147c:	1884703a 	and	r2,r3,r2
  801480:	e0bfe2c5 	stb	r2,-117(fp)
  data[5] = (accel_bias_reg[2])      & 0xFF;
  801484:	e0bfed17 	ldw	r2,-76(fp)
  801488:	1007883a 	mov	r3,r2
  80148c:	00bfffc4 	movi	r2,-1
  801490:	1884703a 	and	r2,r3,r2
  801494:	e0bfe305 	stb	r2,-116(fp)
  // Preserve temperature compensation bit when writing back to accelerometer
  // bias registers
  data[5] = data[5] | mask_bit[2];
  801498:	e0ffe303 	ldbu	r3,-116(fp)
  80149c:	e0bfee83 	ldbu	r2,-70(fp)
  8014a0:	1884b03a 	or	r2,r3,r2
  8014a4:	e0bfe305 	stb	r2,-116(fp)

  // Apparently this is not working for the acceleration biases in the MPU-9250
  // Are we handling the temperature correction bit properly?
  // Push accelerometer biases to hardware registers
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  8014a8:	01004474 	movhi	r4,273
  8014ac:	21241c04 	addi	r4,r4,-28560
  8014b0:	01404474 	movhi	r5,273
  8014b4:	29641804 	addi	r5,r5,-28576
  8014b8:	0802d240 	call	802d24 <I2C_Start>
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress,  XA_OFFSET_H, data[0], 1);
  8014bc:	e0bfe183 	ldbu	r2,-122(fp)
  8014c0:	11803fcc 	andi	r6,r2,255
  8014c4:	3180201c 	xori	r6,r6,128
  8014c8:	31bfe004 	addi	r6,r6,-128
  8014cc:	e0bfe1c3 	ldbu	r2,-121(fp)
  8014d0:	10803fcc 	andi	r2,r2,255
  8014d4:	d8800015 	stw	r2,0(sp)
  8014d8:	00800044 	movi	r2,1
  8014dc:	d8800115 	stw	r2,4(sp)
  8014e0:	01004474 	movhi	r4,273
  8014e4:	21241c04 	addi	r4,r4,-28560
  8014e8:	01404474 	movhi	r5,273
  8014ec:	29641804 	addi	r5,r5,-28576
  8014f0:	01c01dc4 	movi	r7,119
  8014f4:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress,  XA_OFFSET_L, data[1], 1);
  8014f8:	e0bfe183 	ldbu	r2,-122(fp)
  8014fc:	11803fcc 	andi	r6,r2,255
  801500:	3180201c 	xori	r6,r6,128
  801504:	31bfe004 	addi	r6,r6,-128
  801508:	e0bfe203 	ldbu	r2,-120(fp)
  80150c:	10803fcc 	andi	r2,r2,255
  801510:	d8800015 	stw	r2,0(sp)
  801514:	00800044 	movi	r2,1
  801518:	d8800115 	stw	r2,4(sp)
  80151c:	01004474 	movhi	r4,273
  801520:	21241c04 	addi	r4,r4,-28560
  801524:	01404474 	movhi	r5,273
  801528:	29641804 	addi	r5,r5,-28576
  80152c:	01c01e04 	movi	r7,120
  801530:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, YA_OFFSET_H, data[2], 1);
  801534:	e0bfe183 	ldbu	r2,-122(fp)
  801538:	11803fcc 	andi	r6,r2,255
  80153c:	3180201c 	xori	r6,r6,128
  801540:	31bfe004 	addi	r6,r6,-128
  801544:	e0bfe243 	ldbu	r2,-119(fp)
  801548:	10803fcc 	andi	r2,r2,255
  80154c:	d8800015 	stw	r2,0(sp)
  801550:	00800044 	movi	r2,1
  801554:	d8800115 	stw	r2,4(sp)
  801558:	01004474 	movhi	r4,273
  80155c:	21241c04 	addi	r4,r4,-28560
  801560:	01404474 	movhi	r5,273
  801564:	29641804 	addi	r5,r5,-28576
  801568:	01c01e84 	movi	r7,122
  80156c:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, YA_OFFSET_L, data[3], 1);
  801570:	e0bfe183 	ldbu	r2,-122(fp)
  801574:	11803fcc 	andi	r6,r2,255
  801578:	3180201c 	xori	r6,r6,128
  80157c:	31bfe004 	addi	r6,r6,-128
  801580:	e0bfe283 	ldbu	r2,-118(fp)
  801584:	10803fcc 	andi	r2,r2,255
  801588:	d8800015 	stw	r2,0(sp)
  80158c:	00800044 	movi	r2,1
  801590:	d8800115 	stw	r2,4(sp)
  801594:	01004474 	movhi	r4,273
  801598:	21241c04 	addi	r4,r4,-28560
  80159c:	01404474 	movhi	r5,273
  8015a0:	29641804 	addi	r5,r5,-28576
  8015a4:	01c01ec4 	movi	r7,123
  8015a8:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, ZA_OFFSET_H, data[4], 1);
  8015ac:	e0bfe183 	ldbu	r2,-122(fp)
  8015b0:	11803fcc 	andi	r6,r2,255
  8015b4:	3180201c 	xori	r6,r6,128
  8015b8:	31bfe004 	addi	r6,r6,-128
  8015bc:	e0bfe2c3 	ldbu	r2,-117(fp)
  8015c0:	10803fcc 	andi	r2,r2,255
  8015c4:	d8800015 	stw	r2,0(sp)
  8015c8:	00800044 	movi	r2,1
  8015cc:	d8800115 	stw	r2,4(sp)
  8015d0:	01004474 	movhi	r4,273
  8015d4:	21241c04 	addi	r4,r4,-28560
  8015d8:	01404474 	movhi	r5,273
  8015dc:	29641804 	addi	r5,r5,-28576
  8015e0:	01c01f44 	movi	r7,125
  8015e4:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, ZA_OFFSET_L, data[5], 1);
  8015e8:	e0bfe183 	ldbu	r2,-122(fp)
  8015ec:	11803fcc 	andi	r6,r2,255
  8015f0:	3180201c 	xori	r6,r6,128
  8015f4:	31bfe004 	addi	r6,r6,-128
  8015f8:	e0bfe303 	ldbu	r2,-116(fp)
  8015fc:	10803fcc 	andi	r2,r2,255
  801600:	d8800015 	stw	r2,0(sp)
  801604:	00800044 	movi	r2,1
  801608:	d8800115 	stw	r2,4(sp)
  80160c:	01004474 	movhi	r4,273
  801610:	21241c04 	addi	r4,r4,-28560
  801614:	01404474 	movhi	r5,273
  801618:	29641804 	addi	r5,r5,-28576
  80161c:	01c01f84 	movi	r7,126
  801620:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  801624:	01004474 	movhi	r4,273
  801628:	21241c04 	addi	r4,r4,-28560
  80162c:	01404474 	movhi	r5,273
  801630:	29641804 	addi	r5,r5,-28576
  801634:	0802d5c0 	call	802d5c <I2C_Stop>


  // Output scaled accelerometer biases for display in the main program
  accelBias[0] = (float)accel_bias[0]/(float)accelsensitivity;
  801638:	e13fe817 	ldw	r4,-96(fp)
  80163c:	08059d80 	call	8059d8 <__floatsisf>
  801640:	1021883a 	mov	r16,r2
  801644:	e13fdf0b 	ldhu	r4,-132(fp)
  801648:	0805ac40 	call	805ac4 <__floatunsisf>
  80164c:	8009883a 	mov	r4,r16
  801650:	100b883a 	mov	r5,r2
  801654:	08058640 	call	805864 <__divsf3>
  801658:	1007883a 	mov	r3,r2
  80165c:	e0bff317 	ldw	r2,-52(fp)
  801660:	10c00015 	stw	r3,0(r2)
  accelBias[1] = (float)accel_bias[1]/(float)accelsensitivity;
  801664:	e0bff317 	ldw	r2,-52(fp)
  801668:	14400104 	addi	r17,r2,4
  80166c:	e13fe917 	ldw	r4,-92(fp)
  801670:	08059d80 	call	8059d8 <__floatsisf>
  801674:	1021883a 	mov	r16,r2
  801678:	e13fdf0b 	ldhu	r4,-132(fp)
  80167c:	0805ac40 	call	805ac4 <__floatunsisf>
  801680:	8009883a 	mov	r4,r16
  801684:	100b883a 	mov	r5,r2
  801688:	08058640 	call	805864 <__divsf3>
  80168c:	88800015 	stw	r2,0(r17)
  accelBias[2] = (float)accel_bias[2]/(float)accelsensitivity;
  801690:	e0bff317 	ldw	r2,-52(fp)
  801694:	14400204 	addi	r17,r2,8
  801698:	e13fea17 	ldw	r4,-88(fp)
  80169c:	08059d80 	call	8059d8 <__floatsisf>
  8016a0:	1021883a 	mov	r16,r2
  8016a4:	e13fdf0b 	ldhu	r4,-132(fp)
  8016a8:	0805ac40 	call	805ac4 <__floatunsisf>
  8016ac:	8009883a 	mov	r4,r16
  8016b0:	100b883a 	mov	r5,r2
  8016b4:	08058640 	call	805864 <__divsf3>
  8016b8:	88800015 	stw	r2,0(r17)
}
  8016bc:	e037883a 	mov	sp,fp
  8016c0:	dfc00317 	ldw	ra,12(sp)
  8016c4:	df000217 	ldw	fp,8(sp)
  8016c8:	dc400117 	ldw	r17,4(sp)
  8016cc:	dc000017 	ldw	r16,0(sp)
  8016d0:	dec00404 	addi	sp,sp,16
  8016d4:	f800283a 	ret

008016d8 <MPU9250SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
// Should return percent deviation from factory trim values, +/- 14 or less
// deviation is a pass.
void MPU9250SelfTest(float * destination)
{
  8016d8:	deffe004 	addi	sp,sp,-128
  8016dc:	dfc01f15 	stw	ra,124(sp)
  8016e0:	df001e15 	stw	fp,120(sp)
  8016e4:	dc401d15 	stw	r17,116(sp)
  8016e8:	dc001c15 	stw	r16,112(sp)
  8016ec:	df001c04 	addi	fp,sp,112
  8016f0:	e13fff15 	stw	r4,-4(fp)
  alt_u8 deviceAddress = 0xD0;
  8016f4:	00bff404 	movi	r2,-48
  8016f8:	e0bfe845 	stb	r2,-95(fp)
  alt_u8 rawData[6];
  alt_u8 selfTest[6];
  alt_32 gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
  8016fc:	e03fec15 	stw	zero,-80(fp)
  801700:	e03fed15 	stw	zero,-76(fp)
  801704:	e03fee15 	stw	zero,-72(fp)
  801708:	e03fef15 	stw	zero,-68(fp)
  80170c:	e03ff015 	stw	zero,-64(fp)
  801710:	e03ff115 	stw	zero,-60(fp)
  801714:	e03ff215 	stw	zero,-56(fp)
  801718:	e03ff315 	stw	zero,-52(fp)
  80171c:	e03ff415 	stw	zero,-48(fp)
  801720:	e03ff515 	stw	zero,-44(fp)
  801724:	e03ff615 	stw	zero,-40(fp)
  801728:	e03ff715 	stw	zero,-36(fp)
  float factoryTrim[6];
  alt_u8 FS = 0;
  80172c:	e03fe805 	stb	zero,-96(fp)
  alt_u8 ReadBuf[1];
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  801730:	01004474 	movhi	r4,273
  801734:	21241c04 	addi	r4,r4,-28560
  801738:	01404474 	movhi	r5,273
  80173c:	29641804 	addi	r5,r5,-28576
  801740:	0802d240 	call	802d24 <I2C_Start>
  // Set gyro sample rate to 1 kHz
  if(!I2C_ReadFromDeviceRegister(I2C_SCL_BASE,I2C_SDA_BASE, deviceAddress, 0x75, (alt_u8*)&ReadBuf, 1, true)){
  801744:	e0bfe843 	ldbu	r2,-95(fp)
  801748:	11803fcc 	andi	r6,r2,255
  80174c:	3180201c 	xori	r6,r6,128
  801750:	31bfe004 	addi	r6,r6,-128
  801754:	e0bffe04 	addi	r2,fp,-8
  801758:	d8800015 	stw	r2,0(sp)
  80175c:	00800044 	movi	r2,1
  801760:	d8800115 	stw	r2,4(sp)
  801764:	00800044 	movi	r2,1
  801768:	d8800215 	stw	r2,8(sp)
  80176c:	01004474 	movhi	r4,273
  801770:	21241c04 	addi	r4,r4,-28560
  801774:	01404474 	movhi	r5,273
  801778:	29641804 	addi	r5,r5,-28576
  80177c:	01c01d44 	movi	r7,117
  801780:	08031740 	call	803174 <I2C_ReadFromDeviceRegister>

  }
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  801784:	01004474 	movhi	r4,273
  801788:	21241c04 	addi	r4,r4,-28560
  80178c:	01404474 	movhi	r5,273
  801790:	29641804 	addi	r5,r5,-28576
  801794:	0802d5c0 	call	802d5c <I2C_Stop>
  printf("WHO AM I: %0x\n", ReadBuf[0]);
  801798:	e0bffe03 	ldbu	r2,-8(fp)
  80179c:	11403fcc 	andi	r5,r2,255
  8017a0:	010020b4 	movhi	r4,130
  8017a4:	212e4e04 	addi	r4,r4,-18120
  8017a8:	08075900 	call	807590 <printf>
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  8017ac:	01004474 	movhi	r4,273
  8017b0:	21241c04 	addi	r4,r4,-28560
  8017b4:	01404474 	movhi	r5,273
  8017b8:	29641804 	addi	r5,r5,-28576
  8017bc:	0802d240 	call	802d24 <I2C_Start>
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, SMPLRT_DIV, 0x00, 1);
  8017c0:	e0bfe843 	ldbu	r2,-95(fp)
  8017c4:	11803fcc 	andi	r6,r2,255
  8017c8:	3180201c 	xori	r6,r6,128
  8017cc:	31bfe004 	addi	r6,r6,-128
  8017d0:	d8000015 	stw	zero,0(sp)
  8017d4:	00800044 	movi	r2,1
  8017d8:	d8800115 	stw	r2,4(sp)
  8017dc:	01004474 	movhi	r4,273
  8017e0:	21241c04 	addi	r4,r4,-28560
  8017e4:	01404474 	movhi	r5,273
  8017e8:	29641804 	addi	r5,r5,-28576
  8017ec:	01c00644 	movi	r7,25
  8017f0:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, CONFIG, 0x02, 1);
  8017f4:	e0bfe843 	ldbu	r2,-95(fp)
  8017f8:	11803fcc 	andi	r6,r2,255
  8017fc:	3180201c 	xori	r6,r6,128
  801800:	31bfe004 	addi	r6,r6,-128
  801804:	00800084 	movi	r2,2
  801808:	d8800015 	stw	r2,0(sp)
  80180c:	00800044 	movi	r2,1
  801810:	d8800115 	stw	r2,4(sp)
  801814:	01004474 	movhi	r4,273
  801818:	21241c04 	addi	r4,r4,-28560
  80181c:	01404474 	movhi	r5,273
  801820:	29641804 	addi	r5,r5,-28576
  801824:	01c00684 	movi	r7,26
  801828:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  // Set full scale range for the gyro to 250 dps
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, GYRO_CONFIG,  1<<FS, 1);
  80182c:	e0bfe843 	ldbu	r2,-95(fp)
  801830:	11803fcc 	andi	r6,r2,255
  801834:	3180201c 	xori	r6,r6,128
  801838:	31bfe004 	addi	r6,r6,-128
  80183c:	e0ffe803 	ldbu	r3,-96(fp)
  801840:	00800044 	movi	r2,1
  801844:	10c4983a 	sll	r2,r2,r3
  801848:	d8800015 	stw	r2,0(sp)
  80184c:	00800044 	movi	r2,1
  801850:	d8800115 	stw	r2,4(sp)
  801854:	01004474 	movhi	r4,273
  801858:	21241c04 	addi	r4,r4,-28560
  80185c:	01404474 	movhi	r5,273
  801860:	29641804 	addi	r5,r5,-28576
  801864:	01c006c4 	movi	r7,27
  801868:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, ACCEL_CONFIG2, 0x02, 1);
  80186c:	e0bfe843 	ldbu	r2,-95(fp)
  801870:	11803fcc 	andi	r6,r2,255
  801874:	3180201c 	xori	r6,r6,128
  801878:	31bfe004 	addi	r6,r6,-128
  80187c:	00800084 	movi	r2,2
  801880:	d8800015 	stw	r2,0(sp)
  801884:	00800044 	movi	r2,1
  801888:	d8800115 	stw	r2,4(sp)
  80188c:	01004474 	movhi	r4,273
  801890:	21241c04 	addi	r4,r4,-28560
  801894:	01404474 	movhi	r5,273
  801898:	29641804 	addi	r5,r5,-28576
  80189c:	01c00744 	movi	r7,29
  8018a0:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  // Set full scale range for the accelerometer to 2 g
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, ACCEL_CONFIG, 1<<FS, 1);
  8018a4:	e0bfe843 	ldbu	r2,-95(fp)
  8018a8:	11803fcc 	andi	r6,r2,255
  8018ac:	3180201c 	xori	r6,r6,128
  8018b0:	31bfe004 	addi	r6,r6,-128
  8018b4:	e0ffe803 	ldbu	r3,-96(fp)
  8018b8:	00800044 	movi	r2,1
  8018bc:	10c4983a 	sll	r2,r2,r3
  8018c0:	d8800015 	stw	r2,0(sp)
  8018c4:	00800044 	movi	r2,1
  8018c8:	d8800115 	stw	r2,4(sp)
  8018cc:	01004474 	movhi	r4,273
  8018d0:	21241c04 	addi	r4,r4,-28560
  8018d4:	01404474 	movhi	r5,273
  8018d8:	29641804 	addi	r5,r5,-28576
  8018dc:	01c00704 	movi	r7,28
  8018e0:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  8018e4:	01004474 	movhi	r4,273
  8018e8:	21241c04 	addi	r4,r4,-28560
  8018ec:	01404474 	movhi	r5,273
  8018f0:	29641804 	addi	r5,r5,-28576
  8018f4:	0802d5c0 	call	802d5c <I2C_Stop>


  int ii;
  // Get average current values of gyro and acclerometer
  for ( ii = 0; ii < 200; ii= ii+1) {
  8018f8:	e03fe715 	stw	zero,-100(fp)
  8018fc:	00008606 	br	801b18 <MPU9250SelfTest+0x440>

  	printf("BHW::ii = %d \n", ii );
  801900:	010020b4 	movhi	r4,130
  801904:	212e5204 	addi	r4,r4,-18104
  801908:	e17fe717 	ldw	r5,-100(fp)
  80190c:	08075900 	call	807590 <printf>
  	I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  801910:	01004474 	movhi	r4,273
  801914:	21241c04 	addi	r4,r4,-28560
  801918:	01404474 	movhi	r5,273
  80191c:	29641804 	addi	r5,r5,-28576
  801920:	0802d240 	call	802d24 <I2C_Start>
    // Read the six raw data registers into data array
	I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, 0xD0, ACCEL_XOUT_H, &rawData[0],6, true);
  801924:	e0bfe884 	addi	r2,fp,-94
  801928:	d8800015 	stw	r2,0(sp)
  80192c:	00800184 	movi	r2,6
  801930:	d8800115 	stw	r2,4(sp)
  801934:	00800044 	movi	r2,1
  801938:	d8800215 	stw	r2,8(sp)
  80193c:	01004474 	movhi	r4,273
  801940:	21241c04 	addi	r4,r4,-28560
  801944:	01404474 	movhi	r5,273
  801948:	29641804 	addi	r5,r5,-28576
  80194c:	01bff404 	movi	r6,-48
  801950:	01c00ec4 	movi	r7,59
  801954:	08031740 	call	803174 <I2C_ReadFromDeviceRegister>
    I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  801958:	01004474 	movhi	r4,273
  80195c:	21241c04 	addi	r4,r4,-28560
  801960:	01404474 	movhi	r5,273
  801964:	29641804 	addi	r5,r5,-28576
  801968:	0802d5c0 	call	802d5c <I2C_Stop>

	// Turn the MSB and LSB into a signed 16-bit value
    aAvg[0] += (alt_16)(((alt_16)rawData[0] << 8) | rawData[1]) ;
  80196c:	e13fef17 	ldw	r4,-68(fp)
  801970:	e0bfe883 	ldbu	r2,-94(fp)
  801974:	10803fcc 	andi	r2,r2,255
  801978:	1004923a 	slli	r2,r2,8
  80197c:	1007883a 	mov	r3,r2
  801980:	e0bfe8c3 	ldbu	r2,-93(fp)
  801984:	10803fcc 	andi	r2,r2,255
  801988:	1884b03a 	or	r2,r3,r2
  80198c:	10bfffcc 	andi	r2,r2,65535
  801990:	10a0001c 	xori	r2,r2,32768
  801994:	10a00004 	addi	r2,r2,-32768
  801998:	2085883a 	add	r2,r4,r2
  80199c:	e0bfef15 	stw	r2,-68(fp)
    aAvg[1] += (alt_16)(((alt_16)rawData[2] << 8) | rawData[3]) ;
  8019a0:	e13ff017 	ldw	r4,-64(fp)
  8019a4:	e0bfe903 	ldbu	r2,-92(fp)
  8019a8:	10803fcc 	andi	r2,r2,255
  8019ac:	1004923a 	slli	r2,r2,8
  8019b0:	1007883a 	mov	r3,r2
  8019b4:	e0bfe943 	ldbu	r2,-91(fp)
  8019b8:	10803fcc 	andi	r2,r2,255
  8019bc:	1884b03a 	or	r2,r3,r2
  8019c0:	10bfffcc 	andi	r2,r2,65535
  8019c4:	10a0001c 	xori	r2,r2,32768
  8019c8:	10a00004 	addi	r2,r2,-32768
  8019cc:	2085883a 	add	r2,r4,r2
  8019d0:	e0bff015 	stw	r2,-64(fp)
    aAvg[2] += (alt_16)(((alt_16)rawData[4] << 8) | rawData[5]) ;
  8019d4:	e13ff117 	ldw	r4,-60(fp)
  8019d8:	e0bfe983 	ldbu	r2,-90(fp)
  8019dc:	10803fcc 	andi	r2,r2,255
  8019e0:	1004923a 	slli	r2,r2,8
  8019e4:	1007883a 	mov	r3,r2
  8019e8:	e0bfe9c3 	ldbu	r2,-89(fp)
  8019ec:	10803fcc 	andi	r2,r2,255
  8019f0:	1884b03a 	or	r2,r3,r2
  8019f4:	10bfffcc 	andi	r2,r2,65535
  8019f8:	10a0001c 	xori	r2,r2,32768
  8019fc:	10a00004 	addi	r2,r2,-32768
  801a00:	2085883a 	add	r2,r4,r2
  801a04:	e0bff115 	stw	r2,-60(fp)

  	I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  801a08:	01004474 	movhi	r4,273
  801a0c:	21241c04 	addi	r4,r4,-28560
  801a10:	01404474 	movhi	r5,273
  801a14:	29641804 	addi	r5,r5,-28576
  801a18:	0802d240 	call	802d24 <I2C_Start>

    // Read the six raw data registers sequentially into data array
	I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, GYRO_XOUT_H, &rawData[0], 6, true);
  801a1c:	e0bfe843 	ldbu	r2,-95(fp)
  801a20:	11803fcc 	andi	r6,r2,255
  801a24:	3180201c 	xori	r6,r6,128
  801a28:	31bfe004 	addi	r6,r6,-128
  801a2c:	e0bfe884 	addi	r2,fp,-94
  801a30:	d8800015 	stw	r2,0(sp)
  801a34:	00800184 	movi	r2,6
  801a38:	d8800115 	stw	r2,4(sp)
  801a3c:	00800044 	movi	r2,1
  801a40:	d8800215 	stw	r2,8(sp)
  801a44:	01004474 	movhi	r4,273
  801a48:	21241c04 	addi	r4,r4,-28560
  801a4c:	01404474 	movhi	r5,273
  801a50:	29641804 	addi	r5,r5,-28576
  801a54:	01c010c4 	movi	r7,67
  801a58:	08031740 	call	803174 <I2C_ReadFromDeviceRegister>
    I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  801a5c:	01004474 	movhi	r4,273
  801a60:	21241c04 	addi	r4,r4,-28560
  801a64:	01404474 	movhi	r5,273
  801a68:	29641804 	addi	r5,r5,-28576
  801a6c:	0802d5c0 	call	802d5c <I2C_Stop>

	// Turn the MSB and LSB into a signed 16-bit value
    gAvg[0] += (alt_16)(((alt_16)rawData[0] << 8) | rawData[1]) ;
  801a70:	e13fec17 	ldw	r4,-80(fp)
  801a74:	e0bfe883 	ldbu	r2,-94(fp)
  801a78:	10803fcc 	andi	r2,r2,255
  801a7c:	1004923a 	slli	r2,r2,8
  801a80:	1007883a 	mov	r3,r2
  801a84:	e0bfe8c3 	ldbu	r2,-93(fp)
  801a88:	10803fcc 	andi	r2,r2,255
  801a8c:	1884b03a 	or	r2,r3,r2
  801a90:	10bfffcc 	andi	r2,r2,65535
  801a94:	10a0001c 	xori	r2,r2,32768
  801a98:	10a00004 	addi	r2,r2,-32768
  801a9c:	2085883a 	add	r2,r4,r2
  801aa0:	e0bfec15 	stw	r2,-80(fp)
    gAvg[1] += (alt_16)(((alt_16)rawData[2] << 8) | rawData[3]) ;
  801aa4:	e13fed17 	ldw	r4,-76(fp)
  801aa8:	e0bfe903 	ldbu	r2,-92(fp)
  801aac:	10803fcc 	andi	r2,r2,255
  801ab0:	1004923a 	slli	r2,r2,8
  801ab4:	1007883a 	mov	r3,r2
  801ab8:	e0bfe943 	ldbu	r2,-91(fp)
  801abc:	10803fcc 	andi	r2,r2,255
  801ac0:	1884b03a 	or	r2,r3,r2
  801ac4:	10bfffcc 	andi	r2,r2,65535
  801ac8:	10a0001c 	xori	r2,r2,32768
  801acc:	10a00004 	addi	r2,r2,-32768
  801ad0:	2085883a 	add	r2,r4,r2
  801ad4:	e0bfed15 	stw	r2,-76(fp)
    gAvg[2] += (alt_16)(((alt_16)rawData[4] << 8) | rawData[5]) ;
  801ad8:	e13fee17 	ldw	r4,-72(fp)
  801adc:	e0bfe983 	ldbu	r2,-90(fp)
  801ae0:	10803fcc 	andi	r2,r2,255
  801ae4:	1004923a 	slli	r2,r2,8
  801ae8:	1007883a 	mov	r3,r2
  801aec:	e0bfe9c3 	ldbu	r2,-89(fp)
  801af0:	10803fcc 	andi	r2,r2,255
  801af4:	1884b03a 	or	r2,r3,r2
  801af8:	10bfffcc 	andi	r2,r2,65535
  801afc:	10a0001c 	xori	r2,r2,32768
  801b00:	10a00004 	addi	r2,r2,-32768
  801b04:	2085883a 	add	r2,r4,r2
  801b08:	e0bfee15 	stw	r2,-72(fp)
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);


  int ii;
  // Get average current values of gyro and acclerometer
  for ( ii = 0; ii < 200; ii= ii+1) {
  801b0c:	e0bfe717 	ldw	r2,-100(fp)
  801b10:	10800044 	addi	r2,r2,1
  801b14:	e0bfe715 	stw	r2,-100(fp)
  801b18:	e0bfe717 	ldw	r2,-100(fp)
  801b1c:	10803210 	cmplti	r2,r2,200
  801b20:	103f771e 	bne	r2,zero,801900 <MPU9250SelfTest+0x228>
    gAvg[2] += (alt_16)(((alt_16)rawData[4] << 8) | rawData[5]) ;

  }

  // Get average of 200 values and store as average current readings
  for ( ii =0; ii < 3; ii = ii+1)
  801b24:	e03fe715 	stw	zero,-100(fp)
  801b28:	00002506 	br	801bc0 <MPU9250SelfTest+0x4e8>
  {
    aAvg[ii] /= 200;
  801b2c:	e43fe717 	ldw	r16,-100(fp)
  801b30:	e0bfe717 	ldw	r2,-100(fp)
  801b34:	1085883a 	add	r2,r2,r2
  801b38:	1085883a 	add	r2,r2,r2
  801b3c:	e0ffe704 	addi	r3,fp,-100
  801b40:	10c5883a 	add	r2,r2,r3
  801b44:	10800804 	addi	r2,r2,32
  801b48:	11000017 	ldw	r4,0(r2)
  801b4c:	01403204 	movi	r5,200
  801b50:	0806b6c0 	call	806b6c <__divsi3>
  801b54:	1007883a 	mov	r3,r2
  801b58:	8405883a 	add	r2,r16,r16
  801b5c:	1085883a 	add	r2,r2,r2
  801b60:	e13fe704 	addi	r4,fp,-100
  801b64:	1105883a 	add	r2,r2,r4
  801b68:	10800804 	addi	r2,r2,32
  801b6c:	10c00015 	stw	r3,0(r2)
    gAvg[ii] /= 200;
  801b70:	e43fe717 	ldw	r16,-100(fp)
  801b74:	e0bfe717 	ldw	r2,-100(fp)
  801b78:	1085883a 	add	r2,r2,r2
  801b7c:	1085883a 	add	r2,r2,r2
  801b80:	e0ffe704 	addi	r3,fp,-100
  801b84:	10c5883a 	add	r2,r2,r3
  801b88:	10800504 	addi	r2,r2,20
  801b8c:	11000017 	ldw	r4,0(r2)
  801b90:	01403204 	movi	r5,200
  801b94:	0806b6c0 	call	806b6c <__divsi3>
  801b98:	1007883a 	mov	r3,r2
  801b9c:	8405883a 	add	r2,r16,r16
  801ba0:	1085883a 	add	r2,r2,r2
  801ba4:	e13fe704 	addi	r4,fp,-100
  801ba8:	1105883a 	add	r2,r2,r4
  801bac:	10800504 	addi	r2,r2,20
  801bb0:	10c00015 	stw	r3,0(r2)
    gAvg[2] += (alt_16)(((alt_16)rawData[4] << 8) | rawData[5]) ;

  }

  // Get average of 200 values and store as average current readings
  for ( ii =0; ii < 3; ii = ii+1)
  801bb4:	e0bfe717 	ldw	r2,-100(fp)
  801bb8:	10800044 	addi	r2,r2,1
  801bbc:	e0bfe715 	stw	r2,-100(fp)
  801bc0:	e0bfe717 	ldw	r2,-100(fp)
  801bc4:	108000d0 	cmplti	r2,r2,3
  801bc8:	103fd81e 	bne	r2,zero,801b2c <MPU9250SelfTest+0x454>
  {
    aAvg[ii] /= 200;
    gAvg[ii] /= 200;
  }
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  801bcc:	01004474 	movhi	r4,273
  801bd0:	21241c04 	addi	r4,r4,-28560
  801bd4:	01404474 	movhi	r5,273
  801bd8:	29641804 	addi	r5,r5,-28576
  801bdc:	0802d240 	call	802d24 <I2C_Start>


  // Configure the accelerometer for self-test
  // Enable self test on all three axes and set accelerometer range to +/- 2 g
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, ACCEL_CONFIG, 0xE0, 1);
  801be0:	e0bfe843 	ldbu	r2,-95(fp)
  801be4:	11803fcc 	andi	r6,r2,255
  801be8:	3180201c 	xori	r6,r6,128
  801bec:	31bfe004 	addi	r6,r6,-128
  801bf0:	00803804 	movi	r2,224
  801bf4:	d8800015 	stw	r2,0(sp)
  801bf8:	00800044 	movi	r2,1
  801bfc:	d8800115 	stw	r2,4(sp)
  801c00:	01004474 	movhi	r4,273
  801c04:	21241c04 	addi	r4,r4,-28560
  801c08:	01404474 	movhi	r5,273
  801c0c:	29641804 	addi	r5,r5,-28576
  801c10:	01c00704 	movi	r7,28
  801c14:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, GYRO_CONFIG, 0xE0, 1);
  801c18:	e0bfe843 	ldbu	r2,-95(fp)
  801c1c:	11803fcc 	andi	r6,r2,255
  801c20:	3180201c 	xori	r6,r6,128
  801c24:	31bfe004 	addi	r6,r6,-128
  801c28:	00803804 	movi	r2,224
  801c2c:	d8800015 	stw	r2,0(sp)
  801c30:	00800044 	movi	r2,1
  801c34:	d8800115 	stw	r2,4(sp)
  801c38:	01004474 	movhi	r4,273
  801c3c:	21241c04 	addi	r4,r4,-28560
  801c40:	01404474 	movhi	r5,273
  801c44:	29641804 	addi	r5,r5,-28576
  801c48:	01c006c4 	movi	r7,27
  801c4c:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>

  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  801c50:	01004474 	movhi	r4,273
  801c54:	21241c04 	addi	r4,r4,-28560
  801c58:	01404474 	movhi	r5,273
  801c5c:	29641804 	addi	r5,r5,-28576
  801c60:	0802d5c0 	call	802d5c <I2C_Stop>
  OSTimeDlyHMSM(0, 0, 0, 25);  // Delay a while to let the device stabilize
  801c64:	0009883a 	mov	r4,zero
  801c68:	000b883a 	mov	r5,zero
  801c6c:	000d883a 	mov	r6,zero
  801c70:	01c00644 	movi	r7,25
  801c74:	08187080 	call	818708 <OSTimeDlyHMSM>


  // Get average self-test values of gyro and acclerometer
  for ( ii =0; ii < 200; ii = ii+1)
  801c78:	e03fe715 	stw	zero,-100(fp)
  801c7c:	00008506 	br	801e94 <MPU9250SelfTest+0x7bc>
  {
	I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  801c80:	01004474 	movhi	r4,273
  801c84:	21241c04 	addi	r4,r4,-28560
  801c88:	01404474 	movhi	r5,273
  801c8c:	29641804 	addi	r5,r5,-28576
  801c90:	0802d240 	call	802d24 <I2C_Start>
    // Read the six raw data registers into data array
	I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, ACCEL_XOUT_H, &rawData[0], 6, true);
  801c94:	e0bfe843 	ldbu	r2,-95(fp)
  801c98:	11803fcc 	andi	r6,r2,255
  801c9c:	3180201c 	xori	r6,r6,128
  801ca0:	31bfe004 	addi	r6,r6,-128
  801ca4:	e0bfe884 	addi	r2,fp,-94
  801ca8:	d8800015 	stw	r2,0(sp)
  801cac:	00800184 	movi	r2,6
  801cb0:	d8800115 	stw	r2,4(sp)
  801cb4:	00800044 	movi	r2,1
  801cb8:	d8800215 	stw	r2,8(sp)
  801cbc:	01004474 	movhi	r4,273
  801cc0:	21241c04 	addi	r4,r4,-28560
  801cc4:	01404474 	movhi	r5,273
  801cc8:	29641804 	addi	r5,r5,-28576
  801ccc:	01c00ec4 	movi	r7,59
  801cd0:	08031740 	call	803174 <I2C_ReadFromDeviceRegister>
    I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  801cd4:	01004474 	movhi	r4,273
  801cd8:	21241c04 	addi	r4,r4,-28560
  801cdc:	01404474 	movhi	r5,273
  801ce0:	29641804 	addi	r5,r5,-28576
  801ce4:	0802d5c0 	call	802d5c <I2C_Stop>

	// Turn the MSB and LSB into a signed 16-bit value
    aSTAvg[0] += (alt_16)(((alt_16)rawData[0] << 8) | rawData[1]) ;
  801ce8:	e13ff217 	ldw	r4,-56(fp)
  801cec:	e0bfe883 	ldbu	r2,-94(fp)
  801cf0:	10803fcc 	andi	r2,r2,255
  801cf4:	1004923a 	slli	r2,r2,8
  801cf8:	1007883a 	mov	r3,r2
  801cfc:	e0bfe8c3 	ldbu	r2,-93(fp)
  801d00:	10803fcc 	andi	r2,r2,255
  801d04:	1884b03a 	or	r2,r3,r2
  801d08:	10bfffcc 	andi	r2,r2,65535
  801d0c:	10a0001c 	xori	r2,r2,32768
  801d10:	10a00004 	addi	r2,r2,-32768
  801d14:	2085883a 	add	r2,r4,r2
  801d18:	e0bff215 	stw	r2,-56(fp)
    aSTAvg[1] += (alt_16)(((alt_16)rawData[2] << 8) | rawData[3]) ;
  801d1c:	e13ff317 	ldw	r4,-52(fp)
  801d20:	e0bfe903 	ldbu	r2,-92(fp)
  801d24:	10803fcc 	andi	r2,r2,255
  801d28:	1004923a 	slli	r2,r2,8
  801d2c:	1007883a 	mov	r3,r2
  801d30:	e0bfe943 	ldbu	r2,-91(fp)
  801d34:	10803fcc 	andi	r2,r2,255
  801d38:	1884b03a 	or	r2,r3,r2
  801d3c:	10bfffcc 	andi	r2,r2,65535
  801d40:	10a0001c 	xori	r2,r2,32768
  801d44:	10a00004 	addi	r2,r2,-32768
  801d48:	2085883a 	add	r2,r4,r2
  801d4c:	e0bff315 	stw	r2,-52(fp)
    aSTAvg[2] += (alt_16)(((alt_16)rawData[4] << 8) | rawData[5]) ;
  801d50:	e13ff417 	ldw	r4,-48(fp)
  801d54:	e0bfe983 	ldbu	r2,-90(fp)
  801d58:	10803fcc 	andi	r2,r2,255
  801d5c:	1004923a 	slli	r2,r2,8
  801d60:	1007883a 	mov	r3,r2
  801d64:	e0bfe9c3 	ldbu	r2,-89(fp)
  801d68:	10803fcc 	andi	r2,r2,255
  801d6c:	1884b03a 	or	r2,r3,r2
  801d70:	10bfffcc 	andi	r2,r2,65535
  801d74:	10a0001c 	xori	r2,r2,32768
  801d78:	10a00004 	addi	r2,r2,-32768
  801d7c:	2085883a 	add	r2,r4,r2
  801d80:	e0bff415 	stw	r2,-48(fp)

    I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  801d84:	01004474 	movhi	r4,273
  801d88:	21241c04 	addi	r4,r4,-28560
  801d8c:	01404474 	movhi	r5,273
  801d90:	29641804 	addi	r5,r5,-28576
  801d94:	0802d240 	call	802d24 <I2C_Start>
    // Read the six raw data registers sequentially into data array
	I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, GYRO_XOUT_H, &rawData[0], 6, true);
  801d98:	e0bfe843 	ldbu	r2,-95(fp)
  801d9c:	11803fcc 	andi	r6,r2,255
  801da0:	3180201c 	xori	r6,r6,128
  801da4:	31bfe004 	addi	r6,r6,-128
  801da8:	e0bfe884 	addi	r2,fp,-94
  801dac:	d8800015 	stw	r2,0(sp)
  801db0:	00800184 	movi	r2,6
  801db4:	d8800115 	stw	r2,4(sp)
  801db8:	00800044 	movi	r2,1
  801dbc:	d8800215 	stw	r2,8(sp)
  801dc0:	01004474 	movhi	r4,273
  801dc4:	21241c04 	addi	r4,r4,-28560
  801dc8:	01404474 	movhi	r5,273
  801dcc:	29641804 	addi	r5,r5,-28576
  801dd0:	01c010c4 	movi	r7,67
  801dd4:	08031740 	call	803174 <I2C_ReadFromDeviceRegister>
    I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  801dd8:	01004474 	movhi	r4,273
  801ddc:	21241c04 	addi	r4,r4,-28560
  801de0:	01404474 	movhi	r5,273
  801de4:	29641804 	addi	r5,r5,-28576
  801de8:	0802d5c0 	call	802d5c <I2C_Stop>

	// Turn the MSB and LSB into a signed 16-bit value
    gSTAvg[0] += (alt_16)(((alt_16)rawData[0] << 8) | rawData[1]) ;
  801dec:	e13ff517 	ldw	r4,-44(fp)
  801df0:	e0bfe883 	ldbu	r2,-94(fp)
  801df4:	10803fcc 	andi	r2,r2,255
  801df8:	1004923a 	slli	r2,r2,8
  801dfc:	1007883a 	mov	r3,r2
  801e00:	e0bfe8c3 	ldbu	r2,-93(fp)
  801e04:	10803fcc 	andi	r2,r2,255
  801e08:	1884b03a 	or	r2,r3,r2
  801e0c:	10bfffcc 	andi	r2,r2,65535
  801e10:	10a0001c 	xori	r2,r2,32768
  801e14:	10a00004 	addi	r2,r2,-32768
  801e18:	2085883a 	add	r2,r4,r2
  801e1c:	e0bff515 	stw	r2,-44(fp)
    gSTAvg[1] += (alt_16)(((alt_16)rawData[2] << 8) | rawData[3]) ;
  801e20:	e13ff617 	ldw	r4,-40(fp)
  801e24:	e0bfe903 	ldbu	r2,-92(fp)
  801e28:	10803fcc 	andi	r2,r2,255
  801e2c:	1004923a 	slli	r2,r2,8
  801e30:	1007883a 	mov	r3,r2
  801e34:	e0bfe943 	ldbu	r2,-91(fp)
  801e38:	10803fcc 	andi	r2,r2,255
  801e3c:	1884b03a 	or	r2,r3,r2
  801e40:	10bfffcc 	andi	r2,r2,65535
  801e44:	10a0001c 	xori	r2,r2,32768
  801e48:	10a00004 	addi	r2,r2,-32768
  801e4c:	2085883a 	add	r2,r4,r2
  801e50:	e0bff615 	stw	r2,-40(fp)
    gSTAvg[2] += (alt_16)(((alt_16)rawData[4] << 8) | rawData[5]) ;
  801e54:	e13ff717 	ldw	r4,-36(fp)
  801e58:	e0bfe983 	ldbu	r2,-90(fp)
  801e5c:	10803fcc 	andi	r2,r2,255
  801e60:	1004923a 	slli	r2,r2,8
  801e64:	1007883a 	mov	r3,r2
  801e68:	e0bfe9c3 	ldbu	r2,-89(fp)
  801e6c:	10803fcc 	andi	r2,r2,255
  801e70:	1884b03a 	or	r2,r3,r2
  801e74:	10bfffcc 	andi	r2,r2,65535
  801e78:	10a0001c 	xori	r2,r2,32768
  801e7c:	10a00004 	addi	r2,r2,-32768
  801e80:	2085883a 	add	r2,r4,r2
  801e84:	e0bff715 	stw	r2,-36(fp)
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  OSTimeDlyHMSM(0, 0, 0, 25);  // Delay a while to let the device stabilize


  // Get average self-test values of gyro and acclerometer
  for ( ii =0; ii < 200; ii = ii+1)
  801e88:	e0bfe717 	ldw	r2,-100(fp)
  801e8c:	10800044 	addi	r2,r2,1
  801e90:	e0bfe715 	stw	r2,-100(fp)
  801e94:	e0bfe717 	ldw	r2,-100(fp)
  801e98:	10803210 	cmplti	r2,r2,200
  801e9c:	103f781e 	bne	r2,zero,801c80 <MPU9250SelfTest+0x5a8>
    gSTAvg[1] += (alt_16)(((alt_16)rawData[2] << 8) | rawData[3]) ;
    gSTAvg[2] += (alt_16)(((alt_16)rawData[4] << 8) | rawData[5]) ;
  }

  // Get average of 200 values and store as average self-test readings
  for ( ii =0; ii < 3; ii = ii+1)
  801ea0:	e03fe715 	stw	zero,-100(fp)
  801ea4:	00002506 	br	801f3c <MPU9250SelfTest+0x864>
  {
    aSTAvg[ii] /= 200;
  801ea8:	e43fe717 	ldw	r16,-100(fp)
  801eac:	e0bfe717 	ldw	r2,-100(fp)
  801eb0:	1085883a 	add	r2,r2,r2
  801eb4:	1085883a 	add	r2,r2,r2
  801eb8:	e0ffe704 	addi	r3,fp,-100
  801ebc:	10c5883a 	add	r2,r2,r3
  801ec0:	10800b04 	addi	r2,r2,44
  801ec4:	11000017 	ldw	r4,0(r2)
  801ec8:	01403204 	movi	r5,200
  801ecc:	0806b6c0 	call	806b6c <__divsi3>
  801ed0:	1007883a 	mov	r3,r2
  801ed4:	8405883a 	add	r2,r16,r16
  801ed8:	1085883a 	add	r2,r2,r2
  801edc:	e13fe704 	addi	r4,fp,-100
  801ee0:	1105883a 	add	r2,r2,r4
  801ee4:	10800b04 	addi	r2,r2,44
  801ee8:	10c00015 	stw	r3,0(r2)
    gSTAvg[ii] /= 200;
  801eec:	e43fe717 	ldw	r16,-100(fp)
  801ef0:	e0bfe717 	ldw	r2,-100(fp)
  801ef4:	1085883a 	add	r2,r2,r2
  801ef8:	1085883a 	add	r2,r2,r2
  801efc:	e0ffe704 	addi	r3,fp,-100
  801f00:	10c5883a 	add	r2,r2,r3
  801f04:	10800e04 	addi	r2,r2,56
  801f08:	11000017 	ldw	r4,0(r2)
  801f0c:	01403204 	movi	r5,200
  801f10:	0806b6c0 	call	806b6c <__divsi3>
  801f14:	1007883a 	mov	r3,r2
  801f18:	8405883a 	add	r2,r16,r16
  801f1c:	1085883a 	add	r2,r2,r2
  801f20:	e13fe704 	addi	r4,fp,-100
  801f24:	1105883a 	add	r2,r2,r4
  801f28:	10800e04 	addi	r2,r2,56
  801f2c:	10c00015 	stw	r3,0(r2)
    gSTAvg[1] += (alt_16)(((alt_16)rawData[2] << 8) | rawData[3]) ;
    gSTAvg[2] += (alt_16)(((alt_16)rawData[4] << 8) | rawData[5]) ;
  }

  // Get average of 200 values and store as average self-test readings
  for ( ii =0; ii < 3; ii = ii+1)
  801f30:	e0bfe717 	ldw	r2,-100(fp)
  801f34:	10800044 	addi	r2,r2,1
  801f38:	e0bfe715 	stw	r2,-100(fp)
  801f3c:	e0bfe717 	ldw	r2,-100(fp)
  801f40:	108000d0 	cmplti	r2,r2,3
  801f44:	103fd81e 	bne	r2,zero,801ea8 <MPU9250SelfTest+0x7d0>
  {
    aSTAvg[ii] /= 200;
    gSTAvg[ii] /= 200;
  }

  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  801f48:	01004474 	movhi	r4,273
  801f4c:	21241c04 	addi	r4,r4,-28560
  801f50:	01404474 	movhi	r5,273
  801f54:	29641804 	addi	r5,r5,-28576
  801f58:	0802d240 	call	802d24 <I2C_Start>

  // Configure the gyro and accelerometer for normal operation
  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, ACCEL_CONFIG, 0x00, 1);
  801f5c:	e0bfe843 	ldbu	r2,-95(fp)
  801f60:	11803fcc 	andi	r6,r2,255
  801f64:	3180201c 	xori	r6,r6,128
  801f68:	31bfe004 	addi	r6,r6,-128
  801f6c:	d8000015 	stw	zero,0(sp)
  801f70:	00800044 	movi	r2,1
  801f74:	d8800115 	stw	r2,4(sp)
  801f78:	01004474 	movhi	r4,273
  801f7c:	21241c04 	addi	r4,r4,-28560
  801f80:	01404474 	movhi	r5,273
  801f84:	29641804 	addi	r5,r5,-28576
  801f88:	01c00704 	movi	r7,28
  801f8c:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  801f90:	01004474 	movhi	r4,273
  801f94:	21241c04 	addi	r4,r4,-28560
  801f98:	01404474 	movhi	r5,273
  801f9c:	29641804 	addi	r5,r5,-28576
  801fa0:	0802d5c0 	call	802d5c <I2C_Stop>
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  801fa4:	01004474 	movhi	r4,273
  801fa8:	21241c04 	addi	r4,r4,-28560
  801fac:	01404474 	movhi	r5,273
  801fb0:	29641804 	addi	r5,r5,-28576
  801fb4:	0802d240 	call	802d24 <I2C_Start>

  I2C_WriteToDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, GYRO_CONFIG, 0x00, 1);
  801fb8:	e0bfe843 	ldbu	r2,-95(fp)
  801fbc:	11803fcc 	andi	r6,r2,255
  801fc0:	3180201c 	xori	r6,r6,128
  801fc4:	31bfe004 	addi	r6,r6,-128
  801fc8:	d8000015 	stw	zero,0(sp)
  801fcc:	00800044 	movi	r2,1
  801fd0:	d8800115 	stw	r2,4(sp)
  801fd4:	01004474 	movhi	r4,273
  801fd8:	21241c04 	addi	r4,r4,-28560
  801fdc:	01404474 	movhi	r5,273
  801fe0:	29641804 	addi	r5,r5,-28576
  801fe4:	01c006c4 	movi	r7,27
  801fe8:	0802e8c0 	call	802e8c <I2C_WriteToDeviceRegister>
  OSTimeDlyHMSM(0, 0, 0, 25);;  // Delay a while to let the device stabilize
  801fec:	0009883a 	mov	r4,zero
  801ff0:	000b883a 	mov	r5,zero
  801ff4:	000d883a 	mov	r6,zero
  801ff8:	01c00644 	movi	r7,25
  801ffc:	08187080 	call	818708 <OSTimeDlyHMSM>

  // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
  // X-axis accel self-test results
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  802000:	01004474 	movhi	r4,273
  802004:	21241c04 	addi	r4,r4,-28560
  802008:	01404474 	movhi	r5,273
  80200c:	29641804 	addi	r5,r5,-28576
  802010:	0802d5c0 	call	802d5c <I2C_Stop>
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  802014:	01004474 	movhi	r4,273
  802018:	21241c04 	addi	r4,r4,-28560
  80201c:	01404474 	movhi	r5,273
  802020:	29641804 	addi	r5,r5,-28576
  802024:	0802d240 	call	802d24 <I2C_Start>
  I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, SELF_TEST_X_ACCEL, &selfTest[0] , 1, true);
  802028:	e0bfe843 	ldbu	r2,-95(fp)
  80202c:	11803fcc 	andi	r6,r2,255
  802030:	3180201c 	xori	r6,r6,128
  802034:	31bfe004 	addi	r6,r6,-128
  802038:	e0bfea04 	addi	r2,fp,-88
  80203c:	d8800015 	stw	r2,0(sp)
  802040:	00800044 	movi	r2,1
  802044:	d8800115 	stw	r2,4(sp)
  802048:	00800044 	movi	r2,1
  80204c:	d8800215 	stw	r2,8(sp)
  802050:	01004474 	movhi	r4,273
  802054:	21241c04 	addi	r4,r4,-28560
  802058:	01404474 	movhi	r5,273
  80205c:	29641804 	addi	r5,r5,-28576
  802060:	01c00344 	movi	r7,13
  802064:	08031740 	call	803174 <I2C_ReadFromDeviceRegister>
  // Y-axis accel self-test results
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  802068:	01004474 	movhi	r4,273
  80206c:	21241c04 	addi	r4,r4,-28560
  802070:	01404474 	movhi	r5,273
  802074:	29641804 	addi	r5,r5,-28576
  802078:	0802d5c0 	call	802d5c <I2C_Stop>
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  80207c:	01004474 	movhi	r4,273
  802080:	21241c04 	addi	r4,r4,-28560
  802084:	01404474 	movhi	r5,273
  802088:	29641804 	addi	r5,r5,-28576
  80208c:	0802d240 	call	802d24 <I2C_Start>
  I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, SELF_TEST_Y_ACCEL, &selfTest[1] , 1, true);
  802090:	e0bfe843 	ldbu	r2,-95(fp)
  802094:	11803fcc 	andi	r6,r2,255
  802098:	3180201c 	xori	r6,r6,128
  80209c:	31bfe004 	addi	r6,r6,-128
  8020a0:	e0bfea04 	addi	r2,fp,-88
  8020a4:	10800044 	addi	r2,r2,1
  8020a8:	d8800015 	stw	r2,0(sp)
  8020ac:	00800044 	movi	r2,1
  8020b0:	d8800115 	stw	r2,4(sp)
  8020b4:	00800044 	movi	r2,1
  8020b8:	d8800215 	stw	r2,8(sp)
  8020bc:	01004474 	movhi	r4,273
  8020c0:	21241c04 	addi	r4,r4,-28560
  8020c4:	01404474 	movhi	r5,273
  8020c8:	29641804 	addi	r5,r5,-28576
  8020cc:	01c00384 	movi	r7,14
  8020d0:	08031740 	call	803174 <I2C_ReadFromDeviceRegister>
  // Z-axis accel self-test results
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  8020d4:	01004474 	movhi	r4,273
  8020d8:	21241c04 	addi	r4,r4,-28560
  8020dc:	01404474 	movhi	r5,273
  8020e0:	29641804 	addi	r5,r5,-28576
  8020e4:	0802d5c0 	call	802d5c <I2C_Stop>
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  8020e8:	01004474 	movhi	r4,273
  8020ec:	21241c04 	addi	r4,r4,-28560
  8020f0:	01404474 	movhi	r5,273
  8020f4:	29641804 	addi	r5,r5,-28576
  8020f8:	0802d240 	call	802d24 <I2C_Start>
  I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, SELF_TEST_Z_ACCEL, &selfTest[2] , 1, true);
  8020fc:	e0bfe843 	ldbu	r2,-95(fp)
  802100:	11803fcc 	andi	r6,r2,255
  802104:	3180201c 	xori	r6,r6,128
  802108:	31bfe004 	addi	r6,r6,-128
  80210c:	e0bfea04 	addi	r2,fp,-88
  802110:	10800084 	addi	r2,r2,2
  802114:	d8800015 	stw	r2,0(sp)
  802118:	00800044 	movi	r2,1
  80211c:	d8800115 	stw	r2,4(sp)
  802120:	00800044 	movi	r2,1
  802124:	d8800215 	stw	r2,8(sp)
  802128:	01004474 	movhi	r4,273
  80212c:	21241c04 	addi	r4,r4,-28560
  802130:	01404474 	movhi	r5,273
  802134:	29641804 	addi	r5,r5,-28576
  802138:	01c003c4 	movi	r7,15
  80213c:	08031740 	call	803174 <I2C_ReadFromDeviceRegister>
  // X-axis gyro self-test results
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  802140:	01004474 	movhi	r4,273
  802144:	21241c04 	addi	r4,r4,-28560
  802148:	01404474 	movhi	r5,273
  80214c:	29641804 	addi	r5,r5,-28576
  802150:	0802d5c0 	call	802d5c <I2C_Stop>
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  802154:	01004474 	movhi	r4,273
  802158:	21241c04 	addi	r4,r4,-28560
  80215c:	01404474 	movhi	r5,273
  802160:	29641804 	addi	r5,r5,-28576
  802164:	0802d240 	call	802d24 <I2C_Start>
  I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, SELF_TEST_X_GYRO, &selfTest[3] , 1, true);
  802168:	e0bfe843 	ldbu	r2,-95(fp)
  80216c:	11803fcc 	andi	r6,r2,255
  802170:	3180201c 	xori	r6,r6,128
  802174:	31bfe004 	addi	r6,r6,-128
  802178:	e0bfea04 	addi	r2,fp,-88
  80217c:	108000c4 	addi	r2,r2,3
  802180:	d8800015 	stw	r2,0(sp)
  802184:	00800044 	movi	r2,1
  802188:	d8800115 	stw	r2,4(sp)
  80218c:	00800044 	movi	r2,1
  802190:	d8800215 	stw	r2,8(sp)
  802194:	01004474 	movhi	r4,273
  802198:	21241c04 	addi	r4,r4,-28560
  80219c:	01404474 	movhi	r5,273
  8021a0:	29641804 	addi	r5,r5,-28576
  8021a4:	000f883a 	mov	r7,zero
  8021a8:	08031740 	call	803174 <I2C_ReadFromDeviceRegister>
  // Y-axis gyro self-test results
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  8021ac:	01004474 	movhi	r4,273
  8021b0:	21241c04 	addi	r4,r4,-28560
  8021b4:	01404474 	movhi	r5,273
  8021b8:	29641804 	addi	r5,r5,-28576
  8021bc:	0802d5c0 	call	802d5c <I2C_Stop>
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  8021c0:	01004474 	movhi	r4,273
  8021c4:	21241c04 	addi	r4,r4,-28560
  8021c8:	01404474 	movhi	r5,273
  8021cc:	29641804 	addi	r5,r5,-28576
  8021d0:	0802d240 	call	802d24 <I2C_Start>
  I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, SELF_TEST_Y_GYRO, &selfTest[4] , 1, true);
  8021d4:	e0bfe843 	ldbu	r2,-95(fp)
  8021d8:	11803fcc 	andi	r6,r2,255
  8021dc:	3180201c 	xori	r6,r6,128
  8021e0:	31bfe004 	addi	r6,r6,-128
  8021e4:	e0bfea04 	addi	r2,fp,-88
  8021e8:	10800104 	addi	r2,r2,4
  8021ec:	d8800015 	stw	r2,0(sp)
  8021f0:	00800044 	movi	r2,1
  8021f4:	d8800115 	stw	r2,4(sp)
  8021f8:	00800044 	movi	r2,1
  8021fc:	d8800215 	stw	r2,8(sp)
  802200:	01004474 	movhi	r4,273
  802204:	21241c04 	addi	r4,r4,-28560
  802208:	01404474 	movhi	r5,273
  80220c:	29641804 	addi	r5,r5,-28576
  802210:	01c00044 	movi	r7,1
  802214:	08031740 	call	803174 <I2C_ReadFromDeviceRegister>
  // Z-axis gyro self-test results
  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  802218:	01004474 	movhi	r4,273
  80221c:	21241c04 	addi	r4,r4,-28560
  802220:	01404474 	movhi	r5,273
  802224:	29641804 	addi	r5,r5,-28576
  802228:	0802d5c0 	call	802d5c <I2C_Stop>
  I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  80222c:	01004474 	movhi	r4,273
  802230:	21241c04 	addi	r4,r4,-28560
  802234:	01404474 	movhi	r5,273
  802238:	29641804 	addi	r5,r5,-28576
  80223c:	0802d240 	call	802d24 <I2C_Start>
  I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, deviceAddress, SELF_TEST_Z_GYRO, &selfTest[5] , 1, true);
  802240:	e0bfe843 	ldbu	r2,-95(fp)
  802244:	11803fcc 	andi	r6,r2,255
  802248:	3180201c 	xori	r6,r6,128
  80224c:	31bfe004 	addi	r6,r6,-128
  802250:	e0bfea04 	addi	r2,fp,-88
  802254:	10800144 	addi	r2,r2,5
  802258:	d8800015 	stw	r2,0(sp)
  80225c:	00800044 	movi	r2,1
  802260:	d8800115 	stw	r2,4(sp)
  802264:	00800044 	movi	r2,1
  802268:	d8800215 	stw	r2,8(sp)
  80226c:	01004474 	movhi	r4,273
  802270:	21241c04 	addi	r4,r4,-28560
  802274:	01404474 	movhi	r5,273
  802278:	29641804 	addi	r5,r5,-28576
  80227c:	01c00084 	movi	r7,2
  802280:	08031740 	call	803174 <I2C_ReadFromDeviceRegister>

  I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  802284:	01004474 	movhi	r4,273
  802288:	21241c04 	addi	r4,r4,-28560
  80228c:	01404474 	movhi	r5,273
  802290:	29641804 	addi	r5,r5,-28576
  802294:	0802d5c0 	call	802d5c <I2C_Stop>


  // Retrieve factory self-test value from self-test code reads
  // FT[Xa] factory trim calculation
  factoryTrim[0] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[0] - 1.0) ));
  802298:	e0ffe803 	ldbu	r3,-96(fp)
  80229c:	00828f04 	movi	r2,2620
  8022a0:	10c8983a 	sll	r4,r2,r3
  8022a4:	08059d80 	call	8059d8 <__floatsisf>
  8022a8:	1009883a 	mov	r4,r2
  8022ac:	0805a700 	call	805a70 <__extendsfdf2>
  8022b0:	1021883a 	mov	r16,r2
  8022b4:	1823883a 	mov	r17,r3
  8022b8:	e0bfea03 	ldbu	r2,-88(fp)
  8022bc:	11003fcc 	andi	r4,r2,255
  8022c0:	0805ac40 	call	805ac4 <__floatunsisf>
  8022c4:	1009883a 	mov	r4,r2
  8022c8:	0805a700 	call	805a70 <__extendsfdf2>
  8022cc:	100b883a 	mov	r5,r2
  8022d0:	180d883a 	mov	r6,r3
  8022d4:	2809883a 	mov	r4,r5
  8022d8:	300b883a 	mov	r5,r6
  8022dc:	000d883a 	mov	r6,zero
  8022e0:	01cffc34 	movhi	r7,16368
  8022e4:	0805f940 	call	805f94 <__subdf3>
  8022e8:	1009883a 	mov	r4,r2
  8022ec:	180b883a 	mov	r5,r3
  8022f0:	2005883a 	mov	r2,r4
  8022f4:	2807883a 	mov	r3,r5
  8022f8:	0130a3f4 	movhi	r4,49807
  8022fc:	21170a44 	addi	r4,r4,23593
  802300:	014ffc34 	movhi	r5,16368
  802304:	294a3d44 	addi	r5,r5,10485
  802308:	100d883a 	mov	r6,r2
  80230c:	180f883a 	mov	r7,r3
  802310:	08037a40 	call	8037a4 <pow>
  802314:	1009883a 	mov	r4,r2
  802318:	180b883a 	mov	r5,r3
  80231c:	2005883a 	mov	r2,r4
  802320:	2807883a 	mov	r3,r5
  802324:	8009883a 	mov	r4,r16
  802328:	880b883a 	mov	r5,r17
  80232c:	100d883a 	mov	r6,r2
  802330:	180f883a 	mov	r7,r3
  802334:	08060880 	call	806088 <__muldf3>
  802338:	1009883a 	mov	r4,r2
  80233c:	180b883a 	mov	r5,r3
  802340:	2005883a 	mov	r2,r4
  802344:	2807883a 	mov	r3,r5
  802348:	1009883a 	mov	r4,r2
  80234c:	180b883a 	mov	r5,r3
  802350:	0806a7c0 	call	806a7c <__truncdfsf2>
  802354:	e0bff815 	stw	r2,-32(fp)
  // FT[Ya] factory trim calculation
  factoryTrim[1] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[1] - 1.0) ));
  802358:	e0ffe803 	ldbu	r3,-96(fp)
  80235c:	00828f04 	movi	r2,2620
  802360:	10c8983a 	sll	r4,r2,r3
  802364:	08059d80 	call	8059d8 <__floatsisf>
  802368:	1009883a 	mov	r4,r2
  80236c:	0805a700 	call	805a70 <__extendsfdf2>
  802370:	1021883a 	mov	r16,r2
  802374:	1823883a 	mov	r17,r3
  802378:	e0bfea43 	ldbu	r2,-87(fp)
  80237c:	11003fcc 	andi	r4,r2,255
  802380:	0805ac40 	call	805ac4 <__floatunsisf>
  802384:	1009883a 	mov	r4,r2
  802388:	0805a700 	call	805a70 <__extendsfdf2>
  80238c:	100b883a 	mov	r5,r2
  802390:	180d883a 	mov	r6,r3
  802394:	2809883a 	mov	r4,r5
  802398:	300b883a 	mov	r5,r6
  80239c:	000d883a 	mov	r6,zero
  8023a0:	01cffc34 	movhi	r7,16368
  8023a4:	0805f940 	call	805f94 <__subdf3>
  8023a8:	1009883a 	mov	r4,r2
  8023ac:	180b883a 	mov	r5,r3
  8023b0:	2005883a 	mov	r2,r4
  8023b4:	2807883a 	mov	r3,r5
  8023b8:	0130a3f4 	movhi	r4,49807
  8023bc:	21170a44 	addi	r4,r4,23593
  8023c0:	014ffc34 	movhi	r5,16368
  8023c4:	294a3d44 	addi	r5,r5,10485
  8023c8:	100d883a 	mov	r6,r2
  8023cc:	180f883a 	mov	r7,r3
  8023d0:	08037a40 	call	8037a4 <pow>
  8023d4:	100f883a 	mov	r7,r2
  8023d8:	1811883a 	mov	r8,r3
  8023dc:	8009883a 	mov	r4,r16
  8023e0:	880b883a 	mov	r5,r17
  8023e4:	380d883a 	mov	r6,r7
  8023e8:	400f883a 	mov	r7,r8
  8023ec:	08060880 	call	806088 <__muldf3>
  8023f0:	1009883a 	mov	r4,r2
  8023f4:	180b883a 	mov	r5,r3
  8023f8:	2005883a 	mov	r2,r4
  8023fc:	2807883a 	mov	r3,r5
  802400:	1009883a 	mov	r4,r2
  802404:	180b883a 	mov	r5,r3
  802408:	0806a7c0 	call	806a7c <__truncdfsf2>
  80240c:	e0bff915 	stw	r2,-28(fp)
  // FT[Za] factory trim calculation
  factoryTrim[2] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[2] - 1.0) ));
  802410:	e0ffe803 	ldbu	r3,-96(fp)
  802414:	00828f04 	movi	r2,2620
  802418:	10c8983a 	sll	r4,r2,r3
  80241c:	08059d80 	call	8059d8 <__floatsisf>
  802420:	1009883a 	mov	r4,r2
  802424:	0805a700 	call	805a70 <__extendsfdf2>
  802428:	1021883a 	mov	r16,r2
  80242c:	1823883a 	mov	r17,r3
  802430:	e0bfea83 	ldbu	r2,-86(fp)
  802434:	11003fcc 	andi	r4,r2,255
  802438:	0805ac40 	call	805ac4 <__floatunsisf>
  80243c:	1009883a 	mov	r4,r2
  802440:	0805a700 	call	805a70 <__extendsfdf2>
  802444:	100b883a 	mov	r5,r2
  802448:	180d883a 	mov	r6,r3
  80244c:	2809883a 	mov	r4,r5
  802450:	300b883a 	mov	r5,r6
  802454:	000d883a 	mov	r6,zero
  802458:	01cffc34 	movhi	r7,16368
  80245c:	0805f940 	call	805f94 <__subdf3>
  802460:	1009883a 	mov	r4,r2
  802464:	180b883a 	mov	r5,r3
  802468:	2005883a 	mov	r2,r4
  80246c:	2807883a 	mov	r3,r5
  802470:	0130a3f4 	movhi	r4,49807
  802474:	21170a44 	addi	r4,r4,23593
  802478:	014ffc34 	movhi	r5,16368
  80247c:	294a3d44 	addi	r5,r5,10485
  802480:	100d883a 	mov	r6,r2
  802484:	180f883a 	mov	r7,r3
  802488:	08037a40 	call	8037a4 <pow>
  80248c:	100f883a 	mov	r7,r2
  802490:	1811883a 	mov	r8,r3
  802494:	8009883a 	mov	r4,r16
  802498:	880b883a 	mov	r5,r17
  80249c:	380d883a 	mov	r6,r7
  8024a0:	400f883a 	mov	r7,r8
  8024a4:	08060880 	call	806088 <__muldf3>
  8024a8:	1009883a 	mov	r4,r2
  8024ac:	180b883a 	mov	r5,r3
  8024b0:	2005883a 	mov	r2,r4
  8024b4:	2807883a 	mov	r3,r5
  8024b8:	1009883a 	mov	r4,r2
  8024bc:	180b883a 	mov	r5,r3
  8024c0:	0806a7c0 	call	806a7c <__truncdfsf2>
  8024c4:	e0bffa15 	stw	r2,-24(fp)
  // FT[Xg] factory trim calculation
  factoryTrim[3] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[3] - 1.0) ));
  8024c8:	e0ffe803 	ldbu	r3,-96(fp)
  8024cc:	00828f04 	movi	r2,2620
  8024d0:	10c8983a 	sll	r4,r2,r3
  8024d4:	08059d80 	call	8059d8 <__floatsisf>
  8024d8:	1009883a 	mov	r4,r2
  8024dc:	0805a700 	call	805a70 <__extendsfdf2>
  8024e0:	1021883a 	mov	r16,r2
  8024e4:	1823883a 	mov	r17,r3
  8024e8:	e0bfeac3 	ldbu	r2,-85(fp)
  8024ec:	11003fcc 	andi	r4,r2,255
  8024f0:	0805ac40 	call	805ac4 <__floatunsisf>
  8024f4:	1009883a 	mov	r4,r2
  8024f8:	0805a700 	call	805a70 <__extendsfdf2>
  8024fc:	100b883a 	mov	r5,r2
  802500:	180d883a 	mov	r6,r3
  802504:	2809883a 	mov	r4,r5
  802508:	300b883a 	mov	r5,r6
  80250c:	000d883a 	mov	r6,zero
  802510:	01cffc34 	movhi	r7,16368
  802514:	0805f940 	call	805f94 <__subdf3>
  802518:	1009883a 	mov	r4,r2
  80251c:	180b883a 	mov	r5,r3
  802520:	2005883a 	mov	r2,r4
  802524:	2807883a 	mov	r3,r5
  802528:	0130a3f4 	movhi	r4,49807
  80252c:	21170a44 	addi	r4,r4,23593
  802530:	014ffc34 	movhi	r5,16368
  802534:	294a3d44 	addi	r5,r5,10485
  802538:	100d883a 	mov	r6,r2
  80253c:	180f883a 	mov	r7,r3
  802540:	08037a40 	call	8037a4 <pow>
  802544:	100f883a 	mov	r7,r2
  802548:	1811883a 	mov	r8,r3
  80254c:	8009883a 	mov	r4,r16
  802550:	880b883a 	mov	r5,r17
  802554:	380d883a 	mov	r6,r7
  802558:	400f883a 	mov	r7,r8
  80255c:	08060880 	call	806088 <__muldf3>
  802560:	1009883a 	mov	r4,r2
  802564:	180b883a 	mov	r5,r3
  802568:	2005883a 	mov	r2,r4
  80256c:	2807883a 	mov	r3,r5
  802570:	1009883a 	mov	r4,r2
  802574:	180b883a 	mov	r5,r3
  802578:	0806a7c0 	call	806a7c <__truncdfsf2>
  80257c:	e0bffb15 	stw	r2,-20(fp)
  // FT[Yg] factory trim calculation
  factoryTrim[4] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[4] - 1.0) ));
  802580:	e0ffe803 	ldbu	r3,-96(fp)
  802584:	00828f04 	movi	r2,2620
  802588:	10c8983a 	sll	r4,r2,r3
  80258c:	08059d80 	call	8059d8 <__floatsisf>
  802590:	1009883a 	mov	r4,r2
  802594:	0805a700 	call	805a70 <__extendsfdf2>
  802598:	1021883a 	mov	r16,r2
  80259c:	1823883a 	mov	r17,r3
  8025a0:	e0bfeb03 	ldbu	r2,-84(fp)
  8025a4:	11003fcc 	andi	r4,r2,255
  8025a8:	0805ac40 	call	805ac4 <__floatunsisf>
  8025ac:	1009883a 	mov	r4,r2
  8025b0:	0805a700 	call	805a70 <__extendsfdf2>
  8025b4:	100b883a 	mov	r5,r2
  8025b8:	180d883a 	mov	r6,r3
  8025bc:	2809883a 	mov	r4,r5
  8025c0:	300b883a 	mov	r5,r6
  8025c4:	000d883a 	mov	r6,zero
  8025c8:	01cffc34 	movhi	r7,16368
  8025cc:	0805f940 	call	805f94 <__subdf3>
  8025d0:	1009883a 	mov	r4,r2
  8025d4:	180b883a 	mov	r5,r3
  8025d8:	2005883a 	mov	r2,r4
  8025dc:	2807883a 	mov	r3,r5
  8025e0:	0130a3f4 	movhi	r4,49807
  8025e4:	21170a44 	addi	r4,r4,23593
  8025e8:	014ffc34 	movhi	r5,16368
  8025ec:	294a3d44 	addi	r5,r5,10485
  8025f0:	100d883a 	mov	r6,r2
  8025f4:	180f883a 	mov	r7,r3
  8025f8:	08037a40 	call	8037a4 <pow>
  8025fc:	100f883a 	mov	r7,r2
  802600:	1811883a 	mov	r8,r3
  802604:	8009883a 	mov	r4,r16
  802608:	880b883a 	mov	r5,r17
  80260c:	380d883a 	mov	r6,r7
  802610:	400f883a 	mov	r7,r8
  802614:	08060880 	call	806088 <__muldf3>
  802618:	1009883a 	mov	r4,r2
  80261c:	180b883a 	mov	r5,r3
  802620:	2005883a 	mov	r2,r4
  802624:	2807883a 	mov	r3,r5
  802628:	1009883a 	mov	r4,r2
  80262c:	180b883a 	mov	r5,r3
  802630:	0806a7c0 	call	806a7c <__truncdfsf2>
  802634:	e0bffc15 	stw	r2,-16(fp)
  // FT[Zg] factory trim calculation
  factoryTrim[5] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[5] - 1.0) ));
  802638:	e0ffe803 	ldbu	r3,-96(fp)
  80263c:	00828f04 	movi	r2,2620
  802640:	10c8983a 	sll	r4,r2,r3
  802644:	08059d80 	call	8059d8 <__floatsisf>
  802648:	1009883a 	mov	r4,r2
  80264c:	0805a700 	call	805a70 <__extendsfdf2>
  802650:	1021883a 	mov	r16,r2
  802654:	1823883a 	mov	r17,r3
  802658:	e0bfeb43 	ldbu	r2,-83(fp)
  80265c:	11003fcc 	andi	r4,r2,255
  802660:	0805ac40 	call	805ac4 <__floatunsisf>
  802664:	1009883a 	mov	r4,r2
  802668:	0805a700 	call	805a70 <__extendsfdf2>
  80266c:	100b883a 	mov	r5,r2
  802670:	180d883a 	mov	r6,r3
  802674:	2809883a 	mov	r4,r5
  802678:	300b883a 	mov	r5,r6
  80267c:	000d883a 	mov	r6,zero
  802680:	01cffc34 	movhi	r7,16368
  802684:	0805f940 	call	805f94 <__subdf3>
  802688:	1009883a 	mov	r4,r2
  80268c:	180b883a 	mov	r5,r3
  802690:	2005883a 	mov	r2,r4
  802694:	2807883a 	mov	r3,r5
  802698:	0130a3f4 	movhi	r4,49807
  80269c:	21170a44 	addi	r4,r4,23593
  8026a0:	014ffc34 	movhi	r5,16368
  8026a4:	294a3d44 	addi	r5,r5,10485
  8026a8:	100d883a 	mov	r6,r2
  8026ac:	180f883a 	mov	r7,r3
  8026b0:	08037a40 	call	8037a4 <pow>
  8026b4:	100f883a 	mov	r7,r2
  8026b8:	1811883a 	mov	r8,r3
  8026bc:	8009883a 	mov	r4,r16
  8026c0:	880b883a 	mov	r5,r17
  8026c4:	380d883a 	mov	r6,r7
  8026c8:	400f883a 	mov	r7,r8
  8026cc:	08060880 	call	806088 <__muldf3>
  8026d0:	1009883a 	mov	r4,r2
  8026d4:	180b883a 	mov	r5,r3
  8026d8:	2005883a 	mov	r2,r4
  8026dc:	2807883a 	mov	r3,r5
  8026e0:	1009883a 	mov	r4,r2
  8026e4:	180b883a 	mov	r5,r3
  8026e8:	0806a7c0 	call	806a7c <__truncdfsf2>
  8026ec:	e0bffd15 	stw	r2,-12(fp)

  // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim
  // of the Self-Test Response
  // To get percent, must multiply by 100
  for ( ii =0; ii < 3; ii = ii+1)
  8026f0:	e03fe715 	stw	zero,-100(fp)
  8026f4:	00008106 	br	8028fc <MPU9250SelfTest+0x1224>
  {
	printf("aSTAvg = %f\n",(float)aSTAvg[ii]);
  8026f8:	e0bfe717 	ldw	r2,-100(fp)
  8026fc:	1085883a 	add	r2,r2,r2
  802700:	1085883a 	add	r2,r2,r2
  802704:	e0ffe704 	addi	r3,fp,-100
  802708:	10c5883a 	add	r2,r2,r3
  80270c:	10800b04 	addi	r2,r2,44
  802710:	11000017 	ldw	r4,0(r2)
  802714:	08059d80 	call	8059d8 <__floatsisf>
  802718:	1009883a 	mov	r4,r2
  80271c:	0805a700 	call	805a70 <__extendsfdf2>
  802720:	100d883a 	mov	r6,r2
  802724:	180f883a 	mov	r7,r3
  802728:	010020b4 	movhi	r4,130
  80272c:	212e5604 	addi	r4,r4,-18088
  802730:	300b883a 	mov	r5,r6
  802734:	380d883a 	mov	r6,r7
  802738:	08075900 	call	807590 <printf>
	printf("aAvg = %f\n",(float)aAvg[ii]);
  80273c:	e0bfe717 	ldw	r2,-100(fp)
  802740:	1085883a 	add	r2,r2,r2
  802744:	1085883a 	add	r2,r2,r2
  802748:	e13fe704 	addi	r4,fp,-100
  80274c:	1105883a 	add	r2,r2,r4
  802750:	10800804 	addi	r2,r2,32
  802754:	11000017 	ldw	r4,0(r2)
  802758:	08059d80 	call	8059d8 <__floatsisf>
  80275c:	1009883a 	mov	r4,r2
  802760:	0805a700 	call	805a70 <__extendsfdf2>
  802764:	100d883a 	mov	r6,r2
  802768:	180f883a 	mov	r7,r3
  80276c:	010020b4 	movhi	r4,130
  802770:	212e5a04 	addi	r4,r4,-18072
  802774:	300b883a 	mov	r5,r6
  802778:	380d883a 	mov	r6,r7
  80277c:	08075900 	call	807590 <printf>
	printf("factoryTrim = %f\n",(float)factoryTrim[ii]);
  802780:	e0bfe717 	ldw	r2,-100(fp)
  802784:	1085883a 	add	r2,r2,r2
  802788:	1085883a 	add	r2,r2,r2
  80278c:	e0ffe704 	addi	r3,fp,-100
  802790:	10c5883a 	add	r2,r2,r3
  802794:	10801104 	addi	r2,r2,68
  802798:	10800017 	ldw	r2,0(r2)
  80279c:	1009883a 	mov	r4,r2
  8027a0:	0805a700 	call	805a70 <__extendsfdf2>
  8027a4:	100d883a 	mov	r6,r2
  8027a8:	180f883a 	mov	r7,r3
  8027ac:	010020b4 	movhi	r4,130
  8027b0:	212e5d04 	addi	r4,r4,-18060
  8027b4:	300b883a 	mov	r5,r6
  8027b8:	380d883a 	mov	r6,r7
  8027bc:	08075900 	call	807590 <printf>
    // Report percent differences
    destination[ii] = 100.0 * (((float)(aSTAvg[ii] - aAvg[ii])) / factoryTrim[ii]);
  8027c0:	e0bfe717 	ldw	r2,-100(fp)
  8027c4:	1085883a 	add	r2,r2,r2
  8027c8:	1085883a 	add	r2,r2,r2
  8027cc:	1007883a 	mov	r3,r2
  8027d0:	e0bfff17 	ldw	r2,-4(fp)
  8027d4:	18a1883a 	add	r16,r3,r2
  8027d8:	e0bfe717 	ldw	r2,-100(fp)
  8027dc:	1085883a 	add	r2,r2,r2
  8027e0:	1085883a 	add	r2,r2,r2
  8027e4:	e13fe704 	addi	r4,fp,-100
  8027e8:	1105883a 	add	r2,r2,r4
  8027ec:	10800b04 	addi	r2,r2,44
  8027f0:	10c00017 	ldw	r3,0(r2)
  8027f4:	e0bfe717 	ldw	r2,-100(fp)
  8027f8:	1085883a 	add	r2,r2,r2
  8027fc:	1085883a 	add	r2,r2,r2
  802800:	e13fe704 	addi	r4,fp,-100
  802804:	1105883a 	add	r2,r2,r4
  802808:	10800804 	addi	r2,r2,32
  80280c:	10800017 	ldw	r2,0(r2)
  802810:	1889c83a 	sub	r4,r3,r2
  802814:	08059d80 	call	8059d8 <__floatsisf>
  802818:	1007883a 	mov	r3,r2
  80281c:	e0bfe717 	ldw	r2,-100(fp)
  802820:	1085883a 	add	r2,r2,r2
  802824:	1085883a 	add	r2,r2,r2
  802828:	e13fe704 	addi	r4,fp,-100
  80282c:	1105883a 	add	r2,r2,r4
  802830:	10801104 	addi	r2,r2,68
  802834:	10800017 	ldw	r2,0(r2)
  802838:	1809883a 	mov	r4,r3
  80283c:	100b883a 	mov	r5,r2
  802840:	08058640 	call	805864 <__divsf3>
  802844:	1009883a 	mov	r4,r2
  802848:	0150b234 	movhi	r5,17096
  80284c:	08056840 	call	805684 <__mulsf3>
  802850:	80800015 	stw	r2,0(r16)
    // Report percent differences
    destination[ii+3] = 100.0*(((float)(gSTAvg[ii] - gAvg[ii]))/factoryTrim[ii+3]);
  802854:	e0bfe717 	ldw	r2,-100(fp)
  802858:	1085883a 	add	r2,r2,r2
  80285c:	1085883a 	add	r2,r2,r2
  802860:	1007883a 	mov	r3,r2
  802864:	e0bfff17 	ldw	r2,-4(fp)
  802868:	1885883a 	add	r2,r3,r2
  80286c:	14000304 	addi	r16,r2,12
  802870:	e0bfe717 	ldw	r2,-100(fp)
  802874:	1085883a 	add	r2,r2,r2
  802878:	1085883a 	add	r2,r2,r2
  80287c:	e0ffe704 	addi	r3,fp,-100
  802880:	10c5883a 	add	r2,r2,r3
  802884:	10800e04 	addi	r2,r2,56
  802888:	10c00017 	ldw	r3,0(r2)
  80288c:	e0bfe717 	ldw	r2,-100(fp)
  802890:	1085883a 	add	r2,r2,r2
  802894:	1085883a 	add	r2,r2,r2
  802898:	e13fe704 	addi	r4,fp,-100
  80289c:	1105883a 	add	r2,r2,r4
  8028a0:	10800504 	addi	r2,r2,20
  8028a4:	10800017 	ldw	r2,0(r2)
  8028a8:	1889c83a 	sub	r4,r3,r2
  8028ac:	08059d80 	call	8059d8 <__floatsisf>
  8028b0:	1007883a 	mov	r3,r2
  8028b4:	e0bfe717 	ldw	r2,-100(fp)
  8028b8:	108000c4 	addi	r2,r2,3
  8028bc:	1085883a 	add	r2,r2,r2
  8028c0:	1085883a 	add	r2,r2,r2
  8028c4:	e13fe704 	addi	r4,fp,-100
  8028c8:	1105883a 	add	r2,r2,r4
  8028cc:	10801104 	addi	r2,r2,68
  8028d0:	10800017 	ldw	r2,0(r2)
  8028d4:	1809883a 	mov	r4,r3
  8028d8:	100b883a 	mov	r5,r2
  8028dc:	08058640 	call	805864 <__divsf3>
  8028e0:	1009883a 	mov	r4,r2
  8028e4:	0150b234 	movhi	r5,17096
  8028e8:	08056840 	call	805684 <__mulsf3>
  8028ec:	80800015 	stw	r2,0(r16)
  factoryTrim[5] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[5] - 1.0) ));

  // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim
  // of the Self-Test Response
  // To get percent, must multiply by 100
  for ( ii =0; ii < 3; ii = ii+1)
  8028f0:	e0bfe717 	ldw	r2,-100(fp)
  8028f4:	10800044 	addi	r2,r2,1
  8028f8:	e0bfe715 	stw	r2,-100(fp)
  8028fc:	e0bfe717 	ldw	r2,-100(fp)
  802900:	108000d0 	cmplti	r2,r2,3
  802904:	103f7c1e 	bne	r2,zero,8026f8 <MPU9250SelfTest+0x1020>
   // printf("destination[%d] = %f\n",ii+3, destination[ii+3]);
    //printf("test1 difference: %f\n",aSTAvg[ii] - aAvg[ii]);
    //printf("test q: %f\n",416 / 6479.571777);

  }
}
  802908:	e037883a 	mov	sp,fp
  80290c:	dfc00317 	ldw	ra,12(sp)
  802910:	df000217 	ldw	fp,8(sp)
  802914:	dc400117 	ldw	r17,4(sp)
  802918:	dc000017 	ldw	r16,0(sp)
  80291c:	dec00404 	addi	sp,sp,16
  802920:	f800283a 	ret

00802924 <task1>:
#define TASK2_PRIORITY      2



/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata){
  802924:	deffed04 	addi	sp,sp,-76
  802928:	dfc01215 	stw	ra,72(sp)
  80292c:	df001115 	stw	fp,68(sp)
  802930:	df001104 	addi	fp,sp,68
  802934:	e13fff15 	stw	r4,-4(fp)

  alt_u8 ReadBuf[6];
  //alt_u8 deviceAddress1 = 0x68;
  alt_u8 deviceAddress2 = 0xD0;
  802938:	00bff404 	movi	r2,-48
  80293c:	e0bff2c5 	stb	r2,-53(fp)
  alt_u8 registerAddress = 0x75;
  802940:	00801d44 	movi	r2,117
  802944:	e0bff285 	stb	r2,-54(fp)
  alt_u16 buflen = 1;
  802948:	00800044 	movi	r2,1
  80294c:	e0bff20d 	sth	r2,-56(fp)
  float selfTest[6];

    I2C_Start(I2C_SCL_BASE,I2C_SDA_BASE);
  802950:	01004474 	movhi	r4,273
  802954:	21241c04 	addi	r4,r4,-28560
  802958:	01404474 	movhi	r5,273
  80295c:	29641804 	addi	r5,r5,-28576
  802960:	0802d240 	call	802d24 <I2C_Start>
    if(!I2C_ReadFromDeviceRegister(I2C_SCL_BASE,I2C_SDA_BASE, deviceAddress2, registerAddress, (alt_u8*)&ReadBuf, buflen, true)){
  802964:	e0bff2c3 	ldbu	r2,-53(fp)
  802968:	11803fcc 	andi	r6,r2,255
  80296c:	3180201c 	xori	r6,r6,128
  802970:	31bfe004 	addi	r6,r6,-128
  802974:	e1fff283 	ldbu	r7,-54(fp)
  802978:	e0fff20b 	ldhu	r3,-56(fp)
  80297c:	e0bff304 	addi	r2,fp,-52
  802980:	d8800015 	stw	r2,0(sp)
  802984:	d8c00115 	stw	r3,4(sp)
  802988:	00800044 	movi	r2,1
  80298c:	d8800215 	stw	r2,8(sp)
  802990:	01004474 	movhi	r4,273
  802994:	21241c04 	addi	r4,r4,-28560
  802998:	01404474 	movhi	r5,273
  80299c:	29641804 	addi	r5,r5,-28576
  8029a0:	08031740 	call	803174 <I2C_ReadFromDeviceRegister>

	  }
    I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  8029a4:	01004474 	movhi	r4,273
  8029a8:	21241c04 	addi	r4,r4,-28560
  8029ac:	01404474 	movhi	r5,273
  8029b0:	29641804 	addi	r5,r5,-28576
  8029b4:	0802d5c0 	call	802d5c <I2C_Stop>
    printf("WHO AM I: %0x\n", ReadBuf[0]);
  8029b8:	e0bff303 	ldbu	r2,-52(fp)
  8029bc:	11403fcc 	andi	r5,r2,255
  8029c0:	010020b4 	movhi	r4,130
  8029c4:	212e6204 	addi	r4,r4,-18040
  8029c8:	08075900 	call	807590 <printf>
    MPU9250SelfTest(selfTest);
  8029cc:	e13ff504 	addi	r4,fp,-44
  8029d0:	08016d80 	call	8016d8 <MPU9250SelfTest>
    printf("x-axis self test: acceleration trim within : ");
  8029d4:	010020b4 	movhi	r4,130
  8029d8:	212e6604 	addi	r4,r4,-18024
  8029dc:	08075900 	call	807590 <printf>
   	printf("%.1f", selfTest[0]); printf("%% of factory value\n");
  8029e0:	e0bff517 	ldw	r2,-44(fp)
  8029e4:	1009883a 	mov	r4,r2
  8029e8:	0805a700 	call	805a70 <__extendsfdf2>
  8029ec:	100d883a 	mov	r6,r2
  8029f0:	180f883a 	mov	r7,r3
  8029f4:	010020b4 	movhi	r4,130
  8029f8:	212e7204 	addi	r4,r4,-17976
  8029fc:	300b883a 	mov	r5,r6
  802a00:	380d883a 	mov	r6,r7
  802a04:	08075900 	call	807590 <printf>
  802a08:	010020b4 	movhi	r4,130
  802a0c:	212e7404 	addi	r4,r4,-17968
  802a10:	08075900 	call	807590 <printf>
  	printf("y-axis self test: acceleration trim within : ");
  802a14:	010020b4 	movhi	r4,130
  802a18:	212e7a04 	addi	r4,r4,-17944
  802a1c:	08075900 	call	807590 <printf>
  	printf("%.1f", selfTest[1]); printf("%% of factory value\n");
  802a20:	e0bff617 	ldw	r2,-40(fp)
  802a24:	1009883a 	mov	r4,r2
  802a28:	0805a700 	call	805a70 <__extendsfdf2>
  802a2c:	100d883a 	mov	r6,r2
  802a30:	180f883a 	mov	r7,r3
  802a34:	010020b4 	movhi	r4,130
  802a38:	212e7204 	addi	r4,r4,-17976
  802a3c:	300b883a 	mov	r5,r6
  802a40:	380d883a 	mov	r6,r7
  802a44:	08075900 	call	807590 <printf>
  802a48:	010020b4 	movhi	r4,130
  802a4c:	212e7404 	addi	r4,r4,-17968
  802a50:	08075900 	call	807590 <printf>
  	printf("z-axis self test: acceleration trim within : ");
  802a54:	010020b4 	movhi	r4,130
  802a58:	212e8604 	addi	r4,r4,-17896
  802a5c:	08075900 	call	807590 <printf>
  	printf("%.1f", selfTest[2]); printf("%% of factory value\n");
  802a60:	e0bff717 	ldw	r2,-36(fp)
  802a64:	1009883a 	mov	r4,r2
  802a68:	0805a700 	call	805a70 <__extendsfdf2>
  802a6c:	100d883a 	mov	r6,r2
  802a70:	180f883a 	mov	r7,r3
  802a74:	010020b4 	movhi	r4,130
  802a78:	212e7204 	addi	r4,r4,-17976
  802a7c:	300b883a 	mov	r5,r6
  802a80:	380d883a 	mov	r6,r7
  802a84:	08075900 	call	807590 <printf>
  802a88:	010020b4 	movhi	r4,130
  802a8c:	212e7404 	addi	r4,r4,-17968
  802a90:	08075900 	call	807590 <printf>
  	printf("x-axis self test: gyration trim within : ");
  802a94:	010020b4 	movhi	r4,130
  802a98:	212e9204 	addi	r4,r4,-17848
  802a9c:	08075900 	call	807590 <printf>
  	printf("%.1f", selfTest[3]); printf("%% of factory value\n");
  802aa0:	e0bff817 	ldw	r2,-32(fp)
  802aa4:	1009883a 	mov	r4,r2
  802aa8:	0805a700 	call	805a70 <__extendsfdf2>
  802aac:	100d883a 	mov	r6,r2
  802ab0:	180f883a 	mov	r7,r3
  802ab4:	010020b4 	movhi	r4,130
  802ab8:	212e7204 	addi	r4,r4,-17976
  802abc:	300b883a 	mov	r5,r6
  802ac0:	380d883a 	mov	r6,r7
  802ac4:	08075900 	call	807590 <printf>
  802ac8:	010020b4 	movhi	r4,130
  802acc:	212e7404 	addi	r4,r4,-17968
  802ad0:	08075900 	call	807590 <printf>
  	printf("y-axis self test: gyration trim within : ");
  802ad4:	010020b4 	movhi	r4,130
  802ad8:	212e9d04 	addi	r4,r4,-17804
  802adc:	08075900 	call	807590 <printf>
  	printf("%.1f", selfTest[4]); printf("%% of factory value\n");
  802ae0:	e0bff917 	ldw	r2,-28(fp)
  802ae4:	1009883a 	mov	r4,r2
  802ae8:	0805a700 	call	805a70 <__extendsfdf2>
  802aec:	100d883a 	mov	r6,r2
  802af0:	180f883a 	mov	r7,r3
  802af4:	010020b4 	movhi	r4,130
  802af8:	212e7204 	addi	r4,r4,-17976
  802afc:	300b883a 	mov	r5,r6
  802b00:	380d883a 	mov	r6,r7
  802b04:	08075900 	call	807590 <printf>
  802b08:	010020b4 	movhi	r4,130
  802b0c:	212e7404 	addi	r4,r4,-17968
  802b10:	08075900 	call	807590 <printf>
  	printf("z-axis self test: gyration trim within : ");
  802b14:	010020b4 	movhi	r4,130
  802b18:	212ea804 	addi	r4,r4,-17760
  802b1c:	08075900 	call	807590 <printf>
  	printf("%.1f", selfTest[5]); printf("%% of factory value\n");
  802b20:	e0bffa17 	ldw	r2,-24(fp)
  802b24:	1009883a 	mov	r4,r2
  802b28:	0805a700 	call	805a70 <__extendsfdf2>
  802b2c:	100d883a 	mov	r6,r2
  802b30:	180f883a 	mov	r7,r3
  802b34:	010020b4 	movhi	r4,130
  802b38:	212e7204 	addi	r4,r4,-17976
  802b3c:	300b883a 	mov	r5,r6
  802b40:	380d883a 	mov	r6,r7
  802b44:	08075900 	call	807590 <printf>
  802b48:	010020b4 	movhi	r4,130
  802b4c:	212e7404 	addi	r4,r4,-17968
  802b50:	08075900 	call	807590 <printf>


  	alt_u8 Data[2];
    alt_32 xaxis[3] = {0};
  802b54:	e03ffc15 	stw	zero,-16(fp)
  802b58:	e03ffd15 	stw	zero,-12(fp)
  802b5c:	e03ffe15 	stw	zero,-8(fp)
    I2C_Start(I2C_SCL_BASE, I2C_SDA_BASE);
  802b60:	01004474 	movhi	r4,273
  802b64:	21241c04 	addi	r4,r4,-28560
  802b68:	01404474 	movhi	r5,273
  802b6c:	29641804 	addi	r5,r5,-28576
  802b70:	0802d240 	call	802d24 <I2C_Start>
    // Read the six raw data registers into data array
    I2C_ReadFromDeviceRegister(I2C_SCL_BASE, I2C_SDA_BASE, 0xD0, ACCEL_ZOUT_H, &Data[0],2, true);
  802b74:	e0bffb04 	addi	r2,fp,-20
  802b78:	d8800015 	stw	r2,0(sp)
  802b7c:	00800084 	movi	r2,2
  802b80:	d8800115 	stw	r2,4(sp)
  802b84:	00800044 	movi	r2,1
  802b88:	d8800215 	stw	r2,8(sp)
  802b8c:	01004474 	movhi	r4,273
  802b90:	21241c04 	addi	r4,r4,-28560
  802b94:	01404474 	movhi	r5,273
  802b98:	29641804 	addi	r5,r5,-28576
  802b9c:	01bff404 	movi	r6,-48
  802ba0:	01c00fc4 	movi	r7,63
  802ba4:	08031740 	call	803174 <I2C_ReadFromDeviceRegister>
    // Turn the MSB and LSB into a signed 16-bit value
    xaxis[0] = (alt_16)(((alt_16)Data[0] << 8) | Data[1]) ;
  802ba8:	e0bffb03 	ldbu	r2,-20(fp)
  802bac:	10803fcc 	andi	r2,r2,255
  802bb0:	1004923a 	slli	r2,r2,8
  802bb4:	1007883a 	mov	r3,r2
  802bb8:	e0bffb43 	ldbu	r2,-19(fp)
  802bbc:	10803fcc 	andi	r2,r2,255
  802bc0:	1884b03a 	or	r2,r3,r2
  802bc4:	10bfffcc 	andi	r2,r2,65535
  802bc8:	10a0001c 	xori	r2,r2,32768
  802bcc:	10a00004 	addi	r2,r2,-32768
  802bd0:	e0bffc15 	stw	r2,-16(fp)
  while (1)
  { 

	// Read the six raw data registers into data array
	I2C_ReadMore(I2C_SCL_BASE, I2C_SDA_BASE, &Data[0],2, true);
  802bd4:	e1bffb04 	addi	r6,fp,-20
  802bd8:	00800044 	movi	r2,1
  802bdc:	d8800015 	stw	r2,0(sp)
  802be0:	01004474 	movhi	r4,273
  802be4:	21241c04 	addi	r4,r4,-28560
  802be8:	01404474 	movhi	r5,273
  802bec:	29641804 	addi	r5,r5,-28576
  802bf0:	01c00084 	movi	r7,2
  802bf4:	08032d00 	call	8032d0 <I2C_ReadMore>
	// Turn the MSB and LSB into a signed 16-bit value
	xaxis[0] = (alt_16)(((alt_16)Data[0] << 8) | Data[1]) ;
  802bf8:	e0bffb03 	ldbu	r2,-20(fp)
  802bfc:	10803fcc 	andi	r2,r2,255
  802c00:	1004923a 	slli	r2,r2,8
  802c04:	1007883a 	mov	r3,r2
  802c08:	e0bffb43 	ldbu	r2,-19(fp)
  802c0c:	10803fcc 	andi	r2,r2,255
  802c10:	1884b03a 	or	r2,r3,r2
  802c14:	10bfffcc 	andi	r2,r2,65535
  802c18:	10a0001c 	xori	r2,r2,32768
  802c1c:	10a00004 	addi	r2,r2,-32768
  802c20:	e0bffc15 	stw	r2,-16(fp)
	//printf("Hello from task2\n");
	printf("xaxis = %d\n", xaxis[0]);
  802c24:	e17ffc17 	ldw	r5,-16(fp)
  802c28:	010020b4 	movhi	r4,130
  802c2c:	212eb304 	addi	r4,r4,-17716
  802c30:	08075900 	call	807590 <printf>

	  }
	printf("WHO AM I: %0x\n", ReadBuf[0]);
	I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
	*/
    OSTimeDlyHMSM(0, 0, 0, 1);
  802c34:	0009883a 	mov	r4,zero
  802c38:	000b883a 	mov	r5,zero
  802c3c:	000d883a 	mov	r6,zero
  802c40:	01c00044 	movi	r7,1
  802c44:	08187080 	call	818708 <OSTimeDlyHMSM>

  }
  802c48:	003fe206 	br	802bd4 <task1+0x2b0>

00802c4c <task2>:
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
  802c4c:	defffd04 	addi	sp,sp,-12
  802c50:	dfc00215 	stw	ra,8(sp)
  802c54:	df000115 	stw	fp,4(sp)
  802c58:	df000104 	addi	fp,sp,4
  802c5c:	e13fff15 	stw	r4,-4(fp)


  while (1)
  { 

    OSTimeDlyHMSM(0, 0, 1, 0);
  802c60:	0009883a 	mov	r4,zero
  802c64:	000b883a 	mov	r5,zero
  802c68:	01800044 	movi	r6,1
  802c6c:	000f883a 	mov	r7,zero
  802c70:	08187080 	call	818708 <OSTimeDlyHMSM>
  }
  802c74:	003ffa06 	br	802c60 <task2+0x14>

00802c78 <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
  802c78:	defff904 	addi	sp,sp,-28
  802c7c:	dfc00615 	stw	ra,24(sp)
  802c80:	df000515 	stw	fp,20(sp)
  802c84:	df000504 	addi	fp,sp,20
  
  OSTaskCreateExt(task1,
  802c88:	018020b4 	movhi	r6,130
  802c8c:	31861404 	addi	r6,r6,6224
  802c90:	00800044 	movi	r2,1
  802c94:	d8800015 	stw	r2,0(sp)
  802c98:	008020b4 	movhi	r2,130
  802c9c:	10be1504 	addi	r2,r2,-1964
  802ca0:	d8800115 	stw	r2,4(sp)
  802ca4:	00820004 	movi	r2,2048
  802ca8:	d8800215 	stw	r2,8(sp)
  802cac:	d8000315 	stw	zero,12(sp)
  802cb0:	d8000415 	stw	zero,16(sp)
  802cb4:	01002034 	movhi	r4,128
  802cb8:	210a4904 	addi	r4,r4,10532
  802cbc:	000b883a 	mov	r5,zero
  802cc0:	01c00044 	movi	r7,1
  802cc4:	08172c40 	call	8172c4 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(task2,
  802cc8:	018020b4 	movhi	r6,130
  802ccc:	318e1404 	addi	r6,r6,14416
  802cd0:	00800084 	movi	r2,2
  802cd4:	d8800015 	stw	r2,0(sp)
  802cd8:	008020b4 	movhi	r2,130
  802cdc:	10861504 	addi	r2,r2,6228
  802ce0:	d8800115 	stw	r2,4(sp)
  802ce4:	00820004 	movi	r2,2048
  802ce8:	d8800215 	stw	r2,8(sp)
  802cec:	d8000315 	stw	zero,12(sp)
  802cf0:	d8000415 	stw	zero,16(sp)
  802cf4:	01002034 	movhi	r4,128
  802cf8:	210b1304 	addi	r4,r4,11340
  802cfc:	000b883a 	mov	r5,zero
  802d00:	01c00084 	movi	r7,2
  802d04:	08172c40 	call	8172c4 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
  802d08:	08114ec0 	call	8114ec <OSStart>
  return 0;
  802d0c:	0005883a 	mov	r2,zero
}
  802d10:	e037883a 	mov	sp,fp
  802d14:	dfc00117 	ldw	ra,4(sp)
  802d18:	df000017 	ldw	fp,0(sp)
  802d1c:	dec00204 	addi	sp,sp,8
  802d20:	f800283a 	ret

00802d24 <I2C_Start>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

/* Write an i2c start condition */
void I2C_Start(alt_u32 clk_base, alt_u32 data_base)
{
  802d24:	defffc04 	addi	sp,sp,-16
  802d28:	dfc00315 	stw	ra,12(sp)
  802d2c:	df000215 	stw	fp,8(sp)
  802d30:	df000204 	addi	fp,sp,8
  802d34:	e13ffe15 	stw	r4,-8(fp)
  802d38:	e17fff15 	stw	r5,-4(fp)
	i2c_start(clk_base, data_base);
  802d3c:	e13ffe17 	ldw	r4,-8(fp)
  802d40:	e17fff17 	ldw	r5,-4(fp)
  802d44:	08033f40 	call	8033f4 <i2c_start>
}
  802d48:	e037883a 	mov	sp,fp
  802d4c:	dfc00117 	ldw	ra,4(sp)
  802d50:	df000017 	ldw	fp,0(sp)
  802d54:	dec00204 	addi	sp,sp,8
  802d58:	f800283a 	ret

00802d5c <I2C_Stop>:

/* Write an i2c stop condition */
void I2C_Stop(alt_u32 clk_base, alt_u32 data_base)
{
  802d5c:	defffc04 	addi	sp,sp,-16
  802d60:	dfc00315 	stw	ra,12(sp)
  802d64:	df000215 	stw	fp,8(sp)
  802d68:	df000204 	addi	fp,sp,8
  802d6c:	e13ffe15 	stw	r4,-8(fp)
  802d70:	e17fff15 	stw	r5,-4(fp)
	i2c_stop(clk_base, data_base);
  802d74:	e13ffe17 	ldw	r4,-8(fp)
  802d78:	e17fff17 	ldw	r5,-4(fp)
  802d7c:	080347c0 	call	80347c <i2c_stop>
}
  802d80:	e037883a 	mov	sp,fp
  802d84:	dfc00117 	ldw	ra,4(sp)
  802d88:	df000017 	ldw	fp,0(sp)
  802d8c:	dec00204 	addi	sp,sp,8
  802d90:	f800283a 	ret

00802d94 <I2C_WriteToDevice>:

/* Write len bytes of data to specified device */
bool I2C_WriteToDevice(alt_u32 clk_base, alt_u32 data_base, alt_8 deviceAddr, alt_u8 *pData, alt_u16 len)
{
  802d94:	defff604 	addi	sp,sp,-40
  802d98:	dfc00915 	stw	ra,36(sp)
  802d9c:	df000815 	stw	fp,32(sp)
  802da0:	df000804 	addi	fp,sp,32
  802da4:	e13ffa15 	stw	r4,-24(fp)
  802da8:	e17ffb15 	stw	r5,-20(fp)
  802dac:	e1fffd15 	stw	r7,-12(fp)
  802db0:	e0800217 	ldw	r2,8(fp)
  802db4:	e1bffc05 	stb	r6,-16(fp)
  802db8:	e0bffe0d 	sth	r2,-8(fp)
	int i;
	bool bSuccess = true;
  802dbc:	00800044 	movi	r2,1
  802dc0:	e0bff805 	stb	r2,-32(fp)

	if (!i2c_selectAddress(clk_base, data_base, deviceAddr))
  802dc4:	e1bffc07 	ldb	r6,-16(fp)
  802dc8:	e13ffa17 	ldw	r4,-24(fp)
  802dcc:	e17ffb17 	ldw	r5,-20(fp)
  802dd0:	080337c0 	call	80337c <i2c_selectAddress>
  802dd4:	1080005c 	xori	r2,r2,1
  802dd8:	10803fcc 	andi	r2,r2,255
  802ddc:	1005003a 	cmpeq	r2,r2,zero
  802de0:	1000021e 	bne	r2,zero,802dec <I2C_WriteToDevice+0x58>
		return false;
  802de4:	e03fff15 	stw	zero,-4(fp)
  802de8:	00002206 	br	802e74 <I2C_WriteToDevice+0xe0>

	for (i = 0; i < len && bSuccess; i++)
  802dec:	e03ff915 	stw	zero,-28(fp)
  802df0:	00000d06 	br	802e28 <I2C_WriteToDevice+0x94>
	{
		bSuccess = i2c_write(clk_base, data_base, *pData);
  802df4:	e0bffd17 	ldw	r2,-12(fp)
  802df8:	10800003 	ldbu	r2,0(r2)
  802dfc:	11803fcc 	andi	r6,r2,255
  802e00:	e13ffa17 	ldw	r4,-24(fp)
  802e04:	e17ffb17 	ldw	r5,-20(fp)
  802e08:	08034f40 	call	8034f4 <i2c_write>
  802e0c:	e0bff805 	stb	r2,-32(fp)
		pData++;
  802e10:	e0bffd17 	ldw	r2,-12(fp)
  802e14:	10800044 	addi	r2,r2,1
  802e18:	e0bffd15 	stw	r2,-12(fp)
	bool bSuccess = true;

	if (!i2c_selectAddress(clk_base, data_base, deviceAddr))
		return false;

	for (i = 0; i < len && bSuccess; i++)
  802e1c:	e0bff917 	ldw	r2,-28(fp)
  802e20:	10800044 	addi	r2,r2,1
  802e24:	e0bff915 	stw	r2,-28(fp)
  802e28:	e0fffe0b 	ldhu	r3,-8(fp)
  802e2c:	e0bff917 	ldw	r2,-28(fp)
  802e30:	10c0030e 	bge	r2,r3,802e40 <I2C_WriteToDevice+0xac>
  802e34:	e0bff803 	ldbu	r2,-32(fp)
  802e38:	1004c03a 	cmpne	r2,r2,zero
  802e3c:	103fed1e 	bne	r2,zero,802df4 <I2C_WriteToDevice+0x60>
	{
		bSuccess = i2c_write(clk_base, data_base, *pData);
		pData++;
	}

	if (!bSuccess)
  802e40:	e0bff803 	ldbu	r2,-32(fp)
  802e44:	1080005c 	xori	r2,r2,1
  802e48:	10803fcc 	andi	r2,r2,255
  802e4c:	1005003a 	cmpeq	r2,r2,zero
  802e50:	1000061e 	bne	r2,zero,802e6c <I2C_WriteToDevice+0xd8>
	{
		printf("I2C Error: Data write to device 0x%02x failed\n", deviceAddr);
  802e54:	e17ffc07 	ldb	r5,-16(fp)
  802e58:	010020b4 	movhi	r4,130
  802e5c:	212eb604 	addi	r4,r4,-17704
  802e60:	08075900 	call	807590 <printf>
		return false;
  802e64:	e03fff15 	stw	zero,-4(fp)
  802e68:	00000206 	br	802e74 <I2C_WriteToDevice+0xe0>
	}
    
    return true;
  802e6c:	00800044 	movi	r2,1
  802e70:	e0bfff15 	stw	r2,-4(fp)
  802e74:	e0bfff17 	ldw	r2,-4(fp)
}
  802e78:	e037883a 	mov	sp,fp
  802e7c:	dfc00117 	ldw	ra,4(sp)
  802e80:	df000017 	ldw	fp,0(sp)
  802e84:	dec00204 	addi	sp,sp,8
  802e88:	f800283a 	ret

00802e8c <I2C_WriteToDeviceRegister>:

/* Write len bytes of data to specified control register of specified device */
bool I2C_WriteToDeviceRegister(alt_u32 clk_base, alt_u32 data_base, alt_8 deviceAddr,
							   alt_u8 controlAddr, alt_u8 *pData, alt_u16 len)
{
  802e8c:	defff604 	addi	sp,sp,-40
  802e90:	dfc00915 	stw	ra,36(sp)
  802e94:	df000815 	stw	fp,32(sp)
  802e98:	df000804 	addi	fp,sp,32
  802e9c:	e13ffa15 	stw	r4,-24(fp)
  802ea0:	e17ffb15 	stw	r5,-20(fp)
  802ea4:	e0800317 	ldw	r2,12(fp)
  802ea8:	e1bffc05 	stb	r6,-16(fp)
  802eac:	e1fffd05 	stb	r7,-12(fp)
  802eb0:	e0bffe0d 	sth	r2,-8(fp)
	int i;
	bool bSuccess = true;
  802eb4:	00800044 	movi	r2,1
  802eb8:	e0bff805 	stb	r2,-32(fp)

	if (!i2c_selectAddress(clk_base, data_base, deviceAddr))
  802ebc:	e1bffc07 	ldb	r6,-16(fp)
  802ec0:	e13ffa17 	ldw	r4,-24(fp)
  802ec4:	e17ffb17 	ldw	r5,-20(fp)
  802ec8:	080337c0 	call	80337c <i2c_selectAddress>
  802ecc:	1080005c 	xori	r2,r2,1
  802ed0:	10803fcc 	andi	r2,r2,255
  802ed4:	1005003a 	cmpeq	r2,r2,zero
  802ed8:	1000021e 	bne	r2,zero,802ee4 <I2C_WriteToDeviceRegister+0x58>
		return false;
  802edc:	e03fff15 	stw	zero,-4(fp)
  802ee0:	00003006 	br	802fa4 <I2C_WriteToDeviceRegister+0x118>

	if (!i2c_selectAddress(clk_base, data_base, controlAddr))
  802ee4:	e0bffd03 	ldbu	r2,-12(fp)
  802ee8:	11803fcc 	andi	r6,r2,255
  802eec:	3180201c 	xori	r6,r6,128
  802ef0:	31bfe004 	addi	r6,r6,-128
  802ef4:	e13ffa17 	ldw	r4,-24(fp)
  802ef8:	e17ffb17 	ldw	r5,-20(fp)
  802efc:	080337c0 	call	80337c <i2c_selectAddress>
  802f00:	1080005c 	xori	r2,r2,1
  802f04:	10803fcc 	andi	r2,r2,255
  802f08:	1005003a 	cmpeq	r2,r2,zero
  802f0c:	1000021e 	bne	r2,zero,802f18 <I2C_WriteToDeviceRegister+0x8c>
		return false;
  802f10:	e03fff15 	stw	zero,-4(fp)
  802f14:	00002306 	br	802fa4 <I2C_WriteToDeviceRegister+0x118>

	for (i = 0; i < len && bSuccess; i++)
  802f18:	e03ff915 	stw	zero,-28(fp)
  802f1c:	00000d06 	br	802f54 <I2C_WriteToDeviceRegister+0xc8>
	{
		bSuccess = i2c_write(clk_base, data_base, *pData);
  802f20:	e0800217 	ldw	r2,8(fp)
  802f24:	10800003 	ldbu	r2,0(r2)
  802f28:	11803fcc 	andi	r6,r2,255
  802f2c:	e13ffa17 	ldw	r4,-24(fp)
  802f30:	e17ffb17 	ldw	r5,-20(fp)
  802f34:	08034f40 	call	8034f4 <i2c_write>
  802f38:	e0bff805 	stb	r2,-32(fp)
		pData++;
  802f3c:	e0800217 	ldw	r2,8(fp)
  802f40:	10800044 	addi	r2,r2,1
  802f44:	e0800215 	stw	r2,8(fp)
		return false;

	if (!i2c_selectAddress(clk_base, data_base, controlAddr))
		return false;

	for (i = 0; i < len && bSuccess; i++)
  802f48:	e0bff917 	ldw	r2,-28(fp)
  802f4c:	10800044 	addi	r2,r2,1
  802f50:	e0bff915 	stw	r2,-28(fp)
  802f54:	e0fffe0b 	ldhu	r3,-8(fp)
  802f58:	e0bff917 	ldw	r2,-28(fp)
  802f5c:	10c0030e 	bge	r2,r3,802f6c <I2C_WriteToDeviceRegister+0xe0>
  802f60:	e0bff803 	ldbu	r2,-32(fp)
  802f64:	1004c03a 	cmpne	r2,r2,zero
  802f68:	103fed1e 	bne	r2,zero,802f20 <I2C_WriteToDeviceRegister+0x94>
	{
		bSuccess = i2c_write(clk_base, data_base, *pData);
		pData++;
	}

	if (!bSuccess)
  802f6c:	e0bff803 	ldbu	r2,-32(fp)
  802f70:	1080005c 	xori	r2,r2,1
  802f74:	10803fcc 	andi	r2,r2,255
  802f78:	1005003a 	cmpeq	r2,r2,zero
  802f7c:	1000071e 	bne	r2,zero,802f9c <I2C_WriteToDeviceRegister+0x110>
	{
		printf("I2C Error: Data write to register 0x%02x on device 0x%02x failed\n", deviceAddr, controlAddr);
  802f80:	e17ffc07 	ldb	r5,-16(fp)
  802f84:	e1bffd03 	ldbu	r6,-12(fp)
  802f88:	010020b4 	movhi	r4,130
  802f8c:	212ec204 	addi	r4,r4,-17656
  802f90:	08075900 	call	807590 <printf>
		return false;
  802f94:	e03fff15 	stw	zero,-4(fp)
  802f98:	00000206 	br	802fa4 <I2C_WriteToDeviceRegister+0x118>
	}

    return true;
  802f9c:	00800044 	movi	r2,1
  802fa0:	e0bfff15 	stw	r2,-4(fp)
  802fa4:	e0bfff17 	ldw	r2,-4(fp)
}
  802fa8:	e037883a 	mov	sp,fp
  802fac:	dfc00117 	ldw	ra,4(sp)
  802fb0:	df000017 	ldw	fp,0(sp)
  802fb4:	dec00204 	addi	sp,sp,8
  802fb8:	f800283a 	ret

00802fbc <I2C_WriteMore>:

/* Write len bytes of data to last address */
bool I2C_WriteMore(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, alt_u16 len)
{
  802fbc:	defff704 	addi	sp,sp,-36
  802fc0:	dfc00815 	stw	ra,32(sp)
  802fc4:	df000715 	stw	fp,28(sp)
  802fc8:	df000704 	addi	fp,sp,28
  802fcc:	e13ffb15 	stw	r4,-20(fp)
  802fd0:	e17ffc15 	stw	r5,-16(fp)
  802fd4:	e1bffd15 	stw	r6,-12(fp)
  802fd8:	e1fffe0d 	sth	r7,-8(fp)
	int i;
	bool bSuccess = true;
  802fdc:	00800044 	movi	r2,1
  802fe0:	e0bff905 	stb	r2,-28(fp)

	for (i = 0; i < len && bSuccess; i++)
  802fe4:	e03ffa15 	stw	zero,-24(fp)
  802fe8:	00000d06 	br	803020 <I2C_WriteMore+0x64>
	{
		bSuccess = i2c_write(clk_base, data_base, *pData);
  802fec:	e0bffd17 	ldw	r2,-12(fp)
  802ff0:	10800003 	ldbu	r2,0(r2)
  802ff4:	11803fcc 	andi	r6,r2,255
  802ff8:	e13ffb17 	ldw	r4,-20(fp)
  802ffc:	e17ffc17 	ldw	r5,-16(fp)
  803000:	08034f40 	call	8034f4 <i2c_write>
  803004:	e0bff905 	stb	r2,-28(fp)
		pData++;
  803008:	e0bffd17 	ldw	r2,-12(fp)
  80300c:	10800044 	addi	r2,r2,1
  803010:	e0bffd15 	stw	r2,-12(fp)
bool I2C_WriteMore(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, alt_u16 len)
{
	int i;
	bool bSuccess = true;

	for (i = 0; i < len && bSuccess; i++)
  803014:	e0bffa17 	ldw	r2,-24(fp)
  803018:	10800044 	addi	r2,r2,1
  80301c:	e0bffa15 	stw	r2,-24(fp)
  803020:	e0fffe0b 	ldhu	r3,-8(fp)
  803024:	e0bffa17 	ldw	r2,-24(fp)
  803028:	10c0030e 	bge	r2,r3,803038 <I2C_WriteMore+0x7c>
  80302c:	e0bff903 	ldbu	r2,-28(fp)
  803030:	1004c03a 	cmpne	r2,r2,zero
  803034:	103fed1e 	bne	r2,zero,802fec <I2C_WriteMore+0x30>
	{
		bSuccess = i2c_write(clk_base, data_base, *pData);
		pData++;
	}

	if (!bSuccess)
  803038:	e0bff903 	ldbu	r2,-28(fp)
  80303c:	1080005c 	xori	r2,r2,1
  803040:	10803fcc 	andi	r2,r2,255
  803044:	1005003a 	cmpeq	r2,r2,zero
  803048:	1000051e 	bne	r2,zero,803060 <I2C_WriteMore+0xa4>
	{
		printf("I2C Error: Additional data write failed\n");
  80304c:	010020b4 	movhi	r4,130
  803050:	212ed304 	addi	r4,r4,-17588
  803054:	08076a80 	call	8076a8 <puts>
		return false;
  803058:	e03fff15 	stw	zero,-4(fp)
  80305c:	00000206 	br	803068 <I2C_WriteMore+0xac>
	}

    return true;
  803060:	00800044 	movi	r2,1
  803064:	e0bfff15 	stw	r2,-4(fp)
  803068:	e0bfff17 	ldw	r2,-4(fp)
}
  80306c:	e037883a 	mov	sp,fp
  803070:	dfc00117 	ldw	ra,4(sp)
  803074:	df000017 	ldw	fp,0(sp)
  803078:	dec00204 	addi	sp,sp,8
  80307c:	f800283a 	ret

00803080 <I2C_ReadFromDevice>:

/* Read len bytes of data from specified device */
bool I2C_ReadFromDevice(alt_u32 clk_base, alt_u32 data_base, alt_8 deviceAddr, alt_u8 *pBuf, alt_u16 len, bool endRead)
{
  803080:	defff604 	addi	sp,sp,-40
  803084:	dfc00915 	stw	ra,36(sp)
  803088:	df000815 	stw	fp,32(sp)
  80308c:	df000804 	addi	fp,sp,32
  803090:	e13ff915 	stw	r4,-28(fp)
  803094:	e17ffa15 	stw	r5,-24(fp)
  803098:	e1fffc15 	stw	r7,-16(fp)
  80309c:	e0800217 	ldw	r2,8(fp)
  8030a0:	e0c00317 	ldw	r3,12(fp)
  8030a4:	e1bffb05 	stb	r6,-20(fp)
  8030a8:	e0bffd0d 	sth	r2,-12(fp)
  8030ac:	e0fffe05 	stb	r3,-8(fp)
    int i;
    deviceAddr |= 1; // Read address
  8030b0:	e0bffb03 	ldbu	r2,-20(fp)
  8030b4:	10800054 	ori	r2,r2,1
  8030b8:	e0bffb05 	stb	r2,-20(fp)

	if (!i2c_selectAddress(clk_base, data_base, deviceAddr))
  8030bc:	e1bffb07 	ldb	r6,-20(fp)
  8030c0:	e13ff917 	ldw	r4,-28(fp)
  8030c4:	e17ffa17 	ldw	r5,-24(fp)
  8030c8:	080337c0 	call	80337c <i2c_selectAddress>
  8030cc:	1080005c 	xori	r2,r2,1
  8030d0:	10803fcc 	andi	r2,r2,255
  8030d4:	1005003a 	cmpeq	r2,r2,zero
  8030d8:	1000021e 	bne	r2,zero,8030e4 <I2C_ReadFromDevice+0x64>
		return false;
  8030dc:	e03fff15 	stw	zero,-4(fp)
  8030e0:	00001e06 	br	80315c <I2C_ReadFromDevice+0xdc>
    
	for (i = 0; i < len; i++)
  8030e4:	e03ff815 	stw	zero,-32(fp)
  8030e8:	00001706 	br	803148 <I2C_ReadFromDevice+0xc8>
	{
		if (i == (len - 1))
  8030ec:	e0bffd0b 	ldhu	r2,-12(fp)
  8030f0:	10ffffc4 	addi	r3,r2,-1
  8030f4:	e0bff817 	ldw	r2,-32(fp)
  8030f8:	1880081e 	bne	r3,r2,80311c <I2C_ReadFromDevice+0x9c>
		{
			i2c_read(clk_base, data_base, pBuf, !endRead);  // last byte
  8030fc:	e0bffe03 	ldbu	r2,-8(fp)
  803100:	1080005c 	xori	r2,r2,1
  803104:	11c03fcc 	andi	r7,r2,255
  803108:	e13ff917 	ldw	r4,-28(fp)
  80310c:	e17ffa17 	ldw	r5,-24(fp)
  803110:	e1bffc17 	ldw	r6,-16(fp)
  803114:	08036380 	call	803638 <i2c_read>
  803118:	00000806 	br	80313c <I2C_ReadFromDevice+0xbc>
		}
		else
		{
			i2c_read(clk_base, data_base, pBuf, true);  // read
  80311c:	e13ff917 	ldw	r4,-28(fp)
  803120:	e17ffa17 	ldw	r5,-24(fp)
  803124:	e1bffc17 	ldw	r6,-16(fp)
  803128:	01c00044 	movi	r7,1
  80312c:	08036380 	call	803638 <i2c_read>
			pBuf++;
  803130:	e0bffc17 	ldw	r2,-16(fp)
  803134:	10800044 	addi	r2,r2,1
  803138:	e0bffc15 	stw	r2,-16(fp)
    deviceAddr |= 1; // Read address

	if (!i2c_selectAddress(clk_base, data_base, deviceAddr))
		return false;
    
	for (i = 0; i < len; i++)
  80313c:	e0bff817 	ldw	r2,-32(fp)
  803140:	10800044 	addi	r2,r2,1
  803144:	e0bff815 	stw	r2,-32(fp)
  803148:	e0fffd0b 	ldhu	r3,-12(fp)
  80314c:	e0bff817 	ldw	r2,-32(fp)
  803150:	10ffe616 	blt	r2,r3,8030ec <I2C_ReadFromDevice+0x6c>
			i2c_read(clk_base, data_base, pBuf, true);  // read
			pBuf++;
		}
	}

	return true;
  803154:	00800044 	movi	r2,1
  803158:	e0bfff15 	stw	r2,-4(fp)
  80315c:	e0bfff17 	ldw	r2,-4(fp)
}
  803160:	e037883a 	mov	sp,fp
  803164:	dfc00117 	ldw	ra,4(sp)
  803168:	df000017 	ldw	fp,0(sp)
  80316c:	dec00204 	addi	sp,sp,8
  803170:	f800283a 	ret

00803174 <I2C_ReadFromDeviceRegister>:

/* Read len bytes of data from specified control register of specified device */
bool I2C_ReadFromDeviceRegister(alt_u32 clk_base, alt_u32 data_base, alt_8 deviceAddr,
								alt_u8 controlAddr, alt_u8 *pBuf, alt_u16 len, bool endRead)
{
  803174:	defff604 	addi	sp,sp,-40
  803178:	dfc00915 	stw	ra,36(sp)
  80317c:	df000815 	stw	fp,32(sp)
  803180:	df000804 	addi	fp,sp,32
  803184:	e13ff915 	stw	r4,-28(fp)
  803188:	e17ffa15 	stw	r5,-24(fp)
  80318c:	e0800317 	ldw	r2,12(fp)
  803190:	e0c00417 	ldw	r3,16(fp)
  803194:	e1bffb05 	stb	r6,-20(fp)
  803198:	e1fffc05 	stb	r7,-16(fp)
  80319c:	e0bffd0d 	sth	r2,-12(fp)
  8031a0:	e0fffe05 	stb	r3,-8(fp)
    int i;

	if (!i2c_selectAddress(clk_base, data_base, deviceAddr))
  8031a4:	e1bffb07 	ldb	r6,-20(fp)
  8031a8:	e13ff917 	ldw	r4,-28(fp)
  8031ac:	e17ffa17 	ldw	r5,-24(fp)
  8031b0:	080337c0 	call	80337c <i2c_selectAddress>
  8031b4:	1080005c 	xori	r2,r2,1
  8031b8:	10803fcc 	andi	r2,r2,255
  8031bc:	1005003a 	cmpeq	r2,r2,zero
  8031c0:	1000021e 	bne	r2,zero,8031cc <I2C_ReadFromDeviceRegister+0x58>
		return false;
  8031c4:	e03fff15 	stw	zero,-4(fp)
  8031c8:	00003b06 	br	8032b8 <I2C_ReadFromDeviceRegister+0x144>

	if (!i2c_selectAddress(clk_base, data_base, controlAddr))
  8031cc:	e0bffc03 	ldbu	r2,-16(fp)
  8031d0:	11803fcc 	andi	r6,r2,255
  8031d4:	3180201c 	xori	r6,r6,128
  8031d8:	31bfe004 	addi	r6,r6,-128
  8031dc:	e13ff917 	ldw	r4,-28(fp)
  8031e0:	e17ffa17 	ldw	r5,-24(fp)
  8031e4:	080337c0 	call	80337c <i2c_selectAddress>
  8031e8:	1080005c 	xori	r2,r2,1
  8031ec:	10803fcc 	andi	r2,r2,255
  8031f0:	1005003a 	cmpeq	r2,r2,zero
  8031f4:	1000021e 	bne	r2,zero,803200 <I2C_ReadFromDeviceRegister+0x8c>
		return false;
  8031f8:	e03fff15 	stw	zero,-4(fp)
  8031fc:	00002e06 	br	8032b8 <I2C_ReadFromDeviceRegister+0x144>

    i2c_start(clk_base, data_base);  // restart
  803200:	e13ff917 	ldw	r4,-28(fp)
  803204:	e17ffa17 	ldw	r5,-24(fp)
  803208:	08033f40 	call	8033f4 <i2c_start>
    deviceAddr |= 1; // Read address
  80320c:	e0bffb03 	ldbu	r2,-20(fp)
  803210:	10800054 	ori	r2,r2,1
  803214:	e0bffb05 	stb	r2,-20(fp)

	if (!i2c_selectAddress(clk_base, data_base, deviceAddr))
  803218:	e1bffb07 	ldb	r6,-20(fp)
  80321c:	e13ff917 	ldw	r4,-28(fp)
  803220:	e17ffa17 	ldw	r5,-24(fp)
  803224:	080337c0 	call	80337c <i2c_selectAddress>
  803228:	1080005c 	xori	r2,r2,1
  80322c:	10803fcc 	andi	r2,r2,255
  803230:	1005003a 	cmpeq	r2,r2,zero
  803234:	1000021e 	bne	r2,zero,803240 <I2C_ReadFromDeviceRegister+0xcc>
		return false;
  803238:	e03fff15 	stw	zero,-4(fp)
  80323c:	00001e06 	br	8032b8 <I2C_ReadFromDeviceRegister+0x144>

	for (i = 0; i < len; i++)
  803240:	e03ff815 	stw	zero,-32(fp)
  803244:	00001706 	br	8032a4 <I2C_ReadFromDeviceRegister+0x130>
	{
		if (i == (len - 1))
  803248:	e0bffd0b 	ldhu	r2,-12(fp)
  80324c:	10ffffc4 	addi	r3,r2,-1
  803250:	e0bff817 	ldw	r2,-32(fp)
  803254:	1880081e 	bne	r3,r2,803278 <I2C_ReadFromDeviceRegister+0x104>
		{
			i2c_read(clk_base, data_base, pBuf, !endRead);  // last byte
  803258:	e0bffe03 	ldbu	r2,-8(fp)
  80325c:	1080005c 	xori	r2,r2,1
  803260:	11c03fcc 	andi	r7,r2,255
  803264:	e13ff917 	ldw	r4,-28(fp)
  803268:	e17ffa17 	ldw	r5,-24(fp)
  80326c:	e1800217 	ldw	r6,8(fp)
  803270:	08036380 	call	803638 <i2c_read>
  803274:	00000806 	br	803298 <I2C_ReadFromDeviceRegister+0x124>
		}
		else
		{
			i2c_read(clk_base, data_base, pBuf, true);  // read
  803278:	e13ff917 	ldw	r4,-28(fp)
  80327c:	e17ffa17 	ldw	r5,-24(fp)
  803280:	e1800217 	ldw	r6,8(fp)
  803284:	01c00044 	movi	r7,1
  803288:	08036380 	call	803638 <i2c_read>
			pBuf++;
  80328c:	e0800217 	ldw	r2,8(fp)
  803290:	10800044 	addi	r2,r2,1
  803294:	e0800215 	stw	r2,8(fp)
    deviceAddr |= 1; // Read address

	if (!i2c_selectAddress(clk_base, data_base, deviceAddr))
		return false;

	for (i = 0; i < len; i++)
  803298:	e0bff817 	ldw	r2,-32(fp)
  80329c:	10800044 	addi	r2,r2,1
  8032a0:	e0bff815 	stw	r2,-32(fp)
  8032a4:	e0fffd0b 	ldhu	r3,-12(fp)
  8032a8:	e0bff817 	ldw	r2,-32(fp)
  8032ac:	10ffe616 	blt	r2,r3,803248 <I2C_ReadFromDeviceRegister+0xd4>
			i2c_read(clk_base, data_base, pBuf, true);  // read
			pBuf++;
		}
	}

	return true;
  8032b0:	00800044 	movi	r2,1
  8032b4:	e0bfff15 	stw	r2,-4(fp)
  8032b8:	e0bfff17 	ldw	r2,-4(fp)
}
  8032bc:	e037883a 	mov	sp,fp
  8032c0:	dfc00117 	ldw	ra,4(sp)
  8032c4:	df000017 	ldw	fp,0(sp)
  8032c8:	dec00204 	addi	sp,sp,8
  8032cc:	f800283a 	ret

008032d0 <I2C_ReadMore>:

/* Read len bytes of data from last address */
void I2C_ReadMore(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pBuf, alt_u16 len, bool endRead)
{
  8032d0:	defff804 	addi	sp,sp,-32
  8032d4:	dfc00715 	stw	ra,28(sp)
  8032d8:	df000615 	stw	fp,24(sp)
  8032dc:	df000604 	addi	fp,sp,24
  8032e0:	e13ffb15 	stw	r4,-20(fp)
  8032e4:	e17ffc15 	stw	r5,-16(fp)
  8032e8:	e1bffd15 	stw	r6,-12(fp)
  8032ec:	e0800217 	ldw	r2,8(fp)
  8032f0:	e1fffe0d 	sth	r7,-8(fp)
  8032f4:	e0bfff05 	stb	r2,-4(fp)
    int i;

	for (i = 0; i < len; i++)
  8032f8:	e03ffa15 	stw	zero,-24(fp)
  8032fc:	00001706 	br	80335c <I2C_ReadMore+0x8c>
	{
		if (i == (len - 1))
  803300:	e0bffe0b 	ldhu	r2,-8(fp)
  803304:	10ffffc4 	addi	r3,r2,-1
  803308:	e0bffa17 	ldw	r2,-24(fp)
  80330c:	1880081e 	bne	r3,r2,803330 <I2C_ReadMore+0x60>
		{
			i2c_read(clk_base, data_base, pBuf, !endRead);  // last byte
  803310:	e0bfff03 	ldbu	r2,-4(fp)
  803314:	1080005c 	xori	r2,r2,1
  803318:	11c03fcc 	andi	r7,r2,255
  80331c:	e13ffb17 	ldw	r4,-20(fp)
  803320:	e17ffc17 	ldw	r5,-16(fp)
  803324:	e1bffd17 	ldw	r6,-12(fp)
  803328:	08036380 	call	803638 <i2c_read>
  80332c:	00000806 	br	803350 <I2C_ReadMore+0x80>
		}
		else
		{
			i2c_read(clk_base, data_base, pBuf, true);  // read
  803330:	e13ffb17 	ldw	r4,-20(fp)
  803334:	e17ffc17 	ldw	r5,-16(fp)
  803338:	e1bffd17 	ldw	r6,-12(fp)
  80333c:	01c00044 	movi	r7,1
  803340:	08036380 	call	803638 <i2c_read>
			pBuf++;
  803344:	e0bffd17 	ldw	r2,-12(fp)
  803348:	10800044 	addi	r2,r2,1
  80334c:	e0bffd15 	stw	r2,-12(fp)
/* Read len bytes of data from last address */
void I2C_ReadMore(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pBuf, alt_u16 len, bool endRead)
{
    int i;

	for (i = 0; i < len; i++)
  803350:	e0bffa17 	ldw	r2,-24(fp)
  803354:	10800044 	addi	r2,r2,1
  803358:	e0bffa15 	stw	r2,-24(fp)
  80335c:	e0fffe0b 	ldhu	r3,-8(fp)
  803360:	e0bffa17 	ldw	r2,-24(fp)
  803364:	10ffe616 	blt	r2,r3,803300 <I2C_ReadMore+0x30>
		{
			i2c_read(clk_base, data_base, pBuf, true);  // read
			pBuf++;
		}
	}
}
  803368:	e037883a 	mov	sp,fp
  80336c:	dfc00117 	ldw	ra,4(sp)
  803370:	df000017 	ldw	fp,0(sp)
  803374:	dec00204 	addi	sp,sp,8
  803378:	f800283a 	ret

0080337c <i2c_selectAddress>:
///////////// Internal functions (i2c_XXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////

// write the given address on the i2c bus
bool i2c_selectAddress(alt_u32 clk_base, alt_u32 data_base, alt_8 address)
{
  80337c:	defffa04 	addi	sp,sp,-24
  803380:	dfc00515 	stw	ra,20(sp)
  803384:	df000415 	stw	fp,16(sp)
  803388:	df000404 	addi	fp,sp,16
  80338c:	e13ffc15 	stw	r4,-16(fp)
  803390:	e17ffd15 	stw	r5,-12(fp)
  803394:	e1bffe05 	stb	r6,-8(fp)
    if (!i2c_write(clk_base, data_base, address))
  803398:	e0bffe03 	ldbu	r2,-8(fp)
  80339c:	11803fcc 	andi	r6,r2,255
  8033a0:	e13ffc17 	ldw	r4,-16(fp)
  8033a4:	e17ffd17 	ldw	r5,-12(fp)
  8033a8:	08034f40 	call	8034f4 <i2c_write>
  8033ac:	1080005c 	xori	r2,r2,1
  8033b0:	10803fcc 	andi	r2,r2,255
  8033b4:	1005003a 	cmpeq	r2,r2,zero
  8033b8:	1000061e 	bne	r2,zero,8033d4 <i2c_selectAddress+0x58>
    {
		printf("I2C Error: Address write to device 0x%02x failed\n", address);
  8033bc:	e17ffe07 	ldb	r5,-8(fp)
  8033c0:	010020b4 	movhi	r4,130
  8033c4:	212edd04 	addi	r4,r4,-17548
  8033c8:	08075900 	call	807590 <printf>
    	return false;
  8033cc:	e03fff15 	stw	zero,-4(fp)
  8033d0:	00000206 	br	8033dc <i2c_selectAddress+0x60>
    }

    return true;
  8033d4:	00800044 	movi	r2,1
  8033d8:	e0bfff15 	stw	r2,-4(fp)
  8033dc:	e0bfff17 	ldw	r2,-4(fp)
}
  8033e0:	e037883a 	mov	sp,fp
  8033e4:	dfc00117 	ldw	ra,4(sp)
  8033e8:	df000017 	ldw	fp,0(sp)
  8033ec:	dec00204 	addi	sp,sp,8
  8033f0:	f800283a 	ret

008033f4 <i2c_start>:

//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base)
{
  8033f4:	defffc04 	addi	sp,sp,-16
  8033f8:	dfc00315 	stw	ra,12(sp)
  8033fc:	df000215 	stw	fp,8(sp)
  803400:	df000204 	addi	fp,sp,8
  803404:	e13ffe15 	stw	r4,-8(fp)
  803408:	e17fff15 	stw	r5,-4(fp)
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
  80340c:	e0bfff17 	ldw	r2,-4(fp)
  803410:	10800104 	addi	r2,r2,4
  803414:	1007883a 	mov	r3,r2
  803418:	00800044 	movi	r2,1
  80341c:	18800035 	stwio	r2,0(r3)
    
    // start condition
    SDA_HIGH(data_base); // data high
  803420:	e0bfff17 	ldw	r2,-4(fp)
  803424:	1007883a 	mov	r3,r2
  803428:	00800044 	movi	r2,1
  80342c:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base);
  803430:	e0bffe17 	ldw	r2,-8(fp)
  803434:	1007883a 	mov	r3,r2
  803438:	00800044 	movi	r2,1
  80343c:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;
  803440:	01000044 	movi	r4,1
  803444:	08103000 	call	810300 <usleep>
    SDA_LOW(data_base); // data low
  803448:	e0bfff17 	ldw	r2,-4(fp)
  80344c:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; 
  803450:	01000044 	movi	r4,1
  803454:	08103000 	call	810300 <usleep>
    SCL_LOW(clk_base); // clock low
  803458:	e0bffe17 	ldw	r2,-8(fp)
  80345c:	10000035 	stwio	zero,0(r2)
    SCL_DELAY;
  803460:	01000044 	movi	r4,1
  803464:	08103000 	call	810300 <usleep>
}
  803468:	e037883a 	mov	sp,fp
  80346c:	dfc00117 	ldw	ra,4(sp)
  803470:	df000017 	ldw	fp,0(sp)
  803474:	dec00204 	addi	sp,sp,8
  803478:	f800283a 	ret

0080347c <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base)
{
  80347c:	defffc04 	addi	sp,sp,-16
  803480:	dfc00315 	stw	ra,12(sp)
  803484:	df000215 	stw	fp,8(sp)
  803488:	df000204 	addi	fp,sp,8
  80348c:	e13ffe15 	stw	r4,-8(fp)
  803490:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
  803494:	e0bfff17 	ldw	r2,-4(fp)
  803498:	10800104 	addi	r2,r2,4
  80349c:	1007883a 	mov	r3,r2
  8034a0:	00800044 	movi	r2,1
  8034a4:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
  8034a8:	e0bfff17 	ldw	r2,-4(fp)
  8034ac:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
  8034b0:	e0bffe17 	ldw	r2,-8(fp)
  8034b4:	1007883a 	mov	r3,r2
  8034b8:	00800044 	movi	r2,1
  8034bc:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high long delay
  8034c0:	01000044 	movi	r4,1
  8034c4:	08103000 	call	810300 <usleep>
    SDA_HIGH(data_base); // data high
  8034c8:	e0bfff17 	ldw	r2,-4(fp)
  8034cc:	1007883a 	mov	r3,r2
  8034d0:	00800044 	movi	r2,1
  8034d4:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // data high delay
  8034d8:	01000044 	movi	r4,1
  8034dc:	08103000 	call	810300 <usleep>
}
  8034e0:	e037883a 	mov	sp,fp
  8034e4:	dfc00117 	ldw	ra,4(sp)
  8034e8:	df000017 	ldw	fp,0(sp)
  8034ec:	dec00204 	addi	sp,sp,8
  8034f0:	f800283a 	ret

008034f4 <i2c_write>:

// return true if device response ack
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data)
{
  8034f4:	defff904 	addi	sp,sp,-28
  8034f8:	dfc00615 	stw	ra,24(sp)
  8034fc:	df000515 	stw	fp,20(sp)
  803500:	df000504 	addi	fp,sp,20
  803504:	e13ffd15 	stw	r4,-12(fp)
  803508:	e17ffe15 	stw	r5,-8(fp)
  80350c:	e1bfff05 	stb	r6,-4(fp)
    alt_u8 Mask = 0x80;
  803510:	00bfe004 	movi	r2,-128
  803514:	e0bffc45 	stb	r2,-15(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
  803518:	e0bffe17 	ldw	r2,-8(fp)
  80351c:	10800104 	addi	r2,r2,4
  803520:	1007883a 	mov	r3,r2
  803524:	00800044 	movi	r2,1
  803528:	18800035 	stwio	r2,0(r3)
    
    for (i = 0; i < 8; i++)
  80352c:	e03ffb15 	stw	zero,-20(fp)
  803530:	00002306 	br	8035c0 <i2c_write+0xcc>
    {
        SCL_LOW(clk_base);  // new, make sure data change at clk low
  803534:	e0bffd17 	ldw	r2,-12(fp)
  803538:	10000035 	stwio	zero,0(r2)
        // output data on bus
        if (Data & Mask)
  80353c:	e0ffff03 	ldbu	r3,-4(fp)
  803540:	e0bffc43 	ldbu	r2,-15(fp)
  803544:	1884703a 	and	r2,r3,r2
  803548:	10803fcc 	andi	r2,r2,255
  80354c:	1005003a 	cmpeq	r2,r2,zero
  803550:	1000051e 	bne	r2,zero,803568 <i2c_write+0x74>
        { // there is a delay in this command
            SDA_HIGH(data_base);
  803554:	e0bffe17 	ldw	r2,-8(fp)
  803558:	1007883a 	mov	r3,r2
  80355c:	00800044 	movi	r2,1
  803560:	18800035 	stwio	r2,0(r3)
  803564:	00000206 	br	803570 <i2c_write+0x7c>
        }
        else
        {
            SDA_LOW(data_base);
  803568:	e0bffe17 	ldw	r2,-8(fp)
  80356c:	10000035 	stwio	zero,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
  803570:	e0bffc43 	ldbu	r2,-15(fp)
  803574:	1004d07a 	srli	r2,r2,1
  803578:	e0bffc45 	stb	r2,-15(fp)
        // clock high
        SCL_HIGH(clk_base);
  80357c:	e0bffd17 	ldw	r2,-12(fp)
  803580:	1007883a 	mov	r3,r2
  803584:	00800044 	movi	r2,1
  803588:	18800035 	stwio	r2,0(r3)
        while (SCL_READ(clk_base) == 0); // clock stretching
  80358c:	e0bffd17 	ldw	r2,-12(fp)
  803590:	10800037 	ldwio	r2,0(r2)
  803594:	1005003a 	cmpeq	r2,r2,zero
  803598:	103ffc1e 	bne	r2,zero,80358c <i2c_write+0x98>
        SCL_DELAY;
  80359c:	01000044 	movi	r4,1
  8035a0:	08103000 	call	810300 <usleep>
        SCL_LOW(clk_base);
  8035a4:	e0bffd17 	ldw	r2,-12(fp)
  8035a8:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
  8035ac:	01000044 	movi	r4,1
  8035b0:	08103000 	call	810300 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for (i = 0; i < 8; i++)
  8035b4:	e0bffb17 	ldw	r2,-20(fp)
  8035b8:	10800044 	addi	r2,r2,1
  8035bc:	e0bffb15 	stw	r2,-20(fp)
  8035c0:	e0bffb17 	ldw	r2,-20(fp)
  8035c4:	10800210 	cmplti	r2,r2,8
  8035c8:	103fda1e 	bne	r2,zero,803534 <i2c_write+0x40>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
  8035cc:	e0bffe17 	ldw	r2,-8(fp)
  8035d0:	10800104 	addi	r2,r2,4
  8035d4:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
  8035d8:	e0bffd17 	ldw	r2,-12(fp)
  8035dc:	1007883a 	mov	r3,r2
  8035e0:	00800044 	movi	r2,1
  8035e4:	18800035 	stwio	r2,0(r3)
    while (SCL_READ(clk_base) == 0); // clock stretching
  8035e8:	e0bffd17 	ldw	r2,-12(fp)
  8035ec:	10800037 	ldwio	r2,0(r2)
  8035f0:	1005003a 	cmpeq	r2,r2,zero
  8035f4:	103ffc1e 	bne	r2,zero,8035e8 <i2c_write+0xf4>
    SCL_DELAY;  // clock high delay
  8035f8:	01000044 	movi	r4,1
  8035fc:	08103000 	call	810300 <usleep>
    bAck = SDA_READ(data_base)?false:true;  // get ack
  803600:	e0bffe17 	ldw	r2,-8(fp)
  803604:	10800037 	ldwio	r2,0(r2)
  803608:	1005003a 	cmpeq	r2,r2,zero
  80360c:	e0bffc05 	stb	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
  803610:	e0bffd17 	ldw	r2,-12(fp)
  803614:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
  803618:	01000044 	movi	r4,1
  80361c:	08103000 	call	810300 <usleep>
    return bAck;
  803620:	e0bffc03 	ldbu	r2,-16(fp)
}    
  803624:	e037883a 	mov	sp,fp
  803628:	dfc00117 	ldw	ra,4(sp)
  80362c:	df000017 	ldw	fp,0(sp)
  803630:	dec00204 	addi	sp,sp,8
  803634:	f800283a 	ret

00803638 <i2c_read>:

// return true if device response ack
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck)
{
  803638:	defff804 	addi	sp,sp,-32
  80363c:	dfc00715 	stw	ra,28(sp)
  803640:	df000615 	stw	fp,24(sp)
  803644:	df000604 	addi	fp,sp,24
  803648:	e13ffc15 	stw	r4,-16(fp)
  80364c:	e17ffd15 	stw	r5,-12(fp)
  803650:	e1bffe15 	stw	r6,-8(fp)
  803654:	e1ffff05 	stb	r7,-4(fp)
    alt_u8 Data = 0;
  803658:	e03ffb05 	stb	zero,-20(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
  80365c:	e0bffd17 	ldw	r2,-12(fp)
  803660:	10800104 	addi	r2,r2,4
  803664:	10000035 	stwio	zero,0(r2)
    SCL_LOW(clk_base); // clock low
  803668:	e0bffc17 	ldw	r2,-16(fp)
  80366c:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
  803670:	01000044 	movi	r4,1
  803674:	08103000 	call	810300 <usleep>

    for (i = 0; i < 8; i++)
  803678:	e03ffa15 	stw	zero,-24(fp)
  80367c:	00001b06 	br	8036ec <i2c_read+0xb4>
    {
        Data <<= 1;
  803680:	e0bffb03 	ldbu	r2,-20(fp)
  803684:	1085883a 	add	r2,r2,r2
  803688:	e0bffb05 	stb	r2,-20(fp)
        SCL_HIGH(clk_base);  // clock high
  80368c:	e0bffc17 	ldw	r2,-16(fp)
  803690:	1007883a 	mov	r3,r2
  803694:	00800044 	movi	r2,1
  803698:	18800035 	stwio	r2,0(r3)
        while (SCL_READ(clk_base) == 0); // clock stretching
  80369c:	e0bffc17 	ldw	r2,-16(fp)
  8036a0:	10800037 	ldwio	r2,0(r2)
  8036a4:	1005003a 	cmpeq	r2,r2,zero
  8036a8:	103ffc1e 	bne	r2,zero,80369c <i2c_read+0x64>
        SCL_DELAY;
  8036ac:	01000044 	movi	r4,1
  8036b0:	08103000 	call	810300 <usleep>
        if (SDA_READ(data_base))  // read data   
  8036b4:	e0bffd17 	ldw	r2,-12(fp)
  8036b8:	10800037 	ldwio	r2,0(r2)
  8036bc:	1005003a 	cmpeq	r2,r2,zero
  8036c0:	1000031e 	bne	r2,zero,8036d0 <i2c_read+0x98>
        {
            Data |= 0x01;
  8036c4:	e0bffb03 	ldbu	r2,-20(fp)
  8036c8:	10800054 	ori	r2,r2,1
  8036cc:	e0bffb05 	stb	r2,-20(fp)
        else
        {
        	//printf("0");
        }

        SCL_LOW(clk_base);  // clock low
  8036d0:	e0bffc17 	ldw	r2,-16(fp)
  8036d4:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
  8036d8:	01000044 	movi	r4,1
  8036dc:	08103000 	call	810300 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for (i = 0; i < 8; i++)
  8036e0:	e0bffa17 	ldw	r2,-24(fp)
  8036e4:	10800044 	addi	r2,r2,1
  8036e8:	e0bffa15 	stw	r2,-24(fp)
  8036ec:	e0bffa17 	ldw	r2,-24(fp)
  8036f0:	10800210 	cmplti	r2,r2,8
  8036f4:	103fe21e 	bne	r2,zero,803680 <i2c_read+0x48>
        SCL_LOW(clk_base);  // clock low
        SCL_DELAY;
    }
    //printf("\n");
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
  8036f8:	e0bffc17 	ldw	r2,-16(fp)
  8036fc:	10000035 	stwio	zero,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
  803700:	e0bffd17 	ldw	r2,-12(fp)
  803704:	10800104 	addi	r2,r2,4
  803708:	1007883a 	mov	r3,r2
  80370c:	00800044 	movi	r2,1
  803710:	18800035 	stwio	r2,0(r3)
    if (bAck)
  803714:	e0bfff03 	ldbu	r2,-4(fp)
  803718:	1005003a 	cmpeq	r2,r2,zero
  80371c:	1000031e 	bne	r2,zero,80372c <i2c_read+0xf4>
        SDA_LOW(data_base);
  803720:	e0bffd17 	ldw	r2,-12(fp)
  803724:	10000035 	stwio	zero,0(r2)
  803728:	00000406 	br	80373c <i2c_read+0x104>
    else
        SDA_HIGH(data_base);
  80372c:	e0bffd17 	ldw	r2,-12(fp)
  803730:	1007883a 	mov	r3,r2
  803734:	00800044 	movi	r2,1
  803738:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base); // clock high
  80373c:	e0bffc17 	ldw	r2,-16(fp)
  803740:	1007883a 	mov	r3,r2
  803744:	00800044 	movi	r2,1
  803748:	18800035 	stwio	r2,0(r3)
    while (SCL_READ(clk_base) == 0); // clock stretching
  80374c:	e0bffc17 	ldw	r2,-16(fp)
  803750:	10800037 	ldwio	r2,0(r2)
  803754:	1005003a 	cmpeq	r2,r2,zero
  803758:	103ffc1e 	bne	r2,zero,80374c <i2c_read+0x114>
    SCL_DELAY; // clock high  delay
  80375c:	01000044 	movi	r4,1
  803760:	08103000 	call	810300 <usleep>
    SCL_LOW(clk_base); // clock low
  803764:	e0bffc17 	ldw	r2,-16(fp)
  803768:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
  80376c:	01000044 	movi	r4,1
  803770:	08103000 	call	810300 <usleep>
    SDA_LOW(data_base);  // data low
  803774:	e0bffd17 	ldw	r2,-12(fp)
  803778:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // data low delay
  80377c:	01000044 	movi	r4,1
  803780:	08103000 	call	810300 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
  803784:	e0fffe17 	ldw	r3,-8(fp)
  803788:	e0bffb03 	ldbu	r2,-20(fp)
  80378c:	18800005 	stb	r2,0(r3)
}
  803790:	e037883a 	mov	sp,fp
  803794:	dfc00117 	ldw	ra,4(sp)
  803798:	df000017 	ldw	fp,0(sp)
  80379c:	dec00204 	addi	sp,sp,8
  8037a0:	f800283a 	ret

008037a4 <pow>:
  8037a4:	deffee04 	addi	sp,sp,-72
  8037a8:	ddc01015 	stw	r23,64(sp)
  8037ac:	05c020b4 	movhi	r23,130
  8037b0:	bdf6d804 	addi	r23,r23,-9376
  8037b4:	dd800f15 	stw	r22,60(sp)
  8037b8:	dd400e15 	stw	r21,56(sp)
  8037bc:	dd000d15 	stw	r20,52(sp)
  8037c0:	dcc00c15 	stw	r19,48(sp)
  8037c4:	dc800b15 	stw	r18,44(sp)
  8037c8:	dc400a15 	stw	r17,40(sp)
  8037cc:	dc000915 	stw	r16,36(sp)
  8037d0:	2029883a 	mov	r20,r4
  8037d4:	dfc01115 	stw	ra,68(sp)
  8037d8:	3025883a 	mov	r18,r6
  8037dc:	282b883a 	mov	r21,r5
  8037e0:	3827883a 	mov	r19,r7
  8037e4:	0803c2c0 	call	803c2c <__ieee754_pow>
  8037e8:	b9000017 	ldw	r4,0(r23)
  8037ec:	05bfffc4 	movi	r22,-1
  8037f0:	1021883a 	mov	r16,r2
  8037f4:	1823883a 	mov	r17,r3
  8037f8:	25800426 	beq	r4,r22,80380c <pow+0x68>
  8037fc:	9009883a 	mov	r4,r18
  803800:	980b883a 	mov	r5,r19
  803804:	08052280 	call	805228 <__isnand>
  803808:	10000d26 	beq	r2,zero,803840 <pow+0x9c>
  80380c:	8005883a 	mov	r2,r16
  803810:	8807883a 	mov	r3,r17
  803814:	dfc01117 	ldw	ra,68(sp)
  803818:	ddc01017 	ldw	r23,64(sp)
  80381c:	dd800f17 	ldw	r22,60(sp)
  803820:	dd400e17 	ldw	r21,56(sp)
  803824:	dd000d17 	ldw	r20,52(sp)
  803828:	dcc00c17 	ldw	r19,48(sp)
  80382c:	dc800b17 	ldw	r18,44(sp)
  803830:	dc400a17 	ldw	r17,40(sp)
  803834:	dc000917 	ldw	r16,36(sp)
  803838:	dec01204 	addi	sp,sp,72
  80383c:	f800283a 	ret
  803840:	a009883a 	mov	r4,r20
  803844:	a80b883a 	mov	r5,r21
  803848:	08052280 	call	805228 <__isnand>
  80384c:	1000151e 	bne	r2,zero,8038a4 <pow+0x100>
  803850:	000d883a 	mov	r6,zero
  803854:	000f883a 	mov	r7,zero
  803858:	a009883a 	mov	r4,r20
  80385c:	a80b883a 	mov	r5,r21
  803860:	08066a40 	call	8066a4 <__eqdf2>
  803864:	1000541e 	bne	r2,zero,8039b8 <pow+0x214>
  803868:	000d883a 	mov	r6,zero
  80386c:	000f883a 	mov	r7,zero
  803870:	9009883a 	mov	r4,r18
  803874:	980b883a 	mov	r5,r19
  803878:	08066a40 	call	8066a4 <__eqdf2>
  80387c:	10002c1e 	bne	r2,zero,803930 <pow+0x18c>
  803880:	b8800017 	ldw	r2,0(r23)
  803884:	d8000615 	stw	zero,24(sp)
  803888:	d8000715 	stw	zero,28(sp)
  80388c:	10001226 	beq	r2,zero,8038d8 <pow+0x134>
  803890:	008ffc34 	movhi	r2,16368
  803894:	d8800715 	stw	r2,28(sp)
  803898:	dc000617 	ldw	r16,24(sp)
  80389c:	dc400717 	ldw	r17,28(sp)
  8038a0:	003fda06 	br	80380c <pow+0x68>
  8038a4:	000d883a 	mov	r6,zero
  8038a8:	000f883a 	mov	r7,zero
  8038ac:	9009883a 	mov	r4,r18
  8038b0:	980b883a 	mov	r5,r19
  8038b4:	08066a40 	call	8066a4 <__eqdf2>
  8038b8:	103fd41e 	bne	r2,zero,80380c <pow+0x68>
  8038bc:	b8c00017 	ldw	r3,0(r23)
  8038c0:	010ffc34 	movhi	r4,16368
  8038c4:	d8000615 	stw	zero,24(sp)
  8038c8:	d9000715 	stw	r4,28(sp)
  8038cc:	1d801526 	beq	r3,r22,803924 <pow+0x180>
  8038d0:	00800084 	movi	r2,2
  8038d4:	18801326 	beq	r3,r2,803924 <pow+0x180>
  8038d8:	008020b4 	movhi	r2,130
  8038dc:	10aeea04 	addi	r2,r2,-17496
  8038e0:	00c00044 	movi	r3,1
  8038e4:	d809883a 	mov	r4,sp
  8038e8:	dcc00515 	stw	r19,20(sp)
  8038ec:	dd400315 	stw	r21,12(sp)
  8038f0:	d8800115 	stw	r2,4(sp)
  8038f4:	d8c00015 	stw	r3,0(sp)
  8038f8:	dc800415 	stw	r18,16(sp)
  8038fc:	dd000215 	stw	r20,8(sp)
  803900:	d8000815 	stw	zero,32(sp)
  803904:	08052580 	call	805258 <matherr>
  803908:	10002726 	beq	r2,zero,8039a8 <pow+0x204>
  80390c:	d8800817 	ldw	r2,32(sp)
  803910:	103fe126 	beq	r2,zero,803898 <pow+0xf4>
  803914:	08075800 	call	807580 <__errno>
  803918:	d8c00817 	ldw	r3,32(sp)
  80391c:	10c00015 	stw	r3,0(r2)
  803920:	003fdd06 	br	803898 <pow+0xf4>
  803924:	d9000715 	stw	r4,28(sp)
  803928:	d8000615 	stw	zero,24(sp)
  80392c:	003fda06 	br	803898 <pow+0xf4>
  803930:	9009883a 	mov	r4,r18
  803934:	980b883a 	mov	r5,r19
  803938:	080520c0 	call	80520c <finite>
  80393c:	103fb326 	beq	r2,zero,80380c <pow+0x68>
  803940:	000d883a 	mov	r6,zero
  803944:	000f883a 	mov	r7,zero
  803948:	9009883a 	mov	r4,r18
  80394c:	980b883a 	mov	r5,r19
  803950:	080683c0 	call	80683c <__ltdf2>
  803954:	103fad0e 	bge	r2,zero,80380c <pow+0x68>
  803958:	b9000017 	ldw	r4,0(r23)
  80395c:	00800044 	movi	r2,1
  803960:	00c020b4 	movhi	r3,130
  803964:	18eeea04 	addi	r3,r3,-17496
  803968:	d8800015 	stw	r2,0(sp)
  80396c:	d8c00115 	stw	r3,4(sp)
  803970:	dd400315 	stw	r21,12(sp)
  803974:	dcc00515 	stw	r19,20(sp)
  803978:	d8000815 	stw	zero,32(sp)
  80397c:	dd000215 	stw	r20,8(sp)
  803980:	dc800415 	stw	r18,16(sp)
  803984:	20005626 	beq	r4,zero,803ae0 <pow+0x33c>
  803988:	00bffc34 	movhi	r2,65520
  80398c:	d8800715 	stw	r2,28(sp)
  803990:	00800084 	movi	r2,2
  803994:	d8000615 	stw	zero,24(sp)
  803998:	20800326 	beq	r4,r2,8039a8 <pow+0x204>
  80399c:	d809883a 	mov	r4,sp
  8039a0:	08052580 	call	805258 <matherr>
  8039a4:	103fd91e 	bne	r2,zero,80390c <pow+0x168>
  8039a8:	08075800 	call	807580 <__errno>
  8039ac:	00c00844 	movi	r3,33
  8039b0:	10c00015 	stw	r3,0(r2)
  8039b4:	003fd506 	br	80390c <pow+0x168>
  8039b8:	8009883a 	mov	r4,r16
  8039bc:	880b883a 	mov	r5,r17
  8039c0:	080520c0 	call	80520c <finite>
  8039c4:	10002426 	beq	r2,zero,803a58 <pow+0x2b4>
  8039c8:	000d883a 	mov	r6,zero
  8039cc:	000f883a 	mov	r7,zero
  8039d0:	8009883a 	mov	r4,r16
  8039d4:	880b883a 	mov	r5,r17
  8039d8:	08066a40 	call	8066a4 <__eqdf2>
  8039dc:	103f8b1e 	bne	r2,zero,80380c <pow+0x68>
  8039e0:	a009883a 	mov	r4,r20
  8039e4:	a80b883a 	mov	r5,r21
  8039e8:	080520c0 	call	80520c <finite>
  8039ec:	103f8726 	beq	r2,zero,80380c <pow+0x68>
  8039f0:	9009883a 	mov	r4,r18
  8039f4:	980b883a 	mov	r5,r19
  8039f8:	080520c0 	call	80520c <finite>
  8039fc:	103f8326 	beq	r2,zero,80380c <pow+0x68>
  803a00:	b9000017 	ldw	r4,0(r23)
  803a04:	00800104 	movi	r2,4
  803a08:	d8800015 	stw	r2,0(sp)
  803a0c:	00c020b4 	movhi	r3,130
  803a10:	18eeea04 	addi	r3,r3,-17496
  803a14:	00800084 	movi	r2,2
  803a18:	d8c00115 	stw	r3,4(sp)
  803a1c:	dd400315 	stw	r21,12(sp)
  803a20:	dcc00515 	stw	r19,20(sp)
  803a24:	d8000815 	stw	zero,32(sp)
  803a28:	dd000215 	stw	r20,8(sp)
  803a2c:	dc800415 	stw	r18,16(sp)
  803a30:	d8000615 	stw	zero,24(sp)
  803a34:	d8000715 	stw	zero,28(sp)
  803a38:	20800326 	beq	r4,r2,803a48 <pow+0x2a4>
  803a3c:	d809883a 	mov	r4,sp
  803a40:	08052580 	call	805258 <matherr>
  803a44:	103fb11e 	bne	r2,zero,80390c <pow+0x168>
  803a48:	08075800 	call	807580 <__errno>
  803a4c:	00c00884 	movi	r3,34
  803a50:	10c00015 	stw	r3,0(r2)
  803a54:	003fad06 	br	80390c <pow+0x168>
  803a58:	a009883a 	mov	r4,r20
  803a5c:	a80b883a 	mov	r5,r21
  803a60:	080520c0 	call	80520c <finite>
  803a64:	103fd826 	beq	r2,zero,8039c8 <pow+0x224>
  803a68:	9009883a 	mov	r4,r18
  803a6c:	980b883a 	mov	r5,r19
  803a70:	080520c0 	call	80520c <finite>
  803a74:	103fd426 	beq	r2,zero,8039c8 <pow+0x224>
  803a78:	880b883a 	mov	r5,r17
  803a7c:	8009883a 	mov	r4,r16
  803a80:	08052280 	call	805228 <__isnand>
  803a84:	10001926 	beq	r2,zero,803aec <pow+0x348>
  803a88:	bc000017 	ldw	r16,0(r23)
  803a8c:	00800044 	movi	r2,1
  803a90:	00c020b4 	movhi	r3,130
  803a94:	18eeea04 	addi	r3,r3,-17496
  803a98:	d8800015 	stw	r2,0(sp)
  803a9c:	d8c00115 	stw	r3,4(sp)
  803aa0:	dd400315 	stw	r21,12(sp)
  803aa4:	dcc00515 	stw	r19,20(sp)
  803aa8:	d8000815 	stw	zero,32(sp)
  803aac:	dd000215 	stw	r20,8(sp)
  803ab0:	dc800415 	stw	r18,16(sp)
  803ab4:	80000a26 	beq	r16,zero,803ae0 <pow+0x33c>
  803ab8:	0009883a 	mov	r4,zero
  803abc:	000d883a 	mov	r6,zero
  803ac0:	000b883a 	mov	r5,zero
  803ac4:	000f883a 	mov	r7,zero
  803ac8:	080644c0 	call	80644c <__divdf3>
  803acc:	d8800615 	stw	r2,24(sp)
  803ad0:	00800084 	movi	r2,2
  803ad4:	d8c00715 	stw	r3,28(sp)
  803ad8:	80bfb01e 	bne	r16,r2,80399c <pow+0x1f8>
  803adc:	003fb206 	br	8039a8 <pow+0x204>
  803ae0:	d8000615 	stw	zero,24(sp)
  803ae4:	d8000715 	stw	zero,28(sp)
  803ae8:	003fac06 	br	80399c <pow+0x1f8>
  803aec:	b8800017 	ldw	r2,0(r23)
  803af0:	00c000c4 	movi	r3,3
  803af4:	010020b4 	movhi	r4,130
  803af8:	212eea04 	addi	r4,r4,-17496
  803afc:	d8c00015 	stw	r3,0(sp)
  803b00:	d9000115 	stw	r4,4(sp)
  803b04:	d8000815 	stw	zero,32(sp)
  803b08:	dd000215 	stw	r20,8(sp)
  803b0c:	dd400315 	stw	r21,12(sp)
  803b10:	dc800415 	stw	r18,16(sp)
  803b14:	dcc00515 	stw	r19,20(sp)
  803b18:	1000251e 	bne	r2,zero,803bb0 <pow+0x40c>
  803b1c:	05b80034 	movhi	r22,57344
  803b20:	0091fc34 	movhi	r2,18416
  803b24:	10bfffc4 	addi	r2,r2,-1
  803b28:	000d883a 	mov	r6,zero
  803b2c:	000f883a 	mov	r7,zero
  803b30:	a80b883a 	mov	r5,r21
  803b34:	a009883a 	mov	r4,r20
  803b38:	d8800715 	stw	r2,28(sp)
  803b3c:	dd800615 	stw	r22,24(sp)
  803b40:	080683c0 	call	80683c <__ltdf2>
  803b44:	103fbd0e 	bge	r2,zero,803a3c <pow+0x298>
  803b48:	0005883a 	mov	r2,zero
  803b4c:	00cff834 	movhi	r3,16352
  803b50:	180f883a 	mov	r7,r3
  803b54:	100d883a 	mov	r6,r2
  803b58:	980b883a 	mov	r5,r19
  803b5c:	9009883a 	mov	r4,r18
  803b60:	08060880 	call	806088 <__muldf3>
  803b64:	1009883a 	mov	r4,r2
  803b68:	180b883a 	mov	r5,r3
  803b6c:	1021883a 	mov	r16,r2
  803b70:	1823883a 	mov	r17,r3
  803b74:	08052700 	call	805270 <rint>
  803b78:	180f883a 	mov	r7,r3
  803b7c:	8009883a 	mov	r4,r16
  803b80:	880b883a 	mov	r5,r17
  803b84:	100d883a 	mov	r6,r2
  803b88:	080672c0 	call	80672c <__nedf2>
  803b8c:	10000426 	beq	r2,zero,803ba0 <pow+0x3fc>
  803b90:	00b1fc34 	movhi	r2,51184
  803b94:	10bfffc4 	addi	r2,r2,-1
  803b98:	dd800615 	stw	r22,24(sp)
  803b9c:	d8800715 	stw	r2,28(sp)
  803ba0:	b8c00017 	ldw	r3,0(r23)
  803ba4:	00800084 	movi	r2,2
  803ba8:	18bfa41e 	bne	r3,r2,803a3c <pow+0x298>
  803bac:	003fa606 	br	803a48 <pow+0x2a4>
  803bb0:	009ffc34 	movhi	r2,32752
  803bb4:	000d883a 	mov	r6,zero
  803bb8:	000f883a 	mov	r7,zero
  803bbc:	a80b883a 	mov	r5,r21
  803bc0:	a009883a 	mov	r4,r20
  803bc4:	d8800715 	stw	r2,28(sp)
  803bc8:	d8000615 	stw	zero,24(sp)
  803bcc:	080683c0 	call	80683c <__ltdf2>
  803bd0:	103ff30e 	bge	r2,zero,803ba0 <pow+0x3fc>
  803bd4:	0005883a 	mov	r2,zero
  803bd8:	00cff834 	movhi	r3,16352
  803bdc:	180f883a 	mov	r7,r3
  803be0:	100d883a 	mov	r6,r2
  803be4:	980b883a 	mov	r5,r19
  803be8:	9009883a 	mov	r4,r18
  803bec:	08060880 	call	806088 <__muldf3>
  803bf0:	1009883a 	mov	r4,r2
  803bf4:	180b883a 	mov	r5,r3
  803bf8:	1021883a 	mov	r16,r2
  803bfc:	1823883a 	mov	r17,r3
  803c00:	08052700 	call	805270 <rint>
  803c04:	180f883a 	mov	r7,r3
  803c08:	8009883a 	mov	r4,r16
  803c0c:	880b883a 	mov	r5,r17
  803c10:	100d883a 	mov	r6,r2
  803c14:	080672c0 	call	80672c <__nedf2>
  803c18:	103fe126 	beq	r2,zero,803ba0 <pow+0x3fc>
  803c1c:	00bffc34 	movhi	r2,65520
  803c20:	d8800715 	stw	r2,28(sp)
  803c24:	d8000615 	stw	zero,24(sp)
  803c28:	003fdd06 	br	803ba0 <pow+0x3fc>

00803c2c <__ieee754_pow>:
  803c2c:	deffbb04 	addi	sp,sp,-276
  803c30:	3005883a 	mov	r2,r6
  803c34:	dd404015 	stw	r21,256(sp)
  803c38:	dd003f15 	stw	r20,252(sp)
  803c3c:	d9802815 	stw	r6,160(sp)
  803c40:	2029883a 	mov	r20,r4
  803c44:	282b883a 	mov	r21,r5
  803c48:	3009883a 	mov	r4,r6
  803c4c:	380b883a 	mov	r5,r7
  803c50:	01a00034 	movhi	r6,32768
  803c54:	31bfffc4 	addi	r6,r6,-1
  803c58:	dc003b15 	stw	r16,236(sp)
  803c5c:	29a0703a 	and	r16,r5,r6
  803c60:	1404b03a 	or	r2,r2,r16
  803c64:	dd804115 	stw	r22,260(sp)
  803c68:	dc403c15 	stw	r17,240(sp)
  803c6c:	d9c02915 	stw	r7,164(sp)
  803c70:	382d883a 	mov	r22,r7
  803c74:	dfc04415 	stw	ra,272(sp)
  803c78:	200f883a 	mov	r7,r4
  803c7c:	df004315 	stw	fp,268(sp)
  803c80:	ddc04215 	stw	r23,264(sp)
  803c84:	dcc03e15 	stw	r19,248(sp)
  803c88:	dc803d15 	stw	r18,244(sp)
  803c8c:	a023883a 	mov	r17,r20
  803c90:	2809883a 	mov	r4,r5
  803c94:	10000826 	beq	r2,zero,803cb8 <__ieee754_pow+0x8c>
  803c98:	a9a4703a 	and	r18,r21,r6
  803c9c:	009ffc34 	movhi	r2,32752
  803ca0:	a827883a 	mov	r19,r21
  803ca4:	1480180e 	bge	r2,r18,803d08 <__ieee754_pow+0xdc>
  803ca8:	00b00434 	movhi	r2,49168
  803cac:	9085883a 	add	r2,r18,r2
  803cb0:	8884b03a 	or	r2,r17,r2
  803cb4:	1000321e 	bne	r2,zero,803d80 <__ieee754_pow+0x154>
  803cb8:	0009883a 	mov	r4,zero
  803cbc:	014ffc34 	movhi	r5,16368
  803cc0:	d9002815 	stw	r4,160(sp)
  803cc4:	d9402915 	stw	r5,164(sp)
  803cc8:	d9002817 	ldw	r4,160(sp)
  803ccc:	d9402917 	ldw	r5,164(sp)
  803cd0:	2005883a 	mov	r2,r4
  803cd4:	2807883a 	mov	r3,r5
  803cd8:	dfc04417 	ldw	ra,272(sp)
  803cdc:	df004317 	ldw	fp,268(sp)
  803ce0:	ddc04217 	ldw	r23,264(sp)
  803ce4:	dd804117 	ldw	r22,260(sp)
  803ce8:	dd404017 	ldw	r21,256(sp)
  803cec:	dd003f17 	ldw	r20,252(sp)
  803cf0:	dcc03e17 	ldw	r19,248(sp)
  803cf4:	dc803d17 	ldw	r18,244(sp)
  803cf8:	dc403c17 	ldw	r17,240(sp)
  803cfc:	dc003b17 	ldw	r16,236(sp)
  803d00:	dec04504 	addi	sp,sp,276
  803d04:	f800283a 	ret
  803d08:	90802b26 	beq	r18,r2,803db8 <__ieee754_pow+0x18c>
  803d0c:	143fe616 	blt	r2,r16,803ca8 <__ieee754_pow+0x7c>
  803d10:	80806126 	beq	r16,r2,803e98 <__ieee754_pow+0x26c>
  803d14:	982e403a 	cmpge	r23,r19,zero
  803d18:	b8004e26 	beq	r23,zero,803e54 <__ieee754_pow+0x228>
  803d1c:	0039883a 	mov	fp,zero
  803d20:	3800281e 	bne	r7,zero,803dc4 <__ieee754_pow+0x198>
  803d24:	009ffc34 	movhi	r2,32752
  803d28:	80804f26 	beq	r16,r2,803e68 <__ieee754_pow+0x23c>
  803d2c:	008ffc34 	movhi	r2,16368
  803d30:	80808226 	beq	r16,r2,803f3c <__ieee754_pow+0x310>
  803d34:	00900034 	movhi	r2,16384
  803d38:	20828426 	beq	r4,r2,80474c <__ieee754_pow+0xb20>
  803d3c:	008ff834 	movhi	r2,16352
  803d40:	2080201e 	bne	r4,r2,803dc4 <__ieee754_pow+0x198>
  803d44:	98001f16 	blt	r19,zero,803dc4 <__ieee754_pow+0x198>
  803d48:	a80b883a 	mov	r5,r21
  803d4c:	a009883a 	mov	r4,r20
  803d50:	dfc04417 	ldw	ra,272(sp)
  803d54:	df004317 	ldw	fp,268(sp)
  803d58:	ddc04217 	ldw	r23,264(sp)
  803d5c:	dd804117 	ldw	r22,260(sp)
  803d60:	dd404017 	ldw	r21,256(sp)
  803d64:	dd003f17 	ldw	r20,252(sp)
  803d68:	dcc03e17 	ldw	r19,248(sp)
  803d6c:	dc803d17 	ldw	r18,244(sp)
  803d70:	dc403c17 	ldw	r17,240(sp)
  803d74:	dc003b17 	ldw	r16,236(sp)
  803d78:	dec04504 	addi	sp,sp,276
  803d7c:	0804f2c1 	jmpi	804f2c <__ieee754_sqrt>
  803d80:	010020b4 	movhi	r4,130
  803d84:	212f5504 	addi	r4,r4,-17068
  803d88:	dfc04417 	ldw	ra,272(sp)
  803d8c:	df004317 	ldw	fp,268(sp)
  803d90:	ddc04217 	ldw	r23,264(sp)
  803d94:	dd804117 	ldw	r22,260(sp)
  803d98:	dd404017 	ldw	r21,256(sp)
  803d9c:	dd003f17 	ldw	r20,252(sp)
  803da0:	dcc03e17 	ldw	r19,248(sp)
  803da4:	dc803d17 	ldw	r18,244(sp)
  803da8:	dc403c17 	ldw	r17,240(sp)
  803dac:	dc003b17 	ldw	r16,236(sp)
  803db0:	dec04504 	addi	sp,sp,276
  803db4:	08052601 	jmpi	805260 <nan>
  803db8:	a03fbb1e 	bne	r20,zero,803ca8 <__ieee754_pow+0x7c>
  803dbc:	003fd306 	br	803d0c <__ieee754_pow+0xe0>
  803dc0:	0039883a 	mov	fp,zero
  803dc4:	a009883a 	mov	r4,r20
  803dc8:	a80b883a 	mov	r5,r21
  803dcc:	08051f40 	call	8051f4 <fabs>
  803dd0:	1015883a 	mov	r10,r2
  803dd4:	1817883a 	mov	r11,r3
  803dd8:	88001226 	beq	r17,zero,803e24 <__ieee754_pow+0x1f8>
  803ddc:	9804d7fa 	srli	r2,r19,31
  803de0:	10bfffc4 	addi	r2,r2,-1
  803de4:	1706b03a 	or	r3,r2,fp
  803de8:	d8802515 	stw	r2,148(sp)
  803dec:	18002c1e 	bne	r3,zero,803ea0 <__ieee754_pow+0x274>
  803df0:	a80f883a 	mov	r7,r21
  803df4:	a009883a 	mov	r4,r20
  803df8:	a80b883a 	mov	r5,r21
  803dfc:	a00d883a 	mov	r6,r20
  803e00:	0805f940 	call	805f94 <__subdf3>
  803e04:	1009883a 	mov	r4,r2
  803e08:	180b883a 	mov	r5,r3
  803e0c:	100d883a 	mov	r6,r2
  803e10:	180f883a 	mov	r7,r3
  803e14:	080644c0 	call	80644c <__divdf3>
  803e18:	d8802815 	stw	r2,160(sp)
  803e1c:	d8c02915 	stw	r3,164(sp)
  803e20:	003fa906 	br	803cc8 <__ieee754_pow+0x9c>
  803e24:	009ffc34 	movhi	r2,32752
  803e28:	90800326 	beq	r18,r2,803e38 <__ieee754_pow+0x20c>
  803e2c:	90000226 	beq	r18,zero,803e38 <__ieee754_pow+0x20c>
  803e30:	008ffc34 	movhi	r2,16368
  803e34:	90bfe91e 	bne	r18,r2,803ddc <__ieee754_pow+0x1b0>
  803e38:	b0026316 	blt	r22,zero,8047c8 <__ieee754_pow+0xb9c>
  803e3c:	5011883a 	mov	r8,r10
  803e40:	5813883a 	mov	r9,r11
  803e44:	b8023126 	beq	r23,zero,80470c <__ieee754_pow+0xae0>
  803e48:	da002815 	stw	r8,160(sp)
  803e4c:	da402915 	stw	r9,164(sp)
  803e50:	003f9d06 	br	803cc8 <__ieee754_pow+0x9c>
  803e54:	0090d034 	movhi	r2,17216
  803e58:	10bfffc4 	addi	r2,r2,-1
  803e5c:	1400270e 	bge	r2,r16,803efc <__ieee754_pow+0x2d0>
  803e60:	07000084 	movi	fp,2
  803e64:	003fae06 	br	803d20 <__ieee754_pow+0xf4>
  803e68:	00b00434 	movhi	r2,49168
  803e6c:	9085883a 	add	r2,r18,r2
  803e70:	8884b03a 	or	r2,r17,r2
  803e74:	103f9026 	beq	r2,zero,803cb8 <__ieee754_pow+0x8c>
  803e78:	008ffc34 	movhi	r2,16368
  803e7c:	10bfffc4 	addi	r2,r2,-1
  803e80:	1482d00e 	bge	r2,r18,8049c4 <__ieee754_pow+0xd98>
  803e84:	b03f900e 	bge	r22,zero,803cc8 <__ieee754_pow+0x9c>
  803e88:	0005883a 	mov	r2,zero
  803e8c:	d8802815 	stw	r2,160(sp)
  803e90:	d8802915 	stw	r2,164(sp)
  803e94:	003f8c06 	br	803cc8 <__ieee754_pow+0x9c>
  803e98:	383f9e26 	beq	r7,zero,803d14 <__ieee754_pow+0xe8>
  803e9c:	003f8206 	br	803ca8 <__ieee754_pow+0x7c>
  803ea0:	00907834 	movhi	r2,16864
  803ea4:	1400290e 	bge	r2,r16,803f4c <__ieee754_pow+0x320>
  803ea8:	0090fc34 	movhi	r2,17392
  803eac:	1402500e 	bge	r2,r16,8047f0 <__ieee754_pow+0xbc4>
  803eb0:	008ffc34 	movhi	r2,16368
  803eb4:	10bfffc4 	addi	r2,r2,-1
  803eb8:	14800b0e 	bge	r2,r18,803ee8 <__ieee754_pow+0x2bc>
  803ebc:	05800b0e 	bge	zero,r22,803eec <__ieee754_pow+0x2c0>
  803ec0:	00a20034 	movhi	r2,34816
  803ec4:	109d6704 	addi	r2,r2,30108
  803ec8:	00df8e34 	movhi	r3,32312
  803ecc:	18f90f04 	addi	r3,r3,-7108
  803ed0:	100d883a 	mov	r6,r2
  803ed4:	180f883a 	mov	r7,r3
  803ed8:	1009883a 	mov	r4,r2
  803edc:	180b883a 	mov	r5,r3
  803ee0:	08060880 	call	806088 <__muldf3>
  803ee4:	003fcc06 	br	803e18 <__ieee754_pow+0x1ec>
  803ee8:	b03ff516 	blt	r22,zero,803ec0 <__ieee754_pow+0x294>
  803eec:	0007883a 	mov	r3,zero
  803ef0:	d8c02815 	stw	r3,160(sp)
  803ef4:	d8c02915 	stw	r3,164(sp)
  803ef8:	003f7306 	br	803cc8 <__ieee754_pow+0x9c>
  803efc:	008ffc34 	movhi	r2,16368
  803f00:	10bfffc4 	addi	r2,r2,-1
  803f04:	143f850e 	bge	r2,r16,803d1c <__ieee754_pow+0xf0>
  803f08:	8005d53a 	srai	r2,r16,20
  803f0c:	01400504 	movi	r5,20
  803f10:	10ff0044 	addi	r3,r2,-1023
  803f14:	28c3e10e 	bge	r5,r3,804e9c <__ieee754_pow+0x1270>
  803f18:	00800d04 	movi	r2,52
  803f1c:	10c5c83a 	sub	r2,r2,r3
  803f20:	3886d83a 	srl	r3,r7,r2
  803f24:	1884983a 	sll	r2,r3,r2
  803f28:	38bf7c1e 	bne	r7,r2,803d1c <__ieee754_pow+0xf0>
  803f2c:	18c0004c 	andi	r3,r3,1
  803f30:	00800084 	movi	r2,2
  803f34:	10f9c83a 	sub	fp,r2,r3
  803f38:	003f7906 	br	803d20 <__ieee754_pow+0xf4>
  803f3c:	b0038516 	blt	r22,zero,804d54 <__ieee754_pow+0x1128>
  803f40:	dd002815 	stw	r20,160(sp)
  803f44:	dd402915 	stw	r21,164(sp)
  803f48:	003f5f06 	br	803cc8 <__ieee754_pow+0x9c>
  803f4c:	00800434 	movhi	r2,16
  803f50:	10bfffc4 	addi	r2,r2,-1
  803f54:	1482900e 	bge	r2,r18,804998 <__ieee754_pow+0xd6c>
  803f58:	000b883a 	mov	r5,zero
  803f5c:	9005d53a 	srai	r2,r18,20
  803f60:	00c00434 	movhi	r3,16
  803f64:	18ffffc4 	addi	r3,r3,-1
  803f68:	90c8703a 	and	r4,r18,r3
  803f6c:	2887883a 	add	r3,r5,r2
  803f70:	18bf0044 	addi	r2,r3,-1023
  803f74:	d8800015 	stw	r2,0(sp)
  803f78:	00800134 	movhi	r2,4
  803f7c:	10a62384 	addi	r2,r2,-26482
  803f80:	250ffc34 	orhi	r20,r4,16368
  803f84:	1101ee0e 	bge	r2,r4,804740 <__ieee754_pow+0xb14>
  803f88:	00800334 	movhi	r2,12
  803f8c:	10ad9e44 	addi	r2,r2,-18823
  803f90:	1101e716 	blt	r2,r4,804730 <__ieee754_pow+0xb04>
  803f94:	01000044 	movi	r4,1
  803f98:	04000334 	movhi	r16,12
  803f9c:	200890fa 	slli	r4,r4,3
  803fa0:	da800115 	stw	r10,4(sp)
  803fa4:	dd000215 	stw	r20,8(sp)
  803fa8:	d9002c15 	stw	r4,176(sp)
  803fac:	d9402c17 	ldw	r5,176(sp)
  803fb0:	010020b4 	movhi	r4,130
  803fb4:	212eeb04 	addi	r4,r4,-17492
  803fb8:	a02bd07a 	srai	r21,r20,1
  803fbc:	2909883a 	add	r4,r5,r4
  803fc0:	25800017 	ldw	r22,0(r4)
  803fc4:	25c00117 	ldw	r23,4(r4)
  803fc8:	a00b883a 	mov	r5,r20
  803fcc:	5009883a 	mov	r4,r10
  803fd0:	b00d883a 	mov	r6,r22
  803fd4:	b80f883a 	mov	r7,r23
  803fd8:	0805f940 	call	805f94 <__subdf3>
  803fdc:	d9000117 	ldw	r4,4(sp)
  803fe0:	a00b883a 	mov	r5,r20
  803fe4:	b00d883a 	mov	r6,r22
  803fe8:	b80f883a 	mov	r7,r23
  803fec:	1025883a 	mov	r18,r2
  803ff0:	1827883a 	mov	r19,r3
  803ff4:	08060140 	call	806014 <__adddf3>
  803ff8:	0011883a 	mov	r8,zero
  803ffc:	024ffc34 	movhi	r9,16368
  804000:	480b883a 	mov	r5,r9
  804004:	4009883a 	mov	r4,r8
  804008:	180f883a 	mov	r7,r3
  80400c:	100d883a 	mov	r6,r2
  804010:	080644c0 	call	80644c <__divdf3>
  804014:	d8c02e15 	stw	r3,184(sp)
  804018:	d8800f15 	stw	r2,60(sp)
  80401c:	d8802d15 	stw	r2,180(sp)
  804020:	d8802e17 	ldw	r2,184(sp)
  804024:	d9800f17 	ldw	r6,60(sp)
  804028:	9009883a 	mov	r4,r18
  80402c:	980b883a 	mov	r5,r19
  804030:	100f883a 	mov	r7,r2
  804034:	dc800b15 	stw	r18,44(sp)
  804038:	dcc00c15 	stw	r19,48(sp)
  80403c:	d8801015 	stw	r2,64(sp)
  804040:	08060880 	call	806088 <__muldf3>
  804044:	d8c03015 	stw	r3,192(sp)
  804048:	d9003017 	ldw	r4,192(sp)
  80404c:	d8802f15 	stw	r2,188(sp)
  804050:	d8800315 	stw	r2,12(sp)
  804054:	ad480034 	orhi	r21,r21,8192
  804058:	0005883a 	mov	r2,zero
  80405c:	ac2b883a 	add	r21,r21,r16
  804060:	000b883a 	mov	r5,zero
  804064:	1021883a 	mov	r16,r2
  804068:	2005883a 	mov	r2,r4
  80406c:	800d883a 	mov	r6,r16
  804070:	a80f883a 	mov	r7,r21
  804074:	d9000415 	stw	r4,16(sp)
  804078:	d9002715 	stw	r4,156(sp)
  80407c:	d9402615 	stw	r5,152(sp)
  804080:	d9401615 	stw	r5,88(sp)
  804084:	d9001715 	stw	r4,92(sp)
  804088:	100b883a 	mov	r5,r2
  80408c:	0009883a 	mov	r4,zero
  804090:	08060880 	call	806088 <__muldf3>
  804094:	d9000b17 	ldw	r4,44(sp)
  804098:	980b883a 	mov	r5,r19
  80409c:	180f883a 	mov	r7,r3
  8040a0:	100d883a 	mov	r6,r2
  8040a4:	0805f940 	call	805f94 <__subdf3>
  8040a8:	8009883a 	mov	r4,r16
  8040ac:	a80b883a 	mov	r5,r21
  8040b0:	b80f883a 	mov	r7,r23
  8040b4:	b00d883a 	mov	r6,r22
  8040b8:	1021883a 	mov	r16,r2
  8040bc:	1823883a 	mov	r17,r3
  8040c0:	0805f940 	call	805f94 <__subdf3>
  8040c4:	d9000117 	ldw	r4,4(sp)
  8040c8:	a00b883a 	mov	r5,r20
  8040cc:	180f883a 	mov	r7,r3
  8040d0:	100d883a 	mov	r6,r2
  8040d4:	0805f940 	call	805f94 <__subdf3>
  8040d8:	d9001617 	ldw	r4,88(sp)
  8040dc:	d9402717 	ldw	r5,156(sp)
  8040e0:	180f883a 	mov	r7,r3
  8040e4:	100d883a 	mov	r6,r2
  8040e8:	08060880 	call	806088 <__muldf3>
  8040ec:	180f883a 	mov	r7,r3
  8040f0:	880b883a 	mov	r5,r17
  8040f4:	8009883a 	mov	r4,r16
  8040f8:	100d883a 	mov	r6,r2
  8040fc:	0805f940 	call	805f94 <__subdf3>
  804100:	d9000f17 	ldw	r4,60(sp)
  804104:	d9402e17 	ldw	r5,184(sp)
  804108:	180f883a 	mov	r7,r3
  80410c:	100d883a 	mov	r6,r2
  804110:	08060880 	call	806088 <__muldf3>
  804114:	d9000317 	ldw	r4,12(sp)
  804118:	d9403017 	ldw	r5,192(sp)
  80411c:	d8803115 	stw	r2,196(sp)
  804120:	200d883a 	mov	r6,r4
  804124:	280f883a 	mov	r7,r5
  804128:	d8c03215 	stw	r3,200(sp)
  80412c:	08060880 	call	806088 <__muldf3>
  804130:	1009883a 	mov	r4,r2
  804134:	180b883a 	mov	r5,r3
  804138:	100d883a 	mov	r6,r2
  80413c:	180f883a 	mov	r7,r3
  804140:	1021883a 	mov	r16,r2
  804144:	1823883a 	mov	r17,r3
  804148:	08060880 	call	806088 <__muldf3>
  80414c:	02129174 	movhi	r8,19013
  804150:	4213bbc4 	addi	r8,r8,20207
  804154:	024ff2b4 	movhi	r9,16330
  804158:	4a5f8a04 	addi	r9,r9,32296
  80415c:	480f883a 	mov	r7,r9
  804160:	8009883a 	mov	r4,r16
  804164:	880b883a 	mov	r5,r17
  804168:	400d883a 	mov	r6,r8
  80416c:	1029883a 	mov	r20,r2
  804170:	182b883a 	mov	r21,r3
  804174:	08060880 	call	806088 <__muldf3>
  804178:	0224f2b4 	movhi	r8,37834
  80417c:	4236d944 	addi	r8,r8,-9371
  804180:	024ff3b4 	movhi	r9,16334
  804184:	4a619284 	addi	r9,r9,-31158
  804188:	480f883a 	mov	r7,r9
  80418c:	400d883a 	mov	r6,r8
  804190:	180b883a 	mov	r5,r3
  804194:	1009883a 	mov	r4,r2
  804198:	08060140 	call	806014 <__adddf3>
  80419c:	180f883a 	mov	r7,r3
  8041a0:	8009883a 	mov	r4,r16
  8041a4:	880b883a 	mov	r5,r17
  8041a8:	100d883a 	mov	r6,r2
  8041ac:	08060880 	call	806088 <__muldf3>
  8041b0:	022a4774 	movhi	r8,43293
  8041b4:	42104044 	addi	r8,r8,16641
  8041b8:	024ff474 	movhi	r9,16337
  8041bc:	4a5d1804 	addi	r9,r9,29792
  8041c0:	480f883a 	mov	r7,r9
  8041c4:	400d883a 	mov	r6,r8
  8041c8:	180b883a 	mov	r5,r3
  8041cc:	1009883a 	mov	r4,r2
  8041d0:	08060140 	call	806014 <__adddf3>
  8041d4:	180f883a 	mov	r7,r3
  8041d8:	8009883a 	mov	r4,r16
  8041dc:	880b883a 	mov	r5,r17
  8041e0:	100d883a 	mov	r6,r2
  8041e4:	08060880 	call	806088 <__muldf3>
  8041e8:	021463f4 	movhi	r8,20879
  8041ec:	42099344 	addi	r8,r8,9805
  8041f0:	024ff574 	movhi	r9,16341
  8041f4:	4a555544 	addi	r9,r9,21845
  8041f8:	480f883a 	mov	r7,r9
  8041fc:	400d883a 	mov	r6,r8
  804200:	180b883a 	mov	r5,r3
  804204:	1009883a 	mov	r4,r2
  804208:	08060140 	call	806014 <__adddf3>
  80420c:	180f883a 	mov	r7,r3
  804210:	8009883a 	mov	r4,r16
  804214:	880b883a 	mov	r5,r17
  804218:	100d883a 	mov	r6,r2
  80421c:	08060880 	call	806088 <__muldf3>
  804220:	0236dc34 	movhi	r8,56176
  804224:	422affc4 	addi	r8,r8,-21505
  804228:	024ff6f4 	movhi	r9,16347
  80422c:	4a5b6d84 	addi	r9,r9,28086
  804230:	480f883a 	mov	r7,r9
  804234:	400d883a 	mov	r6,r8
  804238:	180b883a 	mov	r5,r3
  80423c:	1009883a 	mov	r4,r2
  804240:	08060140 	call	806014 <__adddf3>
  804244:	180f883a 	mov	r7,r3
  804248:	8009883a 	mov	r4,r16
  80424c:	880b883a 	mov	r5,r17
  804250:	100d883a 	mov	r6,r2
  804254:	08060880 	call	806088 <__muldf3>
  804258:	020cccf4 	movhi	r8,13107
  80425c:	420cc0c4 	addi	r8,r8,13059
  804260:	024ff8f4 	movhi	r9,16355
  804264:	4a4cccc4 	addi	r9,r9,13107
  804268:	480f883a 	mov	r7,r9
  80426c:	400d883a 	mov	r6,r8
  804270:	180b883a 	mov	r5,r3
  804274:	1009883a 	mov	r4,r2
  804278:	08060140 	call	806014 <__adddf3>
  80427c:	180f883a 	mov	r7,r3
  804280:	a80b883a 	mov	r5,r21
  804284:	a009883a 	mov	r4,r20
  804288:	100d883a 	mov	r6,r2
  80428c:	08060880 	call	806088 <__muldf3>
  804290:	d9000317 	ldw	r4,12(sp)
  804294:	d9403017 	ldw	r5,192(sp)
  804298:	d9801617 	ldw	r6,88(sp)
  80429c:	d9c02717 	ldw	r7,156(sp)
  8042a0:	1021883a 	mov	r16,r2
  8042a4:	1823883a 	mov	r17,r3
  8042a8:	08060140 	call	806014 <__adddf3>
  8042ac:	d9003117 	ldw	r4,196(sp)
  8042b0:	d9403217 	ldw	r5,200(sp)
  8042b4:	180f883a 	mov	r7,r3
  8042b8:	100d883a 	mov	r6,r2
  8042bc:	d9001415 	stw	r4,80(sp)
  8042c0:	d9401515 	stw	r5,84(sp)
  8042c4:	08060880 	call	806088 <__muldf3>
  8042c8:	180f883a 	mov	r7,r3
  8042cc:	8009883a 	mov	r4,r16
  8042d0:	880b883a 	mov	r5,r17
  8042d4:	100d883a 	mov	r6,r2
  8042d8:	08060140 	call	806014 <__adddf3>
  8042dc:	d9001617 	ldw	r4,88(sp)
  8042e0:	d9402717 	ldw	r5,156(sp)
  8042e4:	d8803315 	stw	r2,204(sp)
  8042e8:	200d883a 	mov	r6,r4
  8042ec:	280f883a 	mov	r7,r5
  8042f0:	d8c03415 	stw	r3,208(sp)
  8042f4:	08060880 	call	806088 <__muldf3>
  8042f8:	182f883a 	mov	r23,r3
  8042fc:	05500234 	movhi	r21,16392
  804300:	0029883a 	mov	r20,zero
  804304:	b80b883a 	mov	r5,r23
  804308:	a00d883a 	mov	r6,r20
  80430c:	a80f883a 	mov	r7,r21
  804310:	1009883a 	mov	r4,r2
  804314:	d8800715 	stw	r2,28(sp)
  804318:	d8c00815 	stw	r3,32(sp)
  80431c:	08060140 	call	806014 <__adddf3>
  804320:	d9003317 	ldw	r4,204(sp)
  804324:	d9403417 	ldw	r5,208(sp)
  804328:	180f883a 	mov	r7,r3
  80432c:	100d883a 	mov	r6,r2
  804330:	d9000515 	stw	r4,20(sp)
  804334:	d9400615 	stw	r5,24(sp)
  804338:	08060140 	call	806014 <__adddf3>
  80433c:	d9001617 	ldw	r4,88(sp)
  804340:	d9402717 	ldw	r5,156(sp)
  804344:	0025883a 	mov	r18,zero
  804348:	900d883a 	mov	r6,r18
  80434c:	180f883a 	mov	r7,r3
  804350:	1823883a 	mov	r17,r3
  804354:	08060880 	call	806088 <__muldf3>
  804358:	d9001417 	ldw	r4,80(sp)
  80435c:	d9403217 	ldw	r5,200(sp)
  804360:	880f883a 	mov	r7,r17
  804364:	900d883a 	mov	r6,r18
  804368:	d8803515 	stw	r2,212(sp)
  80436c:	d8c03615 	stw	r3,216(sp)
  804370:	08060880 	call	806088 <__muldf3>
  804374:	a80f883a 	mov	r7,r21
  804378:	880b883a 	mov	r5,r17
  80437c:	000d883a 	mov	r6,zero
  804380:	9009883a 	mov	r4,r18
  804384:	1021883a 	mov	r16,r2
  804388:	1823883a 	mov	r17,r3
  80438c:	0805f940 	call	805f94 <__subdf3>
  804390:	d9800717 	ldw	r6,28(sp)
  804394:	b80f883a 	mov	r7,r23
  804398:	180b883a 	mov	r5,r3
  80439c:	1009883a 	mov	r4,r2
  8043a0:	0805f940 	call	805f94 <__subdf3>
  8043a4:	d9000517 	ldw	r4,20(sp)
  8043a8:	d9403417 	ldw	r5,208(sp)
  8043ac:	180f883a 	mov	r7,r3
  8043b0:	100d883a 	mov	r6,r2
  8043b4:	0805f940 	call	805f94 <__subdf3>
  8043b8:	d9000317 	ldw	r4,12(sp)
  8043bc:	d9403017 	ldw	r5,192(sp)
  8043c0:	180f883a 	mov	r7,r3
  8043c4:	100d883a 	mov	r6,r2
  8043c8:	08060880 	call	806088 <__muldf3>
  8043cc:	180f883a 	mov	r7,r3
  8043d0:	880b883a 	mov	r5,r17
  8043d4:	8009883a 	mov	r4,r16
  8043d8:	100d883a 	mov	r6,r2
  8043dc:	08060140 	call	806014 <__adddf3>
  8043e0:	102d883a 	mov	r22,r2
  8043e4:	d9003617 	ldw	r4,216(sp)
  8043e8:	d8803517 	ldw	r2,212(sp)
  8043ec:	d9403617 	ldw	r5,216(sp)
  8043f0:	182f883a 	mov	r23,r3
  8043f4:	b00d883a 	mov	r6,r22
  8043f8:	b80f883a 	mov	r7,r23
  8043fc:	d9000a15 	stw	r4,40(sp)
  804400:	1009883a 	mov	r4,r2
  804404:	054ffbf4 	movhi	r21,16367
  804408:	ad71c244 	addi	r21,r21,-14583
  80440c:	dd800d15 	stw	r22,52(sp)
  804410:	ddc00e15 	stw	r23,56(sp)
  804414:	05380034 	movhi	r20,57344
  804418:	d8800915 	stw	r2,36(sp)
  80441c:	08060140 	call	806014 <__adddf3>
  804420:	180b883a 	mov	r5,r3
  804424:	a00d883a 	mov	r6,r20
  804428:	a80f883a 	mov	r7,r21
  80442c:	9009883a 	mov	r4,r18
  804430:	1823883a 	mov	r17,r3
  804434:	08060880 	call	806088 <__muldf3>
  804438:	020516f4 	movhi	r8,5211
  80443c:	42007d44 	addi	r8,r8,501
  804440:	026f8fb4 	movhi	r9,48702
  804444:	4a4bf804 	addi	r9,r9,12256
  804448:	480f883a 	mov	r7,r9
  80444c:	400d883a 	mov	r6,r8
  804450:	880b883a 	mov	r5,r17
  804454:	9009883a 	mov	r4,r18
  804458:	d8803715 	stw	r2,220(sp)
  80445c:	d8c03815 	stw	r3,224(sp)
  804460:	08060880 	call	806088 <__muldf3>
  804464:	d9800917 	ldw	r6,36(sp)
  804468:	d9c03617 	ldw	r7,216(sp)
  80446c:	880b883a 	mov	r5,r17
  804470:	9009883a 	mov	r4,r18
  804474:	1021883a 	mov	r16,r2
  804478:	1823883a 	mov	r17,r3
  80447c:	0805f940 	call	805f94 <__subdf3>
  804480:	d9000d17 	ldw	r4,52(sp)
  804484:	b80b883a 	mov	r5,r23
  804488:	180f883a 	mov	r7,r3
  80448c:	100d883a 	mov	r6,r2
  804490:	0805f940 	call	805f94 <__subdf3>
  804494:	180b883a 	mov	r5,r3
  804498:	a80f883a 	mov	r7,r21
  80449c:	01b70eb4 	movhi	r6,56378
  8044a0:	3180ff44 	addi	r6,r6,1021
  8044a4:	1009883a 	mov	r4,r2
  8044a8:	08060880 	call	806088 <__muldf3>
  8044ac:	180f883a 	mov	r7,r3
  8044b0:	880b883a 	mov	r5,r17
  8044b4:	8009883a 	mov	r4,r16
  8044b8:	100d883a 	mov	r6,r2
  8044bc:	08060140 	call	806014 <__adddf3>
  8044c0:	d9402c17 	ldw	r5,176(sp)
  8044c4:	010020b4 	movhi	r4,130
  8044c8:	212eef04 	addi	r4,r4,-17476
  8044cc:	2909883a 	add	r4,r5,r4
  8044d0:	22400117 	ldw	r9,4(r4)
  8044d4:	22000017 	ldw	r8,0(r4)
  8044d8:	180b883a 	mov	r5,r3
  8044dc:	480f883a 	mov	r7,r9
  8044e0:	400d883a 	mov	r6,r8
  8044e4:	1009883a 	mov	r4,r2
  8044e8:	08060140 	call	806014 <__adddf3>
  8044ec:	d9000017 	ldw	r4,0(sp)
  8044f0:	182f883a 	mov	r23,r3
  8044f4:	102d883a 	mov	r22,r2
  8044f8:	080694c0 	call	80694c <__floatsidf>
  8044fc:	d9402c17 	ldw	r5,176(sp)
  804500:	010020b4 	movhi	r4,130
  804504:	212ef304 	addi	r4,r4,-17460
  804508:	b00d883a 	mov	r6,r22
  80450c:	2911883a 	add	r8,r5,r4
  804510:	d9003717 	ldw	r4,220(sp)
  804514:	d9403817 	ldw	r5,224(sp)
  804518:	45000017 	ldw	r20,0(r8)
  80451c:	d9002315 	stw	r4,140(sp)
  804520:	d9003817 	ldw	r4,224(sp)
  804524:	45400117 	ldw	r21,4(r8)
  804528:	b80f883a 	mov	r7,r23
  80452c:	d9002415 	stw	r4,144(sp)
  804530:	d9002317 	ldw	r4,140(sp)
  804534:	1021883a 	mov	r16,r2
  804538:	1823883a 	mov	r17,r3
  80453c:	dd802115 	stw	r22,132(sp)
  804540:	ddc02215 	stw	r23,136(sp)
  804544:	08060140 	call	806014 <__adddf3>
  804548:	180b883a 	mov	r5,r3
  80454c:	1009883a 	mov	r4,r2
  804550:	a00d883a 	mov	r6,r20
  804554:	a80f883a 	mov	r7,r21
  804558:	08060140 	call	806014 <__adddf3>
  80455c:	180f883a 	mov	r7,r3
  804560:	8009883a 	mov	r4,r16
  804564:	880b883a 	mov	r5,r17
  804568:	100d883a 	mov	r6,r2
  80456c:	08060140 	call	806014 <__adddf3>
  804570:	180b883a 	mov	r5,r3
  804574:	0009883a 	mov	r4,zero
  804578:	800d883a 	mov	r6,r16
  80457c:	880f883a 	mov	r7,r17
  804580:	d9001b15 	stw	r4,108(sp)
  804584:	d8c01c15 	stw	r3,112(sp)
  804588:	0805f940 	call	805f94 <__subdf3>
  80458c:	180b883a 	mov	r5,r3
  804590:	a80f883a 	mov	r7,r21
  804594:	1009883a 	mov	r4,r2
  804598:	a00d883a 	mov	r6,r20
  80459c:	0805f940 	call	805f94 <__subdf3>
  8045a0:	d9802317 	ldw	r6,140(sp)
  8045a4:	d9c03817 	ldw	r7,224(sp)
  8045a8:	180b883a 	mov	r5,r3
  8045ac:	1009883a 	mov	r4,r2
  8045b0:	0805f940 	call	805f94 <__subdf3>
  8045b4:	d9002117 	ldw	r4,132(sp)
  8045b8:	1011883a 	mov	r8,r2
  8045bc:	1813883a 	mov	r9,r3
  8045c0:	b80b883a 	mov	r5,r23
  8045c4:	480f883a 	mov	r7,r9
  8045c8:	400d883a 	mov	r6,r8
  8045cc:	0805f940 	call	805f94 <__subdf3>
  8045d0:	1823883a 	mov	r17,r3
  8045d4:	d8c02517 	ldw	r3,148(sp)
  8045d8:	1021883a 	mov	r16,r2
  8045dc:	e0bfffc4 	addi	r2,fp,-1
  8045e0:	1884b03a 	or	r2,r3,r2
  8045e4:	1000731e 	bne	r2,zero,8047b4 <__ieee754_pow+0xb88>
  8045e8:	0009883a 	mov	r4,zero
  8045ec:	016ffc34 	movhi	r5,49136
  8045f0:	d9001915 	stw	r4,100(sp)
  8045f4:	d9401a15 	stw	r5,104(sp)
  8045f8:	d9402917 	ldw	r5,164(sp)
  8045fc:	d9002817 	ldw	r4,160(sp)
  804600:	0029883a 	mov	r20,zero
  804604:	a00d883a 	mov	r6,r20
  804608:	280f883a 	mov	r7,r5
  80460c:	2827883a 	mov	r19,r5
  804610:	0805f940 	call	805f94 <__subdf3>
  804614:	d9001b17 	ldw	r4,108(sp)
  804618:	d9401c17 	ldw	r5,112(sp)
  80461c:	180f883a 	mov	r7,r3
  804620:	100d883a 	mov	r6,r2
  804624:	08060880 	call	806088 <__muldf3>
  804628:	d9c02917 	ldw	r7,164(sp)
  80462c:	d9802817 	ldw	r6,160(sp)
  804630:	880b883a 	mov	r5,r17
  804634:	8009883a 	mov	r4,r16
  804638:	1823883a 	mov	r17,r3
  80463c:	1021883a 	mov	r16,r2
  804640:	08060880 	call	806088 <__muldf3>
  804644:	180f883a 	mov	r7,r3
  804648:	880b883a 	mov	r5,r17
  80464c:	8009883a 	mov	r4,r16
  804650:	100d883a 	mov	r6,r2
  804654:	08060140 	call	806014 <__adddf3>
  804658:	d9401c17 	ldw	r5,112(sp)
  80465c:	d9001b17 	ldw	r4,108(sp)
  804660:	a00d883a 	mov	r6,r20
  804664:	980f883a 	mov	r7,r19
  804668:	1029883a 	mov	r20,r2
  80466c:	182b883a 	mov	r21,r3
  804670:	08060880 	call	806088 <__muldf3>
  804674:	1025883a 	mov	r18,r2
  804678:	1827883a 	mov	r19,r3
  80467c:	a009883a 	mov	r4,r20
  804680:	a80b883a 	mov	r5,r21
  804684:	900d883a 	mov	r6,r18
  804688:	980f883a 	mov	r7,r19
  80468c:	dd001d15 	stw	r20,116(sp)
  804690:	dc801f15 	stw	r18,124(sp)
  804694:	dd401e15 	stw	r21,120(sp)
  804698:	dcc02015 	stw	r19,128(sp)
  80469c:	08060140 	call	806014 <__adddf3>
  8046a0:	1823883a 	mov	r17,r3
  8046a4:	01102434 	movhi	r4,16528
  8046a8:	213fffc4 	addi	r4,r4,-1
  8046ac:	1021883a 	mov	r16,r2
  8046b0:	182f883a 	mov	r23,r3
  8046b4:	dc401815 	stw	r17,96(sp)
  8046b8:	100b883a 	mov	r5,r2
  8046bc:	20c02c0e 	bge	r4,r3,804770 <__ieee754_pow+0xb44>
  8046c0:	00afdc34 	movhi	r2,49008
  8046c4:	1885883a 	add	r2,r3,r2
  8046c8:	2884b03a 	or	r2,r5,r2
  8046cc:	1001a626 	beq	r2,zero,804d68 <__ieee754_pow+0x113c>
  8046d0:	04220034 	movhi	r16,34816
  8046d4:	841d6704 	addi	r16,r16,30108
  8046d8:	045f8e34 	movhi	r17,32312
  8046dc:	8c790f04 	addi	r17,r17,-7108
  8046e0:	d9401a17 	ldw	r5,104(sp)
  8046e4:	d9001917 	ldw	r4,100(sp)
  8046e8:	800d883a 	mov	r6,r16
  8046ec:	880f883a 	mov	r7,r17
  8046f0:	08060880 	call	806088 <__muldf3>
  8046f4:	180b883a 	mov	r5,r3
  8046f8:	800d883a 	mov	r6,r16
  8046fc:	880f883a 	mov	r7,r17
  804700:	1009883a 	mov	r4,r2
  804704:	08060880 	call	806088 <__muldf3>
  804708:	003dc306 	br	803e18 <__ieee754_pow+0x1ec>
  80470c:	00b00434 	movhi	r2,49168
  804710:	9085883a 	add	r2,r18,r2
  804714:	e084b03a 	or	r2,fp,r2
  804718:	1000af1e 	bne	r2,zero,8049d8 <__ieee754_pow+0xdac>
  80471c:	480f883a 	mov	r7,r9
  804720:	4009883a 	mov	r4,r8
  804724:	480b883a 	mov	r5,r9
  804728:	400d883a 	mov	r6,r8
  80472c:	003db406 	br	803e00 <__ieee754_pow+0x1d4>
  804730:	00bffc34 	movhi	r2,65520
  804734:	18ff0084 	addi	r3,r3,-1022
  804738:	a0a9883a 	add	r20,r20,r2
  80473c:	d8c00015 	stw	r3,0(sp)
  804740:	0009883a 	mov	r4,zero
  804744:	04000234 	movhi	r16,8
  804748:	003e1406 	br	803f9c <__ieee754_pow+0x370>
  80474c:	a80f883a 	mov	r7,r21
  804750:	a009883a 	mov	r4,r20
  804754:	a80b883a 	mov	r5,r21
  804758:	a00d883a 	mov	r6,r20
  80475c:	08060880 	call	806088 <__muldf3>
  804760:	180b883a 	mov	r5,r3
  804764:	d8802815 	stw	r2,160(sp)
  804768:	d9402915 	stw	r5,164(sp)
  80476c:	003d5606 	br	803cc8 <__ieee754_pow+0x9c>
  804770:	d9001817 	ldw	r4,96(sp)
  804774:	00a00034 	movhi	r2,32768
  804778:	10bfffc4 	addi	r2,r2,-1
  80477c:	00d02474 	movhi	r3,16529
  804780:	18f2ffc4 	addi	r3,r3,-13313
  804784:	20b8703a 	and	fp,r4,r2
  804788:	1f009d0e 	bge	r3,fp,804a00 <__ieee754_pow+0xdd4>
  80478c:	008fdbf4 	movhi	r2,16239
  804790:	108d0004 	addi	r2,r2,13312
  804794:	2085883a 	add	r2,r4,r2
  804798:	1144b03a 	or	r2,r2,r5
  80479c:	1001c626 	beq	r2,zero,804eb8 <__ieee754_pow+0x128c>
  8047a0:	0430be74 	movhi	r16,49913
  8047a4:	843cd644 	addi	r16,r16,-3239
  8047a8:	04406974 	movhi	r17,421
  8047ac:	8c5b87c4 	addi	r17,r17,28191
  8047b0:	003fcb06 	br	8046e0 <__ieee754_pow+0xab4>
  8047b4:	0005883a 	mov	r2,zero
  8047b8:	00cffc34 	movhi	r3,16368
  8047bc:	d8801915 	stw	r2,100(sp)
  8047c0:	d8c01a15 	stw	r3,104(sp)
  8047c4:	003f8c06 	br	8045f8 <__ieee754_pow+0x9cc>
  8047c8:	0005883a 	mov	r2,zero
  8047cc:	00cffc34 	movhi	r3,16368
  8047d0:	180b883a 	mov	r5,r3
  8047d4:	580f883a 	mov	r7,r11
  8047d8:	1009883a 	mov	r4,r2
  8047dc:	500d883a 	mov	r6,r10
  8047e0:	080644c0 	call	80644c <__divdf3>
  8047e4:	1011883a 	mov	r8,r2
  8047e8:	1813883a 	mov	r9,r3
  8047ec:	003d9506 	br	803e44 <__ieee754_pow+0x218>
  8047f0:	008ffc34 	movhi	r2,16368
  8047f4:	10bfff84 	addi	r2,r2,-2
  8047f8:	14bdbb0e 	bge	r2,r18,803ee8 <__ieee754_pow+0x2bc>
  8047fc:	008ffc34 	movhi	r2,16368
  804800:	14bdae16 	blt	r2,r18,803ebc <__ieee754_pow+0x290>
  804804:	580b883a 	mov	r5,r11
  804808:	5009883a 	mov	r4,r10
  80480c:	000d883a 	mov	r6,zero
  804810:	100f883a 	mov	r7,r2
  804814:	0805f940 	call	805f94 <__subdf3>
  804818:	1021883a 	mov	r16,r2
  80481c:	1823883a 	mov	r17,r3
  804820:	00980034 	movhi	r2,24576
  804824:	00cffdf4 	movhi	r3,16375
  804828:	18c551c4 	addi	r3,r3,5447
  80482c:	8009883a 	mov	r4,r16
  804830:	880b883a 	mov	r5,r17
  804834:	180f883a 	mov	r7,r3
  804838:	100d883a 	mov	r6,r2
  80483c:	08060880 	call	806088 <__muldf3>
  804840:	023e17b4 	movhi	r8,63582
  804844:	4237d104 	addi	r8,r8,-8380
  804848:	024f9574 	movhi	r9,15957
  80484c:	4a6b82c4 	addi	r9,r9,-20981
  804850:	480f883a 	mov	r7,r9
  804854:	400d883a 	mov	r6,r8
  804858:	8009883a 	mov	r4,r16
  80485c:	880b883a 	mov	r5,r17
  804860:	102d883a 	mov	r22,r2
  804864:	182f883a 	mov	r23,r3
  804868:	08060880 	call	806088 <__muldf3>
  80486c:	8009883a 	mov	r4,r16
  804870:	880b883a 	mov	r5,r17
  804874:	800d883a 	mov	r6,r16
  804878:	880f883a 	mov	r7,r17
  80487c:	d8802a15 	stw	r2,168(sp)
  804880:	d8c02b15 	stw	r3,172(sp)
  804884:	08060880 	call	806088 <__muldf3>
  804888:	0011883a 	mov	r8,zero
  80488c:	026ff434 	movhi	r9,49104
  804890:	480f883a 	mov	r7,r9
  804894:	8009883a 	mov	r4,r16
  804898:	880b883a 	mov	r5,r17
  80489c:	400d883a 	mov	r6,r8
  8048a0:	1029883a 	mov	r20,r2
  8048a4:	182b883a 	mov	r21,r3
  8048a8:	08060880 	call	806088 <__muldf3>
  8048ac:	02155574 	movhi	r8,21845
  8048b0:	42155544 	addi	r8,r8,21845
  8048b4:	024ff574 	movhi	r9,16341
  8048b8:	4a555544 	addi	r9,r9,21845
  8048bc:	480f883a 	mov	r7,r9
  8048c0:	400d883a 	mov	r6,r8
  8048c4:	180b883a 	mov	r5,r3
  8048c8:	1009883a 	mov	r4,r2
  8048cc:	08060140 	call	806014 <__adddf3>
  8048d0:	180f883a 	mov	r7,r3
  8048d4:	8009883a 	mov	r4,r16
  8048d8:	880b883a 	mov	r5,r17
  8048dc:	100d883a 	mov	r6,r2
  8048e0:	08060880 	call	806088 <__muldf3>
  8048e4:	0011883a 	mov	r8,zero
  8048e8:	024ff834 	movhi	r9,16352
  8048ec:	480b883a 	mov	r5,r9
  8048f0:	4009883a 	mov	r4,r8
  8048f4:	180f883a 	mov	r7,r3
  8048f8:	100d883a 	mov	r6,r2
  8048fc:	0805f940 	call	805f94 <__subdf3>
  804900:	180f883a 	mov	r7,r3
  804904:	a80b883a 	mov	r5,r21
  804908:	a009883a 	mov	r4,r20
  80490c:	100d883a 	mov	r6,r2
  804910:	08060880 	call	806088 <__muldf3>
  804914:	02194b34 	movhi	r8,25900
  804918:	4220bf84 	addi	r8,r8,-32002
  80491c:	026ffdf4 	movhi	r9,49143
  804920:	4a4551c4 	addi	r9,r9,5447
  804924:	480f883a 	mov	r7,r9
  804928:	400d883a 	mov	r6,r8
  80492c:	180b883a 	mov	r5,r3
  804930:	1009883a 	mov	r4,r2
  804934:	08060880 	call	806088 <__muldf3>
  804938:	d9402b17 	ldw	r5,172(sp)
  80493c:	d9002a17 	ldw	r4,168(sp)
  804940:	180f883a 	mov	r7,r3
  804944:	100d883a 	mov	r6,r2
  804948:	08060140 	call	806014 <__adddf3>
  80494c:	100d883a 	mov	r6,r2
  804950:	b009883a 	mov	r4,r22
  804954:	b80b883a 	mov	r5,r23
  804958:	180f883a 	mov	r7,r3
  80495c:	1021883a 	mov	r16,r2
  804960:	1823883a 	mov	r17,r3
  804964:	08060140 	call	806014 <__adddf3>
  804968:	180b883a 	mov	r5,r3
  80496c:	0009883a 	mov	r4,zero
  804970:	b00d883a 	mov	r6,r22
  804974:	b80f883a 	mov	r7,r23
  804978:	d9001b15 	stw	r4,108(sp)
  80497c:	d8c01c15 	stw	r3,112(sp)
  804980:	0805f940 	call	805f94 <__subdf3>
  804984:	1011883a 	mov	r8,r2
  804988:	1813883a 	mov	r9,r3
  80498c:	8009883a 	mov	r4,r16
  804990:	880b883a 	mov	r5,r17
  804994:	003f0b06 	br	8045c4 <__ieee754_pow+0x998>
  804998:	0005883a 	mov	r2,zero
  80499c:	00d0d034 	movhi	r3,17216
  8049a0:	580b883a 	mov	r5,r11
  8049a4:	5009883a 	mov	r4,r10
  8049a8:	180f883a 	mov	r7,r3
  8049ac:	100d883a 	mov	r6,r2
  8049b0:	08060880 	call	806088 <__muldf3>
  8049b4:	1015883a 	mov	r10,r2
  8049b8:	1825883a 	mov	r18,r3
  8049bc:	017ff2c4 	movi	r5,-53
  8049c0:	003d6606 	br	803f5c <__ieee754_pow+0x330>
  8049c4:	b03d300e 	bge	r22,zero,803e88 <__ieee754_pow+0x25c>
  8049c8:	d9402917 	ldw	r5,164(sp)
  8049cc:	28e0003c 	xorhi	r3,r5,32768
  8049d0:	d8c02915 	stw	r3,164(sp)
  8049d4:	003cbc06 	br	803cc8 <__ieee754_pow+0x9c>
  8049d8:	00800044 	movi	r2,1
  8049dc:	e0bd1a1e 	bne	fp,r2,803e48 <__ieee754_pow+0x21c>
  8049e0:	48e0003c 	xorhi	r3,r9,32768
  8049e4:	da002815 	stw	r8,160(sp)
  8049e8:	d8c02915 	stw	r3,164(sp)
  8049ec:	003cb606 	br	803cc8 <__ieee754_pow+0x9c>
  8049f0:	d9001817 	ldw	r4,96(sp)
  8049f4:	00a00034 	movhi	r2,32768
  8049f8:	10bfffc4 	addi	r2,r2,-1
  8049fc:	20b8703a 	and	fp,r4,r2
  804a00:	008ff834 	movhi	r2,16352
  804a04:	1700fc16 	blt	r2,fp,804df8 <__ieee754_pow+0x11cc>
  804a08:	0039883a 	mov	fp,zero
  804a0c:	d8001315 	stw	zero,76(sp)
  804a10:	0025883a 	mov	r18,zero
  804a14:	0005883a 	mov	r2,zero
  804a18:	00cff9b4 	movhi	r3,16358
  804a1c:	18cb90c4 	addi	r3,r3,11843
  804a20:	9009883a 	mov	r4,r18
  804a24:	b80b883a 	mov	r5,r23
  804a28:	180f883a 	mov	r7,r3
  804a2c:	100d883a 	mov	r6,r2
  804a30:	08060880 	call	806088 <__muldf3>
  804a34:	d9c02017 	ldw	r7,128(sp)
  804a38:	d9801f17 	ldw	r6,124(sp)
  804a3c:	9009883a 	mov	r4,r18
  804a40:	b80b883a 	mov	r5,r23
  804a44:	b823883a 	mov	r17,r23
  804a48:	102d883a 	mov	r22,r2
  804a4c:	182f883a 	mov	r23,r3
  804a50:	0805f940 	call	805f94 <__subdf3>
  804a54:	d9401e17 	ldw	r5,120(sp)
  804a58:	d9001d17 	ldw	r4,116(sp)
  804a5c:	180f883a 	mov	r7,r3
  804a60:	100d883a 	mov	r6,r2
  804a64:	0805f940 	call	805f94 <__subdf3>
  804a68:	023fbeb4 	movhi	r8,65274
  804a6c:	420e7bc4 	addi	r8,r8,14831
  804a70:	024ff9b4 	movhi	r9,16358
  804a74:	4a4b9084 	addi	r9,r9,11842
  804a78:	480f883a 	mov	r7,r9
  804a7c:	400d883a 	mov	r6,r8
  804a80:	180b883a 	mov	r5,r3
  804a84:	1009883a 	mov	r4,r2
  804a88:	08060880 	call	806088 <__muldf3>
  804a8c:	02032a34 	movhi	r8,3240
  804a90:	421b0e44 	addi	r8,r8,27705
  804a94:	026f8834 	movhi	r9,48672
  804a98:	4a571844 	addi	r9,r9,23649
  804a9c:	480f883a 	mov	r7,r9
  804aa0:	400d883a 	mov	r6,r8
  804aa4:	9009883a 	mov	r4,r18
  804aa8:	880b883a 	mov	r5,r17
  804aac:	1021883a 	mov	r16,r2
  804ab0:	1823883a 	mov	r17,r3
  804ab4:	08060880 	call	806088 <__muldf3>
  804ab8:	180f883a 	mov	r7,r3
  804abc:	880b883a 	mov	r5,r17
  804ac0:	8009883a 	mov	r4,r16
  804ac4:	100d883a 	mov	r6,r2
  804ac8:	08060140 	call	806014 <__adddf3>
  804acc:	100d883a 	mov	r6,r2
  804ad0:	b009883a 	mov	r4,r22
  804ad4:	b80b883a 	mov	r5,r23
  804ad8:	180f883a 	mov	r7,r3
  804adc:	1021883a 	mov	r16,r2
  804ae0:	1823883a 	mov	r17,r3
  804ae4:	08060140 	call	806014 <__adddf3>
  804ae8:	1009883a 	mov	r4,r2
  804aec:	180b883a 	mov	r5,r3
  804af0:	b00d883a 	mov	r6,r22
  804af4:	b80f883a 	mov	r7,r23
  804af8:	d8803915 	stw	r2,228(sp)
  804afc:	d8c03a15 	stw	r3,232(sp)
  804b00:	d8801115 	stw	r2,68(sp)
  804b04:	d8c01215 	stw	r3,72(sp)
  804b08:	0805f940 	call	805f94 <__subdf3>
  804b0c:	180f883a 	mov	r7,r3
  804b10:	8009883a 	mov	r4,r16
  804b14:	880b883a 	mov	r5,r17
  804b18:	100d883a 	mov	r6,r2
  804b1c:	0805f940 	call	805f94 <__subdf3>
  804b20:	d9001117 	ldw	r4,68(sp)
  804b24:	d9403a17 	ldw	r5,232(sp)
  804b28:	1029883a 	mov	r20,r2
  804b2c:	200d883a 	mov	r6,r4
  804b30:	280f883a 	mov	r7,r5
  804b34:	182b883a 	mov	r21,r3
  804b38:	08060880 	call	806088 <__muldf3>
  804b3c:	1021883a 	mov	r16,r2
  804b40:	1823883a 	mov	r17,r3
  804b44:	009caff4 	movhi	r2,29375
  804b48:	10a93404 	addi	r2,r2,-23344
  804b4c:	00cf99b4 	movhi	r3,15974
  804b50:	18cdda44 	addi	r3,r3,14185
  804b54:	8009883a 	mov	r4,r16
  804b58:	880b883a 	mov	r5,r17
  804b5c:	180f883a 	mov	r7,r3
  804b60:	100d883a 	mov	r6,r2
  804b64:	08060880 	call	806088 <__muldf3>
  804b68:	023174b4 	movhi	r8,50642
  804b6c:	421afc44 	addi	r8,r8,27633
  804b70:	024faf34 	movhi	r9,16060
  804b74:	4a6f5044 	addi	r9,r9,-17087
  804b78:	480f883a 	mov	r7,r9
  804b7c:	400d883a 	mov	r6,r8
  804b80:	180b883a 	mov	r5,r3
  804b84:	1009883a 	mov	r4,r2
  804b88:	0805f940 	call	805f94 <__subdf3>
  804b8c:	180f883a 	mov	r7,r3
  804b90:	8009883a 	mov	r4,r16
  804b94:	880b883a 	mov	r5,r17
  804b98:	100d883a 	mov	r6,r2
  804b9c:	08060880 	call	806088 <__muldf3>
  804ba0:	022bc9b4 	movhi	r8,44838
  804ba4:	42378b04 	addi	r8,r8,-8660
  804ba8:	024fc474 	movhi	r9,16145
  804bac:	4a559a84 	addi	r9,r9,22122
  804bb0:	480f883a 	mov	r7,r9
  804bb4:	400d883a 	mov	r6,r8
  804bb8:	180b883a 	mov	r5,r3
  804bbc:	1009883a 	mov	r4,r2
  804bc0:	08060140 	call	806014 <__adddf3>
  804bc4:	180f883a 	mov	r7,r3
  804bc8:	8009883a 	mov	r4,r16
  804bcc:	880b883a 	mov	r5,r17
  804bd0:	100d883a 	mov	r6,r2
  804bd4:	08060880 	call	806088 <__muldf3>
  804bd8:	0205aff4 	movhi	r8,5823
  804bdc:	422f64c4 	addi	r8,r8,-17005
  804be0:	024fd9f4 	movhi	r9,16231
  804be4:	4a705b04 	addi	r9,r9,-16020
  804be8:	480f883a 	mov	r7,r9
  804bec:	400d883a 	mov	r6,r8
  804bf0:	180b883a 	mov	r5,r3
  804bf4:	1009883a 	mov	r4,r2
  804bf8:	0805f940 	call	805f94 <__subdf3>
  804bfc:	180f883a 	mov	r7,r3
  804c00:	8009883a 	mov	r4,r16
  804c04:	880b883a 	mov	r5,r17
  804c08:	100d883a 	mov	r6,r2
  804c0c:	08060880 	call	806088 <__muldf3>
  804c10:	02155574 	movhi	r8,21845
  804c14:	42154f84 	addi	r8,r8,21822
  804c18:	024ff174 	movhi	r9,16325
  804c1c:	4a555544 	addi	r9,r9,21845
  804c20:	480f883a 	mov	r7,r9
  804c24:	400d883a 	mov	r6,r8
  804c28:	180b883a 	mov	r5,r3
  804c2c:	1009883a 	mov	r4,r2
  804c30:	08060140 	call	806014 <__adddf3>
  804c34:	180f883a 	mov	r7,r3
  804c38:	8009883a 	mov	r4,r16
  804c3c:	880b883a 	mov	r5,r17
  804c40:	100d883a 	mov	r6,r2
  804c44:	08060880 	call	806088 <__muldf3>
  804c48:	d9001117 	ldw	r4,68(sp)
  804c4c:	d9403a17 	ldw	r5,232(sp)
  804c50:	180f883a 	mov	r7,r3
  804c54:	100d883a 	mov	r6,r2
  804c58:	0805f940 	call	805f94 <__subdf3>
  804c5c:	d9001117 	ldw	r4,68(sp)
  804c60:	d9403a17 	ldw	r5,232(sp)
  804c64:	100d883a 	mov	r6,r2
  804c68:	180f883a 	mov	r7,r3
  804c6c:	1021883a 	mov	r16,r2
  804c70:	1823883a 	mov	r17,r3
  804c74:	08060880 	call	806088 <__muldf3>
  804c78:	0011883a 	mov	r8,zero
  804c7c:	02500034 	movhi	r9,16384
  804c80:	480f883a 	mov	r7,r9
  804c84:	400d883a 	mov	r6,r8
  804c88:	8009883a 	mov	r4,r16
  804c8c:	880b883a 	mov	r5,r17
  804c90:	1021883a 	mov	r16,r2
  804c94:	1823883a 	mov	r17,r3
  804c98:	0805f940 	call	805f94 <__subdf3>
  804c9c:	180f883a 	mov	r7,r3
  804ca0:	880b883a 	mov	r5,r17
  804ca4:	8009883a 	mov	r4,r16
  804ca8:	100d883a 	mov	r6,r2
  804cac:	080644c0 	call	80644c <__divdf3>
  804cb0:	d9001117 	ldw	r4,68(sp)
  804cb4:	d9403a17 	ldw	r5,232(sp)
  804cb8:	a00d883a 	mov	r6,r20
  804cbc:	a80f883a 	mov	r7,r21
  804cc0:	1025883a 	mov	r18,r2
  804cc4:	1827883a 	mov	r19,r3
  804cc8:	08060880 	call	806088 <__muldf3>
  804ccc:	180f883a 	mov	r7,r3
  804cd0:	a009883a 	mov	r4,r20
  804cd4:	a80b883a 	mov	r5,r21
  804cd8:	100d883a 	mov	r6,r2
  804cdc:	08060140 	call	806014 <__adddf3>
  804ce0:	180f883a 	mov	r7,r3
  804ce4:	980b883a 	mov	r5,r19
  804ce8:	9009883a 	mov	r4,r18
  804cec:	100d883a 	mov	r6,r2
  804cf0:	0805f940 	call	805f94 <__subdf3>
  804cf4:	d9801117 	ldw	r6,68(sp)
  804cf8:	d9c03a17 	ldw	r7,232(sp)
  804cfc:	180b883a 	mov	r5,r3
  804d00:	1009883a 	mov	r4,r2
  804d04:	0805f940 	call	805f94 <__subdf3>
  804d08:	0011883a 	mov	r8,zero
  804d0c:	024ffc34 	movhi	r9,16368
  804d10:	480b883a 	mov	r5,r9
  804d14:	180f883a 	mov	r7,r3
  804d18:	4009883a 	mov	r4,r8
  804d1c:	100d883a 	mov	r6,r2
  804d20:	0805f940 	call	805f94 <__subdf3>
  804d24:	100b883a 	mov	r5,r2
  804d28:	d8801317 	ldw	r2,76(sp)
  804d2c:	10d5883a 	add	r10,r2,r3
  804d30:	5005d53a 	srai	r2,r10,20
  804d34:	0080720e 	bge	zero,r2,804f00 <__ieee754_pow+0x12d4>
  804d38:	2811883a 	mov	r8,r5
  804d3c:	5013883a 	mov	r9,r10
  804d40:	d9c01a17 	ldw	r7,104(sp)
  804d44:	d9801917 	ldw	r6,100(sp)
  804d48:	480b883a 	mov	r5,r9
  804d4c:	4009883a 	mov	r4,r8
  804d50:	003e8206 	br	80475c <__ieee754_pow+0xb30>
  804d54:	0009883a 	mov	r4,zero
  804d58:	800b883a 	mov	r5,r16
  804d5c:	a80f883a 	mov	r7,r21
  804d60:	a00d883a 	mov	r6,r20
  804d64:	003c2b06 	br	803e14 <__ieee754_pow+0x1e8>
  804d68:	d9001d17 	ldw	r4,116(sp)
  804d6c:	00994b34 	movhi	r2,25900
  804d70:	10a0bf84 	addi	r2,r2,-32002
  804d74:	00cf25f4 	movhi	r3,15511
  804d78:	18c551c4 	addi	r3,r3,5447
  804d7c:	a80b883a 	mov	r5,r21
  804d80:	180f883a 	mov	r7,r3
  804d84:	100d883a 	mov	r6,r2
  804d88:	08060140 	call	806014 <__adddf3>
  804d8c:	d9801f17 	ldw	r6,124(sp)
  804d90:	880b883a 	mov	r5,r17
  804d94:	8009883a 	mov	r4,r16
  804d98:	980f883a 	mov	r7,r19
  804d9c:	1021883a 	mov	r16,r2
  804da0:	1823883a 	mov	r17,r3
  804da4:	0805f940 	call	805f94 <__subdf3>
  804da8:	180f883a 	mov	r7,r3
  804dac:	880b883a 	mov	r5,r17
  804db0:	8009883a 	mov	r4,r16
  804db4:	100d883a 	mov	r6,r2
  804db8:	08067b40 	call	8067b4 <__gtdf2>
  804dbc:	00bf0c0e 	bge	zero,r2,8049f0 <__ieee754_pow+0xdc4>
  804dc0:	04220034 	movhi	r16,34816
  804dc4:	841d6704 	addi	r16,r16,30108
  804dc8:	045f8e34 	movhi	r17,32312
  804dcc:	8c790f04 	addi	r17,r17,-7108
  804dd0:	d9401a17 	ldw	r5,104(sp)
  804dd4:	d9001917 	ldw	r4,100(sp)
  804dd8:	800d883a 	mov	r6,r16
  804ddc:	880f883a 	mov	r7,r17
  804de0:	08060880 	call	806088 <__muldf3>
  804de4:	180b883a 	mov	r5,r3
  804de8:	800d883a 	mov	r6,r16
  804dec:	880f883a 	mov	r7,r17
  804df0:	1009883a 	mov	r4,r2
  804df4:	003e5906 	br	80475c <__ieee754_pow+0xb30>
  804df8:	e005d53a 	srai	r2,fp,20
  804dfc:	01800434 	movhi	r6,16
  804e00:	d9401817 	ldw	r5,96(sp)
  804e04:	10bf0084 	addi	r2,r2,-1022
  804e08:	308dd83a 	sra	r6,r6,r2
  804e0c:	02000434 	movhi	r8,16
  804e10:	423fffc4 	addi	r8,r8,-1
  804e14:	0005883a 	mov	r2,zero
  804e18:	298d883a 	add	r6,r5,r6
  804e1c:	318b883a 	add	r5,r6,r6
  804e20:	320e703a 	and	r7,r6,r8
  804e24:	1013883a 	mov	r9,r2
  804e28:	280ad57a 	srli	r5,r5,21
  804e2c:	d8801817 	ldw	r2,96(sp)
  804e30:	01000504 	movi	r4,20
  804e34:	297f0044 	addi	r5,r5,-1023
  804e38:	4151d83a 	sra	r8,r8,r5
  804e3c:	39c00434 	orhi	r7,r7,16
  804e40:	2149c83a 	sub	r4,r4,r5
  804e44:	0210303a 	nor	r8,zero,r8
  804e48:	3939d83a 	sra	fp,r7,r4
  804e4c:	320e703a 	and	r7,r6,r8
  804e50:	10002916 	blt	r2,zero,804ef8 <__ieee754_pow+0x12cc>
  804e54:	d9402017 	ldw	r5,128(sp)
  804e58:	d9001f17 	ldw	r4,124(sp)
  804e5c:	480d883a 	mov	r6,r9
  804e60:	0805f940 	call	805f94 <__subdf3>
  804e64:	180b883a 	mov	r5,r3
  804e68:	d9402015 	stw	r5,128(sp)
  804e6c:	280f883a 	mov	r7,r5
  804e70:	d9001d17 	ldw	r4,116(sp)
  804e74:	d9401e17 	ldw	r5,120(sp)
  804e78:	1007883a 	mov	r3,r2
  804e7c:	180d883a 	mov	r6,r3
  804e80:	d8801f15 	stw	r2,124(sp)
  804e84:	08060140 	call	806014 <__adddf3>
  804e88:	180b883a 	mov	r5,r3
  804e8c:	e006953a 	slli	r3,fp,20
  804e90:	282f883a 	mov	r23,r5
  804e94:	d8c01315 	stw	r3,76(sp)
  804e98:	003edd06 	br	804a10 <__ieee754_pow+0xde4>
  804e9c:	383bc81e 	bne	r7,zero,803dc0 <__ieee754_pow+0x194>
  804ea0:	28c5c83a 	sub	r2,r5,r3
  804ea4:	8087d83a 	sra	r3,r16,r2
  804ea8:	1884983a 	sll	r2,r3,r2
  804eac:	80801b26 	beq	r16,r2,804f1c <__ieee754_pow+0x12f0>
  804eb0:	0039883a 	mov	fp,zero
  804eb4:	003b9d06 	br	803d2c <__ieee754_pow+0x100>
  804eb8:	d9801f17 	ldw	r6,124(sp)
  804ebc:	8009883a 	mov	r4,r16
  804ec0:	880b883a 	mov	r5,r17
  804ec4:	980f883a 	mov	r7,r19
  804ec8:	0805f940 	call	805f94 <__subdf3>
  804ecc:	d9001d17 	ldw	r4,116(sp)
  804ed0:	a80b883a 	mov	r5,r21
  804ed4:	180f883a 	mov	r7,r3
  804ed8:	100d883a 	mov	r6,r2
  804edc:	08068c40 	call	8068c4 <__ledf2>
  804ee0:	00bfc516 	blt	zero,r2,804df8 <__ieee754_pow+0x11cc>
  804ee4:	0430be74 	movhi	r16,49913
  804ee8:	843cd644 	addi	r16,r16,-3239
  804eec:	04406974 	movhi	r17,421
  804ef0:	8c5b87c4 	addi	r17,r17,28191
  804ef4:	003fb606 	br	804dd0 <__ieee754_pow+0x11a4>
  804ef8:	0739c83a 	sub	fp,zero,fp
  804efc:	003fd506 	br	804e54 <__ieee754_pow+0x1228>
  804f00:	2809883a 	mov	r4,r5
  804f04:	e00d883a 	mov	r6,fp
  804f08:	180b883a 	mov	r5,r3
  804f0c:	08054800 	call	805480 <scalbn>
  804f10:	1011883a 	mov	r8,r2
  804f14:	1813883a 	mov	r9,r3
  804f18:	003f8906 	br	804d40 <__ieee754_pow+0x1114>
  804f1c:	18c0004c 	andi	r3,r3,1
  804f20:	00800084 	movi	r2,2
  804f24:	10f9c83a 	sub	fp,r2,r3
  804f28:	003b8006 	br	803d2c <__ieee754_pow+0x100>

00804f2c <__ieee754_sqrt>:
  804f2c:	defffd04 	addi	sp,sp,-12
  804f30:	dc000015 	stw	r16,0(sp)
  804f34:	009ffc34 	movhi	r2,32752
  804f38:	2021883a 	mov	r16,r4
  804f3c:	291ffc2c 	andhi	r4,r5,32752
  804f40:	dc400115 	stw	r17,4(sp)
  804f44:	dfc00215 	stw	ra,8(sp)
  804f48:	2823883a 	mov	r17,r5
  804f4c:	280f883a 	mov	r7,r5
  804f50:	2807883a 	mov	r3,r5
  804f54:	8011883a 	mov	r8,r16
  804f58:	20807d26 	beq	r4,r2,805150 <__ieee754_sqrt+0x224>
  804f5c:	01408d0e 	bge	zero,r5,805194 <__ieee754_sqrt+0x268>
  804f60:	380dd53a 	srai	r6,r7,20
  804f64:	3000131e 	bne	r6,zero,804fb4 <__ieee754_sqrt+0x88>
  804f68:	1800041e 	bne	r3,zero,804f7c <__ieee754_sqrt+0x50>
  804f6c:	400ed2fa 	srli	r7,r8,11
  804f70:	31bffac4 	addi	r6,r6,-21
  804f74:	4010957a 	slli	r8,r8,21
  804f78:	383ffc26 	beq	r7,zero,804f6c <__ieee754_sqrt+0x40>
  804f7c:	3880042c 	andhi	r2,r7,16
  804f80:	1000991e 	bne	r2,zero,8051e8 <__ieee754_sqrt+0x2bc>
  804f84:	0009883a 	mov	r4,zero
  804f88:	39cf883a 	add	r7,r7,r7
  804f8c:	3880042c 	andhi	r2,r7,16
  804f90:	21000044 	addi	r4,r4,1
  804f94:	103ffc26 	beq	r2,zero,804f88 <__ieee754_sqrt+0x5c>
  804f98:	00800804 	movi	r2,32
  804f9c:	1105c83a 	sub	r2,r2,r4
  804fa0:	4086d83a 	srl	r3,r8,r2
  804fa4:	4110983a 	sll	r8,r8,r4
  804fa8:	3105c83a 	sub	r2,r6,r4
  804fac:	38ceb03a 	or	r7,r7,r3
  804fb0:	11800044 	addi	r6,r2,1
  804fb4:	31bf0044 	addi	r6,r6,-1023
  804fb8:	30c0004c 	andi	r3,r6,1
  804fbc:	00800434 	movhi	r2,16
  804fc0:	10bfffc4 	addi	r2,r2,-1
  804fc4:	3884703a 	and	r2,r7,r2
  804fc8:	1807003a 	cmpeq	r3,r3,zero
  804fcc:	11000434 	orhi	r4,r2,16
  804fd0:	18005426 	beq	r3,zero,805124 <__ieee754_sqrt+0x1f8>
  804fd4:	4004d7fa 	srli	r2,r8,31
  804fd8:	4207883a 	add	r3,r8,r8
  804fdc:	02800834 	movhi	r10,32
  804fe0:	1105883a 	add	r2,r2,r4
  804fe4:	2089883a 	add	r4,r4,r2
  804fe8:	0011883a 	mov	r8,zero
  804fec:	000b883a 	mov	r5,zero
  804ff0:	0013883a 	mov	r9,zero
  804ff4:	02c00584 	movi	r11,22
  804ff8:	520f883a 	add	r7,r10,r8
  804ffc:	1804d7fa 	srli	r2,r3,31
  805000:	4a400044 	addi	r9,r9,1
  805004:	18c7883a 	add	r3,r3,r3
  805008:	21c00316 	blt	r4,r7,805018 <__ieee754_sqrt+0xec>
  80500c:	21c9c83a 	sub	r4,r4,r7
  805010:	2a8b883a 	add	r5,r5,r10
  805014:	51d1883a 	add	r8,r10,r7
  805018:	1105883a 	add	r2,r2,r4
  80501c:	5014d07a 	srli	r10,r10,1
  805020:	2089883a 	add	r4,r4,r2
  805024:	4afff41e 	bne	r9,r11,804ff8 <__ieee754_sqrt+0xcc>
  805028:	02600034 	movhi	r9,32768
  80502c:	0017883a 	mov	r11,zero
  805030:	0019883a 	mov	r12,zero
  805034:	0015883a 	mov	r10,zero
  805038:	4821883a 	mov	r16,r9
  80503c:	03c00804 	movi	r15,32
  805040:	00000806 	br	805064 <__ieee754_sqrt+0x138>
  805044:	22003426 	beq	r4,r8,805118 <__ieee754_sqrt+0x1ec>
  805048:	1804d7fa 	srli	r2,r3,31
  80504c:	52800044 	addi	r10,r10,1
  805050:	18c7883a 	add	r3,r3,r3
  805054:	1105883a 	add	r2,r2,r4
  805058:	2089883a 	add	r4,r4,r2
  80505c:	4812d07a 	srli	r9,r9,1
  805060:	53c01326 	beq	r10,r15,8050b0 <__ieee754_sqrt+0x184>
  805064:	4acf883a 	add	r7,r9,r11
  805068:	413ff60e 	bge	r8,r4,805044 <__ieee754_sqrt+0x118>
  80506c:	38a0002c 	andhi	r2,r7,32768
  805070:	3a57883a 	add	r11,r7,r9
  805074:	14002426 	beq	r2,r16,805108 <__ieee754_sqrt+0x1dc>
  805078:	4005883a 	mov	r2,r8
  80507c:	2209c83a 	sub	r4,r4,r8
  805080:	19c0012e 	bgeu	r3,r7,805088 <__ieee754_sqrt+0x15c>
  805084:	213fffc4 	addi	r4,r4,-1
  805088:	19c7c83a 	sub	r3,r3,r7
  80508c:	1011883a 	mov	r8,r2
  805090:	1804d7fa 	srli	r2,r3,31
  805094:	52800044 	addi	r10,r10,1
  805098:	6259883a 	add	r12,r12,r9
  80509c:	1105883a 	add	r2,r2,r4
  8050a0:	18c7883a 	add	r3,r3,r3
  8050a4:	2089883a 	add	r4,r4,r2
  8050a8:	4812d07a 	srli	r9,r9,1
  8050ac:	53ffed1e 	bne	r10,r15,805064 <__ieee754_sqrt+0x138>
  8050b0:	20c4b03a 	or	r2,r4,r3
  8050b4:	1000201e 	bne	r2,zero,805138 <__ieee754_sqrt+0x20c>
  8050b8:	600ed07a 	srli	r7,r12,1
  8050bc:	2880004c 	andi	r2,r5,1
  8050c0:	1005003a 	cmpeq	r2,r2,zero
  8050c4:	1000011e 	bne	r2,zero,8050cc <__ieee754_sqrt+0x1a0>
  8050c8:	39e00034 	orhi	r7,r7,32768
  8050cc:	300dd07a 	srai	r6,r6,1
  8050d0:	280bd07a 	srai	r5,r5,1
  8050d4:	010ff834 	movhi	r4,16352
  8050d8:	300c953a 	slli	r6,r6,20
  8050dc:	290b883a 	add	r5,r5,r4
  8050e0:	3821883a 	mov	r16,r7
  8050e4:	299d883a 	add	r14,r5,r6
  8050e8:	7023883a 	mov	r17,r14
  8050ec:	8005883a 	mov	r2,r16
  8050f0:	8807883a 	mov	r3,r17
  8050f4:	dfc00217 	ldw	ra,8(sp)
  8050f8:	dc400117 	ldw	r17,4(sp)
  8050fc:	dc000017 	ldw	r16,0(sp)
  805100:	dec00304 	addi	sp,sp,12
  805104:	f800283a 	ret
  805108:	5884703a 	and	r2,r11,r2
  80510c:	103fda1e 	bne	r2,zero,805078 <__ieee754_sqrt+0x14c>
  805110:	40800044 	addi	r2,r8,1
  805114:	003fd906 	br	80507c <__ieee754_sqrt+0x150>
  805118:	19ffd42e 	bgeu	r3,r7,80506c <__ieee754_sqrt+0x140>
  80511c:	2011883a 	mov	r8,r4
  805120:	003fc906 	br	805048 <__ieee754_sqrt+0x11c>
  805124:	4004d7fa 	srli	r2,r8,31
  805128:	4211883a 	add	r8,r8,r8
  80512c:	1105883a 	add	r2,r2,r4
  805130:	2089883a 	add	r4,r4,r2
  805134:	003fa706 	br	804fd4 <__ieee754_sqrt+0xa8>
  805138:	00bfffc4 	movi	r2,-1
  80513c:	60802726 	beq	r12,r2,8051dc <__ieee754_sqrt+0x2b0>
  805140:	6080004c 	andi	r2,r12,1
  805144:	6085883a 	add	r2,r12,r2
  805148:	100ed07a 	srli	r7,r2,1
  80514c:	003fdb06 	br	8050bc <__ieee754_sqrt+0x190>
  805150:	8009883a 	mov	r4,r16
  805154:	800d883a 	mov	r6,r16
  805158:	08060880 	call	806088 <__muldf3>
  80515c:	180f883a 	mov	r7,r3
  805160:	880b883a 	mov	r5,r17
  805164:	8009883a 	mov	r4,r16
  805168:	100d883a 	mov	r6,r2
  80516c:	08060140 	call	806014 <__adddf3>
  805170:	1021883a 	mov	r16,r2
  805174:	1823883a 	mov	r17,r3
  805178:	8005883a 	mov	r2,r16
  80517c:	8807883a 	mov	r3,r17
  805180:	dfc00217 	ldw	ra,8(sp)
  805184:	dc400117 	ldw	r17,4(sp)
  805188:	dc000017 	ldw	r16,0(sp)
  80518c:	dec00304 	addi	sp,sp,12
  805190:	f800283a 	ret
  805194:	00a00034 	movhi	r2,32768
  805198:	10bfffc4 	addi	r2,r2,-1
  80519c:	2884703a 	and	r2,r5,r2
  8051a0:	8084b03a 	or	r2,r16,r2
  8051a4:	103fd126 	beq	r2,zero,8050ec <__ieee754_sqrt+0x1c0>
  8051a8:	283f6d26 	beq	r5,zero,804f60 <__ieee754_sqrt+0x34>
  8051ac:	280f883a 	mov	r7,r5
  8051b0:	8009883a 	mov	r4,r16
  8051b4:	800d883a 	mov	r6,r16
  8051b8:	0805f940 	call	805f94 <__subdf3>
  8051bc:	1009883a 	mov	r4,r2
  8051c0:	180b883a 	mov	r5,r3
  8051c4:	100d883a 	mov	r6,r2
  8051c8:	180f883a 	mov	r7,r3
  8051cc:	080644c0 	call	80644c <__divdf3>
  8051d0:	1021883a 	mov	r16,r2
  8051d4:	1823883a 	mov	r17,r3
  8051d8:	003fc406 	br	8050ec <__ieee754_sqrt+0x1c0>
  8051dc:	29400044 	addi	r5,r5,1
  8051e0:	000f883a 	mov	r7,zero
  8051e4:	003fb506 	br	8050bc <__ieee754_sqrt+0x190>
  8051e8:	0009883a 	mov	r4,zero
  8051ec:	00800804 	movi	r2,32
  8051f0:	003f6b06 	br	804fa0 <__ieee754_sqrt+0x74>

008051f4 <fabs>:
  8051f4:	01e00034 	movhi	r7,32768
  8051f8:	39ffffc4 	addi	r7,r7,-1
  8051fc:	394e703a 	and	r7,r7,r5
  805200:	2005883a 	mov	r2,r4
  805204:	3807883a 	mov	r3,r7
  805208:	f800283a 	ret

0080520c <finite>:
  80520c:	00a00034 	movhi	r2,32768
  805210:	10bfffc4 	addi	r2,r2,-1
  805214:	2884703a 	and	r2,r5,r2
  805218:	01600434 	movhi	r5,32784
  80521c:	1145883a 	add	r2,r2,r5
  805220:	1004d7fa 	srli	r2,r2,31
  805224:	f800283a 	ret

00805228 <__isnand>:
  805228:	200d883a 	mov	r6,r4
  80522c:	0109c83a 	sub	r4,zero,r4
  805230:	2188b03a 	or	r4,r4,r6
  805234:	2008d7fa 	srli	r4,r4,31
  805238:	00a00034 	movhi	r2,32768
  80523c:	10bfffc4 	addi	r2,r2,-1
  805240:	1144703a 	and	r2,r2,r5
  805244:	2088b03a 	or	r4,r4,r2
  805248:	009ffc34 	movhi	r2,32752
  80524c:	1105c83a 	sub	r2,r2,r4
  805250:	1004d7fa 	srli	r2,r2,31
  805254:	f800283a 	ret

00805258 <matherr>:
  805258:	0005883a 	mov	r2,zero
  80525c:	f800283a 	ret

00805260 <nan>:
  805260:	015ffe34 	movhi	r5,32760
  805264:	0005883a 	mov	r2,zero
  805268:	2807883a 	mov	r3,r5
  80526c:	f800283a 	ret

00805270 <rint>:
  805270:	2015883a 	mov	r10,r4
  805274:	2809d53a 	srai	r4,r5,20
  805278:	defff904 	addi	sp,sp,-28
  80527c:	034004c4 	movi	r13,19
  805280:	2101ffcc 	andi	r4,r4,2047
  805284:	227f0044 	addi	r9,r4,-1023
  805288:	dc800415 	stw	r18,16(sp)
  80528c:	dfc00615 	stw	ra,24(sp)
  805290:	dcc00515 	stw	r19,20(sp)
  805294:	dc400315 	stw	r17,12(sp)
  805298:	dc000215 	stw	r16,8(sp)
  80529c:	2817883a 	mov	r11,r5
  8052a0:	500d883a 	mov	r6,r10
  8052a4:	2824d7fa 	srli	r18,r5,31
  8052a8:	6a403016 	blt	r13,r9,80536c <rint+0xfc>
  8052ac:	48004916 	blt	r9,zero,8053d4 <rint+0x164>
  8052b0:	00800434 	movhi	r2,16
  8052b4:	10bfffc4 	addi	r2,r2,-1
  8052b8:	1247d83a 	sra	r3,r2,r9
  8052bc:	2809883a 	mov	r4,r5
  8052c0:	1944703a 	and	r2,r3,r5
  8052c4:	5084b03a 	or	r2,r10,r2
  8052c8:	10001f26 	beq	r2,zero,805348 <rint+0xd8>
  8052cc:	180ad07a 	srli	r5,r3,1
  8052d0:	5944703a 	and	r2,r11,r5
  8052d4:	5084b03a 	or	r2,r10,r2
  8052d8:	10000626 	beq	r2,zero,8052f4 <rint+0x84>
  8052dc:	4b406626 	beq	r9,r13,805478 <rint+0x208>
  8052e0:	00c000b4 	movhi	r3,2
  8052e4:	1a47d83a 	sra	r3,r3,r9
  8052e8:	0144303a 	nor	r2,zero,r5
  8052ec:	5884703a 	and	r2,r11,r2
  8052f0:	10c8b03a 	or	r4,r2,r3
  8052f4:	900690fa 	slli	r3,r18,3
  8052f8:	008020b4 	movhi	r2,130
  8052fc:	10aef704 	addi	r2,r2,-17444
  805300:	200f883a 	mov	r7,r4
  805304:	1887883a 	add	r3,r3,r2
  805308:	1c000017 	ldw	r16,0(r3)
  80530c:	1c400117 	ldw	r17,4(r3)
  805310:	8009883a 	mov	r4,r16
  805314:	880b883a 	mov	r5,r17
  805318:	08060140 	call	806014 <__adddf3>
  80531c:	d8800015 	stw	r2,0(sp)
  805320:	d8c00115 	stw	r3,4(sp)
  805324:	d8800017 	ldw	r2,0(sp)
  805328:	d8c00117 	ldw	r3,4(sp)
  80532c:	880f883a 	mov	r7,r17
  805330:	800d883a 	mov	r6,r16
  805334:	180b883a 	mov	r5,r3
  805338:	1009883a 	mov	r4,r2
  80533c:	0805f940 	call	805f94 <__subdf3>
  805340:	1015883a 	mov	r10,r2
  805344:	1817883a 	mov	r11,r3
  805348:	5005883a 	mov	r2,r10
  80534c:	5807883a 	mov	r3,r11
  805350:	dfc00617 	ldw	ra,24(sp)
  805354:	dcc00517 	ldw	r19,20(sp)
  805358:	dc800417 	ldw	r18,16(sp)
  80535c:	dc400317 	ldw	r17,12(sp)
  805360:	dc000217 	ldw	r16,8(sp)
  805364:	dec00704 	addi	sp,sp,28
  805368:	f800283a 	ret
  80536c:	00800cc4 	movi	r2,51
  805370:	12400f16 	blt	r2,r9,8053b0 <rint+0x140>
  805374:	213efb44 	addi	r4,r4,-1043
  805378:	00bfffc4 	movi	r2,-1
  80537c:	1104d83a 	srl	r2,r2,r4
  805380:	5086703a 	and	r3,r10,r2
  805384:	183ff026 	beq	r3,zero,805348 <rint+0xd8>
  805388:	100ad07a 	srli	r5,r2,1
  80538c:	5144703a 	and	r2,r10,r5
  805390:	10000526 	beq	r2,zero,8053a8 <rint+0x138>
  805394:	00d00034 	movhi	r3,16384
  805398:	1907d83a 	sra	r3,r3,r4
  80539c:	0144303a 	nor	r2,zero,r5
  8053a0:	5084703a 	and	r2,r10,r2
  8053a4:	10ccb03a 	or	r6,r2,r3
  8053a8:	5809883a 	mov	r4,r11
  8053ac:	003fd106 	br	8052f4 <rint+0x84>
  8053b0:	00810004 	movi	r2,1024
  8053b4:	48bfe41e 	bne	r9,r2,805348 <rint+0xd8>
  8053b8:	5009883a 	mov	r4,r10
  8053bc:	500d883a 	mov	r6,r10
  8053c0:	280f883a 	mov	r7,r5
  8053c4:	08060140 	call	806014 <__adddf3>
  8053c8:	1015883a 	mov	r10,r2
  8053cc:	1817883a 	mov	r11,r3
  8053d0:	003fdd06 	br	805348 <rint+0xd8>
  8053d4:	04e00034 	movhi	r19,32768
  8053d8:	9cffffc4 	addi	r19,r19,-1
  8053dc:	2cc4703a 	and	r2,r5,r19
  8053e0:	5084b03a 	or	r2,r10,r2
  8053e4:	103fd826 	beq	r2,zero,805348 <rint+0xd8>
  8053e8:	00c00434 	movhi	r3,16
  8053ec:	18ffffc4 	addi	r3,r3,-1
  8053f0:	28c6703a 	and	r3,r5,r3
  8053f4:	50c6b03a 	or	r3,r10,r3
  8053f8:	00cdc83a 	sub	r6,zero,r3
  8053fc:	900a90fa 	slli	r5,r18,3
  805400:	1986b03a 	or	r3,r3,r6
  805404:	010020b4 	movhi	r4,130
  805408:	212ef704 	addi	r4,r4,-17444
  80540c:	1806d33a 	srli	r3,r3,12
  805410:	290b883a 	add	r5,r5,r4
  805414:	2c000017 	ldw	r16,0(r5)
  805418:	2c400117 	ldw	r17,4(r5)
  80541c:	593fffac 	andhi	r4,r11,65534
  805420:	18c0022c 	andhi	r3,r3,8
  805424:	1906b03a 	or	r3,r3,r4
  805428:	500d883a 	mov	r6,r10
  80542c:	180f883a 	mov	r7,r3
  805430:	8009883a 	mov	r4,r16
  805434:	880b883a 	mov	r5,r17
  805438:	08060140 	call	806014 <__adddf3>
  80543c:	d8800015 	stw	r2,0(sp)
  805440:	d8c00115 	stw	r3,4(sp)
  805444:	d8800017 	ldw	r2,0(sp)
  805448:	d8c00117 	ldw	r3,4(sp)
  80544c:	880f883a 	mov	r7,r17
  805450:	800d883a 	mov	r6,r16
  805454:	180b883a 	mov	r5,r3
  805458:	1009883a 	mov	r4,r2
  80545c:	0805f940 	call	805f94 <__subdf3>
  805460:	901297fa 	slli	r9,r18,31
  805464:	98d0703a 	and	r8,r19,r3
  805468:	1015883a 	mov	r10,r2
  80546c:	4250b03a 	or	r8,r8,r9
  805470:	4017883a 	mov	r11,r8
  805474:	003fb406 	br	805348 <rint+0xd8>
  805478:	01900034 	movhi	r6,16384
  80547c:	003f9d06 	br	8052f4 <rint+0x84>

00805480 <scalbn>:
  805480:	2011883a 	mov	r8,r4
  805484:	291ffc2c 	andhi	r4,r5,32752
  805488:	2009d53a 	srai	r4,r4,20
  80548c:	defffd04 	addi	sp,sp,-12
  805490:	dc000015 	stw	r16,0(sp)
  805494:	dfc00215 	stw	ra,8(sp)
  805498:	dc400115 	stw	r17,4(sp)
  80549c:	2813883a 	mov	r9,r5
  8054a0:	2815883a 	mov	r10,r5
  8054a4:	3021883a 	mov	r16,r6
  8054a8:	2000281e 	bne	r4,zero,80554c <scalbn+0xcc>
  8054ac:	00a00034 	movhi	r2,32768
  8054b0:	10bfffc4 	addi	r2,r2,-1
  8054b4:	2884703a 	and	r2,r5,r2
  8054b8:	4084b03a 	or	r2,r8,r2
  8054bc:	10001826 	beq	r2,zero,805520 <scalbn+0xa0>
  8054c0:	0005883a 	mov	r2,zero
  8054c4:	00d0d434 	movhi	r3,17232
  8054c8:	4009883a 	mov	r4,r8
  8054cc:	100d883a 	mov	r6,r2
  8054d0:	180f883a 	mov	r7,r3
  8054d4:	08060880 	call	806088 <__muldf3>
  8054d8:	100b883a 	mov	r5,r2
  8054dc:	1011883a 	mov	r8,r2
  8054e0:	00bffff4 	movhi	r2,65535
  8054e4:	108f2c04 	addi	r2,r2,15536
  8054e8:	180d883a 	mov	r6,r3
  8054ec:	1813883a 	mov	r9,r3
  8054f0:	8080120e 	bge	r16,r2,80553c <scalbn+0xbc>
  8054f4:	00b0be74 	movhi	r2,49913
  8054f8:	10bcd644 	addi	r2,r2,-3239
  8054fc:	00c06974 	movhi	r3,421
  805500:	18db87c4 	addi	r3,r3,28191
  805504:	2809883a 	mov	r4,r5
  805508:	180f883a 	mov	r7,r3
  80550c:	300b883a 	mov	r5,r6
  805510:	100d883a 	mov	r6,r2
  805514:	08060880 	call	806088 <__muldf3>
  805518:	1011883a 	mov	r8,r2
  80551c:	1813883a 	mov	r9,r3
  805520:	4005883a 	mov	r2,r8
  805524:	4807883a 	mov	r3,r9
  805528:	dfc00217 	ldw	ra,8(sp)
  80552c:	dc400117 	ldw	r17,4(sp)
  805530:	dc000017 	ldw	r16,0(sp)
  805534:	dec00304 	addi	sp,sp,12
  805538:	f800283a 	ret
  80553c:	189ffc2c 	andhi	r2,r3,32752
  805540:	1005d53a 	srai	r2,r2,20
  805544:	1815883a 	mov	r10,r3
  805548:	113ff284 	addi	r4,r2,-54
  80554c:	0081ffc4 	movi	r2,2047
  805550:	20801126 	beq	r4,r2,805598 <scalbn+0x118>
  805554:	2409883a 	add	r4,r4,r16
  805558:	0081ff84 	movi	r2,2046
  80555c:	11001c16 	blt	r2,r4,8055d0 <scalbn+0x150>
  805560:	0100290e 	bge	zero,r4,805608 <scalbn+0x188>
  805564:	200a953a 	slli	r5,r4,20
  805568:	01200434 	movhi	r4,32784
  80556c:	213fffc4 	addi	r4,r4,-1
  805570:	5108703a 	and	r4,r10,r4
  805574:	2148b03a 	or	r4,r4,r5
  805578:	2013883a 	mov	r9,r4
  80557c:	4005883a 	mov	r2,r8
  805580:	4807883a 	mov	r3,r9
  805584:	dfc00217 	ldw	ra,8(sp)
  805588:	dc400117 	ldw	r17,4(sp)
  80558c:	dc000017 	ldw	r16,0(sp)
  805590:	dec00304 	addi	sp,sp,12
  805594:	f800283a 	ret
  805598:	480f883a 	mov	r7,r9
  80559c:	4009883a 	mov	r4,r8
  8055a0:	480b883a 	mov	r5,r9
  8055a4:	400d883a 	mov	r6,r8
  8055a8:	08060140 	call	806014 <__adddf3>
  8055ac:	1011883a 	mov	r8,r2
  8055b0:	1813883a 	mov	r9,r3
  8055b4:	4005883a 	mov	r2,r8
  8055b8:	4807883a 	mov	r3,r9
  8055bc:	dfc00217 	ldw	ra,8(sp)
  8055c0:	dc400117 	ldw	r17,4(sp)
  8055c4:	dc000017 	ldw	r16,0(sp)
  8055c8:	dec00304 	addi	sp,sp,12
  8055cc:	f800283a 	ret
  8055d0:	04220034 	movhi	r16,34816
  8055d4:	841d6704 	addi	r16,r16,30108
  8055d8:	045f8e34 	movhi	r17,32312
  8055dc:	8c790f04 	addi	r17,r17,-7108
  8055e0:	480f883a 	mov	r7,r9
  8055e4:	400d883a 	mov	r6,r8
  8055e8:	8009883a 	mov	r4,r16
  8055ec:	880b883a 	mov	r5,r17
  8055f0:	08056600 	call	805660 <copysign>
  8055f4:	180b883a 	mov	r5,r3
  8055f8:	800d883a 	mov	r6,r16
  8055fc:	880f883a 	mov	r7,r17
  805600:	1009883a 	mov	r4,r2
  805604:	003fc306 	br	805514 <scalbn+0x94>
  805608:	00bff284 	movi	r2,-54
  80560c:	11000716 	blt	r2,r4,80562c <scalbn+0x1ac>
  805610:	00b0d414 	movui	r2,50000
  805614:	143fee16 	blt	r2,r16,8055d0 <scalbn+0x150>
  805618:	0430be74 	movhi	r16,49913
  80561c:	843cd644 	addi	r16,r16,-3239
  805620:	04406974 	movhi	r17,421
  805624:	8c5b87c4 	addi	r17,r17,28191
  805628:	003fed06 	br	8055e0 <scalbn+0x160>
  80562c:	21000d84 	addi	r4,r4,54
  805630:	2008953a 	slli	r4,r4,20
  805634:	01e00434 	movhi	r7,32784
  805638:	39ffffc4 	addi	r7,r7,-1
  80563c:	51ce703a 	and	r7,r10,r7
  805640:	390eb03a 	or	r7,r7,r4
  805644:	024f2434 	movhi	r9,15504
  805648:	4009883a 	mov	r4,r8
  80564c:	0011883a 	mov	r8,zero
  805650:	380b883a 	mov	r5,r7
  805654:	400d883a 	mov	r6,r8
  805658:	480f883a 	mov	r7,r9
  80565c:	003fad06 	br	805514 <scalbn+0x94>

00805660 <copysign>:
  805660:	3813883a 	mov	r9,r7
  805664:	01e00034 	movhi	r7,32768
  805668:	39ffffc4 	addi	r7,r7,-1
  80566c:	394e703a 	and	r7,r7,r5
  805670:	4aa0002c 	andhi	r10,r9,32768
  805674:	3a8eb03a 	or	r7,r7,r10
  805678:	2005883a 	mov	r2,r4
  80567c:	3807883a 	mov	r3,r7
  805680:	f800283a 	ret

00805684 <__mulsf3>:
  805684:	deffef04 	addi	sp,sp,-68
  805688:	dc400f15 	stw	r17,60(sp)
  80568c:	dc400204 	addi	r17,sp,8
  805690:	dc000e15 	stw	r16,56(sp)
  805694:	d9000015 	stw	r4,0(sp)
  805698:	d9400115 	stw	r5,4(sp)
  80569c:	d809883a 	mov	r4,sp
  8056a0:	880b883a 	mov	r5,r17
  8056a4:	dc000604 	addi	r16,sp,24
  8056a8:	dfc01015 	stw	ra,64(sp)
  8056ac:	0806f780 	call	806f78 <__unpack_f>
  8056b0:	d9000104 	addi	r4,sp,4
  8056b4:	800b883a 	mov	r5,r16
  8056b8:	0806f780 	call	806f78 <__unpack_f>
  8056bc:	d9000217 	ldw	r4,8(sp)
  8056c0:	00800044 	movi	r2,1
  8056c4:	01400104 	movi	r5,4
  8056c8:	1100142e 	bgeu	r2,r4,80571c <__mulsf3+0x98>
  8056cc:	d8c00617 	ldw	r3,24(sp)
  8056d0:	10c0052e 	bgeu	r2,r3,8056e8 <__mulsf3+0x64>
  8056d4:	21400f26 	beq	r4,r5,805714 <__mulsf3+0x90>
  8056d8:	19405d26 	beq	r3,r5,805850 <__mulsf3+0x1cc>
  8056dc:	00800084 	movi	r2,2
  8056e0:	20800e26 	beq	r4,r2,80571c <__mulsf3+0x98>
  8056e4:	1880181e 	bne	r3,r2,805748 <__mulsf3+0xc4>
  8056e8:	d8c00717 	ldw	r3,28(sp)
  8056ec:	d8800317 	ldw	r2,12(sp)
  8056f0:	8009883a 	mov	r4,r16
  8056f4:	10c4c03a 	cmpne	r2,r2,r3
  8056f8:	d8800715 	stw	r2,28(sp)
  8056fc:	0806e180 	call	806e18 <__pack_f>
  805700:	dfc01017 	ldw	ra,64(sp)
  805704:	dc400f17 	ldw	r17,60(sp)
  805708:	dc000e17 	ldw	r16,56(sp)
  80570c:	dec01104 	addi	sp,sp,68
  805710:	f800283a 	ret
  805714:	00800084 	movi	r2,2
  805718:	18804f26 	beq	r3,r2,805858 <__mulsf3+0x1d4>
  80571c:	d8800317 	ldw	r2,12(sp)
  805720:	d8c00717 	ldw	r3,28(sp)
  805724:	8809883a 	mov	r4,r17
  805728:	10c4c03a 	cmpne	r2,r2,r3
  80572c:	d8800315 	stw	r2,12(sp)
  805730:	0806e180 	call	806e18 <__pack_f>
  805734:	dfc01017 	ldw	ra,64(sp)
  805738:	dc400f17 	ldw	r17,60(sp)
  80573c:	dc000e17 	ldw	r16,56(sp)
  805740:	dec01104 	addi	sp,sp,68
  805744:	f800283a 	ret
  805748:	d8800517 	ldw	r2,20(sp)
  80574c:	da000917 	ldw	r8,36(sp)
  805750:	0013883a 	mov	r9,zero
  805754:	0007883a 	mov	r3,zero
  805758:	480f883a 	mov	r7,r9
  80575c:	180b883a 	mov	r5,r3
  805760:	400d883a 	mov	r6,r8
  805764:	1009883a 	mov	r4,r2
  805768:	0806c740 	call	806c74 <__muldi3>
  80576c:	da800417 	ldw	r10,16(sp)
  805770:	d9800817 	ldw	r6,32(sp)
  805774:	da400317 	ldw	r9,12(sp)
  805778:	52800084 	addi	r10,r10,2
  80577c:	3295883a 	add	r10,r6,r10
  805780:	d9800717 	ldw	r6,28(sp)
  805784:	180b883a 	mov	r5,r3
  805788:	180f883a 	mov	r7,r3
  80578c:	4992c03a 	cmpne	r9,r9,r6
  805790:	da400b15 	stw	r9,44(sp)
  805794:	1007883a 	mov	r3,r2
  805798:	da800c15 	stw	r10,48(sp)
  80579c:	2800070e 	bge	r5,zero,8057bc <__mulsf3+0x138>
  8057a0:	2880004c 	andi	r2,r5,1
  8057a4:	1005003a 	cmpeq	r2,r2,zero
  8057a8:	500d883a 	mov	r6,r10
  8057ac:	10001e26 	beq	r2,zero,805828 <__mulsf3+0x1a4>
  8057b0:	380ed07a 	srli	r7,r7,1
  8057b4:	31800044 	addi	r6,r6,1
  8057b8:	d9800c15 	stw	r6,48(sp)
  8057bc:	01100034 	movhi	r4,16384
  8057c0:	213fffc4 	addi	r4,r4,-1
  8057c4:	21c00b36 	bltu	r4,r7,8057f4 <__mulsf3+0x170>
  8057c8:	d8800c17 	ldw	r2,48(sp)
  8057cc:	00000206 	br	8057d8 <__mulsf3+0x154>
  8057d0:	18c7883a 	add	r3,r3,r3
  8057d4:	21c00636 	bltu	r4,r7,8057f0 <__mulsf3+0x16c>
  8057d8:	10bfffc4 	addi	r2,r2,-1
  8057dc:	39cf883a 	add	r7,r7,r7
  8057e0:	183ffb0e 	bge	r3,zero,8057d0 <__mulsf3+0x14c>
  8057e4:	39c00054 	ori	r7,r7,1
  8057e8:	18c7883a 	add	r3,r3,r3
  8057ec:	21fffa2e 	bgeu	r4,r7,8057d8 <__mulsf3+0x154>
  8057f0:	d8800c15 	stw	r2,48(sp)
  8057f4:	39001fcc 	andi	r4,r7,127
  8057f8:	00801004 	movi	r2,64
  8057fc:	20800d26 	beq	r4,r2,805834 <__mulsf3+0x1b0>
  805800:	008000c4 	movi	r2,3
  805804:	d9000a04 	addi	r4,sp,40
  805808:	d9c00d15 	stw	r7,52(sp)
  80580c:	d8800a15 	stw	r2,40(sp)
  805810:	0806e180 	call	806e18 <__pack_f>
  805814:	dfc01017 	ldw	ra,64(sp)
  805818:	dc400f17 	ldw	r17,60(sp)
  80581c:	dc000e17 	ldw	r16,56(sp)
  805820:	dec01104 	addi	sp,sp,68
  805824:	f800283a 	ret
  805828:	1804d07a 	srli	r2,r3,1
  80582c:	10e00034 	orhi	r3,r2,32768
  805830:	003fdf06 	br	8057b0 <__mulsf3+0x12c>
  805834:	3880200c 	andi	r2,r7,128
  805838:	103ff11e 	bne	r2,zero,805800 <__mulsf3+0x17c>
  80583c:	183ff026 	beq	r3,zero,805800 <__mulsf3+0x17c>
  805840:	3907883a 	add	r3,r7,r4
  805844:	00bfe004 	movi	r2,-128
  805848:	188e703a 	and	r7,r3,r2
  80584c:	003fec06 	br	805800 <__mulsf3+0x17c>
  805850:	00800084 	movi	r2,2
  805854:	20bfa41e 	bne	r4,r2,8056e8 <__mulsf3+0x64>
  805858:	010020b4 	movhi	r4,130
  80585c:	212efb04 	addi	r4,r4,-17428
  805860:	003fb306 	br	805730 <__mulsf3+0xac>

00805864 <__divsf3>:
  805864:	defff304 	addi	sp,sp,-52
  805868:	dc400b15 	stw	r17,44(sp)
  80586c:	dc400204 	addi	r17,sp,8
  805870:	dc000a15 	stw	r16,40(sp)
  805874:	d9000015 	stw	r4,0(sp)
  805878:	d9400115 	stw	r5,4(sp)
  80587c:	d809883a 	mov	r4,sp
  805880:	880b883a 	mov	r5,r17
  805884:	dc000604 	addi	r16,sp,24
  805888:	dfc00c15 	stw	ra,48(sp)
  80588c:	0806f780 	call	806f78 <__unpack_f>
  805890:	d9000104 	addi	r4,sp,4
  805894:	800b883a 	mov	r5,r16
  805898:	0806f780 	call	806f78 <__unpack_f>
  80589c:	d9000217 	ldw	r4,8(sp)
  8058a0:	00800044 	movi	r2,1
  8058a4:	01800104 	movi	r6,4
  8058a8:	11000a2e 	bgeu	r2,r4,8058d4 <__divsf3+0x70>
  8058ac:	d9400617 	ldw	r5,24(sp)
  8058b0:	1140432e 	bgeu	r2,r5,8059c0 <__divsf3+0x15c>
  8058b4:	d8800317 	ldw	r2,12(sp)
  8058b8:	d8c00717 	ldw	r3,28(sp)
  8058bc:	10c4f03a 	xor	r2,r2,r3
  8058c0:	d8800315 	stw	r2,12(sp)
  8058c4:	21800226 	beq	r4,r6,8058d0 <__divsf3+0x6c>
  8058c8:	00800084 	movi	r2,2
  8058cc:	2080101e 	bne	r4,r2,805910 <__divsf3+0xac>
  8058d0:	29000726 	beq	r5,r4,8058f0 <__divsf3+0x8c>
  8058d4:	8809883a 	mov	r4,r17
  8058d8:	0806e180 	call	806e18 <__pack_f>
  8058dc:	dfc00c17 	ldw	ra,48(sp)
  8058e0:	dc400b17 	ldw	r17,44(sp)
  8058e4:	dc000a17 	ldw	r16,40(sp)
  8058e8:	dec00d04 	addi	sp,sp,52
  8058ec:	f800283a 	ret
  8058f0:	010020b4 	movhi	r4,130
  8058f4:	212efb04 	addi	r4,r4,-17428
  8058f8:	0806e180 	call	806e18 <__pack_f>
  8058fc:	dfc00c17 	ldw	ra,48(sp)
  805900:	dc400b17 	ldw	r17,44(sp)
  805904:	dc000a17 	ldw	r16,40(sp)
  805908:	dec00d04 	addi	sp,sp,52
  80590c:	f800283a 	ret
  805910:	29802d26 	beq	r5,r6,8059c8 <__divsf3+0x164>
  805914:	28801a26 	beq	r5,r2,805980 <__divsf3+0x11c>
  805918:	d8c00417 	ldw	r3,16(sp)
  80591c:	d8800817 	ldw	r2,32(sp)
  805920:	d9000517 	ldw	r4,20(sp)
  805924:	d9800917 	ldw	r6,36(sp)
  805928:	1885c83a 	sub	r2,r3,r2
  80592c:	d8800415 	stw	r2,16(sp)
  805930:	2180032e 	bgeu	r4,r6,805940 <__divsf3+0xdc>
  805934:	10bfffc4 	addi	r2,r2,-1
  805938:	d8800415 	stw	r2,16(sp)
  80593c:	2109883a 	add	r4,r4,r4
  805940:	01500034 	movhi	r5,16384
  805944:	0007883a 	mov	r3,zero
  805948:	0005883a 	mov	r2,zero
  80594c:	01c007c4 	movi	r7,31
  805950:	10800044 	addi	r2,r2,1
  805954:	21800236 	bltu	r4,r6,805960 <__divsf3+0xfc>
  805958:	1946b03a 	or	r3,r3,r5
  80595c:	2189c83a 	sub	r4,r4,r6
  805960:	280ad07a 	srli	r5,r5,1
  805964:	2109883a 	add	r4,r4,r4
  805968:	11fff91e 	bne	r2,r7,805950 <__divsf3+0xec>
  80596c:	19401fcc 	andi	r5,r3,127
  805970:	00801004 	movi	r2,64
  805974:	28800a26 	beq	r5,r2,8059a0 <__divsf3+0x13c>
  805978:	d8c00515 	stw	r3,20(sp)
  80597c:	003fd506 	br	8058d4 <__divsf3+0x70>
  805980:	8809883a 	mov	r4,r17
  805984:	d9800215 	stw	r6,8(sp)
  805988:	0806e180 	call	806e18 <__pack_f>
  80598c:	dfc00c17 	ldw	ra,48(sp)
  805990:	dc400b17 	ldw	r17,44(sp)
  805994:	dc000a17 	ldw	r16,40(sp)
  805998:	dec00d04 	addi	sp,sp,52
  80599c:	f800283a 	ret
  8059a0:	1880200c 	andi	r2,r3,128
  8059a4:	103ff41e 	bne	r2,zero,805978 <__divsf3+0x114>
  8059a8:	203ff326 	beq	r4,zero,805978 <__divsf3+0x114>
  8059ac:	1947883a 	add	r3,r3,r5
  8059b0:	00bfe004 	movi	r2,-128
  8059b4:	1886703a 	and	r3,r3,r2
  8059b8:	d8c00515 	stw	r3,20(sp)
  8059bc:	003fc506 	br	8058d4 <__divsf3+0x70>
  8059c0:	8009883a 	mov	r4,r16
  8059c4:	003fc406 	br	8058d8 <__divsf3+0x74>
  8059c8:	8809883a 	mov	r4,r17
  8059cc:	d8000515 	stw	zero,20(sp)
  8059d0:	d8000415 	stw	zero,16(sp)
  8059d4:	003fc006 	br	8058d8 <__divsf3+0x74>

008059d8 <__floatsisf>:
  8059d8:	2006d7fa 	srli	r3,r4,31
  8059dc:	defffa04 	addi	sp,sp,-24
  8059e0:	008000c4 	movi	r2,3
  8059e4:	dfc00515 	stw	ra,20(sp)
  8059e8:	dc000415 	stw	r16,16(sp)
  8059ec:	d8800015 	stw	r2,0(sp)
  8059f0:	d8c00115 	stw	r3,4(sp)
  8059f4:	2000081e 	bne	r4,zero,805a18 <__floatsisf+0x40>
  8059f8:	00800084 	movi	r2,2
  8059fc:	d8800015 	stw	r2,0(sp)
  805a00:	d809883a 	mov	r4,sp
  805a04:	0806e180 	call	806e18 <__pack_f>
  805a08:	dfc00517 	ldw	ra,20(sp)
  805a0c:	dc000417 	ldw	r16,16(sp)
  805a10:	dec00604 	addi	sp,sp,24
  805a14:	f800283a 	ret
  805a18:	00800784 	movi	r2,30
  805a1c:	1807003a 	cmpeq	r3,r3,zero
  805a20:	d8800215 	stw	r2,8(sp)
  805a24:	18000e1e 	bne	r3,zero,805a60 <__floatsisf+0x88>
  805a28:	00a00034 	movhi	r2,32768
  805a2c:	20800e26 	beq	r4,r2,805a68 <__floatsisf+0x90>
  805a30:	0121c83a 	sub	r16,zero,r4
  805a34:	8009883a 	mov	r4,r16
  805a38:	dc000315 	stw	r16,12(sp)
  805a3c:	0806d980 	call	806d98 <__clzsi2>
  805a40:	117fffc4 	addi	r5,r2,-1
  805a44:	017fee0e 	bge	zero,r5,805a00 <__floatsisf+0x28>
  805a48:	d8800217 	ldw	r2,8(sp)
  805a4c:	8146983a 	sll	r3,r16,r5
  805a50:	1145c83a 	sub	r2,r2,r5
  805a54:	d8c00315 	stw	r3,12(sp)
  805a58:	d8800215 	stw	r2,8(sp)
  805a5c:	003fe806 	br	805a00 <__floatsisf+0x28>
  805a60:	2021883a 	mov	r16,r4
  805a64:	003ff306 	br	805a34 <__floatsisf+0x5c>
  805a68:	00b3c034 	movhi	r2,52992
  805a6c:	003fe606 	br	805a08 <__floatsisf+0x30>

00805a70 <__extendsfdf2>:
  805a70:	defff904 	addi	sp,sp,-28
  805a74:	d9000115 	stw	r4,4(sp)
  805a78:	d9400204 	addi	r5,sp,8
  805a7c:	d9000104 	addi	r4,sp,4
  805a80:	dfc00615 	stw	ra,24(sp)
  805a84:	0806f780 	call	806f78 <__unpack_f>
  805a88:	d9c00517 	ldw	r7,20(sp)
  805a8c:	0011883a 	mov	r8,zero
  805a90:	400697ba 	slli	r3,r8,30
  805a94:	3812d0ba 	srli	r9,r7,2
  805a98:	380497ba 	slli	r2,r7,30
  805a9c:	d9000217 	ldw	r4,8(sp)
  805aa0:	d9400317 	ldw	r5,12(sp)
  805aa4:	d9800417 	ldw	r6,16(sp)
  805aa8:	48c6b03a 	or	r3,r9,r3
  805aac:	100f883a 	mov	r7,r2
  805ab0:	d8c00015 	stw	r3,0(sp)
  805ab4:	0806a440 	call	806a44 <__make_dp>
  805ab8:	dfc00617 	ldw	ra,24(sp)
  805abc:	dec00704 	addi	sp,sp,28
  805ac0:	f800283a 	ret

00805ac4 <__floatunsisf>:
  805ac4:	defff904 	addi	sp,sp,-28
  805ac8:	dc400515 	stw	r17,20(sp)
  805acc:	dc000415 	stw	r16,16(sp)
  805ad0:	dfc00615 	stw	ra,24(sp)
  805ad4:	04400784 	movi	r17,30
  805ad8:	2021883a 	mov	r16,r4
  805adc:	d8000115 	stw	zero,4(sp)
  805ae0:	2000091e 	bne	r4,zero,805b08 <__floatunsisf+0x44>
  805ae4:	00800084 	movi	r2,2
  805ae8:	d8800015 	stw	r2,0(sp)
  805aec:	d809883a 	mov	r4,sp
  805af0:	0806e180 	call	806e18 <__pack_f>
  805af4:	dfc00617 	ldw	ra,24(sp)
  805af8:	dc400517 	ldw	r17,20(sp)
  805afc:	dc000417 	ldw	r16,16(sp)
  805b00:	dec00704 	addi	sp,sp,28
  805b04:	f800283a 	ret
  805b08:	008000c4 	movi	r2,3
  805b0c:	d9000315 	stw	r4,12(sp)
  805b10:	d8800015 	stw	r2,0(sp)
  805b14:	dc400215 	stw	r17,8(sp)
  805b18:	0806d980 	call	806d98 <__clzsi2>
  805b1c:	117fffc4 	addi	r5,r2,-1
  805b20:	0147c83a 	sub	r3,zero,r5
  805b24:	00800044 	movi	r2,1
  805b28:	10c4983a 	sll	r2,r2,r3
  805b2c:	80c6d83a 	srl	r3,r16,r3
  805b30:	8949c83a 	sub	r4,r17,r5
  805b34:	10bfffc4 	addi	r2,r2,-1
  805b38:	8084703a 	and	r2,r16,r2
  805b3c:	1004c03a 	cmpne	r2,r2,zero
  805b40:	1886b03a 	or	r3,r3,r2
  805b44:	28000c16 	blt	r5,zero,805b78 <__floatunsisf+0xb4>
  805b48:	8144983a 	sll	r2,r16,r5
  805b4c:	8947c83a 	sub	r3,r17,r5
  805b50:	283fe626 	beq	r5,zero,805aec <__floatunsisf+0x28>
  805b54:	d809883a 	mov	r4,sp
  805b58:	d8800315 	stw	r2,12(sp)
  805b5c:	d8c00215 	stw	r3,8(sp)
  805b60:	0806e180 	call	806e18 <__pack_f>
  805b64:	dfc00617 	ldw	ra,24(sp)
  805b68:	dc400517 	ldw	r17,20(sp)
  805b6c:	dc000417 	ldw	r16,16(sp)
  805b70:	dec00704 	addi	sp,sp,28
  805b74:	f800283a 	ret
  805b78:	d8c00315 	stw	r3,12(sp)
  805b7c:	d9000215 	stw	r4,8(sp)
  805b80:	003fda06 	br	805aec <__floatunsisf+0x28>

00805b84 <_fpadd_parts>:
  805b84:	defff804 	addi	sp,sp,-32
  805b88:	dcc00315 	stw	r19,12(sp)
  805b8c:	2027883a 	mov	r19,r4
  805b90:	21000017 	ldw	r4,0(r4)
  805b94:	00c00044 	movi	r3,1
  805b98:	dd400515 	stw	r21,20(sp)
  805b9c:	dd000415 	stw	r20,16(sp)
  805ba0:	ddc00715 	stw	r23,28(sp)
  805ba4:	dd800615 	stw	r22,24(sp)
  805ba8:	dc800215 	stw	r18,8(sp)
  805bac:	dc400115 	stw	r17,4(sp)
  805bb0:	dc000015 	stw	r16,0(sp)
  805bb4:	282b883a 	mov	r21,r5
  805bb8:	3029883a 	mov	r20,r6
  805bbc:	1900632e 	bgeu	r3,r4,805d4c <_fpadd_parts+0x1c8>
  805bc0:	28800017 	ldw	r2,0(r5)
  805bc4:	1880812e 	bgeu	r3,r2,805dcc <_fpadd_parts+0x248>
  805bc8:	00c00104 	movi	r3,4
  805bcc:	20c0dc26 	beq	r4,r3,805f40 <_fpadd_parts+0x3bc>
  805bd0:	10c07e26 	beq	r2,r3,805dcc <_fpadd_parts+0x248>
  805bd4:	00c00084 	movi	r3,2
  805bd8:	10c06726 	beq	r2,r3,805d78 <_fpadd_parts+0x1f4>
  805bdc:	20c07b26 	beq	r4,r3,805dcc <_fpadd_parts+0x248>
  805be0:	9dc00217 	ldw	r23,8(r19)
  805be4:	28c00217 	ldw	r3,8(r5)
  805be8:	9c400317 	ldw	r17,12(r19)
  805bec:	2bc00317 	ldw	r15,12(r5)
  805bf0:	b8cdc83a 	sub	r6,r23,r3
  805bf4:	9c800417 	ldw	r18,16(r19)
  805bf8:	2c000417 	ldw	r16,16(r5)
  805bfc:	3009883a 	mov	r4,r6
  805c00:	30009716 	blt	r6,zero,805e60 <_fpadd_parts+0x2dc>
  805c04:	00800fc4 	movi	r2,63
  805c08:	11806b16 	blt	r2,r6,805db8 <_fpadd_parts+0x234>
  805c0c:	0100a40e 	bge	zero,r4,805ea0 <_fpadd_parts+0x31c>
  805c10:	35bff804 	addi	r22,r6,-32
  805c14:	b000bc16 	blt	r22,zero,805f08 <_fpadd_parts+0x384>
  805c18:	8596d83a 	srl	r11,r16,r22
  805c1c:	0019883a 	mov	r12,zero
  805c20:	0013883a 	mov	r9,zero
  805c24:	01000044 	movi	r4,1
  805c28:	0015883a 	mov	r10,zero
  805c2c:	b000be16 	blt	r22,zero,805f28 <_fpadd_parts+0x3a4>
  805c30:	2590983a 	sll	r8,r4,r22
  805c34:	000f883a 	mov	r7,zero
  805c38:	00bfffc4 	movi	r2,-1
  805c3c:	3889883a 	add	r4,r7,r2
  805c40:	408b883a 	add	r5,r8,r2
  805c44:	21cd803a 	cmpltu	r6,r4,r7
  805c48:	314b883a 	add	r5,r6,r5
  805c4c:	7904703a 	and	r2,r15,r4
  805c50:	8146703a 	and	r3,r16,r5
  805c54:	10c4b03a 	or	r2,r2,r3
  805c58:	10000226 	beq	r2,zero,805c64 <_fpadd_parts+0xe0>
  805c5c:	02400044 	movi	r9,1
  805c60:	0015883a 	mov	r10,zero
  805c64:	5a5eb03a 	or	r15,r11,r9
  805c68:	62a0b03a 	or	r16,r12,r10
  805c6c:	99400117 	ldw	r5,4(r19)
  805c70:	a8800117 	ldw	r2,4(r21)
  805c74:	28806e26 	beq	r5,r2,805e30 <_fpadd_parts+0x2ac>
  805c78:	28006626 	beq	r5,zero,805e14 <_fpadd_parts+0x290>
  805c7c:	7c45c83a 	sub	r2,r15,r17
  805c80:	7889803a 	cmpltu	r4,r15,r2
  805c84:	8487c83a 	sub	r3,r16,r18
  805c88:	1909c83a 	sub	r4,r3,r4
  805c8c:	100d883a 	mov	r6,r2
  805c90:	200f883a 	mov	r7,r4
  805c94:	38007716 	blt	r7,zero,805e74 <_fpadd_parts+0x2f0>
  805c98:	a5c00215 	stw	r23,8(r20)
  805c9c:	a1c00415 	stw	r7,16(r20)
  805ca0:	a0000115 	stw	zero,4(r20)
  805ca4:	a1800315 	stw	r6,12(r20)
  805ca8:	a2000317 	ldw	r8,12(r20)
  805cac:	a2400417 	ldw	r9,16(r20)
  805cb0:	00bfffc4 	movi	r2,-1
  805cb4:	408b883a 	add	r5,r8,r2
  805cb8:	2a09803a 	cmpltu	r4,r5,r8
  805cbc:	488d883a 	add	r6,r9,r2
  805cc0:	01c40034 	movhi	r7,4096
  805cc4:	39ffffc4 	addi	r7,r7,-1
  805cc8:	218d883a 	add	r6,r4,r6
  805ccc:	39801736 	bltu	r7,r6,805d2c <_fpadd_parts+0x1a8>
  805cd0:	31c06526 	beq	r6,r7,805e68 <_fpadd_parts+0x2e4>
  805cd4:	a3000217 	ldw	r12,8(r20)
  805cd8:	4209883a 	add	r4,r8,r8
  805cdc:	00bfffc4 	movi	r2,-1
  805ce0:	220f803a 	cmpltu	r7,r4,r8
  805ce4:	4a4b883a 	add	r5,r9,r9
  805ce8:	394f883a 	add	r7,r7,r5
  805cec:	2095883a 	add	r10,r4,r2
  805cf0:	3897883a 	add	r11,r7,r2
  805cf4:	510d803a 	cmpltu	r6,r10,r4
  805cf8:	6099883a 	add	r12,r12,r2
  805cfc:	32d7883a 	add	r11,r6,r11
  805d00:	00840034 	movhi	r2,4096
  805d04:	10bfffc4 	addi	r2,r2,-1
  805d08:	2011883a 	mov	r8,r4
  805d0c:	3813883a 	mov	r9,r7
  805d10:	a1000315 	stw	r4,12(r20)
  805d14:	a1c00415 	stw	r7,16(r20)
  805d18:	a3000215 	stw	r12,8(r20)
  805d1c:	12c00336 	bltu	r2,r11,805d2c <_fpadd_parts+0x1a8>
  805d20:	58bfed1e 	bne	r11,r2,805cd8 <_fpadd_parts+0x154>
  805d24:	00bfff84 	movi	r2,-2
  805d28:	12bfeb2e 	bgeu	r2,r10,805cd8 <_fpadd_parts+0x154>
  805d2c:	a2800417 	ldw	r10,16(r20)
  805d30:	008000c4 	movi	r2,3
  805d34:	00c80034 	movhi	r3,8192
  805d38:	18ffffc4 	addi	r3,r3,-1
  805d3c:	a2400317 	ldw	r9,12(r20)
  805d40:	a0800015 	stw	r2,0(r20)
  805d44:	1a802336 	bltu	r3,r10,805dd4 <_fpadd_parts+0x250>
  805d48:	a027883a 	mov	r19,r20
  805d4c:	9805883a 	mov	r2,r19
  805d50:	ddc00717 	ldw	r23,28(sp)
  805d54:	dd800617 	ldw	r22,24(sp)
  805d58:	dd400517 	ldw	r21,20(sp)
  805d5c:	dd000417 	ldw	r20,16(sp)
  805d60:	dcc00317 	ldw	r19,12(sp)
  805d64:	dc800217 	ldw	r18,8(sp)
  805d68:	dc400117 	ldw	r17,4(sp)
  805d6c:	dc000017 	ldw	r16,0(sp)
  805d70:	dec00804 	addi	sp,sp,32
  805d74:	f800283a 	ret
  805d78:	20fff41e 	bne	r4,r3,805d4c <_fpadd_parts+0x1c8>
  805d7c:	31000015 	stw	r4,0(r6)
  805d80:	98800117 	ldw	r2,4(r19)
  805d84:	30800115 	stw	r2,4(r6)
  805d88:	98c00217 	ldw	r3,8(r19)
  805d8c:	30c00215 	stw	r3,8(r6)
  805d90:	98800317 	ldw	r2,12(r19)
  805d94:	30800315 	stw	r2,12(r6)
  805d98:	98c00417 	ldw	r3,16(r19)
  805d9c:	30c00415 	stw	r3,16(r6)
  805da0:	98800117 	ldw	r2,4(r19)
  805da4:	28c00117 	ldw	r3,4(r5)
  805da8:	3027883a 	mov	r19,r6
  805dac:	10c4703a 	and	r2,r2,r3
  805db0:	30800115 	stw	r2,4(r6)
  805db4:	003fe506 	br	805d4c <_fpadd_parts+0x1c8>
  805db8:	1dc02616 	blt	r3,r23,805e54 <_fpadd_parts+0x2d0>
  805dbc:	0023883a 	mov	r17,zero
  805dc0:	182f883a 	mov	r23,r3
  805dc4:	0025883a 	mov	r18,zero
  805dc8:	003fa806 	br	805c6c <_fpadd_parts+0xe8>
  805dcc:	a827883a 	mov	r19,r21
  805dd0:	003fde06 	br	805d4c <_fpadd_parts+0x1c8>
  805dd4:	01800044 	movi	r6,1
  805dd8:	500497fa 	slli	r2,r10,31
  805ddc:	4808d07a 	srli	r4,r9,1
  805de0:	518ad83a 	srl	r5,r10,r6
  805de4:	a2000217 	ldw	r8,8(r20)
  805de8:	1108b03a 	or	r4,r2,r4
  805dec:	0007883a 	mov	r3,zero
  805df0:	4984703a 	and	r2,r9,r6
  805df4:	208cb03a 	or	r6,r4,r2
  805df8:	28ceb03a 	or	r7,r5,r3
  805dfc:	42000044 	addi	r8,r8,1
  805e00:	a027883a 	mov	r19,r20
  805e04:	a1c00415 	stw	r7,16(r20)
  805e08:	a2000215 	stw	r8,8(r20)
  805e0c:	a1800315 	stw	r6,12(r20)
  805e10:	003fce06 	br	805d4c <_fpadd_parts+0x1c8>
  805e14:	8bc5c83a 	sub	r2,r17,r15
  805e18:	8889803a 	cmpltu	r4,r17,r2
  805e1c:	9407c83a 	sub	r3,r18,r16
  805e20:	1909c83a 	sub	r4,r3,r4
  805e24:	100d883a 	mov	r6,r2
  805e28:	200f883a 	mov	r7,r4
  805e2c:	003f9906 	br	805c94 <_fpadd_parts+0x110>
  805e30:	7c45883a 	add	r2,r15,r17
  805e34:	13c9803a 	cmpltu	r4,r2,r15
  805e38:	8487883a 	add	r3,r16,r18
  805e3c:	20c9883a 	add	r4,r4,r3
  805e40:	a1400115 	stw	r5,4(r20)
  805e44:	a5c00215 	stw	r23,8(r20)
  805e48:	a0800315 	stw	r2,12(r20)
  805e4c:	a1000415 	stw	r4,16(r20)
  805e50:	003fb606 	br	805d2c <_fpadd_parts+0x1a8>
  805e54:	001f883a 	mov	r15,zero
  805e58:	0021883a 	mov	r16,zero
  805e5c:	003f8306 	br	805c6c <_fpadd_parts+0xe8>
  805e60:	018dc83a 	sub	r6,zero,r6
  805e64:	003f6706 	br	805c04 <_fpadd_parts+0x80>
  805e68:	00bfff84 	movi	r2,-2
  805e6c:	117faf36 	bltu	r2,r5,805d2c <_fpadd_parts+0x1a8>
  805e70:	003f9806 	br	805cd4 <_fpadd_parts+0x150>
  805e74:	0005883a 	mov	r2,zero
  805e78:	1189c83a 	sub	r4,r2,r6
  805e7c:	1105803a 	cmpltu	r2,r2,r4
  805e80:	01cbc83a 	sub	r5,zero,r7
  805e84:	2885c83a 	sub	r2,r5,r2
  805e88:	01800044 	movi	r6,1
  805e8c:	a1800115 	stw	r6,4(r20)
  805e90:	a5c00215 	stw	r23,8(r20)
  805e94:	a1000315 	stw	r4,12(r20)
  805e98:	a0800415 	stw	r2,16(r20)
  805e9c:	003f8206 	br	805ca8 <_fpadd_parts+0x124>
  805ea0:	203f7226 	beq	r4,zero,805c6c <_fpadd_parts+0xe8>
  805ea4:	35bff804 	addi	r22,r6,-32
  805ea8:	b9af883a 	add	r23,r23,r6
  805eac:	b0003116 	blt	r22,zero,805f74 <_fpadd_parts+0x3f0>
  805eb0:	959ad83a 	srl	r13,r18,r22
  805eb4:	001d883a 	mov	r14,zero
  805eb8:	000f883a 	mov	r7,zero
  805ebc:	01000044 	movi	r4,1
  805ec0:	0011883a 	mov	r8,zero
  805ec4:	b0002516 	blt	r22,zero,805f5c <_fpadd_parts+0x3d8>
  805ec8:	2594983a 	sll	r10,r4,r22
  805ecc:	0013883a 	mov	r9,zero
  805ed0:	00bfffc4 	movi	r2,-1
  805ed4:	4889883a 	add	r4,r9,r2
  805ed8:	508b883a 	add	r5,r10,r2
  805edc:	224d803a 	cmpltu	r6,r4,r9
  805ee0:	314b883a 	add	r5,r6,r5
  805ee4:	8904703a 	and	r2,r17,r4
  805ee8:	9146703a 	and	r3,r18,r5
  805eec:	10c4b03a 	or	r2,r2,r3
  805ef0:	10000226 	beq	r2,zero,805efc <_fpadd_parts+0x378>
  805ef4:	01c00044 	movi	r7,1
  805ef8:	0011883a 	mov	r8,zero
  805efc:	69e2b03a 	or	r17,r13,r7
  805f00:	7224b03a 	or	r18,r14,r8
  805f04:	003f5906 	br	805c6c <_fpadd_parts+0xe8>
  805f08:	8407883a 	add	r3,r16,r16
  805f0c:	008007c4 	movi	r2,31
  805f10:	1185c83a 	sub	r2,r2,r6
  805f14:	1886983a 	sll	r3,r3,r2
  805f18:	7996d83a 	srl	r11,r15,r6
  805f1c:	8198d83a 	srl	r12,r16,r6
  805f20:	1ad6b03a 	or	r11,r3,r11
  805f24:	003f3e06 	br	805c20 <_fpadd_parts+0x9c>
  805f28:	2006d07a 	srli	r3,r4,1
  805f2c:	008007c4 	movi	r2,31
  805f30:	1185c83a 	sub	r2,r2,r6
  805f34:	1890d83a 	srl	r8,r3,r2
  805f38:	218e983a 	sll	r7,r4,r6
  805f3c:	003f3e06 	br	805c38 <_fpadd_parts+0xb4>
  805f40:	113f821e 	bne	r2,r4,805d4c <_fpadd_parts+0x1c8>
  805f44:	28c00117 	ldw	r3,4(r5)
  805f48:	98800117 	ldw	r2,4(r19)
  805f4c:	10ff7f26 	beq	r2,r3,805d4c <_fpadd_parts+0x1c8>
  805f50:	04c020b4 	movhi	r19,130
  805f54:	9ceeff04 	addi	r19,r19,-17412
  805f58:	003f7c06 	br	805d4c <_fpadd_parts+0x1c8>
  805f5c:	2006d07a 	srli	r3,r4,1
  805f60:	008007c4 	movi	r2,31
  805f64:	1185c83a 	sub	r2,r2,r6
  805f68:	1894d83a 	srl	r10,r3,r2
  805f6c:	2192983a 	sll	r9,r4,r6
  805f70:	003fd706 	br	805ed0 <_fpadd_parts+0x34c>
  805f74:	9487883a 	add	r3,r18,r18
  805f78:	008007c4 	movi	r2,31
  805f7c:	1185c83a 	sub	r2,r2,r6
  805f80:	1886983a 	sll	r3,r3,r2
  805f84:	899ad83a 	srl	r13,r17,r6
  805f88:	919cd83a 	srl	r14,r18,r6
  805f8c:	1b5ab03a 	or	r13,r3,r13
  805f90:	003fc906 	br	805eb8 <_fpadd_parts+0x334>

00805f94 <__subdf3>:
  805f94:	deffea04 	addi	sp,sp,-88
  805f98:	dcc01415 	stw	r19,80(sp)
  805f9c:	dcc00404 	addi	r19,sp,16
  805fa0:	2011883a 	mov	r8,r4
  805fa4:	2813883a 	mov	r9,r5
  805fa8:	dc401315 	stw	r17,76(sp)
  805fac:	d809883a 	mov	r4,sp
  805fb0:	980b883a 	mov	r5,r19
  805fb4:	dc400904 	addi	r17,sp,36
  805fb8:	dfc01515 	stw	ra,84(sp)
  805fbc:	da400115 	stw	r9,4(sp)
  805fc0:	d9c00315 	stw	r7,12(sp)
  805fc4:	da000015 	stw	r8,0(sp)
  805fc8:	d9800215 	stw	r6,8(sp)
  805fcc:	08073800 	call	807380 <__unpack_d>
  805fd0:	d9000204 	addi	r4,sp,8
  805fd4:	880b883a 	mov	r5,r17
  805fd8:	08073800 	call	807380 <__unpack_d>
  805fdc:	d8800a17 	ldw	r2,40(sp)
  805fe0:	880b883a 	mov	r5,r17
  805fe4:	9809883a 	mov	r4,r19
  805fe8:	d9800e04 	addi	r6,sp,56
  805fec:	1080005c 	xori	r2,r2,1
  805ff0:	d8800a15 	stw	r2,40(sp)
  805ff4:	0805b840 	call	805b84 <_fpadd_parts>
  805ff8:	1009883a 	mov	r4,r2
  805ffc:	080706c0 	call	80706c <__pack_d>
  806000:	dfc01517 	ldw	ra,84(sp)
  806004:	dcc01417 	ldw	r19,80(sp)
  806008:	dc401317 	ldw	r17,76(sp)
  80600c:	dec01604 	addi	sp,sp,88
  806010:	f800283a 	ret

00806014 <__adddf3>:
  806014:	deffea04 	addi	sp,sp,-88
  806018:	dcc01415 	stw	r19,80(sp)
  80601c:	dcc00404 	addi	r19,sp,16
  806020:	2011883a 	mov	r8,r4
  806024:	2813883a 	mov	r9,r5
  806028:	dc401315 	stw	r17,76(sp)
  80602c:	d809883a 	mov	r4,sp
  806030:	980b883a 	mov	r5,r19
  806034:	dc400904 	addi	r17,sp,36
  806038:	dfc01515 	stw	ra,84(sp)
  80603c:	da400115 	stw	r9,4(sp)
  806040:	d9c00315 	stw	r7,12(sp)
  806044:	da000015 	stw	r8,0(sp)
  806048:	d9800215 	stw	r6,8(sp)
  80604c:	08073800 	call	807380 <__unpack_d>
  806050:	d9000204 	addi	r4,sp,8
  806054:	880b883a 	mov	r5,r17
  806058:	08073800 	call	807380 <__unpack_d>
  80605c:	d9800e04 	addi	r6,sp,56
  806060:	9809883a 	mov	r4,r19
  806064:	880b883a 	mov	r5,r17
  806068:	0805b840 	call	805b84 <_fpadd_parts>
  80606c:	1009883a 	mov	r4,r2
  806070:	080706c0 	call	80706c <__pack_d>
  806074:	dfc01517 	ldw	ra,84(sp)
  806078:	dcc01417 	ldw	r19,80(sp)
  80607c:	dc401317 	ldw	r17,76(sp)
  806080:	dec01604 	addi	sp,sp,88
  806084:	f800283a 	ret

00806088 <__muldf3>:
  806088:	deffe004 	addi	sp,sp,-128
  80608c:	dc401815 	stw	r17,96(sp)
  806090:	dc400404 	addi	r17,sp,16
  806094:	2011883a 	mov	r8,r4
  806098:	2813883a 	mov	r9,r5
  80609c:	dc001715 	stw	r16,92(sp)
  8060a0:	d809883a 	mov	r4,sp
  8060a4:	880b883a 	mov	r5,r17
  8060a8:	dc000904 	addi	r16,sp,36
  8060ac:	dfc01f15 	stw	ra,124(sp)
  8060b0:	da400115 	stw	r9,4(sp)
  8060b4:	d9c00315 	stw	r7,12(sp)
  8060b8:	da000015 	stw	r8,0(sp)
  8060bc:	d9800215 	stw	r6,8(sp)
  8060c0:	ddc01e15 	stw	r23,120(sp)
  8060c4:	dd801d15 	stw	r22,116(sp)
  8060c8:	dd401c15 	stw	r21,112(sp)
  8060cc:	dd001b15 	stw	r20,108(sp)
  8060d0:	dcc01a15 	stw	r19,104(sp)
  8060d4:	dc801915 	stw	r18,100(sp)
  8060d8:	08073800 	call	807380 <__unpack_d>
  8060dc:	d9000204 	addi	r4,sp,8
  8060e0:	800b883a 	mov	r5,r16
  8060e4:	08073800 	call	807380 <__unpack_d>
  8060e8:	d9000417 	ldw	r4,16(sp)
  8060ec:	00800044 	movi	r2,1
  8060f0:	1100102e 	bgeu	r2,r4,806134 <__muldf3+0xac>
  8060f4:	d8c00917 	ldw	r3,36(sp)
  8060f8:	10c0062e 	bgeu	r2,r3,806114 <__muldf3+0x8c>
  8060fc:	00800104 	movi	r2,4
  806100:	20800a26 	beq	r4,r2,80612c <__muldf3+0xa4>
  806104:	1880cc26 	beq	r3,r2,806438 <__muldf3+0x3b0>
  806108:	00800084 	movi	r2,2
  80610c:	20800926 	beq	r4,r2,806134 <__muldf3+0xac>
  806110:	1880191e 	bne	r3,r2,806178 <__muldf3+0xf0>
  806114:	d8c00a17 	ldw	r3,40(sp)
  806118:	d8800517 	ldw	r2,20(sp)
  80611c:	8009883a 	mov	r4,r16
  806120:	10c4c03a 	cmpne	r2,r2,r3
  806124:	d8800a15 	stw	r2,40(sp)
  806128:	00000706 	br	806148 <__muldf3+0xc0>
  80612c:	00800084 	movi	r2,2
  806130:	1880c326 	beq	r3,r2,806440 <__muldf3+0x3b8>
  806134:	d8800517 	ldw	r2,20(sp)
  806138:	d8c00a17 	ldw	r3,40(sp)
  80613c:	8809883a 	mov	r4,r17
  806140:	10c4c03a 	cmpne	r2,r2,r3
  806144:	d8800515 	stw	r2,20(sp)
  806148:	080706c0 	call	80706c <__pack_d>
  80614c:	dfc01f17 	ldw	ra,124(sp)
  806150:	ddc01e17 	ldw	r23,120(sp)
  806154:	dd801d17 	ldw	r22,116(sp)
  806158:	dd401c17 	ldw	r21,112(sp)
  80615c:	dd001b17 	ldw	r20,108(sp)
  806160:	dcc01a17 	ldw	r19,104(sp)
  806164:	dc801917 	ldw	r18,100(sp)
  806168:	dc401817 	ldw	r17,96(sp)
  80616c:	dc001717 	ldw	r16,92(sp)
  806170:	dec02004 	addi	sp,sp,128
  806174:	f800283a 	ret
  806178:	dd800717 	ldw	r22,28(sp)
  80617c:	dc800c17 	ldw	r18,48(sp)
  806180:	002b883a 	mov	r21,zero
  806184:	0023883a 	mov	r17,zero
  806188:	a80b883a 	mov	r5,r21
  80618c:	b00d883a 	mov	r6,r22
  806190:	880f883a 	mov	r7,r17
  806194:	ddc00817 	ldw	r23,32(sp)
  806198:	dcc00d17 	ldw	r19,52(sp)
  80619c:	9009883a 	mov	r4,r18
  8061a0:	0806c740 	call	806c74 <__muldi3>
  8061a4:	001b883a 	mov	r13,zero
  8061a8:	680f883a 	mov	r7,r13
  8061ac:	b009883a 	mov	r4,r22
  8061b0:	000b883a 	mov	r5,zero
  8061b4:	980d883a 	mov	r6,r19
  8061b8:	b82d883a 	mov	r22,r23
  8061bc:	002f883a 	mov	r23,zero
  8061c0:	db401615 	stw	r13,88(sp)
  8061c4:	d8801315 	stw	r2,76(sp)
  8061c8:	d8c01415 	stw	r3,80(sp)
  8061cc:	dcc01515 	stw	r19,84(sp)
  8061d0:	0806c740 	call	806c74 <__muldi3>
  8061d4:	b00d883a 	mov	r6,r22
  8061d8:	000b883a 	mov	r5,zero
  8061dc:	9009883a 	mov	r4,r18
  8061e0:	b80f883a 	mov	r7,r23
  8061e4:	1021883a 	mov	r16,r2
  8061e8:	1823883a 	mov	r17,r3
  8061ec:	0806c740 	call	806c74 <__muldi3>
  8061f0:	8085883a 	add	r2,r16,r2
  8061f4:	140d803a 	cmpltu	r6,r2,r16
  8061f8:	88c7883a 	add	r3,r17,r3
  8061fc:	30cd883a 	add	r6,r6,r3
  806200:	1029883a 	mov	r20,r2
  806204:	302b883a 	mov	r21,r6
  806208:	da801317 	ldw	r10,76(sp)
  80620c:	dac01417 	ldw	r11,80(sp)
  806210:	db001517 	ldw	r12,84(sp)
  806214:	db401617 	ldw	r13,88(sp)
  806218:	3440612e 	bgeu	r6,r17,8063a0 <__muldf3+0x318>
  80621c:	0009883a 	mov	r4,zero
  806220:	5105883a 	add	r2,r10,r4
  806224:	128d803a 	cmpltu	r6,r2,r10
  806228:	5d07883a 	add	r3,r11,r20
  80622c:	30cd883a 	add	r6,r6,r3
  806230:	0021883a 	mov	r16,zero
  806234:	04400044 	movi	r17,1
  806238:	1025883a 	mov	r18,r2
  80623c:	3027883a 	mov	r19,r6
  806240:	32c06236 	bltu	r6,r11,8063cc <__muldf3+0x344>
  806244:	59807a26 	beq	r11,r6,806430 <__muldf3+0x3a8>
  806248:	680b883a 	mov	r5,r13
  80624c:	b80f883a 	mov	r7,r23
  806250:	6009883a 	mov	r4,r12
  806254:	b00d883a 	mov	r6,r22
  806258:	0806c740 	call	806c74 <__muldi3>
  80625c:	1009883a 	mov	r4,r2
  806260:	000f883a 	mov	r7,zero
  806264:	1545883a 	add	r2,r2,r21
  806268:	1111803a 	cmpltu	r8,r2,r4
  80626c:	19c7883a 	add	r3,r3,r7
  806270:	40c7883a 	add	r3,r8,r3
  806274:	88cb883a 	add	r5,r17,r3
  806278:	d8c00617 	ldw	r3,24(sp)
  80627c:	8089883a 	add	r4,r16,r2
  806280:	d8800b17 	ldw	r2,44(sp)
  806284:	18c00104 	addi	r3,r3,4
  806288:	240d803a 	cmpltu	r6,r4,r16
  80628c:	10c7883a 	add	r3,r2,r3
  806290:	2013883a 	mov	r9,r4
  806294:	d8800a17 	ldw	r2,40(sp)
  806298:	d9000517 	ldw	r4,20(sp)
  80629c:	314d883a 	add	r6,r6,r5
  8062a0:	3015883a 	mov	r10,r6
  8062a4:	2088c03a 	cmpne	r4,r4,r2
  8062a8:	00880034 	movhi	r2,8192
  8062ac:	10bfffc4 	addi	r2,r2,-1
  8062b0:	d9000f15 	stw	r4,60(sp)
  8062b4:	d8c01015 	stw	r3,64(sp)
  8062b8:	1180162e 	bgeu	r2,r6,806314 <__muldf3+0x28c>
  8062bc:	1811883a 	mov	r8,r3
  8062c0:	101f883a 	mov	r15,r2
  8062c4:	980497fa 	slli	r2,r19,31
  8062c8:	9016d07a 	srli	r11,r18,1
  8062cc:	500697fa 	slli	r3,r10,31
  8062d0:	480cd07a 	srli	r6,r9,1
  8062d4:	500ed07a 	srli	r7,r10,1
  8062d8:	12d6b03a 	or	r11,r2,r11
  8062dc:	00800044 	movi	r2,1
  8062e0:	198cb03a 	or	r6,r3,r6
  8062e4:	4888703a 	and	r4,r9,r2
  8062e8:	9818d07a 	srli	r12,r19,1
  8062ec:	001b883a 	mov	r13,zero
  8062f0:	03a00034 	movhi	r14,32768
  8062f4:	3013883a 	mov	r9,r6
  8062f8:	3815883a 	mov	r10,r7
  8062fc:	4091883a 	add	r8,r8,r2
  806300:	20000226 	beq	r4,zero,80630c <__muldf3+0x284>
  806304:	5b64b03a 	or	r18,r11,r13
  806308:	63a6b03a 	or	r19,r12,r14
  80630c:	7abfed36 	bltu	r15,r10,8062c4 <__muldf3+0x23c>
  806310:	da001015 	stw	r8,64(sp)
  806314:	00840034 	movhi	r2,4096
  806318:	10bfffc4 	addi	r2,r2,-1
  80631c:	12801436 	bltu	r2,r10,806370 <__muldf3+0x2e8>
  806320:	da001017 	ldw	r8,64(sp)
  806324:	101f883a 	mov	r15,r2
  806328:	4a45883a 	add	r2,r9,r9
  80632c:	124d803a 	cmpltu	r6,r2,r9
  806330:	5287883a 	add	r3,r10,r10
  806334:	9497883a 	add	r11,r18,r18
  806338:	5c8f803a 	cmpltu	r7,r11,r18
  80633c:	9cd9883a 	add	r12,r19,r19
  806340:	01000044 	movi	r4,1
  806344:	30cd883a 	add	r6,r6,r3
  806348:	3b0f883a 	add	r7,r7,r12
  80634c:	423fffc4 	addi	r8,r8,-1
  806350:	1013883a 	mov	r9,r2
  806354:	3015883a 	mov	r10,r6
  806358:	111ab03a 	or	r13,r2,r4
  80635c:	98003016 	blt	r19,zero,806420 <__muldf3+0x398>
  806360:	5825883a 	mov	r18,r11
  806364:	3827883a 	mov	r19,r7
  806368:	7abfef2e 	bgeu	r15,r10,806328 <__muldf3+0x2a0>
  80636c:	da001015 	stw	r8,64(sp)
  806370:	00803fc4 	movi	r2,255
  806374:	488e703a 	and	r7,r9,r2
  806378:	00802004 	movi	r2,128
  80637c:	0007883a 	mov	r3,zero
  806380:	0011883a 	mov	r8,zero
  806384:	38801826 	beq	r7,r2,8063e8 <__muldf3+0x360>
  806388:	008000c4 	movi	r2,3
  80638c:	d9000e04 	addi	r4,sp,56
  806390:	da801215 	stw	r10,72(sp)
  806394:	d8800e15 	stw	r2,56(sp)
  806398:	da401115 	stw	r9,68(sp)
  80639c:	003f6a06 	br	806148 <__muldf3+0xc0>
  8063a0:	89802126 	beq	r17,r6,806428 <__muldf3+0x3a0>
  8063a4:	0009883a 	mov	r4,zero
  8063a8:	5105883a 	add	r2,r10,r4
  8063ac:	128d803a 	cmpltu	r6,r2,r10
  8063b0:	5d07883a 	add	r3,r11,r20
  8063b4:	30cd883a 	add	r6,r6,r3
  8063b8:	0021883a 	mov	r16,zero
  8063bc:	0023883a 	mov	r17,zero
  8063c0:	1025883a 	mov	r18,r2
  8063c4:	3027883a 	mov	r19,r6
  8063c8:	32ff9e2e 	bgeu	r6,r11,806244 <__muldf3+0x1bc>
  8063cc:	00800044 	movi	r2,1
  8063d0:	8089883a 	add	r4,r16,r2
  8063d4:	240d803a 	cmpltu	r6,r4,r16
  8063d8:	344d883a 	add	r6,r6,r17
  8063dc:	2021883a 	mov	r16,r4
  8063e0:	3023883a 	mov	r17,r6
  8063e4:	003f9806 	br	806248 <__muldf3+0x1c0>
  8063e8:	403fe71e 	bne	r8,zero,806388 <__muldf3+0x300>
  8063ec:	01004004 	movi	r4,256
  8063f0:	4904703a 	and	r2,r9,r4
  8063f4:	10c4b03a 	or	r2,r2,r3
  8063f8:	103fe31e 	bne	r2,zero,806388 <__muldf3+0x300>
  8063fc:	94c4b03a 	or	r2,r18,r19
  806400:	103fe126 	beq	r2,zero,806388 <__muldf3+0x300>
  806404:	49c5883a 	add	r2,r9,r7
  806408:	1251803a 	cmpltu	r8,r2,r9
  80640c:	4291883a 	add	r8,r8,r10
  806410:	013fc004 	movi	r4,-256
  806414:	1112703a 	and	r9,r2,r4
  806418:	4015883a 	mov	r10,r8
  80641c:	003fda06 	br	806388 <__muldf3+0x300>
  806420:	6813883a 	mov	r9,r13
  806424:	003fce06 	br	806360 <__muldf3+0x2d8>
  806428:	143f7c36 	bltu	r2,r16,80621c <__muldf3+0x194>
  80642c:	003fdd06 	br	8063a4 <__muldf3+0x31c>
  806430:	12bf852e 	bgeu	r2,r10,806248 <__muldf3+0x1c0>
  806434:	003fe506 	br	8063cc <__muldf3+0x344>
  806438:	00800084 	movi	r2,2
  80643c:	20bf351e 	bne	r4,r2,806114 <__muldf3+0x8c>
  806440:	010020b4 	movhi	r4,130
  806444:	212eff04 	addi	r4,r4,-17412
  806448:	003f3f06 	br	806148 <__muldf3+0xc0>

0080644c <__divdf3>:
  80644c:	deffed04 	addi	sp,sp,-76
  806450:	dcc01115 	stw	r19,68(sp)
  806454:	dcc00404 	addi	r19,sp,16
  806458:	2011883a 	mov	r8,r4
  80645c:	2813883a 	mov	r9,r5
  806460:	dc000e15 	stw	r16,56(sp)
  806464:	d809883a 	mov	r4,sp
  806468:	980b883a 	mov	r5,r19
  80646c:	dc000904 	addi	r16,sp,36
  806470:	dfc01215 	stw	ra,72(sp)
  806474:	da400115 	stw	r9,4(sp)
  806478:	d9c00315 	stw	r7,12(sp)
  80647c:	da000015 	stw	r8,0(sp)
  806480:	d9800215 	stw	r6,8(sp)
  806484:	dc801015 	stw	r18,64(sp)
  806488:	dc400f15 	stw	r17,60(sp)
  80648c:	08073800 	call	807380 <__unpack_d>
  806490:	d9000204 	addi	r4,sp,8
  806494:	800b883a 	mov	r5,r16
  806498:	08073800 	call	807380 <__unpack_d>
  80649c:	d9000417 	ldw	r4,16(sp)
  8064a0:	00800044 	movi	r2,1
  8064a4:	11000b2e 	bgeu	r2,r4,8064d4 <__divdf3+0x88>
  8064a8:	d9400917 	ldw	r5,36(sp)
  8064ac:	1140762e 	bgeu	r2,r5,806688 <__divdf3+0x23c>
  8064b0:	d8800517 	ldw	r2,20(sp)
  8064b4:	d8c00a17 	ldw	r3,40(sp)
  8064b8:	01800104 	movi	r6,4
  8064bc:	10c4f03a 	xor	r2,r2,r3
  8064c0:	d8800515 	stw	r2,20(sp)
  8064c4:	21800226 	beq	r4,r6,8064d0 <__divdf3+0x84>
  8064c8:	00800084 	movi	r2,2
  8064cc:	2080141e 	bne	r4,r2,806520 <__divdf3+0xd4>
  8064d0:	29000926 	beq	r5,r4,8064f8 <__divdf3+0xac>
  8064d4:	9809883a 	mov	r4,r19
  8064d8:	080706c0 	call	80706c <__pack_d>
  8064dc:	dfc01217 	ldw	ra,72(sp)
  8064e0:	dcc01117 	ldw	r19,68(sp)
  8064e4:	dc801017 	ldw	r18,64(sp)
  8064e8:	dc400f17 	ldw	r17,60(sp)
  8064ec:	dc000e17 	ldw	r16,56(sp)
  8064f0:	dec01304 	addi	sp,sp,76
  8064f4:	f800283a 	ret
  8064f8:	010020b4 	movhi	r4,130
  8064fc:	212eff04 	addi	r4,r4,-17412
  806500:	080706c0 	call	80706c <__pack_d>
  806504:	dfc01217 	ldw	ra,72(sp)
  806508:	dcc01117 	ldw	r19,68(sp)
  80650c:	dc801017 	ldw	r18,64(sp)
  806510:	dc400f17 	ldw	r17,60(sp)
  806514:	dc000e17 	ldw	r16,56(sp)
  806518:	dec01304 	addi	sp,sp,76
  80651c:	f800283a 	ret
  806520:	29805b26 	beq	r5,r6,806690 <__divdf3+0x244>
  806524:	28802d26 	beq	r5,r2,8065dc <__divdf3+0x190>
  806528:	d8c00617 	ldw	r3,24(sp)
  80652c:	d8800b17 	ldw	r2,44(sp)
  806530:	d9c00817 	ldw	r7,32(sp)
  806534:	dc400d17 	ldw	r17,52(sp)
  806538:	188bc83a 	sub	r5,r3,r2
  80653c:	d9800717 	ldw	r6,28(sp)
  806540:	dc000c17 	ldw	r16,48(sp)
  806544:	d9400615 	stw	r5,24(sp)
  806548:	3c403836 	bltu	r7,r17,80662c <__divdf3+0x1e0>
  80654c:	89c03626 	beq	r17,r7,806628 <__divdf3+0x1dc>
  806550:	0015883a 	mov	r10,zero
  806554:	001d883a 	mov	r14,zero
  806558:	02c40034 	movhi	r11,4096
  80655c:	001f883a 	mov	r15,zero
  806560:	003f883a 	mov	ra,zero
  806564:	04800f44 	movi	r18,61
  806568:	00000f06 	br	8065a8 <__divdf3+0x15c>
  80656c:	601d883a 	mov	r14,r12
  806570:	681f883a 	mov	r15,r13
  806574:	400d883a 	mov	r6,r8
  806578:	100f883a 	mov	r7,r2
  80657c:	3191883a 	add	r8,r6,r6
  806580:	5808d07a 	srli	r4,r11,1
  806584:	4185803a 	cmpltu	r2,r8,r6
  806588:	39d3883a 	add	r9,r7,r7
  80658c:	28c6b03a 	or	r3,r5,r3
  806590:	1245883a 	add	r2,r2,r9
  806594:	1815883a 	mov	r10,r3
  806598:	2017883a 	mov	r11,r4
  80659c:	400d883a 	mov	r6,r8
  8065a0:	100f883a 	mov	r7,r2
  8065a4:	fc801726 	beq	ra,r18,806604 <__divdf3+0x1b8>
  8065a8:	580a97fa 	slli	r5,r11,31
  8065ac:	5006d07a 	srli	r3,r10,1
  8065b0:	ffc00044 	addi	ra,ra,1
  8065b4:	3c7ff136 	bltu	r7,r17,80657c <__divdf3+0x130>
  8065b8:	3411c83a 	sub	r8,r6,r16
  8065bc:	3205803a 	cmpltu	r2,r6,r8
  8065c0:	3c53c83a 	sub	r9,r7,r17
  8065c4:	7298b03a 	or	r12,r14,r10
  8065c8:	7adab03a 	or	r13,r15,r11
  8065cc:	4885c83a 	sub	r2,r9,r2
  8065d0:	89ffe61e 	bne	r17,r7,80656c <__divdf3+0x120>
  8065d4:	343fe936 	bltu	r6,r16,80657c <__divdf3+0x130>
  8065d8:	003fe406 	br	80656c <__divdf3+0x120>
  8065dc:	9809883a 	mov	r4,r19
  8065e0:	d9800415 	stw	r6,16(sp)
  8065e4:	080706c0 	call	80706c <__pack_d>
  8065e8:	dfc01217 	ldw	ra,72(sp)
  8065ec:	dcc01117 	ldw	r19,68(sp)
  8065f0:	dc801017 	ldw	r18,64(sp)
  8065f4:	dc400f17 	ldw	r17,60(sp)
  8065f8:	dc000e17 	ldw	r16,56(sp)
  8065fc:	dec01304 	addi	sp,sp,76
  806600:	f800283a 	ret
  806604:	00803fc4 	movi	r2,255
  806608:	7090703a 	and	r8,r14,r2
  80660c:	00802004 	movi	r2,128
  806610:	0007883a 	mov	r3,zero
  806614:	0013883a 	mov	r9,zero
  806618:	40800d26 	beq	r8,r2,806650 <__divdf3+0x204>
  80661c:	dbc00815 	stw	r15,32(sp)
  806620:	db800715 	stw	r14,28(sp)
  806624:	003fab06 	br	8064d4 <__divdf3+0x88>
  806628:	343fc92e 	bgeu	r6,r16,806550 <__divdf3+0x104>
  80662c:	3185883a 	add	r2,r6,r6
  806630:	1189803a 	cmpltu	r4,r2,r6
  806634:	39c7883a 	add	r3,r7,r7
  806638:	20c9883a 	add	r4,r4,r3
  80663c:	297fffc4 	addi	r5,r5,-1
  806640:	100d883a 	mov	r6,r2
  806644:	200f883a 	mov	r7,r4
  806648:	d9400615 	stw	r5,24(sp)
  80664c:	003fc006 	br	806550 <__divdf3+0x104>
  806650:	483ff21e 	bne	r9,zero,80661c <__divdf3+0x1d0>
  806654:	01004004 	movi	r4,256
  806658:	7104703a 	and	r2,r14,r4
  80665c:	10c4b03a 	or	r2,r2,r3
  806660:	103fee1e 	bne	r2,zero,80661c <__divdf3+0x1d0>
  806664:	31c4b03a 	or	r2,r6,r7
  806668:	103fec26 	beq	r2,zero,80661c <__divdf3+0x1d0>
  80666c:	7205883a 	add	r2,r14,r8
  806670:	1391803a 	cmpltu	r8,r2,r14
  806674:	43d1883a 	add	r8,r8,r15
  806678:	013fc004 	movi	r4,-256
  80667c:	111c703a 	and	r14,r2,r4
  806680:	401f883a 	mov	r15,r8
  806684:	003fe506 	br	80661c <__divdf3+0x1d0>
  806688:	8009883a 	mov	r4,r16
  80668c:	003f9206 	br	8064d8 <__divdf3+0x8c>
  806690:	9809883a 	mov	r4,r19
  806694:	d8000715 	stw	zero,28(sp)
  806698:	d8000815 	stw	zero,32(sp)
  80669c:	d8000615 	stw	zero,24(sp)
  8066a0:	003f8d06 	br	8064d8 <__divdf3+0x8c>

008066a4 <__eqdf2>:
  8066a4:	deffef04 	addi	sp,sp,-68
  8066a8:	dc400f15 	stw	r17,60(sp)
  8066ac:	dc400404 	addi	r17,sp,16
  8066b0:	2005883a 	mov	r2,r4
  8066b4:	2807883a 	mov	r3,r5
  8066b8:	dc000e15 	stw	r16,56(sp)
  8066bc:	d809883a 	mov	r4,sp
  8066c0:	880b883a 	mov	r5,r17
  8066c4:	dc000904 	addi	r16,sp,36
  8066c8:	d8c00115 	stw	r3,4(sp)
  8066cc:	d8800015 	stw	r2,0(sp)
  8066d0:	d9800215 	stw	r6,8(sp)
  8066d4:	dfc01015 	stw	ra,64(sp)
  8066d8:	d9c00315 	stw	r7,12(sp)
  8066dc:	08073800 	call	807380 <__unpack_d>
  8066e0:	d9000204 	addi	r4,sp,8
  8066e4:	800b883a 	mov	r5,r16
  8066e8:	08073800 	call	807380 <__unpack_d>
  8066ec:	d8800417 	ldw	r2,16(sp)
  8066f0:	00c00044 	movi	r3,1
  8066f4:	180d883a 	mov	r6,r3
  8066f8:	1880062e 	bgeu	r3,r2,806714 <__eqdf2+0x70>
  8066fc:	d8800917 	ldw	r2,36(sp)
  806700:	8809883a 	mov	r4,r17
  806704:	800b883a 	mov	r5,r16
  806708:	1880022e 	bgeu	r3,r2,806714 <__eqdf2+0x70>
  80670c:	08074b80 	call	8074b8 <__fpcmp_parts_d>
  806710:	100d883a 	mov	r6,r2
  806714:	3005883a 	mov	r2,r6
  806718:	dfc01017 	ldw	ra,64(sp)
  80671c:	dc400f17 	ldw	r17,60(sp)
  806720:	dc000e17 	ldw	r16,56(sp)
  806724:	dec01104 	addi	sp,sp,68
  806728:	f800283a 	ret

0080672c <__nedf2>:
  80672c:	deffef04 	addi	sp,sp,-68
  806730:	dc400f15 	stw	r17,60(sp)
  806734:	dc400404 	addi	r17,sp,16
  806738:	2005883a 	mov	r2,r4
  80673c:	2807883a 	mov	r3,r5
  806740:	dc000e15 	stw	r16,56(sp)
  806744:	d809883a 	mov	r4,sp
  806748:	880b883a 	mov	r5,r17
  80674c:	dc000904 	addi	r16,sp,36
  806750:	d8c00115 	stw	r3,4(sp)
  806754:	d8800015 	stw	r2,0(sp)
  806758:	d9800215 	stw	r6,8(sp)
  80675c:	dfc01015 	stw	ra,64(sp)
  806760:	d9c00315 	stw	r7,12(sp)
  806764:	08073800 	call	807380 <__unpack_d>
  806768:	d9000204 	addi	r4,sp,8
  80676c:	800b883a 	mov	r5,r16
  806770:	08073800 	call	807380 <__unpack_d>
  806774:	d8800417 	ldw	r2,16(sp)
  806778:	00c00044 	movi	r3,1
  80677c:	180d883a 	mov	r6,r3
  806780:	1880062e 	bgeu	r3,r2,80679c <__nedf2+0x70>
  806784:	d8800917 	ldw	r2,36(sp)
  806788:	8809883a 	mov	r4,r17
  80678c:	800b883a 	mov	r5,r16
  806790:	1880022e 	bgeu	r3,r2,80679c <__nedf2+0x70>
  806794:	08074b80 	call	8074b8 <__fpcmp_parts_d>
  806798:	100d883a 	mov	r6,r2
  80679c:	3005883a 	mov	r2,r6
  8067a0:	dfc01017 	ldw	ra,64(sp)
  8067a4:	dc400f17 	ldw	r17,60(sp)
  8067a8:	dc000e17 	ldw	r16,56(sp)
  8067ac:	dec01104 	addi	sp,sp,68
  8067b0:	f800283a 	ret

008067b4 <__gtdf2>:
  8067b4:	deffef04 	addi	sp,sp,-68
  8067b8:	dc400f15 	stw	r17,60(sp)
  8067bc:	dc400404 	addi	r17,sp,16
  8067c0:	2005883a 	mov	r2,r4
  8067c4:	2807883a 	mov	r3,r5
  8067c8:	dc000e15 	stw	r16,56(sp)
  8067cc:	d809883a 	mov	r4,sp
  8067d0:	880b883a 	mov	r5,r17
  8067d4:	dc000904 	addi	r16,sp,36
  8067d8:	d8c00115 	stw	r3,4(sp)
  8067dc:	d8800015 	stw	r2,0(sp)
  8067e0:	d9800215 	stw	r6,8(sp)
  8067e4:	dfc01015 	stw	ra,64(sp)
  8067e8:	d9c00315 	stw	r7,12(sp)
  8067ec:	08073800 	call	807380 <__unpack_d>
  8067f0:	d9000204 	addi	r4,sp,8
  8067f4:	800b883a 	mov	r5,r16
  8067f8:	08073800 	call	807380 <__unpack_d>
  8067fc:	d8800417 	ldw	r2,16(sp)
  806800:	00c00044 	movi	r3,1
  806804:	01bfffc4 	movi	r6,-1
  806808:	1880062e 	bgeu	r3,r2,806824 <__gtdf2+0x70>
  80680c:	d8800917 	ldw	r2,36(sp)
  806810:	8809883a 	mov	r4,r17
  806814:	800b883a 	mov	r5,r16
  806818:	1880022e 	bgeu	r3,r2,806824 <__gtdf2+0x70>
  80681c:	08074b80 	call	8074b8 <__fpcmp_parts_d>
  806820:	100d883a 	mov	r6,r2
  806824:	3005883a 	mov	r2,r6
  806828:	dfc01017 	ldw	ra,64(sp)
  80682c:	dc400f17 	ldw	r17,60(sp)
  806830:	dc000e17 	ldw	r16,56(sp)
  806834:	dec01104 	addi	sp,sp,68
  806838:	f800283a 	ret

0080683c <__ltdf2>:
  80683c:	deffef04 	addi	sp,sp,-68
  806840:	dc400f15 	stw	r17,60(sp)
  806844:	dc400404 	addi	r17,sp,16
  806848:	2005883a 	mov	r2,r4
  80684c:	2807883a 	mov	r3,r5
  806850:	dc000e15 	stw	r16,56(sp)
  806854:	d809883a 	mov	r4,sp
  806858:	880b883a 	mov	r5,r17
  80685c:	dc000904 	addi	r16,sp,36
  806860:	d8c00115 	stw	r3,4(sp)
  806864:	d8800015 	stw	r2,0(sp)
  806868:	d9800215 	stw	r6,8(sp)
  80686c:	dfc01015 	stw	ra,64(sp)
  806870:	d9c00315 	stw	r7,12(sp)
  806874:	08073800 	call	807380 <__unpack_d>
  806878:	d9000204 	addi	r4,sp,8
  80687c:	800b883a 	mov	r5,r16
  806880:	08073800 	call	807380 <__unpack_d>
  806884:	d8800417 	ldw	r2,16(sp)
  806888:	00c00044 	movi	r3,1
  80688c:	180d883a 	mov	r6,r3
  806890:	1880062e 	bgeu	r3,r2,8068ac <__ltdf2+0x70>
  806894:	d8800917 	ldw	r2,36(sp)
  806898:	8809883a 	mov	r4,r17
  80689c:	800b883a 	mov	r5,r16
  8068a0:	1880022e 	bgeu	r3,r2,8068ac <__ltdf2+0x70>
  8068a4:	08074b80 	call	8074b8 <__fpcmp_parts_d>
  8068a8:	100d883a 	mov	r6,r2
  8068ac:	3005883a 	mov	r2,r6
  8068b0:	dfc01017 	ldw	ra,64(sp)
  8068b4:	dc400f17 	ldw	r17,60(sp)
  8068b8:	dc000e17 	ldw	r16,56(sp)
  8068bc:	dec01104 	addi	sp,sp,68
  8068c0:	f800283a 	ret

008068c4 <__ledf2>:
  8068c4:	deffef04 	addi	sp,sp,-68
  8068c8:	dc400f15 	stw	r17,60(sp)
  8068cc:	dc400404 	addi	r17,sp,16
  8068d0:	2005883a 	mov	r2,r4
  8068d4:	2807883a 	mov	r3,r5
  8068d8:	dc000e15 	stw	r16,56(sp)
  8068dc:	d809883a 	mov	r4,sp
  8068e0:	880b883a 	mov	r5,r17
  8068e4:	dc000904 	addi	r16,sp,36
  8068e8:	d8c00115 	stw	r3,4(sp)
  8068ec:	d8800015 	stw	r2,0(sp)
  8068f0:	d9800215 	stw	r6,8(sp)
  8068f4:	dfc01015 	stw	ra,64(sp)
  8068f8:	d9c00315 	stw	r7,12(sp)
  8068fc:	08073800 	call	807380 <__unpack_d>
  806900:	d9000204 	addi	r4,sp,8
  806904:	800b883a 	mov	r5,r16
  806908:	08073800 	call	807380 <__unpack_d>
  80690c:	d8800417 	ldw	r2,16(sp)
  806910:	00c00044 	movi	r3,1
  806914:	180d883a 	mov	r6,r3
  806918:	1880062e 	bgeu	r3,r2,806934 <__ledf2+0x70>
  80691c:	d8800917 	ldw	r2,36(sp)
  806920:	8809883a 	mov	r4,r17
  806924:	800b883a 	mov	r5,r16
  806928:	1880022e 	bgeu	r3,r2,806934 <__ledf2+0x70>
  80692c:	08074b80 	call	8074b8 <__fpcmp_parts_d>
  806930:	100d883a 	mov	r6,r2
  806934:	3005883a 	mov	r2,r6
  806938:	dfc01017 	ldw	ra,64(sp)
  80693c:	dc400f17 	ldw	r17,60(sp)
  806940:	dc000e17 	ldw	r16,56(sp)
  806944:	dec01104 	addi	sp,sp,68
  806948:	f800283a 	ret

0080694c <__floatsidf>:
  80694c:	2006d7fa 	srli	r3,r4,31
  806950:	defff604 	addi	sp,sp,-40
  806954:	008000c4 	movi	r2,3
  806958:	dfc00915 	stw	ra,36(sp)
  80695c:	dcc00815 	stw	r19,32(sp)
  806960:	dc800715 	stw	r18,28(sp)
  806964:	dc400615 	stw	r17,24(sp)
  806968:	dc000515 	stw	r16,20(sp)
  80696c:	d8800015 	stw	r2,0(sp)
  806970:	d8c00115 	stw	r3,4(sp)
  806974:	20000f1e 	bne	r4,zero,8069b4 <__floatsidf+0x68>
  806978:	00800084 	movi	r2,2
  80697c:	d8800015 	stw	r2,0(sp)
  806980:	d809883a 	mov	r4,sp
  806984:	080706c0 	call	80706c <__pack_d>
  806988:	1009883a 	mov	r4,r2
  80698c:	180b883a 	mov	r5,r3
  806990:	2005883a 	mov	r2,r4
  806994:	2807883a 	mov	r3,r5
  806998:	dfc00917 	ldw	ra,36(sp)
  80699c:	dcc00817 	ldw	r19,32(sp)
  8069a0:	dc800717 	ldw	r18,28(sp)
  8069a4:	dc400617 	ldw	r17,24(sp)
  8069a8:	dc000517 	ldw	r16,20(sp)
  8069ac:	dec00a04 	addi	sp,sp,40
  8069b0:	f800283a 	ret
  8069b4:	00800f04 	movi	r2,60
  8069b8:	1807003a 	cmpeq	r3,r3,zero
  8069bc:	d8800215 	stw	r2,8(sp)
  8069c0:	18001126 	beq	r3,zero,806a08 <__floatsidf+0xbc>
  8069c4:	0027883a 	mov	r19,zero
  8069c8:	2025883a 	mov	r18,r4
  8069cc:	d9000315 	stw	r4,12(sp)
  8069d0:	dcc00415 	stw	r19,16(sp)
  8069d4:	0806d980 	call	806d98 <__clzsi2>
  8069d8:	11000744 	addi	r4,r2,29
  8069dc:	013fe80e 	bge	zero,r4,806980 <__floatsidf+0x34>
  8069e0:	10bfff44 	addi	r2,r2,-3
  8069e4:	10000c16 	blt	r2,zero,806a18 <__floatsidf+0xcc>
  8069e8:	90a2983a 	sll	r17,r18,r2
  8069ec:	0021883a 	mov	r16,zero
  8069f0:	d8800217 	ldw	r2,8(sp)
  8069f4:	dc400415 	stw	r17,16(sp)
  8069f8:	dc000315 	stw	r16,12(sp)
  8069fc:	1105c83a 	sub	r2,r2,r4
  806a00:	d8800215 	stw	r2,8(sp)
  806a04:	003fde06 	br	806980 <__floatsidf+0x34>
  806a08:	00a00034 	movhi	r2,32768
  806a0c:	20800a26 	beq	r4,r2,806a38 <__floatsidf+0xec>
  806a10:	0109c83a 	sub	r4,zero,r4
  806a14:	003feb06 	br	8069c4 <__floatsidf+0x78>
  806a18:	9006d07a 	srli	r3,r18,1
  806a1c:	008007c4 	movi	r2,31
  806a20:	1105c83a 	sub	r2,r2,r4
  806a24:	1886d83a 	srl	r3,r3,r2
  806a28:	9922983a 	sll	r17,r19,r4
  806a2c:	9120983a 	sll	r16,r18,r4
  806a30:	1c62b03a 	or	r17,r3,r17
  806a34:	003fee06 	br	8069f0 <__floatsidf+0xa4>
  806a38:	0009883a 	mov	r4,zero
  806a3c:	01707834 	movhi	r5,49632
  806a40:	003fd306 	br	806990 <__floatsidf+0x44>

00806a44 <__make_dp>:
  806a44:	defff904 	addi	sp,sp,-28
  806a48:	d8c00717 	ldw	r3,28(sp)
  806a4c:	d9000015 	stw	r4,0(sp)
  806a50:	d809883a 	mov	r4,sp
  806a54:	dfc00515 	stw	ra,20(sp)
  806a58:	d9c00615 	stw	r7,24(sp)
  806a5c:	d9400115 	stw	r5,4(sp)
  806a60:	d9800215 	stw	r6,8(sp)
  806a64:	d8c00415 	stw	r3,16(sp)
  806a68:	d9c00315 	stw	r7,12(sp)
  806a6c:	080706c0 	call	80706c <__pack_d>
  806a70:	dfc00517 	ldw	ra,20(sp)
  806a74:	dec00704 	addi	sp,sp,28
  806a78:	f800283a 	ret

00806a7c <__truncdfsf2>:
  806a7c:	defff804 	addi	sp,sp,-32
  806a80:	2005883a 	mov	r2,r4
  806a84:	2807883a 	mov	r3,r5
  806a88:	d809883a 	mov	r4,sp
  806a8c:	d9400204 	addi	r5,sp,8
  806a90:	d8c00115 	stw	r3,4(sp)
  806a94:	d8800015 	stw	r2,0(sp)
  806a98:	dfc00715 	stw	ra,28(sp)
  806a9c:	08073800 	call	807380 <__unpack_d>
  806aa0:	d9c00517 	ldw	r7,20(sp)
  806aa4:	da000617 	ldw	r8,24(sp)
  806aa8:	02d00034 	movhi	r11,16384
  806aac:	5affffc4 	addi	r11,r11,-1
  806ab0:	3812d7ba 	srli	r9,r7,30
  806ab4:	401a90ba 	slli	r13,r8,2
  806ab8:	3ac4703a 	and	r2,r7,r11
  806abc:	0007883a 	mov	r3,zero
  806ac0:	6a52b03a 	or	r9,r13,r9
  806ac4:	10c4b03a 	or	r2,r2,r3
  806ac8:	d9000217 	ldw	r4,8(sp)
  806acc:	d9400317 	ldw	r5,12(sp)
  806ad0:	d9800417 	ldw	r6,16(sp)
  806ad4:	480f883a 	mov	r7,r9
  806ad8:	10000126 	beq	r2,zero,806ae0 <__truncdfsf2+0x64>
  806adc:	49c00054 	ori	r7,r9,1
  806ae0:	08070400 	call	807040 <__make_fp>
  806ae4:	dfc00717 	ldw	ra,28(sp)
  806ae8:	dec00804 	addi	sp,sp,32
  806aec:	f800283a 	ret

00806af0 <udivmodsi4>:
  806af0:	29001b2e 	bgeu	r5,r4,806b60 <udivmodsi4+0x70>
  806af4:	28001a16 	blt	r5,zero,806b60 <udivmodsi4+0x70>
  806af8:	00800044 	movi	r2,1
  806afc:	0007883a 	mov	r3,zero
  806b00:	01c007c4 	movi	r7,31
  806b04:	00000306 	br	806b14 <udivmodsi4+0x24>
  806b08:	19c01326 	beq	r3,r7,806b58 <udivmodsi4+0x68>
  806b0c:	18c00044 	addi	r3,r3,1
  806b10:	28000416 	blt	r5,zero,806b24 <udivmodsi4+0x34>
  806b14:	294b883a 	add	r5,r5,r5
  806b18:	1085883a 	add	r2,r2,r2
  806b1c:	293ffa36 	bltu	r5,r4,806b08 <udivmodsi4+0x18>
  806b20:	10000d26 	beq	r2,zero,806b58 <udivmodsi4+0x68>
  806b24:	0007883a 	mov	r3,zero
  806b28:	21400236 	bltu	r4,r5,806b34 <udivmodsi4+0x44>
  806b2c:	2149c83a 	sub	r4,r4,r5
  806b30:	1886b03a 	or	r3,r3,r2
  806b34:	1004d07a 	srli	r2,r2,1
  806b38:	280ad07a 	srli	r5,r5,1
  806b3c:	103ffa1e 	bne	r2,zero,806b28 <udivmodsi4+0x38>
  806b40:	30000226 	beq	r6,zero,806b4c <udivmodsi4+0x5c>
  806b44:	2005883a 	mov	r2,r4
  806b48:	f800283a 	ret
  806b4c:	1809883a 	mov	r4,r3
  806b50:	2005883a 	mov	r2,r4
  806b54:	f800283a 	ret
  806b58:	0007883a 	mov	r3,zero
  806b5c:	003ff806 	br	806b40 <udivmodsi4+0x50>
  806b60:	00800044 	movi	r2,1
  806b64:	0007883a 	mov	r3,zero
  806b68:	003fef06 	br	806b28 <udivmodsi4+0x38>

00806b6c <__divsi3>:
  806b6c:	defffe04 	addi	sp,sp,-8
  806b70:	dc000015 	stw	r16,0(sp)
  806b74:	dfc00115 	stw	ra,4(sp)
  806b78:	0021883a 	mov	r16,zero
  806b7c:	20000c16 	blt	r4,zero,806bb0 <__divsi3+0x44>
  806b80:	000d883a 	mov	r6,zero
  806b84:	28000e16 	blt	r5,zero,806bc0 <__divsi3+0x54>
  806b88:	0806af00 	call	806af0 <udivmodsi4>
  806b8c:	1007883a 	mov	r3,r2
  806b90:	8005003a 	cmpeq	r2,r16,zero
  806b94:	1000011e 	bne	r2,zero,806b9c <__divsi3+0x30>
  806b98:	00c7c83a 	sub	r3,zero,r3
  806b9c:	1805883a 	mov	r2,r3
  806ba0:	dfc00117 	ldw	ra,4(sp)
  806ba4:	dc000017 	ldw	r16,0(sp)
  806ba8:	dec00204 	addi	sp,sp,8
  806bac:	f800283a 	ret
  806bb0:	0109c83a 	sub	r4,zero,r4
  806bb4:	04000044 	movi	r16,1
  806bb8:	000d883a 	mov	r6,zero
  806bbc:	283ff20e 	bge	r5,zero,806b88 <__divsi3+0x1c>
  806bc0:	014bc83a 	sub	r5,zero,r5
  806bc4:	8021003a 	cmpeq	r16,r16,zero
  806bc8:	003fef06 	br	806b88 <__divsi3+0x1c>

00806bcc <__modsi3>:
  806bcc:	deffff04 	addi	sp,sp,-4
  806bd0:	dfc00015 	stw	ra,0(sp)
  806bd4:	01800044 	movi	r6,1
  806bd8:	2807883a 	mov	r3,r5
  806bdc:	20000416 	blt	r4,zero,806bf0 <__modsi3+0x24>
  806be0:	28000c16 	blt	r5,zero,806c14 <__modsi3+0x48>
  806be4:	dfc00017 	ldw	ra,0(sp)
  806be8:	dec00104 	addi	sp,sp,4
  806bec:	0806af01 	jmpi	806af0 <udivmodsi4>
  806bf0:	0109c83a 	sub	r4,zero,r4
  806bf4:	28000b16 	blt	r5,zero,806c24 <__modsi3+0x58>
  806bf8:	180b883a 	mov	r5,r3
  806bfc:	01800044 	movi	r6,1
  806c00:	0806af00 	call	806af0 <udivmodsi4>
  806c04:	0085c83a 	sub	r2,zero,r2
  806c08:	dfc00017 	ldw	ra,0(sp)
  806c0c:	dec00104 	addi	sp,sp,4
  806c10:	f800283a 	ret
  806c14:	014bc83a 	sub	r5,zero,r5
  806c18:	dfc00017 	ldw	ra,0(sp)
  806c1c:	dec00104 	addi	sp,sp,4
  806c20:	0806af01 	jmpi	806af0 <udivmodsi4>
  806c24:	0147c83a 	sub	r3,zero,r5
  806c28:	003ff306 	br	806bf8 <__modsi3+0x2c>

00806c2c <__udivsi3>:
  806c2c:	000d883a 	mov	r6,zero
  806c30:	0806af01 	jmpi	806af0 <udivmodsi4>

00806c34 <__umodsi3>:
  806c34:	01800044 	movi	r6,1
  806c38:	0806af01 	jmpi	806af0 <udivmodsi4>

00806c3c <__mulsi3>:
  806c3c:	20000a26 	beq	r4,zero,806c68 <__mulsi3+0x2c>
  806c40:	0007883a 	mov	r3,zero
  806c44:	2080004c 	andi	r2,r4,1
  806c48:	1005003a 	cmpeq	r2,r2,zero
  806c4c:	2008d07a 	srli	r4,r4,1
  806c50:	1000011e 	bne	r2,zero,806c58 <__mulsi3+0x1c>
  806c54:	1947883a 	add	r3,r3,r5
  806c58:	294b883a 	add	r5,r5,r5
  806c5c:	203ff91e 	bne	r4,zero,806c44 <__mulsi3+0x8>
  806c60:	1805883a 	mov	r2,r3
  806c64:	f800283a 	ret
  806c68:	0007883a 	mov	r3,zero
  806c6c:	1805883a 	mov	r2,r3
  806c70:	f800283a 	ret

00806c74 <__muldi3>:
  806c74:	defff204 	addi	sp,sp,-56
  806c78:	df000c15 	stw	fp,48(sp)
  806c7c:	3038d43a 	srli	fp,r6,16
  806c80:	dd000815 	stw	r20,32(sp)
  806c84:	dc400515 	stw	r17,20(sp)
  806c88:	2028d43a 	srli	r20,r4,16
  806c8c:	247fffcc 	andi	r17,r4,65535
  806c90:	dc000415 	stw	r16,16(sp)
  806c94:	343fffcc 	andi	r16,r6,65535
  806c98:	dcc00715 	stw	r19,28(sp)
  806c9c:	d9000015 	stw	r4,0(sp)
  806ca0:	2827883a 	mov	r19,r5
  806ca4:	8809883a 	mov	r4,r17
  806ca8:	d9400115 	stw	r5,4(sp)
  806cac:	800b883a 	mov	r5,r16
  806cb0:	d9800215 	stw	r6,8(sp)
  806cb4:	dfc00d15 	stw	ra,52(sp)
  806cb8:	d9c00315 	stw	r7,12(sp)
  806cbc:	dd800a15 	stw	r22,40(sp)
  806cc0:	dd400915 	stw	r21,36(sp)
  806cc4:	302d883a 	mov	r22,r6
  806cc8:	ddc00b15 	stw	r23,44(sp)
  806ccc:	dc800615 	stw	r18,24(sp)
  806cd0:	0806c3c0 	call	806c3c <__mulsi3>
  806cd4:	8809883a 	mov	r4,r17
  806cd8:	e00b883a 	mov	r5,fp
  806cdc:	102b883a 	mov	r21,r2
  806ce0:	0806c3c0 	call	806c3c <__mulsi3>
  806ce4:	800b883a 	mov	r5,r16
  806ce8:	a009883a 	mov	r4,r20
  806cec:	1023883a 	mov	r17,r2
  806cf0:	0806c3c0 	call	806c3c <__mulsi3>
  806cf4:	a009883a 	mov	r4,r20
  806cf8:	e00b883a 	mov	r5,fp
  806cfc:	1021883a 	mov	r16,r2
  806d00:	0806c3c0 	call	806c3c <__mulsi3>
  806d04:	a8ffffcc 	andi	r3,r21,65535
  806d08:	a82ad43a 	srli	r21,r21,16
  806d0c:	8c23883a 	add	r17,r17,r16
  806d10:	1011883a 	mov	r8,r2
  806d14:	ac6b883a 	add	r21,r21,r17
  806d18:	a804943a 	slli	r2,r21,16
  806d1c:	b009883a 	mov	r4,r22
  806d20:	980b883a 	mov	r5,r19
  806d24:	10c7883a 	add	r3,r2,r3
  806d28:	a812d43a 	srli	r9,r21,16
  806d2c:	180d883a 	mov	r6,r3
  806d30:	ac00022e 	bgeu	r21,r16,806d3c <__muldi3+0xc8>
  806d34:	00800074 	movhi	r2,1
  806d38:	4091883a 	add	r8,r8,r2
  806d3c:	4267883a 	add	r19,r8,r9
  806d40:	302d883a 	mov	r22,r6
  806d44:	0806c3c0 	call	806c3c <__mulsi3>
  806d48:	d9400317 	ldw	r5,12(sp)
  806d4c:	d9000017 	ldw	r4,0(sp)
  806d50:	1023883a 	mov	r17,r2
  806d54:	0806c3c0 	call	806c3c <__mulsi3>
  806d58:	14cb883a 	add	r5,r2,r19
  806d5c:	894b883a 	add	r5,r17,r5
  806d60:	b005883a 	mov	r2,r22
  806d64:	2807883a 	mov	r3,r5
  806d68:	dfc00d17 	ldw	ra,52(sp)
  806d6c:	df000c17 	ldw	fp,48(sp)
  806d70:	ddc00b17 	ldw	r23,44(sp)
  806d74:	dd800a17 	ldw	r22,40(sp)
  806d78:	dd400917 	ldw	r21,36(sp)
  806d7c:	dd000817 	ldw	r20,32(sp)
  806d80:	dcc00717 	ldw	r19,28(sp)
  806d84:	dc800617 	ldw	r18,24(sp)
  806d88:	dc400517 	ldw	r17,20(sp)
  806d8c:	dc000417 	ldw	r16,16(sp)
  806d90:	dec00e04 	addi	sp,sp,56
  806d94:	f800283a 	ret

00806d98 <__clzsi2>:
  806d98:	00bfffd4 	movui	r2,65535
  806d9c:	11000e36 	bltu	r2,r4,806dd8 <__clzsi2+0x40>
  806da0:	00803fc4 	movi	r2,255
  806da4:	01400204 	movi	r5,8
  806da8:	0007883a 	mov	r3,zero
  806dac:	11001036 	bltu	r2,r4,806df0 <__clzsi2+0x58>
  806db0:	000b883a 	mov	r5,zero
  806db4:	20c6d83a 	srl	r3,r4,r3
  806db8:	008020b4 	movhi	r2,130
  806dbc:	10af0404 	addi	r2,r2,-17392
  806dc0:	1887883a 	add	r3,r3,r2
  806dc4:	18800003 	ldbu	r2,0(r3)
  806dc8:	00c00804 	movi	r3,32
  806dcc:	2885883a 	add	r2,r5,r2
  806dd0:	1885c83a 	sub	r2,r3,r2
  806dd4:	f800283a 	ret
  806dd8:	01400404 	movi	r5,16
  806ddc:	00804034 	movhi	r2,256
  806de0:	10bfffc4 	addi	r2,r2,-1
  806de4:	2807883a 	mov	r3,r5
  806de8:	113ff22e 	bgeu	r2,r4,806db4 <__clzsi2+0x1c>
  806dec:	01400604 	movi	r5,24
  806df0:	2807883a 	mov	r3,r5
  806df4:	20c6d83a 	srl	r3,r4,r3
  806df8:	008020b4 	movhi	r2,130
  806dfc:	10af0404 	addi	r2,r2,-17392
  806e00:	1887883a 	add	r3,r3,r2
  806e04:	18800003 	ldbu	r2,0(r3)
  806e08:	00c00804 	movi	r3,32
  806e0c:	2885883a 	add	r2,r5,r2
  806e10:	1885c83a 	sub	r2,r3,r2
  806e14:	f800283a 	ret

00806e18 <__pack_f>:
  806e18:	20c00017 	ldw	r3,0(r4)
  806e1c:	01c00044 	movi	r7,1
  806e20:	21800317 	ldw	r6,12(r4)
  806e24:	21400117 	ldw	r5,4(r4)
  806e28:	38c02d2e 	bgeu	r7,r3,806ee0 <__pack_f+0xc8>
  806e2c:	00800104 	movi	r2,4
  806e30:	18802826 	beq	r3,r2,806ed4 <__pack_f+0xbc>
  806e34:	00800084 	movi	r2,2
  806e38:	18800126 	beq	r3,r2,806e40 <__pack_f+0x28>
  806e3c:	3000101e 	bne	r6,zero,806e80 <__pack_f+0x68>
  806e40:	000d883a 	mov	r6,zero
  806e44:	0007883a 	mov	r3,zero
  806e48:	19003fcc 	andi	r4,r3,255
  806e4c:	200895fa 	slli	r4,r4,23
  806e50:	00c02034 	movhi	r3,128
  806e54:	18ffffc4 	addi	r3,r3,-1
  806e58:	30c6703a 	and	r3,r6,r3
  806e5c:	10a0002c 	andhi	r2,r2,32768
  806e60:	10c4b03a 	or	r2,r2,r3
  806e64:	280a97fa 	slli	r5,r5,31
  806e68:	1104b03a 	or	r2,r2,r4
  806e6c:	00e00034 	movhi	r3,32768
  806e70:	18ffffc4 	addi	r3,r3,-1
  806e74:	10c4703a 	and	r2,r2,r3
  806e78:	1144b03a 	or	r2,r2,r5
  806e7c:	f800283a 	ret
  806e80:	21000217 	ldw	r4,8(r4)
  806e84:	00bfe084 	movi	r2,-126
  806e88:	20801b16 	blt	r4,r2,806ef8 <__pack_f+0xe0>
  806e8c:	00801fc4 	movi	r2,127
  806e90:	11001016 	blt	r2,r4,806ed4 <__pack_f+0xbc>
  806e94:	308e703a 	and	r7,r6,r2
  806e98:	2087883a 	add	r3,r4,r2
  806e9c:	00801004 	movi	r2,64
  806ea0:	38800526 	beq	r7,r2,806eb8 <__pack_f+0xa0>
  806ea4:	31800fc4 	addi	r6,r6,63
  806ea8:	30000716 	blt	r6,zero,806ec8 <__pack_f+0xb0>
  806eac:	300490ba 	slli	r2,r6,2
  806eb0:	100cd27a 	srli	r6,r2,9
  806eb4:	003fe406 	br	806e48 <__pack_f+0x30>
  806eb8:	3080200c 	andi	r2,r6,128
  806ebc:	103ffa26 	beq	r2,zero,806ea8 <__pack_f+0x90>
  806ec0:	31cd883a 	add	r6,r6,r7
  806ec4:	003ff806 	br	806ea8 <__pack_f+0x90>
  806ec8:	300cd07a 	srli	r6,r6,1
  806ecc:	18c00044 	addi	r3,r3,1
  806ed0:	003ff606 	br	806eac <__pack_f+0x94>
  806ed4:	000d883a 	mov	r6,zero
  806ed8:	00ffffc4 	movi	r3,-1
  806edc:	003fda06 	br	806e48 <__pack_f+0x30>
  806ee0:	31800434 	orhi	r6,r6,16
  806ee4:	00802034 	movhi	r2,128
  806ee8:	10bfffc4 	addi	r2,r2,-1
  806eec:	308c703a 	and	r6,r6,r2
  806ef0:	00ffffc4 	movi	r3,-1
  806ef4:	003fd406 	br	806e48 <__pack_f+0x30>
  806ef8:	1109c83a 	sub	r4,r2,r4
  806efc:	00800644 	movi	r2,25
  806f00:	11001216 	blt	r2,r4,806f4c <__pack_f+0x134>
  806f04:	3904983a 	sll	r2,r7,r4
  806f08:	3106d83a 	srl	r3,r6,r4
  806f0c:	10bfffc4 	addi	r2,r2,-1
  806f10:	3084703a 	and	r2,r6,r2
  806f14:	1004c03a 	cmpne	r2,r2,zero
  806f18:	1886b03a 	or	r3,r3,r2
  806f1c:	19001fcc 	andi	r4,r3,127
  806f20:	00801004 	movi	r2,64
  806f24:	20800c26 	beq	r4,r2,806f58 <__pack_f+0x140>
  806f28:	18c00fc4 	addi	r3,r3,63
  806f2c:	00900034 	movhi	r2,16384
  806f30:	10bfffc4 	addi	r2,r2,-1
  806f34:	180cd1fa 	srli	r6,r3,7
  806f38:	10c7803a 	cmpltu	r3,r2,r3
  806f3c:	00802034 	movhi	r2,128
  806f40:	10bfffc4 	addi	r2,r2,-1
  806f44:	308c703a 	and	r6,r6,r2
  806f48:	003fbf06 	br	806e48 <__pack_f+0x30>
  806f4c:	0007883a 	mov	r3,zero
  806f50:	000d883a 	mov	r6,zero
  806f54:	003ff906 	br	806f3c <__pack_f+0x124>
  806f58:	1880200c 	andi	r2,r3,128
  806f5c:	10000126 	beq	r2,zero,806f64 <__pack_f+0x14c>
  806f60:	1907883a 	add	r3,r3,r4
  806f64:	180cd1fa 	srli	r6,r3,7
  806f68:	00900034 	movhi	r2,16384
  806f6c:	10bfffc4 	addi	r2,r2,-1
  806f70:	10c7803a 	cmpltu	r3,r2,r3
  806f74:	003ff106 	br	806f3c <__pack_f+0x124>

00806f78 <__unpack_f>:
  806f78:	21800017 	ldw	r6,0(r4)
  806f7c:	00c02034 	movhi	r3,128
  806f80:	18ffffc4 	addi	r3,r3,-1
  806f84:	3004d5fa 	srli	r2,r6,23
  806f88:	3008d7fa 	srli	r4,r6,31
  806f8c:	30ce703a 	and	r7,r6,r3
  806f90:	10c03fcc 	andi	r3,r2,255
  806f94:	29000115 	stw	r4,4(r5)
  806f98:	1800131e 	bne	r3,zero,806fe8 <__unpack_f+0x70>
  806f9c:	38000f26 	beq	r7,zero,806fdc <__unpack_f+0x64>
  806fa0:	380691fa 	slli	r3,r7,7
  806fa4:	01bfe084 	movi	r6,-126
  806fa8:	008000c4 	movi	r2,3
  806fac:	01100034 	movhi	r4,16384
  806fb0:	213fffc4 	addi	r4,r4,-1
  806fb4:	28800015 	stw	r2,0(r5)
  806fb8:	29800215 	stw	r6,8(r5)
  806fbc:	20c00536 	bltu	r4,r3,806fd4 <__unpack_f+0x5c>
  806fc0:	3005883a 	mov	r2,r6
  806fc4:	18c7883a 	add	r3,r3,r3
  806fc8:	10bfffc4 	addi	r2,r2,-1
  806fcc:	20fffd2e 	bgeu	r4,r3,806fc4 <__unpack_f+0x4c>
  806fd0:	28800215 	stw	r2,8(r5)
  806fd4:	28c00315 	stw	r3,12(r5)
  806fd8:	f800283a 	ret
  806fdc:	00800084 	movi	r2,2
  806fe0:	28800015 	stw	r2,0(r5)
  806fe4:	f800283a 	ret
  806fe8:	00803fc4 	movi	r2,255
  806fec:	18800826 	beq	r3,r2,807010 <__unpack_f+0x98>
  806ff0:	380491fa 	slli	r2,r7,7
  806ff4:	18ffe044 	addi	r3,r3,-127
  806ff8:	28c00215 	stw	r3,8(r5)
  806ffc:	10900034 	orhi	r2,r2,16384
  807000:	28800315 	stw	r2,12(r5)
  807004:	008000c4 	movi	r2,3
  807008:	28800015 	stw	r2,0(r5)
  80700c:	f800283a 	ret
  807010:	3800031e 	bne	r7,zero,807020 <__unpack_f+0xa8>
  807014:	00800104 	movi	r2,4
  807018:	28800015 	stw	r2,0(r5)
  80701c:	f800283a 	ret
  807020:	3080042c 	andhi	r2,r6,16
  807024:	10000426 	beq	r2,zero,807038 <__unpack_f+0xc0>
  807028:	00800044 	movi	r2,1
  80702c:	28800015 	stw	r2,0(r5)
  807030:	29c00315 	stw	r7,12(r5)
  807034:	f800283a 	ret
  807038:	28000015 	stw	zero,0(r5)
  80703c:	003ffc06 	br	807030 <__unpack_f+0xb8>

00807040 <__make_fp>:
  807040:	defffb04 	addi	sp,sp,-20
  807044:	d9000015 	stw	r4,0(sp)
  807048:	d809883a 	mov	r4,sp
  80704c:	dfc00415 	stw	ra,16(sp)
  807050:	d9400115 	stw	r5,4(sp)
  807054:	d9800215 	stw	r6,8(sp)
  807058:	d9c00315 	stw	r7,12(sp)
  80705c:	0806e180 	call	806e18 <__pack_f>
  807060:	dfc00417 	ldw	ra,16(sp)
  807064:	dec00504 	addi	sp,sp,20
  807068:	f800283a 	ret

0080706c <__pack_d>:
  80706c:	20c00017 	ldw	r3,0(r4)
  807070:	defffd04 	addi	sp,sp,-12
  807074:	dc000015 	stw	r16,0(sp)
  807078:	dc800215 	stw	r18,8(sp)
  80707c:	dc400115 	stw	r17,4(sp)
  807080:	00800044 	movi	r2,1
  807084:	22000317 	ldw	r8,12(r4)
  807088:	001f883a 	mov	r15,zero
  80708c:	22400417 	ldw	r9,16(r4)
  807090:	24000117 	ldw	r16,4(r4)
  807094:	10c0552e 	bgeu	r2,r3,8071ec <__pack_d+0x180>
  807098:	00800104 	movi	r2,4
  80709c:	18804f26 	beq	r3,r2,8071dc <__pack_d+0x170>
  8070a0:	00800084 	movi	r2,2
  8070a4:	18800226 	beq	r3,r2,8070b0 <__pack_d+0x44>
  8070a8:	4244b03a 	or	r2,r8,r9
  8070ac:	10001a1e 	bne	r2,zero,807118 <__pack_d+0xac>
  8070b0:	000d883a 	mov	r6,zero
  8070b4:	000f883a 	mov	r7,zero
  8070b8:	0011883a 	mov	r8,zero
  8070bc:	00800434 	movhi	r2,16
  8070c0:	10bfffc4 	addi	r2,r2,-1
  8070c4:	301d883a 	mov	r14,r6
  8070c8:	3884703a 	and	r2,r7,r2
  8070cc:	400a953a 	slli	r5,r8,20
  8070d0:	79bffc2c 	andhi	r6,r15,65520
  8070d4:	308cb03a 	or	r6,r6,r2
  8070d8:	00e00434 	movhi	r3,32784
  8070dc:	18ffffc4 	addi	r3,r3,-1
  8070e0:	800497fa 	slli	r2,r16,31
  8070e4:	30c6703a 	and	r3,r6,r3
  8070e8:	1946b03a 	or	r3,r3,r5
  8070ec:	01600034 	movhi	r5,32768
  8070f0:	297fffc4 	addi	r5,r5,-1
  8070f4:	194a703a 	and	r5,r3,r5
  8070f8:	288ab03a 	or	r5,r5,r2
  8070fc:	2807883a 	mov	r3,r5
  807100:	7005883a 	mov	r2,r14
  807104:	dc800217 	ldw	r18,8(sp)
  807108:	dc400117 	ldw	r17,4(sp)
  80710c:	dc000017 	ldw	r16,0(sp)
  807110:	dec00304 	addi	sp,sp,12
  807114:	f800283a 	ret
  807118:	21000217 	ldw	r4,8(r4)
  80711c:	00bf0084 	movi	r2,-1022
  807120:	20803f16 	blt	r4,r2,807220 <__pack_d+0x1b4>
  807124:	0080ffc4 	movi	r2,1023
  807128:	11002c16 	blt	r2,r4,8071dc <__pack_d+0x170>
  80712c:	00803fc4 	movi	r2,255
  807130:	408c703a 	and	r6,r8,r2
  807134:	00802004 	movi	r2,128
  807138:	0007883a 	mov	r3,zero
  80713c:	000f883a 	mov	r7,zero
  807140:	2280ffc4 	addi	r10,r4,1023
  807144:	30801e26 	beq	r6,r2,8071c0 <__pack_d+0x154>
  807148:	00801fc4 	movi	r2,127
  80714c:	4089883a 	add	r4,r8,r2
  807150:	220d803a 	cmpltu	r6,r4,r8
  807154:	324d883a 	add	r6,r6,r9
  807158:	2011883a 	mov	r8,r4
  80715c:	3013883a 	mov	r9,r6
  807160:	00880034 	movhi	r2,8192
  807164:	10bfffc4 	addi	r2,r2,-1
  807168:	12400d36 	bltu	r2,r9,8071a0 <__pack_d+0x134>
  80716c:	4804963a 	slli	r2,r9,24
  807170:	400cd23a 	srli	r6,r8,8
  807174:	480ed23a 	srli	r7,r9,8
  807178:	013fffc4 	movi	r4,-1
  80717c:	118cb03a 	or	r6,r2,r6
  807180:	01400434 	movhi	r5,16
  807184:	297fffc4 	addi	r5,r5,-1
  807188:	3104703a 	and	r2,r6,r4
  80718c:	3946703a 	and	r3,r7,r5
  807190:	5201ffcc 	andi	r8,r10,2047
  807194:	100d883a 	mov	r6,r2
  807198:	180f883a 	mov	r7,r3
  80719c:	003fc706 	br	8070bc <__pack_d+0x50>
  8071a0:	480897fa 	slli	r4,r9,31
  8071a4:	4004d07a 	srli	r2,r8,1
  8071a8:	4806d07a 	srli	r3,r9,1
  8071ac:	52800044 	addi	r10,r10,1
  8071b0:	2084b03a 	or	r2,r4,r2
  8071b4:	1011883a 	mov	r8,r2
  8071b8:	1813883a 	mov	r9,r3
  8071bc:	003feb06 	br	80716c <__pack_d+0x100>
  8071c0:	383fe11e 	bne	r7,zero,807148 <__pack_d+0xdc>
  8071c4:	01004004 	movi	r4,256
  8071c8:	4104703a 	and	r2,r8,r4
  8071cc:	10c4b03a 	or	r2,r2,r3
  8071d0:	103fe326 	beq	r2,zero,807160 <__pack_d+0xf4>
  8071d4:	3005883a 	mov	r2,r6
  8071d8:	003fdc06 	br	80714c <__pack_d+0xe0>
  8071dc:	000d883a 	mov	r6,zero
  8071e0:	000f883a 	mov	r7,zero
  8071e4:	0201ffc4 	movi	r8,2047
  8071e8:	003fb406 	br	8070bc <__pack_d+0x50>
  8071ec:	0005883a 	mov	r2,zero
  8071f0:	00c00234 	movhi	r3,8
  8071f4:	408cb03a 	or	r6,r8,r2
  8071f8:	48ceb03a 	or	r7,r9,r3
  8071fc:	013fffc4 	movi	r4,-1
  807200:	01400434 	movhi	r5,16
  807204:	297fffc4 	addi	r5,r5,-1
  807208:	3104703a 	and	r2,r6,r4
  80720c:	3946703a 	and	r3,r7,r5
  807210:	100d883a 	mov	r6,r2
  807214:	180f883a 	mov	r7,r3
  807218:	0201ffc4 	movi	r8,2047
  80721c:	003fa706 	br	8070bc <__pack_d+0x50>
  807220:	1109c83a 	sub	r4,r2,r4
  807224:	00800e04 	movi	r2,56
  807228:	11004316 	blt	r2,r4,807338 <__pack_d+0x2cc>
  80722c:	21fff804 	addi	r7,r4,-32
  807230:	38004516 	blt	r7,zero,807348 <__pack_d+0x2dc>
  807234:	49d8d83a 	srl	r12,r9,r7
  807238:	001b883a 	mov	r13,zero
  80723c:	0023883a 	mov	r17,zero
  807240:	01400044 	movi	r5,1
  807244:	0025883a 	mov	r18,zero
  807248:	38004716 	blt	r7,zero,807368 <__pack_d+0x2fc>
  80724c:	29d6983a 	sll	r11,r5,r7
  807250:	0015883a 	mov	r10,zero
  807254:	00bfffc4 	movi	r2,-1
  807258:	5089883a 	add	r4,r10,r2
  80725c:	588b883a 	add	r5,r11,r2
  807260:	228d803a 	cmpltu	r6,r4,r10
  807264:	314b883a 	add	r5,r6,r5
  807268:	4104703a 	and	r2,r8,r4
  80726c:	4946703a 	and	r3,r9,r5
  807270:	10c4b03a 	or	r2,r2,r3
  807274:	10000226 	beq	r2,zero,807280 <__pack_d+0x214>
  807278:	04400044 	movi	r17,1
  80727c:	0025883a 	mov	r18,zero
  807280:	00803fc4 	movi	r2,255
  807284:	644eb03a 	or	r7,r12,r17
  807288:	3892703a 	and	r9,r7,r2
  80728c:	00802004 	movi	r2,128
  807290:	6c90b03a 	or	r8,r13,r18
  807294:	0015883a 	mov	r10,zero
  807298:	48801626 	beq	r9,r2,8072f4 <__pack_d+0x288>
  80729c:	01001fc4 	movi	r4,127
  8072a0:	3905883a 	add	r2,r7,r4
  8072a4:	11cd803a 	cmpltu	r6,r2,r7
  8072a8:	320d883a 	add	r6,r6,r8
  8072ac:	100f883a 	mov	r7,r2
  8072b0:	00840034 	movhi	r2,4096
  8072b4:	10bfffc4 	addi	r2,r2,-1
  8072b8:	3011883a 	mov	r8,r6
  8072bc:	0007883a 	mov	r3,zero
  8072c0:	11801b36 	bltu	r2,r6,807330 <__pack_d+0x2c4>
  8072c4:	4004963a 	slli	r2,r8,24
  8072c8:	3808d23a 	srli	r4,r7,8
  8072cc:	400ad23a 	srli	r5,r8,8
  8072d0:	1813883a 	mov	r9,r3
  8072d4:	1108b03a 	or	r4,r2,r4
  8072d8:	00bfffc4 	movi	r2,-1
  8072dc:	00c00434 	movhi	r3,16
  8072e0:	18ffffc4 	addi	r3,r3,-1
  8072e4:	208c703a 	and	r6,r4,r2
  8072e8:	28ce703a 	and	r7,r5,r3
  8072ec:	4a01ffcc 	andi	r8,r9,2047
  8072f0:	003f7206 	br	8070bc <__pack_d+0x50>
  8072f4:	503fe91e 	bne	r10,zero,80729c <__pack_d+0x230>
  8072f8:	01004004 	movi	r4,256
  8072fc:	3904703a 	and	r2,r7,r4
  807300:	0007883a 	mov	r3,zero
  807304:	10c4b03a 	or	r2,r2,r3
  807308:	10000626 	beq	r2,zero,807324 <__pack_d+0x2b8>
  80730c:	3a45883a 	add	r2,r7,r9
  807310:	11cd803a 	cmpltu	r6,r2,r7
  807314:	320d883a 	add	r6,r6,r8
  807318:	100f883a 	mov	r7,r2
  80731c:	3011883a 	mov	r8,r6
  807320:	0007883a 	mov	r3,zero
  807324:	00840034 	movhi	r2,4096
  807328:	10bfffc4 	addi	r2,r2,-1
  80732c:	123fe52e 	bgeu	r2,r8,8072c4 <__pack_d+0x258>
  807330:	00c00044 	movi	r3,1
  807334:	003fe306 	br	8072c4 <__pack_d+0x258>
  807338:	0009883a 	mov	r4,zero
  80733c:	0013883a 	mov	r9,zero
  807340:	000b883a 	mov	r5,zero
  807344:	003fe406 	br	8072d8 <__pack_d+0x26c>
  807348:	4a47883a 	add	r3,r9,r9
  80734c:	008007c4 	movi	r2,31
  807350:	1105c83a 	sub	r2,r2,r4
  807354:	1886983a 	sll	r3,r3,r2
  807358:	4118d83a 	srl	r12,r8,r4
  80735c:	491ad83a 	srl	r13,r9,r4
  807360:	1b18b03a 	or	r12,r3,r12
  807364:	003fb506 	br	80723c <__pack_d+0x1d0>
  807368:	2806d07a 	srli	r3,r5,1
  80736c:	008007c4 	movi	r2,31
  807370:	1105c83a 	sub	r2,r2,r4
  807374:	1896d83a 	srl	r11,r3,r2
  807378:	2914983a 	sll	r10,r5,r4
  80737c:	003fb506 	br	807254 <__pack_d+0x1e8>

00807380 <__unpack_d>:
  807380:	20c00117 	ldw	r3,4(r4)
  807384:	22400017 	ldw	r9,0(r4)
  807388:	00800434 	movhi	r2,16
  80738c:	10bfffc4 	addi	r2,r2,-1
  807390:	1808d53a 	srli	r4,r3,20
  807394:	180cd7fa 	srli	r6,r3,31
  807398:	1894703a 	and	r10,r3,r2
  80739c:	2201ffcc 	andi	r8,r4,2047
  8073a0:	281b883a 	mov	r13,r5
  8073a4:	4817883a 	mov	r11,r9
  8073a8:	29800115 	stw	r6,4(r5)
  8073ac:	5019883a 	mov	r12,r10
  8073b0:	40001e1e 	bne	r8,zero,80742c <__unpack_d+0xac>
  8073b4:	4a84b03a 	or	r2,r9,r10
  8073b8:	10001926 	beq	r2,zero,807420 <__unpack_d+0xa0>
  8073bc:	4804d63a 	srli	r2,r9,24
  8073c0:	500c923a 	slli	r6,r10,8
  8073c4:	013f0084 	movi	r4,-1022
  8073c8:	00c40034 	movhi	r3,4096
  8073cc:	18ffffc4 	addi	r3,r3,-1
  8073d0:	118cb03a 	or	r6,r2,r6
  8073d4:	008000c4 	movi	r2,3
  8073d8:	480a923a 	slli	r5,r9,8
  8073dc:	68800015 	stw	r2,0(r13)
  8073e0:	69000215 	stw	r4,8(r13)
  8073e4:	19800b36 	bltu	r3,r6,807414 <__unpack_d+0x94>
  8073e8:	200f883a 	mov	r7,r4
  8073ec:	1811883a 	mov	r8,r3
  8073f0:	2945883a 	add	r2,r5,r5
  8073f4:	1149803a 	cmpltu	r4,r2,r5
  8073f8:	3187883a 	add	r3,r6,r6
  8073fc:	20c9883a 	add	r4,r4,r3
  807400:	100b883a 	mov	r5,r2
  807404:	200d883a 	mov	r6,r4
  807408:	39ffffc4 	addi	r7,r7,-1
  80740c:	413ff82e 	bgeu	r8,r4,8073f0 <__unpack_d+0x70>
  807410:	69c00215 	stw	r7,8(r13)
  807414:	69800415 	stw	r6,16(r13)
  807418:	69400315 	stw	r5,12(r13)
  80741c:	f800283a 	ret
  807420:	00800084 	movi	r2,2
  807424:	28800015 	stw	r2,0(r5)
  807428:	f800283a 	ret
  80742c:	0081ffc4 	movi	r2,2047
  807430:	40800f26 	beq	r8,r2,807470 <__unpack_d+0xf0>
  807434:	480cd63a 	srli	r6,r9,24
  807438:	5006923a 	slli	r3,r10,8
  80743c:	4804923a 	slli	r2,r9,8
  807440:	0009883a 	mov	r4,zero
  807444:	30c6b03a 	or	r3,r6,r3
  807448:	01440034 	movhi	r5,4096
  80744c:	110cb03a 	or	r6,r2,r4
  807450:	423f0044 	addi	r8,r8,-1023
  807454:	194eb03a 	or	r7,r3,r5
  807458:	008000c4 	movi	r2,3
  80745c:	69c00415 	stw	r7,16(r13)
  807460:	6a000215 	stw	r8,8(r13)
  807464:	68800015 	stw	r2,0(r13)
  807468:	69800315 	stw	r6,12(r13)
  80746c:	f800283a 	ret
  807470:	4a84b03a 	or	r2,r9,r10
  807474:	1000031e 	bne	r2,zero,807484 <__unpack_d+0x104>
  807478:	00800104 	movi	r2,4
  80747c:	28800015 	stw	r2,0(r5)
  807480:	f800283a 	ret
  807484:	0009883a 	mov	r4,zero
  807488:	01400234 	movhi	r5,8
  80748c:	4904703a 	and	r2,r9,r4
  807490:	5146703a 	and	r3,r10,r5
  807494:	10c4b03a 	or	r2,r2,r3
  807498:	10000526 	beq	r2,zero,8074b0 <__unpack_d+0x130>
  80749c:	00800044 	movi	r2,1
  8074a0:	68800015 	stw	r2,0(r13)
  8074a4:	6b000415 	stw	r12,16(r13)
  8074a8:	6ac00315 	stw	r11,12(r13)
  8074ac:	f800283a 	ret
  8074b0:	68000015 	stw	zero,0(r13)
  8074b4:	003ffb06 	br	8074a4 <__unpack_d+0x124>

008074b8 <__fpcmp_parts_d>:
  8074b8:	21800017 	ldw	r6,0(r4)
  8074bc:	00c00044 	movi	r3,1
  8074c0:	19800a2e 	bgeu	r3,r6,8074ec <__fpcmp_parts_d+0x34>
  8074c4:	28800017 	ldw	r2,0(r5)
  8074c8:	1880082e 	bgeu	r3,r2,8074ec <__fpcmp_parts_d+0x34>
  8074cc:	00c00104 	movi	r3,4
  8074d0:	30c02626 	beq	r6,r3,80756c <__fpcmp_parts_d+0xb4>
  8074d4:	10c02226 	beq	r2,r3,807560 <__fpcmp_parts_d+0xa8>
  8074d8:	00c00084 	movi	r3,2
  8074dc:	30c00526 	beq	r6,r3,8074f4 <__fpcmp_parts_d+0x3c>
  8074e0:	10c0071e 	bne	r2,r3,807500 <__fpcmp_parts_d+0x48>
  8074e4:	20800117 	ldw	r2,4(r4)
  8074e8:	1000091e 	bne	r2,zero,807510 <__fpcmp_parts_d+0x58>
  8074ec:	00800044 	movi	r2,1
  8074f0:	f800283a 	ret
  8074f4:	10c01a1e 	bne	r2,r3,807560 <__fpcmp_parts_d+0xa8>
  8074f8:	0005883a 	mov	r2,zero
  8074fc:	f800283a 	ret
  807500:	22000117 	ldw	r8,4(r4)
  807504:	28800117 	ldw	r2,4(r5)
  807508:	40800326 	beq	r8,r2,807518 <__fpcmp_parts_d+0x60>
  80750c:	403ff726 	beq	r8,zero,8074ec <__fpcmp_parts_d+0x34>
  807510:	00bfffc4 	movi	r2,-1
  807514:	f800283a 	ret
  807518:	20c00217 	ldw	r3,8(r4)
  80751c:	28800217 	ldw	r2,8(r5)
  807520:	10fffa16 	blt	r2,r3,80750c <__fpcmp_parts_d+0x54>
  807524:	18800916 	blt	r3,r2,80754c <__fpcmp_parts_d+0x94>
  807528:	21c00417 	ldw	r7,16(r4)
  80752c:	28c00417 	ldw	r3,16(r5)
  807530:	21800317 	ldw	r6,12(r4)
  807534:	28800317 	ldw	r2,12(r5)
  807538:	19fff436 	bltu	r3,r7,80750c <__fpcmp_parts_d+0x54>
  80753c:	38c00526 	beq	r7,r3,807554 <__fpcmp_parts_d+0x9c>
  807540:	38c00236 	bltu	r7,r3,80754c <__fpcmp_parts_d+0x94>
  807544:	19ffec1e 	bne	r3,r7,8074f8 <__fpcmp_parts_d+0x40>
  807548:	30bfeb2e 	bgeu	r6,r2,8074f8 <__fpcmp_parts_d+0x40>
  80754c:	403fe71e 	bne	r8,zero,8074ec <__fpcmp_parts_d+0x34>
  807550:	003fef06 	br	807510 <__fpcmp_parts_d+0x58>
  807554:	11bffa2e 	bgeu	r2,r6,807540 <__fpcmp_parts_d+0x88>
  807558:	403fe426 	beq	r8,zero,8074ec <__fpcmp_parts_d+0x34>
  80755c:	003fec06 	br	807510 <__fpcmp_parts_d+0x58>
  807560:	28800117 	ldw	r2,4(r5)
  807564:	103fe11e 	bne	r2,zero,8074ec <__fpcmp_parts_d+0x34>
  807568:	003fe906 	br	807510 <__fpcmp_parts_d+0x58>
  80756c:	11bfdd1e 	bne	r2,r6,8074e4 <__fpcmp_parts_d+0x2c>
  807570:	28c00117 	ldw	r3,4(r5)
  807574:	20800117 	ldw	r2,4(r4)
  807578:	1885c83a 	sub	r2,r3,r2
  80757c:	f800283a 	ret

00807580 <__errno>:
  807580:	00c020b4 	movhi	r3,130
  807584:	18f6d904 	addi	r3,r3,-9372
  807588:	18800017 	ldw	r2,0(r3)
  80758c:	f800283a 	ret

00807590 <printf>:
  807590:	defffb04 	addi	sp,sp,-20
  807594:	dfc00115 	stw	ra,4(sp)
  807598:	d9400215 	stw	r5,8(sp)
  80759c:	d9800315 	stw	r6,12(sp)
  8075a0:	d9c00415 	stw	r7,16(sp)
  8075a4:	008020b4 	movhi	r2,130
  8075a8:	10b6d904 	addi	r2,r2,-9372
  8075ac:	10c00017 	ldw	r3,0(r2)
  8075b0:	200b883a 	mov	r5,r4
  8075b4:	d8800204 	addi	r2,sp,8
  8075b8:	19000217 	ldw	r4,8(r3)
  8075bc:	100d883a 	mov	r6,r2
  8075c0:	d8800015 	stw	r2,0(sp)
  8075c4:	080964c0 	call	80964c <__vfprintf_internal>
  8075c8:	dfc00117 	ldw	ra,4(sp)
  8075cc:	dec00504 	addi	sp,sp,20
  8075d0:	f800283a 	ret

008075d4 <_printf_r>:
  8075d4:	defffc04 	addi	sp,sp,-16
  8075d8:	dfc00115 	stw	ra,4(sp)
  8075dc:	d9800215 	stw	r6,8(sp)
  8075e0:	d9c00315 	stw	r7,12(sp)
  8075e4:	280d883a 	mov	r6,r5
  8075e8:	21400217 	ldw	r5,8(r4)
  8075ec:	d8c00204 	addi	r3,sp,8
  8075f0:	180f883a 	mov	r7,r3
  8075f4:	d8c00015 	stw	r3,0(sp)
  8075f8:	08077880 	call	807788 <___vfprintf_internal_r>
  8075fc:	dfc00117 	ldw	ra,4(sp)
  807600:	dec00404 	addi	sp,sp,16
  807604:	f800283a 	ret

00807608 <_puts_r>:
  807608:	defff604 	addi	sp,sp,-40
  80760c:	dc400715 	stw	r17,28(sp)
  807610:	2023883a 	mov	r17,r4
  807614:	2809883a 	mov	r4,r5
  807618:	dfc00915 	stw	ra,36(sp)
  80761c:	dcc00815 	stw	r19,32(sp)
  807620:	2827883a 	mov	r19,r5
  807624:	08076bc0 	call	8076bc <strlen>
  807628:	89400217 	ldw	r5,8(r17)
  80762c:	00c020b4 	movhi	r3,130
  807630:	18ef4504 	addi	r3,r3,-17132
  807634:	01c00044 	movi	r7,1
  807638:	12000044 	addi	r8,r2,1
  80763c:	d8c00515 	stw	r3,20(sp)
  807640:	d9c00615 	stw	r7,24(sp)
  807644:	d8c00304 	addi	r3,sp,12
  807648:	01c00084 	movi	r7,2
  80764c:	8809883a 	mov	r4,r17
  807650:	d80d883a 	mov	r6,sp
  807654:	d8c00015 	stw	r3,0(sp)
  807658:	dcc00315 	stw	r19,12(sp)
  80765c:	da000215 	stw	r8,8(sp)
  807660:	d9c00115 	stw	r7,4(sp)
  807664:	d8800415 	stw	r2,16(sp)
  807668:	080b9080 	call	80b908 <__sfvwrite_r>
  80766c:	00ffffc4 	movi	r3,-1
  807670:	10000626 	beq	r2,zero,80768c <_puts_r+0x84>
  807674:	1805883a 	mov	r2,r3
  807678:	dfc00917 	ldw	ra,36(sp)
  80767c:	dcc00817 	ldw	r19,32(sp)
  807680:	dc400717 	ldw	r17,28(sp)
  807684:	dec00a04 	addi	sp,sp,40
  807688:	f800283a 	ret
  80768c:	00c00284 	movi	r3,10
  807690:	1805883a 	mov	r2,r3
  807694:	dfc00917 	ldw	ra,36(sp)
  807698:	dcc00817 	ldw	r19,32(sp)
  80769c:	dc400717 	ldw	r17,28(sp)
  8076a0:	dec00a04 	addi	sp,sp,40
  8076a4:	f800283a 	ret

008076a8 <puts>:
  8076a8:	008020b4 	movhi	r2,130
  8076ac:	10b6d904 	addi	r2,r2,-9372
  8076b0:	200b883a 	mov	r5,r4
  8076b4:	11000017 	ldw	r4,0(r2)
  8076b8:	08076081 	jmpi	807608 <_puts_r>

008076bc <strlen>:
  8076bc:	208000cc 	andi	r2,r4,3
  8076c0:	2011883a 	mov	r8,r4
  8076c4:	1000161e 	bne	r2,zero,807720 <strlen+0x64>
  8076c8:	20c00017 	ldw	r3,0(r4)
  8076cc:	017fbff4 	movhi	r5,65279
  8076d0:	297fbfc4 	addi	r5,r5,-257
  8076d4:	01e02074 	movhi	r7,32897
  8076d8:	39e02004 	addi	r7,r7,-32640
  8076dc:	1945883a 	add	r2,r3,r5
  8076e0:	11c4703a 	and	r2,r2,r7
  8076e4:	00c6303a 	nor	r3,zero,r3
  8076e8:	1886703a 	and	r3,r3,r2
  8076ec:	18000c1e 	bne	r3,zero,807720 <strlen+0x64>
  8076f0:	280d883a 	mov	r6,r5
  8076f4:	380b883a 	mov	r5,r7
  8076f8:	21000104 	addi	r4,r4,4
  8076fc:	20800017 	ldw	r2,0(r4)
  807700:	1187883a 	add	r3,r2,r6
  807704:	1946703a 	and	r3,r3,r5
  807708:	0084303a 	nor	r2,zero,r2
  80770c:	10c4703a 	and	r2,r2,r3
  807710:	103ff926 	beq	r2,zero,8076f8 <strlen+0x3c>
  807714:	20800007 	ldb	r2,0(r4)
  807718:	10000326 	beq	r2,zero,807728 <strlen+0x6c>
  80771c:	21000044 	addi	r4,r4,1
  807720:	20800007 	ldb	r2,0(r4)
  807724:	103ffd1e 	bne	r2,zero,80771c <strlen+0x60>
  807728:	2205c83a 	sub	r2,r4,r8
  80772c:	f800283a 	ret

00807730 <__sprint_r>:
  807730:	30800217 	ldw	r2,8(r6)
  807734:	defffe04 	addi	sp,sp,-8
  807738:	dc000015 	stw	r16,0(sp)
  80773c:	dfc00115 	stw	ra,4(sp)
  807740:	3021883a 	mov	r16,r6
  807744:	0007883a 	mov	r3,zero
  807748:	1000061e 	bne	r2,zero,807764 <__sprint_r+0x34>
  80774c:	1805883a 	mov	r2,r3
  807750:	30000115 	stw	zero,4(r6)
  807754:	dfc00117 	ldw	ra,4(sp)
  807758:	dc000017 	ldw	r16,0(sp)
  80775c:	dec00204 	addi	sp,sp,8
  807760:	f800283a 	ret
  807764:	080b9080 	call	80b908 <__sfvwrite_r>
  807768:	1007883a 	mov	r3,r2
  80776c:	1805883a 	mov	r2,r3
  807770:	80000115 	stw	zero,4(r16)
  807774:	80000215 	stw	zero,8(r16)
  807778:	dfc00117 	ldw	ra,4(sp)
  80777c:	dc000017 	ldw	r16,0(sp)
  807780:	dec00204 	addi	sp,sp,8
  807784:	f800283a 	ret

00807788 <___vfprintf_internal_r>:
  807788:	defea404 	addi	sp,sp,-1392
  80778c:	dd815815 	stw	r22,1376(sp)
  807790:	dc015215 	stw	r16,1352(sp)
  807794:	d9c15115 	stw	r7,1348(sp)
  807798:	dfc15b15 	stw	ra,1388(sp)
  80779c:	df015a15 	stw	fp,1384(sp)
  8077a0:	ddc15915 	stw	r23,1380(sp)
  8077a4:	dd415715 	stw	r21,1372(sp)
  8077a8:	dd015615 	stw	r20,1368(sp)
  8077ac:	dcc15515 	stw	r19,1364(sp)
  8077b0:	dc815415 	stw	r18,1360(sp)
  8077b4:	dc415315 	stw	r17,1356(sp)
  8077b8:	282d883a 	mov	r22,r5
  8077bc:	3021883a 	mov	r16,r6
  8077c0:	d9014f15 	stw	r4,1340(sp)
  8077c4:	080bf2c0 	call	80bf2c <_localeconv_r>
  8077c8:	10800017 	ldw	r2,0(r2)
  8077cc:	d9c15117 	ldw	r7,1348(sp)
  8077d0:	d8814915 	stw	r2,1316(sp)
  8077d4:	d8814f17 	ldw	r2,1340(sp)
  8077d8:	10000226 	beq	r2,zero,8077e4 <___vfprintf_internal_r+0x5c>
  8077dc:	10800e17 	ldw	r2,56(r2)
  8077e0:	10020d26 	beq	r2,zero,808018 <___vfprintf_internal_r+0x890>
  8077e4:	b080030b 	ldhu	r2,12(r22)
  8077e8:	1080020c 	andi	r2,r2,8
  8077ec:	10020e26 	beq	r2,zero,808028 <___vfprintf_internal_r+0x8a0>
  8077f0:	b0800417 	ldw	r2,16(r22)
  8077f4:	10020c26 	beq	r2,zero,808028 <___vfprintf_internal_r+0x8a0>
  8077f8:	b200030b 	ldhu	r8,12(r22)
  8077fc:	00800284 	movi	r2,10
  807800:	40c0068c 	andi	r3,r8,26
  807804:	18802f1e 	bne	r3,r2,8078c4 <___vfprintf_internal_r+0x13c>
  807808:	b080038f 	ldh	r2,14(r22)
  80780c:	10002d16 	blt	r2,zero,8078c4 <___vfprintf_internal_r+0x13c>
  807810:	b240038b 	ldhu	r9,14(r22)
  807814:	b2800717 	ldw	r10,28(r22)
  807818:	b2c00917 	ldw	r11,36(r22)
  80781c:	d9014f17 	ldw	r4,1340(sp)
  807820:	dc402904 	addi	r17,sp,164
  807824:	d8804004 	addi	r2,sp,256
  807828:	00c10004 	movi	r3,1024
  80782c:	423fff4c 	andi	r8,r8,65533
  807830:	800d883a 	mov	r6,r16
  807834:	880b883a 	mov	r5,r17
  807838:	da002c0d 	sth	r8,176(sp)
  80783c:	da402c8d 	sth	r9,178(sp)
  807840:	da803015 	stw	r10,192(sp)
  807844:	dac03215 	stw	r11,200(sp)
  807848:	d8802d15 	stw	r2,180(sp)
  80784c:	d8c02e15 	stw	r3,184(sp)
  807850:	d8802915 	stw	r2,164(sp)
  807854:	d8c02b15 	stw	r3,172(sp)
  807858:	d8002f15 	stw	zero,188(sp)
  80785c:	08077880 	call	807788 <___vfprintf_internal_r>
  807860:	d8814b15 	stw	r2,1324(sp)
  807864:	10000416 	blt	r2,zero,807878 <___vfprintf_internal_r+0xf0>
  807868:	d9014f17 	ldw	r4,1340(sp)
  80786c:	880b883a 	mov	r5,r17
  807870:	080afa40 	call	80afa4 <_fflush_r>
  807874:	1002321e 	bne	r2,zero,808140 <___vfprintf_internal_r+0x9b8>
  807878:	d8802c0b 	ldhu	r2,176(sp)
  80787c:	1080100c 	andi	r2,r2,64
  807880:	10000326 	beq	r2,zero,807890 <___vfprintf_internal_r+0x108>
  807884:	b080030b 	ldhu	r2,12(r22)
  807888:	10801014 	ori	r2,r2,64
  80788c:	b080030d 	sth	r2,12(r22)
  807890:	d8814b17 	ldw	r2,1324(sp)
  807894:	dfc15b17 	ldw	ra,1388(sp)
  807898:	df015a17 	ldw	fp,1384(sp)
  80789c:	ddc15917 	ldw	r23,1380(sp)
  8078a0:	dd815817 	ldw	r22,1376(sp)
  8078a4:	dd415717 	ldw	r21,1372(sp)
  8078a8:	dd015617 	ldw	r20,1368(sp)
  8078ac:	dcc15517 	ldw	r19,1364(sp)
  8078b0:	dc815417 	ldw	r18,1360(sp)
  8078b4:	dc415317 	ldw	r17,1356(sp)
  8078b8:	dc015217 	ldw	r16,1352(sp)
  8078bc:	dec15c04 	addi	sp,sp,1392
  8078c0:	f800283a 	ret
  8078c4:	0005883a 	mov	r2,zero
  8078c8:	0007883a 	mov	r3,zero
  8078cc:	dd401904 	addi	r21,sp,100
  8078d0:	d8814215 	stw	r2,1288(sp)
  8078d4:	802f883a 	mov	r23,r16
  8078d8:	d8c14315 	stw	r3,1292(sp)
  8078dc:	d8014b15 	stw	zero,1324(sp)
  8078e0:	d8014815 	stw	zero,1312(sp)
  8078e4:	d8014415 	stw	zero,1296(sp)
  8078e8:	d8014715 	stw	zero,1308(sp)
  8078ec:	dd400c15 	stw	r21,48(sp)
  8078f0:	d8000e15 	stw	zero,56(sp)
  8078f4:	d8000d15 	stw	zero,52(sp)
  8078f8:	b8800007 	ldb	r2,0(r23)
  8078fc:	10001926 	beq	r2,zero,807964 <___vfprintf_internal_r+0x1dc>
  807900:	00c00944 	movi	r3,37
  807904:	10c01726 	beq	r2,r3,807964 <___vfprintf_internal_r+0x1dc>
  807908:	b821883a 	mov	r16,r23
  80790c:	00000106 	br	807914 <___vfprintf_internal_r+0x18c>
  807910:	10c00326 	beq	r2,r3,807920 <___vfprintf_internal_r+0x198>
  807914:	84000044 	addi	r16,r16,1
  807918:	80800007 	ldb	r2,0(r16)
  80791c:	103ffc1e 	bne	r2,zero,807910 <___vfprintf_internal_r+0x188>
  807920:	85e7c83a 	sub	r19,r16,r23
  807924:	98000e26 	beq	r19,zero,807960 <___vfprintf_internal_r+0x1d8>
  807928:	dc800e17 	ldw	r18,56(sp)
  80792c:	dc400d17 	ldw	r17,52(sp)
  807930:	008001c4 	movi	r2,7
  807934:	94e5883a 	add	r18,r18,r19
  807938:	8c400044 	addi	r17,r17,1
  80793c:	adc00015 	stw	r23,0(r21)
  807940:	dc800e15 	stw	r18,56(sp)
  807944:	acc00115 	stw	r19,4(r21)
  807948:	dc400d15 	stw	r17,52(sp)
  80794c:	14428b16 	blt	r2,r17,80837c <___vfprintf_internal_r+0xbf4>
  807950:	ad400204 	addi	r21,r21,8
  807954:	d9014b17 	ldw	r4,1324(sp)
  807958:	24c9883a 	add	r4,r4,r19
  80795c:	d9014b15 	stw	r4,1324(sp)
  807960:	802f883a 	mov	r23,r16
  807964:	b8800007 	ldb	r2,0(r23)
  807968:	10013c26 	beq	r2,zero,807e5c <___vfprintf_internal_r+0x6d4>
  80796c:	bdc00044 	addi	r23,r23,1
  807970:	d8000405 	stb	zero,16(sp)
  807974:	b8c00007 	ldb	r3,0(r23)
  807978:	04ffffc4 	movi	r19,-1
  80797c:	d8014c15 	stw	zero,1328(sp)
  807980:	d8014a15 	stw	zero,1320(sp)
  807984:	d8c14d15 	stw	r3,1332(sp)
  807988:	bdc00044 	addi	r23,r23,1
  80798c:	d9414d17 	ldw	r5,1332(sp)
  807990:	00801604 	movi	r2,88
  807994:	28fff804 	addi	r3,r5,-32
  807998:	10c06036 	bltu	r2,r3,807b1c <___vfprintf_internal_r+0x394>
  80799c:	18c5883a 	add	r2,r3,r3
  8079a0:	1085883a 	add	r2,r2,r2
  8079a4:	00c02034 	movhi	r3,128
  8079a8:	18de6e04 	addi	r3,r3,31160
  8079ac:	10c5883a 	add	r2,r2,r3
  8079b0:	11000017 	ldw	r4,0(r2)
  8079b4:	2000683a 	jmp	r4
  8079b8:	0080892c 	andhi	r2,zero,548
  8079bc:	00807b1c 	xori	r2,zero,492
  8079c0:	00807b1c 	xori	r2,zero,492
  8079c4:	00808918 	cmpnei	r2,zero,548
  8079c8:	00807b1c 	xori	r2,zero,492
  8079cc:	00807b1c 	xori	r2,zero,492
  8079d0:	00807b1c 	xori	r2,zero,492
  8079d4:	00807b1c 	xori	r2,zero,492
  8079d8:	00807b1c 	xori	r2,zero,492
  8079dc:	00807b1c 	xori	r2,zero,492
  8079e0:	008086f8 	rdprs	r2,zero,539
  8079e4:	00808908 	cmpgei	r2,zero,548
  8079e8:	00807b1c 	xori	r2,zero,492
  8079ec:	00808710 	cmplti	r2,zero,540
  8079f0:	008089b0 	cmpltui	r2,zero,550
  8079f4:	00807b1c 	xori	r2,zero,492
  8079f8:	0080899c 	xori	r2,zero,550
  8079fc:	00808958 	cmpnei	r2,zero,549
  807a00:	00808958 	cmpnei	r2,zero,549
  807a04:	00808958 	cmpnei	r2,zero,549
  807a08:	00808958 	cmpnei	r2,zero,549
  807a0c:	00808958 	cmpnei	r2,zero,549
  807a10:	00808958 	cmpnei	r2,zero,549
  807a14:	00808958 	cmpnei	r2,zero,549
  807a18:	00808958 	cmpnei	r2,zero,549
  807a1c:	00808958 	cmpnei	r2,zero,549
  807a20:	00807b1c 	xori	r2,zero,492
  807a24:	00807b1c 	xori	r2,zero,492
  807a28:	00807b1c 	xori	r2,zero,492
  807a2c:	00807b1c 	xori	r2,zero,492
  807a30:	00807b1c 	xori	r2,zero,492
  807a34:	00807b1c 	xori	r2,zero,492
  807a38:	00807b1c 	xori	r2,zero,492
  807a3c:	00807b1c 	xori	r2,zero,492
  807a40:	00807b1c 	xori	r2,zero,492
  807a44:	00807b1c 	xori	r2,zero,492
  807a48:	00808174 	movhi	r2,517
  807a4c:	008087e0 	cmpeqi	r2,zero,543
  807a50:	00807b1c 	xori	r2,zero,492
  807a54:	008087e0 	cmpeqi	r2,zero,543
  807a58:	00807b1c 	xori	r2,zero,492
  807a5c:	00807b1c 	xori	r2,zero,492
  807a60:	00807b1c 	xori	r2,zero,492
  807a64:	00807b1c 	xori	r2,zero,492
  807a68:	00808944 	movi	r2,549
  807a6c:	00807b1c 	xori	r2,zero,492
  807a70:	00807b1c 	xori	r2,zero,492
  807a74:	00808228 	cmpgeui	r2,zero,520
  807a78:	00807b1c 	xori	r2,zero,492
  807a7c:	00807b1c 	xori	r2,zero,492
  807a80:	00807b1c 	xori	r2,zero,492
  807a84:	00807b1c 	xori	r2,zero,492
  807a88:	00807b1c 	xori	r2,zero,492
  807a8c:	00808274 	movhi	r2,521
  807a90:	00807b1c 	xori	r2,zero,492
  807a94:	00807b1c 	xori	r2,zero,492
  807a98:	00808894 	movui	r2,546
  807a9c:	00807b1c 	xori	r2,zero,492
  807aa0:	00807b1c 	xori	r2,zero,492
  807aa4:	00807b1c 	xori	r2,zero,492
  807aa8:	00807b1c 	xori	r2,zero,492
  807aac:	00807b1c 	xori	r2,zero,492
  807ab0:	00807b1c 	xori	r2,zero,492
  807ab4:	00807b1c 	xori	r2,zero,492
  807ab8:	00807b1c 	xori	r2,zero,492
  807abc:	00807b1c 	xori	r2,zero,492
  807ac0:	00807b1c 	xori	r2,zero,492
  807ac4:	00808868 	cmpgeui	r2,zero,545
  807ac8:	00808180 	call	80818 <OSCtxSw_SWITCH_PC+0x807d8>
  807acc:	008087e0 	cmpeqi	r2,zero,543
  807ad0:	008087e0 	cmpeqi	r2,zero,543
  807ad4:	008087e0 	cmpeqi	r2,zero,543
  807ad8:	008087cc 	andi	r2,zero,543
  807adc:	00808180 	call	80818 <OSCtxSw_SWITCH_PC+0x807d8>
  807ae0:	00807b1c 	xori	r2,zero,492
  807ae4:	00807b1c 	xori	r2,zero,492
  807ae8:	00808754 	movui	r2,541
  807aec:	00807b1c 	xori	r2,zero,492
  807af0:	00808724 	muli	r2,zero,540
  807af4:	00808234 	movhi	r2,520
  807af8:	00808784 	movi	r2,542
  807afc:	00808770 	cmpltui	r2,zero,541
  807b00:	00807b1c 	xori	r2,zero,492
  807b04:	00808a18 	cmpnei	r2,zero,552
  807b08:	00807b1c 	xori	r2,zero,492
  807b0c:	00808280 	call	80828 <OSCtxSw_SWITCH_PC+0x807e8>
  807b10:	00807b1c 	xori	r2,zero,492
  807b14:	00807b1c 	xori	r2,zero,492
  807b18:	008088f8 	rdprs	r2,zero,547
  807b1c:	d9014d17 	ldw	r4,1332(sp)
  807b20:	2000ce26 	beq	r4,zero,807e5c <___vfprintf_internal_r+0x6d4>
  807b24:	01400044 	movi	r5,1
  807b28:	d9800f04 	addi	r6,sp,60
  807b2c:	d9c14015 	stw	r7,1280(sp)
  807b30:	d9414515 	stw	r5,1300(sp)
  807b34:	d9814115 	stw	r6,1284(sp)
  807b38:	280f883a 	mov	r7,r5
  807b3c:	d9000f05 	stb	r4,60(sp)
  807b40:	d8000405 	stb	zero,16(sp)
  807b44:	d8014615 	stw	zero,1304(sp)
  807b48:	d8c14c17 	ldw	r3,1328(sp)
  807b4c:	1880008c 	andi	r2,r3,2
  807b50:	1005003a 	cmpeq	r2,r2,zero
  807b54:	d8815015 	stw	r2,1344(sp)
  807b58:	1000031e 	bne	r2,zero,807b68 <___vfprintf_internal_r+0x3e0>
  807b5c:	d9014517 	ldw	r4,1300(sp)
  807b60:	21000084 	addi	r4,r4,2
  807b64:	d9014515 	stw	r4,1300(sp)
  807b68:	d9414c17 	ldw	r5,1328(sp)
  807b6c:	2940210c 	andi	r5,r5,132
  807b70:	d9414e15 	stw	r5,1336(sp)
  807b74:	28002d1e 	bne	r5,zero,807c2c <___vfprintf_internal_r+0x4a4>
  807b78:	d9814a17 	ldw	r6,1320(sp)
  807b7c:	d8814517 	ldw	r2,1300(sp)
  807b80:	30a1c83a 	sub	r16,r6,r2
  807b84:	0400290e 	bge	zero,r16,807c2c <___vfprintf_internal_r+0x4a4>
  807b88:	00800404 	movi	r2,16
  807b8c:	14045e0e 	bge	r2,r16,808d08 <___vfprintf_internal_r+0x1580>
  807b90:	dc800e17 	ldw	r18,56(sp)
  807b94:	dc400d17 	ldw	r17,52(sp)
  807b98:	1027883a 	mov	r19,r2
  807b9c:	070020b4 	movhi	fp,130
  807ba0:	e72f6184 	addi	fp,fp,-17018
  807ba4:	050001c4 	movi	r20,7
  807ba8:	00000306 	br	807bb8 <___vfprintf_internal_r+0x430>
  807bac:	843ffc04 	addi	r16,r16,-16
  807bb0:	ad400204 	addi	r21,r21,8
  807bb4:	9c00130e 	bge	r19,r16,807c04 <___vfprintf_internal_r+0x47c>
  807bb8:	94800404 	addi	r18,r18,16
  807bbc:	8c400044 	addi	r17,r17,1
  807bc0:	af000015 	stw	fp,0(r21)
  807bc4:	acc00115 	stw	r19,4(r21)
  807bc8:	dc800e15 	stw	r18,56(sp)
  807bcc:	dc400d15 	stw	r17,52(sp)
  807bd0:	a47ff60e 	bge	r20,r17,807bac <___vfprintf_internal_r+0x424>
  807bd4:	d9014f17 	ldw	r4,1340(sp)
  807bd8:	b00b883a 	mov	r5,r22
  807bdc:	d9800c04 	addi	r6,sp,48
  807be0:	d9c15115 	stw	r7,1348(sp)
  807be4:	08077300 	call	807730 <__sprint_r>
  807be8:	d9c15117 	ldw	r7,1348(sp)
  807bec:	10009e1e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  807bf0:	843ffc04 	addi	r16,r16,-16
  807bf4:	dc800e17 	ldw	r18,56(sp)
  807bf8:	dc400d17 	ldw	r17,52(sp)
  807bfc:	dd401904 	addi	r21,sp,100
  807c00:	9c3fed16 	blt	r19,r16,807bb8 <___vfprintf_internal_r+0x430>
  807c04:	9425883a 	add	r18,r18,r16
  807c08:	8c400044 	addi	r17,r17,1
  807c0c:	008001c4 	movi	r2,7
  807c10:	af000015 	stw	fp,0(r21)
  807c14:	ac000115 	stw	r16,4(r21)
  807c18:	dc800e15 	stw	r18,56(sp)
  807c1c:	dc400d15 	stw	r17,52(sp)
  807c20:	1441f516 	blt	r2,r17,8083f8 <___vfprintf_internal_r+0xc70>
  807c24:	ad400204 	addi	r21,r21,8
  807c28:	00000206 	br	807c34 <___vfprintf_internal_r+0x4ac>
  807c2c:	dc800e17 	ldw	r18,56(sp)
  807c30:	dc400d17 	ldw	r17,52(sp)
  807c34:	d8800407 	ldb	r2,16(sp)
  807c38:	10000b26 	beq	r2,zero,807c68 <___vfprintf_internal_r+0x4e0>
  807c3c:	00800044 	movi	r2,1
  807c40:	94800044 	addi	r18,r18,1
  807c44:	8c400044 	addi	r17,r17,1
  807c48:	a8800115 	stw	r2,4(r21)
  807c4c:	d8c00404 	addi	r3,sp,16
  807c50:	008001c4 	movi	r2,7
  807c54:	a8c00015 	stw	r3,0(r21)
  807c58:	dc800e15 	stw	r18,56(sp)
  807c5c:	dc400d15 	stw	r17,52(sp)
  807c60:	1441da16 	blt	r2,r17,8083cc <___vfprintf_internal_r+0xc44>
  807c64:	ad400204 	addi	r21,r21,8
  807c68:	d9015017 	ldw	r4,1344(sp)
  807c6c:	20000b1e 	bne	r4,zero,807c9c <___vfprintf_internal_r+0x514>
  807c70:	d8800444 	addi	r2,sp,17
  807c74:	94800084 	addi	r18,r18,2
  807c78:	8c400044 	addi	r17,r17,1
  807c7c:	a8800015 	stw	r2,0(r21)
  807c80:	00c00084 	movi	r3,2
  807c84:	008001c4 	movi	r2,7
  807c88:	a8c00115 	stw	r3,4(r21)
  807c8c:	dc800e15 	stw	r18,56(sp)
  807c90:	dc400d15 	stw	r17,52(sp)
  807c94:	1441c216 	blt	r2,r17,8083a0 <___vfprintf_internal_r+0xc18>
  807c98:	ad400204 	addi	r21,r21,8
  807c9c:	d9414e17 	ldw	r5,1336(sp)
  807ca0:	00802004 	movi	r2,128
  807ca4:	2880b126 	beq	r5,r2,807f6c <___vfprintf_internal_r+0x7e4>
  807ca8:	d8c14617 	ldw	r3,1304(sp)
  807cac:	19e1c83a 	sub	r16,r3,r7
  807cb0:	0400260e 	bge	zero,r16,807d4c <___vfprintf_internal_r+0x5c4>
  807cb4:	00800404 	movi	r2,16
  807cb8:	1403cf0e 	bge	r2,r16,808bf8 <___vfprintf_internal_r+0x1470>
  807cbc:	1027883a 	mov	r19,r2
  807cc0:	070020b4 	movhi	fp,130
  807cc4:	e72f5d84 	addi	fp,fp,-17034
  807cc8:	050001c4 	movi	r20,7
  807ccc:	00000306 	br	807cdc <___vfprintf_internal_r+0x554>
  807cd0:	843ffc04 	addi	r16,r16,-16
  807cd4:	ad400204 	addi	r21,r21,8
  807cd8:	9c00130e 	bge	r19,r16,807d28 <___vfprintf_internal_r+0x5a0>
  807cdc:	94800404 	addi	r18,r18,16
  807ce0:	8c400044 	addi	r17,r17,1
  807ce4:	af000015 	stw	fp,0(r21)
  807ce8:	acc00115 	stw	r19,4(r21)
  807cec:	dc800e15 	stw	r18,56(sp)
  807cf0:	dc400d15 	stw	r17,52(sp)
  807cf4:	a47ff60e 	bge	r20,r17,807cd0 <___vfprintf_internal_r+0x548>
  807cf8:	d9014f17 	ldw	r4,1340(sp)
  807cfc:	b00b883a 	mov	r5,r22
  807d00:	d9800c04 	addi	r6,sp,48
  807d04:	d9c15115 	stw	r7,1348(sp)
  807d08:	08077300 	call	807730 <__sprint_r>
  807d0c:	d9c15117 	ldw	r7,1348(sp)
  807d10:	1000551e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  807d14:	843ffc04 	addi	r16,r16,-16
  807d18:	dc800e17 	ldw	r18,56(sp)
  807d1c:	dc400d17 	ldw	r17,52(sp)
  807d20:	dd401904 	addi	r21,sp,100
  807d24:	9c3fed16 	blt	r19,r16,807cdc <___vfprintf_internal_r+0x554>
  807d28:	9425883a 	add	r18,r18,r16
  807d2c:	8c400044 	addi	r17,r17,1
  807d30:	008001c4 	movi	r2,7
  807d34:	af000015 	stw	fp,0(r21)
  807d38:	ac000115 	stw	r16,4(r21)
  807d3c:	dc800e15 	stw	r18,56(sp)
  807d40:	dc400d15 	stw	r17,52(sp)
  807d44:	14418216 	blt	r2,r17,808350 <___vfprintf_internal_r+0xbc8>
  807d48:	ad400204 	addi	r21,r21,8
  807d4c:	d9014c17 	ldw	r4,1328(sp)
  807d50:	2080400c 	andi	r2,r4,256
  807d54:	10004a1e 	bne	r2,zero,807e80 <___vfprintf_internal_r+0x6f8>
  807d58:	d9414117 	ldw	r5,1284(sp)
  807d5c:	91e5883a 	add	r18,r18,r7
  807d60:	8c400044 	addi	r17,r17,1
  807d64:	008001c4 	movi	r2,7
  807d68:	a9400015 	stw	r5,0(r21)
  807d6c:	a9c00115 	stw	r7,4(r21)
  807d70:	dc800e15 	stw	r18,56(sp)
  807d74:	dc400d15 	stw	r17,52(sp)
  807d78:	14416716 	blt	r2,r17,808318 <___vfprintf_internal_r+0xb90>
  807d7c:	a8c00204 	addi	r3,r21,8
  807d80:	d9814c17 	ldw	r6,1328(sp)
  807d84:	3080010c 	andi	r2,r6,4
  807d88:	10002826 	beq	r2,zero,807e2c <___vfprintf_internal_r+0x6a4>
  807d8c:	d8814a17 	ldw	r2,1320(sp)
  807d90:	d9014517 	ldw	r4,1300(sp)
  807d94:	1121c83a 	sub	r16,r2,r4
  807d98:	0400240e 	bge	zero,r16,807e2c <___vfprintf_internal_r+0x6a4>
  807d9c:	00800404 	movi	r2,16
  807da0:	1404550e 	bge	r2,r16,808ef8 <___vfprintf_internal_r+0x1770>
  807da4:	dc400d17 	ldw	r17,52(sp)
  807da8:	1027883a 	mov	r19,r2
  807dac:	070020b4 	movhi	fp,130
  807db0:	e72f6184 	addi	fp,fp,-17018
  807db4:	050001c4 	movi	r20,7
  807db8:	00000306 	br	807dc8 <___vfprintf_internal_r+0x640>
  807dbc:	843ffc04 	addi	r16,r16,-16
  807dc0:	18c00204 	addi	r3,r3,8
  807dc4:	9c00110e 	bge	r19,r16,807e0c <___vfprintf_internal_r+0x684>
  807dc8:	94800404 	addi	r18,r18,16
  807dcc:	8c400044 	addi	r17,r17,1
  807dd0:	1f000015 	stw	fp,0(r3)
  807dd4:	1cc00115 	stw	r19,4(r3)
  807dd8:	dc800e15 	stw	r18,56(sp)
  807ddc:	dc400d15 	stw	r17,52(sp)
  807de0:	a47ff60e 	bge	r20,r17,807dbc <___vfprintf_internal_r+0x634>
  807de4:	d9014f17 	ldw	r4,1340(sp)
  807de8:	b00b883a 	mov	r5,r22
  807dec:	d9800c04 	addi	r6,sp,48
  807df0:	08077300 	call	807730 <__sprint_r>
  807df4:	10001c1e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  807df8:	843ffc04 	addi	r16,r16,-16
  807dfc:	dc800e17 	ldw	r18,56(sp)
  807e00:	dc400d17 	ldw	r17,52(sp)
  807e04:	d8c01904 	addi	r3,sp,100
  807e08:	9c3fef16 	blt	r19,r16,807dc8 <___vfprintf_internal_r+0x640>
  807e0c:	9425883a 	add	r18,r18,r16
  807e10:	8c400044 	addi	r17,r17,1
  807e14:	008001c4 	movi	r2,7
  807e18:	1f000015 	stw	fp,0(r3)
  807e1c:	1c000115 	stw	r16,4(r3)
  807e20:	dc800e15 	stw	r18,56(sp)
  807e24:	dc400d15 	stw	r17,52(sp)
  807e28:	1440cb16 	blt	r2,r17,808158 <___vfprintf_internal_r+0x9d0>
  807e2c:	d8814a17 	ldw	r2,1320(sp)
  807e30:	d9414517 	ldw	r5,1300(sp)
  807e34:	1140010e 	bge	r2,r5,807e3c <___vfprintf_internal_r+0x6b4>
  807e38:	2805883a 	mov	r2,r5
  807e3c:	d9814b17 	ldw	r6,1324(sp)
  807e40:	308d883a 	add	r6,r6,r2
  807e44:	d9814b15 	stw	r6,1324(sp)
  807e48:	90013b1e 	bne	r18,zero,808338 <___vfprintf_internal_r+0xbb0>
  807e4c:	d9c14017 	ldw	r7,1280(sp)
  807e50:	dd401904 	addi	r21,sp,100
  807e54:	d8000d15 	stw	zero,52(sp)
  807e58:	003ea706 	br	8078f8 <___vfprintf_internal_r+0x170>
  807e5c:	d8800e17 	ldw	r2,56(sp)
  807e60:	1005451e 	bne	r2,zero,809378 <___vfprintf_internal_r+0x1bf0>
  807e64:	d8000d15 	stw	zero,52(sp)
  807e68:	b080030b 	ldhu	r2,12(r22)
  807e6c:	1080100c 	andi	r2,r2,64
  807e70:	103e8726 	beq	r2,zero,807890 <___vfprintf_internal_r+0x108>
  807e74:	00bfffc4 	movi	r2,-1
  807e78:	d8814b15 	stw	r2,1324(sp)
  807e7c:	003e8406 	br	807890 <___vfprintf_internal_r+0x108>
  807e80:	d9814d17 	ldw	r6,1332(sp)
  807e84:	00801944 	movi	r2,101
  807e88:	11806e16 	blt	r2,r6,808044 <___vfprintf_internal_r+0x8bc>
  807e8c:	d9414717 	ldw	r5,1308(sp)
  807e90:	00c00044 	movi	r3,1
  807e94:	1943490e 	bge	r3,r5,808bbc <___vfprintf_internal_r+0x1434>
  807e98:	d8814117 	ldw	r2,1284(sp)
  807e9c:	94800044 	addi	r18,r18,1
  807ea0:	8c400044 	addi	r17,r17,1
  807ea4:	a8800015 	stw	r2,0(r21)
  807ea8:	008001c4 	movi	r2,7
  807eac:	a8c00115 	stw	r3,4(r21)
  807eb0:	dc800e15 	stw	r18,56(sp)
  807eb4:	dc400d15 	stw	r17,52(sp)
  807eb8:	1441ca16 	blt	r2,r17,8085e4 <___vfprintf_internal_r+0xe5c>
  807ebc:	a8c00204 	addi	r3,r21,8
  807ec0:	d9014917 	ldw	r4,1316(sp)
  807ec4:	00800044 	movi	r2,1
  807ec8:	94800044 	addi	r18,r18,1
  807ecc:	8c400044 	addi	r17,r17,1
  807ed0:	18800115 	stw	r2,4(r3)
  807ed4:	008001c4 	movi	r2,7
  807ed8:	19000015 	stw	r4,0(r3)
  807edc:	dc800e15 	stw	r18,56(sp)
  807ee0:	dc400d15 	stw	r17,52(sp)
  807ee4:	1441b616 	blt	r2,r17,8085c0 <___vfprintf_internal_r+0xe38>
  807ee8:	1cc00204 	addi	r19,r3,8
  807eec:	d9014217 	ldw	r4,1288(sp)
  807ef0:	d9414317 	ldw	r5,1292(sp)
  807ef4:	000d883a 	mov	r6,zero
  807ef8:	000f883a 	mov	r7,zero
  807efc:	080672c0 	call	80672c <__nedf2>
  807f00:	10017426 	beq	r2,zero,8084d4 <___vfprintf_internal_r+0xd4c>
  807f04:	d9414717 	ldw	r5,1308(sp)
  807f08:	d9814117 	ldw	r6,1284(sp)
  807f0c:	8c400044 	addi	r17,r17,1
  807f10:	2c85883a 	add	r2,r5,r18
  807f14:	14bfffc4 	addi	r18,r2,-1
  807f18:	28bfffc4 	addi	r2,r5,-1
  807f1c:	30c00044 	addi	r3,r6,1
  807f20:	98800115 	stw	r2,4(r19)
  807f24:	008001c4 	movi	r2,7
  807f28:	98c00015 	stw	r3,0(r19)
  807f2c:	dc800e15 	stw	r18,56(sp)
  807f30:	dc400d15 	stw	r17,52(sp)
  807f34:	14418e16 	blt	r2,r17,808570 <___vfprintf_internal_r+0xde8>
  807f38:	9cc00204 	addi	r19,r19,8
  807f3c:	d9414817 	ldw	r5,1312(sp)
  807f40:	d8800804 	addi	r2,sp,32
  807f44:	8c400044 	addi	r17,r17,1
  807f48:	9165883a 	add	r18,r18,r5
  807f4c:	98800015 	stw	r2,0(r19)
  807f50:	008001c4 	movi	r2,7
  807f54:	99400115 	stw	r5,4(r19)
  807f58:	dc800e15 	stw	r18,56(sp)
  807f5c:	dc400d15 	stw	r17,52(sp)
  807f60:	1440ed16 	blt	r2,r17,808318 <___vfprintf_internal_r+0xb90>
  807f64:	98c00204 	addi	r3,r19,8
  807f68:	003f8506 	br	807d80 <___vfprintf_internal_r+0x5f8>
  807f6c:	d9814a17 	ldw	r6,1320(sp)
  807f70:	d8814517 	ldw	r2,1300(sp)
  807f74:	30a1c83a 	sub	r16,r6,r2
  807f78:	043f4b0e 	bge	zero,r16,807ca8 <___vfprintf_internal_r+0x520>
  807f7c:	00800404 	movi	r2,16
  807f80:	14043a0e 	bge	r2,r16,80906c <___vfprintf_internal_r+0x18e4>
  807f84:	1027883a 	mov	r19,r2
  807f88:	070020b4 	movhi	fp,130
  807f8c:	e72f5d84 	addi	fp,fp,-17034
  807f90:	050001c4 	movi	r20,7
  807f94:	00000306 	br	807fa4 <___vfprintf_internal_r+0x81c>
  807f98:	843ffc04 	addi	r16,r16,-16
  807f9c:	ad400204 	addi	r21,r21,8
  807fa0:	9c00130e 	bge	r19,r16,807ff0 <___vfprintf_internal_r+0x868>
  807fa4:	94800404 	addi	r18,r18,16
  807fa8:	8c400044 	addi	r17,r17,1
  807fac:	af000015 	stw	fp,0(r21)
  807fb0:	acc00115 	stw	r19,4(r21)
  807fb4:	dc800e15 	stw	r18,56(sp)
  807fb8:	dc400d15 	stw	r17,52(sp)
  807fbc:	a47ff60e 	bge	r20,r17,807f98 <___vfprintf_internal_r+0x810>
  807fc0:	d9014f17 	ldw	r4,1340(sp)
  807fc4:	b00b883a 	mov	r5,r22
  807fc8:	d9800c04 	addi	r6,sp,48
  807fcc:	d9c15115 	stw	r7,1348(sp)
  807fd0:	08077300 	call	807730 <__sprint_r>
  807fd4:	d9c15117 	ldw	r7,1348(sp)
  807fd8:	103fa31e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  807fdc:	843ffc04 	addi	r16,r16,-16
  807fe0:	dc800e17 	ldw	r18,56(sp)
  807fe4:	dc400d17 	ldw	r17,52(sp)
  807fe8:	dd401904 	addi	r21,sp,100
  807fec:	9c3fed16 	blt	r19,r16,807fa4 <___vfprintf_internal_r+0x81c>
  807ff0:	9425883a 	add	r18,r18,r16
  807ff4:	8c400044 	addi	r17,r17,1
  807ff8:	008001c4 	movi	r2,7
  807ffc:	af000015 	stw	fp,0(r21)
  808000:	ac000115 	stw	r16,4(r21)
  808004:	dc800e15 	stw	r18,56(sp)
  808008:	dc400d15 	stw	r17,52(sp)
  80800c:	14416116 	blt	r2,r17,808594 <___vfprintf_internal_r+0xe0c>
  808010:	ad400204 	addi	r21,r21,8
  808014:	003f2406 	br	807ca8 <___vfprintf_internal_r+0x520>
  808018:	d9014f17 	ldw	r4,1340(sp)
  80801c:	080b23c0 	call	80b23c <__sinit>
  808020:	d9c15117 	ldw	r7,1348(sp)
  808024:	003def06 	br	8077e4 <___vfprintf_internal_r+0x5c>
  808028:	d9014f17 	ldw	r4,1340(sp)
  80802c:	b00b883a 	mov	r5,r22
  808030:	d9c15115 	stw	r7,1348(sp)
  808034:	08096700 	call	809670 <__swsetup_r>
  808038:	d9c15117 	ldw	r7,1348(sp)
  80803c:	103dee26 	beq	r2,zero,8077f8 <___vfprintf_internal_r+0x70>
  808040:	003f8c06 	br	807e74 <___vfprintf_internal_r+0x6ec>
  808044:	d9014217 	ldw	r4,1288(sp)
  808048:	d9414317 	ldw	r5,1292(sp)
  80804c:	000d883a 	mov	r6,zero
  808050:	000f883a 	mov	r7,zero
  808054:	08066a40 	call	8066a4 <__eqdf2>
  808058:	1000f21e 	bne	r2,zero,808424 <___vfprintf_internal_r+0xc9c>
  80805c:	008020b4 	movhi	r2,130
  808060:	10af5d04 	addi	r2,r2,-17036
  808064:	94800044 	addi	r18,r18,1
  808068:	8c400044 	addi	r17,r17,1
  80806c:	a8800015 	stw	r2,0(r21)
  808070:	00c00044 	movi	r3,1
  808074:	008001c4 	movi	r2,7
  808078:	a8c00115 	stw	r3,4(r21)
  80807c:	dc800e15 	stw	r18,56(sp)
  808080:	dc400d15 	stw	r17,52(sp)
  808084:	14430016 	blt	r2,r17,808c88 <___vfprintf_internal_r+0x1500>
  808088:	a8c00204 	addi	r3,r21,8
  80808c:	d8800517 	ldw	r2,20(sp)
  808090:	d9014717 	ldw	r4,1308(sp)
  808094:	11015c0e 	bge	r2,r4,808608 <___vfprintf_internal_r+0xe80>
  808098:	dc400d17 	ldw	r17,52(sp)
  80809c:	d9814917 	ldw	r6,1316(sp)
  8080a0:	00800044 	movi	r2,1
  8080a4:	94800044 	addi	r18,r18,1
  8080a8:	8c400044 	addi	r17,r17,1
  8080ac:	18800115 	stw	r2,4(r3)
  8080b0:	008001c4 	movi	r2,7
  8080b4:	19800015 	stw	r6,0(r3)
  8080b8:	dc800e15 	stw	r18,56(sp)
  8080bc:	dc400d15 	stw	r17,52(sp)
  8080c0:	14431616 	blt	r2,r17,808d1c <___vfprintf_internal_r+0x1594>
  8080c4:	18c00204 	addi	r3,r3,8
  8080c8:	d8814717 	ldw	r2,1308(sp)
  8080cc:	143fffc4 	addi	r16,r2,-1
  8080d0:	043f2b0e 	bge	zero,r16,807d80 <___vfprintf_internal_r+0x5f8>
  8080d4:	00800404 	movi	r2,16
  8080d8:	1402a80e 	bge	r2,r16,808b7c <___vfprintf_internal_r+0x13f4>
  8080dc:	dc400d17 	ldw	r17,52(sp)
  8080e0:	1027883a 	mov	r19,r2
  8080e4:	070020b4 	movhi	fp,130
  8080e8:	e72f5d84 	addi	fp,fp,-17034
  8080ec:	050001c4 	movi	r20,7
  8080f0:	00000306 	br	808100 <___vfprintf_internal_r+0x978>
  8080f4:	18c00204 	addi	r3,r3,8
  8080f8:	843ffc04 	addi	r16,r16,-16
  8080fc:	9c02a20e 	bge	r19,r16,808b88 <___vfprintf_internal_r+0x1400>
  808100:	94800404 	addi	r18,r18,16
  808104:	8c400044 	addi	r17,r17,1
  808108:	1f000015 	stw	fp,0(r3)
  80810c:	1cc00115 	stw	r19,4(r3)
  808110:	dc800e15 	stw	r18,56(sp)
  808114:	dc400d15 	stw	r17,52(sp)
  808118:	a47ff60e 	bge	r20,r17,8080f4 <___vfprintf_internal_r+0x96c>
  80811c:	d9014f17 	ldw	r4,1340(sp)
  808120:	b00b883a 	mov	r5,r22
  808124:	d9800c04 	addi	r6,sp,48
  808128:	08077300 	call	807730 <__sprint_r>
  80812c:	103f4e1e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  808130:	dc800e17 	ldw	r18,56(sp)
  808134:	dc400d17 	ldw	r17,52(sp)
  808138:	d8c01904 	addi	r3,sp,100
  80813c:	003fee06 	br	8080f8 <___vfprintf_internal_r+0x970>
  808140:	d8802c0b 	ldhu	r2,176(sp)
  808144:	00ffffc4 	movi	r3,-1
  808148:	d8c14b15 	stw	r3,1324(sp)
  80814c:	1080100c 	andi	r2,r2,64
  808150:	103dcc1e 	bne	r2,zero,807884 <___vfprintf_internal_r+0xfc>
  808154:	003dce06 	br	807890 <___vfprintf_internal_r+0x108>
  808158:	d9014f17 	ldw	r4,1340(sp)
  80815c:	b00b883a 	mov	r5,r22
  808160:	d9800c04 	addi	r6,sp,48
  808164:	08077300 	call	807730 <__sprint_r>
  808168:	103f3f1e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  80816c:	dc800e17 	ldw	r18,56(sp)
  808170:	003f2e06 	br	807e2c <___vfprintf_internal_r+0x6a4>
  808174:	d9414c17 	ldw	r5,1328(sp)
  808178:	29400414 	ori	r5,r5,16
  80817c:	d9414c15 	stw	r5,1328(sp)
  808180:	d9814c17 	ldw	r6,1328(sp)
  808184:	3080080c 	andi	r2,r6,32
  808188:	10014f1e 	bne	r2,zero,8086c8 <___vfprintf_internal_r+0xf40>
  80818c:	d8c14c17 	ldw	r3,1328(sp)
  808190:	1880040c 	andi	r2,r3,16
  808194:	1002f01e 	bne	r2,zero,808d58 <___vfprintf_internal_r+0x15d0>
  808198:	d9014c17 	ldw	r4,1328(sp)
  80819c:	2080100c 	andi	r2,r4,64
  8081a0:	1002ed26 	beq	r2,zero,808d58 <___vfprintf_internal_r+0x15d0>
  8081a4:	3880000f 	ldh	r2,0(r7)
  8081a8:	39c00104 	addi	r7,r7,4
  8081ac:	d9c14015 	stw	r7,1280(sp)
  8081b0:	1023d7fa 	srai	r17,r2,31
  8081b4:	1021883a 	mov	r16,r2
  8081b8:	88037816 	blt	r17,zero,808f9c <___vfprintf_internal_r+0x1814>
  8081bc:	01000044 	movi	r4,1
  8081c0:	98000416 	blt	r19,zero,8081d4 <___vfprintf_internal_r+0xa4c>
  8081c4:	d8c14c17 	ldw	r3,1328(sp)
  8081c8:	00bfdfc4 	movi	r2,-129
  8081cc:	1886703a 	and	r3,r3,r2
  8081d0:	d8c14c15 	stw	r3,1328(sp)
  8081d4:	8444b03a 	or	r2,r16,r17
  8081d8:	10022c1e 	bne	r2,zero,808a8c <___vfprintf_internal_r+0x1304>
  8081dc:	98022b1e 	bne	r19,zero,808a8c <___vfprintf_internal_r+0x1304>
  8081e0:	20803fcc 	andi	r2,r4,255
  8081e4:	1002a126 	beq	r2,zero,808c6c <___vfprintf_internal_r+0x14e4>
  8081e8:	d8c01904 	addi	r3,sp,100
  8081ec:	dd000f04 	addi	r20,sp,60
  8081f0:	d8c14115 	stw	r3,1284(sp)
  8081f4:	d8c14117 	ldw	r3,1284(sp)
  8081f8:	dcc14515 	stw	r19,1300(sp)
  8081fc:	a0c5c83a 	sub	r2,r20,r3
  808200:	11c00a04 	addi	r7,r2,40
  808204:	99c0010e 	bge	r19,r7,80820c <___vfprintf_internal_r+0xa84>
  808208:	d9c14515 	stw	r7,1300(sp)
  80820c:	dcc14615 	stw	r19,1304(sp)
  808210:	d8800407 	ldb	r2,16(sp)
  808214:	103e4c26 	beq	r2,zero,807b48 <___vfprintf_internal_r+0x3c0>
  808218:	d8814517 	ldw	r2,1300(sp)
  80821c:	10800044 	addi	r2,r2,1
  808220:	d8814515 	stw	r2,1300(sp)
  808224:	003e4806 	br	807b48 <___vfprintf_internal_r+0x3c0>
  808228:	d9814c17 	ldw	r6,1328(sp)
  80822c:	31800414 	ori	r6,r6,16
  808230:	d9814c15 	stw	r6,1328(sp)
  808234:	d8c14c17 	ldw	r3,1328(sp)
  808238:	1880080c 	andi	r2,r3,32
  80823c:	1001271e 	bne	r2,zero,8086dc <___vfprintf_internal_r+0xf54>
  808240:	d9414c17 	ldw	r5,1328(sp)
  808244:	2880040c 	andi	r2,r5,16
  808248:	1002bc1e 	bne	r2,zero,808d3c <___vfprintf_internal_r+0x15b4>
  80824c:	d9814c17 	ldw	r6,1328(sp)
  808250:	3080100c 	andi	r2,r6,64
  808254:	1002b926 	beq	r2,zero,808d3c <___vfprintf_internal_r+0x15b4>
  808258:	3c00000b 	ldhu	r16,0(r7)
  80825c:	0009883a 	mov	r4,zero
  808260:	39c00104 	addi	r7,r7,4
  808264:	0023883a 	mov	r17,zero
  808268:	d9c14015 	stw	r7,1280(sp)
  80826c:	d8000405 	stb	zero,16(sp)
  808270:	003fd306 	br	8081c0 <___vfprintf_internal_r+0xa38>
  808274:	d9014c17 	ldw	r4,1328(sp)
  808278:	21000414 	ori	r4,r4,16
  80827c:	d9014c15 	stw	r4,1328(sp)
  808280:	d9414c17 	ldw	r5,1328(sp)
  808284:	2880080c 	andi	r2,r5,32
  808288:	1001081e 	bne	r2,zero,8086ac <___vfprintf_internal_r+0xf24>
  80828c:	d8c14c17 	ldw	r3,1328(sp)
  808290:	1880040c 	andi	r2,r3,16
  808294:	1002b61e 	bne	r2,zero,808d70 <___vfprintf_internal_r+0x15e8>
  808298:	d9014c17 	ldw	r4,1328(sp)
  80829c:	2080100c 	andi	r2,r4,64
  8082a0:	1002b326 	beq	r2,zero,808d70 <___vfprintf_internal_r+0x15e8>
  8082a4:	3c00000b 	ldhu	r16,0(r7)
  8082a8:	01000044 	movi	r4,1
  8082ac:	39c00104 	addi	r7,r7,4
  8082b0:	0023883a 	mov	r17,zero
  8082b4:	d9c14015 	stw	r7,1280(sp)
  8082b8:	d8000405 	stb	zero,16(sp)
  8082bc:	003fc006 	br	8081c0 <___vfprintf_internal_r+0xa38>
  8082c0:	d9014f17 	ldw	r4,1340(sp)
  8082c4:	b00b883a 	mov	r5,r22
  8082c8:	d9800c04 	addi	r6,sp,48
  8082cc:	08077300 	call	807730 <__sprint_r>
  8082d0:	103ee51e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  8082d4:	dc800e17 	ldw	r18,56(sp)
  8082d8:	d8c01904 	addi	r3,sp,100
  8082dc:	d9814c17 	ldw	r6,1328(sp)
  8082e0:	3080004c 	andi	r2,r6,1
  8082e4:	1005003a 	cmpeq	r2,r2,zero
  8082e8:	103ea51e 	bne	r2,zero,807d80 <___vfprintf_internal_r+0x5f8>
  8082ec:	00800044 	movi	r2,1
  8082f0:	dc400d17 	ldw	r17,52(sp)
  8082f4:	18800115 	stw	r2,4(r3)
  8082f8:	d8814917 	ldw	r2,1316(sp)
  8082fc:	94800044 	addi	r18,r18,1
  808300:	8c400044 	addi	r17,r17,1
  808304:	18800015 	stw	r2,0(r3)
  808308:	008001c4 	movi	r2,7
  80830c:	dc800e15 	stw	r18,56(sp)
  808310:	dc400d15 	stw	r17,52(sp)
  808314:	1442240e 	bge	r2,r17,808ba8 <___vfprintf_internal_r+0x1420>
  808318:	d9014f17 	ldw	r4,1340(sp)
  80831c:	b00b883a 	mov	r5,r22
  808320:	d9800c04 	addi	r6,sp,48
  808324:	08077300 	call	807730 <__sprint_r>
  808328:	103ecf1e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  80832c:	dc800e17 	ldw	r18,56(sp)
  808330:	d8c01904 	addi	r3,sp,100
  808334:	003e9206 	br	807d80 <___vfprintf_internal_r+0x5f8>
  808338:	d9014f17 	ldw	r4,1340(sp)
  80833c:	b00b883a 	mov	r5,r22
  808340:	d9800c04 	addi	r6,sp,48
  808344:	08077300 	call	807730 <__sprint_r>
  808348:	103ec026 	beq	r2,zero,807e4c <___vfprintf_internal_r+0x6c4>
  80834c:	003ec606 	br	807e68 <___vfprintf_internal_r+0x6e0>
  808350:	d9014f17 	ldw	r4,1340(sp)
  808354:	b00b883a 	mov	r5,r22
  808358:	d9800c04 	addi	r6,sp,48
  80835c:	d9c15115 	stw	r7,1348(sp)
  808360:	08077300 	call	807730 <__sprint_r>
  808364:	d9c15117 	ldw	r7,1348(sp)
  808368:	103ebf1e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  80836c:	dc800e17 	ldw	r18,56(sp)
  808370:	dc400d17 	ldw	r17,52(sp)
  808374:	dd401904 	addi	r21,sp,100
  808378:	003e7406 	br	807d4c <___vfprintf_internal_r+0x5c4>
  80837c:	d9014f17 	ldw	r4,1340(sp)
  808380:	b00b883a 	mov	r5,r22
  808384:	d9800c04 	addi	r6,sp,48
  808388:	d9c15115 	stw	r7,1348(sp)
  80838c:	08077300 	call	807730 <__sprint_r>
  808390:	d9c15117 	ldw	r7,1348(sp)
  808394:	103eb41e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  808398:	dd401904 	addi	r21,sp,100
  80839c:	003d6d06 	br	807954 <___vfprintf_internal_r+0x1cc>
  8083a0:	d9014f17 	ldw	r4,1340(sp)
  8083a4:	b00b883a 	mov	r5,r22
  8083a8:	d9800c04 	addi	r6,sp,48
  8083ac:	d9c15115 	stw	r7,1348(sp)
  8083b0:	08077300 	call	807730 <__sprint_r>
  8083b4:	d9c15117 	ldw	r7,1348(sp)
  8083b8:	103eab1e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  8083bc:	dc800e17 	ldw	r18,56(sp)
  8083c0:	dc400d17 	ldw	r17,52(sp)
  8083c4:	dd401904 	addi	r21,sp,100
  8083c8:	003e3406 	br	807c9c <___vfprintf_internal_r+0x514>
  8083cc:	d9014f17 	ldw	r4,1340(sp)
  8083d0:	b00b883a 	mov	r5,r22
  8083d4:	d9800c04 	addi	r6,sp,48
  8083d8:	d9c15115 	stw	r7,1348(sp)
  8083dc:	08077300 	call	807730 <__sprint_r>
  8083e0:	d9c15117 	ldw	r7,1348(sp)
  8083e4:	103ea01e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  8083e8:	dc800e17 	ldw	r18,56(sp)
  8083ec:	dc400d17 	ldw	r17,52(sp)
  8083f0:	dd401904 	addi	r21,sp,100
  8083f4:	003e1c06 	br	807c68 <___vfprintf_internal_r+0x4e0>
  8083f8:	d9014f17 	ldw	r4,1340(sp)
  8083fc:	b00b883a 	mov	r5,r22
  808400:	d9800c04 	addi	r6,sp,48
  808404:	d9c15115 	stw	r7,1348(sp)
  808408:	08077300 	call	807730 <__sprint_r>
  80840c:	d9c15117 	ldw	r7,1348(sp)
  808410:	103e951e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  808414:	dc800e17 	ldw	r18,56(sp)
  808418:	dc400d17 	ldw	r17,52(sp)
  80841c:	dd401904 	addi	r21,sp,100
  808420:	003e0406 	br	807c34 <___vfprintf_internal_r+0x4ac>
  808424:	d9000517 	ldw	r4,20(sp)
  808428:	0102580e 	bge	zero,r4,808d8c <___vfprintf_internal_r+0x1604>
  80842c:	d9814717 	ldw	r6,1308(sp)
  808430:	21807a16 	blt	r4,r6,80861c <___vfprintf_internal_r+0xe94>
  808434:	d8814117 	ldw	r2,1284(sp)
  808438:	91a5883a 	add	r18,r18,r6
  80843c:	8c400044 	addi	r17,r17,1
  808440:	a8800015 	stw	r2,0(r21)
  808444:	008001c4 	movi	r2,7
  808448:	a9800115 	stw	r6,4(r21)
  80844c:	dc800e15 	stw	r18,56(sp)
  808450:	dc400d15 	stw	r17,52(sp)
  808454:	1442fc16 	blt	r2,r17,809048 <___vfprintf_internal_r+0x18c0>
  808458:	a8c00204 	addi	r3,r21,8
  80845c:	d9414717 	ldw	r5,1308(sp)
  808460:	2161c83a 	sub	r16,r4,r5
  808464:	043f9d0e 	bge	zero,r16,8082dc <___vfprintf_internal_r+0xb54>
  808468:	00800404 	movi	r2,16
  80846c:	1402190e 	bge	r2,r16,808cd4 <___vfprintf_internal_r+0x154c>
  808470:	dc400d17 	ldw	r17,52(sp)
  808474:	1027883a 	mov	r19,r2
  808478:	070020b4 	movhi	fp,130
  80847c:	e72f5d84 	addi	fp,fp,-17034
  808480:	050001c4 	movi	r20,7
  808484:	00000306 	br	808494 <___vfprintf_internal_r+0xd0c>
  808488:	18c00204 	addi	r3,r3,8
  80848c:	843ffc04 	addi	r16,r16,-16
  808490:	9c02130e 	bge	r19,r16,808ce0 <___vfprintf_internal_r+0x1558>
  808494:	94800404 	addi	r18,r18,16
  808498:	8c400044 	addi	r17,r17,1
  80849c:	1f000015 	stw	fp,0(r3)
  8084a0:	1cc00115 	stw	r19,4(r3)
  8084a4:	dc800e15 	stw	r18,56(sp)
  8084a8:	dc400d15 	stw	r17,52(sp)
  8084ac:	a47ff60e 	bge	r20,r17,808488 <___vfprintf_internal_r+0xd00>
  8084b0:	d9014f17 	ldw	r4,1340(sp)
  8084b4:	b00b883a 	mov	r5,r22
  8084b8:	d9800c04 	addi	r6,sp,48
  8084bc:	08077300 	call	807730 <__sprint_r>
  8084c0:	103e691e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  8084c4:	dc800e17 	ldw	r18,56(sp)
  8084c8:	dc400d17 	ldw	r17,52(sp)
  8084cc:	d8c01904 	addi	r3,sp,100
  8084d0:	003fee06 	br	80848c <___vfprintf_internal_r+0xd04>
  8084d4:	d8814717 	ldw	r2,1308(sp)
  8084d8:	143fffc4 	addi	r16,r2,-1
  8084dc:	043e970e 	bge	zero,r16,807f3c <___vfprintf_internal_r+0x7b4>
  8084e0:	00800404 	movi	r2,16
  8084e4:	1400180e 	bge	r2,r16,808548 <___vfprintf_internal_r+0xdc0>
  8084e8:	1029883a 	mov	r20,r2
  8084ec:	070020b4 	movhi	fp,130
  8084f0:	e72f5d84 	addi	fp,fp,-17034
  8084f4:	054001c4 	movi	r21,7
  8084f8:	00000306 	br	808508 <___vfprintf_internal_r+0xd80>
  8084fc:	9cc00204 	addi	r19,r19,8
  808500:	843ffc04 	addi	r16,r16,-16
  808504:	a400120e 	bge	r20,r16,808550 <___vfprintf_internal_r+0xdc8>
  808508:	94800404 	addi	r18,r18,16
  80850c:	8c400044 	addi	r17,r17,1
  808510:	9f000015 	stw	fp,0(r19)
  808514:	9d000115 	stw	r20,4(r19)
  808518:	dc800e15 	stw	r18,56(sp)
  80851c:	dc400d15 	stw	r17,52(sp)
  808520:	ac7ff60e 	bge	r21,r17,8084fc <___vfprintf_internal_r+0xd74>
  808524:	d9014f17 	ldw	r4,1340(sp)
  808528:	b00b883a 	mov	r5,r22
  80852c:	d9800c04 	addi	r6,sp,48
  808530:	08077300 	call	807730 <__sprint_r>
  808534:	103e4c1e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  808538:	dc800e17 	ldw	r18,56(sp)
  80853c:	dc400d17 	ldw	r17,52(sp)
  808540:	dcc01904 	addi	r19,sp,100
  808544:	003fee06 	br	808500 <___vfprintf_internal_r+0xd78>
  808548:	070020b4 	movhi	fp,130
  80854c:	e72f5d84 	addi	fp,fp,-17034
  808550:	9425883a 	add	r18,r18,r16
  808554:	8c400044 	addi	r17,r17,1
  808558:	008001c4 	movi	r2,7
  80855c:	9f000015 	stw	fp,0(r19)
  808560:	9c000115 	stw	r16,4(r19)
  808564:	dc800e15 	stw	r18,56(sp)
  808568:	dc400d15 	stw	r17,52(sp)
  80856c:	147e720e 	bge	r2,r17,807f38 <___vfprintf_internal_r+0x7b0>
  808570:	d9014f17 	ldw	r4,1340(sp)
  808574:	b00b883a 	mov	r5,r22
  808578:	d9800c04 	addi	r6,sp,48
  80857c:	08077300 	call	807730 <__sprint_r>
  808580:	103e391e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  808584:	dc800e17 	ldw	r18,56(sp)
  808588:	dc400d17 	ldw	r17,52(sp)
  80858c:	dcc01904 	addi	r19,sp,100
  808590:	003e6a06 	br	807f3c <___vfprintf_internal_r+0x7b4>
  808594:	d9014f17 	ldw	r4,1340(sp)
  808598:	b00b883a 	mov	r5,r22
  80859c:	d9800c04 	addi	r6,sp,48
  8085a0:	d9c15115 	stw	r7,1348(sp)
  8085a4:	08077300 	call	807730 <__sprint_r>
  8085a8:	d9c15117 	ldw	r7,1348(sp)
  8085ac:	103e2e1e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  8085b0:	dc800e17 	ldw	r18,56(sp)
  8085b4:	dc400d17 	ldw	r17,52(sp)
  8085b8:	dd401904 	addi	r21,sp,100
  8085bc:	003dba06 	br	807ca8 <___vfprintf_internal_r+0x520>
  8085c0:	d9014f17 	ldw	r4,1340(sp)
  8085c4:	b00b883a 	mov	r5,r22
  8085c8:	d9800c04 	addi	r6,sp,48
  8085cc:	08077300 	call	807730 <__sprint_r>
  8085d0:	103e251e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  8085d4:	dc800e17 	ldw	r18,56(sp)
  8085d8:	dc400d17 	ldw	r17,52(sp)
  8085dc:	dcc01904 	addi	r19,sp,100
  8085e0:	003e4206 	br	807eec <___vfprintf_internal_r+0x764>
  8085e4:	d9014f17 	ldw	r4,1340(sp)
  8085e8:	b00b883a 	mov	r5,r22
  8085ec:	d9800c04 	addi	r6,sp,48
  8085f0:	08077300 	call	807730 <__sprint_r>
  8085f4:	103e1c1e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  8085f8:	dc800e17 	ldw	r18,56(sp)
  8085fc:	dc400d17 	ldw	r17,52(sp)
  808600:	d8c01904 	addi	r3,sp,100
  808604:	003e2e06 	br	807ec0 <___vfprintf_internal_r+0x738>
  808608:	d9414c17 	ldw	r5,1328(sp)
  80860c:	2880004c 	andi	r2,r5,1
  808610:	1005003a 	cmpeq	r2,r2,zero
  808614:	103dda1e 	bne	r2,zero,807d80 <___vfprintf_internal_r+0x5f8>
  808618:	003e9f06 	br	808098 <___vfprintf_internal_r+0x910>
  80861c:	d8c14117 	ldw	r3,1284(sp)
  808620:	9125883a 	add	r18,r18,r4
  808624:	8c400044 	addi	r17,r17,1
  808628:	008001c4 	movi	r2,7
  80862c:	a8c00015 	stw	r3,0(r21)
  808630:	a9000115 	stw	r4,4(r21)
  808634:	dc800e15 	stw	r18,56(sp)
  808638:	dc400d15 	stw	r17,52(sp)
  80863c:	14426c16 	blt	r2,r17,808ff0 <___vfprintf_internal_r+0x1868>
  808640:	a8c00204 	addi	r3,r21,8
  808644:	d9414917 	ldw	r5,1316(sp)
  808648:	00800044 	movi	r2,1
  80864c:	94800044 	addi	r18,r18,1
  808650:	8c400044 	addi	r17,r17,1
  808654:	18800115 	stw	r2,4(r3)
  808658:	008001c4 	movi	r2,7
  80865c:	19400015 	stw	r5,0(r3)
  808660:	dc800e15 	stw	r18,56(sp)
  808664:	dc400d15 	stw	r17,52(sp)
  808668:	2021883a 	mov	r16,r4
  80866c:	14425616 	blt	r2,r17,808fc8 <___vfprintf_internal_r+0x1840>
  808670:	19400204 	addi	r5,r3,8
  808674:	d9814717 	ldw	r6,1308(sp)
  808678:	8c400044 	addi	r17,r17,1
  80867c:	dc400d15 	stw	r17,52(sp)
  808680:	3107c83a 	sub	r3,r6,r4
  808684:	d9014117 	ldw	r4,1284(sp)
  808688:	90e5883a 	add	r18,r18,r3
  80868c:	28c00115 	stw	r3,4(r5)
  808690:	8105883a 	add	r2,r16,r4
  808694:	28800015 	stw	r2,0(r5)
  808698:	008001c4 	movi	r2,7
  80869c:	dc800e15 	stw	r18,56(sp)
  8086a0:	147f1d16 	blt	r2,r17,808318 <___vfprintf_internal_r+0xb90>
  8086a4:	28c00204 	addi	r3,r5,8
  8086a8:	003db506 	br	807d80 <___vfprintf_internal_r+0x5f8>
  8086ac:	3c000017 	ldw	r16,0(r7)
  8086b0:	3c400117 	ldw	r17,4(r7)
  8086b4:	39800204 	addi	r6,r7,8
  8086b8:	01000044 	movi	r4,1
  8086bc:	d9814015 	stw	r6,1280(sp)
  8086c0:	d8000405 	stb	zero,16(sp)
  8086c4:	003ebe06 	br	8081c0 <___vfprintf_internal_r+0xa38>
  8086c8:	3c000017 	ldw	r16,0(r7)
  8086cc:	3c400117 	ldw	r17,4(r7)
  8086d0:	38800204 	addi	r2,r7,8
  8086d4:	d8814015 	stw	r2,1280(sp)
  8086d8:	003eb706 	br	8081b8 <___vfprintf_internal_r+0xa30>
  8086dc:	3c000017 	ldw	r16,0(r7)
  8086e0:	3c400117 	ldw	r17,4(r7)
  8086e4:	39000204 	addi	r4,r7,8
  8086e8:	d9014015 	stw	r4,1280(sp)
  8086ec:	0009883a 	mov	r4,zero
  8086f0:	d8000405 	stb	zero,16(sp)
  8086f4:	003eb206 	br	8081c0 <___vfprintf_internal_r+0xa38>
  8086f8:	38c00017 	ldw	r3,0(r7)
  8086fc:	39c00104 	addi	r7,r7,4
  808700:	d8c14a15 	stw	r3,1320(sp)
  808704:	1800d70e 	bge	r3,zero,808a64 <___vfprintf_internal_r+0x12dc>
  808708:	00c7c83a 	sub	r3,zero,r3
  80870c:	d8c14a15 	stw	r3,1320(sp)
  808710:	d9014c17 	ldw	r4,1328(sp)
  808714:	b8c00007 	ldb	r3,0(r23)
  808718:	21000114 	ori	r4,r4,4
  80871c:	d9014c15 	stw	r4,1328(sp)
  808720:	003c9806 	br	807984 <___vfprintf_internal_r+0x1fc>
  808724:	d9814c17 	ldw	r6,1328(sp)
  808728:	3080080c 	andi	r2,r6,32
  80872c:	1001f626 	beq	r2,zero,808f08 <___vfprintf_internal_r+0x1780>
  808730:	d9014b17 	ldw	r4,1324(sp)
  808734:	38800017 	ldw	r2,0(r7)
  808738:	39c00104 	addi	r7,r7,4
  80873c:	d9c14015 	stw	r7,1280(sp)
  808740:	2007d7fa 	srai	r3,r4,31
  808744:	d9c14017 	ldw	r7,1280(sp)
  808748:	11000015 	stw	r4,0(r2)
  80874c:	10c00115 	stw	r3,4(r2)
  808750:	003c6906 	br	8078f8 <___vfprintf_internal_r+0x170>
  808754:	b8c00007 	ldb	r3,0(r23)
  808758:	00801b04 	movi	r2,108
  80875c:	18825526 	beq	r3,r2,8090b4 <___vfprintf_internal_r+0x192c>
  808760:	d9414c17 	ldw	r5,1328(sp)
  808764:	29400414 	ori	r5,r5,16
  808768:	d9414c15 	stw	r5,1328(sp)
  80876c:	003c8506 	br	807984 <___vfprintf_internal_r+0x1fc>
  808770:	d9814c17 	ldw	r6,1328(sp)
  808774:	b8c00007 	ldb	r3,0(r23)
  808778:	31800814 	ori	r6,r6,32
  80877c:	d9814c15 	stw	r6,1328(sp)
  808780:	003c8006 	br	807984 <___vfprintf_internal_r+0x1fc>
  808784:	d8814c17 	ldw	r2,1328(sp)
  808788:	3c000017 	ldw	r16,0(r7)
  80878c:	00c01e04 	movi	r3,120
  808790:	10800094 	ori	r2,r2,2
  808794:	d8814c15 	stw	r2,1328(sp)
  808798:	39c00104 	addi	r7,r7,4
  80879c:	014020b4 	movhi	r5,130
  8087a0:	296f4604 	addi	r5,r5,-17128
  8087a4:	00800c04 	movi	r2,48
  8087a8:	0023883a 	mov	r17,zero
  8087ac:	01000084 	movi	r4,2
  8087b0:	d9c14015 	stw	r7,1280(sp)
  8087b4:	d8c14d15 	stw	r3,1332(sp)
  8087b8:	d9414415 	stw	r5,1296(sp)
  8087bc:	d8800445 	stb	r2,17(sp)
  8087c0:	d8c00485 	stb	r3,18(sp)
  8087c4:	d8000405 	stb	zero,16(sp)
  8087c8:	003e7d06 	br	8081c0 <___vfprintf_internal_r+0xa38>
  8087cc:	d8814c17 	ldw	r2,1328(sp)
  8087d0:	b8c00007 	ldb	r3,0(r23)
  8087d4:	10801014 	ori	r2,r2,64
  8087d8:	d8814c15 	stw	r2,1328(sp)
  8087dc:	003c6906 	br	807984 <___vfprintf_internal_r+0x1fc>
  8087e0:	d9414c17 	ldw	r5,1328(sp)
  8087e4:	2880020c 	andi	r2,r5,8
  8087e8:	1001e526 	beq	r2,zero,808f80 <___vfprintf_internal_r+0x17f8>
  8087ec:	39800017 	ldw	r6,0(r7)
  8087f0:	38800204 	addi	r2,r7,8
  8087f4:	d8814015 	stw	r2,1280(sp)
  8087f8:	d9814215 	stw	r6,1288(sp)
  8087fc:	39c00117 	ldw	r7,4(r7)
  808800:	d9c14315 	stw	r7,1292(sp)
  808804:	d9014217 	ldw	r4,1288(sp)
  808808:	d9414317 	ldw	r5,1292(sp)
  80880c:	080e2380 	call	80e238 <__isinfd>
  808810:	10021d26 	beq	r2,zero,809088 <___vfprintf_internal_r+0x1900>
  808814:	d9014217 	ldw	r4,1288(sp)
  808818:	d9414317 	ldw	r5,1292(sp)
  80881c:	000d883a 	mov	r6,zero
  808820:	000f883a 	mov	r7,zero
  808824:	080683c0 	call	80683c <__ltdf2>
  808828:	1002d016 	blt	r2,zero,80936c <___vfprintf_internal_r+0x1be4>
  80882c:	d9414d17 	ldw	r5,1332(sp)
  808830:	008011c4 	movi	r2,71
  808834:	11421016 	blt	r2,r5,809078 <___vfprintf_internal_r+0x18f0>
  808838:	018020b4 	movhi	r6,130
  80883c:	31af4b04 	addi	r6,r6,-17108
  808840:	d9814115 	stw	r6,1284(sp)
  808844:	d9014c17 	ldw	r4,1328(sp)
  808848:	00c000c4 	movi	r3,3
  80884c:	00bfdfc4 	movi	r2,-129
  808850:	2088703a 	and	r4,r4,r2
  808854:	180f883a 	mov	r7,r3
  808858:	d8c14515 	stw	r3,1300(sp)
  80885c:	d9014c15 	stw	r4,1328(sp)
  808860:	d8014615 	stw	zero,1304(sp)
  808864:	003e6a06 	br	808210 <___vfprintf_internal_r+0xa88>
  808868:	38800017 	ldw	r2,0(r7)
  80886c:	00c00044 	movi	r3,1
  808870:	39c00104 	addi	r7,r7,4
  808874:	d9c14015 	stw	r7,1280(sp)
  808878:	d9000f04 	addi	r4,sp,60
  80887c:	180f883a 	mov	r7,r3
  808880:	d8c14515 	stw	r3,1300(sp)
  808884:	d9014115 	stw	r4,1284(sp)
  808888:	d8800f05 	stb	r2,60(sp)
  80888c:	d8000405 	stb	zero,16(sp)
  808890:	003cac06 	br	807b44 <___vfprintf_internal_r+0x3bc>
  808894:	014020b4 	movhi	r5,130
  808898:	296f5104 	addi	r5,r5,-17084
  80889c:	d9414415 	stw	r5,1296(sp)
  8088a0:	d9814c17 	ldw	r6,1328(sp)
  8088a4:	3080080c 	andi	r2,r6,32
  8088a8:	1000ff26 	beq	r2,zero,808ca8 <___vfprintf_internal_r+0x1520>
  8088ac:	3c000017 	ldw	r16,0(r7)
  8088b0:	3c400117 	ldw	r17,4(r7)
  8088b4:	38800204 	addi	r2,r7,8
  8088b8:	d8814015 	stw	r2,1280(sp)
  8088bc:	d9414c17 	ldw	r5,1328(sp)
  8088c0:	2880004c 	andi	r2,r5,1
  8088c4:	1005003a 	cmpeq	r2,r2,zero
  8088c8:	1000b91e 	bne	r2,zero,808bb0 <___vfprintf_internal_r+0x1428>
  8088cc:	8444b03a 	or	r2,r16,r17
  8088d0:	1000b726 	beq	r2,zero,808bb0 <___vfprintf_internal_r+0x1428>
  8088d4:	d9814d17 	ldw	r6,1332(sp)
  8088d8:	29400094 	ori	r5,r5,2
  8088dc:	00800c04 	movi	r2,48
  8088e0:	01000084 	movi	r4,2
  8088e4:	d9414c15 	stw	r5,1328(sp)
  8088e8:	d8800445 	stb	r2,17(sp)
  8088ec:	d9800485 	stb	r6,18(sp)
  8088f0:	d8000405 	stb	zero,16(sp)
  8088f4:	003e3206 	br	8081c0 <___vfprintf_internal_r+0xa38>
  8088f8:	018020b4 	movhi	r6,130
  8088fc:	31af4604 	addi	r6,r6,-17128
  808900:	d9814415 	stw	r6,1296(sp)
  808904:	003fe606 	br	8088a0 <___vfprintf_internal_r+0x1118>
  808908:	00800ac4 	movi	r2,43
  80890c:	d8800405 	stb	r2,16(sp)
  808910:	b8c00007 	ldb	r3,0(r23)
  808914:	003c1b06 	br	807984 <___vfprintf_internal_r+0x1fc>
  808918:	d8814c17 	ldw	r2,1328(sp)
  80891c:	b8c00007 	ldb	r3,0(r23)
  808920:	10800054 	ori	r2,r2,1
  808924:	d8814c15 	stw	r2,1328(sp)
  808928:	003c1606 	br	807984 <___vfprintf_internal_r+0x1fc>
  80892c:	d8800407 	ldb	r2,16(sp)
  808930:	10004c1e 	bne	r2,zero,808a64 <___vfprintf_internal_r+0x12dc>
  808934:	00800804 	movi	r2,32
  808938:	d8800405 	stb	r2,16(sp)
  80893c:	b8c00007 	ldb	r3,0(r23)
  808940:	003c1006 	br	807984 <___vfprintf_internal_r+0x1fc>
  808944:	d9814c17 	ldw	r6,1328(sp)
  808948:	b8c00007 	ldb	r3,0(r23)
  80894c:	31800214 	ori	r6,r6,8
  808950:	d9814c15 	stw	r6,1328(sp)
  808954:	003c0b06 	br	807984 <___vfprintf_internal_r+0x1fc>
  808958:	0009883a 	mov	r4,zero
  80895c:	04000244 	movi	r16,9
  808960:	01400284 	movi	r5,10
  808964:	d9c15115 	stw	r7,1348(sp)
  808968:	0806c3c0 	call	806c3c <__mulsi3>
  80896c:	b9000007 	ldb	r4,0(r23)
  808970:	d8c14d17 	ldw	r3,1332(sp)
  808974:	bdc00044 	addi	r23,r23,1
  808978:	d9014d15 	stw	r4,1332(sp)
  80897c:	d9414d17 	ldw	r5,1332(sp)
  808980:	1885883a 	add	r2,r3,r2
  808984:	113ff404 	addi	r4,r2,-48
  808988:	28bff404 	addi	r2,r5,-48
  80898c:	d9c15117 	ldw	r7,1348(sp)
  808990:	80bff32e 	bgeu	r16,r2,808960 <___vfprintf_internal_r+0x11d8>
  808994:	d9014a15 	stw	r4,1320(sp)
  808998:	003bfc06 	br	80798c <___vfprintf_internal_r+0x204>
  80899c:	d8814c17 	ldw	r2,1328(sp)
  8089a0:	b8c00007 	ldb	r3,0(r23)
  8089a4:	10802014 	ori	r2,r2,128
  8089a8:	d8814c15 	stw	r2,1328(sp)
  8089ac:	003bf506 	br	807984 <___vfprintf_internal_r+0x1fc>
  8089b0:	b8c00007 	ldb	r3,0(r23)
  8089b4:	00800a84 	movi	r2,42
  8089b8:	bdc00044 	addi	r23,r23,1
  8089bc:	18831826 	beq	r3,r2,809620 <___vfprintf_internal_r+0x1e98>
  8089c0:	d8c14d15 	stw	r3,1332(sp)
  8089c4:	18bff404 	addi	r2,r3,-48
  8089c8:	00c00244 	movi	r3,9
  8089cc:	18827b36 	bltu	r3,r2,8093bc <___vfprintf_internal_r+0x1c34>
  8089d0:	1821883a 	mov	r16,r3
  8089d4:	0009883a 	mov	r4,zero
  8089d8:	01400284 	movi	r5,10
  8089dc:	d9c15115 	stw	r7,1348(sp)
  8089e0:	0806c3c0 	call	806c3c <__mulsi3>
  8089e4:	d9414d17 	ldw	r5,1332(sp)
  8089e8:	b9800007 	ldb	r6,0(r23)
  8089ec:	d9c15117 	ldw	r7,1348(sp)
  8089f0:	1145883a 	add	r2,r2,r5
  8089f4:	113ff404 	addi	r4,r2,-48
  8089f8:	30bff404 	addi	r2,r6,-48
  8089fc:	d9814d15 	stw	r6,1332(sp)
  808a00:	bdc00044 	addi	r23,r23,1
  808a04:	80bff42e 	bgeu	r16,r2,8089d8 <___vfprintf_internal_r+0x1250>
  808a08:	2027883a 	mov	r19,r4
  808a0c:	203bdf0e 	bge	r4,zero,80798c <___vfprintf_internal_r+0x204>
  808a10:	04ffffc4 	movi	r19,-1
  808a14:	003bdd06 	br	80798c <___vfprintf_internal_r+0x204>
  808a18:	d8000405 	stb	zero,16(sp)
  808a1c:	39800017 	ldw	r6,0(r7)
  808a20:	39c00104 	addi	r7,r7,4
  808a24:	d9c14015 	stw	r7,1280(sp)
  808a28:	d9814115 	stw	r6,1284(sp)
  808a2c:	3001c926 	beq	r6,zero,809154 <___vfprintf_internal_r+0x19cc>
  808a30:	98000e16 	blt	r19,zero,808a6c <___vfprintf_internal_r+0x12e4>
  808a34:	d9014117 	ldw	r4,1284(sp)
  808a38:	000b883a 	mov	r5,zero
  808a3c:	980d883a 	mov	r6,r19
  808a40:	080c8bc0 	call	80c8bc <memchr>
  808a44:	10025926 	beq	r2,zero,8093ac <___vfprintf_internal_r+0x1c24>
  808a48:	d8c14117 	ldw	r3,1284(sp)
  808a4c:	10cfc83a 	sub	r7,r2,r3
  808a50:	99c19e16 	blt	r19,r7,8090cc <___vfprintf_internal_r+0x1944>
  808a54:	d9c14515 	stw	r7,1300(sp)
  808a58:	38000916 	blt	r7,zero,808a80 <___vfprintf_internal_r+0x12f8>
  808a5c:	d8014615 	stw	zero,1304(sp)
  808a60:	003deb06 	br	808210 <___vfprintf_internal_r+0xa88>
  808a64:	b8c00007 	ldb	r3,0(r23)
  808a68:	003bc606 	br	807984 <___vfprintf_internal_r+0x1fc>
  808a6c:	d9014117 	ldw	r4,1284(sp)
  808a70:	08076bc0 	call	8076bc <strlen>
  808a74:	d8814515 	stw	r2,1300(sp)
  808a78:	100f883a 	mov	r7,r2
  808a7c:	103ff70e 	bge	r2,zero,808a5c <___vfprintf_internal_r+0x12d4>
  808a80:	d8014515 	stw	zero,1300(sp)
  808a84:	d8014615 	stw	zero,1304(sp)
  808a88:	003de106 	br	808210 <___vfprintf_internal_r+0xa88>
  808a8c:	20c03fcc 	andi	r3,r4,255
  808a90:	00800044 	movi	r2,1
  808a94:	18802d26 	beq	r3,r2,808b4c <___vfprintf_internal_r+0x13c4>
  808a98:	18800e36 	bltu	r3,r2,808ad4 <___vfprintf_internal_r+0x134c>
  808a9c:	00800084 	movi	r2,2
  808aa0:	1880fa26 	beq	r3,r2,808e8c <___vfprintf_internal_r+0x1704>
  808aa4:	010020b4 	movhi	r4,130
  808aa8:	212f5604 	addi	r4,r4,-17064
  808aac:	08076bc0 	call	8076bc <strlen>
  808ab0:	100f883a 	mov	r7,r2
  808ab4:	dcc14515 	stw	r19,1300(sp)
  808ab8:	9880010e 	bge	r19,r2,808ac0 <___vfprintf_internal_r+0x1338>
  808abc:	d8814515 	stw	r2,1300(sp)
  808ac0:	008020b4 	movhi	r2,130
  808ac4:	10af5604 	addi	r2,r2,-17064
  808ac8:	dcc14615 	stw	r19,1304(sp)
  808acc:	d8814115 	stw	r2,1284(sp)
  808ad0:	003dcf06 	br	808210 <___vfprintf_internal_r+0xa88>
  808ad4:	d9401904 	addi	r5,sp,100
  808ad8:	dd000f04 	addi	r20,sp,60
  808adc:	d9414115 	stw	r5,1284(sp)
  808ae0:	880a977a 	slli	r5,r17,29
  808ae4:	d9814117 	ldw	r6,1284(sp)
  808ae8:	8004d0fa 	srli	r2,r16,3
  808aec:	8806d0fa 	srli	r3,r17,3
  808af0:	810001cc 	andi	r4,r16,7
  808af4:	2884b03a 	or	r2,r5,r2
  808af8:	31bfffc4 	addi	r6,r6,-1
  808afc:	21000c04 	addi	r4,r4,48
  808b00:	d9814115 	stw	r6,1284(sp)
  808b04:	10cab03a 	or	r5,r2,r3
  808b08:	31000005 	stb	r4,0(r6)
  808b0c:	1021883a 	mov	r16,r2
  808b10:	1823883a 	mov	r17,r3
  808b14:	283ff21e 	bne	r5,zero,808ae0 <___vfprintf_internal_r+0x1358>
  808b18:	d8c14c17 	ldw	r3,1328(sp)
  808b1c:	1880004c 	andi	r2,r3,1
  808b20:	1005003a 	cmpeq	r2,r2,zero
  808b24:	103db31e 	bne	r2,zero,8081f4 <___vfprintf_internal_r+0xa6c>
  808b28:	20803fcc 	andi	r2,r4,255
  808b2c:	1080201c 	xori	r2,r2,128
  808b30:	10bfe004 	addi	r2,r2,-128
  808b34:	00c00c04 	movi	r3,48
  808b38:	10fdae26 	beq	r2,r3,8081f4 <___vfprintf_internal_r+0xa6c>
  808b3c:	31bfffc4 	addi	r6,r6,-1
  808b40:	d9814115 	stw	r6,1284(sp)
  808b44:	30c00005 	stb	r3,0(r6)
  808b48:	003daa06 	br	8081f4 <___vfprintf_internal_r+0xa6c>
  808b4c:	88800068 	cmpgeui	r2,r17,1
  808b50:	10002c1e 	bne	r2,zero,808c04 <___vfprintf_internal_r+0x147c>
  808b54:	8800021e 	bne	r17,zero,808b60 <___vfprintf_internal_r+0x13d8>
  808b58:	00800244 	movi	r2,9
  808b5c:	14002936 	bltu	r2,r16,808c04 <___vfprintf_internal_r+0x147c>
  808b60:	d90018c4 	addi	r4,sp,99
  808b64:	dd000f04 	addi	r20,sp,60
  808b68:	d9014115 	stw	r4,1284(sp)
  808b6c:	d9014117 	ldw	r4,1284(sp)
  808b70:	80800c04 	addi	r2,r16,48
  808b74:	20800005 	stb	r2,0(r4)
  808b78:	003d9e06 	br	8081f4 <___vfprintf_internal_r+0xa6c>
  808b7c:	dc400d17 	ldw	r17,52(sp)
  808b80:	070020b4 	movhi	fp,130
  808b84:	e72f5d84 	addi	fp,fp,-17034
  808b88:	9425883a 	add	r18,r18,r16
  808b8c:	8c400044 	addi	r17,r17,1
  808b90:	008001c4 	movi	r2,7
  808b94:	1f000015 	stw	fp,0(r3)
  808b98:	1c000115 	stw	r16,4(r3)
  808b9c:	dc800e15 	stw	r18,56(sp)
  808ba0:	dc400d15 	stw	r17,52(sp)
  808ba4:	147ddc16 	blt	r2,r17,808318 <___vfprintf_internal_r+0xb90>
  808ba8:	18c00204 	addi	r3,r3,8
  808bac:	003c7406 	br	807d80 <___vfprintf_internal_r+0x5f8>
  808bb0:	01000084 	movi	r4,2
  808bb4:	d8000405 	stb	zero,16(sp)
  808bb8:	003d8106 	br	8081c0 <___vfprintf_internal_r+0xa38>
  808bbc:	d9814c17 	ldw	r6,1328(sp)
  808bc0:	30c4703a 	and	r2,r6,r3
  808bc4:	1005003a 	cmpeq	r2,r2,zero
  808bc8:	103cb326 	beq	r2,zero,807e98 <___vfprintf_internal_r+0x710>
  808bcc:	d9014117 	ldw	r4,1284(sp)
  808bd0:	94800044 	addi	r18,r18,1
  808bd4:	8c400044 	addi	r17,r17,1
  808bd8:	008001c4 	movi	r2,7
  808bdc:	a9000015 	stw	r4,0(r21)
  808be0:	a8c00115 	stw	r3,4(r21)
  808be4:	dc800e15 	stw	r18,56(sp)
  808be8:	dc400d15 	stw	r17,52(sp)
  808bec:	147e6016 	blt	r2,r17,808570 <___vfprintf_internal_r+0xde8>
  808bf0:	acc00204 	addi	r19,r21,8
  808bf4:	003cd106 	br	807f3c <___vfprintf_internal_r+0x7b4>
  808bf8:	070020b4 	movhi	fp,130
  808bfc:	e72f5d84 	addi	fp,fp,-17034
  808c00:	003c4906 	br	807d28 <___vfprintf_internal_r+0x5a0>
  808c04:	dd000f04 	addi	r20,sp,60
  808c08:	dc801904 	addi	r18,sp,100
  808c0c:	8009883a 	mov	r4,r16
  808c10:	880b883a 	mov	r5,r17
  808c14:	01800284 	movi	r6,10
  808c18:	000f883a 	mov	r7,zero
  808c1c:	080f0040 	call	80f004 <__umoddi3>
  808c20:	12000c04 	addi	r8,r2,48
  808c24:	94bfffc4 	addi	r18,r18,-1
  808c28:	8009883a 	mov	r4,r16
  808c2c:	880b883a 	mov	r5,r17
  808c30:	01800284 	movi	r6,10
  808c34:	000f883a 	mov	r7,zero
  808c38:	92000005 	stb	r8,0(r18)
  808c3c:	080e9980 	call	80e998 <__udivdi3>
  808c40:	1009883a 	mov	r4,r2
  808c44:	1021883a 	mov	r16,r2
  808c48:	18800068 	cmpgeui	r2,r3,1
  808c4c:	1823883a 	mov	r17,r3
  808c50:	103fee1e 	bne	r2,zero,808c0c <___vfprintf_internal_r+0x1484>
  808c54:	1800021e 	bne	r3,zero,808c60 <___vfprintf_internal_r+0x14d8>
  808c58:	00800244 	movi	r2,9
  808c5c:	113feb36 	bltu	r2,r4,808c0c <___vfprintf_internal_r+0x1484>
  808c60:	94bfffc4 	addi	r18,r18,-1
  808c64:	dc814115 	stw	r18,1284(sp)
  808c68:	003fc006 	br	808b6c <___vfprintf_internal_r+0x13e4>
  808c6c:	d9014c17 	ldw	r4,1328(sp)
  808c70:	2080004c 	andi	r2,r4,1
  808c74:	10009a1e 	bne	r2,zero,808ee0 <___vfprintf_internal_r+0x1758>
  808c78:	d9401904 	addi	r5,sp,100
  808c7c:	dd000f04 	addi	r20,sp,60
  808c80:	d9414115 	stw	r5,1284(sp)
  808c84:	003d5b06 	br	8081f4 <___vfprintf_internal_r+0xa6c>
  808c88:	d9014f17 	ldw	r4,1340(sp)
  808c8c:	b00b883a 	mov	r5,r22
  808c90:	d9800c04 	addi	r6,sp,48
  808c94:	08077300 	call	807730 <__sprint_r>
  808c98:	103c731e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  808c9c:	dc800e17 	ldw	r18,56(sp)
  808ca0:	d8c01904 	addi	r3,sp,100
  808ca4:	003cf906 	br	80808c <___vfprintf_internal_r+0x904>
  808ca8:	d8c14c17 	ldw	r3,1328(sp)
  808cac:	1880040c 	andi	r2,r3,16
  808cb0:	1000711e 	bne	r2,zero,808e78 <___vfprintf_internal_r+0x16f0>
  808cb4:	d9014c17 	ldw	r4,1328(sp)
  808cb8:	2080100c 	andi	r2,r4,64
  808cbc:	10006e26 	beq	r2,zero,808e78 <___vfprintf_internal_r+0x16f0>
  808cc0:	3c00000b 	ldhu	r16,0(r7)
  808cc4:	0023883a 	mov	r17,zero
  808cc8:	39c00104 	addi	r7,r7,4
  808ccc:	d9c14015 	stw	r7,1280(sp)
  808cd0:	003efa06 	br	8088bc <___vfprintf_internal_r+0x1134>
  808cd4:	dc400d17 	ldw	r17,52(sp)
  808cd8:	070020b4 	movhi	fp,130
  808cdc:	e72f5d84 	addi	fp,fp,-17034
  808ce0:	9425883a 	add	r18,r18,r16
  808ce4:	8c400044 	addi	r17,r17,1
  808ce8:	008001c4 	movi	r2,7
  808cec:	1f000015 	stw	fp,0(r3)
  808cf0:	1c000115 	stw	r16,4(r3)
  808cf4:	dc800e15 	stw	r18,56(sp)
  808cf8:	dc400d15 	stw	r17,52(sp)
  808cfc:	147d7016 	blt	r2,r17,8082c0 <___vfprintf_internal_r+0xb38>
  808d00:	18c00204 	addi	r3,r3,8
  808d04:	003d7506 	br	8082dc <___vfprintf_internal_r+0xb54>
  808d08:	dc800e17 	ldw	r18,56(sp)
  808d0c:	dc400d17 	ldw	r17,52(sp)
  808d10:	070020b4 	movhi	fp,130
  808d14:	e72f6184 	addi	fp,fp,-17018
  808d18:	003bba06 	br	807c04 <___vfprintf_internal_r+0x47c>
  808d1c:	d9014f17 	ldw	r4,1340(sp)
  808d20:	b00b883a 	mov	r5,r22
  808d24:	d9800c04 	addi	r6,sp,48
  808d28:	08077300 	call	807730 <__sprint_r>
  808d2c:	103c4e1e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  808d30:	dc800e17 	ldw	r18,56(sp)
  808d34:	d8c01904 	addi	r3,sp,100
  808d38:	003ce306 	br	8080c8 <___vfprintf_internal_r+0x940>
  808d3c:	3c000017 	ldw	r16,0(r7)
  808d40:	0009883a 	mov	r4,zero
  808d44:	39c00104 	addi	r7,r7,4
  808d48:	0023883a 	mov	r17,zero
  808d4c:	d9c14015 	stw	r7,1280(sp)
  808d50:	d8000405 	stb	zero,16(sp)
  808d54:	003d1a06 	br	8081c0 <___vfprintf_internal_r+0xa38>
  808d58:	38800017 	ldw	r2,0(r7)
  808d5c:	39c00104 	addi	r7,r7,4
  808d60:	d9c14015 	stw	r7,1280(sp)
  808d64:	1023d7fa 	srai	r17,r2,31
  808d68:	1021883a 	mov	r16,r2
  808d6c:	003d1206 	br	8081b8 <___vfprintf_internal_r+0xa30>
  808d70:	3c000017 	ldw	r16,0(r7)
  808d74:	01000044 	movi	r4,1
  808d78:	39c00104 	addi	r7,r7,4
  808d7c:	0023883a 	mov	r17,zero
  808d80:	d9c14015 	stw	r7,1280(sp)
  808d84:	d8000405 	stb	zero,16(sp)
  808d88:	003d0d06 	br	8081c0 <___vfprintf_internal_r+0xa38>
  808d8c:	008020b4 	movhi	r2,130
  808d90:	10af5d04 	addi	r2,r2,-17036
  808d94:	94800044 	addi	r18,r18,1
  808d98:	8c400044 	addi	r17,r17,1
  808d9c:	a8800015 	stw	r2,0(r21)
  808da0:	00c00044 	movi	r3,1
  808da4:	008001c4 	movi	r2,7
  808da8:	a8c00115 	stw	r3,4(r21)
  808dac:	dc800e15 	stw	r18,56(sp)
  808db0:	dc400d15 	stw	r17,52(sp)
  808db4:	1440ca16 	blt	r2,r17,8090e0 <___vfprintf_internal_r+0x1958>
  808db8:	a8c00204 	addi	r3,r21,8
  808dbc:	2000061e 	bne	r4,zero,808dd8 <___vfprintf_internal_r+0x1650>
  808dc0:	d9414717 	ldw	r5,1308(sp)
  808dc4:	2800041e 	bne	r5,zero,808dd8 <___vfprintf_internal_r+0x1650>
  808dc8:	d9814c17 	ldw	r6,1328(sp)
  808dcc:	3080004c 	andi	r2,r6,1
  808dd0:	1005003a 	cmpeq	r2,r2,zero
  808dd4:	103bea1e 	bne	r2,zero,807d80 <___vfprintf_internal_r+0x5f8>
  808dd8:	00800044 	movi	r2,1
  808ddc:	dc400d17 	ldw	r17,52(sp)
  808de0:	18800115 	stw	r2,4(r3)
  808de4:	d8814917 	ldw	r2,1316(sp)
  808de8:	94800044 	addi	r18,r18,1
  808dec:	8c400044 	addi	r17,r17,1
  808df0:	18800015 	stw	r2,0(r3)
  808df4:	008001c4 	movi	r2,7
  808df8:	dc800e15 	stw	r18,56(sp)
  808dfc:	dc400d15 	stw	r17,52(sp)
  808e00:	1440ca16 	blt	r2,r17,80912c <___vfprintf_internal_r+0x19a4>
  808e04:	18c00204 	addi	r3,r3,8
  808e08:	0121c83a 	sub	r16,zero,r4
  808e0c:	0400500e 	bge	zero,r16,808f50 <___vfprintf_internal_r+0x17c8>
  808e10:	00800404 	movi	r2,16
  808e14:	1400800e 	bge	r2,r16,809018 <___vfprintf_internal_r+0x1890>
  808e18:	1027883a 	mov	r19,r2
  808e1c:	070020b4 	movhi	fp,130
  808e20:	e72f5d84 	addi	fp,fp,-17034
  808e24:	050001c4 	movi	r20,7
  808e28:	00000306 	br	808e38 <___vfprintf_internal_r+0x16b0>
  808e2c:	18c00204 	addi	r3,r3,8
  808e30:	843ffc04 	addi	r16,r16,-16
  808e34:	9c007a0e 	bge	r19,r16,809020 <___vfprintf_internal_r+0x1898>
  808e38:	94800404 	addi	r18,r18,16
  808e3c:	8c400044 	addi	r17,r17,1
  808e40:	1f000015 	stw	fp,0(r3)
  808e44:	1cc00115 	stw	r19,4(r3)
  808e48:	dc800e15 	stw	r18,56(sp)
  808e4c:	dc400d15 	stw	r17,52(sp)
  808e50:	a47ff60e 	bge	r20,r17,808e2c <___vfprintf_internal_r+0x16a4>
  808e54:	d9014f17 	ldw	r4,1340(sp)
  808e58:	b00b883a 	mov	r5,r22
  808e5c:	d9800c04 	addi	r6,sp,48
  808e60:	08077300 	call	807730 <__sprint_r>
  808e64:	103c001e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  808e68:	dc800e17 	ldw	r18,56(sp)
  808e6c:	dc400d17 	ldw	r17,52(sp)
  808e70:	d8c01904 	addi	r3,sp,100
  808e74:	003fee06 	br	808e30 <___vfprintf_internal_r+0x16a8>
  808e78:	3c000017 	ldw	r16,0(r7)
  808e7c:	0023883a 	mov	r17,zero
  808e80:	39c00104 	addi	r7,r7,4
  808e84:	d9c14015 	stw	r7,1280(sp)
  808e88:	003e8c06 	br	8088bc <___vfprintf_internal_r+0x1134>
  808e8c:	d9401904 	addi	r5,sp,100
  808e90:	dd000f04 	addi	r20,sp,60
  808e94:	d9414115 	stw	r5,1284(sp)
  808e98:	d9814417 	ldw	r6,1296(sp)
  808e9c:	880a973a 	slli	r5,r17,28
  808ea0:	8004d13a 	srli	r2,r16,4
  808ea4:	810003cc 	andi	r4,r16,15
  808ea8:	3109883a 	add	r4,r6,r4
  808eac:	2884b03a 	or	r2,r5,r2
  808eb0:	21400003 	ldbu	r5,0(r4)
  808eb4:	d9014117 	ldw	r4,1284(sp)
  808eb8:	8806d13a 	srli	r3,r17,4
  808ebc:	1021883a 	mov	r16,r2
  808ec0:	213fffc4 	addi	r4,r4,-1
  808ec4:	d9014115 	stw	r4,1284(sp)
  808ec8:	d9814117 	ldw	r6,1284(sp)
  808ecc:	10c8b03a 	or	r4,r2,r3
  808ed0:	1823883a 	mov	r17,r3
  808ed4:	31400005 	stb	r5,0(r6)
  808ed8:	203fef1e 	bne	r4,zero,808e98 <___vfprintf_internal_r+0x1710>
  808edc:	003cc506 	br	8081f4 <___vfprintf_internal_r+0xa6c>
  808ee0:	00800c04 	movi	r2,48
  808ee4:	d98018c4 	addi	r6,sp,99
  808ee8:	dd000f04 	addi	r20,sp,60
  808eec:	d88018c5 	stb	r2,99(sp)
  808ef0:	d9814115 	stw	r6,1284(sp)
  808ef4:	003cbf06 	br	8081f4 <___vfprintf_internal_r+0xa6c>
  808ef8:	dc400d17 	ldw	r17,52(sp)
  808efc:	070020b4 	movhi	fp,130
  808f00:	e72f6184 	addi	fp,fp,-17018
  808f04:	003bc106 	br	807e0c <___vfprintf_internal_r+0x684>
  808f08:	d9414c17 	ldw	r5,1328(sp)
  808f0c:	2880040c 	andi	r2,r5,16
  808f10:	10007c26 	beq	r2,zero,809104 <___vfprintf_internal_r+0x197c>
  808f14:	38800017 	ldw	r2,0(r7)
  808f18:	39c00104 	addi	r7,r7,4
  808f1c:	d9c14015 	stw	r7,1280(sp)
  808f20:	d9814b17 	ldw	r6,1324(sp)
  808f24:	d9c14017 	ldw	r7,1280(sp)
  808f28:	11800015 	stw	r6,0(r2)
  808f2c:	003a7206 	br	8078f8 <___vfprintf_internal_r+0x170>
  808f30:	d9014f17 	ldw	r4,1340(sp)
  808f34:	b00b883a 	mov	r5,r22
  808f38:	d9800c04 	addi	r6,sp,48
  808f3c:	08077300 	call	807730 <__sprint_r>
  808f40:	103bc91e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  808f44:	dc800e17 	ldw	r18,56(sp)
  808f48:	dc400d17 	ldw	r17,52(sp)
  808f4c:	d8c01904 	addi	r3,sp,100
  808f50:	d9014717 	ldw	r4,1308(sp)
  808f54:	d9414117 	ldw	r5,1284(sp)
  808f58:	8c400044 	addi	r17,r17,1
  808f5c:	9125883a 	add	r18,r18,r4
  808f60:	008001c4 	movi	r2,7
  808f64:	19400015 	stw	r5,0(r3)
  808f68:	19000115 	stw	r4,4(r3)
  808f6c:	dc800e15 	stw	r18,56(sp)
  808f70:	dc400d15 	stw	r17,52(sp)
  808f74:	147ce816 	blt	r2,r17,808318 <___vfprintf_internal_r+0xb90>
  808f78:	18c00204 	addi	r3,r3,8
  808f7c:	003b8006 	br	807d80 <___vfprintf_internal_r+0x5f8>
  808f80:	38c00017 	ldw	r3,0(r7)
  808f84:	39000204 	addi	r4,r7,8
  808f88:	d9014015 	stw	r4,1280(sp)
  808f8c:	d8c14215 	stw	r3,1288(sp)
  808f90:	39c00117 	ldw	r7,4(r7)
  808f94:	d9c14315 	stw	r7,1292(sp)
  808f98:	003e1a06 	br	808804 <___vfprintf_internal_r+0x107c>
  808f9c:	0005883a 	mov	r2,zero
  808fa0:	1409c83a 	sub	r4,r2,r16
  808fa4:	1105803a 	cmpltu	r2,r2,r4
  808fa8:	044bc83a 	sub	r5,zero,r17
  808fac:	2885c83a 	sub	r2,r5,r2
  808fb0:	2021883a 	mov	r16,r4
  808fb4:	1023883a 	mov	r17,r2
  808fb8:	01000044 	movi	r4,1
  808fbc:	00800b44 	movi	r2,45
  808fc0:	d8800405 	stb	r2,16(sp)
  808fc4:	003c7e06 	br	8081c0 <___vfprintf_internal_r+0xa38>
  808fc8:	d9014f17 	ldw	r4,1340(sp)
  808fcc:	b00b883a 	mov	r5,r22
  808fd0:	d9800c04 	addi	r6,sp,48
  808fd4:	08077300 	call	807730 <__sprint_r>
  808fd8:	103ba31e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  808fdc:	dc800e17 	ldw	r18,56(sp)
  808fe0:	dc400d17 	ldw	r17,52(sp)
  808fe4:	d9000517 	ldw	r4,20(sp)
  808fe8:	d9401904 	addi	r5,sp,100
  808fec:	003da106 	br	808674 <___vfprintf_internal_r+0xeec>
  808ff0:	d9014f17 	ldw	r4,1340(sp)
  808ff4:	b00b883a 	mov	r5,r22
  808ff8:	d9800c04 	addi	r6,sp,48
  808ffc:	08077300 	call	807730 <__sprint_r>
  809000:	103b991e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  809004:	dc800e17 	ldw	r18,56(sp)
  809008:	dc400d17 	ldw	r17,52(sp)
  80900c:	d9000517 	ldw	r4,20(sp)
  809010:	d8c01904 	addi	r3,sp,100
  809014:	003d8b06 	br	808644 <___vfprintf_internal_r+0xebc>
  809018:	070020b4 	movhi	fp,130
  80901c:	e72f5d84 	addi	fp,fp,-17034
  809020:	9425883a 	add	r18,r18,r16
  809024:	8c400044 	addi	r17,r17,1
  809028:	008001c4 	movi	r2,7
  80902c:	1f000015 	stw	fp,0(r3)
  809030:	1c000115 	stw	r16,4(r3)
  809034:	dc800e15 	stw	r18,56(sp)
  809038:	dc400d15 	stw	r17,52(sp)
  80903c:	147fbc16 	blt	r2,r17,808f30 <___vfprintf_internal_r+0x17a8>
  809040:	18c00204 	addi	r3,r3,8
  809044:	003fc206 	br	808f50 <___vfprintf_internal_r+0x17c8>
  809048:	d9014f17 	ldw	r4,1340(sp)
  80904c:	b00b883a 	mov	r5,r22
  809050:	d9800c04 	addi	r6,sp,48
  809054:	08077300 	call	807730 <__sprint_r>
  809058:	103b831e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  80905c:	dc800e17 	ldw	r18,56(sp)
  809060:	d9000517 	ldw	r4,20(sp)
  809064:	d8c01904 	addi	r3,sp,100
  809068:	003cfc06 	br	80845c <___vfprintf_internal_r+0xcd4>
  80906c:	070020b4 	movhi	fp,130
  809070:	e72f5d84 	addi	fp,fp,-17034
  809074:	003bde06 	br	807ff0 <___vfprintf_internal_r+0x868>
  809078:	008020b4 	movhi	r2,130
  80907c:	10af4c04 	addi	r2,r2,-17104
  809080:	d8814115 	stw	r2,1284(sp)
  809084:	003def06 	br	808844 <___vfprintf_internal_r+0x10bc>
  809088:	d9014217 	ldw	r4,1288(sp)
  80908c:	d9414317 	ldw	r5,1292(sp)
  809090:	08052280 	call	805228 <__isnand>
  809094:	10003926 	beq	r2,zero,80917c <___vfprintf_internal_r+0x19f4>
  809098:	d9414d17 	ldw	r5,1332(sp)
  80909c:	008011c4 	movi	r2,71
  8090a0:	1140ce16 	blt	r2,r5,8093dc <___vfprintf_internal_r+0x1c54>
  8090a4:	018020b4 	movhi	r6,130
  8090a8:	31af4d04 	addi	r6,r6,-17100
  8090ac:	d9814115 	stw	r6,1284(sp)
  8090b0:	003de406 	br	808844 <___vfprintf_internal_r+0x10bc>
  8090b4:	d9014c17 	ldw	r4,1328(sp)
  8090b8:	bdc00044 	addi	r23,r23,1
  8090bc:	b8c00007 	ldb	r3,0(r23)
  8090c0:	21000814 	ori	r4,r4,32
  8090c4:	d9014c15 	stw	r4,1328(sp)
  8090c8:	003a2e06 	br	807984 <___vfprintf_internal_r+0x1fc>
  8090cc:	dcc14515 	stw	r19,1300(sp)
  8090d0:	98011016 	blt	r19,zero,809514 <___vfprintf_internal_r+0x1d8c>
  8090d4:	980f883a 	mov	r7,r19
  8090d8:	d8014615 	stw	zero,1304(sp)
  8090dc:	003c4c06 	br	808210 <___vfprintf_internal_r+0xa88>
  8090e0:	d9014f17 	ldw	r4,1340(sp)
  8090e4:	b00b883a 	mov	r5,r22
  8090e8:	d9800c04 	addi	r6,sp,48
  8090ec:	08077300 	call	807730 <__sprint_r>
  8090f0:	103b5d1e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  8090f4:	dc800e17 	ldw	r18,56(sp)
  8090f8:	d9000517 	ldw	r4,20(sp)
  8090fc:	d8c01904 	addi	r3,sp,100
  809100:	003f2e06 	br	808dbc <___vfprintf_internal_r+0x1634>
  809104:	d8c14c17 	ldw	r3,1328(sp)
  809108:	1880100c 	andi	r2,r3,64
  80910c:	1000a026 	beq	r2,zero,809390 <___vfprintf_internal_r+0x1c08>
  809110:	38800017 	ldw	r2,0(r7)
  809114:	39c00104 	addi	r7,r7,4
  809118:	d9c14015 	stw	r7,1280(sp)
  80911c:	d9014b17 	ldw	r4,1324(sp)
  809120:	d9c14017 	ldw	r7,1280(sp)
  809124:	1100000d 	sth	r4,0(r2)
  809128:	0039f306 	br	8078f8 <___vfprintf_internal_r+0x170>
  80912c:	d9014f17 	ldw	r4,1340(sp)
  809130:	b00b883a 	mov	r5,r22
  809134:	d9800c04 	addi	r6,sp,48
  809138:	08077300 	call	807730 <__sprint_r>
  80913c:	103b4a1e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  809140:	dc800e17 	ldw	r18,56(sp)
  809144:	dc400d17 	ldw	r17,52(sp)
  809148:	d9000517 	ldw	r4,20(sp)
  80914c:	d8c01904 	addi	r3,sp,100
  809150:	003f2d06 	br	808e08 <___vfprintf_internal_r+0x1680>
  809154:	00800184 	movi	r2,6
  809158:	14c09a36 	bltu	r2,r19,8093c4 <___vfprintf_internal_r+0x1c3c>
  80915c:	dcc14515 	stw	r19,1300(sp)
  809160:	9800010e 	bge	r19,zero,809168 <___vfprintf_internal_r+0x19e0>
  809164:	d8014515 	stw	zero,1300(sp)
  809168:	008020b4 	movhi	r2,130
  80916c:	10af4f04 	addi	r2,r2,-17092
  809170:	980f883a 	mov	r7,r19
  809174:	d8814115 	stw	r2,1284(sp)
  809178:	003a7206 	br	807b44 <___vfprintf_internal_r+0x3bc>
  80917c:	00bfffc4 	movi	r2,-1
  809180:	9880e226 	beq	r19,r2,80950c <___vfprintf_internal_r+0x1d84>
  809184:	d9414d17 	ldw	r5,1332(sp)
  809188:	008019c4 	movi	r2,103
  80918c:	2880dc26 	beq	r5,r2,809500 <___vfprintf_internal_r+0x1d78>
  809190:	008011c4 	movi	r2,71
  809194:	2880da26 	beq	r5,r2,809500 <___vfprintf_internal_r+0x1d78>
  809198:	d9414c17 	ldw	r5,1328(sp)
  80919c:	d9014317 	ldw	r4,1292(sp)
  8091a0:	d9814217 	ldw	r6,1288(sp)
  8091a4:	29404014 	ori	r5,r5,256
  8091a8:	d9414c15 	stw	r5,1328(sp)
  8091ac:	2000cc16 	blt	r4,zero,8094e0 <___vfprintf_internal_r+0x1d58>
  8091b0:	3021883a 	mov	r16,r6
  8091b4:	2023883a 	mov	r17,r4
  8091b8:	0039883a 	mov	fp,zero
  8091bc:	d9414d17 	ldw	r5,1332(sp)
  8091c0:	00801984 	movi	r2,102
  8091c4:	2880b726 	beq	r5,r2,8094a4 <___vfprintf_internal_r+0x1d1c>
  8091c8:	00801184 	movi	r2,70
  8091cc:	2880b526 	beq	r5,r2,8094a4 <___vfprintf_internal_r+0x1d1c>
  8091d0:	00801944 	movi	r2,101
  8091d4:	2880c826 	beq	r5,r2,8094f8 <___vfprintf_internal_r+0x1d70>
  8091d8:	00801144 	movi	r2,69
  8091dc:	2880c626 	beq	r5,r2,8094f8 <___vfprintf_internal_r+0x1d70>
  8091e0:	9829883a 	mov	r20,r19
  8091e4:	d9014f17 	ldw	r4,1340(sp)
  8091e8:	d8800504 	addi	r2,sp,20
  8091ec:	880d883a 	mov	r6,r17
  8091f0:	d8800115 	stw	r2,4(sp)
  8091f4:	d8c00604 	addi	r3,sp,24
  8091f8:	d8800704 	addi	r2,sp,28
  8091fc:	800b883a 	mov	r5,r16
  809200:	01c00084 	movi	r7,2
  809204:	d8c00215 	stw	r3,8(sp)
  809208:	d8800315 	stw	r2,12(sp)
  80920c:	dd000015 	stw	r20,0(sp)
  809210:	08099f00 	call	8099f0 <_dtoa_r>
  809214:	d9814d17 	ldw	r6,1332(sp)
  809218:	d8814115 	stw	r2,1284(sp)
  80921c:	008019c4 	movi	r2,103
  809220:	30809526 	beq	r6,r2,809478 <___vfprintf_internal_r+0x1cf0>
  809224:	d8c14d17 	ldw	r3,1332(sp)
  809228:	008011c4 	movi	r2,71
  80922c:	18809226 	beq	r3,r2,809478 <___vfprintf_internal_r+0x1cf0>
  809230:	d9414117 	ldw	r5,1284(sp)
  809234:	d9814d17 	ldw	r6,1332(sp)
  809238:	00801984 	movi	r2,102
  80923c:	2d25883a 	add	r18,r5,r20
  809240:	30808626 	beq	r6,r2,80945c <___vfprintf_internal_r+0x1cd4>
  809244:	00801184 	movi	r2,70
  809248:	30808426 	beq	r6,r2,80945c <___vfprintf_internal_r+0x1cd4>
  80924c:	000d883a 	mov	r6,zero
  809250:	000f883a 	mov	r7,zero
  809254:	880b883a 	mov	r5,r17
  809258:	8009883a 	mov	r4,r16
  80925c:	08066a40 	call	8066a4 <__eqdf2>
  809260:	1000751e 	bne	r2,zero,809438 <___vfprintf_internal_r+0x1cb0>
  809264:	9005883a 	mov	r2,r18
  809268:	dc800715 	stw	r18,28(sp)
  80926c:	d9014117 	ldw	r4,1284(sp)
  809270:	d9414d17 	ldw	r5,1332(sp)
  809274:	00c019c4 	movi	r3,103
  809278:	1125c83a 	sub	r18,r2,r4
  80927c:	28c06826 	beq	r5,r3,809420 <___vfprintf_internal_r+0x1c98>
  809280:	008011c4 	movi	r2,71
  809284:	28806626 	beq	r5,r2,809420 <___vfprintf_internal_r+0x1c98>
  809288:	d9000517 	ldw	r4,20(sp)
  80928c:	d8c14d17 	ldw	r3,1332(sp)
  809290:	00801944 	movi	r2,101
  809294:	10c05516 	blt	r2,r3,8093ec <___vfprintf_internal_r+0x1c64>
  809298:	213fffc4 	addi	r4,r4,-1
  80929c:	d9000515 	stw	r4,20(sp)
  8092a0:	d8c00805 	stb	r3,32(sp)
  8092a4:	2021883a 	mov	r16,r4
  8092a8:	2000c116 	blt	r4,zero,8095b0 <___vfprintf_internal_r+0x1e28>
  8092ac:	00800ac4 	movi	r2,43
  8092b0:	d8800845 	stb	r2,33(sp)
  8092b4:	00800244 	movi	r2,9
  8092b8:	1400af0e 	bge	r2,r16,809578 <___vfprintf_internal_r+0x1df0>
  8092bc:	1027883a 	mov	r19,r2
  8092c0:	dc400b84 	addi	r17,sp,46
  8092c4:	8009883a 	mov	r4,r16
  8092c8:	01400284 	movi	r5,10
  8092cc:	0806bcc0 	call	806bcc <__modsi3>
  8092d0:	10800c04 	addi	r2,r2,48
  8092d4:	8c7fffc4 	addi	r17,r17,-1
  8092d8:	8009883a 	mov	r4,r16
  8092dc:	01400284 	movi	r5,10
  8092e0:	88800005 	stb	r2,0(r17)
  8092e4:	0806b6c0 	call	806b6c <__divsi3>
  8092e8:	1021883a 	mov	r16,r2
  8092ec:	98bff516 	blt	r19,r2,8092c4 <___vfprintf_internal_r+0x1b3c>
  8092f0:	10c00c04 	addi	r3,r2,48
  8092f4:	d88009c4 	addi	r2,sp,39
  8092f8:	108001c4 	addi	r2,r2,7
  8092fc:	897fffc4 	addi	r5,r17,-1
  809300:	88ffffc5 	stb	r3,-1(r17)
  809304:	2880a72e 	bgeu	r5,r2,8095a4 <___vfprintf_internal_r+0x1e1c>
  809308:	1009883a 	mov	r4,r2
  80930c:	d9800804 	addi	r6,sp,32
  809310:	d8c00884 	addi	r3,sp,34
  809314:	28800003 	ldbu	r2,0(r5)
  809318:	29400044 	addi	r5,r5,1
  80931c:	18800005 	stb	r2,0(r3)
  809320:	18c00044 	addi	r3,r3,1
  809324:	293ffb36 	bltu	r5,r4,809314 <___vfprintf_internal_r+0x1b8c>
  809328:	1987c83a 	sub	r3,r3,r6
  80932c:	00800044 	movi	r2,1
  809330:	d8c14815 	stw	r3,1312(sp)
  809334:	90cf883a 	add	r7,r18,r3
  809338:	1480960e 	bge	r2,r18,809594 <___vfprintf_internal_r+0x1e0c>
  80933c:	39c00044 	addi	r7,r7,1
  809340:	d9c14515 	stw	r7,1300(sp)
  809344:	38003416 	blt	r7,zero,809418 <___vfprintf_internal_r+0x1c90>
  809348:	e0803fcc 	andi	r2,fp,255
  80934c:	1080201c 	xori	r2,r2,128
  809350:	10bfe004 	addi	r2,r2,-128
  809354:	10004e26 	beq	r2,zero,809490 <___vfprintf_internal_r+0x1d08>
  809358:	00800b44 	movi	r2,45
  80935c:	dc814715 	stw	r18,1308(sp)
  809360:	d8014615 	stw	zero,1304(sp)
  809364:	d8800405 	stb	r2,16(sp)
  809368:	003bab06 	br	808218 <___vfprintf_internal_r+0xa90>
  80936c:	00800b44 	movi	r2,45
  809370:	d8800405 	stb	r2,16(sp)
  809374:	003d2d06 	br	80882c <___vfprintf_internal_r+0x10a4>
  809378:	d9014f17 	ldw	r4,1340(sp)
  80937c:	b00b883a 	mov	r5,r22
  809380:	d9800c04 	addi	r6,sp,48
  809384:	08077300 	call	807730 <__sprint_r>
  809388:	103ab71e 	bne	r2,zero,807e68 <___vfprintf_internal_r+0x6e0>
  80938c:	003ab506 	br	807e64 <___vfprintf_internal_r+0x6dc>
  809390:	38800017 	ldw	r2,0(r7)
  809394:	39c00104 	addi	r7,r7,4
  809398:	d9c14015 	stw	r7,1280(sp)
  80939c:	d9414b17 	ldw	r5,1324(sp)
  8093a0:	d9c14017 	ldw	r7,1280(sp)
  8093a4:	11400015 	stw	r5,0(r2)
  8093a8:	00395306 	br	8078f8 <___vfprintf_internal_r+0x170>
  8093ac:	980f883a 	mov	r7,r19
  8093b0:	dcc14515 	stw	r19,1300(sp)
  8093b4:	d8014615 	stw	zero,1304(sp)
  8093b8:	003b9506 	br	808210 <___vfprintf_internal_r+0xa88>
  8093bc:	0027883a 	mov	r19,zero
  8093c0:	00397206 	br	80798c <___vfprintf_internal_r+0x204>
  8093c4:	00c020b4 	movhi	r3,130
  8093c8:	18ef4f04 	addi	r3,r3,-17092
  8093cc:	100f883a 	mov	r7,r2
  8093d0:	d8814515 	stw	r2,1300(sp)
  8093d4:	d8c14115 	stw	r3,1284(sp)
  8093d8:	0039da06 	br	807b44 <___vfprintf_internal_r+0x3bc>
  8093dc:	008020b4 	movhi	r2,130
  8093e0:	10af4e04 	addi	r2,r2,-17096
  8093e4:	d8814115 	stw	r2,1284(sp)
  8093e8:	003d1606 	br	808844 <___vfprintf_internal_r+0x10bc>
  8093ec:	d9414d17 	ldw	r5,1332(sp)
  8093f0:	00801984 	movi	r2,102
  8093f4:	28804926 	beq	r5,r2,80951c <___vfprintf_internal_r+0x1d94>
  8093f8:	200f883a 	mov	r7,r4
  8093fc:	24805716 	blt	r4,r18,80955c <___vfprintf_internal_r+0x1dd4>
  809400:	d9414c17 	ldw	r5,1328(sp)
  809404:	2880004c 	andi	r2,r5,1
  809408:	10000126 	beq	r2,zero,809410 <___vfprintf_internal_r+0x1c88>
  80940c:	21c00044 	addi	r7,r4,1
  809410:	d9c14515 	stw	r7,1300(sp)
  809414:	383fcc0e 	bge	r7,zero,809348 <___vfprintf_internal_r+0x1bc0>
  809418:	d8014515 	stw	zero,1300(sp)
  80941c:	003fca06 	br	809348 <___vfprintf_internal_r+0x1bc0>
  809420:	d9000517 	ldw	r4,20(sp)
  809424:	00bfff04 	movi	r2,-4
  809428:	1100480e 	bge	r2,r4,80954c <___vfprintf_internal_r+0x1dc4>
  80942c:	99004716 	blt	r19,r4,80954c <___vfprintf_internal_r+0x1dc4>
  809430:	d8c14d15 	stw	r3,1332(sp)
  809434:	003ff006 	br	8093f8 <___vfprintf_internal_r+0x1c70>
  809438:	d8800717 	ldw	r2,28(sp)
  80943c:	14bf8b2e 	bgeu	r2,r18,80926c <___vfprintf_internal_r+0x1ae4>
  809440:	9007883a 	mov	r3,r18
  809444:	01000c04 	movi	r4,48
  809448:	11000005 	stb	r4,0(r2)
  80944c:	10800044 	addi	r2,r2,1
  809450:	d8800715 	stw	r2,28(sp)
  809454:	18bffc1e 	bne	r3,r2,809448 <___vfprintf_internal_r+0x1cc0>
  809458:	003f8406 	br	80926c <___vfprintf_internal_r+0x1ae4>
  80945c:	d8814117 	ldw	r2,1284(sp)
  809460:	10c00007 	ldb	r3,0(r2)
  809464:	00800c04 	movi	r2,48
  809468:	18805b26 	beq	r3,r2,8095d8 <___vfprintf_internal_r+0x1e50>
  80946c:	d9000517 	ldw	r4,20(sp)
  809470:	9125883a 	add	r18,r18,r4
  809474:	003f7506 	br	80924c <___vfprintf_internal_r+0x1ac4>
  809478:	d9014c17 	ldw	r4,1328(sp)
  80947c:	2080004c 	andi	r2,r4,1
  809480:	1005003a 	cmpeq	r2,r2,zero
  809484:	103f6a26 	beq	r2,zero,809230 <___vfprintf_internal_r+0x1aa8>
  809488:	d8800717 	ldw	r2,28(sp)
  80948c:	003f7706 	br	80926c <___vfprintf_internal_r+0x1ae4>
  809490:	d9c14515 	stw	r7,1300(sp)
  809494:	38004d16 	blt	r7,zero,8095cc <___vfprintf_internal_r+0x1e44>
  809498:	dc814715 	stw	r18,1308(sp)
  80949c:	d8014615 	stw	zero,1304(sp)
  8094a0:	003b5b06 	br	808210 <___vfprintf_internal_r+0xa88>
  8094a4:	d9014f17 	ldw	r4,1340(sp)
  8094a8:	d8800504 	addi	r2,sp,20
  8094ac:	d8800115 	stw	r2,4(sp)
  8094b0:	d8c00604 	addi	r3,sp,24
  8094b4:	d8800704 	addi	r2,sp,28
  8094b8:	800b883a 	mov	r5,r16
  8094bc:	880d883a 	mov	r6,r17
  8094c0:	01c000c4 	movi	r7,3
  8094c4:	d8c00215 	stw	r3,8(sp)
  8094c8:	d8800315 	stw	r2,12(sp)
  8094cc:	dcc00015 	stw	r19,0(sp)
  8094d0:	9829883a 	mov	r20,r19
  8094d4:	08099f00 	call	8099f0 <_dtoa_r>
  8094d8:	d8814115 	stw	r2,1284(sp)
  8094dc:	003f5106 	br	809224 <___vfprintf_internal_r+0x1a9c>
  8094e0:	d8c14217 	ldw	r3,1288(sp)
  8094e4:	d9014317 	ldw	r4,1292(sp)
  8094e8:	07000b44 	movi	fp,45
  8094ec:	1821883a 	mov	r16,r3
  8094f0:	2460003c 	xorhi	r17,r4,32768
  8094f4:	003f3106 	br	8091bc <___vfprintf_internal_r+0x1a34>
  8094f8:	9d000044 	addi	r20,r19,1
  8094fc:	003f3906 	br	8091e4 <___vfprintf_internal_r+0x1a5c>
  809500:	983f251e 	bne	r19,zero,809198 <___vfprintf_internal_r+0x1a10>
  809504:	04c00044 	movi	r19,1
  809508:	003f2306 	br	809198 <___vfprintf_internal_r+0x1a10>
  80950c:	04c00184 	movi	r19,6
  809510:	003f2106 	br	809198 <___vfprintf_internal_r+0x1a10>
  809514:	d8014515 	stw	zero,1300(sp)
  809518:	003eee06 	br	8090d4 <___vfprintf_internal_r+0x194c>
  80951c:	200f883a 	mov	r7,r4
  809520:	0100370e 	bge	zero,r4,809600 <___vfprintf_internal_r+0x1e78>
  809524:	9800031e 	bne	r19,zero,809534 <___vfprintf_internal_r+0x1dac>
  809528:	d9814c17 	ldw	r6,1328(sp)
  80952c:	3080004c 	andi	r2,r6,1
  809530:	103fb726 	beq	r2,zero,809410 <___vfprintf_internal_r+0x1c88>
  809534:	20800044 	addi	r2,r4,1
  809538:	98a7883a 	add	r19,r19,r2
  80953c:	dcc14515 	stw	r19,1300(sp)
  809540:	980f883a 	mov	r7,r19
  809544:	983f800e 	bge	r19,zero,809348 <___vfprintf_internal_r+0x1bc0>
  809548:	003fb306 	br	809418 <___vfprintf_internal_r+0x1c90>
  80954c:	d9814d17 	ldw	r6,1332(sp)
  809550:	31bfff84 	addi	r6,r6,-2
  809554:	d9814d15 	stw	r6,1332(sp)
  809558:	003f4c06 	br	80928c <___vfprintf_internal_r+0x1b04>
  80955c:	0100180e 	bge	zero,r4,8095c0 <___vfprintf_internal_r+0x1e38>
  809560:	00800044 	movi	r2,1
  809564:	1485883a 	add	r2,r2,r18
  809568:	d8814515 	stw	r2,1300(sp)
  80956c:	100f883a 	mov	r7,r2
  809570:	103f750e 	bge	r2,zero,809348 <___vfprintf_internal_r+0x1bc0>
  809574:	003fa806 	br	809418 <___vfprintf_internal_r+0x1c90>
  809578:	80c00c04 	addi	r3,r16,48
  80957c:	00800c04 	movi	r2,48
  809580:	d8c008c5 	stb	r3,35(sp)
  809584:	d9800804 	addi	r6,sp,32
  809588:	d8c00904 	addi	r3,sp,36
  80958c:	d8800885 	stb	r2,34(sp)
  809590:	003f6506 	br	809328 <___vfprintf_internal_r+0x1ba0>
  809594:	d9014c17 	ldw	r4,1328(sp)
  809598:	2084703a 	and	r2,r4,r2
  80959c:	103f9c26 	beq	r2,zero,809410 <___vfprintf_internal_r+0x1c88>
  8095a0:	003f6606 	br	80933c <___vfprintf_internal_r+0x1bb4>
  8095a4:	d9800804 	addi	r6,sp,32
  8095a8:	d8c00884 	addi	r3,sp,34
  8095ac:	003f5e06 	br	809328 <___vfprintf_internal_r+0x1ba0>
  8095b0:	00800b44 	movi	r2,45
  8095b4:	0121c83a 	sub	r16,zero,r4
  8095b8:	d8800845 	stb	r2,33(sp)
  8095bc:	003f3d06 	br	8092b4 <___vfprintf_internal_r+0x1b2c>
  8095c0:	00800084 	movi	r2,2
  8095c4:	1105c83a 	sub	r2,r2,r4
  8095c8:	003fe606 	br	809564 <___vfprintf_internal_r+0x1ddc>
  8095cc:	d8014515 	stw	zero,1300(sp)
  8095d0:	dc814715 	stw	r18,1308(sp)
  8095d4:	003fb106 	br	80949c <___vfprintf_internal_r+0x1d14>
  8095d8:	000d883a 	mov	r6,zero
  8095dc:	000f883a 	mov	r7,zero
  8095e0:	8009883a 	mov	r4,r16
  8095e4:	880b883a 	mov	r5,r17
  8095e8:	080672c0 	call	80672c <__nedf2>
  8095ec:	103f9f26 	beq	r2,zero,80946c <___vfprintf_internal_r+0x1ce4>
  8095f0:	00800044 	movi	r2,1
  8095f4:	1509c83a 	sub	r4,r2,r20
  8095f8:	d9000515 	stw	r4,20(sp)
  8095fc:	003f9b06 	br	80946c <___vfprintf_internal_r+0x1ce4>
  809600:	98000d1e 	bne	r19,zero,809638 <___vfprintf_internal_r+0x1eb0>
  809604:	d8c14c17 	ldw	r3,1328(sp)
  809608:	1880004c 	andi	r2,r3,1
  80960c:	10000a1e 	bne	r2,zero,809638 <___vfprintf_internal_r+0x1eb0>
  809610:	01000044 	movi	r4,1
  809614:	200f883a 	mov	r7,r4
  809618:	d9014515 	stw	r4,1300(sp)
  80961c:	003f4a06 	br	809348 <___vfprintf_internal_r+0x1bc0>
  809620:	3cc00017 	ldw	r19,0(r7)
  809624:	39c00104 	addi	r7,r7,4
  809628:	983d0e0e 	bge	r19,zero,808a64 <___vfprintf_internal_r+0x12dc>
  80962c:	b8c00007 	ldb	r3,0(r23)
  809630:	04ffffc4 	movi	r19,-1
  809634:	0038d306 	br	807984 <___vfprintf_internal_r+0x1fc>
  809638:	9cc00084 	addi	r19,r19,2
  80963c:	dcc14515 	stw	r19,1300(sp)
  809640:	980f883a 	mov	r7,r19
  809644:	983f400e 	bge	r19,zero,809348 <___vfprintf_internal_r+0x1bc0>
  809648:	003f7306 	br	809418 <___vfprintf_internal_r+0x1c90>

0080964c <__vfprintf_internal>:
  80964c:	008020b4 	movhi	r2,130
  809650:	10b6d904 	addi	r2,r2,-9372
  809654:	2013883a 	mov	r9,r4
  809658:	11000017 	ldw	r4,0(r2)
  80965c:	2805883a 	mov	r2,r5
  809660:	300f883a 	mov	r7,r6
  809664:	480b883a 	mov	r5,r9
  809668:	100d883a 	mov	r6,r2
  80966c:	08077881 	jmpi	807788 <___vfprintf_internal_r>

00809670 <__swsetup_r>:
  809670:	008020b4 	movhi	r2,130
  809674:	10b6d904 	addi	r2,r2,-9372
  809678:	10c00017 	ldw	r3,0(r2)
  80967c:	defffd04 	addi	sp,sp,-12
  809680:	dc400115 	stw	r17,4(sp)
  809684:	dc000015 	stw	r16,0(sp)
  809688:	dfc00215 	stw	ra,8(sp)
  80968c:	2023883a 	mov	r17,r4
  809690:	2821883a 	mov	r16,r5
  809694:	18000226 	beq	r3,zero,8096a0 <__swsetup_r+0x30>
  809698:	18800e17 	ldw	r2,56(r3)
  80969c:	10001f26 	beq	r2,zero,80971c <__swsetup_r+0xac>
  8096a0:	8100030b 	ldhu	r4,12(r16)
  8096a4:	2080020c 	andi	r2,r4,8
  8096a8:	10002826 	beq	r2,zero,80974c <__swsetup_r+0xdc>
  8096ac:	81400417 	ldw	r5,16(r16)
  8096b0:	28001d26 	beq	r5,zero,809728 <__swsetup_r+0xb8>
  8096b4:	2080004c 	andi	r2,r4,1
  8096b8:	1005003a 	cmpeq	r2,r2,zero
  8096bc:	10000b26 	beq	r2,zero,8096ec <__swsetup_r+0x7c>
  8096c0:	2080008c 	andi	r2,r4,2
  8096c4:	10001226 	beq	r2,zero,809710 <__swsetup_r+0xa0>
  8096c8:	0005883a 	mov	r2,zero
  8096cc:	80800215 	stw	r2,8(r16)
  8096d0:	28000b26 	beq	r5,zero,809700 <__swsetup_r+0x90>
  8096d4:	0005883a 	mov	r2,zero
  8096d8:	dfc00217 	ldw	ra,8(sp)
  8096dc:	dc400117 	ldw	r17,4(sp)
  8096e0:	dc000017 	ldw	r16,0(sp)
  8096e4:	dec00304 	addi	sp,sp,12
  8096e8:	f800283a 	ret
  8096ec:	80800517 	ldw	r2,20(r16)
  8096f0:	80000215 	stw	zero,8(r16)
  8096f4:	0085c83a 	sub	r2,zero,r2
  8096f8:	80800615 	stw	r2,24(r16)
  8096fc:	283ff51e 	bne	r5,zero,8096d4 <__swsetup_r+0x64>
  809700:	2080200c 	andi	r2,r4,128
  809704:	103ff326 	beq	r2,zero,8096d4 <__swsetup_r+0x64>
  809708:	00bfffc4 	movi	r2,-1
  80970c:	003ff206 	br	8096d8 <__swsetup_r+0x68>
  809710:	80800517 	ldw	r2,20(r16)
  809714:	80800215 	stw	r2,8(r16)
  809718:	003fed06 	br	8096d0 <__swsetup_r+0x60>
  80971c:	1809883a 	mov	r4,r3
  809720:	080b23c0 	call	80b23c <__sinit>
  809724:	003fde06 	br	8096a0 <__swsetup_r+0x30>
  809728:	20c0a00c 	andi	r3,r4,640
  80972c:	00808004 	movi	r2,512
  809730:	18bfe026 	beq	r3,r2,8096b4 <__swsetup_r+0x44>
  809734:	8809883a 	mov	r4,r17
  809738:	800b883a 	mov	r5,r16
  80973c:	080bfe80 	call	80bfe8 <__smakebuf_r>
  809740:	8100030b 	ldhu	r4,12(r16)
  809744:	81400417 	ldw	r5,16(r16)
  809748:	003fda06 	br	8096b4 <__swsetup_r+0x44>
  80974c:	2080040c 	andi	r2,r4,16
  809750:	103fed26 	beq	r2,zero,809708 <__swsetup_r+0x98>
  809754:	2080010c 	andi	r2,r4,4
  809758:	10001226 	beq	r2,zero,8097a4 <__swsetup_r+0x134>
  80975c:	81400c17 	ldw	r5,48(r16)
  809760:	28000526 	beq	r5,zero,809778 <__swsetup_r+0x108>
  809764:	80801004 	addi	r2,r16,64
  809768:	28800226 	beq	r5,r2,809774 <__swsetup_r+0x104>
  80976c:	8809883a 	mov	r4,r17
  809770:	080b5f40 	call	80b5f4 <_free_r>
  809774:	80000c15 	stw	zero,48(r16)
  809778:	8080030b 	ldhu	r2,12(r16)
  80977c:	81400417 	ldw	r5,16(r16)
  809780:	80000115 	stw	zero,4(r16)
  809784:	10bff6cc 	andi	r2,r2,65499
  809788:	8080030d 	sth	r2,12(r16)
  80978c:	81400015 	stw	r5,0(r16)
  809790:	8080030b 	ldhu	r2,12(r16)
  809794:	10800214 	ori	r2,r2,8
  809798:	113fffcc 	andi	r4,r2,65535
  80979c:	8080030d 	sth	r2,12(r16)
  8097a0:	003fc306 	br	8096b0 <__swsetup_r+0x40>
  8097a4:	81400417 	ldw	r5,16(r16)
  8097a8:	003ff906 	br	809790 <__swsetup_r+0x120>

008097ac <quorem>:
  8097ac:	28c00417 	ldw	r3,16(r5)
  8097b0:	20800417 	ldw	r2,16(r4)
  8097b4:	defff104 	addi	sp,sp,-60
  8097b8:	dfc00e15 	stw	ra,56(sp)
  8097bc:	df000d15 	stw	fp,52(sp)
  8097c0:	ddc00c15 	stw	r23,48(sp)
  8097c4:	dd800b15 	stw	r22,44(sp)
  8097c8:	dd400a15 	stw	r21,40(sp)
  8097cc:	dd000915 	stw	r20,36(sp)
  8097d0:	dcc00815 	stw	r19,32(sp)
  8097d4:	dc800715 	stw	r18,28(sp)
  8097d8:	dc400615 	stw	r17,24(sp)
  8097dc:	dc000515 	stw	r16,20(sp)
  8097e0:	d9000315 	stw	r4,12(sp)
  8097e4:	d9400415 	stw	r5,16(sp)
  8097e8:	10c07f16 	blt	r2,r3,8099e8 <quorem+0x23c>
  8097ec:	1d3fffc4 	addi	r20,r3,-1
  8097f0:	d8c00417 	ldw	r3,16(sp)
  8097f4:	d9000317 	ldw	r4,12(sp)
  8097f8:	a505883a 	add	r2,r20,r20
  8097fc:	1085883a 	add	r2,r2,r2
  809800:	1cc00504 	addi	r19,r3,20
  809804:	25c00504 	addi	r23,r4,20
  809808:	98ad883a 	add	r22,r19,r2
  80980c:	15c7883a 	add	r3,r2,r23
  809810:	b1400017 	ldw	r5,0(r22)
  809814:	19000017 	ldw	r4,0(r3)
  809818:	d8c00015 	stw	r3,0(sp)
  80981c:	29400044 	addi	r5,r5,1
  809820:	d9000215 	stw	r4,8(sp)
  809824:	0806c2c0 	call	806c2c <__udivsi3>
  809828:	1039883a 	mov	fp,r2
  80982c:	10003d1e 	bne	r2,zero,809924 <quorem+0x178>
  809830:	d9400417 	ldw	r5,16(sp)
  809834:	d9000317 	ldw	r4,12(sp)
  809838:	080cd140 	call	80cd14 <__mcmp>
  80983c:	10002c16 	blt	r2,zero,8098f0 <quorem+0x144>
  809840:	e7000044 	addi	fp,fp,1
  809844:	b80f883a 	mov	r7,r23
  809848:	0011883a 	mov	r8,zero
  80984c:	0009883a 	mov	r4,zero
  809850:	99400017 	ldw	r5,0(r19)
  809854:	38c00017 	ldw	r3,0(r7)
  809858:	9cc00104 	addi	r19,r19,4
  80985c:	28bfffcc 	andi	r2,r5,65535
  809860:	2085883a 	add	r2,r4,r2
  809864:	11bfffcc 	andi	r6,r2,65535
  809868:	193fffcc 	andi	r4,r3,65535
  80986c:	1004d43a 	srli	r2,r2,16
  809870:	280ad43a 	srli	r5,r5,16
  809874:	2189c83a 	sub	r4,r4,r6
  809878:	2209883a 	add	r4,r4,r8
  80987c:	1806d43a 	srli	r3,r3,16
  809880:	288b883a 	add	r5,r5,r2
  809884:	200dd43a 	srai	r6,r4,16
  809888:	28bfffcc 	andi	r2,r5,65535
  80988c:	1887c83a 	sub	r3,r3,r2
  809890:	1987883a 	add	r3,r3,r6
  809894:	3900000d 	sth	r4,0(r7)
  809898:	38c0008d 	sth	r3,2(r7)
  80989c:	2808d43a 	srli	r4,r5,16
  8098a0:	39c00104 	addi	r7,r7,4
  8098a4:	1811d43a 	srai	r8,r3,16
  8098a8:	b4ffe92e 	bgeu	r22,r19,809850 <quorem+0xa4>
  8098ac:	a505883a 	add	r2,r20,r20
  8098b0:	1085883a 	add	r2,r2,r2
  8098b4:	b885883a 	add	r2,r23,r2
  8098b8:	10c00017 	ldw	r3,0(r2)
  8098bc:	18000c1e 	bne	r3,zero,8098f0 <quorem+0x144>
  8098c0:	113fff04 	addi	r4,r2,-4
  8098c4:	b900082e 	bgeu	r23,r4,8098e8 <quorem+0x13c>
  8098c8:	10bfff17 	ldw	r2,-4(r2)
  8098cc:	10000326 	beq	r2,zero,8098dc <quorem+0x130>
  8098d0:	00000506 	br	8098e8 <quorem+0x13c>
  8098d4:	20800017 	ldw	r2,0(r4)
  8098d8:	1000031e 	bne	r2,zero,8098e8 <quorem+0x13c>
  8098dc:	213fff04 	addi	r4,r4,-4
  8098e0:	a53fffc4 	addi	r20,r20,-1
  8098e4:	b93ffb36 	bltu	r23,r4,8098d4 <quorem+0x128>
  8098e8:	d9000317 	ldw	r4,12(sp)
  8098ec:	25000415 	stw	r20,16(r4)
  8098f0:	e005883a 	mov	r2,fp
  8098f4:	dfc00e17 	ldw	ra,56(sp)
  8098f8:	df000d17 	ldw	fp,52(sp)
  8098fc:	ddc00c17 	ldw	r23,48(sp)
  809900:	dd800b17 	ldw	r22,44(sp)
  809904:	dd400a17 	ldw	r21,40(sp)
  809908:	dd000917 	ldw	r20,36(sp)
  80990c:	dcc00817 	ldw	r19,32(sp)
  809910:	dc800717 	ldw	r18,28(sp)
  809914:	dc400617 	ldw	r17,24(sp)
  809918:	dc000517 	ldw	r16,20(sp)
  80991c:	dec00f04 	addi	sp,sp,60
  809920:	f800283a 	ret
  809924:	b823883a 	mov	r17,r23
  809928:	9825883a 	mov	r18,r19
  80992c:	d8000115 	stw	zero,4(sp)
  809930:	002b883a 	mov	r21,zero
  809934:	94000017 	ldw	r16,0(r18)
  809938:	e009883a 	mov	r4,fp
  80993c:	94800104 	addi	r18,r18,4
  809940:	817fffcc 	andi	r5,r16,65535
  809944:	0806c3c0 	call	806c3c <__mulsi3>
  809948:	800ad43a 	srli	r5,r16,16
  80994c:	e009883a 	mov	r4,fp
  809950:	a8a1883a 	add	r16,r21,r2
  809954:	0806c3c0 	call	806c3c <__mulsi3>
  809958:	89000017 	ldw	r4,0(r17)
  80995c:	80ffffcc 	andi	r3,r16,65535
  809960:	8020d43a 	srli	r16,r16,16
  809964:	217fffcc 	andi	r5,r4,65535
  809968:	28cbc83a 	sub	r5,r5,r3
  80996c:	d8c00117 	ldw	r3,4(sp)
  809970:	2008d43a 	srli	r4,r4,16
  809974:	1405883a 	add	r2,r2,r16
  809978:	28cb883a 	add	r5,r5,r3
  80997c:	280dd43a 	srai	r6,r5,16
  809980:	10ffffcc 	andi	r3,r2,65535
  809984:	20c9c83a 	sub	r4,r4,r3
  809988:	2189883a 	add	r4,r4,r6
  80998c:	8900008d 	sth	r4,2(r17)
  809990:	2009d43a 	srai	r4,r4,16
  809994:	8940000d 	sth	r5,0(r17)
  809998:	102ad43a 	srli	r21,r2,16
  80999c:	8c400104 	addi	r17,r17,4
  8099a0:	d9000115 	stw	r4,4(sp)
  8099a4:	b4bfe32e 	bgeu	r22,r18,809934 <quorem+0x188>
  8099a8:	d9000217 	ldw	r4,8(sp)
  8099ac:	203fa01e 	bne	r4,zero,809830 <quorem+0x84>
  8099b0:	d8800017 	ldw	r2,0(sp)
  8099b4:	10ffff04 	addi	r3,r2,-4
  8099b8:	b8c0082e 	bgeu	r23,r3,8099dc <quorem+0x230>
  8099bc:	10bfff17 	ldw	r2,-4(r2)
  8099c0:	10000326 	beq	r2,zero,8099d0 <quorem+0x224>
  8099c4:	00000506 	br	8099dc <quorem+0x230>
  8099c8:	18800017 	ldw	r2,0(r3)
  8099cc:	1000031e 	bne	r2,zero,8099dc <quorem+0x230>
  8099d0:	18ffff04 	addi	r3,r3,-4
  8099d4:	a53fffc4 	addi	r20,r20,-1
  8099d8:	b8fffb36 	bltu	r23,r3,8099c8 <quorem+0x21c>
  8099dc:	d8c00317 	ldw	r3,12(sp)
  8099e0:	1d000415 	stw	r20,16(r3)
  8099e4:	003f9206 	br	809830 <quorem+0x84>
  8099e8:	0005883a 	mov	r2,zero
  8099ec:	003fc106 	br	8098f4 <quorem+0x148>

008099f0 <_dtoa_r>:
  8099f0:	22001017 	ldw	r8,64(r4)
  8099f4:	deffda04 	addi	sp,sp,-152
  8099f8:	dd402115 	stw	r21,132(sp)
  8099fc:	dd002015 	stw	r20,128(sp)
  809a00:	dc801e15 	stw	r18,120(sp)
  809a04:	dc401d15 	stw	r17,116(sp)
  809a08:	dfc02515 	stw	ra,148(sp)
  809a0c:	df002415 	stw	fp,144(sp)
  809a10:	ddc02315 	stw	r23,140(sp)
  809a14:	dd802215 	stw	r22,136(sp)
  809a18:	dcc01f15 	stw	r19,124(sp)
  809a1c:	dc001c15 	stw	r16,112(sp)
  809a20:	d9001615 	stw	r4,88(sp)
  809a24:	3023883a 	mov	r17,r6
  809a28:	2829883a 	mov	r20,r5
  809a2c:	d9c01715 	stw	r7,92(sp)
  809a30:	dc802817 	ldw	r18,160(sp)
  809a34:	302b883a 	mov	r21,r6
  809a38:	40000a26 	beq	r8,zero,809a64 <_dtoa_r+0x74>
  809a3c:	20801117 	ldw	r2,68(r4)
  809a40:	400b883a 	mov	r5,r8
  809a44:	40800115 	stw	r2,4(r8)
  809a48:	20c01117 	ldw	r3,68(r4)
  809a4c:	00800044 	movi	r2,1
  809a50:	10c4983a 	sll	r2,r2,r3
  809a54:	40800215 	stw	r2,8(r8)
  809a58:	080cbb80 	call	80cbb8 <_Bfree>
  809a5c:	d8c01617 	ldw	r3,88(sp)
  809a60:	18001015 	stw	zero,64(r3)
  809a64:	8800a316 	blt	r17,zero,809cf4 <_dtoa_r+0x304>
  809a68:	90000015 	stw	zero,0(r18)
  809a6c:	a8dffc2c 	andhi	r3,r21,32752
  809a70:	009ffc34 	movhi	r2,32752
  809a74:	18809126 	beq	r3,r2,809cbc <_dtoa_r+0x2cc>
  809a78:	000d883a 	mov	r6,zero
  809a7c:	000f883a 	mov	r7,zero
  809a80:	a009883a 	mov	r4,r20
  809a84:	a80b883a 	mov	r5,r21
  809a88:	dd001215 	stw	r20,72(sp)
  809a8c:	dd401315 	stw	r21,76(sp)
  809a90:	080672c0 	call	80672c <__nedf2>
  809a94:	1000171e 	bne	r2,zero,809af4 <_dtoa_r+0x104>
  809a98:	d9802717 	ldw	r6,156(sp)
  809a9c:	00800044 	movi	r2,1
  809aa0:	30800015 	stw	r2,0(r6)
  809aa4:	d8802917 	ldw	r2,164(sp)
  809aa8:	10029b26 	beq	r2,zero,80a518 <_dtoa_r+0xb28>
  809aac:	d9002917 	ldw	r4,164(sp)
  809ab0:	008020b4 	movhi	r2,130
  809ab4:	10af5d44 	addi	r2,r2,-17035
  809ab8:	10ffffc4 	addi	r3,r2,-1
  809abc:	20800015 	stw	r2,0(r4)
  809ac0:	1805883a 	mov	r2,r3
  809ac4:	dfc02517 	ldw	ra,148(sp)
  809ac8:	df002417 	ldw	fp,144(sp)
  809acc:	ddc02317 	ldw	r23,140(sp)
  809ad0:	dd802217 	ldw	r22,136(sp)
  809ad4:	dd402117 	ldw	r21,132(sp)
  809ad8:	dd002017 	ldw	r20,128(sp)
  809adc:	dcc01f17 	ldw	r19,124(sp)
  809ae0:	dc801e17 	ldw	r18,120(sp)
  809ae4:	dc401d17 	ldw	r17,116(sp)
  809ae8:	dc001c17 	ldw	r16,112(sp)
  809aec:	dec02604 	addi	sp,sp,152
  809af0:	f800283a 	ret
  809af4:	d9001617 	ldw	r4,88(sp)
  809af8:	d9401217 	ldw	r5,72(sp)
  809afc:	d8800104 	addi	r2,sp,4
  809b00:	a80d883a 	mov	r6,r21
  809b04:	d9c00204 	addi	r7,sp,8
  809b08:	d8800015 	stw	r2,0(sp)
  809b0c:	080d1f40 	call	80d1f4 <__d2b>
  809b10:	d8800715 	stw	r2,28(sp)
  809b14:	a804d53a 	srli	r2,r21,20
  809b18:	1101ffcc 	andi	r4,r2,2047
  809b1c:	20008626 	beq	r4,zero,809d38 <_dtoa_r+0x348>
  809b20:	d8c01217 	ldw	r3,72(sp)
  809b24:	00800434 	movhi	r2,16
  809b28:	10bfffc4 	addi	r2,r2,-1
  809b2c:	ddc00117 	ldw	r23,4(sp)
  809b30:	a884703a 	and	r2,r21,r2
  809b34:	1811883a 	mov	r8,r3
  809b38:	124ffc34 	orhi	r9,r2,16368
  809b3c:	25bf0044 	addi	r22,r4,-1023
  809b40:	d8000815 	stw	zero,32(sp)
  809b44:	0005883a 	mov	r2,zero
  809b48:	00cffe34 	movhi	r3,16376
  809b4c:	480b883a 	mov	r5,r9
  809b50:	4009883a 	mov	r4,r8
  809b54:	180f883a 	mov	r7,r3
  809b58:	100d883a 	mov	r6,r2
  809b5c:	0805f940 	call	805f94 <__subdf3>
  809b60:	0218dbf4 	movhi	r8,25455
  809b64:	4210d844 	addi	r8,r8,17249
  809b68:	024ff4f4 	movhi	r9,16339
  809b6c:	4a61e9c4 	addi	r9,r9,-30809
  809b70:	480f883a 	mov	r7,r9
  809b74:	400d883a 	mov	r6,r8
  809b78:	180b883a 	mov	r5,r3
  809b7c:	1009883a 	mov	r4,r2
  809b80:	08060880 	call	806088 <__muldf3>
  809b84:	0222d874 	movhi	r8,35681
  809b88:	42322cc4 	addi	r8,r8,-14157
  809b8c:	024ff1f4 	movhi	r9,16327
  809b90:	4a628a04 	addi	r9,r9,-30168
  809b94:	480f883a 	mov	r7,r9
  809b98:	400d883a 	mov	r6,r8
  809b9c:	180b883a 	mov	r5,r3
  809ba0:	1009883a 	mov	r4,r2
  809ba4:	08060140 	call	806014 <__adddf3>
  809ba8:	b009883a 	mov	r4,r22
  809bac:	1021883a 	mov	r16,r2
  809bb0:	1823883a 	mov	r17,r3
  809bb4:	080694c0 	call	80694c <__floatsidf>
  809bb8:	021427f4 	movhi	r8,20639
  809bbc:	421e7ec4 	addi	r8,r8,31227
  809bc0:	024ff4f4 	movhi	r9,16339
  809bc4:	4a5104c4 	addi	r9,r9,17427
  809bc8:	480f883a 	mov	r7,r9
  809bcc:	400d883a 	mov	r6,r8
  809bd0:	180b883a 	mov	r5,r3
  809bd4:	1009883a 	mov	r4,r2
  809bd8:	08060880 	call	806088 <__muldf3>
  809bdc:	180f883a 	mov	r7,r3
  809be0:	880b883a 	mov	r5,r17
  809be4:	100d883a 	mov	r6,r2
  809be8:	8009883a 	mov	r4,r16
  809bec:	08060140 	call	806014 <__adddf3>
  809bf0:	1009883a 	mov	r4,r2
  809bf4:	180b883a 	mov	r5,r3
  809bf8:	1021883a 	mov	r16,r2
  809bfc:	1823883a 	mov	r17,r3
  809c00:	080f6ec0 	call	80f6ec <__fixdfsi>
  809c04:	000d883a 	mov	r6,zero
  809c08:	000f883a 	mov	r7,zero
  809c0c:	8009883a 	mov	r4,r16
  809c10:	880b883a 	mov	r5,r17
  809c14:	d8800d15 	stw	r2,52(sp)
  809c18:	080683c0 	call	80683c <__ltdf2>
  809c1c:	10031716 	blt	r2,zero,80a87c <_dtoa_r+0xe8c>
  809c20:	d8c00d17 	ldw	r3,52(sp)
  809c24:	00800584 	movi	r2,22
  809c28:	10c1482e 	bgeu	r2,r3,80a14c <_dtoa_r+0x75c>
  809c2c:	01000044 	movi	r4,1
  809c30:	d9000c15 	stw	r4,48(sp)
  809c34:	bd85c83a 	sub	r2,r23,r22
  809c38:	11bfffc4 	addi	r6,r2,-1
  809c3c:	30030b16 	blt	r6,zero,80a86c <_dtoa_r+0xe7c>
  809c40:	d9800a15 	stw	r6,40(sp)
  809c44:	d8001115 	stw	zero,68(sp)
  809c48:	d8c00d17 	ldw	r3,52(sp)
  809c4c:	1802ff16 	blt	r3,zero,80a84c <_dtoa_r+0xe5c>
  809c50:	d9000a17 	ldw	r4,40(sp)
  809c54:	d8c00915 	stw	r3,36(sp)
  809c58:	d8001015 	stw	zero,64(sp)
  809c5c:	20c9883a 	add	r4,r4,r3
  809c60:	d9000a15 	stw	r4,40(sp)
  809c64:	d9001717 	ldw	r4,92(sp)
  809c68:	00800244 	movi	r2,9
  809c6c:	11004636 	bltu	r2,r4,809d88 <_dtoa_r+0x398>
  809c70:	00800144 	movi	r2,5
  809c74:	11020416 	blt	r2,r4,80a488 <_dtoa_r+0xa98>
  809c78:	04400044 	movi	r17,1
  809c7c:	d8c01717 	ldw	r3,92(sp)
  809c80:	00800144 	movi	r2,5
  809c84:	10c1ed36 	bltu	r2,r3,80a43c <_dtoa_r+0xa4c>
  809c88:	18c5883a 	add	r2,r3,r3
  809c8c:	1085883a 	add	r2,r2,r2
  809c90:	00c02074 	movhi	r3,129
  809c94:	18e72904 	addi	r3,r3,-25436
  809c98:	10c5883a 	add	r2,r2,r3
  809c9c:	11000017 	ldw	r4,0(r2)
  809ca0:	2000683a 	jmp	r4
  809ca4:	00809d90 	cmplti	r2,zero,630
  809ca8:	00809d90 	cmplti	r2,zero,630
  809cac:	0080a790 	cmplti	r2,zero,670
  809cb0:	0080a768 	cmpgeui	r2,zero,669
  809cb4:	0080a7ac 	andhi	r2,zero,670
  809cb8:	0080a7b8 	rdprs	r2,zero,670
  809cbc:	d9002717 	ldw	r4,156(sp)
  809cc0:	0089c3c4 	movi	r2,9999
  809cc4:	20800015 	stw	r2,0(r4)
  809cc8:	a0001026 	beq	r20,zero,809d0c <_dtoa_r+0x31c>
  809ccc:	00c020b4 	movhi	r3,130
  809cd0:	18ef6904 	addi	r3,r3,-16988
  809cd4:	d9802917 	ldw	r6,164(sp)
  809cd8:	303f7926 	beq	r6,zero,809ac0 <_dtoa_r+0xd0>
  809cdc:	188000c7 	ldb	r2,3(r3)
  809ce0:	190000c4 	addi	r4,r3,3
  809ce4:	1000101e 	bne	r2,zero,809d28 <_dtoa_r+0x338>
  809ce8:	d8802917 	ldw	r2,164(sp)
  809cec:	11000015 	stw	r4,0(r2)
  809cf0:	003f7306 	br	809ac0 <_dtoa_r+0xd0>
  809cf4:	00a00034 	movhi	r2,32768
  809cf8:	10bfffc4 	addi	r2,r2,-1
  809cfc:	00c00044 	movi	r3,1
  809d00:	88aa703a 	and	r21,r17,r2
  809d04:	90c00015 	stw	r3,0(r18)
  809d08:	003f5806 	br	809a6c <_dtoa_r+0x7c>
  809d0c:	00800434 	movhi	r2,16
  809d10:	10bfffc4 	addi	r2,r2,-1
  809d14:	a884703a 	and	r2,r21,r2
  809d18:	103fec1e 	bne	r2,zero,809ccc <_dtoa_r+0x2dc>
  809d1c:	00c020b4 	movhi	r3,130
  809d20:	18ef6604 	addi	r3,r3,-17000
  809d24:	003feb06 	br	809cd4 <_dtoa_r+0x2e4>
  809d28:	d8802917 	ldw	r2,164(sp)
  809d2c:	19000204 	addi	r4,r3,8
  809d30:	11000015 	stw	r4,0(r2)
  809d34:	003f6206 	br	809ac0 <_dtoa_r+0xd0>
  809d38:	ddc00117 	ldw	r23,4(sp)
  809d3c:	d8800217 	ldw	r2,8(sp)
  809d40:	01000804 	movi	r4,32
  809d44:	b8c10c84 	addi	r3,r23,1074
  809d48:	18a3883a 	add	r17,r3,r2
  809d4c:	2441b80e 	bge	r4,r17,80a430 <_dtoa_r+0xa40>
  809d50:	00c01004 	movi	r3,64
  809d54:	1c47c83a 	sub	r3,r3,r17
  809d58:	88bff804 	addi	r2,r17,-32
  809d5c:	a8c6983a 	sll	r3,r21,r3
  809d60:	a084d83a 	srl	r2,r20,r2
  809d64:	1888b03a 	or	r4,r3,r2
  809d68:	080f7c40 	call	80f7c4 <__floatunsidf>
  809d6c:	1011883a 	mov	r8,r2
  809d70:	00bf8434 	movhi	r2,65040
  809d74:	01000044 	movi	r4,1
  809d78:	10d3883a 	add	r9,r2,r3
  809d7c:	8dbef344 	addi	r22,r17,-1075
  809d80:	d9000815 	stw	r4,32(sp)
  809d84:	003f6f06 	br	809b44 <_dtoa_r+0x154>
  809d88:	d8001715 	stw	zero,92(sp)
  809d8c:	04400044 	movi	r17,1
  809d90:	00bfffc4 	movi	r2,-1
  809d94:	00c00044 	movi	r3,1
  809d98:	d8800e15 	stw	r2,56(sp)
  809d9c:	d8002615 	stw	zero,152(sp)
  809da0:	d8800f15 	stw	r2,60(sp)
  809da4:	d8c00b15 	stw	r3,44(sp)
  809da8:	1021883a 	mov	r16,r2
  809dac:	d8801617 	ldw	r2,88(sp)
  809db0:	10001115 	stw	zero,68(r2)
  809db4:	d8801617 	ldw	r2,88(sp)
  809db8:	11401117 	ldw	r5,68(r2)
  809dbc:	1009883a 	mov	r4,r2
  809dc0:	080d1380 	call	80d138 <_Balloc>
  809dc4:	d8c01617 	ldw	r3,88(sp)
  809dc8:	d8800515 	stw	r2,20(sp)
  809dcc:	18801015 	stw	r2,64(r3)
  809dd0:	00800384 	movi	r2,14
  809dd4:	14006836 	bltu	r2,r16,809f78 <_dtoa_r+0x588>
  809dd8:	8805003a 	cmpeq	r2,r17,zero
  809ddc:	1000661e 	bne	r2,zero,809f78 <_dtoa_r+0x588>
  809de0:	d9000d17 	ldw	r4,52(sp)
  809de4:	0102300e 	bge	zero,r4,80a6a8 <_dtoa_r+0xcb8>
  809de8:	208003cc 	andi	r2,r4,15
  809dec:	100490fa 	slli	r2,r2,3
  809df0:	2025d13a 	srai	r18,r4,4
  809df4:	00c020b4 	movhi	r3,130
  809df8:	18ef7a04 	addi	r3,r3,-16920
  809dfc:	10c5883a 	add	r2,r2,r3
  809e00:	90c0040c 	andi	r3,r18,16
  809e04:	14000017 	ldw	r16,0(r2)
  809e08:	14400117 	ldw	r17,4(r2)
  809e0c:	18036a1e 	bne	r3,zero,80abb8 <_dtoa_r+0x11c8>
  809e10:	05800084 	movi	r22,2
  809e14:	90001026 	beq	r18,zero,809e58 <_dtoa_r+0x468>
  809e18:	04c020b4 	movhi	r19,130
  809e1c:	9cefac04 	addi	r19,r19,-16720
  809e20:	9080004c 	andi	r2,r18,1
  809e24:	1005003a 	cmpeq	r2,r2,zero
  809e28:	1000081e 	bne	r2,zero,809e4c <_dtoa_r+0x45c>
  809e2c:	99800017 	ldw	r6,0(r19)
  809e30:	99c00117 	ldw	r7,4(r19)
  809e34:	880b883a 	mov	r5,r17
  809e38:	8009883a 	mov	r4,r16
  809e3c:	08060880 	call	806088 <__muldf3>
  809e40:	1021883a 	mov	r16,r2
  809e44:	b5800044 	addi	r22,r22,1
  809e48:	1823883a 	mov	r17,r3
  809e4c:	9025d07a 	srai	r18,r18,1
  809e50:	9cc00204 	addi	r19,r19,8
  809e54:	903ff21e 	bne	r18,zero,809e20 <_dtoa_r+0x430>
  809e58:	a80b883a 	mov	r5,r21
  809e5c:	a009883a 	mov	r4,r20
  809e60:	880f883a 	mov	r7,r17
  809e64:	800d883a 	mov	r6,r16
  809e68:	080644c0 	call	80644c <__divdf3>
  809e6c:	1029883a 	mov	r20,r2
  809e70:	182b883a 	mov	r21,r3
  809e74:	d8c00c17 	ldw	r3,48(sp)
  809e78:	1805003a 	cmpeq	r2,r3,zero
  809e7c:	1000081e 	bne	r2,zero,809ea0 <_dtoa_r+0x4b0>
  809e80:	0005883a 	mov	r2,zero
  809e84:	00cffc34 	movhi	r3,16368
  809e88:	180f883a 	mov	r7,r3
  809e8c:	a009883a 	mov	r4,r20
  809e90:	a80b883a 	mov	r5,r21
  809e94:	100d883a 	mov	r6,r2
  809e98:	080683c0 	call	80683c <__ltdf2>
  809e9c:	1003fe16 	blt	r2,zero,80ae98 <_dtoa_r+0x14a8>
  809ea0:	b009883a 	mov	r4,r22
  809ea4:	080694c0 	call	80694c <__floatsidf>
  809ea8:	180b883a 	mov	r5,r3
  809eac:	1009883a 	mov	r4,r2
  809eb0:	a00d883a 	mov	r6,r20
  809eb4:	a80f883a 	mov	r7,r21
  809eb8:	08060880 	call	806088 <__muldf3>
  809ebc:	0011883a 	mov	r8,zero
  809ec0:	02500734 	movhi	r9,16412
  809ec4:	1009883a 	mov	r4,r2
  809ec8:	180b883a 	mov	r5,r3
  809ecc:	480f883a 	mov	r7,r9
  809ed0:	400d883a 	mov	r6,r8
  809ed4:	08060140 	call	806014 <__adddf3>
  809ed8:	d9000f17 	ldw	r4,60(sp)
  809edc:	102d883a 	mov	r22,r2
  809ee0:	00bf3034 	movhi	r2,64704
  809ee4:	18b9883a 	add	fp,r3,r2
  809ee8:	e02f883a 	mov	r23,fp
  809eec:	20028f1e 	bne	r4,zero,80a92c <_dtoa_r+0xf3c>
  809ef0:	0005883a 	mov	r2,zero
  809ef4:	00d00534 	movhi	r3,16404
  809ef8:	a009883a 	mov	r4,r20
  809efc:	a80b883a 	mov	r5,r21
  809f00:	180f883a 	mov	r7,r3
  809f04:	100d883a 	mov	r6,r2
  809f08:	0805f940 	call	805f94 <__subdf3>
  809f0c:	1009883a 	mov	r4,r2
  809f10:	e00f883a 	mov	r7,fp
  809f14:	180b883a 	mov	r5,r3
  809f18:	b00d883a 	mov	r6,r22
  809f1c:	1025883a 	mov	r18,r2
  809f20:	1827883a 	mov	r19,r3
  809f24:	08067b40 	call	8067b4 <__gtdf2>
  809f28:	00834f16 	blt	zero,r2,80ac68 <_dtoa_r+0x1278>
  809f2c:	e0e0003c 	xorhi	r3,fp,32768
  809f30:	9009883a 	mov	r4,r18
  809f34:	980b883a 	mov	r5,r19
  809f38:	180f883a 	mov	r7,r3
  809f3c:	b00d883a 	mov	r6,r22
  809f40:	080683c0 	call	80683c <__ltdf2>
  809f44:	1000080e 	bge	r2,zero,809f68 <_dtoa_r+0x578>
  809f48:	0027883a 	mov	r19,zero
  809f4c:	0025883a 	mov	r18,zero
  809f50:	d8802617 	ldw	r2,152(sp)
  809f54:	df000517 	ldw	fp,20(sp)
  809f58:	d8000615 	stw	zero,24(sp)
  809f5c:	0084303a 	nor	r2,zero,r2
  809f60:	d8800d15 	stw	r2,52(sp)
  809f64:	00019b06 	br	80a5d4 <_dtoa_r+0xbe4>
  809f68:	d9801217 	ldw	r6,72(sp)
  809f6c:	d8801317 	ldw	r2,76(sp)
  809f70:	3029883a 	mov	r20,r6
  809f74:	102b883a 	mov	r21,r2
  809f78:	d8c00217 	ldw	r3,8(sp)
  809f7c:	18008516 	blt	r3,zero,80a194 <_dtoa_r+0x7a4>
  809f80:	d9000d17 	ldw	r4,52(sp)
  809f84:	00800384 	movi	r2,14
  809f88:	11008216 	blt	r2,r4,80a194 <_dtoa_r+0x7a4>
  809f8c:	200490fa 	slli	r2,r4,3
  809f90:	d9802617 	ldw	r6,152(sp)
  809f94:	00c020b4 	movhi	r3,130
  809f98:	18ef7a04 	addi	r3,r3,-16920
  809f9c:	10c5883a 	add	r2,r2,r3
  809fa0:	14800017 	ldw	r18,0(r2)
  809fa4:	14c00117 	ldw	r19,4(r2)
  809fa8:	30031e16 	blt	r6,zero,80ac24 <_dtoa_r+0x1234>
  809fac:	d9000517 	ldw	r4,20(sp)
  809fb0:	d8c00f17 	ldw	r3,60(sp)
  809fb4:	a823883a 	mov	r17,r21
  809fb8:	a021883a 	mov	r16,r20
  809fbc:	192b883a 	add	r21,r3,r4
  809fc0:	2039883a 	mov	fp,r4
  809fc4:	00000f06 	br	80a004 <_dtoa_r+0x614>
  809fc8:	0005883a 	mov	r2,zero
  809fcc:	00d00934 	movhi	r3,16420
  809fd0:	5009883a 	mov	r4,r10
  809fd4:	580b883a 	mov	r5,r11
  809fd8:	180f883a 	mov	r7,r3
  809fdc:	100d883a 	mov	r6,r2
  809fe0:	08060880 	call	806088 <__muldf3>
  809fe4:	180b883a 	mov	r5,r3
  809fe8:	000d883a 	mov	r6,zero
  809fec:	000f883a 	mov	r7,zero
  809ff0:	1009883a 	mov	r4,r2
  809ff4:	1021883a 	mov	r16,r2
  809ff8:	1823883a 	mov	r17,r3
  809ffc:	080672c0 	call	80672c <__nedf2>
  80a000:	10004526 	beq	r2,zero,80a118 <_dtoa_r+0x728>
  80a004:	900d883a 	mov	r6,r18
  80a008:	980f883a 	mov	r7,r19
  80a00c:	8009883a 	mov	r4,r16
  80a010:	880b883a 	mov	r5,r17
  80a014:	080644c0 	call	80644c <__divdf3>
  80a018:	180b883a 	mov	r5,r3
  80a01c:	1009883a 	mov	r4,r2
  80a020:	080f6ec0 	call	80f6ec <__fixdfsi>
  80a024:	1009883a 	mov	r4,r2
  80a028:	1029883a 	mov	r20,r2
  80a02c:	080694c0 	call	80694c <__floatsidf>
  80a030:	180f883a 	mov	r7,r3
  80a034:	9009883a 	mov	r4,r18
  80a038:	980b883a 	mov	r5,r19
  80a03c:	100d883a 	mov	r6,r2
  80a040:	08060880 	call	806088 <__muldf3>
  80a044:	180f883a 	mov	r7,r3
  80a048:	880b883a 	mov	r5,r17
  80a04c:	8009883a 	mov	r4,r16
  80a050:	100d883a 	mov	r6,r2
  80a054:	0805f940 	call	805f94 <__subdf3>
  80a058:	1015883a 	mov	r10,r2
  80a05c:	a0800c04 	addi	r2,r20,48
  80a060:	e0800005 	stb	r2,0(fp)
  80a064:	e7000044 	addi	fp,fp,1
  80a068:	1817883a 	mov	r11,r3
  80a06c:	e57fd61e 	bne	fp,r21,809fc8 <_dtoa_r+0x5d8>
  80a070:	500d883a 	mov	r6,r10
  80a074:	180f883a 	mov	r7,r3
  80a078:	5009883a 	mov	r4,r10
  80a07c:	180b883a 	mov	r5,r3
  80a080:	08060140 	call	806014 <__adddf3>
  80a084:	100d883a 	mov	r6,r2
  80a088:	9009883a 	mov	r4,r18
  80a08c:	980b883a 	mov	r5,r19
  80a090:	180f883a 	mov	r7,r3
  80a094:	1021883a 	mov	r16,r2
  80a098:	1823883a 	mov	r17,r3
  80a09c:	080683c0 	call	80683c <__ltdf2>
  80a0a0:	10000816 	blt	r2,zero,80a0c4 <_dtoa_r+0x6d4>
  80a0a4:	980b883a 	mov	r5,r19
  80a0a8:	800d883a 	mov	r6,r16
  80a0ac:	880f883a 	mov	r7,r17
  80a0b0:	9009883a 	mov	r4,r18
  80a0b4:	08066a40 	call	8066a4 <__eqdf2>
  80a0b8:	1000171e 	bne	r2,zero,80a118 <_dtoa_r+0x728>
  80a0bc:	a080004c 	andi	r2,r20,1
  80a0c0:	10001526 	beq	r2,zero,80a118 <_dtoa_r+0x728>
  80a0c4:	d8800d17 	ldw	r2,52(sp)
  80a0c8:	d8800415 	stw	r2,16(sp)
  80a0cc:	e009883a 	mov	r4,fp
  80a0d0:	213fffc4 	addi	r4,r4,-1
  80a0d4:	20c00007 	ldb	r3,0(r4)
  80a0d8:	00800e44 	movi	r2,57
  80a0dc:	1880081e 	bne	r3,r2,80a100 <_dtoa_r+0x710>
  80a0e0:	d8800517 	ldw	r2,20(sp)
  80a0e4:	113ffa1e 	bne	r2,r4,80a0d0 <_dtoa_r+0x6e0>
  80a0e8:	d8c00417 	ldw	r3,16(sp)
  80a0ec:	d9800517 	ldw	r6,20(sp)
  80a0f0:	00800c04 	movi	r2,48
  80a0f4:	18c00044 	addi	r3,r3,1
  80a0f8:	d8c00415 	stw	r3,16(sp)
  80a0fc:	30800005 	stb	r2,0(r6)
  80a100:	20800003 	ldbu	r2,0(r4)
  80a104:	d8c00417 	ldw	r3,16(sp)
  80a108:	27000044 	addi	fp,r4,1
  80a10c:	10800044 	addi	r2,r2,1
  80a110:	d8c00d15 	stw	r3,52(sp)
  80a114:	20800005 	stb	r2,0(r4)
  80a118:	d9001617 	ldw	r4,88(sp)
  80a11c:	d9400717 	ldw	r5,28(sp)
  80a120:	080cbb80 	call	80cbb8 <_Bfree>
  80a124:	e0000005 	stb	zero,0(fp)
  80a128:	d9800d17 	ldw	r6,52(sp)
  80a12c:	d8c02717 	ldw	r3,156(sp)
  80a130:	d9002917 	ldw	r4,164(sp)
  80a134:	30800044 	addi	r2,r6,1
  80a138:	18800015 	stw	r2,0(r3)
  80a13c:	20029c26 	beq	r4,zero,80abb0 <_dtoa_r+0x11c0>
  80a140:	d8c00517 	ldw	r3,20(sp)
  80a144:	27000015 	stw	fp,0(r4)
  80a148:	003e5d06 	br	809ac0 <_dtoa_r+0xd0>
  80a14c:	d9800d17 	ldw	r6,52(sp)
  80a150:	00c020b4 	movhi	r3,130
  80a154:	18ef7a04 	addi	r3,r3,-16920
  80a158:	d9001217 	ldw	r4,72(sp)
  80a15c:	300490fa 	slli	r2,r6,3
  80a160:	d9401317 	ldw	r5,76(sp)
  80a164:	10c5883a 	add	r2,r2,r3
  80a168:	12000017 	ldw	r8,0(r2)
  80a16c:	12400117 	ldw	r9,4(r2)
  80a170:	400d883a 	mov	r6,r8
  80a174:	480f883a 	mov	r7,r9
  80a178:	080683c0 	call	80683c <__ltdf2>
  80a17c:	1000030e 	bge	r2,zero,80a18c <_dtoa_r+0x79c>
  80a180:	d8800d17 	ldw	r2,52(sp)
  80a184:	10bfffc4 	addi	r2,r2,-1
  80a188:	d8800d15 	stw	r2,52(sp)
  80a18c:	d8000c15 	stw	zero,48(sp)
  80a190:	003ea806 	br	809c34 <_dtoa_r+0x244>
  80a194:	d9000b17 	ldw	r4,44(sp)
  80a198:	202cc03a 	cmpne	r22,r4,zero
  80a19c:	b000c71e 	bne	r22,zero,80a4bc <_dtoa_r+0xacc>
  80a1a0:	dc001117 	ldw	r16,68(sp)
  80a1a4:	dc801017 	ldw	r18,64(sp)
  80a1a8:	0027883a 	mov	r19,zero
  80a1ac:	04000b0e 	bge	zero,r16,80a1dc <_dtoa_r+0x7ec>
  80a1b0:	d8c00a17 	ldw	r3,40(sp)
  80a1b4:	00c0090e 	bge	zero,r3,80a1dc <_dtoa_r+0x7ec>
  80a1b8:	8005883a 	mov	r2,r16
  80a1bc:	1c011316 	blt	r3,r16,80a60c <_dtoa_r+0xc1c>
  80a1c0:	d9000a17 	ldw	r4,40(sp)
  80a1c4:	d9801117 	ldw	r6,68(sp)
  80a1c8:	80a1c83a 	sub	r16,r16,r2
  80a1cc:	2089c83a 	sub	r4,r4,r2
  80a1d0:	308dc83a 	sub	r6,r6,r2
  80a1d4:	d9000a15 	stw	r4,40(sp)
  80a1d8:	d9801115 	stw	r6,68(sp)
  80a1dc:	d8801017 	ldw	r2,64(sp)
  80a1e0:	0080150e 	bge	zero,r2,80a238 <_dtoa_r+0x848>
  80a1e4:	d8c00b17 	ldw	r3,44(sp)
  80a1e8:	1805003a 	cmpeq	r2,r3,zero
  80a1ec:	1001c91e 	bne	r2,zero,80a914 <_dtoa_r+0xf24>
  80a1f0:	04800e0e 	bge	zero,r18,80a22c <_dtoa_r+0x83c>
  80a1f4:	d9001617 	ldw	r4,88(sp)
  80a1f8:	980b883a 	mov	r5,r19
  80a1fc:	900d883a 	mov	r6,r18
  80a200:	080da040 	call	80da04 <__pow5mult>
  80a204:	d9001617 	ldw	r4,88(sp)
  80a208:	d9800717 	ldw	r6,28(sp)
  80a20c:	100b883a 	mov	r5,r2
  80a210:	1027883a 	mov	r19,r2
  80a214:	080d6480 	call	80d648 <__multiply>
  80a218:	d9001617 	ldw	r4,88(sp)
  80a21c:	d9400717 	ldw	r5,28(sp)
  80a220:	1023883a 	mov	r17,r2
  80a224:	080cbb80 	call	80cbb8 <_Bfree>
  80a228:	dc400715 	stw	r17,28(sp)
  80a22c:	d9001017 	ldw	r4,64(sp)
  80a230:	248dc83a 	sub	r6,r4,r18
  80a234:	30010e1e 	bne	r6,zero,80a670 <_dtoa_r+0xc80>
  80a238:	d9001617 	ldw	r4,88(sp)
  80a23c:	04400044 	movi	r17,1
  80a240:	880b883a 	mov	r5,r17
  80a244:	080d89c0 	call	80d89c <__i2b>
  80a248:	d9800917 	ldw	r6,36(sp)
  80a24c:	1025883a 	mov	r18,r2
  80a250:	0180040e 	bge	zero,r6,80a264 <_dtoa_r+0x874>
  80a254:	d9001617 	ldw	r4,88(sp)
  80a258:	100b883a 	mov	r5,r2
  80a25c:	080da040 	call	80da04 <__pow5mult>
  80a260:	1025883a 	mov	r18,r2
  80a264:	d8801717 	ldw	r2,92(sp)
  80a268:	8880f30e 	bge	r17,r2,80a638 <_dtoa_r+0xc48>
  80a26c:	0023883a 	mov	r17,zero
  80a270:	d9800917 	ldw	r6,36(sp)
  80a274:	30019e1e 	bne	r6,zero,80a8f0 <_dtoa_r+0xf00>
  80a278:	00c00044 	movi	r3,1
  80a27c:	d9000a17 	ldw	r4,40(sp)
  80a280:	20c5883a 	add	r2,r4,r3
  80a284:	10c007cc 	andi	r3,r2,31
  80a288:	1800841e 	bne	r3,zero,80a49c <_dtoa_r+0xaac>
  80a28c:	00800704 	movi	r2,28
  80a290:	d9000a17 	ldw	r4,40(sp)
  80a294:	d9801117 	ldw	r6,68(sp)
  80a298:	80a1883a 	add	r16,r16,r2
  80a29c:	2089883a 	add	r4,r4,r2
  80a2a0:	308d883a 	add	r6,r6,r2
  80a2a4:	d9000a15 	stw	r4,40(sp)
  80a2a8:	d9801115 	stw	r6,68(sp)
  80a2ac:	d8801117 	ldw	r2,68(sp)
  80a2b0:	0080050e 	bge	zero,r2,80a2c8 <_dtoa_r+0x8d8>
  80a2b4:	d9400717 	ldw	r5,28(sp)
  80a2b8:	d9001617 	ldw	r4,88(sp)
  80a2bc:	100d883a 	mov	r6,r2
  80a2c0:	080d4fc0 	call	80d4fc <__lshift>
  80a2c4:	d8800715 	stw	r2,28(sp)
  80a2c8:	d8c00a17 	ldw	r3,40(sp)
  80a2cc:	00c0050e 	bge	zero,r3,80a2e4 <_dtoa_r+0x8f4>
  80a2d0:	d9001617 	ldw	r4,88(sp)
  80a2d4:	900b883a 	mov	r5,r18
  80a2d8:	180d883a 	mov	r6,r3
  80a2dc:	080d4fc0 	call	80d4fc <__lshift>
  80a2e0:	1025883a 	mov	r18,r2
  80a2e4:	d9000c17 	ldw	r4,48(sp)
  80a2e8:	2005003a 	cmpeq	r2,r4,zero
  80a2ec:	10016f26 	beq	r2,zero,80a8ac <_dtoa_r+0xebc>
  80a2f0:	d9000f17 	ldw	r4,60(sp)
  80a2f4:	0102170e 	bge	zero,r4,80ab54 <_dtoa_r+0x1164>
  80a2f8:	d9800b17 	ldw	r6,44(sp)
  80a2fc:	3005003a 	cmpeq	r2,r6,zero
  80a300:	1000881e 	bne	r2,zero,80a524 <_dtoa_r+0xb34>
  80a304:	0400050e 	bge	zero,r16,80a31c <_dtoa_r+0x92c>
  80a308:	d9001617 	ldw	r4,88(sp)
  80a30c:	980b883a 	mov	r5,r19
  80a310:	800d883a 	mov	r6,r16
  80a314:	080d4fc0 	call	80d4fc <__lshift>
  80a318:	1027883a 	mov	r19,r2
  80a31c:	8804c03a 	cmpne	r2,r17,zero
  80a320:	1002541e 	bne	r2,zero,80ac74 <_dtoa_r+0x1284>
  80a324:	980b883a 	mov	r5,r19
  80a328:	dd800517 	ldw	r22,20(sp)
  80a32c:	dcc00615 	stw	r19,24(sp)
  80a330:	a700004c 	andi	fp,r20,1
  80a334:	2827883a 	mov	r19,r5
  80a338:	d9000717 	ldw	r4,28(sp)
  80a33c:	900b883a 	mov	r5,r18
  80a340:	08097ac0 	call	8097ac <quorem>
  80a344:	d9000717 	ldw	r4,28(sp)
  80a348:	d9400617 	ldw	r5,24(sp)
  80a34c:	1023883a 	mov	r17,r2
  80a350:	8dc00c04 	addi	r23,r17,48
  80a354:	080cd140 	call	80cd14 <__mcmp>
  80a358:	d9001617 	ldw	r4,88(sp)
  80a35c:	900b883a 	mov	r5,r18
  80a360:	980d883a 	mov	r6,r19
  80a364:	1029883a 	mov	r20,r2
  80a368:	080d3700 	call	80d370 <__mdiff>
  80a36c:	102b883a 	mov	r21,r2
  80a370:	10800317 	ldw	r2,12(r2)
  80a374:	1001281e 	bne	r2,zero,80a818 <_dtoa_r+0xe28>
  80a378:	d9000717 	ldw	r4,28(sp)
  80a37c:	a80b883a 	mov	r5,r21
  80a380:	080cd140 	call	80cd14 <__mcmp>
  80a384:	d9001617 	ldw	r4,88(sp)
  80a388:	1021883a 	mov	r16,r2
  80a38c:	a80b883a 	mov	r5,r21
  80a390:	080cbb80 	call	80cbb8 <_Bfree>
  80a394:	8000041e 	bne	r16,zero,80a3a8 <_dtoa_r+0x9b8>
  80a398:	d8801717 	ldw	r2,92(sp)
  80a39c:	1000021e 	bne	r2,zero,80a3a8 <_dtoa_r+0x9b8>
  80a3a0:	e004c03a 	cmpne	r2,fp,zero
  80a3a4:	10011726 	beq	r2,zero,80a804 <_dtoa_r+0xe14>
  80a3a8:	a0010616 	blt	r20,zero,80a7c4 <_dtoa_r+0xdd4>
  80a3ac:	a000041e 	bne	r20,zero,80a3c0 <_dtoa_r+0x9d0>
  80a3b0:	d8c01717 	ldw	r3,92(sp)
  80a3b4:	1800021e 	bne	r3,zero,80a3c0 <_dtoa_r+0x9d0>
  80a3b8:	e004c03a 	cmpne	r2,fp,zero
  80a3bc:	10010126 	beq	r2,zero,80a7c4 <_dtoa_r+0xdd4>
  80a3c0:	04023d16 	blt	zero,r16,80acb8 <_dtoa_r+0x12c8>
  80a3c4:	b5c00005 	stb	r23,0(r22)
  80a3c8:	d9800517 	ldw	r6,20(sp)
  80a3cc:	d9000f17 	ldw	r4,60(sp)
  80a3d0:	b5800044 	addi	r22,r22,1
  80a3d4:	3105883a 	add	r2,r6,r4
  80a3d8:	b0806526 	beq	r22,r2,80a570 <_dtoa_r+0xb80>
  80a3dc:	d9400717 	ldw	r5,28(sp)
  80a3e0:	d9001617 	ldw	r4,88(sp)
  80a3e4:	01800284 	movi	r6,10
  80a3e8:	000f883a 	mov	r7,zero
  80a3ec:	080d8d80 	call	80d8d8 <__multadd>
  80a3f0:	d8800715 	stw	r2,28(sp)
  80a3f4:	d8800617 	ldw	r2,24(sp)
  80a3f8:	14c10c26 	beq	r2,r19,80a82c <_dtoa_r+0xe3c>
  80a3fc:	d9400617 	ldw	r5,24(sp)
  80a400:	d9001617 	ldw	r4,88(sp)
  80a404:	01800284 	movi	r6,10
  80a408:	000f883a 	mov	r7,zero
  80a40c:	080d8d80 	call	80d8d8 <__multadd>
  80a410:	d9001617 	ldw	r4,88(sp)
  80a414:	980b883a 	mov	r5,r19
  80a418:	01800284 	movi	r6,10
  80a41c:	000f883a 	mov	r7,zero
  80a420:	d8800615 	stw	r2,24(sp)
  80a424:	080d8d80 	call	80d8d8 <__multadd>
  80a428:	1027883a 	mov	r19,r2
  80a42c:	003fc206 	br	80a338 <_dtoa_r+0x948>
  80a430:	2445c83a 	sub	r2,r4,r17
  80a434:	a088983a 	sll	r4,r20,r2
  80a438:	003e4b06 	br	809d68 <_dtoa_r+0x378>
  80a43c:	01bfffc4 	movi	r6,-1
  80a440:	00800044 	movi	r2,1
  80a444:	d9800e15 	stw	r6,56(sp)
  80a448:	d9800f15 	stw	r6,60(sp)
  80a44c:	d8800b15 	stw	r2,44(sp)
  80a450:	d8c01617 	ldw	r3,88(sp)
  80a454:	008005c4 	movi	r2,23
  80a458:	18001115 	stw	zero,68(r3)
  80a45c:	1580082e 	bgeu	r2,r22,80a480 <_dtoa_r+0xa90>
  80a460:	00c00104 	movi	r3,4
  80a464:	0009883a 	mov	r4,zero
  80a468:	18c7883a 	add	r3,r3,r3
  80a46c:	18800504 	addi	r2,r3,20
  80a470:	21000044 	addi	r4,r4,1
  80a474:	b0bffc2e 	bgeu	r22,r2,80a468 <_dtoa_r+0xa78>
  80a478:	d9801617 	ldw	r6,88(sp)
  80a47c:	31001115 	stw	r4,68(r6)
  80a480:	dc000f17 	ldw	r16,60(sp)
  80a484:	003e4b06 	br	809db4 <_dtoa_r+0x3c4>
  80a488:	d9801717 	ldw	r6,92(sp)
  80a48c:	0023883a 	mov	r17,zero
  80a490:	31bfff04 	addi	r6,r6,-4
  80a494:	d9801715 	stw	r6,92(sp)
  80a498:	003df806 	br	809c7c <_dtoa_r+0x28c>
  80a49c:	00800804 	movi	r2,32
  80a4a0:	10c9c83a 	sub	r4,r2,r3
  80a4a4:	00c00104 	movi	r3,4
  80a4a8:	19005a16 	blt	r3,r4,80a614 <_dtoa_r+0xc24>
  80a4ac:	008000c4 	movi	r2,3
  80a4b0:	113f7e16 	blt	r2,r4,80a2ac <_dtoa_r+0x8bc>
  80a4b4:	20800704 	addi	r2,r4,28
  80a4b8:	003f7506 	br	80a290 <_dtoa_r+0x8a0>
  80a4bc:	d9801717 	ldw	r6,92(sp)
  80a4c0:	00800044 	movi	r2,1
  80a4c4:	1180a10e 	bge	r2,r6,80a74c <_dtoa_r+0xd5c>
  80a4c8:	d9800f17 	ldw	r6,60(sp)
  80a4cc:	d8c01017 	ldw	r3,64(sp)
  80a4d0:	30bfffc4 	addi	r2,r6,-1
  80a4d4:	1881c616 	blt	r3,r2,80abf0 <_dtoa_r+0x1200>
  80a4d8:	18a5c83a 	sub	r18,r3,r2
  80a4dc:	d8800f17 	ldw	r2,60(sp)
  80a4e0:	10026216 	blt	r2,zero,80ae6c <_dtoa_r+0x147c>
  80a4e4:	dc001117 	ldw	r16,68(sp)
  80a4e8:	1007883a 	mov	r3,r2
  80a4ec:	d9800a17 	ldw	r6,40(sp)
  80a4f0:	d8801117 	ldw	r2,68(sp)
  80a4f4:	d9001617 	ldw	r4,88(sp)
  80a4f8:	30cd883a 	add	r6,r6,r3
  80a4fc:	10c5883a 	add	r2,r2,r3
  80a500:	01400044 	movi	r5,1
  80a504:	d9800a15 	stw	r6,40(sp)
  80a508:	d8801115 	stw	r2,68(sp)
  80a50c:	080d89c0 	call	80d89c <__i2b>
  80a510:	1027883a 	mov	r19,r2
  80a514:	003f2506 	br	80a1ac <_dtoa_r+0x7bc>
  80a518:	00c020b4 	movhi	r3,130
  80a51c:	18ef5d04 	addi	r3,r3,-17036
  80a520:	003d6706 	br	809ac0 <_dtoa_r+0xd0>
  80a524:	dd800517 	ldw	r22,20(sp)
  80a528:	04000044 	movi	r16,1
  80a52c:	00000706 	br	80a54c <_dtoa_r+0xb5c>
  80a530:	d9400717 	ldw	r5,28(sp)
  80a534:	d9001617 	ldw	r4,88(sp)
  80a538:	01800284 	movi	r6,10
  80a53c:	000f883a 	mov	r7,zero
  80a540:	080d8d80 	call	80d8d8 <__multadd>
  80a544:	d8800715 	stw	r2,28(sp)
  80a548:	84000044 	addi	r16,r16,1
  80a54c:	d9000717 	ldw	r4,28(sp)
  80a550:	900b883a 	mov	r5,r18
  80a554:	08097ac0 	call	8097ac <quorem>
  80a558:	15c00c04 	addi	r23,r2,48
  80a55c:	b5c00005 	stb	r23,0(r22)
  80a560:	d8c00f17 	ldw	r3,60(sp)
  80a564:	b5800044 	addi	r22,r22,1
  80a568:	80fff116 	blt	r16,r3,80a530 <_dtoa_r+0xb40>
  80a56c:	d8000615 	stw	zero,24(sp)
  80a570:	d9400717 	ldw	r5,28(sp)
  80a574:	d9001617 	ldw	r4,88(sp)
  80a578:	01800044 	movi	r6,1
  80a57c:	080d4fc0 	call	80d4fc <__lshift>
  80a580:	1009883a 	mov	r4,r2
  80a584:	900b883a 	mov	r5,r18
  80a588:	d8800715 	stw	r2,28(sp)
  80a58c:	080cd140 	call	80cd14 <__mcmp>
  80a590:	00803c0e 	bge	zero,r2,80a684 <_dtoa_r+0xc94>
  80a594:	b009883a 	mov	r4,r22
  80a598:	213fffc4 	addi	r4,r4,-1
  80a59c:	21400003 	ldbu	r5,0(r4)
  80a5a0:	00800e44 	movi	r2,57
  80a5a4:	28c03fcc 	andi	r3,r5,255
  80a5a8:	18c0201c 	xori	r3,r3,128
  80a5ac:	18ffe004 	addi	r3,r3,-128
  80a5b0:	1881981e 	bne	r3,r2,80ac14 <_dtoa_r+0x1224>
  80a5b4:	d9800517 	ldw	r6,20(sp)
  80a5b8:	21bff71e 	bne	r4,r6,80a598 <_dtoa_r+0xba8>
  80a5bc:	d8800d17 	ldw	r2,52(sp)
  80a5c0:	37000044 	addi	fp,r6,1
  80a5c4:	10800044 	addi	r2,r2,1
  80a5c8:	d8800d15 	stw	r2,52(sp)
  80a5cc:	00800c44 	movi	r2,49
  80a5d0:	30800005 	stb	r2,0(r6)
  80a5d4:	d9001617 	ldw	r4,88(sp)
  80a5d8:	900b883a 	mov	r5,r18
  80a5dc:	080cbb80 	call	80cbb8 <_Bfree>
  80a5e0:	983ecd26 	beq	r19,zero,80a118 <_dtoa_r+0x728>
  80a5e4:	d8c00617 	ldw	r3,24(sp)
  80a5e8:	18000426 	beq	r3,zero,80a5fc <_dtoa_r+0xc0c>
  80a5ec:	1cc00326 	beq	r3,r19,80a5fc <_dtoa_r+0xc0c>
  80a5f0:	d9001617 	ldw	r4,88(sp)
  80a5f4:	180b883a 	mov	r5,r3
  80a5f8:	080cbb80 	call	80cbb8 <_Bfree>
  80a5fc:	d9001617 	ldw	r4,88(sp)
  80a600:	980b883a 	mov	r5,r19
  80a604:	080cbb80 	call	80cbb8 <_Bfree>
  80a608:	003ec306 	br	80a118 <_dtoa_r+0x728>
  80a60c:	1805883a 	mov	r2,r3
  80a610:	003eeb06 	br	80a1c0 <_dtoa_r+0x7d0>
  80a614:	d9800a17 	ldw	r6,40(sp)
  80a618:	d8c01117 	ldw	r3,68(sp)
  80a61c:	20bfff04 	addi	r2,r4,-4
  80a620:	308d883a 	add	r6,r6,r2
  80a624:	1887883a 	add	r3,r3,r2
  80a628:	80a1883a 	add	r16,r16,r2
  80a62c:	d9800a15 	stw	r6,40(sp)
  80a630:	d8c01115 	stw	r3,68(sp)
  80a634:	003f1d06 	br	80a2ac <_dtoa_r+0x8bc>
  80a638:	a03f0c1e 	bne	r20,zero,80a26c <_dtoa_r+0x87c>
  80a63c:	00800434 	movhi	r2,16
  80a640:	10bfffc4 	addi	r2,r2,-1
  80a644:	a884703a 	and	r2,r21,r2
  80a648:	103f081e 	bne	r2,zero,80a26c <_dtoa_r+0x87c>
  80a64c:	a89ffc2c 	andhi	r2,r21,32752
  80a650:	103f0626 	beq	r2,zero,80a26c <_dtoa_r+0x87c>
  80a654:	d8c01117 	ldw	r3,68(sp)
  80a658:	d9000a17 	ldw	r4,40(sp)
  80a65c:	18c00044 	addi	r3,r3,1
  80a660:	21000044 	addi	r4,r4,1
  80a664:	d8c01115 	stw	r3,68(sp)
  80a668:	d9000a15 	stw	r4,40(sp)
  80a66c:	003f0006 	br	80a270 <_dtoa_r+0x880>
  80a670:	d9400717 	ldw	r5,28(sp)
  80a674:	d9001617 	ldw	r4,88(sp)
  80a678:	080da040 	call	80da04 <__pow5mult>
  80a67c:	d8800715 	stw	r2,28(sp)
  80a680:	003eed06 	br	80a238 <_dtoa_r+0x848>
  80a684:	1000021e 	bne	r2,zero,80a690 <_dtoa_r+0xca0>
  80a688:	b880004c 	andi	r2,r23,1
  80a68c:	103fc11e 	bne	r2,zero,80a594 <_dtoa_r+0xba4>
  80a690:	b5bfffc4 	addi	r22,r22,-1
  80a694:	b0c00007 	ldb	r3,0(r22)
  80a698:	00800c04 	movi	r2,48
  80a69c:	18bffc26 	beq	r3,r2,80a690 <_dtoa_r+0xca0>
  80a6a0:	b7000044 	addi	fp,r22,1
  80a6a4:	003fcb06 	br	80a5d4 <_dtoa_r+0xbe4>
  80a6a8:	d9800d17 	ldw	r6,52(sp)
  80a6ac:	018fc83a 	sub	r7,zero,r6
  80a6b0:	3801f726 	beq	r7,zero,80ae90 <_dtoa_r+0x14a0>
  80a6b4:	398003cc 	andi	r6,r7,15
  80a6b8:	300c90fa 	slli	r6,r6,3
  80a6bc:	014020b4 	movhi	r5,130
  80a6c0:	296f7a04 	addi	r5,r5,-16920
  80a6c4:	d9001217 	ldw	r4,72(sp)
  80a6c8:	314d883a 	add	r6,r6,r5
  80a6cc:	30c00117 	ldw	r3,4(r6)
  80a6d0:	30800017 	ldw	r2,0(r6)
  80a6d4:	d9401317 	ldw	r5,76(sp)
  80a6d8:	3821d13a 	srai	r16,r7,4
  80a6dc:	100d883a 	mov	r6,r2
  80a6e0:	180f883a 	mov	r7,r3
  80a6e4:	08060880 	call	806088 <__muldf3>
  80a6e8:	1011883a 	mov	r8,r2
  80a6ec:	1813883a 	mov	r9,r3
  80a6f0:	1029883a 	mov	r20,r2
  80a6f4:	182b883a 	mov	r21,r3
  80a6f8:	8001e526 	beq	r16,zero,80ae90 <_dtoa_r+0x14a0>
  80a6fc:	05800084 	movi	r22,2
  80a700:	044020b4 	movhi	r17,130
  80a704:	8c6fac04 	addi	r17,r17,-16720
  80a708:	8080004c 	andi	r2,r16,1
  80a70c:	1005003a 	cmpeq	r2,r2,zero
  80a710:	1000081e 	bne	r2,zero,80a734 <_dtoa_r+0xd44>
  80a714:	89800017 	ldw	r6,0(r17)
  80a718:	89c00117 	ldw	r7,4(r17)
  80a71c:	480b883a 	mov	r5,r9
  80a720:	4009883a 	mov	r4,r8
  80a724:	08060880 	call	806088 <__muldf3>
  80a728:	1011883a 	mov	r8,r2
  80a72c:	b5800044 	addi	r22,r22,1
  80a730:	1813883a 	mov	r9,r3
  80a734:	8021d07a 	srai	r16,r16,1
  80a738:	8c400204 	addi	r17,r17,8
  80a73c:	803ff21e 	bne	r16,zero,80a708 <_dtoa_r+0xd18>
  80a740:	4029883a 	mov	r20,r8
  80a744:	482b883a 	mov	r21,r9
  80a748:	003dca06 	br	809e74 <_dtoa_r+0x484>
  80a74c:	d9000817 	ldw	r4,32(sp)
  80a750:	2005003a 	cmpeq	r2,r4,zero
  80a754:	1001f61e 	bne	r2,zero,80af30 <_dtoa_r+0x1540>
  80a758:	dc001117 	ldw	r16,68(sp)
  80a75c:	dc801017 	ldw	r18,64(sp)
  80a760:	18c10cc4 	addi	r3,r3,1075
  80a764:	003f6106 	br	80a4ec <_dtoa_r+0xafc>
  80a768:	d8000b15 	stw	zero,44(sp)
  80a76c:	d9802617 	ldw	r6,152(sp)
  80a770:	d8c00d17 	ldw	r3,52(sp)
  80a774:	30800044 	addi	r2,r6,1
  80a778:	18ad883a 	add	r22,r3,r2
  80a77c:	b13fffc4 	addi	r4,r22,-1
  80a780:	d9000e15 	stw	r4,56(sp)
  80a784:	0581f60e 	bge	zero,r22,80af60 <_dtoa_r+0x1570>
  80a788:	dd800f15 	stw	r22,60(sp)
  80a78c:	003f3006 	br	80a450 <_dtoa_r+0xa60>
  80a790:	d8000b15 	stw	zero,44(sp)
  80a794:	d9002617 	ldw	r4,152(sp)
  80a798:	0101eb0e 	bge	zero,r4,80af48 <_dtoa_r+0x1558>
  80a79c:	202d883a 	mov	r22,r4
  80a7a0:	d9000e15 	stw	r4,56(sp)
  80a7a4:	d9000f15 	stw	r4,60(sp)
  80a7a8:	003f2906 	br	80a450 <_dtoa_r+0xa60>
  80a7ac:	01800044 	movi	r6,1
  80a7b0:	d9800b15 	stw	r6,44(sp)
  80a7b4:	003ff706 	br	80a794 <_dtoa_r+0xda4>
  80a7b8:	01000044 	movi	r4,1
  80a7bc:	d9000b15 	stw	r4,44(sp)
  80a7c0:	003fea06 	br	80a76c <_dtoa_r+0xd7c>
  80a7c4:	04000c0e 	bge	zero,r16,80a7f8 <_dtoa_r+0xe08>
  80a7c8:	d9400717 	ldw	r5,28(sp)
  80a7cc:	d9001617 	ldw	r4,88(sp)
  80a7d0:	01800044 	movi	r6,1
  80a7d4:	080d4fc0 	call	80d4fc <__lshift>
  80a7d8:	1009883a 	mov	r4,r2
  80a7dc:	900b883a 	mov	r5,r18
  80a7e0:	d8800715 	stw	r2,28(sp)
  80a7e4:	080cd140 	call	80cd14 <__mcmp>
  80a7e8:	0081e00e 	bge	zero,r2,80af6c <_dtoa_r+0x157c>
  80a7ec:	bdc00044 	addi	r23,r23,1
  80a7f0:	00800e84 	movi	r2,58
  80a7f4:	b881a226 	beq	r23,r2,80ae80 <_dtoa_r+0x1490>
  80a7f8:	b7000044 	addi	fp,r22,1
  80a7fc:	b5c00005 	stb	r23,0(r22)
  80a800:	003f7406 	br	80a5d4 <_dtoa_r+0xbe4>
  80a804:	00800e44 	movi	r2,57
  80a808:	b8819d26 	beq	r23,r2,80ae80 <_dtoa_r+0x1490>
  80a80c:	053ffa0e 	bge	zero,r20,80a7f8 <_dtoa_r+0xe08>
  80a810:	8dc00c44 	addi	r23,r17,49
  80a814:	003ff806 	br	80a7f8 <_dtoa_r+0xe08>
  80a818:	d9001617 	ldw	r4,88(sp)
  80a81c:	a80b883a 	mov	r5,r21
  80a820:	04000044 	movi	r16,1
  80a824:	080cbb80 	call	80cbb8 <_Bfree>
  80a828:	003edf06 	br	80a3a8 <_dtoa_r+0x9b8>
  80a82c:	d9001617 	ldw	r4,88(sp)
  80a830:	980b883a 	mov	r5,r19
  80a834:	01800284 	movi	r6,10
  80a838:	000f883a 	mov	r7,zero
  80a83c:	080d8d80 	call	80d8d8 <__multadd>
  80a840:	1027883a 	mov	r19,r2
  80a844:	d8800615 	stw	r2,24(sp)
  80a848:	003ebb06 	br	80a338 <_dtoa_r+0x948>
  80a84c:	d9801117 	ldw	r6,68(sp)
  80a850:	d8800d17 	ldw	r2,52(sp)
  80a854:	d8000915 	stw	zero,36(sp)
  80a858:	308dc83a 	sub	r6,r6,r2
  80a85c:	0087c83a 	sub	r3,zero,r2
  80a860:	d9801115 	stw	r6,68(sp)
  80a864:	d8c01015 	stw	r3,64(sp)
  80a868:	003cfe06 	br	809c64 <_dtoa_r+0x274>
  80a86c:	018dc83a 	sub	r6,zero,r6
  80a870:	d9801115 	stw	r6,68(sp)
  80a874:	d8000a15 	stw	zero,40(sp)
  80a878:	003cf306 	br	809c48 <_dtoa_r+0x258>
  80a87c:	d9000d17 	ldw	r4,52(sp)
  80a880:	080694c0 	call	80694c <__floatsidf>
  80a884:	880b883a 	mov	r5,r17
  80a888:	8009883a 	mov	r4,r16
  80a88c:	180f883a 	mov	r7,r3
  80a890:	100d883a 	mov	r6,r2
  80a894:	080672c0 	call	80672c <__nedf2>
  80a898:	103ce126 	beq	r2,zero,809c20 <_dtoa_r+0x230>
  80a89c:	d9800d17 	ldw	r6,52(sp)
  80a8a0:	31bfffc4 	addi	r6,r6,-1
  80a8a4:	d9800d15 	stw	r6,52(sp)
  80a8a8:	003cdd06 	br	809c20 <_dtoa_r+0x230>
  80a8ac:	d9000717 	ldw	r4,28(sp)
  80a8b0:	900b883a 	mov	r5,r18
  80a8b4:	080cd140 	call	80cd14 <__mcmp>
  80a8b8:	103e8d0e 	bge	r2,zero,80a2f0 <_dtoa_r+0x900>
  80a8bc:	d9400717 	ldw	r5,28(sp)
  80a8c0:	d9001617 	ldw	r4,88(sp)
  80a8c4:	01800284 	movi	r6,10
  80a8c8:	000f883a 	mov	r7,zero
  80a8cc:	080d8d80 	call	80d8d8 <__multadd>
  80a8d0:	d9800d17 	ldw	r6,52(sp)
  80a8d4:	d8800715 	stw	r2,28(sp)
  80a8d8:	31bfffc4 	addi	r6,r6,-1
  80a8dc:	d9800d15 	stw	r6,52(sp)
  80a8e0:	b001a71e 	bne	r22,zero,80af80 <_dtoa_r+0x1590>
  80a8e4:	d8800e17 	ldw	r2,56(sp)
  80a8e8:	d8800f15 	stw	r2,60(sp)
  80a8ec:	003e8006 	br	80a2f0 <_dtoa_r+0x900>
  80a8f0:	90800417 	ldw	r2,16(r18)
  80a8f4:	1085883a 	add	r2,r2,r2
  80a8f8:	1085883a 	add	r2,r2,r2
  80a8fc:	1485883a 	add	r2,r2,r18
  80a900:	11000417 	ldw	r4,16(r2)
  80a904:	080cbe00 	call	80cbe0 <__hi0bits>
  80a908:	00c00804 	movi	r3,32
  80a90c:	1887c83a 	sub	r3,r3,r2
  80a910:	003e5a06 	br	80a27c <_dtoa_r+0x88c>
  80a914:	d9400717 	ldw	r5,28(sp)
  80a918:	d9801017 	ldw	r6,64(sp)
  80a91c:	d9001617 	ldw	r4,88(sp)
  80a920:	080da040 	call	80da04 <__pow5mult>
  80a924:	d8800715 	stw	r2,28(sp)
  80a928:	003e4306 	br	80a238 <_dtoa_r+0x848>
  80a92c:	d9800f17 	ldw	r6,60(sp)
  80a930:	d8800d17 	ldw	r2,52(sp)
  80a934:	d9800315 	stw	r6,12(sp)
  80a938:	d8800415 	stw	r2,16(sp)
  80a93c:	d8c00b17 	ldw	r3,44(sp)
  80a940:	1805003a 	cmpeq	r2,r3,zero
  80a944:	1000e21e 	bne	r2,zero,80acd0 <_dtoa_r+0x12e0>
  80a948:	d9000317 	ldw	r4,12(sp)
  80a94c:	0005883a 	mov	r2,zero
  80a950:	00cff834 	movhi	r3,16352
  80a954:	200c90fa 	slli	r6,r4,3
  80a958:	010020b4 	movhi	r4,130
  80a95c:	212f7a04 	addi	r4,r4,-16920
  80a960:	180b883a 	mov	r5,r3
  80a964:	310d883a 	add	r6,r6,r4
  80a968:	327fff17 	ldw	r9,-4(r6)
  80a96c:	323ffe17 	ldw	r8,-8(r6)
  80a970:	1009883a 	mov	r4,r2
  80a974:	480f883a 	mov	r7,r9
  80a978:	400d883a 	mov	r6,r8
  80a97c:	080644c0 	call	80644c <__divdf3>
  80a980:	180b883a 	mov	r5,r3
  80a984:	b00d883a 	mov	r6,r22
  80a988:	b80f883a 	mov	r7,r23
  80a98c:	1009883a 	mov	r4,r2
  80a990:	0805f940 	call	805f94 <__subdf3>
  80a994:	a80b883a 	mov	r5,r21
  80a998:	a009883a 	mov	r4,r20
  80a99c:	d8c01915 	stw	r3,100(sp)
  80a9a0:	d8801815 	stw	r2,96(sp)
  80a9a4:	080f6ec0 	call	80f6ec <__fixdfsi>
  80a9a8:	1009883a 	mov	r4,r2
  80a9ac:	1027883a 	mov	r19,r2
  80a9b0:	080694c0 	call	80694c <__floatsidf>
  80a9b4:	a80b883a 	mov	r5,r21
  80a9b8:	a009883a 	mov	r4,r20
  80a9bc:	180f883a 	mov	r7,r3
  80a9c0:	100d883a 	mov	r6,r2
  80a9c4:	0805f940 	call	805f94 <__subdf3>
  80a9c8:	d9801817 	ldw	r6,96(sp)
  80a9cc:	1823883a 	mov	r17,r3
  80a9d0:	d8801415 	stw	r2,80(sp)
  80a9d4:	302d883a 	mov	r22,r6
  80a9d8:	d9800517 	ldw	r6,20(sp)
  80a9dc:	9cc00c04 	addi	r19,r19,48
  80a9e0:	dc401515 	stw	r17,84(sp)
  80a9e4:	d8c01917 	ldw	r3,100(sp)
  80a9e8:	34c00005 	stb	r19,0(r6)
  80a9ec:	d8800517 	ldw	r2,20(sp)
  80a9f0:	d9401917 	ldw	r5,100(sp)
  80a9f4:	d9801417 	ldw	r6,80(sp)
  80a9f8:	b009883a 	mov	r4,r22
  80a9fc:	880f883a 	mov	r7,r17
  80aa00:	182f883a 	mov	r23,r3
  80aa04:	17000044 	addi	fp,r2,1
  80aa08:	08067b40 	call	8067b4 <__gtdf2>
  80aa0c:	00804e16 	blt	zero,r2,80ab48 <_dtoa_r+0x1158>
  80aa10:	d9801417 	ldw	r6,80(sp)
  80aa14:	0005883a 	mov	r2,zero
  80aa18:	00cffc34 	movhi	r3,16368
  80aa1c:	180b883a 	mov	r5,r3
  80aa20:	880f883a 	mov	r7,r17
  80aa24:	1009883a 	mov	r4,r2
  80aa28:	0805f940 	call	805f94 <__subdf3>
  80aa2c:	d9401917 	ldw	r5,100(sp)
  80aa30:	180f883a 	mov	r7,r3
  80aa34:	b009883a 	mov	r4,r22
  80aa38:	100d883a 	mov	r6,r2
  80aa3c:	08067b40 	call	8067b4 <__gtdf2>
  80aa40:	00bda216 	blt	zero,r2,80a0cc <_dtoa_r+0x6dc>
  80aa44:	d8c00317 	ldw	r3,12(sp)
  80aa48:	00800044 	movi	r2,1
  80aa4c:	10c01216 	blt	r2,r3,80aa98 <_dtoa_r+0x10a8>
  80aa50:	003d4506 	br	809f68 <_dtoa_r+0x578>
  80aa54:	d9801417 	ldw	r6,80(sp)
  80aa58:	0005883a 	mov	r2,zero
  80aa5c:	00cffc34 	movhi	r3,16368
  80aa60:	180b883a 	mov	r5,r3
  80aa64:	880f883a 	mov	r7,r17
  80aa68:	1009883a 	mov	r4,r2
  80aa6c:	0805f940 	call	805f94 <__subdf3>
  80aa70:	d9c01b17 	ldw	r7,108(sp)
  80aa74:	180b883a 	mov	r5,r3
  80aa78:	1009883a 	mov	r4,r2
  80aa7c:	b00d883a 	mov	r6,r22
  80aa80:	080683c0 	call	80683c <__ltdf2>
  80aa84:	103d9116 	blt	r2,zero,80a0cc <_dtoa_r+0x6dc>
  80aa88:	d9800517 	ldw	r6,20(sp)
  80aa8c:	d9000317 	ldw	r4,12(sp)
  80aa90:	3105883a 	add	r2,r6,r4
  80aa94:	e0bd3426 	beq	fp,r2,809f68 <_dtoa_r+0x578>
  80aa98:	04500934 	movhi	r17,16420
  80aa9c:	0021883a 	mov	r16,zero
  80aaa0:	b80b883a 	mov	r5,r23
  80aaa4:	b009883a 	mov	r4,r22
  80aaa8:	800d883a 	mov	r6,r16
  80aaac:	880f883a 	mov	r7,r17
  80aab0:	08060880 	call	806088 <__muldf3>
  80aab4:	d9401517 	ldw	r5,84(sp)
  80aab8:	d9001417 	ldw	r4,80(sp)
  80aabc:	880f883a 	mov	r7,r17
  80aac0:	000d883a 	mov	r6,zero
  80aac4:	d8801a15 	stw	r2,104(sp)
  80aac8:	d8c01b15 	stw	r3,108(sp)
  80aacc:	08060880 	call	806088 <__muldf3>
  80aad0:	180b883a 	mov	r5,r3
  80aad4:	1009883a 	mov	r4,r2
  80aad8:	1823883a 	mov	r17,r3
  80aadc:	1021883a 	mov	r16,r2
  80aae0:	080f6ec0 	call	80f6ec <__fixdfsi>
  80aae4:	1009883a 	mov	r4,r2
  80aae8:	102b883a 	mov	r21,r2
  80aaec:	080694c0 	call	80694c <__floatsidf>
  80aaf0:	880b883a 	mov	r5,r17
  80aaf4:	8009883a 	mov	r4,r16
  80aaf8:	180f883a 	mov	r7,r3
  80aafc:	100d883a 	mov	r6,r2
  80ab00:	0805f940 	call	805f94 <__subdf3>
  80ab04:	1021883a 	mov	r16,r2
  80ab08:	d9001b17 	ldw	r4,108(sp)
  80ab0c:	1823883a 	mov	r17,r3
  80ab10:	dc001415 	stw	r16,80(sp)
  80ab14:	ad400c04 	addi	r21,r21,48
  80ab18:	dc401515 	stw	r17,84(sp)
  80ab1c:	d8801a17 	ldw	r2,104(sp)
  80ab20:	e5400005 	stb	r21,0(fp)
  80ab24:	202f883a 	mov	r23,r4
  80ab28:	d9c01b17 	ldw	r7,108(sp)
  80ab2c:	d9001417 	ldw	r4,80(sp)
  80ab30:	880b883a 	mov	r5,r17
  80ab34:	100d883a 	mov	r6,r2
  80ab38:	102d883a 	mov	r22,r2
  80ab3c:	e7000044 	addi	fp,fp,1
  80ab40:	080683c0 	call	80683c <__ltdf2>
  80ab44:	103fc30e 	bge	r2,zero,80aa54 <_dtoa_r+0x1064>
  80ab48:	d9000417 	ldw	r4,16(sp)
  80ab4c:	d9000d15 	stw	r4,52(sp)
  80ab50:	003d7106 	br	80a118 <_dtoa_r+0x728>
  80ab54:	d9801717 	ldw	r6,92(sp)
  80ab58:	00800084 	movi	r2,2
  80ab5c:	11bde60e 	bge	r2,r6,80a2f8 <_dtoa_r+0x908>
  80ab60:	203cfb1e 	bne	r4,zero,809f50 <_dtoa_r+0x560>
  80ab64:	d9001617 	ldw	r4,88(sp)
  80ab68:	900b883a 	mov	r5,r18
  80ab6c:	01800144 	movi	r6,5
  80ab70:	000f883a 	mov	r7,zero
  80ab74:	080d8d80 	call	80d8d8 <__multadd>
  80ab78:	d9000717 	ldw	r4,28(sp)
  80ab7c:	100b883a 	mov	r5,r2
  80ab80:	1025883a 	mov	r18,r2
  80ab84:	080cd140 	call	80cd14 <__mcmp>
  80ab88:	00bcf10e 	bge	zero,r2,809f50 <_dtoa_r+0x560>
  80ab8c:	d8c00d17 	ldw	r3,52(sp)
  80ab90:	d9000517 	ldw	r4,20(sp)
  80ab94:	d8000615 	stw	zero,24(sp)
  80ab98:	18c00044 	addi	r3,r3,1
  80ab9c:	d8c00d15 	stw	r3,52(sp)
  80aba0:	00800c44 	movi	r2,49
  80aba4:	27000044 	addi	fp,r4,1
  80aba8:	20800005 	stb	r2,0(r4)
  80abac:	003e8906 	br	80a5d4 <_dtoa_r+0xbe4>
  80abb0:	d8c00517 	ldw	r3,20(sp)
  80abb4:	003bc206 	br	809ac0 <_dtoa_r+0xd0>
  80abb8:	018020b4 	movhi	r6,130
  80abbc:	31afac04 	addi	r6,r6,-16720
  80abc0:	30c00917 	ldw	r3,36(r6)
  80abc4:	30800817 	ldw	r2,32(r6)
  80abc8:	d9001217 	ldw	r4,72(sp)
  80abcc:	d9401317 	ldw	r5,76(sp)
  80abd0:	180f883a 	mov	r7,r3
  80abd4:	100d883a 	mov	r6,r2
  80abd8:	080644c0 	call	80644c <__divdf3>
  80abdc:	948003cc 	andi	r18,r18,15
  80abe0:	058000c4 	movi	r22,3
  80abe4:	1029883a 	mov	r20,r2
  80abe8:	182b883a 	mov	r21,r3
  80abec:	003c8906 	br	809e14 <_dtoa_r+0x424>
  80abf0:	d9001017 	ldw	r4,64(sp)
  80abf4:	d9800917 	ldw	r6,36(sp)
  80abf8:	0025883a 	mov	r18,zero
  80abfc:	1105c83a 	sub	r2,r2,r4
  80ac00:	2089883a 	add	r4,r4,r2
  80ac04:	308d883a 	add	r6,r6,r2
  80ac08:	d9001015 	stw	r4,64(sp)
  80ac0c:	d9800915 	stw	r6,36(sp)
  80ac10:	003e3206 	br	80a4dc <_dtoa_r+0xaec>
  80ac14:	28800044 	addi	r2,r5,1
  80ac18:	27000044 	addi	fp,r4,1
  80ac1c:	20800005 	stb	r2,0(r4)
  80ac20:	003e6c06 	br	80a5d4 <_dtoa_r+0xbe4>
  80ac24:	d8800f17 	ldw	r2,60(sp)
  80ac28:	00bce016 	blt	zero,r2,809fac <_dtoa_r+0x5bc>
  80ac2c:	d9800f17 	ldw	r6,60(sp)
  80ac30:	303cc51e 	bne	r6,zero,809f48 <_dtoa_r+0x558>
  80ac34:	0005883a 	mov	r2,zero
  80ac38:	00d00534 	movhi	r3,16404
  80ac3c:	980b883a 	mov	r5,r19
  80ac40:	180f883a 	mov	r7,r3
  80ac44:	9009883a 	mov	r4,r18
  80ac48:	100d883a 	mov	r6,r2
  80ac4c:	08060880 	call	806088 <__muldf3>
  80ac50:	180b883a 	mov	r5,r3
  80ac54:	a80f883a 	mov	r7,r21
  80ac58:	1009883a 	mov	r4,r2
  80ac5c:	a00d883a 	mov	r6,r20
  80ac60:	080f6640 	call	80f664 <__gedf2>
  80ac64:	103cb80e 	bge	r2,zero,809f48 <_dtoa_r+0x558>
  80ac68:	0027883a 	mov	r19,zero
  80ac6c:	0025883a 	mov	r18,zero
  80ac70:	003fc606 	br	80ab8c <_dtoa_r+0x119c>
  80ac74:	99400117 	ldw	r5,4(r19)
  80ac78:	d9001617 	ldw	r4,88(sp)
  80ac7c:	080d1380 	call	80d138 <_Balloc>
  80ac80:	99800417 	ldw	r6,16(r19)
  80ac84:	11000304 	addi	r4,r2,12
  80ac88:	99400304 	addi	r5,r19,12
  80ac8c:	318d883a 	add	r6,r6,r6
  80ac90:	318d883a 	add	r6,r6,r6
  80ac94:	31800204 	addi	r6,r6,8
  80ac98:	1023883a 	mov	r17,r2
  80ac9c:	080c9a00 	call	80c9a0 <memcpy>
  80aca0:	d9001617 	ldw	r4,88(sp)
  80aca4:	880b883a 	mov	r5,r17
  80aca8:	01800044 	movi	r6,1
  80acac:	080d4fc0 	call	80d4fc <__lshift>
  80acb0:	100b883a 	mov	r5,r2
  80acb4:	003d9c06 	br	80a328 <_dtoa_r+0x938>
  80acb8:	00800e44 	movi	r2,57
  80acbc:	b8807026 	beq	r23,r2,80ae80 <_dtoa_r+0x1490>
  80acc0:	b8800044 	addi	r2,r23,1
  80acc4:	b7000044 	addi	fp,r22,1
  80acc8:	b0800005 	stb	r2,0(r22)
  80accc:	003e4106 	br	80a5d4 <_dtoa_r+0xbe4>
  80acd0:	d8800317 	ldw	r2,12(sp)
  80acd4:	018020b4 	movhi	r6,130
  80acd8:	31af7a04 	addi	r6,r6,-16920
  80acdc:	b009883a 	mov	r4,r22
  80ace0:	100e90fa 	slli	r7,r2,3
  80ace4:	b80b883a 	mov	r5,r23
  80ace8:	398f883a 	add	r7,r7,r6
  80acec:	38bffe17 	ldw	r2,-8(r7)
  80acf0:	d9800517 	ldw	r6,20(sp)
  80acf4:	38ffff17 	ldw	r3,-4(r7)
  80acf8:	37000044 	addi	fp,r6,1
  80acfc:	180f883a 	mov	r7,r3
  80ad00:	100d883a 	mov	r6,r2
  80ad04:	08060880 	call	806088 <__muldf3>
  80ad08:	a80b883a 	mov	r5,r21
  80ad0c:	a009883a 	mov	r4,r20
  80ad10:	182f883a 	mov	r23,r3
  80ad14:	102d883a 	mov	r22,r2
  80ad18:	080f6ec0 	call	80f6ec <__fixdfsi>
  80ad1c:	1009883a 	mov	r4,r2
  80ad20:	1027883a 	mov	r19,r2
  80ad24:	080694c0 	call	80694c <__floatsidf>
  80ad28:	a80b883a 	mov	r5,r21
  80ad2c:	a009883a 	mov	r4,r20
  80ad30:	180f883a 	mov	r7,r3
  80ad34:	100d883a 	mov	r6,r2
  80ad38:	0805f940 	call	805f94 <__subdf3>
  80ad3c:	180b883a 	mov	r5,r3
  80ad40:	d8c00517 	ldw	r3,20(sp)
  80ad44:	9cc00c04 	addi	r19,r19,48
  80ad48:	1009883a 	mov	r4,r2
  80ad4c:	1cc00005 	stb	r19,0(r3)
  80ad50:	2021883a 	mov	r16,r4
  80ad54:	d9000317 	ldw	r4,12(sp)
  80ad58:	00800044 	movi	r2,1
  80ad5c:	2823883a 	mov	r17,r5
  80ad60:	20802226 	beq	r4,r2,80adec <_dtoa_r+0x13fc>
  80ad64:	1029883a 	mov	r20,r2
  80ad68:	0005883a 	mov	r2,zero
  80ad6c:	00d00934 	movhi	r3,16420
  80ad70:	180f883a 	mov	r7,r3
  80ad74:	100d883a 	mov	r6,r2
  80ad78:	880b883a 	mov	r5,r17
  80ad7c:	8009883a 	mov	r4,r16
  80ad80:	08060880 	call	806088 <__muldf3>
  80ad84:	180b883a 	mov	r5,r3
  80ad88:	1009883a 	mov	r4,r2
  80ad8c:	1823883a 	mov	r17,r3
  80ad90:	1021883a 	mov	r16,r2
  80ad94:	080f6ec0 	call	80f6ec <__fixdfsi>
  80ad98:	1009883a 	mov	r4,r2
  80ad9c:	102b883a 	mov	r21,r2
  80ada0:	080694c0 	call	80694c <__floatsidf>
  80ada4:	880b883a 	mov	r5,r17
  80ada8:	8009883a 	mov	r4,r16
  80adac:	180f883a 	mov	r7,r3
  80adb0:	100d883a 	mov	r6,r2
  80adb4:	0805f940 	call	805f94 <__subdf3>
  80adb8:	180b883a 	mov	r5,r3
  80adbc:	d8c00517 	ldw	r3,20(sp)
  80adc0:	1009883a 	mov	r4,r2
  80adc4:	ad400c04 	addi	r21,r21,48
  80adc8:	1d05883a 	add	r2,r3,r20
  80adcc:	15400005 	stb	r21,0(r2)
  80add0:	2021883a 	mov	r16,r4
  80add4:	d9000317 	ldw	r4,12(sp)
  80add8:	a5000044 	addi	r20,r20,1
  80addc:	2823883a 	mov	r17,r5
  80ade0:	a13fe11e 	bne	r20,r4,80ad68 <_dtoa_r+0x1378>
  80ade4:	e505883a 	add	r2,fp,r20
  80ade8:	173fffc4 	addi	fp,r2,-1
  80adec:	0025883a 	mov	r18,zero
  80adf0:	04cff834 	movhi	r19,16352
  80adf4:	b009883a 	mov	r4,r22
  80adf8:	b80b883a 	mov	r5,r23
  80adfc:	900d883a 	mov	r6,r18
  80ae00:	980f883a 	mov	r7,r19
  80ae04:	08060140 	call	806014 <__adddf3>
  80ae08:	180b883a 	mov	r5,r3
  80ae0c:	1009883a 	mov	r4,r2
  80ae10:	800d883a 	mov	r6,r16
  80ae14:	880f883a 	mov	r7,r17
  80ae18:	080683c0 	call	80683c <__ltdf2>
  80ae1c:	103cab16 	blt	r2,zero,80a0cc <_dtoa_r+0x6dc>
  80ae20:	0009883a 	mov	r4,zero
  80ae24:	980b883a 	mov	r5,r19
  80ae28:	b80f883a 	mov	r7,r23
  80ae2c:	b00d883a 	mov	r6,r22
  80ae30:	0805f940 	call	805f94 <__subdf3>
  80ae34:	180b883a 	mov	r5,r3
  80ae38:	880f883a 	mov	r7,r17
  80ae3c:	1009883a 	mov	r4,r2
  80ae40:	800d883a 	mov	r6,r16
  80ae44:	08067b40 	call	8067b4 <__gtdf2>
  80ae48:	00bc470e 	bge	zero,r2,809f68 <_dtoa_r+0x578>
  80ae4c:	00c00c04 	movi	r3,48
  80ae50:	e73fffc4 	addi	fp,fp,-1
  80ae54:	e0800007 	ldb	r2,0(fp)
  80ae58:	10fffd26 	beq	r2,r3,80ae50 <_dtoa_r+0x1460>
  80ae5c:	d9800417 	ldw	r6,16(sp)
  80ae60:	e7000044 	addi	fp,fp,1
  80ae64:	d9800d15 	stw	r6,52(sp)
  80ae68:	003cab06 	br	80a118 <_dtoa_r+0x728>
  80ae6c:	d8c00f17 	ldw	r3,60(sp)
  80ae70:	d9001117 	ldw	r4,68(sp)
  80ae74:	20e1c83a 	sub	r16,r4,r3
  80ae78:	0007883a 	mov	r3,zero
  80ae7c:	003d9b06 	br	80a4ec <_dtoa_r+0xafc>
  80ae80:	00800e44 	movi	r2,57
  80ae84:	b0800005 	stb	r2,0(r22)
  80ae88:	b5800044 	addi	r22,r22,1
  80ae8c:	003dc106 	br	80a594 <_dtoa_r+0xba4>
  80ae90:	05800084 	movi	r22,2
  80ae94:	003bf706 	br	809e74 <_dtoa_r+0x484>
  80ae98:	d9000f17 	ldw	r4,60(sp)
  80ae9c:	013c000e 	bge	zero,r4,809ea0 <_dtoa_r+0x4b0>
  80aea0:	d9800e17 	ldw	r6,56(sp)
  80aea4:	01bc300e 	bge	zero,r6,809f68 <_dtoa_r+0x578>
  80aea8:	0005883a 	mov	r2,zero
  80aeac:	00d00934 	movhi	r3,16420
  80aeb0:	a80b883a 	mov	r5,r21
  80aeb4:	180f883a 	mov	r7,r3
  80aeb8:	a009883a 	mov	r4,r20
  80aebc:	100d883a 	mov	r6,r2
  80aec0:	08060880 	call	806088 <__muldf3>
  80aec4:	b1000044 	addi	r4,r22,1
  80aec8:	1021883a 	mov	r16,r2
  80aecc:	1823883a 	mov	r17,r3
  80aed0:	080694c0 	call	80694c <__floatsidf>
  80aed4:	880b883a 	mov	r5,r17
  80aed8:	8009883a 	mov	r4,r16
  80aedc:	180f883a 	mov	r7,r3
  80aee0:	100d883a 	mov	r6,r2
  80aee4:	08060880 	call	806088 <__muldf3>
  80aee8:	0011883a 	mov	r8,zero
  80aeec:	02500734 	movhi	r9,16412
  80aef0:	180b883a 	mov	r5,r3
  80aef4:	480f883a 	mov	r7,r9
  80aef8:	1009883a 	mov	r4,r2
  80aefc:	400d883a 	mov	r6,r8
  80af00:	08060140 	call	806014 <__adddf3>
  80af04:	102d883a 	mov	r22,r2
  80af08:	00bf3034 	movhi	r2,64704
  80af0c:	10ef883a 	add	r23,r2,r3
  80af10:	d8800d17 	ldw	r2,52(sp)
  80af14:	d8c00e17 	ldw	r3,56(sp)
  80af18:	8029883a 	mov	r20,r16
  80af1c:	10bfffc4 	addi	r2,r2,-1
  80af20:	882b883a 	mov	r21,r17
  80af24:	d8800415 	stw	r2,16(sp)
  80af28:	d8c00315 	stw	r3,12(sp)
  80af2c:	003e8306 	br	80a93c <_dtoa_r+0xf4c>
  80af30:	d8800117 	ldw	r2,4(sp)
  80af34:	dc001117 	ldw	r16,68(sp)
  80af38:	dc801017 	ldw	r18,64(sp)
  80af3c:	00c00d84 	movi	r3,54
  80af40:	1887c83a 	sub	r3,r3,r2
  80af44:	003d6906 	br	80a4ec <_dtoa_r+0xafc>
  80af48:	01800044 	movi	r6,1
  80af4c:	3021883a 	mov	r16,r6
  80af50:	d9800f15 	stw	r6,60(sp)
  80af54:	d9802615 	stw	r6,152(sp)
  80af58:	d9800e15 	stw	r6,56(sp)
  80af5c:	003b9306 	br	809dac <_dtoa_r+0x3bc>
  80af60:	b021883a 	mov	r16,r22
  80af64:	dd800f15 	stw	r22,60(sp)
  80af68:	003b9006 	br	809dac <_dtoa_r+0x3bc>
  80af6c:	103e221e 	bne	r2,zero,80a7f8 <_dtoa_r+0xe08>
  80af70:	b880004c 	andi	r2,r23,1
  80af74:	1005003a 	cmpeq	r2,r2,zero
  80af78:	103e1f1e 	bne	r2,zero,80a7f8 <_dtoa_r+0xe08>
  80af7c:	003e1b06 	br	80a7ec <_dtoa_r+0xdfc>
  80af80:	d9001617 	ldw	r4,88(sp)
  80af84:	980b883a 	mov	r5,r19
  80af88:	01800284 	movi	r6,10
  80af8c:	000f883a 	mov	r7,zero
  80af90:	080d8d80 	call	80d8d8 <__multadd>
  80af94:	d8c00e17 	ldw	r3,56(sp)
  80af98:	1027883a 	mov	r19,r2
  80af9c:	d8c00f15 	stw	r3,60(sp)
  80afa0:	003cd306 	br	80a2f0 <_dtoa_r+0x900>

0080afa4 <_fflush_r>:
  80afa4:	defffb04 	addi	sp,sp,-20
  80afa8:	dcc00315 	stw	r19,12(sp)
  80afac:	dc800215 	stw	r18,8(sp)
  80afb0:	dfc00415 	stw	ra,16(sp)
  80afb4:	dc400115 	stw	r17,4(sp)
  80afb8:	dc000015 	stw	r16,0(sp)
  80afbc:	2027883a 	mov	r19,r4
  80afc0:	2825883a 	mov	r18,r5
  80afc4:	20000226 	beq	r4,zero,80afd0 <_fflush_r+0x2c>
  80afc8:	20800e17 	ldw	r2,56(r4)
  80afcc:	10005626 	beq	r2,zero,80b128 <_fflush_r+0x184>
  80afd0:	9100030b 	ldhu	r4,12(r18)
  80afd4:	20ffffcc 	andi	r3,r4,65535
  80afd8:	18e0001c 	xori	r3,r3,32768
  80afdc:	18e00004 	addi	r3,r3,-32768
  80afe0:	1880020c 	andi	r2,r3,8
  80afe4:	1000261e 	bne	r2,zero,80b080 <_fflush_r+0xdc>
  80afe8:	90c00117 	ldw	r3,4(r18)
  80afec:	20820014 	ori	r2,r4,2048
  80aff0:	9080030d 	sth	r2,12(r18)
  80aff4:	1009883a 	mov	r4,r2
  80aff8:	00c0400e 	bge	zero,r3,80b0fc <_fflush_r+0x158>
  80affc:	92000a17 	ldw	r8,40(r18)
  80b000:	40004026 	beq	r8,zero,80b104 <_fflush_r+0x160>
  80b004:	2084000c 	andi	r2,r4,4096
  80b008:	10005326 	beq	r2,zero,80b158 <_fflush_r+0x1b4>
  80b00c:	94001417 	ldw	r16,80(r18)
  80b010:	9080030b 	ldhu	r2,12(r18)
  80b014:	1080010c 	andi	r2,r2,4
  80b018:	1000481e 	bne	r2,zero,80b13c <_fflush_r+0x198>
  80b01c:	91400717 	ldw	r5,28(r18)
  80b020:	9809883a 	mov	r4,r19
  80b024:	800d883a 	mov	r6,r16
  80b028:	000f883a 	mov	r7,zero
  80b02c:	403ee83a 	callr	r8
  80b030:	8080261e 	bne	r16,r2,80b0cc <_fflush_r+0x128>
  80b034:	9080030b 	ldhu	r2,12(r18)
  80b038:	91000417 	ldw	r4,16(r18)
  80b03c:	90000115 	stw	zero,4(r18)
  80b040:	10bdffcc 	andi	r2,r2,63487
  80b044:	10ffffcc 	andi	r3,r2,65535
  80b048:	18c4000c 	andi	r3,r3,4096
  80b04c:	9080030d 	sth	r2,12(r18)
  80b050:	91000015 	stw	r4,0(r18)
  80b054:	18002b26 	beq	r3,zero,80b104 <_fflush_r+0x160>
  80b058:	0007883a 	mov	r3,zero
  80b05c:	1805883a 	mov	r2,r3
  80b060:	94001415 	stw	r16,80(r18)
  80b064:	dfc00417 	ldw	ra,16(sp)
  80b068:	dcc00317 	ldw	r19,12(sp)
  80b06c:	dc800217 	ldw	r18,8(sp)
  80b070:	dc400117 	ldw	r17,4(sp)
  80b074:	dc000017 	ldw	r16,0(sp)
  80b078:	dec00504 	addi	sp,sp,20
  80b07c:	f800283a 	ret
  80b080:	94400417 	ldw	r17,16(r18)
  80b084:	88001f26 	beq	r17,zero,80b104 <_fflush_r+0x160>
  80b088:	90800017 	ldw	r2,0(r18)
  80b08c:	18c000cc 	andi	r3,r3,3
  80b090:	94400015 	stw	r17,0(r18)
  80b094:	1461c83a 	sub	r16,r2,r17
  80b098:	18002526 	beq	r3,zero,80b130 <_fflush_r+0x18c>
  80b09c:	0005883a 	mov	r2,zero
  80b0a0:	90800215 	stw	r2,8(r18)
  80b0a4:	0400170e 	bge	zero,r16,80b104 <_fflush_r+0x160>
  80b0a8:	90c00917 	ldw	r3,36(r18)
  80b0ac:	91400717 	ldw	r5,28(r18)
  80b0b0:	880d883a 	mov	r6,r17
  80b0b4:	800f883a 	mov	r7,r16
  80b0b8:	9809883a 	mov	r4,r19
  80b0bc:	183ee83a 	callr	r3
  80b0c0:	88a3883a 	add	r17,r17,r2
  80b0c4:	80a1c83a 	sub	r16,r16,r2
  80b0c8:	00bff616 	blt	zero,r2,80b0a4 <_fflush_r+0x100>
  80b0cc:	9080030b 	ldhu	r2,12(r18)
  80b0d0:	00ffffc4 	movi	r3,-1
  80b0d4:	10801014 	ori	r2,r2,64
  80b0d8:	9080030d 	sth	r2,12(r18)
  80b0dc:	1805883a 	mov	r2,r3
  80b0e0:	dfc00417 	ldw	ra,16(sp)
  80b0e4:	dcc00317 	ldw	r19,12(sp)
  80b0e8:	dc800217 	ldw	r18,8(sp)
  80b0ec:	dc400117 	ldw	r17,4(sp)
  80b0f0:	dc000017 	ldw	r16,0(sp)
  80b0f4:	dec00504 	addi	sp,sp,20
  80b0f8:	f800283a 	ret
  80b0fc:	90800f17 	ldw	r2,60(r18)
  80b100:	00bfbe16 	blt	zero,r2,80affc <_fflush_r+0x58>
  80b104:	0007883a 	mov	r3,zero
  80b108:	1805883a 	mov	r2,r3
  80b10c:	dfc00417 	ldw	ra,16(sp)
  80b110:	dcc00317 	ldw	r19,12(sp)
  80b114:	dc800217 	ldw	r18,8(sp)
  80b118:	dc400117 	ldw	r17,4(sp)
  80b11c:	dc000017 	ldw	r16,0(sp)
  80b120:	dec00504 	addi	sp,sp,20
  80b124:	f800283a 	ret
  80b128:	080b23c0 	call	80b23c <__sinit>
  80b12c:	003fa806 	br	80afd0 <_fflush_r+0x2c>
  80b130:	90800517 	ldw	r2,20(r18)
  80b134:	90800215 	stw	r2,8(r18)
  80b138:	003fda06 	br	80b0a4 <_fflush_r+0x100>
  80b13c:	90800117 	ldw	r2,4(r18)
  80b140:	90c00c17 	ldw	r3,48(r18)
  80b144:	80a1c83a 	sub	r16,r16,r2
  80b148:	183fb426 	beq	r3,zero,80b01c <_fflush_r+0x78>
  80b14c:	90800f17 	ldw	r2,60(r18)
  80b150:	80a1c83a 	sub	r16,r16,r2
  80b154:	003fb106 	br	80b01c <_fflush_r+0x78>
  80b158:	91400717 	ldw	r5,28(r18)
  80b15c:	9809883a 	mov	r4,r19
  80b160:	000d883a 	mov	r6,zero
  80b164:	01c00044 	movi	r7,1
  80b168:	403ee83a 	callr	r8
  80b16c:	1021883a 	mov	r16,r2
  80b170:	00bfffc4 	movi	r2,-1
  80b174:	80800226 	beq	r16,r2,80b180 <_fflush_r+0x1dc>
  80b178:	92000a17 	ldw	r8,40(r18)
  80b17c:	003fa406 	br	80b010 <_fflush_r+0x6c>
  80b180:	98c00017 	ldw	r3,0(r19)
  80b184:	00800744 	movi	r2,29
  80b188:	18bfde26 	beq	r3,r2,80b104 <_fflush_r+0x160>
  80b18c:	9080030b 	ldhu	r2,12(r18)
  80b190:	8007883a 	mov	r3,r16
  80b194:	10801014 	ori	r2,r2,64
  80b198:	9080030d 	sth	r2,12(r18)
  80b19c:	003fcf06 	br	80b0dc <_fflush_r+0x138>

0080b1a0 <fflush>:
  80b1a0:	01402074 	movhi	r5,129
  80b1a4:	296be904 	addi	r5,r5,-20572
  80b1a8:	2007883a 	mov	r3,r4
  80b1ac:	20000526 	beq	r4,zero,80b1c4 <fflush+0x24>
  80b1b0:	008020b4 	movhi	r2,130
  80b1b4:	10b6d904 	addi	r2,r2,-9372
  80b1b8:	11000017 	ldw	r4,0(r2)
  80b1bc:	180b883a 	mov	r5,r3
  80b1c0:	080afa41 	jmpi	80afa4 <_fflush_r>
  80b1c4:	008020b4 	movhi	r2,130
  80b1c8:	10b6da04 	addi	r2,r2,-9368
  80b1cc:	11000017 	ldw	r4,0(r2)
  80b1d0:	080bda41 	jmpi	80bda4 <_fwalk_reent>

0080b1d4 <std>:
  80b1d4:	00802074 	movhi	r2,129
  80b1d8:	10b8ba04 	addi	r2,r2,-7448
  80b1dc:	20800b15 	stw	r2,44(r4)
  80b1e0:	00802074 	movhi	r2,129
  80b1e4:	10b8f504 	addi	r2,r2,-7212
  80b1e8:	20800815 	stw	r2,32(r4)
  80b1ec:	00c02074 	movhi	r3,129
  80b1f0:	18f8d604 	addi	r3,r3,-7336
  80b1f4:	00802074 	movhi	r2,129
  80b1f8:	10b8bc04 	addi	r2,r2,-7440
  80b1fc:	2140030d 	sth	r5,12(r4)
  80b200:	2180038d 	sth	r6,14(r4)
  80b204:	20c00915 	stw	r3,36(r4)
  80b208:	20800a15 	stw	r2,40(r4)
  80b20c:	20000015 	stw	zero,0(r4)
  80b210:	20000115 	stw	zero,4(r4)
  80b214:	20000215 	stw	zero,8(r4)
  80b218:	20000415 	stw	zero,16(r4)
  80b21c:	20000515 	stw	zero,20(r4)
  80b220:	20000615 	stw	zero,24(r4)
  80b224:	21000715 	stw	r4,28(r4)
  80b228:	f800283a 	ret

0080b22c <__sfp_lock_acquire>:
  80b22c:	f800283a 	ret

0080b230 <__sfp_lock_release>:
  80b230:	f800283a 	ret

0080b234 <__sinit_lock_acquire>:
  80b234:	f800283a 	ret

0080b238 <__sinit_lock_release>:
  80b238:	f800283a 	ret

0080b23c <__sinit>:
  80b23c:	20800e17 	ldw	r2,56(r4)
  80b240:	defffd04 	addi	sp,sp,-12
  80b244:	dc400115 	stw	r17,4(sp)
  80b248:	dc000015 	stw	r16,0(sp)
  80b24c:	dfc00215 	stw	ra,8(sp)
  80b250:	04400044 	movi	r17,1
  80b254:	01400104 	movi	r5,4
  80b258:	000d883a 	mov	r6,zero
  80b25c:	2021883a 	mov	r16,r4
  80b260:	2200bb04 	addi	r8,r4,748
  80b264:	200f883a 	mov	r7,r4
  80b268:	10000526 	beq	r2,zero,80b280 <__sinit+0x44>
  80b26c:	dfc00217 	ldw	ra,8(sp)
  80b270:	dc400117 	ldw	r17,4(sp)
  80b274:	dc000017 	ldw	r16,0(sp)
  80b278:	dec00304 	addi	sp,sp,12
  80b27c:	f800283a 	ret
  80b280:	21000117 	ldw	r4,4(r4)
  80b284:	00802074 	movhi	r2,129
  80b288:	10acc804 	addi	r2,r2,-19680
  80b28c:	00c000c4 	movi	r3,3
  80b290:	80800f15 	stw	r2,60(r16)
  80b294:	80c0b915 	stw	r3,740(r16)
  80b298:	8200ba15 	stw	r8,744(r16)
  80b29c:	84400e15 	stw	r17,56(r16)
  80b2a0:	8000b815 	stw	zero,736(r16)
  80b2a4:	080b1d40 	call	80b1d4 <std>
  80b2a8:	81000217 	ldw	r4,8(r16)
  80b2ac:	880d883a 	mov	r6,r17
  80b2b0:	800f883a 	mov	r7,r16
  80b2b4:	01400284 	movi	r5,10
  80b2b8:	080b1d40 	call	80b1d4 <std>
  80b2bc:	81000317 	ldw	r4,12(r16)
  80b2c0:	800f883a 	mov	r7,r16
  80b2c4:	01400484 	movi	r5,18
  80b2c8:	01800084 	movi	r6,2
  80b2cc:	dfc00217 	ldw	ra,8(sp)
  80b2d0:	dc400117 	ldw	r17,4(sp)
  80b2d4:	dc000017 	ldw	r16,0(sp)
  80b2d8:	dec00304 	addi	sp,sp,12
  80b2dc:	080b1d41 	jmpi	80b1d4 <std>

0080b2e0 <__fp_lock>:
  80b2e0:	0005883a 	mov	r2,zero
  80b2e4:	f800283a 	ret

0080b2e8 <__fp_unlock>:
  80b2e8:	0005883a 	mov	r2,zero
  80b2ec:	f800283a 	ret

0080b2f0 <__fp_unlock_all>:
  80b2f0:	008020b4 	movhi	r2,130
  80b2f4:	10b6d904 	addi	r2,r2,-9372
  80b2f8:	11000017 	ldw	r4,0(r2)
  80b2fc:	01402074 	movhi	r5,129
  80b300:	296cba04 	addi	r5,r5,-19736
  80b304:	080be6c1 	jmpi	80be6c <_fwalk>

0080b308 <__fp_lock_all>:
  80b308:	008020b4 	movhi	r2,130
  80b30c:	10b6d904 	addi	r2,r2,-9372
  80b310:	11000017 	ldw	r4,0(r2)
  80b314:	01402074 	movhi	r5,129
  80b318:	296cb804 	addi	r5,r5,-19744
  80b31c:	080be6c1 	jmpi	80be6c <_fwalk>

0080b320 <_cleanup_r>:
  80b320:	01402074 	movhi	r5,129
  80b324:	2979ec04 	addi	r5,r5,-6224
  80b328:	080be6c1 	jmpi	80be6c <_fwalk>

0080b32c <_cleanup>:
  80b32c:	008020b4 	movhi	r2,130
  80b330:	10b6da04 	addi	r2,r2,-9368
  80b334:	11000017 	ldw	r4,0(r2)
  80b338:	080b3201 	jmpi	80b320 <_cleanup_r>

0080b33c <__sfmoreglue>:
  80b33c:	defffc04 	addi	sp,sp,-16
  80b340:	dc000015 	stw	r16,0(sp)
  80b344:	2821883a 	mov	r16,r5
  80b348:	dc400115 	stw	r17,4(sp)
  80b34c:	01401704 	movi	r5,92
  80b350:	2023883a 	mov	r17,r4
  80b354:	8009883a 	mov	r4,r16
  80b358:	dfc00315 	stw	ra,12(sp)
  80b35c:	dcc00215 	stw	r19,8(sp)
  80b360:	0806c3c0 	call	806c3c <__mulsi3>
  80b364:	11400304 	addi	r5,r2,12
  80b368:	8809883a 	mov	r4,r17
  80b36c:	1027883a 	mov	r19,r2
  80b370:	080c17c0 	call	80c17c <_malloc_r>
  80b374:	10c00304 	addi	r3,r2,12
  80b378:	1023883a 	mov	r17,r2
  80b37c:	1809883a 	mov	r4,r3
  80b380:	980d883a 	mov	r6,r19
  80b384:	000b883a 	mov	r5,zero
  80b388:	10000b26 	beq	r2,zero,80b3b8 <__sfmoreglue+0x7c>
  80b38c:	14000115 	stw	r16,4(r2)
  80b390:	10c00215 	stw	r3,8(r2)
  80b394:	10000015 	stw	zero,0(r2)
  80b398:	080cb200 	call	80cb20 <memset>
  80b39c:	8805883a 	mov	r2,r17
  80b3a0:	dfc00317 	ldw	ra,12(sp)
  80b3a4:	dcc00217 	ldw	r19,8(sp)
  80b3a8:	dc400117 	ldw	r17,4(sp)
  80b3ac:	dc000017 	ldw	r16,0(sp)
  80b3b0:	dec00404 	addi	sp,sp,16
  80b3b4:	f800283a 	ret
  80b3b8:	0023883a 	mov	r17,zero
  80b3bc:	8805883a 	mov	r2,r17
  80b3c0:	dfc00317 	ldw	ra,12(sp)
  80b3c4:	dcc00217 	ldw	r19,8(sp)
  80b3c8:	dc400117 	ldw	r17,4(sp)
  80b3cc:	dc000017 	ldw	r16,0(sp)
  80b3d0:	dec00404 	addi	sp,sp,16
  80b3d4:	f800283a 	ret

0080b3d8 <__sfp>:
  80b3d8:	defffd04 	addi	sp,sp,-12
  80b3dc:	008020b4 	movhi	r2,130
  80b3e0:	10b6da04 	addi	r2,r2,-9368
  80b3e4:	dc000015 	stw	r16,0(sp)
  80b3e8:	14000017 	ldw	r16,0(r2)
  80b3ec:	dc400115 	stw	r17,4(sp)
  80b3f0:	dfc00215 	stw	ra,8(sp)
  80b3f4:	80800e17 	ldw	r2,56(r16)
  80b3f8:	2023883a 	mov	r17,r4
  80b3fc:	10002626 	beq	r2,zero,80b498 <__sfp+0xc0>
  80b400:	8400b804 	addi	r16,r16,736
  80b404:	80800117 	ldw	r2,4(r16)
  80b408:	81000217 	ldw	r4,8(r16)
  80b40c:	10ffffc4 	addi	r3,r2,-1
  80b410:	18000916 	blt	r3,zero,80b438 <__sfp+0x60>
  80b414:	2080030f 	ldh	r2,12(r4)
  80b418:	10000b26 	beq	r2,zero,80b448 <__sfp+0x70>
  80b41c:	017fffc4 	movi	r5,-1
  80b420:	00000206 	br	80b42c <__sfp+0x54>
  80b424:	2080030f 	ldh	r2,12(r4)
  80b428:	10000726 	beq	r2,zero,80b448 <__sfp+0x70>
  80b42c:	18ffffc4 	addi	r3,r3,-1
  80b430:	21001704 	addi	r4,r4,92
  80b434:	197ffb1e 	bne	r3,r5,80b424 <__sfp+0x4c>
  80b438:	80800017 	ldw	r2,0(r16)
  80b43c:	10001926 	beq	r2,zero,80b4a4 <__sfp+0xcc>
  80b440:	1021883a 	mov	r16,r2
  80b444:	003fef06 	br	80b404 <__sfp+0x2c>
  80b448:	00bfffc4 	movi	r2,-1
  80b44c:	00c00044 	movi	r3,1
  80b450:	2080038d 	sth	r2,14(r4)
  80b454:	20c0030d 	sth	r3,12(r4)
  80b458:	20000015 	stw	zero,0(r4)
  80b45c:	20000215 	stw	zero,8(r4)
  80b460:	20000115 	stw	zero,4(r4)
  80b464:	20000415 	stw	zero,16(r4)
  80b468:	20000515 	stw	zero,20(r4)
  80b46c:	20000615 	stw	zero,24(r4)
  80b470:	20000c15 	stw	zero,48(r4)
  80b474:	20000d15 	stw	zero,52(r4)
  80b478:	20001115 	stw	zero,68(r4)
  80b47c:	20001215 	stw	zero,72(r4)
  80b480:	2005883a 	mov	r2,r4
  80b484:	dfc00217 	ldw	ra,8(sp)
  80b488:	dc400117 	ldw	r17,4(sp)
  80b48c:	dc000017 	ldw	r16,0(sp)
  80b490:	dec00304 	addi	sp,sp,12
  80b494:	f800283a 	ret
  80b498:	8009883a 	mov	r4,r16
  80b49c:	080b23c0 	call	80b23c <__sinit>
  80b4a0:	003fd706 	br	80b400 <__sfp+0x28>
  80b4a4:	8809883a 	mov	r4,r17
  80b4a8:	01400104 	movi	r5,4
  80b4ac:	080b33c0 	call	80b33c <__sfmoreglue>
  80b4b0:	80800015 	stw	r2,0(r16)
  80b4b4:	103fe21e 	bne	r2,zero,80b440 <__sfp+0x68>
  80b4b8:	00800304 	movi	r2,12
  80b4bc:	0009883a 	mov	r4,zero
  80b4c0:	88800015 	stw	r2,0(r17)
  80b4c4:	003fee06 	br	80b480 <__sfp+0xa8>

0080b4c8 <_malloc_trim_r>:
  80b4c8:	defffb04 	addi	sp,sp,-20
  80b4cc:	dcc00315 	stw	r19,12(sp)
  80b4d0:	04c020b4 	movhi	r19,130
  80b4d4:	9cf12e04 	addi	r19,r19,-15176
  80b4d8:	dc800215 	stw	r18,8(sp)
  80b4dc:	dc400115 	stw	r17,4(sp)
  80b4e0:	dc000015 	stw	r16,0(sp)
  80b4e4:	2823883a 	mov	r17,r5
  80b4e8:	2025883a 	mov	r18,r4
  80b4ec:	dfc00415 	stw	ra,16(sp)
  80b4f0:	08106ac0 	call	8106ac <__malloc_lock>
  80b4f4:	98800217 	ldw	r2,8(r19)
  80b4f8:	9009883a 	mov	r4,r18
  80b4fc:	000b883a 	mov	r5,zero
  80b500:	10c00117 	ldw	r3,4(r2)
  80b504:	00bfff04 	movi	r2,-4
  80b508:	18a0703a 	and	r16,r3,r2
  80b50c:	8463c83a 	sub	r17,r16,r17
  80b510:	8c43fbc4 	addi	r17,r17,4079
  80b514:	8822d33a 	srli	r17,r17,12
  80b518:	0083ffc4 	movi	r2,4095
  80b51c:	8c7fffc4 	addi	r17,r17,-1
  80b520:	8822933a 	slli	r17,r17,12
  80b524:	1440060e 	bge	r2,r17,80b540 <_malloc_trim_r+0x78>
  80b528:	080e2780 	call	80e278 <_sbrk_r>
  80b52c:	98c00217 	ldw	r3,8(r19)
  80b530:	9009883a 	mov	r4,r18
  80b534:	044bc83a 	sub	r5,zero,r17
  80b538:	80c7883a 	add	r3,r16,r3
  80b53c:	10c00926 	beq	r2,r3,80b564 <_malloc_trim_r+0x9c>
  80b540:	08107b40 	call	8107b4 <__malloc_unlock>
  80b544:	0005883a 	mov	r2,zero
  80b548:	dfc00417 	ldw	ra,16(sp)
  80b54c:	dcc00317 	ldw	r19,12(sp)
  80b550:	dc800217 	ldw	r18,8(sp)
  80b554:	dc400117 	ldw	r17,4(sp)
  80b558:	dc000017 	ldw	r16,0(sp)
  80b55c:	dec00504 	addi	sp,sp,20
  80b560:	f800283a 	ret
  80b564:	9009883a 	mov	r4,r18
  80b568:	080e2780 	call	80e278 <_sbrk_r>
  80b56c:	844dc83a 	sub	r6,r16,r17
  80b570:	00ffffc4 	movi	r3,-1
  80b574:	9009883a 	mov	r4,r18
  80b578:	000b883a 	mov	r5,zero
  80b57c:	01c020b4 	movhi	r7,130
  80b580:	39fe0b04 	addi	r7,r7,-2004
  80b584:	31800054 	ori	r6,r6,1
  80b588:	10c00926 	beq	r2,r3,80b5b0 <_malloc_trim_r+0xe8>
  80b58c:	38800017 	ldw	r2,0(r7)
  80b590:	98c00217 	ldw	r3,8(r19)
  80b594:	9009883a 	mov	r4,r18
  80b598:	1445c83a 	sub	r2,r2,r17
  80b59c:	38800015 	stw	r2,0(r7)
  80b5a0:	19800115 	stw	r6,4(r3)
  80b5a4:	08107b40 	call	8107b4 <__malloc_unlock>
  80b5a8:	00800044 	movi	r2,1
  80b5ac:	003fe606 	br	80b548 <_malloc_trim_r+0x80>
  80b5b0:	080e2780 	call	80e278 <_sbrk_r>
  80b5b4:	99800217 	ldw	r6,8(r19)
  80b5b8:	100f883a 	mov	r7,r2
  80b5bc:	9009883a 	mov	r4,r18
  80b5c0:	1187c83a 	sub	r3,r2,r6
  80b5c4:	008003c4 	movi	r2,15
  80b5c8:	19400054 	ori	r5,r3,1
  80b5cc:	10ffdc0e 	bge	r2,r3,80b540 <_malloc_trim_r+0x78>
  80b5d0:	008020b4 	movhi	r2,130
  80b5d4:	10b6de04 	addi	r2,r2,-9352
  80b5d8:	10c00017 	ldw	r3,0(r2)
  80b5dc:	008020b4 	movhi	r2,130
  80b5e0:	10be0b04 	addi	r2,r2,-2004
  80b5e4:	31400115 	stw	r5,4(r6)
  80b5e8:	38c7c83a 	sub	r3,r7,r3
  80b5ec:	10c00015 	stw	r3,0(r2)
  80b5f0:	003fd306 	br	80b540 <_malloc_trim_r+0x78>

0080b5f4 <_free_r>:
  80b5f4:	defffd04 	addi	sp,sp,-12
  80b5f8:	dc400115 	stw	r17,4(sp)
  80b5fc:	dc000015 	stw	r16,0(sp)
  80b600:	dfc00215 	stw	ra,8(sp)
  80b604:	2821883a 	mov	r16,r5
  80b608:	2023883a 	mov	r17,r4
  80b60c:	28005a26 	beq	r5,zero,80b778 <_free_r+0x184>
  80b610:	08106ac0 	call	8106ac <__malloc_lock>
  80b614:	823ffe04 	addi	r8,r16,-8
  80b618:	41400117 	ldw	r5,4(r8)
  80b61c:	00bfff84 	movi	r2,-2
  80b620:	028020b4 	movhi	r10,130
  80b624:	52b12e04 	addi	r10,r10,-15176
  80b628:	288e703a 	and	r7,r5,r2
  80b62c:	41cd883a 	add	r6,r8,r7
  80b630:	30c00117 	ldw	r3,4(r6)
  80b634:	51000217 	ldw	r4,8(r10)
  80b638:	00bfff04 	movi	r2,-4
  80b63c:	1892703a 	and	r9,r3,r2
  80b640:	5017883a 	mov	r11,r10
  80b644:	31006726 	beq	r6,r4,80b7e4 <_free_r+0x1f0>
  80b648:	2880004c 	andi	r2,r5,1
  80b64c:	1005003a 	cmpeq	r2,r2,zero
  80b650:	32400115 	stw	r9,4(r6)
  80b654:	10001a1e 	bne	r2,zero,80b6c0 <_free_r+0xcc>
  80b658:	000b883a 	mov	r5,zero
  80b65c:	3247883a 	add	r3,r6,r9
  80b660:	18800117 	ldw	r2,4(r3)
  80b664:	1080004c 	andi	r2,r2,1
  80b668:	1000231e 	bne	r2,zero,80b6f8 <_free_r+0x104>
  80b66c:	280ac03a 	cmpne	r5,r5,zero
  80b670:	3a4f883a 	add	r7,r7,r9
  80b674:	2800451e 	bne	r5,zero,80b78c <_free_r+0x198>
  80b678:	31000217 	ldw	r4,8(r6)
  80b67c:	008020b4 	movhi	r2,130
  80b680:	10b13004 	addi	r2,r2,-15168
  80b684:	20807b26 	beq	r4,r2,80b874 <_free_r+0x280>
  80b688:	30800317 	ldw	r2,12(r6)
  80b68c:	3a07883a 	add	r3,r7,r8
  80b690:	19c00015 	stw	r7,0(r3)
  80b694:	11000215 	stw	r4,8(r2)
  80b698:	20800315 	stw	r2,12(r4)
  80b69c:	38800054 	ori	r2,r7,1
  80b6a0:	40800115 	stw	r2,4(r8)
  80b6a4:	28001a26 	beq	r5,zero,80b710 <_free_r+0x11c>
  80b6a8:	8809883a 	mov	r4,r17
  80b6ac:	dfc00217 	ldw	ra,8(sp)
  80b6b0:	dc400117 	ldw	r17,4(sp)
  80b6b4:	dc000017 	ldw	r16,0(sp)
  80b6b8:	dec00304 	addi	sp,sp,12
  80b6bc:	08107b41 	jmpi	8107b4 <__malloc_unlock>
  80b6c0:	80bffe17 	ldw	r2,-8(r16)
  80b6c4:	50c00204 	addi	r3,r10,8
  80b6c8:	4091c83a 	sub	r8,r8,r2
  80b6cc:	41000217 	ldw	r4,8(r8)
  80b6d0:	388f883a 	add	r7,r7,r2
  80b6d4:	20c06126 	beq	r4,r3,80b85c <_free_r+0x268>
  80b6d8:	40800317 	ldw	r2,12(r8)
  80b6dc:	3247883a 	add	r3,r6,r9
  80b6e0:	000b883a 	mov	r5,zero
  80b6e4:	11000215 	stw	r4,8(r2)
  80b6e8:	20800315 	stw	r2,12(r4)
  80b6ec:	18800117 	ldw	r2,4(r3)
  80b6f0:	1080004c 	andi	r2,r2,1
  80b6f4:	103fdd26 	beq	r2,zero,80b66c <_free_r+0x78>
  80b6f8:	38800054 	ori	r2,r7,1
  80b6fc:	3a07883a 	add	r3,r7,r8
  80b700:	280ac03a 	cmpne	r5,r5,zero
  80b704:	40800115 	stw	r2,4(r8)
  80b708:	19c00015 	stw	r7,0(r3)
  80b70c:	283fe61e 	bne	r5,zero,80b6a8 <_free_r+0xb4>
  80b710:	00807fc4 	movi	r2,511
  80b714:	11c01f2e 	bgeu	r2,r7,80b794 <_free_r+0x1a0>
  80b718:	3806d27a 	srli	r3,r7,9
  80b71c:	1800481e 	bne	r3,zero,80b840 <_free_r+0x24c>
  80b720:	3804d0fa 	srli	r2,r7,3
  80b724:	100690fa 	slli	r3,r2,3
  80b728:	1acd883a 	add	r6,r3,r11
  80b72c:	31400217 	ldw	r5,8(r6)
  80b730:	31405926 	beq	r6,r5,80b898 <_free_r+0x2a4>
  80b734:	28800117 	ldw	r2,4(r5)
  80b738:	00ffff04 	movi	r3,-4
  80b73c:	10c4703a 	and	r2,r2,r3
  80b740:	3880022e 	bgeu	r7,r2,80b74c <_free_r+0x158>
  80b744:	29400217 	ldw	r5,8(r5)
  80b748:	317ffa1e 	bne	r6,r5,80b734 <_free_r+0x140>
  80b74c:	29800317 	ldw	r6,12(r5)
  80b750:	41800315 	stw	r6,12(r8)
  80b754:	41400215 	stw	r5,8(r8)
  80b758:	8809883a 	mov	r4,r17
  80b75c:	2a000315 	stw	r8,12(r5)
  80b760:	32000215 	stw	r8,8(r6)
  80b764:	dfc00217 	ldw	ra,8(sp)
  80b768:	dc400117 	ldw	r17,4(sp)
  80b76c:	dc000017 	ldw	r16,0(sp)
  80b770:	dec00304 	addi	sp,sp,12
  80b774:	08107b41 	jmpi	8107b4 <__malloc_unlock>
  80b778:	dfc00217 	ldw	ra,8(sp)
  80b77c:	dc400117 	ldw	r17,4(sp)
  80b780:	dc000017 	ldw	r16,0(sp)
  80b784:	dec00304 	addi	sp,sp,12
  80b788:	f800283a 	ret
  80b78c:	31000217 	ldw	r4,8(r6)
  80b790:	003fbd06 	br	80b688 <_free_r+0x94>
  80b794:	3806d0fa 	srli	r3,r7,3
  80b798:	00800044 	movi	r2,1
  80b79c:	51400117 	ldw	r5,4(r10)
  80b7a0:	180890fa 	slli	r4,r3,3
  80b7a4:	1807d0ba 	srai	r3,r3,2
  80b7a8:	22c9883a 	add	r4,r4,r11
  80b7ac:	21800217 	ldw	r6,8(r4)
  80b7b0:	10c4983a 	sll	r2,r2,r3
  80b7b4:	41000315 	stw	r4,12(r8)
  80b7b8:	41800215 	stw	r6,8(r8)
  80b7bc:	288ab03a 	or	r5,r5,r2
  80b7c0:	22000215 	stw	r8,8(r4)
  80b7c4:	8809883a 	mov	r4,r17
  80b7c8:	51400115 	stw	r5,4(r10)
  80b7cc:	32000315 	stw	r8,12(r6)
  80b7d0:	dfc00217 	ldw	ra,8(sp)
  80b7d4:	dc400117 	ldw	r17,4(sp)
  80b7d8:	dc000017 	ldw	r16,0(sp)
  80b7dc:	dec00304 	addi	sp,sp,12
  80b7e0:	08107b41 	jmpi	8107b4 <__malloc_unlock>
  80b7e4:	2880004c 	andi	r2,r5,1
  80b7e8:	3a4d883a 	add	r6,r7,r9
  80b7ec:	1000071e 	bne	r2,zero,80b80c <_free_r+0x218>
  80b7f0:	80bffe17 	ldw	r2,-8(r16)
  80b7f4:	4091c83a 	sub	r8,r8,r2
  80b7f8:	41000317 	ldw	r4,12(r8)
  80b7fc:	40c00217 	ldw	r3,8(r8)
  80b800:	308d883a 	add	r6,r6,r2
  80b804:	20c00215 	stw	r3,8(r4)
  80b808:	19000315 	stw	r4,12(r3)
  80b80c:	008020b4 	movhi	r2,130
  80b810:	10b6dd04 	addi	r2,r2,-9356
  80b814:	11000017 	ldw	r4,0(r2)
  80b818:	30c00054 	ori	r3,r6,1
  80b81c:	52000215 	stw	r8,8(r10)
  80b820:	40c00115 	stw	r3,4(r8)
  80b824:	313fa036 	bltu	r6,r4,80b6a8 <_free_r+0xb4>
  80b828:	008020b4 	movhi	r2,130
  80b82c:	10bde804 	addi	r2,r2,-2144
  80b830:	11400017 	ldw	r5,0(r2)
  80b834:	8809883a 	mov	r4,r17
  80b838:	080b4c80 	call	80b4c8 <_malloc_trim_r>
  80b83c:	003f9a06 	br	80b6a8 <_free_r+0xb4>
  80b840:	00800104 	movi	r2,4
  80b844:	10c0072e 	bgeu	r2,r3,80b864 <_free_r+0x270>
  80b848:	00800504 	movi	r2,20
  80b84c:	10c01936 	bltu	r2,r3,80b8b4 <_free_r+0x2c0>
  80b850:	188016c4 	addi	r2,r3,91
  80b854:	100690fa 	slli	r3,r2,3
  80b858:	003fb306 	br	80b728 <_free_r+0x134>
  80b85c:	01400044 	movi	r5,1
  80b860:	003f7e06 	br	80b65c <_free_r+0x68>
  80b864:	3804d1ba 	srli	r2,r7,6
  80b868:	10800e04 	addi	r2,r2,56
  80b86c:	100690fa 	slli	r3,r2,3
  80b870:	003fad06 	br	80b728 <_free_r+0x134>
  80b874:	22000315 	stw	r8,12(r4)
  80b878:	22000215 	stw	r8,8(r4)
  80b87c:	3a05883a 	add	r2,r7,r8
  80b880:	38c00054 	ori	r3,r7,1
  80b884:	11c00015 	stw	r7,0(r2)
  80b888:	41000215 	stw	r4,8(r8)
  80b88c:	40c00115 	stw	r3,4(r8)
  80b890:	41000315 	stw	r4,12(r8)
  80b894:	003f8406 	br	80b6a8 <_free_r+0xb4>
  80b898:	1005d0ba 	srai	r2,r2,2
  80b89c:	00c00044 	movi	r3,1
  80b8a0:	51000117 	ldw	r4,4(r10)
  80b8a4:	1886983a 	sll	r3,r3,r2
  80b8a8:	20c8b03a 	or	r4,r4,r3
  80b8ac:	51000115 	stw	r4,4(r10)
  80b8b0:	003fa706 	br	80b750 <_free_r+0x15c>
  80b8b4:	00801504 	movi	r2,84
  80b8b8:	10c00436 	bltu	r2,r3,80b8cc <_free_r+0x2d8>
  80b8bc:	3804d33a 	srli	r2,r7,12
  80b8c0:	10801b84 	addi	r2,r2,110
  80b8c4:	100690fa 	slli	r3,r2,3
  80b8c8:	003f9706 	br	80b728 <_free_r+0x134>
  80b8cc:	00805504 	movi	r2,340
  80b8d0:	10c00436 	bltu	r2,r3,80b8e4 <_free_r+0x2f0>
  80b8d4:	3804d3fa 	srli	r2,r7,15
  80b8d8:	10801dc4 	addi	r2,r2,119
  80b8dc:	100690fa 	slli	r3,r2,3
  80b8e0:	003f9106 	br	80b728 <_free_r+0x134>
  80b8e4:	00815504 	movi	r2,1364
  80b8e8:	10c0032e 	bgeu	r2,r3,80b8f8 <_free_r+0x304>
  80b8ec:	00801f84 	movi	r2,126
  80b8f0:	00c0fc04 	movi	r3,1008
  80b8f4:	003f8c06 	br	80b728 <_free_r+0x134>
  80b8f8:	3804d4ba 	srli	r2,r7,18
  80b8fc:	10801f04 	addi	r2,r2,124
  80b900:	100690fa 	slli	r3,r2,3
  80b904:	003f8806 	br	80b728 <_free_r+0x134>

0080b908 <__sfvwrite_r>:
  80b908:	30800217 	ldw	r2,8(r6)
  80b90c:	defff504 	addi	sp,sp,-44
  80b910:	df000915 	stw	fp,36(sp)
  80b914:	dd800715 	stw	r22,28(sp)
  80b918:	dc800315 	stw	r18,12(sp)
  80b91c:	dfc00a15 	stw	ra,40(sp)
  80b920:	ddc00815 	stw	r23,32(sp)
  80b924:	dd400615 	stw	r21,24(sp)
  80b928:	dd000515 	stw	r20,20(sp)
  80b92c:	dcc00415 	stw	r19,16(sp)
  80b930:	dc400215 	stw	r17,8(sp)
  80b934:	dc000115 	stw	r16,4(sp)
  80b938:	302d883a 	mov	r22,r6
  80b93c:	2039883a 	mov	fp,r4
  80b940:	2825883a 	mov	r18,r5
  80b944:	10001c26 	beq	r2,zero,80b9b8 <__sfvwrite_r+0xb0>
  80b948:	29c0030b 	ldhu	r7,12(r5)
  80b94c:	3880020c 	andi	r2,r7,8
  80b950:	10002726 	beq	r2,zero,80b9f0 <__sfvwrite_r+0xe8>
  80b954:	28800417 	ldw	r2,16(r5)
  80b958:	10002526 	beq	r2,zero,80b9f0 <__sfvwrite_r+0xe8>
  80b95c:	3880008c 	andi	r2,r7,2
  80b960:	b5400017 	ldw	r21,0(r22)
  80b964:	10002826 	beq	r2,zero,80ba08 <__sfvwrite_r+0x100>
  80b968:	0021883a 	mov	r16,zero
  80b96c:	0023883a 	mov	r17,zero
  80b970:	880d883a 	mov	r6,r17
  80b974:	e009883a 	mov	r4,fp
  80b978:	00810004 	movi	r2,1024
  80b97c:	80006e26 	beq	r16,zero,80bb38 <__sfvwrite_r+0x230>
  80b980:	800f883a 	mov	r7,r16
  80b984:	91400717 	ldw	r5,28(r18)
  80b988:	1400012e 	bgeu	r2,r16,80b990 <__sfvwrite_r+0x88>
  80b98c:	100f883a 	mov	r7,r2
  80b990:	90c00917 	ldw	r3,36(r18)
  80b994:	183ee83a 	callr	r3
  80b998:	1007883a 	mov	r3,r2
  80b99c:	80a1c83a 	sub	r16,r16,r2
  80b9a0:	88a3883a 	add	r17,r17,r2
  80b9a4:	00806d0e 	bge	zero,r2,80bb5c <__sfvwrite_r+0x254>
  80b9a8:	b0800217 	ldw	r2,8(r22)
  80b9ac:	10c5c83a 	sub	r2,r2,r3
  80b9b0:	b0800215 	stw	r2,8(r22)
  80b9b4:	103fee1e 	bne	r2,zero,80b970 <__sfvwrite_r+0x68>
  80b9b8:	0009883a 	mov	r4,zero
  80b9bc:	2005883a 	mov	r2,r4
  80b9c0:	dfc00a17 	ldw	ra,40(sp)
  80b9c4:	df000917 	ldw	fp,36(sp)
  80b9c8:	ddc00817 	ldw	r23,32(sp)
  80b9cc:	dd800717 	ldw	r22,28(sp)
  80b9d0:	dd400617 	ldw	r21,24(sp)
  80b9d4:	dd000517 	ldw	r20,20(sp)
  80b9d8:	dcc00417 	ldw	r19,16(sp)
  80b9dc:	dc800317 	ldw	r18,12(sp)
  80b9e0:	dc400217 	ldw	r17,8(sp)
  80b9e4:	dc000117 	ldw	r16,4(sp)
  80b9e8:	dec00b04 	addi	sp,sp,44
  80b9ec:	f800283a 	ret
  80b9f0:	08096700 	call	809670 <__swsetup_r>
  80b9f4:	1000e41e 	bne	r2,zero,80bd88 <__sfvwrite_r+0x480>
  80b9f8:	91c0030b 	ldhu	r7,12(r18)
  80b9fc:	b5400017 	ldw	r21,0(r22)
  80ba00:	3880008c 	andi	r2,r7,2
  80ba04:	103fd81e 	bne	r2,zero,80b968 <__sfvwrite_r+0x60>
  80ba08:	3880004c 	andi	r2,r7,1
  80ba0c:	1005003a 	cmpeq	r2,r2,zero
  80ba10:	10005726 	beq	r2,zero,80bb70 <__sfvwrite_r+0x268>
  80ba14:	0029883a 	mov	r20,zero
  80ba18:	002f883a 	mov	r23,zero
  80ba1c:	a0004226 	beq	r20,zero,80bb28 <__sfvwrite_r+0x220>
  80ba20:	3880800c 	andi	r2,r7,512
  80ba24:	94000217 	ldw	r16,8(r18)
  80ba28:	10008b26 	beq	r2,zero,80bc58 <__sfvwrite_r+0x350>
  80ba2c:	800d883a 	mov	r6,r16
  80ba30:	a400a536 	bltu	r20,r16,80bcc8 <__sfvwrite_r+0x3c0>
  80ba34:	3881200c 	andi	r2,r7,1152
  80ba38:	10002726 	beq	r2,zero,80bad8 <__sfvwrite_r+0x1d0>
  80ba3c:	90800517 	ldw	r2,20(r18)
  80ba40:	92000417 	ldw	r8,16(r18)
  80ba44:	91400017 	ldw	r5,0(r18)
  80ba48:	1087883a 	add	r3,r2,r2
  80ba4c:	1887883a 	add	r3,r3,r2
  80ba50:	1808d7fa 	srli	r4,r3,31
  80ba54:	2a21c83a 	sub	r16,r5,r8
  80ba58:	80800044 	addi	r2,r16,1
  80ba5c:	20c9883a 	add	r4,r4,r3
  80ba60:	2027d07a 	srai	r19,r4,1
  80ba64:	a085883a 	add	r2,r20,r2
  80ba68:	980d883a 	mov	r6,r19
  80ba6c:	9880022e 	bgeu	r19,r2,80ba78 <__sfvwrite_r+0x170>
  80ba70:	1027883a 	mov	r19,r2
  80ba74:	100d883a 	mov	r6,r2
  80ba78:	3881000c 	andi	r2,r7,1024
  80ba7c:	1000b826 	beq	r2,zero,80bd60 <__sfvwrite_r+0x458>
  80ba80:	300b883a 	mov	r5,r6
  80ba84:	e009883a 	mov	r4,fp
  80ba88:	080c17c0 	call	80c17c <_malloc_r>
  80ba8c:	10003126 	beq	r2,zero,80bb54 <__sfvwrite_r+0x24c>
  80ba90:	91400417 	ldw	r5,16(r18)
  80ba94:	1009883a 	mov	r4,r2
  80ba98:	800d883a 	mov	r6,r16
  80ba9c:	1023883a 	mov	r17,r2
  80baa0:	080c9a00 	call	80c9a0 <memcpy>
  80baa4:	90c0030b 	ldhu	r3,12(r18)
  80baa8:	00beffc4 	movi	r2,-1025
  80baac:	1886703a 	and	r3,r3,r2
  80bab0:	18c02014 	ori	r3,r3,128
  80bab4:	90c0030d 	sth	r3,12(r18)
  80bab8:	9c07c83a 	sub	r3,r19,r16
  80babc:	8c05883a 	add	r2,r17,r16
  80bac0:	a00d883a 	mov	r6,r20
  80bac4:	a021883a 	mov	r16,r20
  80bac8:	90800015 	stw	r2,0(r18)
  80bacc:	90c00215 	stw	r3,8(r18)
  80bad0:	94400415 	stw	r17,16(r18)
  80bad4:	94c00515 	stw	r19,20(r18)
  80bad8:	91000017 	ldw	r4,0(r18)
  80badc:	b80b883a 	mov	r5,r23
  80bae0:	a023883a 	mov	r17,r20
  80bae4:	080ca400 	call	80ca40 <memmove>
  80bae8:	90c00217 	ldw	r3,8(r18)
  80baec:	90800017 	ldw	r2,0(r18)
  80baf0:	a027883a 	mov	r19,r20
  80baf4:	1c07c83a 	sub	r3,r3,r16
  80baf8:	1405883a 	add	r2,r2,r16
  80bafc:	90c00215 	stw	r3,8(r18)
  80bb00:	a021883a 	mov	r16,r20
  80bb04:	90800015 	stw	r2,0(r18)
  80bb08:	b0800217 	ldw	r2,8(r22)
  80bb0c:	1405c83a 	sub	r2,r2,r16
  80bb10:	b0800215 	stw	r2,8(r22)
  80bb14:	103fa826 	beq	r2,zero,80b9b8 <__sfvwrite_r+0xb0>
  80bb18:	a469c83a 	sub	r20,r20,r17
  80bb1c:	91c0030b 	ldhu	r7,12(r18)
  80bb20:	bcef883a 	add	r23,r23,r19
  80bb24:	a03fbe1e 	bne	r20,zero,80ba20 <__sfvwrite_r+0x118>
  80bb28:	adc00017 	ldw	r23,0(r21)
  80bb2c:	ad000117 	ldw	r20,4(r21)
  80bb30:	ad400204 	addi	r21,r21,8
  80bb34:	003fb906 	br	80ba1c <__sfvwrite_r+0x114>
  80bb38:	ac400017 	ldw	r17,0(r21)
  80bb3c:	ac000117 	ldw	r16,4(r21)
  80bb40:	ad400204 	addi	r21,r21,8
  80bb44:	003f8a06 	br	80b970 <__sfvwrite_r+0x68>
  80bb48:	91400417 	ldw	r5,16(r18)
  80bb4c:	e009883a 	mov	r4,fp
  80bb50:	080b5f40 	call	80b5f4 <_free_r>
  80bb54:	00800304 	movi	r2,12
  80bb58:	e0800015 	stw	r2,0(fp)
  80bb5c:	9080030b 	ldhu	r2,12(r18)
  80bb60:	013fffc4 	movi	r4,-1
  80bb64:	10801014 	ori	r2,r2,64
  80bb68:	9080030d 	sth	r2,12(r18)
  80bb6c:	003f9306 	br	80b9bc <__sfvwrite_r+0xb4>
  80bb70:	0027883a 	mov	r19,zero
  80bb74:	002f883a 	mov	r23,zero
  80bb78:	d8000015 	stw	zero,0(sp)
  80bb7c:	0029883a 	mov	r20,zero
  80bb80:	98001e26 	beq	r19,zero,80bbfc <__sfvwrite_r+0x2f4>
  80bb84:	d8c00017 	ldw	r3,0(sp)
  80bb88:	1804c03a 	cmpne	r2,r3,zero
  80bb8c:	10005e26 	beq	r2,zero,80bd08 <__sfvwrite_r+0x400>
  80bb90:	9821883a 	mov	r16,r19
  80bb94:	a4c0012e 	bgeu	r20,r19,80bb9c <__sfvwrite_r+0x294>
  80bb98:	a021883a 	mov	r16,r20
  80bb9c:	91000017 	ldw	r4,0(r18)
  80bba0:	90800417 	ldw	r2,16(r18)
  80bba4:	91800217 	ldw	r6,8(r18)
  80bba8:	91c00517 	ldw	r7,20(r18)
  80bbac:	1100022e 	bgeu	r2,r4,80bbb8 <__sfvwrite_r+0x2b0>
  80bbb0:	31e3883a 	add	r17,r6,r7
  80bbb4:	8c001616 	blt	r17,r16,80bc10 <__sfvwrite_r+0x308>
  80bbb8:	81c03816 	blt	r16,r7,80bc9c <__sfvwrite_r+0x394>
  80bbbc:	90c00917 	ldw	r3,36(r18)
  80bbc0:	91400717 	ldw	r5,28(r18)
  80bbc4:	e009883a 	mov	r4,fp
  80bbc8:	b80d883a 	mov	r6,r23
  80bbcc:	183ee83a 	callr	r3
  80bbd0:	1023883a 	mov	r17,r2
  80bbd4:	00bfe10e 	bge	zero,r2,80bb5c <__sfvwrite_r+0x254>
  80bbd8:	a469c83a 	sub	r20,r20,r17
  80bbdc:	a0001826 	beq	r20,zero,80bc40 <__sfvwrite_r+0x338>
  80bbe0:	b0800217 	ldw	r2,8(r22)
  80bbe4:	1445c83a 	sub	r2,r2,r17
  80bbe8:	b0800215 	stw	r2,8(r22)
  80bbec:	103f7226 	beq	r2,zero,80b9b8 <__sfvwrite_r+0xb0>
  80bbf0:	9c67c83a 	sub	r19,r19,r17
  80bbf4:	bc6f883a 	add	r23,r23,r17
  80bbf8:	983fe21e 	bne	r19,zero,80bb84 <__sfvwrite_r+0x27c>
  80bbfc:	adc00017 	ldw	r23,0(r21)
  80bc00:	acc00117 	ldw	r19,4(r21)
  80bc04:	ad400204 	addi	r21,r21,8
  80bc08:	d8000015 	stw	zero,0(sp)
  80bc0c:	003fdc06 	br	80bb80 <__sfvwrite_r+0x278>
  80bc10:	b80b883a 	mov	r5,r23
  80bc14:	880d883a 	mov	r6,r17
  80bc18:	080ca400 	call	80ca40 <memmove>
  80bc1c:	90c00017 	ldw	r3,0(r18)
  80bc20:	e009883a 	mov	r4,fp
  80bc24:	900b883a 	mov	r5,r18
  80bc28:	1c47883a 	add	r3,r3,r17
  80bc2c:	90c00015 	stw	r3,0(r18)
  80bc30:	080afa40 	call	80afa4 <_fflush_r>
  80bc34:	103fc91e 	bne	r2,zero,80bb5c <__sfvwrite_r+0x254>
  80bc38:	a469c83a 	sub	r20,r20,r17
  80bc3c:	a03fe81e 	bne	r20,zero,80bbe0 <__sfvwrite_r+0x2d8>
  80bc40:	e009883a 	mov	r4,fp
  80bc44:	900b883a 	mov	r5,r18
  80bc48:	080afa40 	call	80afa4 <_fflush_r>
  80bc4c:	103fc31e 	bne	r2,zero,80bb5c <__sfvwrite_r+0x254>
  80bc50:	d8000015 	stw	zero,0(sp)
  80bc54:	003fe206 	br	80bbe0 <__sfvwrite_r+0x2d8>
  80bc58:	91000017 	ldw	r4,0(r18)
  80bc5c:	90800417 	ldw	r2,16(r18)
  80bc60:	1100022e 	bgeu	r2,r4,80bc6c <__sfvwrite_r+0x364>
  80bc64:	8023883a 	mov	r17,r16
  80bc68:	85003136 	bltu	r16,r20,80bd30 <__sfvwrite_r+0x428>
  80bc6c:	91c00517 	ldw	r7,20(r18)
  80bc70:	a1c01836 	bltu	r20,r7,80bcd4 <__sfvwrite_r+0x3cc>
  80bc74:	90c00917 	ldw	r3,36(r18)
  80bc78:	91400717 	ldw	r5,28(r18)
  80bc7c:	e009883a 	mov	r4,fp
  80bc80:	b80d883a 	mov	r6,r23
  80bc84:	183ee83a 	callr	r3
  80bc88:	1021883a 	mov	r16,r2
  80bc8c:	00bfb30e 	bge	zero,r2,80bb5c <__sfvwrite_r+0x254>
  80bc90:	1023883a 	mov	r17,r2
  80bc94:	1027883a 	mov	r19,r2
  80bc98:	003f9b06 	br	80bb08 <__sfvwrite_r+0x200>
  80bc9c:	b80b883a 	mov	r5,r23
  80bca0:	800d883a 	mov	r6,r16
  80bca4:	080ca400 	call	80ca40 <memmove>
  80bca8:	90c00217 	ldw	r3,8(r18)
  80bcac:	90800017 	ldw	r2,0(r18)
  80bcb0:	8023883a 	mov	r17,r16
  80bcb4:	1c07c83a 	sub	r3,r3,r16
  80bcb8:	1405883a 	add	r2,r2,r16
  80bcbc:	90c00215 	stw	r3,8(r18)
  80bcc0:	90800015 	stw	r2,0(r18)
  80bcc4:	003fc406 	br	80bbd8 <__sfvwrite_r+0x2d0>
  80bcc8:	a00d883a 	mov	r6,r20
  80bccc:	a021883a 	mov	r16,r20
  80bcd0:	003f8106 	br	80bad8 <__sfvwrite_r+0x1d0>
  80bcd4:	b80b883a 	mov	r5,r23
  80bcd8:	a00d883a 	mov	r6,r20
  80bcdc:	080ca400 	call	80ca40 <memmove>
  80bce0:	90c00217 	ldw	r3,8(r18)
  80bce4:	90800017 	ldw	r2,0(r18)
  80bce8:	a021883a 	mov	r16,r20
  80bcec:	1d07c83a 	sub	r3,r3,r20
  80bcf0:	1505883a 	add	r2,r2,r20
  80bcf4:	a023883a 	mov	r17,r20
  80bcf8:	a027883a 	mov	r19,r20
  80bcfc:	90c00215 	stw	r3,8(r18)
  80bd00:	90800015 	stw	r2,0(r18)
  80bd04:	003f8006 	br	80bb08 <__sfvwrite_r+0x200>
  80bd08:	b809883a 	mov	r4,r23
  80bd0c:	01400284 	movi	r5,10
  80bd10:	980d883a 	mov	r6,r19
  80bd14:	080c8bc0 	call	80c8bc <memchr>
  80bd18:	10001726 	beq	r2,zero,80bd78 <__sfvwrite_r+0x470>
  80bd1c:	15c5c83a 	sub	r2,r2,r23
  80bd20:	15000044 	addi	r20,r2,1
  80bd24:	00800044 	movi	r2,1
  80bd28:	d8800015 	stw	r2,0(sp)
  80bd2c:	003f9806 	br	80bb90 <__sfvwrite_r+0x288>
  80bd30:	b80b883a 	mov	r5,r23
  80bd34:	800d883a 	mov	r6,r16
  80bd38:	080ca400 	call	80ca40 <memmove>
  80bd3c:	90c00017 	ldw	r3,0(r18)
  80bd40:	e009883a 	mov	r4,fp
  80bd44:	900b883a 	mov	r5,r18
  80bd48:	1c07883a 	add	r3,r3,r16
  80bd4c:	90c00015 	stw	r3,0(r18)
  80bd50:	8027883a 	mov	r19,r16
  80bd54:	080afa40 	call	80afa4 <_fflush_r>
  80bd58:	103f6b26 	beq	r2,zero,80bb08 <__sfvwrite_r+0x200>
  80bd5c:	003f7f06 	br	80bb5c <__sfvwrite_r+0x254>
  80bd60:	400b883a 	mov	r5,r8
  80bd64:	e009883a 	mov	r4,fp
  80bd68:	080dc440 	call	80dc44 <_realloc_r>
  80bd6c:	103f7626 	beq	r2,zero,80bb48 <__sfvwrite_r+0x240>
  80bd70:	1023883a 	mov	r17,r2
  80bd74:	003f5006 	br	80bab8 <__sfvwrite_r+0x1b0>
  80bd78:	00c00044 	movi	r3,1
  80bd7c:	9d000044 	addi	r20,r19,1
  80bd80:	d8c00015 	stw	r3,0(sp)
  80bd84:	003f8206 	br	80bb90 <__sfvwrite_r+0x288>
  80bd88:	9080030b 	ldhu	r2,12(r18)
  80bd8c:	00c00244 	movi	r3,9
  80bd90:	013fffc4 	movi	r4,-1
  80bd94:	10801014 	ori	r2,r2,64
  80bd98:	9080030d 	sth	r2,12(r18)
  80bd9c:	e0c00015 	stw	r3,0(fp)
  80bda0:	003f0606 	br	80b9bc <__sfvwrite_r+0xb4>

0080bda4 <_fwalk_reent>:
  80bda4:	defff704 	addi	sp,sp,-36
  80bda8:	dcc00315 	stw	r19,12(sp)
  80bdac:	24c0b804 	addi	r19,r4,736
  80bdb0:	dd800615 	stw	r22,24(sp)
  80bdb4:	dd400515 	stw	r21,20(sp)
  80bdb8:	dfc00815 	stw	ra,32(sp)
  80bdbc:	ddc00715 	stw	r23,28(sp)
  80bdc0:	dd000415 	stw	r20,16(sp)
  80bdc4:	dc800215 	stw	r18,8(sp)
  80bdc8:	dc400115 	stw	r17,4(sp)
  80bdcc:	dc000015 	stw	r16,0(sp)
  80bdd0:	202b883a 	mov	r21,r4
  80bdd4:	282d883a 	mov	r22,r5
  80bdd8:	080b22c0 	call	80b22c <__sfp_lock_acquire>
  80bddc:	98002126 	beq	r19,zero,80be64 <_fwalk_reent+0xc0>
  80bde0:	002f883a 	mov	r23,zero
  80bde4:	9c800117 	ldw	r18,4(r19)
  80bde8:	9c000217 	ldw	r16,8(r19)
  80bdec:	90bfffc4 	addi	r2,r18,-1
  80bdf0:	10000d16 	blt	r2,zero,80be28 <_fwalk_reent+0x84>
  80bdf4:	0023883a 	mov	r17,zero
  80bdf8:	053fffc4 	movi	r20,-1
  80bdfc:	8080030f 	ldh	r2,12(r16)
  80be00:	8c400044 	addi	r17,r17,1
  80be04:	10000626 	beq	r2,zero,80be20 <_fwalk_reent+0x7c>
  80be08:	8080038f 	ldh	r2,14(r16)
  80be0c:	800b883a 	mov	r5,r16
  80be10:	a809883a 	mov	r4,r21
  80be14:	15000226 	beq	r2,r20,80be20 <_fwalk_reent+0x7c>
  80be18:	b03ee83a 	callr	r22
  80be1c:	b8aeb03a 	or	r23,r23,r2
  80be20:	84001704 	addi	r16,r16,92
  80be24:	947ff51e 	bne	r18,r17,80bdfc <_fwalk_reent+0x58>
  80be28:	9cc00017 	ldw	r19,0(r19)
  80be2c:	983fed1e 	bne	r19,zero,80bde4 <_fwalk_reent+0x40>
  80be30:	080b2300 	call	80b230 <__sfp_lock_release>
  80be34:	b805883a 	mov	r2,r23
  80be38:	dfc00817 	ldw	ra,32(sp)
  80be3c:	ddc00717 	ldw	r23,28(sp)
  80be40:	dd800617 	ldw	r22,24(sp)
  80be44:	dd400517 	ldw	r21,20(sp)
  80be48:	dd000417 	ldw	r20,16(sp)
  80be4c:	dcc00317 	ldw	r19,12(sp)
  80be50:	dc800217 	ldw	r18,8(sp)
  80be54:	dc400117 	ldw	r17,4(sp)
  80be58:	dc000017 	ldw	r16,0(sp)
  80be5c:	dec00904 	addi	sp,sp,36
  80be60:	f800283a 	ret
  80be64:	002f883a 	mov	r23,zero
  80be68:	003ff106 	br	80be30 <_fwalk_reent+0x8c>

0080be6c <_fwalk>:
  80be6c:	defff804 	addi	sp,sp,-32
  80be70:	dcc00315 	stw	r19,12(sp)
  80be74:	24c0b804 	addi	r19,r4,736
  80be78:	dd400515 	stw	r21,20(sp)
  80be7c:	dfc00715 	stw	ra,28(sp)
  80be80:	dd800615 	stw	r22,24(sp)
  80be84:	dd000415 	stw	r20,16(sp)
  80be88:	dc800215 	stw	r18,8(sp)
  80be8c:	dc400115 	stw	r17,4(sp)
  80be90:	dc000015 	stw	r16,0(sp)
  80be94:	282b883a 	mov	r21,r5
  80be98:	080b22c0 	call	80b22c <__sfp_lock_acquire>
  80be9c:	98001f26 	beq	r19,zero,80bf1c <_fwalk+0xb0>
  80bea0:	002d883a 	mov	r22,zero
  80bea4:	9c800117 	ldw	r18,4(r19)
  80bea8:	9c000217 	ldw	r16,8(r19)
  80beac:	90bfffc4 	addi	r2,r18,-1
  80beb0:	10000c16 	blt	r2,zero,80bee4 <_fwalk+0x78>
  80beb4:	0023883a 	mov	r17,zero
  80beb8:	053fffc4 	movi	r20,-1
  80bebc:	8080030f 	ldh	r2,12(r16)
  80bec0:	8c400044 	addi	r17,r17,1
  80bec4:	10000526 	beq	r2,zero,80bedc <_fwalk+0x70>
  80bec8:	8080038f 	ldh	r2,14(r16)
  80becc:	8009883a 	mov	r4,r16
  80bed0:	15000226 	beq	r2,r20,80bedc <_fwalk+0x70>
  80bed4:	a83ee83a 	callr	r21
  80bed8:	b0acb03a 	or	r22,r22,r2
  80bedc:	84001704 	addi	r16,r16,92
  80bee0:	947ff61e 	bne	r18,r17,80bebc <_fwalk+0x50>
  80bee4:	9cc00017 	ldw	r19,0(r19)
  80bee8:	983fee1e 	bne	r19,zero,80bea4 <_fwalk+0x38>
  80beec:	080b2300 	call	80b230 <__sfp_lock_release>
  80bef0:	b005883a 	mov	r2,r22
  80bef4:	dfc00717 	ldw	ra,28(sp)
  80bef8:	dd800617 	ldw	r22,24(sp)
  80befc:	dd400517 	ldw	r21,20(sp)
  80bf00:	dd000417 	ldw	r20,16(sp)
  80bf04:	dcc00317 	ldw	r19,12(sp)
  80bf08:	dc800217 	ldw	r18,8(sp)
  80bf0c:	dc400117 	ldw	r17,4(sp)
  80bf10:	dc000017 	ldw	r16,0(sp)
  80bf14:	dec00804 	addi	sp,sp,32
  80bf18:	f800283a 	ret
  80bf1c:	002d883a 	mov	r22,zero
  80bf20:	003ff206 	br	80beec <_fwalk+0x80>

0080bf24 <__locale_charset>:
  80bf24:	d0a00417 	ldw	r2,-32752(gp)
  80bf28:	f800283a 	ret

0080bf2c <_localeconv_r>:
  80bf2c:	008020b4 	movhi	r2,130
  80bf30:	10af6e04 	addi	r2,r2,-16968
  80bf34:	f800283a 	ret

0080bf38 <localeconv>:
  80bf38:	008020b4 	movhi	r2,130
  80bf3c:	10b6d904 	addi	r2,r2,-9372
  80bf40:	11000017 	ldw	r4,0(r2)
  80bf44:	080bf2c1 	jmpi	80bf2c <_localeconv_r>

0080bf48 <_setlocale_r>:
  80bf48:	defffc04 	addi	sp,sp,-16
  80bf4c:	00c020b4 	movhi	r3,130
  80bf50:	18ef4404 	addi	r3,r3,-17136
  80bf54:	dc800215 	stw	r18,8(sp)
  80bf58:	dc400115 	stw	r17,4(sp)
  80bf5c:	dc000015 	stw	r16,0(sp)
  80bf60:	2023883a 	mov	r17,r4
  80bf64:	2825883a 	mov	r18,r5
  80bf68:	dfc00315 	stw	ra,12(sp)
  80bf6c:	3021883a 	mov	r16,r6
  80bf70:	3009883a 	mov	r4,r6
  80bf74:	180b883a 	mov	r5,r3
  80bf78:	30000926 	beq	r6,zero,80bfa0 <_setlocale_r+0x58>
  80bf7c:	080e4340 	call	80e434 <strcmp>
  80bf80:	8009883a 	mov	r4,r16
  80bf84:	014020b4 	movhi	r5,130
  80bf88:	296f5504 	addi	r5,r5,-17068
  80bf8c:	10000b1e 	bne	r2,zero,80bfbc <_setlocale_r+0x74>
  80bf90:	8c000d15 	stw	r16,52(r17)
  80bf94:	8c800c15 	stw	r18,48(r17)
  80bf98:	00c020b4 	movhi	r3,130
  80bf9c:	18ef4404 	addi	r3,r3,-17136
  80bfa0:	1805883a 	mov	r2,r3
  80bfa4:	dfc00317 	ldw	ra,12(sp)
  80bfa8:	dc800217 	ldw	r18,8(sp)
  80bfac:	dc400117 	ldw	r17,4(sp)
  80bfb0:	dc000017 	ldw	r16,0(sp)
  80bfb4:	dec00404 	addi	sp,sp,16
  80bfb8:	f800283a 	ret
  80bfbc:	080e4340 	call	80e434 <strcmp>
  80bfc0:	0007883a 	mov	r3,zero
  80bfc4:	103ff226 	beq	r2,zero,80bf90 <_setlocale_r+0x48>
  80bfc8:	003ff506 	br	80bfa0 <_setlocale_r+0x58>

0080bfcc <setlocale>:
  80bfcc:	018020b4 	movhi	r6,130
  80bfd0:	31b6d904 	addi	r6,r6,-9372
  80bfd4:	2007883a 	mov	r3,r4
  80bfd8:	31000017 	ldw	r4,0(r6)
  80bfdc:	280d883a 	mov	r6,r5
  80bfe0:	180b883a 	mov	r5,r3
  80bfe4:	080bf481 	jmpi	80bf48 <_setlocale_r>

0080bfe8 <__smakebuf_r>:
  80bfe8:	2880030b 	ldhu	r2,12(r5)
  80bfec:	deffed04 	addi	sp,sp,-76
  80bff0:	dc401015 	stw	r17,64(sp)
  80bff4:	1080008c 	andi	r2,r2,2
  80bff8:	dc000f15 	stw	r16,60(sp)
  80bffc:	dfc01215 	stw	ra,72(sp)
  80c000:	dc801115 	stw	r18,68(sp)
  80c004:	2821883a 	mov	r16,r5
  80c008:	2023883a 	mov	r17,r4
  80c00c:	10000b26 	beq	r2,zero,80c03c <__smakebuf_r+0x54>
  80c010:	28c010c4 	addi	r3,r5,67
  80c014:	00800044 	movi	r2,1
  80c018:	28800515 	stw	r2,20(r5)
  80c01c:	28c00415 	stw	r3,16(r5)
  80c020:	28c00015 	stw	r3,0(r5)
  80c024:	dfc01217 	ldw	ra,72(sp)
  80c028:	dc801117 	ldw	r18,68(sp)
  80c02c:	dc401017 	ldw	r17,64(sp)
  80c030:	dc000f17 	ldw	r16,60(sp)
  80c034:	dec01304 	addi	sp,sp,76
  80c038:	f800283a 	ret
  80c03c:	2940038f 	ldh	r5,14(r5)
  80c040:	28002116 	blt	r5,zero,80c0c8 <__smakebuf_r+0xe0>
  80c044:	d80d883a 	mov	r6,sp
  80c048:	080e7c40 	call	80e7c4 <_fstat_r>
  80c04c:	10001e16 	blt	r2,zero,80c0c8 <__smakebuf_r+0xe0>
  80c050:	d8800117 	ldw	r2,4(sp)
  80c054:	00e00014 	movui	r3,32768
  80c058:	113c000c 	andi	r4,r2,61440
  80c05c:	20c03126 	beq	r4,r3,80c124 <__smakebuf_r+0x13c>
  80c060:	8080030b 	ldhu	r2,12(r16)
  80c064:	00c80004 	movi	r3,8192
  80c068:	10820014 	ori	r2,r2,2048
  80c06c:	8080030d 	sth	r2,12(r16)
  80c070:	20c01e26 	beq	r4,r3,80c0ec <__smakebuf_r+0x104>
  80c074:	04810004 	movi	r18,1024
  80c078:	8809883a 	mov	r4,r17
  80c07c:	900b883a 	mov	r5,r18
  80c080:	080c17c0 	call	80c17c <_malloc_r>
  80c084:	1009883a 	mov	r4,r2
  80c088:	10003126 	beq	r2,zero,80c150 <__smakebuf_r+0x168>
  80c08c:	80c0030b 	ldhu	r3,12(r16)
  80c090:	00802074 	movhi	r2,129
  80c094:	10acc804 	addi	r2,r2,-19680
  80c098:	88800f15 	stw	r2,60(r17)
  80c09c:	18c02014 	ori	r3,r3,128
  80c0a0:	84800515 	stw	r18,20(r16)
  80c0a4:	80c0030d 	sth	r3,12(r16)
  80c0a8:	81000415 	stw	r4,16(r16)
  80c0ac:	81000015 	stw	r4,0(r16)
  80c0b0:	dfc01217 	ldw	ra,72(sp)
  80c0b4:	dc801117 	ldw	r18,68(sp)
  80c0b8:	dc401017 	ldw	r17,64(sp)
  80c0bc:	dc000f17 	ldw	r16,60(sp)
  80c0c0:	dec01304 	addi	sp,sp,76
  80c0c4:	f800283a 	ret
  80c0c8:	80c0030b 	ldhu	r3,12(r16)
  80c0cc:	1880200c 	andi	r2,r3,128
  80c0d0:	10000426 	beq	r2,zero,80c0e4 <__smakebuf_r+0xfc>
  80c0d4:	04801004 	movi	r18,64
  80c0d8:	18820014 	ori	r2,r3,2048
  80c0dc:	8080030d 	sth	r2,12(r16)
  80c0e0:	003fe506 	br	80c078 <__smakebuf_r+0x90>
  80c0e4:	04810004 	movi	r18,1024
  80c0e8:	003ffb06 	br	80c0d8 <__smakebuf_r+0xf0>
  80c0ec:	8140038f 	ldh	r5,14(r16)
  80c0f0:	8809883a 	mov	r4,r17
  80c0f4:	080e8380 	call	80e838 <_isatty_r>
  80c0f8:	103fde26 	beq	r2,zero,80c074 <__smakebuf_r+0x8c>
  80c0fc:	8080030b 	ldhu	r2,12(r16)
  80c100:	80c010c4 	addi	r3,r16,67
  80c104:	04810004 	movi	r18,1024
  80c108:	10800054 	ori	r2,r2,1
  80c10c:	8080030d 	sth	r2,12(r16)
  80c110:	00800044 	movi	r2,1
  80c114:	80c00415 	stw	r3,16(r16)
  80c118:	80800515 	stw	r2,20(r16)
  80c11c:	80c00015 	stw	r3,0(r16)
  80c120:	003fd506 	br	80c078 <__smakebuf_r+0x90>
  80c124:	80c00a17 	ldw	r3,40(r16)
  80c128:	00802074 	movhi	r2,129
  80c12c:	10b8bc04 	addi	r2,r2,-7440
  80c130:	18bfcb1e 	bne	r3,r2,80c060 <__smakebuf_r+0x78>
  80c134:	8080030b 	ldhu	r2,12(r16)
  80c138:	00c10004 	movi	r3,1024
  80c13c:	1825883a 	mov	r18,r3
  80c140:	10c4b03a 	or	r2,r2,r3
  80c144:	8080030d 	sth	r2,12(r16)
  80c148:	80c01315 	stw	r3,76(r16)
  80c14c:	003fca06 	br	80c078 <__smakebuf_r+0x90>
  80c150:	8100030b 	ldhu	r4,12(r16)
  80c154:	2080800c 	andi	r2,r4,512
  80c158:	103fb21e 	bne	r2,zero,80c024 <__smakebuf_r+0x3c>
  80c15c:	80c010c4 	addi	r3,r16,67
  80c160:	21000094 	ori	r4,r4,2
  80c164:	00800044 	movi	r2,1
  80c168:	80800515 	stw	r2,20(r16)
  80c16c:	8100030d 	sth	r4,12(r16)
  80c170:	80c00415 	stw	r3,16(r16)
  80c174:	80c00015 	stw	r3,0(r16)
  80c178:	003faa06 	br	80c024 <__smakebuf_r+0x3c>

0080c17c <_malloc_r>:
  80c17c:	defff604 	addi	sp,sp,-40
  80c180:	28c002c4 	addi	r3,r5,11
  80c184:	00800584 	movi	r2,22
  80c188:	dc800215 	stw	r18,8(sp)
  80c18c:	dfc00915 	stw	ra,36(sp)
  80c190:	df000815 	stw	fp,32(sp)
  80c194:	ddc00715 	stw	r23,28(sp)
  80c198:	dd800615 	stw	r22,24(sp)
  80c19c:	dd400515 	stw	r21,20(sp)
  80c1a0:	dd000415 	stw	r20,16(sp)
  80c1a4:	dcc00315 	stw	r19,12(sp)
  80c1a8:	dc400115 	stw	r17,4(sp)
  80c1ac:	dc000015 	stw	r16,0(sp)
  80c1b0:	2025883a 	mov	r18,r4
  80c1b4:	10c01236 	bltu	r2,r3,80c200 <_malloc_r+0x84>
  80c1b8:	04400404 	movi	r17,16
  80c1bc:	8940142e 	bgeu	r17,r5,80c210 <_malloc_r+0x94>
  80c1c0:	00800304 	movi	r2,12
  80c1c4:	0007883a 	mov	r3,zero
  80c1c8:	90800015 	stw	r2,0(r18)
  80c1cc:	1805883a 	mov	r2,r3
  80c1d0:	dfc00917 	ldw	ra,36(sp)
  80c1d4:	df000817 	ldw	fp,32(sp)
  80c1d8:	ddc00717 	ldw	r23,28(sp)
  80c1dc:	dd800617 	ldw	r22,24(sp)
  80c1e0:	dd400517 	ldw	r21,20(sp)
  80c1e4:	dd000417 	ldw	r20,16(sp)
  80c1e8:	dcc00317 	ldw	r19,12(sp)
  80c1ec:	dc800217 	ldw	r18,8(sp)
  80c1f0:	dc400117 	ldw	r17,4(sp)
  80c1f4:	dc000017 	ldw	r16,0(sp)
  80c1f8:	dec00a04 	addi	sp,sp,40
  80c1fc:	f800283a 	ret
  80c200:	00bffe04 	movi	r2,-8
  80c204:	18a2703a 	and	r17,r3,r2
  80c208:	883fed16 	blt	r17,zero,80c1c0 <_malloc_r+0x44>
  80c20c:	897fec36 	bltu	r17,r5,80c1c0 <_malloc_r+0x44>
  80c210:	9009883a 	mov	r4,r18
  80c214:	08106ac0 	call	8106ac <__malloc_lock>
  80c218:	00807dc4 	movi	r2,503
  80c21c:	14402b2e 	bgeu	r2,r17,80c2cc <_malloc_r+0x150>
  80c220:	8806d27a 	srli	r3,r17,9
  80c224:	18003f1e 	bne	r3,zero,80c324 <_malloc_r+0x1a8>
  80c228:	880cd0fa 	srli	r6,r17,3
  80c22c:	300490fa 	slli	r2,r6,3
  80c230:	02c020b4 	movhi	r11,130
  80c234:	5af12e04 	addi	r11,r11,-15176
  80c238:	12cb883a 	add	r5,r2,r11
  80c23c:	2c000317 	ldw	r16,12(r5)
  80c240:	580f883a 	mov	r7,r11
  80c244:	2c00041e 	bne	r5,r16,80c258 <_malloc_r+0xdc>
  80c248:	00000a06 	br	80c274 <_malloc_r+0xf8>
  80c24c:	1800860e 	bge	r3,zero,80c468 <_malloc_r+0x2ec>
  80c250:	84000317 	ldw	r16,12(r16)
  80c254:	2c000726 	beq	r5,r16,80c274 <_malloc_r+0xf8>
  80c258:	80800117 	ldw	r2,4(r16)
  80c25c:	00ffff04 	movi	r3,-4
  80c260:	10c8703a 	and	r4,r2,r3
  80c264:	2447c83a 	sub	r3,r4,r17
  80c268:	008003c4 	movi	r2,15
  80c26c:	10fff70e 	bge	r2,r3,80c24c <_malloc_r+0xd0>
  80c270:	31bfffc4 	addi	r6,r6,-1
  80c274:	32400044 	addi	r9,r6,1
  80c278:	028020b4 	movhi	r10,130
  80c27c:	52b13004 	addi	r10,r10,-15168
  80c280:	54000217 	ldw	r16,8(r10)
  80c284:	8280a026 	beq	r16,r10,80c508 <_malloc_r+0x38c>
  80c288:	80800117 	ldw	r2,4(r16)
  80c28c:	00ffff04 	movi	r3,-4
  80c290:	10ca703a 	and	r5,r2,r3
  80c294:	2c4dc83a 	sub	r6,r5,r17
  80c298:	008003c4 	movi	r2,15
  80c29c:	11808316 	blt	r2,r6,80c4ac <_malloc_r+0x330>
  80c2a0:	52800315 	stw	r10,12(r10)
  80c2a4:	52800215 	stw	r10,8(r10)
  80c2a8:	30002916 	blt	r6,zero,80c350 <_malloc_r+0x1d4>
  80c2ac:	8147883a 	add	r3,r16,r5
  80c2b0:	18800117 	ldw	r2,4(r3)
  80c2b4:	9009883a 	mov	r4,r18
  80c2b8:	10800054 	ori	r2,r2,1
  80c2bc:	18800115 	stw	r2,4(r3)
  80c2c0:	08107b40 	call	8107b4 <__malloc_unlock>
  80c2c4:	80c00204 	addi	r3,r16,8
  80c2c8:	003fc006 	br	80c1cc <_malloc_r+0x50>
  80c2cc:	02c020b4 	movhi	r11,130
  80c2d0:	5af12e04 	addi	r11,r11,-15176
  80c2d4:	8ac5883a 	add	r2,r17,r11
  80c2d8:	14000317 	ldw	r16,12(r2)
  80c2dc:	580f883a 	mov	r7,r11
  80c2e0:	8806d0fa 	srli	r3,r17,3
  80c2e4:	14006c26 	beq	r2,r16,80c498 <_malloc_r+0x31c>
  80c2e8:	80c00117 	ldw	r3,4(r16)
  80c2ec:	00bfff04 	movi	r2,-4
  80c2f0:	81800317 	ldw	r6,12(r16)
  80c2f4:	1886703a 	and	r3,r3,r2
  80c2f8:	80c7883a 	add	r3,r16,r3
  80c2fc:	18800117 	ldw	r2,4(r3)
  80c300:	81400217 	ldw	r5,8(r16)
  80c304:	9009883a 	mov	r4,r18
  80c308:	10800054 	ori	r2,r2,1
  80c30c:	18800115 	stw	r2,4(r3)
  80c310:	31400215 	stw	r5,8(r6)
  80c314:	29800315 	stw	r6,12(r5)
  80c318:	08107b40 	call	8107b4 <__malloc_unlock>
  80c31c:	80c00204 	addi	r3,r16,8
  80c320:	003faa06 	br	80c1cc <_malloc_r+0x50>
  80c324:	00800104 	movi	r2,4
  80c328:	10c0052e 	bgeu	r2,r3,80c340 <_malloc_r+0x1c4>
  80c32c:	00800504 	movi	r2,20
  80c330:	10c07836 	bltu	r2,r3,80c514 <_malloc_r+0x398>
  80c334:	198016c4 	addi	r6,r3,91
  80c338:	300490fa 	slli	r2,r6,3
  80c33c:	003fbc06 	br	80c230 <_malloc_r+0xb4>
  80c340:	8804d1ba 	srli	r2,r17,6
  80c344:	11800e04 	addi	r6,r2,56
  80c348:	300490fa 	slli	r2,r6,3
  80c34c:	003fb806 	br	80c230 <_malloc_r+0xb4>
  80c350:	00807fc4 	movi	r2,511
  80c354:	1140bb36 	bltu	r2,r5,80c644 <_malloc_r+0x4c8>
  80c358:	2806d0fa 	srli	r3,r5,3
  80c35c:	573ffe04 	addi	fp,r10,-8
  80c360:	00800044 	movi	r2,1
  80c364:	180890fa 	slli	r4,r3,3
  80c368:	1807d0ba 	srai	r3,r3,2
  80c36c:	e1c00117 	ldw	r7,4(fp)
  80c370:	5909883a 	add	r4,r11,r4
  80c374:	21400217 	ldw	r5,8(r4)
  80c378:	10c4983a 	sll	r2,r2,r3
  80c37c:	81000315 	stw	r4,12(r16)
  80c380:	81400215 	stw	r5,8(r16)
  80c384:	388eb03a 	or	r7,r7,r2
  80c388:	2c000315 	stw	r16,12(r5)
  80c38c:	24000215 	stw	r16,8(r4)
  80c390:	e1c00115 	stw	r7,4(fp)
  80c394:	4807883a 	mov	r3,r9
  80c398:	4800cd16 	blt	r9,zero,80c6d0 <_malloc_r+0x554>
  80c39c:	1807d0ba 	srai	r3,r3,2
  80c3a0:	00800044 	movi	r2,1
  80c3a4:	10c8983a 	sll	r4,r2,r3
  80c3a8:	39004436 	bltu	r7,r4,80c4bc <_malloc_r+0x340>
  80c3ac:	21c4703a 	and	r2,r4,r7
  80c3b0:	10000a1e 	bne	r2,zero,80c3dc <_malloc_r+0x260>
  80c3b4:	2109883a 	add	r4,r4,r4
  80c3b8:	00bfff04 	movi	r2,-4
  80c3bc:	4884703a 	and	r2,r9,r2
  80c3c0:	3906703a 	and	r3,r7,r4
  80c3c4:	12400104 	addi	r9,r2,4
  80c3c8:	1800041e 	bne	r3,zero,80c3dc <_malloc_r+0x260>
  80c3cc:	2109883a 	add	r4,r4,r4
  80c3d0:	3904703a 	and	r2,r7,r4
  80c3d4:	4a400104 	addi	r9,r9,4
  80c3d8:	103ffc26 	beq	r2,zero,80c3cc <_malloc_r+0x250>
  80c3dc:	480490fa 	slli	r2,r9,3
  80c3e0:	4819883a 	mov	r12,r9
  80c3e4:	023fff04 	movi	r8,-4
  80c3e8:	589b883a 	add	r13,r11,r2
  80c3ec:	6807883a 	mov	r3,r13
  80c3f0:	014003c4 	movi	r5,15
  80c3f4:	1c000317 	ldw	r16,12(r3)
  80c3f8:	1c00041e 	bne	r3,r16,80c40c <_malloc_r+0x290>
  80c3fc:	0000a706 	br	80c69c <_malloc_r+0x520>
  80c400:	3000ab0e 	bge	r6,zero,80c6b0 <_malloc_r+0x534>
  80c404:	84000317 	ldw	r16,12(r16)
  80c408:	1c00a426 	beq	r3,r16,80c69c <_malloc_r+0x520>
  80c40c:	80800117 	ldw	r2,4(r16)
  80c410:	1204703a 	and	r2,r2,r8
  80c414:	144dc83a 	sub	r6,r2,r17
  80c418:	29bff90e 	bge	r5,r6,80c400 <_malloc_r+0x284>
  80c41c:	81000317 	ldw	r4,12(r16)
  80c420:	80c00217 	ldw	r3,8(r16)
  80c424:	89400054 	ori	r5,r17,1
  80c428:	8445883a 	add	r2,r16,r17
  80c42c:	20c00215 	stw	r3,8(r4)
  80c430:	19000315 	stw	r4,12(r3)
  80c434:	81400115 	stw	r5,4(r16)
  80c438:	1187883a 	add	r3,r2,r6
  80c43c:	31000054 	ori	r4,r6,1
  80c440:	50800315 	stw	r2,12(r10)
  80c444:	50800215 	stw	r2,8(r10)
  80c448:	19800015 	stw	r6,0(r3)
  80c44c:	11000115 	stw	r4,4(r2)
  80c450:	12800215 	stw	r10,8(r2)
  80c454:	12800315 	stw	r10,12(r2)
  80c458:	9009883a 	mov	r4,r18
  80c45c:	08107b40 	call	8107b4 <__malloc_unlock>
  80c460:	80c00204 	addi	r3,r16,8
  80c464:	003f5906 	br	80c1cc <_malloc_r+0x50>
  80c468:	8109883a 	add	r4,r16,r4
  80c46c:	20800117 	ldw	r2,4(r4)
  80c470:	80c00217 	ldw	r3,8(r16)
  80c474:	81400317 	ldw	r5,12(r16)
  80c478:	10800054 	ori	r2,r2,1
  80c47c:	20800115 	stw	r2,4(r4)
  80c480:	28c00215 	stw	r3,8(r5)
  80c484:	19400315 	stw	r5,12(r3)
  80c488:	9009883a 	mov	r4,r18
  80c48c:	08107b40 	call	8107b4 <__malloc_unlock>
  80c490:	80c00204 	addi	r3,r16,8
  80c494:	003f4d06 	br	80c1cc <_malloc_r+0x50>
  80c498:	80800204 	addi	r2,r16,8
  80c49c:	14000317 	ldw	r16,12(r2)
  80c4a0:	143f911e 	bne	r2,r16,80c2e8 <_malloc_r+0x16c>
  80c4a4:	1a400084 	addi	r9,r3,2
  80c4a8:	003f7306 	br	80c278 <_malloc_r+0xfc>
  80c4ac:	88c00054 	ori	r3,r17,1
  80c4b0:	8445883a 	add	r2,r16,r17
  80c4b4:	80c00115 	stw	r3,4(r16)
  80c4b8:	003fdf06 	br	80c438 <_malloc_r+0x2bc>
  80c4bc:	e4000217 	ldw	r16,8(fp)
  80c4c0:	00bfff04 	movi	r2,-4
  80c4c4:	80c00117 	ldw	r3,4(r16)
  80c4c8:	802d883a 	mov	r22,r16
  80c4cc:	18aa703a 	and	r21,r3,r2
  80c4d0:	ac401636 	bltu	r21,r17,80c52c <_malloc_r+0x3b0>
  80c4d4:	ac49c83a 	sub	r4,r21,r17
  80c4d8:	008003c4 	movi	r2,15
  80c4dc:	1100130e 	bge	r2,r4,80c52c <_malloc_r+0x3b0>
  80c4e0:	88800054 	ori	r2,r17,1
  80c4e4:	8447883a 	add	r3,r16,r17
  80c4e8:	80800115 	stw	r2,4(r16)
  80c4ec:	20800054 	ori	r2,r4,1
  80c4f0:	18800115 	stw	r2,4(r3)
  80c4f4:	e0c00215 	stw	r3,8(fp)
  80c4f8:	9009883a 	mov	r4,r18
  80c4fc:	08107b40 	call	8107b4 <__malloc_unlock>
  80c500:	80c00204 	addi	r3,r16,8
  80c504:	003f3106 	br	80c1cc <_malloc_r+0x50>
  80c508:	39c00117 	ldw	r7,4(r7)
  80c50c:	573ffe04 	addi	fp,r10,-8
  80c510:	003fa006 	br	80c394 <_malloc_r+0x218>
  80c514:	00801504 	movi	r2,84
  80c518:	10c06736 	bltu	r2,r3,80c6b8 <_malloc_r+0x53c>
  80c51c:	8804d33a 	srli	r2,r17,12
  80c520:	11801b84 	addi	r6,r2,110
  80c524:	300490fa 	slli	r2,r6,3
  80c528:	003f4106 	br	80c230 <_malloc_r+0xb4>
  80c52c:	d0a71017 	ldw	r2,-25536(gp)
  80c530:	d0e00617 	ldw	r3,-32744(gp)
  80c534:	053fffc4 	movi	r20,-1
  80c538:	10800404 	addi	r2,r2,16
  80c53c:	88a7883a 	add	r19,r17,r2
  80c540:	1d000326 	beq	r3,r20,80c550 <_malloc_r+0x3d4>
  80c544:	98c3ffc4 	addi	r3,r19,4095
  80c548:	00bc0004 	movi	r2,-4096
  80c54c:	18a6703a 	and	r19,r3,r2
  80c550:	9009883a 	mov	r4,r18
  80c554:	980b883a 	mov	r5,r19
  80c558:	080e2780 	call	80e278 <_sbrk_r>
  80c55c:	1009883a 	mov	r4,r2
  80c560:	15000426 	beq	r2,r20,80c574 <_malloc_r+0x3f8>
  80c564:	854b883a 	add	r5,r16,r21
  80c568:	1029883a 	mov	r20,r2
  80c56c:	11405a2e 	bgeu	r2,r5,80c6d8 <_malloc_r+0x55c>
  80c570:	87000c26 	beq	r16,fp,80c5a4 <_malloc_r+0x428>
  80c574:	e4000217 	ldw	r16,8(fp)
  80c578:	80c00117 	ldw	r3,4(r16)
  80c57c:	00bfff04 	movi	r2,-4
  80c580:	1884703a 	and	r2,r3,r2
  80c584:	14400336 	bltu	r2,r17,80c594 <_malloc_r+0x418>
  80c588:	1449c83a 	sub	r4,r2,r17
  80c58c:	008003c4 	movi	r2,15
  80c590:	113fd316 	blt	r2,r4,80c4e0 <_malloc_r+0x364>
  80c594:	9009883a 	mov	r4,r18
  80c598:	08107b40 	call	8107b4 <__malloc_unlock>
  80c59c:	0007883a 	mov	r3,zero
  80c5a0:	003f0a06 	br	80c1cc <_malloc_r+0x50>
  80c5a4:	05c020b4 	movhi	r23,130
  80c5a8:	bdfe0b04 	addi	r23,r23,-2004
  80c5ac:	b8800017 	ldw	r2,0(r23)
  80c5b0:	988d883a 	add	r6,r19,r2
  80c5b4:	b9800015 	stw	r6,0(r23)
  80c5b8:	d0e00617 	ldw	r3,-32744(gp)
  80c5bc:	00bfffc4 	movi	r2,-1
  80c5c0:	18808e26 	beq	r3,r2,80c7fc <_malloc_r+0x680>
  80c5c4:	2145c83a 	sub	r2,r4,r5
  80c5c8:	3085883a 	add	r2,r6,r2
  80c5cc:	b8800015 	stw	r2,0(r23)
  80c5d0:	20c001cc 	andi	r3,r4,7
  80c5d4:	18005f1e 	bne	r3,zero,80c754 <_malloc_r+0x5d8>
  80c5d8:	000b883a 	mov	r5,zero
  80c5dc:	a4c5883a 	add	r2,r20,r19
  80c5e0:	1083ffcc 	andi	r2,r2,4095
  80c5e4:	00c40004 	movi	r3,4096
  80c5e8:	1887c83a 	sub	r3,r3,r2
  80c5ec:	28e7883a 	add	r19,r5,r3
  80c5f0:	9009883a 	mov	r4,r18
  80c5f4:	980b883a 	mov	r5,r19
  80c5f8:	080e2780 	call	80e278 <_sbrk_r>
  80c5fc:	1007883a 	mov	r3,r2
  80c600:	00bfffc4 	movi	r2,-1
  80c604:	18807a26 	beq	r3,r2,80c7f0 <_malloc_r+0x674>
  80c608:	1d05c83a 	sub	r2,r3,r20
  80c60c:	9885883a 	add	r2,r19,r2
  80c610:	10c00054 	ori	r3,r2,1
  80c614:	b8800017 	ldw	r2,0(r23)
  80c618:	a021883a 	mov	r16,r20
  80c61c:	a0c00115 	stw	r3,4(r20)
  80c620:	9885883a 	add	r2,r19,r2
  80c624:	b8800015 	stw	r2,0(r23)
  80c628:	e5000215 	stw	r20,8(fp)
  80c62c:	b7003626 	beq	r22,fp,80c708 <_malloc_r+0x58c>
  80c630:	018003c4 	movi	r6,15
  80c634:	35404b36 	bltu	r6,r21,80c764 <_malloc_r+0x5e8>
  80c638:	00800044 	movi	r2,1
  80c63c:	a0800115 	stw	r2,4(r20)
  80c640:	003fcd06 	br	80c578 <_malloc_r+0x3fc>
  80c644:	2808d27a 	srli	r4,r5,9
  80c648:	2000371e 	bne	r4,zero,80c728 <_malloc_r+0x5ac>
  80c64c:	2808d0fa 	srli	r4,r5,3
  80c650:	200690fa 	slli	r3,r4,3
  80c654:	1ad1883a 	add	r8,r3,r11
  80c658:	41800217 	ldw	r6,8(r8)
  80c65c:	41805b26 	beq	r8,r6,80c7cc <_malloc_r+0x650>
  80c660:	30800117 	ldw	r2,4(r6)
  80c664:	00ffff04 	movi	r3,-4
  80c668:	10c4703a 	and	r2,r2,r3
  80c66c:	2880022e 	bgeu	r5,r2,80c678 <_malloc_r+0x4fc>
  80c670:	31800217 	ldw	r6,8(r6)
  80c674:	41bffa1e 	bne	r8,r6,80c660 <_malloc_r+0x4e4>
  80c678:	32000317 	ldw	r8,12(r6)
  80c67c:	39c00117 	ldw	r7,4(r7)
  80c680:	82000315 	stw	r8,12(r16)
  80c684:	81800215 	stw	r6,8(r16)
  80c688:	070020b4 	movhi	fp,130
  80c68c:	e7312e04 	addi	fp,fp,-15176
  80c690:	34000315 	stw	r16,12(r6)
  80c694:	44000215 	stw	r16,8(r8)
  80c698:	003f3e06 	br	80c394 <_malloc_r+0x218>
  80c69c:	63000044 	addi	r12,r12,1
  80c6a0:	608000cc 	andi	r2,r12,3
  80c6a4:	10005d26 	beq	r2,zero,80c81c <_malloc_r+0x6a0>
  80c6a8:	18c00204 	addi	r3,r3,8
  80c6ac:	003f5106 	br	80c3f4 <_malloc_r+0x278>
  80c6b0:	8089883a 	add	r4,r16,r2
  80c6b4:	003f6d06 	br	80c46c <_malloc_r+0x2f0>
  80c6b8:	00805504 	movi	r2,340
  80c6bc:	10c02036 	bltu	r2,r3,80c740 <_malloc_r+0x5c4>
  80c6c0:	8804d3fa 	srli	r2,r17,15
  80c6c4:	11801dc4 	addi	r6,r2,119
  80c6c8:	300490fa 	slli	r2,r6,3
  80c6cc:	003ed806 	br	80c230 <_malloc_r+0xb4>
  80c6d0:	48c000c4 	addi	r3,r9,3
  80c6d4:	003f3106 	br	80c39c <_malloc_r+0x220>
  80c6d8:	05c020b4 	movhi	r23,130
  80c6dc:	bdfe0b04 	addi	r23,r23,-2004
  80c6e0:	b8800017 	ldw	r2,0(r23)
  80c6e4:	988d883a 	add	r6,r19,r2
  80c6e8:	b9800015 	stw	r6,0(r23)
  80c6ec:	293fb21e 	bne	r5,r4,80c5b8 <_malloc_r+0x43c>
  80c6f0:	2083ffcc 	andi	r2,r4,4095
  80c6f4:	103fb01e 	bne	r2,zero,80c5b8 <_malloc_r+0x43c>
  80c6f8:	e4000217 	ldw	r16,8(fp)
  80c6fc:	9d45883a 	add	r2,r19,r21
  80c700:	10800054 	ori	r2,r2,1
  80c704:	80800115 	stw	r2,4(r16)
  80c708:	b8c00017 	ldw	r3,0(r23)
  80c70c:	d0a71117 	ldw	r2,-25532(gp)
  80c710:	10c0012e 	bgeu	r2,r3,80c718 <_malloc_r+0x59c>
  80c714:	d0e71115 	stw	r3,-25532(gp)
  80c718:	d0a71217 	ldw	r2,-25528(gp)
  80c71c:	10ff962e 	bgeu	r2,r3,80c578 <_malloc_r+0x3fc>
  80c720:	d0e71215 	stw	r3,-25528(gp)
  80c724:	003f9406 	br	80c578 <_malloc_r+0x3fc>
  80c728:	00800104 	movi	r2,4
  80c72c:	11001e36 	bltu	r2,r4,80c7a8 <_malloc_r+0x62c>
  80c730:	2804d1ba 	srli	r2,r5,6
  80c734:	11000e04 	addi	r4,r2,56
  80c738:	200690fa 	slli	r3,r4,3
  80c73c:	003fc506 	br	80c654 <_malloc_r+0x4d8>
  80c740:	00815504 	movi	r2,1364
  80c744:	10c01d2e 	bgeu	r2,r3,80c7bc <_malloc_r+0x640>
  80c748:	01801f84 	movi	r6,126
  80c74c:	0080fc04 	movi	r2,1008
  80c750:	003eb706 	br	80c230 <_malloc_r+0xb4>
  80c754:	00800204 	movi	r2,8
  80c758:	10cbc83a 	sub	r5,r2,r3
  80c75c:	2169883a 	add	r20,r4,r5
  80c760:	003f9e06 	br	80c5dc <_malloc_r+0x460>
  80c764:	00bffe04 	movi	r2,-8
  80c768:	a93ffd04 	addi	r4,r21,-12
  80c76c:	2088703a 	and	r4,r4,r2
  80c770:	b10b883a 	add	r5,r22,r4
  80c774:	00c00144 	movi	r3,5
  80c778:	28c00215 	stw	r3,8(r5)
  80c77c:	28c00115 	stw	r3,4(r5)
  80c780:	b0800117 	ldw	r2,4(r22)
  80c784:	1080004c 	andi	r2,r2,1
  80c788:	2084b03a 	or	r2,r4,r2
  80c78c:	b0800115 	stw	r2,4(r22)
  80c790:	313fdd2e 	bgeu	r6,r4,80c708 <_malloc_r+0x58c>
  80c794:	b1400204 	addi	r5,r22,8
  80c798:	9009883a 	mov	r4,r18
  80c79c:	080b5f40 	call	80b5f4 <_free_r>
  80c7a0:	e4000217 	ldw	r16,8(fp)
  80c7a4:	003fd806 	br	80c708 <_malloc_r+0x58c>
  80c7a8:	00800504 	movi	r2,20
  80c7ac:	11001536 	bltu	r2,r4,80c804 <_malloc_r+0x688>
  80c7b0:	210016c4 	addi	r4,r4,91
  80c7b4:	200690fa 	slli	r3,r4,3
  80c7b8:	003fa606 	br	80c654 <_malloc_r+0x4d8>
  80c7bc:	8804d4ba 	srli	r2,r17,18
  80c7c0:	11801f04 	addi	r6,r2,124
  80c7c4:	300490fa 	slli	r2,r6,3
  80c7c8:	003e9906 	br	80c230 <_malloc_r+0xb4>
  80c7cc:	2009d0ba 	srai	r4,r4,2
  80c7d0:	014020b4 	movhi	r5,130
  80c7d4:	29712e04 	addi	r5,r5,-15176
  80c7d8:	00c00044 	movi	r3,1
  80c7dc:	28800117 	ldw	r2,4(r5)
  80c7e0:	1906983a 	sll	r3,r3,r4
  80c7e4:	10c4b03a 	or	r2,r2,r3
  80c7e8:	28800115 	stw	r2,4(r5)
  80c7ec:	003fa306 	br	80c67c <_malloc_r+0x500>
  80c7f0:	0027883a 	mov	r19,zero
  80c7f4:	00c00044 	movi	r3,1
  80c7f8:	003f8606 	br	80c614 <_malloc_r+0x498>
  80c7fc:	d1200615 	stw	r4,-32744(gp)
  80c800:	003f7306 	br	80c5d0 <_malloc_r+0x454>
  80c804:	00801504 	movi	r2,84
  80c808:	11001936 	bltu	r2,r4,80c870 <_malloc_r+0x6f4>
  80c80c:	2804d33a 	srli	r2,r5,12
  80c810:	11001b84 	addi	r4,r2,110
  80c814:	200690fa 	slli	r3,r4,3
  80c818:	003f8e06 	br	80c654 <_malloc_r+0x4d8>
  80c81c:	480b883a 	mov	r5,r9
  80c820:	6807883a 	mov	r3,r13
  80c824:	288000cc 	andi	r2,r5,3
  80c828:	18fffe04 	addi	r3,r3,-8
  80c82c:	297fffc4 	addi	r5,r5,-1
  80c830:	10001526 	beq	r2,zero,80c888 <_malloc_r+0x70c>
  80c834:	18800217 	ldw	r2,8(r3)
  80c838:	10fffa26 	beq	r2,r3,80c824 <_malloc_r+0x6a8>
  80c83c:	2109883a 	add	r4,r4,r4
  80c840:	393f1e36 	bltu	r7,r4,80c4bc <_malloc_r+0x340>
  80c844:	203f1d26 	beq	r4,zero,80c4bc <_malloc_r+0x340>
  80c848:	21c4703a 	and	r2,r4,r7
  80c84c:	10000226 	beq	r2,zero,80c858 <_malloc_r+0x6dc>
  80c850:	6013883a 	mov	r9,r12
  80c854:	003ee106 	br	80c3dc <_malloc_r+0x260>
  80c858:	2109883a 	add	r4,r4,r4
  80c85c:	3904703a 	and	r2,r7,r4
  80c860:	63000104 	addi	r12,r12,4
  80c864:	103ffc26 	beq	r2,zero,80c858 <_malloc_r+0x6dc>
  80c868:	6013883a 	mov	r9,r12
  80c86c:	003edb06 	br	80c3dc <_malloc_r+0x260>
  80c870:	00805504 	movi	r2,340
  80c874:	11000836 	bltu	r2,r4,80c898 <_malloc_r+0x71c>
  80c878:	2804d3fa 	srli	r2,r5,15
  80c87c:	11001dc4 	addi	r4,r2,119
  80c880:	200690fa 	slli	r3,r4,3
  80c884:	003f7306 	br	80c654 <_malloc_r+0x4d8>
  80c888:	0104303a 	nor	r2,zero,r4
  80c88c:	388e703a 	and	r7,r7,r2
  80c890:	e1c00115 	stw	r7,4(fp)
  80c894:	003fe906 	br	80c83c <_malloc_r+0x6c0>
  80c898:	00815504 	movi	r2,1364
  80c89c:	1100032e 	bgeu	r2,r4,80c8ac <_malloc_r+0x730>
  80c8a0:	01001f84 	movi	r4,126
  80c8a4:	00c0fc04 	movi	r3,1008
  80c8a8:	003f6a06 	br	80c654 <_malloc_r+0x4d8>
  80c8ac:	2804d4ba 	srli	r2,r5,18
  80c8b0:	11001f04 	addi	r4,r2,124
  80c8b4:	200690fa 	slli	r3,r4,3
  80c8b8:	003f6606 	br	80c654 <_malloc_r+0x4d8>

0080c8bc <memchr>:
  80c8bc:	008000c4 	movi	r2,3
  80c8c0:	29403fcc 	andi	r5,r5,255
  80c8c4:	2007883a 	mov	r3,r4
  80c8c8:	1180022e 	bgeu	r2,r6,80c8d4 <memchr+0x18>
  80c8cc:	2084703a 	and	r2,r4,r2
  80c8d0:	10000b26 	beq	r2,zero,80c900 <memchr+0x44>
  80c8d4:	313fffc4 	addi	r4,r6,-1
  80c8d8:	3000051e 	bne	r6,zero,80c8f0 <memchr+0x34>
  80c8dc:	00002c06 	br	80c990 <memchr+0xd4>
  80c8e0:	213fffc4 	addi	r4,r4,-1
  80c8e4:	00bfffc4 	movi	r2,-1
  80c8e8:	18c00044 	addi	r3,r3,1
  80c8ec:	20802826 	beq	r4,r2,80c990 <memchr+0xd4>
  80c8f0:	18800003 	ldbu	r2,0(r3)
  80c8f4:	28bffa1e 	bne	r5,r2,80c8e0 <memchr+0x24>
  80c8f8:	1805883a 	mov	r2,r3
  80c8fc:	f800283a 	ret
  80c900:	0011883a 	mov	r8,zero
  80c904:	0007883a 	mov	r3,zero
  80c908:	01c00104 	movi	r7,4
  80c90c:	4004923a 	slli	r2,r8,8
  80c910:	18c00044 	addi	r3,r3,1
  80c914:	1151883a 	add	r8,r2,r5
  80c918:	19fffc1e 	bne	r3,r7,80c90c <memchr+0x50>
  80c91c:	02bfbff4 	movhi	r10,65279
  80c920:	52bfbfc4 	addi	r10,r10,-257
  80c924:	02602074 	movhi	r9,32897
  80c928:	4a602004 	addi	r9,r9,-32640
  80c92c:	02c000c4 	movi	r11,3
  80c930:	20800017 	ldw	r2,0(r4)
  80c934:	31bfff04 	addi	r6,r6,-4
  80c938:	200f883a 	mov	r7,r4
  80c93c:	1204f03a 	xor	r2,r2,r8
  80c940:	1287883a 	add	r3,r2,r10
  80c944:	1a46703a 	and	r3,r3,r9
  80c948:	0084303a 	nor	r2,zero,r2
  80c94c:	10c4703a 	and	r2,r2,r3
  80c950:	10000b26 	beq	r2,zero,80c980 <memchr+0xc4>
  80c954:	20800003 	ldbu	r2,0(r4)
  80c958:	28800f26 	beq	r5,r2,80c998 <memchr+0xdc>
  80c95c:	20800043 	ldbu	r2,1(r4)
  80c960:	21c00044 	addi	r7,r4,1
  80c964:	28800c26 	beq	r5,r2,80c998 <memchr+0xdc>
  80c968:	20800083 	ldbu	r2,2(r4)
  80c96c:	21c00084 	addi	r7,r4,2
  80c970:	28800926 	beq	r5,r2,80c998 <memchr+0xdc>
  80c974:	208000c3 	ldbu	r2,3(r4)
  80c978:	21c000c4 	addi	r7,r4,3
  80c97c:	28800626 	beq	r5,r2,80c998 <memchr+0xdc>
  80c980:	21000104 	addi	r4,r4,4
  80c984:	59bfea36 	bltu	r11,r6,80c930 <memchr+0x74>
  80c988:	2007883a 	mov	r3,r4
  80c98c:	003fd106 	br	80c8d4 <memchr+0x18>
  80c990:	0005883a 	mov	r2,zero
  80c994:	f800283a 	ret
  80c998:	3805883a 	mov	r2,r7
  80c99c:	f800283a 	ret

0080c9a0 <memcpy>:
  80c9a0:	01c003c4 	movi	r7,15
  80c9a4:	2007883a 	mov	r3,r4
  80c9a8:	3980032e 	bgeu	r7,r6,80c9b8 <memcpy+0x18>
  80c9ac:	2904b03a 	or	r2,r5,r4
  80c9b0:	108000cc 	andi	r2,r2,3
  80c9b4:	10000926 	beq	r2,zero,80c9dc <memcpy+0x3c>
  80c9b8:	30000626 	beq	r6,zero,80c9d4 <memcpy+0x34>
  80c9bc:	30cd883a 	add	r6,r6,r3
  80c9c0:	28800003 	ldbu	r2,0(r5)
  80c9c4:	29400044 	addi	r5,r5,1
  80c9c8:	18800005 	stb	r2,0(r3)
  80c9cc:	18c00044 	addi	r3,r3,1
  80c9d0:	30fffb1e 	bne	r6,r3,80c9c0 <memcpy+0x20>
  80c9d4:	2005883a 	mov	r2,r4
  80c9d8:	f800283a 	ret
  80c9dc:	3811883a 	mov	r8,r7
  80c9e0:	200f883a 	mov	r7,r4
  80c9e4:	28c00017 	ldw	r3,0(r5)
  80c9e8:	31bffc04 	addi	r6,r6,-16
  80c9ec:	38c00015 	stw	r3,0(r7)
  80c9f0:	28800117 	ldw	r2,4(r5)
  80c9f4:	38800115 	stw	r2,4(r7)
  80c9f8:	28c00217 	ldw	r3,8(r5)
  80c9fc:	38c00215 	stw	r3,8(r7)
  80ca00:	28800317 	ldw	r2,12(r5)
  80ca04:	29400404 	addi	r5,r5,16
  80ca08:	38800315 	stw	r2,12(r7)
  80ca0c:	39c00404 	addi	r7,r7,16
  80ca10:	41bff436 	bltu	r8,r6,80c9e4 <memcpy+0x44>
  80ca14:	008000c4 	movi	r2,3
  80ca18:	1180072e 	bgeu	r2,r6,80ca38 <memcpy+0x98>
  80ca1c:	1007883a 	mov	r3,r2
  80ca20:	28800017 	ldw	r2,0(r5)
  80ca24:	31bfff04 	addi	r6,r6,-4
  80ca28:	29400104 	addi	r5,r5,4
  80ca2c:	38800015 	stw	r2,0(r7)
  80ca30:	39c00104 	addi	r7,r7,4
  80ca34:	19bffa36 	bltu	r3,r6,80ca20 <memcpy+0x80>
  80ca38:	3807883a 	mov	r3,r7
  80ca3c:	003fde06 	br	80c9b8 <memcpy+0x18>

0080ca40 <memmove>:
  80ca40:	2807883a 	mov	r3,r5
  80ca44:	2011883a 	mov	r8,r4
  80ca48:	29000c2e 	bgeu	r5,r4,80ca7c <memmove+0x3c>
  80ca4c:	298f883a 	add	r7,r5,r6
  80ca50:	21c00a2e 	bgeu	r4,r7,80ca7c <memmove+0x3c>
  80ca54:	30000726 	beq	r6,zero,80ca74 <memmove+0x34>
  80ca58:	2187883a 	add	r3,r4,r6
  80ca5c:	198dc83a 	sub	r6,r3,r6
  80ca60:	39ffffc4 	addi	r7,r7,-1
  80ca64:	38800003 	ldbu	r2,0(r7)
  80ca68:	18ffffc4 	addi	r3,r3,-1
  80ca6c:	18800005 	stb	r2,0(r3)
  80ca70:	19bffb1e 	bne	r3,r6,80ca60 <memmove+0x20>
  80ca74:	2005883a 	mov	r2,r4
  80ca78:	f800283a 	ret
  80ca7c:	01c003c4 	movi	r7,15
  80ca80:	39800a36 	bltu	r7,r6,80caac <memmove+0x6c>
  80ca84:	303ffb26 	beq	r6,zero,80ca74 <memmove+0x34>
  80ca88:	400f883a 	mov	r7,r8
  80ca8c:	320d883a 	add	r6,r6,r8
  80ca90:	28800003 	ldbu	r2,0(r5)
  80ca94:	29400044 	addi	r5,r5,1
  80ca98:	38800005 	stb	r2,0(r7)
  80ca9c:	39c00044 	addi	r7,r7,1
  80caa0:	39bffb1e 	bne	r7,r6,80ca90 <memmove+0x50>
  80caa4:	2005883a 	mov	r2,r4
  80caa8:	f800283a 	ret
  80caac:	1904b03a 	or	r2,r3,r4
  80cab0:	108000cc 	andi	r2,r2,3
  80cab4:	103ff31e 	bne	r2,zero,80ca84 <memmove+0x44>
  80cab8:	3811883a 	mov	r8,r7
  80cabc:	180b883a 	mov	r5,r3
  80cac0:	200f883a 	mov	r7,r4
  80cac4:	28c00017 	ldw	r3,0(r5)
  80cac8:	31bffc04 	addi	r6,r6,-16
  80cacc:	38c00015 	stw	r3,0(r7)
  80cad0:	28800117 	ldw	r2,4(r5)
  80cad4:	38800115 	stw	r2,4(r7)
  80cad8:	28c00217 	ldw	r3,8(r5)
  80cadc:	38c00215 	stw	r3,8(r7)
  80cae0:	28800317 	ldw	r2,12(r5)
  80cae4:	29400404 	addi	r5,r5,16
  80cae8:	38800315 	stw	r2,12(r7)
  80caec:	39c00404 	addi	r7,r7,16
  80caf0:	41bff436 	bltu	r8,r6,80cac4 <memmove+0x84>
  80caf4:	008000c4 	movi	r2,3
  80caf8:	1180072e 	bgeu	r2,r6,80cb18 <memmove+0xd8>
  80cafc:	1007883a 	mov	r3,r2
  80cb00:	28800017 	ldw	r2,0(r5)
  80cb04:	31bfff04 	addi	r6,r6,-4
  80cb08:	29400104 	addi	r5,r5,4
  80cb0c:	38800015 	stw	r2,0(r7)
  80cb10:	39c00104 	addi	r7,r7,4
  80cb14:	19bffa36 	bltu	r3,r6,80cb00 <memmove+0xc0>
  80cb18:	3811883a 	mov	r8,r7
  80cb1c:	003fd906 	br	80ca84 <memmove+0x44>

0080cb20 <memset>:
  80cb20:	008000c4 	movi	r2,3
  80cb24:	29403fcc 	andi	r5,r5,255
  80cb28:	2007883a 	mov	r3,r4
  80cb2c:	1180022e 	bgeu	r2,r6,80cb38 <memset+0x18>
  80cb30:	2084703a 	and	r2,r4,r2
  80cb34:	10000826 	beq	r2,zero,80cb58 <memset+0x38>
  80cb38:	30000526 	beq	r6,zero,80cb50 <memset+0x30>
  80cb3c:	2805883a 	mov	r2,r5
  80cb40:	30cd883a 	add	r6,r6,r3
  80cb44:	18800005 	stb	r2,0(r3)
  80cb48:	18c00044 	addi	r3,r3,1
  80cb4c:	19bffd1e 	bne	r3,r6,80cb44 <memset+0x24>
  80cb50:	2005883a 	mov	r2,r4
  80cb54:	f800283a 	ret
  80cb58:	2804923a 	slli	r2,r5,8
  80cb5c:	020003c4 	movi	r8,15
  80cb60:	200f883a 	mov	r7,r4
  80cb64:	2884b03a 	or	r2,r5,r2
  80cb68:	1006943a 	slli	r3,r2,16
  80cb6c:	10c6b03a 	or	r3,r2,r3
  80cb70:	41800a2e 	bgeu	r8,r6,80cb9c <memset+0x7c>
  80cb74:	4005883a 	mov	r2,r8
  80cb78:	31bffc04 	addi	r6,r6,-16
  80cb7c:	38c00015 	stw	r3,0(r7)
  80cb80:	38c00115 	stw	r3,4(r7)
  80cb84:	38c00215 	stw	r3,8(r7)
  80cb88:	38c00315 	stw	r3,12(r7)
  80cb8c:	39c00404 	addi	r7,r7,16
  80cb90:	11bff936 	bltu	r2,r6,80cb78 <memset+0x58>
  80cb94:	008000c4 	movi	r2,3
  80cb98:	1180052e 	bgeu	r2,r6,80cbb0 <memset+0x90>
  80cb9c:	31bfff04 	addi	r6,r6,-4
  80cba0:	008000c4 	movi	r2,3
  80cba4:	38c00015 	stw	r3,0(r7)
  80cba8:	39c00104 	addi	r7,r7,4
  80cbac:	11bffb36 	bltu	r2,r6,80cb9c <memset+0x7c>
  80cbb0:	3807883a 	mov	r3,r7
  80cbb4:	003fe006 	br	80cb38 <memset+0x18>

0080cbb8 <_Bfree>:
  80cbb8:	28000826 	beq	r5,zero,80cbdc <_Bfree+0x24>
  80cbbc:	28800117 	ldw	r2,4(r5)
  80cbc0:	21001317 	ldw	r4,76(r4)
  80cbc4:	1085883a 	add	r2,r2,r2
  80cbc8:	1085883a 	add	r2,r2,r2
  80cbcc:	1105883a 	add	r2,r2,r4
  80cbd0:	10c00017 	ldw	r3,0(r2)
  80cbd4:	28c00015 	stw	r3,0(r5)
  80cbd8:	11400015 	stw	r5,0(r2)
  80cbdc:	f800283a 	ret

0080cbe0 <__hi0bits>:
  80cbe0:	20bfffec 	andhi	r2,r4,65535
  80cbe4:	10001426 	beq	r2,zero,80cc38 <__hi0bits+0x58>
  80cbe8:	0007883a 	mov	r3,zero
  80cbec:	20bfc02c 	andhi	r2,r4,65280
  80cbf0:	1000021e 	bne	r2,zero,80cbfc <__hi0bits+0x1c>
  80cbf4:	2008923a 	slli	r4,r4,8
  80cbf8:	18c00204 	addi	r3,r3,8
  80cbfc:	20bc002c 	andhi	r2,r4,61440
  80cc00:	1000021e 	bne	r2,zero,80cc0c <__hi0bits+0x2c>
  80cc04:	2008913a 	slli	r4,r4,4
  80cc08:	18c00104 	addi	r3,r3,4
  80cc0c:	20b0002c 	andhi	r2,r4,49152
  80cc10:	1000031e 	bne	r2,zero,80cc20 <__hi0bits+0x40>
  80cc14:	2105883a 	add	r2,r4,r4
  80cc18:	18c00084 	addi	r3,r3,2
  80cc1c:	1089883a 	add	r4,r2,r2
  80cc20:	20000316 	blt	r4,zero,80cc30 <__hi0bits+0x50>
  80cc24:	2090002c 	andhi	r2,r4,16384
  80cc28:	10000626 	beq	r2,zero,80cc44 <__hi0bits+0x64>
  80cc2c:	18c00044 	addi	r3,r3,1
  80cc30:	1805883a 	mov	r2,r3
  80cc34:	f800283a 	ret
  80cc38:	2008943a 	slli	r4,r4,16
  80cc3c:	00c00404 	movi	r3,16
  80cc40:	003fea06 	br	80cbec <__hi0bits+0xc>
  80cc44:	00c00804 	movi	r3,32
  80cc48:	1805883a 	mov	r2,r3
  80cc4c:	f800283a 	ret

0080cc50 <__lo0bits>:
  80cc50:	20c00017 	ldw	r3,0(r4)
  80cc54:	188001cc 	andi	r2,r3,7
  80cc58:	10000a26 	beq	r2,zero,80cc84 <__lo0bits+0x34>
  80cc5c:	1880004c 	andi	r2,r3,1
  80cc60:	1005003a 	cmpeq	r2,r2,zero
  80cc64:	10002126 	beq	r2,zero,80ccec <__lo0bits+0x9c>
  80cc68:	1880008c 	andi	r2,r3,2
  80cc6c:	1000251e 	bne	r2,zero,80cd04 <__lo0bits+0xb4>
  80cc70:	1804d0ba 	srli	r2,r3,2
  80cc74:	01400084 	movi	r5,2
  80cc78:	20800015 	stw	r2,0(r4)
  80cc7c:	2805883a 	mov	r2,r5
  80cc80:	f800283a 	ret
  80cc84:	18bfffcc 	andi	r2,r3,65535
  80cc88:	10001526 	beq	r2,zero,80cce0 <__lo0bits+0x90>
  80cc8c:	000b883a 	mov	r5,zero
  80cc90:	18803fcc 	andi	r2,r3,255
  80cc94:	1000021e 	bne	r2,zero,80cca0 <__lo0bits+0x50>
  80cc98:	1806d23a 	srli	r3,r3,8
  80cc9c:	29400204 	addi	r5,r5,8
  80cca0:	188003cc 	andi	r2,r3,15
  80cca4:	1000021e 	bne	r2,zero,80ccb0 <__lo0bits+0x60>
  80cca8:	1806d13a 	srli	r3,r3,4
  80ccac:	29400104 	addi	r5,r5,4
  80ccb0:	188000cc 	andi	r2,r3,3
  80ccb4:	1000021e 	bne	r2,zero,80ccc0 <__lo0bits+0x70>
  80ccb8:	1806d0ba 	srli	r3,r3,2
  80ccbc:	29400084 	addi	r5,r5,2
  80ccc0:	1880004c 	andi	r2,r3,1
  80ccc4:	1000031e 	bne	r2,zero,80ccd4 <__lo0bits+0x84>
  80ccc8:	1806d07a 	srli	r3,r3,1
  80cccc:	18000a26 	beq	r3,zero,80ccf8 <__lo0bits+0xa8>
  80ccd0:	29400044 	addi	r5,r5,1
  80ccd4:	2805883a 	mov	r2,r5
  80ccd8:	20c00015 	stw	r3,0(r4)
  80ccdc:	f800283a 	ret
  80cce0:	1806d43a 	srli	r3,r3,16
  80cce4:	01400404 	movi	r5,16
  80cce8:	003fe906 	br	80cc90 <__lo0bits+0x40>
  80ccec:	000b883a 	mov	r5,zero
  80ccf0:	2805883a 	mov	r2,r5
  80ccf4:	f800283a 	ret
  80ccf8:	01400804 	movi	r5,32
  80ccfc:	2805883a 	mov	r2,r5
  80cd00:	f800283a 	ret
  80cd04:	1804d07a 	srli	r2,r3,1
  80cd08:	01400044 	movi	r5,1
  80cd0c:	20800015 	stw	r2,0(r4)
  80cd10:	003fda06 	br	80cc7c <__lo0bits+0x2c>

0080cd14 <__mcmp>:
  80cd14:	20800417 	ldw	r2,16(r4)
  80cd18:	28c00417 	ldw	r3,16(r5)
  80cd1c:	10cfc83a 	sub	r7,r2,r3
  80cd20:	38000c1e 	bne	r7,zero,80cd54 <__mcmp+0x40>
  80cd24:	18c5883a 	add	r2,r3,r3
  80cd28:	1085883a 	add	r2,r2,r2
  80cd2c:	10c00504 	addi	r3,r2,20
  80cd30:	21000504 	addi	r4,r4,20
  80cd34:	28cb883a 	add	r5,r5,r3
  80cd38:	2085883a 	add	r2,r4,r2
  80cd3c:	10bfff04 	addi	r2,r2,-4
  80cd40:	297fff04 	addi	r5,r5,-4
  80cd44:	11800017 	ldw	r6,0(r2)
  80cd48:	28c00017 	ldw	r3,0(r5)
  80cd4c:	30c0031e 	bne	r6,r3,80cd5c <__mcmp+0x48>
  80cd50:	20bffa36 	bltu	r4,r2,80cd3c <__mcmp+0x28>
  80cd54:	3805883a 	mov	r2,r7
  80cd58:	f800283a 	ret
  80cd5c:	30c00336 	bltu	r6,r3,80cd6c <__mcmp+0x58>
  80cd60:	01c00044 	movi	r7,1
  80cd64:	3805883a 	mov	r2,r7
  80cd68:	f800283a 	ret
  80cd6c:	01ffffc4 	movi	r7,-1
  80cd70:	003ff806 	br	80cd54 <__mcmp+0x40>

0080cd74 <__ulp>:
  80cd74:	295ffc2c 	andhi	r5,r5,32752
  80cd78:	013f3034 	movhi	r4,64704
  80cd7c:	290b883a 	add	r5,r5,r4
  80cd80:	0145c83a 	sub	r2,zero,r5
  80cd84:	1007d53a 	srai	r3,r2,20
  80cd88:	000d883a 	mov	r6,zero
  80cd8c:	0140040e 	bge	zero,r5,80cda0 <__ulp+0x2c>
  80cd90:	280f883a 	mov	r7,r5
  80cd94:	3807883a 	mov	r3,r7
  80cd98:	3005883a 	mov	r2,r6
  80cd9c:	f800283a 	ret
  80cda0:	008004c4 	movi	r2,19
  80cda4:	193ffb04 	addi	r4,r3,-20
  80cda8:	10c00c0e 	bge	r2,r3,80cddc <__ulp+0x68>
  80cdac:	008007c4 	movi	r2,31
  80cdb0:	1107c83a 	sub	r3,r2,r4
  80cdb4:	00800784 	movi	r2,30
  80cdb8:	01400044 	movi	r5,1
  80cdbc:	11000216 	blt	r2,r4,80cdc8 <__ulp+0x54>
  80cdc0:	00800044 	movi	r2,1
  80cdc4:	10ca983a 	sll	r5,r2,r3
  80cdc8:	000f883a 	mov	r7,zero
  80cdcc:	280d883a 	mov	r6,r5
  80cdd0:	3807883a 	mov	r3,r7
  80cdd4:	3005883a 	mov	r2,r6
  80cdd8:	f800283a 	ret
  80cddc:	00800234 	movhi	r2,8
  80cde0:	10cfd83a 	sra	r7,r2,r3
  80cde4:	000d883a 	mov	r6,zero
  80cde8:	3005883a 	mov	r2,r6
  80cdec:	3807883a 	mov	r3,r7
  80cdf0:	f800283a 	ret

0080cdf4 <__b2d>:
  80cdf4:	20800417 	ldw	r2,16(r4)
  80cdf8:	defff904 	addi	sp,sp,-28
  80cdfc:	dd000415 	stw	r20,16(sp)
  80ce00:	1085883a 	add	r2,r2,r2
  80ce04:	25000504 	addi	r20,r4,20
  80ce08:	1085883a 	add	r2,r2,r2
  80ce0c:	dc000015 	stw	r16,0(sp)
  80ce10:	a0a1883a 	add	r16,r20,r2
  80ce14:	dd400515 	stw	r21,20(sp)
  80ce18:	857fff17 	ldw	r21,-4(r16)
  80ce1c:	dc400115 	stw	r17,4(sp)
  80ce20:	dfc00615 	stw	ra,24(sp)
  80ce24:	a809883a 	mov	r4,r21
  80ce28:	2823883a 	mov	r17,r5
  80ce2c:	dcc00315 	stw	r19,12(sp)
  80ce30:	dc800215 	stw	r18,8(sp)
  80ce34:	080cbe00 	call	80cbe0 <__hi0bits>
  80ce38:	100b883a 	mov	r5,r2
  80ce3c:	00800804 	movi	r2,32
  80ce40:	1145c83a 	sub	r2,r2,r5
  80ce44:	88800015 	stw	r2,0(r17)
  80ce48:	00800284 	movi	r2,10
  80ce4c:	80ffff04 	addi	r3,r16,-4
  80ce50:	11401416 	blt	r2,r5,80cea4 <__b2d+0xb0>
  80ce54:	008002c4 	movi	r2,11
  80ce58:	1149c83a 	sub	r4,r2,r5
  80ce5c:	a0c02736 	bltu	r20,r3,80cefc <__b2d+0x108>
  80ce60:	000d883a 	mov	r6,zero
  80ce64:	28800544 	addi	r2,r5,21
  80ce68:	a906d83a 	srl	r3,r21,r4
  80ce6c:	a884983a 	sll	r2,r21,r2
  80ce70:	1ccffc34 	orhi	r19,r3,16368
  80ce74:	11a4b03a 	or	r18,r2,r6
  80ce78:	9005883a 	mov	r2,r18
  80ce7c:	9807883a 	mov	r3,r19
  80ce80:	dfc00617 	ldw	ra,24(sp)
  80ce84:	dd400517 	ldw	r21,20(sp)
  80ce88:	dd000417 	ldw	r20,16(sp)
  80ce8c:	dcc00317 	ldw	r19,12(sp)
  80ce90:	dc800217 	ldw	r18,8(sp)
  80ce94:	dc400117 	ldw	r17,4(sp)
  80ce98:	dc000017 	ldw	r16,0(sp)
  80ce9c:	dec00704 	addi	sp,sp,28
  80cea0:	f800283a 	ret
  80cea4:	a0c00e36 	bltu	r20,r3,80cee0 <__b2d+0xec>
  80cea8:	293ffd44 	addi	r4,r5,-11
  80ceac:	000d883a 	mov	r6,zero
  80ceb0:	20000f26 	beq	r4,zero,80cef0 <__b2d+0xfc>
  80ceb4:	00800804 	movi	r2,32
  80ceb8:	110bc83a 	sub	r5,r2,r4
  80cebc:	a0c01236 	bltu	r20,r3,80cf08 <__b2d+0x114>
  80cec0:	000f883a 	mov	r7,zero
  80cec4:	a904983a 	sll	r2,r21,r4
  80cec8:	3146d83a 	srl	r3,r6,r5
  80cecc:	3108983a 	sll	r4,r6,r4
  80ced0:	108ffc34 	orhi	r2,r2,16368
  80ced4:	18a6b03a 	or	r19,r3,r2
  80ced8:	3924b03a 	or	r18,r7,r4
  80cedc:	003fe606 	br	80ce78 <__b2d+0x84>
  80cee0:	293ffd44 	addi	r4,r5,-11
  80cee4:	81bffe17 	ldw	r6,-8(r16)
  80cee8:	80fffe04 	addi	r3,r16,-8
  80ceec:	203ff11e 	bne	r4,zero,80ceb4 <__b2d+0xc0>
  80cef0:	accffc34 	orhi	r19,r21,16368
  80cef4:	3025883a 	mov	r18,r6
  80cef8:	003fdf06 	br	80ce78 <__b2d+0x84>
  80cefc:	18bfff17 	ldw	r2,-4(r3)
  80cf00:	110cd83a 	srl	r6,r2,r4
  80cf04:	003fd706 	br	80ce64 <__b2d+0x70>
  80cf08:	18bfff17 	ldw	r2,-4(r3)
  80cf0c:	114ed83a 	srl	r7,r2,r5
  80cf10:	003fec06 	br	80cec4 <__b2d+0xd0>

0080cf14 <__ratio>:
  80cf14:	defff904 	addi	sp,sp,-28
  80cf18:	dc400215 	stw	r17,8(sp)
  80cf1c:	2823883a 	mov	r17,r5
  80cf20:	d80b883a 	mov	r5,sp
  80cf24:	dfc00615 	stw	ra,24(sp)
  80cf28:	dd000515 	stw	r20,20(sp)
  80cf2c:	dcc00415 	stw	r19,16(sp)
  80cf30:	dc800315 	stw	r18,12(sp)
  80cf34:	2025883a 	mov	r18,r4
  80cf38:	080cdf40 	call	80cdf4 <__b2d>
  80cf3c:	8809883a 	mov	r4,r17
  80cf40:	d9400104 	addi	r5,sp,4
  80cf44:	1027883a 	mov	r19,r2
  80cf48:	1829883a 	mov	r20,r3
  80cf4c:	080cdf40 	call	80cdf4 <__b2d>
  80cf50:	89000417 	ldw	r4,16(r17)
  80cf54:	91c00417 	ldw	r7,16(r18)
  80cf58:	d9800117 	ldw	r6,4(sp)
  80cf5c:	180b883a 	mov	r5,r3
  80cf60:	390fc83a 	sub	r7,r7,r4
  80cf64:	1009883a 	mov	r4,r2
  80cf68:	d8800017 	ldw	r2,0(sp)
  80cf6c:	380e917a 	slli	r7,r7,5
  80cf70:	2011883a 	mov	r8,r4
  80cf74:	1185c83a 	sub	r2,r2,r6
  80cf78:	11c5883a 	add	r2,r2,r7
  80cf7c:	1006953a 	slli	r3,r2,20
  80cf80:	2813883a 	mov	r9,r5
  80cf84:	00800d0e 	bge	zero,r2,80cfbc <__ratio+0xa8>
  80cf88:	1d29883a 	add	r20,r3,r20
  80cf8c:	a00b883a 	mov	r5,r20
  80cf90:	480f883a 	mov	r7,r9
  80cf94:	9809883a 	mov	r4,r19
  80cf98:	400d883a 	mov	r6,r8
  80cf9c:	080644c0 	call	80644c <__divdf3>
  80cfa0:	dfc00617 	ldw	ra,24(sp)
  80cfa4:	dd000517 	ldw	r20,20(sp)
  80cfa8:	dcc00417 	ldw	r19,16(sp)
  80cfac:	dc800317 	ldw	r18,12(sp)
  80cfb0:	dc400217 	ldw	r17,8(sp)
  80cfb4:	dec00704 	addi	sp,sp,28
  80cfb8:	f800283a 	ret
  80cfbc:	28d3c83a 	sub	r9,r5,r3
  80cfc0:	003ff206 	br	80cf8c <__ratio+0x78>

0080cfc4 <_mprec_log10>:
  80cfc4:	defffe04 	addi	sp,sp,-8
  80cfc8:	008005c4 	movi	r2,23
  80cfcc:	dc000015 	stw	r16,0(sp)
  80cfd0:	dfc00115 	stw	ra,4(sp)
  80cfd4:	2021883a 	mov	r16,r4
  80cfd8:	11000c16 	blt	r2,r4,80d00c <_mprec_log10+0x48>
  80cfdc:	200490fa 	slli	r2,r4,3
  80cfe0:	00c020b4 	movhi	r3,130
  80cfe4:	18ef7a04 	addi	r3,r3,-16920
  80cfe8:	10c5883a 	add	r2,r2,r3
  80cfec:	12400117 	ldw	r9,4(r2)
  80cff0:	12000017 	ldw	r8,0(r2)
  80cff4:	4807883a 	mov	r3,r9
  80cff8:	4005883a 	mov	r2,r8
  80cffc:	dfc00117 	ldw	ra,4(sp)
  80d000:	dc000017 	ldw	r16,0(sp)
  80d004:	dec00204 	addi	sp,sp,8
  80d008:	f800283a 	ret
  80d00c:	0011883a 	mov	r8,zero
  80d010:	024ffc34 	movhi	r9,16368
  80d014:	0005883a 	mov	r2,zero
  80d018:	00d00934 	movhi	r3,16420
  80d01c:	480b883a 	mov	r5,r9
  80d020:	4009883a 	mov	r4,r8
  80d024:	180f883a 	mov	r7,r3
  80d028:	100d883a 	mov	r6,r2
  80d02c:	08060880 	call	806088 <__muldf3>
  80d030:	843fffc4 	addi	r16,r16,-1
  80d034:	1011883a 	mov	r8,r2
  80d038:	1813883a 	mov	r9,r3
  80d03c:	803ff51e 	bne	r16,zero,80d014 <_mprec_log10+0x50>
  80d040:	4005883a 	mov	r2,r8
  80d044:	4807883a 	mov	r3,r9
  80d048:	dfc00117 	ldw	ra,4(sp)
  80d04c:	dc000017 	ldw	r16,0(sp)
  80d050:	dec00204 	addi	sp,sp,8
  80d054:	f800283a 	ret

0080d058 <__copybits>:
  80d058:	297fffc4 	addi	r5,r5,-1
  80d05c:	30800417 	ldw	r2,16(r6)
  80d060:	280bd17a 	srai	r5,r5,5
  80d064:	31800504 	addi	r6,r6,20
  80d068:	1085883a 	add	r2,r2,r2
  80d06c:	294b883a 	add	r5,r5,r5
  80d070:	294b883a 	add	r5,r5,r5
  80d074:	1085883a 	add	r2,r2,r2
  80d078:	290b883a 	add	r5,r5,r4
  80d07c:	3087883a 	add	r3,r6,r2
  80d080:	29400104 	addi	r5,r5,4
  80d084:	30c0052e 	bgeu	r6,r3,80d09c <__copybits+0x44>
  80d088:	30800017 	ldw	r2,0(r6)
  80d08c:	31800104 	addi	r6,r6,4
  80d090:	20800015 	stw	r2,0(r4)
  80d094:	21000104 	addi	r4,r4,4
  80d098:	30fffb36 	bltu	r6,r3,80d088 <__copybits+0x30>
  80d09c:	2140032e 	bgeu	r4,r5,80d0ac <__copybits+0x54>
  80d0a0:	20000015 	stw	zero,0(r4)
  80d0a4:	21000104 	addi	r4,r4,4
  80d0a8:	217ffd36 	bltu	r4,r5,80d0a0 <__copybits+0x48>
  80d0ac:	f800283a 	ret

0080d0b0 <__any_on>:
  80d0b0:	20800417 	ldw	r2,16(r4)
  80d0b4:	2807d17a 	srai	r3,r5,5
  80d0b8:	21000504 	addi	r4,r4,20
  80d0bc:	10c00d0e 	bge	r2,r3,80d0f4 <__any_on+0x44>
  80d0c0:	1085883a 	add	r2,r2,r2
  80d0c4:	1085883a 	add	r2,r2,r2
  80d0c8:	208d883a 	add	r6,r4,r2
  80d0cc:	2180182e 	bgeu	r4,r6,80d130 <__any_on+0x80>
  80d0d0:	30bfff17 	ldw	r2,-4(r6)
  80d0d4:	30ffff04 	addi	r3,r6,-4
  80d0d8:	1000041e 	bne	r2,zero,80d0ec <__any_on+0x3c>
  80d0dc:	20c0142e 	bgeu	r4,r3,80d130 <__any_on+0x80>
  80d0e0:	18ffff04 	addi	r3,r3,-4
  80d0e4:	18800017 	ldw	r2,0(r3)
  80d0e8:	103ffc26 	beq	r2,zero,80d0dc <__any_on+0x2c>
  80d0ec:	00800044 	movi	r2,1
  80d0f0:	f800283a 	ret
  80d0f4:	18800a0e 	bge	r3,r2,80d120 <__any_on+0x70>
  80d0f8:	294007cc 	andi	r5,r5,31
  80d0fc:	28000826 	beq	r5,zero,80d120 <__any_on+0x70>
  80d100:	18c5883a 	add	r2,r3,r3
  80d104:	1085883a 	add	r2,r2,r2
  80d108:	208d883a 	add	r6,r4,r2
  80d10c:	30c00017 	ldw	r3,0(r6)
  80d110:	1944d83a 	srl	r2,r3,r5
  80d114:	1144983a 	sll	r2,r2,r5
  80d118:	18bff41e 	bne	r3,r2,80d0ec <__any_on+0x3c>
  80d11c:	003feb06 	br	80d0cc <__any_on+0x1c>
  80d120:	18c5883a 	add	r2,r3,r3
  80d124:	1085883a 	add	r2,r2,r2
  80d128:	208d883a 	add	r6,r4,r2
  80d12c:	003fe706 	br	80d0cc <__any_on+0x1c>
  80d130:	0005883a 	mov	r2,zero
  80d134:	f800283a 	ret

0080d138 <_Balloc>:
  80d138:	20c01317 	ldw	r3,76(r4)
  80d13c:	defffb04 	addi	sp,sp,-20
  80d140:	dcc00315 	stw	r19,12(sp)
  80d144:	dc800215 	stw	r18,8(sp)
  80d148:	dfc00415 	stw	ra,16(sp)
  80d14c:	2825883a 	mov	r18,r5
  80d150:	dc400115 	stw	r17,4(sp)
  80d154:	dc000015 	stw	r16,0(sp)
  80d158:	2027883a 	mov	r19,r4
  80d15c:	01800404 	movi	r6,16
  80d160:	01400104 	movi	r5,4
  80d164:	18001726 	beq	r3,zero,80d1c4 <_Balloc+0x8c>
  80d168:	01400044 	movi	r5,1
  80d16c:	9485883a 	add	r2,r18,r18
  80d170:	2ca2983a 	sll	r17,r5,r18
  80d174:	1085883a 	add	r2,r2,r2
  80d178:	10c7883a 	add	r3,r2,r3
  80d17c:	1c000017 	ldw	r16,0(r3)
  80d180:	8c4d883a 	add	r6,r17,r17
  80d184:	318d883a 	add	r6,r6,r6
  80d188:	9809883a 	mov	r4,r19
  80d18c:	31800504 	addi	r6,r6,20
  80d190:	80001226 	beq	r16,zero,80d1dc <_Balloc+0xa4>
  80d194:	80800017 	ldw	r2,0(r16)
  80d198:	18800015 	stw	r2,0(r3)
  80d19c:	80000415 	stw	zero,16(r16)
  80d1a0:	80000315 	stw	zero,12(r16)
  80d1a4:	8005883a 	mov	r2,r16
  80d1a8:	dfc00417 	ldw	ra,16(sp)
  80d1ac:	dcc00317 	ldw	r19,12(sp)
  80d1b0:	dc800217 	ldw	r18,8(sp)
  80d1b4:	dc400117 	ldw	r17,4(sp)
  80d1b8:	dc000017 	ldw	r16,0(sp)
  80d1bc:	dec00504 	addi	sp,sp,20
  80d1c0:	f800283a 	ret
  80d1c4:	080e5680 	call	80e568 <_calloc_r>
  80d1c8:	1007883a 	mov	r3,r2
  80d1cc:	0021883a 	mov	r16,zero
  80d1d0:	98801315 	stw	r2,76(r19)
  80d1d4:	103fe41e 	bne	r2,zero,80d168 <_Balloc+0x30>
  80d1d8:	003ff206 	br	80d1a4 <_Balloc+0x6c>
  80d1dc:	080e5680 	call	80e568 <_calloc_r>
  80d1e0:	103ff026 	beq	r2,zero,80d1a4 <_Balloc+0x6c>
  80d1e4:	1021883a 	mov	r16,r2
  80d1e8:	14800115 	stw	r18,4(r2)
  80d1ec:	14400215 	stw	r17,8(r2)
  80d1f0:	003fea06 	br	80d19c <_Balloc+0x64>

0080d1f4 <__d2b>:
  80d1f4:	defff504 	addi	sp,sp,-44
  80d1f8:	dcc00515 	stw	r19,20(sp)
  80d1fc:	04c00044 	movi	r19,1
  80d200:	dc000215 	stw	r16,8(sp)
  80d204:	2821883a 	mov	r16,r5
  80d208:	980b883a 	mov	r5,r19
  80d20c:	ddc00915 	stw	r23,36(sp)
  80d210:	dd800815 	stw	r22,32(sp)
  80d214:	dd400715 	stw	r21,28(sp)
  80d218:	dd000615 	stw	r20,24(sp)
  80d21c:	dc800415 	stw	r18,16(sp)
  80d220:	dc400315 	stw	r17,12(sp)
  80d224:	dfc00a15 	stw	ra,40(sp)
  80d228:	3023883a 	mov	r17,r6
  80d22c:	382d883a 	mov	r22,r7
  80d230:	ddc00b17 	ldw	r23,44(sp)
  80d234:	080d1380 	call	80d138 <_Balloc>
  80d238:	1025883a 	mov	r18,r2
  80d23c:	00a00034 	movhi	r2,32768
  80d240:	10bfffc4 	addi	r2,r2,-1
  80d244:	8888703a 	and	r4,r17,r2
  80d248:	202ad53a 	srli	r21,r4,20
  80d24c:	00800434 	movhi	r2,16
  80d250:	10bfffc4 	addi	r2,r2,-1
  80d254:	8886703a 	and	r3,r17,r2
  80d258:	a829003a 	cmpeq	r20,r21,zero
  80d25c:	800b883a 	mov	r5,r16
  80d260:	d8c00115 	stw	r3,4(sp)
  80d264:	94000504 	addi	r16,r18,20
  80d268:	a000021e 	bne	r20,zero,80d274 <__d2b+0x80>
  80d26c:	18c00434 	orhi	r3,r3,16
  80d270:	d8c00115 	stw	r3,4(sp)
  80d274:	28002726 	beq	r5,zero,80d314 <__d2b+0x120>
  80d278:	d809883a 	mov	r4,sp
  80d27c:	d9400015 	stw	r5,0(sp)
  80d280:	080cc500 	call	80cc50 <__lo0bits>
  80d284:	100d883a 	mov	r6,r2
  80d288:	10003526 	beq	r2,zero,80d360 <__d2b+0x16c>
  80d28c:	d8c00117 	ldw	r3,4(sp)
  80d290:	00800804 	movi	r2,32
  80d294:	1185c83a 	sub	r2,r2,r6
  80d298:	d9000017 	ldw	r4,0(sp)
  80d29c:	1886983a 	sll	r3,r3,r2
  80d2a0:	1906b03a 	or	r3,r3,r4
  80d2a4:	90c00515 	stw	r3,20(r18)
  80d2a8:	d8c00117 	ldw	r3,4(sp)
  80d2ac:	1986d83a 	srl	r3,r3,r6
  80d2b0:	d8c00115 	stw	r3,4(sp)
  80d2b4:	180b003a 	cmpeq	r5,r3,zero
  80d2b8:	00800084 	movi	r2,2
  80d2bc:	114bc83a 	sub	r5,r2,r5
  80d2c0:	80c00115 	stw	r3,4(r16)
  80d2c4:	91400415 	stw	r5,16(r18)
  80d2c8:	a0001a1e 	bne	r20,zero,80d334 <__d2b+0x140>
  80d2cc:	3545883a 	add	r2,r6,r21
  80d2d0:	10bef344 	addi	r2,r2,-1075
  80d2d4:	00c00d44 	movi	r3,53
  80d2d8:	b0800015 	stw	r2,0(r22)
  80d2dc:	1987c83a 	sub	r3,r3,r6
  80d2e0:	b8c00015 	stw	r3,0(r23)
  80d2e4:	9005883a 	mov	r2,r18
  80d2e8:	dfc00a17 	ldw	ra,40(sp)
  80d2ec:	ddc00917 	ldw	r23,36(sp)
  80d2f0:	dd800817 	ldw	r22,32(sp)
  80d2f4:	dd400717 	ldw	r21,28(sp)
  80d2f8:	dd000617 	ldw	r20,24(sp)
  80d2fc:	dcc00517 	ldw	r19,20(sp)
  80d300:	dc800417 	ldw	r18,16(sp)
  80d304:	dc400317 	ldw	r17,12(sp)
  80d308:	dc000217 	ldw	r16,8(sp)
  80d30c:	dec00b04 	addi	sp,sp,44
  80d310:	f800283a 	ret
  80d314:	d9000104 	addi	r4,sp,4
  80d318:	080cc500 	call	80cc50 <__lo0bits>
  80d31c:	11800804 	addi	r6,r2,32
  80d320:	d8800117 	ldw	r2,4(sp)
  80d324:	94c00415 	stw	r19,16(r18)
  80d328:	980b883a 	mov	r5,r19
  80d32c:	90800515 	stw	r2,20(r18)
  80d330:	a03fe626 	beq	r20,zero,80d2cc <__d2b+0xd8>
  80d334:	2945883a 	add	r2,r5,r5
  80d338:	1085883a 	add	r2,r2,r2
  80d33c:	1405883a 	add	r2,r2,r16
  80d340:	113fff17 	ldw	r4,-4(r2)
  80d344:	30fef384 	addi	r3,r6,-1074
  80d348:	2820917a 	slli	r16,r5,5
  80d34c:	b0c00015 	stw	r3,0(r22)
  80d350:	080cbe00 	call	80cbe0 <__hi0bits>
  80d354:	80a1c83a 	sub	r16,r16,r2
  80d358:	bc000015 	stw	r16,0(r23)
  80d35c:	003fe106 	br	80d2e4 <__d2b+0xf0>
  80d360:	d8800017 	ldw	r2,0(sp)
  80d364:	90800515 	stw	r2,20(r18)
  80d368:	d8c00117 	ldw	r3,4(sp)
  80d36c:	003fd106 	br	80d2b4 <__d2b+0xc0>

0080d370 <__mdiff>:
  80d370:	defffb04 	addi	sp,sp,-20
  80d374:	dc000015 	stw	r16,0(sp)
  80d378:	2821883a 	mov	r16,r5
  80d37c:	dc800215 	stw	r18,8(sp)
  80d380:	300b883a 	mov	r5,r6
  80d384:	2025883a 	mov	r18,r4
  80d388:	8009883a 	mov	r4,r16
  80d38c:	dc400115 	stw	r17,4(sp)
  80d390:	dfc00415 	stw	ra,16(sp)
  80d394:	dcc00315 	stw	r19,12(sp)
  80d398:	3023883a 	mov	r17,r6
  80d39c:	080cd140 	call	80cd14 <__mcmp>
  80d3a0:	10004226 	beq	r2,zero,80d4ac <__mdiff+0x13c>
  80d3a4:	10005016 	blt	r2,zero,80d4e8 <__mdiff+0x178>
  80d3a8:	0027883a 	mov	r19,zero
  80d3ac:	81400117 	ldw	r5,4(r16)
  80d3b0:	9009883a 	mov	r4,r18
  80d3b4:	080d1380 	call	80d138 <_Balloc>
  80d3b8:	1019883a 	mov	r12,r2
  80d3bc:	82800417 	ldw	r10,16(r16)
  80d3c0:	88800417 	ldw	r2,16(r17)
  80d3c4:	81800504 	addi	r6,r16,20
  80d3c8:	5287883a 	add	r3,r10,r10
  80d3cc:	1085883a 	add	r2,r2,r2
  80d3d0:	18c7883a 	add	r3,r3,r3
  80d3d4:	1085883a 	add	r2,r2,r2
  80d3d8:	8a000504 	addi	r8,r17,20
  80d3dc:	64c00315 	stw	r19,12(r12)
  80d3e0:	30db883a 	add	r13,r6,r3
  80d3e4:	4097883a 	add	r11,r8,r2
  80d3e8:	61c00504 	addi	r7,r12,20
  80d3ec:	0013883a 	mov	r9,zero
  80d3f0:	31000017 	ldw	r4,0(r6)
  80d3f4:	41400017 	ldw	r5,0(r8)
  80d3f8:	42000104 	addi	r8,r8,4
  80d3fc:	20bfffcc 	andi	r2,r4,65535
  80d400:	28ffffcc 	andi	r3,r5,65535
  80d404:	10c5c83a 	sub	r2,r2,r3
  80d408:	1245883a 	add	r2,r2,r9
  80d40c:	2008d43a 	srli	r4,r4,16
  80d410:	280ad43a 	srli	r5,r5,16
  80d414:	1007d43a 	srai	r3,r2,16
  80d418:	3880000d 	sth	r2,0(r7)
  80d41c:	2149c83a 	sub	r4,r4,r5
  80d420:	20c9883a 	add	r4,r4,r3
  80d424:	3900008d 	sth	r4,2(r7)
  80d428:	31800104 	addi	r6,r6,4
  80d42c:	39c00104 	addi	r7,r7,4
  80d430:	2013d43a 	srai	r9,r4,16
  80d434:	42ffee36 	bltu	r8,r11,80d3f0 <__mdiff+0x80>
  80d438:	33400c2e 	bgeu	r6,r13,80d46c <__mdiff+0xfc>
  80d43c:	30800017 	ldw	r2,0(r6)
  80d440:	31800104 	addi	r6,r6,4
  80d444:	10ffffcc 	andi	r3,r2,65535
  80d448:	1a47883a 	add	r3,r3,r9
  80d44c:	1004d43a 	srli	r2,r2,16
  80d450:	1809d43a 	srai	r4,r3,16
  80d454:	38c0000d 	sth	r3,0(r7)
  80d458:	1105883a 	add	r2,r2,r4
  80d45c:	3880008d 	sth	r2,2(r7)
  80d460:	1013d43a 	srai	r9,r2,16
  80d464:	39c00104 	addi	r7,r7,4
  80d468:	337ff436 	bltu	r6,r13,80d43c <__mdiff+0xcc>
  80d46c:	38bfff17 	ldw	r2,-4(r7)
  80d470:	38ffff04 	addi	r3,r7,-4
  80d474:	1000041e 	bne	r2,zero,80d488 <__mdiff+0x118>
  80d478:	18ffff04 	addi	r3,r3,-4
  80d47c:	18800017 	ldw	r2,0(r3)
  80d480:	52bfffc4 	addi	r10,r10,-1
  80d484:	103ffc26 	beq	r2,zero,80d478 <__mdiff+0x108>
  80d488:	6005883a 	mov	r2,r12
  80d48c:	62800415 	stw	r10,16(r12)
  80d490:	dfc00417 	ldw	ra,16(sp)
  80d494:	dcc00317 	ldw	r19,12(sp)
  80d498:	dc800217 	ldw	r18,8(sp)
  80d49c:	dc400117 	ldw	r17,4(sp)
  80d4a0:	dc000017 	ldw	r16,0(sp)
  80d4a4:	dec00504 	addi	sp,sp,20
  80d4a8:	f800283a 	ret
  80d4ac:	9009883a 	mov	r4,r18
  80d4b0:	000b883a 	mov	r5,zero
  80d4b4:	080d1380 	call	80d138 <_Balloc>
  80d4b8:	1019883a 	mov	r12,r2
  80d4bc:	00800044 	movi	r2,1
  80d4c0:	60800415 	stw	r2,16(r12)
  80d4c4:	6005883a 	mov	r2,r12
  80d4c8:	60000515 	stw	zero,20(r12)
  80d4cc:	dfc00417 	ldw	ra,16(sp)
  80d4d0:	dcc00317 	ldw	r19,12(sp)
  80d4d4:	dc800217 	ldw	r18,8(sp)
  80d4d8:	dc400117 	ldw	r17,4(sp)
  80d4dc:	dc000017 	ldw	r16,0(sp)
  80d4e0:	dec00504 	addi	sp,sp,20
  80d4e4:	f800283a 	ret
  80d4e8:	880d883a 	mov	r6,r17
  80d4ec:	04c00044 	movi	r19,1
  80d4f0:	8023883a 	mov	r17,r16
  80d4f4:	3021883a 	mov	r16,r6
  80d4f8:	003fac06 	br	80d3ac <__mdiff+0x3c>

0080d4fc <__lshift>:
  80d4fc:	defff904 	addi	sp,sp,-28
  80d500:	28800417 	ldw	r2,16(r5)
  80d504:	dc000015 	stw	r16,0(sp)
  80d508:	3021d17a 	srai	r16,r6,5
  80d50c:	28c00217 	ldw	r3,8(r5)
  80d510:	10800044 	addi	r2,r2,1
  80d514:	dc400115 	stw	r17,4(sp)
  80d518:	80a3883a 	add	r17,r16,r2
  80d51c:	dd400515 	stw	r21,20(sp)
  80d520:	dd000415 	stw	r20,16(sp)
  80d524:	dc800215 	stw	r18,8(sp)
  80d528:	dfc00615 	stw	ra,24(sp)
  80d52c:	2825883a 	mov	r18,r5
  80d530:	dcc00315 	stw	r19,12(sp)
  80d534:	3029883a 	mov	r20,r6
  80d538:	202b883a 	mov	r21,r4
  80d53c:	29400117 	ldw	r5,4(r5)
  80d540:	1c40030e 	bge	r3,r17,80d550 <__lshift+0x54>
  80d544:	18c7883a 	add	r3,r3,r3
  80d548:	29400044 	addi	r5,r5,1
  80d54c:	1c7ffd16 	blt	r3,r17,80d544 <__lshift+0x48>
  80d550:	a809883a 	mov	r4,r21
  80d554:	080d1380 	call	80d138 <_Balloc>
  80d558:	1027883a 	mov	r19,r2
  80d55c:	11400504 	addi	r5,r2,20
  80d560:	0400090e 	bge	zero,r16,80d588 <__lshift+0x8c>
  80d564:	2805883a 	mov	r2,r5
  80d568:	0007883a 	mov	r3,zero
  80d56c:	18c00044 	addi	r3,r3,1
  80d570:	10000015 	stw	zero,0(r2)
  80d574:	10800104 	addi	r2,r2,4
  80d578:	80fffc1e 	bne	r16,r3,80d56c <__lshift+0x70>
  80d57c:	8405883a 	add	r2,r16,r16
  80d580:	1085883a 	add	r2,r2,r2
  80d584:	288b883a 	add	r5,r5,r2
  80d588:	90800417 	ldw	r2,16(r18)
  80d58c:	91000504 	addi	r4,r18,20
  80d590:	a18007cc 	andi	r6,r20,31
  80d594:	1085883a 	add	r2,r2,r2
  80d598:	1085883a 	add	r2,r2,r2
  80d59c:	208f883a 	add	r7,r4,r2
  80d5a0:	30001e26 	beq	r6,zero,80d61c <__lshift+0x120>
  80d5a4:	00800804 	movi	r2,32
  80d5a8:	1191c83a 	sub	r8,r2,r6
  80d5ac:	0007883a 	mov	r3,zero
  80d5b0:	20800017 	ldw	r2,0(r4)
  80d5b4:	1184983a 	sll	r2,r2,r6
  80d5b8:	1884b03a 	or	r2,r3,r2
  80d5bc:	28800015 	stw	r2,0(r5)
  80d5c0:	20c00017 	ldw	r3,0(r4)
  80d5c4:	21000104 	addi	r4,r4,4
  80d5c8:	29400104 	addi	r5,r5,4
  80d5cc:	1a06d83a 	srl	r3,r3,r8
  80d5d0:	21fff736 	bltu	r4,r7,80d5b0 <__lshift+0xb4>
  80d5d4:	28c00015 	stw	r3,0(r5)
  80d5d8:	18000126 	beq	r3,zero,80d5e0 <__lshift+0xe4>
  80d5dc:	8c400044 	addi	r17,r17,1
  80d5e0:	88bfffc4 	addi	r2,r17,-1
  80d5e4:	98800415 	stw	r2,16(r19)
  80d5e8:	a809883a 	mov	r4,r21
  80d5ec:	900b883a 	mov	r5,r18
  80d5f0:	080cbb80 	call	80cbb8 <_Bfree>
  80d5f4:	9805883a 	mov	r2,r19
  80d5f8:	dfc00617 	ldw	ra,24(sp)
  80d5fc:	dd400517 	ldw	r21,20(sp)
  80d600:	dd000417 	ldw	r20,16(sp)
  80d604:	dcc00317 	ldw	r19,12(sp)
  80d608:	dc800217 	ldw	r18,8(sp)
  80d60c:	dc400117 	ldw	r17,4(sp)
  80d610:	dc000017 	ldw	r16,0(sp)
  80d614:	dec00704 	addi	sp,sp,28
  80d618:	f800283a 	ret
  80d61c:	20800017 	ldw	r2,0(r4)
  80d620:	21000104 	addi	r4,r4,4
  80d624:	28800015 	stw	r2,0(r5)
  80d628:	29400104 	addi	r5,r5,4
  80d62c:	21ffec2e 	bgeu	r4,r7,80d5e0 <__lshift+0xe4>
  80d630:	20800017 	ldw	r2,0(r4)
  80d634:	21000104 	addi	r4,r4,4
  80d638:	28800015 	stw	r2,0(r5)
  80d63c:	29400104 	addi	r5,r5,4
  80d640:	21fff636 	bltu	r4,r7,80d61c <__lshift+0x120>
  80d644:	003fe606 	br	80d5e0 <__lshift+0xe4>

0080d648 <__multiply>:
  80d648:	defff004 	addi	sp,sp,-64
  80d64c:	dc800815 	stw	r18,32(sp)
  80d650:	dc400715 	stw	r17,28(sp)
  80d654:	2c800417 	ldw	r18,16(r5)
  80d658:	34400417 	ldw	r17,16(r6)
  80d65c:	dcc00915 	stw	r19,36(sp)
  80d660:	dc000615 	stw	r16,24(sp)
  80d664:	dfc00f15 	stw	ra,60(sp)
  80d668:	df000e15 	stw	fp,56(sp)
  80d66c:	ddc00d15 	stw	r23,52(sp)
  80d670:	dd800c15 	stw	r22,48(sp)
  80d674:	dd400b15 	stw	r21,44(sp)
  80d678:	dd000a15 	stw	r20,40(sp)
  80d67c:	2821883a 	mov	r16,r5
  80d680:	3027883a 	mov	r19,r6
  80d684:	9440040e 	bge	r18,r17,80d698 <__multiply+0x50>
  80d688:	8825883a 	mov	r18,r17
  80d68c:	2c400417 	ldw	r17,16(r5)
  80d690:	2827883a 	mov	r19,r5
  80d694:	3021883a 	mov	r16,r6
  80d698:	80800217 	ldw	r2,8(r16)
  80d69c:	9447883a 	add	r3,r18,r17
  80d6a0:	d8c00415 	stw	r3,16(sp)
  80d6a4:	81400117 	ldw	r5,4(r16)
  80d6a8:	10c0010e 	bge	r2,r3,80d6b0 <__multiply+0x68>
  80d6ac:	29400044 	addi	r5,r5,1
  80d6b0:	080d1380 	call	80d138 <_Balloc>
  80d6b4:	d8800515 	stw	r2,20(sp)
  80d6b8:	d9000417 	ldw	r4,16(sp)
  80d6bc:	d8c00517 	ldw	r3,20(sp)
  80d6c0:	2105883a 	add	r2,r4,r4
  80d6c4:	1085883a 	add	r2,r2,r2
  80d6c8:	19000504 	addi	r4,r3,20
  80d6cc:	2085883a 	add	r2,r4,r2
  80d6d0:	d8800315 	stw	r2,12(sp)
  80d6d4:	2080052e 	bgeu	r4,r2,80d6ec <__multiply+0xa4>
  80d6d8:	2005883a 	mov	r2,r4
  80d6dc:	d8c00317 	ldw	r3,12(sp)
  80d6e0:	10000015 	stw	zero,0(r2)
  80d6e4:	10800104 	addi	r2,r2,4
  80d6e8:	10fffc36 	bltu	r2,r3,80d6dc <__multiply+0x94>
  80d6ec:	8c45883a 	add	r2,r17,r17
  80d6f0:	9487883a 	add	r3,r18,r18
  80d6f4:	9dc00504 	addi	r23,r19,20
  80d6f8:	1085883a 	add	r2,r2,r2
  80d6fc:	84000504 	addi	r16,r16,20
  80d700:	18c7883a 	add	r3,r3,r3
  80d704:	b885883a 	add	r2,r23,r2
  80d708:	dc000015 	stw	r16,0(sp)
  80d70c:	d8800215 	stw	r2,8(sp)
  80d710:	80f9883a 	add	fp,r16,r3
  80d714:	b880432e 	bgeu	r23,r2,80d824 <__multiply+0x1dc>
  80d718:	d9000115 	stw	r4,4(sp)
  80d71c:	b9000017 	ldw	r4,0(r23)
  80d720:	253fffcc 	andi	r20,r4,65535
  80d724:	a0001a26 	beq	r20,zero,80d790 <__multiply+0x148>
  80d728:	dcc00017 	ldw	r19,0(sp)
  80d72c:	dc800117 	ldw	r18,4(sp)
  80d730:	002b883a 	mov	r21,zero
  80d734:	9c400017 	ldw	r17,0(r19)
  80d738:	94000017 	ldw	r16,0(r18)
  80d73c:	a009883a 	mov	r4,r20
  80d740:	897fffcc 	andi	r5,r17,65535
  80d744:	0806c3c0 	call	806c3c <__mulsi3>
  80d748:	880ad43a 	srli	r5,r17,16
  80d74c:	80ffffcc 	andi	r3,r16,65535
  80d750:	a8c7883a 	add	r3,r21,r3
  80d754:	a009883a 	mov	r4,r20
  80d758:	10e3883a 	add	r17,r2,r3
  80d75c:	8020d43a 	srli	r16,r16,16
  80d760:	0806c3c0 	call	806c3c <__mulsi3>
  80d764:	8806d43a 	srli	r3,r17,16
  80d768:	1405883a 	add	r2,r2,r16
  80d76c:	9cc00104 	addi	r19,r19,4
  80d770:	1887883a 	add	r3,r3,r2
  80d774:	90c0008d 	sth	r3,2(r18)
  80d778:	9440000d 	sth	r17,0(r18)
  80d77c:	182ad43a 	srli	r21,r3,16
  80d780:	94800104 	addi	r18,r18,4
  80d784:	9f3feb36 	bltu	r19,fp,80d734 <__multiply+0xec>
  80d788:	95400015 	stw	r21,0(r18)
  80d78c:	b9000017 	ldw	r4,0(r23)
  80d790:	202ad43a 	srli	r21,r4,16
  80d794:	a8001c26 	beq	r21,zero,80d808 <__multiply+0x1c0>
  80d798:	d9000117 	ldw	r4,4(sp)
  80d79c:	dd000017 	ldw	r20,0(sp)
  80d7a0:	002d883a 	mov	r22,zero
  80d7a4:	24c00017 	ldw	r19,0(r4)
  80d7a8:	2025883a 	mov	r18,r4
  80d7ac:	9823883a 	mov	r17,r19
  80d7b0:	a4000017 	ldw	r16,0(r20)
  80d7b4:	a809883a 	mov	r4,r21
  80d7b8:	a5000104 	addi	r20,r20,4
  80d7bc:	817fffcc 	andi	r5,r16,65535
  80d7c0:	0806c3c0 	call	806c3c <__mulsi3>
  80d7c4:	8806d43a 	srli	r3,r17,16
  80d7c8:	800ad43a 	srli	r5,r16,16
  80d7cc:	94c0000d 	sth	r19,0(r18)
  80d7d0:	b0c7883a 	add	r3,r22,r3
  80d7d4:	10e1883a 	add	r16,r2,r3
  80d7d8:	9400008d 	sth	r16,2(r18)
  80d7dc:	a809883a 	mov	r4,r21
  80d7e0:	94800104 	addi	r18,r18,4
  80d7e4:	0806c3c0 	call	806c3c <__mulsi3>
  80d7e8:	94400017 	ldw	r17,0(r18)
  80d7ec:	8020d43a 	srli	r16,r16,16
  80d7f0:	88ffffcc 	andi	r3,r17,65535
  80d7f4:	10c5883a 	add	r2,r2,r3
  80d7f8:	80a7883a 	add	r19,r16,r2
  80d7fc:	982cd43a 	srli	r22,r19,16
  80d800:	a73feb36 	bltu	r20,fp,80d7b0 <__multiply+0x168>
  80d804:	94c00015 	stw	r19,0(r18)
  80d808:	d8800217 	ldw	r2,8(sp)
  80d80c:	bdc00104 	addi	r23,r23,4
  80d810:	b880042e 	bgeu	r23,r2,80d824 <__multiply+0x1dc>
  80d814:	d8c00117 	ldw	r3,4(sp)
  80d818:	18c00104 	addi	r3,r3,4
  80d81c:	d8c00115 	stw	r3,4(sp)
  80d820:	003fbe06 	br	80d71c <__multiply+0xd4>
  80d824:	d9000417 	ldw	r4,16(sp)
  80d828:	01000c0e 	bge	zero,r4,80d85c <__multiply+0x214>
  80d82c:	d8c00317 	ldw	r3,12(sp)
  80d830:	18bfff17 	ldw	r2,-4(r3)
  80d834:	18ffff04 	addi	r3,r3,-4
  80d838:	10000326 	beq	r2,zero,80d848 <__multiply+0x200>
  80d83c:	00000706 	br	80d85c <__multiply+0x214>
  80d840:	18800017 	ldw	r2,0(r3)
  80d844:	1000051e 	bne	r2,zero,80d85c <__multiply+0x214>
  80d848:	d9000417 	ldw	r4,16(sp)
  80d84c:	18ffff04 	addi	r3,r3,-4
  80d850:	213fffc4 	addi	r4,r4,-1
  80d854:	d9000415 	stw	r4,16(sp)
  80d858:	203ff91e 	bne	r4,zero,80d840 <__multiply+0x1f8>
  80d85c:	d8800417 	ldw	r2,16(sp)
  80d860:	d8c00517 	ldw	r3,20(sp)
  80d864:	18800415 	stw	r2,16(r3)
  80d868:	1805883a 	mov	r2,r3
  80d86c:	dfc00f17 	ldw	ra,60(sp)
  80d870:	df000e17 	ldw	fp,56(sp)
  80d874:	ddc00d17 	ldw	r23,52(sp)
  80d878:	dd800c17 	ldw	r22,48(sp)
  80d87c:	dd400b17 	ldw	r21,44(sp)
  80d880:	dd000a17 	ldw	r20,40(sp)
  80d884:	dcc00917 	ldw	r19,36(sp)
  80d888:	dc800817 	ldw	r18,32(sp)
  80d88c:	dc400717 	ldw	r17,28(sp)
  80d890:	dc000617 	ldw	r16,24(sp)
  80d894:	dec01004 	addi	sp,sp,64
  80d898:	f800283a 	ret

0080d89c <__i2b>:
  80d89c:	defffd04 	addi	sp,sp,-12
  80d8a0:	dc000015 	stw	r16,0(sp)
  80d8a4:	04000044 	movi	r16,1
  80d8a8:	dc800115 	stw	r18,4(sp)
  80d8ac:	2825883a 	mov	r18,r5
  80d8b0:	800b883a 	mov	r5,r16
  80d8b4:	dfc00215 	stw	ra,8(sp)
  80d8b8:	080d1380 	call	80d138 <_Balloc>
  80d8bc:	14000415 	stw	r16,16(r2)
  80d8c0:	14800515 	stw	r18,20(r2)
  80d8c4:	dfc00217 	ldw	ra,8(sp)
  80d8c8:	dc800117 	ldw	r18,4(sp)
  80d8cc:	dc000017 	ldw	r16,0(sp)
  80d8d0:	dec00304 	addi	sp,sp,12
  80d8d4:	f800283a 	ret

0080d8d8 <__multadd>:
  80d8d8:	defff604 	addi	sp,sp,-40
  80d8dc:	dd800615 	stw	r22,24(sp)
  80d8e0:	2d800417 	ldw	r22,16(r5)
  80d8e4:	df000815 	stw	fp,32(sp)
  80d8e8:	ddc00715 	stw	r23,28(sp)
  80d8ec:	dd400515 	stw	r21,20(sp)
  80d8f0:	dd000415 	stw	r20,16(sp)
  80d8f4:	dcc00315 	stw	r19,12(sp)
  80d8f8:	dc800215 	stw	r18,8(sp)
  80d8fc:	dfc00915 	stw	ra,36(sp)
  80d900:	dc400115 	stw	r17,4(sp)
  80d904:	dc000015 	stw	r16,0(sp)
  80d908:	282f883a 	mov	r23,r5
  80d90c:	2039883a 	mov	fp,r4
  80d910:	302b883a 	mov	r21,r6
  80d914:	3829883a 	mov	r20,r7
  80d918:	2c800504 	addi	r18,r5,20
  80d91c:	0027883a 	mov	r19,zero
  80d920:	94400017 	ldw	r17,0(r18)
  80d924:	a80b883a 	mov	r5,r21
  80d928:	9cc00044 	addi	r19,r19,1
  80d92c:	893fffcc 	andi	r4,r17,65535
  80d930:	0806c3c0 	call	806c3c <__mulsi3>
  80d934:	8808d43a 	srli	r4,r17,16
  80d938:	1521883a 	add	r16,r2,r20
  80d93c:	a80b883a 	mov	r5,r21
  80d940:	0806c3c0 	call	806c3c <__mulsi3>
  80d944:	8008d43a 	srli	r4,r16,16
  80d948:	843fffcc 	andi	r16,r16,65535
  80d94c:	1105883a 	add	r2,r2,r4
  80d950:	1006943a 	slli	r3,r2,16
  80d954:	1028d43a 	srli	r20,r2,16
  80d958:	1c07883a 	add	r3,r3,r16
  80d95c:	90c00015 	stw	r3,0(r18)
  80d960:	94800104 	addi	r18,r18,4
  80d964:	9dbfee16 	blt	r19,r22,80d920 <__multadd+0x48>
  80d968:	a0000826 	beq	r20,zero,80d98c <__multadd+0xb4>
  80d96c:	b8800217 	ldw	r2,8(r23)
  80d970:	b080130e 	bge	r22,r2,80d9c0 <__multadd+0xe8>
  80d974:	b585883a 	add	r2,r22,r22
  80d978:	1085883a 	add	r2,r2,r2
  80d97c:	15c5883a 	add	r2,r2,r23
  80d980:	b0c00044 	addi	r3,r22,1
  80d984:	15000515 	stw	r20,20(r2)
  80d988:	b8c00415 	stw	r3,16(r23)
  80d98c:	b805883a 	mov	r2,r23
  80d990:	dfc00917 	ldw	ra,36(sp)
  80d994:	df000817 	ldw	fp,32(sp)
  80d998:	ddc00717 	ldw	r23,28(sp)
  80d99c:	dd800617 	ldw	r22,24(sp)
  80d9a0:	dd400517 	ldw	r21,20(sp)
  80d9a4:	dd000417 	ldw	r20,16(sp)
  80d9a8:	dcc00317 	ldw	r19,12(sp)
  80d9ac:	dc800217 	ldw	r18,8(sp)
  80d9b0:	dc400117 	ldw	r17,4(sp)
  80d9b4:	dc000017 	ldw	r16,0(sp)
  80d9b8:	dec00a04 	addi	sp,sp,40
  80d9bc:	f800283a 	ret
  80d9c0:	b9400117 	ldw	r5,4(r23)
  80d9c4:	e009883a 	mov	r4,fp
  80d9c8:	29400044 	addi	r5,r5,1
  80d9cc:	080d1380 	call	80d138 <_Balloc>
  80d9d0:	b9800417 	ldw	r6,16(r23)
  80d9d4:	b9400304 	addi	r5,r23,12
  80d9d8:	11000304 	addi	r4,r2,12
  80d9dc:	318d883a 	add	r6,r6,r6
  80d9e0:	318d883a 	add	r6,r6,r6
  80d9e4:	31800204 	addi	r6,r6,8
  80d9e8:	1023883a 	mov	r17,r2
  80d9ec:	080c9a00 	call	80c9a0 <memcpy>
  80d9f0:	b80b883a 	mov	r5,r23
  80d9f4:	e009883a 	mov	r4,fp
  80d9f8:	080cbb80 	call	80cbb8 <_Bfree>
  80d9fc:	882f883a 	mov	r23,r17
  80da00:	003fdc06 	br	80d974 <__multadd+0x9c>

0080da04 <__pow5mult>:
  80da04:	defffa04 	addi	sp,sp,-24
  80da08:	308000cc 	andi	r2,r6,3
  80da0c:	dd000415 	stw	r20,16(sp)
  80da10:	dcc00315 	stw	r19,12(sp)
  80da14:	dc000015 	stw	r16,0(sp)
  80da18:	dfc00515 	stw	ra,20(sp)
  80da1c:	dc800215 	stw	r18,8(sp)
  80da20:	dc400115 	stw	r17,4(sp)
  80da24:	3021883a 	mov	r16,r6
  80da28:	2027883a 	mov	r19,r4
  80da2c:	2829883a 	mov	r20,r5
  80da30:	10002b1e 	bne	r2,zero,80dae0 <__pow5mult+0xdc>
  80da34:	8025d0ba 	srai	r18,r16,2
  80da38:	90001b26 	beq	r18,zero,80daa8 <__pow5mult+0xa4>
  80da3c:	9c001217 	ldw	r16,72(r19)
  80da40:	8000081e 	bne	r16,zero,80da64 <__pow5mult+0x60>
  80da44:	00003006 	br	80db08 <__pow5mult+0x104>
  80da48:	800b883a 	mov	r5,r16
  80da4c:	800d883a 	mov	r6,r16
  80da50:	9809883a 	mov	r4,r19
  80da54:	90001426 	beq	r18,zero,80daa8 <__pow5mult+0xa4>
  80da58:	80800017 	ldw	r2,0(r16)
  80da5c:	10001b26 	beq	r2,zero,80dacc <__pow5mult+0xc8>
  80da60:	1021883a 	mov	r16,r2
  80da64:	9080004c 	andi	r2,r18,1
  80da68:	1005003a 	cmpeq	r2,r2,zero
  80da6c:	9025d07a 	srai	r18,r18,1
  80da70:	800d883a 	mov	r6,r16
  80da74:	9809883a 	mov	r4,r19
  80da78:	a00b883a 	mov	r5,r20
  80da7c:	103ff21e 	bne	r2,zero,80da48 <__pow5mult+0x44>
  80da80:	080d6480 	call	80d648 <__multiply>
  80da84:	a00b883a 	mov	r5,r20
  80da88:	9809883a 	mov	r4,r19
  80da8c:	1023883a 	mov	r17,r2
  80da90:	080cbb80 	call	80cbb8 <_Bfree>
  80da94:	8829883a 	mov	r20,r17
  80da98:	800b883a 	mov	r5,r16
  80da9c:	800d883a 	mov	r6,r16
  80daa0:	9809883a 	mov	r4,r19
  80daa4:	903fec1e 	bne	r18,zero,80da58 <__pow5mult+0x54>
  80daa8:	a005883a 	mov	r2,r20
  80daac:	dfc00517 	ldw	ra,20(sp)
  80dab0:	dd000417 	ldw	r20,16(sp)
  80dab4:	dcc00317 	ldw	r19,12(sp)
  80dab8:	dc800217 	ldw	r18,8(sp)
  80dabc:	dc400117 	ldw	r17,4(sp)
  80dac0:	dc000017 	ldw	r16,0(sp)
  80dac4:	dec00604 	addi	sp,sp,24
  80dac8:	f800283a 	ret
  80dacc:	080d6480 	call	80d648 <__multiply>
  80dad0:	80800015 	stw	r2,0(r16)
  80dad4:	1021883a 	mov	r16,r2
  80dad8:	10000015 	stw	zero,0(r2)
  80dadc:	003fe106 	br	80da64 <__pow5mult+0x60>
  80dae0:	1085883a 	add	r2,r2,r2
  80dae4:	00c020b4 	movhi	r3,130
  80dae8:	18efc004 	addi	r3,r3,-16640
  80daec:	1085883a 	add	r2,r2,r2
  80daf0:	10c5883a 	add	r2,r2,r3
  80daf4:	11bfff17 	ldw	r6,-4(r2)
  80daf8:	000f883a 	mov	r7,zero
  80dafc:	080d8d80 	call	80d8d8 <__multadd>
  80db00:	1029883a 	mov	r20,r2
  80db04:	003fcb06 	br	80da34 <__pow5mult+0x30>
  80db08:	9809883a 	mov	r4,r19
  80db0c:	01409c44 	movi	r5,625
  80db10:	080d89c0 	call	80d89c <__i2b>
  80db14:	98801215 	stw	r2,72(r19)
  80db18:	1021883a 	mov	r16,r2
  80db1c:	10000015 	stw	zero,0(r2)
  80db20:	003fd006 	br	80da64 <__pow5mult+0x60>

0080db24 <__s2b>:
  80db24:	defff904 	addi	sp,sp,-28
  80db28:	dcc00315 	stw	r19,12(sp)
  80db2c:	dc800215 	stw	r18,8(sp)
  80db30:	2827883a 	mov	r19,r5
  80db34:	2025883a 	mov	r18,r4
  80db38:	01400244 	movi	r5,9
  80db3c:	39000204 	addi	r4,r7,8
  80db40:	dd000415 	stw	r20,16(sp)
  80db44:	dc400115 	stw	r17,4(sp)
  80db48:	dfc00615 	stw	ra,24(sp)
  80db4c:	dd400515 	stw	r21,20(sp)
  80db50:	dc000015 	stw	r16,0(sp)
  80db54:	3829883a 	mov	r20,r7
  80db58:	3023883a 	mov	r17,r6
  80db5c:	0806b6c0 	call	806b6c <__divsi3>
  80db60:	00c00044 	movi	r3,1
  80db64:	1880350e 	bge	r3,r2,80dc3c <__s2b+0x118>
  80db68:	000b883a 	mov	r5,zero
  80db6c:	18c7883a 	add	r3,r3,r3
  80db70:	29400044 	addi	r5,r5,1
  80db74:	18bffd16 	blt	r3,r2,80db6c <__s2b+0x48>
  80db78:	9009883a 	mov	r4,r18
  80db7c:	080d1380 	call	80d138 <_Balloc>
  80db80:	1011883a 	mov	r8,r2
  80db84:	d8800717 	ldw	r2,28(sp)
  80db88:	00c00044 	movi	r3,1
  80db8c:	01800244 	movi	r6,9
  80db90:	40800515 	stw	r2,20(r8)
  80db94:	40c00415 	stw	r3,16(r8)
  80db98:	3440260e 	bge	r6,r17,80dc34 <__s2b+0x110>
  80db9c:	3021883a 	mov	r16,r6
  80dba0:	99ab883a 	add	r21,r19,r6
  80dba4:	9c05883a 	add	r2,r19,r16
  80dba8:	11c00007 	ldb	r7,0(r2)
  80dbac:	400b883a 	mov	r5,r8
  80dbb0:	9009883a 	mov	r4,r18
  80dbb4:	39fff404 	addi	r7,r7,-48
  80dbb8:	01800284 	movi	r6,10
  80dbbc:	080d8d80 	call	80d8d8 <__multadd>
  80dbc0:	84000044 	addi	r16,r16,1
  80dbc4:	1011883a 	mov	r8,r2
  80dbc8:	8c3ff61e 	bne	r17,r16,80dba4 <__s2b+0x80>
  80dbcc:	ac45883a 	add	r2,r21,r17
  80dbd0:	117ffe04 	addi	r5,r2,-8
  80dbd4:	880d883a 	mov	r6,r17
  80dbd8:	35000c0e 	bge	r6,r20,80dc0c <__s2b+0xe8>
  80dbdc:	a185c83a 	sub	r2,r20,r6
  80dbe0:	2821883a 	mov	r16,r5
  80dbe4:	28a3883a 	add	r17,r5,r2
  80dbe8:	81c00007 	ldb	r7,0(r16)
  80dbec:	400b883a 	mov	r5,r8
  80dbf0:	9009883a 	mov	r4,r18
  80dbf4:	39fff404 	addi	r7,r7,-48
  80dbf8:	01800284 	movi	r6,10
  80dbfc:	080d8d80 	call	80d8d8 <__multadd>
  80dc00:	84000044 	addi	r16,r16,1
  80dc04:	1011883a 	mov	r8,r2
  80dc08:	847ff71e 	bne	r16,r17,80dbe8 <__s2b+0xc4>
  80dc0c:	4005883a 	mov	r2,r8
  80dc10:	dfc00617 	ldw	ra,24(sp)
  80dc14:	dd400517 	ldw	r21,20(sp)
  80dc18:	dd000417 	ldw	r20,16(sp)
  80dc1c:	dcc00317 	ldw	r19,12(sp)
  80dc20:	dc800217 	ldw	r18,8(sp)
  80dc24:	dc400117 	ldw	r17,4(sp)
  80dc28:	dc000017 	ldw	r16,0(sp)
  80dc2c:	dec00704 	addi	sp,sp,28
  80dc30:	f800283a 	ret
  80dc34:	99400284 	addi	r5,r19,10
  80dc38:	003fe706 	br	80dbd8 <__s2b+0xb4>
  80dc3c:	000b883a 	mov	r5,zero
  80dc40:	003fcd06 	br	80db78 <__s2b+0x54>

0080dc44 <_realloc_r>:
  80dc44:	defff404 	addi	sp,sp,-48
  80dc48:	dd800815 	stw	r22,32(sp)
  80dc4c:	dc800415 	stw	r18,16(sp)
  80dc50:	dc400315 	stw	r17,12(sp)
  80dc54:	dfc00b15 	stw	ra,44(sp)
  80dc58:	df000a15 	stw	fp,40(sp)
  80dc5c:	ddc00915 	stw	r23,36(sp)
  80dc60:	dd400715 	stw	r21,28(sp)
  80dc64:	dd000615 	stw	r20,24(sp)
  80dc68:	dcc00515 	stw	r19,20(sp)
  80dc6c:	dc000215 	stw	r16,8(sp)
  80dc70:	2825883a 	mov	r18,r5
  80dc74:	3023883a 	mov	r17,r6
  80dc78:	202d883a 	mov	r22,r4
  80dc7c:	2800c926 	beq	r5,zero,80dfa4 <_realloc_r+0x360>
  80dc80:	08106ac0 	call	8106ac <__malloc_lock>
  80dc84:	943ffe04 	addi	r16,r18,-8
  80dc88:	88c002c4 	addi	r3,r17,11
  80dc8c:	00800584 	movi	r2,22
  80dc90:	82000117 	ldw	r8,4(r16)
  80dc94:	10c01b2e 	bgeu	r2,r3,80dd04 <_realloc_r+0xc0>
  80dc98:	00bffe04 	movi	r2,-8
  80dc9c:	188e703a 	and	r7,r3,r2
  80dca0:	3839883a 	mov	fp,r7
  80dca4:	38001a16 	blt	r7,zero,80dd10 <_realloc_r+0xcc>
  80dca8:	e4401936 	bltu	fp,r17,80dd10 <_realloc_r+0xcc>
  80dcac:	013fff04 	movi	r4,-4
  80dcb0:	4126703a 	and	r19,r8,r4
  80dcb4:	99c02616 	blt	r19,r7,80dd50 <_realloc_r+0x10c>
  80dcb8:	802b883a 	mov	r21,r16
  80dcbc:	9829883a 	mov	r20,r19
  80dcc0:	84000204 	addi	r16,r16,8
  80dcc4:	a80f883a 	mov	r7,r21
  80dcc8:	a70dc83a 	sub	r6,r20,fp
  80dccc:	008003c4 	movi	r2,15
  80dcd0:	1180c136 	bltu	r2,r6,80dfd8 <_realloc_r+0x394>
  80dcd4:	38800117 	ldw	r2,4(r7)
  80dcd8:	a549883a 	add	r4,r20,r21
  80dcdc:	1080004c 	andi	r2,r2,1
  80dce0:	a084b03a 	or	r2,r20,r2
  80dce4:	38800115 	stw	r2,4(r7)
  80dce8:	20c00117 	ldw	r3,4(r4)
  80dcec:	18c00054 	ori	r3,r3,1
  80dcf0:	20c00115 	stw	r3,4(r4)
  80dcf4:	b009883a 	mov	r4,r22
  80dcf8:	08107b40 	call	8107b4 <__malloc_unlock>
  80dcfc:	8023883a 	mov	r17,r16
  80dd00:	00000606 	br	80dd1c <_realloc_r+0xd8>
  80dd04:	01c00404 	movi	r7,16
  80dd08:	3839883a 	mov	fp,r7
  80dd0c:	e47fe72e 	bgeu	fp,r17,80dcac <_realloc_r+0x68>
  80dd10:	00800304 	movi	r2,12
  80dd14:	0023883a 	mov	r17,zero
  80dd18:	b0800015 	stw	r2,0(r22)
  80dd1c:	8805883a 	mov	r2,r17
  80dd20:	dfc00b17 	ldw	ra,44(sp)
  80dd24:	df000a17 	ldw	fp,40(sp)
  80dd28:	ddc00917 	ldw	r23,36(sp)
  80dd2c:	dd800817 	ldw	r22,32(sp)
  80dd30:	dd400717 	ldw	r21,28(sp)
  80dd34:	dd000617 	ldw	r20,24(sp)
  80dd38:	dcc00517 	ldw	r19,20(sp)
  80dd3c:	dc800417 	ldw	r18,16(sp)
  80dd40:	dc400317 	ldw	r17,12(sp)
  80dd44:	dc000217 	ldw	r16,8(sp)
  80dd48:	dec00c04 	addi	sp,sp,48
  80dd4c:	f800283a 	ret
  80dd50:	008020b4 	movhi	r2,130
  80dd54:	10b12e04 	addi	r2,r2,-15176
  80dd58:	12400217 	ldw	r9,8(r2)
  80dd5c:	84cd883a 	add	r6,r16,r19
  80dd60:	802b883a 	mov	r21,r16
  80dd64:	3240b926 	beq	r6,r9,80e04c <_realloc_r+0x408>
  80dd68:	31400117 	ldw	r5,4(r6)
  80dd6c:	00bfff84 	movi	r2,-2
  80dd70:	2884703a 	and	r2,r5,r2
  80dd74:	1185883a 	add	r2,r2,r6
  80dd78:	10c00117 	ldw	r3,4(r2)
  80dd7c:	18c0004c 	andi	r3,r3,1
  80dd80:	1807003a 	cmpeq	r3,r3,zero
  80dd84:	1800a326 	beq	r3,zero,80e014 <_realloc_r+0x3d0>
  80dd88:	2908703a 	and	r4,r5,r4
  80dd8c:	9929883a 	add	r20,r19,r4
  80dd90:	a1c0a30e 	bge	r20,r7,80e020 <_realloc_r+0x3dc>
  80dd94:	4080004c 	andi	r2,r8,1
  80dd98:	1000551e 	bne	r2,zero,80def0 <_realloc_r+0x2ac>
  80dd9c:	80800017 	ldw	r2,0(r16)
  80dda0:	80afc83a 	sub	r23,r16,r2
  80dda4:	b8c00117 	ldw	r3,4(r23)
  80dda8:	00bfff04 	movi	r2,-4
  80ddac:	1884703a 	and	r2,r3,r2
  80ddb0:	30002e26 	beq	r6,zero,80de6c <_realloc_r+0x228>
  80ddb4:	3240b926 	beq	r6,r9,80e09c <_realloc_r+0x458>
  80ddb8:	98a9883a 	add	r20,r19,r2
  80ddbc:	2509883a 	add	r4,r4,r20
  80ddc0:	d9000015 	stw	r4,0(sp)
  80ddc4:	21c02a16 	blt	r4,r7,80de70 <_realloc_r+0x22c>
  80ddc8:	30800317 	ldw	r2,12(r6)
  80ddcc:	30c00217 	ldw	r3,8(r6)
  80ddd0:	01400904 	movi	r5,36
  80ddd4:	99bfff04 	addi	r6,r19,-4
  80ddd8:	18800315 	stw	r2,12(r3)
  80dddc:	10c00215 	stw	r3,8(r2)
  80dde0:	b9000317 	ldw	r4,12(r23)
  80dde4:	b8800217 	ldw	r2,8(r23)
  80dde8:	b82b883a 	mov	r21,r23
  80ddec:	bc000204 	addi	r16,r23,8
  80ddf0:	20800215 	stw	r2,8(r4)
  80ddf4:	11000315 	stw	r4,12(r2)
  80ddf8:	2980e436 	bltu	r5,r6,80e18c <_realloc_r+0x548>
  80ddfc:	008004c4 	movi	r2,19
  80de00:	9009883a 	mov	r4,r18
  80de04:	8011883a 	mov	r8,r16
  80de08:	11800f2e 	bgeu	r2,r6,80de48 <_realloc_r+0x204>
  80de0c:	90800017 	ldw	r2,0(r18)
  80de10:	ba000404 	addi	r8,r23,16
  80de14:	91000204 	addi	r4,r18,8
  80de18:	b8800215 	stw	r2,8(r23)
  80de1c:	90c00117 	ldw	r3,4(r18)
  80de20:	008006c4 	movi	r2,27
  80de24:	b8c00315 	stw	r3,12(r23)
  80de28:	1180072e 	bgeu	r2,r6,80de48 <_realloc_r+0x204>
  80de2c:	90c00217 	ldw	r3,8(r18)
  80de30:	ba000604 	addi	r8,r23,24
  80de34:	91000404 	addi	r4,r18,16
  80de38:	b8c00415 	stw	r3,16(r23)
  80de3c:	90800317 	ldw	r2,12(r18)
  80de40:	b8800515 	stw	r2,20(r23)
  80de44:	3140e726 	beq	r6,r5,80e1e4 <_realloc_r+0x5a0>
  80de48:	20800017 	ldw	r2,0(r4)
  80de4c:	dd000017 	ldw	r20,0(sp)
  80de50:	b80f883a 	mov	r7,r23
  80de54:	40800015 	stw	r2,0(r8)
  80de58:	20c00117 	ldw	r3,4(r4)
  80de5c:	40c00115 	stw	r3,4(r8)
  80de60:	20800217 	ldw	r2,8(r4)
  80de64:	40800215 	stw	r2,8(r8)
  80de68:	003f9706 	br	80dcc8 <_realloc_r+0x84>
  80de6c:	98a9883a 	add	r20,r19,r2
  80de70:	a1c01f16 	blt	r20,r7,80def0 <_realloc_r+0x2ac>
  80de74:	b8c00317 	ldw	r3,12(r23)
  80de78:	b8800217 	ldw	r2,8(r23)
  80de7c:	99bfff04 	addi	r6,r19,-4
  80de80:	01400904 	movi	r5,36
  80de84:	b82b883a 	mov	r21,r23
  80de88:	18800215 	stw	r2,8(r3)
  80de8c:	10c00315 	stw	r3,12(r2)
  80de90:	bc000204 	addi	r16,r23,8
  80de94:	2980c336 	bltu	r5,r6,80e1a4 <_realloc_r+0x560>
  80de98:	008004c4 	movi	r2,19
  80de9c:	9009883a 	mov	r4,r18
  80dea0:	8011883a 	mov	r8,r16
  80dea4:	11800f2e 	bgeu	r2,r6,80dee4 <_realloc_r+0x2a0>
  80dea8:	90800017 	ldw	r2,0(r18)
  80deac:	ba000404 	addi	r8,r23,16
  80deb0:	91000204 	addi	r4,r18,8
  80deb4:	b8800215 	stw	r2,8(r23)
  80deb8:	90c00117 	ldw	r3,4(r18)
  80debc:	008006c4 	movi	r2,27
  80dec0:	b8c00315 	stw	r3,12(r23)
  80dec4:	1180072e 	bgeu	r2,r6,80dee4 <_realloc_r+0x2a0>
  80dec8:	90c00217 	ldw	r3,8(r18)
  80decc:	ba000604 	addi	r8,r23,24
  80ded0:	91000404 	addi	r4,r18,16
  80ded4:	b8c00415 	stw	r3,16(r23)
  80ded8:	90800317 	ldw	r2,12(r18)
  80dedc:	b8800515 	stw	r2,20(r23)
  80dee0:	3140c726 	beq	r6,r5,80e200 <_realloc_r+0x5bc>
  80dee4:	20800017 	ldw	r2,0(r4)
  80dee8:	b80f883a 	mov	r7,r23
  80deec:	003fd906 	br	80de54 <_realloc_r+0x210>
  80def0:	880b883a 	mov	r5,r17
  80def4:	b009883a 	mov	r4,r22
  80def8:	080c17c0 	call	80c17c <_malloc_r>
  80defc:	1023883a 	mov	r17,r2
  80df00:	10002526 	beq	r2,zero,80df98 <_realloc_r+0x354>
  80df04:	80800117 	ldw	r2,4(r16)
  80df08:	00ffff84 	movi	r3,-2
  80df0c:	893ffe04 	addi	r4,r17,-8
  80df10:	10c4703a 	and	r2,r2,r3
  80df14:	8085883a 	add	r2,r16,r2
  80df18:	20809526 	beq	r4,r2,80e170 <_realloc_r+0x52c>
  80df1c:	99bfff04 	addi	r6,r19,-4
  80df20:	01c00904 	movi	r7,36
  80df24:	39804536 	bltu	r7,r6,80e03c <_realloc_r+0x3f8>
  80df28:	008004c4 	movi	r2,19
  80df2c:	9009883a 	mov	r4,r18
  80df30:	880b883a 	mov	r5,r17
  80df34:	11800f2e 	bgeu	r2,r6,80df74 <_realloc_r+0x330>
  80df38:	90800017 	ldw	r2,0(r18)
  80df3c:	89400204 	addi	r5,r17,8
  80df40:	91000204 	addi	r4,r18,8
  80df44:	88800015 	stw	r2,0(r17)
  80df48:	90c00117 	ldw	r3,4(r18)
  80df4c:	008006c4 	movi	r2,27
  80df50:	88c00115 	stw	r3,4(r17)
  80df54:	1180072e 	bgeu	r2,r6,80df74 <_realloc_r+0x330>
  80df58:	90c00217 	ldw	r3,8(r18)
  80df5c:	89400404 	addi	r5,r17,16
  80df60:	91000404 	addi	r4,r18,16
  80df64:	88c00215 	stw	r3,8(r17)
  80df68:	90800317 	ldw	r2,12(r18)
  80df6c:	88800315 	stw	r2,12(r17)
  80df70:	31c09126 	beq	r6,r7,80e1b8 <_realloc_r+0x574>
  80df74:	20800017 	ldw	r2,0(r4)
  80df78:	28800015 	stw	r2,0(r5)
  80df7c:	20c00117 	ldw	r3,4(r4)
  80df80:	28c00115 	stw	r3,4(r5)
  80df84:	20800217 	ldw	r2,8(r4)
  80df88:	28800215 	stw	r2,8(r5)
  80df8c:	900b883a 	mov	r5,r18
  80df90:	b009883a 	mov	r4,r22
  80df94:	080b5f40 	call	80b5f4 <_free_r>
  80df98:	b009883a 	mov	r4,r22
  80df9c:	08107b40 	call	8107b4 <__malloc_unlock>
  80dfa0:	003f5e06 	br	80dd1c <_realloc_r+0xd8>
  80dfa4:	300b883a 	mov	r5,r6
  80dfa8:	dfc00b17 	ldw	ra,44(sp)
  80dfac:	df000a17 	ldw	fp,40(sp)
  80dfb0:	ddc00917 	ldw	r23,36(sp)
  80dfb4:	dd800817 	ldw	r22,32(sp)
  80dfb8:	dd400717 	ldw	r21,28(sp)
  80dfbc:	dd000617 	ldw	r20,24(sp)
  80dfc0:	dcc00517 	ldw	r19,20(sp)
  80dfc4:	dc800417 	ldw	r18,16(sp)
  80dfc8:	dc400317 	ldw	r17,12(sp)
  80dfcc:	dc000217 	ldw	r16,8(sp)
  80dfd0:	dec00c04 	addi	sp,sp,48
  80dfd4:	080c17c1 	jmpi	80c17c <_malloc_r>
  80dfd8:	38800117 	ldw	r2,4(r7)
  80dfdc:	e54b883a 	add	r5,fp,r21
  80dfe0:	31000054 	ori	r4,r6,1
  80dfe4:	1080004c 	andi	r2,r2,1
  80dfe8:	1704b03a 	or	r2,r2,fp
  80dfec:	38800115 	stw	r2,4(r7)
  80dff0:	29000115 	stw	r4,4(r5)
  80dff4:	2987883a 	add	r3,r5,r6
  80dff8:	18800117 	ldw	r2,4(r3)
  80dffc:	29400204 	addi	r5,r5,8
  80e000:	b009883a 	mov	r4,r22
  80e004:	10800054 	ori	r2,r2,1
  80e008:	18800115 	stw	r2,4(r3)
  80e00c:	080b5f40 	call	80b5f4 <_free_r>
  80e010:	003f3806 	br	80dcf4 <_realloc_r+0xb0>
  80e014:	000d883a 	mov	r6,zero
  80e018:	0009883a 	mov	r4,zero
  80e01c:	003f5d06 	br	80dd94 <_realloc_r+0x150>
  80e020:	30c00217 	ldw	r3,8(r6)
  80e024:	30800317 	ldw	r2,12(r6)
  80e028:	800f883a 	mov	r7,r16
  80e02c:	84000204 	addi	r16,r16,8
  80e030:	10c00215 	stw	r3,8(r2)
  80e034:	18800315 	stw	r2,12(r3)
  80e038:	003f2306 	br	80dcc8 <_realloc_r+0x84>
  80e03c:	8809883a 	mov	r4,r17
  80e040:	900b883a 	mov	r5,r18
  80e044:	080ca400 	call	80ca40 <memmove>
  80e048:	003fd006 	br	80df8c <_realloc_r+0x348>
  80e04c:	30800117 	ldw	r2,4(r6)
  80e050:	e0c00404 	addi	r3,fp,16
  80e054:	1108703a 	and	r4,r2,r4
  80e058:	9905883a 	add	r2,r19,r4
  80e05c:	10ff4d16 	blt	r2,r3,80dd94 <_realloc_r+0x150>
  80e060:	1705c83a 	sub	r2,r2,fp
  80e064:	870b883a 	add	r5,r16,fp
  80e068:	10800054 	ori	r2,r2,1
  80e06c:	28800115 	stw	r2,4(r5)
  80e070:	80c00117 	ldw	r3,4(r16)
  80e074:	008020b4 	movhi	r2,130
  80e078:	10b12e04 	addi	r2,r2,-15176
  80e07c:	b009883a 	mov	r4,r22
  80e080:	18c0004c 	andi	r3,r3,1
  80e084:	e0c6b03a 	or	r3,fp,r3
  80e088:	11400215 	stw	r5,8(r2)
  80e08c:	80c00115 	stw	r3,4(r16)
  80e090:	08107b40 	call	8107b4 <__malloc_unlock>
  80e094:	84400204 	addi	r17,r16,8
  80e098:	003f2006 	br	80dd1c <_realloc_r+0xd8>
  80e09c:	98a9883a 	add	r20,r19,r2
  80e0a0:	2509883a 	add	r4,r4,r20
  80e0a4:	e0800404 	addi	r2,fp,16
  80e0a8:	d9000115 	stw	r4,4(sp)
  80e0ac:	20bf7016 	blt	r4,r2,80de70 <_realloc_r+0x22c>
  80e0b0:	b8c00317 	ldw	r3,12(r23)
  80e0b4:	b8800217 	ldw	r2,8(r23)
  80e0b8:	99bfff04 	addi	r6,r19,-4
  80e0bc:	01400904 	movi	r5,36
  80e0c0:	18800215 	stw	r2,8(r3)
  80e0c4:	10c00315 	stw	r3,12(r2)
  80e0c8:	bc400204 	addi	r17,r23,8
  80e0cc:	29804136 	bltu	r5,r6,80e1d4 <_realloc_r+0x590>
  80e0d0:	008004c4 	movi	r2,19
  80e0d4:	9009883a 	mov	r4,r18
  80e0d8:	880f883a 	mov	r7,r17
  80e0dc:	11800f2e 	bgeu	r2,r6,80e11c <_realloc_r+0x4d8>
  80e0e0:	90800017 	ldw	r2,0(r18)
  80e0e4:	b9c00404 	addi	r7,r23,16
  80e0e8:	91000204 	addi	r4,r18,8
  80e0ec:	b8800215 	stw	r2,8(r23)
  80e0f0:	90c00117 	ldw	r3,4(r18)
  80e0f4:	008006c4 	movi	r2,27
  80e0f8:	b8c00315 	stw	r3,12(r23)
  80e0fc:	1180072e 	bgeu	r2,r6,80e11c <_realloc_r+0x4d8>
  80e100:	90c00217 	ldw	r3,8(r18)
  80e104:	b9c00604 	addi	r7,r23,24
  80e108:	91000404 	addi	r4,r18,16
  80e10c:	b8c00415 	stw	r3,16(r23)
  80e110:	90800317 	ldw	r2,12(r18)
  80e114:	b8800515 	stw	r2,20(r23)
  80e118:	31404026 	beq	r6,r5,80e21c <_realloc_r+0x5d8>
  80e11c:	20800017 	ldw	r2,0(r4)
  80e120:	38800015 	stw	r2,0(r7)
  80e124:	20c00117 	ldw	r3,4(r4)
  80e128:	38c00115 	stw	r3,4(r7)
  80e12c:	20800217 	ldw	r2,8(r4)
  80e130:	38800215 	stw	r2,8(r7)
  80e134:	d8c00117 	ldw	r3,4(sp)
  80e138:	bf0b883a 	add	r5,r23,fp
  80e13c:	b009883a 	mov	r4,r22
  80e140:	1f05c83a 	sub	r2,r3,fp
  80e144:	10800054 	ori	r2,r2,1
  80e148:	28800115 	stw	r2,4(r5)
  80e14c:	b8c00117 	ldw	r3,4(r23)
  80e150:	008020b4 	movhi	r2,130
  80e154:	10b12e04 	addi	r2,r2,-15176
  80e158:	11400215 	stw	r5,8(r2)
  80e15c:	18c0004c 	andi	r3,r3,1
  80e160:	e0c6b03a 	or	r3,fp,r3
  80e164:	b8c00115 	stw	r3,4(r23)
  80e168:	08107b40 	call	8107b4 <__malloc_unlock>
  80e16c:	003eeb06 	br	80dd1c <_realloc_r+0xd8>
  80e170:	20800117 	ldw	r2,4(r4)
  80e174:	00ffff04 	movi	r3,-4
  80e178:	800f883a 	mov	r7,r16
  80e17c:	10c4703a 	and	r2,r2,r3
  80e180:	98a9883a 	add	r20,r19,r2
  80e184:	84000204 	addi	r16,r16,8
  80e188:	003ecf06 	br	80dcc8 <_realloc_r+0x84>
  80e18c:	900b883a 	mov	r5,r18
  80e190:	8009883a 	mov	r4,r16
  80e194:	080ca400 	call	80ca40 <memmove>
  80e198:	dd000017 	ldw	r20,0(sp)
  80e19c:	b80f883a 	mov	r7,r23
  80e1a0:	003ec906 	br	80dcc8 <_realloc_r+0x84>
  80e1a4:	900b883a 	mov	r5,r18
  80e1a8:	8009883a 	mov	r4,r16
  80e1ac:	080ca400 	call	80ca40 <memmove>
  80e1b0:	b80f883a 	mov	r7,r23
  80e1b4:	003ec406 	br	80dcc8 <_realloc_r+0x84>
  80e1b8:	90c00417 	ldw	r3,16(r18)
  80e1bc:	89400604 	addi	r5,r17,24
  80e1c0:	91000604 	addi	r4,r18,24
  80e1c4:	88c00415 	stw	r3,16(r17)
  80e1c8:	90800517 	ldw	r2,20(r18)
  80e1cc:	88800515 	stw	r2,20(r17)
  80e1d0:	003f6806 	br	80df74 <_realloc_r+0x330>
  80e1d4:	900b883a 	mov	r5,r18
  80e1d8:	8809883a 	mov	r4,r17
  80e1dc:	080ca400 	call	80ca40 <memmove>
  80e1e0:	003fd406 	br	80e134 <_realloc_r+0x4f0>
  80e1e4:	90c00417 	ldw	r3,16(r18)
  80e1e8:	91000604 	addi	r4,r18,24
  80e1ec:	ba000804 	addi	r8,r23,32
  80e1f0:	b8c00615 	stw	r3,24(r23)
  80e1f4:	90800517 	ldw	r2,20(r18)
  80e1f8:	b8800715 	stw	r2,28(r23)
  80e1fc:	003f1206 	br	80de48 <_realloc_r+0x204>
  80e200:	90c00417 	ldw	r3,16(r18)
  80e204:	91000604 	addi	r4,r18,24
  80e208:	ba000804 	addi	r8,r23,32
  80e20c:	b8c00615 	stw	r3,24(r23)
  80e210:	90800517 	ldw	r2,20(r18)
  80e214:	b8800715 	stw	r2,28(r23)
  80e218:	003f3206 	br	80dee4 <_realloc_r+0x2a0>
  80e21c:	90c00417 	ldw	r3,16(r18)
  80e220:	91000604 	addi	r4,r18,24
  80e224:	b9c00804 	addi	r7,r23,32
  80e228:	b8c00615 	stw	r3,24(r23)
  80e22c:	90800517 	ldw	r2,20(r18)
  80e230:	b8800715 	stw	r2,28(r23)
  80e234:	003fb906 	br	80e11c <_realloc_r+0x4d8>

0080e238 <__isinfd>:
  80e238:	200d883a 	mov	r6,r4
  80e23c:	0109c83a 	sub	r4,zero,r4
  80e240:	2188b03a 	or	r4,r4,r6
  80e244:	2008d7fa 	srli	r4,r4,31
  80e248:	00a00034 	movhi	r2,32768
  80e24c:	10bfffc4 	addi	r2,r2,-1
  80e250:	1144703a 	and	r2,r2,r5
  80e254:	2088b03a 	or	r4,r4,r2
  80e258:	009ffc34 	movhi	r2,32752
  80e25c:	1105c83a 	sub	r2,r2,r4
  80e260:	0087c83a 	sub	r3,zero,r2
  80e264:	10c4b03a 	or	r2,r2,r3
  80e268:	1004d7fa 	srli	r2,r2,31
  80e26c:	00c00044 	movi	r3,1
  80e270:	1885c83a 	sub	r2,r3,r2
  80e274:	f800283a 	ret

0080e278 <_sbrk_r>:
  80e278:	defffd04 	addi	sp,sp,-12
  80e27c:	dc000015 	stw	r16,0(sp)
  80e280:	040020b4 	movhi	r16,130
  80e284:	843deb04 	addi	r16,r16,-2132
  80e288:	dc400115 	stw	r17,4(sp)
  80e28c:	80000015 	stw	zero,0(r16)
  80e290:	2023883a 	mov	r17,r4
  80e294:	2809883a 	mov	r4,r5
  80e298:	dfc00215 	stw	ra,8(sp)
  80e29c:	08102440 	call	810244 <sbrk>
  80e2a0:	1007883a 	mov	r3,r2
  80e2a4:	00bfffc4 	movi	r2,-1
  80e2a8:	18800626 	beq	r3,r2,80e2c4 <_sbrk_r+0x4c>
  80e2ac:	1805883a 	mov	r2,r3
  80e2b0:	dfc00217 	ldw	ra,8(sp)
  80e2b4:	dc400117 	ldw	r17,4(sp)
  80e2b8:	dc000017 	ldw	r16,0(sp)
  80e2bc:	dec00304 	addi	sp,sp,12
  80e2c0:	f800283a 	ret
  80e2c4:	80800017 	ldw	r2,0(r16)
  80e2c8:	103ff826 	beq	r2,zero,80e2ac <_sbrk_r+0x34>
  80e2cc:	88800015 	stw	r2,0(r17)
  80e2d0:	1805883a 	mov	r2,r3
  80e2d4:	dfc00217 	ldw	ra,8(sp)
  80e2d8:	dc400117 	ldw	r17,4(sp)
  80e2dc:	dc000017 	ldw	r16,0(sp)
  80e2e0:	dec00304 	addi	sp,sp,12
  80e2e4:	f800283a 	ret

0080e2e8 <__sclose>:
  80e2e8:	2940038f 	ldh	r5,14(r5)
  80e2ec:	080e6301 	jmpi	80e630 <_close_r>

0080e2f0 <__sseek>:
  80e2f0:	defffe04 	addi	sp,sp,-8
  80e2f4:	dc000015 	stw	r16,0(sp)
  80e2f8:	2821883a 	mov	r16,r5
  80e2fc:	2940038f 	ldh	r5,14(r5)
  80e300:	dfc00115 	stw	ra,4(sp)
  80e304:	080e8a80 	call	80e8a8 <_lseek_r>
  80e308:	1007883a 	mov	r3,r2
  80e30c:	00bfffc4 	movi	r2,-1
  80e310:	18800926 	beq	r3,r2,80e338 <__sseek+0x48>
  80e314:	8080030b 	ldhu	r2,12(r16)
  80e318:	80c01415 	stw	r3,80(r16)
  80e31c:	10840014 	ori	r2,r2,4096
  80e320:	8080030d 	sth	r2,12(r16)
  80e324:	1805883a 	mov	r2,r3
  80e328:	dfc00117 	ldw	ra,4(sp)
  80e32c:	dc000017 	ldw	r16,0(sp)
  80e330:	dec00204 	addi	sp,sp,8
  80e334:	f800283a 	ret
  80e338:	8080030b 	ldhu	r2,12(r16)
  80e33c:	10bbffcc 	andi	r2,r2,61439
  80e340:	8080030d 	sth	r2,12(r16)
  80e344:	1805883a 	mov	r2,r3
  80e348:	dfc00117 	ldw	ra,4(sp)
  80e34c:	dc000017 	ldw	r16,0(sp)
  80e350:	dec00204 	addi	sp,sp,8
  80e354:	f800283a 	ret

0080e358 <__swrite>:
  80e358:	2880030b 	ldhu	r2,12(r5)
  80e35c:	defffb04 	addi	sp,sp,-20
  80e360:	dcc00315 	stw	r19,12(sp)
  80e364:	1080400c 	andi	r2,r2,256
  80e368:	dc800215 	stw	r18,8(sp)
  80e36c:	dc400115 	stw	r17,4(sp)
  80e370:	dc000015 	stw	r16,0(sp)
  80e374:	3027883a 	mov	r19,r6
  80e378:	3825883a 	mov	r18,r7
  80e37c:	dfc00415 	stw	ra,16(sp)
  80e380:	2821883a 	mov	r16,r5
  80e384:	000d883a 	mov	r6,zero
  80e388:	01c00084 	movi	r7,2
  80e38c:	2023883a 	mov	r17,r4
  80e390:	10000226 	beq	r2,zero,80e39c <__swrite+0x44>
  80e394:	2940038f 	ldh	r5,14(r5)
  80e398:	080e8a80 	call	80e8a8 <_lseek_r>
  80e39c:	8080030b 	ldhu	r2,12(r16)
  80e3a0:	8140038f 	ldh	r5,14(r16)
  80e3a4:	8809883a 	mov	r4,r17
  80e3a8:	10bbffcc 	andi	r2,r2,61439
  80e3ac:	980d883a 	mov	r6,r19
  80e3b0:	900f883a 	mov	r7,r18
  80e3b4:	8080030d 	sth	r2,12(r16)
  80e3b8:	dfc00417 	ldw	ra,16(sp)
  80e3bc:	dcc00317 	ldw	r19,12(sp)
  80e3c0:	dc800217 	ldw	r18,8(sp)
  80e3c4:	dc400117 	ldw	r17,4(sp)
  80e3c8:	dc000017 	ldw	r16,0(sp)
  80e3cc:	dec00504 	addi	sp,sp,20
  80e3d0:	080e4f01 	jmpi	80e4f0 <_write_r>

0080e3d4 <__sread>:
  80e3d4:	defffe04 	addi	sp,sp,-8
  80e3d8:	dc000015 	stw	r16,0(sp)
  80e3dc:	2821883a 	mov	r16,r5
  80e3e0:	2940038f 	ldh	r5,14(r5)
  80e3e4:	dfc00115 	stw	ra,4(sp)
  80e3e8:	080e9200 	call	80e920 <_read_r>
  80e3ec:	1007883a 	mov	r3,r2
  80e3f0:	10000816 	blt	r2,zero,80e414 <__sread+0x40>
  80e3f4:	80801417 	ldw	r2,80(r16)
  80e3f8:	10c5883a 	add	r2,r2,r3
  80e3fc:	80801415 	stw	r2,80(r16)
  80e400:	1805883a 	mov	r2,r3
  80e404:	dfc00117 	ldw	ra,4(sp)
  80e408:	dc000017 	ldw	r16,0(sp)
  80e40c:	dec00204 	addi	sp,sp,8
  80e410:	f800283a 	ret
  80e414:	8080030b 	ldhu	r2,12(r16)
  80e418:	10bbffcc 	andi	r2,r2,61439
  80e41c:	8080030d 	sth	r2,12(r16)
  80e420:	1805883a 	mov	r2,r3
  80e424:	dfc00117 	ldw	ra,4(sp)
  80e428:	dc000017 	ldw	r16,0(sp)
  80e42c:	dec00204 	addi	sp,sp,8
  80e430:	f800283a 	ret

0080e434 <strcmp>:
  80e434:	2144b03a 	or	r2,r4,r5
  80e438:	108000cc 	andi	r2,r2,3
  80e43c:	10001d1e 	bne	r2,zero,80e4b4 <strcmp+0x80>
  80e440:	200f883a 	mov	r7,r4
  80e444:	28800017 	ldw	r2,0(r5)
  80e448:	21000017 	ldw	r4,0(r4)
  80e44c:	280d883a 	mov	r6,r5
  80e450:	2080161e 	bne	r4,r2,80e4ac <strcmp+0x78>
  80e454:	023fbff4 	movhi	r8,65279
  80e458:	423fbfc4 	addi	r8,r8,-257
  80e45c:	2207883a 	add	r3,r4,r8
  80e460:	01602074 	movhi	r5,32897
  80e464:	29602004 	addi	r5,r5,-32640
  80e468:	1946703a 	and	r3,r3,r5
  80e46c:	0104303a 	nor	r2,zero,r4
  80e470:	10c4703a 	and	r2,r2,r3
  80e474:	10001c1e 	bne	r2,zero,80e4e8 <strcmp+0xb4>
  80e478:	4013883a 	mov	r9,r8
  80e47c:	2811883a 	mov	r8,r5
  80e480:	00000106 	br	80e488 <strcmp+0x54>
  80e484:	1800181e 	bne	r3,zero,80e4e8 <strcmp+0xb4>
  80e488:	39c00104 	addi	r7,r7,4
  80e48c:	39000017 	ldw	r4,0(r7)
  80e490:	31800104 	addi	r6,r6,4
  80e494:	31400017 	ldw	r5,0(r6)
  80e498:	2245883a 	add	r2,r4,r9
  80e49c:	1204703a 	and	r2,r2,r8
  80e4a0:	0106303a 	nor	r3,zero,r4
  80e4a4:	1886703a 	and	r3,r3,r2
  80e4a8:	217ff626 	beq	r4,r5,80e484 <strcmp+0x50>
  80e4ac:	3809883a 	mov	r4,r7
  80e4b0:	300b883a 	mov	r5,r6
  80e4b4:	20c00007 	ldb	r3,0(r4)
  80e4b8:	1800051e 	bne	r3,zero,80e4d0 <strcmp+0x9c>
  80e4bc:	00000606 	br	80e4d8 <strcmp+0xa4>
  80e4c0:	21000044 	addi	r4,r4,1
  80e4c4:	20c00007 	ldb	r3,0(r4)
  80e4c8:	29400044 	addi	r5,r5,1
  80e4cc:	18000226 	beq	r3,zero,80e4d8 <strcmp+0xa4>
  80e4d0:	28800007 	ldb	r2,0(r5)
  80e4d4:	18bffa26 	beq	r3,r2,80e4c0 <strcmp+0x8c>
  80e4d8:	20c00003 	ldbu	r3,0(r4)
  80e4dc:	28800003 	ldbu	r2,0(r5)
  80e4e0:	1885c83a 	sub	r2,r3,r2
  80e4e4:	f800283a 	ret
  80e4e8:	0005883a 	mov	r2,zero
  80e4ec:	f800283a 	ret

0080e4f0 <_write_r>:
  80e4f0:	defffd04 	addi	sp,sp,-12
  80e4f4:	dc000015 	stw	r16,0(sp)
  80e4f8:	040020b4 	movhi	r16,130
  80e4fc:	843deb04 	addi	r16,r16,-2132
  80e500:	dc400115 	stw	r17,4(sp)
  80e504:	80000015 	stw	zero,0(r16)
  80e508:	2023883a 	mov	r17,r4
  80e50c:	2809883a 	mov	r4,r5
  80e510:	300b883a 	mov	r5,r6
  80e514:	380d883a 	mov	r6,r7
  80e518:	dfc00215 	stw	ra,8(sp)
  80e51c:	08104200 	call	810420 <write>
  80e520:	1007883a 	mov	r3,r2
  80e524:	00bfffc4 	movi	r2,-1
  80e528:	18800626 	beq	r3,r2,80e544 <_write_r+0x54>
  80e52c:	1805883a 	mov	r2,r3
  80e530:	dfc00217 	ldw	ra,8(sp)
  80e534:	dc400117 	ldw	r17,4(sp)
  80e538:	dc000017 	ldw	r16,0(sp)
  80e53c:	dec00304 	addi	sp,sp,12
  80e540:	f800283a 	ret
  80e544:	80800017 	ldw	r2,0(r16)
  80e548:	103ff826 	beq	r2,zero,80e52c <_write_r+0x3c>
  80e54c:	88800015 	stw	r2,0(r17)
  80e550:	1805883a 	mov	r2,r3
  80e554:	dfc00217 	ldw	ra,8(sp)
  80e558:	dc400117 	ldw	r17,4(sp)
  80e55c:	dc000017 	ldw	r16,0(sp)
  80e560:	dec00304 	addi	sp,sp,12
  80e564:	f800283a 	ret

0080e568 <_calloc_r>:
  80e568:	defffe04 	addi	sp,sp,-8
  80e56c:	dc400015 	stw	r17,0(sp)
  80e570:	2023883a 	mov	r17,r4
  80e574:	2809883a 	mov	r4,r5
  80e578:	300b883a 	mov	r5,r6
  80e57c:	dfc00115 	stw	ra,4(sp)
  80e580:	0806c3c0 	call	806c3c <__mulsi3>
  80e584:	100b883a 	mov	r5,r2
  80e588:	8809883a 	mov	r4,r17
  80e58c:	080c17c0 	call	80c17c <_malloc_r>
  80e590:	1023883a 	mov	r17,r2
  80e594:	01c00904 	movi	r7,36
  80e598:	10000d26 	beq	r2,zero,80e5d0 <_calloc_r+0x68>
  80e59c:	10ffff17 	ldw	r3,-4(r2)
  80e5a0:	1009883a 	mov	r4,r2
  80e5a4:	00bfff04 	movi	r2,-4
  80e5a8:	1886703a 	and	r3,r3,r2
  80e5ac:	1887883a 	add	r3,r3,r2
  80e5b0:	180d883a 	mov	r6,r3
  80e5b4:	000b883a 	mov	r5,zero
  80e5b8:	38c01736 	bltu	r7,r3,80e618 <_calloc_r+0xb0>
  80e5bc:	008004c4 	movi	r2,19
  80e5c0:	10c00836 	bltu	r2,r3,80e5e4 <_calloc_r+0x7c>
  80e5c4:	20000215 	stw	zero,8(r4)
  80e5c8:	20000015 	stw	zero,0(r4)
  80e5cc:	20000115 	stw	zero,4(r4)
  80e5d0:	8805883a 	mov	r2,r17
  80e5d4:	dfc00117 	ldw	ra,4(sp)
  80e5d8:	dc400017 	ldw	r17,0(sp)
  80e5dc:	dec00204 	addi	sp,sp,8
  80e5e0:	f800283a 	ret
  80e5e4:	008006c4 	movi	r2,27
  80e5e8:	88000015 	stw	zero,0(r17)
  80e5ec:	88000115 	stw	zero,4(r17)
  80e5f0:	89000204 	addi	r4,r17,8
  80e5f4:	10fff32e 	bgeu	r2,r3,80e5c4 <_calloc_r+0x5c>
  80e5f8:	88000215 	stw	zero,8(r17)
  80e5fc:	88000315 	stw	zero,12(r17)
  80e600:	89000404 	addi	r4,r17,16
  80e604:	19ffef1e 	bne	r3,r7,80e5c4 <_calloc_r+0x5c>
  80e608:	89000604 	addi	r4,r17,24
  80e60c:	88000415 	stw	zero,16(r17)
  80e610:	88000515 	stw	zero,20(r17)
  80e614:	003feb06 	br	80e5c4 <_calloc_r+0x5c>
  80e618:	080cb200 	call	80cb20 <memset>
  80e61c:	8805883a 	mov	r2,r17
  80e620:	dfc00117 	ldw	ra,4(sp)
  80e624:	dc400017 	ldw	r17,0(sp)
  80e628:	dec00204 	addi	sp,sp,8
  80e62c:	f800283a 	ret

0080e630 <_close_r>:
  80e630:	defffd04 	addi	sp,sp,-12
  80e634:	dc000015 	stw	r16,0(sp)
  80e638:	040020b4 	movhi	r16,130
  80e63c:	843deb04 	addi	r16,r16,-2132
  80e640:	dc400115 	stw	r17,4(sp)
  80e644:	80000015 	stw	zero,0(r16)
  80e648:	2023883a 	mov	r17,r4
  80e64c:	2809883a 	mov	r4,r5
  80e650:	dfc00215 	stw	ra,8(sp)
  80e654:	080f9580 	call	80f958 <close>
  80e658:	1007883a 	mov	r3,r2
  80e65c:	00bfffc4 	movi	r2,-1
  80e660:	18800626 	beq	r3,r2,80e67c <_close_r+0x4c>
  80e664:	1805883a 	mov	r2,r3
  80e668:	dfc00217 	ldw	ra,8(sp)
  80e66c:	dc400117 	ldw	r17,4(sp)
  80e670:	dc000017 	ldw	r16,0(sp)
  80e674:	dec00304 	addi	sp,sp,12
  80e678:	f800283a 	ret
  80e67c:	80800017 	ldw	r2,0(r16)
  80e680:	103ff826 	beq	r2,zero,80e664 <_close_r+0x34>
  80e684:	88800015 	stw	r2,0(r17)
  80e688:	1805883a 	mov	r2,r3
  80e68c:	dfc00217 	ldw	ra,8(sp)
  80e690:	dc400117 	ldw	r17,4(sp)
  80e694:	dc000017 	ldw	r16,0(sp)
  80e698:	dec00304 	addi	sp,sp,12
  80e69c:	f800283a 	ret

0080e6a0 <_fclose_r>:
  80e6a0:	defffc04 	addi	sp,sp,-16
  80e6a4:	dc400115 	stw	r17,4(sp)
  80e6a8:	dc000015 	stw	r16,0(sp)
  80e6ac:	dfc00315 	stw	ra,12(sp)
  80e6b0:	dc800215 	stw	r18,8(sp)
  80e6b4:	2821883a 	mov	r16,r5
  80e6b8:	2023883a 	mov	r17,r4
  80e6bc:	28002926 	beq	r5,zero,80e764 <_fclose_r+0xc4>
  80e6c0:	080b22c0 	call	80b22c <__sfp_lock_acquire>
  80e6c4:	88000226 	beq	r17,zero,80e6d0 <_fclose_r+0x30>
  80e6c8:	88800e17 	ldw	r2,56(r17)
  80e6cc:	10002d26 	beq	r2,zero,80e784 <_fclose_r+0xe4>
  80e6d0:	8080030f 	ldh	r2,12(r16)
  80e6d4:	10002226 	beq	r2,zero,80e760 <_fclose_r+0xc0>
  80e6d8:	8809883a 	mov	r4,r17
  80e6dc:	800b883a 	mov	r5,r16
  80e6e0:	080afa40 	call	80afa4 <_fflush_r>
  80e6e4:	1025883a 	mov	r18,r2
  80e6e8:	80800b17 	ldw	r2,44(r16)
  80e6ec:	10000426 	beq	r2,zero,80e700 <_fclose_r+0x60>
  80e6f0:	81400717 	ldw	r5,28(r16)
  80e6f4:	8809883a 	mov	r4,r17
  80e6f8:	103ee83a 	callr	r2
  80e6fc:	10002a16 	blt	r2,zero,80e7a8 <_fclose_r+0x108>
  80e700:	8080030b 	ldhu	r2,12(r16)
  80e704:	1080200c 	andi	r2,r2,128
  80e708:	1000231e 	bne	r2,zero,80e798 <_fclose_r+0xf8>
  80e70c:	81400c17 	ldw	r5,48(r16)
  80e710:	28000526 	beq	r5,zero,80e728 <_fclose_r+0x88>
  80e714:	80801004 	addi	r2,r16,64
  80e718:	28800226 	beq	r5,r2,80e724 <_fclose_r+0x84>
  80e71c:	8809883a 	mov	r4,r17
  80e720:	080b5f40 	call	80b5f4 <_free_r>
  80e724:	80000c15 	stw	zero,48(r16)
  80e728:	81401117 	ldw	r5,68(r16)
  80e72c:	28000326 	beq	r5,zero,80e73c <_fclose_r+0x9c>
  80e730:	8809883a 	mov	r4,r17
  80e734:	080b5f40 	call	80b5f4 <_free_r>
  80e738:	80001115 	stw	zero,68(r16)
  80e73c:	8000030d 	sth	zero,12(r16)
  80e740:	080b2300 	call	80b230 <__sfp_lock_release>
  80e744:	9005883a 	mov	r2,r18
  80e748:	dfc00317 	ldw	ra,12(sp)
  80e74c:	dc800217 	ldw	r18,8(sp)
  80e750:	dc400117 	ldw	r17,4(sp)
  80e754:	dc000017 	ldw	r16,0(sp)
  80e758:	dec00404 	addi	sp,sp,16
  80e75c:	f800283a 	ret
  80e760:	080b2300 	call	80b230 <__sfp_lock_release>
  80e764:	0025883a 	mov	r18,zero
  80e768:	9005883a 	mov	r2,r18
  80e76c:	dfc00317 	ldw	ra,12(sp)
  80e770:	dc800217 	ldw	r18,8(sp)
  80e774:	dc400117 	ldw	r17,4(sp)
  80e778:	dc000017 	ldw	r16,0(sp)
  80e77c:	dec00404 	addi	sp,sp,16
  80e780:	f800283a 	ret
  80e784:	8809883a 	mov	r4,r17
  80e788:	080b23c0 	call	80b23c <__sinit>
  80e78c:	8080030f 	ldh	r2,12(r16)
  80e790:	103fd11e 	bne	r2,zero,80e6d8 <_fclose_r+0x38>
  80e794:	003ff206 	br	80e760 <_fclose_r+0xc0>
  80e798:	81400417 	ldw	r5,16(r16)
  80e79c:	8809883a 	mov	r4,r17
  80e7a0:	080b5f40 	call	80b5f4 <_free_r>
  80e7a4:	003fd906 	br	80e70c <_fclose_r+0x6c>
  80e7a8:	04bfffc4 	movi	r18,-1
  80e7ac:	003fd406 	br	80e700 <_fclose_r+0x60>

0080e7b0 <fclose>:
  80e7b0:	008020b4 	movhi	r2,130
  80e7b4:	10b6d904 	addi	r2,r2,-9372
  80e7b8:	200b883a 	mov	r5,r4
  80e7bc:	11000017 	ldw	r4,0(r2)
  80e7c0:	080e6a01 	jmpi	80e6a0 <_fclose_r>

0080e7c4 <_fstat_r>:
  80e7c4:	defffd04 	addi	sp,sp,-12
  80e7c8:	dc000015 	stw	r16,0(sp)
  80e7cc:	040020b4 	movhi	r16,130
  80e7d0:	843deb04 	addi	r16,r16,-2132
  80e7d4:	dc400115 	stw	r17,4(sp)
  80e7d8:	80000015 	stw	zero,0(r16)
  80e7dc:	2023883a 	mov	r17,r4
  80e7e0:	2809883a 	mov	r4,r5
  80e7e4:	300b883a 	mov	r5,r6
  80e7e8:	dfc00215 	stw	ra,8(sp)
  80e7ec:	080fae40 	call	80fae4 <fstat>
  80e7f0:	1007883a 	mov	r3,r2
  80e7f4:	00bfffc4 	movi	r2,-1
  80e7f8:	18800626 	beq	r3,r2,80e814 <_fstat_r+0x50>
  80e7fc:	1805883a 	mov	r2,r3
  80e800:	dfc00217 	ldw	ra,8(sp)
  80e804:	dc400117 	ldw	r17,4(sp)
  80e808:	dc000017 	ldw	r16,0(sp)
  80e80c:	dec00304 	addi	sp,sp,12
  80e810:	f800283a 	ret
  80e814:	80800017 	ldw	r2,0(r16)
  80e818:	103ff826 	beq	r2,zero,80e7fc <_fstat_r+0x38>
  80e81c:	88800015 	stw	r2,0(r17)
  80e820:	1805883a 	mov	r2,r3
  80e824:	dfc00217 	ldw	ra,8(sp)
  80e828:	dc400117 	ldw	r17,4(sp)
  80e82c:	dc000017 	ldw	r16,0(sp)
  80e830:	dec00304 	addi	sp,sp,12
  80e834:	f800283a 	ret

0080e838 <_isatty_r>:
  80e838:	defffd04 	addi	sp,sp,-12
  80e83c:	dc000015 	stw	r16,0(sp)
  80e840:	040020b4 	movhi	r16,130
  80e844:	843deb04 	addi	r16,r16,-2132
  80e848:	dc400115 	stw	r17,4(sp)
  80e84c:	80000015 	stw	zero,0(r16)
  80e850:	2023883a 	mov	r17,r4
  80e854:	2809883a 	mov	r4,r5
  80e858:	dfc00215 	stw	ra,8(sp)
  80e85c:	080fc1c0 	call	80fc1c <isatty>
  80e860:	1007883a 	mov	r3,r2
  80e864:	00bfffc4 	movi	r2,-1
  80e868:	18800626 	beq	r3,r2,80e884 <_isatty_r+0x4c>
  80e86c:	1805883a 	mov	r2,r3
  80e870:	dfc00217 	ldw	ra,8(sp)
  80e874:	dc400117 	ldw	r17,4(sp)
  80e878:	dc000017 	ldw	r16,0(sp)
  80e87c:	dec00304 	addi	sp,sp,12
  80e880:	f800283a 	ret
  80e884:	80800017 	ldw	r2,0(r16)
  80e888:	103ff826 	beq	r2,zero,80e86c <_isatty_r+0x34>
  80e88c:	88800015 	stw	r2,0(r17)
  80e890:	1805883a 	mov	r2,r3
  80e894:	dfc00217 	ldw	ra,8(sp)
  80e898:	dc400117 	ldw	r17,4(sp)
  80e89c:	dc000017 	ldw	r16,0(sp)
  80e8a0:	dec00304 	addi	sp,sp,12
  80e8a4:	f800283a 	ret

0080e8a8 <_lseek_r>:
  80e8a8:	defffd04 	addi	sp,sp,-12
  80e8ac:	dc000015 	stw	r16,0(sp)
  80e8b0:	040020b4 	movhi	r16,130
  80e8b4:	843deb04 	addi	r16,r16,-2132
  80e8b8:	dc400115 	stw	r17,4(sp)
  80e8bc:	80000015 	stw	zero,0(r16)
  80e8c0:	2023883a 	mov	r17,r4
  80e8c4:	2809883a 	mov	r4,r5
  80e8c8:	300b883a 	mov	r5,r6
  80e8cc:	380d883a 	mov	r6,r7
  80e8d0:	dfc00215 	stw	ra,8(sp)
  80e8d4:	080fe2c0 	call	80fe2c <lseek>
  80e8d8:	1007883a 	mov	r3,r2
  80e8dc:	00bfffc4 	movi	r2,-1
  80e8e0:	18800626 	beq	r3,r2,80e8fc <_lseek_r+0x54>
  80e8e4:	1805883a 	mov	r2,r3
  80e8e8:	dfc00217 	ldw	ra,8(sp)
  80e8ec:	dc400117 	ldw	r17,4(sp)
  80e8f0:	dc000017 	ldw	r16,0(sp)
  80e8f4:	dec00304 	addi	sp,sp,12
  80e8f8:	f800283a 	ret
  80e8fc:	80800017 	ldw	r2,0(r16)
  80e900:	103ff826 	beq	r2,zero,80e8e4 <_lseek_r+0x3c>
  80e904:	88800015 	stw	r2,0(r17)
  80e908:	1805883a 	mov	r2,r3
  80e90c:	dfc00217 	ldw	ra,8(sp)
  80e910:	dc400117 	ldw	r17,4(sp)
  80e914:	dc000017 	ldw	r16,0(sp)
  80e918:	dec00304 	addi	sp,sp,12
  80e91c:	f800283a 	ret

0080e920 <_read_r>:
  80e920:	defffd04 	addi	sp,sp,-12
  80e924:	dc000015 	stw	r16,0(sp)
  80e928:	040020b4 	movhi	r16,130
  80e92c:	843deb04 	addi	r16,r16,-2132
  80e930:	dc400115 	stw	r17,4(sp)
  80e934:	80000015 	stw	zero,0(r16)
  80e938:	2023883a 	mov	r17,r4
  80e93c:	2809883a 	mov	r4,r5
  80e940:	300b883a 	mov	r5,r6
  80e944:	380d883a 	mov	r6,r7
  80e948:	dfc00215 	stw	ra,8(sp)
  80e94c:	08100480 	call	810048 <read>
  80e950:	1007883a 	mov	r3,r2
  80e954:	00bfffc4 	movi	r2,-1
  80e958:	18800626 	beq	r3,r2,80e974 <_read_r+0x54>
  80e95c:	1805883a 	mov	r2,r3
  80e960:	dfc00217 	ldw	ra,8(sp)
  80e964:	dc400117 	ldw	r17,4(sp)
  80e968:	dc000017 	ldw	r16,0(sp)
  80e96c:	dec00304 	addi	sp,sp,12
  80e970:	f800283a 	ret
  80e974:	80800017 	ldw	r2,0(r16)
  80e978:	103ff826 	beq	r2,zero,80e95c <_read_r+0x3c>
  80e97c:	88800015 	stw	r2,0(r17)
  80e980:	1805883a 	mov	r2,r3
  80e984:	dfc00217 	ldw	ra,8(sp)
  80e988:	dc400117 	ldw	r17,4(sp)
  80e98c:	dc000017 	ldw	r16,0(sp)
  80e990:	dec00304 	addi	sp,sp,12
  80e994:	f800283a 	ret

0080e998 <__udivdi3>:
  80e998:	defff104 	addi	sp,sp,-60
  80e99c:	0015883a 	mov	r10,zero
  80e9a0:	2005883a 	mov	r2,r4
  80e9a4:	3011883a 	mov	r8,r6
  80e9a8:	df000d15 	stw	fp,52(sp)
  80e9ac:	dd400a15 	stw	r21,40(sp)
  80e9b0:	dcc00815 	stw	r19,32(sp)
  80e9b4:	dfc00e15 	stw	ra,56(sp)
  80e9b8:	ddc00c15 	stw	r23,48(sp)
  80e9bc:	dd800b15 	stw	r22,44(sp)
  80e9c0:	dd000915 	stw	r20,36(sp)
  80e9c4:	dc800715 	stw	r18,28(sp)
  80e9c8:	dc400615 	stw	r17,24(sp)
  80e9cc:	dc000515 	stw	r16,20(sp)
  80e9d0:	da800315 	stw	r10,12(sp)
  80e9d4:	4027883a 	mov	r19,r8
  80e9d8:	1039883a 	mov	fp,r2
  80e9dc:	282b883a 	mov	r21,r5
  80e9e0:	da800415 	stw	r10,16(sp)
  80e9e4:	3800401e 	bne	r7,zero,80eae8 <__udivdi3+0x150>
  80e9e8:	2a006536 	bltu	r5,r8,80eb80 <__udivdi3+0x1e8>
  80e9ec:	4000b526 	beq	r8,zero,80ecc4 <__udivdi3+0x32c>
  80e9f0:	00bfffd4 	movui	r2,65535
  80e9f4:	14c0ad36 	bltu	r2,r19,80ecac <__udivdi3+0x314>
  80e9f8:	00803fc4 	movi	r2,255
  80e9fc:	14c15e36 	bltu	r2,r19,80ef78 <__udivdi3+0x5e0>
  80ea00:	000b883a 	mov	r5,zero
  80ea04:	0005883a 	mov	r2,zero
  80ea08:	9884d83a 	srl	r2,r19,r2
  80ea0c:	010020b4 	movhi	r4,130
  80ea10:	212f0404 	addi	r4,r4,-17392
  80ea14:	01800804 	movi	r6,32
  80ea18:	1105883a 	add	r2,r2,r4
  80ea1c:	10c00003 	ldbu	r3,0(r2)
  80ea20:	28c7883a 	add	r3,r5,r3
  80ea24:	30e9c83a 	sub	r20,r6,r3
  80ea28:	a0010a1e 	bne	r20,zero,80ee54 <__udivdi3+0x4bc>
  80ea2c:	982ed43a 	srli	r23,r19,16
  80ea30:	acebc83a 	sub	r21,r21,r19
  80ea34:	9dbfffcc 	andi	r22,r19,65535
  80ea38:	05000044 	movi	r20,1
  80ea3c:	a809883a 	mov	r4,r21
  80ea40:	b80b883a 	mov	r5,r23
  80ea44:	0806c2c0 	call	806c2c <__udivsi3>
  80ea48:	100b883a 	mov	r5,r2
  80ea4c:	b009883a 	mov	r4,r22
  80ea50:	1021883a 	mov	r16,r2
  80ea54:	0806c3c0 	call	806c3c <__mulsi3>
  80ea58:	a809883a 	mov	r4,r21
  80ea5c:	b80b883a 	mov	r5,r23
  80ea60:	1023883a 	mov	r17,r2
  80ea64:	0806c340 	call	806c34 <__umodsi3>
  80ea68:	1004943a 	slli	r2,r2,16
  80ea6c:	e006d43a 	srli	r3,fp,16
  80ea70:	10c4b03a 	or	r2,r2,r3
  80ea74:	1440042e 	bgeu	r2,r17,80ea88 <__udivdi3+0xf0>
  80ea78:	14c5883a 	add	r2,r2,r19
  80ea7c:	843fffc4 	addi	r16,r16,-1
  80ea80:	14c00136 	bltu	r2,r19,80ea88 <__udivdi3+0xf0>
  80ea84:	14415c36 	bltu	r2,r17,80eff8 <__udivdi3+0x660>
  80ea88:	1463c83a 	sub	r17,r2,r17
  80ea8c:	8809883a 	mov	r4,r17
  80ea90:	b80b883a 	mov	r5,r23
  80ea94:	0806c2c0 	call	806c2c <__udivsi3>
  80ea98:	100b883a 	mov	r5,r2
  80ea9c:	b009883a 	mov	r4,r22
  80eaa0:	102b883a 	mov	r21,r2
  80eaa4:	0806c3c0 	call	806c3c <__mulsi3>
  80eaa8:	8809883a 	mov	r4,r17
  80eaac:	b80b883a 	mov	r5,r23
  80eab0:	1025883a 	mov	r18,r2
  80eab4:	0806c340 	call	806c34 <__umodsi3>
  80eab8:	1004943a 	slli	r2,r2,16
  80eabc:	e0ffffcc 	andi	r3,fp,65535
  80eac0:	10c4b03a 	or	r2,r2,r3
  80eac4:	1480042e 	bgeu	r2,r18,80ead8 <__udivdi3+0x140>
  80eac8:	9885883a 	add	r2,r19,r2
  80eacc:	ad7fffc4 	addi	r21,r21,-1
  80ead0:	14c00136 	bltu	r2,r19,80ead8 <__udivdi3+0x140>
  80ead4:	14813c36 	bltu	r2,r18,80efc8 <__udivdi3+0x630>
  80ead8:	8004943a 	slli	r2,r16,16
  80eadc:	a009883a 	mov	r4,r20
  80eae0:	a884b03a 	or	r2,r21,r2
  80eae4:	00001506 	br	80eb3c <__udivdi3+0x1a4>
  80eae8:	380d883a 	mov	r6,r7
  80eaec:	29c06c36 	bltu	r5,r7,80eca0 <__udivdi3+0x308>
  80eaf0:	00bfffd4 	movui	r2,65535
  80eaf4:	11c06436 	bltu	r2,r7,80ec88 <__udivdi3+0x2f0>
  80eaf8:	00803fc4 	movi	r2,255
  80eafc:	11c11836 	bltu	r2,r7,80ef60 <__udivdi3+0x5c8>
  80eb00:	000b883a 	mov	r5,zero
  80eb04:	0005883a 	mov	r2,zero
  80eb08:	3084d83a 	srl	r2,r6,r2
  80eb0c:	010020b4 	movhi	r4,130
  80eb10:	212f0404 	addi	r4,r4,-17392
  80eb14:	01c00804 	movi	r7,32
  80eb18:	1105883a 	add	r2,r2,r4
  80eb1c:	10c00003 	ldbu	r3,0(r2)
  80eb20:	28c7883a 	add	r3,r5,r3
  80eb24:	38edc83a 	sub	r22,r7,r3
  80eb28:	b000731e 	bne	r22,zero,80ecf8 <__udivdi3+0x360>
  80eb2c:	35400136 	bltu	r6,r21,80eb34 <__udivdi3+0x19c>
  80eb30:	e4c05b36 	bltu	fp,r19,80eca0 <__udivdi3+0x308>
  80eb34:	00800044 	movi	r2,1
  80eb38:	0009883a 	mov	r4,zero
  80eb3c:	d8800315 	stw	r2,12(sp)
  80eb40:	d9400317 	ldw	r5,12(sp)
  80eb44:	2007883a 	mov	r3,r4
  80eb48:	d9000415 	stw	r4,16(sp)
  80eb4c:	2805883a 	mov	r2,r5
  80eb50:	dfc00e17 	ldw	ra,56(sp)
  80eb54:	df000d17 	ldw	fp,52(sp)
  80eb58:	ddc00c17 	ldw	r23,48(sp)
  80eb5c:	dd800b17 	ldw	r22,44(sp)
  80eb60:	dd400a17 	ldw	r21,40(sp)
  80eb64:	dd000917 	ldw	r20,36(sp)
  80eb68:	dcc00817 	ldw	r19,32(sp)
  80eb6c:	dc800717 	ldw	r18,28(sp)
  80eb70:	dc400617 	ldw	r17,24(sp)
  80eb74:	dc000517 	ldw	r16,20(sp)
  80eb78:	dec00f04 	addi	sp,sp,60
  80eb7c:	f800283a 	ret
  80eb80:	00bfffd4 	movui	r2,65535
  80eb84:	12005636 	bltu	r2,r8,80ece0 <__udivdi3+0x348>
  80eb88:	00803fc4 	movi	r2,255
  80eb8c:	12010036 	bltu	r2,r8,80ef90 <__udivdi3+0x5f8>
  80eb90:	000b883a 	mov	r5,zero
  80eb94:	0005883a 	mov	r2,zero
  80eb98:	9884d83a 	srl	r2,r19,r2
  80eb9c:	010020b4 	movhi	r4,130
  80eba0:	212f0404 	addi	r4,r4,-17392
  80eba4:	01800804 	movi	r6,32
  80eba8:	1105883a 	add	r2,r2,r4
  80ebac:	10c00003 	ldbu	r3,0(r2)
  80ebb0:	28c7883a 	add	r3,r5,r3
  80ebb4:	30cbc83a 	sub	r5,r6,r3
  80ebb8:	28000626 	beq	r5,zero,80ebd4 <__udivdi3+0x23c>
  80ebbc:	3145c83a 	sub	r2,r6,r5
  80ebc0:	e084d83a 	srl	r2,fp,r2
  80ebc4:	a946983a 	sll	r3,r21,r5
  80ebc8:	e178983a 	sll	fp,fp,r5
  80ebcc:	9966983a 	sll	r19,r19,r5
  80ebd0:	18aab03a 	or	r21,r3,r2
  80ebd4:	982ed43a 	srli	r23,r19,16
  80ebd8:	a809883a 	mov	r4,r21
  80ebdc:	9cbfffcc 	andi	r18,r19,65535
  80ebe0:	b80b883a 	mov	r5,r23
  80ebe4:	0806c2c0 	call	806c2c <__udivsi3>
  80ebe8:	100b883a 	mov	r5,r2
  80ebec:	9009883a 	mov	r4,r18
  80ebf0:	1021883a 	mov	r16,r2
  80ebf4:	0806c3c0 	call	806c3c <__mulsi3>
  80ebf8:	a809883a 	mov	r4,r21
  80ebfc:	b80b883a 	mov	r5,r23
  80ec00:	1023883a 	mov	r17,r2
  80ec04:	0806c340 	call	806c34 <__umodsi3>
  80ec08:	1004943a 	slli	r2,r2,16
  80ec0c:	e006d43a 	srli	r3,fp,16
  80ec10:	10c4b03a 	or	r2,r2,r3
  80ec14:	1440042e 	bgeu	r2,r17,80ec28 <__udivdi3+0x290>
  80ec18:	14c5883a 	add	r2,r2,r19
  80ec1c:	843fffc4 	addi	r16,r16,-1
  80ec20:	14c00136 	bltu	r2,r19,80ec28 <__udivdi3+0x290>
  80ec24:	1440ea36 	bltu	r2,r17,80efd0 <__udivdi3+0x638>
  80ec28:	1463c83a 	sub	r17,r2,r17
  80ec2c:	8809883a 	mov	r4,r17
  80ec30:	b80b883a 	mov	r5,r23
  80ec34:	0806c2c0 	call	806c2c <__udivsi3>
  80ec38:	100b883a 	mov	r5,r2
  80ec3c:	9009883a 	mov	r4,r18
  80ec40:	102b883a 	mov	r21,r2
  80ec44:	0806c3c0 	call	806c3c <__mulsi3>
  80ec48:	8809883a 	mov	r4,r17
  80ec4c:	b80b883a 	mov	r5,r23
  80ec50:	1025883a 	mov	r18,r2
  80ec54:	0806c340 	call	806c34 <__umodsi3>
  80ec58:	1004943a 	slli	r2,r2,16
  80ec5c:	e0ffffcc 	andi	r3,fp,65535
  80ec60:	10c4b03a 	or	r2,r2,r3
  80ec64:	1480042e 	bgeu	r2,r18,80ec78 <__udivdi3+0x2e0>
  80ec68:	9885883a 	add	r2,r19,r2
  80ec6c:	ad7fffc4 	addi	r21,r21,-1
  80ec70:	14c00136 	bltu	r2,r19,80ec78 <__udivdi3+0x2e0>
  80ec74:	1480d936 	bltu	r2,r18,80efdc <__udivdi3+0x644>
  80ec78:	8004943a 	slli	r2,r16,16
  80ec7c:	0009883a 	mov	r4,zero
  80ec80:	a884b03a 	or	r2,r21,r2
  80ec84:	003fad06 	br	80eb3c <__udivdi3+0x1a4>
  80ec88:	00804034 	movhi	r2,256
  80ec8c:	10bfffc4 	addi	r2,r2,-1
  80ec90:	11c0b636 	bltu	r2,r7,80ef6c <__udivdi3+0x5d4>
  80ec94:	01400404 	movi	r5,16
  80ec98:	2805883a 	mov	r2,r5
  80ec9c:	003f9a06 	br	80eb08 <__udivdi3+0x170>
  80eca0:	0005883a 	mov	r2,zero
  80eca4:	0009883a 	mov	r4,zero
  80eca8:	003fa406 	br	80eb3c <__udivdi3+0x1a4>
  80ecac:	00804034 	movhi	r2,256
  80ecb0:	10bfffc4 	addi	r2,r2,-1
  80ecb4:	14c0b336 	bltu	r2,r19,80ef84 <__udivdi3+0x5ec>
  80ecb8:	01400404 	movi	r5,16
  80ecbc:	2805883a 	mov	r2,r5
  80ecc0:	003f5106 	br	80ea08 <__udivdi3+0x70>
  80ecc4:	01000044 	movi	r4,1
  80ecc8:	000b883a 	mov	r5,zero
  80eccc:	0806c2c0 	call	806c2c <__udivsi3>
  80ecd0:	1027883a 	mov	r19,r2
  80ecd4:	00bfffd4 	movui	r2,65535
  80ecd8:	14fff436 	bltu	r2,r19,80ecac <__udivdi3+0x314>
  80ecdc:	003f4606 	br	80e9f8 <__udivdi3+0x60>
  80ece0:	00804034 	movhi	r2,256
  80ece4:	10bfffc4 	addi	r2,r2,-1
  80ece8:	1200ac36 	bltu	r2,r8,80ef9c <__udivdi3+0x604>
  80ecec:	01400404 	movi	r5,16
  80ecf0:	2805883a 	mov	r2,r5
  80ecf4:	003fa806 	br	80eb98 <__udivdi3+0x200>
  80ecf8:	3d85c83a 	sub	r2,r7,r22
  80ecfc:	3588983a 	sll	r4,r6,r22
  80ed00:	9886d83a 	srl	r3,r19,r2
  80ed04:	a8a2d83a 	srl	r17,r21,r2
  80ed08:	e084d83a 	srl	r2,fp,r2
  80ed0c:	20eeb03a 	or	r23,r4,r3
  80ed10:	b824d43a 	srli	r18,r23,16
  80ed14:	ad86983a 	sll	r3,r21,r22
  80ed18:	8809883a 	mov	r4,r17
  80ed1c:	900b883a 	mov	r5,r18
  80ed20:	1886b03a 	or	r3,r3,r2
  80ed24:	d8c00115 	stw	r3,4(sp)
  80ed28:	bc3fffcc 	andi	r16,r23,65535
  80ed2c:	0806c2c0 	call	806c2c <__udivsi3>
  80ed30:	100b883a 	mov	r5,r2
  80ed34:	8009883a 	mov	r4,r16
  80ed38:	1029883a 	mov	r20,r2
  80ed3c:	0806c3c0 	call	806c3c <__mulsi3>
  80ed40:	900b883a 	mov	r5,r18
  80ed44:	8809883a 	mov	r4,r17
  80ed48:	102b883a 	mov	r21,r2
  80ed4c:	0806c340 	call	806c34 <__umodsi3>
  80ed50:	d9400117 	ldw	r5,4(sp)
  80ed54:	1004943a 	slli	r2,r2,16
  80ed58:	9da6983a 	sll	r19,r19,r22
  80ed5c:	2806d43a 	srli	r3,r5,16
  80ed60:	10c4b03a 	or	r2,r2,r3
  80ed64:	1540032e 	bgeu	r2,r21,80ed74 <__udivdi3+0x3dc>
  80ed68:	15c5883a 	add	r2,r2,r23
  80ed6c:	a53fffc4 	addi	r20,r20,-1
  80ed70:	15c0912e 	bgeu	r2,r23,80efb8 <__udivdi3+0x620>
  80ed74:	1563c83a 	sub	r17,r2,r21
  80ed78:	8809883a 	mov	r4,r17
  80ed7c:	900b883a 	mov	r5,r18
  80ed80:	0806c2c0 	call	806c2c <__udivsi3>
  80ed84:	100b883a 	mov	r5,r2
  80ed88:	8009883a 	mov	r4,r16
  80ed8c:	102b883a 	mov	r21,r2
  80ed90:	0806c3c0 	call	806c3c <__mulsi3>
  80ed94:	8809883a 	mov	r4,r17
  80ed98:	900b883a 	mov	r5,r18
  80ed9c:	1021883a 	mov	r16,r2
  80eda0:	0806c340 	call	806c34 <__umodsi3>
  80eda4:	da800117 	ldw	r10,4(sp)
  80eda8:	1004943a 	slli	r2,r2,16
  80edac:	50ffffcc 	andi	r3,r10,65535
  80edb0:	10c6b03a 	or	r3,r2,r3
  80edb4:	1c00032e 	bgeu	r3,r16,80edc4 <__udivdi3+0x42c>
  80edb8:	1dc7883a 	add	r3,r3,r23
  80edbc:	ad7fffc4 	addi	r21,r21,-1
  80edc0:	1dc0792e 	bgeu	r3,r23,80efa8 <__udivdi3+0x610>
  80edc4:	a004943a 	slli	r2,r20,16
  80edc8:	982ed43a 	srli	r23,r19,16
  80edcc:	9cffffcc 	andi	r19,r19,65535
  80edd0:	a8a4b03a 	or	r18,r21,r2
  80edd4:	947fffcc 	andi	r17,r18,65535
  80edd8:	902ad43a 	srli	r21,r18,16
  80eddc:	8809883a 	mov	r4,r17
  80ede0:	980b883a 	mov	r5,r19
  80ede4:	1c21c83a 	sub	r16,r3,r16
  80ede8:	0806c3c0 	call	806c3c <__mulsi3>
  80edec:	8809883a 	mov	r4,r17
  80edf0:	b80b883a 	mov	r5,r23
  80edf4:	1029883a 	mov	r20,r2
  80edf8:	0806c3c0 	call	806c3c <__mulsi3>
  80edfc:	980b883a 	mov	r5,r19
  80ee00:	a809883a 	mov	r4,r21
  80ee04:	1023883a 	mov	r17,r2
  80ee08:	0806c3c0 	call	806c3c <__mulsi3>
  80ee0c:	a809883a 	mov	r4,r21
  80ee10:	b80b883a 	mov	r5,r23
  80ee14:	1027883a 	mov	r19,r2
  80ee18:	0806c3c0 	call	806c3c <__mulsi3>
  80ee1c:	1009883a 	mov	r4,r2
  80ee20:	a004d43a 	srli	r2,r20,16
  80ee24:	8ce3883a 	add	r17,r17,r19
  80ee28:	1447883a 	add	r3,r2,r17
  80ee2c:	1cc0022e 	bgeu	r3,r19,80ee38 <__udivdi3+0x4a0>
  80ee30:	00800074 	movhi	r2,1
  80ee34:	2089883a 	add	r4,r4,r2
  80ee38:	1804d43a 	srli	r2,r3,16
  80ee3c:	2085883a 	add	r2,r4,r2
  80ee40:	80804436 	bltu	r16,r2,80ef54 <__udivdi3+0x5bc>
  80ee44:	80803e26 	beq	r16,r2,80ef40 <__udivdi3+0x5a8>
  80ee48:	9005883a 	mov	r2,r18
  80ee4c:	0009883a 	mov	r4,zero
  80ee50:	003f3a06 	br	80eb3c <__udivdi3+0x1a4>
  80ee54:	9d26983a 	sll	r19,r19,r20
  80ee58:	3505c83a 	sub	r2,r6,r20
  80ee5c:	a8a2d83a 	srl	r17,r21,r2
  80ee60:	982ed43a 	srli	r23,r19,16
  80ee64:	e084d83a 	srl	r2,fp,r2
  80ee68:	ad06983a 	sll	r3,r21,r20
  80ee6c:	8809883a 	mov	r4,r17
  80ee70:	b80b883a 	mov	r5,r23
  80ee74:	1886b03a 	or	r3,r3,r2
  80ee78:	d8c00015 	stw	r3,0(sp)
  80ee7c:	9dbfffcc 	andi	r22,r19,65535
  80ee80:	0806c2c0 	call	806c2c <__udivsi3>
  80ee84:	100b883a 	mov	r5,r2
  80ee88:	b009883a 	mov	r4,r22
  80ee8c:	d8800215 	stw	r2,8(sp)
  80ee90:	0806c3c0 	call	806c3c <__mulsi3>
  80ee94:	8809883a 	mov	r4,r17
  80ee98:	b80b883a 	mov	r5,r23
  80ee9c:	102b883a 	mov	r21,r2
  80eea0:	0806c340 	call	806c34 <__umodsi3>
  80eea4:	d9000017 	ldw	r4,0(sp)
  80eea8:	1004943a 	slli	r2,r2,16
  80eeac:	2006d43a 	srli	r3,r4,16
  80eeb0:	10c4b03a 	or	r2,r2,r3
  80eeb4:	1540052e 	bgeu	r2,r21,80eecc <__udivdi3+0x534>
  80eeb8:	d9400217 	ldw	r5,8(sp)
  80eebc:	14c5883a 	add	r2,r2,r19
  80eec0:	297fffc4 	addi	r5,r5,-1
  80eec4:	d9400215 	stw	r5,8(sp)
  80eec8:	14c0462e 	bgeu	r2,r19,80efe4 <__udivdi3+0x64c>
  80eecc:	1563c83a 	sub	r17,r2,r21
  80eed0:	8809883a 	mov	r4,r17
  80eed4:	b80b883a 	mov	r5,r23
  80eed8:	0806c2c0 	call	806c2c <__udivsi3>
  80eedc:	100b883a 	mov	r5,r2
  80eee0:	b009883a 	mov	r4,r22
  80eee4:	1025883a 	mov	r18,r2
  80eee8:	0806c3c0 	call	806c3c <__mulsi3>
  80eeec:	8809883a 	mov	r4,r17
  80eef0:	b80b883a 	mov	r5,r23
  80eef4:	1021883a 	mov	r16,r2
  80eef8:	0806c340 	call	806c34 <__umodsi3>
  80eefc:	da800017 	ldw	r10,0(sp)
  80ef00:	1004943a 	slli	r2,r2,16
  80ef04:	50ffffcc 	andi	r3,r10,65535
  80ef08:	10c6b03a 	or	r3,r2,r3
  80ef0c:	1c00062e 	bgeu	r3,r16,80ef28 <__udivdi3+0x590>
  80ef10:	1cc7883a 	add	r3,r3,r19
  80ef14:	94bfffc4 	addi	r18,r18,-1
  80ef18:	1cc00336 	bltu	r3,r19,80ef28 <__udivdi3+0x590>
  80ef1c:	1c00022e 	bgeu	r3,r16,80ef28 <__udivdi3+0x590>
  80ef20:	94bfffc4 	addi	r18,r18,-1
  80ef24:	1cc7883a 	add	r3,r3,r19
  80ef28:	d9000217 	ldw	r4,8(sp)
  80ef2c:	e538983a 	sll	fp,fp,r20
  80ef30:	1c2bc83a 	sub	r21,r3,r16
  80ef34:	2004943a 	slli	r2,r4,16
  80ef38:	90a8b03a 	or	r20,r18,r2
  80ef3c:	003ebf06 	br	80ea3c <__udivdi3+0xa4>
  80ef40:	1804943a 	slli	r2,r3,16
  80ef44:	e588983a 	sll	r4,fp,r22
  80ef48:	a0ffffcc 	andi	r3,r20,65535
  80ef4c:	10c5883a 	add	r2,r2,r3
  80ef50:	20bfbd2e 	bgeu	r4,r2,80ee48 <__udivdi3+0x4b0>
  80ef54:	90bfffc4 	addi	r2,r18,-1
  80ef58:	0009883a 	mov	r4,zero
  80ef5c:	003ef706 	br	80eb3c <__udivdi3+0x1a4>
  80ef60:	01400204 	movi	r5,8
  80ef64:	2805883a 	mov	r2,r5
  80ef68:	003ee706 	br	80eb08 <__udivdi3+0x170>
  80ef6c:	01400604 	movi	r5,24
  80ef70:	2805883a 	mov	r2,r5
  80ef74:	003ee406 	br	80eb08 <__udivdi3+0x170>
  80ef78:	01400204 	movi	r5,8
  80ef7c:	2805883a 	mov	r2,r5
  80ef80:	003ea106 	br	80ea08 <__udivdi3+0x70>
  80ef84:	01400604 	movi	r5,24
  80ef88:	2805883a 	mov	r2,r5
  80ef8c:	003e9e06 	br	80ea08 <__udivdi3+0x70>
  80ef90:	01400204 	movi	r5,8
  80ef94:	2805883a 	mov	r2,r5
  80ef98:	003eff06 	br	80eb98 <__udivdi3+0x200>
  80ef9c:	01400604 	movi	r5,24
  80efa0:	2805883a 	mov	r2,r5
  80efa4:	003efc06 	br	80eb98 <__udivdi3+0x200>
  80efa8:	1c3f862e 	bgeu	r3,r16,80edc4 <__udivdi3+0x42c>
  80efac:	1dc7883a 	add	r3,r3,r23
  80efb0:	ad7fffc4 	addi	r21,r21,-1
  80efb4:	003f8306 	br	80edc4 <__udivdi3+0x42c>
  80efb8:	157f6e2e 	bgeu	r2,r21,80ed74 <__udivdi3+0x3dc>
  80efbc:	a53fffc4 	addi	r20,r20,-1
  80efc0:	15c5883a 	add	r2,r2,r23
  80efc4:	003f6b06 	br	80ed74 <__udivdi3+0x3dc>
  80efc8:	ad7fffc4 	addi	r21,r21,-1
  80efcc:	003ec206 	br	80ead8 <__udivdi3+0x140>
  80efd0:	843fffc4 	addi	r16,r16,-1
  80efd4:	14c5883a 	add	r2,r2,r19
  80efd8:	003f1306 	br	80ec28 <__udivdi3+0x290>
  80efdc:	ad7fffc4 	addi	r21,r21,-1
  80efe0:	003f2506 	br	80ec78 <__udivdi3+0x2e0>
  80efe4:	157fb92e 	bgeu	r2,r21,80eecc <__udivdi3+0x534>
  80efe8:	297fffc4 	addi	r5,r5,-1
  80efec:	14c5883a 	add	r2,r2,r19
  80eff0:	d9400215 	stw	r5,8(sp)
  80eff4:	003fb506 	br	80eecc <__udivdi3+0x534>
  80eff8:	843fffc4 	addi	r16,r16,-1
  80effc:	14c5883a 	add	r2,r2,r19
  80f000:	003ea106 	br	80ea88 <__udivdi3+0xf0>

0080f004 <__umoddi3>:
  80f004:	defff004 	addi	sp,sp,-64
  80f008:	3011883a 	mov	r8,r6
  80f00c:	000d883a 	mov	r6,zero
  80f010:	dd400b15 	stw	r21,44(sp)
  80f014:	dcc00915 	stw	r19,36(sp)
  80f018:	dc000615 	stw	r16,24(sp)
  80f01c:	dfc00f15 	stw	ra,60(sp)
  80f020:	df000e15 	stw	fp,56(sp)
  80f024:	ddc00d15 	stw	r23,52(sp)
  80f028:	dd800c15 	stw	r22,48(sp)
  80f02c:	dd000a15 	stw	r20,40(sp)
  80f030:	dc800815 	stw	r18,32(sp)
  80f034:	dc400715 	stw	r17,28(sp)
  80f038:	2817883a 	mov	r11,r5
  80f03c:	d9800415 	stw	r6,16(sp)
  80f040:	4027883a 	mov	r19,r8
  80f044:	d9800515 	stw	r6,20(sp)
  80f048:	2021883a 	mov	r16,r4
  80f04c:	282b883a 	mov	r21,r5
  80f050:	38002c1e 	bne	r7,zero,80f104 <__umoddi3+0x100>
  80f054:	2a005636 	bltu	r5,r8,80f1b0 <__umoddi3+0x1ac>
  80f058:	40009a26 	beq	r8,zero,80f2c4 <__umoddi3+0x2c0>
  80f05c:	00bfffd4 	movui	r2,65535
  80f060:	14c09236 	bltu	r2,r19,80f2ac <__umoddi3+0x2a8>
  80f064:	00803fc4 	movi	r2,255
  80f068:	14c15c36 	bltu	r2,r19,80f5dc <__umoddi3+0x5d8>
  80f06c:	000b883a 	mov	r5,zero
  80f070:	0005883a 	mov	r2,zero
  80f074:	9884d83a 	srl	r2,r19,r2
  80f078:	010020b4 	movhi	r4,130
  80f07c:	212f0404 	addi	r4,r4,-17392
  80f080:	01800804 	movi	r6,32
  80f084:	1105883a 	add	r2,r2,r4
  80f088:	10c00003 	ldbu	r3,0(r2)
  80f08c:	28c7883a 	add	r3,r5,r3
  80f090:	30e5c83a 	sub	r18,r6,r3
  80f094:	9000a41e 	bne	r18,zero,80f328 <__umoddi3+0x324>
  80f098:	982ed43a 	srli	r23,r19,16
  80f09c:	acebc83a 	sub	r21,r21,r19
  80f0a0:	9d3fffcc 	andi	r20,r19,65535
  80f0a4:	002d883a 	mov	r22,zero
  80f0a8:	a809883a 	mov	r4,r21
  80f0ac:	b80b883a 	mov	r5,r23
  80f0b0:	0806c2c0 	call	806c2c <__udivsi3>
  80f0b4:	100b883a 	mov	r5,r2
  80f0b8:	a009883a 	mov	r4,r20
  80f0bc:	0806c3c0 	call	806c3c <__mulsi3>
  80f0c0:	a809883a 	mov	r4,r21
  80f0c4:	b80b883a 	mov	r5,r23
  80f0c8:	1023883a 	mov	r17,r2
  80f0cc:	0806c340 	call	806c34 <__umodsi3>
  80f0d0:	1004943a 	slli	r2,r2,16
  80f0d4:	8006d43a 	srli	r3,r16,16
  80f0d8:	10c4b03a 	or	r2,r2,r3
  80f0dc:	1440032e 	bgeu	r2,r17,80f0ec <__umoddi3+0xe8>
  80f0e0:	14c5883a 	add	r2,r2,r19
  80f0e4:	14c00136 	bltu	r2,r19,80f0ec <__umoddi3+0xe8>
  80f0e8:	14415836 	bltu	r2,r17,80f64c <__umoddi3+0x648>
  80f0ec:	1463c83a 	sub	r17,r2,r17
  80f0f0:	8809883a 	mov	r4,r17
  80f0f4:	b80b883a 	mov	r5,r23
  80f0f8:	0806c2c0 	call	806c2c <__udivsi3>
  80f0fc:	a009883a 	mov	r4,r20
  80f100:	00005306 	br	80f250 <__umoddi3+0x24c>
  80f104:	380d883a 	mov	r6,r7
  80f108:	29c0132e 	bgeu	r5,r7,80f158 <__umoddi3+0x154>
  80f10c:	d9000415 	stw	r4,16(sp)
  80f110:	d9400515 	stw	r5,20(sp)
  80f114:	d9400417 	ldw	r5,16(sp)
  80f118:	5813883a 	mov	r9,r11
  80f11c:	2811883a 	mov	r8,r5
  80f120:	4005883a 	mov	r2,r8
  80f124:	4807883a 	mov	r3,r9
  80f128:	dfc00f17 	ldw	ra,60(sp)
  80f12c:	df000e17 	ldw	fp,56(sp)
  80f130:	ddc00d17 	ldw	r23,52(sp)
  80f134:	dd800c17 	ldw	r22,48(sp)
  80f138:	dd400b17 	ldw	r21,44(sp)
  80f13c:	dd000a17 	ldw	r20,40(sp)
  80f140:	dcc00917 	ldw	r19,36(sp)
  80f144:	dc800817 	ldw	r18,32(sp)
  80f148:	dc400717 	ldw	r17,28(sp)
  80f14c:	dc000617 	ldw	r16,24(sp)
  80f150:	dec01004 	addi	sp,sp,64
  80f154:	f800283a 	ret
  80f158:	00bfffd4 	movui	r2,65535
  80f15c:	11c06636 	bltu	r2,r7,80f2f8 <__umoddi3+0x2f4>
  80f160:	00803fc4 	movi	r2,255
  80f164:	11c12036 	bltu	r2,r7,80f5e8 <__umoddi3+0x5e4>
  80f168:	000b883a 	mov	r5,zero
  80f16c:	0005883a 	mov	r2,zero
  80f170:	3084d83a 	srl	r2,r6,r2
  80f174:	010020b4 	movhi	r4,130
  80f178:	212f0404 	addi	r4,r4,-17392
  80f17c:	01c00804 	movi	r7,32
  80f180:	1105883a 	add	r2,r2,r4
  80f184:	10c00003 	ldbu	r3,0(r2)
  80f188:	28c7883a 	add	r3,r5,r3
  80f18c:	38e5c83a 	sub	r18,r7,r3
  80f190:	9000941e 	bne	r18,zero,80f3e4 <__umoddi3+0x3e0>
  80f194:	35405e36 	bltu	r6,r21,80f310 <__umoddi3+0x30c>
  80f198:	84c05d2e 	bgeu	r16,r19,80f310 <__umoddi3+0x30c>
  80f19c:	8011883a 	mov	r8,r16
  80f1a0:	a813883a 	mov	r9,r21
  80f1a4:	dc000415 	stw	r16,16(sp)
  80f1a8:	dd400515 	stw	r21,20(sp)
  80f1ac:	003fdc06 	br	80f120 <__umoddi3+0x11c>
  80f1b0:	00bfffd4 	movui	r2,65535
  80f1b4:	12004a36 	bltu	r2,r8,80f2e0 <__umoddi3+0x2dc>
  80f1b8:	00803fc4 	movi	r2,255
  80f1bc:	12010d36 	bltu	r2,r8,80f5f4 <__umoddi3+0x5f0>
  80f1c0:	000b883a 	mov	r5,zero
  80f1c4:	0005883a 	mov	r2,zero
  80f1c8:	9884d83a 	srl	r2,r19,r2
  80f1cc:	010020b4 	movhi	r4,130
  80f1d0:	212f0404 	addi	r4,r4,-17392
  80f1d4:	01800804 	movi	r6,32
  80f1d8:	1105883a 	add	r2,r2,r4
  80f1dc:	10c00003 	ldbu	r3,0(r2)
  80f1e0:	28c7883a 	add	r3,r5,r3
  80f1e4:	30c7c83a 	sub	r3,r6,r3
  80f1e8:	1800dc1e 	bne	r3,zero,80f55c <__umoddi3+0x558>
  80f1ec:	002d883a 	mov	r22,zero
  80f1f0:	982ed43a 	srli	r23,r19,16
  80f1f4:	a809883a 	mov	r4,r21
  80f1f8:	9cbfffcc 	andi	r18,r19,65535
  80f1fc:	b80b883a 	mov	r5,r23
  80f200:	0806c2c0 	call	806c2c <__udivsi3>
  80f204:	100b883a 	mov	r5,r2
  80f208:	9009883a 	mov	r4,r18
  80f20c:	0806c3c0 	call	806c3c <__mulsi3>
  80f210:	a809883a 	mov	r4,r21
  80f214:	b80b883a 	mov	r5,r23
  80f218:	1023883a 	mov	r17,r2
  80f21c:	0806c340 	call	806c34 <__umodsi3>
  80f220:	1004943a 	slli	r2,r2,16
  80f224:	8006d43a 	srli	r3,r16,16
  80f228:	10c4b03a 	or	r2,r2,r3
  80f22c:	1440032e 	bgeu	r2,r17,80f23c <__umoddi3+0x238>
  80f230:	14c5883a 	add	r2,r2,r19
  80f234:	14c00136 	bltu	r2,r19,80f23c <__umoddi3+0x238>
  80f238:	14410236 	bltu	r2,r17,80f644 <__umoddi3+0x640>
  80f23c:	1463c83a 	sub	r17,r2,r17
  80f240:	8809883a 	mov	r4,r17
  80f244:	b80b883a 	mov	r5,r23
  80f248:	0806c2c0 	call	806c2c <__udivsi3>
  80f24c:	9009883a 	mov	r4,r18
  80f250:	100b883a 	mov	r5,r2
  80f254:	0806c3c0 	call	806c3c <__mulsi3>
  80f258:	8809883a 	mov	r4,r17
  80f25c:	b80b883a 	mov	r5,r23
  80f260:	102b883a 	mov	r21,r2
  80f264:	0806c340 	call	806c34 <__umodsi3>
  80f268:	1004943a 	slli	r2,r2,16
  80f26c:	80ffffcc 	andi	r3,r16,65535
  80f270:	10c4b03a 	or	r2,r2,r3
  80f274:	1540042e 	bgeu	r2,r21,80f288 <__umoddi3+0x284>
  80f278:	14c5883a 	add	r2,r2,r19
  80f27c:	14c00236 	bltu	r2,r19,80f288 <__umoddi3+0x284>
  80f280:	1540012e 	bgeu	r2,r21,80f288 <__umoddi3+0x284>
  80f284:	14c5883a 	add	r2,r2,r19
  80f288:	1545c83a 	sub	r2,r2,r21
  80f28c:	1584d83a 	srl	r2,r2,r22
  80f290:	0013883a 	mov	r9,zero
  80f294:	d8800415 	stw	r2,16(sp)
  80f298:	d8c00417 	ldw	r3,16(sp)
  80f29c:	0005883a 	mov	r2,zero
  80f2a0:	d8800515 	stw	r2,20(sp)
  80f2a4:	1811883a 	mov	r8,r3
  80f2a8:	003f9d06 	br	80f120 <__umoddi3+0x11c>
  80f2ac:	00804034 	movhi	r2,256
  80f2b0:	10bfffc4 	addi	r2,r2,-1
  80f2b4:	14c0c636 	bltu	r2,r19,80f5d0 <__umoddi3+0x5cc>
  80f2b8:	01400404 	movi	r5,16
  80f2bc:	2805883a 	mov	r2,r5
  80f2c0:	003f6c06 	br	80f074 <__umoddi3+0x70>
  80f2c4:	01000044 	movi	r4,1
  80f2c8:	000b883a 	mov	r5,zero
  80f2cc:	0806c2c0 	call	806c2c <__udivsi3>
  80f2d0:	1027883a 	mov	r19,r2
  80f2d4:	00bfffd4 	movui	r2,65535
  80f2d8:	14fff436 	bltu	r2,r19,80f2ac <__umoddi3+0x2a8>
  80f2dc:	003f6106 	br	80f064 <__umoddi3+0x60>
  80f2e0:	00804034 	movhi	r2,256
  80f2e4:	10bfffc4 	addi	r2,r2,-1
  80f2e8:	1200c536 	bltu	r2,r8,80f600 <__umoddi3+0x5fc>
  80f2ec:	01400404 	movi	r5,16
  80f2f0:	2805883a 	mov	r2,r5
  80f2f4:	003fb406 	br	80f1c8 <__umoddi3+0x1c4>
  80f2f8:	00804034 	movhi	r2,256
  80f2fc:	10bfffc4 	addi	r2,r2,-1
  80f300:	11c0c236 	bltu	r2,r7,80f60c <__umoddi3+0x608>
  80f304:	01400404 	movi	r5,16
  80f308:	2805883a 	mov	r2,r5
  80f30c:	003f9806 	br	80f170 <__umoddi3+0x16c>
  80f310:	84c9c83a 	sub	r4,r16,r19
  80f314:	8105803a 	cmpltu	r2,r16,r4
  80f318:	a987c83a 	sub	r3,r21,r6
  80f31c:	18abc83a 	sub	r21,r3,r2
  80f320:	2021883a 	mov	r16,r4
  80f324:	003f9d06 	br	80f19c <__umoddi3+0x198>
  80f328:	9ca6983a 	sll	r19,r19,r18
  80f32c:	3485c83a 	sub	r2,r6,r18
  80f330:	a8a2d83a 	srl	r17,r21,r2
  80f334:	982ed43a 	srli	r23,r19,16
  80f338:	ac86983a 	sll	r3,r21,r18
  80f33c:	8084d83a 	srl	r2,r16,r2
  80f340:	8809883a 	mov	r4,r17
  80f344:	b80b883a 	mov	r5,r23
  80f348:	18b8b03a 	or	fp,r3,r2
  80f34c:	9d3fffcc 	andi	r20,r19,65535
  80f350:	0806c2c0 	call	806c2c <__udivsi3>
  80f354:	100b883a 	mov	r5,r2
  80f358:	a009883a 	mov	r4,r20
  80f35c:	0806c3c0 	call	806c3c <__mulsi3>
  80f360:	8809883a 	mov	r4,r17
  80f364:	b80b883a 	mov	r5,r23
  80f368:	102b883a 	mov	r21,r2
  80f36c:	0806c340 	call	806c34 <__umodsi3>
  80f370:	1004943a 	slli	r2,r2,16
  80f374:	e006d43a 	srli	r3,fp,16
  80f378:	902d883a 	mov	r22,r18
  80f37c:	10c4b03a 	or	r2,r2,r3
  80f380:	1540022e 	bgeu	r2,r21,80f38c <__umoddi3+0x388>
  80f384:	14c5883a 	add	r2,r2,r19
  80f388:	14c0ab2e 	bgeu	r2,r19,80f638 <__umoddi3+0x634>
  80f38c:	1563c83a 	sub	r17,r2,r21
  80f390:	8809883a 	mov	r4,r17
  80f394:	b80b883a 	mov	r5,r23
  80f398:	0806c2c0 	call	806c2c <__udivsi3>
  80f39c:	100b883a 	mov	r5,r2
  80f3a0:	a009883a 	mov	r4,r20
  80f3a4:	0806c3c0 	call	806c3c <__mulsi3>
  80f3a8:	8809883a 	mov	r4,r17
  80f3ac:	b80b883a 	mov	r5,r23
  80f3b0:	102b883a 	mov	r21,r2
  80f3b4:	0806c340 	call	806c34 <__umodsi3>
  80f3b8:	1004943a 	slli	r2,r2,16
  80f3bc:	e0ffffcc 	andi	r3,fp,65535
  80f3c0:	10c4b03a 	or	r2,r2,r3
  80f3c4:	1540042e 	bgeu	r2,r21,80f3d8 <__umoddi3+0x3d4>
  80f3c8:	14c5883a 	add	r2,r2,r19
  80f3cc:	14c00236 	bltu	r2,r19,80f3d8 <__umoddi3+0x3d4>
  80f3d0:	1540012e 	bgeu	r2,r21,80f3d8 <__umoddi3+0x3d4>
  80f3d4:	14c5883a 	add	r2,r2,r19
  80f3d8:	84a0983a 	sll	r16,r16,r18
  80f3dc:	156bc83a 	sub	r21,r2,r21
  80f3e0:	003f3106 	br	80f0a8 <__umoddi3+0xa4>
  80f3e4:	3c8fc83a 	sub	r7,r7,r18
  80f3e8:	3486983a 	sll	r3,r6,r18
  80f3ec:	99c4d83a 	srl	r2,r19,r7
  80f3f0:	a9e2d83a 	srl	r17,r21,r7
  80f3f4:	ac8c983a 	sll	r6,r21,r18
  80f3f8:	18acb03a 	or	r22,r3,r2
  80f3fc:	b02ed43a 	srli	r23,r22,16
  80f400:	81c4d83a 	srl	r2,r16,r7
  80f404:	8809883a 	mov	r4,r17
  80f408:	b80b883a 	mov	r5,r23
  80f40c:	308cb03a 	or	r6,r6,r2
  80f410:	d9c00315 	stw	r7,12(sp)
  80f414:	d9800215 	stw	r6,8(sp)
  80f418:	b53fffcc 	andi	r20,r22,65535
  80f41c:	0806c2c0 	call	806c2c <__udivsi3>
  80f420:	100b883a 	mov	r5,r2
  80f424:	a009883a 	mov	r4,r20
  80f428:	1039883a 	mov	fp,r2
  80f42c:	0806c3c0 	call	806c3c <__mulsi3>
  80f430:	8809883a 	mov	r4,r17
  80f434:	b80b883a 	mov	r5,r23
  80f438:	102b883a 	mov	r21,r2
  80f43c:	0806c340 	call	806c34 <__umodsi3>
  80f440:	d9000217 	ldw	r4,8(sp)
  80f444:	1004943a 	slli	r2,r2,16
  80f448:	9ca6983a 	sll	r19,r19,r18
  80f44c:	2006d43a 	srli	r3,r4,16
  80f450:	84a0983a 	sll	r16,r16,r18
  80f454:	dcc00015 	stw	r19,0(sp)
  80f458:	10c4b03a 	or	r2,r2,r3
  80f45c:	dc000115 	stw	r16,4(sp)
  80f460:	1540032e 	bgeu	r2,r21,80f470 <__umoddi3+0x46c>
  80f464:	1585883a 	add	r2,r2,r22
  80f468:	e73fffc4 	addi	fp,fp,-1
  80f46c:	15806e2e 	bgeu	r2,r22,80f628 <__umoddi3+0x624>
  80f470:	1563c83a 	sub	r17,r2,r21
  80f474:	8809883a 	mov	r4,r17
  80f478:	b80b883a 	mov	r5,r23
  80f47c:	0806c2c0 	call	806c2c <__udivsi3>
  80f480:	100b883a 	mov	r5,r2
  80f484:	a009883a 	mov	r4,r20
  80f488:	1021883a 	mov	r16,r2
  80f48c:	0806c3c0 	call	806c3c <__mulsi3>
  80f490:	b80b883a 	mov	r5,r23
  80f494:	8809883a 	mov	r4,r17
  80f498:	1029883a 	mov	r20,r2
  80f49c:	0806c340 	call	806c34 <__umodsi3>
  80f4a0:	d9400217 	ldw	r5,8(sp)
  80f4a4:	1004943a 	slli	r2,r2,16
  80f4a8:	28ffffcc 	andi	r3,r5,65535
  80f4ac:	10c4b03a 	or	r2,r2,r3
  80f4b0:	1500032e 	bgeu	r2,r20,80f4c0 <__umoddi3+0x4bc>
  80f4b4:	1585883a 	add	r2,r2,r22
  80f4b8:	843fffc4 	addi	r16,r16,-1
  80f4bc:	1580562e 	bgeu	r2,r22,80f618 <__umoddi3+0x614>
  80f4c0:	d9800017 	ldw	r6,0(sp)
  80f4c4:	e022943a 	slli	r17,fp,16
  80f4c8:	302ed43a 	srli	r23,r6,16
  80f4cc:	8462b03a 	or	r17,r16,r17
  80f4d0:	34ffffcc 	andi	r19,r6,65535
  80f4d4:	882ad43a 	srli	r21,r17,16
  80f4d8:	8c7fffcc 	andi	r17,r17,65535
  80f4dc:	8809883a 	mov	r4,r17
  80f4e0:	980b883a 	mov	r5,r19
  80f4e4:	1521c83a 	sub	r16,r2,r20
  80f4e8:	0806c3c0 	call	806c3c <__mulsi3>
  80f4ec:	8809883a 	mov	r4,r17
  80f4f0:	b80b883a 	mov	r5,r23
  80f4f4:	1029883a 	mov	r20,r2
  80f4f8:	0806c3c0 	call	806c3c <__mulsi3>
  80f4fc:	980b883a 	mov	r5,r19
  80f500:	a809883a 	mov	r4,r21
  80f504:	1023883a 	mov	r17,r2
  80f508:	0806c3c0 	call	806c3c <__mulsi3>
  80f50c:	a809883a 	mov	r4,r21
  80f510:	b80b883a 	mov	r5,r23
  80f514:	1027883a 	mov	r19,r2
  80f518:	0806c3c0 	call	806c3c <__mulsi3>
  80f51c:	100b883a 	mov	r5,r2
  80f520:	a004d43a 	srli	r2,r20,16
  80f524:	8ce3883a 	add	r17,r17,r19
  80f528:	1449883a 	add	r4,r2,r17
  80f52c:	24c0022e 	bgeu	r4,r19,80f538 <__umoddi3+0x534>
  80f530:	00800074 	movhi	r2,1
  80f534:	288b883a 	add	r5,r5,r2
  80f538:	2004d43a 	srli	r2,r4,16
  80f53c:	2008943a 	slli	r4,r4,16
  80f540:	a0ffffcc 	andi	r3,r20,65535
  80f544:	288d883a 	add	r6,r5,r2
  80f548:	20c9883a 	add	r4,r4,r3
  80f54c:	81800b36 	bltu	r16,r6,80f57c <__umoddi3+0x578>
  80f550:	81804026 	beq	r16,r6,80f654 <__umoddi3+0x650>
  80f554:	818dc83a 	sub	r6,r16,r6
  80f558:	00000f06 	br	80f598 <__umoddi3+0x594>
  80f55c:	30c5c83a 	sub	r2,r6,r3
  80f560:	182d883a 	mov	r22,r3
  80f564:	8084d83a 	srl	r2,r16,r2
  80f568:	a8c6983a 	sll	r3,r21,r3
  80f56c:	9da6983a 	sll	r19,r19,r22
  80f570:	85a0983a 	sll	r16,r16,r22
  80f574:	18aab03a 	or	r21,r3,r2
  80f578:	003f1d06 	br	80f1f0 <__umoddi3+0x1ec>
  80f57c:	d8c00017 	ldw	r3,0(sp)
  80f580:	20c5c83a 	sub	r2,r4,r3
  80f584:	2089803a 	cmpltu	r4,r4,r2
  80f588:	3587c83a 	sub	r3,r6,r22
  80f58c:	1907c83a 	sub	r3,r3,r4
  80f590:	80cdc83a 	sub	r6,r16,r3
  80f594:	1009883a 	mov	r4,r2
  80f598:	d9400117 	ldw	r5,4(sp)
  80f59c:	2905c83a 	sub	r2,r5,r4
  80f5a0:	2887803a 	cmpltu	r3,r5,r2
  80f5a4:	30c7c83a 	sub	r3,r6,r3
  80f5a8:	d9800317 	ldw	r6,12(sp)
  80f5ac:	1484d83a 	srl	r2,r2,r18
  80f5b0:	1988983a 	sll	r4,r3,r6
  80f5b4:	1c86d83a 	srl	r3,r3,r18
  80f5b8:	2088b03a 	or	r4,r4,r2
  80f5bc:	2011883a 	mov	r8,r4
  80f5c0:	1813883a 	mov	r9,r3
  80f5c4:	d9000415 	stw	r4,16(sp)
  80f5c8:	d8c00515 	stw	r3,20(sp)
  80f5cc:	003ed406 	br	80f120 <__umoddi3+0x11c>
  80f5d0:	01400604 	movi	r5,24
  80f5d4:	2805883a 	mov	r2,r5
  80f5d8:	003ea606 	br	80f074 <__umoddi3+0x70>
  80f5dc:	01400204 	movi	r5,8
  80f5e0:	2805883a 	mov	r2,r5
  80f5e4:	003ea306 	br	80f074 <__umoddi3+0x70>
  80f5e8:	01400204 	movi	r5,8
  80f5ec:	2805883a 	mov	r2,r5
  80f5f0:	003edf06 	br	80f170 <__umoddi3+0x16c>
  80f5f4:	01400204 	movi	r5,8
  80f5f8:	2805883a 	mov	r2,r5
  80f5fc:	003ef206 	br	80f1c8 <__umoddi3+0x1c4>
  80f600:	01400604 	movi	r5,24
  80f604:	2805883a 	mov	r2,r5
  80f608:	003eef06 	br	80f1c8 <__umoddi3+0x1c4>
  80f60c:	01400604 	movi	r5,24
  80f610:	2805883a 	mov	r2,r5
  80f614:	003ed606 	br	80f170 <__umoddi3+0x16c>
  80f618:	153fa92e 	bgeu	r2,r20,80f4c0 <__umoddi3+0x4bc>
  80f61c:	843fffc4 	addi	r16,r16,-1
  80f620:	1585883a 	add	r2,r2,r22
  80f624:	003fa606 	br	80f4c0 <__umoddi3+0x4bc>
  80f628:	157f912e 	bgeu	r2,r21,80f470 <__umoddi3+0x46c>
  80f62c:	e73fffc4 	addi	fp,fp,-1
  80f630:	1585883a 	add	r2,r2,r22
  80f634:	003f8e06 	br	80f470 <__umoddi3+0x46c>
  80f638:	157f542e 	bgeu	r2,r21,80f38c <__umoddi3+0x388>
  80f63c:	14c5883a 	add	r2,r2,r19
  80f640:	003f5206 	br	80f38c <__umoddi3+0x388>
  80f644:	14c5883a 	add	r2,r2,r19
  80f648:	003efc06 	br	80f23c <__umoddi3+0x238>
  80f64c:	14c5883a 	add	r2,r2,r19
  80f650:	003ea606 	br	80f0ec <__umoddi3+0xe8>
  80f654:	d8800117 	ldw	r2,4(sp)
  80f658:	113fc836 	bltu	r2,r4,80f57c <__umoddi3+0x578>
  80f65c:	000d883a 	mov	r6,zero
  80f660:	003fcd06 	br	80f598 <__umoddi3+0x594>

0080f664 <__gedf2>:
  80f664:	deffef04 	addi	sp,sp,-68
  80f668:	dc400f15 	stw	r17,60(sp)
  80f66c:	dc400404 	addi	r17,sp,16
  80f670:	2005883a 	mov	r2,r4
  80f674:	2807883a 	mov	r3,r5
  80f678:	dc000e15 	stw	r16,56(sp)
  80f67c:	d809883a 	mov	r4,sp
  80f680:	880b883a 	mov	r5,r17
  80f684:	dc000904 	addi	r16,sp,36
  80f688:	d8c00115 	stw	r3,4(sp)
  80f68c:	d8800015 	stw	r2,0(sp)
  80f690:	d9800215 	stw	r6,8(sp)
  80f694:	dfc01015 	stw	ra,64(sp)
  80f698:	d9c00315 	stw	r7,12(sp)
  80f69c:	08073800 	call	807380 <__unpack_d>
  80f6a0:	d9000204 	addi	r4,sp,8
  80f6a4:	800b883a 	mov	r5,r16
  80f6a8:	08073800 	call	807380 <__unpack_d>
  80f6ac:	d8800417 	ldw	r2,16(sp)
  80f6b0:	00c00044 	movi	r3,1
  80f6b4:	01bfffc4 	movi	r6,-1
  80f6b8:	1880062e 	bgeu	r3,r2,80f6d4 <__gedf2+0x70>
  80f6bc:	d8800917 	ldw	r2,36(sp)
  80f6c0:	8809883a 	mov	r4,r17
  80f6c4:	800b883a 	mov	r5,r16
  80f6c8:	1880022e 	bgeu	r3,r2,80f6d4 <__gedf2+0x70>
  80f6cc:	08074b80 	call	8074b8 <__fpcmp_parts_d>
  80f6d0:	100d883a 	mov	r6,r2
  80f6d4:	3005883a 	mov	r2,r6
  80f6d8:	dfc01017 	ldw	ra,64(sp)
  80f6dc:	dc400f17 	ldw	r17,60(sp)
  80f6e0:	dc000e17 	ldw	r16,56(sp)
  80f6e4:	dec01104 	addi	sp,sp,68
  80f6e8:	f800283a 	ret

0080f6ec <__fixdfsi>:
  80f6ec:	defff804 	addi	sp,sp,-32
  80f6f0:	2005883a 	mov	r2,r4
  80f6f4:	2807883a 	mov	r3,r5
  80f6f8:	d809883a 	mov	r4,sp
  80f6fc:	d9400204 	addi	r5,sp,8
  80f700:	d8c00115 	stw	r3,4(sp)
  80f704:	d8800015 	stw	r2,0(sp)
  80f708:	dfc00715 	stw	ra,28(sp)
  80f70c:	08073800 	call	807380 <__unpack_d>
  80f710:	d8c00217 	ldw	r3,8(sp)
  80f714:	00800084 	movi	r2,2
  80f718:	1880051e 	bne	r3,r2,80f730 <__fixdfsi+0x44>
  80f71c:	0007883a 	mov	r3,zero
  80f720:	1805883a 	mov	r2,r3
  80f724:	dfc00717 	ldw	ra,28(sp)
  80f728:	dec00804 	addi	sp,sp,32
  80f72c:	f800283a 	ret
  80f730:	00800044 	movi	r2,1
  80f734:	10fff92e 	bgeu	r2,r3,80f71c <__fixdfsi+0x30>
  80f738:	00800104 	movi	r2,4
  80f73c:	18800426 	beq	r3,r2,80f750 <__fixdfsi+0x64>
  80f740:	d8c00417 	ldw	r3,16(sp)
  80f744:	183ff516 	blt	r3,zero,80f71c <__fixdfsi+0x30>
  80f748:	00800784 	movi	r2,30
  80f74c:	10c0080e 	bge	r2,r3,80f770 <__fixdfsi+0x84>
  80f750:	d8800317 	ldw	r2,12(sp)
  80f754:	1000121e 	bne	r2,zero,80f7a0 <__fixdfsi+0xb4>
  80f758:	00e00034 	movhi	r3,32768
  80f75c:	18ffffc4 	addi	r3,r3,-1
  80f760:	1805883a 	mov	r2,r3
  80f764:	dfc00717 	ldw	ra,28(sp)
  80f768:	dec00804 	addi	sp,sp,32
  80f76c:	f800283a 	ret
  80f770:	00800f04 	movi	r2,60
  80f774:	10d1c83a 	sub	r8,r2,r3
  80f778:	40bff804 	addi	r2,r8,-32
  80f77c:	d9800517 	ldw	r6,20(sp)
  80f780:	d9c00617 	ldw	r7,24(sp)
  80f784:	10000816 	blt	r2,zero,80f7a8 <__fixdfsi+0xbc>
  80f788:	3888d83a 	srl	r4,r7,r2
  80f78c:	d8800317 	ldw	r2,12(sp)
  80f790:	2007883a 	mov	r3,r4
  80f794:	103fe226 	beq	r2,zero,80f720 <__fixdfsi+0x34>
  80f798:	0107c83a 	sub	r3,zero,r4
  80f79c:	003fe006 	br	80f720 <__fixdfsi+0x34>
  80f7a0:	00e00034 	movhi	r3,32768
  80f7a4:	003fde06 	br	80f720 <__fixdfsi+0x34>
  80f7a8:	39c7883a 	add	r3,r7,r7
  80f7ac:	008007c4 	movi	r2,31
  80f7b0:	1205c83a 	sub	r2,r2,r8
  80f7b4:	1886983a 	sll	r3,r3,r2
  80f7b8:	3208d83a 	srl	r4,r6,r8
  80f7bc:	1908b03a 	or	r4,r3,r4
  80f7c0:	003ff206 	br	80f78c <__fixdfsi+0xa0>

0080f7c4 <__floatunsidf>:
  80f7c4:	defff204 	addi	sp,sp,-56
  80f7c8:	dfc00d15 	stw	ra,52(sp)
  80f7cc:	ddc00c15 	stw	r23,48(sp)
  80f7d0:	dd800b15 	stw	r22,44(sp)
  80f7d4:	dd400a15 	stw	r21,40(sp)
  80f7d8:	dd000915 	stw	r20,36(sp)
  80f7dc:	dcc00815 	stw	r19,32(sp)
  80f7e0:	dc800715 	stw	r18,28(sp)
  80f7e4:	dc400615 	stw	r17,24(sp)
  80f7e8:	dc000515 	stw	r16,20(sp)
  80f7ec:	d8000115 	stw	zero,4(sp)
  80f7f0:	20000f1e 	bne	r4,zero,80f830 <__floatunsidf+0x6c>
  80f7f4:	00800084 	movi	r2,2
  80f7f8:	d8800015 	stw	r2,0(sp)
  80f7fc:	d809883a 	mov	r4,sp
  80f800:	080706c0 	call	80706c <__pack_d>
  80f804:	dfc00d17 	ldw	ra,52(sp)
  80f808:	ddc00c17 	ldw	r23,48(sp)
  80f80c:	dd800b17 	ldw	r22,44(sp)
  80f810:	dd400a17 	ldw	r21,40(sp)
  80f814:	dd000917 	ldw	r20,36(sp)
  80f818:	dcc00817 	ldw	r19,32(sp)
  80f81c:	dc800717 	ldw	r18,28(sp)
  80f820:	dc400617 	ldw	r17,24(sp)
  80f824:	dc000517 	ldw	r16,20(sp)
  80f828:	dec00e04 	addi	sp,sp,56
  80f82c:	f800283a 	ret
  80f830:	008000c4 	movi	r2,3
  80f834:	00c00f04 	movi	r3,60
  80f838:	002f883a 	mov	r23,zero
  80f83c:	202d883a 	mov	r22,r4
  80f840:	d8800015 	stw	r2,0(sp)
  80f844:	d8c00215 	stw	r3,8(sp)
  80f848:	d9000315 	stw	r4,12(sp)
  80f84c:	ddc00415 	stw	r23,16(sp)
  80f850:	0806d980 	call	806d98 <__clzsi2>
  80f854:	12400744 	addi	r9,r2,29
  80f858:	48000b16 	blt	r9,zero,80f888 <__floatunsidf+0xc4>
  80f85c:	483fe726 	beq	r9,zero,80f7fc <__floatunsidf+0x38>
  80f860:	10bfff44 	addi	r2,r2,-3
  80f864:	10002e16 	blt	r2,zero,80f920 <__floatunsidf+0x15c>
  80f868:	b0a2983a 	sll	r17,r22,r2
  80f86c:	0021883a 	mov	r16,zero
  80f870:	d8800217 	ldw	r2,8(sp)
  80f874:	dc400415 	stw	r17,16(sp)
  80f878:	dc000315 	stw	r16,12(sp)
  80f87c:	1245c83a 	sub	r2,r2,r9
  80f880:	d8800215 	stw	r2,8(sp)
  80f884:	003fdd06 	br	80f7fc <__floatunsidf+0x38>
  80f888:	0255c83a 	sub	r10,zero,r9
  80f88c:	51bff804 	addi	r6,r10,-32
  80f890:	30001b16 	blt	r6,zero,80f900 <__floatunsidf+0x13c>
  80f894:	b9a8d83a 	srl	r20,r23,r6
  80f898:	002b883a 	mov	r21,zero
  80f89c:	000f883a 	mov	r7,zero
  80f8a0:	01000044 	movi	r4,1
  80f8a4:	0011883a 	mov	r8,zero
  80f8a8:	30002516 	blt	r6,zero,80f940 <__floatunsidf+0x17c>
  80f8ac:	21a6983a 	sll	r19,r4,r6
  80f8b0:	0025883a 	mov	r18,zero
  80f8b4:	00bfffc4 	movi	r2,-1
  80f8b8:	9089883a 	add	r4,r18,r2
  80f8bc:	988b883a 	add	r5,r19,r2
  80f8c0:	248d803a 	cmpltu	r6,r4,r18
  80f8c4:	314b883a 	add	r5,r6,r5
  80f8c8:	b104703a 	and	r2,r22,r4
  80f8cc:	b946703a 	and	r3,r23,r5
  80f8d0:	10c4b03a 	or	r2,r2,r3
  80f8d4:	10000226 	beq	r2,zero,80f8e0 <__floatunsidf+0x11c>
  80f8d8:	01c00044 	movi	r7,1
  80f8dc:	0011883a 	mov	r8,zero
  80f8e0:	d9000217 	ldw	r4,8(sp)
  80f8e4:	a1c4b03a 	or	r2,r20,r7
  80f8e8:	aa06b03a 	or	r3,r21,r8
  80f8ec:	2249c83a 	sub	r4,r4,r9
  80f8f0:	d8c00415 	stw	r3,16(sp)
  80f8f4:	d9000215 	stw	r4,8(sp)
  80f8f8:	d8800315 	stw	r2,12(sp)
  80f8fc:	003fbf06 	br	80f7fc <__floatunsidf+0x38>
  80f900:	bdc7883a 	add	r3,r23,r23
  80f904:	008007c4 	movi	r2,31
  80f908:	1285c83a 	sub	r2,r2,r10
  80f90c:	1886983a 	sll	r3,r3,r2
  80f910:	b2a8d83a 	srl	r20,r22,r10
  80f914:	baaad83a 	srl	r21,r23,r10
  80f918:	1d28b03a 	or	r20,r3,r20
  80f91c:	003fdf06 	br	80f89c <__floatunsidf+0xd8>
  80f920:	b006d07a 	srli	r3,r22,1
  80f924:	008007c4 	movi	r2,31
  80f928:	1245c83a 	sub	r2,r2,r9
  80f92c:	1886d83a 	srl	r3,r3,r2
  80f930:	ba62983a 	sll	r17,r23,r9
  80f934:	b260983a 	sll	r16,r22,r9
  80f938:	1c62b03a 	or	r17,r3,r17
  80f93c:	003fcc06 	br	80f870 <__floatunsidf+0xac>
  80f940:	2006d07a 	srli	r3,r4,1
  80f944:	008007c4 	movi	r2,31
  80f948:	1285c83a 	sub	r2,r2,r10
  80f94c:	18a6d83a 	srl	r19,r3,r2
  80f950:	22a4983a 	sll	r18,r4,r10
  80f954:	003fd706 	br	80f8b4 <__floatunsidf+0xf0>

0080f958 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80f958:	defff804 	addi	sp,sp,-32
  80f95c:	dfc00715 	stw	ra,28(sp)
  80f960:	df000615 	stw	fp,24(sp)
  80f964:	df000604 	addi	fp,sp,24
  80f968:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80f96c:	e0bffc17 	ldw	r2,-16(fp)
  80f970:	1004803a 	cmplt	r2,r2,zero
  80f974:	1000091e 	bne	r2,zero,80f99c <close+0x44>
  80f978:	e13ffc17 	ldw	r4,-16(fp)
  80f97c:	01400304 	movi	r5,12
  80f980:	0806c3c0 	call	806c3c <__mulsi3>
  80f984:	1007883a 	mov	r3,r2
  80f988:	008020b4 	movhi	r2,130
  80f98c:	10b23a04 	addi	r2,r2,-14104
  80f990:	1887883a 	add	r3,r3,r2
  80f994:	e0ffff15 	stw	r3,-4(fp)
  80f998:	00000106 	br	80f9a0 <close+0x48>
  80f99c:	e03fff15 	stw	zero,-4(fp)
  80f9a0:	e0bfff17 	ldw	r2,-4(fp)
  80f9a4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80f9a8:	e0bffb17 	ldw	r2,-20(fp)
  80f9ac:	1005003a 	cmpeq	r2,r2,zero
  80f9b0:	10001d1e 	bne	r2,zero,80fa28 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80f9b4:	e0bffb17 	ldw	r2,-20(fp)
  80f9b8:	10800017 	ldw	r2,0(r2)
  80f9bc:	10800417 	ldw	r2,16(r2)
  80f9c0:	1005003a 	cmpeq	r2,r2,zero
  80f9c4:	1000071e 	bne	r2,zero,80f9e4 <close+0x8c>
  80f9c8:	e0bffb17 	ldw	r2,-20(fp)
  80f9cc:	10800017 	ldw	r2,0(r2)
  80f9d0:	10800417 	ldw	r2,16(r2)
  80f9d4:	e13ffb17 	ldw	r4,-20(fp)
  80f9d8:	103ee83a 	callr	r2
  80f9dc:	e0bffe15 	stw	r2,-8(fp)
  80f9e0:	00000106 	br	80f9e8 <close+0x90>
  80f9e4:	e03ffe15 	stw	zero,-8(fp)
  80f9e8:	e0bffe17 	ldw	r2,-8(fp)
  80f9ec:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80f9f0:	e13ffc17 	ldw	r4,-16(fp)
  80f9f4:	08101cc0 	call	8101cc <alt_release_fd>
    if (rval < 0)
  80f9f8:	e0bffa17 	ldw	r2,-24(fp)
  80f9fc:	1004403a 	cmpge	r2,r2,zero
  80fa00:	1000071e 	bne	r2,zero,80fa20 <close+0xc8>
    {
      ALT_ERRNO = -rval;
  80fa04:	080fa580 	call	80fa58 <alt_get_errno>
  80fa08:	e0fffa17 	ldw	r3,-24(fp)
  80fa0c:	00c7c83a 	sub	r3,zero,r3
  80fa10:	10c00015 	stw	r3,0(r2)
      return -1;
  80fa14:	00bfffc4 	movi	r2,-1
  80fa18:	e0bffd15 	stw	r2,-12(fp)
  80fa1c:	00000806 	br	80fa40 <close+0xe8>
    }
    return 0;
  80fa20:	e03ffd15 	stw	zero,-12(fp)
  80fa24:	00000606 	br	80fa40 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80fa28:	080fa580 	call	80fa58 <alt_get_errno>
  80fa2c:	1007883a 	mov	r3,r2
  80fa30:	00801444 	movi	r2,81
  80fa34:	18800015 	stw	r2,0(r3)
    return -1;
  80fa38:	00bfffc4 	movi	r2,-1
  80fa3c:	e0bffd15 	stw	r2,-12(fp)
  80fa40:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80fa44:	e037883a 	mov	sp,fp
  80fa48:	dfc00117 	ldw	ra,4(sp)
  80fa4c:	df000017 	ldw	fp,0(sp)
  80fa50:	dec00204 	addi	sp,sp,8
  80fa54:	f800283a 	ret

0080fa58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fa58:	defffd04 	addi	sp,sp,-12
  80fa5c:	dfc00215 	stw	ra,8(sp)
  80fa60:	df000115 	stw	fp,4(sp)
  80fa64:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80fa68:	008020b4 	movhi	r2,130
  80fa6c:	10b6e404 	addi	r2,r2,-9328
  80fa70:	10800017 	ldw	r2,0(r2)
  80fa74:	1005003a 	cmpeq	r2,r2,zero
  80fa78:	1000061e 	bne	r2,zero,80fa94 <alt_get_errno+0x3c>
  80fa7c:	008020b4 	movhi	r2,130
  80fa80:	10b6e404 	addi	r2,r2,-9328
  80fa84:	10800017 	ldw	r2,0(r2)
  80fa88:	103ee83a 	callr	r2
  80fa8c:	e0bfff15 	stw	r2,-4(fp)
  80fa90:	00000306 	br	80faa0 <alt_get_errno+0x48>
  80fa94:	008020b4 	movhi	r2,130
  80fa98:	10bdeb04 	addi	r2,r2,-2132
  80fa9c:	e0bfff15 	stw	r2,-4(fp)
  80faa0:	e0bfff17 	ldw	r2,-4(fp)
}
  80faa4:	e037883a 	mov	sp,fp
  80faa8:	dfc00117 	ldw	ra,4(sp)
  80faac:	df000017 	ldw	fp,0(sp)
  80fab0:	dec00204 	addi	sp,sp,8
  80fab4:	f800283a 	ret

0080fab8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80fab8:	defffc04 	addi	sp,sp,-16
  80fabc:	df000315 	stw	fp,12(sp)
  80fac0:	df000304 	addi	fp,sp,12
  80fac4:	e13ffd15 	stw	r4,-12(fp)
  80fac8:	e17ffe15 	stw	r5,-8(fp)
  80facc:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80fad0:	e0bfff17 	ldw	r2,-4(fp)
}
  80fad4:	e037883a 	mov	sp,fp
  80fad8:	df000017 	ldw	fp,0(sp)
  80fadc:	dec00104 	addi	sp,sp,4
  80fae0:	f800283a 	ret

0080fae4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80fae4:	defff904 	addi	sp,sp,-28
  80fae8:	dfc00615 	stw	ra,24(sp)
  80faec:	df000515 	stw	fp,20(sp)
  80faf0:	df000504 	addi	fp,sp,20
  80faf4:	e13ffc15 	stw	r4,-16(fp)
  80faf8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80fafc:	e0bffc17 	ldw	r2,-16(fp)
  80fb00:	1004803a 	cmplt	r2,r2,zero
  80fb04:	1000091e 	bne	r2,zero,80fb2c <fstat+0x48>
  80fb08:	e13ffc17 	ldw	r4,-16(fp)
  80fb0c:	01400304 	movi	r5,12
  80fb10:	0806c3c0 	call	806c3c <__mulsi3>
  80fb14:	1007883a 	mov	r3,r2
  80fb18:	008020b4 	movhi	r2,130
  80fb1c:	10b23a04 	addi	r2,r2,-14104
  80fb20:	1887883a 	add	r3,r3,r2
  80fb24:	e0ffff15 	stw	r3,-4(fp)
  80fb28:	00000106 	br	80fb30 <fstat+0x4c>
  80fb2c:	e03fff15 	stw	zero,-4(fp)
  80fb30:	e0bfff17 	ldw	r2,-4(fp)
  80fb34:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80fb38:	e0bffb17 	ldw	r2,-20(fp)
  80fb3c:	1005003a 	cmpeq	r2,r2,zero
  80fb40:	1000121e 	bne	r2,zero,80fb8c <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80fb44:	e0bffb17 	ldw	r2,-20(fp)
  80fb48:	10800017 	ldw	r2,0(r2)
  80fb4c:	10800817 	ldw	r2,32(r2)
  80fb50:	1005003a 	cmpeq	r2,r2,zero
  80fb54:	1000081e 	bne	r2,zero,80fb78 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  80fb58:	e0bffb17 	ldw	r2,-20(fp)
  80fb5c:	10800017 	ldw	r2,0(r2)
  80fb60:	10800817 	ldw	r2,32(r2)
  80fb64:	e13ffb17 	ldw	r4,-20(fp)
  80fb68:	e17ffd17 	ldw	r5,-12(fp)
  80fb6c:	103ee83a 	callr	r2
  80fb70:	e0bffe15 	stw	r2,-8(fp)
  80fb74:	00000b06 	br	80fba4 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80fb78:	e0fffd17 	ldw	r3,-12(fp)
  80fb7c:	00880004 	movi	r2,8192
  80fb80:	18800115 	stw	r2,4(r3)
      return 0;
  80fb84:	e03ffe15 	stw	zero,-8(fp)
  80fb88:	00000606 	br	80fba4 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80fb8c:	080fbbc0 	call	80fbbc <alt_get_errno>
  80fb90:	1007883a 	mov	r3,r2
  80fb94:	00801444 	movi	r2,81
  80fb98:	18800015 	stw	r2,0(r3)
    return -1;
  80fb9c:	00bfffc4 	movi	r2,-1
  80fba0:	e0bffe15 	stw	r2,-8(fp)
  80fba4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80fba8:	e037883a 	mov	sp,fp
  80fbac:	dfc00117 	ldw	ra,4(sp)
  80fbb0:	df000017 	ldw	fp,0(sp)
  80fbb4:	dec00204 	addi	sp,sp,8
  80fbb8:	f800283a 	ret

0080fbbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fbbc:	defffd04 	addi	sp,sp,-12
  80fbc0:	dfc00215 	stw	ra,8(sp)
  80fbc4:	df000115 	stw	fp,4(sp)
  80fbc8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80fbcc:	008020b4 	movhi	r2,130
  80fbd0:	10b6e404 	addi	r2,r2,-9328
  80fbd4:	10800017 	ldw	r2,0(r2)
  80fbd8:	1005003a 	cmpeq	r2,r2,zero
  80fbdc:	1000061e 	bne	r2,zero,80fbf8 <alt_get_errno+0x3c>
  80fbe0:	008020b4 	movhi	r2,130
  80fbe4:	10b6e404 	addi	r2,r2,-9328
  80fbe8:	10800017 	ldw	r2,0(r2)
  80fbec:	103ee83a 	callr	r2
  80fbf0:	e0bfff15 	stw	r2,-4(fp)
  80fbf4:	00000306 	br	80fc04 <alt_get_errno+0x48>
  80fbf8:	008020b4 	movhi	r2,130
  80fbfc:	10bdeb04 	addi	r2,r2,-2132
  80fc00:	e0bfff15 	stw	r2,-4(fp)
  80fc04:	e0bfff17 	ldw	r2,-4(fp)
}
  80fc08:	e037883a 	mov	sp,fp
  80fc0c:	dfc00117 	ldw	ra,4(sp)
  80fc10:	df000017 	ldw	fp,0(sp)
  80fc14:	dec00204 	addi	sp,sp,8
  80fc18:	f800283a 	ret

0080fc1c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80fc1c:	deffeb04 	addi	sp,sp,-84
  80fc20:	dfc01415 	stw	ra,80(sp)
  80fc24:	df001315 	stw	fp,76(sp)
  80fc28:	df001304 	addi	fp,sp,76
  80fc2c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80fc30:	e0bffd17 	ldw	r2,-12(fp)
  80fc34:	1004803a 	cmplt	r2,r2,zero
  80fc38:	1000091e 	bne	r2,zero,80fc60 <isatty+0x44>
  80fc3c:	e13ffd17 	ldw	r4,-12(fp)
  80fc40:	01400304 	movi	r5,12
  80fc44:	0806c3c0 	call	806c3c <__mulsi3>
  80fc48:	1007883a 	mov	r3,r2
  80fc4c:	008020b4 	movhi	r2,130
  80fc50:	10b23a04 	addi	r2,r2,-14104
  80fc54:	1887883a 	add	r3,r3,r2
  80fc58:	e0ffff15 	stw	r3,-4(fp)
  80fc5c:	00000106 	br	80fc64 <isatty+0x48>
  80fc60:	e03fff15 	stw	zero,-4(fp)
  80fc64:	e0bfff17 	ldw	r2,-4(fp)
  80fc68:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80fc6c:	e0bfed17 	ldw	r2,-76(fp)
  80fc70:	1005003a 	cmpeq	r2,r2,zero
  80fc74:	10000f1e 	bne	r2,zero,80fcb4 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80fc78:	e0bfed17 	ldw	r2,-76(fp)
  80fc7c:	10800017 	ldw	r2,0(r2)
  80fc80:	10800817 	ldw	r2,32(r2)
  80fc84:	1004c03a 	cmpne	r2,r2,zero
  80fc88:	1000031e 	bne	r2,zero,80fc98 <isatty+0x7c>
    {
      return 1;
  80fc8c:	00800044 	movi	r2,1
  80fc90:	e0bffe15 	stw	r2,-8(fp)
  80fc94:	00000c06 	br	80fcc8 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80fc98:	e17fee04 	addi	r5,fp,-72
  80fc9c:	e13ffd17 	ldw	r4,-12(fp)
  80fca0:	080fae40 	call	80fae4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80fca4:	e0bfef17 	ldw	r2,-68(fp)
  80fca8:	10880020 	cmpeqi	r2,r2,8192
  80fcac:	e0bffe15 	stw	r2,-8(fp)
  80fcb0:	00000506 	br	80fcc8 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80fcb4:	080fce00 	call	80fce0 <alt_get_errno>
  80fcb8:	1007883a 	mov	r3,r2
  80fcbc:	00801444 	movi	r2,81
  80fcc0:	18800015 	stw	r2,0(r3)
    return 0;
  80fcc4:	e03ffe15 	stw	zero,-8(fp)
  80fcc8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80fccc:	e037883a 	mov	sp,fp
  80fcd0:	dfc00117 	ldw	ra,4(sp)
  80fcd4:	df000017 	ldw	fp,0(sp)
  80fcd8:	dec00204 	addi	sp,sp,8
  80fcdc:	f800283a 	ret

0080fce0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fce0:	defffd04 	addi	sp,sp,-12
  80fce4:	dfc00215 	stw	ra,8(sp)
  80fce8:	df000115 	stw	fp,4(sp)
  80fcec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80fcf0:	008020b4 	movhi	r2,130
  80fcf4:	10b6e404 	addi	r2,r2,-9328
  80fcf8:	10800017 	ldw	r2,0(r2)
  80fcfc:	1005003a 	cmpeq	r2,r2,zero
  80fd00:	1000061e 	bne	r2,zero,80fd1c <alt_get_errno+0x3c>
  80fd04:	008020b4 	movhi	r2,130
  80fd08:	10b6e404 	addi	r2,r2,-9328
  80fd0c:	10800017 	ldw	r2,0(r2)
  80fd10:	103ee83a 	callr	r2
  80fd14:	e0bfff15 	stw	r2,-4(fp)
  80fd18:	00000306 	br	80fd28 <alt_get_errno+0x48>
  80fd1c:	008020b4 	movhi	r2,130
  80fd20:	10bdeb04 	addi	r2,r2,-2132
  80fd24:	e0bfff15 	stw	r2,-4(fp)
  80fd28:	e0bfff17 	ldw	r2,-4(fp)
}
  80fd2c:	e037883a 	mov	sp,fp
  80fd30:	dfc00117 	ldw	ra,4(sp)
  80fd34:	df000017 	ldw	fp,0(sp)
  80fd38:	dec00204 	addi	sp,sp,8
  80fd3c:	f800283a 	ret

0080fd40 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80fd40:	defffe04 	addi	sp,sp,-8
  80fd44:	dfc00115 	stw	ra,4(sp)
  80fd48:	df000015 	stw	fp,0(sp)
  80fd4c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80fd50:	010020b4 	movhi	r4,130
  80fd54:	21370804 	addi	r4,r4,-9184
  80fd58:	014020b4 	movhi	r5,130
  80fd5c:	29702b04 	addi	r5,r5,-16212
  80fd60:	018020b4 	movhi	r6,130
  80fd64:	31b70804 	addi	r6,r6,-9184
  80fd68:	080fdc00 	call	80fdc0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80fd6c:	01002034 	movhi	r4,128
  80fd70:	21000004 	addi	r4,r4,0
  80fd74:	01404434 	movhi	r5,272
  80fd78:	29500804 	addi	r5,r5,16416
  80fd7c:	01804434 	movhi	r6,272
  80fd80:	31906f04 	addi	r6,r6,16828
  80fd84:	080fdc00 	call	80fdc0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80fd88:	010020b4 	movhi	r4,130
  80fd8c:	212e4e04 	addi	r4,r4,-18120
  80fd90:	014020b4 	movhi	r5,130
  80fd94:	296e4e04 	addi	r5,r5,-18120
  80fd98:	018020b4 	movhi	r6,130
  80fd9c:	31b02b04 	addi	r6,r6,-16212
  80fda0:	080fdc00 	call	80fdc0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80fda4:	081a2a40 	call	81a2a4 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80fda8:	081a5300 	call	81a530 <alt_icache_flush_all>
}
  80fdac:	e037883a 	mov	sp,fp
  80fdb0:	dfc00117 	ldw	ra,4(sp)
  80fdb4:	df000017 	ldw	fp,0(sp)
  80fdb8:	dec00204 	addi	sp,sp,8
  80fdbc:	f800283a 	ret

0080fdc0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80fdc0:	defffc04 	addi	sp,sp,-16
  80fdc4:	df000315 	stw	fp,12(sp)
  80fdc8:	df000304 	addi	fp,sp,12
  80fdcc:	e13ffd15 	stw	r4,-12(fp)
  80fdd0:	e17ffe15 	stw	r5,-8(fp)
  80fdd4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80fdd8:	e0fffe17 	ldw	r3,-8(fp)
  80fddc:	e0bffd17 	ldw	r2,-12(fp)
  80fde0:	18800e26 	beq	r3,r2,80fe1c <alt_load_section+0x5c>
  {
    while( to != end )
  80fde4:	00000a06 	br	80fe10 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80fde8:	e0bffd17 	ldw	r2,-12(fp)
  80fdec:	10c00017 	ldw	r3,0(r2)
  80fdf0:	e0bffe17 	ldw	r2,-8(fp)
  80fdf4:	10c00015 	stw	r3,0(r2)
  80fdf8:	e0bffe17 	ldw	r2,-8(fp)
  80fdfc:	10800104 	addi	r2,r2,4
  80fe00:	e0bffe15 	stw	r2,-8(fp)
  80fe04:	e0bffd17 	ldw	r2,-12(fp)
  80fe08:	10800104 	addi	r2,r2,4
  80fe0c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80fe10:	e0fffe17 	ldw	r3,-8(fp)
  80fe14:	e0bfff17 	ldw	r2,-4(fp)
  80fe18:	18bff31e 	bne	r3,r2,80fde8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80fe1c:	e037883a 	mov	sp,fp
  80fe20:	df000017 	ldw	fp,0(sp)
  80fe24:	dec00104 	addi	sp,sp,4
  80fe28:	f800283a 	ret

0080fe2c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80fe2c:	defff804 	addi	sp,sp,-32
  80fe30:	dfc00715 	stw	ra,28(sp)
  80fe34:	df000615 	stw	fp,24(sp)
  80fe38:	df000604 	addi	fp,sp,24
  80fe3c:	e13ffc15 	stw	r4,-16(fp)
  80fe40:	e17ffd15 	stw	r5,-12(fp)
  80fe44:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80fe48:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80fe4c:	e0bffc17 	ldw	r2,-16(fp)
  80fe50:	1004803a 	cmplt	r2,r2,zero
  80fe54:	1000091e 	bne	r2,zero,80fe7c <lseek+0x50>
  80fe58:	e13ffc17 	ldw	r4,-16(fp)
  80fe5c:	01400304 	movi	r5,12
  80fe60:	0806c3c0 	call	806c3c <__mulsi3>
  80fe64:	1007883a 	mov	r3,r2
  80fe68:	008020b4 	movhi	r2,130
  80fe6c:	10b23a04 	addi	r2,r2,-14104
  80fe70:	1887883a 	add	r3,r3,r2
  80fe74:	e0ffff15 	stw	r3,-4(fp)
  80fe78:	00000106 	br	80fe80 <lseek+0x54>
  80fe7c:	e03fff15 	stw	zero,-4(fp)
  80fe80:	e0bfff17 	ldw	r2,-4(fp)
  80fe84:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80fe88:	e0bffb17 	ldw	r2,-20(fp)
  80fe8c:	1005003a 	cmpeq	r2,r2,zero
  80fe90:	1000111e 	bne	r2,zero,80fed8 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80fe94:	e0bffb17 	ldw	r2,-20(fp)
  80fe98:	10800017 	ldw	r2,0(r2)
  80fe9c:	10800717 	ldw	r2,28(r2)
  80fea0:	1005003a 	cmpeq	r2,r2,zero
  80fea4:	1000091e 	bne	r2,zero,80fecc <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80fea8:	e0bffb17 	ldw	r2,-20(fp)
  80feac:	10800017 	ldw	r2,0(r2)
  80feb0:	10800717 	ldw	r2,28(r2)
  80feb4:	e13ffb17 	ldw	r4,-20(fp)
  80feb8:	e17ffd17 	ldw	r5,-12(fp)
  80febc:	e1bffe17 	ldw	r6,-8(fp)
  80fec0:	103ee83a 	callr	r2
  80fec4:	e0bffa15 	stw	r2,-24(fp)
  80fec8:	00000506 	br	80fee0 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80fecc:	00bfde84 	movi	r2,-134
  80fed0:	e0bffa15 	stw	r2,-24(fp)
  80fed4:	00000206 	br	80fee0 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  80fed8:	00bfebc4 	movi	r2,-81
  80fedc:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80fee0:	e0bffa17 	ldw	r2,-24(fp)
  80fee4:	1004403a 	cmpge	r2,r2,zero
  80fee8:	1000071e 	bne	r2,zero,80ff08 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  80feec:	080ff200 	call	80ff20 <alt_get_errno>
  80fef0:	1007883a 	mov	r3,r2
  80fef4:	e0bffa17 	ldw	r2,-24(fp)
  80fef8:	0085c83a 	sub	r2,zero,r2
  80fefc:	18800015 	stw	r2,0(r3)
    rc = -1;
  80ff00:	00bfffc4 	movi	r2,-1
  80ff04:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80ff08:	e0bffa17 	ldw	r2,-24(fp)
}
  80ff0c:	e037883a 	mov	sp,fp
  80ff10:	dfc00117 	ldw	ra,4(sp)
  80ff14:	df000017 	ldw	fp,0(sp)
  80ff18:	dec00204 	addi	sp,sp,8
  80ff1c:	f800283a 	ret

0080ff20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ff20:	defffd04 	addi	sp,sp,-12
  80ff24:	dfc00215 	stw	ra,8(sp)
  80ff28:	df000115 	stw	fp,4(sp)
  80ff2c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ff30:	008020b4 	movhi	r2,130
  80ff34:	10b6e404 	addi	r2,r2,-9328
  80ff38:	10800017 	ldw	r2,0(r2)
  80ff3c:	1005003a 	cmpeq	r2,r2,zero
  80ff40:	1000061e 	bne	r2,zero,80ff5c <alt_get_errno+0x3c>
  80ff44:	008020b4 	movhi	r2,130
  80ff48:	10b6e404 	addi	r2,r2,-9328
  80ff4c:	10800017 	ldw	r2,0(r2)
  80ff50:	103ee83a 	callr	r2
  80ff54:	e0bfff15 	stw	r2,-4(fp)
  80ff58:	00000306 	br	80ff68 <alt_get_errno+0x48>
  80ff5c:	008020b4 	movhi	r2,130
  80ff60:	10bdeb04 	addi	r2,r2,-2132
  80ff64:	e0bfff15 	stw	r2,-4(fp)
  80ff68:	e0bfff17 	ldw	r2,-4(fp)
}
  80ff6c:	e037883a 	mov	sp,fp
  80ff70:	dfc00117 	ldw	ra,4(sp)
  80ff74:	df000017 	ldw	fp,0(sp)
  80ff78:	dec00204 	addi	sp,sp,8
  80ff7c:	f800283a 	ret

0080ff80 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80ff80:	defffb04 	addi	sp,sp,-20
  80ff84:	dfc00415 	stw	ra,16(sp)
  80ff88:	df000315 	stw	fp,12(sp)
  80ff8c:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80ff90:	0009883a 	mov	r4,zero
  80ff94:	0818b700 	call	818b70 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80ff98:	08111ac0 	call	8111ac <OSInit>
  80ff9c:	01000044 	movi	r4,1
  80ffa0:	08160740 	call	816074 <OSSemCreate>
  80ffa4:	1007883a 	mov	r3,r2
  80ffa8:	008020b4 	movhi	r2,130
  80ffac:	10bdf104 	addi	r2,r2,-2108
  80ffb0:	10c00015 	stw	r3,0(r2)
  80ffb4:	01000044 	movi	r4,1
  80ffb8:	08160740 	call	816074 <OSSemCreate>
  80ffbc:	1007883a 	mov	r3,r2
  80ffc0:	008020b4 	movhi	r2,130
  80ffc4:	10bdf304 	addi	r2,r2,-2100
  80ffc8:	10c00015 	stw	r3,0(r2)
  80ffcc:	008020b4 	movhi	r2,130
  80ffd0:	10bdec04 	addi	r2,r2,-2128
  80ffd4:	e0bffd15 	stw	r2,-12(fp)
  80ffd8:	00800044 	movi	r2,1
  80ffdc:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  80ffe0:	e13ffe0b 	ldhu	r4,-8(fp)
  80ffe4:	08160740 	call	816074 <OSSemCreate>
  80ffe8:	1007883a 	mov	r3,r2
  80ffec:	e0bffd17 	ldw	r2,-12(fp)
  80fff0:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80fff4:	0818ba40 	call	818ba4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80fff8:	010020b4 	movhi	r4,130
  80fffc:	212fc604 	addi	r4,r4,-16616
  810000:	014020b4 	movhi	r5,130
  810004:	296fc604 	addi	r5,r5,-16616
  810008:	018020b4 	movhi	r6,130
  81000c:	31afc604 	addi	r6,r6,-16616
  810010:	081a8f00 	call	81a8f0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  810014:	081a3d40 	call	81a3d4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  810018:	010020b4 	movhi	r4,130
  81001c:	21290e04 	addi	r4,r4,-23496
  810020:	081b5200 	call	81b520 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  810024:	d1271517 	ldw	r4,-25516(gp)
  810028:	d1671617 	ldw	r5,-25512(gp)
  81002c:	d1a71717 	ldw	r6,-25508(gp)
  810030:	0802c780 	call	802c78 <main>
  810034:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  810038:	01000044 	movi	r4,1
  81003c:	080f9580 	call	80f958 <close>
  exit (result);
  810040:	e13fff17 	ldw	r4,-4(fp)
  810044:	081b5340 	call	81b534 <exit>

00810048 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  810048:	defff704 	addi	sp,sp,-36
  81004c:	dfc00815 	stw	ra,32(sp)
  810050:	df000715 	stw	fp,28(sp)
  810054:	df000704 	addi	fp,sp,28
  810058:	e13ffb15 	stw	r4,-20(fp)
  81005c:	e17ffc15 	stw	r5,-16(fp)
  810060:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810064:	e0bffb17 	ldw	r2,-20(fp)
  810068:	1004803a 	cmplt	r2,r2,zero
  81006c:	1000091e 	bne	r2,zero,810094 <read+0x4c>
  810070:	e13ffb17 	ldw	r4,-20(fp)
  810074:	01400304 	movi	r5,12
  810078:	0806c3c0 	call	806c3c <__mulsi3>
  81007c:	1007883a 	mov	r3,r2
  810080:	008020b4 	movhi	r2,130
  810084:	10b23a04 	addi	r2,r2,-14104
  810088:	1887883a 	add	r3,r3,r2
  81008c:	e0ffff15 	stw	r3,-4(fp)
  810090:	00000106 	br	810098 <read+0x50>
  810094:	e03fff15 	stw	zero,-4(fp)
  810098:	e0bfff17 	ldw	r2,-4(fp)
  81009c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  8100a0:	e0bffa17 	ldw	r2,-24(fp)
  8100a4:	1005003a 	cmpeq	r2,r2,zero
  8100a8:	1000241e 	bne	r2,zero,81013c <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8100ac:	e0bffa17 	ldw	r2,-24(fp)
  8100b0:	10800217 	ldw	r2,8(r2)
  8100b4:	108000cc 	andi	r2,r2,3
  8100b8:	10800060 	cmpeqi	r2,r2,1
  8100bc:	10001a1e 	bne	r2,zero,810128 <read+0xe0>
  8100c0:	e0bffa17 	ldw	r2,-24(fp)
  8100c4:	10800017 	ldw	r2,0(r2)
  8100c8:	10800517 	ldw	r2,20(r2)
  8100cc:	1005003a 	cmpeq	r2,r2,zero
  8100d0:	1000151e 	bne	r2,zero,810128 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  8100d4:	e0bffa17 	ldw	r2,-24(fp)
  8100d8:	10800017 	ldw	r2,0(r2)
  8100dc:	10800517 	ldw	r2,20(r2)
  8100e0:	e17ffc17 	ldw	r5,-16(fp)
  8100e4:	e1bffd17 	ldw	r6,-12(fp)
  8100e8:	e13ffa17 	ldw	r4,-24(fp)
  8100ec:	103ee83a 	callr	r2
  8100f0:	e0bff915 	stw	r2,-28(fp)
  8100f4:	e0bff917 	ldw	r2,-28(fp)
  8100f8:	1004403a 	cmpge	r2,r2,zero
  8100fc:	1000071e 	bne	r2,zero,81011c <read+0xd4>
        {
          ALT_ERRNO = -rval;
  810100:	081016c0 	call	81016c <alt_get_errno>
  810104:	e0fff917 	ldw	r3,-28(fp)
  810108:	00c7c83a 	sub	r3,zero,r3
  81010c:	10c00015 	stw	r3,0(r2)
          return -1;
  810110:	00bfffc4 	movi	r2,-1
  810114:	e0bffe15 	stw	r2,-8(fp)
  810118:	00000e06 	br	810154 <read+0x10c>
        }
        return rval;
  81011c:	e0bff917 	ldw	r2,-28(fp)
  810120:	e0bffe15 	stw	r2,-8(fp)
  810124:	00000b06 	br	810154 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  810128:	081016c0 	call	81016c <alt_get_errno>
  81012c:	1007883a 	mov	r3,r2
  810130:	00800344 	movi	r2,13
  810134:	18800015 	stw	r2,0(r3)
  810138:	00000406 	br	81014c <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  81013c:	081016c0 	call	81016c <alt_get_errno>
  810140:	1007883a 	mov	r3,r2
  810144:	00801444 	movi	r2,81
  810148:	18800015 	stw	r2,0(r3)
  }
  return -1;
  81014c:	00bfffc4 	movi	r2,-1
  810150:	e0bffe15 	stw	r2,-8(fp)
  810154:	e0bffe17 	ldw	r2,-8(fp)
}
  810158:	e037883a 	mov	sp,fp
  81015c:	dfc00117 	ldw	ra,4(sp)
  810160:	df000017 	ldw	fp,0(sp)
  810164:	dec00204 	addi	sp,sp,8
  810168:	f800283a 	ret

0081016c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81016c:	defffd04 	addi	sp,sp,-12
  810170:	dfc00215 	stw	ra,8(sp)
  810174:	df000115 	stw	fp,4(sp)
  810178:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81017c:	008020b4 	movhi	r2,130
  810180:	10b6e404 	addi	r2,r2,-9328
  810184:	10800017 	ldw	r2,0(r2)
  810188:	1005003a 	cmpeq	r2,r2,zero
  81018c:	1000061e 	bne	r2,zero,8101a8 <alt_get_errno+0x3c>
  810190:	008020b4 	movhi	r2,130
  810194:	10b6e404 	addi	r2,r2,-9328
  810198:	10800017 	ldw	r2,0(r2)
  81019c:	103ee83a 	callr	r2
  8101a0:	e0bfff15 	stw	r2,-4(fp)
  8101a4:	00000306 	br	8101b4 <alt_get_errno+0x48>
  8101a8:	008020b4 	movhi	r2,130
  8101ac:	10bdeb04 	addi	r2,r2,-2132
  8101b0:	e0bfff15 	stw	r2,-4(fp)
  8101b4:	e0bfff17 	ldw	r2,-4(fp)
}
  8101b8:	e037883a 	mov	sp,fp
  8101bc:	dfc00117 	ldw	ra,4(sp)
  8101c0:	df000017 	ldw	fp,0(sp)
  8101c4:	dec00204 	addi	sp,sp,8
  8101c8:	f800283a 	ret

008101cc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8101cc:	defffc04 	addi	sp,sp,-16
  8101d0:	dfc00315 	stw	ra,12(sp)
  8101d4:	df000215 	stw	fp,8(sp)
  8101d8:	dc000115 	stw	r16,4(sp)
  8101dc:	df000104 	addi	fp,sp,4
  8101e0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8101e4:	e0bfff17 	ldw	r2,-4(fp)
  8101e8:	108000d0 	cmplti	r2,r2,3
  8101ec:	10000f1e 	bne	r2,zero,81022c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  8101f0:	e13fff17 	ldw	r4,-4(fp)
  8101f4:	040020b4 	movhi	r16,130
  8101f8:	84323a04 	addi	r16,r16,-14104
  8101fc:	01400304 	movi	r5,12
  810200:	0806c3c0 	call	806c3c <__mulsi3>
  810204:	1405883a 	add	r2,r2,r16
  810208:	10800204 	addi	r2,r2,8
  81020c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  810210:	e13fff17 	ldw	r4,-4(fp)
  810214:	040020b4 	movhi	r16,130
  810218:	84323a04 	addi	r16,r16,-14104
  81021c:	01400304 	movi	r5,12
  810220:	0806c3c0 	call	806c3c <__mulsi3>
  810224:	1405883a 	add	r2,r2,r16
  810228:	10000015 	stw	zero,0(r2)
  }
}
  81022c:	e037883a 	mov	sp,fp
  810230:	dfc00217 	ldw	ra,8(sp)
  810234:	df000117 	ldw	fp,4(sp)
  810238:	dc000017 	ldw	r16,0(sp)
  81023c:	dec00304 	addi	sp,sp,12
  810240:	f800283a 	ret

00810244 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  810244:	defff804 	addi	sp,sp,-32
  810248:	df000715 	stw	fp,28(sp)
  81024c:	df000704 	addi	fp,sp,28
  810250:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810254:	0005303a 	rdctl	r2,status
  810258:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81025c:	e0fffb17 	ldw	r3,-20(fp)
  810260:	00bfff84 	movi	r2,-2
  810264:	1884703a 	and	r2,r3,r2
  810268:	1001703a 	wrctl	status,r2
  
  return context;
  81026c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  810270:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  810274:	d0a00d17 	ldw	r2,-32716(gp)
  810278:	10c000c4 	addi	r3,r2,3
  81027c:	00bfff04 	movi	r2,-4
  810280:	1884703a 	and	r2,r3,r2
  810284:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  810288:	d0e00d17 	ldw	r3,-32716(gp)
  81028c:	e0bffe17 	ldw	r2,-8(fp)
  810290:	1887883a 	add	r3,r3,r2
  810294:	00804034 	movhi	r2,256
  810298:	10800004 	addi	r2,r2,0
  81029c:	10c0072e 	bgeu	r2,r3,8102bc <sbrk+0x78>
  8102a0:	e0bffd17 	ldw	r2,-12(fp)
  8102a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8102a8:	e0bffa17 	ldw	r2,-24(fp)
  8102ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  8102b0:	00bfffc4 	movi	r2,-1
  8102b4:	e0bfff15 	stw	r2,-4(fp)
  8102b8:	00000c06 	br	8102ec <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  8102bc:	d0a00d17 	ldw	r2,-32716(gp)
  8102c0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  8102c4:	d0e00d17 	ldw	r3,-32716(gp)
  8102c8:	e0bffe17 	ldw	r2,-8(fp)
  8102cc:	1885883a 	add	r2,r3,r2
  8102d0:	d0a00d15 	stw	r2,-32716(gp)
  8102d4:	e0bffd17 	ldw	r2,-12(fp)
  8102d8:	e0bff915 	stw	r2,-28(fp)
  8102dc:	e0bff917 	ldw	r2,-28(fp)
  8102e0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  8102e4:	e0bffc17 	ldw	r2,-16(fp)
  8102e8:	e0bfff15 	stw	r2,-4(fp)
  8102ec:	e0bfff17 	ldw	r2,-4(fp)
} 
  8102f0:	e037883a 	mov	sp,fp
  8102f4:	df000017 	ldw	fp,0(sp)
  8102f8:	dec00104 	addi	sp,sp,4
  8102fc:	f800283a 	ret

00810300 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  810300:	defff904 	addi	sp,sp,-28
  810304:	dfc00615 	stw	ra,24(sp)
  810308:	df000515 	stw	fp,20(sp)
  81030c:	dc000415 	stw	r16,16(sp)
  810310:	df000404 	addi	fp,sp,16
  810314:	e13ffe15 	stw	r4,-8(fp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
  810318:	008020b4 	movhi	r2,130
  81031c:	10bdf444 	addi	r2,r2,-2095
  810320:	10800003 	ldbu	r2,0(r2)
  810324:	10803fcc 	andi	r2,r2,255
  810328:	1004c03a 	cmpne	r2,r2,zero
  81032c:	1000041e 	bne	r2,zero,810340 <usleep+0x40>
  {
    return alt_busy_sleep (us);
  810330:	e13ffe17 	ldw	r4,-8(fp)
  810334:	081a1480 	call	81a148 <alt_busy_sleep>
  810338:	e0bfff15 	stw	r2,-4(fp)
  81033c:	00003106 	br	810404 <usleep+0x104>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  810340:	008020b4 	movhi	r2,130
  810344:	10be0904 	addi	r2,r2,-2012
  810348:	10800017 	ldw	r2,0(r2)

  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
  81034c:	e0bffc15 	stw	r2,-16(fp)
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
  810350:	e13ffe17 	ldw	r4,-8(fp)
  810354:	014003f4 	movhi	r5,15
  810358:	29509004 	addi	r5,r5,16960
  81035c:	0806c2c0 	call	806c2c <__udivsi3>
  810360:	1009883a 	mov	r4,r2
  810364:	e17ffc17 	ldw	r5,-16(fp)
  810368:	0806c3c0 	call	806c3c <__mulsi3>
  81036c:	1021883a 	mov	r16,r2
  810370:	e13ffe17 	ldw	r4,-8(fp)
  810374:	014003f4 	movhi	r5,15
  810378:	29509004 	addi	r5,r5,16960
  81037c:	0806c340 	call	806c34 <__umodsi3>
  810380:	1009883a 	mov	r4,r2
  810384:	e17ffc17 	ldw	r5,-16(fp)
  810388:	0806c3c0 	call	806c3c <__mulsi3>
  81038c:	1009883a 	mov	r4,r2
  810390:	014003f4 	movhi	r5,15
  810394:	29509004 	addi	r5,r5,16960
  810398:	0806c2c0 	call	806c2c <__udivsi3>
  81039c:	8085883a 	add	r2,r16,r2
  8103a0:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
  8103a4:	00000706 	br	8103c4 <usleep+0xc4>
  {
    OSTimeDly(0xffff);
  8103a8:	013fffd4 	movui	r4,65535
  8103ac:	08185bc0 	call	8185bc <OSTimeDly>
    ticks -= 0xffff;
  8103b0:	e0bffd17 	ldw	r2,-12(fp)
  8103b4:	00fffff4 	movhi	r3,65535
  8103b8:	18c00044 	addi	r3,r3,1
  8103bc:	10c5883a 	add	r2,r2,r3
  8103c0:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
  8103c4:	e0fffd17 	ldw	r3,-12(fp)
  8103c8:	00bfffd4 	movui	r2,65535
  8103cc:	10fff636 	bltu	r2,r3,8103a8 <usleep+0xa8>
  {
    OSTimeDly(0xffff);
    ticks -= 0xffff;
  }

  OSTimeDly ((INT16U) (ticks));
  8103d0:	e0bffd17 	ldw	r2,-12(fp)
  8103d4:	113fffcc 	andi	r4,r2,65535
  8103d8:	08185bc0 	call	8185bc <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
  8103dc:	010003f4 	movhi	r4,15
  8103e0:	21109004 	addi	r4,r4,16960
  8103e4:	e17ffc17 	ldw	r5,-16(fp)
  8103e8:	0806c2c0 	call	806c2c <__udivsi3>
  8103ec:	100b883a 	mov	r5,r2
  8103f0:	e13ffe17 	ldw	r4,-8(fp)
  8103f4:	0806c340 	call	806c34 <__umodsi3>
  8103f8:	1009883a 	mov	r4,r2
  8103fc:	081a1480 	call	81a148 <alt_busy_sleep>

  return 0;  
  810400:	e03fff15 	stw	zero,-4(fp)
  810404:	e0bfff17 	ldw	r2,-4(fp)
}
  810408:	e037883a 	mov	sp,fp
  81040c:	dfc00217 	ldw	ra,8(sp)
  810410:	df000117 	ldw	fp,4(sp)
  810414:	dc000017 	ldw	r16,0(sp)
  810418:	dec00304 	addi	sp,sp,12
  81041c:	f800283a 	ret

00810420 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  810420:	defff704 	addi	sp,sp,-36
  810424:	dfc00815 	stw	ra,32(sp)
  810428:	df000715 	stw	fp,28(sp)
  81042c:	df000704 	addi	fp,sp,28
  810430:	e13ffb15 	stw	r4,-20(fp)
  810434:	e17ffc15 	stw	r5,-16(fp)
  810438:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81043c:	e0bffb17 	ldw	r2,-20(fp)
  810440:	1004803a 	cmplt	r2,r2,zero
  810444:	1000091e 	bne	r2,zero,81046c <write+0x4c>
  810448:	e13ffb17 	ldw	r4,-20(fp)
  81044c:	01400304 	movi	r5,12
  810450:	0806c3c0 	call	806c3c <__mulsi3>
  810454:	1007883a 	mov	r3,r2
  810458:	008020b4 	movhi	r2,130
  81045c:	10b23a04 	addi	r2,r2,-14104
  810460:	1887883a 	add	r3,r3,r2
  810464:	e0ffff15 	stw	r3,-4(fp)
  810468:	00000106 	br	810470 <write+0x50>
  81046c:	e03fff15 	stw	zero,-4(fp)
  810470:	e0bfff17 	ldw	r2,-4(fp)
  810474:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  810478:	e0bffa17 	ldw	r2,-24(fp)
  81047c:	1005003a 	cmpeq	r2,r2,zero
  810480:	1000241e 	bne	r2,zero,810514 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  810484:	e0bffa17 	ldw	r2,-24(fp)
  810488:	10800217 	ldw	r2,8(r2)
  81048c:	108000cc 	andi	r2,r2,3
  810490:	1005003a 	cmpeq	r2,r2,zero
  810494:	10001a1e 	bne	r2,zero,810500 <write+0xe0>
  810498:	e0bffa17 	ldw	r2,-24(fp)
  81049c:	10800017 	ldw	r2,0(r2)
  8104a0:	10800617 	ldw	r2,24(r2)
  8104a4:	1005003a 	cmpeq	r2,r2,zero
  8104a8:	1000151e 	bne	r2,zero,810500 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  8104ac:	e0bffa17 	ldw	r2,-24(fp)
  8104b0:	10800017 	ldw	r2,0(r2)
  8104b4:	10800617 	ldw	r2,24(r2)
  8104b8:	e17ffc17 	ldw	r5,-16(fp)
  8104bc:	e1bffd17 	ldw	r6,-12(fp)
  8104c0:	e13ffa17 	ldw	r4,-24(fp)
  8104c4:	103ee83a 	callr	r2
  8104c8:	e0bff915 	stw	r2,-28(fp)
  8104cc:	e0bff917 	ldw	r2,-28(fp)
  8104d0:	1004403a 	cmpge	r2,r2,zero
  8104d4:	1000071e 	bne	r2,zero,8104f4 <write+0xd4>
      {
        ALT_ERRNO = -rval;
  8104d8:	08105440 	call	810544 <alt_get_errno>
  8104dc:	e0fff917 	ldw	r3,-28(fp)
  8104e0:	00c7c83a 	sub	r3,zero,r3
  8104e4:	10c00015 	stw	r3,0(r2)
        return -1;
  8104e8:	00bfffc4 	movi	r2,-1
  8104ec:	e0bffe15 	stw	r2,-8(fp)
  8104f0:	00000e06 	br	81052c <write+0x10c>
      }
      return rval;
  8104f4:	e0bff917 	ldw	r2,-28(fp)
  8104f8:	e0bffe15 	stw	r2,-8(fp)
  8104fc:	00000b06 	br	81052c <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  810500:	08105440 	call	810544 <alt_get_errno>
  810504:	1007883a 	mov	r3,r2
  810508:	00800344 	movi	r2,13
  81050c:	18800015 	stw	r2,0(r3)
  810510:	00000406 	br	810524 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  810514:	08105440 	call	810544 <alt_get_errno>
  810518:	1007883a 	mov	r3,r2
  81051c:	00801444 	movi	r2,81
  810520:	18800015 	stw	r2,0(r3)
  }
  return -1;
  810524:	00bfffc4 	movi	r2,-1
  810528:	e0bffe15 	stw	r2,-8(fp)
  81052c:	e0bffe17 	ldw	r2,-8(fp)
}
  810530:	e037883a 	mov	sp,fp
  810534:	dfc00117 	ldw	ra,4(sp)
  810538:	df000017 	ldw	fp,0(sp)
  81053c:	dec00204 	addi	sp,sp,8
  810540:	f800283a 	ret

00810544 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810544:	defffd04 	addi	sp,sp,-12
  810548:	dfc00215 	stw	ra,8(sp)
  81054c:	df000115 	stw	fp,4(sp)
  810550:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810554:	008020b4 	movhi	r2,130
  810558:	10b6e404 	addi	r2,r2,-9328
  81055c:	10800017 	ldw	r2,0(r2)
  810560:	1005003a 	cmpeq	r2,r2,zero
  810564:	1000061e 	bne	r2,zero,810580 <alt_get_errno+0x3c>
  810568:	008020b4 	movhi	r2,130
  81056c:	10b6e404 	addi	r2,r2,-9328
  810570:	10800017 	ldw	r2,0(r2)
  810574:	103ee83a 	callr	r2
  810578:	e0bfff15 	stw	r2,-4(fp)
  81057c:	00000306 	br	81058c <alt_get_errno+0x48>
  810580:	008020b4 	movhi	r2,130
  810584:	10bdeb04 	addi	r2,r2,-2132
  810588:	e0bfff15 	stw	r2,-4(fp)
  81058c:	e0bfff17 	ldw	r2,-4(fp)
}
  810590:	e037883a 	mov	sp,fp
  810594:	dfc00117 	ldw	ra,4(sp)
  810598:	df000017 	ldw	fp,0(sp)
  81059c:	dec00204 	addi	sp,sp,8
  8105a0:	f800283a 	ret

008105a4 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  8105a4:	deffdf04 	addi	sp,sp,-132
  8105a8:	dfc02015 	stw	ra,128(sp)
  8105ac:	df001f15 	stw	fp,124(sp)
  8105b0:	df001f04 	addi	fp,sp,124
  8105b4:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  8105b8:	e17fe204 	addi	r5,fp,-120
  8105bc:	01003fc4 	movi	r4,255
  8105c0:	08183fc0 	call	8183fc <OSTaskQuery>
  8105c4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  8105c8:	e0bffe83 	ldbu	r2,-6(fp)
  8105cc:	10803fcc 	andi	r2,r2,255
  8105d0:	1004c03a 	cmpne	r2,r2,zero
  8105d4:	1000191e 	bne	r2,zero,81063c <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
  8105d8:	e0bfee83 	ldbu	r2,-70(fp)
  8105dc:	10803fcc 	andi	r2,r2,255
  8105e0:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  8105e4:	d1271917 	ldw	r4,-25500(gp)
  8105e8:	e17ffd04 	addi	r5,fp,-12
  8105ec:	08169480 	call	816948 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  8105f0:	e0bffe43 	ldbu	r2,-7(fp)
  8105f4:	10803fcc 	andi	r2,r2,255
  8105f8:	1005003a 	cmpeq	r2,r2,zero
  8105fc:	1000071e 	bne	r2,zero,81061c <__env_lock+0x78>
  810600:	d0e00e17 	ldw	r3,-32712(gp)
  810604:	e0bfe117 	ldw	r2,-124(fp)
  810608:	10c0041e 	bne	r2,r3,81061c <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
  81060c:	d0a71817 	ldw	r2,-25504(gp)
  810610:	10800044 	addi	r2,r2,1
  810614:	d0a71815 	stw	r2,-25504(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
  810618:	00000806 	br	81063c <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  81061c:	d1271917 	ldw	r4,-25500(gp)
  810620:	e1bffe84 	addi	r6,fp,-6
  810624:	000b883a 	mov	r5,zero
  810628:	08164280 	call	816428 <OSSemPend>
    locks  = 1;
  81062c:	00800044 	movi	r2,1
  810630:	d0a71815 	stw	r2,-25504(gp)
    lockid = id;
  810634:	e0bfe117 	ldw	r2,-124(fp)
  810638:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  81063c:	e037883a 	mov	sp,fp
  810640:	dfc00117 	ldw	ra,4(sp)
  810644:	df000017 	ldw	fp,0(sp)
  810648:	dec00204 	addi	sp,sp,8
  81064c:	f800283a 	ret

00810650 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  810650:	defffd04 	addi	sp,sp,-12
  810654:	dfc00215 	stw	ra,8(sp)
  810658:	df000115 	stw	fp,4(sp)
  81065c:	df000104 	addi	fp,sp,4
  810660:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  810664:	d0a71817 	ldw	r2,-25504(gp)
  810668:	1005003a 	cmpeq	r2,r2,zero
  81066c:	10000a1e 	bne	r2,zero,810698 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  810670:	d0a71817 	ldw	r2,-25504(gp)
  810674:	10bfffc4 	addi	r2,r2,-1
  810678:	d0a71815 	stw	r2,-25504(gp)
  81067c:	d0a71817 	ldw	r2,-25504(gp)
  810680:	1004c03a 	cmpne	r2,r2,zero
  810684:	1000041e 	bne	r2,zero,810698 <__env_unlock+0x48>
  {
    lockid = -1;
  810688:	00bfffc4 	movi	r2,-1
  81068c:	d0a00e15 	stw	r2,-32712(gp)
    OSSemPost( alt_envsem );
  810690:	d1271917 	ldw	r4,-25500(gp)
  810694:	08168200 	call	816820 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  810698:	e037883a 	mov	sp,fp
  81069c:	dfc00117 	ldw	ra,4(sp)
  8106a0:	df000017 	ldw	fp,0(sp)
  8106a4:	dec00204 	addi	sp,sp,8
  8106a8:	f800283a 	ret

008106ac <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  8106ac:	deffdb04 	addi	sp,sp,-148
  8106b0:	dfc02415 	stw	ra,144(sp)
  8106b4:	df002315 	stw	fp,140(sp)
  8106b8:	df002304 	addi	fp,sp,140
  8106bc:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8106c0:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  8106c4:	008020b4 	movhi	r2,130
  8106c8:	10bdf444 	addi	r2,r2,-2095
  8106cc:	10800003 	ldbu	r2,0(r2)
  8106d0:	10803fcc 	andi	r2,r2,255
  8106d4:	10800058 	cmpnei	r2,r2,1
  8106d8:	1000311e 	bne	r2,zero,8107a0 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  8106dc:	e17fe204 	addi	r5,fp,-120
  8106e0:	01003fc4 	movi	r4,255
  8106e4:	08183fc0 	call	8183fc <OSTaskQuery>
  8106e8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  8106ec:	e0bffe83 	ldbu	r2,-6(fp)
  8106f0:	10803fcc 	andi	r2,r2,255
  8106f4:	1004c03a 	cmpne	r2,r2,zero
  8106f8:	1000291e 	bne	r2,zero,8107a0 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
  8106fc:	e0bfee83 	ldbu	r2,-70(fp)
  810700:	10803fcc 	andi	r2,r2,255
  810704:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  810708:	d1271b17 	ldw	r4,-25492(gp)
  81070c:	e17ffd04 	addi	r5,fp,-12
  810710:	08169480 	call	816948 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810714:	0005303a 	rdctl	r2,status
  810718:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81071c:	e0ffdf17 	ldw	r3,-132(fp)
  810720:	00bfff84 	movi	r2,-2
  810724:	1884703a 	and	r2,r3,r2
  810728:	1001703a 	wrctl	status,r2
  
  return context;
  81072c:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
  810730:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
  810734:	e0bffd0b 	ldhu	r2,-12(fp)
  810738:	10bfffcc 	andi	r2,r2,65535
  81073c:	1004c03a 	cmpne	r2,r2,zero
  810740:	10000b1e 	bne	r2,zero,810770 <__malloc_lock+0xc4>
  810744:	d0e00f17 	ldw	r3,-32708(gp)
  810748:	e0bfe117 	ldw	r2,-124(fp)
  81074c:	10c0081e 	bne	r2,r3,810770 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
  810750:	d0a71a17 	ldw	r2,-25496(gp)
  810754:	10800044 	addi	r2,r2,1
  810758:	d0a71a15 	stw	r2,-25496(gp)
  81075c:	e0bfe017 	ldw	r2,-128(fp)
  810760:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810764:	e0bfde17 	ldw	r2,-136(fp)
  810768:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
  81076c:	00000c06 	br	8107a0 <__malloc_lock+0xf4>
  810770:	e0bfe017 	ldw	r2,-128(fp)
  810774:	e0bfdd15 	stw	r2,-140(fp)
  810778:	e0bfdd17 	ldw	r2,-140(fp)
  81077c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  810780:	d1271b17 	ldw	r4,-25492(gp)
  810784:	e1bffe84 	addi	r6,fp,-6
  810788:	000b883a 	mov	r5,zero
  81078c:	08164280 	call	816428 <OSSemPend>
    locks  = 1;
  810790:	00800044 	movi	r2,1
  810794:	d0a71a15 	stw	r2,-25496(gp)
    lockid = id;
  810798:	e0bfe117 	ldw	r2,-124(fp)
  81079c:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  8107a0:	e037883a 	mov	sp,fp
  8107a4:	dfc00117 	ldw	ra,4(sp)
  8107a8:	df000017 	ldw	fp,0(sp)
  8107ac:	dec00204 	addi	sp,sp,8
  8107b0:	f800283a 	ret

008107b4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  8107b4:	defff804 	addi	sp,sp,-32
  8107b8:	dfc00715 	stw	ra,28(sp)
  8107bc:	df000615 	stw	fp,24(sp)
  8107c0:	df000604 	addi	fp,sp,24
  8107c4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8107c8:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
  8107cc:	008020b4 	movhi	r2,130
  8107d0:	10bdf444 	addi	r2,r2,-2095
  8107d4:	10800003 	ldbu	r2,0(r2)
  8107d8:	10803fcc 	andi	r2,r2,255
  8107dc:	10800058 	cmpnei	r2,r2,1
  8107e0:	1000231e 	bne	r2,zero,810870 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8107e4:	0005303a 	rdctl	r2,status
  8107e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8107ec:	e0fffd17 	ldw	r3,-12(fp)
  8107f0:	00bfff84 	movi	r2,-2
  8107f4:	1884703a 	and	r2,r3,r2
  8107f8:	1001703a 	wrctl	status,r2
  
  return context;
  8107fc:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
  810800:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
  810804:	d0a71a17 	ldw	r2,-25496(gp)
  810808:	1004c03a 	cmpne	r2,r2,zero
  81080c:	1000051e 	bne	r2,zero,810824 <__malloc_unlock+0x70>
  810810:	e0bffe17 	ldw	r2,-8(fp)
  810814:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810818:	e0bffc17 	ldw	r2,-16(fp)
  81081c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  810820:	00001306 	br	810870 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  810824:	d0a71a17 	ldw	r2,-25496(gp)
  810828:	10bfffc4 	addi	r2,r2,-1
  81082c:	d0a71a15 	stw	r2,-25496(gp)
  810830:	d0a71a17 	ldw	r2,-25496(gp)
  810834:	1004c03a 	cmpne	r2,r2,zero
  810838:	1000091e 	bne	r2,zero,810860 <__malloc_unlock+0xac>
  {
    lockid = -1;
  81083c:	00bfffc4 	movi	r2,-1
  810840:	d0a00f15 	stw	r2,-32708(gp)
  810844:	e0bffe17 	ldw	r2,-8(fp)
  810848:	e0bffb15 	stw	r2,-20(fp)
  81084c:	e0bffb17 	ldw	r2,-20(fp)
  810850:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  810854:	d1271b17 	ldw	r4,-25492(gp)
  810858:	08168200 	call	816820 <OSSemPost>
  81085c:	00000406 	br	810870 <__malloc_unlock+0xbc>
  810860:	e0bffe17 	ldw	r2,-8(fp)
  810864:	e0bffa15 	stw	r2,-24(fp)
  810868:	e0bffa17 	ldw	r2,-24(fp)
  81086c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  810870:	e037883a 	mov	sp,fp
  810874:	dfc00117 	ldw	ra,4(sp)
  810878:	df000017 	ldw	fp,0(sp)
  81087c:	dec00204 	addi	sp,sp,8
  810880:	f800283a 	ret

00810884 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  810884:	defff604 	addi	sp,sp,-40
  810888:	dfc00915 	stw	ra,36(sp)
  81088c:	df000815 	stw	fp,32(sp)
  810890:	df000804 	addi	fp,sp,32
  810894:	e13ffc15 	stw	r4,-16(fp)
  810898:	e17ffd15 	stw	r5,-12(fp)
  81089c:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8108a0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8108a4:	e0bffe17 	ldw	r2,-8(fp)
  8108a8:	1004c03a 	cmpne	r2,r2,zero
  8108ac:	1000021e 	bne	r2,zero,8108b8 <OSEventNameGet+0x34>
        return (0);
  8108b0:	e03fff15 	stw	zero,-4(fp)
  8108b4:	00003906 	br	81099c <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  8108b8:	e0bffc17 	ldw	r2,-16(fp)
  8108bc:	1004c03a 	cmpne	r2,r2,zero
  8108c0:	1000051e 	bne	r2,zero,8108d8 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  8108c4:	e0fffe17 	ldw	r3,-8(fp)
  8108c8:	00800104 	movi	r2,4
  8108cc:	18800005 	stb	r2,0(r3)
        return (0);
  8108d0:	e03fff15 	stw	zero,-4(fp)
  8108d4:	00003106 	br	81099c <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  8108d8:	e0bffd17 	ldw	r2,-12(fp)
  8108dc:	1004c03a 	cmpne	r2,r2,zero
  8108e0:	1000051e 	bne	r2,zero,8108f8 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  8108e4:	e0fffe17 	ldw	r3,-8(fp)
  8108e8:	00800304 	movi	r2,12
  8108ec:	18800005 	stb	r2,0(r3)
        return (0);
  8108f0:	e03fff15 	stw	zero,-4(fp)
  8108f4:	00002906 	br	81099c <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8108f8:	d0a72a03 	ldbu	r2,-25432(gp)
  8108fc:	10803fcc 	andi	r2,r2,255
  810900:	1005003a 	cmpeq	r2,r2,zero
  810904:	1000051e 	bne	r2,zero,81091c <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
  810908:	e0fffe17 	ldw	r3,-8(fp)
  81090c:	00800444 	movi	r2,17
  810910:	18800005 	stb	r2,0(r3)
        return (0);
  810914:	e03fff15 	stw	zero,-4(fp)
  810918:	00002006 	br	81099c <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
  81091c:	e0bffc17 	ldw	r2,-16(fp)
  810920:	10800003 	ldbu	r2,0(r2)
  810924:	10803fcc 	andi	r2,r2,255
  810928:	10bfffc4 	addi	r2,r2,-1
  81092c:	10800128 	cmpgeui	r2,r2,4
  810930:	1000161e 	bne	r2,zero,81098c <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810934:	0005303a 	rdctl	r2,status
  810938:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81093c:	e0fff917 	ldw	r3,-28(fp)
  810940:	00bfff84 	movi	r2,-2
  810944:	1884703a 	and	r2,r3,r2
  810948:	1001703a 	wrctl	status,r2
  
  return context;
  81094c:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  810950:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  810954:	e0bffc17 	ldw	r2,-16(fp)
  810958:	11400384 	addi	r5,r2,14
  81095c:	e13ffd17 	ldw	r4,-12(fp)
  810960:	08124080 	call	812408 <OS_StrCopy>
  810964:	e0bffb05 	stb	r2,-20(fp)
  810968:	e0bffa17 	ldw	r2,-24(fp)
  81096c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810970:	e0bff817 	ldw	r2,-32(fp)
  810974:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  810978:	e0bffe17 	ldw	r2,-8(fp)
  81097c:	10000005 	stb	zero,0(r2)
    return (len);
  810980:	e0bffb03 	ldbu	r2,-20(fp)
  810984:	e0bfff15 	stw	r2,-4(fp)
  810988:	00000406 	br	81099c <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  81098c:	e0fffe17 	ldw	r3,-8(fp)
  810990:	00800044 	movi	r2,1
  810994:	18800005 	stb	r2,0(r3)
             return (0);
  810998:	e03fff15 	stw	zero,-4(fp)
  81099c:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
  8109a0:	e037883a 	mov	sp,fp
  8109a4:	dfc00117 	ldw	ra,4(sp)
  8109a8:	df000017 	ldw	fp,0(sp)
  8109ac:	dec00204 	addi	sp,sp,8
  8109b0:	f800283a 	ret

008109b4 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  8109b4:	defff604 	addi	sp,sp,-40
  8109b8:	dfc00915 	stw	ra,36(sp)
  8109bc:	df000815 	stw	fp,32(sp)
  8109c0:	df000804 	addi	fp,sp,32
  8109c4:	e13ffd15 	stw	r4,-12(fp)
  8109c8:	e17ffe15 	stw	r5,-8(fp)
  8109cc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8109d0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8109d4:	e0bfff17 	ldw	r2,-4(fp)
  8109d8:	1005003a 	cmpeq	r2,r2,zero
  8109dc:	1000411e 	bne	r2,zero,810ae4 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  8109e0:	e0bffd17 	ldw	r2,-12(fp)
  8109e4:	1004c03a 	cmpne	r2,r2,zero
  8109e8:	1000041e 	bne	r2,zero,8109fc <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  8109ec:	e0ffff17 	ldw	r3,-4(fp)
  8109f0:	00800104 	movi	r2,4
  8109f4:	18800005 	stb	r2,0(r3)
        return;
  8109f8:	00003a06 	br	810ae4 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  8109fc:	e0bffe17 	ldw	r2,-8(fp)
  810a00:	1004c03a 	cmpne	r2,r2,zero
  810a04:	1000041e 	bne	r2,zero,810a18 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  810a08:	e0ffff17 	ldw	r3,-4(fp)
  810a0c:	00800304 	movi	r2,12
  810a10:	18800005 	stb	r2,0(r3)
        return;
  810a14:	00003306 	br	810ae4 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  810a18:	d0a72a03 	ldbu	r2,-25432(gp)
  810a1c:	10803fcc 	andi	r2,r2,255
  810a20:	1005003a 	cmpeq	r2,r2,zero
  810a24:	1000041e 	bne	r2,zero,810a38 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
  810a28:	e0ffff17 	ldw	r3,-4(fp)
  810a2c:	00800484 	movi	r2,18
  810a30:	18800005 	stb	r2,0(r3)
        return;
  810a34:	00002b06 	br	810ae4 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
  810a38:	e0bffd17 	ldw	r2,-12(fp)
  810a3c:	10800003 	ldbu	r2,0(r2)
  810a40:	10803fcc 	andi	r2,r2,255
  810a44:	10bfffc4 	addi	r2,r2,-1
  810a48:	10800128 	cmpgeui	r2,r2,4
  810a4c:	10000f1e 	bne	r2,zero,810a8c <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810a50:	0005303a 	rdctl	r2,status
  810a54:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810a58:	e0fffa17 	ldw	r3,-24(fp)
  810a5c:	00bfff84 	movi	r2,-2
  810a60:	1884703a 	and	r2,r3,r2
  810a64:	1001703a 	wrctl	status,r2
  
  return context;
  810a68:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  810a6c:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  810a70:	e13ffe17 	ldw	r4,-8(fp)
  810a74:	08124880 	call	812488 <OS_StrLen>
  810a78:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  810a7c:	e0bffc03 	ldbu	r2,-16(fp)
  810a80:	10800828 	cmpgeui	r2,r2,32
  810a84:	1000051e 	bne	r2,zero,810a9c <OSEventNameSet+0xe8>
  810a88:	00000c06 	br	810abc <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  810a8c:	e0ffff17 	ldw	r3,-4(fp)
  810a90:	00800044 	movi	r2,1
  810a94:	18800005 	stb	r2,0(r3)
             return;
  810a98:	00001206 	br	810ae4 <OSEventNameSet+0x130>
  810a9c:	e0bffb17 	ldw	r2,-20(fp)
  810aa0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810aa4:	e0bff917 	ldw	r2,-28(fp)
  810aa8:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  810aac:	e0ffff17 	ldw	r3,-4(fp)
  810ab0:	008002c4 	movi	r2,11
  810ab4:	18800005 	stb	r2,0(r3)
        return;
  810ab8:	00000a06 	br	810ae4 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  810abc:	e0bffd17 	ldw	r2,-12(fp)
  810ac0:	11000384 	addi	r4,r2,14
  810ac4:	e17ffe17 	ldw	r5,-8(fp)
  810ac8:	08124080 	call	812408 <OS_StrCopy>
  810acc:	e0bffb17 	ldw	r2,-20(fp)
  810ad0:	e0bff815 	stw	r2,-32(fp)
  810ad4:	e0bff817 	ldw	r2,-32(fp)
  810ad8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  810adc:	e0bfff17 	ldw	r2,-4(fp)
  810ae0:	10000005 	stb	zero,0(r2)
}
  810ae4:	e037883a 	mov	sp,fp
  810ae8:	dfc00117 	ldw	ra,4(sp)
  810aec:	df000017 	ldw	fp,0(sp)
  810af0:	dec00204 	addi	sp,sp,8
  810af4:	f800283a 	ret

00810af8 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  810af8:	deffe704 	addi	sp,sp,-100
  810afc:	dfc01815 	stw	ra,96(sp)
  810b00:	df001715 	stw	fp,92(sp)
  810b04:	df001704 	addi	fp,sp,92
  810b08:	e13ff615 	stw	r4,-40(fp)
  810b0c:	e17ff715 	stw	r5,-36(fp)
  810b10:	e1bff815 	stw	r6,-32(fp)
  810b14:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  810b18:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  810b1c:	e0800217 	ldw	r2,8(fp)
  810b20:	1004c03a 	cmpne	r2,r2,zero
  810b24:	1000021e 	bne	r2,zero,810b30 <OSEventPendMulti+0x38>
        return (0);
  810b28:	e03fff15 	stw	zero,-4(fp)
  810b2c:	00019906 	br	811194 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  810b30:	e0bff617 	ldw	r2,-40(fp)
  810b34:	1004c03a 	cmpne	r2,r2,zero
  810b38:	1000051e 	bne	r2,zero,810b50 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
  810b3c:	e0c00217 	ldw	r3,8(fp)
  810b40:	00800104 	movi	r2,4
  810b44:	18800005 	stb	r2,0(r3)
        return (0);
  810b48:	e03fff15 	stw	zero,-4(fp)
  810b4c:	00019106 	br	811194 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  810b50:	e0bff717 	ldw	r2,-36(fp)
  810b54:	1004c03a 	cmpne	r2,r2,zero
  810b58:	1000051e 	bne	r2,zero,810b70 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
  810b5c:	e0c00217 	ldw	r3,8(fp)
  810b60:	00800104 	movi	r2,4
  810b64:	18800005 	stb	r2,0(r3)
        return (0);
  810b68:	e03fff15 	stw	zero,-4(fp)
  810b6c:	00018906 	br	811194 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  810b70:	e0bff817 	ldw	r2,-32(fp)
  810b74:	1004c03a 	cmpne	r2,r2,zero
  810b78:	1000051e 	bne	r2,zero,810b90 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
  810b7c:	e0c00217 	ldw	r3,8(fp)
  810b80:	00800104 	movi	r2,4
  810b84:	18800005 	stb	r2,0(r3)
        return (0);
  810b88:	e03fff15 	stw	zero,-4(fp)
  810b8c:	00018106 	br	811194 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  810b90:	e0bff717 	ldw	r2,-36(fp)
  810b94:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  810b98:	e0bff617 	ldw	r2,-40(fp)
  810b9c:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
  810ba0:	e0bff517 	ldw	r2,-44(fp)
  810ba4:	10800017 	ldw	r2,0(r2)
  810ba8:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
  810bac:	00001806 	br	810c10 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  810bb0:	e0bff417 	ldw	r2,-48(fp)
  810bb4:	10800003 	ldbu	r2,0(r2)
  810bb8:	10803fcc 	andi	r2,r2,255
  810bbc:	e0bffe15 	stw	r2,-8(fp)
  810bc0:	e0fffe17 	ldw	r3,-8(fp)
  810bc4:	188000a0 	cmpeqi	r2,r3,2
  810bc8:	10000b1e 	bne	r2,zero,810bf8 <OSEventPendMulti+0x100>
  810bcc:	e0fffe17 	ldw	r3,-8(fp)
  810bd0:	188000e0 	cmpeqi	r2,r3,3
  810bd4:	1000081e 	bne	r2,zero,810bf8 <OSEventPendMulti+0x100>
  810bd8:	e0fffe17 	ldw	r3,-8(fp)
  810bdc:	18800060 	cmpeqi	r2,r3,1
  810be0:	1000051e 	bne	r2,zero,810bf8 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  810be4:	e0c00217 	ldw	r3,8(fp)
  810be8:	00800044 	movi	r2,1
  810bec:	18800005 	stb	r2,0(r3)
                 return (0);
  810bf0:	e03fff15 	stw	zero,-4(fp)
  810bf4:	00016706 	br	811194 <OSEventPendMulti+0x69c>
        }
        pevents++;
  810bf8:	e0bff517 	ldw	r2,-44(fp)
  810bfc:	10800104 	addi	r2,r2,4
  810c00:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  810c04:	e0bff517 	ldw	r2,-44(fp)
  810c08:	10800017 	ldw	r2,0(r2)
  810c0c:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  810c10:	e0bff417 	ldw	r2,-48(fp)
  810c14:	1004c03a 	cmpne	r2,r2,zero
  810c18:	103fe51e 	bne	r2,zero,810bb0 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  810c1c:	d0a72a03 	ldbu	r2,-25432(gp)
  810c20:	10803fcc 	andi	r2,r2,255
  810c24:	1005003a 	cmpeq	r2,r2,zero
  810c28:	1000051e 	bne	r2,zero,810c40 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  810c2c:	e0c00217 	ldw	r3,8(fp)
  810c30:	00800084 	movi	r2,2
  810c34:	18800005 	stb	r2,0(r3)
        return (0);
  810c38:	e03fff15 	stw	zero,-4(fp)
  810c3c:	00015506 	br	811194 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  810c40:	d0a71c03 	ldbu	r2,-25488(gp)
  810c44:	10803fcc 	andi	r2,r2,255
  810c48:	1005003a 	cmpeq	r2,r2,zero
  810c4c:	1000051e 	bne	r2,zero,810c64 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  810c50:	e0c00217 	ldw	r3,8(fp)
  810c54:	00800344 	movi	r2,13
  810c58:	18800005 	stb	r2,0(r3)
        return (0);
  810c5c:	e03fff15 	stw	zero,-4(fp)
  810c60:	00014c06 	br	811194 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810c64:	0005303a 	rdctl	r2,status
  810c68:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810c6c:	e0ffef17 	ldw	r3,-68(fp)
  810c70:	00bfff84 	movi	r2,-2
  810c74:	1884703a 	and	r2,r3,r2
  810c78:	1001703a 	wrctl	status,r2
  
  return context;
  810c7c:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  810c80:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
  810c84:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
  810c88:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  810c8c:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
  810c90:	e0bff617 	ldw	r2,-40(fp)
  810c94:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
  810c98:	e0bff517 	ldw	r2,-44(fp)
  810c9c:	10800017 	ldw	r2,0(r2)
  810ca0:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  810ca4:	00008f06 	br	810ee4 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
  810ca8:	e0bff417 	ldw	r2,-48(fp)
  810cac:	10800003 	ldbu	r2,0(r2)
  810cb0:	10803fcc 	andi	r2,r2,255
  810cb4:	e0bffd15 	stw	r2,-12(fp)
  810cb8:	e0fffd17 	ldw	r3,-12(fp)
  810cbc:	188000a0 	cmpeqi	r2,r3,2
  810cc0:	1000441e 	bne	r2,zero,810dd4 <OSEventPendMulti+0x2dc>
  810cc4:	e0fffd17 	ldw	r3,-12(fp)
  810cc8:	188000e0 	cmpeqi	r2,r3,3
  810ccc:	1000041e 	bne	r2,zero,810ce0 <OSEventPendMulti+0x1e8>
  810cd0:	e0fffd17 	ldw	r3,-12(fp)
  810cd4:	18800060 	cmpeqi	r2,r3,1
  810cd8:	1000211e 	bne	r2,zero,810d60 <OSEventPendMulti+0x268>
  810cdc:	00006f06 	br	810e9c <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  810ce0:	e0bff417 	ldw	r2,-48(fp)
  810ce4:	1080020b 	ldhu	r2,8(r2)
  810ce8:	10bfffcc 	andi	r2,r2,65535
  810cec:	1005003a 	cmpeq	r2,r2,zero
  810cf0:	1000171e 	bne	r2,zero,810d50 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  810cf4:	e0bff417 	ldw	r2,-48(fp)
  810cf8:	1080020b 	ldhu	r2,8(r2)
  810cfc:	10bfffc4 	addi	r2,r2,-1
  810d00:	1007883a 	mov	r3,r2
  810d04:	e0bff417 	ldw	r2,-48(fp)
  810d08:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  810d0c:	e0fff717 	ldw	r3,-36(fp)
  810d10:	e0bff417 	ldw	r2,-48(fp)
  810d14:	18800015 	stw	r2,0(r3)
  810d18:	e0bff717 	ldw	r2,-36(fp)
  810d1c:	10800104 	addi	r2,r2,4
  810d20:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
  810d24:	00800044 	movi	r2,1
  810d28:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  810d2c:	e0bff817 	ldw	r2,-32(fp)
  810d30:	10000015 	stw	zero,0(r2)
  810d34:	e0bff817 	ldw	r2,-32(fp)
  810d38:	10800104 	addi	r2,r2,4
  810d3c:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
  810d40:	e0bff18b 	ldhu	r2,-58(fp)
  810d44:	10800044 	addi	r2,r2,1
  810d48:	e0bff18d 	sth	r2,-58(fp)
  810d4c:	00005f06 	br	810ecc <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  810d50:	e0bff103 	ldbu	r2,-60(fp)
  810d54:	10800054 	ori	r2,r2,1
  810d58:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  810d5c:	00005b06 	br	810ecc <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  810d60:	e0bff417 	ldw	r2,-48(fp)
  810d64:	10800117 	ldw	r2,4(r2)
  810d68:	1005003a 	cmpeq	r2,r2,zero
  810d6c:	1000151e 	bne	r2,zero,810dc4 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  810d70:	e0bff417 	ldw	r2,-48(fp)
  810d74:	10c00117 	ldw	r3,4(r2)
  810d78:	e0bff817 	ldw	r2,-32(fp)
  810d7c:	10c00015 	stw	r3,0(r2)
  810d80:	e0bff817 	ldw	r2,-32(fp)
  810d84:	10800104 	addi	r2,r2,4
  810d88:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
  810d8c:	e0bff417 	ldw	r2,-48(fp)
  810d90:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  810d94:	e0fff717 	ldw	r3,-36(fp)
  810d98:	e0bff417 	ldw	r2,-48(fp)
  810d9c:	18800015 	stw	r2,0(r3)
  810da0:	e0bff717 	ldw	r2,-36(fp)
  810da4:	10800104 	addi	r2,r2,4
  810da8:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
  810dac:	00800044 	movi	r2,1
  810db0:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  810db4:	e0bff18b 	ldhu	r2,-58(fp)
  810db8:	10800044 	addi	r2,r2,1
  810dbc:	e0bff18d 	sth	r2,-58(fp)
  810dc0:	00004206 	br	810ecc <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  810dc4:	e0bff103 	ldbu	r2,-60(fp)
  810dc8:	10800094 	ori	r2,r2,2
  810dcc:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  810dd0:	00003e06 	br	810ecc <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  810dd4:	e0bff417 	ldw	r2,-48(fp)
  810dd8:	10800117 	ldw	r2,4(r2)
  810ddc:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  810de0:	e0bff317 	ldw	r2,-52(fp)
  810de4:	1080058b 	ldhu	r2,22(r2)
  810de8:	10bfffcc 	andi	r2,r2,65535
  810dec:	1005003a 	cmpeq	r2,r2,zero
  810df0:	1000261e 	bne	r2,zero,810e8c <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  810df4:	e0bff317 	ldw	r2,-52(fp)
  810df8:	11000417 	ldw	r4,16(r2)
  810dfc:	20c00017 	ldw	r3,0(r4)
  810e00:	e0bff817 	ldw	r2,-32(fp)
  810e04:	10c00015 	stw	r3,0(r2)
  810e08:	e0bff817 	ldw	r2,-32(fp)
  810e0c:	10800104 	addi	r2,r2,4
  810e10:	e0bff815 	stw	r2,-32(fp)
  810e14:	20c00104 	addi	r3,r4,4
  810e18:	e0bff317 	ldw	r2,-52(fp)
  810e1c:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  810e20:	e0bff317 	ldw	r2,-52(fp)
  810e24:	10c00417 	ldw	r3,16(r2)
  810e28:	e0bff317 	ldw	r2,-52(fp)
  810e2c:	10800217 	ldw	r2,8(r2)
  810e30:	1880041e 	bne	r3,r2,810e44 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  810e34:	e0bff317 	ldw	r2,-52(fp)
  810e38:	10c00117 	ldw	r3,4(r2)
  810e3c:	e0bff317 	ldw	r2,-52(fp)
  810e40:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  810e44:	e0bff317 	ldw	r2,-52(fp)
  810e48:	1080058b 	ldhu	r2,22(r2)
  810e4c:	10bfffc4 	addi	r2,r2,-1
  810e50:	1007883a 	mov	r3,r2
  810e54:	e0bff317 	ldw	r2,-52(fp)
  810e58:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  810e5c:	e0fff717 	ldw	r3,-36(fp)
  810e60:	e0bff417 	ldw	r2,-48(fp)
  810e64:	18800015 	stw	r2,0(r3)
  810e68:	e0bff717 	ldw	r2,-36(fp)
  810e6c:	10800104 	addi	r2,r2,4
  810e70:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
  810e74:	00800044 	movi	r2,1
  810e78:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  810e7c:	e0bff18b 	ldhu	r2,-58(fp)
  810e80:	10800044 	addi	r2,r2,1
  810e84:	e0bff18d 	sth	r2,-58(fp)
  810e88:	00001006 	br	810ecc <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  810e8c:	e0bff103 	ldbu	r2,-60(fp)
  810e90:	10800114 	ori	r2,r2,4
  810e94:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  810e98:	00000c06 	br	810ecc <OSEventPendMulti+0x3d4>
  810e9c:	e0bff017 	ldw	r2,-64(fp)
  810ea0:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810ea4:	e0bfee17 	ldw	r2,-72(fp)
  810ea8:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  810eac:	e0bff717 	ldw	r2,-36(fp)
  810eb0:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  810eb4:	e0c00217 	ldw	r3,8(fp)
  810eb8:	00800044 	movi	r2,1
  810ebc:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
  810ec0:	e0bff18b 	ldhu	r2,-58(fp)
  810ec4:	e0bfff15 	stw	r2,-4(fp)
  810ec8:	0000b206 	br	811194 <OSEventPendMulti+0x69c>
        }
        pevents++;
  810ecc:	e0bff517 	ldw	r2,-44(fp)
  810ed0:	10800104 	addi	r2,r2,4
  810ed4:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  810ed8:	e0bff517 	ldw	r2,-44(fp)
  810edc:	10800017 	ldw	r2,0(r2)
  810ee0:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  810ee4:	e0bff417 	ldw	r2,-48(fp)
  810ee8:	1004c03a 	cmpne	r2,r2,zero
  810eec:	103f6e1e 	bne	r2,zero,810ca8 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  810ef0:	e0bff203 	ldbu	r2,-56(fp)
  810ef4:	10800058 	cmpnei	r2,r2,1
  810ef8:	10000b1e 	bne	r2,zero,810f28 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  810efc:	e0bff717 	ldw	r2,-36(fp)
  810f00:	10000015 	stw	zero,0(r2)
  810f04:	e0bff017 	ldw	r2,-64(fp)
  810f08:	e0bfed15 	stw	r2,-76(fp)
  810f0c:	e0bfed17 	ldw	r2,-76(fp)
  810f10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  810f14:	e0800217 	ldw	r2,8(fp)
  810f18:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  810f1c:	e0fff18b 	ldhu	r3,-58(fp)
  810f20:	e0ffff15 	stw	r3,-4(fp)
  810f24:	00009b06 	br	811194 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  810f28:	d1272b17 	ldw	r4,-25428(gp)
  810f2c:	d0a72b17 	ldw	r2,-25428(gp)
  810f30:	10c00c03 	ldbu	r3,48(r2)
  810f34:	e0bff103 	ldbu	r2,-60(fp)
  810f38:	1884b03a 	or	r2,r3,r2
  810f3c:	1007883a 	mov	r3,r2
  810f40:	00bfe004 	movi	r2,-128
  810f44:	1884b03a 	or	r2,r3,r2
  810f48:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  810f4c:	d0a72b17 	ldw	r2,-25428(gp)
  810f50:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  810f54:	d0e72b17 	ldw	r3,-25428(gp)
  810f58:	e0bff90b 	ldhu	r2,-28(fp)
  810f5c:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  810f60:	e13ff617 	ldw	r4,-40(fp)
  810f64:	0811b280 	call	811b28 <OS_EventTaskWaitMulti>
  810f68:	e0bff017 	ldw	r2,-64(fp)
  810f6c:	e0bfec15 	stw	r2,-80(fp)
  810f70:	e0bfec17 	ldw	r2,-80(fp)
  810f74:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  810f78:	08122c40 	call	8122c4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810f7c:	0005303a 	rdctl	r2,status
  810f80:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810f84:	e0ffeb17 	ldw	r3,-84(fp)
  810f88:	00bfff84 	movi	r2,-2
  810f8c:	1884703a 	and	r2,r3,r2
  810f90:	1001703a 	wrctl	status,r2
  
  return context;
  810f94:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
  810f98:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  810f9c:	d0a72b17 	ldw	r2,-25428(gp)
  810fa0:	10800c43 	ldbu	r2,49(r2)
  810fa4:	10803fcc 	andi	r2,r2,255
  810fa8:	e0bffc15 	stw	r2,-16(fp)
  810fac:	e0fffc17 	ldw	r3,-16(fp)
  810fb0:	1805003a 	cmpeq	r2,r3,zero
  810fb4:	1000041e 	bne	r2,zero,810fc8 <OSEventPendMulti+0x4d0>
  810fb8:	e0fffc17 	ldw	r3,-16(fp)
  810fbc:	188000a0 	cmpeqi	r2,r3,2
  810fc0:	1000011e 	bne	r2,zero,810fc8 <OSEventPendMulti+0x4d0>
  810fc4:	00001906 	br	81102c <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  810fc8:	d0a72b17 	ldw	r2,-25428(gp)
  810fcc:	10800717 	ldw	r2,28(r2)
  810fd0:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  810fd4:	e0bff417 	ldw	r2,-48(fp)
  810fd8:	1005003a 	cmpeq	r2,r2,zero
  810fdc:	10000c1e 	bne	r2,zero,811010 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  810fe0:	e0fff717 	ldw	r3,-36(fp)
  810fe4:	e0bff417 	ldw	r2,-48(fp)
  810fe8:	18800015 	stw	r2,0(r3)
  810fec:	e0bff717 	ldw	r2,-36(fp)
  810ff0:	10800104 	addi	r2,r2,4
  810ff4:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  810ff8:	e0bff717 	ldw	r2,-36(fp)
  810ffc:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  811000:	e0bff18b 	ldhu	r2,-58(fp)
  811004:	10800044 	addi	r2,r2,1
  811008:	e0bff18d 	sth	r2,-58(fp)
  81100c:	00000a06 	br	811038 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  811010:	d0a72b17 	ldw	r2,-25428(gp)
  811014:	00c00044 	movi	r3,1
  811018:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  81101c:	d1272b17 	ldw	r4,-25428(gp)
  811020:	e17ff617 	ldw	r5,-40(fp)
  811024:	0811d340 	call	811d34 <OS_EventTaskRemoveMulti>
             }
			 break;
  811028:	00000306 	br	811038 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  81102c:	d1272b17 	ldw	r4,-25428(gp)
  811030:	e17ff617 	ldw	r5,-40(fp)
  811034:	0811d340 	call	811d34 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
  811038:	d0a72b17 	ldw	r2,-25428(gp)
  81103c:	10800c43 	ldbu	r2,49(r2)
  811040:	10803fcc 	andi	r2,r2,255
  811044:	e0bffb15 	stw	r2,-20(fp)
  811048:	e0fffb17 	ldw	r3,-20(fp)
  81104c:	1805003a 	cmpeq	r2,r3,zero
  811050:	1000041e 	bne	r2,zero,811064 <OSEventPendMulti+0x56c>
  811054:	e0fffb17 	ldw	r3,-20(fp)
  811058:	188000a0 	cmpeqi	r2,r3,2
  81105c:	10002c1e 	bne	r2,zero,811110 <OSEventPendMulti+0x618>
  811060:	00003406 	br	811134 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  811064:	e0bff417 	ldw	r2,-48(fp)
  811068:	10800003 	ldbu	r2,0(r2)
  81106c:	10803fcc 	andi	r2,r2,255
  811070:	e0bffa15 	stw	r2,-24(fp)
  811074:	e0fffa17 	ldw	r3,-24(fp)
  811078:	18800050 	cmplti	r2,r3,1
  81107c:	1000151e 	bne	r2,zero,8110d4 <OSEventPendMulti+0x5dc>
  811080:	e0fffa17 	ldw	r3,-24(fp)
  811084:	188000d0 	cmplti	r2,r3,3
  811088:	10000a1e 	bne	r2,zero,8110b4 <OSEventPendMulti+0x5bc>
  81108c:	e0fffa17 	ldw	r3,-24(fp)
  811090:	188000e0 	cmpeqi	r2,r3,3
  811094:	1000011e 	bne	r2,zero,81109c <OSEventPendMulti+0x5a4>
  811098:	00000e06 	br	8110d4 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  81109c:	e0bff817 	ldw	r2,-32(fp)
  8110a0:	10000015 	stw	zero,0(r2)
  8110a4:	e0bff817 	ldw	r2,-32(fp)
  8110a8:	10800104 	addi	r2,r2,4
  8110ac:	e0bff815 	stw	r2,-32(fp)
                      break;
  8110b0:	00001406 	br	811104 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  8110b4:	d0a72b17 	ldw	r2,-25428(gp)
  8110b8:	10c00917 	ldw	r3,36(r2)
  8110bc:	e0bff817 	ldw	r2,-32(fp)
  8110c0:	10c00015 	stw	r3,0(r2)
  8110c4:	e0bff817 	ldw	r2,-32(fp)
  8110c8:	10800104 	addi	r2,r2,4
  8110cc:	e0bff815 	stw	r2,-32(fp)
                      break;
  8110d0:	00000c06 	br	811104 <OSEventPendMulti+0x60c>
  8110d4:	e0bff017 	ldw	r2,-64(fp)
  8110d8:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8110dc:	e0bfea17 	ldw	r2,-88(fp)
  8110e0:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  8110e4:	e0bff717 	ldw	r2,-36(fp)
  8110e8:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  8110ec:	e0c00217 	ldw	r3,8(fp)
  8110f0:	00800044 	movi	r2,1
  8110f4:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
  8110f8:	e0bff18b 	ldhu	r2,-58(fp)
  8110fc:	e0bfff15 	stw	r2,-4(fp)
  811100:	00002406 	br	811194 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
  811104:	e0800217 	ldw	r2,8(fp)
  811108:	10000005 	stb	zero,0(r2)
             break;
  81110c:	00001106 	br	811154 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  811110:	e0bff817 	ldw	r2,-32(fp)
  811114:	10000015 	stw	zero,0(r2)
  811118:	e0bff817 	ldw	r2,-32(fp)
  81111c:	10800104 	addi	r2,r2,4
  811120:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  811124:	e0c00217 	ldw	r3,8(fp)
  811128:	00800384 	movi	r2,14
  81112c:	18800005 	stb	r2,0(r3)
             break;
  811130:	00000806 	br	811154 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  811134:	e0bff817 	ldw	r2,-32(fp)
  811138:	10000015 	stw	zero,0(r2)
  81113c:	e0bff817 	ldw	r2,-32(fp)
  811140:	10800104 	addi	r2,r2,4
  811144:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  811148:	e0c00217 	ldw	r3,8(fp)
  81114c:	00800284 	movi	r2,10
  811150:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  811154:	d0a72b17 	ldw	r2,-25428(gp)
  811158:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  81115c:	d0a72b17 	ldw	r2,-25428(gp)
  811160:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  811164:	d0a72b17 	ldw	r2,-25428(gp)
  811168:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  81116c:	d0a72b17 	ldw	r2,-25428(gp)
  811170:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  811174:	d0a72b17 	ldw	r2,-25428(gp)
  811178:	10000915 	stw	zero,36(r2)
  81117c:	e0bff017 	ldw	r2,-64(fp)
  811180:	e0bfe915 	stw	r2,-92(fp)
  811184:	e0bfe917 	ldw	r2,-92(fp)
  811188:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  81118c:	e0fff18b 	ldhu	r3,-58(fp)
  811190:	e0ffff15 	stw	r3,-4(fp)
  811194:	e0bfff17 	ldw	r2,-4(fp)
}
  811198:	e037883a 	mov	sp,fp
  81119c:	dfc00117 	ldw	ra,4(sp)
  8111a0:	df000017 	ldw	fp,0(sp)
  8111a4:	dec00204 	addi	sp,sp,8
  8111a8:	f800283a 	ret

008111ac <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  8111ac:	defffe04 	addi	sp,sp,-8
  8111b0:	dfc00115 	stw	ra,4(sp)
  8111b4:	df000015 	stw	fp,0(sp)
  8111b8:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  8111bc:	081b2880 	call	81b288 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  8111c0:	0811f7c0 	call	811f7c <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  8111c4:	0811fc00 	call	811fc0 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  8111c8:	08121240 	call	812124 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  8111cc:	0811ea00 	call	811ea0 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  8111d0:	08141d40 	call	8141d4 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  8111d4:	0814bac0 	call	814bac <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  8111d8:	0815f080 	call	815f08 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  8111dc:	081202c0 	call	81202c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  8111e0:	08120a80 	call	8120a8 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  8111e4:	081b2a40 	call	81b2a4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  8111e8:	08129ac0 	call	8129ac <OSDebugInit>
#endif
}
  8111ec:	e037883a 	mov	sp,fp
  8111f0:	dfc00117 	ldw	ra,4(sp)
  8111f4:	df000017 	ldw	fp,0(sp)
  8111f8:	dec00204 	addi	sp,sp,8
  8111fc:	f800283a 	ret

00811200 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  811200:	defffc04 	addi	sp,sp,-16
  811204:	df000315 	stw	fp,12(sp)
  811208:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81120c:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
  811210:	d0a71c43 	ldbu	r2,-25487(gp)
  811214:	10803fcc 	andi	r2,r2,255
  811218:	10800058 	cmpnei	r2,r2,1
  81121c:	1000131e 	bne	r2,zero,81126c <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811220:	0005303a 	rdctl	r2,status
  811224:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811228:	e0fffe17 	ldw	r3,-8(fp)
  81122c:	00bfff84 	movi	r2,-2
  811230:	1884703a 	and	r2,r3,r2
  811234:	1001703a 	wrctl	status,r2
  
  return context;
  811238:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  81123c:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
  811240:	d0a72a03 	ldbu	r2,-25432(gp)
  811244:	10803fcc 	andi	r2,r2,255
  811248:	10803fe0 	cmpeqi	r2,r2,255
  81124c:	1000031e 	bne	r2,zero,81125c <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  811250:	d0a72a03 	ldbu	r2,-25432(gp)
  811254:	10800044 	addi	r2,r2,1
  811258:	d0a72a05 	stb	r2,-25432(gp)
  81125c:	e0bfff17 	ldw	r2,-4(fp)
  811260:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811264:	e0bffd17 	ldw	r2,-12(fp)
  811268:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
  81126c:	e037883a 	mov	sp,fp
  811270:	df000017 	ldw	fp,0(sp)
  811274:	dec00104 	addi	sp,sp,4
  811278:	f800283a 	ret

0081127c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  81127c:	defffb04 	addi	sp,sp,-20
  811280:	dfc00415 	stw	ra,16(sp)
  811284:	df000315 	stw	fp,12(sp)
  811288:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81128c:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
  811290:	d0a71c43 	ldbu	r2,-25487(gp)
  811294:	10803fcc 	andi	r2,r2,255
  811298:	10800058 	cmpnei	r2,r2,1
  81129c:	1000321e 	bne	r2,zero,811368 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8112a0:	0005303a 	rdctl	r2,status
  8112a4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8112a8:	e0fffe17 	ldw	r3,-8(fp)
  8112ac:	00bfff84 	movi	r2,-2
  8112b0:	1884703a 	and	r2,r3,r2
  8112b4:	1001703a 	wrctl	status,r2
  
  return context;
  8112b8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  8112bc:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  8112c0:	d0a72a03 	ldbu	r2,-25432(gp)
  8112c4:	10803fcc 	andi	r2,r2,255
  8112c8:	1005003a 	cmpeq	r2,r2,zero
  8112cc:	1000031e 	bne	r2,zero,8112dc <OSIntExit+0x60>
            OSIntNesting--;
  8112d0:	d0a72a03 	ldbu	r2,-25432(gp)
  8112d4:	10bfffc4 	addi	r2,r2,-1
  8112d8:	d0a72a05 	stb	r2,-25432(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  8112dc:	d0a72a03 	ldbu	r2,-25432(gp)
  8112e0:	10803fcc 	andi	r2,r2,255
  8112e4:	1004c03a 	cmpne	r2,r2,zero
  8112e8:	10001b1e 	bne	r2,zero,811358 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  8112ec:	d0a71c03 	ldbu	r2,-25488(gp)
  8112f0:	10803fcc 	andi	r2,r2,255
  8112f4:	1004c03a 	cmpne	r2,r2,zero
  8112f8:	1000171e 	bne	r2,zero,811358 <OSIntExit+0xdc>
                OS_SchedNew();
  8112fc:	08123980 	call	812398 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  811300:	d0a71e03 	ldbu	r2,-25480(gp)
  811304:	d0e71e43 	ldbu	r3,-25479(gp)
  811308:	11003fcc 	andi	r4,r2,255
  81130c:	18803fcc 	andi	r2,r3,255
  811310:	20801126 	beq	r4,r2,811358 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  811314:	d0a71e03 	ldbu	r2,-25480(gp)
  811318:	10803fcc 	andi	r2,r2,255
  81131c:	00c020b4 	movhi	r3,130
  811320:	18da8904 	addi	r3,r3,27172
  811324:	1085883a 	add	r2,r2,r2
  811328:	1085883a 	add	r2,r2,r2
  81132c:	10c5883a 	add	r2,r2,r3
  811330:	10800017 	ldw	r2,0(r2)
  811334:	d0a72615 	stw	r2,-25448(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  811338:	d0e72617 	ldw	r3,-25448(gp)
  81133c:	18800e17 	ldw	r2,56(r3)
  811340:	10800044 	addi	r2,r2,1
  811344:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  811348:	d0a72117 	ldw	r2,-25468(gp)
  81134c:	10800044 	addi	r2,r2,1
  811350:	d0a72115 	stw	r2,-25468(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  811354:	081ae140 	call	81ae14 <OSCtxSw>
  811358:	e0bfff17 	ldw	r2,-4(fp)
  81135c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811360:	e0bffd17 	ldw	r2,-12(fp)
  811364:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  811368:	e037883a 	mov	sp,fp
  81136c:	dfc00117 	ldw	ra,4(sp)
  811370:	df000017 	ldw	fp,0(sp)
  811374:	dec00204 	addi	sp,sp,8
  811378:	f800283a 	ret

0081137c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  81137c:	defffc04 	addi	sp,sp,-16
  811380:	df000315 	stw	fp,12(sp)
  811384:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  811388:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  81138c:	d0a71c43 	ldbu	r2,-25487(gp)
  811390:	10803fcc 	andi	r2,r2,255
  811394:	10800058 	cmpnei	r2,r2,1
  811398:	1000171e 	bne	r2,zero,8113f8 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81139c:	0005303a 	rdctl	r2,status
  8113a0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8113a4:	e0fffe17 	ldw	r3,-8(fp)
  8113a8:	00bfff84 	movi	r2,-2
  8113ac:	1884703a 	and	r2,r3,r2
  8113b0:	1001703a 	wrctl	status,r2
  
  return context;
  8113b4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  8113b8:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  8113bc:	d0a72a03 	ldbu	r2,-25432(gp)
  8113c0:	10803fcc 	andi	r2,r2,255
  8113c4:	1004c03a 	cmpne	r2,r2,zero
  8113c8:	1000071e 	bne	r2,zero,8113e8 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  8113cc:	d0a71c03 	ldbu	r2,-25488(gp)
  8113d0:	10803fcc 	andi	r2,r2,255
  8113d4:	10803fe0 	cmpeqi	r2,r2,255
  8113d8:	1000031e 	bne	r2,zero,8113e8 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  8113dc:	d0a71c03 	ldbu	r2,-25488(gp)
  8113e0:	10800044 	addi	r2,r2,1
  8113e4:	d0a71c05 	stb	r2,-25488(gp)
  8113e8:	e0bfff17 	ldw	r2,-4(fp)
  8113ec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8113f0:	e0bffd17 	ldw	r2,-12(fp)
  8113f4:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  8113f8:	e037883a 	mov	sp,fp
  8113fc:	df000017 	ldw	fp,0(sp)
  811400:	dec00104 	addi	sp,sp,4
  811404:	f800283a 	ret

00811408 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  811408:	defff804 	addi	sp,sp,-32
  81140c:	dfc00715 	stw	ra,28(sp)
  811410:	df000615 	stw	fp,24(sp)
  811414:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  811418:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  81141c:	d0a71c43 	ldbu	r2,-25487(gp)
  811420:	10803fcc 	andi	r2,r2,255
  811424:	10800058 	cmpnei	r2,r2,1
  811428:	10002b1e 	bne	r2,zero,8114d8 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81142c:	0005303a 	rdctl	r2,status
  811430:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811434:	e0fffe17 	ldw	r3,-8(fp)
  811438:	00bfff84 	movi	r2,-2
  81143c:	1884703a 	and	r2,r3,r2
  811440:	1001703a 	wrctl	status,r2
  
  return context;
  811444:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  811448:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  81144c:	d0a71c03 	ldbu	r2,-25488(gp)
  811450:	10803fcc 	andi	r2,r2,255
  811454:	1005003a 	cmpeq	r2,r2,zero
  811458:	10001b1e 	bne	r2,zero,8114c8 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  81145c:	d0a71c03 	ldbu	r2,-25488(gp)
  811460:	10bfffc4 	addi	r2,r2,-1
  811464:	d0a71c05 	stb	r2,-25488(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  811468:	d0a71c03 	ldbu	r2,-25488(gp)
  81146c:	10803fcc 	andi	r2,r2,255
  811470:	1004c03a 	cmpne	r2,r2,zero
  811474:	10000f1e 	bne	r2,zero,8114b4 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  811478:	d0a72a03 	ldbu	r2,-25432(gp)
  81147c:	10803fcc 	andi	r2,r2,255
  811480:	1004c03a 	cmpne	r2,r2,zero
  811484:	1000061e 	bne	r2,zero,8114a0 <OSSchedUnlock+0x98>
  811488:	e0bfff17 	ldw	r2,-4(fp)
  81148c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811490:	e0bffd17 	ldw	r2,-12(fp)
  811494:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  811498:	08122c40 	call	8122c4 <OS_Sched>
  81149c:	00000e06 	br	8114d8 <OSSchedUnlock+0xd0>
  8114a0:	e0bfff17 	ldw	r2,-4(fp)
  8114a4:	e0bffc15 	stw	r2,-16(fp)
  8114a8:	e0bffc17 	ldw	r2,-16(fp)
  8114ac:	1001703a 	wrctl	status,r2
  8114b0:	00000906 	br	8114d8 <OSSchedUnlock+0xd0>
  8114b4:	e0bfff17 	ldw	r2,-4(fp)
  8114b8:	e0bffb15 	stw	r2,-20(fp)
  8114bc:	e0bffb17 	ldw	r2,-20(fp)
  8114c0:	1001703a 	wrctl	status,r2
  8114c4:	00000406 	br	8114d8 <OSSchedUnlock+0xd0>
  8114c8:	e0bfff17 	ldw	r2,-4(fp)
  8114cc:	e0bffa15 	stw	r2,-24(fp)
  8114d0:	e0bffa17 	ldw	r2,-24(fp)
  8114d4:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  8114d8:	e037883a 	mov	sp,fp
  8114dc:	dfc00117 	ldw	ra,4(sp)
  8114e0:	df000017 	ldw	fp,0(sp)
  8114e4:	dec00204 	addi	sp,sp,8
  8114e8:	f800283a 	ret

008114ec <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  8114ec:	defffe04 	addi	sp,sp,-8
  8114f0:	dfc00115 	stw	ra,4(sp)
  8114f4:	df000015 	stw	fp,0(sp)
  8114f8:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  8114fc:	d0a71c43 	ldbu	r2,-25487(gp)
  811500:	10803fcc 	andi	r2,r2,255
  811504:	1004c03a 	cmpne	r2,r2,zero
  811508:	10000f1e 	bne	r2,zero,811548 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  81150c:	08123980 	call	812398 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  811510:	d0a71e03 	ldbu	r2,-25480(gp)
  811514:	d0a71e45 	stb	r2,-25479(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  811518:	d0a71e03 	ldbu	r2,-25480(gp)
  81151c:	10803fcc 	andi	r2,r2,255
  811520:	00c020b4 	movhi	r3,130
  811524:	18da8904 	addi	r3,r3,27172
  811528:	1085883a 	add	r2,r2,r2
  81152c:	1085883a 	add	r2,r2,r2
  811530:	10c5883a 	add	r2,r2,r3
  811534:	10800017 	ldw	r2,0(r2)
  811538:	d0a72615 	stw	r2,-25448(gp)
        OSTCBCur      = OSTCBHighRdy;
  81153c:	d0a72617 	ldw	r2,-25448(gp)
  811540:	d0a72b15 	stw	r2,-25428(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  811544:	081aea00 	call	81aea0 <OSStartHighRdy>
    }
}
  811548:	e037883a 	mov	sp,fp
  81154c:	dfc00117 	ldw	ra,4(sp)
  811550:	df000017 	ldw	fp,0(sp)
  811554:	dec00204 	addi	sp,sp,8
  811558:	f800283a 	ret

0081155c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  81155c:	defff904 	addi	sp,sp,-28
  811560:	dfc00615 	stw	ra,24(sp)
  811564:	df000515 	stw	fp,20(sp)
  811568:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81156c:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  811570:	01000084 	movi	r4,2
  811574:	08185bc0 	call	8185bc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811578:	0005303a 	rdctl	r2,status
  81157c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811580:	e0fffe17 	ldw	r3,-8(fp)
  811584:	00bfff84 	movi	r2,-2
  811588:	1884703a 	and	r2,r3,r2
  81158c:	1001703a 	wrctl	status,r2
  
  return context;
  811590:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  811594:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  811598:	d0271d15 	stw	zero,-25484(gp)
  81159c:	e0bfff17 	ldw	r2,-4(fp)
  8115a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8115a4:	e0bffd17 	ldw	r2,-12(fp)
  8115a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  8115ac:	01001904 	movi	r4,100
  8115b0:	08185bc0 	call	8185bc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8115b4:	0005303a 	rdctl	r2,status
  8115b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8115bc:	e0fffc17 	ldw	r3,-16(fp)
  8115c0:	00bfff84 	movi	r2,-2
  8115c4:	1884703a 	and	r2,r3,r2
  8115c8:	1001703a 	wrctl	status,r2
  
  return context;
  8115cc:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  8115d0:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  8115d4:	d0a71d17 	ldw	r2,-25484(gp)
  8115d8:	d0a72215 	stw	r2,-25464(gp)
    OSStatRdy    = OS_TRUE;
  8115dc:	00800044 	movi	r2,1
  8115e0:	d0a72e05 	stb	r2,-25416(gp)
  8115e4:	e0bfff17 	ldw	r2,-4(fp)
  8115e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8115ec:	e0bffb17 	ldw	r2,-20(fp)
  8115f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  8115f4:	e037883a 	mov	sp,fp
  8115f8:	dfc00117 	ldw	ra,4(sp)
  8115fc:	df000017 	ldw	fp,0(sp)
  811600:	dec00204 	addi	sp,sp,8
  811604:	f800283a 	ret

00811608 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  811608:	defff604 	addi	sp,sp,-40
  81160c:	dfc00915 	stw	ra,36(sp)
  811610:	df000815 	stw	fp,32(sp)
  811614:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  811618:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  81161c:	081b26c0 	call	81b26c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811620:	0005303a 	rdctl	r2,status
  811624:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811628:	e0fffb17 	ldw	r3,-20(fp)
  81162c:	00bfff84 	movi	r2,-2
  811630:	1884703a 	and	r2,r3,r2
  811634:	1001703a 	wrctl	status,r2
  
  return context;
  811638:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  81163c:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
  811640:	d0a72c17 	ldw	r2,-25424(gp)
  811644:	10800044 	addi	r2,r2,1
  811648:	d0a72c15 	stw	r2,-25424(gp)
  81164c:	e0bffc17 	ldw	r2,-16(fp)
  811650:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811654:	e0bffa17 	ldw	r2,-24(fp)
  811658:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  81165c:	d0a71c43 	ldbu	r2,-25487(gp)
  811660:	10803fcc 	andi	r2,r2,255
  811664:	10800058 	cmpnei	r2,r2,1
  811668:	1000721e 	bne	r2,zero,811834 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  81166c:	d0a72003 	ldbu	r2,-25472(gp)
  811670:	10803fcc 	andi	r2,r2,255
  811674:	e0bfff15 	stw	r2,-4(fp)
  811678:	e0ffff17 	ldw	r3,-4(fp)
  81167c:	18800060 	cmpeqi	r2,r3,1
  811680:	10000a1e 	bne	r2,zero,8116ac <OSTimeTick+0xa4>
  811684:	e0ffff17 	ldw	r3,-4(fp)
  811688:	188000a0 	cmpeqi	r2,r3,2
  81168c:	1000091e 	bne	r2,zero,8116b4 <OSTimeTick+0xac>
  811690:	e0ffff17 	ldw	r3,-4(fp)
  811694:	1805003a 	cmpeq	r2,r3,zero
  811698:	1000011e 	bne	r2,zero,8116a0 <OSTimeTick+0x98>
  81169c:	00000a06 	br	8116c8 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  8116a0:	00800044 	movi	r2,1
  8116a4:	e0bffd05 	stb	r2,-12(fp)
                 break;
  8116a8:	00000a06 	br	8116d4 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  8116ac:	e03ffd05 	stb	zero,-12(fp)
                 break;
  8116b0:	00000806 	br	8116d4 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  8116b4:	00800044 	movi	r2,1
  8116b8:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  8116bc:	00800044 	movi	r2,1
  8116c0:	d0a72005 	stb	r2,-25472(gp)
                 break;
  8116c4:	00000306 	br	8116d4 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  8116c8:	00800044 	movi	r2,1
  8116cc:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  8116d0:	d0272005 	stb	zero,-25472(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  8116d4:	e0bffd03 	ldbu	r2,-12(fp)
  8116d8:	1005003a 	cmpeq	r2,r2,zero
  8116dc:	1000551e 	bne	r2,zero,811834 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  8116e0:	d0a71f17 	ldw	r2,-25476(gp)
  8116e4:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  8116e8:	00004d06 	br	811820 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8116ec:	0005303a 	rdctl	r2,status
  8116f0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8116f4:	e0fff917 	ldw	r3,-28(fp)
  8116f8:	00bfff84 	movi	r2,-2
  8116fc:	1884703a 	and	r2,r3,r2
  811700:	1001703a 	wrctl	status,r2
  
  return context;
  811704:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
  811708:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  81170c:	e0bffe17 	ldw	r2,-8(fp)
  811710:	10800b8b 	ldhu	r2,46(r2)
  811714:	10bfffcc 	andi	r2,r2,65535
  811718:	1005003a 	cmpeq	r2,r2,zero
  81171c:	1000391e 	bne	r2,zero,811804 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  811720:	e0bffe17 	ldw	r2,-8(fp)
  811724:	10800b8b 	ldhu	r2,46(r2)
  811728:	10bfffc4 	addi	r2,r2,-1
  81172c:	1007883a 	mov	r3,r2
  811730:	e0bffe17 	ldw	r2,-8(fp)
  811734:	10c00b8d 	sth	r3,46(r2)
  811738:	e0bffe17 	ldw	r2,-8(fp)
  81173c:	10800b8b 	ldhu	r2,46(r2)
  811740:	10bfffcc 	andi	r2,r2,65535
  811744:	1004c03a 	cmpne	r2,r2,zero
  811748:	10002e1e 	bne	r2,zero,811804 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  81174c:	e0bffe17 	ldw	r2,-8(fp)
  811750:	10800c03 	ldbu	r2,48(r2)
  811754:	10803fcc 	andi	r2,r2,255
  811758:	10800dcc 	andi	r2,r2,55
  81175c:	1005003a 	cmpeq	r2,r2,zero
  811760:	10000b1e 	bne	r2,zero,811790 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  811764:	e0bffe17 	ldw	r2,-8(fp)
  811768:	10c00c03 	ldbu	r3,48(r2)
  81176c:	00bff204 	movi	r2,-56
  811770:	1884703a 	and	r2,r3,r2
  811774:	1007883a 	mov	r3,r2
  811778:	e0bffe17 	ldw	r2,-8(fp)
  81177c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  811780:	e0fffe17 	ldw	r3,-8(fp)
  811784:	00800044 	movi	r2,1
  811788:	18800c45 	stb	r2,49(r3)
  81178c:	00000206 	br	811798 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  811790:	e0bffe17 	ldw	r2,-8(fp)
  811794:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  811798:	e0bffe17 	ldw	r2,-8(fp)
  81179c:	10800c03 	ldbu	r2,48(r2)
  8117a0:	10803fcc 	andi	r2,r2,255
  8117a4:	1080020c 	andi	r2,r2,8
  8117a8:	1004c03a 	cmpne	r2,r2,zero
  8117ac:	1000151e 	bne	r2,zero,811804 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  8117b0:	e0bffe17 	ldw	r2,-8(fp)
  8117b4:	10c00d83 	ldbu	r3,54(r2)
  8117b8:	d0a72803 	ldbu	r2,-25440(gp)
  8117bc:	1884b03a 	or	r2,r3,r2
  8117c0:	d0a72805 	stb	r2,-25440(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  8117c4:	e0bffe17 	ldw	r2,-8(fp)
  8117c8:	10800d03 	ldbu	r2,52(r2)
  8117cc:	11003fcc 	andi	r4,r2,255
  8117d0:	e0bffe17 	ldw	r2,-8(fp)
  8117d4:	10800d03 	ldbu	r2,52(r2)
  8117d8:	10c03fcc 	andi	r3,r2,255
  8117dc:	d0a72844 	addi	r2,gp,-25439
  8117e0:	1885883a 	add	r2,r3,r2
  8117e4:	10c00003 	ldbu	r3,0(r2)
  8117e8:	e0bffe17 	ldw	r2,-8(fp)
  8117ec:	10800d43 	ldbu	r2,53(r2)
  8117f0:	1884b03a 	or	r2,r3,r2
  8117f4:	1007883a 	mov	r3,r2
  8117f8:	d0a72844 	addi	r2,gp,-25439
  8117fc:	2085883a 	add	r2,r4,r2
  811800:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  811804:	e0bffe17 	ldw	r2,-8(fp)
  811808:	10800517 	ldw	r2,20(r2)
  81180c:	e0bffe15 	stw	r2,-8(fp)
  811810:	e0bffc17 	ldw	r2,-16(fp)
  811814:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811818:	e0bff817 	ldw	r2,-32(fp)
  81181c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  811820:	e0bffe17 	ldw	r2,-8(fp)
  811824:	10800c83 	ldbu	r2,50(r2)
  811828:	10803fcc 	andi	r2,r2,255
  81182c:	10800518 	cmpnei	r2,r2,20
  811830:	103fae1e 	bne	r2,zero,8116ec <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  811834:	e037883a 	mov	sp,fp
  811838:	dfc00117 	ldw	ra,4(sp)
  81183c:	df000017 	ldw	fp,0(sp)
  811840:	dec00204 	addi	sp,sp,8
  811844:	f800283a 	ret

00811848 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  811848:	deffff04 	addi	sp,sp,-4
  81184c:	df000015 	stw	fp,0(sp)
  811850:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  811854:	00804784 	movi	r2,286
}
  811858:	e037883a 	mov	sp,fp
  81185c:	df000017 	ldw	fp,0(sp)
  811860:	dec00104 	addi	sp,sp,4
  811864:	f800283a 	ret

00811868 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  811868:	deffff04 	addi	sp,sp,-4
  81186c:	df000015 	stw	fp,0(sp)
  811870:	d839883a 	mov	fp,sp
}
  811874:	e037883a 	mov	sp,fp
  811878:	df000017 	ldw	fp,0(sp)
  81187c:	dec00104 	addi	sp,sp,4
  811880:	f800283a 	ret

00811884 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  811884:	defff804 	addi	sp,sp,-32
  811888:	dfc00715 	stw	ra,28(sp)
  81188c:	df000615 	stw	fp,24(sp)
  811890:	df000604 	addi	fp,sp,24
  811894:	e13ffc15 	stw	r4,-16(fp)
  811898:	e17ffd15 	stw	r5,-12(fp)
  81189c:	e1bffe05 	stb	r6,-8(fp)
  8118a0:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  8118a4:	e0bffc17 	ldw	r2,-16(fp)
  8118a8:	10800283 	ldbu	r2,10(r2)
  8118ac:	10c03fcc 	andi	r3,r2,255
  8118b0:	008020b4 	movhi	r2,130
  8118b4:	10afcb04 	addi	r2,r2,-16596
  8118b8:	10c5883a 	add	r2,r2,r3
  8118bc:	10800003 	ldbu	r2,0(r2)
  8118c0:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  8118c4:	e0fffa83 	ldbu	r3,-22(fp)
  8118c8:	e0bffc17 	ldw	r2,-16(fp)
  8118cc:	1885883a 	add	r2,r3,r2
  8118d0:	10800204 	addi	r2,r2,8
  8118d4:	108000c3 	ldbu	r2,3(r2)
  8118d8:	10c03fcc 	andi	r3,r2,255
  8118dc:	008020b4 	movhi	r2,130
  8118e0:	10afcb04 	addi	r2,r2,-16596
  8118e4:	10c5883a 	add	r2,r2,r3
  8118e8:	10800003 	ldbu	r2,0(r2)
  8118ec:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  8118f0:	e0bffa83 	ldbu	r2,-22(fp)
  8118f4:	100490fa 	slli	r2,r2,3
  8118f8:	1007883a 	mov	r3,r2
  8118fc:	e0bffa43 	ldbu	r2,-23(fp)
  811900:	1885883a 	add	r2,r3,r2
  811904:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  811908:	e0bffa03 	ldbu	r2,-24(fp)
  81190c:	00c020b4 	movhi	r3,130
  811910:	18da8904 	addi	r3,r3,27172
  811914:	1085883a 	add	r2,r2,r2
  811918:	1085883a 	add	r2,r2,r2
  81191c:	10c5883a 	add	r2,r2,r3
  811920:	10800017 	ldw	r2,0(r2)
  811924:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  811928:	e0bffb17 	ldw	r2,-20(fp)
  81192c:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  811930:	e0fffb17 	ldw	r3,-20(fp)
  811934:	e0bffd17 	ldw	r2,-12(fp)
  811938:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  81193c:	e0bffb17 	ldw	r2,-20(fp)
  811940:	10800c03 	ldbu	r2,48(r2)
  811944:	1007883a 	mov	r3,r2
  811948:	e0bffe03 	ldbu	r2,-8(fp)
  81194c:	0084303a 	nor	r2,zero,r2
  811950:	1884703a 	and	r2,r3,r2
  811954:	1007883a 	mov	r3,r2
  811958:	e0bffb17 	ldw	r2,-20(fp)
  81195c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  811960:	e0fffb17 	ldw	r3,-20(fp)
  811964:	e0bfff03 	ldbu	r2,-4(fp)
  811968:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  81196c:	e0bffb17 	ldw	r2,-20(fp)
  811970:	10800c03 	ldbu	r2,48(r2)
  811974:	10803fcc 	andi	r2,r2,255
  811978:	1080020c 	andi	r2,r2,8
  81197c:	1004c03a 	cmpne	r2,r2,zero
  811980:	1000111e 	bne	r2,zero,8119c8 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  811984:	e0bffb17 	ldw	r2,-20(fp)
  811988:	10c00d83 	ldbu	r3,54(r2)
  81198c:	d0a72803 	ldbu	r2,-25440(gp)
  811990:	1884b03a 	or	r2,r3,r2
  811994:	d0a72805 	stb	r2,-25440(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  811998:	e13ffa83 	ldbu	r4,-22(fp)
  81199c:	e0fffa83 	ldbu	r3,-22(fp)
  8119a0:	d0a72844 	addi	r2,gp,-25439
  8119a4:	1885883a 	add	r2,r3,r2
  8119a8:	10c00003 	ldbu	r3,0(r2)
  8119ac:	e0bffb17 	ldw	r2,-20(fp)
  8119b0:	10800d43 	ldbu	r2,53(r2)
  8119b4:	1884b03a 	or	r2,r3,r2
  8119b8:	1007883a 	mov	r3,r2
  8119bc:	d0a72844 	addi	r2,gp,-25439
  8119c0:	2085883a 	add	r2,r4,r2
  8119c4:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  8119c8:	e13ffb17 	ldw	r4,-20(fp)
  8119cc:	e17ffc17 	ldw	r5,-16(fp)
  8119d0:	0811c7c0 	call	811c7c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  8119d4:	e0bffb17 	ldw	r2,-20(fp)
  8119d8:	10800817 	ldw	r2,32(r2)
  8119dc:	1005003a 	cmpeq	r2,r2,zero
  8119e0:	1000071e 	bne	r2,zero,811a00 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  8119e4:	e0bffb17 	ldw	r2,-20(fp)
  8119e8:	11400817 	ldw	r5,32(r2)
  8119ec:	e13ffb17 	ldw	r4,-20(fp)
  8119f0:	0811d340 	call	811d34 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  8119f4:	e0fffb17 	ldw	r3,-20(fp)
  8119f8:	e0bffc17 	ldw	r2,-16(fp)
  8119fc:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
  811a00:	e0bffa03 	ldbu	r2,-24(fp)
}
  811a04:	e037883a 	mov	sp,fp
  811a08:	dfc00117 	ldw	ra,4(sp)
  811a0c:	df000017 	ldw	fp,0(sp)
  811a10:	dec00204 	addi	sp,sp,8
  811a14:	f800283a 	ret

00811a18 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  811a18:	defffd04 	addi	sp,sp,-12
  811a1c:	df000215 	stw	fp,8(sp)
  811a20:	df000204 	addi	fp,sp,8
  811a24:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  811a28:	d0e72b17 	ldw	r3,-25428(gp)
  811a2c:	e0bfff17 	ldw	r2,-4(fp)
  811a30:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  811a34:	d0a72b17 	ldw	r2,-25428(gp)
  811a38:	10800d03 	ldbu	r2,52(r2)
  811a3c:	11003fcc 	andi	r4,r2,255
  811a40:	d0a72b17 	ldw	r2,-25428(gp)
  811a44:	10800d03 	ldbu	r2,52(r2)
  811a48:	10c03fcc 	andi	r3,r2,255
  811a4c:	e0bfff17 	ldw	r2,-4(fp)
  811a50:	1885883a 	add	r2,r3,r2
  811a54:	10800204 	addi	r2,r2,8
  811a58:	10c000c3 	ldbu	r3,3(r2)
  811a5c:	d0a72b17 	ldw	r2,-25428(gp)
  811a60:	10800d43 	ldbu	r2,53(r2)
  811a64:	1884b03a 	or	r2,r3,r2
  811a68:	1007883a 	mov	r3,r2
  811a6c:	e0bfff17 	ldw	r2,-4(fp)
  811a70:	2085883a 	add	r2,r4,r2
  811a74:	10800204 	addi	r2,r2,8
  811a78:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  811a7c:	e0bfff17 	ldw	r2,-4(fp)
  811a80:	10c00283 	ldbu	r3,10(r2)
  811a84:	d0a72b17 	ldw	r2,-25428(gp)
  811a88:	10800d83 	ldbu	r2,54(r2)
  811a8c:	1884b03a 	or	r2,r3,r2
  811a90:	1007883a 	mov	r3,r2
  811a94:	e0bfff17 	ldw	r2,-4(fp)
  811a98:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  811a9c:	d0a72b17 	ldw	r2,-25428(gp)
  811aa0:	10800d03 	ldbu	r2,52(r2)
  811aa4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  811aa8:	e13ffe03 	ldbu	r4,-8(fp)
  811aac:	e0fffe03 	ldbu	r3,-8(fp)
  811ab0:	d0a72844 	addi	r2,gp,-25439
  811ab4:	1885883a 	add	r2,r3,r2
  811ab8:	10800003 	ldbu	r2,0(r2)
  811abc:	1007883a 	mov	r3,r2
  811ac0:	d0a72b17 	ldw	r2,-25428(gp)
  811ac4:	10800d43 	ldbu	r2,53(r2)
  811ac8:	0084303a 	nor	r2,zero,r2
  811acc:	1884703a 	and	r2,r3,r2
  811ad0:	1007883a 	mov	r3,r2
  811ad4:	d0a72844 	addi	r2,gp,-25439
  811ad8:	2085883a 	add	r2,r4,r2
  811adc:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  811ae0:	e0fffe03 	ldbu	r3,-8(fp)
  811ae4:	d0a72844 	addi	r2,gp,-25439
  811ae8:	1885883a 	add	r2,r3,r2
  811aec:	10800003 	ldbu	r2,0(r2)
  811af0:	10803fcc 	andi	r2,r2,255
  811af4:	1004c03a 	cmpne	r2,r2,zero
  811af8:	1000071e 	bne	r2,zero,811b18 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  811afc:	d0a72b17 	ldw	r2,-25428(gp)
  811b00:	10800d83 	ldbu	r2,54(r2)
  811b04:	0084303a 	nor	r2,zero,r2
  811b08:	1007883a 	mov	r3,r2
  811b0c:	d0a72803 	ldbu	r2,-25440(gp)
  811b10:	1884703a 	and	r2,r3,r2
  811b14:	d0a72805 	stb	r2,-25440(gp)
    }
}
  811b18:	e037883a 	mov	sp,fp
  811b1c:	df000017 	ldw	fp,0(sp)
  811b20:	dec00104 	addi	sp,sp,4
  811b24:	f800283a 	ret

00811b28 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  811b28:	defffb04 	addi	sp,sp,-20
  811b2c:	df000415 	stw	fp,16(sp)
  811b30:	df000404 	addi	fp,sp,16
  811b34:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  811b38:	d0a72b17 	ldw	r2,-25428(gp)
  811b3c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  811b40:	d0e72b17 	ldw	r3,-25428(gp)
  811b44:	e0bfff17 	ldw	r2,-4(fp)
  811b48:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
  811b4c:	e0bfff17 	ldw	r2,-4(fp)
  811b50:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
  811b54:	e0bffe17 	ldw	r2,-8(fp)
  811b58:	10800017 	ldw	r2,0(r2)
  811b5c:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  811b60:	00002006 	br	811be4 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  811b64:	d0a72b17 	ldw	r2,-25428(gp)
  811b68:	10800d03 	ldbu	r2,52(r2)
  811b6c:	11003fcc 	andi	r4,r2,255
  811b70:	d0a72b17 	ldw	r2,-25428(gp)
  811b74:	10800d03 	ldbu	r2,52(r2)
  811b78:	10c03fcc 	andi	r3,r2,255
  811b7c:	e0bffd17 	ldw	r2,-12(fp)
  811b80:	1885883a 	add	r2,r3,r2
  811b84:	10800204 	addi	r2,r2,8
  811b88:	10c000c3 	ldbu	r3,3(r2)
  811b8c:	d0a72b17 	ldw	r2,-25428(gp)
  811b90:	10800d43 	ldbu	r2,53(r2)
  811b94:	1884b03a 	or	r2,r3,r2
  811b98:	1007883a 	mov	r3,r2
  811b9c:	e0bffd17 	ldw	r2,-12(fp)
  811ba0:	2085883a 	add	r2,r4,r2
  811ba4:	10800204 	addi	r2,r2,8
  811ba8:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  811bac:	e0bffd17 	ldw	r2,-12(fp)
  811bb0:	10c00283 	ldbu	r3,10(r2)
  811bb4:	d0a72b17 	ldw	r2,-25428(gp)
  811bb8:	10800d83 	ldbu	r2,54(r2)
  811bbc:	1884b03a 	or	r2,r3,r2
  811bc0:	1007883a 	mov	r3,r2
  811bc4:	e0bffd17 	ldw	r2,-12(fp)
  811bc8:	10c00285 	stb	r3,10(r2)
        pevents++;
  811bcc:	e0bffe17 	ldw	r2,-8(fp)
  811bd0:	10800104 	addi	r2,r2,4
  811bd4:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
  811bd8:	e0bffe17 	ldw	r2,-8(fp)
  811bdc:	10800017 	ldw	r2,0(r2)
  811be0:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  811be4:	e0bffd17 	ldw	r2,-12(fp)
  811be8:	1004c03a 	cmpne	r2,r2,zero
  811bec:	103fdd1e 	bne	r2,zero,811b64 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  811bf0:	d0a72b17 	ldw	r2,-25428(gp)
  811bf4:	10800d03 	ldbu	r2,52(r2)
  811bf8:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  811bfc:	e13ffc03 	ldbu	r4,-16(fp)
  811c00:	e0fffc03 	ldbu	r3,-16(fp)
  811c04:	d0a72844 	addi	r2,gp,-25439
  811c08:	1885883a 	add	r2,r3,r2
  811c0c:	10800003 	ldbu	r2,0(r2)
  811c10:	1007883a 	mov	r3,r2
  811c14:	d0a72b17 	ldw	r2,-25428(gp)
  811c18:	10800d43 	ldbu	r2,53(r2)
  811c1c:	0084303a 	nor	r2,zero,r2
  811c20:	1884703a 	and	r2,r3,r2
  811c24:	1007883a 	mov	r3,r2
  811c28:	d0a72844 	addi	r2,gp,-25439
  811c2c:	2085883a 	add	r2,r4,r2
  811c30:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  811c34:	e0fffc03 	ldbu	r3,-16(fp)
  811c38:	d0a72844 	addi	r2,gp,-25439
  811c3c:	1885883a 	add	r2,r3,r2
  811c40:	10800003 	ldbu	r2,0(r2)
  811c44:	10803fcc 	andi	r2,r2,255
  811c48:	1004c03a 	cmpne	r2,r2,zero
  811c4c:	1000071e 	bne	r2,zero,811c6c <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  811c50:	d0a72b17 	ldw	r2,-25428(gp)
  811c54:	10800d83 	ldbu	r2,54(r2)
  811c58:	0084303a 	nor	r2,zero,r2
  811c5c:	1007883a 	mov	r3,r2
  811c60:	d0a72803 	ldbu	r2,-25440(gp)
  811c64:	1884703a 	and	r2,r3,r2
  811c68:	d0a72805 	stb	r2,-25440(gp)
    }
}
  811c6c:	e037883a 	mov	sp,fp
  811c70:	df000017 	ldw	fp,0(sp)
  811c74:	dec00104 	addi	sp,sp,4
  811c78:	f800283a 	ret

00811c7c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  811c7c:	defffc04 	addi	sp,sp,-16
  811c80:	df000315 	stw	fp,12(sp)
  811c84:	df000304 	addi	fp,sp,12
  811c88:	e13ffe15 	stw	r4,-8(fp)
  811c8c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  811c90:	e0bffe17 	ldw	r2,-8(fp)
  811c94:	10800d03 	ldbu	r2,52(r2)
  811c98:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  811c9c:	e13ffd03 	ldbu	r4,-12(fp)
  811ca0:	e0fffd03 	ldbu	r3,-12(fp)
  811ca4:	e0bfff17 	ldw	r2,-4(fp)
  811ca8:	1885883a 	add	r2,r3,r2
  811cac:	10800204 	addi	r2,r2,8
  811cb0:	108000c3 	ldbu	r2,3(r2)
  811cb4:	1007883a 	mov	r3,r2
  811cb8:	e0bffe17 	ldw	r2,-8(fp)
  811cbc:	10800d43 	ldbu	r2,53(r2)
  811cc0:	0084303a 	nor	r2,zero,r2
  811cc4:	1884703a 	and	r2,r3,r2
  811cc8:	1007883a 	mov	r3,r2
  811ccc:	e0bfff17 	ldw	r2,-4(fp)
  811cd0:	2085883a 	add	r2,r4,r2
  811cd4:	10800204 	addi	r2,r2,8
  811cd8:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
  811cdc:	e0fffd03 	ldbu	r3,-12(fp)
  811ce0:	e0bfff17 	ldw	r2,-4(fp)
  811ce4:	1885883a 	add	r2,r3,r2
  811ce8:	10800204 	addi	r2,r2,8
  811cec:	108000c3 	ldbu	r2,3(r2)
  811cf0:	10803fcc 	andi	r2,r2,255
  811cf4:	1004c03a 	cmpne	r2,r2,zero
  811cf8:	10000a1e 	bne	r2,zero,811d24 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  811cfc:	e0bfff17 	ldw	r2,-4(fp)
  811d00:	10800283 	ldbu	r2,10(r2)
  811d04:	1007883a 	mov	r3,r2
  811d08:	e0bffe17 	ldw	r2,-8(fp)
  811d0c:	10800d83 	ldbu	r2,54(r2)
  811d10:	0084303a 	nor	r2,zero,r2
  811d14:	1884703a 	and	r2,r3,r2
  811d18:	1007883a 	mov	r3,r2
  811d1c:	e0bfff17 	ldw	r2,-4(fp)
  811d20:	10c00285 	stb	r3,10(r2)
    }
}
  811d24:	e037883a 	mov	sp,fp
  811d28:	df000017 	ldw	fp,0(sp)
  811d2c:	dec00104 	addi	sp,sp,4
  811d30:	f800283a 	ret

00811d34 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  811d34:	defffa04 	addi	sp,sp,-24
  811d38:	df000515 	stw	fp,20(sp)
  811d3c:	df000504 	addi	fp,sp,20
  811d40:	e13ffe15 	stw	r4,-8(fp)
  811d44:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  811d48:	e0bffe17 	ldw	r2,-8(fp)
  811d4c:	10800d03 	ldbu	r2,52(r2)
  811d50:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
  811d54:	e0bffe17 	ldw	r2,-8(fp)
  811d58:	10800d83 	ldbu	r2,54(r2)
  811d5c:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
  811d60:	e0bffe17 	ldw	r2,-8(fp)
  811d64:	10800d43 	ldbu	r2,53(r2)
  811d68:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
  811d6c:	e0bfff17 	ldw	r2,-4(fp)
  811d70:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
  811d74:	e0bffd17 	ldw	r2,-12(fp)
  811d78:	10800017 	ldw	r2,0(r2)
  811d7c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  811d80:	00002606 	br	811e1c <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
  811d84:	e13ffb83 	ldbu	r4,-18(fp)
  811d88:	e0fffb83 	ldbu	r3,-18(fp)
  811d8c:	e0bffc17 	ldw	r2,-16(fp)
  811d90:	1885883a 	add	r2,r3,r2
  811d94:	10800204 	addi	r2,r2,8
  811d98:	108000c3 	ldbu	r2,3(r2)
  811d9c:	1007883a 	mov	r3,r2
  811da0:	e0bffb03 	ldbu	r2,-20(fp)
  811da4:	0084303a 	nor	r2,zero,r2
  811da8:	1884703a 	and	r2,r3,r2
  811dac:	1007883a 	mov	r3,r2
  811db0:	e0bffc17 	ldw	r2,-16(fp)
  811db4:	2085883a 	add	r2,r4,r2
  811db8:	10800204 	addi	r2,r2,8
  811dbc:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
  811dc0:	e0fffb83 	ldbu	r3,-18(fp)
  811dc4:	e0bffc17 	ldw	r2,-16(fp)
  811dc8:	1885883a 	add	r2,r3,r2
  811dcc:	10800204 	addi	r2,r2,8
  811dd0:	108000c3 	ldbu	r2,3(r2)
  811dd4:	10803fcc 	andi	r2,r2,255
  811dd8:	1004c03a 	cmpne	r2,r2,zero
  811ddc:	1000091e 	bne	r2,zero,811e04 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
  811de0:	e0bffc17 	ldw	r2,-16(fp)
  811de4:	10800283 	ldbu	r2,10(r2)
  811de8:	1007883a 	mov	r3,r2
  811dec:	e0bffb43 	ldbu	r2,-19(fp)
  811df0:	0084303a 	nor	r2,zero,r2
  811df4:	1884703a 	and	r2,r3,r2
  811df8:	1007883a 	mov	r3,r2
  811dfc:	e0bffc17 	ldw	r2,-16(fp)
  811e00:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  811e04:	e0bffd17 	ldw	r2,-12(fp)
  811e08:	10800104 	addi	r2,r2,4
  811e0c:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
  811e10:	e0bffd17 	ldw	r2,-12(fp)
  811e14:	10800017 	ldw	r2,0(r2)
  811e18:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  811e1c:	e0bffc17 	ldw	r2,-16(fp)
  811e20:	1004c03a 	cmpne	r2,r2,zero
  811e24:	103fd71e 	bne	r2,zero,811d84 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  811e28:	e037883a 	mov	sp,fp
  811e2c:	df000017 	ldw	fp,0(sp)
  811e30:	dec00104 	addi	sp,sp,4
  811e34:	f800283a 	ret

00811e38 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  811e38:	defffc04 	addi	sp,sp,-16
  811e3c:	df000315 	stw	fp,12(sp)
  811e40:	df000304 	addi	fp,sp,12
  811e44:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  811e48:	e0bfff17 	ldw	r2,-4(fp)
  811e4c:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  811e50:	e0bfff17 	ldw	r2,-4(fp)
  811e54:	108002c4 	addi	r2,r2,11
  811e58:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  811e5c:	e03ffd05 	stb	zero,-12(fp)
  811e60:	00000806 	br	811e84 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
  811e64:	e0bffe17 	ldw	r2,-8(fp)
  811e68:	10000005 	stb	zero,0(r2)
  811e6c:	e0bffe17 	ldw	r2,-8(fp)
  811e70:	10800044 	addi	r2,r2,1
  811e74:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  811e78:	e0bffd03 	ldbu	r2,-12(fp)
  811e7c:	10800044 	addi	r2,r2,1
  811e80:	e0bffd05 	stb	r2,-12(fp)
  811e84:	e0bffd03 	ldbu	r2,-12(fp)
  811e88:	108000f0 	cmpltui	r2,r2,3
  811e8c:	103ff51e 	bne	r2,zero,811e64 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
  811e90:	e037883a 	mov	sp,fp
  811e94:	df000017 	ldw	fp,0(sp)
  811e98:	dec00104 	addi	sp,sp,4
  811e9c:	f800283a 	ret

00811ea0 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  811ea0:	defffb04 	addi	sp,sp,-20
  811ea4:	dfc00415 	stw	ra,16(sp)
  811ea8:	df000315 	stw	fp,12(sp)
  811eac:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  811eb0:	010020b4 	movhi	r4,130
  811eb4:	21167504 	addi	r4,r4,22996
  811eb8:	0142d004 	movi	r5,2880
  811ebc:	08122040 	call	812204 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  811ec0:	008020b4 	movhi	r2,130
  811ec4:	10967504 	addi	r2,r2,22996
  811ec8:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  811ecc:	008020b4 	movhi	r2,130
  811ed0:	10968104 	addi	r2,r2,23044
  811ed4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  811ed8:	e03fff0d 	sth	zero,-4(fp)
  811edc:	00001306 	br	811f2c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  811ee0:	e0bffe17 	ldw	r2,-8(fp)
  811ee4:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  811ee8:	e0fffe17 	ldw	r3,-8(fp)
  811eec:	e0bffd17 	ldw	r2,-12(fp)
  811ef0:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  811ef4:	e0fffe17 	ldw	r3,-8(fp)
  811ef8:	00800fc4 	movi	r2,63
  811efc:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  811f00:	e0bffe17 	ldw	r2,-8(fp)
  811f04:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  811f08:	e0bffe17 	ldw	r2,-8(fp)
  811f0c:	10800c04 	addi	r2,r2,48
  811f10:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  811f14:	e0bffd17 	ldw	r2,-12(fp)
  811f18:	10800c04 	addi	r2,r2,48
  811f1c:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  811f20:	e0bfff0b 	ldhu	r2,-4(fp)
  811f24:	10800044 	addi	r2,r2,1
  811f28:	e0bfff0d 	sth	r2,-4(fp)
  811f2c:	e0bfff0b 	ldhu	r2,-4(fp)
  811f30:	10800ef0 	cmpltui	r2,r2,59
  811f34:	103fea1e 	bne	r2,zero,811ee0 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  811f38:	e0bffe17 	ldw	r2,-8(fp)
  811f3c:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  811f40:	e0bffe17 	ldw	r2,-8(fp)
  811f44:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  811f48:	e0fffe17 	ldw	r3,-8(fp)
  811f4c:	00800fc4 	movi	r2,63
  811f50:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  811f54:	e0bffe17 	ldw	r2,-8(fp)
  811f58:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  811f5c:	008020b4 	movhi	r2,130
  811f60:	10967504 	addi	r2,r2,22996
  811f64:	d0a72915 	stw	r2,-25436(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  811f68:	e037883a 	mov	sp,fp
  811f6c:	dfc00117 	ldw	ra,4(sp)
  811f70:	df000017 	ldw	fp,0(sp)
  811f74:	dec00204 	addi	sp,sp,8
  811f78:	f800283a 	ret

00811f7c <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  811f7c:	deffff04 	addi	sp,sp,-4
  811f80:	df000015 	stw	fp,0(sp)
  811f84:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  811f88:	d0272c15 	stw	zero,-25424(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  811f8c:	d0272a05 	stb	zero,-25432(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  811f90:	d0271c05 	stb	zero,-25488(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  811f94:	d0272445 	stb	zero,-25455(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  811f98:	d0271c45 	stb	zero,-25487(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  811f9c:	d0272115 	stw	zero,-25468(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  811fa0:	d0271d15 	stw	zero,-25484(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  811fa4:	d0272f15 	stw	zero,-25412(gp)
    OSIdleCtrMax  = 0L;
  811fa8:	d0272215 	stw	zero,-25464(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  811fac:	d0272e05 	stb	zero,-25416(gp)
#endif
}
  811fb0:	e037883a 	mov	sp,fp
  811fb4:	df000017 	ldw	fp,0(sp)
  811fb8:	dec00104 	addi	sp,sp,4
  811fbc:	f800283a 	ret

00811fc0 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  811fc0:	defffd04 	addi	sp,sp,-12
  811fc4:	df000215 	stw	fp,8(sp)
  811fc8:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  811fcc:	d0272805 	stb	zero,-25440(gp)
    prdytbl       = &OSRdyTbl[0];
  811fd0:	d0a72844 	addi	r2,gp,-25439
  811fd4:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  811fd8:	e03fff05 	stb	zero,-4(fp)
  811fdc:	00000806 	br	812000 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
  811fe0:	e0bffe17 	ldw	r2,-8(fp)
  811fe4:	10000005 	stb	zero,0(r2)
  811fe8:	e0bffe17 	ldw	r2,-8(fp)
  811fec:	10800044 	addi	r2,r2,1
  811ff0:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  811ff4:	e0bfff03 	ldbu	r2,-4(fp)
  811ff8:	10800044 	addi	r2,r2,1
  811ffc:	e0bfff05 	stb	r2,-4(fp)
  812000:	e0bfff03 	ldbu	r2,-4(fp)
  812004:	108000f0 	cmpltui	r2,r2,3
  812008:	103ff51e 	bne	r2,zero,811fe0 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  81200c:	d0271e45 	stb	zero,-25479(gp)
    OSPrioHighRdy = 0;
  812010:	d0271e05 	stb	zero,-25480(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  812014:	d0272615 	stw	zero,-25448(gp)
    OSTCBCur      = (OS_TCB *)0;
  812018:	d0272b15 	stw	zero,-25428(gp)
}
  81201c:	e037883a 	mov	sp,fp
  812020:	df000017 	ldw	fp,0(sp)
  812024:	dec00104 	addi	sp,sp,4
  812028:	f800283a 	ret

0081202c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  81202c:	defff804 	addi	sp,sp,-32
  812030:	dfc00715 	stw	ra,28(sp)
  812034:	df000615 	stw	fp,24(sp)
  812038:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  81203c:	018020b4 	movhi	r6,130
  812040:	31967404 	addi	r6,r6,22992
  812044:	00bfffd4 	movui	r2,65535
  812048:	d8800015 	stw	r2,0(sp)
  81204c:	008020b4 	movhi	r2,130
  812050:	10947504 	addi	r2,r2,20948
  812054:	d8800115 	stw	r2,4(sp)
  812058:	00808004 	movi	r2,512
  81205c:	d8800215 	stw	r2,8(sp)
  812060:	d8000315 	stw	zero,12(sp)
  812064:	008000c4 	movi	r2,3
  812068:	d8800415 	stw	r2,16(sp)
  81206c:	01002074 	movhi	r4,129
  812070:	21093804 	addi	r4,r4,9440
  812074:	000b883a 	mov	r5,zero
  812078:	01c00504 	movi	r7,20
  81207c:	08172c40 	call	8172c4 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  812080:	014020b4 	movhi	r5,130
  812084:	29700b04 	addi	r5,r5,-16340
  812088:	01000504 	movi	r4,20
  81208c:	e1bfff04 	addi	r6,fp,-4
  812090:	0817bf80 	call	817bf8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  812094:	e037883a 	mov	sp,fp
  812098:	dfc00117 	ldw	ra,4(sp)
  81209c:	df000017 	ldw	fp,0(sp)
  8120a0:	dec00204 	addi	sp,sp,8
  8120a4:	f800283a 	ret

008120a8 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  8120a8:	defff804 	addi	sp,sp,-32
  8120ac:	dfc00715 	stw	ra,28(sp)
  8120b0:	df000615 	stw	fp,24(sp)
  8120b4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  8120b8:	018020b4 	movhi	r6,130
  8120bc:	3193fc04 	addi	r6,r6,20464
  8120c0:	00bfff94 	movui	r2,65534
  8120c4:	d8800015 	stw	r2,0(sp)
  8120c8:	008020b4 	movhi	r2,130
  8120cc:	1091fd04 	addi	r2,r2,18420
  8120d0:	d8800115 	stw	r2,4(sp)
  8120d4:	00808004 	movi	r2,512
  8120d8:	d8800215 	stw	r2,8(sp)
  8120dc:	d8000315 	stw	zero,12(sp)
  8120e0:	008000c4 	movi	r2,3
  8120e4:	d8800415 	stw	r2,16(sp)
  8120e8:	01002074 	movhi	r4,129
  8120ec:	21094f04 	addi	r4,r4,9532
  8120f0:	000b883a 	mov	r5,zero
  8120f4:	01c004c4 	movi	r7,19
  8120f8:	08172c40 	call	8172c4 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  8120fc:	014020b4 	movhi	r5,130
  812100:	29700f04 	addi	r5,r5,-16324
  812104:	010004c4 	movi	r4,19
  812108:	e1bfff04 	addi	r6,fp,-4
  81210c:	0817bf80 	call	817bf8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  812110:	e037883a 	mov	sp,fp
  812114:	dfc00117 	ldw	ra,4(sp)
  812118:	df000017 	ldw	fp,0(sp)
  81211c:	dec00204 	addi	sp,sp,8
  812120:	f800283a 	ret

00812124 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  812124:	defffb04 	addi	sp,sp,-20
  812128:	dfc00415 	stw	ra,16(sp)
  81212c:	df000315 	stw	fp,12(sp)
  812130:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  812134:	010020b4 	movhi	r4,130
  812138:	21194504 	addi	r4,r4,25876
  81213c:	01414404 	movi	r5,1296
  812140:	08122040 	call	812204 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  812144:	010020b4 	movhi	r4,130
  812148:	211a8904 	addi	r4,r4,27172
  81214c:	01401504 	movi	r5,84
  812150:	08122040 	call	812204 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  812154:	008020b4 	movhi	r2,130
  812158:	10994504 	addi	r2,r2,25876
  81215c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  812160:	008020b4 	movhi	r2,130
  812164:	10996004 	addi	r2,r2,25984
  812168:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  81216c:	e03fff05 	stb	zero,-4(fp)
  812170:	00001106 	br	8121b8 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  812174:	e0fffe17 	ldw	r3,-8(fp)
  812178:	e0bffd17 	ldw	r2,-12(fp)
  81217c:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  812180:	e0fffe17 	ldw	r3,-8(fp)
  812184:	00800fc4 	movi	r2,63
  812188:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  81218c:	e0bffe17 	ldw	r2,-8(fp)
  812190:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  812194:	e0bffe17 	ldw	r2,-8(fp)
  812198:	10801b04 	addi	r2,r2,108
  81219c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  8121a0:	e0bffd17 	ldw	r2,-12(fp)
  8121a4:	10801b04 	addi	r2,r2,108
  8121a8:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  8121ac:	e0bfff03 	ldbu	r2,-4(fp)
  8121b0:	10800044 	addi	r2,r2,1
  8121b4:	e0bfff05 	stb	r2,-4(fp)
  8121b8:	e0bfff03 	ldbu	r2,-4(fp)
  8121bc:	108002f0 	cmpltui	r2,r2,11
  8121c0:	103fec1e 	bne	r2,zero,812174 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  8121c4:	e0bffe17 	ldw	r2,-8(fp)
  8121c8:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  8121cc:	e0fffe17 	ldw	r3,-8(fp)
  8121d0:	00800fc4 	movi	r2,63
  8121d4:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  8121d8:	e0bffe17 	ldw	r2,-8(fp)
  8121dc:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  8121e0:	d0271f15 	stw	zero,-25476(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  8121e4:	008020b4 	movhi	r2,130
  8121e8:	10994504 	addi	r2,r2,25876
  8121ec:	d0a72315 	stw	r2,-25460(gp)
}
  8121f0:	e037883a 	mov	sp,fp
  8121f4:	dfc00117 	ldw	ra,4(sp)
  8121f8:	df000017 	ldw	fp,0(sp)
  8121fc:	dec00204 	addi	sp,sp,8
  812200:	f800283a 	ret

00812204 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  812204:	defffd04 	addi	sp,sp,-12
  812208:	df000215 	stw	fp,8(sp)
  81220c:	df000204 	addi	fp,sp,8
  812210:	e13ffe15 	stw	r4,-8(fp)
  812214:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
  812218:	00000806 	br	81223c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  81221c:	e0bffe17 	ldw	r2,-8(fp)
  812220:	10000005 	stb	zero,0(r2)
  812224:	e0bffe17 	ldw	r2,-8(fp)
  812228:	10800044 	addi	r2,r2,1
  81222c:	e0bffe15 	stw	r2,-8(fp)
        size--;
  812230:	e0bfff0b 	ldhu	r2,-4(fp)
  812234:	10bfffc4 	addi	r2,r2,-1
  812238:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  81223c:	e0bfff0b 	ldhu	r2,-4(fp)
  812240:	1004c03a 	cmpne	r2,r2,zero
  812244:	103ff51e 	bne	r2,zero,81221c <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  812248:	e037883a 	mov	sp,fp
  81224c:	df000017 	ldw	fp,0(sp)
  812250:	dec00104 	addi	sp,sp,4
  812254:	f800283a 	ret

00812258 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  812258:	defffc04 	addi	sp,sp,-16
  81225c:	df000315 	stw	fp,12(sp)
  812260:	df000304 	addi	fp,sp,12
  812264:	e13ffd15 	stw	r4,-12(fp)
  812268:	e17ffe15 	stw	r5,-8(fp)
  81226c:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
  812270:	00000d06 	br	8122a8 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
  812274:	e0bffe17 	ldw	r2,-8(fp)
  812278:	10c00003 	ldbu	r3,0(r2)
  81227c:	e0bffd17 	ldw	r2,-12(fp)
  812280:	10c00005 	stb	r3,0(r2)
  812284:	e0bffd17 	ldw	r2,-12(fp)
  812288:	10800044 	addi	r2,r2,1
  81228c:	e0bffd15 	stw	r2,-12(fp)
  812290:	e0bffe17 	ldw	r2,-8(fp)
  812294:	10800044 	addi	r2,r2,1
  812298:	e0bffe15 	stw	r2,-8(fp)
        size--;
  81229c:	e0bfff0b 	ldhu	r2,-4(fp)
  8122a0:	10bfffc4 	addi	r2,r2,-1
  8122a4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  8122a8:	e0bfff0b 	ldhu	r2,-4(fp)
  8122ac:	1004c03a 	cmpne	r2,r2,zero
  8122b0:	103ff01e 	bne	r2,zero,812274 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
  8122b4:	e037883a 	mov	sp,fp
  8122b8:	df000017 	ldw	fp,0(sp)
  8122bc:	dec00104 	addi	sp,sp,4
  8122c0:	f800283a 	ret

008122c4 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  8122c4:	defffb04 	addi	sp,sp,-20
  8122c8:	dfc00415 	stw	ra,16(sp)
  8122cc:	df000315 	stw	fp,12(sp)
  8122d0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  8122d4:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8122d8:	0005303a 	rdctl	r2,status
  8122dc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8122e0:	e0fffe17 	ldw	r3,-8(fp)
  8122e4:	00bfff84 	movi	r2,-2
  8122e8:	1884703a 	and	r2,r3,r2
  8122ec:	1001703a 	wrctl	status,r2
  
  return context;
  8122f0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  8122f4:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  8122f8:	d0a72a03 	ldbu	r2,-25432(gp)
  8122fc:	10803fcc 	andi	r2,r2,255
  812300:	1004c03a 	cmpne	r2,r2,zero
  812304:	10001b1e 	bne	r2,zero,812374 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  812308:	d0a71c03 	ldbu	r2,-25488(gp)
  81230c:	10803fcc 	andi	r2,r2,255
  812310:	1004c03a 	cmpne	r2,r2,zero
  812314:	1000171e 	bne	r2,zero,812374 <OS_Sched+0xb0>
            OS_SchedNew();
  812318:	08123980 	call	812398 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  81231c:	d0a71e03 	ldbu	r2,-25480(gp)
  812320:	d0e71e43 	ldbu	r3,-25479(gp)
  812324:	11003fcc 	andi	r4,r2,255
  812328:	18803fcc 	andi	r2,r3,255
  81232c:	20801126 	beq	r4,r2,812374 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  812330:	d0a71e03 	ldbu	r2,-25480(gp)
  812334:	10803fcc 	andi	r2,r2,255
  812338:	00c020b4 	movhi	r3,130
  81233c:	18da8904 	addi	r3,r3,27172
  812340:	1085883a 	add	r2,r2,r2
  812344:	1085883a 	add	r2,r2,r2
  812348:	10c5883a 	add	r2,r2,r3
  81234c:	10800017 	ldw	r2,0(r2)
  812350:	d0a72615 	stw	r2,-25448(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  812354:	d0e72617 	ldw	r3,-25448(gp)
  812358:	18800e17 	ldw	r2,56(r3)
  81235c:	10800044 	addi	r2,r2,1
  812360:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  812364:	d0a72117 	ldw	r2,-25468(gp)
  812368:	10800044 	addi	r2,r2,1
  81236c:	d0a72115 	stw	r2,-25468(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  812370:	081ae140 	call	81ae14 <OSCtxSw>
  812374:	e0bfff17 	ldw	r2,-4(fp)
  812378:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81237c:	e0bffd17 	ldw	r2,-12(fp)
  812380:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  812384:	e037883a 	mov	sp,fp
  812388:	dfc00117 	ldw	ra,4(sp)
  81238c:	df000017 	ldw	fp,0(sp)
  812390:	dec00204 	addi	sp,sp,8
  812394:	f800283a 	ret

00812398 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  812398:	defffe04 	addi	sp,sp,-8
  81239c:	df000115 	stw	fp,4(sp)
  8123a0:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  8123a4:	d0a72803 	ldbu	r2,-25440(gp)
  8123a8:	10c03fcc 	andi	r3,r2,255
  8123ac:	008020b4 	movhi	r2,130
  8123b0:	10afcb04 	addi	r2,r2,-16596
  8123b4:	10c5883a 	add	r2,r2,r3
  8123b8:	10800003 	ldbu	r2,0(r2)
  8123bc:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  8123c0:	e0bfff03 	ldbu	r2,-4(fp)
  8123c4:	100490fa 	slli	r2,r2,3
  8123c8:	1009883a 	mov	r4,r2
  8123cc:	e0ffff03 	ldbu	r3,-4(fp)
  8123d0:	d0a72844 	addi	r2,gp,-25439
  8123d4:	1885883a 	add	r2,r3,r2
  8123d8:	10800003 	ldbu	r2,0(r2)
  8123dc:	10c03fcc 	andi	r3,r2,255
  8123e0:	008020b4 	movhi	r2,130
  8123e4:	10afcb04 	addi	r2,r2,-16596
  8123e8:	10c5883a 	add	r2,r2,r3
  8123ec:	10800003 	ldbu	r2,0(r2)
  8123f0:	2085883a 	add	r2,r4,r2
  8123f4:	d0a71e05 	stb	r2,-25480(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  8123f8:	e037883a 	mov	sp,fp
  8123fc:	df000017 	ldw	fp,0(sp)
  812400:	dec00104 	addi	sp,sp,4
  812404:	f800283a 	ret

00812408 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  812408:	defffc04 	addi	sp,sp,-16
  81240c:	df000315 	stw	fp,12(sp)
  812410:	df000304 	addi	fp,sp,12
  812414:	e13ffe15 	stw	r4,-8(fp)
  812418:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  81241c:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  812420:	00000d06 	br	812458 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
  812424:	e0bfff17 	ldw	r2,-4(fp)
  812428:	10c00003 	ldbu	r3,0(r2)
  81242c:	e0bffe17 	ldw	r2,-8(fp)
  812430:	10c00005 	stb	r3,0(r2)
  812434:	e0bffe17 	ldw	r2,-8(fp)
  812438:	10800044 	addi	r2,r2,1
  81243c:	e0bffe15 	stw	r2,-8(fp)
  812440:	e0bfff17 	ldw	r2,-4(fp)
  812444:	10800044 	addi	r2,r2,1
  812448:	e0bfff15 	stw	r2,-4(fp)
        len++;
  81244c:	e0bffd03 	ldbu	r2,-12(fp)
  812450:	10800044 	addi	r2,r2,1
  812454:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  812458:	e0bfff17 	ldw	r2,-4(fp)
  81245c:	10800003 	ldbu	r2,0(r2)
  812460:	10803fcc 	andi	r2,r2,255
  812464:	1004c03a 	cmpne	r2,r2,zero
  812468:	103fee1e 	bne	r2,zero,812424 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  81246c:	e0bffe17 	ldw	r2,-8(fp)
  812470:	10000005 	stb	zero,0(r2)
    return (len);
  812474:	e0bffd03 	ldbu	r2,-12(fp)
}
  812478:	e037883a 	mov	sp,fp
  81247c:	df000017 	ldw	fp,0(sp)
  812480:	dec00104 	addi	sp,sp,4
  812484:	f800283a 	ret

00812488 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  812488:	defffd04 	addi	sp,sp,-12
  81248c:	df000215 	stw	fp,8(sp)
  812490:	df000204 	addi	fp,sp,8
  812494:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  812498:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  81249c:	00000606 	br	8124b8 <OS_StrLen+0x30>
        psrc++;
  8124a0:	e0bfff17 	ldw	r2,-4(fp)
  8124a4:	10800044 	addi	r2,r2,1
  8124a8:	e0bfff15 	stw	r2,-4(fp)
        len++;
  8124ac:	e0bffe03 	ldbu	r2,-8(fp)
  8124b0:	10800044 	addi	r2,r2,1
  8124b4:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  8124b8:	e0bfff17 	ldw	r2,-4(fp)
  8124bc:	10800003 	ldbu	r2,0(r2)
  8124c0:	10803fcc 	andi	r2,r2,255
  8124c4:	1004c03a 	cmpne	r2,r2,zero
  8124c8:	103ff51e 	bne	r2,zero,8124a0 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
  8124cc:	e0bffe03 	ldbu	r2,-8(fp)
}
  8124d0:	e037883a 	mov	sp,fp
  8124d4:	df000017 	ldw	fp,0(sp)
  8124d8:	dec00104 	addi	sp,sp,4
  8124dc:	f800283a 	ret

008124e0 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  8124e0:	defffa04 	addi	sp,sp,-24
  8124e4:	dfc00515 	stw	ra,20(sp)
  8124e8:	df000415 	stw	fp,16(sp)
  8124ec:	df000404 	addi	fp,sp,16
  8124f0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8124f4:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8124f8:	0005303a 	rdctl	r2,status
  8124fc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812500:	e0fffd17 	ldw	r3,-12(fp)
  812504:	00bfff84 	movi	r2,-2
  812508:	1884703a 	and	r2,r3,r2
  81250c:	1001703a 	wrctl	status,r2
  
  return context;
  812510:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  812514:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
  812518:	d0a71d17 	ldw	r2,-25484(gp)
  81251c:	10800044 	addi	r2,r2,1
  812520:	d0a71d15 	stw	r2,-25484(gp)
  812524:	e0bffe17 	ldw	r2,-8(fp)
  812528:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81252c:	e0bffc17 	ldw	r2,-16(fp)
  812530:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  812534:	081b2c00 	call	81b2c0 <OSTaskIdleHook>
    }
  812538:	003fef06 	br	8124f8 <OS_TaskIdle+0x18>

0081253c <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  81253c:	defffa04 	addi	sp,sp,-24
  812540:	dfc00515 	stw	ra,20(sp)
  812544:	df000415 	stw	fp,16(sp)
  812548:	df000404 	addi	fp,sp,16
  81254c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812550:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  812554:	00000206 	br	812560 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  812558:	01003204 	movi	r4,200
  81255c:	08185bc0 	call	8185bc <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  812560:	d0a72e03 	ldbu	r2,-25416(gp)
  812564:	10803fcc 	andi	r2,r2,255
  812568:	1005003a 	cmpeq	r2,r2,zero
  81256c:	103ffa1e 	bne	r2,zero,812558 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  812570:	d1272217 	ldw	r4,-25464(gp)
  812574:	01401904 	movi	r5,100
  812578:	0806c2c0 	call	806c2c <__udivsi3>
  81257c:	d0a72215 	stw	r2,-25464(gp)
    if (OSIdleCtrMax == 0L) {
  812580:	d0a72217 	ldw	r2,-25464(gp)
  812584:	1004c03a 	cmpne	r2,r2,zero
  812588:	1000031e 	bne	r2,zero,812598 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
  81258c:	d0272405 	stb	zero,-25456(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  812590:	01003fc4 	movi	r4,255
  812594:	08181d00 	call	8181d0 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812598:	0005303a 	rdctl	r2,status
  81259c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8125a0:	e0fffd17 	ldw	r3,-12(fp)
  8125a4:	00bfff84 	movi	r2,-2
  8125a8:	1884703a 	and	r2,r3,r2
  8125ac:	1001703a 	wrctl	status,r2
  
  return context;
  8125b0:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  8125b4:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  8125b8:	d0a71d17 	ldw	r2,-25484(gp)
  8125bc:	d0a72f15 	stw	r2,-25412(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  8125c0:	d0271d15 	stw	zero,-25484(gp)
  8125c4:	e0bffe17 	ldw	r2,-8(fp)
  8125c8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8125cc:	e0bffc17 	ldw	r2,-16(fp)
  8125d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  8125d4:	d1272f17 	ldw	r4,-25412(gp)
  8125d8:	d1672217 	ldw	r5,-25464(gp)
  8125dc:	0806c2c0 	call	806c2c <__udivsi3>
  8125e0:	1007883a 	mov	r3,r2
  8125e4:	00801904 	movi	r2,100
  8125e8:	10c5c83a 	sub	r2,r2,r3
  8125ec:	d0a72405 	stb	r2,-25456(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  8125f0:	081b2500 	call	81b250 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  8125f4:	08126040 	call	812604 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  8125f8:	01001904 	movi	r4,100
  8125fc:	08185bc0 	call	8185bc <OSTimeDly>
    }
  812600:	003fe506 	br	812598 <OS_TaskStat+0x5c>

00812604 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  812604:	defffa04 	addi	sp,sp,-24
  812608:	dfc00515 	stw	ra,20(sp)
  81260c:	df000415 	stw	fp,16(sp)
  812610:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  812614:	e03ffc05 	stb	zero,-16(fp)
  812618:	00002406 	br	8126ac <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  81261c:	e13ffc03 	ldbu	r4,-16(fp)
  812620:	e17ffe04 	addi	r5,fp,-8
  812624:	0817fd40 	call	817fd4 <OSTaskStkChk>
  812628:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  81262c:	e0bffc43 	ldbu	r2,-15(fp)
  812630:	1004c03a 	cmpne	r2,r2,zero
  812634:	10001a1e 	bne	r2,zero,8126a0 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  812638:	e0bffc03 	ldbu	r2,-16(fp)
  81263c:	00c020b4 	movhi	r3,130
  812640:	18da8904 	addi	r3,r3,27172
  812644:	1085883a 	add	r2,r2,r2
  812648:	1085883a 	add	r2,r2,r2
  81264c:	10c5883a 	add	r2,r2,r3
  812650:	10800017 	ldw	r2,0(r2)
  812654:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  812658:	e0bffd17 	ldw	r2,-12(fp)
  81265c:	1005003a 	cmpeq	r2,r2,zero
  812660:	10000f1e 	bne	r2,zero,8126a0 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  812664:	e0bffd17 	ldw	r2,-12(fp)
  812668:	10800060 	cmpeqi	r2,r2,1
  81266c:	10000c1e 	bne	r2,zero,8126a0 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  812670:	e0bffd17 	ldw	r2,-12(fp)
  812674:	10c00217 	ldw	r3,8(r2)
  812678:	e0bffd17 	ldw	r2,-12(fp)
  81267c:	10800317 	ldw	r2,12(r2)
  812680:	1085883a 	add	r2,r2,r2
  812684:	1085883a 	add	r2,r2,r2
  812688:	1887883a 	add	r3,r3,r2
  81268c:	e0bffd17 	ldw	r2,-12(fp)
  812690:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  812694:	e0ffff17 	ldw	r3,-4(fp)
  812698:	e0bffd17 	ldw	r2,-12(fp)
  81269c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  8126a0:	e0bffc03 	ldbu	r2,-16(fp)
  8126a4:	10800044 	addi	r2,r2,1
  8126a8:	e0bffc05 	stb	r2,-16(fp)
  8126ac:	e0bffc03 	ldbu	r2,-16(fp)
  8126b0:	10800570 	cmpltui	r2,r2,21
  8126b4:	103fd91e 	bne	r2,zero,81261c <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
  8126b8:	e037883a 	mov	sp,fp
  8126bc:	dfc00117 	ldw	ra,4(sp)
  8126c0:	df000017 	ldw	fp,0(sp)
  8126c4:	dec00204 	addi	sp,sp,8
  8126c8:	f800283a 	ret

008126cc <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  8126cc:	defff104 	addi	sp,sp,-60
  8126d0:	dfc00e15 	stw	ra,56(sp)
  8126d4:	df000d15 	stw	fp,52(sp)
  8126d8:	df000d04 	addi	fp,sp,52
  8126dc:	e17ffb15 	stw	r5,-20(fp)
  8126e0:	e1bffc15 	stw	r6,-16(fp)
  8126e4:	e0800417 	ldw	r2,16(fp)
  8126e8:	e13ffa05 	stb	r4,-24(fp)
  8126ec:	e1fffd0d 	sth	r7,-12(fp)
  8126f0:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8126f4:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8126f8:	0005303a 	rdctl	r2,status
  8126fc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812700:	e0fff717 	ldw	r3,-36(fp)
  812704:	00bfff84 	movi	r2,-2
  812708:	1884703a 	and	r2,r3,r2
  81270c:	1001703a 	wrctl	status,r2
  
  return context;
  812710:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
  812714:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  812718:	d0a72317 	ldw	r2,-25460(gp)
  81271c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
  812720:	e0bff917 	ldw	r2,-28(fp)
  812724:	1005003a 	cmpeq	r2,r2,zero
  812728:	1000941e 	bne	r2,zero,81297c <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  81272c:	e0bff917 	ldw	r2,-28(fp)
  812730:	10800517 	ldw	r2,20(r2)
  812734:	d0a72315 	stw	r2,-25460(gp)
  812738:	e0bff817 	ldw	r2,-32(fp)
  81273c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812740:	e0bff617 	ldw	r2,-40(fp)
  812744:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  812748:	e0fff917 	ldw	r3,-28(fp)
  81274c:	e0bffb17 	ldw	r2,-20(fp)
  812750:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  812754:	e0fff917 	ldw	r3,-28(fp)
  812758:	e0bffa03 	ldbu	r2,-24(fp)
  81275c:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  812760:	e0bff917 	ldw	r2,-28(fp)
  812764:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  812768:	e0bff917 	ldw	r2,-28(fp)
  81276c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  812770:	e0bff917 	ldw	r2,-28(fp)
  812774:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  812778:	e0fff917 	ldw	r3,-28(fp)
  81277c:	e0800317 	ldw	r2,12(fp)
  812780:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  812784:	e0fff917 	ldw	r3,-28(fp)
  812788:	e0800217 	ldw	r2,8(fp)
  81278c:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  812790:	e0fff917 	ldw	r3,-28(fp)
  812794:	e0bffc17 	ldw	r2,-16(fp)
  812798:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  81279c:	e0fff917 	ldw	r3,-28(fp)
  8127a0:	e0bffe0b 	ldhu	r2,-8(fp)
  8127a4:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  8127a8:	e0fff917 	ldw	r3,-28(fp)
  8127ac:	e0bffd0b 	ldhu	r2,-12(fp)
  8127b0:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  8127b4:	e0bff917 	ldw	r2,-28(fp)
  8127b8:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  8127bc:	e0bffa03 	ldbu	r2,-24(fp)
  8127c0:	1004d0fa 	srli	r2,r2,3
  8127c4:	1007883a 	mov	r3,r2
  8127c8:	e0bff917 	ldw	r2,-28(fp)
  8127cc:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  8127d0:	e0bffa03 	ldbu	r2,-24(fp)
  8127d4:	108001cc 	andi	r2,r2,7
  8127d8:	1007883a 	mov	r3,r2
  8127dc:	e0bff917 	ldw	r2,-28(fp)
  8127e0:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  8127e4:	e0bff917 	ldw	r2,-28(fp)
  8127e8:	10800d03 	ldbu	r2,52(r2)
  8127ec:	10c03fcc 	andi	r3,r2,255
  8127f0:	00800044 	movi	r2,1
  8127f4:	10c4983a 	sll	r2,r2,r3
  8127f8:	1007883a 	mov	r3,r2
  8127fc:	e0bff917 	ldw	r2,-28(fp)
  812800:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  812804:	e0bff917 	ldw	r2,-28(fp)
  812808:	10800cc3 	ldbu	r2,51(r2)
  81280c:	10c03fcc 	andi	r3,r2,255
  812810:	00800044 	movi	r2,1
  812814:	10c4983a 	sll	r2,r2,r3
  812818:	1007883a 	mov	r3,r2
  81281c:	e0bff917 	ldw	r2,-28(fp)
  812820:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  812824:	e0bff917 	ldw	r2,-28(fp)
  812828:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  81282c:	e0bff917 	ldw	r2,-28(fp)
  812830:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  812834:	e0bff917 	ldw	r2,-28(fp)
  812838:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  81283c:	e0bff917 	ldw	r2,-28(fp)
  812840:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  812844:	e0bff917 	ldw	r2,-28(fp)
  812848:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  81284c:	e0bff917 	ldw	r2,-28(fp)
  812850:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  812854:	e0bff917 	ldw	r2,-28(fp)
  812858:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  81285c:	e0bff917 	ldw	r2,-28(fp)
  812860:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  812864:	e0bff917 	ldw	r2,-28(fp)
  812868:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  81286c:	e0fff917 	ldw	r3,-28(fp)
  812870:	00800fc4 	movi	r2,63
  812874:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  812878:	e0bff917 	ldw	r2,-28(fp)
  81287c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  812880:	e13ff917 	ldw	r4,-28(fp)
  812884:	081b2dc0 	call	81b2dc <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  812888:	e13ff917 	ldw	r4,-28(fp)
  81288c:	081b1f40 	call	81b1f4 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812890:	0005303a 	rdctl	r2,status
  812894:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812898:	e0fff517 	ldw	r3,-44(fp)
  81289c:	00bfff84 	movi	r2,-2
  8128a0:	1884703a 	and	r2,r3,r2
  8128a4:	1001703a 	wrctl	status,r2
  
  return context;
  8128a8:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  8128ac:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
  8128b0:	e0bffa03 	ldbu	r2,-24(fp)
  8128b4:	00c020b4 	movhi	r3,130
  8128b8:	18da8904 	addi	r3,r3,27172
  8128bc:	1085883a 	add	r2,r2,r2
  8128c0:	1085883a 	add	r2,r2,r2
  8128c4:	10c7883a 	add	r3,r2,r3
  8128c8:	e0bff917 	ldw	r2,-28(fp)
  8128cc:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  8128d0:	d0e71f17 	ldw	r3,-25476(gp)
  8128d4:	e0bff917 	ldw	r2,-28(fp)
  8128d8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  8128dc:	e0bff917 	ldw	r2,-28(fp)
  8128e0:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  8128e4:	d0a71f17 	ldw	r2,-25476(gp)
  8128e8:	1005003a 	cmpeq	r2,r2,zero
  8128ec:	1000031e 	bne	r2,zero,8128fc <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
  8128f0:	d0e71f17 	ldw	r3,-25476(gp)
  8128f4:	e0bff917 	ldw	r2,-28(fp)
  8128f8:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
  8128fc:	e0bff917 	ldw	r2,-28(fp)
  812900:	d0a71f15 	stw	r2,-25476(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  812904:	e0bff917 	ldw	r2,-28(fp)
  812908:	10c00d83 	ldbu	r3,54(r2)
  81290c:	d0a72803 	ldbu	r2,-25440(gp)
  812910:	1884b03a 	or	r2,r3,r2
  812914:	d0a72805 	stb	r2,-25440(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  812918:	e0bff917 	ldw	r2,-28(fp)
  81291c:	10800d03 	ldbu	r2,52(r2)
  812920:	11003fcc 	andi	r4,r2,255
  812924:	e0bff917 	ldw	r2,-28(fp)
  812928:	10800d03 	ldbu	r2,52(r2)
  81292c:	10c03fcc 	andi	r3,r2,255
  812930:	d0a72844 	addi	r2,gp,-25439
  812934:	1885883a 	add	r2,r3,r2
  812938:	10c00003 	ldbu	r3,0(r2)
  81293c:	e0bff917 	ldw	r2,-28(fp)
  812940:	10800d43 	ldbu	r2,53(r2)
  812944:	1884b03a 	or	r2,r3,r2
  812948:	1007883a 	mov	r3,r2
  81294c:	d0a72844 	addi	r2,gp,-25439
  812950:	2085883a 	add	r2,r4,r2
  812954:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  812958:	d0a72443 	ldbu	r2,-25455(gp)
  81295c:	10800044 	addi	r2,r2,1
  812960:	d0a72445 	stb	r2,-25455(gp)
  812964:	e0bff817 	ldw	r2,-32(fp)
  812968:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81296c:	e0bff417 	ldw	r2,-48(fp)
  812970:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  812974:	e03fff15 	stw	zero,-4(fp)
  812978:	00000606 	br	812994 <OS_TCBInit+0x2c8>
  81297c:	e0bff817 	ldw	r2,-32(fp)
  812980:	e0bff315 	stw	r2,-52(fp)
  812984:	e0bff317 	ldw	r2,-52(fp)
  812988:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  81298c:	00801084 	movi	r2,66
  812990:	e0bfff15 	stw	r2,-4(fp)
  812994:	e0bfff17 	ldw	r2,-4(fp)
}
  812998:	e037883a 	mov	sp,fp
  81299c:	dfc00117 	ldw	ra,4(sp)
  8129a0:	df000017 	ldw	fp,0(sp)
  8129a4:	dec00204 	addi	sp,sp,8
  8129a8:	f800283a 	ret

008129ac <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  8129ac:	defffe04 	addi	sp,sp,-8
  8129b0:	df000115 	stw	fp,4(sp)
  8129b4:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  8129b8:	d0a01004 	addi	r2,gp,-32704
  8129bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  8129c0:	d0a01104 	addi	r2,gp,-32700
  8129c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  8129c8:	d0a01284 	addi	r2,gp,-32694
  8129cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  8129d0:	d0a01304 	addi	r2,gp,-32692
  8129d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  8129d8:	d0a01204 	addi	r2,gp,-32696
  8129dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  8129e0:	d0a01384 	addi	r2,gp,-32690
  8129e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  8129e8:	d0a01404 	addi	r2,gp,-32688
  8129ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  8129f0:	d0a01484 	addi	r2,gp,-32686
  8129f4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  8129f8:	d0a01504 	addi	r2,gp,-32684
  8129fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  812a00:	d0a01584 	addi	r2,gp,-32682
  812a04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  812a08:	d0a01604 	addi	r2,gp,-32680
  812a0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  812a10:	d0a01684 	addi	r2,gp,-32678
  812a14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  812a18:	d0a01704 	addi	r2,gp,-32676
  812a1c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  812a20:	d0a01784 	addi	r2,gp,-32674
  812a24:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  812a28:	d0a01804 	addi	r2,gp,-32672
  812a2c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  812a30:	d0a01884 	addi	r2,gp,-32670
  812a34:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  812a38:	d0a01904 	addi	r2,gp,-32668
  812a3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  812a40:	d0a01984 	addi	r2,gp,-32666
  812a44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  812a48:	d0a01a04 	addi	r2,gp,-32664
  812a4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  812a50:	d0a01a84 	addi	r2,gp,-32662
  812a54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  812a58:	d0a01b04 	addi	r2,gp,-32660
  812a5c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  812a60:	d0a01b84 	addi	r2,gp,-32658
  812a64:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  812a68:	d0a01c04 	addi	r2,gp,-32656
  812a6c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  812a70:	d0a01c84 	addi	r2,gp,-32654
  812a74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  812a78:	d0a01d04 	addi	r2,gp,-32652
  812a7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  812a80:	d0a01d84 	addi	r2,gp,-32650
  812a84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  812a88:	d0a01e04 	addi	r2,gp,-32648
  812a8c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  812a90:	d0a01e84 	addi	r2,gp,-32646
  812a94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  812a98:	d0a01f04 	addi	r2,gp,-32644
  812a9c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  812aa0:	d0a01f84 	addi	r2,gp,-32642
  812aa4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  812aa8:	d0a02004 	addi	r2,gp,-32640
  812aac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  812ab0:	d0a02084 	addi	r2,gp,-32638
  812ab4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  812ab8:	d0a02104 	addi	r2,gp,-32636
  812abc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  812ac0:	d0a02184 	addi	r2,gp,-32634
  812ac4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  812ac8:	d0a02204 	addi	r2,gp,-32632
  812acc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  812ad0:	d0a02284 	addi	r2,gp,-32630
  812ad4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  812ad8:	d0a02304 	addi	r2,gp,-32628
  812adc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  812ae0:	d0a02384 	addi	r2,gp,-32626
  812ae4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  812ae8:	d0a02404 	addi	r2,gp,-32624
  812aec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  812af0:	d0a02484 	addi	r2,gp,-32622
  812af4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  812af8:	d0a02504 	addi	r2,gp,-32620
  812afc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  812b00:	d0a02584 	addi	r2,gp,-32618
  812b04:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  812b08:	d0a02604 	addi	r2,gp,-32616
  812b0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  812b10:	d0a02684 	addi	r2,gp,-32614
  812b14:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  812b18:	d0a02704 	addi	r2,gp,-32612
  812b1c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  812b20:	d0a02c04 	addi	r2,gp,-32592
  812b24:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  812b28:	e037883a 	mov	sp,fp
  812b2c:	df000017 	ldw	fp,0(sp)
  812b30:	dec00104 	addi	sp,sp,4
  812b34:	f800283a 	ret

00812b38 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  812b38:	defff104 	addi	sp,sp,-60
  812b3c:	df000e15 	stw	fp,56(sp)
  812b40:	df000e04 	addi	fp,sp,56
  812b44:	e13ffa15 	stw	r4,-24(fp)
  812b48:	e1fffd15 	stw	r7,-12(fp)
  812b4c:	e17ffb0d 	sth	r5,-20(fp)
  812b50:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  812b54:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  812b58:	e0bffd17 	ldw	r2,-12(fp)
  812b5c:	1004c03a 	cmpne	r2,r2,zero
  812b60:	1000021e 	bne	r2,zero,812b6c <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
  812b64:	e03fff15 	stw	zero,-4(fp)
  812b68:	0000bb06 	br	812e58 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  812b6c:	e0bffa17 	ldw	r2,-24(fp)
  812b70:	1004c03a 	cmpne	r2,r2,zero
  812b74:	1000051e 	bne	r2,zero,812b8c <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  812b78:	e0fffd17 	ldw	r3,-12(fp)
  812b7c:	00801b84 	movi	r2,110
  812b80:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  812b84:	e03fff15 	stw	zero,-4(fp)
  812b88:	0000b306 	br	812e58 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  812b8c:	e0bffa17 	ldw	r2,-24(fp)
  812b90:	10800003 	ldbu	r2,0(r2)
  812b94:	10803fcc 	andi	r2,r2,255
  812b98:	10800160 	cmpeqi	r2,r2,5
  812b9c:	1000051e 	bne	r2,zero,812bb4 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  812ba0:	e0fffd17 	ldw	r3,-12(fp)
  812ba4:	00800044 	movi	r2,1
  812ba8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  812bac:	e03fff15 	stw	zero,-4(fp)
  812bb0:	0000a906 	br	812e58 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  812bb4:	e0fffc03 	ldbu	r3,-16(fp)
  812bb8:	00bfe004 	movi	r2,-128
  812bbc:	1884703a 	and	r2,r3,r2
  812bc0:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  812bc4:	e0bff943 	ldbu	r2,-27(fp)
  812bc8:	1005003a 	cmpeq	r2,r2,zero
  812bcc:	1000061e 	bne	r2,zero,812be8 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
  812bd0:	e0bffc03 	ldbu	r2,-16(fp)
  812bd4:	10801fcc 	andi	r2,r2,127
  812bd8:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
  812bdc:	00800044 	movi	r2,1
  812be0:	e0bff905 	stb	r2,-28(fp)
  812be4:	00000106 	br	812bec <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
  812be8:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  812bec:	e0bffd17 	ldw	r2,-12(fp)
  812bf0:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812bf4:	0005303a 	rdctl	r2,status
  812bf8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812bfc:	e0fff717 	ldw	r3,-36(fp)
  812c00:	00bfff84 	movi	r2,-2
  812c04:	1884703a 	and	r2,r3,r2
  812c08:	1001703a 	wrctl	status,r2
  
  return context;
  812c0c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  812c10:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
  812c14:	e0bffc03 	ldbu	r2,-16(fp)
  812c18:	e0bffe15 	stw	r2,-8(fp)
  812c1c:	e0fffe17 	ldw	r3,-8(fp)
  812c20:	18800060 	cmpeqi	r2,r3,1
  812c24:	1000651e 	bne	r2,zero,812dbc <OSFlagAccept+0x284>
  812c28:	e0fffe17 	ldw	r3,-8(fp)
  812c2c:	18800088 	cmpgei	r2,r3,2
  812c30:	1000041e 	bne	r2,zero,812c44 <OSFlagAccept+0x10c>
  812c34:	e0fffe17 	ldw	r3,-8(fp)
  812c38:	1805003a 	cmpeq	r2,r3,zero
  812c3c:	1000421e 	bne	r2,zero,812d48 <OSFlagAccept+0x210>
  812c40:	00007b06 	br	812e30 <OSFlagAccept+0x2f8>
  812c44:	e0fffe17 	ldw	r3,-8(fp)
  812c48:	188000a0 	cmpeqi	r2,r3,2
  812c4c:	1000041e 	bne	r2,zero,812c60 <OSFlagAccept+0x128>
  812c50:	e0fffe17 	ldw	r3,-8(fp)
  812c54:	188000e0 	cmpeqi	r2,r3,3
  812c58:	10001e1e 	bne	r2,zero,812cd4 <OSFlagAccept+0x19c>
  812c5c:	00007406 	br	812e30 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  812c60:	e0bffa17 	ldw	r2,-24(fp)
  812c64:	10c0020b 	ldhu	r3,8(r2)
  812c68:	e0bffb0b 	ldhu	r2,-20(fp)
  812c6c:	1884703a 	and	r2,r3,r2
  812c70:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  812c74:	e0fff98b 	ldhu	r3,-26(fp)
  812c78:	e0bffb0b 	ldhu	r2,-20(fp)
  812c7c:	18800d1e 	bne	r3,r2,812cb4 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  812c80:	e0bff903 	ldbu	r2,-28(fp)
  812c84:	10800058 	cmpnei	r2,r2,1
  812c88:	10000d1e 	bne	r2,zero,812cc0 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  812c8c:	e0bffa17 	ldw	r2,-24(fp)
  812c90:	1080020b 	ldhu	r2,8(r2)
  812c94:	1007883a 	mov	r3,r2
  812c98:	e0bff98b 	ldhu	r2,-26(fp)
  812c9c:	0084303a 	nor	r2,zero,r2
  812ca0:	1884703a 	and	r2,r3,r2
  812ca4:	1007883a 	mov	r3,r2
  812ca8:	e0bffa17 	ldw	r2,-24(fp)
  812cac:	10c0020d 	sth	r3,8(r2)
  812cb0:	00000306 	br	812cc0 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  812cb4:	e0fffd17 	ldw	r3,-12(fp)
  812cb8:	00801c04 	movi	r2,112
  812cbc:	18800005 	stb	r2,0(r3)
  812cc0:	e0bff817 	ldw	r2,-32(fp)
  812cc4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812cc8:	e0bff617 	ldw	r2,-40(fp)
  812ccc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  812cd0:	00005f06 	br	812e50 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  812cd4:	e0bffa17 	ldw	r2,-24(fp)
  812cd8:	10c0020b 	ldhu	r3,8(r2)
  812cdc:	e0bffb0b 	ldhu	r2,-20(fp)
  812ce0:	1884703a 	and	r2,r3,r2
  812ce4:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  812ce8:	e0bff98b 	ldhu	r2,-26(fp)
  812cec:	1005003a 	cmpeq	r2,r2,zero
  812cf0:	10000d1e 	bne	r2,zero,812d28 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  812cf4:	e0bff903 	ldbu	r2,-28(fp)
  812cf8:	10800058 	cmpnei	r2,r2,1
  812cfc:	10000d1e 	bne	r2,zero,812d34 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  812d00:	e0bffa17 	ldw	r2,-24(fp)
  812d04:	1080020b 	ldhu	r2,8(r2)
  812d08:	1007883a 	mov	r3,r2
  812d0c:	e0bff98b 	ldhu	r2,-26(fp)
  812d10:	0084303a 	nor	r2,zero,r2
  812d14:	1884703a 	and	r2,r3,r2
  812d18:	1007883a 	mov	r3,r2
  812d1c:	e0bffa17 	ldw	r2,-24(fp)
  812d20:	10c0020d 	sth	r3,8(r2)
  812d24:	00000306 	br	812d34 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  812d28:	e0fffd17 	ldw	r3,-12(fp)
  812d2c:	00801c04 	movi	r2,112
  812d30:	18800005 	stb	r2,0(r3)
  812d34:	e0bff817 	ldw	r2,-32(fp)
  812d38:	e0bff515 	stw	r2,-44(fp)
  812d3c:	e0bff517 	ldw	r2,-44(fp)
  812d40:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  812d44:	00004206 	br	812e50 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  812d48:	e0bffa17 	ldw	r2,-24(fp)
  812d4c:	1080020b 	ldhu	r2,8(r2)
  812d50:	0084303a 	nor	r2,zero,r2
  812d54:	1007883a 	mov	r3,r2
  812d58:	e0bffb0b 	ldhu	r2,-20(fp)
  812d5c:	1884703a 	and	r2,r3,r2
  812d60:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  812d64:	e0fff98b 	ldhu	r3,-26(fp)
  812d68:	e0bffb0b 	ldhu	r2,-20(fp)
  812d6c:	18800b1e 	bne	r3,r2,812d9c <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  812d70:	e0bff903 	ldbu	r2,-28(fp)
  812d74:	10800058 	cmpnei	r2,r2,1
  812d78:	10000b1e 	bne	r2,zero,812da8 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  812d7c:	e0bffa17 	ldw	r2,-24(fp)
  812d80:	10c0020b 	ldhu	r3,8(r2)
  812d84:	e0bff98b 	ldhu	r2,-26(fp)
  812d88:	1884b03a 	or	r2,r3,r2
  812d8c:	1007883a 	mov	r3,r2
  812d90:	e0bffa17 	ldw	r2,-24(fp)
  812d94:	10c0020d 	sth	r3,8(r2)
  812d98:	00000306 	br	812da8 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  812d9c:	e0fffd17 	ldw	r3,-12(fp)
  812da0:	00801c04 	movi	r2,112
  812da4:	18800005 	stb	r2,0(r3)
  812da8:	e0bff817 	ldw	r2,-32(fp)
  812dac:	e0bff415 	stw	r2,-48(fp)
  812db0:	e0bff417 	ldw	r2,-48(fp)
  812db4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  812db8:	00002506 	br	812e50 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  812dbc:	e0bffa17 	ldw	r2,-24(fp)
  812dc0:	1080020b 	ldhu	r2,8(r2)
  812dc4:	0084303a 	nor	r2,zero,r2
  812dc8:	1007883a 	mov	r3,r2
  812dcc:	e0bffb0b 	ldhu	r2,-20(fp)
  812dd0:	1884703a 	and	r2,r3,r2
  812dd4:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  812dd8:	e0bff98b 	ldhu	r2,-26(fp)
  812ddc:	1005003a 	cmpeq	r2,r2,zero
  812de0:	10000b1e 	bne	r2,zero,812e10 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  812de4:	e0bff903 	ldbu	r2,-28(fp)
  812de8:	10800058 	cmpnei	r2,r2,1
  812dec:	10000b1e 	bne	r2,zero,812e1c <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  812df0:	e0bffa17 	ldw	r2,-24(fp)
  812df4:	10c0020b 	ldhu	r3,8(r2)
  812df8:	e0bff98b 	ldhu	r2,-26(fp)
  812dfc:	1884b03a 	or	r2,r3,r2
  812e00:	1007883a 	mov	r3,r2
  812e04:	e0bffa17 	ldw	r2,-24(fp)
  812e08:	10c0020d 	sth	r3,8(r2)
  812e0c:	00000306 	br	812e1c <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  812e10:	e0fffd17 	ldw	r3,-12(fp)
  812e14:	00801c04 	movi	r2,112
  812e18:	18800005 	stb	r2,0(r3)
  812e1c:	e0bff817 	ldw	r2,-32(fp)
  812e20:	e0bff315 	stw	r2,-52(fp)
  812e24:	e0bff317 	ldw	r2,-52(fp)
  812e28:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  812e2c:	00000806 	br	812e50 <OSFlagAccept+0x318>
  812e30:	e0bff817 	ldw	r2,-32(fp)
  812e34:	e0bff215 	stw	r2,-56(fp)
  812e38:	e0bff217 	ldw	r2,-56(fp)
  812e3c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  812e40:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  812e44:	e0fffd17 	ldw	r3,-12(fp)
  812e48:	00801bc4 	movi	r2,111
  812e4c:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
  812e50:	e0bff98b 	ldhu	r2,-26(fp)
  812e54:	e0bfff15 	stw	r2,-4(fp)
  812e58:	e0bfff17 	ldw	r2,-4(fp)
}
  812e5c:	e037883a 	mov	sp,fp
  812e60:	df000017 	ldw	fp,0(sp)
  812e64:	dec00104 	addi	sp,sp,4
  812e68:	f800283a 	ret

00812e6c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  812e6c:	defff704 	addi	sp,sp,-36
  812e70:	df000815 	stw	fp,32(sp)
  812e74:	df000804 	addi	fp,sp,32
  812e78:	e17ffe15 	stw	r5,-8(fp)
  812e7c:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  812e80:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  812e84:	e0bffe17 	ldw	r2,-8(fp)
  812e88:	1004c03a 	cmpne	r2,r2,zero
  812e8c:	1000021e 	bne	r2,zero,812e98 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  812e90:	e03fff15 	stw	zero,-4(fp)
  812e94:	00003f06 	br	812f94 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  812e98:	008020b4 	movhi	r2,130
  812e9c:	10be0204 	addi	r2,r2,-2040
  812ea0:	10800003 	ldbu	r2,0(r2)
  812ea4:	10803fcc 	andi	r2,r2,255
  812ea8:	1005003a 	cmpeq	r2,r2,zero
  812eac:	1000051e 	bne	r2,zero,812ec4 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  812eb0:	e0fffe17 	ldw	r3,-8(fp)
  812eb4:	00800404 	movi	r2,16
  812eb8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
  812ebc:	e03fff15 	stw	zero,-4(fp)
  812ec0:	00003406 	br	812f94 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812ec4:	0005303a 	rdctl	r2,status
  812ec8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812ecc:	e0fffa17 	ldw	r3,-24(fp)
  812ed0:	00bfff84 	movi	r2,-2
  812ed4:	1884703a 	and	r2,r3,r2
  812ed8:	1001703a 	wrctl	status,r2
  
  return context;
  812edc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  812ee0:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  812ee4:	008020b4 	movhi	r2,130
  812ee8:	10be0504 	addi	r2,r2,-2028
  812eec:	10800017 	ldw	r2,0(r2)
  812ef0:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  812ef4:	e0bffc17 	ldw	r2,-16(fp)
  812ef8:	1005003a 	cmpeq	r2,r2,zero
  812efc:	10001c1e 	bne	r2,zero,812f70 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  812f00:	008020b4 	movhi	r2,130
  812f04:	10be0504 	addi	r2,r2,-2028
  812f08:	10800017 	ldw	r2,0(r2)
  812f0c:	10800117 	ldw	r2,4(r2)
  812f10:	1007883a 	mov	r3,r2
  812f14:	008020b4 	movhi	r2,130
  812f18:	10be0504 	addi	r2,r2,-2028
  812f1c:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  812f20:	e0fffc17 	ldw	r3,-16(fp)
  812f24:	00800144 	movi	r2,5
  812f28:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  812f2c:	e0fffc17 	ldw	r3,-16(fp)
  812f30:	e0bffd0b 	ldhu	r2,-12(fp)
  812f34:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  812f38:	e0bffc17 	ldw	r2,-16(fp)
  812f3c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  812f40:	e0fffc17 	ldw	r3,-16(fp)
  812f44:	00800fc4 	movi	r2,63
  812f48:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  812f4c:	e0bffc17 	ldw	r2,-16(fp)
  812f50:	100002c5 	stb	zero,11(r2)
  812f54:	e0bffb17 	ldw	r2,-20(fp)
  812f58:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812f5c:	e0bff917 	ldw	r2,-28(fp)
  812f60:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  812f64:	e0bffe17 	ldw	r2,-8(fp)
  812f68:	10000005 	stb	zero,0(r2)
  812f6c:	00000706 	br	812f8c <OSFlagCreate+0x120>
  812f70:	e0bffb17 	ldw	r2,-20(fp)
  812f74:	e0bff815 	stw	r2,-32(fp)
  812f78:	e0bff817 	ldw	r2,-32(fp)
  812f7c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  812f80:	e0fffe17 	ldw	r3,-8(fp)
  812f84:	00801c84 	movi	r2,114
  812f88:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  812f8c:	e0bffc17 	ldw	r2,-16(fp)
  812f90:	e0bfff15 	stw	r2,-4(fp)
  812f94:	e0bfff17 	ldw	r2,-4(fp)
}
  812f98:	e037883a 	mov	sp,fp
  812f9c:	df000017 	ldw	fp,0(sp)
  812fa0:	dec00104 	addi	sp,sp,4
  812fa4:	f800283a 	ret

00812fa8 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  812fa8:	defff004 	addi	sp,sp,-64
  812fac:	dfc00f15 	stw	ra,60(sp)
  812fb0:	df000e15 	stw	fp,56(sp)
  812fb4:	df000e04 	addi	fp,sp,56
  812fb8:	e13ffb15 	stw	r4,-20(fp)
  812fbc:	e1bffd15 	stw	r6,-12(fp)
  812fc0:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  812fc4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  812fc8:	e0bffd17 	ldw	r2,-12(fp)
  812fcc:	1004c03a 	cmpne	r2,r2,zero
  812fd0:	1000031e 	bne	r2,zero,812fe0 <OSFlagDel+0x38>
        return (pgrp);
  812fd4:	e0bffb17 	ldw	r2,-20(fp)
  812fd8:	e0bfff15 	stw	r2,-4(fp)
  812fdc:	00009606 	br	813238 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  812fe0:	e0bffb17 	ldw	r2,-20(fp)
  812fe4:	1004c03a 	cmpne	r2,r2,zero
  812fe8:	1000061e 	bne	r2,zero,813004 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  812fec:	e0fffd17 	ldw	r3,-12(fp)
  812ff0:	00801b84 	movi	r2,110
  812ff4:	18800005 	stb	r2,0(r3)
        return (pgrp);
  812ff8:	e0fffb17 	ldw	r3,-20(fp)
  812ffc:	e0ffff15 	stw	r3,-4(fp)
  813000:	00008d06 	br	813238 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  813004:	008020b4 	movhi	r2,130
  813008:	10be0204 	addi	r2,r2,-2040
  81300c:	10800003 	ldbu	r2,0(r2)
  813010:	10803fcc 	andi	r2,r2,255
  813014:	1005003a 	cmpeq	r2,r2,zero
  813018:	1000061e 	bne	r2,zero,813034 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  81301c:	e0fffd17 	ldw	r3,-12(fp)
  813020:	008003c4 	movi	r2,15
  813024:	18800005 	stb	r2,0(r3)
        return (pgrp);
  813028:	e0bffb17 	ldw	r2,-20(fp)
  81302c:	e0bfff15 	stw	r2,-4(fp)
  813030:	00008106 	br	813238 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  813034:	e0bffb17 	ldw	r2,-20(fp)
  813038:	10800003 	ldbu	r2,0(r2)
  81303c:	10803fcc 	andi	r2,r2,255
  813040:	10800160 	cmpeqi	r2,r2,5
  813044:	1000061e 	bne	r2,zero,813060 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
  813048:	e0fffd17 	ldw	r3,-12(fp)
  81304c:	00800044 	movi	r2,1
  813050:	18800005 	stb	r2,0(r3)
        return (pgrp);
  813054:	e0fffb17 	ldw	r3,-20(fp)
  813058:	e0ffff15 	stw	r3,-4(fp)
  81305c:	00007606 	br	813238 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813060:	0005303a 	rdctl	r2,status
  813064:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813068:	e0fff617 	ldw	r3,-40(fp)
  81306c:	00bfff84 	movi	r2,-2
  813070:	1884703a 	and	r2,r3,r2
  813074:	1001703a 	wrctl	status,r2
  
  return context;
  813078:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  81307c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  813080:	e0bffb17 	ldw	r2,-20(fp)
  813084:	10800117 	ldw	r2,4(r2)
  813088:	1005003a 	cmpeq	r2,r2,zero
  81308c:	1000031e 	bne	r2,zero,81309c <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  813090:	00800044 	movi	r2,1
  813094:	e0bffa05 	stb	r2,-24(fp)
  813098:	00000106 	br	8130a0 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  81309c:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  8130a0:	e0bffc03 	ldbu	r2,-16(fp)
  8130a4:	e0bffe15 	stw	r2,-8(fp)
  8130a8:	e0fffe17 	ldw	r3,-8(fp)
  8130ac:	1805003a 	cmpeq	r2,r3,zero
  8130b0:	1000041e 	bne	r2,zero,8130c4 <OSFlagDel+0x11c>
  8130b4:	e0fffe17 	ldw	r3,-8(fp)
  8130b8:	18800060 	cmpeqi	r2,r3,1
  8130bc:	1000281e 	bne	r2,zero,813160 <OSFlagDel+0x1b8>
  8130c0:	00005206 	br	81320c <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  8130c4:	e0bffa03 	ldbu	r2,-24(fp)
  8130c8:	1004c03a 	cmpne	r2,r2,zero
  8130cc:	10001a1e 	bne	r2,zero,813138 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  8130d0:	e0fffb17 	ldw	r3,-20(fp)
  8130d4:	00800fc4 	movi	r2,63
  8130d8:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  8130dc:	e0bffb17 	ldw	r2,-20(fp)
  8130e0:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  8130e4:	e0bffb17 	ldw	r2,-20(fp)
  8130e8:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  8130ec:	008020b4 	movhi	r2,130
  8130f0:	10be0504 	addi	r2,r2,-2028
  8130f4:	10c00017 	ldw	r3,0(r2)
  8130f8:	e0bffb17 	ldw	r2,-20(fp)
  8130fc:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  813100:	e0bffb17 	ldw	r2,-20(fp)
  813104:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  813108:	00c020b4 	movhi	r3,130
  81310c:	18fe0504 	addi	r3,r3,-2028
  813110:	e0bffb17 	ldw	r2,-20(fp)
  813114:	18800015 	stw	r2,0(r3)
  813118:	e0bff717 	ldw	r2,-36(fp)
  81311c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813120:	e0bff517 	ldw	r2,-44(fp)
  813124:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  813128:	e0bffd17 	ldw	r2,-12(fp)
  81312c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  813130:	e03ff815 	stw	zero,-32(fp)
  813134:	00003e06 	br	813230 <OSFlagDel+0x288>
  813138:	e0bff717 	ldw	r2,-36(fp)
  81313c:	e0bff415 	stw	r2,-48(fp)
  813140:	e0bff417 	ldw	r2,-48(fp)
  813144:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  813148:	e0fffd17 	ldw	r3,-12(fp)
  81314c:	00801244 	movi	r2,73
  813150:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
  813154:	e0bffb17 	ldw	r2,-20(fp)
  813158:	e0bff815 	stw	r2,-32(fp)
             }
             break;
  81315c:	00003406 	br	813230 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  813160:	e0bffb17 	ldw	r2,-20(fp)
  813164:	10800117 	ldw	r2,4(r2)
  813168:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  81316c:	00000606 	br	813188 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  813170:	e13ff917 	ldw	r4,-28(fp)
  813174:	000b883a 	mov	r5,zero
  813178:	08142b80 	call	8142b8 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  81317c:	e0bff917 	ldw	r2,-28(fp)
  813180:	10800017 	ldw	r2,0(r2)
  813184:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  813188:	e0bff917 	ldw	r2,-28(fp)
  81318c:	1004c03a 	cmpne	r2,r2,zero
  813190:	103ff71e 	bne	r2,zero,813170 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  813194:	e0fffb17 	ldw	r3,-20(fp)
  813198:	00800fc4 	movi	r2,63
  81319c:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  8131a0:	e0bffb17 	ldw	r2,-20(fp)
  8131a4:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  8131a8:	e0bffb17 	ldw	r2,-20(fp)
  8131ac:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  8131b0:	008020b4 	movhi	r2,130
  8131b4:	10be0504 	addi	r2,r2,-2028
  8131b8:	10c00017 	ldw	r3,0(r2)
  8131bc:	e0bffb17 	ldw	r2,-20(fp)
  8131c0:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  8131c4:	e0bffb17 	ldw	r2,-20(fp)
  8131c8:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  8131cc:	00c020b4 	movhi	r3,130
  8131d0:	18fe0504 	addi	r3,r3,-2028
  8131d4:	e0bffb17 	ldw	r2,-20(fp)
  8131d8:	18800015 	stw	r2,0(r3)
  8131dc:	e0bff717 	ldw	r2,-36(fp)
  8131e0:	e0bff315 	stw	r2,-52(fp)
  8131e4:	e0bff317 	ldw	r2,-52(fp)
  8131e8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  8131ec:	e0bffa03 	ldbu	r2,-24(fp)
  8131f0:	10800058 	cmpnei	r2,r2,1
  8131f4:	1000011e 	bne	r2,zero,8131fc <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  8131f8:	08122c40 	call	8122c4 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  8131fc:	e0bffd17 	ldw	r2,-12(fp)
  813200:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  813204:	e03ff815 	stw	zero,-32(fp)
             break;
  813208:	00000906 	br	813230 <OSFlagDel+0x288>
  81320c:	e0bff717 	ldw	r2,-36(fp)
  813210:	e0bff215 	stw	r2,-56(fp)
  813214:	e0bff217 	ldw	r2,-56(fp)
  813218:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  81321c:	e0fffd17 	ldw	r3,-12(fp)
  813220:	008001c4 	movi	r2,7
  813224:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
  813228:	e0bffb17 	ldw	r2,-20(fp)
  81322c:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
  813230:	e0bff817 	ldw	r2,-32(fp)
  813234:	e0bfff15 	stw	r2,-4(fp)
  813238:	e0bfff17 	ldw	r2,-4(fp)
}
  81323c:	e037883a 	mov	sp,fp
  813240:	dfc00117 	ldw	ra,4(sp)
  813244:	df000017 	ldw	fp,0(sp)
  813248:	dec00204 	addi	sp,sp,8
  81324c:	f800283a 	ret

00813250 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  813250:	defff504 	addi	sp,sp,-44
  813254:	dfc00a15 	stw	ra,40(sp)
  813258:	df000915 	stw	fp,36(sp)
  81325c:	df000904 	addi	fp,sp,36
  813260:	e13ffc15 	stw	r4,-16(fp)
  813264:	e17ffd15 	stw	r5,-12(fp)
  813268:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81326c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  813270:	e0bffe17 	ldw	r2,-8(fp)
  813274:	1004c03a 	cmpne	r2,r2,zero
  813278:	1000021e 	bne	r2,zero,813284 <OSFlagNameGet+0x34>
        return (0);
  81327c:	e03fff15 	stw	zero,-4(fp)
  813280:	00003e06 	br	81337c <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  813284:	e0bffc17 	ldw	r2,-16(fp)
  813288:	1004c03a 	cmpne	r2,r2,zero
  81328c:	1000051e 	bne	r2,zero,8132a4 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  813290:	e0fffe17 	ldw	r3,-8(fp)
  813294:	00801b84 	movi	r2,110
  813298:	18800005 	stb	r2,0(r3)
        return (0);
  81329c:	e03fff15 	stw	zero,-4(fp)
  8132a0:	00003606 	br	81337c <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  8132a4:	e0bffd17 	ldw	r2,-12(fp)
  8132a8:	1004c03a 	cmpne	r2,r2,zero
  8132ac:	1000051e 	bne	r2,zero,8132c4 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  8132b0:	e0fffe17 	ldw	r3,-8(fp)
  8132b4:	00800304 	movi	r2,12
  8132b8:	18800005 	stb	r2,0(r3)
        return (0);
  8132bc:	e03fff15 	stw	zero,-4(fp)
  8132c0:	00002e06 	br	81337c <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8132c4:	008020b4 	movhi	r2,130
  8132c8:	10be0204 	addi	r2,r2,-2040
  8132cc:	10800003 	ldbu	r2,0(r2)
  8132d0:	10803fcc 	andi	r2,r2,255
  8132d4:	1005003a 	cmpeq	r2,r2,zero
  8132d8:	1000051e 	bne	r2,zero,8132f0 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  8132dc:	e0fffe17 	ldw	r3,-8(fp)
  8132e0:	00800444 	movi	r2,17
  8132e4:	18800005 	stb	r2,0(r3)
        return (0);
  8132e8:	e03fff15 	stw	zero,-4(fp)
  8132ec:	00002306 	br	81337c <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8132f0:	0005303a 	rdctl	r2,status
  8132f4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8132f8:	e0fff917 	ldw	r3,-28(fp)
  8132fc:	00bfff84 	movi	r2,-2
  813300:	1884703a 	and	r2,r3,r2
  813304:	1001703a 	wrctl	status,r2
  
  return context;
  813308:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81330c:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  813310:	e0bffc17 	ldw	r2,-16(fp)
  813314:	10800003 	ldbu	r2,0(r2)
  813318:	10803fcc 	andi	r2,r2,255
  81331c:	10800160 	cmpeqi	r2,r2,5
  813320:	1000091e 	bne	r2,zero,813348 <OSFlagNameGet+0xf8>
  813324:	e0bffa17 	ldw	r2,-24(fp)
  813328:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81332c:	e0bff817 	ldw	r2,-32(fp)
  813330:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  813334:	e0fffe17 	ldw	r3,-8(fp)
  813338:	00800044 	movi	r2,1
  81333c:	18800005 	stb	r2,0(r3)
        return (0);
  813340:	e03fff15 	stw	zero,-4(fp)
  813344:	00000d06 	br	81337c <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  813348:	e0bffc17 	ldw	r2,-16(fp)
  81334c:	11400284 	addi	r5,r2,10
  813350:	e13ffd17 	ldw	r4,-12(fp)
  813354:	08124080 	call	812408 <OS_StrCopy>
  813358:	e0bffb05 	stb	r2,-20(fp)
  81335c:	e0bffa17 	ldw	r2,-24(fp)
  813360:	e0bff715 	stw	r2,-36(fp)
  813364:	e0bff717 	ldw	r2,-36(fp)
  813368:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81336c:	e0bffe17 	ldw	r2,-8(fp)
  813370:	10000005 	stb	zero,0(r2)
    return (len);
  813374:	e0bffb03 	ldbu	r2,-20(fp)
  813378:	e0bfff15 	stw	r2,-4(fp)
  81337c:	e0bfff17 	ldw	r2,-4(fp)
}
  813380:	e037883a 	mov	sp,fp
  813384:	dfc00117 	ldw	ra,4(sp)
  813388:	df000017 	ldw	fp,0(sp)
  81338c:	dec00204 	addi	sp,sp,8
  813390:	f800283a 	ret

00813394 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  813394:	defff504 	addi	sp,sp,-44
  813398:	dfc00a15 	stw	ra,40(sp)
  81339c:	df000915 	stw	fp,36(sp)
  8133a0:	df000904 	addi	fp,sp,36
  8133a4:	e13ffd15 	stw	r4,-12(fp)
  8133a8:	e17ffe15 	stw	r5,-8(fp)
  8133ac:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8133b0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8133b4:	e0bfff17 	ldw	r2,-4(fp)
  8133b8:	1005003a 	cmpeq	r2,r2,zero
  8133bc:	1000451e 	bne	r2,zero,8134d4 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  8133c0:	e0bffd17 	ldw	r2,-12(fp)
  8133c4:	1004c03a 	cmpne	r2,r2,zero
  8133c8:	1000041e 	bne	r2,zero,8133dc <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  8133cc:	e0ffff17 	ldw	r3,-4(fp)
  8133d0:	00801b84 	movi	r2,110
  8133d4:	18800005 	stb	r2,0(r3)
        return;
  8133d8:	00003e06 	br	8134d4 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  8133dc:	e0bffe17 	ldw	r2,-8(fp)
  8133e0:	1004c03a 	cmpne	r2,r2,zero
  8133e4:	1000041e 	bne	r2,zero,8133f8 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  8133e8:	e0ffff17 	ldw	r3,-4(fp)
  8133ec:	00800304 	movi	r2,12
  8133f0:	18800005 	stb	r2,0(r3)
        return;
  8133f4:	00003706 	br	8134d4 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8133f8:	008020b4 	movhi	r2,130
  8133fc:	10be0204 	addi	r2,r2,-2040
  813400:	10800003 	ldbu	r2,0(r2)
  813404:	10803fcc 	andi	r2,r2,255
  813408:	1005003a 	cmpeq	r2,r2,zero
  81340c:	1000041e 	bne	r2,zero,813420 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  813410:	e0ffff17 	ldw	r3,-4(fp)
  813414:	00800484 	movi	r2,18
  813418:	18800005 	stb	r2,0(r3)
        return;
  81341c:	00002d06 	br	8134d4 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813420:	0005303a 	rdctl	r2,status
  813424:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813428:	e0fffa17 	ldw	r3,-24(fp)
  81342c:	00bfff84 	movi	r2,-2
  813430:	1884703a 	and	r2,r3,r2
  813434:	1001703a 	wrctl	status,r2
  
  return context;
  813438:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81343c:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  813440:	e0bffd17 	ldw	r2,-12(fp)
  813444:	10800003 	ldbu	r2,0(r2)
  813448:	10803fcc 	andi	r2,r2,255
  81344c:	10800160 	cmpeqi	r2,r2,5
  813450:	1000081e 	bne	r2,zero,813474 <OSFlagNameSet+0xe0>
  813454:	e0bffb17 	ldw	r2,-20(fp)
  813458:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81345c:	e0bff917 	ldw	r2,-28(fp)
  813460:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  813464:	e0ffff17 	ldw	r3,-4(fp)
  813468:	00800044 	movi	r2,1
  81346c:	18800005 	stb	r2,0(r3)
        return;
  813470:	00001806 	br	8134d4 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  813474:	e13ffe17 	ldw	r4,-8(fp)
  813478:	08124880 	call	812488 <OS_StrLen>
  81347c:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  813480:	e0bffc03 	ldbu	r2,-16(fp)
  813484:	10800830 	cmpltui	r2,r2,32
  813488:	1000081e 	bne	r2,zero,8134ac <OSFlagNameSet+0x118>
  81348c:	e0bffb17 	ldw	r2,-20(fp)
  813490:	e0bff815 	stw	r2,-32(fp)
  813494:	e0bff817 	ldw	r2,-32(fp)
  813498:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  81349c:	e0ffff17 	ldw	r3,-4(fp)
  8134a0:	00801cc4 	movi	r2,115
  8134a4:	18800005 	stb	r2,0(r3)
        return;
  8134a8:	00000a06 	br	8134d4 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  8134ac:	e0bffd17 	ldw	r2,-12(fp)
  8134b0:	11000284 	addi	r4,r2,10
  8134b4:	e17ffe17 	ldw	r5,-8(fp)
  8134b8:	08124080 	call	812408 <OS_StrCopy>
  8134bc:	e0bffb17 	ldw	r2,-20(fp)
  8134c0:	e0bff715 	stw	r2,-36(fp)
  8134c4:	e0bff717 	ldw	r2,-36(fp)
  8134c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8134cc:	e0bfff17 	ldw	r2,-4(fp)
  8134d0:	10000005 	stb	zero,0(r2)
    return;
}
  8134d4:	e037883a 	mov	sp,fp
  8134d8:	dfc00117 	ldw	ra,4(sp)
  8134dc:	df000017 	ldw	fp,0(sp)
  8134e0:	dec00204 	addi	sp,sp,8
  8134e4:	f800283a 	ret

008134e8 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  8134e8:	deffe004 	addi	sp,sp,-128
  8134ec:	dfc01f15 	stw	ra,124(sp)
  8134f0:	df001e15 	stw	fp,120(sp)
  8134f4:	df001e04 	addi	fp,sp,120
  8134f8:	e13ff915 	stw	r4,-28(fp)
  8134fc:	e17ffa0d 	sth	r5,-24(fp)
  813500:	e1bffb05 	stb	r6,-20(fp)
  813504:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  813508:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  81350c:	e0800217 	ldw	r2,8(fp)
  813510:	1004c03a 	cmpne	r2,r2,zero
  813514:	1000021e 	bne	r2,zero,813520 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
  813518:	e03fff15 	stw	zero,-4(fp)
  81351c:	00017d06 	br	813b14 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  813520:	e0bff917 	ldw	r2,-28(fp)
  813524:	1004c03a 	cmpne	r2,r2,zero
  813528:	1000051e 	bne	r2,zero,813540 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  81352c:	e0c00217 	ldw	r3,8(fp)
  813530:	00801b84 	movi	r2,110
  813534:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  813538:	e03fff15 	stw	zero,-4(fp)
  81353c:	00017506 	br	813b14 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  813540:	008020b4 	movhi	r2,130
  813544:	10be0204 	addi	r2,r2,-2040
  813548:	10800003 	ldbu	r2,0(r2)
  81354c:	10803fcc 	andi	r2,r2,255
  813550:	1005003a 	cmpeq	r2,r2,zero
  813554:	1000051e 	bne	r2,zero,81356c <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  813558:	e0c00217 	ldw	r3,8(fp)
  81355c:	00800084 	movi	r2,2
  813560:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  813564:	e03fff15 	stw	zero,-4(fp)
  813568:	00016a06 	br	813b14 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  81356c:	008020b4 	movhi	r2,130
  813570:	10bdf404 	addi	r2,r2,-2096
  813574:	10800003 	ldbu	r2,0(r2)
  813578:	10803fcc 	andi	r2,r2,255
  81357c:	1005003a 	cmpeq	r2,r2,zero
  813580:	1000051e 	bne	r2,zero,813598 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  813584:	e0c00217 	ldw	r3,8(fp)
  813588:	00800344 	movi	r2,13
  81358c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  813590:	e03fff15 	stw	zero,-4(fp)
  813594:	00015f06 	br	813b14 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  813598:	e0bff917 	ldw	r2,-28(fp)
  81359c:	10800003 	ldbu	r2,0(r2)
  8135a0:	10803fcc 	andi	r2,r2,255
  8135a4:	10800160 	cmpeqi	r2,r2,5
  8135a8:	1000051e 	bne	r2,zero,8135c0 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
  8135ac:	e0c00217 	ldw	r3,8(fp)
  8135b0:	00800044 	movi	r2,1
  8135b4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8135b8:	e03fff15 	stw	zero,-4(fp)
  8135bc:	00015506 	br	813b14 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  8135c0:	e0fffb03 	ldbu	r3,-20(fp)
  8135c4:	00bfe004 	movi	r2,-128
  8135c8:	1884703a 	and	r2,r3,r2
  8135cc:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  8135d0:	e0bff283 	ldbu	r2,-54(fp)
  8135d4:	1005003a 	cmpeq	r2,r2,zero
  8135d8:	1000071e 	bne	r2,zero,8135f8 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  8135dc:	00c01fc4 	movi	r3,127
  8135e0:	e0bffb03 	ldbu	r2,-20(fp)
  8135e4:	10c4703a 	and	r2,r2,r3
  8135e8:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
  8135ec:	00800044 	movi	r2,1
  8135f0:	e0bff205 	stb	r2,-56(fp)
  8135f4:	00000106 	br	8135fc <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
  8135f8:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8135fc:	0005303a 	rdctl	r2,status
  813600:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813604:	e0fff017 	ldw	r3,-64(fp)
  813608:	00bfff84 	movi	r2,-2
  81360c:	1884703a 	and	r2,r3,r2
  813610:	1001703a 	wrctl	status,r2
  
  return context;
  813614:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  813618:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
  81361c:	e0bffb03 	ldbu	r2,-20(fp)
  813620:	e0bffe15 	stw	r2,-8(fp)
  813624:	e0fffe17 	ldw	r3,-8(fp)
  813628:	18800060 	cmpeqi	r2,r3,1
  81362c:	1000981e 	bne	r2,zero,813890 <OSFlagPend+0x3a8>
  813630:	e0fffe17 	ldw	r3,-8(fp)
  813634:	18800088 	cmpgei	r2,r3,2
  813638:	1000041e 	bne	r2,zero,81364c <OSFlagPend+0x164>
  81363c:	e0fffe17 	ldw	r3,-8(fp)
  813640:	1805003a 	cmpeq	r2,r3,zero
  813644:	1000641e 	bne	r2,zero,8137d8 <OSFlagPend+0x2f0>
  813648:	0000bf06 	br	813948 <OSFlagPend+0x460>
  81364c:	e0fffe17 	ldw	r3,-8(fp)
  813650:	188000a0 	cmpeqi	r2,r3,2
  813654:	1000041e 	bne	r2,zero,813668 <OSFlagPend+0x180>
  813658:	e0fffe17 	ldw	r3,-8(fp)
  81365c:	188000e0 	cmpeqi	r2,r3,3
  813660:	10002f1e 	bne	r2,zero,813720 <OSFlagPend+0x238>
  813664:	0000b806 	br	813948 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  813668:	e0bff917 	ldw	r2,-28(fp)
  81366c:	10c0020b 	ldhu	r3,8(r2)
  813670:	e0bffa0b 	ldhu	r2,-24(fp)
  813674:	1884703a 	and	r2,r3,r2
  813678:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  81367c:	e0fff30b 	ldhu	r3,-52(fp)
  813680:	e0bffa0b 	ldhu	r2,-24(fp)
  813684:	18801a1e 	bne	r3,r2,8136f0 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  813688:	e0bff203 	ldbu	r2,-56(fp)
  81368c:	10800058 	cmpnei	r2,r2,1
  813690:	1000091e 	bne	r2,zero,8136b8 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  813694:	e0bff917 	ldw	r2,-28(fp)
  813698:	1080020b 	ldhu	r2,8(r2)
  81369c:	1007883a 	mov	r3,r2
  8136a0:	e0bff30b 	ldhu	r2,-52(fp)
  8136a4:	0084303a 	nor	r2,zero,r2
  8136a8:	1884703a 	and	r2,r3,r2
  8136ac:	1007883a 	mov	r3,r2
  8136b0:	e0bff917 	ldw	r2,-28(fp)
  8136b4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  8136b8:	008020b4 	movhi	r2,130
  8136bc:	10be0304 	addi	r2,r2,-2036
  8136c0:	10c00017 	ldw	r3,0(r2)
  8136c4:	e0bff30b 	ldhu	r2,-52(fp)
  8136c8:	18800b0d 	sth	r2,44(r3)
  8136cc:	e0bff117 	ldw	r2,-60(fp)
  8136d0:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8136d4:	e0bfef17 	ldw	r2,-68(fp)
  8136d8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  8136dc:	e0800217 	ldw	r2,8(fp)
  8136e0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  8136e4:	e0bff30b 	ldhu	r2,-52(fp)
  8136e8:	e0bfff15 	stw	r2,-4(fp)
  8136ec:	00010906 	br	813b14 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  8136f0:	e1bffa0b 	ldhu	r6,-24(fp)
  8136f4:	e1fffb03 	ldbu	r7,-20(fp)
  8136f8:	e0bffc0b 	ldhu	r2,-16(fp)
  8136fc:	e17ff404 	addi	r5,fp,-48
  813700:	d8800015 	stw	r2,0(sp)
  813704:	e13ff917 	ldw	r4,-28(fp)
  813708:	08140100 	call	814010 <OS_FlagBlock>
  81370c:	e0bff117 	ldw	r2,-60(fp)
  813710:	e0bfee15 	stw	r2,-72(fp)
  813714:	e0bfee17 	ldw	r2,-72(fp)
  813718:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  81371c:	00009506 	br	813974 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  813720:	e0bff917 	ldw	r2,-28(fp)
  813724:	10c0020b 	ldhu	r3,8(r2)
  813728:	e0bffa0b 	ldhu	r2,-24(fp)
  81372c:	1884703a 	and	r2,r3,r2
  813730:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  813734:	e0bff30b 	ldhu	r2,-52(fp)
  813738:	1005003a 	cmpeq	r2,r2,zero
  81373c:	10001a1e 	bne	r2,zero,8137a8 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  813740:	e0bff203 	ldbu	r2,-56(fp)
  813744:	10800058 	cmpnei	r2,r2,1
  813748:	1000091e 	bne	r2,zero,813770 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  81374c:	e0bff917 	ldw	r2,-28(fp)
  813750:	1080020b 	ldhu	r2,8(r2)
  813754:	1007883a 	mov	r3,r2
  813758:	e0bff30b 	ldhu	r2,-52(fp)
  81375c:	0084303a 	nor	r2,zero,r2
  813760:	1884703a 	and	r2,r3,r2
  813764:	1007883a 	mov	r3,r2
  813768:	e0bff917 	ldw	r2,-28(fp)
  81376c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  813770:	008020b4 	movhi	r2,130
  813774:	10be0304 	addi	r2,r2,-2036
  813778:	10c00017 	ldw	r3,0(r2)
  81377c:	e0bff30b 	ldhu	r2,-52(fp)
  813780:	18800b0d 	sth	r2,44(r3)
  813784:	e0bff117 	ldw	r2,-60(fp)
  813788:	e0bfed15 	stw	r2,-76(fp)
  81378c:	e0bfed17 	ldw	r2,-76(fp)
  813790:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  813794:	e0800217 	ldw	r2,8(fp)
  813798:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  81379c:	e0fff30b 	ldhu	r3,-52(fp)
  8137a0:	e0ffff15 	stw	r3,-4(fp)
  8137a4:	0000db06 	br	813b14 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  8137a8:	e1bffa0b 	ldhu	r6,-24(fp)
  8137ac:	e1fffb03 	ldbu	r7,-20(fp)
  8137b0:	e0bffc0b 	ldhu	r2,-16(fp)
  8137b4:	e17ff404 	addi	r5,fp,-48
  8137b8:	d8800015 	stw	r2,0(sp)
  8137bc:	e13ff917 	ldw	r4,-28(fp)
  8137c0:	08140100 	call	814010 <OS_FlagBlock>
  8137c4:	e0bff117 	ldw	r2,-60(fp)
  8137c8:	e0bfec15 	stw	r2,-80(fp)
  8137cc:	e0bfec17 	ldw	r2,-80(fp)
  8137d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  8137d4:	00006706 	br	813974 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  8137d8:	e0bff917 	ldw	r2,-28(fp)
  8137dc:	1080020b 	ldhu	r2,8(r2)
  8137e0:	0084303a 	nor	r2,zero,r2
  8137e4:	1007883a 	mov	r3,r2
  8137e8:	e0bffa0b 	ldhu	r2,-24(fp)
  8137ec:	1884703a 	and	r2,r3,r2
  8137f0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  8137f4:	e0fff30b 	ldhu	r3,-52(fp)
  8137f8:	e0bffa0b 	ldhu	r2,-24(fp)
  8137fc:	1880181e 	bne	r3,r2,813860 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  813800:	e0bff203 	ldbu	r2,-56(fp)
  813804:	10800058 	cmpnei	r2,r2,1
  813808:	1000071e 	bne	r2,zero,813828 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  81380c:	e0bff917 	ldw	r2,-28(fp)
  813810:	10c0020b 	ldhu	r3,8(r2)
  813814:	e0bff30b 	ldhu	r2,-52(fp)
  813818:	1884b03a 	or	r2,r3,r2
  81381c:	1007883a 	mov	r3,r2
  813820:	e0bff917 	ldw	r2,-28(fp)
  813824:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  813828:	008020b4 	movhi	r2,130
  81382c:	10be0304 	addi	r2,r2,-2036
  813830:	10c00017 	ldw	r3,0(r2)
  813834:	e0bff30b 	ldhu	r2,-52(fp)
  813838:	18800b0d 	sth	r2,44(r3)
  81383c:	e0bff117 	ldw	r2,-60(fp)
  813840:	e0bfeb15 	stw	r2,-84(fp)
  813844:	e0bfeb17 	ldw	r2,-84(fp)
  813848:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  81384c:	e0800217 	ldw	r2,8(fp)
  813850:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  813854:	e0bff30b 	ldhu	r2,-52(fp)
  813858:	e0bfff15 	stw	r2,-4(fp)
  81385c:	0000ad06 	br	813b14 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  813860:	e1bffa0b 	ldhu	r6,-24(fp)
  813864:	e1fffb03 	ldbu	r7,-20(fp)
  813868:	e0bffc0b 	ldhu	r2,-16(fp)
  81386c:	e17ff404 	addi	r5,fp,-48
  813870:	d8800015 	stw	r2,0(sp)
  813874:	e13ff917 	ldw	r4,-28(fp)
  813878:	08140100 	call	814010 <OS_FlagBlock>
  81387c:	e0bff117 	ldw	r2,-60(fp)
  813880:	e0bfea15 	stw	r2,-88(fp)
  813884:	e0bfea17 	ldw	r2,-88(fp)
  813888:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  81388c:	00003906 	br	813974 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  813890:	e0bff917 	ldw	r2,-28(fp)
  813894:	1080020b 	ldhu	r2,8(r2)
  813898:	0084303a 	nor	r2,zero,r2
  81389c:	1007883a 	mov	r3,r2
  8138a0:	e0bffa0b 	ldhu	r2,-24(fp)
  8138a4:	1884703a 	and	r2,r3,r2
  8138a8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  8138ac:	e0bff30b 	ldhu	r2,-52(fp)
  8138b0:	1005003a 	cmpeq	r2,r2,zero
  8138b4:	1000181e 	bne	r2,zero,813918 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8138b8:	e0bff203 	ldbu	r2,-56(fp)
  8138bc:	10800058 	cmpnei	r2,r2,1
  8138c0:	1000071e 	bne	r2,zero,8138e0 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  8138c4:	e0bff917 	ldw	r2,-28(fp)
  8138c8:	10c0020b 	ldhu	r3,8(r2)
  8138cc:	e0bff30b 	ldhu	r2,-52(fp)
  8138d0:	1884b03a 	or	r2,r3,r2
  8138d4:	1007883a 	mov	r3,r2
  8138d8:	e0bff917 	ldw	r2,-28(fp)
  8138dc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  8138e0:	008020b4 	movhi	r2,130
  8138e4:	10be0304 	addi	r2,r2,-2036
  8138e8:	10c00017 	ldw	r3,0(r2)
  8138ec:	e0bff30b 	ldhu	r2,-52(fp)
  8138f0:	18800b0d 	sth	r2,44(r3)
  8138f4:	e0bff117 	ldw	r2,-60(fp)
  8138f8:	e0bfe915 	stw	r2,-92(fp)
  8138fc:	e0bfe917 	ldw	r2,-92(fp)
  813900:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  813904:	e0800217 	ldw	r2,8(fp)
  813908:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  81390c:	e0fff30b 	ldhu	r3,-52(fp)
  813910:	e0ffff15 	stw	r3,-4(fp)
  813914:	00007f06 	br	813b14 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  813918:	e1bffa0b 	ldhu	r6,-24(fp)
  81391c:	e1fffb03 	ldbu	r7,-20(fp)
  813920:	e0bffc0b 	ldhu	r2,-16(fp)
  813924:	e17ff404 	addi	r5,fp,-48
  813928:	d8800015 	stw	r2,0(sp)
  81392c:	e13ff917 	ldw	r4,-28(fp)
  813930:	08140100 	call	814010 <OS_FlagBlock>
  813934:	e0bff117 	ldw	r2,-60(fp)
  813938:	e0bfe815 	stw	r2,-96(fp)
  81393c:	e0bfe817 	ldw	r2,-96(fp)
  813940:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  813944:	00000b06 	br	813974 <OSFlagPend+0x48c>
  813948:	e0bff117 	ldw	r2,-60(fp)
  81394c:	e0bfe715 	stw	r2,-100(fp)
  813950:	e0bfe717 	ldw	r2,-100(fp)
  813954:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  813958:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  81395c:	e0c00217 	ldw	r3,8(fp)
  813960:	00801bc4 	movi	r2,111
  813964:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
  813968:	e0bff30b 	ldhu	r2,-52(fp)
  81396c:	e0bfff15 	stw	r2,-4(fp)
  813970:	00006806 	br	813b14 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  813974:	08122c40 	call	8122c4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813978:	0005303a 	rdctl	r2,status
  81397c:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813980:	e0ffe617 	ldw	r3,-104(fp)
  813984:	00bfff84 	movi	r2,-2
  813988:	1884703a 	and	r2,r3,r2
  81398c:	1001703a 	wrctl	status,r2
  
  return context;
  813990:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
  813994:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  813998:	008020b4 	movhi	r2,130
  81399c:	10be0304 	addi	r2,r2,-2036
  8139a0:	10800017 	ldw	r2,0(r2)
  8139a4:	10800c43 	ldbu	r2,49(r2)
  8139a8:	10803fcc 	andi	r2,r2,255
  8139ac:	1005003a 	cmpeq	r2,r2,zero
  8139b0:	1000221e 	bne	r2,zero,813a3c <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  8139b4:	008020b4 	movhi	r2,130
  8139b8:	10be0304 	addi	r2,r2,-2036
  8139bc:	10800017 	ldw	r2,0(r2)
  8139c0:	10800c43 	ldbu	r2,49(r2)
  8139c4:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  8139c8:	008020b4 	movhi	r2,130
  8139cc:	10be0304 	addi	r2,r2,-2036
  8139d0:	10800017 	ldw	r2,0(r2)
  8139d4:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  8139d8:	e13ff404 	addi	r4,fp,-48
  8139dc:	08143c80 	call	8143c8 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  8139e0:	008020b4 	movhi	r2,130
  8139e4:	10be0304 	addi	r2,r2,-2036
  8139e8:	10800017 	ldw	r2,0(r2)
  8139ec:	10000c05 	stb	zero,48(r2)
  8139f0:	e0bff117 	ldw	r2,-60(fp)
  8139f4:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8139f8:	e0bfe517 	ldw	r2,-108(fp)
  8139fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  813a00:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
  813a04:	e0bff243 	ldbu	r2,-55(fp)
  813a08:	108000a0 	cmpeqi	r2,r2,2
  813a0c:	1000011e 	bne	r2,zero,813a14 <OSFlagPend+0x52c>
  813a10:	00000406 	br	813a24 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  813a14:	e0c00217 	ldw	r3,8(fp)
  813a18:	00800384 	movi	r2,14
  813a1c:	18800005 	stb	r2,0(r3)
                 break;
  813a20:	00000306 	br	813a30 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  813a24:	e0c00217 	ldw	r3,8(fp)
  813a28:	00800284 	movi	r2,10
  813a2c:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
  813a30:	e0fff30b 	ldhu	r3,-52(fp)
  813a34:	e0ffff15 	stw	r3,-4(fp)
  813a38:	00003606 	br	813b14 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  813a3c:	008020b4 	movhi	r2,130
  813a40:	10be0304 	addi	r2,r2,-2036
  813a44:	10800017 	ldw	r2,0(r2)
  813a48:	10800b0b 	ldhu	r2,44(r2)
  813a4c:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  813a50:	e0bff203 	ldbu	r2,-56(fp)
  813a54:	10800058 	cmpnei	r2,r2,1
  813a58:	1000261e 	bne	r2,zero,813af4 <OSFlagPend+0x60c>
        switch (wait_type) {
  813a5c:	e0bffb03 	ldbu	r2,-20(fp)
  813a60:	e0bffd15 	stw	r2,-12(fp)
  813a64:	e0fffd17 	ldw	r3,-12(fp)
  813a68:	1804803a 	cmplt	r2,r3,zero
  813a6c:	1000181e 	bne	r2,zero,813ad0 <OSFlagPend+0x5e8>
  813a70:	e0fffd17 	ldw	r3,-12(fp)
  813a74:	18800090 	cmplti	r2,r3,2
  813a78:	10000d1e 	bne	r2,zero,813ab0 <OSFlagPend+0x5c8>
  813a7c:	e0fffd17 	ldw	r3,-12(fp)
  813a80:	18800108 	cmpgei	r2,r3,4
  813a84:	1000121e 	bne	r2,zero,813ad0 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  813a88:	e0bff917 	ldw	r2,-28(fp)
  813a8c:	1080020b 	ldhu	r2,8(r2)
  813a90:	1007883a 	mov	r3,r2
  813a94:	e0bff30b 	ldhu	r2,-52(fp)
  813a98:	0084303a 	nor	r2,zero,r2
  813a9c:	1884703a 	and	r2,r3,r2
  813aa0:	1007883a 	mov	r3,r2
  813aa4:	e0bff917 	ldw	r2,-28(fp)
  813aa8:	10c0020d 	sth	r3,8(r2)
                 break;
  813aac:	00001106 	br	813af4 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  813ab0:	e0bff917 	ldw	r2,-28(fp)
  813ab4:	10c0020b 	ldhu	r3,8(r2)
  813ab8:	e0bff30b 	ldhu	r2,-52(fp)
  813abc:	1884b03a 	or	r2,r3,r2
  813ac0:	1007883a 	mov	r3,r2
  813ac4:	e0bff917 	ldw	r2,-28(fp)
  813ac8:	10c0020d 	sth	r3,8(r2)
                 break;
  813acc:	00000906 	br	813af4 <OSFlagPend+0x60c>
  813ad0:	e0bff117 	ldw	r2,-60(fp)
  813ad4:	e0bfe415 	stw	r2,-112(fp)
  813ad8:	e0bfe417 	ldw	r2,-112(fp)
  813adc:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  813ae0:	e0c00217 	ldw	r3,8(fp)
  813ae4:	00801bc4 	movi	r2,111
  813ae8:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  813aec:	e03fff15 	stw	zero,-4(fp)
  813af0:	00000806 	br	813b14 <OSFlagPend+0x62c>
  813af4:	e0bff117 	ldw	r2,-60(fp)
  813af8:	e0bfe315 	stw	r2,-116(fp)
  813afc:	e0bfe317 	ldw	r2,-116(fp)
  813b00:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  813b04:	e0800217 	ldw	r2,8(fp)
  813b08:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  813b0c:	e0bff30b 	ldhu	r2,-52(fp)
  813b10:	e0bfff15 	stw	r2,-4(fp)
  813b14:	e0bfff17 	ldw	r2,-4(fp)
}
  813b18:	e037883a 	mov	sp,fp
  813b1c:	dfc00117 	ldw	ra,4(sp)
  813b20:	df000017 	ldw	fp,0(sp)
  813b24:	dec00204 	addi	sp,sp,8
  813b28:	f800283a 	ret

00813b2c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  813b2c:	defffb04 	addi	sp,sp,-20
  813b30:	df000415 	stw	fp,16(sp)
  813b34:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  813b38:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813b3c:	0005303a 	rdctl	r2,status
  813b40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813b44:	e0fffd17 	ldw	r3,-12(fp)
  813b48:	00bfff84 	movi	r2,-2
  813b4c:	1884703a 	and	r2,r3,r2
  813b50:	1001703a 	wrctl	status,r2
  
  return context;
  813b54:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  813b58:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  813b5c:	008020b4 	movhi	r2,130
  813b60:	10be0304 	addi	r2,r2,-2036
  813b64:	10800017 	ldw	r2,0(r2)
  813b68:	10800b0b 	ldhu	r2,44(r2)
  813b6c:	e0bfff0d 	sth	r2,-4(fp)
  813b70:	e0bffe17 	ldw	r2,-8(fp)
  813b74:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813b78:	e0bffc17 	ldw	r2,-16(fp)
  813b7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  813b80:	e0bfff0b 	ldhu	r2,-4(fp)
}
  813b84:	e037883a 	mov	sp,fp
  813b88:	df000017 	ldw	fp,0(sp)
  813b8c:	dec00104 	addi	sp,sp,4
  813b90:	f800283a 	ret

00813b94 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  813b94:	deffed04 	addi	sp,sp,-76
  813b98:	dfc01215 	stw	ra,72(sp)
  813b9c:	df001115 	stw	fp,68(sp)
  813ba0:	df001104 	addi	fp,sp,68
  813ba4:	e13ff915 	stw	r4,-28(fp)
  813ba8:	e1fffc15 	stw	r7,-16(fp)
  813bac:	e17ffa0d 	sth	r5,-24(fp)
  813bb0:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  813bb4:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  813bb8:	e0bffc17 	ldw	r2,-16(fp)
  813bbc:	1004c03a 	cmpne	r2,r2,zero
  813bc0:	1000021e 	bne	r2,zero,813bcc <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
  813bc4:	e03fff15 	stw	zero,-4(fp)
  813bc8:	0000d606 	br	813f24 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  813bcc:	e0bff917 	ldw	r2,-28(fp)
  813bd0:	1004c03a 	cmpne	r2,r2,zero
  813bd4:	1000051e 	bne	r2,zero,813bec <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  813bd8:	e0fffc17 	ldw	r3,-16(fp)
  813bdc:	00801b84 	movi	r2,110
  813be0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  813be4:	e03fff15 	stw	zero,-4(fp)
  813be8:	0000ce06 	br	813f24 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  813bec:	e0bff917 	ldw	r2,-28(fp)
  813bf0:	10800003 	ldbu	r2,0(r2)
  813bf4:	10803fcc 	andi	r2,r2,255
  813bf8:	10800160 	cmpeqi	r2,r2,5
  813bfc:	1000051e 	bne	r2,zero,813c14 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  813c00:	e0fffc17 	ldw	r3,-16(fp)
  813c04:	00800044 	movi	r2,1
  813c08:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  813c0c:	e03fff15 	stw	zero,-4(fp)
  813c10:	0000c406 	br	813f24 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813c14:	0005303a 	rdctl	r2,status
  813c18:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813c1c:	e0fff417 	ldw	r3,-48(fp)
  813c20:	00bfff84 	movi	r2,-2
  813c24:	1884703a 	and	r2,r3,r2
  813c28:	1001703a 	wrctl	status,r2
  
  return context;
  813c2c:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  813c30:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
  813c34:	e0bffb03 	ldbu	r2,-20(fp)
  813c38:	e0bffe15 	stw	r2,-8(fp)
  813c3c:	e0fffe17 	ldw	r3,-8(fp)
  813c40:	1805003a 	cmpeq	r2,r3,zero
  813c44:	1000041e 	bne	r2,zero,813c58 <OSFlagPost+0xc4>
  813c48:	e0fffe17 	ldw	r3,-8(fp)
  813c4c:	18800060 	cmpeqi	r2,r3,1
  813c50:	10000b1e 	bne	r2,zero,813c80 <OSFlagPost+0xec>
  813c54:	00001206 	br	813ca0 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  813c58:	e0bff917 	ldw	r2,-28(fp)
  813c5c:	1080020b 	ldhu	r2,8(r2)
  813c60:	1007883a 	mov	r3,r2
  813c64:	e0bffa0b 	ldhu	r2,-24(fp)
  813c68:	0084303a 	nor	r2,zero,r2
  813c6c:	1884703a 	and	r2,r3,r2
  813c70:	1007883a 	mov	r3,r2
  813c74:	e0bff917 	ldw	r2,-28(fp)
  813c78:	10c0020d 	sth	r3,8(r2)
             break;
  813c7c:	00001106 	br	813cc4 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  813c80:	e0bff917 	ldw	r2,-28(fp)
  813c84:	10c0020b 	ldhu	r3,8(r2)
  813c88:	e0bffa0b 	ldhu	r2,-24(fp)
  813c8c:	1884b03a 	or	r2,r3,r2
  813c90:	1007883a 	mov	r3,r2
  813c94:	e0bff917 	ldw	r2,-28(fp)
  813c98:	10c0020d 	sth	r3,8(r2)
             break;
  813c9c:	00000906 	br	813cc4 <OSFlagPost+0x130>
  813ca0:	e0bff517 	ldw	r2,-44(fp)
  813ca4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813ca8:	e0bff317 	ldw	r2,-52(fp)
  813cac:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  813cb0:	e0fffc17 	ldw	r3,-16(fp)
  813cb4:	00801c44 	movi	r2,113
  813cb8:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
  813cbc:	e03fff15 	stw	zero,-4(fp)
  813cc0:	00009806 	br	813f24 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  813cc4:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  813cc8:	e0bff917 	ldw	r2,-28(fp)
  813ccc:	10800117 	ldw	r2,4(r2)
  813cd0:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  813cd4:	00007506 	br	813eac <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
  813cd8:	e0bff817 	ldw	r2,-32(fp)
  813cdc:	10800483 	ldbu	r2,18(r2)
  813ce0:	10803fcc 	andi	r2,r2,255
  813ce4:	e0bffd15 	stw	r2,-12(fp)
  813ce8:	e0fffd17 	ldw	r3,-12(fp)
  813cec:	18800060 	cmpeqi	r2,r3,1
  813cf0:	10004d1e 	bne	r2,zero,813e28 <OSFlagPost+0x294>
  813cf4:	e0fffd17 	ldw	r3,-12(fp)
  813cf8:	18800088 	cmpgei	r2,r3,2
  813cfc:	1000041e 	bne	r2,zero,813d10 <OSFlagPost+0x17c>
  813d00:	e0fffd17 	ldw	r3,-12(fp)
  813d04:	1805003a 	cmpeq	r2,r3,zero
  813d08:	1000301e 	bne	r2,zero,813dcc <OSFlagPost+0x238>
  813d0c:	00005b06 	br	813e7c <OSFlagPost+0x2e8>
  813d10:	e0fffd17 	ldw	r3,-12(fp)
  813d14:	188000a0 	cmpeqi	r2,r3,2
  813d18:	1000041e 	bne	r2,zero,813d2c <OSFlagPost+0x198>
  813d1c:	e0fffd17 	ldw	r3,-12(fp)
  813d20:	188000e0 	cmpeqi	r2,r3,3
  813d24:	1000161e 	bne	r2,zero,813d80 <OSFlagPost+0x1ec>
  813d28:	00005406 	br	813e7c <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  813d2c:	e0bff917 	ldw	r2,-28(fp)
  813d30:	10c0020b 	ldhu	r3,8(r2)
  813d34:	e0bff817 	ldw	r2,-32(fp)
  813d38:	1080040b 	ldhu	r2,16(r2)
  813d3c:	1884703a 	and	r2,r3,r2
  813d40:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  813d44:	e0bff817 	ldw	r2,-32(fp)
  813d48:	1080040b 	ldhu	r2,16(r2)
  813d4c:	10ffffcc 	andi	r3,r2,65535
  813d50:	e0bff68b 	ldhu	r2,-38(fp)
  813d54:	1880521e 	bne	r3,r2,813ea0 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  813d58:	e17ff68b 	ldhu	r5,-38(fp)
  813d5c:	e13ff817 	ldw	r4,-32(fp)
  813d60:	08142b80 	call	8142b8 <OS_FlagTaskRdy>
  813d64:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  813d68:	e0bff603 	ldbu	r2,-40(fp)
  813d6c:	10800058 	cmpnei	r2,r2,1
  813d70:	10004b1e 	bne	r2,zero,813ea0 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  813d74:	00800044 	movi	r2,1
  813d78:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  813d7c:	00004806 	br	813ea0 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  813d80:	e0bff917 	ldw	r2,-28(fp)
  813d84:	10c0020b 	ldhu	r3,8(r2)
  813d88:	e0bff817 	ldw	r2,-32(fp)
  813d8c:	1080040b 	ldhu	r2,16(r2)
  813d90:	1884703a 	and	r2,r3,r2
  813d94:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  813d98:	e0bff68b 	ldhu	r2,-38(fp)
  813d9c:	1005003a 	cmpeq	r2,r2,zero
  813da0:	10003f1e 	bne	r2,zero,813ea0 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  813da4:	e17ff68b 	ldhu	r5,-38(fp)
  813da8:	e13ff817 	ldw	r4,-32(fp)
  813dac:	08142b80 	call	8142b8 <OS_FlagTaskRdy>
  813db0:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  813db4:	e0bff603 	ldbu	r2,-40(fp)
  813db8:	10800058 	cmpnei	r2,r2,1
  813dbc:	1000381e 	bne	r2,zero,813ea0 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  813dc0:	00800044 	movi	r2,1
  813dc4:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  813dc8:	00003506 	br	813ea0 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  813dcc:	e0bff917 	ldw	r2,-28(fp)
  813dd0:	1080020b 	ldhu	r2,8(r2)
  813dd4:	0084303a 	nor	r2,zero,r2
  813dd8:	1007883a 	mov	r3,r2
  813ddc:	e0bff817 	ldw	r2,-32(fp)
  813de0:	1080040b 	ldhu	r2,16(r2)
  813de4:	1884703a 	and	r2,r3,r2
  813de8:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  813dec:	e0bff817 	ldw	r2,-32(fp)
  813df0:	1080040b 	ldhu	r2,16(r2)
  813df4:	10ffffcc 	andi	r3,r2,65535
  813df8:	e0bff68b 	ldhu	r2,-38(fp)
  813dfc:	1880281e 	bne	r3,r2,813ea0 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  813e00:	e17ff68b 	ldhu	r5,-38(fp)
  813e04:	e13ff817 	ldw	r4,-32(fp)
  813e08:	08142b80 	call	8142b8 <OS_FlagTaskRdy>
  813e0c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  813e10:	e0bff603 	ldbu	r2,-40(fp)
  813e14:	10800058 	cmpnei	r2,r2,1
  813e18:	1000211e 	bne	r2,zero,813ea0 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  813e1c:	00800044 	movi	r2,1
  813e20:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  813e24:	00001e06 	br	813ea0 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  813e28:	e0bff917 	ldw	r2,-28(fp)
  813e2c:	1080020b 	ldhu	r2,8(r2)
  813e30:	0084303a 	nor	r2,zero,r2
  813e34:	1007883a 	mov	r3,r2
  813e38:	e0bff817 	ldw	r2,-32(fp)
  813e3c:	1080040b 	ldhu	r2,16(r2)
  813e40:	1884703a 	and	r2,r3,r2
  813e44:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  813e48:	e0bff68b 	ldhu	r2,-38(fp)
  813e4c:	1005003a 	cmpeq	r2,r2,zero
  813e50:	1000131e 	bne	r2,zero,813ea0 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  813e54:	e17ff68b 	ldhu	r5,-38(fp)
  813e58:	e13ff817 	ldw	r4,-32(fp)
  813e5c:	08142b80 	call	8142b8 <OS_FlagTaskRdy>
  813e60:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  813e64:	e0bff603 	ldbu	r2,-40(fp)
  813e68:	10800058 	cmpnei	r2,r2,1
  813e6c:	10000c1e 	bne	r2,zero,813ea0 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  813e70:	00800044 	movi	r2,1
  813e74:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  813e78:	00000906 	br	813ea0 <OSFlagPost+0x30c>
  813e7c:	e0bff517 	ldw	r2,-44(fp)
  813e80:	e0bff215 	stw	r2,-56(fp)
  813e84:	e0bff217 	ldw	r2,-56(fp)
  813e88:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  813e8c:	e0fffc17 	ldw	r3,-16(fp)
  813e90:	00801bc4 	movi	r2,111
  813e94:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  813e98:	e03fff15 	stw	zero,-4(fp)
  813e9c:	00002106 	br	813f24 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  813ea0:	e0bff817 	ldw	r2,-32(fp)
  813ea4:	10800017 	ldw	r2,0(r2)
  813ea8:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  813eac:	e0bff817 	ldw	r2,-32(fp)
  813eb0:	1004c03a 	cmpne	r2,r2,zero
  813eb4:	103f881e 	bne	r2,zero,813cd8 <OSFlagPost+0x144>
  813eb8:	e0bff517 	ldw	r2,-44(fp)
  813ebc:	e0bff115 	stw	r2,-60(fp)
  813ec0:	e0bff117 	ldw	r2,-60(fp)
  813ec4:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  813ec8:	e0bff783 	ldbu	r2,-34(fp)
  813ecc:	10800058 	cmpnei	r2,r2,1
  813ed0:	1000011e 	bne	r2,zero,813ed8 <OSFlagPost+0x344>
        OS_Sched();
  813ed4:	08122c40 	call	8122c4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813ed8:	0005303a 	rdctl	r2,status
  813edc:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813ee0:	e0fff017 	ldw	r3,-64(fp)
  813ee4:	00bfff84 	movi	r2,-2
  813ee8:	1884703a 	and	r2,r3,r2
  813eec:	1001703a 	wrctl	status,r2
  
  return context;
  813ef0:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
  813ef4:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
  813ef8:	e0bff917 	ldw	r2,-28(fp)
  813efc:	1080020b 	ldhu	r2,8(r2)
  813f00:	e0bff70d 	sth	r2,-36(fp)
  813f04:	e0bff517 	ldw	r2,-44(fp)
  813f08:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813f0c:	e0bfef17 	ldw	r2,-68(fp)
  813f10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  813f14:	e0bffc17 	ldw	r2,-16(fp)
  813f18:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  813f1c:	e0bff70b 	ldhu	r2,-36(fp)
  813f20:	e0bfff15 	stw	r2,-4(fp)
  813f24:	e0bfff17 	ldw	r2,-4(fp)
}
  813f28:	e037883a 	mov	sp,fp
  813f2c:	dfc00117 	ldw	ra,4(sp)
  813f30:	df000017 	ldw	fp,0(sp)
  813f34:	dec00204 	addi	sp,sp,8
  813f38:	f800283a 	ret

00813f3c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  813f3c:	defff804 	addi	sp,sp,-32
  813f40:	df000715 	stw	fp,28(sp)
  813f44:	df000704 	addi	fp,sp,28
  813f48:	e13ffd15 	stw	r4,-12(fp)
  813f4c:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  813f50:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  813f54:	e0bffe17 	ldw	r2,-8(fp)
  813f58:	1004c03a 	cmpne	r2,r2,zero
  813f5c:	1000021e 	bne	r2,zero,813f68 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
  813f60:	e03fff15 	stw	zero,-4(fp)
  813f64:	00002506 	br	813ffc <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  813f68:	e0bffd17 	ldw	r2,-12(fp)
  813f6c:	1004c03a 	cmpne	r2,r2,zero
  813f70:	1000051e 	bne	r2,zero,813f88 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  813f74:	e0fffe17 	ldw	r3,-8(fp)
  813f78:	00801b84 	movi	r2,110
  813f7c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  813f80:	e03fff15 	stw	zero,-4(fp)
  813f84:	00001d06 	br	813ffc <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  813f88:	e0bffd17 	ldw	r2,-12(fp)
  813f8c:	10800003 	ldbu	r2,0(r2)
  813f90:	10803fcc 	andi	r2,r2,255
  813f94:	10800160 	cmpeqi	r2,r2,5
  813f98:	1000051e 	bne	r2,zero,813fb0 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  813f9c:	e0fffe17 	ldw	r3,-8(fp)
  813fa0:	00800044 	movi	r2,1
  813fa4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  813fa8:	e03fff15 	stw	zero,-4(fp)
  813fac:	00001306 	br	813ffc <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813fb0:	0005303a 	rdctl	r2,status
  813fb4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813fb8:	e0fffa17 	ldw	r3,-24(fp)
  813fbc:	00bfff84 	movi	r2,-2
  813fc0:	1884703a 	and	r2,r3,r2
  813fc4:	1001703a 	wrctl	status,r2
  
  return context;
  813fc8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  813fcc:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
  813fd0:	e0bffd17 	ldw	r2,-12(fp)
  813fd4:	1080020b 	ldhu	r2,8(r2)
  813fd8:	e0bffc0d 	sth	r2,-16(fp)
  813fdc:	e0bffb17 	ldw	r2,-20(fp)
  813fe0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813fe4:	e0bff917 	ldw	r2,-28(fp)
  813fe8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  813fec:	e0bffe17 	ldw	r2,-8(fp)
  813ff0:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  813ff4:	e0bffc0b 	ldhu	r2,-16(fp)
  813ff8:	e0bfff15 	stw	r2,-4(fp)
  813ffc:	e0bfff17 	ldw	r2,-4(fp)
}
  814000:	e037883a 	mov	sp,fp
  814004:	df000017 	ldw	fp,0(sp)
  814008:	dec00104 	addi	sp,sp,4
  81400c:	f800283a 	ret

00814010 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  814010:	defff804 	addi	sp,sp,-32
  814014:	df000715 	stw	fp,28(sp)
  814018:	df000704 	addi	fp,sp,28
  81401c:	e13ffb15 	stw	r4,-20(fp)
  814020:	e17ffc15 	stw	r5,-16(fp)
  814024:	e0800117 	ldw	r2,4(fp)
  814028:	e1bffd0d 	sth	r6,-12(fp)
  81402c:	e1fffe05 	stb	r7,-8(fp)
  814030:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  814034:	008020b4 	movhi	r2,130
  814038:	10be0304 	addi	r2,r2,-2036
  81403c:	10c00017 	ldw	r3,0(r2)
  814040:	008020b4 	movhi	r2,130
  814044:	10be0304 	addi	r2,r2,-2036
  814048:	10800017 	ldw	r2,0(r2)
  81404c:	10800c03 	ldbu	r2,48(r2)
  814050:	10800814 	ori	r2,r2,32
  814054:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  814058:	008020b4 	movhi	r2,130
  81405c:	10be0304 	addi	r2,r2,-2036
  814060:	10800017 	ldw	r2,0(r2)
  814064:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  814068:	008020b4 	movhi	r2,130
  81406c:	10be0304 	addi	r2,r2,-2036
  814070:	10c00017 	ldw	r3,0(r2)
  814074:	e0bfff0b 	ldhu	r2,-4(fp)
  814078:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  81407c:	008020b4 	movhi	r2,130
  814080:	10be0304 	addi	r2,r2,-2036
  814084:	10c00017 	ldw	r3,0(r2)
  814088:	e0bffc17 	ldw	r2,-16(fp)
  81408c:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  814090:	e0fffc17 	ldw	r3,-16(fp)
  814094:	e0bffd0b 	ldhu	r2,-12(fp)
  814098:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  81409c:	e0fffc17 	ldw	r3,-16(fp)
  8140a0:	e0bffe03 	ldbu	r2,-8(fp)
  8140a4:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  8140a8:	008020b4 	movhi	r2,130
  8140ac:	10be0304 	addi	r2,r2,-2036
  8140b0:	10c00017 	ldw	r3,0(r2)
  8140b4:	e0bffc17 	ldw	r2,-16(fp)
  8140b8:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  8140bc:	e0bffb17 	ldw	r2,-20(fp)
  8140c0:	10c00117 	ldw	r3,4(r2)
  8140c4:	e0bffc17 	ldw	r2,-16(fp)
  8140c8:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  8140cc:	e0bffc17 	ldw	r2,-16(fp)
  8140d0:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  8140d4:	e0fffc17 	ldw	r3,-16(fp)
  8140d8:	e0bffb17 	ldw	r2,-20(fp)
  8140dc:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  8140e0:	e0bffb17 	ldw	r2,-20(fp)
  8140e4:	10800117 	ldw	r2,4(r2)
  8140e8:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  8140ec:	e0bffa17 	ldw	r2,-24(fp)
  8140f0:	1005003a 	cmpeq	r2,r2,zero
  8140f4:	1000031e 	bne	r2,zero,814104 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  8140f8:	e0fffa17 	ldw	r3,-24(fp)
  8140fc:	e0bffc17 	ldw	r2,-16(fp)
  814100:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  814104:	e0fffb17 	ldw	r3,-20(fp)
  814108:	e0bffc17 	ldw	r2,-16(fp)
  81410c:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  814110:	008020b4 	movhi	r2,130
  814114:	10be0304 	addi	r2,r2,-2036
  814118:	10800017 	ldw	r2,0(r2)
  81411c:	10800d03 	ldbu	r2,52(r2)
  814120:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  814124:	e13ff903 	ldbu	r4,-28(fp)
  814128:	e0fff903 	ldbu	r3,-28(fp)
  81412c:	008020b4 	movhi	r2,130
  814130:	10be0044 	addi	r2,r2,-2047
  814134:	10c5883a 	add	r2,r2,r3
  814138:	10800003 	ldbu	r2,0(r2)
  81413c:	1007883a 	mov	r3,r2
  814140:	008020b4 	movhi	r2,130
  814144:	10be0304 	addi	r2,r2,-2036
  814148:	10800017 	ldw	r2,0(r2)
  81414c:	10800d43 	ldbu	r2,53(r2)
  814150:	0084303a 	nor	r2,zero,r2
  814154:	1884703a 	and	r2,r3,r2
  814158:	1007883a 	mov	r3,r2
  81415c:	008020b4 	movhi	r2,130
  814160:	10be0044 	addi	r2,r2,-2047
  814164:	1105883a 	add	r2,r2,r4
  814168:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  81416c:	e0fff903 	ldbu	r3,-28(fp)
  814170:	008020b4 	movhi	r2,130
  814174:	10be0044 	addi	r2,r2,-2047
  814178:	10c5883a 	add	r2,r2,r3
  81417c:	10800003 	ldbu	r2,0(r2)
  814180:	10803fcc 	andi	r2,r2,255
  814184:	1004c03a 	cmpne	r2,r2,zero
  814188:	10000e1e 	bne	r2,zero,8141c4 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  81418c:	008020b4 	movhi	r2,130
  814190:	10be0304 	addi	r2,r2,-2036
  814194:	10800017 	ldw	r2,0(r2)
  814198:	10800d83 	ldbu	r2,54(r2)
  81419c:	0084303a 	nor	r2,zero,r2
  8141a0:	1007883a 	mov	r3,r2
  8141a4:	008020b4 	movhi	r2,130
  8141a8:	10be0004 	addi	r2,r2,-2048
  8141ac:	10800003 	ldbu	r2,0(r2)
  8141b0:	1884703a 	and	r2,r3,r2
  8141b4:	1007883a 	mov	r3,r2
  8141b8:	008020b4 	movhi	r2,130
  8141bc:	10be0004 	addi	r2,r2,-2048
  8141c0:	10c00005 	stb	r3,0(r2)
    }
}
  8141c4:	e037883a 	mov	sp,fp
  8141c8:	df000017 	ldw	fp,0(sp)
  8141cc:	dec00104 	addi	sp,sp,4
  8141d0:	f800283a 	ret

008141d4 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  8141d4:	defffb04 	addi	sp,sp,-20
  8141d8:	dfc00415 	stw	ra,16(sp)
  8141dc:	df000315 	stw	fp,12(sp)
  8141e0:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  8141e4:	010020b4 	movhi	r4,130
  8141e8:	210e1504 	addi	r4,r4,14420
  8141ec:	0140dc04 	movi	r5,880
  8141f0:	08122040 	call	812204 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  8141f4:	008020b4 	movhi	r2,130
  8141f8:	108e1504 	addi	r2,r2,14420
  8141fc:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  814200:	008020b4 	movhi	r2,130
  814204:	108e2004 	addi	r2,r2,14464
  814208:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  81420c:	e03fff0d 	sth	zero,-4(fp)
  814210:	00001306 	br	814260 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  814214:	e0bffe17 	ldw	r2,-8(fp)
  814218:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  81421c:	e0fffe17 	ldw	r3,-8(fp)
  814220:	e0bffd17 	ldw	r2,-12(fp)
  814224:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  814228:	e0fffe17 	ldw	r3,-8(fp)
  81422c:	00800fc4 	movi	r2,63
  814230:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  814234:	e0bffe17 	ldw	r2,-8(fp)
  814238:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  81423c:	e0bffe17 	ldw	r2,-8(fp)
  814240:	10800b04 	addi	r2,r2,44
  814244:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  814248:	e0bffd17 	ldw	r2,-12(fp)
  81424c:	10800b04 	addi	r2,r2,44
  814250:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  814254:	e0bfff0b 	ldhu	r2,-4(fp)
  814258:	10800044 	addi	r2,r2,1
  81425c:	e0bfff0d 	sth	r2,-4(fp)
  814260:	e0bfff0b 	ldhu	r2,-4(fp)
  814264:	108004f0 	cmpltui	r2,r2,19
  814268:	103fea1e 	bne	r2,zero,814214 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  81426c:	e0bffe17 	ldw	r2,-8(fp)
  814270:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  814274:	e0bffe17 	ldw	r2,-8(fp)
  814278:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  81427c:	e0fffe17 	ldw	r3,-8(fp)
  814280:	00800fc4 	movi	r2,63
  814284:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  814288:	e0bffe17 	ldw	r2,-8(fp)
  81428c:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  814290:	00c020b4 	movhi	r3,130
  814294:	18fe0504 	addi	r3,r3,-2028
  814298:	008020b4 	movhi	r2,130
  81429c:	108e1504 	addi	r2,r2,14420
  8142a0:	18800015 	stw	r2,0(r3)
#endif
}
  8142a4:	e037883a 	mov	sp,fp
  8142a8:	dfc00117 	ldw	ra,4(sp)
  8142ac:	df000017 	ldw	fp,0(sp)
  8142b0:	dec00204 	addi	sp,sp,8
  8142b4:	f800283a 	ret

008142b8 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  8142b8:	defffa04 	addi	sp,sp,-24
  8142bc:	dfc00515 	stw	ra,20(sp)
  8142c0:	df000415 	stw	fp,16(sp)
  8142c4:	df000404 	addi	fp,sp,16
  8142c8:	e13ffe15 	stw	r4,-8(fp)
  8142cc:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  8142d0:	e0bffe17 	ldw	r2,-8(fp)
  8142d4:	10800217 	ldw	r2,8(r2)
  8142d8:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  8142dc:	e0bffd17 	ldw	r2,-12(fp)
  8142e0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  8142e4:	e0fffd17 	ldw	r3,-12(fp)
  8142e8:	e0bfff0b 	ldhu	r2,-4(fp)
  8142ec:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  8142f0:	e0bffd17 	ldw	r2,-12(fp)
  8142f4:	10c00c03 	ldbu	r3,48(r2)
  8142f8:	00bff7c4 	movi	r2,-33
  8142fc:	1884703a 	and	r2,r3,r2
  814300:	1007883a 	mov	r3,r2
  814304:	e0bffd17 	ldw	r2,-12(fp)
  814308:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  81430c:	e0bffd17 	ldw	r2,-12(fp)
  814310:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  814314:	e0bffd17 	ldw	r2,-12(fp)
  814318:	10800c03 	ldbu	r2,48(r2)
  81431c:	10803fcc 	andi	r2,r2,255
  814320:	1004c03a 	cmpne	r2,r2,zero
  814324:	10001f1e 	bne	r2,zero,8143a4 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  814328:	e0bffd17 	ldw	r2,-12(fp)
  81432c:	10c00d83 	ldbu	r3,54(r2)
  814330:	008020b4 	movhi	r2,130
  814334:	10be0004 	addi	r2,r2,-2048
  814338:	10800003 	ldbu	r2,0(r2)
  81433c:	1884b03a 	or	r2,r3,r2
  814340:	1007883a 	mov	r3,r2
  814344:	008020b4 	movhi	r2,130
  814348:	10be0004 	addi	r2,r2,-2048
  81434c:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  814350:	e0bffd17 	ldw	r2,-12(fp)
  814354:	10800d03 	ldbu	r2,52(r2)
  814358:	11003fcc 	andi	r4,r2,255
  81435c:	e0bffd17 	ldw	r2,-12(fp)
  814360:	10800d03 	ldbu	r2,52(r2)
  814364:	10c03fcc 	andi	r3,r2,255
  814368:	008020b4 	movhi	r2,130
  81436c:	10be0044 	addi	r2,r2,-2047
  814370:	10c5883a 	add	r2,r2,r3
  814374:	10c00003 	ldbu	r3,0(r2)
  814378:	e0bffd17 	ldw	r2,-12(fp)
  81437c:	10800d43 	ldbu	r2,53(r2)
  814380:	1884b03a 	or	r2,r3,r2
  814384:	1007883a 	mov	r3,r2
  814388:	008020b4 	movhi	r2,130
  81438c:	10be0044 	addi	r2,r2,-2047
  814390:	1105883a 	add	r2,r2,r4
  814394:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
  814398:	00800044 	movi	r2,1
  81439c:	e0bffc05 	stb	r2,-16(fp)
  8143a0:	00000106 	br	8143a8 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
  8143a4:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  8143a8:	e13ffe17 	ldw	r4,-8(fp)
  8143ac:	08143c80 	call	8143c8 <OS_FlagUnlink>
    return (sched);
  8143b0:	e0bffc03 	ldbu	r2,-16(fp)
}
  8143b4:	e037883a 	mov	sp,fp
  8143b8:	dfc00117 	ldw	ra,4(sp)
  8143bc:	df000017 	ldw	fp,0(sp)
  8143c0:	dec00204 	addi	sp,sp,8
  8143c4:	f800283a 	ret

008143c8 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  8143c8:	defffa04 	addi	sp,sp,-24
  8143cc:	df000515 	stw	fp,20(sp)
  8143d0:	df000504 	addi	fp,sp,20
  8143d4:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  8143d8:	e0bfff17 	ldw	r2,-4(fp)
  8143dc:	10800117 	ldw	r2,4(r2)
  8143e0:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  8143e4:	e0bfff17 	ldw	r2,-4(fp)
  8143e8:	10800017 	ldw	r2,0(r2)
  8143ec:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  8143f0:	e0bffc17 	ldw	r2,-16(fp)
  8143f4:	1004c03a 	cmpne	r2,r2,zero
  8143f8:	10000c1e 	bne	r2,zero,81442c <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  8143fc:	e0bfff17 	ldw	r2,-4(fp)
  814400:	10800317 	ldw	r2,12(r2)
  814404:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  814408:	e0fffd17 	ldw	r3,-12(fp)
  81440c:	e0bffb17 	ldw	r2,-20(fp)
  814410:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  814414:	e0bffb17 	ldw	r2,-20(fp)
  814418:	1005003a 	cmpeq	r2,r2,zero
  81441c:	10000c1e 	bne	r2,zero,814450 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  814420:	e0bffb17 	ldw	r2,-20(fp)
  814424:	10000115 	stw	zero,4(r2)
  814428:	00000906 	br	814450 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  81442c:	e0fffc17 	ldw	r3,-16(fp)
  814430:	e0bffb17 	ldw	r2,-20(fp)
  814434:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  814438:	e0bffb17 	ldw	r2,-20(fp)
  81443c:	1005003a 	cmpeq	r2,r2,zero
  814440:	1000031e 	bne	r2,zero,814450 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  814444:	e0fffb17 	ldw	r3,-20(fp)
  814448:	e0bffc17 	ldw	r2,-16(fp)
  81444c:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  814450:	e0bfff17 	ldw	r2,-4(fp)
  814454:	10800217 	ldw	r2,8(r2)
  814458:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  81445c:	e0bffe17 	ldw	r2,-8(fp)
  814460:	10000a15 	stw	zero,40(r2)
#endif
}
  814464:	e037883a 	mov	sp,fp
  814468:	df000017 	ldw	fp,0(sp)
  81446c:	dec00104 	addi	sp,sp,4
  814470:	f800283a 	ret

00814474 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  814474:	defff304 	addi	sp,sp,-52
  814478:	df000c15 	stw	fp,48(sp)
  81447c:	df000c04 	addi	fp,sp,48
  814480:	e13ffb15 	stw	r4,-20(fp)
  814484:	e17ffc15 	stw	r5,-16(fp)
  814488:	e1bffd15 	stw	r6,-12(fp)
  81448c:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  814490:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  814494:	e0bffe17 	ldw	r2,-8(fp)
  814498:	1004c03a 	cmpne	r2,r2,zero
  81449c:	1000021e 	bne	r2,zero,8144a8 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
  8144a0:	e03fff15 	stw	zero,-4(fp)
  8144a4:	00007506 	br	81467c <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  8144a8:	e0bffb17 	ldw	r2,-20(fp)
  8144ac:	1004c03a 	cmpne	r2,r2,zero
  8144b0:	1000051e 	bne	r2,zero,8144c8 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  8144b4:	e0fffe17 	ldw	r3,-8(fp)
  8144b8:	00801884 	movi	r2,98
  8144bc:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  8144c0:	e03fff15 	stw	zero,-4(fp)
  8144c4:	00006d06 	br	81467c <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  8144c8:	e0bffb17 	ldw	r2,-20(fp)
  8144cc:	108000cc 	andi	r2,r2,3
  8144d0:	1005003a 	cmpeq	r2,r2,zero
  8144d4:	1000051e 	bne	r2,zero,8144ec <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  8144d8:	e0fffe17 	ldw	r3,-8(fp)
  8144dc:	00801884 	movi	r2,98
  8144e0:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  8144e4:	e03fff15 	stw	zero,-4(fp)
  8144e8:	00006406 	br	81467c <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  8144ec:	e0bffc17 	ldw	r2,-16(fp)
  8144f0:	108000a8 	cmpgeui	r2,r2,2
  8144f4:	1000051e 	bne	r2,zero,81450c <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  8144f8:	e0fffe17 	ldw	r3,-8(fp)
  8144fc:	008016c4 	movi	r2,91
  814500:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  814504:	e03fff15 	stw	zero,-4(fp)
  814508:	00005c06 	br	81467c <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  81450c:	e0bffd17 	ldw	r2,-12(fp)
  814510:	10800128 	cmpgeui	r2,r2,4
  814514:	1000051e 	bne	r2,zero,81452c <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  814518:	e0fffe17 	ldw	r3,-8(fp)
  81451c:	00801704 	movi	r2,92
  814520:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  814524:	e03fff15 	stw	zero,-4(fp)
  814528:	00005406 	br	81467c <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81452c:	0005303a 	rdctl	r2,status
  814530:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814534:	e0fff517 	ldw	r3,-44(fp)
  814538:	00bfff84 	movi	r2,-2
  81453c:	1884703a 	and	r2,r3,r2
  814540:	1001703a 	wrctl	status,r2
  
  return context;
  814544:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  814548:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  81454c:	008020b4 	movhi	r2,130
  814550:	10bdfd04 	addi	r2,r2,-2060
  814554:	10800017 	ldw	r2,0(r2)
  814558:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  81455c:	008020b4 	movhi	r2,130
  814560:	10bdfd04 	addi	r2,r2,-2060
  814564:	10800017 	ldw	r2,0(r2)
  814568:	1005003a 	cmpeq	r2,r2,zero
  81456c:	1000081e 	bne	r2,zero,814590 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  814570:	008020b4 	movhi	r2,130
  814574:	10bdfd04 	addi	r2,r2,-2060
  814578:	10800017 	ldw	r2,0(r2)
  81457c:	10800117 	ldw	r2,4(r2)
  814580:	1007883a 	mov	r3,r2
  814584:	008020b4 	movhi	r2,130
  814588:	10bdfd04 	addi	r2,r2,-2060
  81458c:	10c00015 	stw	r3,0(r2)
  814590:	e0bff617 	ldw	r2,-40(fp)
  814594:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814598:	e0bff417 	ldw	r2,-48(fp)
  81459c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  8145a0:	e0bffa17 	ldw	r2,-24(fp)
  8145a4:	1004c03a 	cmpne	r2,r2,zero
  8145a8:	1000051e 	bne	r2,zero,8145c0 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
  8145ac:	e0fffe17 	ldw	r3,-8(fp)
  8145b0:	00801684 	movi	r2,90
  8145b4:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  8145b8:	e03fff15 	stw	zero,-4(fp)
  8145bc:	00002f06 	br	81467c <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  8145c0:	e0bffb17 	ldw	r2,-20(fp)
  8145c4:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  8145c8:	e0bffb17 	ldw	r2,-20(fp)
  8145cc:	1007883a 	mov	r3,r2
  8145d0:	e0bffd17 	ldw	r2,-12(fp)
  8145d4:	1885883a 	add	r2,r3,r2
  8145d8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
  8145dc:	e03ff715 	stw	zero,-36(fp)
  8145e0:	00000d06 	br	814618 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  8145e4:	e0fff817 	ldw	r3,-32(fp)
  8145e8:	e0bff917 	ldw	r2,-28(fp)
  8145ec:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  8145f0:	e0bff917 	ldw	r2,-28(fp)
  8145f4:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  8145f8:	e0bff917 	ldw	r2,-28(fp)
  8145fc:	1007883a 	mov	r3,r2
  814600:	e0bffd17 	ldw	r2,-12(fp)
  814604:	1885883a 	add	r2,r3,r2
  814608:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  81460c:	e0bff717 	ldw	r2,-36(fp)
  814610:	10800044 	addi	r2,r2,1
  814614:	e0bff715 	stw	r2,-36(fp)
  814618:	e0bffc17 	ldw	r2,-16(fp)
  81461c:	10ffffc4 	addi	r3,r2,-1
  814620:	e0bff717 	ldw	r2,-36(fp)
  814624:	10ffef36 	bltu	r2,r3,8145e4 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  814628:	e0bff817 	ldw	r2,-32(fp)
  81462c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  814630:	e0fffa17 	ldw	r3,-24(fp)
  814634:	e0bffb17 	ldw	r2,-20(fp)
  814638:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  81463c:	e0fffa17 	ldw	r3,-24(fp)
  814640:	e0bffb17 	ldw	r2,-20(fp)
  814644:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  814648:	e0fffa17 	ldw	r3,-24(fp)
  81464c:	e0bffc17 	ldw	r2,-16(fp)
  814650:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
  814654:	e0fffa17 	ldw	r3,-24(fp)
  814658:	e0bffc17 	ldw	r2,-16(fp)
  81465c:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  814660:	e0fffa17 	ldw	r3,-24(fp)
  814664:	e0bffd17 	ldw	r2,-12(fp)
  814668:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
  81466c:	e0bffe17 	ldw	r2,-8(fp)
  814670:	10000005 	stb	zero,0(r2)
    return (pmem);
  814674:	e0bffa17 	ldw	r2,-24(fp)
  814678:	e0bfff15 	stw	r2,-4(fp)
  81467c:	e0bfff17 	ldw	r2,-4(fp)
}
  814680:	e037883a 	mov	sp,fp
  814684:	df000017 	ldw	fp,0(sp)
  814688:	dec00104 	addi	sp,sp,4
  81468c:	f800283a 	ret

00814690 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  814690:	defff704 	addi	sp,sp,-36
  814694:	df000815 	stw	fp,32(sp)
  814698:	df000804 	addi	fp,sp,32
  81469c:	e13ffd15 	stw	r4,-12(fp)
  8146a0:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8146a4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8146a8:	e0bffe17 	ldw	r2,-8(fp)
  8146ac:	1004c03a 	cmpne	r2,r2,zero
  8146b0:	1000021e 	bne	r2,zero,8146bc <OSMemGet+0x2c>
        return ((void *)0);
  8146b4:	e03fff15 	stw	zero,-4(fp)
  8146b8:	00003106 	br	814780 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  8146bc:	e0bffd17 	ldw	r2,-12(fp)
  8146c0:	1004c03a 	cmpne	r2,r2,zero
  8146c4:	1000051e 	bne	r2,zero,8146dc <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  8146c8:	e0fffe17 	ldw	r3,-8(fp)
  8146cc:	00801804 	movi	r2,96
  8146d0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  8146d4:	e03fff15 	stw	zero,-4(fp)
  8146d8:	00002906 	br	814780 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8146dc:	0005303a 	rdctl	r2,status
  8146e0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8146e4:	e0fffa17 	ldw	r3,-24(fp)
  8146e8:	00bfff84 	movi	r2,-2
  8146ec:	1884703a 	and	r2,r3,r2
  8146f0:	1001703a 	wrctl	status,r2
  
  return context;
  8146f4:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8146f8:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  8146fc:	e0bffd17 	ldw	r2,-12(fp)
  814700:	10800417 	ldw	r2,16(r2)
  814704:	1005003a 	cmpeq	r2,r2,zero
  814708:	1000151e 	bne	r2,zero,814760 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  81470c:	e0bffd17 	ldw	r2,-12(fp)
  814710:	10800117 	ldw	r2,4(r2)
  814714:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  814718:	e0bffc17 	ldw	r2,-16(fp)
  81471c:	10c00017 	ldw	r3,0(r2)
  814720:	e0bffd17 	ldw	r2,-12(fp)
  814724:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  814728:	e0bffd17 	ldw	r2,-12(fp)
  81472c:	10800417 	ldw	r2,16(r2)
  814730:	10ffffc4 	addi	r3,r2,-1
  814734:	e0bffd17 	ldw	r2,-12(fp)
  814738:	10c00415 	stw	r3,16(r2)
  81473c:	e0bffb17 	ldw	r2,-20(fp)
  814740:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814744:	e0bff917 	ldw	r2,-28(fp)
  814748:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  81474c:	e0bffe17 	ldw	r2,-8(fp)
  814750:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  814754:	e0bffc17 	ldw	r2,-16(fp)
  814758:	e0bfff15 	stw	r2,-4(fp)
  81475c:	00000806 	br	814780 <OSMemGet+0xf0>
  814760:	e0bffb17 	ldw	r2,-20(fp)
  814764:	e0bff815 	stw	r2,-32(fp)
  814768:	e0bff817 	ldw	r2,-32(fp)
  81476c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  814770:	e0fffe17 	ldw	r3,-8(fp)
  814774:	00801744 	movi	r2,93
  814778:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  81477c:	e03fff15 	stw	zero,-4(fp)
  814780:	e0bfff17 	ldw	r2,-4(fp)
}
  814784:	e037883a 	mov	sp,fp
  814788:	df000017 	ldw	fp,0(sp)
  81478c:	dec00104 	addi	sp,sp,4
  814790:	f800283a 	ret

00814794 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  814794:	defff604 	addi	sp,sp,-40
  814798:	dfc00915 	stw	ra,36(sp)
  81479c:	df000815 	stw	fp,32(sp)
  8147a0:	df000804 	addi	fp,sp,32
  8147a4:	e13ffc15 	stw	r4,-16(fp)
  8147a8:	e17ffd15 	stw	r5,-12(fp)
  8147ac:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8147b0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8147b4:	e0bffe17 	ldw	r2,-8(fp)
  8147b8:	1004c03a 	cmpne	r2,r2,zero
  8147bc:	1000021e 	bne	r2,zero,8147c8 <OSMemNameGet+0x34>
        return (0);
  8147c0:	e03fff15 	stw	zero,-4(fp)
  8147c4:	00003006 	br	814888 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  8147c8:	e0bffc17 	ldw	r2,-16(fp)
  8147cc:	1004c03a 	cmpne	r2,r2,zero
  8147d0:	1000051e 	bne	r2,zero,8147e8 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  8147d4:	e0fffe17 	ldw	r3,-8(fp)
  8147d8:	00801804 	movi	r2,96
  8147dc:	18800005 	stb	r2,0(r3)
        return (0);
  8147e0:	e03fff15 	stw	zero,-4(fp)
  8147e4:	00002806 	br	814888 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  8147e8:	e0bffd17 	ldw	r2,-12(fp)
  8147ec:	1004c03a 	cmpne	r2,r2,zero
  8147f0:	1000051e 	bne	r2,zero,814808 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  8147f4:	e0fffe17 	ldw	r3,-8(fp)
  8147f8:	00800304 	movi	r2,12
  8147fc:	18800005 	stb	r2,0(r3)
        return (0);
  814800:	e03fff15 	stw	zero,-4(fp)
  814804:	00002006 	br	814888 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  814808:	008020b4 	movhi	r2,130
  81480c:	10be0204 	addi	r2,r2,-2040
  814810:	10800003 	ldbu	r2,0(r2)
  814814:	10803fcc 	andi	r2,r2,255
  814818:	1005003a 	cmpeq	r2,r2,zero
  81481c:	1000051e 	bne	r2,zero,814834 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  814820:	e0fffe17 	ldw	r3,-8(fp)
  814824:	00800444 	movi	r2,17
  814828:	18800005 	stb	r2,0(r3)
        return (0);
  81482c:	e03fff15 	stw	zero,-4(fp)
  814830:	00001506 	br	814888 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814834:	0005303a 	rdctl	r2,status
  814838:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81483c:	e0fff917 	ldw	r3,-28(fp)
  814840:	00bfff84 	movi	r2,-2
  814844:	1884703a 	and	r2,r3,r2
  814848:	1001703a 	wrctl	status,r2
  
  return context;
  81484c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  814850:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  814854:	e0bffc17 	ldw	r2,-16(fp)
  814858:	11400504 	addi	r5,r2,20
  81485c:	e13ffd17 	ldw	r4,-12(fp)
  814860:	08124080 	call	812408 <OS_StrCopy>
  814864:	e0bffb05 	stb	r2,-20(fp)
  814868:	e0bffa17 	ldw	r2,-24(fp)
  81486c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814870:	e0bff817 	ldw	r2,-32(fp)
  814874:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  814878:	e0bffe17 	ldw	r2,-8(fp)
  81487c:	10000005 	stb	zero,0(r2)
    return (len);
  814880:	e0bffb03 	ldbu	r2,-20(fp)
  814884:	e0bfff15 	stw	r2,-4(fp)
  814888:	e0bfff17 	ldw	r2,-4(fp)
}
  81488c:	e037883a 	mov	sp,fp
  814890:	dfc00117 	ldw	ra,4(sp)
  814894:	df000017 	ldw	fp,0(sp)
  814898:	dec00204 	addi	sp,sp,8
  81489c:	f800283a 	ret

008148a0 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  8148a0:	defff604 	addi	sp,sp,-40
  8148a4:	dfc00915 	stw	ra,36(sp)
  8148a8:	df000815 	stw	fp,32(sp)
  8148ac:	df000804 	addi	fp,sp,32
  8148b0:	e13ffd15 	stw	r4,-12(fp)
  8148b4:	e17ffe15 	stw	r5,-8(fp)
  8148b8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8148bc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8148c0:	e0bfff17 	ldw	r2,-4(fp)
  8148c4:	1005003a 	cmpeq	r2,r2,zero
  8148c8:	1000381e 	bne	r2,zero,8149ac <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  8148cc:	e0bffd17 	ldw	r2,-12(fp)
  8148d0:	1004c03a 	cmpne	r2,r2,zero
  8148d4:	1000041e 	bne	r2,zero,8148e8 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  8148d8:	e0ffff17 	ldw	r3,-4(fp)
  8148dc:	00801804 	movi	r2,96
  8148e0:	18800005 	stb	r2,0(r3)
        return;
  8148e4:	00003106 	br	8149ac <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  8148e8:	e0bffe17 	ldw	r2,-8(fp)
  8148ec:	1004c03a 	cmpne	r2,r2,zero
  8148f0:	1000041e 	bne	r2,zero,814904 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  8148f4:	e0ffff17 	ldw	r3,-4(fp)
  8148f8:	00800304 	movi	r2,12
  8148fc:	18800005 	stb	r2,0(r3)
        return;
  814900:	00002a06 	br	8149ac <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  814904:	008020b4 	movhi	r2,130
  814908:	10be0204 	addi	r2,r2,-2040
  81490c:	10800003 	ldbu	r2,0(r2)
  814910:	10803fcc 	andi	r2,r2,255
  814914:	1005003a 	cmpeq	r2,r2,zero
  814918:	1000041e 	bne	r2,zero,81492c <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  81491c:	e0ffff17 	ldw	r3,-4(fp)
  814920:	00800484 	movi	r2,18
  814924:	18800005 	stb	r2,0(r3)
        return;
  814928:	00002006 	br	8149ac <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81492c:	0005303a 	rdctl	r2,status
  814930:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814934:	e0fffa17 	ldw	r3,-24(fp)
  814938:	00bfff84 	movi	r2,-2
  81493c:	1884703a 	and	r2,r3,r2
  814940:	1001703a 	wrctl	status,r2
  
  return context;
  814944:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  814948:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  81494c:	e13ffe17 	ldw	r4,-8(fp)
  814950:	08124880 	call	812488 <OS_StrLen>
  814954:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  814958:	e0bffc03 	ldbu	r2,-16(fp)
  81495c:	10800830 	cmpltui	r2,r2,32
  814960:	1000081e 	bne	r2,zero,814984 <OSMemNameSet+0xe4>
  814964:	e0bffb17 	ldw	r2,-20(fp)
  814968:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81496c:	e0bff917 	ldw	r2,-28(fp)
  814970:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  814974:	e0ffff17 	ldw	r3,-4(fp)
  814978:	008018c4 	movi	r2,99
  81497c:	18800005 	stb	r2,0(r3)
        return;
  814980:	00000a06 	br	8149ac <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  814984:	e0bffd17 	ldw	r2,-12(fp)
  814988:	11000504 	addi	r4,r2,20
  81498c:	e17ffe17 	ldw	r5,-8(fp)
  814990:	08124080 	call	812408 <OS_StrCopy>
  814994:	e0bffb17 	ldw	r2,-20(fp)
  814998:	e0bff815 	stw	r2,-32(fp)
  81499c:	e0bff817 	ldw	r2,-32(fp)
  8149a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8149a4:	e0bfff17 	ldw	r2,-4(fp)
  8149a8:	10000005 	stb	zero,0(r2)
}
  8149ac:	e037883a 	mov	sp,fp
  8149b0:	dfc00117 	ldw	ra,4(sp)
  8149b4:	df000017 	ldw	fp,0(sp)
  8149b8:	dec00204 	addi	sp,sp,8
  8149bc:	f800283a 	ret

008149c0 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  8149c0:	defff804 	addi	sp,sp,-32
  8149c4:	df000715 	stw	fp,28(sp)
  8149c8:	df000704 	addi	fp,sp,28
  8149cc:	e13ffd15 	stw	r4,-12(fp)
  8149d0:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8149d4:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  8149d8:	e0bffd17 	ldw	r2,-12(fp)
  8149dc:	1004c03a 	cmpne	r2,r2,zero
  8149e0:	1000031e 	bne	r2,zero,8149f0 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  8149e4:	00801804 	movi	r2,96
  8149e8:	e0bfff15 	stw	r2,-4(fp)
  8149ec:	00002b06 	br	814a9c <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  8149f0:	e0bffe17 	ldw	r2,-8(fp)
  8149f4:	1004c03a 	cmpne	r2,r2,zero
  8149f8:	1000031e 	bne	r2,zero,814a08 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
  8149fc:	008017c4 	movi	r2,95
  814a00:	e0bfff15 	stw	r2,-4(fp)
  814a04:	00002506 	br	814a9c <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814a08:	0005303a 	rdctl	r2,status
  814a0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814a10:	e0fffb17 	ldw	r3,-20(fp)
  814a14:	00bfff84 	movi	r2,-2
  814a18:	1884703a 	and	r2,r3,r2
  814a1c:	1001703a 	wrctl	status,r2
  
  return context;
  814a20:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  814a24:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  814a28:	e0bffd17 	ldw	r2,-12(fp)
  814a2c:	10c00417 	ldw	r3,16(r2)
  814a30:	e0bffd17 	ldw	r2,-12(fp)
  814a34:	10800317 	ldw	r2,12(r2)
  814a38:	18800736 	bltu	r3,r2,814a58 <OSMemPut+0x98>
  814a3c:	e0bffc17 	ldw	r2,-16(fp)
  814a40:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814a44:	e0bffa17 	ldw	r2,-24(fp)
  814a48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  814a4c:	00801784 	movi	r2,94
  814a50:	e0bfff15 	stw	r2,-4(fp)
  814a54:	00001106 	br	814a9c <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  814a58:	e0fffe17 	ldw	r3,-8(fp)
  814a5c:	e0bffd17 	ldw	r2,-12(fp)
  814a60:	10800117 	ldw	r2,4(r2)
  814a64:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
  814a68:	e0fffd17 	ldw	r3,-12(fp)
  814a6c:	e0bffe17 	ldw	r2,-8(fp)
  814a70:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  814a74:	e0bffd17 	ldw	r2,-12(fp)
  814a78:	10800417 	ldw	r2,16(r2)
  814a7c:	10c00044 	addi	r3,r2,1
  814a80:	e0bffd17 	ldw	r2,-12(fp)
  814a84:	10c00415 	stw	r3,16(r2)
  814a88:	e0bffc17 	ldw	r2,-16(fp)
  814a8c:	e0bff915 	stw	r2,-28(fp)
  814a90:	e0bff917 	ldw	r2,-28(fp)
  814a94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  814a98:	e03fff15 	stw	zero,-4(fp)
  814a9c:	e0bfff17 	ldw	r2,-4(fp)
}
  814aa0:	e037883a 	mov	sp,fp
  814aa4:	df000017 	ldw	fp,0(sp)
  814aa8:	dec00104 	addi	sp,sp,4
  814aac:	f800283a 	ret

00814ab0 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  814ab0:	defff904 	addi	sp,sp,-28
  814ab4:	df000615 	stw	fp,24(sp)
  814ab8:	df000604 	addi	fp,sp,24
  814abc:	e13ffd15 	stw	r4,-12(fp)
  814ac0:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  814ac4:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  814ac8:	e0bffd17 	ldw	r2,-12(fp)
  814acc:	1004c03a 	cmpne	r2,r2,zero
  814ad0:	1000031e 	bne	r2,zero,814ae0 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  814ad4:	00801804 	movi	r2,96
  814ad8:	e0bfff15 	stw	r2,-4(fp)
  814adc:	00002e06 	br	814b98 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  814ae0:	e0bffe17 	ldw	r2,-8(fp)
  814ae4:	1004c03a 	cmpne	r2,r2,zero
  814ae8:	1000031e 	bne	r2,zero,814af8 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
  814aec:	00801844 	movi	r2,97
  814af0:	e0bfff15 	stw	r2,-4(fp)
  814af4:	00002806 	br	814b98 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814af8:	0005303a 	rdctl	r2,status
  814afc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814b00:	e0fffb17 	ldw	r3,-20(fp)
  814b04:	00bfff84 	movi	r2,-2
  814b08:	1884703a 	and	r2,r3,r2
  814b0c:	1001703a 	wrctl	status,r2
  
  return context;
  814b10:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  814b14:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  814b18:	e0bffd17 	ldw	r2,-12(fp)
  814b1c:	10c00017 	ldw	r3,0(r2)
  814b20:	e0bffe17 	ldw	r2,-8(fp)
  814b24:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  814b28:	e0bffd17 	ldw	r2,-12(fp)
  814b2c:	10c00117 	ldw	r3,4(r2)
  814b30:	e0bffe17 	ldw	r2,-8(fp)
  814b34:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  814b38:	e0bffd17 	ldw	r2,-12(fp)
  814b3c:	10c00217 	ldw	r3,8(r2)
  814b40:	e0bffe17 	ldw	r2,-8(fp)
  814b44:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  814b48:	e0bffd17 	ldw	r2,-12(fp)
  814b4c:	10c00317 	ldw	r3,12(r2)
  814b50:	e0bffe17 	ldw	r2,-8(fp)
  814b54:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  814b58:	e0bffd17 	ldw	r2,-12(fp)
  814b5c:	10c00417 	ldw	r3,16(r2)
  814b60:	e0bffe17 	ldw	r2,-8(fp)
  814b64:	10c00415 	stw	r3,16(r2)
  814b68:	e0bffc17 	ldw	r2,-16(fp)
  814b6c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814b70:	e0bffa17 	ldw	r2,-24(fp)
  814b74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  814b78:	e0bffe17 	ldw	r2,-8(fp)
  814b7c:	10c00317 	ldw	r3,12(r2)
  814b80:	e0bffe17 	ldw	r2,-8(fp)
  814b84:	10800417 	ldw	r2,16(r2)
  814b88:	1887c83a 	sub	r3,r3,r2
  814b8c:	e0bffe17 	ldw	r2,-8(fp)
  814b90:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  814b94:	e03fff15 	stw	zero,-4(fp)
  814b98:	e0bfff17 	ldw	r2,-4(fp)
}
  814b9c:	e037883a 	mov	sp,fp
  814ba0:	df000017 	ldw	fp,0(sp)
  814ba4:	dec00104 	addi	sp,sp,4
  814ba8:	f800283a 	ret

00814bac <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  814bac:	defffc04 	addi	sp,sp,-16
  814bb0:	dfc00315 	stw	ra,12(sp)
  814bb4:	df000215 	stw	fp,8(sp)
  814bb8:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  814bbc:	010020b4 	movhi	r4,130
  814bc0:	210ef104 	addi	r4,r4,15300
  814bc4:	01430c04 	movi	r5,3120
  814bc8:	08122040 	call	812204 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  814bcc:	008020b4 	movhi	r2,130
  814bd0:	108ef104 	addi	r2,r2,15300
  814bd4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  814bd8:	e03ffe0d 	sth	zero,-8(fp)
  814bdc:	00001406 	br	814c30 <OS_MemInit+0x84>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  814be0:	e13ffe0b 	ldhu	r4,-8(fp)
  814be4:	01400d04 	movi	r5,52
  814be8:	0806c3c0 	call	806c3c <__mulsi3>
  814bec:	1007883a 	mov	r3,r2
  814bf0:	008020b4 	movhi	r2,130
  814bf4:	108efe04 	addi	r2,r2,15352
  814bf8:	1887883a 	add	r3,r3,r2
  814bfc:	e0bfff17 	ldw	r2,-4(fp)
  814c00:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  814c04:	e0ffff17 	ldw	r3,-4(fp)
  814c08:	00800fc4 	movi	r2,63
  814c0c:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  814c10:	e0bfff17 	ldw	r2,-4(fp)
  814c14:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  814c18:	e0bfff17 	ldw	r2,-4(fp)
  814c1c:	10800d04 	addi	r2,r2,52
  814c20:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  814c24:	e0bffe0b 	ldhu	r2,-8(fp)
  814c28:	10800044 	addi	r2,r2,1
  814c2c:	e0bffe0d 	sth	r2,-8(fp)
  814c30:	e0bffe0b 	ldhu	r2,-8(fp)
  814c34:	10800ef0 	cmpltui	r2,r2,59
  814c38:	103fe91e 	bne	r2,zero,814be0 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  814c3c:	e0bfff17 	ldw	r2,-4(fp)
  814c40:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  814c44:	e0ffff17 	ldw	r3,-4(fp)
  814c48:	00800fc4 	movi	r2,63
  814c4c:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  814c50:	e0bfff17 	ldw	r2,-4(fp)
  814c54:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  814c58:	00c020b4 	movhi	r3,130
  814c5c:	18fdfd04 	addi	r3,r3,-2060
  814c60:	008020b4 	movhi	r2,130
  814c64:	108ef104 	addi	r2,r2,15300
  814c68:	18800015 	stw	r2,0(r3)
#endif
}
  814c6c:	e037883a 	mov	sp,fp
  814c70:	dfc00117 	ldw	ra,4(sp)
  814c74:	df000017 	ldw	fp,0(sp)
  814c78:	dec00204 	addi	sp,sp,8
  814c7c:	f800283a 	ret

00814c80 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  814c80:	defff704 	addi	sp,sp,-36
  814c84:	df000815 	stw	fp,32(sp)
  814c88:	df000804 	addi	fp,sp,32
  814c8c:	e13ffd15 	stw	r4,-12(fp)
  814c90:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  814c94:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  814c98:	e0bffe17 	ldw	r2,-8(fp)
  814c9c:	1004c03a 	cmpne	r2,r2,zero
  814ca0:	1000021e 	bne	r2,zero,814cac <OSQAccept+0x2c>
        return ((void *)0);
  814ca4:	e03fff15 	stw	zero,-4(fp)
  814ca8:	00004506 	br	814dc0 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  814cac:	e0bffd17 	ldw	r2,-12(fp)
  814cb0:	1004c03a 	cmpne	r2,r2,zero
  814cb4:	1000051e 	bne	r2,zero,814ccc <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  814cb8:	e0fffe17 	ldw	r3,-8(fp)
  814cbc:	00800104 	movi	r2,4
  814cc0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  814cc4:	e03fff15 	stw	zero,-4(fp)
  814cc8:	00003d06 	br	814dc0 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  814ccc:	e0bffd17 	ldw	r2,-12(fp)
  814cd0:	10800003 	ldbu	r2,0(r2)
  814cd4:	10803fcc 	andi	r2,r2,255
  814cd8:	108000a0 	cmpeqi	r2,r2,2
  814cdc:	1000051e 	bne	r2,zero,814cf4 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  814ce0:	e0fffe17 	ldw	r3,-8(fp)
  814ce4:	00800044 	movi	r2,1
  814ce8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  814cec:	e03fff15 	stw	zero,-4(fp)
  814cf0:	00003306 	br	814dc0 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814cf4:	0005303a 	rdctl	r2,status
  814cf8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814cfc:	e0fff917 	ldw	r3,-28(fp)
  814d00:	00bfff84 	movi	r2,-2
  814d04:	1884703a 	and	r2,r3,r2
  814d08:	1001703a 	wrctl	status,r2
  
  return context;
  814d0c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  814d10:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  814d14:	e0bffd17 	ldw	r2,-12(fp)
  814d18:	10800117 	ldw	r2,4(r2)
  814d1c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  814d20:	e0bffb17 	ldw	r2,-20(fp)
  814d24:	1080058b 	ldhu	r2,22(r2)
  814d28:	10bfffcc 	andi	r2,r2,65535
  814d2c:	1005003a 	cmpeq	r2,r2,zero
  814d30:	1000191e 	bne	r2,zero,814d98 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  814d34:	e0bffb17 	ldw	r2,-20(fp)
  814d38:	10c00417 	ldw	r3,16(r2)
  814d3c:	18800017 	ldw	r2,0(r3)
  814d40:	e0bffc15 	stw	r2,-16(fp)
  814d44:	18c00104 	addi	r3,r3,4
  814d48:	e0bffb17 	ldw	r2,-20(fp)
  814d4c:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  814d50:	e0bffb17 	ldw	r2,-20(fp)
  814d54:	1080058b 	ldhu	r2,22(r2)
  814d58:	10bfffc4 	addi	r2,r2,-1
  814d5c:	1007883a 	mov	r3,r2
  814d60:	e0bffb17 	ldw	r2,-20(fp)
  814d64:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  814d68:	e0bffb17 	ldw	r2,-20(fp)
  814d6c:	10c00417 	ldw	r3,16(r2)
  814d70:	e0bffb17 	ldw	r2,-20(fp)
  814d74:	10800217 	ldw	r2,8(r2)
  814d78:	1880041e 	bne	r3,r2,814d8c <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
  814d7c:	e0bffb17 	ldw	r2,-20(fp)
  814d80:	10c00117 	ldw	r3,4(r2)
  814d84:	e0bffb17 	ldw	r2,-20(fp)
  814d88:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  814d8c:	e0bffe17 	ldw	r2,-8(fp)
  814d90:	10000005 	stb	zero,0(r2)
  814d94:	00000406 	br	814da8 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  814d98:	e0fffe17 	ldw	r3,-8(fp)
  814d9c:	008007c4 	movi	r2,31
  814da0:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  814da4:	e03ffc15 	stw	zero,-16(fp)
  814da8:	e0bffa17 	ldw	r2,-24(fp)
  814dac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814db0:	e0bff817 	ldw	r2,-32(fp)
  814db4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  814db8:	e0bffc17 	ldw	r2,-16(fp)
  814dbc:	e0bfff15 	stw	r2,-4(fp)
  814dc0:	e0bfff17 	ldw	r2,-4(fp)
}
  814dc4:	e037883a 	mov	sp,fp
  814dc8:	df000017 	ldw	fp,0(sp)
  814dcc:	dec00104 	addi	sp,sp,4
  814dd0:	f800283a 	ret

00814dd4 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  814dd4:	defff304 	addi	sp,sp,-52
  814dd8:	dfc00c15 	stw	ra,48(sp)
  814ddc:	df000b15 	stw	fp,44(sp)
  814de0:	df000b04 	addi	fp,sp,44
  814de4:	e13ffd15 	stw	r4,-12(fp)
  814de8:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  814dec:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  814df0:	008020b4 	movhi	r2,130
  814df4:	10be0204 	addi	r2,r2,-2040
  814df8:	10800003 	ldbu	r2,0(r2)
  814dfc:	10803fcc 	andi	r2,r2,255
  814e00:	1005003a 	cmpeq	r2,r2,zero
  814e04:	1000021e 	bne	r2,zero,814e10 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  814e08:	e03fff15 	stw	zero,-4(fp)
  814e0c:	00007006 	br	814fd0 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814e10:	0005303a 	rdctl	r2,status
  814e14:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814e18:	e0fff917 	ldw	r3,-28(fp)
  814e1c:	00bfff84 	movi	r2,-2
  814e20:	1884703a 	and	r2,r3,r2
  814e24:	1001703a 	wrctl	status,r2
  
  return context;
  814e28:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  814e2c:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  814e30:	008020b4 	movhi	r2,130
  814e34:	10be0104 	addi	r2,r2,-2044
  814e38:	10800017 	ldw	r2,0(r2)
  814e3c:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  814e40:	008020b4 	movhi	r2,130
  814e44:	10be0104 	addi	r2,r2,-2044
  814e48:	10800017 	ldw	r2,0(r2)
  814e4c:	1005003a 	cmpeq	r2,r2,zero
  814e50:	1000081e 	bne	r2,zero,814e74 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  814e54:	008020b4 	movhi	r2,130
  814e58:	10be0104 	addi	r2,r2,-2044
  814e5c:	10800017 	ldw	r2,0(r2)
  814e60:	10800117 	ldw	r2,4(r2)
  814e64:	1007883a 	mov	r3,r2
  814e68:	008020b4 	movhi	r2,130
  814e6c:	10be0104 	addi	r2,r2,-2044
  814e70:	10c00015 	stw	r3,0(r2)
  814e74:	e0bffa17 	ldw	r2,-24(fp)
  814e78:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814e7c:	e0bff817 	ldw	r2,-32(fp)
  814e80:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  814e84:	e0bffc17 	ldw	r2,-16(fp)
  814e88:	1005003a 	cmpeq	r2,r2,zero
  814e8c:	10004e1e 	bne	r2,zero,814fc8 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814e90:	0005303a 	rdctl	r2,status
  814e94:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814e98:	e0fff717 	ldw	r3,-36(fp)
  814e9c:	00bfff84 	movi	r2,-2
  814ea0:	1884703a 	and	r2,r3,r2
  814ea4:	1001703a 	wrctl	status,r2
  
  return context;
  814ea8:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
  814eac:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  814eb0:	008020b4 	movhi	r2,130
  814eb4:	10bdff04 	addi	r2,r2,-2052
  814eb8:	10800017 	ldw	r2,0(r2)
  814ebc:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  814ec0:	e0bffb17 	ldw	r2,-20(fp)
  814ec4:	1005003a 	cmpeq	r2,r2,zero
  814ec8:	1000311e 	bne	r2,zero,814f90 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  814ecc:	008020b4 	movhi	r2,130
  814ed0:	10bdff04 	addi	r2,r2,-2052
  814ed4:	10800017 	ldw	r2,0(r2)
  814ed8:	10c00017 	ldw	r3,0(r2)
  814edc:	008020b4 	movhi	r2,130
  814ee0:	10bdff04 	addi	r2,r2,-2052
  814ee4:	10c00015 	stw	r3,0(r2)
  814ee8:	e0bffa17 	ldw	r2,-24(fp)
  814eec:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814ef0:	e0bff617 	ldw	r2,-40(fp)
  814ef4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  814ef8:	e0fffb17 	ldw	r3,-20(fp)
  814efc:	e0bffd17 	ldw	r2,-12(fp)
  814f00:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
  814f04:	e0bffe0b 	ldhu	r2,-8(fp)
  814f08:	1085883a 	add	r2,r2,r2
  814f0c:	1085883a 	add	r2,r2,r2
  814f10:	1007883a 	mov	r3,r2
  814f14:	e0bffd17 	ldw	r2,-12(fp)
  814f18:	1887883a 	add	r3,r3,r2
  814f1c:	e0bffb17 	ldw	r2,-20(fp)
  814f20:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  814f24:	e0fffb17 	ldw	r3,-20(fp)
  814f28:	e0bffd17 	ldw	r2,-12(fp)
  814f2c:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
  814f30:	e0fffb17 	ldw	r3,-20(fp)
  814f34:	e0bffd17 	ldw	r2,-12(fp)
  814f38:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
  814f3c:	e0fffb17 	ldw	r3,-20(fp)
  814f40:	e0bffe0b 	ldhu	r2,-8(fp)
  814f44:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
  814f48:	e0bffb17 	ldw	r2,-20(fp)
  814f4c:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  814f50:	e0fffc17 	ldw	r3,-16(fp)
  814f54:	00800084 	movi	r2,2
  814f58:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
  814f5c:	e0bffc17 	ldw	r2,-16(fp)
  814f60:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  814f64:	e0fffc17 	ldw	r3,-16(fp)
  814f68:	e0bffb17 	ldw	r2,-20(fp)
  814f6c:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  814f70:	e0fffc17 	ldw	r3,-16(fp)
  814f74:	00800fc4 	movi	r2,63
  814f78:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  814f7c:	e0bffc17 	ldw	r2,-16(fp)
  814f80:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  814f84:	e13ffc17 	ldw	r4,-16(fp)
  814f88:	0811e380 	call	811e38 <OS_EventWaitListInit>
  814f8c:	00000e06 	br	814fc8 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  814f90:	008020b4 	movhi	r2,130
  814f94:	10be0104 	addi	r2,r2,-2044
  814f98:	10c00017 	ldw	r3,0(r2)
  814f9c:	e0bffc17 	ldw	r2,-16(fp)
  814fa0:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  814fa4:	00c020b4 	movhi	r3,130
  814fa8:	18fe0104 	addi	r3,r3,-2044
  814fac:	e0bffc17 	ldw	r2,-16(fp)
  814fb0:	18800015 	stw	r2,0(r3)
  814fb4:	e0bffa17 	ldw	r2,-24(fp)
  814fb8:	e0bff515 	stw	r2,-44(fp)
  814fbc:	e0bff517 	ldw	r2,-44(fp)
  814fc0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  814fc4:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
  814fc8:	e0bffc17 	ldw	r2,-16(fp)
  814fcc:	e0bfff15 	stw	r2,-4(fp)
  814fd0:	e0bfff17 	ldw	r2,-4(fp)
}
  814fd4:	e037883a 	mov	sp,fp
  814fd8:	dfc00117 	ldw	ra,4(sp)
  814fdc:	df000017 	ldw	fp,0(sp)
  814fe0:	dec00204 	addi	sp,sp,8
  814fe4:	f800283a 	ret

00814fe8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  814fe8:	defff004 	addi	sp,sp,-64
  814fec:	dfc00f15 	stw	ra,60(sp)
  814ff0:	df000e15 	stw	fp,56(sp)
  814ff4:	df000e04 	addi	fp,sp,56
  814ff8:	e13ffb15 	stw	r4,-20(fp)
  814ffc:	e1bffd15 	stw	r6,-12(fp)
  815000:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  815004:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  815008:	e0bffd17 	ldw	r2,-12(fp)
  81500c:	1004c03a 	cmpne	r2,r2,zero
  815010:	1000031e 	bne	r2,zero,815020 <OSQDel+0x38>
        return (pevent);
  815014:	e0bffb17 	ldw	r2,-20(fp)
  815018:	e0bfff15 	stw	r2,-4(fp)
  81501c:	0000ac06 	br	8152d0 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  815020:	e0bffb17 	ldw	r2,-20(fp)
  815024:	1004c03a 	cmpne	r2,r2,zero
  815028:	1000061e 	bne	r2,zero,815044 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  81502c:	e0fffd17 	ldw	r3,-12(fp)
  815030:	00800104 	movi	r2,4
  815034:	18800005 	stb	r2,0(r3)
        return (pevent);
  815038:	e0fffb17 	ldw	r3,-20(fp)
  81503c:	e0ffff15 	stw	r3,-4(fp)
  815040:	0000a306 	br	8152d0 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  815044:	e0bffb17 	ldw	r2,-20(fp)
  815048:	10800003 	ldbu	r2,0(r2)
  81504c:	10803fcc 	andi	r2,r2,255
  815050:	108000a0 	cmpeqi	r2,r2,2
  815054:	1000061e 	bne	r2,zero,815070 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  815058:	e0fffd17 	ldw	r3,-12(fp)
  81505c:	00800044 	movi	r2,1
  815060:	18800005 	stb	r2,0(r3)
        return (pevent);
  815064:	e0bffb17 	ldw	r2,-20(fp)
  815068:	e0bfff15 	stw	r2,-4(fp)
  81506c:	00009806 	br	8152d0 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  815070:	008020b4 	movhi	r2,130
  815074:	10be0204 	addi	r2,r2,-2040
  815078:	10800003 	ldbu	r2,0(r2)
  81507c:	10803fcc 	andi	r2,r2,255
  815080:	1005003a 	cmpeq	r2,r2,zero
  815084:	1000061e 	bne	r2,zero,8150a0 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  815088:	e0fffd17 	ldw	r3,-12(fp)
  81508c:	008003c4 	movi	r2,15
  815090:	18800005 	stb	r2,0(r3)
        return (pevent);
  815094:	e0fffb17 	ldw	r3,-20(fp)
  815098:	e0ffff15 	stw	r3,-4(fp)
  81509c:	00008c06 	br	8152d0 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8150a0:	0005303a 	rdctl	r2,status
  8150a4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8150a8:	e0fff617 	ldw	r3,-40(fp)
  8150ac:	00bfff84 	movi	r2,-2
  8150b0:	1884703a 	and	r2,r3,r2
  8150b4:	1001703a 	wrctl	status,r2
  
  return context;
  8150b8:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  8150bc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  8150c0:	e0bffb17 	ldw	r2,-20(fp)
  8150c4:	10800283 	ldbu	r2,10(r2)
  8150c8:	10803fcc 	andi	r2,r2,255
  8150cc:	1005003a 	cmpeq	r2,r2,zero
  8150d0:	1000031e 	bne	r2,zero,8150e0 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  8150d4:	00800044 	movi	r2,1
  8150d8:	e0bffa05 	stb	r2,-24(fp)
  8150dc:	00000106 	br	8150e4 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  8150e0:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  8150e4:	e0bffc03 	ldbu	r2,-16(fp)
  8150e8:	e0bffe15 	stw	r2,-8(fp)
  8150ec:	e0fffe17 	ldw	r3,-8(fp)
  8150f0:	1805003a 	cmpeq	r2,r3,zero
  8150f4:	1000041e 	bne	r2,zero,815108 <OSQDel+0x120>
  8150f8:	e0fffe17 	ldw	r3,-8(fp)
  8150fc:	18800060 	cmpeqi	r2,r3,1
  815100:	1000391e 	bne	r2,zero,8151e8 <OSQDel+0x200>
  815104:	00006706 	br	8152a4 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  815108:	e0bffa03 	ldbu	r2,-24(fp)
  81510c:	1004c03a 	cmpne	r2,r2,zero
  815110:	1000261e 	bne	r2,zero,8151ac <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  815114:	e0fffb17 	ldw	r3,-20(fp)
  815118:	00800fc4 	movi	r2,63
  81511c:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  815120:	e0bffb17 	ldw	r2,-20(fp)
  815124:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  815128:	e0bffb17 	ldw	r2,-20(fp)
  81512c:	10800117 	ldw	r2,4(r2)
  815130:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  815134:	008020b4 	movhi	r2,130
  815138:	10bdff04 	addi	r2,r2,-2052
  81513c:	10c00017 	ldw	r3,0(r2)
  815140:	e0bff817 	ldw	r2,-32(fp)
  815144:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  815148:	00c020b4 	movhi	r3,130
  81514c:	18fdff04 	addi	r3,r3,-2052
  815150:	e0bff817 	ldw	r2,-32(fp)
  815154:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  815158:	e0bffb17 	ldw	r2,-20(fp)
  81515c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  815160:	008020b4 	movhi	r2,130
  815164:	10be0104 	addi	r2,r2,-2044
  815168:	10c00017 	ldw	r3,0(r2)
  81516c:	e0bffb17 	ldw	r2,-20(fp)
  815170:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  815174:	e0bffb17 	ldw	r2,-20(fp)
  815178:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  81517c:	00c020b4 	movhi	r3,130
  815180:	18fe0104 	addi	r3,r3,-2044
  815184:	e0bffb17 	ldw	r2,-20(fp)
  815188:	18800015 	stw	r2,0(r3)
  81518c:	e0bff717 	ldw	r2,-36(fp)
  815190:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815194:	e0bff517 	ldw	r2,-44(fp)
  815198:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  81519c:	e0bffd17 	ldw	r2,-12(fp)
  8151a0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  8151a4:	e03ff915 	stw	zero,-28(fp)
  8151a8:	00004706 	br	8152c8 <OSQDel+0x2e0>
  8151ac:	e0bff717 	ldw	r2,-36(fp)
  8151b0:	e0bff415 	stw	r2,-48(fp)
  8151b4:	e0bff417 	ldw	r2,-48(fp)
  8151b8:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  8151bc:	e0fffd17 	ldw	r3,-12(fp)
  8151c0:	00801244 	movi	r2,73
  8151c4:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  8151c8:	e0bffb17 	ldw	r2,-20(fp)
  8151cc:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  8151d0:	00003d06 	br	8152c8 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  8151d4:	e13ffb17 	ldw	r4,-20(fp)
  8151d8:	000b883a 	mov	r5,zero
  8151dc:	01800104 	movi	r6,4
  8151e0:	000f883a 	mov	r7,zero
  8151e4:	08118840 	call	811884 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  8151e8:	e0bffb17 	ldw	r2,-20(fp)
  8151ec:	10800283 	ldbu	r2,10(r2)
  8151f0:	10803fcc 	andi	r2,r2,255
  8151f4:	1004c03a 	cmpne	r2,r2,zero
  8151f8:	103ff61e 	bne	r2,zero,8151d4 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  8151fc:	e0fffb17 	ldw	r3,-20(fp)
  815200:	00800fc4 	movi	r2,63
  815204:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  815208:	e0bffb17 	ldw	r2,-20(fp)
  81520c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  815210:	e0bffb17 	ldw	r2,-20(fp)
  815214:	10800117 	ldw	r2,4(r2)
  815218:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  81521c:	008020b4 	movhi	r2,130
  815220:	10bdff04 	addi	r2,r2,-2052
  815224:	10c00017 	ldw	r3,0(r2)
  815228:	e0bff817 	ldw	r2,-32(fp)
  81522c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  815230:	00c020b4 	movhi	r3,130
  815234:	18fdff04 	addi	r3,r3,-2052
  815238:	e0bff817 	ldw	r2,-32(fp)
  81523c:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  815240:	e0bffb17 	ldw	r2,-20(fp)
  815244:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  815248:	008020b4 	movhi	r2,130
  81524c:	10be0104 	addi	r2,r2,-2044
  815250:	10c00017 	ldw	r3,0(r2)
  815254:	e0bffb17 	ldw	r2,-20(fp)
  815258:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  81525c:	e0bffb17 	ldw	r2,-20(fp)
  815260:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  815264:	00c020b4 	movhi	r3,130
  815268:	18fe0104 	addi	r3,r3,-2044
  81526c:	e0bffb17 	ldw	r2,-20(fp)
  815270:	18800015 	stw	r2,0(r3)
  815274:	e0bff717 	ldw	r2,-36(fp)
  815278:	e0bff315 	stw	r2,-52(fp)
  81527c:	e0bff317 	ldw	r2,-52(fp)
  815280:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  815284:	e0bffa03 	ldbu	r2,-24(fp)
  815288:	10800058 	cmpnei	r2,r2,1
  81528c:	1000011e 	bne	r2,zero,815294 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  815290:	08122c40 	call	8122c4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  815294:	e0bffd17 	ldw	r2,-12(fp)
  815298:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  81529c:	e03ff915 	stw	zero,-28(fp)
             break;
  8152a0:	00000906 	br	8152c8 <OSQDel+0x2e0>
  8152a4:	e0bff717 	ldw	r2,-36(fp)
  8152a8:	e0bff215 	stw	r2,-56(fp)
  8152ac:	e0bff217 	ldw	r2,-56(fp)
  8152b0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  8152b4:	e0fffd17 	ldw	r3,-12(fp)
  8152b8:	008001c4 	movi	r2,7
  8152bc:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  8152c0:	e0bffb17 	ldw	r2,-20(fp)
  8152c4:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  8152c8:	e0bff917 	ldw	r2,-28(fp)
  8152cc:	e0bfff15 	stw	r2,-4(fp)
  8152d0:	e0bfff17 	ldw	r2,-4(fp)
}
  8152d4:	e037883a 	mov	sp,fp
  8152d8:	dfc00117 	ldw	ra,4(sp)
  8152dc:	df000017 	ldw	fp,0(sp)
  8152e0:	dec00204 	addi	sp,sp,8
  8152e4:	f800283a 	ret

008152e8 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  8152e8:	defff904 	addi	sp,sp,-28
  8152ec:	df000615 	stw	fp,24(sp)
  8152f0:	df000604 	addi	fp,sp,24
  8152f4:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8152f8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8152fc:	e0bffe17 	ldw	r2,-8(fp)
  815300:	1004c03a 	cmpne	r2,r2,zero
  815304:	1000031e 	bne	r2,zero,815314 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
  815308:	00800104 	movi	r2,4
  81530c:	e0bfff15 	stw	r2,-4(fp)
  815310:	00002206 	br	81539c <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  815314:	e0bffe17 	ldw	r2,-8(fp)
  815318:	10800003 	ldbu	r2,0(r2)
  81531c:	10803fcc 	andi	r2,r2,255
  815320:	108000a0 	cmpeqi	r2,r2,2
  815324:	1000031e 	bne	r2,zero,815334 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
  815328:	00800044 	movi	r2,1
  81532c:	e0bfff15 	stw	r2,-4(fp)
  815330:	00001a06 	br	81539c <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815334:	0005303a 	rdctl	r2,status
  815338:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81533c:	e0fffb17 	ldw	r3,-20(fp)
  815340:	00bfff84 	movi	r2,-2
  815344:	1884703a 	and	r2,r3,r2
  815348:	1001703a 	wrctl	status,r2
  
  return context;
  81534c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  815350:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  815354:	e0bffe17 	ldw	r2,-8(fp)
  815358:	10800117 	ldw	r2,4(r2)
  81535c:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
  815360:	e0bffd17 	ldw	r2,-12(fp)
  815364:	10c00117 	ldw	r3,4(r2)
  815368:	e0bffd17 	ldw	r2,-12(fp)
  81536c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  815370:	e0bffd17 	ldw	r2,-12(fp)
  815374:	10c00117 	ldw	r3,4(r2)
  815378:	e0bffd17 	ldw	r2,-12(fp)
  81537c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  815380:	e0bffd17 	ldw	r2,-12(fp)
  815384:	1000058d 	sth	zero,22(r2)
  815388:	e0bffc17 	ldw	r2,-16(fp)
  81538c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815390:	e0bffa17 	ldw	r2,-24(fp)
  815394:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  815398:	e03fff15 	stw	zero,-4(fp)
  81539c:	e0bfff17 	ldw	r2,-4(fp)
}
  8153a0:	e037883a 	mov	sp,fp
  8153a4:	df000017 	ldw	fp,0(sp)
  8153a8:	dec00104 	addi	sp,sp,4
  8153ac:	f800283a 	ret

008153b0 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  8153b0:	defff104 	addi	sp,sp,-60
  8153b4:	dfc00e15 	stw	ra,56(sp)
  8153b8:	df000d15 	stw	fp,52(sp)
  8153bc:	df000d04 	addi	fp,sp,52
  8153c0:	e13ffb15 	stw	r4,-20(fp)
  8153c4:	e1bffd15 	stw	r6,-12(fp)
  8153c8:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8153cc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8153d0:	e0bffd17 	ldw	r2,-12(fp)
  8153d4:	1004c03a 	cmpne	r2,r2,zero
  8153d8:	1000021e 	bne	r2,zero,8153e4 <OSQPend+0x34>
        return ((void *)0);
  8153dc:	e03fff15 	stw	zero,-4(fp)
  8153e0:	0000b506 	br	8156b8 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  8153e4:	e0bffb17 	ldw	r2,-20(fp)
  8153e8:	1004c03a 	cmpne	r2,r2,zero
  8153ec:	1000051e 	bne	r2,zero,815404 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  8153f0:	e0fffd17 	ldw	r3,-12(fp)
  8153f4:	00800104 	movi	r2,4
  8153f8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  8153fc:	e03fff15 	stw	zero,-4(fp)
  815400:	0000ad06 	br	8156b8 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  815404:	e0bffb17 	ldw	r2,-20(fp)
  815408:	10800003 	ldbu	r2,0(r2)
  81540c:	10803fcc 	andi	r2,r2,255
  815410:	108000a0 	cmpeqi	r2,r2,2
  815414:	1000051e 	bne	r2,zero,81542c <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  815418:	e0fffd17 	ldw	r3,-12(fp)
  81541c:	00800044 	movi	r2,1
  815420:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  815424:	e03fff15 	stw	zero,-4(fp)
  815428:	0000a306 	br	8156b8 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  81542c:	008020b4 	movhi	r2,130
  815430:	10be0204 	addi	r2,r2,-2040
  815434:	10800003 	ldbu	r2,0(r2)
  815438:	10803fcc 	andi	r2,r2,255
  81543c:	1005003a 	cmpeq	r2,r2,zero
  815440:	1000051e 	bne	r2,zero,815458 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  815444:	e0fffd17 	ldw	r3,-12(fp)
  815448:	00800084 	movi	r2,2
  81544c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  815450:	e03fff15 	stw	zero,-4(fp)
  815454:	00009806 	br	8156b8 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  815458:	008020b4 	movhi	r2,130
  81545c:	10bdf404 	addi	r2,r2,-2096
  815460:	10800003 	ldbu	r2,0(r2)
  815464:	10803fcc 	andi	r2,r2,255
  815468:	1005003a 	cmpeq	r2,r2,zero
  81546c:	1000051e 	bne	r2,zero,815484 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  815470:	e0fffd17 	ldw	r3,-12(fp)
  815474:	00800344 	movi	r2,13
  815478:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81547c:	e03fff15 	stw	zero,-4(fp)
  815480:	00008d06 	br	8156b8 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815484:	0005303a 	rdctl	r2,status
  815488:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81548c:	e0fff717 	ldw	r3,-36(fp)
  815490:	00bfff84 	movi	r2,-2
  815494:	1884703a 	and	r2,r3,r2
  815498:	1001703a 	wrctl	status,r2
  
  return context;
  81549c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  8154a0:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  8154a4:	e0bffb17 	ldw	r2,-20(fp)
  8154a8:	10800117 	ldw	r2,4(r2)
  8154ac:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  8154b0:	e0bff917 	ldw	r2,-28(fp)
  8154b4:	1080058b 	ldhu	r2,22(r2)
  8154b8:	10bfffcc 	andi	r2,r2,65535
  8154bc:	1005003a 	cmpeq	r2,r2,zero
  8154c0:	10001f1e 	bne	r2,zero,815540 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  8154c4:	e0bff917 	ldw	r2,-28(fp)
  8154c8:	10c00417 	ldw	r3,16(r2)
  8154cc:	18800017 	ldw	r2,0(r3)
  8154d0:	e0bffa15 	stw	r2,-24(fp)
  8154d4:	18c00104 	addi	r3,r3,4
  8154d8:	e0bff917 	ldw	r2,-28(fp)
  8154dc:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  8154e0:	e0bff917 	ldw	r2,-28(fp)
  8154e4:	1080058b 	ldhu	r2,22(r2)
  8154e8:	10bfffc4 	addi	r2,r2,-1
  8154ec:	1007883a 	mov	r3,r2
  8154f0:	e0bff917 	ldw	r2,-28(fp)
  8154f4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  8154f8:	e0bff917 	ldw	r2,-28(fp)
  8154fc:	10c00417 	ldw	r3,16(r2)
  815500:	e0bff917 	ldw	r2,-28(fp)
  815504:	10800217 	ldw	r2,8(r2)
  815508:	1880041e 	bne	r3,r2,81551c <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
  81550c:	e0bff917 	ldw	r2,-28(fp)
  815510:	10c00117 	ldw	r3,4(r2)
  815514:	e0bff917 	ldw	r2,-28(fp)
  815518:	10c00415 	stw	r3,16(r2)
  81551c:	e0bff817 	ldw	r2,-32(fp)
  815520:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815524:	e0bff617 	ldw	r2,-40(fp)
  815528:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  81552c:	e0bffd17 	ldw	r2,-12(fp)
  815530:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  815534:	e0bffa17 	ldw	r2,-24(fp)
  815538:	e0bfff15 	stw	r2,-4(fp)
  81553c:	00005e06 	br	8156b8 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  815540:	008020b4 	movhi	r2,130
  815544:	10be0304 	addi	r2,r2,-2036
  815548:	10c00017 	ldw	r3,0(r2)
  81554c:	008020b4 	movhi	r2,130
  815550:	10be0304 	addi	r2,r2,-2036
  815554:	10800017 	ldw	r2,0(r2)
  815558:	10800c03 	ldbu	r2,48(r2)
  81555c:	10800114 	ori	r2,r2,4
  815560:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  815564:	008020b4 	movhi	r2,130
  815568:	10be0304 	addi	r2,r2,-2036
  81556c:	10800017 	ldw	r2,0(r2)
  815570:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  815574:	008020b4 	movhi	r2,130
  815578:	10be0304 	addi	r2,r2,-2036
  81557c:	10c00017 	ldw	r3,0(r2)
  815580:	e0bffc0b 	ldhu	r2,-16(fp)
  815584:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  815588:	e13ffb17 	ldw	r4,-20(fp)
  81558c:	0811a180 	call	811a18 <OS_EventTaskWait>
  815590:	e0bff817 	ldw	r2,-32(fp)
  815594:	e0bff515 	stw	r2,-44(fp)
  815598:	e0bff517 	ldw	r2,-44(fp)
  81559c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  8155a0:	08122c40 	call	8122c4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8155a4:	0005303a 	rdctl	r2,status
  8155a8:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8155ac:	e0fff417 	ldw	r3,-48(fp)
  8155b0:	00bfff84 	movi	r2,-2
  8155b4:	1884703a 	and	r2,r3,r2
  8155b8:	1001703a 	wrctl	status,r2
  
  return context;
  8155bc:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
  8155c0:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  8155c4:	008020b4 	movhi	r2,130
  8155c8:	10be0304 	addi	r2,r2,-2036
  8155cc:	10800017 	ldw	r2,0(r2)
  8155d0:	10800c43 	ldbu	r2,49(r2)
  8155d4:	10803fcc 	andi	r2,r2,255
  8155d8:	e0bffe15 	stw	r2,-8(fp)
  8155dc:	e0fffe17 	ldw	r3,-8(fp)
  8155e0:	1805003a 	cmpeq	r2,r3,zero
  8155e4:	1000041e 	bne	r2,zero,8155f8 <OSQPend+0x248>
  8155e8:	e0fffe17 	ldw	r3,-8(fp)
  8155ec:	188000a0 	cmpeqi	r2,r3,2
  8155f0:	1000091e 	bne	r2,zero,815618 <OSQPend+0x268>
  8155f4:	00000d06 	br	81562c <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  8155f8:	008020b4 	movhi	r2,130
  8155fc:	10be0304 	addi	r2,r2,-2036
  815600:	10800017 	ldw	r2,0(r2)
  815604:	10800917 	ldw	r2,36(r2)
  815608:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
  81560c:	e0bffd17 	ldw	r2,-12(fp)
  815610:	10000005 	stb	zero,0(r2)
             break;
  815614:	00000e06 	br	815650 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  815618:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  81561c:	e0fffd17 	ldw	r3,-12(fp)
  815620:	00800384 	movi	r2,14
  815624:	18800005 	stb	r2,0(r3)
             break;
  815628:	00000906 	br	815650 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  81562c:	008020b4 	movhi	r2,130
  815630:	10be0304 	addi	r2,r2,-2036
  815634:	11000017 	ldw	r4,0(r2)
  815638:	e17ffb17 	ldw	r5,-20(fp)
  81563c:	0811c7c0 	call	811c7c <OS_EventTaskRemove>
             pmsg = (void *)0;
  815640:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  815644:	e0fffd17 	ldw	r3,-12(fp)
  815648:	00800284 	movi	r2,10
  81564c:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  815650:	008020b4 	movhi	r2,130
  815654:	10be0304 	addi	r2,r2,-2036
  815658:	10800017 	ldw	r2,0(r2)
  81565c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  815660:	008020b4 	movhi	r2,130
  815664:	10be0304 	addi	r2,r2,-2036
  815668:	10800017 	ldw	r2,0(r2)
  81566c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  815670:	008020b4 	movhi	r2,130
  815674:	10be0304 	addi	r2,r2,-2036
  815678:	10800017 	ldw	r2,0(r2)
  81567c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  815680:	008020b4 	movhi	r2,130
  815684:	10be0304 	addi	r2,r2,-2036
  815688:	10800017 	ldw	r2,0(r2)
  81568c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  815690:	008020b4 	movhi	r2,130
  815694:	10be0304 	addi	r2,r2,-2036
  815698:	10800017 	ldw	r2,0(r2)
  81569c:	10000915 	stw	zero,36(r2)
  8156a0:	e0bff817 	ldw	r2,-32(fp)
  8156a4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8156a8:	e0bff317 	ldw	r2,-52(fp)
  8156ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  8156b0:	e0bffa17 	ldw	r2,-24(fp)
  8156b4:	e0bfff15 	stw	r2,-4(fp)
  8156b8:	e0bfff17 	ldw	r2,-4(fp)
}
  8156bc:	e037883a 	mov	sp,fp
  8156c0:	dfc00117 	ldw	ra,4(sp)
  8156c4:	df000017 	ldw	fp,0(sp)
  8156c8:	dec00204 	addi	sp,sp,8
  8156cc:	f800283a 	ret

008156d0 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  8156d0:	defff504 	addi	sp,sp,-44
  8156d4:	dfc00a15 	stw	ra,40(sp)
  8156d8:	df000915 	stw	fp,36(sp)
  8156dc:	df000904 	addi	fp,sp,36
  8156e0:	e13ffc15 	stw	r4,-16(fp)
  8156e4:	e1bffe15 	stw	r6,-8(fp)
  8156e8:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8156ec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8156f0:	e0bffe17 	ldw	r2,-8(fp)
  8156f4:	1004c03a 	cmpne	r2,r2,zero
  8156f8:	1000021e 	bne	r2,zero,815704 <OSQPendAbort+0x34>
        return (0);
  8156fc:	e03fff15 	stw	zero,-4(fp)
  815700:	00004c06 	br	815834 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  815704:	e0bffc17 	ldw	r2,-16(fp)
  815708:	1004c03a 	cmpne	r2,r2,zero
  81570c:	1000051e 	bne	r2,zero,815724 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  815710:	e0fffe17 	ldw	r3,-8(fp)
  815714:	00800104 	movi	r2,4
  815718:	18800005 	stb	r2,0(r3)
        return (0);
  81571c:	e03fff15 	stw	zero,-4(fp)
  815720:	00004406 	br	815834 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  815724:	e0bffc17 	ldw	r2,-16(fp)
  815728:	10800003 	ldbu	r2,0(r2)
  81572c:	10803fcc 	andi	r2,r2,255
  815730:	108000a0 	cmpeqi	r2,r2,2
  815734:	1000051e 	bne	r2,zero,81574c <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  815738:	e0fffe17 	ldw	r3,-8(fp)
  81573c:	00800044 	movi	r2,1
  815740:	18800005 	stb	r2,0(r3)
        return (0);
  815744:	e03fff15 	stw	zero,-4(fp)
  815748:	00003a06 	br	815834 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81574c:	0005303a 	rdctl	r2,status
  815750:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815754:	e0fff917 	ldw	r3,-28(fp)
  815758:	00bfff84 	movi	r2,-2
  81575c:	1884703a 	and	r2,r3,r2
  815760:	1001703a 	wrctl	status,r2
  
  return context;
  815764:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  815768:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  81576c:	e0bffc17 	ldw	r2,-16(fp)
  815770:	10800283 	ldbu	r2,10(r2)
  815774:	10803fcc 	andi	r2,r2,255
  815778:	1005003a 	cmpeq	r2,r2,zero
  81577c:	1000261e 	bne	r2,zero,815818 <OSQPendAbort+0x148>
        nbr_tasks = 0;
  815780:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  815784:	e0bffd03 	ldbu	r2,-12(fp)
  815788:	10800060 	cmpeqi	r2,r2,1
  81578c:	1000091e 	bne	r2,zero,8157b4 <OSQPendAbort+0xe4>
  815790:	00000e06 	br	8157cc <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  815794:	e13ffc17 	ldw	r4,-16(fp)
  815798:	000b883a 	mov	r5,zero
  81579c:	01800104 	movi	r6,4
  8157a0:	01c00084 	movi	r7,2
  8157a4:	08118840 	call	811884 <OS_EventTaskRdy>
                     nbr_tasks++;
  8157a8:	e0bffb03 	ldbu	r2,-20(fp)
  8157ac:	10800044 	addi	r2,r2,1
  8157b0:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  8157b4:	e0bffc17 	ldw	r2,-16(fp)
  8157b8:	10800283 	ldbu	r2,10(r2)
  8157bc:	10803fcc 	andi	r2,r2,255
  8157c0:	1004c03a 	cmpne	r2,r2,zero
  8157c4:	103ff31e 	bne	r2,zero,815794 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  8157c8:	00000806 	br	8157ec <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  8157cc:	e13ffc17 	ldw	r4,-16(fp)
  8157d0:	000b883a 	mov	r5,zero
  8157d4:	01800104 	movi	r6,4
  8157d8:	01c00084 	movi	r7,2
  8157dc:	08118840 	call	811884 <OS_EventTaskRdy>
                 nbr_tasks++;
  8157e0:	e0bffb03 	ldbu	r2,-20(fp)
  8157e4:	10800044 	addi	r2,r2,1
  8157e8:	e0bffb05 	stb	r2,-20(fp)
  8157ec:	e0bffa17 	ldw	r2,-24(fp)
  8157f0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8157f4:	e0bff817 	ldw	r2,-32(fp)
  8157f8:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  8157fc:	08122c40 	call	8122c4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  815800:	e0fffe17 	ldw	r3,-8(fp)
  815804:	00800384 	movi	r2,14
  815808:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  81580c:	e0bffb03 	ldbu	r2,-20(fp)
  815810:	e0bfff15 	stw	r2,-4(fp)
  815814:	00000706 	br	815834 <OSQPendAbort+0x164>
  815818:	e0bffa17 	ldw	r2,-24(fp)
  81581c:	e0bff715 	stw	r2,-36(fp)
  815820:	e0bff717 	ldw	r2,-36(fp)
  815824:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  815828:	e0bffe17 	ldw	r2,-8(fp)
  81582c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  815830:	e03fff15 	stw	zero,-4(fp)
  815834:	e0bfff17 	ldw	r2,-4(fp)
}
  815838:	e037883a 	mov	sp,fp
  81583c:	dfc00117 	ldw	ra,4(sp)
  815840:	df000017 	ldw	fp,0(sp)
  815844:	dec00204 	addi	sp,sp,8
  815848:	f800283a 	ret

0081584c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  81584c:	defff504 	addi	sp,sp,-44
  815850:	dfc00a15 	stw	ra,40(sp)
  815854:	df000915 	stw	fp,36(sp)
  815858:	df000904 	addi	fp,sp,36
  81585c:	e13ffd15 	stw	r4,-12(fp)
  815860:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  815864:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  815868:	e0bffd17 	ldw	r2,-12(fp)
  81586c:	1004c03a 	cmpne	r2,r2,zero
  815870:	1000031e 	bne	r2,zero,815880 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
  815874:	00800104 	movi	r2,4
  815878:	e0bfff15 	stw	r2,-4(fp)
  81587c:	00004d06 	br	8159b4 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  815880:	e0bffd17 	ldw	r2,-12(fp)
  815884:	10800003 	ldbu	r2,0(r2)
  815888:	10803fcc 	andi	r2,r2,255
  81588c:	108000a0 	cmpeqi	r2,r2,2
  815890:	1000031e 	bne	r2,zero,8158a0 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
  815894:	00800044 	movi	r2,1
  815898:	e0bfff15 	stw	r2,-4(fp)
  81589c:	00004506 	br	8159b4 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8158a0:	0005303a 	rdctl	r2,status
  8158a4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8158a8:	e0fffa17 	ldw	r3,-24(fp)
  8158ac:	00bfff84 	movi	r2,-2
  8158b0:	1884703a 	and	r2,r3,r2
  8158b4:	1001703a 	wrctl	status,r2
  
  return context;
  8158b8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  8158bc:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  8158c0:	e0bffd17 	ldw	r2,-12(fp)
  8158c4:	10800283 	ldbu	r2,10(r2)
  8158c8:	10803fcc 	andi	r2,r2,255
  8158cc:	1005003a 	cmpeq	r2,r2,zero
  8158d0:	10000c1e 	bne	r2,zero,815904 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  8158d4:	e13ffd17 	ldw	r4,-12(fp)
  8158d8:	e17ffe17 	ldw	r5,-8(fp)
  8158dc:	01800104 	movi	r6,4
  8158e0:	000f883a 	mov	r7,zero
  8158e4:	08118840 	call	811884 <OS_EventTaskRdy>
  8158e8:	e0bffb17 	ldw	r2,-20(fp)
  8158ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8158f0:	e0bff917 	ldw	r2,-28(fp)
  8158f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  8158f8:	08122c40 	call	8122c4 <OS_Sched>
        return (OS_ERR_NONE);
  8158fc:	e03fff15 	stw	zero,-4(fp)
  815900:	00002c06 	br	8159b4 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  815904:	e0bffd17 	ldw	r2,-12(fp)
  815908:	10800117 	ldw	r2,4(r2)
  81590c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  815910:	e0bffc17 	ldw	r2,-16(fp)
  815914:	10c0058b 	ldhu	r3,22(r2)
  815918:	e0bffc17 	ldw	r2,-16(fp)
  81591c:	1080050b 	ldhu	r2,20(r2)
  815920:	18ffffcc 	andi	r3,r3,65535
  815924:	10bfffcc 	andi	r2,r2,65535
  815928:	18800736 	bltu	r3,r2,815948 <OSQPost+0xfc>
  81592c:	e0bffb17 	ldw	r2,-20(fp)
  815930:	e0bff815 	stw	r2,-32(fp)
  815934:	e0bff817 	ldw	r2,-32(fp)
  815938:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  81593c:	00800784 	movi	r2,30
  815940:	e0bfff15 	stw	r2,-4(fp)
  815944:	00001b06 	br	8159b4 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  815948:	e0bffc17 	ldw	r2,-16(fp)
  81594c:	10c00317 	ldw	r3,12(r2)
  815950:	e0bffe17 	ldw	r2,-8(fp)
  815954:	18800015 	stw	r2,0(r3)
  815958:	18c00104 	addi	r3,r3,4
  81595c:	e0bffc17 	ldw	r2,-16(fp)
  815960:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  815964:	e0bffc17 	ldw	r2,-16(fp)
  815968:	1080058b 	ldhu	r2,22(r2)
  81596c:	10800044 	addi	r2,r2,1
  815970:	1007883a 	mov	r3,r2
  815974:	e0bffc17 	ldw	r2,-16(fp)
  815978:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  81597c:	e0bffc17 	ldw	r2,-16(fp)
  815980:	10c00317 	ldw	r3,12(r2)
  815984:	e0bffc17 	ldw	r2,-16(fp)
  815988:	10800217 	ldw	r2,8(r2)
  81598c:	1880041e 	bne	r3,r2,8159a0 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
  815990:	e0bffc17 	ldw	r2,-16(fp)
  815994:	10c00117 	ldw	r3,4(r2)
  815998:	e0bffc17 	ldw	r2,-16(fp)
  81599c:	10c00315 	stw	r3,12(r2)
  8159a0:	e0bffb17 	ldw	r2,-20(fp)
  8159a4:	e0bff715 	stw	r2,-36(fp)
  8159a8:	e0bff717 	ldw	r2,-36(fp)
  8159ac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8159b0:	e03fff15 	stw	zero,-4(fp)
  8159b4:	e0bfff17 	ldw	r2,-4(fp)
}
  8159b8:	e037883a 	mov	sp,fp
  8159bc:	dfc00117 	ldw	ra,4(sp)
  8159c0:	df000017 	ldw	fp,0(sp)
  8159c4:	dec00204 	addi	sp,sp,8
  8159c8:	f800283a 	ret

008159cc <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  8159cc:	defff504 	addi	sp,sp,-44
  8159d0:	dfc00a15 	stw	ra,40(sp)
  8159d4:	df000915 	stw	fp,36(sp)
  8159d8:	df000904 	addi	fp,sp,36
  8159dc:	e13ffd15 	stw	r4,-12(fp)
  8159e0:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8159e4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8159e8:	e0bffd17 	ldw	r2,-12(fp)
  8159ec:	1004c03a 	cmpne	r2,r2,zero
  8159f0:	1000031e 	bne	r2,zero,815a00 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
  8159f4:	00800104 	movi	r2,4
  8159f8:	e0bfff15 	stw	r2,-4(fp)
  8159fc:	00004f06 	br	815b3c <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  815a00:	e0bffd17 	ldw	r2,-12(fp)
  815a04:	10800003 	ldbu	r2,0(r2)
  815a08:	10803fcc 	andi	r2,r2,255
  815a0c:	108000a0 	cmpeqi	r2,r2,2
  815a10:	1000031e 	bne	r2,zero,815a20 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
  815a14:	00800044 	movi	r2,1
  815a18:	e0bfff15 	stw	r2,-4(fp)
  815a1c:	00004706 	br	815b3c <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815a20:	0005303a 	rdctl	r2,status
  815a24:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815a28:	e0fffa17 	ldw	r3,-24(fp)
  815a2c:	00bfff84 	movi	r2,-2
  815a30:	1884703a 	and	r2,r3,r2
  815a34:	1001703a 	wrctl	status,r2
  
  return context;
  815a38:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  815a3c:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  815a40:	e0bffd17 	ldw	r2,-12(fp)
  815a44:	10800283 	ldbu	r2,10(r2)
  815a48:	10803fcc 	andi	r2,r2,255
  815a4c:	1005003a 	cmpeq	r2,r2,zero
  815a50:	10000c1e 	bne	r2,zero,815a84 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  815a54:	e13ffd17 	ldw	r4,-12(fp)
  815a58:	e17ffe17 	ldw	r5,-8(fp)
  815a5c:	01800104 	movi	r6,4
  815a60:	000f883a 	mov	r7,zero
  815a64:	08118840 	call	811884 <OS_EventTaskRdy>
  815a68:	e0bffb17 	ldw	r2,-20(fp)
  815a6c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815a70:	e0bff917 	ldw	r2,-28(fp)
  815a74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  815a78:	08122c40 	call	8122c4 <OS_Sched>
        return (OS_ERR_NONE);
  815a7c:	e03fff15 	stw	zero,-4(fp)
  815a80:	00002e06 	br	815b3c <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  815a84:	e0bffd17 	ldw	r2,-12(fp)
  815a88:	10800117 	ldw	r2,4(r2)
  815a8c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  815a90:	e0bffc17 	ldw	r2,-16(fp)
  815a94:	10c0058b 	ldhu	r3,22(r2)
  815a98:	e0bffc17 	ldw	r2,-16(fp)
  815a9c:	1080050b 	ldhu	r2,20(r2)
  815aa0:	18ffffcc 	andi	r3,r3,65535
  815aa4:	10bfffcc 	andi	r2,r2,65535
  815aa8:	18800736 	bltu	r3,r2,815ac8 <OSQPostFront+0xfc>
  815aac:	e0bffb17 	ldw	r2,-20(fp)
  815ab0:	e0bff815 	stw	r2,-32(fp)
  815ab4:	e0bff817 	ldw	r2,-32(fp)
  815ab8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  815abc:	00800784 	movi	r2,30
  815ac0:	e0bfff15 	stw	r2,-4(fp)
  815ac4:	00001d06 	br	815b3c <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  815ac8:	e0bffc17 	ldw	r2,-16(fp)
  815acc:	10c00417 	ldw	r3,16(r2)
  815ad0:	e0bffc17 	ldw	r2,-16(fp)
  815ad4:	10800117 	ldw	r2,4(r2)
  815ad8:	1880041e 	bne	r3,r2,815aec <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
  815adc:	e0bffc17 	ldw	r2,-16(fp)
  815ae0:	10c00217 	ldw	r3,8(r2)
  815ae4:	e0bffc17 	ldw	r2,-16(fp)
  815ae8:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  815aec:	e0bffc17 	ldw	r2,-16(fp)
  815af0:	10800417 	ldw	r2,16(r2)
  815af4:	10ffff04 	addi	r3,r2,-4
  815af8:	e0bffc17 	ldw	r2,-16(fp)
  815afc:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  815b00:	e0bffc17 	ldw	r2,-16(fp)
  815b04:	10c00417 	ldw	r3,16(r2)
  815b08:	e0bffe17 	ldw	r2,-8(fp)
  815b0c:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  815b10:	e0bffc17 	ldw	r2,-16(fp)
  815b14:	1080058b 	ldhu	r2,22(r2)
  815b18:	10800044 	addi	r2,r2,1
  815b1c:	1007883a 	mov	r3,r2
  815b20:	e0bffc17 	ldw	r2,-16(fp)
  815b24:	10c0058d 	sth	r3,22(r2)
  815b28:	e0bffb17 	ldw	r2,-20(fp)
  815b2c:	e0bff715 	stw	r2,-36(fp)
  815b30:	e0bff717 	ldw	r2,-36(fp)
  815b34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  815b38:	e03fff15 	stw	zero,-4(fp)
  815b3c:	e0bfff17 	ldw	r2,-4(fp)
}
  815b40:	e037883a 	mov	sp,fp
  815b44:	dfc00117 	ldw	ra,4(sp)
  815b48:	df000017 	ldw	fp,0(sp)
  815b4c:	dec00204 	addi	sp,sp,8
  815b50:	f800283a 	ret

00815b54 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  815b54:	defff404 	addi	sp,sp,-48
  815b58:	dfc00b15 	stw	ra,44(sp)
  815b5c:	df000a15 	stw	fp,40(sp)
  815b60:	df000a04 	addi	fp,sp,40
  815b64:	e13ffc15 	stw	r4,-16(fp)
  815b68:	e17ffd15 	stw	r5,-12(fp)
  815b6c:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  815b70:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  815b74:	e0bffc17 	ldw	r2,-16(fp)
  815b78:	1004c03a 	cmpne	r2,r2,zero
  815b7c:	1000031e 	bne	r2,zero,815b8c <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
  815b80:	00800104 	movi	r2,4
  815b84:	e0bfff15 	stw	r2,-4(fp)
  815b88:	00007906 	br	815d70 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  815b8c:	e0bffc17 	ldw	r2,-16(fp)
  815b90:	10800003 	ldbu	r2,0(r2)
  815b94:	10803fcc 	andi	r2,r2,255
  815b98:	108000a0 	cmpeqi	r2,r2,2
  815b9c:	1000031e 	bne	r2,zero,815bac <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
  815ba0:	00800044 	movi	r2,1
  815ba4:	e0bfff15 	stw	r2,-4(fp)
  815ba8:	00007106 	br	815d70 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815bac:	0005303a 	rdctl	r2,status
  815bb0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815bb4:	e0fff917 	ldw	r3,-28(fp)
  815bb8:	00bfff84 	movi	r2,-2
  815bbc:	1884703a 	and	r2,r3,r2
  815bc0:	1001703a 	wrctl	status,r2
  
  return context;
  815bc4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  815bc8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  815bcc:	e0bffc17 	ldw	r2,-16(fp)
  815bd0:	10800283 	ldbu	r2,10(r2)
  815bd4:	10803fcc 	andi	r2,r2,255
  815bd8:	1005003a 	cmpeq	r2,r2,zero
  815bdc:	1000211e 	bne	r2,zero,815c64 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  815be0:	e0bffe03 	ldbu	r2,-8(fp)
  815be4:	1080004c 	andi	r2,r2,1
  815be8:	10803fcc 	andi	r2,r2,255
  815bec:	1005003a 	cmpeq	r2,r2,zero
  815bf0:	10000c1e 	bne	r2,zero,815c24 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  815bf4:	00000506 	br	815c0c <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  815bf8:	e13ffc17 	ldw	r4,-16(fp)
  815bfc:	e17ffd17 	ldw	r5,-12(fp)
  815c00:	01800104 	movi	r6,4
  815c04:	000f883a 	mov	r7,zero
  815c08:	08118840 	call	811884 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  815c0c:	e0bffc17 	ldw	r2,-16(fp)
  815c10:	10800283 	ldbu	r2,10(r2)
  815c14:	10803fcc 	andi	r2,r2,255
  815c18:	1004c03a 	cmpne	r2,r2,zero
  815c1c:	103ff61e 	bne	r2,zero,815bf8 <OSQPostOpt+0xa4>
  815c20:	00000506 	br	815c38 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  815c24:	e13ffc17 	ldw	r4,-16(fp)
  815c28:	e17ffd17 	ldw	r5,-12(fp)
  815c2c:	01800104 	movi	r6,4
  815c30:	000f883a 	mov	r7,zero
  815c34:	08118840 	call	811884 <OS_EventTaskRdy>
  815c38:	e0bffa17 	ldw	r2,-24(fp)
  815c3c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815c40:	e0bff817 	ldw	r2,-32(fp)
  815c44:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  815c48:	e0bffe03 	ldbu	r2,-8(fp)
  815c4c:	1080010c 	andi	r2,r2,4
  815c50:	1004c03a 	cmpne	r2,r2,zero
  815c54:	1000011e 	bne	r2,zero,815c5c <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
  815c58:	08122c40 	call	8122c4 <OS_Sched>
        }
        return (OS_ERR_NONE);
  815c5c:	e03fff15 	stw	zero,-4(fp)
  815c60:	00004306 	br	815d70 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  815c64:	e0bffc17 	ldw	r2,-16(fp)
  815c68:	10800117 	ldw	r2,4(r2)
  815c6c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  815c70:	e0bffb17 	ldw	r2,-20(fp)
  815c74:	10c0058b 	ldhu	r3,22(r2)
  815c78:	e0bffb17 	ldw	r2,-20(fp)
  815c7c:	1080050b 	ldhu	r2,20(r2)
  815c80:	18ffffcc 	andi	r3,r3,65535
  815c84:	10bfffcc 	andi	r2,r2,65535
  815c88:	18800736 	bltu	r3,r2,815ca8 <OSQPostOpt+0x154>
  815c8c:	e0bffa17 	ldw	r2,-24(fp)
  815c90:	e0bff715 	stw	r2,-36(fp)
  815c94:	e0bff717 	ldw	r2,-36(fp)
  815c98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  815c9c:	00800784 	movi	r2,30
  815ca0:	e0bfff15 	stw	r2,-4(fp)
  815ca4:	00003206 	br	815d70 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  815ca8:	e0bffe03 	ldbu	r2,-8(fp)
  815cac:	1080008c 	andi	r2,r2,2
  815cb0:	1005003a 	cmpeq	r2,r2,zero
  815cb4:	1000131e 	bne	r2,zero,815d04 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  815cb8:	e0bffb17 	ldw	r2,-20(fp)
  815cbc:	10c00417 	ldw	r3,16(r2)
  815cc0:	e0bffb17 	ldw	r2,-20(fp)
  815cc4:	10800117 	ldw	r2,4(r2)
  815cc8:	1880041e 	bne	r3,r2,815cdc <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  815ccc:	e0bffb17 	ldw	r2,-20(fp)
  815cd0:	10c00217 	ldw	r3,8(r2)
  815cd4:	e0bffb17 	ldw	r2,-20(fp)
  815cd8:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  815cdc:	e0bffb17 	ldw	r2,-20(fp)
  815ce0:	10800417 	ldw	r2,16(r2)
  815ce4:	10ffff04 	addi	r3,r2,-4
  815ce8:	e0bffb17 	ldw	r2,-20(fp)
  815cec:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  815cf0:	e0bffb17 	ldw	r2,-20(fp)
  815cf4:	10c00417 	ldw	r3,16(r2)
  815cf8:	e0bffd17 	ldw	r2,-12(fp)
  815cfc:	18800015 	stw	r2,0(r3)
  815d00:	00001006 	br	815d44 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  815d04:	e0bffb17 	ldw	r2,-20(fp)
  815d08:	10c00317 	ldw	r3,12(r2)
  815d0c:	e0bffd17 	ldw	r2,-12(fp)
  815d10:	18800015 	stw	r2,0(r3)
  815d14:	18c00104 	addi	r3,r3,4
  815d18:	e0bffb17 	ldw	r2,-20(fp)
  815d1c:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  815d20:	e0bffb17 	ldw	r2,-20(fp)
  815d24:	10c00317 	ldw	r3,12(r2)
  815d28:	e0bffb17 	ldw	r2,-20(fp)
  815d2c:	10800217 	ldw	r2,8(r2)
  815d30:	1880041e 	bne	r3,r2,815d44 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
  815d34:	e0bffb17 	ldw	r2,-20(fp)
  815d38:	10c00117 	ldw	r3,4(r2)
  815d3c:	e0bffb17 	ldw	r2,-20(fp)
  815d40:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  815d44:	e0bffb17 	ldw	r2,-20(fp)
  815d48:	1080058b 	ldhu	r2,22(r2)
  815d4c:	10800044 	addi	r2,r2,1
  815d50:	1007883a 	mov	r3,r2
  815d54:	e0bffb17 	ldw	r2,-20(fp)
  815d58:	10c0058d 	sth	r3,22(r2)
  815d5c:	e0bffa17 	ldw	r2,-24(fp)
  815d60:	e0bff615 	stw	r2,-40(fp)
  815d64:	e0bff617 	ldw	r2,-40(fp)
  815d68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  815d6c:	e03fff15 	stw	zero,-4(fp)
  815d70:	e0bfff17 	ldw	r2,-4(fp)
}
  815d74:	e037883a 	mov	sp,fp
  815d78:	dfc00117 	ldw	ra,4(sp)
  815d7c:	df000017 	ldw	fp,0(sp)
  815d80:	dec00204 	addi	sp,sp,8
  815d84:	f800283a 	ret

00815d88 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  815d88:	defff504 	addi	sp,sp,-44
  815d8c:	df000a15 	stw	fp,40(sp)
  815d90:	df000a04 	addi	fp,sp,40
  815d94:	e13ffd15 	stw	r4,-12(fp)
  815d98:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  815d9c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  815da0:	e0bffd17 	ldw	r2,-12(fp)
  815da4:	1004c03a 	cmpne	r2,r2,zero
  815da8:	1000031e 	bne	r2,zero,815db8 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  815dac:	00800104 	movi	r2,4
  815db0:	e0bfff15 	stw	r2,-4(fp)
  815db4:	00004f06 	br	815ef4 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  815db8:	e0bffe17 	ldw	r2,-8(fp)
  815dbc:	1004c03a 	cmpne	r2,r2,zero
  815dc0:	1000031e 	bne	r2,zero,815dd0 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  815dc4:	00800244 	movi	r2,9
  815dc8:	e0bfff15 	stw	r2,-4(fp)
  815dcc:	00004906 	br	815ef4 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  815dd0:	e0bffd17 	ldw	r2,-12(fp)
  815dd4:	10800003 	ldbu	r2,0(r2)
  815dd8:	10803fcc 	andi	r2,r2,255
  815ddc:	108000a0 	cmpeqi	r2,r2,2
  815de0:	1000031e 	bne	r2,zero,815df0 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  815de4:	00800044 	movi	r2,1
  815de8:	e0bfff15 	stw	r2,-4(fp)
  815dec:	00004106 	br	815ef4 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815df0:	0005303a 	rdctl	r2,status
  815df4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815df8:	e0fff717 	ldw	r3,-36(fp)
  815dfc:	00bfff84 	movi	r2,-2
  815e00:	1884703a 	and	r2,r3,r2
  815e04:	1001703a 	wrctl	status,r2
  
  return context;
  815e08:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  815e0c:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  815e10:	e0bffd17 	ldw	r2,-12(fp)
  815e14:	10c00283 	ldbu	r3,10(r2)
  815e18:	e0bffe17 	ldw	r2,-8(fp)
  815e1c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  815e20:	e0bffd17 	ldw	r2,-12(fp)
  815e24:	108002c4 	addi	r2,r2,11
  815e28:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  815e2c:	e0bffe17 	ldw	r2,-8(fp)
  815e30:	10800204 	addi	r2,r2,8
  815e34:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  815e38:	e03ffb05 	stb	zero,-20(fp)
  815e3c:	00000d06 	br	815e74 <OSQQuery+0xec>
        *pdest++ = *psrc++;
  815e40:	e0bffa17 	ldw	r2,-24(fp)
  815e44:	10c00003 	ldbu	r3,0(r2)
  815e48:	e0bff917 	ldw	r2,-28(fp)
  815e4c:	10c00005 	stb	r3,0(r2)
  815e50:	e0bff917 	ldw	r2,-28(fp)
  815e54:	10800044 	addi	r2,r2,1
  815e58:	e0bff915 	stw	r2,-28(fp)
  815e5c:	e0bffa17 	ldw	r2,-24(fp)
  815e60:	10800044 	addi	r2,r2,1
  815e64:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  815e68:	e0bffb03 	ldbu	r2,-20(fp)
  815e6c:	10800044 	addi	r2,r2,1
  815e70:	e0bffb05 	stb	r2,-20(fp)
  815e74:	e0bffb03 	ldbu	r2,-20(fp)
  815e78:	108000f0 	cmpltui	r2,r2,3
  815e7c:	103ff01e 	bne	r2,zero,815e40 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  815e80:	e0bffd17 	ldw	r2,-12(fp)
  815e84:	10800117 	ldw	r2,4(r2)
  815e88:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  815e8c:	e0bffc17 	ldw	r2,-16(fp)
  815e90:	1080058b 	ldhu	r2,22(r2)
  815e94:	10bfffcc 	andi	r2,r2,65535
  815e98:	1005003a 	cmpeq	r2,r2,zero
  815e9c:	1000061e 	bne	r2,zero,815eb8 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  815ea0:	e0bffc17 	ldw	r2,-16(fp)
  815ea4:	10800417 	ldw	r2,16(r2)
  815ea8:	10c00017 	ldw	r3,0(r2)
  815eac:	e0bffe17 	ldw	r2,-8(fp)
  815eb0:	10c00015 	stw	r3,0(r2)
  815eb4:	00000206 	br	815ec0 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
  815eb8:	e0bffe17 	ldw	r2,-8(fp)
  815ebc:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  815ec0:	e0bffc17 	ldw	r2,-16(fp)
  815ec4:	10c0058b 	ldhu	r3,22(r2)
  815ec8:	e0bffe17 	ldw	r2,-8(fp)
  815ecc:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  815ed0:	e0bffc17 	ldw	r2,-16(fp)
  815ed4:	10c0050b 	ldhu	r3,20(r2)
  815ed8:	e0bffe17 	ldw	r2,-8(fp)
  815edc:	10c0018d 	sth	r3,6(r2)
  815ee0:	e0bff817 	ldw	r2,-32(fp)
  815ee4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815ee8:	e0bff617 	ldw	r2,-40(fp)
  815eec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  815ef0:	e03fff15 	stw	zero,-4(fp)
  815ef4:	e0bfff17 	ldw	r2,-4(fp)
}
  815ef8:	e037883a 	mov	sp,fp
  815efc:	df000017 	ldw	fp,0(sp)
  815f00:	dec00104 	addi	sp,sp,4
  815f04:	f800283a 	ret

00815f08 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  815f08:	defffb04 	addi	sp,sp,-20
  815f0c:	dfc00415 	stw	ra,16(sp)
  815f10:	df000315 	stw	fp,12(sp)
  815f14:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  815f18:	010020b4 	movhi	r4,130
  815f1c:	2113fd04 	addi	r4,r4,20468
  815f20:	01407804 	movi	r5,480
  815f24:	08122040 	call	812204 <OS_MemClr>
    pq1 = &OSQTbl[0];
  815f28:	008020b4 	movhi	r2,130
  815f2c:	1093fd04 	addi	r2,r2,20468
  815f30:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  815f34:	008020b4 	movhi	r2,130
  815f38:	10940304 	addi	r2,r2,20492
  815f3c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  815f40:	e03fff0d 	sth	zero,-4(fp)
  815f44:	00000c06 	br	815f78 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  815f48:	e0fffe17 	ldw	r3,-8(fp)
  815f4c:	e0bffd17 	ldw	r2,-12(fp)
  815f50:	18800015 	stw	r2,0(r3)
        pq1++;
  815f54:	e0bffe17 	ldw	r2,-8(fp)
  815f58:	10800604 	addi	r2,r2,24
  815f5c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  815f60:	e0bffd17 	ldw	r2,-12(fp)
  815f64:	10800604 	addi	r2,r2,24
  815f68:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  815f6c:	e0bfff0b 	ldhu	r2,-4(fp)
  815f70:	10800044 	addi	r2,r2,1
  815f74:	e0bfff0d 	sth	r2,-4(fp)
  815f78:	e0bfff0b 	ldhu	r2,-4(fp)
  815f7c:	108004f0 	cmpltui	r2,r2,19
  815f80:	103ff11e 	bne	r2,zero,815f48 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  815f84:	e0bffe17 	ldw	r2,-8(fp)
  815f88:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  815f8c:	00c020b4 	movhi	r3,130
  815f90:	18fdff04 	addi	r3,r3,-2052
  815f94:	008020b4 	movhi	r2,130
  815f98:	1093fd04 	addi	r2,r2,20468
  815f9c:	18800015 	stw	r2,0(r3)
#endif
}
  815fa0:	e037883a 	mov	sp,fp
  815fa4:	dfc00117 	ldw	ra,4(sp)
  815fa8:	df000017 	ldw	fp,0(sp)
  815fac:	dec00204 	addi	sp,sp,8
  815fb0:	f800283a 	ret

00815fb4 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  815fb4:	defff904 	addi	sp,sp,-28
  815fb8:	df000615 	stw	fp,24(sp)
  815fbc:	df000604 	addi	fp,sp,24
  815fc0:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  815fc4:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  815fc8:	e0bffe17 	ldw	r2,-8(fp)
  815fcc:	1004c03a 	cmpne	r2,r2,zero
  815fd0:	1000021e 	bne	r2,zero,815fdc <OSSemAccept+0x28>
        return (0);
  815fd4:	e03fff15 	stw	zero,-4(fp)
  815fd8:	00002106 	br	816060 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  815fdc:	e0bffe17 	ldw	r2,-8(fp)
  815fe0:	10800003 	ldbu	r2,0(r2)
  815fe4:	10803fcc 	andi	r2,r2,255
  815fe8:	108000e0 	cmpeqi	r2,r2,3
  815fec:	1000021e 	bne	r2,zero,815ff8 <OSSemAccept+0x44>
        return (0);
  815ff0:	e03fff15 	stw	zero,-4(fp)
  815ff4:	00001a06 	br	816060 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815ff8:	0005303a 	rdctl	r2,status
  815ffc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816000:	e0fffb17 	ldw	r3,-20(fp)
  816004:	00bfff84 	movi	r2,-2
  816008:	1884703a 	and	r2,r3,r2
  81600c:	1001703a 	wrctl	status,r2
  
  return context;
  816010:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  816014:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
  816018:	e0bffe17 	ldw	r2,-8(fp)
  81601c:	1080020b 	ldhu	r2,8(r2)
  816020:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  816024:	e0bffd0b 	ldhu	r2,-12(fp)
  816028:	1005003a 	cmpeq	r2,r2,zero
  81602c:	1000061e 	bne	r2,zero,816048 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  816030:	e0bffe17 	ldw	r2,-8(fp)
  816034:	1080020b 	ldhu	r2,8(r2)
  816038:	10bfffc4 	addi	r2,r2,-1
  81603c:	1007883a 	mov	r3,r2
  816040:	e0bffe17 	ldw	r2,-8(fp)
  816044:	10c0020d 	sth	r3,8(r2)
  816048:	e0bffc17 	ldw	r2,-16(fp)
  81604c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816050:	e0bffa17 	ldw	r2,-24(fp)
  816054:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  816058:	e0bffd0b 	ldhu	r2,-12(fp)
  81605c:	e0bfff15 	stw	r2,-4(fp)
  816060:	e0bfff17 	ldw	r2,-4(fp)
}
  816064:	e037883a 	mov	sp,fp
  816068:	df000017 	ldw	fp,0(sp)
  81606c:	dec00104 	addi	sp,sp,4
  816070:	f800283a 	ret

00816074 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  816074:	defff804 	addi	sp,sp,-32
  816078:	dfc00715 	stw	ra,28(sp)
  81607c:	df000615 	stw	fp,24(sp)
  816080:	df000604 	addi	fp,sp,24
  816084:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  816088:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  81608c:	008020b4 	movhi	r2,130
  816090:	10be0204 	addi	r2,r2,-2040
  816094:	10800003 	ldbu	r2,0(r2)
  816098:	10803fcc 	andi	r2,r2,255
  81609c:	1005003a 	cmpeq	r2,r2,zero
  8160a0:	1000021e 	bne	r2,zero,8160ac <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  8160a4:	e03fff15 	stw	zero,-4(fp)
  8160a8:	00003106 	br	816170 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8160ac:	0005303a 	rdctl	r2,status
  8160b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8160b4:	e0fffb17 	ldw	r3,-20(fp)
  8160b8:	00bfff84 	movi	r2,-2
  8160bc:	1884703a 	and	r2,r3,r2
  8160c0:	1001703a 	wrctl	status,r2
  
  return context;
  8160c4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  8160c8:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  8160cc:	008020b4 	movhi	r2,130
  8160d0:	10be0104 	addi	r2,r2,-2044
  8160d4:	10800017 	ldw	r2,0(r2)
  8160d8:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  8160dc:	008020b4 	movhi	r2,130
  8160e0:	10be0104 	addi	r2,r2,-2044
  8160e4:	10800017 	ldw	r2,0(r2)
  8160e8:	1005003a 	cmpeq	r2,r2,zero
  8160ec:	1000081e 	bne	r2,zero,816110 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  8160f0:	008020b4 	movhi	r2,130
  8160f4:	10be0104 	addi	r2,r2,-2044
  8160f8:	10800017 	ldw	r2,0(r2)
  8160fc:	10800117 	ldw	r2,4(r2)
  816100:	1007883a 	mov	r3,r2
  816104:	008020b4 	movhi	r2,130
  816108:	10be0104 	addi	r2,r2,-2044
  81610c:	10c00015 	stw	r3,0(r2)
  816110:	e0bffc17 	ldw	r2,-16(fp)
  816114:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816118:	e0bffa17 	ldw	r2,-24(fp)
  81611c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  816120:	e0bffd17 	ldw	r2,-12(fp)
  816124:	1005003a 	cmpeq	r2,r2,zero
  816128:	10000f1e 	bne	r2,zero,816168 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  81612c:	e0fffd17 	ldw	r3,-12(fp)
  816130:	008000c4 	movi	r2,3
  816134:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  816138:	e0fffd17 	ldw	r3,-12(fp)
  81613c:	e0bffe0b 	ldhu	r2,-8(fp)
  816140:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  816144:	e0bffd17 	ldw	r2,-12(fp)
  816148:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  81614c:	e0fffd17 	ldw	r3,-12(fp)
  816150:	00800fc4 	movi	r2,63
  816154:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  816158:	e0bffd17 	ldw	r2,-12(fp)
  81615c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  816160:	e13ffd17 	ldw	r4,-12(fp)
  816164:	0811e380 	call	811e38 <OS_EventWaitListInit>
    }
    return (pevent);
  816168:	e0bffd17 	ldw	r2,-12(fp)
  81616c:	e0bfff15 	stw	r2,-4(fp)
  816170:	e0bfff17 	ldw	r2,-4(fp)
}
  816174:	e037883a 	mov	sp,fp
  816178:	dfc00117 	ldw	ra,4(sp)
  81617c:	df000017 	ldw	fp,0(sp)
  816180:	dec00204 	addi	sp,sp,8
  816184:	f800283a 	ret

00816188 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  816188:	defff104 	addi	sp,sp,-60
  81618c:	dfc00e15 	stw	ra,56(sp)
  816190:	df000d15 	stw	fp,52(sp)
  816194:	df000d04 	addi	fp,sp,52
  816198:	e13ffb15 	stw	r4,-20(fp)
  81619c:	e1bffd15 	stw	r6,-12(fp)
  8161a0:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8161a4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8161a8:	e0bffd17 	ldw	r2,-12(fp)
  8161ac:	1004c03a 	cmpne	r2,r2,zero
  8161b0:	1000031e 	bne	r2,zero,8161c0 <OSSemDel+0x38>
        return (pevent);
  8161b4:	e0bffb17 	ldw	r2,-20(fp)
  8161b8:	e0bfff15 	stw	r2,-4(fp)
  8161bc:	00009406 	br	816410 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  8161c0:	e0bffb17 	ldw	r2,-20(fp)
  8161c4:	1004c03a 	cmpne	r2,r2,zero
  8161c8:	1000061e 	bne	r2,zero,8161e4 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  8161cc:	e0fffd17 	ldw	r3,-12(fp)
  8161d0:	00800104 	movi	r2,4
  8161d4:	18800005 	stb	r2,0(r3)
        return (pevent);
  8161d8:	e0fffb17 	ldw	r3,-20(fp)
  8161dc:	e0ffff15 	stw	r3,-4(fp)
  8161e0:	00008b06 	br	816410 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  8161e4:	e0bffb17 	ldw	r2,-20(fp)
  8161e8:	10800003 	ldbu	r2,0(r2)
  8161ec:	10803fcc 	andi	r2,r2,255
  8161f0:	108000e0 	cmpeqi	r2,r2,3
  8161f4:	1000061e 	bne	r2,zero,816210 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  8161f8:	e0fffd17 	ldw	r3,-12(fp)
  8161fc:	00800044 	movi	r2,1
  816200:	18800005 	stb	r2,0(r3)
        return (pevent);
  816204:	e0bffb17 	ldw	r2,-20(fp)
  816208:	e0bfff15 	stw	r2,-4(fp)
  81620c:	00008006 	br	816410 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  816210:	008020b4 	movhi	r2,130
  816214:	10be0204 	addi	r2,r2,-2040
  816218:	10800003 	ldbu	r2,0(r2)
  81621c:	10803fcc 	andi	r2,r2,255
  816220:	1005003a 	cmpeq	r2,r2,zero
  816224:	1000061e 	bne	r2,zero,816240 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  816228:	e0fffd17 	ldw	r3,-12(fp)
  81622c:	008003c4 	movi	r2,15
  816230:	18800005 	stb	r2,0(r3)
        return (pevent);
  816234:	e0fffb17 	ldw	r3,-20(fp)
  816238:	e0ffff15 	stw	r3,-4(fp)
  81623c:	00007406 	br	816410 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816240:	0005303a 	rdctl	r2,status
  816244:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816248:	e0fff717 	ldw	r3,-36(fp)
  81624c:	00bfff84 	movi	r2,-2
  816250:	1884703a 	and	r2,r3,r2
  816254:	1001703a 	wrctl	status,r2
  
  return context;
  816258:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  81625c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  816260:	e0bffb17 	ldw	r2,-20(fp)
  816264:	10800283 	ldbu	r2,10(r2)
  816268:	10803fcc 	andi	r2,r2,255
  81626c:	1005003a 	cmpeq	r2,r2,zero
  816270:	1000031e 	bne	r2,zero,816280 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  816274:	00800044 	movi	r2,1
  816278:	e0bffa05 	stb	r2,-24(fp)
  81627c:	00000106 	br	816284 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  816280:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  816284:	e0bffc03 	ldbu	r2,-16(fp)
  816288:	e0bffe15 	stw	r2,-8(fp)
  81628c:	e0fffe17 	ldw	r3,-8(fp)
  816290:	1805003a 	cmpeq	r2,r3,zero
  816294:	1000041e 	bne	r2,zero,8162a8 <OSSemDel+0x120>
  816298:	e0fffe17 	ldw	r3,-8(fp)
  81629c:	18800060 	cmpeqi	r2,r3,1
  8162a0:	10002d1e 	bne	r2,zero,816358 <OSSemDel+0x1d0>
  8162a4:	00004f06 	br	8163e4 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  8162a8:	e0bffa03 	ldbu	r2,-24(fp)
  8162ac:	1004c03a 	cmpne	r2,r2,zero
  8162b0:	10001a1e 	bne	r2,zero,81631c <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  8162b4:	e0fffb17 	ldw	r3,-20(fp)
  8162b8:	00800fc4 	movi	r2,63
  8162bc:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  8162c0:	e0bffb17 	ldw	r2,-20(fp)
  8162c4:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  8162c8:	e0bffb17 	ldw	r2,-20(fp)
  8162cc:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  8162d0:	008020b4 	movhi	r2,130
  8162d4:	10be0104 	addi	r2,r2,-2044
  8162d8:	10c00017 	ldw	r3,0(r2)
  8162dc:	e0bffb17 	ldw	r2,-20(fp)
  8162e0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  8162e4:	e0bffb17 	ldw	r2,-20(fp)
  8162e8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  8162ec:	00c020b4 	movhi	r3,130
  8162f0:	18fe0104 	addi	r3,r3,-2044
  8162f4:	e0bffb17 	ldw	r2,-20(fp)
  8162f8:	18800015 	stw	r2,0(r3)
  8162fc:	e0bff817 	ldw	r2,-32(fp)
  816300:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816304:	e0bff617 	ldw	r2,-40(fp)
  816308:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  81630c:	e0bffd17 	ldw	r2,-12(fp)
  816310:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  816314:	e03ff915 	stw	zero,-28(fp)
  816318:	00003b06 	br	816408 <OSSemDel+0x280>
  81631c:	e0bff817 	ldw	r2,-32(fp)
  816320:	e0bff515 	stw	r2,-44(fp)
  816324:	e0bff517 	ldw	r2,-44(fp)
  816328:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  81632c:	e0fffd17 	ldw	r3,-12(fp)
  816330:	00801244 	movi	r2,73
  816334:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  816338:	e0bffb17 	ldw	r2,-20(fp)
  81633c:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  816340:	00003106 	br	816408 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  816344:	e13ffb17 	ldw	r4,-20(fp)
  816348:	000b883a 	mov	r5,zero
  81634c:	01800044 	movi	r6,1
  816350:	000f883a 	mov	r7,zero
  816354:	08118840 	call	811884 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  816358:	e0bffb17 	ldw	r2,-20(fp)
  81635c:	10800283 	ldbu	r2,10(r2)
  816360:	10803fcc 	andi	r2,r2,255
  816364:	1004c03a 	cmpne	r2,r2,zero
  816368:	103ff61e 	bne	r2,zero,816344 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  81636c:	e0fffb17 	ldw	r3,-20(fp)
  816370:	00800fc4 	movi	r2,63
  816374:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  816378:	e0bffb17 	ldw	r2,-20(fp)
  81637c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  816380:	e0bffb17 	ldw	r2,-20(fp)
  816384:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  816388:	008020b4 	movhi	r2,130
  81638c:	10be0104 	addi	r2,r2,-2044
  816390:	10c00017 	ldw	r3,0(r2)
  816394:	e0bffb17 	ldw	r2,-20(fp)
  816398:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  81639c:	e0bffb17 	ldw	r2,-20(fp)
  8163a0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  8163a4:	00c020b4 	movhi	r3,130
  8163a8:	18fe0104 	addi	r3,r3,-2044
  8163ac:	e0bffb17 	ldw	r2,-20(fp)
  8163b0:	18800015 	stw	r2,0(r3)
  8163b4:	e0bff817 	ldw	r2,-32(fp)
  8163b8:	e0bff415 	stw	r2,-48(fp)
  8163bc:	e0bff417 	ldw	r2,-48(fp)
  8163c0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  8163c4:	e0bffa03 	ldbu	r2,-24(fp)
  8163c8:	10800058 	cmpnei	r2,r2,1
  8163cc:	1000011e 	bne	r2,zero,8163d4 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  8163d0:	08122c40 	call	8122c4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  8163d4:	e0bffd17 	ldw	r2,-12(fp)
  8163d8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  8163dc:	e03ff915 	stw	zero,-28(fp)
             break;
  8163e0:	00000906 	br	816408 <OSSemDel+0x280>
  8163e4:	e0bff817 	ldw	r2,-32(fp)
  8163e8:	e0bff315 	stw	r2,-52(fp)
  8163ec:	e0bff317 	ldw	r2,-52(fp)
  8163f0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  8163f4:	e0fffd17 	ldw	r3,-12(fp)
  8163f8:	008001c4 	movi	r2,7
  8163fc:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  816400:	e0bffb17 	ldw	r2,-20(fp)
  816404:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  816408:	e0bff917 	ldw	r2,-28(fp)
  81640c:	e0bfff15 	stw	r2,-4(fp)
  816410:	e0bfff17 	ldw	r2,-4(fp)
}
  816414:	e037883a 	mov	sp,fp
  816418:	dfc00117 	ldw	ra,4(sp)
  81641c:	df000017 	ldw	fp,0(sp)
  816420:	dec00204 	addi	sp,sp,8
  816424:	f800283a 	ret

00816428 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  816428:	defff404 	addi	sp,sp,-48
  81642c:	dfc00b15 	stw	ra,44(sp)
  816430:	df000a15 	stw	fp,40(sp)
  816434:	df000a04 	addi	fp,sp,40
  816438:	e13ffc15 	stw	r4,-16(fp)
  81643c:	e1bffe15 	stw	r6,-8(fp)
  816440:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  816444:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  816448:	e0bffe17 	ldw	r2,-8(fp)
  81644c:	1005003a 	cmpeq	r2,r2,zero
  816450:	10008f1e 	bne	r2,zero,816690 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  816454:	e0bffc17 	ldw	r2,-16(fp)
  816458:	1004c03a 	cmpne	r2,r2,zero
  81645c:	1000041e 	bne	r2,zero,816470 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  816460:	e0fffe17 	ldw	r3,-8(fp)
  816464:	00800104 	movi	r2,4
  816468:	18800005 	stb	r2,0(r3)
        return;
  81646c:	00008806 	br	816690 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  816470:	e0bffc17 	ldw	r2,-16(fp)
  816474:	10800003 	ldbu	r2,0(r2)
  816478:	10803fcc 	andi	r2,r2,255
  81647c:	108000e0 	cmpeqi	r2,r2,3
  816480:	1000041e 	bne	r2,zero,816494 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  816484:	e0fffe17 	ldw	r3,-8(fp)
  816488:	00800044 	movi	r2,1
  81648c:	18800005 	stb	r2,0(r3)
        return;
  816490:	00007f06 	br	816690 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  816494:	008020b4 	movhi	r2,130
  816498:	10be0204 	addi	r2,r2,-2040
  81649c:	10800003 	ldbu	r2,0(r2)
  8164a0:	10803fcc 	andi	r2,r2,255
  8164a4:	1005003a 	cmpeq	r2,r2,zero
  8164a8:	1000041e 	bne	r2,zero,8164bc <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  8164ac:	e0fffe17 	ldw	r3,-8(fp)
  8164b0:	00800084 	movi	r2,2
  8164b4:	18800005 	stb	r2,0(r3)
        return;
  8164b8:	00007506 	br	816690 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  8164bc:	008020b4 	movhi	r2,130
  8164c0:	10bdf404 	addi	r2,r2,-2096
  8164c4:	10800003 	ldbu	r2,0(r2)
  8164c8:	10803fcc 	andi	r2,r2,255
  8164cc:	1005003a 	cmpeq	r2,r2,zero
  8164d0:	1000041e 	bne	r2,zero,8164e4 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  8164d4:	e0fffe17 	ldw	r3,-8(fp)
  8164d8:	00800344 	movi	r2,13
  8164dc:	18800005 	stb	r2,0(r3)
        return;
  8164e0:	00006b06 	br	816690 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8164e4:	0005303a 	rdctl	r2,status
  8164e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8164ec:	e0fffa17 	ldw	r3,-24(fp)
  8164f0:	00bfff84 	movi	r2,-2
  8164f4:	1884703a 	and	r2,r3,r2
  8164f8:	1001703a 	wrctl	status,r2
  
  return context;
  8164fc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  816500:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  816504:	e0bffc17 	ldw	r2,-16(fp)
  816508:	1080020b 	ldhu	r2,8(r2)
  81650c:	10bfffcc 	andi	r2,r2,65535
  816510:	1005003a 	cmpeq	r2,r2,zero
  816514:	10000d1e 	bne	r2,zero,81654c <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  816518:	e0bffc17 	ldw	r2,-16(fp)
  81651c:	1080020b 	ldhu	r2,8(r2)
  816520:	10bfffc4 	addi	r2,r2,-1
  816524:	1007883a 	mov	r3,r2
  816528:	e0bffc17 	ldw	r2,-16(fp)
  81652c:	10c0020d 	sth	r3,8(r2)
  816530:	e0bffb17 	ldw	r2,-20(fp)
  816534:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816538:	e0bff917 	ldw	r2,-28(fp)
  81653c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  816540:	e0bffe17 	ldw	r2,-8(fp)
  816544:	10000005 	stb	zero,0(r2)
        return;
  816548:	00005106 	br	816690 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  81654c:	008020b4 	movhi	r2,130
  816550:	10be0304 	addi	r2,r2,-2036
  816554:	10c00017 	ldw	r3,0(r2)
  816558:	008020b4 	movhi	r2,130
  81655c:	10be0304 	addi	r2,r2,-2036
  816560:	10800017 	ldw	r2,0(r2)
  816564:	10800c03 	ldbu	r2,48(r2)
  816568:	10800054 	ori	r2,r2,1
  81656c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  816570:	008020b4 	movhi	r2,130
  816574:	10be0304 	addi	r2,r2,-2036
  816578:	10800017 	ldw	r2,0(r2)
  81657c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  816580:	008020b4 	movhi	r2,130
  816584:	10be0304 	addi	r2,r2,-2036
  816588:	10c00017 	ldw	r3,0(r2)
  81658c:	e0bffd0b 	ldhu	r2,-12(fp)
  816590:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  816594:	e13ffc17 	ldw	r4,-16(fp)
  816598:	0811a180 	call	811a18 <OS_EventTaskWait>
  81659c:	e0bffb17 	ldw	r2,-20(fp)
  8165a0:	e0bff815 	stw	r2,-32(fp)
  8165a4:	e0bff817 	ldw	r2,-32(fp)
  8165a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  8165ac:	08122c40 	call	8122c4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8165b0:	0005303a 	rdctl	r2,status
  8165b4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8165b8:	e0fff717 	ldw	r3,-36(fp)
  8165bc:	00bfff84 	movi	r2,-2
  8165c0:	1884703a 	and	r2,r3,r2
  8165c4:	1001703a 	wrctl	status,r2
  
  return context;
  8165c8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  8165cc:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  8165d0:	008020b4 	movhi	r2,130
  8165d4:	10be0304 	addi	r2,r2,-2036
  8165d8:	10800017 	ldw	r2,0(r2)
  8165dc:	10800c43 	ldbu	r2,49(r2)
  8165e0:	10803fcc 	andi	r2,r2,255
  8165e4:	e0bfff15 	stw	r2,-4(fp)
  8165e8:	e0ffff17 	ldw	r3,-4(fp)
  8165ec:	1805003a 	cmpeq	r2,r3,zero
  8165f0:	1000041e 	bne	r2,zero,816604 <OSSemPend+0x1dc>
  8165f4:	e0ffff17 	ldw	r3,-4(fp)
  8165f8:	188000a0 	cmpeqi	r2,r3,2
  8165fc:	1000041e 	bne	r2,zero,816610 <OSSemPend+0x1e8>
  816600:	00000706 	br	816620 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  816604:	e0bffe17 	ldw	r2,-8(fp)
  816608:	10000005 	stb	zero,0(r2)
             break;
  81660c:	00000c06 	br	816640 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  816610:	e0fffe17 	ldw	r3,-8(fp)
  816614:	00800384 	movi	r2,14
  816618:	18800005 	stb	r2,0(r3)
             break;
  81661c:	00000806 	br	816640 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  816620:	008020b4 	movhi	r2,130
  816624:	10be0304 	addi	r2,r2,-2036
  816628:	11000017 	ldw	r4,0(r2)
  81662c:	e17ffc17 	ldw	r5,-16(fp)
  816630:	0811c7c0 	call	811c7c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  816634:	e0fffe17 	ldw	r3,-8(fp)
  816638:	00800284 	movi	r2,10
  81663c:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  816640:	008020b4 	movhi	r2,130
  816644:	10be0304 	addi	r2,r2,-2036
  816648:	10800017 	ldw	r2,0(r2)
  81664c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  816650:	008020b4 	movhi	r2,130
  816654:	10be0304 	addi	r2,r2,-2036
  816658:	10800017 	ldw	r2,0(r2)
  81665c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  816660:	008020b4 	movhi	r2,130
  816664:	10be0304 	addi	r2,r2,-2036
  816668:	10800017 	ldw	r2,0(r2)
  81666c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  816670:	008020b4 	movhi	r2,130
  816674:	10be0304 	addi	r2,r2,-2036
  816678:	10800017 	ldw	r2,0(r2)
  81667c:	10000815 	stw	zero,32(r2)
  816680:	e0bffb17 	ldw	r2,-20(fp)
  816684:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816688:	e0bff617 	ldw	r2,-40(fp)
  81668c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
  816690:	e037883a 	mov	sp,fp
  816694:	dfc00117 	ldw	ra,4(sp)
  816698:	df000017 	ldw	fp,0(sp)
  81669c:	dec00204 	addi	sp,sp,8
  8166a0:	f800283a 	ret

008166a4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  8166a4:	defff504 	addi	sp,sp,-44
  8166a8:	dfc00a15 	stw	ra,40(sp)
  8166ac:	df000915 	stw	fp,36(sp)
  8166b0:	df000904 	addi	fp,sp,36
  8166b4:	e13ffc15 	stw	r4,-16(fp)
  8166b8:	e1bffe15 	stw	r6,-8(fp)
  8166bc:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8166c0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8166c4:	e0bffe17 	ldw	r2,-8(fp)
  8166c8:	1004c03a 	cmpne	r2,r2,zero
  8166cc:	1000021e 	bne	r2,zero,8166d8 <OSSemPendAbort+0x34>
        return (0);
  8166d0:	e03fff15 	stw	zero,-4(fp)
  8166d4:	00004c06 	br	816808 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8166d8:	e0bffc17 	ldw	r2,-16(fp)
  8166dc:	1004c03a 	cmpne	r2,r2,zero
  8166e0:	1000051e 	bne	r2,zero,8166f8 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  8166e4:	e0fffe17 	ldw	r3,-8(fp)
  8166e8:	00800104 	movi	r2,4
  8166ec:	18800005 	stb	r2,0(r3)
        return (0);
  8166f0:	e03fff15 	stw	zero,-4(fp)
  8166f4:	00004406 	br	816808 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8166f8:	e0bffc17 	ldw	r2,-16(fp)
  8166fc:	10800003 	ldbu	r2,0(r2)
  816700:	10803fcc 	andi	r2,r2,255
  816704:	108000e0 	cmpeqi	r2,r2,3
  816708:	1000051e 	bne	r2,zero,816720 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  81670c:	e0fffe17 	ldw	r3,-8(fp)
  816710:	00800044 	movi	r2,1
  816714:	18800005 	stb	r2,0(r3)
        return (0);
  816718:	e03fff15 	stw	zero,-4(fp)
  81671c:	00003a06 	br	816808 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816720:	0005303a 	rdctl	r2,status
  816724:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816728:	e0fff917 	ldw	r3,-28(fp)
  81672c:	00bfff84 	movi	r2,-2
  816730:	1884703a 	and	r2,r3,r2
  816734:	1001703a 	wrctl	status,r2
  
  return context;
  816738:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81673c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  816740:	e0bffc17 	ldw	r2,-16(fp)
  816744:	10800283 	ldbu	r2,10(r2)
  816748:	10803fcc 	andi	r2,r2,255
  81674c:	1005003a 	cmpeq	r2,r2,zero
  816750:	1000261e 	bne	r2,zero,8167ec <OSSemPendAbort+0x148>
        nbr_tasks = 0;
  816754:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  816758:	e0bffd03 	ldbu	r2,-12(fp)
  81675c:	10800060 	cmpeqi	r2,r2,1
  816760:	1000091e 	bne	r2,zero,816788 <OSSemPendAbort+0xe4>
  816764:	00000e06 	br	8167a0 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  816768:	e13ffc17 	ldw	r4,-16(fp)
  81676c:	000b883a 	mov	r5,zero
  816770:	01800044 	movi	r6,1
  816774:	01c00084 	movi	r7,2
  816778:	08118840 	call	811884 <OS_EventTaskRdy>
                     nbr_tasks++;
  81677c:	e0bffb03 	ldbu	r2,-20(fp)
  816780:	10800044 	addi	r2,r2,1
  816784:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  816788:	e0bffc17 	ldw	r2,-16(fp)
  81678c:	10800283 	ldbu	r2,10(r2)
  816790:	10803fcc 	andi	r2,r2,255
  816794:	1004c03a 	cmpne	r2,r2,zero
  816798:	103ff31e 	bne	r2,zero,816768 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  81679c:	00000806 	br	8167c0 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  8167a0:	e13ffc17 	ldw	r4,-16(fp)
  8167a4:	000b883a 	mov	r5,zero
  8167a8:	01800044 	movi	r6,1
  8167ac:	01c00084 	movi	r7,2
  8167b0:	08118840 	call	811884 <OS_EventTaskRdy>
                 nbr_tasks++;
  8167b4:	e0bffb03 	ldbu	r2,-20(fp)
  8167b8:	10800044 	addi	r2,r2,1
  8167bc:	e0bffb05 	stb	r2,-20(fp)
  8167c0:	e0bffa17 	ldw	r2,-24(fp)
  8167c4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8167c8:	e0bff817 	ldw	r2,-32(fp)
  8167cc:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  8167d0:	08122c40 	call	8122c4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  8167d4:	e0fffe17 	ldw	r3,-8(fp)
  8167d8:	00800384 	movi	r2,14
  8167dc:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  8167e0:	e0bffb03 	ldbu	r2,-20(fp)
  8167e4:	e0bfff15 	stw	r2,-4(fp)
  8167e8:	00000706 	br	816808 <OSSemPendAbort+0x164>
  8167ec:	e0bffa17 	ldw	r2,-24(fp)
  8167f0:	e0bff715 	stw	r2,-36(fp)
  8167f4:	e0bff717 	ldw	r2,-36(fp)
  8167f8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8167fc:	e0bffe17 	ldw	r2,-8(fp)
  816800:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  816804:	e03fff15 	stw	zero,-4(fp)
  816808:	e0bfff17 	ldw	r2,-4(fp)
}
  81680c:	e037883a 	mov	sp,fp
  816810:	dfc00117 	ldw	ra,4(sp)
  816814:	df000017 	ldw	fp,0(sp)
  816818:	dec00204 	addi	sp,sp,8
  81681c:	f800283a 	ret

00816820 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  816820:	defff704 	addi	sp,sp,-36
  816824:	dfc00815 	stw	ra,32(sp)
  816828:	df000715 	stw	fp,28(sp)
  81682c:	df000704 	addi	fp,sp,28
  816830:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  816834:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  816838:	e0bffe17 	ldw	r2,-8(fp)
  81683c:	1004c03a 	cmpne	r2,r2,zero
  816840:	1000031e 	bne	r2,zero,816850 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
  816844:	00800104 	movi	r2,4
  816848:	e0bfff15 	stw	r2,-4(fp)
  81684c:	00003806 	br	816930 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  816850:	e0bffe17 	ldw	r2,-8(fp)
  816854:	10800003 	ldbu	r2,0(r2)
  816858:	10803fcc 	andi	r2,r2,255
  81685c:	108000e0 	cmpeqi	r2,r2,3
  816860:	1000031e 	bne	r2,zero,816870 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
  816864:	00800044 	movi	r2,1
  816868:	e0bfff15 	stw	r2,-4(fp)
  81686c:	00003006 	br	816930 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816870:	0005303a 	rdctl	r2,status
  816874:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816878:	e0fffc17 	ldw	r3,-16(fp)
  81687c:	00bfff84 	movi	r2,-2
  816880:	1884703a 	and	r2,r3,r2
  816884:	1001703a 	wrctl	status,r2
  
  return context;
  816888:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  81688c:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  816890:	e0bffe17 	ldw	r2,-8(fp)
  816894:	10800283 	ldbu	r2,10(r2)
  816898:	10803fcc 	andi	r2,r2,255
  81689c:	1005003a 	cmpeq	r2,r2,zero
  8168a0:	10000c1e 	bne	r2,zero,8168d4 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  8168a4:	e13ffe17 	ldw	r4,-8(fp)
  8168a8:	000b883a 	mov	r5,zero
  8168ac:	01800044 	movi	r6,1
  8168b0:	000f883a 	mov	r7,zero
  8168b4:	08118840 	call	811884 <OS_EventTaskRdy>
  8168b8:	e0bffd17 	ldw	r2,-12(fp)
  8168bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8168c0:	e0bffb17 	ldw	r2,-20(fp)
  8168c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  8168c8:	08122c40 	call	8122c4 <OS_Sched>
        return (OS_ERR_NONE);
  8168cc:	e03fff15 	stw	zero,-4(fp)
  8168d0:	00001706 	br	816930 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  8168d4:	e0bffe17 	ldw	r2,-8(fp)
  8168d8:	1080020b 	ldhu	r2,8(r2)
  8168dc:	10ffffcc 	andi	r3,r2,65535
  8168e0:	00bfffd4 	movui	r2,65535
  8168e4:	18800c26 	beq	r3,r2,816918 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  8168e8:	e0bffe17 	ldw	r2,-8(fp)
  8168ec:	1080020b 	ldhu	r2,8(r2)
  8168f0:	10800044 	addi	r2,r2,1
  8168f4:	1007883a 	mov	r3,r2
  8168f8:	e0bffe17 	ldw	r2,-8(fp)
  8168fc:	10c0020d 	sth	r3,8(r2)
  816900:	e0bffd17 	ldw	r2,-12(fp)
  816904:	e0bffa15 	stw	r2,-24(fp)
  816908:	e0bffa17 	ldw	r2,-24(fp)
  81690c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  816910:	e03fff15 	stw	zero,-4(fp)
  816914:	00000606 	br	816930 <OSSemPost+0x110>
  816918:	e0bffd17 	ldw	r2,-12(fp)
  81691c:	e0bff915 	stw	r2,-28(fp)
  816920:	e0bff917 	ldw	r2,-28(fp)
  816924:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  816928:	00800c84 	movi	r2,50
  81692c:	e0bfff15 	stw	r2,-4(fp)
  816930:	e0bfff17 	ldw	r2,-4(fp)
}
  816934:	e037883a 	mov	sp,fp
  816938:	dfc00117 	ldw	ra,4(sp)
  81693c:	df000017 	ldw	fp,0(sp)
  816940:	dec00204 	addi	sp,sp,8
  816944:	f800283a 	ret

00816948 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  816948:	defff604 	addi	sp,sp,-40
  81694c:	df000915 	stw	fp,36(sp)
  816950:	df000904 	addi	fp,sp,36
  816954:	e13ffd15 	stw	r4,-12(fp)
  816958:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81695c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  816960:	e0bffd17 	ldw	r2,-12(fp)
  816964:	1004c03a 	cmpne	r2,r2,zero
  816968:	1000031e 	bne	r2,zero,816978 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  81696c:	00800104 	movi	r2,4
  816970:	e0bfff15 	stw	r2,-4(fp)
  816974:	00003b06 	br	816a64 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  816978:	e0bffe17 	ldw	r2,-8(fp)
  81697c:	1004c03a 	cmpne	r2,r2,zero
  816980:	1000031e 	bne	r2,zero,816990 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  816984:	00800244 	movi	r2,9
  816988:	e0bfff15 	stw	r2,-4(fp)
  81698c:	00003506 	br	816a64 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  816990:	e0bffd17 	ldw	r2,-12(fp)
  816994:	10800003 	ldbu	r2,0(r2)
  816998:	10803fcc 	andi	r2,r2,255
  81699c:	108000e0 	cmpeqi	r2,r2,3
  8169a0:	1000031e 	bne	r2,zero,8169b0 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  8169a4:	00800044 	movi	r2,1
  8169a8:	e0bfff15 	stw	r2,-4(fp)
  8169ac:	00002d06 	br	816a64 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8169b0:	0005303a 	rdctl	r2,status
  8169b4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8169b8:	e0fff817 	ldw	r3,-32(fp)
  8169bc:	00bfff84 	movi	r2,-2
  8169c0:	1884703a 	and	r2,r3,r2
  8169c4:	1001703a 	wrctl	status,r2
  
  return context;
  8169c8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  8169cc:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  8169d0:	e0bffd17 	ldw	r2,-12(fp)
  8169d4:	10c00283 	ldbu	r3,10(r2)
  8169d8:	e0bffe17 	ldw	r2,-8(fp)
  8169dc:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  8169e0:	e0bffd17 	ldw	r2,-12(fp)
  8169e4:	108002c4 	addi	r2,r2,11
  8169e8:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  8169ec:	e0bffe17 	ldw	r2,-8(fp)
  8169f0:	10800084 	addi	r2,r2,2
  8169f4:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  8169f8:	e03ffa05 	stb	zero,-24(fp)
  8169fc:	00000d06 	br	816a34 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
  816a00:	e0bffc17 	ldw	r2,-16(fp)
  816a04:	10c00003 	ldbu	r3,0(r2)
  816a08:	e0bffb17 	ldw	r2,-20(fp)
  816a0c:	10c00005 	stb	r3,0(r2)
  816a10:	e0bffb17 	ldw	r2,-20(fp)
  816a14:	10800044 	addi	r2,r2,1
  816a18:	e0bffb15 	stw	r2,-20(fp)
  816a1c:	e0bffc17 	ldw	r2,-16(fp)
  816a20:	10800044 	addi	r2,r2,1
  816a24:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  816a28:	e0bffa03 	ldbu	r2,-24(fp)
  816a2c:	10800044 	addi	r2,r2,1
  816a30:	e0bffa05 	stb	r2,-24(fp)
  816a34:	e0bffa03 	ldbu	r2,-24(fp)
  816a38:	108000f0 	cmpltui	r2,r2,3
  816a3c:	103ff01e 	bne	r2,zero,816a00 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  816a40:	e0bffd17 	ldw	r2,-12(fp)
  816a44:	10c0020b 	ldhu	r3,8(r2)
  816a48:	e0bffe17 	ldw	r2,-8(fp)
  816a4c:	10c0000d 	sth	r3,0(r2)
  816a50:	e0bff917 	ldw	r2,-28(fp)
  816a54:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816a58:	e0bff717 	ldw	r2,-36(fp)
  816a5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  816a60:	e03fff15 	stw	zero,-4(fp)
  816a64:	e0bfff17 	ldw	r2,-4(fp)
}
  816a68:	e037883a 	mov	sp,fp
  816a6c:	df000017 	ldw	fp,0(sp)
  816a70:	dec00104 	addi	sp,sp,4
  816a74:	f800283a 	ret

00816a78 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  816a78:	defff904 	addi	sp,sp,-28
  816a7c:	df000615 	stw	fp,24(sp)
  816a80:	df000604 	addi	fp,sp,24
  816a84:	e13ffd15 	stw	r4,-12(fp)
  816a88:	e1bfff15 	stw	r6,-4(fp)
  816a8c:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  816a90:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  816a94:	e0bfff17 	ldw	r2,-4(fp)
  816a98:	1005003a 	cmpeq	r2,r2,zero
  816a9c:	1000331e 	bne	r2,zero,816b6c <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  816aa0:	e0bffd17 	ldw	r2,-12(fp)
  816aa4:	1004c03a 	cmpne	r2,r2,zero
  816aa8:	1000041e 	bne	r2,zero,816abc <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  816aac:	e0ffff17 	ldw	r3,-4(fp)
  816ab0:	00800104 	movi	r2,4
  816ab4:	18800005 	stb	r2,0(r3)
        return;
  816ab8:	00002c06 	br	816b6c <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  816abc:	e0bffd17 	ldw	r2,-12(fp)
  816ac0:	10800003 	ldbu	r2,0(r2)
  816ac4:	10803fcc 	andi	r2,r2,255
  816ac8:	108000e0 	cmpeqi	r2,r2,3
  816acc:	1000041e 	bne	r2,zero,816ae0 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  816ad0:	e0ffff17 	ldw	r3,-4(fp)
  816ad4:	00800044 	movi	r2,1
  816ad8:	18800005 	stb	r2,0(r3)
        return;
  816adc:	00002306 	br	816b6c <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816ae0:	0005303a 	rdctl	r2,status
  816ae4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816ae8:	e0fffb17 	ldw	r3,-20(fp)
  816aec:	00bfff84 	movi	r2,-2
  816af0:	1884703a 	and	r2,r3,r2
  816af4:	1001703a 	wrctl	status,r2
  
  return context;
  816af8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  816afc:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
  816b00:	e0bfff17 	ldw	r2,-4(fp)
  816b04:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  816b08:	e0bffd17 	ldw	r2,-12(fp)
  816b0c:	1080020b 	ldhu	r2,8(r2)
  816b10:	10bfffcc 	andi	r2,r2,65535
  816b14:	1005003a 	cmpeq	r2,r2,zero
  816b18:	1000041e 	bne	r2,zero,816b2c <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  816b1c:	e0fffd17 	ldw	r3,-12(fp)
  816b20:	e0bffe0b 	ldhu	r2,-8(fp)
  816b24:	1880020d 	sth	r2,8(r3)
  816b28:	00000c06 	br	816b5c <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  816b2c:	e0bffd17 	ldw	r2,-12(fp)
  816b30:	10800283 	ldbu	r2,10(r2)
  816b34:	10803fcc 	andi	r2,r2,255
  816b38:	1004c03a 	cmpne	r2,r2,zero
  816b3c:	1000041e 	bne	r2,zero,816b50 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  816b40:	e0fffd17 	ldw	r3,-12(fp)
  816b44:	e0bffe0b 	ldhu	r2,-8(fp)
  816b48:	1880020d 	sth	r2,8(r3)
  816b4c:	00000306 	br	816b5c <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  816b50:	e0ffff17 	ldw	r3,-4(fp)
  816b54:	00801244 	movi	r2,73
  816b58:	18800005 	stb	r2,0(r3)
  816b5c:	e0bffc17 	ldw	r2,-16(fp)
  816b60:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816b64:	e0bffa17 	ldw	r2,-24(fp)
  816b68:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
  816b6c:	e037883a 	mov	sp,fp
  816b70:	df000017 	ldw	fp,0(sp)
  816b74:	dec00104 	addi	sp,sp,4
  816b78:	f800283a 	ret

00816b7c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  816b7c:	defff004 	addi	sp,sp,-64
  816b80:	dfc00f15 	stw	ra,60(sp)
  816b84:	df000e15 	stw	fp,56(sp)
  816b88:	df000e04 	addi	fp,sp,56
  816b8c:	e13ffd05 	stb	r4,-12(fp)
  816b90:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  816b94:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  816b98:	e0bffd03 	ldbu	r2,-12(fp)
  816b9c:	10800530 	cmpltui	r2,r2,20
  816ba0:	1000061e 	bne	r2,zero,816bbc <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
  816ba4:	e0bffd03 	ldbu	r2,-12(fp)
  816ba8:	10803fe0 	cmpeqi	r2,r2,255
  816bac:	1000031e 	bne	r2,zero,816bbc <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
  816bb0:	00800a84 	movi	r2,42
  816bb4:	e0bfff15 	stw	r2,-4(fp)
  816bb8:	00014706 	br	8170d8 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  816bbc:	e0bffe03 	ldbu	r2,-8(fp)
  816bc0:	10800530 	cmpltui	r2,r2,20
  816bc4:	1000031e 	bne	r2,zero,816bd4 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  816bc8:	00800a84 	movi	r2,42
  816bcc:	e0bfff15 	stw	r2,-4(fp)
  816bd0:	00014106 	br	8170d8 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816bd4:	0005303a 	rdctl	r2,status
  816bd8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816bdc:	e0fff617 	ldw	r3,-40(fp)
  816be0:	00bfff84 	movi	r2,-2
  816be4:	1884703a 	and	r2,r3,r2
  816be8:	1001703a 	wrctl	status,r2
  
  return context;
  816bec:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  816bf0:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  816bf4:	e0bffe03 	ldbu	r2,-8(fp)
  816bf8:	00c020b4 	movhi	r3,130
  816bfc:	18da8904 	addi	r3,r3,27172
  816c00:	1085883a 	add	r2,r2,r2
  816c04:	1085883a 	add	r2,r2,r2
  816c08:	10c5883a 	add	r2,r2,r3
  816c0c:	10800017 	ldw	r2,0(r2)
  816c10:	1005003a 	cmpeq	r2,r2,zero
  816c14:	1000071e 	bne	r2,zero,816c34 <OSTaskChangePrio+0xb8>
  816c18:	e0bff717 	ldw	r2,-36(fp)
  816c1c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816c20:	e0bff517 	ldw	r2,-44(fp)
  816c24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  816c28:	00800a04 	movi	r2,40
  816c2c:	e0bfff15 	stw	r2,-4(fp)
  816c30:	00012906 	br	8170d8 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  816c34:	e0bffd03 	ldbu	r2,-12(fp)
  816c38:	10803fd8 	cmpnei	r2,r2,255
  816c3c:	1000051e 	bne	r2,zero,816c54 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  816c40:	008020b4 	movhi	r2,130
  816c44:	10be0304 	addi	r2,r2,-2036
  816c48:	10800017 	ldw	r2,0(r2)
  816c4c:	10800c83 	ldbu	r2,50(r2)
  816c50:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  816c54:	e0bffd03 	ldbu	r2,-12(fp)
  816c58:	00c020b4 	movhi	r3,130
  816c5c:	18da8904 	addi	r3,r3,27172
  816c60:	1085883a 	add	r2,r2,r2
  816c64:	1085883a 	add	r2,r2,r2
  816c68:	10c5883a 	add	r2,r2,r3
  816c6c:	10800017 	ldw	r2,0(r2)
  816c70:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  816c74:	e0bffa17 	ldw	r2,-24(fp)
  816c78:	1004c03a 	cmpne	r2,r2,zero
  816c7c:	1000071e 	bne	r2,zero,816c9c <OSTaskChangePrio+0x120>
  816c80:	e0bff717 	ldw	r2,-36(fp)
  816c84:	e0bff415 	stw	r2,-48(fp)
  816c88:	e0bff417 	ldw	r2,-48(fp)
  816c8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  816c90:	00800a44 	movi	r2,41
  816c94:	e0bfff15 	stw	r2,-4(fp)
  816c98:	00010f06 	br	8170d8 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  816c9c:	e0bffa17 	ldw	r2,-24(fp)
  816ca0:	10800058 	cmpnei	r2,r2,1
  816ca4:	1000071e 	bne	r2,zero,816cc4 <OSTaskChangePrio+0x148>
  816ca8:	e0bff717 	ldw	r2,-36(fp)
  816cac:	e0bff315 	stw	r2,-52(fp)
  816cb0:	e0bff317 	ldw	r2,-52(fp)
  816cb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  816cb8:	008010c4 	movi	r2,67
  816cbc:	e0bfff15 	stw	r2,-4(fp)
  816cc0:	00010506 	br	8170d8 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  816cc4:	e0bffe03 	ldbu	r2,-8(fp)
  816cc8:	1004d0fa 	srli	r2,r2,3
  816ccc:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  816cd0:	e0bffe03 	ldbu	r2,-8(fp)
  816cd4:	108001cc 	andi	r2,r2,7
  816cd8:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
  816cdc:	e0fff983 	ldbu	r3,-26(fp)
  816ce0:	00800044 	movi	r2,1
  816ce4:	10c4983a 	sll	r2,r2,r3
  816ce8:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
  816cec:	e0fff943 	ldbu	r3,-27(fp)
  816cf0:	00800044 	movi	r2,1
  816cf4:	10c4983a 	sll	r2,r2,r3
  816cf8:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  816cfc:	e0bffd03 	ldbu	r2,-12(fp)
  816d00:	00c020b4 	movhi	r3,130
  816d04:	18da8904 	addi	r3,r3,27172
  816d08:	1085883a 	add	r2,r2,r2
  816d0c:	1085883a 	add	r2,r2,r2
  816d10:	10c5883a 	add	r2,r2,r3
  816d14:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  816d18:	e0bffe03 	ldbu	r2,-8(fp)
  816d1c:	00c020b4 	movhi	r3,130
  816d20:	18da8904 	addi	r3,r3,27172
  816d24:	1085883a 	add	r2,r2,r2
  816d28:	1085883a 	add	r2,r2,r2
  816d2c:	10c7883a 	add	r3,r2,r3
  816d30:	e0bffa17 	ldw	r2,-24(fp)
  816d34:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
  816d38:	e0bffa17 	ldw	r2,-24(fp)
  816d3c:	10800d03 	ldbu	r2,52(r2)
  816d40:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
  816d44:	e0bffa17 	ldw	r2,-24(fp)
  816d48:	10800d83 	ldbu	r2,54(r2)
  816d4c:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  816d50:	e0bffa17 	ldw	r2,-24(fp)
  816d54:	10800d43 	ldbu	r2,53(r2)
  816d58:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  816d5c:	e0fff903 	ldbu	r3,-28(fp)
  816d60:	008020b4 	movhi	r2,130
  816d64:	10be0044 	addi	r2,r2,-2047
  816d68:	10c5883a 	add	r2,r2,r3
  816d6c:	10c00003 	ldbu	r3,0(r2)
  816d70:	e0bff803 	ldbu	r2,-32(fp)
  816d74:	1884703a 	and	r2,r3,r2
  816d78:	10803fcc 	andi	r2,r2,255
  816d7c:	1005003a 	cmpeq	r2,r2,zero
  816d80:	1000381e 	bne	r2,zero,816e64 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
  816d84:	e13ff903 	ldbu	r4,-28(fp)
  816d88:	e0fff903 	ldbu	r3,-28(fp)
  816d8c:	008020b4 	movhi	r2,130
  816d90:	10be0044 	addi	r2,r2,-2047
  816d94:	10c5883a 	add	r2,r2,r3
  816d98:	10800003 	ldbu	r2,0(r2)
  816d9c:	1007883a 	mov	r3,r2
  816da0:	e0bff803 	ldbu	r2,-32(fp)
  816da4:	0084303a 	nor	r2,zero,r2
  816da8:	1884703a 	and	r2,r3,r2
  816dac:	1007883a 	mov	r3,r2
  816db0:	008020b4 	movhi	r2,130
  816db4:	10be0044 	addi	r2,r2,-2047
  816db8:	1105883a 	add	r2,r2,r4
  816dbc:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  816dc0:	e0fff903 	ldbu	r3,-28(fp)
  816dc4:	008020b4 	movhi	r2,130
  816dc8:	10be0044 	addi	r2,r2,-2047
  816dcc:	10c5883a 	add	r2,r2,r3
  816dd0:	10800003 	ldbu	r2,0(r2)
  816dd4:	10803fcc 	andi	r2,r2,255
  816dd8:	1004c03a 	cmpne	r2,r2,zero
  816ddc:	10000b1e 	bne	r2,zero,816e0c <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
  816de0:	e0bff843 	ldbu	r2,-31(fp)
  816de4:	0084303a 	nor	r2,zero,r2
  816de8:	1007883a 	mov	r3,r2
  816dec:	008020b4 	movhi	r2,130
  816df0:	10be0004 	addi	r2,r2,-2048
  816df4:	10800003 	ldbu	r2,0(r2)
  816df8:	1884703a 	and	r2,r3,r2
  816dfc:	1007883a 	mov	r3,r2
  816e00:	008020b4 	movhi	r2,130
  816e04:	10be0004 	addi	r2,r2,-2048
  816e08:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  816e0c:	008020b4 	movhi	r2,130
  816e10:	10be0004 	addi	r2,r2,-2048
  816e14:	10c00003 	ldbu	r3,0(r2)
  816e18:	e0bff8c3 	ldbu	r2,-29(fp)
  816e1c:	1884b03a 	or	r2,r3,r2
  816e20:	1007883a 	mov	r3,r2
  816e24:	008020b4 	movhi	r2,130
  816e28:	10be0004 	addi	r2,r2,-2048
  816e2c:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
  816e30:	e13ff983 	ldbu	r4,-26(fp)
  816e34:	e0fff983 	ldbu	r3,-26(fp)
  816e38:	008020b4 	movhi	r2,130
  816e3c:	10be0044 	addi	r2,r2,-2047
  816e40:	10c5883a 	add	r2,r2,r3
  816e44:	10c00003 	ldbu	r3,0(r2)
  816e48:	e0bff883 	ldbu	r2,-30(fp)
  816e4c:	1884b03a 	or	r2,r3,r2
  816e50:	1007883a 	mov	r3,r2
  816e54:	008020b4 	movhi	r2,130
  816e58:	10be0044 	addi	r2,r2,-2047
  816e5c:	1105883a 	add	r2,r2,r4
  816e60:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  816e64:	e0bffa17 	ldw	r2,-24(fp)
  816e68:	10800717 	ldw	r2,28(r2)
  816e6c:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
  816e70:	e0bffc17 	ldw	r2,-16(fp)
  816e74:	1005003a 	cmpeq	r2,r2,zero
  816e78:	1000341e 	bne	r2,zero,816f4c <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  816e7c:	e13ff903 	ldbu	r4,-28(fp)
  816e80:	e0fff903 	ldbu	r3,-28(fp)
  816e84:	e0bffc17 	ldw	r2,-16(fp)
  816e88:	1885883a 	add	r2,r3,r2
  816e8c:	10800204 	addi	r2,r2,8
  816e90:	108000c3 	ldbu	r2,3(r2)
  816e94:	1007883a 	mov	r3,r2
  816e98:	e0bff803 	ldbu	r2,-32(fp)
  816e9c:	0084303a 	nor	r2,zero,r2
  816ea0:	1884703a 	and	r2,r3,r2
  816ea4:	1007883a 	mov	r3,r2
  816ea8:	e0bffc17 	ldw	r2,-16(fp)
  816eac:	2085883a 	add	r2,r4,r2
  816eb0:	10800204 	addi	r2,r2,8
  816eb4:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  816eb8:	e0fff903 	ldbu	r3,-28(fp)
  816ebc:	e0bffc17 	ldw	r2,-16(fp)
  816ec0:	1885883a 	add	r2,r3,r2
  816ec4:	10800204 	addi	r2,r2,8
  816ec8:	108000c3 	ldbu	r2,3(r2)
  816ecc:	10803fcc 	andi	r2,r2,255
  816ed0:	1004c03a 	cmpne	r2,r2,zero
  816ed4:	1000091e 	bne	r2,zero,816efc <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
  816ed8:	e0bffc17 	ldw	r2,-16(fp)
  816edc:	10800283 	ldbu	r2,10(r2)
  816ee0:	1007883a 	mov	r3,r2
  816ee4:	e0bff843 	ldbu	r2,-31(fp)
  816ee8:	0084303a 	nor	r2,zero,r2
  816eec:	1884703a 	and	r2,r3,r2
  816ef0:	1007883a 	mov	r3,r2
  816ef4:	e0bffc17 	ldw	r2,-16(fp)
  816ef8:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  816efc:	e0bffc17 	ldw	r2,-16(fp)
  816f00:	10c00283 	ldbu	r3,10(r2)
  816f04:	e0bff8c3 	ldbu	r2,-29(fp)
  816f08:	1884b03a 	or	r2,r3,r2
  816f0c:	1007883a 	mov	r3,r2
  816f10:	e0bffc17 	ldw	r2,-16(fp)
  816f14:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  816f18:	e13ff983 	ldbu	r4,-26(fp)
  816f1c:	e0fff983 	ldbu	r3,-26(fp)
  816f20:	e0bffc17 	ldw	r2,-16(fp)
  816f24:	1885883a 	add	r2,r3,r2
  816f28:	10800204 	addi	r2,r2,8
  816f2c:	10c000c3 	ldbu	r3,3(r2)
  816f30:	e0bff883 	ldbu	r2,-30(fp)
  816f34:	1884b03a 	or	r2,r3,r2
  816f38:	1007883a 	mov	r3,r2
  816f3c:	e0bffc17 	ldw	r2,-16(fp)
  816f40:	2085883a 	add	r2,r4,r2
  816f44:	10800204 	addi	r2,r2,8
  816f48:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  816f4c:	e0bffa17 	ldw	r2,-24(fp)
  816f50:	10800817 	ldw	r2,32(r2)
  816f54:	1005003a 	cmpeq	r2,r2,zero
  816f58:	1000441e 	bne	r2,zero,81706c <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
  816f5c:	e0bffa17 	ldw	r2,-24(fp)
  816f60:	10800817 	ldw	r2,32(r2)
  816f64:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
  816f68:	e0bffb17 	ldw	r2,-20(fp)
  816f6c:	10800017 	ldw	r2,0(r2)
  816f70:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
  816f74:	00003a06 	br	817060 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  816f78:	e13ff903 	ldbu	r4,-28(fp)
  816f7c:	e0fff903 	ldbu	r3,-28(fp)
  816f80:	e0bffc17 	ldw	r2,-16(fp)
  816f84:	1885883a 	add	r2,r3,r2
  816f88:	10800204 	addi	r2,r2,8
  816f8c:	108000c3 	ldbu	r2,3(r2)
  816f90:	1007883a 	mov	r3,r2
  816f94:	e0bff803 	ldbu	r2,-32(fp)
  816f98:	0084303a 	nor	r2,zero,r2
  816f9c:	1884703a 	and	r2,r3,r2
  816fa0:	1007883a 	mov	r3,r2
  816fa4:	e0bffc17 	ldw	r2,-16(fp)
  816fa8:	2085883a 	add	r2,r4,r2
  816fac:	10800204 	addi	r2,r2,8
  816fb0:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  816fb4:	e0fff903 	ldbu	r3,-28(fp)
  816fb8:	e0bffc17 	ldw	r2,-16(fp)
  816fbc:	1885883a 	add	r2,r3,r2
  816fc0:	10800204 	addi	r2,r2,8
  816fc4:	108000c3 	ldbu	r2,3(r2)
  816fc8:	10803fcc 	andi	r2,r2,255
  816fcc:	1004c03a 	cmpne	r2,r2,zero
  816fd0:	1000091e 	bne	r2,zero,816ff8 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
  816fd4:	e0bffc17 	ldw	r2,-16(fp)
  816fd8:	10800283 	ldbu	r2,10(r2)
  816fdc:	1007883a 	mov	r3,r2
  816fe0:	e0bff843 	ldbu	r2,-31(fp)
  816fe4:	0084303a 	nor	r2,zero,r2
  816fe8:	1884703a 	and	r2,r3,r2
  816fec:	1007883a 	mov	r3,r2
  816ff0:	e0bffc17 	ldw	r2,-16(fp)
  816ff4:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  816ff8:	e0bffc17 	ldw	r2,-16(fp)
  816ffc:	10c00283 	ldbu	r3,10(r2)
  817000:	e0bff8c3 	ldbu	r2,-29(fp)
  817004:	1884b03a 	or	r2,r3,r2
  817008:	1007883a 	mov	r3,r2
  81700c:	e0bffc17 	ldw	r2,-16(fp)
  817010:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  817014:	e13ff983 	ldbu	r4,-26(fp)
  817018:	e0fff983 	ldbu	r3,-26(fp)
  81701c:	e0bffc17 	ldw	r2,-16(fp)
  817020:	1885883a 	add	r2,r3,r2
  817024:	10800204 	addi	r2,r2,8
  817028:	10c000c3 	ldbu	r3,3(r2)
  81702c:	e0bff883 	ldbu	r2,-30(fp)
  817030:	1884b03a 	or	r2,r3,r2
  817034:	1007883a 	mov	r3,r2
  817038:	e0bffc17 	ldw	r2,-16(fp)
  81703c:	2085883a 	add	r2,r4,r2
  817040:	10800204 	addi	r2,r2,8
  817044:	10c000c5 	stb	r3,3(r2)
            pevents++;
  817048:	e0bffb17 	ldw	r2,-20(fp)
  81704c:	10800104 	addi	r2,r2,4
  817050:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
  817054:	e0bffb17 	ldw	r2,-20(fp)
  817058:	10800017 	ldw	r2,0(r2)
  81705c:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  817060:	e0bffc17 	ldw	r2,-16(fp)
  817064:	1004c03a 	cmpne	r2,r2,zero
  817068:	103fc31e 	bne	r2,zero,816f78 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  81706c:	e0fffa17 	ldw	r3,-24(fp)
  817070:	e0bffe03 	ldbu	r2,-8(fp)
  817074:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
  817078:	e0fffa17 	ldw	r3,-24(fp)
  81707c:	e0bff983 	ldbu	r2,-26(fp)
  817080:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
  817084:	e0fffa17 	ldw	r3,-24(fp)
  817088:	e0bff943 	ldbu	r2,-27(fp)
  81708c:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
  817090:	e0fffa17 	ldw	r3,-24(fp)
  817094:	e0bff8c3 	ldbu	r2,-29(fp)
  817098:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
  81709c:	e0fffa17 	ldw	r3,-24(fp)
  8170a0:	e0bff883 	ldbu	r2,-30(fp)
  8170a4:	18800d45 	stb	r2,53(r3)
  8170a8:	e0bff717 	ldw	r2,-36(fp)
  8170ac:	e0bff215 	stw	r2,-56(fp)
  8170b0:	e0bff217 	ldw	r2,-56(fp)
  8170b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  8170b8:	008020b4 	movhi	r2,130
  8170bc:	10bdf444 	addi	r2,r2,-2095
  8170c0:	10800003 	ldbu	r2,0(r2)
  8170c4:	10803fcc 	andi	r2,r2,255
  8170c8:	10800058 	cmpnei	r2,r2,1
  8170cc:	1000011e 	bne	r2,zero,8170d4 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
  8170d0:	08122c40 	call	8122c4 <OS_Sched>
    }
    return (OS_ERR_NONE);
  8170d4:	e03fff15 	stw	zero,-4(fp)
  8170d8:	e0bfff17 	ldw	r2,-4(fp)
}
  8170dc:	e037883a 	mov	sp,fp
  8170e0:	dfc00117 	ldw	ra,4(sp)
  8170e4:	df000017 	ldw	fp,0(sp)
  8170e8:	dec00204 	addi	sp,sp,8
  8170ec:	f800283a 	ret

008170f0 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  8170f0:	deffed04 	addi	sp,sp,-76
  8170f4:	dfc01215 	stw	ra,72(sp)
  8170f8:	df001115 	stw	fp,68(sp)
  8170fc:	df001104 	addi	fp,sp,68
  817100:	e13ffb15 	stw	r4,-20(fp)
  817104:	e17ffc15 	stw	r5,-16(fp)
  817108:	e1bffd15 	stw	r6,-12(fp)
  81710c:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  817110:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  817114:	e0bffe03 	ldbu	r2,-8(fp)
  817118:	10800570 	cmpltui	r2,r2,21
  81711c:	1000031e 	bne	r2,zero,81712c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  817120:	00800a84 	movi	r2,42
  817124:	e0bfff15 	stw	r2,-4(fp)
  817128:	00006006 	br	8172ac <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81712c:	0005303a 	rdctl	r2,status
  817130:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817134:	e0fff717 	ldw	r3,-36(fp)
  817138:	00bfff84 	movi	r2,-2
  81713c:	1884703a 	and	r2,r3,r2
  817140:	1001703a 	wrctl	status,r2
  
  return context;
  817144:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  817148:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  81714c:	008020b4 	movhi	r2,130
  817150:	10be0204 	addi	r2,r2,-2040
  817154:	10800003 	ldbu	r2,0(r2)
  817158:	10803fcc 	andi	r2,r2,255
  81715c:	1005003a 	cmpeq	r2,r2,zero
  817160:	1000071e 	bne	r2,zero,817180 <OSTaskCreate+0x90>
  817164:	e0bff817 	ldw	r2,-32(fp)
  817168:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81716c:	e0bff617 	ldw	r2,-40(fp)
  817170:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  817174:	00800f04 	movi	r2,60
  817178:	e0bfff15 	stw	r2,-4(fp)
  81717c:	00004b06 	br	8172ac <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  817180:	e0bffe03 	ldbu	r2,-8(fp)
  817184:	00c020b4 	movhi	r3,130
  817188:	18da8904 	addi	r3,r3,27172
  81718c:	1085883a 	add	r2,r2,r2
  817190:	1085883a 	add	r2,r2,r2
  817194:	10c5883a 	add	r2,r2,r3
  817198:	10800017 	ldw	r2,0(r2)
  81719c:	1004c03a 	cmpne	r2,r2,zero
  8171a0:	10003c1e 	bne	r2,zero,817294 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  8171a4:	e0bffe03 	ldbu	r2,-8(fp)
  8171a8:	00c020b4 	movhi	r3,130
  8171ac:	18da8904 	addi	r3,r3,27172
  8171b0:	1085883a 	add	r2,r2,r2
  8171b4:	1085883a 	add	r2,r2,r2
  8171b8:	10c7883a 	add	r3,r2,r3
  8171bc:	00800044 	movi	r2,1
  8171c0:	18800015 	stw	r2,0(r3)
  8171c4:	e0bff817 	ldw	r2,-32(fp)
  8171c8:	e0bff515 	stw	r2,-44(fp)
  8171cc:	e0bff517 	ldw	r2,-44(fp)
  8171d0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  8171d4:	e13ffb17 	ldw	r4,-20(fp)
  8171d8:	e17ffc17 	ldw	r5,-16(fp)
  8171dc:	e1bffd17 	ldw	r6,-12(fp)
  8171e0:	000f883a 	mov	r7,zero
  8171e4:	081aee40 	call	81aee4 <OSTaskStkInit>
  8171e8:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  8171ec:	e13ffe03 	ldbu	r4,-8(fp)
  8171f0:	d8000015 	stw	zero,0(sp)
  8171f4:	d8000115 	stw	zero,4(sp)
  8171f8:	d8000215 	stw	zero,8(sp)
  8171fc:	e17ffa17 	ldw	r5,-24(fp)
  817200:	000d883a 	mov	r6,zero
  817204:	000f883a 	mov	r7,zero
  817208:	08126cc0 	call	8126cc <OS_TCBInit>
  81720c:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
  817210:	e0bff903 	ldbu	r2,-28(fp)
  817214:	1004c03a 	cmpne	r2,r2,zero
  817218:	1000081e 	bne	r2,zero,81723c <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  81721c:	008020b4 	movhi	r2,130
  817220:	10bdf444 	addi	r2,r2,-2095
  817224:	10800003 	ldbu	r2,0(r2)
  817228:	10803fcc 	andi	r2,r2,255
  81722c:	10800058 	cmpnei	r2,r2,1
  817230:	1000151e 	bne	r2,zero,817288 <OSTaskCreate+0x198>
                OS_Sched();
  817234:	08122c40 	call	8122c4 <OS_Sched>
  817238:	00001306 	br	817288 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81723c:	0005303a 	rdctl	r2,status
  817240:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817244:	e0fff417 	ldw	r3,-48(fp)
  817248:	00bfff84 	movi	r2,-2
  81724c:	1884703a 	and	r2,r3,r2
  817250:	1001703a 	wrctl	status,r2
  
  return context;
  817254:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  817258:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  81725c:	e0bffe03 	ldbu	r2,-8(fp)
  817260:	00c020b4 	movhi	r3,130
  817264:	18da8904 	addi	r3,r3,27172
  817268:	1085883a 	add	r2,r2,r2
  81726c:	1085883a 	add	r2,r2,r2
  817270:	10c5883a 	add	r2,r2,r3
  817274:	10000015 	stw	zero,0(r2)
  817278:	e0bff817 	ldw	r2,-32(fp)
  81727c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817280:	e0bff317 	ldw	r2,-52(fp)
  817284:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  817288:	e0bff903 	ldbu	r2,-28(fp)
  81728c:	e0bfff15 	stw	r2,-4(fp)
  817290:	00000606 	br	8172ac <OSTaskCreate+0x1bc>
  817294:	e0bff817 	ldw	r2,-32(fp)
  817298:	e0bff215 	stw	r2,-56(fp)
  81729c:	e0bff217 	ldw	r2,-56(fp)
  8172a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  8172a4:	00800a04 	movi	r2,40
  8172a8:	e0bfff15 	stw	r2,-4(fp)
  8172ac:	e0bfff17 	ldw	r2,-4(fp)
}
  8172b0:	e037883a 	mov	sp,fp
  8172b4:	dfc00117 	ldw	ra,4(sp)
  8172b8:	df000017 	ldw	fp,0(sp)
  8172bc:	dec00204 	addi	sp,sp,8
  8172c0:	f800283a 	ret

008172c4 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  8172c4:	deffeb04 	addi	sp,sp,-84
  8172c8:	dfc01415 	stw	ra,80(sp)
  8172cc:	df001315 	stw	fp,76(sp)
  8172d0:	df001304 	addi	fp,sp,76
  8172d4:	e13ff915 	stw	r4,-28(fp)
  8172d8:	e17ffa15 	stw	r5,-24(fp)
  8172dc:	e1bffb15 	stw	r6,-20(fp)
  8172e0:	e0800217 	ldw	r2,8(fp)
  8172e4:	e0c00617 	ldw	r3,24(fp)
  8172e8:	e1fffc05 	stb	r7,-16(fp)
  8172ec:	e0bffd0d 	sth	r2,-12(fp)
  8172f0:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  8172f4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  8172f8:	e0bffc03 	ldbu	r2,-16(fp)
  8172fc:	10800570 	cmpltui	r2,r2,21
  817300:	1000031e 	bne	r2,zero,817310 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  817304:	00800a84 	movi	r2,42
  817308:	e0bfff15 	stw	r2,-4(fp)
  81730c:	00006706 	br	8174ac <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817310:	0005303a 	rdctl	r2,status
  817314:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817318:	e0fff517 	ldw	r3,-44(fp)
  81731c:	00bfff84 	movi	r2,-2
  817320:	1884703a 	and	r2,r3,r2
  817324:	1001703a 	wrctl	status,r2
  
  return context;
  817328:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81732c:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  817330:	008020b4 	movhi	r2,130
  817334:	10be0204 	addi	r2,r2,-2040
  817338:	10800003 	ldbu	r2,0(r2)
  81733c:	10803fcc 	andi	r2,r2,255
  817340:	1005003a 	cmpeq	r2,r2,zero
  817344:	1000071e 	bne	r2,zero,817364 <OSTaskCreateExt+0xa0>
  817348:	e0bff617 	ldw	r2,-40(fp)
  81734c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817350:	e0bff417 	ldw	r2,-48(fp)
  817354:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  817358:	00800f04 	movi	r2,60
  81735c:	e0bfff15 	stw	r2,-4(fp)
  817360:	00005206 	br	8174ac <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  817364:	e0bffc03 	ldbu	r2,-16(fp)
  817368:	00c020b4 	movhi	r3,130
  81736c:	18da8904 	addi	r3,r3,27172
  817370:	1085883a 	add	r2,r2,r2
  817374:	1085883a 	add	r2,r2,r2
  817378:	10c5883a 	add	r2,r2,r3
  81737c:	10800017 	ldw	r2,0(r2)
  817380:	1004c03a 	cmpne	r2,r2,zero
  817384:	1000431e 	bne	r2,zero,817494 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  817388:	e0bffc03 	ldbu	r2,-16(fp)
  81738c:	00c020b4 	movhi	r3,130
  817390:	18da8904 	addi	r3,r3,27172
  817394:	1085883a 	add	r2,r2,r2
  817398:	1085883a 	add	r2,r2,r2
  81739c:	10c7883a 	add	r3,r2,r3
  8173a0:	00800044 	movi	r2,1
  8173a4:	18800015 	stw	r2,0(r3)
  8173a8:	e0bff617 	ldw	r2,-40(fp)
  8173ac:	e0bff315 	stw	r2,-52(fp)
  8173b0:	e0bff317 	ldw	r2,-52(fp)
  8173b4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  8173b8:	e1bffe0b 	ldhu	r6,-8(fp)
  8173bc:	e1000317 	ldw	r4,12(fp)
  8173c0:	e1400417 	ldw	r5,16(fp)
  8173c4:	08185400 	call	818540 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  8173c8:	e1fffe0b 	ldhu	r7,-8(fp)
  8173cc:	e13ff917 	ldw	r4,-28(fp)
  8173d0:	e17ffa17 	ldw	r5,-24(fp)
  8173d4:	e1bffb17 	ldw	r6,-20(fp)
  8173d8:	081aee40 	call	81aee4 <OSTaskStkInit>
  8173dc:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  8173e0:	e13ffc03 	ldbu	r4,-16(fp)
  8173e4:	e1fffd0b 	ldhu	r7,-12(fp)
  8173e8:	e0fffe0b 	ldhu	r3,-8(fp)
  8173ec:	e0800417 	ldw	r2,16(fp)
  8173f0:	d8800015 	stw	r2,0(sp)
  8173f4:	e0800517 	ldw	r2,20(fp)
  8173f8:	d8800115 	stw	r2,4(sp)
  8173fc:	d8c00215 	stw	r3,8(sp)
  817400:	e17ff817 	ldw	r5,-32(fp)
  817404:	e1800317 	ldw	r6,12(fp)
  817408:	08126cc0 	call	8126cc <OS_TCBInit>
  81740c:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
  817410:	e0bff703 	ldbu	r2,-36(fp)
  817414:	1004c03a 	cmpne	r2,r2,zero
  817418:	1000081e 	bne	r2,zero,81743c <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  81741c:	008020b4 	movhi	r2,130
  817420:	10bdf444 	addi	r2,r2,-2095
  817424:	10800003 	ldbu	r2,0(r2)
  817428:	10803fcc 	andi	r2,r2,255
  81742c:	10800058 	cmpnei	r2,r2,1
  817430:	1000151e 	bne	r2,zero,817488 <OSTaskCreateExt+0x1c4>
                OS_Sched();
  817434:	08122c40 	call	8122c4 <OS_Sched>
  817438:	00001306 	br	817488 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81743c:	0005303a 	rdctl	r2,status
  817440:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817444:	e0fff217 	ldw	r3,-56(fp)
  817448:	00bfff84 	movi	r2,-2
  81744c:	1884703a 	and	r2,r3,r2
  817450:	1001703a 	wrctl	status,r2
  
  return context;
  817454:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  817458:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  81745c:	e0bffc03 	ldbu	r2,-16(fp)
  817460:	00c020b4 	movhi	r3,130
  817464:	18da8904 	addi	r3,r3,27172
  817468:	1085883a 	add	r2,r2,r2
  81746c:	1085883a 	add	r2,r2,r2
  817470:	10c5883a 	add	r2,r2,r3
  817474:	10000015 	stw	zero,0(r2)
  817478:	e0bff617 	ldw	r2,-40(fp)
  81747c:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817480:	e0bff117 	ldw	r2,-60(fp)
  817484:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  817488:	e0bff703 	ldbu	r2,-36(fp)
  81748c:	e0bfff15 	stw	r2,-4(fp)
  817490:	00000606 	br	8174ac <OSTaskCreateExt+0x1e8>
  817494:	e0bff617 	ldw	r2,-40(fp)
  817498:	e0bff015 	stw	r2,-64(fp)
  81749c:	e0bff017 	ldw	r2,-64(fp)
  8174a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  8174a4:	00800a04 	movi	r2,40
  8174a8:	e0bfff15 	stw	r2,-4(fp)
  8174ac:	e0bfff17 	ldw	r2,-4(fp)
}
  8174b0:	e037883a 	mov	sp,fp
  8174b4:	dfc00117 	ldw	ra,4(sp)
  8174b8:	df000017 	ldw	fp,0(sp)
  8174bc:	dec00204 	addi	sp,sp,8
  8174c0:	f800283a 	ret

008174c4 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  8174c4:	defff304 	addi	sp,sp,-52
  8174c8:	dfc00c15 	stw	ra,48(sp)
  8174cc:	df000b15 	stw	fp,44(sp)
  8174d0:	df000b04 	addi	fp,sp,44
  8174d4:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  8174d8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  8174dc:	008020b4 	movhi	r2,130
  8174e0:	10be0204 	addi	r2,r2,-2040
  8174e4:	10800003 	ldbu	r2,0(r2)
  8174e8:	10803fcc 	andi	r2,r2,255
  8174ec:	1005003a 	cmpeq	r2,r2,zero
  8174f0:	1000031e 	bne	r2,zero,817500 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
  8174f4:	00801004 	movi	r2,64
  8174f8:	e0bfff15 	stw	r2,-4(fp)
  8174fc:	0000ee06 	br	8178b8 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  817500:	e0bffe03 	ldbu	r2,-8(fp)
  817504:	10800518 	cmpnei	r2,r2,20
  817508:	1000031e 	bne	r2,zero,817518 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
  81750c:	00800f84 	movi	r2,62
  817510:	e0bfff15 	stw	r2,-4(fp)
  817514:	0000e806 	br	8178b8 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  817518:	e0bffe03 	ldbu	r2,-8(fp)
  81751c:	10800530 	cmpltui	r2,r2,20
  817520:	1000061e 	bne	r2,zero,81753c <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
  817524:	e0bffe03 	ldbu	r2,-8(fp)
  817528:	10803fe0 	cmpeqi	r2,r2,255
  81752c:	1000031e 	bne	r2,zero,81753c <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
  817530:	00800a84 	movi	r2,42
  817534:	e0bfff15 	stw	r2,-4(fp)
  817538:	0000df06 	br	8178b8 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81753c:	0005303a 	rdctl	r2,status
  817540:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817544:	e0fffa17 	ldw	r3,-24(fp)
  817548:	00bfff84 	movi	r2,-2
  81754c:	1884703a 	and	r2,r3,r2
  817550:	1001703a 	wrctl	status,r2
  
  return context;
  817554:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  817558:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  81755c:	e0bffe03 	ldbu	r2,-8(fp)
  817560:	10803fd8 	cmpnei	r2,r2,255
  817564:	1000051e 	bne	r2,zero,81757c <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  817568:	008020b4 	movhi	r2,130
  81756c:	10be0304 	addi	r2,r2,-2036
  817570:	10800017 	ldw	r2,0(r2)
  817574:	10800c83 	ldbu	r2,50(r2)
  817578:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81757c:	e0bffe03 	ldbu	r2,-8(fp)
  817580:	00c020b4 	movhi	r3,130
  817584:	18da8904 	addi	r3,r3,27172
  817588:	1085883a 	add	r2,r2,r2
  81758c:	1085883a 	add	r2,r2,r2
  817590:	10c5883a 	add	r2,r2,r3
  817594:	10800017 	ldw	r2,0(r2)
  817598:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  81759c:	e0bffc17 	ldw	r2,-16(fp)
  8175a0:	1004c03a 	cmpne	r2,r2,zero
  8175a4:	1000071e 	bne	r2,zero,8175c4 <OSTaskDel+0x100>
  8175a8:	e0bffb17 	ldw	r2,-20(fp)
  8175ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8175b0:	e0bff917 	ldw	r2,-28(fp)
  8175b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8175b8:	008010c4 	movi	r2,67
  8175bc:	e0bfff15 	stw	r2,-4(fp)
  8175c0:	0000bd06 	br	8178b8 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  8175c4:	e0bffc17 	ldw	r2,-16(fp)
  8175c8:	10800058 	cmpnei	r2,r2,1
  8175cc:	1000071e 	bne	r2,zero,8175ec <OSTaskDel+0x128>
  8175d0:	e0bffb17 	ldw	r2,-20(fp)
  8175d4:	e0bff815 	stw	r2,-32(fp)
  8175d8:	e0bff817 	ldw	r2,-32(fp)
  8175dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  8175e0:	00800f44 	movi	r2,61
  8175e4:	e0bfff15 	stw	r2,-4(fp)
  8175e8:	0000b306 	br	8178b8 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  8175ec:	e0bffc17 	ldw	r2,-16(fp)
  8175f0:	10800d03 	ldbu	r2,52(r2)
  8175f4:	11003fcc 	andi	r4,r2,255
  8175f8:	e0bffc17 	ldw	r2,-16(fp)
  8175fc:	10800d03 	ldbu	r2,52(r2)
  817600:	10c03fcc 	andi	r3,r2,255
  817604:	008020b4 	movhi	r2,130
  817608:	10be0044 	addi	r2,r2,-2047
  81760c:	10c5883a 	add	r2,r2,r3
  817610:	10800003 	ldbu	r2,0(r2)
  817614:	1007883a 	mov	r3,r2
  817618:	e0bffc17 	ldw	r2,-16(fp)
  81761c:	10800d43 	ldbu	r2,53(r2)
  817620:	0084303a 	nor	r2,zero,r2
  817624:	1884703a 	and	r2,r3,r2
  817628:	1007883a 	mov	r3,r2
  81762c:	008020b4 	movhi	r2,130
  817630:	10be0044 	addi	r2,r2,-2047
  817634:	1105883a 	add	r2,r2,r4
  817638:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  81763c:	e0bffc17 	ldw	r2,-16(fp)
  817640:	10800d03 	ldbu	r2,52(r2)
  817644:	10c03fcc 	andi	r3,r2,255
  817648:	008020b4 	movhi	r2,130
  81764c:	10be0044 	addi	r2,r2,-2047
  817650:	10c5883a 	add	r2,r2,r3
  817654:	10800003 	ldbu	r2,0(r2)
  817658:	10803fcc 	andi	r2,r2,255
  81765c:	1004c03a 	cmpne	r2,r2,zero
  817660:	10000c1e 	bne	r2,zero,817694 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  817664:	e0bffc17 	ldw	r2,-16(fp)
  817668:	10800d83 	ldbu	r2,54(r2)
  81766c:	0084303a 	nor	r2,zero,r2
  817670:	1007883a 	mov	r3,r2
  817674:	008020b4 	movhi	r2,130
  817678:	10be0004 	addi	r2,r2,-2048
  81767c:	10800003 	ldbu	r2,0(r2)
  817680:	1884703a 	and	r2,r3,r2
  817684:	1007883a 	mov	r3,r2
  817688:	008020b4 	movhi	r2,130
  81768c:	10be0004 	addi	r2,r2,-2048
  817690:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  817694:	e0bffc17 	ldw	r2,-16(fp)
  817698:	10800717 	ldw	r2,28(r2)
  81769c:	1005003a 	cmpeq	r2,r2,zero
  8176a0:	1000041e 	bne	r2,zero,8176b4 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  8176a4:	e0bffc17 	ldw	r2,-16(fp)
  8176a8:	11400717 	ldw	r5,28(r2)
  8176ac:	e13ffc17 	ldw	r4,-16(fp)
  8176b0:	0811c7c0 	call	811c7c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  8176b4:	e0bffc17 	ldw	r2,-16(fp)
  8176b8:	10800817 	ldw	r2,32(r2)
  8176bc:	1005003a 	cmpeq	r2,r2,zero
  8176c0:	1000041e 	bne	r2,zero,8176d4 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  8176c4:	e0bffc17 	ldw	r2,-16(fp)
  8176c8:	11400817 	ldw	r5,32(r2)
  8176cc:	e13ffc17 	ldw	r4,-16(fp)
  8176d0:	0811d340 	call	811d34 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  8176d4:	e0bffc17 	ldw	r2,-16(fp)
  8176d8:	10800a17 	ldw	r2,40(r2)
  8176dc:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  8176e0:	e0bffd17 	ldw	r2,-12(fp)
  8176e4:	1005003a 	cmpeq	r2,r2,zero
  8176e8:	1000021e 	bne	r2,zero,8176f4 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  8176ec:	e13ffd17 	ldw	r4,-12(fp)
  8176f0:	08143c80 	call	8143c8 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  8176f4:	e0bffc17 	ldw	r2,-16(fp)
  8176f8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  8176fc:	e0bffc17 	ldw	r2,-16(fp)
  817700:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  817704:	e0bffc17 	ldw	r2,-16(fp)
  817708:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  81770c:	008020b4 	movhi	r2,130
  817710:	10bdf404 	addi	r2,r2,-2096
  817714:	10800003 	ldbu	r2,0(r2)
  817718:	10803fcc 	andi	r2,r2,255
  81771c:	10803fe0 	cmpeqi	r2,r2,255
  817720:	1000081e 	bne	r2,zero,817744 <OSTaskDel+0x280>
        OSLockNesting++;
  817724:	008020b4 	movhi	r2,130
  817728:	10bdf404 	addi	r2,r2,-2096
  81772c:	10800003 	ldbu	r2,0(r2)
  817730:	10800044 	addi	r2,r2,1
  817734:	1007883a 	mov	r3,r2
  817738:	008020b4 	movhi	r2,130
  81773c:	10bdf404 	addi	r2,r2,-2096
  817740:	10c00005 	stb	r3,0(r2)
  817744:	e0bffb17 	ldw	r2,-20(fp)
  817748:	e0bff715 	stw	r2,-36(fp)
  81774c:	e0bff717 	ldw	r2,-36(fp)
  817750:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  817754:	08118680 	call	811868 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817758:	0005303a 	rdctl	r2,status
  81775c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817760:	e0fff617 	ldw	r3,-40(fp)
  817764:	00bfff84 	movi	r2,-2
  817768:	1884703a 	and	r2,r3,r2
  81776c:	1001703a 	wrctl	status,r2
  
  return context;
  817770:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  817774:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  817778:	008020b4 	movhi	r2,130
  81777c:	10bdf404 	addi	r2,r2,-2096
  817780:	10800003 	ldbu	r2,0(r2)
  817784:	10803fcc 	andi	r2,r2,255
  817788:	1005003a 	cmpeq	r2,r2,zero
  81778c:	1000081e 	bne	r2,zero,8177b0 <OSTaskDel+0x2ec>
        OSLockNesting--;
  817790:	008020b4 	movhi	r2,130
  817794:	10bdf404 	addi	r2,r2,-2096
  817798:	10800003 	ldbu	r2,0(r2)
  81779c:	10bfffc4 	addi	r2,r2,-1
  8177a0:	1007883a 	mov	r3,r2
  8177a4:	008020b4 	movhi	r2,130
  8177a8:	10bdf404 	addi	r2,r2,-2096
  8177ac:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  8177b0:	e13ffc17 	ldw	r4,-16(fp)
  8177b4:	081b2140 	call	81b214 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  8177b8:	008020b4 	movhi	r2,130
  8177bc:	10bdfc44 	addi	r2,r2,-2063
  8177c0:	10800003 	ldbu	r2,0(r2)
  8177c4:	10bfffc4 	addi	r2,r2,-1
  8177c8:	1007883a 	mov	r3,r2
  8177cc:	008020b4 	movhi	r2,130
  8177d0:	10bdfc44 	addi	r2,r2,-2063
  8177d4:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  8177d8:	e0bffe03 	ldbu	r2,-8(fp)
  8177dc:	00c020b4 	movhi	r3,130
  8177e0:	18da8904 	addi	r3,r3,27172
  8177e4:	1085883a 	add	r2,r2,r2
  8177e8:	1085883a 	add	r2,r2,r2
  8177ec:	10c5883a 	add	r2,r2,r3
  8177f0:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  8177f4:	e0bffc17 	ldw	r2,-16(fp)
  8177f8:	10800617 	ldw	r2,24(r2)
  8177fc:	1004c03a 	cmpne	r2,r2,zero
  817800:	1000091e 	bne	r2,zero,817828 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  817804:	e0bffc17 	ldw	r2,-16(fp)
  817808:	10800517 	ldw	r2,20(r2)
  81780c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  817810:	e0bffc17 	ldw	r2,-16(fp)
  817814:	10c00517 	ldw	r3,20(r2)
  817818:	008020b4 	movhi	r2,130
  81781c:	10bdf704 	addi	r2,r2,-2084
  817820:	10c00015 	stw	r3,0(r2)
  817824:	00000a06 	br	817850 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  817828:	e0bffc17 	ldw	r2,-16(fp)
  81782c:	10c00617 	ldw	r3,24(r2)
  817830:	e0bffc17 	ldw	r2,-16(fp)
  817834:	10800517 	ldw	r2,20(r2)
  817838:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  81783c:	e0bffc17 	ldw	r2,-16(fp)
  817840:	10c00517 	ldw	r3,20(r2)
  817844:	e0bffc17 	ldw	r2,-16(fp)
  817848:	10800617 	ldw	r2,24(r2)
  81784c:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  817850:	008020b4 	movhi	r2,130
  817854:	10bdfb04 	addi	r2,r2,-2068
  817858:	10c00017 	ldw	r3,0(r2)
  81785c:	e0bffc17 	ldw	r2,-16(fp)
  817860:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  817864:	00c020b4 	movhi	r3,130
  817868:	18fdfb04 	addi	r3,r3,-2068
  81786c:	e0bffc17 	ldw	r2,-16(fp)
  817870:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  817874:	e0fffc17 	ldw	r3,-16(fp)
  817878:	00800fc4 	movi	r2,63
  81787c:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  817880:	e0bffc17 	ldw	r2,-16(fp)
  817884:	10001345 	stb	zero,77(r2)
  817888:	e0bffb17 	ldw	r2,-20(fp)
  81788c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817890:	e0bff517 	ldw	r2,-44(fp)
  817894:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  817898:	008020b4 	movhi	r2,130
  81789c:	10bdf444 	addi	r2,r2,-2095
  8178a0:	10800003 	ldbu	r2,0(r2)
  8178a4:	10803fcc 	andi	r2,r2,255
  8178a8:	10800058 	cmpnei	r2,r2,1
  8178ac:	1000011e 	bne	r2,zero,8178b4 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
  8178b0:	08122c40 	call	8122c4 <OS_Sched>
    }
    return (OS_ERR_NONE);
  8178b4:	e03fff15 	stw	zero,-4(fp)
  8178b8:	e0bfff17 	ldw	r2,-4(fp)
}
  8178bc:	e037883a 	mov	sp,fp
  8178c0:	dfc00117 	ldw	ra,4(sp)
  8178c4:	df000017 	ldw	fp,0(sp)
  8178c8:	dec00204 	addi	sp,sp,8
  8178cc:	f800283a 	ret

008178d0 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  8178d0:	defff404 	addi	sp,sp,-48
  8178d4:	df000b15 	stw	fp,44(sp)
  8178d8:	df000b04 	addi	fp,sp,44
  8178dc:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8178e0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  8178e4:	e0bffe03 	ldbu	r2,-8(fp)
  8178e8:	10800518 	cmpnei	r2,r2,20
  8178ec:	1000031e 	bne	r2,zero,8178fc <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  8178f0:	00800f84 	movi	r2,62
  8178f4:	e0bfff15 	stw	r2,-4(fp)
  8178f8:	00004c06 	br	817a2c <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  8178fc:	e0bffe03 	ldbu	r2,-8(fp)
  817900:	10800530 	cmpltui	r2,r2,20
  817904:	1000061e 	bne	r2,zero,817920 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
  817908:	e0bffe03 	ldbu	r2,-8(fp)
  81790c:	10803fe0 	cmpeqi	r2,r2,255
  817910:	1000031e 	bne	r2,zero,817920 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
  817914:	00800a84 	movi	r2,42
  817918:	e0bfff15 	stw	r2,-4(fp)
  81791c:	00004306 	br	817a2c <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  817920:	e0bffe03 	ldbu	r2,-8(fp)
  817924:	10803fd8 	cmpnei	r2,r2,255
  817928:	1000141e 	bne	r2,zero,81797c <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81792c:	0005303a 	rdctl	r2,status
  817930:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817934:	e0fffa17 	ldw	r3,-24(fp)
  817938:	00bfff84 	movi	r2,-2
  81793c:	1884703a 	and	r2,r3,r2
  817940:	1001703a 	wrctl	status,r2
  
  return context;
  817944:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  817948:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  81794c:	008020b4 	movhi	r2,130
  817950:	10be0304 	addi	r2,r2,-2036
  817954:	10800017 	ldw	r2,0(r2)
  817958:	10800dc3 	ldbu	r2,55(r2)
  81795c:	e0bffd05 	stb	r2,-12(fp)
  817960:	e0bffb17 	ldw	r2,-20(fp)
  817964:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817968:	e0bff917 	ldw	r2,-28(fp)
  81796c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  817970:	e0bffd03 	ldbu	r2,-12(fp)
  817974:	e0bfff15 	stw	r2,-4(fp)
  817978:	00002c06 	br	817a2c <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81797c:	0005303a 	rdctl	r2,status
  817980:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817984:	e0fff817 	ldw	r3,-32(fp)
  817988:	00bfff84 	movi	r2,-2
  81798c:	1884703a 	and	r2,r3,r2
  817990:	1001703a 	wrctl	status,r2
  
  return context;
  817994:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  817998:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
  81799c:	e0bffe03 	ldbu	r2,-8(fp)
  8179a0:	00c020b4 	movhi	r3,130
  8179a4:	18da8904 	addi	r3,r3,27172
  8179a8:	1085883a 	add	r2,r2,r2
  8179ac:	1085883a 	add	r2,r2,r2
  8179b0:	10c5883a 	add	r2,r2,r3
  8179b4:	10800017 	ldw	r2,0(r2)
  8179b8:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  8179bc:	e0bffc17 	ldw	r2,-16(fp)
  8179c0:	1004c03a 	cmpne	r2,r2,zero
  8179c4:	1000071e 	bne	r2,zero,8179e4 <OSTaskDelReq+0x114>
  8179c8:	e0bffb17 	ldw	r2,-20(fp)
  8179cc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8179d0:	e0bff717 	ldw	r2,-36(fp)
  8179d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  8179d8:	008010c4 	movi	r2,67
  8179dc:	e0bfff15 	stw	r2,-4(fp)
  8179e0:	00001206 	br	817a2c <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  8179e4:	e0bffc17 	ldw	r2,-16(fp)
  8179e8:	10800058 	cmpnei	r2,r2,1
  8179ec:	1000071e 	bne	r2,zero,817a0c <OSTaskDelReq+0x13c>
  8179f0:	e0bffb17 	ldw	r2,-20(fp)
  8179f4:	e0bff615 	stw	r2,-40(fp)
  8179f8:	e0bff617 	ldw	r2,-40(fp)
  8179fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  817a00:	00800f44 	movi	r2,61
  817a04:	e0bfff15 	stw	r2,-4(fp)
  817a08:	00000806 	br	817a2c <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  817a0c:	e0fffc17 	ldw	r3,-16(fp)
  817a10:	00800fc4 	movi	r2,63
  817a14:	18800dc5 	stb	r2,55(r3)
  817a18:	e0bffb17 	ldw	r2,-20(fp)
  817a1c:	e0bff515 	stw	r2,-44(fp)
  817a20:	e0bff517 	ldw	r2,-44(fp)
  817a24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  817a28:	e03fff15 	stw	zero,-4(fp)
  817a2c:	e0bfff17 	ldw	r2,-4(fp)
}
  817a30:	e037883a 	mov	sp,fp
  817a34:	df000017 	ldw	fp,0(sp)
  817a38:	dec00104 	addi	sp,sp,4
  817a3c:	f800283a 	ret

00817a40 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  817a40:	defff304 	addi	sp,sp,-52
  817a44:	dfc00c15 	stw	ra,48(sp)
  817a48:	df000b15 	stw	fp,44(sp)
  817a4c:	df000b04 	addi	fp,sp,44
  817a50:	e17ffd15 	stw	r5,-12(fp)
  817a54:	e1bffe15 	stw	r6,-8(fp)
  817a58:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  817a5c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  817a60:	e0bffe17 	ldw	r2,-8(fp)
  817a64:	1004c03a 	cmpne	r2,r2,zero
  817a68:	1000021e 	bne	r2,zero,817a74 <OSTaskNameGet+0x34>
        return (0);
  817a6c:	e03fff15 	stw	zero,-4(fp)
  817a70:	00005b06 	br	817be0 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  817a74:	e0bffc03 	ldbu	r2,-16(fp)
  817a78:	10800570 	cmpltui	r2,r2,21
  817a7c:	1000081e 	bne	r2,zero,817aa0 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  817a80:	e0bffc03 	ldbu	r2,-16(fp)
  817a84:	10803fe0 	cmpeqi	r2,r2,255
  817a88:	1000051e 	bne	r2,zero,817aa0 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  817a8c:	e0fffe17 	ldw	r3,-8(fp)
  817a90:	00800a84 	movi	r2,42
  817a94:	18800005 	stb	r2,0(r3)
            return (0);
  817a98:	e03fff15 	stw	zero,-4(fp)
  817a9c:	00005006 	br	817be0 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  817aa0:	e0bffd17 	ldw	r2,-12(fp)
  817aa4:	1004c03a 	cmpne	r2,r2,zero
  817aa8:	1000051e 	bne	r2,zero,817ac0 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  817aac:	e0fffe17 	ldw	r3,-8(fp)
  817ab0:	00800304 	movi	r2,12
  817ab4:	18800005 	stb	r2,0(r3)
        return (0);
  817ab8:	e03fff15 	stw	zero,-4(fp)
  817abc:	00004806 	br	817be0 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  817ac0:	008020b4 	movhi	r2,130
  817ac4:	10be0204 	addi	r2,r2,-2040
  817ac8:	10800003 	ldbu	r2,0(r2)
  817acc:	10803fcc 	andi	r2,r2,255
  817ad0:	1005003a 	cmpeq	r2,r2,zero
  817ad4:	1000051e 	bne	r2,zero,817aec <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
  817ad8:	e0fffe17 	ldw	r3,-8(fp)
  817adc:	00800444 	movi	r2,17
  817ae0:	18800005 	stb	r2,0(r3)
        return (0);
  817ae4:	e03fff15 	stw	zero,-4(fp)
  817ae8:	00003d06 	br	817be0 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817aec:	0005303a 	rdctl	r2,status
  817af0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817af4:	e0fff817 	ldw	r3,-32(fp)
  817af8:	00bfff84 	movi	r2,-2
  817afc:	1884703a 	and	r2,r3,r2
  817b00:	1001703a 	wrctl	status,r2
  
  return context;
  817b04:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  817b08:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  817b0c:	e0bffc03 	ldbu	r2,-16(fp)
  817b10:	10803fd8 	cmpnei	r2,r2,255
  817b14:	1000051e 	bne	r2,zero,817b2c <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
  817b18:	008020b4 	movhi	r2,130
  817b1c:	10be0304 	addi	r2,r2,-2036
  817b20:	10800017 	ldw	r2,0(r2)
  817b24:	10800c83 	ldbu	r2,50(r2)
  817b28:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  817b2c:	e0bffc03 	ldbu	r2,-16(fp)
  817b30:	00c020b4 	movhi	r3,130
  817b34:	18da8904 	addi	r3,r3,27172
  817b38:	1085883a 	add	r2,r2,r2
  817b3c:	1085883a 	add	r2,r2,r2
  817b40:	10c5883a 	add	r2,r2,r3
  817b44:	10800017 	ldw	r2,0(r2)
  817b48:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  817b4c:	e0bffb17 	ldw	r2,-20(fp)
  817b50:	1004c03a 	cmpne	r2,r2,zero
  817b54:	1000091e 	bne	r2,zero,817b7c <OSTaskNameGet+0x13c>
  817b58:	e0bff917 	ldw	r2,-28(fp)
  817b5c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817b60:	e0bff717 	ldw	r2,-36(fp)
  817b64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  817b68:	e0fffe17 	ldw	r3,-8(fp)
  817b6c:	008010c4 	movi	r2,67
  817b70:	18800005 	stb	r2,0(r3)
        return (0);
  817b74:	e03fff15 	stw	zero,-4(fp)
  817b78:	00001906 	br	817be0 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  817b7c:	e0bffb17 	ldw	r2,-20(fp)
  817b80:	10800058 	cmpnei	r2,r2,1
  817b84:	1000091e 	bne	r2,zero,817bac <OSTaskNameGet+0x16c>
  817b88:	e0bff917 	ldw	r2,-28(fp)
  817b8c:	e0bff615 	stw	r2,-40(fp)
  817b90:	e0bff617 	ldw	r2,-40(fp)
  817b94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  817b98:	e0fffe17 	ldw	r3,-8(fp)
  817b9c:	008010c4 	movi	r2,67
  817ba0:	18800005 	stb	r2,0(r3)
        return (0);
  817ba4:	e03fff15 	stw	zero,-4(fp)
  817ba8:	00000d06 	br	817be0 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  817bac:	e0bffb17 	ldw	r2,-20(fp)
  817bb0:	11401304 	addi	r5,r2,76
  817bb4:	e13ffd17 	ldw	r4,-12(fp)
  817bb8:	08124080 	call	812408 <OS_StrCopy>
  817bbc:	e0bffa05 	stb	r2,-24(fp)
  817bc0:	e0bff917 	ldw	r2,-28(fp)
  817bc4:	e0bff515 	stw	r2,-44(fp)
  817bc8:	e0bff517 	ldw	r2,-44(fp)
  817bcc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  817bd0:	e0bffe17 	ldw	r2,-8(fp)
  817bd4:	10000005 	stb	zero,0(r2)
    return (len);
  817bd8:	e0bffa03 	ldbu	r2,-24(fp)
  817bdc:	e0bfff15 	stw	r2,-4(fp)
  817be0:	e0bfff17 	ldw	r2,-4(fp)
}
  817be4:	e037883a 	mov	sp,fp
  817be8:	dfc00117 	ldw	ra,4(sp)
  817bec:	df000017 	ldw	fp,0(sp)
  817bf0:	dec00204 	addi	sp,sp,8
  817bf4:	f800283a 	ret

00817bf8 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  817bf8:	defff304 	addi	sp,sp,-52
  817bfc:	dfc00c15 	stw	ra,48(sp)
  817c00:	df000b15 	stw	fp,44(sp)
  817c04:	df000b04 	addi	fp,sp,44
  817c08:	e17ffe15 	stw	r5,-8(fp)
  817c0c:	e1bfff15 	stw	r6,-4(fp)
  817c10:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  817c14:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  817c18:	e0bfff17 	ldw	r2,-4(fp)
  817c1c:	1005003a 	cmpeq	r2,r2,zero
  817c20:	1000611e 	bne	r2,zero,817da8 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  817c24:	e0bffd03 	ldbu	r2,-12(fp)
  817c28:	10800570 	cmpltui	r2,r2,21
  817c2c:	1000071e 	bne	r2,zero,817c4c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  817c30:	e0bffd03 	ldbu	r2,-12(fp)
  817c34:	10803fe0 	cmpeqi	r2,r2,255
  817c38:	1000041e 	bne	r2,zero,817c4c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  817c3c:	e0ffff17 	ldw	r3,-4(fp)
  817c40:	00800a84 	movi	r2,42
  817c44:	18800005 	stb	r2,0(r3)
            return;
  817c48:	00005706 	br	817da8 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  817c4c:	e0bffe17 	ldw	r2,-8(fp)
  817c50:	1004c03a 	cmpne	r2,r2,zero
  817c54:	1000041e 	bne	r2,zero,817c68 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  817c58:	e0ffff17 	ldw	r3,-4(fp)
  817c5c:	00800304 	movi	r2,12
  817c60:	18800005 	stb	r2,0(r3)
        return;
  817c64:	00005006 	br	817da8 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  817c68:	008020b4 	movhi	r2,130
  817c6c:	10be0204 	addi	r2,r2,-2040
  817c70:	10800003 	ldbu	r2,0(r2)
  817c74:	10803fcc 	andi	r2,r2,255
  817c78:	1005003a 	cmpeq	r2,r2,zero
  817c7c:	1000041e 	bne	r2,zero,817c90 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
  817c80:	e0ffff17 	ldw	r3,-4(fp)
  817c84:	00800484 	movi	r2,18
  817c88:	18800005 	stb	r2,0(r3)
        return;
  817c8c:	00004606 	br	817da8 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817c90:	0005303a 	rdctl	r2,status
  817c94:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817c98:	e0fff917 	ldw	r3,-28(fp)
  817c9c:	00bfff84 	movi	r2,-2
  817ca0:	1884703a 	and	r2,r3,r2
  817ca4:	1001703a 	wrctl	status,r2
  
  return context;
  817ca8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  817cac:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  817cb0:	e0bffd03 	ldbu	r2,-12(fp)
  817cb4:	10803fd8 	cmpnei	r2,r2,255
  817cb8:	1000051e 	bne	r2,zero,817cd0 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
  817cbc:	008020b4 	movhi	r2,130
  817cc0:	10be0304 	addi	r2,r2,-2036
  817cc4:	10800017 	ldw	r2,0(r2)
  817cc8:	10800c83 	ldbu	r2,50(r2)
  817ccc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  817cd0:	e0bffd03 	ldbu	r2,-12(fp)
  817cd4:	00c020b4 	movhi	r3,130
  817cd8:	18da8904 	addi	r3,r3,27172
  817cdc:	1085883a 	add	r2,r2,r2
  817ce0:	1085883a 	add	r2,r2,r2
  817ce4:	10c5883a 	add	r2,r2,r3
  817ce8:	10800017 	ldw	r2,0(r2)
  817cec:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  817cf0:	e0bffb17 	ldw	r2,-20(fp)
  817cf4:	1004c03a 	cmpne	r2,r2,zero
  817cf8:	1000081e 	bne	r2,zero,817d1c <OSTaskNameSet+0x124>
  817cfc:	e0bffa17 	ldw	r2,-24(fp)
  817d00:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817d04:	e0bff817 	ldw	r2,-32(fp)
  817d08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  817d0c:	e0ffff17 	ldw	r3,-4(fp)
  817d10:	008010c4 	movi	r2,67
  817d14:	18800005 	stb	r2,0(r3)
        return;
  817d18:	00002306 	br	817da8 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  817d1c:	e0bffb17 	ldw	r2,-20(fp)
  817d20:	10800058 	cmpnei	r2,r2,1
  817d24:	1000081e 	bne	r2,zero,817d48 <OSTaskNameSet+0x150>
  817d28:	e0bffa17 	ldw	r2,-24(fp)
  817d2c:	e0bff715 	stw	r2,-36(fp)
  817d30:	e0bff717 	ldw	r2,-36(fp)
  817d34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  817d38:	e0ffff17 	ldw	r3,-4(fp)
  817d3c:	008010c4 	movi	r2,67
  817d40:	18800005 	stb	r2,0(r3)
        return;
  817d44:	00001806 	br	817da8 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  817d48:	e13ffe17 	ldw	r4,-8(fp)
  817d4c:	08124880 	call	812488 <OS_StrLen>
  817d50:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  817d54:	e0bffc03 	ldbu	r2,-16(fp)
  817d58:	10800830 	cmpltui	r2,r2,32
  817d5c:	1000081e 	bne	r2,zero,817d80 <OSTaskNameSet+0x188>
  817d60:	e0bffa17 	ldw	r2,-24(fp)
  817d64:	e0bff615 	stw	r2,-40(fp)
  817d68:	e0bff617 	ldw	r2,-40(fp)
  817d6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  817d70:	e0ffff17 	ldw	r3,-4(fp)
  817d74:	00801044 	movi	r2,65
  817d78:	18800005 	stb	r2,0(r3)
        return;
  817d7c:	00000a06 	br	817da8 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  817d80:	e0bffb17 	ldw	r2,-20(fp)
  817d84:	11001304 	addi	r4,r2,76
  817d88:	e17ffe17 	ldw	r5,-8(fp)
  817d8c:	08124080 	call	812408 <OS_StrCopy>
  817d90:	e0bffa17 	ldw	r2,-24(fp)
  817d94:	e0bff515 	stw	r2,-44(fp)
  817d98:	e0bff517 	ldw	r2,-44(fp)
  817d9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  817da0:	e0bfff17 	ldw	r2,-4(fp)
  817da4:	10000005 	stb	zero,0(r2)
}
  817da8:	e037883a 	mov	sp,fp
  817dac:	dfc00117 	ldw	ra,4(sp)
  817db0:	df000017 	ldw	fp,0(sp)
  817db4:	dec00204 	addi	sp,sp,8
  817db8:	f800283a 	ret

00817dbc <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  817dbc:	defff304 	addi	sp,sp,-52
  817dc0:	dfc00c15 	stw	ra,48(sp)
  817dc4:	df000b15 	stw	fp,44(sp)
  817dc8:	df000b04 	addi	fp,sp,44
  817dcc:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  817dd0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  817dd4:	e0bffe03 	ldbu	r2,-8(fp)
  817dd8:	10800530 	cmpltui	r2,r2,20
  817ddc:	1000031e 	bne	r2,zero,817dec <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  817de0:	00800a84 	movi	r2,42
  817de4:	e0bfff15 	stw	r2,-4(fp)
  817de8:	00007406 	br	817fbc <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817dec:	0005303a 	rdctl	r2,status
  817df0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817df4:	e0fffb17 	ldw	r3,-20(fp)
  817df8:	00bfff84 	movi	r2,-2
  817dfc:	1884703a 	and	r2,r3,r2
  817e00:	1001703a 	wrctl	status,r2
  
  return context;
  817e04:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  817e08:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
  817e0c:	e0bffe03 	ldbu	r2,-8(fp)
  817e10:	00c020b4 	movhi	r3,130
  817e14:	18da8904 	addi	r3,r3,27172
  817e18:	1085883a 	add	r2,r2,r2
  817e1c:	1085883a 	add	r2,r2,r2
  817e20:	10c5883a 	add	r2,r2,r3
  817e24:	10800017 	ldw	r2,0(r2)
  817e28:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  817e2c:	e0bffd17 	ldw	r2,-12(fp)
  817e30:	1004c03a 	cmpne	r2,r2,zero
  817e34:	1000071e 	bne	r2,zero,817e54 <OSTaskResume+0x98>
  817e38:	e0bffc17 	ldw	r2,-16(fp)
  817e3c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817e40:	e0bffa17 	ldw	r2,-24(fp)
  817e44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  817e48:	00801184 	movi	r2,70
  817e4c:	e0bfff15 	stw	r2,-4(fp)
  817e50:	00005a06 	br	817fbc <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  817e54:	e0bffd17 	ldw	r2,-12(fp)
  817e58:	10800058 	cmpnei	r2,r2,1
  817e5c:	1000071e 	bne	r2,zero,817e7c <OSTaskResume+0xc0>
  817e60:	e0bffc17 	ldw	r2,-16(fp)
  817e64:	e0bff915 	stw	r2,-28(fp)
  817e68:	e0bff917 	ldw	r2,-28(fp)
  817e6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  817e70:	008010c4 	movi	r2,67
  817e74:	e0bfff15 	stw	r2,-4(fp)
  817e78:	00005006 	br	817fbc <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  817e7c:	e0bffd17 	ldw	r2,-12(fp)
  817e80:	10800c03 	ldbu	r2,48(r2)
  817e84:	10803fcc 	andi	r2,r2,255
  817e88:	1080020c 	andi	r2,r2,8
  817e8c:	1005003a 	cmpeq	r2,r2,zero
  817e90:	1000441e 	bne	r2,zero,817fa4 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  817e94:	e0bffd17 	ldw	r2,-12(fp)
  817e98:	10c00c03 	ldbu	r3,48(r2)
  817e9c:	00bffdc4 	movi	r2,-9
  817ea0:	1884703a 	and	r2,r3,r2
  817ea4:	1007883a 	mov	r3,r2
  817ea8:	e0bffd17 	ldw	r2,-12(fp)
  817eac:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  817eb0:	e0bffd17 	ldw	r2,-12(fp)
  817eb4:	10800c03 	ldbu	r2,48(r2)
  817eb8:	10803fcc 	andi	r2,r2,255
  817ebc:	1004c03a 	cmpne	r2,r2,zero
  817ec0:	1000321e 	bne	r2,zero,817f8c <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
  817ec4:	e0bffd17 	ldw	r2,-12(fp)
  817ec8:	10800b8b 	ldhu	r2,46(r2)
  817ecc:	10bfffcc 	andi	r2,r2,65535
  817ed0:	1004c03a 	cmpne	r2,r2,zero
  817ed4:	1000281e 	bne	r2,zero,817f78 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  817ed8:	e0bffd17 	ldw	r2,-12(fp)
  817edc:	10c00d83 	ldbu	r3,54(r2)
  817ee0:	008020b4 	movhi	r2,130
  817ee4:	10be0004 	addi	r2,r2,-2048
  817ee8:	10800003 	ldbu	r2,0(r2)
  817eec:	1884b03a 	or	r2,r3,r2
  817ef0:	1007883a 	mov	r3,r2
  817ef4:	008020b4 	movhi	r2,130
  817ef8:	10be0004 	addi	r2,r2,-2048
  817efc:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  817f00:	e0bffd17 	ldw	r2,-12(fp)
  817f04:	10800d03 	ldbu	r2,52(r2)
  817f08:	11003fcc 	andi	r4,r2,255
  817f0c:	e0bffd17 	ldw	r2,-12(fp)
  817f10:	10800d03 	ldbu	r2,52(r2)
  817f14:	10c03fcc 	andi	r3,r2,255
  817f18:	008020b4 	movhi	r2,130
  817f1c:	10be0044 	addi	r2,r2,-2047
  817f20:	10c5883a 	add	r2,r2,r3
  817f24:	10c00003 	ldbu	r3,0(r2)
  817f28:	e0bffd17 	ldw	r2,-12(fp)
  817f2c:	10800d43 	ldbu	r2,53(r2)
  817f30:	1884b03a 	or	r2,r3,r2
  817f34:	1007883a 	mov	r3,r2
  817f38:	008020b4 	movhi	r2,130
  817f3c:	10be0044 	addi	r2,r2,-2047
  817f40:	1105883a 	add	r2,r2,r4
  817f44:	10c00005 	stb	r3,0(r2)
  817f48:	e0bffc17 	ldw	r2,-16(fp)
  817f4c:	e0bff815 	stw	r2,-32(fp)
  817f50:	e0bff817 	ldw	r2,-32(fp)
  817f54:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  817f58:	008020b4 	movhi	r2,130
  817f5c:	10bdf444 	addi	r2,r2,-2095
  817f60:	10800003 	ldbu	r2,0(r2)
  817f64:	10803fcc 	andi	r2,r2,255
  817f68:	10800058 	cmpnei	r2,r2,1
  817f6c:	10000b1e 	bne	r2,zero,817f9c <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
  817f70:	08122c40 	call	8122c4 <OS_Sched>
  817f74:	00000906 	br	817f9c <OSTaskResume+0x1e0>
  817f78:	e0bffc17 	ldw	r2,-16(fp)
  817f7c:	e0bff715 	stw	r2,-36(fp)
  817f80:	e0bff717 	ldw	r2,-36(fp)
  817f84:	1001703a 	wrctl	status,r2
  817f88:	00000406 	br	817f9c <OSTaskResume+0x1e0>
  817f8c:	e0bffc17 	ldw	r2,-16(fp)
  817f90:	e0bff615 	stw	r2,-40(fp)
  817f94:	e0bff617 	ldw	r2,-40(fp)
  817f98:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  817f9c:	e03fff15 	stw	zero,-4(fp)
  817fa0:	00000606 	br	817fbc <OSTaskResume+0x200>
  817fa4:	e0bffc17 	ldw	r2,-16(fp)
  817fa8:	e0bff515 	stw	r2,-44(fp)
  817fac:	e0bff517 	ldw	r2,-44(fp)
  817fb0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  817fb4:	00801104 	movi	r2,68
  817fb8:	e0bfff15 	stw	r2,-4(fp)
  817fbc:	e0bfff17 	ldw	r2,-4(fp)
}
  817fc0:	e037883a 	mov	sp,fp
  817fc4:	dfc00117 	ldw	ra,4(sp)
  817fc8:	df000017 	ldw	fp,0(sp)
  817fcc:	dec00204 	addi	sp,sp,8
  817fd0:	f800283a 	ret

00817fd4 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  817fd4:	defff204 	addi	sp,sp,-56
  817fd8:	df000d15 	stw	fp,52(sp)
  817fdc:	df000d04 	addi	fp,sp,52
  817fe0:	e17ffe15 	stw	r5,-8(fp)
  817fe4:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  817fe8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  817fec:	e0bffd03 	ldbu	r2,-12(fp)
  817ff0:	10800570 	cmpltui	r2,r2,21
  817ff4:	1000061e 	bne	r2,zero,818010 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  817ff8:	e0bffd03 	ldbu	r2,-12(fp)
  817ffc:	10803fe0 	cmpeqi	r2,r2,255
  818000:	1000031e 	bne	r2,zero,818010 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  818004:	00800a84 	movi	r2,42
  818008:	e0bfff15 	stw	r2,-4(fp)
  81800c:	00006b06 	br	8181bc <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  818010:	e0bffe17 	ldw	r2,-8(fp)
  818014:	1004c03a 	cmpne	r2,r2,zero
  818018:	1000031e 	bne	r2,zero,818028 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
  81801c:	00800244 	movi	r2,9
  818020:	e0bfff15 	stw	r2,-4(fp)
  818024:	00006506 	br	8181bc <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  818028:	e0bffe17 	ldw	r2,-8(fp)
  81802c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  818030:	e0bffe17 	ldw	r2,-8(fp)
  818034:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818038:	0005303a 	rdctl	r2,status
  81803c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818040:	e0fff717 	ldw	r3,-36(fp)
  818044:	00bfff84 	movi	r2,-2
  818048:	1884703a 	and	r2,r3,r2
  81804c:	1001703a 	wrctl	status,r2
  
  return context;
  818050:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  818054:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  818058:	e0bffd03 	ldbu	r2,-12(fp)
  81805c:	10803fd8 	cmpnei	r2,r2,255
  818060:	1000051e 	bne	r2,zero,818078 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
  818064:	008020b4 	movhi	r2,130
  818068:	10be0304 	addi	r2,r2,-2036
  81806c:	10800017 	ldw	r2,0(r2)
  818070:	10800c83 	ldbu	r2,50(r2)
  818074:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  818078:	e0bffd03 	ldbu	r2,-12(fp)
  81807c:	00c020b4 	movhi	r3,130
  818080:	18da8904 	addi	r3,r3,27172
  818084:	1085883a 	add	r2,r2,r2
  818088:	1085883a 	add	r2,r2,r2
  81808c:	10c5883a 	add	r2,r2,r3
  818090:	10800017 	ldw	r2,0(r2)
  818094:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  818098:	e0bffc17 	ldw	r2,-16(fp)
  81809c:	1004c03a 	cmpne	r2,r2,zero
  8180a0:	1000071e 	bne	r2,zero,8180c0 <OSTaskStkChk+0xec>
  8180a4:	e0bff817 	ldw	r2,-32(fp)
  8180a8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8180ac:	e0bff617 	ldw	r2,-40(fp)
  8180b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8180b4:	008010c4 	movi	r2,67
  8180b8:	e0bfff15 	stw	r2,-4(fp)
  8180bc:	00003f06 	br	8181bc <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  8180c0:	e0bffc17 	ldw	r2,-16(fp)
  8180c4:	10800058 	cmpnei	r2,r2,1
  8180c8:	1000071e 	bne	r2,zero,8180e8 <OSTaskStkChk+0x114>
  8180cc:	e0bff817 	ldw	r2,-32(fp)
  8180d0:	e0bff515 	stw	r2,-44(fp)
  8180d4:	e0bff517 	ldw	r2,-44(fp)
  8180d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8180dc:	008010c4 	movi	r2,67
  8180e0:	e0bfff15 	stw	r2,-4(fp)
  8180e4:	00003506 	br	8181bc <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  8180e8:	e0bffc17 	ldw	r2,-16(fp)
  8180ec:	1080040b 	ldhu	r2,16(r2)
  8180f0:	10bfffcc 	andi	r2,r2,65535
  8180f4:	1080004c 	andi	r2,r2,1
  8180f8:	1004c03a 	cmpne	r2,r2,zero
  8180fc:	1000071e 	bne	r2,zero,81811c <OSTaskStkChk+0x148>
  818100:	e0bff817 	ldw	r2,-32(fp)
  818104:	e0bff415 	stw	r2,-48(fp)
  818108:	e0bff417 	ldw	r2,-48(fp)
  81810c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  818110:	00801144 	movi	r2,69
  818114:	e0bfff15 	stw	r2,-4(fp)
  818118:	00002806 	br	8181bc <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
  81811c:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
  818120:	e0bffc17 	ldw	r2,-16(fp)
  818124:	10800317 	ldw	r2,12(r2)
  818128:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
  81812c:	e0bffc17 	ldw	r2,-16(fp)
  818130:	10800217 	ldw	r2,8(r2)
  818134:	e0bffb15 	stw	r2,-20(fp)
  818138:	e0bff817 	ldw	r2,-32(fp)
  81813c:	e0bff315 	stw	r2,-52(fp)
  818140:	e0bff317 	ldw	r2,-52(fp)
  818144:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  818148:	00000306 	br	818158 <OSTaskStkChk+0x184>
        nfree++;
  81814c:	e0bffa17 	ldw	r2,-24(fp)
  818150:	10800044 	addi	r2,r2,1
  818154:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  818158:	e0bffb17 	ldw	r2,-20(fp)
  81815c:	10800017 	ldw	r2,0(r2)
  818160:	1005003a 	cmpeq	r2,r2,zero
  818164:	1007883a 	mov	r3,r2
  818168:	e0bffb17 	ldw	r2,-20(fp)
  81816c:	10800104 	addi	r2,r2,4
  818170:	e0bffb15 	stw	r2,-20(fp)
  818174:	18803fcc 	andi	r2,r3,255
  818178:	1004c03a 	cmpne	r2,r2,zero
  81817c:	103ff31e 	bne	r2,zero,81814c <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  818180:	e0bffa17 	ldw	r2,-24(fp)
  818184:	1085883a 	add	r2,r2,r2
  818188:	1085883a 	add	r2,r2,r2
  81818c:	1007883a 	mov	r3,r2
  818190:	e0bffe17 	ldw	r2,-8(fp)
  818194:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  818198:	e0fff917 	ldw	r3,-28(fp)
  81819c:	e0bffa17 	ldw	r2,-24(fp)
  8181a0:	1885c83a 	sub	r2,r3,r2
  8181a4:	1085883a 	add	r2,r2,r2
  8181a8:	1085883a 	add	r2,r2,r2
  8181ac:	1007883a 	mov	r3,r2
  8181b0:	e0bffe17 	ldw	r2,-8(fp)
  8181b4:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  8181b8:	e03fff15 	stw	zero,-4(fp)
  8181bc:	e0bfff17 	ldw	r2,-4(fp)
}
  8181c0:	e037883a 	mov	sp,fp
  8181c4:	df000017 	ldw	fp,0(sp)
  8181c8:	dec00104 	addi	sp,sp,4
  8181cc:	f800283a 	ret

008181d0 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  8181d0:	defff404 	addi	sp,sp,-48
  8181d4:	dfc00b15 	stw	ra,44(sp)
  8181d8:	df000a15 	stw	fp,40(sp)
  8181dc:	df000a04 	addi	fp,sp,40
  8181e0:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8181e4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  8181e8:	e0bffe03 	ldbu	r2,-8(fp)
  8181ec:	10800518 	cmpnei	r2,r2,20
  8181f0:	1000031e 	bne	r2,zero,818200 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  8181f4:	008011c4 	movi	r2,71
  8181f8:	e0bfff15 	stw	r2,-4(fp)
  8181fc:	00007906 	br	8183e4 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  818200:	e0bffe03 	ldbu	r2,-8(fp)
  818204:	10800530 	cmpltui	r2,r2,20
  818208:	1000061e 	bne	r2,zero,818224 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
  81820c:	e0bffe03 	ldbu	r2,-8(fp)
  818210:	10803fe0 	cmpeqi	r2,r2,255
  818214:	1000031e 	bne	r2,zero,818224 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
  818218:	00800a84 	movi	r2,42
  81821c:	e0bfff15 	stw	r2,-4(fp)
  818220:	00007006 	br	8183e4 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818224:	0005303a 	rdctl	r2,status
  818228:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81822c:	e0fff917 	ldw	r3,-28(fp)
  818230:	00bfff84 	movi	r2,-2
  818234:	1884703a 	and	r2,r3,r2
  818238:	1001703a 	wrctl	status,r2
  
  return context;
  81823c:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  818240:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  818244:	e0bffe03 	ldbu	r2,-8(fp)
  818248:	10803fd8 	cmpnei	r2,r2,255
  81824c:	1000081e 	bne	r2,zero,818270 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
  818250:	008020b4 	movhi	r2,130
  818254:	10be0304 	addi	r2,r2,-2036
  818258:	10800017 	ldw	r2,0(r2)
  81825c:	10800c83 	ldbu	r2,50(r2)
  818260:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
  818264:	00800044 	movi	r2,1
  818268:	e0bffd05 	stb	r2,-12(fp)
  81826c:	00000b06 	br	81829c <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  818270:	008020b4 	movhi	r2,130
  818274:	10be0304 	addi	r2,r2,-2036
  818278:	10800017 	ldw	r2,0(r2)
  81827c:	10800c83 	ldbu	r2,50(r2)
  818280:	10c03fcc 	andi	r3,r2,255
  818284:	e0bffe03 	ldbu	r2,-8(fp)
  818288:	1880031e 	bne	r3,r2,818298 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
  81828c:	00800044 	movi	r2,1
  818290:	e0bffd05 	stb	r2,-12(fp)
  818294:	00000106 	br	81829c <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  818298:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81829c:	e0bffe03 	ldbu	r2,-8(fp)
  8182a0:	00c020b4 	movhi	r3,130
  8182a4:	18da8904 	addi	r3,r3,27172
  8182a8:	1085883a 	add	r2,r2,r2
  8182ac:	1085883a 	add	r2,r2,r2
  8182b0:	10c5883a 	add	r2,r2,r3
  8182b4:	10800017 	ldw	r2,0(r2)
  8182b8:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  8182bc:	e0bffc17 	ldw	r2,-16(fp)
  8182c0:	1004c03a 	cmpne	r2,r2,zero
  8182c4:	1000071e 	bne	r2,zero,8182e4 <OSTaskSuspend+0x114>
  8182c8:	e0bffa17 	ldw	r2,-24(fp)
  8182cc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8182d0:	e0bff817 	ldw	r2,-32(fp)
  8182d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  8182d8:	00801204 	movi	r2,72
  8182dc:	e0bfff15 	stw	r2,-4(fp)
  8182e0:	00004006 	br	8183e4 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  8182e4:	e0bffc17 	ldw	r2,-16(fp)
  8182e8:	10800058 	cmpnei	r2,r2,1
  8182ec:	1000071e 	bne	r2,zero,81830c <OSTaskSuspend+0x13c>
  8182f0:	e0bffa17 	ldw	r2,-24(fp)
  8182f4:	e0bff715 	stw	r2,-36(fp)
  8182f8:	e0bff717 	ldw	r2,-36(fp)
  8182fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  818300:	008010c4 	movi	r2,67
  818304:	e0bfff15 	stw	r2,-4(fp)
  818308:	00003606 	br	8183e4 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
  81830c:	e0bffc17 	ldw	r2,-16(fp)
  818310:	10800d03 	ldbu	r2,52(r2)
  818314:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  818318:	e13ffb03 	ldbu	r4,-20(fp)
  81831c:	e0fffb03 	ldbu	r3,-20(fp)
  818320:	008020b4 	movhi	r2,130
  818324:	10be0044 	addi	r2,r2,-2047
  818328:	10c5883a 	add	r2,r2,r3
  81832c:	10800003 	ldbu	r2,0(r2)
  818330:	1007883a 	mov	r3,r2
  818334:	e0bffc17 	ldw	r2,-16(fp)
  818338:	10800d43 	ldbu	r2,53(r2)
  81833c:	0084303a 	nor	r2,zero,r2
  818340:	1884703a 	and	r2,r3,r2
  818344:	1007883a 	mov	r3,r2
  818348:	008020b4 	movhi	r2,130
  81834c:	10be0044 	addi	r2,r2,-2047
  818350:	1105883a 	add	r2,r2,r4
  818354:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  818358:	e0fffb03 	ldbu	r3,-20(fp)
  81835c:	008020b4 	movhi	r2,130
  818360:	10be0044 	addi	r2,r2,-2047
  818364:	10c5883a 	add	r2,r2,r3
  818368:	10800003 	ldbu	r2,0(r2)
  81836c:	10803fcc 	andi	r2,r2,255
  818370:	1004c03a 	cmpne	r2,r2,zero
  818374:	10000c1e 	bne	r2,zero,8183a8 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  818378:	e0bffc17 	ldw	r2,-16(fp)
  81837c:	10800d83 	ldbu	r2,54(r2)
  818380:	0084303a 	nor	r2,zero,r2
  818384:	1007883a 	mov	r3,r2
  818388:	008020b4 	movhi	r2,130
  81838c:	10be0004 	addi	r2,r2,-2048
  818390:	10800003 	ldbu	r2,0(r2)
  818394:	1884703a 	and	r2,r3,r2
  818398:	1007883a 	mov	r3,r2
  81839c:	008020b4 	movhi	r2,130
  8183a0:	10be0004 	addi	r2,r2,-2048
  8183a4:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  8183a8:	e0bffc17 	ldw	r2,-16(fp)
  8183ac:	10800c03 	ldbu	r2,48(r2)
  8183b0:	10800214 	ori	r2,r2,8
  8183b4:	1007883a 	mov	r3,r2
  8183b8:	e0bffc17 	ldw	r2,-16(fp)
  8183bc:	10c00c05 	stb	r3,48(r2)
  8183c0:	e0bffa17 	ldw	r2,-24(fp)
  8183c4:	e0bff615 	stw	r2,-40(fp)
  8183c8:	e0bff617 	ldw	r2,-40(fp)
  8183cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  8183d0:	e0bffd03 	ldbu	r2,-12(fp)
  8183d4:	10800058 	cmpnei	r2,r2,1
  8183d8:	1000011e 	bne	r2,zero,8183e0 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
  8183dc:	08122c40 	call	8122c4 <OS_Sched>
    }
    return (OS_ERR_NONE);
  8183e0:	e03fff15 	stw	zero,-4(fp)
  8183e4:	e0bfff17 	ldw	r2,-4(fp)
}
  8183e8:	e037883a 	mov	sp,fp
  8183ec:	dfc00117 	ldw	ra,4(sp)
  8183f0:	df000017 	ldw	fp,0(sp)
  8183f4:	dec00204 	addi	sp,sp,8
  8183f8:	f800283a 	ret

008183fc <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  8183fc:	defff504 	addi	sp,sp,-44
  818400:	dfc00a15 	stw	ra,40(sp)
  818404:	df000915 	stw	fp,36(sp)
  818408:	df000904 	addi	fp,sp,36
  81840c:	e17ffe15 	stw	r5,-8(fp)
  818410:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  818414:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  818418:	e0bffd03 	ldbu	r2,-12(fp)
  81841c:	10800570 	cmpltui	r2,r2,21
  818420:	1000061e 	bne	r2,zero,81843c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  818424:	e0bffd03 	ldbu	r2,-12(fp)
  818428:	10803fe0 	cmpeqi	r2,r2,255
  81842c:	1000031e 	bne	r2,zero,81843c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  818430:	00800a84 	movi	r2,42
  818434:	e0bfff15 	stw	r2,-4(fp)
  818438:	00003b06 	br	818528 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  81843c:	e0bffe17 	ldw	r2,-8(fp)
  818440:	1004c03a 	cmpne	r2,r2,zero
  818444:	1000031e 	bne	r2,zero,818454 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
  818448:	00800244 	movi	r2,9
  81844c:	e0bfff15 	stw	r2,-4(fp)
  818450:	00003506 	br	818528 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818454:	0005303a 	rdctl	r2,status
  818458:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81845c:	e0fffa17 	ldw	r3,-24(fp)
  818460:	00bfff84 	movi	r2,-2
  818464:	1884703a 	and	r2,r3,r2
  818468:	1001703a 	wrctl	status,r2
  
  return context;
  81846c:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  818470:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  818474:	e0bffd03 	ldbu	r2,-12(fp)
  818478:	10803fd8 	cmpnei	r2,r2,255
  81847c:	1000051e 	bne	r2,zero,818494 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
  818480:	008020b4 	movhi	r2,130
  818484:	10be0304 	addi	r2,r2,-2036
  818488:	10800017 	ldw	r2,0(r2)
  81848c:	10800c83 	ldbu	r2,50(r2)
  818490:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  818494:	e0bffd03 	ldbu	r2,-12(fp)
  818498:	00c020b4 	movhi	r3,130
  81849c:	18da8904 	addi	r3,r3,27172
  8184a0:	1085883a 	add	r2,r2,r2
  8184a4:	1085883a 	add	r2,r2,r2
  8184a8:	10c5883a 	add	r2,r2,r3
  8184ac:	10800017 	ldw	r2,0(r2)
  8184b0:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  8184b4:	e0bffc17 	ldw	r2,-16(fp)
  8184b8:	1004c03a 	cmpne	r2,r2,zero
  8184bc:	1000071e 	bne	r2,zero,8184dc <OSTaskQuery+0xe0>
  8184c0:	e0bffb17 	ldw	r2,-20(fp)
  8184c4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8184c8:	e0bff917 	ldw	r2,-28(fp)
  8184cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  8184d0:	00800a44 	movi	r2,41
  8184d4:	e0bfff15 	stw	r2,-4(fp)
  8184d8:	00001306 	br	818528 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  8184dc:	e0bffc17 	ldw	r2,-16(fp)
  8184e0:	10800058 	cmpnei	r2,r2,1
  8184e4:	1000071e 	bne	r2,zero,818504 <OSTaskQuery+0x108>
  8184e8:	e0bffb17 	ldw	r2,-20(fp)
  8184ec:	e0bff815 	stw	r2,-32(fp)
  8184f0:	e0bff817 	ldw	r2,-32(fp)
  8184f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8184f8:	008010c4 	movi	r2,67
  8184fc:	e0bfff15 	stw	r2,-4(fp)
  818500:	00000906 	br	818528 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  818504:	e13ffe17 	ldw	r4,-8(fp)
  818508:	e17ffc17 	ldw	r5,-16(fp)
  81850c:	01801b04 	movi	r6,108
  818510:	08122580 	call	812258 <OS_MemCopy>
  818514:	e0bffb17 	ldw	r2,-20(fp)
  818518:	e0bff715 	stw	r2,-36(fp)
  81851c:	e0bff717 	ldw	r2,-36(fp)
  818520:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  818524:	e03fff15 	stw	zero,-4(fp)
  818528:	e0bfff17 	ldw	r2,-4(fp)
}
  81852c:	e037883a 	mov	sp,fp
  818530:	dfc00117 	ldw	ra,4(sp)
  818534:	df000017 	ldw	fp,0(sp)
  818538:	dec00204 	addi	sp,sp,8
  81853c:	f800283a 	ret

00818540 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  818540:	defffc04 	addi	sp,sp,-16
  818544:	df000315 	stw	fp,12(sp)
  818548:	df000304 	addi	fp,sp,12
  81854c:	e13ffd15 	stw	r4,-12(fp)
  818550:	e17ffe15 	stw	r5,-8(fp)
  818554:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  818558:	e0bfff0b 	ldhu	r2,-4(fp)
  81855c:	1080004c 	andi	r2,r2,1
  818560:	10803fcc 	andi	r2,r2,255
  818564:	1005003a 	cmpeq	r2,r2,zero
  818568:	1000101e 	bne	r2,zero,8185ac <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  81856c:	e0bfff0b 	ldhu	r2,-4(fp)
  818570:	1080008c 	andi	r2,r2,2
  818574:	1005003a 	cmpeq	r2,r2,zero
  818578:	10000c1e 	bne	r2,zero,8185ac <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  81857c:	00000806 	br	8185a0 <OS_TaskStkClr+0x60>
                size--;
  818580:	e0bffe17 	ldw	r2,-8(fp)
  818584:	10bfffc4 	addi	r2,r2,-1
  818588:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  81858c:	e0bffd17 	ldw	r2,-12(fp)
  818590:	10000015 	stw	zero,0(r2)
  818594:	e0bffd17 	ldw	r2,-12(fp)
  818598:	10800104 	addi	r2,r2,4
  81859c:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  8185a0:	e0bffe17 	ldw	r2,-8(fp)
  8185a4:	1004c03a 	cmpne	r2,r2,zero
  8185a8:	103ff51e 	bne	r2,zero,818580 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  8185ac:	e037883a 	mov	sp,fp
  8185b0:	df000017 	ldw	fp,0(sp)
  8185b4:	dec00104 	addi	sp,sp,4
  8185b8:	f800283a 	ret

008185bc <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  8185bc:	defff904 	addi	sp,sp,-28
  8185c0:	dfc00615 	stw	ra,24(sp)
  8185c4:	df000515 	stw	fp,20(sp)
  8185c8:	df000504 	addi	fp,sp,20
  8185cc:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8185d0:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8185d4:	008020b4 	movhi	r2,130
  8185d8:	10be0204 	addi	r2,r2,-2040
  8185dc:	10800003 	ldbu	r2,0(r2)
  8185e0:	10803fcc 	andi	r2,r2,255
  8185e4:	1004c03a 	cmpne	r2,r2,zero
  8185e8:	1000421e 	bne	r2,zero,8186f4 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  8185ec:	e0bfff0b 	ldhu	r2,-4(fp)
  8185f0:	1005003a 	cmpeq	r2,r2,zero
  8185f4:	10003f1e 	bne	r2,zero,8186f4 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8185f8:	0005303a 	rdctl	r2,status
  8185fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818600:	e0fffc17 	ldw	r3,-16(fp)
  818604:	00bfff84 	movi	r2,-2
  818608:	1884703a 	and	r2,r3,r2
  81860c:	1001703a 	wrctl	status,r2
  
  return context;
  818610:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
  818614:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  818618:	008020b4 	movhi	r2,130
  81861c:	10be0304 	addi	r2,r2,-2036
  818620:	10800017 	ldw	r2,0(r2)
  818624:	10800d03 	ldbu	r2,52(r2)
  818628:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  81862c:	e13ffe03 	ldbu	r4,-8(fp)
  818630:	e0fffe03 	ldbu	r3,-8(fp)
  818634:	008020b4 	movhi	r2,130
  818638:	10be0044 	addi	r2,r2,-2047
  81863c:	10c5883a 	add	r2,r2,r3
  818640:	10800003 	ldbu	r2,0(r2)
  818644:	1007883a 	mov	r3,r2
  818648:	008020b4 	movhi	r2,130
  81864c:	10be0304 	addi	r2,r2,-2036
  818650:	10800017 	ldw	r2,0(r2)
  818654:	10800d43 	ldbu	r2,53(r2)
  818658:	0084303a 	nor	r2,zero,r2
  81865c:	1884703a 	and	r2,r3,r2
  818660:	1007883a 	mov	r3,r2
  818664:	008020b4 	movhi	r2,130
  818668:	10be0044 	addi	r2,r2,-2047
  81866c:	1105883a 	add	r2,r2,r4
  818670:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
  818674:	e0fffe03 	ldbu	r3,-8(fp)
  818678:	008020b4 	movhi	r2,130
  81867c:	10be0044 	addi	r2,r2,-2047
  818680:	10c5883a 	add	r2,r2,r3
  818684:	10800003 	ldbu	r2,0(r2)
  818688:	10803fcc 	andi	r2,r2,255
  81868c:	1004c03a 	cmpne	r2,r2,zero
  818690:	10000e1e 	bne	r2,zero,8186cc <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  818694:	008020b4 	movhi	r2,130
  818698:	10be0304 	addi	r2,r2,-2036
  81869c:	10800017 	ldw	r2,0(r2)
  8186a0:	10800d83 	ldbu	r2,54(r2)
  8186a4:	0084303a 	nor	r2,zero,r2
  8186a8:	1007883a 	mov	r3,r2
  8186ac:	008020b4 	movhi	r2,130
  8186b0:	10be0004 	addi	r2,r2,-2048
  8186b4:	10800003 	ldbu	r2,0(r2)
  8186b8:	1884703a 	and	r2,r3,r2
  8186bc:	1007883a 	mov	r3,r2
  8186c0:	008020b4 	movhi	r2,130
  8186c4:	10be0004 	addi	r2,r2,-2048
  8186c8:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  8186cc:	008020b4 	movhi	r2,130
  8186d0:	10be0304 	addi	r2,r2,-2036
  8186d4:	10c00017 	ldw	r3,0(r2)
  8186d8:	e0bfff0b 	ldhu	r2,-4(fp)
  8186dc:	18800b8d 	sth	r2,46(r3)
  8186e0:	e0bffd17 	ldw	r2,-12(fp)
  8186e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8186e8:	e0bffb17 	ldw	r2,-20(fp)
  8186ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  8186f0:	08122c40 	call	8122c4 <OS_Sched>
    }
}
  8186f4:	e037883a 	mov	sp,fp
  8186f8:	dfc00117 	ldw	ra,4(sp)
  8186fc:	df000017 	ldw	fp,0(sp)
  818700:	dec00204 	addi	sp,sp,8
  818704:	f800283a 	ret

00818708 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  818708:	defff604 	addi	sp,sp,-40
  81870c:	dfc00915 	stw	ra,36(sp)
  818710:	df000815 	stw	fp,32(sp)
  818714:	dc000715 	stw	r16,28(sp)
  818718:	df000704 	addi	fp,sp,28
  81871c:	e13ffb05 	stb	r4,-20(fp)
  818720:	e17ffc05 	stb	r5,-16(fp)
  818724:	e1bffd05 	stb	r6,-12(fp)
  818728:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81872c:	008020b4 	movhi	r2,130
  818730:	10be0204 	addi	r2,r2,-2040
  818734:	10800003 	ldbu	r2,0(r2)
  818738:	10803fcc 	andi	r2,r2,255
  81873c:	1005003a 	cmpeq	r2,r2,zero
  818740:	1000031e 	bne	r2,zero,818750 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  818744:	00801544 	movi	r2,85
  818748:	e0bfff15 	stw	r2,-4(fp)
  81874c:	00004b06 	br	81887c <OSTimeDlyHMSM+0x174>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  818750:	e0bffb03 	ldbu	r2,-20(fp)
  818754:	1004c03a 	cmpne	r2,r2,zero
  818758:	10000c1e 	bne	r2,zero,81878c <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
  81875c:	e0bffc03 	ldbu	r2,-16(fp)
  818760:	1004c03a 	cmpne	r2,r2,zero
  818764:	1000091e 	bne	r2,zero,81878c <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
  818768:	e0bffd03 	ldbu	r2,-12(fp)
  81876c:	1004c03a 	cmpne	r2,r2,zero
  818770:	1000061e 	bne	r2,zero,81878c <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
  818774:	e0bffe0b 	ldhu	r2,-8(fp)
  818778:	1004c03a 	cmpne	r2,r2,zero
  81877c:	1000031e 	bne	r2,zero,81878c <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
  818780:	00801504 	movi	r2,84
  818784:	e0bfff15 	stw	r2,-4(fp)
  818788:	00003c06 	br	81887c <OSTimeDlyHMSM+0x174>
                }
            }
        }
    }
    if (minutes > 59) {
  81878c:	e0bffc03 	ldbu	r2,-16(fp)
  818790:	10800f30 	cmpltui	r2,r2,60
  818794:	1000031e 	bne	r2,zero,8187a4 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  818798:	00801444 	movi	r2,81
  81879c:	e0bfff15 	stw	r2,-4(fp)
  8187a0:	00003606 	br	81887c <OSTimeDlyHMSM+0x174>
    }
    if (seconds > 59) {
  8187a4:	e0bffd03 	ldbu	r2,-12(fp)
  8187a8:	10800f30 	cmpltui	r2,r2,60
  8187ac:	1000031e 	bne	r2,zero,8187bc <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
  8187b0:	00801484 	movi	r2,82
  8187b4:	e0bfff15 	stw	r2,-4(fp)
  8187b8:	00003006 	br	81887c <OSTimeDlyHMSM+0x174>
    }
    if (ms > 999) {
  8187bc:	e0bffe0b 	ldhu	r2,-8(fp)
  8187c0:	1080fa30 	cmpltui	r2,r2,1000
  8187c4:	1000031e 	bne	r2,zero,8187d4 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
  8187c8:	008014c4 	movi	r2,83
  8187cc:	e0bfff15 	stw	r2,-4(fp)
  8187d0:	00002a06 	br	81887c <OSTimeDlyHMSM+0x174>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  8187d4:	e13ffb03 	ldbu	r4,-20(fp)
  8187d8:	01438404 	movi	r5,3600
  8187dc:	0806c3c0 	call	806c3c <__mulsi3>
  8187e0:	1021883a 	mov	r16,r2
  8187e4:	e13ffc03 	ldbu	r4,-16(fp)
  8187e8:	01400f04 	movi	r5,60
  8187ec:	0806c3c0 	call	806c3c <__mulsi3>
  8187f0:	8087883a 	add	r3,r16,r2
  8187f4:	e0bffd03 	ldbu	r2,-12(fp)
  8187f8:	1889883a 	add	r4,r3,r2
  8187fc:	0140fa04 	movi	r5,1000
  818800:	0806c3c0 	call	806c3c <__mulsi3>
  818804:	1021883a 	mov	r16,r2
  818808:	e13ffe0b 	ldhu	r4,-8(fp)
  81880c:	0140fa04 	movi	r5,1000
  818810:	0806c3c0 	call	806c3c <__mulsi3>
  818814:	1009883a 	mov	r4,r2
  818818:	0140fa04 	movi	r5,1000
  81881c:	0806c2c0 	call	806c2c <__udivsi3>
  818820:	8085883a 	add	r2,r16,r2
  818824:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  818828:	e0bffa17 	ldw	r2,-24(fp)
  81882c:	1004d43a 	srli	r2,r2,16
  818830:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  818834:	e0bffa17 	ldw	r2,-24(fp)
  818838:	10bfffcc 	andi	r2,r2,65535
  81883c:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  818840:	e0bffa17 	ldw	r2,-24(fp)
  818844:	113fffcc 	andi	r4,r2,65535
  818848:	08185bc0 	call	8185bc <OSTimeDly>
    while (loops > 0) {
  81884c:	00000706 	br	81886c <OSTimeDlyHMSM+0x164>
        OSTimeDly((INT16U)32768u);
  818850:	01200014 	movui	r4,32768
  818854:	08185bc0 	call	8185bc <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  818858:	01200014 	movui	r4,32768
  81885c:	08185bc0 	call	8185bc <OSTimeDly>
        loops--;
  818860:	e0bff90b 	ldhu	r2,-28(fp)
  818864:	10bfffc4 	addi	r2,r2,-1
  818868:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  81886c:	e0bff90b 	ldhu	r2,-28(fp)
  818870:	1004c03a 	cmpne	r2,r2,zero
  818874:	103ff61e 	bne	r2,zero,818850 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  818878:	e03fff15 	stw	zero,-4(fp)
  81887c:	e0bfff17 	ldw	r2,-4(fp)
}
  818880:	e037883a 	mov	sp,fp
  818884:	dfc00217 	ldw	ra,8(sp)
  818888:	df000117 	ldw	fp,4(sp)
  81888c:	dc000017 	ldw	r16,0(sp)
  818890:	dec00304 	addi	sp,sp,12
  818894:	f800283a 	ret

00818898 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  818898:	defff404 	addi	sp,sp,-48
  81889c:	dfc00b15 	stw	ra,44(sp)
  8188a0:	df000a15 	stw	fp,40(sp)
  8188a4:	df000a04 	addi	fp,sp,40
  8188a8:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8188ac:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  8188b0:	e0bffe03 	ldbu	r2,-8(fp)
  8188b4:	10800530 	cmpltui	r2,r2,20
  8188b8:	1000031e 	bne	r2,zero,8188c8 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  8188bc:	00800a84 	movi	r2,42
  8188c0:	e0bfff15 	stw	r2,-4(fp)
  8188c4:	00007206 	br	818a90 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8188c8:	0005303a 	rdctl	r2,status
  8188cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8188d0:	e0fffb17 	ldw	r3,-20(fp)
  8188d4:	00bfff84 	movi	r2,-2
  8188d8:	1884703a 	and	r2,r3,r2
  8188dc:	1001703a 	wrctl	status,r2
  
  return context;
  8188e0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  8188e4:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  8188e8:	e0bffe03 	ldbu	r2,-8(fp)
  8188ec:	00c020b4 	movhi	r3,130
  8188f0:	18da8904 	addi	r3,r3,27172
  8188f4:	1085883a 	add	r2,r2,r2
  8188f8:	1085883a 	add	r2,r2,r2
  8188fc:	10c5883a 	add	r2,r2,r3
  818900:	10800017 	ldw	r2,0(r2)
  818904:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
  818908:	e0bffd17 	ldw	r2,-12(fp)
  81890c:	1004c03a 	cmpne	r2,r2,zero
  818910:	1000071e 	bne	r2,zero,818930 <OSTimeDlyResume+0x98>
  818914:	e0bffc17 	ldw	r2,-16(fp)
  818918:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81891c:	e0bffa17 	ldw	r2,-24(fp)
  818920:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  818924:	008010c4 	movi	r2,67
  818928:	e0bfff15 	stw	r2,-4(fp)
  81892c:	00005806 	br	818a90 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  818930:	e0bffd17 	ldw	r2,-12(fp)
  818934:	10800058 	cmpnei	r2,r2,1
  818938:	1000071e 	bne	r2,zero,818958 <OSTimeDlyResume+0xc0>
  81893c:	e0bffc17 	ldw	r2,-16(fp)
  818940:	e0bff915 	stw	r2,-28(fp)
  818944:	e0bff917 	ldw	r2,-28(fp)
  818948:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  81894c:	008010c4 	movi	r2,67
  818950:	e0bfff15 	stw	r2,-4(fp)
  818954:	00004e06 	br	818a90 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  818958:	e0bffd17 	ldw	r2,-12(fp)
  81895c:	10800b8b 	ldhu	r2,46(r2)
  818960:	10bfffcc 	andi	r2,r2,65535
  818964:	1004c03a 	cmpne	r2,r2,zero
  818968:	1000071e 	bne	r2,zero,818988 <OSTimeDlyResume+0xf0>
  81896c:	e0bffc17 	ldw	r2,-16(fp)
  818970:	e0bff815 	stw	r2,-32(fp)
  818974:	e0bff817 	ldw	r2,-32(fp)
  818978:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  81897c:	00801404 	movi	r2,80
  818980:	e0bfff15 	stw	r2,-4(fp)
  818984:	00004206 	br	818a90 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  818988:	e0bffd17 	ldw	r2,-12(fp)
  81898c:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  818990:	e0bffd17 	ldw	r2,-12(fp)
  818994:	10800c03 	ldbu	r2,48(r2)
  818998:	10803fcc 	andi	r2,r2,255
  81899c:	10800dcc 	andi	r2,r2,55
  8189a0:	1005003a 	cmpeq	r2,r2,zero
  8189a4:	10000b1e 	bne	r2,zero,8189d4 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  8189a8:	e0bffd17 	ldw	r2,-12(fp)
  8189ac:	10c00c03 	ldbu	r3,48(r2)
  8189b0:	00bff204 	movi	r2,-56
  8189b4:	1884703a 	and	r2,r3,r2
  8189b8:	1007883a 	mov	r3,r2
  8189bc:	e0bffd17 	ldw	r2,-12(fp)
  8189c0:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  8189c4:	e0fffd17 	ldw	r3,-12(fp)
  8189c8:	00800044 	movi	r2,1
  8189cc:	18800c45 	stb	r2,49(r3)
  8189d0:	00000206 	br	8189dc <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  8189d4:	e0bffd17 	ldw	r2,-12(fp)
  8189d8:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  8189dc:	e0bffd17 	ldw	r2,-12(fp)
  8189e0:	10800c03 	ldbu	r2,48(r2)
  8189e4:	10803fcc 	andi	r2,r2,255
  8189e8:	1080020c 	andi	r2,r2,8
  8189ec:	1004c03a 	cmpne	r2,r2,zero
  8189f0:	1000221e 	bne	r2,zero,818a7c <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  8189f4:	e0bffd17 	ldw	r2,-12(fp)
  8189f8:	10c00d83 	ldbu	r3,54(r2)
  8189fc:	008020b4 	movhi	r2,130
  818a00:	10be0004 	addi	r2,r2,-2048
  818a04:	10800003 	ldbu	r2,0(r2)
  818a08:	1884b03a 	or	r2,r3,r2
  818a0c:	1007883a 	mov	r3,r2
  818a10:	008020b4 	movhi	r2,130
  818a14:	10be0004 	addi	r2,r2,-2048
  818a18:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  818a1c:	e0bffd17 	ldw	r2,-12(fp)
  818a20:	10800d03 	ldbu	r2,52(r2)
  818a24:	11003fcc 	andi	r4,r2,255
  818a28:	e0bffd17 	ldw	r2,-12(fp)
  818a2c:	10800d03 	ldbu	r2,52(r2)
  818a30:	10c03fcc 	andi	r3,r2,255
  818a34:	008020b4 	movhi	r2,130
  818a38:	10be0044 	addi	r2,r2,-2047
  818a3c:	10c5883a 	add	r2,r2,r3
  818a40:	10c00003 	ldbu	r3,0(r2)
  818a44:	e0bffd17 	ldw	r2,-12(fp)
  818a48:	10800d43 	ldbu	r2,53(r2)
  818a4c:	1884b03a 	or	r2,r3,r2
  818a50:	1007883a 	mov	r3,r2
  818a54:	008020b4 	movhi	r2,130
  818a58:	10be0044 	addi	r2,r2,-2047
  818a5c:	1105883a 	add	r2,r2,r4
  818a60:	10c00005 	stb	r3,0(r2)
  818a64:	e0bffc17 	ldw	r2,-16(fp)
  818a68:	e0bff715 	stw	r2,-36(fp)
  818a6c:	e0bff717 	ldw	r2,-36(fp)
  818a70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  818a74:	08122c40 	call	8122c4 <OS_Sched>
  818a78:	00000406 	br	818a8c <OSTimeDlyResume+0x1f4>
  818a7c:	e0bffc17 	ldw	r2,-16(fp)
  818a80:	e0bff615 	stw	r2,-40(fp)
  818a84:	e0bff617 	ldw	r2,-40(fp)
  818a88:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  818a8c:	e03fff15 	stw	zero,-4(fp)
  818a90:	e0bfff17 	ldw	r2,-4(fp)
}
  818a94:	e037883a 	mov	sp,fp
  818a98:	dfc00117 	ldw	ra,4(sp)
  818a9c:	df000017 	ldw	fp,0(sp)
  818aa0:	dec00204 	addi	sp,sp,8
  818aa4:	f800283a 	ret

00818aa8 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  818aa8:	defffb04 	addi	sp,sp,-20
  818aac:	df000415 	stw	fp,16(sp)
  818ab0:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  818ab4:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818ab8:	0005303a 	rdctl	r2,status
  818abc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818ac0:	e0fffd17 	ldw	r3,-12(fp)
  818ac4:	00bfff84 	movi	r2,-2
  818ac8:	1884703a 	and	r2,r3,r2
  818acc:	1001703a 	wrctl	status,r2
  
  return context;
  818ad0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  818ad4:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
  818ad8:	008020b4 	movhi	r2,130
  818adc:	10be0404 	addi	r2,r2,-2032
  818ae0:	10800017 	ldw	r2,0(r2)
  818ae4:	e0bfff15 	stw	r2,-4(fp)
  818ae8:	e0bffe17 	ldw	r2,-8(fp)
  818aec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818af0:	e0bffc17 	ldw	r2,-16(fp)
  818af4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  818af8:	e0bfff17 	ldw	r2,-4(fp)
}
  818afc:	e037883a 	mov	sp,fp
  818b00:	df000017 	ldw	fp,0(sp)
  818b04:	dec00104 	addi	sp,sp,4
  818b08:	f800283a 	ret

00818b0c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  818b0c:	defffb04 	addi	sp,sp,-20
  818b10:	df000415 	stw	fp,16(sp)
  818b14:	df000404 	addi	fp,sp,16
  818b18:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  818b1c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818b20:	0005303a 	rdctl	r2,status
  818b24:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818b28:	e0fffd17 	ldw	r3,-12(fp)
  818b2c:	00bfff84 	movi	r2,-2
  818b30:	1884703a 	and	r2,r3,r2
  818b34:	1001703a 	wrctl	status,r2
  
  return context;
  818b38:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  818b3c:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
  818b40:	00c020b4 	movhi	r3,130
  818b44:	18fe0404 	addi	r3,r3,-2032
  818b48:	e0bfff17 	ldw	r2,-4(fp)
  818b4c:	18800015 	stw	r2,0(r3)
  818b50:	e0bffe17 	ldw	r2,-8(fp)
  818b54:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818b58:	e0bffc17 	ldw	r2,-16(fp)
  818b5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  818b60:	e037883a 	mov	sp,fp
  818b64:	df000017 	ldw	fp,0(sp)
  818b68:	dec00104 	addi	sp,sp,4
  818b6c:	f800283a 	ret

00818b70 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  818b70:	defffd04 	addi	sp,sp,-12
  818b74:	dfc00215 	stw	ra,8(sp)
  818b78:	df000115 	stw	fp,4(sp)
  818b7c:	df000104 	addi	fp,sp,4
  818b80:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  818b84:	081adf40 	call	81adf4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  818b88:	00800044 	movi	r2,1
  818b8c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  818b90:	e037883a 	mov	sp,fp
  818b94:	dfc00117 	ldw	ra,4(sp)
  818b98:	df000017 	ldw	fp,0(sp)
  818b9c:	dec00204 	addi	sp,sp,8
  818ba0:	f800283a 	ret

00818ba4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  818ba4:	defffe04 	addi	sp,sp,-8
  818ba8:	dfc00115 	stw	ra,4(sp)
  818bac:	df000015 	stw	fp,0(sp)
  818bb0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  818bb4:	01004474 	movhi	r4,273
  818bb8:	21241004 	addi	r4,r4,-28608
  818bbc:	000b883a 	mov	r5,zero
  818bc0:	000d883a 	mov	r6,zero
  818bc4:	01c0fa04 	movi	r7,1000
  818bc8:	0819a340 	call	819a34 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  818bcc:	010020b4 	movhi	r4,130
  818bd0:	2132a404 	addi	r4,r4,-13680
  818bd4:	000b883a 	mov	r5,zero
  818bd8:	01800044 	movi	r6,1
  818bdc:	0818db00 	call	818db0 <altera_avalon_jtag_uart_init>
  818be0:	010020b4 	movhi	r4,130
  818be4:	21329a04 	addi	r4,r4,-13720
  818be8:	0818c300 	call	818c30 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SD_CARD_SPI_MASTER, sd_card_spi_master);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
  818bec:	010020b4 	movhi	r4,130
  818bf0:	2136b504 	addi	r4,r4,-9516
  818bf4:	0818c300 	call	818c30 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
  818bf8:	010020b4 	movhi	r4,130
  818bfc:	2136c104 	addi	r4,r4,-9468
  818c00:	0818c300 	call	818c30 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  818c04:	010020b4 	movhi	r4,130
  818c08:	2136cd04 	addi	r4,r4,-9420
  818c0c:	0819b740 	call	819b74 <alt_up_character_lcd_init>
  818c10:	010020b4 	movhi	r4,130
  818c14:	2136cd04 	addi	r4,r4,-9420
  818c18:	0818c300 	call	818c30 <alt_dev_reg>
}
  818c1c:	e037883a 	mov	sp,fp
  818c20:	dfc00117 	ldw	ra,4(sp)
  818c24:	df000017 	ldw	fp,0(sp)
  818c28:	dec00204 	addi	sp,sp,8
  818c2c:	f800283a 	ret

00818c30 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  818c30:	defffd04 	addi	sp,sp,-12
  818c34:	dfc00215 	stw	ra,8(sp)
  818c38:	df000115 	stw	fp,4(sp)
  818c3c:	df000104 	addi	fp,sp,4
  818c40:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  818c44:	e13fff17 	ldw	r4,-4(fp)
  818c48:	014020b4 	movhi	r5,130
  818c4c:	2976e104 	addi	r5,r5,-9340
  818c50:	081a2c00 	call	81a2c0 <alt_dev_llist_insert>
}
  818c54:	e037883a 	mov	sp,fp
  818c58:	dfc00117 	ldw	ra,4(sp)
  818c5c:	df000017 	ldw	fp,0(sp)
  818c60:	dec00204 	addi	sp,sp,8
  818c64:	f800283a 	ret

00818c68 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  818c68:	defffa04 	addi	sp,sp,-24
  818c6c:	dfc00515 	stw	ra,20(sp)
  818c70:	df000415 	stw	fp,16(sp)
  818c74:	df000404 	addi	fp,sp,16
  818c78:	e13ffd15 	stw	r4,-12(fp)
  818c7c:	e17ffe15 	stw	r5,-8(fp)
  818c80:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  818c84:	e0bffd17 	ldw	r2,-12(fp)
  818c88:	10800017 	ldw	r2,0(r2)
  818c8c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  818c90:	e0bffc17 	ldw	r2,-16(fp)
  818c94:	11000a04 	addi	r4,r2,40
  818c98:	e0bffd17 	ldw	r2,-12(fp)
  818c9c:	11c00217 	ldw	r7,8(r2)
  818ca0:	e17ffe17 	ldw	r5,-8(fp)
  818ca4:	e1bfff17 	ldw	r6,-4(fp)
  818ca8:	08194280 	call	819428 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  818cac:	e037883a 	mov	sp,fp
  818cb0:	dfc00117 	ldw	ra,4(sp)
  818cb4:	df000017 	ldw	fp,0(sp)
  818cb8:	dec00204 	addi	sp,sp,8
  818cbc:	f800283a 	ret

00818cc0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  818cc0:	defffa04 	addi	sp,sp,-24
  818cc4:	dfc00515 	stw	ra,20(sp)
  818cc8:	df000415 	stw	fp,16(sp)
  818ccc:	df000404 	addi	fp,sp,16
  818cd0:	e13ffd15 	stw	r4,-12(fp)
  818cd4:	e17ffe15 	stw	r5,-8(fp)
  818cd8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  818cdc:	e0bffd17 	ldw	r2,-12(fp)
  818ce0:	10800017 	ldw	r2,0(r2)
  818ce4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  818ce8:	e0bffc17 	ldw	r2,-16(fp)
  818cec:	11000a04 	addi	r4,r2,40
  818cf0:	e0bffd17 	ldw	r2,-12(fp)
  818cf4:	11c00217 	ldw	r7,8(r2)
  818cf8:	e17ffe17 	ldw	r5,-8(fp)
  818cfc:	e1bfff17 	ldw	r6,-4(fp)
  818d00:	08196e80 	call	8196e8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  818d04:	e037883a 	mov	sp,fp
  818d08:	dfc00117 	ldw	ra,4(sp)
  818d0c:	df000017 	ldw	fp,0(sp)
  818d10:	dec00204 	addi	sp,sp,8
  818d14:	f800283a 	ret

00818d18 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  818d18:	defffc04 	addi	sp,sp,-16
  818d1c:	dfc00315 	stw	ra,12(sp)
  818d20:	df000215 	stw	fp,8(sp)
  818d24:	df000204 	addi	fp,sp,8
  818d28:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  818d2c:	e0bfff17 	ldw	r2,-4(fp)
  818d30:	10800017 	ldw	r2,0(r2)
  818d34:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  818d38:	e0bffe17 	ldw	r2,-8(fp)
  818d3c:	11000a04 	addi	r4,r2,40
  818d40:	e0bfff17 	ldw	r2,-4(fp)
  818d44:	11400217 	ldw	r5,8(r2)
  818d48:	08192c00 	call	8192c0 <altera_avalon_jtag_uart_close>
}
  818d4c:	e037883a 	mov	sp,fp
  818d50:	dfc00117 	ldw	ra,4(sp)
  818d54:	df000017 	ldw	fp,0(sp)
  818d58:	dec00204 	addi	sp,sp,8
  818d5c:	f800283a 	ret

00818d60 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  818d60:	defffa04 	addi	sp,sp,-24
  818d64:	dfc00515 	stw	ra,20(sp)
  818d68:	df000415 	stw	fp,16(sp)
  818d6c:	df000404 	addi	fp,sp,16
  818d70:	e13ffd15 	stw	r4,-12(fp)
  818d74:	e17ffe15 	stw	r5,-8(fp)
  818d78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  818d7c:	e0bffd17 	ldw	r2,-12(fp)
  818d80:	10800017 	ldw	r2,0(r2)
  818d84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  818d88:	e0bffc17 	ldw	r2,-16(fp)
  818d8c:	11000a04 	addi	r4,r2,40
  818d90:	e17ffe17 	ldw	r5,-8(fp)
  818d94:	e1bfff17 	ldw	r6,-4(fp)
  818d98:	08193340 	call	819334 <altera_avalon_jtag_uart_ioctl>
}
  818d9c:	e037883a 	mov	sp,fp
  818da0:	dfc00117 	ldw	ra,4(sp)
  818da4:	df000017 	ldw	fp,0(sp)
  818da8:	dec00204 	addi	sp,sp,8
  818dac:	f800283a 	ret

00818db0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  818db0:	defff404 	addi	sp,sp,-48
  818db4:	dfc00b15 	stw	ra,44(sp)
  818db8:	df000a15 	stw	fp,40(sp)
  818dbc:	df000a04 	addi	fp,sp,40
  818dc0:	e13ffd15 	stw	r4,-12(fp)
  818dc4:	e17ffe15 	stw	r5,-8(fp)
  818dc8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  818dcc:	e0bffd17 	ldw	r2,-12(fp)
  818dd0:	10800c04 	addi	r2,r2,48
  818dd4:	e0bffb15 	stw	r2,-20(fp)
  818dd8:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  818ddc:	e13ffc0b 	ldhu	r4,-16(fp)
  818de0:	e17ffc84 	addi	r5,fp,-14
  818de4:	0812e6c0 	call	812e6c <OSFlagCreate>
  818de8:	1007883a 	mov	r3,r2
  818dec:	e0bffb17 	ldw	r2,-20(fp)
  818df0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  818df4:	e0bffd17 	ldw	r2,-12(fp)
  818df8:	10800a04 	addi	r2,r2,40
  818dfc:	e0bff915 	stw	r2,-28(fp)
  818e00:	00800044 	movi	r2,1
  818e04:	e0bffa0d 	sth	r2,-24(fp)
  818e08:	e13ffa0b 	ldhu	r4,-24(fp)
  818e0c:	08160740 	call	816074 <OSSemCreate>
  818e10:	1007883a 	mov	r3,r2
  818e14:	e0bff917 	ldw	r2,-28(fp)
  818e18:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  818e1c:	e0bffd17 	ldw	r2,-12(fp)
  818e20:	10800b04 	addi	r2,r2,44
  818e24:	e0bff715 	stw	r2,-36(fp)
  818e28:	00800044 	movi	r2,1
  818e2c:	e0bff80d 	sth	r2,-32(fp)
  818e30:	e13ff80b 	ldhu	r4,-32(fp)
  818e34:	08160740 	call	816074 <OSSemCreate>
  818e38:	1007883a 	mov	r3,r2
  818e3c:	e0bff717 	ldw	r2,-36(fp)
  818e40:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  818e44:	e0fffd17 	ldw	r3,-12(fp)
  818e48:	00800044 	movi	r2,1
  818e4c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  818e50:	e0bffd17 	ldw	r2,-12(fp)
  818e54:	10800017 	ldw	r2,0(r2)
  818e58:	11000104 	addi	r4,r2,4
  818e5c:	e0bffd17 	ldw	r2,-12(fp)
  818e60:	10800817 	ldw	r2,32(r2)
  818e64:	1007883a 	mov	r3,r2
  818e68:	2005883a 	mov	r2,r4
  818e6c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  818e70:	e13ffe17 	ldw	r4,-8(fp)
  818e74:	e17fff17 	ldw	r5,-4(fp)
  818e78:	d8000015 	stw	zero,0(sp)
  818e7c:	018020b4 	movhi	r6,130
  818e80:	31a3ba04 	addi	r6,r6,-28952
  818e84:	e1fffd17 	ldw	r7,-12(fp)
  818e88:	081a54c0 	call	81a54c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  818e8c:	e0bffd17 	ldw	r2,-12(fp)
  818e90:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  818e94:	e0bffd17 	ldw	r2,-12(fp)
  818e98:	11000204 	addi	r4,r2,8
  818e9c:	008020b4 	movhi	r2,130
  818ea0:	10be0904 	addi	r2,r2,-2012
  818ea4:	10800017 	ldw	r2,0(r2)
  818ea8:	100b883a 	mov	r5,r2
  818eac:	018020b4 	movhi	r6,130
  818eb0:	31a46b04 	addi	r6,r6,-28244
  818eb4:	e1fffd17 	ldw	r7,-12(fp)
  818eb8:	0819ff40 	call	819ff4 <alt_alarm_start>
  818ebc:	1004403a 	cmpge	r2,r2,zero
  818ec0:	1000041e 	bne	r2,zero,818ed4 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  818ec4:	e0fffd17 	ldw	r3,-12(fp)
  818ec8:	00a00034 	movhi	r2,32768
  818ecc:	10bfffc4 	addi	r2,r2,-1
  818ed0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  818ed4:	e037883a 	mov	sp,fp
  818ed8:	dfc00117 	ldw	ra,4(sp)
  818edc:	df000017 	ldw	fp,0(sp)
  818ee0:	dec00204 	addi	sp,sp,8
  818ee4:	f800283a 	ret

00818ee8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  818ee8:	defff204 	addi	sp,sp,-56
  818eec:	dfc00d15 	stw	ra,52(sp)
  818ef0:	df000c15 	stw	fp,48(sp)
  818ef4:	df000c04 	addi	fp,sp,48
  818ef8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  818efc:	e0bfff17 	ldw	r2,-4(fp)
  818f00:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  818f04:	e0bffd17 	ldw	r2,-12(fp)
  818f08:	10800017 	ldw	r2,0(r2)
  818f0c:	e0bffc15 	stw	r2,-16(fp)
  818f10:	00000006 	br	818f14 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  818f14:	e0bffc17 	ldw	r2,-16(fp)
  818f18:	10800104 	addi	r2,r2,4
  818f1c:	10800037 	ldwio	r2,0(r2)
  818f20:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  818f24:	e0bffb17 	ldw	r2,-20(fp)
  818f28:	1080c00c 	andi	r2,r2,768
  818f2c:	1005003a 	cmpeq	r2,r2,zero
  818f30:	1000991e 	bne	r2,zero,819198 <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  818f34:	e0bffb17 	ldw	r2,-20(fp)
  818f38:	1080400c 	andi	r2,r2,256
  818f3c:	1005003a 	cmpeq	r2,r2,zero
  818f40:	1000481e 	bne	r2,zero,819064 <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  818f44:	00800074 	movhi	r2,1
  818f48:	e0bffa15 	stw	r2,-24(fp)
  818f4c:	00000006 	br	818f50 <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  818f50:	e0bffd17 	ldw	r2,-12(fp)
  818f54:	10800d17 	ldw	r2,52(r2)
  818f58:	10800044 	addi	r2,r2,1
  818f5c:	1081ffcc 	andi	r2,r2,2047
  818f60:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  818f64:	e0bffd17 	ldw	r2,-12(fp)
  818f68:	10c00e17 	ldw	r3,56(r2)
  818f6c:	e0bff917 	ldw	r2,-28(fp)
  818f70:	18802826 	beq	r3,r2,819014 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  818f74:	e0bffc17 	ldw	r2,-16(fp)
  818f78:	10800037 	ldwio	r2,0(r2)
  818f7c:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  818f80:	e0bffa17 	ldw	r2,-24(fp)
  818f84:	10a0000c 	andi	r2,r2,32768
  818f88:	1005003a 	cmpeq	r2,r2,zero
  818f8c:	1000211e 	bne	r2,zero,819014 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  818f90:	e0bffd17 	ldw	r2,-12(fp)
  818f94:	10c00d17 	ldw	r3,52(r2)
  818f98:	e0bffa17 	ldw	r2,-24(fp)
  818f9c:	1009883a 	mov	r4,r2
  818fa0:	e0bffd17 	ldw	r2,-12(fp)
  818fa4:	1885883a 	add	r2,r3,r2
  818fa8:	10801104 	addi	r2,r2,68
  818fac:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  818fb0:	e0bffd17 	ldw	r2,-12(fp)
  818fb4:	10800d17 	ldw	r2,52(r2)
  818fb8:	10800044 	addi	r2,r2,1
  818fbc:	10c1ffcc 	andi	r3,r2,2047
  818fc0:	e0bffd17 	ldw	r2,-12(fp)
  818fc4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  818fc8:	e0bffd17 	ldw	r2,-12(fp)
  818fcc:	10800c17 	ldw	r2,48(r2)
  818fd0:	e0bff615 	stw	r2,-40(fp)
  818fd4:	00800044 	movi	r2,1
  818fd8:	e0bff70d 	sth	r2,-36(fp)
  818fdc:	00800044 	movi	r2,1
  818fe0:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  818fe4:	008020b4 	movhi	r2,130
  818fe8:	10bdf444 	addi	r2,r2,-2095
  818fec:	10800003 	ldbu	r2,0(r2)
  818ff0:	10803fcc 	andi	r2,r2,255
  818ff4:	1005003a 	cmpeq	r2,r2,zero
  818ff8:	103fd51e 	bne	r2,zero,818f50 <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
  818ffc:	e17ff70b 	ldhu	r5,-36(fp)
  819000:	e1bff783 	ldbu	r6,-34(fp)
  819004:	e1fffe04 	addi	r7,fp,-8
  819008:	e13ff617 	ldw	r4,-40(fp)
  81900c:	0813b940 	call	813b94 <OSFlagPost>
    return err;
  819010:	003fcf06 	br	818f50 <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  819014:	e0bffa17 	ldw	r2,-24(fp)
  819018:	10bfffec 	andhi	r2,r2,65535
  81901c:	1005003a 	cmpeq	r2,r2,zero
  819020:	1000101e 	bne	r2,zero,819064 <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  819024:	e0bffd17 	ldw	r2,-12(fp)
  819028:	10c00817 	ldw	r3,32(r2)
  81902c:	00bfff84 	movi	r2,-2
  819030:	1886703a 	and	r3,r3,r2
  819034:	e0bffd17 	ldw	r2,-12(fp)
  819038:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  81903c:	e0bffc17 	ldw	r2,-16(fp)
  819040:	11000104 	addi	r4,r2,4
  819044:	e0bffd17 	ldw	r2,-12(fp)
  819048:	10800817 	ldw	r2,32(r2)
  81904c:	1007883a 	mov	r3,r2
  819050:	2005883a 	mov	r2,r4
  819054:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  819058:	e0bffc17 	ldw	r2,-16(fp)
  81905c:	10800104 	addi	r2,r2,4
  819060:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  819064:	e0bffb17 	ldw	r2,-20(fp)
  819068:	1080800c 	andi	r2,r2,512
  81906c:	1005003a 	cmpeq	r2,r2,zero
  819070:	103fa81e 	bne	r2,zero,818f14 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  819074:	e0bffb17 	ldw	r2,-20(fp)
  819078:	10bfffec 	andhi	r2,r2,65535
  81907c:	1004d43a 	srli	r2,r2,16
  819080:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  819084:	00002706 	br	819124 <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  819088:	e13ffc17 	ldw	r4,-16(fp)
  81908c:	e0bffd17 	ldw	r2,-12(fp)
  819090:	10c01017 	ldw	r3,64(r2)
  819094:	e0bffd17 	ldw	r2,-12(fp)
  819098:	1885883a 	add	r2,r3,r2
  81909c:	10821104 	addi	r2,r2,2116
  8190a0:	10800003 	ldbu	r2,0(r2)
  8190a4:	10c03fcc 	andi	r3,r2,255
  8190a8:	18c0201c 	xori	r3,r3,128
  8190ac:	18ffe004 	addi	r3,r3,-128
  8190b0:	2005883a 	mov	r2,r4
  8190b4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8190b8:	e0bffd17 	ldw	r2,-12(fp)
  8190bc:	10801017 	ldw	r2,64(r2)
  8190c0:	10800044 	addi	r2,r2,1
  8190c4:	10c1ffcc 	andi	r3,r2,2047
  8190c8:	e0bffd17 	ldw	r2,-12(fp)
  8190cc:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  8190d0:	e0bffd17 	ldw	r2,-12(fp)
  8190d4:	10800c17 	ldw	r2,48(r2)
  8190d8:	e0bff415 	stw	r2,-48(fp)
  8190dc:	00800084 	movi	r2,2
  8190e0:	e0bff50d 	sth	r2,-44(fp)
  8190e4:	00800044 	movi	r2,1
  8190e8:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  8190ec:	008020b4 	movhi	r2,130
  8190f0:	10bdf444 	addi	r2,r2,-2095
  8190f4:	10800003 	ldbu	r2,0(r2)
  8190f8:	10803fcc 	andi	r2,r2,255
  8190fc:	1005003a 	cmpeq	r2,r2,zero
  819100:	1000051e 	bne	r2,zero,819118 <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
  819104:	e17ff50b 	ldhu	r5,-44(fp)
  819108:	e1bff583 	ldbu	r6,-42(fp)
  81910c:	e1fffe44 	addi	r7,fp,-7
  819110:	e13ff417 	ldw	r4,-48(fp)
  819114:	0813b940 	call	813b94 <OSFlagPost>

        space--;
  819118:	e0bff817 	ldw	r2,-32(fp)
  81911c:	10bfffc4 	addi	r2,r2,-1
  819120:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  819124:	e0bff817 	ldw	r2,-32(fp)
  819128:	1005003a 	cmpeq	r2,r2,zero
  81912c:	1000051e 	bne	r2,zero,819144 <altera_avalon_jtag_uart_irq+0x25c>
  819130:	e0bffd17 	ldw	r2,-12(fp)
  819134:	10c01017 	ldw	r3,64(r2)
  819138:	e0bffd17 	ldw	r2,-12(fp)
  81913c:	10800f17 	ldw	r2,60(r2)
  819140:	18bfd11e 	bne	r3,r2,819088 <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  819144:	e0bff817 	ldw	r2,-32(fp)
  819148:	1005003a 	cmpeq	r2,r2,zero
  81914c:	103f711e 	bne	r2,zero,818f14 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  819150:	e0bffd17 	ldw	r2,-12(fp)
  819154:	10c00817 	ldw	r3,32(r2)
  819158:	00bfff44 	movi	r2,-3
  81915c:	1886703a 	and	r3,r3,r2
  819160:	e0bffd17 	ldw	r2,-12(fp)
  819164:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  819168:	e0bffd17 	ldw	r2,-12(fp)
  81916c:	10800017 	ldw	r2,0(r2)
  819170:	11000104 	addi	r4,r2,4
  819174:	e0bffd17 	ldw	r2,-12(fp)
  819178:	10800817 	ldw	r2,32(r2)
  81917c:	1007883a 	mov	r3,r2
  819180:	2005883a 	mov	r2,r4
  819184:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  819188:	e0bffc17 	ldw	r2,-16(fp)
  81918c:	10800104 	addi	r2,r2,4
  819190:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  819194:	003f5f06 	br	818f14 <altera_avalon_jtag_uart_irq+0x2c>
}
  819198:	e037883a 	mov	sp,fp
  81919c:	dfc00117 	ldw	ra,4(sp)
  8191a0:	df000017 	ldw	fp,0(sp)
  8191a4:	dec00204 	addi	sp,sp,8
  8191a8:	f800283a 	ret

008191ac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  8191ac:	defff804 	addi	sp,sp,-32
  8191b0:	dfc00715 	stw	ra,28(sp)
  8191b4:	df000615 	stw	fp,24(sp)
  8191b8:	df000604 	addi	fp,sp,24
  8191bc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  8191c0:	e0bfff17 	ldw	r2,-4(fp)
  8191c4:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  8191c8:	e0bffd17 	ldw	r2,-12(fp)
  8191cc:	10800017 	ldw	r2,0(r2)
  8191d0:	10800104 	addi	r2,r2,4
  8191d4:	10800037 	ldwio	r2,0(r2)
  8191d8:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  8191dc:	e0bffc17 	ldw	r2,-16(fp)
  8191e0:	1081000c 	andi	r2,r2,1024
  8191e4:	1005003a 	cmpeq	r2,r2,zero
  8191e8:	10000c1e 	bne	r2,zero,81921c <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  8191ec:	e0bffd17 	ldw	r2,-12(fp)
  8191f0:	10800017 	ldw	r2,0(r2)
  8191f4:	11000104 	addi	r4,r2,4
  8191f8:	e0bffd17 	ldw	r2,-12(fp)
  8191fc:	10800817 	ldw	r2,32(r2)
  819200:	10810014 	ori	r2,r2,1024
  819204:	1007883a 	mov	r3,r2
  819208:	2005883a 	mov	r2,r4
  81920c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  819210:	e0bffd17 	ldw	r2,-12(fp)
  819214:	10000915 	stw	zero,36(r2)
  819218:	00002106 	br	8192a0 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  81921c:	e0bffd17 	ldw	r2,-12(fp)
  819220:	10c00917 	ldw	r3,36(r2)
  819224:	00a00034 	movhi	r2,32768
  819228:	10bfff04 	addi	r2,r2,-4
  81922c:	10c01c36 	bltu	r2,r3,8192a0 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
  819230:	e0bffd17 	ldw	r2,-12(fp)
  819234:	10800917 	ldw	r2,36(r2)
  819238:	10c00044 	addi	r3,r2,1
  81923c:	e0bffd17 	ldw	r2,-12(fp)
  819240:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  819244:	e0bffd17 	ldw	r2,-12(fp)
  819248:	10c00917 	ldw	r3,36(r2)
  81924c:	e0bffd17 	ldw	r2,-12(fp)
  819250:	10800117 	ldw	r2,4(r2)
  819254:	18801236 	bltu	r3,r2,8192a0 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  819258:	e0bffd17 	ldw	r2,-12(fp)
  81925c:	10800c17 	ldw	r2,48(r2)
  819260:	e0bffa15 	stw	r2,-24(fp)
  819264:	00800104 	movi	r2,4
  819268:	e0bffb0d 	sth	r2,-20(fp)
  81926c:	00800044 	movi	r2,1
  819270:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  819274:	008020b4 	movhi	r2,130
  819278:	10bdf444 	addi	r2,r2,-2095
  81927c:	10800003 	ldbu	r2,0(r2)
  819280:	10803fcc 	andi	r2,r2,255
  819284:	1005003a 	cmpeq	r2,r2,zero
  819288:	1000051e 	bne	r2,zero,8192a0 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
  81928c:	e17ffb0b 	ldhu	r5,-20(fp)
  819290:	e1bffb83 	ldbu	r6,-18(fp)
  819294:	e1fffe04 	addi	r7,fp,-8
  819298:	e13ffa17 	ldw	r4,-24(fp)
  81929c:	0813b940 	call	813b94 <OSFlagPost>
  8192a0:	008020b4 	movhi	r2,130
  8192a4:	10be0904 	addi	r2,r2,-2012
  8192a8:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
  8192ac:	e037883a 	mov	sp,fp
  8192b0:	dfc00117 	ldw	ra,4(sp)
  8192b4:	df000017 	ldw	fp,0(sp)
  8192b8:	dec00204 	addi	sp,sp,8
  8192bc:	f800283a 	ret

008192c0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  8192c0:	defffc04 	addi	sp,sp,-16
  8192c4:	df000315 	stw	fp,12(sp)
  8192c8:	df000304 	addi	fp,sp,12
  8192cc:	e13ffd15 	stw	r4,-12(fp)
  8192d0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8192d4:	00000706 	br	8192f4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  8192d8:	e0bffe17 	ldw	r2,-8(fp)
  8192dc:	1090000c 	andi	r2,r2,16384
  8192e0:	1005003a 	cmpeq	r2,r2,zero
  8192e4:	1000031e 	bne	r2,zero,8192f4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  8192e8:	00bffd44 	movi	r2,-11
  8192ec:	e0bfff15 	stw	r2,-4(fp)
  8192f0:	00000b06 	br	819320 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8192f4:	e0bffd17 	ldw	r2,-12(fp)
  8192f8:	10c01017 	ldw	r3,64(r2)
  8192fc:	e0bffd17 	ldw	r2,-12(fp)
  819300:	10800f17 	ldw	r2,60(r2)
  819304:	18800526 	beq	r3,r2,81931c <altera_avalon_jtag_uart_close+0x5c>
  819308:	e0bffd17 	ldw	r2,-12(fp)
  81930c:	10c00917 	ldw	r3,36(r2)
  819310:	e0bffd17 	ldw	r2,-12(fp)
  819314:	10800117 	ldw	r2,4(r2)
  819318:	18bfef36 	bltu	r3,r2,8192d8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  81931c:	e03fff15 	stw	zero,-4(fp)
  819320:	e0bfff17 	ldw	r2,-4(fp)
}
  819324:	e037883a 	mov	sp,fp
  819328:	df000017 	ldw	fp,0(sp)
  81932c:	dec00104 	addi	sp,sp,4
  819330:	f800283a 	ret

00819334 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  819334:	defff804 	addi	sp,sp,-32
  819338:	df000715 	stw	fp,28(sp)
  81933c:	df000704 	addi	fp,sp,28
  819340:	e13ffb15 	stw	r4,-20(fp)
  819344:	e17ffc15 	stw	r5,-16(fp)
  819348:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  81934c:	00bff9c4 	movi	r2,-25
  819350:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  819354:	e0bffc17 	ldw	r2,-16(fp)
  819358:	e0bfff15 	stw	r2,-4(fp)
  81935c:	e0ffff17 	ldw	r3,-4(fp)
  819360:	189a8060 	cmpeqi	r2,r3,27137
  819364:	1000041e 	bne	r2,zero,819378 <altera_avalon_jtag_uart_ioctl+0x44>
  819368:	e0ffff17 	ldw	r3,-4(fp)
  81936c:	189a80a0 	cmpeqi	r2,r3,27138
  819370:	10001b1e 	bne	r2,zero,8193e0 <altera_avalon_jtag_uart_ioctl+0xac>
  819374:	00002706 	br	819414 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  819378:	e0bffb17 	ldw	r2,-20(fp)
  81937c:	10c00117 	ldw	r3,4(r2)
  819380:	00a00034 	movhi	r2,32768
  819384:	10bfffc4 	addi	r2,r2,-1
  819388:	18802226 	beq	r3,r2,819414 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  81938c:	e0bffd17 	ldw	r2,-12(fp)
  819390:	10800017 	ldw	r2,0(r2)
  819394:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  819398:	e0bff917 	ldw	r2,-28(fp)
  81939c:	10800090 	cmplti	r2,r2,2
  8193a0:	1000071e 	bne	r2,zero,8193c0 <altera_avalon_jtag_uart_ioctl+0x8c>
  8193a4:	e0fff917 	ldw	r3,-28(fp)
  8193a8:	00a00034 	movhi	r2,32768
  8193ac:	10bfffc4 	addi	r2,r2,-1
  8193b0:	18800326 	beq	r3,r2,8193c0 <altera_avalon_jtag_uart_ioctl+0x8c>
  8193b4:	e0bff917 	ldw	r2,-28(fp)
  8193b8:	e0bffe15 	stw	r2,-8(fp)
  8193bc:	00000306 	br	8193cc <altera_avalon_jtag_uart_ioctl+0x98>
  8193c0:	00e00034 	movhi	r3,32768
  8193c4:	18ffff84 	addi	r3,r3,-2
  8193c8:	e0fffe15 	stw	r3,-8(fp)
  8193cc:	e0bffb17 	ldw	r2,-20(fp)
  8193d0:	e0fffe17 	ldw	r3,-8(fp)
  8193d4:	10c00115 	stw	r3,4(r2)
      rc = 0;
  8193d8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  8193dc:	00000d06 	br	819414 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  8193e0:	e0bffb17 	ldw	r2,-20(fp)
  8193e4:	10c00117 	ldw	r3,4(r2)
  8193e8:	00a00034 	movhi	r2,32768
  8193ec:	10bfffc4 	addi	r2,r2,-1
  8193f0:	18800826 	beq	r3,r2,819414 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  8193f4:	e13ffd17 	ldw	r4,-12(fp)
  8193f8:	e0bffb17 	ldw	r2,-20(fp)
  8193fc:	10c00917 	ldw	r3,36(r2)
  819400:	e0bffb17 	ldw	r2,-20(fp)
  819404:	10800117 	ldw	r2,4(r2)
  819408:	1885803a 	cmpltu	r2,r3,r2
  81940c:	20800015 	stw	r2,0(r4)
      rc = 0;
  819410:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  819414:	e0bffa17 	ldw	r2,-24(fp)
}
  819418:	e037883a 	mov	sp,fp
  81941c:	df000017 	ldw	fp,0(sp)
  819420:	dec00104 	addi	sp,sp,4
  819424:	f800283a 	ret

00819428 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  819428:	deffeb04 	addi	sp,sp,-84
  81942c:	dfc01415 	stw	ra,80(sp)
  819430:	df001315 	stw	fp,76(sp)
  819434:	df001304 	addi	fp,sp,76
  819438:	e13ffb15 	stw	r4,-20(fp)
  81943c:	e17ffc15 	stw	r5,-16(fp)
  819440:	e1bffd15 	stw	r6,-12(fp)
  819444:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  819448:	e0bffc17 	ldw	r2,-16(fp)
  81944c:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  819450:	e0bffb17 	ldw	r2,-20(fp)
  819454:	10800a17 	ldw	r2,40(r2)
  819458:	e0bff315 	stw	r2,-52(fp)
  81945c:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  819460:	e17ff40b 	ldhu	r5,-48(fp)
  819464:	e1bffa44 	addi	r6,fp,-23
  819468:	e13ff317 	ldw	r4,-52(fp)
  81946c:	08164280 	call	816428 <OSSemPend>

  while (space > 0)
  819470:	00006406 	br	819604 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  819474:	e0bffb17 	ldw	r2,-20(fp)
  819478:	10800d17 	ldw	r2,52(r2)
  81947c:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
  819480:	e0bffb17 	ldw	r2,-20(fp)
  819484:	10800e17 	ldw	r2,56(r2)
  819488:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
  81948c:	e0fff617 	ldw	r3,-40(fp)
  819490:	e0bff517 	ldw	r2,-44(fp)
  819494:	18800536 	bltu	r3,r2,8194ac <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
  819498:	e0bff617 	ldw	r2,-40(fp)
  81949c:	e0fff517 	ldw	r3,-44(fp)
  8194a0:	10c5c83a 	sub	r2,r2,r3
  8194a4:	e0bff715 	stw	r2,-36(fp)
  8194a8:	00000406 	br	8194bc <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  8194ac:	00820004 	movi	r2,2048
  8194b0:	e0fff517 	ldw	r3,-44(fp)
  8194b4:	10c5c83a 	sub	r2,r2,r3
  8194b8:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  8194bc:	e0bff717 	ldw	r2,-36(fp)
  8194c0:	1005003a 	cmpeq	r2,r2,zero
  8194c4:	10001f1e 	bne	r2,zero,819544 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  8194c8:	e0fffd17 	ldw	r3,-12(fp)
  8194cc:	e0bff717 	ldw	r2,-36(fp)
  8194d0:	1880022e 	bgeu	r3,r2,8194dc <altera_avalon_jtag_uart_read+0xb4>
        n = space;
  8194d4:	e0bffd17 	ldw	r2,-12(fp)
  8194d8:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  8194dc:	e0bffb17 	ldw	r2,-20(fp)
  8194e0:	10c01104 	addi	r3,r2,68
  8194e4:	e0bff517 	ldw	r2,-44(fp)
  8194e8:	1887883a 	add	r3,r3,r2
  8194ec:	e0bff917 	ldw	r2,-28(fp)
  8194f0:	1009883a 	mov	r4,r2
  8194f4:	180b883a 	mov	r5,r3
  8194f8:	e1bff717 	ldw	r6,-36(fp)
  8194fc:	080c9a00 	call	80c9a0 <memcpy>
      ptr   += n;
  819500:	e0fff717 	ldw	r3,-36(fp)
  819504:	e0bff917 	ldw	r2,-28(fp)
  819508:	10c5883a 	add	r2,r2,r3
  81950c:	e0bff915 	stw	r2,-28(fp)
      space -= n;
  819510:	e0fffd17 	ldw	r3,-12(fp)
  819514:	e0bff717 	ldw	r2,-36(fp)
  819518:	1885c83a 	sub	r2,r3,r2
  81951c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  819520:	e0fff517 	ldw	r3,-44(fp)
  819524:	e0bff717 	ldw	r2,-36(fp)
  819528:	1885883a 	add	r2,r3,r2
  81952c:	10c1ffcc 	andi	r3,r2,2047
  819530:	e0bffb17 	ldw	r2,-20(fp)
  819534:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  819538:	e0bffd17 	ldw	r2,-12(fp)
  81953c:	10800048 	cmpgei	r2,r2,1
  819540:	103fcc1e 	bne	r2,zero,819474 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
  819544:	e0fff917 	ldw	r3,-28(fp)
  819548:	e0bffc17 	ldw	r2,-16(fp)
  81954c:	1880301e 	bne	r3,r2,819610 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  819550:	e0bffe17 	ldw	r2,-8(fp)
  819554:	1090000c 	andi	r2,r2,16384
  819558:	1004c03a 	cmpne	r2,r2,zero
  81955c:	10002c1e 	bne	r2,zero,819610 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  819560:	008020b4 	movhi	r2,130
  819564:	10bdf444 	addi	r2,r2,-2095
  819568:	10800003 	ldbu	r2,0(r2)
  81956c:	10803fcc 	andi	r2,r2,255
  819570:	10800058 	cmpnei	r2,r2,1
  819574:	1000161e 	bne	r2,zero,8195d0 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  819578:	e0bffb17 	ldw	r2,-20(fp)
  81957c:	10800c17 	ldw	r2,48(r2)
  819580:	e0bff015 	stw	r2,-64(fp)
  819584:	00800144 	movi	r2,5
  819588:	e0bff10d 	sth	r2,-60(fp)
  81958c:	00bfe0c4 	movi	r2,-125
  819590:	e0bff185 	stb	r2,-58(fp)
  819594:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  819598:	008020b4 	movhi	r2,130
  81959c:	10bdf444 	addi	r2,r2,-2095
  8195a0:	10800003 	ldbu	r2,0(r2)
  8195a4:	10803fcc 	andi	r2,r2,255
  8195a8:	1005003a 	cmpeq	r2,r2,zero
  8195ac:	1000111e 	bne	r2,zero,8195f4 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  8195b0:	e17ff10b 	ldhu	r5,-60(fp)
  8195b4:	e1bff183 	ldbu	r6,-58(fp)
  8195b8:	e1fff20b 	ldhu	r7,-56(fp)
  8195bc:	e0bffa04 	addi	r2,fp,-24
  8195c0:	d8800015 	stw	r2,0(sp)
  8195c4:	e13ff017 	ldw	r4,-64(fp)
  8195c8:	08134e80 	call	8134e8 <OSFlagPend>
    return err;
  8195cc:	00000906 	br	8195f4 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  8195d0:	e0bffb17 	ldw	r2,-20(fp)
  8195d4:	10c00d17 	ldw	r3,52(r2)
  8195d8:	e0bff617 	ldw	r2,-40(fp)
  8195dc:	1880051e 	bne	r3,r2,8195f4 <altera_avalon_jtag_uart_read+0x1cc>
  8195e0:	e0bffb17 	ldw	r2,-20(fp)
  8195e4:	10c00917 	ldw	r3,36(r2)
  8195e8:	e0bffb17 	ldw	r2,-20(fp)
  8195ec:	10800117 	ldw	r2,4(r2)
  8195f0:	18bff736 	bltu	r3,r2,8195d0 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  8195f4:	e0bffb17 	ldw	r2,-20(fp)
  8195f8:	10c00d17 	ldw	r3,52(r2)
  8195fc:	e0bff617 	ldw	r2,-40(fp)
  819600:	18800326 	beq	r3,r2,819610 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  819604:	e0bffd17 	ldw	r2,-12(fp)
  819608:	10800048 	cmpgei	r2,r2,1
  81960c:	103f991e 	bne	r2,zero,819474 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  819610:	e0bffb17 	ldw	r2,-20(fp)
  819614:	11000a17 	ldw	r4,40(r2)
  819618:	08168200 	call	816820 <OSSemPost>

  if (ptr != buffer)
  81961c:	e0fff917 	ldw	r3,-28(fp)
  819620:	e0bffc17 	ldw	r2,-16(fp)
  819624:	18801926 	beq	r3,r2,81968c <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819628:	0005303a 	rdctl	r2,status
  81962c:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819630:	e0ffef17 	ldw	r3,-68(fp)
  819634:	00bfff84 	movi	r2,-2
  819638:	1884703a 	and	r2,r3,r2
  81963c:	1001703a 	wrctl	status,r2
  
  return context;
  819640:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  819644:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  819648:	e0bffb17 	ldw	r2,-20(fp)
  81964c:	10800817 	ldw	r2,32(r2)
  819650:	10c00054 	ori	r3,r2,1
  819654:	e0bffb17 	ldw	r2,-20(fp)
  819658:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81965c:	e0bffb17 	ldw	r2,-20(fp)
  819660:	10800017 	ldw	r2,0(r2)
  819664:	11000104 	addi	r4,r2,4
  819668:	e0bffb17 	ldw	r2,-20(fp)
  81966c:	10800817 	ldw	r2,32(r2)
  819670:	1007883a 	mov	r3,r2
  819674:	2005883a 	mov	r2,r4
  819678:	10c00035 	stwio	r3,0(r2)
  81967c:	e0bff817 	ldw	r2,-32(fp)
  819680:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819684:	e0bfee17 	ldw	r2,-72(fp)
  819688:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  81968c:	e0fff917 	ldw	r3,-28(fp)
  819690:	e0bffc17 	ldw	r2,-16(fp)
  819694:	18800526 	beq	r3,r2,8196ac <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
  819698:	e0fff917 	ldw	r3,-28(fp)
  81969c:	e0bffc17 	ldw	r2,-16(fp)
  8196a0:	1887c83a 	sub	r3,r3,r2
  8196a4:	e0ffff15 	stw	r3,-4(fp)
  8196a8:	00000906 	br	8196d0 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  8196ac:	e0bffe17 	ldw	r2,-8(fp)
  8196b0:	1090000c 	andi	r2,r2,16384
  8196b4:	1005003a 	cmpeq	r2,r2,zero
  8196b8:	1000031e 	bne	r2,zero,8196c8 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
  8196bc:	00bffd44 	movi	r2,-11
  8196c0:	e0bfff15 	stw	r2,-4(fp)
  8196c4:	00000206 	br	8196d0 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  8196c8:	00bffec4 	movi	r2,-5
  8196cc:	e0bfff15 	stw	r2,-4(fp)
  8196d0:	e0bfff17 	ldw	r2,-4(fp)
}
  8196d4:	e037883a 	mov	sp,fp
  8196d8:	dfc00117 	ldw	ra,4(sp)
  8196dc:	df000017 	ldw	fp,0(sp)
  8196e0:	dec00204 	addi	sp,sp,8
  8196e4:	f800283a 	ret

008196e8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8196e8:	deffeb04 	addi	sp,sp,-84
  8196ec:	dfc01415 	stw	ra,80(sp)
  8196f0:	df001315 	stw	fp,76(sp)
  8196f4:	df001304 	addi	fp,sp,76
  8196f8:	e13ffb15 	stw	r4,-20(fp)
  8196fc:	e17ffc15 	stw	r5,-16(fp)
  819700:	e1bffd15 	stw	r6,-12(fp)
  819704:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  819708:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  81970c:	e0bffc17 	ldw	r2,-16(fp)
  819710:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  819714:	e0bffb17 	ldw	r2,-20(fp)
  819718:	10800b17 	ldw	r2,44(r2)
  81971c:	e0bff315 	stw	r2,-52(fp)
  819720:	e03ff40d 	sth	zero,-48(fp)
  819724:	e17ff40b 	ldhu	r5,-48(fp)
  819728:	e1bffa04 	addi	r6,fp,-24
  81972c:	e13ff317 	ldw	r4,-52(fp)
  819730:	08164280 	call	816428 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  819734:	00003a06 	br	819820 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  819738:	e0bffb17 	ldw	r2,-20(fp)
  81973c:	10800f17 	ldw	r2,60(r2)
  819740:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  819744:	e0bffb17 	ldw	r2,-20(fp)
  819748:	10801017 	ldw	r2,64(r2)
  81974c:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
  819750:	e0fff917 	ldw	r3,-28(fp)
  819754:	e0bff817 	ldw	r2,-32(fp)
  819758:	1880062e 	bgeu	r3,r2,819774 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
  81975c:	e0fff817 	ldw	r3,-32(fp)
  819760:	e0bff917 	ldw	r2,-28(fp)
  819764:	1885c83a 	sub	r2,r3,r2
  819768:	10bfffc4 	addi	r2,r2,-1
  81976c:	e0bff715 	stw	r2,-36(fp)
  819770:	00000c06 	br	8197a4 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
  819774:	e0bff817 	ldw	r2,-32(fp)
  819778:	1005003a 	cmpeq	r2,r2,zero
  81977c:	1000051e 	bne	r2,zero,819794 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  819780:	00820004 	movi	r2,2048
  819784:	e0fff917 	ldw	r3,-28(fp)
  819788:	10c5c83a 	sub	r2,r2,r3
  81978c:	e0bff715 	stw	r2,-36(fp)
  819790:	00000406 	br	8197a4 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  819794:	0081ffc4 	movi	r2,2047
  819798:	e0fff917 	ldw	r3,-28(fp)
  81979c:	10c5c83a 	sub	r2,r2,r3
  8197a0:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  8197a4:	e0bff717 	ldw	r2,-36(fp)
  8197a8:	1005003a 	cmpeq	r2,r2,zero
  8197ac:	10001f1e 	bne	r2,zero,81982c <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
  8197b0:	e0fffd17 	ldw	r3,-12(fp)
  8197b4:	e0bff717 	ldw	r2,-36(fp)
  8197b8:	1880022e 	bgeu	r3,r2,8197c4 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  8197bc:	e0bffd17 	ldw	r2,-12(fp)
  8197c0:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8197c4:	e0bffb17 	ldw	r2,-20(fp)
  8197c8:	10c21104 	addi	r3,r2,2116
  8197cc:	e0bff917 	ldw	r2,-28(fp)
  8197d0:	1885883a 	add	r2,r3,r2
  8197d4:	e0fffc17 	ldw	r3,-16(fp)
  8197d8:	1009883a 	mov	r4,r2
  8197dc:	180b883a 	mov	r5,r3
  8197e0:	e1bff717 	ldw	r6,-36(fp)
  8197e4:	080c9a00 	call	80c9a0 <memcpy>
      ptr   += n;
  8197e8:	e0fff717 	ldw	r3,-36(fp)
  8197ec:	e0bffc17 	ldw	r2,-16(fp)
  8197f0:	10c5883a 	add	r2,r2,r3
  8197f4:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  8197f8:	e0fffd17 	ldw	r3,-12(fp)
  8197fc:	e0bff717 	ldw	r2,-36(fp)
  819800:	1885c83a 	sub	r2,r3,r2
  819804:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  819808:	e0fff917 	ldw	r3,-28(fp)
  81980c:	e0bff717 	ldw	r2,-36(fp)
  819810:	1885883a 	add	r2,r3,r2
  819814:	10c1ffcc 	andi	r3,r2,2047
  819818:	e0bffb17 	ldw	r2,-20(fp)
  81981c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  819820:	e0bffd17 	ldw	r2,-12(fp)
  819824:	10800048 	cmpgei	r2,r2,1
  819828:	103fc31e 	bne	r2,zero,819738 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81982c:	0005303a 	rdctl	r2,status
  819830:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819834:	e0fff217 	ldw	r3,-56(fp)
  819838:	00bfff84 	movi	r2,-2
  81983c:	1884703a 	and	r2,r3,r2
  819840:	1001703a 	wrctl	status,r2
  
  return context;
  819844:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  819848:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  81984c:	e0bffb17 	ldw	r2,-20(fp)
  819850:	10800817 	ldw	r2,32(r2)
  819854:	10c00094 	ori	r3,r2,2
  819858:	e0bffb17 	ldw	r2,-20(fp)
  81985c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  819860:	e0bffb17 	ldw	r2,-20(fp)
  819864:	10800017 	ldw	r2,0(r2)
  819868:	11000104 	addi	r4,r2,4
  81986c:	e0bffb17 	ldw	r2,-20(fp)
  819870:	10800817 	ldw	r2,32(r2)
  819874:	1007883a 	mov	r3,r2
  819878:	2005883a 	mov	r2,r4
  81987c:	10c00035 	stwio	r3,0(r2)
  819880:	e0bff617 	ldw	r2,-40(fp)
  819884:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819888:	e0bff117 	ldw	r2,-60(fp)
  81988c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  819890:	e0bffd17 	ldw	r2,-12(fp)
  819894:	10800050 	cmplti	r2,r2,1
  819898:	10002d1e 	bne	r2,zero,819950 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
  81989c:	e0bffe17 	ldw	r2,-8(fp)
  8198a0:	1090000c 	andi	r2,r2,16384
  8198a4:	1004c03a 	cmpne	r2,r2,zero
  8198a8:	10002c1e 	bne	r2,zero,81995c <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  8198ac:	008020b4 	movhi	r2,130
  8198b0:	10bdf444 	addi	r2,r2,-2095
  8198b4:	10800003 	ldbu	r2,0(r2)
  8198b8:	10803fcc 	andi	r2,r2,255
  8198bc:	10800058 	cmpnei	r2,r2,1
  8198c0:	1000161e 	bne	r2,zero,81991c <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
  8198c4:	e0bffb17 	ldw	r2,-20(fp)
  8198c8:	10800c17 	ldw	r2,48(r2)
  8198cc:	e0bfee15 	stw	r2,-72(fp)
  8198d0:	00800184 	movi	r2,6
  8198d4:	e0bfef0d 	sth	r2,-68(fp)
  8198d8:	00bfe0c4 	movi	r2,-125
  8198dc:	e0bfef85 	stb	r2,-66(fp)
  8198e0:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  8198e4:	008020b4 	movhi	r2,130
  8198e8:	10bdf444 	addi	r2,r2,-2095
  8198ec:	10800003 	ldbu	r2,0(r2)
  8198f0:	10803fcc 	andi	r2,r2,255
  8198f4:	1005003a 	cmpeq	r2,r2,zero
  8198f8:	1000111e 	bne	r2,zero,819940 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  8198fc:	e17fef0b 	ldhu	r5,-68(fp)
  819900:	e1bfef83 	ldbu	r6,-66(fp)
  819904:	e1fff00b 	ldhu	r7,-64(fp)
  819908:	e0bffa44 	addi	r2,fp,-23
  81990c:	d8800015 	stw	r2,0(sp)
  819910:	e13fee17 	ldw	r4,-72(fp)
  819914:	08134e80 	call	8134e8 <OSFlagPend>
    return err;
  819918:	00000906 	br	819940 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  81991c:	e0bffb17 	ldw	r2,-20(fp)
  819920:	10c01017 	ldw	r3,64(r2)
  819924:	e0bff817 	ldw	r2,-32(fp)
  819928:	1880051e 	bne	r3,r2,819940 <altera_avalon_jtag_uart_write+0x258>
  81992c:	e0bffb17 	ldw	r2,-20(fp)
  819930:	10c00917 	ldw	r3,36(r2)
  819934:	e0bffb17 	ldw	r2,-20(fp)
  819938:	10800117 	ldw	r2,4(r2)
  81993c:	18bff736 	bltu	r3,r2,81991c <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  819940:	e0bffb17 	ldw	r2,-20(fp)
  819944:	10c01017 	ldw	r3,64(r2)
  819948:	e0bff817 	ldw	r2,-32(fp)
  81994c:	18800326 	beq	r3,r2,81995c <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
  819950:	e0bffd17 	ldw	r2,-12(fp)
  819954:	10800048 	cmpgei	r2,r2,1
  819958:	103fb11e 	bne	r2,zero,819820 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  81995c:	e0bffb17 	ldw	r2,-20(fp)
  819960:	11000b17 	ldw	r4,44(r2)
  819964:	08168200 	call	816820 <OSSemPost>

  if (ptr != start)
  819968:	e0fffc17 	ldw	r3,-16(fp)
  81996c:	e0bff517 	ldw	r2,-44(fp)
  819970:	18800526 	beq	r3,r2,819988 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
  819974:	e0fffc17 	ldw	r3,-16(fp)
  819978:	e0bff517 	ldw	r2,-44(fp)
  81997c:	1887c83a 	sub	r3,r3,r2
  819980:	e0ffff15 	stw	r3,-4(fp)
  819984:	00000906 	br	8199ac <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
  819988:	e0bffe17 	ldw	r2,-8(fp)
  81998c:	1090000c 	andi	r2,r2,16384
  819990:	1005003a 	cmpeq	r2,r2,zero
  819994:	1000031e 	bne	r2,zero,8199a4 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
  819998:	00bffd44 	movi	r2,-11
  81999c:	e0bfff15 	stw	r2,-4(fp)
  8199a0:	00000206 	br	8199ac <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
  8199a4:	00bffec4 	movi	r2,-5
  8199a8:	e0bfff15 	stw	r2,-4(fp)
  8199ac:	e0bfff17 	ldw	r2,-4(fp)
}
  8199b0:	e037883a 	mov	sp,fp
  8199b4:	dfc00117 	ldw	ra,4(sp)
  8199b8:	df000017 	ldw	fp,0(sp)
  8199bc:	dec00204 	addi	sp,sp,8
  8199c0:	f800283a 	ret

008199c4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8199c4:	defffa04 	addi	sp,sp,-24
  8199c8:	dfc00515 	stw	ra,20(sp)
  8199cc:	df000415 	stw	fp,16(sp)
  8199d0:	df000404 	addi	fp,sp,16
  8199d4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8199d8:	e0bfff17 	ldw	r2,-4(fp)
  8199dc:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8199e0:	e0bfff17 	ldw	r2,-4(fp)
  8199e4:	10800104 	addi	r2,r2,4
  8199e8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8199ec:	0005303a 	rdctl	r2,status
  8199f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8199f4:	e0fffd17 	ldw	r3,-12(fp)
  8199f8:	00bfff84 	movi	r2,-2
  8199fc:	1884703a 	and	r2,r3,r2
  819a00:	1001703a 	wrctl	status,r2
  
  return context;
  819a04:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  819a08:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  819a0c:	081ace40 	call	81ace4 <alt_tick>
  819a10:	e0bffe17 	ldw	r2,-8(fp)
  819a14:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819a18:	e0bffc17 	ldw	r2,-16(fp)
  819a1c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  819a20:	e037883a 	mov	sp,fp
  819a24:	dfc00117 	ldw	ra,4(sp)
  819a28:	df000017 	ldw	fp,0(sp)
  819a2c:	dec00204 	addi	sp,sp,8
  819a30:	f800283a 	ret

00819a34 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  819a34:	defff804 	addi	sp,sp,-32
  819a38:	dfc00715 	stw	ra,28(sp)
  819a3c:	df000615 	stw	fp,24(sp)
  819a40:	df000604 	addi	fp,sp,24
  819a44:	e13ffc15 	stw	r4,-16(fp)
  819a48:	e17ffd15 	stw	r5,-12(fp)
  819a4c:	e1bffe15 	stw	r6,-8(fp)
  819a50:	e1ffff15 	stw	r7,-4(fp)
  819a54:	e0bfff17 	ldw	r2,-4(fp)
  819a58:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  819a5c:	008020b4 	movhi	r2,130
  819a60:	10be0904 	addi	r2,r2,-2012
  819a64:	10800017 	ldw	r2,0(r2)
  819a68:	1004c03a 	cmpne	r2,r2,zero
  819a6c:	1000041e 	bne	r2,zero,819a80 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  819a70:	00c020b4 	movhi	r3,130
  819a74:	18fe0904 	addi	r3,r3,-2012
  819a78:	e0bffb17 	ldw	r2,-20(fp)
  819a7c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  819a80:	e0bffc17 	ldw	r2,-16(fp)
  819a84:	10800104 	addi	r2,r2,4
  819a88:	1007883a 	mov	r3,r2
  819a8c:	008001c4 	movi	r2,7
  819a90:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  819a94:	d8000015 	stw	zero,0(sp)
  819a98:	e13ffd17 	ldw	r4,-12(fp)
  819a9c:	e17ffe17 	ldw	r5,-8(fp)
  819aa0:	018020b4 	movhi	r6,130
  819aa4:	31a67104 	addi	r6,r6,-26172
  819aa8:	e1fffc17 	ldw	r7,-16(fp)
  819aac:	081a54c0 	call	81a54c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  819ab0:	e037883a 	mov	sp,fp
  819ab4:	dfc00117 	ldw	ra,4(sp)
  819ab8:	df000017 	ldw	fp,0(sp)
  819abc:	dec00204 	addi	sp,sp,8
  819ac0:	f800283a 	ret

00819ac4 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  819ac4:	defffc04 	addi	sp,sp,-16
  819ac8:	df000315 	stw	fp,12(sp)
  819acc:	df000304 	addi	fp,sp,12
  819ad0:	e13ffe15 	stw	r4,-8(fp)
  819ad4:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  819ad8:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  819adc:	e0bfff17 	ldw	r2,-4(fp)
  819ae0:	1004c03a 	cmpne	r2,r2,zero
  819ae4:	1000061e 	bne	r2,zero,819b00 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  819ae8:	e0bffe17 	ldw	r2,-8(fp)
  819aec:	1007883a 	mov	r3,r2
  819af0:	e0bffd03 	ldbu	r2,-12(fp)
  819af4:	10c4b03a 	or	r2,r2,r3
  819af8:	e0bffd05 	stb	r2,-12(fp)
  819afc:	00000806 	br	819b20 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  819b00:	e0bffe17 	ldw	r2,-8(fp)
  819b04:	1007883a 	mov	r3,r2
  819b08:	e0bffd03 	ldbu	r2,-12(fp)
  819b0c:	10c4b03a 	or	r2,r2,r3
  819b10:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  819b14:	e0bffd03 	ldbu	r2,-12(fp)
  819b18:	10801014 	ori	r2,r2,64
  819b1c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  819b20:	e0fffd03 	ldbu	r3,-12(fp)
  819b24:	00bfe004 	movi	r2,-128
  819b28:	1884b03a 	or	r2,r3,r2
  819b2c:	10803fcc 	andi	r2,r2,255
}
  819b30:	e037883a 	mov	sp,fp
  819b34:	df000017 	ldw	fp,0(sp)
  819b38:	dec00104 	addi	sp,sp,4
  819b3c:	f800283a 	ret

00819b40 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  819b40:	defffd04 	addi	sp,sp,-12
  819b44:	df000215 	stw	fp,8(sp)
  819b48:	df000204 	addi	fp,sp,8
  819b4c:	e13ffe15 	stw	r4,-8(fp)
  819b50:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  819b54:	e0bffe17 	ldw	r2,-8(fp)
  819b58:	10800a17 	ldw	r2,40(r2)
  819b5c:	e0ffff03 	ldbu	r3,-4(fp)
  819b60:	10c00025 	stbio	r3,0(r2)
}
  819b64:	e037883a 	mov	sp,fp
  819b68:	df000017 	ldw	fp,0(sp)
  819b6c:	dec00104 	addi	sp,sp,4
  819b70:	f800283a 	ret

00819b74 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  819b74:	defffe04 	addi	sp,sp,-8
  819b78:	df000115 	stw	fp,4(sp)
  819b7c:	df000104 	addi	fp,sp,4
  819b80:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  819b84:	e0bfff17 	ldw	r2,-4(fp)
  819b88:	10800a17 	ldw	r2,40(r2)
  819b8c:	1007883a 	mov	r3,r2
  819b90:	00800044 	movi	r2,1
  819b94:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  819b98:	e037883a 	mov	sp,fp
  819b9c:	df000017 	ldw	fp,0(sp)
  819ba0:	dec00104 	addi	sp,sp,4
  819ba4:	f800283a 	ret

00819ba8 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  819ba8:	defffc04 	addi	sp,sp,-16
  819bac:	dfc00315 	stw	ra,12(sp)
  819bb0:	df000215 	stw	fp,8(sp)
  819bb4:	df000204 	addi	fp,sp,8
  819bb8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  819bbc:	e13fff17 	ldw	r4,-4(fp)
  819bc0:	014020b4 	movhi	r5,130
  819bc4:	2976e104 	addi	r5,r5,-9340
  819bc8:	081a49c0 	call	81a49c <alt_find_dev>
  819bcc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  819bd0:	e0bffe17 	ldw	r2,-8(fp)
}
  819bd4:	e037883a 	mov	sp,fp
  819bd8:	dfc00117 	ldw	ra,4(sp)
  819bdc:	df000017 	ldw	fp,0(sp)
  819be0:	dec00204 	addi	sp,sp,8
  819be4:	f800283a 	ret

00819be8 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  819be8:	defffb04 	addi	sp,sp,-20
  819bec:	df000415 	stw	fp,16(sp)
  819bf0:	df000404 	addi	fp,sp,16
  819bf4:	e13ffd15 	stw	r4,-12(fp)
  819bf8:	e17ffe15 	stw	r5,-8(fp)
  819bfc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  819c00:	e03ffc15 	stw	zero,-16(fp)
  819c04:	00000f06 	br	819c44 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  819c08:	e0bffd17 	ldw	r2,-12(fp)
  819c0c:	10800a17 	ldw	r2,40(r2)
  819c10:	11000044 	addi	r4,r2,1
  819c14:	e0fffc17 	ldw	r3,-16(fp)
  819c18:	e0bffe17 	ldw	r2,-8(fp)
  819c1c:	1885883a 	add	r2,r3,r2
  819c20:	10800003 	ldbu	r2,0(r2)
  819c24:	10c03fcc 	andi	r3,r2,255
  819c28:	18c0201c 	xori	r3,r3,128
  819c2c:	18ffe004 	addi	r3,r3,-128
  819c30:	2005883a 	mov	r2,r4
  819c34:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  819c38:	e0bffc17 	ldw	r2,-16(fp)
  819c3c:	10800044 	addi	r2,r2,1
  819c40:	e0bffc15 	stw	r2,-16(fp)
  819c44:	e0fffc17 	ldw	r3,-16(fp)
  819c48:	e0bfff17 	ldw	r2,-4(fp)
  819c4c:	18bfee36 	bltu	r3,r2,819c08 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  819c50:	e037883a 	mov	sp,fp
  819c54:	df000017 	ldw	fp,0(sp)
  819c58:	dec00104 	addi	sp,sp,4
  819c5c:	f800283a 	ret

00819c60 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  819c60:	defffd04 	addi	sp,sp,-12
  819c64:	df000215 	stw	fp,8(sp)
  819c68:	df000204 	addi	fp,sp,8
  819c6c:	e13ffe15 	stw	r4,-8(fp)
  819c70:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  819c74:	00000d06 	br	819cac <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  819c78:	e0bffe17 	ldw	r2,-8(fp)
  819c7c:	10800a17 	ldw	r2,40(r2)
  819c80:	11000044 	addi	r4,r2,1
  819c84:	e0bfff17 	ldw	r2,-4(fp)
  819c88:	10800003 	ldbu	r2,0(r2)
  819c8c:	10c03fcc 	andi	r3,r2,255
  819c90:	18c0201c 	xori	r3,r3,128
  819c94:	18ffe004 	addi	r3,r3,-128
  819c98:	2005883a 	mov	r2,r4
  819c9c:	10c00025 	stbio	r3,0(r2)
		++ptr;
  819ca0:	e0bfff17 	ldw	r2,-4(fp)
  819ca4:	10800044 	addi	r2,r2,1
  819ca8:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  819cac:	e0bfff17 	ldw	r2,-4(fp)
  819cb0:	10800003 	ldbu	r2,0(r2)
  819cb4:	10803fcc 	andi	r2,r2,255
  819cb8:	1080201c 	xori	r2,r2,128
  819cbc:	10bfe004 	addi	r2,r2,-128
  819cc0:	1004c03a 	cmpne	r2,r2,zero
  819cc4:	103fec1e 	bne	r2,zero,819c78 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  819cc8:	e037883a 	mov	sp,fp
  819ccc:	df000017 	ldw	fp,0(sp)
  819cd0:	dec00104 	addi	sp,sp,4
  819cd4:	f800283a 	ret

00819cd8 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  819cd8:	defffb04 	addi	sp,sp,-20
  819cdc:	dfc00415 	stw	ra,16(sp)
  819ce0:	df000315 	stw	fp,12(sp)
  819ce4:	df000304 	addi	fp,sp,12
  819ce8:	e13ffd15 	stw	r4,-12(fp)
  819cec:	e17ffe15 	stw	r5,-8(fp)
  819cf0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  819cf4:	e0bffd17 	ldw	r2,-12(fp)
  819cf8:	10800017 	ldw	r2,0(r2)
  819cfc:	1009883a 	mov	r4,r2
  819d00:	e1bfff17 	ldw	r6,-4(fp)
  819d04:	e17ffe17 	ldw	r5,-8(fp)
  819d08:	0819be80 	call	819be8 <alt_up_character_lcd_write>
	return 0;
  819d0c:	0005883a 	mov	r2,zero
}
  819d10:	e037883a 	mov	sp,fp
  819d14:	dfc00117 	ldw	ra,4(sp)
  819d18:	df000017 	ldw	fp,0(sp)
  819d1c:	dec00204 	addi	sp,sp,8
  819d20:	f800283a 	ret

00819d24 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  819d24:	defff904 	addi	sp,sp,-28
  819d28:	dfc00615 	stw	ra,24(sp)
  819d2c:	df000515 	stw	fp,20(sp)
  819d30:	df000504 	addi	fp,sp,20
  819d34:	e13ffc15 	stw	r4,-16(fp)
  819d38:	e17ffd15 	stw	r5,-12(fp)
  819d3c:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  819d40:	e0bffd17 	ldw	r2,-12(fp)
  819d44:	10800a28 	cmpgeui	r2,r2,40
  819d48:	1000031e 	bne	r2,zero,819d58 <alt_up_character_lcd_set_cursor_pos+0x34>
  819d4c:	e0bffe17 	ldw	r2,-8(fp)
  819d50:	108000b0 	cmpltui	r2,r2,2
  819d54:	1000031e 	bne	r2,zero,819d64 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  819d58:	00bfffc4 	movi	r2,-1
  819d5c:	e0bfff15 	stw	r2,-4(fp)
  819d60:	00000806 	br	819d84 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  819d64:	e13ffd17 	ldw	r4,-12(fp)
  819d68:	e17ffe17 	ldw	r5,-8(fp)
  819d6c:	0819ac40 	call	819ac4 <get_DDRAM_addr>
  819d70:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  819d74:	e17ffb03 	ldbu	r5,-20(fp)
  819d78:	e13ffc17 	ldw	r4,-16(fp)
  819d7c:	0819b400 	call	819b40 <alt_up_character_lcd_send_cmd>
	return 0;
  819d80:	e03fff15 	stw	zero,-4(fp)
  819d84:	e0bfff17 	ldw	r2,-4(fp)
}
  819d88:	e037883a 	mov	sp,fp
  819d8c:	dfc00117 	ldw	ra,4(sp)
  819d90:	df000017 	ldw	fp,0(sp)
  819d94:	dec00204 	addi	sp,sp,8
  819d98:	f800283a 	ret

00819d9c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  819d9c:	defff904 	addi	sp,sp,-28
  819da0:	dfc00615 	stw	ra,24(sp)
  819da4:	df000515 	stw	fp,20(sp)
  819da8:	df000504 	addi	fp,sp,20
  819dac:	e13ffc15 	stw	r4,-16(fp)
  819db0:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  819db4:	e0bffd17 	ldw	r2,-12(fp)
  819db8:	1005003a 	cmpeq	r2,r2,zero
  819dbc:	10001e1e 	bne	r2,zero,819e38 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  819dc0:	e0bffd17 	ldw	r2,-12(fp)
  819dc4:	10800050 	cmplti	r2,r2,1
  819dc8:	1000031e 	bne	r2,zero,819dd8 <alt_up_character_lcd_shift_cursor+0x3c>
  819dcc:	00800504 	movi	r2,20
  819dd0:	e0bfff05 	stb	r2,-4(fp)
  819dd4:	00000206 	br	819de0 <alt_up_character_lcd_shift_cursor+0x44>
  819dd8:	00c00404 	movi	r3,16
  819ddc:	e0ffff05 	stb	r3,-4(fp)
  819de0:	e0bfff03 	ldbu	r2,-4(fp)
  819de4:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  819de8:	e0fffd17 	ldw	r3,-12(fp)
  819dec:	e0fffe15 	stw	r3,-8(fp)
  819df0:	e0fffe17 	ldw	r3,-8(fp)
  819df4:	1804403a 	cmpge	r2,r3,zero
  819df8:	1000031e 	bne	r2,zero,819e08 <alt_up_character_lcd_shift_cursor+0x6c>
  819dfc:	e0bffe17 	ldw	r2,-8(fp)
  819e00:	0085c83a 	sub	r2,zero,r2
  819e04:	e0bffe15 	stw	r2,-8(fp)
  819e08:	e0fffe17 	ldw	r3,-8(fp)
  819e0c:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  819e10:	00000306 	br	819e20 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  819e14:	e17ffb43 	ldbu	r5,-19(fp)
  819e18:	e13ffc17 	ldw	r4,-16(fp)
  819e1c:	0819b400 	call	819b40 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  819e20:	e0bffb03 	ldbu	r2,-20(fp)
  819e24:	10bfffc4 	addi	r2,r2,-1
  819e28:	e0bffb05 	stb	r2,-20(fp)
  819e2c:	e0bffb03 	ldbu	r2,-20(fp)
  819e30:	10803fd8 	cmpnei	r2,r2,255
  819e34:	103ff71e 	bne	r2,zero,819e14 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  819e38:	e037883a 	mov	sp,fp
  819e3c:	dfc00117 	ldw	ra,4(sp)
  819e40:	df000017 	ldw	fp,0(sp)
  819e44:	dec00204 	addi	sp,sp,8
  819e48:	f800283a 	ret

00819e4c <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  819e4c:	defff904 	addi	sp,sp,-28
  819e50:	dfc00615 	stw	ra,24(sp)
  819e54:	df000515 	stw	fp,20(sp)
  819e58:	df000504 	addi	fp,sp,20
  819e5c:	e13ffc15 	stw	r4,-16(fp)
  819e60:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  819e64:	e0bffd17 	ldw	r2,-12(fp)
  819e68:	1005003a 	cmpeq	r2,r2,zero
  819e6c:	10001e1e 	bne	r2,zero,819ee8 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  819e70:	e0bffd17 	ldw	r2,-12(fp)
  819e74:	10800050 	cmplti	r2,r2,1
  819e78:	1000031e 	bne	r2,zero,819e88 <alt_up_character_lcd_shift_display+0x3c>
  819e7c:	00800704 	movi	r2,28
  819e80:	e0bfff05 	stb	r2,-4(fp)
  819e84:	00000206 	br	819e90 <alt_up_character_lcd_shift_display+0x44>
  819e88:	00c00604 	movi	r3,24
  819e8c:	e0ffff05 	stb	r3,-4(fp)
  819e90:	e0bfff03 	ldbu	r2,-4(fp)
  819e94:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  819e98:	e0fffd17 	ldw	r3,-12(fp)
  819e9c:	e0fffe15 	stw	r3,-8(fp)
  819ea0:	e0fffe17 	ldw	r3,-8(fp)
  819ea4:	1804403a 	cmpge	r2,r3,zero
  819ea8:	1000031e 	bne	r2,zero,819eb8 <alt_up_character_lcd_shift_display+0x6c>
  819eac:	e0bffe17 	ldw	r2,-8(fp)
  819eb0:	0085c83a 	sub	r2,zero,r2
  819eb4:	e0bffe15 	stw	r2,-8(fp)
  819eb8:	e0fffe17 	ldw	r3,-8(fp)
  819ebc:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  819ec0:	00000306 	br	819ed0 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  819ec4:	e17ffb43 	ldbu	r5,-19(fp)
  819ec8:	e13ffc17 	ldw	r4,-16(fp)
  819ecc:	0819b400 	call	819b40 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  819ed0:	e0bffb03 	ldbu	r2,-20(fp)
  819ed4:	10bfffc4 	addi	r2,r2,-1
  819ed8:	e0bffb05 	stb	r2,-20(fp)
  819edc:	e0bffb03 	ldbu	r2,-20(fp)
  819ee0:	10803fd8 	cmpnei	r2,r2,255
  819ee4:	103ff71e 	bne	r2,zero,819ec4 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  819ee8:	e037883a 	mov	sp,fp
  819eec:	dfc00117 	ldw	ra,4(sp)
  819ef0:	df000017 	ldw	fp,0(sp)
  819ef4:	dec00204 	addi	sp,sp,8
  819ef8:	f800283a 	ret

00819efc <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  819efc:	defff904 	addi	sp,sp,-28
  819f00:	dfc00615 	stw	ra,24(sp)
  819f04:	df000515 	stw	fp,20(sp)
  819f08:	df000504 	addi	fp,sp,20
  819f0c:	e13ffc15 	stw	r4,-16(fp)
  819f10:	e17ffd15 	stw	r5,-12(fp)
  819f14:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  819f18:	e0bffd17 	ldw	r2,-12(fp)
  819f1c:	10800a28 	cmpgeui	r2,r2,40
  819f20:	1000031e 	bne	r2,zero,819f30 <alt_up_character_lcd_erase_pos+0x34>
  819f24:	e0bffe17 	ldw	r2,-8(fp)
  819f28:	108000b0 	cmpltui	r2,r2,2
  819f2c:	1000031e 	bne	r2,zero,819f3c <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  819f30:	00bfffc4 	movi	r2,-1
  819f34:	e0bfff15 	stw	r2,-4(fp)
  819f38:	00000e06 	br	819f74 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  819f3c:	e13ffd17 	ldw	r4,-12(fp)
  819f40:	e17ffe17 	ldw	r5,-8(fp)
  819f44:	0819ac40 	call	819ac4 <get_DDRAM_addr>
  819f48:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  819f4c:	e17ffb03 	ldbu	r5,-20(fp)
  819f50:	e13ffc17 	ldw	r4,-16(fp)
  819f54:	0819b400 	call	819b40 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
  819f58:	e0bffc17 	ldw	r2,-16(fp)
  819f5c:	10800a17 	ldw	r2,40(r2)
  819f60:	10800044 	addi	r2,r2,1
  819f64:	1007883a 	mov	r3,r2
  819f68:	00800084 	movi	r2,2
  819f6c:	18800025 	stbio	r2,0(r3)
	return 0;
  819f70:	e03fff15 	stw	zero,-4(fp)
  819f74:	e0bfff17 	ldw	r2,-4(fp)
}
  819f78:	e037883a 	mov	sp,fp
  819f7c:	dfc00117 	ldw	ra,4(sp)
  819f80:	df000017 	ldw	fp,0(sp)
  819f84:	dec00204 	addi	sp,sp,8
  819f88:	f800283a 	ret

00819f8c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  819f8c:	defffd04 	addi	sp,sp,-12
  819f90:	dfc00215 	stw	ra,8(sp)
  819f94:	df000115 	stw	fp,4(sp)
  819f98:	df000104 	addi	fp,sp,4
  819f9c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  819fa0:	e13fff17 	ldw	r4,-4(fp)
  819fa4:	01400304 	movi	r5,12
  819fa8:	0819b400 	call	819b40 <alt_up_character_lcd_send_cmd>
}
  819fac:	e037883a 	mov	sp,fp
  819fb0:	dfc00117 	ldw	ra,4(sp)
  819fb4:	df000017 	ldw	fp,0(sp)
  819fb8:	dec00204 	addi	sp,sp,8
  819fbc:	f800283a 	ret

00819fc0 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  819fc0:	defffd04 	addi	sp,sp,-12
  819fc4:	dfc00215 	stw	ra,8(sp)
  819fc8:	df000115 	stw	fp,4(sp)
  819fcc:	df000104 	addi	fp,sp,4
  819fd0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  819fd4:	e13fff17 	ldw	r4,-4(fp)
  819fd8:	014003c4 	movi	r5,15
  819fdc:	0819b400 	call	819b40 <alt_up_character_lcd_send_cmd>
}
  819fe0:	e037883a 	mov	sp,fp
  819fe4:	dfc00117 	ldw	ra,4(sp)
  819fe8:	df000017 	ldw	fp,0(sp)
  819fec:	dec00204 	addi	sp,sp,8
  819ff0:	f800283a 	ret

00819ff4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  819ff4:	defff404 	addi	sp,sp,-48
  819ff8:	df000b15 	stw	fp,44(sp)
  819ffc:	df000b04 	addi	fp,sp,44
  81a000:	e13ffb15 	stw	r4,-20(fp)
  81a004:	e17ffc15 	stw	r5,-16(fp)
  81a008:	e1bffd15 	stw	r6,-12(fp)
  81a00c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  81a010:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  81a014:	008020b4 	movhi	r2,130
  81a018:	10be0904 	addi	r2,r2,-2012
  81a01c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  81a020:	1005003a 	cmpeq	r2,r2,zero
  81a024:	1000411e 	bne	r2,zero,81a12c <alt_alarm_start+0x138>
  {
    if (alarm)
  81a028:	e0bffb17 	ldw	r2,-20(fp)
  81a02c:	1005003a 	cmpeq	r2,r2,zero
  81a030:	10003b1e 	bne	r2,zero,81a120 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  81a034:	e0fffb17 	ldw	r3,-20(fp)
  81a038:	e0bffd17 	ldw	r2,-12(fp)
  81a03c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  81a040:	e0fffb17 	ldw	r3,-20(fp)
  81a044:	e0bffe17 	ldw	r2,-8(fp)
  81a048:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a04c:	0005303a 	rdctl	r2,status
  81a050:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a054:	e0fff817 	ldw	r3,-32(fp)
  81a058:	00bfff84 	movi	r2,-2
  81a05c:	1884703a 	and	r2,r3,r2
  81a060:	1001703a 	wrctl	status,r2
  
  return context;
  81a064:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  81a068:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  81a06c:	008020b4 	movhi	r2,130
  81a070:	10be0a04 	addi	r2,r2,-2008
  81a074:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  81a078:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  81a07c:	e0fffc17 	ldw	r3,-16(fp)
  81a080:	e0bff917 	ldw	r2,-28(fp)
  81a084:	1885883a 	add	r2,r3,r2
  81a088:	10c00044 	addi	r3,r2,1
  81a08c:	e0bffb17 	ldw	r2,-20(fp)
  81a090:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  81a094:	e0bffb17 	ldw	r2,-20(fp)
  81a098:	10c00217 	ldw	r3,8(r2)
  81a09c:	e0bff917 	ldw	r2,-28(fp)
  81a0a0:	1880042e 	bgeu	r3,r2,81a0b4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  81a0a4:	e0fffb17 	ldw	r3,-20(fp)
  81a0a8:	00800044 	movi	r2,1
  81a0ac:	18800405 	stb	r2,16(r3)
  81a0b0:	00000206 	br	81a0bc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  81a0b4:	e0bffb17 	ldw	r2,-20(fp)
  81a0b8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  81a0bc:	e0fffb17 	ldw	r3,-20(fp)
  81a0c0:	008020b4 	movhi	r2,130
  81a0c4:	10b70604 	addi	r2,r2,-9192
  81a0c8:	e0bff615 	stw	r2,-40(fp)
  81a0cc:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81a0d0:	e0fff717 	ldw	r3,-36(fp)
  81a0d4:	e0bff617 	ldw	r2,-40(fp)
  81a0d8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81a0dc:	e0bff617 	ldw	r2,-40(fp)
  81a0e0:	10c00017 	ldw	r3,0(r2)
  81a0e4:	e0bff717 	ldw	r2,-36(fp)
  81a0e8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81a0ec:	e0bff617 	ldw	r2,-40(fp)
  81a0f0:	10c00017 	ldw	r3,0(r2)
  81a0f4:	e0bff717 	ldw	r2,-36(fp)
  81a0f8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81a0fc:	e0fff617 	ldw	r3,-40(fp)
  81a100:	e0bff717 	ldw	r2,-36(fp)
  81a104:	18800015 	stw	r2,0(r3)
  81a108:	e0bffa17 	ldw	r2,-24(fp)
  81a10c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a110:	e0bff517 	ldw	r2,-44(fp)
  81a114:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  81a118:	e03fff15 	stw	zero,-4(fp)
  81a11c:	00000506 	br	81a134 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  81a120:	00bffa84 	movi	r2,-22
  81a124:	e0bfff15 	stw	r2,-4(fp)
  81a128:	00000206 	br	81a134 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  81a12c:	00bfde84 	movi	r2,-134
  81a130:	e0bfff15 	stw	r2,-4(fp)
  81a134:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  81a138:	e037883a 	mov	sp,fp
  81a13c:	df000017 	ldw	fp,0(sp)
  81a140:	dec00104 	addi	sp,sp,4
  81a144:	f800283a 	ret

0081a148 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  81a148:	defffa04 	addi	sp,sp,-24
  81a14c:	dfc00515 	stw	ra,20(sp)
  81a150:	df000415 	stw	fp,16(sp)
  81a154:	df000404 	addi	fp,sp,16
  81a158:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
  81a15c:	00800244 	movi	r2,9
  81a160:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  81a164:	e13ffc17 	ldw	r4,-16(fp)
  81a168:	014003f4 	movhi	r5,15
  81a16c:	29509004 	addi	r5,r5,16960
  81a170:	0806c3c0 	call	806c3c <__mulsi3>
  81a174:	100b883a 	mov	r5,r2
  81a178:	0100bef4 	movhi	r4,763
  81a17c:	213c2004 	addi	r4,r4,-3968
  81a180:	0806c2c0 	call	806c2c <__udivsi3>
  81a184:	100b883a 	mov	r5,r2
  81a188:	01200034 	movhi	r4,32768
  81a18c:	213fffc4 	addi	r4,r4,-1
  81a190:	0806c2c0 	call	806c2c <__udivsi3>
  81a194:	100b883a 	mov	r5,r2
  81a198:	e13fff17 	ldw	r4,-4(fp)
  81a19c:	0806c2c0 	call	806c2c <__udivsi3>
  81a1a0:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  81a1a4:	e0bffd17 	ldw	r2,-12(fp)
  81a1a8:	1005003a 	cmpeq	r2,r2,zero
  81a1ac:	10002a1e 	bne	r2,zero,81a258 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
  81a1b0:	e03ffe15 	stw	zero,-8(fp)
  81a1b4:	00001706 	br	81a214 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  81a1b8:	00a00034 	movhi	r2,32768
  81a1bc:	10bfffc4 	addi	r2,r2,-1
  81a1c0:	10bfffc4 	addi	r2,r2,-1
  81a1c4:	103ffe1e 	bne	r2,zero,81a1c0 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  81a1c8:	e13ffc17 	ldw	r4,-16(fp)
  81a1cc:	014003f4 	movhi	r5,15
  81a1d0:	29509004 	addi	r5,r5,16960
  81a1d4:	0806c3c0 	call	806c3c <__mulsi3>
  81a1d8:	100b883a 	mov	r5,r2
  81a1dc:	0100bef4 	movhi	r4,763
  81a1e0:	213c2004 	addi	r4,r4,-3968
  81a1e4:	0806c2c0 	call	806c2c <__udivsi3>
  81a1e8:	100b883a 	mov	r5,r2
  81a1ec:	01200034 	movhi	r4,32768
  81a1f0:	213fffc4 	addi	r4,r4,-1
  81a1f4:	0806c2c0 	call	806c2c <__udivsi3>
  81a1f8:	1007883a 	mov	r3,r2
  81a1fc:	e0bfff17 	ldw	r2,-4(fp)
  81a200:	10c5c83a 	sub	r2,r2,r3
  81a204:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  81a208:	e0bffe17 	ldw	r2,-8(fp)
  81a20c:	10800044 	addi	r2,r2,1
  81a210:	e0bffe15 	stw	r2,-8(fp)
  81a214:	e0fffe17 	ldw	r3,-8(fp)
  81a218:	e0bffd17 	ldw	r2,-12(fp)
  81a21c:	18bfe616 	blt	r3,r2,81a1b8 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81a220:	e13ffc17 	ldw	r4,-16(fp)
  81a224:	014003f4 	movhi	r5,15
  81a228:	29509004 	addi	r5,r5,16960
  81a22c:	0806c3c0 	call	806c3c <__mulsi3>
  81a230:	100b883a 	mov	r5,r2
  81a234:	0100bef4 	movhi	r4,763
  81a238:	213c2004 	addi	r4,r4,-3968
  81a23c:	0806c2c0 	call	806c2c <__udivsi3>
  81a240:	1009883a 	mov	r4,r2
  81a244:	e17fff17 	ldw	r5,-4(fp)
  81a248:	0806c3c0 	call	806c3c <__mulsi3>
  81a24c:	10bfffc4 	addi	r2,r2,-1
  81a250:	103ffe1e 	bne	r2,zero,81a24c <alt_busy_sleep+0x104>
  81a254:	00000d06 	br	81a28c <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81a258:	e13ffc17 	ldw	r4,-16(fp)
  81a25c:	014003f4 	movhi	r5,15
  81a260:	29509004 	addi	r5,r5,16960
  81a264:	0806c3c0 	call	806c3c <__mulsi3>
  81a268:	100b883a 	mov	r5,r2
  81a26c:	0100bef4 	movhi	r4,763
  81a270:	213c2004 	addi	r4,r4,-3968
  81a274:	0806c2c0 	call	806c2c <__udivsi3>
  81a278:	1009883a 	mov	r4,r2
  81a27c:	e17fff17 	ldw	r5,-4(fp)
  81a280:	0806c3c0 	call	806c3c <__mulsi3>
  81a284:	10bfffc4 	addi	r2,r2,-1
  81a288:	00bffe16 	blt	zero,r2,81a284 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  81a28c:	0005883a 	mov	r2,zero
}
  81a290:	e037883a 	mov	sp,fp
  81a294:	dfc00117 	ldw	ra,4(sp)
  81a298:	df000017 	ldw	fp,0(sp)
  81a29c:	dec00204 	addi	sp,sp,8
  81a2a0:	f800283a 	ret

0081a2a4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  81a2a4:	deffff04 	addi	sp,sp,-4
  81a2a8:	df000015 	stw	fp,0(sp)
  81a2ac:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  81a2b0:	e037883a 	mov	sp,fp
  81a2b4:	df000017 	ldw	fp,0(sp)
  81a2b8:	dec00104 	addi	sp,sp,4
  81a2bc:	f800283a 	ret

0081a2c0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  81a2c0:	defff904 	addi	sp,sp,-28
  81a2c4:	dfc00615 	stw	ra,24(sp)
  81a2c8:	df000515 	stw	fp,20(sp)
  81a2cc:	df000504 	addi	fp,sp,20
  81a2d0:	e13ffd15 	stw	r4,-12(fp)
  81a2d4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  81a2d8:	e0bffd17 	ldw	r2,-12(fp)
  81a2dc:	1005003a 	cmpeq	r2,r2,zero
  81a2e0:	1000041e 	bne	r2,zero,81a2f4 <alt_dev_llist_insert+0x34>
  81a2e4:	e0bffd17 	ldw	r2,-12(fp)
  81a2e8:	10800217 	ldw	r2,8(r2)
  81a2ec:	1004c03a 	cmpne	r2,r2,zero
  81a2f0:	1000071e 	bne	r2,zero,81a310 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  81a2f4:	081a3740 	call	81a374 <alt_get_errno>
  81a2f8:	1007883a 	mov	r3,r2
  81a2fc:	00800584 	movi	r2,22
  81a300:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  81a304:	00bffa84 	movi	r2,-22
  81a308:	e0bfff15 	stw	r2,-4(fp)
  81a30c:	00001306 	br	81a35c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  81a310:	e0fffd17 	ldw	r3,-12(fp)
  81a314:	e0bffe17 	ldw	r2,-8(fp)
  81a318:	e0bffb15 	stw	r2,-20(fp)
  81a31c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81a320:	e0fffc17 	ldw	r3,-16(fp)
  81a324:	e0bffb17 	ldw	r2,-20(fp)
  81a328:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81a32c:	e0bffb17 	ldw	r2,-20(fp)
  81a330:	10c00017 	ldw	r3,0(r2)
  81a334:	e0bffc17 	ldw	r2,-16(fp)
  81a338:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81a33c:	e0bffb17 	ldw	r2,-20(fp)
  81a340:	10c00017 	ldw	r3,0(r2)
  81a344:	e0bffc17 	ldw	r2,-16(fp)
  81a348:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81a34c:	e0fffb17 	ldw	r3,-20(fp)
  81a350:	e0bffc17 	ldw	r2,-16(fp)
  81a354:	18800015 	stw	r2,0(r3)

  return 0;  
  81a358:	e03fff15 	stw	zero,-4(fp)
  81a35c:	e0bfff17 	ldw	r2,-4(fp)
}
  81a360:	e037883a 	mov	sp,fp
  81a364:	dfc00117 	ldw	ra,4(sp)
  81a368:	df000017 	ldw	fp,0(sp)
  81a36c:	dec00204 	addi	sp,sp,8
  81a370:	f800283a 	ret

0081a374 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81a374:	defffd04 	addi	sp,sp,-12
  81a378:	dfc00215 	stw	ra,8(sp)
  81a37c:	df000115 	stw	fp,4(sp)
  81a380:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81a384:	008020b4 	movhi	r2,130
  81a388:	10b6e404 	addi	r2,r2,-9328
  81a38c:	10800017 	ldw	r2,0(r2)
  81a390:	1005003a 	cmpeq	r2,r2,zero
  81a394:	1000061e 	bne	r2,zero,81a3b0 <alt_get_errno+0x3c>
  81a398:	008020b4 	movhi	r2,130
  81a39c:	10b6e404 	addi	r2,r2,-9328
  81a3a0:	10800017 	ldw	r2,0(r2)
  81a3a4:	103ee83a 	callr	r2
  81a3a8:	e0bfff15 	stw	r2,-4(fp)
  81a3ac:	00000306 	br	81a3bc <alt_get_errno+0x48>
  81a3b0:	008020b4 	movhi	r2,130
  81a3b4:	10bdeb04 	addi	r2,r2,-2132
  81a3b8:	e0bfff15 	stw	r2,-4(fp)
  81a3bc:	e0bfff17 	ldw	r2,-4(fp)
}
  81a3c0:	e037883a 	mov	sp,fp
  81a3c4:	dfc00117 	ldw	ra,4(sp)
  81a3c8:	df000017 	ldw	fp,0(sp)
  81a3cc:	dec00204 	addi	sp,sp,8
  81a3d0:	f800283a 	ret

0081a3d4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  81a3d4:	defffd04 	addi	sp,sp,-12
  81a3d8:	dfc00215 	stw	ra,8(sp)
  81a3dc:	df000115 	stw	fp,4(sp)
  81a3e0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81a3e4:	00bfff04 	movi	r2,-4
  81a3e8:	00c020b4 	movhi	r3,130
  81a3ec:	18ee4e04 	addi	r3,r3,-18120
  81a3f0:	1885883a 	add	r2,r3,r2
  81a3f4:	e0bfff15 	stw	r2,-4(fp)
  81a3f8:	00000606 	br	81a414 <_do_ctors+0x40>
        (*ctor) (); 
  81a3fc:	e0bfff17 	ldw	r2,-4(fp)
  81a400:	10800017 	ldw	r2,0(r2)
  81a404:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81a408:	e0bfff17 	ldw	r2,-4(fp)
  81a40c:	10bfff04 	addi	r2,r2,-4
  81a410:	e0bfff15 	stw	r2,-4(fp)
  81a414:	e0ffff17 	ldw	r3,-4(fp)
  81a418:	008020b4 	movhi	r2,130
  81a41c:	10ae4d04 	addi	r2,r2,-18124
  81a420:	18bff62e 	bgeu	r3,r2,81a3fc <_do_ctors+0x28>
        (*ctor) (); 
}
  81a424:	e037883a 	mov	sp,fp
  81a428:	dfc00117 	ldw	ra,4(sp)
  81a42c:	df000017 	ldw	fp,0(sp)
  81a430:	dec00204 	addi	sp,sp,8
  81a434:	f800283a 	ret

0081a438 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  81a438:	defffd04 	addi	sp,sp,-12
  81a43c:	dfc00215 	stw	ra,8(sp)
  81a440:	df000115 	stw	fp,4(sp)
  81a444:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81a448:	00bfff04 	movi	r2,-4
  81a44c:	00c020b4 	movhi	r3,130
  81a450:	18ee4e04 	addi	r3,r3,-18120
  81a454:	1885883a 	add	r2,r3,r2
  81a458:	e0bfff15 	stw	r2,-4(fp)
  81a45c:	00000606 	br	81a478 <_do_dtors+0x40>
        (*dtor) (); 
  81a460:	e0bfff17 	ldw	r2,-4(fp)
  81a464:	10800017 	ldw	r2,0(r2)
  81a468:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81a46c:	e0bfff17 	ldw	r2,-4(fp)
  81a470:	10bfff04 	addi	r2,r2,-4
  81a474:	e0bfff15 	stw	r2,-4(fp)
  81a478:	e0ffff17 	ldw	r3,-4(fp)
  81a47c:	008020b4 	movhi	r2,130
  81a480:	10ae4e04 	addi	r2,r2,-18120
  81a484:	18bff62e 	bgeu	r3,r2,81a460 <_do_dtors+0x28>
        (*dtor) (); 
}
  81a488:	e037883a 	mov	sp,fp
  81a48c:	dfc00117 	ldw	ra,4(sp)
  81a490:	df000017 	ldw	fp,0(sp)
  81a494:	dec00204 	addi	sp,sp,8
  81a498:	f800283a 	ret

0081a49c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  81a49c:	defff904 	addi	sp,sp,-28
  81a4a0:	dfc00615 	stw	ra,24(sp)
  81a4a4:	df000515 	stw	fp,20(sp)
  81a4a8:	df000504 	addi	fp,sp,20
  81a4ac:	e13ffd15 	stw	r4,-12(fp)
  81a4b0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  81a4b4:	e0bffe17 	ldw	r2,-8(fp)
  81a4b8:	10800017 	ldw	r2,0(r2)
  81a4bc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  81a4c0:	e13ffd17 	ldw	r4,-12(fp)
  81a4c4:	08076bc0 	call	8076bc <strlen>
  81a4c8:	10800044 	addi	r2,r2,1
  81a4cc:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81a4d0:	00000d06 	br	81a508 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  81a4d4:	e0bffc17 	ldw	r2,-16(fp)
  81a4d8:	11000217 	ldw	r4,8(r2)
  81a4dc:	e1bffb17 	ldw	r6,-20(fp)
  81a4e0:	e17ffd17 	ldw	r5,-12(fp)
  81a4e4:	081b56c0 	call	81b56c <memcmp>
  81a4e8:	1004c03a 	cmpne	r2,r2,zero
  81a4ec:	1000031e 	bne	r2,zero,81a4fc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  81a4f0:	e0bffc17 	ldw	r2,-16(fp)
  81a4f4:	e0bfff15 	stw	r2,-4(fp)
  81a4f8:	00000706 	br	81a518 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  81a4fc:	e0bffc17 	ldw	r2,-16(fp)
  81a500:	10800017 	ldw	r2,0(r2)
  81a504:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81a508:	e0fffe17 	ldw	r3,-8(fp)
  81a50c:	e0bffc17 	ldw	r2,-16(fp)
  81a510:	10fff01e 	bne	r2,r3,81a4d4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  81a514:	e03fff15 	stw	zero,-4(fp)
  81a518:	e0bfff17 	ldw	r2,-4(fp)
}
  81a51c:	e037883a 	mov	sp,fp
  81a520:	dfc00117 	ldw	ra,4(sp)
  81a524:	df000017 	ldw	fp,0(sp)
  81a528:	dec00204 	addi	sp,sp,8
  81a52c:	f800283a 	ret

0081a530 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  81a530:	deffff04 	addi	sp,sp,-4
  81a534:	df000015 	stw	fp,0(sp)
  81a538:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  81a53c:	e037883a 	mov	sp,fp
  81a540:	df000017 	ldw	fp,0(sp)
  81a544:	dec00104 	addi	sp,sp,4
  81a548:	f800283a 	ret

0081a54c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  81a54c:	defff904 	addi	sp,sp,-28
  81a550:	dfc00615 	stw	ra,24(sp)
  81a554:	df000515 	stw	fp,20(sp)
  81a558:	df000504 	addi	fp,sp,20
  81a55c:	e13ffc15 	stw	r4,-16(fp)
  81a560:	e17ffd15 	stw	r5,-12(fp)
  81a564:	e1bffe15 	stw	r6,-8(fp)
  81a568:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  81a56c:	e0800217 	ldw	r2,8(fp)
  81a570:	d8800015 	stw	r2,0(sp)
  81a574:	e13ffc17 	ldw	r4,-16(fp)
  81a578:	e17ffd17 	ldw	r5,-12(fp)
  81a57c:	e1bffe17 	ldw	r6,-8(fp)
  81a580:	e1ffff17 	ldw	r7,-4(fp)
  81a584:	081a7200 	call	81a720 <alt_iic_isr_register>
}  
  81a588:	e037883a 	mov	sp,fp
  81a58c:	dfc00117 	ldw	ra,4(sp)
  81a590:	df000017 	ldw	fp,0(sp)
  81a594:	dec00204 	addi	sp,sp,8
  81a598:	f800283a 	ret

0081a59c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  81a59c:	defff904 	addi	sp,sp,-28
  81a5a0:	df000615 	stw	fp,24(sp)
  81a5a4:	df000604 	addi	fp,sp,24
  81a5a8:	e13ffe15 	stw	r4,-8(fp)
  81a5ac:	e17fff15 	stw	r5,-4(fp)
  81a5b0:	e0bfff17 	ldw	r2,-4(fp)
  81a5b4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a5b8:	0005303a 	rdctl	r2,status
  81a5bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a5c0:	e0fffb17 	ldw	r3,-20(fp)
  81a5c4:	00bfff84 	movi	r2,-2
  81a5c8:	1884703a 	and	r2,r3,r2
  81a5cc:	1001703a 	wrctl	status,r2
  
  return context;
  81a5d0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81a5d4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  81a5d8:	e0fffc17 	ldw	r3,-16(fp)
  81a5dc:	00800044 	movi	r2,1
  81a5e0:	10c4983a 	sll	r2,r2,r3
  81a5e4:	1007883a 	mov	r3,r2
  81a5e8:	008020b4 	movhi	r2,130
  81a5ec:	10be0804 	addi	r2,r2,-2016
  81a5f0:	10800017 	ldw	r2,0(r2)
  81a5f4:	1886b03a 	or	r3,r3,r2
  81a5f8:	008020b4 	movhi	r2,130
  81a5fc:	10be0804 	addi	r2,r2,-2016
  81a600:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81a604:	008020b4 	movhi	r2,130
  81a608:	10be0804 	addi	r2,r2,-2016
  81a60c:	10800017 	ldw	r2,0(r2)
  81a610:	100170fa 	wrctl	ienable,r2
  81a614:	e0bffd17 	ldw	r2,-12(fp)
  81a618:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a61c:	e0bffa17 	ldw	r2,-24(fp)
  81a620:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81a624:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  81a628:	e037883a 	mov	sp,fp
  81a62c:	df000017 	ldw	fp,0(sp)
  81a630:	dec00104 	addi	sp,sp,4
  81a634:	f800283a 	ret

0081a638 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  81a638:	defff904 	addi	sp,sp,-28
  81a63c:	df000615 	stw	fp,24(sp)
  81a640:	df000604 	addi	fp,sp,24
  81a644:	e13ffe15 	stw	r4,-8(fp)
  81a648:	e17fff15 	stw	r5,-4(fp)
  81a64c:	e0bfff17 	ldw	r2,-4(fp)
  81a650:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a654:	0005303a 	rdctl	r2,status
  81a658:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a65c:	e0fffb17 	ldw	r3,-20(fp)
  81a660:	00bfff84 	movi	r2,-2
  81a664:	1884703a 	and	r2,r3,r2
  81a668:	1001703a 	wrctl	status,r2
  
  return context;
  81a66c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81a670:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  81a674:	e0fffc17 	ldw	r3,-16(fp)
  81a678:	00800044 	movi	r2,1
  81a67c:	10c4983a 	sll	r2,r2,r3
  81a680:	0084303a 	nor	r2,zero,r2
  81a684:	1007883a 	mov	r3,r2
  81a688:	008020b4 	movhi	r2,130
  81a68c:	10be0804 	addi	r2,r2,-2016
  81a690:	10800017 	ldw	r2,0(r2)
  81a694:	1886703a 	and	r3,r3,r2
  81a698:	008020b4 	movhi	r2,130
  81a69c:	10be0804 	addi	r2,r2,-2016
  81a6a0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81a6a4:	008020b4 	movhi	r2,130
  81a6a8:	10be0804 	addi	r2,r2,-2016
  81a6ac:	10800017 	ldw	r2,0(r2)
  81a6b0:	100170fa 	wrctl	ienable,r2
  81a6b4:	e0bffd17 	ldw	r2,-12(fp)
  81a6b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a6bc:	e0bffa17 	ldw	r2,-24(fp)
  81a6c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81a6c4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  81a6c8:	e037883a 	mov	sp,fp
  81a6cc:	df000017 	ldw	fp,0(sp)
  81a6d0:	dec00104 	addi	sp,sp,4
  81a6d4:	f800283a 	ret

0081a6d8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  81a6d8:	defffc04 	addi	sp,sp,-16
  81a6dc:	df000315 	stw	fp,12(sp)
  81a6e0:	df000304 	addi	fp,sp,12
  81a6e4:	e13ffe15 	stw	r4,-8(fp)
  81a6e8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  81a6ec:	000530fa 	rdctl	r2,ienable
  81a6f0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  81a6f4:	e0ffff17 	ldw	r3,-4(fp)
  81a6f8:	00800044 	movi	r2,1
  81a6fc:	10c4983a 	sll	r2,r2,r3
  81a700:	1007883a 	mov	r3,r2
  81a704:	e0bffd17 	ldw	r2,-12(fp)
  81a708:	1884703a 	and	r2,r3,r2
  81a70c:	1004c03a 	cmpne	r2,r2,zero
}
  81a710:	e037883a 	mov	sp,fp
  81a714:	df000017 	ldw	fp,0(sp)
  81a718:	dec00104 	addi	sp,sp,4
  81a71c:	f800283a 	ret

0081a720 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  81a720:	defff404 	addi	sp,sp,-48
  81a724:	dfc00b15 	stw	ra,44(sp)
  81a728:	df000a15 	stw	fp,40(sp)
  81a72c:	df000a04 	addi	fp,sp,40
  81a730:	e13ffb15 	stw	r4,-20(fp)
  81a734:	e17ffc15 	stw	r5,-16(fp)
  81a738:	e1bffd15 	stw	r6,-12(fp)
  81a73c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  81a740:	00bffa84 	movi	r2,-22
  81a744:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  81a748:	e0bffc17 	ldw	r2,-16(fp)
  81a74c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  81a750:	e0bff917 	ldw	r2,-28(fp)
  81a754:	10800808 	cmpgei	r2,r2,32
  81a758:	1000291e 	bne	r2,zero,81a800 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a75c:	0005303a 	rdctl	r2,status
  81a760:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a764:	e0fff717 	ldw	r3,-36(fp)
  81a768:	00bfff84 	movi	r2,-2
  81a76c:	1884703a 	and	r2,r3,r2
  81a770:	1001703a 	wrctl	status,r2
  
  return context;
  81a774:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  81a778:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  81a77c:	e0bff917 	ldw	r2,-28(fp)
  81a780:	00c020b4 	movhi	r3,130
  81a784:	18da9e04 	addi	r3,r3,27256
  81a788:	100490fa 	slli	r2,r2,3
  81a78c:	10c7883a 	add	r3,r2,r3
  81a790:	e0bffd17 	ldw	r2,-12(fp)
  81a794:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  81a798:	e0bff917 	ldw	r2,-28(fp)
  81a79c:	00c020b4 	movhi	r3,130
  81a7a0:	18da9e04 	addi	r3,r3,27256
  81a7a4:	100490fa 	slli	r2,r2,3
  81a7a8:	10c5883a 	add	r2,r2,r3
  81a7ac:	10c00104 	addi	r3,r2,4
  81a7b0:	e0bffe17 	ldw	r2,-8(fp)
  81a7b4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  81a7b8:	e0bffd17 	ldw	r2,-12(fp)
  81a7bc:	1005003a 	cmpeq	r2,r2,zero
  81a7c0:	1000051e 	bne	r2,zero,81a7d8 <alt_iic_isr_register+0xb8>
  81a7c4:	e17ff917 	ldw	r5,-28(fp)
  81a7c8:	e13ffb17 	ldw	r4,-20(fp)
  81a7cc:	081a59c0 	call	81a59c <alt_ic_irq_enable>
  81a7d0:	e0bfff15 	stw	r2,-4(fp)
  81a7d4:	00000406 	br	81a7e8 <alt_iic_isr_register+0xc8>
  81a7d8:	e17ff917 	ldw	r5,-28(fp)
  81a7dc:	e13ffb17 	ldw	r4,-20(fp)
  81a7e0:	081a6380 	call	81a638 <alt_ic_irq_disable>
  81a7e4:	e0bfff15 	stw	r2,-4(fp)
  81a7e8:	e0bfff17 	ldw	r2,-4(fp)
  81a7ec:	e0bffa15 	stw	r2,-24(fp)
  81a7f0:	e0bff817 	ldw	r2,-32(fp)
  81a7f4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a7f8:	e0bff617 	ldw	r2,-40(fp)
  81a7fc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  81a800:	e0bffa17 	ldw	r2,-24(fp)
}
  81a804:	e037883a 	mov	sp,fp
  81a808:	dfc00117 	ldw	ra,4(sp)
  81a80c:	df000017 	ldw	fp,0(sp)
  81a810:	dec00204 	addi	sp,sp,8
  81a814:	f800283a 	ret

0081a818 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  81a818:	defff804 	addi	sp,sp,-32
  81a81c:	dfc00715 	stw	ra,28(sp)
  81a820:	df000615 	stw	fp,24(sp)
  81a824:	dc000515 	stw	r16,20(sp)
  81a828:	df000504 	addi	fp,sp,20
  81a82c:	e13ffc15 	stw	r4,-16(fp)
  81a830:	e17ffd15 	stw	r5,-12(fp)
  81a834:	e1bffe15 	stw	r6,-8(fp)
  81a838:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  81a83c:	e13ffd17 	ldw	r4,-12(fp)
  81a840:	e17ffe17 	ldw	r5,-8(fp)
  81a844:	e1bfff17 	ldw	r6,-4(fp)
  81a848:	081aa600 	call	81aa60 <open>
  81a84c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  81a850:	e0bffb17 	ldw	r2,-20(fp)
  81a854:	1004803a 	cmplt	r2,r2,zero
  81a858:	10001f1e 	bne	r2,zero,81a8d8 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  81a85c:	e13ffb17 	ldw	r4,-20(fp)
  81a860:	040020b4 	movhi	r16,130
  81a864:	84323a04 	addi	r16,r16,-14104
  81a868:	01400304 	movi	r5,12
  81a86c:	0806c3c0 	call	806c3c <__mulsi3>
  81a870:	1405883a 	add	r2,r2,r16
  81a874:	10c00017 	ldw	r3,0(r2)
  81a878:	e0bffc17 	ldw	r2,-16(fp)
  81a87c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  81a880:	e13ffb17 	ldw	r4,-20(fp)
  81a884:	040020b4 	movhi	r16,130
  81a888:	84323a04 	addi	r16,r16,-14104
  81a88c:	01400304 	movi	r5,12
  81a890:	0806c3c0 	call	806c3c <__mulsi3>
  81a894:	1405883a 	add	r2,r2,r16
  81a898:	10800104 	addi	r2,r2,4
  81a89c:	10c00017 	ldw	r3,0(r2)
  81a8a0:	e0bffc17 	ldw	r2,-16(fp)
  81a8a4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81a8a8:	e13ffb17 	ldw	r4,-20(fp)
  81a8ac:	040020b4 	movhi	r16,130
  81a8b0:	84323a04 	addi	r16,r16,-14104
  81a8b4:	01400304 	movi	r5,12
  81a8b8:	0806c3c0 	call	806c3c <__mulsi3>
  81a8bc:	1405883a 	add	r2,r2,r16
  81a8c0:	10800204 	addi	r2,r2,8
  81a8c4:	10c00017 	ldw	r3,0(r2)
  81a8c8:	e0bffc17 	ldw	r2,-16(fp)
  81a8cc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  81a8d0:	e13ffb17 	ldw	r4,-20(fp)
  81a8d4:	08101cc0 	call	8101cc <alt_release_fd>
  }
} 
  81a8d8:	e037883a 	mov	sp,fp
  81a8dc:	dfc00217 	ldw	ra,8(sp)
  81a8e0:	df000117 	ldw	fp,4(sp)
  81a8e4:	dc000017 	ldw	r16,0(sp)
  81a8e8:	dec00304 	addi	sp,sp,12
  81a8ec:	f800283a 	ret

0081a8f0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  81a8f0:	defffb04 	addi	sp,sp,-20
  81a8f4:	dfc00415 	stw	ra,16(sp)
  81a8f8:	df000315 	stw	fp,12(sp)
  81a8fc:	df000304 	addi	fp,sp,12
  81a900:	e13ffd15 	stw	r4,-12(fp)
  81a904:	e17ffe15 	stw	r5,-8(fp)
  81a908:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  81a90c:	010020b4 	movhi	r4,130
  81a910:	21323d04 	addi	r4,r4,-14092
  81a914:	e17ffd17 	ldw	r5,-12(fp)
  81a918:	01800044 	movi	r6,1
  81a91c:	01c07fc4 	movi	r7,511
  81a920:	081a8180 	call	81a818 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  81a924:	010020b4 	movhi	r4,130
  81a928:	21323a04 	addi	r4,r4,-14104
  81a92c:	e17ffe17 	ldw	r5,-8(fp)
  81a930:	000d883a 	mov	r6,zero
  81a934:	01c07fc4 	movi	r7,511
  81a938:	081a8180 	call	81a818 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  81a93c:	010020b4 	movhi	r4,130
  81a940:	21324004 	addi	r4,r4,-14080
  81a944:	e17fff17 	ldw	r5,-4(fp)
  81a948:	01800044 	movi	r6,1
  81a94c:	01c07fc4 	movi	r7,511
  81a950:	081a8180 	call	81a818 <alt_open_fd>
}  
  81a954:	e037883a 	mov	sp,fp
  81a958:	dfc00117 	ldw	ra,4(sp)
  81a95c:	df000017 	ldw	fp,0(sp)
  81a960:	dec00204 	addi	sp,sp,8
  81a964:	f800283a 	ret

0081a968 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  81a968:	defffa04 	addi	sp,sp,-24
  81a96c:	dfc00515 	stw	ra,20(sp)
  81a970:	df000415 	stw	fp,16(sp)
  81a974:	dc000315 	stw	r16,12(sp)
  81a978:	df000304 	addi	fp,sp,12
  81a97c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  81a980:	e0bffe17 	ldw	r2,-8(fp)
  81a984:	10800217 	ldw	r2,8(r2)
  81a988:	10d00034 	orhi	r3,r2,16384
  81a98c:	e0bffe17 	ldw	r2,-8(fp)
  81a990:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81a994:	e03ffd15 	stw	zero,-12(fp)
  81a998:	00002306 	br	81aa28 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81a99c:	e13ffd17 	ldw	r4,-12(fp)
  81a9a0:	040020b4 	movhi	r16,130
  81a9a4:	84323a04 	addi	r16,r16,-14104
  81a9a8:	01400304 	movi	r5,12
  81a9ac:	0806c3c0 	call	806c3c <__mulsi3>
  81a9b0:	1405883a 	add	r2,r2,r16
  81a9b4:	10c00017 	ldw	r3,0(r2)
  81a9b8:	e0bffe17 	ldw	r2,-8(fp)
  81a9bc:	10800017 	ldw	r2,0(r2)
  81a9c0:	1880161e 	bne	r3,r2,81aa1c <alt_file_locked+0xb4>
  81a9c4:	e13ffd17 	ldw	r4,-12(fp)
  81a9c8:	040020b4 	movhi	r16,130
  81a9cc:	84323a04 	addi	r16,r16,-14104
  81a9d0:	01400304 	movi	r5,12
  81a9d4:	0806c3c0 	call	806c3c <__mulsi3>
  81a9d8:	1405883a 	add	r2,r2,r16
  81a9dc:	10800204 	addi	r2,r2,8
  81a9e0:	10800017 	ldw	r2,0(r2)
  81a9e4:	1004403a 	cmpge	r2,r2,zero
  81a9e8:	10000c1e 	bne	r2,zero,81aa1c <alt_file_locked+0xb4>
  81a9ec:	e13ffd17 	ldw	r4,-12(fp)
  81a9f0:	01400304 	movi	r5,12
  81a9f4:	0806c3c0 	call	806c3c <__mulsi3>
  81a9f8:	1007883a 	mov	r3,r2
  81a9fc:	008020b4 	movhi	r2,130
  81aa00:	10b23a04 	addi	r2,r2,-14104
  81aa04:	1887883a 	add	r3,r3,r2
  81aa08:	e0bffe17 	ldw	r2,-8(fp)
  81aa0c:	18800326 	beq	r3,r2,81aa1c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  81aa10:	00bffcc4 	movi	r2,-13
  81aa14:	e0bfff15 	stw	r2,-4(fp)
  81aa18:	00000a06 	br	81aa44 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81aa1c:	e0bffd17 	ldw	r2,-12(fp)
  81aa20:	10800044 	addi	r2,r2,1
  81aa24:	e0bffd15 	stw	r2,-12(fp)
  81aa28:	008020b4 	movhi	r2,130
  81aa2c:	10b6e304 	addi	r2,r2,-9332
  81aa30:	10800017 	ldw	r2,0(r2)
  81aa34:	1007883a 	mov	r3,r2
  81aa38:	e0bffd17 	ldw	r2,-12(fp)
  81aa3c:	18bfd72e 	bgeu	r3,r2,81a99c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  81aa40:	e03fff15 	stw	zero,-4(fp)
  81aa44:	e0bfff17 	ldw	r2,-4(fp)
}
  81aa48:	e037883a 	mov	sp,fp
  81aa4c:	dfc00217 	ldw	ra,8(sp)
  81aa50:	df000117 	ldw	fp,4(sp)
  81aa54:	dc000017 	ldw	r16,0(sp)
  81aa58:	dec00304 	addi	sp,sp,12
  81aa5c:	f800283a 	ret

0081aa60 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  81aa60:	defff404 	addi	sp,sp,-48
  81aa64:	dfc00b15 	stw	ra,44(sp)
  81aa68:	df000a15 	stw	fp,40(sp)
  81aa6c:	df000a04 	addi	fp,sp,40
  81aa70:	e13ffb15 	stw	r4,-20(fp)
  81aa74:	e17ffc15 	stw	r5,-16(fp)
  81aa78:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  81aa7c:	00bfffc4 	movi	r2,-1
  81aa80:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  81aa84:	00bffb44 	movi	r2,-19
  81aa88:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  81aa8c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  81aa90:	e13ffb17 	ldw	r4,-20(fp)
  81aa94:	014020b4 	movhi	r5,130
  81aa98:	2976e104 	addi	r5,r5,-9340
  81aa9c:	081a49c0 	call	81a49c <alt_find_dev>
  81aaa0:	e0bffa15 	stw	r2,-24(fp)
  81aaa4:	e0bffa17 	ldw	r2,-24(fp)
  81aaa8:	1004c03a 	cmpne	r2,r2,zero
  81aaac:	1000051e 	bne	r2,zero,81aac4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  81aab0:	e13ffb17 	ldw	r4,-20(fp)
  81aab4:	081b2fc0 	call	81b2fc <alt_find_file>
  81aab8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  81aabc:	00800044 	movi	r2,1
  81aac0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  81aac4:	e0bffa17 	ldw	r2,-24(fp)
  81aac8:	1005003a 	cmpeq	r2,r2,zero
  81aacc:	1000311e 	bne	r2,zero,81ab94 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  81aad0:	e13ffa17 	ldw	r4,-24(fp)
  81aad4:	081b41c0 	call	81b41c <alt_get_fd>
  81aad8:	e0bff815 	stw	r2,-32(fp)
  81aadc:	e0bff817 	ldw	r2,-32(fp)
  81aae0:	1004403a 	cmpge	r2,r2,zero
  81aae4:	1000031e 	bne	r2,zero,81aaf4 <open+0x94>
    {
      status = index;
  81aae8:	e0bff817 	ldw	r2,-32(fp)
  81aaec:	e0bff715 	stw	r2,-36(fp)
  81aaf0:	00002a06 	br	81ab9c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  81aaf4:	e13ff817 	ldw	r4,-32(fp)
  81aaf8:	01400304 	movi	r5,12
  81aafc:	0806c3c0 	call	806c3c <__mulsi3>
  81ab00:	1007883a 	mov	r3,r2
  81ab04:	008020b4 	movhi	r2,130
  81ab08:	10b23a04 	addi	r2,r2,-14104
  81ab0c:	1885883a 	add	r2,r3,r2
  81ab10:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  81ab14:	e0fffc17 	ldw	r3,-16(fp)
  81ab18:	00900034 	movhi	r2,16384
  81ab1c:	10bfffc4 	addi	r2,r2,-1
  81ab20:	1886703a 	and	r3,r3,r2
  81ab24:	e0bff917 	ldw	r2,-28(fp)
  81ab28:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81ab2c:	e0bff617 	ldw	r2,-40(fp)
  81ab30:	1004c03a 	cmpne	r2,r2,zero
  81ab34:	1000061e 	bne	r2,zero,81ab50 <open+0xf0>
  81ab38:	e13ff917 	ldw	r4,-28(fp)
  81ab3c:	081a9680 	call	81a968 <alt_file_locked>
  81ab40:	e0bff715 	stw	r2,-36(fp)
  81ab44:	e0bff717 	ldw	r2,-36(fp)
  81ab48:	1004803a 	cmplt	r2,r2,zero
  81ab4c:	1000131e 	bne	r2,zero,81ab9c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  81ab50:	e0bffa17 	ldw	r2,-24(fp)
  81ab54:	10800317 	ldw	r2,12(r2)
  81ab58:	1005003a 	cmpeq	r2,r2,zero
  81ab5c:	1000091e 	bne	r2,zero,81ab84 <open+0x124>
  81ab60:	e0bffa17 	ldw	r2,-24(fp)
  81ab64:	10800317 	ldw	r2,12(r2)
  81ab68:	e13ff917 	ldw	r4,-28(fp)
  81ab6c:	e17ffb17 	ldw	r5,-20(fp)
  81ab70:	e1bffc17 	ldw	r6,-16(fp)
  81ab74:	e1fffd17 	ldw	r7,-12(fp)
  81ab78:	103ee83a 	callr	r2
  81ab7c:	e0bfff15 	stw	r2,-4(fp)
  81ab80:	00000106 	br	81ab88 <open+0x128>
  81ab84:	e03fff15 	stw	zero,-4(fp)
  81ab88:	e0bfff17 	ldw	r2,-4(fp)
  81ab8c:	e0bff715 	stw	r2,-36(fp)
  81ab90:	00000206 	br	81ab9c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  81ab94:	00bffb44 	movi	r2,-19
  81ab98:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  81ab9c:	e0bff717 	ldw	r2,-36(fp)
  81aba0:	1004403a 	cmpge	r2,r2,zero
  81aba4:	1000091e 	bne	r2,zero,81abcc <open+0x16c>
  {
    alt_release_fd (index);  
  81aba8:	e13ff817 	ldw	r4,-32(fp)
  81abac:	08101cc0 	call	8101cc <alt_release_fd>
    ALT_ERRNO = -status;
  81abb0:	081abec0 	call	81abec <alt_get_errno>
  81abb4:	e0fff717 	ldw	r3,-36(fp)
  81abb8:	00c7c83a 	sub	r3,zero,r3
  81abbc:	10c00015 	stw	r3,0(r2)
    return -1;
  81abc0:	00bfffc4 	movi	r2,-1
  81abc4:	e0bffe15 	stw	r2,-8(fp)
  81abc8:	00000206 	br	81abd4 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  81abcc:	e0bff817 	ldw	r2,-32(fp)
  81abd0:	e0bffe15 	stw	r2,-8(fp)
  81abd4:	e0bffe17 	ldw	r2,-8(fp)
}
  81abd8:	e037883a 	mov	sp,fp
  81abdc:	dfc00117 	ldw	ra,4(sp)
  81abe0:	df000017 	ldw	fp,0(sp)
  81abe4:	dec00204 	addi	sp,sp,8
  81abe8:	f800283a 	ret

0081abec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81abec:	defffd04 	addi	sp,sp,-12
  81abf0:	dfc00215 	stw	ra,8(sp)
  81abf4:	df000115 	stw	fp,4(sp)
  81abf8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81abfc:	008020b4 	movhi	r2,130
  81ac00:	10b6e404 	addi	r2,r2,-9328
  81ac04:	10800017 	ldw	r2,0(r2)
  81ac08:	1005003a 	cmpeq	r2,r2,zero
  81ac0c:	1000061e 	bne	r2,zero,81ac28 <alt_get_errno+0x3c>
  81ac10:	008020b4 	movhi	r2,130
  81ac14:	10b6e404 	addi	r2,r2,-9328
  81ac18:	10800017 	ldw	r2,0(r2)
  81ac1c:	103ee83a 	callr	r2
  81ac20:	e0bfff15 	stw	r2,-4(fp)
  81ac24:	00000306 	br	81ac34 <alt_get_errno+0x48>
  81ac28:	008020b4 	movhi	r2,130
  81ac2c:	10bdeb04 	addi	r2,r2,-2132
  81ac30:	e0bfff15 	stw	r2,-4(fp)
  81ac34:	e0bfff17 	ldw	r2,-4(fp)
}
  81ac38:	e037883a 	mov	sp,fp
  81ac3c:	dfc00117 	ldw	ra,4(sp)
  81ac40:	df000017 	ldw	fp,0(sp)
  81ac44:	dec00204 	addi	sp,sp,8
  81ac48:	f800283a 	ret

0081ac4c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  81ac4c:	defffa04 	addi	sp,sp,-24
  81ac50:	df000515 	stw	fp,20(sp)
  81ac54:	df000504 	addi	fp,sp,20
  81ac58:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81ac5c:	0005303a 	rdctl	r2,status
  81ac60:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ac64:	e0fffd17 	ldw	r3,-12(fp)
  81ac68:	00bfff84 	movi	r2,-2
  81ac6c:	1884703a 	and	r2,r3,r2
  81ac70:	1001703a 	wrctl	status,r2
  
  return context;
  81ac74:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  81ac78:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  81ac7c:	e0bfff17 	ldw	r2,-4(fp)
  81ac80:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  81ac84:	e0bffc17 	ldw	r2,-16(fp)
  81ac88:	10c00017 	ldw	r3,0(r2)
  81ac8c:	e0bffc17 	ldw	r2,-16(fp)
  81ac90:	10800117 	ldw	r2,4(r2)
  81ac94:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  81ac98:	e0bffc17 	ldw	r2,-16(fp)
  81ac9c:	10c00117 	ldw	r3,4(r2)
  81aca0:	e0bffc17 	ldw	r2,-16(fp)
  81aca4:	10800017 	ldw	r2,0(r2)
  81aca8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  81acac:	e0fffc17 	ldw	r3,-16(fp)
  81acb0:	e0bffc17 	ldw	r2,-16(fp)
  81acb4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  81acb8:	e0fffc17 	ldw	r3,-16(fp)
  81acbc:	e0bffc17 	ldw	r2,-16(fp)
  81acc0:	18800015 	stw	r2,0(r3)
  81acc4:	e0bffe17 	ldw	r2,-8(fp)
  81acc8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81accc:	e0bffb17 	ldw	r2,-20(fp)
  81acd0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  81acd4:	e037883a 	mov	sp,fp
  81acd8:	df000017 	ldw	fp,0(sp)
  81acdc:	dec00104 	addi	sp,sp,4
  81ace0:	f800283a 	ret

0081ace4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  81ace4:	defffb04 	addi	sp,sp,-20
  81ace8:	dfc00415 	stw	ra,16(sp)
  81acec:	df000315 	stw	fp,12(sp)
  81acf0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  81acf4:	d0a02e17 	ldw	r2,-32584(gp)
  81acf8:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  81acfc:	d0a73217 	ldw	r2,-25400(gp)
  81ad00:	10800044 	addi	r2,r2,1
  81ad04:	d0a73215 	stw	r2,-25400(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81ad08:	00003106 	br	81add0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  81ad0c:	e0bffe17 	ldw	r2,-8(fp)
  81ad10:	10800017 	ldw	r2,0(r2)
  81ad14:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  81ad18:	e0bffe17 	ldw	r2,-8(fp)
  81ad1c:	10800403 	ldbu	r2,16(r2)
  81ad20:	10803fcc 	andi	r2,r2,255
  81ad24:	1005003a 	cmpeq	r2,r2,zero
  81ad28:	1000051e 	bne	r2,zero,81ad40 <alt_tick+0x5c>
  81ad2c:	d0a73217 	ldw	r2,-25400(gp)
  81ad30:	1004c03a 	cmpne	r2,r2,zero
  81ad34:	1000021e 	bne	r2,zero,81ad40 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  81ad38:	e0bffe17 	ldw	r2,-8(fp)
  81ad3c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  81ad40:	e0bffe17 	ldw	r2,-8(fp)
  81ad44:	10c00217 	ldw	r3,8(r2)
  81ad48:	d0a73217 	ldw	r2,-25400(gp)
  81ad4c:	10c01e36 	bltu	r2,r3,81adc8 <alt_tick+0xe4>
  81ad50:	e0bffe17 	ldw	r2,-8(fp)
  81ad54:	10800403 	ldbu	r2,16(r2)
  81ad58:	10803fcc 	andi	r2,r2,255
  81ad5c:	1004c03a 	cmpne	r2,r2,zero
  81ad60:	1000191e 	bne	r2,zero,81adc8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  81ad64:	e0bffe17 	ldw	r2,-8(fp)
  81ad68:	10c00317 	ldw	r3,12(r2)
  81ad6c:	e0bffe17 	ldw	r2,-8(fp)
  81ad70:	11000517 	ldw	r4,20(r2)
  81ad74:	183ee83a 	callr	r3
  81ad78:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  81ad7c:	e0bffd17 	ldw	r2,-12(fp)
  81ad80:	1004c03a 	cmpne	r2,r2,zero
  81ad84:	1000031e 	bne	r2,zero,81ad94 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  81ad88:	e13ffe17 	ldw	r4,-8(fp)
  81ad8c:	081ac4c0 	call	81ac4c <alt_alarm_stop>
  81ad90:	00000d06 	br	81adc8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  81ad94:	e0bffe17 	ldw	r2,-8(fp)
  81ad98:	10c00217 	ldw	r3,8(r2)
  81ad9c:	e0bffd17 	ldw	r2,-12(fp)
  81ada0:	1887883a 	add	r3,r3,r2
  81ada4:	e0bffe17 	ldw	r2,-8(fp)
  81ada8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  81adac:	e0bffe17 	ldw	r2,-8(fp)
  81adb0:	10c00217 	ldw	r3,8(r2)
  81adb4:	d0a73217 	ldw	r2,-25400(gp)
  81adb8:	1880032e 	bgeu	r3,r2,81adc8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  81adbc:	e0fffe17 	ldw	r3,-8(fp)
  81adc0:	00800044 	movi	r2,1
  81adc4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  81adc8:	e0bfff17 	ldw	r2,-4(fp)
  81adcc:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81add0:	d0e02e04 	addi	r3,gp,-32584
  81add4:	e0bffe17 	ldw	r2,-8(fp)
  81add8:	10ffcc1e 	bne	r2,r3,81ad0c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  81addc:	08116080 	call	811608 <OSTimeTick>
}
  81ade0:	e037883a 	mov	sp,fp
  81ade4:	dfc00117 	ldw	ra,4(sp)
  81ade8:	df000017 	ldw	fp,0(sp)
  81adec:	dec00204 	addi	sp,sp,8
  81adf0:	f800283a 	ret

0081adf4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  81adf4:	deffff04 	addi	sp,sp,-4
  81adf8:	df000015 	stw	fp,0(sp)
  81adfc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81ae00:	000170fa 	wrctl	ienable,zero
}
  81ae04:	e037883a 	mov	sp,fp
  81ae08:	df000017 	ldw	fp,0(sp)
  81ae0c:	dec00104 	addi	sp,sp,4
  81ae10:	f800283a 	ret

0081ae14 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  81ae14:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  81ae18:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  81ae1c:	d1272b17 	ldw	r4,-25428(gp)

      stw ra,  0(sp)
  81ae20:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  81ae24:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  81ae28:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  81ae2c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  81ae30:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  81ae34:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  81ae38:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  81ae3c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  81ae40:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  81ae44:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  81ae48:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  81ae4c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  81ae50:	081b2340 	call	81b234 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  81ae54:	d1272617 	ldw	r4,-25448(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  81ae58:	d1671e07 	ldb	r5,-25480(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  81ae5c:	d1272b15 	stw	r4,-25428(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  81ae60:	d1671e45 	stb	r5,-25479(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  81ae64:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  81ae68:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  81ae6c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  81ae70:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  81ae74:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  81ae78:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  81ae7c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  81ae80:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  81ae84:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  81ae88:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  81ae8c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  81ae90:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  81ae94:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  81ae98:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  81ae9c:	f800283a 	ret

0081aea0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  81aea0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  81aea4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  81aea8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  81aeac:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  81aeb0:	081b2340 	call	81b234 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  81aeb4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  81aeb8:	d4a71c45 	stb	r18,-25487(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  81aebc:	003fe506 	br	81ae54 <OSCtxSw+0x40>

0081aec0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  81aec0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  81aec4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  81aec8:	10800054 	ori	r2,r2,1
      wrctl status, r2
  81aecc:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  81aed0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  81aed4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  81aed8:	dec00204 	addi	sp,sp,8

      callr r2
  81aedc:	103ee83a 	callr	r2

      nop
  81aee0:	0001883a 	nop

0081aee4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  81aee4:	defff704 	addi	sp,sp,-36
  81aee8:	dfc00815 	stw	ra,32(sp)
  81aeec:	df000715 	stw	fp,28(sp)
  81aef0:	df000704 	addi	fp,sp,28
  81aef4:	e13ffc15 	stw	r4,-16(fp)
  81aef8:	e17ffd15 	stw	r5,-12(fp)
  81aefc:	e1bffe15 	stw	r6,-8(fp)
  81af00:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  81af04:	e0bffe17 	ldw	r2,-8(fp)
  81af08:	1007883a 	mov	r3,r2
  81af0c:	00bfff04 	movi	r2,-4
  81af10:	1884703a 	and	r2,r3,r2
  81af14:	10bf0004 	addi	r2,r2,-1024
  81af18:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  81af1c:	e0bff917 	ldw	r2,-28(fp)
  81af20:	10000015 	stw	zero,0(r2)
  81af24:	e0bff917 	ldw	r2,-28(fp)
  81af28:	10c0bb04 	addi	r3,r2,748
  81af2c:	e0bff917 	ldw	r2,-28(fp)
  81af30:	10c00115 	stw	r3,4(r2)
  81af34:	e0bff917 	ldw	r2,-28(fp)
  81af38:	1080bb04 	addi	r2,r2,748
  81af3c:	10c01704 	addi	r3,r2,92
  81af40:	e0bff917 	ldw	r2,-28(fp)
  81af44:	10c00215 	stw	r3,8(r2)
  81af48:	e0bff917 	ldw	r2,-28(fp)
  81af4c:	1080bb04 	addi	r2,r2,748
  81af50:	10c02e04 	addi	r3,r2,184
  81af54:	e0bff917 	ldw	r2,-28(fp)
  81af58:	10c00315 	stw	r3,12(r2)
  81af5c:	e0bff917 	ldw	r2,-28(fp)
  81af60:	10000415 	stw	zero,16(r2)
  81af64:	e0bff917 	ldw	r2,-28(fp)
  81af68:	10800504 	addi	r2,r2,20
  81af6c:	1009883a 	mov	r4,r2
  81af70:	01800644 	movi	r6,25
  81af74:	000b883a 	mov	r5,zero
  81af78:	080cb200 	call	80cb20 <memset>
  81af7c:	e0bff917 	ldw	r2,-28(fp)
  81af80:	10000c15 	stw	zero,48(r2)
  81af84:	e0fff917 	ldw	r3,-28(fp)
  81af88:	008020b4 	movhi	r2,130
  81af8c:	10b02a04 	addi	r2,r2,-16216
  81af90:	18800d15 	stw	r2,52(r3)
  81af94:	e0bff917 	ldw	r2,-28(fp)
  81af98:	10000e15 	stw	zero,56(r2)
  81af9c:	e0bff917 	ldw	r2,-28(fp)
  81afa0:	10000f15 	stw	zero,60(r2)
  81afa4:	e0bff917 	ldw	r2,-28(fp)
  81afa8:	10001015 	stw	zero,64(r2)
  81afac:	e0bff917 	ldw	r2,-28(fp)
  81afb0:	10001115 	stw	zero,68(r2)
  81afb4:	e0bff917 	ldw	r2,-28(fp)
  81afb8:	10001215 	stw	zero,72(r2)
  81afbc:	e0bff917 	ldw	r2,-28(fp)
  81afc0:	10001315 	stw	zero,76(r2)
  81afc4:	e0bff917 	ldw	r2,-28(fp)
  81afc8:	10001415 	stw	zero,80(r2)
  81afcc:	e0bff917 	ldw	r2,-28(fp)
  81afd0:	10001515 	stw	zero,84(r2)
  81afd4:	e0bff917 	ldw	r2,-28(fp)
  81afd8:	10001615 	stw	zero,88(r2)
  81afdc:	e0bff917 	ldw	r2,-28(fp)
  81afe0:	10001715 	stw	zero,92(r2)
  81afe4:	e0bff917 	ldw	r2,-28(fp)
  81afe8:	10001805 	stb	zero,96(r2)
  81afec:	e0bff917 	ldw	r2,-28(fp)
  81aff0:	10801f04 	addi	r2,r2,124
  81aff4:	10000015 	stw	zero,0(r2)
  81aff8:	10000115 	stw	zero,4(r2)
  81affc:	10000215 	stw	zero,8(r2)
  81b000:	10000315 	stw	zero,12(r2)
  81b004:	10000415 	stw	zero,16(r2)
  81b008:	10000515 	stw	zero,20(r2)
  81b00c:	10000615 	stw	zero,24(r2)
  81b010:	10000715 	stw	zero,28(r2)
  81b014:	10000815 	stw	zero,32(r2)
  81b018:	e0bff917 	ldw	r2,-28(fp)
  81b01c:	10002815 	stw	zero,160(r2)
  81b020:	e0fff917 	ldw	r3,-28(fp)
  81b024:	00800044 	movi	r2,1
  81b028:	18802915 	stw	r2,164(r3)
  81b02c:	18002a15 	stw	zero,168(r3)
  81b030:	e0fff917 	ldw	r3,-28(fp)
  81b034:	008cc384 	movi	r2,13070
  81b038:	18802b0d 	sth	r2,172(r3)
  81b03c:	e0fff917 	ldw	r3,-28(fp)
  81b040:	00aaf344 	movi	r2,-21555
  81b044:	18802b8d 	sth	r2,174(r3)
  81b048:	e0fff917 	ldw	r3,-28(fp)
  81b04c:	00848d04 	movi	r2,4660
  81b050:	18802c0d 	sth	r2,176(r3)
  81b054:	e0fff917 	ldw	r3,-28(fp)
  81b058:	00b99b44 	movi	r2,-6547
  81b05c:	18802c8d 	sth	r2,178(r3)
  81b060:	e0fff917 	ldw	r3,-28(fp)
  81b064:	00b7bb04 	movi	r2,-8468
  81b068:	18802d0d 	sth	r2,180(r3)
  81b06c:	e0fff917 	ldw	r3,-28(fp)
  81b070:	00800144 	movi	r2,5
  81b074:	18802d8d 	sth	r2,182(r3)
  81b078:	e0fff917 	ldw	r3,-28(fp)
  81b07c:	008002c4 	movi	r2,11
  81b080:	18802e0d 	sth	r2,184(r3)
  81b084:	e0bff917 	ldw	r2,-28(fp)
  81b088:	10002f15 	stw	zero,188(r2)
  81b08c:	e0bff917 	ldw	r2,-28(fp)
  81b090:	10003015 	stw	zero,192(r2)
  81b094:	e0bff917 	ldw	r2,-28(fp)
  81b098:	10003115 	stw	zero,196(r2)
  81b09c:	e0bff917 	ldw	r2,-28(fp)
  81b0a0:	10003215 	stw	zero,200(r2)
  81b0a4:	e0bff917 	ldw	r2,-28(fp)
  81b0a8:	10003315 	stw	zero,204(r2)
  81b0ac:	e0bff917 	ldw	r2,-28(fp)
  81b0b0:	10003415 	stw	zero,208(r2)
  81b0b4:	e0bff917 	ldw	r2,-28(fp)
  81b0b8:	10003e15 	stw	zero,248(r2)
  81b0bc:	e0bff917 	ldw	r2,-28(fp)
  81b0c0:	10003f15 	stw	zero,252(r2)
  81b0c4:	e0bff917 	ldw	r2,-28(fp)
  81b0c8:	10004015 	stw	zero,256(r2)
  81b0cc:	e0bff917 	ldw	r2,-28(fp)
  81b0d0:	10004115 	stw	zero,260(r2)
  81b0d4:	e0bff917 	ldw	r2,-28(fp)
  81b0d8:	10004215 	stw	zero,264(r2)
  81b0dc:	e0bff917 	ldw	r2,-28(fp)
  81b0e0:	10004315 	stw	zero,268(r2)
  81b0e4:	e0bff917 	ldw	r2,-28(fp)
  81b0e8:	10004415 	stw	zero,272(r2)
  81b0ec:	e0bff917 	ldw	r2,-28(fp)
  81b0f0:	10004515 	stw	zero,276(r2)
  81b0f4:	e0bff917 	ldw	r2,-28(fp)
  81b0f8:	10004615 	stw	zero,280(r2)
  81b0fc:	e0bff917 	ldw	r2,-28(fp)
  81b100:	10004715 	stw	zero,284(r2)
  81b104:	e0bff917 	ldw	r2,-28(fp)
  81b108:	10003505 	stb	zero,212(r2)
  81b10c:	e0bff917 	ldw	r2,-28(fp)
  81b110:	10003705 	stb	zero,220(r2)
  81b114:	e0bff917 	ldw	r2,-28(fp)
  81b118:	10003d15 	stw	zero,244(r2)
  81b11c:	e0bff917 	ldw	r2,-28(fp)
  81b120:	10005215 	stw	zero,328(r2)
  81b124:	e0bff917 	ldw	r2,-28(fp)
  81b128:	10005315 	stw	zero,332(r2)
  81b12c:	e0bff917 	ldw	r2,-28(fp)
  81b130:	10005415 	stw	zero,336(r2)
  81b134:	e0bff917 	ldw	r2,-28(fp)
  81b138:	10005515 	stw	zero,340(r2)
  81b13c:	e0bff917 	ldw	r2,-28(fp)
  81b140:	1000b515 	stw	zero,724(r2)
  81b144:	e0bff917 	ldw	r2,-28(fp)
  81b148:	10007515 	stw	zero,468(r2)
  81b14c:	e0bff917 	ldw	r2,-28(fp)
  81b150:	1000b715 	stw	zero,732(r2)
  81b154:	e0bff917 	ldw	r2,-28(fp)
  81b158:	1000b815 	stw	zero,736(r2)
  81b15c:	e0bff917 	ldw	r2,-28(fp)
  81b160:	1000b915 	stw	zero,740(r2)
  81b164:	e0bff917 	ldw	r2,-28(fp)
  81b168:	1000ba15 	stw	zero,744(r2)
  81b16c:	e0bff917 	ldw	r2,-28(fp)
  81b170:	1080bb04 	addi	r2,r2,748
  81b174:	1009883a 	mov	r4,r2
  81b178:	01804504 	movi	r6,276
  81b17c:	000b883a 	mov	r5,zero
  81b180:	080cb200 	call	80cb20 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  81b184:	e0bff917 	ldw	r2,-28(fp)
  81b188:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  81b18c:	e0bffb17 	ldw	r2,-20(fp)
  81b190:	10bff304 	addi	r2,r2,-52
  81b194:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  81b198:	e0bffa17 	ldw	r2,-24(fp)
  81b19c:	10c00c04 	addi	r3,r2,48
  81b1a0:	e0bffc17 	ldw	r2,-16(fp)
  81b1a4:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  81b1a8:	e0bffa17 	ldw	r2,-24(fp)
  81b1ac:	10c00b04 	addi	r3,r2,44
  81b1b0:	e0bffd17 	ldw	r2,-12(fp)
  81b1b4:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  81b1b8:	e0bffa17 	ldw	r2,-24(fp)
  81b1bc:	10c00a04 	addi	r3,r2,40
  81b1c0:	e0bff917 	ldw	r2,-28(fp)
  81b1c4:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  81b1c8:	008020b4 	movhi	r2,130
  81b1cc:	10abb004 	addi	r2,r2,-20800
  81b1d0:	10c00104 	addi	r3,r2,4
  81b1d4:	e0bffa17 	ldw	r2,-24(fp)
  81b1d8:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  81b1dc:	e0bffa17 	ldw	r2,-24(fp)
}
  81b1e0:	e037883a 	mov	sp,fp
  81b1e4:	dfc00117 	ldw	ra,4(sp)
  81b1e8:	df000017 	ldw	fp,0(sp)
  81b1ec:	dec00204 	addi	sp,sp,8
  81b1f0:	f800283a 	ret

0081b1f4 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  81b1f4:	defffe04 	addi	sp,sp,-8
  81b1f8:	df000115 	stw	fp,4(sp)
  81b1fc:	df000104 	addi	fp,sp,4
  81b200:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  81b204:	e037883a 	mov	sp,fp
  81b208:	df000017 	ldw	fp,0(sp)
  81b20c:	dec00104 	addi	sp,sp,4
  81b210:	f800283a 	ret

0081b214 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  81b214:	defffe04 	addi	sp,sp,-8
  81b218:	df000115 	stw	fp,4(sp)
  81b21c:	df000104 	addi	fp,sp,4
  81b220:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  81b224:	e037883a 	mov	sp,fp
  81b228:	df000017 	ldw	fp,0(sp)
  81b22c:	dec00104 	addi	sp,sp,4
  81b230:	f800283a 	ret

0081b234 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  81b234:	deffff04 	addi	sp,sp,-4
  81b238:	df000015 	stw	fp,0(sp)
  81b23c:	d839883a 	mov	fp,sp
}
  81b240:	e037883a 	mov	sp,fp
  81b244:	df000017 	ldw	fp,0(sp)
  81b248:	dec00104 	addi	sp,sp,4
  81b24c:	f800283a 	ret

0081b250 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  81b250:	deffff04 	addi	sp,sp,-4
  81b254:	df000015 	stw	fp,0(sp)
  81b258:	d839883a 	mov	fp,sp
}
  81b25c:	e037883a 	mov	sp,fp
  81b260:	df000017 	ldw	fp,0(sp)
  81b264:	dec00104 	addi	sp,sp,4
  81b268:	f800283a 	ret

0081b26c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  81b26c:	deffff04 	addi	sp,sp,-4
  81b270:	df000015 	stw	fp,0(sp)
  81b274:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  81b278:	e037883a 	mov	sp,fp
  81b27c:	df000017 	ldw	fp,0(sp)
  81b280:	dec00104 	addi	sp,sp,4
  81b284:	f800283a 	ret

0081b288 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  81b288:	deffff04 	addi	sp,sp,-4
  81b28c:	df000015 	stw	fp,0(sp)
  81b290:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  81b294:	e037883a 	mov	sp,fp
  81b298:	df000017 	ldw	fp,0(sp)
  81b29c:	dec00104 	addi	sp,sp,4
  81b2a0:	f800283a 	ret

0081b2a4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  81b2a4:	deffff04 	addi	sp,sp,-4
  81b2a8:	df000015 	stw	fp,0(sp)
  81b2ac:	d839883a 	mov	fp,sp
}
  81b2b0:	e037883a 	mov	sp,fp
  81b2b4:	df000017 	ldw	fp,0(sp)
  81b2b8:	dec00104 	addi	sp,sp,4
  81b2bc:	f800283a 	ret

0081b2c0 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  81b2c0:	deffff04 	addi	sp,sp,-4
  81b2c4:	df000015 	stw	fp,0(sp)
  81b2c8:	d839883a 	mov	fp,sp
}
  81b2cc:	e037883a 	mov	sp,fp
  81b2d0:	df000017 	ldw	fp,0(sp)
  81b2d4:	dec00104 	addi	sp,sp,4
  81b2d8:	f800283a 	ret

0081b2dc <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  81b2dc:	defffe04 	addi	sp,sp,-8
  81b2e0:	df000115 	stw	fp,4(sp)
  81b2e4:	df000104 	addi	fp,sp,4
  81b2e8:	e13fff15 	stw	r4,-4(fp)
}
  81b2ec:	e037883a 	mov	sp,fp
  81b2f0:	df000017 	ldw	fp,0(sp)
  81b2f4:	dec00104 	addi	sp,sp,4
  81b2f8:	f800283a 	ret

0081b2fc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  81b2fc:	defffa04 	addi	sp,sp,-24
  81b300:	dfc00515 	stw	ra,20(sp)
  81b304:	df000415 	stw	fp,16(sp)
  81b308:	df000404 	addi	fp,sp,16
  81b30c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  81b310:	008020b4 	movhi	r2,130
  81b314:	10b6df04 	addi	r2,r2,-9348
  81b318:	10800017 	ldw	r2,0(r2)
  81b31c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81b320:	00003306 	br	81b3f0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  81b324:	e0bffd17 	ldw	r2,-12(fp)
  81b328:	11000217 	ldw	r4,8(r2)
  81b32c:	08076bc0 	call	8076bc <strlen>
  81b330:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  81b334:	e0bffd17 	ldw	r2,-12(fp)
  81b338:	10c00217 	ldw	r3,8(r2)
  81b33c:	e0bffc17 	ldw	r2,-16(fp)
  81b340:	1885883a 	add	r2,r3,r2
  81b344:	10bfffc4 	addi	r2,r2,-1
  81b348:	10800003 	ldbu	r2,0(r2)
  81b34c:	10803fcc 	andi	r2,r2,255
  81b350:	1080201c 	xori	r2,r2,128
  81b354:	10bfe004 	addi	r2,r2,-128
  81b358:	10800bd8 	cmpnei	r2,r2,47
  81b35c:	1000031e 	bne	r2,zero,81b36c <alt_find_file+0x70>
    {
      len -= 1;
  81b360:	e0bffc17 	ldw	r2,-16(fp)
  81b364:	10bfffc4 	addi	r2,r2,-1
  81b368:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  81b36c:	e0bffc17 	ldw	r2,-16(fp)
  81b370:	1007883a 	mov	r3,r2
  81b374:	e0bffe17 	ldw	r2,-8(fp)
  81b378:	1885883a 	add	r2,r3,r2
  81b37c:	10800003 	ldbu	r2,0(r2)
  81b380:	10803fcc 	andi	r2,r2,255
  81b384:	1080201c 	xori	r2,r2,128
  81b388:	10bfe004 	addi	r2,r2,-128
  81b38c:	10800be0 	cmpeqi	r2,r2,47
  81b390:	10000a1e 	bne	r2,zero,81b3bc <alt_find_file+0xc0>
  81b394:	e0bffc17 	ldw	r2,-16(fp)
  81b398:	1007883a 	mov	r3,r2
  81b39c:	e0bffe17 	ldw	r2,-8(fp)
  81b3a0:	1885883a 	add	r2,r3,r2
  81b3a4:	10800003 	ldbu	r2,0(r2)
  81b3a8:	10803fcc 	andi	r2,r2,255
  81b3ac:	1080201c 	xori	r2,r2,128
  81b3b0:	10bfe004 	addi	r2,r2,-128
  81b3b4:	1004c03a 	cmpne	r2,r2,zero
  81b3b8:	10000a1e 	bne	r2,zero,81b3e4 <alt_find_file+0xe8>
  81b3bc:	e0bffd17 	ldw	r2,-12(fp)
  81b3c0:	11000217 	ldw	r4,8(r2)
  81b3c4:	e1bffc17 	ldw	r6,-16(fp)
  81b3c8:	e17ffe17 	ldw	r5,-8(fp)
  81b3cc:	081b56c0 	call	81b56c <memcmp>
  81b3d0:	1004c03a 	cmpne	r2,r2,zero
  81b3d4:	1000031e 	bne	r2,zero,81b3e4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  81b3d8:	e0bffd17 	ldw	r2,-12(fp)
  81b3dc:	e0bfff15 	stw	r2,-4(fp)
  81b3e0:	00000806 	br	81b404 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  81b3e4:	e0bffd17 	ldw	r2,-12(fp)
  81b3e8:	10800017 	ldw	r2,0(r2)
  81b3ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81b3f0:	00c020b4 	movhi	r3,130
  81b3f4:	18f6df04 	addi	r3,r3,-9348
  81b3f8:	e0bffd17 	ldw	r2,-12(fp)
  81b3fc:	10ffc91e 	bne	r2,r3,81b324 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  81b400:	e03fff15 	stw	zero,-4(fp)
  81b404:	e0bfff17 	ldw	r2,-4(fp)
}
  81b408:	e037883a 	mov	sp,fp
  81b40c:	dfc00117 	ldw	ra,4(sp)
  81b410:	df000017 	ldw	fp,0(sp)
  81b414:	dec00204 	addi	sp,sp,8
  81b418:	f800283a 	ret

0081b41c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81b41c:	defff704 	addi	sp,sp,-36
  81b420:	dfc00815 	stw	ra,32(sp)
  81b424:	df000715 	stw	fp,28(sp)
  81b428:	dc000615 	stw	r16,24(sp)
  81b42c:	df000604 	addi	fp,sp,24
  81b430:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  81b434:	00bffa04 	movi	r2,-24
  81b438:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  81b43c:	008020b4 	movhi	r2,130
  81b440:	10bdec04 	addi	r2,r2,-2128
  81b444:	10800017 	ldw	r2,0(r2)
  81b448:	e0bffa15 	stw	r2,-24(fp)
  81b44c:	e03ffb0d 	sth	zero,-20(fp)
  81b450:	e17ffb0b 	ldhu	r5,-20(fp)
  81b454:	e1bffe04 	addi	r6,fp,-8
  81b458:	e13ffa17 	ldw	r4,-24(fp)
  81b45c:	08164280 	call	816428 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81b460:	e03ffd15 	stw	zero,-12(fp)
  81b464:	00002006 	br	81b4e8 <alt_get_fd+0xcc>
  {
    if (!alt_fd_list[i].dev)
  81b468:	e13ffd17 	ldw	r4,-12(fp)
  81b46c:	040020b4 	movhi	r16,130
  81b470:	84323a04 	addi	r16,r16,-14104
  81b474:	01400304 	movi	r5,12
  81b478:	0806c3c0 	call	806c3c <__mulsi3>
  81b47c:	1405883a 	add	r2,r2,r16
  81b480:	10800017 	ldw	r2,0(r2)
  81b484:	1004c03a 	cmpne	r2,r2,zero
  81b488:	1000141e 	bne	r2,zero,81b4dc <alt_get_fd+0xc0>
    {
      alt_fd_list[i].dev = dev;
  81b48c:	e13ffd17 	ldw	r4,-12(fp)
  81b490:	040020b4 	movhi	r16,130
  81b494:	84323a04 	addi	r16,r16,-14104
  81b498:	01400304 	movi	r5,12
  81b49c:	0806c3c0 	call	806c3c <__mulsi3>
  81b4a0:	1407883a 	add	r3,r2,r16
  81b4a4:	e0bfff17 	ldw	r2,-4(fp)
  81b4a8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  81b4ac:	008020b4 	movhi	r2,130
  81b4b0:	10b6e304 	addi	r2,r2,-9332
  81b4b4:	10c00017 	ldw	r3,0(r2)
  81b4b8:	e0bffd17 	ldw	r2,-12(fp)
  81b4bc:	1880040e 	bge	r3,r2,81b4d0 <alt_get_fd+0xb4>
      {
        alt_max_fd = i;
  81b4c0:	00c020b4 	movhi	r3,130
  81b4c4:	18f6e304 	addi	r3,r3,-9332
  81b4c8:	e0bffd17 	ldw	r2,-12(fp)
  81b4cc:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  81b4d0:	e0bffd17 	ldw	r2,-12(fp)
  81b4d4:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
  81b4d8:	00000606 	br	81b4f4 <alt_get_fd+0xd8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81b4dc:	e0bffd17 	ldw	r2,-12(fp)
  81b4e0:	10800044 	addi	r2,r2,1
  81b4e4:	e0bffd15 	stw	r2,-12(fp)
  81b4e8:	e0bffd17 	ldw	r2,-12(fp)
  81b4ec:	10800810 	cmplti	r2,r2,32
  81b4f0:	103fdd1e 	bne	r2,zero,81b468 <alt_get_fd+0x4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  81b4f4:	008020b4 	movhi	r2,130
  81b4f8:	10bdec04 	addi	r2,r2,-2128
  81b4fc:	11000017 	ldw	r4,0(r2)
  81b500:	08168200 	call	816820 <OSSemPost>

  return rc;
  81b504:	e0bffc17 	ldw	r2,-16(fp)
}
  81b508:	e037883a 	mov	sp,fp
  81b50c:	dfc00217 	ldw	ra,8(sp)
  81b510:	df000117 	ldw	fp,4(sp)
  81b514:	dc000017 	ldw	r16,0(sp)
  81b518:	dec00304 	addi	sp,sp,12
  81b51c:	f800283a 	ret

0081b520 <atexit>:
  81b520:	200b883a 	mov	r5,r4
  81b524:	000d883a 	mov	r6,zero
  81b528:	0009883a 	mov	r4,zero
  81b52c:	000f883a 	mov	r7,zero
  81b530:	081b5e01 	jmpi	81b5e0 <__register_exitproc>

0081b534 <exit>:
  81b534:	defffe04 	addi	sp,sp,-8
  81b538:	000b883a 	mov	r5,zero
  81b53c:	dc000015 	stw	r16,0(sp)
  81b540:	dfc00115 	stw	ra,4(sp)
  81b544:	2021883a 	mov	r16,r4
  81b548:	081b7180 	call	81b718 <__call_exitprocs>
  81b54c:	008020b4 	movhi	r2,130
  81b550:	10b6da04 	addi	r2,r2,-9368
  81b554:	11000017 	ldw	r4,0(r2)
  81b558:	20800f17 	ldw	r2,60(r4)
  81b55c:	10000126 	beq	r2,zero,81b564 <exit+0x30>
  81b560:	103ee83a 	callr	r2
  81b564:	8009883a 	mov	r4,r16
  81b568:	081b9080 	call	81b908 <_exit>

0081b56c <memcmp>:
  81b56c:	00c000c4 	movi	r3,3
  81b570:	1980032e 	bgeu	r3,r6,81b580 <memcmp+0x14>
  81b574:	2144b03a 	or	r2,r4,r5
  81b578:	10c4703a 	and	r2,r2,r3
  81b57c:	10000f26 	beq	r2,zero,81b5bc <memcmp+0x50>
  81b580:	31ffffc4 	addi	r7,r6,-1
  81b584:	3000061e 	bne	r6,zero,81b5a0 <memcmp+0x34>
  81b588:	00000a06 	br	81b5b4 <memcmp+0x48>
  81b58c:	39ffffc4 	addi	r7,r7,-1
  81b590:	00bfffc4 	movi	r2,-1
  81b594:	21000044 	addi	r4,r4,1
  81b598:	29400044 	addi	r5,r5,1
  81b59c:	38800526 	beq	r7,r2,81b5b4 <memcmp+0x48>
  81b5a0:	20c00003 	ldbu	r3,0(r4)
  81b5a4:	28800003 	ldbu	r2,0(r5)
  81b5a8:	18bff826 	beq	r3,r2,81b58c <memcmp+0x20>
  81b5ac:	1885c83a 	sub	r2,r3,r2
  81b5b0:	f800283a 	ret
  81b5b4:	0005883a 	mov	r2,zero
  81b5b8:	f800283a 	ret
  81b5bc:	180f883a 	mov	r7,r3
  81b5c0:	20c00017 	ldw	r3,0(r4)
  81b5c4:	28800017 	ldw	r2,0(r5)
  81b5c8:	18bfed1e 	bne	r3,r2,81b580 <memcmp+0x14>
  81b5cc:	31bfff04 	addi	r6,r6,-4
  81b5d0:	21000104 	addi	r4,r4,4
  81b5d4:	29400104 	addi	r5,r5,4
  81b5d8:	39bff936 	bltu	r7,r6,81b5c0 <memcmp+0x54>
  81b5dc:	003fe806 	br	81b580 <memcmp+0x14>

0081b5e0 <__register_exitproc>:
  81b5e0:	defffa04 	addi	sp,sp,-24
  81b5e4:	008020b4 	movhi	r2,130
  81b5e8:	10b6da04 	addi	r2,r2,-9368
  81b5ec:	dc000015 	stw	r16,0(sp)
  81b5f0:	14000017 	ldw	r16,0(r2)
  81b5f4:	dd000415 	stw	r20,16(sp)
  81b5f8:	2829883a 	mov	r20,r5
  81b5fc:	81405217 	ldw	r5,328(r16)
  81b600:	dcc00315 	stw	r19,12(sp)
  81b604:	dc800215 	stw	r18,8(sp)
  81b608:	dc400115 	stw	r17,4(sp)
  81b60c:	dfc00515 	stw	ra,20(sp)
  81b610:	2023883a 	mov	r17,r4
  81b614:	3027883a 	mov	r19,r6
  81b618:	3825883a 	mov	r18,r7
  81b61c:	28002526 	beq	r5,zero,81b6b4 <__register_exitproc+0xd4>
  81b620:	29000117 	ldw	r4,4(r5)
  81b624:	008007c4 	movi	r2,31
  81b628:	11002716 	blt	r2,r4,81b6c8 <__register_exitproc+0xe8>
  81b62c:	8800101e 	bne	r17,zero,81b670 <__register_exitproc+0x90>
  81b630:	2105883a 	add	r2,r4,r4
  81b634:	1085883a 	add	r2,r2,r2
  81b638:	20c00044 	addi	r3,r4,1
  81b63c:	1145883a 	add	r2,r2,r5
  81b640:	0009883a 	mov	r4,zero
  81b644:	15000215 	stw	r20,8(r2)
  81b648:	28c00115 	stw	r3,4(r5)
  81b64c:	2005883a 	mov	r2,r4
  81b650:	dfc00517 	ldw	ra,20(sp)
  81b654:	dd000417 	ldw	r20,16(sp)
  81b658:	dcc00317 	ldw	r19,12(sp)
  81b65c:	dc800217 	ldw	r18,8(sp)
  81b660:	dc400117 	ldw	r17,4(sp)
  81b664:	dc000017 	ldw	r16,0(sp)
  81b668:	dec00604 	addi	sp,sp,24
  81b66c:	f800283a 	ret
  81b670:	29802204 	addi	r6,r5,136
  81b674:	00800044 	movi	r2,1
  81b678:	110e983a 	sll	r7,r2,r4
  81b67c:	30c04017 	ldw	r3,256(r6)
  81b680:	2105883a 	add	r2,r4,r4
  81b684:	1085883a 	add	r2,r2,r2
  81b688:	1185883a 	add	r2,r2,r6
  81b68c:	19c6b03a 	or	r3,r3,r7
  81b690:	14802015 	stw	r18,128(r2)
  81b694:	14c00015 	stw	r19,0(r2)
  81b698:	00800084 	movi	r2,2
  81b69c:	30c04015 	stw	r3,256(r6)
  81b6a0:	88bfe31e 	bne	r17,r2,81b630 <__register_exitproc+0x50>
  81b6a4:	30804117 	ldw	r2,260(r6)
  81b6a8:	11c4b03a 	or	r2,r2,r7
  81b6ac:	30804115 	stw	r2,260(r6)
  81b6b0:	003fdf06 	br	81b630 <__register_exitproc+0x50>
  81b6b4:	008020b4 	movhi	r2,130
  81b6b8:	109ade04 	addi	r2,r2,27512
  81b6bc:	100b883a 	mov	r5,r2
  81b6c0:	80805215 	stw	r2,328(r16)
  81b6c4:	003fd606 	br	81b620 <__register_exitproc+0x40>
  81b6c8:	00800034 	movhi	r2,0
  81b6cc:	10800004 	addi	r2,r2,0
  81b6d0:	1000021e 	bne	r2,zero,81b6dc <__register_exitproc+0xfc>
  81b6d4:	013fffc4 	movi	r4,-1
  81b6d8:	003fdc06 	br	81b64c <__register_exitproc+0x6c>
  81b6dc:	01006404 	movi	r4,400
  81b6e0:	103ee83a 	callr	r2
  81b6e4:	1007883a 	mov	r3,r2
  81b6e8:	103ffa26 	beq	r2,zero,81b6d4 <__register_exitproc+0xf4>
  81b6ec:	80805217 	ldw	r2,328(r16)
  81b6f0:	180b883a 	mov	r5,r3
  81b6f4:	18000115 	stw	zero,4(r3)
  81b6f8:	18800015 	stw	r2,0(r3)
  81b6fc:	80c05215 	stw	r3,328(r16)
  81b700:	18006215 	stw	zero,392(r3)
  81b704:	18006315 	stw	zero,396(r3)
  81b708:	0009883a 	mov	r4,zero
  81b70c:	883fc826 	beq	r17,zero,81b630 <__register_exitproc+0x50>
  81b710:	003fd706 	br	81b670 <__register_exitproc+0x90>

0081b714 <register_fini>:
  81b714:	f800283a 	ret

0081b718 <__call_exitprocs>:
  81b718:	008020b4 	movhi	r2,130
  81b71c:	10b6da04 	addi	r2,r2,-9368
  81b720:	10800017 	ldw	r2,0(r2)
  81b724:	defff304 	addi	sp,sp,-52
  81b728:	df000b15 	stw	fp,44(sp)
  81b72c:	d8800115 	stw	r2,4(sp)
  81b730:	00800034 	movhi	r2,0
  81b734:	10800004 	addi	r2,r2,0
  81b738:	1005003a 	cmpeq	r2,r2,zero
  81b73c:	d8800215 	stw	r2,8(sp)
  81b740:	d8800117 	ldw	r2,4(sp)
  81b744:	dd400815 	stw	r21,32(sp)
  81b748:	dd000715 	stw	r20,28(sp)
  81b74c:	10805204 	addi	r2,r2,328
  81b750:	dfc00c15 	stw	ra,48(sp)
  81b754:	ddc00a15 	stw	r23,40(sp)
  81b758:	dd800915 	stw	r22,36(sp)
  81b75c:	dcc00615 	stw	r19,24(sp)
  81b760:	dc800515 	stw	r18,20(sp)
  81b764:	dc400415 	stw	r17,16(sp)
  81b768:	dc000315 	stw	r16,12(sp)
  81b76c:	282b883a 	mov	r21,r5
  81b770:	2039883a 	mov	fp,r4
  81b774:	d8800015 	stw	r2,0(sp)
  81b778:	2829003a 	cmpeq	r20,r5,zero
  81b77c:	d8800117 	ldw	r2,4(sp)
  81b780:	14405217 	ldw	r17,328(r2)
  81b784:	88001026 	beq	r17,zero,81b7c8 <__call_exitprocs+0xb0>
  81b788:	ddc00017 	ldw	r23,0(sp)
  81b78c:	88800117 	ldw	r2,4(r17)
  81b790:	8c802204 	addi	r18,r17,136
  81b794:	143fffc4 	addi	r16,r2,-1
  81b798:	80000916 	blt	r16,zero,81b7c0 <__call_exitprocs+0xa8>
  81b79c:	05bfffc4 	movi	r22,-1
  81b7a0:	a000151e 	bne	r20,zero,81b7f8 <__call_exitprocs+0xe0>
  81b7a4:	8409883a 	add	r4,r16,r16
  81b7a8:	2105883a 	add	r2,r4,r4
  81b7ac:	1485883a 	add	r2,r2,r18
  81b7b0:	10c02017 	ldw	r3,128(r2)
  81b7b4:	a8c01126 	beq	r21,r3,81b7fc <__call_exitprocs+0xe4>
  81b7b8:	843fffc4 	addi	r16,r16,-1
  81b7bc:	85bff81e 	bne	r16,r22,81b7a0 <__call_exitprocs+0x88>
  81b7c0:	d8800217 	ldw	r2,8(sp)
  81b7c4:	10003126 	beq	r2,zero,81b88c <__call_exitprocs+0x174>
  81b7c8:	dfc00c17 	ldw	ra,48(sp)
  81b7cc:	df000b17 	ldw	fp,44(sp)
  81b7d0:	ddc00a17 	ldw	r23,40(sp)
  81b7d4:	dd800917 	ldw	r22,36(sp)
  81b7d8:	dd400817 	ldw	r21,32(sp)
  81b7dc:	dd000717 	ldw	r20,28(sp)
  81b7e0:	dcc00617 	ldw	r19,24(sp)
  81b7e4:	dc800517 	ldw	r18,20(sp)
  81b7e8:	dc400417 	ldw	r17,16(sp)
  81b7ec:	dc000317 	ldw	r16,12(sp)
  81b7f0:	dec00d04 	addi	sp,sp,52
  81b7f4:	f800283a 	ret
  81b7f8:	8409883a 	add	r4,r16,r16
  81b7fc:	88c00117 	ldw	r3,4(r17)
  81b800:	2105883a 	add	r2,r4,r4
  81b804:	1445883a 	add	r2,r2,r17
  81b808:	18ffffc4 	addi	r3,r3,-1
  81b80c:	11800217 	ldw	r6,8(r2)
  81b810:	1c001526 	beq	r3,r16,81b868 <__call_exitprocs+0x150>
  81b814:	10000215 	stw	zero,8(r2)
  81b818:	303fe726 	beq	r6,zero,81b7b8 <__call_exitprocs+0xa0>
  81b81c:	00c00044 	movi	r3,1
  81b820:	1c06983a 	sll	r3,r3,r16
  81b824:	90804017 	ldw	r2,256(r18)
  81b828:	8cc00117 	ldw	r19,4(r17)
  81b82c:	1884703a 	and	r2,r3,r2
  81b830:	10001426 	beq	r2,zero,81b884 <__call_exitprocs+0x16c>
  81b834:	90804117 	ldw	r2,260(r18)
  81b838:	1884703a 	and	r2,r3,r2
  81b83c:	10000c1e 	bne	r2,zero,81b870 <__call_exitprocs+0x158>
  81b840:	2105883a 	add	r2,r4,r4
  81b844:	1485883a 	add	r2,r2,r18
  81b848:	11400017 	ldw	r5,0(r2)
  81b84c:	e009883a 	mov	r4,fp
  81b850:	303ee83a 	callr	r6
  81b854:	88800117 	ldw	r2,4(r17)
  81b858:	98bfc81e 	bne	r19,r2,81b77c <__call_exitprocs+0x64>
  81b85c:	b8800017 	ldw	r2,0(r23)
  81b860:	147fd526 	beq	r2,r17,81b7b8 <__call_exitprocs+0xa0>
  81b864:	003fc506 	br	81b77c <__call_exitprocs+0x64>
  81b868:	8c000115 	stw	r16,4(r17)
  81b86c:	003fea06 	br	81b818 <__call_exitprocs+0x100>
  81b870:	2105883a 	add	r2,r4,r4
  81b874:	1485883a 	add	r2,r2,r18
  81b878:	11000017 	ldw	r4,0(r2)
  81b87c:	303ee83a 	callr	r6
  81b880:	003ff406 	br	81b854 <__call_exitprocs+0x13c>
  81b884:	303ee83a 	callr	r6
  81b888:	003ff206 	br	81b854 <__call_exitprocs+0x13c>
  81b88c:	88800117 	ldw	r2,4(r17)
  81b890:	1000081e 	bne	r2,zero,81b8b4 <__call_exitprocs+0x19c>
  81b894:	89000017 	ldw	r4,0(r17)
  81b898:	20000726 	beq	r4,zero,81b8b8 <__call_exitprocs+0x1a0>
  81b89c:	b9000015 	stw	r4,0(r23)
  81b8a0:	8809883a 	mov	r4,r17
  81b8a4:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  81b8a8:	bc400017 	ldw	r17,0(r23)
  81b8ac:	883fb71e 	bne	r17,zero,81b78c <__call_exitprocs+0x74>
  81b8b0:	003fc506 	br	81b7c8 <__call_exitprocs+0xb0>
  81b8b4:	89000017 	ldw	r4,0(r17)
  81b8b8:	882f883a 	mov	r23,r17
  81b8bc:	2023883a 	mov	r17,r4
  81b8c0:	883fb21e 	bne	r17,zero,81b78c <__call_exitprocs+0x74>
  81b8c4:	003fc006 	br	81b7c8 <__call_exitprocs+0xb0>

0081b8c8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  81b8c8:	defffd04 	addi	sp,sp,-12
  81b8cc:	df000215 	stw	fp,8(sp)
  81b8d0:	df000204 	addi	fp,sp,8
  81b8d4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  81b8d8:	e0bfff17 	ldw	r2,-4(fp)
  81b8dc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  81b8e0:	e0bffe17 	ldw	r2,-8(fp)
  81b8e4:	1005003a 	cmpeq	r2,r2,zero
  81b8e8:	1000021e 	bne	r2,zero,81b8f4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  81b8ec:	002af070 	cmpltui	zero,zero,43969
  81b8f0:	00000106 	br	81b8f8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  81b8f4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  81b8f8:	e037883a 	mov	sp,fp
  81b8fc:	df000017 	ldw	fp,0(sp)
  81b900:	dec00104 	addi	sp,sp,4
  81b904:	f800283a 	ret

0081b908 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  81b908:	defffd04 	addi	sp,sp,-12
  81b90c:	dfc00215 	stw	ra,8(sp)
  81b910:	df000115 	stw	fp,4(sp)
  81b914:	df000104 	addi	fp,sp,4
  81b918:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  81b91c:	008020b4 	movhi	r2,130
  81b920:	10bdf444 	addi	r2,r2,-2095
  81b924:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  81b928:	e13fff17 	ldw	r4,-4(fp)
  81b92c:	081b8c80 	call	81b8c8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  81b930:	003fff06 	br	81b930 <_exit+0x28>
  81b934:	0081b714 	movui	r2,1756
