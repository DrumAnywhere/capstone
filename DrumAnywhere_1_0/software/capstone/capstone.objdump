
capstone.elf:     file format elf32-littlenios2
capstone.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001a0

Program Header:
    LOAD off    0x00001020 vaddr 0x01104020 paddr 0x00800000 align 2**12
         filesz 0x000001a0 memsz 0x000001a0 flags r-x
    LOAD off    0x000021a0 vaddr 0x008001a0 paddr 0x008001a0 align 2**12
         filesz 0x00023344 memsz 0x00023344 flags r-x
    LOAD off    0x000254e4 vaddr 0x008234e4 paddr 0x00825060 align 2**12
         filesz 0x00001b7c memsz 0x00001b7c flags rw-
    LOAD off    0x00027bdc vaddr 0x00826bdc paddr 0x00826bdc align 2**12
         filesz 0x00000000 memsz 0x000097c4 flags rw-
    LOAD off    0x00028000 vaddr 0x01104000 paddr 0x01104000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01104000  01104000  00028000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  01104020  00800000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00022558  008001a0  008001a0  000021a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000dec  008226f8  008226f8  000246f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b7c  008234e4  00825060  000254e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000097c4  00826bdc  00826bdc  00027bdc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00028020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000011f8  00000000  00000000  00028048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000035eb  00000000  00000000  00029240  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003f8b7  00000000  00000000  0002c82b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b59c  00000000  00000000  0006c0e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000247e6  00000000  00000000  0007767e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003e54  00000000  00000000  0009be64  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000030a3  00000000  00000000  0009fcb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00010ba5  00000000  00000000  000a2d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000b3900  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a38  00000000  00000000  000b3930  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000bad19  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000bad1f  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000bad2b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000bad2c  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000bad2d  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000bad31  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000bad35  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000bad39  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000bad44  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000bad4f  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  000bad5a  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000043  00000000  00000000  000bad67  2**0
                  CONTENTS, READONLY
 29 .jdi          000051db  00000000  00000000  000badaa  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00073172  00000000  00000000  000bff85  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01104000 l    d  .entry	00000000 .entry
01104020 l    d  .exceptions	00000000 .exceptions
008001a0 l    d  .text	00000000 .text
008226f8 l    d  .rodata	00000000 .rodata
008234e4 l    d  .rwdata	00000000 .rwdata
00826bdc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001e8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 audio.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 dir.c
00000000 l    df *ABS*	00000000 disc.c
00000000 l    df *ABS*	00000000 efs.c
00000000 l    df *ABS*	00000000 extract.c
00000000 l    df *ABS*	00000000 fat.c
00000000 l    df *ABS*	00000000 file.c
00000000 l    df *ABS*	00000000 fs.c
00000000 l    df *ABS*	00000000 ioman.c
00000000 l    df *ABS*	00000000 ls.c
00000000 l    df *ABS*	00000000 mkfs.c
00000000 l    df *ABS*	00000000 nios2.c
00000000 l    df *ABS*	00000000 nios2_ramdisk.c
00808200 l     F .text	00000024 ramdisk_setup
00808224 l     F .text	00000074 ramdisk_read
00808298 l     F .text	00000074 ramdisk_write
008234e4 l     O .rwdata	0000000c spifuncs
00000000 l    df *ABS*	00000000 partition.c
00000000 l    df *ABS*	00000000 plibc.c
00000000 l    df *ABS*	00000000 sd.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 ui.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
00822edc l     O .rodata	00000108 two_over_pi
00822e5c l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
00822fe4 l     O .rodata	00000010 init_jk
00822ff4 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080c014 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080ce9c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080e050 l     F .text	00000058 __sprint_r
008231ba l     O .rodata	00000010 blanks.3452
008231aa l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
008100b4 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00811ab0 l     F .text	00000058 std
00811bbc l     F .text	00000008 __fp_lock
00811bc4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
008238f8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00824fb8 l     O .rwdata	00000004 charset
008231f0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00823338 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00815bd8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00815c38 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00815d38 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00815e58 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00815f38 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00816094 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
008162dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00824fd4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00816578 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00824fd8 l     O .rwdata	00000004 lockid
00826c10 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00824fdc l     O .rwdata	00000004 lockid
00826c18 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00817fb0 l     F .text	00000044 OS_InitMisc
00817ff4 l     F .text	0000006c OS_InitRdyList
00818158 l     F .text	000000e0 OS_InitTCBList
00817ed4 l     F .text	000000dc OS_InitEventList
00818060 l     F .text	0000007c OS_InitTaskIdle
008180dc l     F .text	0000007c OS_InitTaskStat
008183cc l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0081a2ec l     F .text	00000110 OS_FlagTaskRdy
0081a044 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00823eac l     O .rwdata	0000106c jtag_uart_0
00824f18 l     O .rwdata	00000030 audio_and_video_config_0
00824f48 l     O .rwdata	00000030 audio_0
00824f78 l     O .rwdata	0000002c character_lcd_0
0081ec44 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0081eef4 l     F .text	000002c8 altera_avalon_jtag_uart_irq
0081f1bc l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0081f9d4 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
008211e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008213cc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
008216c8 l     F .text	000000dc alt_file_locked
0082192c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
008224d4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00822688 l     F .text	00000040 alt_sim_halt
00820430 g     F .text	00000038 alt_up_av_config_reset
0080de94 g     F .text	0000001c putchar
0081308c g     F .text	00000094 _mprec_log10
008208d4 g     F .text	00000064 alt_up_av_config_read_D5M_cfg_register
0082502a g     O .rwdata	00000002 OSTaskNameSize
00809198 g     F .text	000001dc sd_getDriveSize
008034a8 g     F .text	00000068 file_write
00813178 g     F .text	00000088 __any_on
00814b4c g     F .text	00000070 _isatty_r
00823310 g     O .rodata	00000028 __mprec_tinytens
008204a0 g     F .text	00000030 alt_up_av_config_disable_interrupt
0080486c g     F .text	00000158 fs_countDataSectors
008160f4 g     F .text	000000c8 alt_main
0080deb8 g     F .text	000000a0 _puts_r
00830110 g     O .bss	00000100 alt_irq
00801744 g     F .text	00000048 disc_initDisc
00801b30 g     F .text	0000014c ex_getPartitionField
0080bb30 g     F .text	00000018 fabs
00814bbc g     F .text	00000078 _lseek_r
0081abe0 g     F .text	000000d0 OS_MemInit
00825060 g       *ABS*	00000000 __flash_rwdata_start
0081eb20 g     F .text	00000064 OSTimeSet
00804594 g     F .text	0000013c fs_loadVolumeId
00806798 g     F .text	000000dc ioman_putSectorInCache
00820ae0 g     F .text	00000034 alt_up_character_lcd_send_cmd
0080cb34 g     F .text	00000088 __eqdf2
00802950 g     F .text	000001b0 fat_getNextClusterChain
00816b2c g     F .text	000006b4 OSEventPendMulti
0081fd48 g     F .text	00000070 alt_up_audio_read_fifo_avail
008303a0 g       *ABS*	00000000 __alt_heap_start
00820570 g     F .text	000000ac alt_up_av_config_write_audio_cfg_register
00821f34 g     F .text	00000020 OSTaskCreateHook
00826ca4 g     O .bss	00002000 task1_stk
00828ca4 g     O .bss	00000048 sdCard
00806988 g     F .text	00000154 ioman_flushRange
0080de1c g     F .text	00000044 printf
00825002 g     O .rwdata	00000002 OSMboxEn
0081fdb8 g     F .text	00000070 alt_up_audio_record_r
00817234 g     F .text	0000007c OSIntEnter
008144cc g     F .text	00000068 __sseek
00811b18 g     F .text	000000a4 __sinit
008146cc g     F .text	00000130 __swbuf_r
00825012 g     O .rwdata	00000002 OSQEn
00807ee4 g     F .text	00000044 if_spiInit
008127f0 g     F .text	00000084 _setlocale_r
00811c18 g     F .text	00000068 __sfmoreglue
008167e8 g     F .text	000000d0 __malloc_unlock
008060d4 g     F .text	00000068 ioman_getPtr
00821f90 g     F .text	0000001c OSTaskStatHook
00826c20 g     O .bss	00000001 OSLockNesting
00825050 g     O .rwdata	00000002 OSDataSize
00826c21 g     O .bss	00000001 OSRunning
0081fcc0 g     F .text	00000088 alt_up_audio_reset_audio_core
00805f14 g     F .text	000001c0 ioman_push
00806458 g     F .text	00000084 ioman_findFreeSpot
00812b08 g     F .text	000000e0 memmove
00821fc8 g     F .text	0000001c OSInitHookBegin
00809094 g     F .text	00000104 sd_readSector
00825048 g     O .rwdata	00000002 OSTmrSize
00811c08 g     F .text	00000010 _cleanup
00813200 g     F .text	000000bc _Balloc
00826c24 g     O .bss	00000004 OSIdleCtr
0080cbbc g     F .text	00000088 __gtdf2
00808c2c g     F .text	000001d8 sd_Resp8bError
00821c00 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
00820a64 g     F .text	0000007c get_DDRAM_addr
00818700 g     F .text	000002e0 OS_TCBInit
00803ee4 g     F .text	00000278 file_normalToFatName
01104000 g     F .entry	0000001c __reset
0082504e g     O .rwdata	00000002 OSTmrWheelTblSize
00800f1c g     F .text	00000088 dir_updateDirectoryEntry
00800000 g       *ABS*	00000000 __flash_exceptions_start
00824fee g     O .rwdata	00000002 OSEventSize
00826c28 g     O .bss	00000001 OSPrioHighRdy
00814ad8 g     F .text	00000074 _fstat_r
00821f54 g     F .text	00000020 OSTaskDelHook
00826bf0 g     O .bss	00000004 errno
0080bb48 g     F .text	00000224 floor
00821be0 g       .text	00000000 OSStartHighRdy
00808598 g     F .text	00000060 part_getSect
0081d2f4 g     F .text	00000200 OSTaskCreateExt
00808a94 g     F .text	000000b4 sd_Command
00819b60 g     F .text	00000068 OSFlagPendGetFlagsRdy
0082502e g     O .rwdata	00000002 OSTaskStatStkSize
0081fc84 g     F .text	0000003c alt_up_audio_write_interrupt_pending
00818b6c g     F .text	00000334 OSFlagAccept
00801280 g     F .text	00000124 dir_findinCluster
0081b318 g     F .text	000000c8 OSQFlush
00808b48 g     F .text	0000007c sd_Resp8b
00807718 g     F .text	00000110 ls_getRootAreaEntry
0081acb0 g     F .text	00000154 OSQAccept
00826c08 g     O .bss	00000004 alt_argv
00805960 g     F .text	0000006c ioman_getUseCnt
0082cfa4 g       *ABS*	00000000 _gp
008013a4 g     F .text	000000f8 dir_findinDir
0081d120 g     F .text	000001d4 OSTaskCreate
0081cbac g     F .text	00000574 OSTaskChangePrio
00826c1c g     O .bss	00000004 alt_heapsem
008189e0 g     F .text	0000018c OSDebugInit
0081d4f4 g     F .text	0000040c OSTaskDel
0080266c g     F .text	000002e4 fat_setNextClusterAddressWBuf
00804c08 g     F .text	000000fc fs_sectorToCluster
00801ca4 g     F .text	00000128 fat_getSectorAddressFatEntry
008078b8 g     F .text	000000a4 ls_fileEntryToDirListEntry
00823d2c g     O .rwdata	00000180 alt_fd_list
0082ceec g     O .bss	00000370 OSFlagTbl
00809c48 g     F .text	00000828 __ieee754_rem_pio2
0080deb0 g     F .text	00000008 _putchar_r
0080748c g     F .text	0000008c ls_getDirEntry
00817cb0 g     F .text	000000b8 OS_EventTaskRemove
00821308 g     F .text	00000094 alt_find_dev
0080dd7c g     F .text	000000a0 memcpy
00825018 g     O .rwdata	00000002 OSRdyTblSize
00820c78 g     F .text	0000004c alt_up_character_lcd_write_fd
00811bfc g     F .text	0000000c _cleanup_r
0080cccc g     F .text	000000f8 __floatsidf
00821490 g     F .text	00000078 alt_io_redirect
008158c0 g     F .text	00000088 __ltdf2
00807230 g     F .text	000001a4 ioman_printStatus
008075c0 g     F .text	00000158 ls_getRealDirEntry
008226f8 g       *ABS*	00000000 __DTOR_END__
0080df58 g     F .text	00000014 puts
008168b8 g     F .text	00000130 OSEventNameGet
00824ffc g     O .rwdata	00000002 OSFlagMax
00812fdc g     F .text	000000b0 __ratio
008172b0 g     F .text	00000100 OSIntExit
00825036 g     O .rwdata	00000002 OSTCBSize
0082021c g     F .text	00000060 alt_up_audio_read_fifo_head
00826c29 g     O .bss	00000001 OSPrioCur
0081f438 g     F .text	000002c0 altera_avalon_jtag_uart_read
0080d628 g     F .text	00000014 malloc
0080de60 g     F .text	00000034 _printf_r
008049c4 g     F .text	0000007c fs_determineFatType
00800df4 g     F .text	000000a8 dir_setFirstCluster
01104000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00804464 g     F .text	000000bc fs_initFs
0080cfd8 g     F .text	00000008 __udivsi3
00815d98 g     F .text	000000c0 isatty
00804314 g     F .text	00000150 file_requiredCluster
0082501c g     O .rwdata	00000002 OSStkWidth
00823220 g     O .rodata	000000c8 __mprec_tens
00825010 g     O .rwdata	00000002 OSPtrSize
00804b3c g     F .text	000000cc fs_clusterToSector
00801950 g     F .text	00000060 ex_getb16
008127cc g     F .text	00000008 __locale_charset
0080a470 g     F .text	0000052c __kernel_cos
00824ff0 g     O .rwdata	00000002 OSEventTblSize
00801828 g     F .text	00000128 efs_init
0080bf70 g     F .text	000000a4 __fixunsdfsi
00821b54 g       .text	00000000 OSCtxSw
00822250 g     F .text	00000090 alt_icache_flush
00826be4 g     O .bss	00000004 __malloc_top_pad
00826c2c g     O .bss	00000004 OSTCBList
00826c00 g     O .bss	00000004 alt_fd_list_lock
008203a4 g     F .text	0000008c alt_up_av_config_read_data
00824fb4 g     O .rwdata	00000004 __mb_cur_max
008127d4 g     F .text	0000000c _localeconv_r
00806874 g     F .text	00000114 ioman_flushSector
008138f8 g     F .text	0000003c __i2b
008121b0 g     F .text	0000049c __sfvwrite_r
0082d25c g     O .bss	00000c30 OSMemTbl
00826c30 g     O .bss	00000001 OSTickStepState
00826bdc g     O .bss	00000004 audio_dev
008061f4 g     F .text	0000008c ioman_readSector
0080df6c g     F .text	00000070 _sbrk_r
00808460 g     F .text	00000070 part_readBuf
00825014 g     O .rwdata	00000002 OSQMax
0082de8c g     O .bss	00000800 OSTaskStatStk
0081a7c8 g     F .text	0000010c OSMemNameGet
008042d0 g     F .text	00000044 file_getAttr
00824ff4 g     O .rwdata	00000002 OSFlagEn
008064dc g     F .text	00000170 ioman_findUnusedSpot
00814c34 g     F .text	00000078 _read_r
0082503a g     O .rwdata	00000002 OSTimeTickHookEn
00808540 g     F .text	00000058 part_getRealLBA
0081b87c g     F .text	00000180 OSQPost
0081a3fc g     F .text	000000ac OS_FlagUnlink
00823cf8 g     O .rwdata	0000000c __lc_ctype
00824fcc g     O .rwdata	00000004 alt_max_fd
0081828c g     F .text	0000006c OS_MemCopy
0082027c g     F .text	00000060 alt_up_audio_write_fifo_head
008182f8 g     F .text	000000d4 OS_Sched
0080d414 g     F .text	00000138 __unpack_d
008149b4 g     F .text	00000110 _fclose_r
0080415c g     F .text	000000e8 file_validateChar
0081a6c4 g     F .text	00000104 OSMemGet
00808334 g     F .text	000000b0 part_initPartition
0081dc28 g     F .text	000001c4 OSTaskNameSet
00811a7c g     F .text	00000034 fflush
00826be8 g     O .bss	00000004 __malloc_max_sbrked_mem
00826c34 g     O .bss	00000004 OSCtxSwCtr
00821fac g     F .text	0000001c OSTimeTickHook
00821508 g     F .text	000001c0 alt_irq_register
00824ffe g     O .rwdata	00000002 OSFlagNameSize
0080b818 g     F .text	00000318 __kernel_sin
00817d68 g     F .text	00000104 OS_EventTaskRemoveMulti
00806bb0 g     F .text	0000030c ioman_getSector
0080c4a4 g     F .text	00000074 __adddf3
00817b5c g     F .text	00000154 OS_EventTaskWaitMulti
00812ebc g     F .text	00000120 __b2d
008011f4 g     F .text	0000008c dir_findinBuf
00825016 g     O .rwdata	00000002 OSQSize
00809374 g     F .text	00000020 fs_makeDate
00815288 g     F .text	000005b0 __umoddi3
00815fa4 g     F .text	000000f0 lseek
0081c458 g     F .text	0000027c OSSemPend
00824fb0 g     O .rwdata	00000004 _global_impure_ptr
00813e60 g     F .text	000005f4 _realloc_r
00825000 g     O .rwdata	00000002 OSLowestPrio
008303a0 g       *ABS*	00000000 __bss_end
0082201c g     F .text	00000020 OSTCBInitHook
00825046 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00821a24 g     F .text	00000110 alt_tick
00814cac g     F .text	000005dc __udivdi3
008086c8 g     F .text	0000006c part_directSectorRead
008063ac g     F .text	000000ac ioman_findSectorInCache
00809394 g     F .text	00000020 fs_makeTime
00824fe8 g     O .rwdata	00000002 OSEventEn
008232e8 g     O .rodata	00000028 __mprec_bigtens
00813b54 g     F .text	00000120 __s2b
00825042 g     O .rwdata	00000002 OSTmrCfgNameSize
00815948 g     F .text	00000194 __floatunsidf
00812ddc g     F .text	00000060 __mcmp
0080664c g     F .text	0000014c ioman_findOverallocableSpot
0081fad0 g     F .text	00000040 alt_up_audio_open_dev
00811be4 g     F .text	00000018 __fp_lock_all
008088f8 g     F .text	0000005c memSet
008016b4 g     F .text	00000090 dir_addCluster
00807ebc g     F .text	00000028 if_setPos
0081a208 g     F .text	000000e4 OS_FlagInit
00809814 g     F .text	000002c8 makedir
0081ff0c g     F .text	00000070 alt_up_audio_play_r
0082198c g     F .text	00000098 alt_alarm_stop
00825024 g     O .rwdata	00000002 OSTaskIdleStkSize
00826c70 g     O .bss	00000004 alt_irq_active
0081bfe4 g     F .text	000000c0 OSSemAccept
0081a9f4 g     F .text	000000f0 OSMemPut
00804da8 g     F .text	00000240 fs_findFile
008024a4 g     F .text	000001c8 fat_getNextClusterAddressWBuf
0081a4a8 g     F .text	0000021c OSMemCreate
00826c38 g     O .bss	00000004 OSIdleCtrMax
00804fe8 g     F .text	00000120 fs_findFreeFile
011040ec g     F .exceptions	000000d4 alt_irq_handler
00823d04 g     O .rwdata	00000028 alt_dev_null
00825038 g     O .rwdata	00000002 OSTicksPerSec
0080a99c g     F .text	00000e7c __kernel_rem_pio2
00801aa0 g     F .text	00000090 ex_setb32
00820f60 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00807518 g     F .text	000000a8 ls_getNext
00821b54 g       .text	00000000 OSIntCtxSw
00805658 g     F .text	00000170 ioman_reset
008210e8 g     F .text	00000044 alt_dcache_flush_all
00812ca8 g     F .text	00000070 __hi0bits
0080cdc4 g     F .text	000000d8 __fixdfsi
00805c50 g     F .text	00000094 ioman_decRefCnt
00805294 g     F .text	00000048 fs_setFirstClusterInDirEntry
00826c3c g     O .bss	00000004 OSTCBFreeList
00825060 g       *ABS*	00000000 __ram_rwdata_end
0081c6d4 g     F .text	0000017c OSSemPendAbort
00824fc4 g     O .rwdata	00000008 alt_dev_list
00816458 g     F .text	00000120 write
00813d78 g     F .text	000000e8 _putc_r
0082503c g     O .rwdata	00000002 OSVersionNbr
008234e4 g       *ABS*	00000000 __ram_rodata_end
008051e0 g     F .text	00000054 fs_getFirstClusterRootDir
00815c64 g     F .text	000000d4 fstat
00824fe4 g     O .rwdata	00000004 OSEndiannessTest
00813a34 g     F .text	00000120 __pow5mult
00826bf4 g     O .bss	00000004 __nlocale_changed
0080cfe0 g     F .text	00000008 __umodsi3
00802b00 g     F .text	00000130 fat_LogicToDiscCluster
00801ff4 g     F .text	00000374 fat_setNextClusterAddress
00824ff6 g     O .rwdata	00000002 OSFlagGrpSize
008303a0 g       *ABS*	00000000 end
0081edc4 g     F .text	00000130 altera_avalon_jtag_uart_init
00818570 g     F .text	000000c8 OS_TaskStat
00803128 g     F .text	00000080 fat_countFreeClusters
008038b0 g     F .text	00000478 file_fopen
008226f4 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0081fa48 g     F .text	00000088 alt_avalon_timer_sc_init
0080d080 g     F .text	00000080 __clzsi2
0081f6f8 g     F .text	000002dc altera_avalon_jtag_uart_write
0080149c g     F .text	00000144 dir_findinRootArea
00811b08 g     F .text	00000004 __sfp_lock_acquire
00812a24 g     F .text	000000e4 memchr
00818238 g     F .text	00000054 OS_MemClr
00820b88 g     F .text	00000078 alt_up_character_lcd_write
0080e0a8 g     F .text	00001eac ___vfprintf_internal_r
00821c24 g     F .text	00000310 OSTaskStkInit
00811e9c g     F .text	00000314 _free_r
008178b8 g     F .text	00000194 OS_EventTaskRdy
0080613c g     F .text	000000b8 ioman_getBp
00801dcc g     F .text	00000228 fat_getNextClusterAddress
00805a60 g     F .text	00000094 ioman_decUseCnt
008224d8 g     F .text	000001b0 __call_exitprocs
00803440 g     F .text	00000068 file_read
00826c40 g     O .bss	00000001 OSCPUUsage
00826bf8 g     O .bss	00000004 __mlocale_changed
00824fa8 g     O .rwdata	00000004 __malloc_sbrk_base
008001a0 g     F .text	0000004c _start
00826c74 g     O .bss	00000004 _alt_tick_rate
0081b3e0 g     F .text	00000320 OSQPend
008052dc g     F .text	0000004c fs_flushFs
00809adc g     F .text	0000016c sin
0081e5ec g     F .text	0000014c OSTimeDly
008200f0 g     F .text	0000012c alt_up_audio_write_fifo
00803078 g     F .text	000000b0 fat_DiscToLogicCluster
008135c4 g     F .text	0000014c __lshift
00820340 g     F .text	00000064 alt_up_av_config_write_data
00826c78 g     O .bss	00000004 _alt_nticks
008161bc g     F .text	00000120 read
0081ebb8 g     F .text	0000008c alt_sys_init
00820dec g     F .text	000000b0 alt_up_character_lcd_shift_display
00800cc0 g     F .text	00000084 dir_createDirectoryEntry
0081ffec g     F .text	00000104 alt_up_audio_read_fifo
008083e4 g     F .text	0000007c part_isFatPart
008223a0 g     F .text	00000134 __register_exitproc
00826c41 g     O .bss	00000001 OSTaskCtr
00820a00 g     F .text	00000064 alt_up_av_config_write_LTM_cfg_register
0081fbf8 g     F .text	00000050 alt_up_audio_disable_write_interrupt
00807f28 g     F .text	00000120 if_spiSend
0081e738 g     F .text	00000174 OSTimeDlyHMSM
00813710 g     F .text	000001e8 __multiply
008057c8 g     F .text	0000002c ioman_getBuffer
00820e9c g     F .text	00000090 alt_up_character_lcd_erase_pos
0081f2d0 g     F .text	00000074 altera_avalon_jtag_uart_close
008234e4 g       *ABS*	00000000 __ram_rwdata_start
008226f8 g       *ABS*	00000000 __ram_rodata_start
00826c7c g     O .bss	00000028 __malloc_current_mallinfo
00824fea g     O .rwdata	00000002 OSEventMax
008132bc g     F .text	0000017c __d2b
0081c850 g     F .text	00000128 OSSemPost
00805328 g     F .text	0000003c fs_umount
00804d84 g     F .text	00000024 fs_giveFreeClusterHint
008088a4 g     F .text	00000054 memClr
00806280 g     F .text	0000008c ioman_writeSector
0081743c g     F .text	000000e4 OSSchedUnlock
00805108 g     F .text	000000d8 fs_getLastCluster
0081ec7c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0082215c g     F .text	000000f4 alt_get_fd
00826c44 g     O .bss	00000004 OSMemFreeList
00817590 g     F .text	000000ac OSStatInit
00819f70 g     F .text	000000d4 OSFlagQuery
0080d54c g     F .text	000000c8 __fpcmp_parts_d
00806ebc g     F .text	000000e0 ioman_releaseSector
00825020 g     O .rwdata	00000002 OSTaskCreateExtEn
00814944 g     F .text	00000070 _close_r
0081fbac g     F .text	0000004c alt_up_audio_enable_write_interrupt
0082232c g     F .text	00000074 memcmp
0081789c g     F .text	0000001c OS_Dummy
0081ed2c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
008303a0 g       *ABS*	00000000 __alt_stack_base
0081ed74 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00804a40 g     F .text	000000c0 fs_findFirstSectorRootDir
00805510 g     F .text	000000d0 fs_setFsInfo
0080ff78 g     F .text	0000013c __swsetup_r
0082e68c g     O .bss	000001e0 OSQTbl
0080c8dc g     F .text	00000258 __divdf3
0081fb5c g     F .text	00000050 alt_up_audio_disable_read_interrupt
00811c80 g     F .text	000000f0 __sfp
00813120 g     F .text	00000058 __copybits
008234f0 g     O .rwdata	00000408 __malloc_av_
00800d44 g     F .text	000000b0 dir_createDefaultEntry
00811b14 g     F .text	00000004 __sinit_lock_release
00826c48 g     O .bss	00000004 OSTCBHighRdy
0080c518 g     F .text	000003c4 __muldf3
008145b0 g     F .text	00000060 __sread
00826c4c g     O .bss	00000004 OSQFreeList
0082203c g     F .text	00000120 alt_find_file
008070c4 g     F .text	0000016c ioman_directSectorWrite
0082112c g     F .text	000000b4 alt_dev_llist_insert
008166e0 g     F .text	00000108 __malloc_lock
0081639c g     F .text	000000bc sbrk
00808838 g     F .text	0000006c memCpy
008084d0 g     F .text	00000070 part_writeBuf
008169e8 g     F .text	00000144 OSEventNameSet
00811880 g     F .text	000001fc _fflush_r
00814890 g     F .text	000000b4 _calloc_r
00826c50 g     O .bss	00000001 OSRdyGrp
00807e70 g     F .text	0000004c if_writeBuf
008055e0 g     F .text	00000078 ioman_init
00807828 g     F .text	00000090 ls_isValidFileEntry
008073d4 g     F .text	000000b8 ls_openDir
00826bdc g       *ABS*	00000000 __bss_start
00806adc g     F .text	000000d4 ioman_flushAll
00812be8 g     F .text	00000098 memset
008001ec g     F .text	000002c8 main
0081fe98 g     F .text	00000074 alt_up_audio_write_fifo_space
00826c0c g     O .bss	00000004 alt_envp
00826bec g     O .bss	00000004 __malloc_max_total_mem
0081ecd4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
008147fc g     F .text	0000001c __swbuf
00823364 g     O .rodata	00000100 OSUnMapTbl
00808fc0 g     F .text	000000d4 sd_writeSector
0082501a g     O .rwdata	00000002 OSSemEn
00820d3c g     F .text	000000b0 alt_up_character_lcd_shift_cursor
00819bc8 g     F .text	000003a8 OSFlagPost
008019b0 g     F .text	00000098 ex_getb32
008144c4 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00826be0 g     O .bss	00000004 lcd_sem
00814ac4 g     F .text	00000014 fclose
00817a4c g     F .text	00000110 OS_EventTaskWait
00828cec g     O .bss	00002000 task2_stk
00818638 g     F .text	000000c8 OS_TaskStatStkChk
00830210 g     O .bss	00000190 _atexit0
0081d900 g     F .text	00000170 OSTaskDelReq
008102cc g     F .text	000015b4 _dtoa_r
0080d63c g     F .text	00000740 _malloc_r
00824fd0 g     O .rwdata	00000004 alt_errno
00817520 g     F .text	00000070 OSStart
0082acec g     O .bss	00002000 task3_stk
00816684 g     F .text	0000005c __env_unlock
00812714 g     F .text	000000b8 _fwalk
0081ddec g     F .text	00000218 OSTaskResume
0081aae4 g     F .text	000000fc OSMemQuery
0082502c g     O .rwdata	00000002 OSTaskStatEn
00801c7c g     F .text	00000028 ex_setPartitionField
00805bbc g     F .text	00000094 ioman_incRefCnt
00825006 g     O .rwdata	00000002 OSMemMax
0081b9fc g     F .text	00000188 OSQPostFront
00813c74 g     F .text	00000104 putc
0080cf18 g     F .text	00000060 __divsi3
00826c51 g     O .bss	00000003 OSRdyTbl
00824fe0 g     O .rwdata	00000002 OSDebugEn
00823034 g     O .rodata	00000014 __thenan_df
00820b48 g     F .text	00000040 alt_up_character_lcd_open_dev
00811d70 g     F .text	0000012c _malloc_trim_r
008226f8 g       *ABS*	00000000 __CTOR_END__
00824ff8 g     O .rwdata	00000002 OSFlagNodeSize
00800fa4 g     F .text	00000158 dir_findFileinBuf
00825040 g     O .rwdata	00000002 OSTmrCfgMax
00820b14 g     F .text	00000034 alt_up_character_lcd_init
00814610 g     F .text	000000bc strcmp
0081ae04 g     F .text	00000214 OSQCreate
0081da70 g     F .text	000001b8 OSTaskNameGet
008226f8 g       *ABS*	00000000 __flash_rodata_start
0081bb84 g     F .text	00000234 OSQPostOpt
0081763c g     F .text	00000240 OSTimeTick
00825028 g     O .rwdata	00000002 OSTaskMax
008226f8 g       *ABS*	00000000 __DTOR_LIST__
0081c0a4 g     F .text	00000114 OSSemCreate
0082504c g     O .rwdata	00000002 OSTmrWheelSize
008057f4 g     F .text	000000e4 ioman_setAttr
00802368 g     F .text	000000b4 fat_isEocMarker
0080bf4c g     F .text	00000024 copysign
008096d4 g     F .text	00000140 rmfile
00815838 g     F .text	00000088 __nedf2
00825022 g     O .rwdata	00000002 OSTaskDelEn
00806f9c g     F .text	00000128 ioman_directSectorRead
01080000 g       *ABS*	00000000 __alt_mem_sram_0
008085f8 g     F .text	0000004c part_relSect
008202dc g     F .text	00000064 alt_up_av_config_open_dev
0080830c g     F .text	00000028 ramdisk_init
00805d40 g     F .text	000001d4 ioman_pop
00808644 g     F .text	00000084 part_flushPart
0081c978 g     F .text	00000130 OSSemQuery
0081b018 g     F .text	00000300 OSQDel
0081b700 g     F .text	0000017c OSQPendAbort
0081eb84 g     F .text	00000034 alt_irq_init
0081633c g     F .text	00000060 alt_release_fd
00801a48 g     F .text	00000058 ex_setb16
00802c30 g     F .text	000002cc fat_allocClusterChain
0080241c g     F .text	00000088 fat_giveEocMarker
008093d4 g     F .text	00000300 listFiles
008058d8 g     F .text	00000088 ioman_getAttr
00805af4 g     F .text	0000005c ioman_resetUseCnt
00820f2c g     F .text	00000034 alt_up_character_lcd_cursor_off
00823048 g     O .rodata	00000100 __clz_tab
008031a8 g     F .text	00000298 file_fread
00826bfc g     O .bss	00000004 _PathLocale
008093b4 g     F .text	00000020 fs_hasTimeSupport
008222e0 g     F .text	00000014 atexit
00814818 g     F .text	00000078 _write_r
00820538 g     F .text	00000038 alt_up_av_config_read_ready
008087a0 g     F .text	00000098 strMatch
008173b0 g     F .text	0000008c OSSchedLock
00812874 g     F .text	0000001c setlocale
00818ea0 g     F .text	0000013c OSFlagCreate
00824fac g     O .rwdata	00000004 _impure_ptr
00808048 g     F .text	000000d0 if_spi_sendbuf
00826c04 g     O .bss	00000004 alt_argc
0080bd6c g     F .text	000001e0 scalbn
008212a4 g     F .text	00000064 _do_dtors
00824ff2 g     O .rwdata	00000002 OSEventMultiEn
00818fdc g     F .text	000002a8 OSFlagDel
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00826c54 g     O .bss	00000004 OSEventFreeList
01104020 g       .exceptions	00000000 alt_irq_entry
00812e3c g     F .text	00000080 __ulp
00814454 g     F .text	00000040 __isinfd
0081951c g     F .text	00000644 OSFlagPend
0082503e g     O .rwdata	00000002 OSTmrEn
00811bcc g     F .text	00000018 __fp_unlock_all
00824fbc g     O .rwdata	00000008 alt_fs_list
0081843c g     F .text	00000080 OS_StrCopy
0081fe28 g     F .text	00000070 alt_up_audio_record_l
00804244 g     F .text	0000008c file_setAttr
00825008 g     O .rwdata	00000002 OSMemNameSize
00821fe4 g     F .text	0000001c OSInitHookEnd
00804d04 g     F .text	00000080 fs_getNextFreeCluster
01104020 g       *ABS*	00000000 __ram_exceptions_start
00825034 g     O .rwdata	00000002 OSTCBPrioTblMax
008127e0 g     F .text	00000010 localeconv
00825030 g     O .rwdata	00000002 OSTaskStatStkChkEn
00803d28 g     F .text	00000100 file_fclose
00820468 g     F .text	00000038 alt_up_av_config_enable_interrupt
00805b50 g     F .text	0000006c ioman_getRefCnt
00825004 g     O .rwdata	00000002 OSMemEn
0082500e g     O .rwdata	00000002 OSMutexEn
008204d0 g     F .text	00000068 alt_up_av_config_read_acknowledge
00805ce4 g     F .text	0000005c ioman_resetRefCnt
00820870 g     F .text	00000064 alt_up_av_config_write_DC2_cfg_register
00825060 g       *ABS*	00000000 _edata
00802fd4 g     F .text	000000a4 fat_countClustersInChain
008303a0 g       *ABS*	00000000 _end
00800e9c g     F .text	00000080 dir_setFileSize
00826c58 g     O .bss	00000001 OSIntNesting
008046d0 g     F .text	0000019c fs_verifySanity
008015e0 g     F .text	000000d4 dir_getFatFileName
011041c0 g       *ABS*	00000000 __ram_exceptions_end
0081f344 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080795c g     F .text	000003e4 mkfs_makevfat
0080178c g     F .text	0000009c disc_loadMBR
0081e8ac g     F .text	00000210 OSTimeDlyResume
0082ccec g     O .bss	00000200 l_buf
00802efc g     F .text	000000d8 fat_unlinkClusterChain
008193c8 g     F .text	00000154 OSFlagNameSet
0081ff7c g     F .text	00000070 alt_up_audio_play_l
0081e004 g     F .text	000001fc OSTaskStkChk
0082500a g     O .rwdata	00000002 OSMemSize
00800c04 g     F .text	000000bc dir_getFileStructure
00814534 g     F .text	0000007c __swrite
00824fa4 g     O .rwdata	00000004 __malloc_trim_threshold
00821b34 g     F .text	00000020 altera_nios2_qsys_irq_init
00826c5c g     O .bss	00000004 OSTCBCur
008222f4 g     F .text	00000038 exit
0082500c g     O .rwdata	00000002 OSMemTblSize
0081264c g     F .text	000000c8 _fwalk_reent
00813438 g     F .text	0000018c __mdiff
0082099c g     F .text	00000064 alt_up_av_config_read_LTM_cfg_register
0080cf78 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
01104020 g     F .exceptions	00000000 alt_exception
00811b0c g     F .text	00000004 __sfp_lock_release
008171e0 g     F .text	00000054 OSInit
0081e42c g     F .text	00000144 OSTaskQuery
00807e20 g     F .text	00000050 if_readBuf
008059cc g     F .text	00000094 ioman_incUseCnt
00820c00 g     F .text	00000078 alt_up_character_lcd_string
0081bf38 g     F .text	000000ac OS_QInit
008184bc g     F .text	00000058 OS_StrLen
0081a8d4 g     F .text	00000120 OSMemNameSet
00808118 g     F .text	000000e8 if_spi_readbuf
00808bc4 g     F .text	00000068 sd_Resp16b
00805414 g     F .text	000000fc fs_getFsInfo
00825026 g     O .rwdata	00000002 OSTaskProfileEn
008004b4 g     F .text	00000750 sdRead
00826c60 g     O .bss	00000004 OSTime
0082e86c g     O .bss	00000800 OSTaskIdleStk
008226c8 g     F .text	0000002c _exit
00814494 g     F .text	00000030 __isnand
00820f94 g     F .text	00000154 alt_alarm_start
00819284 g     F .text	00000144 OSFlagNameGet
0081eabc g     F .text	00000064 OSTimeGet
0080cfe8 g     F .text	00000098 __muldi3
00812890 g     F .text	00000194 __smakebuf_r
00803510 g     F .text	00000054 file_setpos
00803e28 g     F .text	000000bc file_initFile
0080dfdc g     F .text	00000074 strlen
00821f74 g     F .text	0000001c OSTaskSwHook
008217a4 g     F .text	00000188 open
0082f06c g     O .bss	00000b40 OSEventTbl
0080cc44 g     F .text	00000088 __gedf2
00805234 g     F .text	00000060 fs_initClusterChain
0082fbac g     O .bss	00000510 OSTCBTbl
0081caa8 g     F .text	00000104 OSSemSet
0082061c g     F .text	000000f8 alt_up_av_config_read_video_cfg_register
0080630c g     F .text	000000a0 ioman_resetCacheItem
0082139c g     F .text	00000030 alt_icache_flush_all
00820cc4 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
00825054 g     O .rwdata	00000004 alt_priority_mask
00804b00 g     F .text	0000003c fs_initCurrentDir
0081c1b8 g     F .text	000002a0 OSSemDel
00826c64 g     O .bss	00000004 OSFlagFreeList
00824fec g     O .rwdata	00000002 OSEventNameSize
0080ff54 g     F .text	00000024 __vfprintf_internal
00826c68 g     O .bss	00000001 OSStatRdy
00820938 g     F .text	00000064 alt_up_av_config_write_D5M_cfg_register
008300bc g     O .bss	00000054 OSTCBPrioTbl
008165d8 g     F .text	000000ac __env_lock
00825032 g     O .rwdata	00000002 OSTaskSwHookEn
00805364 g     F .text	000000b0 fs_clearCluster
0080c424 g     F .text	00000080 __subdf3
00808734 g     F .text	0000006c part_directSectorWrite
00808e04 g     F .text	000001bc sd_State
00812d18 g     F .text	000000c4 __lo0bits
00808954 g     F .text	00000140 sd_Init
00825058 g     O .rwdata	00000008 alt_alarm_list
00824ffa g     O .rwdata	00000002 OSFlagWidth
00821240 g     F .text	00000064 _do_ctors
008010fc g     F .text	000000f8 dir_findFreeEntryinBuf
00815adc g     F .text	000000fc close
00826c14 g     O .bss	00000004 alt_envsem
00826c6c g     O .bss	00000004 OSIdleCtrRun
00807d40 g     F .text	000000e0 if_initInterface
0081787c g     F .text	00000020 OSVersion
00803564 g     F .text	0000034c file_fwrite
00825044 g     O .rwdata	00000002 OSTmrCfgWheelSize
00815eb8 g     F .text	00000080 alt_load
0081fb10 g     F .text	0000004c alt_up_audio_enable_read_interrupt
0081e570 g     F .text	0000007c OS_TaskStkClr
00820714 g     F .text	000000f8 alt_up_av_config_write_video_cfg_register
0080d100 g     F .text	00000314 __pack_d
0082501e g     O .rwdata	00000002 OSTaskCreateEn
00817e6c g     F .text	00000068 OS_EventWaitListInit
00822000 g     F .text	0000001c OSTaskIdleHook
0080d614 g     F .text	00000014 free
00811b10 g     F .text	00000004 __sinit_lock_acquire
00813934 g     F .text	00000100 __multadd
0081e200 g     F .text	0000022c OSTaskSuspend
00812c80 g     F .text	00000028 _Bfree
00804520 g     F .text	00000074 fs_isValidFat
0082080c g     F .text	00000064 alt_up_av_config_read_DC2_cfg_register
00818514 g     F .text	0000005c OS_TaskIdle
0082504a g     O .rwdata	00000002 OSTmrTblSize
0081fc48 g     F .text	0000003c alt_up_audio_read_interrupt_pending
0081bdb8 g     F .text	00000180 OSQQuery



Disassembly of section .entry:

01104000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1104000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1104004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1104008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 110400c:	00bffd16 	blt	zero,r2,1104004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1104010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
 1104014:	08406814 	ori	at,at,416
    jmp r1
 1104018:	0800683a 	jmp	at
 110401c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

01104020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1104020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1104024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1104028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 110402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1104030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1104034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1104038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 110403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1104040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1104044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1104048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 110404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1104050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1104054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1104058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 110405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1104060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1104064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1104068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 110406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1104070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1104074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1104078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 110407c:	10000326 	beq	r2,zero,110408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1104080:	20000226 	beq	r4,zero,110408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1104084:	11040ec0 	call	11040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1104088:	00000306 	br	1104098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 110408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1104090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1104094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1104098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 110409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 11040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 11040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 11040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 11040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 11040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 11040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 11040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 11040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 11040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 11040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 11040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 11040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 11040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 11040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 11040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 11040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 11040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 11040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 11040e8:	ef80083a 	eret

011040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 11040ec:	defff904 	addi	sp,sp,-28
 11040f0:	dfc00615 	stw	ra,24(sp)
 11040f4:	df000515 	stw	fp,20(sp)
 11040f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 11040fc:	08172340 	call	817234 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1104100:	0005313a 	rdctl	r2,ipending
 1104104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1104108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 110410c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 1104110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1104114:	00800044 	movi	r2,1
 1104118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 110411c:	e0ffff17 	ldw	r3,-4(fp)
 1104120:	e0bffe17 	ldw	r2,-8(fp)
 1104124:	1884703a 	and	r2,r3,r2
 1104128:	1005003a 	cmpeq	r2,r2,zero
 110412c:	1000171e 	bne	r2,zero,110418c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 1104130:	e0bffd17 	ldw	r2,-12(fp)
 1104134:	00c020f4 	movhi	r3,131
 1104138:	18c04404 	addi	r3,r3,272
 110413c:	100490fa 	slli	r2,r2,3
 1104140:	10c5883a 	add	r2,r2,r3
 1104144:	11800017 	ldw	r6,0(r2)
 1104148:	e0bffd17 	ldw	r2,-12(fp)
 110414c:	00c020f4 	movhi	r3,131
 1104150:	18c04404 	addi	r3,r3,272
 1104154:	100490fa 	slli	r2,r2,3
 1104158:	10c5883a 	add	r2,r2,r3
 110415c:	10800104 	addi	r2,r2,4
 1104160:	11000017 	ldw	r4,0(r2)
 1104164:	e17ffd17 	ldw	r5,-12(fp)
 1104168:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110416c:	0005313a 	rdctl	r2,ipending
 1104170:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1104174:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1104178:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 110417c:	e0bfff17 	ldw	r2,-4(fp)
 1104180:	1004c03a 	cmpne	r2,r2,zero
 1104184:	103fe21e 	bne	r2,zero,1104110 <alt_irq_handler+0x24>
 1104188:	00000706 	br	11041a8 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 110418c:	e0bffe17 	ldw	r2,-8(fp)
 1104190:	1085883a 	add	r2,r2,r2
 1104194:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1104198:	e0bffd17 	ldw	r2,-12(fp)
 110419c:	10800044 	addi	r2,r2,1
 11041a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 11041a4:	003fdd06 	br	110411c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 11041a8:	08172b00 	call	8172b0 <OSIntExit>
}
 11041ac:	e037883a 	mov	sp,fp
 11041b0:	dfc00117 	ldw	ra,4(sp)
 11041b4:	df000017 	ldw	fp,0(sp)
 11041b8:	dec00204 	addi	sp,sp,8
 11041bc:	f800283a 	ret

Disassembly of section .text:

008001a0 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001a0:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001a4:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001a8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001ac:	00bffd16 	blt	zero,r2,8001a4 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001b0:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001b4:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001b8:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  8001bc:	d6b3e914 	ori	gp,gp,53156
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001c0:	008020b4 	movhi	r2,130
    ori r2, r2, %lo(__bss_start)
  8001c4:	109af714 	ori	r2,r2,27612

    movhi r3, %hi(__bss_end)
  8001c8:	00c020f4 	movhi	r3,131
    ori r3, r3, %lo(__bss_end)
  8001cc:	18c0e814 	ori	r3,r3,928

    beq r2, r3, 1f
  8001d0:	10c00326 	beq	r2,r3,8001e0 <_start+0x40>

0:
    stw zero, (r2)
  8001d4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001d8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001dc:	10fffd36 	bltu	r2,r3,8001d4 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001e0:	0815eb80 	call	815eb8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001e4:	08160f40 	call	8160f4 <alt_main>

008001e8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001e8:	003fff06 	br	8001e8 <alt_after_alt_main>

008001ec <main>:
//	printf("size1: %d size2: %d total printed %d\n",size1, size2, total);
//
//}

/* The main function creates two task and starts multi-tasking */
int main(void) {
  8001ec:	deffe604 	addi	sp,sp,-104
  8001f0:	dfc01915 	stw	ra,100(sp)
  8001f4:	df001815 	stw	fp,96(sp)
  8001f8:	dc001715 	stw	r16,92(sp)
  8001fc:	df001704 	addi	fp,sp,92


	alt_up_av_config_dev * audio_config_dev;
	audio_config_dev = alt_up_av_config_open_dev("/dev/audio_and_video_config_0");
  800200:	010020b4 	movhi	r4,130
  800204:	2109be04 	addi	r4,r4,9976
  800208:	08202dc0 	call	8202dc <alt_up_av_config_open_dev>
  80020c:	e0bfed15 	stw	r2,-76(fp)

	if ( audio_config_dev == NULL)
  800210:	e0bfed17 	ldw	r2,-76(fp)
  800214:	1004c03a 	cmpne	r2,r2,zero
  800218:	1000041e 	bne	r2,zero,80022c <main+0x40>
		printf("Error: could not open audio config device \n");
  80021c:	010020b4 	movhi	r4,130
  800220:	2109c604 	addi	r4,r4,10008
  800224:	080df580 	call	80df58 <puts>
  800228:	00000306 	br	800238 <main+0x4c>
	else
		printf("Opened audio config device \n");
  80022c:	010020b4 	movhi	r4,130
  800230:	2109d104 	addi	r4,r4,10052
  800234:	080df580 	call	80df58 <puts>

	audio_dev = alt_up_audio_open_dev ("/dev/audio_0");
  800238:	010020b4 	movhi	r4,130
  80023c:	2109d804 	addi	r4,r4,10080
  800240:	081fad00 	call	81fad0 <alt_up_audio_open_dev>
  800244:	d0a70e15 	stw	r2,-25544(gp)
	if ( audio_dev == NULL)
  800248:	d0a70e17 	ldw	r2,-25544(gp)
  80024c:	1004c03a 	cmpne	r2,r2,zero
  800250:	1000041e 	bne	r2,zero,800264 <main+0x78>
		printf("Error: could not open audio device \n");
  800254:	010020b4 	movhi	r4,130
  800258:	2109dc04 	addi	r4,r4,10096
  80025c:	080df580 	call	80df58 <puts>
  800260:	00000306 	br	800270 <main+0x84>
	else
		printf("Opened audio device \n");
  800264:	010020b4 	movhi	r4,130
  800268:	2109e504 	addi	r4,r4,10132
  80026c:	080df580 	call	80df58 <puts>

	alt_up_av_config_reset(audio_config_dev);
  800270:	e13fed17 	ldw	r4,-76(fp)
  800274:	08204300 	call	820430 <alt_up_av_config_reset>
	alt_up_audio_reset_audio_core(audio_dev);
  800278:	d1270e17 	ldw	r4,-25544(gp)
  80027c:	081fcc00 	call	81fcc0 <alt_up_audio_reset_audio_core>

	/* Write to configuration registers in the audio codec; see datasheet for what these values mean */
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x0, 0x17);
  800280:	e13fed17 	ldw	r4,-76(fp)
  800284:	000b883a 	mov	r5,zero
  800288:	018005c4 	movi	r6,23
  80028c:	08205700 	call	820570 <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x1, 0x17);
  800290:	e13fed17 	ldw	r4,-76(fp)
  800294:	01400044 	movi	r5,1
  800298:	018005c4 	movi	r6,23
  80029c:	08205700 	call	820570 <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x2, 0x68);
  8002a0:	e13fed17 	ldw	r4,-76(fp)
  8002a4:	01400084 	movi	r5,2
  8002a8:	01801a04 	movi	r6,104
  8002ac:	08205700 	call	820570 <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x3, 0x68);
  8002b0:	e13fed17 	ldw	r4,-76(fp)
  8002b4:	014000c4 	movi	r5,3
  8002b8:	01801a04 	movi	r6,104
  8002bc:	08205700 	call	820570 <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x4, 0x15);
  8002c0:	e13fed17 	ldw	r4,-76(fp)
  8002c4:	01400104 	movi	r5,4
  8002c8:	01800544 	movi	r6,21
  8002cc:	08205700 	call	820570 <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x5, 0x06);
  8002d0:	e13fed17 	ldw	r4,-76(fp)
  8002d4:	01400144 	movi	r5,5
  8002d8:	01800184 	movi	r6,6
  8002dc:	08205700 	call	820570 <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x6, 0x00);
  8002e0:	e13fed17 	ldw	r4,-76(fp)
  8002e4:	01400184 	movi	r5,6
  8002e8:	000d883a 	mov	r6,zero
  8002ec:	08205700 	call	820570 <alt_up_av_config_write_audio_cfg_register>
//	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x7, 0x10);
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x8, 0x22);
  8002f0:	e13fed17 	ldw	r4,-76(fp)
  8002f4:	01400204 	movi	r5,8
  8002f8:	01800884 	movi	r6,34
  8002fc:	08205700 	call	820570 <alt_up_av_config_write_audio_cfg_register>


	sdCard = sdRead();
  800300:	040020f4 	movhi	r16,131
  800304:	84232904 	addi	r16,r16,-29532
  800308:	e13fee04 	addi	r4,fp,-72
  80030c:	08004b40 	call	8004b4 <sdRead>
  800310:	8009883a 	mov	r4,r16
  800314:	e17fee04 	addi	r5,fp,-72
  800318:	01801204 	movi	r6,72
  80031c:	080dd7c0 	call	80dd7c <memcpy>

	int i;
	for(i = 0; i < BUFFER_SIZE; i++){
  800320:	e03fec15 	stw	zero,-80(fp)
  800324:	00003606 	br	800400 <main+0x214>
	  // Do we need to shift the values by 0x7fff like above for l_buff?
		//
	  l_buf[i] = (sin(2000 * (2 * PI) * i / 32000))*0x6fff;
  800328:	e43fec17 	ldw	r16,-80(fp)
  80032c:	e13fec17 	ldw	r4,-80(fp)
  800330:	080cccc0 	call	80cccc <__floatsidf>
  800334:	100b883a 	mov	r5,r2
  800338:	180d883a 	mov	r6,r3
  80033c:	2809883a 	mov	r4,r5
  800340:	300b883a 	mov	r5,r6
  800344:	019bf4b4 	movhi	r6,28626
  800348:	3187fcc4 	addi	r6,r6,8179
  80034c:	01d03274 	movhi	r7,16585
  800350:	39e2cbc4 	addi	r7,r7,-29905
  800354:	080c5180 	call	80c518 <__muldf3>
  800358:	1009883a 	mov	r4,r2
  80035c:	180b883a 	mov	r5,r3
  800360:	2005883a 	mov	r2,r4
  800364:	2807883a 	mov	r3,r5
  800368:	1009883a 	mov	r4,r2
  80036c:	180b883a 	mov	r5,r3
  800370:	000d883a 	mov	r6,zero
  800374:	01d037f4 	movhi	r7,16607
  800378:	39d00004 	addi	r7,r7,16384
  80037c:	080c8dc0 	call	80c8dc <__divdf3>
  800380:	1009883a 	mov	r4,r2
  800384:	180b883a 	mov	r5,r3
  800388:	2005883a 	mov	r2,r4
  80038c:	2807883a 	mov	r3,r5
  800390:	1009883a 	mov	r4,r2
  800394:	180b883a 	mov	r5,r3
  800398:	0809adc0 	call	809adc <sin>
  80039c:	100b883a 	mov	r5,r2
  8003a0:	180d883a 	mov	r6,r3
  8003a4:	2809883a 	mov	r4,r5
  8003a8:	300b883a 	mov	r5,r6
  8003ac:	000d883a 	mov	r6,zero
  8003b0:	01d03734 	movhi	r7,16604
  8003b4:	39fff004 	addi	r7,r7,-64
  8003b8:	080c5180 	call	80c518 <__muldf3>
  8003bc:	1009883a 	mov	r4,r2
  8003c0:	180b883a 	mov	r5,r3
  8003c4:	2005883a 	mov	r2,r4
  8003c8:	2807883a 	mov	r3,r5
  8003cc:	1009883a 	mov	r4,r2
  8003d0:	180b883a 	mov	r5,r3
  8003d4:	080bf700 	call	80bf70 <__fixunsdfsi>
  8003d8:	1009883a 	mov	r4,r2
  8003dc:	00c020f4 	movhi	r3,131
  8003e0:	18f33b04 	addi	r3,r3,-13076
  8003e4:	8405883a 	add	r2,r16,r16
  8003e8:	1085883a 	add	r2,r2,r2
  8003ec:	10c5883a 	add	r2,r2,r3
  8003f0:	11000015 	stw	r4,0(r2)


	sdCard = sdRead();

	int i;
	for(i = 0; i < BUFFER_SIZE; i++){
  8003f4:	e0bfec17 	ldw	r2,-80(fp)
  8003f8:	10800044 	addi	r2,r2,1
  8003fc:	e0bfec15 	stw	r2,-80(fp)
  800400:	e0bfec17 	ldw	r2,-80(fp)
  800404:	10802010 	cmplti	r2,r2,128
  800408:	103fc71e 	bne	r2,zero,800328 <main+0x13c>
		//
	  l_buf[i] = (sin(2000 * (2 * PI) * i / 32000))*0x6fff;
	  //printf(" sin: %d\n", l_buf[i]);
	}

	int k = 0;
  80040c:	e03feb15 	stw	zero,-84(fp)
	int count = 0;
  800410:	e03fea15 	stw	zero,-88(fp)
  800414:	00000006 	br	800418 <main+0x22c>
	while(1) {

		int fifospace = alt_up_audio_write_fifo_space(audio_dev, ALT_UP_AUDIO_RIGHT);
  800418:	d1270e17 	ldw	r4,-25544(gp)
  80041c:	01400044 	movi	r5,1
  800420:	081fe980 	call	81fe98 <alt_up_audio_write_fifo_space>
  800424:	e0bfe915 	stw	r2,-92(fp)
		if(fifospace >= 128) {
  800428:	e0bfe917 	ldw	r2,-92(fp)
  80042c:	10802010 	cmplti	r2,r2,128
  800430:	103ff91e 	bne	r2,zero,800418 <main+0x22c>
			if(count >= sdCard.numberSamples) {
  800434:	008020f4 	movhi	r2,131
  800438:	10a32904 	addi	r2,r2,-29532
  80043c:	10c01117 	ldw	r3,68(r2)
  800440:	e0bfea17 	ldw	r2,-88(fp)
  800444:	10c00116 	blt	r2,r3,80044c <main+0x260>
				count = 0;
  800448:	e03fea15 	stw	zero,-88(fp)
			}
				alt_up_audio_write_fifo(audio_dev, sdCard.fileBufL + count, 128, ALT_UP_AUDIO_RIGHT);
  80044c:	d1270e17 	ldw	r4,-25544(gp)
  800450:	008020f4 	movhi	r2,131
  800454:	10a32904 	addi	r2,r2,-29532
  800458:	10c00117 	ldw	r3,4(r2)
  80045c:	e0bfea17 	ldw	r2,-88(fp)
  800460:	1085883a 	add	r2,r2,r2
  800464:	1085883a 	add	r2,r2,r2
  800468:	188b883a 	add	r5,r3,r2
  80046c:	01802004 	movi	r6,128
  800470:	01c00044 	movi	r7,1
  800474:	08200f00 	call	8200f0 <alt_up_audio_write_fifo>
				alt_up_audio_write_fifo(audio_dev, sdCard.fileBufL + count, 128, ALT_UP_AUDIO_LEFT);
  800478:	d1270e17 	ldw	r4,-25544(gp)
  80047c:	008020f4 	movhi	r2,131
  800480:	10a32904 	addi	r2,r2,-29532
  800484:	10c00117 	ldw	r3,4(r2)
  800488:	e0bfea17 	ldw	r2,-88(fp)
  80048c:	1085883a 	add	r2,r2,r2
  800490:	1085883a 	add	r2,r2,r2
  800494:	188b883a 	add	r5,r3,r2
  800498:	01802004 	movi	r6,128
  80049c:	000f883a 	mov	r7,zero
  8004a0:	08200f00 	call	8200f0 <alt_up_audio_write_fifo>
				count += 128;
  8004a4:	e0bfea17 	ldw	r2,-88(fp)
  8004a8:	10802004 	addi	r2,r2,128
  8004ac:	e0bfea15 	stw	r2,-88(fp)

		}
	}
  8004b0:	003fd906 	br	800418 <main+0x22c>

008004b4 <sdRead>:
//		printf("size: %d\n", size);
		//OSTimeDlyHMSM(0,0,0,250);
//	}
}

sdCardInfo sdRead() {
  8004b4:	defd8704 	addi	sp,sp,-2532
  8004b8:	dfc27815 	stw	ra,2528(sp)
  8004bc:	df027715 	stw	fp,2524(sp)
  8004c0:	df027704 	addi	fp,sp,2524
  8004c4:	e13fff15 	stw	r4,-4(fp)

	// Create EFSL containers
		EmbeddedFileSystem efsl;

		char fileName[LIST_MAXLENFILENAME] = {"crash.wav"};
  8004c8:	00c020b4 	movhi	r3,130
  8004cc:	18ca7304 	addi	r3,r3,10700
  8004d0:	18800017 	ldw	r2,0(r3)
  8004d4:	e0bfd615 	stw	r2,-168(fp)
  8004d8:	18800117 	ldw	r2,4(r3)
  8004dc:	e0bfd715 	stw	r2,-164(fp)
  8004e0:	1880020b 	ldhu	r2,8(r3)
  8004e4:	e0bfd80d 	sth	r2,-160(fp)
  8004e8:	e03fd88d 	sth	zero,-158(fp)
		File readFile;
		sdCardInfo sdCard;

		// Initialises the filesystem on the SD card, if the filesystem does not
		// init properly then it displays an error message.
		printf("Attempting to init filesystem");
  8004ec:	010020b4 	movhi	r4,130
  8004f0:	2109eb04 	addi	r4,r4,10156
  8004f4:	080de1c0 	call	80de1c <printf>
		int ret = efs_init(&efsl, SD_CARD_SPI_MASTER_NAME);
  8004f8:	e13d8d04 	addi	r4,fp,-2508
  8004fc:	014020b4 	movhi	r5,130
  800500:	2949f304 	addi	r5,r5,10188
  800504:	08018280 	call	801828 <efs_init>
  800508:	10803fcc 	andi	r2,r2,255
  80050c:	1080201c 	xori	r2,r2,128
  800510:	10bfe004 	addi	r2,r2,-128
  800514:	e0bd8c15 	stw	r2,-2512(fp)

		// Initialize efsl
		if(ret != 0)
  800518:	e0bd8c17 	ldw	r2,-2512(fp)
  80051c:	1005003a 	cmpeq	r2,r2,zero
  800520:	1000041e 	bne	r2,zero,800534 <sdRead+0x80>
		{
		printf("...could not initialize filesystem.\n");
  800524:	010020b4 	movhi	r4,130
  800528:	2109f904 	addi	r4,r4,10212
  80052c:	080df580 	call	80df58 <puts>
  800530:	00000306 	br	800540 <sdRead+0x8c>
		}
		else
		printf("...success!\n");
  800534:	010020b4 	movhi	r4,130
  800538:	210a0204 	addi	r4,r4,10248
  80053c:	080df580 	call	80df58 <puts>
		// API functions such as "ls_openDir(...)" and "ls_getNext(...). Reference
		// the included PDF for the documentation to do such a thing. This example
		// simply shows reading a file with a known filename.

		// Open the test file
		printf("\nAttempting to open file: \"%s\"\n", fileName);
  800540:	e17fd604 	addi	r5,fp,-168
  800544:	010020b4 	movhi	r4,130
  800548:	210a0504 	addi	r4,r4,10260
  80054c:	080de1c0 	call	80de1c <printf>

		int ret1 = file_fopen(&readFile, &efsl.myFs, fileName, 'r');
  800550:	e13fd904 	addi	r4,fp,-156
  800554:	e0bd8d04 	addi	r2,fp,-2508
  800558:	11423904 	addi	r5,r2,2276
  80055c:	e1bfd604 	addi	r6,fp,-168
  800560:	01c01c84 	movi	r7,114
  800564:	08038b00 	call	8038b0 <file_fopen>
  800568:	10803fcc 	andi	r2,r2,255
  80056c:	1080201c 	xori	r2,r2,128
  800570:	10bfe004 	addi	r2,r2,-128
  800574:	e0bd8b15 	stw	r2,-2516(fp)
		printf("ret1: %d\n", ret1);
  800578:	010020b4 	movhi	r4,130
  80057c:	210a0d04 	addi	r4,r4,10292
  800580:	e17d8b17 	ldw	r5,-2516(fp)
  800584:	080de1c0 	call	80de1c <printf>
		if (file_fopen(&readFile, &efsl.myFs, fileName, 'r') != 0)
  800588:	e13fd904 	addi	r4,fp,-156
  80058c:	e0bd8d04 	addi	r2,fp,-2508
  800590:	11423904 	addi	r5,r2,2276
  800594:	e1bfd604 	addi	r6,fp,-168
  800598:	01c01c84 	movi	r7,114
  80059c:	08038b00 	call	8038b0 <file_fopen>
  8005a0:	10803fcc 	andi	r2,r2,255
  8005a4:	1080201c 	xori	r2,r2,128
  8005a8:	10bfe004 	addi	r2,r2,-128
  8005ac:	1005003a 	cmpeq	r2,r2,zero
  8005b0:	1000041e 	bne	r2,zero,8005c4 <sdRead+0x110>
		{
			printf("Error:\tCould not open file\n");
  8005b4:	010020b4 	movhi	r4,130
  8005b8:	210a1004 	addi	r4,r4,10304
  8005bc:	080df580 	call	80df58 <puts>
  8005c0:	00000306 	br	8005d0 <sdRead+0x11c>
		}
		else
		{
			printf("Reading file...\n");
  8005c4:	010020b4 	movhi	r4,130
  8005c8:	210a1704 	addi	r4,r4,10332
  8005cc:	080df580 	call	80df58 <puts>
		}

		// Create a memory buffer to read the file into
		sdCard.fileBuffer = malloc(readFile.FileSize * sizeof(eint8));
  8005d0:	e13fec17 	ldw	r4,-80(fp)
  8005d4:	080d6280 	call	80d628 <malloc>
  8005d8:	e0bfed15 	stw	r2,-76(fp)
		sdCard.buffersize = (int)readFile.FileSize * sizeof(eint8);
  8005dc:	e0bfec17 	ldw	r2,-80(fp)
  8005e0:	e0bffd15 	stw	r2,-12(fp)
		printf("buffersize: %d \n", sdCard.buffersize);
  8005e4:	e17ffd17 	ldw	r5,-12(fp)
  8005e8:	010020b4 	movhi	r4,130
  8005ec:	210a1b04 	addi	r4,r4,10348
  8005f0:	080de1c0 	call	80de1c <printf>

		if (!(sdCard.fileBuffer))
  8005f4:	e0bfed17 	ldw	r2,-76(fp)
  8005f8:	1004c03a 	cmpne	r2,r2,zero
  8005fc:	1000031e 	bne	r2,zero,80060c <sdRead+0x158>
		{
			printf("malloc failed!\n");
  800600:	010020b4 	movhi	r4,130
  800604:	210a2004 	addi	r4,r4,10368
  800608:	080df580 	call	80df58 <puts>
		}

		// Read all the file's contents into the buffer. See the file_fread(...) function
		// for the ability to read chunks of the file at a time, which is desirable for
		// larger files.
		unsigned int bytesRead = file_read(&readFile, readFile.FileSize, sdCard.fileBuffer);
  80060c:	e17fec17 	ldw	r5,-80(fp)
  800610:	e1bfed17 	ldw	r6,-76(fp)
  800614:	e13fd904 	addi	r4,fp,-156
  800618:	08034400 	call	803440 <file_read>
  80061c:	e0bd8a15 	stw	r2,-2520(fp)

		printf("%u bytes read from the file\n", bytesRead);
  800620:	010020b4 	movhi	r4,130
  800624:	210a2404 	addi	r4,r4,10384
  800628:	e17d8a17 	ldw	r5,-2520(fp)
  80062c:	080de1c0 	call	80de1c <printf>

		// Close the file
		if (file_fclose(&readFile) != 0) {
  800630:	e13fd904 	addi	r4,fp,-156
  800634:	0803d280 	call	803d28 <file_fclose>
  800638:	10803fcc 	andi	r2,r2,255
  80063c:	1080201c 	xori	r2,r2,128
  800640:	10bfe004 	addi	r2,r2,-128
  800644:	1005003a 	cmpeq	r2,r2,zero
  800648:	1000031e 	bne	r2,zero,800658 <sdRead+0x1a4>

			printf("Error:\tCould not close file properly\n");
  80064c:	010020b4 	movhi	r4,130
  800650:	210a2c04 	addi	r4,r4,10416
  800654:	080df580 	call	80df58 <puts>
		}

		//Header Info
		sdCard.wavHeader.riff[0] = sdCard.fileBuffer[0];
  800658:	e0bfed17 	ldw	r2,-76(fp)
  80065c:	10800003 	ldbu	r2,0(r2)
  800660:	e0bff005 	stb	r2,-64(fp)
		sdCard.wavHeader.riff[1] = sdCard.fileBuffer[1];
  800664:	e0bfed17 	ldw	r2,-76(fp)
  800668:	10800044 	addi	r2,r2,1
  80066c:	10800003 	ldbu	r2,0(r2)
  800670:	e0bff045 	stb	r2,-63(fp)
		sdCard.wavHeader.riff[2] = sdCard.fileBuffer[2];
  800674:	e0bfed17 	ldw	r2,-76(fp)
  800678:	10800084 	addi	r2,r2,2
  80067c:	10800003 	ldbu	r2,0(r2)
  800680:	e0bff085 	stb	r2,-62(fp)
		sdCard.wavHeader.riff[3] = sdCard.fileBuffer[3];
  800684:	e0bfed17 	ldw	r2,-76(fp)
  800688:	108000c4 	addi	r2,r2,3
  80068c:	10800003 	ldbu	r2,0(r2)
  800690:	e0bff0c5 	stb	r2,-61(fp)

		sdCard.wavHeader.overall_size = sdCard.fileBuffer[4] | (sdCard.fileBuffer[5] << 8) | (sdCard.fileBuffer[6] << 16) | (sdCard.fileBuffer[7] << 24);
  800694:	e0bfed17 	ldw	r2,-76(fp)
  800698:	10800104 	addi	r2,r2,4
  80069c:	10800003 	ldbu	r2,0(r2)
  8006a0:	10c03fcc 	andi	r3,r2,255
  8006a4:	e0bfed17 	ldw	r2,-76(fp)
  8006a8:	10800144 	addi	r2,r2,5
  8006ac:	10800003 	ldbu	r2,0(r2)
  8006b0:	10803fcc 	andi	r2,r2,255
  8006b4:	1004923a 	slli	r2,r2,8
  8006b8:	1886b03a 	or	r3,r3,r2
  8006bc:	e0bfed17 	ldw	r2,-76(fp)
  8006c0:	10800184 	addi	r2,r2,6
  8006c4:	10800003 	ldbu	r2,0(r2)
  8006c8:	10803fcc 	andi	r2,r2,255
  8006cc:	1004943a 	slli	r2,r2,16
  8006d0:	1886b03a 	or	r3,r3,r2
  8006d4:	e0bfed17 	ldw	r2,-76(fp)
  8006d8:	108001c4 	addi	r2,r2,7
  8006dc:	10800003 	ldbu	r2,0(r2)
  8006e0:	10803fcc 	andi	r2,r2,255
  8006e4:	1004963a 	slli	r2,r2,24
  8006e8:	1884b03a 	or	r2,r3,r2
  8006ec:	e0bff115 	stw	r2,-60(fp)

		sdCard.wavHeader.wave[0] = sdCard.fileBuffer[8];
  8006f0:	e0bfed17 	ldw	r2,-76(fp)
  8006f4:	10800204 	addi	r2,r2,8
  8006f8:	10800003 	ldbu	r2,0(r2)
  8006fc:	e0bff205 	stb	r2,-56(fp)
		sdCard.wavHeader.wave[1] = sdCard.fileBuffer[9];
  800700:	e0bfed17 	ldw	r2,-76(fp)
  800704:	10800244 	addi	r2,r2,9
  800708:	10800003 	ldbu	r2,0(r2)
  80070c:	e0bff245 	stb	r2,-55(fp)
		sdCard.wavHeader.wave[2] = sdCard.fileBuffer[10];
  800710:	e0bfed17 	ldw	r2,-76(fp)
  800714:	10800284 	addi	r2,r2,10
  800718:	10800003 	ldbu	r2,0(r2)
  80071c:	e0bff285 	stb	r2,-54(fp)
		sdCard.wavHeader.wave[3] = sdCard.fileBuffer[11];
  800720:	e0bfed17 	ldw	r2,-76(fp)
  800724:	108002c4 	addi	r2,r2,11
  800728:	10800003 	ldbu	r2,0(r2)
  80072c:	e0bff2c5 	stb	r2,-53(fp)

		sdCard.wavHeader.fmt_chunk_marker[0] = sdCard.fileBuffer[12];
  800730:	e0bfed17 	ldw	r2,-76(fp)
  800734:	10800304 	addi	r2,r2,12
  800738:	10800003 	ldbu	r2,0(r2)
  80073c:	e0bff305 	stb	r2,-52(fp)
		sdCard.wavHeader.fmt_chunk_marker[1] = sdCard.fileBuffer[13];
  800740:	e0bfed17 	ldw	r2,-76(fp)
  800744:	10800344 	addi	r2,r2,13
  800748:	10800003 	ldbu	r2,0(r2)
  80074c:	e0bff345 	stb	r2,-51(fp)
		sdCard.wavHeader.fmt_chunk_marker[2] = sdCard.fileBuffer[14];
  800750:	e0bfed17 	ldw	r2,-76(fp)
  800754:	10800384 	addi	r2,r2,14
  800758:	10800003 	ldbu	r2,0(r2)
  80075c:	e0bff385 	stb	r2,-50(fp)
		sdCard.wavHeader.fmt_chunk_marker[3] = sdCard.fileBuffer[15];
  800760:	e0bfed17 	ldw	r2,-76(fp)
  800764:	108003c4 	addi	r2,r2,15
  800768:	10800003 	ldbu	r2,0(r2)
  80076c:	e0bff3c5 	stb	r2,-49(fp)

		sdCard.wavHeader.length_of_fmt = sdCard.fileBuffer[16] | (sdCard.fileBuffer[17] << 8) | (sdCard.fileBuffer[18] << 16) | (sdCard.fileBuffer[19] << 24);
  800770:	e0bfed17 	ldw	r2,-76(fp)
  800774:	10800404 	addi	r2,r2,16
  800778:	10800003 	ldbu	r2,0(r2)
  80077c:	10c03fcc 	andi	r3,r2,255
  800780:	e0bfed17 	ldw	r2,-76(fp)
  800784:	10800444 	addi	r2,r2,17
  800788:	10800003 	ldbu	r2,0(r2)
  80078c:	10803fcc 	andi	r2,r2,255
  800790:	1004923a 	slli	r2,r2,8
  800794:	1886b03a 	or	r3,r3,r2
  800798:	e0bfed17 	ldw	r2,-76(fp)
  80079c:	10800484 	addi	r2,r2,18
  8007a0:	10800003 	ldbu	r2,0(r2)
  8007a4:	10803fcc 	andi	r2,r2,255
  8007a8:	1004943a 	slli	r2,r2,16
  8007ac:	1886b03a 	or	r3,r3,r2
  8007b0:	e0bfed17 	ldw	r2,-76(fp)
  8007b4:	108004c4 	addi	r2,r2,19
  8007b8:	10800003 	ldbu	r2,0(r2)
  8007bc:	10803fcc 	andi	r2,r2,255
  8007c0:	1004963a 	slli	r2,r2,24
  8007c4:	1884b03a 	or	r2,r3,r2
  8007c8:	e0bff415 	stw	r2,-48(fp)

		sdCard.wavHeader.format_type = sdCard.fileBuffer[20] | sdCard.fileBuffer[21] << 8;
  8007cc:	e0bfed17 	ldw	r2,-76(fp)
  8007d0:	10800504 	addi	r2,r2,20
  8007d4:	10800003 	ldbu	r2,0(r2)
  8007d8:	10c03fcc 	andi	r3,r2,255
  8007dc:	e0bfed17 	ldw	r2,-76(fp)
  8007e0:	10800544 	addi	r2,r2,21
  8007e4:	10800003 	ldbu	r2,0(r2)
  8007e8:	10803fcc 	andi	r2,r2,255
  8007ec:	1004923a 	slli	r2,r2,8
  8007f0:	1884b03a 	or	r2,r3,r2
  8007f4:	e0bff515 	stw	r2,-44(fp)

		sdCard.wavHeader.channels = sdCard.fileBuffer[22] | sdCard.fileBuffer[23] << 8;
  8007f8:	e0bfed17 	ldw	r2,-76(fp)
  8007fc:	10800584 	addi	r2,r2,22
  800800:	10800003 	ldbu	r2,0(r2)
  800804:	10c03fcc 	andi	r3,r2,255
  800808:	e0bfed17 	ldw	r2,-76(fp)
  80080c:	108005c4 	addi	r2,r2,23
  800810:	10800003 	ldbu	r2,0(r2)
  800814:	10803fcc 	andi	r2,r2,255
  800818:	1004923a 	slli	r2,r2,8
  80081c:	1884b03a 	or	r2,r3,r2
  800820:	e0bff615 	stw	r2,-40(fp)

		sdCard.wavHeader.sample_rate = sdCard.fileBuffer[24] | (sdCard.fileBuffer[25] << 8) | (sdCard.fileBuffer[26] << 16) | (sdCard.fileBuffer[27] << 24);
  800824:	e0bfed17 	ldw	r2,-76(fp)
  800828:	10800604 	addi	r2,r2,24
  80082c:	10800003 	ldbu	r2,0(r2)
  800830:	10c03fcc 	andi	r3,r2,255
  800834:	e0bfed17 	ldw	r2,-76(fp)
  800838:	10800644 	addi	r2,r2,25
  80083c:	10800003 	ldbu	r2,0(r2)
  800840:	10803fcc 	andi	r2,r2,255
  800844:	1004923a 	slli	r2,r2,8
  800848:	1886b03a 	or	r3,r3,r2
  80084c:	e0bfed17 	ldw	r2,-76(fp)
  800850:	10800684 	addi	r2,r2,26
  800854:	10800003 	ldbu	r2,0(r2)
  800858:	10803fcc 	andi	r2,r2,255
  80085c:	1004943a 	slli	r2,r2,16
  800860:	1886b03a 	or	r3,r3,r2
  800864:	e0bfed17 	ldw	r2,-76(fp)
  800868:	108006c4 	addi	r2,r2,27
  80086c:	10800003 	ldbu	r2,0(r2)
  800870:	10803fcc 	andi	r2,r2,255
  800874:	1004963a 	slli	r2,r2,24
  800878:	1884b03a 	or	r2,r3,r2
  80087c:	e0bff715 	stw	r2,-36(fp)

		sdCard.wavHeader.byterate = sdCard.fileBuffer[28] | (sdCard.fileBuffer[29] << 8) | (sdCard.fileBuffer[30] << 16) | (sdCard.fileBuffer[31] << 24);
  800880:	e0bfed17 	ldw	r2,-76(fp)
  800884:	10800704 	addi	r2,r2,28
  800888:	10800003 	ldbu	r2,0(r2)
  80088c:	10c03fcc 	andi	r3,r2,255
  800890:	e0bfed17 	ldw	r2,-76(fp)
  800894:	10800744 	addi	r2,r2,29
  800898:	10800003 	ldbu	r2,0(r2)
  80089c:	10803fcc 	andi	r2,r2,255
  8008a0:	1004923a 	slli	r2,r2,8
  8008a4:	1886b03a 	or	r3,r3,r2
  8008a8:	e0bfed17 	ldw	r2,-76(fp)
  8008ac:	10800784 	addi	r2,r2,30
  8008b0:	10800003 	ldbu	r2,0(r2)
  8008b4:	10803fcc 	andi	r2,r2,255
  8008b8:	1004943a 	slli	r2,r2,16
  8008bc:	1886b03a 	or	r3,r3,r2
  8008c0:	e0bfed17 	ldw	r2,-76(fp)
  8008c4:	108007c4 	addi	r2,r2,31
  8008c8:	10800003 	ldbu	r2,0(r2)
  8008cc:	10803fcc 	andi	r2,r2,255
  8008d0:	1004963a 	slli	r2,r2,24
  8008d4:	1884b03a 	or	r2,r3,r2
  8008d8:	e0bff815 	stw	r2,-32(fp)

		sdCard.wavHeader.block_align = sdCard.fileBuffer[32] | sdCard.fileBuffer[33] << 8;
  8008dc:	e0bfed17 	ldw	r2,-76(fp)
  8008e0:	10800804 	addi	r2,r2,32
  8008e4:	10800003 	ldbu	r2,0(r2)
  8008e8:	10c03fcc 	andi	r3,r2,255
  8008ec:	e0bfed17 	ldw	r2,-76(fp)
  8008f0:	10800844 	addi	r2,r2,33
  8008f4:	10800003 	ldbu	r2,0(r2)
  8008f8:	10803fcc 	andi	r2,r2,255
  8008fc:	1004923a 	slli	r2,r2,8
  800900:	1884b03a 	or	r2,r3,r2
  800904:	e0bff915 	stw	r2,-28(fp)

		sdCard.wavHeader.bits_per_sample = sdCard.fileBuffer[34] | sdCard.fileBuffer[35] << 8;
  800908:	e0bfed17 	ldw	r2,-76(fp)
  80090c:	10800884 	addi	r2,r2,34
  800910:	10800003 	ldbu	r2,0(r2)
  800914:	10c03fcc 	andi	r3,r2,255
  800918:	e0bfed17 	ldw	r2,-76(fp)
  80091c:	108008c4 	addi	r2,r2,35
  800920:	10800003 	ldbu	r2,0(r2)
  800924:	10803fcc 	andi	r2,r2,255
  800928:	1004923a 	slli	r2,r2,8
  80092c:	1884b03a 	or	r2,r3,r2
  800930:	e0bffa15 	stw	r2,-24(fp)

		sdCard.wavHeader.data_chunk_header[0] = sdCard.fileBuffer[36];
  800934:	e0bfed17 	ldw	r2,-76(fp)
  800938:	10800904 	addi	r2,r2,36
  80093c:	10800003 	ldbu	r2,0(r2)
  800940:	e0bffb05 	stb	r2,-20(fp)
		sdCard.wavHeader.data_chunk_header[1] = sdCard.fileBuffer[37];
  800944:	e0bfed17 	ldw	r2,-76(fp)
  800948:	10800944 	addi	r2,r2,37
  80094c:	10800003 	ldbu	r2,0(r2)
  800950:	e0bffb45 	stb	r2,-19(fp)
		sdCard.wavHeader.data_chunk_header[2] = sdCard.fileBuffer[38];
  800954:	e0bfed17 	ldw	r2,-76(fp)
  800958:	10800984 	addi	r2,r2,38
  80095c:	10800003 	ldbu	r2,0(r2)
  800960:	e0bffb85 	stb	r2,-18(fp)
		sdCard.wavHeader.data_chunk_header[3] = sdCard.fileBuffer[39];
  800964:	e0bfed17 	ldw	r2,-76(fp)
  800968:	108009c4 	addi	r2,r2,39
  80096c:	10800003 	ldbu	r2,0(r2)
  800970:	e0bffbc5 	stb	r2,-17(fp)

		sdCard.wavHeader.data_size = sdCard.fileBuffer[40] | (sdCard.fileBuffer[41] << 8) | (sdCard.fileBuffer[42] << 16) | (sdCard.fileBuffer[43] << 24);
  800974:	e0bfed17 	ldw	r2,-76(fp)
  800978:	10800a04 	addi	r2,r2,40
  80097c:	10800003 	ldbu	r2,0(r2)
  800980:	10c03fcc 	andi	r3,r2,255
  800984:	e0bfed17 	ldw	r2,-76(fp)
  800988:	10800a44 	addi	r2,r2,41
  80098c:	10800003 	ldbu	r2,0(r2)
  800990:	10803fcc 	andi	r2,r2,255
  800994:	1004923a 	slli	r2,r2,8
  800998:	1886b03a 	or	r3,r3,r2
  80099c:	e0bfed17 	ldw	r2,-76(fp)
  8009a0:	10800a84 	addi	r2,r2,42
  8009a4:	10800003 	ldbu	r2,0(r2)
  8009a8:	10803fcc 	andi	r2,r2,255
  8009ac:	1004943a 	slli	r2,r2,16
  8009b0:	1886b03a 	or	r3,r3,r2
  8009b4:	e0bfed17 	ldw	r2,-76(fp)
  8009b8:	10800ac4 	addi	r2,r2,43
  8009bc:	10800003 	ldbu	r2,0(r2)
  8009c0:	10803fcc 	andi	r2,r2,255
  8009c4:	1004963a 	slli	r2,r2,24
  8009c8:	1884b03a 	or	r2,r3,r2
  8009cc:	e0bffc15 	stw	r2,-16(fp)


		printf("riff: %s\n", sdCard.wavHeader.riff);
  8009d0:	e0bfed04 	addi	r2,fp,-76
  8009d4:	11400304 	addi	r5,r2,12
  8009d8:	010020b4 	movhi	r4,130
  8009dc:	210a3604 	addi	r4,r4,10456
  8009e0:	080de1c0 	call	80de1c <printf>
		printf("overall_size: %d\n", sdCard.wavHeader.overall_size);
  8009e4:	e17ff117 	ldw	r5,-60(fp)
  8009e8:	010020b4 	movhi	r4,130
  8009ec:	210a3904 	addi	r4,r4,10468
  8009f0:	080de1c0 	call	80de1c <printf>
		printf("wave: %s\n", sdCard.wavHeader.wave);
  8009f4:	e0bfed04 	addi	r2,fp,-76
  8009f8:	11400504 	addi	r5,r2,20
  8009fc:	010020b4 	movhi	r4,130
  800a00:	210a3e04 	addi	r4,r4,10488
  800a04:	080de1c0 	call	80de1c <printf>
		printf("fmt: %s\n", sdCard.wavHeader.fmt_chunk_marker);
  800a08:	e0bfed04 	addi	r2,fp,-76
  800a0c:	11400604 	addi	r5,r2,24
  800a10:	010020b4 	movhi	r4,130
  800a14:	210a4104 	addi	r4,r4,10500
  800a18:	080de1c0 	call	80de1c <printf>
		printf("fmt size: %d\n", sdCard.wavHeader.length_of_fmt);
  800a1c:	e17ff417 	ldw	r5,-48(fp)
  800a20:	010020b4 	movhi	r4,130
  800a24:	210a4404 	addi	r4,r4,10512
  800a28:	080de1c0 	call	80de1c <printf>
		printf("format type: %d\n", sdCard.wavHeader.format_type);
  800a2c:	e17ff517 	ldw	r5,-44(fp)
  800a30:	010020b4 	movhi	r4,130
  800a34:	210a4804 	addi	r4,r4,10528
  800a38:	080de1c0 	call	80de1c <printf>
		printf("channels: %d\n", sdCard.wavHeader.channels);
  800a3c:	e17ff617 	ldw	r5,-40(fp)
  800a40:	010020b4 	movhi	r4,130
  800a44:	210a4d04 	addi	r4,r4,10548
  800a48:	080de1c0 	call	80de1c <printf>
		printf("sample rate: %d\n", sdCard.wavHeader.sample_rate);
  800a4c:	e17ff717 	ldw	r5,-36(fp)
  800a50:	010020b4 	movhi	r4,130
  800a54:	210a5104 	addi	r4,r4,10564
  800a58:	080de1c0 	call	80de1c <printf>
		printf("byte rate: %d\n", sdCard.wavHeader.byterate);
  800a5c:	e17ff817 	ldw	r5,-32(fp)
  800a60:	010020b4 	movhi	r4,130
  800a64:	210a5604 	addi	r4,r4,10584
  800a68:	080de1c0 	call	80de1c <printf>
		printf("block align: %d\n", sdCard.wavHeader.block_align);
  800a6c:	e17ff917 	ldw	r5,-28(fp)
  800a70:	010020b4 	movhi	r4,130
  800a74:	210a5a04 	addi	r4,r4,10600
  800a78:	080de1c0 	call	80de1c <printf>
		printf("bits per sample: %d\n", sdCard.wavHeader.bits_per_sample);
  800a7c:	e17ffa17 	ldw	r5,-24(fp)
  800a80:	010020b4 	movhi	r4,130
  800a84:	210a5f04 	addi	r4,r4,10620
  800a88:	080de1c0 	call	80de1c <printf>
		printf("data chunk header: %s\n", sdCard.wavHeader.data_chunk_header);
  800a8c:	e0bfed04 	addi	r2,fp,-76
  800a90:	11400e04 	addi	r5,r2,56
  800a94:	010020b4 	movhi	r4,130
  800a98:	210a6504 	addi	r4,r4,10644
  800a9c:	080de1c0 	call	80de1c <printf>
		printf("data size: %d\n", sdCard.wavHeader.data_size);
  800aa0:	e17ffc17 	ldw	r5,-16(fp)
  800aa4:	010020b4 	movhi	r4,130
  800aa8:	210a6b04 	addi	r4,r4,10668
  800aac:	080de1c0 	call	80de1c <printf>

//		sdCard.numberSamples = (8*sdCard.wavHeader.data_size)/(sdCard.wavHeader.channels*sdCard.wavHeader.bits_per_sample);
		sdCard.numberSamples = 63342;
  800ab0:	00bddb94 	movui	r2,63342
  800ab4:	e0bffe15 	stw	r2,-8(fp)
		printf("Samples: %d\n", sdCard.numberSamples);
  800ab8:	e17ffe17 	ldw	r5,-8(fp)
  800abc:	010020b4 	movhi	r4,130
  800ac0:	210a6f04 	addi	r4,r4,10684
  800ac4:	080de1c0 	call	80de1c <printf>
		sdCard.fileBufL = malloc(sdCard.numberSamples * sizeof(eint16));
  800ac8:	e0bffe17 	ldw	r2,-8(fp)
  800acc:	1085883a 	add	r2,r2,r2
  800ad0:	1009883a 	mov	r4,r2
  800ad4:	080d6280 	call	80d628 <malloc>
  800ad8:	e0bfee15 	stw	r2,-72(fp)
		sdCard.fileBufR = malloc(sdCard.numberSamples * sizeof(eint16));
  800adc:	e0bffe17 	ldw	r2,-8(fp)
  800ae0:	1085883a 	add	r2,r2,r2
  800ae4:	1009883a 	mov	r4,r2
  800ae8:	080d6280 	call	80d628 <malloc>
  800aec:	e0bfef15 	stw	r2,-68(fp)

		int i;
		for(i = 0; i < sdCard.numberSamples; i++) {
  800af0:	e03d8915 	stw	zero,-2524(fp)
  800af4:	00003306 	br	800bc4 <sdRead+0x710>
			sdCard.fileBufL[i] = sdCard.fileBuffer[i*4+44] | (sdCard.fileBuffer[i*4+45] << 8);
  800af8:	e0ffee17 	ldw	r3,-72(fp)
  800afc:	e0bd8917 	ldw	r2,-2524(fp)
  800b00:	1085883a 	add	r2,r2,r2
  800b04:	1085883a 	add	r2,r2,r2
  800b08:	1889883a 	add	r4,r3,r2
  800b0c:	e0ffed17 	ldw	r3,-76(fp)
  800b10:	e0bd8917 	ldw	r2,-2524(fp)
  800b14:	1085883a 	add	r2,r2,r2
  800b18:	1085883a 	add	r2,r2,r2
  800b1c:	1885883a 	add	r2,r3,r2
  800b20:	10800b04 	addi	r2,r2,44
  800b24:	10800003 	ldbu	r2,0(r2)
  800b28:	11403fcc 	andi	r5,r2,255
  800b2c:	e0ffed17 	ldw	r3,-76(fp)
  800b30:	e0bd8917 	ldw	r2,-2524(fp)
  800b34:	1085883a 	add	r2,r2,r2
  800b38:	1085883a 	add	r2,r2,r2
  800b3c:	1885883a 	add	r2,r3,r2
  800b40:	10800b44 	addi	r2,r2,45
  800b44:	10800003 	ldbu	r2,0(r2)
  800b48:	10803fcc 	andi	r2,r2,255
  800b4c:	1004923a 	slli	r2,r2,8
  800b50:	2884b03a 	or	r2,r5,r2
  800b54:	20800015 	stw	r2,0(r4)
			sdCard.fileBufR[i] = sdCard.fileBuffer[i*4+44] | (sdCard.fileBuffer[i*4+45] << 8);
  800b58:	e0ffef17 	ldw	r3,-68(fp)
  800b5c:	e0bd8917 	ldw	r2,-2524(fp)
  800b60:	1085883a 	add	r2,r2,r2
  800b64:	1085883a 	add	r2,r2,r2
  800b68:	1889883a 	add	r4,r3,r2
  800b6c:	e0ffed17 	ldw	r3,-76(fp)
  800b70:	e0bd8917 	ldw	r2,-2524(fp)
  800b74:	1085883a 	add	r2,r2,r2
  800b78:	1085883a 	add	r2,r2,r2
  800b7c:	1885883a 	add	r2,r3,r2
  800b80:	10800b04 	addi	r2,r2,44
  800b84:	10800003 	ldbu	r2,0(r2)
  800b88:	11403fcc 	andi	r5,r2,255
  800b8c:	e0ffed17 	ldw	r3,-76(fp)
  800b90:	e0bd8917 	ldw	r2,-2524(fp)
  800b94:	1085883a 	add	r2,r2,r2
  800b98:	1085883a 	add	r2,r2,r2
  800b9c:	1885883a 	add	r2,r3,r2
  800ba0:	10800b44 	addi	r2,r2,45
  800ba4:	10800003 	ldbu	r2,0(r2)
  800ba8:	10803fcc 	andi	r2,r2,255
  800bac:	1004923a 	slli	r2,r2,8
  800bb0:	2884b03a 	or	r2,r5,r2
  800bb4:	20800015 	stw	r2,0(r4)
		printf("Samples: %d\n", sdCard.numberSamples);
		sdCard.fileBufL = malloc(sdCard.numberSamples * sizeof(eint16));
		sdCard.fileBufR = malloc(sdCard.numberSamples * sizeof(eint16));

		int i;
		for(i = 0; i < sdCard.numberSamples; i++) {
  800bb8:	e0bd8917 	ldw	r2,-2524(fp)
  800bbc:	10800044 	addi	r2,r2,1
  800bc0:	e0bd8915 	stw	r2,-2524(fp)
  800bc4:	e0fffe17 	ldw	r3,-8(fp)
  800bc8:	e0bd8917 	ldw	r2,-2524(fp)
  800bcc:	10ffca16 	blt	r2,r3,800af8 <sdRead+0x644>
//		{
//			printf("%c", sdCard.fileBuffer[j]);
//		}

		// Unmount the file system
		fs_umount(&efsl.myFs);
  800bd0:	e0bd8d04 	addi	r2,fp,-2508
  800bd4:	11023904 	addi	r4,r2,2276
  800bd8:	08053280 	call	805328 <fs_umount>
		return sdCard;
  800bdc:	e13fff17 	ldw	r4,-4(fp)
  800be0:	e17fed04 	addi	r5,fp,-76
  800be4:	01801204 	movi	r6,72
  800be8:	080dd7c0 	call	80dd7c <memcpy>

		// Free the file buffer memory
		//free(fileBuffer);
	}
  800bec:	e0bfff17 	ldw	r2,-4(fp)
  800bf0:	e037883a 	mov	sp,fp
  800bf4:	dfc00117 	ldw	ra,4(sp)
  800bf8:	df000017 	ldw	fp,0(sp)
  800bfc:	dec00204 	addi	sp,sp,8
  800c00:	f800283a 	ret

00800c04 <dir_getFileStructure>:
 * Description: This function stores the filerecord located at loc in filerec.
 * It fetches the required sector for this.
 * Return value: void
*/
void dir_getFileStructure(FileSystem *fs,FileRecord *filerec,FileLocation *loc)
{
  800c04:	defffa04 	addi	sp,sp,-24
  800c08:	dfc00515 	stw	ra,20(sp)
  800c0c:	df000415 	stw	fp,16(sp)
  800c10:	df000404 	addi	fp,sp,16
  800c14:	e13ffd15 	stw	r4,-12(fp)
  800c18:	e17ffe15 	stw	r5,-8(fp)
  800c1c:	e1bfff15 	stw	r6,-4(fp)
	euint8 *buf;

	buf=part_getSect(fs->part,loc->Sector,IOM_MODE_READONLY);
  800c20:	e0bffd17 	ldw	r2,-12(fp)
  800c24:	11000017 	ldw	r4,0(r2)
  800c28:	e0bfff17 	ldw	r2,-4(fp)
  800c2c:	11400017 	ldw	r5,0(r2)
  800c30:	01800044 	movi	r6,1
  800c34:	08085980 	call	808598 <part_getSect>
  800c38:	e0bffc15 	stw	r2,-16(fp)
	*filerec=*(((FileRecord*)buf)+loc->Offset);
  800c3c:	e0bfff17 	ldw	r2,-4(fp)
  800c40:	10800103 	ldbu	r2,4(r2)
  800c44:	10803fcc 	andi	r2,r2,255
  800c48:	1004917a 	slli	r2,r2,5
  800c4c:	1007883a 	mov	r3,r2
  800c50:	e0bffc17 	ldw	r2,-16(fp)
  800c54:	1887883a 	add	r3,r3,r2
  800c58:	e13ffe17 	ldw	r4,-8(fp)
  800c5c:	18800017 	ldw	r2,0(r3)
  800c60:	20800015 	stw	r2,0(r4)
  800c64:	18800117 	ldw	r2,4(r3)
  800c68:	20800115 	stw	r2,4(r4)
  800c6c:	18800217 	ldw	r2,8(r3)
  800c70:	20800215 	stw	r2,8(r4)
  800c74:	18800317 	ldw	r2,12(r3)
  800c78:	20800315 	stw	r2,12(r4)
  800c7c:	18800417 	ldw	r2,16(r3)
  800c80:	20800415 	stw	r2,16(r4)
  800c84:	18800517 	ldw	r2,20(r3)
  800c88:	20800515 	stw	r2,20(r4)
  800c8c:	18800617 	ldw	r2,24(r3)
  800c90:	20800615 	stw	r2,24(r4)
  800c94:	18800717 	ldw	r2,28(r3)
  800c98:	20800715 	stw	r2,28(r4)
	part_relSect(fs->part,buf);
  800c9c:	e0bffd17 	ldw	r2,-12(fp)
  800ca0:	11000017 	ldw	r4,0(r2)
  800ca4:	e17ffc17 	ldw	r5,-16(fp)
  800ca8:	08085f80 	call	8085f8 <part_relSect>
}	
  800cac:	e037883a 	mov	sp,fp
  800cb0:	dfc00117 	ldw	ra,4(sp)
  800cb4:	df000017 	ldw	fp,0(sp)
  800cb8:	dec00204 	addi	sp,sp,8
  800cbc:	f800283a 	ret

00800cc0 <dir_createDirectoryEntry>:
 * Description: This function writes the filerecord stored in filerec to disc at
 * location loc. 
 * Return value: void
*/
void dir_createDirectoryEntry(FileSystem *fs,FileRecord *filerec,FileLocation *loc)
{
  800cc0:	defffa04 	addi	sp,sp,-24
  800cc4:	dfc00515 	stw	ra,20(sp)
  800cc8:	df000415 	stw	fp,16(sp)
  800ccc:	df000404 	addi	fp,sp,16
  800cd0:	e13ffd15 	stw	r4,-12(fp)
  800cd4:	e17ffe15 	stw	r5,-8(fp)
  800cd8:	e1bfff15 	stw	r6,-4(fp)
	euint8 *buf;
	
	buf = part_getSect(fs->part,loc->Sector,IOM_MODE_READWRITE);
  800cdc:	e0bffd17 	ldw	r2,-12(fp)
  800ce0:	11000017 	ldw	r4,0(r2)
  800ce4:	e0bfff17 	ldw	r2,-4(fp)
  800ce8:	11400017 	ldw	r5,0(r2)
  800cec:	01800084 	movi	r6,2
  800cf0:	08085980 	call	808598 <part_getSect>
  800cf4:	e0bffc15 	stw	r2,-16(fp)
	memCpy(filerec,buf+(loc->Offset*sizeof(*filerec)),sizeof(*filerec));
  800cf8:	e0bfff17 	ldw	r2,-4(fp)
  800cfc:	10800103 	ldbu	r2,4(r2)
  800d00:	10803fcc 	andi	r2,r2,255
  800d04:	1004917a 	slli	r2,r2,5
  800d08:	1007883a 	mov	r3,r2
  800d0c:	e0bffc17 	ldw	r2,-16(fp)
  800d10:	188b883a 	add	r5,r3,r2
  800d14:	e13ffe17 	ldw	r4,-8(fp)
  800d18:	01800804 	movi	r6,32
  800d1c:	08088380 	call	808838 <memCpy>
	part_relSect(fs->part,buf);
  800d20:	e0bffd17 	ldw	r2,-12(fp)
  800d24:	11000017 	ldw	r4,0(r2)
  800d28:	e17ffc17 	ldw	r5,-16(fp)
  800d2c:	08085f80 	call	8085f8 <part_relSect>
}
  800d30:	e037883a 	mov	sp,fp
  800d34:	dfc00117 	ldw	ra,4(sp)
  800d38:	df000017 	ldw	fp,0(sp)
  800d3c:	dec00204 	addi	sp,sp,8
  800d40:	f800283a 	ret

00800d44 <dir_createDefaultEntry>:
 * a given fatfilename. If your system has a means of knowing time, here is an 
 * excellent place to apply it to the filerecord.  
 * Return value: void
*/
void dir_createDefaultEntry(FileSystem *fs,FileRecord *filerec,eint8* fatfilename)
{
  800d44:	defffb04 	addi	sp,sp,-20
  800d48:	dfc00415 	stw	ra,16(sp)
  800d4c:	df000315 	stw	fp,12(sp)
  800d50:	df000304 	addi	fp,sp,12
  800d54:	e13ffd15 	stw	r4,-12(fp)
  800d58:	e17ffe15 	stw	r5,-8(fp)
  800d5c:	e1bfff15 	stw	r6,-4(fp)
	memCpy(fatfilename,filerec->FileName,11);
  800d60:	e17ffe17 	ldw	r5,-8(fp)
  800d64:	e13fff17 	ldw	r4,-4(fp)
  800d68:	018002c4 	movi	r6,11
  800d6c:	08088380 	call	808838 <memCpy>
	filerec->Attribute=0x00;
  800d70:	e0bffe17 	ldw	r2,-8(fp)
  800d74:	100002c5 	stb	zero,11(r2)
	filerec->NTReserved=0x00;
  800d78:	e0bffe17 	ldw	r2,-8(fp)
  800d7c:	10000305 	stb	zero,12(r2)
	filerec->MilliSecTimeStamp=0x00;
  800d80:	e0bffe17 	ldw	r2,-8(fp)
  800d84:	10000345 	stb	zero,13(r2)
	filerec->CreatedTime=time_getTime();
  800d88:	e0bffe17 	ldw	r2,-8(fp)
  800d8c:	1000038d 	sth	zero,14(r2)
	filerec->CreatedDate=time_getDate(); 
  800d90:	e0bffe17 	ldw	r2,-8(fp)
  800d94:	1000040d 	sth	zero,16(r2)
	filerec->AccessDate=filerec->CreatedDate;
  800d98:	e0bffe17 	ldw	r2,-8(fp)
  800d9c:	10c0040b 	ldhu	r3,16(r2)
  800da0:	e0bffe17 	ldw	r2,-8(fp)
  800da4:	10c0048d 	sth	r3,18(r2)
	filerec->FirstClusterHigh=0x0000;
  800da8:	e0bffe17 	ldw	r2,-8(fp)
  800dac:	1000050d 	sth	zero,20(r2)
	filerec->WriteTime=filerec->CreatedTime;
  800db0:	e0bffe17 	ldw	r2,-8(fp)
  800db4:	10c0038b 	ldhu	r3,14(r2)
  800db8:	e0bffe17 	ldw	r2,-8(fp)
  800dbc:	10c0058d 	sth	r3,22(r2)
	filerec->WriteDate=filerec->CreatedDate;
  800dc0:	e0bffe17 	ldw	r2,-8(fp)
  800dc4:	10c0040b 	ldhu	r3,16(r2)
  800dc8:	e0bffe17 	ldw	r2,-8(fp)
  800dcc:	10c0060d 	sth	r3,24(r2)
	filerec->FirstClusterLow=0x0000;
  800dd0:	e0bffe17 	ldw	r2,-8(fp)
  800dd4:	1000068d 	sth	zero,26(r2)
	filerec->FileSize=0x00000000;
  800dd8:	e0bffe17 	ldw	r2,-8(fp)
  800ddc:	10000715 	stw	zero,28(r2)
}
  800de0:	e037883a 	mov	sp,fp
  800de4:	dfc00117 	ldw	ra,4(sp)
  800de8:	df000017 	ldw	fp,0(sp)
  800dec:	dec00204 	addi	sp,sp,8
  800df0:	f800283a 	ret

00800df4 <dir_setFirstCluster>:
 * Description: This function requires modification to release it from
 * depending on the file object.
 * Return value:
*/
void dir_setFirstCluster(FileSystem *fs,FileLocation *loc,euint32 cluster_addr)
{
  800df4:	defffa04 	addi	sp,sp,-24
  800df8:	dfc00515 	stw	ra,20(sp)
  800dfc:	df000415 	stw	fp,16(sp)
  800e00:	df000404 	addi	fp,sp,16
  800e04:	e13ffd15 	stw	r4,-12(fp)
  800e08:	e17ffe15 	stw	r5,-8(fp)
  800e0c:	e1bfff15 	stw	r6,-4(fp)
	euint8 *buf;
 	
 	buf = part_getSect(fs->part,loc->Sector,IOM_MODE_READWRITE);
  800e10:	e0bffd17 	ldw	r2,-12(fp)
  800e14:	11000017 	ldw	r4,0(r2)
  800e18:	e0bffe17 	ldw	r2,-8(fp)
  800e1c:	11400017 	ldw	r5,0(r2)
  800e20:	01800084 	movi	r6,2
  800e24:	08085980 	call	808598 <part_getSect>
  800e28:	e0bffc15 	stw	r2,-16(fp)
	(((FileRecord*)buf)+loc->Offset)->FirstClusterHigh=cluster_addr>>16;
  800e2c:	e0bffe17 	ldw	r2,-8(fp)
  800e30:	10800103 	ldbu	r2,4(r2)
  800e34:	10803fcc 	andi	r2,r2,255
  800e38:	1004917a 	slli	r2,r2,5
  800e3c:	1007883a 	mov	r3,r2
  800e40:	e0bffc17 	ldw	r2,-16(fp)
  800e44:	1887883a 	add	r3,r3,r2
  800e48:	e0bfff17 	ldw	r2,-4(fp)
  800e4c:	1004d43a 	srli	r2,r2,16
  800e50:	1880050d 	sth	r2,20(r3)
	(((FileRecord*)buf)+loc->Offset)->FirstClusterLow=cluster_addr&0xFFFF;	
  800e54:	e0bffe17 	ldw	r2,-8(fp)
  800e58:	10800103 	ldbu	r2,4(r2)
  800e5c:	10803fcc 	andi	r2,r2,255
  800e60:	1004917a 	slli	r2,r2,5
  800e64:	1007883a 	mov	r3,r2
  800e68:	e0bffc17 	ldw	r2,-16(fp)
  800e6c:	1887883a 	add	r3,r3,r2
  800e70:	e0bfff17 	ldw	r2,-4(fp)
  800e74:	1880068d 	sth	r2,26(r3)
	part_relSect(fs->part,buf);
  800e78:	e0bffd17 	ldw	r2,-12(fp)
  800e7c:	11000017 	ldw	r4,0(r2)
  800e80:	e17ffc17 	ldw	r5,-16(fp)
  800e84:	08085f80 	call	8085f8 <part_relSect>
}
  800e88:	e037883a 	mov	sp,fp
  800e8c:	dfc00117 	ldw	ra,4(sp)
  800e90:	df000017 	ldw	fp,0(sp)
  800e94:	dec00204 	addi	sp,sp,8
  800e98:	f800283a 	ret

00800e9c <dir_setFileSize>:
 * Description: This function changes the filesize recorded at loc->Sector
 * to 'numbytes'.
 * Return value: void
*/
void dir_setFileSize(FileSystem *fs, FileLocation *loc,euint32 numbytes)
{
  800e9c:	defffa04 	addi	sp,sp,-24
  800ea0:	dfc00515 	stw	ra,20(sp)
  800ea4:	df000415 	stw	fp,16(sp)
  800ea8:	df000404 	addi	fp,sp,16
  800eac:	e13ffd15 	stw	r4,-12(fp)
  800eb0:	e17ffe15 	stw	r5,-8(fp)
  800eb4:	e1bfff15 	stw	r6,-4(fp)
	euint8 *buf;
	
	buf = part_getSect(fs->part,loc->Sector,IOM_MODE_READWRITE);
  800eb8:	e0bffd17 	ldw	r2,-12(fp)
  800ebc:	11000017 	ldw	r4,0(r2)
  800ec0:	e0bffe17 	ldw	r2,-8(fp)
  800ec4:	11400017 	ldw	r5,0(r2)
  800ec8:	01800084 	movi	r6,2
  800ecc:	08085980 	call	808598 <part_getSect>
  800ed0:	e0bffc15 	stw	r2,-16(fp)
	(((FileRecord*)buf)+loc->Offset)->FileSize=numbytes;
  800ed4:	e0bffe17 	ldw	r2,-8(fp)
  800ed8:	10800103 	ldbu	r2,4(r2)
  800edc:	10803fcc 	andi	r2,r2,255
  800ee0:	1004917a 	slli	r2,r2,5
  800ee4:	1007883a 	mov	r3,r2
  800ee8:	e0bffc17 	ldw	r2,-16(fp)
  800eec:	1887883a 	add	r3,r3,r2
  800ef0:	e0bfff17 	ldw	r2,-4(fp)
  800ef4:	18800715 	stw	r2,28(r3)
	part_relSect(fs->part,buf);
  800ef8:	e0bffd17 	ldw	r2,-12(fp)
  800efc:	11000017 	ldw	r4,0(r2)
  800f00:	e17ffc17 	ldw	r5,-16(fp)
  800f04:	08085f80 	call	8085f8 <part_relSect>
}
  800f08:	e037883a 	mov	sp,fp
  800f0c:	dfc00117 	ldw	ra,4(sp)
  800f10:	df000017 	ldw	fp,0(sp)
  800f14:	dec00204 	addi	sp,sp,8
  800f18:	f800283a 	ret

00800f1c <dir_updateDirectoryEntry>:
 * This function changes the entire entity stores at loc to the data recorded
 * in entry. This is for custom updates to the directoryentry.
 * Return value: 0 on success, -1 on failure
*/
esint8 dir_updateDirectoryEntry(FileSystem *fs,FileRecord *entry,FileLocation *loc)
{
  800f1c:	defffa04 	addi	sp,sp,-24
  800f20:	dfc00515 	stw	ra,20(sp)
  800f24:	df000415 	stw	fp,16(sp)
  800f28:	df000404 	addi	fp,sp,16
  800f2c:	e13ffd15 	stw	r4,-12(fp)
  800f30:	e17ffe15 	stw	r5,-8(fp)
  800f34:	e1bfff15 	stw	r6,-4(fp)
	euint8 *buf;
	
	buf = part_getSect(fs->part,loc->Sector,IOM_MODE_READWRITE);
  800f38:	e0bffd17 	ldw	r2,-12(fp)
  800f3c:	11000017 	ldw	r4,0(r2)
  800f40:	e0bfff17 	ldw	r2,-4(fp)
  800f44:	11400017 	ldw	r5,0(r2)
  800f48:	01800084 	movi	r6,2
  800f4c:	08085980 	call	808598 <part_getSect>
  800f50:	e0bffc15 	stw	r2,-16(fp)
	memCpy(entry,buf+(loc->Offset*sizeof(*entry)),sizeof(*entry));
  800f54:	e0bfff17 	ldw	r2,-4(fp)
  800f58:	10800103 	ldbu	r2,4(r2)
  800f5c:	10803fcc 	andi	r2,r2,255
  800f60:	1004917a 	slli	r2,r2,5
  800f64:	1007883a 	mov	r3,r2
  800f68:	e0bffc17 	ldw	r2,-16(fp)
  800f6c:	188b883a 	add	r5,r3,r2
  800f70:	e13ffe17 	ldw	r4,-8(fp)
  800f74:	01800804 	movi	r6,32
  800f78:	08088380 	call	808838 <memCpy>
	part_relSect(fs->part,buf);
  800f7c:	e0bffd17 	ldw	r2,-12(fp)
  800f80:	11000017 	ldw	r4,0(r2)
  800f84:	e17ffc17 	ldw	r5,-16(fp)
  800f88:	08085f80 	call	8085f8 <part_relSect>
	return(0);
  800f8c:	0005883a 	mov	r2,zero
}
  800f90:	e037883a 	mov	sp,fp
  800f94:	dfc00117 	ldw	ra,4(sp)
  800f98:	df000017 	ldw	fp,0(sp)
  800f9c:	dec00204 	addi	sp,sp,8
  800fa0:	f800283a 	ret

00800fa4 <dir_findFileinBuf>:
 * If loc is 0, then it's members are not touched.
 * Return value: This function returns 0 when it cannot find the file,
 * if it can find the file it will return the first cluster number.
*/
euint32 dir_findFileinBuf(euint8 *buf, eint8 *fatname, FileLocation *loc)
{
  800fa4:	defff104 	addi	sp,sp,-60
  800fa8:	dfc00e15 	stw	ra,56(sp)
  800fac:	df000d15 	stw	fp,52(sp)
  800fb0:	df000d04 	addi	fp,sp,52
  800fb4:	e13ffc15 	stw	r4,-16(fp)
  800fb8:	e17ffd15 	stw	r5,-12(fp)
  800fbc:	e1bffe15 	stw	r6,-8(fp)
	FileRecord fileEntry;
	euint8 c;
	
	for(c=0; c<16; c++)
  800fc0:	e03ff305 	stb	zero,-52(fp)
  800fc4:	00004306 	br	8010d4 <dir_findFileinBuf+0x130>
	{
		fileEntry = *(((FileRecord*)buf) + c);
  800fc8:	e0bff303 	ldbu	r2,-52(fp)
  800fcc:	1004917a 	slli	r2,r2,5
  800fd0:	1007883a 	mov	r3,r2
  800fd4:	e0bffc17 	ldw	r2,-16(fp)
  800fd8:	1887883a 	add	r3,r3,r2
  800fdc:	18800017 	ldw	r2,0(r3)
  800fe0:	e0bff415 	stw	r2,-48(fp)
  800fe4:	18800117 	ldw	r2,4(r3)
  800fe8:	e0bff515 	stw	r2,-44(fp)
  800fec:	18800217 	ldw	r2,8(r3)
  800ff0:	e0bff615 	stw	r2,-40(fp)
  800ff4:	18800317 	ldw	r2,12(r3)
  800ff8:	e0bff715 	stw	r2,-36(fp)
  800ffc:	18800417 	ldw	r2,16(r3)
  801000:	e0bff815 	stw	r2,-32(fp)
  801004:	18800517 	ldw	r2,20(r3)
  801008:	e0bff915 	stw	r2,-28(fp)
  80100c:	18800617 	ldw	r2,24(r3)
  801010:	e0bffa15 	stw	r2,-24(fp)
  801014:	18800717 	ldw	r2,28(r3)
  801018:	e0bffb15 	stw	r2,-20(fp)
		/* Check if the entry is for short filenames */
		if( !( (fileEntry.Attribute & 0x0F) == 0x0F ) )
  80101c:	e0bff6c3 	ldbu	r2,-37(fp)
  801020:	10803fcc 	andi	r2,r2,255
  801024:	108003cc 	andi	r2,r2,15
  801028:	108003e0 	cmpeqi	r2,r2,15
  80102c:	1000261e 	bne	r2,zero,8010c8 <dir_findFileinBuf+0x124>
		{
			if( strMatch((eint8*)fileEntry.FileName,fatname,11) == 0 )
  801030:	e13ff404 	addi	r4,fp,-48
  801034:	e17ffd17 	ldw	r5,-12(fp)
  801038:	018002c4 	movi	r6,11
  80103c:	08087a00 	call	8087a0 <strMatch>
  801040:	10bfffcc 	andi	r2,r2,65535
  801044:	1004c03a 	cmpne	r2,r2,zero
  801048:	10001f1e 	bne	r2,zero,8010c8 <dir_findFileinBuf+0x124>
			{
				/* The entry has been found, return the location in the dir */
				if(loc)loc->Offset = c;
  80104c:	e0bffe17 	ldw	r2,-8(fp)
  801050:	1005003a 	cmpeq	r2,r2,zero
  801054:	1000031e 	bne	r2,zero,801064 <dir_findFileinBuf+0xc0>
  801058:	e0fffe17 	ldw	r3,-8(fp)
  80105c:	e0bff303 	ldbu	r2,-52(fp)
  801060:	18800105 	stb	r2,4(r3)
				if(loc)loc->attrib = fileEntry.Attribute;
  801064:	e0bffe17 	ldw	r2,-8(fp)
  801068:	1005003a 	cmpeq	r2,r2,zero
  80106c:	1000031e 	bne	r2,zero,80107c <dir_findFileinBuf+0xd8>
  801070:	e0fff6c3 	ldbu	r3,-37(fp)
  801074:	e0bffe17 	ldw	r2,-8(fp)
  801078:	10c00145 	stb	r3,5(r2)
				if((((euint32 )fileEntry.FirstClusterHigh)<<16)+ fileEntry.FirstClusterLow==0){
  80107c:	e0bff90b 	ldhu	r2,-28(fp)
  801080:	10bfffcc 	andi	r2,r2,65535
  801084:	1006943a 	slli	r3,r2,16
  801088:	e0bffa8b 	ldhu	r2,-22(fp)
  80108c:	10bfffcc 	andi	r2,r2,65535
  801090:	1885883a 	add	r2,r3,r2
  801094:	1004c03a 	cmpne	r2,r2,zero
  801098:	1000031e 	bne	r2,zero,8010a8 <dir_findFileinBuf+0x104>
					return(1); /* Lie about cluster, 0 means not found! */
  80109c:	00800044 	movi	r2,1
  8010a0:	e0bfff15 	stw	r2,-4(fp)
  8010a4:	00000f06 	br	8010e4 <dir_findFileinBuf+0x140>
				}else{
					return
  8010a8:	e0bff90b 	ldhu	r2,-28(fp)
  8010ac:	10bfffcc 	andi	r2,r2,65535
  8010b0:	1006943a 	slli	r3,r2,16
  8010b4:	e0bffa8b 	ldhu	r2,-22(fp)
  8010b8:	10bfffcc 	andi	r2,r2,65535
  8010bc:	1887883a 	add	r3,r3,r2
  8010c0:	e0ffff15 	stw	r3,-4(fp)
  8010c4:	00000706 	br	8010e4 <dir_findFileinBuf+0x140>
euint32 dir_findFileinBuf(euint8 *buf, eint8 *fatname, FileLocation *loc)
{
	FileRecord fileEntry;
	euint8 c;
	
	for(c=0; c<16; c++)
  8010c8:	e0bff303 	ldbu	r2,-52(fp)
  8010cc:	10800044 	addi	r2,r2,1
  8010d0:	e0bff305 	stb	r2,-52(fp)
  8010d4:	e0bff303 	ldbu	r2,-52(fp)
  8010d8:	10800430 	cmpltui	r2,r2,16
  8010dc:	103fba1e 	bne	r2,zero,800fc8 <dir_findFileinBuf+0x24>
							);
				}
			}
		}
	}
	return(0);
  8010e0:	e03fff15 	stw	zero,-4(fp)
  8010e4:	e0bfff17 	ldw	r2,-4(fp)
}
  8010e8:	e037883a 	mov	sp,fp
  8010ec:	dfc00117 	ldw	ra,4(sp)
  8010f0:	df000017 	ldw	fp,0(sp)
  8010f4:	dec00204 	addi	sp,sp,8
  8010f8:	f800283a 	ret

008010fc <dir_findFreeEntryinBuf>:
 * This function searches for a free entry in a given sector 'buf'.
 * It will put the offset into the loc->Offset field, given that loc is not 0.
 * Return value: 1 when it found a free spot, 0 if it hasn't.
*/
euint32 dir_findFreeEntryinBuf(euint8* buf, FileLocation *loc)
{
  8010fc:	defff304 	addi	sp,sp,-52
  801100:	df000c15 	stw	fp,48(sp)
  801104:	df000c04 	addi	fp,sp,48
  801108:	e13ffd15 	stw	r4,-12(fp)
  80110c:	e17ffe15 	stw	r5,-8(fp)
	FileRecord fileEntry;
	euint8 c;
	
	for(c=0;c<16;c++){
  801110:	e03ff405 	stb	zero,-48(fp)
  801114:	00002e06 	br	8011d0 <dir_findFreeEntryinBuf+0xd4>
		fileEntry = *(((FileRecord*)buf) + c);
  801118:	e0bff403 	ldbu	r2,-48(fp)
  80111c:	1004917a 	slli	r2,r2,5
  801120:	1007883a 	mov	r3,r2
  801124:	e0bffd17 	ldw	r2,-12(fp)
  801128:	1887883a 	add	r3,r3,r2
  80112c:	18800017 	ldw	r2,0(r3)
  801130:	e0bff515 	stw	r2,-44(fp)
  801134:	18800117 	ldw	r2,4(r3)
  801138:	e0bff615 	stw	r2,-40(fp)
  80113c:	18800217 	ldw	r2,8(r3)
  801140:	e0bff715 	stw	r2,-36(fp)
  801144:	18800317 	ldw	r2,12(r3)
  801148:	e0bff815 	stw	r2,-32(fp)
  80114c:	18800417 	ldw	r2,16(r3)
  801150:	e0bff915 	stw	r2,-28(fp)
  801154:	18800517 	ldw	r2,20(r3)
  801158:	e0bffa15 	stw	r2,-24(fp)
  80115c:	18800617 	ldw	r2,24(r3)
  801160:	e0bffb15 	stw	r2,-20(fp)
  801164:	18800717 	ldw	r2,28(r3)
  801168:	e0bffc15 	stw	r2,-16(fp)
		if( !( (fileEntry.Attribute & 0x0F) == 0x0F ) ){
  80116c:	e0bff7c3 	ldbu	r2,-33(fp)
  801170:	10803fcc 	andi	r2,r2,255
  801174:	108003cc 	andi	r2,r2,15
  801178:	108003e0 	cmpeqi	r2,r2,15
  80117c:	1000111e 	bne	r2,zero,8011c4 <dir_findFreeEntryinBuf+0xc8>
			if(fileEntry.FileName[0] == 0x00 ||
  801180:	e0bff503 	ldbu	r2,-44(fp)
  801184:	10803fcc 	andi	r2,r2,255
  801188:	1005003a 	cmpeq	r2,r2,zero
  80118c:	1000041e 	bne	r2,zero,8011a0 <dir_findFreeEntryinBuf+0xa4>
  801190:	e0bff503 	ldbu	r2,-44(fp)
  801194:	10803fcc 	andi	r2,r2,255
  801198:	10803958 	cmpnei	r2,r2,229
  80119c:	1000091e 	bne	r2,zero,8011c4 <dir_findFreeEntryinBuf+0xc8>
			   fileEntry.FileName[0] == 0xE5 ){
				if(loc)loc->Offset=c;
  8011a0:	e0bffe17 	ldw	r2,-8(fp)
  8011a4:	1005003a 	cmpeq	r2,r2,zero
  8011a8:	1000031e 	bne	r2,zero,8011b8 <dir_findFreeEntryinBuf+0xbc>
  8011ac:	e0fffe17 	ldw	r3,-8(fp)
  8011b0:	e0bff403 	ldbu	r2,-48(fp)
  8011b4:	18800105 	stb	r2,4(r3)
				return(1);
  8011b8:	00800044 	movi	r2,1
  8011bc:	e0bfff15 	stw	r2,-4(fp)
  8011c0:	00000706 	br	8011e0 <dir_findFreeEntryinBuf+0xe4>
euint32 dir_findFreeEntryinBuf(euint8* buf, FileLocation *loc)
{
	FileRecord fileEntry;
	euint8 c;
	
	for(c=0;c<16;c++){
  8011c4:	e0bff403 	ldbu	r2,-48(fp)
  8011c8:	10800044 	addi	r2,r2,1
  8011cc:	e0bff405 	stb	r2,-48(fp)
  8011d0:	e0bff403 	ldbu	r2,-48(fp)
  8011d4:	10800430 	cmpltui	r2,r2,16
  8011d8:	103fcf1e 	bne	r2,zero,801118 <dir_findFreeEntryinBuf+0x1c>
				if(loc)loc->Offset=c;
				return(1);
			}
		}
	}
	return(0);
  8011dc:	e03fff15 	stw	zero,-4(fp)
  8011e0:	e0bfff17 	ldw	r2,-4(fp)
}
  8011e4:	e037883a 	mov	sp,fp
  8011e8:	df000017 	ldw	fp,0(sp)
  8011ec:	dec00104 	addi	sp,sp,4
  8011f0:	f800283a 	ret

008011f4 <dir_findinBuf>:
 * euint32  dir_findinBuf(euint8 *buf, eint8 *fatname, FileLocation *loc)
 * Description: This function searches for a given fatfilename in a buffer.
 * Return value: Returns 0 on not found, and the firstcluster when the name is found.
*/
euint32  dir_findinBuf(euint8 *buf, eint8 *fatname, FileLocation *loc, euint8 mode)
{
  8011f4:	defff804 	addi	sp,sp,-32
  8011f8:	dfc00715 	stw	ra,28(sp)
  8011fc:	df000615 	stw	fp,24(sp)
  801200:	df000604 	addi	fp,sp,24
  801204:	e13ffa15 	stw	r4,-24(fp)
  801208:	e17ffb15 	stw	r5,-20(fp)
  80120c:	e1bffc15 	stw	r6,-16(fp)
  801210:	e1fffd05 	stb	r7,-12(fp)
	switch(mode){
  801214:	e0bffd03 	ldbu	r2,-12(fp)
  801218:	e0bfff15 	stw	r2,-4(fp)
  80121c:	e0ffff17 	ldw	r3,-4(fp)
  801220:	1805003a 	cmpeq	r2,r3,zero
  801224:	1000041e 	bne	r2,zero,801238 <dir_findinBuf+0x44>
  801228:	e0ffff17 	ldw	r3,-4(fp)
  80122c:	18800060 	cmpeqi	r2,r3,1
  801230:	1000071e 	bne	r2,zero,801250 <dir_findinBuf+0x5c>
  801234:	00000b06 	br	801264 <dir_findinBuf+0x70>
		case DIRFIND_FILE:
			return(dir_findFileinBuf(buf,fatname,loc));
  801238:	e13ffa17 	ldw	r4,-24(fp)
  80123c:	e17ffb17 	ldw	r5,-20(fp)
  801240:	e1bffc17 	ldw	r6,-16(fp)
  801244:	0800fa40 	call	800fa4 <dir_findFileinBuf>
  801248:	e0bffe15 	stw	r2,-8(fp)
  80124c:	00000606 	br	801268 <dir_findinBuf+0x74>
			break;
		case DIRFIND_FREE:
			return(dir_findFreeEntryinBuf(buf,loc));
  801250:	e13ffa17 	ldw	r4,-24(fp)
  801254:	e17ffc17 	ldw	r5,-16(fp)
  801258:	08010fc0 	call	8010fc <dir_findFreeEntryinBuf>
  80125c:	e0bffe15 	stw	r2,-8(fp)
  801260:	00000106 	br	801268 <dir_findinBuf+0x74>
			break;
		default:
			return(0);
  801264:	e03ffe15 	stw	zero,-8(fp)
  801268:	e0bffe17 	ldw	r2,-8(fp)
			break;
	}
	return(0);
}
  80126c:	e037883a 	mov	sp,fp
  801270:	dfc00117 	ldw	ra,4(sp)
  801274:	df000017 	ldw	fp,0(sp)
  801278:	dec00204 	addi	sp,sp,8
  80127c:	f800283a 	ret

00801280 <dir_findinCluster>:
 * This function will search for an existing (fatname) or free directory entry
 * in a full cluster.
 * Return value: 0 on failure, firstcluster on finding file, and 1 on finding free spot.
*/
euint32 dir_findinCluster(FileSystem *fs,euint32 cluster,eint8 *fatname, FileLocation *loc, euint8 mode)
{
  801280:	defff404 	addi	sp,sp,-48
  801284:	dfc00b15 	stw	ra,44(sp)
  801288:	df000a15 	stw	fp,40(sp)
  80128c:	dc000915 	stw	r16,36(sp)
  801290:	df000904 	addi	fp,sp,36
  801294:	e13ffa15 	stw	r4,-24(fp)
  801298:	e17ffb15 	stw	r5,-20(fp)
  80129c:	e1bffc15 	stw	r6,-16(fp)
  8012a0:	e1fffd15 	stw	r7,-12(fp)
  8012a4:	e0800317 	ldw	r2,12(fp)
  8012a8:	e0bffe05 	stb	r2,-8(fp)
	euint8 c,*buf=0;
  8012ac:	e03ff815 	stw	zero,-32(fp)
	euint32 fclus;
	
	for(c=0;c<fs->volumeId.SectorsPerCluster;c++){
  8012b0:	e03ff905 	stb	zero,-28(fp)
  8012b4:	00002e06 	br	801370 <dir_findinCluster+0xf0>
		buf = part_getSect(fs->part,fs_clusterToSector(fs,cluster)+c,IOM_MODE_READONLY);
  8012b8:	e0bffa17 	ldw	r2,-24(fp)
  8012bc:	14000017 	ldw	r16,0(r2)
  8012c0:	e13ffa17 	ldw	r4,-24(fp)
  8012c4:	e17ffb17 	ldw	r5,-20(fp)
  8012c8:	0804b3c0 	call	804b3c <fs_clusterToSector>
  8012cc:	1007883a 	mov	r3,r2
  8012d0:	e0bff903 	ldbu	r2,-28(fp)
  8012d4:	188b883a 	add	r5,r3,r2
  8012d8:	8009883a 	mov	r4,r16
  8012dc:	01800044 	movi	r6,1
  8012e0:	08085980 	call	808598 <part_getSect>
  8012e4:	e0bff815 	stw	r2,-32(fp)
		if((fclus=dir_findinBuf(buf,fatname,loc,mode))){
  8012e8:	e1fffe03 	ldbu	r7,-8(fp)
  8012ec:	e13ff817 	ldw	r4,-32(fp)
  8012f0:	e17ffc17 	ldw	r5,-16(fp)
  8012f4:	e1bffd17 	ldw	r6,-12(fp)
  8012f8:	08011f40 	call	8011f4 <dir_findinBuf>
  8012fc:	e0bff715 	stw	r2,-36(fp)
  801300:	e0bff717 	ldw	r2,-36(fp)
  801304:	1005003a 	cmpeq	r2,r2,zero
  801308:	1000121e 	bne	r2,zero,801354 <dir_findinCluster+0xd4>
			if(loc)loc->Sector=fs_clusterToSector(fs,cluster)+c;
  80130c:	e0bffd17 	ldw	r2,-12(fp)
  801310:	1005003a 	cmpeq	r2,r2,zero
  801314:	1000081e 	bne	r2,zero,801338 <dir_findinCluster+0xb8>
  801318:	e13ffa17 	ldw	r4,-24(fp)
  80131c:	e17ffb17 	ldw	r5,-20(fp)
  801320:	0804b3c0 	call	804b3c <fs_clusterToSector>
  801324:	1007883a 	mov	r3,r2
  801328:	e0bff903 	ldbu	r2,-28(fp)
  80132c:	1887883a 	add	r3,r3,r2
  801330:	e0bffd17 	ldw	r2,-12(fp)
  801334:	10c00015 	stw	r3,0(r2)
			part_relSect(fs->part,buf);
  801338:	e0bffa17 	ldw	r2,-24(fp)
  80133c:	11000017 	ldw	r4,0(r2)
  801340:	e17ff817 	ldw	r5,-32(fp)
  801344:	08085f80 	call	8085f8 <part_relSect>
			return(fclus);
  801348:	e0bff717 	ldw	r2,-36(fp)
  80134c:	e0bfff15 	stw	r2,-4(fp)
  801350:	00000d06 	br	801388 <dir_findinCluster+0x108>
		}
		part_relSect(fs->part,buf); /* Thanks Mike ;) */
  801354:	e0bffa17 	ldw	r2,-24(fp)
  801358:	11000017 	ldw	r4,0(r2)
  80135c:	e17ff817 	ldw	r5,-32(fp)
  801360:	08085f80 	call	8085f8 <part_relSect>
euint32 dir_findinCluster(FileSystem *fs,euint32 cluster,eint8 *fatname, FileLocation *loc, euint8 mode)
{
	euint8 c,*buf=0;
	euint32 fclus;
	
	for(c=0;c<fs->volumeId.SectorsPerCluster;c++){
  801364:	e0bff903 	ldbu	r2,-28(fp)
  801368:	10800044 	addi	r2,r2,1
  80136c:	e0bff905 	stb	r2,-28(fp)
  801370:	e0bffa17 	ldw	r2,-24(fp)
  801374:	10800183 	ldbu	r2,6(r2)
  801378:	10c03fcc 	andi	r3,r2,255
  80137c:	e0bff903 	ldbu	r2,-28(fp)
  801380:	10ffcd36 	bltu	r2,r3,8012b8 <dir_findinCluster+0x38>
			part_relSect(fs->part,buf);
			return(fclus);
		}
		part_relSect(fs->part,buf); /* Thanks Mike ;) */
	}
	return(0);
  801384:	e03fff15 	stw	zero,-4(fp)
  801388:	e0bfff17 	ldw	r2,-4(fp)
}
  80138c:	e037883a 	mov	sp,fp
  801390:	dfc00217 	ldw	ra,8(sp)
  801394:	df000117 	ldw	fp,4(sp)
  801398:	dc000017 	ldw	r16,0(sp)
  80139c:	dec00304 	addi	sp,sp,12
  8013a0:	f800283a 	ret

008013a4 <dir_findinDir>:
 * This function will search for an existing (fatname) or free directory entry
 * in a directory, following the clusterchains.
 * Return value: 0 on failure, firstcluster on finding file, and 1 on finding free spot.
*/
euint32 dir_findinDir(FileSystem *fs, eint8* fatname,euint32 firstcluster, FileLocation *loc, euint8 mode)
{
  8013a4:	deffef04 	addi	sp,sp,-68
  8013a8:	dfc01015 	stw	ra,64(sp)
  8013ac:	df000f15 	stw	fp,60(sp)
  8013b0:	df000f04 	addi	fp,sp,60
  8013b4:	e13ffa15 	stw	r4,-24(fp)
  8013b8:	e17ffb15 	stw	r5,-20(fp)
  8013bc:	e1bffc15 	stw	r6,-16(fp)
  8013c0:	e1fffd15 	stw	r7,-12(fp)
  8013c4:	e0800217 	ldw	r2,8(fp)
  8013c8:	e0bffe05 	stb	r2,-8(fp)
	euint32 c=0,cluster;
  8013cc:	e03ff315 	stw	zero,-52(fp)
	ClusterChain Cache;
	
	Cache.DiscCluster = Cache.FirstCluster = firstcluster;
  8013d0:	e0bffc17 	ldw	r2,-16(fp)
  8013d4:	e0bff715 	stw	r2,-36(fp)
  8013d8:	e0bff717 	ldw	r2,-36(fp)
  8013dc:	e0bff615 	stw	r2,-40(fp)
	Cache.LogicCluster = Cache.LastCluster = Cache.Linear = 0;
  8013e0:	e03ff405 	stb	zero,-48(fp)
  8013e4:	e03ff815 	stw	zero,-32(fp)
  8013e8:	e0bff817 	ldw	r2,-32(fp)
  8013ec:	e0bff515 	stw	r2,-44(fp)
	
	if(firstcluster <= 1){
  8013f0:	e0bffc17 	ldw	r2,-16(fp)
  8013f4:	108000a8 	cmpgeui	r2,r2,2
  8013f8:	1000151e 	bne	r2,zero,801450 <dir_findinDir+0xac>
		return(dir_findinRootArea(fs,fatname,loc,mode));	
  8013fc:	e1fffe03 	ldbu	r7,-8(fp)
  801400:	e13ffa17 	ldw	r4,-24(fp)
  801404:	e17ffb17 	ldw	r5,-20(fp)
  801408:	e1bffd17 	ldw	r6,-12(fp)
  80140c:	080149c0 	call	80149c <dir_findinRootArea>
  801410:	e0bfff15 	stw	r2,-4(fp)
  801414:	00001b06 	br	801484 <dir_findinDir+0xe0>
	}
	
	while(!fat_LogicToDiscCluster(fs,&Cache,c++)){
		if((cluster=dir_findinCluster(fs,Cache.DiscCluster,fatname,loc,mode))){
  801418:	e17ff617 	ldw	r5,-40(fp)
  80141c:	e0bffe03 	ldbu	r2,-8(fp)
  801420:	d8800015 	stw	r2,0(sp)
  801424:	e13ffa17 	ldw	r4,-24(fp)
  801428:	e1bffb17 	ldw	r6,-20(fp)
  80142c:	e1fffd17 	ldw	r7,-12(fp)
  801430:	08012800 	call	801280 <dir_findinCluster>
  801434:	e0bff215 	stw	r2,-56(fp)
  801438:	e0bff217 	ldw	r2,-56(fp)
  80143c:	1005003a 	cmpeq	r2,r2,zero
  801440:	1000031e 	bne	r2,zero,801450 <dir_findinDir+0xac>
			return(cluster);
  801444:	e0bff217 	ldw	r2,-56(fp)
  801448:	e0bfff15 	stw	r2,-4(fp)
  80144c:	00000d06 	br	801484 <dir_findinDir+0xe0>
	
	if(firstcluster <= 1){
		return(dir_findinRootArea(fs,fatname,loc,mode));	
	}
	
	while(!fat_LogicToDiscCluster(fs,&Cache,c++)){
  801450:	e1bff317 	ldw	r6,-52(fp)
  801454:	e0bff317 	ldw	r2,-52(fp)
  801458:	10800044 	addi	r2,r2,1
  80145c:	e0bff315 	stw	r2,-52(fp)
  801460:	e17ff404 	addi	r5,fp,-48
  801464:	e13ffa17 	ldw	r4,-24(fp)
  801468:	0802b000 	call	802b00 <fat_LogicToDiscCluster>
  80146c:	10bfffcc 	andi	r2,r2,65535
  801470:	10a0001c 	xori	r2,r2,32768
  801474:	10a00004 	addi	r2,r2,-32768
  801478:	1005003a 	cmpeq	r2,r2,zero
  80147c:	103fe61e 	bne	r2,zero,801418 <dir_findinDir+0x74>
		if((cluster=dir_findinCluster(fs,Cache.DiscCluster,fatname,loc,mode))){
			return(cluster);
		}
	}
	return(0);
  801480:	e03fff15 	stw	zero,-4(fp)
  801484:	e0bfff17 	ldw	r2,-4(fp)
}
  801488:	e037883a 	mov	sp,fp
  80148c:	dfc00117 	ldw	ra,4(sp)
  801490:	df000017 	ldw	fp,0(sp)
  801494:	dec00204 	addi	sp,sp,8
  801498:	f800283a 	ret

0080149c <dir_findinRootArea>:
 * This function will search for an existing (fatname) or free directory entry
 * in the rootdirectory-area of a FAT12/FAT16 filesystem.
 * Return value: 0 on failure, firstcluster on finding file, and 1 on finding free spot.
*/
euint32 dir_findinRootArea(FileSystem *fs,eint8* fatname, FileLocation *loc, euint8 mode)
{
  80149c:	defff604 	addi	sp,sp,-40
  8014a0:	dfc00915 	stw	ra,36(sp)
  8014a4:	df000815 	stw	fp,32(sp)
  8014a8:	df000804 	addi	fp,sp,32
  8014ac:	e13ffb15 	stw	r4,-20(fp)
  8014b0:	e17ffc15 	stw	r5,-16(fp)
  8014b4:	e1bffd15 	stw	r6,-12(fp)
  8014b8:	e1fffe05 	stb	r7,-8(fp)
	euint32 c,fclus;
	euint8 *buf=0;
  8014bc:	e03ff815 	stw	zero,-32(fp)
	
	if((fs->type != FAT12) && (fs->type != FAT16))return(0);
  8014c0:	e0bffb17 	ldw	r2,-20(fp)
  8014c4:	10800f03 	ldbu	r2,60(r2)
  8014c8:	10803fcc 	andi	r2,r2,255
  8014cc:	10800060 	cmpeqi	r2,r2,1
  8014d0:	1000071e 	bne	r2,zero,8014f0 <dir_findinRootArea+0x54>
  8014d4:	e0bffb17 	ldw	r2,-20(fp)
  8014d8:	10800f03 	ldbu	r2,60(r2)
  8014dc:	10803fcc 	andi	r2,r2,255
  8014e0:	108000a0 	cmpeqi	r2,r2,2
  8014e4:	1000021e 	bne	r2,zero,8014f0 <dir_findinRootArea+0x54>
  8014e8:	e03fff15 	stw	zero,-4(fp)
  8014ec:	00003606 	br	8015c8 <dir_findinRootArea+0x12c>
	
	for(c=fs->FirstSectorRootDir;c<(fs->FirstSectorRootDir+fs->volumeId.RootEntryCount/32);c++){
  8014f0:	e0bffb17 	ldw	r2,-20(fp)
  8014f4:	10800b17 	ldw	r2,44(r2)
  8014f8:	e0bffa15 	stw	r2,-24(fp)
  8014fc:	00002306 	br	80158c <dir_findinRootArea+0xf0>
		buf = part_getSect(fs->part,c,IOM_MODE_READONLY);
  801500:	e0bffb17 	ldw	r2,-20(fp)
  801504:	11000017 	ldw	r4,0(r2)
  801508:	e17ffa17 	ldw	r5,-24(fp)
  80150c:	01800044 	movi	r6,1
  801510:	08085980 	call	808598 <part_getSect>
  801514:	e0bff815 	stw	r2,-32(fp)
		if((fclus=dir_findinBuf(buf,fatname,loc,mode))){
  801518:	e1fffe03 	ldbu	r7,-8(fp)
  80151c:	e13ff817 	ldw	r4,-32(fp)
  801520:	e17ffc17 	ldw	r5,-16(fp)
  801524:	e1bffd17 	ldw	r6,-12(fp)
  801528:	08011f40 	call	8011f4 <dir_findinBuf>
  80152c:	e0bff915 	stw	r2,-28(fp)
  801530:	e0bff917 	ldw	r2,-28(fp)
  801534:	1005003a 	cmpeq	r2,r2,zero
  801538:	10000d1e 	bne	r2,zero,801570 <dir_findinRootArea+0xd4>
			if(loc)loc->Sector=c;
  80153c:	e0bffd17 	ldw	r2,-12(fp)
  801540:	1005003a 	cmpeq	r2,r2,zero
  801544:	1000031e 	bne	r2,zero,801554 <dir_findinRootArea+0xb8>
  801548:	e0fffd17 	ldw	r3,-12(fp)
  80154c:	e0bffa17 	ldw	r2,-24(fp)
  801550:	18800015 	stw	r2,0(r3)
			part_relSect(fs->part,buf);
  801554:	e0bffb17 	ldw	r2,-20(fp)
  801558:	11000017 	ldw	r4,0(r2)
  80155c:	e17ff817 	ldw	r5,-32(fp)
  801560:	08085f80 	call	8085f8 <part_relSect>
			return(fclus);
  801564:	e0bff917 	ldw	r2,-28(fp)
  801568:	e0bfff15 	stw	r2,-4(fp)
  80156c:	00001606 	br	8015c8 <dir_findinRootArea+0x12c>
		}	
		part_relSect(fs->part,buf);	
  801570:	e0bffb17 	ldw	r2,-20(fp)
  801574:	11000017 	ldw	r4,0(r2)
  801578:	e17ff817 	ldw	r5,-32(fp)
  80157c:	08085f80 	call	8085f8 <part_relSect>
	euint32 c,fclus;
	euint8 *buf=0;
	
	if((fs->type != FAT12) && (fs->type != FAT16))return(0);
	
	for(c=fs->FirstSectorRootDir;c<(fs->FirstSectorRootDir+fs->volumeId.RootEntryCount/32);c++){
  801580:	e0bffa17 	ldw	r2,-24(fp)
  801584:	10800044 	addi	r2,r2,1
  801588:	e0bffa15 	stw	r2,-24(fp)
  80158c:	e0bffb17 	ldw	r2,-20(fp)
  801590:	10c00b17 	ldw	r3,44(r2)
  801594:	e0bffb17 	ldw	r2,-20(fp)
  801598:	1080030b 	ldhu	r2,12(r2)
  80159c:	10bfffcc 	andi	r2,r2,65535
  8015a0:	1004d17a 	srli	r2,r2,5
  8015a4:	10bfffcc 	andi	r2,r2,65535
  8015a8:	1887883a 	add	r3,r3,r2
  8015ac:	e0bffa17 	ldw	r2,-24(fp)
  8015b0:	10ffd336 	bltu	r2,r3,801500 <dir_findinRootArea+0x64>
			part_relSect(fs->part,buf);
			return(fclus);
		}	
		part_relSect(fs->part,buf);	
	}
	part_relSect(fs->part,buf);
  8015b4:	e0bffb17 	ldw	r2,-20(fp)
  8015b8:	11000017 	ldw	r4,0(r2)
  8015bc:	e17ff817 	ldw	r5,-32(fp)
  8015c0:	08085f80 	call	8085f8 <part_relSect>
	return(0);
  8015c4:	e03fff15 	stw	zero,-4(fp)
  8015c8:	e0bfff17 	ldw	r2,-4(fp)
}
  8015cc:	e037883a 	mov	sp,fp
  8015d0:	dfc00117 	ldw	ra,4(sp)
  8015d4:	df000017 	ldw	fp,0(sp)
  8015d8:	dec00204 	addi	sp,sp,8
  8015dc:	f800283a 	ret

008015e0 <dir_getFatFileName>:
 * This function will take a full directory path, and strip off all leading
 * dirs and characters, leaving you with the MS-DOS notation of the actual filename.
 * Return value: 1 on success, 0 on not being able to produca a filename
*/
esint8 dir_getFatFileName(eint8* filename, eint8* fatfilename)
{
  8015e0:	defff604 	addi	sp,sp,-40
  8015e4:	dfc00915 	stw	ra,36(sp)
  8015e8:	df000815 	stw	fp,32(sp)
  8015ec:	df000804 	addi	fp,sp,32
  8015f0:	e13ffd15 	stw	r4,-12(fp)
  8015f4:	e17ffe15 	stw	r5,-8(fp)
	eint8 ffnamec[11],*next,nn=0;
  8015f8:	e03ff805 	stb	zero,-32(fp)
	
	memClr(ffnamec,11); memClr(fatfilename,11);
  8015fc:	e13ffa04 	addi	r4,fp,-24
  801600:	014002c4 	movi	r5,11
  801604:	08088a40 	call	8088a4 <memClr>
  801608:	e13ffe17 	ldw	r4,-8(fp)
  80160c:	014002c4 	movi	r5,11
  801610:	08088a40 	call	8088a4 <memClr>
	next = filename;
  801614:	e0bffd17 	ldw	r2,-12(fp)
  801618:	e0bff915 	stw	r2,-28(fp)
	
	if(*filename=='/')next++;
  80161c:	e0bffd17 	ldw	r2,-12(fp)
  801620:	10800003 	ldbu	r2,0(r2)
  801624:	10803fcc 	andi	r2,r2,255
  801628:	1080201c 	xori	r2,r2,128
  80162c:	10bfe004 	addi	r2,r2,-128
  801630:	10800bd8 	cmpnei	r2,r2,47
  801634:	10000b1e 	bne	r2,zero,801664 <dir_getFatFileName+0x84>
  801638:	e0bff917 	ldw	r2,-28(fp)
  80163c:	10800044 	addi	r2,r2,1
  801640:	e0bff915 	stw	r2,-28(fp)
	
	while((next=file_normalToFatName(next,ffnamec))){
  801644:	00000706 	br	801664 <dir_getFatFileName+0x84>
		memCpy(ffnamec,fatfilename,11);	
  801648:	e13ffa04 	addi	r4,fp,-24
  80164c:	e17ffe17 	ldw	r5,-8(fp)
  801650:	018002c4 	movi	r6,11
  801654:	08088380 	call	808838 <memCpy>
		nn++;
  801658:	e0bff803 	ldbu	r2,-32(fp)
  80165c:	10800044 	addi	r2,r2,1
  801660:	e0bff805 	stb	r2,-32(fp)
	memClr(ffnamec,11); memClr(fatfilename,11);
	next = filename;
	
	if(*filename=='/')next++;
	
	while((next=file_normalToFatName(next,ffnamec))){
  801664:	e17ffa04 	addi	r5,fp,-24
  801668:	e13ff917 	ldw	r4,-28(fp)
  80166c:	0803ee40 	call	803ee4 <file_normalToFatName>
  801670:	e0bff915 	stw	r2,-28(fp)
  801674:	e0bff917 	ldw	r2,-28(fp)
  801678:	1004c03a 	cmpne	r2,r2,zero
  80167c:	103ff21e 	bne	r2,zero,801648 <dir_getFatFileName+0x68>
		memCpy(ffnamec,fatfilename,11);	
		nn++;
	}
	if(nn)return(1);
  801680:	e0bff807 	ldb	r2,-32(fp)
  801684:	1005003a 	cmpeq	r2,r2,zero
  801688:	1000031e 	bne	r2,zero,801698 <dir_getFatFileName+0xb8>
  80168c:	00800044 	movi	r2,1
  801690:	e0bfff15 	stw	r2,-4(fp)
  801694:	00000106 	br	80169c <dir_getFatFileName+0xbc>
	return(0);
  801698:	e03fff15 	stw	zero,-4(fp)
  80169c:	e0bfff17 	ldw	r2,-4(fp)
}
  8016a0:	e037883a 	mov	sp,fp
  8016a4:	dfc00117 	ldw	ra,4(sp)
  8016a8:	df000017 	ldw	fp,0(sp)
  8016ac:	dec00204 	addi	sp,sp,8
  8016b0:	f800283a 	ret

008016b4 <dir_addCluster>:
 * clusters you want pre-allocated. It will also delete the contents of that
 * cluster. (or clusters)
 * Return value: 0 on success, -1 on fail
*/
esint8 dir_addCluster(FileSystem *fs,euint32 firstCluster)
{
  8016b4:	defff304 	addi	sp,sp,-52
  8016b8:	dfc00c15 	stw	ra,48(sp)
  8016bc:	df000b15 	stw	fp,44(sp)
  8016c0:	df000b04 	addi	fp,sp,44
  8016c4:	e13ffd15 	stw	r4,-12(fp)
  8016c8:	e17ffe15 	stw	r5,-8(fp)
	euint32 lastc,logicalc;
	ClusterChain cache;
		
	fs_initClusterChain(fs,&cache,firstCluster);
  8016cc:	e17ff704 	addi	r5,fp,-36
  8016d0:	e13ffd17 	ldw	r4,-12(fp)
  8016d4:	e1bffe17 	ldw	r6,-8(fp)
  8016d8:	08052340 	call	805234 <fs_initClusterChain>
	if(fat_allocClusterChain(fs,&cache,1)){
  8016dc:	e17ff704 	addi	r5,fp,-36
  8016e0:	e13ffd17 	ldw	r4,-12(fp)
  8016e4:	01800044 	movi	r6,1
  8016e8:	0802c300 	call	802c30 <fat_allocClusterChain>
  8016ec:	10bfffcc 	andi	r2,r2,65535
  8016f0:	10a0001c 	xori	r2,r2,32768
  8016f4:	10a00004 	addi	r2,r2,-32768
  8016f8:	1005003a 	cmpeq	r2,r2,zero
  8016fc:	1000031e 	bne	r2,zero,80170c <dir_addCluster+0x58>
		return(-1);
  801700:	00bfffc4 	movi	r2,-1
  801704:	e0bfff15 	stw	r2,-4(fp)
  801708:	00000806 	br	80172c <dir_addCluster+0x78>
	}
	lastc = fs_getLastCluster(fs,&cache);
  80170c:	e17ff704 	addi	r5,fp,-36
  801710:	e13ffd17 	ldw	r4,-12(fp)
  801714:	08051080 	call	805108 <fs_getLastCluster>
  801718:	e0bff615 	stw	r2,-40(fp)
		logicalc = fat_DiscToLogicCluster(fs,firstCluster,lastc);
		while(!fat_LogicToDiscCluster(fs,&cache,++logicalc)){
			fs_clearCluster(fs,cache.DiscCluster);
		}
	}else{
			fs_clearCluster(fs,lastc);
  80171c:	e13ffd17 	ldw	r4,-12(fp)
  801720:	e17ff617 	ldw	r5,-40(fp)
  801724:	08053640 	call	805364 <fs_clearCluster>
	}
	return(0);
  801728:	e03fff15 	stw	zero,-4(fp)
  80172c:	e0bfff17 	ldw	r2,-4(fp)
}
  801730:	e037883a 	mov	sp,fp
  801734:	dfc00117 	ldw	ra,4(sp)
  801738:	df000017 	ldw	fp,0(sp)
  80173c:	dec00204 	addi	sp,sp,8
  801740:	f800283a 	ret

00801744 <disc_initDisc>:
 * void disc_initDisc(Disc *disc,hcInterface* source)
 * Description: This initialises the disc by loading the MBR and setting the
 * pointer to the hardware object.
*/
void disc_initDisc(Disc *disc,IOManager* ioman)
{
  801744:	defffc04 	addi	sp,sp,-16
  801748:	dfc00315 	stw	ra,12(sp)
  80174c:	df000215 	stw	fp,8(sp)
  801750:	df000204 	addi	fp,sp,8
  801754:	e13ffe15 	stw	r4,-8(fp)
  801758:	e17fff15 	stw	r5,-4(fp)
	disc->ioman=ioman;
  80175c:	e0bffe17 	ldw	r2,-8(fp)
  801760:	e0ffff17 	ldw	r3,-4(fp)
  801764:	10c00015 	stw	r3,0(r2)
	disc_setError(disc,DISC_NOERROR);
  801768:	e0bffe17 	ldw	r2,-8(fp)
  80176c:	10000105 	stb	zero,4(r2)
	disc_loadMBR(disc);
  801770:	e13ffe17 	ldw	r4,-8(fp)
  801774:	080178c0 	call	80178c <disc_loadMBR>
}
  801778:	e037883a 	mov	sp,fp
  80177c:	dfc00117 	ldw	ra,4(sp)
  801780:	df000017 	ldw	fp,0(sp)
  801784:	dec00204 	addi	sp,sp,8
  801788:	f800283a 	ret

0080178c <disc_loadMBR>:
/* ****************************************************************************  
 * void disc_loadMBR(Disc *disc)
 * Description: This functions copies the partitiontable to the partitions field.
*/
void disc_loadMBR(Disc *disc)
{
  80178c:	defffb04 	addi	sp,sp,-20
  801790:	dfc00415 	stw	ra,16(sp)
  801794:	df000315 	stw	fp,12(sp)
  801798:	df000304 	addi	fp,sp,12
  80179c:	e13fff15 	stw	r4,-4(fp)
	euint8 x;
	euint8 *buf;
	
	buf=ioman_getSector(disc->ioman,LBA_ADDR_MBR,IOM_MODE_READONLY|IOM_MODE_EXP_REQ);
  8017a0:	e0bfff17 	ldw	r2,-4(fp)
  8017a4:	11000017 	ldw	r4,0(r2)
  8017a8:	000b883a 	mov	r5,zero
  8017ac:	01800144 	movi	r6,5
  8017b0:	0806bb00 	call	806bb0 <ioman_getSector>
  8017b4:	e0bffd15 	stw	r2,-12(fp)
	for(x=0;x<4;x++){
  8017b8:	e03ffe05 	stb	zero,-8(fp)
  8017bc:	00000e06 	br	8017f8 <disc_loadMBR+0x6c>
		ex_getPartitionField(buf,&(disc->partitions[x]),PARTITION_TABLE_OFFSET+(x*SIZE_PARTITION_FIELD));
  8017c0:	e0bfff17 	ldw	r2,-4(fp)
  8017c4:	10c00204 	addi	r3,r2,8
  8017c8:	e0bffe03 	ldbu	r2,-8(fp)
  8017cc:	1004913a 	slli	r2,r2,4
  8017d0:	188b883a 	add	r5,r3,r2
  8017d4:	e0bffe03 	ldbu	r2,-8(fp)
  8017d8:	1004913a 	slli	r2,r2,4
  8017dc:	10806f84 	addi	r2,r2,446
  8017e0:	100d883a 	mov	r6,r2
  8017e4:	e13ffd17 	ldw	r4,-12(fp)
  8017e8:	0801b300 	call	801b30 <ex_getPartitionField>
{
	euint8 x;
	euint8 *buf;
	
	buf=ioman_getSector(disc->ioman,LBA_ADDR_MBR,IOM_MODE_READONLY|IOM_MODE_EXP_REQ);
	for(x=0;x<4;x++){
  8017ec:	e0bffe03 	ldbu	r2,-8(fp)
  8017f0:	10800044 	addi	r2,r2,1
  8017f4:	e0bffe05 	stb	r2,-8(fp)
  8017f8:	e0bffe03 	ldbu	r2,-8(fp)
  8017fc:	10800130 	cmpltui	r2,r2,4
  801800:	103fef1e 	bne	r2,zero,8017c0 <disc_loadMBR+0x34>
		ex_getPartitionField(buf,&(disc->partitions[x]),PARTITION_TABLE_OFFSET+(x*SIZE_PARTITION_FIELD));
	}
	ioman_releaseSector(disc->ioman,buf);
  801804:	e0bfff17 	ldw	r2,-4(fp)
  801808:	11000017 	ldw	r4,0(r2)
  80180c:	e17ffd17 	ldw	r5,-12(fp)
  801810:	0806ebc0 	call	806ebc <ioman_releaseSector>
}
  801814:	e037883a 	mov	sp,fp
  801818:	dfc00117 	ldw	ra,4(sp)
  80181c:	df000017 	ldw	fp,0(sp)
  801820:	dec00204 	addi	sp,sp,8
  801824:	f800283a 	ret

00801828 <efs_init>:
 * Description: This function initialises all subelements of a filesystem.
 * It sets the pointerchain and verifies each step.
 * Return value: 0 on success and -1 on failure.
*/
esint8 efs_init(EmbeddedFileSystem * efs,eint8* opts)
{
  801828:	defffb04 	addi	sp,sp,-20
  80182c:	dfc00415 	stw	ra,16(sp)
  801830:	df000315 	stw	fp,12(sp)
  801834:	df000304 	addi	fp,sp,12
  801838:	e13ffd15 	stw	r4,-12(fp)
  80183c:	e17ffe15 	stw	r5,-8(fp)
	if(if_initInterface(&efs->myCard, opts)==0)
  801840:	e13ffd17 	ldw	r4,-12(fp)
  801844:	e17ffe17 	ldw	r5,-8(fp)
  801848:	0807d400 	call	807d40 <if_initInterface>
  80184c:	10803fcc 	andi	r2,r2,255
  801850:	1080201c 	xori	r2,r2,128
  801854:	10bfe004 	addi	r2,r2,-128
  801858:	1004c03a 	cmpne	r2,r2,zero
  80185c:	1000341e 	bne	r2,zero,801930 <efs_init+0x108>
	{
		ioman_init(&efs->myIOman,&efs->myCard,0);
  801860:	e0bffd17 	ldw	r2,-12(fp)
  801864:	11000104 	addi	r4,r2,4
  801868:	e17ffd17 	ldw	r5,-12(fp)
  80186c:	000d883a 	mov	r6,zero
  801870:	08055e00 	call	8055e0 <ioman_init>
		disc_initDisc(&efs->myDisc, &efs->myIOman);
  801874:	e0bffd17 	ldw	r2,-12(fp)
  801878:	11022504 	addi	r4,r2,2196
  80187c:	e0bffd17 	ldw	r2,-12(fp)
  801880:	11400104 	addi	r5,r2,4
  801884:	08017440 	call	801744 <disc_initDisc>
		part_initPartition(&efs->myPart, &efs->myDisc);
  801888:	e0bffd17 	ldw	r2,-12(fp)
  80188c:	11023704 	addi	r4,r2,2268
  801890:	e0bffd17 	ldw	r2,-12(fp)
  801894:	11422504 	addi	r5,r2,2196
  801898:	08083340 	call	808334 <part_initPartition>
		if(efs->myPart.activePartition==-1){
  80189c:	e0bffd17 	ldw	r2,-12(fp)
  8018a0:	10823803 	ldbu	r2,2272(r2)
  8018a4:	10803fcc 	andi	r2,r2,255
  8018a8:	1080201c 	xori	r2,r2,128
  8018ac:	10bfe004 	addi	r2,r2,-128
  8018b0:	10bfffd8 	cmpnei	r2,r2,-1
  8018b4:	10000f1e 	bne	r2,zero,8018f4 <efs_init+0xcc>
			efs->myDisc.partitions[0].type=0x0B;
  8018b8:	e0fffd17 	ldw	r3,-12(fp)
  8018bc:	008002c4 	movi	r2,11
  8018c0:	18822805 	stb	r2,2208(r3)
			efs->myDisc.partitions[0].LBA_begin=0;
  8018c4:	e0bffd17 	ldw	r2,-12(fp)
  8018c8:	10022915 	stw	zero,2212(r2)
			efs->myDisc.partitions[0].numSectors=efs->myCard.sectorCount;	
  8018cc:	e0bffd17 	ldw	r2,-12(fp)
  8018d0:	10800017 	ldw	r2,0(r2)
  8018d4:	1007883a 	mov	r3,r2
  8018d8:	e0bffd17 	ldw	r2,-12(fp)
  8018dc:	10c22a15 	stw	r3,2216(r2)
			/*efs->myPart.activePartition = 0;*/
			/*efs->myPart.disc = &(efs->myDisc);*/
			part_initPartition(&efs->myPart, &efs->myDisc);
  8018e0:	e0bffd17 	ldw	r2,-12(fp)
  8018e4:	11023704 	addi	r4,r2,2268
  8018e8:	e0bffd17 	ldw	r2,-12(fp)
  8018ec:	11422504 	addi	r5,r2,2196
  8018f0:	08083340 	call	808334 <part_initPartition>
		}
		/*part_initPartition(&efs->myPart, &efs->myDisc);*/
		if(fs_initFs(&efs->myFs, &efs->myPart))
  8018f4:	e0bffd17 	ldw	r2,-12(fp)
  8018f8:	11023904 	addi	r4,r2,2276
  8018fc:	e0bffd17 	ldw	r2,-12(fp)
  801900:	11423704 	addi	r5,r2,2268
  801904:	08044640 	call	804464 <fs_initFs>
  801908:	10bfffcc 	andi	r2,r2,65535
  80190c:	10a0001c 	xori	r2,r2,32768
  801910:	10a00004 	addi	r2,r2,-32768
  801914:	1005003a 	cmpeq	r2,r2,zero
  801918:	1000031e 	bne	r2,zero,801928 <efs_init+0x100>
			return(-2);
  80191c:	00bfff84 	movi	r2,-2
  801920:	e0bfff15 	stw	r2,-4(fp)
  801924:	00000406 	br	801938 <efs_init+0x110>
		return(0);
  801928:	e03fff15 	stw	zero,-4(fp)
  80192c:	00000206 	br	801938 <efs_init+0x110>
	}
	return(-1);
  801930:	00bfffc4 	movi	r2,-1
  801934:	e0bfff15 	stw	r2,-4(fp)
  801938:	e0bfff17 	ldw	r2,-4(fp)
}
  80193c:	e037883a 	mov	sp,fp
  801940:	dfc00117 	ldw	ra,4(sp)
  801944:	df000017 	ldw	fp,0(sp)
  801948:	dec00204 	addi	sp,sp,8
  80194c:	f800283a 	ret

00801950 <ex_getb16>:
/*****************************************************************************/



euint16 ex_getb16(euint8* buf,euint32 offset)
{
  801950:	defffd04 	addi	sp,sp,-12
  801954:	df000215 	stw	fp,8(sp)
  801958:	df000204 	addi	fp,sp,8
  80195c:	e13ffe15 	stw	r4,-8(fp)
  801960:	e17fff15 	stw	r5,-4(fp)
	return(ltb_end16(((*(buf+offset+1))<<8) + ((*(buf+offset+0))<<0)));
  801964:	e0ffff17 	ldw	r3,-4(fp)
  801968:	e0bffe17 	ldw	r2,-8(fp)
  80196c:	1885883a 	add	r2,r3,r2
  801970:	10800044 	addi	r2,r2,1
  801974:	10800003 	ldbu	r2,0(r2)
  801978:	10803fcc 	andi	r2,r2,255
  80197c:	1004923a 	slli	r2,r2,8
  801980:	1009883a 	mov	r4,r2
  801984:	e0ffff17 	ldw	r3,-4(fp)
  801988:	e0bffe17 	ldw	r2,-8(fp)
  80198c:	1885883a 	add	r2,r3,r2
  801990:	10800003 	ldbu	r2,0(r2)
  801994:	10803fcc 	andi	r2,r2,255
  801998:	2085883a 	add	r2,r4,r2
  80199c:	10bfffcc 	andi	r2,r2,65535
}
  8019a0:	e037883a 	mov	sp,fp
  8019a4:	df000017 	ldw	fp,0(sp)
  8019a8:	dec00104 	addi	sp,sp,4
  8019ac:	f800283a 	ret

008019b0 <ex_getb32>:
/*****************************************************************************/

euint32 ex_getb32(euint8* buf,euint32 offset)
{
  8019b0:	defffd04 	addi	sp,sp,-12
  8019b4:	df000215 	stw	fp,8(sp)
  8019b8:	df000204 	addi	fp,sp,8
  8019bc:	e13ffe15 	stw	r4,-8(fp)
  8019c0:	e17fff15 	stw	r5,-4(fp)
	return(ltb_end32(((euint32)buf[offset+3]<<24)+
  8019c4:	e0ffff17 	ldw	r3,-4(fp)
  8019c8:	e0bffe17 	ldw	r2,-8(fp)
  8019cc:	1885883a 	add	r2,r3,r2
  8019d0:	108000c4 	addi	r2,r2,3
  8019d4:	10800003 	ldbu	r2,0(r2)
  8019d8:	10803fcc 	andi	r2,r2,255
  8019dc:	1008963a 	slli	r4,r2,24
  8019e0:	e0ffff17 	ldw	r3,-4(fp)
  8019e4:	e0bffe17 	ldw	r2,-8(fp)
  8019e8:	1885883a 	add	r2,r3,r2
  8019ec:	10800084 	addi	r2,r2,2
  8019f0:	10800003 	ldbu	r2,0(r2)
  8019f4:	10803fcc 	andi	r2,r2,255
  8019f8:	1004943a 	slli	r2,r2,16
  8019fc:	2089883a 	add	r4,r4,r2
  801a00:	e0ffff17 	ldw	r3,-4(fp)
  801a04:	e0bffe17 	ldw	r2,-8(fp)
  801a08:	1885883a 	add	r2,r3,r2
  801a0c:	10800044 	addi	r2,r2,1
  801a10:	10800003 	ldbu	r2,0(r2)
  801a14:	10803fcc 	andi	r2,r2,255
  801a18:	1004923a 	slli	r2,r2,8
  801a1c:	2089883a 	add	r4,r4,r2
  801a20:	e0ffff17 	ldw	r3,-4(fp)
  801a24:	e0bffe17 	ldw	r2,-8(fp)
  801a28:	1885883a 	add	r2,r3,r2
  801a2c:	10800003 	ldbu	r2,0(r2)
  801a30:	10803fcc 	andi	r2,r2,255
  801a34:	2085883a 	add	r2,r4,r2
	      ((euint32)buf[offset+2]<<16)+
	      ((euint32)buf[offset+1]<<8)+
	      ((euint32)buf[offset+0]<<0)));
}
  801a38:	e037883a 	mov	sp,fp
  801a3c:	df000017 	ldw	fp,0(sp)
  801a40:	dec00104 	addi	sp,sp,4
  801a44:	f800283a 	ret

00801a48 <ex_setb16>:
/*****************************************************************************/

void ex_setb16(euint8* buf,euint32 offset,euint16 data)
{
  801a48:	defffc04 	addi	sp,sp,-16
  801a4c:	df000315 	stw	fp,12(sp)
  801a50:	df000304 	addi	fp,sp,12
  801a54:	e13ffd15 	stw	r4,-12(fp)
  801a58:	e17ffe15 	stw	r5,-8(fp)
  801a5c:	e1bfff0d 	sth	r6,-4(fp)
#ifdef BIG_ENDIAN
	*(buf+offset+1) = data>>0;
	*(buf+offset+0) = data>>8;
#else
	*(buf+offset+0) = data>>0;
  801a60:	e0fffe17 	ldw	r3,-8(fp)
  801a64:	e0bffd17 	ldw	r2,-12(fp)
  801a68:	1887883a 	add	r3,r3,r2
  801a6c:	e0bfff0b 	ldhu	r2,-4(fp)
  801a70:	18800005 	stb	r2,0(r3)
	*(buf+offset+1) = data>>8;
  801a74:	e0fffe17 	ldw	r3,-8(fp)
  801a78:	e0bffd17 	ldw	r2,-12(fp)
  801a7c:	1885883a 	add	r2,r3,r2
  801a80:	10c00044 	addi	r3,r2,1
  801a84:	e0bfff0b 	ldhu	r2,-4(fp)
  801a88:	1004d23a 	srli	r2,r2,8
  801a8c:	18800005 	stb	r2,0(r3)
#endif
}
  801a90:	e037883a 	mov	sp,fp
  801a94:	df000017 	ldw	fp,0(sp)
  801a98:	dec00104 	addi	sp,sp,4
  801a9c:	f800283a 	ret

00801aa0 <ex_setb32>:
/*****************************************************************************/

void ex_setb32(euint8* buf,euint32 offset,euint32 data)
{
  801aa0:	defffc04 	addi	sp,sp,-16
  801aa4:	df000315 	stw	fp,12(sp)
  801aa8:	df000304 	addi	fp,sp,12
  801aac:	e13ffd15 	stw	r4,-12(fp)
  801ab0:	e17ffe15 	stw	r5,-8(fp)
  801ab4:	e1bfff15 	stw	r6,-4(fp)
	*(buf+offset+3) = data>> 0;
	*(buf+offset+2) = data>> 8;
	*(buf+offset+1) = data>>16;
	*(buf+offset+0) = data>>24;
#else
	*(buf+offset+0) = data>> 0;
  801ab8:	e0fffe17 	ldw	r3,-8(fp)
  801abc:	e0bffd17 	ldw	r2,-12(fp)
  801ac0:	1887883a 	add	r3,r3,r2
  801ac4:	e0bfff17 	ldw	r2,-4(fp)
  801ac8:	18800005 	stb	r2,0(r3)
	*(buf+offset+1) = data>> 8;
  801acc:	e0fffe17 	ldw	r3,-8(fp)
  801ad0:	e0bffd17 	ldw	r2,-12(fp)
  801ad4:	1885883a 	add	r2,r3,r2
  801ad8:	10c00044 	addi	r3,r2,1
  801adc:	e0bfff17 	ldw	r2,-4(fp)
  801ae0:	1004d23a 	srli	r2,r2,8
  801ae4:	18800005 	stb	r2,0(r3)
	*(buf+offset+2) = data>>16;
  801ae8:	e0fffe17 	ldw	r3,-8(fp)
  801aec:	e0bffd17 	ldw	r2,-12(fp)
  801af0:	1885883a 	add	r2,r3,r2
  801af4:	10c00084 	addi	r3,r2,2
  801af8:	e0bfff17 	ldw	r2,-4(fp)
  801afc:	1004d43a 	srli	r2,r2,16
  801b00:	18800005 	stb	r2,0(r3)
	*(buf+offset+3) = data>>24;
  801b04:	e0fffe17 	ldw	r3,-8(fp)
  801b08:	e0bffd17 	ldw	r2,-12(fp)
  801b0c:	1885883a 	add	r2,r3,r2
  801b10:	10c000c4 	addi	r3,r2,3
  801b14:	e0bfff17 	ldw	r2,-4(fp)
  801b18:	1004d63a 	srli	r2,r2,24
  801b1c:	18800005 	stb	r2,0(r3)
#endif
}
  801b20:	e037883a 	mov	sp,fp
  801b24:	df000017 	ldw	fp,0(sp)
  801b28:	dec00104 	addi	sp,sp,4
  801b2c:	f800283a 	ret

00801b30 <ex_getPartitionField>:
/*****************************************************************************/

void ex_getPartitionField(euint8* buf,PartitionField* pf, euint32 offset)
{
  801b30:	defffb04 	addi	sp,sp,-20
  801b34:	dfc00415 	stw	ra,16(sp)
  801b38:	df000315 	stw	fp,12(sp)
  801b3c:	df000304 	addi	fp,sp,12
  801b40:	e13ffd15 	stw	r4,-12(fp)
  801b44:	e17ffe15 	stw	r5,-8(fp)
  801b48:	e1bfff15 	stw	r6,-4(fp)
	pf->bootFlag       = *(buf + offset);
  801b4c:	e0ffff17 	ldw	r3,-4(fp)
  801b50:	e0bffd17 	ldw	r2,-12(fp)
  801b54:	1885883a 	add	r2,r3,r2
  801b58:	10c00003 	ldbu	r3,0(r2)
  801b5c:	e0bffe17 	ldw	r2,-8(fp)
  801b60:	10c00005 	stb	r3,0(r2)
	pf->CHS_begin[0]   = *(buf + offset + 1);
  801b64:	e0ffff17 	ldw	r3,-4(fp)
  801b68:	e0bffd17 	ldw	r2,-12(fp)
  801b6c:	1885883a 	add	r2,r3,r2
  801b70:	10800044 	addi	r2,r2,1
  801b74:	10c00003 	ldbu	r3,0(r2)
  801b78:	e0bffe17 	ldw	r2,-8(fp)
  801b7c:	10c00045 	stb	r3,1(r2)
	pf->CHS_begin[1]   = *(buf + offset + 2);
  801b80:	e0ffff17 	ldw	r3,-4(fp)
  801b84:	e0bffd17 	ldw	r2,-12(fp)
  801b88:	1885883a 	add	r2,r3,r2
  801b8c:	10800084 	addi	r2,r2,2
  801b90:	10c00003 	ldbu	r3,0(r2)
  801b94:	e0bffe17 	ldw	r2,-8(fp)
  801b98:	10c00085 	stb	r3,2(r2)
	pf->CHS_begin[2]   = *(buf + offset + 3);
  801b9c:	e0ffff17 	ldw	r3,-4(fp)
  801ba0:	e0bffd17 	ldw	r2,-12(fp)
  801ba4:	1885883a 	add	r2,r3,r2
  801ba8:	108000c4 	addi	r2,r2,3
  801bac:	10c00003 	ldbu	r3,0(r2)
  801bb0:	e0bffe17 	ldw	r2,-8(fp)
  801bb4:	10c000c5 	stb	r3,3(r2)
	pf->type           = *(buf + offset + 4);
  801bb8:	e0ffff17 	ldw	r3,-4(fp)
  801bbc:	e0bffd17 	ldw	r2,-12(fp)
  801bc0:	1885883a 	add	r2,r3,r2
  801bc4:	10800104 	addi	r2,r2,4
  801bc8:	10c00003 	ldbu	r3,0(r2)
  801bcc:	e0bffe17 	ldw	r2,-8(fp)
  801bd0:	10c00105 	stb	r3,4(r2)
	pf->CHS_end[0]     = *(buf + offset + 5);
  801bd4:	e0ffff17 	ldw	r3,-4(fp)
  801bd8:	e0bffd17 	ldw	r2,-12(fp)
  801bdc:	1885883a 	add	r2,r3,r2
  801be0:	10800144 	addi	r2,r2,5
  801be4:	10c00003 	ldbu	r3,0(r2)
  801be8:	e0bffe17 	ldw	r2,-8(fp)
  801bec:	10c00145 	stb	r3,5(r2)
	pf->CHS_end[1]     = *(buf + offset + 6);
  801bf0:	e0ffff17 	ldw	r3,-4(fp)
  801bf4:	e0bffd17 	ldw	r2,-12(fp)
  801bf8:	1885883a 	add	r2,r3,r2
  801bfc:	10800184 	addi	r2,r2,6
  801c00:	10c00003 	ldbu	r3,0(r2)
  801c04:	e0bffe17 	ldw	r2,-8(fp)
  801c08:	10c00185 	stb	r3,6(r2)
	pf->CHS_end[2]     = *(buf + offset + 7);
  801c0c:	e0ffff17 	ldw	r3,-4(fp)
  801c10:	e0bffd17 	ldw	r2,-12(fp)
  801c14:	1885883a 	add	r2,r3,r2
  801c18:	108001c4 	addi	r2,r2,7
  801c1c:	10c00003 	ldbu	r3,0(r2)
  801c20:	e0bffe17 	ldw	r2,-8(fp)
  801c24:	10c001c5 	stb	r3,7(r2)
	pf->LBA_begin      = ex_getb32(buf + offset,8);
  801c28:	e0ffff17 	ldw	r3,-4(fp)
  801c2c:	e0bffd17 	ldw	r2,-12(fp)
  801c30:	1889883a 	add	r4,r3,r2
  801c34:	01400204 	movi	r5,8
  801c38:	08019b00 	call	8019b0 <ex_getb32>
  801c3c:	1007883a 	mov	r3,r2
  801c40:	e0bffe17 	ldw	r2,-8(fp)
  801c44:	10c00215 	stw	r3,8(r2)
	pf->numSectors     = ex_getb32(buf + offset,12);
  801c48:	e0ffff17 	ldw	r3,-4(fp)
  801c4c:	e0bffd17 	ldw	r2,-12(fp)
  801c50:	1889883a 	add	r4,r3,r2
  801c54:	01400304 	movi	r5,12
  801c58:	08019b00 	call	8019b0 <ex_getb32>
  801c5c:	1007883a 	mov	r3,r2
  801c60:	e0bffe17 	ldw	r2,-8(fp)
  801c64:	10c00315 	stw	r3,12(r2)
}
  801c68:	e037883a 	mov	sp,fp
  801c6c:	dfc00117 	ldw	ra,4(sp)
  801c70:	df000017 	ldw	fp,0(sp)
  801c74:	dec00204 	addi	sp,sp,8
  801c78:	f800283a 	ret

00801c7c <ex_setPartitionField>:
/*****************************************************************************/

void ex_setPartitionField(euint8* buf,PartitionField* pf, euint32 offset)
{
  801c7c:	defffc04 	addi	sp,sp,-16
  801c80:	df000315 	stw	fp,12(sp)
  801c84:	df000304 	addi	fp,sp,12
  801c88:	e13ffd15 	stw	r4,-12(fp)
  801c8c:	e17ffe15 	stw	r5,-8(fp)
  801c90:	e1bfff15 	stw	r6,-4(fp)

}
  801c94:	e037883a 	mov	sp,fp
  801c98:	df000017 	ldw	fp,0(sp)
  801c9c:	dec00104 	addi	sp,sp,4
  801ca0:	f800283a 	ret

00801ca4 <fat_getSectorAddressFatEntry>:
 * Description: Returns the sectornumber that holds the fat entry for cluster cluster_addr.
 * This works for all FAT types.
 * Return value: Sectornumber, or 0. Warning, no boundary check.
*/
euint32 fat_getSectorAddressFatEntry(FileSystem *fs,euint32 cluster_addr)
{ 
  801ca4:	defff904 	addi	sp,sp,-28
  801ca8:	df000615 	stw	fp,24(sp)
  801cac:	df000604 	addi	fp,sp,24
  801cb0:	e13ffc15 	stw	r4,-16(fp)
  801cb4:	e17ffd15 	stw	r5,-12(fp)
	euint32 base = fs->volumeId.ReservedSectorCount,res;
  801cb8:	e0bffc17 	ldw	r2,-16(fp)
  801cbc:	1080020b 	ldhu	r2,8(r2)
  801cc0:	10bfffcc 	andi	r2,r2,65535
  801cc4:	e0bffb15 	stw	r2,-20(fp)
	
	switch(fs->type){
  801cc8:	e0bffc17 	ldw	r2,-16(fp)
  801ccc:	10800f03 	ldbu	r2,60(r2)
  801cd0:	10803fcc 	andi	r2,r2,255
  801cd4:	e0bfff15 	stw	r2,-4(fp)
  801cd8:	e0ffff17 	ldw	r3,-4(fp)
  801cdc:	188000a0 	cmpeqi	r2,r3,2
  801ce0:	1000181e 	bne	r2,zero,801d44 <fat_getSectorAddressFatEntry+0xa0>
  801ce4:	e0ffff17 	ldw	r3,-4(fp)
  801ce8:	188000e0 	cmpeqi	r2,r3,3
  801cec:	1000231e 	bne	r2,zero,801d7c <fat_getSectorAddressFatEntry+0xd8>
  801cf0:	e0ffff17 	ldw	r3,-4(fp)
  801cf4:	18800060 	cmpeqi	r2,r3,1
  801cf8:	1000011e 	bne	r2,zero,801d00 <fat_getSectorAddressFatEntry+0x5c>
  801cfc:	00002d06 	br	801db4 <fat_getSectorAddressFatEntry+0x110>
		case FAT12:
			res=(cluster_addr*3/1024);
  801d00:	e0fffd17 	ldw	r3,-12(fp)
  801d04:	1805883a 	mov	r2,r3
  801d08:	1085883a 	add	r2,r2,r2
  801d0c:	10c5883a 	add	r2,r2,r3
  801d10:	1004d2ba 	srli	r2,r2,10
  801d14:	e0bffa15 	stw	r2,-24(fp)
			if(res>=fs->FatSectorCount){
  801d18:	e0bffc17 	ldw	r2,-16(fp)
  801d1c:	10c00917 	ldw	r3,36(r2)
  801d20:	e0bffa17 	ldw	r2,-24(fp)
  801d24:	10c00236 	bltu	r2,r3,801d30 <fat_getSectorAddressFatEntry+0x8c>
				return(0);
  801d28:	e03ffe15 	stw	zero,-8(fp)
  801d2c:	00002206 	br	801db8 <fat_getSectorAddressFatEntry+0x114>
			}else{
				return(base+res);
  801d30:	e0fffb17 	ldw	r3,-20(fp)
  801d34:	e0bffa17 	ldw	r2,-24(fp)
  801d38:	1887883a 	add	r3,r3,r2
  801d3c:	e0fffe15 	stw	r3,-8(fp)
  801d40:	00001d06 	br	801db8 <fat_getSectorAddressFatEntry+0x114>
			}
			break;
		case FAT16:
			res=cluster_addr/256;
  801d44:	e0bffd17 	ldw	r2,-12(fp)
  801d48:	1004d23a 	srli	r2,r2,8
  801d4c:	e0bffa15 	stw	r2,-24(fp)
			if(res>=fs->FatSectorCount){
  801d50:	e0bffc17 	ldw	r2,-16(fp)
  801d54:	10c00917 	ldw	r3,36(r2)
  801d58:	e0bffa17 	ldw	r2,-24(fp)
  801d5c:	10c00236 	bltu	r2,r3,801d68 <fat_getSectorAddressFatEntry+0xc4>
				return(0);
  801d60:	e03ffe15 	stw	zero,-8(fp)
  801d64:	00001406 	br	801db8 <fat_getSectorAddressFatEntry+0x114>
			}else{
				return(base+res);
  801d68:	e0fffb17 	ldw	r3,-20(fp)
  801d6c:	e0bffa17 	ldw	r2,-24(fp)
  801d70:	1887883a 	add	r3,r3,r2
  801d74:	e0fffe15 	stw	r3,-8(fp)
  801d78:	00000f06 	br	801db8 <fat_getSectorAddressFatEntry+0x114>
			}
			break;
		case FAT32:
			res=cluster_addr/128;
  801d7c:	e0bffd17 	ldw	r2,-12(fp)
  801d80:	1004d1fa 	srli	r2,r2,7
  801d84:	e0bffa15 	stw	r2,-24(fp)
			if(res>=fs->FatSectorCount){
  801d88:	e0bffc17 	ldw	r2,-16(fp)
  801d8c:	10c00917 	ldw	r3,36(r2)
  801d90:	e0bffa17 	ldw	r2,-24(fp)
  801d94:	10c00236 	bltu	r2,r3,801da0 <fat_getSectorAddressFatEntry+0xfc>
				return(0);
  801d98:	e03ffe15 	stw	zero,-8(fp)
  801d9c:	00000606 	br	801db8 <fat_getSectorAddressFatEntry+0x114>
			}else{
				return(base+res);
  801da0:	e0fffb17 	ldw	r3,-20(fp)
  801da4:	e0bffa17 	ldw	r2,-24(fp)
  801da8:	1887883a 	add	r3,r3,r2
  801dac:	e0fffe15 	stw	r3,-8(fp)
  801db0:	00000106 	br	801db8 <fat_getSectorAddressFatEntry+0x114>
			}
			break; 
	}
	return(0);
  801db4:	e03ffe15 	stw	zero,-8(fp)
  801db8:	e0bffe17 	ldw	r2,-8(fp)
}
  801dbc:	e037883a 	mov	sp,fp
  801dc0:	df000017 	ldw	fp,0(sp)
  801dc4:	dec00104 	addi	sp,sp,4
  801dc8:	f800283a 	ret

00801dcc <fat_getNextClusterAddress>:
 * for cluster_addr. It then fetches and (if required) calculates it's value.
 * This value is the EoC marker -or- the number of the next cluster in the chain.
 * Return value: Clusternumber or EoC
*/
euint32 fat_getNextClusterAddress(FileSystem *fs,euint32 cluster_addr,euint16 *linear)
{
  801dcc:	defff504 	addi	sp,sp,-44
  801dd0:	dfc00a15 	stw	ra,40(sp)
  801dd4:	df000915 	stw	fp,36(sp)
  801dd8:	df000904 	addi	fp,sp,36
  801ddc:	e13ffb15 	stw	r4,-20(fp)
  801de0:	e17ffc15 	stw	r5,-16(fp)
  801de4:	e1bffd15 	stw	r6,-12(fp)
	euint8 *buf; 
	euint8 hb,lb;
	euint16 offset;
	euint32 sector;
	euint32 nextcluster=0;
  801de8:	e03ff715 	stw	zero,-36(fp)
	
	sector=fat_getSectorAddressFatEntry(fs,cluster_addr);
  801dec:	e13ffb17 	ldw	r4,-20(fp)
  801df0:	e17ffc17 	ldw	r5,-16(fp)
  801df4:	0801ca40 	call	801ca4 <fat_getSectorAddressFatEntry>
  801df8:	e0bff815 	stw	r2,-32(fp)
	if( (fs->FatSectorCount <= (sector-fs->volumeId.ReservedSectorCount)) || sector==0 )
  801dfc:	e0bffb17 	ldw	r2,-20(fp)
  801e00:	11000917 	ldw	r4,36(r2)
  801e04:	e0bffb17 	ldw	r2,-20(fp)
  801e08:	1080020b 	ldhu	r2,8(r2)
  801e0c:	10ffffcc 	andi	r3,r2,65535
  801e10:	e0bff817 	ldw	r2,-32(fp)
  801e14:	10c5c83a 	sub	r2,r2,r3
  801e18:	1100032e 	bgeu	r2,r4,801e28 <fat_getNextClusterAddress+0x5c>
  801e1c:	e0bff817 	ldw	r2,-32(fp)
  801e20:	1004c03a 	cmpne	r2,r2,zero
  801e24:	1000021e 	bne	r2,zero,801e30 <fat_getNextClusterAddress+0x64>
	{
		return(0);
  801e28:	e03fff15 	stw	zero,-4(fp)
  801e2c:	00006b06 	br	801fdc <fat_getNextClusterAddress+0x210>
	}
	
	buf=part_getSect(fs->part,sector,IOM_MODE_READONLY);
  801e30:	e0bffb17 	ldw	r2,-20(fp)
  801e34:	11000017 	ldw	r4,0(r2)
  801e38:	e17ff817 	ldw	r5,-32(fp)
  801e3c:	01800044 	movi	r6,1
  801e40:	08085980 	call	808598 <part_getSect>
  801e44:	e0bffa15 	stw	r2,-24(fp)
		
	switch(fs->type)
  801e48:	e0bffb17 	ldw	r2,-20(fp)
  801e4c:	10800f03 	ldbu	r2,60(r2)
  801e50:	10803fcc 	andi	r2,r2,255
  801e54:	e0bffe15 	stw	r2,-8(fp)
  801e58:	e0fffe17 	ldw	r3,-8(fp)
  801e5c:	188000a0 	cmpeqi	r2,r3,2
  801e60:	1000411e 	bne	r2,zero,801f68 <fat_getNextClusterAddress+0x19c>
  801e64:	e0fffe17 	ldw	r3,-8(fp)
  801e68:	188000e0 	cmpeqi	r2,r3,3
  801e6c:	10004a1e 	bne	r2,zero,801f98 <fat_getNextClusterAddress+0x1cc>
  801e70:	e0fffe17 	ldw	r3,-8(fp)
  801e74:	18800060 	cmpeqi	r2,r3,1
  801e78:	1000011e 	bne	r2,zero,801e80 <fat_getNextClusterAddress+0xb4>
  801e7c:	00005106 	br	801fc4 <fat_getNextClusterAddress+0x1f8>
	{
		case FAT12:
			offset = ((cluster_addr%1024)*3/2)%512;
  801e80:	e0bffc17 	ldw	r2,-16(fp)
  801e84:	10c0ffcc 	andi	r3,r2,1023
  801e88:	1805883a 	mov	r2,r3
  801e8c:	1085883a 	add	r2,r2,r2
  801e90:	10c5883a 	add	r2,r2,r3
  801e94:	1004d07a 	srli	r2,r2,1
  801e98:	10807fcc 	andi	r2,r2,511
  801e9c:	e0bff90d 	sth	r2,-28(fp)
			hb = buf[offset];
  801ea0:	e0bff90b 	ldhu	r2,-28(fp)
  801ea4:	1007883a 	mov	r3,r2
  801ea8:	e0bffa17 	ldw	r2,-24(fp)
  801eac:	1885883a 	add	r2,r3,r2
  801eb0:	10800003 	ldbu	r2,0(r2)
  801eb4:	e0bff9c5 	stb	r2,-25(fp)
			if(offset == 511){
  801eb8:	e0bff90b 	ldhu	r2,-28(fp)
  801ebc:	10807fd8 	cmpnei	r2,r2,511
  801ec0:	10000f1e 	bne	r2,zero,801f00 <fat_getNextClusterAddress+0x134>
				part_relSect(fs->part,buf);
  801ec4:	e0bffb17 	ldw	r2,-20(fp)
  801ec8:	11000017 	ldw	r4,0(r2)
  801ecc:	e17ffa17 	ldw	r5,-24(fp)
  801ed0:	08085f80 	call	8085f8 <part_relSect>
				buf=part_getSect(fs->part,sector+1,IOM_MODE_READONLY);
  801ed4:	e0bffb17 	ldw	r2,-20(fp)
  801ed8:	11000017 	ldw	r4,0(r2)
  801edc:	e0bff817 	ldw	r2,-32(fp)
  801ee0:	11400044 	addi	r5,r2,1
  801ee4:	01800044 	movi	r6,1
  801ee8:	08085980 	call	808598 <part_getSect>
  801eec:	e0bffa15 	stw	r2,-24(fp)
				lb = buf[0];
  801ef0:	e0bffa17 	ldw	r2,-24(fp)
  801ef4:	10800003 	ldbu	r2,0(r2)
  801ef8:	e0bff985 	stb	r2,-26(fp)
  801efc:	00000706 	br	801f1c <fat_getNextClusterAddress+0x150>
			}else{
				lb = buf[offset + 1];
  801f00:	e0bff90b 	ldhu	r2,-28(fp)
  801f04:	1007883a 	mov	r3,r2
  801f08:	e0bffa17 	ldw	r2,-24(fp)
  801f0c:	1885883a 	add	r2,r3,r2
  801f10:	10800044 	addi	r2,r2,1
  801f14:	10800003 	ldbu	r2,0(r2)
  801f18:	e0bff985 	stb	r2,-26(fp)
			}
			if(cluster_addr%2==0){
  801f1c:	e0bffc17 	ldw	r2,-16(fp)
  801f20:	1080004c 	andi	r2,r2,1
  801f24:	1004c03a 	cmpne	r2,r2,zero
  801f28:	1000071e 	bne	r2,zero,801f48 <fat_getNextClusterAddress+0x17c>
				nextcluster = ( ((lb&0x0F)<<8) + (hb) );
  801f2c:	e0bff983 	ldbu	r2,-26(fp)
  801f30:	108003cc 	andi	r2,r2,15
  801f34:	1006923a 	slli	r3,r2,8
  801f38:	e0bff9c3 	ldbu	r2,-25(fp)
  801f3c:	1885883a 	add	r2,r3,r2
  801f40:	e0bff715 	stw	r2,-36(fp)
  801f44:	00001f06 	br	801fc4 <fat_getNextClusterAddress+0x1f8>
			}else{
				nextcluster = ( (lb<<4) + (hb>>4) );
  801f48:	e0bff983 	ldbu	r2,-26(fp)
  801f4c:	1006913a 	slli	r3,r2,4
  801f50:	e0bff9c3 	ldbu	r2,-25(fp)
  801f54:	1004d13a 	srli	r2,r2,4
  801f58:	10803fcc 	andi	r2,r2,255
  801f5c:	1885883a 	add	r2,r3,r2
  801f60:	e0bff715 	stw	r2,-36(fp)
			}
			break;
  801f64:	00001706 	br	801fc4 <fat_getNextClusterAddress+0x1f8>
		case FAT16:
			offset=cluster_addr%256;
  801f68:	e0bffc17 	ldw	r2,-16(fp)
  801f6c:	10803fcc 	andi	r2,r2,255
  801f70:	e0bff90d 	sth	r2,-28(fp)
			nextcluster = *((euint16 *)buf + offset);
  801f74:	e0bff90b 	ldhu	r2,-28(fp)
  801f78:	1085883a 	add	r2,r2,r2
  801f7c:	1007883a 	mov	r3,r2
  801f80:	e0bffa17 	ldw	r2,-24(fp)
  801f84:	1885883a 	add	r2,r3,r2
  801f88:	1080000b 	ldhu	r2,0(r2)
  801f8c:	10bfffcc 	andi	r2,r2,65535
  801f90:	e0bff715 	stw	r2,-36(fp)
			break;
  801f94:	00000b06 	br	801fc4 <fat_getNextClusterAddress+0x1f8>
		case FAT32:
			offset=cluster_addr%128;
  801f98:	e0bffc17 	ldw	r2,-16(fp)
  801f9c:	10801fcc 	andi	r2,r2,127
  801fa0:	e0bff90d 	sth	r2,-28(fp)
			nextcluster = *((euint32 *)buf + offset);
  801fa4:	e0bff90b 	ldhu	r2,-28(fp)
  801fa8:	1085883a 	add	r2,r2,r2
  801fac:	1085883a 	add	r2,r2,r2
  801fb0:	1007883a 	mov	r3,r2
  801fb4:	e0bffa17 	ldw	r2,-24(fp)
  801fb8:	1885883a 	add	r2,r3,r2
  801fbc:	10800017 	ldw	r2,0(r2)
  801fc0:	e0bff715 	stw	r2,-36(fp)
			break;
	}
	
	part_relSect(fs->part,buf);
  801fc4:	e0bffb17 	ldw	r2,-20(fp)
  801fc8:	11000017 	ldw	r4,0(r2)
  801fcc:	e17ffa17 	ldw	r5,-24(fp)
  801fd0:	08085f80 	call	8085f8 <part_relSect>
	
	return(nextcluster);
  801fd4:	e0bff717 	ldw	r2,-36(fp)
  801fd8:	e0bfff15 	stw	r2,-4(fp)
  801fdc:	e0bfff17 	ldw	r2,-4(fp)
}
  801fe0:	e037883a 	mov	sp,fp
  801fe4:	dfc00117 	ldw	ra,4(sp)
  801fe8:	df000017 	ldw	fp,0(sp)
  801fec:	dec00204 	addi	sp,sp,8
  801ff0:	f800283a 	ret

00801ff4 <fat_setNextClusterAddress>:
 * void fat_setNextClusterAddress(FileSystem *fs,unsigned long cluster_addr,unsigned long next_cluster_addr)
 * Description: This function makes an entry in the fattable for cluster_addr. The value it puts there
 * is next_cluster_addr. 
*/
void fat_setNextClusterAddress(FileSystem *fs,euint32 cluster_addr,euint32 next_cluster_addr)
{
  801ff4:	defff504 	addi	sp,sp,-44
  801ff8:	dfc00a15 	stw	ra,40(sp)
  801ffc:	df000915 	stw	fp,36(sp)
  802000:	dc000815 	stw	r16,32(sp)
  802004:	df000804 	addi	fp,sp,32
  802008:	e13ffc15 	stw	r4,-16(fp)
  80200c:	e17ffd15 	stw	r5,-12(fp)
  802010:	e1bffe15 	stw	r6,-8(fp)
	euint8 *buf,*buf2; 
	euint16 offset;
	euint32 sector;
	
	sector=fat_getSectorAddressFatEntry(fs,cluster_addr);
  802014:	e13ffc17 	ldw	r4,-16(fp)
  802018:	e17ffd17 	ldw	r5,-12(fp)
  80201c:	0801ca40 	call	801ca4 <fat_getSectorAddressFatEntry>
  802020:	e0bff815 	stw	r2,-32(fp)
	
	if(( fs->FatSectorCount <= (sector - fs->volumeId.ReservedSectorCount )||(sector==0))){
  802024:	e0bffc17 	ldw	r2,-16(fp)
  802028:	11000917 	ldw	r4,36(r2)
  80202c:	e0bffc17 	ldw	r2,-16(fp)
  802030:	1080020b 	ldhu	r2,8(r2)
  802034:	10ffffcc 	andi	r3,r2,65535
  802038:	e0bff817 	ldw	r2,-32(fp)
  80203c:	10c5c83a 	sub	r2,r2,r3
  802040:	1100032e 	bgeu	r2,r4,802050 <fat_setNextClusterAddress+0x5c>
  802044:	e0bff817 	ldw	r2,-32(fp)
  802048:	1004c03a 	cmpne	r2,r2,zero
  80204c:	1000041e 	bne	r2,zero,802060 <fat_setNextClusterAddress+0x6c>
	    DBG((TXT("HARDERROR:::fat_getNextClusterAddress READ PAST FAT BOUNDARY\n")));
  802050:	010020b4 	movhi	r4,130
  802054:	210a7604 	addi	r4,r4,10712
  802058:	080df580 	call	80df58 <puts>
	    return;
  80205c:	0000bc06 	br	802350 <fat_setNextClusterAddress+0x35c>
	}
	
	buf=part_getSect(fs->part,sector,IOM_MODE_READWRITE);
  802060:	e0bffc17 	ldw	r2,-16(fp)
  802064:	11000017 	ldw	r4,0(r2)
  802068:	e17ff817 	ldw	r5,-32(fp)
  80206c:	01800084 	movi	r6,2
  802070:	08085980 	call	808598 <part_getSect>
  802074:	e0bffb15 	stw	r2,-20(fp)
		
	switch(fs->type){
  802078:	e0bffc17 	ldw	r2,-16(fp)
  80207c:	10800f03 	ldbu	r2,60(r2)
  802080:	10803fcc 	andi	r2,r2,255
  802084:	e0bfff15 	stw	r2,-4(fp)
  802088:	e0ffff17 	ldw	r3,-4(fp)
  80208c:	188000a0 	cmpeqi	r2,r3,2
  802090:	1000911e 	bne	r2,zero,8022d8 <fat_setNextClusterAddress+0x2e4>
  802094:	e0ffff17 	ldw	r3,-4(fp)
  802098:	188000e0 	cmpeqi	r2,r3,3
  80209c:	10009d1e 	bne	r2,zero,802314 <fat_setNextClusterAddress+0x320>
  8020a0:	e0ffff17 	ldw	r3,-4(fp)
  8020a4:	18800060 	cmpeqi	r2,r3,1
  8020a8:	1000011e 	bne	r2,zero,8020b0 <fat_setNextClusterAddress+0xbc>
  8020ac:	0000a806 	br	802350 <fat_setNextClusterAddress+0x35c>
		case FAT12:
			offset = ((cluster_addr%1024)*3/2)%512;
  8020b0:	e0bffd17 	ldw	r2,-12(fp)
  8020b4:	10c0ffcc 	andi	r3,r2,1023
  8020b8:	1805883a 	mov	r2,r3
  8020bc:	1085883a 	add	r2,r2,r2
  8020c0:	10c5883a 	add	r2,r2,r3
  8020c4:	1004d07a 	srli	r2,r2,1
  8020c8:	10807fcc 	andi	r2,r2,511
  8020cc:	e0bff90d 	sth	r2,-28(fp)
			if(offset == 511){
  8020d0:	e0bff90b 	ldhu	r2,-28(fp)
  8020d4:	10807fd8 	cmpnei	r2,r2,511
  8020d8:	1000421e 	bne	r2,zero,8021e4 <fat_setNextClusterAddress+0x1f0>
				if(cluster_addr%2==0){
  8020dc:	e0bffd17 	ldw	r2,-12(fp)
  8020e0:	1080004c 	andi	r2,r2,1
  8020e4:	1004c03a 	cmpne	r2,r2,zero
  8020e8:	1000071e 	bne	r2,zero,802108 <fat_setNextClusterAddress+0x114>
					buf[offset]=next_cluster_addr&0xFF;
  8020ec:	e0bff90b 	ldhu	r2,-28(fp)
  8020f0:	1007883a 	mov	r3,r2
  8020f4:	e0bffb17 	ldw	r2,-20(fp)
  8020f8:	1887883a 	add	r3,r3,r2
  8020fc:	e0bffe17 	ldw	r2,-8(fp)
  802100:	18800005 	stb	r2,0(r3)
  802104:	00001206 	br	802150 <fat_setNextClusterAddress+0x15c>
				}else{
					buf[offset]=(buf[offset]&0xF)+((next_cluster_addr<<4)&0xF0);
  802108:	e0bff90b 	ldhu	r2,-28(fp)
  80210c:	1007883a 	mov	r3,r2
  802110:	e0bffb17 	ldw	r2,-20(fp)
  802114:	188b883a 	add	r5,r3,r2
  802118:	e0bff90b 	ldhu	r2,-28(fp)
  80211c:	1007883a 	mov	r3,r2
  802120:	e0bffb17 	ldw	r2,-20(fp)
  802124:	1885883a 	add	r2,r3,r2
  802128:	10800003 	ldbu	r2,0(r2)
  80212c:	108003cc 	andi	r2,r2,15
  802130:	1009883a 	mov	r4,r2
  802134:	e0bffe17 	ldw	r2,-8(fp)
  802138:	1004913a 	slli	r2,r2,4
  80213c:	1007883a 	mov	r3,r2
  802140:	00bffc04 	movi	r2,-16
  802144:	1884703a 	and	r2,r3,r2
  802148:	2085883a 	add	r2,r4,r2
  80214c:	28800005 	stb	r2,0(r5)
				}
				buf2=part_getSect(fs->part,fat_getSectorAddressFatEntry(fs,cluster_addr)+1,IOM_MODE_READWRITE);
  802150:	e0bffc17 	ldw	r2,-16(fp)
  802154:	14000017 	ldw	r16,0(r2)
  802158:	e13ffc17 	ldw	r4,-16(fp)
  80215c:	e17ffd17 	ldw	r5,-12(fp)
  802160:	0801ca40 	call	801ca4 <fat_getSectorAddressFatEntry>
  802164:	11400044 	addi	r5,r2,1
  802168:	8009883a 	mov	r4,r16
  80216c:	01800084 	movi	r6,2
  802170:	08085980 	call	808598 <part_getSect>
  802174:	e0bffa15 	stw	r2,-24(fp)
				if(cluster_addr%2==0){
  802178:	e0bffd17 	ldw	r2,-12(fp)
  80217c:	1080004c 	andi	r2,r2,1
  802180:	1004c03a 	cmpne	r2,r2,zero
  802184:	10000d1e 	bne	r2,zero,8021bc <fat_setNextClusterAddress+0x1c8>
					buf2[0]=(buf2[0]&0xF0)+((next_cluster_addr>>8)&0xF);
  802188:	e0bffa17 	ldw	r2,-24(fp)
  80218c:	10c00003 	ldbu	r3,0(r2)
  802190:	00bffc04 	movi	r2,-16
  802194:	1884703a 	and	r2,r3,r2
  802198:	1007883a 	mov	r3,r2
  80219c:	e0bffe17 	ldw	r2,-8(fp)
  8021a0:	1004d23a 	srli	r2,r2,8
  8021a4:	108003cc 	andi	r2,r2,15
  8021a8:	1885883a 	add	r2,r3,r2
  8021ac:	1007883a 	mov	r3,r2
  8021b0:	e0bffa17 	ldw	r2,-24(fp)
  8021b4:	10c00005 	stb	r3,0(r2)
  8021b8:	00000506 	br	8021d0 <fat_setNextClusterAddress+0x1dc>
				}else{
					buf2[0]=(next_cluster_addr>>4)&0xFF;
  8021bc:	e0bffe17 	ldw	r2,-8(fp)
  8021c0:	1004d13a 	srli	r2,r2,4
  8021c4:	1007883a 	mov	r3,r2
  8021c8:	e0bffa17 	ldw	r2,-24(fp)
  8021cc:	10c00005 	stb	r3,0(r2)
				}
				part_relSect(fs->part,buf2);
  8021d0:	e0bffc17 	ldw	r2,-16(fp)
  8021d4:	11000017 	ldw	r4,0(r2)
  8021d8:	e17ffa17 	ldw	r5,-24(fp)
  8021dc:	08085f80 	call	8085f8 <part_relSect>
  8021e0:	00003806 	br	8022c4 <fat_setNextClusterAddress+0x2d0>
			}else{
				if(cluster_addr%2==0){
  8021e4:	e0bffd17 	ldw	r2,-12(fp)
  8021e8:	1080004c 	andi	r2,r2,1
  8021ec:	1004c03a 	cmpne	r2,r2,zero
  8021f0:	10001a1e 	bne	r2,zero,80225c <fat_setNextClusterAddress+0x268>
					buf[offset]=next_cluster_addr&0xFF;
  8021f4:	e0bff90b 	ldhu	r2,-28(fp)
  8021f8:	1007883a 	mov	r3,r2
  8021fc:	e0bffb17 	ldw	r2,-20(fp)
  802200:	1887883a 	add	r3,r3,r2
  802204:	e0bffe17 	ldw	r2,-8(fp)
  802208:	18800005 	stb	r2,0(r3)
					buf[offset+1]=(buf[offset+1]&0xF0)+((next_cluster_addr>>8)&0xF);
  80220c:	e0bff90b 	ldhu	r2,-28(fp)
  802210:	1007883a 	mov	r3,r2
  802214:	e0bffb17 	ldw	r2,-20(fp)
  802218:	1885883a 	add	r2,r3,r2
  80221c:	11000044 	addi	r4,r2,1
  802220:	e0bff90b 	ldhu	r2,-28(fp)
  802224:	1007883a 	mov	r3,r2
  802228:	e0bffb17 	ldw	r2,-20(fp)
  80222c:	1885883a 	add	r2,r3,r2
  802230:	10800044 	addi	r2,r2,1
  802234:	10c00003 	ldbu	r3,0(r2)
  802238:	00bffc04 	movi	r2,-16
  80223c:	1884703a 	and	r2,r3,r2
  802240:	1007883a 	mov	r3,r2
  802244:	e0bffe17 	ldw	r2,-8(fp)
  802248:	1004d23a 	srli	r2,r2,8
  80224c:	108003cc 	andi	r2,r2,15
  802250:	1885883a 	add	r2,r3,r2
  802254:	20800005 	stb	r2,0(r4)
  802258:	00001a06 	br	8022c4 <fat_setNextClusterAddress+0x2d0>
				}else{
					buf[offset]=(buf[offset]&0xF)+((next_cluster_addr<<4)&0xF0);
  80225c:	e0bff90b 	ldhu	r2,-28(fp)
  802260:	1007883a 	mov	r3,r2
  802264:	e0bffb17 	ldw	r2,-20(fp)
  802268:	188b883a 	add	r5,r3,r2
  80226c:	e0bff90b 	ldhu	r2,-28(fp)
  802270:	1007883a 	mov	r3,r2
  802274:	e0bffb17 	ldw	r2,-20(fp)
  802278:	1885883a 	add	r2,r3,r2
  80227c:	10800003 	ldbu	r2,0(r2)
  802280:	108003cc 	andi	r2,r2,15
  802284:	1009883a 	mov	r4,r2
  802288:	e0bffe17 	ldw	r2,-8(fp)
  80228c:	1004913a 	slli	r2,r2,4
  802290:	1007883a 	mov	r3,r2
  802294:	00bffc04 	movi	r2,-16
  802298:	1884703a 	and	r2,r3,r2
  80229c:	2085883a 	add	r2,r4,r2
  8022a0:	28800005 	stb	r2,0(r5)
					buf[offset+1]=(next_cluster_addr>>4)&0xFF;
  8022a4:	e0bff90b 	ldhu	r2,-28(fp)
  8022a8:	1007883a 	mov	r3,r2
  8022ac:	e0bffb17 	ldw	r2,-20(fp)
  8022b0:	1885883a 	add	r2,r3,r2
  8022b4:	10c00044 	addi	r3,r2,1
  8022b8:	e0bffe17 	ldw	r2,-8(fp)
  8022bc:	1004d13a 	srli	r2,r2,4
  8022c0:	18800005 	stb	r2,0(r3)
				}
			}
			part_relSect(fs->part,buf);
  8022c4:	e0bffc17 	ldw	r2,-16(fp)
  8022c8:	11000017 	ldw	r4,0(r2)
  8022cc:	e17ffb17 	ldw	r5,-20(fp)
  8022d0:	08085f80 	call	8085f8 <part_relSect>
			break;
  8022d4:	00001e06 	br	802350 <fat_setNextClusterAddress+0x35c>
		case FAT16:
			offset=cluster_addr%256;
  8022d8:	e0bffd17 	ldw	r2,-12(fp)
  8022dc:	10803fcc 	andi	r2,r2,255
  8022e0:	e0bff90d 	sth	r2,-28(fp)
			*((euint16*)buf+offset)=next_cluster_addr;
  8022e4:	e0bff90b 	ldhu	r2,-28(fp)
  8022e8:	1085883a 	add	r2,r2,r2
  8022ec:	1007883a 	mov	r3,r2
  8022f0:	e0bffb17 	ldw	r2,-20(fp)
  8022f4:	1887883a 	add	r3,r3,r2
  8022f8:	e0bffe17 	ldw	r2,-8(fp)
  8022fc:	1880000d 	sth	r2,0(r3)
			part_relSect(fs->part,buf);
  802300:	e0bffc17 	ldw	r2,-16(fp)
  802304:	11000017 	ldw	r4,0(r2)
  802308:	e17ffb17 	ldw	r5,-20(fp)
  80230c:	08085f80 	call	8085f8 <part_relSect>
			break;
  802310:	00000f06 	br	802350 <fat_setNextClusterAddress+0x35c>
		case FAT32:
			offset=cluster_addr%128;
  802314:	e0bffd17 	ldw	r2,-12(fp)
  802318:	10801fcc 	andi	r2,r2,127
  80231c:	e0bff90d 	sth	r2,-28(fp)
			*((euint32*)buf+offset)=next_cluster_addr;
  802320:	e0bff90b 	ldhu	r2,-28(fp)
  802324:	1085883a 	add	r2,r2,r2
  802328:	1085883a 	add	r2,r2,r2
  80232c:	1007883a 	mov	r3,r2
  802330:	e0bffb17 	ldw	r2,-20(fp)
  802334:	1887883a 	add	r3,r3,r2
  802338:	e0bffe17 	ldw	r2,-8(fp)
  80233c:	18800015 	stw	r2,0(r3)
			part_relSect(fs->part,buf);
  802340:	e0bffc17 	ldw	r2,-16(fp)
  802344:	11000017 	ldw	r4,0(r2)
  802348:	e17ffb17 	ldw	r5,-20(fp)
  80234c:	08085f80 	call	8085f8 <part_relSect>
			break;
	}
	
}
  802350:	e037883a 	mov	sp,fp
  802354:	dfc00217 	ldw	ra,8(sp)
  802358:	df000117 	ldw	fp,4(sp)
  80235c:	dc000017 	ldw	r16,0(sp)
  802360:	dec00304 	addi	sp,sp,12
  802364:	f800283a 	ret

00802368 <fat_isEocMarker>:
 * Description: Checks if a certain value is the EoC marker for the filesystem
 * noted in fs->type.
 * Return value: Returns 0 when it is the EoC marker, and 1 otherwise.
*/
eint16 fat_isEocMarker(FileSystem *fs,euint32 fat_entry)
{
  802368:	defffb04 	addi	sp,sp,-20
  80236c:	df000415 	stw	fp,16(sp)
  802370:	df000404 	addi	fp,sp,16
  802374:	e13ffc15 	stw	r4,-16(fp)
  802378:	e17ffd15 	stw	r5,-12(fp)
	switch(fs->type){
  80237c:	e0bffc17 	ldw	r2,-16(fp)
  802380:	10800f03 	ldbu	r2,60(r2)
  802384:	10803fcc 	andi	r2,r2,255
  802388:	e0bfff15 	stw	r2,-4(fp)
  80238c:	e0ffff17 	ldw	r3,-4(fp)
  802390:	188000a0 	cmpeqi	r2,r3,2
  802394:	10000c1e 	bne	r2,zero,8023c8 <fat_isEocMarker+0x60>
  802398:	e0ffff17 	ldw	r3,-4(fp)
  80239c:	188000e0 	cmpeqi	r2,r3,3
  8023a0:	10000e1e 	bne	r2,zero,8023dc <fat_isEocMarker+0x74>
  8023a4:	e0ffff17 	ldw	r3,-4(fp)
  8023a8:	18800060 	cmpeqi	r2,r3,1
  8023ac:	1000011e 	bne	r2,zero,8023b4 <fat_isEocMarker+0x4c>
  8023b0:	00001306 	br	802400 <fat_isEocMarker+0x98>
		case FAT12:
			if(fat_entry<0xFF8){
  8023b4:	e0bffd17 	ldw	r2,-12(fp)
  8023b8:	1083fe28 	cmpgeui	r2,r2,4088
  8023bc:	1000101e 	bne	r2,zero,802400 <fat_isEocMarker+0x98>
				return(0);
  8023c0:	e03ffe15 	stw	zero,-8(fp)
  8023c4:	00001006 	br	802408 <fat_isEocMarker+0xa0>
			}
			break;
		case FAT16:
			if(fat_entry<0xFFF8){
  8023c8:	e0fffd17 	ldw	r3,-12(fp)
  8023cc:	00bffdd4 	movui	r2,65527
  8023d0:	10c00b36 	bltu	r2,r3,802400 <fat_isEocMarker+0x98>
				return(0);
  8023d4:	e03ffe15 	stw	zero,-8(fp)
  8023d8:	00000b06 	br	802408 <fat_isEocMarker+0xa0>
			}
			break;
		case FAT32:
			if((fat_entry&0x0FFFFFFF)<0xFFFFFF8){
  8023dc:	e0fffd17 	ldw	r3,-12(fp)
  8023e0:	00840034 	movhi	r2,4096
  8023e4:	10bfffc4 	addi	r2,r2,-1
  8023e8:	1886703a 	and	r3,r3,r2
  8023ec:	00840034 	movhi	r2,4096
  8023f0:	10bffdc4 	addi	r2,r2,-9
  8023f4:	10c00236 	bltu	r2,r3,802400 <fat_isEocMarker+0x98>
				return(0);
  8023f8:	e03ffe15 	stw	zero,-8(fp)
  8023fc:	00000206 	br	802408 <fat_isEocMarker+0xa0>
			}
			break;
	}
	return(1);
  802400:	00800044 	movi	r2,1
  802404:	e0bffe15 	stw	r2,-8(fp)
  802408:	e0bffe17 	ldw	r2,-8(fp)
}
  80240c:	e037883a 	mov	sp,fp
  802410:	df000017 	ldw	fp,0(sp)
  802414:	dec00104 	addi	sp,sp,4
  802418:	f800283a 	ret

0080241c <fat_giveEocMarker>:
 * Note, for FAT32, the upper 4 bits are set to zero, although they should be un
 * touched according to MicroSoft specifications. I didn't care.
 * Return value: The EoC marker cast to an ulong.
*/
euint32 fat_giveEocMarker(FileSystem *fs)
{
  80241c:	defffc04 	addi	sp,sp,-16
  802420:	df000315 	stw	fp,12(sp)
  802424:	df000304 	addi	fp,sp,12
  802428:	e13ffd15 	stw	r4,-12(fp)
	switch(fs->type)
  80242c:	e0bffd17 	ldw	r2,-12(fp)
  802430:	10800f03 	ldbu	r2,60(r2)
  802434:	10803fcc 	andi	r2,r2,255
  802438:	e0bfff15 	stw	r2,-4(fp)
  80243c:	e0ffff17 	ldw	r3,-4(fp)
  802440:	188000a0 	cmpeqi	r2,r3,2
  802444:	10000a1e 	bne	r2,zero,802470 <fat_giveEocMarker+0x54>
  802448:	e0ffff17 	ldw	r3,-4(fp)
  80244c:	188000e0 	cmpeqi	r2,r3,3
  802450:	10000a1e 	bne	r2,zero,80247c <fat_giveEocMarker+0x60>
  802454:	e0ffff17 	ldw	r3,-4(fp)
  802458:	18800060 	cmpeqi	r2,r3,1
  80245c:	1000011e 	bne	r2,zero,802464 <fat_giveEocMarker+0x48>
  802460:	00000a06 	br	80248c <fat_giveEocMarker+0x70>
	{
		case FAT12:
			return(0xFFF);
  802464:	0083ffc4 	movi	r2,4095
  802468:	e0bffe15 	stw	r2,-8(fp)
  80246c:	00000806 	br	802490 <fat_giveEocMarker+0x74>
			break;
		case FAT16:
			return(0xFFFF);
  802470:	00ffffd4 	movui	r3,65535
  802474:	e0fffe15 	stw	r3,-8(fp)
  802478:	00000506 	br	802490 <fat_giveEocMarker+0x74>
			break;
		case FAT32:
			return(0x0FFFFFFF);
  80247c:	00840034 	movhi	r2,4096
  802480:	10bfffc4 	addi	r2,r2,-1
  802484:	e0bffe15 	stw	r2,-8(fp)
  802488:	00000106 	br	802490 <fat_giveEocMarker+0x74>
			break;
	}
	return(0);
  80248c:	e03ffe15 	stw	zero,-8(fp)
  802490:	e0bffe17 	ldw	r2,-8(fp)
}
  802494:	e037883a 	mov	sp,fp
  802498:	df000017 	ldw	fp,0(sp)
  80249c:	dec00104 	addi	sp,sp,4
  8024a0:	f800283a 	ret

008024a4 <fat_getNextClusterAddressWBuf>:
 * it's own buffer, it is given as a parameter. (ioman makes this function rather obsolete)
 * Only in the case of a FAT12 crosssector data entry a sector is retrieved here.
 * Return value: The value of the clusterfield is returned.
*/
euint32 fat_getNextClusterAddressWBuf(FileSystem *fs,euint32 cluster_addr, euint8* buf)
{
  8024a4:	defff604 	addi	sp,sp,-40
  8024a8:	dfc00915 	stw	ra,36(sp)
  8024ac:	df000815 	stw	fp,32(sp)
  8024b0:	dc000715 	stw	r16,28(sp)
  8024b4:	df000704 	addi	fp,sp,28
  8024b8:	e13ffc15 	stw	r4,-16(fp)
  8024bc:	e17ffd15 	stw	r5,-12(fp)
  8024c0:	e1bffe15 	stw	r6,-8(fp)
	euint8  *buf2; /* For FAT12 fallover only */
	euint8 hb,lb;
	euint16 offset;
	euint32 nextcluster=0;
  8024c4:	e03ff915 	stw	zero,-28(fp)
	
	switch(fs->type)
  8024c8:	e0bffc17 	ldw	r2,-16(fp)
  8024cc:	10800f03 	ldbu	r2,60(r2)
  8024d0:	10803fcc 	andi	r2,r2,255
  8024d4:	e0bfff15 	stw	r2,-4(fp)
  8024d8:	e0ffff17 	ldw	r3,-4(fp)
  8024dc:	188000a0 	cmpeqi	r2,r3,2
  8024e0:	1000441e 	bne	r2,zero,8025f4 <fat_getNextClusterAddressWBuf+0x150>
  8024e4:	e0ffff17 	ldw	r3,-4(fp)
  8024e8:	188000e0 	cmpeqi	r2,r3,3
  8024ec:	10004d1e 	bne	r2,zero,802624 <fat_getNextClusterAddressWBuf+0x180>
  8024f0:	e0ffff17 	ldw	r3,-4(fp)
  8024f4:	18800060 	cmpeqi	r2,r3,1
  8024f8:	1000011e 	bne	r2,zero,802500 <fat_getNextClusterAddressWBuf+0x5c>
  8024fc:	00005406 	br	802650 <fat_getNextClusterAddressWBuf+0x1ac>
	{
		case FAT12:
			offset = ((cluster_addr%1024)*3/2)%512;
  802500:	e0bffd17 	ldw	r2,-12(fp)
  802504:	10c0ffcc 	andi	r3,r2,1023
  802508:	1805883a 	mov	r2,r3
  80250c:	1085883a 	add	r2,r2,r2
  802510:	10c5883a 	add	r2,r2,r3
  802514:	1004d07a 	srli	r2,r2,1
  802518:	10807fcc 	andi	r2,r2,511
  80251c:	e0bffa0d 	sth	r2,-24(fp)
			hb = buf[offset];
  802520:	e0bffa0b 	ldhu	r2,-24(fp)
  802524:	1007883a 	mov	r3,r2
  802528:	e0bffe17 	ldw	r2,-8(fp)
  80252c:	1885883a 	add	r2,r3,r2
  802530:	10800003 	ldbu	r2,0(r2)
  802534:	e0bffac5 	stb	r2,-21(fp)
			if(offset == 511){
  802538:	e0bffa0b 	ldhu	r2,-24(fp)
  80253c:	10807fd8 	cmpnei	r2,r2,511
  802540:	1000121e 	bne	r2,zero,80258c <fat_getNextClusterAddressWBuf+0xe8>
				buf2=part_getSect(fs->part,fat_getSectorAddressFatEntry(fs,cluster_addr)+1,IOM_MODE_READONLY);
  802544:	e0bffc17 	ldw	r2,-16(fp)
  802548:	14000017 	ldw	r16,0(r2)
  80254c:	e13ffc17 	ldw	r4,-16(fp)
  802550:	e17ffd17 	ldw	r5,-12(fp)
  802554:	0801ca40 	call	801ca4 <fat_getSectorAddressFatEntry>
  802558:	11400044 	addi	r5,r2,1
  80255c:	8009883a 	mov	r4,r16
  802560:	01800044 	movi	r6,1
  802564:	08085980 	call	808598 <part_getSect>
  802568:	e0bffb15 	stw	r2,-20(fp)
				lb = buf2[0];
  80256c:	e0bffb17 	ldw	r2,-20(fp)
  802570:	10800003 	ldbu	r2,0(r2)
  802574:	e0bffa85 	stb	r2,-22(fp)
				part_relSect(fs->part,buf2);
  802578:	e0bffc17 	ldw	r2,-16(fp)
  80257c:	11000017 	ldw	r4,0(r2)
  802580:	e17ffb17 	ldw	r5,-20(fp)
  802584:	08085f80 	call	8085f8 <part_relSect>
  802588:	00000706 	br	8025a8 <fat_getNextClusterAddressWBuf+0x104>
			}else{
				lb = buf[offset + 1];
  80258c:	e0bffa0b 	ldhu	r2,-24(fp)
  802590:	1007883a 	mov	r3,r2
  802594:	e0bffe17 	ldw	r2,-8(fp)
  802598:	1885883a 	add	r2,r3,r2
  80259c:	10800044 	addi	r2,r2,1
  8025a0:	10800003 	ldbu	r2,0(r2)
  8025a4:	e0bffa85 	stb	r2,-22(fp)
			}
			if(cluster_addr%2==0){
  8025a8:	e0bffd17 	ldw	r2,-12(fp)
  8025ac:	1080004c 	andi	r2,r2,1
  8025b0:	1004c03a 	cmpne	r2,r2,zero
  8025b4:	1000071e 	bne	r2,zero,8025d4 <fat_getNextClusterAddressWBuf+0x130>
				nextcluster = ( ((lb&0x0F)<<8) + (hb) );
  8025b8:	e0bffa83 	ldbu	r2,-22(fp)
  8025bc:	108003cc 	andi	r2,r2,15
  8025c0:	1006923a 	slli	r3,r2,8
  8025c4:	e0bffac3 	ldbu	r2,-21(fp)
  8025c8:	1885883a 	add	r2,r3,r2
  8025cc:	e0bff915 	stw	r2,-28(fp)
  8025d0:	00001f06 	br	802650 <fat_getNextClusterAddressWBuf+0x1ac>
			}else{
				nextcluster = ( (lb<<4) + (hb>>4) );
  8025d4:	e0bffa83 	ldbu	r2,-22(fp)
  8025d8:	1006913a 	slli	r3,r2,4
  8025dc:	e0bffac3 	ldbu	r2,-21(fp)
  8025e0:	1004d13a 	srli	r2,r2,4
  8025e4:	10803fcc 	andi	r2,r2,255
  8025e8:	1885883a 	add	r2,r3,r2
  8025ec:	e0bff915 	stw	r2,-28(fp)
			}
			break;
  8025f0:	00001706 	br	802650 <fat_getNextClusterAddressWBuf+0x1ac>
		case FAT16:
			offset=cluster_addr%256;
  8025f4:	e0bffd17 	ldw	r2,-12(fp)
  8025f8:	10803fcc 	andi	r2,r2,255
  8025fc:	e0bffa0d 	sth	r2,-24(fp)
			nextcluster = *((euint16*)buf + offset);
  802600:	e0bffa0b 	ldhu	r2,-24(fp)
  802604:	1085883a 	add	r2,r2,r2
  802608:	1007883a 	mov	r3,r2
  80260c:	e0bffe17 	ldw	r2,-8(fp)
  802610:	1885883a 	add	r2,r3,r2
  802614:	1080000b 	ldhu	r2,0(r2)
  802618:	10bfffcc 	andi	r2,r2,65535
  80261c:	e0bff915 	stw	r2,-28(fp)
			break;
  802620:	00000b06 	br	802650 <fat_getNextClusterAddressWBuf+0x1ac>
		case FAT32:
			offset=cluster_addr%128;
  802624:	e0bffd17 	ldw	r2,-12(fp)
  802628:	10801fcc 	andi	r2,r2,127
  80262c:	e0bffa0d 	sth	r2,-24(fp)
			nextcluster = *((euint32*)buf + offset);
  802630:	e0bffa0b 	ldhu	r2,-24(fp)
  802634:	1085883a 	add	r2,r2,r2
  802638:	1085883a 	add	r2,r2,r2
  80263c:	1007883a 	mov	r3,r2
  802640:	e0bffe17 	ldw	r2,-8(fp)
  802644:	1885883a 	add	r2,r3,r2
  802648:	10800017 	ldw	r2,0(r2)
  80264c:	e0bff915 	stw	r2,-28(fp)
			break;
	}
	return(nextcluster);
  802650:	e0bff917 	ldw	r2,-28(fp)
}
  802654:	e037883a 	mov	sp,fp
  802658:	dfc00217 	ldw	ra,8(sp)
  80265c:	df000117 	ldw	fp,4(sp)
  802660:	dc000017 	ldw	r16,0(sp)
  802664:	dec00304 	addi	sp,sp,12
  802668:	f800283a 	ret

0080266c <fat_setNextClusterAddressWBuf>:
 * not write the data itself, except in the case of FAT 12 cross sector data, where
 * the second sector is handled by this function.
 * Return value:
*/
void fat_setNextClusterAddressWBuf(FileSystem *fs,euint32 cluster_addr,euint32 next_cluster_addr,euint8* buf)
{
  80266c:	defff604 	addi	sp,sp,-40
  802670:	dfc00915 	stw	ra,36(sp)
  802674:	df000815 	stw	fp,32(sp)
  802678:	dc000715 	stw	r16,28(sp)
  80267c:	df000704 	addi	fp,sp,28
  802680:	e13ffb15 	stw	r4,-20(fp)
  802684:	e17ffc15 	stw	r5,-16(fp)
  802688:	e1bffd15 	stw	r6,-12(fp)
  80268c:	e1fffe15 	stw	r7,-8(fp)
	euint16 offset;
	euint8 *buf2;
		
	switch(fs->type)
  802690:	e0bffb17 	ldw	r2,-20(fp)
  802694:	10800f03 	ldbu	r2,60(r2)
  802698:	10803fcc 	andi	r2,r2,255
  80269c:	e0bfff15 	stw	r2,-4(fp)
  8026a0:	e0ffff17 	ldw	r3,-4(fp)
  8026a4:	188000a0 	cmpeqi	r2,r3,2
  8026a8:	10008d1e 	bne	r2,zero,8028e0 <fat_setNextClusterAddressWBuf+0x274>
  8026ac:	e0ffff17 	ldw	r3,-4(fp)
  8026b0:	188000e0 	cmpeqi	r2,r3,3
  8026b4:	1000951e 	bne	r2,zero,80290c <fat_setNextClusterAddressWBuf+0x2a0>
  8026b8:	e0ffff17 	ldw	r3,-4(fp)
  8026bc:	18800060 	cmpeqi	r2,r3,1
  8026c0:	1000011e 	bne	r2,zero,8026c8 <fat_setNextClusterAddressWBuf+0x5c>
  8026c4:	00009c06 	br	802938 <fat_setNextClusterAddressWBuf+0x2cc>
	{
		case FAT12:
			offset = ((cluster_addr%1024)*3/2)%512;
  8026c8:	e0bffc17 	ldw	r2,-16(fp)
  8026cc:	10c0ffcc 	andi	r3,r2,1023
  8026d0:	1805883a 	mov	r2,r3
  8026d4:	1085883a 	add	r2,r2,r2
  8026d8:	10c5883a 	add	r2,r2,r3
  8026dc:	1004d07a 	srli	r2,r2,1
  8026e0:	10807fcc 	andi	r2,r2,511
  8026e4:	e0bffa0d 	sth	r2,-24(fp)
			if(offset == 511){
  8026e8:	e0bffa0b 	ldhu	r2,-24(fp)
  8026ec:	10807fd8 	cmpnei	r2,r2,511
  8026f0:	1000421e 	bne	r2,zero,8027fc <fat_setNextClusterAddressWBuf+0x190>
				if(cluster_addr%2==0){
  8026f4:	e0bffc17 	ldw	r2,-16(fp)
  8026f8:	1080004c 	andi	r2,r2,1
  8026fc:	1004c03a 	cmpne	r2,r2,zero
  802700:	1000071e 	bne	r2,zero,802720 <fat_setNextClusterAddressWBuf+0xb4>
					buf[offset]=next_cluster_addr&0xFF;
  802704:	e0bffa0b 	ldhu	r2,-24(fp)
  802708:	1007883a 	mov	r3,r2
  80270c:	e0bffe17 	ldw	r2,-8(fp)
  802710:	1887883a 	add	r3,r3,r2
  802714:	e0bffd17 	ldw	r2,-12(fp)
  802718:	18800005 	stb	r2,0(r3)
  80271c:	00001206 	br	802768 <fat_setNextClusterAddressWBuf+0xfc>
				}else{
					buf[offset]=(buf[offset]&0xF)+((next_cluster_addr<<4)&0xF0);
  802720:	e0bffa0b 	ldhu	r2,-24(fp)
  802724:	1007883a 	mov	r3,r2
  802728:	e0bffe17 	ldw	r2,-8(fp)
  80272c:	188b883a 	add	r5,r3,r2
  802730:	e0bffa0b 	ldhu	r2,-24(fp)
  802734:	1007883a 	mov	r3,r2
  802738:	e0bffe17 	ldw	r2,-8(fp)
  80273c:	1885883a 	add	r2,r3,r2
  802740:	10800003 	ldbu	r2,0(r2)
  802744:	108003cc 	andi	r2,r2,15
  802748:	1009883a 	mov	r4,r2
  80274c:	e0bffd17 	ldw	r2,-12(fp)
  802750:	1004913a 	slli	r2,r2,4
  802754:	1007883a 	mov	r3,r2
  802758:	00bffc04 	movi	r2,-16
  80275c:	1884703a 	and	r2,r3,r2
  802760:	2085883a 	add	r2,r4,r2
  802764:	28800005 	stb	r2,0(r5)
				}
				buf2=part_getSect(fs->part,fat_getSectorAddressFatEntry(fs,cluster_addr)+1,IOM_MODE_READWRITE);
  802768:	e0bffb17 	ldw	r2,-20(fp)
  80276c:	14000017 	ldw	r16,0(r2)
  802770:	e13ffb17 	ldw	r4,-20(fp)
  802774:	e17ffc17 	ldw	r5,-16(fp)
  802778:	0801ca40 	call	801ca4 <fat_getSectorAddressFatEntry>
  80277c:	11400044 	addi	r5,r2,1
  802780:	8009883a 	mov	r4,r16
  802784:	01800084 	movi	r6,2
  802788:	08085980 	call	808598 <part_getSect>
  80278c:	e0bff915 	stw	r2,-28(fp)
				if(cluster_addr%2==0){
  802790:	e0bffc17 	ldw	r2,-16(fp)
  802794:	1080004c 	andi	r2,r2,1
  802798:	1004c03a 	cmpne	r2,r2,zero
  80279c:	10000d1e 	bne	r2,zero,8027d4 <fat_setNextClusterAddressWBuf+0x168>
					buf2[0]=(buf2[0]&0xF0)+((next_cluster_addr>>8)&0xF);
  8027a0:	e0bff917 	ldw	r2,-28(fp)
  8027a4:	10c00003 	ldbu	r3,0(r2)
  8027a8:	00bffc04 	movi	r2,-16
  8027ac:	1884703a 	and	r2,r3,r2
  8027b0:	1007883a 	mov	r3,r2
  8027b4:	e0bffd17 	ldw	r2,-12(fp)
  8027b8:	1004d23a 	srli	r2,r2,8
  8027bc:	108003cc 	andi	r2,r2,15
  8027c0:	1885883a 	add	r2,r3,r2
  8027c4:	1007883a 	mov	r3,r2
  8027c8:	e0bff917 	ldw	r2,-28(fp)
  8027cc:	10c00005 	stb	r3,0(r2)
  8027d0:	00000506 	br	8027e8 <fat_setNextClusterAddressWBuf+0x17c>
				}else{
					buf2[0]=(next_cluster_addr>>4)&0xFF;
  8027d4:	e0bffd17 	ldw	r2,-12(fp)
  8027d8:	1004d13a 	srli	r2,r2,4
  8027dc:	1007883a 	mov	r3,r2
  8027e0:	e0bff917 	ldw	r2,-28(fp)
  8027e4:	10c00005 	stb	r3,0(r2)
				}
				part_relSect(fs->part,buf2);
  8027e8:	e0bffb17 	ldw	r2,-20(fp)
  8027ec:	11000017 	ldw	r4,0(r2)
  8027f0:	e17ff917 	ldw	r5,-28(fp)
  8027f4:	08085f80 	call	8085f8 <part_relSect>
  8027f8:	00004f06 	br	802938 <fat_setNextClusterAddressWBuf+0x2cc>
			}else{
				if(cluster_addr%2==0){
  8027fc:	e0bffc17 	ldw	r2,-16(fp)
  802800:	1080004c 	andi	r2,r2,1
  802804:	1004c03a 	cmpne	r2,r2,zero
  802808:	10001a1e 	bne	r2,zero,802874 <fat_setNextClusterAddressWBuf+0x208>
					buf[offset]=next_cluster_addr&0xFF;
  80280c:	e0bffa0b 	ldhu	r2,-24(fp)
  802810:	1007883a 	mov	r3,r2
  802814:	e0bffe17 	ldw	r2,-8(fp)
  802818:	1887883a 	add	r3,r3,r2
  80281c:	e0bffd17 	ldw	r2,-12(fp)
  802820:	18800005 	stb	r2,0(r3)
					buf[offset+1]=(buf[offset+1]&0xF0)+((next_cluster_addr>>8)&0xF);
  802824:	e0bffa0b 	ldhu	r2,-24(fp)
  802828:	1007883a 	mov	r3,r2
  80282c:	e0bffe17 	ldw	r2,-8(fp)
  802830:	1885883a 	add	r2,r3,r2
  802834:	11000044 	addi	r4,r2,1
  802838:	e0bffa0b 	ldhu	r2,-24(fp)
  80283c:	1007883a 	mov	r3,r2
  802840:	e0bffe17 	ldw	r2,-8(fp)
  802844:	1885883a 	add	r2,r3,r2
  802848:	10800044 	addi	r2,r2,1
  80284c:	10c00003 	ldbu	r3,0(r2)
  802850:	00bffc04 	movi	r2,-16
  802854:	1884703a 	and	r2,r3,r2
  802858:	1007883a 	mov	r3,r2
  80285c:	e0bffd17 	ldw	r2,-12(fp)
  802860:	1004d23a 	srli	r2,r2,8
  802864:	108003cc 	andi	r2,r2,15
  802868:	1885883a 	add	r2,r3,r2
  80286c:	20800005 	stb	r2,0(r4)
  802870:	00003106 	br	802938 <fat_setNextClusterAddressWBuf+0x2cc>
				}else{
					buf[offset]=(buf[offset]&0xF)+((next_cluster_addr<<4)&0xF0);
  802874:	e0bffa0b 	ldhu	r2,-24(fp)
  802878:	1007883a 	mov	r3,r2
  80287c:	e0bffe17 	ldw	r2,-8(fp)
  802880:	188b883a 	add	r5,r3,r2
  802884:	e0bffa0b 	ldhu	r2,-24(fp)
  802888:	1007883a 	mov	r3,r2
  80288c:	e0bffe17 	ldw	r2,-8(fp)
  802890:	1885883a 	add	r2,r3,r2
  802894:	10800003 	ldbu	r2,0(r2)
  802898:	108003cc 	andi	r2,r2,15
  80289c:	1009883a 	mov	r4,r2
  8028a0:	e0bffd17 	ldw	r2,-12(fp)
  8028a4:	1004913a 	slli	r2,r2,4
  8028a8:	1007883a 	mov	r3,r2
  8028ac:	00bffc04 	movi	r2,-16
  8028b0:	1884703a 	and	r2,r3,r2
  8028b4:	2085883a 	add	r2,r4,r2
  8028b8:	28800005 	stb	r2,0(r5)
					buf[offset+1]=(next_cluster_addr>>4)&0xFF;
  8028bc:	e0bffa0b 	ldhu	r2,-24(fp)
  8028c0:	1007883a 	mov	r3,r2
  8028c4:	e0bffe17 	ldw	r2,-8(fp)
  8028c8:	1885883a 	add	r2,r3,r2
  8028cc:	10c00044 	addi	r3,r2,1
  8028d0:	e0bffd17 	ldw	r2,-12(fp)
  8028d4:	1004d13a 	srli	r2,r2,4
  8028d8:	18800005 	stb	r2,0(r3)
				}
			}
			break;
  8028dc:	00001606 	br	802938 <fat_setNextClusterAddressWBuf+0x2cc>
		case FAT16:
			offset=cluster_addr%256;
  8028e0:	e0bffc17 	ldw	r2,-16(fp)
  8028e4:	10803fcc 	andi	r2,r2,255
  8028e8:	e0bffa0d 	sth	r2,-24(fp)
			*((euint16*)buf+offset)=next_cluster_addr;
  8028ec:	e0bffa0b 	ldhu	r2,-24(fp)
  8028f0:	1085883a 	add	r2,r2,r2
  8028f4:	1007883a 	mov	r3,r2
  8028f8:	e0bffe17 	ldw	r2,-8(fp)
  8028fc:	1887883a 	add	r3,r3,r2
  802900:	e0bffd17 	ldw	r2,-12(fp)
  802904:	1880000d 	sth	r2,0(r3)
			break;
  802908:	00000b06 	br	802938 <fat_setNextClusterAddressWBuf+0x2cc>
		case FAT32:
			offset=cluster_addr%128;
  80290c:	e0bffc17 	ldw	r2,-16(fp)
  802910:	10801fcc 	andi	r2,r2,127
  802914:	e0bffa0d 	sth	r2,-24(fp)
			*((euint32*)buf+offset)=next_cluster_addr;
  802918:	e0bffa0b 	ldhu	r2,-24(fp)
  80291c:	1085883a 	add	r2,r2,r2
  802920:	1085883a 	add	r2,r2,r2
  802924:	1007883a 	mov	r3,r2
  802928:	e0bffe17 	ldw	r2,-8(fp)
  80292c:	1887883a 	add	r3,r3,r2
  802930:	e0bffd17 	ldw	r2,-12(fp)
  802934:	18800015 	stw	r2,0(r3)
			break;
	}
}
  802938:	e037883a 	mov	sp,fp
  80293c:	dfc00217 	ldw	ra,8(sp)
  802940:	df000117 	ldw	fp,4(sp)
  802944:	dc000017 	ldw	r16,0(sp)
  802948:	dec00304 	addi	sp,sp,12
  80294c:	f800283a 	ret

00802950 <fat_getNextClusterChain>:
 * With lineair is meant that logical cluster n+1 should be 1 more than logical cluster n
 * at the disc level.
 * Return value: 0 on success, or -1 when EoC.
*/
esint16 fat_getNextClusterChain(FileSystem *fs, ClusterChain *Cache)
{
  802950:	defff404 	addi	sp,sp,-48
  802954:	dfc00b15 	stw	ra,44(sp)
  802958:	df000a15 	stw	fp,40(sp)
  80295c:	df000a04 	addi	fp,sp,40
  802960:	e13ffc15 	stw	r4,-16(fp)
  802964:	e17ffd15 	stw	r5,-12(fp)
	euint32 sect,lr,nlr,dc;
	esint16 lin=0;
  802968:	e03ff70d 	sth	zero,-36(fp)
	euint8 *buf;

	if(Cache->DiscCluster==0)
  80296c:	e0bffd17 	ldw	r2,-12(fp)
  802970:	10800217 	ldw	r2,8(r2)
  802974:	1004c03a 	cmpne	r2,r2,zero
  802978:	1000031e 	bne	r2,zero,802988 <fat_getNextClusterChain+0x38>
	{
		return(-1);
  80297c:	00bfffc4 	movi	r2,-1
  802980:	e0bfff15 	stw	r2,-4(fp)
  802984:	00005806 	br	802ae8 <fat_getNextClusterChain+0x198>
	}

	sect=fat_getSectorAddressFatEntry(fs,Cache->DiscCluster);
  802988:	e0bffd17 	ldw	r2,-12(fp)
  80298c:	11400217 	ldw	r5,8(r2)
  802990:	e13ffc17 	ldw	r4,-16(fp)
  802994:	0801ca40 	call	801ca4 <fat_getSectorAddressFatEntry>
  802998:	e0bffb15 	stw	r2,-20(fp)
	buf=part_getSect(fs->part,sect,IOM_MODE_READONLY);
  80299c:	e0bffc17 	ldw	r2,-16(fp)
  8029a0:	11000017 	ldw	r4,0(r2)
  8029a4:	e17ffb17 	ldw	r5,-20(fp)
  8029a8:	01800044 	movi	r6,1
  8029ac:	08085980 	call	808598 <part_getSect>
  8029b0:	e0bff615 	stw	r2,-40(fp)
	dc=fat_getNextClusterAddressWBuf(fs,Cache->DiscCluster,buf);
  8029b4:	e0bffd17 	ldw	r2,-12(fp)
  8029b8:	11400217 	ldw	r5,8(r2)
  8029bc:	e13ffc17 	ldw	r4,-16(fp)
  8029c0:	e1bff617 	ldw	r6,-40(fp)
  8029c4:	08024a40 	call	8024a4 <fat_getNextClusterAddressWBuf>
  8029c8:	e0bff815 	stw	r2,-32(fp)
	if(fat_isEocMarker(fs,dc))
  8029cc:	e13ffc17 	ldw	r4,-16(fp)
  8029d0:	e17ff817 	ldw	r5,-32(fp)
  8029d4:	08023680 	call	802368 <fat_isEocMarker>
  8029d8:	10bfffcc 	andi	r2,r2,65535
  8029dc:	10a0001c 	xori	r2,r2,32768
  8029e0:	10a00004 	addi	r2,r2,-32768
  8029e4:	1005003a 	cmpeq	r2,r2,zero
  8029e8:	10000b1e 	bne	r2,zero,802a18 <fat_getNextClusterChain+0xc8>
	{
		Cache->LastCluster=Cache->DiscCluster;
  8029ec:	e0bffd17 	ldw	r2,-12(fp)
  8029f0:	10c00217 	ldw	r3,8(r2)
  8029f4:	e0bffd17 	ldw	r2,-12(fp)
  8029f8:	10c00415 	stw	r3,16(r2)
		part_relSect(fs->part,buf);
  8029fc:	e0bffc17 	ldw	r2,-16(fp)
  802a00:	11000017 	ldw	r4,0(r2)
  802a04:	e17ff617 	ldw	r5,-40(fp)
  802a08:	08085f80 	call	8085f8 <part_relSect>
		return(-1);
  802a0c:	00ffffc4 	movi	r3,-1
  802a10:	e0ffff15 	stw	r3,-4(fp)
  802a14:	00003406 	br	802ae8 <fat_getNextClusterChain+0x198>
	}
	
	Cache->DiscCluster=dc;
  802a18:	e0fffd17 	ldw	r3,-12(fp)
  802a1c:	e0bff817 	ldw	r2,-32(fp)
  802a20:	18800215 	stw	r2,8(r3)
	Cache->LogicCluster++;
  802a24:	e0bffd17 	ldw	r2,-12(fp)
  802a28:	10800117 	ldw	r2,4(r2)
  802a2c:	10c00044 	addi	r3,r2,1
  802a30:	e0bffd17 	ldw	r2,-12(fp)
  802a34:	10c00115 	stw	r3,4(r2)
		
	lr=Cache->DiscCluster-1;
  802a38:	e0bffd17 	ldw	r2,-12(fp)
  802a3c:	10800217 	ldw	r2,8(r2)
  802a40:	10bfffc4 	addi	r2,r2,-1
  802a44:	e0bffa15 	stw	r2,-24(fp)
	nlr=lr+1;
  802a48:	e0bffa17 	ldw	r2,-24(fp)
  802a4c:	10800044 	addi	r2,r2,1
  802a50:	e0bff915 	stw	r2,-28(fp)
	
	while(nlr-1==lr && fat_getSectorAddressFatEntry(fs,nlr)==sect)
  802a54:	00000a06 	br	802a80 <fat_getNextClusterChain+0x130>
	{
		lr=nlr;
  802a58:	e0bff917 	ldw	r2,-28(fp)
  802a5c:	e0bffa15 	stw	r2,-24(fp)
		nlr=fat_getNextClusterAddressWBuf(fs,lr,buf);
  802a60:	e13ffc17 	ldw	r4,-16(fp)
  802a64:	e17ffa17 	ldw	r5,-24(fp)
  802a68:	e1bff617 	ldw	r6,-40(fp)
  802a6c:	08024a40 	call	8024a4 <fat_getNextClusterAddressWBuf>
  802a70:	e0bff915 	stw	r2,-28(fp)
		lin++;	
  802a74:	e0bff70b 	ldhu	r2,-36(fp)
  802a78:	10800044 	addi	r2,r2,1
  802a7c:	e0bff70d 	sth	r2,-36(fp)
	Cache->LogicCluster++;
		
	lr=Cache->DiscCluster-1;
	nlr=lr+1;
	
	while(nlr-1==lr && fat_getSectorAddressFatEntry(fs,nlr)==sect)
  802a80:	e0bff917 	ldw	r2,-28(fp)
  802a84:	10ffffc4 	addi	r3,r2,-1
  802a88:	e0bffa17 	ldw	r2,-24(fp)
  802a8c:	1880061e 	bne	r3,r2,802aa8 <fat_getNextClusterChain+0x158>
  802a90:	e13ffc17 	ldw	r4,-16(fp)
  802a94:	e17ff917 	ldw	r5,-28(fp)
  802a98:	0801ca40 	call	801ca4 <fat_getSectorAddressFatEntry>
  802a9c:	1007883a 	mov	r3,r2
  802aa0:	e0bffb17 	ldw	r2,-20(fp)
  802aa4:	18bfec26 	beq	r3,r2,802a58 <fat_getNextClusterChain+0x108>
		lr=nlr;
		nlr=fat_getNextClusterAddressWBuf(fs,lr,buf);
		lin++;	
	}
	
	Cache->Linear=lin-1<0?0:lin-1;
  802aa8:	e0bff70f 	ldh	r2,-36(fp)
  802aac:	10800050 	cmplti	r2,r2,1
  802ab0:	1000041e 	bne	r2,zero,802ac4 <fat_getNextClusterChain+0x174>
  802ab4:	e0bff70b 	ldhu	r2,-36(fp)
  802ab8:	10bfffc4 	addi	r2,r2,-1
  802abc:	e0bffe05 	stb	r2,-8(fp)
  802ac0:	00000106 	br	802ac8 <fat_getNextClusterChain+0x178>
  802ac4:	e03ffe05 	stb	zero,-8(fp)
  802ac8:	e0bffd17 	ldw	r2,-12(fp)
  802acc:	e0fffe03 	ldbu	r3,-8(fp)
  802ad0:	10c00005 	stb	r3,0(r2)
	
	part_relSect(fs->part,buf);
  802ad4:	e0bffc17 	ldw	r2,-16(fp)
  802ad8:	11000017 	ldw	r4,0(r2)
  802adc:	e17ff617 	ldw	r5,-40(fp)
  802ae0:	08085f80 	call	8085f8 <part_relSect>
	return(0);
  802ae4:	e03fff15 	stw	zero,-4(fp)
  802ae8:	e0bfff17 	ldw	r2,-4(fp)
}
  802aec:	e037883a 	mov	sp,fp
  802af0:	dfc00117 	ldw	ra,4(sp)
  802af4:	df000017 	ldw	fp,0(sp)
  802af8:	dec00204 	addi	sp,sp,8
  802afc:	f800283a 	ret

00802b00 <fat_LogicToDiscCluster>:
 * It is NOT recommended to go backwards in clusterchains, since this will require
 * scanning the entire chain every time.
 * Return value: 0 on success and -1 on failure (meaning out of bounds).
*/
esint16 fat_LogicToDiscCluster(FileSystem *fs, ClusterChain *Cache,euint32 logiccluster)
{
  802b00:	defffa04 	addi	sp,sp,-24
  802b04:	dfc00515 	stw	ra,20(sp)
  802b08:	df000415 	stw	fp,16(sp)
  802b0c:	df000404 	addi	fp,sp,16
  802b10:	e13ffc15 	stw	r4,-16(fp)
  802b14:	e17ffd15 	stw	r5,-12(fp)
  802b18:	e1bffe15 	stw	r6,-8(fp)
	if(logiccluster<Cache->LogicCluster || Cache->DiscCluster==0){
  802b1c:	e0bffd17 	ldw	r2,-12(fp)
  802b20:	10800117 	ldw	r2,4(r2)
  802b24:	1007883a 	mov	r3,r2
  802b28:	e0bffe17 	ldw	r2,-8(fp)
  802b2c:	10c00436 	bltu	r2,r3,802b40 <fat_LogicToDiscCluster+0x40>
  802b30:	e0bffd17 	ldw	r2,-12(fp)
  802b34:	10800217 	ldw	r2,8(r2)
  802b38:	1004c03a 	cmpne	r2,r2,zero
  802b3c:	1000081e 	bne	r2,zero,802b60 <fat_LogicToDiscCluster+0x60>
		Cache->LogicCluster=0;
  802b40:	e0bffd17 	ldw	r2,-12(fp)
  802b44:	10000115 	stw	zero,4(r2)
		Cache->DiscCluster=Cache->FirstCluster;
  802b48:	e0bffd17 	ldw	r2,-12(fp)
  802b4c:	10c00317 	ldw	r3,12(r2)
  802b50:	e0bffd17 	ldw	r2,-12(fp)
  802b54:	10c00215 	stw	r3,8(r2)
		Cache->Linear=0;
  802b58:	e0bffd17 	ldw	r2,-12(fp)
  802b5c:	10000005 	stb	zero,0(r2)
	}
	
	if(Cache->LogicCluster==logiccluster){
  802b60:	e0bffd17 	ldw	r2,-12(fp)
  802b64:	10800117 	ldw	r2,4(r2)
  802b68:	1007883a 	mov	r3,r2
  802b6c:	e0bffe17 	ldw	r2,-8(fp)
  802b70:	1880231e 	bne	r3,r2,802c00 <fat_LogicToDiscCluster+0x100>
		return(0);
  802b74:	e03fff15 	stw	zero,-4(fp)
  802b78:	00002706 	br	802c18 <fat_LogicToDiscCluster+0x118>
	}
	
	while(Cache->LogicCluster!=logiccluster)
	{
		if(Cache->Linear!=0)
  802b7c:	e0bffd17 	ldw	r2,-12(fp)
  802b80:	10800003 	ldbu	r2,0(r2)
  802b84:	10803fcc 	andi	r2,r2,255
  802b88:	1005003a 	cmpeq	r2,r2,zero
  802b8c:	1000111e 	bne	r2,zero,802bd4 <fat_LogicToDiscCluster+0xd4>
		{
			Cache->Linear--;
  802b90:	e0bffd17 	ldw	r2,-12(fp)
  802b94:	10800003 	ldbu	r2,0(r2)
  802b98:	10bfffc4 	addi	r2,r2,-1
  802b9c:	1007883a 	mov	r3,r2
  802ba0:	e0bffd17 	ldw	r2,-12(fp)
  802ba4:	10c00005 	stb	r3,0(r2)
			Cache->LogicCluster++;
  802ba8:	e0bffd17 	ldw	r2,-12(fp)
  802bac:	10800117 	ldw	r2,4(r2)
  802bb0:	10c00044 	addi	r3,r2,1
  802bb4:	e0bffd17 	ldw	r2,-12(fp)
  802bb8:	10c00115 	stw	r3,4(r2)
			Cache->DiscCluster++;
  802bbc:	e0bffd17 	ldw	r2,-12(fp)
  802bc0:	10800217 	ldw	r2,8(r2)
  802bc4:	10c00044 	addi	r3,r2,1
  802bc8:	e0bffd17 	ldw	r2,-12(fp)
  802bcc:	10c00215 	stw	r3,8(r2)
  802bd0:	00000b06 	br	802c00 <fat_LogicToDiscCluster+0x100>
		}
		else
		{
			if((fat_getNextClusterChain(fs,Cache))!=0){
  802bd4:	e13ffc17 	ldw	r4,-16(fp)
  802bd8:	e17ffd17 	ldw	r5,-12(fp)
  802bdc:	08029500 	call	802950 <fat_getNextClusterChain>
  802be0:	10bfffcc 	andi	r2,r2,65535
  802be4:	10a0001c 	xori	r2,r2,32768
  802be8:	10a00004 	addi	r2,r2,-32768
  802bec:	1005003a 	cmpeq	r2,r2,zero
  802bf0:	1000031e 	bne	r2,zero,802c00 <fat_LogicToDiscCluster+0x100>
				return(-1);
  802bf4:	00bfffc4 	movi	r2,-1
  802bf8:	e0bfff15 	stw	r2,-4(fp)
  802bfc:	00000606 	br	802c18 <fat_LogicToDiscCluster+0x118>
	
	if(Cache->LogicCluster==logiccluster){
		return(0);
	}
	
	while(Cache->LogicCluster!=logiccluster)
  802c00:	e0bffd17 	ldw	r2,-12(fp)
  802c04:	10800117 	ldw	r2,4(r2)
  802c08:	1007883a 	mov	r3,r2
  802c0c:	e0bffe17 	ldw	r2,-8(fp)
  802c10:	18bfda1e 	bne	r3,r2,802b7c <fat_LogicToDiscCluster+0x7c>
			if((fat_getNextClusterChain(fs,Cache))!=0){
				return(-1);
			}
		}
	}
	return(0);
  802c14:	e03fff15 	stw	zero,-4(fp)
  802c18:	e0bfff17 	ldw	r2,-4(fp)
}
  802c1c:	e037883a 	mov	sp,fp
  802c20:	dfc00117 	ldw	ra,4(sp)
  802c24:	df000017 	ldw	fp,0(sp)
  802c28:	dec00204 	addi	sp,sp,8
  802c2c:	f800283a 	ret

00802c30 <fat_allocClusterChain>:
 * number of clusters it *failed* to allocate. 
 * Return value: 0 on success, all other values are the number of clusters it could
 * not allocate.
*/
eint16 fat_allocClusterChain(FileSystem *fs,ClusterChain *Cache,euint32 num_clusters)
{
  802c30:	defff304 	addi	sp,sp,-52
  802c34:	dfc00c15 	stw	ra,48(sp)
  802c38:	df000b15 	stw	fp,44(sp)
  802c3c:	dc000a15 	stw	r16,40(sp)
  802c40:	df000a04 	addi	fp,sp,40
  802c44:	e13ffc15 	stw	r4,-16(fp)
  802c48:	e17ffd15 	stw	r5,-12(fp)
  802c4c:	e1bffe15 	stw	r6,-8(fp)
	euint32 cc,ncl=num_clusters,lc;
  802c50:	e0bffe17 	ldw	r2,-8(fp)
  802c54:	e0bffa15 	stw	r2,-24(fp)
	euint8 *bufa=0,*bufb=0;
  802c58:	e03ff815 	stw	zero,-32(fp)
  802c5c:	e03ff715 	stw	zero,-36(fp)
	euint8  overflow=0;
  802c60:	e03ff605 	stb	zero,-40(fp)

	if(Cache->FirstCluster<=1)return(num_clusters);
  802c64:	e0bffd17 	ldw	r2,-12(fp)
  802c68:	10800317 	ldw	r2,12(r2)
  802c6c:	108000a8 	cmpgeui	r2,r2,2
  802c70:	1000061e 	bne	r2,zero,802c8c <fat_allocClusterChain+0x5c>
  802c74:	e0bffe17 	ldw	r2,-8(fp)
  802c78:	10bfffcc 	andi	r2,r2,65535
  802c7c:	10a0001c 	xori	r2,r2,32768
  802c80:	10a00004 	addi	r2,r2,-32768
  802c84:	e0bfff15 	stw	r2,-4(fp)
  802c88:	00009506 	br	802ee0 <fat_allocClusterChain+0x2b0>
	
	lc=fs_getLastCluster(fs,Cache);
  802c8c:	e13ffc17 	ldw	r4,-16(fp)
  802c90:	e17ffd17 	ldw	r5,-12(fp)
  802c94:	08051080 	call	805108 <fs_getLastCluster>
  802c98:	e0bff915 	stw	r2,-28(fp)
	cc=lc;
  802c9c:	e0bff917 	ldw	r2,-28(fp)
  802ca0:	e0bffb15 	stw	r2,-20(fp)
	
	while(ncl > 0){
  802ca4:	00008006 	br	802ea8 <fat_allocClusterChain+0x278>
		cc++;
  802ca8:	e0bffb17 	ldw	r2,-20(fp)
  802cac:	10800044 	addi	r2,r2,1
  802cb0:	e0bffb15 	stw	r2,-20(fp)
		if(cc>=fs->DataClusterCount+1){
  802cb4:	e0bffc17 	ldw	r2,-16(fp)
  802cb8:	10800817 	ldw	r2,32(r2)
  802cbc:	10c00044 	addi	r3,r2,1
  802cc0:	e0bffb17 	ldw	r2,-20(fp)
  802cc4:	10c03136 	bltu	r2,r3,802d8c <fat_allocClusterChain+0x15c>
			if(overflow){
  802cc8:	e0bff603 	ldbu	r2,-40(fp)
  802ccc:	1005003a 	cmpeq	r2,r2,zero
  802cd0:	1000291e 	bne	r2,zero,802d78 <fat_allocClusterChain+0x148>
				bufa=part_getSect(fs->part,fat_getSectorAddressFatEntry(fs,lc),IOM_MODE_READWRITE);
  802cd4:	e0bffc17 	ldw	r2,-16(fp)
  802cd8:	14000017 	ldw	r16,0(r2)
  802cdc:	e13ffc17 	ldw	r4,-16(fp)
  802ce0:	e17ff917 	ldw	r5,-28(fp)
  802ce4:	0801ca40 	call	801ca4 <fat_getSectorAddressFatEntry>
  802ce8:	100b883a 	mov	r5,r2
  802cec:	8009883a 	mov	r4,r16
  802cf0:	01800084 	movi	r6,2
  802cf4:	08085980 	call	808598 <part_getSect>
  802cf8:	e0bff815 	stw	r2,-32(fp)
				fat_setNextClusterAddressWBuf(fs,lc,fat_giveEocMarker(fs),bufa);
  802cfc:	e13ffc17 	ldw	r4,-16(fp)
  802d00:	080241c0 	call	80241c <fat_giveEocMarker>
  802d04:	100d883a 	mov	r6,r2
  802d08:	e13ffc17 	ldw	r4,-16(fp)
  802d0c:	e17ff917 	ldw	r5,-28(fp)
  802d10:	e1fff817 	ldw	r7,-32(fp)
  802d14:	080266c0 	call	80266c <fat_setNextClusterAddressWBuf>
				Cache->LastCluster=lc;
  802d18:	e0fffd17 	ldw	r3,-12(fp)
  802d1c:	e0bff917 	ldw	r2,-28(fp)
  802d20:	18800415 	stw	r2,16(r3)
				part_relSect(fs->part,bufa);
  802d24:	e0bffc17 	ldw	r2,-16(fp)
  802d28:	11000017 	ldw	r4,0(r2)
  802d2c:	e17ff817 	ldw	r5,-32(fp)
  802d30:	08085f80 	call	8085f8 <part_relSect>
				fs->FreeClusterCount-=num_clusters-ncl;
  802d34:	e0bffc17 	ldw	r2,-16(fp)
  802d38:	11000d17 	ldw	r4,52(r2)
  802d3c:	e0fffe17 	ldw	r3,-8(fp)
  802d40:	e0bffa17 	ldw	r2,-24(fp)
  802d44:	1885c83a 	sub	r2,r3,r2
  802d48:	2087c83a 	sub	r3,r4,r2
  802d4c:	e0bffc17 	ldw	r2,-16(fp)
  802d50:	10c00d15 	stw	r3,52(r2)
				return(num_clusters-ncl);
  802d54:	e0bffe17 	ldw	r2,-8(fp)
  802d58:	1007883a 	mov	r3,r2
  802d5c:	e0bffa17 	ldw	r2,-24(fp)
  802d60:	1885c83a 	sub	r2,r3,r2
  802d64:	10bfffcc 	andi	r2,r2,65535
  802d68:	10a0001c 	xori	r2,r2,32768
  802d6c:	10a00004 	addi	r2,r2,-32768
  802d70:	e0bfff15 	stw	r2,-4(fp)
  802d74:	00005a06 	br	802ee0 <fat_allocClusterChain+0x2b0>
			}
			cc=2;
  802d78:	00800084 	movi	r2,2
  802d7c:	e0bffb15 	stw	r2,-20(fp)
			overflow++;
  802d80:	e0bff603 	ldbu	r2,-40(fp)
  802d84:	10800044 	addi	r2,r2,1
  802d88:	e0bff605 	stb	r2,-40(fp)
		}
		bufa=part_getSect(fs->part,fat_getSectorAddressFatEntry(fs,cc),IOM_MODE_READONLY);
  802d8c:	e0bffc17 	ldw	r2,-16(fp)
  802d90:	14000017 	ldw	r16,0(r2)
  802d94:	e13ffc17 	ldw	r4,-16(fp)
  802d98:	e17ffb17 	ldw	r5,-20(fp)
  802d9c:	0801ca40 	call	801ca4 <fat_getSectorAddressFatEntry>
  802da0:	100b883a 	mov	r5,r2
  802da4:	8009883a 	mov	r4,r16
  802da8:	01800044 	movi	r6,1
  802dac:	08085980 	call	808598 <part_getSect>
  802db0:	e0bff815 	stw	r2,-32(fp)
		if(fat_getNextClusterAddressWBuf(fs,cc,bufa)==0){
  802db4:	e13ffc17 	ldw	r4,-16(fp)
  802db8:	e17ffb17 	ldw	r5,-20(fp)
  802dbc:	e1bff817 	ldw	r6,-32(fp)
  802dc0:	08024a40 	call	8024a4 <fat_getNextClusterAddressWBuf>
  802dc4:	1004c03a 	cmpne	r2,r2,zero
  802dc8:	1000181e 	bne	r2,zero,802e2c <fat_allocClusterChain+0x1fc>
			bufb=part_getSect(fs->part,fat_getSectorAddressFatEntry(fs,lc),IOM_MODE_READWRITE);
  802dcc:	e0bffc17 	ldw	r2,-16(fp)
  802dd0:	14000017 	ldw	r16,0(r2)
  802dd4:	e13ffc17 	ldw	r4,-16(fp)
  802dd8:	e17ff917 	ldw	r5,-28(fp)
  802ddc:	0801ca40 	call	801ca4 <fat_getSectorAddressFatEntry>
  802de0:	100b883a 	mov	r5,r2
  802de4:	8009883a 	mov	r4,r16
  802de8:	01800084 	movi	r6,2
  802dec:	08085980 	call	808598 <part_getSect>
  802df0:	e0bff715 	stw	r2,-36(fp)
			fat_setNextClusterAddressWBuf(fs,lc,cc,bufb);
  802df4:	e13ffc17 	ldw	r4,-16(fp)
  802df8:	e17ff917 	ldw	r5,-28(fp)
  802dfc:	e1bffb17 	ldw	r6,-20(fp)
  802e00:	e1fff717 	ldw	r7,-36(fp)
  802e04:	080266c0 	call	80266c <fat_setNextClusterAddressWBuf>
			part_relSect(fs->part,bufb);
  802e08:	e0bffc17 	ldw	r2,-16(fp)
  802e0c:	11000017 	ldw	r4,0(r2)
  802e10:	e17ff717 	ldw	r5,-36(fp)
  802e14:	08085f80 	call	8085f8 <part_relSect>
			ncl--;
  802e18:	e0bffa17 	ldw	r2,-24(fp)
  802e1c:	10bfffc4 	addi	r2,r2,-1
  802e20:	e0bffa15 	stw	r2,-24(fp)
			lc=cc;
  802e24:	e0bffb17 	ldw	r2,-20(fp)
  802e28:	e0bff915 	stw	r2,-28(fp)
		}
		part_relSect(fs->part,bufa);
  802e2c:	e0bffc17 	ldw	r2,-16(fp)
  802e30:	11000017 	ldw	r4,0(r2)
  802e34:	e17ff817 	ldw	r5,-32(fp)
  802e38:	08085f80 	call	8085f8 <part_relSect>
		if(ncl==0){
  802e3c:	e0bffa17 	ldw	r2,-24(fp)
  802e40:	1004c03a 	cmpne	r2,r2,zero
  802e44:	1000181e 	bne	r2,zero,802ea8 <fat_allocClusterChain+0x278>
			bufa=part_getSect(fs->part,fat_getSectorAddressFatEntry(fs,lc),IOM_MODE_READWRITE);
  802e48:	e0bffc17 	ldw	r2,-16(fp)
  802e4c:	14000017 	ldw	r16,0(r2)
  802e50:	e13ffc17 	ldw	r4,-16(fp)
  802e54:	e17ff917 	ldw	r5,-28(fp)
  802e58:	0801ca40 	call	801ca4 <fat_getSectorAddressFatEntry>
  802e5c:	100b883a 	mov	r5,r2
  802e60:	8009883a 	mov	r4,r16
  802e64:	01800084 	movi	r6,2
  802e68:	08085980 	call	808598 <part_getSect>
  802e6c:	e0bff815 	stw	r2,-32(fp)
			fat_setNextClusterAddressWBuf(fs,lc,fat_giveEocMarker(fs),bufa);
  802e70:	e13ffc17 	ldw	r4,-16(fp)
  802e74:	080241c0 	call	80241c <fat_giveEocMarker>
  802e78:	100d883a 	mov	r6,r2
  802e7c:	e13ffc17 	ldw	r4,-16(fp)
  802e80:	e17ff917 	ldw	r5,-28(fp)
  802e84:	e1fff817 	ldw	r7,-32(fp)
  802e88:	080266c0 	call	80266c <fat_setNextClusterAddressWBuf>
			Cache->LastCluster=lc;
  802e8c:	e0fffd17 	ldw	r3,-12(fp)
  802e90:	e0bff917 	ldw	r2,-28(fp)
  802e94:	18800415 	stw	r2,16(r3)
			part_relSect(fs->part,bufa);
  802e98:	e0bffc17 	ldw	r2,-16(fp)
  802e9c:	11000017 	ldw	r4,0(r2)
  802ea0:	e17ff817 	ldw	r5,-32(fp)
  802ea4:	08085f80 	call	8085f8 <part_relSect>
	if(Cache->FirstCluster<=1)return(num_clusters);
	
	lc=fs_getLastCluster(fs,Cache);
	cc=lc;
	
	while(ncl > 0){
  802ea8:	e0bffa17 	ldw	r2,-24(fp)
  802eac:	1004c03a 	cmpne	r2,r2,zero
  802eb0:	103f7d1e 	bne	r2,zero,802ca8 <fat_allocClusterChain+0x78>
			fat_setNextClusterAddressWBuf(fs,lc,fat_giveEocMarker(fs),bufa);
			Cache->LastCluster=lc;
			part_relSect(fs->part,bufa);
		}
	}
	if(Cache->ClusterCount)Cache->ClusterCount+=num_clusters;
  802eb4:	e0bffd17 	ldw	r2,-12(fp)
  802eb8:	10800517 	ldw	r2,20(r2)
  802ebc:	1005003a 	cmpeq	r2,r2,zero
  802ec0:	1000061e 	bne	r2,zero,802edc <fat_allocClusterChain+0x2ac>
  802ec4:	e0bffd17 	ldw	r2,-12(fp)
  802ec8:	10c00517 	ldw	r3,20(r2)
  802ecc:	e0bffe17 	ldw	r2,-8(fp)
  802ed0:	1887883a 	add	r3,r3,r2
  802ed4:	e0bffd17 	ldw	r2,-12(fp)
  802ed8:	10c00515 	stw	r3,20(r2)
	return(0);
  802edc:	e03fff15 	stw	zero,-4(fp)
  802ee0:	e0bfff17 	ldw	r2,-4(fp)
}
  802ee4:	e037883a 	mov	sp,fp
  802ee8:	dfc00217 	ldw	ra,8(sp)
  802eec:	df000117 	ldw	fp,4(sp)
  802ef0:	dc000017 	ldw	r16,0(sp)
  802ef4:	dec00304 	addi	sp,sp,12
  802ef8:	f800283a 	ret

00802efc <fat_unlinkClusterChain>:
 * Description: This function removes a clusterchain. Starting at FirstCluster
 * it follows the chain until the end, resetting all values to 0.
 * Return value: 0 on success.
*/
eint16 fat_unlinkClusterChain(FileSystem *fs,ClusterChain *Cache)
{
  802efc:	defffa04 	addi	sp,sp,-24
  802f00:	dfc00515 	stw	ra,20(sp)
  802f04:	df000415 	stw	fp,16(sp)
  802f08:	df000404 	addi	fp,sp,16
  802f0c:	e13ffe15 	stw	r4,-8(fp)
  802f10:	e17fff15 	stw	r5,-4(fp)
	euint32 c,tbd=0;
  802f14:	e03ffc15 	stw	zero,-16(fp)
	
	Cache->LogicCluster=0;
  802f18:	e0bfff17 	ldw	r2,-4(fp)
  802f1c:	10000115 	stw	zero,4(r2)
	Cache->DiscCluster=Cache->FirstCluster;
  802f20:	e0bfff17 	ldw	r2,-4(fp)
  802f24:	10c00317 	ldw	r3,12(r2)
  802f28:	e0bfff17 	ldw	r2,-4(fp)
  802f2c:	10c00215 	stw	r3,8(r2)
	
	c=0;
  802f30:	e03ffd15 	stw	zero,-12(fp)
	
	while(!fat_LogicToDiscCluster(fs,Cache,c++)){
  802f34:	00000a06 	br	802f60 <fat_unlinkClusterChain+0x64>
		if(tbd!=0){
  802f38:	e0bffc17 	ldw	r2,-16(fp)
  802f3c:	1005003a 	cmpeq	r2,r2,zero
  802f40:	1000041e 	bne	r2,zero,802f54 <fat_unlinkClusterChain+0x58>
			fat_setNextClusterAddress(fs,tbd,0);
  802f44:	e13ffe17 	ldw	r4,-8(fp)
  802f48:	e17ffc17 	ldw	r5,-16(fp)
  802f4c:	000d883a 	mov	r6,zero
  802f50:	0801ff40 	call	801ff4 <fat_setNextClusterAddress>
		}
		tbd=Cache->DiscCluster;
  802f54:	e0bfff17 	ldw	r2,-4(fp)
  802f58:	10800217 	ldw	r2,8(r2)
  802f5c:	e0bffc15 	stw	r2,-16(fp)
	Cache->LogicCluster=0;
	Cache->DiscCluster=Cache->FirstCluster;
	
	c=0;
	
	while(!fat_LogicToDiscCluster(fs,Cache,c++)){
  802f60:	e1bffd17 	ldw	r6,-12(fp)
  802f64:	e0bffd17 	ldw	r2,-12(fp)
  802f68:	10800044 	addi	r2,r2,1
  802f6c:	e0bffd15 	stw	r2,-12(fp)
  802f70:	e13ffe17 	ldw	r4,-8(fp)
  802f74:	e17fff17 	ldw	r5,-4(fp)
  802f78:	0802b000 	call	802b00 <fat_LogicToDiscCluster>
  802f7c:	10bfffcc 	andi	r2,r2,65535
  802f80:	10a0001c 	xori	r2,r2,32768
  802f84:	10a00004 	addi	r2,r2,-32768
  802f88:	1005003a 	cmpeq	r2,r2,zero
  802f8c:	103fea1e 	bne	r2,zero,802f38 <fat_unlinkClusterChain+0x3c>
		if(tbd!=0){
			fat_setNextClusterAddress(fs,tbd,0);
		}
		tbd=Cache->DiscCluster;
	}
	fat_setNextClusterAddress(fs,Cache->DiscCluster,0);
  802f90:	e0bfff17 	ldw	r2,-4(fp)
  802f94:	11400217 	ldw	r5,8(r2)
  802f98:	e13ffe17 	ldw	r4,-8(fp)
  802f9c:	000d883a 	mov	r6,zero
  802fa0:	0801ff40 	call	801ff4 <fat_setNextClusterAddress>
	fs->FreeClusterCount+=c;	
  802fa4:	e0bffe17 	ldw	r2,-8(fp)
  802fa8:	10c00d17 	ldw	r3,52(r2)
  802fac:	e0bffd17 	ldw	r2,-12(fp)
  802fb0:	1887883a 	add	r3,r3,r2
  802fb4:	e0bffe17 	ldw	r2,-8(fp)
  802fb8:	10c00d15 	stw	r3,52(r2)
 	return(0);
  802fbc:	0005883a 	mov	r2,zero
}
  802fc0:	e037883a 	mov	sp,fp
  802fc4:	dfc00117 	ldw	ra,4(sp)
  802fc8:	df000017 	ldw	fp,0(sp)
  802fcc:	dec00204 	addi	sp,sp,8
  802fd0:	f800283a 	ret

00802fd4 <fat_countClustersInChain>:

euint32 fat_countClustersInChain(FileSystem *fs,euint32 firstcluster)
{
  802fd4:	defff404 	addi	sp,sp,-48
  802fd8:	dfc00b15 	stw	ra,44(sp)
  802fdc:	df000a15 	stw	fp,40(sp)
  802fe0:	df000a04 	addi	fp,sp,40
  802fe4:	e13ffd15 	stw	r4,-12(fp)
  802fe8:	e17ffe15 	stw	r5,-8(fp)
	ClusterChain cache;
	euint32 c=0;
  802fec:	e03ff615 	stw	zero,-40(fp)
	
	if(firstcluster<=1)return(0);
  802ff0:	e0bffe17 	ldw	r2,-8(fp)
  802ff4:	108000a8 	cmpgeui	r2,r2,2
  802ff8:	1000021e 	bne	r2,zero,803004 <fat_countClustersInChain+0x30>
  802ffc:	e03fff15 	stw	zero,-4(fp)
  803000:	00001706 	br	803060 <fat_countClustersInChain+0x8c>
	
	cache.DiscCluster = cache.LogicCluster = cache.LastCluster = cache.Linear = 0;
  803004:	e03ff705 	stb	zero,-36(fp)
  803008:	e03ffb15 	stw	zero,-20(fp)
  80300c:	e0bffb17 	ldw	r2,-20(fp)
  803010:	e0bff815 	stw	r2,-32(fp)
  803014:	e0bff817 	ldw	r2,-32(fp)
  803018:	e0bff915 	stw	r2,-28(fp)
	cache.FirstCluster = firstcluster;
  80301c:	e0bffe17 	ldw	r2,-8(fp)
  803020:	e0bffa15 	stw	r2,-24(fp)
	
	while(!(fat_LogicToDiscCluster(fs,&cache,c++)));
  803024:	e1bff617 	ldw	r6,-40(fp)
  803028:	e0bff617 	ldw	r2,-40(fp)
  80302c:	10800044 	addi	r2,r2,1
  803030:	e0bff615 	stw	r2,-40(fp)
  803034:	e17ff704 	addi	r5,fp,-36
  803038:	e13ffd17 	ldw	r4,-12(fp)
  80303c:	0802b000 	call	802b00 <fat_LogicToDiscCluster>
  803040:	10bfffcc 	andi	r2,r2,65535
  803044:	10a0001c 	xori	r2,r2,32768
  803048:	10a00004 	addi	r2,r2,-32768
  80304c:	1005003a 	cmpeq	r2,r2,zero
  803050:	103ff41e 	bne	r2,zero,803024 <fat_countClustersInChain+0x50>
	
	return(c-1);
  803054:	e0bff617 	ldw	r2,-40(fp)
  803058:	10bfffc4 	addi	r2,r2,-1
  80305c:	e0bfff15 	stw	r2,-4(fp)
  803060:	e0bfff17 	ldw	r2,-4(fp)
}
  803064:	e037883a 	mov	sp,fp
  803068:	dfc00117 	ldw	ra,4(sp)
  80306c:	df000017 	ldw	fp,0(sp)
  803070:	dec00204 	addi	sp,sp,8
  803074:	f800283a 	ret

00803078 <fat_DiscToLogicCluster>:

euint32 fat_DiscToLogicCluster(FileSystem *fs,euint32 firstcluster,euint32 disccluster)
{
  803078:	defff304 	addi	sp,sp,-52
  80307c:	dfc00c15 	stw	ra,48(sp)
  803080:	df000b15 	stw	fp,44(sp)
  803084:	df000b04 	addi	fp,sp,44
  803088:	e13ffd15 	stw	r4,-12(fp)
  80308c:	e17ffe15 	stw	r5,-8(fp)
  803090:	e1bfff15 	stw	r6,-4(fp)
	ClusterChain cache;
	euint32 c=0,r=0;
  803094:	e03ff615 	stw	zero,-40(fp)
  803098:	e03ff515 	stw	zero,-44(fp)
	
	cache.DiscCluster = cache.LogicCluster = cache.LastCluster = cache.Linear = 0;
  80309c:	e03ff705 	stb	zero,-36(fp)
  8030a0:	e03ffb15 	stw	zero,-20(fp)
  8030a4:	e0bffb17 	ldw	r2,-20(fp)
  8030a8:	e0bff815 	stw	r2,-32(fp)
  8030ac:	e0bff817 	ldw	r2,-32(fp)
  8030b0:	e0bff915 	stw	r2,-28(fp)
	cache.FirstCluster = firstcluster;
  8030b4:	e0bffe17 	ldw	r2,-8(fp)
  8030b8:	e0bffa15 	stw	r2,-24(fp)
	
	while(!(fat_LogicToDiscCluster(fs,&cache,c++)) && !r){
  8030bc:	00000506 	br	8030d4 <fat_DiscToLogicCluster+0x5c>
		if(cache.DiscCluster == disccluster){
  8030c0:	e0fff917 	ldw	r3,-28(fp)
  8030c4:	e0bfff17 	ldw	r2,-4(fp)
  8030c8:	1880021e 	bne	r3,r2,8030d4 <fat_DiscToLogicCluster+0x5c>
			r = cache.LogicCluster;
  8030cc:	e0bff817 	ldw	r2,-32(fp)
  8030d0:	e0bff515 	stw	r2,-44(fp)
	euint32 c=0,r=0;
	
	cache.DiscCluster = cache.LogicCluster = cache.LastCluster = cache.Linear = 0;
	cache.FirstCluster = firstcluster;
	
	while(!(fat_LogicToDiscCluster(fs,&cache,c++)) && !r){
  8030d4:	e1bff617 	ldw	r6,-40(fp)
  8030d8:	e0bff617 	ldw	r2,-40(fp)
  8030dc:	10800044 	addi	r2,r2,1
  8030e0:	e0bff615 	stw	r2,-40(fp)
  8030e4:	e17ff704 	addi	r5,fp,-36
  8030e8:	e13ffd17 	ldw	r4,-12(fp)
  8030ec:	0802b000 	call	802b00 <fat_LogicToDiscCluster>
  8030f0:	10bfffcc 	andi	r2,r2,65535
  8030f4:	10a0001c 	xori	r2,r2,32768
  8030f8:	10a00004 	addi	r2,r2,-32768
  8030fc:	1004c03a 	cmpne	r2,r2,zero
  803100:	1000031e 	bne	r2,zero,803110 <fat_DiscToLogicCluster+0x98>
  803104:	e0bff517 	ldw	r2,-44(fp)
  803108:	1005003a 	cmpeq	r2,r2,zero
  80310c:	103fec1e 	bne	r2,zero,8030c0 <fat_DiscToLogicCluster+0x48>
		if(cache.DiscCluster == disccluster){
			r = cache.LogicCluster;
		}
	}
	return(r);
  803110:	e0bff517 	ldw	r2,-44(fp)
}
  803114:	e037883a 	mov	sp,fp
  803118:	dfc00117 	ldw	ra,4(sp)
  80311c:	df000017 	ldw	fp,0(sp)
  803120:	dec00204 	addi	sp,sp,8
  803124:	f800283a 	ret

00803128 <fat_countFreeClusters>:

euint32 fat_countFreeClusters(FileSystem *fs)
{
  803128:	defffb04 	addi	sp,sp,-20
  80312c:	dfc00415 	stw	ra,16(sp)
  803130:	df000315 	stw	fp,12(sp)
  803134:	df000304 	addi	fp,sp,12
  803138:	e13fff15 	stw	r4,-4(fp)
	euint32 c=2,fc=0;
  80313c:	00800084 	movi	r2,2
  803140:	e0bffe15 	stw	r2,-8(fp)
  803144:	e03ffd15 	stw	zero,-12(fp)
	
	while(c<=fs->DataClusterCount+1){
  803148:	00000c06 	br	80317c <fat_countFreeClusters+0x54>
		if(fat_getNextClusterAddress(fs,c,0)==0)fc++;
  80314c:	e13fff17 	ldw	r4,-4(fp)
  803150:	e17ffe17 	ldw	r5,-8(fp)
  803154:	000d883a 	mov	r6,zero
  803158:	0801dcc0 	call	801dcc <fat_getNextClusterAddress>
  80315c:	1004c03a 	cmpne	r2,r2,zero
  803160:	1000031e 	bne	r2,zero,803170 <fat_countFreeClusters+0x48>
  803164:	e0bffd17 	ldw	r2,-12(fp)
  803168:	10800044 	addi	r2,r2,1
  80316c:	e0bffd15 	stw	r2,-12(fp)
		c++;
  803170:	e0bffe17 	ldw	r2,-8(fp)
  803174:	10800044 	addi	r2,r2,1
  803178:	e0bffe15 	stw	r2,-8(fp)

euint32 fat_countFreeClusters(FileSystem *fs)
{
	euint32 c=2,fc=0;
	
	while(c<=fs->DataClusterCount+1){
  80317c:	e0bfff17 	ldw	r2,-4(fp)
  803180:	10800817 	ldw	r2,32(r2)
  803184:	10c00044 	addi	r3,r2,1
  803188:	e0bffe17 	ldw	r2,-8(fp)
  80318c:	18bfef2e 	bgeu	r3,r2,80314c <fat_countFreeClusters+0x24>
		if(fat_getNextClusterAddress(fs,c,0)==0)fc++;
		c++;
	}
	return(fc);
  803190:	e0bffd17 	ldw	r2,-12(fp)
}
  803194:	e037883a 	mov	sp,fp
  803198:	dfc00117 	ldw	ra,4(sp)
  80319c:	df000017 	ldw	fp,0(sp)
  8031a0:	dec00204 	addi	sp,sp,8
  8031a4:	f800283a 	ret

008031a8 <file_fread>:
 * 'offset' and puts the result in '*buf'.
 * Return value: amount of bytes actually read (can differ from the given
 * size when the file was smaller
*/
euint32 file_fread(File *file,euint32 offset, euint32 size,euint8 *buf)
{
  8031a8:	deffed04 	addi	sp,sp,-76
  8031ac:	dfc01215 	stw	ra,72(sp)
  8031b0:	df001115 	stw	fp,68(sp)
  8031b4:	df001104 	addi	fp,sp,68
  8031b8:	e13ff915 	stw	r4,-28(fp)
  8031bc:	e17ffa15 	stw	r5,-24(fp)
  8031c0:	e1bffb15 	stw	r6,-20(fp)
  8031c4:	e1fffc15 	stw	r7,-16(fp)
	euint32 bytes_read=0,size_left=size,coffset=offset;
  8031c8:	e03ff815 	stw	zero,-32(fp)
  8031cc:	e0bffb17 	ldw	r2,-20(fp)
  8031d0:	e0bff715 	stw	r2,-36(fp)
  8031d4:	e0bffa17 	ldw	r2,-24(fp)
  8031d8:	e0bff615 	stw	r2,-40(fp)
	euint32 cclus,csec,cbyte;
	euint32 rclus,rsec;
	euint32 btr;
	euint8 *tbuf;
		
	if(!file_getAttr(file,FILE_STATUS_OPEN))return(0);
  8031dc:	e13ff917 	ldw	r4,-28(fp)
  8031e0:	000b883a 	mov	r5,zero
  8031e4:	08042d00 	call	8042d0 <file_getAttr>
  8031e8:	10803fcc 	andi	r2,r2,255
  8031ec:	1004c03a 	cmpne	r2,r2,zero
  8031f0:	1000021e 	bne	r2,zero,8031fc <file_fread+0x54>
  8031f4:	e03ffd15 	stw	zero,-12(fp)
  8031f8:	00008b06 	br	803428 <file_fread+0x280>
	
	if(offset>=file->FileSize)
  8031fc:	e0bff917 	ldw	r2,-28(fp)
  803200:	10c01317 	ldw	r3,76(r2)
  803204:	e0bffa17 	ldw	r2,-24(fp)
  803208:	10c00136 	bltu	r2,r3,803210 <file_fread+0x68>
		size_left=0; /* Offset check */
  80320c:	e03ff715 	stw	zero,-36(fp)
	
	if( (offset+size > file->FileSize) && size_left!=0)
  803210:	e0fffa17 	ldw	r3,-24(fp)
  803214:	e0bffb17 	ldw	r2,-20(fp)
  803218:	1887883a 	add	r3,r3,r2
  80321c:	e0bff917 	ldw	r2,-28(fp)
  803220:	10801317 	ldw	r2,76(r2)
  803224:	10c07b2e 	bgeu	r2,r3,803414 <file_fread+0x26c>
  803228:	e0bff717 	ldw	r2,-36(fp)
  80322c:	1005003a 	cmpeq	r2,r2,zero
  803230:	1000781e 	bne	r2,zero,803414 <file_fread+0x26c>
		size_left=file->FileSize-offset;
  803234:	e0bff917 	ldw	r2,-28(fp)
  803238:	10c01317 	ldw	r3,76(r2)
  80323c:	e0bffa17 	ldw	r2,-24(fp)
  803240:	1885c83a 	sub	r2,r3,r2
  803244:	e0bff715 	stw	r2,-36(fp)
	
	while(size_left>0){
  803248:	00007206 	br	803414 <file_fread+0x26c>
        //printf("size_left = %d\n", size_left);
	
		cclus = coffset/(512*file->fs->volumeId.SectorsPerCluster);
  80324c:	e0bff917 	ldw	r2,-28(fp)
  803250:	10800a17 	ldw	r2,40(r2)
  803254:	10800183 	ldbu	r2,6(r2)
  803258:	10803fcc 	andi	r2,r2,255
  80325c:	1004927a 	slli	r2,r2,9
  803260:	100b883a 	mov	r5,r2
  803264:	e13ff617 	ldw	r4,-40(fp)
  803268:	080cfd80 	call	80cfd8 <__udivsi3>
  80326c:	e0bff515 	stw	r2,-44(fp)
		csec = (coffset/(512))%file->fs->volumeId.SectorsPerCluster;
  803270:	e0bff617 	ldw	r2,-40(fp)
  803274:	1008d27a 	srli	r4,r2,9
  803278:	e0bff917 	ldw	r2,-28(fp)
  80327c:	10800a17 	ldw	r2,40(r2)
  803280:	10800183 	ldbu	r2,6(r2)
  803284:	11403fcc 	andi	r5,r2,255
  803288:	080cfe00 	call	80cfe0 <__umodsi3>
  80328c:	e0bff415 	stw	r2,-48(fp)
		cbyte = coffset%512;
  803290:	e0bff617 	ldw	r2,-40(fp)
  803294:	10807fcc 	andi	r2,r2,511
  803298:	e0bff315 	stw	r2,-52(fp)
		
		if(cbyte!=0 || size_left<512){
  80329c:	e0bff317 	ldw	r2,-52(fp)
  8032a0:	1004c03a 	cmpne	r2,r2,zero
  8032a4:	1000031e 	bne	r2,zero,8032b4 <file_fread+0x10c>
  8032a8:	e0bff717 	ldw	r2,-36(fp)
  8032ac:	10808028 	cmpgeui	r2,r2,512
  8032b0:	10000f1e 	bne	r2,zero,8032f0 <file_fread+0x148>
			btr = 512-(coffset%512)>=size_left?size_left:512-(coffset%512);
  8032b4:	e0bff617 	ldw	r2,-40(fp)
  8032b8:	10c07fcc 	andi	r3,r2,511
  8032bc:	00808004 	movi	r2,512
  8032c0:	10c5c83a 	sub	r2,r2,r3
  8032c4:	e0fff717 	ldw	r3,-36(fp)
  8032c8:	e0ffff15 	stw	r3,-4(fp)
  8032cc:	e0bffe15 	stw	r2,-8(fp)
  8032d0:	e0bfff17 	ldw	r2,-4(fp)
  8032d4:	e0fffe17 	ldw	r3,-8(fp)
  8032d8:	10c0022e 	bgeu	r2,r3,8032e4 <file_fread+0x13c>
  8032dc:	e0bfff17 	ldw	r2,-4(fp)
  8032e0:	e0bffe15 	stw	r2,-8(fp)
  8032e4:	e0fffe17 	ldw	r3,-8(fp)
  8032e8:	e0fff015 	stw	r3,-64(fp)
	
		cclus = coffset/(512*file->fs->volumeId.SectorsPerCluster);
		csec = (coffset/(512))%file->fs->volumeId.SectorsPerCluster;
		cbyte = coffset%512;
		
		if(cbyte!=0 || size_left<512){
  8032ec:	00000206 	br	8032f8 <file_fread+0x150>
			btr = 512-(coffset%512)>=size_left?size_left:512-(coffset%512);
		}else{
			btr = 512;
  8032f0:	00808004 	movi	r2,512
  8032f4:	e0bff015 	stw	r2,-64(fp)
		}

		if((fat_LogicToDiscCluster(file->fs,&(file->Cache),cclus))!=0){
  8032f8:	e0bff917 	ldw	r2,-28(fp)
  8032fc:	11000a17 	ldw	r4,40(r2)
  803300:	e0bff917 	ldw	r2,-28(fp)
  803304:	11400b04 	addi	r5,r2,44
  803308:	e1bff517 	ldw	r6,-44(fp)
  80330c:	0802b000 	call	802b00 <fat_LogicToDiscCluster>
  803310:	10bfffcc 	andi	r2,r2,65535
  803314:	10a0001c 	xori	r2,r2,32768
  803318:	10a00004 	addi	r2,r2,-32768
  80331c:	1005003a 	cmpeq	r2,r2,zero
  803320:	1000021e 	bne	r2,zero,80332c <file_fread+0x184>
			return(0);
  803324:	e03ffd15 	stw	zero,-12(fp)
  803328:	00003f06 	br	803428 <file_fread+0x280>
		}
		rclus=file->Cache.DiscCluster;
  80332c:	e0bff917 	ldw	r2,-28(fp)
  803330:	10800d17 	ldw	r2,52(r2)
  803334:	e0bff215 	stw	r2,-56(fp)
		rsec=fs_clusterToSector(file->fs,rclus);
  803338:	e0bff917 	ldw	r2,-28(fp)
  80333c:	11000a17 	ldw	r4,40(r2)
  803340:	e17ff217 	ldw	r5,-56(fp)
  803344:	0804b3c0 	call	804b3c <fs_clusterToSector>
  803348:	e0bff115 	stw	r2,-60(fp)
		
		
		if(btr==512){
  80334c:	e0bff017 	ldw	r2,-64(fp)
  803350:	10808018 	cmpnei	r2,r2,512
  803354:	10000b1e 	bne	r2,zero,803384 <file_fread+0x1dc>
			/*part_readBuf(file->fs->part,rsec+csec,buf+bytes_read);*/
			part_directSectorRead(file->fs->part,rsec+csec,buf+bytes_read);
  803358:	e0bff917 	ldw	r2,-28(fp)
  80335c:	10800a17 	ldw	r2,40(r2)
  803360:	11000017 	ldw	r4,0(r2)
  803364:	e0fff117 	ldw	r3,-60(fp)
  803368:	e0bff417 	ldw	r2,-48(fp)
  80336c:	188b883a 	add	r5,r3,r2
  803370:	e0fff817 	ldw	r3,-32(fp)
  803374:	e0bffc17 	ldw	r2,-16(fp)
  803378:	188d883a 	add	r6,r3,r2
  80337c:	08086c80 	call	8086c8 <part_directSectorRead>
  803380:	00001806 	br	8033e4 <file_fread+0x23c>
		}else{
			/*part_readBuf(file->fs->part,rsec+csec,tbuf);*/
			tbuf = part_getSect(file->fs->part,rsec+csec,IOM_MODE_READONLY);
  803384:	e0bff917 	ldw	r2,-28(fp)
  803388:	10800a17 	ldw	r2,40(r2)
  80338c:	11000017 	ldw	r4,0(r2)
  803390:	e0fff117 	ldw	r3,-60(fp)
  803394:	e0bff417 	ldw	r2,-48(fp)
  803398:	188b883a 	add	r5,r3,r2
  80339c:	01800044 	movi	r6,1
  8033a0:	08085980 	call	808598 <part_getSect>
  8033a4:	e0bfef15 	stw	r2,-68(fp)
			memCpy(tbuf+(coffset%512),buf+bytes_read,btr);
  8033a8:	e0bff617 	ldw	r2,-40(fp)
  8033ac:	10807fcc 	andi	r2,r2,511
  8033b0:	1007883a 	mov	r3,r2
  8033b4:	e0bfef17 	ldw	r2,-68(fp)
  8033b8:	1889883a 	add	r4,r3,r2
  8033bc:	e0fff817 	ldw	r3,-32(fp)
  8033c0:	e0bffc17 	ldw	r2,-16(fp)
  8033c4:	188b883a 	add	r5,r3,r2
  8033c8:	e1bff017 	ldw	r6,-64(fp)
  8033cc:	08088380 	call	808838 <memCpy>
			part_relSect(file->fs->part,tbuf);
  8033d0:	e0bff917 	ldw	r2,-28(fp)
  8033d4:	10800a17 	ldw	r2,40(r2)
  8033d8:	11000017 	ldw	r4,0(r2)
  8033dc:	e17fef17 	ldw	r5,-68(fp)
  8033e0:	08085f80 	call	8085f8 <part_relSect>
		}
		
		coffset+=btr;
  8033e4:	e0fff617 	ldw	r3,-40(fp)
  8033e8:	e0bff017 	ldw	r2,-64(fp)
  8033ec:	1885883a 	add	r2,r3,r2
  8033f0:	e0bff615 	stw	r2,-40(fp)
		bytes_read+=btr;
  8033f4:	e0fff817 	ldw	r3,-32(fp)
  8033f8:	e0bff017 	ldw	r2,-64(fp)
  8033fc:	1885883a 	add	r2,r3,r2
  803400:	e0bff815 	stw	r2,-32(fp)
		size_left-=btr;
  803404:	e0fff717 	ldw	r3,-36(fp)
  803408:	e0bff017 	ldw	r2,-64(fp)
  80340c:	1885c83a 	sub	r2,r3,r2
  803410:	e0bff715 	stw	r2,-36(fp)
		size_left=0; /* Offset check */
	
	if( (offset+size > file->FileSize) && size_left!=0)
		size_left=file->FileSize-offset;
	
	while(size_left>0){
  803414:	e0bff717 	ldw	r2,-36(fp)
  803418:	1004c03a 	cmpne	r2,r2,zero
  80341c:	103f8b1e 	bne	r2,zero,80324c <file_fread+0xa4>
		coffset+=btr;
		bytes_read+=btr;
		size_left-=btr;
	}
		
	return(bytes_read);
  803420:	e0bff817 	ldw	r2,-32(fp)
  803424:	e0bffd15 	stw	r2,-12(fp)
  803428:	e0bffd17 	ldw	r2,-12(fp)
}
  80342c:	e037883a 	mov	sp,fp
  803430:	dfc00117 	ldw	ra,4(sp)
  803434:	df000017 	ldw	fp,0(sp)
  803438:	dec00204 	addi	sp,sp,8
  80343c:	f800283a 	ret

00803440 <file_read>:
 * Description: This function reads from a file, taking the FilePtr into account
 * and advancing it according to the freadcall.
 * Return value: Value obtained from fread
*/
euint32 file_read(File *file,euint32 size,euint8 *buf)
{
  803440:	defffa04 	addi	sp,sp,-24
  803444:	dfc00515 	stw	ra,20(sp)
  803448:	df000415 	stw	fp,16(sp)
  80344c:	df000404 	addi	fp,sp,16
  803450:	e13ffd15 	stw	r4,-12(fp)
  803454:	e17ffe15 	stw	r5,-8(fp)
  803458:	e1bfff15 	stw	r6,-4(fp)
	euint32 r;
	
	r=file_fread(file,file->FilePtr,size,buf);
  80345c:	e0bffd17 	ldw	r2,-12(fp)
  803460:	11401217 	ldw	r5,72(r2)
  803464:	e13ffd17 	ldw	r4,-12(fp)
  803468:	e1bffe17 	ldw	r6,-8(fp)
  80346c:	e1ffff17 	ldw	r7,-4(fp)
  803470:	08031a80 	call	8031a8 <file_fread>
  803474:	e0bffc15 	stw	r2,-16(fp)
	file->FilePtr+=r;
  803478:	e0bffd17 	ldw	r2,-12(fp)
  80347c:	10c01217 	ldw	r3,72(r2)
  803480:	e0bffc17 	ldw	r2,-16(fp)
  803484:	1887883a 	add	r3,r3,r2
  803488:	e0bffd17 	ldw	r2,-12(fp)
  80348c:	10c01215 	stw	r3,72(r2)
	return(r);
  803490:	e0bffc17 	ldw	r2,-16(fp)
}
  803494:	e037883a 	mov	sp,fp
  803498:	dfc00117 	ldw	ra,4(sp)
  80349c:	df000017 	ldw	fp,0(sp)
  8034a0:	dec00204 	addi	sp,sp,8
  8034a4:	f800283a 	ret

008034a8 <file_write>:
 * Description: This function writes to a file, taking FilePtr into account
 * and advancing it according to the fwritecall.
 * Return value: Value obtained from fread
*/
euint32 file_write(File *file, euint32 size,euint8 *buf)
{
  8034a8:	defffa04 	addi	sp,sp,-24
  8034ac:	dfc00515 	stw	ra,20(sp)
  8034b0:	df000415 	stw	fp,16(sp)
  8034b4:	df000404 	addi	fp,sp,16
  8034b8:	e13ffd15 	stw	r4,-12(fp)
  8034bc:	e17ffe15 	stw	r5,-8(fp)
  8034c0:	e1bfff15 	stw	r6,-4(fp)
	euint32 r;
	
	r=file_fwrite(file,file->FilePtr,size,buf);
  8034c4:	e0bffd17 	ldw	r2,-12(fp)
  8034c8:	11401217 	ldw	r5,72(r2)
  8034cc:	e13ffd17 	ldw	r4,-12(fp)
  8034d0:	e1bffe17 	ldw	r6,-8(fp)
  8034d4:	e1ffff17 	ldw	r7,-4(fp)
  8034d8:	08035640 	call	803564 <file_fwrite>
  8034dc:	e0bffc15 	stw	r2,-16(fp)
	file->FilePtr+=r;
  8034e0:	e0bffd17 	ldw	r2,-12(fp)
  8034e4:	10c01217 	ldw	r3,72(r2)
  8034e8:	e0bffc17 	ldw	r2,-16(fp)
  8034ec:	1887883a 	add	r3,r3,r2
  8034f0:	e0bffd17 	ldw	r2,-12(fp)
  8034f4:	10c01215 	stw	r3,72(r2)
	return(r);
  8034f8:	e0bffc17 	ldw	r2,-16(fp)
}
  8034fc:	e037883a 	mov	sp,fp
  803500:	dfc00117 	ldw	ra,4(sp)
  803504:	df000017 	ldw	fp,0(sp)
  803508:	dec00204 	addi	sp,sp,8
  80350c:	f800283a 	ret

00803510 <file_setpos>:
 * Description: This function does a sanity check on the requested position
 * and changes the fileptr accordingly.
 * Return value: 0 on success and -1 on failure.
*/
esint16 file_setpos(File *file,euint32 pos)
{
  803510:	defffc04 	addi	sp,sp,-16
  803514:	df000315 	stw	fp,12(sp)
  803518:	df000304 	addi	fp,sp,12
  80351c:	e13ffd15 	stw	r4,-12(fp)
  803520:	e17ffe15 	stw	r5,-8(fp)
	if(pos<=file->FileSize){
  803524:	e0bffd17 	ldw	r2,-12(fp)
  803528:	10c01317 	ldw	r3,76(r2)
  80352c:	e0bffe17 	ldw	r2,-8(fp)
  803530:	18800536 	bltu	r3,r2,803548 <file_setpos+0x38>
		file->FilePtr=pos;
  803534:	e0fffd17 	ldw	r3,-12(fp)
  803538:	e0bffe17 	ldw	r2,-8(fp)
  80353c:	18801215 	stw	r2,72(r3)
		return(0);
  803540:	e03fff15 	stw	zero,-4(fp)
  803544:	00000206 	br	803550 <file_setpos+0x40>
	}
	return(-1);
  803548:	00bfffc4 	movi	r2,-1
  80354c:	e0bfff15 	stw	r2,-4(fp)
  803550:	e0bfff17 	ldw	r2,-4(fp)
}
  803554:	e037883a 	mov	sp,fp
  803558:	df000017 	ldw	fp,0(sp)
  80355c:	dec00104 	addi	sp,sp,4
  803560:	f800283a 	ret

00803564 <file_fwrite>:
 * Description: This function writes to a file, at offset 'offset' and size 'size'.
 * It also updates the FileSize in the object, and discstructure.
 * Return value: Bytes actually written.
*/
euint32 file_fwrite(File* file,euint32 offset,euint32 size,euint8* buf)
{
  803564:	deffec04 	addi	sp,sp,-80
  803568:	dfc01315 	stw	ra,76(sp)
  80356c:	df001215 	stw	fp,72(sp)
  803570:	df001204 	addi	fp,sp,72
  803574:	e13ff915 	stw	r4,-28(fp)
  803578:	e17ffa15 	stw	r5,-24(fp)
  80357c:	e1bffb15 	stw	r6,-20(fp)
  803580:	e1fffc15 	stw	r7,-16(fp)
	euint32 need_cluster;
	euint32 cclus,csec,cbyte;
	euint32 size_left=size,bytes_written=0;
  803584:	e0bffb17 	ldw	r2,-20(fp)
  803588:	e0bff415 	stw	r2,-48(fp)
  80358c:	e03ff315 	stw	zero,-52(fp)
	euint32 rclus,rsec;
	euint32 coffset=offset;
  803590:	e0bffa17 	ldw	r2,-24(fp)
  803594:	e0bff015 	stw	r2,-64(fp)
	euint16 btr;
	euint8 *tbuf;

	if(!file_getAttr(file,FILE_STATUS_OPEN) || !file_getAttr(file,FILE_STATUS_WRITE))return(0);
  803598:	e13ff917 	ldw	r4,-28(fp)
  80359c:	000b883a 	mov	r5,zero
  8035a0:	08042d00 	call	8042d0 <file_getAttr>
  8035a4:	10803fcc 	andi	r2,r2,255
  8035a8:	1005003a 	cmpeq	r2,r2,zero
  8035ac:	1000061e 	bne	r2,zero,8035c8 <file_fwrite+0x64>
  8035b0:	e13ff917 	ldw	r4,-28(fp)
  8035b4:	01400044 	movi	r5,1
  8035b8:	08042d00 	call	8042d0 <file_getAttr>
  8035bc:	10803fcc 	andi	r2,r2,255
  8035c0:	1004c03a 	cmpne	r2,r2,zero
  8035c4:	1000021e 	bne	r2,zero,8035d0 <file_fwrite+0x6c>
  8035c8:	e03ffe15 	stw	zero,-8(fp)
  8035cc:	0000b206 	br	803898 <file_fwrite+0x334>
	
	if(offset>file->FileSize){
  8035d0:	e0bff917 	ldw	r2,-28(fp)
  8035d4:	10c01317 	ldw	r3,76(r2)
  8035d8:	e0bffa17 	ldw	r2,-24(fp)
  8035dc:	1880032e 	bgeu	r3,r2,8035ec <file_fwrite+0x88>
		offset=file->FileSize;
  8035e0:	e0bff917 	ldw	r2,-28(fp)
  8035e4:	10801317 	ldw	r2,76(r2)
  8035e8:	e0bffa15 	stw	r2,-24(fp)
	}
	
	need_cluster = file_requiredCluster(file,offset,size);
  8035ec:	e13ff917 	ldw	r4,-28(fp)
  8035f0:	e17ffa17 	ldw	r5,-24(fp)
  8035f4:	e1bffb17 	ldw	r6,-20(fp)
  8035f8:	08043140 	call	804314 <file_requiredCluster>
  8035fc:	e0bff815 	stw	r2,-32(fp)
	
	if(need_cluster){
  803600:	e0bff817 	ldw	r2,-32(fp)
  803604:	1005003a 	cmpeq	r2,r2,zero
  803608:	10008d1e 	bne	r2,zero,803840 <file_fwrite+0x2dc>
		if(fat_allocClusterChain(file->fs,&(file->Cache),need_cluster+CLUSTER_PREALLOC_FILE)!=0){
  80360c:	e0bff917 	ldw	r2,-28(fp)
  803610:	11000a17 	ldw	r4,40(r2)
  803614:	e0bff917 	ldw	r2,-28(fp)
  803618:	11400b04 	addi	r5,r2,44
  80361c:	e1bff817 	ldw	r6,-32(fp)
  803620:	0802c300 	call	802c30 <fat_allocClusterChain>
  803624:	10bfffcc 	andi	r2,r2,65535
  803628:	10a0001c 	xori	r2,r2,32768
  80362c:	10a00004 	addi	r2,r2,-32768
  803630:	1005003a 	cmpeq	r2,r2,zero
  803634:	1000821e 	bne	r2,zero,803840 <file_fwrite+0x2dc>
			return(0);
  803638:	e03ffe15 	stw	zero,-8(fp)
  80363c:	00009606 	br	803898 <file_fwrite+0x334>
		}
	}
	
	while(size_left>0){
	
		cclus = coffset/(512*file->fs->volumeId.SectorsPerCluster);
  803640:	e0bff917 	ldw	r2,-28(fp)
  803644:	10800a17 	ldw	r2,40(r2)
  803648:	10800183 	ldbu	r2,6(r2)
  80364c:	10803fcc 	andi	r2,r2,255
  803650:	1004927a 	slli	r2,r2,9
  803654:	100b883a 	mov	r5,r2
  803658:	e13ff017 	ldw	r4,-64(fp)
  80365c:	080cfd80 	call	80cfd8 <__udivsi3>
  803660:	e0bff715 	stw	r2,-36(fp)
		csec = (coffset/(512))%file->fs->volumeId.SectorsPerCluster;
  803664:	e0bff017 	ldw	r2,-64(fp)
  803668:	1008d27a 	srli	r4,r2,9
  80366c:	e0bff917 	ldw	r2,-28(fp)
  803670:	10800a17 	ldw	r2,40(r2)
  803674:	10800183 	ldbu	r2,6(r2)
  803678:	11403fcc 	andi	r5,r2,255
  80367c:	080cfe00 	call	80cfe0 <__umodsi3>
  803680:	e0bff615 	stw	r2,-40(fp)
		cbyte = coffset%512;
  803684:	e0bff017 	ldw	r2,-64(fp)
  803688:	10807fcc 	andi	r2,r2,511
  80368c:	e0bff515 	stw	r2,-44(fp)
		
		if(cbyte!=0 || size_left<512){
  803690:	e0bff517 	ldw	r2,-44(fp)
  803694:	1004c03a 	cmpne	r2,r2,zero
  803698:	1000031e 	bne	r2,zero,8036a8 <file_fwrite+0x144>
  80369c:	e0bff417 	ldw	r2,-48(fp)
  8036a0:	10808028 	cmpgeui	r2,r2,512
  8036a4:	10000f1e 	bne	r2,zero,8036e4 <file_fwrite+0x180>
			btr = 512-(coffset%512)>=size_left?size_left:512-(coffset%512);
  8036a8:	e0bff017 	ldw	r2,-64(fp)
  8036ac:	10c07fcc 	andi	r3,r2,511
  8036b0:	00808004 	movi	r2,512
  8036b4:	10c5c83a 	sub	r2,r2,r3
  8036b8:	e0fff417 	ldw	r3,-48(fp)
  8036bc:	e0ffff15 	stw	r3,-4(fp)
  8036c0:	e0bffd15 	stw	r2,-12(fp)
  8036c4:	e0bfff17 	ldw	r2,-4(fp)
  8036c8:	e0fffd17 	ldw	r3,-12(fp)
  8036cc:	10c0022e 	bgeu	r2,r3,8036d8 <file_fwrite+0x174>
  8036d0:	e0bfff17 	ldw	r2,-4(fp)
  8036d4:	e0bffd15 	stw	r2,-12(fp)
  8036d8:	e0fffd17 	ldw	r3,-12(fp)
  8036dc:	e0ffef0d 	sth	r3,-68(fp)
	
		cclus = coffset/(512*file->fs->volumeId.SectorsPerCluster);
		csec = (coffset/(512))%file->fs->volumeId.SectorsPerCluster;
		cbyte = coffset%512;
		
		if(cbyte!=0 || size_left<512){
  8036e0:	00000206 	br	8036ec <file_fwrite+0x188>
			btr = 512-(coffset%512)>=size_left?size_left:512-(coffset%512);
		}else{
			btr = 512;
  8036e4:	00808004 	movi	r2,512
  8036e8:	e0bfef0d 	sth	r2,-68(fp)
		}

		if((fat_LogicToDiscCluster(file->fs,&(file->Cache),cclus))!=0){
  8036ec:	e0bff917 	ldw	r2,-28(fp)
  8036f0:	11000a17 	ldw	r4,40(r2)
  8036f4:	e0bff917 	ldw	r2,-28(fp)
  8036f8:	11400b04 	addi	r5,r2,44
  8036fc:	e1bff717 	ldw	r6,-36(fp)
  803700:	0802b000 	call	802b00 <fat_LogicToDiscCluster>
  803704:	10bfffcc 	andi	r2,r2,65535
  803708:	10a0001c 	xori	r2,r2,32768
  80370c:	10a00004 	addi	r2,r2,-32768
  803710:	1005003a 	cmpeq	r2,r2,zero
  803714:	1000101e 	bne	r2,zero,803758 <file_fwrite+0x1f4>
			file->FileSize+=bytes_written;
  803718:	e0bff917 	ldw	r2,-28(fp)
  80371c:	10c01317 	ldw	r3,76(r2)
  803720:	e0bff317 	ldw	r2,-52(fp)
  803724:	1887883a 	add	r3,r3,r2
  803728:	e0bff917 	ldw	r2,-28(fp)
  80372c:	10c01315 	stw	r3,76(r2)
			dir_setFileSize(file->fs,&(file->Location),file->FileSize);
  803730:	e0bff917 	ldw	r2,-28(fp)
  803734:	11000a17 	ldw	r4,40(r2)
  803738:	e0bff917 	ldw	r2,-28(fp)
  80373c:	11400804 	addi	r5,r2,32
  803740:	e0bff917 	ldw	r2,-28(fp)
  803744:	11801317 	ldw	r6,76(r2)
  803748:	0800e9c0 	call	800e9c <dir_setFileSize>
			return(bytes_written);
  80374c:	e0bff317 	ldw	r2,-52(fp)
  803750:	e0bffe15 	stw	r2,-8(fp)
  803754:	00005006 	br	803898 <file_fwrite+0x334>
		}
		rclus=file->Cache.DiscCluster;
  803758:	e0bff917 	ldw	r2,-28(fp)
  80375c:	10800d17 	ldw	r2,52(r2)
  803760:	e0bff215 	stw	r2,-56(fp)
		rsec=fs_clusterToSector(file->fs,rclus);
  803764:	e0bff917 	ldw	r2,-28(fp)
  803768:	11000a17 	ldw	r4,40(r2)
  80376c:	e17ff217 	ldw	r5,-56(fp)
  803770:	0804b3c0 	call	804b3c <fs_clusterToSector>
  803774:	e0bff115 	stw	r2,-60(fp)
		
		if(btr==512){
  803778:	e0bfef0b 	ldhu	r2,-68(fp)
  80377c:	10808018 	cmpnei	r2,r2,512
  803780:	10000b1e 	bne	r2,zero,8037b0 <file_fwrite+0x24c>
			/*part_writeBuf(file->fs->part,rsec+csec,buf+bytes_written);*/
			part_directSectorWrite(file->fs->part,rsec+csec,buf+bytes_written);
  803784:	e0bff917 	ldw	r2,-28(fp)
  803788:	10800a17 	ldw	r2,40(r2)
  80378c:	11000017 	ldw	r4,0(r2)
  803790:	e0fff117 	ldw	r3,-60(fp)
  803794:	e0bff617 	ldw	r2,-40(fp)
  803798:	188b883a 	add	r5,r3,r2
  80379c:	e0fff317 	ldw	r3,-52(fp)
  8037a0:	e0bffc17 	ldw	r2,-16(fp)
  8037a4:	188d883a 	add	r6,r3,r2
  8037a8:	08087340 	call	808734 <part_directSectorWrite>
  8037ac:	00001806 	br	803810 <file_fwrite+0x2ac>
		}else{
			/*part_readBuf(file->fs->part,rsec+csec,tbuf);*/
			tbuf = part_getSect(file->fs->part,rsec+csec,IOM_MODE_READWRITE);
  8037b0:	e0bff917 	ldw	r2,-28(fp)
  8037b4:	10800a17 	ldw	r2,40(r2)
  8037b8:	11000017 	ldw	r4,0(r2)
  8037bc:	e0fff117 	ldw	r3,-60(fp)
  8037c0:	e0bff617 	ldw	r2,-40(fp)
  8037c4:	188b883a 	add	r5,r3,r2
  8037c8:	01800084 	movi	r6,2
  8037cc:	08085980 	call	808598 <part_getSect>
  8037d0:	e0bfee15 	stw	r2,-72(fp)
			memCpy(buf+bytes_written,tbuf+(coffset%512),btr);
  8037d4:	e0fff317 	ldw	r3,-52(fp)
  8037d8:	e0bffc17 	ldw	r2,-16(fp)
  8037dc:	1889883a 	add	r4,r3,r2
  8037e0:	e0bff017 	ldw	r2,-64(fp)
  8037e4:	10807fcc 	andi	r2,r2,511
  8037e8:	1007883a 	mov	r3,r2
  8037ec:	e0bfee17 	ldw	r2,-72(fp)
  8037f0:	188b883a 	add	r5,r3,r2
  8037f4:	e1bfef0b 	ldhu	r6,-68(fp)
  8037f8:	08088380 	call	808838 <memCpy>
			/*part_writeBuf(file->fs->part,rsec+csec,tbuf);*/
			part_relSect(file->fs->part,tbuf);
  8037fc:	e0bff917 	ldw	r2,-28(fp)
  803800:	10800a17 	ldw	r2,40(r2)
  803804:	11000017 	ldw	r4,0(r2)
  803808:	e17fee17 	ldw	r5,-72(fp)
  80380c:	08085f80 	call	8085f8 <part_relSect>
		}
		
		coffset+=btr;
  803810:	e0ffef0b 	ldhu	r3,-68(fp)
  803814:	e0bff017 	ldw	r2,-64(fp)
  803818:	10c5883a 	add	r2,r2,r3
  80381c:	e0bff015 	stw	r2,-64(fp)
		bytes_written+=btr;
  803820:	e0ffef0b 	ldhu	r3,-68(fp)
  803824:	e0bff317 	ldw	r2,-52(fp)
  803828:	10c5883a 	add	r2,r2,r3
  80382c:	e0bff315 	stw	r2,-52(fp)
		size_left-=btr;
  803830:	e0ffef0b 	ldhu	r3,-68(fp)
  803834:	e0bff417 	ldw	r2,-48(fp)
  803838:	10c5c83a 	sub	r2,r2,r3
  80383c:	e0bff415 	stw	r2,-48(fp)
		if(fat_allocClusterChain(file->fs,&(file->Cache),need_cluster+CLUSTER_PREALLOC_FILE)!=0){
			return(0);
		}
	}
	
	while(size_left>0){
  803840:	e0bff417 	ldw	r2,-48(fp)
  803844:	1004c03a 	cmpne	r2,r2,zero
  803848:	103f7d1e 	bne	r2,zero,803640 <file_fwrite+0xdc>
		coffset+=btr;
		bytes_written+=btr;
		size_left-=btr;
	}
	
	if(bytes_written>file->FileSize-offset){
  80384c:	e0bff917 	ldw	r2,-28(fp)
  803850:	10c01317 	ldw	r3,76(r2)
  803854:	e0bffa17 	ldw	r2,-24(fp)
  803858:	1887c83a 	sub	r3,r3,r2
  80385c:	e0bff317 	ldw	r2,-52(fp)
  803860:	18800b2e 	bgeu	r3,r2,803890 <file_fwrite+0x32c>
		file->FileSize+=bytes_written-(file->FileSize-offset);
  803864:	e0bff917 	ldw	r2,-28(fp)
  803868:	11001317 	ldw	r4,76(r2)
  80386c:	e0bff917 	ldw	r2,-28(fp)
  803870:	10c01317 	ldw	r3,76(r2)
  803874:	e0bffa17 	ldw	r2,-24(fp)
  803878:	1887c83a 	sub	r3,r3,r2
  80387c:	e0bff317 	ldw	r2,-52(fp)
  803880:	10c5c83a 	sub	r2,r2,r3
  803884:	2087883a 	add	r3,r4,r2
  803888:	e0bff917 	ldw	r2,-28(fp)
  80388c:	10c01315 	stw	r3,76(r2)
    }
	
	return(bytes_written);	
  803890:	e0fff317 	ldw	r3,-52(fp)
  803894:	e0fffe15 	stw	r3,-8(fp)
  803898:	e0bffe17 	ldw	r2,-8(fp)
}
  80389c:	e037883a 	mov	sp,fp
  8038a0:	dfc00117 	ldw	ra,4(sp)
  8038a4:	df000017 	ldw	fp,0(sp)
  8038a8:	dec00204 	addi	sp,sp,8
  8038ac:	f800283a 	ret

008038b0 <file_fopen>:
 * Description: This functions opens a file.                               
 * This function is about to be redesigned. No Docs.                       
 * Return value:
*/
esint8 file_fopen(File* file,FileSystem *fs,eint8* filename,eint8 mode)
{
  8038b0:	deffe904 	addi	sp,sp,-92
  8038b4:	dfc01615 	stw	ra,88(sp)
  8038b8:	df001515 	stw	fp,84(sp)
  8038bc:	dc001415 	stw	r16,80(sp)
  8038c0:	df001404 	addi	fp,sp,80
  8038c4:	e13ffa15 	stw	r4,-24(fp)
  8038c8:	e17ffb15 	stw	r5,-20(fp)
  8038cc:	e1bffc15 	stw	r6,-16(fp)
  8038d0:	e1fffd05 	stb	r7,-12(fp)
    FileLocation loc;
    FileRecord wtmp;
    eint8 fatfilename[11];
    euint32 sec;

    dir_getFatFileName(filename,fatfilename);
  8038d4:	e17ff604 	addi	r5,fp,-40
  8038d8:	e13ffc17 	ldw	r4,-16(fp)
  8038dc:	08015e00 	call	8015e0 <dir_getFatFileName>
	
    switch(mode)
  8038e0:	e0bffd07 	ldb	r2,-12(fp)
  8038e4:	e0bfff15 	stw	r2,-4(fp)
  8038e8:	e0ffff17 	ldw	r3,-4(fp)
  8038ec:	18801ca0 	cmpeqi	r2,r3,114
  8038f0:	1000071e 	bne	r2,zero,803910 <file_fopen+0x60>
  8038f4:	e0ffff17 	ldw	r3,-4(fp)
  8038f8:	18801de0 	cmpeqi	r2,r3,119
  8038fc:	1000231e 	bne	r2,zero,80398c <file_fopen+0xdc>
  803900:	e0ffff17 	ldw	r3,-4(fp)
  803904:	18801860 	cmpeqi	r2,r3,97
  803908:	1000781e 	bne	r2,zero,803aec <file_fopen+0x23c>
  80390c:	0000fd06 	br	803d04 <file_fopen+0x454>
	{
        case MODE_READ:
            if(fs_findFile(fs,filename,&loc,0)==1)
  803910:	e13ffb17 	ldw	r4,-20(fp)
  803914:	e17ffc17 	ldw	r5,-16(fp)
  803918:	e1bfec04 	addi	r6,fp,-80
  80391c:	000f883a 	mov	r7,zero
  803920:	0804da80 	call	804da8 <fs_findFile>
  803924:	10803fcc 	andi	r2,r2,255
  803928:	1080201c 	xori	r2,r2,128
  80392c:	10bfe004 	addi	r2,r2,-128
  803930:	10800058 	cmpnei	r2,r2,1
  803934:	1000121e 	bne	r2,zero,803980 <file_fopen+0xd0>
			{
                dir_getFileStructure(fs,&(file->DirEntry), &loc);
  803938:	e17ffa17 	ldw	r5,-24(fp)
  80393c:	e13ffb17 	ldw	r4,-20(fp)
  803940:	e1bfec04 	addi	r6,fp,-80
  803944:	0800c040 	call	800c04 <dir_getFileStructure>
                file_initFile(file,fs,&loc);
  803948:	e13ffa17 	ldw	r4,-24(fp)
  80394c:	e17ffb17 	ldw	r5,-20(fp)
  803950:	e1bfec04 	addi	r6,fp,-80
  803954:	0803e280 	call	803e28 <file_initFile>
				file_setAttr(file,FILE_STATUS_OPEN,1);
  803958:	e13ffa17 	ldw	r4,-24(fp)
  80395c:	000b883a 	mov	r5,zero
  803960:	01800044 	movi	r6,1
  803964:	08042440 	call	804244 <file_setAttr>
				file_setAttr(file,FILE_STATUS_WRITE,0);
  803968:	e13ffa17 	ldw	r4,-24(fp)
  80396c:	01400044 	movi	r5,1
  803970:	000d883a 	mov	r6,zero
  803974:	08042440 	call	804244 <file_setAttr>
                return(0);
  803978:	e03ffe15 	stw	zero,-8(fp)
  80397c:	0000e306 	br	803d0c <file_fopen+0x45c>
            }
            return(-1);
  803980:	00bfffc4 	movi	r2,-1
  803984:	e0bffe15 	stw	r2,-8(fp)
  803988:	0000e006 	br	803d0c <file_fopen+0x45c>
            break;
        case MODE_WRITE:
            if(fs_findFile(fs,filename,&loc,&sec)) /* File may NOT exist, but parent HAS to exist */
  80398c:	e1fff904 	addi	r7,fp,-28
  803990:	e13ffb17 	ldw	r4,-20(fp)
  803994:	e17ffc17 	ldw	r5,-16(fp)
  803998:	e1bfec04 	addi	r6,fp,-80
  80399c:	0804da80 	call	804da8 <fs_findFile>
  8039a0:	10803fcc 	andi	r2,r2,255
  8039a4:	1080201c 	xori	r2,r2,128
  8039a8:	10bfe004 	addi	r2,r2,-128
  8039ac:	1005003a 	cmpeq	r2,r2,zero
  8039b0:	1000031e 	bne	r2,zero,8039c0 <file_fopen+0x110>
			{
                return(-2);
  8039b4:	00ffff84 	movi	r3,-2
  8039b8:	e0fffe15 	stw	r3,-8(fp)
  8039bc:	0000d306 	br	803d0c <file_fopen+0x45c>
			}
			if(sec==0){ /* Parent dir does not exist */
  8039c0:	e0bff917 	ldw	r2,-28(fp)
  8039c4:	1004c03a 	cmpne	r2,r2,zero
  8039c8:	1000031e 	bne	r2,zero,8039d8 <file_fopen+0x128>
 				return(-4);
  8039cc:	00bfff04 	movi	r2,-4
  8039d0:	e0bffe15 	stw	r2,-8(fp)
  8039d4:	0000cd06 	br	803d0c <file_fopen+0x45c>
			}
            if(fs_findFreeFile(fs,filename,&loc,0))
  8039d8:	e13ffb17 	ldw	r4,-20(fp)
  8039dc:	e17ffc17 	ldw	r5,-16(fp)
  8039e0:	e1bfec04 	addi	r6,fp,-80
  8039e4:	000f883a 	mov	r7,zero
  8039e8:	0804fe80 	call	804fe8 <fs_findFreeFile>
  8039ec:	10bfffcc 	andi	r2,r2,65535
  8039f0:	10a0001c 	xori	r2,r2,32768
  8039f4:	10a00004 	addi	r2,r2,-32768
  8039f8:	1005003a 	cmpeq	r2,r2,zero
  8039fc:	1000381e 	bne	r2,zero,803ae0 <file_fopen+0x230>
			{
                dir_createDefaultEntry(fs,&wtmp,fatfilename);
  803a00:	e17fee04 	addi	r5,fp,-72
  803a04:	e1bff604 	addi	r6,fp,-40
  803a08:	e13ffb17 	ldw	r4,-20(fp)
  803a0c:	0800d440 	call	800d44 <dir_createDefaultEntry>
                dir_createDirectoryEntry(fs,&wtmp,&loc);
  803a10:	e17fee04 	addi	r5,fp,-72
  803a14:	e13ffb17 	ldw	r4,-20(fp)
  803a18:	e1bfec04 	addi	r6,fp,-80
  803a1c:	0800cc00 	call	800cc0 <dir_createDirectoryEntry>
                memCpy(&wtmp,&(file->DirEntry),sizeof(wtmp));
  803a20:	e17ffa17 	ldw	r5,-24(fp)
  803a24:	e13fee04 	addi	r4,fp,-72
  803a28:	01800804 	movi	r6,32
  803a2c:	08088380 	call	808838 <memCpy>
				file_initFile(file,fs,&loc);
  803a30:	e13ffa17 	ldw	r4,-24(fp)
  803a34:	e17ffb17 	ldw	r5,-20(fp)
  803a38:	e1bfec04 	addi	r6,fp,-80
  803a3c:	0803e280 	call	803e28 <file_initFile>
                sec=fs_getNextFreeCluster(file->fs,fs_giveFreeClusterHint(file->fs));
  803a40:	e0bffa17 	ldw	r2,-24(fp)
  803a44:	14000a17 	ldw	r16,40(r2)
  803a48:	e0bffa17 	ldw	r2,-24(fp)
  803a4c:	11000a17 	ldw	r4,40(r2)
  803a50:	0804d840 	call	804d84 <fs_giveFreeClusterHint>
  803a54:	100b883a 	mov	r5,r2
  803a58:	8009883a 	mov	r4,r16
  803a5c:	0804d040 	call	804d04 <fs_getNextFreeCluster>
  803a60:	e0bff915 	stw	r2,-28(fp)
                dir_setFirstCluster(file->fs,&(file->Location),sec);
  803a64:	e0bffa17 	ldw	r2,-24(fp)
  803a68:	11000a17 	ldw	r4,40(r2)
  803a6c:	e0bffa17 	ldw	r2,-24(fp)
  803a70:	11400804 	addi	r5,r2,32
  803a74:	e1bff917 	ldw	r6,-28(fp)
  803a78:	0800df40 	call	800df4 <dir_setFirstCluster>
                fs_setFirstClusterInDirEntry(&(file->DirEntry),sec);
  803a7c:	e13ffa17 	ldw	r4,-24(fp)
  803a80:	e17ff917 	ldw	r5,-28(fp)
  803a84:	08052940 	call	805294 <fs_setFirstClusterInDirEntry>
                fs_initClusterChain(fs,&(file->Cache),sec);
  803a88:	e0bffa17 	ldw	r2,-24(fp)
  803a8c:	11400b04 	addi	r5,r2,44
  803a90:	e1bff917 	ldw	r6,-28(fp)
  803a94:	e13ffb17 	ldw	r4,-20(fp)
  803a98:	08052340 	call	805234 <fs_initClusterChain>
                fat_setNextClusterAddress(fs,sec,fat_giveEocMarker(fs));
  803a9c:	e43ff917 	ldw	r16,-28(fp)
  803aa0:	e13ffb17 	ldw	r4,-20(fp)
  803aa4:	080241c0 	call	80241c <fat_giveEocMarker>
  803aa8:	100d883a 	mov	r6,r2
  803aac:	e13ffb17 	ldw	r4,-20(fp)
  803ab0:	800b883a 	mov	r5,r16
  803ab4:	0801ff40 	call	801ff4 <fat_setNextClusterAddress>
				file_setAttr(file,FILE_STATUS_OPEN,1);
  803ab8:	e13ffa17 	ldw	r4,-24(fp)
  803abc:	000b883a 	mov	r5,zero
  803ac0:	01800044 	movi	r6,1
  803ac4:	08042440 	call	804244 <file_setAttr>
				file_setAttr(file,FILE_STATUS_WRITE,1);
  803ac8:	e13ffa17 	ldw	r4,-24(fp)
  803acc:	01400044 	movi	r5,1
  803ad0:	01800044 	movi	r6,1
  803ad4:	08042440 	call	804244 <file_setAttr>
            	return(0);
  803ad8:	e03ffe15 	stw	zero,-8(fp)
  803adc:	00008b06 	br	803d0c <file_fopen+0x45c>
			}
            else
			{
                return(-3);
  803ae0:	00ffff44 	movi	r3,-3
  803ae4:	e0fffe15 	stw	r3,-8(fp)
  803ae8:	00008806 	br	803d0c <file_fopen+0x45c>
			}
            break;
        case MODE_APPEND:
			if(fs_findFile(fs,filename,&loc,0)==1) /* File exists */
  803aec:	e13ffb17 	ldw	r4,-20(fp)
  803af0:	e17ffc17 	ldw	r5,-16(fp)
  803af4:	e1bfec04 	addi	r6,fp,-80
  803af8:	000f883a 	mov	r7,zero
  803afc:	0804da80 	call	804da8 <fs_findFile>
  803b00:	10803fcc 	andi	r2,r2,255
  803b04:	1080201c 	xori	r2,r2,128
  803b08:	10bfe004 	addi	r2,r2,-128
  803b0c:	10800058 	cmpnei	r2,r2,1
  803b10:	1000361e 	bne	r2,zero,803bec <file_fopen+0x33c>
			{
				dir_getFileStructure(fs,&(file->DirEntry), &loc);
  803b14:	e17ffa17 	ldw	r5,-24(fp)
  803b18:	e13ffb17 	ldw	r4,-20(fp)
  803b1c:	e1bfec04 	addi	r6,fp,-80
  803b20:	0800c040 	call	800c04 <dir_getFileStructure>
				file_initFile(file,fs,&loc);
  803b24:	e13ffa17 	ldw	r4,-24(fp)
  803b28:	e17ffb17 	ldw	r5,-20(fp)
  803b2c:	e1bfec04 	addi	r6,fp,-80
  803b30:	0803e280 	call	803e28 <file_initFile>
				if(file->Cache.FirstCluster==0){
  803b34:	e0bffa17 	ldw	r2,-24(fp)
  803b38:	10800e17 	ldw	r2,56(r2)
  803b3c:	1004c03a 	cmpne	r2,r2,zero
  803b40:	10001d1e 	bne	r2,zero,803bb8 <file_fopen+0x308>
					sec=fs_getNextFreeCluster(file->fs,fs_giveFreeClusterHint(file->fs));
  803b44:	e0bffa17 	ldw	r2,-24(fp)
  803b48:	14000a17 	ldw	r16,40(r2)
  803b4c:	e0bffa17 	ldw	r2,-24(fp)
  803b50:	11000a17 	ldw	r4,40(r2)
  803b54:	0804d840 	call	804d84 <fs_giveFreeClusterHint>
  803b58:	100b883a 	mov	r5,r2
  803b5c:	8009883a 	mov	r4,r16
  803b60:	0804d040 	call	804d04 <fs_getNextFreeCluster>
  803b64:	e0bff915 	stw	r2,-28(fp)
					dir_setFirstCluster(file->fs,&(file->Location),sec);
  803b68:	e0bffa17 	ldw	r2,-24(fp)
  803b6c:	11000a17 	ldw	r4,40(r2)
  803b70:	e0bffa17 	ldw	r2,-24(fp)
  803b74:	11400804 	addi	r5,r2,32
  803b78:	e1bff917 	ldw	r6,-28(fp)
  803b7c:	0800df40 	call	800df4 <dir_setFirstCluster>
					fs_setFirstClusterInDirEntry(&(file->DirEntry),sec);
  803b80:	e13ffa17 	ldw	r4,-24(fp)
  803b84:	e17ff917 	ldw	r5,-28(fp)
  803b88:	08052940 	call	805294 <fs_setFirstClusterInDirEntry>
					fat_setNextClusterAddress(fs,sec,fat_giveEocMarker(fs));
  803b8c:	e43ff917 	ldw	r16,-28(fp)
  803b90:	e13ffb17 	ldw	r4,-20(fp)
  803b94:	080241c0 	call	80241c <fat_giveEocMarker>
  803b98:	100d883a 	mov	r6,r2
  803b9c:	e13ffb17 	ldw	r4,-20(fp)
  803ba0:	800b883a 	mov	r5,r16
  803ba4:	0801ff40 	call	801ff4 <fat_setNextClusterAddress>
					file_initFile(file,fs,&loc);
  803ba8:	e13ffa17 	ldw	r4,-24(fp)
  803bac:	e17ffb17 	ldw	r5,-20(fp)
  803bb0:	e1bfec04 	addi	r6,fp,-80
  803bb4:	0803e280 	call	803e28 <file_initFile>
				}
				file_setpos(file,file->FileSize);
  803bb8:	e0bffa17 	ldw	r2,-24(fp)
  803bbc:	11401317 	ldw	r5,76(r2)
  803bc0:	e13ffa17 	ldw	r4,-24(fp)
  803bc4:	08035100 	call	803510 <file_setpos>
				file_setAttr(file,FILE_STATUS_OPEN,1);
  803bc8:	e13ffa17 	ldw	r4,-24(fp)
  803bcc:	000b883a 	mov	r5,zero
  803bd0:	01800044 	movi	r6,1
  803bd4:	08042440 	call	804244 <file_setAttr>
				file_setAttr(file,FILE_STATUS_WRITE,1);
  803bd8:	e13ffa17 	ldw	r4,-24(fp)
  803bdc:	01400044 	movi	r5,1
  803be0:	01800044 	movi	r6,1
  803be4:	08042440 	call	804244 <file_setAttr>
  803be8:	00004406 	br	803cfc <file_fopen+0x44c>
			}
			else /* File does not excist */
			{
				if(fs_findFreeFile(fs,filename,&loc,0))
  803bec:	e13ffb17 	ldw	r4,-20(fp)
  803bf0:	e17ffc17 	ldw	r5,-16(fp)
  803bf4:	e1bfec04 	addi	r6,fp,-80
  803bf8:	000f883a 	mov	r7,zero
  803bfc:	0804fe80 	call	804fe8 <fs_findFreeFile>
  803c00:	10bfffcc 	andi	r2,r2,65535
  803c04:	10a0001c 	xori	r2,r2,32768
  803c08:	10a00004 	addi	r2,r2,-32768
  803c0c:	1005003a 	cmpeq	r2,r2,zero
  803c10:	1000371e 	bne	r2,zero,803cf0 <file_fopen+0x440>
				{
					dir_createDefaultEntry(fs,&wtmp,fatfilename);
  803c14:	e17fee04 	addi	r5,fp,-72
  803c18:	e1bff604 	addi	r6,fp,-40
  803c1c:	e13ffb17 	ldw	r4,-20(fp)
  803c20:	0800d440 	call	800d44 <dir_createDefaultEntry>
					dir_createDirectoryEntry(fs,&wtmp,&loc);
  803c24:	e17fee04 	addi	r5,fp,-72
  803c28:	e13ffb17 	ldw	r4,-20(fp)
  803c2c:	e1bfec04 	addi	r6,fp,-80
  803c30:	0800cc00 	call	800cc0 <dir_createDirectoryEntry>
					memCpy(&wtmp,&(file->DirEntry),sizeof(wtmp));
  803c34:	e17ffa17 	ldw	r5,-24(fp)
  803c38:	e13fee04 	addi	r4,fp,-72
  803c3c:	01800804 	movi	r6,32
  803c40:	08088380 	call	808838 <memCpy>
					file_initFile(file,fs,&loc);
  803c44:	e13ffa17 	ldw	r4,-24(fp)
  803c48:	e17ffb17 	ldw	r5,-20(fp)
  803c4c:	e1bfec04 	addi	r6,fp,-80
  803c50:	0803e280 	call	803e28 <file_initFile>
					sec=fs_getNextFreeCluster(file->fs,fs_giveFreeClusterHint(file->fs));
  803c54:	e0bffa17 	ldw	r2,-24(fp)
  803c58:	14000a17 	ldw	r16,40(r2)
  803c5c:	e0bffa17 	ldw	r2,-24(fp)
  803c60:	11000a17 	ldw	r4,40(r2)
  803c64:	0804d840 	call	804d84 <fs_giveFreeClusterHint>
  803c68:	100b883a 	mov	r5,r2
  803c6c:	8009883a 	mov	r4,r16
  803c70:	0804d040 	call	804d04 <fs_getNextFreeCluster>
  803c74:	e0bff915 	stw	r2,-28(fp)
					dir_setFirstCluster(file->fs,&(file->Location),sec);
  803c78:	e0bffa17 	ldw	r2,-24(fp)
  803c7c:	11000a17 	ldw	r4,40(r2)
  803c80:	e0bffa17 	ldw	r2,-24(fp)
  803c84:	11400804 	addi	r5,r2,32
  803c88:	e1bff917 	ldw	r6,-28(fp)
  803c8c:	0800df40 	call	800df4 <dir_setFirstCluster>
	                fs_setFirstClusterInDirEntry(&(file->DirEntry),sec);
  803c90:	e13ffa17 	ldw	r4,-24(fp)
  803c94:	e17ff917 	ldw	r5,-28(fp)
  803c98:	08052940 	call	805294 <fs_setFirstClusterInDirEntry>
    	            fs_initClusterChain(fs,&(file->Cache),sec);
  803c9c:	e0bffa17 	ldw	r2,-24(fp)
  803ca0:	11400b04 	addi	r5,r2,44
  803ca4:	e1bff917 	ldw	r6,-28(fp)
  803ca8:	e13ffb17 	ldw	r4,-20(fp)
  803cac:	08052340 	call	805234 <fs_initClusterChain>
					fat_setNextClusterAddress(fs,sec,fat_giveEocMarker(fs));
  803cb0:	e43ff917 	ldw	r16,-28(fp)
  803cb4:	e13ffb17 	ldw	r4,-20(fp)
  803cb8:	080241c0 	call	80241c <fat_giveEocMarker>
  803cbc:	100d883a 	mov	r6,r2
  803cc0:	e13ffb17 	ldw	r4,-20(fp)
  803cc4:	800b883a 	mov	r5,r16
  803cc8:	0801ff40 	call	801ff4 <fat_setNextClusterAddress>
					file_setAttr(file,FILE_STATUS_OPEN,1);
  803ccc:	e13ffa17 	ldw	r4,-24(fp)
  803cd0:	000b883a 	mov	r5,zero
  803cd4:	01800044 	movi	r6,1
  803cd8:	08042440 	call	804244 <file_setAttr>
					file_setAttr(file,FILE_STATUS_WRITE,1);
  803cdc:	e13ffa17 	ldw	r4,-24(fp)
  803ce0:	01400044 	movi	r5,1
  803ce4:	01800044 	movi	r6,1
  803ce8:	08042440 	call	804244 <file_setAttr>
  803cec:	00000306 	br	803cfc <file_fopen+0x44c>
				}
				else
				{
					return(-3);
  803cf0:	00bfff44 	movi	r2,-3
  803cf4:	e0bffe15 	stw	r2,-8(fp)
  803cf8:	00000406 	br	803d0c <file_fopen+0x45c>
				}
			}
			return(0);
  803cfc:	e03ffe15 	stw	zero,-8(fp)
  803d00:	00000206 	br	803d0c <file_fopen+0x45c>
            break;
        default:
            return(-4);
  803d04:	00ffff04 	movi	r3,-4
  803d08:	e0fffe15 	stw	r3,-8(fp)
  803d0c:	e0bffe17 	ldw	r2,-8(fp)
            break;
    }
    return(-5);
}
  803d10:	e037883a 	mov	sp,fp
  803d14:	dfc00217 	ldw	ra,8(sp)
  803d18:	df000117 	ldw	fp,4(sp)
  803d1c:	dc000017 	ldw	r16,0(sp)
  803d20:	dec00304 	addi	sp,sp,12
  803d24:	f800283a 	ret

00803d28 <file_fclose>:
 * esint8 file_fclose(File *file)
 * Description: This function closes a file, by clearing the object.
 * Return value: 0 on success.
*/
esint8 file_fclose(File *file)
{
  803d28:	defffd04 	addi	sp,sp,-12
  803d2c:	dfc00215 	stw	ra,8(sp)
  803d30:	df000115 	stw	fp,4(sp)
  803d34:	df000104 	addi	fp,sp,4
  803d38:	e13fff15 	stw	r4,-4(fp)
	if(fs_hasTimeSupport()){
  803d3c:	08093b40 	call	8093b4 <fs_hasTimeSupport>
  803d40:	10803fcc 	andi	r2,r2,255
  803d44:	1005003a 	cmpeq	r2,r2,zero
  803d48:	1000191e 	bne	r2,zero,803db0 <file_fclose+0x88>
		file->DirEntry.AccessDate = time_getDate();
  803d4c:	e0bfff17 	ldw	r2,-4(fp)
  803d50:	1000048d 	sth	zero,18(r2)
		if(file_getAttr(file,FILE_STATUS_WRITE)){
  803d54:	e13fff17 	ldw	r4,-4(fp)
  803d58:	01400044 	movi	r5,1
  803d5c:	08042d00 	call	8042d0 <file_getAttr>
  803d60:	10803fcc 	andi	r2,r2,255
  803d64:	1005003a 	cmpeq	r2,r2,zero
  803d68:	10000a1e 	bne	r2,zero,803d94 <file_fclose+0x6c>
			file->DirEntry.FileSize = file->FileSize;
  803d6c:	e0bfff17 	ldw	r2,-4(fp)
  803d70:	10c01317 	ldw	r3,76(r2)
  803d74:	e0bfff17 	ldw	r2,-4(fp)
  803d78:	10c00715 	stw	r3,28(r2)
			file->DirEntry.WriteDate = file->DirEntry.AccessDate;
  803d7c:	e0bfff17 	ldw	r2,-4(fp)
  803d80:	10c0048b 	ldhu	r3,18(r2)
  803d84:	e0bfff17 	ldw	r2,-4(fp)
  803d88:	10c0060d 	sth	r3,24(r2)
			file->DirEntry.WriteTime = time_getTime();
  803d8c:	e0bfff17 	ldw	r2,-4(fp)
  803d90:	1000058d 	sth	zero,22(r2)
		}
		dir_updateDirectoryEntry(file->fs,&(file->DirEntry),&(file->Location));
  803d94:	e0bfff17 	ldw	r2,-4(fp)
  803d98:	11000a17 	ldw	r4,40(r2)
  803d9c:	e17fff17 	ldw	r5,-4(fp)
  803da0:	e0bfff17 	ldw	r2,-4(fp)
  803da4:	11800804 	addi	r6,r2,32
  803da8:	0800f1c0 	call	800f1c <dir_updateDirectoryEntry>
  803dac:	00000d06 	br	803de4 <file_fclose+0xbc>
	}else{
		if(file_getAttr(file,FILE_STATUS_WRITE)){
  803db0:	e13fff17 	ldw	r4,-4(fp)
  803db4:	01400044 	movi	r5,1
  803db8:	08042d00 	call	8042d0 <file_getAttr>
  803dbc:	10803fcc 	andi	r2,r2,255
  803dc0:	1005003a 	cmpeq	r2,r2,zero
  803dc4:	1000071e 	bne	r2,zero,803de4 <file_fclose+0xbc>
			dir_setFileSize(file->fs,&(file->Location),file->FileSize);
  803dc8:	e0bfff17 	ldw	r2,-4(fp)
  803dcc:	11000a17 	ldw	r4,40(r2)
  803dd0:	e0bfff17 	ldw	r2,-4(fp)
  803dd4:	11400804 	addi	r5,r2,32
  803dd8:	e0bfff17 	ldw	r2,-4(fp)
  803ddc:	11801317 	ldw	r6,76(r2)
  803de0:	0800e9c0 	call	800e9c <dir_setFileSize>
		}
	}
	
	memClr(file,sizeof(*file));
  803de4:	e13fff17 	ldw	r4,-4(fp)
  803de8:	01401404 	movi	r5,80
  803dec:	08088a40 	call	8088a4 <memClr>
	file_setAttr(file,FILE_STATUS_OPEN,0);
  803df0:	e13fff17 	ldw	r4,-4(fp)
  803df4:	000b883a 	mov	r5,zero
  803df8:	000d883a 	mov	r6,zero
  803dfc:	08042440 	call	804244 <file_setAttr>
	file_setAttr(file,FILE_STATUS_WRITE,0);
  803e00:	e13fff17 	ldw	r4,-4(fp)
  803e04:	01400044 	movi	r5,1
  803e08:	000d883a 	mov	r6,zero
  803e0c:	08042440 	call	804244 <file_setAttr>
	return(0);
  803e10:	0005883a 	mov	r2,zero
}
  803e14:	e037883a 	mov	sp,fp
  803e18:	dfc00117 	ldw	ra,4(sp)
  803e1c:	df000017 	ldw	fp,0(sp)
  803e20:	dec00204 	addi	sp,sp,8
  803e24:	f800283a 	ret

00803e28 <file_initFile>:
 * the fs pointer, filesize (note, that DirEntry must already be filled in)
 * and known cache parameters.
 * Return value: void
*/
void file_initFile(File *file, FileSystem *fs, FileLocation *loc)
{
  803e28:	defffc04 	addi	sp,sp,-16
  803e2c:	df000315 	stw	fp,12(sp)
  803e30:	df000304 	addi	fp,sp,12
  803e34:	e13ffd15 	stw	r4,-12(fp)
  803e38:	e17ffe15 	stw	r5,-8(fp)
  803e3c:	e1bfff15 	stw	r6,-4(fp)
	file->fs=fs;
  803e40:	e0fffd17 	ldw	r3,-12(fp)
  803e44:	e0bffe17 	ldw	r2,-8(fp)
  803e48:	18800a15 	stw	r2,40(r3)
	file->FileSize=file->DirEntry.FileSize;
  803e4c:	e0bffd17 	ldw	r2,-12(fp)
  803e50:	10c00717 	ldw	r3,28(r2)
  803e54:	e0bffd17 	ldw	r2,-12(fp)
  803e58:	10c01315 	stw	r3,76(r2)
	file->FilePtr=0;
  803e5c:	e0bffd17 	ldw	r2,-12(fp)
  803e60:	10001215 	stw	zero,72(r2)
	file->Location.Sector=loc->Sector;
  803e64:	e0bfff17 	ldw	r2,-4(fp)
  803e68:	10c00017 	ldw	r3,0(r2)
  803e6c:	e0bffd17 	ldw	r2,-12(fp)
  803e70:	10c00815 	stw	r3,32(r2)
	file->Location.Offset=loc->Offset;
  803e74:	e0bfff17 	ldw	r2,-4(fp)
  803e78:	10c00103 	ldbu	r3,4(r2)
  803e7c:	e0bffd17 	ldw	r2,-12(fp)
  803e80:	10c00905 	stb	r3,36(r2)
	file->Cache.Linear=0;
  803e84:	e0bffd17 	ldw	r2,-12(fp)
  803e88:	10000b05 	stb	zero,44(r2)
	file->Cache.FirstCluster=(((euint32)file->DirEntry.FirstClusterHigh)<<16)+ 
  803e8c:	e0bffd17 	ldw	r2,-12(fp)
  803e90:	1080050b 	ldhu	r2,20(r2)
  803e94:	10bfffcc 	andi	r2,r2,65535
  803e98:	1006943a 	slli	r3,r2,16
  803e9c:	e0bffd17 	ldw	r2,-12(fp)
  803ea0:	1080068b 	ldhu	r2,26(r2)
  803ea4:	10bfffcc 	andi	r2,r2,65535
  803ea8:	1887883a 	add	r3,r3,r2
  803eac:	e0bffd17 	ldw	r2,-12(fp)
  803eb0:	10c00e15 	stw	r3,56(r2)
	                                    file->DirEntry.FirstClusterLow;
	file->Cache.LastCluster=0; 
  803eb4:	e0bffd17 	ldw	r2,-12(fp)
  803eb8:	10000f15 	stw	zero,60(r2)
	file->Cache.LogicCluster=0;
  803ebc:	e0bffd17 	ldw	r2,-12(fp)
  803ec0:	10000c15 	stw	zero,48(r2)
	file->Cache.DiscCluster=file->Cache.FirstCluster;
  803ec4:	e0bffd17 	ldw	r2,-12(fp)
  803ec8:	10c00e17 	ldw	r3,56(r2)
  803ecc:	e0bffd17 	ldw	r2,-12(fp)
  803ed0:	10c00d15 	stw	r3,52(r2)
}
  803ed4:	e037883a 	mov	sp,fp
  803ed8:	df000017 	ldw	fp,0(sp)
  803edc:	dec00104 	addi	sp,sp,4
  803ee0:	f800283a 	ret

00803ee4 <file_normalToFatName>:
 * changed to capital X and only the first 11 characters are used.
 * Furthermore all letters are capitalised.
 * Return value: pointer after the filename
*/
eint8* file_normalToFatName(eint8* filename,eint8* fatfilename)
{
  803ee4:	defff904 	addi	sp,sp,-28
  803ee8:	dfc00615 	stw	ra,24(sp)
  803eec:	df000515 	stw	fp,20(sp)
  803ef0:	dc000415 	stw	r16,16(sp)
  803ef4:	df000404 	addi	fp,sp,16
  803ef8:	e13ffd15 	stw	r4,-12(fp)
  803efc:	e17ffe15 	stw	r5,-8(fp)
	euint8 c,dot=0,vc=0;
  803f00:	e03ffc45 	stb	zero,-15(fp)
  803f04:	e03ffc05 	stb	zero,-16(fp)
	
	for(c=0;c<11;c++)fatfilename[c]=' ';
  803f08:	e03ffc85 	stb	zero,-14(fp)
  803f0c:	00000906 	br	803f34 <file_normalToFatName+0x50>
  803f10:	e0bffc83 	ldbu	r2,-14(fp)
  803f14:	1007883a 	mov	r3,r2
  803f18:	e0bffe17 	ldw	r2,-8(fp)
  803f1c:	1887883a 	add	r3,r3,r2
  803f20:	00800804 	movi	r2,32
  803f24:	18800005 	stb	r2,0(r3)
  803f28:	e0bffc83 	ldbu	r2,-14(fp)
  803f2c:	10800044 	addi	r2,r2,1
  803f30:	e0bffc85 	stb	r2,-14(fp)
  803f34:	e0bffc83 	ldbu	r2,-14(fp)
  803f38:	108002f0 	cmpltui	r2,r2,11
  803f3c:	103ff41e 	bne	r2,zero,803f10 <file_normalToFatName+0x2c>
	
	c=0;
  803f40:	e03ffc85 	stb	zero,-14(fp)
	
	if(*filename == '.'){
  803f44:	e0bffd17 	ldw	r2,-12(fp)
  803f48:	10800003 	ldbu	r2,0(r2)
  803f4c:	10803fcc 	andi	r2,r2,255
  803f50:	1080201c 	xori	r2,r2,128
  803f54:	10bfe004 	addi	r2,r2,-128
  803f58:	10800b98 	cmpnei	r2,r2,46
  803f5c:	1000511e 	bne	r2,zero,8040a4 <file_normalToFatName+0x1c0>
		fatfilename[0]='.';
  803f60:	e0fffe17 	ldw	r3,-8(fp)
  803f64:	00800b84 	movi	r2,46
  803f68:	18800005 	stb	r2,0(r3)
		vc++; 
  803f6c:	e0bffc03 	ldbu	r2,-16(fp)
  803f70:	10800044 	addi	r2,r2,1
  803f74:	e0bffc05 	stb	r2,-16(fp)
		if(*(filename+1) == '.'){
  803f78:	e0bffd17 	ldw	r2,-12(fp)
  803f7c:	10800044 	addi	r2,r2,1
  803f80:	10800003 	ldbu	r2,0(r2)
  803f84:	10803fcc 	andi	r2,r2,255
  803f88:	1080201c 	xori	r2,r2,128
  803f8c:	10bfe004 	addi	r2,r2,-128
  803f90:	10800b98 	cmpnei	r2,r2,46
  803f94:	1000081e 	bne	r2,zero,803fb8 <file_normalToFatName+0xd4>
			fatfilename[1]='.';
  803f98:	e0bffe17 	ldw	r2,-8(fp)
  803f9c:	10c00044 	addi	r3,r2,1
  803fa0:	00800b84 	movi	r2,46
  803fa4:	18800005 	stb	r2,0(r3)
			filename+=2;
  803fa8:	e0bffd17 	ldw	r2,-12(fp)
  803fac:	10800084 	addi	r2,r2,2
  803fb0:	e0bffd15 	stw	r2,-12(fp)
  803fb4:	00005006 	br	8040f8 <file_normalToFatName+0x214>
		}else{
			filename++;
  803fb8:	e0bffd17 	ldw	r2,-12(fp)
  803fbc:	10800044 	addi	r2,r2,1
  803fc0:	e0bffd15 	stw	r2,-12(fp)
  803fc4:	00004c06 	br	8040f8 <file_normalToFatName+0x214>
		}
	}else{
		while(*filename != '\0' && *filename != ' ' && *filename != '/'){
			if(*filename=='.' && !dot){
  803fc8:	e0bffd17 	ldw	r2,-12(fp)
  803fcc:	10800003 	ldbu	r2,0(r2)
  803fd0:	10803fcc 	andi	r2,r2,255
  803fd4:	1080201c 	xori	r2,r2,128
  803fd8:	10bfe004 	addi	r2,r2,-128
  803fdc:	10800b98 	cmpnei	r2,r2,46
  803fe0:	1000081e 	bne	r2,zero,804004 <file_normalToFatName+0x120>
  803fe4:	e0bffc43 	ldbu	r2,-15(fp)
  803fe8:	1004c03a 	cmpne	r2,r2,zero
  803fec:	1000051e 	bne	r2,zero,804004 <file_normalToFatName+0x120>
				dot=1;
  803ff0:	00800044 	movi	r2,1
  803ff4:	e0bffc45 	stb	r2,-15(fp)
				c=8;
  803ff8:	00800204 	movi	r2,8
  803ffc:	e0bffc85 	stb	r2,-14(fp)
		}else{
			filename++;
		}
	}else{
		while(*filename != '\0' && *filename != ' ' && *filename != '/'){
			if(*filename=='.' && !dot){
  804000:	00002506 	br	804098 <file_normalToFatName+0x1b4>
				dot=1;
				c=8;
			}else{
				if(dot){
  804004:	e0bffc43 	ldbu	r2,-15(fp)
  804008:	1005003a 	cmpeq	r2,r2,zero
  80400c:	1000101e 	bne	r2,zero,804050 <file_normalToFatName+0x16c>
					if(c<=10){
  804010:	e0bffc83 	ldbu	r2,-14(fp)
  804014:	108002e8 	cmpgeui	r2,r2,11
  804018:	10001f1e 	bne	r2,zero,804098 <file_normalToFatName+0x1b4>
						fatfilename[c]=file_validateChar(*filename);
  80401c:	e0bffc83 	ldbu	r2,-14(fp)
  804020:	1007883a 	mov	r3,r2
  804024:	e0bffe17 	ldw	r2,-8(fp)
  804028:	18a1883a 	add	r16,r3,r2
  80402c:	e0bffd17 	ldw	r2,-12(fp)
  804030:	10800003 	ldbu	r2,0(r2)
  804034:	11003fcc 	andi	r4,r2,255
  804038:	080415c0 	call	80415c <file_validateChar>
  80403c:	80800005 	stb	r2,0(r16)
						c++; 
  804040:	e0bffc83 	ldbu	r2,-14(fp)
  804044:	10800044 	addi	r2,r2,1
  804048:	e0bffc85 	stb	r2,-14(fp)
  80404c:	00001206 	br	804098 <file_normalToFatName+0x1b4>
					}
				}else{
					if(c<=7){
  804050:	e0bffc83 	ldbu	r2,-14(fp)
  804054:	10800228 	cmpgeui	r2,r2,8
  804058:	10000f1e 	bne	r2,zero,804098 <file_normalToFatName+0x1b4>
						fatfilename[c]=file_validateChar(*filename);
  80405c:	e0bffc83 	ldbu	r2,-14(fp)
  804060:	1007883a 	mov	r3,r2
  804064:	e0bffe17 	ldw	r2,-8(fp)
  804068:	18a1883a 	add	r16,r3,r2
  80406c:	e0bffd17 	ldw	r2,-12(fp)
  804070:	10800003 	ldbu	r2,0(r2)
  804074:	11003fcc 	andi	r4,r2,255
  804078:	080415c0 	call	80415c <file_validateChar>
  80407c:	80800005 	stb	r2,0(r16)
						c++; vc++;
  804080:	e0bffc83 	ldbu	r2,-14(fp)
  804084:	10800044 	addi	r2,r2,1
  804088:	e0bffc85 	stb	r2,-14(fp)
  80408c:	e0bffc03 	ldbu	r2,-16(fp)
  804090:	10800044 	addi	r2,r2,1
  804094:	e0bffc05 	stb	r2,-16(fp)
					}
				}
			}
			filename++;
  804098:	e0bffd17 	ldw	r2,-12(fp)
  80409c:	10800044 	addi	r2,r2,1
  8040a0:	e0bffd15 	stw	r2,-12(fp)
			filename+=2;
		}else{
			filename++;
		}
	}else{
		while(*filename != '\0' && *filename != ' ' && *filename != '/'){
  8040a4:	e0bffd17 	ldw	r2,-12(fp)
  8040a8:	10800003 	ldbu	r2,0(r2)
  8040ac:	10803fcc 	andi	r2,r2,255
  8040b0:	1080201c 	xori	r2,r2,128
  8040b4:	10bfe004 	addi	r2,r2,-128
  8040b8:	1005003a 	cmpeq	r2,r2,zero
  8040bc:	10000e1e 	bne	r2,zero,8040f8 <file_normalToFatName+0x214>
  8040c0:	e0bffd17 	ldw	r2,-12(fp)
  8040c4:	10800003 	ldbu	r2,0(r2)
  8040c8:	10803fcc 	andi	r2,r2,255
  8040cc:	1080201c 	xori	r2,r2,128
  8040d0:	10bfe004 	addi	r2,r2,-128
  8040d4:	10800820 	cmpeqi	r2,r2,32
  8040d8:	1000071e 	bne	r2,zero,8040f8 <file_normalToFatName+0x214>
  8040dc:	e0bffd17 	ldw	r2,-12(fp)
  8040e0:	10800003 	ldbu	r2,0(r2)
  8040e4:	10803fcc 	andi	r2,r2,255
  8040e8:	1080201c 	xori	r2,r2,128
  8040ec:	10bfe004 	addi	r2,r2,-128
  8040f0:	10800bd8 	cmpnei	r2,r2,47
  8040f4:	103fb41e 	bne	r2,zero,803fc8 <file_normalToFatName+0xe4>
			}
			filename++;
		}
	}
	
	if(vc>0){
  8040f8:	e0bffc03 	ldbu	r2,-16(fp)
  8040fc:	1005003a 	cmpeq	r2,r2,zero
  804100:	10000e1e 	bne	r2,zero,80413c <file_normalToFatName+0x258>
		if(*filename=='\0'){
  804104:	e0bffd17 	ldw	r2,-12(fp)
  804108:	10800003 	ldbu	r2,0(r2)
  80410c:	10803fcc 	andi	r2,r2,255
  804110:	1080201c 	xori	r2,r2,128
  804114:	10bfe004 	addi	r2,r2,-128
  804118:	1004c03a 	cmpne	r2,r2,zero
  80411c:	1000031e 	bne	r2,zero,80412c <file_normalToFatName+0x248>
			return(filename);
  804120:	e0bffd17 	ldw	r2,-12(fp)
  804124:	e0bfff15 	stw	r2,-4(fp)
  804128:	00000506 	br	804140 <file_normalToFatName+0x25c>
		}else{
			return(filename+1);
  80412c:	e0bffd17 	ldw	r2,-12(fp)
  804130:	10800044 	addi	r2,r2,1
  804134:	e0bfff15 	stw	r2,-4(fp)
  804138:	00000106 	br	804140 <file_normalToFatName+0x25c>
		}
	}else{
		return(0);
  80413c:	e03fff15 	stw	zero,-4(fp)
  804140:	e0bfff17 	ldw	r2,-4(fp)
	}
}
  804144:	e037883a 	mov	sp,fp
  804148:	dfc00217 	ldw	ra,8(sp)
  80414c:	df000117 	ldw	fp,4(sp)
  804150:	dc000017 	ldw	r16,0(sp)
  804154:	dec00304 	addi	sp,sp,12
  804158:	f800283a 	ret

0080415c <file_validateChar>:
 * uppercase equivalent is returned. The remaining characters are returned    *
 * as they are.      
 * Return value: The validated char
*/
euint8 file_validateChar(euint8 c)
{
  80415c:	defffd04 	addi	sp,sp,-12
  804160:	df000215 	stw	fp,8(sp)
  804164:	df000204 	addi	fp,sp,8
  804168:	e13ffe05 	stb	r4,-8(fp)
    if( (c<0x20) || (c>0x20&&c<0x30&&c!='-') || (c>0x39&&c<0x41) || (c>0x5A&&c<0x61&&c!='_') ||	(c>0x7A&&c!='~') )
  80416c:	e0bffe03 	ldbu	r2,-8(fp)
  804170:	10800830 	cmpltui	r2,r2,32
  804174:	10001e1e 	bne	r2,zero,8041f0 <file_validateChar+0x94>
  804178:	e0bffe03 	ldbu	r2,-8(fp)
  80417c:	10800870 	cmpltui	r2,r2,33
  804180:	1000061e 	bne	r2,zero,80419c <file_validateChar+0x40>
  804184:	e0bffe03 	ldbu	r2,-8(fp)
  804188:	10800c28 	cmpgeui	r2,r2,48
  80418c:	1000031e 	bne	r2,zero,80419c <file_validateChar+0x40>
  804190:	e0bffe03 	ldbu	r2,-8(fp)
  804194:	10800b58 	cmpnei	r2,r2,45
  804198:	1000151e 	bne	r2,zero,8041f0 <file_validateChar+0x94>
  80419c:	e0bffe03 	ldbu	r2,-8(fp)
  8041a0:	10800eb0 	cmpltui	r2,r2,58
  8041a4:	1000031e 	bne	r2,zero,8041b4 <file_validateChar+0x58>
  8041a8:	e0bffe03 	ldbu	r2,-8(fp)
  8041ac:	10801070 	cmpltui	r2,r2,65
  8041b0:	10000f1e 	bne	r2,zero,8041f0 <file_validateChar+0x94>
  8041b4:	e0bffe03 	ldbu	r2,-8(fp)
  8041b8:	108016f0 	cmpltui	r2,r2,91
  8041bc:	1000061e 	bne	r2,zero,8041d8 <file_validateChar+0x7c>
  8041c0:	e0bffe03 	ldbu	r2,-8(fp)
  8041c4:	10801868 	cmpgeui	r2,r2,97
  8041c8:	1000031e 	bne	r2,zero,8041d8 <file_validateChar+0x7c>
  8041cc:	e0bffe03 	ldbu	r2,-8(fp)
  8041d0:	108017d8 	cmpnei	r2,r2,95
  8041d4:	1000061e 	bne	r2,zero,8041f0 <file_validateChar+0x94>
  8041d8:	e0bffe03 	ldbu	r2,-8(fp)
  8041dc:	10801ef0 	cmpltui	r2,r2,123
  8041e0:	1000061e 	bne	r2,zero,8041fc <file_validateChar+0xa0>
  8041e4:	e0bffe03 	ldbu	r2,-8(fp)
  8041e8:	10801fa0 	cmpeqi	r2,r2,126
  8041ec:	1000031e 	bne	r2,zero,8041fc <file_validateChar+0xa0>
		return(0x58);
  8041f0:	00801604 	movi	r2,88
  8041f4:	e0bfff15 	stw	r2,-4(fp)
  8041f8:	00000d06 	br	804230 <file_validateChar+0xd4>
    if( c>=0x61 && c<=0x7A )
  8041fc:	e0bffe03 	ldbu	r2,-8(fp)
  804200:	10801870 	cmpltui	r2,r2,97
  804204:	1000081e 	bne	r2,zero,804228 <file_validateChar+0xcc>
  804208:	e0bffe03 	ldbu	r2,-8(fp)
  80420c:	10801ee8 	cmpgeui	r2,r2,123
  804210:	1000051e 	bne	r2,zero,804228 <file_validateChar+0xcc>
		return(c-32);
  804214:	e0bffe03 	ldbu	r2,-8(fp)
  804218:	10bff804 	addi	r2,r2,-32
  80421c:	10803fcc 	andi	r2,r2,255
  804220:	e0bfff15 	stw	r2,-4(fp)
  804224:	00000206 	br	804230 <file_validateChar+0xd4>

	return(c);
  804228:	e0bffe03 	ldbu	r2,-8(fp)
  80422c:	e0bfff15 	stw	r2,-4(fp)
  804230:	e0bfff17 	ldw	r2,-4(fp)
}
  804234:	e037883a 	mov	sp,fp
  804238:	df000017 	ldw	fp,0(sp)
  80423c:	dec00104 	addi	sp,sp,4
  804240:	f800283a 	ret

00804244 <file_setAttr>:
 * Description: This sets the attribute of 'bufplace' to the given value (binary).
 *
 * Return value: void
*/
void file_setAttr(File* file,euint8 attribute,euint8 val)
{
  804244:	defffc04 	addi	sp,sp,-16
  804248:	df000315 	stw	fp,12(sp)
  80424c:	df000304 	addi	fp,sp,12
  804250:	e13ffd15 	stw	r4,-12(fp)
  804254:	e17ffe05 	stb	r5,-8(fp)
  804258:	e1bfff05 	stb	r6,-4(fp)
	if(val){
  80425c:	e0bfff03 	ldbu	r2,-4(fp)
  804260:	1005003a 	cmpeq	r2,r2,zero
  804264:	10000b1e 	bne	r2,zero,804294 <file_setAttr+0x50>
		file->FileStatus|=1<<attribute;
  804268:	e0bffd17 	ldw	r2,-12(fp)
  80426c:	10801103 	ldbu	r2,68(r2)
  804270:	1009883a 	mov	r4,r2
  804274:	e0fffe03 	ldbu	r3,-8(fp)
  804278:	00800044 	movi	r2,1
  80427c:	10c4983a 	sll	r2,r2,r3
  804280:	2084b03a 	or	r2,r4,r2
  804284:	1007883a 	mov	r3,r2
  804288:	e0bffd17 	ldw	r2,-12(fp)
  80428c:	10c01105 	stb	r3,68(r2)
  804290:	00000b06 	br	8042c0 <file_setAttr+0x7c>
	}else{
		file->FileStatus&=~(1<<attribute);
  804294:	e0bffd17 	ldw	r2,-12(fp)
  804298:	10801103 	ldbu	r2,68(r2)
  80429c:	1009883a 	mov	r4,r2
  8042a0:	e0fffe03 	ldbu	r3,-8(fp)
  8042a4:	00800044 	movi	r2,1
  8042a8:	10c4983a 	sll	r2,r2,r3
  8042ac:	0084303a 	nor	r2,zero,r2
  8042b0:	2084703a 	and	r2,r4,r2
  8042b4:	1007883a 	mov	r3,r2
  8042b8:	e0bffd17 	ldw	r2,-12(fp)
  8042bc:	10c01105 	stb	r3,68(r2)
	}
}
  8042c0:	e037883a 	mov	sp,fp
  8042c4:	df000017 	ldw	fp,0(sp)
  8042c8:	dec00104 	addi	sp,sp,4
  8042cc:	f800283a 	ret

008042d0 <file_getAttr>:
 * It returns nonzero when it attribute is true and 0 when it is false.
 * Please note, I said "nonzero", not 1.
 * Return value: Attribute.
*/
euint8 file_getAttr(File* file,euint8 attribute)
{
  8042d0:	defffd04 	addi	sp,sp,-12
  8042d4:	df000215 	stw	fp,8(sp)
  8042d8:	df000204 	addi	fp,sp,8
  8042dc:	e13ffe15 	stw	r4,-8(fp)
  8042e0:	e17fff05 	stb	r5,-4(fp)
	return(file->FileStatus&(1<<attribute));
  8042e4:	e0bffe17 	ldw	r2,-8(fp)
  8042e8:	10801103 	ldbu	r2,68(r2)
  8042ec:	1009883a 	mov	r4,r2
  8042f0:	e0ffff03 	ldbu	r3,-4(fp)
  8042f4:	00800044 	movi	r2,1
  8042f8:	10c4983a 	sll	r2,r2,r3
  8042fc:	2084703a 	and	r2,r4,r2
  804300:	10803fcc 	andi	r2,r2,255
}
  804304:	e037883a 	mov	sp,fp
  804308:	df000017 	ldw	fp,0(sp)
  80430c:	dec00104 	addi	sp,sp,4
  804310:	f800283a 	ret

00804314 <file_requiredCluster>:
/*****************************************************************************/

euint32 file_requiredCluster(File *file,euint32 offset, euint32 size)
{
  804314:	defff704 	addi	sp,sp,-36
  804318:	dfc00815 	stw	ra,32(sp)
  80431c:	df000715 	stw	fp,28(sp)
  804320:	dc000615 	stw	r16,24(sp)
  804324:	df000604 	addi	fp,sp,24
  804328:	e13ffd15 	stw	r4,-12(fp)
  80432c:	e17ffe15 	stw	r5,-8(fp)
  804330:	e1bfff15 	stw	r6,-4(fp)
	euint32 clusters_required,clustersize;
	euint32 hc;

	if((offset+size)>file->FileSize){
  804334:	e0fffe17 	ldw	r3,-8(fp)
  804338:	e0bfff17 	ldw	r2,-4(fp)
  80433c:	1887883a 	add	r3,r3,r2
  804340:	e0bffd17 	ldw	r2,-12(fp)
  804344:	10801317 	ldw	r2,76(r2)
  804348:	10c03e2e 	bgeu	r2,r3,804444 <file_requiredCluster+0x130>
		if(file->Cache.ClusterCount==0){ /* Number of cluster unknown */
  80434c:	e0bffd17 	ldw	r2,-12(fp)
  804350:	10801017 	ldw	r2,64(r2)
  804354:	1004c03a 	cmpne	r2,r2,zero
  804358:	10000a1e 	bne	r2,zero,804384 <file_requiredCluster+0x70>
			hc = fat_countClustersInChain(file->fs,file->Cache.FirstCluster);
  80435c:	e0bffd17 	ldw	r2,-12(fp)
  804360:	11000a17 	ldw	r4,40(r2)
  804364:	e0bffd17 	ldw	r2,-12(fp)
  804368:	11400e17 	ldw	r5,56(r2)
  80436c:	0802fd40 	call	802fd4 <fat_countClustersInChain>
  804370:	e0bffa15 	stw	r2,-24(fp)
			file->Cache.ClusterCount = hc;
  804374:	e0fffd17 	ldw	r3,-12(fp)
  804378:	e0bffa17 	ldw	r2,-24(fp)
  80437c:	18801015 	stw	r2,64(r3)
  804380:	00000306 	br	804390 <file_requiredCluster+0x7c>
		}else{
			hc = file->Cache.ClusterCount; /* This better be right */
  804384:	e0bffd17 	ldw	r2,-12(fp)
  804388:	10801017 	ldw	r2,64(r2)
  80438c:	e0bffa15 	stw	r2,-24(fp)
		}
		clustersize = file->fs->volumeId.BytesPerSector * file->fs->volumeId.SectorsPerCluster;
  804390:	e0bffd17 	ldw	r2,-12(fp)
  804394:	10800a17 	ldw	r2,40(r2)
  804398:	1080010b 	ldhu	r2,4(r2)
  80439c:	10ffffcc 	andi	r3,r2,65535
  8043a0:	e0bffd17 	ldw	r2,-12(fp)
  8043a4:	10800a17 	ldw	r2,40(r2)
  8043a8:	10800183 	ldbu	r2,6(r2)
  8043ac:	10803fcc 	andi	r2,r2,255
  8043b0:	1885383a 	mul	r2,r3,r2
  8043b4:	e0bffb15 	stw	r2,-20(fp)
		if((size-file->FileSize+offset)>
  8043b8:	e0bffd17 	ldw	r2,-12(fp)
  8043bc:	10c01317 	ldw	r3,76(r2)
  8043c0:	e0bfff17 	ldw	r2,-4(fp)
  8043c4:	10c7c83a 	sub	r3,r2,r3
  8043c8:	e0bffe17 	ldw	r2,-8(fp)
  8043cc:	18a1883a 	add	r16,r3,r2
  8043d0:	e0bffd17 	ldw	r2,-12(fp)
  8043d4:	10c01317 	ldw	r3,76(r2)
  8043d8:	e0bffb17 	ldw	r2,-20(fp)
  8043dc:	1885883a 	add	r2,r3,r2
  8043e0:	113fffc4 	addi	r4,r2,-1
  8043e4:	e17ffb17 	ldw	r5,-20(fp)
  8043e8:	080cfd80 	call	80cfd8 <__udivsi3>
  8043ec:	1007883a 	mov	r3,r2
  8043f0:	e0bffa17 	ldw	r2,-24(fp)
  8043f4:	10c7c83a 	sub	r3,r2,r3
  8043f8:	e0bffb17 	ldw	r2,-20(fp)
  8043fc:	1885383a 	mul	r2,r3,r2
  804400:	14000e2e 	bgeu	r2,r16,80443c <file_requiredCluster+0x128>
		   ((hc-((file->FileSize+clustersize-1)/clustersize))*clustersize)){
			clusters_required = (((offset+size)-(hc*clustersize))+clustersize-1)/clustersize;
  804404:	e0fffe17 	ldw	r3,-8(fp)
  804408:	e0bfff17 	ldw	r2,-4(fp)
  80440c:	1889883a 	add	r4,r3,r2
  804410:	e0fffa17 	ldw	r3,-24(fp)
  804414:	e0bffb17 	ldw	r2,-20(fp)
  804418:	1885383a 	mul	r2,r3,r2
  80441c:	2087c83a 	sub	r3,r4,r2
  804420:	e0bffb17 	ldw	r2,-20(fp)
  804424:	1885883a 	add	r2,r3,r2
  804428:	113fffc4 	addi	r4,r2,-1
  80442c:	e17ffb17 	ldw	r5,-20(fp)
  804430:	080cfd80 	call	80cfd8 <__udivsi3>
  804434:	e0bffc15 	stw	r2,-16(fp)
  804438:	00000306 	br	804448 <file_requiredCluster+0x134>
		}else{
			clusters_required = 0;
  80443c:	e03ffc15 	stw	zero,-16(fp)
  804440:	00000106 	br	804448 <file_requiredCluster+0x134>
		}
	}else{
		clusters_required = 0;
  804444:	e03ffc15 	stw	zero,-16(fp)
	}
	return(clusters_required);
  804448:	e0bffc17 	ldw	r2,-16(fp)
}
  80444c:	e037883a 	mov	sp,fp
  804450:	dfc00217 	ldw	ra,8(sp)
  804454:	df000117 	ldw	fp,4(sp)
  804458:	dc000017 	ldw	r16,0(sp)
  80445c:	dec00304 	addi	sp,sp,12
  804460:	f800283a 	ret

00804464 <fs_initFs>:
 * Description: This functions glues the initialisation of the filesystem together.
 * It loads the volumeID, computes the FS type and searches for the rootsector.
 * Return value: Returns 0 on succes and -1 on error (if magic code is wrong)
*/
eint16 fs_initFs(FileSystem *fs,Partition *part)
{
  804464:	defffb04 	addi	sp,sp,-20
  804468:	dfc00415 	stw	ra,16(sp)
  80446c:	df000315 	stw	fp,12(sp)
  804470:	df000304 	addi	fp,sp,12
  804474:	e13ffd15 	stw	r4,-12(fp)
  804478:	e17ffe15 	stw	r5,-8(fp)
	if(!fs_isValidFat(part)){
  80447c:	e13ffe17 	ldw	r4,-8(fp)
  804480:	08045200 	call	804520 <fs_isValidFat>
  804484:	10bfffcc 	andi	r2,r2,65535
  804488:	10a0001c 	xori	r2,r2,32768
  80448c:	10a00004 	addi	r2,r2,-32768
  804490:	1004c03a 	cmpne	r2,r2,zero
  804494:	1000031e 	bne	r2,zero,8044a4 <fs_initFs+0x40>
		return(-1);
  804498:	00bfffc4 	movi	r2,-1
  80449c:	e0bfff15 	stw	r2,-4(fp)
  8044a0:	00001906 	br	804508 <fs_initFs+0xa4>
	}
	fs->part=part;
  8044a4:	e0fffd17 	ldw	r3,-12(fp)
  8044a8:	e0bffe17 	ldw	r2,-8(fp)
  8044ac:	18800015 	stw	r2,0(r3)
	fs_loadVolumeId(fs,part);
  8044b0:	e13ffd17 	ldw	r4,-12(fp)
  8044b4:	e17ffe17 	ldw	r5,-8(fp)
  8044b8:	08045940 	call	804594 <fs_loadVolumeId>
	if(!fs_verifySanity(fs))return(-2);
  8044bc:	e13ffd17 	ldw	r4,-12(fp)
  8044c0:	08046d00 	call	8046d0 <fs_verifySanity>
  8044c4:	10bfffcc 	andi	r2,r2,65535
  8044c8:	10a0001c 	xori	r2,r2,32768
  8044cc:	10a00004 	addi	r2,r2,-32768
  8044d0:	1004c03a 	cmpne	r2,r2,zero
  8044d4:	1000031e 	bne	r2,zero,8044e4 <fs_initFs+0x80>
  8044d8:	00bfff84 	movi	r2,-2
  8044dc:	e0bfff15 	stw	r2,-4(fp)
  8044e0:	00000906 	br	804508 <fs_initFs+0xa4>
  	fs_countDataSectors(fs);
  8044e4:	e13ffd17 	ldw	r4,-12(fp)
  8044e8:	080486c0 	call	80486c <fs_countDataSectors>
	fs_determineFatType(fs);
  8044ec:	e13ffd17 	ldw	r4,-12(fp)
  8044f0:	08049c40 	call	8049c4 <fs_determineFatType>
	fs_findFirstSectorRootDir(fs);
  8044f4:	e13ffd17 	ldw	r4,-12(fp)
  8044f8:	0804a400 	call	804a40 <fs_findFirstSectorRootDir>
	fs_initCurrentDir(fs); 
  8044fc:	e13ffd17 	ldw	r4,-12(fp)
  804500:	0804b000 	call	804b00 <fs_initCurrentDir>
	return(0);
  804504:	e03fff15 	stw	zero,-4(fp)
  804508:	e0bfff17 	ldw	r2,-4(fp)
}
  80450c:	e037883a 	mov	sp,fp
  804510:	dfc00117 	ldw	ra,4(sp)
  804514:	df000017 	ldw	fp,0(sp)
  804518:	dec00204 	addi	sp,sp,8
  80451c:	f800283a 	ret

00804520 <fs_isValidFat>:
 * Description: This functions loads the volumeID and checks if the magic
 * value is present.
 * Return value: returns 0 when magic code is missing, 1 if it is there.
*/
eint16 fs_isValidFat(Partition *part)
{
  804520:	defffb04 	addi	sp,sp,-20
  804524:	dfc00415 	stw	ra,16(sp)
  804528:	df000315 	stw	fp,12(sp)
  80452c:	df000304 	addi	fp,sp,12
  804530:	e13ffe15 	stw	r4,-8(fp)
	euint8 *buf;
	
	buf=part_getSect(part,0,IOM_MODE_READONLY|IOM_MODE_EXP_REQ); /* Load Volume label */
  804534:	e13ffe17 	ldw	r4,-8(fp)
  804538:	000b883a 	mov	r5,zero
  80453c:	01800144 	movi	r6,5
  804540:	08085980 	call	808598 <part_getSect>
  804544:	e0bffd15 	stw	r2,-12(fp)
	if( ex_getb16(buf,0x1FE) != 0xAA55 ){
  804548:	e13ffd17 	ldw	r4,-12(fp)
  80454c:	01407f84 	movi	r5,510
  804550:	08019500 	call	801950 <ex_getb16>
  804554:	10ffffcc 	andi	r3,r2,65535
  804558:	00aa9554 	movui	r2,43605
  80455c:	18800226 	beq	r3,r2,804568 <fs_isValidFat+0x48>
		return (0);
  804560:	e03fff15 	stw	zero,-4(fp)
  804564:	00000506 	br	80457c <fs_isValidFat+0x5c>
	}
	part_relSect(part,buf);
  804568:	e13ffe17 	ldw	r4,-8(fp)
  80456c:	e17ffd17 	ldw	r5,-12(fp)
  804570:	08085f80 	call	8085f8 <part_relSect>
	return(1);
  804574:	00800044 	movi	r2,1
  804578:	e0bfff15 	stw	r2,-4(fp)
  80457c:	e0bfff17 	ldw	r2,-4(fp)
}
  804580:	e037883a 	mov	sp,fp
  804584:	dfc00117 	ldw	ra,4(sp)
  804588:	df000017 	ldw	fp,0(sp)
  80458c:	dec00204 	addi	sp,sp,8
  804590:	f800283a 	ret

00804594 <fs_loadVolumeId>:
/* ****************************************************************************  
 * void fs_loadVolumeId(FileSystem *fs, Partition *part)
 * Description: This function loads all relevant fields from the volumeid.
*/
void fs_loadVolumeId(FileSystem *fs, Partition *part)
{
  804594:	defffb04 	addi	sp,sp,-20
  804598:	dfc00415 	stw	ra,16(sp)
  80459c:	df000315 	stw	fp,12(sp)
  8045a0:	df000304 	addi	fp,sp,12
  8045a4:	e13ffe15 	stw	r4,-8(fp)
  8045a8:	e17fff15 	stw	r5,-4(fp)
	euint8 *buf;
	
	buf=part_getSect(part,0,IOM_MODE_READONLY|IOM_MODE_EXP_REQ);
  8045ac:	e13fff17 	ldw	r4,-4(fp)
  8045b0:	000b883a 	mov	r5,zero
  8045b4:	01800144 	movi	r6,5
  8045b8:	08085980 	call	808598 <part_getSect>
  8045bc:	e0bffd15 	stw	r2,-12(fp)
	
	fs->volumeId.BytesPerSector=ex_getb16(buf,0x0B);
  8045c0:	e13ffd17 	ldw	r4,-12(fp)
  8045c4:	014002c4 	movi	r5,11
  8045c8:	08019500 	call	801950 <ex_getb16>
  8045cc:	1007883a 	mov	r3,r2
  8045d0:	e0bffe17 	ldw	r2,-8(fp)
  8045d4:	10c0010d 	sth	r3,4(r2)
	fs->volumeId.SectorsPerCluster=*((eint8*)(buf+0x0D));
  8045d8:	e0bffd17 	ldw	r2,-12(fp)
  8045dc:	10800344 	addi	r2,r2,13
  8045e0:	10800003 	ldbu	r2,0(r2)
  8045e4:	1007883a 	mov	r3,r2
  8045e8:	e0bffe17 	ldw	r2,-8(fp)
  8045ec:	10c00185 	stb	r3,6(r2)
	fs->volumeId.ReservedSectorCount=ex_getb16(buf,0x0E);
  8045f0:	e13ffd17 	ldw	r4,-12(fp)
  8045f4:	01400384 	movi	r5,14
  8045f8:	08019500 	call	801950 <ex_getb16>
  8045fc:	1007883a 	mov	r3,r2
  804600:	e0bffe17 	ldw	r2,-8(fp)
  804604:	10c0020d 	sth	r3,8(r2)
	fs->volumeId.NumberOfFats=*((eint8*)(buf+0x10));
  804608:	e0bffd17 	ldw	r2,-12(fp)
  80460c:	10800404 	addi	r2,r2,16
  804610:	10800003 	ldbu	r2,0(r2)
  804614:	1007883a 	mov	r3,r2
  804618:	e0bffe17 	ldw	r2,-8(fp)
  80461c:	10c00285 	stb	r3,10(r2)
	fs->volumeId.RootEntryCount=ex_getb16(buf,0x11);
  804620:	e13ffd17 	ldw	r4,-12(fp)
  804624:	01400444 	movi	r5,17
  804628:	08019500 	call	801950 <ex_getb16>
  80462c:	1007883a 	mov	r3,r2
  804630:	e0bffe17 	ldw	r2,-8(fp)
  804634:	10c0030d 	sth	r3,12(r2)
	fs->volumeId.SectorCount16=ex_getb16(buf,0x13);
  804638:	e13ffd17 	ldw	r4,-12(fp)
  80463c:	014004c4 	movi	r5,19
  804640:	08019500 	call	801950 <ex_getb16>
  804644:	1007883a 	mov	r3,r2
  804648:	e0bffe17 	ldw	r2,-8(fp)
  80464c:	10c0038d 	sth	r3,14(r2)
	fs->volumeId.FatSectorCount16=ex_getb16(buf,0x16);
  804650:	e13ffd17 	ldw	r4,-12(fp)
  804654:	01400584 	movi	r5,22
  804658:	08019500 	call	801950 <ex_getb16>
  80465c:	1007883a 	mov	r3,r2
  804660:	e0bffe17 	ldw	r2,-8(fp)
  804664:	10c0040d 	sth	r3,16(r2)
	fs->volumeId.SectorCount32=ex_getb32(buf,0x20);
  804668:	e13ffd17 	ldw	r4,-12(fp)
  80466c:	01400804 	movi	r5,32
  804670:	08019b00 	call	8019b0 <ex_getb32>
  804674:	1007883a 	mov	r3,r2
  804678:	e0bffe17 	ldw	r2,-8(fp)
  80467c:	10c00515 	stw	r3,20(r2)
	fs->volumeId.FatSectorCount32=ex_getb32(buf,0x24);
  804680:	e13ffd17 	ldw	r4,-12(fp)
  804684:	01400904 	movi	r5,36
  804688:	08019b00 	call	8019b0 <ex_getb32>
  80468c:	1007883a 	mov	r3,r2
  804690:	e0bffe17 	ldw	r2,-8(fp)
  804694:	10c00615 	stw	r3,24(r2)
	fs->volumeId.RootCluster=ex_getb32(buf,0x2C);
  804698:	e13ffd17 	ldw	r4,-12(fp)
  80469c:	01400b04 	movi	r5,44
  8046a0:	08019b00 	call	8019b0 <ex_getb32>
  8046a4:	1007883a 	mov	r3,r2
  8046a8:	e0bffe17 	ldw	r2,-8(fp)
  8046ac:	10c00715 	stw	r3,28(r2)
	
	part_relSect(part,buf);
  8046b0:	e13fff17 	ldw	r4,-4(fp)
  8046b4:	e17ffd17 	ldw	r5,-12(fp)
  8046b8:	08085f80 	call	8085f8 <part_relSect>
	
}
  8046bc:	e037883a 	mov	sp,fp
  8046c0:	dfc00117 	ldw	ra,4(sp)
  8046c4:	df000017 	ldw	fp,0(sp)
  8046c8:	dec00204 	addi	sp,sp,8
  8046cc:	f800283a 	ret

008046d0 <fs_verifySanity>:
 * esint16 fs_verifySanity(FileSystem *fs)
 * Description: Does some sanity calculations.
 * Return value: 1 on success, 0 when discrepancies were found.
*/
esint16 fs_verifySanity(FileSystem *fs)
{
  8046d0:	defffd04 	addi	sp,sp,-12
  8046d4:	df000215 	stw	fp,8(sp)
  8046d8:	df000204 	addi	fp,sp,8
  8046dc:	e13fff15 	stw	r4,-4(fp)
	esint16 sane=1; /* Sane until proven otherwise */
  8046e0:	00800044 	movi	r2,1
  8046e4:	e0bffe0d 	sth	r2,-8(fp)
	/* First check, BPS, we only support 512 */
	if(fs->volumeId.BytesPerSector!=512)sane=0;
  8046e8:	e0bfff17 	ldw	r2,-4(fp)
  8046ec:	1080010b 	ldhu	r2,4(r2)
  8046f0:	10bfffcc 	andi	r2,r2,65535
  8046f4:	10808020 	cmpeqi	r2,r2,512
  8046f8:	1000011e 	bne	r2,zero,804700 <fs_verifySanity+0x30>
  8046fc:	e03ffe0d 	sth	zero,-8(fp)
	/* Check is SPC is valid (multiple of 2, and clustersize >=32KB */
	if(!((fs->volumeId.SectorsPerCluster == 1 ) |
  804700:	e0bfff17 	ldw	r2,-4(fp)
  804704:	10800183 	ldbu	r2,6(r2)
  804708:	10803fcc 	andi	r2,r2,255
  80470c:	10800060 	cmpeqi	r2,r2,1
  804710:	1007883a 	mov	r3,r2
  804714:	e0bfff17 	ldw	r2,-4(fp)
  804718:	10800183 	ldbu	r2,6(r2)
  80471c:	10803fcc 	andi	r2,r2,255
  804720:	108000a0 	cmpeqi	r2,r2,2
  804724:	1884b03a 	or	r2,r3,r2
  804728:	10c03fcc 	andi	r3,r2,255
  80472c:	e0bfff17 	ldw	r2,-4(fp)
  804730:	10800183 	ldbu	r2,6(r2)
  804734:	10803fcc 	andi	r2,r2,255
  804738:	10800120 	cmpeqi	r2,r2,4
  80473c:	1886b03a 	or	r3,r3,r2
  804740:	e0bfff17 	ldw	r2,-4(fp)
  804744:	10800183 	ldbu	r2,6(r2)
  804748:	10803fcc 	andi	r2,r2,255
  80474c:	10800220 	cmpeqi	r2,r2,8
  804750:	1886b03a 	or	r3,r3,r2
  804754:	e0bfff17 	ldw	r2,-4(fp)
  804758:	10800183 	ldbu	r2,6(r2)
  80475c:	10803fcc 	andi	r2,r2,255
  804760:	10800420 	cmpeqi	r2,r2,16
  804764:	1886b03a 	or	r3,r3,r2
  804768:	e0bfff17 	ldw	r2,-4(fp)
  80476c:	10800183 	ldbu	r2,6(r2)
  804770:	10803fcc 	andi	r2,r2,255
  804774:	10800820 	cmpeqi	r2,r2,32
  804778:	1886b03a 	or	r3,r3,r2
  80477c:	e0bfff17 	ldw	r2,-4(fp)
  804780:	10800183 	ldbu	r2,6(r2)
  804784:	10803fcc 	andi	r2,r2,255
  804788:	10801020 	cmpeqi	r2,r2,64
  80478c:	1884b03a 	or	r2,r3,r2
  804790:	1004c03a 	cmpne	r2,r2,zero
  804794:	1000011e 	bne	r2,zero,80479c <fs_verifySanity+0xcc>
	     (fs->volumeId.SectorsPerCluster == 2 ) |
	     (fs->volumeId.SectorsPerCluster == 4 ) |
	     (fs->volumeId.SectorsPerCluster == 8 ) |
	     (fs->volumeId.SectorsPerCluster == 16) |
	     (fs->volumeId.SectorsPerCluster == 32) |
	     (fs->volumeId.SectorsPerCluster == 64) ))sane=0;
  804798:	e03ffe0d 	sth	zero,-8(fp)
	/* Any number of FAT's should be supported... (untested) */
	/* There should be at least 1 reserved sector */
	if(fs->volumeId.ReservedSectorCount==0)sane=0;
  80479c:	e0bfff17 	ldw	r2,-4(fp)
  8047a0:	1080020b 	ldhu	r2,8(r2)
  8047a4:	10bfffcc 	andi	r2,r2,65535
  8047a8:	1004c03a 	cmpne	r2,r2,zero
  8047ac:	1000011e 	bne	r2,zero,8047b4 <fs_verifySanity+0xe4>
  8047b0:	e03ffe0d 	sth	zero,-8(fp)
	if(fs->volumeId.FatSectorCount16 != 0){
  8047b4:	e0bfff17 	ldw	r2,-4(fp)
  8047b8:	1080040b 	ldhu	r2,16(r2)
  8047bc:	10bfffcc 	andi	r2,r2,65535
  8047c0:	1005003a 	cmpeq	r2,r2,zero
  8047c4:	1000131e 	bne	r2,zero,804814 <fs_verifySanity+0x144>
		if(fs->volumeId.FatSectorCount16 > fs->part->disc->partitions[fs->part->activePartition].numSectors)sane=0;
  8047c8:	e0bfff17 	ldw	r2,-4(fp)
  8047cc:	1080040b 	ldhu	r2,16(r2)
  8047d0:	113fffcc 	andi	r4,r2,65535
  8047d4:	e0bfff17 	ldw	r2,-4(fp)
  8047d8:	10800017 	ldw	r2,0(r2)
  8047dc:	10c00017 	ldw	r3,0(r2)
  8047e0:	e0bfff17 	ldw	r2,-4(fp)
  8047e4:	10800017 	ldw	r2,0(r2)
  8047e8:	10800103 	ldbu	r2,4(r2)
  8047ec:	10803fcc 	andi	r2,r2,255
  8047f0:	1080201c 	xori	r2,r2,128
  8047f4:	10bfe004 	addi	r2,r2,-128
  8047f8:	1004913a 	slli	r2,r2,4
  8047fc:	10c5883a 	add	r2,r2,r3
  804800:	10800504 	addi	r2,r2,20
  804804:	10800017 	ldw	r2,0(r2)
  804808:	1100132e 	bgeu	r2,r4,804858 <fs_verifySanity+0x188>
  80480c:	e03ffe0d 	sth	zero,-8(fp)
  804810:	00001106 	br	804858 <fs_verifySanity+0x188>
	}else{
        if(fs->volumeId.FatSectorCount32 > fs->part->disc->partitions[fs->part->activePartition].numSectors)sane=0;
  804814:	e0bfff17 	ldw	r2,-4(fp)
  804818:	11000617 	ldw	r4,24(r2)
  80481c:	e0bfff17 	ldw	r2,-4(fp)
  804820:	10800017 	ldw	r2,0(r2)
  804824:	10c00017 	ldw	r3,0(r2)
  804828:	e0bfff17 	ldw	r2,-4(fp)
  80482c:	10800017 	ldw	r2,0(r2)
  804830:	10800103 	ldbu	r2,4(r2)
  804834:	10803fcc 	andi	r2,r2,255
  804838:	1080201c 	xori	r2,r2,128
  80483c:	10bfe004 	addi	r2,r2,-128
  804840:	1004913a 	slli	r2,r2,4
  804844:	10c5883a 	add	r2,r2,r3
  804848:	10800504 	addi	r2,r2,20
  80484c:	10800017 	ldw	r2,0(r2)
  804850:	1100012e 	bgeu	r2,r4,804858 <fs_verifySanity+0x188>
  804854:	e03ffe0d 	sth	zero,-8(fp)
	}
	return(sane);
  804858:	e0bffe0f 	ldh	r2,-8(fp)
}
  80485c:	e037883a 	mov	sp,fp
  804860:	df000017 	ldw	fp,0(sp)
  804864:	dec00104 	addi	sp,sp,4
  804868:	f800283a 	ret

0080486c <fs_countDataSectors>:
 * void fs_countDataSectors(FileSystem *fs)
 * Description: This functions calculates the sectorcounts, fatsectorcounts and
 * dataclustercounts. It fills in the general fields.
*/
void fs_countDataSectors(FileSystem *fs)
{
  80486c:	defffb04 	addi	sp,sp,-20
  804870:	dfc00415 	stw	ra,16(sp)
  804874:	df000315 	stw	fp,12(sp)
  804878:	df000304 	addi	fp,sp,12
  80487c:	e13fff15 	stw	r4,-4(fp)
  euint32 rootDirSectors,dataSectorCount;

  rootDirSectors=((fs->volumeId.RootEntryCount*32) +
  804880:	e0bfff17 	ldw	r2,-4(fp)
  804884:	1080030b 	ldhu	r2,12(r2)
  804888:	10bfffcc 	andi	r2,r2,65535
  80488c:	1006917a 	slli	r3,r2,5
  804890:	e0bfff17 	ldw	r2,-4(fp)
  804894:	1080010b 	ldhu	r2,4(r2)
  804898:	10bfffcc 	andi	r2,r2,65535
  80489c:	1885883a 	add	r2,r3,r2
  8048a0:	113fffc4 	addi	r4,r2,-1
  8048a4:	e0bfff17 	ldw	r2,-4(fp)
  8048a8:	1080010b 	ldhu	r2,4(r2)
  8048ac:	117fffcc 	andi	r5,r2,65535
  8048b0:	080cf180 	call	80cf18 <__divsi3>
  8048b4:	e0bffe15 	stw	r2,-8(fp)
                 (fs->volumeId.BytesPerSector - 1)) /
                 fs->volumeId.BytesPerSector;

  if(fs->volumeId.FatSectorCount16 != 0)
  8048b8:	e0bfff17 	ldw	r2,-4(fp)
  8048bc:	1080040b 	ldhu	r2,16(r2)
  8048c0:	10bfffcc 	andi	r2,r2,65535
  8048c4:	1005003a 	cmpeq	r2,r2,zero
  8048c8:	1000081e 	bne	r2,zero,8048ec <fs_countDataSectors+0x80>
  {
    fs->FatSectorCount=fs->volumeId.FatSectorCount16;
  8048cc:	e0bfff17 	ldw	r2,-4(fp)
  8048d0:	1080040b 	ldhu	r2,16(r2)
  8048d4:	10ffffcc 	andi	r3,r2,65535
  8048d8:	e0bfff17 	ldw	r2,-4(fp)
  8048dc:	10c00915 	stw	r3,36(r2)
    fs->volumeId.FatSectorCount32=0;
  8048e0:	e0bfff17 	ldw	r2,-4(fp)
  8048e4:	10000615 	stw	zero,24(r2)
  8048e8:	00000606 	br	804904 <fs_countDataSectors+0x98>
  }
  else
  {
    fs->FatSectorCount=fs->volumeId.FatSectorCount32;
  8048ec:	e0bfff17 	ldw	r2,-4(fp)
  8048f0:	10c00617 	ldw	r3,24(r2)
  8048f4:	e0bfff17 	ldw	r2,-4(fp)
  8048f8:	10c00915 	stw	r3,36(r2)
    fs->volumeId.FatSectorCount16=0;
  8048fc:	e0bfff17 	ldw	r2,-4(fp)
  804900:	1000040d 	sth	zero,16(r2)
  }

  if(fs->volumeId.SectorCount16!=0)
  804904:	e0bfff17 	ldw	r2,-4(fp)
  804908:	1080038b 	ldhu	r2,14(r2)
  80490c:	10bfffcc 	andi	r2,r2,65535
  804910:	1005003a 	cmpeq	r2,r2,zero
  804914:	1000081e 	bne	r2,zero,804938 <fs_countDataSectors+0xcc>
  {
    fs->SectorCount=fs->volumeId.SectorCount16;
  804918:	e0bfff17 	ldw	r2,-4(fp)
  80491c:	1080038b 	ldhu	r2,14(r2)
  804920:	10ffffcc 	andi	r3,r2,65535
  804924:	e0bfff17 	ldw	r2,-4(fp)
  804928:	10c00a15 	stw	r3,40(r2)
    fs->volumeId.SectorCount32=0;
  80492c:	e0bfff17 	ldw	r2,-4(fp)
  804930:	10000515 	stw	zero,20(r2)
  804934:	00000606 	br	804950 <fs_countDataSectors+0xe4>
  }
  else
  {
    fs->SectorCount=fs->volumeId.SectorCount32;
  804938:	e0bfff17 	ldw	r2,-4(fp)
  80493c:	10c00517 	ldw	r3,20(r2)
  804940:	e0bfff17 	ldw	r2,-4(fp)
  804944:	10c00a15 	stw	r3,40(r2)
    fs->volumeId.SectorCount16=0;
  804948:	e0bfff17 	ldw	r2,-4(fp)
  80494c:	1000038d 	sth	zero,14(r2)
  }

  dataSectorCount=fs->SectorCount - (
  804950:	e0bfff17 	ldw	r2,-4(fp)
  804954:	11400a17 	ldw	r5,40(r2)
  804958:	e0bfff17 	ldw	r2,-4(fp)
  80495c:	1080020b 	ldhu	r2,8(r2)
  804960:	113fffcc 	andi	r4,r2,65535
  804964:	e0bfff17 	ldw	r2,-4(fp)
  804968:	10800283 	ldbu	r2,10(r2)
  80496c:	10c03fcc 	andi	r3,r2,255
  804970:	e0bfff17 	ldw	r2,-4(fp)
  804974:	10800917 	ldw	r2,36(r2)
  804978:	1885383a 	mul	r2,r3,r2
  80497c:	2087883a 	add	r3,r4,r2
  804980:	e0bffe17 	ldw	r2,-8(fp)
  804984:	1885883a 	add	r2,r3,r2
  804988:	2885c83a 	sub	r2,r5,r2
  80498c:	e0bffd15 	stw	r2,-12(fp)
                  fs->volumeId.ReservedSectorCount +
                  (fs->volumeId.NumberOfFats * fs->FatSectorCount) +
                  rootDirSectors);

  fs->DataClusterCount=dataSectorCount/fs->volumeId.SectorsPerCluster;
  804990:	e0bfff17 	ldw	r2,-4(fp)
  804994:	10800183 	ldbu	r2,6(r2)
  804998:	11403fcc 	andi	r5,r2,255
  80499c:	e13ffd17 	ldw	r4,-12(fp)
  8049a0:	080cfd80 	call	80cfd8 <__udivsi3>
  8049a4:	1007883a 	mov	r3,r2
  8049a8:	e0bfff17 	ldw	r2,-4(fp)
  8049ac:	10c00815 	stw	r3,32(r2)
}
  8049b0:	e037883a 	mov	sp,fp
  8049b4:	dfc00117 	ldw	ra,4(sp)
  8049b8:	df000017 	ldw	fp,0(sp)
  8049bc:	dec00204 	addi	sp,sp,8
  8049c0:	f800283a 	ret

008049c4 <fs_determineFatType>:
 * void fs_determineFatType(FileSystem *fs)
 * Description: This function looks af the Dataclustercount and determines the
 * FAT type. It fills in fs->type.
*/
void fs_determineFatType(FileSystem *fs)
{
  8049c4:	defffe04 	addi	sp,sp,-8
  8049c8:	df000115 	stw	fp,4(sp)
  8049cc:	df000104 	addi	fp,sp,4
  8049d0:	e13fff15 	stw	r4,-4(fp)
	if(fs->DataClusterCount < 4085)
  8049d4:	e0bfff17 	ldw	r2,-4(fp)
  8049d8:	10800817 	ldw	r2,32(r2)
  8049dc:	1083fd68 	cmpgeui	r2,r2,4085
  8049e0:	1000061e 	bne	r2,zero,8049fc <fs_determineFatType+0x38>
	{
		fs->type=FAT12;
  8049e4:	e0bfff17 	ldw	r2,-4(fp)
  8049e8:	00c00044 	movi	r3,1
  8049ec:	10c00f05 	stb	r3,60(r2)
		fs->volumeId.RootCluster=0;
  8049f0:	e0bfff17 	ldw	r2,-4(fp)
  8049f4:	10000715 	stw	zero,28(r2)
  8049f8:	00000d06 	br	804a30 <fs_determineFatType+0x6c>
	}
	else if(fs->DataClusterCount < 65525)
  8049fc:	e0bfff17 	ldw	r2,-4(fp)
  804a00:	10c00817 	ldw	r3,32(r2)
  804a04:	00bffd14 	movui	r2,65524
  804a08:	10c00636 	bltu	r2,r3,804a24 <fs_determineFatType+0x60>
	{
		fs->type=FAT16;
  804a0c:	e0bfff17 	ldw	r2,-4(fp)
  804a10:	00c00084 	movi	r3,2
  804a14:	10c00f05 	stb	r3,60(r2)
		fs->volumeId.RootCluster=0;
  804a18:	e0bfff17 	ldw	r2,-4(fp)
  804a1c:	10000715 	stw	zero,28(r2)
  804a20:	00000306 	br	804a30 <fs_determineFatType+0x6c>
	}
	else
	{
		fs->type=FAT32;
  804a24:	e0ffff17 	ldw	r3,-4(fp)
  804a28:	008000c4 	movi	r2,3
  804a2c:	18800f05 	stb	r2,60(r3)
	}
}
  804a30:	e037883a 	mov	sp,fp
  804a34:	df000017 	ldw	fp,0(sp)
  804a38:	dec00104 	addi	sp,sp,4
  804a3c:	f800283a 	ret

00804a40 <fs_findFirstSectorRootDir>:
 * void fs_findFirstSectorRootDir(FileSystem *fs)
 * Description: This functions fills in the fs->FirstSectorRootDir field, even
 * for FAT32, although that is not necessary (because you have FirstClusterRootDir).
*/
void fs_findFirstSectorRootDir(FileSystem *fs)
{
  804a40:	defffe04 	addi	sp,sp,-8
  804a44:	df000115 	stw	fp,4(sp)
  804a48:	df000104 	addi	fp,sp,4
  804a4c:	e13fff15 	stw	r4,-4(fp)
	if(fs->type==FAT32)
  804a50:	e0bfff17 	ldw	r2,-4(fp)
  804a54:	10800f03 	ldbu	r2,60(r2)
  804a58:	10803fcc 	andi	r2,r2,255
  804a5c:	108000d8 	cmpnei	r2,r2,3
  804a60:	1000151e 	bne	r2,zero,804ab8 <fs_findFirstSectorRootDir+0x78>
		fs->FirstSectorRootDir = fs->volumeId.ReservedSectorCount + 
  804a64:	e0bfff17 	ldw	r2,-4(fp)
  804a68:	1080020b 	ldhu	r2,8(r2)
  804a6c:	117fffcc 	andi	r5,r2,65535
  804a70:	e0bfff17 	ldw	r2,-4(fp)
  804a74:	10800717 	ldw	r2,28(r2)
  804a78:	10ffff84 	addi	r3,r2,-2
  804a7c:	e0bfff17 	ldw	r2,-4(fp)
  804a80:	10800183 	ldbu	r2,6(r2)
  804a84:	10803fcc 	andi	r2,r2,255
  804a88:	1889383a 	mul	r4,r3,r2
  804a8c:	e0bfff17 	ldw	r2,-4(fp)
  804a90:	10800283 	ldbu	r2,10(r2)
  804a94:	10c03fcc 	andi	r3,r2,255
  804a98:	e0bfff17 	ldw	r2,-4(fp)
  804a9c:	10800617 	ldw	r2,24(r2)
  804aa0:	1885383a 	mul	r2,r3,r2
  804aa4:	2085883a 	add	r2,r4,r2
  804aa8:	2887883a 	add	r3,r5,r2
  804aac:	e0bfff17 	ldw	r2,-4(fp)
  804ab0:	10c00b15 	stw	r3,44(r2)
  804ab4:	00000e06 	br	804af0 <fs_findFirstSectorRootDir+0xb0>
		                         (fs->volumeId.NumberOfFats*fs->volumeId.FatSectorCount32) +
								 (fs->volumeId.RootCluster-2)*fs->volumeId.SectorsPerCluster;
	else
		fs->FirstSectorRootDir = fs->volumeId.ReservedSectorCount + 
  804ab8:	e0bfff17 	ldw	r2,-4(fp)
  804abc:	1080020b 	ldhu	r2,8(r2)
  804ac0:	113fffcc 	andi	r4,r2,65535
  804ac4:	e0bfff17 	ldw	r2,-4(fp)
  804ac8:	10800283 	ldbu	r2,10(r2)
  804acc:	10c03fcc 	andi	r3,r2,255
  804ad0:	e0bfff17 	ldw	r2,-4(fp)
  804ad4:	1080040b 	ldhu	r2,16(r2)
  804ad8:	10bfffcc 	andi	r2,r2,65535
  804adc:	1885383a 	mul	r2,r3,r2
  804ae0:	2085883a 	add	r2,r4,r2
  804ae4:	1007883a 	mov	r3,r2
  804ae8:	e0bfff17 	ldw	r2,-4(fp)
  804aec:	10c00b15 	stw	r3,44(r2)
		                         (fs->volumeId.NumberOfFats*fs->volumeId.FatSectorCount16);
}
  804af0:	e037883a 	mov	sp,fp
  804af4:	df000017 	ldw	fp,0(sp)
  804af8:	dec00104 	addi	sp,sp,4
  804afc:	f800283a 	ret

00804b00 <fs_initCurrentDir>:
/*****************************************************************************/ 

void fs_initCurrentDir(FileSystem *fs)
{
  804b00:	defffd04 	addi	sp,sp,-12
  804b04:	dfc00215 	stw	ra,8(sp)
  804b08:	df000115 	stw	fp,4(sp)
  804b0c:	df000104 	addi	fp,sp,4
  804b10:	e13fff15 	stw	r4,-4(fp)
	fs->FirstClusterCurrentDir = fs_getFirstClusterRootDir(fs);
  804b14:	e13fff17 	ldw	r4,-4(fp)
  804b18:	08051e00 	call	8051e0 <fs_getFirstClusterRootDir>
  804b1c:	1007883a 	mov	r3,r2
  804b20:	e0bfff17 	ldw	r2,-4(fp)
  804b24:	10c00c15 	stw	r3,48(r2)
}
  804b28:	e037883a 	mov	sp,fp
  804b2c:	dfc00117 	ldw	ra,4(sp)
  804b30:	df000017 	ldw	fp,0(sp)
  804b34:	dec00204 	addi	sp,sp,8
  804b38:	f800283a 	ret

00804b3c <fs_clusterToSector>:
 * Description: This function converts a clusternumber in the effective sector
 * number where this cluster starts. Boundary check is not implemented
 * Return value: A long is returned representing the sectornumber.
*/
euint32 fs_clusterToSector(FileSystem *fs,euint32 cluster)
{
  804b3c:	defffc04 	addi	sp,sp,-16
  804b40:	df000315 	stw	fp,12(sp)
  804b44:	df000304 	addi	fp,sp,12
  804b48:	e13ffe15 	stw	r4,-8(fp)
  804b4c:	e17fff15 	stw	r5,-4(fp)
	eint32 base;
	
	if(fs->type==FAT32)
  804b50:	e0bffe17 	ldw	r2,-8(fp)
  804b54:	10800f03 	ldbu	r2,60(r2)
  804b58:	10803fcc 	andi	r2,r2,255
  804b5c:	108000d8 	cmpnei	r2,r2,3
  804b60:	10000c1e 	bne	r2,zero,804b94 <fs_clusterToSector+0x58>
	{
		base=
  804b64:	e0bffe17 	ldw	r2,-8(fp)
  804b68:	1080020b 	ldhu	r2,8(r2)
  804b6c:	113fffcc 	andi	r4,r2,65535
  804b70:	e0bffe17 	ldw	r2,-8(fp)
  804b74:	10c00917 	ldw	r3,36(r2)
  804b78:	e0bffe17 	ldw	r2,-8(fp)
  804b7c:	10800283 	ldbu	r2,10(r2)
  804b80:	10803fcc 	andi	r2,r2,255
  804b84:	1885383a 	mul	r2,r3,r2
  804b88:	2085883a 	add	r2,r4,r2
  804b8c:	e0bffd15 	stw	r2,-12(fp)
  804b90:	00001106 	br	804bd8 <fs_clusterToSector+0x9c>
			fs->volumeId.ReservedSectorCount+
			fs->FatSectorCount*fs->volumeId.NumberOfFats;
	}
	else
	{
		base=
  804b94:	e0bffe17 	ldw	r2,-8(fp)
  804b98:	1080020b 	ldhu	r2,8(r2)
  804b9c:	113fffcc 	andi	r4,r2,65535
  804ba0:	e0bffe17 	ldw	r2,-8(fp)
  804ba4:	10c00917 	ldw	r3,36(r2)
  804ba8:	e0bffe17 	ldw	r2,-8(fp)
  804bac:	10800283 	ldbu	r2,10(r2)
  804bb0:	10803fcc 	andi	r2,r2,255
  804bb4:	1885383a 	mul	r2,r3,r2
  804bb8:	2087883a 	add	r3,r4,r2
  804bbc:	e0bffe17 	ldw	r2,-8(fp)
  804bc0:	1080030b 	ldhu	r2,12(r2)
  804bc4:	10bfffcc 	andi	r2,r2,65535
  804bc8:	1004d13a 	srli	r2,r2,4
  804bcc:	10bfffcc 	andi	r2,r2,65535
  804bd0:	1885883a 	add	r2,r3,r2
  804bd4:	e0bffd15 	stw	r2,-12(fp)
			fs->volumeId.ReservedSectorCount+
			fs->FatSectorCount*fs->volumeId.NumberOfFats+
			fs->volumeId.RootEntryCount/16;
	}
	return( base + (cluster-2)*fs->volumeId.SectorsPerCluster );
  804bd8:	e0bfff17 	ldw	r2,-4(fp)
  804bdc:	10ffff84 	addi	r3,r2,-2
  804be0:	e0bffe17 	ldw	r2,-8(fp)
  804be4:	10800183 	ldbu	r2,6(r2)
  804be8:	10803fcc 	andi	r2,r2,255
  804bec:	1887383a 	mul	r3,r3,r2
  804bf0:	e0bffd17 	ldw	r2,-12(fp)
  804bf4:	1885883a 	add	r2,r3,r2
}
  804bf8:	e037883a 	mov	sp,fp
  804bfc:	df000017 	ldw	fp,0(sp)
  804c00:	dec00104 	addi	sp,sp,4
  804c04:	f800283a 	ret

00804c08 <fs_sectorToCluster>:
/*****************************************************************************/ 

/* Function is unused, but may be usefull */
euint32 fs_sectorToCluster(FileSystem *fs,euint32 sector)
{
  804c08:	defffa04 	addi	sp,sp,-24
  804c0c:	dfc00515 	stw	ra,20(sp)
  804c10:	df000415 	stw	fp,16(sp)
  804c14:	dc000315 	stw	r16,12(sp)
  804c18:	df000304 	addi	fp,sp,12
  804c1c:	e13ffe15 	stw	r4,-8(fp)
  804c20:	e17fff15 	stw	r5,-4(fp)
	eint32 base;
	
	if(fs->type==FAT32)
  804c24:	e0bffe17 	ldw	r2,-8(fp)
  804c28:	10800f03 	ldbu	r2,60(r2)
  804c2c:	10803fcc 	andi	r2,r2,255
  804c30:	108000d8 	cmpnei	r2,r2,3
  804c34:	10000c1e 	bne	r2,zero,804c68 <fs_sectorToCluster+0x60>
	{
		base=
  804c38:	e0bffe17 	ldw	r2,-8(fp)
  804c3c:	1080020b 	ldhu	r2,8(r2)
  804c40:	113fffcc 	andi	r4,r2,65535
  804c44:	e0bffe17 	ldw	r2,-8(fp)
  804c48:	10c00917 	ldw	r3,36(r2)
  804c4c:	e0bffe17 	ldw	r2,-8(fp)
  804c50:	10800283 	ldbu	r2,10(r2)
  804c54:	10803fcc 	andi	r2,r2,255
  804c58:	1885383a 	mul	r2,r3,r2
  804c5c:	2085883a 	add	r2,r4,r2
  804c60:	e0bffd15 	stw	r2,-12(fp)
  804c64:	00001106 	br	804cac <fs_sectorToCluster+0xa4>
			fs->volumeId.ReservedSectorCount+
			fs->FatSectorCount*fs->volumeId.NumberOfFats;
	}
	else
	{
		base=
  804c68:	e0bffe17 	ldw	r2,-8(fp)
  804c6c:	1080020b 	ldhu	r2,8(r2)
  804c70:	113fffcc 	andi	r4,r2,65535
  804c74:	e0bffe17 	ldw	r2,-8(fp)
  804c78:	10c00917 	ldw	r3,36(r2)
  804c7c:	e0bffe17 	ldw	r2,-8(fp)
  804c80:	10800283 	ldbu	r2,10(r2)
  804c84:	10803fcc 	andi	r2,r2,255
  804c88:	1885383a 	mul	r2,r3,r2
  804c8c:	2087883a 	add	r3,r4,r2
  804c90:	e0bffe17 	ldw	r2,-8(fp)
  804c94:	1080030b 	ldhu	r2,12(r2)
  804c98:	10bfffcc 	andi	r2,r2,65535
  804c9c:	1004d13a 	srli	r2,r2,4
  804ca0:	10bfffcc 	andi	r2,r2,65535
  804ca4:	1885883a 	add	r2,r3,r2
  804ca8:	e0bffd15 	stw	r2,-12(fp)
			fs->volumeId.ReservedSectorCount+
			fs->FatSectorCount*fs->volumeId.NumberOfFats+
			fs->volumeId.RootEntryCount/16;
	}
	return(((sector-base)-((sector-base)%fs->volumeId.SectorsPerCluster))/fs->volumeId.SectorsPerCluster+2 );
  804cac:	e0fffd17 	ldw	r3,-12(fp)
  804cb0:	e0bfff17 	ldw	r2,-4(fp)
  804cb4:	10e1c83a 	sub	r16,r2,r3
  804cb8:	e0fffd17 	ldw	r3,-12(fp)
  804cbc:	e0bfff17 	ldw	r2,-4(fp)
  804cc0:	10c9c83a 	sub	r4,r2,r3
  804cc4:	e0bffe17 	ldw	r2,-8(fp)
  804cc8:	10800183 	ldbu	r2,6(r2)
  804ccc:	11403fcc 	andi	r5,r2,255
  804cd0:	080cfe00 	call	80cfe0 <__umodsi3>
  804cd4:	8089c83a 	sub	r4,r16,r2
  804cd8:	e0bffe17 	ldw	r2,-8(fp)
  804cdc:	10800183 	ldbu	r2,6(r2)
  804ce0:	11403fcc 	andi	r5,r2,255
  804ce4:	080cfd80 	call	80cfd8 <__udivsi3>
  804ce8:	10800084 	addi	r2,r2,2
}
  804cec:	e037883a 	mov	sp,fp
  804cf0:	dfc00217 	ldw	ra,8(sp)
  804cf4:	df000117 	ldw	fp,4(sp)
  804cf8:	dc000017 	ldw	r16,0(sp)
  804cfc:	dec00304 	addi	sp,sp,12
  804d00:	f800283a 	ret

00804d04 <fs_getNextFreeCluster>:
 * fragmentation. Implementing rollover search is still to be done.
 * Return value: If a free cluster is found it's number is returned. If none is 
 * found 0 is returned.
*/
euint32 fs_getNextFreeCluster(FileSystem *fs,euint32 startingcluster)
{
  804d04:	defffa04 	addi	sp,sp,-24
  804d08:	dfc00515 	stw	ra,20(sp)
  804d0c:	df000415 	stw	fp,16(sp)
  804d10:	df000404 	addi	fp,sp,16
  804d14:	e13ffd15 	stw	r4,-12(fp)
  804d18:	e17ffe15 	stw	r5,-8(fp)
	euint32 r;
	
	while(startingcluster<fs->DataClusterCount){
  804d1c:	00000e06 	br	804d58 <fs_getNextFreeCluster+0x54>
		r=fat_getNextClusterAddress(fs,startingcluster,0);
  804d20:	e13ffd17 	ldw	r4,-12(fp)
  804d24:	e17ffe17 	ldw	r5,-8(fp)
  804d28:	000d883a 	mov	r6,zero
  804d2c:	0801dcc0 	call	801dcc <fat_getNextClusterAddress>
  804d30:	e0bffc15 	stw	r2,-16(fp)
		if(r==0){
  804d34:	e0bffc17 	ldw	r2,-16(fp)
  804d38:	1004c03a 	cmpne	r2,r2,zero
  804d3c:	1000031e 	bne	r2,zero,804d4c <fs_getNextFreeCluster+0x48>
			return(startingcluster);
  804d40:	e0bffe17 	ldw	r2,-8(fp)
  804d44:	e0bfff15 	stw	r2,-4(fp)
  804d48:	00000806 	br	804d6c <fs_getNextFreeCluster+0x68>
		}
		startingcluster++;
  804d4c:	e0bffe17 	ldw	r2,-8(fp)
  804d50:	10800044 	addi	r2,r2,1
  804d54:	e0bffe15 	stw	r2,-8(fp)
*/
euint32 fs_getNextFreeCluster(FileSystem *fs,euint32 startingcluster)
{
	euint32 r;
	
	while(startingcluster<fs->DataClusterCount){
  804d58:	e0bffd17 	ldw	r2,-12(fp)
  804d5c:	10c00817 	ldw	r3,32(r2)
  804d60:	e0bffe17 	ldw	r2,-8(fp)
  804d64:	10ffee36 	bltu	r2,r3,804d20 <fs_getNextFreeCluster+0x1c>
		if(r==0){
			return(startingcluster);
		}
		startingcluster++;
	}
	return(0);
  804d68:	e03fff15 	stw	zero,-4(fp)
  804d6c:	e0bfff17 	ldw	r2,-4(fp)
}
  804d70:	e037883a 	mov	sp,fp
  804d74:	dfc00117 	ldw	ra,4(sp)
  804d78:	df000017 	ldw	fp,0(sp)
  804d7c:	dec00204 	addi	sp,sp,8
  804d80:	f800283a 	ret

00804d84 <fs_giveFreeClusterHint>:
 * files in the rootdirectory.
 * 
 * Return value: Returns it's best guess.
*/
euint32 fs_giveFreeClusterHint(FileSystem *fs)
{
  804d84:	defffe04 	addi	sp,sp,-8
  804d88:	df000115 	stw	fp,4(sp)
  804d8c:	df000104 	addi	fp,sp,4
  804d90:	e13fff15 	stw	r4,-4(fp)
	return(2); /* Now THIS is a hint ;) */
  804d94:	00800084 	movi	r2,2
}
  804d98:	e037883a 	mov	sp,fp
  804d9c:	df000017 	ldw	fp,0(sp)
  804da0:	dec00104 	addi	sp,sp,4
  804da4:	f800283a 	ret

00804da8 <fs_findFile>:
 * Return value: Returns 0 when nothing was found, 1 when the thing found
 * was a file and 2 if the thing found was a directory.
*/

esint8 fs_findFile(FileSystem *fs,eint8* filename,FileLocation *loc,euint32 *lastDir)
{
  804da8:	defff104 	addi	sp,sp,-60
  804dac:	dfc00e15 	stw	ra,56(sp)
  804db0:	df000d15 	stw	fp,52(sp)
  804db4:	df000d04 	addi	fp,sp,52
  804db8:	e13ffb15 	stw	r4,-20(fp)
  804dbc:	e17ffc15 	stw	r5,-16(fp)
  804dc0:	e1bffd15 	stw	r6,-12(fp)
  804dc4:	e1fffe15 	stw	r7,-8(fp)
	euint32 fccd,tmpclus;
	eint8 ffname[11],*next,it=0,filefound=0;
  804dc8:	e03ff445 	stb	zero,-47(fp)
  804dcc:	e03ff405 	stb	zero,-48(fp)
	
	if(*filename=='/'){
  804dd0:	e0bffc17 	ldw	r2,-16(fp)
  804dd4:	10800003 	ldbu	r2,0(r2)
  804dd8:	10803fcc 	andi	r2,r2,255
  804ddc:	1080201c 	xori	r2,r2,128
  804de0:	10bfe004 	addi	r2,r2,-128
  804de4:	10800bd8 	cmpnei	r2,r2,47
  804de8:	1000161e 	bne	r2,zero,804e44 <fs_findFile+0x9c>
		fccd = fs_getFirstClusterRootDir(fs);
  804dec:	e13ffb17 	ldw	r4,-20(fp)
  804df0:	08051e00 	call	8051e0 <fs_getFirstClusterRootDir>
  804df4:	e0bff715 	stw	r2,-36(fp)
		filename++;
  804df8:	e0bffc17 	ldw	r2,-16(fp)
  804dfc:	10800044 	addi	r2,r2,1
  804e00:	e0bffc15 	stw	r2,-16(fp)
		if(lastDir)*lastDir=fccd;
  804e04:	e0bffe17 	ldw	r2,-8(fp)
  804e08:	1005003a 	cmpeq	r2,r2,zero
  804e0c:	1000031e 	bne	r2,zero,804e1c <fs_findFile+0x74>
  804e10:	e0fffe17 	ldw	r3,-8(fp)
  804e14:	e0bff717 	ldw	r2,-36(fp)
  804e18:	18800015 	stw	r2,0(r3)
		if(!*filename){
  804e1c:	e0bffc17 	ldw	r2,-16(fp)
  804e20:	10800003 	ldbu	r2,0(r2)
  804e24:	10803fcc 	andi	r2,r2,255
  804e28:	1080201c 	xori	r2,r2,128
  804e2c:	10bfe004 	addi	r2,r2,-128
  804e30:	1004c03a 	cmpne	r2,r2,zero
  804e34:	10004c1e 	bne	r2,zero,804f68 <fs_findFile+0x1c0>
			return(2);
  804e38:	00800084 	movi	r2,2
  804e3c:	e0bfff15 	stw	r2,-4(fp)
  804e40:	00006306 	br	804fd0 <fs_findFile+0x228>
		}
	}else{
		fccd = fs->FirstClusterCurrentDir;
  804e44:	e0bffb17 	ldw	r2,-20(fp)
  804e48:	10800c17 	ldw	r2,48(r2)
  804e4c:	e0bff715 	stw	r2,-36(fp)
		if(lastDir)*lastDir=fccd;
  804e50:	e0bffe17 	ldw	r2,-8(fp)
  804e54:	1005003a 	cmpeq	r2,r2,zero
  804e58:	1000431e 	bne	r2,zero,804f68 <fs_findFile+0x1c0>
  804e5c:	e0fffe17 	ldw	r3,-8(fp)
  804e60:	e0bff717 	ldw	r2,-36(fp)
  804e64:	18800015 	stw	r2,0(r3)
	}
	
	
	while((next=file_normalToFatName(filename,ffname))!=0){
  804e68:	00003f06 	br	804f68 <fs_findFile+0x1c0>
		if((tmpclus=dir_findinDir(fs,ffname,fccd,loc,DIRFIND_FILE))==0){
  804e6c:	e17ff804 	addi	r5,fp,-32
  804e70:	d8000015 	stw	zero,0(sp)
  804e74:	e13ffb17 	ldw	r4,-20(fp)
  804e78:	e1bff717 	ldw	r6,-36(fp)
  804e7c:	e1fffd17 	ldw	r7,-12(fp)
  804e80:	08013a40 	call	8013a4 <dir_findinDir>
  804e84:	e0bff615 	stw	r2,-40(fp)
  804e88:	e0bff617 	ldw	r2,-40(fp)
  804e8c:	1004c03a 	cmpne	r2,r2,zero
  804e90:	10000c1e 	bne	r2,zero,804ec4 <fs_findFile+0x11c>
			/* We didn't find what we wanted */
			/* We should check, to see if there is more after it, so that
			 * we can invalidate lastDir
			 */
			if((file_normalToFatName(next,ffname))!=0){
  804e94:	e17ff804 	addi	r5,fp,-32
  804e98:	e13ff517 	ldw	r4,-44(fp)
  804e9c:	0803ee40 	call	803ee4 <file_normalToFatName>
  804ea0:	1005003a 	cmpeq	r2,r2,zero
  804ea4:	1000051e 	bne	r2,zero,804ebc <fs_findFile+0x114>
				if(lastDir)*lastDir=0;
  804ea8:	e0bffe17 	ldw	r2,-8(fp)
  804eac:	1005003a 	cmpeq	r2,r2,zero
  804eb0:	1000021e 	bne	r2,zero,804ebc <fs_findFile+0x114>
  804eb4:	e0bffe17 	ldw	r2,-8(fp)
  804eb8:	10000015 	stw	zero,0(r2)
			}			 
			return(0);
  804ebc:	e03fff15 	stw	zero,-4(fp)
  804ec0:	00004306 	br	804fd0 <fs_findFile+0x228>
		}
		it++;
  804ec4:	e0bff443 	ldbu	r2,-47(fp)
  804ec8:	10800044 	addi	r2,r2,1
  804ecc:	e0bff445 	stb	r2,-47(fp)
		if(loc->attrib&ATTR_DIRECTORY){
  804ed0:	e0bffd17 	ldw	r2,-12(fp)
  804ed4:	10800143 	ldbu	r2,5(r2)
  804ed8:	10803fcc 	andi	r2,r2,255
  804edc:	1080040c 	andi	r2,r2,16
  804ee0:	1005003a 	cmpeq	r2,r2,zero
  804ee4:	1000101e 	bne	r2,zero,804f28 <fs_findFile+0x180>
			fccd = tmpclus;
  804ee8:	e0bff617 	ldw	r2,-40(fp)
  804eec:	e0bff715 	stw	r2,-36(fp)
			filename = next;
  804ef0:	e0bff517 	ldw	r2,-44(fp)
  804ef4:	e0bffc15 	stw	r2,-16(fp)
			if(lastDir)*lastDir=fccd;
  804ef8:	e0bffe17 	ldw	r2,-8(fp)
  804efc:	1005003a 	cmpeq	r2,r2,zero
  804f00:	1000031e 	bne	r2,zero,804f10 <fs_findFile+0x168>
  804f04:	e0fffe17 	ldw	r3,-8(fp)
  804f08:	e0bff717 	ldw	r2,-36(fp)
  804f0c:	18800015 	stw	r2,0(r3)
			if(filefound)*lastDir=0;
  804f10:	e0bff407 	ldb	r2,-48(fp)
  804f14:	1005003a 	cmpeq	r2,r2,zero
  804f18:	1000131e 	bne	r2,zero,804f68 <fs_findFile+0x1c0>
  804f1c:	e0bffe17 	ldw	r2,-8(fp)
  804f20:	10000015 	stw	zero,0(r2)
  804f24:	00001006 	br	804f68 <fs_findFile+0x1c0>
		}else{
			filefound=1;
  804f28:	00800044 	movi	r2,1
  804f2c:	e0bff405 	stb	r2,-48(fp)
			if((file_normalToFatName(next,ffname))!=0){
  804f30:	e17ff804 	addi	r5,fp,-32
  804f34:	e13ff517 	ldw	r4,-44(fp)
  804f38:	0803ee40 	call	803ee4 <file_normalToFatName>
  804f3c:	1005003a 	cmpeq	r2,r2,zero
  804f40:	1000071e 	bne	r2,zero,804f60 <fs_findFile+0x1b8>
				if(lastDir)*lastDir=0;
  804f44:	e0bffe17 	ldw	r2,-8(fp)
  804f48:	1005003a 	cmpeq	r2,r2,zero
  804f4c:	1000021e 	bne	r2,zero,804f58 <fs_findFile+0x1b0>
  804f50:	e0bffe17 	ldw	r2,-8(fp)
  804f54:	10000015 	stw	zero,0(r2)
				return(0);
  804f58:	e03fff15 	stw	zero,-4(fp)
  804f5c:	00001c06 	br	804fd0 <fs_findFile+0x228>
			}else{
				filename=next;	
  804f60:	e0bff517 	ldw	r2,-44(fp)
  804f64:	e0bffc15 	stw	r2,-16(fp)
		fccd = fs->FirstClusterCurrentDir;
		if(lastDir)*lastDir=fccd;
	}
	
	
	while((next=file_normalToFatName(filename,ffname))!=0){
  804f68:	e17ff804 	addi	r5,fp,-32
  804f6c:	e13ffc17 	ldw	r4,-16(fp)
  804f70:	0803ee40 	call	803ee4 <file_normalToFatName>
  804f74:	e0bff515 	stw	r2,-44(fp)
  804f78:	e0bff517 	ldw	r2,-44(fp)
  804f7c:	1004c03a 	cmpne	r2,r2,zero
  804f80:	103fba1e 	bne	r2,zero,804e6c <fs_findFile+0xc4>
				filename=next;	
			}
		}
	}
	
	if(it==0)return(0);
  804f84:	e0bff447 	ldb	r2,-47(fp)
  804f88:	1004c03a 	cmpne	r2,r2,zero
  804f8c:	1000021e 	bne	r2,zero,804f98 <fs_findFile+0x1f0>
  804f90:	e03fff15 	stw	zero,-4(fp)
  804f94:	00000e06 	br	804fd0 <fs_findFile+0x228>
	if(loc->attrib&ATTR_DIRECTORY || !filefound)return(2);
  804f98:	e0bffd17 	ldw	r2,-12(fp)
  804f9c:	10800143 	ldbu	r2,5(r2)
  804fa0:	10803fcc 	andi	r2,r2,255
  804fa4:	1080040c 	andi	r2,r2,16
  804fa8:	1004c03a 	cmpne	r2,r2,zero
  804fac:	1000031e 	bne	r2,zero,804fbc <fs_findFile+0x214>
  804fb0:	e0bff407 	ldb	r2,-48(fp)
  804fb4:	1004c03a 	cmpne	r2,r2,zero
  804fb8:	1000031e 	bne	r2,zero,804fc8 <fs_findFile+0x220>
  804fbc:	00800084 	movi	r2,2
  804fc0:	e0bfff15 	stw	r2,-4(fp)
  804fc4:	00000206 	br	804fd0 <fs_findFile+0x228>
	return(1);
  804fc8:	00800044 	movi	r2,1
  804fcc:	e0bfff15 	stw	r2,-4(fp)
  804fd0:	e0bfff17 	ldw	r2,-4(fp)
}
  804fd4:	e037883a 	mov	sp,fp
  804fd8:	dfc00117 	ldw	ra,4(sp)
  804fdc:	df000017 	ldw	fp,0(sp)
  804fe0:	dec00204 	addi	sp,sp,8
  804fe4:	f800283a 	ret

00804fe8 <fs_findFreeFile>:
/*****************************************************************************/

esint16 fs_findFreeFile(FileSystem *fs,eint8* filename,FileLocation *loc,euint8 mode)
{
  804fe8:	defff404 	addi	sp,sp,-48
  804fec:	dfc00b15 	stw	ra,44(sp)
  804ff0:	df000a15 	stw	fp,40(sp)
  804ff4:	df000a04 	addi	fp,sp,40
  804ff8:	e13ffb15 	stw	r4,-20(fp)
  804ffc:	e17ffc15 	stw	r5,-16(fp)
  805000:	e1bffd15 	stw	r6,-12(fp)
  805004:	e1fffe05 	stb	r7,-8(fp)
	euint32 targetdir=0;
  805008:	e03ff715 	stw	zero,-36(fp)
	eint8 ffname[11];
	
	if(fs_findFile(fs,filename,loc,&targetdir))return(0);
  80500c:	e13ffb17 	ldw	r4,-20(fp)
  805010:	e17ffc17 	ldw	r5,-16(fp)
  805014:	e1bffd17 	ldw	r6,-12(fp)
  805018:	e1fff704 	addi	r7,fp,-36
  80501c:	0804da80 	call	804da8 <fs_findFile>
  805020:	10803fcc 	andi	r2,r2,255
  805024:	1080201c 	xori	r2,r2,128
  805028:	10bfe004 	addi	r2,r2,-128
  80502c:	1005003a 	cmpeq	r2,r2,zero
  805030:	1000021e 	bne	r2,zero,80503c <fs_findFreeFile+0x54>
  805034:	e03fff15 	stw	zero,-4(fp)
  805038:	00002d06 	br	8050f0 <fs_findFreeFile+0x108>
	if(!dir_getFatFileName(filename,ffname))return(0);
  80503c:	e17ff804 	addi	r5,fp,-32
  805040:	e13ffc17 	ldw	r4,-16(fp)
  805044:	08015e00 	call	8015e0 <dir_getFatFileName>
  805048:	10803fcc 	andi	r2,r2,255
  80504c:	1080201c 	xori	r2,r2,128
  805050:	10bfe004 	addi	r2,r2,-128
  805054:	1004c03a 	cmpne	r2,r2,zero
  805058:	1000021e 	bne	r2,zero,805064 <fs_findFreeFile+0x7c>
  80505c:	e03fff15 	stw	zero,-4(fp)
  805060:	00002306 	br	8050f0 <fs_findFreeFile+0x108>
	if(dir_findinDir(fs,ffname,targetdir,loc,DIRFIND_FREE)){
  805064:	e1bff717 	ldw	r6,-36(fp)
  805068:	e17ff804 	addi	r5,fp,-32
  80506c:	00800044 	movi	r2,1
  805070:	d8800015 	stw	r2,0(sp)
  805074:	e13ffb17 	ldw	r4,-20(fp)
  805078:	e1fffd17 	ldw	r7,-12(fp)
  80507c:	08013a40 	call	8013a4 <dir_findinDir>
  805080:	1005003a 	cmpeq	r2,r2,zero
  805084:	1000031e 	bne	r2,zero,805094 <fs_findFreeFile+0xac>
		return(1);
  805088:	00800044 	movi	r2,1
  80508c:	e0bfff15 	stw	r2,-4(fp)
  805090:	00001706 	br	8050f0 <fs_findFreeFile+0x108>
	}else{
		if(dir_addCluster(fs,targetdir)){
  805094:	e17ff717 	ldw	r5,-36(fp)
  805098:	e13ffb17 	ldw	r4,-20(fp)
  80509c:	08016b40 	call	8016b4 <dir_addCluster>
  8050a0:	10803fcc 	andi	r2,r2,255
  8050a4:	1080201c 	xori	r2,r2,128
  8050a8:	10bfe004 	addi	r2,r2,-128
  8050ac:	1005003a 	cmpeq	r2,r2,zero
  8050b0:	1000021e 	bne	r2,zero,8050bc <fs_findFreeFile+0xd4>
			return(0);
  8050b4:	e03fff15 	stw	zero,-4(fp)
  8050b8:	00000d06 	br	8050f0 <fs_findFreeFile+0x108>
		}else{
			if(dir_findinDir(fs,ffname,targetdir,loc,DIRFIND_FREE)){
  8050bc:	e1bff717 	ldw	r6,-36(fp)
  8050c0:	e17ff804 	addi	r5,fp,-32
  8050c4:	00800044 	movi	r2,1
  8050c8:	d8800015 	stw	r2,0(sp)
  8050cc:	e13ffb17 	ldw	r4,-20(fp)
  8050d0:	e1fffd17 	ldw	r7,-12(fp)
  8050d4:	08013a40 	call	8013a4 <dir_findinDir>
  8050d8:	1005003a 	cmpeq	r2,r2,zero
  8050dc:	1000031e 	bne	r2,zero,8050ec <fs_findFreeFile+0x104>
				return(1);
  8050e0:	00800044 	movi	r2,1
  8050e4:	e0bfff15 	stw	r2,-4(fp)
  8050e8:	00000106 	br	8050f0 <fs_findFreeFile+0x108>
			}
		}
	}
		
	return(0);
  8050ec:	e03fff15 	stw	zero,-4(fp)
  8050f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8050f4:	e037883a 	mov	sp,fp
  8050f8:	dfc00117 	ldw	ra,4(sp)
  8050fc:	df000017 	ldw	fp,0(sp)
  805100:	dec00204 	addi	sp,sp,8
  805104:	f800283a 	ret

00805108 <fs_getLastCluster>:
 * euint32 fs_getLastCluster(FileSystem *fs,ClusterChain *Cache)
 * Description: This function searches the last cluster of a chain.
 * Return value: The LastCluster (also stored in cache);
*/
euint32 fs_getLastCluster(FileSystem *fs,ClusterChain *Cache)
{
  805108:	defffc04 	addi	sp,sp,-16
  80510c:	dfc00315 	stw	ra,12(sp)
  805110:	df000215 	stw	fp,8(sp)
  805114:	df000204 	addi	fp,sp,8
  805118:	e13ffe15 	stw	r4,-8(fp)
  80511c:	e17fff15 	stw	r5,-4(fp)
	if(Cache->DiscCluster==0){
  805120:	e0bfff17 	ldw	r2,-4(fp)
  805124:	10800217 	ldw	r2,8(r2)
  805128:	1004c03a 	cmpne	r2,r2,zero
  80512c:	1000061e 	bne	r2,zero,805148 <fs_getLastCluster+0x40>
		Cache->DiscCluster=Cache->FirstCluster;
  805130:	e0bfff17 	ldw	r2,-4(fp)
  805134:	10c00317 	ldw	r3,12(r2)
  805138:	e0bfff17 	ldw	r2,-4(fp)
  80513c:	10c00215 	stw	r3,8(r2)
		Cache->LogicCluster=0;
  805140:	e0bfff17 	ldw	r2,-4(fp)
  805144:	10000115 	stw	zero,4(r2)
	}
	
	if(Cache->LastCluster==0)
  805148:	e0bfff17 	ldw	r2,-4(fp)
  80514c:	10800417 	ldw	r2,16(r2)
  805150:	1004c03a 	cmpne	r2,r2,zero
  805154:	10001b1e 	bne	r2,zero,8051c4 <fs_getLastCluster+0xbc>
	{
		while(fat_getNextClusterChain(fs, Cache)==0)
  805158:	00001206 	br	8051a4 <fs_getLastCluster+0x9c>
		{
			Cache->LogicCluster+=Cache->Linear;
  80515c:	e0bfff17 	ldw	r2,-4(fp)
  805160:	10c00117 	ldw	r3,4(r2)
  805164:	e0bfff17 	ldw	r2,-4(fp)
  805168:	10800003 	ldbu	r2,0(r2)
  80516c:	10803fcc 	andi	r2,r2,255
  805170:	1887883a 	add	r3,r3,r2
  805174:	e0bfff17 	ldw	r2,-4(fp)
  805178:	10c00115 	stw	r3,4(r2)
			Cache->DiscCluster+=Cache->Linear;
  80517c:	e0bfff17 	ldw	r2,-4(fp)
  805180:	10c00217 	ldw	r3,8(r2)
  805184:	e0bfff17 	ldw	r2,-4(fp)
  805188:	10800003 	ldbu	r2,0(r2)
  80518c:	10803fcc 	andi	r2,r2,255
  805190:	1887883a 	add	r3,r3,r2
  805194:	e0bfff17 	ldw	r2,-4(fp)
  805198:	10c00215 	stw	r3,8(r2)
			Cache->Linear=0;
  80519c:	e0bfff17 	ldw	r2,-4(fp)
  8051a0:	10000005 	stb	zero,0(r2)
		Cache->LogicCluster=0;
	}
	
	if(Cache->LastCluster==0)
	{
		while(fat_getNextClusterChain(fs, Cache)==0)
  8051a4:	e13ffe17 	ldw	r4,-8(fp)
  8051a8:	e17fff17 	ldw	r5,-4(fp)
  8051ac:	08029500 	call	802950 <fat_getNextClusterChain>
  8051b0:	10bfffcc 	andi	r2,r2,65535
  8051b4:	10a0001c 	xori	r2,r2,32768
  8051b8:	10a00004 	addi	r2,r2,-32768
  8051bc:	1005003a 	cmpeq	r2,r2,zero
  8051c0:	103fe61e 	bne	r2,zero,80515c <fs_getLastCluster+0x54>
			Cache->LogicCluster+=Cache->Linear;
			Cache->DiscCluster+=Cache->Linear;
			Cache->Linear=0;
		}
	}
	return(Cache->LastCluster);
  8051c4:	e0bfff17 	ldw	r2,-4(fp)
  8051c8:	10800417 	ldw	r2,16(r2)
}
  8051cc:	e037883a 	mov	sp,fp
  8051d0:	dfc00117 	ldw	ra,4(sp)
  8051d4:	df000017 	ldw	fp,0(sp)
  8051d8:	dec00204 	addi	sp,sp,8
  8051dc:	f800283a 	ret

008051e0 <fs_getFirstClusterRootDir>:
/*****************************************************************************/

euint32 fs_getFirstClusterRootDir(FileSystem *fs)
{
  8051e0:	defffd04 	addi	sp,sp,-12
  8051e4:	df000215 	stw	fp,8(sp)
  8051e8:	df000204 	addi	fp,sp,8
  8051ec:	e13ffe15 	stw	r4,-8(fp)
	switch(fs->type){
  8051f0:	e0bffe17 	ldw	r2,-8(fp)
  8051f4:	10800f03 	ldbu	r2,60(r2)
  8051f8:	10803fcc 	andi	r2,r2,255
  8051fc:	108000e0 	cmpeqi	r2,r2,3
  805200:	1000011e 	bne	r2,zero,805208 <fs_getFirstClusterRootDir+0x28>
  805204:	00000406 	br	805218 <fs_getFirstClusterRootDir+0x38>
		case FAT32:
			return(fs->volumeId.RootCluster);
  805208:	e0bffe17 	ldw	r2,-8(fp)
  80520c:	10800717 	ldw	r2,28(r2)
  805210:	e0bfff15 	stw	r2,-4(fp)
  805214:	00000206 	br	805220 <fs_getFirstClusterRootDir+0x40>
			break;
		default:
				return(1);
  805218:	00800044 	movi	r2,1
  80521c:	e0bfff15 	stw	r2,-4(fp)
  805220:	e0bfff17 	ldw	r2,-4(fp)
				break;
	}
}
  805224:	e037883a 	mov	sp,fp
  805228:	df000017 	ldw	fp,0(sp)
  80522c:	dec00104 	addi	sp,sp,4
  805230:	f800283a 	ret

00805234 <fs_initClusterChain>:
/*****************************************************************************/

void fs_initClusterChain(FileSystem *fs,ClusterChain *cache,euint32 cluster_addr)
{
  805234:	defffc04 	addi	sp,sp,-16
  805238:	df000315 	stw	fp,12(sp)
  80523c:	df000304 	addi	fp,sp,12
  805240:	e13ffd15 	stw	r4,-12(fp)
  805244:	e17ffe15 	stw	r5,-8(fp)
  805248:	e1bfff15 	stw	r6,-4(fp)
	cache->FirstCluster=cluster_addr;
  80524c:	e0fffe17 	ldw	r3,-8(fp)
  805250:	e0bfff17 	ldw	r2,-4(fp)
  805254:	18800315 	stw	r2,12(r3)
	cache->DiscCluster=cluster_addr;
  805258:	e0fffe17 	ldw	r3,-8(fp)
  80525c:	e0bfff17 	ldw	r2,-4(fp)
  805260:	18800215 	stw	r2,8(r3)
	cache->LogicCluster=0;
  805264:	e0bffe17 	ldw	r2,-8(fp)
  805268:	10000115 	stw	zero,4(r2)
	cache->LastCluster=0; /* Warning flag here */
  80526c:	e0bffe17 	ldw	r2,-8(fp)
  805270:	10000415 	stw	zero,16(r2)
	cache->Linear=0;
  805274:	e0bffe17 	ldw	r2,-8(fp)
  805278:	10000005 	stb	zero,0(r2)
	cache->ClusterCount=0; /* 0 means NOT known */
  80527c:	e0bffe17 	ldw	r2,-8(fp)
  805280:	10000515 	stw	zero,20(r2)
}
  805284:	e037883a 	mov	sp,fp
  805288:	df000017 	ldw	fp,0(sp)
  80528c:	dec00104 	addi	sp,sp,4
  805290:	f800283a 	ret

00805294 <fs_setFirstClusterInDirEntry>:
/*****************************************************************************/

void fs_setFirstClusterInDirEntry(FileRecord *rec,euint32 cluster_addr)
{
  805294:	defffd04 	addi	sp,sp,-12
  805298:	df000215 	stw	fp,8(sp)
  80529c:	df000204 	addi	fp,sp,8
  8052a0:	e13ffe15 	stw	r4,-8(fp)
  8052a4:	e17fff15 	stw	r5,-4(fp)
	rec->FirstClusterHigh=cluster_addr>>16;
  8052a8:	e0bfff17 	ldw	r2,-4(fp)
  8052ac:	1004d43a 	srli	r2,r2,16
  8052b0:	1007883a 	mov	r3,r2
  8052b4:	e0bffe17 	ldw	r2,-8(fp)
  8052b8:	10c0050d 	sth	r3,20(r2)
	rec->FirstClusterLow=cluster_addr&0xFFFF;
  8052bc:	e0bfff17 	ldw	r2,-4(fp)
  8052c0:	1007883a 	mov	r3,r2
  8052c4:	e0bffe17 	ldw	r2,-8(fp)
  8052c8:	10c0068d 	sth	r3,26(r2)
}
  8052cc:	e037883a 	mov	sp,fp
  8052d0:	df000017 	ldw	fp,0(sp)
  8052d4:	dec00104 	addi	sp,sp,4
  8052d8:	f800283a 	ret

008052dc <fs_flushFs>:
/*****************************************************************************/

esint8 fs_flushFs(FileSystem *fs)
{
  8052dc:	defffd04 	addi	sp,sp,-12
  8052e0:	dfc00215 	stw	ra,8(sp)
  8052e4:	df000115 	stw	fp,4(sp)
  8052e8:	df000104 	addi	fp,sp,4
  8052ec:	e13fff15 	stw	r4,-4(fp)
	return(part_flushPart(fs->part,0,fs->SectorCount));
  8052f0:	e0bfff17 	ldw	r2,-4(fp)
  8052f4:	11000017 	ldw	r4,0(r2)
  8052f8:	e0bfff17 	ldw	r2,-4(fp)
  8052fc:	11800a17 	ldw	r6,40(r2)
  805300:	000b883a 	mov	r5,zero
  805304:	08086440 	call	808644 <part_flushPart>
  805308:	10803fcc 	andi	r2,r2,255
  80530c:	1080201c 	xori	r2,r2,128
  805310:	10bfe004 	addi	r2,r2,-128
}
  805314:	e037883a 	mov	sp,fp
  805318:	dfc00117 	ldw	ra,4(sp)
  80531c:	df000017 	ldw	fp,0(sp)
  805320:	dec00204 	addi	sp,sp,8
  805324:	f800283a 	ret

00805328 <fs_umount>:
/*****************************************************************************/

esint8 fs_umount(FileSystem *fs)
{
  805328:	defffd04 	addi	sp,sp,-12
  80532c:	dfc00215 	stw	ra,8(sp)
  805330:	df000115 	stw	fp,4(sp)
  805334:	df000104 	addi	fp,sp,4
  805338:	e13fff15 	stw	r4,-4(fp)
	return(fs_flushFs(fs));
  80533c:	e13fff17 	ldw	r4,-4(fp)
  805340:	08052dc0 	call	8052dc <fs_flushFs>
  805344:	10803fcc 	andi	r2,r2,255
  805348:	1080201c 	xori	r2,r2,128
  80534c:	10bfe004 	addi	r2,r2,-128
}
  805350:	e037883a 	mov	sp,fp
  805354:	dfc00117 	ldw	ra,4(sp)
  805358:	df000017 	ldw	fp,0(sp)
  80535c:	dec00204 	addi	sp,sp,8
  805360:	f800283a 	ret

00805364 <fs_clearCluster>:
/*****************************************************************************/

esint8 fs_clearCluster(FileSystem *fs,euint32 cluster)
{
  805364:	defff904 	addi	sp,sp,-28
  805368:	dfc00615 	stw	ra,24(sp)
  80536c:	df000515 	stw	fp,20(sp)
  805370:	dc000415 	stw	r16,16(sp)
  805374:	df000404 	addi	fp,sp,16
  805378:	e13ffe15 	stw	r4,-8(fp)
  80537c:	e17fff15 	stw	r5,-4(fp)
	euint16 c;
	euint8* buf;
	
	for(c=0;c<(fs->volumeId.SectorsPerCluster);c++){
  805380:	e03ffd0d 	sth	zero,-12(fp)
  805384:	00001606 	br	8053e0 <fs_clearCluster+0x7c>
		buf = part_getSect(fs->part,fs_clusterToSector(fs,cluster)+c,IOM_MODE_READWRITE);
  805388:	e0bffe17 	ldw	r2,-8(fp)
  80538c:	14000017 	ldw	r16,0(r2)
  805390:	e13ffe17 	ldw	r4,-8(fp)
  805394:	e17fff17 	ldw	r5,-4(fp)
  805398:	0804b3c0 	call	804b3c <fs_clusterToSector>
  80539c:	1007883a 	mov	r3,r2
  8053a0:	e0bffd0b 	ldhu	r2,-12(fp)
  8053a4:	188b883a 	add	r5,r3,r2
  8053a8:	8009883a 	mov	r4,r16
  8053ac:	01800084 	movi	r6,2
  8053b0:	08085980 	call	808598 <part_getSect>
  8053b4:	e0bffc15 	stw	r2,-16(fp)
		memClr(buf,512);
  8053b8:	e13ffc17 	ldw	r4,-16(fp)
  8053bc:	01408004 	movi	r5,512
  8053c0:	08088a40 	call	8088a4 <memClr>
		part_relSect(fs->part,buf);
  8053c4:	e0bffe17 	ldw	r2,-8(fp)
  8053c8:	11000017 	ldw	r4,0(r2)
  8053cc:	e17ffc17 	ldw	r5,-16(fp)
  8053d0:	08085f80 	call	8085f8 <part_relSect>
esint8 fs_clearCluster(FileSystem *fs,euint32 cluster)
{
	euint16 c;
	euint8* buf;
	
	for(c=0;c<(fs->volumeId.SectorsPerCluster);c++){
  8053d4:	e0bffd0b 	ldhu	r2,-12(fp)
  8053d8:	10800044 	addi	r2,r2,1
  8053dc:	e0bffd0d 	sth	r2,-12(fp)
  8053e0:	e0bffe17 	ldw	r2,-8(fp)
  8053e4:	10800183 	ldbu	r2,6(r2)
  8053e8:	10803fcc 	andi	r2,r2,255
  8053ec:	10ffffcc 	andi	r3,r2,65535
  8053f0:	e0bffd0b 	ldhu	r2,-12(fp)
  8053f4:	10ffe436 	bltu	r2,r3,805388 <fs_clearCluster+0x24>
		buf = part_getSect(fs->part,fs_clusterToSector(fs,cluster)+c,IOM_MODE_READWRITE);
		memClr(buf,512);
		part_relSect(fs->part,buf);
	}
	return(0);
  8053f8:	0005883a 	mov	r2,zero
}
  8053fc:	e037883a 	mov	sp,fp
  805400:	dfc00217 	ldw	ra,8(sp)
  805404:	df000117 	ldw	fp,4(sp)
  805408:	dc000017 	ldw	r16,0(sp)
  80540c:	dec00304 	addi	sp,sp,12
  805410:	f800283a 	ret

00805414 <fs_getFsInfo>:

esint8 fs_getFsInfo(FileSystem *fs,euint8 force_update)
{
  805414:	defffa04 	addi	sp,sp,-24
  805418:	dfc00515 	stw	ra,20(sp)
  80541c:	df000415 	stw	fp,16(sp)
  805420:	df000404 	addi	fp,sp,16
  805424:	e13ffd15 	stw	r4,-12(fp)
  805428:	e17ffe05 	stb	r5,-8(fp)
	euint8 *buf;
		
 	if(!fs->type==FAT32)return(0);
	buf = part_getSect(fs->part,FS_INFO_SECTOR,IOM_MODE_READONLY);
  80542c:	e0bffd17 	ldw	r2,-12(fp)
  805430:	11000017 	ldw	r4,0(r2)
  805434:	01400044 	movi	r5,1
  805438:	01800044 	movi	r6,1
  80543c:	08085980 	call	808598 <part_getSect>
  805440:	e0bffc15 	stw	r2,-16(fp)
	if(ex_getb32(buf,0)!=FSINFO_MAGIC_BEGIN || ex_getb32(buf,508)!=FSINFO_MAGIC_END){
  805444:	e13ffc17 	ldw	r4,-16(fp)
  805448:	000b883a 	mov	r5,zero
  80544c:	08019b00 	call	8019b0 <ex_getb32>
  805450:	1007883a 	mov	r3,r2
  805454:	00905874 	movhi	r2,16737
  805458:	10949484 	addi	r2,r2,21074
  80545c:	1880061e 	bne	r3,r2,805478 <fs_getFsInfo+0x64>
  805460:	e13ffc17 	ldw	r4,-16(fp)
  805464:	01407f04 	movi	r5,508
  805468:	08019b00 	call	8019b0 <ex_getb32>
  80546c:	1007883a 	mov	r3,r2
  805470:	00aa9574 	movhi	r2,43605
  805474:	18800726 	beq	r3,r2,805494 <fs_getFsInfo+0x80>
		part_relSect(fs->part,buf);
  805478:	e0bffd17 	ldw	r2,-12(fp)
  80547c:	11000017 	ldw	r4,0(r2)
  805480:	e17ffc17 	ldw	r5,-16(fp)
  805484:	08085f80 	call	8085f8 <part_relSect>
		return(-1);
  805488:	00bfffc4 	movi	r2,-1
  80548c:	e0bfff15 	stw	r2,-4(fp)
  805490:	00001906 	br	8054f8 <fs_getFsInfo+0xe4>
	}
	fs->FreeClusterCount = ex_getb32(buf,488);
  805494:	e13ffc17 	ldw	r4,-16(fp)
  805498:	01407a04 	movi	r5,488
  80549c:	08019b00 	call	8019b0 <ex_getb32>
  8054a0:	1007883a 	mov	r3,r2
  8054a4:	e0bffd17 	ldw	r2,-12(fp)
  8054a8:	10c00d15 	stw	r3,52(r2)
	fs->NextFreeCluster  = ex_getb32(buf,492);
  8054ac:	e13ffc17 	ldw	r4,-16(fp)
  8054b0:	01407b04 	movi	r5,492
  8054b4:	08019b00 	call	8019b0 <ex_getb32>
  8054b8:	1007883a 	mov	r3,r2
  8054bc:	e0bffd17 	ldw	r2,-12(fp)
  8054c0:	10c00e15 	stw	r3,56(r2)
	part_relSect(fs->part,buf);
  8054c4:	e0bffd17 	ldw	r2,-12(fp)
  8054c8:	11000017 	ldw	r4,0(r2)
  8054cc:	e17ffc17 	ldw	r5,-16(fp)
  8054d0:	08085f80 	call	8085f8 <part_relSect>
	if(force_update){
  8054d4:	e0bffe03 	ldbu	r2,-8(fp)
  8054d8:	1005003a 	cmpeq	r2,r2,zero
  8054dc:	1000051e 	bne	r2,zero,8054f4 <fs_getFsInfo+0xe0>
		fs->FreeClusterCount=fat_countFreeClusters(fs);
  8054e0:	e13ffd17 	ldw	r4,-12(fp)
  8054e4:	08031280 	call	803128 <fat_countFreeClusters>
  8054e8:	1007883a 	mov	r3,r2
  8054ec:	e0bffd17 	ldw	r2,-12(fp)
  8054f0:	10c00d15 	stw	r3,52(r2)
	}
	return(0);
  8054f4:	e03fff15 	stw	zero,-4(fp)
  8054f8:	e0bfff17 	ldw	r2,-4(fp)
}
  8054fc:	e037883a 	mov	sp,fp
  805500:	dfc00117 	ldw	ra,4(sp)
  805504:	df000017 	ldw	fp,0(sp)
  805508:	dec00204 	addi	sp,sp,8
  80550c:	f800283a 	ret

00805510 <fs_setFsInfo>:

esint8 fs_setFsInfo(FileSystem *fs)
{
  805510:	defffb04 	addi	sp,sp,-20
  805514:	dfc00415 	stw	ra,16(sp)
  805518:	df000315 	stw	fp,12(sp)
  80551c:	df000304 	addi	fp,sp,12
  805520:	e13ffe15 	stw	r4,-8(fp)
	euint8* buf;

	if(!fs->type==FAT32)return(0);
	buf = part_getSect(fs->part,FS_INFO_SECTOR,IOM_MODE_READWRITE);
  805524:	e0bffe17 	ldw	r2,-8(fp)
  805528:	11000017 	ldw	r4,0(r2)
  80552c:	01400044 	movi	r5,1
  805530:	01800084 	movi	r6,2
  805534:	08085980 	call	808598 <part_getSect>
  805538:	e0bffd15 	stw	r2,-12(fp)
	if(ex_getb32(buf,0)!=FSINFO_MAGIC_BEGIN || ex_getb32(buf,508)!=FSINFO_MAGIC_END){
  80553c:	e13ffd17 	ldw	r4,-12(fp)
  805540:	000b883a 	mov	r5,zero
  805544:	08019b00 	call	8019b0 <ex_getb32>
  805548:	1007883a 	mov	r3,r2
  80554c:	00905874 	movhi	r2,16737
  805550:	10949484 	addi	r2,r2,21074
  805554:	1880061e 	bne	r3,r2,805570 <fs_setFsInfo+0x60>
  805558:	e13ffd17 	ldw	r4,-12(fp)
  80555c:	01407f04 	movi	r5,508
  805560:	08019b00 	call	8019b0 <ex_getb32>
  805564:	1007883a 	mov	r3,r2
  805568:	00aa9574 	movhi	r2,43605
  80556c:	18800726 	beq	r3,r2,80558c <fs_setFsInfo+0x7c>
		part_relSect(fs->part,buf);
  805570:	e0bffe17 	ldw	r2,-8(fp)
  805574:	11000017 	ldw	r4,0(r2)
  805578:	e17ffd17 	ldw	r5,-12(fp)
  80557c:	08085f80 	call	8085f8 <part_relSect>
		return(-1);
  805580:	00bfffc4 	movi	r2,-1
  805584:	e0bfff15 	stw	r2,-4(fp)
  805588:	00000f06 	br	8055c8 <fs_setFsInfo+0xb8>
	}
	ex_setb32(buf,488,fs->FreeClusterCount);
  80558c:	e0bffe17 	ldw	r2,-8(fp)
  805590:	11800d17 	ldw	r6,52(r2)
  805594:	e13ffd17 	ldw	r4,-12(fp)
  805598:	01407a04 	movi	r5,488
  80559c:	0801aa00 	call	801aa0 <ex_setb32>
	ex_setb32(buf,492,fs->NextFreeCluster);
  8055a0:	e0bffe17 	ldw	r2,-8(fp)
  8055a4:	11800e17 	ldw	r6,56(r2)
  8055a8:	e13ffd17 	ldw	r4,-12(fp)
  8055ac:	01407b04 	movi	r5,492
  8055b0:	0801aa00 	call	801aa0 <ex_setb32>
	part_relSect(fs->part,buf);
  8055b4:	e0bffe17 	ldw	r2,-8(fp)
  8055b8:	11000017 	ldw	r4,0(r2)
  8055bc:	e17ffd17 	ldw	r5,-12(fp)
  8055c0:	08085f80 	call	8085f8 <part_relSect>
	return(0);
  8055c4:	e03fff15 	stw	zero,-4(fp)
  8055c8:	e0bfff17 	ldw	r2,-4(fp)
}
  8055cc:	e037883a 	mov	sp,fp
  8055d0:	dfc00117 	ldw	ra,4(sp)
  8055d4:	df000017 	ldw	fp,0(sp)
  8055d8:	dec00204 	addi	sp,sp,8
  8055dc:	f800283a 	ret

008055e0 <ioman_init>:
/*****************************************************************************/
#include "ioman.h"
/*****************************************************************************/

esint8 ioman_init(IOManager *ioman, hwInterface *iface, euint8* bufferarea)
{
  8055e0:	defffb04 	addi	sp,sp,-20
  8055e4:	dfc00415 	stw	ra,16(sp)
  8055e8:	df000315 	stw	fp,12(sp)
  8055ec:	df000304 	addi	fp,sp,12
  8055f0:	e13ffd15 	stw	r4,-12(fp)
  8055f4:	e17ffe15 	stw	r5,-8(fp)
  8055f8:	e1bfff15 	stw	r6,-4(fp)
    ioman->iface=iface;
  8055fc:	e0fffd17 	ldw	r3,-12(fp)
  805600:	e0bffe17 	ldw	r2,-8(fp)
  805604:	18800015 	stw	r2,0(r3)
    
    ioman->bufptr = ioman_getBuffer(ioman,bufferarea);
  805608:	e13ffd17 	ldw	r4,-12(fp)
  80560c:	e17fff17 	ldw	r5,-4(fp)
  805610:	08057c80 	call	8057c8 <ioman_getBuffer>
  805614:	1007883a 	mov	r3,r2
  805618:	e0bffd17 	ldw	r2,-12(fp)
  80561c:	10c00115 	stw	r3,4(r2)
    ioman->numbuf = IOMAN_NUMBUFFER;
  805620:	e0fffd17 	ldw	r3,-12(fp)
  805624:	00800104 	movi	r2,4
  805628:	1880020d 	sth	r2,8(r3)
    ioman->numit  = IOMAN_NUMITERATIONS;
  80562c:	e0fffd17 	ldw	r3,-12(fp)
  805630:	008000c4 	movi	r2,3
  805634:	1880028d 	sth	r2,10(r3)
    
    ioman_reset(ioman);
  805638:	e13ffd17 	ldw	r4,-12(fp)
  80563c:	08056580 	call	805658 <ioman_reset>
    return(0);
  805640:	0005883a 	mov	r2,zero
}
  805644:	e037883a 	mov	sp,fp
  805648:	dfc00117 	ldw	ra,4(sp)
  80564c:	df000017 	ldw	fp,0(sp)
  805650:	dec00204 	addi	sp,sp,8
  805654:	f800283a 	ret

00805658 <ioman_reset>:
/*****************************************************************************/

void ioman_reset(IOManager *ioman)
{
  805658:	defffc04 	addi	sp,sp,-16
  80565c:	dfc00315 	stw	ra,12(sp)
  805660:	df000215 	stw	fp,8(sp)
  805664:	df000204 	addi	fp,sp,8
  805668:	e13fff15 	stw	r4,-4(fp)
    euint16 nb,ni;
    
    memClr(ioman->sector,sizeof(euint32)*ioman->numbuf);
  80566c:	e0bfff17 	ldw	r2,-4(fp)
  805670:	11001c04 	addi	r4,r2,112
  805674:	e0bfff17 	ldw	r2,-4(fp)
  805678:	1080020b 	ldhu	r2,8(r2)
  80567c:	10bfffcc 	andi	r2,r2,65535
  805680:	1085883a 	add	r2,r2,r2
  805684:	1085883a 	add	r2,r2,r2
  805688:	100b883a 	mov	r5,r2
  80568c:	08088a40 	call	8088a4 <memClr>
    memClr(ioman->status,sizeof(euint8) *ioman->numbuf);
  805690:	e0bfff17 	ldw	r2,-4(fp)
  805694:	11002004 	addi	r4,r2,128
  805698:	e0bfff17 	ldw	r2,-4(fp)
  80569c:	1080020b 	ldhu	r2,8(r2)
  8056a0:	117fffcc 	andi	r5,r2,65535
  8056a4:	08088a40 	call	8088a4 <memClr>
    memClr(ioman->usage ,sizeof(euint8) *ioman->numbuf);
  8056a8:	e0bfff17 	ldw	r2,-4(fp)
  8056ac:	11002104 	addi	r4,r2,132
  8056b0:	e0bfff17 	ldw	r2,-4(fp)
  8056b4:	1080020b 	ldhu	r2,8(r2)
  8056b8:	117fffcc 	andi	r5,r2,65535
  8056bc:	08088a40 	call	8088a4 <memClr>
    memClr(ioman->itptr ,sizeof(euint8) *ioman->numbuf);
  8056c0:	e0bfff17 	ldw	r2,-4(fp)
  8056c4:	11002304 	addi	r4,r2,140
  8056c8:	e0bfff17 	ldw	r2,-4(fp)
  8056cc:	1080020b 	ldhu	r2,8(r2)
  8056d0:	117fffcc 	andi	r5,r2,65535
  8056d4:	08088a40 	call	8088a4 <memClr>
    ioman_setError(ioman,IOMAN_NOERROR);
  8056d8:	e0bfff17 	ldw	r2,-4(fp)
  8056dc:	10000305 	stb	zero,12(r2)
        
    for(nb=0;nb<ioman->numbuf;nb++){
  8056e0:	e03ffe8d 	sth	zero,-6(fp)
  8056e4:	00002e06 	br	8057a0 <ioman_reset+0x148>
        for(ni=0;ni<ioman->numit;ni++){
  8056e8:	e03ffe0d 	sth	zero,-8(fp)
  8056ec:	00002406 	br	805780 <ioman_reset+0x128>
            ioman->stack[nb][ni].sector=0;
  8056f0:	e0fffe8b 	ldhu	r3,-6(fp)
  8056f4:	e13ffe0b 	ldhu	r4,-8(fp)
  8056f8:	e17fff17 	ldw	r5,-4(fp)
  8056fc:	1805883a 	mov	r2,r3
  805700:	1085883a 	add	r2,r2,r2
  805704:	10c5883a 	add	r2,r2,r3
  805708:	1105883a 	add	r2,r2,r4
  80570c:	100490fa 	slli	r2,r2,3
  805710:	1145883a 	add	r2,r2,r5
  805714:	10800404 	addi	r2,r2,16
  805718:	10000015 	stw	zero,0(r2)
            ioman->stack[nb][ni].status=0;
  80571c:	e0fffe8b 	ldhu	r3,-6(fp)
  805720:	e13ffe0b 	ldhu	r4,-8(fp)
  805724:	e17fff17 	ldw	r5,-4(fp)
  805728:	1805883a 	mov	r2,r3
  80572c:	1085883a 	add	r2,r2,r2
  805730:	10c5883a 	add	r2,r2,r3
  805734:	1105883a 	add	r2,r2,r4
  805738:	100490fa 	slli	r2,r2,3
  80573c:	1145883a 	add	r2,r2,r5
  805740:	10800504 	addi	r2,r2,20
  805744:	10000005 	stb	zero,0(r2)
            ioman->stack[nb][ni].usage =0;
  805748:	e0fffe8b 	ldhu	r3,-6(fp)
  80574c:	e13ffe0b 	ldhu	r4,-8(fp)
  805750:	e17fff17 	ldw	r5,-4(fp)
  805754:	1805883a 	mov	r2,r3
  805758:	1085883a 	add	r2,r2,r2
  80575c:	10c5883a 	add	r2,r2,r3
  805760:	1105883a 	add	r2,r2,r4
  805764:	100490fa 	slli	r2,r2,3
  805768:	1145883a 	add	r2,r2,r5
  80576c:	10800504 	addi	r2,r2,20
  805770:	10000045 	stb	zero,1(r2)
    memClr(ioman->usage ,sizeof(euint8) *ioman->numbuf);
    memClr(ioman->itptr ,sizeof(euint8) *ioman->numbuf);
    ioman_setError(ioman,IOMAN_NOERROR);
        
    for(nb=0;nb<ioman->numbuf;nb++){
        for(ni=0;ni<ioman->numit;ni++){
  805774:	e0bffe0b 	ldhu	r2,-8(fp)
  805778:	10800044 	addi	r2,r2,1
  80577c:	e0bffe0d 	sth	r2,-8(fp)
  805780:	e0bfff17 	ldw	r2,-4(fp)
  805784:	1080028b 	ldhu	r2,10(r2)
  805788:	10ffffcc 	andi	r3,r2,65535
  80578c:	e0bffe0b 	ldhu	r2,-8(fp)
  805790:	10ffd736 	bltu	r2,r3,8056f0 <ioman_reset+0x98>
    memClr(ioman->status,sizeof(euint8) *ioman->numbuf);
    memClr(ioman->usage ,sizeof(euint8) *ioman->numbuf);
    memClr(ioman->itptr ,sizeof(euint8) *ioman->numbuf);
    ioman_setError(ioman,IOMAN_NOERROR);
        
    for(nb=0;nb<ioman->numbuf;nb++){
  805794:	e0bffe8b 	ldhu	r2,-6(fp)
  805798:	10800044 	addi	r2,r2,1
  80579c:	e0bffe8d 	sth	r2,-6(fp)
  8057a0:	e0bfff17 	ldw	r2,-4(fp)
  8057a4:	1080020b 	ldhu	r2,8(r2)
  8057a8:	10ffffcc 	andi	r3,r2,65535
  8057ac:	e0bffe8b 	ldhu	r2,-6(fp)
  8057b0:	10ffcd36 	bltu	r2,r3,8056e8 <ioman_reset+0x90>
            ioman->stack[nb][ni].sector=0;
            ioman->stack[nb][ni].status=0;
            ioman->stack[nb][ni].usage =0;
        }
    }
}
  8057b4:	e037883a 	mov	sp,fp
  8057b8:	dfc00117 	ldw	ra,4(sp)
  8057bc:	df000017 	ldw	fp,0(sp)
  8057c0:	dec00204 	addi	sp,sp,8
  8057c4:	f800283a 	ret

008057c8 <ioman_getBuffer>:
/*****************************************************************************/

euint8* ioman_getBuffer(IOManager *ioman,euint8* bufferarea)
{
  8057c8:	defffd04 	addi	sp,sp,-12
  8057cc:	df000215 	stw	fp,8(sp)
  8057d0:	df000204 	addi	fp,sp,8
  8057d4:	e13ffe15 	stw	r4,-8(fp)
  8057d8:	e17fff15 	stw	r5,-4(fp)
#ifdef IOMAN_DO_MEMALLOC
    return(ioman->cache_mem);
  8057dc:	e0bffe17 	ldw	r2,-8(fp)
  8057e0:	10802404 	addi	r2,r2,144
#else
    return(bufferarea);
#endif
}
  8057e4:	e037883a 	mov	sp,fp
  8057e8:	df000017 	ldw	fp,0(sp)
  8057ec:	dec00104 	addi	sp,sp,4
  8057f0:	f800283a 	ret

008057f4 <ioman_setAttr>:
/*****************************************************************************/

void ioman_setAttr(IOManager *ioman,euint16 bufplace,euint8 attribute,euint8 val)
{
  8057f4:	defffb04 	addi	sp,sp,-20
  8057f8:	df000415 	stw	fp,16(sp)
  8057fc:	df000404 	addi	fp,sp,16
  805800:	e13ffc15 	stw	r4,-16(fp)
  805804:	e17ffd0d 	sth	r5,-12(fp)
  805808:	e1bffe05 	stb	r6,-8(fp)
  80580c:	e1ffff05 	stb	r7,-4(fp)
    if(bufplace>=ioman->numbuf){
  805810:	e0bffc17 	ldw	r2,-16(fp)
  805814:	1080020b 	ldhu	r2,8(r2)
  805818:	10ffffcc 	andi	r3,r2,65535
  80581c:	e0bffd0b 	ldhu	r2,-12(fp)
  805820:	10c00436 	bltu	r2,r3,805834 <ioman_setAttr+0x40>
        ioman_setError(ioman,IOMAN_ERR_SETATTROUTOFBOUNDS);
  805824:	e0fffc17 	ldw	r3,-16(fp)
  805828:	00800044 	movi	r2,1
  80582c:	18800305 	stb	r2,12(r3)
        return; /* Out of bounds */
  805830:	00002506 	br	8058c8 <ioman_setAttr+0xd4>
    }
    
    if(val){
  805834:	e0bfff03 	ldbu	r2,-4(fp)
  805838:	1005003a 	cmpeq	r2,r2,zero
  80583c:	1000111e 	bne	r2,zero,805884 <ioman_setAttr+0x90>
        ioman->status[bufplace]|=1<<attribute;
  805840:	e17ffd0b 	ldhu	r5,-12(fp)
  805844:	e0fffd0b 	ldhu	r3,-12(fp)
  805848:	e0bffc17 	ldw	r2,-16(fp)
  80584c:	1885883a 	add	r2,r3,r2
  805850:	10802004 	addi	r2,r2,128
  805854:	10800003 	ldbu	r2,0(r2)
  805858:	1009883a 	mov	r4,r2
  80585c:	e0fffe03 	ldbu	r3,-8(fp)
  805860:	00800044 	movi	r2,1
  805864:	10c4983a 	sll	r2,r2,r3
  805868:	2084b03a 	or	r2,r4,r2
  80586c:	1007883a 	mov	r3,r2
  805870:	e0bffc17 	ldw	r2,-16(fp)
  805874:	2885883a 	add	r2,r5,r2
  805878:	10802004 	addi	r2,r2,128
  80587c:	10c00005 	stb	r3,0(r2)
  805880:	00001106 	br	8058c8 <ioman_setAttr+0xd4>
    }else{
        ioman->status[bufplace]&=~(1<<attribute);
  805884:	e17ffd0b 	ldhu	r5,-12(fp)
  805888:	e0fffd0b 	ldhu	r3,-12(fp)
  80588c:	e0bffc17 	ldw	r2,-16(fp)
  805890:	1885883a 	add	r2,r3,r2
  805894:	10802004 	addi	r2,r2,128
  805898:	10800003 	ldbu	r2,0(r2)
  80589c:	1009883a 	mov	r4,r2
  8058a0:	e0fffe03 	ldbu	r3,-8(fp)
  8058a4:	00800044 	movi	r2,1
  8058a8:	10c4983a 	sll	r2,r2,r3
  8058ac:	0084303a 	nor	r2,zero,r2
  8058b0:	2084703a 	and	r2,r4,r2
  8058b4:	1007883a 	mov	r3,r2
  8058b8:	e0bffc17 	ldw	r2,-16(fp)
  8058bc:	2885883a 	add	r2,r5,r2
  8058c0:	10802004 	addi	r2,r2,128
  8058c4:	10c00005 	stb	r3,0(r2)
    }
}
  8058c8:	e037883a 	mov	sp,fp
  8058cc:	df000017 	ldw	fp,0(sp)
  8058d0:	dec00104 	addi	sp,sp,4
  8058d4:	f800283a 	ret

008058d8 <ioman_getAttr>:
/*****************************************************************************/

euint8 ioman_getAttr(IOManager *ioman,euint16 bufplace,euint8 attribute)
{
  8058d8:	defffb04 	addi	sp,sp,-20
  8058dc:	df000415 	stw	fp,16(sp)
  8058e0:	df000404 	addi	fp,sp,16
  8058e4:	e13ffc15 	stw	r4,-16(fp)
  8058e8:	e17ffd0d 	sth	r5,-12(fp)
  8058ec:	e1bffe05 	stb	r6,-8(fp)
    if(bufplace>=ioman->numbuf){
  8058f0:	e0bffc17 	ldw	r2,-16(fp)
  8058f4:	1080020b 	ldhu	r2,8(r2)
  8058f8:	10ffffcc 	andi	r3,r2,65535
  8058fc:	e0bffd0b 	ldhu	r2,-12(fp)
  805900:	10c00636 	bltu	r2,r3,80591c <ioman_getAttr+0x44>
        ioman_setError(ioman,IOMAN_ERR_GETATTROUTOFBOUNDS);
  805904:	e0fffc17 	ldw	r3,-16(fp)
  805908:	00800084 	movi	r2,2
  80590c:	18800305 	stb	r2,12(r3)
        return(0xFF); /* Out of bounds */
  805910:	00803fc4 	movi	r2,255
  805914:	e0bfff15 	stw	r2,-4(fp)
  805918:	00000c06 	br	80594c <ioman_getAttr+0x74>
    }

    return(ioman->status[bufplace]&(1<<attribute));
  80591c:	e0fffd0b 	ldhu	r3,-12(fp)
  805920:	e0bffc17 	ldw	r2,-16(fp)
  805924:	1885883a 	add	r2,r3,r2
  805928:	10802004 	addi	r2,r2,128
  80592c:	10800003 	ldbu	r2,0(r2)
  805930:	1009883a 	mov	r4,r2
  805934:	e0fffe03 	ldbu	r3,-8(fp)
  805938:	00800044 	movi	r2,1
  80593c:	10c4983a 	sll	r2,r2,r3
  805940:	2084703a 	and	r2,r4,r2
  805944:	10803fcc 	andi	r2,r2,255
  805948:	e0bfff15 	stw	r2,-4(fp)
  80594c:	e0bfff17 	ldw	r2,-4(fp)
}
  805950:	e037883a 	mov	sp,fp
  805954:	df000017 	ldw	fp,0(sp)
  805958:	dec00104 	addi	sp,sp,4
  80595c:	f800283a 	ret

00805960 <ioman_getUseCnt>:
/*****************************************************************************/

euint8 ioman_getUseCnt(IOManager *ioman,euint16 bufplace)
{
  805960:	defffc04 	addi	sp,sp,-16
  805964:	df000315 	stw	fp,12(sp)
  805968:	df000304 	addi	fp,sp,12
  80596c:	e13ffd15 	stw	r4,-12(fp)
  805970:	e17ffe0d 	sth	r5,-8(fp)
    if(bufplace>=ioman->numbuf){
  805974:	e0bffd17 	ldw	r2,-12(fp)
  805978:	1080020b 	ldhu	r2,8(r2)
  80597c:	10ffffcc 	andi	r3,r2,65535
  805980:	e0bffe0b 	ldhu	r2,-8(fp)
  805984:	10c00536 	bltu	r2,r3,80599c <ioman_getUseCnt+0x3c>
        ioman_setError(ioman,IOMAN_ERR_OPOUTOFBOUNDS);
  805988:	e0fffd17 	ldw	r3,-12(fp)
  80598c:	00800144 	movi	r2,5
  805990:	18800305 	stb	r2,12(r3)
        return(0x00);
  805994:	e03fff15 	stw	zero,-4(fp)
  805998:	00000706 	br	8059b8 <ioman_getUseCnt+0x58>
    }
    return(ioman->usage[bufplace]);
  80599c:	e0fffe0b 	ldhu	r3,-8(fp)
  8059a0:	e0bffd17 	ldw	r2,-12(fp)
  8059a4:	1885883a 	add	r2,r3,r2
  8059a8:	10802104 	addi	r2,r2,132
  8059ac:	10800003 	ldbu	r2,0(r2)
  8059b0:	10803fcc 	andi	r2,r2,255
  8059b4:	e0bfff15 	stw	r2,-4(fp)
  8059b8:	e0bfff17 	ldw	r2,-4(fp)
}
  8059bc:	e037883a 	mov	sp,fp
  8059c0:	df000017 	ldw	fp,0(sp)
  8059c4:	dec00104 	addi	sp,sp,4
  8059c8:	f800283a 	ret

008059cc <ioman_incUseCnt>:
/*****************************************************************************/


void ioman_incUseCnt(IOManager *ioman,euint16 bufplace)
{
  8059cc:	defffd04 	addi	sp,sp,-12
  8059d0:	df000215 	stw	fp,8(sp)
  8059d4:	df000204 	addi	fp,sp,8
  8059d8:	e13ffe15 	stw	r4,-8(fp)
  8059dc:	e17fff0d 	sth	r5,-4(fp)
    if(bufplace>=ioman->numbuf){
  8059e0:	e0bffe17 	ldw	r2,-8(fp)
  8059e4:	1080020b 	ldhu	r2,8(r2)
  8059e8:	10ffffcc 	andi	r3,r2,65535
  8059ec:	e0bfff0b 	ldhu	r2,-4(fp)
  8059f0:	10c00436 	bltu	r2,r3,805a04 <ioman_incUseCnt+0x38>
        ioman_setError(ioman,IOMAN_ERR_OPOUTOFBOUNDS);
  8059f4:	e0fffe17 	ldw	r3,-8(fp)
  8059f8:	00800144 	movi	r2,5
  8059fc:	18800305 	stb	r2,12(r3)
        return;
  805a00:	00001306 	br	805a50 <ioman_incUseCnt+0x84>
    }
    if(ioman->usage[bufplace]==0xFF)return;
  805a04:	e0ffff0b 	ldhu	r3,-4(fp)
  805a08:	e0bffe17 	ldw	r2,-8(fp)
  805a0c:	1885883a 	add	r2,r3,r2
  805a10:	10802104 	addi	r2,r2,132
  805a14:	10800003 	ldbu	r2,0(r2)
  805a18:	10803fcc 	andi	r2,r2,255
  805a1c:	10803fe0 	cmpeqi	r2,r2,255
  805a20:	10000b1e 	bne	r2,zero,805a50 <ioman_incUseCnt+0x84>
    else ioman->usage[bufplace]++;
  805a24:	e13fff0b 	ldhu	r4,-4(fp)
  805a28:	e0bffe17 	ldw	r2,-8(fp)
  805a2c:	2085883a 	add	r2,r4,r2
  805a30:	10802104 	addi	r2,r2,132
  805a34:	10800003 	ldbu	r2,0(r2)
  805a38:	10800044 	addi	r2,r2,1
  805a3c:	1007883a 	mov	r3,r2
  805a40:	e0bffe17 	ldw	r2,-8(fp)
  805a44:	2085883a 	add	r2,r4,r2
  805a48:	10802104 	addi	r2,r2,132
  805a4c:	10c00005 	stb	r3,0(r2)
}
  805a50:	e037883a 	mov	sp,fp
  805a54:	df000017 	ldw	fp,0(sp)
  805a58:	dec00104 	addi	sp,sp,4
  805a5c:	f800283a 	ret

00805a60 <ioman_decUseCnt>:
/*****************************************************************************/

void ioman_decUseCnt(IOManager *ioman,euint16 bufplace)
{
  805a60:	defffd04 	addi	sp,sp,-12
  805a64:	df000215 	stw	fp,8(sp)
  805a68:	df000204 	addi	fp,sp,8
  805a6c:	e13ffe15 	stw	r4,-8(fp)
  805a70:	e17fff0d 	sth	r5,-4(fp)
    if(bufplace>=ioman->numbuf){
  805a74:	e0bffe17 	ldw	r2,-8(fp)
  805a78:	1080020b 	ldhu	r2,8(r2)
  805a7c:	10ffffcc 	andi	r3,r2,65535
  805a80:	e0bfff0b 	ldhu	r2,-4(fp)
  805a84:	10c00436 	bltu	r2,r3,805a98 <ioman_decUseCnt+0x38>
        ioman_setError(ioman,IOMAN_ERR_OPOUTOFBOUNDS);
  805a88:	e0fffe17 	ldw	r3,-8(fp)
  805a8c:	00800144 	movi	r2,5
  805a90:	18800305 	stb	r2,12(r3)
        return;
  805a94:	00001306 	br	805ae4 <ioman_decUseCnt+0x84>
    }
    if(ioman->usage[bufplace]==0x0)return;
  805a98:	e0ffff0b 	ldhu	r3,-4(fp)
  805a9c:	e0bffe17 	ldw	r2,-8(fp)
  805aa0:	1885883a 	add	r2,r3,r2
  805aa4:	10802104 	addi	r2,r2,132
  805aa8:	10800003 	ldbu	r2,0(r2)
  805aac:	10803fcc 	andi	r2,r2,255
  805ab0:	1005003a 	cmpeq	r2,r2,zero
  805ab4:	10000b1e 	bne	r2,zero,805ae4 <ioman_decUseCnt+0x84>
    else ioman->usage[bufplace]--;
  805ab8:	e13fff0b 	ldhu	r4,-4(fp)
  805abc:	e0bffe17 	ldw	r2,-8(fp)
  805ac0:	2085883a 	add	r2,r4,r2
  805ac4:	10802104 	addi	r2,r2,132
  805ac8:	10800003 	ldbu	r2,0(r2)
  805acc:	10bfffc4 	addi	r2,r2,-1
  805ad0:	1007883a 	mov	r3,r2
  805ad4:	e0bffe17 	ldw	r2,-8(fp)
  805ad8:	2085883a 	add	r2,r4,r2
  805adc:	10802104 	addi	r2,r2,132
  805ae0:	10c00005 	stb	r3,0(r2)
}
  805ae4:	e037883a 	mov	sp,fp
  805ae8:	df000017 	ldw	fp,0(sp)
  805aec:	dec00104 	addi	sp,sp,4
  805af0:	f800283a 	ret

00805af4 <ioman_resetUseCnt>:
/*****************************************************************************/

void ioman_resetUseCnt(IOManager *ioman,euint16 bufplace)
{
  805af4:	defffd04 	addi	sp,sp,-12
  805af8:	df000215 	stw	fp,8(sp)
  805afc:	df000204 	addi	fp,sp,8
  805b00:	e13ffe15 	stw	r4,-8(fp)
  805b04:	e17fff0d 	sth	r5,-4(fp)
    if(bufplace>=ioman->numbuf){
  805b08:	e0bffe17 	ldw	r2,-8(fp)
  805b0c:	1080020b 	ldhu	r2,8(r2)
  805b10:	10ffffcc 	andi	r3,r2,65535
  805b14:	e0bfff0b 	ldhu	r2,-4(fp)
  805b18:	10c00436 	bltu	r2,r3,805b2c <ioman_resetUseCnt+0x38>
        ioman_setError(ioman,IOMAN_ERR_OPOUTOFBOUNDS);
  805b1c:	e0fffe17 	ldw	r3,-8(fp)
  805b20:	00800144 	movi	r2,5
  805b24:	18800305 	stb	r2,12(r3)
        return;
  805b28:	00000506 	br	805b40 <ioman_resetUseCnt+0x4c>
    }
    ioman->usage[bufplace]=0x00;
  805b2c:	e0ffff0b 	ldhu	r3,-4(fp)
  805b30:	e0bffe17 	ldw	r2,-8(fp)
  805b34:	1885883a 	add	r2,r3,r2
  805b38:	10802104 	addi	r2,r2,132
  805b3c:	10000005 	stb	zero,0(r2)
}
  805b40:	e037883a 	mov	sp,fp
  805b44:	df000017 	ldw	fp,0(sp)
  805b48:	dec00104 	addi	sp,sp,4
  805b4c:	f800283a 	ret

00805b50 <ioman_getRefCnt>:
/*****************************************************************************/

euint8 ioman_getRefCnt(IOManager *ioman,euint16 bufplace)
{
  805b50:	defffc04 	addi	sp,sp,-16
  805b54:	df000315 	stw	fp,12(sp)
  805b58:	df000304 	addi	fp,sp,12
  805b5c:	e13ffd15 	stw	r4,-12(fp)
  805b60:	e17ffe0d 	sth	r5,-8(fp)
    if(bufplace>=ioman->numbuf){
  805b64:	e0bffd17 	ldw	r2,-12(fp)
  805b68:	1080020b 	ldhu	r2,8(r2)
  805b6c:	10ffffcc 	andi	r3,r2,65535
  805b70:	e0bffe0b 	ldhu	r2,-8(fp)
  805b74:	10c00536 	bltu	r2,r3,805b8c <ioman_getRefCnt+0x3c>
        ioman_setError(ioman,IOMAN_ERR_OPOUTOFBOUNDS);
  805b78:	e0fffd17 	ldw	r3,-12(fp)
  805b7c:	00800144 	movi	r2,5
  805b80:	18800305 	stb	r2,12(r3)
        return(0x00);
  805b84:	e03fff15 	stw	zero,-4(fp)
  805b88:	00000706 	br	805ba8 <ioman_getRefCnt+0x58>
    }
    return(ioman->reference[bufplace]);
  805b8c:	e0fffe0b 	ldhu	r3,-8(fp)
  805b90:	e0bffd17 	ldw	r2,-12(fp)
  805b94:	1885883a 	add	r2,r3,r2
  805b98:	10802204 	addi	r2,r2,136
  805b9c:	10800003 	ldbu	r2,0(r2)
  805ba0:	10803fcc 	andi	r2,r2,255
  805ba4:	e0bfff15 	stw	r2,-4(fp)
  805ba8:	e0bfff17 	ldw	r2,-4(fp)
}
  805bac:	e037883a 	mov	sp,fp
  805bb0:	df000017 	ldw	fp,0(sp)
  805bb4:	dec00104 	addi	sp,sp,4
  805bb8:	f800283a 	ret

00805bbc <ioman_incRefCnt>:
/*****************************************************************************/

void ioman_incRefCnt(IOManager *ioman,euint16 bufplace)
{
  805bbc:	defffd04 	addi	sp,sp,-12
  805bc0:	df000215 	stw	fp,8(sp)
  805bc4:	df000204 	addi	fp,sp,8
  805bc8:	e13ffe15 	stw	r4,-8(fp)
  805bcc:	e17fff0d 	sth	r5,-4(fp)
    if(bufplace>=ioman->numbuf){
  805bd0:	e0bffe17 	ldw	r2,-8(fp)
  805bd4:	1080020b 	ldhu	r2,8(r2)
  805bd8:	10ffffcc 	andi	r3,r2,65535
  805bdc:	e0bfff0b 	ldhu	r2,-4(fp)
  805be0:	10c00436 	bltu	r2,r3,805bf4 <ioman_incRefCnt+0x38>
        ioman_setError(ioman,IOMAN_ERR_OPOUTOFBOUNDS);
  805be4:	e0fffe17 	ldw	r3,-8(fp)
  805be8:	00800144 	movi	r2,5
  805bec:	18800305 	stb	r2,12(r3)
        return;
  805bf0:	00001306 	br	805c40 <ioman_incRefCnt+0x84>
    }
    if(ioman->reference[bufplace]==0xFF)return;
  805bf4:	e0ffff0b 	ldhu	r3,-4(fp)
  805bf8:	e0bffe17 	ldw	r2,-8(fp)
  805bfc:	1885883a 	add	r2,r3,r2
  805c00:	10802204 	addi	r2,r2,136
  805c04:	10800003 	ldbu	r2,0(r2)
  805c08:	10803fcc 	andi	r2,r2,255
  805c0c:	10803fe0 	cmpeqi	r2,r2,255
  805c10:	10000b1e 	bne	r2,zero,805c40 <ioman_incRefCnt+0x84>
    else ioman->reference[bufplace]++;
  805c14:	e13fff0b 	ldhu	r4,-4(fp)
  805c18:	e0bffe17 	ldw	r2,-8(fp)
  805c1c:	2085883a 	add	r2,r4,r2
  805c20:	10802204 	addi	r2,r2,136
  805c24:	10800003 	ldbu	r2,0(r2)
  805c28:	10800044 	addi	r2,r2,1
  805c2c:	1007883a 	mov	r3,r2
  805c30:	e0bffe17 	ldw	r2,-8(fp)
  805c34:	2085883a 	add	r2,r4,r2
  805c38:	10802204 	addi	r2,r2,136
  805c3c:	10c00005 	stb	r3,0(r2)
}
  805c40:	e037883a 	mov	sp,fp
  805c44:	df000017 	ldw	fp,0(sp)
  805c48:	dec00104 	addi	sp,sp,4
  805c4c:	f800283a 	ret

00805c50 <ioman_decRefCnt>:
/*****************************************************************************/

void ioman_decRefCnt(IOManager *ioman,euint16 bufplace)
{
  805c50:	defffd04 	addi	sp,sp,-12
  805c54:	df000215 	stw	fp,8(sp)
  805c58:	df000204 	addi	fp,sp,8
  805c5c:	e13ffe15 	stw	r4,-8(fp)
  805c60:	e17fff0d 	sth	r5,-4(fp)
    if(bufplace>=ioman->numbuf){
  805c64:	e0bffe17 	ldw	r2,-8(fp)
  805c68:	1080020b 	ldhu	r2,8(r2)
  805c6c:	10ffffcc 	andi	r3,r2,65535
  805c70:	e0bfff0b 	ldhu	r2,-4(fp)
  805c74:	10c00436 	bltu	r2,r3,805c88 <ioman_decRefCnt+0x38>
        ioman_setError(ioman,IOMAN_ERR_OPOUTOFBOUNDS);
  805c78:	e0fffe17 	ldw	r3,-8(fp)
  805c7c:	00800144 	movi	r2,5
  805c80:	18800305 	stb	r2,12(r3)
        return;
  805c84:	00001306 	br	805cd4 <ioman_decRefCnt+0x84>
    }
    if(ioman->reference[bufplace]==0x00)return;
  805c88:	e0ffff0b 	ldhu	r3,-4(fp)
  805c8c:	e0bffe17 	ldw	r2,-8(fp)
  805c90:	1885883a 	add	r2,r3,r2
  805c94:	10802204 	addi	r2,r2,136
  805c98:	10800003 	ldbu	r2,0(r2)
  805c9c:	10803fcc 	andi	r2,r2,255
  805ca0:	1005003a 	cmpeq	r2,r2,zero
  805ca4:	10000b1e 	bne	r2,zero,805cd4 <ioman_decRefCnt+0x84>
    else ioman->reference[bufplace]--;
  805ca8:	e13fff0b 	ldhu	r4,-4(fp)
  805cac:	e0bffe17 	ldw	r2,-8(fp)
  805cb0:	2085883a 	add	r2,r4,r2
  805cb4:	10802204 	addi	r2,r2,136
  805cb8:	10800003 	ldbu	r2,0(r2)
  805cbc:	10bfffc4 	addi	r2,r2,-1
  805cc0:	1007883a 	mov	r3,r2
  805cc4:	e0bffe17 	ldw	r2,-8(fp)
  805cc8:	2085883a 	add	r2,r4,r2
  805ccc:	10802204 	addi	r2,r2,136
  805cd0:	10c00005 	stb	r3,0(r2)
}
  805cd4:	e037883a 	mov	sp,fp
  805cd8:	df000017 	ldw	fp,0(sp)
  805cdc:	dec00104 	addi	sp,sp,4
  805ce0:	f800283a 	ret

00805ce4 <ioman_resetRefCnt>:
/*****************************************************************************/

void ioman_resetRefCnt(IOManager *ioman,euint16 bufplace)
{
  805ce4:	defffd04 	addi	sp,sp,-12
  805ce8:	df000215 	stw	fp,8(sp)
  805cec:	df000204 	addi	fp,sp,8
  805cf0:	e13ffe15 	stw	r4,-8(fp)
  805cf4:	e17fff0d 	sth	r5,-4(fp)
    if(bufplace>=ioman->numbuf){
  805cf8:	e0bffe17 	ldw	r2,-8(fp)
  805cfc:	1080020b 	ldhu	r2,8(r2)
  805d00:	10ffffcc 	andi	r3,r2,65535
  805d04:	e0bfff0b 	ldhu	r2,-4(fp)
  805d08:	10c00436 	bltu	r2,r3,805d1c <ioman_resetRefCnt+0x38>
        ioman_setError(ioman,IOMAN_ERR_OPOUTOFBOUNDS);
  805d0c:	e0fffe17 	ldw	r3,-8(fp)
  805d10:	00800144 	movi	r2,5
  805d14:	18800305 	stb	r2,12(r3)
        return;
  805d18:	00000506 	br	805d30 <ioman_resetRefCnt+0x4c>
    }
    ioman->reference[bufplace]=0x00;
  805d1c:	e0ffff0b 	ldhu	r3,-4(fp)
  805d20:	e0bffe17 	ldw	r2,-8(fp)
  805d24:	1885883a 	add	r2,r3,r2
  805d28:	10802204 	addi	r2,r2,136
  805d2c:	10000005 	stb	zero,0(r2)
}
  805d30:	e037883a 	mov	sp,fp
  805d34:	df000017 	ldw	fp,0(sp)
  805d38:	dec00104 	addi	sp,sp,4
  805d3c:	f800283a 	ret

00805d40 <ioman_pop>:
/*****************************************************************************/

esint8 ioman_pop(IOManager *ioman,euint16 bufplace)
{
  805d40:	defffc04 	addi	sp,sp,-16
  805d44:	df000315 	stw	fp,12(sp)
  805d48:	df000304 	addi	fp,sp,12
  805d4c:	e13ffd15 	stw	r4,-12(fp)
  805d50:	e17ffe0d 	sth	r5,-8(fp)
    if(bufplace>=ioman->numbuf){
  805d54:	e0bffd17 	ldw	r2,-12(fp)
  805d58:	1080020b 	ldhu	r2,8(r2)
  805d5c:	10ffffcc 	andi	r3,r2,65535
  805d60:	e0bffe0b 	ldhu	r2,-8(fp)
  805d64:	10c00636 	bltu	r2,r3,805d80 <ioman_pop+0x40>
        ioman_setError(ioman,IOMAN_ERR_POPEMPTYSTACK);
  805d68:	e0fffd17 	ldw	r3,-12(fp)
  805d6c:	008001c4 	movi	r2,7
  805d70:	18800305 	stb	r2,12(r3)
        return(-1);
  805d74:	00bfffc4 	movi	r2,-1
  805d78:	e0bfff15 	stw	r2,-4(fp)
  805d7c:	00006006 	br	805f00 <ioman_pop+0x1c0>
    }
    if(ioman->itptr[bufplace]==0 || ioman->itptr[bufplace]>IOMAN_NUMITERATIONS)return(-1);
  805d80:	e0fffe0b 	ldhu	r3,-8(fp)
  805d84:	e0bffd17 	ldw	r2,-12(fp)
  805d88:	1885883a 	add	r2,r3,r2
  805d8c:	10802304 	addi	r2,r2,140
  805d90:	10800003 	ldbu	r2,0(r2)
  805d94:	10803fcc 	andi	r2,r2,255
  805d98:	1005003a 	cmpeq	r2,r2,zero
  805d9c:	1000081e 	bne	r2,zero,805dc0 <ioman_pop+0x80>
  805da0:	e0fffe0b 	ldhu	r3,-8(fp)
  805da4:	e0bffd17 	ldw	r2,-12(fp)
  805da8:	1885883a 	add	r2,r3,r2
  805dac:	10802304 	addi	r2,r2,140
  805db0:	10800003 	ldbu	r2,0(r2)
  805db4:	10803fcc 	andi	r2,r2,255
  805db8:	10800130 	cmpltui	r2,r2,4
  805dbc:	1000031e 	bne	r2,zero,805dcc <ioman_pop+0x8c>
  805dc0:	00bfffc4 	movi	r2,-1
  805dc4:	e0bfff15 	stw	r2,-4(fp)
  805dc8:	00004d06 	br	805f00 <ioman_pop+0x1c0>
    ioman->sector[bufplace] = ioman->stack[bufplace][ioman->itptr[bufplace]].sector;
  805dcc:	e1bffe0b 	ldhu	r6,-8(fp)
  805dd0:	e13ffe0b 	ldhu	r4,-8(fp)
  805dd4:	e0fffe0b 	ldhu	r3,-8(fp)
  805dd8:	e0bffd17 	ldw	r2,-12(fp)
  805ddc:	1885883a 	add	r2,r3,r2
  805de0:	10802304 	addi	r2,r2,140
  805de4:	10800003 	ldbu	r2,0(r2)
  805de8:	10c03fcc 	andi	r3,r2,255
  805dec:	e17ffd17 	ldw	r5,-12(fp)
  805df0:	2005883a 	mov	r2,r4
  805df4:	1085883a 	add	r2,r2,r2
  805df8:	1105883a 	add	r2,r2,r4
  805dfc:	10c5883a 	add	r2,r2,r3
  805e00:	100490fa 	slli	r2,r2,3
  805e04:	1145883a 	add	r2,r2,r5
  805e08:	10800404 	addi	r2,r2,16
  805e0c:	11000017 	ldw	r4,0(r2)
  805e10:	e0fffd17 	ldw	r3,-12(fp)
  805e14:	3185883a 	add	r2,r6,r6
  805e18:	1085883a 	add	r2,r2,r2
  805e1c:	10c5883a 	add	r2,r2,r3
  805e20:	10801c04 	addi	r2,r2,112
  805e24:	11000015 	stw	r4,0(r2)
    ioman->status[bufplace] = ioman->stack[bufplace][ioman->itptr[bufplace]].status;
  805e28:	e1bffe0b 	ldhu	r6,-8(fp)
  805e2c:	e13ffe0b 	ldhu	r4,-8(fp)
  805e30:	e0fffe0b 	ldhu	r3,-8(fp)
  805e34:	e0bffd17 	ldw	r2,-12(fp)
  805e38:	1885883a 	add	r2,r3,r2
  805e3c:	10802304 	addi	r2,r2,140
  805e40:	10800003 	ldbu	r2,0(r2)
  805e44:	10c03fcc 	andi	r3,r2,255
  805e48:	e17ffd17 	ldw	r5,-12(fp)
  805e4c:	2005883a 	mov	r2,r4
  805e50:	1085883a 	add	r2,r2,r2
  805e54:	1105883a 	add	r2,r2,r4
  805e58:	10c5883a 	add	r2,r2,r3
  805e5c:	100490fa 	slli	r2,r2,3
  805e60:	1145883a 	add	r2,r2,r5
  805e64:	10800504 	addi	r2,r2,20
  805e68:	10c00003 	ldbu	r3,0(r2)
  805e6c:	e0bffd17 	ldw	r2,-12(fp)
  805e70:	3085883a 	add	r2,r6,r2
  805e74:	10802004 	addi	r2,r2,128
  805e78:	10c00005 	stb	r3,0(r2)
    ioman->usage[bufplace]  = ioman->stack[bufplace][ioman->itptr[bufplace]].usage; 
  805e7c:	e1bffe0b 	ldhu	r6,-8(fp)
  805e80:	e13ffe0b 	ldhu	r4,-8(fp)
  805e84:	e0fffe0b 	ldhu	r3,-8(fp)
  805e88:	e0bffd17 	ldw	r2,-12(fp)
  805e8c:	1885883a 	add	r2,r3,r2
  805e90:	10802304 	addi	r2,r2,140
  805e94:	10800003 	ldbu	r2,0(r2)
  805e98:	10c03fcc 	andi	r3,r2,255
  805e9c:	e17ffd17 	ldw	r5,-12(fp)
  805ea0:	2005883a 	mov	r2,r4
  805ea4:	1085883a 	add	r2,r2,r2
  805ea8:	1105883a 	add	r2,r2,r4
  805eac:	10c5883a 	add	r2,r2,r3
  805eb0:	100490fa 	slli	r2,r2,3
  805eb4:	1145883a 	add	r2,r2,r5
  805eb8:	10800504 	addi	r2,r2,20
  805ebc:	10c00043 	ldbu	r3,1(r2)
  805ec0:	e0bffd17 	ldw	r2,-12(fp)
  805ec4:	3085883a 	add	r2,r6,r2
  805ec8:	10802104 	addi	r2,r2,132
  805ecc:	10c00005 	stb	r3,0(r2)
    ioman->itptr[bufplace]--;
  805ed0:	e13ffe0b 	ldhu	r4,-8(fp)
  805ed4:	e0bffd17 	ldw	r2,-12(fp)
  805ed8:	2085883a 	add	r2,r4,r2
  805edc:	10802304 	addi	r2,r2,140
  805ee0:	10800003 	ldbu	r2,0(r2)
  805ee4:	10bfffc4 	addi	r2,r2,-1
  805ee8:	1007883a 	mov	r3,r2
  805eec:	e0bffd17 	ldw	r2,-12(fp)
  805ef0:	2085883a 	add	r2,r4,r2
  805ef4:	10802304 	addi	r2,r2,140
  805ef8:	10c00005 	stb	r3,0(r2)
    return(0);
  805efc:	e03fff15 	stw	zero,-4(fp)
  805f00:	e0bfff17 	ldw	r2,-4(fp)
}
  805f04:	e037883a 	mov	sp,fp
  805f08:	df000017 	ldw	fp,0(sp)
  805f0c:	dec00104 	addi	sp,sp,4
  805f10:	f800283a 	ret

00805f14 <ioman_push>:
/*****************************************************************************/

esint8 ioman_push(IOManager *ioman,euint16 bufplace)
{
  805f14:	defffc04 	addi	sp,sp,-16
  805f18:	df000315 	stw	fp,12(sp)
  805f1c:	df000304 	addi	fp,sp,12
  805f20:	e13ffd15 	stw	r4,-12(fp)
  805f24:	e17ffe0d 	sth	r5,-8(fp)
    if(bufplace>=ioman->numbuf){
  805f28:	e0bffd17 	ldw	r2,-12(fp)
  805f2c:	1080020b 	ldhu	r2,8(r2)
  805f30:	10ffffcc 	andi	r3,r2,65535
  805f34:	e0bffe0b 	ldhu	r2,-8(fp)
  805f38:	10c00636 	bltu	r2,r3,805f54 <ioman_push+0x40>
        ioman_setError(ioman,IOMAN_ERR_OPOUTOFBOUNDS);
  805f3c:	e0fffd17 	ldw	r3,-12(fp)
  805f40:	00800144 	movi	r2,5
  805f44:	18800305 	stb	r2,12(r3)
        return(-1);
  805f48:	00bfffc4 	movi	r2,-1
  805f4c:	e0bfff15 	stw	r2,-4(fp)
  805f50:	00005b06 	br	8060c0 <ioman_push+0x1ac>
    }
    if(ioman->itptr[bufplace]>=IOMAN_NUMITERATIONS){
  805f54:	e0fffe0b 	ldhu	r3,-8(fp)
  805f58:	e0bffd17 	ldw	r2,-12(fp)
  805f5c:	1885883a 	add	r2,r3,r2
  805f60:	10802304 	addi	r2,r2,140
  805f64:	10800003 	ldbu	r2,0(r2)
  805f68:	10803fcc 	andi	r2,r2,255
  805f6c:	108000f0 	cmpltui	r2,r2,3
  805f70:	1000061e 	bne	r2,zero,805f8c <ioman_push+0x78>
        ioman_setError(ioman,IOMAN_ERR_PUSHBEYONDSTACK);    
  805f74:	e0fffd17 	ldw	r3,-12(fp)
  805f78:	00800184 	movi	r2,6
  805f7c:	18800305 	stb	r2,12(r3)
        return(-1);
  805f80:	00bfffc4 	movi	r2,-1
  805f84:	e0bfff15 	stw	r2,-4(fp)
  805f88:	00004d06 	br	8060c0 <ioman_push+0x1ac>
    }
    ioman->itptr[bufplace]++;
  805f8c:	e13ffe0b 	ldhu	r4,-8(fp)
  805f90:	e0bffd17 	ldw	r2,-12(fp)
  805f94:	2085883a 	add	r2,r4,r2
  805f98:	10802304 	addi	r2,r2,140
  805f9c:	10800003 	ldbu	r2,0(r2)
  805fa0:	10800044 	addi	r2,r2,1
  805fa4:	1007883a 	mov	r3,r2
  805fa8:	e0bffd17 	ldw	r2,-12(fp)
  805fac:	2085883a 	add	r2,r4,r2
  805fb0:	10802304 	addi	r2,r2,140
  805fb4:	10c00005 	stb	r3,0(r2)
    ioman->stack[bufplace][ioman->itptr[bufplace]].sector = ioman->sector[bufplace];
  805fb8:	e17ffe0b 	ldhu	r5,-8(fp)
  805fbc:	e0fffe0b 	ldhu	r3,-8(fp)
  805fc0:	e0bffd17 	ldw	r2,-12(fp)
  805fc4:	1885883a 	add	r2,r3,r2
  805fc8:	10802304 	addi	r2,r2,140
  805fcc:	10800003 	ldbu	r2,0(r2)
  805fd0:	11803fcc 	andi	r6,r2,255
  805fd4:	e0bffe0b 	ldhu	r2,-8(fp)
  805fd8:	e0fffd17 	ldw	r3,-12(fp)
  805fdc:	1085883a 	add	r2,r2,r2
  805fe0:	1085883a 	add	r2,r2,r2
  805fe4:	10c5883a 	add	r2,r2,r3
  805fe8:	10801c04 	addi	r2,r2,112
  805fec:	10c00017 	ldw	r3,0(r2)
  805ff0:	e13ffd17 	ldw	r4,-12(fp)
  805ff4:	2805883a 	mov	r2,r5
  805ff8:	1085883a 	add	r2,r2,r2
  805ffc:	1145883a 	add	r2,r2,r5
  806000:	1185883a 	add	r2,r2,r6
  806004:	100490fa 	slli	r2,r2,3
  806008:	1105883a 	add	r2,r2,r4
  80600c:	10800404 	addi	r2,r2,16
  806010:	10c00015 	stw	r3,0(r2)
    ioman->stack[bufplace][ioman->itptr[bufplace]].status = ioman->status[bufplace];
  806014:	e13ffe0b 	ldhu	r4,-8(fp)
  806018:	e0fffe0b 	ldhu	r3,-8(fp)
  80601c:	e0bffd17 	ldw	r2,-12(fp)
  806020:	1885883a 	add	r2,r3,r2
  806024:	10802304 	addi	r2,r2,140
  806028:	10800003 	ldbu	r2,0(r2)
  80602c:	11403fcc 	andi	r5,r2,255
  806030:	e0fffe0b 	ldhu	r3,-8(fp)
  806034:	e0bffd17 	ldw	r2,-12(fp)
  806038:	1885883a 	add	r2,r3,r2
  80603c:	10802004 	addi	r2,r2,128
  806040:	10c00003 	ldbu	r3,0(r2)
  806044:	e1bffd17 	ldw	r6,-12(fp)
  806048:	2005883a 	mov	r2,r4
  80604c:	1085883a 	add	r2,r2,r2
  806050:	1105883a 	add	r2,r2,r4
  806054:	1145883a 	add	r2,r2,r5
  806058:	100490fa 	slli	r2,r2,3
  80605c:	1185883a 	add	r2,r2,r6
  806060:	10800504 	addi	r2,r2,20
  806064:	10c00005 	stb	r3,0(r2)
    ioman->stack[bufplace][ioman->itptr[bufplace]].usage  = ioman->usage[bufplace];
  806068:	e13ffe0b 	ldhu	r4,-8(fp)
  80606c:	e0fffe0b 	ldhu	r3,-8(fp)
  806070:	e0bffd17 	ldw	r2,-12(fp)
  806074:	1885883a 	add	r2,r3,r2
  806078:	10802304 	addi	r2,r2,140
  80607c:	10800003 	ldbu	r2,0(r2)
  806080:	11403fcc 	andi	r5,r2,255
  806084:	e0fffe0b 	ldhu	r3,-8(fp)
  806088:	e0bffd17 	ldw	r2,-12(fp)
  80608c:	1885883a 	add	r2,r3,r2
  806090:	10802104 	addi	r2,r2,132
  806094:	10c00003 	ldbu	r3,0(r2)
  806098:	e1bffd17 	ldw	r6,-12(fp)
  80609c:	2005883a 	mov	r2,r4
  8060a0:	1085883a 	add	r2,r2,r2
  8060a4:	1105883a 	add	r2,r2,r4
  8060a8:	1145883a 	add	r2,r2,r5
  8060ac:	100490fa 	slli	r2,r2,3
  8060b0:	1185883a 	add	r2,r2,r6
  8060b4:	10800504 	addi	r2,r2,20
  8060b8:	10c00045 	stb	r3,1(r2)
    return(0);
  8060bc:	e03fff15 	stw	zero,-4(fp)
  8060c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8060c4:	e037883a 	mov	sp,fp
  8060c8:	df000017 	ldw	fp,0(sp)
  8060cc:	dec00104 	addi	sp,sp,4
  8060d0:	f800283a 	ret

008060d4 <ioman_getPtr>:
/*****************************************************************************/

euint8* ioman_getPtr(IOManager *ioman,euint16 bufplace)
{
  8060d4:	defffc04 	addi	sp,sp,-16
  8060d8:	df000315 	stw	fp,12(sp)
  8060dc:	df000304 	addi	fp,sp,12
  8060e0:	e13ffd15 	stw	r4,-12(fp)
  8060e4:	e17ffe0d 	sth	r5,-8(fp)
    if(bufplace>=ioman->numbuf){
  8060e8:	e0bffd17 	ldw	r2,-12(fp)
  8060ec:	1080020b 	ldhu	r2,8(r2)
  8060f0:	10ffffcc 	andi	r3,r2,65535
  8060f4:	e0bffe0b 	ldhu	r2,-8(fp)
  8060f8:	10c00536 	bltu	r2,r3,806110 <ioman_getPtr+0x3c>
        ioman_setError(ioman,IOMAN_ERR_OPOUTOFBOUNDS);
  8060fc:	e0fffd17 	ldw	r3,-12(fp)
  806100:	00800144 	movi	r2,5
  806104:	18800305 	stb	r2,12(r3)
        return(0);
  806108:	e03fff15 	stw	zero,-4(fp)
  80610c:	00000606 	br	806128 <ioman_getPtr+0x54>
    }
    return(ioman->bufptr+bufplace*512);
  806110:	e0bffd17 	ldw	r2,-12(fp)
  806114:	10c00117 	ldw	r3,4(r2)
  806118:	e0bffe0b 	ldhu	r2,-8(fp)
  80611c:	1004927a 	slli	r2,r2,9
  806120:	1887883a 	add	r3,r3,r2
  806124:	e0ffff15 	stw	r3,-4(fp)
  806128:	e0bfff17 	ldw	r2,-4(fp)
}
  80612c:	e037883a 	mov	sp,fp
  806130:	df000017 	ldw	fp,0(sp)
  806134:	dec00104 	addi	sp,sp,4
  806138:	f800283a 	ret

0080613c <ioman_getBp>:
/*****************************************************************************/

esint16 ioman_getBp(IOManager *ioman,euint8* buf)
{
  80613c:	defffb04 	addi	sp,sp,-20
  806140:	df000415 	stw	fp,16(sp)
  806144:	df000404 	addi	fp,sp,16
  806148:	e13ffc15 	stw	r4,-16(fp)
  80614c:	e17ffd15 	stw	r5,-12(fp)
    if(buf<(ioman->bufptr) || buf>=( ioman->bufptr+(ioman->numbuf*512) )){
  806150:	e0bffc17 	ldw	r2,-16(fp)
  806154:	10c00117 	ldw	r3,4(r2)
  806158:	e0bffd17 	ldw	r2,-12(fp)
  80615c:	10c00936 	bltu	r2,r3,806184 <ioman_getBp+0x48>
  806160:	e0bffc17 	ldw	r2,-16(fp)
  806164:	10c00117 	ldw	r3,4(r2)
  806168:	e0bffc17 	ldw	r2,-16(fp)
  80616c:	1080020b 	ldhu	r2,8(r2)
  806170:	10bfffcc 	andi	r2,r2,65535
  806174:	1004927a 	slli	r2,r2,9
  806178:	1887883a 	add	r3,r3,r2
  80617c:	e0bffd17 	ldw	r2,-12(fp)
  806180:	10c00636 	bltu	r2,r3,80619c <ioman_getBp+0x60>
        ioman_setError(ioman,IOMAN_ERR_CACHEPTROUTOFRANGE);
  806184:	e0fffc17 	ldw	r3,-16(fp)
  806188:	00800204 	movi	r2,8
  80618c:	18800305 	stb	r2,12(r3)
        return(-1);
  806190:	00bfffc4 	movi	r2,-1
  806194:	e0bffe15 	stw	r2,-8(fp)
  806198:	00001106 	br	8061e0 <ioman_getBp+0xa4>
    }
    return((buf-(ioman->bufptr))/512);
  80619c:	e0fffd17 	ldw	r3,-12(fp)
  8061a0:	e0bffc17 	ldw	r2,-16(fp)
  8061a4:	10800117 	ldw	r2,4(r2)
  8061a8:	1885c83a 	sub	r2,r3,r2
  8061ac:	e0bfff15 	stw	r2,-4(fp)
  8061b0:	e0ffff17 	ldw	r3,-4(fp)
  8061b4:	1804403a 	cmpge	r2,r3,zero
  8061b8:	1000031e 	bne	r2,zero,8061c8 <ioman_getBp+0x8c>
  8061bc:	e0bfff17 	ldw	r2,-4(fp)
  8061c0:	10807fc4 	addi	r2,r2,511
  8061c4:	e0bfff15 	stw	r2,-4(fp)
  8061c8:	e0ffff17 	ldw	r3,-4(fp)
  8061cc:	1805d27a 	srai	r2,r3,9
  8061d0:	10bfffcc 	andi	r2,r2,65535
  8061d4:	10a0001c 	xori	r2,r2,32768
  8061d8:	10a00004 	addi	r2,r2,-32768
  8061dc:	e0bffe15 	stw	r2,-8(fp)
  8061e0:	e0bffe17 	ldw	r2,-8(fp)
}
  8061e4:	e037883a 	mov	sp,fp
  8061e8:	df000017 	ldw	fp,0(sp)
  8061ec:	dec00104 	addi	sp,sp,4
  8061f0:	f800283a 	ret

008061f4 <ioman_readSector>:
/*****************************************************************************/

esint8 ioman_readSector(IOManager *ioman,euint32 address,euint8* buf)
{
  8061f4:	defff904 	addi	sp,sp,-28
  8061f8:	dfc00615 	stw	ra,24(sp)
  8061fc:	df000515 	stw	fp,20(sp)
  806200:	df000504 	addi	fp,sp,20
  806204:	e13ffc15 	stw	r4,-16(fp)
  806208:	e17ffd15 	stw	r5,-12(fp)
  80620c:	e1bffe15 	stw	r6,-8(fp)
    esint8 r;

    if(buf==0){
  806210:	e0bffe17 	ldw	r2,-8(fp)
  806214:	1004c03a 	cmpne	r2,r2,zero
  806218:	1000031e 	bne	r2,zero,806228 <ioman_readSector+0x34>
        return(-1);
  80621c:	00bfffc4 	movi	r2,-1
  806220:	e0bfff15 	stw	r2,-4(fp)
  806224:	00001006 	br	806268 <ioman_readSector+0x74>
    }
    
    r=if_readBuf(ioman->iface,address,buf);
  806228:	e0bffc17 	ldw	r2,-16(fp)
  80622c:	11000017 	ldw	r4,0(r2)
  806230:	e17ffd17 	ldw	r5,-12(fp)
  806234:	e1bffe17 	ldw	r6,-8(fp)
  806238:	0807e200 	call	807e20 <if_readBuf>
  80623c:	e0bffb05 	stb	r2,-20(fp)
    
    if(r!=0){
  806240:	e0bffb07 	ldb	r2,-20(fp)
  806244:	1005003a 	cmpeq	r2,r2,zero
  806248:	1000061e 	bne	r2,zero,806264 <ioman_readSector+0x70>
        ioman_setError(ioman,IOMAN_ERR_READFAIL);
  80624c:	e0fffc17 	ldw	r3,-16(fp)
  806250:	008000c4 	movi	r2,3
  806254:	18800305 	stb	r2,12(r3)
        return(-1);
  806258:	00bfffc4 	movi	r2,-1
  80625c:	e0bfff15 	stw	r2,-4(fp)
  806260:	00000106 	br	806268 <ioman_readSector+0x74>
    }
    return(0);
  806264:	e03fff15 	stw	zero,-4(fp)
  806268:	e0bfff17 	ldw	r2,-4(fp)
}
  80626c:	e037883a 	mov	sp,fp
  806270:	dfc00117 	ldw	ra,4(sp)
  806274:	df000017 	ldw	fp,0(sp)
  806278:	dec00204 	addi	sp,sp,8
  80627c:	f800283a 	ret

00806280 <ioman_writeSector>:
/*****************************************************************************/

esint8 ioman_writeSector(IOManager *ioman, euint32 address, euint8* buf)
{
  806280:	defff904 	addi	sp,sp,-28
  806284:	dfc00615 	stw	ra,24(sp)
  806288:	df000515 	stw	fp,20(sp)
  80628c:	df000504 	addi	fp,sp,20
  806290:	e13ffc15 	stw	r4,-16(fp)
  806294:	e17ffd15 	stw	r5,-12(fp)
  806298:	e1bffe15 	stw	r6,-8(fp)
    esint8 r;

    if(buf==0)return(-1);
  80629c:	e0bffe17 	ldw	r2,-8(fp)
  8062a0:	1004c03a 	cmpne	r2,r2,zero
  8062a4:	1000031e 	bne	r2,zero,8062b4 <ioman_writeSector+0x34>
  8062a8:	00bfffc4 	movi	r2,-1
  8062ac:	e0bfff15 	stw	r2,-4(fp)
  8062b0:	00001006 	br	8062f4 <ioman_writeSector+0x74>
    
    r=if_writeBuf(ioman->iface,address,buf);
  8062b4:	e0bffc17 	ldw	r2,-16(fp)
  8062b8:	11000017 	ldw	r4,0(r2)
  8062bc:	e17ffd17 	ldw	r5,-12(fp)
  8062c0:	e1bffe17 	ldw	r6,-8(fp)
  8062c4:	0807e700 	call	807e70 <if_writeBuf>
  8062c8:	e0bffb05 	stb	r2,-20(fp)

    if(r<=0){
  8062cc:	e0bffb07 	ldb	r2,-20(fp)
  8062d0:	10800048 	cmpgei	r2,r2,1
  8062d4:	1000061e 	bne	r2,zero,8062f0 <ioman_writeSector+0x70>
        ioman_setError(ioman,IOMAN_ERR_WRITEFAIL);
  8062d8:	e0fffc17 	ldw	r3,-16(fp)
  8062dc:	00800104 	movi	r2,4
  8062e0:	18800305 	stb	r2,12(r3)
        return(-1);
  8062e4:	00bfffc4 	movi	r2,-1
  8062e8:	e0bfff15 	stw	r2,-4(fp)
  8062ec:	00000106 	br	8062f4 <ioman_writeSector+0x74>
    }
    return(0);
  8062f0:	e03fff15 	stw	zero,-4(fp)
  8062f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8062f8:	e037883a 	mov	sp,fp
  8062fc:	dfc00117 	ldw	ra,4(sp)
  806300:	df000017 	ldw	fp,0(sp)
  806304:	dec00204 	addi	sp,sp,8
  806308:	f800283a 	ret

0080630c <ioman_resetCacheItem>:
/*****************************************************************************/

void ioman_resetCacheItem(IOManager *ioman,euint16 bufplace)
{
  80630c:	defffd04 	addi	sp,sp,-12
  806310:	df000215 	stw	fp,8(sp)
  806314:	df000204 	addi	fp,sp,8
  806318:	e13ffe15 	stw	r4,-8(fp)
  80631c:	e17fff0d 	sth	r5,-4(fp)
    if(bufplace>=ioman->numbuf){
  806320:	e0bffe17 	ldw	r2,-8(fp)
  806324:	1080020b 	ldhu	r2,8(r2)
  806328:	10ffffcc 	andi	r3,r2,65535
  80632c:	e0bfff0b 	ldhu	r2,-4(fp)
  806330:	10c00436 	bltu	r2,r3,806344 <ioman_resetCacheItem+0x38>
        ioman_setError(ioman,IOMAN_ERR_OPOUTOFBOUNDS);
  806334:	e0fffe17 	ldw	r3,-8(fp)
  806338:	00800144 	movi	r2,5
  80633c:	18800305 	stb	r2,12(r3)
        return;
  806340:	00001606 	br	80639c <ioman_resetCacheItem+0x90>
    }
    ioman->sector[bufplace]    = 0;
  806344:	e0bfff0b 	ldhu	r2,-4(fp)
  806348:	e0fffe17 	ldw	r3,-8(fp)
  80634c:	1085883a 	add	r2,r2,r2
  806350:	1085883a 	add	r2,r2,r2
  806354:	10c5883a 	add	r2,r2,r3
  806358:	10801c04 	addi	r2,r2,112
  80635c:	10000015 	stw	zero,0(r2)
    ioman->status[bufplace]    = 0;
  806360:	e0ffff0b 	ldhu	r3,-4(fp)
  806364:	e0bffe17 	ldw	r2,-8(fp)
  806368:	1885883a 	add	r2,r3,r2
  80636c:	10802004 	addi	r2,r2,128
  806370:	10000005 	stb	zero,0(r2)
    ioman->usage[bufplace]     = 0;
  806374:	e0ffff0b 	ldhu	r3,-4(fp)
  806378:	e0bffe17 	ldw	r2,-8(fp)
  80637c:	1885883a 	add	r2,r3,r2
  806380:	10802104 	addi	r2,r2,132
  806384:	10000005 	stb	zero,0(r2)
    ioman->reference[bufplace] = 0;
  806388:	e0ffff0b 	ldhu	r3,-4(fp)
  80638c:	e0bffe17 	ldw	r2,-8(fp)
  806390:	1885883a 	add	r2,r3,r2
  806394:	10802204 	addi	r2,r2,136
  806398:	10000005 	stb	zero,0(r2)
}
  80639c:	e037883a 	mov	sp,fp
  8063a0:	df000017 	ldw	fp,0(sp)
  8063a4:	dec00104 	addi	sp,sp,4
  8063a8:	f800283a 	ret

008063ac <ioman_findSectorInCache>:
/*****************************************************************************/

esint32 ioman_findSectorInCache(IOManager *ioman, euint32 address)
{
  8063ac:	defffa04 	addi	sp,sp,-24
  8063b0:	dfc00515 	stw	ra,20(sp)
  8063b4:	df000415 	stw	fp,16(sp)
  8063b8:	df000404 	addi	fp,sp,16
  8063bc:	e13ffd15 	stw	r4,-12(fp)
  8063c0:	e17ffe15 	stw	r5,-8(fp)
    euint16 c;
    
    for(c=0;c<ioman->numbuf;c++){
  8063c4:	e03ffc0d 	sth	zero,-16(fp)
  8063c8:	00001606 	br	806424 <ioman_findSectorInCache+0x78>
        if(ioman_isValid(c) && ioman->sector[c] == address)return(c);
  8063cc:	e17ffc0b 	ldhu	r5,-16(fp)
  8063d0:	e13ffd17 	ldw	r4,-12(fp)
  8063d4:	000d883a 	mov	r6,zero
  8063d8:	08058d80 	call	8058d8 <ioman_getAttr>
  8063dc:	10803fcc 	andi	r2,r2,255
  8063e0:	1005003a 	cmpeq	r2,r2,zero
  8063e4:	10000c1e 	bne	r2,zero,806418 <ioman_findSectorInCache+0x6c>
  8063e8:	e0bffc0b 	ldhu	r2,-16(fp)
  8063ec:	e0fffd17 	ldw	r3,-12(fp)
  8063f0:	1085883a 	add	r2,r2,r2
  8063f4:	1085883a 	add	r2,r2,r2
  8063f8:	10c5883a 	add	r2,r2,r3
  8063fc:	10801c04 	addi	r2,r2,112
  806400:	10c00017 	ldw	r3,0(r2)
  806404:	e0bffe17 	ldw	r2,-8(fp)
  806408:	1880031e 	bne	r3,r2,806418 <ioman_findSectorInCache+0x6c>
  80640c:	e0bffc0b 	ldhu	r2,-16(fp)
  806410:	e0bfff15 	stw	r2,-4(fp)
  806414:	00000a06 	br	806440 <ioman_findSectorInCache+0x94>

esint32 ioman_findSectorInCache(IOManager *ioman, euint32 address)
{
    euint16 c;
    
    for(c=0;c<ioman->numbuf;c++){
  806418:	e0bffc0b 	ldhu	r2,-16(fp)
  80641c:	10800044 	addi	r2,r2,1
  806420:	e0bffc0d 	sth	r2,-16(fp)
  806424:	e0bffd17 	ldw	r2,-12(fp)
  806428:	1080020b 	ldhu	r2,8(r2)
  80642c:	10ffffcc 	andi	r3,r2,65535
  806430:	e0bffc0b 	ldhu	r2,-16(fp)
  806434:	10ffe536 	bltu	r2,r3,8063cc <ioman_findSectorInCache+0x20>
        if(ioman_isValid(c) && ioman->sector[c] == address)return(c);
    }
    return(-1);
  806438:	00bfffc4 	movi	r2,-1
  80643c:	e0bfff15 	stw	r2,-4(fp)
  806440:	e0bfff17 	ldw	r2,-4(fp)
}
  806444:	e037883a 	mov	sp,fp
  806448:	dfc00117 	ldw	ra,4(sp)
  80644c:	df000017 	ldw	fp,0(sp)
  806450:	dec00204 	addi	sp,sp,8
  806454:	f800283a 	ret

00806458 <ioman_findFreeSpot>:
/*****************************************************************************/

esint32 ioman_findFreeSpot(IOManager *ioman)
{
  806458:	defffb04 	addi	sp,sp,-20
  80645c:	dfc00415 	stw	ra,16(sp)
  806460:	df000315 	stw	fp,12(sp)
  806464:	df000304 	addi	fp,sp,12
  806468:	e13ffe15 	stw	r4,-8(fp)
    euint16 c;
    
    for(c=0;c<ioman->numbuf;c++){
  80646c:	e03ffd0d 	sth	zero,-12(fp)
  806470:	00000d06 	br	8064a8 <ioman_findFreeSpot+0x50>
        if(!ioman_isValid(c))return(c);
  806474:	e17ffd0b 	ldhu	r5,-12(fp)
  806478:	e13ffe17 	ldw	r4,-8(fp)
  80647c:	000d883a 	mov	r6,zero
  806480:	08058d80 	call	8058d8 <ioman_getAttr>
  806484:	10803fcc 	andi	r2,r2,255
  806488:	1004c03a 	cmpne	r2,r2,zero
  80648c:	1000031e 	bne	r2,zero,80649c <ioman_findFreeSpot+0x44>
  806490:	e0bffd0b 	ldhu	r2,-12(fp)
  806494:	e0bfff15 	stw	r2,-4(fp)
  806498:	00000a06 	br	8064c4 <ioman_findFreeSpot+0x6c>

esint32 ioman_findFreeSpot(IOManager *ioman)
{
    euint16 c;
    
    for(c=0;c<ioman->numbuf;c++){
  80649c:	e0bffd0b 	ldhu	r2,-12(fp)
  8064a0:	10800044 	addi	r2,r2,1
  8064a4:	e0bffd0d 	sth	r2,-12(fp)
  8064a8:	e0bffe17 	ldw	r2,-8(fp)
  8064ac:	1080020b 	ldhu	r2,8(r2)
  8064b0:	10ffffcc 	andi	r3,r2,65535
  8064b4:	e0bffd0b 	ldhu	r2,-12(fp)
  8064b8:	10ffee36 	bltu	r2,r3,806474 <ioman_findFreeSpot+0x1c>
        if(!ioman_isValid(c))return(c);
    }
    return(-1);
  8064bc:	00bfffc4 	movi	r2,-1
  8064c0:	e0bfff15 	stw	r2,-4(fp)
  8064c4:	e0bfff17 	ldw	r2,-4(fp)
}
  8064c8:	e037883a 	mov	sp,fp
  8064cc:	dfc00117 	ldw	ra,4(sp)
  8064d0:	df000017 	ldw	fp,0(sp)
  8064d4:	dec00204 	addi	sp,sp,8
  8064d8:	f800283a 	ret

008064dc <ioman_findUnusedSpot>:
/*****************************************************************************/

esint32 ioman_findUnusedSpot(IOManager *ioman)
{
  8064dc:	defffb04 	addi	sp,sp,-20
  8064e0:	dfc00415 	stw	ra,16(sp)
  8064e4:	df000315 	stw	fp,12(sp)
  8064e8:	df000304 	addi	fp,sp,12
  8064ec:	e13fff15 	stw	r4,-4(fp)
    esint32 r=-1;
  8064f0:	00bfffc4 	movi	r2,-1
  8064f4:	e0bffe15 	stw	r2,-8(fp)
    euint16 c;
    euint8 fr=0,lr=0xFF;
  8064f8:	e03ffd45 	stb	zero,-11(fp)
  8064fc:	00bfffc4 	movi	r2,-1
  806500:	e0bffd05 	stb	r2,-12(fp)
    
    for(c=0;c<ioman->numbuf;c++){
  806504:	e03ffd8d 	sth	zero,-10(fp)
  806508:	00004506 	br	806620 <ioman_findUnusedSpot+0x144>
        if(ioman_getUseCnt(ioman,c)==0){
  80650c:	e17ffd8b 	ldhu	r5,-10(fp)
  806510:	e13fff17 	ldw	r4,-4(fp)
  806514:	08059600 	call	805960 <ioman_getUseCnt>
  806518:	10803fcc 	andi	r2,r2,255
  80651c:	1004c03a 	cmpne	r2,r2,zero
  806520:	10003c1e 	bne	r2,zero,806614 <ioman_findUnusedSpot+0x138>
            if(!ioman_isWritable(c) && !fr){
  806524:	e17ffd8b 	ldhu	r5,-10(fp)
  806528:	e13fff17 	ldw	r4,-4(fp)
  80652c:	01800084 	movi	r6,2
  806530:	08058d80 	call	8058d8 <ioman_getAttr>
  806534:	10803fcc 	andi	r2,r2,255
  806538:	1004c03a 	cmpne	r2,r2,zero
  80653c:	1000091e 	bne	r2,zero,806564 <ioman_findUnusedSpot+0x88>
  806540:	e0bffd43 	ldbu	r2,-11(fp)
  806544:	1004c03a 	cmpne	r2,r2,zero
  806548:	1000061e 	bne	r2,zero,806564 <ioman_findUnusedSpot+0x88>
                fr=1;
  80654c:	00800044 	movi	r2,1
  806550:	e0bffd45 	stb	r2,-11(fp)
                lr=0xFF;
  806554:	00bfffc4 	movi	r2,-1
  806558:	e0bffd05 	stb	r2,-12(fp)
                r=-1;
  80655c:	00bfffc4 	movi	r2,-1
  806560:	e0bffe15 	stw	r2,-8(fp)
            }
            if(ioman_isWritable(c) && !fr){
  806564:	e17ffd8b 	ldhu	r5,-10(fp)
  806568:	e13fff17 	ldw	r4,-4(fp)
  80656c:	01800084 	movi	r6,2
  806570:	08058d80 	call	8058d8 <ioman_getAttr>
  806574:	10803fcc 	andi	r2,r2,255
  806578:	1005003a 	cmpeq	r2,r2,zero
  80657c:	10000f1e 	bne	r2,zero,8065bc <ioman_findUnusedSpot+0xe0>
  806580:	e0bffd43 	ldbu	r2,-11(fp)
  806584:	1004c03a 	cmpne	r2,r2,zero
  806588:	10000c1e 	bne	r2,zero,8065bc <ioman_findUnusedSpot+0xe0>
                if(ioman_getRefCnt(ioman,c)<=lr){
  80658c:	e17ffd8b 	ldhu	r5,-10(fp)
  806590:	e13fff17 	ldw	r4,-4(fp)
  806594:	0805b500 	call	805b50 <ioman_getRefCnt>
  806598:	10c03fcc 	andi	r3,r2,255
  80659c:	e0bffd03 	ldbu	r2,-12(fp)
  8065a0:	10c00636 	bltu	r2,r3,8065bc <ioman_findUnusedSpot+0xe0>
                    r=c;
  8065a4:	e0bffd8b 	ldhu	r2,-10(fp)
  8065a8:	e0bffe15 	stw	r2,-8(fp)
                    lr=ioman_getRefCnt(ioman,c);
  8065ac:	e17ffd8b 	ldhu	r5,-10(fp)
  8065b0:	e13fff17 	ldw	r4,-4(fp)
  8065b4:	0805b500 	call	805b50 <ioman_getRefCnt>
  8065b8:	e0bffd05 	stb	r2,-12(fp)
                }
            }
            if(fr && !ioman_isWritable(c)){
  8065bc:	e0bffd43 	ldbu	r2,-11(fp)
  8065c0:	1005003a 	cmpeq	r2,r2,zero
  8065c4:	1000131e 	bne	r2,zero,806614 <ioman_findUnusedSpot+0x138>
  8065c8:	e17ffd8b 	ldhu	r5,-10(fp)
  8065cc:	e13fff17 	ldw	r4,-4(fp)
  8065d0:	01800084 	movi	r6,2
  8065d4:	08058d80 	call	8058d8 <ioman_getAttr>
  8065d8:	10803fcc 	andi	r2,r2,255
  8065dc:	1004c03a 	cmpne	r2,r2,zero
  8065e0:	10000c1e 	bne	r2,zero,806614 <ioman_findUnusedSpot+0x138>
                if(ioman_getRefCnt(ioman,c)<=lr){
  8065e4:	e17ffd8b 	ldhu	r5,-10(fp)
  8065e8:	e13fff17 	ldw	r4,-4(fp)
  8065ec:	0805b500 	call	805b50 <ioman_getRefCnt>
  8065f0:	10c03fcc 	andi	r3,r2,255
  8065f4:	e0bffd03 	ldbu	r2,-12(fp)
  8065f8:	10c00636 	bltu	r2,r3,806614 <ioman_findUnusedSpot+0x138>
                    r=c;
  8065fc:	e0bffd8b 	ldhu	r2,-10(fp)
  806600:	e0bffe15 	stw	r2,-8(fp)
                    lr=ioman_getRefCnt(ioman,c);
  806604:	e17ffd8b 	ldhu	r5,-10(fp)
  806608:	e13fff17 	ldw	r4,-4(fp)
  80660c:	0805b500 	call	805b50 <ioman_getRefCnt>
  806610:	e0bffd05 	stb	r2,-12(fp)
{
    esint32 r=-1;
    euint16 c;
    euint8 fr=0,lr=0xFF;
    
    for(c=0;c<ioman->numbuf;c++){
  806614:	e0bffd8b 	ldhu	r2,-10(fp)
  806618:	10800044 	addi	r2,r2,1
  80661c:	e0bffd8d 	sth	r2,-10(fp)
  806620:	e0bfff17 	ldw	r2,-4(fp)
  806624:	1080020b 	ldhu	r2,8(r2)
  806628:	10ffffcc 	andi	r3,r2,65535
  80662c:	e0bffd8b 	ldhu	r2,-10(fp)
  806630:	10ffb636 	bltu	r2,r3,80650c <ioman_findUnusedSpot+0x30>
                    lr=ioman_getRefCnt(ioman,c);
                }
            }
        }
    }
    return(r);
  806634:	e0bffe17 	ldw	r2,-8(fp)
}
  806638:	e037883a 	mov	sp,fp
  80663c:	dfc00117 	ldw	ra,4(sp)
  806640:	df000017 	ldw	fp,0(sp)
  806644:	dec00204 	addi	sp,sp,8
  806648:	f800283a 	ret

0080664c <ioman_findOverallocableSpot>:
/*****************************************************************************/

esint32 ioman_findOverallocableSpot(IOManager *ioman)
{
  80664c:	defffb04 	addi	sp,sp,-20
  806650:	dfc00415 	stw	ra,16(sp)
  806654:	df000315 	stw	fp,12(sp)
  806658:	df000304 	addi	fp,sp,12
  80665c:	e13fff15 	stw	r4,-4(fp)
    euint8 points,lp=0xFF;
  806660:	00bfffc4 	movi	r2,-1
  806664:	e0bffe85 	stb	r2,-6(fp)
    euint16 c;
    esint32 r=-1;
  806668:	00bfffc4 	movi	r2,-1
  80666c:	e0bffd15 	stw	r2,-12(fp)
    
    for(c=0;c<ioman->numbuf;c++){
  806670:	e03ffe0d 	sth	zero,-8(fp)
  806674:	00003d06 	br	80676c <ioman_findOverallocableSpot+0x120>
        if(ioman->itptr[c]<ioman->numit){
  806678:	e0fffe0b 	ldhu	r3,-8(fp)
  80667c:	e0bfff17 	ldw	r2,-4(fp)
  806680:	1885883a 	add	r2,r3,r2
  806684:	10802304 	addi	r2,r2,140
  806688:	10800003 	ldbu	r2,0(r2)
  80668c:	10c03fcc 	andi	r3,r2,255
  806690:	e0bfff17 	ldw	r2,-4(fp)
  806694:	1080028b 	ldhu	r2,10(r2)
  806698:	18ffffcc 	andi	r3,r3,65535
  80669c:	10bfffcc 	andi	r2,r2,65535
  8066a0:	18802f2e 	bgeu	r3,r2,806760 <ioman_findOverallocableSpot+0x114>
            points = 0;
  8066a4:	e03ffec5 	stb	zero,-5(fp)
            if(ioman_isWritable(c))points+=0x7F;
  8066a8:	e17ffe0b 	ldhu	r5,-8(fp)
  8066ac:	e13fff17 	ldw	r4,-4(fp)
  8066b0:	01800084 	movi	r6,2
  8066b4:	08058d80 	call	8058d8 <ioman_getAttr>
  8066b8:	10803fcc 	andi	r2,r2,255
  8066bc:	1005003a 	cmpeq	r2,r2,zero
  8066c0:	1000031e 	bne	r2,zero,8066d0 <ioman_findOverallocableSpot+0x84>
  8066c4:	e0bffec3 	ldbu	r2,-5(fp)
  8066c8:	10801fc4 	addi	r2,r2,127
  8066cc:	e0bffec5 	stb	r2,-5(fp)
            points += ((euint16)(ioman->itptr[c]*0x4D))/(ioman->numit);
  8066d0:	e0fffe0b 	ldhu	r3,-8(fp)
  8066d4:	e0bfff17 	ldw	r2,-4(fp)
  8066d8:	1885883a 	add	r2,r3,r2
  8066dc:	10802304 	addi	r2,r2,140
  8066e0:	10800003 	ldbu	r2,0(r2)
  8066e4:	10803fcc 	andi	r2,r2,255
  8066e8:	10801364 	muli	r2,r2,77
  8066ec:	1007883a 	mov	r3,r2
  8066f0:	e0bfff17 	ldw	r2,-4(fp)
  8066f4:	1080028b 	ldhu	r2,10(r2)
  8066f8:	193fffcc 	andi	r4,r3,65535
  8066fc:	117fffcc 	andi	r5,r2,65535
  806700:	080cfd80 	call	80cfd8 <__udivsi3>
  806704:	1007883a 	mov	r3,r2
  806708:	e0bffec3 	ldbu	r2,-5(fp)
  80670c:	10c5883a 	add	r2,r2,r3
  806710:	e0bffec5 	stb	r2,-5(fp)
            points += ((euint16)(ioman_getRefCnt(ioman,c)*0x33))/0xFF;
  806714:	e17ffe0b 	ldhu	r5,-8(fp)
  806718:	e13fff17 	ldw	r4,-4(fp)
  80671c:	0805b500 	call	805b50 <ioman_getRefCnt>
  806720:	10803fcc 	andi	r2,r2,255
  806724:	10800ce4 	muli	r2,r2,51
  806728:	113fffcc 	andi	r4,r2,65535
  80672c:	01403fc4 	movi	r5,255
  806730:	080cfd80 	call	80cfd8 <__udivsi3>
  806734:	1007883a 	mov	r3,r2
  806738:	e0bffec3 	ldbu	r2,-5(fp)
  80673c:	10c5883a 	add	r2,r2,r3
  806740:	e0bffec5 	stb	r2,-5(fp)
            if(points<lp){
  806744:	e0fffec3 	ldbu	r3,-5(fp)
  806748:	e0bffe83 	ldbu	r2,-6(fp)
  80674c:	1880042e 	bgeu	r3,r2,806760 <ioman_findOverallocableSpot+0x114>
                lp=points;
  806750:	e0bffec3 	ldbu	r2,-5(fp)
  806754:	e0bffe85 	stb	r2,-6(fp)
                r=c;
  806758:	e0bffe0b 	ldhu	r2,-8(fp)
  80675c:	e0bffd15 	stw	r2,-12(fp)
{
    euint8 points,lp=0xFF;
    euint16 c;
    esint32 r=-1;
    
    for(c=0;c<ioman->numbuf;c++){
  806760:	e0bffe0b 	ldhu	r2,-8(fp)
  806764:	10800044 	addi	r2,r2,1
  806768:	e0bffe0d 	sth	r2,-8(fp)
  80676c:	e0bfff17 	ldw	r2,-4(fp)
  806770:	1080020b 	ldhu	r2,8(r2)
  806774:	10ffffcc 	andi	r3,r2,65535
  806778:	e0bffe0b 	ldhu	r2,-8(fp)
  80677c:	10ffbe36 	bltu	r2,r3,806678 <ioman_findOverallocableSpot+0x2c>
                lp=points;
                r=c;
            }
        }
    }
    return(r);
  806780:	e0bffd17 	ldw	r2,-12(fp)
}
  806784:	e037883a 	mov	sp,fp
  806788:	dfc00117 	ldw	ra,4(sp)
  80678c:	df000017 	ldw	fp,0(sp)
  806790:	dec00204 	addi	sp,sp,8
  806794:	f800283a 	ret

00806798 <ioman_putSectorInCache>:
/*****************************************************************************/

esint8 ioman_putSectorInCache(IOManager *ioman, euint32 address, euint16 bufplace)
{
  806798:	defff904 	addi	sp,sp,-28
  80679c:	dfc00615 	stw	ra,24(sp)
  8067a0:	df000515 	stw	fp,20(sp)
  8067a4:	df000504 	addi	fp,sp,20
  8067a8:	e13ffc15 	stw	r4,-16(fp)
  8067ac:	e17ffd15 	stw	r5,-12(fp)
  8067b0:	e1bffe0d 	sth	r6,-8(fp)
    euint8* buf;
    
    if((buf = ioman_getPtr(ioman,bufplace))==0){
  8067b4:	e17ffe0b 	ldhu	r5,-8(fp)
  8067b8:	e13ffc17 	ldw	r4,-16(fp)
  8067bc:	08060d40 	call	8060d4 <ioman_getPtr>
  8067c0:	e0bffb15 	stw	r2,-20(fp)
  8067c4:	e0bffb17 	ldw	r2,-20(fp)
  8067c8:	1004c03a 	cmpne	r2,r2,zero
  8067cc:	1000061e 	bne	r2,zero,8067e8 <ioman_putSectorInCache+0x50>
        ioman_setError(ioman,IOMAN_ERR_CACHEPTROUTOFRANGE);
  8067d0:	e0fffc17 	ldw	r3,-16(fp)
  8067d4:	00800204 	movi	r2,8
  8067d8:	18800305 	stb	r2,12(r3)
        return(-1);
  8067dc:	00bfffc4 	movi	r2,-1
  8067e0:	e0bfff15 	stw	r2,-4(fp)
  8067e4:	00001d06 	br	80685c <ioman_putSectorInCache+0xc4>
    }
    if((ioman_readSector(ioman,address,buf))){
  8067e8:	e13ffc17 	ldw	r4,-16(fp)
  8067ec:	e17ffd17 	ldw	r5,-12(fp)
  8067f0:	e1bffb17 	ldw	r6,-20(fp)
  8067f4:	08061f40 	call	8061f4 <ioman_readSector>
  8067f8:	10803fcc 	andi	r2,r2,255
  8067fc:	1080201c 	xori	r2,r2,128
  806800:	10bfe004 	addi	r2,r2,-128
  806804:	1005003a 	cmpeq	r2,r2,zero
  806808:	1000061e 	bne	r2,zero,806824 <ioman_putSectorInCache+0x8c>
        ioman_setError(ioman,IOMAN_ERR_READFAIL);
  80680c:	e0fffc17 	ldw	r3,-16(fp)
  806810:	008000c4 	movi	r2,3
  806814:	18800305 	stb	r2,12(r3)
        return(-1);
  806818:	00bfffc4 	movi	r2,-1
  80681c:	e0bfff15 	stw	r2,-4(fp)
  806820:	00000e06 	br	80685c <ioman_putSectorInCache+0xc4>
    }
    ioman_setValid(bufplace);
  806824:	e17ffe0b 	ldhu	r5,-8(fp)
  806828:	e13ffc17 	ldw	r4,-16(fp)
  80682c:	000d883a 	mov	r6,zero
  806830:	01c00044 	movi	r7,1
  806834:	08057f40 	call	8057f4 <ioman_setAttr>
    ioman->sector[bufplace]=address;
  806838:	e0bffe0b 	ldhu	r2,-8(fp)
  80683c:	e0fffc17 	ldw	r3,-16(fp)
  806840:	1085883a 	add	r2,r2,r2
  806844:	1085883a 	add	r2,r2,r2
  806848:	10c5883a 	add	r2,r2,r3
  80684c:	10c01c04 	addi	r3,r2,112
  806850:	e0bffd17 	ldw	r2,-12(fp)
  806854:	18800015 	stw	r2,0(r3)
    return(0);
  806858:	e03fff15 	stw	zero,-4(fp)
  80685c:	e0bfff17 	ldw	r2,-4(fp)
}
  806860:	e037883a 	mov	sp,fp
  806864:	dfc00117 	ldw	ra,4(sp)
  806868:	df000017 	ldw	fp,0(sp)
  80686c:	dec00204 	addi	sp,sp,8
  806870:	f800283a 	ret

00806874 <ioman_flushSector>:
/*****************  if(bufplace>=ioman->numbuf)return;
************************************************************/

esint8 ioman_flushSector(IOManager *ioman, euint16 bufplace)
{
  806874:	defffa04 	addi	sp,sp,-24
  806878:	dfc00515 	stw	ra,20(sp)
  80687c:	df000415 	stw	fp,16(sp)
  806880:	df000404 	addi	fp,sp,16
  806884:	e13ffd15 	stw	r4,-12(fp)
  806888:	e17ffe0d 	sth	r5,-8(fp)
    euint8* buf;
    
    if((buf = ioman_getPtr(ioman,bufplace))==0){
  80688c:	e17ffe0b 	ldhu	r5,-8(fp)
  806890:	e13ffd17 	ldw	r4,-12(fp)
  806894:	08060d40 	call	8060d4 <ioman_getPtr>
  806898:	e0bffc15 	stw	r2,-16(fp)
  80689c:	e0bffc17 	ldw	r2,-16(fp)
  8068a0:	1004c03a 	cmpne	r2,r2,zero
  8068a4:	1000061e 	bne	r2,zero,8068c0 <ioman_flushSector+0x4c>
        ioman_setError(ioman,IOMAN_ERR_CACHEPTROUTOFRANGE);
  8068a8:	e0fffd17 	ldw	r3,-12(fp)
  8068ac:	00800204 	movi	r2,8
  8068b0:	18800305 	stb	r2,12(r3)
        return(-1);
  8068b4:	00bfffc4 	movi	r2,-1
  8068b8:	e0bfff15 	stw	r2,-4(fp)
  8068bc:	00002c06 	br	806970 <ioman_flushSector+0xfc>
    }
    if(!ioman_isWritable(bufplace)){
  8068c0:	e17ffe0b 	ldhu	r5,-8(fp)
  8068c4:	e13ffd17 	ldw	r4,-12(fp)
  8068c8:	01800084 	movi	r6,2
  8068cc:	08058d80 	call	8058d8 <ioman_getAttr>
  8068d0:	10803fcc 	andi	r2,r2,255
  8068d4:	1004c03a 	cmpne	r2,r2,zero
  8068d8:	1000061e 	bne	r2,zero,8068f4 <ioman_flushSector+0x80>
        ioman_setError(ioman,IOMAN_ERR_WRITEREADONLYSECTOR);
  8068dc:	e0fffd17 	ldw	r3,-12(fp)
  8068e0:	00800244 	movi	r2,9
  8068e4:	18800305 	stb	r2,12(r3)
        return(-1);
  8068e8:	00bfffc4 	movi	r2,-1
  8068ec:	e0bfff15 	stw	r2,-4(fp)
  8068f0:	00001f06 	br	806970 <ioman_flushSector+0xfc>
    }
    if(!(ioman_writeSector(ioman,ioman->sector[bufplace],buf))){
  8068f4:	e0bffe0b 	ldhu	r2,-8(fp)
  8068f8:	e0fffd17 	ldw	r3,-12(fp)
  8068fc:	1085883a 	add	r2,r2,r2
  806900:	1085883a 	add	r2,r2,r2
  806904:	10c5883a 	add	r2,r2,r3
  806908:	10801c04 	addi	r2,r2,112
  80690c:	11400017 	ldw	r5,0(r2)
  806910:	e13ffd17 	ldw	r4,-12(fp)
  806914:	e1bffc17 	ldw	r6,-16(fp)
  806918:	08062800 	call	806280 <ioman_writeSector>
  80691c:	10803fcc 	andi	r2,r2,255
  806920:	1080201c 	xori	r2,r2,128
  806924:	10bfe004 	addi	r2,r2,-128
  806928:	1004c03a 	cmpne	r2,r2,zero
  80692c:	1000061e 	bne	r2,zero,806948 <ioman_flushSector+0xd4>
        ioman_setError(ioman,IOMAN_ERR_WRITEFAIL);  
  806930:	e0fffd17 	ldw	r3,-12(fp)
  806934:	00800104 	movi	r2,4
  806938:	18800305 	stb	r2,12(r3)
        return(-1);
  80693c:	00bfffc4 	movi	r2,-1
  806940:	e0bfff15 	stw	r2,-4(fp)
  806944:	00000a06 	br	806970 <ioman_flushSector+0xfc>
    }
    if(ioman->usage==0)ioman_setNotWritable(bufplace);
  806948:	e0bffd17 	ldw	r2,-12(fp)
  80694c:	10802104 	addi	r2,r2,132
  806950:	1004c03a 	cmpne	r2,r2,zero
  806954:	1000051e 	bne	r2,zero,80696c <ioman_flushSector+0xf8>
  806958:	e17ffe0b 	ldhu	r5,-8(fp)
  80695c:	e13ffd17 	ldw	r4,-12(fp)
  806960:	01800084 	movi	r6,2
  806964:	000f883a 	mov	r7,zero
  806968:	08057f40 	call	8057f4 <ioman_setAttr>
    return(0);
  80696c:	e03fff15 	stw	zero,-4(fp)
  806970:	e0bfff17 	ldw	r2,-4(fp)
}
  806974:	e037883a 	mov	sp,fp
  806978:	dfc00117 	ldw	ra,4(sp)
  80697c:	df000017 	ldw	fp,0(sp)
  806980:	dec00204 	addi	sp,sp,8
  806984:	f800283a 	ret

00806988 <ioman_flushRange>:
/*****************************************************************************/

esint8 ioman_flushRange(IOManager *ioman,euint32 address_low, euint32 address_high)
{
  806988:	defff904 	addi	sp,sp,-28
  80698c:	dfc00615 	stw	ra,24(sp)
  806990:	df000515 	stw	fp,20(sp)
  806994:	df000504 	addi	fp,sp,20
  806998:	e13ffc15 	stw	r4,-16(fp)
  80699c:	e17ffd15 	stw	r5,-12(fp)
  8069a0:	e1bffe15 	stw	r6,-8(fp)
    euint32 c;
    
    if(address_low>address_high){
  8069a4:	e0fffd17 	ldw	r3,-12(fp)
  8069a8:	e0bffe17 	ldw	r2,-8(fp)
  8069ac:	10c0062e 	bgeu	r2,r3,8069c8 <ioman_flushRange+0x40>
        c=address_low; address_low=address_high;address_high=c;
  8069b0:	e0bffd17 	ldw	r2,-12(fp)
  8069b4:	e0bffb15 	stw	r2,-20(fp)
  8069b8:	e0bffe17 	ldw	r2,-8(fp)
  8069bc:	e0bffd15 	stw	r2,-12(fp)
  8069c0:	e0bffb17 	ldw	r2,-20(fp)
  8069c4:	e0bffe15 	stw	r2,-8(fp)
    }
    
    for(c=0;c<ioman->numbuf;c++){
  8069c8:	e03ffb15 	stw	zero,-20(fp)
  8069cc:	00003706 	br	806aac <ioman_flushRange+0x124>
        if((ioman->sector[c]>=address_low) && (ioman->sector[c]<=address_high) && (ioman_isWritable(c))){
  8069d0:	e0bffb17 	ldw	r2,-20(fp)
  8069d4:	e0fffc17 	ldw	r3,-16(fp)
  8069d8:	1085883a 	add	r2,r2,r2
  8069dc:	1085883a 	add	r2,r2,r2
  8069e0:	10c5883a 	add	r2,r2,r3
  8069e4:	10801c04 	addi	r2,r2,112
  8069e8:	10c00017 	ldw	r3,0(r2)
  8069ec:	e0bffd17 	ldw	r2,-12(fp)
  8069f0:	18802b36 	bltu	r3,r2,806aa0 <ioman_flushRange+0x118>
  8069f4:	e0bffb17 	ldw	r2,-20(fp)
  8069f8:	e0fffc17 	ldw	r3,-16(fp)
  8069fc:	1085883a 	add	r2,r2,r2
  806a00:	1085883a 	add	r2,r2,r2
  806a04:	10c5883a 	add	r2,r2,r3
  806a08:	10801c04 	addi	r2,r2,112
  806a0c:	10c00017 	ldw	r3,0(r2)
  806a10:	e0bffe17 	ldw	r2,-8(fp)
  806a14:	10c02236 	bltu	r2,r3,806aa0 <ioman_flushRange+0x118>
  806a18:	e0bffb17 	ldw	r2,-20(fp)
  806a1c:	117fffcc 	andi	r5,r2,65535
  806a20:	e13ffc17 	ldw	r4,-16(fp)
  806a24:	01800084 	movi	r6,2
  806a28:	08058d80 	call	8058d8 <ioman_getAttr>
  806a2c:	10803fcc 	andi	r2,r2,255
  806a30:	1005003a 	cmpeq	r2,r2,zero
  806a34:	10001a1e 	bne	r2,zero,806aa0 <ioman_flushRange+0x118>
            if(ioman_flushSector(ioman,c)){
  806a38:	e0bffb17 	ldw	r2,-20(fp)
  806a3c:	117fffcc 	andi	r5,r2,65535
  806a40:	e13ffc17 	ldw	r4,-16(fp)
  806a44:	08068740 	call	806874 <ioman_flushSector>
  806a48:	10803fcc 	andi	r2,r2,255
  806a4c:	1080201c 	xori	r2,r2,128
  806a50:	10bfe004 	addi	r2,r2,-128
  806a54:	1005003a 	cmpeq	r2,r2,zero
  806a58:	1000031e 	bne	r2,zero,806a68 <ioman_flushRange+0xe0>
                return(-1);
  806a5c:	00bfffc4 	movi	r2,-1
  806a60:	e0bfff15 	stw	r2,-4(fp)
  806a64:	00001706 	br	806ac4 <ioman_flushRange+0x13c>
            }
            if(ioman->usage[c]==0)ioman_setNotWritable(c);
  806a68:	e0fffb17 	ldw	r3,-20(fp)
  806a6c:	e0bffc17 	ldw	r2,-16(fp)
  806a70:	1885883a 	add	r2,r3,r2
  806a74:	10802104 	addi	r2,r2,132
  806a78:	10800003 	ldbu	r2,0(r2)
  806a7c:	10803fcc 	andi	r2,r2,255
  806a80:	1004c03a 	cmpne	r2,r2,zero
  806a84:	1000061e 	bne	r2,zero,806aa0 <ioman_flushRange+0x118>
  806a88:	e0bffb17 	ldw	r2,-20(fp)
  806a8c:	117fffcc 	andi	r5,r2,65535
  806a90:	e13ffc17 	ldw	r4,-16(fp)
  806a94:	01800084 	movi	r6,2
  806a98:	000f883a 	mov	r7,zero
  806a9c:	08057f40 	call	8057f4 <ioman_setAttr>
    
    if(address_low>address_high){
        c=address_low; address_low=address_high;address_high=c;
    }
    
    for(c=0;c<ioman->numbuf;c++){
  806aa0:	e0bffb17 	ldw	r2,-20(fp)
  806aa4:	10800044 	addi	r2,r2,1
  806aa8:	e0bffb15 	stw	r2,-20(fp)
  806aac:	e0bffc17 	ldw	r2,-16(fp)
  806ab0:	1080020b 	ldhu	r2,8(r2)
  806ab4:	10ffffcc 	andi	r3,r2,65535
  806ab8:	e0bffb17 	ldw	r2,-20(fp)
  806abc:	10ffc436 	bltu	r2,r3,8069d0 <ioman_flushRange+0x48>
                return(-1);
            }
            if(ioman->usage[c]==0)ioman_setNotWritable(c);
        }
    }
    return(0);
  806ac0:	e03fff15 	stw	zero,-4(fp)
  806ac4:	e0bfff17 	ldw	r2,-4(fp)
}
  806ac8:	e037883a 	mov	sp,fp
  806acc:	dfc00117 	ldw	ra,4(sp)
  806ad0:	df000017 	ldw	fp,0(sp)
  806ad4:	dec00204 	addi	sp,sp,8
  806ad8:	f800283a 	ret

00806adc <ioman_flushAll>:
/*****************************************************************************/

esint8 ioman_flushAll(IOManager *ioman)
{
  806adc:	defffb04 	addi	sp,sp,-20
  806ae0:	dfc00415 	stw	ra,16(sp)
  806ae4:	df000315 	stw	fp,12(sp)
  806ae8:	df000304 	addi	fp,sp,12
  806aec:	e13ffe15 	stw	r4,-8(fp)
    euint16 c;
    
    for(c=0;c<ioman->numbuf;c++){
  806af0:	e03ffd0d 	sth	zero,-12(fp)
  806af4:	00002206 	br	806b80 <ioman_flushAll+0xa4>
        if(ioman_isWritable(c)){
  806af8:	e17ffd0b 	ldhu	r5,-12(fp)
  806afc:	e13ffe17 	ldw	r4,-8(fp)
  806b00:	01800084 	movi	r6,2
  806b04:	08058d80 	call	8058d8 <ioman_getAttr>
  806b08:	10803fcc 	andi	r2,r2,255
  806b0c:	1005003a 	cmpeq	r2,r2,zero
  806b10:	1000181e 	bne	r2,zero,806b74 <ioman_flushAll+0x98>
            if(ioman_flushSector(ioman,c)){
  806b14:	e17ffd0b 	ldhu	r5,-12(fp)
  806b18:	e13ffe17 	ldw	r4,-8(fp)
  806b1c:	08068740 	call	806874 <ioman_flushSector>
  806b20:	10803fcc 	andi	r2,r2,255
  806b24:	1080201c 	xori	r2,r2,128
  806b28:	10bfe004 	addi	r2,r2,-128
  806b2c:	1005003a 	cmpeq	r2,r2,zero
  806b30:	1000031e 	bne	r2,zero,806b40 <ioman_flushAll+0x64>
                return(-1);
  806b34:	00bfffc4 	movi	r2,-1
  806b38:	e0bfff15 	stw	r2,-4(fp)
  806b3c:	00001606 	br	806b98 <ioman_flushAll+0xbc>
            }
            if(ioman->usage[c]==0)ioman_setNotWritable(c);
  806b40:	e0fffd0b 	ldhu	r3,-12(fp)
  806b44:	e0bffe17 	ldw	r2,-8(fp)
  806b48:	1885883a 	add	r2,r3,r2
  806b4c:	10802104 	addi	r2,r2,132
  806b50:	10800003 	ldbu	r2,0(r2)
  806b54:	10803fcc 	andi	r2,r2,255
  806b58:	1004c03a 	cmpne	r2,r2,zero
  806b5c:	1000051e 	bne	r2,zero,806b74 <ioman_flushAll+0x98>
  806b60:	e17ffd0b 	ldhu	r5,-12(fp)
  806b64:	e13ffe17 	ldw	r4,-8(fp)
  806b68:	01800084 	movi	r6,2
  806b6c:	000f883a 	mov	r7,zero
  806b70:	08057f40 	call	8057f4 <ioman_setAttr>

esint8 ioman_flushAll(IOManager *ioman)
{
    euint16 c;
    
    for(c=0;c<ioman->numbuf;c++){
  806b74:	e0bffd0b 	ldhu	r2,-12(fp)
  806b78:	10800044 	addi	r2,r2,1
  806b7c:	e0bffd0d 	sth	r2,-12(fp)
  806b80:	e0bffe17 	ldw	r2,-8(fp)
  806b84:	1080020b 	ldhu	r2,8(r2)
  806b88:	10ffffcc 	andi	r3,r2,65535
  806b8c:	e0bffd0b 	ldhu	r2,-12(fp)
  806b90:	10ffd936 	bltu	r2,r3,806af8 <ioman_flushAll+0x1c>
                return(-1);
            }
            if(ioman->usage[c]==0)ioman_setNotWritable(c);
        }
    }
    return(0);
  806b94:	e03fff15 	stw	zero,-4(fp)
  806b98:	e0bfff17 	ldw	r2,-4(fp)
}
  806b9c:	e037883a 	mov	sp,fp
  806ba0:	dfc00117 	ldw	ra,4(sp)
  806ba4:	df000017 	ldw	fp,0(sp)
  806ba8:	dec00204 	addi	sp,sp,8
  806bac:	f800283a 	ret

00806bb0 <ioman_getSector>:
/*****************************************************************************/

euint8* ioman_getSector(IOManager *ioman,euint32 address, euint8 mode)
{
  806bb0:	defff904 	addi	sp,sp,-28
  806bb4:	dfc00615 	stw	ra,24(sp)
  806bb8:	df000515 	stw	fp,20(sp)
  806bbc:	df000504 	addi	fp,sp,20
  806bc0:	e13ffc15 	stw	r4,-16(fp)
  806bc4:	e17ffd15 	stw	r5,-12(fp)
  806bc8:	e1bffe05 	stb	r6,-8(fp)
    esint32 bp;
    
    if((bp=ioman_findSectorInCache(ioman,address))!=-1){
  806bcc:	e13ffc17 	ldw	r4,-16(fp)
  806bd0:	e17ffd17 	ldw	r5,-12(fp)
  806bd4:	08063ac0 	call	8063ac <ioman_findSectorInCache>
  806bd8:	e0bffb15 	stw	r2,-20(fp)
  806bdc:	e0bffb17 	ldw	r2,-20(fp)
  806be0:	10bfffe0 	cmpeqi	r2,r2,-1
  806be4:	10001c1e 	bne	r2,zero,806c58 <ioman_getSector+0xa8>
        if(ioman_isReqRw(mode)){
  806be8:	e0bffe03 	ldbu	r2,-8(fp)
  806bec:	1080008c 	andi	r2,r2,2
  806bf0:	1005003a 	cmpeq	r2,r2,zero
  806bf4:	1000061e 	bne	r2,zero,806c10 <ioman_getSector+0x60>
            ioman_setWritable(bp);
  806bf8:	e0bffb17 	ldw	r2,-20(fp)
  806bfc:	117fffcc 	andi	r5,r2,65535
  806c00:	e13ffc17 	ldw	r4,-16(fp)
  806c04:	01800084 	movi	r6,2
  806c08:	01c00044 	movi	r7,1
  806c0c:	08057f40 	call	8057f4 <ioman_setAttr>
        }
        ioman_incUseCnt(ioman,bp);
  806c10:	e0bffb17 	ldw	r2,-20(fp)
  806c14:	117fffcc 	andi	r5,r2,65535
  806c18:	e13ffc17 	ldw	r4,-16(fp)
  806c1c:	08059cc0 	call	8059cc <ioman_incUseCnt>
        if(!ioman_isReqExp(mode))ioman_incRefCnt(ioman,bp);
  806c20:	e0bffe03 	ldbu	r2,-8(fp)
  806c24:	1080010c 	andi	r2,r2,4
  806c28:	1004c03a 	cmpne	r2,r2,zero
  806c2c:	1000041e 	bne	r2,zero,806c40 <ioman_getSector+0x90>
  806c30:	e0bffb17 	ldw	r2,-20(fp)
  806c34:	117fffcc 	andi	r5,r2,65535
  806c38:	e13ffc17 	ldw	r4,-16(fp)
  806c3c:	0805bbc0 	call	805bbc <ioman_incRefCnt>
        return(ioman_getPtr(ioman,bp));
  806c40:	e0bffb17 	ldw	r2,-20(fp)
  806c44:	117fffcc 	andi	r5,r2,65535
  806c48:	e13ffc17 	ldw	r4,-16(fp)
  806c4c:	08060d40 	call	8060d4 <ioman_getPtr>
  806c50:	e0bfff15 	stw	r2,-4(fp)
  806c54:	00009306 	br	806ea4 <ioman_getSector+0x2f4>
    }
    
    if((bp=ioman_findFreeSpot(ioman))==-1){
  806c58:	e13ffc17 	ldw	r4,-16(fp)
  806c5c:	08064580 	call	806458 <ioman_findFreeSpot>
  806c60:	e0bffb15 	stw	r2,-20(fp)
  806c64:	e0bffb17 	ldw	r2,-20(fp)
  806c68:	10bfffd8 	cmpnei	r2,r2,-1
  806c6c:	1000121e 	bne	r2,zero,806cb8 <ioman_getSector+0x108>
        if(((bp=ioman_findUnusedSpot(ioman))!=-1)&&(ioman_isWritable(bp))){
  806c70:	e13ffc17 	ldw	r4,-16(fp)
  806c74:	08064dc0 	call	8064dc <ioman_findUnusedSpot>
  806c78:	e0bffb15 	stw	r2,-20(fp)
  806c7c:	e0bffb17 	ldw	r2,-20(fp)
  806c80:	10bfffe0 	cmpeqi	r2,r2,-1
  806c84:	10000c1e 	bne	r2,zero,806cb8 <ioman_getSector+0x108>
  806c88:	e0bffb17 	ldw	r2,-20(fp)
  806c8c:	117fffcc 	andi	r5,r2,65535
  806c90:	e13ffc17 	ldw	r4,-16(fp)
  806c94:	01800084 	movi	r6,2
  806c98:	08058d80 	call	8058d8 <ioman_getAttr>
  806c9c:	10803fcc 	andi	r2,r2,255
  806ca0:	1005003a 	cmpeq	r2,r2,zero
  806ca4:	1000041e 	bne	r2,zero,806cb8 <ioman_getSector+0x108>
            ioman_flushSector(ioman,bp);
  806ca8:	e0bffb17 	ldw	r2,-20(fp)
  806cac:	117fffcc 	andi	r5,r2,65535
  806cb0:	e13ffc17 	ldw	r4,-16(fp)
  806cb4:	08068740 	call	806874 <ioman_flushSector>
        }
    }
    
    if(bp!=-1){
  806cb8:	e0bffb17 	ldw	r2,-20(fp)
  806cbc:	10bfffe0 	cmpeqi	r2,r2,-1
  806cc0:	10002b1e 	bne	r2,zero,806d70 <ioman_getSector+0x1c0>
        ioman_resetCacheItem(ioman,bp);
  806cc4:	e0bffb17 	ldw	r2,-20(fp)
  806cc8:	117fffcc 	andi	r5,r2,65535
  806ccc:	e13ffc17 	ldw	r4,-16(fp)
  806cd0:	080630c0 	call	80630c <ioman_resetCacheItem>
        if((ioman_putSectorInCache(ioman,address,bp))){
  806cd4:	e0bffb17 	ldw	r2,-20(fp)
  806cd8:	11bfffcc 	andi	r6,r2,65535
  806cdc:	e13ffc17 	ldw	r4,-16(fp)
  806ce0:	e17ffd17 	ldw	r5,-12(fp)
  806ce4:	08067980 	call	806798 <ioman_putSectorInCache>
  806ce8:	10803fcc 	andi	r2,r2,255
  806cec:	1080201c 	xori	r2,r2,128
  806cf0:	10bfe004 	addi	r2,r2,-128
  806cf4:	1005003a 	cmpeq	r2,r2,zero
  806cf8:	1000021e 	bne	r2,zero,806d04 <ioman_getSector+0x154>
            return(0);
  806cfc:	e03fff15 	stw	zero,-4(fp)
  806d00:	00006806 	br	806ea4 <ioman_getSector+0x2f4>
        }
        if(mode==IOM_MODE_READWRITE){
  806d04:	e0bffe03 	ldbu	r2,-8(fp)
  806d08:	10800098 	cmpnei	r2,r2,2
  806d0c:	1000061e 	bne	r2,zero,806d28 <ioman_getSector+0x178>
            ioman_setWritable(bp);
  806d10:	e0bffb17 	ldw	r2,-20(fp)
  806d14:	117fffcc 	andi	r5,r2,65535
  806d18:	e13ffc17 	ldw	r4,-16(fp)
  806d1c:	01800084 	movi	r6,2
  806d20:	01c00044 	movi	r7,1
  806d24:	08057f40 	call	8057f4 <ioman_setAttr>
        }
        ioman_incUseCnt(ioman,bp);
  806d28:	e0bffb17 	ldw	r2,-20(fp)
  806d2c:	117fffcc 	andi	r5,r2,65535
  806d30:	e13ffc17 	ldw	r4,-16(fp)
  806d34:	08059cc0 	call	8059cc <ioman_incUseCnt>
        if(!ioman_isReqExp(mode))ioman_incRefCnt(ioman,bp);
  806d38:	e0bffe03 	ldbu	r2,-8(fp)
  806d3c:	1080010c 	andi	r2,r2,4
  806d40:	1004c03a 	cmpne	r2,r2,zero
  806d44:	1000041e 	bne	r2,zero,806d58 <ioman_getSector+0x1a8>
  806d48:	e0bffb17 	ldw	r2,-20(fp)
  806d4c:	117fffcc 	andi	r5,r2,65535
  806d50:	e13ffc17 	ldw	r4,-16(fp)
  806d54:	0805bbc0 	call	805bbc <ioman_incRefCnt>
        return(ioman_getPtr(ioman,bp));
  806d58:	e0bffb17 	ldw	r2,-20(fp)
  806d5c:	117fffcc 	andi	r5,r2,65535
  806d60:	e13ffc17 	ldw	r4,-16(fp)
  806d64:	08060d40 	call	8060d4 <ioman_getPtr>
  806d68:	e0bfff15 	stw	r2,-4(fp)
  806d6c:	00004d06 	br	806ea4 <ioman_getSector+0x2f4>
    }
    
    if((bp=ioman_findOverallocableSpot(ioman))!=-1){
  806d70:	e13ffc17 	ldw	r4,-16(fp)
  806d74:	080664c0 	call	80664c <ioman_findOverallocableSpot>
  806d78:	e0bffb15 	stw	r2,-20(fp)
  806d7c:	e0bffb17 	ldw	r2,-20(fp)
  806d80:	10bfffe0 	cmpeqi	r2,r2,-1
  806d84:	1000431e 	bne	r2,zero,806e94 <ioman_getSector+0x2e4>
        if(ioman_isWritable(bp)){
  806d88:	e0bffb17 	ldw	r2,-20(fp)
  806d8c:	117fffcc 	andi	r5,r2,65535
  806d90:	e13ffc17 	ldw	r4,-16(fp)
  806d94:	01800084 	movi	r6,2
  806d98:	08058d80 	call	8058d8 <ioman_getAttr>
  806d9c:	10803fcc 	andi	r2,r2,255
  806da0:	1005003a 	cmpeq	r2,r2,zero
  806da4:	1000041e 	bne	r2,zero,806db8 <ioman_getSector+0x208>
            ioman_flushSector(ioman,bp);
  806da8:	e0bffb17 	ldw	r2,-20(fp)
  806dac:	117fffcc 	andi	r5,r2,65535
  806db0:	e13ffc17 	ldw	r4,-16(fp)
  806db4:	08068740 	call	806874 <ioman_flushSector>
        }
        if(ioman_push(ioman,bp)){
  806db8:	e0bffb17 	ldw	r2,-20(fp)
  806dbc:	117fffcc 	andi	r5,r2,65535
  806dc0:	e13ffc17 	ldw	r4,-16(fp)
  806dc4:	0805f140 	call	805f14 <ioman_push>
  806dc8:	10803fcc 	andi	r2,r2,255
  806dcc:	1080201c 	xori	r2,r2,128
  806dd0:	10bfe004 	addi	r2,r2,-128
  806dd4:	1005003a 	cmpeq	r2,r2,zero
  806dd8:	1000021e 	bne	r2,zero,806de4 <ioman_getSector+0x234>
            return(0);
  806ddc:	e03fff15 	stw	zero,-4(fp)
  806de0:	00003006 	br	806ea4 <ioman_getSector+0x2f4>
        }
        ioman_resetCacheItem(ioman,bp);
  806de4:	e0bffb17 	ldw	r2,-20(fp)
  806de8:	117fffcc 	andi	r5,r2,65535
  806dec:	e13ffc17 	ldw	r4,-16(fp)
  806df0:	080630c0 	call	80630c <ioman_resetCacheItem>
        if((ioman_putSectorInCache(ioman,address,bp))){
  806df4:	e0bffb17 	ldw	r2,-20(fp)
  806df8:	11bfffcc 	andi	r6,r2,65535
  806dfc:	e13ffc17 	ldw	r4,-16(fp)
  806e00:	e17ffd17 	ldw	r5,-12(fp)
  806e04:	08067980 	call	806798 <ioman_putSectorInCache>
  806e08:	10803fcc 	andi	r2,r2,255
  806e0c:	1080201c 	xori	r2,r2,128
  806e10:	10bfe004 	addi	r2,r2,-128
  806e14:	1005003a 	cmpeq	r2,r2,zero
  806e18:	1000021e 	bne	r2,zero,806e24 <ioman_getSector+0x274>
            return(0);
  806e1c:	e03fff15 	stw	zero,-4(fp)
  806e20:	00002006 	br	806ea4 <ioman_getSector+0x2f4>
        }
        if(ioman_isReqRw(mode)){
  806e24:	e0bffe03 	ldbu	r2,-8(fp)
  806e28:	1080008c 	andi	r2,r2,2
  806e2c:	1005003a 	cmpeq	r2,r2,zero
  806e30:	1000061e 	bne	r2,zero,806e4c <ioman_getSector+0x29c>
            ioman_setWritable(bp);
  806e34:	e0bffb17 	ldw	r2,-20(fp)
  806e38:	117fffcc 	andi	r5,r2,65535
  806e3c:	e13ffc17 	ldw	r4,-16(fp)
  806e40:	01800084 	movi	r6,2
  806e44:	01c00044 	movi	r7,1
  806e48:	08057f40 	call	8057f4 <ioman_setAttr>
        }
        ioman_incUseCnt(ioman,bp);
  806e4c:	e0bffb17 	ldw	r2,-20(fp)
  806e50:	117fffcc 	andi	r5,r2,65535
  806e54:	e13ffc17 	ldw	r4,-16(fp)
  806e58:	08059cc0 	call	8059cc <ioman_incUseCnt>
        if(!ioman_isReqExp(mode))ioman_incRefCnt(ioman,bp);
  806e5c:	e0bffe03 	ldbu	r2,-8(fp)
  806e60:	1080010c 	andi	r2,r2,4
  806e64:	1004c03a 	cmpne	r2,r2,zero
  806e68:	1000041e 	bne	r2,zero,806e7c <ioman_getSector+0x2cc>
  806e6c:	e0bffb17 	ldw	r2,-20(fp)
  806e70:	117fffcc 	andi	r5,r2,65535
  806e74:	e13ffc17 	ldw	r4,-16(fp)
  806e78:	0805bbc0 	call	805bbc <ioman_incRefCnt>
        return(ioman_getPtr(ioman,bp));
  806e7c:	e0bffb17 	ldw	r2,-20(fp)
  806e80:	117fffcc 	andi	r5,r2,65535
  806e84:	e13ffc17 	ldw	r4,-16(fp)
  806e88:	08060d40 	call	8060d4 <ioman_getPtr>
  806e8c:	e0bfff15 	stw	r2,-4(fp)
  806e90:	00000406 	br	806ea4 <ioman_getSector+0x2f4>
    }
    ioman_setError(ioman,IOMAN_ERR_NOMEMORY);
  806e94:	e0fffc17 	ldw	r3,-16(fp)
  806e98:	00800284 	movi	r2,10
  806e9c:	18800305 	stb	r2,12(r3)
    return(0);
  806ea0:	e03fff15 	stw	zero,-4(fp)
  806ea4:	e0bfff17 	ldw	r2,-4(fp)
}
  806ea8:	e037883a 	mov	sp,fp
  806eac:	dfc00117 	ldw	ra,4(sp)
  806eb0:	df000017 	ldw	fp,0(sp)
  806eb4:	dec00204 	addi	sp,sp,8
  806eb8:	f800283a 	ret

00806ebc <ioman_releaseSector>:
/*****************************************************************************/

esint8 ioman_releaseSector(IOManager *ioman,euint8* buf)
{
  806ebc:	defffb04 	addi	sp,sp,-20
  806ec0:	dfc00415 	stw	ra,16(sp)
  806ec4:	df000315 	stw	fp,12(sp)
  806ec8:	df000304 	addi	fp,sp,12
  806ecc:	e13ffe15 	stw	r4,-8(fp)
  806ed0:	e17fff15 	stw	r5,-4(fp)
    euint16 bp;
    
    bp=ioman_getBp(ioman,buf);
  806ed4:	e13ffe17 	ldw	r4,-8(fp)
  806ed8:	e17fff17 	ldw	r5,-4(fp)
  806edc:	080613c0 	call	80613c <ioman_getBp>
  806ee0:	e0bffd0d 	sth	r2,-12(fp)
    ioman_decUseCnt(ioman,bp);
  806ee4:	e17ffd0b 	ldhu	r5,-12(fp)
  806ee8:	e13ffe17 	ldw	r4,-8(fp)
  806eec:	0805a600 	call	805a60 <ioman_decUseCnt>
    
    if(ioman_getUseCnt(ioman,bp)==0 && ioman->itptr[bp]!=0){
  806ef0:	e17ffd0b 	ldhu	r5,-12(fp)
  806ef4:	e13ffe17 	ldw	r4,-8(fp)
  806ef8:	08059600 	call	805960 <ioman_getUseCnt>
  806efc:	10803fcc 	andi	r2,r2,255
  806f00:	1004c03a 	cmpne	r2,r2,zero
  806f04:	10001f1e 	bne	r2,zero,806f84 <ioman_releaseSector+0xc8>
  806f08:	e0fffd0b 	ldhu	r3,-12(fp)
  806f0c:	e0bffe17 	ldw	r2,-8(fp)
  806f10:	1885883a 	add	r2,r3,r2
  806f14:	10802304 	addi	r2,r2,140
  806f18:	10800003 	ldbu	r2,0(r2)
  806f1c:	10803fcc 	andi	r2,r2,255
  806f20:	1005003a 	cmpeq	r2,r2,zero
  806f24:	1000171e 	bne	r2,zero,806f84 <ioman_releaseSector+0xc8>
        if(ioman_isWritable(bp)){
  806f28:	e17ffd0b 	ldhu	r5,-12(fp)
  806f2c:	e13ffe17 	ldw	r4,-8(fp)
  806f30:	01800084 	movi	r6,2
  806f34:	08058d80 	call	8058d8 <ioman_getAttr>
  806f38:	10803fcc 	andi	r2,r2,255
  806f3c:	1005003a 	cmpeq	r2,r2,zero
  806f40:	1000031e 	bne	r2,zero,806f50 <ioman_releaseSector+0x94>
            ioman_flushSector(ioman,bp);
  806f44:	e17ffd0b 	ldhu	r5,-12(fp)
  806f48:	e13ffe17 	ldw	r4,-8(fp)
  806f4c:	08068740 	call	806874 <ioman_flushSector>
        }
        ioman_pop(ioman,bp);
  806f50:	e17ffd0b 	ldhu	r5,-12(fp)
  806f54:	e13ffe17 	ldw	r4,-8(fp)
  806f58:	0805d400 	call	805d40 <ioman_pop>
        ioman_putSectorInCache(ioman,ioman->sector[bp],bp);
  806f5c:	e0bffd0b 	ldhu	r2,-12(fp)
  806f60:	e0fffe17 	ldw	r3,-8(fp)
  806f64:	1085883a 	add	r2,r2,r2
  806f68:	1085883a 	add	r2,r2,r2
  806f6c:	10c5883a 	add	r2,r2,r3
  806f70:	10801c04 	addi	r2,r2,112
  806f74:	11400017 	ldw	r5,0(r2)
  806f78:	e1bffd0b 	ldhu	r6,-12(fp)
  806f7c:	e13ffe17 	ldw	r4,-8(fp)
  806f80:	08067980 	call	806798 <ioman_putSectorInCache>
    }
    return(0);
  806f84:	0005883a 	mov	r2,zero
}
  806f88:	e037883a 	mov	sp,fp
  806f8c:	dfc00117 	ldw	ra,4(sp)
  806f90:	df000017 	ldw	fp,0(sp)
  806f94:	dec00204 	addi	sp,sp,8
  806f98:	f800283a 	ret

00806f9c <ioman_directSectorRead>:
/*****************************************************************************/

esint8 ioman_directSectorRead(IOManager *ioman,euint32 address, euint8* buf)
{
  806f9c:	defff804 	addi	sp,sp,-32
  806fa0:	dfc00715 	stw	ra,28(sp)
  806fa4:	df000615 	stw	fp,24(sp)
  806fa8:	df000604 	addi	fp,sp,24
  806fac:	e13ffc15 	stw	r4,-16(fp)
  806fb0:	e17ffd15 	stw	r5,-12(fp)
  806fb4:	e1bffe15 	stw	r6,-8(fp)
    euint8* ibuf;
    esint16 bp;
    
    if((bp=ioman_findSectorInCache(ioman,address))!=-1){
  806fb8:	e13ffc17 	ldw	r4,-16(fp)
  806fbc:	e17ffd17 	ldw	r5,-12(fp)
  806fc0:	08063ac0 	call	8063ac <ioman_findSectorInCache>
  806fc4:	e0bffa0d 	sth	r2,-24(fp)
  806fc8:	e0bffa0f 	ldh	r2,-24(fp)
  806fcc:	10bfffe0 	cmpeqi	r2,r2,-1
  806fd0:	10000b1e 	bne	r2,zero,807000 <ioman_directSectorRead+0x64>
        ibuf=ioman_getPtr(ioman,bp);
  806fd4:	e0bffa0b 	ldhu	r2,-24(fp)
  806fd8:	117fffcc 	andi	r5,r2,65535
  806fdc:	e13ffc17 	ldw	r4,-16(fp)
  806fe0:	08060d40 	call	8060d4 <ioman_getPtr>
  806fe4:	e0bffb15 	stw	r2,-20(fp)
        memCpy(ibuf,buf,512);
  806fe8:	e13ffb17 	ldw	r4,-20(fp)
  806fec:	e17ffe17 	ldw	r5,-8(fp)
  806ff0:	01808004 	movi	r6,512
  806ff4:	08088380 	call	808838 <memCpy>
        return(0);
  806ff8:	e03fff15 	stw	zero,-4(fp)
  806ffc:	00002b06 	br	8070ac <ioman_directSectorRead+0x110>
    }
    
    if((bp=ioman_findFreeSpot(ioman))!=-1){
  807000:	e13ffc17 	ldw	r4,-16(fp)
  807004:	08064580 	call	806458 <ioman_findFreeSpot>
  807008:	e0bffa0d 	sth	r2,-24(fp)
  80700c:	e0bffa0f 	ldh	r2,-24(fp)
  807010:	10bfffe0 	cmpeqi	r2,r2,-1
  807014:	1000181e 	bne	r2,zero,807078 <ioman_directSectorRead+0xdc>
        if((ioman_putSectorInCache(ioman,address,bp))){
  807018:	e0bffa0b 	ldhu	r2,-24(fp)
  80701c:	11bfffcc 	andi	r6,r2,65535
  807020:	e13ffc17 	ldw	r4,-16(fp)
  807024:	e17ffd17 	ldw	r5,-12(fp)
  807028:	08067980 	call	806798 <ioman_putSectorInCache>
  80702c:	10803fcc 	andi	r2,r2,255
  807030:	1080201c 	xori	r2,r2,128
  807034:	10bfe004 	addi	r2,r2,-128
  807038:	1005003a 	cmpeq	r2,r2,zero
  80703c:	1000031e 	bne	r2,zero,80704c <ioman_directSectorRead+0xb0>
            return(-1);
  807040:	00bfffc4 	movi	r2,-1
  807044:	e0bfff15 	stw	r2,-4(fp)
  807048:	00001806 	br	8070ac <ioman_directSectorRead+0x110>
        }
        ibuf=ioman_getPtr(ioman,bp);
  80704c:	e0bffa0b 	ldhu	r2,-24(fp)
  807050:	117fffcc 	andi	r5,r2,65535
  807054:	e13ffc17 	ldw	r4,-16(fp)
  807058:	08060d40 	call	8060d4 <ioman_getPtr>
  80705c:	e0bffb15 	stw	r2,-20(fp)
        memCpy(ibuf,buf,512);
  807060:	e13ffb17 	ldw	r4,-20(fp)
  807064:	e17ffe17 	ldw	r5,-8(fp)
  807068:	01808004 	movi	r6,512
  80706c:	08088380 	call	808838 <memCpy>
        return(0);
  807070:	e03fff15 	stw	zero,-4(fp)
  807074:	00000d06 	br	8070ac <ioman_directSectorRead+0x110>
    }

    if(ioman_readSector(ioman,address,buf)){
  807078:	e13ffc17 	ldw	r4,-16(fp)
  80707c:	e17ffd17 	ldw	r5,-12(fp)
  807080:	e1bffe17 	ldw	r6,-8(fp)
  807084:	08061f40 	call	8061f4 <ioman_readSector>
  807088:	10803fcc 	andi	r2,r2,255
  80708c:	1080201c 	xori	r2,r2,128
  807090:	10bfe004 	addi	r2,r2,-128
  807094:	1005003a 	cmpeq	r2,r2,zero
  807098:	1000031e 	bne	r2,zero,8070a8 <ioman_directSectorRead+0x10c>
        return(-1);
  80709c:	00bfffc4 	movi	r2,-1
  8070a0:	e0bfff15 	stw	r2,-4(fp)
  8070a4:	00000106 	br	8070ac <ioman_directSectorRead+0x110>
    }

    return(0);
  8070a8:	e03fff15 	stw	zero,-4(fp)
  8070ac:	e0bfff17 	ldw	r2,-4(fp)
}
  8070b0:	e037883a 	mov	sp,fp
  8070b4:	dfc00117 	ldw	ra,4(sp)
  8070b8:	df000017 	ldw	fp,0(sp)
  8070bc:	dec00204 	addi	sp,sp,8
  8070c0:	f800283a 	ret

008070c4 <ioman_directSectorWrite>:
/*****************************************************************************/

esint8 ioman_directSectorWrite(IOManager *ioman,euint32 address, euint8* buf)
{
  8070c4:	defff804 	addi	sp,sp,-32
  8070c8:	dfc00715 	stw	ra,28(sp)
  8070cc:	df000615 	stw	fp,24(sp)
  8070d0:	df000604 	addi	fp,sp,24
  8070d4:	e13ffc15 	stw	r4,-16(fp)
  8070d8:	e17ffd15 	stw	r5,-12(fp)
  8070dc:	e1bffe15 	stw	r6,-8(fp)
    euint8* ibuf;
    esint16 bp;
    
    if((bp=ioman_findSectorInCache(ioman,address))!=-1){
  8070e0:	e13ffc17 	ldw	r4,-16(fp)
  8070e4:	e17ffd17 	ldw	r5,-12(fp)
  8070e8:	08063ac0 	call	8063ac <ioman_findSectorInCache>
  8070ec:	e0bffa0d 	sth	r2,-24(fp)
  8070f0:	e0bffa0f 	ldh	r2,-24(fp)
  8070f4:	10bfffe0 	cmpeqi	r2,r2,-1
  8070f8:	1000111e 	bne	r2,zero,807140 <ioman_directSectorWrite+0x7c>
        ibuf=ioman_getPtr(ioman,bp);
  8070fc:	e0bffa0b 	ldhu	r2,-24(fp)
  807100:	117fffcc 	andi	r5,r2,65535
  807104:	e13ffc17 	ldw	r4,-16(fp)
  807108:	08060d40 	call	8060d4 <ioman_getPtr>
  80710c:	e0bffb15 	stw	r2,-20(fp)
        memCpy(buf,ibuf,512);
  807110:	e13ffe17 	ldw	r4,-8(fp)
  807114:	e17ffb17 	ldw	r5,-20(fp)
  807118:	01808004 	movi	r6,512
  80711c:	08088380 	call	808838 <memCpy>
        ioman_setWritable(bp);
  807120:	e0bffa0b 	ldhu	r2,-24(fp)
  807124:	117fffcc 	andi	r5,r2,65535
  807128:	e13ffc17 	ldw	r4,-16(fp)
  80712c:	01800084 	movi	r6,2
  807130:	01c00044 	movi	r7,1
  807134:	08057f40 	call	8057f4 <ioman_setAttr>
        return(0);
  807138:	e03fff15 	stw	zero,-4(fp)
  80713c:	00003606 	br	807218 <ioman_directSectorWrite+0x154>
    }
    
    if((bp=ioman_findFreeSpot(ioman))!=-1){
  807140:	e13ffc17 	ldw	r4,-16(fp)
  807144:	08064580 	call	806458 <ioman_findFreeSpot>
  807148:	e0bffa0d 	sth	r2,-24(fp)
  80714c:	e0bffa0f 	ldh	r2,-24(fp)
  807150:	10bfffe0 	cmpeqi	r2,r2,-1
  807154:	1000231e 	bne	r2,zero,8071e4 <ioman_directSectorWrite+0x120>
        ibuf=ioman_getPtr(ioman,bp);
  807158:	e0bffa0b 	ldhu	r2,-24(fp)
  80715c:	117fffcc 	andi	r5,r2,65535
  807160:	e13ffc17 	ldw	r4,-16(fp)
  807164:	08060d40 	call	8060d4 <ioman_getPtr>
  807168:	e0bffb15 	stw	r2,-20(fp)
        memCpy(buf,ibuf,512);
  80716c:	e13ffe17 	ldw	r4,-8(fp)
  807170:	e17ffb17 	ldw	r5,-20(fp)
  807174:	01808004 	movi	r6,512
  807178:	08088380 	call	808838 <memCpy>
        ioman_resetCacheItem(ioman,bp);
  80717c:	e0bffa0b 	ldhu	r2,-24(fp)
  807180:	117fffcc 	andi	r5,r2,65535
  807184:	e13ffc17 	ldw	r4,-16(fp)
  807188:	080630c0 	call	80630c <ioman_resetCacheItem>
        ioman->sector[bp]=address;
  80718c:	e0bffa0f 	ldh	r2,-24(fp)
  807190:	e0fffc17 	ldw	r3,-16(fp)
  807194:	1085883a 	add	r2,r2,r2
  807198:	1085883a 	add	r2,r2,r2
  80719c:	10c5883a 	add	r2,r2,r3
  8071a0:	10c01c04 	addi	r3,r2,112
  8071a4:	e0bffd17 	ldw	r2,-12(fp)
  8071a8:	18800015 	stw	r2,0(r3)
        ioman_setWritable(bp);
  8071ac:	e0bffa0b 	ldhu	r2,-24(fp)
  8071b0:	117fffcc 	andi	r5,r2,65535
  8071b4:	e13ffc17 	ldw	r4,-16(fp)
  8071b8:	01800084 	movi	r6,2
  8071bc:	01c00044 	movi	r7,1
  8071c0:	08057f40 	call	8057f4 <ioman_setAttr>
        ioman_setValid(bp);
  8071c4:	e0bffa0b 	ldhu	r2,-24(fp)
  8071c8:	117fffcc 	andi	r5,r2,65535
  8071cc:	e13ffc17 	ldw	r4,-16(fp)
  8071d0:	000d883a 	mov	r6,zero
  8071d4:	01c00044 	movi	r7,1
  8071d8:	08057f40 	call	8057f4 <ioman_setAttr>
        return(0);
  8071dc:	e03fff15 	stw	zero,-4(fp)
  8071e0:	00000d06 	br	807218 <ioman_directSectorWrite+0x154>
    }

    if(ioman_writeSector(ioman,address,buf)){
  8071e4:	e13ffc17 	ldw	r4,-16(fp)
  8071e8:	e17ffd17 	ldw	r5,-12(fp)
  8071ec:	e1bffe17 	ldw	r6,-8(fp)
  8071f0:	08062800 	call	806280 <ioman_writeSector>
  8071f4:	10803fcc 	andi	r2,r2,255
  8071f8:	1080201c 	xori	r2,r2,128
  8071fc:	10bfe004 	addi	r2,r2,-128
  807200:	1005003a 	cmpeq	r2,r2,zero
  807204:	1000031e 	bne	r2,zero,807214 <ioman_directSectorWrite+0x150>
        return(-1);
  807208:	00bfffc4 	movi	r2,-1
  80720c:	e0bfff15 	stw	r2,-4(fp)
  807210:	00000106 	br	807218 <ioman_directSectorWrite+0x154>
    }

    return(0);
  807214:	e03fff15 	stw	zero,-4(fp)
  807218:	e0bfff17 	ldw	r2,-4(fp)
}
  80721c:	e037883a 	mov	sp,fp
  807220:	dfc00117 	ldw	ra,4(sp)
  807224:	df000017 	ldw	fp,0(sp)
  807228:	dec00204 	addi	sp,sp,8
  80722c:	f800283a 	ret

00807230 <ioman_printStatus>:
/*****************************************************************************/

void ioman_printStatus(IOManager *ioman)
{
  807230:	defff304 	addi	sp,sp,-52
  807234:	dfc00c15 	stw	ra,48(sp)
  807238:	df000b15 	stw	fp,44(sp)
  80723c:	df000b04 	addi	fp,sp,44
  807240:	e13ff915 	stw	r4,-28(fp)
    euint16 c;
    
    DBG((TXT("IO-Manager -- Report\n====================\n")));
  807244:	010020b4 	movhi	r4,130
  807248:	210a8604 	addi	r4,r4,10776
  80724c:	080df580 	call	80df58 <puts>
    DBG((TXT("Buffer is %i sectors, from %p to %p\n"),
  807250:	e0bff917 	ldw	r2,-28(fp)
  807254:	1080020b 	ldhu	r2,8(r2)
  807258:	117fffcc 	andi	r5,r2,65535
  80725c:	e0bff917 	ldw	r2,-28(fp)
  807260:	11800117 	ldw	r6,4(r2)
  807264:	e0bff917 	ldw	r2,-28(fp)
  807268:	10c00117 	ldw	r3,4(r2)
  80726c:	e0bff917 	ldw	r2,-28(fp)
  807270:	1080020b 	ldhu	r2,8(r2)
  807274:	10bfffcc 	andi	r2,r2,65535
  807278:	1004927a 	slli	r2,r2,9
  80727c:	188f883a 	add	r7,r3,r2
  807280:	010020b4 	movhi	r4,130
  807284:	210a9104 	addi	r4,r4,10820
  807288:	080de1c0 	call	80de1c <printf>
              ioman->numbuf,ioman->bufptr,ioman->bufptr+(ioman->numbuf*512)));
    for(c=0;c<ioman->numbuf;c++){
  80728c:	e03ff80d 	sth	zero,-32(fp)
  807290:	00004606 	br	8073ac <ioman_printStatus+0x17c>
        if(ioman_isValid(c)){
  807294:	e17ff80b 	ldhu	r5,-32(fp)
  807298:	e13ff917 	ldw	r4,-28(fp)
  80729c:	000d883a 	mov	r6,zero
  8072a0:	08058d80 	call	8058d8 <ioman_getAttr>
  8072a4:	10803fcc 	andi	r2,r2,255
  8072a8:	1005003a 	cmpeq	r2,r2,zero
  8072ac:	10003c1e 	bne	r2,zero,8073a0 <ioman_printStatus+0x170>
            DBG((TXT("BP %3i\t SC %8li\t\t US %i\t RF %i\t %s %s\n"),
  8072b0:	e0bff80b 	ldhu	r2,-32(fp)
  8072b4:	e0bfff15 	stw	r2,-4(fp)
  8072b8:	e0bff80b 	ldhu	r2,-32(fp)
  8072bc:	e0fff917 	ldw	r3,-28(fp)
  8072c0:	1085883a 	add	r2,r2,r2
  8072c4:	1085883a 	add	r2,r2,r2
  8072c8:	10c5883a 	add	r2,r2,r3
  8072cc:	10801c04 	addi	r2,r2,112
  8072d0:	10800017 	ldw	r2,0(r2)
  8072d4:	e0bffe15 	stw	r2,-8(fp)
  8072d8:	e17ff80b 	ldhu	r5,-32(fp)
  8072dc:	e13ff917 	ldw	r4,-28(fp)
  8072e0:	08059600 	call	805960 <ioman_getUseCnt>
  8072e4:	10803fcc 	andi	r2,r2,255
  8072e8:	e0bffd15 	stw	r2,-12(fp)
  8072ec:	e17ff80b 	ldhu	r5,-32(fp)
  8072f0:	e13ff917 	ldw	r4,-28(fp)
  8072f4:	0805b500 	call	805b50 <ioman_getRefCnt>
  8072f8:	10803fcc 	andi	r2,r2,255
  8072fc:	e0bffc15 	stw	r2,-16(fp)
  807300:	e17ff80b 	ldhu	r5,-32(fp)
  807304:	e13ff917 	ldw	r4,-28(fp)
  807308:	01800044 	movi	r6,1
  80730c:	08058d80 	call	8058d8 <ioman_getAttr>
  807310:	10803fcc 	andi	r2,r2,255
  807314:	1005003a 	cmpeq	r2,r2,zero
  807318:	1000041e 	bne	r2,zero,80732c <ioman_printStatus+0xfc>
  80731c:	008020b4 	movhi	r2,130
  807320:	108a9b04 	addi	r2,r2,10860
  807324:	e0bffb15 	stw	r2,-20(fp)
  807328:	00000306 	br	807338 <ioman_printStatus+0x108>
  80732c:	008020b4 	movhi	r2,130
  807330:	108a9d04 	addi	r2,r2,10868
  807334:	e0bffb15 	stw	r2,-20(fp)
  807338:	e17ff80b 	ldhu	r5,-32(fp)
  80733c:	e13ff917 	ldw	r4,-28(fp)
  807340:	01800084 	movi	r6,2
  807344:	08058d80 	call	8058d8 <ioman_getAttr>
  807348:	10803fcc 	andi	r2,r2,255
  80734c:	1005003a 	cmpeq	r2,r2,zero
  807350:	1000041e 	bne	r2,zero,807364 <ioman_printStatus+0x134>
  807354:	008020b4 	movhi	r2,130
  807358:	108a9f04 	addi	r2,r2,10876
  80735c:	e0bffa15 	stw	r2,-24(fp)
  807360:	00000306 	br	807370 <ioman_printStatus+0x140>
  807364:	008020b4 	movhi	r2,130
  807368:	108aa204 	addi	r2,r2,10888
  80736c:	e0bffa15 	stw	r2,-24(fp)
  807370:	e0bffc17 	ldw	r2,-16(fp)
  807374:	d8800015 	stw	r2,0(sp)
  807378:	e0bffb17 	ldw	r2,-20(fp)
  80737c:	d8800115 	stw	r2,4(sp)
  807380:	e0bffa17 	ldw	r2,-24(fp)
  807384:	d8800215 	stw	r2,8(sp)
  807388:	010020b4 	movhi	r4,130
  80738c:	210aa504 	addi	r4,r4,10900
  807390:	e17fff17 	ldw	r5,-4(fp)
  807394:	e1bffe17 	ldw	r6,-8(fp)
  807398:	e1fffd17 	ldw	r7,-12(fp)
  80739c:	080de1c0 	call	80de1c <printf>
    euint16 c;
    
    DBG((TXT("IO-Manager -- Report\n====================\n")));
    DBG((TXT("Buffer is %i sectors, from %p to %p\n"),
              ioman->numbuf,ioman->bufptr,ioman->bufptr+(ioman->numbuf*512)));
    for(c=0;c<ioman->numbuf;c++){
  8073a0:	e0bff80b 	ldhu	r2,-32(fp)
  8073a4:	10800044 	addi	r2,r2,1
  8073a8:	e0bff80d 	sth	r2,-32(fp)
  8073ac:	e0bff917 	ldw	r2,-28(fp)
  8073b0:	1080020b 	ldhu	r2,8(r2)
  8073b4:	10ffffcc 	andi	r3,r2,65535
  8073b8:	e0bff80b 	ldhu	r2,-32(fp)
  8073bc:	10ffb536 	bltu	r2,r3,807294 <ioman_printStatus+0x64>
                c,ioman->sector[c],ioman_getUseCnt(ioman,c),ioman_getRefCnt(ioman,c),
                ioman_isUserBuf(c) ? "USRBUF" : "      ",
                ioman_isWritable(c) ? "WRITABLE" : "READONLY"));
        }
    }
}
  8073c0:	e037883a 	mov	sp,fp
  8073c4:	dfc00117 	ldw	ra,4(sp)
  8073c8:	df000017 	ldw	fp,0(sp)
  8073cc:	dec00204 	addi	sp,sp,8
  8073d0:	f800283a 	ret

008073d4 <ls_openDir>:
/*****************************************************************************/
#include "ls.h"
/*****************************************************************************/

esint8 ls_openDir(DirList *dlist,FileSystem *fs,eint8* dirname)
{
  8073d4:	defff704 	addi	sp,sp,-36
  8073d8:	dfc00815 	stw	ra,32(sp)
  8073dc:	df000715 	stw	fp,28(sp)
  8073e0:	df000704 	addi	fp,sp,28
  8073e4:	e13ffc15 	stw	r4,-16(fp)
  8073e8:	e17ffd15 	stw	r5,-12(fp)
  8073ec:	e1bffe15 	stw	r6,-8(fp)
	FileLocation loc;
	euint32 fc;
	
	dlist->fs=fs;
  8073f0:	e0fffc17 	ldw	r3,-16(fp)
  8073f4:	e0bffd17 	ldw	r2,-12(fp)
  8073f8:	18800015 	stw	r2,0(r3)
	
	if(fs_findFile(dlist->fs,dirname,&loc,&fc)!=2)
  8073fc:	e0bffc17 	ldw	r2,-16(fp)
  807400:	11000017 	ldw	r4,0(r2)
  807404:	e1fffb04 	addi	r7,fp,-20
  807408:	e17ffe17 	ldw	r5,-8(fp)
  80740c:	e1bff904 	addi	r6,fp,-28
  807410:	0804da80 	call	804da8 <fs_findFile>
  807414:	10803fcc 	andi	r2,r2,255
  807418:	1080201c 	xori	r2,r2,128
  80741c:	10bfe004 	addi	r2,r2,-128
  807420:	108000a0 	cmpeqi	r2,r2,2
  807424:	1000031e 	bne	r2,zero,807434 <ls_openDir+0x60>
	{
		return(-1);
  807428:	00bfffc4 	movi	r2,-1
  80742c:	e0bfff15 	stw	r2,-4(fp)
  807430:	00001006 	br	807474 <ls_openDir+0xa0>
	}
	
	fs_initClusterChain(dlist->fs,&(dlist->Cache),fc);
  807434:	e0bffc17 	ldw	r2,-16(fp)
  807438:	11000017 	ldw	r4,0(r2)
  80743c:	e0bffc17 	ldw	r2,-16(fp)
  807440:	11400704 	addi	r5,r2,28
  807444:	e1bffb17 	ldw	r6,-20(fp)
  807448:	08052340 	call	805234 <fs_initClusterChain>
	memClr(&(dlist->currentEntry),sizeof(dlist->currentEntry));
  80744c:	e0bffc17 	ldw	r2,-16(fp)
  807450:	11000204 	addi	r4,r2,8
  807454:	01400504 	movi	r5,20
  807458:	08088a40 	call	8088a4 <memClr>
	dlist->rEntry=0;
  80745c:	e0bffc17 	ldw	r2,-16(fp)
  807460:	1000018d 	sth	zero,6(r2)
	dlist->cEntry=0xFFFF;
  807464:	e0fffc17 	ldw	r3,-16(fp)
  807468:	00bfffc4 	movi	r2,-1
  80746c:	1880010d 	sth	r2,4(r3)
	
	return(0);
  807470:	e03fff15 	stw	zero,-4(fp)
  807474:	e0bfff17 	ldw	r2,-4(fp)
}
  807478:	e037883a 	mov	sp,fp
  80747c:	dfc00117 	ldw	ra,4(sp)
  807480:	df000017 	ldw	fp,0(sp)
  807484:	dec00204 	addi	sp,sp,8
  807488:	f800283a 	ret

0080748c <ls_getDirEntry>:
/*****************************************************************************/

esint8 ls_getDirEntry(DirList *dlist)
{
  80748c:	defffc04 	addi	sp,sp,-16
  807490:	dfc00315 	stw	ra,12(sp)
  807494:	df000215 	stw	fp,8(sp)
  807498:	df000204 	addi	fp,sp,8
  80749c:	e13ffe15 	stw	r4,-8(fp)
	if(dlist->Cache.FirstCluster == 1){
  8074a0:	e0bffe17 	ldw	r2,-8(fp)
  8074a4:	10800a17 	ldw	r2,40(r2)
  8074a8:	10800058 	cmpnei	r2,r2,1
  8074ac:	1000071e 	bne	r2,zero,8074cc <ls_getDirEntry+0x40>
		return(ls_getRootAreaEntry(dlist));
  8074b0:	e13ffe17 	ldw	r4,-8(fp)
  8074b4:	08077180 	call	807718 <ls_getRootAreaEntry>
  8074b8:	10803fcc 	andi	r2,r2,255
  8074bc:	1080201c 	xori	r2,r2,128
  8074c0:	10bfe004 	addi	r2,r2,-128
  8074c4:	e0bfff15 	stw	r2,-4(fp)
  8074c8:	00000d06 	br	807500 <ls_getDirEntry+0x74>
	}else if(dlist->Cache.FirstCluster){
  8074cc:	e0bffe17 	ldw	r2,-8(fp)
  8074d0:	10800a17 	ldw	r2,40(r2)
  8074d4:	1005003a 	cmpeq	r2,r2,zero
  8074d8:	1000071e 	bne	r2,zero,8074f8 <ls_getDirEntry+0x6c>
		return(ls_getRealDirEntry(dlist));
  8074dc:	e13ffe17 	ldw	r4,-8(fp)
  8074e0:	08075c00 	call	8075c0 <ls_getRealDirEntry>
  8074e4:	10803fcc 	andi	r2,r2,255
  8074e8:	1080201c 	xori	r2,r2,128
  8074ec:	10bfe004 	addi	r2,r2,-128
  8074f0:	e0bfff15 	stw	r2,-4(fp)
  8074f4:	00000206 	br	807500 <ls_getDirEntry+0x74>
	}
	return(-1);
  8074f8:	00bfffc4 	movi	r2,-1
  8074fc:	e0bfff15 	stw	r2,-4(fp)
  807500:	e0bfff17 	ldw	r2,-4(fp)
}
  807504:	e037883a 	mov	sp,fp
  807508:	dfc00117 	ldw	ra,4(sp)
  80750c:	df000017 	ldw	fp,0(sp)
  807510:	dec00204 	addi	sp,sp,8
  807514:	f800283a 	ret

00807518 <ls_getNext>:
/*****************************************************************************/

esint8 ls_getNext(DirList *dlist)
{
  807518:	defffc04 	addi	sp,sp,-16
  80751c:	dfc00315 	stw	ra,12(sp)
  807520:	df000215 	stw	fp,8(sp)
  807524:	df000204 	addi	fp,sp,8
  807528:	e13ffe15 	stw	r4,-8(fp)
	do{
		if(ls_getDirEntry(dlist))return(-1);
  80752c:	e13ffe17 	ldw	r4,-8(fp)
  807530:	080748c0 	call	80748c <ls_getDirEntry>
  807534:	10803fcc 	andi	r2,r2,255
  807538:	1080201c 	xori	r2,r2,128
  80753c:	10bfe004 	addi	r2,r2,-128
  807540:	1005003a 	cmpeq	r2,r2,zero
  807544:	1000031e 	bne	r2,zero,807554 <ls_getNext+0x3c>
  807548:	00bfffc4 	movi	r2,-1
  80754c:	e0bfff15 	stw	r2,-4(fp)
  807550:	00001506 	br	8075a8 <ls_getNext+0x90>
		dlist->rEntry++;
  807554:	e0bffe17 	ldw	r2,-8(fp)
  807558:	1080018b 	ldhu	r2,6(r2)
  80755c:	10800044 	addi	r2,r2,1
  807560:	1007883a 	mov	r3,r2
  807564:	e0bffe17 	ldw	r2,-8(fp)
  807568:	10c0018d 	sth	r3,6(r2)
	}while(!ls_isValidFileEntry(&(dlist->currentEntry)));
  80756c:	e0bffe17 	ldw	r2,-8(fp)
  807570:	11000204 	addi	r4,r2,8
  807574:	08078280 	call	807828 <ls_isValidFileEntry>
  807578:	10803fcc 	andi	r2,r2,255
  80757c:	1080201c 	xori	r2,r2,128
  807580:	10bfe004 	addi	r2,r2,-128
  807584:	1005003a 	cmpeq	r2,r2,zero
  807588:	103fe81e 	bne	r2,zero,80752c <ls_getNext+0x14>
	dlist->cEntry++;
  80758c:	e0bffe17 	ldw	r2,-8(fp)
  807590:	1080010b 	ldhu	r2,4(r2)
  807594:	10800044 	addi	r2,r2,1
  807598:	1007883a 	mov	r3,r2
  80759c:	e0bffe17 	ldw	r2,-8(fp)
  8075a0:	10c0010d 	sth	r3,4(r2)
	return(0);
  8075a4:	e03fff15 	stw	zero,-4(fp)
  8075a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8075ac:	e037883a 	mov	sp,fp
  8075b0:	dfc00117 	ldw	ra,4(sp)
  8075b4:	df000017 	ldw	fp,0(sp)
  8075b8:	dec00204 	addi	sp,sp,8
  8075bc:	f800283a 	ret

008075c0 <ls_getRealDirEntry>:
/*****************************************************************************/

esint8 ls_getRealDirEntry(DirList *dlist)
{
  8075c0:	defff904 	addi	sp,sp,-28
  8075c4:	dfc00615 	stw	ra,24(sp)
  8075c8:	df000515 	stw	fp,20(sp)
  8075cc:	dc400415 	stw	r17,16(sp)
  8075d0:	dc000315 	stw	r16,12(sp)
  8075d4:	df000304 	addi	fp,sp,12
  8075d8:	e13ffe15 	stw	r4,-8(fp)
	euint8* buf;
	
	if(dlist->Cache.FirstCluster<=1)return(-1);
  8075dc:	e0bffe17 	ldw	r2,-8(fp)
  8075e0:	10800a17 	ldw	r2,40(r2)
  8075e4:	108000a8 	cmpgeui	r2,r2,2
  8075e8:	1000031e 	bne	r2,zero,8075f8 <ls_getRealDirEntry+0x38>
  8075ec:	00bfffc4 	movi	r2,-1
  8075f0:	e0bfff15 	stw	r2,-4(fp)
  8075f4:	00004006 	br	8076f8 <ls_getRealDirEntry+0x138>
	
	if(fat_LogicToDiscCluster(dlist->fs,
  8075f8:	e0bffe17 	ldw	r2,-8(fp)
  8075fc:	14000017 	ldw	r16,0(r2)
  807600:	e0bffe17 	ldw	r2,-8(fp)
  807604:	14400704 	addi	r17,r2,28
  807608:	e0bffe17 	ldw	r2,-8(fp)
  80760c:	1080018b 	ldhu	r2,6(r2)
  807610:	113fffcc 	andi	r4,r2,65535
  807614:	e0bffe17 	ldw	r2,-8(fp)
  807618:	10800017 	ldw	r2,0(r2)
  80761c:	10800183 	ldbu	r2,6(r2)
  807620:	10803fcc 	andi	r2,r2,255
  807624:	100a913a 	slli	r5,r2,4
  807628:	080cf180 	call	80cf18 <__divsi3>
  80762c:	100d883a 	mov	r6,r2
  807630:	8009883a 	mov	r4,r16
  807634:	880b883a 	mov	r5,r17
  807638:	0802b000 	call	802b00 <fat_LogicToDiscCluster>
  80763c:	10bfffcc 	andi	r2,r2,65535
  807640:	10a0001c 	xori	r2,r2,32768
  807644:	10a00004 	addi	r2,r2,-32768
  807648:	1005003a 	cmpeq	r2,r2,zero
  80764c:	1000031e 	bne	r2,zero,80765c <ls_getRealDirEntry+0x9c>
						   &(dlist->Cache),
						   (dlist->rEntry)/(16 * dlist->fs->volumeId.SectorsPerCluster))){
		return(-1);
  807650:	00bfffc4 	movi	r2,-1
  807654:	e0bfff15 	stw	r2,-4(fp)
  807658:	00002706 	br	8076f8 <ls_getRealDirEntry+0x138>
	}
	
	buf = part_getSect(dlist->fs->part,
  80765c:	e0bffe17 	ldw	r2,-8(fp)
  807660:	10800017 	ldw	r2,0(r2)
  807664:	14000017 	ldw	r16,0(r2)
  807668:	e0bffe17 	ldw	r2,-8(fp)
  80766c:	11000017 	ldw	r4,0(r2)
  807670:	e0bffe17 	ldw	r2,-8(fp)
  807674:	11400917 	ldw	r5,36(r2)
  807678:	0804b3c0 	call	804b3c <fs_clusterToSector>
  80767c:	1023883a 	mov	r17,r2
  807680:	e0bffe17 	ldw	r2,-8(fp)
  807684:	1080018b 	ldhu	r2,6(r2)
  807688:	10bfffcc 	andi	r2,r2,65535
  80768c:	1004d13a 	srli	r2,r2,4
  807690:	113fffcc 	andi	r4,r2,65535
  807694:	e0bffe17 	ldw	r2,-8(fp)
  807698:	10800017 	ldw	r2,0(r2)
  80769c:	10800183 	ldbu	r2,6(r2)
  8076a0:	11403fcc 	andi	r5,r2,255
  8076a4:	080cf780 	call	80cf78 <__modsi3>
  8076a8:	888b883a 	add	r5,r17,r2
  8076ac:	8009883a 	mov	r4,r16
  8076b0:	01800044 	movi	r6,1
  8076b4:	08085980 	call	808598 <part_getSect>
  8076b8:	e0bffd15 	stw	r2,-12(fp)
					   fs_clusterToSector(dlist->fs,dlist->Cache.DiscCluster) + (dlist->rEntry/16)%dlist->fs->volumeId.SectorsPerCluster,
				       IOM_MODE_READONLY);
	
	/*memCpy(buf+(dlist->rEntry%16)*32,&(dlist->currentEntry),32);*/
	ls_fileEntryToDirListEntry(dlist,buf,32*(dlist->rEntry%16));
  8076bc:	e0bffe17 	ldw	r2,-8(fp)
  8076c0:	1080018b 	ldhu	r2,6(r2)
  8076c4:	10bfffcc 	andi	r2,r2,65535
  8076c8:	108003cc 	andi	r2,r2,15
  8076cc:	1004917a 	slli	r2,r2,5
  8076d0:	11bfffcc 	andi	r6,r2,65535
  8076d4:	e13ffe17 	ldw	r4,-8(fp)
  8076d8:	e17ffd17 	ldw	r5,-12(fp)
  8076dc:	08078b80 	call	8078b8 <ls_fileEntryToDirListEntry>
	
	part_relSect(dlist->fs->part,buf);
  8076e0:	e0bffe17 	ldw	r2,-8(fp)
  8076e4:	10800017 	ldw	r2,0(r2)
  8076e8:	11000017 	ldw	r4,0(r2)
  8076ec:	e17ffd17 	ldw	r5,-12(fp)
  8076f0:	08085f80 	call	8085f8 <part_relSect>
	
	return(0);
  8076f4:	e03fff15 	stw	zero,-4(fp)
  8076f8:	e0bfff17 	ldw	r2,-4(fp)
}
  8076fc:	e037883a 	mov	sp,fp
  807700:	dfc00317 	ldw	ra,12(sp)
  807704:	df000217 	ldw	fp,8(sp)
  807708:	dc400117 	ldw	r17,4(sp)
  80770c:	dc000017 	ldw	r16,0(sp)
  807710:	dec00404 	addi	sp,sp,16
  807714:	f800283a 	ret

00807718 <ls_getRootAreaEntry>:
/*****************************************************************************/

esint8 ls_getRootAreaEntry(DirList *dlist)
{
  807718:	defffb04 	addi	sp,sp,-20
  80771c:	dfc00415 	stw	ra,16(sp)
  807720:	df000315 	stw	fp,12(sp)
  807724:	df000304 	addi	fp,sp,12
  807728:	e13ffe15 	stw	r4,-8(fp)
	euint8 *buf=0;
  80772c:	e03ffd15 	stw	zero,-12(fp)
	
	if((dlist->fs->type != FAT12) && (dlist->fs->type != FAT16))return(-1);
  807730:	e0bffe17 	ldw	r2,-8(fp)
  807734:	10800017 	ldw	r2,0(r2)
  807738:	10800f03 	ldbu	r2,60(r2)
  80773c:	10803fcc 	andi	r2,r2,255
  807740:	10800060 	cmpeqi	r2,r2,1
  807744:	1000091e 	bne	r2,zero,80776c <ls_getRootAreaEntry+0x54>
  807748:	e0bffe17 	ldw	r2,-8(fp)
  80774c:	10800017 	ldw	r2,0(r2)
  807750:	10800f03 	ldbu	r2,60(r2)
  807754:	10803fcc 	andi	r2,r2,255
  807758:	108000a0 	cmpeqi	r2,r2,2
  80775c:	1000031e 	bne	r2,zero,80776c <ls_getRootAreaEntry+0x54>
  807760:	00bfffc4 	movi	r2,-1
  807764:	e0bfff15 	stw	r2,-4(fp)
  807768:	00002906 	br	807810 <ls_getRootAreaEntry+0xf8>
	if(dlist->rEntry>=dlist->fs->volumeId.RootEntryCount)return(-1);
  80776c:	e0bffe17 	ldw	r2,-8(fp)
  807770:	10c0018b 	ldhu	r3,6(r2)
  807774:	e0bffe17 	ldw	r2,-8(fp)
  807778:	10800017 	ldw	r2,0(r2)
  80777c:	1080030b 	ldhu	r2,12(r2)
  807780:	18ffffcc 	andi	r3,r3,65535
  807784:	10bfffcc 	andi	r2,r2,65535
  807788:	18800336 	bltu	r3,r2,807798 <ls_getRootAreaEntry+0x80>
  80778c:	00bfffc4 	movi	r2,-1
  807790:	e0bfff15 	stw	r2,-4(fp)
  807794:	00001e06 	br	807810 <ls_getRootAreaEntry+0xf8>
	
	buf = part_getSect(dlist->fs->part,
  807798:	e0bffe17 	ldw	r2,-8(fp)
  80779c:	10800017 	ldw	r2,0(r2)
  8077a0:	11000017 	ldw	r4,0(r2)
  8077a4:	e0bffe17 	ldw	r2,-8(fp)
  8077a8:	10800017 	ldw	r2,0(r2)
  8077ac:	10c00b17 	ldw	r3,44(r2)
  8077b0:	e0bffe17 	ldw	r2,-8(fp)
  8077b4:	1080018b 	ldhu	r2,6(r2)
  8077b8:	10bfffcc 	andi	r2,r2,65535
  8077bc:	1004d13a 	srli	r2,r2,4
  8077c0:	10bfffcc 	andi	r2,r2,65535
  8077c4:	188b883a 	add	r5,r3,r2
  8077c8:	01800044 	movi	r6,1
  8077cc:	08085980 	call	808598 <part_getSect>
  8077d0:	e0bffd15 	stw	r2,-12(fp)
					   dlist->fs->FirstSectorRootDir+dlist->rEntry/16,
					   IOM_MODE_READONLY);
	/*memCpy(buf+32*(dlist->rEntry%16),&(dlist->currentEntry),32);*/
	ls_fileEntryToDirListEntry(dlist,buf,32*(dlist->rEntry%16));
  8077d4:	e0bffe17 	ldw	r2,-8(fp)
  8077d8:	1080018b 	ldhu	r2,6(r2)
  8077dc:	10bfffcc 	andi	r2,r2,65535
  8077e0:	108003cc 	andi	r2,r2,15
  8077e4:	1004917a 	slli	r2,r2,5
  8077e8:	11bfffcc 	andi	r6,r2,65535
  8077ec:	e13ffe17 	ldw	r4,-8(fp)
  8077f0:	e17ffd17 	ldw	r5,-12(fp)
  8077f4:	08078b80 	call	8078b8 <ls_fileEntryToDirListEntry>
	part_relSect(dlist->fs->part,buf);
  8077f8:	e0bffe17 	ldw	r2,-8(fp)
  8077fc:	10800017 	ldw	r2,0(r2)
  807800:	11000017 	ldw	r4,0(r2)
  807804:	e17ffd17 	ldw	r5,-12(fp)
  807808:	08085f80 	call	8085f8 <part_relSect>
	return(0);
  80780c:	e03fff15 	stw	zero,-4(fp)
  807810:	e0bfff17 	ldw	r2,-4(fp)
}
  807814:	e037883a 	mov	sp,fp
  807818:	dfc00117 	ldw	ra,4(sp)
  80781c:	df000017 	ldw	fp,0(sp)
  807820:	dec00204 	addi	sp,sp,8
  807824:	f800283a 	ret

00807828 <ls_isValidFileEntry>:
/*****************************************************************************/

esint8 ls_isValidFileEntry(ListDirEntry *entry)
{
  807828:	defffd04 	addi	sp,sp,-12
  80782c:	df000215 	stw	fp,8(sp)
  807830:	df000204 	addi	fp,sp,8
  807834:	e13ffe15 	stw	r4,-8(fp)
	if(entry->FileName[0] == 0 || entry->FileName[0] == 0xE5 || entry->FileName[0] == '.')return(0);
  807838:	e0bffe17 	ldw	r2,-8(fp)
  80783c:	10800003 	ldbu	r2,0(r2)
  807840:	10803fcc 	andi	r2,r2,255
  807844:	1005003a 	cmpeq	r2,r2,zero
  807848:	10000a1e 	bne	r2,zero,807874 <ls_isValidFileEntry+0x4c>
  80784c:	e0bffe17 	ldw	r2,-8(fp)
  807850:	10800003 	ldbu	r2,0(r2)
  807854:	10803fcc 	andi	r2,r2,255
  807858:	10803960 	cmpeqi	r2,r2,229
  80785c:	1000051e 	bne	r2,zero,807874 <ls_isValidFileEntry+0x4c>
  807860:	e0bffe17 	ldw	r2,-8(fp)
  807864:	10800003 	ldbu	r2,0(r2)
  807868:	10803fcc 	andi	r2,r2,255
  80786c:	10800b98 	cmpnei	r2,r2,46
  807870:	1000021e 	bne	r2,zero,80787c <ls_isValidFileEntry+0x54>
  807874:	e03fff15 	stw	zero,-4(fp)
  807878:	00000a06 	br	8078a4 <ls_isValidFileEntry+0x7c>
	if((entry->Attribute&0x0F)==0x0F)return(0);
  80787c:	e0bffe17 	ldw	r2,-8(fp)
  807880:	10800403 	ldbu	r2,16(r2)
  807884:	10803fcc 	andi	r2,r2,255
  807888:	108003cc 	andi	r2,r2,15
  80788c:	108003d8 	cmpnei	r2,r2,15
  807890:	1000021e 	bne	r2,zero,80789c <ls_isValidFileEntry+0x74>
  807894:	e03fff15 	stw	zero,-4(fp)
  807898:	00000206 	br	8078a4 <ls_isValidFileEntry+0x7c>
 	return(1);
  80789c:	00800044 	movi	r2,1
  8078a0:	e0bfff15 	stw	r2,-4(fp)
  8078a4:	e0bfff17 	ldw	r2,-4(fp)
}
  8078a8:	e037883a 	mov	sp,fp
  8078ac:	df000017 	ldw	fp,0(sp)
  8078b0:	dec00104 	addi	sp,sp,4
  8078b4:	f800283a 	ret

008078b8 <ls_fileEntryToDirListEntry>:
/*****************************************************************************/

void ls_fileEntryToDirListEntry(DirList *dlist, euint8* buf, euint16 offset)
{
  8078b8:	defffb04 	addi	sp,sp,-20
  8078bc:	dfc00415 	stw	ra,16(sp)
  8078c0:	df000315 	stw	fp,12(sp)
  8078c4:	df000304 	addi	fp,sp,12
  8078c8:	e13ffd15 	stw	r4,-12(fp)
  8078cc:	e17ffe15 	stw	r5,-8(fp)
  8078d0:	e1bfff0d 	sth	r6,-4(fp)
	if(offset>480 || offset%32)return;
  8078d4:	e0bfff0b 	ldhu	r2,-4(fp)
  8078d8:	10807868 	cmpgeui	r2,r2,481
  8078dc:	10001a1e 	bne	r2,zero,807948 <ls_fileEntryToDirListEntry+0x90>
  8078e0:	e0bfff0b 	ldhu	r2,-4(fp)
  8078e4:	108007cc 	andi	r2,r2,31
  8078e8:	1005003a 	cmpeq	r2,r2,zero
  8078ec:	1000011e 	bne	r2,zero,8078f4 <ls_fileEntryToDirListEntry+0x3c>
  8078f0:	00001506 	br	807948 <ls_fileEntryToDirListEntry+0x90>
	
	buf+=offset;
  8078f4:	e0bfff0b 	ldhu	r2,-4(fp)
  8078f8:	1007883a 	mov	r3,r2
  8078fc:	e0bffe17 	ldw	r2,-8(fp)
  807900:	10c5883a 	add	r2,r2,r3
  807904:	e0bffe15 	stw	r2,-8(fp)
	memCpy(buf+OFFSET_DE_FILENAME,dlist->currentEntry.FileName,LIST_MAXLENFILENAME);
  807908:	e0bffd17 	ldw	r2,-12(fp)
  80790c:	11400204 	addi	r5,r2,8
  807910:	e13ffe17 	ldw	r4,-8(fp)
  807914:	01800304 	movi	r6,12
  807918:	08088380 	call	808838 <memCpy>
	dlist->currentEntry.Attribute = *(buf+OFFSET_DE_ATTRIBUTE);
  80791c:	e0bffe17 	ldw	r2,-8(fp)
  807920:	108002c4 	addi	r2,r2,11
  807924:	10c00003 	ldbu	r3,0(r2)
  807928:	e0bffd17 	ldw	r2,-12(fp)
  80792c:	10c00605 	stb	r3,24(r2)
	dlist->currentEntry.FileSize = ex_getb32(buf,OFFSET_DE_FILESIZE);
  807930:	e13ffe17 	ldw	r4,-8(fp)
  807934:	01400704 	movi	r5,28
  807938:	08019b00 	call	8019b0 <ex_getb32>
  80793c:	1007883a 	mov	r3,r2
  807940:	e0bffd17 	ldw	r2,-12(fp)
  807944:	10c00515 	stw	r3,20(r2)
}
  807948:	e037883a 	mov	sp,fp
  80794c:	dfc00117 	ldw	ra,4(sp)
  807950:	df000017 	ldw	fp,0(sp)
  807954:	dec00204 	addi	sp,sp,8
  807958:	f800283a 	ret

0080795c <mkfs_makevfat>:
/*****************************************************************************/
#include "mkfs.h"
/*****************************************************************************/

signed short mkfs_makevfat(Partition *part)
{
  80795c:	deff7504 	addi	sp,sp,-556
  807960:	dfc08a15 	stw	ra,552(sp)
  807964:	df008915 	stw	fp,548(sp)
  807968:	df008904 	addi	fp,sp,548
  80796c:	e13ffe15 	stw	r4,-8(fp)
	unsigned long c,cc,ret;
	unsigned long ns,fs,ds,dc;
	unsigned char buf[512];
	
	ns=part->disc->partitions[part->activePartition].numSectors;
  807970:	e0bffe17 	ldw	r2,-8(fp)
  807974:	10c00017 	ldw	r3,0(r2)
  807978:	e0bffe17 	ldw	r2,-8(fp)
  80797c:	10800103 	ldbu	r2,4(r2)
  807980:	10803fcc 	andi	r2,r2,255
  807984:	1080201c 	xori	r2,r2,128
  807988:	10bfe004 	addi	r2,r2,-128
  80798c:	1004913a 	slli	r2,r2,4
  807990:	10c5883a 	add	r2,r2,r3
  807994:	10800504 	addi	r2,r2,20
  807998:	10800017 	ldw	r2,0(r2)
  80799c:	e0bf7a15 	stw	r2,-536(fp)
	
	if( ns < 66581 ){
  8079a0:	e0ff7a17 	ldw	r3,-536(fp)
  8079a4:	00800074 	movhi	r2,1
  8079a8:	10810504 	addi	r2,r2,1044
  8079ac:	10c00636 	bltu	r2,r3,8079c8 <mkfs_makevfat+0x6c>
		DBG((TXT("This is not possible due to insufficient sectors. Sorry\n")));
  8079b0:	010020b4 	movhi	r4,130
  8079b4:	210aaf04 	addi	r4,r4,10940
  8079b8:	080df580 	call	80df58 <puts>
		return(MKFS_ERR_TOOLITTLESECTORS);
  8079bc:	00800044 	movi	r2,1
  8079c0:	e0bfff15 	stw	r2,-4(fp)
  8079c4:	0000d806 	br	807d28 <mkfs_makevfat+0x3cc>
	}
	
	ret=0;
  8079c8:	e03f7b15 	stw	zero,-532(fp)
	
	for(c=1<<6;c>=1;c>>=1){
  8079cc:	00801004 	movi	r2,64
  8079d0:	e0bf7d15 	stw	r2,-524(fp)
  8079d4:	00004a06 	br	807b00 <mkfs_makevfat+0x1a4>
		
		/* First guess */
		ds = ns - 32;
  8079d8:	e0bf7a17 	ldw	r2,-536(fp)
  8079dc:	10bff804 	addi	r2,r2,-32
  8079e0:	e0bf7815 	stw	r2,-544(fp)
		fs = ((ds/c)+127)/128;
  8079e4:	e13f7817 	ldw	r4,-544(fp)
  8079e8:	e17f7d17 	ldw	r5,-524(fp)
  8079ec:	080cfd80 	call	80cfd8 <__udivsi3>
  8079f0:	10801fc4 	addi	r2,r2,127
  8079f4:	1004d1fa 	srli	r2,r2,7
  8079f8:	e0bf7915 	stw	r2,-540(fp)
		/* ds was guess too large, so fs is too large now too. */
		
		for(cc=0;cc<2;cc++){
  8079fc:	e03f7c15 	stw	zero,-528(fp)
  807a00:	00001d06 	br	807a78 <mkfs_makevfat+0x11c>
		
			/* Round 2, error round */
			ds = ns - 32 - 2*fs;
  807a04:	e0bf7917 	ldw	r2,-540(fp)
  807a08:	1085883a 	add	r2,r2,r2
  807a0c:	1007883a 	mov	r3,r2
  807a10:	e0bf7a17 	ldw	r2,-536(fp)
  807a14:	10c5c83a 	sub	r2,r2,r3
  807a18:	10bff804 	addi	r2,r2,-32
  807a1c:	e0bf7815 	stw	r2,-544(fp)
			fs = ((ds/c)+127)/128; 
  807a20:	e13f7817 	ldw	r4,-544(fp)
  807a24:	e17f7d17 	ldw	r5,-524(fp)
  807a28:	080cfd80 	call	80cfd8 <__udivsi3>
  807a2c:	10801fc4 	addi	r2,r2,127
  807a30:	1004d1fa 	srli	r2,r2,7
  807a34:	e0bf7915 	stw	r2,-540(fp)
			/* Since fs was too large, ds became too small. So the fs for this small ds is too small as well. */
			
			/* Round 3, correction round */
			ds = ns - 32 - 2*fs;
  807a38:	e0bf7917 	ldw	r2,-540(fp)
  807a3c:	1085883a 	add	r2,r2,r2
  807a40:	1007883a 	mov	r3,r2
  807a44:	e0bf7a17 	ldw	r2,-536(fp)
  807a48:	10c5c83a 	sub	r2,r2,r3
  807a4c:	10bff804 	addi	r2,r2,-32
  807a50:	e0bf7815 	stw	r2,-544(fp)
			fs = ((ds/c)+127)/128; 
  807a54:	e13f7817 	ldw	r4,-544(fp)
  807a58:	e17f7d17 	ldw	r5,-524(fp)
  807a5c:	080cfd80 	call	80cfd8 <__udivsi3>
  807a60:	10801fc4 	addi	r2,r2,127
  807a64:	1004d1fa 	srli	r2,r2,7
  807a68:	e0bf7915 	stw	r2,-540(fp)
		/* First guess */
		ds = ns - 32;
		fs = ((ds/c)+127)/128;
		/* ds was guess too large, so fs is too large now too. */
		
		for(cc=0;cc<2;cc++){
  807a6c:	e0bf7c17 	ldw	r2,-528(fp)
  807a70:	10800044 	addi	r2,r2,1
  807a74:	e0bf7c15 	stw	r2,-528(fp)
  807a78:	e0bf7c17 	ldw	r2,-528(fp)
  807a7c:	108000b0 	cmpltui	r2,r2,2
  807a80:	103fe01e 	bne	r2,zero,807a04 <mkfs_makevfat+0xa8>
			/* The fs was too small, so ds was too large. The calculated fs should be slightly too large. */
		
		}
		
		/* Round 4, finalise */
		ds = ns - 32 - 2*fs; 
  807a84:	e0bf7917 	ldw	r2,-540(fp)
  807a88:	1085883a 	add	r2,r2,r2
  807a8c:	1007883a 	mov	r3,r2
  807a90:	e0bf7a17 	ldw	r2,-536(fp)
  807a94:	10c5c83a 	sub	r2,r2,r3
  807a98:	10bff804 	addi	r2,r2,-32
  807a9c:	e0bf7815 	stw	r2,-544(fp)

		dc = ds / c;
  807aa0:	e13f7817 	ldw	r4,-544(fp)
  807aa4:	e17f7d17 	ldw	r5,-524(fp)
  807aa8:	080cfd80 	call	80cfd8 <__udivsi3>
  807aac:	e0bf7715 	stw	r2,-548(fp)
		if(ret<(fs*128-dc)/128)ret=(fs*128-dc)/128;
  807ab0:	e0bf7917 	ldw	r2,-540(fp)
  807ab4:	100691fa 	slli	r3,r2,7
  807ab8:	e0bf7717 	ldw	r2,-548(fp)
  807abc:	1885c83a 	sub	r2,r3,r2
  807ac0:	1006d1fa 	srli	r3,r2,7
  807ac4:	e0bf7b17 	ldw	r2,-532(fp)
  807ac8:	10c0062e 	bgeu	r2,r3,807ae4 <mkfs_makevfat+0x188>
  807acc:	e0bf7917 	ldw	r2,-540(fp)
  807ad0:	100691fa 	slli	r3,r2,7
  807ad4:	e0bf7717 	ldw	r2,-548(fp)
  807ad8:	1885c83a 	sub	r2,r3,r2
  807adc:	1004d1fa 	srli	r2,r2,7
  807ae0:	e0bf7b15 	stw	r2,-532(fp)
		
		/* Check if with current setting we have a valid fat ? */
		
		if(dc >= 65525 + 16){
  807ae4:	e0ff7717 	ldw	r3,-548(fp)
  807ae8:	00800074 	movhi	r2,1
  807aec:	10800104 	addi	r2,r2,4
  807af0:	10c00636 	bltu	r2,r3,807b0c <mkfs_makevfat+0x1b0>
		return(MKFS_ERR_TOOLITTLESECTORS);
	}
	
	ret=0;
	
	for(c=1<<6;c>=1;c>>=1){
  807af4:	e0bf7d17 	ldw	r2,-524(fp)
  807af8:	1004d07a 	srli	r2,r2,1
  807afc:	e0bf7d15 	stw	r2,-524(fp)
  807b00:	e0bf7d17 	ldw	r2,-524(fp)
  807b04:	1004c03a 	cmpne	r2,r2,zero
  807b08:	103fb31e 	bne	r2,zero,8079d8 <mkfs_makevfat+0x7c>
			break;
		}
	}

	/* Generate BPB */
	memClr(buf,512);
  807b0c:	e13f7e04 	addi	r4,fp,-520
  807b10:	01408004 	movi	r5,512
  807b14:	08088a40 	call	8088a4 <memClr>
	
	/* Boot code */
	*(buf+0)=0xE9;	*(buf+1)=0x00;	*(buf+2)=0x00; /* RESET */
  807b18:	00bffa44 	movi	r2,-23
  807b1c:	e0bf7e05 	stb	r2,-520(fp)
  807b20:	e0bf7e04 	addi	r2,fp,-520
  807b24:	10800044 	addi	r2,r2,1
  807b28:	10000005 	stb	zero,0(r2)
  807b2c:	e0bf7e04 	addi	r2,fp,-520
  807b30:	10800084 	addi	r2,r2,2
  807b34:	10000005 	stb	zero,0(r2)
	
	/* OEM name */
	memCpy("DSCOSMSH",buf+3,8);
  807b38:	e0bf7e04 	addi	r2,fp,-520
  807b3c:	114000c4 	addi	r5,r2,3
  807b40:	010020b4 	movhi	r4,130
  807b44:	210abd04 	addi	r4,r4,10996
  807b48:	01800204 	movi	r6,8
  807b4c:	08088380 	call	808838 <memCpy>
	
	/* Bytes/Sector */
	*((unsigned short*)(buf+11)) = 512;
  807b50:	e0bf7e04 	addi	r2,fp,-520
  807b54:	108002c4 	addi	r2,r2,11
  807b58:	1007883a 	mov	r3,r2
  807b5c:	00808004 	movi	r2,512
  807b60:	1880000d 	sth	r2,0(r3)
	
	/* Sectors/Cluster */
	*(buf+13) = c;
  807b64:	e0bf7e04 	addi	r2,fp,-520
  807b68:	10c00344 	addi	r3,r2,13
  807b6c:	e0bf7d17 	ldw	r2,-524(fp)
  807b70:	18800005 	stb	r2,0(r3)
	
	/* Reserved Sectors */
	*((unsigned short*)(buf+14)) = 32;
  807b74:	e0bf7e04 	addi	r2,fp,-520
  807b78:	10800384 	addi	r2,r2,14
  807b7c:	1007883a 	mov	r3,r2
  807b80:	00800804 	movi	r2,32
  807b84:	1880000d 	sth	r2,0(r3)
	
	/* Number of FAT Tables */
	*(buf+16) = 2;
  807b88:	e0bf7e04 	addi	r2,fp,-520
  807b8c:	10c00404 	addi	r3,r2,16
  807b90:	00800084 	movi	r2,2
  807b94:	18800005 	stb	r2,0(r3)
	
	/* RootEntryCount */
	*((unsigned short*)(buf+17)) = 0;
  807b98:	e0bf7e04 	addi	r2,fp,-520
  807b9c:	10800444 	addi	r2,r2,17
  807ba0:	1000000d 	sth	zero,0(r2)
	
	/* Total Sector Count __16 */
	*((unsigned short*)(buf+19)) = 0;
  807ba4:	e0bf7e04 	addi	r2,fp,-520
  807ba8:	108004c4 	addi	r2,r2,19
  807bac:	1000000d 	sth	zero,0(r2)
	
	/* Media (crap) */
	*(buf+21) = 0xF8;
  807bb0:	e0bf7e04 	addi	r2,fp,-520
  807bb4:	10c00544 	addi	r3,r2,21
  807bb8:	00bffe04 	movi	r2,-8
  807bbc:	18800005 	stb	r2,0(r3)
	
	/* FAT size 16 */
	*((unsigned short*)(buf+22)) = 0;
  807bc0:	e0bf7e04 	addi	r2,fp,-520
  807bc4:	10800584 	addi	r2,r2,22
  807bc8:	1000000d 	sth	zero,0(r2)
	
	/* Total Sector Count __32 */
	*((unsigned long*)(buf+32)) = ns;
  807bcc:	e0bf7e04 	addi	r2,fp,-520
  807bd0:	10800804 	addi	r2,r2,32
  807bd4:	1007883a 	mov	r3,r2
  807bd8:	e0bf7a17 	ldw	r2,-536(fp)
  807bdc:	18800015 	stw	r2,0(r3)
	
	/* Fat Size 32 */
	*((unsigned long*)(buf+36)) = fs;
  807be0:	e0bf7e04 	addi	r2,fp,-520
  807be4:	10800904 	addi	r2,r2,36
  807be8:	1007883a 	mov	r3,r2
  807bec:	e0bf7917 	ldw	r2,-540(fp)
  807bf0:	18800015 	stw	r2,0(r3)
	
	/* First Cluster Root Dir */
	*((unsigned long*)(buf+44)) = 2;
  807bf4:	e0bf7e04 	addi	r2,fp,-520
  807bf8:	10800b04 	addi	r2,r2,44
  807bfc:	1007883a 	mov	r3,r2
  807c00:	00800084 	movi	r2,2
  807c04:	18800015 	stw	r2,0(r3)
	
	/* VolumeID */
	*((unsigned long*)(buf+67)) = 0x13371337;
  807c08:	e0bf7e04 	addi	r2,fp,-520
  807c0c:	108010c4 	addi	r2,r2,67
  807c10:	1007883a 	mov	r3,r2
  807c14:	0084cdf4 	movhi	r2,4919
  807c18:	1084cdc4 	addi	r2,r2,4919
  807c1c:	18800015 	stw	r2,0(r3)
	
	/* Volume Label */
	memCpy("DISCOSMASH!",buf+71,11);
  807c20:	e0bf7e04 	addi	r2,fp,-520
  807c24:	114011c4 	addi	r5,r2,71
  807c28:	010020b4 	movhi	r4,130
  807c2c:	210ac004 	addi	r4,r4,11008
  807c30:	018002c4 	movi	r6,11
  807c34:	08088380 	call	808838 <memCpy>
	
	/* Filesystemtype */
	memCpy("FAT32   ",buf+82,8);
  807c38:	e0bf7e04 	addi	r2,fp,-520
  807c3c:	11401484 	addi	r5,r2,82
  807c40:	010020b4 	movhi	r4,130
  807c44:	210ac304 	addi	r4,r4,11020
  807c48:	01800204 	movi	r6,8
  807c4c:	08088380 	call	808838 <memCpy>
	
	/* Magic */
	*(buf+510) = 0x55; *(buf+511) = 0xAA;
  807c50:	e0bf7e04 	addi	r2,fp,-520
  807c54:	10c07f84 	addi	r3,r2,510
  807c58:	00801544 	movi	r2,85
  807c5c:	18800005 	stb	r2,0(r3)
  807c60:	e0bf7e04 	addi	r2,fp,-520
  807c64:	10c07fc4 	addi	r3,r2,511
  807c68:	00bfea84 	movi	r2,-86
  807c6c:	18800005 	stb	r2,0(r3)
	
	part_writeBuf(part,0,buf);
  807c70:	e1bf7e04 	addi	r6,fp,-520
  807c74:	e13ffe17 	ldw	r4,-8(fp)
  807c78:	000b883a 	mov	r5,zero
  807c7c:	08084d00 	call	8084d0 <part_writeBuf>
	
	memClr(buf,512);
  807c80:	e13f7e04 	addi	r4,fp,-520
  807c84:	01408004 	movi	r5,512
  807c88:	08088a40 	call	8088a4 <memClr>
	for(c=32;c<(32+2*fs);c++){
  807c8c:	00800804 	movi	r2,32
  807c90:	e0bf7d15 	stw	r2,-524(fp)
  807c94:	00000706 	br	807cb4 <mkfs_makevfat+0x358>
		part_writeBuf(part,c,buf);
  807c98:	e1bf7e04 	addi	r6,fp,-520
  807c9c:	e13ffe17 	ldw	r4,-8(fp)
  807ca0:	e17f7d17 	ldw	r5,-524(fp)
  807ca4:	08084d00 	call	8084d0 <part_writeBuf>
	*(buf+510) = 0x55; *(buf+511) = 0xAA;
	
	part_writeBuf(part,0,buf);
	
	memClr(buf,512);
	for(c=32;c<(32+2*fs);c++){
  807ca8:	e0bf7d17 	ldw	r2,-524(fp)
  807cac:	10800044 	addi	r2,r2,1
  807cb0:	e0bf7d15 	stw	r2,-524(fp)
  807cb4:	e0bf7917 	ldw	r2,-540(fp)
  807cb8:	1085883a 	add	r2,r2,r2
  807cbc:	10c00804 	addi	r3,r2,32
  807cc0:	e0bf7d17 	ldw	r2,-524(fp)
  807cc4:	10fff436 	bltu	r2,r3,807c98 <mkfs_makevfat+0x33c>
		part_writeBuf(part,c,buf);
	}
	*(((unsigned long*)buf)  )=0x0FFFFFF8;
  807cc8:	e0ff7e04 	addi	r3,fp,-520
  807ccc:	00840034 	movhi	r2,4096
  807cd0:	10bffe04 	addi	r2,r2,-8
  807cd4:	18800015 	stw	r2,0(r3)
	*(((unsigned long*)buf)+1)=0x0FFFFFFF;
  807cd8:	e0bf7e04 	addi	r2,fp,-520
  807cdc:	10c00104 	addi	r3,r2,4
  807ce0:	00840034 	movhi	r2,4096
  807ce4:	10bfffc4 	addi	r2,r2,-1
  807ce8:	18800015 	stw	r2,0(r3)
	*(((unsigned long*)buf)+2)=0x0FFFFFF8;
  807cec:	e0bf7e04 	addi	r2,fp,-520
  807cf0:	10c00204 	addi	r3,r2,8
  807cf4:	00840034 	movhi	r2,4096
  807cf8:	10bffe04 	addi	r2,r2,-8
  807cfc:	18800015 	stw	r2,0(r3)
	part_writeBuf(part,32,buf);
  807d00:	e1bf7e04 	addi	r6,fp,-520
  807d04:	e13ffe17 	ldw	r4,-8(fp)
  807d08:	01400804 	movi	r5,32
  807d0c:	08084d00 	call	8084d0 <part_writeBuf>
	part_writeBuf(part,32+fs,buf);
  807d10:	e0bf7917 	ldw	r2,-540(fp)
  807d14:	11400804 	addi	r5,r2,32
  807d18:	e1bf7e04 	addi	r6,fp,-520
  807d1c:	e13ffe17 	ldw	r4,-8(fp)
  807d20:	08084d00 	call	8084d0 <part_writeBuf>
	
	return(0);
  807d24:	e03fff15 	stw	zero,-4(fp)
  807d28:	e0bfff17 	ldw	r2,-4(fp)
}
  807d2c:	e037883a 	mov	sp,fp
  807d30:	dfc00117 	ldw	ra,4(sp)
  807d34:	df000017 	ldw	fp,0(sp)
  807d38:	dec00204 	addi	sp,sp,8
  807d3c:	f800283a 	ret

00807d40 <if_initInterface>:

#define  DUMMY 0xFF
/*****************************************************************************/

esint8 if_initInterface(hwInterface* file, eint8* opts)
{
  807d40:	defffa04 	addi	sp,sp,-24
  807d44:	dfc00515 	stw	ra,20(sp)
  807d48:	df000415 	stw	fp,16(sp)
  807d4c:	df000404 	addi	fp,sp,16
  807d50:	e13ffd15 	stw	r4,-12(fp)
  807d54:	e17ffe15 	stw	r5,-8(fp)
euint32 size;
	if_spiInit(file);
  807d58:	e13ffd17 	ldw	r4,-12(fp)
  807d5c:	0807ee40 	call	807ee4 <if_spiInit>
	if(sd_Init(file)<0)	{
  807d60:	e13ffd17 	ldw	r4,-12(fp)
  807d64:	08089540 	call	808954 <sd_Init>
  807d68:	10803fcc 	andi	r2,r2,255
  807d6c:	1080201c 	xori	r2,r2,128
  807d70:	10bfe004 	addi	r2,r2,-128
  807d74:	1004403a 	cmpge	r2,r2,zero
  807d78:	1000061e 	bne	r2,zero,807d94 <if_initInterface+0x54>
		DBG((TXT("Card failed to init, breaking up...\n")));
  807d7c:	010020b4 	movhi	r4,130
  807d80:	210ac604 	addi	r4,r4,11032
  807d84:	080df580 	call	80df58 <puts>
		return(-1);
  807d88:	00bfffc4 	movi	r2,-1
  807d8c:	e0bfff15 	stw	r2,-4(fp)
  807d90:	00001d06 	br	807e08 <if_initInterface+0xc8>
	}
	if(sd_State(file)<0){
  807d94:	e13ffd17 	ldw	r4,-12(fp)
  807d98:	0808e040 	call	808e04 <sd_State>
  807d9c:	10803fcc 	andi	r2,r2,255
  807da0:	1080201c 	xori	r2,r2,128
  807da4:	10bfe004 	addi	r2,r2,-128
  807da8:	1004403a 	cmpge	r2,r2,zero
  807dac:	1000061e 	bne	r2,zero,807dc8 <if_initInterface+0x88>
		DBG((TXT("Card didn't return the ready state, breaking up...\n")));
  807db0:	010020b4 	movhi	r4,130
  807db4:	210acf04 	addi	r4,r4,11068
  807db8:	080df580 	call	80df58 <puts>
		return(-2);
  807dbc:	00bfff84 	movi	r2,-2
  807dc0:	e0bfff15 	stw	r2,-4(fp)
  807dc4:	00001006 	br	807e08 <if_initInterface+0xc8>
	}
    
    sd_getDriveSize(file,&size);
  807dc8:	e13ffd17 	ldw	r4,-12(fp)
  807dcc:	e17ffc04 	addi	r5,fp,-16
  807dd0:	08091980 	call	809198 <sd_getDriveSize>

	file->sectorCount=size>>9; /* FIXME ASAP!! */
  807dd4:	e0bffc17 	ldw	r2,-16(fp)
  807dd8:	1004d27a 	srli	r2,r2,9
  807ddc:	1007883a 	mov	r3,r2
  807de0:	e0bffd17 	ldw	r2,-12(fp)
  807de4:	10c00015 	stw	r3,0(r2)
    DBG(TXT(("Card size:%d\n",size)));
  807de8:	e17ffc17 	ldw	r5,-16(fp)
  807dec:	010020b4 	movhi	r4,130
  807df0:	210adc04 	addi	r4,r4,11120
  807df4:	080de1c0 	call	80de1c <printf>
	DBG((TXT("Init done...\n")));
  807df8:	010020b4 	movhi	r4,130
  807dfc:	210ae004 	addi	r4,r4,11136
  807e00:	080df580 	call	80df58 <puts>
	return(0);
  807e04:	e03fff15 	stw	zero,-4(fp)
  807e08:	e0bfff17 	ldw	r2,-4(fp)
}
  807e0c:	e037883a 	mov	sp,fp
  807e10:	dfc00117 	ldw	ra,4(sp)
  807e14:	df000017 	ldw	fp,0(sp)
  807e18:	dec00204 	addi	sp,sp,8
  807e1c:	f800283a 	ret

00807e20 <if_readBuf>:
/*****************************************************************************/ 

esint8 if_readBuf(hwInterface* file,euint32 address,euint8* buf)
{
  807e20:	defffb04 	addi	sp,sp,-20
  807e24:	dfc00415 	stw	ra,16(sp)
  807e28:	df000315 	stw	fp,12(sp)
  807e2c:	df000304 	addi	fp,sp,12
  807e30:	e13ffd15 	stw	r4,-12(fp)
  807e34:	e17ffe15 	stw	r5,-8(fp)
  807e38:	e1bfff15 	stw	r6,-4(fp)
	return(sd_readSector(file,address,buf,512));
  807e3c:	e13ffd17 	ldw	r4,-12(fp)
  807e40:	e17ffe17 	ldw	r5,-8(fp)
  807e44:	e1bfff17 	ldw	r6,-4(fp)
  807e48:	01c08004 	movi	r7,512
  807e4c:	08090940 	call	809094 <sd_readSector>
  807e50:	10803fcc 	andi	r2,r2,255
  807e54:	1080201c 	xori	r2,r2,128
  807e58:	10bfe004 	addi	r2,r2,-128
}
  807e5c:	e037883a 	mov	sp,fp
  807e60:	dfc00117 	ldw	ra,4(sp)
  807e64:	df000017 	ldw	fp,0(sp)
  807e68:	dec00204 	addi	sp,sp,8
  807e6c:	f800283a 	ret

00807e70 <if_writeBuf>:
/*****************************************************************************/

esint8 if_writeBuf(hwInterface* file,euint32 address,euint8* buf)
{
  807e70:	defffb04 	addi	sp,sp,-20
  807e74:	dfc00415 	stw	ra,16(sp)
  807e78:	df000315 	stw	fp,12(sp)
  807e7c:	df000304 	addi	fp,sp,12
  807e80:	e13ffd15 	stw	r4,-12(fp)
  807e84:	e17ffe15 	stw	r5,-8(fp)
  807e88:	e1bfff15 	stw	r6,-4(fp)
	return(sd_writeSector(file,address, buf));
  807e8c:	e13ffd17 	ldw	r4,-12(fp)
  807e90:	e17ffe17 	ldw	r5,-8(fp)
  807e94:	e1bfff17 	ldw	r6,-4(fp)
  807e98:	0808fc00 	call	808fc0 <sd_writeSector>
  807e9c:	10803fcc 	andi	r2,r2,255
  807ea0:	1080201c 	xori	r2,r2,128
  807ea4:	10bfe004 	addi	r2,r2,-128
}
  807ea8:	e037883a 	mov	sp,fp
  807eac:	dfc00117 	ldw	ra,4(sp)
  807eb0:	df000017 	ldw	fp,0(sp)
  807eb4:	dec00204 	addi	sp,sp,8
  807eb8:	f800283a 	ret

00807ebc <if_setPos>:
/*****************************************************************************/ 

esint8 if_setPos(hwInterface* file,euint32 address)
{
  807ebc:	defffd04 	addi	sp,sp,-12
  807ec0:	df000215 	stw	fp,8(sp)
  807ec4:	df000204 	addi	fp,sp,8
  807ec8:	e13ffe15 	stw	r4,-8(fp)
  807ecc:	e17fff15 	stw	r5,-4(fp)
	return(0);
  807ed0:	0005883a 	mov	r2,zero
}
  807ed4:	e037883a 	mov	sp,fp
  807ed8:	df000017 	ldw	fp,0(sp)
  807edc:	dec00104 	addi	sp,sp,4
  807ee0:	f800283a 	ret

00807ee4 <if_spiInit>:
/*****************************************************************************/ 

void if_spiInit(hwInterface *iface)
{
  807ee4:	defffc04 	addi	sp,sp,-16
  807ee8:	dfc00315 	stw	ra,12(sp)
  807eec:	df000215 	stw	fp,8(sp)
  807ef0:	df000204 	addi	fp,sp,8
  807ef4:	e13fff15 	stw	r4,-4(fp)
	euint8 i;
	IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(SPI_0_BASE, 1 );
  807ef8:	00c04474 	movhi	r3,273
  807efc:	18e40d04 	addi	r3,r3,-28620
  807f00:	00800044 	movi	r2,1
  807f04:	18800035 	stwio	r2,0(r3)
	printf("\n spi ini");
  807f08:	010020b4 	movhi	r4,130
  807f0c:	210ae404 	addi	r4,r4,11152
  807f10:	080de1c0 	call	80de1c <printf>
}
  807f14:	e037883a 	mov	sp,fp
  807f18:	dfc00117 	ldw	ra,4(sp)
  807f1c:	df000017 	ldw	fp,0(sp)
  807f20:	dec00204 	addi	sp,sp,8
  807f24:	f800283a 	ret

00807f28 <if_spiSend>:
/*****************************************************************************/

euint8 if_spiSend(hwInterface *iface, euint8 outgoing)
{
  807f28:	defffb04 	addi	sp,sp,-20
  807f2c:	dfc00415 	stw	ra,16(sp)
  807f30:	df000315 	stw	fp,12(sp)
  807f34:	df000304 	addi	fp,sp,12
  807f38:	e13ffe15 	stw	r4,-8(fp)
  807f3c:	e17fff05 	stb	r5,-4(fp)
	euint8 incoming=0;
  807f40:	e03ffd85 	stb	zero,-10(fp)
	alt_u8  SD_Data=0,status;
  807f44:	e03ffd45 	stb	zero,-11(fp)
  
	
	/* Set the SSO bit (force chipselect) */
	IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE, 0x400);
  807f48:	00c04474 	movhi	r3,273
  807f4c:	18e40b04 	addi	r3,r3,-28628
  807f50:	00810004 	movi	r2,1024
  807f54:	18800035 	stwio	r2,0(r3)

	do{
    	    status = IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE);//get status
  807f58:	00804474 	movhi	r2,273
  807f5c:	10a40a04 	addi	r2,r2,-28632
  807f60:	10800037 	ldwio	r2,0(r2)
  807f64:	e0bffd05 	stb	r2,-12(fp)
	}while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 ) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  807f68:	e0bffd03 	ldbu	r2,-12(fp)
  807f6c:	1080100c 	andi	r2,r2,64
  807f70:	1004c03a 	cmpne	r2,r2,zero
  807f74:	1000061e 	bne	r2,zero,807f90 <if_spiSend+0x68>
  807f78:	e0bffd03 	ldbu	r2,-12(fp)
  807f7c:	10803fcc 	andi	r2,r2,255
  807f80:	1080201c 	xori	r2,r2,128
  807f84:	10bfe004 	addi	r2,r2,-128
  807f88:	1004403a 	cmpge	r2,r2,zero
  807f8c:	103ff21e 	bne	r2,zero,807f58 <if_spiSend+0x30>
	/* wait till transmit and ready ok */

	IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, outgoing);
  807f90:	e0ffff03 	ldbu	r3,-4(fp)
  807f94:	00804474 	movhi	r2,273
  807f98:	10a40904 	addi	r2,r2,-28636
  807f9c:	10c00035 	stwio	r3,0(r2)
    
	/* Wait until the interface has finished transmitting */
	do{status = IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE);}
  807fa0:	00804474 	movhi	r2,273
  807fa4:	10a40a04 	addi	r2,r2,-28632
  807fa8:	10800037 	ldwio	r2,0(r2)
  807fac:	e0bffd05 	stb	r2,-12(fp)
	while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
  807fb0:	e0bffd03 	ldbu	r2,-12(fp)
  807fb4:	1080080c 	andi	r2,r2,32
  807fb8:	1005003a 	cmpeq	r2,r2,zero
  807fbc:	103ff81e 	bne	r2,zero,807fa0 <if_spiSend+0x78>

	/* reciver ready */
	if (((status & 0x80) != 0) ){
  807fc0:	e0bffd03 	ldbu	r2,-12(fp)
  807fc4:	10803fcc 	andi	r2,r2,255
  807fc8:	1080201c 	xori	r2,r2,128
  807fcc:	10bfe004 	addi	r2,r2,-128
  807fd0:	1004403a 	cmpge	r2,r2,zero
  807fd4:	1000051e 	bne	r2,zero,807fec <if_spiSend+0xc4>
    	    SD_Data = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);
  807fd8:	00804474 	movhi	r2,273
  807fdc:	10a40804 	addi	r2,r2,-28640
  807fe0:	10800037 	ldwio	r2,0(r2)
  807fe4:	e0bffd45 	stb	r2,-11(fp)
  807fe8:	00000306 	br	807ff8 <if_spiSend+0xd0>
	}
	else{
		printf("\n no recive after transmit");
  807fec:	010020b4 	movhi	r4,130
  807ff0:	210ae704 	addi	r4,r4,11164
  807ff4:	080de1c0 	call	80de1c <printf>
	}
 
	IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(SPI_0_BASE, 1);
  807ff8:	00c04474 	movhi	r3,273
  807ffc:	18e40d04 	addi	r3,r3,-28620
  808000:	00800044 	movi	r2,1
  808004:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE, 0);
  808008:	00804474 	movhi	r2,273
  80800c:	10a40b04 	addi	r2,r2,-28628
  808010:	10000035 	stwio	zero,0(r2)
 
	if( (status & 0x100) !=0)
  808014:	e0bffd03 	ldbu	r2,-12(fp)
  808018:	1080400c 	andi	r2,r2,256
  80801c:	1005003a 	cmpeq	r2,r2,zero
  808020:	1000031e 	bne	r2,zero,808030 <if_spiSend+0x108>
    	printf("\n error in spi error in spi");
  808024:	010020b4 	movhi	r4,130
  808028:	210aee04 	addi	r4,r4,11192
  80802c:	080de1c0 	call	80de1c <printf>
  
	return (SD_Data);
  808030:	e0bffd43 	ldbu	r2,-11(fp)
}
  808034:	e037883a 	mov	sp,fp
  808038:	dfc00117 	ldw	ra,4(sp)
  80803c:	df000017 	ldw	fp,0(sp)
  808040:	dec00204 	addi	sp,sp,8
  808044:	f800283a 	ret

00808048 <if_spi_sendbuf>:
/*****************************************************************************/

euint8 if_spi_sendbuf(hwInterface *iface, euint8 *buf, euint16 len)
{
  808048:	defffb04 	addi	sp,sp,-20
  80804c:	df000415 	stw	fp,16(sp)
  808050:	df000404 	addi	fp,sp,16
  808054:	e13ffd15 	stw	r4,-12(fp)
  808058:	e17ffe15 	stw	r5,-8(fp)
  80805c:	e1bfff0d 	sth	r6,-4(fp)
    alt_u8  SD_Data=0,status;
  808060:	e03ffcc5 	stb	zero,-13(fp)
    alt_u16 i;
   
    /* Set the SSO bit (force chipselect) */
    IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE, 0x400);
  808064:	00c04474 	movhi	r3,273
  808068:	18e40b04 	addi	r3,r3,-28628
  80806c:	00810004 	movi	r2,1024
  808070:	18800035 	stwio	r2,0(r3)

    for(i=0;i<len;i++)
  808074:	e03ffc0d 	sth	zero,-16(fp)
  808078:	00001406 	br	8080cc <if_spi_sendbuf+0x84>
    {
        do{
            status = IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE);//get status
  80807c:	00804474 	movhi	r2,273
  808080:	10a40a04 	addi	r2,r2,-28632
  808084:	10800037 	ldwio	r2,0(r2)
  808088:	e0bffc85 	stb	r2,-14(fp)
        }while ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 );
  80808c:	e0bffc83 	ldbu	r2,-14(fp)
  808090:	1080100c 	andi	r2,r2,64
  808094:	1005003a 	cmpeq	r2,r2,zero
  808098:	103ff81e 	bne	r2,zero,80807c <if_spi_sendbuf+0x34>
        /* wait till transmit and ready ok */

        IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, buf[i]);
  80809c:	e0bffc0b 	ldhu	r2,-16(fp)
  8080a0:	1007883a 	mov	r3,r2
  8080a4:	e0bffe17 	ldw	r2,-8(fp)
  8080a8:	1885883a 	add	r2,r3,r2
  8080ac:	10800003 	ldbu	r2,0(r2)
  8080b0:	10c03fcc 	andi	r3,r2,255
  8080b4:	00804474 	movhi	r2,273
  8080b8:	10a40904 	addi	r2,r2,-28636
  8080bc:	10c00035 	stwio	r3,0(r2)
    alt_u16 i;
   
    /* Set the SSO bit (force chipselect) */
    IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE, 0x400);

    for(i=0;i<len;i++)
  8080c0:	e0bffc0b 	ldhu	r2,-16(fp)
  8080c4:	10800044 	addi	r2,r2,1
  8080c8:	e0bffc0d 	sth	r2,-16(fp)
  8080cc:	e0fffc0b 	ldhu	r3,-16(fp)
  8080d0:	e0bfff0b 	ldhu	r2,-4(fp)
  8080d4:	18bfe936 	bltu	r3,r2,80807c <if_spi_sendbuf+0x34>
        IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, buf[i]);
    }

    
    do{
        status = IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE);//get status
  8080d8:	00804474 	movhi	r2,273
  8080dc:	10a40a04 	addi	r2,r2,-28632
  8080e0:	10800037 	ldwio	r2,0(r2)
  8080e4:	e0bffc85 	stb	r2,-14(fp)
    }while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0 );
  8080e8:	e0bffc83 	ldbu	r2,-14(fp)
  8080ec:	1080080c 	andi	r2,r2,32
  8080f0:	1005003a 	cmpeq	r2,r2,zero
  8080f4:	103ff81e 	bne	r2,zero,8080d8 <if_spi_sendbuf+0x90>
 
    IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE, 0);
  8080f8:	00804474 	movhi	r2,273
  8080fc:	10a40b04 	addi	r2,r2,-28628
  808100:	10000035 	stwio	zero,0(r2)
    return (0);
  808104:	0005883a 	mov	r2,zero
}
  808108:	e037883a 	mov	sp,fp
  80810c:	df000017 	ldw	fp,0(sp)
  808110:	dec00104 	addi	sp,sp,4
  808114:	f800283a 	ret

00808118 <if_spi_readbuf>:

/*****************************************************************************/

euint8 if_spi_readbuf(hwInterface *iface, euint8 *buf, euint16 len)
{
  808118:	defffb04 	addi	sp,sp,-20
  80811c:	df000415 	stw	fp,16(sp)
  808120:	df000404 	addi	fp,sp,16
  808124:	e13ffd15 	stw	r4,-12(fp)
  808128:	e17ffe15 	stw	r5,-8(fp)
  80812c:	e1bfff0d 	sth	r6,-4(fp)
    alt_u8  status;
    alt_u16 i;
   
    /* Set the SSO bit (force chipselect) */
    IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE, 0x400);
  808130:	00c04474 	movhi	r3,273
  808134:	18e40b04 	addi	r3,r3,-28628
  808138:	00810004 	movi	r2,1024
  80813c:	18800035 	stwio	r2,0(r3)
    /* Clear RX reg*/
    buf[0] = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);
  808140:	00804474 	movhi	r2,273
  808144:	10a40804 	addi	r2,r2,-28640
  808148:	10800037 	ldwio	r2,0(r2)
  80814c:	1007883a 	mov	r3,r2
  808150:	e0bffe17 	ldw	r2,-8(fp)
  808154:	10c00005 	stb	r3,0(r2)
    /* wait till transmit and ready ok */
    do{
        status = IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE);//get status
  808158:	00804474 	movhi	r2,273
  80815c:	10a40a04 	addi	r2,r2,-28632
  808160:	10800037 	ldwio	r2,0(r2)
  808164:	e0bffc85 	stb	r2,-14(fp)
    }while ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 );
  808168:	e0bffc83 	ldbu	r2,-14(fp)
  80816c:	1080100c 	andi	r2,r2,64
  808170:	1005003a 	cmpeq	r2,r2,zero
  808174:	103ff81e 	bne	r2,zero,808158 <if_spi_readbuf+0x40>
    
    for(i=0;i<len;i++)
  808178:	e03ffc0d 	sth	zero,-16(fp)
  80817c:	00001506 	br	8081d4 <if_spi_readbuf+0xbc>
    {
        IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, DUMMY);
  808180:	00c04474 	movhi	r3,273
  808184:	18e40904 	addi	r3,r3,-28636
  808188:	00803fc4 	movi	r2,255
  80818c:	18800035 	stwio	r2,0(r3)
        /* Wait until the interface has finished transmitting */
        
        while ((IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE) & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  808190:	00804474 	movhi	r2,273
  808194:	10a40a04 	addi	r2,r2,-28632
  808198:	10800037 	ldwio	r2,0(r2)
  80819c:	1080200c 	andi	r2,r2,128
  8081a0:	1005003a 	cmpeq	r2,r2,zero
  8081a4:	103ffa1e 	bne	r2,zero,808190 <if_spi_readbuf+0x78>

        /* reciver ready */
        buf[i] = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);
  8081a8:	e0bffc0b 	ldhu	r2,-16(fp)
  8081ac:	1007883a 	mov	r3,r2
  8081b0:	e0bffe17 	ldw	r2,-8(fp)
  8081b4:	1887883a 	add	r3,r3,r2
  8081b8:	00804474 	movhi	r2,273
  8081bc:	10a40804 	addi	r2,r2,-28640
  8081c0:	10800037 	ldwio	r2,0(r2)
  8081c4:	18800005 	stb	r2,0(r3)
    /* wait till transmit and ready ok */
    do{
        status = IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE);//get status
    }while ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 );
    
    for(i=0;i<len;i++)
  8081c8:	e0bffc0b 	ldhu	r2,-16(fp)
  8081cc:	10800044 	addi	r2,r2,1
  8081d0:	e0bffc0d 	sth	r2,-16(fp)
  8081d4:	e0fffc0b 	ldhu	r3,-16(fp)
  8081d8:	e0bfff0b 	ldhu	r2,-4(fp)
  8081dc:	18bfe836 	bltu	r3,r2,808180 <if_spi_readbuf+0x68>
        /* reciver ready */
        buf[i] = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);
    
    }
 
    IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE, 0);
  8081e0:	00804474 	movhi	r2,273
  8081e4:	10a40b04 	addi	r2,r2,-28628
  8081e8:	10000035 	stwio	zero,0(r2)
    return (0);
  8081ec:	0005883a 	mov	r2,zero
}
  8081f0:	e037883a 	mov	sp,fp
  8081f4:	df000017 	ldw	fp,0(sp)
  8081f8:	dec00104 	addi	sp,sp,4
  8081fc:	f800283a 	ret

00808200 <ramdisk_setup>:


//#define CHECK_RAM 1

static esint8 ramdisk_setup(euint8 DevType)
{
  808200:	defffe04 	addi	sp,sp,-8
  808204:	df000115 	stw	fp,4(sp)
  808208:	df000104 	addi	fp,sp,4
  80820c:	e13fff05 	stb	r4,-4(fp)
            return -1;
    }
#endif   
    
   // memset((eunit8 *)(RAMDISK_ADDRESS_START),0x0,RAMDISK_SECTOR_CNT * RAMDISK_SECTOR_SIZE);
	return 0;
  808210:	0005883a 	mov	r2,zero
}
  808214:	e037883a 	mov	sp,fp
  808218:	df000017 	ldw	fp,0(sp)
  80821c:	dec00104 	addi	sp,sp,4
  808220:	f800283a 	ret

00808224 <ramdisk_read>:

/*--------------------------------------
  return actual bytes read
*/
static esint8 ramdisk_read( int block, char *buf,int blkcnt)
{
  808224:	defffb04 	addi	sp,sp,-20
  808228:	dfc00415 	stw	ra,16(sp)
  80822c:	df000315 	stw	fp,12(sp)
  808230:	df000304 	addi	fp,sp,12
  808234:	e13ffd15 	stw	r4,-12(fp)
  808238:	e17ffe15 	stw	r5,-8(fp)
  80823c:	e1bfff15 	stw	r6,-4(fp)
#ifdef EN_DMA
    memcpy_dma(buf,(eunit8 *)(RAMDISK_ADDRESS_START + block * RAMDISK_SECTOR_SIZE),blkcnt * RAMDISK_SECTOR_SIZE);
#else
	memcpy(buf,(euint8 *)(RAMDISK_ADDRESS_START + block * RAMDISK_SECTOR_SIZE),blkcnt * RAMDISK_SECTOR_SIZE);
  808240:	e0bffd17 	ldw	r2,-12(fp)
  808244:	1006927a 	slli	r3,r2,9
  808248:	00802034 	movhi	r2,128
  80824c:	1885883a 	add	r2,r3,r2
  808250:	100b883a 	mov	r5,r2
  808254:	e0bfff17 	ldw	r2,-4(fp)
  808258:	1004927a 	slli	r2,r2,9
  80825c:	1007883a 	mov	r3,r2
  808260:	e0bffe17 	ldw	r2,-8(fp)
  808264:	1009883a 	mov	r4,r2
  808268:	180d883a 	mov	r6,r3
  80826c:	080dd7c0 	call	80dd7c <memcpy>
#endif
	return blkcnt*512;
  808270:	e0bfff17 	ldw	r2,-4(fp)
  808274:	1004927a 	slli	r2,r2,9
  808278:	10803fcc 	andi	r2,r2,255
  80827c:	1080201c 	xori	r2,r2,128
  808280:	10bfe004 	addi	r2,r2,-128
}
  808284:	e037883a 	mov	sp,fp
  808288:	dfc00117 	ldw	ra,4(sp)
  80828c:	df000017 	ldw	fp,0(sp)
  808290:	dec00204 	addi	sp,sp,8
  808294:	f800283a 	ret

00808298 <ramdisk_write>:
/*---------------------------------------
  return actual bytes written
*/
static esint8 ramdisk_write(int block, char *buf,int blkcnt)
{
  808298:	defffb04 	addi	sp,sp,-20
  80829c:	dfc00415 	stw	ra,16(sp)
  8082a0:	df000315 	stw	fp,12(sp)
  8082a4:	df000304 	addi	fp,sp,12
  8082a8:	e13ffd15 	stw	r4,-12(fp)
  8082ac:	e17ffe15 	stw	r5,-8(fp)
  8082b0:	e1bfff15 	stw	r6,-4(fp)
#ifdef EN_DMA
    
	memcpy_dma((eunit8 *)(RAMDISK_ADDRESS_START + block * RAMDISK_SECTOR_SIZE),buf,blkcnt * RAMDISK_SECTOR_SIZE);
#else

	memcpy((euint8 *)(RAMDISK_ADDRESS_START + block * RAMDISK_SECTOR_SIZE),buf,blkcnt * RAMDISK_SECTOR_SIZE);
  8082b4:	e0bffd17 	ldw	r2,-12(fp)
  8082b8:	1006927a 	slli	r3,r2,9
  8082bc:	00802034 	movhi	r2,128
  8082c0:	1885883a 	add	r2,r3,r2
  8082c4:	1007883a 	mov	r3,r2
  8082c8:	e0bfff17 	ldw	r2,-4(fp)
  8082cc:	1004927a 	slli	r2,r2,9
  8082d0:	100d883a 	mov	r6,r2
  8082d4:	e0bffe17 	ldw	r2,-8(fp)
  8082d8:	1809883a 	mov	r4,r3
  8082dc:	100b883a 	mov	r5,r2
  8082e0:	080dd7c0 	call	80dd7c <memcpy>
#endif
	return blkcnt*512;
  8082e4:	e0bfff17 	ldw	r2,-4(fp)
  8082e8:	1004927a 	slli	r2,r2,9
  8082ec:	10803fcc 	andi	r2,r2,255
  8082f0:	1080201c 	xori	r2,r2,128
  8082f4:	10bfe004 	addi	r2,r2,-128
}
  8082f8:	e037883a 	mov	sp,fp
  8082fc:	dfc00117 	ldw	ra,4(sp)
  808300:	df000017 	ldw	fp,0(sp)
  808304:	dec00204 	addi	sp,sp,8
  808308:	f800283a 	ret

0080830c <ramdisk_init>:
*******************************************************************************
*                           GLOBAL FUNCTIONS
*******************************************************************************
*/
EFSBlockDev * ramdisk_init(euint8 DevType)
{
  80830c:	defffe04 	addi	sp,sp,-8
  808310:	df000115 	stw	fp,4(sp)
  808314:	df000104 	addi	fp,sp,4
  808318:	e13fff05 	stb	r4,-4(fp)
	return &spifuncs;
  80831c:	008020b4 	movhi	r2,130
  808320:	108d3904 	addi	r2,r2,13540
}
  808324:	e037883a 	mov	sp,fp
  808328:	df000017 	ldw	fp,0(sp)
  80832c:	dec00104 	addi	sp,sp,4
  808330:	f800283a 	ret

00808334 <part_initPartition>:
 * void part_initPartition(Partition *part,Disc* refDisc)
 * Description: This function searches the 4 partitions for a FAT class partition
 * and marks the first one found as the active to be used partition.
*/
void part_initPartition(Partition *part,Disc* refDisc)
{
  808334:	defffb04 	addi	sp,sp,-20
  808338:	dfc00415 	stw	ra,16(sp)
  80833c:	df000315 	stw	fp,12(sp)
  808340:	df000304 	addi	fp,sp,12
  808344:	e13ffe15 	stw	r4,-8(fp)
  808348:	e17fff15 	stw	r5,-4(fp)
	eint16 c;
	
	part->disc=refDisc;
  80834c:	e0fffe17 	ldw	r3,-8(fp)
  808350:	e0bfff17 	ldw	r2,-4(fp)
  808354:	18800015 	stw	r2,0(r3)
	part->activePartition=-1; /* No partition selected */
  808358:	e0fffe17 	ldw	r3,-8(fp)
  80835c:	00bfffc4 	movi	r2,-1
  808360:	18800105 	stb	r2,4(r3)
	part_setError(part,PART_NOERROR);
	for(c=3;c>=0;c--){
  808364:	008000c4 	movi	r2,3
  808368:	e0bffd0d 	sth	r2,-12(fp)
  80836c:	00001506 	br	8083c4 <part_initPartition+0x90>
		if(part_isFatPart(part->disc->partitions[c].type))
  808370:	e0bffe17 	ldw	r2,-8(fp)
  808374:	10c00017 	ldw	r3,0(r2)
  808378:	e0bffd0f 	ldh	r2,-12(fp)
  80837c:	1004913a 	slli	r2,r2,4
  808380:	10c5883a 	add	r2,r2,r3
  808384:	10800304 	addi	r2,r2,12
  808388:	10800003 	ldbu	r2,0(r2)
  80838c:	11003fcc 	andi	r4,r2,255
  808390:	08083e40 	call	8083e4 <part_isFatPart>
  808394:	10bfffcc 	andi	r2,r2,65535
  808398:	10a0001c 	xori	r2,r2,32768
  80839c:	10a00004 	addi	r2,r2,-32768
  8083a0:	1005003a 	cmpeq	r2,r2,zero
  8083a4:	1000041e 	bne	r2,zero,8083b8 <part_initPartition+0x84>
			part->activePartition=c;
  8083a8:	e0bffd0b 	ldhu	r2,-12(fp)
  8083ac:	1007883a 	mov	r3,r2
  8083b0:	e0bffe17 	ldw	r2,-8(fp)
  8083b4:	10c00105 	stb	r3,4(r2)
	eint16 c;
	
	part->disc=refDisc;
	part->activePartition=-1; /* No partition selected */
	part_setError(part,PART_NOERROR);
	for(c=3;c>=0;c--){
  8083b8:	e0bffd0b 	ldhu	r2,-12(fp)
  8083bc:	10bfffc4 	addi	r2,r2,-1
  8083c0:	e0bffd0d 	sth	r2,-12(fp)
  8083c4:	e0bffd0f 	ldh	r2,-12(fp)
  8083c8:	1004403a 	cmpge	r2,r2,zero
  8083cc:	103fe81e 	bne	r2,zero,808370 <part_initPartition+0x3c>
		if(part_isFatPart(part->disc->partitions[c].type))
			part->activePartition=c;
	} 
}
  8083d0:	e037883a 	mov	sp,fp
  8083d4:	dfc00117 	ldw	ra,4(sp)
  8083d8:	df000017 	ldw	fp,0(sp)
  8083dc:	dec00204 	addi	sp,sp,8
  8083e0:	f800283a 	ret

008083e4 <part_isFatPart>:
 * Description: This functions checks if a partitiontype (eint8) is of the FAT
 * type in the broadest sense. I
 * Return value: If it is FAT, returns 1, otherwise 0.
*/
eint16 part_isFatPart(euint8 type)
{
  8083e4:	defffd04 	addi	sp,sp,-12
  8083e8:	df000215 	stw	fp,8(sp)
  8083ec:	df000204 	addi	fp,sp,8
  8083f0:	e13ffe05 	stb	r4,-8(fp)
	if(type == PT_FAT12  ||
  8083f4:	e0bffe03 	ldbu	r2,-8(fp)
  8083f8:	10800060 	cmpeqi	r2,r2,1
  8083fc:	10000f1e 	bne	r2,zero,80843c <part_isFatPart+0x58>
  808400:	e0bffe03 	ldbu	r2,-8(fp)
  808404:	10800120 	cmpeqi	r2,r2,4
  808408:	10000c1e 	bne	r2,zero,80843c <part_isFatPart+0x58>
  80840c:	e0bffe03 	ldbu	r2,-8(fp)
  808410:	108001a0 	cmpeqi	r2,r2,6
  808414:	1000091e 	bne	r2,zero,80843c <part_isFatPart+0x58>
  808418:	e0bffe03 	ldbu	r2,-8(fp)
  80841c:	108002e0 	cmpeqi	r2,r2,11
  808420:	1000061e 	bne	r2,zero,80843c <part_isFatPart+0x58>
  808424:	e0bffe03 	ldbu	r2,-8(fp)
  808428:	10801720 	cmpeqi	r2,r2,92
  80842c:	1000031e 	bne	r2,zero,80843c <part_isFatPart+0x58>
  808430:	e0bffe03 	ldbu	r2,-8(fp)
  808434:	10801798 	cmpnei	r2,r2,94
  808438:	1000031e 	bne	r2,zero,808448 <part_isFatPart+0x64>
	   type == PT_FAT16  ||
	   type == PT_FAT32  ||
	   type == PT_FAT32A ||
	   type == PT_FAT16B   )
	{
		return(1);
  80843c:	00800044 	movi	r2,1
  808440:	e0bfff15 	stw	r2,-4(fp)
  808444:	00000106 	br	80844c <part_isFatPart+0x68>
	}
	return(0);
  808448:	e03fff15 	stw	zero,-4(fp)
  80844c:	e0bfff17 	ldw	r2,-4(fp)
}
  808450:	e037883a 	mov	sp,fp
  808454:	df000017 	ldw	fp,0(sp)
  808458:	dec00104 	addi	sp,sp,4
  80845c:	f800283a 	ret

00808460 <part_readBuf>:
/*****************************************************************************/ 

esint8 part_readBuf(Partition *part, euint32 address, euint8* buf)
{
  808460:	defffa04 	addi	sp,sp,-24
  808464:	dfc00515 	stw	ra,20(sp)
  808468:	df000415 	stw	fp,16(sp)
  80846c:	dc000315 	stw	r16,12(sp)
  808470:	df000304 	addi	fp,sp,12
  808474:	e13ffd15 	stw	r4,-12(fp)
  808478:	e17ffe15 	stw	r5,-8(fp)
  80847c:	e1bfff15 	stw	r6,-4(fp)
	return(if_readBuf(part->disc->ioman->iface,part_getRealLBA(part,address), buf));
  808480:	e0bffd17 	ldw	r2,-12(fp)
  808484:	10800017 	ldw	r2,0(r2)
  808488:	10800017 	ldw	r2,0(r2)
  80848c:	14000017 	ldw	r16,0(r2)
  808490:	e13ffd17 	ldw	r4,-12(fp)
  808494:	e17ffe17 	ldw	r5,-8(fp)
  808498:	08085400 	call	808540 <part_getRealLBA>
  80849c:	100b883a 	mov	r5,r2
  8084a0:	8009883a 	mov	r4,r16
  8084a4:	e1bfff17 	ldw	r6,-4(fp)
  8084a8:	0807e200 	call	807e20 <if_readBuf>
  8084ac:	10803fcc 	andi	r2,r2,255
  8084b0:	1080201c 	xori	r2,r2,128
  8084b4:	10bfe004 	addi	r2,r2,-128
}
  8084b8:	e037883a 	mov	sp,fp
  8084bc:	dfc00217 	ldw	ra,8(sp)
  8084c0:	df000117 	ldw	fp,4(sp)
  8084c4:	dc000017 	ldw	r16,0(sp)
  8084c8:	dec00304 	addi	sp,sp,12
  8084cc:	f800283a 	ret

008084d0 <part_writeBuf>:
 * Description: This function writes 512 bytes, from buf. It's offset is address
 * sectors from the beginning of the partition.
 * Return value: It returns whatever the hardware function returns. (-1=error)
*/
eint16 part_writeBuf(Partition *part,euint32 address,euint8* buf)
{
  8084d0:	defffa04 	addi	sp,sp,-24
  8084d4:	dfc00515 	stw	ra,20(sp)
  8084d8:	df000415 	stw	fp,16(sp)
  8084dc:	dc000315 	stw	r16,12(sp)
  8084e0:	df000304 	addi	fp,sp,12
  8084e4:	e13ffd15 	stw	r4,-12(fp)
  8084e8:	e17ffe15 	stw	r5,-8(fp)
  8084ec:	e1bfff15 	stw	r6,-4(fp)
	/*DBG((TXT("part_writeBuf :: %li\n"),address));*/
	return(if_writeBuf(part->disc->ioman->iface,part_getRealLBA(part,address),buf));
  8084f0:	e0bffd17 	ldw	r2,-12(fp)
  8084f4:	10800017 	ldw	r2,0(r2)
  8084f8:	10800017 	ldw	r2,0(r2)
  8084fc:	14000017 	ldw	r16,0(r2)
  808500:	e13ffd17 	ldw	r4,-12(fp)
  808504:	e17ffe17 	ldw	r5,-8(fp)
  808508:	08085400 	call	808540 <part_getRealLBA>
  80850c:	100b883a 	mov	r5,r2
  808510:	8009883a 	mov	r4,r16
  808514:	e1bfff17 	ldw	r6,-4(fp)
  808518:	0807e700 	call	807e70 <if_writeBuf>
  80851c:	10803fcc 	andi	r2,r2,255
  808520:	1080201c 	xori	r2,r2,128
  808524:	10bfe004 	addi	r2,r2,-128
}
  808528:	e037883a 	mov	sp,fp
  80852c:	dfc00217 	ldw	ra,8(sp)
  808530:	df000117 	ldw	fp,4(sp)
  808534:	dc000017 	ldw	r16,0(sp)
  808538:	dec00304 	addi	sp,sp,12
  80853c:	f800283a 	ret

00808540 <part_getRealLBA>:
 * Description: This function calculates what the partition offset for
 * a partition is + the address.
 * Return value: Sector address.
*/
euint32 part_getRealLBA(Partition *part,euint32 address)
{
  808540:	defffd04 	addi	sp,sp,-12
  808544:	df000215 	stw	fp,8(sp)
  808548:	df000204 	addi	fp,sp,8
  80854c:	e13ffe15 	stw	r4,-8(fp)
  808550:	e17fff15 	stw	r5,-4(fp)
	return(part->disc->partitions[part->activePartition].LBA_begin+address);
  808554:	e0bffe17 	ldw	r2,-8(fp)
  808558:	10c00017 	ldw	r3,0(r2)
  80855c:	e0bffe17 	ldw	r2,-8(fp)
  808560:	10800103 	ldbu	r2,4(r2)
  808564:	10803fcc 	andi	r2,r2,255
  808568:	1080201c 	xori	r2,r2,128
  80856c:	10bfe004 	addi	r2,r2,-128
  808570:	1004913a 	slli	r2,r2,4
  808574:	10c5883a 	add	r2,r2,r3
  808578:	10800404 	addi	r2,r2,16
  80857c:	10c00017 	ldw	r3,0(r2)
  808580:	e0bfff17 	ldw	r2,-4(fp)
  808584:	1885883a 	add	r2,r3,r2
}
  808588:	e037883a 	mov	sp,fp
  80858c:	df000017 	ldw	fp,0(sp)
  808590:	dec00104 	addi	sp,sp,4
  808594:	f800283a 	ret

00808598 <part_getSect>:
 * Description: This function calls ioman_getSector, but recalculates the sector
 * address to be partition relative.
 * Return value: Whatever getSector returns. (pointer or 0)
*/
euint8* part_getSect(Partition *part, euint32 address, euint8 mode)
{
  808598:	defffa04 	addi	sp,sp,-24
  80859c:	dfc00515 	stw	ra,20(sp)
  8085a0:	df000415 	stw	fp,16(sp)
  8085a4:	dc000315 	stw	r16,12(sp)
  8085a8:	df000304 	addi	fp,sp,12
  8085ac:	e13ffd15 	stw	r4,-12(fp)
  8085b0:	e17ffe15 	stw	r5,-8(fp)
  8085b4:	e1bfff05 	stb	r6,-4(fp)
	return(ioman_getSector(part->disc->ioman,part_getRealLBA(part,address),mode));
  8085b8:	e0bffd17 	ldw	r2,-12(fp)
  8085bc:	10800017 	ldw	r2,0(r2)
  8085c0:	14000017 	ldw	r16,0(r2)
  8085c4:	e13ffd17 	ldw	r4,-12(fp)
  8085c8:	e17ffe17 	ldw	r5,-8(fp)
  8085cc:	08085400 	call	808540 <part_getRealLBA>
  8085d0:	100b883a 	mov	r5,r2
  8085d4:	e1bfff03 	ldbu	r6,-4(fp)
  8085d8:	8009883a 	mov	r4,r16
  8085dc:	0806bb00 	call	806bb0 <ioman_getSector>
}
  8085e0:	e037883a 	mov	sp,fp
  8085e4:	dfc00217 	ldw	ra,8(sp)
  8085e8:	df000117 	ldw	fp,4(sp)
  8085ec:	dc000017 	ldw	r16,0(sp)
  8085f0:	dec00304 	addi	sp,sp,12
  8085f4:	f800283a 	ret

008085f8 <part_relSect>:
 * esint8 part_relSect(Partition *part, euint8* buf)
 * Description: This function calls ioman_releaseSector.
 * Return value: Whatever releaseSector returns.
*/
esint8 part_relSect(Partition *part, euint8* buf)
{
  8085f8:	defffc04 	addi	sp,sp,-16
  8085fc:	dfc00315 	stw	ra,12(sp)
  808600:	df000215 	stw	fp,8(sp)
  808604:	df000204 	addi	fp,sp,8
  808608:	e13ffe15 	stw	r4,-8(fp)
  80860c:	e17fff15 	stw	r5,-4(fp)
	return(ioman_releaseSector(part->disc->ioman,buf));
  808610:	e0bffe17 	ldw	r2,-8(fp)
  808614:	10800017 	ldw	r2,0(r2)
  808618:	11000017 	ldw	r4,0(r2)
  80861c:	e17fff17 	ldw	r5,-4(fp)
  808620:	0806ebc0 	call	806ebc <ioman_releaseSector>
  808624:	10803fcc 	andi	r2,r2,255
  808628:	1080201c 	xori	r2,r2,128
  80862c:	10bfe004 	addi	r2,r2,-128
}
  808630:	e037883a 	mov	sp,fp
  808634:	dfc00117 	ldw	ra,4(sp)
  808638:	df000017 	ldw	fp,0(sp)
  80863c:	dec00204 	addi	sp,sp,8
  808640:	f800283a 	ret

00808644 <part_flushPart>:

esint8 part_flushPart(Partition *part,euint32 addr_l, euint32 addr_h)
{
  808644:	defff904 	addi	sp,sp,-28
  808648:	dfc00615 	stw	ra,24(sp)
  80864c:	df000515 	stw	fp,20(sp)
  808650:	dc400415 	stw	r17,16(sp)
  808654:	dc000315 	stw	r16,12(sp)
  808658:	df000304 	addi	fp,sp,12
  80865c:	e13ffd15 	stw	r4,-12(fp)
  808660:	e17ffe15 	stw	r5,-8(fp)
  808664:	e1bfff15 	stw	r6,-4(fp)
	return( 
  808668:	e0bffd17 	ldw	r2,-12(fp)
  80866c:	10800017 	ldw	r2,0(r2)
  808670:	14000017 	ldw	r16,0(r2)
  808674:	e13ffd17 	ldw	r4,-12(fp)
  808678:	e17ffe17 	ldw	r5,-8(fp)
  80867c:	08085400 	call	808540 <part_getRealLBA>
  808680:	1023883a 	mov	r17,r2
  808684:	e13ffd17 	ldw	r4,-12(fp)
  808688:	e17fff17 	ldw	r5,-4(fp)
  80868c:	08085400 	call	808540 <part_getRealLBA>
  808690:	100d883a 	mov	r6,r2
  808694:	8009883a 	mov	r4,r16
  808698:	880b883a 	mov	r5,r17
  80869c:	08069880 	call	806988 <ioman_flushRange>
  8086a0:	10803fcc 	andi	r2,r2,255
  8086a4:	1080201c 	xori	r2,r2,128
  8086a8:	10bfe004 	addi	r2,r2,-128
		ioman_flushRange(part->disc->ioman,part_getRealLBA(part,addr_l),part_getRealLBA(part,addr_h)) 
	);	
}
  8086ac:	e037883a 	mov	sp,fp
  8086b0:	dfc00317 	ldw	ra,12(sp)
  8086b4:	df000217 	ldw	fp,8(sp)
  8086b8:	dc400117 	ldw	r17,4(sp)
  8086bc:	dc000017 	ldw	r16,0(sp)
  8086c0:	dec00404 	addi	sp,sp,16
  8086c4:	f800283a 	ret

008086c8 <part_directSectorRead>:

esint8 part_directSectorRead(Partition *part,euint32 address, euint8* buf)
{
  8086c8:	defffa04 	addi	sp,sp,-24
  8086cc:	dfc00515 	stw	ra,20(sp)
  8086d0:	df000415 	stw	fp,16(sp)
  8086d4:	dc000315 	stw	r16,12(sp)
  8086d8:	df000304 	addi	fp,sp,12
  8086dc:	e13ffd15 	stw	r4,-12(fp)
  8086e0:	e17ffe15 	stw	r5,-8(fp)
  8086e4:	e1bfff15 	stw	r6,-4(fp)
	return(
  8086e8:	e0bffd17 	ldw	r2,-12(fp)
  8086ec:	10800017 	ldw	r2,0(r2)
  8086f0:	14000017 	ldw	r16,0(r2)
  8086f4:	e13ffd17 	ldw	r4,-12(fp)
  8086f8:	e17ffe17 	ldw	r5,-8(fp)
  8086fc:	08085400 	call	808540 <part_getRealLBA>
  808700:	100b883a 	mov	r5,r2
  808704:	8009883a 	mov	r4,r16
  808708:	e1bfff17 	ldw	r6,-4(fp)
  80870c:	0806f9c0 	call	806f9c <ioman_directSectorRead>
  808710:	10803fcc 	andi	r2,r2,255
  808714:	1080201c 	xori	r2,r2,128
  808718:	10bfe004 	addi	r2,r2,-128
		ioman_directSectorRead(part->disc->ioman,part_getRealLBA(part,address),buf)
	);
}
  80871c:	e037883a 	mov	sp,fp
  808720:	dfc00217 	ldw	ra,8(sp)
  808724:	df000117 	ldw	fp,4(sp)
  808728:	dc000017 	ldw	r16,0(sp)
  80872c:	dec00304 	addi	sp,sp,12
  808730:	f800283a 	ret

00808734 <part_directSectorWrite>:

esint8 part_directSectorWrite(Partition *part,euint32 address, euint8* buf)
{
  808734:	defffa04 	addi	sp,sp,-24
  808738:	dfc00515 	stw	ra,20(sp)
  80873c:	df000415 	stw	fp,16(sp)
  808740:	dc000315 	stw	r16,12(sp)
  808744:	df000304 	addi	fp,sp,12
  808748:	e13ffd15 	stw	r4,-12(fp)
  80874c:	e17ffe15 	stw	r5,-8(fp)
  808750:	e1bfff15 	stw	r6,-4(fp)
	return(
  808754:	e0bffd17 	ldw	r2,-12(fp)
  808758:	10800017 	ldw	r2,0(r2)
  80875c:	14000017 	ldw	r16,0(r2)
  808760:	e13ffd17 	ldw	r4,-12(fp)
  808764:	e17ffe17 	ldw	r5,-8(fp)
  808768:	08085400 	call	808540 <part_getRealLBA>
  80876c:	100b883a 	mov	r5,r2
  808770:	8009883a 	mov	r4,r16
  808774:	e1bfff17 	ldw	r6,-4(fp)
  808778:	08070c40 	call	8070c4 <ioman_directSectorWrite>
  80877c:	10803fcc 	andi	r2,r2,255
  808780:	1080201c 	xori	r2,r2,128
  808784:	10bfe004 	addi	r2,r2,-128
		ioman_directSectorWrite(part->disc->ioman,part_getRealLBA(part,address),buf)
	);
}
  808788:	e037883a 	mov	sp,fp
  80878c:	dfc00217 	ldw	ra,8(sp)
  808790:	df000117 	ldw	fp,4(sp)
  808794:	dc000017 	ldw	r16,0(sp)
  808798:	dec00304 	addi	sp,sp,12
  80879c:	f800283a 	ret

008087a0 <strMatch>:
 * unsigned short strMatch(char* bufa, char*bufb, unsigned long n)
 * Description: Compares bufa and bufb for a length of n bytes.
 * Return value: Returns the number of character NOT matching.
*/
euint16 strMatch(eint8* bufa, eint8*bufb,euint32 n)
{
  8087a0:	defffa04 	addi	sp,sp,-24
  8087a4:	df000515 	stw	fp,20(sp)
  8087a8:	df000504 	addi	fp,sp,20
  8087ac:	e13ffd15 	stw	r4,-12(fp)
  8087b0:	e17ffe15 	stw	r5,-8(fp)
  8087b4:	e1bfff15 	stw	r6,-4(fp)
	euint32 c;
	euint16 res=0;
  8087b8:	e03ffb0d 	sth	zero,-20(fp)
	for(c=0;c<n;c++)if(bufa[c]!=bufb[c])res++;
  8087bc:	e03ffc15 	stw	zero,-16(fp)
  8087c0:	00001506 	br	808818 <strMatch+0x78>
  8087c4:	e0fffc17 	ldw	r3,-16(fp)
  8087c8:	e0bffd17 	ldw	r2,-12(fp)
  8087cc:	1885883a 	add	r2,r3,r2
  8087d0:	11000003 	ldbu	r4,0(r2)
  8087d4:	e0fffc17 	ldw	r3,-16(fp)
  8087d8:	e0bffe17 	ldw	r2,-8(fp)
  8087dc:	1885883a 	add	r2,r3,r2
  8087e0:	10800003 	ldbu	r2,0(r2)
  8087e4:	20c03fcc 	andi	r3,r4,255
  8087e8:	18c0201c 	xori	r3,r3,128
  8087ec:	18ffe004 	addi	r3,r3,-128
  8087f0:	10803fcc 	andi	r2,r2,255
  8087f4:	1080201c 	xori	r2,r2,128
  8087f8:	10bfe004 	addi	r2,r2,-128
  8087fc:	18800326 	beq	r3,r2,80880c <strMatch+0x6c>
  808800:	e0bffb0b 	ldhu	r2,-20(fp)
  808804:	10800044 	addi	r2,r2,1
  808808:	e0bffb0d 	sth	r2,-20(fp)
  80880c:	e0bffc17 	ldw	r2,-16(fp)
  808810:	10800044 	addi	r2,r2,1
  808814:	e0bffc15 	stw	r2,-16(fp)
  808818:	e0fffc17 	ldw	r3,-16(fp)
  80881c:	e0bfff17 	ldw	r2,-4(fp)
  808820:	18bfe836 	bltu	r3,r2,8087c4 <strMatch+0x24>
	return(res);
  808824:	e0bffb0b 	ldhu	r2,-20(fp)
}
  808828:	e037883a 	mov	sp,fp
  80882c:	df000017 	ldw	fp,0(sp)
  808830:	dec00104 	addi	sp,sp,4
  808834:	f800283a 	ret

00808838 <memCpy>:
 * void memCpy(void* psrc, void* pdest, unsigned long size)
 * Description: Copies the contents of psrc into pdest on a byte per byte basis.
 * The total number of bytes copies is size.
*/
void memCpy(void* psrc, void* pdest, euint32 size)
{
  808838:	defffc04 	addi	sp,sp,-16
  80883c:	df000315 	stw	fp,12(sp)
  808840:	df000304 	addi	fp,sp,12
  808844:	e13ffd15 	stw	r4,-12(fp)
  808848:	e17ffe15 	stw	r5,-8(fp)
  80884c:	e1bfff15 	stw	r6,-4(fp)
	while(size>0){
  808850:	00000d06 	br	808888 <memCpy+0x50>
		*((eint8*)pdest+size-1)=*((eint8*)psrc+size-1);
  808854:	e0fffe17 	ldw	r3,-8(fp)
  808858:	e0bfff17 	ldw	r2,-4(fp)
  80885c:	1885883a 	add	r2,r3,r2
  808860:	113fffc4 	addi	r4,r2,-1
  808864:	e0fffd17 	ldw	r3,-12(fp)
  808868:	e0bfff17 	ldw	r2,-4(fp)
  80886c:	1885883a 	add	r2,r3,r2
  808870:	10bfffc4 	addi	r2,r2,-1
  808874:	10800003 	ldbu	r2,0(r2)
  808878:	20800005 	stb	r2,0(r4)
		size--;
  80887c:	e0bfff17 	ldw	r2,-4(fp)
  808880:	10bfffc4 	addi	r2,r2,-1
  808884:	e0bfff15 	stw	r2,-4(fp)
 * Description: Copies the contents of psrc into pdest on a byte per byte basis.
 * The total number of bytes copies is size.
*/
void memCpy(void* psrc, void* pdest, euint32 size)
{
	while(size>0){
  808888:	e0bfff17 	ldw	r2,-4(fp)
  80888c:	1004c03a 	cmpne	r2,r2,zero
  808890:	103ff01e 	bne	r2,zero,808854 <memCpy+0x1c>
		*((eint8*)pdest+size-1)=*((eint8*)psrc+size-1);
		size--;
	}
}
  808894:	e037883a 	mov	sp,fp
  808898:	df000017 	ldw	fp,0(sp)
  80889c:	dec00104 	addi	sp,sp,4
  8088a0:	f800283a 	ret

008088a4 <memClr>:
/*****************************************************************************/ 

void memClr(void *pdest,euint32 size)
{
  8088a4:	defffd04 	addi	sp,sp,-12
  8088a8:	df000215 	stw	fp,8(sp)
  8088ac:	df000204 	addi	fp,sp,8
  8088b0:	e13ffe15 	stw	r4,-8(fp)
  8088b4:	e17fff15 	stw	r5,-4(fp)
	while(size>0){
  8088b8:	00000806 	br	8088dc <memClr+0x38>
		*(((eint8*)pdest)+size-1)=0x00;
  8088bc:	e0fffe17 	ldw	r3,-8(fp)
  8088c0:	e0bfff17 	ldw	r2,-4(fp)
  8088c4:	1885883a 	add	r2,r3,r2
  8088c8:	10bfffc4 	addi	r2,r2,-1
  8088cc:	10000005 	stb	zero,0(r2)
		size--;
  8088d0:	e0bfff17 	ldw	r2,-4(fp)
  8088d4:	10bfffc4 	addi	r2,r2,-1
  8088d8:	e0bfff15 	stw	r2,-4(fp)
}
/*****************************************************************************/ 

void memClr(void *pdest,euint32 size)
{
	while(size>0){
  8088dc:	e0bfff17 	ldw	r2,-4(fp)
  8088e0:	1004c03a 	cmpne	r2,r2,zero
  8088e4:	103ff51e 	bne	r2,zero,8088bc <memClr+0x18>
		*(((eint8*)pdest)+size-1)=0x00;
		size--;
	}
}
  8088e8:	e037883a 	mov	sp,fp
  8088ec:	df000017 	ldw	fp,0(sp)
  8088f0:	dec00104 	addi	sp,sp,4
  8088f4:	f800283a 	ret

008088f8 <memSet>:

void memSet(void *pdest,euint32 size,euint8 data)
{
  8088f8:	defffc04 	addi	sp,sp,-16
  8088fc:	df000315 	stw	fp,12(sp)
  808900:	df000304 	addi	fp,sp,12
  808904:	e13ffd15 	stw	r4,-12(fp)
  808908:	e17ffe15 	stw	r5,-8(fp)
  80890c:	e1bfff05 	stb	r6,-4(fp)
	while(size>0){
  808910:	00000906 	br	808938 <memSet+0x40>
		*(((eint8*)pdest)+size-1)=data;
  808914:	e0fffd17 	ldw	r3,-12(fp)
  808918:	e0bffe17 	ldw	r2,-8(fp)
  80891c:	1885883a 	add	r2,r3,r2
  808920:	10ffffc4 	addi	r3,r2,-1
  808924:	e0bfff03 	ldbu	r2,-4(fp)
  808928:	18800005 	stb	r2,0(r3)
		size--;
  80892c:	e0bffe17 	ldw	r2,-8(fp)
  808930:	10bfffc4 	addi	r2,r2,-1
  808934:	e0bffe15 	stw	r2,-8(fp)
	}
}

void memSet(void *pdest,euint32 size,euint8 data)
{
	while(size>0){
  808938:	e0bffe17 	ldw	r2,-8(fp)
  80893c:	1004c03a 	cmpne	r2,r2,zero
  808940:	103ff41e 	bne	r2,zero,808914 <memSet+0x1c>
		*(((eint8*)pdest)+size-1)=data;
		size--;
	}
}
  808944:	e037883a 	mov	sp,fp
  808948:	df000017 	ldw	fp,0(sp)
  80894c:	dec00104 	addi	sp,sp,4
  808950:	f800283a 	ret

00808954 <sd_Init>:
#include "sd.h"

/*****************************************************************************/

esint8 sd_Init(hwInterface *iface)
{
  808954:	defffb04 	addi	sp,sp,-20
  808958:	dfc00415 	stw	ra,16(sp)
  80895c:	df000315 	stw	fp,12(sp)
  808960:	df000304 	addi	fp,sp,12
  808964:	e13ffe15 	stw	r4,-8(fp)
	esint16 i;
	euint8 resp;
	
	/* Try to send reset command up to 100 times */
	i=100;
  808968:	00801904 	movi	r2,100
  80896c:	e0bffd8d 	sth	r2,-10(fp)
	do{
		sd_Command(iface,0, 0, 0);
  808970:	e13ffe17 	ldw	r4,-8(fp)
  808974:	000b883a 	mov	r5,zero
  808978:	000d883a 	mov	r6,zero
  80897c:	000f883a 	mov	r7,zero
  808980:	0808a940 	call	808a94 <sd_Command>
		resp=sd_Resp8b(iface);
  808984:	e13ffe17 	ldw	r4,-8(fp)
  808988:	0808b480 	call	808b48 <sd_Resp8b>
  80898c:	e0bffd05 	stb	r2,-12(fp)
	}
	while(resp!=1 && i--);
  808990:	e0bffd03 	ldbu	r2,-12(fp)
  808994:	10800060 	cmpeqi	r2,r2,1
  808998:	1000061e 	bne	r2,zero,8089b4 <sd_Init+0x60>
  80899c:	e0bffd8b 	ldhu	r2,-10(fp)
  8089a0:	10bfffc4 	addi	r2,r2,-1
  8089a4:	e0bffd8d 	sth	r2,-10(fp)
  8089a8:	e0bffd8f 	ldh	r2,-10(fp)
  8089ac:	10bfffd8 	cmpnei	r2,r2,-1
  8089b0:	103fef1e 	bne	r2,zero,808970 <sd_Init+0x1c>
	
	if(resp!=1){
  8089b4:	e0bffd03 	ldbu	r2,-12(fp)
  8089b8:	10800060 	cmpeqi	r2,r2,1
  8089bc:	10000c1e 	bne	r2,zero,8089f0 <sd_Init+0x9c>
		if(resp==0xff){
  8089c0:	e0bffd03 	ldbu	r2,-12(fp)
  8089c4:	10803fd8 	cmpnei	r2,r2,255
  8089c8:	1000031e 	bne	r2,zero,8089d8 <sd_Init+0x84>
			return(-1);
  8089cc:	00bfffc4 	movi	r2,-1
  8089d0:	e0bfff15 	stw	r2,-4(fp)
  8089d4:	00002906 	br	808a7c <sd_Init+0x128>
		}
		else{
			sd_Resp8bError(iface,resp);
  8089d8:	e17ffd03 	ldbu	r5,-12(fp)
  8089dc:	e13ffe17 	ldw	r4,-8(fp)
  8089e0:	0808c2c0 	call	808c2c <sd_Resp8bError>
			return(-2);
  8089e4:	00bfff84 	movi	r2,-2
  8089e8:	e0bfff15 	stw	r2,-4(fp)
  8089ec:	00002306 	br	808a7c <sd_Init+0x128>
		}
	}

	/* Wait till card is ready initialising (returns 0 on CMD1) */
	/* Try up to 32000 times. */
	i=32000;
  8089f0:	009f4004 	movi	r2,32000
  8089f4:	e0bffd8d 	sth	r2,-10(fp)
	do{
		sd_Command(iface,1, 0, 0);
  8089f8:	e13ffe17 	ldw	r4,-8(fp)
  8089fc:	01400044 	movi	r5,1
  808a00:	000d883a 	mov	r6,zero
  808a04:	000f883a 	mov	r7,zero
  808a08:	0808a940 	call	808a94 <sd_Command>
		
		resp=sd_Resp8b(iface);
  808a0c:	e13ffe17 	ldw	r4,-8(fp)
  808a10:	0808b480 	call	808b48 <sd_Resp8b>
  808a14:	e0bffd05 	stb	r2,-12(fp)
		if(resp!=0)
  808a18:	e0bffd03 	ldbu	r2,-12(fp)
  808a1c:	1005003a 	cmpeq	r2,r2,zero
  808a20:	1000031e 	bne	r2,zero,808a30 <sd_Init+0xdc>
			sd_Resp8bError(iface,resp);
  808a24:	e17ffd03 	ldbu	r5,-12(fp)
  808a28:	e13ffe17 	ldw	r4,-8(fp)
  808a2c:	0808c2c0 	call	808c2c <sd_Resp8bError>
	}
	while(resp==1 && i--);
  808a30:	e0bffd03 	ldbu	r2,-12(fp)
  808a34:	10800058 	cmpnei	r2,r2,1
  808a38:	1000061e 	bne	r2,zero,808a54 <sd_Init+0x100>
  808a3c:	e0bffd8b 	ldhu	r2,-10(fp)
  808a40:	10bfffc4 	addi	r2,r2,-1
  808a44:	e0bffd8d 	sth	r2,-10(fp)
  808a48:	e0bffd8f 	ldh	r2,-10(fp)
  808a4c:	10bfffd8 	cmpnei	r2,r2,-1
  808a50:	103fe91e 	bne	r2,zero,8089f8 <sd_Init+0xa4>
	
	if(resp!=0){
  808a54:	e0bffd03 	ldbu	r2,-12(fp)
  808a58:	1005003a 	cmpeq	r2,r2,zero
  808a5c:	1000061e 	bne	r2,zero,808a78 <sd_Init+0x124>
		sd_Resp8bError(iface,resp);
  808a60:	e17ffd03 	ldbu	r5,-12(fp)
  808a64:	e13ffe17 	ldw	r4,-8(fp)
  808a68:	0808c2c0 	call	808c2c <sd_Resp8bError>
		return(-3);
  808a6c:	00bfff44 	movi	r2,-3
  808a70:	e0bfff15 	stw	r2,-4(fp)
  808a74:	00000106 	br	808a7c <sd_Init+0x128>
	}
	
	return(0);
  808a78:	e03fff15 	stw	zero,-4(fp)
  808a7c:	e0bfff17 	ldw	r2,-4(fp)
}
  808a80:	e037883a 	mov	sp,fp
  808a84:	dfc00117 	ldw	ra,4(sp)
  808a88:	df000017 	ldw	fp,0(sp)
  808a8c:	dec00204 	addi	sp,sp,8
  808a90:	f800283a 	ret

00808a94 <sd_Command>:
/*****************************************************************************/

void sd_Command(hwInterface *iface,euint8 cmd, euint16 paramx, euint16 paramy)
{
  808a94:	defffa04 	addi	sp,sp,-24
  808a98:	dfc00515 	stw	ra,20(sp)
  808a9c:	df000415 	stw	fp,16(sp)
  808aa0:	df000404 	addi	fp,sp,16
  808aa4:	e13ffc15 	stw	r4,-16(fp)
  808aa8:	e17ffd05 	stb	r5,-12(fp)
  808aac:	e1bffe0d 	sth	r6,-8(fp)
  808ab0:	e1ffff0d 	sth	r7,-4(fp)
	if_spiSend(iface,0xff);
  808ab4:	e13ffc17 	ldw	r4,-16(fp)
  808ab8:	01403fc4 	movi	r5,255
  808abc:	0807f280 	call	807f28 <if_spiSend>

	if_spiSend(iface,0x40 | cmd);
  808ac0:	e0bffd03 	ldbu	r2,-12(fp)
  808ac4:	10801014 	ori	r2,r2,64
  808ac8:	11403fcc 	andi	r5,r2,255
  808acc:	e13ffc17 	ldw	r4,-16(fp)
  808ad0:	0807f280 	call	807f28 <if_spiSend>
	if_spiSend(iface,(euint8) (paramx >> 8)); /* MSB of parameter x */
  808ad4:	e0bffe0b 	ldhu	r2,-8(fp)
  808ad8:	1004d23a 	srli	r2,r2,8
  808adc:	11403fcc 	andi	r5,r2,255
  808ae0:	e13ffc17 	ldw	r4,-16(fp)
  808ae4:	0807f280 	call	807f28 <if_spiSend>
	if_spiSend(iface,(euint8) (paramx)); /* LSB of parameter x */
  808ae8:	e0bffe0b 	ldhu	r2,-8(fp)
  808aec:	11403fcc 	andi	r5,r2,255
  808af0:	e13ffc17 	ldw	r4,-16(fp)
  808af4:	0807f280 	call	807f28 <if_spiSend>
	if_spiSend(iface,(euint8) (paramy >> 8)); /* MSB of parameter y */
  808af8:	e0bfff0b 	ldhu	r2,-4(fp)
  808afc:	1004d23a 	srli	r2,r2,8
  808b00:	11403fcc 	andi	r5,r2,255
  808b04:	e13ffc17 	ldw	r4,-16(fp)
  808b08:	0807f280 	call	807f28 <if_spiSend>
	if_spiSend(iface,(euint8) (paramy)); /* LSB of parameter y */
  808b0c:	e0bfff0b 	ldhu	r2,-4(fp)
  808b10:	11403fcc 	andi	r5,r2,255
  808b14:	e13ffc17 	ldw	r4,-16(fp)
  808b18:	0807f280 	call	807f28 <if_spiSend>

	if_spiSend(iface,0x95); /* Checksum (should be only valid for first command (0) */
  808b1c:	e13ffc17 	ldw	r4,-16(fp)
  808b20:	01402544 	movi	r5,149
  808b24:	0807f280 	call	807f28 <if_spiSend>

	if_spiSend(iface,0xff); /* eat empty command - response */
  808b28:	e13ffc17 	ldw	r4,-16(fp)
  808b2c:	01403fc4 	movi	r5,255
  808b30:	0807f280 	call	807f28 <if_spiSend>
}
  808b34:	e037883a 	mov	sp,fp
  808b38:	dfc00117 	ldw	ra,4(sp)
  808b3c:	df000017 	ldw	fp,0(sp)
  808b40:	dec00204 	addi	sp,sp,8
  808b44:	f800283a 	ret

00808b48 <sd_Resp8b>:
/*****************************************************************************/

euint8 sd_Resp8b(hwInterface *iface)
{
  808b48:	defffb04 	addi	sp,sp,-20
  808b4c:	dfc00415 	stw	ra,16(sp)
  808b50:	df000315 	stw	fp,12(sp)
  808b54:	df000304 	addi	fp,sp,12
  808b58:	e13ffe15 	stw	r4,-8(fp)
	euint8 i;
	euint8 resp;
	
	/* Respone will come after 1 - 8 pings */
	for(i=0;i<8;i++){
  808b5c:	e03ffd45 	stb	zero,-11(fp)
  808b60:	00000d06 	br	808b98 <sd_Resp8b+0x50>
		resp = if_spiSend(iface,0xff);
  808b64:	e13ffe17 	ldw	r4,-8(fp)
  808b68:	01403fc4 	movi	r5,255
  808b6c:	0807f280 	call	807f28 <if_spiSend>
  808b70:	e0bffd05 	stb	r2,-12(fp)
		if(resp != 0xff)
  808b74:	e0bffd03 	ldbu	r2,-12(fp)
  808b78:	10803fe0 	cmpeqi	r2,r2,255
  808b7c:	1000031e 	bne	r2,zero,808b8c <sd_Resp8b+0x44>
			return(resp);
  808b80:	e0bffd03 	ldbu	r2,-12(fp)
  808b84:	e0bfff15 	stw	r2,-4(fp)
  808b88:	00000806 	br	808bac <sd_Resp8b+0x64>
{
	euint8 i;
	euint8 resp;
	
	/* Respone will come after 1 - 8 pings */
	for(i=0;i<8;i++){
  808b8c:	e0bffd43 	ldbu	r2,-11(fp)
  808b90:	10800044 	addi	r2,r2,1
  808b94:	e0bffd45 	stb	r2,-11(fp)
  808b98:	e0bffd43 	ldbu	r2,-11(fp)
  808b9c:	10800230 	cmpltui	r2,r2,8
  808ba0:	103ff01e 	bne	r2,zero,808b64 <sd_Resp8b+0x1c>
		resp = if_spiSend(iface,0xff);
		if(resp != 0xff)
			return(resp);
	}
		
	return(resp);
  808ba4:	e0bffd03 	ldbu	r2,-12(fp)
  808ba8:	e0bfff15 	stw	r2,-4(fp)
  808bac:	e0bfff17 	ldw	r2,-4(fp)
}
  808bb0:	e037883a 	mov	sp,fp
  808bb4:	dfc00117 	ldw	ra,4(sp)
  808bb8:	df000017 	ldw	fp,0(sp)
  808bbc:	dec00204 	addi	sp,sp,8
  808bc0:	f800283a 	ret

00808bc4 <sd_Resp16b>:
/*****************************************************************************/

euint16 sd_Resp16b(hwInterface *iface)
{
  808bc4:	defffc04 	addi	sp,sp,-16
  808bc8:	dfc00315 	stw	ra,12(sp)
  808bcc:	df000215 	stw	fp,8(sp)
  808bd0:	df000204 	addi	fp,sp,8
  808bd4:	e13fff15 	stw	r4,-4(fp)
	euint16 resp;
	
	resp = ( sd_Resp8b(iface) << 8 ) & 0xff00;
  808bd8:	e13fff17 	ldw	r4,-4(fp)
  808bdc:	0808b480 	call	808b48 <sd_Resp8b>
  808be0:	10803fcc 	andi	r2,r2,255
  808be4:	1004923a 	slli	r2,r2,8
  808be8:	1007883a 	mov	r3,r2
  808bec:	00bfc004 	movi	r2,-256
  808bf0:	1884703a 	and	r2,r3,r2
  808bf4:	e0bffe0d 	sth	r2,-8(fp)
	resp |= if_spiSend(iface,0xff);
  808bf8:	e13fff17 	ldw	r4,-4(fp)
  808bfc:	01403fc4 	movi	r5,255
  808c00:	0807f280 	call	807f28 <if_spiSend>
  808c04:	10c03fcc 	andi	r3,r2,255
  808c08:	e0bffe0b 	ldhu	r2,-8(fp)
  808c0c:	10c4b03a 	or	r2,r2,r3
  808c10:	e0bffe0d 	sth	r2,-8(fp)
	
	return(resp);
  808c14:	e0bffe0b 	ldhu	r2,-8(fp)
}
  808c18:	e037883a 	mov	sp,fp
  808c1c:	dfc00117 	ldw	ra,4(sp)
  808c20:	df000017 	ldw	fp,0(sp)
  808c24:	dec00204 	addi	sp,sp,8
  808c28:	f800283a 	ret

00808c2c <sd_Resp8bError>:
/*****************************************************************************/

void sd_Resp8bError(hwInterface *iface,euint8 value)
{
  808c2c:	defffb04 	addi	sp,sp,-20
  808c30:	dfc00415 	stw	ra,16(sp)
  808c34:	df000315 	stw	fp,12(sp)
  808c38:	df000304 	addi	fp,sp,12
  808c3c:	e13ffd15 	stw	r4,-12(fp)
  808c40:	e17ffe05 	stb	r5,-8(fp)
	switch(value)
  808c44:	e0bffe03 	ldbu	r2,-8(fp)
  808c48:	e0bfff15 	stw	r2,-4(fp)
  808c4c:	e0ffff17 	ldw	r3,-4(fp)
  808c50:	18801068 	cmpgeui	r2,r3,65
  808c54:	1000621e 	bne	r2,zero,808de0 <sd_Resp8bError+0x1b4>
  808c58:	e13fff17 	ldw	r4,-4(fp)
  808c5c:	e13fff17 	ldw	r4,-4(fp)
  808c60:	2105883a 	add	r2,r4,r4
  808c64:	1087883a 	add	r3,r2,r2
  808c68:	00802074 	movhi	r2,129
  808c6c:	10a31f04 	addi	r2,r2,-29572
  808c70:	1885883a 	add	r2,r3,r2
  808c74:	10800017 	ldw	r2,0(r2)
  808c78:	1000683a 	jmp	r2
  808c7c:	00808de0 	cmpeqi	r2,zero,567
  808c80:	00808df0 	cmpltui	r2,zero,567
  808c84:	00808dd0 	cmplti	r2,zero,567
  808c88:	00808de0 	cmpeqi	r2,zero,567
  808c8c:	00808dc0 	call	808dc <OSCtxSw_SWITCH_PC+0x8089c>
  808c90:	00808de0 	cmpeqi	r2,zero,567
  808c94:	00808de0 	cmpeqi	r2,zero,567
  808c98:	00808de0 	cmpeqi	r2,zero,567
  808c9c:	00808db0 	cmpltui	r2,zero,566
  808ca0:	00808de0 	cmpeqi	r2,zero,567
  808ca4:	00808de0 	cmpeqi	r2,zero,567
  808ca8:	00808de0 	cmpeqi	r2,zero,567
  808cac:	00808de0 	cmpeqi	r2,zero,567
  808cb0:	00808de0 	cmpeqi	r2,zero,567
  808cb4:	00808de0 	cmpeqi	r2,zero,567
  808cb8:	00808de0 	cmpeqi	r2,zero,567
  808cbc:	00808da0 	cmpeqi	r2,zero,566
  808cc0:	00808de0 	cmpeqi	r2,zero,567
  808cc4:	00808de0 	cmpeqi	r2,zero,567
  808cc8:	00808de0 	cmpeqi	r2,zero,567
  808ccc:	00808de0 	cmpeqi	r2,zero,567
  808cd0:	00808de0 	cmpeqi	r2,zero,567
  808cd4:	00808de0 	cmpeqi	r2,zero,567
  808cd8:	00808de0 	cmpeqi	r2,zero,567
  808cdc:	00808de0 	cmpeqi	r2,zero,567
  808ce0:	00808de0 	cmpeqi	r2,zero,567
  808ce4:	00808de0 	cmpeqi	r2,zero,567
  808ce8:	00808de0 	cmpeqi	r2,zero,567
  808cec:	00808de0 	cmpeqi	r2,zero,567
  808cf0:	00808de0 	cmpeqi	r2,zero,567
  808cf4:	00808de0 	cmpeqi	r2,zero,567
  808cf8:	00808de0 	cmpeqi	r2,zero,567
  808cfc:	00808d90 	cmplti	r2,zero,566
  808d00:	00808de0 	cmpeqi	r2,zero,567
  808d04:	00808de0 	cmpeqi	r2,zero,567
  808d08:	00808de0 	cmpeqi	r2,zero,567
  808d0c:	00808de0 	cmpeqi	r2,zero,567
  808d10:	00808de0 	cmpeqi	r2,zero,567
  808d14:	00808de0 	cmpeqi	r2,zero,567
  808d18:	00808de0 	cmpeqi	r2,zero,567
  808d1c:	00808de0 	cmpeqi	r2,zero,567
  808d20:	00808de0 	cmpeqi	r2,zero,567
  808d24:	00808de0 	cmpeqi	r2,zero,567
  808d28:	00808de0 	cmpeqi	r2,zero,567
  808d2c:	00808de0 	cmpeqi	r2,zero,567
  808d30:	00808de0 	cmpeqi	r2,zero,567
  808d34:	00808de0 	cmpeqi	r2,zero,567
  808d38:	00808de0 	cmpeqi	r2,zero,567
  808d3c:	00808de0 	cmpeqi	r2,zero,567
  808d40:	00808de0 	cmpeqi	r2,zero,567
  808d44:	00808de0 	cmpeqi	r2,zero,567
  808d48:	00808de0 	cmpeqi	r2,zero,567
  808d4c:	00808de0 	cmpeqi	r2,zero,567
  808d50:	00808de0 	cmpeqi	r2,zero,567
  808d54:	00808de0 	cmpeqi	r2,zero,567
  808d58:	00808de0 	cmpeqi	r2,zero,567
  808d5c:	00808de0 	cmpeqi	r2,zero,567
  808d60:	00808de0 	cmpeqi	r2,zero,567
  808d64:	00808de0 	cmpeqi	r2,zero,567
  808d68:	00808de0 	cmpeqi	r2,zero,567
  808d6c:	00808de0 	cmpeqi	r2,zero,567
  808d70:	00808de0 	cmpeqi	r2,zero,567
  808d74:	00808de0 	cmpeqi	r2,zero,567
  808d78:	00808de0 	cmpeqi	r2,zero,567
  808d7c:	00808d80 	call	808d8 <OSCtxSw_SWITCH_PC+0x80898>
	{
		case 0x40:
			DBG((TXT("Argument out of bounds.\n")));
  808d80:	010020b4 	movhi	r4,130
  808d84:	210af504 	addi	r4,r4,11220
  808d88:	080df580 	call	80df58 <puts>
			break;
  808d8c:	00001806 	br	808df0 <sd_Resp8bError+0x1c4>
		case 0x20:
			DBG((TXT("Address out of bounds.\n")));
  808d90:	010020b4 	movhi	r4,130
  808d94:	210afb04 	addi	r4,r4,11244
  808d98:	080df580 	call	80df58 <puts>
			break;
  808d9c:	00001406 	br	808df0 <sd_Resp8bError+0x1c4>
		case 0x10:
			DBG((TXT("Error during erase sequence.\n")));
  808da0:	010020b4 	movhi	r4,130
  808da4:	210b0104 	addi	r4,r4,11268
  808da8:	080df580 	call	80df58 <puts>
			break;
  808dac:	00001006 	br	808df0 <sd_Resp8bError+0x1c4>
		case 0x08:
			DBG((TXT("CRC failed.\n")));
  808db0:	010020b4 	movhi	r4,130
  808db4:	210b0904 	addi	r4,r4,11300
  808db8:	080df580 	call	80df58 <puts>
			break;
  808dbc:	00000c06 	br	808df0 <sd_Resp8bError+0x1c4>
		case 0x04:
			DBG((TXT("Illegal command.\n")));
  808dc0:	010020b4 	movhi	r4,130
  808dc4:	210b0c04 	addi	r4,r4,11312
  808dc8:	080df580 	call	80df58 <puts>
			break;
  808dcc:	00000806 	br	808df0 <sd_Resp8bError+0x1c4>
		case 0x02:
			DBG((TXT("Erase reset (see SanDisk docs p5-13).\n")));
  808dd0:	010020b4 	movhi	r4,130
  808dd4:	210b1104 	addi	r4,r4,11332
  808dd8:	080df580 	call	80df58 <puts>
			break;
  808ddc:	00000406 	br	808df0 <sd_Resp8bError+0x1c4>
		case 0x01:
			//DBG((TXT("Card is initialising.\n")));
			break;
		default:
			DBG((TXT("Unknown error 0x%x (see SanDisk docs p5-13).\n"),value));
  808de0:	e17ffe03 	ldbu	r5,-8(fp)
  808de4:	010020b4 	movhi	r4,130
  808de8:	210b1b04 	addi	r4,r4,11372
  808dec:	080de1c0 	call	80de1c <printf>
			break;
	}
}
  808df0:	e037883a 	mov	sp,fp
  808df4:	dfc00117 	ldw	ra,4(sp)
  808df8:	df000017 	ldw	fp,0(sp)
  808dfc:	dec00204 	addi	sp,sp,8
  808e00:	f800283a 	ret

00808e04 <sd_State>:
/*****************************************************************************/

esint8 sd_State(hwInterface *iface)
{
  808e04:	defffa04 	addi	sp,sp,-24
  808e08:	dfc00515 	stw	ra,20(sp)
  808e0c:	df000415 	stw	fp,16(sp)
  808e10:	df000404 	addi	fp,sp,16
  808e14:	e13ffd15 	stw	r4,-12(fp)
	eint16 value;
	
	sd_Command(iface,13, 0, 0);
  808e18:	e13ffd17 	ldw	r4,-12(fp)
  808e1c:	01400344 	movi	r5,13
  808e20:	000d883a 	mov	r6,zero
  808e24:	000f883a 	mov	r7,zero
  808e28:	0808a940 	call	808a94 <sd_Command>
	value=sd_Resp16b(iface);
  808e2c:	e13ffd17 	ldw	r4,-12(fp)
  808e30:	0808bc40 	call	808bc4 <sd_Resp16b>
  808e34:	e0bffc0d 	sth	r2,-16(fp)

	switch(value)
  808e38:	e0bffc0f 	ldh	r2,-16(fp)
  808e3c:	e0bfff15 	stw	r2,-4(fp)
  808e40:	e0ffff17 	ldw	r3,-4(fp)
  808e44:	18800220 	cmpeqi	r2,r3,8
  808e48:	1000341e 	bne	r2,zero,808f1c <sd_State+0x118>
  808e4c:	e0ffff17 	ldw	r3,-4(fp)
  808e50:	18800248 	cmpgei	r2,r3,9
  808e54:	1000111e 	bne	r2,zero,808e9c <sd_State+0x98>
  808e58:	e0ffff17 	ldw	r3,-4(fp)
  808e5c:	18800060 	cmpeqi	r2,r3,1
  808e60:	1000221e 	bne	r2,zero,808eec <sd_State+0xe8>
  808e64:	e0ffff17 	ldw	r3,-4(fp)
  808e68:	18800088 	cmpgei	r2,r3,2
  808e6c:	1000041e 	bne	r2,zero,808e80 <sd_State+0x7c>
  808e70:	e0ffff17 	ldw	r3,-4(fp)
  808e74:	1805003a 	cmpeq	r2,r3,zero
  808e78:	1000191e 	bne	r2,zero,808ee0 <sd_State+0xdc>
  808e7c:	00003b06 	br	808f6c <sd_State+0x168>
  808e80:	e0ffff17 	ldw	r3,-4(fp)
  808e84:	188000a0 	cmpeqi	r2,r3,2
  808e88:	10001c1e 	bne	r2,zero,808efc <sd_State+0xf8>
  808e8c:	e0ffff17 	ldw	r3,-4(fp)
  808e90:	18800120 	cmpeqi	r2,r3,4
  808e94:	10001d1e 	bne	r2,zero,808f0c <sd_State+0x108>
  808e98:	00003406 	br	808f6c <sd_State+0x168>
  808e9c:	e0ffff17 	ldw	r3,-4(fp)
  808ea0:	18800820 	cmpeqi	r2,r3,32
  808ea4:	1000251e 	bne	r2,zero,808f3c <sd_State+0x138>
  808ea8:	e0ffff17 	ldw	r3,-4(fp)
  808eac:	18800848 	cmpgei	r2,r3,33
  808eb0:	1000041e 	bne	r2,zero,808ec4 <sd_State+0xc0>
  808eb4:	e0ffff17 	ldw	r3,-4(fp)
  808eb8:	18800420 	cmpeqi	r2,r3,16
  808ebc:	10001b1e 	bne	r2,zero,808f2c <sd_State+0x128>
  808ec0:	00002a06 	br	808f6c <sd_State+0x168>
  808ec4:	e0ffff17 	ldw	r3,-4(fp)
  808ec8:	18801020 	cmpeqi	r2,r3,64
  808ecc:	10001f1e 	bne	r2,zero,808f4c <sd_State+0x148>
  808ed0:	e0ffff17 	ldw	r3,-4(fp)
  808ed4:	18802020 	cmpeqi	r2,r3,128
  808ed8:	1000201e 	bne	r2,zero,808f5c <sd_State+0x158>
  808edc:	00002306 	br	808f6c <sd_State+0x168>
	{
		case 0x000:
			return(1);
  808ee0:	00800044 	movi	r2,1
  808ee4:	e0bffe15 	stw	r2,-8(fp)
  808ee8:	00002f06 	br	808fa8 <sd_State+0x1a4>
			break;
		case 0x0001:
			DBG((TXT("Card is Locked.\n")));
  808eec:	010020b4 	movhi	r4,130
  808ef0:	210b2704 	addi	r4,r4,11420
  808ef4:	080df580 	call	80df58 <puts>
			break;
  808ef8:	00002906 	br	808fa0 <sd_State+0x19c>
		case 0x0002:
			DBG((TXT("WP Erase Skip, Lock/Unlock Cmd Failed.\n")));
  808efc:	010020b4 	movhi	r4,130
  808f00:	210b2b04 	addi	r4,r4,11436
  808f04:	080df580 	call	80df58 <puts>
			break;
  808f08:	00002506 	br	808fa0 <sd_State+0x19c>
		case 0x0004:
			DBG((TXT("General / Unknown error -- card broken?.\n")));
  808f0c:	010020b4 	movhi	r4,130
  808f10:	210b3504 	addi	r4,r4,11476
  808f14:	080df580 	call	80df58 <puts>
			break;
  808f18:	00002106 	br	808fa0 <sd_State+0x19c>
		case 0x0008:
			DBG((TXT("Internal card controller error.\n")));
  808f1c:	010020b4 	movhi	r4,130
  808f20:	210b4004 	addi	r4,r4,11520
  808f24:	080df580 	call	80df58 <puts>
			break;
  808f28:	00001d06 	br	808fa0 <sd_State+0x19c>
		case 0x0010:
			DBG((TXT("Card internal ECC was applied, but failed to correct the data.\n")));
  808f2c:	010020b4 	movhi	r4,130
  808f30:	210b4804 	addi	r4,r4,11552
  808f34:	080df580 	call	80df58 <puts>
			break;
  808f38:	00001906 	br	808fa0 <sd_State+0x19c>
		case 0x0020:
			DBG((TXT("Write protect violation.\n")));
  808f3c:	010020b4 	movhi	r4,130
  808f40:	210b5804 	addi	r4,r4,11616
  808f44:	080df580 	call	80df58 <puts>
			break;
  808f48:	00001506 	br	808fa0 <sd_State+0x19c>
		case 0x0040:
			DBG((TXT("An invalid selection, sectors for erase.\n")));
  808f4c:	010020b4 	movhi	r4,130
  808f50:	210b5f04 	addi	r4,r4,11644
  808f54:	080df580 	call	80df58 <puts>
			break;
  808f58:	00001106 	br	808fa0 <sd_State+0x19c>
		case 0x0080:
			DBG((TXT("Out of Range, CSD_Overwrite.\n")));
  808f5c:	010020b4 	movhi	r4,130
  808f60:	210b6a04 	addi	r4,r4,11688
  808f64:	080df580 	call	80df58 <puts>
			break;
  808f68:	00000d06 	br	808fa0 <sd_State+0x19c>
		default:
			if(value>0x00FF)
  808f6c:	e0bffc0f 	ldh	r2,-16(fp)
  808f70:	10804010 	cmplti	r2,r2,256
  808f74:	1000061e 	bne	r2,zero,808f90 <sd_State+0x18c>
				sd_Resp8bError(iface,(euint8) (value>>8));
  808f78:	e0bffc0f 	ldh	r2,-16(fp)
  808f7c:	1005d23a 	srai	r2,r2,8
  808f80:	11403fcc 	andi	r5,r2,255
  808f84:	e13ffd17 	ldw	r4,-12(fp)
  808f88:	0808c2c0 	call	808c2c <sd_Resp8bError>
  808f8c:	00000406 	br	808fa0 <sd_State+0x19c>
			else
				DBG((TXT("Unknown error: 0x%x (see SanDisk docs p5-14).\n"),value));
  808f90:	e17ffc0f 	ldh	r5,-16(fp)
  808f94:	010020b4 	movhi	r4,130
  808f98:	210b7204 	addi	r4,r4,11720
  808f9c:	080de1c0 	call	80de1c <printf>
			break;
	}
	return(-1);
  808fa0:	00ffffc4 	movi	r3,-1
  808fa4:	e0fffe15 	stw	r3,-8(fp)
  808fa8:	e0bffe17 	ldw	r2,-8(fp)
}
  808fac:	e037883a 	mov	sp,fp
  808fb0:	dfc00117 	ldw	ra,4(sp)
  808fb4:	df000017 	ldw	fp,0(sp)
  808fb8:	dec00204 	addi	sp,sp,8
  808fbc:	f800283a 	ret

00808fc0 <sd_writeSector>:
 *      CHKS (2B)
 * BUSY...
 */

esint8 sd_writeSector(hwInterface *iface,euint32 address, euint8* buf)
{
  808fc0:	defff904 	addi	sp,sp,-28
  808fc4:	dfc00615 	stw	ra,24(sp)
  808fc8:	df000515 	stw	fp,20(sp)
  808fcc:	df000504 	addi	fp,sp,20
  808fd0:	e13ffd15 	stw	r4,-12(fp)
  808fd4:	e17ffe15 	stw	r5,-8(fp)
  808fd8:	e1bfff15 	stw	r6,-4(fp)
	euint32 place;
	euint16 i;
	euint16 t=0;
  808fdc:	e03ffb0d 	sth	zero,-20(fp)
	
	/*DBG((TXT("Trying to write %u to sector %u.\n"),(void *)&buf,address));*/
	place=512*address;
  808fe0:	e0bffe17 	ldw	r2,-8(fp)
  808fe4:	1004927a 	slli	r2,r2,9
  808fe8:	e0bffc15 	stw	r2,-16(fp)
	sd_Command(iface,CMDWRITE, (euint16) (place >> 16), (euint16) place);
  808fec:	e0bffc17 	ldw	r2,-16(fp)
  808ff0:	1004d43a 	srli	r2,r2,16
  808ff4:	11bfffcc 	andi	r6,r2,65535
  808ff8:	e0bffc17 	ldw	r2,-16(fp)
  808ffc:	11ffffcc 	andi	r7,r2,65535
  809000:	e13ffd17 	ldw	r4,-12(fp)
  809004:	01400604 	movi	r5,24
  809008:	0808a940 	call	808a94 <sd_Command>

	sd_Resp8b(iface); /* Card response */
  80900c:	e13ffd17 	ldw	r4,-12(fp)
  809010:	0808b480 	call	808b48 <sd_Resp8b>

	if_spiSend(iface,0xfe); /* Start block */
  809014:	e13ffd17 	ldw	r4,-12(fp)
  809018:	01403f84 	movi	r5,254
  80901c:	0807f280 	call	807f28 <if_spiSend>
    #if 0
	for(i=0;i<512;i++) 
		if_spiSend(iface,buf[i]); /* Send data */
    #else
        if_spi_sendbuf(iface, buf, 512);
  809020:	e13ffd17 	ldw	r4,-12(fp)
  809024:	e17fff17 	ldw	r5,-4(fp)
  809028:	01808004 	movi	r6,512
  80902c:	08080480 	call	808048 <if_spi_sendbuf>
    #endif
	if_spiSend(iface,0xff); /* Checksum part 1 */
  809030:	e13ffd17 	ldw	r4,-12(fp)
  809034:	01403fc4 	movi	r5,255
  809038:	0807f280 	call	807f28 <if_spiSend>
	if_spiSend(iface,0xff); /* Checksum part 2 */
  80903c:	e13ffd17 	ldw	r4,-12(fp)
  809040:	01403fc4 	movi	r5,255
  809044:	0807f280 	call	807f28 <if_spiSend>

	if_spiSend(iface,0xff);
  809048:	e13ffd17 	ldw	r4,-12(fp)
  80904c:	01403fc4 	movi	r5,255
  809050:	0807f280 	call	807f28 <if_spiSend>

	while(if_spiSend(iface,0xff)!=0xff){
  809054:	00000306 	br	809064 <sd_writeSector+0xa4>
		t++;
  809058:	e0bffb0b 	ldhu	r2,-20(fp)
  80905c:	10800044 	addi	r2,r2,1
  809060:	e0bffb0d 	sth	r2,-20(fp)
	if_spiSend(iface,0xff); /* Checksum part 1 */
	if_spiSend(iface,0xff); /* Checksum part 2 */

	if_spiSend(iface,0xff);

	while(if_spiSend(iface,0xff)!=0xff){
  809064:	e13ffd17 	ldw	r4,-12(fp)
  809068:	01403fc4 	movi	r5,255
  80906c:	0807f280 	call	807f28 <if_spiSend>
  809070:	10803fcc 	andi	r2,r2,255
  809074:	10803fd8 	cmpnei	r2,r2,255
  809078:	103ff71e 	bne	r2,zero,809058 <sd_writeSector+0x98>
		t++;
		/* Removed NOP */
	}
	/*DBG((TXT("Nopp'ed %u times.\n"),t));*/

	return(0);
  80907c:	0005883a 	mov	r2,zero
}
  809080:	e037883a 	mov	sp,fp
  809084:	dfc00117 	ldw	ra,4(sp)
  809088:	df000017 	ldw	fp,0(sp)
  80908c:	dec00204 	addi	sp,sp,8
  809090:	f800283a 	ret

00809094 <sd_readSector>:
 * 		DATA
 * 		CHKS (2B)
 */

esint8 sd_readSector(hwInterface *iface,euint32 address, euint8* buf, euint16 len)
{
  809094:	defff504 	addi	sp,sp,-44
  809098:	dfc00a15 	stw	ra,40(sp)
  80909c:	df000915 	stw	fp,36(sp)
  8090a0:	df000904 	addi	fp,sp,36
  8090a4:	e13ffb15 	stw	r4,-20(fp)
  8090a8:	e17ffc15 	stw	r5,-16(fp)
  8090ac:	e1bffd15 	stw	r6,-12(fp)
  8090b0:	e1fffe0d 	sth	r7,-8(fp)
	euint8 cardresp;
	euint8 firstblock;
	euint8 c;
	euint16 fb_timeout=0xffff;
  8090b4:	00bfffc4 	movi	r2,-1
  8090b8:	e0bff90d 	sth	r2,-28(fp)
	euint32 i;
	euint32 place;

	/*DBG((TXT("sd_readSector::Trying to read sector %u and store it at %p.\n"),address,&buf[0]));*/
	place=address<<9;
  8090bc:	e0bffc17 	ldw	r2,-16(fp)
  8090c0:	1004927a 	slli	r2,r2,9
  8090c4:	e0bff715 	stw	r2,-36(fp)
	sd_Command(iface,CMDREAD, (euint16) (place >> 16), (euint16) place);
  8090c8:	e0bff717 	ldw	r2,-36(fp)
  8090cc:	1004d43a 	srli	r2,r2,16
  8090d0:	11bfffcc 	andi	r6,r2,65535
  8090d4:	e0bff717 	ldw	r2,-36(fp)
  8090d8:	11ffffcc 	andi	r7,r2,65535
  8090dc:	e13ffb17 	ldw	r4,-20(fp)
  8090e0:	01400444 	movi	r5,17
  8090e4:	0808a940 	call	808a94 <sd_Command>
	
	cardresp=sd_Resp8b(iface); /* Card response */ 
  8090e8:	e13ffb17 	ldw	r4,-20(fp)
  8090ec:	0808b480 	call	808b48 <sd_Resp8b>
  8090f0:	e0bffa05 	stb	r2,-24(fp)

	/* Wait for startblock */
	do
		firstblock=sd_Resp8b(iface); 
  8090f4:	e13ffb17 	ldw	r4,-20(fp)
  8090f8:	0808b480 	call	808b48 <sd_Resp8b>
  8090fc:	e0bff9c5 	stb	r2,-25(fp)
	while(firstblock==0xff && fb_timeout--);
  809100:	e0bff9c3 	ldbu	r2,-25(fp)
  809104:	10803fd8 	cmpnei	r2,r2,255
  809108:	1000061e 	bne	r2,zero,809124 <sd_readSector+0x90>
  80910c:	e0bff90b 	ldhu	r2,-28(fp)
  809110:	10bfffc4 	addi	r2,r2,-1
  809114:	e0bff90d 	sth	r2,-28(fp)
  809118:	e0fff90b 	ldhu	r3,-28(fp)
  80911c:	00bfffd4 	movui	r2,65535
  809120:	18bff41e 	bne	r3,r2,8090f4 <sd_readSector+0x60>

	if(cardresp!=0x00 || firstblock!=0xfe){
  809124:	e0bffa03 	ldbu	r2,-24(fp)
  809128:	1004c03a 	cmpne	r2,r2,zero
  80912c:	1000031e 	bne	r2,zero,80913c <sd_readSector+0xa8>
  809130:	e0bff9c3 	ldbu	r2,-25(fp)
  809134:	10803fa0 	cmpeqi	r2,r2,254
  809138:	1000061e 	bne	r2,zero,809154 <sd_readSector+0xc0>
		sd_Resp8bError(iface,firstblock);
  80913c:	e17ff9c3 	ldbu	r5,-25(fp)
  809140:	e13ffb17 	ldw	r4,-20(fp)
  809144:	0808c2c0 	call	808c2c <sd_Resp8bError>
		return(-1);
  809148:	00bfffc4 	movi	r2,-1
  80914c:	e0bfff15 	stw	r2,-4(fp)
  809150:	00000b06 	br	809180 <sd_readSector+0xec>
		c = if_spiSend(iface,0xff);
		if(i<len)
			buf[i] = c;
	}
#else
   if_spi_readbuf(iface,buf,len); 
  809154:	e1bffe0b 	ldhu	r6,-8(fp)
  809158:	e13ffb17 	ldw	r4,-20(fp)
  80915c:	e17ffd17 	ldw	r5,-12(fp)
  809160:	08081180 	call	808118 <if_spi_readbuf>
#endif
	/* Checksum (2 byte) - ignore for now */
	if_spiSend(iface,0xff);
  809164:	e13ffb17 	ldw	r4,-20(fp)
  809168:	01403fc4 	movi	r5,255
  80916c:	0807f280 	call	807f28 <if_spiSend>
	if_spiSend(iface,0xff);
  809170:	e13ffb17 	ldw	r4,-20(fp)
  809174:	01403fc4 	movi	r5,255
  809178:	0807f280 	call	807f28 <if_spiSend>
	return(0);
  80917c:	e03fff15 	stw	zero,-4(fp)
  809180:	e0bfff17 	ldw	r2,-4(fp)
}
  809184:	e037883a 	mov	sp,fp
  809188:	dfc00117 	ldw	ra,4(sp)
  80918c:	df000017 	ldw	fp,0(sp)
  809190:	dec00204 	addi	sp,sp,8
  809194:	f800283a 	ret

00809198 <sd_getDriveSize>:
/* ****************************************************************************
 calculates size of card from CSD 
 (extension by Martin Thomas, inspired by code from Holger Klabunde)
 */
esint8 sd_getDriveSize(hwInterface *iface, euint32* drive_size )
{
  809198:	defff404 	addi	sp,sp,-48
  80919c:	dfc00b15 	stw	ra,44(sp)
  8091a0:	df000a15 	stw	fp,40(sp)
  8091a4:	dc000915 	stw	r16,36(sp)
  8091a8:	df000904 	addi	fp,sp,36
  8091ac:	e13ffe15 	stw	r4,-8(fp)
  8091b0:	e17fff15 	stw	r5,-4(fp)
	euint8 cardresp, i, by;
	euint8 iob[16];
	euint16 c_size, c_size_mult, read_bl_len;
	
	sd_Command(iface, CMDREADCSD, 0, 0);
  8091b4:	e13ffe17 	ldw	r4,-8(fp)
  8091b8:	01400244 	movi	r5,9
  8091bc:	000d883a 	mov	r6,zero
  8091c0:	000f883a 	mov	r7,zero
  8091c4:	0808a940 	call	808a94 <sd_Command>
	
	do {
		cardresp = sd_Resp8b(iface);
  8091c8:	e13ffe17 	ldw	r4,-8(fp)
  8091cc:	0808b480 	call	808b48 <sd_Resp8b>
  8091d0:	e0bff905 	stb	r2,-28(fp)
	} while ( cardresp != 0xFE );
  8091d4:	e0bff903 	ldbu	r2,-28(fp)
  8091d8:	10803f98 	cmpnei	r2,r2,254
  8091dc:	103ffa1e 	bne	r2,zero,8091c8 <sd_getDriveSize+0x30>

	DBG((TXT("CSD:")));
  8091e0:	010020b4 	movhi	r4,130
  8091e4:	210b7e04 	addi	r4,r4,11768
  8091e8:	080de1c0 	call	80de1c <printf>
	for( i=0; i<16; i++) {
  8091ec:	e03ff8c5 	stb	zero,-29(fp)
  8091f0:	00001206 	br	80923c <sd_getDriveSize+0xa4>
		iob[i] = sd_Resp8b(iface);
  8091f4:	e43ff8c3 	ldbu	r16,-29(fp)
  8091f8:	e13ffe17 	ldw	r4,-8(fp)
  8091fc:	0808b480 	call	808b48 <sd_Resp8b>
  809200:	1007883a 	mov	r3,r2
  809204:	e0bff944 	addi	r2,fp,-27
  809208:	1405883a 	add	r2,r2,r16
  80920c:	10c00005 	stb	r3,0(r2)
		DBG((TXT(" %02x"), iob[i]));
  809210:	e0fff8c3 	ldbu	r3,-29(fp)
  809214:	e0bff944 	addi	r2,fp,-27
  809218:	10c5883a 	add	r2,r2,r3
  80921c:	10800003 	ldbu	r2,0(r2)
  809220:	11403fcc 	andi	r5,r2,255
  809224:	010020b4 	movhi	r4,130
  809228:	210b8004 	addi	r4,r4,11776
  80922c:	080de1c0 	call	80de1c <printf>
	do {
		cardresp = sd_Resp8b(iface);
	} while ( cardresp != 0xFE );

	DBG((TXT("CSD:")));
	for( i=0; i<16; i++) {
  809230:	e0bff8c3 	ldbu	r2,-29(fp)
  809234:	10800044 	addi	r2,r2,1
  809238:	e0bff8c5 	stb	r2,-29(fp)
  80923c:	e0bff8c3 	ldbu	r2,-29(fp)
  809240:	10800430 	cmpltui	r2,r2,16
  809244:	103feb1e 	bne	r2,zero,8091f4 <sd_getDriveSize+0x5c>
		iob[i] = sd_Resp8b(iface);
		DBG((TXT(" %02x"), iob[i]));
	}
	DBG((TXT("\n")));
  809248:	01000284 	movi	r4,10
  80924c:	080de940 	call	80de94 <putchar>

	if_spiSend(iface,0xff);
  809250:	e13ffe17 	ldw	r4,-8(fp)
  809254:	01403fc4 	movi	r5,255
  809258:	0807f280 	call	807f28 <if_spiSend>
	if_spiSend(iface,0xff);
  80925c:	e13ffe17 	ldw	r4,-8(fp)
  809260:	01403fc4 	movi	r5,255
  809264:	0807f280 	call	807f28 <if_spiSend>
	
	c_size = iob[6] & 0x03; // bits 1..0
  809268:	e0bffac3 	ldbu	r2,-21(fp)
  80926c:	10803fcc 	andi	r2,r2,255
  809270:	108000cc 	andi	r2,r2,3
  809274:	e0bff80d 	sth	r2,-32(fp)
	c_size <<= 10;
  809278:	e0bff80b 	ldhu	r2,-32(fp)
  80927c:	100492ba 	slli	r2,r2,10
  809280:	e0bff80d 	sth	r2,-32(fp)
	c_size += (euint16)iob[7]<<2;
  809284:	e0bffb03 	ldbu	r2,-20(fp)
  809288:	10803fcc 	andi	r2,r2,255
  80928c:	1085883a 	add	r2,r2,r2
  809290:	1085883a 	add	r2,r2,r2
  809294:	1007883a 	mov	r3,r2
  809298:	e0bff80b 	ldhu	r2,-32(fp)
  80929c:	10c5883a 	add	r2,r2,r3
  8092a0:	e0bff80d 	sth	r2,-32(fp)
	c_size += iob[8]>>6;
  8092a4:	e0bffb43 	ldbu	r2,-19(fp)
  8092a8:	10803fcc 	andi	r2,r2,255
  8092ac:	1004d1ba 	srli	r2,r2,6
  8092b0:	10c03fcc 	andi	r3,r2,255
  8092b4:	e0bff80b 	ldhu	r2,-32(fp)
  8092b8:	10c5883a 	add	r2,r2,r3
  8092bc:	e0bff80d 	sth	r2,-32(fp)

	by= iob[5] & 0x0F;
  8092c0:	e0bffa83 	ldbu	r2,-22(fp)
  8092c4:	108003cc 	andi	r2,r2,15
  8092c8:	e0bff885 	stb	r2,-30(fp)
	read_bl_len = 1;
  8092cc:	00800044 	movi	r2,1
  8092d0:	e0bff70d 	sth	r2,-36(fp)
	read_bl_len <<= by;
  8092d4:	e0fff70b 	ldhu	r3,-36(fp)
  8092d8:	e0bff883 	ldbu	r2,-30(fp)
  8092dc:	1884983a 	sll	r2,r3,r2
  8092e0:	e0bff70d 	sth	r2,-36(fp)

	by=iob[9] & 0x03;
  8092e4:	e0bffb83 	ldbu	r2,-18(fp)
  8092e8:	108000cc 	andi	r2,r2,3
  8092ec:	e0bff885 	stb	r2,-30(fp)
	by <<= 1;
  8092f0:	e0bff883 	ldbu	r2,-30(fp)
  8092f4:	1085883a 	add	r2,r2,r2
  8092f8:	e0bff885 	stb	r2,-30(fp)
	by += iob[10] >> 7;
  8092fc:	e0bffbc3 	ldbu	r2,-17(fp)
  809300:	10803fcc 	andi	r2,r2,255
  809304:	1004d1fa 	srli	r2,r2,7
  809308:	1007883a 	mov	r3,r2
  80930c:	e0bff883 	ldbu	r2,-30(fp)
  809310:	10c5883a 	add	r2,r2,r3
  809314:	e0bff885 	stb	r2,-30(fp)
	
	c_size_mult = 1;
  809318:	00800044 	movi	r2,1
  80931c:	e0bff78d 	sth	r2,-34(fp)
	c_size_mult <<= (2+by);
  809320:	e0fff78b 	ldhu	r3,-34(fp)
  809324:	e0bff883 	ldbu	r2,-30(fp)
  809328:	10800084 	addi	r2,r2,2
  80932c:	1884983a 	sll	r2,r3,r2
  809330:	e0bff78d 	sth	r2,-34(fp)
	
	*drive_size = (euint32)(c_size+1) * (euint32)c_size_mult * (euint32)read_bl_len;
  809334:	e0bff80b 	ldhu	r2,-32(fp)
  809338:	10800044 	addi	r2,r2,1
  80933c:	1007883a 	mov	r3,r2
  809340:	e0bff78b 	ldhu	r2,-34(fp)
  809344:	1887383a 	mul	r3,r3,r2
  809348:	e0bff70b 	ldhu	r2,-36(fp)
  80934c:	1887383a 	mul	r3,r3,r2
  809350:	e0bfff17 	ldw	r2,-4(fp)
  809354:	10c00015 	stw	r3,0(r2)

	return 0;
  809358:	0005883a 	mov	r2,zero
}
  80935c:	e037883a 	mov	sp,fp
  809360:	dfc00217 	ldw	ra,8(sp)
  809364:	df000117 	ldw	fp,4(sp)
  809368:	dc000017 	ldw	r16,0(sp)
  80936c:	dec00304 	addi	sp,sp,12
  809370:	f800283a 	ret

00809374 <fs_makeDate>:
/*****************************************************************************/
#include "time.h"
/*****************************************************************************/

euint16 fs_makeDate(void)
{
  809374:	deffff04 	addi	sp,sp,-4
  809378:	df000015 	stw	fp,0(sp)
  80937c:	d839883a 	mov	fp,sp
#ifndef DATE_TIME_SUPPORT
	return(0);
  809380:	0005883a 	mov	r2,zero
		(y>127?127<<9:(y&0x3F)<<9)   |
		((m==0||m>12)?1:(m&0xF)<<5)  |
		((d==0||d>31)?1:(d&0x1F))
	);
#endif
}
  809384:	e037883a 	mov	sp,fp
  809388:	df000017 	ldw	fp,0(sp)
  80938c:	dec00104 	addi	sp,sp,4
  809390:	f800283a 	ret

00809394 <fs_makeTime>:
/*****************************************************************************/

euint16 fs_makeTime(void)
{
  809394:	deffff04 	addi	sp,sp,-4
  809398:	df000015 	stw	fp,0(sp)
  80939c:	d839883a 	mov	fp,sp
#ifndef DATE_TIME_SUPPORT
	return(0);
  8093a0:	0005883a 	mov	r2,zero
		(h>23?0:(h&0x1F)<<11) |
		(m>59?0:(m&0x3F)<<5)  |
		(s>59?0:(s-s%2)/2)
	);
#endif
}
  8093a4:	e037883a 	mov	sp,fp
  8093a8:	df000017 	ldw	fp,0(sp)
  8093ac:	dec00104 	addi	sp,sp,4
  8093b0:	f800283a 	ret

008093b4 <fs_hasTimeSupport>:
/*****************************************************************************/

euint8 fs_hasTimeSupport(void)
{
  8093b4:	deffff04 	addi	sp,sp,-4
  8093b8:	df000015 	stw	fp,0(sp)
  8093bc:	d839883a 	mov	fp,sp
#ifdef DATE_TIME_SUPPORT
	return(1);
#else
	return(0);
  8093c0:	0005883a 	mov	r2,zero
#endif
}
  8093c4:	e037883a 	mov	sp,fp
  8093c8:	df000017 	ldw	fp,0(sp)
  8093cc:	dec00104 	addi	sp,sp,4
  8093d0:	f800283a 	ret

008093d4 <listFiles>:
 * Return value: number of files/directories in the given directory or -1
 * if directory does not exist.
\*****************************************************************************/

short listFiles(FileSystem *fs, char *dirname)
{
  8093d4:	deff5904 	addi	sp,sp,-668
  8093d8:	dfc0a615 	stw	ra,664(sp)
  8093dc:	df00a515 	stw	fp,660(sp)
  8093e0:	df00a504 	addi	fp,sp,660
  8093e4:	e13ffd15 	stw	r4,-12(fp)
  8093e8:	e17ffe15 	stw	r5,-8(fp)
	unsigned long startCluster;
	unsigned char fileEntryCount;
	unsigned short counter=0;
  8093ec:	e03f5d0d 	sth	zero,-652(fp)
	unsigned long offset=0;
  8093f0:	e03f5c15 	stw	zero,-656(fp)
	unsigned char buf[512];
	File dir;
	unsigned short i;
	
	/* Find out if we are searching in the root dir or in */
	if(dirname[0]=='/' && dirname[1]=='\0')
  8093f4:	e0bffe17 	ldw	r2,-8(fp)
  8093f8:	10800003 	ldbu	r2,0(r2)
  8093fc:	10803fcc 	andi	r2,r2,255
  809400:	1080201c 	xori	r2,r2,128
  809404:	10bfe004 	addi	r2,r2,-128
  809408:	10800bd8 	cmpnei	r2,r2,47
  80940c:	1000291e 	bne	r2,zero,8094b4 <listFiles+0xe0>
  809410:	e0bffe17 	ldw	r2,-8(fp)
  809414:	10800044 	addi	r2,r2,1
  809418:	10800003 	ldbu	r2,0(r2)
  80941c:	10803fcc 	andi	r2,r2,255
  809420:	1080201c 	xori	r2,r2,128
  809424:	10bfe004 	addi	r2,r2,-128
  809428:	1004c03a 	cmpne	r2,r2,zero
  80942c:	1000211e 	bne	r2,zero,8094b4 <listFiles+0xe0>
	{
		if( (fs->type == FAT12) || (fs->type == FAT16) )
  809430:	e0bffd17 	ldw	r2,-12(fp)
  809434:	10800f03 	ldbu	r2,60(r2)
  809438:	10803fcc 	andi	r2,r2,255
  80943c:	10800060 	cmpeqi	r2,r2,1
  809440:	1000051e 	bne	r2,zero,809458 <listFiles+0x84>
  809444:	e0bffd17 	ldw	r2,-12(fp)
  809448:	10800f03 	ldbu	r2,60(r2)
  80944c:	10803fcc 	andi	r2,r2,255
  809450:	10800098 	cmpnei	r2,r2,2
  809454:	1000941e 	bne	r2,zero,8096a8 <listFiles+0x2d4>
		{
			for(i=0;i<=(fs->volumeId.RootEntryCount/16);i++)
  809458:	e03f5b0d 	sth	zero,-660(fp)
  80945c:	00000d06 	br	809494 <listFiles+0xc0>
			{
				loc.Sector=fs->FirstSectorRootDir + i;
  809460:	e0bffd17 	ldw	r2,-12(fp)
  809464:	10c00b17 	ldw	r3,44(r2)
  809468:	e0bf5b0b 	ldhu	r2,-660(fp)
  80946c:	1885883a 	add	r2,r3,r2
  809470:	e0bf6715 	stw	r2,-612(fp)
				part_readBuf(fs->part,loc.Sector,buf);
  809474:	e0bffd17 	ldw	r2,-12(fp)
  809478:	11000017 	ldw	r4,0(r2)
  80947c:	e17f6717 	ldw	r5,-612(fp)
  809480:	e1bf6904 	addi	r6,fp,-604
  809484:	08084600 	call	808460 <part_readBuf>
	/* Find out if we are searching in the root dir or in */
	if(dirname[0]=='/' && dirname[1]=='\0')
	{
		if( (fs->type == FAT12) || (fs->type == FAT16) )
		{
			for(i=0;i<=(fs->volumeId.RootEntryCount/16);i++)
  809488:	e0bf5b0b 	ldhu	r2,-660(fp)
  80948c:	10800044 	addi	r2,r2,1
  809490:	e0bf5b0d 	sth	r2,-660(fp)
  809494:	e0bffd17 	ldw	r2,-12(fp)
  809498:	1080030b 	ldhu	r2,12(r2)
  80949c:	10bfffcc 	andi	r2,r2,65535
  8094a0:	1004d13a 	srli	r2,r2,4
  8094a4:	10ffffcc 	andi	r3,r2,65535
  8094a8:	e0bf5b0b 	ldhu	r2,-660(fp)
  8094ac:	18bfec2e 	bgeu	r3,r2,809460 <listFiles+0x8c>
	unsigned char buf[512];
	File dir;
	unsigned short i;
	
	/* Find out if we are searching in the root dir or in */
	if(dirname[0]=='/' && dirname[1]=='\0')
  8094b0:	00007d06 	br	8096a8 <listFiles+0x2d4>
		}
	}
	else /* Normal directory */
	{
		/* Check if path given is a directory */
		if(fs_findFile(fs,dirname,&loc,0)!=2)
  8094b4:	e1bf6704 	addi	r6,fp,-612
  8094b8:	e13ffd17 	ldw	r4,-12(fp)
  8094bc:	e17ffe17 	ldw	r5,-8(fp)
  8094c0:	000f883a 	mov	r7,zero
  8094c4:	0804da80 	call	804da8 <fs_findFile>
  8094c8:	10803fcc 	andi	r2,r2,255
  8094cc:	1080201c 	xori	r2,r2,128
  8094d0:	10bfe004 	addi	r2,r2,-128
  8094d4:	108000a0 	cmpeqi	r2,r2,2
  8094d8:	1000031e 	bne	r2,zero,8094e8 <listFiles+0x114>
		{
			FUNC_OUT((TXT("")));
			return(-1);
  8094dc:	00bfffc4 	movi	r2,-1
  8094e0:	e0bfff15 	stw	r2,-4(fp)
  8094e4:	00007506 	br	8096bc <listFiles+0x2e8>
		}
	
		/* Find out what the startcluster of the directory is */
		part_readBuf(fs->part,loc.Sector, buf);
  8094e8:	e0bffd17 	ldw	r2,-12(fp)
  8094ec:	11000017 	ldw	r4,0(r2)
  8094f0:	e17f6717 	ldw	r5,-612(fp)
  8094f4:	e1bf6904 	addi	r6,fp,-604
  8094f8:	08084600 	call	808460 <part_readBuf>
		fileEntry = *(((FileRecord*)buf) + loc.Offset);
  8094fc:	e0ff6904 	addi	r3,fp,-604
  809500:	e0bf6803 	ldbu	r2,-608(fp)
  809504:	10803fcc 	andi	r2,r2,255
  809508:	1004917a 	slli	r2,r2,5
  80950c:	1887883a 	add	r3,r3,r2
  809510:	18800017 	ldw	r2,0(r3)
  809514:	e0bf5f15 	stw	r2,-644(fp)
  809518:	18800117 	ldw	r2,4(r3)
  80951c:	e0bf6015 	stw	r2,-640(fp)
  809520:	18800217 	ldw	r2,8(r3)
  809524:	e0bf6115 	stw	r2,-636(fp)
  809528:	18800317 	ldw	r2,12(r3)
  80952c:	e0bf6215 	stw	r2,-632(fp)
  809530:	18800417 	ldw	r2,16(r3)
  809534:	e0bf6315 	stw	r2,-628(fp)
  809538:	18800517 	ldw	r2,20(r3)
  80953c:	e0bf6415 	stw	r2,-624(fp)
  809540:	18800617 	ldw	r2,24(r3)
  809544:	e0bf6515 	stw	r2,-620(fp)
  809548:	18800717 	ldw	r2,28(r3)
  80954c:	e0bf6615 	stw	r2,-616(fp)
		startCluster = (((unsigned long)fileEntry.FirstClusterHigh)<<16) 
  809550:	e0bf640b 	ldhu	r2,-624(fp)
  809554:	10bfffcc 	andi	r2,r2,65535
  809558:	1006943a 	slli	r3,r2,16
  80955c:	e0bf658b 	ldhu	r2,-618(fp)
  809560:	10bfffcc 	andi	r2,r2,65535
  809564:	1885883a 	add	r2,r3,r2
  809568:	e0bf5e15 	stw	r2,-648(fp)
			+ fileEntry.FirstClusterLow;

	    /* Init of dir */
		dir.fs=fs;
  80956c:	e0bffd17 	ldw	r2,-12(fp)
  809570:	e0bff315 	stw	r2,-52(fp)
		dir.Cache.LogicCluster=-1;
  809574:	00bfffc4 	movi	r2,-1
  809578:	e0bff515 	stw	r2,-44(fp)
		dir.Cache.FirstCluster=startCluster;
  80957c:	e0bf5e17 	ldw	r2,-648(fp)
  809580:	e0bff715 	stw	r2,-36(fp)
		dir.DirEntry.Attribute=ATTR_DIRECTORY;
  809584:	00800404 	movi	r2,16
  809588:	e0bfebc5 	stb	r2,-81(fp)
	
		while((file_fread(&dir,offset,512,buf)))
  80958c:	00003f06 	br	80968c <listFiles+0x2b8>
		{
			DBG((TXT("Read 512 bytes from dir with offset %li.\n"),offset));
  809590:	010020b4 	movhi	r4,130
  809594:	210b8204 	addi	r4,r4,11784
  809598:	e17f5c17 	ldw	r5,-656(fp)
  80959c:	080de1c0 	call	80de1c <printf>
			for(fileEntryCount=0;fileEntryCount<16;fileEntryCount++)
  8095a0:	e03f5d85 	stb	zero,-650(fp)
  8095a4:	00003306 	br	809674 <listFiles+0x2a0>
			{
				fileEntry = *(((FileRecord*)buf) + fileEntryCount);
  8095a8:	e0ff6904 	addi	r3,fp,-604
  8095ac:	e0bf5d83 	ldbu	r2,-650(fp)
  8095b0:	1004917a 	slli	r2,r2,5
  8095b4:	1887883a 	add	r3,r3,r2
  8095b8:	18800017 	ldw	r2,0(r3)
  8095bc:	e0bf5f15 	stw	r2,-644(fp)
  8095c0:	18800117 	ldw	r2,4(r3)
  8095c4:	e0bf6015 	stw	r2,-640(fp)
  8095c8:	18800217 	ldw	r2,8(r3)
  8095cc:	e0bf6115 	stw	r2,-636(fp)
  8095d0:	18800317 	ldw	r2,12(r3)
  8095d4:	e0bf6215 	stw	r2,-632(fp)
  8095d8:	18800417 	ldw	r2,16(r3)
  8095dc:	e0bf6315 	stw	r2,-628(fp)
  8095e0:	18800517 	ldw	r2,20(r3)
  8095e4:	e0bf6415 	stw	r2,-624(fp)
  8095e8:	18800617 	ldw	r2,24(r3)
  8095ec:	e0bf6515 	stw	r2,-620(fp)
  8095f0:	18800717 	ldw	r2,28(r3)
  8095f4:	e0bf6615 	stw	r2,-616(fp)
				if( !( (fileEntry.Attribute & 0x0F) == 0x0F ) )
  8095f8:	e0bf61c3 	ldbu	r2,-633(fp)
  8095fc:	10803fcc 	andi	r2,r2,255
  809600:	108003cc 	andi	r2,r2,15
  809604:	108003e0 	cmpeqi	r2,r2,15
  809608:	1000171e 	bne	r2,zero,809668 <listFiles+0x294>
				{
					if
					(
  80960c:	e0bf5f03 	ldbu	r2,-644(fp)
  809610:	10803fcc 	andi	r2,r2,255
  809614:	10801070 	cmpltui	r2,r2,65
  809618:	1000041e 	bne	r2,zero,80962c <listFiles+0x258>
  80961c:	e0bf5f03 	ldbu	r2,-644(fp)
  809620:	10803fcc 	andi	r2,r2,255
  809624:	108016f0 	cmpltui	r2,r2,91
  809628:	1000081e 	bne	r2,zero,80964c <listFiles+0x278>
  80962c:	e0bf5f03 	ldbu	r2,-644(fp)
  809630:	10803fcc 	andi	r2,r2,255
  809634:	10800c30 	cmpltui	r2,r2,48
  809638:	10000b1e 	bne	r2,zero,809668 <listFiles+0x294>
  80963c:	e0bf5f03 	ldbu	r2,-644(fp)
  809640:	10803fcc 	andi	r2,r2,255
  809644:	10800ea8 	cmpgeui	r2,r2,58
  809648:	1000071e 	bne	r2,zero,809668 <listFiles+0x294>
					 (fileEntry.FileName[0]>='A' && fileEntry.FileName[0]<='Z')
					 ||
					 (fileEntry.FileName[0]>='0' && fileEntry.FileName[0]<='9')
					)
					{
						DBG((TXT("Filename: %s\n"),fileEntry.FileName));
  80964c:	e17f5f04 	addi	r5,fp,-644
  809650:	010020b4 	movhi	r4,130
  809654:	210b8d04 	addi	r4,r4,11828
  809658:	080de1c0 	call	80de1c <printf>
						counter++;
  80965c:	e0bf5d0b 	ldhu	r2,-652(fp)
  809660:	10800044 	addi	r2,r2,1
  809664:	e0bf5d0d 	sth	r2,-652(fp)
		dir.DirEntry.Attribute=ATTR_DIRECTORY;
	
		while((file_fread(&dir,offset,512,buf)))
		{
			DBG((TXT("Read 512 bytes from dir with offset %li.\n"),offset));
			for(fileEntryCount=0;fileEntryCount<16;fileEntryCount++)
  809668:	e0bf5d83 	ldbu	r2,-650(fp)
  80966c:	10800044 	addi	r2,r2,1
  809670:	e0bf5d85 	stb	r2,-650(fp)
  809674:	e0bf5d83 	ldbu	r2,-650(fp)
  809678:	10800430 	cmpltui	r2,r2,16
  80967c:	103fca1e 	bne	r2,zero,8095a8 <listFiles+0x1d4>
						DBG((TXT("Filename: %s\n"),fileEntry.FileName));
						counter++;
					}
				}
			}
			offset+=512;
  809680:	e0bf5c17 	ldw	r2,-656(fp)
  809684:	10808004 	addi	r2,r2,512
  809688:	e0bf5c15 	stw	r2,-656(fp)
		dir.fs=fs;
		dir.Cache.LogicCluster=-1;
		dir.Cache.FirstCluster=startCluster;
		dir.DirEntry.Attribute=ATTR_DIRECTORY;
	
		while((file_fread(&dir,offset,512,buf)))
  80968c:	e13fe904 	addi	r4,fp,-92
  809690:	e1ff6904 	addi	r7,fp,-604
  809694:	e17f5c17 	ldw	r5,-656(fp)
  809698:	01808004 	movi	r6,512
  80969c:	08031a80 	call	8031a8 <file_fread>
  8096a0:	1004c03a 	cmpne	r2,r2,zero
  8096a4:	103fba1e 	bne	r2,zero,809590 <listFiles+0x1bc>
			offset+=512;
		}
	}
	
	FUNC_OUT((TXT("")));
	return(counter);
  8096a8:	e0bf5d0b 	ldhu	r2,-652(fp)
  8096ac:	10bfffcc 	andi	r2,r2,65535
  8096b0:	10a0001c 	xori	r2,r2,32768
  8096b4:	10a00004 	addi	r2,r2,-32768
  8096b8:	e0bfff15 	stw	r2,-4(fp)
  8096bc:	e0bfff17 	ldw	r2,-4(fp)
	
	return(-1);
}
  8096c0:	e037883a 	mov	sp,fp
  8096c4:	dfc00117 	ldw	ra,4(sp)
  8096c8:	df000017 	ldw	fp,0(sp)
  8096cc:	dec00204 	addi	sp,sp,8
  8096d0:	f800283a 	ret

008096d4 <rmfile>:
 * Description: This function takes a filename as argument and deletes it,
 * by freeing it's clusterchain, and deleting it's entry from the directory.
 * Return value: 0 on success, -1 on errors, like file not found.
*/
esint16 rmfile(FileSystem *fs,euint8* filename)
{
  8096d4:	defff104 	addi	sp,sp,-60
  8096d8:	dfc00e15 	stw	ra,56(sp)
  8096dc:	df000d15 	stw	fp,52(sp)
  8096e0:	df000d04 	addi	fp,sp,52
  8096e4:	e13ffd15 	stw	r4,-12(fp)
  8096e8:	e17ffe15 	stw	r5,-8(fp)
	FileLocation loc;
	ClusterChain cache;
	euint8* buf;
	euint32 firstCluster=0;
  8096ec:	e03ff315 	stw	zero,-52(fp)
	
	if((fs_findFile(fs,(eint8*)filename,&loc,0))==1){
  8096f0:	e17ffe17 	ldw	r5,-8(fp)
  8096f4:	e1bff504 	addi	r6,fp,-44
  8096f8:	e13ffd17 	ldw	r4,-12(fp)
  8096fc:	000f883a 	mov	r7,zero
  809700:	0804da80 	call	804da8 <fs_findFile>
  809704:	10803fcc 	andi	r2,r2,255
  809708:	1080201c 	xori	r2,r2,128
  80970c:	10bfe004 	addi	r2,r2,-128
  809710:	10800058 	cmpnei	r2,r2,1
  809714:	1000371e 	bne	r2,zero,8097f4 <rmfile+0x120>
		buf=part_getSect(fs->part,loc.Sector,IOM_MODE_READWRITE);
  809718:	e0bffd17 	ldw	r2,-12(fp)
  80971c:	11000017 	ldw	r4,0(r2)
  809720:	e17ff517 	ldw	r5,-44(fp)
  809724:	01800084 	movi	r6,2
  809728:	08085980 	call	808598 <part_getSect>
  80972c:	e0bff415 	stw	r2,-48(fp)
		firstCluster = ex_getb16(buf,loc.Offset*32+20);
  809730:	e0bff603 	ldbu	r2,-40(fp)
  809734:	10803fcc 	andi	r2,r2,255
  809738:	1004917a 	slli	r2,r2,5
  80973c:	10800504 	addi	r2,r2,20
  809740:	100b883a 	mov	r5,r2
  809744:	e13ff417 	ldw	r4,-48(fp)
  809748:	08019500 	call	801950 <ex_getb16>
  80974c:	10bfffcc 	andi	r2,r2,65535
  809750:	e0bff315 	stw	r2,-52(fp)
		firstCluster <<= 16;
  809754:	e0bff317 	ldw	r2,-52(fp)
  809758:	1004943a 	slli	r2,r2,16
  80975c:	e0bff315 	stw	r2,-52(fp)
		firstCluster += ex_getb16(buf,loc.Offset*32+26);
  809760:	e0bff603 	ldbu	r2,-40(fp)
  809764:	10803fcc 	andi	r2,r2,255
  809768:	1004917a 	slli	r2,r2,5
  80976c:	10800684 	addi	r2,r2,26
  809770:	100b883a 	mov	r5,r2
  809774:	e13ff417 	ldw	r4,-48(fp)
  809778:	08019500 	call	801950 <ex_getb16>
  80977c:	10ffffcc 	andi	r3,r2,65535
  809780:	e0bff317 	ldw	r2,-52(fp)
  809784:	10c5883a 	add	r2,r2,r3
  809788:	e0bff315 	stw	r2,-52(fp)
		/* Bugfix:
		 * By clearing the entire structure, you mark end of directory.
		 * If this is not the case, files that are further away cannot
		* be opened anymore by implementations that follow the spec. */
		/*memClr(buf+(loc.Offset*32),32);*/
		*(buf+(loc.Offset*32)+0) = 0xE5; /* Mark file deleted */
  80978c:	e0bff603 	ldbu	r2,-40(fp)
  809790:	10803fcc 	andi	r2,r2,255
  809794:	1004917a 	slli	r2,r2,5
  809798:	1007883a 	mov	r3,r2
  80979c:	e0bff417 	ldw	r2,-48(fp)
  8097a0:	1887883a 	add	r3,r3,r2
  8097a4:	00bff944 	movi	r2,-27
  8097a8:	18800005 	stb	r2,0(r3)
		part_relSect(fs->part,buf);
  8097ac:	e0bffd17 	ldw	r2,-12(fp)
  8097b0:	11000017 	ldw	r4,0(r2)
  8097b4:	e17ff417 	ldw	r5,-48(fp)
  8097b8:	08085f80 	call	8085f8 <part_relSect>
		cache.DiscCluster = cache.LastCluster = cache.Linear = cache.LogicCluster = 0;
  8097bc:	e03ff815 	stw	zero,-32(fp)
  8097c0:	e03ff705 	stb	zero,-36(fp)
  8097c4:	e0bff703 	ldbu	r2,-36(fp)
  8097c8:	10803fcc 	andi	r2,r2,255
  8097cc:	e0bffb15 	stw	r2,-20(fp)
  8097d0:	e0bffb17 	ldw	r2,-20(fp)
  8097d4:	e0bff915 	stw	r2,-28(fp)
		cache.FirstCluster = firstCluster;
  8097d8:	e0bff317 	ldw	r2,-52(fp)
  8097dc:	e0bffa15 	stw	r2,-24(fp)
 		fat_unlinkClusterChain(fs,&cache);
  8097e0:	e17ff704 	addi	r5,fp,-36
  8097e4:	e13ffd17 	ldw	r4,-12(fp)
  8097e8:	0802efc0 	call	802efc <fat_unlinkClusterChain>
		return(0);
  8097ec:	e03fff15 	stw	zero,-4(fp)
  8097f0:	00000206 	br	8097fc <rmfile+0x128>
	}
	return(-1);
  8097f4:	00bfffc4 	movi	r2,-1
  8097f8:	e0bfff15 	stw	r2,-4(fp)
  8097fc:	e0bfff17 	ldw	r2,-4(fp)
}
  809800:	e037883a 	mov	sp,fp
  809804:	dfc00117 	ldw	ra,4(sp)
  809808:	df000017 	ldw	fp,0(sp)
  80980c:	dec00204 	addi	sp,sp,8
  809810:	f800283a 	ret

00809814 <makedir>:

/*****************************************************************************/
esint8 makedir(FileSystem *fs,eint8* dirname)
{
  809814:	deffea04 	addi	sp,sp,-88
  809818:	dfc01515 	stw	ra,84(sp)
  80981c:	df001415 	stw	fp,80(sp)
  809820:	dc001315 	stw	r16,76(sp)
  809824:	df001304 	addi	fp,sp,76
  809828:	e13ffd15 	stw	r4,-12(fp)
  80982c:	e17ffe15 	stw	r5,-8(fp)
	FileRecord direntry;
	euint32 nc,parentdir;
	euint8* buf;
	eint8 ffname[11];
	
	if( fs_findFile(fs,dirname,&loc,&parentdir) ){
  809830:	e1bfef04 	addi	r6,fp,-68
  809834:	e1fff904 	addi	r7,fp,-28
  809838:	e13ffd17 	ldw	r4,-12(fp)
  80983c:	e17ffe17 	ldw	r5,-8(fp)
  809840:	0804da80 	call	804da8 <fs_findFile>
  809844:	10803fcc 	andi	r2,r2,255
  809848:	1080201c 	xori	r2,r2,128
  80984c:	10bfe004 	addi	r2,r2,-128
  809850:	1005003a 	cmpeq	r2,r2,zero
  809854:	1000031e 	bne	r2,zero,809864 <makedir+0x50>
		return(-1);
  809858:	00bfffc4 	movi	r2,-1
  80985c:	e0bfff15 	stw	r2,-4(fp)
  809860:	00009706 	br	809ac0 <makedir+0x2ac>
	}
	if(parentdir==0)return(-2);
  809864:	e0bff917 	ldw	r2,-28(fp)
  809868:	1004c03a 	cmpne	r2,r2,zero
  80986c:	1000031e 	bne	r2,zero,80987c <makedir+0x68>
  809870:	00bfff84 	movi	r2,-2
  809874:	e0bfff15 	stw	r2,-4(fp)
  809878:	00009106 	br	809ac0 <makedir+0x2ac>
	
	if(!fs_findFreeFile(fs,dirname,&loc,0))return(-3);
  80987c:	e1bfef04 	addi	r6,fp,-68
  809880:	e13ffd17 	ldw	r4,-12(fp)
  809884:	e17ffe17 	ldw	r5,-8(fp)
  809888:	000f883a 	mov	r7,zero
  80988c:	0804fe80 	call	804fe8 <fs_findFreeFile>
  809890:	10bfffcc 	andi	r2,r2,65535
  809894:	10a0001c 	xori	r2,r2,32768
  809898:	10a00004 	addi	r2,r2,-32768
  80989c:	1004c03a 	cmpne	r2,r2,zero
  8098a0:	1000031e 	bne	r2,zero,8098b0 <makedir+0x9c>
  8098a4:	00bfff44 	movi	r2,-3
  8098a8:	e0bfff15 	stw	r2,-4(fp)
  8098ac:	00008406 	br	809ac0 <makedir+0x2ac>
	 * is why getNextFreeCluster has to be called AFTER calling
	 * fs_findFreeFile, which may have to expand a directory in
	 * order to store the new filerecord !! 
	 */
	
	nc = fs_getNextFreeCluster(fs,fs_giveFreeClusterHint(fs));
  8098b0:	e13ffd17 	ldw	r4,-12(fp)
  8098b4:	0804d840 	call	804d84 <fs_giveFreeClusterHint>
  8098b8:	100b883a 	mov	r5,r2
  8098bc:	e13ffd17 	ldw	r4,-12(fp)
  8098c0:	0804d040 	call	804d04 <fs_getNextFreeCluster>
  8098c4:	e0bfee15 	stw	r2,-72(fp)
	if(nc==0)return(0);
  8098c8:	e0bfee17 	ldw	r2,-72(fp)
  8098cc:	1004c03a 	cmpne	r2,r2,zero
  8098d0:	1000021e 	bne	r2,zero,8098dc <makedir+0xc8>
  8098d4:	e03fff15 	stw	zero,-4(fp)
  8098d8:	00007906 	br	809ac0 <makedir+0x2ac>
	
	fs_clearCluster(fs,nc);
  8098dc:	e13ffd17 	ldw	r4,-12(fp)
  8098e0:	e17fee17 	ldw	r5,-72(fp)
  8098e4:	08053640 	call	805364 <fs_clearCluster>
	
	buf = part_getSect(fs->part,loc.Sector,IOM_MODE_READWRITE);
  8098e8:	e0bffd17 	ldw	r2,-12(fp)
  8098ec:	11000017 	ldw	r4,0(r2)
  8098f0:	e17fef17 	ldw	r5,-68(fp)
  8098f4:	01800084 	movi	r6,2
  8098f8:	08085980 	call	808598 <part_getSect>
  8098fc:	e0bfed15 	stw	r2,-76(fp)

	dir_getFatFileName(dirname,ffname);
  809900:	e17ffa04 	addi	r5,fp,-24
  809904:	e13ffe17 	ldw	r4,-8(fp)
  809908:	08015e00 	call	8015e0 <dir_getFatFileName>
	memClr(&direntry,sizeof(direntry));
  80990c:	e13ff104 	addi	r4,fp,-60
  809910:	01400804 	movi	r5,32
  809914:	08088a40 	call	8088a4 <memClr>
	memCpy(ffname,&direntry,11);
  809918:	e13ffa04 	addi	r4,fp,-24
  80991c:	e17ff104 	addi	r5,fp,-60
  809920:	018002c4 	movi	r6,11
  809924:	08088380 	call	808838 <memCpy>
	direntry.FileSize = 0;
  809928:	e03ff815 	stw	zero,-32(fp)
	direntry.FirstClusterHigh=nc>>16;
  80992c:	e0bfee17 	ldw	r2,-72(fp)
  809930:	1004d43a 	srli	r2,r2,16
  809934:	e0bff60d 	sth	r2,-40(fp)
	direntry.FirstClusterLow=nc&0xFFFF;
  809938:	e0bfee17 	ldw	r2,-72(fp)
  80993c:	e0bff78d 	sth	r2,-34(fp)
	direntry.Attribute = ATTR_DIRECTORY;
  809940:	00800404 	movi	r2,16
  809944:	e0bff3c5 	stb	r2,-49(fp)
	memCpy(&direntry,buf+(32*loc.Offset),32);
  809948:	e0bff003 	ldbu	r2,-64(fp)
  80994c:	10803fcc 	andi	r2,r2,255
  809950:	1004917a 	slli	r2,r2,5
  809954:	1007883a 	mov	r3,r2
  809958:	e0bfed17 	ldw	r2,-76(fp)
  80995c:	188b883a 	add	r5,r3,r2
  809960:	e13ff104 	addi	r4,fp,-60
  809964:	01800804 	movi	r6,32
  809968:	08088380 	call	808838 <memCpy>
		
	part_relSect(fs->part,buf);
  80996c:	e0bffd17 	ldw	r2,-12(fp)
  809970:	11000017 	ldw	r4,0(r2)
  809974:	e17fed17 	ldw	r5,-76(fp)
  809978:	08085f80 	call	8085f8 <part_relSect>
	
	buf = part_getSect(fs->part,fs_clusterToSector(fs,nc),IOM_MODE_READWRITE);
  80997c:	e0bffd17 	ldw	r2,-12(fp)
  809980:	14000017 	ldw	r16,0(r2)
  809984:	e13ffd17 	ldw	r4,-12(fp)
  809988:	e17fee17 	ldw	r5,-72(fp)
  80998c:	0804b3c0 	call	804b3c <fs_clusterToSector>
  809990:	100b883a 	mov	r5,r2
  809994:	8009883a 	mov	r4,r16
  809998:	01800084 	movi	r6,2
  80999c:	08085980 	call	808598 <part_getSect>
  8099a0:	e0bfed15 	stw	r2,-76(fp)
	
	memClr(&direntry,sizeof(direntry));
  8099a4:	e13ff104 	addi	r4,fp,-60
  8099a8:	01400804 	movi	r5,32
  8099ac:	08088a40 	call	8088a4 <memClr>
	memCpy(".          ",&direntry,11);
  8099b0:	e17ff104 	addi	r5,fp,-60
  8099b4:	010020b4 	movhi	r4,130
  8099b8:	210b9104 	addi	r4,r4,11844
  8099bc:	018002c4 	movi	r6,11
  8099c0:	08088380 	call	808838 <memCpy>
	direntry.Attribute = ATTR_DIRECTORY;
  8099c4:	00800404 	movi	r2,16
  8099c8:	e0bff3c5 	stb	r2,-49(fp)
	direntry.FileSize = 0;
  8099cc:	e03ff815 	stw	zero,-32(fp)
	direntry.FirstClusterHigh=nc>>16;
  8099d0:	e0bfee17 	ldw	r2,-72(fp)
  8099d4:	1004d43a 	srli	r2,r2,16
  8099d8:	e0bff60d 	sth	r2,-40(fp)
	direntry.FirstClusterLow=nc&0xFFFF;
  8099dc:	e0bfee17 	ldw	r2,-72(fp)
  8099e0:	e0bff78d 	sth	r2,-34(fp)
	memCpy(&direntry,buf,32);
  8099e4:	e13ff104 	addi	r4,fp,-60
  8099e8:	e17fed17 	ldw	r5,-76(fp)
  8099ec:	01800804 	movi	r6,32
  8099f0:	08088380 	call	808838 <memCpy>
	
	if(fs->type == FAT32 && parentdir == fs->volumeId.RootCluster){
  8099f4:	e0bffd17 	ldw	r2,-12(fp)
  8099f8:	10800f03 	ldbu	r2,60(r2)
  8099fc:	10803fcc 	andi	r2,r2,255
  809a00:	108000d8 	cmpnei	r2,r2,3
  809a04:	1000051e 	bne	r2,zero,809a1c <makedir+0x208>
  809a08:	e0bffd17 	ldw	r2,-12(fp)
  809a0c:	10c00717 	ldw	r3,28(r2)
  809a10:	e0bff917 	ldw	r2,-28(fp)
  809a14:	1880011e 	bne	r3,r2,809a1c <makedir+0x208>
		parentdir = 0;
  809a18:	e03ff915 	stw	zero,-28(fp)
	}
	if(fs->type != FAT32 && parentdir<=1){
  809a1c:	e0bffd17 	ldw	r2,-12(fp)
  809a20:	10800f03 	ldbu	r2,60(r2)
  809a24:	10803fcc 	andi	r2,r2,255
  809a28:	108000e0 	cmpeqi	r2,r2,3
  809a2c:	1000041e 	bne	r2,zero,809a40 <makedir+0x22c>
  809a30:	e0bff917 	ldw	r2,-28(fp)
  809a34:	108000a8 	cmpgeui	r2,r2,2
  809a38:	1000011e 	bne	r2,zero,809a40 <makedir+0x22c>
		parentdir = 0;
  809a3c:	e03ff915 	stw	zero,-28(fp)
	} 
	
	memClr(&direntry,sizeof(direntry));
  809a40:	e13ff104 	addi	r4,fp,-60
  809a44:	01400804 	movi	r5,32
  809a48:	08088a40 	call	8088a4 <memClr>
	memCpy("..         ",&direntry,11);
  809a4c:	e17ff104 	addi	r5,fp,-60
  809a50:	010020b4 	movhi	r4,130
  809a54:	210b9404 	addi	r4,r4,11856
  809a58:	018002c4 	movi	r6,11
  809a5c:	08088380 	call	808838 <memCpy>
	direntry.Attribute = ATTR_DIRECTORY;
  809a60:	00800404 	movi	r2,16
  809a64:	e0bff3c5 	stb	r2,-49(fp)
	direntry.FileSize = 0;
  809a68:	e03ff815 	stw	zero,-32(fp)
	direntry.FirstClusterHigh=parentdir>>16;
  809a6c:	e0bff917 	ldw	r2,-28(fp)
  809a70:	1004d43a 	srli	r2,r2,16
  809a74:	e0bff60d 	sth	r2,-40(fp)
	direntry.FirstClusterLow=parentdir&0xFFFF;
  809a78:	e0bff917 	ldw	r2,-28(fp)
  809a7c:	e0bff78d 	sth	r2,-34(fp)
	memCpy(&direntry,buf+32,32);
  809a80:	e0bfed17 	ldw	r2,-76(fp)
  809a84:	11400804 	addi	r5,r2,32
  809a88:	e13ff104 	addi	r4,fp,-60
  809a8c:	01800804 	movi	r6,32
  809a90:	08088380 	call	808838 <memCpy>

	part_relSect(fs->part,buf);
  809a94:	e0bffd17 	ldw	r2,-12(fp)
  809a98:	11000017 	ldw	r4,0(r2)
  809a9c:	e17fed17 	ldw	r5,-76(fp)
  809aa0:	08085f80 	call	8085f8 <part_relSect>
	
	fat_setNextClusterAddress(fs,nc,fat_giveEocMarker(fs));
  809aa4:	e13ffd17 	ldw	r4,-12(fp)
  809aa8:	080241c0 	call	80241c <fat_giveEocMarker>
  809aac:	100d883a 	mov	r6,r2
  809ab0:	e13ffd17 	ldw	r4,-12(fp)
  809ab4:	e17fee17 	ldw	r5,-72(fp)
  809ab8:	0801ff40 	call	801ff4 <fat_setNextClusterAddress>

	return(0);
  809abc:	e03fff15 	stw	zero,-4(fp)
  809ac0:	e0bfff17 	ldw	r2,-4(fp)
}
  809ac4:	e037883a 	mov	sp,fp
  809ac8:	dfc00217 	ldw	ra,8(sp)
  809acc:	df000117 	ldw	fp,4(sp)
  809ad0:	dc000017 	ldw	r16,0(sp)
  809ad4:	dec00304 	addi	sp,sp,12
  809ad8:	f800283a 	ret

00809adc <sin>:
  809adc:	00a00034 	movhi	r2,32768
  809ae0:	10bfffc4 	addi	r2,r2,-1
  809ae4:	defffa04 	addi	sp,sp,-24
  809ae8:	114c703a 	and	r6,r2,r5
  809aec:	008ffa74 	movhi	r2,16361
  809af0:	10887ec4 	addi	r2,r2,8699
  809af4:	dfc00515 	stw	ra,20(sp)
  809af8:	2011883a 	mov	r8,r4
  809afc:	1180220e 	bge	r2,r6,809b88 <sin+0xac>
  809b00:	009ffc34 	movhi	r2,32752
  809b04:	10bfffc4 	addi	r2,r2,-1
  809b08:	11800a0e 	bge	r2,r6,809b34 <sin+0x58>
  809b0c:	280f883a 	mov	r7,r5
  809b10:	400d883a 	mov	r6,r8
  809b14:	080c4240 	call	80c424 <__subdf3>
  809b18:	100d883a 	mov	r6,r2
  809b1c:	180f883a 	mov	r7,r3
  809b20:	3005883a 	mov	r2,r6
  809b24:	3807883a 	mov	r3,r7
  809b28:	dfc00517 	ldw	ra,20(sp)
  809b2c:	dec00604 	addi	sp,sp,24
  809b30:	f800283a 	ret
  809b34:	d9800104 	addi	r6,sp,4
  809b38:	0809c480 	call	809c48 <__ieee754_rem_pio2>
  809b3c:	10c000cc 	andi	r3,r2,3
  809b40:	01000044 	movi	r4,1
  809b44:	19001b26 	beq	r3,r4,809bb4 <sin+0xd8>
  809b48:	00800084 	movi	r2,2
  809b4c:	18803126 	beq	r3,r2,809c14 <sin+0x138>
  809b50:	1800241e 	bne	r3,zero,809be4 <sin+0x108>
  809b54:	d8800117 	ldw	r2,4(sp)
  809b58:	da000317 	ldw	r8,12(sp)
  809b5c:	d8c00217 	ldw	r3,8(sp)
  809b60:	da400417 	ldw	r9,16(sp)
  809b64:	d9000015 	stw	r4,0(sp)
  809b68:	400d883a 	mov	r6,r8
  809b6c:	480f883a 	mov	r7,r9
  809b70:	180b883a 	mov	r5,r3
  809b74:	1009883a 	mov	r4,r2
  809b78:	080b8180 	call	80b818 <__kernel_sin>
  809b7c:	100d883a 	mov	r6,r2
  809b80:	180f883a 	mov	r7,r3
  809b84:	003fe606 	br	809b20 <sin+0x44>
  809b88:	000d883a 	mov	r6,zero
  809b8c:	000f883a 	mov	r7,zero
  809b90:	d8000015 	stw	zero,0(sp)
  809b94:	080b8180 	call	80b818 <__kernel_sin>
  809b98:	100d883a 	mov	r6,r2
  809b9c:	180f883a 	mov	r7,r3
  809ba0:	3005883a 	mov	r2,r6
  809ba4:	3807883a 	mov	r3,r7
  809ba8:	dfc00517 	ldw	ra,20(sp)
  809bac:	dec00604 	addi	sp,sp,24
  809bb0:	f800283a 	ret
  809bb4:	d8800117 	ldw	r2,4(sp)
  809bb8:	da000317 	ldw	r8,12(sp)
  809bbc:	d8c00217 	ldw	r3,8(sp)
  809bc0:	da400417 	ldw	r9,16(sp)
  809bc4:	400d883a 	mov	r6,r8
  809bc8:	180b883a 	mov	r5,r3
  809bcc:	480f883a 	mov	r7,r9
  809bd0:	1009883a 	mov	r4,r2
  809bd4:	080a4700 	call	80a470 <__kernel_cos>
  809bd8:	100d883a 	mov	r6,r2
  809bdc:	180f883a 	mov	r7,r3
  809be0:	003fcf06 	br	809b20 <sin+0x44>
  809be4:	d8800117 	ldw	r2,4(sp)
  809be8:	da000317 	ldw	r8,12(sp)
  809bec:	d8c00217 	ldw	r3,8(sp)
  809bf0:	da400417 	ldw	r9,16(sp)
  809bf4:	400d883a 	mov	r6,r8
  809bf8:	180b883a 	mov	r5,r3
  809bfc:	480f883a 	mov	r7,r9
  809c00:	1009883a 	mov	r4,r2
  809c04:	080a4700 	call	80a470 <__kernel_cos>
  809c08:	100d883a 	mov	r6,r2
  809c0c:	19e0003c 	xorhi	r7,r3,32768
  809c10:	003fc306 	br	809b20 <sin+0x44>
  809c14:	d8800117 	ldw	r2,4(sp)
  809c18:	da000317 	ldw	r8,12(sp)
  809c1c:	d8c00217 	ldw	r3,8(sp)
  809c20:	da400417 	ldw	r9,16(sp)
  809c24:	d9000015 	stw	r4,0(sp)
  809c28:	400d883a 	mov	r6,r8
  809c2c:	480f883a 	mov	r7,r9
  809c30:	180b883a 	mov	r5,r3
  809c34:	1009883a 	mov	r4,r2
  809c38:	080b8180 	call	80b818 <__kernel_sin>
  809c3c:	100d883a 	mov	r6,r2
  809c40:	19e0003c 	xorhi	r7,r3,32768
  809c44:	003fb606 	br	809b20 <sin+0x44>

00809c48 <__ieee754_rem_pio2>:
  809c48:	deffe304 	addi	sp,sp,-116
  809c4c:	00a00034 	movhi	r2,32768
  809c50:	10bfffc4 	addi	r2,r2,-1
  809c54:	dd801915 	stw	r22,100(sp)
  809c58:	28ac703a 	and	r22,r5,r2
  809c5c:	008ffa74 	movhi	r2,16361
  809c60:	10887ec4 	addi	r2,r2,8699
  809c64:	df001b15 	stw	fp,108(sp)
  809c68:	dfc01c15 	stw	ra,112(sp)
  809c6c:	ddc01a15 	stw	r23,104(sp)
  809c70:	dd401815 	stw	r21,96(sp)
  809c74:	dd001715 	stw	r20,92(sp)
  809c78:	dcc01615 	stw	r19,88(sp)
  809c7c:	dc801515 	stw	r18,84(sp)
  809c80:	dc401415 	stw	r17,80(sp)
  809c84:	dc001315 	stw	r16,76(sp)
  809c88:	2013883a 	mov	r9,r4
  809c8c:	d9400a15 	stw	r5,40(sp)
  809c90:	3039883a 	mov	fp,r6
  809c94:	15801216 	blt	r2,r22,809ce0 <__ieee754_rem_pio2+0x98>
  809c98:	e1400115 	stw	r5,4(fp)
  809c9c:	30000315 	stw	zero,12(r6)
  809ca0:	e1000015 	stw	r4,0(fp)
  809ca4:	d8000b15 	stw	zero,44(sp)
  809ca8:	30000215 	stw	zero,8(r6)
  809cac:	d8800b17 	ldw	r2,44(sp)
  809cb0:	dfc01c17 	ldw	ra,112(sp)
  809cb4:	df001b17 	ldw	fp,108(sp)
  809cb8:	ddc01a17 	ldw	r23,104(sp)
  809cbc:	dd801917 	ldw	r22,100(sp)
  809cc0:	dd401817 	ldw	r21,96(sp)
  809cc4:	dd001717 	ldw	r20,92(sp)
  809cc8:	dcc01617 	ldw	r19,88(sp)
  809ccc:	dc801517 	ldw	r18,84(sp)
  809cd0:	dc401417 	ldw	r17,80(sp)
  809cd4:	dc001317 	ldw	r16,76(sp)
  809cd8:	dec01d04 	addi	sp,sp,116
  809cdc:	f800283a 	ret
  809ce0:	009000f4 	movhi	r2,16387
  809ce4:	10b65ec4 	addi	r2,r2,-9861
  809ce8:	15800f0e 	bge	r2,r22,809d28 <__ieee754_rem_pio2+0xe0>
  809cec:	00904e74 	movhi	r2,16697
  809cf0:	10887ec4 	addi	r2,r2,8699
  809cf4:	1580330e 	bge	r2,r22,809dc4 <__ieee754_rem_pio2+0x17c>
  809cf8:	009ffc34 	movhi	r2,32752
  809cfc:	10bfffc4 	addi	r2,r2,-1
  809d00:	1580fe0e 	bge	r2,r22,80a0fc <__ieee754_rem_pio2+0x4b4>
  809d04:	280f883a 	mov	r7,r5
  809d08:	480d883a 	mov	r6,r9
  809d0c:	080c4240 	call	80c424 <__subdf3>
  809d10:	e0c00115 	stw	r3,4(fp)
  809d14:	d8000b15 	stw	zero,44(sp)
  809d18:	e0800015 	stw	r2,0(fp)
  809d1c:	e0800215 	stw	r2,8(fp)
  809d20:	e0c00315 	stw	r3,12(fp)
  809d24:	003fe106 	br	809cac <__ieee754_rem_pio2+0x64>
  809d28:	d9000a17 	ldw	r4,40(sp)
  809d2c:	0100ce0e 	bge	zero,r4,80a068 <__ieee754_rem_pio2+0x420>
  809d30:	04151034 	movhi	r16,21568
  809d34:	044ffe74 	movhi	r17,16377
  809d38:	8c487ec4 	addi	r17,r17,8699
  809d3c:	4809883a 	mov	r4,r9
  809d40:	800d883a 	mov	r6,r16
  809d44:	880f883a 	mov	r7,r17
  809d48:	080c4240 	call	80c424 <__subdf3>
  809d4c:	1025883a 	mov	r18,r2
  809d50:	1827883a 	mov	r19,r3
  809d54:	b4413c26 	beq	r22,r17,80a248 <__ieee754_rem_pio2+0x600>
  809d58:	040698b4 	movhi	r16,6754
  809d5c:	8418cc44 	addi	r16,r16,25393
  809d60:	044f7474 	movhi	r17,15825
  809d64:	8c6d1844 	addi	r17,r17,-19359
  809d68:	1009883a 	mov	r4,r2
  809d6c:	180b883a 	mov	r5,r3
  809d70:	800d883a 	mov	r6,r16
  809d74:	880f883a 	mov	r7,r17
  809d78:	080c4240 	call	80c424 <__subdf3>
  809d7c:	100d883a 	mov	r6,r2
  809d80:	9009883a 	mov	r4,r18
  809d84:	980b883a 	mov	r5,r19
  809d88:	180f883a 	mov	r7,r3
  809d8c:	e0800015 	stw	r2,0(fp)
  809d90:	e0c00115 	stw	r3,4(fp)
  809d94:	080c4240 	call	80c424 <__subdf3>
  809d98:	1009883a 	mov	r4,r2
  809d9c:	800d883a 	mov	r6,r16
  809da0:	880f883a 	mov	r7,r17
  809da4:	180b883a 	mov	r5,r3
  809da8:	080c4240 	call	80c424 <__subdf3>
  809dac:	1009883a 	mov	r4,r2
  809db0:	00800044 	movi	r2,1
  809db4:	d8800b15 	stw	r2,44(sp)
  809db8:	e0c00315 	stw	r3,12(fp)
  809dbc:	e1000215 	stw	r4,8(fp)
  809dc0:	003fba06 	br	809cac <__ieee754_rem_pio2+0x64>
  809dc4:	080bb300 	call	80bb30 <fabs>
  809dc8:	021b72b4 	movhi	r8,28106
  809dcc:	423220c4 	addi	r8,r8,-14205
  809dd0:	024ff934 	movhi	r9,16356
  809dd4:	4a57cc04 	addi	r9,r9,24368
  809dd8:	480f883a 	mov	r7,r9
  809ddc:	400d883a 	mov	r6,r8
  809de0:	1009883a 	mov	r4,r2
  809de4:	180b883a 	mov	r5,r3
  809de8:	1025883a 	mov	r18,r2
  809dec:	1827883a 	mov	r19,r3
  809df0:	080c5180 	call	80c518 <__muldf3>
  809df4:	0011883a 	mov	r8,zero
  809df8:	024ff834 	movhi	r9,16352
  809dfc:	480f883a 	mov	r7,r9
  809e00:	400d883a 	mov	r6,r8
  809e04:	180b883a 	mov	r5,r3
  809e08:	1009883a 	mov	r4,r2
  809e0c:	080c4a40 	call	80c4a4 <__adddf3>
  809e10:	180b883a 	mov	r5,r3
  809e14:	1009883a 	mov	r4,r2
  809e18:	080cdc40 	call	80cdc4 <__fixdfsi>
  809e1c:	1009883a 	mov	r4,r2
  809e20:	d8800b15 	stw	r2,44(sp)
  809e24:	080cccc0 	call	80cccc <__floatsidf>
  809e28:	1823883a 	mov	r17,r3
  809e2c:	1009883a 	mov	r4,r2
  809e30:	d8800c15 	stw	r2,48(sp)
  809e34:	00effe74 	movhi	r3,49145
  809e38:	18c87ec4 	addi	r3,r3,8699
  809e3c:	00951034 	movhi	r2,21568
  809e40:	880b883a 	mov	r5,r17
  809e44:	180f883a 	mov	r7,r3
  809e48:	100d883a 	mov	r6,r2
  809e4c:	dc400d15 	stw	r17,52(sp)
  809e50:	080c5180 	call	80c518 <__muldf3>
  809e54:	180f883a 	mov	r7,r3
  809e58:	980b883a 	mov	r5,r19
  809e5c:	9009883a 	mov	r4,r18
  809e60:	100d883a 	mov	r6,r2
  809e64:	080c4a40 	call	80c4a4 <__adddf3>
  809e68:	d9000c17 	ldw	r4,48(sp)
  809e6c:	020698b4 	movhi	r8,6754
  809e70:	4218cc44 	addi	r8,r8,25393
  809e74:	024f7474 	movhi	r9,15825
  809e78:	4a6d1844 	addi	r9,r9,-19359
  809e7c:	880b883a 	mov	r5,r17
  809e80:	480f883a 	mov	r7,r9
  809e84:	400d883a 	mov	r6,r8
  809e88:	1025883a 	mov	r18,r2
  809e8c:	1827883a 	mov	r19,r3
  809e90:	080c5180 	call	80c518 <__muldf3>
  809e94:	d9000b17 	ldw	r4,44(sp)
  809e98:	100f883a 	mov	r7,r2
  809e9c:	1811883a 	mov	r8,r3
  809ea0:	008007c4 	movi	r2,31
  809ea4:	dc800e15 	stw	r18,56(sp)
  809ea8:	3821883a 	mov	r16,r7
  809eac:	dcc00f15 	stw	r19,60(sp)
  809eb0:	4023883a 	mov	r17,r8
  809eb4:	11010a0e 	bge	r2,r4,80a2e0 <__ieee754_rem_pio2+0x698>
  809eb8:	d9000e17 	ldw	r4,56(sp)
  809ebc:	d9400f17 	ldw	r5,60(sp)
  809ec0:	800d883a 	mov	r6,r16
  809ec4:	880f883a 	mov	r7,r17
  809ec8:	080c4240 	call	80c424 <__subdf3>
  809ecc:	1810d53a 	srli	r8,r3,20
  809ed0:	b02dd53a 	srai	r22,r22,20
  809ed4:	1009883a 	mov	r4,r2
  809ed8:	4201ffcc 	andi	r8,r8,2047
  809edc:	180b883a 	mov	r5,r3
  809ee0:	b211c83a 	sub	r8,r22,r8
  809ee4:	00800404 	movi	r2,16
  809ee8:	dd801015 	stw	r22,64(sp)
  809eec:	e1000015 	stw	r4,0(fp)
  809ef0:	e1400115 	stw	r5,4(fp)
  809ef4:	1200430e 	bge	r2,r8,80a004 <__ieee754_rem_pio2+0x3bc>
  809ef8:	d9000c17 	ldw	r4,48(sp)
  809efc:	d9400d17 	ldw	r5,52(sp)
  809f00:	00869834 	movhi	r2,6752
  809f04:	00cf7474 	movhi	r3,15825
  809f08:	18ed1844 	addi	r3,r3,-19359
  809f0c:	180f883a 	mov	r7,r3
  809f10:	100d883a 	mov	r6,r2
  809f14:	080c5180 	call	80c518 <__muldf3>
  809f18:	d9000e17 	ldw	r4,56(sp)
  809f1c:	d9400f17 	ldw	r5,60(sp)
  809f20:	100d883a 	mov	r6,r2
  809f24:	180f883a 	mov	r7,r3
  809f28:	1025883a 	mov	r18,r2
  809f2c:	1827883a 	mov	r19,r3
  809f30:	080c4240 	call	80c424 <__subdf3>
  809f34:	d9000c17 	ldw	r4,48(sp)
  809f38:	d9400d17 	ldw	r5,52(sp)
  809f3c:	058b80f4 	movhi	r22,11779
  809f40:	b59c1cc4 	addi	r22,r22,28787
  809f44:	05cee8f4 	movhi	r23,15267
  809f48:	bdc66284 	addi	r23,r23,6538
  809f4c:	b00d883a 	mov	r6,r22
  809f50:	b80f883a 	mov	r7,r23
  809f54:	d8801115 	stw	r2,68(sp)
  809f58:	d8c01215 	stw	r3,72(sp)
  809f5c:	d8800815 	stw	r2,32(sp)
  809f60:	080c5180 	call	80c518 <__muldf3>
  809f64:	d9001217 	ldw	r4,72(sp)
  809f68:	d9400f17 	ldw	r5,60(sp)
  809f6c:	d9800817 	ldw	r6,32(sp)
  809f70:	d9000915 	stw	r4,36(sp)
  809f74:	d9c01217 	ldw	r7,72(sp)
  809f78:	d9000e17 	ldw	r4,56(sp)
  809f7c:	1021883a 	mov	r16,r2
  809f80:	1823883a 	mov	r17,r3
  809f84:	080c4240 	call	80c424 <__subdf3>
  809f88:	180b883a 	mov	r5,r3
  809f8c:	900d883a 	mov	r6,r18
  809f90:	980f883a 	mov	r7,r19
  809f94:	1009883a 	mov	r4,r2
  809f98:	080c4240 	call	80c424 <__subdf3>
  809f9c:	180f883a 	mov	r7,r3
  809fa0:	880b883a 	mov	r5,r17
  809fa4:	8009883a 	mov	r4,r16
  809fa8:	100d883a 	mov	r6,r2
  809fac:	080c4240 	call	80c424 <__subdf3>
  809fb0:	d9000817 	ldw	r4,32(sp)
  809fb4:	d9401217 	ldw	r5,72(sp)
  809fb8:	180f883a 	mov	r7,r3
  809fbc:	100d883a 	mov	r6,r2
  809fc0:	1021883a 	mov	r16,r2
  809fc4:	1823883a 	mov	r17,r3
  809fc8:	080c4240 	call	80c424 <__subdf3>
  809fcc:	1810d53a 	srli	r8,r3,20
  809fd0:	1009883a 	mov	r4,r2
  809fd4:	d8801017 	ldw	r2,64(sp)
  809fd8:	4201ffcc 	andi	r8,r8,2047
  809fdc:	180b883a 	mov	r5,r3
  809fe0:	1211c83a 	sub	r8,r2,r8
  809fe4:	00800c44 	movi	r2,49
  809fe8:	e1000015 	stw	r4,0(fp)
  809fec:	e1400115 	stw	r5,4(fp)
  809ff0:	1200f016 	blt	r2,r8,80a3b4 <__ieee754_rem_pio2+0x76c>
  809ff4:	d8c00817 	ldw	r3,32(sp)
  809ff8:	d9001217 	ldw	r4,72(sp)
  809ffc:	d8c00e15 	stw	r3,56(sp)
  80a000:	d9000f15 	stw	r4,60(sp)
  80a004:	e1800017 	ldw	r6,0(fp)
  80a008:	e1c00117 	ldw	r7,4(fp)
  80a00c:	d9400f17 	ldw	r5,60(sp)
  80a010:	d9000e17 	ldw	r4,56(sp)
  80a014:	080c4240 	call	80c424 <__subdf3>
  80a018:	180b883a 	mov	r5,r3
  80a01c:	800d883a 	mov	r6,r16
  80a020:	880f883a 	mov	r7,r17
  80a024:	1009883a 	mov	r4,r2
  80a028:	080c4240 	call	80c424 <__subdf3>
  80a02c:	d9400a17 	ldw	r5,40(sp)
  80a030:	e0800215 	stw	r2,8(fp)
  80a034:	e1800204 	addi	r6,fp,8
  80a038:	30c00115 	stw	r3,4(r6)
  80a03c:	283f1b0e 	bge	r5,zero,809cac <__ieee754_rem_pio2+0x64>
  80a040:	e0c00117 	ldw	r3,4(fp)
  80a044:	d8800b17 	ldw	r2,44(sp)
  80a048:	18e0003c 	xorhi	r3,r3,32768
  80a04c:	0085c83a 	sub	r2,zero,r2
  80a050:	e0c00115 	stw	r3,4(fp)
  80a054:	d8800b15 	stw	r2,44(sp)
  80a058:	30800117 	ldw	r2,4(r6)
  80a05c:	10a0003c 	xorhi	r2,r2,32768
  80a060:	30800115 	stw	r2,4(r6)
  80a064:	003f1106 	br	809cac <__ieee754_rem_pio2+0x64>
  80a068:	04151034 	movhi	r16,21568
  80a06c:	044ffe74 	movhi	r17,16377
  80a070:	8c487ec4 	addi	r17,r17,8699
  80a074:	4809883a 	mov	r4,r9
  80a078:	800d883a 	mov	r6,r16
  80a07c:	880f883a 	mov	r7,r17
  80a080:	080c4a40 	call	80c4a4 <__adddf3>
  80a084:	1025883a 	mov	r18,r2
  80a088:	1827883a 	mov	r19,r3
  80a08c:	b440a326 	beq	r22,r17,80a31c <__ieee754_rem_pio2+0x6d4>
  80a090:	040698b4 	movhi	r16,6754
  80a094:	8418cc44 	addi	r16,r16,25393
  80a098:	044f7474 	movhi	r17,15825
  80a09c:	8c6d1844 	addi	r17,r17,-19359
  80a0a0:	1009883a 	mov	r4,r2
  80a0a4:	180b883a 	mov	r5,r3
  80a0a8:	800d883a 	mov	r6,r16
  80a0ac:	880f883a 	mov	r7,r17
  80a0b0:	080c4a40 	call	80c4a4 <__adddf3>
  80a0b4:	100d883a 	mov	r6,r2
  80a0b8:	9009883a 	mov	r4,r18
  80a0bc:	980b883a 	mov	r5,r19
  80a0c0:	180f883a 	mov	r7,r3
  80a0c4:	e0800015 	stw	r2,0(fp)
  80a0c8:	e0c00115 	stw	r3,4(fp)
  80a0cc:	080c4240 	call	80c424 <__subdf3>
  80a0d0:	1009883a 	mov	r4,r2
  80a0d4:	800d883a 	mov	r6,r16
  80a0d8:	880f883a 	mov	r7,r17
  80a0dc:	180b883a 	mov	r5,r3
  80a0e0:	080c4a40 	call	80c4a4 <__adddf3>
  80a0e4:	1009883a 	mov	r4,r2
  80a0e8:	00bfffc4 	movi	r2,-1
  80a0ec:	d8800b15 	stw	r2,44(sp)
  80a0f0:	e0c00315 	stw	r3,12(fp)
  80a0f4:	e1000215 	stw	r4,8(fp)
  80a0f8:	003eec06 	br	809cac <__ieee754_rem_pio2+0x64>
  80a0fc:	b005d53a 	srai	r2,r22,20
  80a100:	4821883a 	mov	r16,r9
  80a104:	05505c34 	movhi	r21,16752
  80a108:	15fefa84 	addi	r23,r2,-1046
  80a10c:	b826953a 	slli	r19,r23,20
  80a110:	0029883a 	mov	r20,zero
  80a114:	048000c4 	movi	r18,3
  80a118:	b4e7c83a 	sub	r19,r22,r19
  80a11c:	980b883a 	mov	r5,r19
  80a120:	080cdc40 	call	80cdc4 <__fixdfsi>
  80a124:	1009883a 	mov	r4,r2
  80a128:	080cccc0 	call	80cccc <__floatsidf>
  80a12c:	980b883a 	mov	r5,r19
  80a130:	8009883a 	mov	r4,r16
  80a134:	180f883a 	mov	r7,r3
  80a138:	100d883a 	mov	r6,r2
  80a13c:	d8800215 	stw	r2,8(sp)
  80a140:	d8c00315 	stw	r3,12(sp)
  80a144:	080c4240 	call	80c424 <__subdf3>
  80a148:	180b883a 	mov	r5,r3
  80a14c:	a00d883a 	mov	r6,r20
  80a150:	a80f883a 	mov	r7,r21
  80a154:	1009883a 	mov	r4,r2
  80a158:	080c5180 	call	80c518 <__muldf3>
  80a15c:	180b883a 	mov	r5,r3
  80a160:	1009883a 	mov	r4,r2
  80a164:	1823883a 	mov	r17,r3
  80a168:	1021883a 	mov	r16,r2
  80a16c:	080cdc40 	call	80cdc4 <__fixdfsi>
  80a170:	1009883a 	mov	r4,r2
  80a174:	080cccc0 	call	80cccc <__floatsidf>
  80a178:	880b883a 	mov	r5,r17
  80a17c:	8009883a 	mov	r4,r16
  80a180:	180f883a 	mov	r7,r3
  80a184:	100d883a 	mov	r6,r2
  80a188:	d8800415 	stw	r2,16(sp)
  80a18c:	d8c00515 	stw	r3,20(sp)
  80a190:	080c4240 	call	80c424 <__subdf3>
  80a194:	180b883a 	mov	r5,r3
  80a198:	000d883a 	mov	r6,zero
  80a19c:	a80f883a 	mov	r7,r21
  80a1a0:	1009883a 	mov	r4,r2
  80a1a4:	080c5180 	call	80c518 <__muldf3>
  80a1a8:	d8c00715 	stw	r3,28(sp)
  80a1ac:	d8800615 	stw	r2,24(sp)
  80a1b0:	00000106 	br	80a1b8 <__ieee754_rem_pio2+0x570>
  80a1b4:	8025883a 	mov	r18,r16
  80a1b8:	943fffc4 	addi	r16,r18,-1
  80a1bc:	800890fa 	slli	r4,r16,3
  80a1c0:	d9400204 	addi	r5,sp,8
  80a1c4:	000d883a 	mov	r6,zero
  80a1c8:	2149883a 	add	r4,r4,r5
  80a1cc:	20c00117 	ldw	r3,4(r4)
  80a1d0:	20800017 	ldw	r2,0(r4)
  80a1d4:	000f883a 	mov	r7,zero
  80a1d8:	180b883a 	mov	r5,r3
  80a1dc:	1009883a 	mov	r4,r2
  80a1e0:	080cb340 	call	80cb34 <__eqdf2>
  80a1e4:	103ff326 	beq	r2,zero,80a1b4 <__ieee754_rem_pio2+0x56c>
  80a1e8:	00800084 	movi	r2,2
  80a1ec:	00c020b4 	movhi	r3,130
  80a1f0:	18cbb704 	addi	r3,r3,11996
  80a1f4:	b80d883a 	mov	r6,r23
  80a1f8:	900f883a 	mov	r7,r18
  80a1fc:	d9000204 	addi	r4,sp,8
  80a200:	e00b883a 	mov	r5,fp
  80a204:	d8800015 	stw	r2,0(sp)
  80a208:	d8c00115 	stw	r3,4(sp)
  80a20c:	080a99c0 	call	80a99c <__kernel_rem_pio2>
  80a210:	d8800b15 	stw	r2,44(sp)
  80a214:	d8800a17 	ldw	r2,40(sp)
  80a218:	103ea40e 	bge	r2,zero,809cac <__ieee754_rem_pio2+0x64>
  80a21c:	e0800117 	ldw	r2,4(fp)
  80a220:	d8c00b17 	ldw	r3,44(sp)
  80a224:	e1000204 	addi	r4,fp,8
  80a228:	10a0003c 	xorhi	r2,r2,32768
  80a22c:	00c7c83a 	sub	r3,zero,r3
  80a230:	e0800115 	stw	r2,4(fp)
  80a234:	d8c00b15 	stw	r3,44(sp)
  80a238:	20c00117 	ldw	r3,4(r4)
  80a23c:	18e0003c 	xorhi	r3,r3,32768
  80a240:	20c00115 	stw	r3,4(r4)
  80a244:	003e9906 	br	809cac <__ieee754_rem_pio2+0x64>
  80a248:	00869834 	movhi	r2,6752
  80a24c:	00cf7474 	movhi	r3,15825
  80a250:	18ed1844 	addi	r3,r3,-19359
  80a254:	9009883a 	mov	r4,r18
  80a258:	980b883a 	mov	r5,r19
  80a25c:	180f883a 	mov	r7,r3
  80a260:	100d883a 	mov	r6,r2
  80a264:	080c4240 	call	80c424 <__subdf3>
  80a268:	048b80f4 	movhi	r18,11779
  80a26c:	949c1cc4 	addi	r18,r18,28787
  80a270:	04cee8f4 	movhi	r19,15267
  80a274:	9cc66284 	addi	r19,r19,6538
  80a278:	1009883a 	mov	r4,r2
  80a27c:	180b883a 	mov	r5,r3
  80a280:	900d883a 	mov	r6,r18
  80a284:	980f883a 	mov	r7,r19
  80a288:	1021883a 	mov	r16,r2
  80a28c:	1823883a 	mov	r17,r3
  80a290:	080c4240 	call	80c424 <__subdf3>
  80a294:	100d883a 	mov	r6,r2
  80a298:	8009883a 	mov	r4,r16
  80a29c:	880b883a 	mov	r5,r17
  80a2a0:	180f883a 	mov	r7,r3
  80a2a4:	e0800015 	stw	r2,0(fp)
  80a2a8:	e0c00115 	stw	r3,4(fp)
  80a2ac:	080c4240 	call	80c424 <__subdf3>
  80a2b0:	180b883a 	mov	r5,r3
  80a2b4:	1009883a 	mov	r4,r2
  80a2b8:	900d883a 	mov	r6,r18
  80a2bc:	980f883a 	mov	r7,r19
  80a2c0:	080c4240 	call	80c424 <__subdf3>
  80a2c4:	180b883a 	mov	r5,r3
  80a2c8:	1009883a 	mov	r4,r2
  80a2cc:	00c00044 	movi	r3,1
  80a2d0:	d8c00b15 	stw	r3,44(sp)
  80a2d4:	e1400315 	stw	r5,12(fp)
  80a2d8:	e1000215 	stw	r4,8(fp)
  80a2dc:	003e7306 	br	809cac <__ieee754_rem_pio2+0x64>
  80a2e0:	2105883a 	add	r2,r4,r4
  80a2e4:	1085883a 	add	r2,r2,r2
  80a2e8:	00c020b4 	movhi	r3,130
  80a2ec:	18cb9704 	addi	r3,r3,11868
  80a2f0:	10c5883a 	add	r2,r2,r3
  80a2f4:	113fff17 	ldw	r4,-4(r2)
  80a2f8:	b13eef26 	beq	r22,r4,809eb8 <__ieee754_rem_pio2+0x270>
  80a2fc:	980b883a 	mov	r5,r19
  80a300:	400f883a 	mov	r7,r8
  80a304:	9009883a 	mov	r4,r18
  80a308:	800d883a 	mov	r6,r16
  80a30c:	080c4240 	call	80c424 <__subdf3>
  80a310:	e0c00115 	stw	r3,4(fp)
  80a314:	e0800015 	stw	r2,0(fp)
  80a318:	003f3a06 	br	80a004 <__ieee754_rem_pio2+0x3bc>
  80a31c:	00869834 	movhi	r2,6752
  80a320:	00cf7474 	movhi	r3,15825
  80a324:	18ed1844 	addi	r3,r3,-19359
  80a328:	9009883a 	mov	r4,r18
  80a32c:	980b883a 	mov	r5,r19
  80a330:	180f883a 	mov	r7,r3
  80a334:	100d883a 	mov	r6,r2
  80a338:	080c4a40 	call	80c4a4 <__adddf3>
  80a33c:	048b80f4 	movhi	r18,11779
  80a340:	949c1cc4 	addi	r18,r18,28787
  80a344:	04cee8f4 	movhi	r19,15267
  80a348:	9cc66284 	addi	r19,r19,6538
  80a34c:	1009883a 	mov	r4,r2
  80a350:	180b883a 	mov	r5,r3
  80a354:	900d883a 	mov	r6,r18
  80a358:	980f883a 	mov	r7,r19
  80a35c:	1021883a 	mov	r16,r2
  80a360:	1823883a 	mov	r17,r3
  80a364:	080c4a40 	call	80c4a4 <__adddf3>
  80a368:	100d883a 	mov	r6,r2
  80a36c:	8009883a 	mov	r4,r16
  80a370:	880b883a 	mov	r5,r17
  80a374:	180f883a 	mov	r7,r3
  80a378:	e0800015 	stw	r2,0(fp)
  80a37c:	e0c00115 	stw	r3,4(fp)
  80a380:	080c4240 	call	80c424 <__subdf3>
  80a384:	180b883a 	mov	r5,r3
  80a388:	1009883a 	mov	r4,r2
  80a38c:	900d883a 	mov	r6,r18
  80a390:	980f883a 	mov	r7,r19
  80a394:	080c4a40 	call	80c4a4 <__adddf3>
  80a398:	180b883a 	mov	r5,r3
  80a39c:	1009883a 	mov	r4,r2
  80a3a0:	00ffffc4 	movi	r3,-1
  80a3a4:	d8c00b15 	stw	r3,44(sp)
  80a3a8:	e1400315 	stw	r5,12(fp)
  80a3ac:	e1000215 	stw	r4,8(fp)
  80a3b0:	003e3e06 	br	809cac <__ieee754_rem_pio2+0x64>
  80a3b4:	d9000c17 	ldw	r4,48(sp)
  80a3b8:	d9400d17 	ldw	r5,52(sp)
  80a3bc:	018b8034 	movhi	r6,11776
  80a3c0:	b80f883a 	mov	r7,r23
  80a3c4:	080c5180 	call	80c518 <__muldf3>
  80a3c8:	d9000817 	ldw	r4,32(sp)
  80a3cc:	d9401217 	ldw	r5,72(sp)
  80a3d0:	100d883a 	mov	r6,r2
  80a3d4:	180f883a 	mov	r7,r3
  80a3d8:	1025883a 	mov	r18,r2
  80a3dc:	1827883a 	mov	r19,r3
  80a3e0:	080c4240 	call	80c424 <__subdf3>
  80a3e4:	d9400d17 	ldw	r5,52(sp)
  80a3e8:	d9000c17 	ldw	r4,48(sp)
  80a3ec:	02094834 	movhi	r8,9504
  80a3f0:	42127044 	addi	r8,r8,18881
  80a3f4:	024e5f34 	movhi	r9,14716
  80a3f8:	4a60e684 	addi	r9,r9,-31846
  80a3fc:	480f883a 	mov	r7,r9
  80a400:	400d883a 	mov	r6,r8
  80a404:	182b883a 	mov	r21,r3
  80a408:	d8800e15 	stw	r2,56(sp)
  80a40c:	080c5180 	call	80c518 <__muldf3>
  80a410:	d9000817 	ldw	r4,32(sp)
  80a414:	d9401217 	ldw	r5,72(sp)
  80a418:	d9800e17 	ldw	r6,56(sp)
  80a41c:	a80f883a 	mov	r7,r21
  80a420:	1021883a 	mov	r16,r2
  80a424:	1823883a 	mov	r17,r3
  80a428:	dd400f15 	stw	r21,60(sp)
  80a42c:	080c4240 	call	80c424 <__subdf3>
  80a430:	180b883a 	mov	r5,r3
  80a434:	900d883a 	mov	r6,r18
  80a438:	980f883a 	mov	r7,r19
  80a43c:	1009883a 	mov	r4,r2
  80a440:	080c4240 	call	80c424 <__subdf3>
  80a444:	180f883a 	mov	r7,r3
  80a448:	880b883a 	mov	r5,r17
  80a44c:	8009883a 	mov	r4,r16
  80a450:	100d883a 	mov	r6,r2
  80a454:	080c4240 	call	80c424 <__subdf3>
  80a458:	d9000e17 	ldw	r4,56(sp)
  80a45c:	1021883a 	mov	r16,r2
  80a460:	1823883a 	mov	r17,r3
  80a464:	a80b883a 	mov	r5,r21
  80a468:	180f883a 	mov	r7,r3
  80a46c:	003fa606 	br	80a308 <__ieee754_rem_pio2+0x6c0>

0080a470 <__kernel_cos>:
  80a470:	defff104 	addi	sp,sp,-60
  80a474:	00a00034 	movhi	r2,32768
  80a478:	10bfffc4 	addi	r2,r2,-1
  80a47c:	dd800c15 	stw	r22,48(sp)
  80a480:	116c703a 	and	r22,r2,r5
  80a484:	0005883a 	mov	r2,zero
  80a488:	dd000a15 	stw	r20,40(sp)
  80a48c:	d8800215 	stw	r2,8(sp)
  80a490:	2029883a 	mov	r20,r4
  80a494:	008f9034 	movhi	r2,15936
  80a498:	10bfffc4 	addi	r2,r2,-1
  80a49c:	0009883a 	mov	r4,zero
  80a4a0:	dd400b15 	stw	r21,44(sp)
  80a4a4:	dfc00e15 	stw	ra,56(sp)
  80a4a8:	ddc00d15 	stw	r23,52(sp)
  80a4ac:	dcc00915 	stw	r19,36(sp)
  80a4b0:	dc800815 	stw	r18,32(sp)
  80a4b4:	dc400715 	stw	r17,28(sp)
  80a4b8:	dc000615 	stw	r16,24(sp)
  80a4bc:	282b883a 	mov	r21,r5
  80a4c0:	d9800415 	stw	r6,16(sp)
  80a4c4:	d9c00515 	stw	r7,20(sp)
  80a4c8:	d9000315 	stw	r4,12(sp)
  80a4cc:	15809216 	blt	r2,r22,80a718 <__kernel_cos+0x2a8>
  80a4d0:	a009883a 	mov	r4,r20
  80a4d4:	080cdc40 	call	80cdc4 <__fixdfsi>
  80a4d8:	10011c26 	beq	r2,zero,80a94c <__kernel_cos+0x4dc>
  80a4dc:	a009883a 	mov	r4,r20
  80a4e0:	a80b883a 	mov	r5,r21
  80a4e4:	a00d883a 	mov	r6,r20
  80a4e8:	a80f883a 	mov	r7,r21
  80a4ec:	080c5180 	call	80c518 <__muldf3>
  80a4f0:	1021883a 	mov	r16,r2
  80a4f4:	1823883a 	mov	r17,r3
  80a4f8:	1025883a 	mov	r18,r2
  80a4fc:	1827883a 	mov	r19,r3
  80a500:	00afa234 	movhi	r2,48776
  80a504:	108e3504 	addi	r2,r2,14548
  80a508:	00ef6a74 	movhi	r3,48553
  80a50c:	18feba44 	addi	r3,r3,-1303
  80a510:	8009883a 	mov	r4,r16
  80a514:	880b883a 	mov	r5,r17
  80a518:	180f883a 	mov	r7,r3
  80a51c:	100d883a 	mov	r6,r2
  80a520:	080c5180 	call	80c518 <__muldf3>
  80a524:	022f6d74 	movhi	r8,48565
  80a528:	422c7104 	addi	r8,r8,-20028
  80a52c:	024f88b4 	movhi	r9,15906
  80a530:	4a7ba784 	addi	r9,r9,-4450
  80a534:	480f883a 	mov	r7,r9
  80a538:	400d883a 	mov	r6,r8
  80a53c:	180b883a 	mov	r5,r3
  80a540:	1009883a 	mov	r4,r2
  80a544:	080c4a40 	call	80c4a4 <__adddf3>
  80a548:	180f883a 	mov	r7,r3
  80a54c:	8009883a 	mov	r4,r16
  80a550:	880b883a 	mov	r5,r17
  80a554:	100d883a 	mov	r6,r2
  80a558:	080c5180 	call	80c518 <__muldf3>
  80a55c:	02202734 	movhi	r8,32924
  80a560:	4214ab44 	addi	r8,r8,21165
  80a564:	024fa4b4 	movhi	r9,16018
  80a568:	4a5f93c4 	addi	r9,r9,32335
  80a56c:	480f883a 	mov	r7,r9
  80a570:	400d883a 	mov	r6,r8
  80a574:	180b883a 	mov	r5,r3
  80a578:	1009883a 	mov	r4,r2
  80a57c:	080c4240 	call	80c424 <__subdf3>
  80a580:	180f883a 	mov	r7,r3
  80a584:	8009883a 	mov	r4,r16
  80a588:	880b883a 	mov	r5,r17
  80a58c:	100d883a 	mov	r6,r2
  80a590:	080c5180 	call	80c518 <__muldf3>
  80a594:	020672f4 	movhi	r8,6603
  80a598:	42056404 	addi	r8,r8,5520
  80a59c:	024fbeb4 	movhi	r9,16122
  80a5a0:	4a406804 	addi	r9,r9,416
  80a5a4:	480f883a 	mov	r7,r9
  80a5a8:	400d883a 	mov	r6,r8
  80a5ac:	180b883a 	mov	r5,r3
  80a5b0:	1009883a 	mov	r4,r2
  80a5b4:	080c4a40 	call	80c4a4 <__adddf3>
  80a5b8:	180f883a 	mov	r7,r3
  80a5bc:	8009883a 	mov	r4,r16
  80a5c0:	880b883a 	mov	r5,r17
  80a5c4:	100d883a 	mov	r6,r2
  80a5c8:	080c5180 	call	80c518 <__muldf3>
  80a5cc:	0205b074 	movhi	r8,5825
  80a5d0:	42145dc4 	addi	r8,r8,20855
  80a5d4:	024fd5f4 	movhi	r9,16215
  80a5d8:	4a705b04 	addi	r9,r9,-16020
  80a5dc:	480f883a 	mov	r7,r9
  80a5e0:	400d883a 	mov	r6,r8
  80a5e4:	180b883a 	mov	r5,r3
  80a5e8:	1009883a 	mov	r4,r2
  80a5ec:	080c4240 	call	80c424 <__subdf3>
  80a5f0:	180f883a 	mov	r7,r3
  80a5f4:	8009883a 	mov	r4,r16
  80a5f8:	880b883a 	mov	r5,r17
  80a5fc:	100d883a 	mov	r6,r2
  80a600:	080c5180 	call	80c518 <__muldf3>
  80a604:	02155574 	movhi	r8,21845
  80a608:	42155304 	addi	r8,r8,21836
  80a60c:	024fe974 	movhi	r9,16293
  80a610:	4a555544 	addi	r9,r9,21845
  80a614:	480f883a 	mov	r7,r9
  80a618:	400d883a 	mov	r6,r8
  80a61c:	180b883a 	mov	r5,r3
  80a620:	1009883a 	mov	r4,r2
  80a624:	080c4a40 	call	80c4a4 <__adddf3>
  80a628:	180f883a 	mov	r7,r3
  80a62c:	880b883a 	mov	r5,r17
  80a630:	8009883a 	mov	r4,r16
  80a634:	100d883a 	mov	r6,r2
  80a638:	080c5180 	call	80c518 <__muldf3>
  80a63c:	1021883a 	mov	r16,r2
  80a640:	1823883a 	mov	r17,r3
  80a644:	0005883a 	mov	r2,zero
  80a648:	00cff834 	movhi	r3,16352
  80a64c:	9009883a 	mov	r4,r18
  80a650:	980b883a 	mov	r5,r19
  80a654:	180f883a 	mov	r7,r3
  80a658:	100d883a 	mov	r6,r2
  80a65c:	080c5180 	call	80c518 <__muldf3>
  80a660:	980b883a 	mov	r5,r19
  80a664:	880f883a 	mov	r7,r17
  80a668:	9009883a 	mov	r4,r18
  80a66c:	800d883a 	mov	r6,r16
  80a670:	1025883a 	mov	r18,r2
  80a674:	1827883a 	mov	r19,r3
  80a678:	080c5180 	call	80c518 <__muldf3>
  80a67c:	d9c00517 	ldw	r7,20(sp)
  80a680:	d9800417 	ldw	r6,16(sp)
  80a684:	a80b883a 	mov	r5,r21
  80a688:	a009883a 	mov	r4,r20
  80a68c:	1021883a 	mov	r16,r2
  80a690:	1823883a 	mov	r17,r3
  80a694:	080c5180 	call	80c518 <__muldf3>
  80a698:	180f883a 	mov	r7,r3
  80a69c:	880b883a 	mov	r5,r17
  80a6a0:	8009883a 	mov	r4,r16
  80a6a4:	100d883a 	mov	r6,r2
  80a6a8:	080c4240 	call	80c424 <__subdf3>
  80a6ac:	180f883a 	mov	r7,r3
  80a6b0:	980b883a 	mov	r5,r19
  80a6b4:	9009883a 	mov	r4,r18
  80a6b8:	100d883a 	mov	r6,r2
  80a6bc:	080c4240 	call	80c424 <__subdf3>
  80a6c0:	0011883a 	mov	r8,zero
  80a6c4:	024ffc34 	movhi	r9,16368
  80a6c8:	480b883a 	mov	r5,r9
  80a6cc:	180f883a 	mov	r7,r3
  80a6d0:	4009883a 	mov	r4,r8
  80a6d4:	100d883a 	mov	r6,r2
  80a6d8:	080c4240 	call	80c424 <__subdf3>
  80a6dc:	100d883a 	mov	r6,r2
  80a6e0:	180f883a 	mov	r7,r3
  80a6e4:	3005883a 	mov	r2,r6
  80a6e8:	3807883a 	mov	r3,r7
  80a6ec:	dfc00e17 	ldw	ra,56(sp)
  80a6f0:	ddc00d17 	ldw	r23,52(sp)
  80a6f4:	dd800c17 	ldw	r22,48(sp)
  80a6f8:	dd400b17 	ldw	r21,44(sp)
  80a6fc:	dd000a17 	ldw	r20,40(sp)
  80a700:	dcc00917 	ldw	r19,36(sp)
  80a704:	dc800817 	ldw	r18,32(sp)
  80a708:	dc400717 	ldw	r17,28(sp)
  80a70c:	dc000617 	ldw	r16,24(sp)
  80a710:	dec00f04 	addi	sp,sp,60
  80a714:	f800283a 	ret
  80a718:	280f883a 	mov	r7,r5
  80a71c:	a009883a 	mov	r4,r20
  80a720:	a00d883a 	mov	r6,r20
  80a724:	080c5180 	call	80c518 <__muldf3>
  80a728:	1021883a 	mov	r16,r2
  80a72c:	1823883a 	mov	r17,r3
  80a730:	1025883a 	mov	r18,r2
  80a734:	1827883a 	mov	r19,r3
  80a738:	00afa234 	movhi	r2,48776
  80a73c:	108e3504 	addi	r2,r2,14548
  80a740:	00ef6a74 	movhi	r3,48553
  80a744:	18feba44 	addi	r3,r3,-1303
  80a748:	8009883a 	mov	r4,r16
  80a74c:	880b883a 	mov	r5,r17
  80a750:	180f883a 	mov	r7,r3
  80a754:	100d883a 	mov	r6,r2
  80a758:	080c5180 	call	80c518 <__muldf3>
  80a75c:	022f6d74 	movhi	r8,48565
  80a760:	422c7104 	addi	r8,r8,-20028
  80a764:	024f88b4 	movhi	r9,15906
  80a768:	4a7ba784 	addi	r9,r9,-4450
  80a76c:	480f883a 	mov	r7,r9
  80a770:	400d883a 	mov	r6,r8
  80a774:	180b883a 	mov	r5,r3
  80a778:	1009883a 	mov	r4,r2
  80a77c:	080c4a40 	call	80c4a4 <__adddf3>
  80a780:	180f883a 	mov	r7,r3
  80a784:	8009883a 	mov	r4,r16
  80a788:	880b883a 	mov	r5,r17
  80a78c:	100d883a 	mov	r6,r2
  80a790:	080c5180 	call	80c518 <__muldf3>
  80a794:	02202734 	movhi	r8,32924
  80a798:	4214ab44 	addi	r8,r8,21165
  80a79c:	024fa4b4 	movhi	r9,16018
  80a7a0:	4a5f93c4 	addi	r9,r9,32335
  80a7a4:	480f883a 	mov	r7,r9
  80a7a8:	400d883a 	mov	r6,r8
  80a7ac:	180b883a 	mov	r5,r3
  80a7b0:	1009883a 	mov	r4,r2
  80a7b4:	080c4240 	call	80c424 <__subdf3>
  80a7b8:	180f883a 	mov	r7,r3
  80a7bc:	8009883a 	mov	r4,r16
  80a7c0:	880b883a 	mov	r5,r17
  80a7c4:	100d883a 	mov	r6,r2
  80a7c8:	080c5180 	call	80c518 <__muldf3>
  80a7cc:	020672f4 	movhi	r8,6603
  80a7d0:	42056404 	addi	r8,r8,5520
  80a7d4:	024fbeb4 	movhi	r9,16122
  80a7d8:	4a406804 	addi	r9,r9,416
  80a7dc:	480f883a 	mov	r7,r9
  80a7e0:	400d883a 	mov	r6,r8
  80a7e4:	180b883a 	mov	r5,r3
  80a7e8:	1009883a 	mov	r4,r2
  80a7ec:	080c4a40 	call	80c4a4 <__adddf3>
  80a7f0:	180f883a 	mov	r7,r3
  80a7f4:	8009883a 	mov	r4,r16
  80a7f8:	880b883a 	mov	r5,r17
  80a7fc:	100d883a 	mov	r6,r2
  80a800:	080c5180 	call	80c518 <__muldf3>
  80a804:	0205b074 	movhi	r8,5825
  80a808:	42145dc4 	addi	r8,r8,20855
  80a80c:	024fd5f4 	movhi	r9,16215
  80a810:	4a705b04 	addi	r9,r9,-16020
  80a814:	480f883a 	mov	r7,r9
  80a818:	400d883a 	mov	r6,r8
  80a81c:	180b883a 	mov	r5,r3
  80a820:	1009883a 	mov	r4,r2
  80a824:	080c4240 	call	80c424 <__subdf3>
  80a828:	180f883a 	mov	r7,r3
  80a82c:	8009883a 	mov	r4,r16
  80a830:	880b883a 	mov	r5,r17
  80a834:	100d883a 	mov	r6,r2
  80a838:	080c5180 	call	80c518 <__muldf3>
  80a83c:	02155574 	movhi	r8,21845
  80a840:	42155304 	addi	r8,r8,21836
  80a844:	024fe974 	movhi	r9,16293
  80a848:	4a555544 	addi	r9,r9,21845
  80a84c:	480f883a 	mov	r7,r9
  80a850:	400d883a 	mov	r6,r8
  80a854:	180b883a 	mov	r5,r3
  80a858:	1009883a 	mov	r4,r2
  80a85c:	080c4a40 	call	80c4a4 <__adddf3>
  80a860:	180f883a 	mov	r7,r3
  80a864:	880b883a 	mov	r5,r17
  80a868:	8009883a 	mov	r4,r16
  80a86c:	100d883a 	mov	r6,r2
  80a870:	080c5180 	call	80c518 <__muldf3>
  80a874:	1021883a 	mov	r16,r2
  80a878:	008ff4f4 	movhi	r2,16339
  80a87c:	108ccc84 	addi	r2,r2,13106
  80a880:	1823883a 	mov	r17,r3
  80a884:	15bf6f0e 	bge	r2,r22,80a644 <__kernel_cos+0x1d4>
  80a888:	008ffa74 	movhi	r2,16361
  80a88c:	1580320e 	bge	r2,r22,80a958 <__kernel_cos+0x4e8>
  80a890:	0005883a 	mov	r2,zero
  80a894:	010ff9f4 	movhi	r4,16359
  80a898:	002d883a 	mov	r22,zero
  80a89c:	d8800015 	stw	r2,0(sp)
  80a8a0:	05cff4b4 	movhi	r23,16338
  80a8a4:	d9000115 	stw	r4,4(sp)
  80a8a8:	0005883a 	mov	r2,zero
  80a8ac:	00cff834 	movhi	r3,16352
  80a8b0:	9009883a 	mov	r4,r18
  80a8b4:	980b883a 	mov	r5,r19
  80a8b8:	180f883a 	mov	r7,r3
  80a8bc:	100d883a 	mov	r6,r2
  80a8c0:	080c5180 	call	80c518 <__muldf3>
  80a8c4:	180b883a 	mov	r5,r3
  80a8c8:	b80f883a 	mov	r7,r23
  80a8cc:	1009883a 	mov	r4,r2
  80a8d0:	b00d883a 	mov	r6,r22
  80a8d4:	080c4240 	call	80c424 <__subdf3>
  80a8d8:	980b883a 	mov	r5,r19
  80a8dc:	880f883a 	mov	r7,r17
  80a8e0:	9009883a 	mov	r4,r18
  80a8e4:	800d883a 	mov	r6,r16
  80a8e8:	1025883a 	mov	r18,r2
  80a8ec:	1827883a 	mov	r19,r3
  80a8f0:	080c5180 	call	80c518 <__muldf3>
  80a8f4:	d9c00517 	ldw	r7,20(sp)
  80a8f8:	d9800417 	ldw	r6,16(sp)
  80a8fc:	a80b883a 	mov	r5,r21
  80a900:	a009883a 	mov	r4,r20
  80a904:	1021883a 	mov	r16,r2
  80a908:	1823883a 	mov	r17,r3
  80a90c:	080c5180 	call	80c518 <__muldf3>
  80a910:	180f883a 	mov	r7,r3
  80a914:	880b883a 	mov	r5,r17
  80a918:	8009883a 	mov	r4,r16
  80a91c:	100d883a 	mov	r6,r2
  80a920:	080c4240 	call	80c424 <__subdf3>
  80a924:	180f883a 	mov	r7,r3
  80a928:	980b883a 	mov	r5,r19
  80a92c:	9009883a 	mov	r4,r18
  80a930:	100d883a 	mov	r6,r2
  80a934:	080c4240 	call	80c424 <__subdf3>
  80a938:	d9400117 	ldw	r5,4(sp)
  80a93c:	d9000017 	ldw	r4,0(sp)
  80a940:	180f883a 	mov	r7,r3
  80a944:	100d883a 	mov	r6,r2
  80a948:	003f6306 	br	80a6d8 <__kernel_cos+0x268>
  80a94c:	000d883a 	mov	r6,zero
  80a950:	01cffc34 	movhi	r7,16368
  80a954:	003f6306 	br	80a6e4 <__kernel_cos+0x274>
  80a958:	00bff834 	movhi	r2,65504
  80a95c:	b0ad883a 	add	r22,r22,r2
  80a960:	dd800315 	stw	r22,12(sp)
  80a964:	d9000317 	ldw	r4,12(sp)
  80a968:	0005883a 	mov	r2,zero
  80a96c:	00cffc34 	movhi	r3,16368
  80a970:	002d883a 	mov	r22,zero
  80a974:	200f883a 	mov	r7,r4
  80a978:	202f883a 	mov	r23,r4
  80a97c:	180b883a 	mov	r5,r3
  80a980:	1009883a 	mov	r4,r2
  80a984:	b00d883a 	mov	r6,r22
  80a988:	d8800215 	stw	r2,8(sp)
  80a98c:	080c4240 	call	80c424 <__subdf3>
  80a990:	d8800015 	stw	r2,0(sp)
  80a994:	d8c00115 	stw	r3,4(sp)
  80a998:	003fc306 	br	80a8a8 <__kernel_cos+0x438>

0080a99c <__kernel_rem_pio2>:
  80a99c:	deff5304 	addi	sp,sp,-692
  80a9a0:	d880ad17 	ldw	r2,692(sp)
  80a9a4:	d9009615 	stw	r4,600(sp)
  80a9a8:	d9409715 	stw	r5,604(sp)
  80a9ac:	1087883a 	add	r3,r2,r2
  80a9b0:	18c7883a 	add	r3,r3,r3
  80a9b4:	008020b4 	movhi	r2,130
  80a9b8:	108bf904 	addi	r2,r2,12260
  80a9bc:	1887883a 	add	r3,r3,r2
  80a9c0:	18c00017 	ldw	r3,0(r3)
  80a9c4:	313fff44 	addi	r4,r6,-3
  80a9c8:	01400604 	movi	r5,24
  80a9cc:	df00ab15 	stw	fp,684(sp)
  80a9d0:	dc00a315 	stw	r16,652(sp)
  80a9d4:	d8c09515 	stw	r3,596(sp)
  80a9d8:	dfc0ac15 	stw	ra,688(sp)
  80a9dc:	ddc0aa15 	stw	r23,680(sp)
  80a9e0:	dd80a915 	stw	r22,676(sp)
  80a9e4:	dd40a815 	stw	r21,672(sp)
  80a9e8:	dd00a715 	stw	r20,668(sp)
  80a9ec:	dcc0a615 	stw	r19,664(sp)
  80a9f0:	dc80a515 	stw	r18,660(sp)
  80a9f4:	dc40a415 	stw	r17,656(sp)
  80a9f8:	3021883a 	mov	r16,r6
  80a9fc:	d9c09815 	stw	r7,608(sp)
  80aa00:	080cf180 	call	80cf18 <__divsi3>
  80aa04:	d8c09817 	ldw	r3,608(sp)
  80aa08:	d8808c15 	stw	r2,560(sp)
  80aa0c:	1f3fffc4 	addi	fp,r3,-1
  80aa10:	10031816 	blt	r2,zero,80b674 <__kernel_rem_pio2+0xcd8>
  80aa14:	d9008c17 	ldw	r4,560(sp)
  80aa18:	d9409517 	ldw	r5,596(sp)
  80aa1c:	20bffa24 	muli	r2,r4,-24
  80aa20:	2f07883a 	add	r3,r5,fp
  80aa24:	8085883a 	add	r2,r16,r2
  80aa28:	10bffa04 	addi	r2,r2,-24
  80aa2c:	d8809315 	stw	r2,588(sp)
  80aa30:	18001516 	blt	r3,zero,80aa88 <__kernel_rem_pio2+0xec>
  80aa34:	2721c83a 	sub	r16,r4,fp
  80aa38:	d980ae17 	ldw	r6,696(sp)
  80aa3c:	8405883a 	add	r2,r16,r16
  80aa40:	1085883a 	add	r2,r2,r2
  80aa44:	30a3883a 	add	r17,r6,r2
  80aa48:	80e7883a 	add	r19,r16,r3
  80aa4c:	dc801404 	addi	r18,sp,80
  80aa50:	00000106 	br	80aa58 <__kernel_rem_pio2+0xbc>
  80aa54:	84000044 	addi	r16,r16,1
  80aa58:	0009883a 	mov	r4,zero
  80aa5c:	000b883a 	mov	r5,zero
  80aa60:	80000416 	blt	r16,zero,80aa74 <__kernel_rem_pio2+0xd8>
  80aa64:	89000017 	ldw	r4,0(r17)
  80aa68:	080cccc0 	call	80cccc <__floatsidf>
  80aa6c:	1009883a 	mov	r4,r2
  80aa70:	180b883a 	mov	r5,r3
  80aa74:	91400115 	stw	r5,4(r18)
  80aa78:	91000015 	stw	r4,0(r18)
  80aa7c:	8c400104 	addi	r17,r17,4
  80aa80:	94800204 	addi	r18,r18,8
  80aa84:	84fff31e 	bne	r16,r19,80aa54 <__kernel_rem_pio2+0xb8>
  80aa88:	d9c09517 	ldw	r7,596(sp)
  80aa8c:	38002416 	blt	r7,zero,80ab20 <__kernel_rem_pio2+0x184>
  80aa90:	da809817 	ldw	r10,608(sp)
  80aa94:	e029883a 	mov	r20,fp
  80aa98:	dd406404 	addi	r21,sp,400
  80aa9c:	3aaf883a 	add	r23,r7,r10
  80aaa0:	e02c403a 	cmpge	r22,fp,zero
  80aaa4:	b0023e26 	beq	r22,zero,80b3a0 <__kernel_rem_pio2+0xa04>
  80aaa8:	dcc09617 	ldw	r19,600(sp)
  80aaac:	0021883a 	mov	r16,zero
  80aab0:	0025883a 	mov	r18,zero
  80aab4:	0023883a 	mov	r17,zero
  80aab8:	a489c83a 	sub	r4,r20,r18
  80aabc:	200890fa 	slli	r4,r4,3
  80aac0:	99800017 	ldw	r6,0(r19)
  80aac4:	99c00117 	ldw	r7,4(r19)
  80aac8:	26c9883a 	add	r4,r4,sp
  80aacc:	20c01517 	ldw	r3,84(r4)
  80aad0:	20801417 	ldw	r2,80(r4)
  80aad4:	94800044 	addi	r18,r18,1
  80aad8:	180b883a 	mov	r5,r3
  80aadc:	1009883a 	mov	r4,r2
  80aae0:	080c5180 	call	80c518 <__muldf3>
  80aae4:	180f883a 	mov	r7,r3
  80aae8:	880b883a 	mov	r5,r17
  80aaec:	8009883a 	mov	r4,r16
  80aaf0:	100d883a 	mov	r6,r2
  80aaf4:	080c4a40 	call	80c4a4 <__adddf3>
  80aaf8:	1021883a 	mov	r16,r2
  80aafc:	d8809817 	ldw	r2,608(sp)
  80ab00:	9cc00204 	addi	r19,r19,8
  80ab04:	1823883a 	mov	r17,r3
  80ab08:	14bfeb1e 	bne	r2,r18,80aab8 <__kernel_rem_pio2+0x11c>
  80ab0c:	a5000044 	addi	r20,r20,1
  80ab10:	ac400115 	stw	r17,4(r21)
  80ab14:	ac000015 	stw	r16,0(r21)
  80ab18:	ad400204 	addi	r21,r21,8
  80ab1c:	a5ffe11e 	bne	r20,r23,80aaa4 <__kernel_rem_pio2+0x108>
  80ab20:	d8c09517 	ldw	r3,596(sp)
  80ab24:	d9409317 	ldw	r5,588(sp)
  80ab28:	e038403a 	cmpge	fp,fp,zero
  80ab2c:	d8c08d15 	stw	r3,564(sp)
  80ab30:	d9008d17 	ldw	r4,564(sp)
  80ab34:	18c5883a 	add	r2,r3,r3
  80ab38:	10c7883a 	add	r3,r2,r3
  80ab3c:	1907883a 	add	r3,r3,r4
  80ab40:	1085883a 	add	r2,r2,r2
  80ab44:	16c5883a 	add	r2,r2,sp
  80ab48:	1ec7883a 	add	r3,r3,sp
  80ab4c:	29400050 	cmplti	r5,r5,1
  80ab50:	df00a215 	stw	fp,648(sp)
  80ab54:	d8809915 	stw	r2,612(sp)
  80ab58:	d8c0a115 	stw	r3,644(sp)
  80ab5c:	d940a015 	stw	r5,640(sp)
  80ab60:	d9808d17 	ldw	r6,564(sp)
  80ab64:	300490fa 	slli	r2,r6,3
  80ab68:	16c5883a 	add	r2,r2,sp
  80ab6c:	15006417 	ldw	r20,400(r2)
  80ab70:	15406517 	ldw	r21,404(r2)
  80ab74:	01802e0e 	bge	zero,r6,80ac30 <__kernel_rem_pio2+0x294>
  80ab78:	102d883a 	mov	r22,r2
  80ab7c:	302f883a 	mov	r23,r6
  80ab80:	d839883a 	mov	fp,sp
  80ab84:	0005883a 	mov	r2,zero
  80ab88:	00cf9c34 	movhi	r3,15984
  80ab8c:	180f883a 	mov	r7,r3
  80ab90:	100d883a 	mov	r6,r2
  80ab94:	a009883a 	mov	r4,r20
  80ab98:	a80b883a 	mov	r5,r21
  80ab9c:	080c5180 	call	80c518 <__muldf3>
  80aba0:	180b883a 	mov	r5,r3
  80aba4:	1009883a 	mov	r4,r2
  80aba8:	080cdc40 	call	80cdc4 <__fixdfsi>
  80abac:	1009883a 	mov	r4,r2
  80abb0:	080cccc0 	call	80cccc <__floatsidf>
  80abb4:	1021883a 	mov	r16,r2
  80abb8:	1823883a 	mov	r17,r3
  80abbc:	0005883a 	mov	r2,zero
  80abc0:	00f05c34 	movhi	r3,49520
  80abc4:	180f883a 	mov	r7,r3
  80abc8:	8009883a 	mov	r4,r16
  80abcc:	880b883a 	mov	r5,r17
  80abd0:	100d883a 	mov	r6,r2
  80abd4:	080c5180 	call	80c518 <__muldf3>
  80abd8:	180b883a 	mov	r5,r3
  80abdc:	a80f883a 	mov	r7,r21
  80abe0:	a00d883a 	mov	r6,r20
  80abe4:	1009883a 	mov	r4,r2
  80abe8:	080c4a40 	call	80c4a4 <__adddf3>
  80abec:	180b883a 	mov	r5,r3
  80abf0:	1009883a 	mov	r4,r2
  80abf4:	080cdc40 	call	80cdc4 <__fixdfsi>
  80abf8:	e0800015 	stw	r2,0(fp)
  80abfc:	b5bffe04 	addi	r22,r22,-8
  80ac00:	b0806417 	ldw	r2,400(r22)
  80ac04:	b0c06517 	ldw	r3,404(r22)
  80ac08:	8009883a 	mov	r4,r16
  80ac0c:	880b883a 	mov	r5,r17
  80ac10:	180f883a 	mov	r7,r3
  80ac14:	100d883a 	mov	r6,r2
  80ac18:	080c4a40 	call	80c4a4 <__adddf3>
  80ac1c:	bdffffc4 	addi	r23,r23,-1
  80ac20:	e7000104 	addi	fp,fp,4
  80ac24:	1029883a 	mov	r20,r2
  80ac28:	182b883a 	mov	r21,r3
  80ac2c:	b83fd51e 	bne	r23,zero,80ab84 <__kernel_rem_pio2+0x1e8>
  80ac30:	d9809317 	ldw	r6,588(sp)
  80ac34:	a80b883a 	mov	r5,r21
  80ac38:	a009883a 	mov	r4,r20
  80ac3c:	080bd6c0 	call	80bd6c <scalbn>
  80ac40:	0009883a 	mov	r4,zero
  80ac44:	014ff034 	movhi	r5,16320
  80ac48:	280f883a 	mov	r7,r5
  80ac4c:	200d883a 	mov	r6,r4
  80ac50:	180b883a 	mov	r5,r3
  80ac54:	1009883a 	mov	r4,r2
  80ac58:	1021883a 	mov	r16,r2
  80ac5c:	1823883a 	mov	r17,r3
  80ac60:	080c5180 	call	80c518 <__muldf3>
  80ac64:	180b883a 	mov	r5,r3
  80ac68:	1009883a 	mov	r4,r2
  80ac6c:	080bb480 	call	80bb48 <floor>
  80ac70:	0011883a 	mov	r8,zero
  80ac74:	02700834 	movhi	r9,49184
  80ac78:	480f883a 	mov	r7,r9
  80ac7c:	400d883a 	mov	r6,r8
  80ac80:	180b883a 	mov	r5,r3
  80ac84:	1009883a 	mov	r4,r2
  80ac88:	080c5180 	call	80c518 <__muldf3>
  80ac8c:	180f883a 	mov	r7,r3
  80ac90:	100d883a 	mov	r6,r2
  80ac94:	880b883a 	mov	r5,r17
  80ac98:	8009883a 	mov	r4,r16
  80ac9c:	080c4a40 	call	80c4a4 <__adddf3>
  80aca0:	180b883a 	mov	r5,r3
  80aca4:	1009883a 	mov	r4,r2
  80aca8:	1823883a 	mov	r17,r3
  80acac:	1021883a 	mov	r16,r2
  80acb0:	080cdc40 	call	80cdc4 <__fixdfsi>
  80acb4:	1009883a 	mov	r4,r2
  80acb8:	d8809415 	stw	r2,592(sp)
  80acbc:	080cccc0 	call	80cccc <__floatsidf>
  80acc0:	880b883a 	mov	r5,r17
  80acc4:	8009883a 	mov	r4,r16
  80acc8:	180f883a 	mov	r7,r3
  80accc:	100d883a 	mov	r6,r2
  80acd0:	080c4240 	call	80c424 <__subdf3>
  80acd4:	d9c0a017 	ldw	r7,640(sp)
  80acd8:	180d883a 	mov	r6,r3
  80acdc:	1021883a 	mov	r16,r2
  80ace0:	1823883a 	mov	r17,r3
  80ace4:	38017d1e 	bne	r7,zero,80b2dc <__kernel_rem_pio2+0x940>
  80ace8:	da808d17 	ldw	r10,564(sp)
  80acec:	d9009317 	ldw	r4,588(sp)
  80acf0:	00c00604 	movi	r3,24
  80acf4:	50bfffc4 	addi	r2,r10,-1
  80acf8:	1085883a 	add	r2,r2,r2
  80acfc:	1085883a 	add	r2,r2,r2
  80ad00:	16c5883a 	add	r2,r2,sp
  80ad04:	11400017 	ldw	r5,0(r2)
  80ad08:	1907c83a 	sub	r3,r3,r4
  80ad0c:	d9c09317 	ldw	r7,588(sp)
  80ad10:	28cdd83a 	sra	r6,r5,r3
  80ad14:	010005c4 	movi	r4,23
  80ad18:	da809417 	ldw	r10,592(sp)
  80ad1c:	30c6983a 	sll	r3,r6,r3
  80ad20:	21c9c83a 	sub	r4,r4,r7
  80ad24:	5195883a 	add	r10,r10,r6
  80ad28:	28cbc83a 	sub	r5,r5,r3
  80ad2c:	2909d83a 	sra	r4,r5,r4
  80ad30:	da809415 	stw	r10,592(sp)
  80ad34:	11400015 	stw	r5,0(r2)
  80ad38:	d9009215 	stw	r4,584(sp)
  80ad3c:	d9409217 	ldw	r5,584(sp)
  80ad40:	0140270e 	bge	zero,r5,80ade0 <__kernel_rem_pio2+0x444>
  80ad44:	d9809417 	ldw	r6,592(sp)
  80ad48:	d9c08d17 	ldw	r7,564(sp)
  80ad4c:	31800044 	addi	r6,r6,1
  80ad50:	d9809415 	stw	r6,592(sp)
  80ad54:	01c1a50e 	bge	zero,r7,80b3ec <__kernel_rem_pio2+0xa50>
  80ad58:	002d883a 	mov	r22,zero
  80ad5c:	000b883a 	mov	r5,zero
  80ad60:	d809883a 	mov	r4,sp
  80ad64:	01c04034 	movhi	r7,256
  80ad68:	01804034 	movhi	r6,256
  80ad6c:	31bfffc4 	addi	r6,r6,-1
  80ad70:	00000806 	br	80ad94 <__kernel_rem_pio2+0x3f8>
  80ad74:	38c5c83a 	sub	r2,r7,r3
  80ad78:	18000226 	beq	r3,zero,80ad84 <__kernel_rem_pio2+0x3e8>
  80ad7c:	05800044 	movi	r22,1
  80ad80:	20800015 	stw	r2,0(r4)
  80ad84:	da808d17 	ldw	r10,564(sp)
  80ad88:	29400044 	addi	r5,r5,1
  80ad8c:	21000104 	addi	r4,r4,4
  80ad90:	51400926 	beq	r10,r5,80adb8 <__kernel_rem_pio2+0x41c>
  80ad94:	b004c03a 	cmpne	r2,r22,zero
  80ad98:	20c00017 	ldw	r3,0(r4)
  80ad9c:	103ff526 	beq	r2,zero,80ad74 <__kernel_rem_pio2+0x3d8>
  80ada0:	da808d17 	ldw	r10,564(sp)
  80ada4:	30c5c83a 	sub	r2,r6,r3
  80ada8:	29400044 	addi	r5,r5,1
  80adac:	20800015 	stw	r2,0(r4)
  80adb0:	21000104 	addi	r4,r4,4
  80adb4:	517ff71e 	bne	r10,r5,80ad94 <__kernel_rem_pio2+0x3f8>
  80adb8:	d880a017 	ldw	r2,640(sp)
  80adbc:	1000051e 	bne	r2,zero,80add4 <__kernel_rem_pio2+0x438>
  80adc0:	d8c09317 	ldw	r3,588(sp)
  80adc4:	00800044 	movi	r2,1
  80adc8:	18814e26 	beq	r3,r2,80b304 <__kernel_rem_pio2+0x968>
  80adcc:	00800084 	movi	r2,2
  80add0:	18815826 	beq	r3,r2,80b334 <__kernel_rem_pio2+0x998>
  80add4:	d9c09217 	ldw	r7,584(sp)
  80add8:	00800084 	movi	r2,2
  80addc:	38806926 	beq	r7,r2,80af84 <__kernel_rem_pio2+0x5e8>
  80ade0:	000d883a 	mov	r6,zero
  80ade4:	000f883a 	mov	r7,zero
  80ade8:	8009883a 	mov	r4,r16
  80adec:	880b883a 	mov	r5,r17
  80adf0:	080cb340 	call	80cb34 <__eqdf2>
  80adf4:	1000811e 	bne	r2,zero,80affc <__kernel_rem_pio2+0x660>
  80adf8:	da808d17 	ldw	r10,564(sp)
  80adfc:	d8809517 	ldw	r2,596(sp)
  80ae00:	51bfffc4 	addi	r6,r10,-1
  80ae04:	30800c16 	blt	r6,r2,80ae38 <__kernel_rem_pio2+0x49c>
  80ae08:	3185883a 	add	r2,r6,r6
  80ae0c:	1085883a 	add	r2,r2,r2
  80ae10:	16c9883a 	add	r4,r2,sp
  80ae14:	3007883a 	mov	r3,r6
  80ae18:	000b883a 	mov	r5,zero
  80ae1c:	20800017 	ldw	r2,0(r4)
  80ae20:	d9c09517 	ldw	r7,596(sp)
  80ae24:	18ffffc4 	addi	r3,r3,-1
  80ae28:	213fff04 	addi	r4,r4,-4
  80ae2c:	288ab03a 	or	r5,r5,r2
  80ae30:	19fffa0e 	bge	r3,r7,80ae1c <__kernel_rem_pio2+0x480>
  80ae34:	2800791e 	bne	r5,zero,80b01c <__kernel_rem_pio2+0x680>
  80ae38:	da809917 	ldw	r10,612(sp)
  80ae3c:	50bfff17 	ldw	r2,-4(r10)
  80ae40:	1001511e 	bne	r2,zero,80b388 <__kernel_rem_pio2+0x9ec>
  80ae44:	d880a117 	ldw	r2,644(sp)
  80ae48:	01000044 	movi	r4,1
  80ae4c:	10ffff04 	addi	r3,r2,-4
  80ae50:	18ffff04 	addi	r3,r3,-4
  80ae54:	18800017 	ldw	r2,0(r3)
  80ae58:	21000044 	addi	r4,r4,1
  80ae5c:	103ffc26 	beq	r2,zero,80ae50 <__kernel_rem_pio2+0x4b4>
  80ae60:	d8c08d17 	ldw	r3,564(sp)
  80ae64:	192f883a 	add	r23,r3,r4
  80ae68:	1f000044 	addi	fp,r3,1
  80ae6c:	bf00020e 	bge	r23,fp,80ae78 <__kernel_rem_pio2+0x4dc>
  80ae70:	ddc08d15 	stw	r23,564(sp)
  80ae74:	003f3a06 	br	80ab60 <__kernel_rem_pio2+0x1c4>
  80ae78:	d9408c17 	ldw	r5,560(sp)
  80ae7c:	d9009817 	ldw	r4,608(sp)
  80ae80:	da80ae17 	ldw	r10,696(sp)
  80ae84:	1945883a 	add	r2,r3,r5
  80ae88:	190f883a 	add	r7,r3,r4
  80ae8c:	1085883a 	add	r2,r2,r2
  80ae90:	380a90fa 	slli	r5,r7,3
  80ae94:	e00c90fa 	slli	r6,fp,3
  80ae98:	1085883a 	add	r2,r2,r2
  80ae9c:	5085883a 	add	r2,r10,r2
  80aea0:	d8c01404 	addi	r3,sp,80
  80aea4:	d9006404 	addi	r4,sp,400
  80aea8:	10800104 	addi	r2,r2,4
  80aeac:	196b883a 	add	r21,r3,r5
  80aeb0:	21a1883a 	add	r16,r4,r6
  80aeb4:	d8809115 	stw	r2,580(sp)
  80aeb8:	d9c09015 	stw	r7,576(sp)
  80aebc:	d8809117 	ldw	r2,580(sp)
  80aec0:	11000017 	ldw	r4,0(r2)
  80aec4:	080cccc0 	call	80cccc <__floatsidf>
  80aec8:	a8c00115 	stw	r3,4(r21)
  80aecc:	d8c0a217 	ldw	r3,648(sp)
  80aed0:	a8800015 	stw	r2,0(r21)
  80aed4:	18002826 	beq	r3,zero,80af78 <__kernel_rem_pio2+0x5dc>
  80aed8:	d9009017 	ldw	r4,576(sp)
  80aedc:	dd009617 	ldw	r20,600(sp)
  80aee0:	0023883a 	mov	r17,zero
  80aee4:	200490fa 	slli	r2,r4,3
  80aee8:	002d883a 	mov	r22,zero
  80aeec:	0025883a 	mov	r18,zero
  80aef0:	16e7883a 	add	r19,r2,sp
  80aef4:	98801417 	ldw	r2,80(r19)
  80aef8:	98c01517 	ldw	r3,84(r19)
  80aefc:	a1800017 	ldw	r6,0(r20)
  80af00:	a1c00117 	ldw	r7,4(r20)
  80af04:	180b883a 	mov	r5,r3
  80af08:	1009883a 	mov	r4,r2
  80af0c:	080c5180 	call	80c518 <__muldf3>
  80af10:	180f883a 	mov	r7,r3
  80af14:	900b883a 	mov	r5,r18
  80af18:	8809883a 	mov	r4,r17
  80af1c:	100d883a 	mov	r6,r2
  80af20:	080c4a40 	call	80c4a4 <__adddf3>
  80af24:	d9409817 	ldw	r5,608(sp)
  80af28:	b5800044 	addi	r22,r22,1
  80af2c:	9cfffe04 	addi	r19,r19,-8
  80af30:	1023883a 	mov	r17,r2
  80af34:	1825883a 	mov	r18,r3
  80af38:	a5000204 	addi	r20,r20,8
  80af3c:	2dbfed1e 	bne	r5,r22,80aef4 <__kernel_rem_pio2+0x558>
  80af40:	d9809117 	ldw	r6,580(sp)
  80af44:	d9c09017 	ldw	r7,576(sp)
  80af48:	e7000044 	addi	fp,fp,1
  80af4c:	31800104 	addi	r6,r6,4
  80af50:	39c00044 	addi	r7,r7,1
  80af54:	84800115 	stw	r18,4(r16)
  80af58:	84400015 	stw	r17,0(r16)
  80af5c:	d9809115 	stw	r6,580(sp)
  80af60:	ad400204 	addi	r21,r21,8
  80af64:	84000204 	addi	r16,r16,8
  80af68:	d9c09015 	stw	r7,576(sp)
  80af6c:	bf3fd30e 	bge	r23,fp,80aebc <__kernel_rem_pio2+0x520>
  80af70:	ddc08d15 	stw	r23,564(sp)
  80af74:	003efa06 	br	80ab60 <__kernel_rem_pio2+0x1c4>
  80af78:	0023883a 	mov	r17,zero
  80af7c:	0025883a 	mov	r18,zero
  80af80:	003fef06 	br	80af40 <__kernel_rem_pio2+0x5a4>
  80af84:	0029883a 	mov	r20,zero
  80af88:	054ffc34 	movhi	r21,16368
  80af8c:	880f883a 	mov	r7,r17
  80af90:	800d883a 	mov	r6,r16
  80af94:	a009883a 	mov	r4,r20
  80af98:	a80b883a 	mov	r5,r21
  80af9c:	080c4240 	call	80c424 <__subdf3>
  80afa0:	1025883a 	mov	r18,r2
  80afa4:	b005003a 	cmpeq	r2,r22,zero
  80afa8:	1827883a 	mov	r19,r3
  80afac:	9021883a 	mov	r16,r18
  80afb0:	1823883a 	mov	r17,r3
  80afb4:	103f8a1e 	bne	r2,zero,80ade0 <__kernel_rem_pio2+0x444>
  80afb8:	d9809317 	ldw	r6,588(sp)
  80afbc:	0009883a 	mov	r4,zero
  80afc0:	a80b883a 	mov	r5,r21
  80afc4:	080bd6c0 	call	80bd6c <scalbn>
  80afc8:	180f883a 	mov	r7,r3
  80afcc:	9009883a 	mov	r4,r18
  80afd0:	980b883a 	mov	r5,r19
  80afd4:	100d883a 	mov	r6,r2
  80afd8:	080c4240 	call	80c424 <__subdf3>
  80afdc:	1021883a 	mov	r16,r2
  80afe0:	1823883a 	mov	r17,r3
  80afe4:	000d883a 	mov	r6,zero
  80afe8:	000f883a 	mov	r7,zero
  80afec:	8009883a 	mov	r4,r16
  80aff0:	880b883a 	mov	r5,r17
  80aff4:	080cb340 	call	80cb34 <__eqdf2>
  80aff8:	103f7f26 	beq	r2,zero,80adf8 <__kernel_rem_pio2+0x45c>
  80affc:	000d883a 	mov	r6,zero
  80b000:	000f883a 	mov	r7,zero
  80b004:	8009883a 	mov	r4,r16
  80b008:	880b883a 	mov	r5,r17
  80b00c:	080cb340 	call	80cb34 <__eqdf2>
  80b010:	10019a1e 	bne	r2,zero,80b67c <__kernel_rem_pio2+0xce0>
  80b014:	da808d17 	ldw	r10,564(sp)
  80b018:	51bfffc4 	addi	r6,r10,-1
  80b01c:	3185883a 	add	r2,r6,r6
  80b020:	1085883a 	add	r2,r2,r2
  80b024:	d9009317 	ldw	r4,588(sp)
  80b028:	16c5883a 	add	r2,r2,sp
  80b02c:	10c00017 	ldw	r3,0(r2)
  80b030:	213ffa04 	addi	r4,r4,-24
  80b034:	d9009315 	stw	r4,588(sp)
  80b038:	1801d41e 	bne	r3,zero,80b78c <__kernel_rem_pio2+0xdf0>
  80b03c:	d9808d15 	stw	r6,564(sp)
  80b040:	1007883a 	mov	r3,r2
  80b044:	d9408d17 	ldw	r5,564(sp)
  80b048:	d9809317 	ldw	r6,588(sp)
  80b04c:	18ffff04 	addi	r3,r3,-4
  80b050:	18800017 	ldw	r2,0(r3)
  80b054:	297fffc4 	addi	r5,r5,-1
  80b058:	31bffa04 	addi	r6,r6,-24
  80b05c:	d9408d15 	stw	r5,564(sp)
  80b060:	d9809315 	stw	r6,588(sp)
  80b064:	103ff726 	beq	r2,zero,80b044 <__kernel_rem_pio2+0x6a8>
  80b068:	d9809317 	ldw	r6,588(sp)
  80b06c:	0005883a 	mov	r2,zero
  80b070:	00cffc34 	movhi	r3,16368
  80b074:	180b883a 	mov	r5,r3
  80b078:	1009883a 	mov	r4,r2
  80b07c:	080bd6c0 	call	80bd6c <scalbn>
  80b080:	d9808d17 	ldw	r6,564(sp)
  80b084:	1021883a 	mov	r16,r2
  80b088:	1823883a 	mov	r17,r3
  80b08c:	30004616 	blt	r6,zero,80b1a8 <__kernel_rem_pio2+0x80c>
  80b090:	300690fa 	slli	r3,r6,3
  80b094:	3185883a 	add	r2,r6,r6
  80b098:	1085883a 	add	r2,r2,r2
  80b09c:	16e9883a 	add	r20,r2,sp
  80b0a0:	1ee5883a 	add	r18,r3,sp
  80b0a4:	3027883a 	mov	r19,r6
  80b0a8:	057fffc4 	movi	r21,-1
  80b0ac:	a1000017 	ldw	r4,0(r20)
  80b0b0:	9cffffc4 	addi	r19,r19,-1
  80b0b4:	a53fff04 	addi	r20,r20,-4
  80b0b8:	080cccc0 	call	80cccc <__floatsidf>
  80b0bc:	800d883a 	mov	r6,r16
  80b0c0:	880f883a 	mov	r7,r17
  80b0c4:	180b883a 	mov	r5,r3
  80b0c8:	1009883a 	mov	r4,r2
  80b0cc:	080c5180 	call	80c518 <__muldf3>
  80b0d0:	0015883a 	mov	r10,zero
  80b0d4:	02cf9c34 	movhi	r11,15984
  80b0d8:	880b883a 	mov	r5,r17
  80b0dc:	8009883a 	mov	r4,r16
  80b0e0:	90c06515 	stw	r3,404(r18)
  80b0e4:	90806415 	stw	r2,400(r18)
  80b0e8:	580f883a 	mov	r7,r11
  80b0ec:	500d883a 	mov	r6,r10
  80b0f0:	080c5180 	call	80c518 <__muldf3>
  80b0f4:	1021883a 	mov	r16,r2
  80b0f8:	1823883a 	mov	r17,r3
  80b0fc:	94bffe04 	addi	r18,r18,-8
  80b100:	9d7fea1e 	bne	r19,r21,80b0ac <__kernel_rem_pio2+0x710>
  80b104:	d9c09517 	ldw	r7,596(sp)
  80b108:	dd808d17 	ldw	r22,564(sp)
  80b10c:	002b883a 	mov	r21,zero
  80b110:	382e403a 	cmpge	r23,r7,zero
  80b114:	b800aa26 	beq	r23,zero,80b3c0 <__kernel_rem_pio2+0xa24>
  80b118:	a800a916 	blt	r21,zero,80b3c0 <__kernel_rem_pio2+0xa24>
  80b11c:	b00690fa 	slli	r3,r22,3
  80b120:	d8806404 	addi	r2,sp,400
  80b124:	0021883a 	mov	r16,zero
  80b128:	10e9883a 	add	r20,r2,r3
  80b12c:	0027883a 	mov	r19,zero
  80b130:	0023883a 	mov	r17,zero
  80b134:	048020b4 	movhi	r18,130
  80b138:	948bfd04 	addi	r18,r18,12276
  80b13c:	00000106 	br	80b144 <__kernel_rem_pio2+0x7a8>
  80b140:	acc01116 	blt	r21,r19,80b188 <__kernel_rem_pio2+0x7ec>
  80b144:	91000017 	ldw	r4,0(r18)
  80b148:	91400117 	ldw	r5,4(r18)
  80b14c:	a1800017 	ldw	r6,0(r20)
  80b150:	a1c00117 	ldw	r7,4(r20)
  80b154:	9cc00044 	addi	r19,r19,1
  80b158:	94800204 	addi	r18,r18,8
  80b15c:	080c5180 	call	80c518 <__muldf3>
  80b160:	180f883a 	mov	r7,r3
  80b164:	880b883a 	mov	r5,r17
  80b168:	8009883a 	mov	r4,r16
  80b16c:	100d883a 	mov	r6,r2
  80b170:	080c4a40 	call	80c4a4 <__adddf3>
  80b174:	da809517 	ldw	r10,596(sp)
  80b178:	a5000204 	addi	r20,r20,8
  80b17c:	1021883a 	mov	r16,r2
  80b180:	1823883a 	mov	r17,r3
  80b184:	54ffee0e 	bge	r10,r19,80b140 <__kernel_rem_pio2+0x7a4>
  80b188:	a80490fa 	slli	r2,r21,3
  80b18c:	b5bfffc4 	addi	r22,r22,-1
  80b190:	ad400044 	addi	r21,r21,1
  80b194:	16c5883a 	add	r2,r2,sp
  80b198:	14403d15 	stw	r17,244(r2)
  80b19c:	14003c15 	stw	r16,240(r2)
  80b1a0:	00bfffc4 	movi	r2,-1
  80b1a4:	b0bfdb1e 	bne	r22,r2,80b114 <__kernel_rem_pio2+0x778>
  80b1a8:	d8c0ad17 	ldw	r3,692(sp)
  80b1ac:	00800084 	movi	r2,2
  80b1b0:	10c09316 	blt	r2,r3,80b400 <__kernel_rem_pio2+0xa64>
  80b1b4:	00c1120e 	bge	zero,r3,80b600 <__kernel_rem_pio2+0xc64>
  80b1b8:	d9808d17 	ldw	r6,564(sp)
  80b1bc:	30018d16 	blt	r6,zero,80b7f4 <__kernel_rem_pio2+0xe58>
  80b1c0:	d8c08d17 	ldw	r3,564(sp)
  80b1c4:	0011883a 	mov	r8,zero
  80b1c8:	0013883a 	mov	r9,zero
  80b1cc:	180490fa 	slli	r2,r3,3
  80b1d0:	1823883a 	mov	r17,r3
  80b1d4:	04bfffc4 	movi	r18,-1
  80b1d8:	16e1883a 	add	r16,r2,sp
  80b1dc:	80803c17 	ldw	r2,240(r16)
  80b1e0:	80c03d17 	ldw	r3,244(r16)
  80b1e4:	480b883a 	mov	r5,r9
  80b1e8:	4009883a 	mov	r4,r8
  80b1ec:	180f883a 	mov	r7,r3
  80b1f0:	100d883a 	mov	r6,r2
  80b1f4:	080c4a40 	call	80c4a4 <__adddf3>
  80b1f8:	8c7fffc4 	addi	r17,r17,-1
  80b1fc:	843ffe04 	addi	r16,r16,-8
  80b200:	1011883a 	mov	r8,r2
  80b204:	1813883a 	mov	r9,r3
  80b208:	8cbff41e 	bne	r17,r18,80b1dc <__kernel_rem_pio2+0x840>
  80b20c:	d9009217 	ldw	r4,584(sp)
  80b210:	20015b1e 	bne	r4,zero,80b780 <__kernel_rem_pio2+0xde4>
  80b214:	4009883a 	mov	r4,r8
  80b218:	480b883a 	mov	r5,r9
  80b21c:	d9809717 	ldw	r6,604(sp)
  80b220:	d8803c17 	ldw	r2,240(sp)
  80b224:	480f883a 	mov	r7,r9
  80b228:	31400115 	stw	r5,4(r6)
  80b22c:	31000015 	stw	r4,0(r6)
  80b230:	d8c03d17 	ldw	r3,244(sp)
  80b234:	400d883a 	mov	r6,r8
  80b238:	1009883a 	mov	r4,r2
  80b23c:	180b883a 	mov	r5,r3
  80b240:	080c4240 	call	80c424 <__subdf3>
  80b244:	d9c08d17 	ldw	r7,564(sp)
  80b248:	1011883a 	mov	r8,r2
  80b24c:	1813883a 	mov	r9,r3
  80b250:	01c00d0e 	bge	zero,r7,80b288 <__kernel_rem_pio2+0x8ec>
  80b254:	0023883a 	mov	r17,zero
  80b258:	dc003e04 	addi	r16,sp,248
  80b25c:	81800017 	ldw	r6,0(r16)
  80b260:	81c00117 	ldw	r7,4(r16)
  80b264:	480b883a 	mov	r5,r9
  80b268:	4009883a 	mov	r4,r8
  80b26c:	080c4a40 	call	80c4a4 <__adddf3>
  80b270:	da808d17 	ldw	r10,564(sp)
  80b274:	8c400044 	addi	r17,r17,1
  80b278:	1011883a 	mov	r8,r2
  80b27c:	1813883a 	mov	r9,r3
  80b280:	84000204 	addi	r16,r16,8
  80b284:	8abff51e 	bne	r17,r10,80b25c <__kernel_rem_pio2+0x8c0>
  80b288:	d8809217 	ldw	r2,584(sp)
  80b28c:	10000226 	beq	r2,zero,80b298 <__kernel_rem_pio2+0x8fc>
  80b290:	48e0003c 	xorhi	r3,r9,32768
  80b294:	1813883a 	mov	r9,r3
  80b298:	d8c09717 	ldw	r3,604(sp)
  80b29c:	1a400315 	stw	r9,12(r3)
  80b2a0:	1a000215 	stw	r8,8(r3)
  80b2a4:	d8c09417 	ldw	r3,592(sp)
  80b2a8:	188001cc 	andi	r2,r3,7
  80b2ac:	dfc0ac17 	ldw	ra,688(sp)
  80b2b0:	df00ab17 	ldw	fp,684(sp)
  80b2b4:	ddc0aa17 	ldw	r23,680(sp)
  80b2b8:	dd80a917 	ldw	r22,676(sp)
  80b2bc:	dd40a817 	ldw	r21,672(sp)
  80b2c0:	dd00a717 	ldw	r20,668(sp)
  80b2c4:	dcc0a617 	ldw	r19,664(sp)
  80b2c8:	dc80a517 	ldw	r18,660(sp)
  80b2cc:	dc40a417 	ldw	r17,656(sp)
  80b2d0:	dc00a317 	ldw	r16,652(sp)
  80b2d4:	dec0ad04 	addi	sp,sp,692
  80b2d8:	f800283a 	ret
  80b2dc:	d8809317 	ldw	r2,588(sp)
  80b2e0:	10001f1e 	bne	r2,zero,80b360 <__kernel_rem_pio2+0x9c4>
  80b2e4:	d8c08d17 	ldw	r3,564(sp)
  80b2e8:	18c5883a 	add	r2,r3,r3
  80b2ec:	1085883a 	add	r2,r2,r2
  80b2f0:	16c5883a 	add	r2,r2,sp
  80b2f4:	10ffff17 	ldw	r3,-4(r2)
  80b2f8:	1807d5fa 	srai	r3,r3,23
  80b2fc:	d8c09215 	stw	r3,584(sp)
  80b300:	003e8e06 	br	80ad3c <__kernel_rem_pio2+0x3a0>
  80b304:	d9008d17 	ldw	r4,564(sp)
  80b308:	d9409317 	ldw	r5,588(sp)
  80b30c:	2145c83a 	sub	r2,r4,r5
  80b310:	1085883a 	add	r2,r2,r2
  80b314:	1085883a 	add	r2,r2,r2
  80b318:	16c5883a 	add	r2,r2,sp
  80b31c:	10c00017 	ldw	r3,0(r2)
  80b320:	01002034 	movhi	r4,128
  80b324:	213fffc4 	addi	r4,r4,-1
  80b328:	1906703a 	and	r3,r3,r4
  80b32c:	10c00015 	stw	r3,0(r2)
  80b330:	003ea806 	br	80add4 <__kernel_rem_pio2+0x438>
  80b334:	d9808d17 	ldw	r6,564(sp)
  80b338:	01001034 	movhi	r4,64
  80b33c:	213fffc4 	addi	r4,r4,-1
  80b340:	30bfffc4 	addi	r2,r6,-1
  80b344:	1085883a 	add	r2,r2,r2
  80b348:	1085883a 	add	r2,r2,r2
  80b34c:	16c5883a 	add	r2,r2,sp
  80b350:	10c00017 	ldw	r3,0(r2)
  80b354:	1906703a 	and	r3,r3,r4
  80b358:	10c00015 	stw	r3,0(r2)
  80b35c:	003e9d06 	br	80add4 <__kernel_rem_pio2+0x438>
  80b360:	0005883a 	mov	r2,zero
  80b364:	00cff834 	movhi	r3,16352
  80b368:	300b883a 	mov	r5,r6
  80b36c:	180f883a 	mov	r7,r3
  80b370:	8009883a 	mov	r4,r16
  80b374:	100d883a 	mov	r6,r2
  80b378:	080cc440 	call	80cc44 <__gedf2>
  80b37c:	10001d0e 	bge	r2,zero,80b3f4 <__kernel_rem_pio2+0xa58>
  80b380:	d8009215 	stw	zero,584(sp)
  80b384:	003e9606 	br	80ade0 <__kernel_rem_pio2+0x444>
  80b388:	d8c08d17 	ldw	r3,564(sp)
  80b38c:	01000044 	movi	r4,1
  80b390:	192f883a 	add	r23,r3,r4
  80b394:	1f000044 	addi	fp,r3,1
  80b398:	bf3eb516 	blt	r23,fp,80ae70 <__kernel_rem_pio2+0x4d4>
  80b39c:	003eb606 	br	80ae78 <__kernel_rem_pio2+0x4dc>
  80b3a0:	0021883a 	mov	r16,zero
  80b3a4:	0023883a 	mov	r17,zero
  80b3a8:	a5000044 	addi	r20,r20,1
  80b3ac:	ac400115 	stw	r17,4(r21)
  80b3b0:	ac000015 	stw	r16,0(r21)
  80b3b4:	ad400204 	addi	r21,r21,8
  80b3b8:	a5fdba1e 	bne	r20,r23,80aaa4 <__kernel_rem_pio2+0x108>
  80b3bc:	003dd806 	br	80ab20 <__kernel_rem_pio2+0x184>
  80b3c0:	a80490fa 	slli	r2,r21,3
  80b3c4:	0021883a 	mov	r16,zero
  80b3c8:	0023883a 	mov	r17,zero
  80b3cc:	16c5883a 	add	r2,r2,sp
  80b3d0:	14403d15 	stw	r17,244(r2)
  80b3d4:	14003c15 	stw	r16,240(r2)
  80b3d8:	b5bfffc4 	addi	r22,r22,-1
  80b3dc:	00bfffc4 	movi	r2,-1
  80b3e0:	ad400044 	addi	r21,r21,1
  80b3e4:	b0bf4b1e 	bne	r22,r2,80b114 <__kernel_rem_pio2+0x778>
  80b3e8:	003f6f06 	br	80b1a8 <__kernel_rem_pio2+0x80c>
  80b3ec:	002d883a 	mov	r22,zero
  80b3f0:	003e7106 	br	80adb8 <__kernel_rem_pio2+0x41c>
  80b3f4:	01000084 	movi	r4,2
  80b3f8:	d9009215 	stw	r4,584(sp)
  80b3fc:	003e5106 	br	80ad44 <__kernel_rem_pio2+0x3a8>
  80b400:	d900ad17 	ldw	r4,692(sp)
  80b404:	008000c4 	movi	r2,3
  80b408:	20bfa61e 	bne	r4,r2,80b2a4 <__kernel_rem_pio2+0x908>
  80b40c:	d9c08d17 	ldw	r7,564(sp)
  80b410:	01c02c0e 	bge	zero,r7,80b4c4 <__kernel_rem_pio2+0xb28>
  80b414:	3805883a 	mov	r2,r7
  80b418:	00000106 	br	80b420 <__kernel_rem_pio2+0xa84>
  80b41c:	d8808e17 	ldw	r2,568(sp)
  80b420:	113fffc4 	addi	r4,r2,-1
  80b424:	100690fa 	slli	r3,r2,3
  80b428:	200490fa 	slli	r2,r4,3
  80b42c:	d9008e15 	stw	r4,568(sp)
  80b430:	1ef9883a 	add	fp,r3,sp
  80b434:	16c5883a 	add	r2,r2,sp
  80b438:	d8809a15 	stw	r2,616(sp)
  80b43c:	11403c04 	addi	r5,r2,240
  80b440:	e1803c04 	addi	r6,fp,240
  80b444:	14003c17 	ldw	r16,240(r2)
  80b448:	e5003c17 	ldw	r20,240(fp)
  80b44c:	d9409b15 	stw	r5,620(sp)
  80b450:	d9809c15 	stw	r6,624(sp)
  80b454:	35400117 	ldw	r21,4(r6)
  80b458:	2c400117 	ldw	r17,4(r5)
  80b45c:	8009883a 	mov	r4,r16
  80b460:	a00d883a 	mov	r6,r20
  80b464:	880b883a 	mov	r5,r17
  80b468:	a80f883a 	mov	r7,r21
  80b46c:	080c4a40 	call	80c4a4 <__adddf3>
  80b470:	100d883a 	mov	r6,r2
  80b474:	880b883a 	mov	r5,r17
  80b478:	8009883a 	mov	r4,r16
  80b47c:	180f883a 	mov	r7,r3
  80b480:	1025883a 	mov	r18,r2
  80b484:	1827883a 	mov	r19,r3
  80b488:	080c4240 	call	80c424 <__subdf3>
  80b48c:	180f883a 	mov	r7,r3
  80b490:	a80b883a 	mov	r5,r21
  80b494:	a009883a 	mov	r4,r20
  80b498:	100d883a 	mov	r6,r2
  80b49c:	080c4a40 	call	80c4a4 <__adddf3>
  80b4a0:	e0803c15 	stw	r2,240(fp)
  80b4a4:	d9c09c17 	ldw	r7,624(sp)
  80b4a8:	38c00115 	stw	r3,4(r7)
  80b4ac:	da809a17 	ldw	r10,616(sp)
  80b4b0:	54803c15 	stw	r18,240(r10)
  80b4b4:	d8809b17 	ldw	r2,620(sp)
  80b4b8:	14c00115 	stw	r19,4(r2)
  80b4bc:	d8c08e17 	ldw	r3,568(sp)
  80b4c0:	183fd61e 	bne	r3,zero,80b41c <__kernel_rem_pio2+0xa80>
  80b4c4:	d9008d17 	ldw	r4,564(sp)
  80b4c8:	00800044 	movi	r2,1
  80b4cc:	1100cc0e 	bge	r2,r4,80b800 <__kernel_rem_pio2+0xe64>
  80b4d0:	d8808d17 	ldw	r2,564(sp)
  80b4d4:	117fffc4 	addi	r5,r2,-1
  80b4d8:	100690fa 	slli	r3,r2,3
  80b4dc:	280490fa 	slli	r2,r5,3
  80b4e0:	d9408f15 	stw	r5,572(sp)
  80b4e4:	1ef9883a 	add	fp,r3,sp
  80b4e8:	16c5883a 	add	r2,r2,sp
  80b4ec:	d8809d15 	stw	r2,628(sp)
  80b4f0:	11803c04 	addi	r6,r2,240
  80b4f4:	e1c03c04 	addi	r7,fp,240
  80b4f8:	14003c17 	ldw	r16,240(r2)
  80b4fc:	e5003c17 	ldw	r20,240(fp)
  80b500:	d9809e15 	stw	r6,632(sp)
  80b504:	d9c09f15 	stw	r7,636(sp)
  80b508:	34400117 	ldw	r17,4(r6)
  80b50c:	3d400117 	ldw	r21,4(r7)
  80b510:	8009883a 	mov	r4,r16
  80b514:	880b883a 	mov	r5,r17
  80b518:	a00d883a 	mov	r6,r20
  80b51c:	a80f883a 	mov	r7,r21
  80b520:	080c4a40 	call	80c4a4 <__adddf3>
  80b524:	100d883a 	mov	r6,r2
  80b528:	880b883a 	mov	r5,r17
  80b52c:	8009883a 	mov	r4,r16
  80b530:	180f883a 	mov	r7,r3
  80b534:	1025883a 	mov	r18,r2
  80b538:	1827883a 	mov	r19,r3
  80b53c:	080c4240 	call	80c424 <__subdf3>
  80b540:	180f883a 	mov	r7,r3
  80b544:	a80b883a 	mov	r5,r21
  80b548:	a009883a 	mov	r4,r20
  80b54c:	100d883a 	mov	r6,r2
  80b550:	080c4a40 	call	80c4a4 <__adddf3>
  80b554:	e0803c15 	stw	r2,240(fp)
  80b558:	da809f17 	ldw	r10,636(sp)
  80b55c:	50c00115 	stw	r3,4(r10)
  80b560:	d8c09d17 	ldw	r3,628(sp)
  80b564:	d8808f17 	ldw	r2,572(sp)
  80b568:	1c803c15 	stw	r18,240(r3)
  80b56c:	d9009e17 	ldw	r4,632(sp)
  80b570:	00c00044 	movi	r3,1
  80b574:	24c00115 	stw	r19,4(r4)
  80b578:	d9408f17 	ldw	r5,572(sp)
  80b57c:	28ffd51e 	bne	r5,r3,80b4d4 <__kernel_rem_pio2+0xb38>
  80b580:	dc008d17 	ldw	r16,564(sp)
  80b584:	0011883a 	mov	r8,zero
  80b588:	1825883a 	mov	r18,r3
  80b58c:	800490fa 	slli	r2,r16,3
  80b590:	0013883a 	mov	r9,zero
  80b594:	16e3883a 	add	r17,r2,sp
  80b598:	88803c17 	ldw	r2,240(r17)
  80b59c:	88c03d17 	ldw	r3,244(r17)
  80b5a0:	480b883a 	mov	r5,r9
  80b5a4:	4009883a 	mov	r4,r8
  80b5a8:	180f883a 	mov	r7,r3
  80b5ac:	100d883a 	mov	r6,r2
  80b5b0:	080c4a40 	call	80c4a4 <__adddf3>
  80b5b4:	843fffc4 	addi	r16,r16,-1
  80b5b8:	8c7ffe04 	addi	r17,r17,-8
  80b5bc:	1011883a 	mov	r8,r2
  80b5c0:	1813883a 	mov	r9,r3
  80b5c4:	84bff41e 	bne	r16,r18,80b598 <__kernel_rem_pio2+0xbfc>
  80b5c8:	d9809217 	ldw	r6,584(sp)
  80b5cc:	30007a1e 	bne	r6,zero,80b7b8 <__kernel_rem_pio2+0xe1c>
  80b5d0:	d9c09717 	ldw	r7,604(sp)
  80b5d4:	d8803c17 	ldw	r2,240(sp)
  80b5d8:	d9003e17 	ldw	r4,248(sp)
  80b5dc:	3a400515 	stw	r9,20(r7)
  80b5e0:	d8c03d17 	ldw	r3,244(sp)
  80b5e4:	d9403f17 	ldw	r5,252(sp)
  80b5e8:	3a000415 	stw	r8,16(r7)
  80b5ec:	38c00115 	stw	r3,4(r7)
  80b5f0:	39400315 	stw	r5,12(r7)
  80b5f4:	38800015 	stw	r2,0(r7)
  80b5f8:	39000215 	stw	r4,8(r7)
  80b5fc:	003f2906 	br	80b2a4 <__kernel_rem_pio2+0x908>
  80b600:	183f281e 	bne	r3,zero,80b2a4 <__kernel_rem_pio2+0x908>
  80b604:	d9408d17 	ldw	r5,564(sp)
  80b608:	28008016 	blt	r5,zero,80b80c <__kernel_rem_pio2+0xe70>
  80b60c:	dc008d17 	ldw	r16,564(sp)
  80b610:	000d883a 	mov	r6,zero
  80b614:	000f883a 	mov	r7,zero
  80b618:	800490fa 	slli	r2,r16,3
  80b61c:	04bfffc4 	movi	r18,-1
  80b620:	16e3883a 	add	r17,r2,sp
  80b624:	88803c17 	ldw	r2,240(r17)
  80b628:	88c03d17 	ldw	r3,244(r17)
  80b62c:	380b883a 	mov	r5,r7
  80b630:	3009883a 	mov	r4,r6
  80b634:	180f883a 	mov	r7,r3
  80b638:	100d883a 	mov	r6,r2
  80b63c:	080c4a40 	call	80c4a4 <__adddf3>
  80b640:	843fffc4 	addi	r16,r16,-1
  80b644:	8c7ffe04 	addi	r17,r17,-8
  80b648:	100d883a 	mov	r6,r2
  80b64c:	180f883a 	mov	r7,r3
  80b650:	84bff41e 	bne	r16,r18,80b624 <__kernel_rem_pio2+0xc88>
  80b654:	da809217 	ldw	r10,584(sp)
  80b658:	50000226 	beq	r10,zero,80b664 <__kernel_rem_pio2+0xcc8>
  80b65c:	38e0003c 	xorhi	r3,r7,32768
  80b660:	180f883a 	mov	r7,r3
  80b664:	d8809717 	ldw	r2,604(sp)
  80b668:	11c00115 	stw	r7,4(r2)
  80b66c:	11800015 	stw	r6,0(r2)
  80b670:	003f0c06 	br	80b2a4 <__kernel_rem_pio2+0x908>
  80b674:	d8008c15 	stw	zero,560(sp)
  80b678:	003ce606 	br	80aa14 <__kernel_rem_pio2+0x78>
  80b67c:	d9c09317 	ldw	r7,588(sp)
  80b680:	880b883a 	mov	r5,r17
  80b684:	8009883a 	mov	r4,r16
  80b688:	01cdc83a 	sub	r6,zero,r7
  80b68c:	080bd6c0 	call	80bd6c <scalbn>
  80b690:	0011883a 	mov	r8,zero
  80b694:	02505c34 	movhi	r9,16752
  80b698:	480f883a 	mov	r7,r9
  80b69c:	1009883a 	mov	r4,r2
  80b6a0:	180b883a 	mov	r5,r3
  80b6a4:	400d883a 	mov	r6,r8
  80b6a8:	102d883a 	mov	r22,r2
  80b6ac:	182f883a 	mov	r23,r3
  80b6b0:	080cc440 	call	80cc44 <__gedf2>
  80b6b4:	10003716 	blt	r2,zero,80b794 <__kernel_rem_pio2+0xdf8>
  80b6b8:	0005883a 	mov	r2,zero
  80b6bc:	00cf9c34 	movhi	r3,15984
  80b6c0:	180f883a 	mov	r7,r3
  80b6c4:	100d883a 	mov	r6,r2
  80b6c8:	b009883a 	mov	r4,r22
  80b6cc:	b80b883a 	mov	r5,r23
  80b6d0:	080c5180 	call	80c518 <__muldf3>
  80b6d4:	180b883a 	mov	r5,r3
  80b6d8:	1009883a 	mov	r4,r2
  80b6dc:	080cdc40 	call	80cdc4 <__fixdfsi>
  80b6e0:	1009883a 	mov	r4,r2
  80b6e4:	080cccc0 	call	80cccc <__floatsidf>
  80b6e8:	da808d17 	ldw	r10,564(sp)
  80b6ec:	1023883a 	mov	r17,r2
  80b6f0:	1825883a 	mov	r18,r3
  80b6f4:	0005883a 	mov	r2,zero
  80b6f8:	00f05c34 	movhi	r3,49520
  80b6fc:	180f883a 	mov	r7,r3
  80b700:	8809883a 	mov	r4,r17
  80b704:	900b883a 	mov	r5,r18
  80b708:	100d883a 	mov	r6,r2
  80b70c:	52ab883a 	add	r21,r10,r10
  80b710:	080c5180 	call	80c518 <__muldf3>
  80b714:	180f883a 	mov	r7,r3
  80b718:	b80b883a 	mov	r5,r23
  80b71c:	100d883a 	mov	r6,r2
  80b720:	b009883a 	mov	r4,r22
  80b724:	080c4a40 	call	80c4a4 <__adddf3>
  80b728:	100d883a 	mov	r6,r2
  80b72c:	d8808d17 	ldw	r2,564(sp)
  80b730:	180b883a 	mov	r5,r3
  80b734:	3009883a 	mov	r4,r6
  80b738:	10800044 	addi	r2,r2,1
  80b73c:	ad6b883a 	add	r21,r21,r21
  80b740:	d8808d15 	stw	r2,564(sp)
  80b744:	080cdc40 	call	80cdc4 <__fixdfsi>
  80b748:	d8c08d17 	ldw	r3,564(sp)
  80b74c:	aeeb883a 	add	r21,r21,sp
  80b750:	8809883a 	mov	r4,r17
  80b754:	900b883a 	mov	r5,r18
  80b758:	a8800015 	stw	r2,0(r21)
  80b75c:	18e1883a 	add	r16,r3,r3
  80b760:	080cdc40 	call	80cdc4 <__fixdfsi>
  80b764:	d9009317 	ldw	r4,588(sp)
  80b768:	8421883a 	add	r16,r16,r16
  80b76c:	86e1883a 	add	r16,r16,sp
  80b770:	21000604 	addi	r4,r4,24
  80b774:	d9009315 	stw	r4,588(sp)
  80b778:	80800015 	stw	r2,0(r16)
  80b77c:	003e3a06 	br	80b068 <__kernel_rem_pio2+0x6cc>
  80b780:	4009883a 	mov	r4,r8
  80b784:	4960003c 	xorhi	r5,r9,32768
  80b788:	003ea406 	br	80b21c <__kernel_rem_pio2+0x880>
  80b78c:	d9808d15 	stw	r6,564(sp)
  80b790:	003e3506 	br	80b068 <__kernel_rem_pio2+0x6cc>
  80b794:	d9408d17 	ldw	r5,564(sp)
  80b798:	b009883a 	mov	r4,r22
  80b79c:	2961883a 	add	r16,r5,r5
  80b7a0:	8421883a 	add	r16,r16,r16
  80b7a4:	b80b883a 	mov	r5,r23
  80b7a8:	86e1883a 	add	r16,r16,sp
  80b7ac:	080cdc40 	call	80cdc4 <__fixdfsi>
  80b7b0:	80800015 	stw	r2,0(r16)
  80b7b4:	003e2c06 	br	80b068 <__kernel_rem_pio2+0x6cc>
  80b7b8:	d8c03d17 	ldw	r3,244(sp)
  80b7bc:	d9403f17 	ldw	r5,252(sp)
  80b7c0:	da809717 	ldw	r10,604(sp)
  80b7c4:	d8803c17 	ldw	r2,240(sp)
  80b7c8:	d9003e17 	ldw	r4,248(sp)
  80b7cc:	49e0003c 	xorhi	r7,r9,32768
  80b7d0:	51c00515 	stw	r7,20(r10)
  80b7d4:	19a0003c 	xorhi	r6,r3,32768
  80b7d8:	29e0003c 	xorhi	r7,r5,32768
  80b7dc:	51800115 	stw	r6,4(r10)
  80b7e0:	51c00315 	stw	r7,12(r10)
  80b7e4:	50800015 	stw	r2,0(r10)
  80b7e8:	51000215 	stw	r4,8(r10)
  80b7ec:	52000415 	stw	r8,16(r10)
  80b7f0:	003eac06 	br	80b2a4 <__kernel_rem_pio2+0x908>
  80b7f4:	0011883a 	mov	r8,zero
  80b7f8:	0013883a 	mov	r9,zero
  80b7fc:	003e8306 	br	80b20c <__kernel_rem_pio2+0x870>
  80b800:	0011883a 	mov	r8,zero
  80b804:	0013883a 	mov	r9,zero
  80b808:	003f6f06 	br	80b5c8 <__kernel_rem_pio2+0xc2c>
  80b80c:	000d883a 	mov	r6,zero
  80b810:	000f883a 	mov	r7,zero
  80b814:	003f8f06 	br	80b654 <__kernel_rem_pio2+0xcb8>

0080b818 <__kernel_sin>:
  80b818:	00a00034 	movhi	r2,32768
  80b81c:	10bfffc4 	addi	r2,r2,-1
  80b820:	deffef04 	addi	sp,sp,-68
  80b824:	1144703a 	and	r2,r2,r5
  80b828:	00cf9034 	movhi	r3,15936
  80b82c:	18ffffc4 	addi	r3,r3,-1
  80b830:	dd400d15 	stw	r21,52(sp)
  80b834:	dd000c15 	stw	r20,48(sp)
  80b838:	dfc01015 	stw	ra,64(sp)
  80b83c:	ddc00f15 	stw	r23,60(sp)
  80b840:	dd800e15 	stw	r22,56(sp)
  80b844:	dcc00b15 	stw	r19,44(sp)
  80b848:	dc800a15 	stw	r18,40(sp)
  80b84c:	dc400915 	stw	r17,36(sp)
  80b850:	dc000815 	stw	r16,32(sp)
  80b854:	2029883a 	mov	r20,r4
  80b858:	282b883a 	mov	r21,r5
  80b85c:	d9800415 	stw	r6,16(sp)
  80b860:	d9c00515 	stw	r7,20(sp)
  80b864:	18800216 	blt	r3,r2,80b870 <__kernel_sin+0x58>
  80b868:	080cdc40 	call	80cdc4 <__fixdfsi>
  80b86c:	10008826 	beq	r2,zero,80ba90 <__kernel_sin+0x278>
  80b870:	a009883a 	mov	r4,r20
  80b874:	a80b883a 	mov	r5,r21
  80b878:	a00d883a 	mov	r6,r20
  80b87c:	a80f883a 	mov	r7,r21
  80b880:	080c5180 	call	80c518 <__muldf3>
  80b884:	102d883a 	mov	r22,r2
  80b888:	a009883a 	mov	r4,r20
  80b88c:	a80b883a 	mov	r5,r21
  80b890:	b00d883a 	mov	r6,r22
  80b894:	180f883a 	mov	r7,r3
  80b898:	182f883a 	mov	r23,r3
  80b89c:	d8800215 	stw	r2,8(sp)
  80b8a0:	d8c00315 	stw	r3,12(sp)
  80b8a4:	080c5180 	call	80c518 <__muldf3>
  80b8a8:	d9000217 	ldw	r4,8(sp)
  80b8ac:	0216b434 	movhi	r8,23248
  80b8b0:	42355f04 	addi	r8,r8,-10884
  80b8b4:	024f79b4 	movhi	r9,15846
  80b8b8:	4a764e84 	addi	r9,r9,-9926
  80b8bc:	480f883a 	mov	r7,r9
  80b8c0:	400d883a 	mov	r6,r8
  80b8c4:	b80b883a 	mov	r5,r23
  80b8c8:	d8800615 	stw	r2,24(sp)
  80b8cc:	d8c00715 	stw	r3,28(sp)
  80b8d0:	080c5180 	call	80c518 <__muldf3>
  80b8d4:	02228b34 	movhi	r8,35372
  80b8d8:	42273ac4 	addi	r8,r8,-25365
  80b8dc:	024f96f4 	movhi	r9,15963
  80b8e0:	4a797984 	addi	r9,r9,-6682
  80b8e4:	480f883a 	mov	r7,r9
  80b8e8:	400d883a 	mov	r6,r8
  80b8ec:	180b883a 	mov	r5,r3
  80b8f0:	1009883a 	mov	r4,r2
  80b8f4:	080c4240 	call	80c424 <__subdf3>
  80b8f8:	d9000217 	ldw	r4,8(sp)
  80b8fc:	180f883a 	mov	r7,r3
  80b900:	b80b883a 	mov	r5,r23
  80b904:	100d883a 	mov	r6,r2
  80b908:	080c5180 	call	80c518 <__muldf3>
  80b90c:	0215ecb4 	movhi	r8,22450
  80b910:	423f9f44 	addi	r8,r8,-387
  80b914:	024fb1f4 	movhi	r9,16071
  80b918:	4a4778c4 	addi	r9,r9,7651
  80b91c:	480f883a 	mov	r7,r9
  80b920:	400d883a 	mov	r6,r8
  80b924:	180b883a 	mov	r5,r3
  80b928:	1009883a 	mov	r4,r2
  80b92c:	080c4a40 	call	80c4a4 <__adddf3>
  80b930:	d9000217 	ldw	r4,8(sp)
  80b934:	180f883a 	mov	r7,r3
  80b938:	b80b883a 	mov	r5,r23
  80b93c:	100d883a 	mov	r6,r2
  80b940:	080c5180 	call	80c518 <__muldf3>
  80b944:	02067074 	movhi	r8,6593
  80b948:	42187544 	addi	r8,r8,25045
  80b94c:	024fcab4 	movhi	r9,16170
  80b950:	4a406804 	addi	r9,r9,416
  80b954:	480f883a 	mov	r7,r9
  80b958:	400d883a 	mov	r6,r8
  80b95c:	180b883a 	mov	r5,r3
  80b960:	1009883a 	mov	r4,r2
  80b964:	080c4240 	call	80c424 <__subdf3>
  80b968:	d9000217 	ldw	r4,8(sp)
  80b96c:	180f883a 	mov	r7,r3
  80b970:	b80b883a 	mov	r5,r23
  80b974:	100d883a 	mov	r6,r2
  80b978:	080c5180 	call	80c518 <__muldf3>
  80b97c:	02044474 	movhi	r8,4369
  80b980:	423e2984 	addi	r8,r8,-1882
  80b984:	024fe074 	movhi	r9,16257
  80b988:	4a444444 	addi	r9,r9,4369
  80b98c:	180b883a 	mov	r5,r3
  80b990:	480f883a 	mov	r7,r9
  80b994:	1009883a 	mov	r4,r2
  80b998:	400d883a 	mov	r6,r8
  80b99c:	080c4a40 	call	80c4a4 <__adddf3>
  80b9a0:	1021883a 	mov	r16,r2
  80b9a4:	d8800617 	ldw	r2,24(sp)
  80b9a8:	1823883a 	mov	r17,r3
  80b9ac:	d8800015 	stw	r2,0(sp)
  80b9b0:	d8800717 	ldw	r2,28(sp)
  80b9b4:	d8800115 	stw	r2,4(sp)
  80b9b8:	d8801117 	ldw	r2,68(sp)
  80b9bc:	10004126 	beq	r2,zero,80bac4 <__kernel_sin+0x2ac>
  80b9c0:	d9000417 	ldw	r4,16(sp)
  80b9c4:	d9400517 	ldw	r5,20(sp)
  80b9c8:	0005883a 	mov	r2,zero
  80b9cc:	00cff834 	movhi	r3,16352
  80b9d0:	180f883a 	mov	r7,r3
  80b9d4:	100d883a 	mov	r6,r2
  80b9d8:	080c5180 	call	80c518 <__muldf3>
  80b9dc:	d9000017 	ldw	r4,0(sp)
  80b9e0:	d9400717 	ldw	r5,28(sp)
  80b9e4:	800d883a 	mov	r6,r16
  80b9e8:	880f883a 	mov	r7,r17
  80b9ec:	1021883a 	mov	r16,r2
  80b9f0:	1823883a 	mov	r17,r3
  80b9f4:	080c5180 	call	80c518 <__muldf3>
  80b9f8:	180f883a 	mov	r7,r3
  80b9fc:	880b883a 	mov	r5,r17
  80ba00:	8009883a 	mov	r4,r16
  80ba04:	100d883a 	mov	r6,r2
  80ba08:	080c4240 	call	80c424 <__subdf3>
  80ba0c:	d9000217 	ldw	r4,8(sp)
  80ba10:	b80b883a 	mov	r5,r23
  80ba14:	180f883a 	mov	r7,r3
  80ba18:	100d883a 	mov	r6,r2
  80ba1c:	080c5180 	call	80c518 <__muldf3>
  80ba20:	d9c00517 	ldw	r7,20(sp)
  80ba24:	d9800417 	ldw	r6,16(sp)
  80ba28:	180b883a 	mov	r5,r3
  80ba2c:	1009883a 	mov	r4,r2
  80ba30:	080c4240 	call	80c424 <__subdf3>
  80ba34:	d9000017 	ldw	r4,0(sp)
  80ba38:	d9400717 	ldw	r5,28(sp)
  80ba3c:	02155574 	movhi	r8,21845
  80ba40:	42155244 	addi	r8,r8,21833
  80ba44:	024ff174 	movhi	r9,16325
  80ba48:	4a555544 	addi	r9,r9,21845
  80ba4c:	480f883a 	mov	r7,r9
  80ba50:	400d883a 	mov	r6,r8
  80ba54:	1021883a 	mov	r16,r2
  80ba58:	1823883a 	mov	r17,r3
  80ba5c:	080c5180 	call	80c518 <__muldf3>
  80ba60:	180f883a 	mov	r7,r3
  80ba64:	880b883a 	mov	r5,r17
  80ba68:	8009883a 	mov	r4,r16
  80ba6c:	100d883a 	mov	r6,r2
  80ba70:	080c4a40 	call	80c4a4 <__adddf3>
  80ba74:	180f883a 	mov	r7,r3
  80ba78:	a80b883a 	mov	r5,r21
  80ba7c:	a009883a 	mov	r4,r20
  80ba80:	100d883a 	mov	r6,r2
  80ba84:	080c4240 	call	80c424 <__subdf3>
  80ba88:	1029883a 	mov	r20,r2
  80ba8c:	182b883a 	mov	r21,r3
  80ba90:	a005883a 	mov	r2,r20
  80ba94:	a807883a 	mov	r3,r21
  80ba98:	dfc01017 	ldw	ra,64(sp)
  80ba9c:	ddc00f17 	ldw	r23,60(sp)
  80baa0:	dd800e17 	ldw	r22,56(sp)
  80baa4:	dd400d17 	ldw	r21,52(sp)
  80baa8:	dd000c17 	ldw	r20,48(sp)
  80baac:	dcc00b17 	ldw	r19,44(sp)
  80bab0:	dc800a17 	ldw	r18,40(sp)
  80bab4:	dc400917 	ldw	r17,36(sp)
  80bab8:	dc000817 	ldw	r16,32(sp)
  80babc:	dec01104 	addi	sp,sp,68
  80bac0:	f800283a 	ret
  80bac4:	d9000217 	ldw	r4,8(sp)
  80bac8:	b80b883a 	mov	r5,r23
  80bacc:	800d883a 	mov	r6,r16
  80bad0:	180f883a 	mov	r7,r3
  80bad4:	080c5180 	call	80c518 <__muldf3>
  80bad8:	02155574 	movhi	r8,21845
  80badc:	42155244 	addi	r8,r8,21833
  80bae0:	024ff174 	movhi	r9,16325
  80bae4:	4a555544 	addi	r9,r9,21845
  80bae8:	480f883a 	mov	r7,r9
  80baec:	400d883a 	mov	r6,r8
  80baf0:	180b883a 	mov	r5,r3
  80baf4:	1009883a 	mov	r4,r2
  80baf8:	080c4240 	call	80c424 <__subdf3>
  80bafc:	d9000017 	ldw	r4,0(sp)
  80bb00:	d9400717 	ldw	r5,28(sp)
  80bb04:	180f883a 	mov	r7,r3
  80bb08:	100d883a 	mov	r6,r2
  80bb0c:	080c5180 	call	80c518 <__muldf3>
  80bb10:	180f883a 	mov	r7,r3
  80bb14:	a80b883a 	mov	r5,r21
  80bb18:	a009883a 	mov	r4,r20
  80bb1c:	100d883a 	mov	r6,r2
  80bb20:	080c4a40 	call	80c4a4 <__adddf3>
  80bb24:	1029883a 	mov	r20,r2
  80bb28:	182b883a 	mov	r21,r3
  80bb2c:	003fd806 	br	80ba90 <__kernel_sin+0x278>

0080bb30 <fabs>:
  80bb30:	01e00034 	movhi	r7,32768
  80bb34:	39ffffc4 	addi	r7,r7,-1
  80bb38:	394e703a 	and	r7,r7,r5
  80bb3c:	2005883a 	mov	r2,r4
  80bb40:	3807883a 	mov	r3,r7
  80bb44:	f800283a 	ret

0080bb48 <floor>:
  80bb48:	2805d53a 	srai	r2,r5,20
  80bb4c:	defff604 	addi	sp,sp,-40
  80bb50:	dd800615 	stw	r22,24(sp)
  80bb54:	10c1ffcc 	andi	r3,r2,2047
  80bb58:	1dbf0044 	addi	r22,r3,-1023
  80bb5c:	008004c4 	movi	r2,19
  80bb60:	ddc00715 	stw	r23,28(sp)
  80bb64:	dc800215 	stw	r18,8(sp)
  80bb68:	dc400115 	stw	r17,4(sp)
  80bb6c:	dc000015 	stw	r16,0(sp)
  80bb70:	dfc00915 	stw	ra,36(sp)
  80bb74:	df000815 	stw	fp,32(sp)
  80bb78:	dd400515 	stw	r21,20(sp)
  80bb7c:	dd000415 	stw	r20,16(sp)
  80bb80:	dcc00315 	stw	r19,12(sp)
  80bb84:	2021883a 	mov	r16,r4
  80bb88:	2823883a 	mov	r17,r5
  80bb8c:	282f883a 	mov	r23,r5
  80bb90:	2025883a 	mov	r18,r4
  80bb94:	15802916 	blt	r2,r22,80bc3c <floor+0xf4>
  80bb98:	b0004816 	blt	r22,zero,80bcbc <floor+0x174>
  80bb9c:	00800434 	movhi	r2,16
  80bba0:	10bfffc4 	addi	r2,r2,-1
  80bba4:	15b9d83a 	sra	fp,r2,r22
  80bba8:	282f883a 	mov	r23,r5
  80bbac:	e144703a 	and	r2,fp,r5
  80bbb0:	1104b03a 	or	r2,r2,r4
  80bbb4:	10001326 	beq	r2,zero,80bc04 <floor+0xbc>
  80bbb8:	00a20034 	movhi	r2,34816
  80bbbc:	109d6704 	addi	r2,r2,30108
  80bbc0:	00df8e34 	movhi	r3,32312
  80bbc4:	18f90f04 	addi	r3,r3,-7108
  80bbc8:	180f883a 	mov	r7,r3
  80bbcc:	100d883a 	mov	r6,r2
  80bbd0:	080c4a40 	call	80c4a4 <__adddf3>
  80bbd4:	180b883a 	mov	r5,r3
  80bbd8:	000d883a 	mov	r6,zero
  80bbdc:	000f883a 	mov	r7,zero
  80bbe0:	1009883a 	mov	r4,r2
  80bbe4:	080cbbc0 	call	80cbbc <__gtdf2>
  80bbe8:	0080040e 	bge	zero,r2,80bbfc <floor+0xb4>
  80bbec:	88004416 	blt	r17,zero,80bd00 <floor+0x1b8>
  80bbf0:	0704303a 	nor	r2,zero,fp
  80bbf4:	b8ae703a 	and	r23,r23,r2
  80bbf8:	0025883a 	mov	r18,zero
  80bbfc:	9021883a 	mov	r16,r18
  80bc00:	b823883a 	mov	r17,r23
  80bc04:	8005883a 	mov	r2,r16
  80bc08:	8807883a 	mov	r3,r17
  80bc0c:	dfc00917 	ldw	ra,36(sp)
  80bc10:	df000817 	ldw	fp,32(sp)
  80bc14:	ddc00717 	ldw	r23,28(sp)
  80bc18:	dd800617 	ldw	r22,24(sp)
  80bc1c:	dd400517 	ldw	r21,20(sp)
  80bc20:	dd000417 	ldw	r20,16(sp)
  80bc24:	dcc00317 	ldw	r19,12(sp)
  80bc28:	dc800217 	ldw	r18,8(sp)
  80bc2c:	dc400117 	ldw	r17,4(sp)
  80bc30:	dc000017 	ldw	r16,0(sp)
  80bc34:	dec00a04 	addi	sp,sp,40
  80bc38:	f800283a 	ret
  80bc3c:	00800cc4 	movi	r2,51
  80bc40:	15801616 	blt	r2,r22,80bc9c <floor+0x154>
  80bc44:	18befb44 	addi	r2,r3,-1043
  80bc48:	00ffffc4 	movi	r3,-1
  80bc4c:	18b8d83a 	srl	fp,r3,r2
  80bc50:	e104703a 	and	r2,fp,r4
  80bc54:	103feb26 	beq	r2,zero,80bc04 <floor+0xbc>
  80bc58:	00a20034 	movhi	r2,34816
  80bc5c:	109d6704 	addi	r2,r2,30108
  80bc60:	00df8e34 	movhi	r3,32312
  80bc64:	18f90f04 	addi	r3,r3,-7108
  80bc68:	180f883a 	mov	r7,r3
  80bc6c:	100d883a 	mov	r6,r2
  80bc70:	080c4a40 	call	80c4a4 <__adddf3>
  80bc74:	180b883a 	mov	r5,r3
  80bc78:	000d883a 	mov	r6,zero
  80bc7c:	000f883a 	mov	r7,zero
  80bc80:	1009883a 	mov	r4,r2
  80bc84:	080cbbc0 	call	80cbbc <__gtdf2>
  80bc88:	0080210e 	bge	zero,r2,80bd10 <floor+0x1c8>
  80bc8c:	88002216 	blt	r17,zero,80bd18 <floor+0x1d0>
  80bc90:	0704303a 	nor	r2,zero,fp
  80bc94:	90a4703a 	and	r18,r18,r2
  80bc98:	003fd806 	br	80bbfc <floor+0xb4>
  80bc9c:	00810004 	movi	r2,1024
  80bca0:	b0bfd81e 	bne	r22,r2,80bc04 <floor+0xbc>
  80bca4:	800d883a 	mov	r6,r16
  80bca8:	280f883a 	mov	r7,r5
  80bcac:	080c4a40 	call	80c4a4 <__adddf3>
  80bcb0:	1021883a 	mov	r16,r2
  80bcb4:	1823883a 	mov	r17,r3
  80bcb8:	003fd206 	br	80bc04 <floor+0xbc>
  80bcbc:	00a20034 	movhi	r2,34816
  80bcc0:	109d6704 	addi	r2,r2,30108
  80bcc4:	00df8e34 	movhi	r3,32312
  80bcc8:	18f90f04 	addi	r3,r3,-7108
  80bccc:	180f883a 	mov	r7,r3
  80bcd0:	100d883a 	mov	r6,r2
  80bcd4:	080c4a40 	call	80c4a4 <__adddf3>
  80bcd8:	180b883a 	mov	r5,r3
  80bcdc:	000d883a 	mov	r6,zero
  80bce0:	000f883a 	mov	r7,zero
  80bce4:	1009883a 	mov	r4,r2
  80bce8:	080cbbc0 	call	80cbbc <__gtdf2>
  80bcec:	00bfc30e 	bge	zero,r2,80bbfc <floor+0xb4>
  80bcf0:	88001416 	blt	r17,zero,80bd44 <floor+0x1fc>
  80bcf4:	002f883a 	mov	r23,zero
  80bcf8:	0025883a 	mov	r18,zero
  80bcfc:	003fbf06 	br	80bbfc <floor+0xb4>
  80bd00:	00800434 	movhi	r2,16
  80bd04:	1585d83a 	sra	r2,r2,r22
  80bd08:	88af883a 	add	r23,r17,r2
  80bd0c:	003fb806 	br	80bbf0 <floor+0xa8>
  80bd10:	882f883a 	mov	r23,r17
  80bd14:	003fb906 	br	80bbfc <floor+0xb4>
  80bd18:	00800504 	movi	r2,20
  80bd1c:	b0801126 	beq	r22,r2,80bd64 <floor+0x21c>
  80bd20:	00c00d04 	movi	r3,52
  80bd24:	1d87c83a 	sub	r3,r3,r22
  80bd28:	00800044 	movi	r2,1
  80bd2c:	10c4983a 	sll	r2,r2,r3
  80bd30:	8085883a 	add	r2,r16,r2
  80bd34:	1400012e 	bgeu	r2,r16,80bd3c <floor+0x1f4>
  80bd38:	8dc00044 	addi	r23,r17,1
  80bd3c:	1025883a 	mov	r18,r2
  80bd40:	003fd306 	br	80bc90 <floor+0x148>
  80bd44:	00a00034 	movhi	r2,32768
  80bd48:	10bfffc4 	addi	r2,r2,-1
  80bd4c:	8884703a 	and	r2,r17,r2
  80bd50:	8084b03a 	or	r2,r16,r2
  80bd54:	103fee26 	beq	r2,zero,80bd10 <floor+0x1c8>
  80bd58:	05effc34 	movhi	r23,49136
  80bd5c:	0025883a 	mov	r18,zero
  80bd60:	003fa606 	br	80bbfc <floor+0xb4>
  80bd64:	8dc00044 	addi	r23,r17,1
  80bd68:	003fc906 	br	80bc90 <floor+0x148>

0080bd6c <scalbn>:
  80bd6c:	2011883a 	mov	r8,r4
  80bd70:	291ffc2c 	andhi	r4,r5,32752
  80bd74:	2009d53a 	srai	r4,r4,20
  80bd78:	defffd04 	addi	sp,sp,-12
  80bd7c:	dc000015 	stw	r16,0(sp)
  80bd80:	dfc00215 	stw	ra,8(sp)
  80bd84:	dc400115 	stw	r17,4(sp)
  80bd88:	2813883a 	mov	r9,r5
  80bd8c:	2815883a 	mov	r10,r5
  80bd90:	3021883a 	mov	r16,r6
  80bd94:	2000281e 	bne	r4,zero,80be38 <scalbn+0xcc>
  80bd98:	00a00034 	movhi	r2,32768
  80bd9c:	10bfffc4 	addi	r2,r2,-1
  80bda0:	2884703a 	and	r2,r5,r2
  80bda4:	4084b03a 	or	r2,r8,r2
  80bda8:	10001826 	beq	r2,zero,80be0c <scalbn+0xa0>
  80bdac:	0005883a 	mov	r2,zero
  80bdb0:	00d0d434 	movhi	r3,17232
  80bdb4:	4009883a 	mov	r4,r8
  80bdb8:	100d883a 	mov	r6,r2
  80bdbc:	180f883a 	mov	r7,r3
  80bdc0:	080c5180 	call	80c518 <__muldf3>
  80bdc4:	100b883a 	mov	r5,r2
  80bdc8:	1011883a 	mov	r8,r2
  80bdcc:	00bffff4 	movhi	r2,65535
  80bdd0:	108f2c04 	addi	r2,r2,15536
  80bdd4:	180d883a 	mov	r6,r3
  80bdd8:	1813883a 	mov	r9,r3
  80bddc:	8080120e 	bge	r16,r2,80be28 <scalbn+0xbc>
  80bde0:	00b0be74 	movhi	r2,49913
  80bde4:	10bcd644 	addi	r2,r2,-3239
  80bde8:	00c06974 	movhi	r3,421
  80bdec:	18db87c4 	addi	r3,r3,28191
  80bdf0:	2809883a 	mov	r4,r5
  80bdf4:	180f883a 	mov	r7,r3
  80bdf8:	300b883a 	mov	r5,r6
  80bdfc:	100d883a 	mov	r6,r2
  80be00:	080c5180 	call	80c518 <__muldf3>
  80be04:	1011883a 	mov	r8,r2
  80be08:	1813883a 	mov	r9,r3
  80be0c:	4005883a 	mov	r2,r8
  80be10:	4807883a 	mov	r3,r9
  80be14:	dfc00217 	ldw	ra,8(sp)
  80be18:	dc400117 	ldw	r17,4(sp)
  80be1c:	dc000017 	ldw	r16,0(sp)
  80be20:	dec00304 	addi	sp,sp,12
  80be24:	f800283a 	ret
  80be28:	189ffc2c 	andhi	r2,r3,32752
  80be2c:	1005d53a 	srai	r2,r2,20
  80be30:	1815883a 	mov	r10,r3
  80be34:	113ff284 	addi	r4,r2,-54
  80be38:	0081ffc4 	movi	r2,2047
  80be3c:	20801126 	beq	r4,r2,80be84 <scalbn+0x118>
  80be40:	2409883a 	add	r4,r4,r16
  80be44:	0081ff84 	movi	r2,2046
  80be48:	11001c16 	blt	r2,r4,80bebc <scalbn+0x150>
  80be4c:	0100290e 	bge	zero,r4,80bef4 <scalbn+0x188>
  80be50:	200a953a 	slli	r5,r4,20
  80be54:	01200434 	movhi	r4,32784
  80be58:	213fffc4 	addi	r4,r4,-1
  80be5c:	5108703a 	and	r4,r10,r4
  80be60:	2148b03a 	or	r4,r4,r5
  80be64:	2013883a 	mov	r9,r4
  80be68:	4005883a 	mov	r2,r8
  80be6c:	4807883a 	mov	r3,r9
  80be70:	dfc00217 	ldw	ra,8(sp)
  80be74:	dc400117 	ldw	r17,4(sp)
  80be78:	dc000017 	ldw	r16,0(sp)
  80be7c:	dec00304 	addi	sp,sp,12
  80be80:	f800283a 	ret
  80be84:	480f883a 	mov	r7,r9
  80be88:	4009883a 	mov	r4,r8
  80be8c:	480b883a 	mov	r5,r9
  80be90:	400d883a 	mov	r6,r8
  80be94:	080c4a40 	call	80c4a4 <__adddf3>
  80be98:	1011883a 	mov	r8,r2
  80be9c:	1813883a 	mov	r9,r3
  80bea0:	4005883a 	mov	r2,r8
  80bea4:	4807883a 	mov	r3,r9
  80bea8:	dfc00217 	ldw	ra,8(sp)
  80beac:	dc400117 	ldw	r17,4(sp)
  80beb0:	dc000017 	ldw	r16,0(sp)
  80beb4:	dec00304 	addi	sp,sp,12
  80beb8:	f800283a 	ret
  80bebc:	04220034 	movhi	r16,34816
  80bec0:	841d6704 	addi	r16,r16,30108
  80bec4:	045f8e34 	movhi	r17,32312
  80bec8:	8c790f04 	addi	r17,r17,-7108
  80becc:	480f883a 	mov	r7,r9
  80bed0:	400d883a 	mov	r6,r8
  80bed4:	8009883a 	mov	r4,r16
  80bed8:	880b883a 	mov	r5,r17
  80bedc:	080bf4c0 	call	80bf4c <copysign>
  80bee0:	180b883a 	mov	r5,r3
  80bee4:	800d883a 	mov	r6,r16
  80bee8:	880f883a 	mov	r7,r17
  80beec:	1009883a 	mov	r4,r2
  80bef0:	003fc306 	br	80be00 <scalbn+0x94>
  80bef4:	00bff284 	movi	r2,-54
  80bef8:	11000716 	blt	r2,r4,80bf18 <scalbn+0x1ac>
  80befc:	00b0d414 	movui	r2,50000
  80bf00:	143fee16 	blt	r2,r16,80bebc <scalbn+0x150>
  80bf04:	0430be74 	movhi	r16,49913
  80bf08:	843cd644 	addi	r16,r16,-3239
  80bf0c:	04406974 	movhi	r17,421
  80bf10:	8c5b87c4 	addi	r17,r17,28191
  80bf14:	003fed06 	br	80becc <scalbn+0x160>
  80bf18:	21000d84 	addi	r4,r4,54
  80bf1c:	2008953a 	slli	r4,r4,20
  80bf20:	01e00434 	movhi	r7,32784
  80bf24:	39ffffc4 	addi	r7,r7,-1
  80bf28:	51ce703a 	and	r7,r10,r7
  80bf2c:	390eb03a 	or	r7,r7,r4
  80bf30:	024f2434 	movhi	r9,15504
  80bf34:	4009883a 	mov	r4,r8
  80bf38:	0011883a 	mov	r8,zero
  80bf3c:	380b883a 	mov	r5,r7
  80bf40:	400d883a 	mov	r6,r8
  80bf44:	480f883a 	mov	r7,r9
  80bf48:	003fad06 	br	80be00 <scalbn+0x94>

0080bf4c <copysign>:
  80bf4c:	3813883a 	mov	r9,r7
  80bf50:	01e00034 	movhi	r7,32768
  80bf54:	39ffffc4 	addi	r7,r7,-1
  80bf58:	394e703a 	and	r7,r7,r5
  80bf5c:	4aa0002c 	andhi	r10,r9,32768
  80bf60:	3a8eb03a 	or	r7,r7,r10
  80bf64:	2005883a 	mov	r2,r4
  80bf68:	3807883a 	mov	r3,r7
  80bf6c:	f800283a 	ret

0080bf70 <__fixunsdfsi>:
  80bf70:	defffb04 	addi	sp,sp,-20
  80bf74:	dc400115 	stw	r17,4(sp)
  80bf78:	dc000015 	stw	r16,0(sp)
  80bf7c:	04507834 	movhi	r17,16864
  80bf80:	0021883a 	mov	r16,zero
  80bf84:	800d883a 	mov	r6,r16
  80bf88:	880f883a 	mov	r7,r17
  80bf8c:	dcc00315 	stw	r19,12(sp)
  80bf90:	dc800215 	stw	r18,8(sp)
  80bf94:	2827883a 	mov	r19,r5
  80bf98:	2025883a 	mov	r18,r4
  80bf9c:	dfc00415 	stw	ra,16(sp)
  80bfa0:	080cc440 	call	80cc44 <__gedf2>
  80bfa4:	000d883a 	mov	r6,zero
  80bfa8:	880f883a 	mov	r7,r17
  80bfac:	980b883a 	mov	r5,r19
  80bfb0:	9009883a 	mov	r4,r18
  80bfb4:	10000d16 	blt	r2,zero,80bfec <__fixunsdfsi+0x7c>
  80bfb8:	080c4240 	call	80c424 <__subdf3>
  80bfbc:	180b883a 	mov	r5,r3
  80bfc0:	1009883a 	mov	r4,r2
  80bfc4:	080cdc40 	call	80cdc4 <__fixdfsi>
  80bfc8:	00e00034 	movhi	r3,32768
  80bfcc:	10c5883a 	add	r2,r2,r3
  80bfd0:	dfc00417 	ldw	ra,16(sp)
  80bfd4:	dcc00317 	ldw	r19,12(sp)
  80bfd8:	dc800217 	ldw	r18,8(sp)
  80bfdc:	dc400117 	ldw	r17,4(sp)
  80bfe0:	dc000017 	ldw	r16,0(sp)
  80bfe4:	dec00504 	addi	sp,sp,20
  80bfe8:	f800283a 	ret
  80bfec:	980b883a 	mov	r5,r19
  80bff0:	9009883a 	mov	r4,r18
  80bff4:	080cdc40 	call	80cdc4 <__fixdfsi>
  80bff8:	dfc00417 	ldw	ra,16(sp)
  80bffc:	dcc00317 	ldw	r19,12(sp)
  80c000:	dc800217 	ldw	r18,8(sp)
  80c004:	dc400117 	ldw	r17,4(sp)
  80c008:	dc000017 	ldw	r16,0(sp)
  80c00c:	dec00504 	addi	sp,sp,20
  80c010:	f800283a 	ret

0080c014 <_fpadd_parts>:
  80c014:	defff804 	addi	sp,sp,-32
  80c018:	dcc00315 	stw	r19,12(sp)
  80c01c:	2027883a 	mov	r19,r4
  80c020:	21000017 	ldw	r4,0(r4)
  80c024:	00c00044 	movi	r3,1
  80c028:	dd400515 	stw	r21,20(sp)
  80c02c:	dd000415 	stw	r20,16(sp)
  80c030:	ddc00715 	stw	r23,28(sp)
  80c034:	dd800615 	stw	r22,24(sp)
  80c038:	dc800215 	stw	r18,8(sp)
  80c03c:	dc400115 	stw	r17,4(sp)
  80c040:	dc000015 	stw	r16,0(sp)
  80c044:	282b883a 	mov	r21,r5
  80c048:	3029883a 	mov	r20,r6
  80c04c:	1900632e 	bgeu	r3,r4,80c1dc <_fpadd_parts+0x1c8>
  80c050:	28800017 	ldw	r2,0(r5)
  80c054:	1880812e 	bgeu	r3,r2,80c25c <_fpadd_parts+0x248>
  80c058:	00c00104 	movi	r3,4
  80c05c:	20c0dc26 	beq	r4,r3,80c3d0 <_fpadd_parts+0x3bc>
  80c060:	10c07e26 	beq	r2,r3,80c25c <_fpadd_parts+0x248>
  80c064:	00c00084 	movi	r3,2
  80c068:	10c06726 	beq	r2,r3,80c208 <_fpadd_parts+0x1f4>
  80c06c:	20c07b26 	beq	r4,r3,80c25c <_fpadd_parts+0x248>
  80c070:	9dc00217 	ldw	r23,8(r19)
  80c074:	28c00217 	ldw	r3,8(r5)
  80c078:	9c400317 	ldw	r17,12(r19)
  80c07c:	2bc00317 	ldw	r15,12(r5)
  80c080:	b8cdc83a 	sub	r6,r23,r3
  80c084:	9c800417 	ldw	r18,16(r19)
  80c088:	2c000417 	ldw	r16,16(r5)
  80c08c:	3009883a 	mov	r4,r6
  80c090:	30009716 	blt	r6,zero,80c2f0 <_fpadd_parts+0x2dc>
  80c094:	00800fc4 	movi	r2,63
  80c098:	11806b16 	blt	r2,r6,80c248 <_fpadd_parts+0x234>
  80c09c:	0100a40e 	bge	zero,r4,80c330 <_fpadd_parts+0x31c>
  80c0a0:	35bff804 	addi	r22,r6,-32
  80c0a4:	b000bc16 	blt	r22,zero,80c398 <_fpadd_parts+0x384>
  80c0a8:	8596d83a 	srl	r11,r16,r22
  80c0ac:	0019883a 	mov	r12,zero
  80c0b0:	0013883a 	mov	r9,zero
  80c0b4:	01000044 	movi	r4,1
  80c0b8:	0015883a 	mov	r10,zero
  80c0bc:	b000be16 	blt	r22,zero,80c3b8 <_fpadd_parts+0x3a4>
  80c0c0:	2590983a 	sll	r8,r4,r22
  80c0c4:	000f883a 	mov	r7,zero
  80c0c8:	00bfffc4 	movi	r2,-1
  80c0cc:	3889883a 	add	r4,r7,r2
  80c0d0:	408b883a 	add	r5,r8,r2
  80c0d4:	21cd803a 	cmpltu	r6,r4,r7
  80c0d8:	314b883a 	add	r5,r6,r5
  80c0dc:	7904703a 	and	r2,r15,r4
  80c0e0:	8146703a 	and	r3,r16,r5
  80c0e4:	10c4b03a 	or	r2,r2,r3
  80c0e8:	10000226 	beq	r2,zero,80c0f4 <_fpadd_parts+0xe0>
  80c0ec:	02400044 	movi	r9,1
  80c0f0:	0015883a 	mov	r10,zero
  80c0f4:	5a5eb03a 	or	r15,r11,r9
  80c0f8:	62a0b03a 	or	r16,r12,r10
  80c0fc:	99400117 	ldw	r5,4(r19)
  80c100:	a8800117 	ldw	r2,4(r21)
  80c104:	28806e26 	beq	r5,r2,80c2c0 <_fpadd_parts+0x2ac>
  80c108:	28006626 	beq	r5,zero,80c2a4 <_fpadd_parts+0x290>
  80c10c:	7c45c83a 	sub	r2,r15,r17
  80c110:	7889803a 	cmpltu	r4,r15,r2
  80c114:	8487c83a 	sub	r3,r16,r18
  80c118:	1909c83a 	sub	r4,r3,r4
  80c11c:	100d883a 	mov	r6,r2
  80c120:	200f883a 	mov	r7,r4
  80c124:	38007716 	blt	r7,zero,80c304 <_fpadd_parts+0x2f0>
  80c128:	a5c00215 	stw	r23,8(r20)
  80c12c:	a1c00415 	stw	r7,16(r20)
  80c130:	a0000115 	stw	zero,4(r20)
  80c134:	a1800315 	stw	r6,12(r20)
  80c138:	a2000317 	ldw	r8,12(r20)
  80c13c:	a2400417 	ldw	r9,16(r20)
  80c140:	00bfffc4 	movi	r2,-1
  80c144:	408b883a 	add	r5,r8,r2
  80c148:	2a09803a 	cmpltu	r4,r5,r8
  80c14c:	488d883a 	add	r6,r9,r2
  80c150:	01c40034 	movhi	r7,4096
  80c154:	39ffffc4 	addi	r7,r7,-1
  80c158:	218d883a 	add	r6,r4,r6
  80c15c:	39801736 	bltu	r7,r6,80c1bc <_fpadd_parts+0x1a8>
  80c160:	31c06526 	beq	r6,r7,80c2f8 <_fpadd_parts+0x2e4>
  80c164:	a3000217 	ldw	r12,8(r20)
  80c168:	4209883a 	add	r4,r8,r8
  80c16c:	00bfffc4 	movi	r2,-1
  80c170:	220f803a 	cmpltu	r7,r4,r8
  80c174:	4a4b883a 	add	r5,r9,r9
  80c178:	394f883a 	add	r7,r7,r5
  80c17c:	2095883a 	add	r10,r4,r2
  80c180:	3897883a 	add	r11,r7,r2
  80c184:	510d803a 	cmpltu	r6,r10,r4
  80c188:	6099883a 	add	r12,r12,r2
  80c18c:	32d7883a 	add	r11,r6,r11
  80c190:	00840034 	movhi	r2,4096
  80c194:	10bfffc4 	addi	r2,r2,-1
  80c198:	2011883a 	mov	r8,r4
  80c19c:	3813883a 	mov	r9,r7
  80c1a0:	a1000315 	stw	r4,12(r20)
  80c1a4:	a1c00415 	stw	r7,16(r20)
  80c1a8:	a3000215 	stw	r12,8(r20)
  80c1ac:	12c00336 	bltu	r2,r11,80c1bc <_fpadd_parts+0x1a8>
  80c1b0:	58bfed1e 	bne	r11,r2,80c168 <_fpadd_parts+0x154>
  80c1b4:	00bfff84 	movi	r2,-2
  80c1b8:	12bfeb2e 	bgeu	r2,r10,80c168 <_fpadd_parts+0x154>
  80c1bc:	a2800417 	ldw	r10,16(r20)
  80c1c0:	008000c4 	movi	r2,3
  80c1c4:	00c80034 	movhi	r3,8192
  80c1c8:	18ffffc4 	addi	r3,r3,-1
  80c1cc:	a2400317 	ldw	r9,12(r20)
  80c1d0:	a0800015 	stw	r2,0(r20)
  80c1d4:	1a802336 	bltu	r3,r10,80c264 <_fpadd_parts+0x250>
  80c1d8:	a027883a 	mov	r19,r20
  80c1dc:	9805883a 	mov	r2,r19
  80c1e0:	ddc00717 	ldw	r23,28(sp)
  80c1e4:	dd800617 	ldw	r22,24(sp)
  80c1e8:	dd400517 	ldw	r21,20(sp)
  80c1ec:	dd000417 	ldw	r20,16(sp)
  80c1f0:	dcc00317 	ldw	r19,12(sp)
  80c1f4:	dc800217 	ldw	r18,8(sp)
  80c1f8:	dc400117 	ldw	r17,4(sp)
  80c1fc:	dc000017 	ldw	r16,0(sp)
  80c200:	dec00804 	addi	sp,sp,32
  80c204:	f800283a 	ret
  80c208:	20fff41e 	bne	r4,r3,80c1dc <_fpadd_parts+0x1c8>
  80c20c:	31000015 	stw	r4,0(r6)
  80c210:	98800117 	ldw	r2,4(r19)
  80c214:	30800115 	stw	r2,4(r6)
  80c218:	98c00217 	ldw	r3,8(r19)
  80c21c:	30c00215 	stw	r3,8(r6)
  80c220:	98800317 	ldw	r2,12(r19)
  80c224:	30800315 	stw	r2,12(r6)
  80c228:	98c00417 	ldw	r3,16(r19)
  80c22c:	30c00415 	stw	r3,16(r6)
  80c230:	98800117 	ldw	r2,4(r19)
  80c234:	28c00117 	ldw	r3,4(r5)
  80c238:	3027883a 	mov	r19,r6
  80c23c:	10c4703a 	and	r2,r2,r3
  80c240:	30800115 	stw	r2,4(r6)
  80c244:	003fe506 	br	80c1dc <_fpadd_parts+0x1c8>
  80c248:	1dc02616 	blt	r3,r23,80c2e4 <_fpadd_parts+0x2d0>
  80c24c:	0023883a 	mov	r17,zero
  80c250:	182f883a 	mov	r23,r3
  80c254:	0025883a 	mov	r18,zero
  80c258:	003fa806 	br	80c0fc <_fpadd_parts+0xe8>
  80c25c:	a827883a 	mov	r19,r21
  80c260:	003fde06 	br	80c1dc <_fpadd_parts+0x1c8>
  80c264:	01800044 	movi	r6,1
  80c268:	500497fa 	slli	r2,r10,31
  80c26c:	4808d07a 	srli	r4,r9,1
  80c270:	518ad83a 	srl	r5,r10,r6
  80c274:	a2000217 	ldw	r8,8(r20)
  80c278:	1108b03a 	or	r4,r2,r4
  80c27c:	0007883a 	mov	r3,zero
  80c280:	4984703a 	and	r2,r9,r6
  80c284:	208cb03a 	or	r6,r4,r2
  80c288:	28ceb03a 	or	r7,r5,r3
  80c28c:	42000044 	addi	r8,r8,1
  80c290:	a027883a 	mov	r19,r20
  80c294:	a1c00415 	stw	r7,16(r20)
  80c298:	a2000215 	stw	r8,8(r20)
  80c29c:	a1800315 	stw	r6,12(r20)
  80c2a0:	003fce06 	br	80c1dc <_fpadd_parts+0x1c8>
  80c2a4:	8bc5c83a 	sub	r2,r17,r15
  80c2a8:	8889803a 	cmpltu	r4,r17,r2
  80c2ac:	9407c83a 	sub	r3,r18,r16
  80c2b0:	1909c83a 	sub	r4,r3,r4
  80c2b4:	100d883a 	mov	r6,r2
  80c2b8:	200f883a 	mov	r7,r4
  80c2bc:	003f9906 	br	80c124 <_fpadd_parts+0x110>
  80c2c0:	7c45883a 	add	r2,r15,r17
  80c2c4:	13c9803a 	cmpltu	r4,r2,r15
  80c2c8:	8487883a 	add	r3,r16,r18
  80c2cc:	20c9883a 	add	r4,r4,r3
  80c2d0:	a1400115 	stw	r5,4(r20)
  80c2d4:	a5c00215 	stw	r23,8(r20)
  80c2d8:	a0800315 	stw	r2,12(r20)
  80c2dc:	a1000415 	stw	r4,16(r20)
  80c2e0:	003fb606 	br	80c1bc <_fpadd_parts+0x1a8>
  80c2e4:	001f883a 	mov	r15,zero
  80c2e8:	0021883a 	mov	r16,zero
  80c2ec:	003f8306 	br	80c0fc <_fpadd_parts+0xe8>
  80c2f0:	018dc83a 	sub	r6,zero,r6
  80c2f4:	003f6706 	br	80c094 <_fpadd_parts+0x80>
  80c2f8:	00bfff84 	movi	r2,-2
  80c2fc:	117faf36 	bltu	r2,r5,80c1bc <_fpadd_parts+0x1a8>
  80c300:	003f9806 	br	80c164 <_fpadd_parts+0x150>
  80c304:	0005883a 	mov	r2,zero
  80c308:	1189c83a 	sub	r4,r2,r6
  80c30c:	1105803a 	cmpltu	r2,r2,r4
  80c310:	01cbc83a 	sub	r5,zero,r7
  80c314:	2885c83a 	sub	r2,r5,r2
  80c318:	01800044 	movi	r6,1
  80c31c:	a1800115 	stw	r6,4(r20)
  80c320:	a5c00215 	stw	r23,8(r20)
  80c324:	a1000315 	stw	r4,12(r20)
  80c328:	a0800415 	stw	r2,16(r20)
  80c32c:	003f8206 	br	80c138 <_fpadd_parts+0x124>
  80c330:	203f7226 	beq	r4,zero,80c0fc <_fpadd_parts+0xe8>
  80c334:	35bff804 	addi	r22,r6,-32
  80c338:	b9af883a 	add	r23,r23,r6
  80c33c:	b0003116 	blt	r22,zero,80c404 <_fpadd_parts+0x3f0>
  80c340:	959ad83a 	srl	r13,r18,r22
  80c344:	001d883a 	mov	r14,zero
  80c348:	000f883a 	mov	r7,zero
  80c34c:	01000044 	movi	r4,1
  80c350:	0011883a 	mov	r8,zero
  80c354:	b0002516 	blt	r22,zero,80c3ec <_fpadd_parts+0x3d8>
  80c358:	2594983a 	sll	r10,r4,r22
  80c35c:	0013883a 	mov	r9,zero
  80c360:	00bfffc4 	movi	r2,-1
  80c364:	4889883a 	add	r4,r9,r2
  80c368:	508b883a 	add	r5,r10,r2
  80c36c:	224d803a 	cmpltu	r6,r4,r9
  80c370:	314b883a 	add	r5,r6,r5
  80c374:	8904703a 	and	r2,r17,r4
  80c378:	9146703a 	and	r3,r18,r5
  80c37c:	10c4b03a 	or	r2,r2,r3
  80c380:	10000226 	beq	r2,zero,80c38c <_fpadd_parts+0x378>
  80c384:	01c00044 	movi	r7,1
  80c388:	0011883a 	mov	r8,zero
  80c38c:	69e2b03a 	or	r17,r13,r7
  80c390:	7224b03a 	or	r18,r14,r8
  80c394:	003f5906 	br	80c0fc <_fpadd_parts+0xe8>
  80c398:	8407883a 	add	r3,r16,r16
  80c39c:	008007c4 	movi	r2,31
  80c3a0:	1185c83a 	sub	r2,r2,r6
  80c3a4:	1886983a 	sll	r3,r3,r2
  80c3a8:	7996d83a 	srl	r11,r15,r6
  80c3ac:	8198d83a 	srl	r12,r16,r6
  80c3b0:	1ad6b03a 	or	r11,r3,r11
  80c3b4:	003f3e06 	br	80c0b0 <_fpadd_parts+0x9c>
  80c3b8:	2006d07a 	srli	r3,r4,1
  80c3bc:	008007c4 	movi	r2,31
  80c3c0:	1185c83a 	sub	r2,r2,r6
  80c3c4:	1890d83a 	srl	r8,r3,r2
  80c3c8:	218e983a 	sll	r7,r4,r6
  80c3cc:	003f3e06 	br	80c0c8 <_fpadd_parts+0xb4>
  80c3d0:	113f821e 	bne	r2,r4,80c1dc <_fpadd_parts+0x1c8>
  80c3d4:	28c00117 	ldw	r3,4(r5)
  80c3d8:	98800117 	ldw	r2,4(r19)
  80c3dc:	10ff7f26 	beq	r2,r3,80c1dc <_fpadd_parts+0x1c8>
  80c3e0:	04c020b4 	movhi	r19,130
  80c3e4:	9ccc0d04 	addi	r19,r19,12340
  80c3e8:	003f7c06 	br	80c1dc <_fpadd_parts+0x1c8>
  80c3ec:	2006d07a 	srli	r3,r4,1
  80c3f0:	008007c4 	movi	r2,31
  80c3f4:	1185c83a 	sub	r2,r2,r6
  80c3f8:	1894d83a 	srl	r10,r3,r2
  80c3fc:	2192983a 	sll	r9,r4,r6
  80c400:	003fd706 	br	80c360 <_fpadd_parts+0x34c>
  80c404:	9487883a 	add	r3,r18,r18
  80c408:	008007c4 	movi	r2,31
  80c40c:	1185c83a 	sub	r2,r2,r6
  80c410:	1886983a 	sll	r3,r3,r2
  80c414:	899ad83a 	srl	r13,r17,r6
  80c418:	919cd83a 	srl	r14,r18,r6
  80c41c:	1b5ab03a 	or	r13,r3,r13
  80c420:	003fc906 	br	80c348 <_fpadd_parts+0x334>

0080c424 <__subdf3>:
  80c424:	deffea04 	addi	sp,sp,-88
  80c428:	dcc01415 	stw	r19,80(sp)
  80c42c:	dcc00404 	addi	r19,sp,16
  80c430:	2011883a 	mov	r8,r4
  80c434:	2813883a 	mov	r9,r5
  80c438:	dc401315 	stw	r17,76(sp)
  80c43c:	d809883a 	mov	r4,sp
  80c440:	980b883a 	mov	r5,r19
  80c444:	dc400904 	addi	r17,sp,36
  80c448:	dfc01515 	stw	ra,84(sp)
  80c44c:	da400115 	stw	r9,4(sp)
  80c450:	d9c00315 	stw	r7,12(sp)
  80c454:	da000015 	stw	r8,0(sp)
  80c458:	d9800215 	stw	r6,8(sp)
  80c45c:	080d4140 	call	80d414 <__unpack_d>
  80c460:	d9000204 	addi	r4,sp,8
  80c464:	880b883a 	mov	r5,r17
  80c468:	080d4140 	call	80d414 <__unpack_d>
  80c46c:	d8800a17 	ldw	r2,40(sp)
  80c470:	880b883a 	mov	r5,r17
  80c474:	9809883a 	mov	r4,r19
  80c478:	d9800e04 	addi	r6,sp,56
  80c47c:	1080005c 	xori	r2,r2,1
  80c480:	d8800a15 	stw	r2,40(sp)
  80c484:	080c0140 	call	80c014 <_fpadd_parts>
  80c488:	1009883a 	mov	r4,r2
  80c48c:	080d1000 	call	80d100 <__pack_d>
  80c490:	dfc01517 	ldw	ra,84(sp)
  80c494:	dcc01417 	ldw	r19,80(sp)
  80c498:	dc401317 	ldw	r17,76(sp)
  80c49c:	dec01604 	addi	sp,sp,88
  80c4a0:	f800283a 	ret

0080c4a4 <__adddf3>:
  80c4a4:	deffea04 	addi	sp,sp,-88
  80c4a8:	dcc01415 	stw	r19,80(sp)
  80c4ac:	dcc00404 	addi	r19,sp,16
  80c4b0:	2011883a 	mov	r8,r4
  80c4b4:	2813883a 	mov	r9,r5
  80c4b8:	dc401315 	stw	r17,76(sp)
  80c4bc:	d809883a 	mov	r4,sp
  80c4c0:	980b883a 	mov	r5,r19
  80c4c4:	dc400904 	addi	r17,sp,36
  80c4c8:	dfc01515 	stw	ra,84(sp)
  80c4cc:	da400115 	stw	r9,4(sp)
  80c4d0:	d9c00315 	stw	r7,12(sp)
  80c4d4:	da000015 	stw	r8,0(sp)
  80c4d8:	d9800215 	stw	r6,8(sp)
  80c4dc:	080d4140 	call	80d414 <__unpack_d>
  80c4e0:	d9000204 	addi	r4,sp,8
  80c4e4:	880b883a 	mov	r5,r17
  80c4e8:	080d4140 	call	80d414 <__unpack_d>
  80c4ec:	d9800e04 	addi	r6,sp,56
  80c4f0:	9809883a 	mov	r4,r19
  80c4f4:	880b883a 	mov	r5,r17
  80c4f8:	080c0140 	call	80c014 <_fpadd_parts>
  80c4fc:	1009883a 	mov	r4,r2
  80c500:	080d1000 	call	80d100 <__pack_d>
  80c504:	dfc01517 	ldw	ra,84(sp)
  80c508:	dcc01417 	ldw	r19,80(sp)
  80c50c:	dc401317 	ldw	r17,76(sp)
  80c510:	dec01604 	addi	sp,sp,88
  80c514:	f800283a 	ret

0080c518 <__muldf3>:
  80c518:	deffe004 	addi	sp,sp,-128
  80c51c:	dc401815 	stw	r17,96(sp)
  80c520:	dc400404 	addi	r17,sp,16
  80c524:	2011883a 	mov	r8,r4
  80c528:	2813883a 	mov	r9,r5
  80c52c:	dc001715 	stw	r16,92(sp)
  80c530:	d809883a 	mov	r4,sp
  80c534:	880b883a 	mov	r5,r17
  80c538:	dc000904 	addi	r16,sp,36
  80c53c:	dfc01f15 	stw	ra,124(sp)
  80c540:	da400115 	stw	r9,4(sp)
  80c544:	d9c00315 	stw	r7,12(sp)
  80c548:	da000015 	stw	r8,0(sp)
  80c54c:	d9800215 	stw	r6,8(sp)
  80c550:	ddc01e15 	stw	r23,120(sp)
  80c554:	dd801d15 	stw	r22,116(sp)
  80c558:	dd401c15 	stw	r21,112(sp)
  80c55c:	dd001b15 	stw	r20,108(sp)
  80c560:	dcc01a15 	stw	r19,104(sp)
  80c564:	dc801915 	stw	r18,100(sp)
  80c568:	080d4140 	call	80d414 <__unpack_d>
  80c56c:	d9000204 	addi	r4,sp,8
  80c570:	800b883a 	mov	r5,r16
  80c574:	080d4140 	call	80d414 <__unpack_d>
  80c578:	d9000417 	ldw	r4,16(sp)
  80c57c:	00800044 	movi	r2,1
  80c580:	1100102e 	bgeu	r2,r4,80c5c4 <__muldf3+0xac>
  80c584:	d8c00917 	ldw	r3,36(sp)
  80c588:	10c0062e 	bgeu	r2,r3,80c5a4 <__muldf3+0x8c>
  80c58c:	00800104 	movi	r2,4
  80c590:	20800a26 	beq	r4,r2,80c5bc <__muldf3+0xa4>
  80c594:	1880cc26 	beq	r3,r2,80c8c8 <__muldf3+0x3b0>
  80c598:	00800084 	movi	r2,2
  80c59c:	20800926 	beq	r4,r2,80c5c4 <__muldf3+0xac>
  80c5a0:	1880191e 	bne	r3,r2,80c608 <__muldf3+0xf0>
  80c5a4:	d8c00a17 	ldw	r3,40(sp)
  80c5a8:	d8800517 	ldw	r2,20(sp)
  80c5ac:	8009883a 	mov	r4,r16
  80c5b0:	10c4c03a 	cmpne	r2,r2,r3
  80c5b4:	d8800a15 	stw	r2,40(sp)
  80c5b8:	00000706 	br	80c5d8 <__muldf3+0xc0>
  80c5bc:	00800084 	movi	r2,2
  80c5c0:	1880c326 	beq	r3,r2,80c8d0 <__muldf3+0x3b8>
  80c5c4:	d8800517 	ldw	r2,20(sp)
  80c5c8:	d8c00a17 	ldw	r3,40(sp)
  80c5cc:	8809883a 	mov	r4,r17
  80c5d0:	10c4c03a 	cmpne	r2,r2,r3
  80c5d4:	d8800515 	stw	r2,20(sp)
  80c5d8:	080d1000 	call	80d100 <__pack_d>
  80c5dc:	dfc01f17 	ldw	ra,124(sp)
  80c5e0:	ddc01e17 	ldw	r23,120(sp)
  80c5e4:	dd801d17 	ldw	r22,116(sp)
  80c5e8:	dd401c17 	ldw	r21,112(sp)
  80c5ec:	dd001b17 	ldw	r20,108(sp)
  80c5f0:	dcc01a17 	ldw	r19,104(sp)
  80c5f4:	dc801917 	ldw	r18,100(sp)
  80c5f8:	dc401817 	ldw	r17,96(sp)
  80c5fc:	dc001717 	ldw	r16,92(sp)
  80c600:	dec02004 	addi	sp,sp,128
  80c604:	f800283a 	ret
  80c608:	dd800717 	ldw	r22,28(sp)
  80c60c:	dc800c17 	ldw	r18,48(sp)
  80c610:	002b883a 	mov	r21,zero
  80c614:	0023883a 	mov	r17,zero
  80c618:	a80b883a 	mov	r5,r21
  80c61c:	b00d883a 	mov	r6,r22
  80c620:	880f883a 	mov	r7,r17
  80c624:	ddc00817 	ldw	r23,32(sp)
  80c628:	dcc00d17 	ldw	r19,52(sp)
  80c62c:	9009883a 	mov	r4,r18
  80c630:	080cfe80 	call	80cfe8 <__muldi3>
  80c634:	001b883a 	mov	r13,zero
  80c638:	680f883a 	mov	r7,r13
  80c63c:	b009883a 	mov	r4,r22
  80c640:	000b883a 	mov	r5,zero
  80c644:	980d883a 	mov	r6,r19
  80c648:	b82d883a 	mov	r22,r23
  80c64c:	002f883a 	mov	r23,zero
  80c650:	db401615 	stw	r13,88(sp)
  80c654:	d8801315 	stw	r2,76(sp)
  80c658:	d8c01415 	stw	r3,80(sp)
  80c65c:	dcc01515 	stw	r19,84(sp)
  80c660:	080cfe80 	call	80cfe8 <__muldi3>
  80c664:	b00d883a 	mov	r6,r22
  80c668:	000b883a 	mov	r5,zero
  80c66c:	9009883a 	mov	r4,r18
  80c670:	b80f883a 	mov	r7,r23
  80c674:	1021883a 	mov	r16,r2
  80c678:	1823883a 	mov	r17,r3
  80c67c:	080cfe80 	call	80cfe8 <__muldi3>
  80c680:	8085883a 	add	r2,r16,r2
  80c684:	140d803a 	cmpltu	r6,r2,r16
  80c688:	88c7883a 	add	r3,r17,r3
  80c68c:	30cd883a 	add	r6,r6,r3
  80c690:	1029883a 	mov	r20,r2
  80c694:	302b883a 	mov	r21,r6
  80c698:	da801317 	ldw	r10,76(sp)
  80c69c:	dac01417 	ldw	r11,80(sp)
  80c6a0:	db001517 	ldw	r12,84(sp)
  80c6a4:	db401617 	ldw	r13,88(sp)
  80c6a8:	3440612e 	bgeu	r6,r17,80c830 <__muldf3+0x318>
  80c6ac:	0009883a 	mov	r4,zero
  80c6b0:	5105883a 	add	r2,r10,r4
  80c6b4:	128d803a 	cmpltu	r6,r2,r10
  80c6b8:	5d07883a 	add	r3,r11,r20
  80c6bc:	30cd883a 	add	r6,r6,r3
  80c6c0:	0021883a 	mov	r16,zero
  80c6c4:	04400044 	movi	r17,1
  80c6c8:	1025883a 	mov	r18,r2
  80c6cc:	3027883a 	mov	r19,r6
  80c6d0:	32c06236 	bltu	r6,r11,80c85c <__muldf3+0x344>
  80c6d4:	59807a26 	beq	r11,r6,80c8c0 <__muldf3+0x3a8>
  80c6d8:	680b883a 	mov	r5,r13
  80c6dc:	b80f883a 	mov	r7,r23
  80c6e0:	6009883a 	mov	r4,r12
  80c6e4:	b00d883a 	mov	r6,r22
  80c6e8:	080cfe80 	call	80cfe8 <__muldi3>
  80c6ec:	1009883a 	mov	r4,r2
  80c6f0:	000f883a 	mov	r7,zero
  80c6f4:	1545883a 	add	r2,r2,r21
  80c6f8:	1111803a 	cmpltu	r8,r2,r4
  80c6fc:	19c7883a 	add	r3,r3,r7
  80c700:	40c7883a 	add	r3,r8,r3
  80c704:	88cb883a 	add	r5,r17,r3
  80c708:	d8c00617 	ldw	r3,24(sp)
  80c70c:	8089883a 	add	r4,r16,r2
  80c710:	d8800b17 	ldw	r2,44(sp)
  80c714:	18c00104 	addi	r3,r3,4
  80c718:	240d803a 	cmpltu	r6,r4,r16
  80c71c:	10c7883a 	add	r3,r2,r3
  80c720:	2013883a 	mov	r9,r4
  80c724:	d8800a17 	ldw	r2,40(sp)
  80c728:	d9000517 	ldw	r4,20(sp)
  80c72c:	314d883a 	add	r6,r6,r5
  80c730:	3015883a 	mov	r10,r6
  80c734:	2088c03a 	cmpne	r4,r4,r2
  80c738:	00880034 	movhi	r2,8192
  80c73c:	10bfffc4 	addi	r2,r2,-1
  80c740:	d9000f15 	stw	r4,60(sp)
  80c744:	d8c01015 	stw	r3,64(sp)
  80c748:	1180162e 	bgeu	r2,r6,80c7a4 <__muldf3+0x28c>
  80c74c:	1811883a 	mov	r8,r3
  80c750:	101f883a 	mov	r15,r2
  80c754:	980497fa 	slli	r2,r19,31
  80c758:	9016d07a 	srli	r11,r18,1
  80c75c:	500697fa 	slli	r3,r10,31
  80c760:	480cd07a 	srli	r6,r9,1
  80c764:	500ed07a 	srli	r7,r10,1
  80c768:	12d6b03a 	or	r11,r2,r11
  80c76c:	00800044 	movi	r2,1
  80c770:	198cb03a 	or	r6,r3,r6
  80c774:	4888703a 	and	r4,r9,r2
  80c778:	9818d07a 	srli	r12,r19,1
  80c77c:	001b883a 	mov	r13,zero
  80c780:	03a00034 	movhi	r14,32768
  80c784:	3013883a 	mov	r9,r6
  80c788:	3815883a 	mov	r10,r7
  80c78c:	4091883a 	add	r8,r8,r2
  80c790:	20000226 	beq	r4,zero,80c79c <__muldf3+0x284>
  80c794:	5b64b03a 	or	r18,r11,r13
  80c798:	63a6b03a 	or	r19,r12,r14
  80c79c:	7abfed36 	bltu	r15,r10,80c754 <__muldf3+0x23c>
  80c7a0:	da001015 	stw	r8,64(sp)
  80c7a4:	00840034 	movhi	r2,4096
  80c7a8:	10bfffc4 	addi	r2,r2,-1
  80c7ac:	12801436 	bltu	r2,r10,80c800 <__muldf3+0x2e8>
  80c7b0:	da001017 	ldw	r8,64(sp)
  80c7b4:	101f883a 	mov	r15,r2
  80c7b8:	4a45883a 	add	r2,r9,r9
  80c7bc:	124d803a 	cmpltu	r6,r2,r9
  80c7c0:	5287883a 	add	r3,r10,r10
  80c7c4:	9497883a 	add	r11,r18,r18
  80c7c8:	5c8f803a 	cmpltu	r7,r11,r18
  80c7cc:	9cd9883a 	add	r12,r19,r19
  80c7d0:	01000044 	movi	r4,1
  80c7d4:	30cd883a 	add	r6,r6,r3
  80c7d8:	3b0f883a 	add	r7,r7,r12
  80c7dc:	423fffc4 	addi	r8,r8,-1
  80c7e0:	1013883a 	mov	r9,r2
  80c7e4:	3015883a 	mov	r10,r6
  80c7e8:	111ab03a 	or	r13,r2,r4
  80c7ec:	98003016 	blt	r19,zero,80c8b0 <__muldf3+0x398>
  80c7f0:	5825883a 	mov	r18,r11
  80c7f4:	3827883a 	mov	r19,r7
  80c7f8:	7abfef2e 	bgeu	r15,r10,80c7b8 <__muldf3+0x2a0>
  80c7fc:	da001015 	stw	r8,64(sp)
  80c800:	00803fc4 	movi	r2,255
  80c804:	488e703a 	and	r7,r9,r2
  80c808:	00802004 	movi	r2,128
  80c80c:	0007883a 	mov	r3,zero
  80c810:	0011883a 	mov	r8,zero
  80c814:	38801826 	beq	r7,r2,80c878 <__muldf3+0x360>
  80c818:	008000c4 	movi	r2,3
  80c81c:	d9000e04 	addi	r4,sp,56
  80c820:	da801215 	stw	r10,72(sp)
  80c824:	d8800e15 	stw	r2,56(sp)
  80c828:	da401115 	stw	r9,68(sp)
  80c82c:	003f6a06 	br	80c5d8 <__muldf3+0xc0>
  80c830:	89802126 	beq	r17,r6,80c8b8 <__muldf3+0x3a0>
  80c834:	0009883a 	mov	r4,zero
  80c838:	5105883a 	add	r2,r10,r4
  80c83c:	128d803a 	cmpltu	r6,r2,r10
  80c840:	5d07883a 	add	r3,r11,r20
  80c844:	30cd883a 	add	r6,r6,r3
  80c848:	0021883a 	mov	r16,zero
  80c84c:	0023883a 	mov	r17,zero
  80c850:	1025883a 	mov	r18,r2
  80c854:	3027883a 	mov	r19,r6
  80c858:	32ff9e2e 	bgeu	r6,r11,80c6d4 <__muldf3+0x1bc>
  80c85c:	00800044 	movi	r2,1
  80c860:	8089883a 	add	r4,r16,r2
  80c864:	240d803a 	cmpltu	r6,r4,r16
  80c868:	344d883a 	add	r6,r6,r17
  80c86c:	2021883a 	mov	r16,r4
  80c870:	3023883a 	mov	r17,r6
  80c874:	003f9806 	br	80c6d8 <__muldf3+0x1c0>
  80c878:	403fe71e 	bne	r8,zero,80c818 <__muldf3+0x300>
  80c87c:	01004004 	movi	r4,256
  80c880:	4904703a 	and	r2,r9,r4
  80c884:	10c4b03a 	or	r2,r2,r3
  80c888:	103fe31e 	bne	r2,zero,80c818 <__muldf3+0x300>
  80c88c:	94c4b03a 	or	r2,r18,r19
  80c890:	103fe126 	beq	r2,zero,80c818 <__muldf3+0x300>
  80c894:	49c5883a 	add	r2,r9,r7
  80c898:	1251803a 	cmpltu	r8,r2,r9
  80c89c:	4291883a 	add	r8,r8,r10
  80c8a0:	013fc004 	movi	r4,-256
  80c8a4:	1112703a 	and	r9,r2,r4
  80c8a8:	4015883a 	mov	r10,r8
  80c8ac:	003fda06 	br	80c818 <__muldf3+0x300>
  80c8b0:	6813883a 	mov	r9,r13
  80c8b4:	003fce06 	br	80c7f0 <__muldf3+0x2d8>
  80c8b8:	143f7c36 	bltu	r2,r16,80c6ac <__muldf3+0x194>
  80c8bc:	003fdd06 	br	80c834 <__muldf3+0x31c>
  80c8c0:	12bf852e 	bgeu	r2,r10,80c6d8 <__muldf3+0x1c0>
  80c8c4:	003fe506 	br	80c85c <__muldf3+0x344>
  80c8c8:	00800084 	movi	r2,2
  80c8cc:	20bf351e 	bne	r4,r2,80c5a4 <__muldf3+0x8c>
  80c8d0:	010020b4 	movhi	r4,130
  80c8d4:	210c0d04 	addi	r4,r4,12340
  80c8d8:	003f3f06 	br	80c5d8 <__muldf3+0xc0>

0080c8dc <__divdf3>:
  80c8dc:	deffed04 	addi	sp,sp,-76
  80c8e0:	dcc01115 	stw	r19,68(sp)
  80c8e4:	dcc00404 	addi	r19,sp,16
  80c8e8:	2011883a 	mov	r8,r4
  80c8ec:	2813883a 	mov	r9,r5
  80c8f0:	dc000e15 	stw	r16,56(sp)
  80c8f4:	d809883a 	mov	r4,sp
  80c8f8:	980b883a 	mov	r5,r19
  80c8fc:	dc000904 	addi	r16,sp,36
  80c900:	dfc01215 	stw	ra,72(sp)
  80c904:	da400115 	stw	r9,4(sp)
  80c908:	d9c00315 	stw	r7,12(sp)
  80c90c:	da000015 	stw	r8,0(sp)
  80c910:	d9800215 	stw	r6,8(sp)
  80c914:	dc801015 	stw	r18,64(sp)
  80c918:	dc400f15 	stw	r17,60(sp)
  80c91c:	080d4140 	call	80d414 <__unpack_d>
  80c920:	d9000204 	addi	r4,sp,8
  80c924:	800b883a 	mov	r5,r16
  80c928:	080d4140 	call	80d414 <__unpack_d>
  80c92c:	d9000417 	ldw	r4,16(sp)
  80c930:	00800044 	movi	r2,1
  80c934:	11000b2e 	bgeu	r2,r4,80c964 <__divdf3+0x88>
  80c938:	d9400917 	ldw	r5,36(sp)
  80c93c:	1140762e 	bgeu	r2,r5,80cb18 <__divdf3+0x23c>
  80c940:	d8800517 	ldw	r2,20(sp)
  80c944:	d8c00a17 	ldw	r3,40(sp)
  80c948:	01800104 	movi	r6,4
  80c94c:	10c4f03a 	xor	r2,r2,r3
  80c950:	d8800515 	stw	r2,20(sp)
  80c954:	21800226 	beq	r4,r6,80c960 <__divdf3+0x84>
  80c958:	00800084 	movi	r2,2
  80c95c:	2080141e 	bne	r4,r2,80c9b0 <__divdf3+0xd4>
  80c960:	29000926 	beq	r5,r4,80c988 <__divdf3+0xac>
  80c964:	9809883a 	mov	r4,r19
  80c968:	080d1000 	call	80d100 <__pack_d>
  80c96c:	dfc01217 	ldw	ra,72(sp)
  80c970:	dcc01117 	ldw	r19,68(sp)
  80c974:	dc801017 	ldw	r18,64(sp)
  80c978:	dc400f17 	ldw	r17,60(sp)
  80c97c:	dc000e17 	ldw	r16,56(sp)
  80c980:	dec01304 	addi	sp,sp,76
  80c984:	f800283a 	ret
  80c988:	010020b4 	movhi	r4,130
  80c98c:	210c0d04 	addi	r4,r4,12340
  80c990:	080d1000 	call	80d100 <__pack_d>
  80c994:	dfc01217 	ldw	ra,72(sp)
  80c998:	dcc01117 	ldw	r19,68(sp)
  80c99c:	dc801017 	ldw	r18,64(sp)
  80c9a0:	dc400f17 	ldw	r17,60(sp)
  80c9a4:	dc000e17 	ldw	r16,56(sp)
  80c9a8:	dec01304 	addi	sp,sp,76
  80c9ac:	f800283a 	ret
  80c9b0:	29805b26 	beq	r5,r6,80cb20 <__divdf3+0x244>
  80c9b4:	28802d26 	beq	r5,r2,80ca6c <__divdf3+0x190>
  80c9b8:	d8c00617 	ldw	r3,24(sp)
  80c9bc:	d8800b17 	ldw	r2,44(sp)
  80c9c0:	d9c00817 	ldw	r7,32(sp)
  80c9c4:	dc400d17 	ldw	r17,52(sp)
  80c9c8:	188bc83a 	sub	r5,r3,r2
  80c9cc:	d9800717 	ldw	r6,28(sp)
  80c9d0:	dc000c17 	ldw	r16,48(sp)
  80c9d4:	d9400615 	stw	r5,24(sp)
  80c9d8:	3c403836 	bltu	r7,r17,80cabc <__divdf3+0x1e0>
  80c9dc:	89c03626 	beq	r17,r7,80cab8 <__divdf3+0x1dc>
  80c9e0:	0015883a 	mov	r10,zero
  80c9e4:	001d883a 	mov	r14,zero
  80c9e8:	02c40034 	movhi	r11,4096
  80c9ec:	001f883a 	mov	r15,zero
  80c9f0:	003f883a 	mov	ra,zero
  80c9f4:	04800f44 	movi	r18,61
  80c9f8:	00000f06 	br	80ca38 <__divdf3+0x15c>
  80c9fc:	601d883a 	mov	r14,r12
  80ca00:	681f883a 	mov	r15,r13
  80ca04:	400d883a 	mov	r6,r8
  80ca08:	100f883a 	mov	r7,r2
  80ca0c:	3191883a 	add	r8,r6,r6
  80ca10:	5808d07a 	srli	r4,r11,1
  80ca14:	4185803a 	cmpltu	r2,r8,r6
  80ca18:	39d3883a 	add	r9,r7,r7
  80ca1c:	28c6b03a 	or	r3,r5,r3
  80ca20:	1245883a 	add	r2,r2,r9
  80ca24:	1815883a 	mov	r10,r3
  80ca28:	2017883a 	mov	r11,r4
  80ca2c:	400d883a 	mov	r6,r8
  80ca30:	100f883a 	mov	r7,r2
  80ca34:	fc801726 	beq	ra,r18,80ca94 <__divdf3+0x1b8>
  80ca38:	580a97fa 	slli	r5,r11,31
  80ca3c:	5006d07a 	srli	r3,r10,1
  80ca40:	ffc00044 	addi	ra,ra,1
  80ca44:	3c7ff136 	bltu	r7,r17,80ca0c <__divdf3+0x130>
  80ca48:	3411c83a 	sub	r8,r6,r16
  80ca4c:	3205803a 	cmpltu	r2,r6,r8
  80ca50:	3c53c83a 	sub	r9,r7,r17
  80ca54:	7298b03a 	or	r12,r14,r10
  80ca58:	7adab03a 	or	r13,r15,r11
  80ca5c:	4885c83a 	sub	r2,r9,r2
  80ca60:	89ffe61e 	bne	r17,r7,80c9fc <__divdf3+0x120>
  80ca64:	343fe936 	bltu	r6,r16,80ca0c <__divdf3+0x130>
  80ca68:	003fe406 	br	80c9fc <__divdf3+0x120>
  80ca6c:	9809883a 	mov	r4,r19
  80ca70:	d9800415 	stw	r6,16(sp)
  80ca74:	080d1000 	call	80d100 <__pack_d>
  80ca78:	dfc01217 	ldw	ra,72(sp)
  80ca7c:	dcc01117 	ldw	r19,68(sp)
  80ca80:	dc801017 	ldw	r18,64(sp)
  80ca84:	dc400f17 	ldw	r17,60(sp)
  80ca88:	dc000e17 	ldw	r16,56(sp)
  80ca8c:	dec01304 	addi	sp,sp,76
  80ca90:	f800283a 	ret
  80ca94:	00803fc4 	movi	r2,255
  80ca98:	7090703a 	and	r8,r14,r2
  80ca9c:	00802004 	movi	r2,128
  80caa0:	0007883a 	mov	r3,zero
  80caa4:	0013883a 	mov	r9,zero
  80caa8:	40800d26 	beq	r8,r2,80cae0 <__divdf3+0x204>
  80caac:	dbc00815 	stw	r15,32(sp)
  80cab0:	db800715 	stw	r14,28(sp)
  80cab4:	003fab06 	br	80c964 <__divdf3+0x88>
  80cab8:	343fc92e 	bgeu	r6,r16,80c9e0 <__divdf3+0x104>
  80cabc:	3185883a 	add	r2,r6,r6
  80cac0:	1189803a 	cmpltu	r4,r2,r6
  80cac4:	39c7883a 	add	r3,r7,r7
  80cac8:	20c9883a 	add	r4,r4,r3
  80cacc:	297fffc4 	addi	r5,r5,-1
  80cad0:	100d883a 	mov	r6,r2
  80cad4:	200f883a 	mov	r7,r4
  80cad8:	d9400615 	stw	r5,24(sp)
  80cadc:	003fc006 	br	80c9e0 <__divdf3+0x104>
  80cae0:	483ff21e 	bne	r9,zero,80caac <__divdf3+0x1d0>
  80cae4:	01004004 	movi	r4,256
  80cae8:	7104703a 	and	r2,r14,r4
  80caec:	10c4b03a 	or	r2,r2,r3
  80caf0:	103fee1e 	bne	r2,zero,80caac <__divdf3+0x1d0>
  80caf4:	31c4b03a 	or	r2,r6,r7
  80caf8:	103fec26 	beq	r2,zero,80caac <__divdf3+0x1d0>
  80cafc:	7205883a 	add	r2,r14,r8
  80cb00:	1391803a 	cmpltu	r8,r2,r14
  80cb04:	43d1883a 	add	r8,r8,r15
  80cb08:	013fc004 	movi	r4,-256
  80cb0c:	111c703a 	and	r14,r2,r4
  80cb10:	401f883a 	mov	r15,r8
  80cb14:	003fe506 	br	80caac <__divdf3+0x1d0>
  80cb18:	8009883a 	mov	r4,r16
  80cb1c:	003f9206 	br	80c968 <__divdf3+0x8c>
  80cb20:	9809883a 	mov	r4,r19
  80cb24:	d8000715 	stw	zero,28(sp)
  80cb28:	d8000815 	stw	zero,32(sp)
  80cb2c:	d8000615 	stw	zero,24(sp)
  80cb30:	003f8d06 	br	80c968 <__divdf3+0x8c>

0080cb34 <__eqdf2>:
  80cb34:	deffef04 	addi	sp,sp,-68
  80cb38:	dc400f15 	stw	r17,60(sp)
  80cb3c:	dc400404 	addi	r17,sp,16
  80cb40:	2005883a 	mov	r2,r4
  80cb44:	2807883a 	mov	r3,r5
  80cb48:	dc000e15 	stw	r16,56(sp)
  80cb4c:	d809883a 	mov	r4,sp
  80cb50:	880b883a 	mov	r5,r17
  80cb54:	dc000904 	addi	r16,sp,36
  80cb58:	d8c00115 	stw	r3,4(sp)
  80cb5c:	d8800015 	stw	r2,0(sp)
  80cb60:	d9800215 	stw	r6,8(sp)
  80cb64:	dfc01015 	stw	ra,64(sp)
  80cb68:	d9c00315 	stw	r7,12(sp)
  80cb6c:	080d4140 	call	80d414 <__unpack_d>
  80cb70:	d9000204 	addi	r4,sp,8
  80cb74:	800b883a 	mov	r5,r16
  80cb78:	080d4140 	call	80d414 <__unpack_d>
  80cb7c:	d8800417 	ldw	r2,16(sp)
  80cb80:	00c00044 	movi	r3,1
  80cb84:	180d883a 	mov	r6,r3
  80cb88:	1880062e 	bgeu	r3,r2,80cba4 <__eqdf2+0x70>
  80cb8c:	d8800917 	ldw	r2,36(sp)
  80cb90:	8809883a 	mov	r4,r17
  80cb94:	800b883a 	mov	r5,r16
  80cb98:	1880022e 	bgeu	r3,r2,80cba4 <__eqdf2+0x70>
  80cb9c:	080d54c0 	call	80d54c <__fpcmp_parts_d>
  80cba0:	100d883a 	mov	r6,r2
  80cba4:	3005883a 	mov	r2,r6
  80cba8:	dfc01017 	ldw	ra,64(sp)
  80cbac:	dc400f17 	ldw	r17,60(sp)
  80cbb0:	dc000e17 	ldw	r16,56(sp)
  80cbb4:	dec01104 	addi	sp,sp,68
  80cbb8:	f800283a 	ret

0080cbbc <__gtdf2>:
  80cbbc:	deffef04 	addi	sp,sp,-68
  80cbc0:	dc400f15 	stw	r17,60(sp)
  80cbc4:	dc400404 	addi	r17,sp,16
  80cbc8:	2005883a 	mov	r2,r4
  80cbcc:	2807883a 	mov	r3,r5
  80cbd0:	dc000e15 	stw	r16,56(sp)
  80cbd4:	d809883a 	mov	r4,sp
  80cbd8:	880b883a 	mov	r5,r17
  80cbdc:	dc000904 	addi	r16,sp,36
  80cbe0:	d8c00115 	stw	r3,4(sp)
  80cbe4:	d8800015 	stw	r2,0(sp)
  80cbe8:	d9800215 	stw	r6,8(sp)
  80cbec:	dfc01015 	stw	ra,64(sp)
  80cbf0:	d9c00315 	stw	r7,12(sp)
  80cbf4:	080d4140 	call	80d414 <__unpack_d>
  80cbf8:	d9000204 	addi	r4,sp,8
  80cbfc:	800b883a 	mov	r5,r16
  80cc00:	080d4140 	call	80d414 <__unpack_d>
  80cc04:	d8800417 	ldw	r2,16(sp)
  80cc08:	00c00044 	movi	r3,1
  80cc0c:	01bfffc4 	movi	r6,-1
  80cc10:	1880062e 	bgeu	r3,r2,80cc2c <__gtdf2+0x70>
  80cc14:	d8800917 	ldw	r2,36(sp)
  80cc18:	8809883a 	mov	r4,r17
  80cc1c:	800b883a 	mov	r5,r16
  80cc20:	1880022e 	bgeu	r3,r2,80cc2c <__gtdf2+0x70>
  80cc24:	080d54c0 	call	80d54c <__fpcmp_parts_d>
  80cc28:	100d883a 	mov	r6,r2
  80cc2c:	3005883a 	mov	r2,r6
  80cc30:	dfc01017 	ldw	ra,64(sp)
  80cc34:	dc400f17 	ldw	r17,60(sp)
  80cc38:	dc000e17 	ldw	r16,56(sp)
  80cc3c:	dec01104 	addi	sp,sp,68
  80cc40:	f800283a 	ret

0080cc44 <__gedf2>:
  80cc44:	deffef04 	addi	sp,sp,-68
  80cc48:	dc400f15 	stw	r17,60(sp)
  80cc4c:	dc400404 	addi	r17,sp,16
  80cc50:	2005883a 	mov	r2,r4
  80cc54:	2807883a 	mov	r3,r5
  80cc58:	dc000e15 	stw	r16,56(sp)
  80cc5c:	d809883a 	mov	r4,sp
  80cc60:	880b883a 	mov	r5,r17
  80cc64:	dc000904 	addi	r16,sp,36
  80cc68:	d8c00115 	stw	r3,4(sp)
  80cc6c:	d8800015 	stw	r2,0(sp)
  80cc70:	d9800215 	stw	r6,8(sp)
  80cc74:	dfc01015 	stw	ra,64(sp)
  80cc78:	d9c00315 	stw	r7,12(sp)
  80cc7c:	080d4140 	call	80d414 <__unpack_d>
  80cc80:	d9000204 	addi	r4,sp,8
  80cc84:	800b883a 	mov	r5,r16
  80cc88:	080d4140 	call	80d414 <__unpack_d>
  80cc8c:	d8800417 	ldw	r2,16(sp)
  80cc90:	00c00044 	movi	r3,1
  80cc94:	01bfffc4 	movi	r6,-1
  80cc98:	1880062e 	bgeu	r3,r2,80ccb4 <__gedf2+0x70>
  80cc9c:	d8800917 	ldw	r2,36(sp)
  80cca0:	8809883a 	mov	r4,r17
  80cca4:	800b883a 	mov	r5,r16
  80cca8:	1880022e 	bgeu	r3,r2,80ccb4 <__gedf2+0x70>
  80ccac:	080d54c0 	call	80d54c <__fpcmp_parts_d>
  80ccb0:	100d883a 	mov	r6,r2
  80ccb4:	3005883a 	mov	r2,r6
  80ccb8:	dfc01017 	ldw	ra,64(sp)
  80ccbc:	dc400f17 	ldw	r17,60(sp)
  80ccc0:	dc000e17 	ldw	r16,56(sp)
  80ccc4:	dec01104 	addi	sp,sp,68
  80ccc8:	f800283a 	ret

0080cccc <__floatsidf>:
  80cccc:	2006d7fa 	srli	r3,r4,31
  80ccd0:	defff604 	addi	sp,sp,-40
  80ccd4:	008000c4 	movi	r2,3
  80ccd8:	dfc00915 	stw	ra,36(sp)
  80ccdc:	dcc00815 	stw	r19,32(sp)
  80cce0:	dc800715 	stw	r18,28(sp)
  80cce4:	dc400615 	stw	r17,24(sp)
  80cce8:	dc000515 	stw	r16,20(sp)
  80ccec:	d8800015 	stw	r2,0(sp)
  80ccf0:	d8c00115 	stw	r3,4(sp)
  80ccf4:	20000f1e 	bne	r4,zero,80cd34 <__floatsidf+0x68>
  80ccf8:	00800084 	movi	r2,2
  80ccfc:	d8800015 	stw	r2,0(sp)
  80cd00:	d809883a 	mov	r4,sp
  80cd04:	080d1000 	call	80d100 <__pack_d>
  80cd08:	1009883a 	mov	r4,r2
  80cd0c:	180b883a 	mov	r5,r3
  80cd10:	2005883a 	mov	r2,r4
  80cd14:	2807883a 	mov	r3,r5
  80cd18:	dfc00917 	ldw	ra,36(sp)
  80cd1c:	dcc00817 	ldw	r19,32(sp)
  80cd20:	dc800717 	ldw	r18,28(sp)
  80cd24:	dc400617 	ldw	r17,24(sp)
  80cd28:	dc000517 	ldw	r16,20(sp)
  80cd2c:	dec00a04 	addi	sp,sp,40
  80cd30:	f800283a 	ret
  80cd34:	00800f04 	movi	r2,60
  80cd38:	1807003a 	cmpeq	r3,r3,zero
  80cd3c:	d8800215 	stw	r2,8(sp)
  80cd40:	18001126 	beq	r3,zero,80cd88 <__floatsidf+0xbc>
  80cd44:	0027883a 	mov	r19,zero
  80cd48:	2025883a 	mov	r18,r4
  80cd4c:	d9000315 	stw	r4,12(sp)
  80cd50:	dcc00415 	stw	r19,16(sp)
  80cd54:	080d0800 	call	80d080 <__clzsi2>
  80cd58:	11000744 	addi	r4,r2,29
  80cd5c:	013fe80e 	bge	zero,r4,80cd00 <__floatsidf+0x34>
  80cd60:	10bfff44 	addi	r2,r2,-3
  80cd64:	10000c16 	blt	r2,zero,80cd98 <__floatsidf+0xcc>
  80cd68:	90a2983a 	sll	r17,r18,r2
  80cd6c:	0021883a 	mov	r16,zero
  80cd70:	d8800217 	ldw	r2,8(sp)
  80cd74:	dc400415 	stw	r17,16(sp)
  80cd78:	dc000315 	stw	r16,12(sp)
  80cd7c:	1105c83a 	sub	r2,r2,r4
  80cd80:	d8800215 	stw	r2,8(sp)
  80cd84:	003fde06 	br	80cd00 <__floatsidf+0x34>
  80cd88:	00a00034 	movhi	r2,32768
  80cd8c:	20800a26 	beq	r4,r2,80cdb8 <__floatsidf+0xec>
  80cd90:	0109c83a 	sub	r4,zero,r4
  80cd94:	003feb06 	br	80cd44 <__floatsidf+0x78>
  80cd98:	9006d07a 	srli	r3,r18,1
  80cd9c:	008007c4 	movi	r2,31
  80cda0:	1105c83a 	sub	r2,r2,r4
  80cda4:	1886d83a 	srl	r3,r3,r2
  80cda8:	9922983a 	sll	r17,r19,r4
  80cdac:	9120983a 	sll	r16,r18,r4
  80cdb0:	1c62b03a 	or	r17,r3,r17
  80cdb4:	003fee06 	br	80cd70 <__floatsidf+0xa4>
  80cdb8:	0009883a 	mov	r4,zero
  80cdbc:	01707834 	movhi	r5,49632
  80cdc0:	003fd306 	br	80cd10 <__floatsidf+0x44>

0080cdc4 <__fixdfsi>:
  80cdc4:	defff804 	addi	sp,sp,-32
  80cdc8:	2005883a 	mov	r2,r4
  80cdcc:	2807883a 	mov	r3,r5
  80cdd0:	d809883a 	mov	r4,sp
  80cdd4:	d9400204 	addi	r5,sp,8
  80cdd8:	d8c00115 	stw	r3,4(sp)
  80cddc:	d8800015 	stw	r2,0(sp)
  80cde0:	dfc00715 	stw	ra,28(sp)
  80cde4:	080d4140 	call	80d414 <__unpack_d>
  80cde8:	d8c00217 	ldw	r3,8(sp)
  80cdec:	00800084 	movi	r2,2
  80cdf0:	1880051e 	bne	r3,r2,80ce08 <__fixdfsi+0x44>
  80cdf4:	0007883a 	mov	r3,zero
  80cdf8:	1805883a 	mov	r2,r3
  80cdfc:	dfc00717 	ldw	ra,28(sp)
  80ce00:	dec00804 	addi	sp,sp,32
  80ce04:	f800283a 	ret
  80ce08:	00800044 	movi	r2,1
  80ce0c:	10fff92e 	bgeu	r2,r3,80cdf4 <__fixdfsi+0x30>
  80ce10:	00800104 	movi	r2,4
  80ce14:	18800426 	beq	r3,r2,80ce28 <__fixdfsi+0x64>
  80ce18:	d8c00417 	ldw	r3,16(sp)
  80ce1c:	183ff516 	blt	r3,zero,80cdf4 <__fixdfsi+0x30>
  80ce20:	00800784 	movi	r2,30
  80ce24:	10c0080e 	bge	r2,r3,80ce48 <__fixdfsi+0x84>
  80ce28:	d8800317 	ldw	r2,12(sp)
  80ce2c:	1000121e 	bne	r2,zero,80ce78 <__fixdfsi+0xb4>
  80ce30:	00e00034 	movhi	r3,32768
  80ce34:	18ffffc4 	addi	r3,r3,-1
  80ce38:	1805883a 	mov	r2,r3
  80ce3c:	dfc00717 	ldw	ra,28(sp)
  80ce40:	dec00804 	addi	sp,sp,32
  80ce44:	f800283a 	ret
  80ce48:	00800f04 	movi	r2,60
  80ce4c:	10d1c83a 	sub	r8,r2,r3
  80ce50:	40bff804 	addi	r2,r8,-32
  80ce54:	d9800517 	ldw	r6,20(sp)
  80ce58:	d9c00617 	ldw	r7,24(sp)
  80ce5c:	10000816 	blt	r2,zero,80ce80 <__fixdfsi+0xbc>
  80ce60:	3888d83a 	srl	r4,r7,r2
  80ce64:	d8800317 	ldw	r2,12(sp)
  80ce68:	2007883a 	mov	r3,r4
  80ce6c:	103fe226 	beq	r2,zero,80cdf8 <__fixdfsi+0x34>
  80ce70:	0107c83a 	sub	r3,zero,r4
  80ce74:	003fe006 	br	80cdf8 <__fixdfsi+0x34>
  80ce78:	00e00034 	movhi	r3,32768
  80ce7c:	003fde06 	br	80cdf8 <__fixdfsi+0x34>
  80ce80:	39c7883a 	add	r3,r7,r7
  80ce84:	008007c4 	movi	r2,31
  80ce88:	1205c83a 	sub	r2,r2,r8
  80ce8c:	1886983a 	sll	r3,r3,r2
  80ce90:	3208d83a 	srl	r4,r6,r8
  80ce94:	1908b03a 	or	r4,r3,r4
  80ce98:	003ff206 	br	80ce64 <__fixdfsi+0xa0>

0080ce9c <udivmodsi4>:
  80ce9c:	29001b2e 	bgeu	r5,r4,80cf0c <udivmodsi4+0x70>
  80cea0:	28001a16 	blt	r5,zero,80cf0c <udivmodsi4+0x70>
  80cea4:	00800044 	movi	r2,1
  80cea8:	0007883a 	mov	r3,zero
  80ceac:	01c007c4 	movi	r7,31
  80ceb0:	00000306 	br	80cec0 <udivmodsi4+0x24>
  80ceb4:	19c01326 	beq	r3,r7,80cf04 <udivmodsi4+0x68>
  80ceb8:	18c00044 	addi	r3,r3,1
  80cebc:	28000416 	blt	r5,zero,80ced0 <udivmodsi4+0x34>
  80cec0:	294b883a 	add	r5,r5,r5
  80cec4:	1085883a 	add	r2,r2,r2
  80cec8:	293ffa36 	bltu	r5,r4,80ceb4 <udivmodsi4+0x18>
  80cecc:	10000d26 	beq	r2,zero,80cf04 <udivmodsi4+0x68>
  80ced0:	0007883a 	mov	r3,zero
  80ced4:	21400236 	bltu	r4,r5,80cee0 <udivmodsi4+0x44>
  80ced8:	2149c83a 	sub	r4,r4,r5
  80cedc:	1886b03a 	or	r3,r3,r2
  80cee0:	1004d07a 	srli	r2,r2,1
  80cee4:	280ad07a 	srli	r5,r5,1
  80cee8:	103ffa1e 	bne	r2,zero,80ced4 <udivmodsi4+0x38>
  80ceec:	30000226 	beq	r6,zero,80cef8 <udivmodsi4+0x5c>
  80cef0:	2005883a 	mov	r2,r4
  80cef4:	f800283a 	ret
  80cef8:	1809883a 	mov	r4,r3
  80cefc:	2005883a 	mov	r2,r4
  80cf00:	f800283a 	ret
  80cf04:	0007883a 	mov	r3,zero
  80cf08:	003ff806 	br	80ceec <udivmodsi4+0x50>
  80cf0c:	00800044 	movi	r2,1
  80cf10:	0007883a 	mov	r3,zero
  80cf14:	003fef06 	br	80ced4 <udivmodsi4+0x38>

0080cf18 <__divsi3>:
  80cf18:	defffe04 	addi	sp,sp,-8
  80cf1c:	dc000015 	stw	r16,0(sp)
  80cf20:	dfc00115 	stw	ra,4(sp)
  80cf24:	0021883a 	mov	r16,zero
  80cf28:	20000c16 	blt	r4,zero,80cf5c <__divsi3+0x44>
  80cf2c:	000d883a 	mov	r6,zero
  80cf30:	28000e16 	blt	r5,zero,80cf6c <__divsi3+0x54>
  80cf34:	080ce9c0 	call	80ce9c <udivmodsi4>
  80cf38:	1007883a 	mov	r3,r2
  80cf3c:	8005003a 	cmpeq	r2,r16,zero
  80cf40:	1000011e 	bne	r2,zero,80cf48 <__divsi3+0x30>
  80cf44:	00c7c83a 	sub	r3,zero,r3
  80cf48:	1805883a 	mov	r2,r3
  80cf4c:	dfc00117 	ldw	ra,4(sp)
  80cf50:	dc000017 	ldw	r16,0(sp)
  80cf54:	dec00204 	addi	sp,sp,8
  80cf58:	f800283a 	ret
  80cf5c:	0109c83a 	sub	r4,zero,r4
  80cf60:	04000044 	movi	r16,1
  80cf64:	000d883a 	mov	r6,zero
  80cf68:	283ff20e 	bge	r5,zero,80cf34 <__divsi3+0x1c>
  80cf6c:	014bc83a 	sub	r5,zero,r5
  80cf70:	8021003a 	cmpeq	r16,r16,zero
  80cf74:	003fef06 	br	80cf34 <__divsi3+0x1c>

0080cf78 <__modsi3>:
  80cf78:	deffff04 	addi	sp,sp,-4
  80cf7c:	dfc00015 	stw	ra,0(sp)
  80cf80:	01800044 	movi	r6,1
  80cf84:	2807883a 	mov	r3,r5
  80cf88:	20000416 	blt	r4,zero,80cf9c <__modsi3+0x24>
  80cf8c:	28000c16 	blt	r5,zero,80cfc0 <__modsi3+0x48>
  80cf90:	dfc00017 	ldw	ra,0(sp)
  80cf94:	dec00104 	addi	sp,sp,4
  80cf98:	080ce9c1 	jmpi	80ce9c <udivmodsi4>
  80cf9c:	0109c83a 	sub	r4,zero,r4
  80cfa0:	28000b16 	blt	r5,zero,80cfd0 <__modsi3+0x58>
  80cfa4:	180b883a 	mov	r5,r3
  80cfa8:	01800044 	movi	r6,1
  80cfac:	080ce9c0 	call	80ce9c <udivmodsi4>
  80cfb0:	0085c83a 	sub	r2,zero,r2
  80cfb4:	dfc00017 	ldw	ra,0(sp)
  80cfb8:	dec00104 	addi	sp,sp,4
  80cfbc:	f800283a 	ret
  80cfc0:	014bc83a 	sub	r5,zero,r5
  80cfc4:	dfc00017 	ldw	ra,0(sp)
  80cfc8:	dec00104 	addi	sp,sp,4
  80cfcc:	080ce9c1 	jmpi	80ce9c <udivmodsi4>
  80cfd0:	0147c83a 	sub	r3,zero,r5
  80cfd4:	003ff306 	br	80cfa4 <__modsi3+0x2c>

0080cfd8 <__udivsi3>:
  80cfd8:	000d883a 	mov	r6,zero
  80cfdc:	080ce9c1 	jmpi	80ce9c <udivmodsi4>

0080cfe0 <__umodsi3>:
  80cfe0:	01800044 	movi	r6,1
  80cfe4:	080ce9c1 	jmpi	80ce9c <udivmodsi4>

0080cfe8 <__muldi3>:
  80cfe8:	2011883a 	mov	r8,r4
  80cfec:	427fffcc 	andi	r9,r8,65535
  80cff0:	4018d43a 	srli	r12,r8,16
  80cff4:	32bfffcc 	andi	r10,r6,65535
  80cff8:	3016d43a 	srli	r11,r6,16
  80cffc:	4a85383a 	mul	r2,r9,r10
  80d000:	6295383a 	mul	r10,r12,r10
  80d004:	4ad3383a 	mul	r9,r9,r11
  80d008:	113fffcc 	andi	r4,r2,65535
  80d00c:	1004d43a 	srli	r2,r2,16
  80d010:	4a93883a 	add	r9,r9,r10
  80d014:	3807883a 	mov	r3,r7
  80d018:	1245883a 	add	r2,r2,r9
  80d01c:	280f883a 	mov	r7,r5
  80d020:	180b883a 	mov	r5,r3
  80d024:	1006943a 	slli	r3,r2,16
  80d028:	defffd04 	addi	sp,sp,-12
  80d02c:	dc800215 	stw	r18,8(sp)
  80d030:	1907883a 	add	r3,r3,r4
  80d034:	dc400115 	stw	r17,4(sp)
  80d038:	dc000015 	stw	r16,0(sp)
  80d03c:	4165383a 	mul	r18,r8,r5
  80d040:	31e3383a 	mul	r17,r6,r7
  80d044:	1012d43a 	srli	r9,r2,16
  80d048:	62d9383a 	mul	r12,r12,r11
  80d04c:	181f883a 	mov	r15,r3
  80d050:	1280022e 	bgeu	r2,r10,80d05c <__muldi3+0x74>
  80d054:	00800074 	movhi	r2,1
  80d058:	6099883a 	add	r12,r12,r2
  80d05c:	624d883a 	add	r6,r12,r9
  80d060:	9187883a 	add	r3,r18,r6
  80d064:	88c7883a 	add	r3,r17,r3
  80d068:	7805883a 	mov	r2,r15
  80d06c:	dc800217 	ldw	r18,8(sp)
  80d070:	dc400117 	ldw	r17,4(sp)
  80d074:	dc000017 	ldw	r16,0(sp)
  80d078:	dec00304 	addi	sp,sp,12
  80d07c:	f800283a 	ret

0080d080 <__clzsi2>:
  80d080:	00bfffd4 	movui	r2,65535
  80d084:	11000e36 	bltu	r2,r4,80d0c0 <__clzsi2+0x40>
  80d088:	00803fc4 	movi	r2,255
  80d08c:	01400204 	movi	r5,8
  80d090:	0007883a 	mov	r3,zero
  80d094:	11001036 	bltu	r2,r4,80d0d8 <__clzsi2+0x58>
  80d098:	000b883a 	mov	r5,zero
  80d09c:	20c6d83a 	srl	r3,r4,r3
  80d0a0:	008020b4 	movhi	r2,130
  80d0a4:	108c1204 	addi	r2,r2,12360
  80d0a8:	1887883a 	add	r3,r3,r2
  80d0ac:	18800003 	ldbu	r2,0(r3)
  80d0b0:	00c00804 	movi	r3,32
  80d0b4:	2885883a 	add	r2,r5,r2
  80d0b8:	1885c83a 	sub	r2,r3,r2
  80d0bc:	f800283a 	ret
  80d0c0:	01400404 	movi	r5,16
  80d0c4:	00804034 	movhi	r2,256
  80d0c8:	10bfffc4 	addi	r2,r2,-1
  80d0cc:	2807883a 	mov	r3,r5
  80d0d0:	113ff22e 	bgeu	r2,r4,80d09c <__clzsi2+0x1c>
  80d0d4:	01400604 	movi	r5,24
  80d0d8:	2807883a 	mov	r3,r5
  80d0dc:	20c6d83a 	srl	r3,r4,r3
  80d0e0:	008020b4 	movhi	r2,130
  80d0e4:	108c1204 	addi	r2,r2,12360
  80d0e8:	1887883a 	add	r3,r3,r2
  80d0ec:	18800003 	ldbu	r2,0(r3)
  80d0f0:	00c00804 	movi	r3,32
  80d0f4:	2885883a 	add	r2,r5,r2
  80d0f8:	1885c83a 	sub	r2,r3,r2
  80d0fc:	f800283a 	ret

0080d100 <__pack_d>:
  80d100:	20c00017 	ldw	r3,0(r4)
  80d104:	defffd04 	addi	sp,sp,-12
  80d108:	dc000015 	stw	r16,0(sp)
  80d10c:	dc800215 	stw	r18,8(sp)
  80d110:	dc400115 	stw	r17,4(sp)
  80d114:	00800044 	movi	r2,1
  80d118:	22000317 	ldw	r8,12(r4)
  80d11c:	001f883a 	mov	r15,zero
  80d120:	22400417 	ldw	r9,16(r4)
  80d124:	24000117 	ldw	r16,4(r4)
  80d128:	10c0552e 	bgeu	r2,r3,80d280 <__pack_d+0x180>
  80d12c:	00800104 	movi	r2,4
  80d130:	18804f26 	beq	r3,r2,80d270 <__pack_d+0x170>
  80d134:	00800084 	movi	r2,2
  80d138:	18800226 	beq	r3,r2,80d144 <__pack_d+0x44>
  80d13c:	4244b03a 	or	r2,r8,r9
  80d140:	10001a1e 	bne	r2,zero,80d1ac <__pack_d+0xac>
  80d144:	000d883a 	mov	r6,zero
  80d148:	000f883a 	mov	r7,zero
  80d14c:	0011883a 	mov	r8,zero
  80d150:	00800434 	movhi	r2,16
  80d154:	10bfffc4 	addi	r2,r2,-1
  80d158:	301d883a 	mov	r14,r6
  80d15c:	3884703a 	and	r2,r7,r2
  80d160:	400a953a 	slli	r5,r8,20
  80d164:	79bffc2c 	andhi	r6,r15,65520
  80d168:	308cb03a 	or	r6,r6,r2
  80d16c:	00e00434 	movhi	r3,32784
  80d170:	18ffffc4 	addi	r3,r3,-1
  80d174:	800497fa 	slli	r2,r16,31
  80d178:	30c6703a 	and	r3,r6,r3
  80d17c:	1946b03a 	or	r3,r3,r5
  80d180:	01600034 	movhi	r5,32768
  80d184:	297fffc4 	addi	r5,r5,-1
  80d188:	194a703a 	and	r5,r3,r5
  80d18c:	288ab03a 	or	r5,r5,r2
  80d190:	2807883a 	mov	r3,r5
  80d194:	7005883a 	mov	r2,r14
  80d198:	dc800217 	ldw	r18,8(sp)
  80d19c:	dc400117 	ldw	r17,4(sp)
  80d1a0:	dc000017 	ldw	r16,0(sp)
  80d1a4:	dec00304 	addi	sp,sp,12
  80d1a8:	f800283a 	ret
  80d1ac:	21000217 	ldw	r4,8(r4)
  80d1b0:	00bf0084 	movi	r2,-1022
  80d1b4:	20803f16 	blt	r4,r2,80d2b4 <__pack_d+0x1b4>
  80d1b8:	0080ffc4 	movi	r2,1023
  80d1bc:	11002c16 	blt	r2,r4,80d270 <__pack_d+0x170>
  80d1c0:	00803fc4 	movi	r2,255
  80d1c4:	408c703a 	and	r6,r8,r2
  80d1c8:	00802004 	movi	r2,128
  80d1cc:	0007883a 	mov	r3,zero
  80d1d0:	000f883a 	mov	r7,zero
  80d1d4:	2280ffc4 	addi	r10,r4,1023
  80d1d8:	30801e26 	beq	r6,r2,80d254 <__pack_d+0x154>
  80d1dc:	00801fc4 	movi	r2,127
  80d1e0:	4089883a 	add	r4,r8,r2
  80d1e4:	220d803a 	cmpltu	r6,r4,r8
  80d1e8:	324d883a 	add	r6,r6,r9
  80d1ec:	2011883a 	mov	r8,r4
  80d1f0:	3013883a 	mov	r9,r6
  80d1f4:	00880034 	movhi	r2,8192
  80d1f8:	10bfffc4 	addi	r2,r2,-1
  80d1fc:	12400d36 	bltu	r2,r9,80d234 <__pack_d+0x134>
  80d200:	4804963a 	slli	r2,r9,24
  80d204:	400cd23a 	srli	r6,r8,8
  80d208:	480ed23a 	srli	r7,r9,8
  80d20c:	013fffc4 	movi	r4,-1
  80d210:	118cb03a 	or	r6,r2,r6
  80d214:	01400434 	movhi	r5,16
  80d218:	297fffc4 	addi	r5,r5,-1
  80d21c:	3104703a 	and	r2,r6,r4
  80d220:	3946703a 	and	r3,r7,r5
  80d224:	5201ffcc 	andi	r8,r10,2047
  80d228:	100d883a 	mov	r6,r2
  80d22c:	180f883a 	mov	r7,r3
  80d230:	003fc706 	br	80d150 <__pack_d+0x50>
  80d234:	480897fa 	slli	r4,r9,31
  80d238:	4004d07a 	srli	r2,r8,1
  80d23c:	4806d07a 	srli	r3,r9,1
  80d240:	52800044 	addi	r10,r10,1
  80d244:	2084b03a 	or	r2,r4,r2
  80d248:	1011883a 	mov	r8,r2
  80d24c:	1813883a 	mov	r9,r3
  80d250:	003feb06 	br	80d200 <__pack_d+0x100>
  80d254:	383fe11e 	bne	r7,zero,80d1dc <__pack_d+0xdc>
  80d258:	01004004 	movi	r4,256
  80d25c:	4104703a 	and	r2,r8,r4
  80d260:	10c4b03a 	or	r2,r2,r3
  80d264:	103fe326 	beq	r2,zero,80d1f4 <__pack_d+0xf4>
  80d268:	3005883a 	mov	r2,r6
  80d26c:	003fdc06 	br	80d1e0 <__pack_d+0xe0>
  80d270:	000d883a 	mov	r6,zero
  80d274:	000f883a 	mov	r7,zero
  80d278:	0201ffc4 	movi	r8,2047
  80d27c:	003fb406 	br	80d150 <__pack_d+0x50>
  80d280:	0005883a 	mov	r2,zero
  80d284:	00c00234 	movhi	r3,8
  80d288:	408cb03a 	or	r6,r8,r2
  80d28c:	48ceb03a 	or	r7,r9,r3
  80d290:	013fffc4 	movi	r4,-1
  80d294:	01400434 	movhi	r5,16
  80d298:	297fffc4 	addi	r5,r5,-1
  80d29c:	3104703a 	and	r2,r6,r4
  80d2a0:	3946703a 	and	r3,r7,r5
  80d2a4:	100d883a 	mov	r6,r2
  80d2a8:	180f883a 	mov	r7,r3
  80d2ac:	0201ffc4 	movi	r8,2047
  80d2b0:	003fa706 	br	80d150 <__pack_d+0x50>
  80d2b4:	1109c83a 	sub	r4,r2,r4
  80d2b8:	00800e04 	movi	r2,56
  80d2bc:	11004316 	blt	r2,r4,80d3cc <__pack_d+0x2cc>
  80d2c0:	21fff804 	addi	r7,r4,-32
  80d2c4:	38004516 	blt	r7,zero,80d3dc <__pack_d+0x2dc>
  80d2c8:	49d8d83a 	srl	r12,r9,r7
  80d2cc:	001b883a 	mov	r13,zero
  80d2d0:	0023883a 	mov	r17,zero
  80d2d4:	01400044 	movi	r5,1
  80d2d8:	0025883a 	mov	r18,zero
  80d2dc:	38004716 	blt	r7,zero,80d3fc <__pack_d+0x2fc>
  80d2e0:	29d6983a 	sll	r11,r5,r7
  80d2e4:	0015883a 	mov	r10,zero
  80d2e8:	00bfffc4 	movi	r2,-1
  80d2ec:	5089883a 	add	r4,r10,r2
  80d2f0:	588b883a 	add	r5,r11,r2
  80d2f4:	228d803a 	cmpltu	r6,r4,r10
  80d2f8:	314b883a 	add	r5,r6,r5
  80d2fc:	4104703a 	and	r2,r8,r4
  80d300:	4946703a 	and	r3,r9,r5
  80d304:	10c4b03a 	or	r2,r2,r3
  80d308:	10000226 	beq	r2,zero,80d314 <__pack_d+0x214>
  80d30c:	04400044 	movi	r17,1
  80d310:	0025883a 	mov	r18,zero
  80d314:	00803fc4 	movi	r2,255
  80d318:	644eb03a 	or	r7,r12,r17
  80d31c:	3892703a 	and	r9,r7,r2
  80d320:	00802004 	movi	r2,128
  80d324:	6c90b03a 	or	r8,r13,r18
  80d328:	0015883a 	mov	r10,zero
  80d32c:	48801626 	beq	r9,r2,80d388 <__pack_d+0x288>
  80d330:	01001fc4 	movi	r4,127
  80d334:	3905883a 	add	r2,r7,r4
  80d338:	11cd803a 	cmpltu	r6,r2,r7
  80d33c:	320d883a 	add	r6,r6,r8
  80d340:	100f883a 	mov	r7,r2
  80d344:	00840034 	movhi	r2,4096
  80d348:	10bfffc4 	addi	r2,r2,-1
  80d34c:	3011883a 	mov	r8,r6
  80d350:	0007883a 	mov	r3,zero
  80d354:	11801b36 	bltu	r2,r6,80d3c4 <__pack_d+0x2c4>
  80d358:	4004963a 	slli	r2,r8,24
  80d35c:	3808d23a 	srli	r4,r7,8
  80d360:	400ad23a 	srli	r5,r8,8
  80d364:	1813883a 	mov	r9,r3
  80d368:	1108b03a 	or	r4,r2,r4
  80d36c:	00bfffc4 	movi	r2,-1
  80d370:	00c00434 	movhi	r3,16
  80d374:	18ffffc4 	addi	r3,r3,-1
  80d378:	208c703a 	and	r6,r4,r2
  80d37c:	28ce703a 	and	r7,r5,r3
  80d380:	4a01ffcc 	andi	r8,r9,2047
  80d384:	003f7206 	br	80d150 <__pack_d+0x50>
  80d388:	503fe91e 	bne	r10,zero,80d330 <__pack_d+0x230>
  80d38c:	01004004 	movi	r4,256
  80d390:	3904703a 	and	r2,r7,r4
  80d394:	0007883a 	mov	r3,zero
  80d398:	10c4b03a 	or	r2,r2,r3
  80d39c:	10000626 	beq	r2,zero,80d3b8 <__pack_d+0x2b8>
  80d3a0:	3a45883a 	add	r2,r7,r9
  80d3a4:	11cd803a 	cmpltu	r6,r2,r7
  80d3a8:	320d883a 	add	r6,r6,r8
  80d3ac:	100f883a 	mov	r7,r2
  80d3b0:	3011883a 	mov	r8,r6
  80d3b4:	0007883a 	mov	r3,zero
  80d3b8:	00840034 	movhi	r2,4096
  80d3bc:	10bfffc4 	addi	r2,r2,-1
  80d3c0:	123fe52e 	bgeu	r2,r8,80d358 <__pack_d+0x258>
  80d3c4:	00c00044 	movi	r3,1
  80d3c8:	003fe306 	br	80d358 <__pack_d+0x258>
  80d3cc:	0009883a 	mov	r4,zero
  80d3d0:	0013883a 	mov	r9,zero
  80d3d4:	000b883a 	mov	r5,zero
  80d3d8:	003fe406 	br	80d36c <__pack_d+0x26c>
  80d3dc:	4a47883a 	add	r3,r9,r9
  80d3e0:	008007c4 	movi	r2,31
  80d3e4:	1105c83a 	sub	r2,r2,r4
  80d3e8:	1886983a 	sll	r3,r3,r2
  80d3ec:	4118d83a 	srl	r12,r8,r4
  80d3f0:	491ad83a 	srl	r13,r9,r4
  80d3f4:	1b18b03a 	or	r12,r3,r12
  80d3f8:	003fb506 	br	80d2d0 <__pack_d+0x1d0>
  80d3fc:	2806d07a 	srli	r3,r5,1
  80d400:	008007c4 	movi	r2,31
  80d404:	1105c83a 	sub	r2,r2,r4
  80d408:	1896d83a 	srl	r11,r3,r2
  80d40c:	2914983a 	sll	r10,r5,r4
  80d410:	003fb506 	br	80d2e8 <__pack_d+0x1e8>

0080d414 <__unpack_d>:
  80d414:	20c00117 	ldw	r3,4(r4)
  80d418:	22400017 	ldw	r9,0(r4)
  80d41c:	00800434 	movhi	r2,16
  80d420:	10bfffc4 	addi	r2,r2,-1
  80d424:	1808d53a 	srli	r4,r3,20
  80d428:	180cd7fa 	srli	r6,r3,31
  80d42c:	1894703a 	and	r10,r3,r2
  80d430:	2201ffcc 	andi	r8,r4,2047
  80d434:	281b883a 	mov	r13,r5
  80d438:	4817883a 	mov	r11,r9
  80d43c:	29800115 	stw	r6,4(r5)
  80d440:	5019883a 	mov	r12,r10
  80d444:	40001e1e 	bne	r8,zero,80d4c0 <__unpack_d+0xac>
  80d448:	4a84b03a 	or	r2,r9,r10
  80d44c:	10001926 	beq	r2,zero,80d4b4 <__unpack_d+0xa0>
  80d450:	4804d63a 	srli	r2,r9,24
  80d454:	500c923a 	slli	r6,r10,8
  80d458:	013f0084 	movi	r4,-1022
  80d45c:	00c40034 	movhi	r3,4096
  80d460:	18ffffc4 	addi	r3,r3,-1
  80d464:	118cb03a 	or	r6,r2,r6
  80d468:	008000c4 	movi	r2,3
  80d46c:	480a923a 	slli	r5,r9,8
  80d470:	68800015 	stw	r2,0(r13)
  80d474:	69000215 	stw	r4,8(r13)
  80d478:	19800b36 	bltu	r3,r6,80d4a8 <__unpack_d+0x94>
  80d47c:	200f883a 	mov	r7,r4
  80d480:	1811883a 	mov	r8,r3
  80d484:	2945883a 	add	r2,r5,r5
  80d488:	1149803a 	cmpltu	r4,r2,r5
  80d48c:	3187883a 	add	r3,r6,r6
  80d490:	20c9883a 	add	r4,r4,r3
  80d494:	100b883a 	mov	r5,r2
  80d498:	200d883a 	mov	r6,r4
  80d49c:	39ffffc4 	addi	r7,r7,-1
  80d4a0:	413ff82e 	bgeu	r8,r4,80d484 <__unpack_d+0x70>
  80d4a4:	69c00215 	stw	r7,8(r13)
  80d4a8:	69800415 	stw	r6,16(r13)
  80d4ac:	69400315 	stw	r5,12(r13)
  80d4b0:	f800283a 	ret
  80d4b4:	00800084 	movi	r2,2
  80d4b8:	28800015 	stw	r2,0(r5)
  80d4bc:	f800283a 	ret
  80d4c0:	0081ffc4 	movi	r2,2047
  80d4c4:	40800f26 	beq	r8,r2,80d504 <__unpack_d+0xf0>
  80d4c8:	480cd63a 	srli	r6,r9,24
  80d4cc:	5006923a 	slli	r3,r10,8
  80d4d0:	4804923a 	slli	r2,r9,8
  80d4d4:	0009883a 	mov	r4,zero
  80d4d8:	30c6b03a 	or	r3,r6,r3
  80d4dc:	01440034 	movhi	r5,4096
  80d4e0:	110cb03a 	or	r6,r2,r4
  80d4e4:	423f0044 	addi	r8,r8,-1023
  80d4e8:	194eb03a 	or	r7,r3,r5
  80d4ec:	008000c4 	movi	r2,3
  80d4f0:	69c00415 	stw	r7,16(r13)
  80d4f4:	6a000215 	stw	r8,8(r13)
  80d4f8:	68800015 	stw	r2,0(r13)
  80d4fc:	69800315 	stw	r6,12(r13)
  80d500:	f800283a 	ret
  80d504:	4a84b03a 	or	r2,r9,r10
  80d508:	1000031e 	bne	r2,zero,80d518 <__unpack_d+0x104>
  80d50c:	00800104 	movi	r2,4
  80d510:	28800015 	stw	r2,0(r5)
  80d514:	f800283a 	ret
  80d518:	0009883a 	mov	r4,zero
  80d51c:	01400234 	movhi	r5,8
  80d520:	4904703a 	and	r2,r9,r4
  80d524:	5146703a 	and	r3,r10,r5
  80d528:	10c4b03a 	or	r2,r2,r3
  80d52c:	10000526 	beq	r2,zero,80d544 <__unpack_d+0x130>
  80d530:	00800044 	movi	r2,1
  80d534:	68800015 	stw	r2,0(r13)
  80d538:	6b000415 	stw	r12,16(r13)
  80d53c:	6ac00315 	stw	r11,12(r13)
  80d540:	f800283a 	ret
  80d544:	68000015 	stw	zero,0(r13)
  80d548:	003ffb06 	br	80d538 <__unpack_d+0x124>

0080d54c <__fpcmp_parts_d>:
  80d54c:	21800017 	ldw	r6,0(r4)
  80d550:	00c00044 	movi	r3,1
  80d554:	19800a2e 	bgeu	r3,r6,80d580 <__fpcmp_parts_d+0x34>
  80d558:	28800017 	ldw	r2,0(r5)
  80d55c:	1880082e 	bgeu	r3,r2,80d580 <__fpcmp_parts_d+0x34>
  80d560:	00c00104 	movi	r3,4
  80d564:	30c02626 	beq	r6,r3,80d600 <__fpcmp_parts_d+0xb4>
  80d568:	10c02226 	beq	r2,r3,80d5f4 <__fpcmp_parts_d+0xa8>
  80d56c:	00c00084 	movi	r3,2
  80d570:	30c00526 	beq	r6,r3,80d588 <__fpcmp_parts_d+0x3c>
  80d574:	10c0071e 	bne	r2,r3,80d594 <__fpcmp_parts_d+0x48>
  80d578:	20800117 	ldw	r2,4(r4)
  80d57c:	1000091e 	bne	r2,zero,80d5a4 <__fpcmp_parts_d+0x58>
  80d580:	00800044 	movi	r2,1
  80d584:	f800283a 	ret
  80d588:	10c01a1e 	bne	r2,r3,80d5f4 <__fpcmp_parts_d+0xa8>
  80d58c:	0005883a 	mov	r2,zero
  80d590:	f800283a 	ret
  80d594:	22000117 	ldw	r8,4(r4)
  80d598:	28800117 	ldw	r2,4(r5)
  80d59c:	40800326 	beq	r8,r2,80d5ac <__fpcmp_parts_d+0x60>
  80d5a0:	403ff726 	beq	r8,zero,80d580 <__fpcmp_parts_d+0x34>
  80d5a4:	00bfffc4 	movi	r2,-1
  80d5a8:	f800283a 	ret
  80d5ac:	20c00217 	ldw	r3,8(r4)
  80d5b0:	28800217 	ldw	r2,8(r5)
  80d5b4:	10fffa16 	blt	r2,r3,80d5a0 <__fpcmp_parts_d+0x54>
  80d5b8:	18800916 	blt	r3,r2,80d5e0 <__fpcmp_parts_d+0x94>
  80d5bc:	21c00417 	ldw	r7,16(r4)
  80d5c0:	28c00417 	ldw	r3,16(r5)
  80d5c4:	21800317 	ldw	r6,12(r4)
  80d5c8:	28800317 	ldw	r2,12(r5)
  80d5cc:	19fff436 	bltu	r3,r7,80d5a0 <__fpcmp_parts_d+0x54>
  80d5d0:	38c00526 	beq	r7,r3,80d5e8 <__fpcmp_parts_d+0x9c>
  80d5d4:	38c00236 	bltu	r7,r3,80d5e0 <__fpcmp_parts_d+0x94>
  80d5d8:	19ffec1e 	bne	r3,r7,80d58c <__fpcmp_parts_d+0x40>
  80d5dc:	30bfeb2e 	bgeu	r6,r2,80d58c <__fpcmp_parts_d+0x40>
  80d5e0:	403fe71e 	bne	r8,zero,80d580 <__fpcmp_parts_d+0x34>
  80d5e4:	003fef06 	br	80d5a4 <__fpcmp_parts_d+0x58>
  80d5e8:	11bffa2e 	bgeu	r2,r6,80d5d4 <__fpcmp_parts_d+0x88>
  80d5ec:	403fe426 	beq	r8,zero,80d580 <__fpcmp_parts_d+0x34>
  80d5f0:	003fec06 	br	80d5a4 <__fpcmp_parts_d+0x58>
  80d5f4:	28800117 	ldw	r2,4(r5)
  80d5f8:	103fe11e 	bne	r2,zero,80d580 <__fpcmp_parts_d+0x34>
  80d5fc:	003fe906 	br	80d5a4 <__fpcmp_parts_d+0x58>
  80d600:	11bfdd1e 	bne	r2,r6,80d578 <__fpcmp_parts_d+0x2c>
  80d604:	28c00117 	ldw	r3,4(r5)
  80d608:	20800117 	ldw	r2,4(r4)
  80d60c:	1885c83a 	sub	r2,r3,r2
  80d610:	f800283a 	ret

0080d614 <free>:
  80d614:	008020b4 	movhi	r2,130
  80d618:	1093eb04 	addi	r2,r2,20396
  80d61c:	200b883a 	mov	r5,r4
  80d620:	11000017 	ldw	r4,0(r2)
  80d624:	0811e9c1 	jmpi	811e9c <_free_r>

0080d628 <malloc>:
  80d628:	008020b4 	movhi	r2,130
  80d62c:	1093eb04 	addi	r2,r2,20396
  80d630:	200b883a 	mov	r5,r4
  80d634:	11000017 	ldw	r4,0(r2)
  80d638:	080d63c1 	jmpi	80d63c <_malloc_r>

0080d63c <_malloc_r>:
  80d63c:	defff604 	addi	sp,sp,-40
  80d640:	28c002c4 	addi	r3,r5,11
  80d644:	00800584 	movi	r2,22
  80d648:	dc800215 	stw	r18,8(sp)
  80d64c:	dfc00915 	stw	ra,36(sp)
  80d650:	df000815 	stw	fp,32(sp)
  80d654:	ddc00715 	stw	r23,28(sp)
  80d658:	dd800615 	stw	r22,24(sp)
  80d65c:	dd400515 	stw	r21,20(sp)
  80d660:	dd000415 	stw	r20,16(sp)
  80d664:	dcc00315 	stw	r19,12(sp)
  80d668:	dc400115 	stw	r17,4(sp)
  80d66c:	dc000015 	stw	r16,0(sp)
  80d670:	2025883a 	mov	r18,r4
  80d674:	10c01236 	bltu	r2,r3,80d6c0 <_malloc_r+0x84>
  80d678:	04400404 	movi	r17,16
  80d67c:	8940142e 	bgeu	r17,r5,80d6d0 <_malloc_r+0x94>
  80d680:	00800304 	movi	r2,12
  80d684:	0007883a 	mov	r3,zero
  80d688:	90800015 	stw	r2,0(r18)
  80d68c:	1805883a 	mov	r2,r3
  80d690:	dfc00917 	ldw	ra,36(sp)
  80d694:	df000817 	ldw	fp,32(sp)
  80d698:	ddc00717 	ldw	r23,28(sp)
  80d69c:	dd800617 	ldw	r22,24(sp)
  80d6a0:	dd400517 	ldw	r21,20(sp)
  80d6a4:	dd000417 	ldw	r20,16(sp)
  80d6a8:	dcc00317 	ldw	r19,12(sp)
  80d6ac:	dc800217 	ldw	r18,8(sp)
  80d6b0:	dc400117 	ldw	r17,4(sp)
  80d6b4:	dc000017 	ldw	r16,0(sp)
  80d6b8:	dec00a04 	addi	sp,sp,40
  80d6bc:	f800283a 	ret
  80d6c0:	00bffe04 	movi	r2,-8
  80d6c4:	18a2703a 	and	r17,r3,r2
  80d6c8:	883fed16 	blt	r17,zero,80d680 <_malloc_r+0x44>
  80d6cc:	897fec36 	bltu	r17,r5,80d680 <_malloc_r+0x44>
  80d6d0:	9009883a 	mov	r4,r18
  80d6d4:	08166e00 	call	8166e0 <__malloc_lock>
  80d6d8:	00807dc4 	movi	r2,503
  80d6dc:	14402b2e 	bgeu	r2,r17,80d78c <_malloc_r+0x150>
  80d6e0:	8806d27a 	srli	r3,r17,9
  80d6e4:	18003f1e 	bne	r3,zero,80d7e4 <_malloc_r+0x1a8>
  80d6e8:	880cd0fa 	srli	r6,r17,3
  80d6ec:	300490fa 	slli	r2,r6,3
  80d6f0:	02c020b4 	movhi	r11,130
  80d6f4:	5acd3c04 	addi	r11,r11,13552
  80d6f8:	12cb883a 	add	r5,r2,r11
  80d6fc:	2c000317 	ldw	r16,12(r5)
  80d700:	580f883a 	mov	r7,r11
  80d704:	2c00041e 	bne	r5,r16,80d718 <_malloc_r+0xdc>
  80d708:	00000a06 	br	80d734 <_malloc_r+0xf8>
  80d70c:	1800860e 	bge	r3,zero,80d928 <_malloc_r+0x2ec>
  80d710:	84000317 	ldw	r16,12(r16)
  80d714:	2c000726 	beq	r5,r16,80d734 <_malloc_r+0xf8>
  80d718:	80800117 	ldw	r2,4(r16)
  80d71c:	00ffff04 	movi	r3,-4
  80d720:	10c8703a 	and	r4,r2,r3
  80d724:	2447c83a 	sub	r3,r4,r17
  80d728:	008003c4 	movi	r2,15
  80d72c:	10fff70e 	bge	r2,r3,80d70c <_malloc_r+0xd0>
  80d730:	31bfffc4 	addi	r6,r6,-1
  80d734:	32400044 	addi	r9,r6,1
  80d738:	028020b4 	movhi	r10,130
  80d73c:	528d3e04 	addi	r10,r10,13560
  80d740:	54000217 	ldw	r16,8(r10)
  80d744:	8280a026 	beq	r16,r10,80d9c8 <_malloc_r+0x38c>
  80d748:	80800117 	ldw	r2,4(r16)
  80d74c:	00ffff04 	movi	r3,-4
  80d750:	10ca703a 	and	r5,r2,r3
  80d754:	2c4dc83a 	sub	r6,r5,r17
  80d758:	008003c4 	movi	r2,15
  80d75c:	11808316 	blt	r2,r6,80d96c <_malloc_r+0x330>
  80d760:	52800315 	stw	r10,12(r10)
  80d764:	52800215 	stw	r10,8(r10)
  80d768:	30002916 	blt	r6,zero,80d810 <_malloc_r+0x1d4>
  80d76c:	8147883a 	add	r3,r16,r5
  80d770:	18800117 	ldw	r2,4(r3)
  80d774:	9009883a 	mov	r4,r18
  80d778:	10800054 	ori	r2,r2,1
  80d77c:	18800115 	stw	r2,4(r3)
  80d780:	08167e80 	call	8167e8 <__malloc_unlock>
  80d784:	80c00204 	addi	r3,r16,8
  80d788:	003fc006 	br	80d68c <_malloc_r+0x50>
  80d78c:	02c020b4 	movhi	r11,130
  80d790:	5acd3c04 	addi	r11,r11,13552
  80d794:	8ac5883a 	add	r2,r17,r11
  80d798:	14000317 	ldw	r16,12(r2)
  80d79c:	580f883a 	mov	r7,r11
  80d7a0:	8806d0fa 	srli	r3,r17,3
  80d7a4:	14006c26 	beq	r2,r16,80d958 <_malloc_r+0x31c>
  80d7a8:	80c00117 	ldw	r3,4(r16)
  80d7ac:	00bfff04 	movi	r2,-4
  80d7b0:	81800317 	ldw	r6,12(r16)
  80d7b4:	1886703a 	and	r3,r3,r2
  80d7b8:	80c7883a 	add	r3,r16,r3
  80d7bc:	18800117 	ldw	r2,4(r3)
  80d7c0:	81400217 	ldw	r5,8(r16)
  80d7c4:	9009883a 	mov	r4,r18
  80d7c8:	10800054 	ori	r2,r2,1
  80d7cc:	18800115 	stw	r2,4(r3)
  80d7d0:	31400215 	stw	r5,8(r6)
  80d7d4:	29800315 	stw	r6,12(r5)
  80d7d8:	08167e80 	call	8167e8 <__malloc_unlock>
  80d7dc:	80c00204 	addi	r3,r16,8
  80d7e0:	003faa06 	br	80d68c <_malloc_r+0x50>
  80d7e4:	00800104 	movi	r2,4
  80d7e8:	10c0052e 	bgeu	r2,r3,80d800 <_malloc_r+0x1c4>
  80d7ec:	00800504 	movi	r2,20
  80d7f0:	10c07836 	bltu	r2,r3,80d9d4 <_malloc_r+0x398>
  80d7f4:	198016c4 	addi	r6,r3,91
  80d7f8:	300490fa 	slli	r2,r6,3
  80d7fc:	003fbc06 	br	80d6f0 <_malloc_r+0xb4>
  80d800:	8804d1ba 	srli	r2,r17,6
  80d804:	11800e04 	addi	r6,r2,56
  80d808:	300490fa 	slli	r2,r6,3
  80d80c:	003fb806 	br	80d6f0 <_malloc_r+0xb4>
  80d810:	00807fc4 	movi	r2,511
  80d814:	1140bb36 	bltu	r2,r5,80db04 <_malloc_r+0x4c8>
  80d818:	2806d0fa 	srli	r3,r5,3
  80d81c:	573ffe04 	addi	fp,r10,-8
  80d820:	00800044 	movi	r2,1
  80d824:	180890fa 	slli	r4,r3,3
  80d828:	1807d0ba 	srai	r3,r3,2
  80d82c:	e1c00117 	ldw	r7,4(fp)
  80d830:	5909883a 	add	r4,r11,r4
  80d834:	21400217 	ldw	r5,8(r4)
  80d838:	10c4983a 	sll	r2,r2,r3
  80d83c:	81000315 	stw	r4,12(r16)
  80d840:	81400215 	stw	r5,8(r16)
  80d844:	388eb03a 	or	r7,r7,r2
  80d848:	2c000315 	stw	r16,12(r5)
  80d84c:	24000215 	stw	r16,8(r4)
  80d850:	e1c00115 	stw	r7,4(fp)
  80d854:	4807883a 	mov	r3,r9
  80d858:	4800cd16 	blt	r9,zero,80db90 <_malloc_r+0x554>
  80d85c:	1807d0ba 	srai	r3,r3,2
  80d860:	00800044 	movi	r2,1
  80d864:	10c8983a 	sll	r4,r2,r3
  80d868:	39004436 	bltu	r7,r4,80d97c <_malloc_r+0x340>
  80d86c:	21c4703a 	and	r2,r4,r7
  80d870:	10000a1e 	bne	r2,zero,80d89c <_malloc_r+0x260>
  80d874:	2109883a 	add	r4,r4,r4
  80d878:	00bfff04 	movi	r2,-4
  80d87c:	4884703a 	and	r2,r9,r2
  80d880:	3906703a 	and	r3,r7,r4
  80d884:	12400104 	addi	r9,r2,4
  80d888:	1800041e 	bne	r3,zero,80d89c <_malloc_r+0x260>
  80d88c:	2109883a 	add	r4,r4,r4
  80d890:	3904703a 	and	r2,r7,r4
  80d894:	4a400104 	addi	r9,r9,4
  80d898:	103ffc26 	beq	r2,zero,80d88c <_malloc_r+0x250>
  80d89c:	480490fa 	slli	r2,r9,3
  80d8a0:	4819883a 	mov	r12,r9
  80d8a4:	023fff04 	movi	r8,-4
  80d8a8:	589b883a 	add	r13,r11,r2
  80d8ac:	6807883a 	mov	r3,r13
  80d8b0:	014003c4 	movi	r5,15
  80d8b4:	1c000317 	ldw	r16,12(r3)
  80d8b8:	1c00041e 	bne	r3,r16,80d8cc <_malloc_r+0x290>
  80d8bc:	0000a706 	br	80db5c <_malloc_r+0x520>
  80d8c0:	3000ab0e 	bge	r6,zero,80db70 <_malloc_r+0x534>
  80d8c4:	84000317 	ldw	r16,12(r16)
  80d8c8:	1c00a426 	beq	r3,r16,80db5c <_malloc_r+0x520>
  80d8cc:	80800117 	ldw	r2,4(r16)
  80d8d0:	1204703a 	and	r2,r2,r8
  80d8d4:	144dc83a 	sub	r6,r2,r17
  80d8d8:	29bff90e 	bge	r5,r6,80d8c0 <_malloc_r+0x284>
  80d8dc:	81000317 	ldw	r4,12(r16)
  80d8e0:	80c00217 	ldw	r3,8(r16)
  80d8e4:	89400054 	ori	r5,r17,1
  80d8e8:	8445883a 	add	r2,r16,r17
  80d8ec:	20c00215 	stw	r3,8(r4)
  80d8f0:	19000315 	stw	r4,12(r3)
  80d8f4:	81400115 	stw	r5,4(r16)
  80d8f8:	1187883a 	add	r3,r2,r6
  80d8fc:	31000054 	ori	r4,r6,1
  80d900:	50800315 	stw	r2,12(r10)
  80d904:	50800215 	stw	r2,8(r10)
  80d908:	19800015 	stw	r6,0(r3)
  80d90c:	11000115 	stw	r4,4(r2)
  80d910:	12800215 	stw	r10,8(r2)
  80d914:	12800315 	stw	r10,12(r2)
  80d918:	9009883a 	mov	r4,r18
  80d91c:	08167e80 	call	8167e8 <__malloc_unlock>
  80d920:	80c00204 	addi	r3,r16,8
  80d924:	003f5906 	br	80d68c <_malloc_r+0x50>
  80d928:	8109883a 	add	r4,r16,r4
  80d92c:	20800117 	ldw	r2,4(r4)
  80d930:	80c00217 	ldw	r3,8(r16)
  80d934:	81400317 	ldw	r5,12(r16)
  80d938:	10800054 	ori	r2,r2,1
  80d93c:	20800115 	stw	r2,4(r4)
  80d940:	28c00215 	stw	r3,8(r5)
  80d944:	19400315 	stw	r5,12(r3)
  80d948:	9009883a 	mov	r4,r18
  80d94c:	08167e80 	call	8167e8 <__malloc_unlock>
  80d950:	80c00204 	addi	r3,r16,8
  80d954:	003f4d06 	br	80d68c <_malloc_r+0x50>
  80d958:	80800204 	addi	r2,r16,8
  80d95c:	14000317 	ldw	r16,12(r2)
  80d960:	143f911e 	bne	r2,r16,80d7a8 <_malloc_r+0x16c>
  80d964:	1a400084 	addi	r9,r3,2
  80d968:	003f7306 	br	80d738 <_malloc_r+0xfc>
  80d96c:	88c00054 	ori	r3,r17,1
  80d970:	8445883a 	add	r2,r16,r17
  80d974:	80c00115 	stw	r3,4(r16)
  80d978:	003fdf06 	br	80d8f8 <_malloc_r+0x2bc>
  80d97c:	e4000217 	ldw	r16,8(fp)
  80d980:	00bfff04 	movi	r2,-4
  80d984:	80c00117 	ldw	r3,4(r16)
  80d988:	802d883a 	mov	r22,r16
  80d98c:	18aa703a 	and	r21,r3,r2
  80d990:	ac401636 	bltu	r21,r17,80d9ec <_malloc_r+0x3b0>
  80d994:	ac49c83a 	sub	r4,r21,r17
  80d998:	008003c4 	movi	r2,15
  80d99c:	1100130e 	bge	r2,r4,80d9ec <_malloc_r+0x3b0>
  80d9a0:	88800054 	ori	r2,r17,1
  80d9a4:	8447883a 	add	r3,r16,r17
  80d9a8:	80800115 	stw	r2,4(r16)
  80d9ac:	20800054 	ori	r2,r4,1
  80d9b0:	18800115 	stw	r2,4(r3)
  80d9b4:	e0c00215 	stw	r3,8(fp)
  80d9b8:	9009883a 	mov	r4,r18
  80d9bc:	08167e80 	call	8167e8 <__malloc_unlock>
  80d9c0:	80c00204 	addi	r3,r16,8
  80d9c4:	003f3106 	br	80d68c <_malloc_r+0x50>
  80d9c8:	39c00117 	ldw	r7,4(r7)
  80d9cc:	573ffe04 	addi	fp,r10,-8
  80d9d0:	003fa006 	br	80d854 <_malloc_r+0x218>
  80d9d4:	00801504 	movi	r2,84
  80d9d8:	10c06736 	bltu	r2,r3,80db78 <_malloc_r+0x53c>
  80d9dc:	8804d33a 	srli	r2,r17,12
  80d9e0:	11801b84 	addi	r6,r2,110
  80d9e4:	300490fa 	slli	r2,r6,3
  80d9e8:	003f4106 	br	80d6f0 <_malloc_r+0xb4>
  80d9ec:	d0a71017 	ldw	r2,-25536(gp)
  80d9f0:	d0e00117 	ldw	r3,-32764(gp)
  80d9f4:	053fffc4 	movi	r20,-1
  80d9f8:	10800404 	addi	r2,r2,16
  80d9fc:	88a7883a 	add	r19,r17,r2
  80da00:	1d000326 	beq	r3,r20,80da10 <_malloc_r+0x3d4>
  80da04:	98c3ffc4 	addi	r3,r19,4095
  80da08:	00bc0004 	movi	r2,-4096
  80da0c:	18a6703a 	and	r19,r3,r2
  80da10:	9009883a 	mov	r4,r18
  80da14:	980b883a 	mov	r5,r19
  80da18:	080df6c0 	call	80df6c <_sbrk_r>
  80da1c:	1009883a 	mov	r4,r2
  80da20:	15000426 	beq	r2,r20,80da34 <_malloc_r+0x3f8>
  80da24:	854b883a 	add	r5,r16,r21
  80da28:	1029883a 	mov	r20,r2
  80da2c:	11405a2e 	bgeu	r2,r5,80db98 <_malloc_r+0x55c>
  80da30:	87000c26 	beq	r16,fp,80da64 <_malloc_r+0x428>
  80da34:	e4000217 	ldw	r16,8(fp)
  80da38:	80c00117 	ldw	r3,4(r16)
  80da3c:	00bfff04 	movi	r2,-4
  80da40:	1884703a 	and	r2,r3,r2
  80da44:	14400336 	bltu	r2,r17,80da54 <_malloc_r+0x418>
  80da48:	1449c83a 	sub	r4,r2,r17
  80da4c:	008003c4 	movi	r2,15
  80da50:	113fd316 	blt	r2,r4,80d9a0 <_malloc_r+0x364>
  80da54:	9009883a 	mov	r4,r18
  80da58:	08167e80 	call	8167e8 <__malloc_unlock>
  80da5c:	0007883a 	mov	r3,zero
  80da60:	003f0a06 	br	80d68c <_malloc_r+0x50>
  80da64:	05c020b4 	movhi	r23,130
  80da68:	bddb1f04 	addi	r23,r23,27772
  80da6c:	b8800017 	ldw	r2,0(r23)
  80da70:	988d883a 	add	r6,r19,r2
  80da74:	b9800015 	stw	r6,0(r23)
  80da78:	d0e00117 	ldw	r3,-32764(gp)
  80da7c:	00bfffc4 	movi	r2,-1
  80da80:	18808e26 	beq	r3,r2,80dcbc <_malloc_r+0x680>
  80da84:	2145c83a 	sub	r2,r4,r5
  80da88:	3085883a 	add	r2,r6,r2
  80da8c:	b8800015 	stw	r2,0(r23)
  80da90:	20c001cc 	andi	r3,r4,7
  80da94:	18005f1e 	bne	r3,zero,80dc14 <_malloc_r+0x5d8>
  80da98:	000b883a 	mov	r5,zero
  80da9c:	a4c5883a 	add	r2,r20,r19
  80daa0:	1083ffcc 	andi	r2,r2,4095
  80daa4:	00c40004 	movi	r3,4096
  80daa8:	1887c83a 	sub	r3,r3,r2
  80daac:	28e7883a 	add	r19,r5,r3
  80dab0:	9009883a 	mov	r4,r18
  80dab4:	980b883a 	mov	r5,r19
  80dab8:	080df6c0 	call	80df6c <_sbrk_r>
  80dabc:	1007883a 	mov	r3,r2
  80dac0:	00bfffc4 	movi	r2,-1
  80dac4:	18807a26 	beq	r3,r2,80dcb0 <_malloc_r+0x674>
  80dac8:	1d05c83a 	sub	r2,r3,r20
  80dacc:	9885883a 	add	r2,r19,r2
  80dad0:	10c00054 	ori	r3,r2,1
  80dad4:	b8800017 	ldw	r2,0(r23)
  80dad8:	a021883a 	mov	r16,r20
  80dadc:	a0c00115 	stw	r3,4(r20)
  80dae0:	9885883a 	add	r2,r19,r2
  80dae4:	b8800015 	stw	r2,0(r23)
  80dae8:	e5000215 	stw	r20,8(fp)
  80daec:	b7003626 	beq	r22,fp,80dbc8 <_malloc_r+0x58c>
  80daf0:	018003c4 	movi	r6,15
  80daf4:	35404b36 	bltu	r6,r21,80dc24 <_malloc_r+0x5e8>
  80daf8:	00800044 	movi	r2,1
  80dafc:	a0800115 	stw	r2,4(r20)
  80db00:	003fcd06 	br	80da38 <_malloc_r+0x3fc>
  80db04:	2808d27a 	srli	r4,r5,9
  80db08:	2000371e 	bne	r4,zero,80dbe8 <_malloc_r+0x5ac>
  80db0c:	2808d0fa 	srli	r4,r5,3
  80db10:	200690fa 	slli	r3,r4,3
  80db14:	1ad1883a 	add	r8,r3,r11
  80db18:	41800217 	ldw	r6,8(r8)
  80db1c:	41805b26 	beq	r8,r6,80dc8c <_malloc_r+0x650>
  80db20:	30800117 	ldw	r2,4(r6)
  80db24:	00ffff04 	movi	r3,-4
  80db28:	10c4703a 	and	r2,r2,r3
  80db2c:	2880022e 	bgeu	r5,r2,80db38 <_malloc_r+0x4fc>
  80db30:	31800217 	ldw	r6,8(r6)
  80db34:	41bffa1e 	bne	r8,r6,80db20 <_malloc_r+0x4e4>
  80db38:	32000317 	ldw	r8,12(r6)
  80db3c:	39c00117 	ldw	r7,4(r7)
  80db40:	82000315 	stw	r8,12(r16)
  80db44:	81800215 	stw	r6,8(r16)
  80db48:	070020b4 	movhi	fp,130
  80db4c:	e70d3c04 	addi	fp,fp,13552
  80db50:	34000315 	stw	r16,12(r6)
  80db54:	44000215 	stw	r16,8(r8)
  80db58:	003f3e06 	br	80d854 <_malloc_r+0x218>
  80db5c:	63000044 	addi	r12,r12,1
  80db60:	608000cc 	andi	r2,r12,3
  80db64:	10005d26 	beq	r2,zero,80dcdc <_malloc_r+0x6a0>
  80db68:	18c00204 	addi	r3,r3,8
  80db6c:	003f5106 	br	80d8b4 <_malloc_r+0x278>
  80db70:	8089883a 	add	r4,r16,r2
  80db74:	003f6d06 	br	80d92c <_malloc_r+0x2f0>
  80db78:	00805504 	movi	r2,340
  80db7c:	10c02036 	bltu	r2,r3,80dc00 <_malloc_r+0x5c4>
  80db80:	8804d3fa 	srli	r2,r17,15
  80db84:	11801dc4 	addi	r6,r2,119
  80db88:	300490fa 	slli	r2,r6,3
  80db8c:	003ed806 	br	80d6f0 <_malloc_r+0xb4>
  80db90:	48c000c4 	addi	r3,r9,3
  80db94:	003f3106 	br	80d85c <_malloc_r+0x220>
  80db98:	05c020b4 	movhi	r23,130
  80db9c:	bddb1f04 	addi	r23,r23,27772
  80dba0:	b8800017 	ldw	r2,0(r23)
  80dba4:	988d883a 	add	r6,r19,r2
  80dba8:	b9800015 	stw	r6,0(r23)
  80dbac:	293fb21e 	bne	r5,r4,80da78 <_malloc_r+0x43c>
  80dbb0:	2083ffcc 	andi	r2,r4,4095
  80dbb4:	103fb01e 	bne	r2,zero,80da78 <_malloc_r+0x43c>
  80dbb8:	e4000217 	ldw	r16,8(fp)
  80dbbc:	9d45883a 	add	r2,r19,r21
  80dbc0:	10800054 	ori	r2,r2,1
  80dbc4:	80800115 	stw	r2,4(r16)
  80dbc8:	b8c00017 	ldw	r3,0(r23)
  80dbcc:	d0a71117 	ldw	r2,-25532(gp)
  80dbd0:	10c0012e 	bgeu	r2,r3,80dbd8 <_malloc_r+0x59c>
  80dbd4:	d0e71115 	stw	r3,-25532(gp)
  80dbd8:	d0a71217 	ldw	r2,-25528(gp)
  80dbdc:	10ff962e 	bgeu	r2,r3,80da38 <_malloc_r+0x3fc>
  80dbe0:	d0e71215 	stw	r3,-25528(gp)
  80dbe4:	003f9406 	br	80da38 <_malloc_r+0x3fc>
  80dbe8:	00800104 	movi	r2,4
  80dbec:	11001e36 	bltu	r2,r4,80dc68 <_malloc_r+0x62c>
  80dbf0:	2804d1ba 	srli	r2,r5,6
  80dbf4:	11000e04 	addi	r4,r2,56
  80dbf8:	200690fa 	slli	r3,r4,3
  80dbfc:	003fc506 	br	80db14 <_malloc_r+0x4d8>
  80dc00:	00815504 	movi	r2,1364
  80dc04:	10c01d2e 	bgeu	r2,r3,80dc7c <_malloc_r+0x640>
  80dc08:	01801f84 	movi	r6,126
  80dc0c:	0080fc04 	movi	r2,1008
  80dc10:	003eb706 	br	80d6f0 <_malloc_r+0xb4>
  80dc14:	00800204 	movi	r2,8
  80dc18:	10cbc83a 	sub	r5,r2,r3
  80dc1c:	2169883a 	add	r20,r4,r5
  80dc20:	003f9e06 	br	80da9c <_malloc_r+0x460>
  80dc24:	00bffe04 	movi	r2,-8
  80dc28:	a93ffd04 	addi	r4,r21,-12
  80dc2c:	2088703a 	and	r4,r4,r2
  80dc30:	b10b883a 	add	r5,r22,r4
  80dc34:	00c00144 	movi	r3,5
  80dc38:	28c00215 	stw	r3,8(r5)
  80dc3c:	28c00115 	stw	r3,4(r5)
  80dc40:	b0800117 	ldw	r2,4(r22)
  80dc44:	1080004c 	andi	r2,r2,1
  80dc48:	2084b03a 	or	r2,r4,r2
  80dc4c:	b0800115 	stw	r2,4(r22)
  80dc50:	313fdd2e 	bgeu	r6,r4,80dbc8 <_malloc_r+0x58c>
  80dc54:	b1400204 	addi	r5,r22,8
  80dc58:	9009883a 	mov	r4,r18
  80dc5c:	0811e9c0 	call	811e9c <_free_r>
  80dc60:	e4000217 	ldw	r16,8(fp)
  80dc64:	003fd806 	br	80dbc8 <_malloc_r+0x58c>
  80dc68:	00800504 	movi	r2,20
  80dc6c:	11001536 	bltu	r2,r4,80dcc4 <_malloc_r+0x688>
  80dc70:	210016c4 	addi	r4,r4,91
  80dc74:	200690fa 	slli	r3,r4,3
  80dc78:	003fa606 	br	80db14 <_malloc_r+0x4d8>
  80dc7c:	8804d4ba 	srli	r2,r17,18
  80dc80:	11801f04 	addi	r6,r2,124
  80dc84:	300490fa 	slli	r2,r6,3
  80dc88:	003e9906 	br	80d6f0 <_malloc_r+0xb4>
  80dc8c:	2009d0ba 	srai	r4,r4,2
  80dc90:	014020b4 	movhi	r5,130
  80dc94:	294d3c04 	addi	r5,r5,13552
  80dc98:	00c00044 	movi	r3,1
  80dc9c:	28800117 	ldw	r2,4(r5)
  80dca0:	1906983a 	sll	r3,r3,r4
  80dca4:	10c4b03a 	or	r2,r2,r3
  80dca8:	28800115 	stw	r2,4(r5)
  80dcac:	003fa306 	br	80db3c <_malloc_r+0x500>
  80dcb0:	0027883a 	mov	r19,zero
  80dcb4:	00c00044 	movi	r3,1
  80dcb8:	003f8606 	br	80dad4 <_malloc_r+0x498>
  80dcbc:	d1200115 	stw	r4,-32764(gp)
  80dcc0:	003f7306 	br	80da90 <_malloc_r+0x454>
  80dcc4:	00801504 	movi	r2,84
  80dcc8:	11001936 	bltu	r2,r4,80dd30 <_malloc_r+0x6f4>
  80dccc:	2804d33a 	srli	r2,r5,12
  80dcd0:	11001b84 	addi	r4,r2,110
  80dcd4:	200690fa 	slli	r3,r4,3
  80dcd8:	003f8e06 	br	80db14 <_malloc_r+0x4d8>
  80dcdc:	480b883a 	mov	r5,r9
  80dce0:	6807883a 	mov	r3,r13
  80dce4:	288000cc 	andi	r2,r5,3
  80dce8:	18fffe04 	addi	r3,r3,-8
  80dcec:	297fffc4 	addi	r5,r5,-1
  80dcf0:	10001526 	beq	r2,zero,80dd48 <_malloc_r+0x70c>
  80dcf4:	18800217 	ldw	r2,8(r3)
  80dcf8:	10fffa26 	beq	r2,r3,80dce4 <_malloc_r+0x6a8>
  80dcfc:	2109883a 	add	r4,r4,r4
  80dd00:	393f1e36 	bltu	r7,r4,80d97c <_malloc_r+0x340>
  80dd04:	203f1d26 	beq	r4,zero,80d97c <_malloc_r+0x340>
  80dd08:	21c4703a 	and	r2,r4,r7
  80dd0c:	10000226 	beq	r2,zero,80dd18 <_malloc_r+0x6dc>
  80dd10:	6013883a 	mov	r9,r12
  80dd14:	003ee106 	br	80d89c <_malloc_r+0x260>
  80dd18:	2109883a 	add	r4,r4,r4
  80dd1c:	3904703a 	and	r2,r7,r4
  80dd20:	63000104 	addi	r12,r12,4
  80dd24:	103ffc26 	beq	r2,zero,80dd18 <_malloc_r+0x6dc>
  80dd28:	6013883a 	mov	r9,r12
  80dd2c:	003edb06 	br	80d89c <_malloc_r+0x260>
  80dd30:	00805504 	movi	r2,340
  80dd34:	11000836 	bltu	r2,r4,80dd58 <_malloc_r+0x71c>
  80dd38:	2804d3fa 	srli	r2,r5,15
  80dd3c:	11001dc4 	addi	r4,r2,119
  80dd40:	200690fa 	slli	r3,r4,3
  80dd44:	003f7306 	br	80db14 <_malloc_r+0x4d8>
  80dd48:	0104303a 	nor	r2,zero,r4
  80dd4c:	388e703a 	and	r7,r7,r2
  80dd50:	e1c00115 	stw	r7,4(fp)
  80dd54:	003fe906 	br	80dcfc <_malloc_r+0x6c0>
  80dd58:	00815504 	movi	r2,1364
  80dd5c:	1100032e 	bgeu	r2,r4,80dd6c <_malloc_r+0x730>
  80dd60:	01001f84 	movi	r4,126
  80dd64:	00c0fc04 	movi	r3,1008
  80dd68:	003f6a06 	br	80db14 <_malloc_r+0x4d8>
  80dd6c:	2804d4ba 	srli	r2,r5,18
  80dd70:	11001f04 	addi	r4,r2,124
  80dd74:	200690fa 	slli	r3,r4,3
  80dd78:	003f6606 	br	80db14 <_malloc_r+0x4d8>

0080dd7c <memcpy>:
  80dd7c:	01c003c4 	movi	r7,15
  80dd80:	2007883a 	mov	r3,r4
  80dd84:	3980032e 	bgeu	r7,r6,80dd94 <memcpy+0x18>
  80dd88:	2904b03a 	or	r2,r5,r4
  80dd8c:	108000cc 	andi	r2,r2,3
  80dd90:	10000926 	beq	r2,zero,80ddb8 <memcpy+0x3c>
  80dd94:	30000626 	beq	r6,zero,80ddb0 <memcpy+0x34>
  80dd98:	30cd883a 	add	r6,r6,r3
  80dd9c:	28800003 	ldbu	r2,0(r5)
  80dda0:	29400044 	addi	r5,r5,1
  80dda4:	18800005 	stb	r2,0(r3)
  80dda8:	18c00044 	addi	r3,r3,1
  80ddac:	30fffb1e 	bne	r6,r3,80dd9c <memcpy+0x20>
  80ddb0:	2005883a 	mov	r2,r4
  80ddb4:	f800283a 	ret
  80ddb8:	3811883a 	mov	r8,r7
  80ddbc:	200f883a 	mov	r7,r4
  80ddc0:	28c00017 	ldw	r3,0(r5)
  80ddc4:	31bffc04 	addi	r6,r6,-16
  80ddc8:	38c00015 	stw	r3,0(r7)
  80ddcc:	28800117 	ldw	r2,4(r5)
  80ddd0:	38800115 	stw	r2,4(r7)
  80ddd4:	28c00217 	ldw	r3,8(r5)
  80ddd8:	38c00215 	stw	r3,8(r7)
  80dddc:	28800317 	ldw	r2,12(r5)
  80dde0:	29400404 	addi	r5,r5,16
  80dde4:	38800315 	stw	r2,12(r7)
  80dde8:	39c00404 	addi	r7,r7,16
  80ddec:	41bff436 	bltu	r8,r6,80ddc0 <memcpy+0x44>
  80ddf0:	008000c4 	movi	r2,3
  80ddf4:	1180072e 	bgeu	r2,r6,80de14 <memcpy+0x98>
  80ddf8:	1007883a 	mov	r3,r2
  80ddfc:	28800017 	ldw	r2,0(r5)
  80de00:	31bfff04 	addi	r6,r6,-4
  80de04:	29400104 	addi	r5,r5,4
  80de08:	38800015 	stw	r2,0(r7)
  80de0c:	39c00104 	addi	r7,r7,4
  80de10:	19bffa36 	bltu	r3,r6,80ddfc <memcpy+0x80>
  80de14:	3807883a 	mov	r3,r7
  80de18:	003fde06 	br	80dd94 <memcpy+0x18>

0080de1c <printf>:
  80de1c:	defffb04 	addi	sp,sp,-20
  80de20:	dfc00115 	stw	ra,4(sp)
  80de24:	d9400215 	stw	r5,8(sp)
  80de28:	d9800315 	stw	r6,12(sp)
  80de2c:	d9c00415 	stw	r7,16(sp)
  80de30:	008020b4 	movhi	r2,130
  80de34:	1093eb04 	addi	r2,r2,20396
  80de38:	10c00017 	ldw	r3,0(r2)
  80de3c:	200b883a 	mov	r5,r4
  80de40:	d8800204 	addi	r2,sp,8
  80de44:	19000217 	ldw	r4,8(r3)
  80de48:	100d883a 	mov	r6,r2
  80de4c:	d8800015 	stw	r2,0(sp)
  80de50:	080ff540 	call	80ff54 <__vfprintf_internal>
  80de54:	dfc00117 	ldw	ra,4(sp)
  80de58:	dec00504 	addi	sp,sp,20
  80de5c:	f800283a 	ret

0080de60 <_printf_r>:
  80de60:	defffc04 	addi	sp,sp,-16
  80de64:	dfc00115 	stw	ra,4(sp)
  80de68:	d9800215 	stw	r6,8(sp)
  80de6c:	d9c00315 	stw	r7,12(sp)
  80de70:	280d883a 	mov	r6,r5
  80de74:	21400217 	ldw	r5,8(r4)
  80de78:	d8c00204 	addi	r3,sp,8
  80de7c:	180f883a 	mov	r7,r3
  80de80:	d8c00015 	stw	r3,0(sp)
  80de84:	080e0a80 	call	80e0a8 <___vfprintf_internal_r>
  80de88:	dfc00117 	ldw	ra,4(sp)
  80de8c:	dec00404 	addi	sp,sp,16
  80de90:	f800283a 	ret

0080de94 <putchar>:
  80de94:	008020b4 	movhi	r2,130
  80de98:	1093eb04 	addi	r2,r2,20396
  80de9c:	11800017 	ldw	r6,0(r2)
  80dea0:	200b883a 	mov	r5,r4
  80dea4:	3009883a 	mov	r4,r6
  80dea8:	31800217 	ldw	r6,8(r6)
  80deac:	0813d781 	jmpi	813d78 <_putc_r>

0080deb0 <_putchar_r>:
  80deb0:	21800217 	ldw	r6,8(r4)
  80deb4:	0813d781 	jmpi	813d78 <_putc_r>

0080deb8 <_puts_r>:
  80deb8:	defff604 	addi	sp,sp,-40
  80debc:	dc400715 	stw	r17,28(sp)
  80dec0:	2023883a 	mov	r17,r4
  80dec4:	2809883a 	mov	r4,r5
  80dec8:	dfc00915 	stw	ra,36(sp)
  80decc:	dcc00815 	stw	r19,32(sp)
  80ded0:	2827883a 	mov	r19,r5
  80ded4:	080dfdc0 	call	80dfdc <strlen>
  80ded8:	89400217 	ldw	r5,8(r17)
  80dedc:	00c020b4 	movhi	r3,130
  80dee0:	18cc5204 	addi	r3,r3,12616
  80dee4:	01c00044 	movi	r7,1
  80dee8:	12000044 	addi	r8,r2,1
  80deec:	d8c00515 	stw	r3,20(sp)
  80def0:	d9c00615 	stw	r7,24(sp)
  80def4:	d8c00304 	addi	r3,sp,12
  80def8:	01c00084 	movi	r7,2
  80defc:	8809883a 	mov	r4,r17
  80df00:	d80d883a 	mov	r6,sp
  80df04:	d8c00015 	stw	r3,0(sp)
  80df08:	dcc00315 	stw	r19,12(sp)
  80df0c:	da000215 	stw	r8,8(sp)
  80df10:	d9c00115 	stw	r7,4(sp)
  80df14:	d8800415 	stw	r2,16(sp)
  80df18:	08121b00 	call	8121b0 <__sfvwrite_r>
  80df1c:	00ffffc4 	movi	r3,-1
  80df20:	10000626 	beq	r2,zero,80df3c <_puts_r+0x84>
  80df24:	1805883a 	mov	r2,r3
  80df28:	dfc00917 	ldw	ra,36(sp)
  80df2c:	dcc00817 	ldw	r19,32(sp)
  80df30:	dc400717 	ldw	r17,28(sp)
  80df34:	dec00a04 	addi	sp,sp,40
  80df38:	f800283a 	ret
  80df3c:	00c00284 	movi	r3,10
  80df40:	1805883a 	mov	r2,r3
  80df44:	dfc00917 	ldw	ra,36(sp)
  80df48:	dcc00817 	ldw	r19,32(sp)
  80df4c:	dc400717 	ldw	r17,28(sp)
  80df50:	dec00a04 	addi	sp,sp,40
  80df54:	f800283a 	ret

0080df58 <puts>:
  80df58:	008020b4 	movhi	r2,130
  80df5c:	1093eb04 	addi	r2,r2,20396
  80df60:	200b883a 	mov	r5,r4
  80df64:	11000017 	ldw	r4,0(r2)
  80df68:	080deb81 	jmpi	80deb8 <_puts_r>

0080df6c <_sbrk_r>:
  80df6c:	defffd04 	addi	sp,sp,-12
  80df70:	dc000015 	stw	r16,0(sp)
  80df74:	040020b4 	movhi	r16,130
  80df78:	841afc04 	addi	r16,r16,27632
  80df7c:	dc400115 	stw	r17,4(sp)
  80df80:	80000015 	stw	zero,0(r16)
  80df84:	2023883a 	mov	r17,r4
  80df88:	2809883a 	mov	r4,r5
  80df8c:	dfc00215 	stw	ra,8(sp)
  80df90:	081639c0 	call	81639c <sbrk>
  80df94:	1007883a 	mov	r3,r2
  80df98:	00bfffc4 	movi	r2,-1
  80df9c:	18800626 	beq	r3,r2,80dfb8 <_sbrk_r+0x4c>
  80dfa0:	1805883a 	mov	r2,r3
  80dfa4:	dfc00217 	ldw	ra,8(sp)
  80dfa8:	dc400117 	ldw	r17,4(sp)
  80dfac:	dc000017 	ldw	r16,0(sp)
  80dfb0:	dec00304 	addi	sp,sp,12
  80dfb4:	f800283a 	ret
  80dfb8:	80800017 	ldw	r2,0(r16)
  80dfbc:	103ff826 	beq	r2,zero,80dfa0 <_sbrk_r+0x34>
  80dfc0:	88800015 	stw	r2,0(r17)
  80dfc4:	1805883a 	mov	r2,r3
  80dfc8:	dfc00217 	ldw	ra,8(sp)
  80dfcc:	dc400117 	ldw	r17,4(sp)
  80dfd0:	dc000017 	ldw	r16,0(sp)
  80dfd4:	dec00304 	addi	sp,sp,12
  80dfd8:	f800283a 	ret

0080dfdc <strlen>:
  80dfdc:	208000cc 	andi	r2,r4,3
  80dfe0:	2011883a 	mov	r8,r4
  80dfe4:	1000161e 	bne	r2,zero,80e040 <strlen+0x64>
  80dfe8:	20c00017 	ldw	r3,0(r4)
  80dfec:	017fbff4 	movhi	r5,65279
  80dff0:	297fbfc4 	addi	r5,r5,-257
  80dff4:	01e02074 	movhi	r7,32897
  80dff8:	39e02004 	addi	r7,r7,-32640
  80dffc:	1945883a 	add	r2,r3,r5
  80e000:	11c4703a 	and	r2,r2,r7
  80e004:	00c6303a 	nor	r3,zero,r3
  80e008:	1886703a 	and	r3,r3,r2
  80e00c:	18000c1e 	bne	r3,zero,80e040 <strlen+0x64>
  80e010:	280d883a 	mov	r6,r5
  80e014:	380b883a 	mov	r5,r7
  80e018:	21000104 	addi	r4,r4,4
  80e01c:	20800017 	ldw	r2,0(r4)
  80e020:	1187883a 	add	r3,r2,r6
  80e024:	1946703a 	and	r3,r3,r5
  80e028:	0084303a 	nor	r2,zero,r2
  80e02c:	10c4703a 	and	r2,r2,r3
  80e030:	103ff926 	beq	r2,zero,80e018 <strlen+0x3c>
  80e034:	20800007 	ldb	r2,0(r4)
  80e038:	10000326 	beq	r2,zero,80e048 <strlen+0x6c>
  80e03c:	21000044 	addi	r4,r4,1
  80e040:	20800007 	ldb	r2,0(r4)
  80e044:	103ffd1e 	bne	r2,zero,80e03c <strlen+0x60>
  80e048:	2205c83a 	sub	r2,r4,r8
  80e04c:	f800283a 	ret

0080e050 <__sprint_r>:
  80e050:	30800217 	ldw	r2,8(r6)
  80e054:	defffe04 	addi	sp,sp,-8
  80e058:	dc000015 	stw	r16,0(sp)
  80e05c:	dfc00115 	stw	ra,4(sp)
  80e060:	3021883a 	mov	r16,r6
  80e064:	0007883a 	mov	r3,zero
  80e068:	1000061e 	bne	r2,zero,80e084 <__sprint_r+0x34>
  80e06c:	1805883a 	mov	r2,r3
  80e070:	30000115 	stw	zero,4(r6)
  80e074:	dfc00117 	ldw	ra,4(sp)
  80e078:	dc000017 	ldw	r16,0(sp)
  80e07c:	dec00204 	addi	sp,sp,8
  80e080:	f800283a 	ret
  80e084:	08121b00 	call	8121b0 <__sfvwrite_r>
  80e088:	1007883a 	mov	r3,r2
  80e08c:	1805883a 	mov	r2,r3
  80e090:	80000115 	stw	zero,4(r16)
  80e094:	80000215 	stw	zero,8(r16)
  80e098:	dfc00117 	ldw	ra,4(sp)
  80e09c:	dc000017 	ldw	r16,0(sp)
  80e0a0:	dec00204 	addi	sp,sp,8
  80e0a4:	f800283a 	ret

0080e0a8 <___vfprintf_internal_r>:
  80e0a8:	defea404 	addi	sp,sp,-1392
  80e0ac:	dd815815 	stw	r22,1376(sp)
  80e0b0:	dc015215 	stw	r16,1352(sp)
  80e0b4:	d9c15115 	stw	r7,1348(sp)
  80e0b8:	dfc15b15 	stw	ra,1388(sp)
  80e0bc:	df015a15 	stw	fp,1384(sp)
  80e0c0:	ddc15915 	stw	r23,1380(sp)
  80e0c4:	dd415715 	stw	r21,1372(sp)
  80e0c8:	dd015615 	stw	r20,1368(sp)
  80e0cc:	dcc15515 	stw	r19,1364(sp)
  80e0d0:	dc815415 	stw	r18,1360(sp)
  80e0d4:	dc415315 	stw	r17,1356(sp)
  80e0d8:	282d883a 	mov	r22,r5
  80e0dc:	3021883a 	mov	r16,r6
  80e0e0:	d9014f15 	stw	r4,1340(sp)
  80e0e4:	08127d40 	call	8127d4 <_localeconv_r>
  80e0e8:	10800017 	ldw	r2,0(r2)
  80e0ec:	d9c15117 	ldw	r7,1348(sp)
  80e0f0:	d8814915 	stw	r2,1316(sp)
  80e0f4:	d8814f17 	ldw	r2,1340(sp)
  80e0f8:	10000226 	beq	r2,zero,80e104 <___vfprintf_internal_r+0x5c>
  80e0fc:	10800e17 	ldw	r2,56(r2)
  80e100:	10020d26 	beq	r2,zero,80e938 <___vfprintf_internal_r+0x890>
  80e104:	b080030b 	ldhu	r2,12(r22)
  80e108:	1080020c 	andi	r2,r2,8
  80e10c:	10020e26 	beq	r2,zero,80e948 <___vfprintf_internal_r+0x8a0>
  80e110:	b0800417 	ldw	r2,16(r22)
  80e114:	10020c26 	beq	r2,zero,80e948 <___vfprintf_internal_r+0x8a0>
  80e118:	b200030b 	ldhu	r8,12(r22)
  80e11c:	00800284 	movi	r2,10
  80e120:	40c0068c 	andi	r3,r8,26
  80e124:	18802f1e 	bne	r3,r2,80e1e4 <___vfprintf_internal_r+0x13c>
  80e128:	b080038f 	ldh	r2,14(r22)
  80e12c:	10002d16 	blt	r2,zero,80e1e4 <___vfprintf_internal_r+0x13c>
  80e130:	b240038b 	ldhu	r9,14(r22)
  80e134:	b2800717 	ldw	r10,28(r22)
  80e138:	b2c00917 	ldw	r11,36(r22)
  80e13c:	d9014f17 	ldw	r4,1340(sp)
  80e140:	dc402904 	addi	r17,sp,164
  80e144:	d8804004 	addi	r2,sp,256
  80e148:	00c10004 	movi	r3,1024
  80e14c:	423fff4c 	andi	r8,r8,65533
  80e150:	800d883a 	mov	r6,r16
  80e154:	880b883a 	mov	r5,r17
  80e158:	da002c0d 	sth	r8,176(sp)
  80e15c:	da402c8d 	sth	r9,178(sp)
  80e160:	da803015 	stw	r10,192(sp)
  80e164:	dac03215 	stw	r11,200(sp)
  80e168:	d8802d15 	stw	r2,180(sp)
  80e16c:	d8c02e15 	stw	r3,184(sp)
  80e170:	d8802915 	stw	r2,164(sp)
  80e174:	d8c02b15 	stw	r3,172(sp)
  80e178:	d8002f15 	stw	zero,188(sp)
  80e17c:	080e0a80 	call	80e0a8 <___vfprintf_internal_r>
  80e180:	d8814b15 	stw	r2,1324(sp)
  80e184:	10000416 	blt	r2,zero,80e198 <___vfprintf_internal_r+0xf0>
  80e188:	d9014f17 	ldw	r4,1340(sp)
  80e18c:	880b883a 	mov	r5,r17
  80e190:	08118800 	call	811880 <_fflush_r>
  80e194:	1002321e 	bne	r2,zero,80ea60 <___vfprintf_internal_r+0x9b8>
  80e198:	d8802c0b 	ldhu	r2,176(sp)
  80e19c:	1080100c 	andi	r2,r2,64
  80e1a0:	10000326 	beq	r2,zero,80e1b0 <___vfprintf_internal_r+0x108>
  80e1a4:	b080030b 	ldhu	r2,12(r22)
  80e1a8:	10801014 	ori	r2,r2,64
  80e1ac:	b080030d 	sth	r2,12(r22)
  80e1b0:	d8814b17 	ldw	r2,1324(sp)
  80e1b4:	dfc15b17 	ldw	ra,1388(sp)
  80e1b8:	df015a17 	ldw	fp,1384(sp)
  80e1bc:	ddc15917 	ldw	r23,1380(sp)
  80e1c0:	dd815817 	ldw	r22,1376(sp)
  80e1c4:	dd415717 	ldw	r21,1372(sp)
  80e1c8:	dd015617 	ldw	r20,1368(sp)
  80e1cc:	dcc15517 	ldw	r19,1364(sp)
  80e1d0:	dc815417 	ldw	r18,1360(sp)
  80e1d4:	dc415317 	ldw	r17,1356(sp)
  80e1d8:	dc015217 	ldw	r16,1352(sp)
  80e1dc:	dec15c04 	addi	sp,sp,1392
  80e1e0:	f800283a 	ret
  80e1e4:	0005883a 	mov	r2,zero
  80e1e8:	0007883a 	mov	r3,zero
  80e1ec:	dd401904 	addi	r21,sp,100
  80e1f0:	d8814215 	stw	r2,1288(sp)
  80e1f4:	802f883a 	mov	r23,r16
  80e1f8:	d8c14315 	stw	r3,1292(sp)
  80e1fc:	d8014b15 	stw	zero,1324(sp)
  80e200:	d8014815 	stw	zero,1312(sp)
  80e204:	d8014415 	stw	zero,1296(sp)
  80e208:	d8014715 	stw	zero,1308(sp)
  80e20c:	dd400c15 	stw	r21,48(sp)
  80e210:	d8000e15 	stw	zero,56(sp)
  80e214:	d8000d15 	stw	zero,52(sp)
  80e218:	b8800007 	ldb	r2,0(r23)
  80e21c:	10001926 	beq	r2,zero,80e284 <___vfprintf_internal_r+0x1dc>
  80e220:	00c00944 	movi	r3,37
  80e224:	10c01726 	beq	r2,r3,80e284 <___vfprintf_internal_r+0x1dc>
  80e228:	b821883a 	mov	r16,r23
  80e22c:	00000106 	br	80e234 <___vfprintf_internal_r+0x18c>
  80e230:	10c00326 	beq	r2,r3,80e240 <___vfprintf_internal_r+0x198>
  80e234:	84000044 	addi	r16,r16,1
  80e238:	80800007 	ldb	r2,0(r16)
  80e23c:	103ffc1e 	bne	r2,zero,80e230 <___vfprintf_internal_r+0x188>
  80e240:	85e7c83a 	sub	r19,r16,r23
  80e244:	98000e26 	beq	r19,zero,80e280 <___vfprintf_internal_r+0x1d8>
  80e248:	dc800e17 	ldw	r18,56(sp)
  80e24c:	dc400d17 	ldw	r17,52(sp)
  80e250:	008001c4 	movi	r2,7
  80e254:	94e5883a 	add	r18,r18,r19
  80e258:	8c400044 	addi	r17,r17,1
  80e25c:	adc00015 	stw	r23,0(r21)
  80e260:	dc800e15 	stw	r18,56(sp)
  80e264:	acc00115 	stw	r19,4(r21)
  80e268:	dc400d15 	stw	r17,52(sp)
  80e26c:	14428b16 	blt	r2,r17,80ec9c <___vfprintf_internal_r+0xbf4>
  80e270:	ad400204 	addi	r21,r21,8
  80e274:	d9014b17 	ldw	r4,1324(sp)
  80e278:	24c9883a 	add	r4,r4,r19
  80e27c:	d9014b15 	stw	r4,1324(sp)
  80e280:	802f883a 	mov	r23,r16
  80e284:	b8800007 	ldb	r2,0(r23)
  80e288:	10013c26 	beq	r2,zero,80e77c <___vfprintf_internal_r+0x6d4>
  80e28c:	bdc00044 	addi	r23,r23,1
  80e290:	d8000405 	stb	zero,16(sp)
  80e294:	b8c00007 	ldb	r3,0(r23)
  80e298:	04ffffc4 	movi	r19,-1
  80e29c:	d8014c15 	stw	zero,1328(sp)
  80e2a0:	d8014a15 	stw	zero,1320(sp)
  80e2a4:	d8c14d15 	stw	r3,1332(sp)
  80e2a8:	bdc00044 	addi	r23,r23,1
  80e2ac:	d9414d17 	ldw	r5,1332(sp)
  80e2b0:	00801604 	movi	r2,88
  80e2b4:	28fff804 	addi	r3,r5,-32
  80e2b8:	10c06036 	bltu	r2,r3,80e43c <___vfprintf_internal_r+0x394>
  80e2bc:	18c5883a 	add	r2,r3,r3
  80e2c0:	1085883a 	add	r2,r2,r2
  80e2c4:	00c02074 	movhi	r3,129
  80e2c8:	18f8b604 	addi	r3,r3,-7464
  80e2cc:	10c5883a 	add	r2,r2,r3
  80e2d0:	11000017 	ldw	r4,0(r2)
  80e2d4:	2000683a 	jmp	r4
  80e2d8:	0080f24c 	andi	r2,zero,969
  80e2dc:	0080e43c 	xorhi	r2,zero,912
  80e2e0:	0080e43c 	xorhi	r2,zero,912
  80e2e4:	0080f238 	rdprs	r2,zero,968
  80e2e8:	0080e43c 	xorhi	r2,zero,912
  80e2ec:	0080e43c 	xorhi	r2,zero,912
  80e2f0:	0080e43c 	xorhi	r2,zero,912
  80e2f4:	0080e43c 	xorhi	r2,zero,912
  80e2f8:	0080e43c 	xorhi	r2,zero,912
  80e2fc:	0080e43c 	xorhi	r2,zero,912
  80e300:	0080f018 	cmpnei	r2,zero,960
  80e304:	0080f228 	cmpgeui	r2,zero,968
  80e308:	0080e43c 	xorhi	r2,zero,912
  80e30c:	0080f030 	cmpltui	r2,zero,960
  80e310:	0080f2c4 	movi	r2,971
  80e314:	0080e43c 	xorhi	r2,zero,912
  80e318:	0080f2b0 	cmpltui	r2,zero,970
  80e31c:	0080f278 	rdprs	r2,zero,969
  80e320:	0080f278 	rdprs	r2,zero,969
  80e324:	0080f278 	rdprs	r2,zero,969
  80e328:	0080f278 	rdprs	r2,zero,969
  80e32c:	0080f278 	rdprs	r2,zero,969
  80e330:	0080f278 	rdprs	r2,zero,969
  80e334:	0080f278 	rdprs	r2,zero,969
  80e338:	0080f278 	rdprs	r2,zero,969
  80e33c:	0080f278 	rdprs	r2,zero,969
  80e340:	0080e43c 	xorhi	r2,zero,912
  80e344:	0080e43c 	xorhi	r2,zero,912
  80e348:	0080e43c 	xorhi	r2,zero,912
  80e34c:	0080e43c 	xorhi	r2,zero,912
  80e350:	0080e43c 	xorhi	r2,zero,912
  80e354:	0080e43c 	xorhi	r2,zero,912
  80e358:	0080e43c 	xorhi	r2,zero,912
  80e35c:	0080e43c 	xorhi	r2,zero,912
  80e360:	0080e43c 	xorhi	r2,zero,912
  80e364:	0080e43c 	xorhi	r2,zero,912
  80e368:	0080ea94 	movui	r2,938
  80e36c:	0080f100 	call	80f10 <OSCtxSw_SWITCH_PC+0x80ed0>
  80e370:	0080e43c 	xorhi	r2,zero,912
  80e374:	0080f100 	call	80f10 <OSCtxSw_SWITCH_PC+0x80ed0>
  80e378:	0080e43c 	xorhi	r2,zero,912
  80e37c:	0080e43c 	xorhi	r2,zero,912
  80e380:	0080e43c 	xorhi	r2,zero,912
  80e384:	0080e43c 	xorhi	r2,zero,912
  80e388:	0080f264 	muli	r2,zero,969
  80e38c:	0080e43c 	xorhi	r2,zero,912
  80e390:	0080e43c 	xorhi	r2,zero,912
  80e394:	0080eb48 	cmpgei	r2,zero,941
  80e398:	0080e43c 	xorhi	r2,zero,912
  80e39c:	0080e43c 	xorhi	r2,zero,912
  80e3a0:	0080e43c 	xorhi	r2,zero,912
  80e3a4:	0080e43c 	xorhi	r2,zero,912
  80e3a8:	0080e43c 	xorhi	r2,zero,912
  80e3ac:	0080eb94 	movui	r2,942
  80e3b0:	0080e43c 	xorhi	r2,zero,912
  80e3b4:	0080e43c 	xorhi	r2,zero,912
  80e3b8:	0080f1b4 	movhi	r2,966
  80e3bc:	0080e43c 	xorhi	r2,zero,912
  80e3c0:	0080e43c 	xorhi	r2,zero,912
  80e3c4:	0080e43c 	xorhi	r2,zero,912
  80e3c8:	0080e43c 	xorhi	r2,zero,912
  80e3cc:	0080e43c 	xorhi	r2,zero,912
  80e3d0:	0080e43c 	xorhi	r2,zero,912
  80e3d4:	0080e43c 	xorhi	r2,zero,912
  80e3d8:	0080e43c 	xorhi	r2,zero,912
  80e3dc:	0080e43c 	xorhi	r2,zero,912
  80e3e0:	0080e43c 	xorhi	r2,zero,912
  80e3e4:	0080f188 	cmpgei	r2,zero,966
  80e3e8:	0080eaa0 	cmpeqi	r2,zero,938
  80e3ec:	0080f100 	call	80f10 <OSCtxSw_SWITCH_PC+0x80ed0>
  80e3f0:	0080f100 	call	80f10 <OSCtxSw_SWITCH_PC+0x80ed0>
  80e3f4:	0080f100 	call	80f10 <OSCtxSw_SWITCH_PC+0x80ed0>
  80e3f8:	0080f0ec 	andhi	r2,zero,963
  80e3fc:	0080eaa0 	cmpeqi	r2,zero,938
  80e400:	0080e43c 	xorhi	r2,zero,912
  80e404:	0080e43c 	xorhi	r2,zero,912
  80e408:	0080f074 	movhi	r2,961
  80e40c:	0080e43c 	xorhi	r2,zero,912
  80e410:	0080f044 	movi	r2,961
  80e414:	0080eb54 	movui	r2,941
  80e418:	0080f0a4 	muli	r2,zero,962
  80e41c:	0080f090 	cmplti	r2,zero,962
  80e420:	0080e43c 	xorhi	r2,zero,912
  80e424:	0080f320 	cmpeqi	r2,zero,972
  80e428:	0080e43c 	xorhi	r2,zero,912
  80e42c:	0080eba0 	cmpeqi	r2,zero,942
  80e430:	0080e43c 	xorhi	r2,zero,912
  80e434:	0080e43c 	xorhi	r2,zero,912
  80e438:	0080f218 	cmpnei	r2,zero,968
  80e43c:	d9014d17 	ldw	r4,1332(sp)
  80e440:	2000ce26 	beq	r4,zero,80e77c <___vfprintf_internal_r+0x6d4>
  80e444:	01400044 	movi	r5,1
  80e448:	d9800f04 	addi	r6,sp,60
  80e44c:	d9c14015 	stw	r7,1280(sp)
  80e450:	d9414515 	stw	r5,1300(sp)
  80e454:	d9814115 	stw	r6,1284(sp)
  80e458:	280f883a 	mov	r7,r5
  80e45c:	d9000f05 	stb	r4,60(sp)
  80e460:	d8000405 	stb	zero,16(sp)
  80e464:	d8014615 	stw	zero,1304(sp)
  80e468:	d8c14c17 	ldw	r3,1328(sp)
  80e46c:	1880008c 	andi	r2,r3,2
  80e470:	1005003a 	cmpeq	r2,r2,zero
  80e474:	d8815015 	stw	r2,1344(sp)
  80e478:	1000031e 	bne	r2,zero,80e488 <___vfprintf_internal_r+0x3e0>
  80e47c:	d9014517 	ldw	r4,1300(sp)
  80e480:	21000084 	addi	r4,r4,2
  80e484:	d9014515 	stw	r4,1300(sp)
  80e488:	d9414c17 	ldw	r5,1328(sp)
  80e48c:	2940210c 	andi	r5,r5,132
  80e490:	d9414e15 	stw	r5,1336(sp)
  80e494:	28002d1e 	bne	r5,zero,80e54c <___vfprintf_internal_r+0x4a4>
  80e498:	d9814a17 	ldw	r6,1320(sp)
  80e49c:	d8814517 	ldw	r2,1300(sp)
  80e4a0:	30a1c83a 	sub	r16,r6,r2
  80e4a4:	0400290e 	bge	zero,r16,80e54c <___vfprintf_internal_r+0x4a4>
  80e4a8:	00800404 	movi	r2,16
  80e4ac:	1404580e 	bge	r2,r16,80f610 <___vfprintf_internal_r+0x1568>
  80e4b0:	dc800e17 	ldw	r18,56(sp)
  80e4b4:	dc400d17 	ldw	r17,52(sp)
  80e4b8:	1027883a 	mov	r19,r2
  80e4bc:	070020b4 	movhi	fp,130
  80e4c0:	e70c6e84 	addi	fp,fp,12730
  80e4c4:	050001c4 	movi	r20,7
  80e4c8:	00000306 	br	80e4d8 <___vfprintf_internal_r+0x430>
  80e4cc:	843ffc04 	addi	r16,r16,-16
  80e4d0:	ad400204 	addi	r21,r21,8
  80e4d4:	9c00130e 	bge	r19,r16,80e524 <___vfprintf_internal_r+0x47c>
  80e4d8:	94800404 	addi	r18,r18,16
  80e4dc:	8c400044 	addi	r17,r17,1
  80e4e0:	af000015 	stw	fp,0(r21)
  80e4e4:	acc00115 	stw	r19,4(r21)
  80e4e8:	dc800e15 	stw	r18,56(sp)
  80e4ec:	dc400d15 	stw	r17,52(sp)
  80e4f0:	a47ff60e 	bge	r20,r17,80e4cc <___vfprintf_internal_r+0x424>
  80e4f4:	d9014f17 	ldw	r4,1340(sp)
  80e4f8:	b00b883a 	mov	r5,r22
  80e4fc:	d9800c04 	addi	r6,sp,48
  80e500:	d9c15115 	stw	r7,1348(sp)
  80e504:	080e0500 	call	80e050 <__sprint_r>
  80e508:	d9c15117 	ldw	r7,1348(sp)
  80e50c:	10009e1e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80e510:	843ffc04 	addi	r16,r16,-16
  80e514:	dc800e17 	ldw	r18,56(sp)
  80e518:	dc400d17 	ldw	r17,52(sp)
  80e51c:	dd401904 	addi	r21,sp,100
  80e520:	9c3fed16 	blt	r19,r16,80e4d8 <___vfprintf_internal_r+0x430>
  80e524:	9425883a 	add	r18,r18,r16
  80e528:	8c400044 	addi	r17,r17,1
  80e52c:	008001c4 	movi	r2,7
  80e530:	af000015 	stw	fp,0(r21)
  80e534:	ac000115 	stw	r16,4(r21)
  80e538:	dc800e15 	stw	r18,56(sp)
  80e53c:	dc400d15 	stw	r17,52(sp)
  80e540:	1441f516 	blt	r2,r17,80ed18 <___vfprintf_internal_r+0xc70>
  80e544:	ad400204 	addi	r21,r21,8
  80e548:	00000206 	br	80e554 <___vfprintf_internal_r+0x4ac>
  80e54c:	dc800e17 	ldw	r18,56(sp)
  80e550:	dc400d17 	ldw	r17,52(sp)
  80e554:	d8800407 	ldb	r2,16(sp)
  80e558:	10000b26 	beq	r2,zero,80e588 <___vfprintf_internal_r+0x4e0>
  80e55c:	00800044 	movi	r2,1
  80e560:	94800044 	addi	r18,r18,1
  80e564:	8c400044 	addi	r17,r17,1
  80e568:	a8800115 	stw	r2,4(r21)
  80e56c:	d8c00404 	addi	r3,sp,16
  80e570:	008001c4 	movi	r2,7
  80e574:	a8c00015 	stw	r3,0(r21)
  80e578:	dc800e15 	stw	r18,56(sp)
  80e57c:	dc400d15 	stw	r17,52(sp)
  80e580:	1441da16 	blt	r2,r17,80ecec <___vfprintf_internal_r+0xc44>
  80e584:	ad400204 	addi	r21,r21,8
  80e588:	d9015017 	ldw	r4,1344(sp)
  80e58c:	20000b1e 	bne	r4,zero,80e5bc <___vfprintf_internal_r+0x514>
  80e590:	d8800444 	addi	r2,sp,17
  80e594:	94800084 	addi	r18,r18,2
  80e598:	8c400044 	addi	r17,r17,1
  80e59c:	a8800015 	stw	r2,0(r21)
  80e5a0:	00c00084 	movi	r3,2
  80e5a4:	008001c4 	movi	r2,7
  80e5a8:	a8c00115 	stw	r3,4(r21)
  80e5ac:	dc800e15 	stw	r18,56(sp)
  80e5b0:	dc400d15 	stw	r17,52(sp)
  80e5b4:	1441c216 	blt	r2,r17,80ecc0 <___vfprintf_internal_r+0xc18>
  80e5b8:	ad400204 	addi	r21,r21,8
  80e5bc:	d9414e17 	ldw	r5,1336(sp)
  80e5c0:	00802004 	movi	r2,128
  80e5c4:	2880b126 	beq	r5,r2,80e88c <___vfprintf_internal_r+0x7e4>
  80e5c8:	d8c14617 	ldw	r3,1304(sp)
  80e5cc:	19e1c83a 	sub	r16,r3,r7
  80e5d0:	0400260e 	bge	zero,r16,80e66c <___vfprintf_internal_r+0x5c4>
  80e5d4:	00800404 	movi	r2,16
  80e5d8:	1403c90e 	bge	r2,r16,80f500 <___vfprintf_internal_r+0x1458>
  80e5dc:	1027883a 	mov	r19,r2
  80e5e0:	070020b4 	movhi	fp,130
  80e5e4:	e70c6a84 	addi	fp,fp,12714
  80e5e8:	050001c4 	movi	r20,7
  80e5ec:	00000306 	br	80e5fc <___vfprintf_internal_r+0x554>
  80e5f0:	843ffc04 	addi	r16,r16,-16
  80e5f4:	ad400204 	addi	r21,r21,8
  80e5f8:	9c00130e 	bge	r19,r16,80e648 <___vfprintf_internal_r+0x5a0>
  80e5fc:	94800404 	addi	r18,r18,16
  80e600:	8c400044 	addi	r17,r17,1
  80e604:	af000015 	stw	fp,0(r21)
  80e608:	acc00115 	stw	r19,4(r21)
  80e60c:	dc800e15 	stw	r18,56(sp)
  80e610:	dc400d15 	stw	r17,52(sp)
  80e614:	a47ff60e 	bge	r20,r17,80e5f0 <___vfprintf_internal_r+0x548>
  80e618:	d9014f17 	ldw	r4,1340(sp)
  80e61c:	b00b883a 	mov	r5,r22
  80e620:	d9800c04 	addi	r6,sp,48
  80e624:	d9c15115 	stw	r7,1348(sp)
  80e628:	080e0500 	call	80e050 <__sprint_r>
  80e62c:	d9c15117 	ldw	r7,1348(sp)
  80e630:	1000551e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80e634:	843ffc04 	addi	r16,r16,-16
  80e638:	dc800e17 	ldw	r18,56(sp)
  80e63c:	dc400d17 	ldw	r17,52(sp)
  80e640:	dd401904 	addi	r21,sp,100
  80e644:	9c3fed16 	blt	r19,r16,80e5fc <___vfprintf_internal_r+0x554>
  80e648:	9425883a 	add	r18,r18,r16
  80e64c:	8c400044 	addi	r17,r17,1
  80e650:	008001c4 	movi	r2,7
  80e654:	af000015 	stw	fp,0(r21)
  80e658:	ac000115 	stw	r16,4(r21)
  80e65c:	dc800e15 	stw	r18,56(sp)
  80e660:	dc400d15 	stw	r17,52(sp)
  80e664:	14418216 	blt	r2,r17,80ec70 <___vfprintf_internal_r+0xbc8>
  80e668:	ad400204 	addi	r21,r21,8
  80e66c:	d9014c17 	ldw	r4,1328(sp)
  80e670:	2080400c 	andi	r2,r4,256
  80e674:	10004a1e 	bne	r2,zero,80e7a0 <___vfprintf_internal_r+0x6f8>
  80e678:	d9414117 	ldw	r5,1284(sp)
  80e67c:	91e5883a 	add	r18,r18,r7
  80e680:	8c400044 	addi	r17,r17,1
  80e684:	008001c4 	movi	r2,7
  80e688:	a9400015 	stw	r5,0(r21)
  80e68c:	a9c00115 	stw	r7,4(r21)
  80e690:	dc800e15 	stw	r18,56(sp)
  80e694:	dc400d15 	stw	r17,52(sp)
  80e698:	14416716 	blt	r2,r17,80ec38 <___vfprintf_internal_r+0xb90>
  80e69c:	a8c00204 	addi	r3,r21,8
  80e6a0:	d9814c17 	ldw	r6,1328(sp)
  80e6a4:	3080010c 	andi	r2,r6,4
  80e6a8:	10002826 	beq	r2,zero,80e74c <___vfprintf_internal_r+0x6a4>
  80e6ac:	d8814a17 	ldw	r2,1320(sp)
  80e6b0:	d9014517 	ldw	r4,1300(sp)
  80e6b4:	1121c83a 	sub	r16,r2,r4
  80e6b8:	0400240e 	bge	zero,r16,80e74c <___vfprintf_internal_r+0x6a4>
  80e6bc:	00800404 	movi	r2,16
  80e6c0:	14044f0e 	bge	r2,r16,80f800 <___vfprintf_internal_r+0x1758>
  80e6c4:	dc400d17 	ldw	r17,52(sp)
  80e6c8:	1027883a 	mov	r19,r2
  80e6cc:	070020b4 	movhi	fp,130
  80e6d0:	e70c6e84 	addi	fp,fp,12730
  80e6d4:	050001c4 	movi	r20,7
  80e6d8:	00000306 	br	80e6e8 <___vfprintf_internal_r+0x640>
  80e6dc:	843ffc04 	addi	r16,r16,-16
  80e6e0:	18c00204 	addi	r3,r3,8
  80e6e4:	9c00110e 	bge	r19,r16,80e72c <___vfprintf_internal_r+0x684>
  80e6e8:	94800404 	addi	r18,r18,16
  80e6ec:	8c400044 	addi	r17,r17,1
  80e6f0:	1f000015 	stw	fp,0(r3)
  80e6f4:	1cc00115 	stw	r19,4(r3)
  80e6f8:	dc800e15 	stw	r18,56(sp)
  80e6fc:	dc400d15 	stw	r17,52(sp)
  80e700:	a47ff60e 	bge	r20,r17,80e6dc <___vfprintf_internal_r+0x634>
  80e704:	d9014f17 	ldw	r4,1340(sp)
  80e708:	b00b883a 	mov	r5,r22
  80e70c:	d9800c04 	addi	r6,sp,48
  80e710:	080e0500 	call	80e050 <__sprint_r>
  80e714:	10001c1e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80e718:	843ffc04 	addi	r16,r16,-16
  80e71c:	dc800e17 	ldw	r18,56(sp)
  80e720:	dc400d17 	ldw	r17,52(sp)
  80e724:	d8c01904 	addi	r3,sp,100
  80e728:	9c3fef16 	blt	r19,r16,80e6e8 <___vfprintf_internal_r+0x640>
  80e72c:	9425883a 	add	r18,r18,r16
  80e730:	8c400044 	addi	r17,r17,1
  80e734:	008001c4 	movi	r2,7
  80e738:	1f000015 	stw	fp,0(r3)
  80e73c:	1c000115 	stw	r16,4(r3)
  80e740:	dc800e15 	stw	r18,56(sp)
  80e744:	dc400d15 	stw	r17,52(sp)
  80e748:	1440cb16 	blt	r2,r17,80ea78 <___vfprintf_internal_r+0x9d0>
  80e74c:	d8814a17 	ldw	r2,1320(sp)
  80e750:	d9414517 	ldw	r5,1300(sp)
  80e754:	1140010e 	bge	r2,r5,80e75c <___vfprintf_internal_r+0x6b4>
  80e758:	2805883a 	mov	r2,r5
  80e75c:	d9814b17 	ldw	r6,1324(sp)
  80e760:	308d883a 	add	r6,r6,r2
  80e764:	d9814b15 	stw	r6,1324(sp)
  80e768:	90013b1e 	bne	r18,zero,80ec58 <___vfprintf_internal_r+0xbb0>
  80e76c:	d9c14017 	ldw	r7,1280(sp)
  80e770:	dd401904 	addi	r21,sp,100
  80e774:	d8000d15 	stw	zero,52(sp)
  80e778:	003ea706 	br	80e218 <___vfprintf_internal_r+0x170>
  80e77c:	d8800e17 	ldw	r2,56(sp)
  80e780:	10053f1e 	bne	r2,zero,80fc80 <___vfprintf_internal_r+0x1bd8>
  80e784:	d8000d15 	stw	zero,52(sp)
  80e788:	b080030b 	ldhu	r2,12(r22)
  80e78c:	1080100c 	andi	r2,r2,64
  80e790:	103e8726 	beq	r2,zero,80e1b0 <___vfprintf_internal_r+0x108>
  80e794:	00bfffc4 	movi	r2,-1
  80e798:	d8814b15 	stw	r2,1324(sp)
  80e79c:	003e8406 	br	80e1b0 <___vfprintf_internal_r+0x108>
  80e7a0:	d9814d17 	ldw	r6,1332(sp)
  80e7a4:	00801944 	movi	r2,101
  80e7a8:	11806e16 	blt	r2,r6,80e964 <___vfprintf_internal_r+0x8bc>
  80e7ac:	d9414717 	ldw	r5,1308(sp)
  80e7b0:	00c00044 	movi	r3,1
  80e7b4:	1943430e 	bge	r3,r5,80f4c4 <___vfprintf_internal_r+0x141c>
  80e7b8:	d8814117 	ldw	r2,1284(sp)
  80e7bc:	94800044 	addi	r18,r18,1
  80e7c0:	8c400044 	addi	r17,r17,1
  80e7c4:	a8800015 	stw	r2,0(r21)
  80e7c8:	008001c4 	movi	r2,7
  80e7cc:	a8c00115 	stw	r3,4(r21)
  80e7d0:	dc800e15 	stw	r18,56(sp)
  80e7d4:	dc400d15 	stw	r17,52(sp)
  80e7d8:	1441ca16 	blt	r2,r17,80ef04 <___vfprintf_internal_r+0xe5c>
  80e7dc:	a8c00204 	addi	r3,r21,8
  80e7e0:	d9014917 	ldw	r4,1316(sp)
  80e7e4:	00800044 	movi	r2,1
  80e7e8:	94800044 	addi	r18,r18,1
  80e7ec:	8c400044 	addi	r17,r17,1
  80e7f0:	18800115 	stw	r2,4(r3)
  80e7f4:	008001c4 	movi	r2,7
  80e7f8:	19000015 	stw	r4,0(r3)
  80e7fc:	dc800e15 	stw	r18,56(sp)
  80e800:	dc400d15 	stw	r17,52(sp)
  80e804:	1441b616 	blt	r2,r17,80eee0 <___vfprintf_internal_r+0xe38>
  80e808:	1cc00204 	addi	r19,r3,8
  80e80c:	d9014217 	ldw	r4,1288(sp)
  80e810:	d9414317 	ldw	r5,1292(sp)
  80e814:	000d883a 	mov	r6,zero
  80e818:	000f883a 	mov	r7,zero
  80e81c:	08158380 	call	815838 <__nedf2>
  80e820:	10017426 	beq	r2,zero,80edf4 <___vfprintf_internal_r+0xd4c>
  80e824:	d9414717 	ldw	r5,1308(sp)
  80e828:	d9814117 	ldw	r6,1284(sp)
  80e82c:	8c400044 	addi	r17,r17,1
  80e830:	2c85883a 	add	r2,r5,r18
  80e834:	14bfffc4 	addi	r18,r2,-1
  80e838:	28bfffc4 	addi	r2,r5,-1
  80e83c:	30c00044 	addi	r3,r6,1
  80e840:	98800115 	stw	r2,4(r19)
  80e844:	008001c4 	movi	r2,7
  80e848:	98c00015 	stw	r3,0(r19)
  80e84c:	dc800e15 	stw	r18,56(sp)
  80e850:	dc400d15 	stw	r17,52(sp)
  80e854:	14418e16 	blt	r2,r17,80ee90 <___vfprintf_internal_r+0xde8>
  80e858:	9cc00204 	addi	r19,r19,8
  80e85c:	d9414817 	ldw	r5,1312(sp)
  80e860:	d8800804 	addi	r2,sp,32
  80e864:	8c400044 	addi	r17,r17,1
  80e868:	9165883a 	add	r18,r18,r5
  80e86c:	98800015 	stw	r2,0(r19)
  80e870:	008001c4 	movi	r2,7
  80e874:	99400115 	stw	r5,4(r19)
  80e878:	dc800e15 	stw	r18,56(sp)
  80e87c:	dc400d15 	stw	r17,52(sp)
  80e880:	1440ed16 	blt	r2,r17,80ec38 <___vfprintf_internal_r+0xb90>
  80e884:	98c00204 	addi	r3,r19,8
  80e888:	003f8506 	br	80e6a0 <___vfprintf_internal_r+0x5f8>
  80e88c:	d9814a17 	ldw	r6,1320(sp)
  80e890:	d8814517 	ldw	r2,1300(sp)
  80e894:	30a1c83a 	sub	r16,r6,r2
  80e898:	043f4b0e 	bge	zero,r16,80e5c8 <___vfprintf_internal_r+0x520>
  80e89c:	00800404 	movi	r2,16
  80e8a0:	1404340e 	bge	r2,r16,80f974 <___vfprintf_internal_r+0x18cc>
  80e8a4:	1027883a 	mov	r19,r2
  80e8a8:	070020b4 	movhi	fp,130
  80e8ac:	e70c6a84 	addi	fp,fp,12714
  80e8b0:	050001c4 	movi	r20,7
  80e8b4:	00000306 	br	80e8c4 <___vfprintf_internal_r+0x81c>
  80e8b8:	843ffc04 	addi	r16,r16,-16
  80e8bc:	ad400204 	addi	r21,r21,8
  80e8c0:	9c00130e 	bge	r19,r16,80e910 <___vfprintf_internal_r+0x868>
  80e8c4:	94800404 	addi	r18,r18,16
  80e8c8:	8c400044 	addi	r17,r17,1
  80e8cc:	af000015 	stw	fp,0(r21)
  80e8d0:	acc00115 	stw	r19,4(r21)
  80e8d4:	dc800e15 	stw	r18,56(sp)
  80e8d8:	dc400d15 	stw	r17,52(sp)
  80e8dc:	a47ff60e 	bge	r20,r17,80e8b8 <___vfprintf_internal_r+0x810>
  80e8e0:	d9014f17 	ldw	r4,1340(sp)
  80e8e4:	b00b883a 	mov	r5,r22
  80e8e8:	d9800c04 	addi	r6,sp,48
  80e8ec:	d9c15115 	stw	r7,1348(sp)
  80e8f0:	080e0500 	call	80e050 <__sprint_r>
  80e8f4:	d9c15117 	ldw	r7,1348(sp)
  80e8f8:	103fa31e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80e8fc:	843ffc04 	addi	r16,r16,-16
  80e900:	dc800e17 	ldw	r18,56(sp)
  80e904:	dc400d17 	ldw	r17,52(sp)
  80e908:	dd401904 	addi	r21,sp,100
  80e90c:	9c3fed16 	blt	r19,r16,80e8c4 <___vfprintf_internal_r+0x81c>
  80e910:	9425883a 	add	r18,r18,r16
  80e914:	8c400044 	addi	r17,r17,1
  80e918:	008001c4 	movi	r2,7
  80e91c:	af000015 	stw	fp,0(r21)
  80e920:	ac000115 	stw	r16,4(r21)
  80e924:	dc800e15 	stw	r18,56(sp)
  80e928:	dc400d15 	stw	r17,52(sp)
  80e92c:	14416116 	blt	r2,r17,80eeb4 <___vfprintf_internal_r+0xe0c>
  80e930:	ad400204 	addi	r21,r21,8
  80e934:	003f2406 	br	80e5c8 <___vfprintf_internal_r+0x520>
  80e938:	d9014f17 	ldw	r4,1340(sp)
  80e93c:	0811b180 	call	811b18 <__sinit>
  80e940:	d9c15117 	ldw	r7,1348(sp)
  80e944:	003def06 	br	80e104 <___vfprintf_internal_r+0x5c>
  80e948:	d9014f17 	ldw	r4,1340(sp)
  80e94c:	b00b883a 	mov	r5,r22
  80e950:	d9c15115 	stw	r7,1348(sp)
  80e954:	080ff780 	call	80ff78 <__swsetup_r>
  80e958:	d9c15117 	ldw	r7,1348(sp)
  80e95c:	103dee26 	beq	r2,zero,80e118 <___vfprintf_internal_r+0x70>
  80e960:	003f8c06 	br	80e794 <___vfprintf_internal_r+0x6ec>
  80e964:	d9014217 	ldw	r4,1288(sp)
  80e968:	d9414317 	ldw	r5,1292(sp)
  80e96c:	000d883a 	mov	r6,zero
  80e970:	000f883a 	mov	r7,zero
  80e974:	080cb340 	call	80cb34 <__eqdf2>
  80e978:	1000f21e 	bne	r2,zero,80ed44 <___vfprintf_internal_r+0xc9c>
  80e97c:	008020b4 	movhi	r2,130
  80e980:	108c6a04 	addi	r2,r2,12712
  80e984:	94800044 	addi	r18,r18,1
  80e988:	8c400044 	addi	r17,r17,1
  80e98c:	a8800015 	stw	r2,0(r21)
  80e990:	00c00044 	movi	r3,1
  80e994:	008001c4 	movi	r2,7
  80e998:	a8c00115 	stw	r3,4(r21)
  80e99c:	dc800e15 	stw	r18,56(sp)
  80e9a0:	dc400d15 	stw	r17,52(sp)
  80e9a4:	1442fa16 	blt	r2,r17,80f590 <___vfprintf_internal_r+0x14e8>
  80e9a8:	a8c00204 	addi	r3,r21,8
  80e9ac:	d8800517 	ldw	r2,20(sp)
  80e9b0:	d9014717 	ldw	r4,1308(sp)
  80e9b4:	11015c0e 	bge	r2,r4,80ef28 <___vfprintf_internal_r+0xe80>
  80e9b8:	dc400d17 	ldw	r17,52(sp)
  80e9bc:	d9814917 	ldw	r6,1316(sp)
  80e9c0:	00800044 	movi	r2,1
  80e9c4:	94800044 	addi	r18,r18,1
  80e9c8:	8c400044 	addi	r17,r17,1
  80e9cc:	18800115 	stw	r2,4(r3)
  80e9d0:	008001c4 	movi	r2,7
  80e9d4:	19800015 	stw	r6,0(r3)
  80e9d8:	dc800e15 	stw	r18,56(sp)
  80e9dc:	dc400d15 	stw	r17,52(sp)
  80e9e0:	14431016 	blt	r2,r17,80f624 <___vfprintf_internal_r+0x157c>
  80e9e4:	18c00204 	addi	r3,r3,8
  80e9e8:	d8814717 	ldw	r2,1308(sp)
  80e9ec:	143fffc4 	addi	r16,r2,-1
  80e9f0:	043f2b0e 	bge	zero,r16,80e6a0 <___vfprintf_internal_r+0x5f8>
  80e9f4:	00800404 	movi	r2,16
  80e9f8:	1402a20e 	bge	r2,r16,80f484 <___vfprintf_internal_r+0x13dc>
  80e9fc:	dc400d17 	ldw	r17,52(sp)
  80ea00:	1027883a 	mov	r19,r2
  80ea04:	070020b4 	movhi	fp,130
  80ea08:	e70c6a84 	addi	fp,fp,12714
  80ea0c:	050001c4 	movi	r20,7
  80ea10:	00000306 	br	80ea20 <___vfprintf_internal_r+0x978>
  80ea14:	18c00204 	addi	r3,r3,8
  80ea18:	843ffc04 	addi	r16,r16,-16
  80ea1c:	9c029c0e 	bge	r19,r16,80f490 <___vfprintf_internal_r+0x13e8>
  80ea20:	94800404 	addi	r18,r18,16
  80ea24:	8c400044 	addi	r17,r17,1
  80ea28:	1f000015 	stw	fp,0(r3)
  80ea2c:	1cc00115 	stw	r19,4(r3)
  80ea30:	dc800e15 	stw	r18,56(sp)
  80ea34:	dc400d15 	stw	r17,52(sp)
  80ea38:	a47ff60e 	bge	r20,r17,80ea14 <___vfprintf_internal_r+0x96c>
  80ea3c:	d9014f17 	ldw	r4,1340(sp)
  80ea40:	b00b883a 	mov	r5,r22
  80ea44:	d9800c04 	addi	r6,sp,48
  80ea48:	080e0500 	call	80e050 <__sprint_r>
  80ea4c:	103f4e1e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80ea50:	dc800e17 	ldw	r18,56(sp)
  80ea54:	dc400d17 	ldw	r17,52(sp)
  80ea58:	d8c01904 	addi	r3,sp,100
  80ea5c:	003fee06 	br	80ea18 <___vfprintf_internal_r+0x970>
  80ea60:	d8802c0b 	ldhu	r2,176(sp)
  80ea64:	00ffffc4 	movi	r3,-1
  80ea68:	d8c14b15 	stw	r3,1324(sp)
  80ea6c:	1080100c 	andi	r2,r2,64
  80ea70:	103dcc1e 	bne	r2,zero,80e1a4 <___vfprintf_internal_r+0xfc>
  80ea74:	003dce06 	br	80e1b0 <___vfprintf_internal_r+0x108>
  80ea78:	d9014f17 	ldw	r4,1340(sp)
  80ea7c:	b00b883a 	mov	r5,r22
  80ea80:	d9800c04 	addi	r6,sp,48
  80ea84:	080e0500 	call	80e050 <__sprint_r>
  80ea88:	103f3f1e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80ea8c:	dc800e17 	ldw	r18,56(sp)
  80ea90:	003f2e06 	br	80e74c <___vfprintf_internal_r+0x6a4>
  80ea94:	d9414c17 	ldw	r5,1328(sp)
  80ea98:	29400414 	ori	r5,r5,16
  80ea9c:	d9414c15 	stw	r5,1328(sp)
  80eaa0:	d9814c17 	ldw	r6,1328(sp)
  80eaa4:	3080080c 	andi	r2,r6,32
  80eaa8:	10014f1e 	bne	r2,zero,80efe8 <___vfprintf_internal_r+0xf40>
  80eaac:	d8c14c17 	ldw	r3,1328(sp)
  80eab0:	1880040c 	andi	r2,r3,16
  80eab4:	1002ea1e 	bne	r2,zero,80f660 <___vfprintf_internal_r+0x15b8>
  80eab8:	d9014c17 	ldw	r4,1328(sp)
  80eabc:	2080100c 	andi	r2,r4,64
  80eac0:	1002e726 	beq	r2,zero,80f660 <___vfprintf_internal_r+0x15b8>
  80eac4:	3880000f 	ldh	r2,0(r7)
  80eac8:	39c00104 	addi	r7,r7,4
  80eacc:	d9c14015 	stw	r7,1280(sp)
  80ead0:	1023d7fa 	srai	r17,r2,31
  80ead4:	1021883a 	mov	r16,r2
  80ead8:	88037216 	blt	r17,zero,80f8a4 <___vfprintf_internal_r+0x17fc>
  80eadc:	01000044 	movi	r4,1
  80eae0:	98000416 	blt	r19,zero,80eaf4 <___vfprintf_internal_r+0xa4c>
  80eae4:	d8c14c17 	ldw	r3,1328(sp)
  80eae8:	00bfdfc4 	movi	r2,-129
  80eaec:	1886703a 	and	r3,r3,r2
  80eaf0:	d8c14c15 	stw	r3,1328(sp)
  80eaf4:	8444b03a 	or	r2,r16,r17
  80eaf8:	1002261e 	bne	r2,zero,80f394 <___vfprintf_internal_r+0x12ec>
  80eafc:	9802251e 	bne	r19,zero,80f394 <___vfprintf_internal_r+0x12ec>
  80eb00:	20803fcc 	andi	r2,r4,255
  80eb04:	10029b26 	beq	r2,zero,80f574 <___vfprintf_internal_r+0x14cc>
  80eb08:	d8c01904 	addi	r3,sp,100
  80eb0c:	dd000f04 	addi	r20,sp,60
  80eb10:	d8c14115 	stw	r3,1284(sp)
  80eb14:	d8c14117 	ldw	r3,1284(sp)
  80eb18:	dcc14515 	stw	r19,1300(sp)
  80eb1c:	a0c5c83a 	sub	r2,r20,r3
  80eb20:	11c00a04 	addi	r7,r2,40
  80eb24:	99c0010e 	bge	r19,r7,80eb2c <___vfprintf_internal_r+0xa84>
  80eb28:	d9c14515 	stw	r7,1300(sp)
  80eb2c:	dcc14615 	stw	r19,1304(sp)
  80eb30:	d8800407 	ldb	r2,16(sp)
  80eb34:	103e4c26 	beq	r2,zero,80e468 <___vfprintf_internal_r+0x3c0>
  80eb38:	d8814517 	ldw	r2,1300(sp)
  80eb3c:	10800044 	addi	r2,r2,1
  80eb40:	d8814515 	stw	r2,1300(sp)
  80eb44:	003e4806 	br	80e468 <___vfprintf_internal_r+0x3c0>
  80eb48:	d9814c17 	ldw	r6,1328(sp)
  80eb4c:	31800414 	ori	r6,r6,16
  80eb50:	d9814c15 	stw	r6,1328(sp)
  80eb54:	d8c14c17 	ldw	r3,1328(sp)
  80eb58:	1880080c 	andi	r2,r3,32
  80eb5c:	1001271e 	bne	r2,zero,80effc <___vfprintf_internal_r+0xf54>
  80eb60:	d9414c17 	ldw	r5,1328(sp)
  80eb64:	2880040c 	andi	r2,r5,16
  80eb68:	1002b61e 	bne	r2,zero,80f644 <___vfprintf_internal_r+0x159c>
  80eb6c:	d9814c17 	ldw	r6,1328(sp)
  80eb70:	3080100c 	andi	r2,r6,64
  80eb74:	1002b326 	beq	r2,zero,80f644 <___vfprintf_internal_r+0x159c>
  80eb78:	3c00000b 	ldhu	r16,0(r7)
  80eb7c:	0009883a 	mov	r4,zero
  80eb80:	39c00104 	addi	r7,r7,4
  80eb84:	0023883a 	mov	r17,zero
  80eb88:	d9c14015 	stw	r7,1280(sp)
  80eb8c:	d8000405 	stb	zero,16(sp)
  80eb90:	003fd306 	br	80eae0 <___vfprintf_internal_r+0xa38>
  80eb94:	d9014c17 	ldw	r4,1328(sp)
  80eb98:	21000414 	ori	r4,r4,16
  80eb9c:	d9014c15 	stw	r4,1328(sp)
  80eba0:	d9414c17 	ldw	r5,1328(sp)
  80eba4:	2880080c 	andi	r2,r5,32
  80eba8:	1001081e 	bne	r2,zero,80efcc <___vfprintf_internal_r+0xf24>
  80ebac:	d8c14c17 	ldw	r3,1328(sp)
  80ebb0:	1880040c 	andi	r2,r3,16
  80ebb4:	1002b01e 	bne	r2,zero,80f678 <___vfprintf_internal_r+0x15d0>
  80ebb8:	d9014c17 	ldw	r4,1328(sp)
  80ebbc:	2080100c 	andi	r2,r4,64
  80ebc0:	1002ad26 	beq	r2,zero,80f678 <___vfprintf_internal_r+0x15d0>
  80ebc4:	3c00000b 	ldhu	r16,0(r7)
  80ebc8:	01000044 	movi	r4,1
  80ebcc:	39c00104 	addi	r7,r7,4
  80ebd0:	0023883a 	mov	r17,zero
  80ebd4:	d9c14015 	stw	r7,1280(sp)
  80ebd8:	d8000405 	stb	zero,16(sp)
  80ebdc:	003fc006 	br	80eae0 <___vfprintf_internal_r+0xa38>
  80ebe0:	d9014f17 	ldw	r4,1340(sp)
  80ebe4:	b00b883a 	mov	r5,r22
  80ebe8:	d9800c04 	addi	r6,sp,48
  80ebec:	080e0500 	call	80e050 <__sprint_r>
  80ebf0:	103ee51e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80ebf4:	dc800e17 	ldw	r18,56(sp)
  80ebf8:	d8c01904 	addi	r3,sp,100
  80ebfc:	d9814c17 	ldw	r6,1328(sp)
  80ec00:	3080004c 	andi	r2,r6,1
  80ec04:	1005003a 	cmpeq	r2,r2,zero
  80ec08:	103ea51e 	bne	r2,zero,80e6a0 <___vfprintf_internal_r+0x5f8>
  80ec0c:	00800044 	movi	r2,1
  80ec10:	dc400d17 	ldw	r17,52(sp)
  80ec14:	18800115 	stw	r2,4(r3)
  80ec18:	d8814917 	ldw	r2,1316(sp)
  80ec1c:	94800044 	addi	r18,r18,1
  80ec20:	8c400044 	addi	r17,r17,1
  80ec24:	18800015 	stw	r2,0(r3)
  80ec28:	008001c4 	movi	r2,7
  80ec2c:	dc800e15 	stw	r18,56(sp)
  80ec30:	dc400d15 	stw	r17,52(sp)
  80ec34:	14421e0e 	bge	r2,r17,80f4b0 <___vfprintf_internal_r+0x1408>
  80ec38:	d9014f17 	ldw	r4,1340(sp)
  80ec3c:	b00b883a 	mov	r5,r22
  80ec40:	d9800c04 	addi	r6,sp,48
  80ec44:	080e0500 	call	80e050 <__sprint_r>
  80ec48:	103ecf1e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80ec4c:	dc800e17 	ldw	r18,56(sp)
  80ec50:	d8c01904 	addi	r3,sp,100
  80ec54:	003e9206 	br	80e6a0 <___vfprintf_internal_r+0x5f8>
  80ec58:	d9014f17 	ldw	r4,1340(sp)
  80ec5c:	b00b883a 	mov	r5,r22
  80ec60:	d9800c04 	addi	r6,sp,48
  80ec64:	080e0500 	call	80e050 <__sprint_r>
  80ec68:	103ec026 	beq	r2,zero,80e76c <___vfprintf_internal_r+0x6c4>
  80ec6c:	003ec606 	br	80e788 <___vfprintf_internal_r+0x6e0>
  80ec70:	d9014f17 	ldw	r4,1340(sp)
  80ec74:	b00b883a 	mov	r5,r22
  80ec78:	d9800c04 	addi	r6,sp,48
  80ec7c:	d9c15115 	stw	r7,1348(sp)
  80ec80:	080e0500 	call	80e050 <__sprint_r>
  80ec84:	d9c15117 	ldw	r7,1348(sp)
  80ec88:	103ebf1e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80ec8c:	dc800e17 	ldw	r18,56(sp)
  80ec90:	dc400d17 	ldw	r17,52(sp)
  80ec94:	dd401904 	addi	r21,sp,100
  80ec98:	003e7406 	br	80e66c <___vfprintf_internal_r+0x5c4>
  80ec9c:	d9014f17 	ldw	r4,1340(sp)
  80eca0:	b00b883a 	mov	r5,r22
  80eca4:	d9800c04 	addi	r6,sp,48
  80eca8:	d9c15115 	stw	r7,1348(sp)
  80ecac:	080e0500 	call	80e050 <__sprint_r>
  80ecb0:	d9c15117 	ldw	r7,1348(sp)
  80ecb4:	103eb41e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80ecb8:	dd401904 	addi	r21,sp,100
  80ecbc:	003d6d06 	br	80e274 <___vfprintf_internal_r+0x1cc>
  80ecc0:	d9014f17 	ldw	r4,1340(sp)
  80ecc4:	b00b883a 	mov	r5,r22
  80ecc8:	d9800c04 	addi	r6,sp,48
  80eccc:	d9c15115 	stw	r7,1348(sp)
  80ecd0:	080e0500 	call	80e050 <__sprint_r>
  80ecd4:	d9c15117 	ldw	r7,1348(sp)
  80ecd8:	103eab1e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80ecdc:	dc800e17 	ldw	r18,56(sp)
  80ece0:	dc400d17 	ldw	r17,52(sp)
  80ece4:	dd401904 	addi	r21,sp,100
  80ece8:	003e3406 	br	80e5bc <___vfprintf_internal_r+0x514>
  80ecec:	d9014f17 	ldw	r4,1340(sp)
  80ecf0:	b00b883a 	mov	r5,r22
  80ecf4:	d9800c04 	addi	r6,sp,48
  80ecf8:	d9c15115 	stw	r7,1348(sp)
  80ecfc:	080e0500 	call	80e050 <__sprint_r>
  80ed00:	d9c15117 	ldw	r7,1348(sp)
  80ed04:	103ea01e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80ed08:	dc800e17 	ldw	r18,56(sp)
  80ed0c:	dc400d17 	ldw	r17,52(sp)
  80ed10:	dd401904 	addi	r21,sp,100
  80ed14:	003e1c06 	br	80e588 <___vfprintf_internal_r+0x4e0>
  80ed18:	d9014f17 	ldw	r4,1340(sp)
  80ed1c:	b00b883a 	mov	r5,r22
  80ed20:	d9800c04 	addi	r6,sp,48
  80ed24:	d9c15115 	stw	r7,1348(sp)
  80ed28:	080e0500 	call	80e050 <__sprint_r>
  80ed2c:	d9c15117 	ldw	r7,1348(sp)
  80ed30:	103e951e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80ed34:	dc800e17 	ldw	r18,56(sp)
  80ed38:	dc400d17 	ldw	r17,52(sp)
  80ed3c:	dd401904 	addi	r21,sp,100
  80ed40:	003e0406 	br	80e554 <___vfprintf_internal_r+0x4ac>
  80ed44:	d9000517 	ldw	r4,20(sp)
  80ed48:	0102520e 	bge	zero,r4,80f694 <___vfprintf_internal_r+0x15ec>
  80ed4c:	d9814717 	ldw	r6,1308(sp)
  80ed50:	21807a16 	blt	r4,r6,80ef3c <___vfprintf_internal_r+0xe94>
  80ed54:	d8814117 	ldw	r2,1284(sp)
  80ed58:	91a5883a 	add	r18,r18,r6
  80ed5c:	8c400044 	addi	r17,r17,1
  80ed60:	a8800015 	stw	r2,0(r21)
  80ed64:	008001c4 	movi	r2,7
  80ed68:	a9800115 	stw	r6,4(r21)
  80ed6c:	dc800e15 	stw	r18,56(sp)
  80ed70:	dc400d15 	stw	r17,52(sp)
  80ed74:	1442f616 	blt	r2,r17,80f950 <___vfprintf_internal_r+0x18a8>
  80ed78:	a8c00204 	addi	r3,r21,8
  80ed7c:	d9414717 	ldw	r5,1308(sp)
  80ed80:	2161c83a 	sub	r16,r4,r5
  80ed84:	043f9d0e 	bge	zero,r16,80ebfc <___vfprintf_internal_r+0xb54>
  80ed88:	00800404 	movi	r2,16
  80ed8c:	1402130e 	bge	r2,r16,80f5dc <___vfprintf_internal_r+0x1534>
  80ed90:	dc400d17 	ldw	r17,52(sp)
  80ed94:	1027883a 	mov	r19,r2
  80ed98:	070020b4 	movhi	fp,130
  80ed9c:	e70c6a84 	addi	fp,fp,12714
  80eda0:	050001c4 	movi	r20,7
  80eda4:	00000306 	br	80edb4 <___vfprintf_internal_r+0xd0c>
  80eda8:	18c00204 	addi	r3,r3,8
  80edac:	843ffc04 	addi	r16,r16,-16
  80edb0:	9c020d0e 	bge	r19,r16,80f5e8 <___vfprintf_internal_r+0x1540>
  80edb4:	94800404 	addi	r18,r18,16
  80edb8:	8c400044 	addi	r17,r17,1
  80edbc:	1f000015 	stw	fp,0(r3)
  80edc0:	1cc00115 	stw	r19,4(r3)
  80edc4:	dc800e15 	stw	r18,56(sp)
  80edc8:	dc400d15 	stw	r17,52(sp)
  80edcc:	a47ff60e 	bge	r20,r17,80eda8 <___vfprintf_internal_r+0xd00>
  80edd0:	d9014f17 	ldw	r4,1340(sp)
  80edd4:	b00b883a 	mov	r5,r22
  80edd8:	d9800c04 	addi	r6,sp,48
  80eddc:	080e0500 	call	80e050 <__sprint_r>
  80ede0:	103e691e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80ede4:	dc800e17 	ldw	r18,56(sp)
  80ede8:	dc400d17 	ldw	r17,52(sp)
  80edec:	d8c01904 	addi	r3,sp,100
  80edf0:	003fee06 	br	80edac <___vfprintf_internal_r+0xd04>
  80edf4:	d8814717 	ldw	r2,1308(sp)
  80edf8:	143fffc4 	addi	r16,r2,-1
  80edfc:	043e970e 	bge	zero,r16,80e85c <___vfprintf_internal_r+0x7b4>
  80ee00:	00800404 	movi	r2,16
  80ee04:	1400180e 	bge	r2,r16,80ee68 <___vfprintf_internal_r+0xdc0>
  80ee08:	1029883a 	mov	r20,r2
  80ee0c:	070020b4 	movhi	fp,130
  80ee10:	e70c6a84 	addi	fp,fp,12714
  80ee14:	054001c4 	movi	r21,7
  80ee18:	00000306 	br	80ee28 <___vfprintf_internal_r+0xd80>
  80ee1c:	9cc00204 	addi	r19,r19,8
  80ee20:	843ffc04 	addi	r16,r16,-16
  80ee24:	a400120e 	bge	r20,r16,80ee70 <___vfprintf_internal_r+0xdc8>
  80ee28:	94800404 	addi	r18,r18,16
  80ee2c:	8c400044 	addi	r17,r17,1
  80ee30:	9f000015 	stw	fp,0(r19)
  80ee34:	9d000115 	stw	r20,4(r19)
  80ee38:	dc800e15 	stw	r18,56(sp)
  80ee3c:	dc400d15 	stw	r17,52(sp)
  80ee40:	ac7ff60e 	bge	r21,r17,80ee1c <___vfprintf_internal_r+0xd74>
  80ee44:	d9014f17 	ldw	r4,1340(sp)
  80ee48:	b00b883a 	mov	r5,r22
  80ee4c:	d9800c04 	addi	r6,sp,48
  80ee50:	080e0500 	call	80e050 <__sprint_r>
  80ee54:	103e4c1e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80ee58:	dc800e17 	ldw	r18,56(sp)
  80ee5c:	dc400d17 	ldw	r17,52(sp)
  80ee60:	dcc01904 	addi	r19,sp,100
  80ee64:	003fee06 	br	80ee20 <___vfprintf_internal_r+0xd78>
  80ee68:	070020b4 	movhi	fp,130
  80ee6c:	e70c6a84 	addi	fp,fp,12714
  80ee70:	9425883a 	add	r18,r18,r16
  80ee74:	8c400044 	addi	r17,r17,1
  80ee78:	008001c4 	movi	r2,7
  80ee7c:	9f000015 	stw	fp,0(r19)
  80ee80:	9c000115 	stw	r16,4(r19)
  80ee84:	dc800e15 	stw	r18,56(sp)
  80ee88:	dc400d15 	stw	r17,52(sp)
  80ee8c:	147e720e 	bge	r2,r17,80e858 <___vfprintf_internal_r+0x7b0>
  80ee90:	d9014f17 	ldw	r4,1340(sp)
  80ee94:	b00b883a 	mov	r5,r22
  80ee98:	d9800c04 	addi	r6,sp,48
  80ee9c:	080e0500 	call	80e050 <__sprint_r>
  80eea0:	103e391e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80eea4:	dc800e17 	ldw	r18,56(sp)
  80eea8:	dc400d17 	ldw	r17,52(sp)
  80eeac:	dcc01904 	addi	r19,sp,100
  80eeb0:	003e6a06 	br	80e85c <___vfprintf_internal_r+0x7b4>
  80eeb4:	d9014f17 	ldw	r4,1340(sp)
  80eeb8:	b00b883a 	mov	r5,r22
  80eebc:	d9800c04 	addi	r6,sp,48
  80eec0:	d9c15115 	stw	r7,1348(sp)
  80eec4:	080e0500 	call	80e050 <__sprint_r>
  80eec8:	d9c15117 	ldw	r7,1348(sp)
  80eecc:	103e2e1e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80eed0:	dc800e17 	ldw	r18,56(sp)
  80eed4:	dc400d17 	ldw	r17,52(sp)
  80eed8:	dd401904 	addi	r21,sp,100
  80eedc:	003dba06 	br	80e5c8 <___vfprintf_internal_r+0x520>
  80eee0:	d9014f17 	ldw	r4,1340(sp)
  80eee4:	b00b883a 	mov	r5,r22
  80eee8:	d9800c04 	addi	r6,sp,48
  80eeec:	080e0500 	call	80e050 <__sprint_r>
  80eef0:	103e251e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80eef4:	dc800e17 	ldw	r18,56(sp)
  80eef8:	dc400d17 	ldw	r17,52(sp)
  80eefc:	dcc01904 	addi	r19,sp,100
  80ef00:	003e4206 	br	80e80c <___vfprintf_internal_r+0x764>
  80ef04:	d9014f17 	ldw	r4,1340(sp)
  80ef08:	b00b883a 	mov	r5,r22
  80ef0c:	d9800c04 	addi	r6,sp,48
  80ef10:	080e0500 	call	80e050 <__sprint_r>
  80ef14:	103e1c1e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80ef18:	dc800e17 	ldw	r18,56(sp)
  80ef1c:	dc400d17 	ldw	r17,52(sp)
  80ef20:	d8c01904 	addi	r3,sp,100
  80ef24:	003e2e06 	br	80e7e0 <___vfprintf_internal_r+0x738>
  80ef28:	d9414c17 	ldw	r5,1328(sp)
  80ef2c:	2880004c 	andi	r2,r5,1
  80ef30:	1005003a 	cmpeq	r2,r2,zero
  80ef34:	103dda1e 	bne	r2,zero,80e6a0 <___vfprintf_internal_r+0x5f8>
  80ef38:	003e9f06 	br	80e9b8 <___vfprintf_internal_r+0x910>
  80ef3c:	d8c14117 	ldw	r3,1284(sp)
  80ef40:	9125883a 	add	r18,r18,r4
  80ef44:	8c400044 	addi	r17,r17,1
  80ef48:	008001c4 	movi	r2,7
  80ef4c:	a8c00015 	stw	r3,0(r21)
  80ef50:	a9000115 	stw	r4,4(r21)
  80ef54:	dc800e15 	stw	r18,56(sp)
  80ef58:	dc400d15 	stw	r17,52(sp)
  80ef5c:	14426616 	blt	r2,r17,80f8f8 <___vfprintf_internal_r+0x1850>
  80ef60:	a8c00204 	addi	r3,r21,8
  80ef64:	d9414917 	ldw	r5,1316(sp)
  80ef68:	00800044 	movi	r2,1
  80ef6c:	94800044 	addi	r18,r18,1
  80ef70:	8c400044 	addi	r17,r17,1
  80ef74:	18800115 	stw	r2,4(r3)
  80ef78:	008001c4 	movi	r2,7
  80ef7c:	19400015 	stw	r5,0(r3)
  80ef80:	dc800e15 	stw	r18,56(sp)
  80ef84:	dc400d15 	stw	r17,52(sp)
  80ef88:	2021883a 	mov	r16,r4
  80ef8c:	14425016 	blt	r2,r17,80f8d0 <___vfprintf_internal_r+0x1828>
  80ef90:	19400204 	addi	r5,r3,8
  80ef94:	d9814717 	ldw	r6,1308(sp)
  80ef98:	8c400044 	addi	r17,r17,1
  80ef9c:	dc400d15 	stw	r17,52(sp)
  80efa0:	3107c83a 	sub	r3,r6,r4
  80efa4:	d9014117 	ldw	r4,1284(sp)
  80efa8:	90e5883a 	add	r18,r18,r3
  80efac:	28c00115 	stw	r3,4(r5)
  80efb0:	8105883a 	add	r2,r16,r4
  80efb4:	28800015 	stw	r2,0(r5)
  80efb8:	008001c4 	movi	r2,7
  80efbc:	dc800e15 	stw	r18,56(sp)
  80efc0:	147f1d16 	blt	r2,r17,80ec38 <___vfprintf_internal_r+0xb90>
  80efc4:	28c00204 	addi	r3,r5,8
  80efc8:	003db506 	br	80e6a0 <___vfprintf_internal_r+0x5f8>
  80efcc:	3c000017 	ldw	r16,0(r7)
  80efd0:	3c400117 	ldw	r17,4(r7)
  80efd4:	39800204 	addi	r6,r7,8
  80efd8:	01000044 	movi	r4,1
  80efdc:	d9814015 	stw	r6,1280(sp)
  80efe0:	d8000405 	stb	zero,16(sp)
  80efe4:	003ebe06 	br	80eae0 <___vfprintf_internal_r+0xa38>
  80efe8:	3c000017 	ldw	r16,0(r7)
  80efec:	3c400117 	ldw	r17,4(r7)
  80eff0:	38800204 	addi	r2,r7,8
  80eff4:	d8814015 	stw	r2,1280(sp)
  80eff8:	003eb706 	br	80ead8 <___vfprintf_internal_r+0xa30>
  80effc:	3c000017 	ldw	r16,0(r7)
  80f000:	3c400117 	ldw	r17,4(r7)
  80f004:	39000204 	addi	r4,r7,8
  80f008:	d9014015 	stw	r4,1280(sp)
  80f00c:	0009883a 	mov	r4,zero
  80f010:	d8000405 	stb	zero,16(sp)
  80f014:	003eb206 	br	80eae0 <___vfprintf_internal_r+0xa38>
  80f018:	38c00017 	ldw	r3,0(r7)
  80f01c:	39c00104 	addi	r7,r7,4
  80f020:	d8c14a15 	stw	r3,1320(sp)
  80f024:	1800d10e 	bge	r3,zero,80f36c <___vfprintf_internal_r+0x12c4>
  80f028:	00c7c83a 	sub	r3,zero,r3
  80f02c:	d8c14a15 	stw	r3,1320(sp)
  80f030:	d9014c17 	ldw	r4,1328(sp)
  80f034:	b8c00007 	ldb	r3,0(r23)
  80f038:	21000114 	ori	r4,r4,4
  80f03c:	d9014c15 	stw	r4,1328(sp)
  80f040:	003c9806 	br	80e2a4 <___vfprintf_internal_r+0x1fc>
  80f044:	d9814c17 	ldw	r6,1328(sp)
  80f048:	3080080c 	andi	r2,r6,32
  80f04c:	1001f026 	beq	r2,zero,80f810 <___vfprintf_internal_r+0x1768>
  80f050:	d9014b17 	ldw	r4,1324(sp)
  80f054:	38800017 	ldw	r2,0(r7)
  80f058:	39c00104 	addi	r7,r7,4
  80f05c:	d9c14015 	stw	r7,1280(sp)
  80f060:	2007d7fa 	srai	r3,r4,31
  80f064:	d9c14017 	ldw	r7,1280(sp)
  80f068:	11000015 	stw	r4,0(r2)
  80f06c:	10c00115 	stw	r3,4(r2)
  80f070:	003c6906 	br	80e218 <___vfprintf_internal_r+0x170>
  80f074:	b8c00007 	ldb	r3,0(r23)
  80f078:	00801b04 	movi	r2,108
  80f07c:	18824f26 	beq	r3,r2,80f9bc <___vfprintf_internal_r+0x1914>
  80f080:	d9414c17 	ldw	r5,1328(sp)
  80f084:	29400414 	ori	r5,r5,16
  80f088:	d9414c15 	stw	r5,1328(sp)
  80f08c:	003c8506 	br	80e2a4 <___vfprintf_internal_r+0x1fc>
  80f090:	d9814c17 	ldw	r6,1328(sp)
  80f094:	b8c00007 	ldb	r3,0(r23)
  80f098:	31800814 	ori	r6,r6,32
  80f09c:	d9814c15 	stw	r6,1328(sp)
  80f0a0:	003c8006 	br	80e2a4 <___vfprintf_internal_r+0x1fc>
  80f0a4:	d8814c17 	ldw	r2,1328(sp)
  80f0a8:	3c000017 	ldw	r16,0(r7)
  80f0ac:	00c01e04 	movi	r3,120
  80f0b0:	10800094 	ori	r2,r2,2
  80f0b4:	d8814c15 	stw	r2,1328(sp)
  80f0b8:	39c00104 	addi	r7,r7,4
  80f0bc:	014020b4 	movhi	r5,130
  80f0c0:	294c5304 	addi	r5,r5,12620
  80f0c4:	00800c04 	movi	r2,48
  80f0c8:	0023883a 	mov	r17,zero
  80f0cc:	01000084 	movi	r4,2
  80f0d0:	d9c14015 	stw	r7,1280(sp)
  80f0d4:	d8c14d15 	stw	r3,1332(sp)
  80f0d8:	d9414415 	stw	r5,1296(sp)
  80f0dc:	d8800445 	stb	r2,17(sp)
  80f0e0:	d8c00485 	stb	r3,18(sp)
  80f0e4:	d8000405 	stb	zero,16(sp)
  80f0e8:	003e7d06 	br	80eae0 <___vfprintf_internal_r+0xa38>
  80f0ec:	d8814c17 	ldw	r2,1328(sp)
  80f0f0:	b8c00007 	ldb	r3,0(r23)
  80f0f4:	10801014 	ori	r2,r2,64
  80f0f8:	d8814c15 	stw	r2,1328(sp)
  80f0fc:	003c6906 	br	80e2a4 <___vfprintf_internal_r+0x1fc>
  80f100:	d9414c17 	ldw	r5,1328(sp)
  80f104:	2880020c 	andi	r2,r5,8
  80f108:	1001df26 	beq	r2,zero,80f888 <___vfprintf_internal_r+0x17e0>
  80f10c:	39800017 	ldw	r6,0(r7)
  80f110:	38800204 	addi	r2,r7,8
  80f114:	d8814015 	stw	r2,1280(sp)
  80f118:	d9814215 	stw	r6,1288(sp)
  80f11c:	39c00117 	ldw	r7,4(r7)
  80f120:	d9c14315 	stw	r7,1292(sp)
  80f124:	d9014217 	ldw	r4,1288(sp)
  80f128:	d9414317 	ldw	r5,1292(sp)
  80f12c:	08144540 	call	814454 <__isinfd>
  80f130:	10021726 	beq	r2,zero,80f990 <___vfprintf_internal_r+0x18e8>
  80f134:	d9014217 	ldw	r4,1288(sp)
  80f138:	d9414317 	ldw	r5,1292(sp)
  80f13c:	000d883a 	mov	r6,zero
  80f140:	000f883a 	mov	r7,zero
  80f144:	08158c00 	call	8158c0 <__ltdf2>
  80f148:	1002ca16 	blt	r2,zero,80fc74 <___vfprintf_internal_r+0x1bcc>
  80f14c:	d9414d17 	ldw	r5,1332(sp)
  80f150:	008011c4 	movi	r2,71
  80f154:	11420a16 	blt	r2,r5,80f980 <___vfprintf_internal_r+0x18d8>
  80f158:	018020b4 	movhi	r6,130
  80f15c:	318c5804 	addi	r6,r6,12640
  80f160:	d9814115 	stw	r6,1284(sp)
  80f164:	d9014c17 	ldw	r4,1328(sp)
  80f168:	00c000c4 	movi	r3,3
  80f16c:	00bfdfc4 	movi	r2,-129
  80f170:	2088703a 	and	r4,r4,r2
  80f174:	180f883a 	mov	r7,r3
  80f178:	d8c14515 	stw	r3,1300(sp)
  80f17c:	d9014c15 	stw	r4,1328(sp)
  80f180:	d8014615 	stw	zero,1304(sp)
  80f184:	003e6a06 	br	80eb30 <___vfprintf_internal_r+0xa88>
  80f188:	38800017 	ldw	r2,0(r7)
  80f18c:	00c00044 	movi	r3,1
  80f190:	39c00104 	addi	r7,r7,4
  80f194:	d9c14015 	stw	r7,1280(sp)
  80f198:	d9000f04 	addi	r4,sp,60
  80f19c:	180f883a 	mov	r7,r3
  80f1a0:	d8c14515 	stw	r3,1300(sp)
  80f1a4:	d9014115 	stw	r4,1284(sp)
  80f1a8:	d8800f05 	stb	r2,60(sp)
  80f1ac:	d8000405 	stb	zero,16(sp)
  80f1b0:	003cac06 	br	80e464 <___vfprintf_internal_r+0x3bc>
  80f1b4:	014020b4 	movhi	r5,130
  80f1b8:	294c5e04 	addi	r5,r5,12664
  80f1bc:	d9414415 	stw	r5,1296(sp)
  80f1c0:	d9814c17 	ldw	r6,1328(sp)
  80f1c4:	3080080c 	andi	r2,r6,32
  80f1c8:	1000f926 	beq	r2,zero,80f5b0 <___vfprintf_internal_r+0x1508>
  80f1cc:	3c000017 	ldw	r16,0(r7)
  80f1d0:	3c400117 	ldw	r17,4(r7)
  80f1d4:	38800204 	addi	r2,r7,8
  80f1d8:	d8814015 	stw	r2,1280(sp)
  80f1dc:	d9414c17 	ldw	r5,1328(sp)
  80f1e0:	2880004c 	andi	r2,r5,1
  80f1e4:	1005003a 	cmpeq	r2,r2,zero
  80f1e8:	1000b31e 	bne	r2,zero,80f4b8 <___vfprintf_internal_r+0x1410>
  80f1ec:	8444b03a 	or	r2,r16,r17
  80f1f0:	1000b126 	beq	r2,zero,80f4b8 <___vfprintf_internal_r+0x1410>
  80f1f4:	d9814d17 	ldw	r6,1332(sp)
  80f1f8:	29400094 	ori	r5,r5,2
  80f1fc:	00800c04 	movi	r2,48
  80f200:	01000084 	movi	r4,2
  80f204:	d9414c15 	stw	r5,1328(sp)
  80f208:	d8800445 	stb	r2,17(sp)
  80f20c:	d9800485 	stb	r6,18(sp)
  80f210:	d8000405 	stb	zero,16(sp)
  80f214:	003e3206 	br	80eae0 <___vfprintf_internal_r+0xa38>
  80f218:	018020b4 	movhi	r6,130
  80f21c:	318c5304 	addi	r6,r6,12620
  80f220:	d9814415 	stw	r6,1296(sp)
  80f224:	003fe606 	br	80f1c0 <___vfprintf_internal_r+0x1118>
  80f228:	00800ac4 	movi	r2,43
  80f22c:	d8800405 	stb	r2,16(sp)
  80f230:	b8c00007 	ldb	r3,0(r23)
  80f234:	003c1b06 	br	80e2a4 <___vfprintf_internal_r+0x1fc>
  80f238:	d8814c17 	ldw	r2,1328(sp)
  80f23c:	b8c00007 	ldb	r3,0(r23)
  80f240:	10800054 	ori	r2,r2,1
  80f244:	d8814c15 	stw	r2,1328(sp)
  80f248:	003c1606 	br	80e2a4 <___vfprintf_internal_r+0x1fc>
  80f24c:	d8800407 	ldb	r2,16(sp)
  80f250:	1000461e 	bne	r2,zero,80f36c <___vfprintf_internal_r+0x12c4>
  80f254:	00800804 	movi	r2,32
  80f258:	d8800405 	stb	r2,16(sp)
  80f25c:	b8c00007 	ldb	r3,0(r23)
  80f260:	003c1006 	br	80e2a4 <___vfprintf_internal_r+0x1fc>
  80f264:	d9814c17 	ldw	r6,1328(sp)
  80f268:	b8c00007 	ldb	r3,0(r23)
  80f26c:	31800214 	ori	r6,r6,8
  80f270:	d9814c15 	stw	r6,1328(sp)
  80f274:	003c0b06 	br	80e2a4 <___vfprintf_internal_r+0x1fc>
  80f278:	0007883a 	mov	r3,zero
  80f27c:	01000244 	movi	r4,9
  80f280:	188002a4 	muli	r2,r3,10
  80f284:	b8c00007 	ldb	r3,0(r23)
  80f288:	d9814d17 	ldw	r6,1332(sp)
  80f28c:	bdc00044 	addi	r23,r23,1
  80f290:	d8c14d15 	stw	r3,1332(sp)
  80f294:	d9414d17 	ldw	r5,1332(sp)
  80f298:	3085883a 	add	r2,r6,r2
  80f29c:	10fff404 	addi	r3,r2,-48
  80f2a0:	28bff404 	addi	r2,r5,-48
  80f2a4:	20bff62e 	bgeu	r4,r2,80f280 <___vfprintf_internal_r+0x11d8>
  80f2a8:	d8c14a15 	stw	r3,1320(sp)
  80f2ac:	003bff06 	br	80e2ac <___vfprintf_internal_r+0x204>
  80f2b0:	d9414c17 	ldw	r5,1328(sp)
  80f2b4:	b8c00007 	ldb	r3,0(r23)
  80f2b8:	29402014 	ori	r5,r5,128
  80f2bc:	d9414c15 	stw	r5,1328(sp)
  80f2c0:	003bf806 	br	80e2a4 <___vfprintf_internal_r+0x1fc>
  80f2c4:	b8c00007 	ldb	r3,0(r23)
  80f2c8:	00800a84 	movi	r2,42
  80f2cc:	bdc00044 	addi	r23,r23,1
  80f2d0:	18831526 	beq	r3,r2,80ff28 <___vfprintf_internal_r+0x1e80>
  80f2d4:	d8c14d15 	stw	r3,1332(sp)
  80f2d8:	18bff404 	addi	r2,r3,-48
  80f2dc:	00c00244 	movi	r3,9
  80f2e0:	18827836 	bltu	r3,r2,80fcc4 <___vfprintf_internal_r+0x1c1c>
  80f2e4:	000d883a 	mov	r6,zero
  80f2e8:	308002a4 	muli	r2,r6,10
  80f2ec:	b9800007 	ldb	r6,0(r23)
  80f2f0:	d9414d17 	ldw	r5,1332(sp)
  80f2f4:	bdc00044 	addi	r23,r23,1
  80f2f8:	d9814d15 	stw	r6,1332(sp)
  80f2fc:	d9014d17 	ldw	r4,1332(sp)
  80f300:	1145883a 	add	r2,r2,r5
  80f304:	11bff404 	addi	r6,r2,-48
  80f308:	20bff404 	addi	r2,r4,-48
  80f30c:	18bff62e 	bgeu	r3,r2,80f2e8 <___vfprintf_internal_r+0x1240>
  80f310:	3027883a 	mov	r19,r6
  80f314:	303be50e 	bge	r6,zero,80e2ac <___vfprintf_internal_r+0x204>
  80f318:	04ffffc4 	movi	r19,-1
  80f31c:	003be306 	br	80e2ac <___vfprintf_internal_r+0x204>
  80f320:	d8000405 	stb	zero,16(sp)
  80f324:	39800017 	ldw	r6,0(r7)
  80f328:	39c00104 	addi	r7,r7,4
  80f32c:	d9c14015 	stw	r7,1280(sp)
  80f330:	d9814115 	stw	r6,1284(sp)
  80f334:	3001c926 	beq	r6,zero,80fa5c <___vfprintf_internal_r+0x19b4>
  80f338:	98000e16 	blt	r19,zero,80f374 <___vfprintf_internal_r+0x12cc>
  80f33c:	d9014117 	ldw	r4,1284(sp)
  80f340:	000b883a 	mov	r5,zero
  80f344:	980d883a 	mov	r6,r19
  80f348:	0812a240 	call	812a24 <memchr>
  80f34c:	10025926 	beq	r2,zero,80fcb4 <___vfprintf_internal_r+0x1c0c>
  80f350:	d8c14117 	ldw	r3,1284(sp)
  80f354:	10cfc83a 	sub	r7,r2,r3
  80f358:	99c19e16 	blt	r19,r7,80f9d4 <___vfprintf_internal_r+0x192c>
  80f35c:	d9c14515 	stw	r7,1300(sp)
  80f360:	38000916 	blt	r7,zero,80f388 <___vfprintf_internal_r+0x12e0>
  80f364:	d8014615 	stw	zero,1304(sp)
  80f368:	003df106 	br	80eb30 <___vfprintf_internal_r+0xa88>
  80f36c:	b8c00007 	ldb	r3,0(r23)
  80f370:	003bcc06 	br	80e2a4 <___vfprintf_internal_r+0x1fc>
  80f374:	d9014117 	ldw	r4,1284(sp)
  80f378:	080dfdc0 	call	80dfdc <strlen>
  80f37c:	d8814515 	stw	r2,1300(sp)
  80f380:	100f883a 	mov	r7,r2
  80f384:	103ff70e 	bge	r2,zero,80f364 <___vfprintf_internal_r+0x12bc>
  80f388:	d8014515 	stw	zero,1300(sp)
  80f38c:	d8014615 	stw	zero,1304(sp)
  80f390:	003de706 	br	80eb30 <___vfprintf_internal_r+0xa88>
  80f394:	20c03fcc 	andi	r3,r4,255
  80f398:	00800044 	movi	r2,1
  80f39c:	18802d26 	beq	r3,r2,80f454 <___vfprintf_internal_r+0x13ac>
  80f3a0:	18800e36 	bltu	r3,r2,80f3dc <___vfprintf_internal_r+0x1334>
  80f3a4:	00800084 	movi	r2,2
  80f3a8:	1880fa26 	beq	r3,r2,80f794 <___vfprintf_internal_r+0x16ec>
  80f3ac:	010020b4 	movhi	r4,130
  80f3b0:	210c6304 	addi	r4,r4,12684
  80f3b4:	080dfdc0 	call	80dfdc <strlen>
  80f3b8:	100f883a 	mov	r7,r2
  80f3bc:	dcc14515 	stw	r19,1300(sp)
  80f3c0:	9880010e 	bge	r19,r2,80f3c8 <___vfprintf_internal_r+0x1320>
  80f3c4:	d8814515 	stw	r2,1300(sp)
  80f3c8:	008020b4 	movhi	r2,130
  80f3cc:	108c6304 	addi	r2,r2,12684
  80f3d0:	dcc14615 	stw	r19,1304(sp)
  80f3d4:	d8814115 	stw	r2,1284(sp)
  80f3d8:	003dd506 	br	80eb30 <___vfprintf_internal_r+0xa88>
  80f3dc:	d9401904 	addi	r5,sp,100
  80f3e0:	dd000f04 	addi	r20,sp,60
  80f3e4:	d9414115 	stw	r5,1284(sp)
  80f3e8:	880a977a 	slli	r5,r17,29
  80f3ec:	d9814117 	ldw	r6,1284(sp)
  80f3f0:	8004d0fa 	srli	r2,r16,3
  80f3f4:	8806d0fa 	srli	r3,r17,3
  80f3f8:	810001cc 	andi	r4,r16,7
  80f3fc:	2884b03a 	or	r2,r5,r2
  80f400:	31bfffc4 	addi	r6,r6,-1
  80f404:	21000c04 	addi	r4,r4,48
  80f408:	d9814115 	stw	r6,1284(sp)
  80f40c:	10cab03a 	or	r5,r2,r3
  80f410:	31000005 	stb	r4,0(r6)
  80f414:	1021883a 	mov	r16,r2
  80f418:	1823883a 	mov	r17,r3
  80f41c:	283ff21e 	bne	r5,zero,80f3e8 <___vfprintf_internal_r+0x1340>
  80f420:	d8c14c17 	ldw	r3,1328(sp)
  80f424:	1880004c 	andi	r2,r3,1
  80f428:	1005003a 	cmpeq	r2,r2,zero
  80f42c:	103db91e 	bne	r2,zero,80eb14 <___vfprintf_internal_r+0xa6c>
  80f430:	20803fcc 	andi	r2,r4,255
  80f434:	1080201c 	xori	r2,r2,128
  80f438:	10bfe004 	addi	r2,r2,-128
  80f43c:	00c00c04 	movi	r3,48
  80f440:	10fdb426 	beq	r2,r3,80eb14 <___vfprintf_internal_r+0xa6c>
  80f444:	31bfffc4 	addi	r6,r6,-1
  80f448:	d9814115 	stw	r6,1284(sp)
  80f44c:	30c00005 	stb	r3,0(r6)
  80f450:	003db006 	br	80eb14 <___vfprintf_internal_r+0xa6c>
  80f454:	88800068 	cmpgeui	r2,r17,1
  80f458:	10002c1e 	bne	r2,zero,80f50c <___vfprintf_internal_r+0x1464>
  80f45c:	8800021e 	bne	r17,zero,80f468 <___vfprintf_internal_r+0x13c0>
  80f460:	00800244 	movi	r2,9
  80f464:	14002936 	bltu	r2,r16,80f50c <___vfprintf_internal_r+0x1464>
  80f468:	d90018c4 	addi	r4,sp,99
  80f46c:	dd000f04 	addi	r20,sp,60
  80f470:	d9014115 	stw	r4,1284(sp)
  80f474:	d9014117 	ldw	r4,1284(sp)
  80f478:	80800c04 	addi	r2,r16,48
  80f47c:	20800005 	stb	r2,0(r4)
  80f480:	003da406 	br	80eb14 <___vfprintf_internal_r+0xa6c>
  80f484:	dc400d17 	ldw	r17,52(sp)
  80f488:	070020b4 	movhi	fp,130
  80f48c:	e70c6a84 	addi	fp,fp,12714
  80f490:	9425883a 	add	r18,r18,r16
  80f494:	8c400044 	addi	r17,r17,1
  80f498:	008001c4 	movi	r2,7
  80f49c:	1f000015 	stw	fp,0(r3)
  80f4a0:	1c000115 	stw	r16,4(r3)
  80f4a4:	dc800e15 	stw	r18,56(sp)
  80f4a8:	dc400d15 	stw	r17,52(sp)
  80f4ac:	147de216 	blt	r2,r17,80ec38 <___vfprintf_internal_r+0xb90>
  80f4b0:	18c00204 	addi	r3,r3,8
  80f4b4:	003c7a06 	br	80e6a0 <___vfprintf_internal_r+0x5f8>
  80f4b8:	01000084 	movi	r4,2
  80f4bc:	d8000405 	stb	zero,16(sp)
  80f4c0:	003d8706 	br	80eae0 <___vfprintf_internal_r+0xa38>
  80f4c4:	d9814c17 	ldw	r6,1328(sp)
  80f4c8:	30c4703a 	and	r2,r6,r3
  80f4cc:	1005003a 	cmpeq	r2,r2,zero
  80f4d0:	103cb926 	beq	r2,zero,80e7b8 <___vfprintf_internal_r+0x710>
  80f4d4:	d9014117 	ldw	r4,1284(sp)
  80f4d8:	94800044 	addi	r18,r18,1
  80f4dc:	8c400044 	addi	r17,r17,1
  80f4e0:	008001c4 	movi	r2,7
  80f4e4:	a9000015 	stw	r4,0(r21)
  80f4e8:	a8c00115 	stw	r3,4(r21)
  80f4ec:	dc800e15 	stw	r18,56(sp)
  80f4f0:	dc400d15 	stw	r17,52(sp)
  80f4f4:	147e6616 	blt	r2,r17,80ee90 <___vfprintf_internal_r+0xde8>
  80f4f8:	acc00204 	addi	r19,r21,8
  80f4fc:	003cd706 	br	80e85c <___vfprintf_internal_r+0x7b4>
  80f500:	070020b4 	movhi	fp,130
  80f504:	e70c6a84 	addi	fp,fp,12714
  80f508:	003c4f06 	br	80e648 <___vfprintf_internal_r+0x5a0>
  80f50c:	dd000f04 	addi	r20,sp,60
  80f510:	dc801904 	addi	r18,sp,100
  80f514:	8009883a 	mov	r4,r16
  80f518:	880b883a 	mov	r5,r17
  80f51c:	01800284 	movi	r6,10
  80f520:	000f883a 	mov	r7,zero
  80f524:	08152880 	call	815288 <__umoddi3>
  80f528:	12000c04 	addi	r8,r2,48
  80f52c:	94bfffc4 	addi	r18,r18,-1
  80f530:	8009883a 	mov	r4,r16
  80f534:	880b883a 	mov	r5,r17
  80f538:	01800284 	movi	r6,10
  80f53c:	000f883a 	mov	r7,zero
  80f540:	92000005 	stb	r8,0(r18)
  80f544:	0814cac0 	call	814cac <__udivdi3>
  80f548:	1009883a 	mov	r4,r2
  80f54c:	1021883a 	mov	r16,r2
  80f550:	18800068 	cmpgeui	r2,r3,1
  80f554:	1823883a 	mov	r17,r3
  80f558:	103fee1e 	bne	r2,zero,80f514 <___vfprintf_internal_r+0x146c>
  80f55c:	1800021e 	bne	r3,zero,80f568 <___vfprintf_internal_r+0x14c0>
  80f560:	00800244 	movi	r2,9
  80f564:	113feb36 	bltu	r2,r4,80f514 <___vfprintf_internal_r+0x146c>
  80f568:	94bfffc4 	addi	r18,r18,-1
  80f56c:	dc814115 	stw	r18,1284(sp)
  80f570:	003fc006 	br	80f474 <___vfprintf_internal_r+0x13cc>
  80f574:	d9014c17 	ldw	r4,1328(sp)
  80f578:	2080004c 	andi	r2,r4,1
  80f57c:	10009a1e 	bne	r2,zero,80f7e8 <___vfprintf_internal_r+0x1740>
  80f580:	d9401904 	addi	r5,sp,100
  80f584:	dd000f04 	addi	r20,sp,60
  80f588:	d9414115 	stw	r5,1284(sp)
  80f58c:	003d6106 	br	80eb14 <___vfprintf_internal_r+0xa6c>
  80f590:	d9014f17 	ldw	r4,1340(sp)
  80f594:	b00b883a 	mov	r5,r22
  80f598:	d9800c04 	addi	r6,sp,48
  80f59c:	080e0500 	call	80e050 <__sprint_r>
  80f5a0:	103c791e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80f5a4:	dc800e17 	ldw	r18,56(sp)
  80f5a8:	d8c01904 	addi	r3,sp,100
  80f5ac:	003cff06 	br	80e9ac <___vfprintf_internal_r+0x904>
  80f5b0:	d8c14c17 	ldw	r3,1328(sp)
  80f5b4:	1880040c 	andi	r2,r3,16
  80f5b8:	1000711e 	bne	r2,zero,80f780 <___vfprintf_internal_r+0x16d8>
  80f5bc:	d9014c17 	ldw	r4,1328(sp)
  80f5c0:	2080100c 	andi	r2,r4,64
  80f5c4:	10006e26 	beq	r2,zero,80f780 <___vfprintf_internal_r+0x16d8>
  80f5c8:	3c00000b 	ldhu	r16,0(r7)
  80f5cc:	0023883a 	mov	r17,zero
  80f5d0:	39c00104 	addi	r7,r7,4
  80f5d4:	d9c14015 	stw	r7,1280(sp)
  80f5d8:	003f0006 	br	80f1dc <___vfprintf_internal_r+0x1134>
  80f5dc:	dc400d17 	ldw	r17,52(sp)
  80f5e0:	070020b4 	movhi	fp,130
  80f5e4:	e70c6a84 	addi	fp,fp,12714
  80f5e8:	9425883a 	add	r18,r18,r16
  80f5ec:	8c400044 	addi	r17,r17,1
  80f5f0:	008001c4 	movi	r2,7
  80f5f4:	1f000015 	stw	fp,0(r3)
  80f5f8:	1c000115 	stw	r16,4(r3)
  80f5fc:	dc800e15 	stw	r18,56(sp)
  80f600:	dc400d15 	stw	r17,52(sp)
  80f604:	147d7616 	blt	r2,r17,80ebe0 <___vfprintf_internal_r+0xb38>
  80f608:	18c00204 	addi	r3,r3,8
  80f60c:	003d7b06 	br	80ebfc <___vfprintf_internal_r+0xb54>
  80f610:	dc800e17 	ldw	r18,56(sp)
  80f614:	dc400d17 	ldw	r17,52(sp)
  80f618:	070020b4 	movhi	fp,130
  80f61c:	e70c6e84 	addi	fp,fp,12730
  80f620:	003bc006 	br	80e524 <___vfprintf_internal_r+0x47c>
  80f624:	d9014f17 	ldw	r4,1340(sp)
  80f628:	b00b883a 	mov	r5,r22
  80f62c:	d9800c04 	addi	r6,sp,48
  80f630:	080e0500 	call	80e050 <__sprint_r>
  80f634:	103c541e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80f638:	dc800e17 	ldw	r18,56(sp)
  80f63c:	d8c01904 	addi	r3,sp,100
  80f640:	003ce906 	br	80e9e8 <___vfprintf_internal_r+0x940>
  80f644:	3c000017 	ldw	r16,0(r7)
  80f648:	0009883a 	mov	r4,zero
  80f64c:	39c00104 	addi	r7,r7,4
  80f650:	0023883a 	mov	r17,zero
  80f654:	d9c14015 	stw	r7,1280(sp)
  80f658:	d8000405 	stb	zero,16(sp)
  80f65c:	003d2006 	br	80eae0 <___vfprintf_internal_r+0xa38>
  80f660:	38800017 	ldw	r2,0(r7)
  80f664:	39c00104 	addi	r7,r7,4
  80f668:	d9c14015 	stw	r7,1280(sp)
  80f66c:	1023d7fa 	srai	r17,r2,31
  80f670:	1021883a 	mov	r16,r2
  80f674:	003d1806 	br	80ead8 <___vfprintf_internal_r+0xa30>
  80f678:	3c000017 	ldw	r16,0(r7)
  80f67c:	01000044 	movi	r4,1
  80f680:	39c00104 	addi	r7,r7,4
  80f684:	0023883a 	mov	r17,zero
  80f688:	d9c14015 	stw	r7,1280(sp)
  80f68c:	d8000405 	stb	zero,16(sp)
  80f690:	003d1306 	br	80eae0 <___vfprintf_internal_r+0xa38>
  80f694:	008020b4 	movhi	r2,130
  80f698:	108c6a04 	addi	r2,r2,12712
  80f69c:	94800044 	addi	r18,r18,1
  80f6a0:	8c400044 	addi	r17,r17,1
  80f6a4:	a8800015 	stw	r2,0(r21)
  80f6a8:	00c00044 	movi	r3,1
  80f6ac:	008001c4 	movi	r2,7
  80f6b0:	a8c00115 	stw	r3,4(r21)
  80f6b4:	dc800e15 	stw	r18,56(sp)
  80f6b8:	dc400d15 	stw	r17,52(sp)
  80f6bc:	1440ca16 	blt	r2,r17,80f9e8 <___vfprintf_internal_r+0x1940>
  80f6c0:	a8c00204 	addi	r3,r21,8
  80f6c4:	2000061e 	bne	r4,zero,80f6e0 <___vfprintf_internal_r+0x1638>
  80f6c8:	d9414717 	ldw	r5,1308(sp)
  80f6cc:	2800041e 	bne	r5,zero,80f6e0 <___vfprintf_internal_r+0x1638>
  80f6d0:	d9814c17 	ldw	r6,1328(sp)
  80f6d4:	3080004c 	andi	r2,r6,1
  80f6d8:	1005003a 	cmpeq	r2,r2,zero
  80f6dc:	103bf01e 	bne	r2,zero,80e6a0 <___vfprintf_internal_r+0x5f8>
  80f6e0:	00800044 	movi	r2,1
  80f6e4:	dc400d17 	ldw	r17,52(sp)
  80f6e8:	18800115 	stw	r2,4(r3)
  80f6ec:	d8814917 	ldw	r2,1316(sp)
  80f6f0:	94800044 	addi	r18,r18,1
  80f6f4:	8c400044 	addi	r17,r17,1
  80f6f8:	18800015 	stw	r2,0(r3)
  80f6fc:	008001c4 	movi	r2,7
  80f700:	dc800e15 	stw	r18,56(sp)
  80f704:	dc400d15 	stw	r17,52(sp)
  80f708:	1440ca16 	blt	r2,r17,80fa34 <___vfprintf_internal_r+0x198c>
  80f70c:	18c00204 	addi	r3,r3,8
  80f710:	0121c83a 	sub	r16,zero,r4
  80f714:	0400500e 	bge	zero,r16,80f858 <___vfprintf_internal_r+0x17b0>
  80f718:	00800404 	movi	r2,16
  80f71c:	1400800e 	bge	r2,r16,80f920 <___vfprintf_internal_r+0x1878>
  80f720:	1027883a 	mov	r19,r2
  80f724:	070020b4 	movhi	fp,130
  80f728:	e70c6a84 	addi	fp,fp,12714
  80f72c:	050001c4 	movi	r20,7
  80f730:	00000306 	br	80f740 <___vfprintf_internal_r+0x1698>
  80f734:	18c00204 	addi	r3,r3,8
  80f738:	843ffc04 	addi	r16,r16,-16
  80f73c:	9c007a0e 	bge	r19,r16,80f928 <___vfprintf_internal_r+0x1880>
  80f740:	94800404 	addi	r18,r18,16
  80f744:	8c400044 	addi	r17,r17,1
  80f748:	1f000015 	stw	fp,0(r3)
  80f74c:	1cc00115 	stw	r19,4(r3)
  80f750:	dc800e15 	stw	r18,56(sp)
  80f754:	dc400d15 	stw	r17,52(sp)
  80f758:	a47ff60e 	bge	r20,r17,80f734 <___vfprintf_internal_r+0x168c>
  80f75c:	d9014f17 	ldw	r4,1340(sp)
  80f760:	b00b883a 	mov	r5,r22
  80f764:	d9800c04 	addi	r6,sp,48
  80f768:	080e0500 	call	80e050 <__sprint_r>
  80f76c:	103c061e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80f770:	dc800e17 	ldw	r18,56(sp)
  80f774:	dc400d17 	ldw	r17,52(sp)
  80f778:	d8c01904 	addi	r3,sp,100
  80f77c:	003fee06 	br	80f738 <___vfprintf_internal_r+0x1690>
  80f780:	3c000017 	ldw	r16,0(r7)
  80f784:	0023883a 	mov	r17,zero
  80f788:	39c00104 	addi	r7,r7,4
  80f78c:	d9c14015 	stw	r7,1280(sp)
  80f790:	003e9206 	br	80f1dc <___vfprintf_internal_r+0x1134>
  80f794:	d9401904 	addi	r5,sp,100
  80f798:	dd000f04 	addi	r20,sp,60
  80f79c:	d9414115 	stw	r5,1284(sp)
  80f7a0:	d9814417 	ldw	r6,1296(sp)
  80f7a4:	880a973a 	slli	r5,r17,28
  80f7a8:	8004d13a 	srli	r2,r16,4
  80f7ac:	810003cc 	andi	r4,r16,15
  80f7b0:	3109883a 	add	r4,r6,r4
  80f7b4:	2884b03a 	or	r2,r5,r2
  80f7b8:	21400003 	ldbu	r5,0(r4)
  80f7bc:	d9014117 	ldw	r4,1284(sp)
  80f7c0:	8806d13a 	srli	r3,r17,4
  80f7c4:	1021883a 	mov	r16,r2
  80f7c8:	213fffc4 	addi	r4,r4,-1
  80f7cc:	d9014115 	stw	r4,1284(sp)
  80f7d0:	d9814117 	ldw	r6,1284(sp)
  80f7d4:	10c8b03a 	or	r4,r2,r3
  80f7d8:	1823883a 	mov	r17,r3
  80f7dc:	31400005 	stb	r5,0(r6)
  80f7e0:	203fef1e 	bne	r4,zero,80f7a0 <___vfprintf_internal_r+0x16f8>
  80f7e4:	003ccb06 	br	80eb14 <___vfprintf_internal_r+0xa6c>
  80f7e8:	00800c04 	movi	r2,48
  80f7ec:	d98018c4 	addi	r6,sp,99
  80f7f0:	dd000f04 	addi	r20,sp,60
  80f7f4:	d88018c5 	stb	r2,99(sp)
  80f7f8:	d9814115 	stw	r6,1284(sp)
  80f7fc:	003cc506 	br	80eb14 <___vfprintf_internal_r+0xa6c>
  80f800:	dc400d17 	ldw	r17,52(sp)
  80f804:	070020b4 	movhi	fp,130
  80f808:	e70c6e84 	addi	fp,fp,12730
  80f80c:	003bc706 	br	80e72c <___vfprintf_internal_r+0x684>
  80f810:	d9414c17 	ldw	r5,1328(sp)
  80f814:	2880040c 	andi	r2,r5,16
  80f818:	10007c26 	beq	r2,zero,80fa0c <___vfprintf_internal_r+0x1964>
  80f81c:	38800017 	ldw	r2,0(r7)
  80f820:	39c00104 	addi	r7,r7,4
  80f824:	d9c14015 	stw	r7,1280(sp)
  80f828:	d9814b17 	ldw	r6,1324(sp)
  80f82c:	d9c14017 	ldw	r7,1280(sp)
  80f830:	11800015 	stw	r6,0(r2)
  80f834:	003a7806 	br	80e218 <___vfprintf_internal_r+0x170>
  80f838:	d9014f17 	ldw	r4,1340(sp)
  80f83c:	b00b883a 	mov	r5,r22
  80f840:	d9800c04 	addi	r6,sp,48
  80f844:	080e0500 	call	80e050 <__sprint_r>
  80f848:	103bcf1e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80f84c:	dc800e17 	ldw	r18,56(sp)
  80f850:	dc400d17 	ldw	r17,52(sp)
  80f854:	d8c01904 	addi	r3,sp,100
  80f858:	d9014717 	ldw	r4,1308(sp)
  80f85c:	d9414117 	ldw	r5,1284(sp)
  80f860:	8c400044 	addi	r17,r17,1
  80f864:	9125883a 	add	r18,r18,r4
  80f868:	008001c4 	movi	r2,7
  80f86c:	19400015 	stw	r5,0(r3)
  80f870:	19000115 	stw	r4,4(r3)
  80f874:	dc800e15 	stw	r18,56(sp)
  80f878:	dc400d15 	stw	r17,52(sp)
  80f87c:	147cee16 	blt	r2,r17,80ec38 <___vfprintf_internal_r+0xb90>
  80f880:	18c00204 	addi	r3,r3,8
  80f884:	003b8606 	br	80e6a0 <___vfprintf_internal_r+0x5f8>
  80f888:	38c00017 	ldw	r3,0(r7)
  80f88c:	39000204 	addi	r4,r7,8
  80f890:	d9014015 	stw	r4,1280(sp)
  80f894:	d8c14215 	stw	r3,1288(sp)
  80f898:	39c00117 	ldw	r7,4(r7)
  80f89c:	d9c14315 	stw	r7,1292(sp)
  80f8a0:	003e2006 	br	80f124 <___vfprintf_internal_r+0x107c>
  80f8a4:	0005883a 	mov	r2,zero
  80f8a8:	1409c83a 	sub	r4,r2,r16
  80f8ac:	1105803a 	cmpltu	r2,r2,r4
  80f8b0:	044bc83a 	sub	r5,zero,r17
  80f8b4:	2885c83a 	sub	r2,r5,r2
  80f8b8:	2021883a 	mov	r16,r4
  80f8bc:	1023883a 	mov	r17,r2
  80f8c0:	01000044 	movi	r4,1
  80f8c4:	00800b44 	movi	r2,45
  80f8c8:	d8800405 	stb	r2,16(sp)
  80f8cc:	003c8406 	br	80eae0 <___vfprintf_internal_r+0xa38>
  80f8d0:	d9014f17 	ldw	r4,1340(sp)
  80f8d4:	b00b883a 	mov	r5,r22
  80f8d8:	d9800c04 	addi	r6,sp,48
  80f8dc:	080e0500 	call	80e050 <__sprint_r>
  80f8e0:	103ba91e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80f8e4:	dc800e17 	ldw	r18,56(sp)
  80f8e8:	dc400d17 	ldw	r17,52(sp)
  80f8ec:	d9000517 	ldw	r4,20(sp)
  80f8f0:	d9401904 	addi	r5,sp,100
  80f8f4:	003da706 	br	80ef94 <___vfprintf_internal_r+0xeec>
  80f8f8:	d9014f17 	ldw	r4,1340(sp)
  80f8fc:	b00b883a 	mov	r5,r22
  80f900:	d9800c04 	addi	r6,sp,48
  80f904:	080e0500 	call	80e050 <__sprint_r>
  80f908:	103b9f1e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80f90c:	dc800e17 	ldw	r18,56(sp)
  80f910:	dc400d17 	ldw	r17,52(sp)
  80f914:	d9000517 	ldw	r4,20(sp)
  80f918:	d8c01904 	addi	r3,sp,100
  80f91c:	003d9106 	br	80ef64 <___vfprintf_internal_r+0xebc>
  80f920:	070020b4 	movhi	fp,130
  80f924:	e70c6a84 	addi	fp,fp,12714
  80f928:	9425883a 	add	r18,r18,r16
  80f92c:	8c400044 	addi	r17,r17,1
  80f930:	008001c4 	movi	r2,7
  80f934:	1f000015 	stw	fp,0(r3)
  80f938:	1c000115 	stw	r16,4(r3)
  80f93c:	dc800e15 	stw	r18,56(sp)
  80f940:	dc400d15 	stw	r17,52(sp)
  80f944:	147fbc16 	blt	r2,r17,80f838 <___vfprintf_internal_r+0x1790>
  80f948:	18c00204 	addi	r3,r3,8
  80f94c:	003fc206 	br	80f858 <___vfprintf_internal_r+0x17b0>
  80f950:	d9014f17 	ldw	r4,1340(sp)
  80f954:	b00b883a 	mov	r5,r22
  80f958:	d9800c04 	addi	r6,sp,48
  80f95c:	080e0500 	call	80e050 <__sprint_r>
  80f960:	103b891e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80f964:	dc800e17 	ldw	r18,56(sp)
  80f968:	d9000517 	ldw	r4,20(sp)
  80f96c:	d8c01904 	addi	r3,sp,100
  80f970:	003d0206 	br	80ed7c <___vfprintf_internal_r+0xcd4>
  80f974:	070020b4 	movhi	fp,130
  80f978:	e70c6a84 	addi	fp,fp,12714
  80f97c:	003be406 	br	80e910 <___vfprintf_internal_r+0x868>
  80f980:	008020b4 	movhi	r2,130
  80f984:	108c5904 	addi	r2,r2,12644
  80f988:	d8814115 	stw	r2,1284(sp)
  80f98c:	003df506 	br	80f164 <___vfprintf_internal_r+0x10bc>
  80f990:	d9014217 	ldw	r4,1288(sp)
  80f994:	d9414317 	ldw	r5,1292(sp)
  80f998:	08144940 	call	814494 <__isnand>
  80f99c:	10003926 	beq	r2,zero,80fa84 <___vfprintf_internal_r+0x19dc>
  80f9a0:	d9414d17 	ldw	r5,1332(sp)
  80f9a4:	008011c4 	movi	r2,71
  80f9a8:	1140ce16 	blt	r2,r5,80fce4 <___vfprintf_internal_r+0x1c3c>
  80f9ac:	018020b4 	movhi	r6,130
  80f9b0:	318c5a04 	addi	r6,r6,12648
  80f9b4:	d9814115 	stw	r6,1284(sp)
  80f9b8:	003dea06 	br	80f164 <___vfprintf_internal_r+0x10bc>
  80f9bc:	d9014c17 	ldw	r4,1328(sp)
  80f9c0:	bdc00044 	addi	r23,r23,1
  80f9c4:	b8c00007 	ldb	r3,0(r23)
  80f9c8:	21000814 	ori	r4,r4,32
  80f9cc:	d9014c15 	stw	r4,1328(sp)
  80f9d0:	003a3406 	br	80e2a4 <___vfprintf_internal_r+0x1fc>
  80f9d4:	dcc14515 	stw	r19,1300(sp)
  80f9d8:	98011016 	blt	r19,zero,80fe1c <___vfprintf_internal_r+0x1d74>
  80f9dc:	980f883a 	mov	r7,r19
  80f9e0:	d8014615 	stw	zero,1304(sp)
  80f9e4:	003c5206 	br	80eb30 <___vfprintf_internal_r+0xa88>
  80f9e8:	d9014f17 	ldw	r4,1340(sp)
  80f9ec:	b00b883a 	mov	r5,r22
  80f9f0:	d9800c04 	addi	r6,sp,48
  80f9f4:	080e0500 	call	80e050 <__sprint_r>
  80f9f8:	103b631e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80f9fc:	dc800e17 	ldw	r18,56(sp)
  80fa00:	d9000517 	ldw	r4,20(sp)
  80fa04:	d8c01904 	addi	r3,sp,100
  80fa08:	003f2e06 	br	80f6c4 <___vfprintf_internal_r+0x161c>
  80fa0c:	d8c14c17 	ldw	r3,1328(sp)
  80fa10:	1880100c 	andi	r2,r3,64
  80fa14:	1000a026 	beq	r2,zero,80fc98 <___vfprintf_internal_r+0x1bf0>
  80fa18:	38800017 	ldw	r2,0(r7)
  80fa1c:	39c00104 	addi	r7,r7,4
  80fa20:	d9c14015 	stw	r7,1280(sp)
  80fa24:	d9014b17 	ldw	r4,1324(sp)
  80fa28:	d9c14017 	ldw	r7,1280(sp)
  80fa2c:	1100000d 	sth	r4,0(r2)
  80fa30:	0039f906 	br	80e218 <___vfprintf_internal_r+0x170>
  80fa34:	d9014f17 	ldw	r4,1340(sp)
  80fa38:	b00b883a 	mov	r5,r22
  80fa3c:	d9800c04 	addi	r6,sp,48
  80fa40:	080e0500 	call	80e050 <__sprint_r>
  80fa44:	103b501e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80fa48:	dc800e17 	ldw	r18,56(sp)
  80fa4c:	dc400d17 	ldw	r17,52(sp)
  80fa50:	d9000517 	ldw	r4,20(sp)
  80fa54:	d8c01904 	addi	r3,sp,100
  80fa58:	003f2d06 	br	80f710 <___vfprintf_internal_r+0x1668>
  80fa5c:	00800184 	movi	r2,6
  80fa60:	14c09a36 	bltu	r2,r19,80fccc <___vfprintf_internal_r+0x1c24>
  80fa64:	dcc14515 	stw	r19,1300(sp)
  80fa68:	9800010e 	bge	r19,zero,80fa70 <___vfprintf_internal_r+0x19c8>
  80fa6c:	d8014515 	stw	zero,1300(sp)
  80fa70:	008020b4 	movhi	r2,130
  80fa74:	108c5c04 	addi	r2,r2,12656
  80fa78:	980f883a 	mov	r7,r19
  80fa7c:	d8814115 	stw	r2,1284(sp)
  80fa80:	003a7806 	br	80e464 <___vfprintf_internal_r+0x3bc>
  80fa84:	00bfffc4 	movi	r2,-1
  80fa88:	9880e226 	beq	r19,r2,80fe14 <___vfprintf_internal_r+0x1d6c>
  80fa8c:	d9414d17 	ldw	r5,1332(sp)
  80fa90:	008019c4 	movi	r2,103
  80fa94:	2880dc26 	beq	r5,r2,80fe08 <___vfprintf_internal_r+0x1d60>
  80fa98:	008011c4 	movi	r2,71
  80fa9c:	2880da26 	beq	r5,r2,80fe08 <___vfprintf_internal_r+0x1d60>
  80faa0:	d9414c17 	ldw	r5,1328(sp)
  80faa4:	d9014317 	ldw	r4,1292(sp)
  80faa8:	d9814217 	ldw	r6,1288(sp)
  80faac:	29404014 	ori	r5,r5,256
  80fab0:	d9414c15 	stw	r5,1328(sp)
  80fab4:	2000cc16 	blt	r4,zero,80fde8 <___vfprintf_internal_r+0x1d40>
  80fab8:	3021883a 	mov	r16,r6
  80fabc:	2023883a 	mov	r17,r4
  80fac0:	0039883a 	mov	fp,zero
  80fac4:	d9414d17 	ldw	r5,1332(sp)
  80fac8:	00801984 	movi	r2,102
  80facc:	2880b726 	beq	r5,r2,80fdac <___vfprintf_internal_r+0x1d04>
  80fad0:	00801184 	movi	r2,70
  80fad4:	2880b526 	beq	r5,r2,80fdac <___vfprintf_internal_r+0x1d04>
  80fad8:	00801944 	movi	r2,101
  80fadc:	2880c826 	beq	r5,r2,80fe00 <___vfprintf_internal_r+0x1d58>
  80fae0:	00801144 	movi	r2,69
  80fae4:	2880c626 	beq	r5,r2,80fe00 <___vfprintf_internal_r+0x1d58>
  80fae8:	9829883a 	mov	r20,r19
  80faec:	d9014f17 	ldw	r4,1340(sp)
  80faf0:	d8800504 	addi	r2,sp,20
  80faf4:	880d883a 	mov	r6,r17
  80faf8:	d8800115 	stw	r2,4(sp)
  80fafc:	d8c00604 	addi	r3,sp,24
  80fb00:	d8800704 	addi	r2,sp,28
  80fb04:	800b883a 	mov	r5,r16
  80fb08:	01c00084 	movi	r7,2
  80fb0c:	d8c00215 	stw	r3,8(sp)
  80fb10:	d8800315 	stw	r2,12(sp)
  80fb14:	dd000015 	stw	r20,0(sp)
  80fb18:	08102cc0 	call	8102cc <_dtoa_r>
  80fb1c:	d9814d17 	ldw	r6,1332(sp)
  80fb20:	d8814115 	stw	r2,1284(sp)
  80fb24:	008019c4 	movi	r2,103
  80fb28:	30809526 	beq	r6,r2,80fd80 <___vfprintf_internal_r+0x1cd8>
  80fb2c:	d8c14d17 	ldw	r3,1332(sp)
  80fb30:	008011c4 	movi	r2,71
  80fb34:	18809226 	beq	r3,r2,80fd80 <___vfprintf_internal_r+0x1cd8>
  80fb38:	d9414117 	ldw	r5,1284(sp)
  80fb3c:	d9814d17 	ldw	r6,1332(sp)
  80fb40:	00801984 	movi	r2,102
  80fb44:	2d25883a 	add	r18,r5,r20
  80fb48:	30808626 	beq	r6,r2,80fd64 <___vfprintf_internal_r+0x1cbc>
  80fb4c:	00801184 	movi	r2,70
  80fb50:	30808426 	beq	r6,r2,80fd64 <___vfprintf_internal_r+0x1cbc>
  80fb54:	000d883a 	mov	r6,zero
  80fb58:	000f883a 	mov	r7,zero
  80fb5c:	880b883a 	mov	r5,r17
  80fb60:	8009883a 	mov	r4,r16
  80fb64:	080cb340 	call	80cb34 <__eqdf2>
  80fb68:	1000751e 	bne	r2,zero,80fd40 <___vfprintf_internal_r+0x1c98>
  80fb6c:	9005883a 	mov	r2,r18
  80fb70:	dc800715 	stw	r18,28(sp)
  80fb74:	d9014117 	ldw	r4,1284(sp)
  80fb78:	d9414d17 	ldw	r5,1332(sp)
  80fb7c:	00c019c4 	movi	r3,103
  80fb80:	1125c83a 	sub	r18,r2,r4
  80fb84:	28c06826 	beq	r5,r3,80fd28 <___vfprintf_internal_r+0x1c80>
  80fb88:	008011c4 	movi	r2,71
  80fb8c:	28806626 	beq	r5,r2,80fd28 <___vfprintf_internal_r+0x1c80>
  80fb90:	d9000517 	ldw	r4,20(sp)
  80fb94:	d8c14d17 	ldw	r3,1332(sp)
  80fb98:	00801944 	movi	r2,101
  80fb9c:	10c05516 	blt	r2,r3,80fcf4 <___vfprintf_internal_r+0x1c4c>
  80fba0:	213fffc4 	addi	r4,r4,-1
  80fba4:	d9000515 	stw	r4,20(sp)
  80fba8:	d8c00805 	stb	r3,32(sp)
  80fbac:	2021883a 	mov	r16,r4
  80fbb0:	2000c116 	blt	r4,zero,80feb8 <___vfprintf_internal_r+0x1e10>
  80fbb4:	00800ac4 	movi	r2,43
  80fbb8:	d8800845 	stb	r2,33(sp)
  80fbbc:	00800244 	movi	r2,9
  80fbc0:	1400af0e 	bge	r2,r16,80fe80 <___vfprintf_internal_r+0x1dd8>
  80fbc4:	1027883a 	mov	r19,r2
  80fbc8:	dc400b84 	addi	r17,sp,46
  80fbcc:	8009883a 	mov	r4,r16
  80fbd0:	01400284 	movi	r5,10
  80fbd4:	080cf780 	call	80cf78 <__modsi3>
  80fbd8:	10800c04 	addi	r2,r2,48
  80fbdc:	8c7fffc4 	addi	r17,r17,-1
  80fbe0:	8009883a 	mov	r4,r16
  80fbe4:	01400284 	movi	r5,10
  80fbe8:	88800005 	stb	r2,0(r17)
  80fbec:	080cf180 	call	80cf18 <__divsi3>
  80fbf0:	1021883a 	mov	r16,r2
  80fbf4:	98bff516 	blt	r19,r2,80fbcc <___vfprintf_internal_r+0x1b24>
  80fbf8:	10c00c04 	addi	r3,r2,48
  80fbfc:	d88009c4 	addi	r2,sp,39
  80fc00:	108001c4 	addi	r2,r2,7
  80fc04:	897fffc4 	addi	r5,r17,-1
  80fc08:	88ffffc5 	stb	r3,-1(r17)
  80fc0c:	2880a72e 	bgeu	r5,r2,80feac <___vfprintf_internal_r+0x1e04>
  80fc10:	1009883a 	mov	r4,r2
  80fc14:	d9800804 	addi	r6,sp,32
  80fc18:	d8c00884 	addi	r3,sp,34
  80fc1c:	28800003 	ldbu	r2,0(r5)
  80fc20:	29400044 	addi	r5,r5,1
  80fc24:	18800005 	stb	r2,0(r3)
  80fc28:	18c00044 	addi	r3,r3,1
  80fc2c:	293ffb36 	bltu	r5,r4,80fc1c <___vfprintf_internal_r+0x1b74>
  80fc30:	1987c83a 	sub	r3,r3,r6
  80fc34:	00800044 	movi	r2,1
  80fc38:	d8c14815 	stw	r3,1312(sp)
  80fc3c:	90cf883a 	add	r7,r18,r3
  80fc40:	1480960e 	bge	r2,r18,80fe9c <___vfprintf_internal_r+0x1df4>
  80fc44:	39c00044 	addi	r7,r7,1
  80fc48:	d9c14515 	stw	r7,1300(sp)
  80fc4c:	38003416 	blt	r7,zero,80fd20 <___vfprintf_internal_r+0x1c78>
  80fc50:	e0803fcc 	andi	r2,fp,255
  80fc54:	1080201c 	xori	r2,r2,128
  80fc58:	10bfe004 	addi	r2,r2,-128
  80fc5c:	10004e26 	beq	r2,zero,80fd98 <___vfprintf_internal_r+0x1cf0>
  80fc60:	00800b44 	movi	r2,45
  80fc64:	dc814715 	stw	r18,1308(sp)
  80fc68:	d8014615 	stw	zero,1304(sp)
  80fc6c:	d8800405 	stb	r2,16(sp)
  80fc70:	003bb106 	br	80eb38 <___vfprintf_internal_r+0xa90>
  80fc74:	00800b44 	movi	r2,45
  80fc78:	d8800405 	stb	r2,16(sp)
  80fc7c:	003d3306 	br	80f14c <___vfprintf_internal_r+0x10a4>
  80fc80:	d9014f17 	ldw	r4,1340(sp)
  80fc84:	b00b883a 	mov	r5,r22
  80fc88:	d9800c04 	addi	r6,sp,48
  80fc8c:	080e0500 	call	80e050 <__sprint_r>
  80fc90:	103abd1e 	bne	r2,zero,80e788 <___vfprintf_internal_r+0x6e0>
  80fc94:	003abb06 	br	80e784 <___vfprintf_internal_r+0x6dc>
  80fc98:	38800017 	ldw	r2,0(r7)
  80fc9c:	39c00104 	addi	r7,r7,4
  80fca0:	d9c14015 	stw	r7,1280(sp)
  80fca4:	d9414b17 	ldw	r5,1324(sp)
  80fca8:	d9c14017 	ldw	r7,1280(sp)
  80fcac:	11400015 	stw	r5,0(r2)
  80fcb0:	00395906 	br	80e218 <___vfprintf_internal_r+0x170>
  80fcb4:	980f883a 	mov	r7,r19
  80fcb8:	dcc14515 	stw	r19,1300(sp)
  80fcbc:	d8014615 	stw	zero,1304(sp)
  80fcc0:	003b9b06 	br	80eb30 <___vfprintf_internal_r+0xa88>
  80fcc4:	0027883a 	mov	r19,zero
  80fcc8:	00397806 	br	80e2ac <___vfprintf_internal_r+0x204>
  80fccc:	00c020b4 	movhi	r3,130
  80fcd0:	18cc5c04 	addi	r3,r3,12656
  80fcd4:	100f883a 	mov	r7,r2
  80fcd8:	d8814515 	stw	r2,1300(sp)
  80fcdc:	d8c14115 	stw	r3,1284(sp)
  80fce0:	0039e006 	br	80e464 <___vfprintf_internal_r+0x3bc>
  80fce4:	008020b4 	movhi	r2,130
  80fce8:	108c5b04 	addi	r2,r2,12652
  80fcec:	d8814115 	stw	r2,1284(sp)
  80fcf0:	003d1c06 	br	80f164 <___vfprintf_internal_r+0x10bc>
  80fcf4:	d9414d17 	ldw	r5,1332(sp)
  80fcf8:	00801984 	movi	r2,102
  80fcfc:	28804926 	beq	r5,r2,80fe24 <___vfprintf_internal_r+0x1d7c>
  80fd00:	200f883a 	mov	r7,r4
  80fd04:	24805716 	blt	r4,r18,80fe64 <___vfprintf_internal_r+0x1dbc>
  80fd08:	d9414c17 	ldw	r5,1328(sp)
  80fd0c:	2880004c 	andi	r2,r5,1
  80fd10:	10000126 	beq	r2,zero,80fd18 <___vfprintf_internal_r+0x1c70>
  80fd14:	21c00044 	addi	r7,r4,1
  80fd18:	d9c14515 	stw	r7,1300(sp)
  80fd1c:	383fcc0e 	bge	r7,zero,80fc50 <___vfprintf_internal_r+0x1ba8>
  80fd20:	d8014515 	stw	zero,1300(sp)
  80fd24:	003fca06 	br	80fc50 <___vfprintf_internal_r+0x1ba8>
  80fd28:	d9000517 	ldw	r4,20(sp)
  80fd2c:	00bfff04 	movi	r2,-4
  80fd30:	1100480e 	bge	r2,r4,80fe54 <___vfprintf_internal_r+0x1dac>
  80fd34:	99004716 	blt	r19,r4,80fe54 <___vfprintf_internal_r+0x1dac>
  80fd38:	d8c14d15 	stw	r3,1332(sp)
  80fd3c:	003ff006 	br	80fd00 <___vfprintf_internal_r+0x1c58>
  80fd40:	d8800717 	ldw	r2,28(sp)
  80fd44:	14bf8b2e 	bgeu	r2,r18,80fb74 <___vfprintf_internal_r+0x1acc>
  80fd48:	9007883a 	mov	r3,r18
  80fd4c:	01000c04 	movi	r4,48
  80fd50:	11000005 	stb	r4,0(r2)
  80fd54:	10800044 	addi	r2,r2,1
  80fd58:	d8800715 	stw	r2,28(sp)
  80fd5c:	18bffc1e 	bne	r3,r2,80fd50 <___vfprintf_internal_r+0x1ca8>
  80fd60:	003f8406 	br	80fb74 <___vfprintf_internal_r+0x1acc>
  80fd64:	d8814117 	ldw	r2,1284(sp)
  80fd68:	10c00007 	ldb	r3,0(r2)
  80fd6c:	00800c04 	movi	r2,48
  80fd70:	18805b26 	beq	r3,r2,80fee0 <___vfprintf_internal_r+0x1e38>
  80fd74:	d9000517 	ldw	r4,20(sp)
  80fd78:	9125883a 	add	r18,r18,r4
  80fd7c:	003f7506 	br	80fb54 <___vfprintf_internal_r+0x1aac>
  80fd80:	d9014c17 	ldw	r4,1328(sp)
  80fd84:	2080004c 	andi	r2,r4,1
  80fd88:	1005003a 	cmpeq	r2,r2,zero
  80fd8c:	103f6a26 	beq	r2,zero,80fb38 <___vfprintf_internal_r+0x1a90>
  80fd90:	d8800717 	ldw	r2,28(sp)
  80fd94:	003f7706 	br	80fb74 <___vfprintf_internal_r+0x1acc>
  80fd98:	d9c14515 	stw	r7,1300(sp)
  80fd9c:	38004d16 	blt	r7,zero,80fed4 <___vfprintf_internal_r+0x1e2c>
  80fda0:	dc814715 	stw	r18,1308(sp)
  80fda4:	d8014615 	stw	zero,1304(sp)
  80fda8:	003b6106 	br	80eb30 <___vfprintf_internal_r+0xa88>
  80fdac:	d9014f17 	ldw	r4,1340(sp)
  80fdb0:	d8800504 	addi	r2,sp,20
  80fdb4:	d8800115 	stw	r2,4(sp)
  80fdb8:	d8c00604 	addi	r3,sp,24
  80fdbc:	d8800704 	addi	r2,sp,28
  80fdc0:	800b883a 	mov	r5,r16
  80fdc4:	880d883a 	mov	r6,r17
  80fdc8:	01c000c4 	movi	r7,3
  80fdcc:	d8c00215 	stw	r3,8(sp)
  80fdd0:	d8800315 	stw	r2,12(sp)
  80fdd4:	dcc00015 	stw	r19,0(sp)
  80fdd8:	9829883a 	mov	r20,r19
  80fddc:	08102cc0 	call	8102cc <_dtoa_r>
  80fde0:	d8814115 	stw	r2,1284(sp)
  80fde4:	003f5106 	br	80fb2c <___vfprintf_internal_r+0x1a84>
  80fde8:	d8c14217 	ldw	r3,1288(sp)
  80fdec:	d9014317 	ldw	r4,1292(sp)
  80fdf0:	07000b44 	movi	fp,45
  80fdf4:	1821883a 	mov	r16,r3
  80fdf8:	2460003c 	xorhi	r17,r4,32768
  80fdfc:	003f3106 	br	80fac4 <___vfprintf_internal_r+0x1a1c>
  80fe00:	9d000044 	addi	r20,r19,1
  80fe04:	003f3906 	br	80faec <___vfprintf_internal_r+0x1a44>
  80fe08:	983f251e 	bne	r19,zero,80faa0 <___vfprintf_internal_r+0x19f8>
  80fe0c:	04c00044 	movi	r19,1
  80fe10:	003f2306 	br	80faa0 <___vfprintf_internal_r+0x19f8>
  80fe14:	04c00184 	movi	r19,6
  80fe18:	003f2106 	br	80faa0 <___vfprintf_internal_r+0x19f8>
  80fe1c:	d8014515 	stw	zero,1300(sp)
  80fe20:	003eee06 	br	80f9dc <___vfprintf_internal_r+0x1934>
  80fe24:	200f883a 	mov	r7,r4
  80fe28:	0100370e 	bge	zero,r4,80ff08 <___vfprintf_internal_r+0x1e60>
  80fe2c:	9800031e 	bne	r19,zero,80fe3c <___vfprintf_internal_r+0x1d94>
  80fe30:	d9814c17 	ldw	r6,1328(sp)
  80fe34:	3080004c 	andi	r2,r6,1
  80fe38:	103fb726 	beq	r2,zero,80fd18 <___vfprintf_internal_r+0x1c70>
  80fe3c:	20800044 	addi	r2,r4,1
  80fe40:	98a7883a 	add	r19,r19,r2
  80fe44:	dcc14515 	stw	r19,1300(sp)
  80fe48:	980f883a 	mov	r7,r19
  80fe4c:	983f800e 	bge	r19,zero,80fc50 <___vfprintf_internal_r+0x1ba8>
  80fe50:	003fb306 	br	80fd20 <___vfprintf_internal_r+0x1c78>
  80fe54:	d9814d17 	ldw	r6,1332(sp)
  80fe58:	31bfff84 	addi	r6,r6,-2
  80fe5c:	d9814d15 	stw	r6,1332(sp)
  80fe60:	003f4c06 	br	80fb94 <___vfprintf_internal_r+0x1aec>
  80fe64:	0100180e 	bge	zero,r4,80fec8 <___vfprintf_internal_r+0x1e20>
  80fe68:	00800044 	movi	r2,1
  80fe6c:	1485883a 	add	r2,r2,r18
  80fe70:	d8814515 	stw	r2,1300(sp)
  80fe74:	100f883a 	mov	r7,r2
  80fe78:	103f750e 	bge	r2,zero,80fc50 <___vfprintf_internal_r+0x1ba8>
  80fe7c:	003fa806 	br	80fd20 <___vfprintf_internal_r+0x1c78>
  80fe80:	80c00c04 	addi	r3,r16,48
  80fe84:	00800c04 	movi	r2,48
  80fe88:	d8c008c5 	stb	r3,35(sp)
  80fe8c:	d9800804 	addi	r6,sp,32
  80fe90:	d8c00904 	addi	r3,sp,36
  80fe94:	d8800885 	stb	r2,34(sp)
  80fe98:	003f6506 	br	80fc30 <___vfprintf_internal_r+0x1b88>
  80fe9c:	d9014c17 	ldw	r4,1328(sp)
  80fea0:	2084703a 	and	r2,r4,r2
  80fea4:	103f9c26 	beq	r2,zero,80fd18 <___vfprintf_internal_r+0x1c70>
  80fea8:	003f6606 	br	80fc44 <___vfprintf_internal_r+0x1b9c>
  80feac:	d9800804 	addi	r6,sp,32
  80feb0:	d8c00884 	addi	r3,sp,34
  80feb4:	003f5e06 	br	80fc30 <___vfprintf_internal_r+0x1b88>
  80feb8:	00800b44 	movi	r2,45
  80febc:	0121c83a 	sub	r16,zero,r4
  80fec0:	d8800845 	stb	r2,33(sp)
  80fec4:	003f3d06 	br	80fbbc <___vfprintf_internal_r+0x1b14>
  80fec8:	00800084 	movi	r2,2
  80fecc:	1105c83a 	sub	r2,r2,r4
  80fed0:	003fe606 	br	80fe6c <___vfprintf_internal_r+0x1dc4>
  80fed4:	d8014515 	stw	zero,1300(sp)
  80fed8:	dc814715 	stw	r18,1308(sp)
  80fedc:	003fb106 	br	80fda4 <___vfprintf_internal_r+0x1cfc>
  80fee0:	000d883a 	mov	r6,zero
  80fee4:	000f883a 	mov	r7,zero
  80fee8:	8009883a 	mov	r4,r16
  80feec:	880b883a 	mov	r5,r17
  80fef0:	08158380 	call	815838 <__nedf2>
  80fef4:	103f9f26 	beq	r2,zero,80fd74 <___vfprintf_internal_r+0x1ccc>
  80fef8:	00800044 	movi	r2,1
  80fefc:	1509c83a 	sub	r4,r2,r20
  80ff00:	d9000515 	stw	r4,20(sp)
  80ff04:	003f9b06 	br	80fd74 <___vfprintf_internal_r+0x1ccc>
  80ff08:	98000d1e 	bne	r19,zero,80ff40 <___vfprintf_internal_r+0x1e98>
  80ff0c:	d8c14c17 	ldw	r3,1328(sp)
  80ff10:	1880004c 	andi	r2,r3,1
  80ff14:	10000a1e 	bne	r2,zero,80ff40 <___vfprintf_internal_r+0x1e98>
  80ff18:	01000044 	movi	r4,1
  80ff1c:	200f883a 	mov	r7,r4
  80ff20:	d9014515 	stw	r4,1300(sp)
  80ff24:	003f4a06 	br	80fc50 <___vfprintf_internal_r+0x1ba8>
  80ff28:	3cc00017 	ldw	r19,0(r7)
  80ff2c:	39c00104 	addi	r7,r7,4
  80ff30:	983d0e0e 	bge	r19,zero,80f36c <___vfprintf_internal_r+0x12c4>
  80ff34:	b8c00007 	ldb	r3,0(r23)
  80ff38:	04ffffc4 	movi	r19,-1
  80ff3c:	0038d906 	br	80e2a4 <___vfprintf_internal_r+0x1fc>
  80ff40:	9cc00084 	addi	r19,r19,2
  80ff44:	dcc14515 	stw	r19,1300(sp)
  80ff48:	980f883a 	mov	r7,r19
  80ff4c:	983f400e 	bge	r19,zero,80fc50 <___vfprintf_internal_r+0x1ba8>
  80ff50:	003f7306 	br	80fd20 <___vfprintf_internal_r+0x1c78>

0080ff54 <__vfprintf_internal>:
  80ff54:	008020b4 	movhi	r2,130
  80ff58:	1093eb04 	addi	r2,r2,20396
  80ff5c:	2013883a 	mov	r9,r4
  80ff60:	11000017 	ldw	r4,0(r2)
  80ff64:	2805883a 	mov	r2,r5
  80ff68:	300f883a 	mov	r7,r6
  80ff6c:	480b883a 	mov	r5,r9
  80ff70:	100d883a 	mov	r6,r2
  80ff74:	080e0a81 	jmpi	80e0a8 <___vfprintf_internal_r>

0080ff78 <__swsetup_r>:
  80ff78:	008020b4 	movhi	r2,130
  80ff7c:	1093eb04 	addi	r2,r2,20396
  80ff80:	10c00017 	ldw	r3,0(r2)
  80ff84:	defffd04 	addi	sp,sp,-12
  80ff88:	dc400115 	stw	r17,4(sp)
  80ff8c:	dc000015 	stw	r16,0(sp)
  80ff90:	dfc00215 	stw	ra,8(sp)
  80ff94:	2023883a 	mov	r17,r4
  80ff98:	2821883a 	mov	r16,r5
  80ff9c:	18000226 	beq	r3,zero,80ffa8 <__swsetup_r+0x30>
  80ffa0:	18800e17 	ldw	r2,56(r3)
  80ffa4:	10001f26 	beq	r2,zero,810024 <__swsetup_r+0xac>
  80ffa8:	8100030b 	ldhu	r4,12(r16)
  80ffac:	2080020c 	andi	r2,r4,8
  80ffb0:	10002826 	beq	r2,zero,810054 <__swsetup_r+0xdc>
  80ffb4:	81400417 	ldw	r5,16(r16)
  80ffb8:	28001d26 	beq	r5,zero,810030 <__swsetup_r+0xb8>
  80ffbc:	2080004c 	andi	r2,r4,1
  80ffc0:	1005003a 	cmpeq	r2,r2,zero
  80ffc4:	10000b26 	beq	r2,zero,80fff4 <__swsetup_r+0x7c>
  80ffc8:	2080008c 	andi	r2,r4,2
  80ffcc:	10001226 	beq	r2,zero,810018 <__swsetup_r+0xa0>
  80ffd0:	0005883a 	mov	r2,zero
  80ffd4:	80800215 	stw	r2,8(r16)
  80ffd8:	28000b26 	beq	r5,zero,810008 <__swsetup_r+0x90>
  80ffdc:	0005883a 	mov	r2,zero
  80ffe0:	dfc00217 	ldw	ra,8(sp)
  80ffe4:	dc400117 	ldw	r17,4(sp)
  80ffe8:	dc000017 	ldw	r16,0(sp)
  80ffec:	dec00304 	addi	sp,sp,12
  80fff0:	f800283a 	ret
  80fff4:	80800517 	ldw	r2,20(r16)
  80fff8:	80000215 	stw	zero,8(r16)
  80fffc:	0085c83a 	sub	r2,zero,r2
  810000:	80800615 	stw	r2,24(r16)
  810004:	283ff51e 	bne	r5,zero,80ffdc <__swsetup_r+0x64>
  810008:	2080200c 	andi	r2,r4,128
  81000c:	103ff326 	beq	r2,zero,80ffdc <__swsetup_r+0x64>
  810010:	00bfffc4 	movi	r2,-1
  810014:	003ff206 	br	80ffe0 <__swsetup_r+0x68>
  810018:	80800517 	ldw	r2,20(r16)
  81001c:	80800215 	stw	r2,8(r16)
  810020:	003fed06 	br	80ffd8 <__swsetup_r+0x60>
  810024:	1809883a 	mov	r4,r3
  810028:	0811b180 	call	811b18 <__sinit>
  81002c:	003fde06 	br	80ffa8 <__swsetup_r+0x30>
  810030:	20c0a00c 	andi	r3,r4,640
  810034:	00808004 	movi	r2,512
  810038:	18bfe026 	beq	r3,r2,80ffbc <__swsetup_r+0x44>
  81003c:	8809883a 	mov	r4,r17
  810040:	800b883a 	mov	r5,r16
  810044:	08128900 	call	812890 <__smakebuf_r>
  810048:	8100030b 	ldhu	r4,12(r16)
  81004c:	81400417 	ldw	r5,16(r16)
  810050:	003fda06 	br	80ffbc <__swsetup_r+0x44>
  810054:	2080040c 	andi	r2,r4,16
  810058:	103fed26 	beq	r2,zero,810010 <__swsetup_r+0x98>
  81005c:	2080010c 	andi	r2,r4,4
  810060:	10001226 	beq	r2,zero,8100ac <__swsetup_r+0x134>
  810064:	81400c17 	ldw	r5,48(r16)
  810068:	28000526 	beq	r5,zero,810080 <__swsetup_r+0x108>
  81006c:	80801004 	addi	r2,r16,64
  810070:	28800226 	beq	r5,r2,81007c <__swsetup_r+0x104>
  810074:	8809883a 	mov	r4,r17
  810078:	0811e9c0 	call	811e9c <_free_r>
  81007c:	80000c15 	stw	zero,48(r16)
  810080:	8080030b 	ldhu	r2,12(r16)
  810084:	81400417 	ldw	r5,16(r16)
  810088:	80000115 	stw	zero,4(r16)
  81008c:	10bff6cc 	andi	r2,r2,65499
  810090:	8080030d 	sth	r2,12(r16)
  810094:	81400015 	stw	r5,0(r16)
  810098:	8080030b 	ldhu	r2,12(r16)
  81009c:	10800214 	ori	r2,r2,8
  8100a0:	113fffcc 	andi	r4,r2,65535
  8100a4:	8080030d 	sth	r2,12(r16)
  8100a8:	003fc306 	br	80ffb8 <__swsetup_r+0x40>
  8100ac:	81400417 	ldw	r5,16(r16)
  8100b0:	003ff906 	br	810098 <__swsetup_r+0x120>

008100b4 <quorem>:
  8100b4:	28c00417 	ldw	r3,16(r5)
  8100b8:	20800417 	ldw	r2,16(r4)
  8100bc:	defff604 	addi	sp,sp,-40
  8100c0:	ddc00715 	stw	r23,28(sp)
  8100c4:	dd400515 	stw	r21,20(sp)
  8100c8:	dfc00915 	stw	ra,36(sp)
  8100cc:	df000815 	stw	fp,32(sp)
  8100d0:	dd800615 	stw	r22,24(sp)
  8100d4:	dd000415 	stw	r20,16(sp)
  8100d8:	dcc00315 	stw	r19,12(sp)
  8100dc:	dc800215 	stw	r18,8(sp)
  8100e0:	dc400115 	stw	r17,4(sp)
  8100e4:	dc000015 	stw	r16,0(sp)
  8100e8:	202f883a 	mov	r23,r4
  8100ec:	282b883a 	mov	r21,r5
  8100f0:	10c07416 	blt	r2,r3,8102c4 <quorem+0x210>
  8100f4:	1c7fffc4 	addi	r17,r3,-1
  8100f8:	8c45883a 	add	r2,r17,r17
  8100fc:	1085883a 	add	r2,r2,r2
  810100:	2c000504 	addi	r16,r5,20
  810104:	24c00504 	addi	r19,r4,20
  810108:	14ed883a 	add	r22,r2,r19
  81010c:	80a5883a 	add	r18,r16,r2
  810110:	b7000017 	ldw	fp,0(r22)
  810114:	91400017 	ldw	r5,0(r18)
  810118:	e009883a 	mov	r4,fp
  81011c:	29400044 	addi	r5,r5,1
  810120:	080cfd80 	call	80cfd8 <__udivsi3>
  810124:	1029883a 	mov	r20,r2
  810128:	10003c1e 	bne	r2,zero,81021c <quorem+0x168>
  81012c:	a80b883a 	mov	r5,r21
  810130:	b809883a 	mov	r4,r23
  810134:	0812ddc0 	call	812ddc <__mcmp>
  810138:	10002b16 	blt	r2,zero,8101e8 <quorem+0x134>
  81013c:	a5000044 	addi	r20,r20,1
  810140:	980f883a 	mov	r7,r19
  810144:	0011883a 	mov	r8,zero
  810148:	0009883a 	mov	r4,zero
  81014c:	81400017 	ldw	r5,0(r16)
  810150:	38c00017 	ldw	r3,0(r7)
  810154:	84000104 	addi	r16,r16,4
  810158:	28bfffcc 	andi	r2,r5,65535
  81015c:	2085883a 	add	r2,r4,r2
  810160:	11bfffcc 	andi	r6,r2,65535
  810164:	193fffcc 	andi	r4,r3,65535
  810168:	1004d43a 	srli	r2,r2,16
  81016c:	280ad43a 	srli	r5,r5,16
  810170:	2189c83a 	sub	r4,r4,r6
  810174:	2209883a 	add	r4,r4,r8
  810178:	1806d43a 	srli	r3,r3,16
  81017c:	288b883a 	add	r5,r5,r2
  810180:	200dd43a 	srai	r6,r4,16
  810184:	28bfffcc 	andi	r2,r5,65535
  810188:	1887c83a 	sub	r3,r3,r2
  81018c:	1987883a 	add	r3,r3,r6
  810190:	3900000d 	sth	r4,0(r7)
  810194:	38c0008d 	sth	r3,2(r7)
  810198:	2808d43a 	srli	r4,r5,16
  81019c:	39c00104 	addi	r7,r7,4
  8101a0:	1811d43a 	srai	r8,r3,16
  8101a4:	943fe92e 	bgeu	r18,r16,81014c <quorem+0x98>
  8101a8:	8c45883a 	add	r2,r17,r17
  8101ac:	1085883a 	add	r2,r2,r2
  8101b0:	9885883a 	add	r2,r19,r2
  8101b4:	10c00017 	ldw	r3,0(r2)
  8101b8:	18000b1e 	bne	r3,zero,8101e8 <quorem+0x134>
  8101bc:	113fff04 	addi	r4,r2,-4
  8101c0:	9900082e 	bgeu	r19,r4,8101e4 <quorem+0x130>
  8101c4:	10bfff17 	ldw	r2,-4(r2)
  8101c8:	10000326 	beq	r2,zero,8101d8 <quorem+0x124>
  8101cc:	00000506 	br	8101e4 <quorem+0x130>
  8101d0:	20800017 	ldw	r2,0(r4)
  8101d4:	1000031e 	bne	r2,zero,8101e4 <quorem+0x130>
  8101d8:	213fff04 	addi	r4,r4,-4
  8101dc:	8c7fffc4 	addi	r17,r17,-1
  8101e0:	993ffb36 	bltu	r19,r4,8101d0 <quorem+0x11c>
  8101e4:	bc400415 	stw	r17,16(r23)
  8101e8:	a005883a 	mov	r2,r20
  8101ec:	dfc00917 	ldw	ra,36(sp)
  8101f0:	df000817 	ldw	fp,32(sp)
  8101f4:	ddc00717 	ldw	r23,28(sp)
  8101f8:	dd800617 	ldw	r22,24(sp)
  8101fc:	dd400517 	ldw	r21,20(sp)
  810200:	dd000417 	ldw	r20,16(sp)
  810204:	dcc00317 	ldw	r19,12(sp)
  810208:	dc800217 	ldw	r18,8(sp)
  81020c:	dc400117 	ldw	r17,4(sp)
  810210:	dc000017 	ldw	r16,0(sp)
  810214:	dec00a04 	addi	sp,sp,40
  810218:	f800283a 	ret
  81021c:	980f883a 	mov	r7,r19
  810220:	8011883a 	mov	r8,r16
  810224:	0013883a 	mov	r9,zero
  810228:	000d883a 	mov	r6,zero
  81022c:	40c00017 	ldw	r3,0(r8)
  810230:	39000017 	ldw	r4,0(r7)
  810234:	42000104 	addi	r8,r8,4
  810238:	18bfffcc 	andi	r2,r3,65535
  81023c:	a085383a 	mul	r2,r20,r2
  810240:	1806d43a 	srli	r3,r3,16
  810244:	217fffcc 	andi	r5,r4,65535
  810248:	3085883a 	add	r2,r6,r2
  81024c:	11bfffcc 	andi	r6,r2,65535
  810250:	a0c7383a 	mul	r3,r20,r3
  810254:	1004d43a 	srli	r2,r2,16
  810258:	298bc83a 	sub	r5,r5,r6
  81025c:	2a4b883a 	add	r5,r5,r9
  810260:	2008d43a 	srli	r4,r4,16
  810264:	1887883a 	add	r3,r3,r2
  810268:	280dd43a 	srai	r6,r5,16
  81026c:	18bfffcc 	andi	r2,r3,65535
  810270:	2089c83a 	sub	r4,r4,r2
  810274:	2189883a 	add	r4,r4,r6
  810278:	3900008d 	sth	r4,2(r7)
  81027c:	3940000d 	sth	r5,0(r7)
  810280:	180cd43a 	srli	r6,r3,16
  810284:	39c00104 	addi	r7,r7,4
  810288:	2013d43a 	srai	r9,r4,16
  81028c:	923fe72e 	bgeu	r18,r8,81022c <quorem+0x178>
  810290:	e03fa61e 	bne	fp,zero,81012c <quorem+0x78>
  810294:	b0ffff04 	addi	r3,r22,-4
  810298:	98c0082e 	bgeu	r19,r3,8102bc <quorem+0x208>
  81029c:	b0bfff17 	ldw	r2,-4(r22)
  8102a0:	10000326 	beq	r2,zero,8102b0 <quorem+0x1fc>
  8102a4:	00000506 	br	8102bc <quorem+0x208>
  8102a8:	18800017 	ldw	r2,0(r3)
  8102ac:	1000031e 	bne	r2,zero,8102bc <quorem+0x208>
  8102b0:	18ffff04 	addi	r3,r3,-4
  8102b4:	8c7fffc4 	addi	r17,r17,-1
  8102b8:	98fffb36 	bltu	r19,r3,8102a8 <quorem+0x1f4>
  8102bc:	bc400415 	stw	r17,16(r23)
  8102c0:	003f9a06 	br	81012c <quorem+0x78>
  8102c4:	0005883a 	mov	r2,zero
  8102c8:	003fc806 	br	8101ec <quorem+0x138>

008102cc <_dtoa_r>:
  8102cc:	22001017 	ldw	r8,64(r4)
  8102d0:	deffda04 	addi	sp,sp,-152
  8102d4:	dd402115 	stw	r21,132(sp)
  8102d8:	dd002015 	stw	r20,128(sp)
  8102dc:	dc801e15 	stw	r18,120(sp)
  8102e0:	dc401d15 	stw	r17,116(sp)
  8102e4:	dfc02515 	stw	ra,148(sp)
  8102e8:	df002415 	stw	fp,144(sp)
  8102ec:	ddc02315 	stw	r23,140(sp)
  8102f0:	dd802215 	stw	r22,136(sp)
  8102f4:	dcc01f15 	stw	r19,124(sp)
  8102f8:	dc001c15 	stw	r16,112(sp)
  8102fc:	d9001615 	stw	r4,88(sp)
  810300:	3023883a 	mov	r17,r6
  810304:	2829883a 	mov	r20,r5
  810308:	d9c01715 	stw	r7,92(sp)
  81030c:	dc802817 	ldw	r18,160(sp)
  810310:	302b883a 	mov	r21,r6
  810314:	40000a26 	beq	r8,zero,810340 <_dtoa_r+0x74>
  810318:	20801117 	ldw	r2,68(r4)
  81031c:	400b883a 	mov	r5,r8
  810320:	40800115 	stw	r2,4(r8)
  810324:	20c01117 	ldw	r3,68(r4)
  810328:	00800044 	movi	r2,1
  81032c:	10c4983a 	sll	r2,r2,r3
  810330:	40800215 	stw	r2,8(r8)
  810334:	0812c800 	call	812c80 <_Bfree>
  810338:	d8c01617 	ldw	r3,88(sp)
  81033c:	18001015 	stw	zero,64(r3)
  810340:	8800a316 	blt	r17,zero,8105d0 <_dtoa_r+0x304>
  810344:	90000015 	stw	zero,0(r18)
  810348:	a8dffc2c 	andhi	r3,r21,32752
  81034c:	009ffc34 	movhi	r2,32752
  810350:	18809126 	beq	r3,r2,810598 <_dtoa_r+0x2cc>
  810354:	000d883a 	mov	r6,zero
  810358:	000f883a 	mov	r7,zero
  81035c:	a009883a 	mov	r4,r20
  810360:	a80b883a 	mov	r5,r21
  810364:	dd001215 	stw	r20,72(sp)
  810368:	dd401315 	stw	r21,76(sp)
  81036c:	08158380 	call	815838 <__nedf2>
  810370:	1000171e 	bne	r2,zero,8103d0 <_dtoa_r+0x104>
  810374:	d9802717 	ldw	r6,156(sp)
  810378:	00800044 	movi	r2,1
  81037c:	30800015 	stw	r2,0(r6)
  810380:	d8802917 	ldw	r2,164(sp)
  810384:	10029b26 	beq	r2,zero,810df4 <_dtoa_r+0xb28>
  810388:	d9002917 	ldw	r4,164(sp)
  81038c:	008020b4 	movhi	r2,130
  810390:	108c6a44 	addi	r2,r2,12713
  810394:	10ffffc4 	addi	r3,r2,-1
  810398:	20800015 	stw	r2,0(r4)
  81039c:	1805883a 	mov	r2,r3
  8103a0:	dfc02517 	ldw	ra,148(sp)
  8103a4:	df002417 	ldw	fp,144(sp)
  8103a8:	ddc02317 	ldw	r23,140(sp)
  8103ac:	dd802217 	ldw	r22,136(sp)
  8103b0:	dd402117 	ldw	r21,132(sp)
  8103b4:	dd002017 	ldw	r20,128(sp)
  8103b8:	dcc01f17 	ldw	r19,124(sp)
  8103bc:	dc801e17 	ldw	r18,120(sp)
  8103c0:	dc401d17 	ldw	r17,116(sp)
  8103c4:	dc001c17 	ldw	r16,112(sp)
  8103c8:	dec02604 	addi	sp,sp,152
  8103cc:	f800283a 	ret
  8103d0:	d9001617 	ldw	r4,88(sp)
  8103d4:	d9401217 	ldw	r5,72(sp)
  8103d8:	d8800104 	addi	r2,sp,4
  8103dc:	a80d883a 	mov	r6,r21
  8103e0:	d9c00204 	addi	r7,sp,8
  8103e4:	d8800015 	stw	r2,0(sp)
  8103e8:	08132bc0 	call	8132bc <__d2b>
  8103ec:	d8800715 	stw	r2,28(sp)
  8103f0:	a804d53a 	srli	r2,r21,20
  8103f4:	1101ffcc 	andi	r4,r2,2047
  8103f8:	20008626 	beq	r4,zero,810614 <_dtoa_r+0x348>
  8103fc:	d8c01217 	ldw	r3,72(sp)
  810400:	00800434 	movhi	r2,16
  810404:	10bfffc4 	addi	r2,r2,-1
  810408:	ddc00117 	ldw	r23,4(sp)
  81040c:	a884703a 	and	r2,r21,r2
  810410:	1811883a 	mov	r8,r3
  810414:	124ffc34 	orhi	r9,r2,16368
  810418:	25bf0044 	addi	r22,r4,-1023
  81041c:	d8000815 	stw	zero,32(sp)
  810420:	0005883a 	mov	r2,zero
  810424:	00cffe34 	movhi	r3,16376
  810428:	480b883a 	mov	r5,r9
  81042c:	4009883a 	mov	r4,r8
  810430:	180f883a 	mov	r7,r3
  810434:	100d883a 	mov	r6,r2
  810438:	080c4240 	call	80c424 <__subdf3>
  81043c:	0218dbf4 	movhi	r8,25455
  810440:	4210d844 	addi	r8,r8,17249
  810444:	024ff4f4 	movhi	r9,16339
  810448:	4a61e9c4 	addi	r9,r9,-30809
  81044c:	480f883a 	mov	r7,r9
  810450:	400d883a 	mov	r6,r8
  810454:	180b883a 	mov	r5,r3
  810458:	1009883a 	mov	r4,r2
  81045c:	080c5180 	call	80c518 <__muldf3>
  810460:	0222d874 	movhi	r8,35681
  810464:	42322cc4 	addi	r8,r8,-14157
  810468:	024ff1f4 	movhi	r9,16327
  81046c:	4a628a04 	addi	r9,r9,-30168
  810470:	480f883a 	mov	r7,r9
  810474:	400d883a 	mov	r6,r8
  810478:	180b883a 	mov	r5,r3
  81047c:	1009883a 	mov	r4,r2
  810480:	080c4a40 	call	80c4a4 <__adddf3>
  810484:	b009883a 	mov	r4,r22
  810488:	1021883a 	mov	r16,r2
  81048c:	1823883a 	mov	r17,r3
  810490:	080cccc0 	call	80cccc <__floatsidf>
  810494:	021427f4 	movhi	r8,20639
  810498:	421e7ec4 	addi	r8,r8,31227
  81049c:	024ff4f4 	movhi	r9,16339
  8104a0:	4a5104c4 	addi	r9,r9,17427
  8104a4:	480f883a 	mov	r7,r9
  8104a8:	400d883a 	mov	r6,r8
  8104ac:	180b883a 	mov	r5,r3
  8104b0:	1009883a 	mov	r4,r2
  8104b4:	080c5180 	call	80c518 <__muldf3>
  8104b8:	180f883a 	mov	r7,r3
  8104bc:	880b883a 	mov	r5,r17
  8104c0:	100d883a 	mov	r6,r2
  8104c4:	8009883a 	mov	r4,r16
  8104c8:	080c4a40 	call	80c4a4 <__adddf3>
  8104cc:	1009883a 	mov	r4,r2
  8104d0:	180b883a 	mov	r5,r3
  8104d4:	1021883a 	mov	r16,r2
  8104d8:	1823883a 	mov	r17,r3
  8104dc:	080cdc40 	call	80cdc4 <__fixdfsi>
  8104e0:	000d883a 	mov	r6,zero
  8104e4:	000f883a 	mov	r7,zero
  8104e8:	8009883a 	mov	r4,r16
  8104ec:	880b883a 	mov	r5,r17
  8104f0:	d8800d15 	stw	r2,52(sp)
  8104f4:	08158c00 	call	8158c0 <__ltdf2>
  8104f8:	10031716 	blt	r2,zero,811158 <_dtoa_r+0xe8c>
  8104fc:	d8c00d17 	ldw	r3,52(sp)
  810500:	00800584 	movi	r2,22
  810504:	10c1482e 	bgeu	r2,r3,810a28 <_dtoa_r+0x75c>
  810508:	01000044 	movi	r4,1
  81050c:	d9000c15 	stw	r4,48(sp)
  810510:	bd85c83a 	sub	r2,r23,r22
  810514:	11bfffc4 	addi	r6,r2,-1
  810518:	30030b16 	blt	r6,zero,811148 <_dtoa_r+0xe7c>
  81051c:	d9800a15 	stw	r6,40(sp)
  810520:	d8001115 	stw	zero,68(sp)
  810524:	d8c00d17 	ldw	r3,52(sp)
  810528:	1802ff16 	blt	r3,zero,811128 <_dtoa_r+0xe5c>
  81052c:	d9000a17 	ldw	r4,40(sp)
  810530:	d8c00915 	stw	r3,36(sp)
  810534:	d8001015 	stw	zero,64(sp)
  810538:	20c9883a 	add	r4,r4,r3
  81053c:	d9000a15 	stw	r4,40(sp)
  810540:	d9001717 	ldw	r4,92(sp)
  810544:	00800244 	movi	r2,9
  810548:	11004636 	bltu	r2,r4,810664 <_dtoa_r+0x398>
  81054c:	00800144 	movi	r2,5
  810550:	11020416 	blt	r2,r4,810d64 <_dtoa_r+0xa98>
  810554:	04400044 	movi	r17,1
  810558:	d8c01717 	ldw	r3,92(sp)
  81055c:	00800144 	movi	r2,5
  810560:	10c1ed36 	bltu	r2,r3,810d18 <_dtoa_r+0xa4c>
  810564:	18c5883a 	add	r2,r3,r3
  810568:	1085883a 	add	r2,r2,r2
  81056c:	00c02074 	movhi	r3,129
  810570:	18c16004 	addi	r3,r3,1408
  810574:	10c5883a 	add	r2,r2,r3
  810578:	11000017 	ldw	r4,0(r2)
  81057c:	2000683a 	jmp	r4
  810580:	0081066c 	andhi	r2,zero,1049
  810584:	0081066c 	andhi	r2,zero,1049
  810588:	0081106c 	andhi	r2,zero,1089
  81058c:	00811044 	movi	r2,1089
  810590:	00811088 	cmpgei	r2,zero,1090
  810594:	00811094 	movui	r2,1090
  810598:	d9002717 	ldw	r4,156(sp)
  81059c:	0089c3c4 	movi	r2,9999
  8105a0:	20800015 	stw	r2,0(r4)
  8105a4:	a0001026 	beq	r20,zero,8105e8 <_dtoa_r+0x31c>
  8105a8:	00c020b4 	movhi	r3,130
  8105ac:	18cc7604 	addi	r3,r3,12760
  8105b0:	d9802917 	ldw	r6,164(sp)
  8105b4:	303f7926 	beq	r6,zero,81039c <_dtoa_r+0xd0>
  8105b8:	188000c7 	ldb	r2,3(r3)
  8105bc:	190000c4 	addi	r4,r3,3
  8105c0:	1000101e 	bne	r2,zero,810604 <_dtoa_r+0x338>
  8105c4:	d8802917 	ldw	r2,164(sp)
  8105c8:	11000015 	stw	r4,0(r2)
  8105cc:	003f7306 	br	81039c <_dtoa_r+0xd0>
  8105d0:	00a00034 	movhi	r2,32768
  8105d4:	10bfffc4 	addi	r2,r2,-1
  8105d8:	00c00044 	movi	r3,1
  8105dc:	88aa703a 	and	r21,r17,r2
  8105e0:	90c00015 	stw	r3,0(r18)
  8105e4:	003f5806 	br	810348 <_dtoa_r+0x7c>
  8105e8:	00800434 	movhi	r2,16
  8105ec:	10bfffc4 	addi	r2,r2,-1
  8105f0:	a884703a 	and	r2,r21,r2
  8105f4:	103fec1e 	bne	r2,zero,8105a8 <_dtoa_r+0x2dc>
  8105f8:	00c020b4 	movhi	r3,130
  8105fc:	18cc7304 	addi	r3,r3,12748
  810600:	003feb06 	br	8105b0 <_dtoa_r+0x2e4>
  810604:	d8802917 	ldw	r2,164(sp)
  810608:	19000204 	addi	r4,r3,8
  81060c:	11000015 	stw	r4,0(r2)
  810610:	003f6206 	br	81039c <_dtoa_r+0xd0>
  810614:	ddc00117 	ldw	r23,4(sp)
  810618:	d8800217 	ldw	r2,8(sp)
  81061c:	01000804 	movi	r4,32
  810620:	b8c10c84 	addi	r3,r23,1074
  810624:	18a3883a 	add	r17,r3,r2
  810628:	2441b80e 	bge	r4,r17,810d0c <_dtoa_r+0xa40>
  81062c:	00c01004 	movi	r3,64
  810630:	1c47c83a 	sub	r3,r3,r17
  810634:	88bff804 	addi	r2,r17,-32
  810638:	a8c6983a 	sll	r3,r21,r3
  81063c:	a084d83a 	srl	r2,r20,r2
  810640:	1888b03a 	or	r4,r3,r2
  810644:	08159480 	call	815948 <__floatunsidf>
  810648:	1011883a 	mov	r8,r2
  81064c:	00bf8434 	movhi	r2,65040
  810650:	01000044 	movi	r4,1
  810654:	10d3883a 	add	r9,r2,r3
  810658:	8dbef344 	addi	r22,r17,-1075
  81065c:	d9000815 	stw	r4,32(sp)
  810660:	003f6f06 	br	810420 <_dtoa_r+0x154>
  810664:	d8001715 	stw	zero,92(sp)
  810668:	04400044 	movi	r17,1
  81066c:	00bfffc4 	movi	r2,-1
  810670:	00c00044 	movi	r3,1
  810674:	d8800e15 	stw	r2,56(sp)
  810678:	d8002615 	stw	zero,152(sp)
  81067c:	d8800f15 	stw	r2,60(sp)
  810680:	d8c00b15 	stw	r3,44(sp)
  810684:	1021883a 	mov	r16,r2
  810688:	d8801617 	ldw	r2,88(sp)
  81068c:	10001115 	stw	zero,68(r2)
  810690:	d8801617 	ldw	r2,88(sp)
  810694:	11401117 	ldw	r5,68(r2)
  810698:	1009883a 	mov	r4,r2
  81069c:	08132000 	call	813200 <_Balloc>
  8106a0:	d8c01617 	ldw	r3,88(sp)
  8106a4:	d8800515 	stw	r2,20(sp)
  8106a8:	18801015 	stw	r2,64(r3)
  8106ac:	00800384 	movi	r2,14
  8106b0:	14006836 	bltu	r2,r16,810854 <_dtoa_r+0x588>
  8106b4:	8805003a 	cmpeq	r2,r17,zero
  8106b8:	1000661e 	bne	r2,zero,810854 <_dtoa_r+0x588>
  8106bc:	d9000d17 	ldw	r4,52(sp)
  8106c0:	0102300e 	bge	zero,r4,810f84 <_dtoa_r+0xcb8>
  8106c4:	208003cc 	andi	r2,r4,15
  8106c8:	100490fa 	slli	r2,r2,3
  8106cc:	2025d13a 	srai	r18,r4,4
  8106d0:	00c020b4 	movhi	r3,130
  8106d4:	18cc8804 	addi	r3,r3,12832
  8106d8:	10c5883a 	add	r2,r2,r3
  8106dc:	90c0040c 	andi	r3,r18,16
  8106e0:	14000017 	ldw	r16,0(r2)
  8106e4:	14400117 	ldw	r17,4(r2)
  8106e8:	18036a1e 	bne	r3,zero,811494 <_dtoa_r+0x11c8>
  8106ec:	05800084 	movi	r22,2
  8106f0:	90001026 	beq	r18,zero,810734 <_dtoa_r+0x468>
  8106f4:	04c020b4 	movhi	r19,130
  8106f8:	9cccba04 	addi	r19,r19,13032
  8106fc:	9080004c 	andi	r2,r18,1
  810700:	1005003a 	cmpeq	r2,r2,zero
  810704:	1000081e 	bne	r2,zero,810728 <_dtoa_r+0x45c>
  810708:	99800017 	ldw	r6,0(r19)
  81070c:	99c00117 	ldw	r7,4(r19)
  810710:	880b883a 	mov	r5,r17
  810714:	8009883a 	mov	r4,r16
  810718:	080c5180 	call	80c518 <__muldf3>
  81071c:	1021883a 	mov	r16,r2
  810720:	b5800044 	addi	r22,r22,1
  810724:	1823883a 	mov	r17,r3
  810728:	9025d07a 	srai	r18,r18,1
  81072c:	9cc00204 	addi	r19,r19,8
  810730:	903ff21e 	bne	r18,zero,8106fc <_dtoa_r+0x430>
  810734:	a80b883a 	mov	r5,r21
  810738:	a009883a 	mov	r4,r20
  81073c:	880f883a 	mov	r7,r17
  810740:	800d883a 	mov	r6,r16
  810744:	080c8dc0 	call	80c8dc <__divdf3>
  810748:	1029883a 	mov	r20,r2
  81074c:	182b883a 	mov	r21,r3
  810750:	d8c00c17 	ldw	r3,48(sp)
  810754:	1805003a 	cmpeq	r2,r3,zero
  810758:	1000081e 	bne	r2,zero,81077c <_dtoa_r+0x4b0>
  81075c:	0005883a 	mov	r2,zero
  810760:	00cffc34 	movhi	r3,16368
  810764:	180f883a 	mov	r7,r3
  810768:	a009883a 	mov	r4,r20
  81076c:	a80b883a 	mov	r5,r21
  810770:	100d883a 	mov	r6,r2
  810774:	08158c00 	call	8158c0 <__ltdf2>
  810778:	1003fe16 	blt	r2,zero,811774 <_dtoa_r+0x14a8>
  81077c:	b009883a 	mov	r4,r22
  810780:	080cccc0 	call	80cccc <__floatsidf>
  810784:	180b883a 	mov	r5,r3
  810788:	1009883a 	mov	r4,r2
  81078c:	a00d883a 	mov	r6,r20
  810790:	a80f883a 	mov	r7,r21
  810794:	080c5180 	call	80c518 <__muldf3>
  810798:	0011883a 	mov	r8,zero
  81079c:	02500734 	movhi	r9,16412
  8107a0:	1009883a 	mov	r4,r2
  8107a4:	180b883a 	mov	r5,r3
  8107a8:	480f883a 	mov	r7,r9
  8107ac:	400d883a 	mov	r6,r8
  8107b0:	080c4a40 	call	80c4a4 <__adddf3>
  8107b4:	d9000f17 	ldw	r4,60(sp)
  8107b8:	102d883a 	mov	r22,r2
  8107bc:	00bf3034 	movhi	r2,64704
  8107c0:	18b9883a 	add	fp,r3,r2
  8107c4:	e02f883a 	mov	r23,fp
  8107c8:	20028f1e 	bne	r4,zero,811208 <_dtoa_r+0xf3c>
  8107cc:	0005883a 	mov	r2,zero
  8107d0:	00d00534 	movhi	r3,16404
  8107d4:	a009883a 	mov	r4,r20
  8107d8:	a80b883a 	mov	r5,r21
  8107dc:	180f883a 	mov	r7,r3
  8107e0:	100d883a 	mov	r6,r2
  8107e4:	080c4240 	call	80c424 <__subdf3>
  8107e8:	1009883a 	mov	r4,r2
  8107ec:	e00f883a 	mov	r7,fp
  8107f0:	180b883a 	mov	r5,r3
  8107f4:	b00d883a 	mov	r6,r22
  8107f8:	1025883a 	mov	r18,r2
  8107fc:	1827883a 	mov	r19,r3
  810800:	080cbbc0 	call	80cbbc <__gtdf2>
  810804:	00834f16 	blt	zero,r2,811544 <_dtoa_r+0x1278>
  810808:	e0e0003c 	xorhi	r3,fp,32768
  81080c:	9009883a 	mov	r4,r18
  810810:	980b883a 	mov	r5,r19
  810814:	180f883a 	mov	r7,r3
  810818:	b00d883a 	mov	r6,r22
  81081c:	08158c00 	call	8158c0 <__ltdf2>
  810820:	1000080e 	bge	r2,zero,810844 <_dtoa_r+0x578>
  810824:	0027883a 	mov	r19,zero
  810828:	0025883a 	mov	r18,zero
  81082c:	d8802617 	ldw	r2,152(sp)
  810830:	df000517 	ldw	fp,20(sp)
  810834:	d8000615 	stw	zero,24(sp)
  810838:	0084303a 	nor	r2,zero,r2
  81083c:	d8800d15 	stw	r2,52(sp)
  810840:	00019b06 	br	810eb0 <_dtoa_r+0xbe4>
  810844:	d9801217 	ldw	r6,72(sp)
  810848:	d8801317 	ldw	r2,76(sp)
  81084c:	3029883a 	mov	r20,r6
  810850:	102b883a 	mov	r21,r2
  810854:	d8c00217 	ldw	r3,8(sp)
  810858:	18008516 	blt	r3,zero,810a70 <_dtoa_r+0x7a4>
  81085c:	d9000d17 	ldw	r4,52(sp)
  810860:	00800384 	movi	r2,14
  810864:	11008216 	blt	r2,r4,810a70 <_dtoa_r+0x7a4>
  810868:	200490fa 	slli	r2,r4,3
  81086c:	d9802617 	ldw	r6,152(sp)
  810870:	00c020b4 	movhi	r3,130
  810874:	18cc8804 	addi	r3,r3,12832
  810878:	10c5883a 	add	r2,r2,r3
  81087c:	14800017 	ldw	r18,0(r2)
  810880:	14c00117 	ldw	r19,4(r2)
  810884:	30031e16 	blt	r6,zero,811500 <_dtoa_r+0x1234>
  810888:	d9000517 	ldw	r4,20(sp)
  81088c:	d8c00f17 	ldw	r3,60(sp)
  810890:	a823883a 	mov	r17,r21
  810894:	a021883a 	mov	r16,r20
  810898:	192b883a 	add	r21,r3,r4
  81089c:	2039883a 	mov	fp,r4
  8108a0:	00000f06 	br	8108e0 <_dtoa_r+0x614>
  8108a4:	0005883a 	mov	r2,zero
  8108a8:	00d00934 	movhi	r3,16420
  8108ac:	5009883a 	mov	r4,r10
  8108b0:	580b883a 	mov	r5,r11
  8108b4:	180f883a 	mov	r7,r3
  8108b8:	100d883a 	mov	r6,r2
  8108bc:	080c5180 	call	80c518 <__muldf3>
  8108c0:	180b883a 	mov	r5,r3
  8108c4:	000d883a 	mov	r6,zero
  8108c8:	000f883a 	mov	r7,zero
  8108cc:	1009883a 	mov	r4,r2
  8108d0:	1021883a 	mov	r16,r2
  8108d4:	1823883a 	mov	r17,r3
  8108d8:	08158380 	call	815838 <__nedf2>
  8108dc:	10004526 	beq	r2,zero,8109f4 <_dtoa_r+0x728>
  8108e0:	900d883a 	mov	r6,r18
  8108e4:	980f883a 	mov	r7,r19
  8108e8:	8009883a 	mov	r4,r16
  8108ec:	880b883a 	mov	r5,r17
  8108f0:	080c8dc0 	call	80c8dc <__divdf3>
  8108f4:	180b883a 	mov	r5,r3
  8108f8:	1009883a 	mov	r4,r2
  8108fc:	080cdc40 	call	80cdc4 <__fixdfsi>
  810900:	1009883a 	mov	r4,r2
  810904:	1029883a 	mov	r20,r2
  810908:	080cccc0 	call	80cccc <__floatsidf>
  81090c:	180f883a 	mov	r7,r3
  810910:	9009883a 	mov	r4,r18
  810914:	980b883a 	mov	r5,r19
  810918:	100d883a 	mov	r6,r2
  81091c:	080c5180 	call	80c518 <__muldf3>
  810920:	180f883a 	mov	r7,r3
  810924:	880b883a 	mov	r5,r17
  810928:	8009883a 	mov	r4,r16
  81092c:	100d883a 	mov	r6,r2
  810930:	080c4240 	call	80c424 <__subdf3>
  810934:	1015883a 	mov	r10,r2
  810938:	a0800c04 	addi	r2,r20,48
  81093c:	e0800005 	stb	r2,0(fp)
  810940:	e7000044 	addi	fp,fp,1
  810944:	1817883a 	mov	r11,r3
  810948:	e57fd61e 	bne	fp,r21,8108a4 <_dtoa_r+0x5d8>
  81094c:	500d883a 	mov	r6,r10
  810950:	180f883a 	mov	r7,r3
  810954:	5009883a 	mov	r4,r10
  810958:	180b883a 	mov	r5,r3
  81095c:	080c4a40 	call	80c4a4 <__adddf3>
  810960:	100d883a 	mov	r6,r2
  810964:	9009883a 	mov	r4,r18
  810968:	980b883a 	mov	r5,r19
  81096c:	180f883a 	mov	r7,r3
  810970:	1021883a 	mov	r16,r2
  810974:	1823883a 	mov	r17,r3
  810978:	08158c00 	call	8158c0 <__ltdf2>
  81097c:	10000816 	blt	r2,zero,8109a0 <_dtoa_r+0x6d4>
  810980:	980b883a 	mov	r5,r19
  810984:	800d883a 	mov	r6,r16
  810988:	880f883a 	mov	r7,r17
  81098c:	9009883a 	mov	r4,r18
  810990:	080cb340 	call	80cb34 <__eqdf2>
  810994:	1000171e 	bne	r2,zero,8109f4 <_dtoa_r+0x728>
  810998:	a080004c 	andi	r2,r20,1
  81099c:	10001526 	beq	r2,zero,8109f4 <_dtoa_r+0x728>
  8109a0:	d8800d17 	ldw	r2,52(sp)
  8109a4:	d8800415 	stw	r2,16(sp)
  8109a8:	e009883a 	mov	r4,fp
  8109ac:	213fffc4 	addi	r4,r4,-1
  8109b0:	20c00007 	ldb	r3,0(r4)
  8109b4:	00800e44 	movi	r2,57
  8109b8:	1880081e 	bne	r3,r2,8109dc <_dtoa_r+0x710>
  8109bc:	d8800517 	ldw	r2,20(sp)
  8109c0:	113ffa1e 	bne	r2,r4,8109ac <_dtoa_r+0x6e0>
  8109c4:	d8c00417 	ldw	r3,16(sp)
  8109c8:	d9800517 	ldw	r6,20(sp)
  8109cc:	00800c04 	movi	r2,48
  8109d0:	18c00044 	addi	r3,r3,1
  8109d4:	d8c00415 	stw	r3,16(sp)
  8109d8:	30800005 	stb	r2,0(r6)
  8109dc:	20800003 	ldbu	r2,0(r4)
  8109e0:	d8c00417 	ldw	r3,16(sp)
  8109e4:	27000044 	addi	fp,r4,1
  8109e8:	10800044 	addi	r2,r2,1
  8109ec:	d8c00d15 	stw	r3,52(sp)
  8109f0:	20800005 	stb	r2,0(r4)
  8109f4:	d9001617 	ldw	r4,88(sp)
  8109f8:	d9400717 	ldw	r5,28(sp)
  8109fc:	0812c800 	call	812c80 <_Bfree>
  810a00:	e0000005 	stb	zero,0(fp)
  810a04:	d9800d17 	ldw	r6,52(sp)
  810a08:	d8c02717 	ldw	r3,156(sp)
  810a0c:	d9002917 	ldw	r4,164(sp)
  810a10:	30800044 	addi	r2,r6,1
  810a14:	18800015 	stw	r2,0(r3)
  810a18:	20029c26 	beq	r4,zero,81148c <_dtoa_r+0x11c0>
  810a1c:	d8c00517 	ldw	r3,20(sp)
  810a20:	27000015 	stw	fp,0(r4)
  810a24:	003e5d06 	br	81039c <_dtoa_r+0xd0>
  810a28:	d9800d17 	ldw	r6,52(sp)
  810a2c:	00c020b4 	movhi	r3,130
  810a30:	18cc8804 	addi	r3,r3,12832
  810a34:	d9001217 	ldw	r4,72(sp)
  810a38:	300490fa 	slli	r2,r6,3
  810a3c:	d9401317 	ldw	r5,76(sp)
  810a40:	10c5883a 	add	r2,r2,r3
  810a44:	12000017 	ldw	r8,0(r2)
  810a48:	12400117 	ldw	r9,4(r2)
  810a4c:	400d883a 	mov	r6,r8
  810a50:	480f883a 	mov	r7,r9
  810a54:	08158c00 	call	8158c0 <__ltdf2>
  810a58:	1000030e 	bge	r2,zero,810a68 <_dtoa_r+0x79c>
  810a5c:	d8800d17 	ldw	r2,52(sp)
  810a60:	10bfffc4 	addi	r2,r2,-1
  810a64:	d8800d15 	stw	r2,52(sp)
  810a68:	d8000c15 	stw	zero,48(sp)
  810a6c:	003ea806 	br	810510 <_dtoa_r+0x244>
  810a70:	d9000b17 	ldw	r4,44(sp)
  810a74:	202cc03a 	cmpne	r22,r4,zero
  810a78:	b000c71e 	bne	r22,zero,810d98 <_dtoa_r+0xacc>
  810a7c:	dc001117 	ldw	r16,68(sp)
  810a80:	dc801017 	ldw	r18,64(sp)
  810a84:	0027883a 	mov	r19,zero
  810a88:	04000b0e 	bge	zero,r16,810ab8 <_dtoa_r+0x7ec>
  810a8c:	d8c00a17 	ldw	r3,40(sp)
  810a90:	00c0090e 	bge	zero,r3,810ab8 <_dtoa_r+0x7ec>
  810a94:	8005883a 	mov	r2,r16
  810a98:	1c011316 	blt	r3,r16,810ee8 <_dtoa_r+0xc1c>
  810a9c:	d9000a17 	ldw	r4,40(sp)
  810aa0:	d9801117 	ldw	r6,68(sp)
  810aa4:	80a1c83a 	sub	r16,r16,r2
  810aa8:	2089c83a 	sub	r4,r4,r2
  810aac:	308dc83a 	sub	r6,r6,r2
  810ab0:	d9000a15 	stw	r4,40(sp)
  810ab4:	d9801115 	stw	r6,68(sp)
  810ab8:	d8801017 	ldw	r2,64(sp)
  810abc:	0080150e 	bge	zero,r2,810b14 <_dtoa_r+0x848>
  810ac0:	d8c00b17 	ldw	r3,44(sp)
  810ac4:	1805003a 	cmpeq	r2,r3,zero
  810ac8:	1001c91e 	bne	r2,zero,8111f0 <_dtoa_r+0xf24>
  810acc:	04800e0e 	bge	zero,r18,810b08 <_dtoa_r+0x83c>
  810ad0:	d9001617 	ldw	r4,88(sp)
  810ad4:	980b883a 	mov	r5,r19
  810ad8:	900d883a 	mov	r6,r18
  810adc:	0813a340 	call	813a34 <__pow5mult>
  810ae0:	d9001617 	ldw	r4,88(sp)
  810ae4:	d9800717 	ldw	r6,28(sp)
  810ae8:	100b883a 	mov	r5,r2
  810aec:	1027883a 	mov	r19,r2
  810af0:	08137100 	call	813710 <__multiply>
  810af4:	d9001617 	ldw	r4,88(sp)
  810af8:	d9400717 	ldw	r5,28(sp)
  810afc:	1023883a 	mov	r17,r2
  810b00:	0812c800 	call	812c80 <_Bfree>
  810b04:	dc400715 	stw	r17,28(sp)
  810b08:	d9001017 	ldw	r4,64(sp)
  810b0c:	248dc83a 	sub	r6,r4,r18
  810b10:	30010e1e 	bne	r6,zero,810f4c <_dtoa_r+0xc80>
  810b14:	d9001617 	ldw	r4,88(sp)
  810b18:	04400044 	movi	r17,1
  810b1c:	880b883a 	mov	r5,r17
  810b20:	08138f80 	call	8138f8 <__i2b>
  810b24:	d9800917 	ldw	r6,36(sp)
  810b28:	1025883a 	mov	r18,r2
  810b2c:	0180040e 	bge	zero,r6,810b40 <_dtoa_r+0x874>
  810b30:	d9001617 	ldw	r4,88(sp)
  810b34:	100b883a 	mov	r5,r2
  810b38:	0813a340 	call	813a34 <__pow5mult>
  810b3c:	1025883a 	mov	r18,r2
  810b40:	d8801717 	ldw	r2,92(sp)
  810b44:	8880f30e 	bge	r17,r2,810f14 <_dtoa_r+0xc48>
  810b48:	0023883a 	mov	r17,zero
  810b4c:	d9800917 	ldw	r6,36(sp)
  810b50:	30019e1e 	bne	r6,zero,8111cc <_dtoa_r+0xf00>
  810b54:	00c00044 	movi	r3,1
  810b58:	d9000a17 	ldw	r4,40(sp)
  810b5c:	20c5883a 	add	r2,r4,r3
  810b60:	10c007cc 	andi	r3,r2,31
  810b64:	1800841e 	bne	r3,zero,810d78 <_dtoa_r+0xaac>
  810b68:	00800704 	movi	r2,28
  810b6c:	d9000a17 	ldw	r4,40(sp)
  810b70:	d9801117 	ldw	r6,68(sp)
  810b74:	80a1883a 	add	r16,r16,r2
  810b78:	2089883a 	add	r4,r4,r2
  810b7c:	308d883a 	add	r6,r6,r2
  810b80:	d9000a15 	stw	r4,40(sp)
  810b84:	d9801115 	stw	r6,68(sp)
  810b88:	d8801117 	ldw	r2,68(sp)
  810b8c:	0080050e 	bge	zero,r2,810ba4 <_dtoa_r+0x8d8>
  810b90:	d9400717 	ldw	r5,28(sp)
  810b94:	d9001617 	ldw	r4,88(sp)
  810b98:	100d883a 	mov	r6,r2
  810b9c:	08135c40 	call	8135c4 <__lshift>
  810ba0:	d8800715 	stw	r2,28(sp)
  810ba4:	d8c00a17 	ldw	r3,40(sp)
  810ba8:	00c0050e 	bge	zero,r3,810bc0 <_dtoa_r+0x8f4>
  810bac:	d9001617 	ldw	r4,88(sp)
  810bb0:	900b883a 	mov	r5,r18
  810bb4:	180d883a 	mov	r6,r3
  810bb8:	08135c40 	call	8135c4 <__lshift>
  810bbc:	1025883a 	mov	r18,r2
  810bc0:	d9000c17 	ldw	r4,48(sp)
  810bc4:	2005003a 	cmpeq	r2,r4,zero
  810bc8:	10016f26 	beq	r2,zero,811188 <_dtoa_r+0xebc>
  810bcc:	d9000f17 	ldw	r4,60(sp)
  810bd0:	0102170e 	bge	zero,r4,811430 <_dtoa_r+0x1164>
  810bd4:	d9800b17 	ldw	r6,44(sp)
  810bd8:	3005003a 	cmpeq	r2,r6,zero
  810bdc:	1000881e 	bne	r2,zero,810e00 <_dtoa_r+0xb34>
  810be0:	0400050e 	bge	zero,r16,810bf8 <_dtoa_r+0x92c>
  810be4:	d9001617 	ldw	r4,88(sp)
  810be8:	980b883a 	mov	r5,r19
  810bec:	800d883a 	mov	r6,r16
  810bf0:	08135c40 	call	8135c4 <__lshift>
  810bf4:	1027883a 	mov	r19,r2
  810bf8:	8804c03a 	cmpne	r2,r17,zero
  810bfc:	1002541e 	bne	r2,zero,811550 <_dtoa_r+0x1284>
  810c00:	980b883a 	mov	r5,r19
  810c04:	dd800517 	ldw	r22,20(sp)
  810c08:	dcc00615 	stw	r19,24(sp)
  810c0c:	a700004c 	andi	fp,r20,1
  810c10:	2827883a 	mov	r19,r5
  810c14:	d9000717 	ldw	r4,28(sp)
  810c18:	900b883a 	mov	r5,r18
  810c1c:	08100b40 	call	8100b4 <quorem>
  810c20:	d9000717 	ldw	r4,28(sp)
  810c24:	d9400617 	ldw	r5,24(sp)
  810c28:	1023883a 	mov	r17,r2
  810c2c:	8dc00c04 	addi	r23,r17,48
  810c30:	0812ddc0 	call	812ddc <__mcmp>
  810c34:	d9001617 	ldw	r4,88(sp)
  810c38:	900b883a 	mov	r5,r18
  810c3c:	980d883a 	mov	r6,r19
  810c40:	1029883a 	mov	r20,r2
  810c44:	08134380 	call	813438 <__mdiff>
  810c48:	102b883a 	mov	r21,r2
  810c4c:	10800317 	ldw	r2,12(r2)
  810c50:	1001281e 	bne	r2,zero,8110f4 <_dtoa_r+0xe28>
  810c54:	d9000717 	ldw	r4,28(sp)
  810c58:	a80b883a 	mov	r5,r21
  810c5c:	0812ddc0 	call	812ddc <__mcmp>
  810c60:	d9001617 	ldw	r4,88(sp)
  810c64:	1021883a 	mov	r16,r2
  810c68:	a80b883a 	mov	r5,r21
  810c6c:	0812c800 	call	812c80 <_Bfree>
  810c70:	8000041e 	bne	r16,zero,810c84 <_dtoa_r+0x9b8>
  810c74:	d8801717 	ldw	r2,92(sp)
  810c78:	1000021e 	bne	r2,zero,810c84 <_dtoa_r+0x9b8>
  810c7c:	e004c03a 	cmpne	r2,fp,zero
  810c80:	10011726 	beq	r2,zero,8110e0 <_dtoa_r+0xe14>
  810c84:	a0010616 	blt	r20,zero,8110a0 <_dtoa_r+0xdd4>
  810c88:	a000041e 	bne	r20,zero,810c9c <_dtoa_r+0x9d0>
  810c8c:	d8c01717 	ldw	r3,92(sp)
  810c90:	1800021e 	bne	r3,zero,810c9c <_dtoa_r+0x9d0>
  810c94:	e004c03a 	cmpne	r2,fp,zero
  810c98:	10010126 	beq	r2,zero,8110a0 <_dtoa_r+0xdd4>
  810c9c:	04023d16 	blt	zero,r16,811594 <_dtoa_r+0x12c8>
  810ca0:	b5c00005 	stb	r23,0(r22)
  810ca4:	d9800517 	ldw	r6,20(sp)
  810ca8:	d9000f17 	ldw	r4,60(sp)
  810cac:	b5800044 	addi	r22,r22,1
  810cb0:	3105883a 	add	r2,r6,r4
  810cb4:	b0806526 	beq	r22,r2,810e4c <_dtoa_r+0xb80>
  810cb8:	d9400717 	ldw	r5,28(sp)
  810cbc:	d9001617 	ldw	r4,88(sp)
  810cc0:	01800284 	movi	r6,10
  810cc4:	000f883a 	mov	r7,zero
  810cc8:	08139340 	call	813934 <__multadd>
  810ccc:	d8800715 	stw	r2,28(sp)
  810cd0:	d8800617 	ldw	r2,24(sp)
  810cd4:	14c10c26 	beq	r2,r19,811108 <_dtoa_r+0xe3c>
  810cd8:	d9400617 	ldw	r5,24(sp)
  810cdc:	d9001617 	ldw	r4,88(sp)
  810ce0:	01800284 	movi	r6,10
  810ce4:	000f883a 	mov	r7,zero
  810ce8:	08139340 	call	813934 <__multadd>
  810cec:	d9001617 	ldw	r4,88(sp)
  810cf0:	980b883a 	mov	r5,r19
  810cf4:	01800284 	movi	r6,10
  810cf8:	000f883a 	mov	r7,zero
  810cfc:	d8800615 	stw	r2,24(sp)
  810d00:	08139340 	call	813934 <__multadd>
  810d04:	1027883a 	mov	r19,r2
  810d08:	003fc206 	br	810c14 <_dtoa_r+0x948>
  810d0c:	2445c83a 	sub	r2,r4,r17
  810d10:	a088983a 	sll	r4,r20,r2
  810d14:	003e4b06 	br	810644 <_dtoa_r+0x378>
  810d18:	01bfffc4 	movi	r6,-1
  810d1c:	00800044 	movi	r2,1
  810d20:	d9800e15 	stw	r6,56(sp)
  810d24:	d9800f15 	stw	r6,60(sp)
  810d28:	d8800b15 	stw	r2,44(sp)
  810d2c:	d8c01617 	ldw	r3,88(sp)
  810d30:	008005c4 	movi	r2,23
  810d34:	18001115 	stw	zero,68(r3)
  810d38:	1580082e 	bgeu	r2,r22,810d5c <_dtoa_r+0xa90>
  810d3c:	00c00104 	movi	r3,4
  810d40:	0009883a 	mov	r4,zero
  810d44:	18c7883a 	add	r3,r3,r3
  810d48:	18800504 	addi	r2,r3,20
  810d4c:	21000044 	addi	r4,r4,1
  810d50:	b0bffc2e 	bgeu	r22,r2,810d44 <_dtoa_r+0xa78>
  810d54:	d9801617 	ldw	r6,88(sp)
  810d58:	31001115 	stw	r4,68(r6)
  810d5c:	dc000f17 	ldw	r16,60(sp)
  810d60:	003e4b06 	br	810690 <_dtoa_r+0x3c4>
  810d64:	d9801717 	ldw	r6,92(sp)
  810d68:	0023883a 	mov	r17,zero
  810d6c:	31bfff04 	addi	r6,r6,-4
  810d70:	d9801715 	stw	r6,92(sp)
  810d74:	003df806 	br	810558 <_dtoa_r+0x28c>
  810d78:	00800804 	movi	r2,32
  810d7c:	10c9c83a 	sub	r4,r2,r3
  810d80:	00c00104 	movi	r3,4
  810d84:	19005a16 	blt	r3,r4,810ef0 <_dtoa_r+0xc24>
  810d88:	008000c4 	movi	r2,3
  810d8c:	113f7e16 	blt	r2,r4,810b88 <_dtoa_r+0x8bc>
  810d90:	20800704 	addi	r2,r4,28
  810d94:	003f7506 	br	810b6c <_dtoa_r+0x8a0>
  810d98:	d9801717 	ldw	r6,92(sp)
  810d9c:	00800044 	movi	r2,1
  810da0:	1180a10e 	bge	r2,r6,811028 <_dtoa_r+0xd5c>
  810da4:	d9800f17 	ldw	r6,60(sp)
  810da8:	d8c01017 	ldw	r3,64(sp)
  810dac:	30bfffc4 	addi	r2,r6,-1
  810db0:	1881c616 	blt	r3,r2,8114cc <_dtoa_r+0x1200>
  810db4:	18a5c83a 	sub	r18,r3,r2
  810db8:	d8800f17 	ldw	r2,60(sp)
  810dbc:	10026216 	blt	r2,zero,811748 <_dtoa_r+0x147c>
  810dc0:	dc001117 	ldw	r16,68(sp)
  810dc4:	1007883a 	mov	r3,r2
  810dc8:	d9800a17 	ldw	r6,40(sp)
  810dcc:	d8801117 	ldw	r2,68(sp)
  810dd0:	d9001617 	ldw	r4,88(sp)
  810dd4:	30cd883a 	add	r6,r6,r3
  810dd8:	10c5883a 	add	r2,r2,r3
  810ddc:	01400044 	movi	r5,1
  810de0:	d9800a15 	stw	r6,40(sp)
  810de4:	d8801115 	stw	r2,68(sp)
  810de8:	08138f80 	call	8138f8 <__i2b>
  810dec:	1027883a 	mov	r19,r2
  810df0:	003f2506 	br	810a88 <_dtoa_r+0x7bc>
  810df4:	00c020b4 	movhi	r3,130
  810df8:	18cc6a04 	addi	r3,r3,12712
  810dfc:	003d6706 	br	81039c <_dtoa_r+0xd0>
  810e00:	dd800517 	ldw	r22,20(sp)
  810e04:	04000044 	movi	r16,1
  810e08:	00000706 	br	810e28 <_dtoa_r+0xb5c>
  810e0c:	d9400717 	ldw	r5,28(sp)
  810e10:	d9001617 	ldw	r4,88(sp)
  810e14:	01800284 	movi	r6,10
  810e18:	000f883a 	mov	r7,zero
  810e1c:	08139340 	call	813934 <__multadd>
  810e20:	d8800715 	stw	r2,28(sp)
  810e24:	84000044 	addi	r16,r16,1
  810e28:	d9000717 	ldw	r4,28(sp)
  810e2c:	900b883a 	mov	r5,r18
  810e30:	08100b40 	call	8100b4 <quorem>
  810e34:	15c00c04 	addi	r23,r2,48
  810e38:	b5c00005 	stb	r23,0(r22)
  810e3c:	d8c00f17 	ldw	r3,60(sp)
  810e40:	b5800044 	addi	r22,r22,1
  810e44:	80fff116 	blt	r16,r3,810e0c <_dtoa_r+0xb40>
  810e48:	d8000615 	stw	zero,24(sp)
  810e4c:	d9400717 	ldw	r5,28(sp)
  810e50:	d9001617 	ldw	r4,88(sp)
  810e54:	01800044 	movi	r6,1
  810e58:	08135c40 	call	8135c4 <__lshift>
  810e5c:	1009883a 	mov	r4,r2
  810e60:	900b883a 	mov	r5,r18
  810e64:	d8800715 	stw	r2,28(sp)
  810e68:	0812ddc0 	call	812ddc <__mcmp>
  810e6c:	00803c0e 	bge	zero,r2,810f60 <_dtoa_r+0xc94>
  810e70:	b009883a 	mov	r4,r22
  810e74:	213fffc4 	addi	r4,r4,-1
  810e78:	21400003 	ldbu	r5,0(r4)
  810e7c:	00800e44 	movi	r2,57
  810e80:	28c03fcc 	andi	r3,r5,255
  810e84:	18c0201c 	xori	r3,r3,128
  810e88:	18ffe004 	addi	r3,r3,-128
  810e8c:	1881981e 	bne	r3,r2,8114f0 <_dtoa_r+0x1224>
  810e90:	d9800517 	ldw	r6,20(sp)
  810e94:	21bff71e 	bne	r4,r6,810e74 <_dtoa_r+0xba8>
  810e98:	d8800d17 	ldw	r2,52(sp)
  810e9c:	37000044 	addi	fp,r6,1
  810ea0:	10800044 	addi	r2,r2,1
  810ea4:	d8800d15 	stw	r2,52(sp)
  810ea8:	00800c44 	movi	r2,49
  810eac:	30800005 	stb	r2,0(r6)
  810eb0:	d9001617 	ldw	r4,88(sp)
  810eb4:	900b883a 	mov	r5,r18
  810eb8:	0812c800 	call	812c80 <_Bfree>
  810ebc:	983ecd26 	beq	r19,zero,8109f4 <_dtoa_r+0x728>
  810ec0:	d8c00617 	ldw	r3,24(sp)
  810ec4:	18000426 	beq	r3,zero,810ed8 <_dtoa_r+0xc0c>
  810ec8:	1cc00326 	beq	r3,r19,810ed8 <_dtoa_r+0xc0c>
  810ecc:	d9001617 	ldw	r4,88(sp)
  810ed0:	180b883a 	mov	r5,r3
  810ed4:	0812c800 	call	812c80 <_Bfree>
  810ed8:	d9001617 	ldw	r4,88(sp)
  810edc:	980b883a 	mov	r5,r19
  810ee0:	0812c800 	call	812c80 <_Bfree>
  810ee4:	003ec306 	br	8109f4 <_dtoa_r+0x728>
  810ee8:	1805883a 	mov	r2,r3
  810eec:	003eeb06 	br	810a9c <_dtoa_r+0x7d0>
  810ef0:	d9800a17 	ldw	r6,40(sp)
  810ef4:	d8c01117 	ldw	r3,68(sp)
  810ef8:	20bfff04 	addi	r2,r4,-4
  810efc:	308d883a 	add	r6,r6,r2
  810f00:	1887883a 	add	r3,r3,r2
  810f04:	80a1883a 	add	r16,r16,r2
  810f08:	d9800a15 	stw	r6,40(sp)
  810f0c:	d8c01115 	stw	r3,68(sp)
  810f10:	003f1d06 	br	810b88 <_dtoa_r+0x8bc>
  810f14:	a03f0c1e 	bne	r20,zero,810b48 <_dtoa_r+0x87c>
  810f18:	00800434 	movhi	r2,16
  810f1c:	10bfffc4 	addi	r2,r2,-1
  810f20:	a884703a 	and	r2,r21,r2
  810f24:	103f081e 	bne	r2,zero,810b48 <_dtoa_r+0x87c>
  810f28:	a89ffc2c 	andhi	r2,r21,32752
  810f2c:	103f0626 	beq	r2,zero,810b48 <_dtoa_r+0x87c>
  810f30:	d8c01117 	ldw	r3,68(sp)
  810f34:	d9000a17 	ldw	r4,40(sp)
  810f38:	18c00044 	addi	r3,r3,1
  810f3c:	21000044 	addi	r4,r4,1
  810f40:	d8c01115 	stw	r3,68(sp)
  810f44:	d9000a15 	stw	r4,40(sp)
  810f48:	003f0006 	br	810b4c <_dtoa_r+0x880>
  810f4c:	d9400717 	ldw	r5,28(sp)
  810f50:	d9001617 	ldw	r4,88(sp)
  810f54:	0813a340 	call	813a34 <__pow5mult>
  810f58:	d8800715 	stw	r2,28(sp)
  810f5c:	003eed06 	br	810b14 <_dtoa_r+0x848>
  810f60:	1000021e 	bne	r2,zero,810f6c <_dtoa_r+0xca0>
  810f64:	b880004c 	andi	r2,r23,1
  810f68:	103fc11e 	bne	r2,zero,810e70 <_dtoa_r+0xba4>
  810f6c:	b5bfffc4 	addi	r22,r22,-1
  810f70:	b0c00007 	ldb	r3,0(r22)
  810f74:	00800c04 	movi	r2,48
  810f78:	18bffc26 	beq	r3,r2,810f6c <_dtoa_r+0xca0>
  810f7c:	b7000044 	addi	fp,r22,1
  810f80:	003fcb06 	br	810eb0 <_dtoa_r+0xbe4>
  810f84:	d9800d17 	ldw	r6,52(sp)
  810f88:	018fc83a 	sub	r7,zero,r6
  810f8c:	3801f726 	beq	r7,zero,81176c <_dtoa_r+0x14a0>
  810f90:	398003cc 	andi	r6,r7,15
  810f94:	300c90fa 	slli	r6,r6,3
  810f98:	014020b4 	movhi	r5,130
  810f9c:	294c8804 	addi	r5,r5,12832
  810fa0:	d9001217 	ldw	r4,72(sp)
  810fa4:	314d883a 	add	r6,r6,r5
  810fa8:	30c00117 	ldw	r3,4(r6)
  810fac:	30800017 	ldw	r2,0(r6)
  810fb0:	d9401317 	ldw	r5,76(sp)
  810fb4:	3821d13a 	srai	r16,r7,4
  810fb8:	100d883a 	mov	r6,r2
  810fbc:	180f883a 	mov	r7,r3
  810fc0:	080c5180 	call	80c518 <__muldf3>
  810fc4:	1011883a 	mov	r8,r2
  810fc8:	1813883a 	mov	r9,r3
  810fcc:	1029883a 	mov	r20,r2
  810fd0:	182b883a 	mov	r21,r3
  810fd4:	8001e526 	beq	r16,zero,81176c <_dtoa_r+0x14a0>
  810fd8:	05800084 	movi	r22,2
  810fdc:	044020b4 	movhi	r17,130
  810fe0:	8c4cba04 	addi	r17,r17,13032
  810fe4:	8080004c 	andi	r2,r16,1
  810fe8:	1005003a 	cmpeq	r2,r2,zero
  810fec:	1000081e 	bne	r2,zero,811010 <_dtoa_r+0xd44>
  810ff0:	89800017 	ldw	r6,0(r17)
  810ff4:	89c00117 	ldw	r7,4(r17)
  810ff8:	480b883a 	mov	r5,r9
  810ffc:	4009883a 	mov	r4,r8
  811000:	080c5180 	call	80c518 <__muldf3>
  811004:	1011883a 	mov	r8,r2
  811008:	b5800044 	addi	r22,r22,1
  81100c:	1813883a 	mov	r9,r3
  811010:	8021d07a 	srai	r16,r16,1
  811014:	8c400204 	addi	r17,r17,8
  811018:	803ff21e 	bne	r16,zero,810fe4 <_dtoa_r+0xd18>
  81101c:	4029883a 	mov	r20,r8
  811020:	482b883a 	mov	r21,r9
  811024:	003dca06 	br	810750 <_dtoa_r+0x484>
  811028:	d9000817 	ldw	r4,32(sp)
  81102c:	2005003a 	cmpeq	r2,r4,zero
  811030:	1001f61e 	bne	r2,zero,81180c <_dtoa_r+0x1540>
  811034:	dc001117 	ldw	r16,68(sp)
  811038:	dc801017 	ldw	r18,64(sp)
  81103c:	18c10cc4 	addi	r3,r3,1075
  811040:	003f6106 	br	810dc8 <_dtoa_r+0xafc>
  811044:	d8000b15 	stw	zero,44(sp)
  811048:	d9802617 	ldw	r6,152(sp)
  81104c:	d8c00d17 	ldw	r3,52(sp)
  811050:	30800044 	addi	r2,r6,1
  811054:	18ad883a 	add	r22,r3,r2
  811058:	b13fffc4 	addi	r4,r22,-1
  81105c:	d9000e15 	stw	r4,56(sp)
  811060:	0581f60e 	bge	zero,r22,81183c <_dtoa_r+0x1570>
  811064:	dd800f15 	stw	r22,60(sp)
  811068:	003f3006 	br	810d2c <_dtoa_r+0xa60>
  81106c:	d8000b15 	stw	zero,44(sp)
  811070:	d9002617 	ldw	r4,152(sp)
  811074:	0101eb0e 	bge	zero,r4,811824 <_dtoa_r+0x1558>
  811078:	202d883a 	mov	r22,r4
  81107c:	d9000e15 	stw	r4,56(sp)
  811080:	d9000f15 	stw	r4,60(sp)
  811084:	003f2906 	br	810d2c <_dtoa_r+0xa60>
  811088:	01800044 	movi	r6,1
  81108c:	d9800b15 	stw	r6,44(sp)
  811090:	003ff706 	br	811070 <_dtoa_r+0xda4>
  811094:	01000044 	movi	r4,1
  811098:	d9000b15 	stw	r4,44(sp)
  81109c:	003fea06 	br	811048 <_dtoa_r+0xd7c>
  8110a0:	04000c0e 	bge	zero,r16,8110d4 <_dtoa_r+0xe08>
  8110a4:	d9400717 	ldw	r5,28(sp)
  8110a8:	d9001617 	ldw	r4,88(sp)
  8110ac:	01800044 	movi	r6,1
  8110b0:	08135c40 	call	8135c4 <__lshift>
  8110b4:	1009883a 	mov	r4,r2
  8110b8:	900b883a 	mov	r5,r18
  8110bc:	d8800715 	stw	r2,28(sp)
  8110c0:	0812ddc0 	call	812ddc <__mcmp>
  8110c4:	0081e00e 	bge	zero,r2,811848 <_dtoa_r+0x157c>
  8110c8:	bdc00044 	addi	r23,r23,1
  8110cc:	00800e84 	movi	r2,58
  8110d0:	b881a226 	beq	r23,r2,81175c <_dtoa_r+0x1490>
  8110d4:	b7000044 	addi	fp,r22,1
  8110d8:	b5c00005 	stb	r23,0(r22)
  8110dc:	003f7406 	br	810eb0 <_dtoa_r+0xbe4>
  8110e0:	00800e44 	movi	r2,57
  8110e4:	b8819d26 	beq	r23,r2,81175c <_dtoa_r+0x1490>
  8110e8:	053ffa0e 	bge	zero,r20,8110d4 <_dtoa_r+0xe08>
  8110ec:	8dc00c44 	addi	r23,r17,49
  8110f0:	003ff806 	br	8110d4 <_dtoa_r+0xe08>
  8110f4:	d9001617 	ldw	r4,88(sp)
  8110f8:	a80b883a 	mov	r5,r21
  8110fc:	04000044 	movi	r16,1
  811100:	0812c800 	call	812c80 <_Bfree>
  811104:	003edf06 	br	810c84 <_dtoa_r+0x9b8>
  811108:	d9001617 	ldw	r4,88(sp)
  81110c:	980b883a 	mov	r5,r19
  811110:	01800284 	movi	r6,10
  811114:	000f883a 	mov	r7,zero
  811118:	08139340 	call	813934 <__multadd>
  81111c:	1027883a 	mov	r19,r2
  811120:	d8800615 	stw	r2,24(sp)
  811124:	003ebb06 	br	810c14 <_dtoa_r+0x948>
  811128:	d9801117 	ldw	r6,68(sp)
  81112c:	d8800d17 	ldw	r2,52(sp)
  811130:	d8000915 	stw	zero,36(sp)
  811134:	308dc83a 	sub	r6,r6,r2
  811138:	0087c83a 	sub	r3,zero,r2
  81113c:	d9801115 	stw	r6,68(sp)
  811140:	d8c01015 	stw	r3,64(sp)
  811144:	003cfe06 	br	810540 <_dtoa_r+0x274>
  811148:	018dc83a 	sub	r6,zero,r6
  81114c:	d9801115 	stw	r6,68(sp)
  811150:	d8000a15 	stw	zero,40(sp)
  811154:	003cf306 	br	810524 <_dtoa_r+0x258>
  811158:	d9000d17 	ldw	r4,52(sp)
  81115c:	080cccc0 	call	80cccc <__floatsidf>
  811160:	880b883a 	mov	r5,r17
  811164:	8009883a 	mov	r4,r16
  811168:	180f883a 	mov	r7,r3
  81116c:	100d883a 	mov	r6,r2
  811170:	08158380 	call	815838 <__nedf2>
  811174:	103ce126 	beq	r2,zero,8104fc <_dtoa_r+0x230>
  811178:	d9800d17 	ldw	r6,52(sp)
  81117c:	31bfffc4 	addi	r6,r6,-1
  811180:	d9800d15 	stw	r6,52(sp)
  811184:	003cdd06 	br	8104fc <_dtoa_r+0x230>
  811188:	d9000717 	ldw	r4,28(sp)
  81118c:	900b883a 	mov	r5,r18
  811190:	0812ddc0 	call	812ddc <__mcmp>
  811194:	103e8d0e 	bge	r2,zero,810bcc <_dtoa_r+0x900>
  811198:	d9400717 	ldw	r5,28(sp)
  81119c:	d9001617 	ldw	r4,88(sp)
  8111a0:	01800284 	movi	r6,10
  8111a4:	000f883a 	mov	r7,zero
  8111a8:	08139340 	call	813934 <__multadd>
  8111ac:	d9800d17 	ldw	r6,52(sp)
  8111b0:	d8800715 	stw	r2,28(sp)
  8111b4:	31bfffc4 	addi	r6,r6,-1
  8111b8:	d9800d15 	stw	r6,52(sp)
  8111bc:	b001a71e 	bne	r22,zero,81185c <_dtoa_r+0x1590>
  8111c0:	d8800e17 	ldw	r2,56(sp)
  8111c4:	d8800f15 	stw	r2,60(sp)
  8111c8:	003e8006 	br	810bcc <_dtoa_r+0x900>
  8111cc:	90800417 	ldw	r2,16(r18)
  8111d0:	1085883a 	add	r2,r2,r2
  8111d4:	1085883a 	add	r2,r2,r2
  8111d8:	1485883a 	add	r2,r2,r18
  8111dc:	11000417 	ldw	r4,16(r2)
  8111e0:	0812ca80 	call	812ca8 <__hi0bits>
  8111e4:	00c00804 	movi	r3,32
  8111e8:	1887c83a 	sub	r3,r3,r2
  8111ec:	003e5a06 	br	810b58 <_dtoa_r+0x88c>
  8111f0:	d9400717 	ldw	r5,28(sp)
  8111f4:	d9801017 	ldw	r6,64(sp)
  8111f8:	d9001617 	ldw	r4,88(sp)
  8111fc:	0813a340 	call	813a34 <__pow5mult>
  811200:	d8800715 	stw	r2,28(sp)
  811204:	003e4306 	br	810b14 <_dtoa_r+0x848>
  811208:	d9800f17 	ldw	r6,60(sp)
  81120c:	d8800d17 	ldw	r2,52(sp)
  811210:	d9800315 	stw	r6,12(sp)
  811214:	d8800415 	stw	r2,16(sp)
  811218:	d8c00b17 	ldw	r3,44(sp)
  81121c:	1805003a 	cmpeq	r2,r3,zero
  811220:	1000e21e 	bne	r2,zero,8115ac <_dtoa_r+0x12e0>
  811224:	d9000317 	ldw	r4,12(sp)
  811228:	0005883a 	mov	r2,zero
  81122c:	00cff834 	movhi	r3,16352
  811230:	200c90fa 	slli	r6,r4,3
  811234:	010020b4 	movhi	r4,130
  811238:	210c8804 	addi	r4,r4,12832
  81123c:	180b883a 	mov	r5,r3
  811240:	310d883a 	add	r6,r6,r4
  811244:	327fff17 	ldw	r9,-4(r6)
  811248:	323ffe17 	ldw	r8,-8(r6)
  81124c:	1009883a 	mov	r4,r2
  811250:	480f883a 	mov	r7,r9
  811254:	400d883a 	mov	r6,r8
  811258:	080c8dc0 	call	80c8dc <__divdf3>
  81125c:	180b883a 	mov	r5,r3
  811260:	b00d883a 	mov	r6,r22
  811264:	b80f883a 	mov	r7,r23
  811268:	1009883a 	mov	r4,r2
  81126c:	080c4240 	call	80c424 <__subdf3>
  811270:	a80b883a 	mov	r5,r21
  811274:	a009883a 	mov	r4,r20
  811278:	d8c01915 	stw	r3,100(sp)
  81127c:	d8801815 	stw	r2,96(sp)
  811280:	080cdc40 	call	80cdc4 <__fixdfsi>
  811284:	1009883a 	mov	r4,r2
  811288:	1027883a 	mov	r19,r2
  81128c:	080cccc0 	call	80cccc <__floatsidf>
  811290:	a80b883a 	mov	r5,r21
  811294:	a009883a 	mov	r4,r20
  811298:	180f883a 	mov	r7,r3
  81129c:	100d883a 	mov	r6,r2
  8112a0:	080c4240 	call	80c424 <__subdf3>
  8112a4:	d9801817 	ldw	r6,96(sp)
  8112a8:	1823883a 	mov	r17,r3
  8112ac:	d8801415 	stw	r2,80(sp)
  8112b0:	302d883a 	mov	r22,r6
  8112b4:	d9800517 	ldw	r6,20(sp)
  8112b8:	9cc00c04 	addi	r19,r19,48
  8112bc:	dc401515 	stw	r17,84(sp)
  8112c0:	d8c01917 	ldw	r3,100(sp)
  8112c4:	34c00005 	stb	r19,0(r6)
  8112c8:	d8800517 	ldw	r2,20(sp)
  8112cc:	d9401917 	ldw	r5,100(sp)
  8112d0:	d9801417 	ldw	r6,80(sp)
  8112d4:	b009883a 	mov	r4,r22
  8112d8:	880f883a 	mov	r7,r17
  8112dc:	182f883a 	mov	r23,r3
  8112e0:	17000044 	addi	fp,r2,1
  8112e4:	080cbbc0 	call	80cbbc <__gtdf2>
  8112e8:	00804e16 	blt	zero,r2,811424 <_dtoa_r+0x1158>
  8112ec:	d9801417 	ldw	r6,80(sp)
  8112f0:	0005883a 	mov	r2,zero
  8112f4:	00cffc34 	movhi	r3,16368
  8112f8:	180b883a 	mov	r5,r3
  8112fc:	880f883a 	mov	r7,r17
  811300:	1009883a 	mov	r4,r2
  811304:	080c4240 	call	80c424 <__subdf3>
  811308:	d9401917 	ldw	r5,100(sp)
  81130c:	180f883a 	mov	r7,r3
  811310:	b009883a 	mov	r4,r22
  811314:	100d883a 	mov	r6,r2
  811318:	080cbbc0 	call	80cbbc <__gtdf2>
  81131c:	00bda216 	blt	zero,r2,8109a8 <_dtoa_r+0x6dc>
  811320:	d8c00317 	ldw	r3,12(sp)
  811324:	00800044 	movi	r2,1
  811328:	10c01216 	blt	r2,r3,811374 <_dtoa_r+0x10a8>
  81132c:	003d4506 	br	810844 <_dtoa_r+0x578>
  811330:	d9801417 	ldw	r6,80(sp)
  811334:	0005883a 	mov	r2,zero
  811338:	00cffc34 	movhi	r3,16368
  81133c:	180b883a 	mov	r5,r3
  811340:	880f883a 	mov	r7,r17
  811344:	1009883a 	mov	r4,r2
  811348:	080c4240 	call	80c424 <__subdf3>
  81134c:	d9c01b17 	ldw	r7,108(sp)
  811350:	180b883a 	mov	r5,r3
  811354:	1009883a 	mov	r4,r2
  811358:	b00d883a 	mov	r6,r22
  81135c:	08158c00 	call	8158c0 <__ltdf2>
  811360:	103d9116 	blt	r2,zero,8109a8 <_dtoa_r+0x6dc>
  811364:	d9800517 	ldw	r6,20(sp)
  811368:	d9000317 	ldw	r4,12(sp)
  81136c:	3105883a 	add	r2,r6,r4
  811370:	e0bd3426 	beq	fp,r2,810844 <_dtoa_r+0x578>
  811374:	04500934 	movhi	r17,16420
  811378:	0021883a 	mov	r16,zero
  81137c:	b80b883a 	mov	r5,r23
  811380:	b009883a 	mov	r4,r22
  811384:	800d883a 	mov	r6,r16
  811388:	880f883a 	mov	r7,r17
  81138c:	080c5180 	call	80c518 <__muldf3>
  811390:	d9401517 	ldw	r5,84(sp)
  811394:	d9001417 	ldw	r4,80(sp)
  811398:	880f883a 	mov	r7,r17
  81139c:	000d883a 	mov	r6,zero
  8113a0:	d8801a15 	stw	r2,104(sp)
  8113a4:	d8c01b15 	stw	r3,108(sp)
  8113a8:	080c5180 	call	80c518 <__muldf3>
  8113ac:	180b883a 	mov	r5,r3
  8113b0:	1009883a 	mov	r4,r2
  8113b4:	1823883a 	mov	r17,r3
  8113b8:	1021883a 	mov	r16,r2
  8113bc:	080cdc40 	call	80cdc4 <__fixdfsi>
  8113c0:	1009883a 	mov	r4,r2
  8113c4:	102b883a 	mov	r21,r2
  8113c8:	080cccc0 	call	80cccc <__floatsidf>
  8113cc:	880b883a 	mov	r5,r17
  8113d0:	8009883a 	mov	r4,r16
  8113d4:	180f883a 	mov	r7,r3
  8113d8:	100d883a 	mov	r6,r2
  8113dc:	080c4240 	call	80c424 <__subdf3>
  8113e0:	1021883a 	mov	r16,r2
  8113e4:	d9001b17 	ldw	r4,108(sp)
  8113e8:	1823883a 	mov	r17,r3
  8113ec:	dc001415 	stw	r16,80(sp)
  8113f0:	ad400c04 	addi	r21,r21,48
  8113f4:	dc401515 	stw	r17,84(sp)
  8113f8:	d8801a17 	ldw	r2,104(sp)
  8113fc:	e5400005 	stb	r21,0(fp)
  811400:	202f883a 	mov	r23,r4
  811404:	d9c01b17 	ldw	r7,108(sp)
  811408:	d9001417 	ldw	r4,80(sp)
  81140c:	880b883a 	mov	r5,r17
  811410:	100d883a 	mov	r6,r2
  811414:	102d883a 	mov	r22,r2
  811418:	e7000044 	addi	fp,fp,1
  81141c:	08158c00 	call	8158c0 <__ltdf2>
  811420:	103fc30e 	bge	r2,zero,811330 <_dtoa_r+0x1064>
  811424:	d9000417 	ldw	r4,16(sp)
  811428:	d9000d15 	stw	r4,52(sp)
  81142c:	003d7106 	br	8109f4 <_dtoa_r+0x728>
  811430:	d9801717 	ldw	r6,92(sp)
  811434:	00800084 	movi	r2,2
  811438:	11bde60e 	bge	r2,r6,810bd4 <_dtoa_r+0x908>
  81143c:	203cfb1e 	bne	r4,zero,81082c <_dtoa_r+0x560>
  811440:	d9001617 	ldw	r4,88(sp)
  811444:	900b883a 	mov	r5,r18
  811448:	01800144 	movi	r6,5
  81144c:	000f883a 	mov	r7,zero
  811450:	08139340 	call	813934 <__multadd>
  811454:	d9000717 	ldw	r4,28(sp)
  811458:	100b883a 	mov	r5,r2
  81145c:	1025883a 	mov	r18,r2
  811460:	0812ddc0 	call	812ddc <__mcmp>
  811464:	00bcf10e 	bge	zero,r2,81082c <_dtoa_r+0x560>
  811468:	d8c00d17 	ldw	r3,52(sp)
  81146c:	d9000517 	ldw	r4,20(sp)
  811470:	d8000615 	stw	zero,24(sp)
  811474:	18c00044 	addi	r3,r3,1
  811478:	d8c00d15 	stw	r3,52(sp)
  81147c:	00800c44 	movi	r2,49
  811480:	27000044 	addi	fp,r4,1
  811484:	20800005 	stb	r2,0(r4)
  811488:	003e8906 	br	810eb0 <_dtoa_r+0xbe4>
  81148c:	d8c00517 	ldw	r3,20(sp)
  811490:	003bc206 	br	81039c <_dtoa_r+0xd0>
  811494:	018020b4 	movhi	r6,130
  811498:	318cba04 	addi	r6,r6,13032
  81149c:	30c00917 	ldw	r3,36(r6)
  8114a0:	30800817 	ldw	r2,32(r6)
  8114a4:	d9001217 	ldw	r4,72(sp)
  8114a8:	d9401317 	ldw	r5,76(sp)
  8114ac:	180f883a 	mov	r7,r3
  8114b0:	100d883a 	mov	r6,r2
  8114b4:	080c8dc0 	call	80c8dc <__divdf3>
  8114b8:	948003cc 	andi	r18,r18,15
  8114bc:	058000c4 	movi	r22,3
  8114c0:	1029883a 	mov	r20,r2
  8114c4:	182b883a 	mov	r21,r3
  8114c8:	003c8906 	br	8106f0 <_dtoa_r+0x424>
  8114cc:	d9001017 	ldw	r4,64(sp)
  8114d0:	d9800917 	ldw	r6,36(sp)
  8114d4:	0025883a 	mov	r18,zero
  8114d8:	1105c83a 	sub	r2,r2,r4
  8114dc:	2089883a 	add	r4,r4,r2
  8114e0:	308d883a 	add	r6,r6,r2
  8114e4:	d9001015 	stw	r4,64(sp)
  8114e8:	d9800915 	stw	r6,36(sp)
  8114ec:	003e3206 	br	810db8 <_dtoa_r+0xaec>
  8114f0:	28800044 	addi	r2,r5,1
  8114f4:	27000044 	addi	fp,r4,1
  8114f8:	20800005 	stb	r2,0(r4)
  8114fc:	003e6c06 	br	810eb0 <_dtoa_r+0xbe4>
  811500:	d8800f17 	ldw	r2,60(sp)
  811504:	00bce016 	blt	zero,r2,810888 <_dtoa_r+0x5bc>
  811508:	d9800f17 	ldw	r6,60(sp)
  81150c:	303cc51e 	bne	r6,zero,810824 <_dtoa_r+0x558>
  811510:	0005883a 	mov	r2,zero
  811514:	00d00534 	movhi	r3,16404
  811518:	980b883a 	mov	r5,r19
  81151c:	180f883a 	mov	r7,r3
  811520:	9009883a 	mov	r4,r18
  811524:	100d883a 	mov	r6,r2
  811528:	080c5180 	call	80c518 <__muldf3>
  81152c:	180b883a 	mov	r5,r3
  811530:	a80f883a 	mov	r7,r21
  811534:	1009883a 	mov	r4,r2
  811538:	a00d883a 	mov	r6,r20
  81153c:	080cc440 	call	80cc44 <__gedf2>
  811540:	103cb80e 	bge	r2,zero,810824 <_dtoa_r+0x558>
  811544:	0027883a 	mov	r19,zero
  811548:	0025883a 	mov	r18,zero
  81154c:	003fc606 	br	811468 <_dtoa_r+0x119c>
  811550:	99400117 	ldw	r5,4(r19)
  811554:	d9001617 	ldw	r4,88(sp)
  811558:	08132000 	call	813200 <_Balloc>
  81155c:	99800417 	ldw	r6,16(r19)
  811560:	11000304 	addi	r4,r2,12
  811564:	99400304 	addi	r5,r19,12
  811568:	318d883a 	add	r6,r6,r6
  81156c:	318d883a 	add	r6,r6,r6
  811570:	31800204 	addi	r6,r6,8
  811574:	1023883a 	mov	r17,r2
  811578:	080dd7c0 	call	80dd7c <memcpy>
  81157c:	d9001617 	ldw	r4,88(sp)
  811580:	880b883a 	mov	r5,r17
  811584:	01800044 	movi	r6,1
  811588:	08135c40 	call	8135c4 <__lshift>
  81158c:	100b883a 	mov	r5,r2
  811590:	003d9c06 	br	810c04 <_dtoa_r+0x938>
  811594:	00800e44 	movi	r2,57
  811598:	b8807026 	beq	r23,r2,81175c <_dtoa_r+0x1490>
  81159c:	b8800044 	addi	r2,r23,1
  8115a0:	b7000044 	addi	fp,r22,1
  8115a4:	b0800005 	stb	r2,0(r22)
  8115a8:	003e4106 	br	810eb0 <_dtoa_r+0xbe4>
  8115ac:	d8800317 	ldw	r2,12(sp)
  8115b0:	018020b4 	movhi	r6,130
  8115b4:	318c8804 	addi	r6,r6,12832
  8115b8:	b009883a 	mov	r4,r22
  8115bc:	100e90fa 	slli	r7,r2,3
  8115c0:	b80b883a 	mov	r5,r23
  8115c4:	398f883a 	add	r7,r7,r6
  8115c8:	38bffe17 	ldw	r2,-8(r7)
  8115cc:	d9800517 	ldw	r6,20(sp)
  8115d0:	38ffff17 	ldw	r3,-4(r7)
  8115d4:	37000044 	addi	fp,r6,1
  8115d8:	180f883a 	mov	r7,r3
  8115dc:	100d883a 	mov	r6,r2
  8115e0:	080c5180 	call	80c518 <__muldf3>
  8115e4:	a80b883a 	mov	r5,r21
  8115e8:	a009883a 	mov	r4,r20
  8115ec:	182f883a 	mov	r23,r3
  8115f0:	102d883a 	mov	r22,r2
  8115f4:	080cdc40 	call	80cdc4 <__fixdfsi>
  8115f8:	1009883a 	mov	r4,r2
  8115fc:	1027883a 	mov	r19,r2
  811600:	080cccc0 	call	80cccc <__floatsidf>
  811604:	a80b883a 	mov	r5,r21
  811608:	a009883a 	mov	r4,r20
  81160c:	180f883a 	mov	r7,r3
  811610:	100d883a 	mov	r6,r2
  811614:	080c4240 	call	80c424 <__subdf3>
  811618:	180b883a 	mov	r5,r3
  81161c:	d8c00517 	ldw	r3,20(sp)
  811620:	9cc00c04 	addi	r19,r19,48
  811624:	1009883a 	mov	r4,r2
  811628:	1cc00005 	stb	r19,0(r3)
  81162c:	2021883a 	mov	r16,r4
  811630:	d9000317 	ldw	r4,12(sp)
  811634:	00800044 	movi	r2,1
  811638:	2823883a 	mov	r17,r5
  81163c:	20802226 	beq	r4,r2,8116c8 <_dtoa_r+0x13fc>
  811640:	1029883a 	mov	r20,r2
  811644:	0005883a 	mov	r2,zero
  811648:	00d00934 	movhi	r3,16420
  81164c:	180f883a 	mov	r7,r3
  811650:	100d883a 	mov	r6,r2
  811654:	880b883a 	mov	r5,r17
  811658:	8009883a 	mov	r4,r16
  81165c:	080c5180 	call	80c518 <__muldf3>
  811660:	180b883a 	mov	r5,r3
  811664:	1009883a 	mov	r4,r2
  811668:	1823883a 	mov	r17,r3
  81166c:	1021883a 	mov	r16,r2
  811670:	080cdc40 	call	80cdc4 <__fixdfsi>
  811674:	1009883a 	mov	r4,r2
  811678:	102b883a 	mov	r21,r2
  81167c:	080cccc0 	call	80cccc <__floatsidf>
  811680:	880b883a 	mov	r5,r17
  811684:	8009883a 	mov	r4,r16
  811688:	180f883a 	mov	r7,r3
  81168c:	100d883a 	mov	r6,r2
  811690:	080c4240 	call	80c424 <__subdf3>
  811694:	180b883a 	mov	r5,r3
  811698:	d8c00517 	ldw	r3,20(sp)
  81169c:	1009883a 	mov	r4,r2
  8116a0:	ad400c04 	addi	r21,r21,48
  8116a4:	1d05883a 	add	r2,r3,r20
  8116a8:	15400005 	stb	r21,0(r2)
  8116ac:	2021883a 	mov	r16,r4
  8116b0:	d9000317 	ldw	r4,12(sp)
  8116b4:	a5000044 	addi	r20,r20,1
  8116b8:	2823883a 	mov	r17,r5
  8116bc:	a13fe11e 	bne	r20,r4,811644 <_dtoa_r+0x1378>
  8116c0:	e505883a 	add	r2,fp,r20
  8116c4:	173fffc4 	addi	fp,r2,-1
  8116c8:	0025883a 	mov	r18,zero
  8116cc:	04cff834 	movhi	r19,16352
  8116d0:	b009883a 	mov	r4,r22
  8116d4:	b80b883a 	mov	r5,r23
  8116d8:	900d883a 	mov	r6,r18
  8116dc:	980f883a 	mov	r7,r19
  8116e0:	080c4a40 	call	80c4a4 <__adddf3>
  8116e4:	180b883a 	mov	r5,r3
  8116e8:	1009883a 	mov	r4,r2
  8116ec:	800d883a 	mov	r6,r16
  8116f0:	880f883a 	mov	r7,r17
  8116f4:	08158c00 	call	8158c0 <__ltdf2>
  8116f8:	103cab16 	blt	r2,zero,8109a8 <_dtoa_r+0x6dc>
  8116fc:	0009883a 	mov	r4,zero
  811700:	980b883a 	mov	r5,r19
  811704:	b80f883a 	mov	r7,r23
  811708:	b00d883a 	mov	r6,r22
  81170c:	080c4240 	call	80c424 <__subdf3>
  811710:	180b883a 	mov	r5,r3
  811714:	880f883a 	mov	r7,r17
  811718:	1009883a 	mov	r4,r2
  81171c:	800d883a 	mov	r6,r16
  811720:	080cbbc0 	call	80cbbc <__gtdf2>
  811724:	00bc470e 	bge	zero,r2,810844 <_dtoa_r+0x578>
  811728:	00c00c04 	movi	r3,48
  81172c:	e73fffc4 	addi	fp,fp,-1
  811730:	e0800007 	ldb	r2,0(fp)
  811734:	10fffd26 	beq	r2,r3,81172c <_dtoa_r+0x1460>
  811738:	d9800417 	ldw	r6,16(sp)
  81173c:	e7000044 	addi	fp,fp,1
  811740:	d9800d15 	stw	r6,52(sp)
  811744:	003cab06 	br	8109f4 <_dtoa_r+0x728>
  811748:	d8c00f17 	ldw	r3,60(sp)
  81174c:	d9001117 	ldw	r4,68(sp)
  811750:	20e1c83a 	sub	r16,r4,r3
  811754:	0007883a 	mov	r3,zero
  811758:	003d9b06 	br	810dc8 <_dtoa_r+0xafc>
  81175c:	00800e44 	movi	r2,57
  811760:	b0800005 	stb	r2,0(r22)
  811764:	b5800044 	addi	r22,r22,1
  811768:	003dc106 	br	810e70 <_dtoa_r+0xba4>
  81176c:	05800084 	movi	r22,2
  811770:	003bf706 	br	810750 <_dtoa_r+0x484>
  811774:	d9000f17 	ldw	r4,60(sp)
  811778:	013c000e 	bge	zero,r4,81077c <_dtoa_r+0x4b0>
  81177c:	d9800e17 	ldw	r6,56(sp)
  811780:	01bc300e 	bge	zero,r6,810844 <_dtoa_r+0x578>
  811784:	0005883a 	mov	r2,zero
  811788:	00d00934 	movhi	r3,16420
  81178c:	a80b883a 	mov	r5,r21
  811790:	180f883a 	mov	r7,r3
  811794:	a009883a 	mov	r4,r20
  811798:	100d883a 	mov	r6,r2
  81179c:	080c5180 	call	80c518 <__muldf3>
  8117a0:	b1000044 	addi	r4,r22,1
  8117a4:	1021883a 	mov	r16,r2
  8117a8:	1823883a 	mov	r17,r3
  8117ac:	080cccc0 	call	80cccc <__floatsidf>
  8117b0:	880b883a 	mov	r5,r17
  8117b4:	8009883a 	mov	r4,r16
  8117b8:	180f883a 	mov	r7,r3
  8117bc:	100d883a 	mov	r6,r2
  8117c0:	080c5180 	call	80c518 <__muldf3>
  8117c4:	0011883a 	mov	r8,zero
  8117c8:	02500734 	movhi	r9,16412
  8117cc:	180b883a 	mov	r5,r3
  8117d0:	480f883a 	mov	r7,r9
  8117d4:	1009883a 	mov	r4,r2
  8117d8:	400d883a 	mov	r6,r8
  8117dc:	080c4a40 	call	80c4a4 <__adddf3>
  8117e0:	102d883a 	mov	r22,r2
  8117e4:	00bf3034 	movhi	r2,64704
  8117e8:	10ef883a 	add	r23,r2,r3
  8117ec:	d8800d17 	ldw	r2,52(sp)
  8117f0:	d8c00e17 	ldw	r3,56(sp)
  8117f4:	8029883a 	mov	r20,r16
  8117f8:	10bfffc4 	addi	r2,r2,-1
  8117fc:	882b883a 	mov	r21,r17
  811800:	d8800415 	stw	r2,16(sp)
  811804:	d8c00315 	stw	r3,12(sp)
  811808:	003e8306 	br	811218 <_dtoa_r+0xf4c>
  81180c:	d8800117 	ldw	r2,4(sp)
  811810:	dc001117 	ldw	r16,68(sp)
  811814:	dc801017 	ldw	r18,64(sp)
  811818:	00c00d84 	movi	r3,54
  81181c:	1887c83a 	sub	r3,r3,r2
  811820:	003d6906 	br	810dc8 <_dtoa_r+0xafc>
  811824:	01800044 	movi	r6,1
  811828:	3021883a 	mov	r16,r6
  81182c:	d9800f15 	stw	r6,60(sp)
  811830:	d9802615 	stw	r6,152(sp)
  811834:	d9800e15 	stw	r6,56(sp)
  811838:	003b9306 	br	810688 <_dtoa_r+0x3bc>
  81183c:	b021883a 	mov	r16,r22
  811840:	dd800f15 	stw	r22,60(sp)
  811844:	003b9006 	br	810688 <_dtoa_r+0x3bc>
  811848:	103e221e 	bne	r2,zero,8110d4 <_dtoa_r+0xe08>
  81184c:	b880004c 	andi	r2,r23,1
  811850:	1005003a 	cmpeq	r2,r2,zero
  811854:	103e1f1e 	bne	r2,zero,8110d4 <_dtoa_r+0xe08>
  811858:	003e1b06 	br	8110c8 <_dtoa_r+0xdfc>
  81185c:	d9001617 	ldw	r4,88(sp)
  811860:	980b883a 	mov	r5,r19
  811864:	01800284 	movi	r6,10
  811868:	000f883a 	mov	r7,zero
  81186c:	08139340 	call	813934 <__multadd>
  811870:	d8c00e17 	ldw	r3,56(sp)
  811874:	1027883a 	mov	r19,r2
  811878:	d8c00f15 	stw	r3,60(sp)
  81187c:	003cd306 	br	810bcc <_dtoa_r+0x900>

00811880 <_fflush_r>:
  811880:	defffb04 	addi	sp,sp,-20
  811884:	dcc00315 	stw	r19,12(sp)
  811888:	dc800215 	stw	r18,8(sp)
  81188c:	dfc00415 	stw	ra,16(sp)
  811890:	dc400115 	stw	r17,4(sp)
  811894:	dc000015 	stw	r16,0(sp)
  811898:	2027883a 	mov	r19,r4
  81189c:	2825883a 	mov	r18,r5
  8118a0:	20000226 	beq	r4,zero,8118ac <_fflush_r+0x2c>
  8118a4:	20800e17 	ldw	r2,56(r4)
  8118a8:	10005626 	beq	r2,zero,811a04 <_fflush_r+0x184>
  8118ac:	9100030b 	ldhu	r4,12(r18)
  8118b0:	20ffffcc 	andi	r3,r4,65535
  8118b4:	18e0001c 	xori	r3,r3,32768
  8118b8:	18e00004 	addi	r3,r3,-32768
  8118bc:	1880020c 	andi	r2,r3,8
  8118c0:	1000261e 	bne	r2,zero,81195c <_fflush_r+0xdc>
  8118c4:	90c00117 	ldw	r3,4(r18)
  8118c8:	20820014 	ori	r2,r4,2048
  8118cc:	9080030d 	sth	r2,12(r18)
  8118d0:	1009883a 	mov	r4,r2
  8118d4:	00c0400e 	bge	zero,r3,8119d8 <_fflush_r+0x158>
  8118d8:	92000a17 	ldw	r8,40(r18)
  8118dc:	40004026 	beq	r8,zero,8119e0 <_fflush_r+0x160>
  8118e0:	2084000c 	andi	r2,r4,4096
  8118e4:	10005326 	beq	r2,zero,811a34 <_fflush_r+0x1b4>
  8118e8:	94001417 	ldw	r16,80(r18)
  8118ec:	9080030b 	ldhu	r2,12(r18)
  8118f0:	1080010c 	andi	r2,r2,4
  8118f4:	1000481e 	bne	r2,zero,811a18 <_fflush_r+0x198>
  8118f8:	91400717 	ldw	r5,28(r18)
  8118fc:	9809883a 	mov	r4,r19
  811900:	800d883a 	mov	r6,r16
  811904:	000f883a 	mov	r7,zero
  811908:	403ee83a 	callr	r8
  81190c:	8080261e 	bne	r16,r2,8119a8 <_fflush_r+0x128>
  811910:	9080030b 	ldhu	r2,12(r18)
  811914:	91000417 	ldw	r4,16(r18)
  811918:	90000115 	stw	zero,4(r18)
  81191c:	10bdffcc 	andi	r2,r2,63487
  811920:	10ffffcc 	andi	r3,r2,65535
  811924:	18c4000c 	andi	r3,r3,4096
  811928:	9080030d 	sth	r2,12(r18)
  81192c:	91000015 	stw	r4,0(r18)
  811930:	18002b26 	beq	r3,zero,8119e0 <_fflush_r+0x160>
  811934:	0007883a 	mov	r3,zero
  811938:	1805883a 	mov	r2,r3
  81193c:	94001415 	stw	r16,80(r18)
  811940:	dfc00417 	ldw	ra,16(sp)
  811944:	dcc00317 	ldw	r19,12(sp)
  811948:	dc800217 	ldw	r18,8(sp)
  81194c:	dc400117 	ldw	r17,4(sp)
  811950:	dc000017 	ldw	r16,0(sp)
  811954:	dec00504 	addi	sp,sp,20
  811958:	f800283a 	ret
  81195c:	94400417 	ldw	r17,16(r18)
  811960:	88001f26 	beq	r17,zero,8119e0 <_fflush_r+0x160>
  811964:	90800017 	ldw	r2,0(r18)
  811968:	18c000cc 	andi	r3,r3,3
  81196c:	94400015 	stw	r17,0(r18)
  811970:	1461c83a 	sub	r16,r2,r17
  811974:	18002526 	beq	r3,zero,811a0c <_fflush_r+0x18c>
  811978:	0005883a 	mov	r2,zero
  81197c:	90800215 	stw	r2,8(r18)
  811980:	0400170e 	bge	zero,r16,8119e0 <_fflush_r+0x160>
  811984:	90c00917 	ldw	r3,36(r18)
  811988:	91400717 	ldw	r5,28(r18)
  81198c:	880d883a 	mov	r6,r17
  811990:	800f883a 	mov	r7,r16
  811994:	9809883a 	mov	r4,r19
  811998:	183ee83a 	callr	r3
  81199c:	88a3883a 	add	r17,r17,r2
  8119a0:	80a1c83a 	sub	r16,r16,r2
  8119a4:	00bff616 	blt	zero,r2,811980 <_fflush_r+0x100>
  8119a8:	9080030b 	ldhu	r2,12(r18)
  8119ac:	00ffffc4 	movi	r3,-1
  8119b0:	10801014 	ori	r2,r2,64
  8119b4:	9080030d 	sth	r2,12(r18)
  8119b8:	1805883a 	mov	r2,r3
  8119bc:	dfc00417 	ldw	ra,16(sp)
  8119c0:	dcc00317 	ldw	r19,12(sp)
  8119c4:	dc800217 	ldw	r18,8(sp)
  8119c8:	dc400117 	ldw	r17,4(sp)
  8119cc:	dc000017 	ldw	r16,0(sp)
  8119d0:	dec00504 	addi	sp,sp,20
  8119d4:	f800283a 	ret
  8119d8:	90800f17 	ldw	r2,60(r18)
  8119dc:	00bfbe16 	blt	zero,r2,8118d8 <_fflush_r+0x58>
  8119e0:	0007883a 	mov	r3,zero
  8119e4:	1805883a 	mov	r2,r3
  8119e8:	dfc00417 	ldw	ra,16(sp)
  8119ec:	dcc00317 	ldw	r19,12(sp)
  8119f0:	dc800217 	ldw	r18,8(sp)
  8119f4:	dc400117 	ldw	r17,4(sp)
  8119f8:	dc000017 	ldw	r16,0(sp)
  8119fc:	dec00504 	addi	sp,sp,20
  811a00:	f800283a 	ret
  811a04:	0811b180 	call	811b18 <__sinit>
  811a08:	003fa806 	br	8118ac <_fflush_r+0x2c>
  811a0c:	90800517 	ldw	r2,20(r18)
  811a10:	90800215 	stw	r2,8(r18)
  811a14:	003fda06 	br	811980 <_fflush_r+0x100>
  811a18:	90800117 	ldw	r2,4(r18)
  811a1c:	90c00c17 	ldw	r3,48(r18)
  811a20:	80a1c83a 	sub	r16,r16,r2
  811a24:	183fb426 	beq	r3,zero,8118f8 <_fflush_r+0x78>
  811a28:	90800f17 	ldw	r2,60(r18)
  811a2c:	80a1c83a 	sub	r16,r16,r2
  811a30:	003fb106 	br	8118f8 <_fflush_r+0x78>
  811a34:	91400717 	ldw	r5,28(r18)
  811a38:	9809883a 	mov	r4,r19
  811a3c:	000d883a 	mov	r6,zero
  811a40:	01c00044 	movi	r7,1
  811a44:	403ee83a 	callr	r8
  811a48:	1021883a 	mov	r16,r2
  811a4c:	00bfffc4 	movi	r2,-1
  811a50:	80800226 	beq	r16,r2,811a5c <_fflush_r+0x1dc>
  811a54:	92000a17 	ldw	r8,40(r18)
  811a58:	003fa406 	br	8118ec <_fflush_r+0x6c>
  811a5c:	98c00017 	ldw	r3,0(r19)
  811a60:	00800744 	movi	r2,29
  811a64:	18bfde26 	beq	r3,r2,8119e0 <_fflush_r+0x160>
  811a68:	9080030b 	ldhu	r2,12(r18)
  811a6c:	8007883a 	mov	r3,r16
  811a70:	10801014 	ori	r2,r2,64
  811a74:	9080030d 	sth	r2,12(r18)
  811a78:	003fcf06 	br	8119b8 <_fflush_r+0x138>

00811a7c <fflush>:
  811a7c:	01402074 	movhi	r5,129
  811a80:	29462004 	addi	r5,r5,6272
  811a84:	2007883a 	mov	r3,r4
  811a88:	20000526 	beq	r4,zero,811aa0 <fflush+0x24>
  811a8c:	008020b4 	movhi	r2,130
  811a90:	1093eb04 	addi	r2,r2,20396
  811a94:	11000017 	ldw	r4,0(r2)
  811a98:	180b883a 	mov	r5,r3
  811a9c:	08118801 	jmpi	811880 <_fflush_r>
  811aa0:	008020b4 	movhi	r2,130
  811aa4:	1093ec04 	addi	r2,r2,20400
  811aa8:	11000017 	ldw	r4,0(r2)
  811aac:	081264c1 	jmpi	81264c <_fwalk_reent>

00811ab0 <std>:
  811ab0:	00802074 	movhi	r2,129
  811ab4:	10913104 	addi	r2,r2,17604
  811ab8:	20800b15 	stw	r2,44(r4)
  811abc:	00802074 	movhi	r2,129
  811ac0:	10916c04 	addi	r2,r2,17840
  811ac4:	20800815 	stw	r2,32(r4)
  811ac8:	00c02074 	movhi	r3,129
  811acc:	18d14d04 	addi	r3,r3,17716
  811ad0:	00802074 	movhi	r2,129
  811ad4:	10913304 	addi	r2,r2,17612
  811ad8:	2140030d 	sth	r5,12(r4)
  811adc:	2180038d 	sth	r6,14(r4)
  811ae0:	20c00915 	stw	r3,36(r4)
  811ae4:	20800a15 	stw	r2,40(r4)
  811ae8:	20000015 	stw	zero,0(r4)
  811aec:	20000115 	stw	zero,4(r4)
  811af0:	20000215 	stw	zero,8(r4)
  811af4:	20000415 	stw	zero,16(r4)
  811af8:	20000515 	stw	zero,20(r4)
  811afc:	20000615 	stw	zero,24(r4)
  811b00:	21000715 	stw	r4,28(r4)
  811b04:	f800283a 	ret

00811b08 <__sfp_lock_acquire>:
  811b08:	f800283a 	ret

00811b0c <__sfp_lock_release>:
  811b0c:	f800283a 	ret

00811b10 <__sinit_lock_acquire>:
  811b10:	f800283a 	ret

00811b14 <__sinit_lock_release>:
  811b14:	f800283a 	ret

00811b18 <__sinit>:
  811b18:	20800e17 	ldw	r2,56(r4)
  811b1c:	defffd04 	addi	sp,sp,-12
  811b20:	dc400115 	stw	r17,4(sp)
  811b24:	dc000015 	stw	r16,0(sp)
  811b28:	dfc00215 	stw	ra,8(sp)
  811b2c:	04400044 	movi	r17,1
  811b30:	01400104 	movi	r5,4
  811b34:	000d883a 	mov	r6,zero
  811b38:	2021883a 	mov	r16,r4
  811b3c:	2200bb04 	addi	r8,r4,748
  811b40:	200f883a 	mov	r7,r4
  811b44:	10000526 	beq	r2,zero,811b5c <__sinit+0x44>
  811b48:	dfc00217 	ldw	ra,8(sp)
  811b4c:	dc400117 	ldw	r17,4(sp)
  811b50:	dc000017 	ldw	r16,0(sp)
  811b54:	dec00304 	addi	sp,sp,12
  811b58:	f800283a 	ret
  811b5c:	21000117 	ldw	r4,4(r4)
  811b60:	00802074 	movhi	r2,129
  811b64:	1086ff04 	addi	r2,r2,7164
  811b68:	00c000c4 	movi	r3,3
  811b6c:	80800f15 	stw	r2,60(r16)
  811b70:	80c0b915 	stw	r3,740(r16)
  811b74:	8200ba15 	stw	r8,744(r16)
  811b78:	84400e15 	stw	r17,56(r16)
  811b7c:	8000b815 	stw	zero,736(r16)
  811b80:	0811ab00 	call	811ab0 <std>
  811b84:	81000217 	ldw	r4,8(r16)
  811b88:	880d883a 	mov	r6,r17
  811b8c:	800f883a 	mov	r7,r16
  811b90:	01400284 	movi	r5,10
  811b94:	0811ab00 	call	811ab0 <std>
  811b98:	81000317 	ldw	r4,12(r16)
  811b9c:	800f883a 	mov	r7,r16
  811ba0:	01400484 	movi	r5,18
  811ba4:	01800084 	movi	r6,2
  811ba8:	dfc00217 	ldw	ra,8(sp)
  811bac:	dc400117 	ldw	r17,4(sp)
  811bb0:	dc000017 	ldw	r16,0(sp)
  811bb4:	dec00304 	addi	sp,sp,12
  811bb8:	0811ab01 	jmpi	811ab0 <std>

00811bbc <__fp_lock>:
  811bbc:	0005883a 	mov	r2,zero
  811bc0:	f800283a 	ret

00811bc4 <__fp_unlock>:
  811bc4:	0005883a 	mov	r2,zero
  811bc8:	f800283a 	ret

00811bcc <__fp_unlock_all>:
  811bcc:	008020b4 	movhi	r2,130
  811bd0:	1093eb04 	addi	r2,r2,20396
  811bd4:	11000017 	ldw	r4,0(r2)
  811bd8:	01402074 	movhi	r5,129
  811bdc:	2946f104 	addi	r5,r5,7108
  811be0:	08127141 	jmpi	812714 <_fwalk>

00811be4 <__fp_lock_all>:
  811be4:	008020b4 	movhi	r2,130
  811be8:	1093eb04 	addi	r2,r2,20396
  811bec:	11000017 	ldw	r4,0(r2)
  811bf0:	01402074 	movhi	r5,129
  811bf4:	2946ef04 	addi	r5,r5,7100
  811bf8:	08127141 	jmpi	812714 <_fwalk>

00811bfc <_cleanup_r>:
  811bfc:	01402074 	movhi	r5,129
  811c00:	2952b104 	addi	r5,r5,19140
  811c04:	08127141 	jmpi	812714 <_fwalk>

00811c08 <_cleanup>:
  811c08:	008020b4 	movhi	r2,130
  811c0c:	1093ec04 	addi	r2,r2,20400
  811c10:	11000017 	ldw	r4,0(r2)
  811c14:	0811bfc1 	jmpi	811bfc <_cleanup_r>

00811c18 <__sfmoreglue>:
  811c18:	defffc04 	addi	sp,sp,-16
  811c1c:	dc400115 	stw	r17,4(sp)
  811c20:	2c401724 	muli	r17,r5,92
  811c24:	dc800215 	stw	r18,8(sp)
  811c28:	2825883a 	mov	r18,r5
  811c2c:	89400304 	addi	r5,r17,12
  811c30:	dc000015 	stw	r16,0(sp)
  811c34:	dfc00315 	stw	ra,12(sp)
  811c38:	080d63c0 	call	80d63c <_malloc_r>
  811c3c:	0021883a 	mov	r16,zero
  811c40:	880d883a 	mov	r6,r17
  811c44:	000b883a 	mov	r5,zero
  811c48:	10000626 	beq	r2,zero,811c64 <__sfmoreglue+0x4c>
  811c4c:	11000304 	addi	r4,r2,12
  811c50:	14800115 	stw	r18,4(r2)
  811c54:	10000015 	stw	zero,0(r2)
  811c58:	11000215 	stw	r4,8(r2)
  811c5c:	1021883a 	mov	r16,r2
  811c60:	0812be80 	call	812be8 <memset>
  811c64:	8005883a 	mov	r2,r16
  811c68:	dfc00317 	ldw	ra,12(sp)
  811c6c:	dc800217 	ldw	r18,8(sp)
  811c70:	dc400117 	ldw	r17,4(sp)
  811c74:	dc000017 	ldw	r16,0(sp)
  811c78:	dec00404 	addi	sp,sp,16
  811c7c:	f800283a 	ret

00811c80 <__sfp>:
  811c80:	defffd04 	addi	sp,sp,-12
  811c84:	008020b4 	movhi	r2,130
  811c88:	1093ec04 	addi	r2,r2,20400
  811c8c:	dc000015 	stw	r16,0(sp)
  811c90:	14000017 	ldw	r16,0(r2)
  811c94:	dc400115 	stw	r17,4(sp)
  811c98:	dfc00215 	stw	ra,8(sp)
  811c9c:	80800e17 	ldw	r2,56(r16)
  811ca0:	2023883a 	mov	r17,r4
  811ca4:	10002626 	beq	r2,zero,811d40 <__sfp+0xc0>
  811ca8:	8400b804 	addi	r16,r16,736
  811cac:	80800117 	ldw	r2,4(r16)
  811cb0:	81000217 	ldw	r4,8(r16)
  811cb4:	10ffffc4 	addi	r3,r2,-1
  811cb8:	18000916 	blt	r3,zero,811ce0 <__sfp+0x60>
  811cbc:	2080030f 	ldh	r2,12(r4)
  811cc0:	10000b26 	beq	r2,zero,811cf0 <__sfp+0x70>
  811cc4:	017fffc4 	movi	r5,-1
  811cc8:	00000206 	br	811cd4 <__sfp+0x54>
  811ccc:	2080030f 	ldh	r2,12(r4)
  811cd0:	10000726 	beq	r2,zero,811cf0 <__sfp+0x70>
  811cd4:	18ffffc4 	addi	r3,r3,-1
  811cd8:	21001704 	addi	r4,r4,92
  811cdc:	197ffb1e 	bne	r3,r5,811ccc <__sfp+0x4c>
  811ce0:	80800017 	ldw	r2,0(r16)
  811ce4:	10001926 	beq	r2,zero,811d4c <__sfp+0xcc>
  811ce8:	1021883a 	mov	r16,r2
  811cec:	003fef06 	br	811cac <__sfp+0x2c>
  811cf0:	00bfffc4 	movi	r2,-1
  811cf4:	00c00044 	movi	r3,1
  811cf8:	2080038d 	sth	r2,14(r4)
  811cfc:	20c0030d 	sth	r3,12(r4)
  811d00:	20000015 	stw	zero,0(r4)
  811d04:	20000215 	stw	zero,8(r4)
  811d08:	20000115 	stw	zero,4(r4)
  811d0c:	20000415 	stw	zero,16(r4)
  811d10:	20000515 	stw	zero,20(r4)
  811d14:	20000615 	stw	zero,24(r4)
  811d18:	20000c15 	stw	zero,48(r4)
  811d1c:	20000d15 	stw	zero,52(r4)
  811d20:	20001115 	stw	zero,68(r4)
  811d24:	20001215 	stw	zero,72(r4)
  811d28:	2005883a 	mov	r2,r4
  811d2c:	dfc00217 	ldw	ra,8(sp)
  811d30:	dc400117 	ldw	r17,4(sp)
  811d34:	dc000017 	ldw	r16,0(sp)
  811d38:	dec00304 	addi	sp,sp,12
  811d3c:	f800283a 	ret
  811d40:	8009883a 	mov	r4,r16
  811d44:	0811b180 	call	811b18 <__sinit>
  811d48:	003fd706 	br	811ca8 <__sfp+0x28>
  811d4c:	8809883a 	mov	r4,r17
  811d50:	01400104 	movi	r5,4
  811d54:	0811c180 	call	811c18 <__sfmoreglue>
  811d58:	80800015 	stw	r2,0(r16)
  811d5c:	103fe21e 	bne	r2,zero,811ce8 <__sfp+0x68>
  811d60:	00800304 	movi	r2,12
  811d64:	0009883a 	mov	r4,zero
  811d68:	88800015 	stw	r2,0(r17)
  811d6c:	003fee06 	br	811d28 <__sfp+0xa8>

00811d70 <_malloc_trim_r>:
  811d70:	defffb04 	addi	sp,sp,-20
  811d74:	dcc00315 	stw	r19,12(sp)
  811d78:	04c020b4 	movhi	r19,130
  811d7c:	9ccd3c04 	addi	r19,r19,13552
  811d80:	dc800215 	stw	r18,8(sp)
  811d84:	dc400115 	stw	r17,4(sp)
  811d88:	dc000015 	stw	r16,0(sp)
  811d8c:	2823883a 	mov	r17,r5
  811d90:	2025883a 	mov	r18,r4
  811d94:	dfc00415 	stw	ra,16(sp)
  811d98:	08166e00 	call	8166e0 <__malloc_lock>
  811d9c:	98800217 	ldw	r2,8(r19)
  811da0:	9009883a 	mov	r4,r18
  811da4:	000b883a 	mov	r5,zero
  811da8:	10c00117 	ldw	r3,4(r2)
  811dac:	00bfff04 	movi	r2,-4
  811db0:	18a0703a 	and	r16,r3,r2
  811db4:	8463c83a 	sub	r17,r16,r17
  811db8:	8c43fbc4 	addi	r17,r17,4079
  811dbc:	8822d33a 	srli	r17,r17,12
  811dc0:	0083ffc4 	movi	r2,4095
  811dc4:	8c7fffc4 	addi	r17,r17,-1
  811dc8:	8822933a 	slli	r17,r17,12
  811dcc:	1440060e 	bge	r2,r17,811de8 <_malloc_trim_r+0x78>
  811dd0:	080df6c0 	call	80df6c <_sbrk_r>
  811dd4:	98c00217 	ldw	r3,8(r19)
  811dd8:	9009883a 	mov	r4,r18
  811ddc:	044bc83a 	sub	r5,zero,r17
  811de0:	80c7883a 	add	r3,r16,r3
  811de4:	10c00926 	beq	r2,r3,811e0c <_malloc_trim_r+0x9c>
  811de8:	08167e80 	call	8167e8 <__malloc_unlock>
  811dec:	0005883a 	mov	r2,zero
  811df0:	dfc00417 	ldw	ra,16(sp)
  811df4:	dcc00317 	ldw	r19,12(sp)
  811df8:	dc800217 	ldw	r18,8(sp)
  811dfc:	dc400117 	ldw	r17,4(sp)
  811e00:	dc000017 	ldw	r16,0(sp)
  811e04:	dec00504 	addi	sp,sp,20
  811e08:	f800283a 	ret
  811e0c:	9009883a 	mov	r4,r18
  811e10:	080df6c0 	call	80df6c <_sbrk_r>
  811e14:	844dc83a 	sub	r6,r16,r17
  811e18:	00ffffc4 	movi	r3,-1
  811e1c:	9009883a 	mov	r4,r18
  811e20:	000b883a 	mov	r5,zero
  811e24:	01c020b4 	movhi	r7,130
  811e28:	39db1f04 	addi	r7,r7,27772
  811e2c:	31800054 	ori	r6,r6,1
  811e30:	10c00926 	beq	r2,r3,811e58 <_malloc_trim_r+0xe8>
  811e34:	38800017 	ldw	r2,0(r7)
  811e38:	98c00217 	ldw	r3,8(r19)
  811e3c:	9009883a 	mov	r4,r18
  811e40:	1445c83a 	sub	r2,r2,r17
  811e44:	38800015 	stw	r2,0(r7)
  811e48:	19800115 	stw	r6,4(r3)
  811e4c:	08167e80 	call	8167e8 <__malloc_unlock>
  811e50:	00800044 	movi	r2,1
  811e54:	003fe606 	br	811df0 <_malloc_trim_r+0x80>
  811e58:	080df6c0 	call	80df6c <_sbrk_r>
  811e5c:	99800217 	ldw	r6,8(r19)
  811e60:	100f883a 	mov	r7,r2
  811e64:	9009883a 	mov	r4,r18
  811e68:	1187c83a 	sub	r3,r2,r6
  811e6c:	008003c4 	movi	r2,15
  811e70:	19400054 	ori	r5,r3,1
  811e74:	10ffdc0e 	bge	r2,r3,811de8 <_malloc_trim_r+0x78>
  811e78:	008020b4 	movhi	r2,130
  811e7c:	1093ea04 	addi	r2,r2,20392
  811e80:	10c00017 	ldw	r3,0(r2)
  811e84:	008020b4 	movhi	r2,130
  811e88:	109b1f04 	addi	r2,r2,27772
  811e8c:	31400115 	stw	r5,4(r6)
  811e90:	38c7c83a 	sub	r3,r7,r3
  811e94:	10c00015 	stw	r3,0(r2)
  811e98:	003fd306 	br	811de8 <_malloc_trim_r+0x78>

00811e9c <_free_r>:
  811e9c:	defffd04 	addi	sp,sp,-12
  811ea0:	dc400115 	stw	r17,4(sp)
  811ea4:	dc000015 	stw	r16,0(sp)
  811ea8:	dfc00215 	stw	ra,8(sp)
  811eac:	2821883a 	mov	r16,r5
  811eb0:	2023883a 	mov	r17,r4
  811eb4:	28005a26 	beq	r5,zero,812020 <_free_r+0x184>
  811eb8:	08166e00 	call	8166e0 <__malloc_lock>
  811ebc:	823ffe04 	addi	r8,r16,-8
  811ec0:	41400117 	ldw	r5,4(r8)
  811ec4:	00bfff84 	movi	r2,-2
  811ec8:	028020b4 	movhi	r10,130
  811ecc:	528d3c04 	addi	r10,r10,13552
  811ed0:	288e703a 	and	r7,r5,r2
  811ed4:	41cd883a 	add	r6,r8,r7
  811ed8:	30c00117 	ldw	r3,4(r6)
  811edc:	51000217 	ldw	r4,8(r10)
  811ee0:	00bfff04 	movi	r2,-4
  811ee4:	1892703a 	and	r9,r3,r2
  811ee8:	5017883a 	mov	r11,r10
  811eec:	31006726 	beq	r6,r4,81208c <_free_r+0x1f0>
  811ef0:	2880004c 	andi	r2,r5,1
  811ef4:	1005003a 	cmpeq	r2,r2,zero
  811ef8:	32400115 	stw	r9,4(r6)
  811efc:	10001a1e 	bne	r2,zero,811f68 <_free_r+0xcc>
  811f00:	000b883a 	mov	r5,zero
  811f04:	3247883a 	add	r3,r6,r9
  811f08:	18800117 	ldw	r2,4(r3)
  811f0c:	1080004c 	andi	r2,r2,1
  811f10:	1000231e 	bne	r2,zero,811fa0 <_free_r+0x104>
  811f14:	280ac03a 	cmpne	r5,r5,zero
  811f18:	3a4f883a 	add	r7,r7,r9
  811f1c:	2800451e 	bne	r5,zero,812034 <_free_r+0x198>
  811f20:	31000217 	ldw	r4,8(r6)
  811f24:	008020b4 	movhi	r2,130
  811f28:	108d3e04 	addi	r2,r2,13560
  811f2c:	20807b26 	beq	r4,r2,81211c <_free_r+0x280>
  811f30:	30800317 	ldw	r2,12(r6)
  811f34:	3a07883a 	add	r3,r7,r8
  811f38:	19c00015 	stw	r7,0(r3)
  811f3c:	11000215 	stw	r4,8(r2)
  811f40:	20800315 	stw	r2,12(r4)
  811f44:	38800054 	ori	r2,r7,1
  811f48:	40800115 	stw	r2,4(r8)
  811f4c:	28001a26 	beq	r5,zero,811fb8 <_free_r+0x11c>
  811f50:	8809883a 	mov	r4,r17
  811f54:	dfc00217 	ldw	ra,8(sp)
  811f58:	dc400117 	ldw	r17,4(sp)
  811f5c:	dc000017 	ldw	r16,0(sp)
  811f60:	dec00304 	addi	sp,sp,12
  811f64:	08167e81 	jmpi	8167e8 <__malloc_unlock>
  811f68:	80bffe17 	ldw	r2,-8(r16)
  811f6c:	50c00204 	addi	r3,r10,8
  811f70:	4091c83a 	sub	r8,r8,r2
  811f74:	41000217 	ldw	r4,8(r8)
  811f78:	388f883a 	add	r7,r7,r2
  811f7c:	20c06126 	beq	r4,r3,812104 <_free_r+0x268>
  811f80:	40800317 	ldw	r2,12(r8)
  811f84:	3247883a 	add	r3,r6,r9
  811f88:	000b883a 	mov	r5,zero
  811f8c:	11000215 	stw	r4,8(r2)
  811f90:	20800315 	stw	r2,12(r4)
  811f94:	18800117 	ldw	r2,4(r3)
  811f98:	1080004c 	andi	r2,r2,1
  811f9c:	103fdd26 	beq	r2,zero,811f14 <_free_r+0x78>
  811fa0:	38800054 	ori	r2,r7,1
  811fa4:	3a07883a 	add	r3,r7,r8
  811fa8:	280ac03a 	cmpne	r5,r5,zero
  811fac:	40800115 	stw	r2,4(r8)
  811fb0:	19c00015 	stw	r7,0(r3)
  811fb4:	283fe61e 	bne	r5,zero,811f50 <_free_r+0xb4>
  811fb8:	00807fc4 	movi	r2,511
  811fbc:	11c01f2e 	bgeu	r2,r7,81203c <_free_r+0x1a0>
  811fc0:	3806d27a 	srli	r3,r7,9
  811fc4:	1800481e 	bne	r3,zero,8120e8 <_free_r+0x24c>
  811fc8:	3804d0fa 	srli	r2,r7,3
  811fcc:	100690fa 	slli	r3,r2,3
  811fd0:	1acd883a 	add	r6,r3,r11
  811fd4:	31400217 	ldw	r5,8(r6)
  811fd8:	31405926 	beq	r6,r5,812140 <_free_r+0x2a4>
  811fdc:	28800117 	ldw	r2,4(r5)
  811fe0:	00ffff04 	movi	r3,-4
  811fe4:	10c4703a 	and	r2,r2,r3
  811fe8:	3880022e 	bgeu	r7,r2,811ff4 <_free_r+0x158>
  811fec:	29400217 	ldw	r5,8(r5)
  811ff0:	317ffa1e 	bne	r6,r5,811fdc <_free_r+0x140>
  811ff4:	29800317 	ldw	r6,12(r5)
  811ff8:	41800315 	stw	r6,12(r8)
  811ffc:	41400215 	stw	r5,8(r8)
  812000:	8809883a 	mov	r4,r17
  812004:	2a000315 	stw	r8,12(r5)
  812008:	32000215 	stw	r8,8(r6)
  81200c:	dfc00217 	ldw	ra,8(sp)
  812010:	dc400117 	ldw	r17,4(sp)
  812014:	dc000017 	ldw	r16,0(sp)
  812018:	dec00304 	addi	sp,sp,12
  81201c:	08167e81 	jmpi	8167e8 <__malloc_unlock>
  812020:	dfc00217 	ldw	ra,8(sp)
  812024:	dc400117 	ldw	r17,4(sp)
  812028:	dc000017 	ldw	r16,0(sp)
  81202c:	dec00304 	addi	sp,sp,12
  812030:	f800283a 	ret
  812034:	31000217 	ldw	r4,8(r6)
  812038:	003fbd06 	br	811f30 <_free_r+0x94>
  81203c:	3806d0fa 	srli	r3,r7,3
  812040:	00800044 	movi	r2,1
  812044:	51400117 	ldw	r5,4(r10)
  812048:	180890fa 	slli	r4,r3,3
  81204c:	1807d0ba 	srai	r3,r3,2
  812050:	22c9883a 	add	r4,r4,r11
  812054:	21800217 	ldw	r6,8(r4)
  812058:	10c4983a 	sll	r2,r2,r3
  81205c:	41000315 	stw	r4,12(r8)
  812060:	41800215 	stw	r6,8(r8)
  812064:	288ab03a 	or	r5,r5,r2
  812068:	22000215 	stw	r8,8(r4)
  81206c:	8809883a 	mov	r4,r17
  812070:	51400115 	stw	r5,4(r10)
  812074:	32000315 	stw	r8,12(r6)
  812078:	dfc00217 	ldw	ra,8(sp)
  81207c:	dc400117 	ldw	r17,4(sp)
  812080:	dc000017 	ldw	r16,0(sp)
  812084:	dec00304 	addi	sp,sp,12
  812088:	08167e81 	jmpi	8167e8 <__malloc_unlock>
  81208c:	2880004c 	andi	r2,r5,1
  812090:	3a4d883a 	add	r6,r7,r9
  812094:	1000071e 	bne	r2,zero,8120b4 <_free_r+0x218>
  812098:	80bffe17 	ldw	r2,-8(r16)
  81209c:	4091c83a 	sub	r8,r8,r2
  8120a0:	41000317 	ldw	r4,12(r8)
  8120a4:	40c00217 	ldw	r3,8(r8)
  8120a8:	308d883a 	add	r6,r6,r2
  8120ac:	20c00215 	stw	r3,8(r4)
  8120b0:	19000315 	stw	r4,12(r3)
  8120b4:	008020b4 	movhi	r2,130
  8120b8:	1093e904 	addi	r2,r2,20388
  8120bc:	11000017 	ldw	r4,0(r2)
  8120c0:	30c00054 	ori	r3,r6,1
  8120c4:	52000215 	stw	r8,8(r10)
  8120c8:	40c00115 	stw	r3,4(r8)
  8120cc:	313fa036 	bltu	r6,r4,811f50 <_free_r+0xb4>
  8120d0:	008020b4 	movhi	r2,130
  8120d4:	109af904 	addi	r2,r2,27620
  8120d8:	11400017 	ldw	r5,0(r2)
  8120dc:	8809883a 	mov	r4,r17
  8120e0:	0811d700 	call	811d70 <_malloc_trim_r>
  8120e4:	003f9a06 	br	811f50 <_free_r+0xb4>
  8120e8:	00800104 	movi	r2,4
  8120ec:	10c0072e 	bgeu	r2,r3,81210c <_free_r+0x270>
  8120f0:	00800504 	movi	r2,20
  8120f4:	10c01936 	bltu	r2,r3,81215c <_free_r+0x2c0>
  8120f8:	188016c4 	addi	r2,r3,91
  8120fc:	100690fa 	slli	r3,r2,3
  812100:	003fb306 	br	811fd0 <_free_r+0x134>
  812104:	01400044 	movi	r5,1
  812108:	003f7e06 	br	811f04 <_free_r+0x68>
  81210c:	3804d1ba 	srli	r2,r7,6
  812110:	10800e04 	addi	r2,r2,56
  812114:	100690fa 	slli	r3,r2,3
  812118:	003fad06 	br	811fd0 <_free_r+0x134>
  81211c:	22000315 	stw	r8,12(r4)
  812120:	22000215 	stw	r8,8(r4)
  812124:	3a05883a 	add	r2,r7,r8
  812128:	38c00054 	ori	r3,r7,1
  81212c:	11c00015 	stw	r7,0(r2)
  812130:	41000215 	stw	r4,8(r8)
  812134:	40c00115 	stw	r3,4(r8)
  812138:	41000315 	stw	r4,12(r8)
  81213c:	003f8406 	br	811f50 <_free_r+0xb4>
  812140:	1005d0ba 	srai	r2,r2,2
  812144:	00c00044 	movi	r3,1
  812148:	51000117 	ldw	r4,4(r10)
  81214c:	1886983a 	sll	r3,r3,r2
  812150:	20c8b03a 	or	r4,r4,r3
  812154:	51000115 	stw	r4,4(r10)
  812158:	003fa706 	br	811ff8 <_free_r+0x15c>
  81215c:	00801504 	movi	r2,84
  812160:	10c00436 	bltu	r2,r3,812174 <_free_r+0x2d8>
  812164:	3804d33a 	srli	r2,r7,12
  812168:	10801b84 	addi	r2,r2,110
  81216c:	100690fa 	slli	r3,r2,3
  812170:	003f9706 	br	811fd0 <_free_r+0x134>
  812174:	00805504 	movi	r2,340
  812178:	10c00436 	bltu	r2,r3,81218c <_free_r+0x2f0>
  81217c:	3804d3fa 	srli	r2,r7,15
  812180:	10801dc4 	addi	r2,r2,119
  812184:	100690fa 	slli	r3,r2,3
  812188:	003f9106 	br	811fd0 <_free_r+0x134>
  81218c:	00815504 	movi	r2,1364
  812190:	10c0032e 	bgeu	r2,r3,8121a0 <_free_r+0x304>
  812194:	00801f84 	movi	r2,126
  812198:	00c0fc04 	movi	r3,1008
  81219c:	003f8c06 	br	811fd0 <_free_r+0x134>
  8121a0:	3804d4ba 	srli	r2,r7,18
  8121a4:	10801f04 	addi	r2,r2,124
  8121a8:	100690fa 	slli	r3,r2,3
  8121ac:	003f8806 	br	811fd0 <_free_r+0x134>

008121b0 <__sfvwrite_r>:
  8121b0:	30800217 	ldw	r2,8(r6)
  8121b4:	defff504 	addi	sp,sp,-44
  8121b8:	df000915 	stw	fp,36(sp)
  8121bc:	dd800715 	stw	r22,28(sp)
  8121c0:	dc800315 	stw	r18,12(sp)
  8121c4:	dfc00a15 	stw	ra,40(sp)
  8121c8:	ddc00815 	stw	r23,32(sp)
  8121cc:	dd400615 	stw	r21,24(sp)
  8121d0:	dd000515 	stw	r20,20(sp)
  8121d4:	dcc00415 	stw	r19,16(sp)
  8121d8:	dc400215 	stw	r17,8(sp)
  8121dc:	dc000115 	stw	r16,4(sp)
  8121e0:	302d883a 	mov	r22,r6
  8121e4:	2039883a 	mov	fp,r4
  8121e8:	2825883a 	mov	r18,r5
  8121ec:	10001c26 	beq	r2,zero,812260 <__sfvwrite_r+0xb0>
  8121f0:	29c0030b 	ldhu	r7,12(r5)
  8121f4:	3880020c 	andi	r2,r7,8
  8121f8:	10002726 	beq	r2,zero,812298 <__sfvwrite_r+0xe8>
  8121fc:	28800417 	ldw	r2,16(r5)
  812200:	10002526 	beq	r2,zero,812298 <__sfvwrite_r+0xe8>
  812204:	3880008c 	andi	r2,r7,2
  812208:	b5400017 	ldw	r21,0(r22)
  81220c:	10002826 	beq	r2,zero,8122b0 <__sfvwrite_r+0x100>
  812210:	0021883a 	mov	r16,zero
  812214:	0023883a 	mov	r17,zero
  812218:	880d883a 	mov	r6,r17
  81221c:	e009883a 	mov	r4,fp
  812220:	00810004 	movi	r2,1024
  812224:	80006e26 	beq	r16,zero,8123e0 <__sfvwrite_r+0x230>
  812228:	800f883a 	mov	r7,r16
  81222c:	91400717 	ldw	r5,28(r18)
  812230:	1400012e 	bgeu	r2,r16,812238 <__sfvwrite_r+0x88>
  812234:	100f883a 	mov	r7,r2
  812238:	90c00917 	ldw	r3,36(r18)
  81223c:	183ee83a 	callr	r3
  812240:	1007883a 	mov	r3,r2
  812244:	80a1c83a 	sub	r16,r16,r2
  812248:	88a3883a 	add	r17,r17,r2
  81224c:	00806d0e 	bge	zero,r2,812404 <__sfvwrite_r+0x254>
  812250:	b0800217 	ldw	r2,8(r22)
  812254:	10c5c83a 	sub	r2,r2,r3
  812258:	b0800215 	stw	r2,8(r22)
  81225c:	103fee1e 	bne	r2,zero,812218 <__sfvwrite_r+0x68>
  812260:	0009883a 	mov	r4,zero
  812264:	2005883a 	mov	r2,r4
  812268:	dfc00a17 	ldw	ra,40(sp)
  81226c:	df000917 	ldw	fp,36(sp)
  812270:	ddc00817 	ldw	r23,32(sp)
  812274:	dd800717 	ldw	r22,28(sp)
  812278:	dd400617 	ldw	r21,24(sp)
  81227c:	dd000517 	ldw	r20,20(sp)
  812280:	dcc00417 	ldw	r19,16(sp)
  812284:	dc800317 	ldw	r18,12(sp)
  812288:	dc400217 	ldw	r17,8(sp)
  81228c:	dc000117 	ldw	r16,4(sp)
  812290:	dec00b04 	addi	sp,sp,44
  812294:	f800283a 	ret
  812298:	080ff780 	call	80ff78 <__swsetup_r>
  81229c:	1000e41e 	bne	r2,zero,812630 <__sfvwrite_r+0x480>
  8122a0:	91c0030b 	ldhu	r7,12(r18)
  8122a4:	b5400017 	ldw	r21,0(r22)
  8122a8:	3880008c 	andi	r2,r7,2
  8122ac:	103fd81e 	bne	r2,zero,812210 <__sfvwrite_r+0x60>
  8122b0:	3880004c 	andi	r2,r7,1
  8122b4:	1005003a 	cmpeq	r2,r2,zero
  8122b8:	10005726 	beq	r2,zero,812418 <__sfvwrite_r+0x268>
  8122bc:	0029883a 	mov	r20,zero
  8122c0:	002f883a 	mov	r23,zero
  8122c4:	a0004226 	beq	r20,zero,8123d0 <__sfvwrite_r+0x220>
  8122c8:	3880800c 	andi	r2,r7,512
  8122cc:	94000217 	ldw	r16,8(r18)
  8122d0:	10008b26 	beq	r2,zero,812500 <__sfvwrite_r+0x350>
  8122d4:	800d883a 	mov	r6,r16
  8122d8:	a400a536 	bltu	r20,r16,812570 <__sfvwrite_r+0x3c0>
  8122dc:	3881200c 	andi	r2,r7,1152
  8122e0:	10002726 	beq	r2,zero,812380 <__sfvwrite_r+0x1d0>
  8122e4:	90800517 	ldw	r2,20(r18)
  8122e8:	92000417 	ldw	r8,16(r18)
  8122ec:	91400017 	ldw	r5,0(r18)
  8122f0:	1087883a 	add	r3,r2,r2
  8122f4:	1887883a 	add	r3,r3,r2
  8122f8:	1808d7fa 	srli	r4,r3,31
  8122fc:	2a21c83a 	sub	r16,r5,r8
  812300:	80800044 	addi	r2,r16,1
  812304:	20c9883a 	add	r4,r4,r3
  812308:	2027d07a 	srai	r19,r4,1
  81230c:	a085883a 	add	r2,r20,r2
  812310:	980d883a 	mov	r6,r19
  812314:	9880022e 	bgeu	r19,r2,812320 <__sfvwrite_r+0x170>
  812318:	1027883a 	mov	r19,r2
  81231c:	100d883a 	mov	r6,r2
  812320:	3881000c 	andi	r2,r7,1024
  812324:	1000b826 	beq	r2,zero,812608 <__sfvwrite_r+0x458>
  812328:	300b883a 	mov	r5,r6
  81232c:	e009883a 	mov	r4,fp
  812330:	080d63c0 	call	80d63c <_malloc_r>
  812334:	10003126 	beq	r2,zero,8123fc <__sfvwrite_r+0x24c>
  812338:	91400417 	ldw	r5,16(r18)
  81233c:	1009883a 	mov	r4,r2
  812340:	800d883a 	mov	r6,r16
  812344:	1023883a 	mov	r17,r2
  812348:	080dd7c0 	call	80dd7c <memcpy>
  81234c:	90c0030b 	ldhu	r3,12(r18)
  812350:	00beffc4 	movi	r2,-1025
  812354:	1886703a 	and	r3,r3,r2
  812358:	18c02014 	ori	r3,r3,128
  81235c:	90c0030d 	sth	r3,12(r18)
  812360:	9c07c83a 	sub	r3,r19,r16
  812364:	8c05883a 	add	r2,r17,r16
  812368:	a00d883a 	mov	r6,r20
  81236c:	a021883a 	mov	r16,r20
  812370:	90800015 	stw	r2,0(r18)
  812374:	90c00215 	stw	r3,8(r18)
  812378:	94400415 	stw	r17,16(r18)
  81237c:	94c00515 	stw	r19,20(r18)
  812380:	91000017 	ldw	r4,0(r18)
  812384:	b80b883a 	mov	r5,r23
  812388:	a023883a 	mov	r17,r20
  81238c:	0812b080 	call	812b08 <memmove>
  812390:	90c00217 	ldw	r3,8(r18)
  812394:	90800017 	ldw	r2,0(r18)
  812398:	a027883a 	mov	r19,r20
  81239c:	1c07c83a 	sub	r3,r3,r16
  8123a0:	1405883a 	add	r2,r2,r16
  8123a4:	90c00215 	stw	r3,8(r18)
  8123a8:	a021883a 	mov	r16,r20
  8123ac:	90800015 	stw	r2,0(r18)
  8123b0:	b0800217 	ldw	r2,8(r22)
  8123b4:	1405c83a 	sub	r2,r2,r16
  8123b8:	b0800215 	stw	r2,8(r22)
  8123bc:	103fa826 	beq	r2,zero,812260 <__sfvwrite_r+0xb0>
  8123c0:	a469c83a 	sub	r20,r20,r17
  8123c4:	91c0030b 	ldhu	r7,12(r18)
  8123c8:	bcef883a 	add	r23,r23,r19
  8123cc:	a03fbe1e 	bne	r20,zero,8122c8 <__sfvwrite_r+0x118>
  8123d0:	adc00017 	ldw	r23,0(r21)
  8123d4:	ad000117 	ldw	r20,4(r21)
  8123d8:	ad400204 	addi	r21,r21,8
  8123dc:	003fb906 	br	8122c4 <__sfvwrite_r+0x114>
  8123e0:	ac400017 	ldw	r17,0(r21)
  8123e4:	ac000117 	ldw	r16,4(r21)
  8123e8:	ad400204 	addi	r21,r21,8
  8123ec:	003f8a06 	br	812218 <__sfvwrite_r+0x68>
  8123f0:	91400417 	ldw	r5,16(r18)
  8123f4:	e009883a 	mov	r4,fp
  8123f8:	0811e9c0 	call	811e9c <_free_r>
  8123fc:	00800304 	movi	r2,12
  812400:	e0800015 	stw	r2,0(fp)
  812404:	9080030b 	ldhu	r2,12(r18)
  812408:	013fffc4 	movi	r4,-1
  81240c:	10801014 	ori	r2,r2,64
  812410:	9080030d 	sth	r2,12(r18)
  812414:	003f9306 	br	812264 <__sfvwrite_r+0xb4>
  812418:	0027883a 	mov	r19,zero
  81241c:	002f883a 	mov	r23,zero
  812420:	d8000015 	stw	zero,0(sp)
  812424:	0029883a 	mov	r20,zero
  812428:	98001e26 	beq	r19,zero,8124a4 <__sfvwrite_r+0x2f4>
  81242c:	d8c00017 	ldw	r3,0(sp)
  812430:	1804c03a 	cmpne	r2,r3,zero
  812434:	10005e26 	beq	r2,zero,8125b0 <__sfvwrite_r+0x400>
  812438:	9821883a 	mov	r16,r19
  81243c:	a4c0012e 	bgeu	r20,r19,812444 <__sfvwrite_r+0x294>
  812440:	a021883a 	mov	r16,r20
  812444:	91000017 	ldw	r4,0(r18)
  812448:	90800417 	ldw	r2,16(r18)
  81244c:	91800217 	ldw	r6,8(r18)
  812450:	91c00517 	ldw	r7,20(r18)
  812454:	1100022e 	bgeu	r2,r4,812460 <__sfvwrite_r+0x2b0>
  812458:	31e3883a 	add	r17,r6,r7
  81245c:	8c001616 	blt	r17,r16,8124b8 <__sfvwrite_r+0x308>
  812460:	81c03816 	blt	r16,r7,812544 <__sfvwrite_r+0x394>
  812464:	90c00917 	ldw	r3,36(r18)
  812468:	91400717 	ldw	r5,28(r18)
  81246c:	e009883a 	mov	r4,fp
  812470:	b80d883a 	mov	r6,r23
  812474:	183ee83a 	callr	r3
  812478:	1023883a 	mov	r17,r2
  81247c:	00bfe10e 	bge	zero,r2,812404 <__sfvwrite_r+0x254>
  812480:	a469c83a 	sub	r20,r20,r17
  812484:	a0001826 	beq	r20,zero,8124e8 <__sfvwrite_r+0x338>
  812488:	b0800217 	ldw	r2,8(r22)
  81248c:	1445c83a 	sub	r2,r2,r17
  812490:	b0800215 	stw	r2,8(r22)
  812494:	103f7226 	beq	r2,zero,812260 <__sfvwrite_r+0xb0>
  812498:	9c67c83a 	sub	r19,r19,r17
  81249c:	bc6f883a 	add	r23,r23,r17
  8124a0:	983fe21e 	bne	r19,zero,81242c <__sfvwrite_r+0x27c>
  8124a4:	adc00017 	ldw	r23,0(r21)
  8124a8:	acc00117 	ldw	r19,4(r21)
  8124ac:	ad400204 	addi	r21,r21,8
  8124b0:	d8000015 	stw	zero,0(sp)
  8124b4:	003fdc06 	br	812428 <__sfvwrite_r+0x278>
  8124b8:	b80b883a 	mov	r5,r23
  8124bc:	880d883a 	mov	r6,r17
  8124c0:	0812b080 	call	812b08 <memmove>
  8124c4:	90c00017 	ldw	r3,0(r18)
  8124c8:	e009883a 	mov	r4,fp
  8124cc:	900b883a 	mov	r5,r18
  8124d0:	1c47883a 	add	r3,r3,r17
  8124d4:	90c00015 	stw	r3,0(r18)
  8124d8:	08118800 	call	811880 <_fflush_r>
  8124dc:	103fc91e 	bne	r2,zero,812404 <__sfvwrite_r+0x254>
  8124e0:	a469c83a 	sub	r20,r20,r17
  8124e4:	a03fe81e 	bne	r20,zero,812488 <__sfvwrite_r+0x2d8>
  8124e8:	e009883a 	mov	r4,fp
  8124ec:	900b883a 	mov	r5,r18
  8124f0:	08118800 	call	811880 <_fflush_r>
  8124f4:	103fc31e 	bne	r2,zero,812404 <__sfvwrite_r+0x254>
  8124f8:	d8000015 	stw	zero,0(sp)
  8124fc:	003fe206 	br	812488 <__sfvwrite_r+0x2d8>
  812500:	91000017 	ldw	r4,0(r18)
  812504:	90800417 	ldw	r2,16(r18)
  812508:	1100022e 	bgeu	r2,r4,812514 <__sfvwrite_r+0x364>
  81250c:	8023883a 	mov	r17,r16
  812510:	85003136 	bltu	r16,r20,8125d8 <__sfvwrite_r+0x428>
  812514:	91c00517 	ldw	r7,20(r18)
  812518:	a1c01836 	bltu	r20,r7,81257c <__sfvwrite_r+0x3cc>
  81251c:	90c00917 	ldw	r3,36(r18)
  812520:	91400717 	ldw	r5,28(r18)
  812524:	e009883a 	mov	r4,fp
  812528:	b80d883a 	mov	r6,r23
  81252c:	183ee83a 	callr	r3
  812530:	1021883a 	mov	r16,r2
  812534:	00bfb30e 	bge	zero,r2,812404 <__sfvwrite_r+0x254>
  812538:	1023883a 	mov	r17,r2
  81253c:	1027883a 	mov	r19,r2
  812540:	003f9b06 	br	8123b0 <__sfvwrite_r+0x200>
  812544:	b80b883a 	mov	r5,r23
  812548:	800d883a 	mov	r6,r16
  81254c:	0812b080 	call	812b08 <memmove>
  812550:	90c00217 	ldw	r3,8(r18)
  812554:	90800017 	ldw	r2,0(r18)
  812558:	8023883a 	mov	r17,r16
  81255c:	1c07c83a 	sub	r3,r3,r16
  812560:	1405883a 	add	r2,r2,r16
  812564:	90c00215 	stw	r3,8(r18)
  812568:	90800015 	stw	r2,0(r18)
  81256c:	003fc406 	br	812480 <__sfvwrite_r+0x2d0>
  812570:	a00d883a 	mov	r6,r20
  812574:	a021883a 	mov	r16,r20
  812578:	003f8106 	br	812380 <__sfvwrite_r+0x1d0>
  81257c:	b80b883a 	mov	r5,r23
  812580:	a00d883a 	mov	r6,r20
  812584:	0812b080 	call	812b08 <memmove>
  812588:	90c00217 	ldw	r3,8(r18)
  81258c:	90800017 	ldw	r2,0(r18)
  812590:	a021883a 	mov	r16,r20
  812594:	1d07c83a 	sub	r3,r3,r20
  812598:	1505883a 	add	r2,r2,r20
  81259c:	a023883a 	mov	r17,r20
  8125a0:	a027883a 	mov	r19,r20
  8125a4:	90c00215 	stw	r3,8(r18)
  8125a8:	90800015 	stw	r2,0(r18)
  8125ac:	003f8006 	br	8123b0 <__sfvwrite_r+0x200>
  8125b0:	b809883a 	mov	r4,r23
  8125b4:	01400284 	movi	r5,10
  8125b8:	980d883a 	mov	r6,r19
  8125bc:	0812a240 	call	812a24 <memchr>
  8125c0:	10001726 	beq	r2,zero,812620 <__sfvwrite_r+0x470>
  8125c4:	15c5c83a 	sub	r2,r2,r23
  8125c8:	15000044 	addi	r20,r2,1
  8125cc:	00800044 	movi	r2,1
  8125d0:	d8800015 	stw	r2,0(sp)
  8125d4:	003f9806 	br	812438 <__sfvwrite_r+0x288>
  8125d8:	b80b883a 	mov	r5,r23
  8125dc:	800d883a 	mov	r6,r16
  8125e0:	0812b080 	call	812b08 <memmove>
  8125e4:	90c00017 	ldw	r3,0(r18)
  8125e8:	e009883a 	mov	r4,fp
  8125ec:	900b883a 	mov	r5,r18
  8125f0:	1c07883a 	add	r3,r3,r16
  8125f4:	90c00015 	stw	r3,0(r18)
  8125f8:	8027883a 	mov	r19,r16
  8125fc:	08118800 	call	811880 <_fflush_r>
  812600:	103f6b26 	beq	r2,zero,8123b0 <__sfvwrite_r+0x200>
  812604:	003f7f06 	br	812404 <__sfvwrite_r+0x254>
  812608:	400b883a 	mov	r5,r8
  81260c:	e009883a 	mov	r4,fp
  812610:	0813e600 	call	813e60 <_realloc_r>
  812614:	103f7626 	beq	r2,zero,8123f0 <__sfvwrite_r+0x240>
  812618:	1023883a 	mov	r17,r2
  81261c:	003f5006 	br	812360 <__sfvwrite_r+0x1b0>
  812620:	00c00044 	movi	r3,1
  812624:	9d000044 	addi	r20,r19,1
  812628:	d8c00015 	stw	r3,0(sp)
  81262c:	003f8206 	br	812438 <__sfvwrite_r+0x288>
  812630:	9080030b 	ldhu	r2,12(r18)
  812634:	00c00244 	movi	r3,9
  812638:	013fffc4 	movi	r4,-1
  81263c:	10801014 	ori	r2,r2,64
  812640:	9080030d 	sth	r2,12(r18)
  812644:	e0c00015 	stw	r3,0(fp)
  812648:	003f0606 	br	812264 <__sfvwrite_r+0xb4>

0081264c <_fwalk_reent>:
  81264c:	defff704 	addi	sp,sp,-36
  812650:	dcc00315 	stw	r19,12(sp)
  812654:	24c0b804 	addi	r19,r4,736
  812658:	dd800615 	stw	r22,24(sp)
  81265c:	dd400515 	stw	r21,20(sp)
  812660:	dfc00815 	stw	ra,32(sp)
  812664:	ddc00715 	stw	r23,28(sp)
  812668:	dd000415 	stw	r20,16(sp)
  81266c:	dc800215 	stw	r18,8(sp)
  812670:	dc400115 	stw	r17,4(sp)
  812674:	dc000015 	stw	r16,0(sp)
  812678:	202b883a 	mov	r21,r4
  81267c:	282d883a 	mov	r22,r5
  812680:	0811b080 	call	811b08 <__sfp_lock_acquire>
  812684:	98002126 	beq	r19,zero,81270c <_fwalk_reent+0xc0>
  812688:	002f883a 	mov	r23,zero
  81268c:	9c800117 	ldw	r18,4(r19)
  812690:	9c000217 	ldw	r16,8(r19)
  812694:	90bfffc4 	addi	r2,r18,-1
  812698:	10000d16 	blt	r2,zero,8126d0 <_fwalk_reent+0x84>
  81269c:	0023883a 	mov	r17,zero
  8126a0:	053fffc4 	movi	r20,-1
  8126a4:	8080030f 	ldh	r2,12(r16)
  8126a8:	8c400044 	addi	r17,r17,1
  8126ac:	10000626 	beq	r2,zero,8126c8 <_fwalk_reent+0x7c>
  8126b0:	8080038f 	ldh	r2,14(r16)
  8126b4:	800b883a 	mov	r5,r16
  8126b8:	a809883a 	mov	r4,r21
  8126bc:	15000226 	beq	r2,r20,8126c8 <_fwalk_reent+0x7c>
  8126c0:	b03ee83a 	callr	r22
  8126c4:	b8aeb03a 	or	r23,r23,r2
  8126c8:	84001704 	addi	r16,r16,92
  8126cc:	947ff51e 	bne	r18,r17,8126a4 <_fwalk_reent+0x58>
  8126d0:	9cc00017 	ldw	r19,0(r19)
  8126d4:	983fed1e 	bne	r19,zero,81268c <_fwalk_reent+0x40>
  8126d8:	0811b0c0 	call	811b0c <__sfp_lock_release>
  8126dc:	b805883a 	mov	r2,r23
  8126e0:	dfc00817 	ldw	ra,32(sp)
  8126e4:	ddc00717 	ldw	r23,28(sp)
  8126e8:	dd800617 	ldw	r22,24(sp)
  8126ec:	dd400517 	ldw	r21,20(sp)
  8126f0:	dd000417 	ldw	r20,16(sp)
  8126f4:	dcc00317 	ldw	r19,12(sp)
  8126f8:	dc800217 	ldw	r18,8(sp)
  8126fc:	dc400117 	ldw	r17,4(sp)
  812700:	dc000017 	ldw	r16,0(sp)
  812704:	dec00904 	addi	sp,sp,36
  812708:	f800283a 	ret
  81270c:	002f883a 	mov	r23,zero
  812710:	003ff106 	br	8126d8 <_fwalk_reent+0x8c>

00812714 <_fwalk>:
  812714:	defff804 	addi	sp,sp,-32
  812718:	dcc00315 	stw	r19,12(sp)
  81271c:	24c0b804 	addi	r19,r4,736
  812720:	dd400515 	stw	r21,20(sp)
  812724:	dfc00715 	stw	ra,28(sp)
  812728:	dd800615 	stw	r22,24(sp)
  81272c:	dd000415 	stw	r20,16(sp)
  812730:	dc800215 	stw	r18,8(sp)
  812734:	dc400115 	stw	r17,4(sp)
  812738:	dc000015 	stw	r16,0(sp)
  81273c:	282b883a 	mov	r21,r5
  812740:	0811b080 	call	811b08 <__sfp_lock_acquire>
  812744:	98001f26 	beq	r19,zero,8127c4 <_fwalk+0xb0>
  812748:	002d883a 	mov	r22,zero
  81274c:	9c800117 	ldw	r18,4(r19)
  812750:	9c000217 	ldw	r16,8(r19)
  812754:	90bfffc4 	addi	r2,r18,-1
  812758:	10000c16 	blt	r2,zero,81278c <_fwalk+0x78>
  81275c:	0023883a 	mov	r17,zero
  812760:	053fffc4 	movi	r20,-1
  812764:	8080030f 	ldh	r2,12(r16)
  812768:	8c400044 	addi	r17,r17,1
  81276c:	10000526 	beq	r2,zero,812784 <_fwalk+0x70>
  812770:	8080038f 	ldh	r2,14(r16)
  812774:	8009883a 	mov	r4,r16
  812778:	15000226 	beq	r2,r20,812784 <_fwalk+0x70>
  81277c:	a83ee83a 	callr	r21
  812780:	b0acb03a 	or	r22,r22,r2
  812784:	84001704 	addi	r16,r16,92
  812788:	947ff61e 	bne	r18,r17,812764 <_fwalk+0x50>
  81278c:	9cc00017 	ldw	r19,0(r19)
  812790:	983fee1e 	bne	r19,zero,81274c <_fwalk+0x38>
  812794:	0811b0c0 	call	811b0c <__sfp_lock_release>
  812798:	b005883a 	mov	r2,r22
  81279c:	dfc00717 	ldw	ra,28(sp)
  8127a0:	dd800617 	ldw	r22,24(sp)
  8127a4:	dd400517 	ldw	r21,20(sp)
  8127a8:	dd000417 	ldw	r20,16(sp)
  8127ac:	dcc00317 	ldw	r19,12(sp)
  8127b0:	dc800217 	ldw	r18,8(sp)
  8127b4:	dc400117 	ldw	r17,4(sp)
  8127b8:	dc000017 	ldw	r16,0(sp)
  8127bc:	dec00804 	addi	sp,sp,32
  8127c0:	f800283a 	ret
  8127c4:	002d883a 	mov	r22,zero
  8127c8:	003ff206 	br	812794 <_fwalk+0x80>

008127cc <__locale_charset>:
  8127cc:	d0a00517 	ldw	r2,-32748(gp)
  8127d0:	f800283a 	ret

008127d4 <_localeconv_r>:
  8127d4:	008020b4 	movhi	r2,130
  8127d8:	108c7c04 	addi	r2,r2,12784
  8127dc:	f800283a 	ret

008127e0 <localeconv>:
  8127e0:	008020b4 	movhi	r2,130
  8127e4:	1093eb04 	addi	r2,r2,20396
  8127e8:	11000017 	ldw	r4,0(r2)
  8127ec:	08127d41 	jmpi	8127d4 <_localeconv_r>

008127f0 <_setlocale_r>:
  8127f0:	defffc04 	addi	sp,sp,-16
  8127f4:	00c020b4 	movhi	r3,130
  8127f8:	18cc7704 	addi	r3,r3,12764
  8127fc:	dc800215 	stw	r18,8(sp)
  812800:	dc400115 	stw	r17,4(sp)
  812804:	dc000015 	stw	r16,0(sp)
  812808:	2023883a 	mov	r17,r4
  81280c:	2825883a 	mov	r18,r5
  812810:	dfc00315 	stw	ra,12(sp)
  812814:	3021883a 	mov	r16,r6
  812818:	3009883a 	mov	r4,r6
  81281c:	180b883a 	mov	r5,r3
  812820:	30000926 	beq	r6,zero,812848 <_setlocale_r+0x58>
  812824:	08146100 	call	814610 <strcmp>
  812828:	8009883a 	mov	r4,r16
  81282c:	014020b4 	movhi	r5,130
  812830:	294c6204 	addi	r5,r5,12680
  812834:	10000b1e 	bne	r2,zero,812864 <_setlocale_r+0x74>
  812838:	8c000d15 	stw	r16,52(r17)
  81283c:	8c800c15 	stw	r18,48(r17)
  812840:	00c020b4 	movhi	r3,130
  812844:	18cc7704 	addi	r3,r3,12764
  812848:	1805883a 	mov	r2,r3
  81284c:	dfc00317 	ldw	ra,12(sp)
  812850:	dc800217 	ldw	r18,8(sp)
  812854:	dc400117 	ldw	r17,4(sp)
  812858:	dc000017 	ldw	r16,0(sp)
  81285c:	dec00404 	addi	sp,sp,16
  812860:	f800283a 	ret
  812864:	08146100 	call	814610 <strcmp>
  812868:	0007883a 	mov	r3,zero
  81286c:	103ff226 	beq	r2,zero,812838 <_setlocale_r+0x48>
  812870:	003ff506 	br	812848 <_setlocale_r+0x58>

00812874 <setlocale>:
  812874:	018020b4 	movhi	r6,130
  812878:	3193eb04 	addi	r6,r6,20396
  81287c:	2007883a 	mov	r3,r4
  812880:	31000017 	ldw	r4,0(r6)
  812884:	280d883a 	mov	r6,r5
  812888:	180b883a 	mov	r5,r3
  81288c:	08127f01 	jmpi	8127f0 <_setlocale_r>

00812890 <__smakebuf_r>:
  812890:	2880030b 	ldhu	r2,12(r5)
  812894:	deffed04 	addi	sp,sp,-76
  812898:	dc401015 	stw	r17,64(sp)
  81289c:	1080008c 	andi	r2,r2,2
  8128a0:	dc000f15 	stw	r16,60(sp)
  8128a4:	dfc01215 	stw	ra,72(sp)
  8128a8:	dc801115 	stw	r18,68(sp)
  8128ac:	2821883a 	mov	r16,r5
  8128b0:	2023883a 	mov	r17,r4
  8128b4:	10000b26 	beq	r2,zero,8128e4 <__smakebuf_r+0x54>
  8128b8:	28c010c4 	addi	r3,r5,67
  8128bc:	00800044 	movi	r2,1
  8128c0:	28800515 	stw	r2,20(r5)
  8128c4:	28c00415 	stw	r3,16(r5)
  8128c8:	28c00015 	stw	r3,0(r5)
  8128cc:	dfc01217 	ldw	ra,72(sp)
  8128d0:	dc801117 	ldw	r18,68(sp)
  8128d4:	dc401017 	ldw	r17,64(sp)
  8128d8:	dc000f17 	ldw	r16,60(sp)
  8128dc:	dec01304 	addi	sp,sp,76
  8128e0:	f800283a 	ret
  8128e4:	2940038f 	ldh	r5,14(r5)
  8128e8:	28002116 	blt	r5,zero,812970 <__smakebuf_r+0xe0>
  8128ec:	d80d883a 	mov	r6,sp
  8128f0:	0814ad80 	call	814ad8 <_fstat_r>
  8128f4:	10001e16 	blt	r2,zero,812970 <__smakebuf_r+0xe0>
  8128f8:	d8800117 	ldw	r2,4(sp)
  8128fc:	00e00014 	movui	r3,32768
  812900:	113c000c 	andi	r4,r2,61440
  812904:	20c03126 	beq	r4,r3,8129cc <__smakebuf_r+0x13c>
  812908:	8080030b 	ldhu	r2,12(r16)
  81290c:	00c80004 	movi	r3,8192
  812910:	10820014 	ori	r2,r2,2048
  812914:	8080030d 	sth	r2,12(r16)
  812918:	20c01e26 	beq	r4,r3,812994 <__smakebuf_r+0x104>
  81291c:	04810004 	movi	r18,1024
  812920:	8809883a 	mov	r4,r17
  812924:	900b883a 	mov	r5,r18
  812928:	080d63c0 	call	80d63c <_malloc_r>
  81292c:	1009883a 	mov	r4,r2
  812930:	10003126 	beq	r2,zero,8129f8 <__smakebuf_r+0x168>
  812934:	80c0030b 	ldhu	r3,12(r16)
  812938:	00802074 	movhi	r2,129
  81293c:	1086ff04 	addi	r2,r2,7164
  812940:	88800f15 	stw	r2,60(r17)
  812944:	18c02014 	ori	r3,r3,128
  812948:	84800515 	stw	r18,20(r16)
  81294c:	80c0030d 	sth	r3,12(r16)
  812950:	81000415 	stw	r4,16(r16)
  812954:	81000015 	stw	r4,0(r16)
  812958:	dfc01217 	ldw	ra,72(sp)
  81295c:	dc801117 	ldw	r18,68(sp)
  812960:	dc401017 	ldw	r17,64(sp)
  812964:	dc000f17 	ldw	r16,60(sp)
  812968:	dec01304 	addi	sp,sp,76
  81296c:	f800283a 	ret
  812970:	80c0030b 	ldhu	r3,12(r16)
  812974:	1880200c 	andi	r2,r3,128
  812978:	10000426 	beq	r2,zero,81298c <__smakebuf_r+0xfc>
  81297c:	04801004 	movi	r18,64
  812980:	18820014 	ori	r2,r3,2048
  812984:	8080030d 	sth	r2,12(r16)
  812988:	003fe506 	br	812920 <__smakebuf_r+0x90>
  81298c:	04810004 	movi	r18,1024
  812990:	003ffb06 	br	812980 <__smakebuf_r+0xf0>
  812994:	8140038f 	ldh	r5,14(r16)
  812998:	8809883a 	mov	r4,r17
  81299c:	0814b4c0 	call	814b4c <_isatty_r>
  8129a0:	103fde26 	beq	r2,zero,81291c <__smakebuf_r+0x8c>
  8129a4:	8080030b 	ldhu	r2,12(r16)
  8129a8:	80c010c4 	addi	r3,r16,67
  8129ac:	04810004 	movi	r18,1024
  8129b0:	10800054 	ori	r2,r2,1
  8129b4:	8080030d 	sth	r2,12(r16)
  8129b8:	00800044 	movi	r2,1
  8129bc:	80c00415 	stw	r3,16(r16)
  8129c0:	80800515 	stw	r2,20(r16)
  8129c4:	80c00015 	stw	r3,0(r16)
  8129c8:	003fd506 	br	812920 <__smakebuf_r+0x90>
  8129cc:	80c00a17 	ldw	r3,40(r16)
  8129d0:	00802074 	movhi	r2,129
  8129d4:	10913304 	addi	r2,r2,17612
  8129d8:	18bfcb1e 	bne	r3,r2,812908 <__smakebuf_r+0x78>
  8129dc:	8080030b 	ldhu	r2,12(r16)
  8129e0:	00c10004 	movi	r3,1024
  8129e4:	1825883a 	mov	r18,r3
  8129e8:	10c4b03a 	or	r2,r2,r3
  8129ec:	8080030d 	sth	r2,12(r16)
  8129f0:	80c01315 	stw	r3,76(r16)
  8129f4:	003fca06 	br	812920 <__smakebuf_r+0x90>
  8129f8:	8100030b 	ldhu	r4,12(r16)
  8129fc:	2080800c 	andi	r2,r4,512
  812a00:	103fb21e 	bne	r2,zero,8128cc <__smakebuf_r+0x3c>
  812a04:	80c010c4 	addi	r3,r16,67
  812a08:	21000094 	ori	r4,r4,2
  812a0c:	00800044 	movi	r2,1
  812a10:	80800515 	stw	r2,20(r16)
  812a14:	8100030d 	sth	r4,12(r16)
  812a18:	80c00415 	stw	r3,16(r16)
  812a1c:	80c00015 	stw	r3,0(r16)
  812a20:	003faa06 	br	8128cc <__smakebuf_r+0x3c>

00812a24 <memchr>:
  812a24:	008000c4 	movi	r2,3
  812a28:	29403fcc 	andi	r5,r5,255
  812a2c:	2007883a 	mov	r3,r4
  812a30:	1180022e 	bgeu	r2,r6,812a3c <memchr+0x18>
  812a34:	2084703a 	and	r2,r4,r2
  812a38:	10000b26 	beq	r2,zero,812a68 <memchr+0x44>
  812a3c:	313fffc4 	addi	r4,r6,-1
  812a40:	3000051e 	bne	r6,zero,812a58 <memchr+0x34>
  812a44:	00002c06 	br	812af8 <memchr+0xd4>
  812a48:	213fffc4 	addi	r4,r4,-1
  812a4c:	00bfffc4 	movi	r2,-1
  812a50:	18c00044 	addi	r3,r3,1
  812a54:	20802826 	beq	r4,r2,812af8 <memchr+0xd4>
  812a58:	18800003 	ldbu	r2,0(r3)
  812a5c:	28bffa1e 	bne	r5,r2,812a48 <memchr+0x24>
  812a60:	1805883a 	mov	r2,r3
  812a64:	f800283a 	ret
  812a68:	0011883a 	mov	r8,zero
  812a6c:	0007883a 	mov	r3,zero
  812a70:	01c00104 	movi	r7,4
  812a74:	4004923a 	slli	r2,r8,8
  812a78:	18c00044 	addi	r3,r3,1
  812a7c:	1151883a 	add	r8,r2,r5
  812a80:	19fffc1e 	bne	r3,r7,812a74 <memchr+0x50>
  812a84:	02bfbff4 	movhi	r10,65279
  812a88:	52bfbfc4 	addi	r10,r10,-257
  812a8c:	02602074 	movhi	r9,32897
  812a90:	4a602004 	addi	r9,r9,-32640
  812a94:	02c000c4 	movi	r11,3
  812a98:	20800017 	ldw	r2,0(r4)
  812a9c:	31bfff04 	addi	r6,r6,-4
  812aa0:	200f883a 	mov	r7,r4
  812aa4:	1204f03a 	xor	r2,r2,r8
  812aa8:	1287883a 	add	r3,r2,r10
  812aac:	1a46703a 	and	r3,r3,r9
  812ab0:	0084303a 	nor	r2,zero,r2
  812ab4:	10c4703a 	and	r2,r2,r3
  812ab8:	10000b26 	beq	r2,zero,812ae8 <memchr+0xc4>
  812abc:	20800003 	ldbu	r2,0(r4)
  812ac0:	28800f26 	beq	r5,r2,812b00 <memchr+0xdc>
  812ac4:	20800043 	ldbu	r2,1(r4)
  812ac8:	21c00044 	addi	r7,r4,1
  812acc:	28800c26 	beq	r5,r2,812b00 <memchr+0xdc>
  812ad0:	20800083 	ldbu	r2,2(r4)
  812ad4:	21c00084 	addi	r7,r4,2
  812ad8:	28800926 	beq	r5,r2,812b00 <memchr+0xdc>
  812adc:	208000c3 	ldbu	r2,3(r4)
  812ae0:	21c000c4 	addi	r7,r4,3
  812ae4:	28800626 	beq	r5,r2,812b00 <memchr+0xdc>
  812ae8:	21000104 	addi	r4,r4,4
  812aec:	59bfea36 	bltu	r11,r6,812a98 <memchr+0x74>
  812af0:	2007883a 	mov	r3,r4
  812af4:	003fd106 	br	812a3c <memchr+0x18>
  812af8:	0005883a 	mov	r2,zero
  812afc:	f800283a 	ret
  812b00:	3805883a 	mov	r2,r7
  812b04:	f800283a 	ret

00812b08 <memmove>:
  812b08:	2807883a 	mov	r3,r5
  812b0c:	2011883a 	mov	r8,r4
  812b10:	29000c2e 	bgeu	r5,r4,812b44 <memmove+0x3c>
  812b14:	298f883a 	add	r7,r5,r6
  812b18:	21c00a2e 	bgeu	r4,r7,812b44 <memmove+0x3c>
  812b1c:	30000726 	beq	r6,zero,812b3c <memmove+0x34>
  812b20:	2187883a 	add	r3,r4,r6
  812b24:	198dc83a 	sub	r6,r3,r6
  812b28:	39ffffc4 	addi	r7,r7,-1
  812b2c:	38800003 	ldbu	r2,0(r7)
  812b30:	18ffffc4 	addi	r3,r3,-1
  812b34:	18800005 	stb	r2,0(r3)
  812b38:	19bffb1e 	bne	r3,r6,812b28 <memmove+0x20>
  812b3c:	2005883a 	mov	r2,r4
  812b40:	f800283a 	ret
  812b44:	01c003c4 	movi	r7,15
  812b48:	39800a36 	bltu	r7,r6,812b74 <memmove+0x6c>
  812b4c:	303ffb26 	beq	r6,zero,812b3c <memmove+0x34>
  812b50:	400f883a 	mov	r7,r8
  812b54:	320d883a 	add	r6,r6,r8
  812b58:	28800003 	ldbu	r2,0(r5)
  812b5c:	29400044 	addi	r5,r5,1
  812b60:	38800005 	stb	r2,0(r7)
  812b64:	39c00044 	addi	r7,r7,1
  812b68:	39bffb1e 	bne	r7,r6,812b58 <memmove+0x50>
  812b6c:	2005883a 	mov	r2,r4
  812b70:	f800283a 	ret
  812b74:	1904b03a 	or	r2,r3,r4
  812b78:	108000cc 	andi	r2,r2,3
  812b7c:	103ff31e 	bne	r2,zero,812b4c <memmove+0x44>
  812b80:	3811883a 	mov	r8,r7
  812b84:	180b883a 	mov	r5,r3
  812b88:	200f883a 	mov	r7,r4
  812b8c:	28c00017 	ldw	r3,0(r5)
  812b90:	31bffc04 	addi	r6,r6,-16
  812b94:	38c00015 	stw	r3,0(r7)
  812b98:	28800117 	ldw	r2,4(r5)
  812b9c:	38800115 	stw	r2,4(r7)
  812ba0:	28c00217 	ldw	r3,8(r5)
  812ba4:	38c00215 	stw	r3,8(r7)
  812ba8:	28800317 	ldw	r2,12(r5)
  812bac:	29400404 	addi	r5,r5,16
  812bb0:	38800315 	stw	r2,12(r7)
  812bb4:	39c00404 	addi	r7,r7,16
  812bb8:	41bff436 	bltu	r8,r6,812b8c <memmove+0x84>
  812bbc:	008000c4 	movi	r2,3
  812bc0:	1180072e 	bgeu	r2,r6,812be0 <memmove+0xd8>
  812bc4:	1007883a 	mov	r3,r2
  812bc8:	28800017 	ldw	r2,0(r5)
  812bcc:	31bfff04 	addi	r6,r6,-4
  812bd0:	29400104 	addi	r5,r5,4
  812bd4:	38800015 	stw	r2,0(r7)
  812bd8:	39c00104 	addi	r7,r7,4
  812bdc:	19bffa36 	bltu	r3,r6,812bc8 <memmove+0xc0>
  812be0:	3811883a 	mov	r8,r7
  812be4:	003fd906 	br	812b4c <memmove+0x44>

00812be8 <memset>:
  812be8:	008000c4 	movi	r2,3
  812bec:	29403fcc 	andi	r5,r5,255
  812bf0:	2007883a 	mov	r3,r4
  812bf4:	1180022e 	bgeu	r2,r6,812c00 <memset+0x18>
  812bf8:	2084703a 	and	r2,r4,r2
  812bfc:	10000826 	beq	r2,zero,812c20 <memset+0x38>
  812c00:	30000526 	beq	r6,zero,812c18 <memset+0x30>
  812c04:	2805883a 	mov	r2,r5
  812c08:	30cd883a 	add	r6,r6,r3
  812c0c:	18800005 	stb	r2,0(r3)
  812c10:	18c00044 	addi	r3,r3,1
  812c14:	19bffd1e 	bne	r3,r6,812c0c <memset+0x24>
  812c18:	2005883a 	mov	r2,r4
  812c1c:	f800283a 	ret
  812c20:	2804923a 	slli	r2,r5,8
  812c24:	020003c4 	movi	r8,15
  812c28:	200f883a 	mov	r7,r4
  812c2c:	2884b03a 	or	r2,r5,r2
  812c30:	1006943a 	slli	r3,r2,16
  812c34:	10c6b03a 	or	r3,r2,r3
  812c38:	41800a2e 	bgeu	r8,r6,812c64 <memset+0x7c>
  812c3c:	4005883a 	mov	r2,r8
  812c40:	31bffc04 	addi	r6,r6,-16
  812c44:	38c00015 	stw	r3,0(r7)
  812c48:	38c00115 	stw	r3,4(r7)
  812c4c:	38c00215 	stw	r3,8(r7)
  812c50:	38c00315 	stw	r3,12(r7)
  812c54:	39c00404 	addi	r7,r7,16
  812c58:	11bff936 	bltu	r2,r6,812c40 <memset+0x58>
  812c5c:	008000c4 	movi	r2,3
  812c60:	1180052e 	bgeu	r2,r6,812c78 <memset+0x90>
  812c64:	31bfff04 	addi	r6,r6,-4
  812c68:	008000c4 	movi	r2,3
  812c6c:	38c00015 	stw	r3,0(r7)
  812c70:	39c00104 	addi	r7,r7,4
  812c74:	11bffb36 	bltu	r2,r6,812c64 <memset+0x7c>
  812c78:	3807883a 	mov	r3,r7
  812c7c:	003fe006 	br	812c00 <memset+0x18>

00812c80 <_Bfree>:
  812c80:	28000826 	beq	r5,zero,812ca4 <_Bfree+0x24>
  812c84:	28800117 	ldw	r2,4(r5)
  812c88:	21001317 	ldw	r4,76(r4)
  812c8c:	1085883a 	add	r2,r2,r2
  812c90:	1085883a 	add	r2,r2,r2
  812c94:	1105883a 	add	r2,r2,r4
  812c98:	10c00017 	ldw	r3,0(r2)
  812c9c:	28c00015 	stw	r3,0(r5)
  812ca0:	11400015 	stw	r5,0(r2)
  812ca4:	f800283a 	ret

00812ca8 <__hi0bits>:
  812ca8:	20bfffec 	andhi	r2,r4,65535
  812cac:	10001426 	beq	r2,zero,812d00 <__hi0bits+0x58>
  812cb0:	0007883a 	mov	r3,zero
  812cb4:	20bfc02c 	andhi	r2,r4,65280
  812cb8:	1000021e 	bne	r2,zero,812cc4 <__hi0bits+0x1c>
  812cbc:	2008923a 	slli	r4,r4,8
  812cc0:	18c00204 	addi	r3,r3,8
  812cc4:	20bc002c 	andhi	r2,r4,61440
  812cc8:	1000021e 	bne	r2,zero,812cd4 <__hi0bits+0x2c>
  812ccc:	2008913a 	slli	r4,r4,4
  812cd0:	18c00104 	addi	r3,r3,4
  812cd4:	20b0002c 	andhi	r2,r4,49152
  812cd8:	1000031e 	bne	r2,zero,812ce8 <__hi0bits+0x40>
  812cdc:	2105883a 	add	r2,r4,r4
  812ce0:	18c00084 	addi	r3,r3,2
  812ce4:	1089883a 	add	r4,r2,r2
  812ce8:	20000316 	blt	r4,zero,812cf8 <__hi0bits+0x50>
  812cec:	2090002c 	andhi	r2,r4,16384
  812cf0:	10000626 	beq	r2,zero,812d0c <__hi0bits+0x64>
  812cf4:	18c00044 	addi	r3,r3,1
  812cf8:	1805883a 	mov	r2,r3
  812cfc:	f800283a 	ret
  812d00:	2008943a 	slli	r4,r4,16
  812d04:	00c00404 	movi	r3,16
  812d08:	003fea06 	br	812cb4 <__hi0bits+0xc>
  812d0c:	00c00804 	movi	r3,32
  812d10:	1805883a 	mov	r2,r3
  812d14:	f800283a 	ret

00812d18 <__lo0bits>:
  812d18:	20c00017 	ldw	r3,0(r4)
  812d1c:	188001cc 	andi	r2,r3,7
  812d20:	10000a26 	beq	r2,zero,812d4c <__lo0bits+0x34>
  812d24:	1880004c 	andi	r2,r3,1
  812d28:	1005003a 	cmpeq	r2,r2,zero
  812d2c:	10002126 	beq	r2,zero,812db4 <__lo0bits+0x9c>
  812d30:	1880008c 	andi	r2,r3,2
  812d34:	1000251e 	bne	r2,zero,812dcc <__lo0bits+0xb4>
  812d38:	1804d0ba 	srli	r2,r3,2
  812d3c:	01400084 	movi	r5,2
  812d40:	20800015 	stw	r2,0(r4)
  812d44:	2805883a 	mov	r2,r5
  812d48:	f800283a 	ret
  812d4c:	18bfffcc 	andi	r2,r3,65535
  812d50:	10001526 	beq	r2,zero,812da8 <__lo0bits+0x90>
  812d54:	000b883a 	mov	r5,zero
  812d58:	18803fcc 	andi	r2,r3,255
  812d5c:	1000021e 	bne	r2,zero,812d68 <__lo0bits+0x50>
  812d60:	1806d23a 	srli	r3,r3,8
  812d64:	29400204 	addi	r5,r5,8
  812d68:	188003cc 	andi	r2,r3,15
  812d6c:	1000021e 	bne	r2,zero,812d78 <__lo0bits+0x60>
  812d70:	1806d13a 	srli	r3,r3,4
  812d74:	29400104 	addi	r5,r5,4
  812d78:	188000cc 	andi	r2,r3,3
  812d7c:	1000021e 	bne	r2,zero,812d88 <__lo0bits+0x70>
  812d80:	1806d0ba 	srli	r3,r3,2
  812d84:	29400084 	addi	r5,r5,2
  812d88:	1880004c 	andi	r2,r3,1
  812d8c:	1000031e 	bne	r2,zero,812d9c <__lo0bits+0x84>
  812d90:	1806d07a 	srli	r3,r3,1
  812d94:	18000a26 	beq	r3,zero,812dc0 <__lo0bits+0xa8>
  812d98:	29400044 	addi	r5,r5,1
  812d9c:	2805883a 	mov	r2,r5
  812da0:	20c00015 	stw	r3,0(r4)
  812da4:	f800283a 	ret
  812da8:	1806d43a 	srli	r3,r3,16
  812dac:	01400404 	movi	r5,16
  812db0:	003fe906 	br	812d58 <__lo0bits+0x40>
  812db4:	000b883a 	mov	r5,zero
  812db8:	2805883a 	mov	r2,r5
  812dbc:	f800283a 	ret
  812dc0:	01400804 	movi	r5,32
  812dc4:	2805883a 	mov	r2,r5
  812dc8:	f800283a 	ret
  812dcc:	1804d07a 	srli	r2,r3,1
  812dd0:	01400044 	movi	r5,1
  812dd4:	20800015 	stw	r2,0(r4)
  812dd8:	003fda06 	br	812d44 <__lo0bits+0x2c>

00812ddc <__mcmp>:
  812ddc:	20800417 	ldw	r2,16(r4)
  812de0:	28c00417 	ldw	r3,16(r5)
  812de4:	10cfc83a 	sub	r7,r2,r3
  812de8:	38000c1e 	bne	r7,zero,812e1c <__mcmp+0x40>
  812dec:	18c5883a 	add	r2,r3,r3
  812df0:	1085883a 	add	r2,r2,r2
  812df4:	10c00504 	addi	r3,r2,20
  812df8:	21000504 	addi	r4,r4,20
  812dfc:	28cb883a 	add	r5,r5,r3
  812e00:	2085883a 	add	r2,r4,r2
  812e04:	10bfff04 	addi	r2,r2,-4
  812e08:	297fff04 	addi	r5,r5,-4
  812e0c:	11800017 	ldw	r6,0(r2)
  812e10:	28c00017 	ldw	r3,0(r5)
  812e14:	30c0031e 	bne	r6,r3,812e24 <__mcmp+0x48>
  812e18:	20bffa36 	bltu	r4,r2,812e04 <__mcmp+0x28>
  812e1c:	3805883a 	mov	r2,r7
  812e20:	f800283a 	ret
  812e24:	30c00336 	bltu	r6,r3,812e34 <__mcmp+0x58>
  812e28:	01c00044 	movi	r7,1
  812e2c:	3805883a 	mov	r2,r7
  812e30:	f800283a 	ret
  812e34:	01ffffc4 	movi	r7,-1
  812e38:	003ff806 	br	812e1c <__mcmp+0x40>

00812e3c <__ulp>:
  812e3c:	295ffc2c 	andhi	r5,r5,32752
  812e40:	013f3034 	movhi	r4,64704
  812e44:	290b883a 	add	r5,r5,r4
  812e48:	0145c83a 	sub	r2,zero,r5
  812e4c:	1007d53a 	srai	r3,r2,20
  812e50:	000d883a 	mov	r6,zero
  812e54:	0140040e 	bge	zero,r5,812e68 <__ulp+0x2c>
  812e58:	280f883a 	mov	r7,r5
  812e5c:	3807883a 	mov	r3,r7
  812e60:	3005883a 	mov	r2,r6
  812e64:	f800283a 	ret
  812e68:	008004c4 	movi	r2,19
  812e6c:	193ffb04 	addi	r4,r3,-20
  812e70:	10c00c0e 	bge	r2,r3,812ea4 <__ulp+0x68>
  812e74:	008007c4 	movi	r2,31
  812e78:	1107c83a 	sub	r3,r2,r4
  812e7c:	00800784 	movi	r2,30
  812e80:	01400044 	movi	r5,1
  812e84:	11000216 	blt	r2,r4,812e90 <__ulp+0x54>
  812e88:	00800044 	movi	r2,1
  812e8c:	10ca983a 	sll	r5,r2,r3
  812e90:	000f883a 	mov	r7,zero
  812e94:	280d883a 	mov	r6,r5
  812e98:	3807883a 	mov	r3,r7
  812e9c:	3005883a 	mov	r2,r6
  812ea0:	f800283a 	ret
  812ea4:	00800234 	movhi	r2,8
  812ea8:	10cfd83a 	sra	r7,r2,r3
  812eac:	000d883a 	mov	r6,zero
  812eb0:	3005883a 	mov	r2,r6
  812eb4:	3807883a 	mov	r3,r7
  812eb8:	f800283a 	ret

00812ebc <__b2d>:
  812ebc:	20800417 	ldw	r2,16(r4)
  812ec0:	defff904 	addi	sp,sp,-28
  812ec4:	dd000415 	stw	r20,16(sp)
  812ec8:	1085883a 	add	r2,r2,r2
  812ecc:	25000504 	addi	r20,r4,20
  812ed0:	1085883a 	add	r2,r2,r2
  812ed4:	dc000015 	stw	r16,0(sp)
  812ed8:	a0a1883a 	add	r16,r20,r2
  812edc:	dd400515 	stw	r21,20(sp)
  812ee0:	857fff17 	ldw	r21,-4(r16)
  812ee4:	dc400115 	stw	r17,4(sp)
  812ee8:	dfc00615 	stw	ra,24(sp)
  812eec:	a809883a 	mov	r4,r21
  812ef0:	2823883a 	mov	r17,r5
  812ef4:	dcc00315 	stw	r19,12(sp)
  812ef8:	dc800215 	stw	r18,8(sp)
  812efc:	0812ca80 	call	812ca8 <__hi0bits>
  812f00:	100b883a 	mov	r5,r2
  812f04:	00800804 	movi	r2,32
  812f08:	1145c83a 	sub	r2,r2,r5
  812f0c:	88800015 	stw	r2,0(r17)
  812f10:	00800284 	movi	r2,10
  812f14:	80ffff04 	addi	r3,r16,-4
  812f18:	11401416 	blt	r2,r5,812f6c <__b2d+0xb0>
  812f1c:	008002c4 	movi	r2,11
  812f20:	1149c83a 	sub	r4,r2,r5
  812f24:	a0c02736 	bltu	r20,r3,812fc4 <__b2d+0x108>
  812f28:	000d883a 	mov	r6,zero
  812f2c:	28800544 	addi	r2,r5,21
  812f30:	a906d83a 	srl	r3,r21,r4
  812f34:	a884983a 	sll	r2,r21,r2
  812f38:	1ccffc34 	orhi	r19,r3,16368
  812f3c:	11a4b03a 	or	r18,r2,r6
  812f40:	9005883a 	mov	r2,r18
  812f44:	9807883a 	mov	r3,r19
  812f48:	dfc00617 	ldw	ra,24(sp)
  812f4c:	dd400517 	ldw	r21,20(sp)
  812f50:	dd000417 	ldw	r20,16(sp)
  812f54:	dcc00317 	ldw	r19,12(sp)
  812f58:	dc800217 	ldw	r18,8(sp)
  812f5c:	dc400117 	ldw	r17,4(sp)
  812f60:	dc000017 	ldw	r16,0(sp)
  812f64:	dec00704 	addi	sp,sp,28
  812f68:	f800283a 	ret
  812f6c:	a0c00e36 	bltu	r20,r3,812fa8 <__b2d+0xec>
  812f70:	293ffd44 	addi	r4,r5,-11
  812f74:	000d883a 	mov	r6,zero
  812f78:	20000f26 	beq	r4,zero,812fb8 <__b2d+0xfc>
  812f7c:	00800804 	movi	r2,32
  812f80:	110bc83a 	sub	r5,r2,r4
  812f84:	a0c01236 	bltu	r20,r3,812fd0 <__b2d+0x114>
  812f88:	000f883a 	mov	r7,zero
  812f8c:	a904983a 	sll	r2,r21,r4
  812f90:	3146d83a 	srl	r3,r6,r5
  812f94:	3108983a 	sll	r4,r6,r4
  812f98:	108ffc34 	orhi	r2,r2,16368
  812f9c:	18a6b03a 	or	r19,r3,r2
  812fa0:	3924b03a 	or	r18,r7,r4
  812fa4:	003fe606 	br	812f40 <__b2d+0x84>
  812fa8:	293ffd44 	addi	r4,r5,-11
  812fac:	81bffe17 	ldw	r6,-8(r16)
  812fb0:	80fffe04 	addi	r3,r16,-8
  812fb4:	203ff11e 	bne	r4,zero,812f7c <__b2d+0xc0>
  812fb8:	accffc34 	orhi	r19,r21,16368
  812fbc:	3025883a 	mov	r18,r6
  812fc0:	003fdf06 	br	812f40 <__b2d+0x84>
  812fc4:	18bfff17 	ldw	r2,-4(r3)
  812fc8:	110cd83a 	srl	r6,r2,r4
  812fcc:	003fd706 	br	812f2c <__b2d+0x70>
  812fd0:	18bfff17 	ldw	r2,-4(r3)
  812fd4:	114ed83a 	srl	r7,r2,r5
  812fd8:	003fec06 	br	812f8c <__b2d+0xd0>

00812fdc <__ratio>:
  812fdc:	defff904 	addi	sp,sp,-28
  812fe0:	dc400215 	stw	r17,8(sp)
  812fe4:	2823883a 	mov	r17,r5
  812fe8:	d80b883a 	mov	r5,sp
  812fec:	dfc00615 	stw	ra,24(sp)
  812ff0:	dd000515 	stw	r20,20(sp)
  812ff4:	dcc00415 	stw	r19,16(sp)
  812ff8:	dc800315 	stw	r18,12(sp)
  812ffc:	2025883a 	mov	r18,r4
  813000:	0812ebc0 	call	812ebc <__b2d>
  813004:	8809883a 	mov	r4,r17
  813008:	d9400104 	addi	r5,sp,4
  81300c:	1027883a 	mov	r19,r2
  813010:	1829883a 	mov	r20,r3
  813014:	0812ebc0 	call	812ebc <__b2d>
  813018:	89000417 	ldw	r4,16(r17)
  81301c:	91c00417 	ldw	r7,16(r18)
  813020:	d9800117 	ldw	r6,4(sp)
  813024:	180b883a 	mov	r5,r3
  813028:	390fc83a 	sub	r7,r7,r4
  81302c:	1009883a 	mov	r4,r2
  813030:	d8800017 	ldw	r2,0(sp)
  813034:	380e917a 	slli	r7,r7,5
  813038:	2011883a 	mov	r8,r4
  81303c:	1185c83a 	sub	r2,r2,r6
  813040:	11c5883a 	add	r2,r2,r7
  813044:	1006953a 	slli	r3,r2,20
  813048:	2813883a 	mov	r9,r5
  81304c:	00800d0e 	bge	zero,r2,813084 <__ratio+0xa8>
  813050:	1d29883a 	add	r20,r3,r20
  813054:	a00b883a 	mov	r5,r20
  813058:	480f883a 	mov	r7,r9
  81305c:	9809883a 	mov	r4,r19
  813060:	400d883a 	mov	r6,r8
  813064:	080c8dc0 	call	80c8dc <__divdf3>
  813068:	dfc00617 	ldw	ra,24(sp)
  81306c:	dd000517 	ldw	r20,20(sp)
  813070:	dcc00417 	ldw	r19,16(sp)
  813074:	dc800317 	ldw	r18,12(sp)
  813078:	dc400217 	ldw	r17,8(sp)
  81307c:	dec00704 	addi	sp,sp,28
  813080:	f800283a 	ret
  813084:	28d3c83a 	sub	r9,r5,r3
  813088:	003ff206 	br	813054 <__ratio+0x78>

0081308c <_mprec_log10>:
  81308c:	defffe04 	addi	sp,sp,-8
  813090:	008005c4 	movi	r2,23
  813094:	dc000015 	stw	r16,0(sp)
  813098:	dfc00115 	stw	ra,4(sp)
  81309c:	2021883a 	mov	r16,r4
  8130a0:	11000c16 	blt	r2,r4,8130d4 <_mprec_log10+0x48>
  8130a4:	200490fa 	slli	r2,r4,3
  8130a8:	00c020b4 	movhi	r3,130
  8130ac:	18cc8804 	addi	r3,r3,12832
  8130b0:	10c5883a 	add	r2,r2,r3
  8130b4:	12400117 	ldw	r9,4(r2)
  8130b8:	12000017 	ldw	r8,0(r2)
  8130bc:	4807883a 	mov	r3,r9
  8130c0:	4005883a 	mov	r2,r8
  8130c4:	dfc00117 	ldw	ra,4(sp)
  8130c8:	dc000017 	ldw	r16,0(sp)
  8130cc:	dec00204 	addi	sp,sp,8
  8130d0:	f800283a 	ret
  8130d4:	0011883a 	mov	r8,zero
  8130d8:	024ffc34 	movhi	r9,16368
  8130dc:	0005883a 	mov	r2,zero
  8130e0:	00d00934 	movhi	r3,16420
  8130e4:	480b883a 	mov	r5,r9
  8130e8:	4009883a 	mov	r4,r8
  8130ec:	180f883a 	mov	r7,r3
  8130f0:	100d883a 	mov	r6,r2
  8130f4:	080c5180 	call	80c518 <__muldf3>
  8130f8:	843fffc4 	addi	r16,r16,-1
  8130fc:	1011883a 	mov	r8,r2
  813100:	1813883a 	mov	r9,r3
  813104:	803ff51e 	bne	r16,zero,8130dc <_mprec_log10+0x50>
  813108:	4005883a 	mov	r2,r8
  81310c:	4807883a 	mov	r3,r9
  813110:	dfc00117 	ldw	ra,4(sp)
  813114:	dc000017 	ldw	r16,0(sp)
  813118:	dec00204 	addi	sp,sp,8
  81311c:	f800283a 	ret

00813120 <__copybits>:
  813120:	297fffc4 	addi	r5,r5,-1
  813124:	30800417 	ldw	r2,16(r6)
  813128:	280bd17a 	srai	r5,r5,5
  81312c:	31800504 	addi	r6,r6,20
  813130:	1085883a 	add	r2,r2,r2
  813134:	294b883a 	add	r5,r5,r5
  813138:	294b883a 	add	r5,r5,r5
  81313c:	1085883a 	add	r2,r2,r2
  813140:	290b883a 	add	r5,r5,r4
  813144:	3087883a 	add	r3,r6,r2
  813148:	29400104 	addi	r5,r5,4
  81314c:	30c0052e 	bgeu	r6,r3,813164 <__copybits+0x44>
  813150:	30800017 	ldw	r2,0(r6)
  813154:	31800104 	addi	r6,r6,4
  813158:	20800015 	stw	r2,0(r4)
  81315c:	21000104 	addi	r4,r4,4
  813160:	30fffb36 	bltu	r6,r3,813150 <__copybits+0x30>
  813164:	2140032e 	bgeu	r4,r5,813174 <__copybits+0x54>
  813168:	20000015 	stw	zero,0(r4)
  81316c:	21000104 	addi	r4,r4,4
  813170:	217ffd36 	bltu	r4,r5,813168 <__copybits+0x48>
  813174:	f800283a 	ret

00813178 <__any_on>:
  813178:	20800417 	ldw	r2,16(r4)
  81317c:	2807d17a 	srai	r3,r5,5
  813180:	21000504 	addi	r4,r4,20
  813184:	10c00d0e 	bge	r2,r3,8131bc <__any_on+0x44>
  813188:	1085883a 	add	r2,r2,r2
  81318c:	1085883a 	add	r2,r2,r2
  813190:	208d883a 	add	r6,r4,r2
  813194:	2180182e 	bgeu	r4,r6,8131f8 <__any_on+0x80>
  813198:	30bfff17 	ldw	r2,-4(r6)
  81319c:	30ffff04 	addi	r3,r6,-4
  8131a0:	1000041e 	bne	r2,zero,8131b4 <__any_on+0x3c>
  8131a4:	20c0142e 	bgeu	r4,r3,8131f8 <__any_on+0x80>
  8131a8:	18ffff04 	addi	r3,r3,-4
  8131ac:	18800017 	ldw	r2,0(r3)
  8131b0:	103ffc26 	beq	r2,zero,8131a4 <__any_on+0x2c>
  8131b4:	00800044 	movi	r2,1
  8131b8:	f800283a 	ret
  8131bc:	18800a0e 	bge	r3,r2,8131e8 <__any_on+0x70>
  8131c0:	294007cc 	andi	r5,r5,31
  8131c4:	28000826 	beq	r5,zero,8131e8 <__any_on+0x70>
  8131c8:	18c5883a 	add	r2,r3,r3
  8131cc:	1085883a 	add	r2,r2,r2
  8131d0:	208d883a 	add	r6,r4,r2
  8131d4:	30c00017 	ldw	r3,0(r6)
  8131d8:	1944d83a 	srl	r2,r3,r5
  8131dc:	1144983a 	sll	r2,r2,r5
  8131e0:	18bff41e 	bne	r3,r2,8131b4 <__any_on+0x3c>
  8131e4:	003feb06 	br	813194 <__any_on+0x1c>
  8131e8:	18c5883a 	add	r2,r3,r3
  8131ec:	1085883a 	add	r2,r2,r2
  8131f0:	208d883a 	add	r6,r4,r2
  8131f4:	003fe706 	br	813194 <__any_on+0x1c>
  8131f8:	0005883a 	mov	r2,zero
  8131fc:	f800283a 	ret

00813200 <_Balloc>:
  813200:	20c01317 	ldw	r3,76(r4)
  813204:	defffb04 	addi	sp,sp,-20
  813208:	dcc00315 	stw	r19,12(sp)
  81320c:	dc800215 	stw	r18,8(sp)
  813210:	dfc00415 	stw	ra,16(sp)
  813214:	2825883a 	mov	r18,r5
  813218:	dc400115 	stw	r17,4(sp)
  81321c:	dc000015 	stw	r16,0(sp)
  813220:	2027883a 	mov	r19,r4
  813224:	01800404 	movi	r6,16
  813228:	01400104 	movi	r5,4
  81322c:	18001726 	beq	r3,zero,81328c <_Balloc+0x8c>
  813230:	01400044 	movi	r5,1
  813234:	9485883a 	add	r2,r18,r18
  813238:	2ca2983a 	sll	r17,r5,r18
  81323c:	1085883a 	add	r2,r2,r2
  813240:	10c7883a 	add	r3,r2,r3
  813244:	1c000017 	ldw	r16,0(r3)
  813248:	8c4d883a 	add	r6,r17,r17
  81324c:	318d883a 	add	r6,r6,r6
  813250:	9809883a 	mov	r4,r19
  813254:	31800504 	addi	r6,r6,20
  813258:	80001226 	beq	r16,zero,8132a4 <_Balloc+0xa4>
  81325c:	80800017 	ldw	r2,0(r16)
  813260:	18800015 	stw	r2,0(r3)
  813264:	80000415 	stw	zero,16(r16)
  813268:	80000315 	stw	zero,12(r16)
  81326c:	8005883a 	mov	r2,r16
  813270:	dfc00417 	ldw	ra,16(sp)
  813274:	dcc00317 	ldw	r19,12(sp)
  813278:	dc800217 	ldw	r18,8(sp)
  81327c:	dc400117 	ldw	r17,4(sp)
  813280:	dc000017 	ldw	r16,0(sp)
  813284:	dec00504 	addi	sp,sp,20
  813288:	f800283a 	ret
  81328c:	08148900 	call	814890 <_calloc_r>
  813290:	1007883a 	mov	r3,r2
  813294:	0021883a 	mov	r16,zero
  813298:	98801315 	stw	r2,76(r19)
  81329c:	103fe41e 	bne	r2,zero,813230 <_Balloc+0x30>
  8132a0:	003ff206 	br	81326c <_Balloc+0x6c>
  8132a4:	08148900 	call	814890 <_calloc_r>
  8132a8:	103ff026 	beq	r2,zero,81326c <_Balloc+0x6c>
  8132ac:	1021883a 	mov	r16,r2
  8132b0:	14800115 	stw	r18,4(r2)
  8132b4:	14400215 	stw	r17,8(r2)
  8132b8:	003fea06 	br	813264 <_Balloc+0x64>

008132bc <__d2b>:
  8132bc:	defff504 	addi	sp,sp,-44
  8132c0:	dcc00515 	stw	r19,20(sp)
  8132c4:	04c00044 	movi	r19,1
  8132c8:	dc000215 	stw	r16,8(sp)
  8132cc:	2821883a 	mov	r16,r5
  8132d0:	980b883a 	mov	r5,r19
  8132d4:	ddc00915 	stw	r23,36(sp)
  8132d8:	dd800815 	stw	r22,32(sp)
  8132dc:	dd400715 	stw	r21,28(sp)
  8132e0:	dd000615 	stw	r20,24(sp)
  8132e4:	dc800415 	stw	r18,16(sp)
  8132e8:	dc400315 	stw	r17,12(sp)
  8132ec:	dfc00a15 	stw	ra,40(sp)
  8132f0:	3023883a 	mov	r17,r6
  8132f4:	382d883a 	mov	r22,r7
  8132f8:	ddc00b17 	ldw	r23,44(sp)
  8132fc:	08132000 	call	813200 <_Balloc>
  813300:	1025883a 	mov	r18,r2
  813304:	00a00034 	movhi	r2,32768
  813308:	10bfffc4 	addi	r2,r2,-1
  81330c:	8888703a 	and	r4,r17,r2
  813310:	202ad53a 	srli	r21,r4,20
  813314:	00800434 	movhi	r2,16
  813318:	10bfffc4 	addi	r2,r2,-1
  81331c:	8886703a 	and	r3,r17,r2
  813320:	a829003a 	cmpeq	r20,r21,zero
  813324:	800b883a 	mov	r5,r16
  813328:	d8c00115 	stw	r3,4(sp)
  81332c:	94000504 	addi	r16,r18,20
  813330:	a000021e 	bne	r20,zero,81333c <__d2b+0x80>
  813334:	18c00434 	orhi	r3,r3,16
  813338:	d8c00115 	stw	r3,4(sp)
  81333c:	28002726 	beq	r5,zero,8133dc <__d2b+0x120>
  813340:	d809883a 	mov	r4,sp
  813344:	d9400015 	stw	r5,0(sp)
  813348:	0812d180 	call	812d18 <__lo0bits>
  81334c:	100d883a 	mov	r6,r2
  813350:	10003526 	beq	r2,zero,813428 <__d2b+0x16c>
  813354:	d8c00117 	ldw	r3,4(sp)
  813358:	00800804 	movi	r2,32
  81335c:	1185c83a 	sub	r2,r2,r6
  813360:	d9000017 	ldw	r4,0(sp)
  813364:	1886983a 	sll	r3,r3,r2
  813368:	1906b03a 	or	r3,r3,r4
  81336c:	90c00515 	stw	r3,20(r18)
  813370:	d8c00117 	ldw	r3,4(sp)
  813374:	1986d83a 	srl	r3,r3,r6
  813378:	d8c00115 	stw	r3,4(sp)
  81337c:	180b003a 	cmpeq	r5,r3,zero
  813380:	00800084 	movi	r2,2
  813384:	114bc83a 	sub	r5,r2,r5
  813388:	80c00115 	stw	r3,4(r16)
  81338c:	91400415 	stw	r5,16(r18)
  813390:	a0001a1e 	bne	r20,zero,8133fc <__d2b+0x140>
  813394:	3545883a 	add	r2,r6,r21
  813398:	10bef344 	addi	r2,r2,-1075
  81339c:	00c00d44 	movi	r3,53
  8133a0:	b0800015 	stw	r2,0(r22)
  8133a4:	1987c83a 	sub	r3,r3,r6
  8133a8:	b8c00015 	stw	r3,0(r23)
  8133ac:	9005883a 	mov	r2,r18
  8133b0:	dfc00a17 	ldw	ra,40(sp)
  8133b4:	ddc00917 	ldw	r23,36(sp)
  8133b8:	dd800817 	ldw	r22,32(sp)
  8133bc:	dd400717 	ldw	r21,28(sp)
  8133c0:	dd000617 	ldw	r20,24(sp)
  8133c4:	dcc00517 	ldw	r19,20(sp)
  8133c8:	dc800417 	ldw	r18,16(sp)
  8133cc:	dc400317 	ldw	r17,12(sp)
  8133d0:	dc000217 	ldw	r16,8(sp)
  8133d4:	dec00b04 	addi	sp,sp,44
  8133d8:	f800283a 	ret
  8133dc:	d9000104 	addi	r4,sp,4
  8133e0:	0812d180 	call	812d18 <__lo0bits>
  8133e4:	11800804 	addi	r6,r2,32
  8133e8:	d8800117 	ldw	r2,4(sp)
  8133ec:	94c00415 	stw	r19,16(r18)
  8133f0:	980b883a 	mov	r5,r19
  8133f4:	90800515 	stw	r2,20(r18)
  8133f8:	a03fe626 	beq	r20,zero,813394 <__d2b+0xd8>
  8133fc:	2945883a 	add	r2,r5,r5
  813400:	1085883a 	add	r2,r2,r2
  813404:	1405883a 	add	r2,r2,r16
  813408:	113fff17 	ldw	r4,-4(r2)
  81340c:	30fef384 	addi	r3,r6,-1074
  813410:	2820917a 	slli	r16,r5,5
  813414:	b0c00015 	stw	r3,0(r22)
  813418:	0812ca80 	call	812ca8 <__hi0bits>
  81341c:	80a1c83a 	sub	r16,r16,r2
  813420:	bc000015 	stw	r16,0(r23)
  813424:	003fe106 	br	8133ac <__d2b+0xf0>
  813428:	d8800017 	ldw	r2,0(sp)
  81342c:	90800515 	stw	r2,20(r18)
  813430:	d8c00117 	ldw	r3,4(sp)
  813434:	003fd106 	br	81337c <__d2b+0xc0>

00813438 <__mdiff>:
  813438:	defffb04 	addi	sp,sp,-20
  81343c:	dc000015 	stw	r16,0(sp)
  813440:	2821883a 	mov	r16,r5
  813444:	dc800215 	stw	r18,8(sp)
  813448:	300b883a 	mov	r5,r6
  81344c:	2025883a 	mov	r18,r4
  813450:	8009883a 	mov	r4,r16
  813454:	dc400115 	stw	r17,4(sp)
  813458:	dfc00415 	stw	ra,16(sp)
  81345c:	dcc00315 	stw	r19,12(sp)
  813460:	3023883a 	mov	r17,r6
  813464:	0812ddc0 	call	812ddc <__mcmp>
  813468:	10004226 	beq	r2,zero,813574 <__mdiff+0x13c>
  81346c:	10005016 	blt	r2,zero,8135b0 <__mdiff+0x178>
  813470:	0027883a 	mov	r19,zero
  813474:	81400117 	ldw	r5,4(r16)
  813478:	9009883a 	mov	r4,r18
  81347c:	08132000 	call	813200 <_Balloc>
  813480:	1019883a 	mov	r12,r2
  813484:	82800417 	ldw	r10,16(r16)
  813488:	88800417 	ldw	r2,16(r17)
  81348c:	81800504 	addi	r6,r16,20
  813490:	5287883a 	add	r3,r10,r10
  813494:	1085883a 	add	r2,r2,r2
  813498:	18c7883a 	add	r3,r3,r3
  81349c:	1085883a 	add	r2,r2,r2
  8134a0:	8a000504 	addi	r8,r17,20
  8134a4:	64c00315 	stw	r19,12(r12)
  8134a8:	30db883a 	add	r13,r6,r3
  8134ac:	4097883a 	add	r11,r8,r2
  8134b0:	61c00504 	addi	r7,r12,20
  8134b4:	0013883a 	mov	r9,zero
  8134b8:	31000017 	ldw	r4,0(r6)
  8134bc:	41400017 	ldw	r5,0(r8)
  8134c0:	42000104 	addi	r8,r8,4
  8134c4:	20bfffcc 	andi	r2,r4,65535
  8134c8:	28ffffcc 	andi	r3,r5,65535
  8134cc:	10c5c83a 	sub	r2,r2,r3
  8134d0:	1245883a 	add	r2,r2,r9
  8134d4:	2008d43a 	srli	r4,r4,16
  8134d8:	280ad43a 	srli	r5,r5,16
  8134dc:	1007d43a 	srai	r3,r2,16
  8134e0:	3880000d 	sth	r2,0(r7)
  8134e4:	2149c83a 	sub	r4,r4,r5
  8134e8:	20c9883a 	add	r4,r4,r3
  8134ec:	3900008d 	sth	r4,2(r7)
  8134f0:	31800104 	addi	r6,r6,4
  8134f4:	39c00104 	addi	r7,r7,4
  8134f8:	2013d43a 	srai	r9,r4,16
  8134fc:	42ffee36 	bltu	r8,r11,8134b8 <__mdiff+0x80>
  813500:	33400c2e 	bgeu	r6,r13,813534 <__mdiff+0xfc>
  813504:	30800017 	ldw	r2,0(r6)
  813508:	31800104 	addi	r6,r6,4
  81350c:	10ffffcc 	andi	r3,r2,65535
  813510:	1a47883a 	add	r3,r3,r9
  813514:	1004d43a 	srli	r2,r2,16
  813518:	1809d43a 	srai	r4,r3,16
  81351c:	38c0000d 	sth	r3,0(r7)
  813520:	1105883a 	add	r2,r2,r4
  813524:	3880008d 	sth	r2,2(r7)
  813528:	1013d43a 	srai	r9,r2,16
  81352c:	39c00104 	addi	r7,r7,4
  813530:	337ff436 	bltu	r6,r13,813504 <__mdiff+0xcc>
  813534:	38bfff17 	ldw	r2,-4(r7)
  813538:	38ffff04 	addi	r3,r7,-4
  81353c:	1000041e 	bne	r2,zero,813550 <__mdiff+0x118>
  813540:	18ffff04 	addi	r3,r3,-4
  813544:	18800017 	ldw	r2,0(r3)
  813548:	52bfffc4 	addi	r10,r10,-1
  81354c:	103ffc26 	beq	r2,zero,813540 <__mdiff+0x108>
  813550:	6005883a 	mov	r2,r12
  813554:	62800415 	stw	r10,16(r12)
  813558:	dfc00417 	ldw	ra,16(sp)
  81355c:	dcc00317 	ldw	r19,12(sp)
  813560:	dc800217 	ldw	r18,8(sp)
  813564:	dc400117 	ldw	r17,4(sp)
  813568:	dc000017 	ldw	r16,0(sp)
  81356c:	dec00504 	addi	sp,sp,20
  813570:	f800283a 	ret
  813574:	9009883a 	mov	r4,r18
  813578:	000b883a 	mov	r5,zero
  81357c:	08132000 	call	813200 <_Balloc>
  813580:	1019883a 	mov	r12,r2
  813584:	00800044 	movi	r2,1
  813588:	60800415 	stw	r2,16(r12)
  81358c:	6005883a 	mov	r2,r12
  813590:	60000515 	stw	zero,20(r12)
  813594:	dfc00417 	ldw	ra,16(sp)
  813598:	dcc00317 	ldw	r19,12(sp)
  81359c:	dc800217 	ldw	r18,8(sp)
  8135a0:	dc400117 	ldw	r17,4(sp)
  8135a4:	dc000017 	ldw	r16,0(sp)
  8135a8:	dec00504 	addi	sp,sp,20
  8135ac:	f800283a 	ret
  8135b0:	880d883a 	mov	r6,r17
  8135b4:	04c00044 	movi	r19,1
  8135b8:	8023883a 	mov	r17,r16
  8135bc:	3021883a 	mov	r16,r6
  8135c0:	003fac06 	br	813474 <__mdiff+0x3c>

008135c4 <__lshift>:
  8135c4:	defff904 	addi	sp,sp,-28
  8135c8:	28800417 	ldw	r2,16(r5)
  8135cc:	dc000015 	stw	r16,0(sp)
  8135d0:	3021d17a 	srai	r16,r6,5
  8135d4:	28c00217 	ldw	r3,8(r5)
  8135d8:	10800044 	addi	r2,r2,1
  8135dc:	dc400115 	stw	r17,4(sp)
  8135e0:	80a3883a 	add	r17,r16,r2
  8135e4:	dd400515 	stw	r21,20(sp)
  8135e8:	dd000415 	stw	r20,16(sp)
  8135ec:	dc800215 	stw	r18,8(sp)
  8135f0:	dfc00615 	stw	ra,24(sp)
  8135f4:	2825883a 	mov	r18,r5
  8135f8:	dcc00315 	stw	r19,12(sp)
  8135fc:	3029883a 	mov	r20,r6
  813600:	202b883a 	mov	r21,r4
  813604:	29400117 	ldw	r5,4(r5)
  813608:	1c40030e 	bge	r3,r17,813618 <__lshift+0x54>
  81360c:	18c7883a 	add	r3,r3,r3
  813610:	29400044 	addi	r5,r5,1
  813614:	1c7ffd16 	blt	r3,r17,81360c <__lshift+0x48>
  813618:	a809883a 	mov	r4,r21
  81361c:	08132000 	call	813200 <_Balloc>
  813620:	1027883a 	mov	r19,r2
  813624:	11400504 	addi	r5,r2,20
  813628:	0400090e 	bge	zero,r16,813650 <__lshift+0x8c>
  81362c:	2805883a 	mov	r2,r5
  813630:	0007883a 	mov	r3,zero
  813634:	18c00044 	addi	r3,r3,1
  813638:	10000015 	stw	zero,0(r2)
  81363c:	10800104 	addi	r2,r2,4
  813640:	80fffc1e 	bne	r16,r3,813634 <__lshift+0x70>
  813644:	8405883a 	add	r2,r16,r16
  813648:	1085883a 	add	r2,r2,r2
  81364c:	288b883a 	add	r5,r5,r2
  813650:	90800417 	ldw	r2,16(r18)
  813654:	91000504 	addi	r4,r18,20
  813658:	a18007cc 	andi	r6,r20,31
  81365c:	1085883a 	add	r2,r2,r2
  813660:	1085883a 	add	r2,r2,r2
  813664:	208f883a 	add	r7,r4,r2
  813668:	30001e26 	beq	r6,zero,8136e4 <__lshift+0x120>
  81366c:	00800804 	movi	r2,32
  813670:	1191c83a 	sub	r8,r2,r6
  813674:	0007883a 	mov	r3,zero
  813678:	20800017 	ldw	r2,0(r4)
  81367c:	1184983a 	sll	r2,r2,r6
  813680:	1884b03a 	or	r2,r3,r2
  813684:	28800015 	stw	r2,0(r5)
  813688:	20c00017 	ldw	r3,0(r4)
  81368c:	21000104 	addi	r4,r4,4
  813690:	29400104 	addi	r5,r5,4
  813694:	1a06d83a 	srl	r3,r3,r8
  813698:	21fff736 	bltu	r4,r7,813678 <__lshift+0xb4>
  81369c:	28c00015 	stw	r3,0(r5)
  8136a0:	18000126 	beq	r3,zero,8136a8 <__lshift+0xe4>
  8136a4:	8c400044 	addi	r17,r17,1
  8136a8:	88bfffc4 	addi	r2,r17,-1
  8136ac:	98800415 	stw	r2,16(r19)
  8136b0:	a809883a 	mov	r4,r21
  8136b4:	900b883a 	mov	r5,r18
  8136b8:	0812c800 	call	812c80 <_Bfree>
  8136bc:	9805883a 	mov	r2,r19
  8136c0:	dfc00617 	ldw	ra,24(sp)
  8136c4:	dd400517 	ldw	r21,20(sp)
  8136c8:	dd000417 	ldw	r20,16(sp)
  8136cc:	dcc00317 	ldw	r19,12(sp)
  8136d0:	dc800217 	ldw	r18,8(sp)
  8136d4:	dc400117 	ldw	r17,4(sp)
  8136d8:	dc000017 	ldw	r16,0(sp)
  8136dc:	dec00704 	addi	sp,sp,28
  8136e0:	f800283a 	ret
  8136e4:	20800017 	ldw	r2,0(r4)
  8136e8:	21000104 	addi	r4,r4,4
  8136ec:	28800015 	stw	r2,0(r5)
  8136f0:	29400104 	addi	r5,r5,4
  8136f4:	21ffec2e 	bgeu	r4,r7,8136a8 <__lshift+0xe4>
  8136f8:	20800017 	ldw	r2,0(r4)
  8136fc:	21000104 	addi	r4,r4,4
  813700:	28800015 	stw	r2,0(r5)
  813704:	29400104 	addi	r5,r5,4
  813708:	21fff636 	bltu	r4,r7,8136e4 <__lshift+0x120>
  81370c:	003fe606 	br	8136a8 <__lshift+0xe4>

00813710 <__multiply>:
  813710:	defff904 	addi	sp,sp,-28
  813714:	dcc00315 	stw	r19,12(sp)
  813718:	dc800215 	stw	r18,8(sp)
  81371c:	2cc00417 	ldw	r19,16(r5)
  813720:	34800417 	ldw	r18,16(r6)
  813724:	dd000415 	stw	r20,16(sp)
  813728:	dc400115 	stw	r17,4(sp)
  81372c:	dfc00615 	stw	ra,24(sp)
  813730:	dd400515 	stw	r21,20(sp)
  813734:	dc000015 	stw	r16,0(sp)
  813738:	2823883a 	mov	r17,r5
  81373c:	3029883a 	mov	r20,r6
  813740:	9c80040e 	bge	r19,r18,813754 <__multiply+0x44>
  813744:	9027883a 	mov	r19,r18
  813748:	2c800417 	ldw	r18,16(r5)
  81374c:	2829883a 	mov	r20,r5
  813750:	3023883a 	mov	r17,r6
  813754:	88800217 	ldw	r2,8(r17)
  813758:	9ca1883a 	add	r16,r19,r18
  81375c:	89400117 	ldw	r5,4(r17)
  813760:	1400010e 	bge	r2,r16,813768 <__multiply+0x58>
  813764:	29400044 	addi	r5,r5,1
  813768:	08132000 	call	813200 <_Balloc>
  81376c:	102b883a 	mov	r21,r2
  813770:	8405883a 	add	r2,r16,r16
  813774:	1085883a 	add	r2,r2,r2
  813778:	a9000504 	addi	r4,r21,20
  81377c:	209d883a 	add	r14,r4,r2
  813780:	2380042e 	bgeu	r4,r14,813794 <__multiply+0x84>
  813784:	2005883a 	mov	r2,r4
  813788:	10000015 	stw	zero,0(r2)
  81378c:	10800104 	addi	r2,r2,4
  813790:	13bffd36 	bltu	r2,r14,813788 <__multiply+0x78>
  813794:	9485883a 	add	r2,r18,r18
  813798:	9cc7883a 	add	r3,r19,r19
  81379c:	a1800504 	addi	r6,r20,20
  8137a0:	1085883a 	add	r2,r2,r2
  8137a4:	8b400504 	addi	r13,r17,20
  8137a8:	18c7883a 	add	r3,r3,r3
  8137ac:	309f883a 	add	r15,r6,r2
  8137b0:	68d7883a 	add	r11,r13,r3
  8137b4:	33c03b2e 	bgeu	r6,r15,8138a4 <__multiply+0x194>
  8137b8:	2019883a 	mov	r12,r4
  8137bc:	30800017 	ldw	r2,0(r6)
  8137c0:	127fffcc 	andi	r9,r2,65535
  8137c4:	48001826 	beq	r9,zero,813828 <__multiply+0x118>
  8137c8:	6811883a 	mov	r8,r13
  8137cc:	600f883a 	mov	r7,r12
  8137d0:	0015883a 	mov	r10,zero
  8137d4:	40c00017 	ldw	r3,0(r8)
  8137d8:	39400017 	ldw	r5,0(r7)
  8137dc:	42000104 	addi	r8,r8,4
  8137e0:	193fffcc 	andi	r4,r3,65535
  8137e4:	4909383a 	mul	r4,r9,r4
  8137e8:	1806d43a 	srli	r3,r3,16
  8137ec:	28bfffcc 	andi	r2,r5,65535
  8137f0:	5085883a 	add	r2,r10,r2
  8137f4:	2089883a 	add	r4,r4,r2
  8137f8:	48c7383a 	mul	r3,r9,r3
  8137fc:	280ad43a 	srli	r5,r5,16
  813800:	2004d43a 	srli	r2,r4,16
  813804:	3900000d 	sth	r4,0(r7)
  813808:	1947883a 	add	r3,r3,r5
  81380c:	10c5883a 	add	r2,r2,r3
  813810:	3880008d 	sth	r2,2(r7)
  813814:	1014d43a 	srli	r10,r2,16
  813818:	39c00104 	addi	r7,r7,4
  81381c:	42ffed36 	bltu	r8,r11,8137d4 <__multiply+0xc4>
  813820:	3a800015 	stw	r10,0(r7)
  813824:	30800017 	ldw	r2,0(r6)
  813828:	1012d43a 	srli	r9,r2,16
  81382c:	48001926 	beq	r9,zero,813894 <__multiply+0x184>
  813830:	60800017 	ldw	r2,0(r12)
  813834:	6811883a 	mov	r8,r13
  813838:	600f883a 	mov	r7,r12
  81383c:	0015883a 	mov	r10,zero
  813840:	100b883a 	mov	r5,r2
  813844:	41000017 	ldw	r4,0(r8)
  813848:	2806d43a 	srli	r3,r5,16
  81384c:	3880000d 	sth	r2,0(r7)
  813850:	20bfffcc 	andi	r2,r4,65535
  813854:	4885383a 	mul	r2,r9,r2
  813858:	50c7883a 	add	r3,r10,r3
  81385c:	2008d43a 	srli	r4,r4,16
  813860:	10c5883a 	add	r2,r2,r3
  813864:	3880008d 	sth	r2,2(r7)
  813868:	39c00104 	addi	r7,r7,4
  81386c:	39400017 	ldw	r5,0(r7)
  813870:	4909383a 	mul	r4,r9,r4
  813874:	1004d43a 	srli	r2,r2,16
  813878:	28ffffcc 	andi	r3,r5,65535
  81387c:	20c9883a 	add	r4,r4,r3
  813880:	1105883a 	add	r2,r2,r4
  813884:	42000104 	addi	r8,r8,4
  813888:	1014d43a 	srli	r10,r2,16
  81388c:	42ffed36 	bltu	r8,r11,813844 <__multiply+0x134>
  813890:	38800015 	stw	r2,0(r7)
  813894:	31800104 	addi	r6,r6,4
  813898:	33c0022e 	bgeu	r6,r15,8138a4 <__multiply+0x194>
  81389c:	63000104 	addi	r12,r12,4
  8138a0:	003fc606 	br	8137bc <__multiply+0xac>
  8138a4:	0400090e 	bge	zero,r16,8138cc <__multiply+0x1bc>
  8138a8:	70bfff17 	ldw	r2,-4(r14)
  8138ac:	70ffff04 	addi	r3,r14,-4
  8138b0:	10000326 	beq	r2,zero,8138c0 <__multiply+0x1b0>
  8138b4:	00000506 	br	8138cc <__multiply+0x1bc>
  8138b8:	18800017 	ldw	r2,0(r3)
  8138bc:	1000031e 	bne	r2,zero,8138cc <__multiply+0x1bc>
  8138c0:	843fffc4 	addi	r16,r16,-1
  8138c4:	18ffff04 	addi	r3,r3,-4
  8138c8:	803ffb1e 	bne	r16,zero,8138b8 <__multiply+0x1a8>
  8138cc:	a805883a 	mov	r2,r21
  8138d0:	ac000415 	stw	r16,16(r21)
  8138d4:	dfc00617 	ldw	ra,24(sp)
  8138d8:	dd400517 	ldw	r21,20(sp)
  8138dc:	dd000417 	ldw	r20,16(sp)
  8138e0:	dcc00317 	ldw	r19,12(sp)
  8138e4:	dc800217 	ldw	r18,8(sp)
  8138e8:	dc400117 	ldw	r17,4(sp)
  8138ec:	dc000017 	ldw	r16,0(sp)
  8138f0:	dec00704 	addi	sp,sp,28
  8138f4:	f800283a 	ret

008138f8 <__i2b>:
  8138f8:	defffd04 	addi	sp,sp,-12
  8138fc:	dc000015 	stw	r16,0(sp)
  813900:	04000044 	movi	r16,1
  813904:	dc800115 	stw	r18,4(sp)
  813908:	2825883a 	mov	r18,r5
  81390c:	800b883a 	mov	r5,r16
  813910:	dfc00215 	stw	ra,8(sp)
  813914:	08132000 	call	813200 <_Balloc>
  813918:	14000415 	stw	r16,16(r2)
  81391c:	14800515 	stw	r18,20(r2)
  813920:	dfc00217 	ldw	ra,8(sp)
  813924:	dc800117 	ldw	r18,4(sp)
  813928:	dc000017 	ldw	r16,0(sp)
  81392c:	dec00304 	addi	sp,sp,12
  813930:	f800283a 	ret

00813934 <__multadd>:
  813934:	defffa04 	addi	sp,sp,-24
  813938:	dc800215 	stw	r18,8(sp)
  81393c:	2c800417 	ldw	r18,16(r5)
  813940:	dd000415 	stw	r20,16(sp)
  813944:	dcc00315 	stw	r19,12(sp)
  813948:	dc000015 	stw	r16,0(sp)
  81394c:	dfc00515 	stw	ra,20(sp)
  813950:	3821883a 	mov	r16,r7
  813954:	dc400115 	stw	r17,4(sp)
  813958:	2827883a 	mov	r19,r5
  81395c:	2029883a 	mov	r20,r4
  813960:	2a000504 	addi	r8,r5,20
  813964:	000f883a 	mov	r7,zero
  813968:	40800017 	ldw	r2,0(r8)
  81396c:	39c00044 	addi	r7,r7,1
  813970:	10ffffcc 	andi	r3,r2,65535
  813974:	1987383a 	mul	r3,r3,r6
  813978:	1004d43a 	srli	r2,r2,16
  81397c:	1c07883a 	add	r3,r3,r16
  813980:	180ad43a 	srli	r5,r3,16
  813984:	1185383a 	mul	r2,r2,r6
  813988:	18ffffcc 	andi	r3,r3,65535
  81398c:	1145883a 	add	r2,r2,r5
  813990:	1008943a 	slli	r4,r2,16
  813994:	1020d43a 	srli	r16,r2,16
  813998:	20c9883a 	add	r4,r4,r3
  81399c:	41000015 	stw	r4,0(r8)
  8139a0:	42000104 	addi	r8,r8,4
  8139a4:	3cbff016 	blt	r7,r18,813968 <__multadd+0x34>
  8139a8:	80000826 	beq	r16,zero,8139cc <__multadd+0x98>
  8139ac:	98800217 	ldw	r2,8(r19)
  8139b0:	90800f0e 	bge	r18,r2,8139f0 <__multadd+0xbc>
  8139b4:	9485883a 	add	r2,r18,r18
  8139b8:	1085883a 	add	r2,r2,r2
  8139bc:	14c5883a 	add	r2,r2,r19
  8139c0:	90c00044 	addi	r3,r18,1
  8139c4:	14000515 	stw	r16,20(r2)
  8139c8:	98c00415 	stw	r3,16(r19)
  8139cc:	9805883a 	mov	r2,r19
  8139d0:	dfc00517 	ldw	ra,20(sp)
  8139d4:	dd000417 	ldw	r20,16(sp)
  8139d8:	dcc00317 	ldw	r19,12(sp)
  8139dc:	dc800217 	ldw	r18,8(sp)
  8139e0:	dc400117 	ldw	r17,4(sp)
  8139e4:	dc000017 	ldw	r16,0(sp)
  8139e8:	dec00604 	addi	sp,sp,24
  8139ec:	f800283a 	ret
  8139f0:	99400117 	ldw	r5,4(r19)
  8139f4:	a009883a 	mov	r4,r20
  8139f8:	29400044 	addi	r5,r5,1
  8139fc:	08132000 	call	813200 <_Balloc>
  813a00:	99800417 	ldw	r6,16(r19)
  813a04:	99400304 	addi	r5,r19,12
  813a08:	11000304 	addi	r4,r2,12
  813a0c:	318d883a 	add	r6,r6,r6
  813a10:	318d883a 	add	r6,r6,r6
  813a14:	31800204 	addi	r6,r6,8
  813a18:	1023883a 	mov	r17,r2
  813a1c:	080dd7c0 	call	80dd7c <memcpy>
  813a20:	980b883a 	mov	r5,r19
  813a24:	a009883a 	mov	r4,r20
  813a28:	0812c800 	call	812c80 <_Bfree>
  813a2c:	8827883a 	mov	r19,r17
  813a30:	003fe006 	br	8139b4 <__multadd+0x80>

00813a34 <__pow5mult>:
  813a34:	defffa04 	addi	sp,sp,-24
  813a38:	308000cc 	andi	r2,r6,3
  813a3c:	dd000415 	stw	r20,16(sp)
  813a40:	dcc00315 	stw	r19,12(sp)
  813a44:	dc000015 	stw	r16,0(sp)
  813a48:	dfc00515 	stw	ra,20(sp)
  813a4c:	dc800215 	stw	r18,8(sp)
  813a50:	dc400115 	stw	r17,4(sp)
  813a54:	3021883a 	mov	r16,r6
  813a58:	2027883a 	mov	r19,r4
  813a5c:	2829883a 	mov	r20,r5
  813a60:	10002b1e 	bne	r2,zero,813b10 <__pow5mult+0xdc>
  813a64:	8025d0ba 	srai	r18,r16,2
  813a68:	90001b26 	beq	r18,zero,813ad8 <__pow5mult+0xa4>
  813a6c:	9c001217 	ldw	r16,72(r19)
  813a70:	8000081e 	bne	r16,zero,813a94 <__pow5mult+0x60>
  813a74:	00003006 	br	813b38 <__pow5mult+0x104>
  813a78:	800b883a 	mov	r5,r16
  813a7c:	800d883a 	mov	r6,r16
  813a80:	9809883a 	mov	r4,r19
  813a84:	90001426 	beq	r18,zero,813ad8 <__pow5mult+0xa4>
  813a88:	80800017 	ldw	r2,0(r16)
  813a8c:	10001b26 	beq	r2,zero,813afc <__pow5mult+0xc8>
  813a90:	1021883a 	mov	r16,r2
  813a94:	9080004c 	andi	r2,r18,1
  813a98:	1005003a 	cmpeq	r2,r2,zero
  813a9c:	9025d07a 	srai	r18,r18,1
  813aa0:	800d883a 	mov	r6,r16
  813aa4:	9809883a 	mov	r4,r19
  813aa8:	a00b883a 	mov	r5,r20
  813aac:	103ff21e 	bne	r2,zero,813a78 <__pow5mult+0x44>
  813ab0:	08137100 	call	813710 <__multiply>
  813ab4:	a00b883a 	mov	r5,r20
  813ab8:	9809883a 	mov	r4,r19
  813abc:	1023883a 	mov	r17,r2
  813ac0:	0812c800 	call	812c80 <_Bfree>
  813ac4:	8829883a 	mov	r20,r17
  813ac8:	800b883a 	mov	r5,r16
  813acc:	800d883a 	mov	r6,r16
  813ad0:	9809883a 	mov	r4,r19
  813ad4:	903fec1e 	bne	r18,zero,813a88 <__pow5mult+0x54>
  813ad8:	a005883a 	mov	r2,r20
  813adc:	dfc00517 	ldw	ra,20(sp)
  813ae0:	dd000417 	ldw	r20,16(sp)
  813ae4:	dcc00317 	ldw	r19,12(sp)
  813ae8:	dc800217 	ldw	r18,8(sp)
  813aec:	dc400117 	ldw	r17,4(sp)
  813af0:	dc000017 	ldw	r16,0(sp)
  813af4:	dec00604 	addi	sp,sp,24
  813af8:	f800283a 	ret
  813afc:	08137100 	call	813710 <__multiply>
  813b00:	80800015 	stw	r2,0(r16)
  813b04:	1021883a 	mov	r16,r2
  813b08:	10000015 	stw	zero,0(r2)
  813b0c:	003fe106 	br	813a94 <__pow5mult+0x60>
  813b10:	1085883a 	add	r2,r2,r2
  813b14:	00c020b4 	movhi	r3,130
  813b18:	18ccce04 	addi	r3,r3,13112
  813b1c:	1085883a 	add	r2,r2,r2
  813b20:	10c5883a 	add	r2,r2,r3
  813b24:	11bfff17 	ldw	r6,-4(r2)
  813b28:	000f883a 	mov	r7,zero
  813b2c:	08139340 	call	813934 <__multadd>
  813b30:	1029883a 	mov	r20,r2
  813b34:	003fcb06 	br	813a64 <__pow5mult+0x30>
  813b38:	9809883a 	mov	r4,r19
  813b3c:	01409c44 	movi	r5,625
  813b40:	08138f80 	call	8138f8 <__i2b>
  813b44:	98801215 	stw	r2,72(r19)
  813b48:	1021883a 	mov	r16,r2
  813b4c:	10000015 	stw	zero,0(r2)
  813b50:	003fd006 	br	813a94 <__pow5mult+0x60>

00813b54 <__s2b>:
  813b54:	defff904 	addi	sp,sp,-28
  813b58:	dcc00315 	stw	r19,12(sp)
  813b5c:	dc800215 	stw	r18,8(sp)
  813b60:	2827883a 	mov	r19,r5
  813b64:	2025883a 	mov	r18,r4
  813b68:	01400244 	movi	r5,9
  813b6c:	39000204 	addi	r4,r7,8
  813b70:	dd000415 	stw	r20,16(sp)
  813b74:	dc400115 	stw	r17,4(sp)
  813b78:	dfc00615 	stw	ra,24(sp)
  813b7c:	dd400515 	stw	r21,20(sp)
  813b80:	dc000015 	stw	r16,0(sp)
  813b84:	3829883a 	mov	r20,r7
  813b88:	3023883a 	mov	r17,r6
  813b8c:	080cf180 	call	80cf18 <__divsi3>
  813b90:	00c00044 	movi	r3,1
  813b94:	1880350e 	bge	r3,r2,813c6c <__s2b+0x118>
  813b98:	000b883a 	mov	r5,zero
  813b9c:	18c7883a 	add	r3,r3,r3
  813ba0:	29400044 	addi	r5,r5,1
  813ba4:	18bffd16 	blt	r3,r2,813b9c <__s2b+0x48>
  813ba8:	9009883a 	mov	r4,r18
  813bac:	08132000 	call	813200 <_Balloc>
  813bb0:	1011883a 	mov	r8,r2
  813bb4:	d8800717 	ldw	r2,28(sp)
  813bb8:	00c00044 	movi	r3,1
  813bbc:	01800244 	movi	r6,9
  813bc0:	40800515 	stw	r2,20(r8)
  813bc4:	40c00415 	stw	r3,16(r8)
  813bc8:	3440260e 	bge	r6,r17,813c64 <__s2b+0x110>
  813bcc:	3021883a 	mov	r16,r6
  813bd0:	99ab883a 	add	r21,r19,r6
  813bd4:	9c05883a 	add	r2,r19,r16
  813bd8:	11c00007 	ldb	r7,0(r2)
  813bdc:	400b883a 	mov	r5,r8
  813be0:	9009883a 	mov	r4,r18
  813be4:	39fff404 	addi	r7,r7,-48
  813be8:	01800284 	movi	r6,10
  813bec:	08139340 	call	813934 <__multadd>
  813bf0:	84000044 	addi	r16,r16,1
  813bf4:	1011883a 	mov	r8,r2
  813bf8:	8c3ff61e 	bne	r17,r16,813bd4 <__s2b+0x80>
  813bfc:	ac45883a 	add	r2,r21,r17
  813c00:	117ffe04 	addi	r5,r2,-8
  813c04:	880d883a 	mov	r6,r17
  813c08:	35000c0e 	bge	r6,r20,813c3c <__s2b+0xe8>
  813c0c:	a185c83a 	sub	r2,r20,r6
  813c10:	2821883a 	mov	r16,r5
  813c14:	28a3883a 	add	r17,r5,r2
  813c18:	81c00007 	ldb	r7,0(r16)
  813c1c:	400b883a 	mov	r5,r8
  813c20:	9009883a 	mov	r4,r18
  813c24:	39fff404 	addi	r7,r7,-48
  813c28:	01800284 	movi	r6,10
  813c2c:	08139340 	call	813934 <__multadd>
  813c30:	84000044 	addi	r16,r16,1
  813c34:	1011883a 	mov	r8,r2
  813c38:	847ff71e 	bne	r16,r17,813c18 <__s2b+0xc4>
  813c3c:	4005883a 	mov	r2,r8
  813c40:	dfc00617 	ldw	ra,24(sp)
  813c44:	dd400517 	ldw	r21,20(sp)
  813c48:	dd000417 	ldw	r20,16(sp)
  813c4c:	dcc00317 	ldw	r19,12(sp)
  813c50:	dc800217 	ldw	r18,8(sp)
  813c54:	dc400117 	ldw	r17,4(sp)
  813c58:	dc000017 	ldw	r16,0(sp)
  813c5c:	dec00704 	addi	sp,sp,28
  813c60:	f800283a 	ret
  813c64:	99400284 	addi	r5,r19,10
  813c68:	003fe706 	br	813c08 <__s2b+0xb4>
  813c6c:	000b883a 	mov	r5,zero
  813c70:	003fcd06 	br	813ba8 <__s2b+0x54>

00813c74 <putc>:
  813c74:	defffc04 	addi	sp,sp,-16
  813c78:	dc800215 	stw	r18,8(sp)
  813c7c:	048020b4 	movhi	r18,130
  813c80:	9493eb04 	addi	r18,r18,20396
  813c84:	90c00017 	ldw	r3,0(r18)
  813c88:	dc400115 	stw	r17,4(sp)
  813c8c:	dc000015 	stw	r16,0(sp)
  813c90:	dfc00315 	stw	ra,12(sp)
  813c94:	2023883a 	mov	r17,r4
  813c98:	2821883a 	mov	r16,r5
  813c9c:	18000226 	beq	r3,zero,813ca8 <putc+0x34>
  813ca0:	18800e17 	ldw	r2,56(r3)
  813ca4:	10001126 	beq	r2,zero,813cec <putc+0x78>
  813ca8:	80800217 	ldw	r2,8(r16)
  813cac:	10ffffc4 	addi	r3,r2,-1
  813cb0:	80c00215 	stw	r3,8(r16)
  813cb4:	18001316 	blt	r3,zero,813d04 <putc+0x90>
  813cb8:	80800017 	ldw	r2,0(r16)
  813cbc:	14400005 	stb	r17,0(r2)
  813cc0:	80c00017 	ldw	r3,0(r16)
  813cc4:	18800044 	addi	r2,r3,1
  813cc8:	18c00003 	ldbu	r3,0(r3)
  813ccc:	80800015 	stw	r2,0(r16)
  813cd0:	1805883a 	mov	r2,r3
  813cd4:	dfc00317 	ldw	ra,12(sp)
  813cd8:	dc800217 	ldw	r18,8(sp)
  813cdc:	dc400117 	ldw	r17,4(sp)
  813ce0:	dc000017 	ldw	r16,0(sp)
  813ce4:	dec00404 	addi	sp,sp,16
  813ce8:	f800283a 	ret
  813cec:	1809883a 	mov	r4,r3
  813cf0:	0811b180 	call	811b18 <__sinit>
  813cf4:	80800217 	ldw	r2,8(r16)
  813cf8:	10ffffc4 	addi	r3,r2,-1
  813cfc:	80c00215 	stw	r3,8(r16)
  813d00:	183fed0e 	bge	r3,zero,813cb8 <putc+0x44>
  813d04:	80800617 	ldw	r2,24(r16)
  813d08:	18800f16 	blt	r3,r2,813d48 <putc+0xd4>
  813d0c:	80800017 	ldw	r2,0(r16)
  813d10:	14400005 	stb	r17,0(r2)
  813d14:	81000017 	ldw	r4,0(r16)
  813d18:	00800284 	movi	r2,10
  813d1c:	20c00003 	ldbu	r3,0(r4)
  813d20:	18801226 	beq	r3,r2,813d6c <putc+0xf8>
  813d24:	20800044 	addi	r2,r4,1
  813d28:	80800015 	stw	r2,0(r16)
  813d2c:	1805883a 	mov	r2,r3
  813d30:	dfc00317 	ldw	ra,12(sp)
  813d34:	dc800217 	ldw	r18,8(sp)
  813d38:	dc400117 	ldw	r17,4(sp)
  813d3c:	dc000017 	ldw	r16,0(sp)
  813d40:	dec00404 	addi	sp,sp,16
  813d44:	f800283a 	ret
  813d48:	91000017 	ldw	r4,0(r18)
  813d4c:	880b883a 	mov	r5,r17
  813d50:	800d883a 	mov	r6,r16
  813d54:	dfc00317 	ldw	ra,12(sp)
  813d58:	dc800217 	ldw	r18,8(sp)
  813d5c:	dc400117 	ldw	r17,4(sp)
  813d60:	dc000017 	ldw	r16,0(sp)
  813d64:	dec00404 	addi	sp,sp,16
  813d68:	08146cc1 	jmpi	8146cc <__swbuf_r>
  813d6c:	91000017 	ldw	r4,0(r18)
  813d70:	180b883a 	mov	r5,r3
  813d74:	003ff606 	br	813d50 <putc+0xdc>

00813d78 <_putc_r>:
  813d78:	defffc04 	addi	sp,sp,-16
  813d7c:	dc400215 	stw	r17,8(sp)
  813d80:	dc000115 	stw	r16,4(sp)
  813d84:	dfc00315 	stw	ra,12(sp)
  813d88:	2021883a 	mov	r16,r4
  813d8c:	2823883a 	mov	r17,r5
  813d90:	20000226 	beq	r4,zero,813d9c <_putc_r+0x24>
  813d94:	20800e17 	ldw	r2,56(r4)
  813d98:	10001026 	beq	r2,zero,813ddc <_putc_r+0x64>
  813d9c:	30800217 	ldw	r2,8(r6)
  813da0:	10ffffc4 	addi	r3,r2,-1
  813da4:	30c00215 	stw	r3,8(r6)
  813da8:	18001316 	blt	r3,zero,813df8 <_putc_r+0x80>
  813dac:	30800017 	ldw	r2,0(r6)
  813db0:	14400005 	stb	r17,0(r2)
  813db4:	30c00017 	ldw	r3,0(r6)
  813db8:	18800044 	addi	r2,r3,1
  813dbc:	18c00003 	ldbu	r3,0(r3)
  813dc0:	30800015 	stw	r2,0(r6)
  813dc4:	1805883a 	mov	r2,r3
  813dc8:	dfc00317 	ldw	ra,12(sp)
  813dcc:	dc400217 	ldw	r17,8(sp)
  813dd0:	dc000117 	ldw	r16,4(sp)
  813dd4:	dec00404 	addi	sp,sp,16
  813dd8:	f800283a 	ret
  813ddc:	d9800015 	stw	r6,0(sp)
  813de0:	0811b180 	call	811b18 <__sinit>
  813de4:	d9800017 	ldw	r6,0(sp)
  813de8:	30800217 	ldw	r2,8(r6)
  813dec:	10ffffc4 	addi	r3,r2,-1
  813df0:	30c00215 	stw	r3,8(r6)
  813df4:	183fed0e 	bge	r3,zero,813dac <_putc_r+0x34>
  813df8:	30800617 	ldw	r2,24(r6)
  813dfc:	18800e16 	blt	r3,r2,813e38 <_putc_r+0xc0>
  813e00:	30800017 	ldw	r2,0(r6)
  813e04:	14400005 	stb	r17,0(r2)
  813e08:	31000017 	ldw	r4,0(r6)
  813e0c:	00800284 	movi	r2,10
  813e10:	20c00003 	ldbu	r3,0(r4)
  813e14:	18800f26 	beq	r3,r2,813e54 <_putc_r+0xdc>
  813e18:	20800044 	addi	r2,r4,1
  813e1c:	30800015 	stw	r2,0(r6)
  813e20:	1805883a 	mov	r2,r3
  813e24:	dfc00317 	ldw	ra,12(sp)
  813e28:	dc400217 	ldw	r17,8(sp)
  813e2c:	dc000117 	ldw	r16,4(sp)
  813e30:	dec00404 	addi	sp,sp,16
  813e34:	f800283a 	ret
  813e38:	8009883a 	mov	r4,r16
  813e3c:	880b883a 	mov	r5,r17
  813e40:	dfc00317 	ldw	ra,12(sp)
  813e44:	dc400217 	ldw	r17,8(sp)
  813e48:	dc000117 	ldw	r16,4(sp)
  813e4c:	dec00404 	addi	sp,sp,16
  813e50:	08146cc1 	jmpi	8146cc <__swbuf_r>
  813e54:	8009883a 	mov	r4,r16
  813e58:	180b883a 	mov	r5,r3
  813e5c:	003ff806 	br	813e40 <_putc_r+0xc8>

00813e60 <_realloc_r>:
  813e60:	defff404 	addi	sp,sp,-48
  813e64:	dd800815 	stw	r22,32(sp)
  813e68:	dc800415 	stw	r18,16(sp)
  813e6c:	dc400315 	stw	r17,12(sp)
  813e70:	dfc00b15 	stw	ra,44(sp)
  813e74:	df000a15 	stw	fp,40(sp)
  813e78:	ddc00915 	stw	r23,36(sp)
  813e7c:	dd400715 	stw	r21,28(sp)
  813e80:	dd000615 	stw	r20,24(sp)
  813e84:	dcc00515 	stw	r19,20(sp)
  813e88:	dc000215 	stw	r16,8(sp)
  813e8c:	2825883a 	mov	r18,r5
  813e90:	3023883a 	mov	r17,r6
  813e94:	202d883a 	mov	r22,r4
  813e98:	2800c926 	beq	r5,zero,8141c0 <_realloc_r+0x360>
  813e9c:	08166e00 	call	8166e0 <__malloc_lock>
  813ea0:	943ffe04 	addi	r16,r18,-8
  813ea4:	88c002c4 	addi	r3,r17,11
  813ea8:	00800584 	movi	r2,22
  813eac:	82000117 	ldw	r8,4(r16)
  813eb0:	10c01b2e 	bgeu	r2,r3,813f20 <_realloc_r+0xc0>
  813eb4:	00bffe04 	movi	r2,-8
  813eb8:	188e703a 	and	r7,r3,r2
  813ebc:	3839883a 	mov	fp,r7
  813ec0:	38001a16 	blt	r7,zero,813f2c <_realloc_r+0xcc>
  813ec4:	e4401936 	bltu	fp,r17,813f2c <_realloc_r+0xcc>
  813ec8:	013fff04 	movi	r4,-4
  813ecc:	4126703a 	and	r19,r8,r4
  813ed0:	99c02616 	blt	r19,r7,813f6c <_realloc_r+0x10c>
  813ed4:	802b883a 	mov	r21,r16
  813ed8:	9829883a 	mov	r20,r19
  813edc:	84000204 	addi	r16,r16,8
  813ee0:	a80f883a 	mov	r7,r21
  813ee4:	a70dc83a 	sub	r6,r20,fp
  813ee8:	008003c4 	movi	r2,15
  813eec:	1180c136 	bltu	r2,r6,8141f4 <_realloc_r+0x394>
  813ef0:	38800117 	ldw	r2,4(r7)
  813ef4:	a549883a 	add	r4,r20,r21
  813ef8:	1080004c 	andi	r2,r2,1
  813efc:	a084b03a 	or	r2,r20,r2
  813f00:	38800115 	stw	r2,4(r7)
  813f04:	20c00117 	ldw	r3,4(r4)
  813f08:	18c00054 	ori	r3,r3,1
  813f0c:	20c00115 	stw	r3,4(r4)
  813f10:	b009883a 	mov	r4,r22
  813f14:	08167e80 	call	8167e8 <__malloc_unlock>
  813f18:	8023883a 	mov	r17,r16
  813f1c:	00000606 	br	813f38 <_realloc_r+0xd8>
  813f20:	01c00404 	movi	r7,16
  813f24:	3839883a 	mov	fp,r7
  813f28:	e47fe72e 	bgeu	fp,r17,813ec8 <_realloc_r+0x68>
  813f2c:	00800304 	movi	r2,12
  813f30:	0023883a 	mov	r17,zero
  813f34:	b0800015 	stw	r2,0(r22)
  813f38:	8805883a 	mov	r2,r17
  813f3c:	dfc00b17 	ldw	ra,44(sp)
  813f40:	df000a17 	ldw	fp,40(sp)
  813f44:	ddc00917 	ldw	r23,36(sp)
  813f48:	dd800817 	ldw	r22,32(sp)
  813f4c:	dd400717 	ldw	r21,28(sp)
  813f50:	dd000617 	ldw	r20,24(sp)
  813f54:	dcc00517 	ldw	r19,20(sp)
  813f58:	dc800417 	ldw	r18,16(sp)
  813f5c:	dc400317 	ldw	r17,12(sp)
  813f60:	dc000217 	ldw	r16,8(sp)
  813f64:	dec00c04 	addi	sp,sp,48
  813f68:	f800283a 	ret
  813f6c:	008020b4 	movhi	r2,130
  813f70:	108d3c04 	addi	r2,r2,13552
  813f74:	12400217 	ldw	r9,8(r2)
  813f78:	84cd883a 	add	r6,r16,r19
  813f7c:	802b883a 	mov	r21,r16
  813f80:	3240b926 	beq	r6,r9,814268 <_realloc_r+0x408>
  813f84:	31400117 	ldw	r5,4(r6)
  813f88:	00bfff84 	movi	r2,-2
  813f8c:	2884703a 	and	r2,r5,r2
  813f90:	1185883a 	add	r2,r2,r6
  813f94:	10c00117 	ldw	r3,4(r2)
  813f98:	18c0004c 	andi	r3,r3,1
  813f9c:	1807003a 	cmpeq	r3,r3,zero
  813fa0:	1800a326 	beq	r3,zero,814230 <_realloc_r+0x3d0>
  813fa4:	2908703a 	and	r4,r5,r4
  813fa8:	9929883a 	add	r20,r19,r4
  813fac:	a1c0a30e 	bge	r20,r7,81423c <_realloc_r+0x3dc>
  813fb0:	4080004c 	andi	r2,r8,1
  813fb4:	1000551e 	bne	r2,zero,81410c <_realloc_r+0x2ac>
  813fb8:	80800017 	ldw	r2,0(r16)
  813fbc:	80afc83a 	sub	r23,r16,r2
  813fc0:	b8c00117 	ldw	r3,4(r23)
  813fc4:	00bfff04 	movi	r2,-4
  813fc8:	1884703a 	and	r2,r3,r2
  813fcc:	30002e26 	beq	r6,zero,814088 <_realloc_r+0x228>
  813fd0:	3240b926 	beq	r6,r9,8142b8 <_realloc_r+0x458>
  813fd4:	98a9883a 	add	r20,r19,r2
  813fd8:	2509883a 	add	r4,r4,r20
  813fdc:	d9000015 	stw	r4,0(sp)
  813fe0:	21c02a16 	blt	r4,r7,81408c <_realloc_r+0x22c>
  813fe4:	30800317 	ldw	r2,12(r6)
  813fe8:	30c00217 	ldw	r3,8(r6)
  813fec:	01400904 	movi	r5,36
  813ff0:	99bfff04 	addi	r6,r19,-4
  813ff4:	18800315 	stw	r2,12(r3)
  813ff8:	10c00215 	stw	r3,8(r2)
  813ffc:	b9000317 	ldw	r4,12(r23)
  814000:	b8800217 	ldw	r2,8(r23)
  814004:	b82b883a 	mov	r21,r23
  814008:	bc000204 	addi	r16,r23,8
  81400c:	20800215 	stw	r2,8(r4)
  814010:	11000315 	stw	r4,12(r2)
  814014:	2980e436 	bltu	r5,r6,8143a8 <_realloc_r+0x548>
  814018:	008004c4 	movi	r2,19
  81401c:	9009883a 	mov	r4,r18
  814020:	8011883a 	mov	r8,r16
  814024:	11800f2e 	bgeu	r2,r6,814064 <_realloc_r+0x204>
  814028:	90800017 	ldw	r2,0(r18)
  81402c:	ba000404 	addi	r8,r23,16
  814030:	91000204 	addi	r4,r18,8
  814034:	b8800215 	stw	r2,8(r23)
  814038:	90c00117 	ldw	r3,4(r18)
  81403c:	008006c4 	movi	r2,27
  814040:	b8c00315 	stw	r3,12(r23)
  814044:	1180072e 	bgeu	r2,r6,814064 <_realloc_r+0x204>
  814048:	90c00217 	ldw	r3,8(r18)
  81404c:	ba000604 	addi	r8,r23,24
  814050:	91000404 	addi	r4,r18,16
  814054:	b8c00415 	stw	r3,16(r23)
  814058:	90800317 	ldw	r2,12(r18)
  81405c:	b8800515 	stw	r2,20(r23)
  814060:	3140e726 	beq	r6,r5,814400 <_realloc_r+0x5a0>
  814064:	20800017 	ldw	r2,0(r4)
  814068:	dd000017 	ldw	r20,0(sp)
  81406c:	b80f883a 	mov	r7,r23
  814070:	40800015 	stw	r2,0(r8)
  814074:	20c00117 	ldw	r3,4(r4)
  814078:	40c00115 	stw	r3,4(r8)
  81407c:	20800217 	ldw	r2,8(r4)
  814080:	40800215 	stw	r2,8(r8)
  814084:	003f9706 	br	813ee4 <_realloc_r+0x84>
  814088:	98a9883a 	add	r20,r19,r2
  81408c:	a1c01f16 	blt	r20,r7,81410c <_realloc_r+0x2ac>
  814090:	b8c00317 	ldw	r3,12(r23)
  814094:	b8800217 	ldw	r2,8(r23)
  814098:	99bfff04 	addi	r6,r19,-4
  81409c:	01400904 	movi	r5,36
  8140a0:	b82b883a 	mov	r21,r23
  8140a4:	18800215 	stw	r2,8(r3)
  8140a8:	10c00315 	stw	r3,12(r2)
  8140ac:	bc000204 	addi	r16,r23,8
  8140b0:	2980c336 	bltu	r5,r6,8143c0 <_realloc_r+0x560>
  8140b4:	008004c4 	movi	r2,19
  8140b8:	9009883a 	mov	r4,r18
  8140bc:	8011883a 	mov	r8,r16
  8140c0:	11800f2e 	bgeu	r2,r6,814100 <_realloc_r+0x2a0>
  8140c4:	90800017 	ldw	r2,0(r18)
  8140c8:	ba000404 	addi	r8,r23,16
  8140cc:	91000204 	addi	r4,r18,8
  8140d0:	b8800215 	stw	r2,8(r23)
  8140d4:	90c00117 	ldw	r3,4(r18)
  8140d8:	008006c4 	movi	r2,27
  8140dc:	b8c00315 	stw	r3,12(r23)
  8140e0:	1180072e 	bgeu	r2,r6,814100 <_realloc_r+0x2a0>
  8140e4:	90c00217 	ldw	r3,8(r18)
  8140e8:	ba000604 	addi	r8,r23,24
  8140ec:	91000404 	addi	r4,r18,16
  8140f0:	b8c00415 	stw	r3,16(r23)
  8140f4:	90800317 	ldw	r2,12(r18)
  8140f8:	b8800515 	stw	r2,20(r23)
  8140fc:	3140c726 	beq	r6,r5,81441c <_realloc_r+0x5bc>
  814100:	20800017 	ldw	r2,0(r4)
  814104:	b80f883a 	mov	r7,r23
  814108:	003fd906 	br	814070 <_realloc_r+0x210>
  81410c:	880b883a 	mov	r5,r17
  814110:	b009883a 	mov	r4,r22
  814114:	080d63c0 	call	80d63c <_malloc_r>
  814118:	1023883a 	mov	r17,r2
  81411c:	10002526 	beq	r2,zero,8141b4 <_realloc_r+0x354>
  814120:	80800117 	ldw	r2,4(r16)
  814124:	00ffff84 	movi	r3,-2
  814128:	893ffe04 	addi	r4,r17,-8
  81412c:	10c4703a 	and	r2,r2,r3
  814130:	8085883a 	add	r2,r16,r2
  814134:	20809526 	beq	r4,r2,81438c <_realloc_r+0x52c>
  814138:	99bfff04 	addi	r6,r19,-4
  81413c:	01c00904 	movi	r7,36
  814140:	39804536 	bltu	r7,r6,814258 <_realloc_r+0x3f8>
  814144:	008004c4 	movi	r2,19
  814148:	9009883a 	mov	r4,r18
  81414c:	880b883a 	mov	r5,r17
  814150:	11800f2e 	bgeu	r2,r6,814190 <_realloc_r+0x330>
  814154:	90800017 	ldw	r2,0(r18)
  814158:	89400204 	addi	r5,r17,8
  81415c:	91000204 	addi	r4,r18,8
  814160:	88800015 	stw	r2,0(r17)
  814164:	90c00117 	ldw	r3,4(r18)
  814168:	008006c4 	movi	r2,27
  81416c:	88c00115 	stw	r3,4(r17)
  814170:	1180072e 	bgeu	r2,r6,814190 <_realloc_r+0x330>
  814174:	90c00217 	ldw	r3,8(r18)
  814178:	89400404 	addi	r5,r17,16
  81417c:	91000404 	addi	r4,r18,16
  814180:	88c00215 	stw	r3,8(r17)
  814184:	90800317 	ldw	r2,12(r18)
  814188:	88800315 	stw	r2,12(r17)
  81418c:	31c09126 	beq	r6,r7,8143d4 <_realloc_r+0x574>
  814190:	20800017 	ldw	r2,0(r4)
  814194:	28800015 	stw	r2,0(r5)
  814198:	20c00117 	ldw	r3,4(r4)
  81419c:	28c00115 	stw	r3,4(r5)
  8141a0:	20800217 	ldw	r2,8(r4)
  8141a4:	28800215 	stw	r2,8(r5)
  8141a8:	900b883a 	mov	r5,r18
  8141ac:	b009883a 	mov	r4,r22
  8141b0:	0811e9c0 	call	811e9c <_free_r>
  8141b4:	b009883a 	mov	r4,r22
  8141b8:	08167e80 	call	8167e8 <__malloc_unlock>
  8141bc:	003f5e06 	br	813f38 <_realloc_r+0xd8>
  8141c0:	300b883a 	mov	r5,r6
  8141c4:	dfc00b17 	ldw	ra,44(sp)
  8141c8:	df000a17 	ldw	fp,40(sp)
  8141cc:	ddc00917 	ldw	r23,36(sp)
  8141d0:	dd800817 	ldw	r22,32(sp)
  8141d4:	dd400717 	ldw	r21,28(sp)
  8141d8:	dd000617 	ldw	r20,24(sp)
  8141dc:	dcc00517 	ldw	r19,20(sp)
  8141e0:	dc800417 	ldw	r18,16(sp)
  8141e4:	dc400317 	ldw	r17,12(sp)
  8141e8:	dc000217 	ldw	r16,8(sp)
  8141ec:	dec00c04 	addi	sp,sp,48
  8141f0:	080d63c1 	jmpi	80d63c <_malloc_r>
  8141f4:	38800117 	ldw	r2,4(r7)
  8141f8:	e54b883a 	add	r5,fp,r21
  8141fc:	31000054 	ori	r4,r6,1
  814200:	1080004c 	andi	r2,r2,1
  814204:	1704b03a 	or	r2,r2,fp
  814208:	38800115 	stw	r2,4(r7)
  81420c:	29000115 	stw	r4,4(r5)
  814210:	2987883a 	add	r3,r5,r6
  814214:	18800117 	ldw	r2,4(r3)
  814218:	29400204 	addi	r5,r5,8
  81421c:	b009883a 	mov	r4,r22
  814220:	10800054 	ori	r2,r2,1
  814224:	18800115 	stw	r2,4(r3)
  814228:	0811e9c0 	call	811e9c <_free_r>
  81422c:	003f3806 	br	813f10 <_realloc_r+0xb0>
  814230:	000d883a 	mov	r6,zero
  814234:	0009883a 	mov	r4,zero
  814238:	003f5d06 	br	813fb0 <_realloc_r+0x150>
  81423c:	30c00217 	ldw	r3,8(r6)
  814240:	30800317 	ldw	r2,12(r6)
  814244:	800f883a 	mov	r7,r16
  814248:	84000204 	addi	r16,r16,8
  81424c:	10c00215 	stw	r3,8(r2)
  814250:	18800315 	stw	r2,12(r3)
  814254:	003f2306 	br	813ee4 <_realloc_r+0x84>
  814258:	8809883a 	mov	r4,r17
  81425c:	900b883a 	mov	r5,r18
  814260:	0812b080 	call	812b08 <memmove>
  814264:	003fd006 	br	8141a8 <_realloc_r+0x348>
  814268:	30800117 	ldw	r2,4(r6)
  81426c:	e0c00404 	addi	r3,fp,16
  814270:	1108703a 	and	r4,r2,r4
  814274:	9905883a 	add	r2,r19,r4
  814278:	10ff4d16 	blt	r2,r3,813fb0 <_realloc_r+0x150>
  81427c:	1705c83a 	sub	r2,r2,fp
  814280:	870b883a 	add	r5,r16,fp
  814284:	10800054 	ori	r2,r2,1
  814288:	28800115 	stw	r2,4(r5)
  81428c:	80c00117 	ldw	r3,4(r16)
  814290:	008020b4 	movhi	r2,130
  814294:	108d3c04 	addi	r2,r2,13552
  814298:	b009883a 	mov	r4,r22
  81429c:	18c0004c 	andi	r3,r3,1
  8142a0:	e0c6b03a 	or	r3,fp,r3
  8142a4:	11400215 	stw	r5,8(r2)
  8142a8:	80c00115 	stw	r3,4(r16)
  8142ac:	08167e80 	call	8167e8 <__malloc_unlock>
  8142b0:	84400204 	addi	r17,r16,8
  8142b4:	003f2006 	br	813f38 <_realloc_r+0xd8>
  8142b8:	98a9883a 	add	r20,r19,r2
  8142bc:	2509883a 	add	r4,r4,r20
  8142c0:	e0800404 	addi	r2,fp,16
  8142c4:	d9000115 	stw	r4,4(sp)
  8142c8:	20bf7016 	blt	r4,r2,81408c <_realloc_r+0x22c>
  8142cc:	b8c00317 	ldw	r3,12(r23)
  8142d0:	b8800217 	ldw	r2,8(r23)
  8142d4:	99bfff04 	addi	r6,r19,-4
  8142d8:	01400904 	movi	r5,36
  8142dc:	18800215 	stw	r2,8(r3)
  8142e0:	10c00315 	stw	r3,12(r2)
  8142e4:	bc400204 	addi	r17,r23,8
  8142e8:	29804136 	bltu	r5,r6,8143f0 <_realloc_r+0x590>
  8142ec:	008004c4 	movi	r2,19
  8142f0:	9009883a 	mov	r4,r18
  8142f4:	880f883a 	mov	r7,r17
  8142f8:	11800f2e 	bgeu	r2,r6,814338 <_realloc_r+0x4d8>
  8142fc:	90800017 	ldw	r2,0(r18)
  814300:	b9c00404 	addi	r7,r23,16
  814304:	91000204 	addi	r4,r18,8
  814308:	b8800215 	stw	r2,8(r23)
  81430c:	90c00117 	ldw	r3,4(r18)
  814310:	008006c4 	movi	r2,27
  814314:	b8c00315 	stw	r3,12(r23)
  814318:	1180072e 	bgeu	r2,r6,814338 <_realloc_r+0x4d8>
  81431c:	90c00217 	ldw	r3,8(r18)
  814320:	b9c00604 	addi	r7,r23,24
  814324:	91000404 	addi	r4,r18,16
  814328:	b8c00415 	stw	r3,16(r23)
  81432c:	90800317 	ldw	r2,12(r18)
  814330:	b8800515 	stw	r2,20(r23)
  814334:	31404026 	beq	r6,r5,814438 <_realloc_r+0x5d8>
  814338:	20800017 	ldw	r2,0(r4)
  81433c:	38800015 	stw	r2,0(r7)
  814340:	20c00117 	ldw	r3,4(r4)
  814344:	38c00115 	stw	r3,4(r7)
  814348:	20800217 	ldw	r2,8(r4)
  81434c:	38800215 	stw	r2,8(r7)
  814350:	d8c00117 	ldw	r3,4(sp)
  814354:	bf0b883a 	add	r5,r23,fp
  814358:	b009883a 	mov	r4,r22
  81435c:	1f05c83a 	sub	r2,r3,fp
  814360:	10800054 	ori	r2,r2,1
  814364:	28800115 	stw	r2,4(r5)
  814368:	b8c00117 	ldw	r3,4(r23)
  81436c:	008020b4 	movhi	r2,130
  814370:	108d3c04 	addi	r2,r2,13552
  814374:	11400215 	stw	r5,8(r2)
  814378:	18c0004c 	andi	r3,r3,1
  81437c:	e0c6b03a 	or	r3,fp,r3
  814380:	b8c00115 	stw	r3,4(r23)
  814384:	08167e80 	call	8167e8 <__malloc_unlock>
  814388:	003eeb06 	br	813f38 <_realloc_r+0xd8>
  81438c:	20800117 	ldw	r2,4(r4)
  814390:	00ffff04 	movi	r3,-4
  814394:	800f883a 	mov	r7,r16
  814398:	10c4703a 	and	r2,r2,r3
  81439c:	98a9883a 	add	r20,r19,r2
  8143a0:	84000204 	addi	r16,r16,8
  8143a4:	003ecf06 	br	813ee4 <_realloc_r+0x84>
  8143a8:	900b883a 	mov	r5,r18
  8143ac:	8009883a 	mov	r4,r16
  8143b0:	0812b080 	call	812b08 <memmove>
  8143b4:	dd000017 	ldw	r20,0(sp)
  8143b8:	b80f883a 	mov	r7,r23
  8143bc:	003ec906 	br	813ee4 <_realloc_r+0x84>
  8143c0:	900b883a 	mov	r5,r18
  8143c4:	8009883a 	mov	r4,r16
  8143c8:	0812b080 	call	812b08 <memmove>
  8143cc:	b80f883a 	mov	r7,r23
  8143d0:	003ec406 	br	813ee4 <_realloc_r+0x84>
  8143d4:	90c00417 	ldw	r3,16(r18)
  8143d8:	89400604 	addi	r5,r17,24
  8143dc:	91000604 	addi	r4,r18,24
  8143e0:	88c00415 	stw	r3,16(r17)
  8143e4:	90800517 	ldw	r2,20(r18)
  8143e8:	88800515 	stw	r2,20(r17)
  8143ec:	003f6806 	br	814190 <_realloc_r+0x330>
  8143f0:	900b883a 	mov	r5,r18
  8143f4:	8809883a 	mov	r4,r17
  8143f8:	0812b080 	call	812b08 <memmove>
  8143fc:	003fd406 	br	814350 <_realloc_r+0x4f0>
  814400:	90c00417 	ldw	r3,16(r18)
  814404:	91000604 	addi	r4,r18,24
  814408:	ba000804 	addi	r8,r23,32
  81440c:	b8c00615 	stw	r3,24(r23)
  814410:	90800517 	ldw	r2,20(r18)
  814414:	b8800715 	stw	r2,28(r23)
  814418:	003f1206 	br	814064 <_realloc_r+0x204>
  81441c:	90c00417 	ldw	r3,16(r18)
  814420:	91000604 	addi	r4,r18,24
  814424:	ba000804 	addi	r8,r23,32
  814428:	b8c00615 	stw	r3,24(r23)
  81442c:	90800517 	ldw	r2,20(r18)
  814430:	b8800715 	stw	r2,28(r23)
  814434:	003f3206 	br	814100 <_realloc_r+0x2a0>
  814438:	90c00417 	ldw	r3,16(r18)
  81443c:	91000604 	addi	r4,r18,24
  814440:	b9c00804 	addi	r7,r23,32
  814444:	b8c00615 	stw	r3,24(r23)
  814448:	90800517 	ldw	r2,20(r18)
  81444c:	b8800715 	stw	r2,28(r23)
  814450:	003fb906 	br	814338 <_realloc_r+0x4d8>

00814454 <__isinfd>:
  814454:	200d883a 	mov	r6,r4
  814458:	0109c83a 	sub	r4,zero,r4
  81445c:	2188b03a 	or	r4,r4,r6
  814460:	2008d7fa 	srli	r4,r4,31
  814464:	00a00034 	movhi	r2,32768
  814468:	10bfffc4 	addi	r2,r2,-1
  81446c:	1144703a 	and	r2,r2,r5
  814470:	2088b03a 	or	r4,r4,r2
  814474:	009ffc34 	movhi	r2,32752
  814478:	1105c83a 	sub	r2,r2,r4
  81447c:	0087c83a 	sub	r3,zero,r2
  814480:	10c4b03a 	or	r2,r2,r3
  814484:	1004d7fa 	srli	r2,r2,31
  814488:	00c00044 	movi	r3,1
  81448c:	1885c83a 	sub	r2,r3,r2
  814490:	f800283a 	ret

00814494 <__isnand>:
  814494:	200d883a 	mov	r6,r4
  814498:	0109c83a 	sub	r4,zero,r4
  81449c:	2188b03a 	or	r4,r4,r6
  8144a0:	2008d7fa 	srli	r4,r4,31
  8144a4:	00a00034 	movhi	r2,32768
  8144a8:	10bfffc4 	addi	r2,r2,-1
  8144ac:	1144703a 	and	r2,r2,r5
  8144b0:	2088b03a 	or	r4,r4,r2
  8144b4:	009ffc34 	movhi	r2,32752
  8144b8:	1105c83a 	sub	r2,r2,r4
  8144bc:	1004d7fa 	srli	r2,r2,31
  8144c0:	f800283a 	ret

008144c4 <__sclose>:
  8144c4:	2940038f 	ldh	r5,14(r5)
  8144c8:	08149441 	jmpi	814944 <_close_r>

008144cc <__sseek>:
  8144cc:	defffe04 	addi	sp,sp,-8
  8144d0:	dc000015 	stw	r16,0(sp)
  8144d4:	2821883a 	mov	r16,r5
  8144d8:	2940038f 	ldh	r5,14(r5)
  8144dc:	dfc00115 	stw	ra,4(sp)
  8144e0:	0814bbc0 	call	814bbc <_lseek_r>
  8144e4:	1007883a 	mov	r3,r2
  8144e8:	00bfffc4 	movi	r2,-1
  8144ec:	18800926 	beq	r3,r2,814514 <__sseek+0x48>
  8144f0:	8080030b 	ldhu	r2,12(r16)
  8144f4:	80c01415 	stw	r3,80(r16)
  8144f8:	10840014 	ori	r2,r2,4096
  8144fc:	8080030d 	sth	r2,12(r16)
  814500:	1805883a 	mov	r2,r3
  814504:	dfc00117 	ldw	ra,4(sp)
  814508:	dc000017 	ldw	r16,0(sp)
  81450c:	dec00204 	addi	sp,sp,8
  814510:	f800283a 	ret
  814514:	8080030b 	ldhu	r2,12(r16)
  814518:	10bbffcc 	andi	r2,r2,61439
  81451c:	8080030d 	sth	r2,12(r16)
  814520:	1805883a 	mov	r2,r3
  814524:	dfc00117 	ldw	ra,4(sp)
  814528:	dc000017 	ldw	r16,0(sp)
  81452c:	dec00204 	addi	sp,sp,8
  814530:	f800283a 	ret

00814534 <__swrite>:
  814534:	2880030b 	ldhu	r2,12(r5)
  814538:	defffb04 	addi	sp,sp,-20
  81453c:	dcc00315 	stw	r19,12(sp)
  814540:	1080400c 	andi	r2,r2,256
  814544:	dc800215 	stw	r18,8(sp)
  814548:	dc400115 	stw	r17,4(sp)
  81454c:	dc000015 	stw	r16,0(sp)
  814550:	3027883a 	mov	r19,r6
  814554:	3825883a 	mov	r18,r7
  814558:	dfc00415 	stw	ra,16(sp)
  81455c:	2821883a 	mov	r16,r5
  814560:	000d883a 	mov	r6,zero
  814564:	01c00084 	movi	r7,2
  814568:	2023883a 	mov	r17,r4
  81456c:	10000226 	beq	r2,zero,814578 <__swrite+0x44>
  814570:	2940038f 	ldh	r5,14(r5)
  814574:	0814bbc0 	call	814bbc <_lseek_r>
  814578:	8080030b 	ldhu	r2,12(r16)
  81457c:	8140038f 	ldh	r5,14(r16)
  814580:	8809883a 	mov	r4,r17
  814584:	10bbffcc 	andi	r2,r2,61439
  814588:	980d883a 	mov	r6,r19
  81458c:	900f883a 	mov	r7,r18
  814590:	8080030d 	sth	r2,12(r16)
  814594:	dfc00417 	ldw	ra,16(sp)
  814598:	dcc00317 	ldw	r19,12(sp)
  81459c:	dc800217 	ldw	r18,8(sp)
  8145a0:	dc400117 	ldw	r17,4(sp)
  8145a4:	dc000017 	ldw	r16,0(sp)
  8145a8:	dec00504 	addi	sp,sp,20
  8145ac:	08148181 	jmpi	814818 <_write_r>

008145b0 <__sread>:
  8145b0:	defffe04 	addi	sp,sp,-8
  8145b4:	dc000015 	stw	r16,0(sp)
  8145b8:	2821883a 	mov	r16,r5
  8145bc:	2940038f 	ldh	r5,14(r5)
  8145c0:	dfc00115 	stw	ra,4(sp)
  8145c4:	0814c340 	call	814c34 <_read_r>
  8145c8:	1007883a 	mov	r3,r2
  8145cc:	10000816 	blt	r2,zero,8145f0 <__sread+0x40>
  8145d0:	80801417 	ldw	r2,80(r16)
  8145d4:	10c5883a 	add	r2,r2,r3
  8145d8:	80801415 	stw	r2,80(r16)
  8145dc:	1805883a 	mov	r2,r3
  8145e0:	dfc00117 	ldw	ra,4(sp)
  8145e4:	dc000017 	ldw	r16,0(sp)
  8145e8:	dec00204 	addi	sp,sp,8
  8145ec:	f800283a 	ret
  8145f0:	8080030b 	ldhu	r2,12(r16)
  8145f4:	10bbffcc 	andi	r2,r2,61439
  8145f8:	8080030d 	sth	r2,12(r16)
  8145fc:	1805883a 	mov	r2,r3
  814600:	dfc00117 	ldw	ra,4(sp)
  814604:	dc000017 	ldw	r16,0(sp)
  814608:	dec00204 	addi	sp,sp,8
  81460c:	f800283a 	ret

00814610 <strcmp>:
  814610:	2144b03a 	or	r2,r4,r5
  814614:	108000cc 	andi	r2,r2,3
  814618:	10001d1e 	bne	r2,zero,814690 <strcmp+0x80>
  81461c:	200f883a 	mov	r7,r4
  814620:	28800017 	ldw	r2,0(r5)
  814624:	21000017 	ldw	r4,0(r4)
  814628:	280d883a 	mov	r6,r5
  81462c:	2080161e 	bne	r4,r2,814688 <strcmp+0x78>
  814630:	023fbff4 	movhi	r8,65279
  814634:	423fbfc4 	addi	r8,r8,-257
  814638:	2207883a 	add	r3,r4,r8
  81463c:	01602074 	movhi	r5,32897
  814640:	29602004 	addi	r5,r5,-32640
  814644:	1946703a 	and	r3,r3,r5
  814648:	0104303a 	nor	r2,zero,r4
  81464c:	10c4703a 	and	r2,r2,r3
  814650:	10001c1e 	bne	r2,zero,8146c4 <strcmp+0xb4>
  814654:	4013883a 	mov	r9,r8
  814658:	2811883a 	mov	r8,r5
  81465c:	00000106 	br	814664 <strcmp+0x54>
  814660:	1800181e 	bne	r3,zero,8146c4 <strcmp+0xb4>
  814664:	39c00104 	addi	r7,r7,4
  814668:	39000017 	ldw	r4,0(r7)
  81466c:	31800104 	addi	r6,r6,4
  814670:	31400017 	ldw	r5,0(r6)
  814674:	2245883a 	add	r2,r4,r9
  814678:	1204703a 	and	r2,r2,r8
  81467c:	0106303a 	nor	r3,zero,r4
  814680:	1886703a 	and	r3,r3,r2
  814684:	217ff626 	beq	r4,r5,814660 <strcmp+0x50>
  814688:	3809883a 	mov	r4,r7
  81468c:	300b883a 	mov	r5,r6
  814690:	20c00007 	ldb	r3,0(r4)
  814694:	1800051e 	bne	r3,zero,8146ac <strcmp+0x9c>
  814698:	00000606 	br	8146b4 <strcmp+0xa4>
  81469c:	21000044 	addi	r4,r4,1
  8146a0:	20c00007 	ldb	r3,0(r4)
  8146a4:	29400044 	addi	r5,r5,1
  8146a8:	18000226 	beq	r3,zero,8146b4 <strcmp+0xa4>
  8146ac:	28800007 	ldb	r2,0(r5)
  8146b0:	18bffa26 	beq	r3,r2,81469c <strcmp+0x8c>
  8146b4:	20c00003 	ldbu	r3,0(r4)
  8146b8:	28800003 	ldbu	r2,0(r5)
  8146bc:	1885c83a 	sub	r2,r3,r2
  8146c0:	f800283a 	ret
  8146c4:	0005883a 	mov	r2,zero
  8146c8:	f800283a 	ret

008146cc <__swbuf_r>:
  8146cc:	defffc04 	addi	sp,sp,-16
  8146d0:	dc400215 	stw	r17,8(sp)
  8146d4:	dc000115 	stw	r16,4(sp)
  8146d8:	dfc00315 	stw	ra,12(sp)
  8146dc:	2023883a 	mov	r17,r4
  8146e0:	2821883a 	mov	r16,r5
  8146e4:	20000226 	beq	r4,zero,8146f0 <__swbuf_r+0x24>
  8146e8:	20800e17 	ldw	r2,56(r4)
  8146ec:	10002f26 	beq	r2,zero,8147ac <__swbuf_r+0xe0>
  8146f0:	3080030b 	ldhu	r2,12(r6)
  8146f4:	30c00617 	ldw	r3,24(r6)
  8146f8:	1080020c 	andi	r2,r2,8
  8146fc:	30c00215 	stw	r3,8(r6)
  814700:	10002226 	beq	r2,zero,81478c <__swbuf_r+0xc0>
  814704:	30c00417 	ldw	r3,16(r6)
  814708:	18002026 	beq	r3,zero,81478c <__swbuf_r+0xc0>
  81470c:	31000017 	ldw	r4,0(r6)
  814710:	30800517 	ldw	r2,20(r6)
  814714:	20c7c83a 	sub	r3,r4,r3
  814718:	18802f0e 	bge	r3,r2,8147d8 <__swbuf_r+0x10c>
  81471c:	19400044 	addi	r5,r3,1
  814720:	30800217 	ldw	r2,8(r6)
  814724:	84003fcc 	andi	r16,r16,255
  814728:	20c00044 	addi	r3,r4,1
  81472c:	10bfffc4 	addi	r2,r2,-1
  814730:	30800215 	stw	r2,8(r6)
  814734:	24000005 	stb	r16,0(r4)
  814738:	30800517 	ldw	r2,20(r6)
  81473c:	30c00015 	stw	r3,0(r6)
  814740:	11400c26 	beq	r2,r5,814774 <__swbuf_r+0xa8>
  814744:	3080030b 	ldhu	r2,12(r6)
  814748:	1080004c 	andi	r2,r2,1
  81474c:	1005003a 	cmpeq	r2,r2,zero
  814750:	10000626 	beq	r2,zero,81476c <__swbuf_r+0xa0>
  814754:	8005883a 	mov	r2,r16
  814758:	dfc00317 	ldw	ra,12(sp)
  81475c:	dc400217 	ldw	r17,8(sp)
  814760:	dc000117 	ldw	r16,4(sp)
  814764:	dec00404 	addi	sp,sp,16
  814768:	f800283a 	ret
  81476c:	00800284 	movi	r2,10
  814770:	80bff81e 	bne	r16,r2,814754 <__swbuf_r+0x88>
  814774:	8809883a 	mov	r4,r17
  814778:	300b883a 	mov	r5,r6
  81477c:	08118800 	call	811880 <_fflush_r>
  814780:	103ff426 	beq	r2,zero,814754 <__swbuf_r+0x88>
  814784:	043fffc4 	movi	r16,-1
  814788:	003ff206 	br	814754 <__swbuf_r+0x88>
  81478c:	300b883a 	mov	r5,r6
  814790:	8809883a 	mov	r4,r17
  814794:	d9800015 	stw	r6,0(sp)
  814798:	080ff780 	call	80ff78 <__swsetup_r>
  81479c:	d9800017 	ldw	r6,0(sp)
  8147a0:	1000061e 	bne	r2,zero,8147bc <__swbuf_r+0xf0>
  8147a4:	30c00417 	ldw	r3,16(r6)
  8147a8:	003fd806 	br	81470c <__swbuf_r+0x40>
  8147ac:	d9800015 	stw	r6,0(sp)
  8147b0:	0811b180 	call	811b18 <__sinit>
  8147b4:	d9800017 	ldw	r6,0(sp)
  8147b8:	003fcd06 	br	8146f0 <__swbuf_r+0x24>
  8147bc:	3080030b 	ldhu	r2,12(r6)
  8147c0:	00c00244 	movi	r3,9
  8147c4:	043fffc4 	movi	r16,-1
  8147c8:	10801014 	ori	r2,r2,64
  8147cc:	3080030d 	sth	r2,12(r6)
  8147d0:	88c00015 	stw	r3,0(r17)
  8147d4:	003fdf06 	br	814754 <__swbuf_r+0x88>
  8147d8:	300b883a 	mov	r5,r6
  8147dc:	8809883a 	mov	r4,r17
  8147e0:	d9800015 	stw	r6,0(sp)
  8147e4:	08118800 	call	811880 <_fflush_r>
  8147e8:	d9800017 	ldw	r6,0(sp)
  8147ec:	103fe51e 	bne	r2,zero,814784 <__swbuf_r+0xb8>
  8147f0:	31000017 	ldw	r4,0(r6)
  8147f4:	01400044 	movi	r5,1
  8147f8:	003fc906 	br	814720 <__swbuf_r+0x54>

008147fc <__swbuf>:
  8147fc:	018020b4 	movhi	r6,130
  814800:	3193eb04 	addi	r6,r6,20396
  814804:	2007883a 	mov	r3,r4
  814808:	31000017 	ldw	r4,0(r6)
  81480c:	280d883a 	mov	r6,r5
  814810:	180b883a 	mov	r5,r3
  814814:	08146cc1 	jmpi	8146cc <__swbuf_r>

00814818 <_write_r>:
  814818:	defffd04 	addi	sp,sp,-12
  81481c:	dc000015 	stw	r16,0(sp)
  814820:	040020b4 	movhi	r16,130
  814824:	841afc04 	addi	r16,r16,27632
  814828:	dc400115 	stw	r17,4(sp)
  81482c:	80000015 	stw	zero,0(r16)
  814830:	2023883a 	mov	r17,r4
  814834:	2809883a 	mov	r4,r5
  814838:	300b883a 	mov	r5,r6
  81483c:	380d883a 	mov	r6,r7
  814840:	dfc00215 	stw	ra,8(sp)
  814844:	08164580 	call	816458 <write>
  814848:	1007883a 	mov	r3,r2
  81484c:	00bfffc4 	movi	r2,-1
  814850:	18800626 	beq	r3,r2,81486c <_write_r+0x54>
  814854:	1805883a 	mov	r2,r3
  814858:	dfc00217 	ldw	ra,8(sp)
  81485c:	dc400117 	ldw	r17,4(sp)
  814860:	dc000017 	ldw	r16,0(sp)
  814864:	dec00304 	addi	sp,sp,12
  814868:	f800283a 	ret
  81486c:	80800017 	ldw	r2,0(r16)
  814870:	103ff826 	beq	r2,zero,814854 <_write_r+0x3c>
  814874:	88800015 	stw	r2,0(r17)
  814878:	1805883a 	mov	r2,r3
  81487c:	dfc00217 	ldw	ra,8(sp)
  814880:	dc400117 	ldw	r17,4(sp)
  814884:	dc000017 	ldw	r16,0(sp)
  814888:	dec00304 	addi	sp,sp,12
  81488c:	f800283a 	ret

00814890 <_calloc_r>:
  814890:	298b383a 	mul	r5,r5,r6
  814894:	defffe04 	addi	sp,sp,-8
  814898:	dc000015 	stw	r16,0(sp)
  81489c:	dfc00115 	stw	ra,4(sp)
  8148a0:	080d63c0 	call	80d63c <_malloc_r>
  8148a4:	1021883a 	mov	r16,r2
  8148a8:	01c00904 	movi	r7,36
  8148ac:	10000d26 	beq	r2,zero,8148e4 <_calloc_r+0x54>
  8148b0:	10ffff17 	ldw	r3,-4(r2)
  8148b4:	1009883a 	mov	r4,r2
  8148b8:	00bfff04 	movi	r2,-4
  8148bc:	1886703a 	and	r3,r3,r2
  8148c0:	1887883a 	add	r3,r3,r2
  8148c4:	180d883a 	mov	r6,r3
  8148c8:	000b883a 	mov	r5,zero
  8148cc:	38c01736 	bltu	r7,r3,81492c <_calloc_r+0x9c>
  8148d0:	008004c4 	movi	r2,19
  8148d4:	10c00836 	bltu	r2,r3,8148f8 <_calloc_r+0x68>
  8148d8:	20000215 	stw	zero,8(r4)
  8148dc:	20000015 	stw	zero,0(r4)
  8148e0:	20000115 	stw	zero,4(r4)
  8148e4:	8005883a 	mov	r2,r16
  8148e8:	dfc00117 	ldw	ra,4(sp)
  8148ec:	dc000017 	ldw	r16,0(sp)
  8148f0:	dec00204 	addi	sp,sp,8
  8148f4:	f800283a 	ret
  8148f8:	008006c4 	movi	r2,27
  8148fc:	80000015 	stw	zero,0(r16)
  814900:	80000115 	stw	zero,4(r16)
  814904:	81000204 	addi	r4,r16,8
  814908:	10fff32e 	bgeu	r2,r3,8148d8 <_calloc_r+0x48>
  81490c:	80000215 	stw	zero,8(r16)
  814910:	80000315 	stw	zero,12(r16)
  814914:	81000404 	addi	r4,r16,16
  814918:	19ffef1e 	bne	r3,r7,8148d8 <_calloc_r+0x48>
  81491c:	81000604 	addi	r4,r16,24
  814920:	80000415 	stw	zero,16(r16)
  814924:	80000515 	stw	zero,20(r16)
  814928:	003feb06 	br	8148d8 <_calloc_r+0x48>
  81492c:	0812be80 	call	812be8 <memset>
  814930:	8005883a 	mov	r2,r16
  814934:	dfc00117 	ldw	ra,4(sp)
  814938:	dc000017 	ldw	r16,0(sp)
  81493c:	dec00204 	addi	sp,sp,8
  814940:	f800283a 	ret

00814944 <_close_r>:
  814944:	defffd04 	addi	sp,sp,-12
  814948:	dc000015 	stw	r16,0(sp)
  81494c:	040020b4 	movhi	r16,130
  814950:	841afc04 	addi	r16,r16,27632
  814954:	dc400115 	stw	r17,4(sp)
  814958:	80000015 	stw	zero,0(r16)
  81495c:	2023883a 	mov	r17,r4
  814960:	2809883a 	mov	r4,r5
  814964:	dfc00215 	stw	ra,8(sp)
  814968:	0815adc0 	call	815adc <close>
  81496c:	1007883a 	mov	r3,r2
  814970:	00bfffc4 	movi	r2,-1
  814974:	18800626 	beq	r3,r2,814990 <_close_r+0x4c>
  814978:	1805883a 	mov	r2,r3
  81497c:	dfc00217 	ldw	ra,8(sp)
  814980:	dc400117 	ldw	r17,4(sp)
  814984:	dc000017 	ldw	r16,0(sp)
  814988:	dec00304 	addi	sp,sp,12
  81498c:	f800283a 	ret
  814990:	80800017 	ldw	r2,0(r16)
  814994:	103ff826 	beq	r2,zero,814978 <_close_r+0x34>
  814998:	88800015 	stw	r2,0(r17)
  81499c:	1805883a 	mov	r2,r3
  8149a0:	dfc00217 	ldw	ra,8(sp)
  8149a4:	dc400117 	ldw	r17,4(sp)
  8149a8:	dc000017 	ldw	r16,0(sp)
  8149ac:	dec00304 	addi	sp,sp,12
  8149b0:	f800283a 	ret

008149b4 <_fclose_r>:
  8149b4:	defffc04 	addi	sp,sp,-16
  8149b8:	dc400115 	stw	r17,4(sp)
  8149bc:	dc000015 	stw	r16,0(sp)
  8149c0:	dfc00315 	stw	ra,12(sp)
  8149c4:	dc800215 	stw	r18,8(sp)
  8149c8:	2821883a 	mov	r16,r5
  8149cc:	2023883a 	mov	r17,r4
  8149d0:	28002926 	beq	r5,zero,814a78 <_fclose_r+0xc4>
  8149d4:	0811b080 	call	811b08 <__sfp_lock_acquire>
  8149d8:	88000226 	beq	r17,zero,8149e4 <_fclose_r+0x30>
  8149dc:	88800e17 	ldw	r2,56(r17)
  8149e0:	10002d26 	beq	r2,zero,814a98 <_fclose_r+0xe4>
  8149e4:	8080030f 	ldh	r2,12(r16)
  8149e8:	10002226 	beq	r2,zero,814a74 <_fclose_r+0xc0>
  8149ec:	8809883a 	mov	r4,r17
  8149f0:	800b883a 	mov	r5,r16
  8149f4:	08118800 	call	811880 <_fflush_r>
  8149f8:	1025883a 	mov	r18,r2
  8149fc:	80800b17 	ldw	r2,44(r16)
  814a00:	10000426 	beq	r2,zero,814a14 <_fclose_r+0x60>
  814a04:	81400717 	ldw	r5,28(r16)
  814a08:	8809883a 	mov	r4,r17
  814a0c:	103ee83a 	callr	r2
  814a10:	10002a16 	blt	r2,zero,814abc <_fclose_r+0x108>
  814a14:	8080030b 	ldhu	r2,12(r16)
  814a18:	1080200c 	andi	r2,r2,128
  814a1c:	1000231e 	bne	r2,zero,814aac <_fclose_r+0xf8>
  814a20:	81400c17 	ldw	r5,48(r16)
  814a24:	28000526 	beq	r5,zero,814a3c <_fclose_r+0x88>
  814a28:	80801004 	addi	r2,r16,64
  814a2c:	28800226 	beq	r5,r2,814a38 <_fclose_r+0x84>
  814a30:	8809883a 	mov	r4,r17
  814a34:	0811e9c0 	call	811e9c <_free_r>
  814a38:	80000c15 	stw	zero,48(r16)
  814a3c:	81401117 	ldw	r5,68(r16)
  814a40:	28000326 	beq	r5,zero,814a50 <_fclose_r+0x9c>
  814a44:	8809883a 	mov	r4,r17
  814a48:	0811e9c0 	call	811e9c <_free_r>
  814a4c:	80001115 	stw	zero,68(r16)
  814a50:	8000030d 	sth	zero,12(r16)
  814a54:	0811b0c0 	call	811b0c <__sfp_lock_release>
  814a58:	9005883a 	mov	r2,r18
  814a5c:	dfc00317 	ldw	ra,12(sp)
  814a60:	dc800217 	ldw	r18,8(sp)
  814a64:	dc400117 	ldw	r17,4(sp)
  814a68:	dc000017 	ldw	r16,0(sp)
  814a6c:	dec00404 	addi	sp,sp,16
  814a70:	f800283a 	ret
  814a74:	0811b0c0 	call	811b0c <__sfp_lock_release>
  814a78:	0025883a 	mov	r18,zero
  814a7c:	9005883a 	mov	r2,r18
  814a80:	dfc00317 	ldw	ra,12(sp)
  814a84:	dc800217 	ldw	r18,8(sp)
  814a88:	dc400117 	ldw	r17,4(sp)
  814a8c:	dc000017 	ldw	r16,0(sp)
  814a90:	dec00404 	addi	sp,sp,16
  814a94:	f800283a 	ret
  814a98:	8809883a 	mov	r4,r17
  814a9c:	0811b180 	call	811b18 <__sinit>
  814aa0:	8080030f 	ldh	r2,12(r16)
  814aa4:	103fd11e 	bne	r2,zero,8149ec <_fclose_r+0x38>
  814aa8:	003ff206 	br	814a74 <_fclose_r+0xc0>
  814aac:	81400417 	ldw	r5,16(r16)
  814ab0:	8809883a 	mov	r4,r17
  814ab4:	0811e9c0 	call	811e9c <_free_r>
  814ab8:	003fd906 	br	814a20 <_fclose_r+0x6c>
  814abc:	04bfffc4 	movi	r18,-1
  814ac0:	003fd406 	br	814a14 <_fclose_r+0x60>

00814ac4 <fclose>:
  814ac4:	008020b4 	movhi	r2,130
  814ac8:	1093eb04 	addi	r2,r2,20396
  814acc:	200b883a 	mov	r5,r4
  814ad0:	11000017 	ldw	r4,0(r2)
  814ad4:	08149b41 	jmpi	8149b4 <_fclose_r>

00814ad8 <_fstat_r>:
  814ad8:	defffd04 	addi	sp,sp,-12
  814adc:	dc000015 	stw	r16,0(sp)
  814ae0:	040020b4 	movhi	r16,130
  814ae4:	841afc04 	addi	r16,r16,27632
  814ae8:	dc400115 	stw	r17,4(sp)
  814aec:	80000015 	stw	zero,0(r16)
  814af0:	2023883a 	mov	r17,r4
  814af4:	2809883a 	mov	r4,r5
  814af8:	300b883a 	mov	r5,r6
  814afc:	dfc00215 	stw	ra,8(sp)
  814b00:	0815c640 	call	815c64 <fstat>
  814b04:	1007883a 	mov	r3,r2
  814b08:	00bfffc4 	movi	r2,-1
  814b0c:	18800626 	beq	r3,r2,814b28 <_fstat_r+0x50>
  814b10:	1805883a 	mov	r2,r3
  814b14:	dfc00217 	ldw	ra,8(sp)
  814b18:	dc400117 	ldw	r17,4(sp)
  814b1c:	dc000017 	ldw	r16,0(sp)
  814b20:	dec00304 	addi	sp,sp,12
  814b24:	f800283a 	ret
  814b28:	80800017 	ldw	r2,0(r16)
  814b2c:	103ff826 	beq	r2,zero,814b10 <_fstat_r+0x38>
  814b30:	88800015 	stw	r2,0(r17)
  814b34:	1805883a 	mov	r2,r3
  814b38:	dfc00217 	ldw	ra,8(sp)
  814b3c:	dc400117 	ldw	r17,4(sp)
  814b40:	dc000017 	ldw	r16,0(sp)
  814b44:	dec00304 	addi	sp,sp,12
  814b48:	f800283a 	ret

00814b4c <_isatty_r>:
  814b4c:	defffd04 	addi	sp,sp,-12
  814b50:	dc000015 	stw	r16,0(sp)
  814b54:	040020b4 	movhi	r16,130
  814b58:	841afc04 	addi	r16,r16,27632
  814b5c:	dc400115 	stw	r17,4(sp)
  814b60:	80000015 	stw	zero,0(r16)
  814b64:	2023883a 	mov	r17,r4
  814b68:	2809883a 	mov	r4,r5
  814b6c:	dfc00215 	stw	ra,8(sp)
  814b70:	0815d980 	call	815d98 <isatty>
  814b74:	1007883a 	mov	r3,r2
  814b78:	00bfffc4 	movi	r2,-1
  814b7c:	18800626 	beq	r3,r2,814b98 <_isatty_r+0x4c>
  814b80:	1805883a 	mov	r2,r3
  814b84:	dfc00217 	ldw	ra,8(sp)
  814b88:	dc400117 	ldw	r17,4(sp)
  814b8c:	dc000017 	ldw	r16,0(sp)
  814b90:	dec00304 	addi	sp,sp,12
  814b94:	f800283a 	ret
  814b98:	80800017 	ldw	r2,0(r16)
  814b9c:	103ff826 	beq	r2,zero,814b80 <_isatty_r+0x34>
  814ba0:	88800015 	stw	r2,0(r17)
  814ba4:	1805883a 	mov	r2,r3
  814ba8:	dfc00217 	ldw	ra,8(sp)
  814bac:	dc400117 	ldw	r17,4(sp)
  814bb0:	dc000017 	ldw	r16,0(sp)
  814bb4:	dec00304 	addi	sp,sp,12
  814bb8:	f800283a 	ret

00814bbc <_lseek_r>:
  814bbc:	defffd04 	addi	sp,sp,-12
  814bc0:	dc000015 	stw	r16,0(sp)
  814bc4:	040020b4 	movhi	r16,130
  814bc8:	841afc04 	addi	r16,r16,27632
  814bcc:	dc400115 	stw	r17,4(sp)
  814bd0:	80000015 	stw	zero,0(r16)
  814bd4:	2023883a 	mov	r17,r4
  814bd8:	2809883a 	mov	r4,r5
  814bdc:	300b883a 	mov	r5,r6
  814be0:	380d883a 	mov	r6,r7
  814be4:	dfc00215 	stw	ra,8(sp)
  814be8:	0815fa40 	call	815fa4 <lseek>
  814bec:	1007883a 	mov	r3,r2
  814bf0:	00bfffc4 	movi	r2,-1
  814bf4:	18800626 	beq	r3,r2,814c10 <_lseek_r+0x54>
  814bf8:	1805883a 	mov	r2,r3
  814bfc:	dfc00217 	ldw	ra,8(sp)
  814c00:	dc400117 	ldw	r17,4(sp)
  814c04:	dc000017 	ldw	r16,0(sp)
  814c08:	dec00304 	addi	sp,sp,12
  814c0c:	f800283a 	ret
  814c10:	80800017 	ldw	r2,0(r16)
  814c14:	103ff826 	beq	r2,zero,814bf8 <_lseek_r+0x3c>
  814c18:	88800015 	stw	r2,0(r17)
  814c1c:	1805883a 	mov	r2,r3
  814c20:	dfc00217 	ldw	ra,8(sp)
  814c24:	dc400117 	ldw	r17,4(sp)
  814c28:	dc000017 	ldw	r16,0(sp)
  814c2c:	dec00304 	addi	sp,sp,12
  814c30:	f800283a 	ret

00814c34 <_read_r>:
  814c34:	defffd04 	addi	sp,sp,-12
  814c38:	dc000015 	stw	r16,0(sp)
  814c3c:	040020b4 	movhi	r16,130
  814c40:	841afc04 	addi	r16,r16,27632
  814c44:	dc400115 	stw	r17,4(sp)
  814c48:	80000015 	stw	zero,0(r16)
  814c4c:	2023883a 	mov	r17,r4
  814c50:	2809883a 	mov	r4,r5
  814c54:	300b883a 	mov	r5,r6
  814c58:	380d883a 	mov	r6,r7
  814c5c:	dfc00215 	stw	ra,8(sp)
  814c60:	08161bc0 	call	8161bc <read>
  814c64:	1007883a 	mov	r3,r2
  814c68:	00bfffc4 	movi	r2,-1
  814c6c:	18800626 	beq	r3,r2,814c88 <_read_r+0x54>
  814c70:	1805883a 	mov	r2,r3
  814c74:	dfc00217 	ldw	ra,8(sp)
  814c78:	dc400117 	ldw	r17,4(sp)
  814c7c:	dc000017 	ldw	r16,0(sp)
  814c80:	dec00304 	addi	sp,sp,12
  814c84:	f800283a 	ret
  814c88:	80800017 	ldw	r2,0(r16)
  814c8c:	103ff826 	beq	r2,zero,814c70 <_read_r+0x3c>
  814c90:	88800015 	stw	r2,0(r17)
  814c94:	1805883a 	mov	r2,r3
  814c98:	dfc00217 	ldw	ra,8(sp)
  814c9c:	dc400117 	ldw	r17,4(sp)
  814ca0:	dc000017 	ldw	r16,0(sp)
  814ca4:	dec00304 	addi	sp,sp,12
  814ca8:	f800283a 	ret

00814cac <__udivdi3>:
  814cac:	defff004 	addi	sp,sp,-64
  814cb0:	2005883a 	mov	r2,r4
  814cb4:	3011883a 	mov	r8,r6
  814cb8:	df000e15 	stw	fp,56(sp)
  814cbc:	dd000a15 	stw	r20,40(sp)
  814cc0:	dc000615 	stw	r16,24(sp)
  814cc4:	dfc00f15 	stw	ra,60(sp)
  814cc8:	ddc00d15 	stw	r23,52(sp)
  814ccc:	dd800c15 	stw	r22,48(sp)
  814cd0:	dd400b15 	stw	r21,44(sp)
  814cd4:	dcc00915 	stw	r19,36(sp)
  814cd8:	dc800815 	stw	r18,32(sp)
  814cdc:	dc400715 	stw	r17,28(sp)
  814ce0:	4021883a 	mov	r16,r8
  814ce4:	1039883a 	mov	fp,r2
  814ce8:	2829883a 	mov	r20,r5
  814cec:	38003b1e 	bne	r7,zero,814ddc <__udivdi3+0x130>
  814cf0:	2a005c36 	bltu	r5,r8,814e64 <__udivdi3+0x1b8>
  814cf4:	4000a626 	beq	r8,zero,814f90 <__udivdi3+0x2e4>
  814cf8:	00bfffd4 	movui	r2,65535
  814cfc:	14009e36 	bltu	r2,r16,814f78 <__udivdi3+0x2cc>
  814d00:	00803fc4 	movi	r2,255
  814d04:	14013d36 	bltu	r2,r16,8151fc <__udivdi3+0x550>
  814d08:	000b883a 	mov	r5,zero
  814d0c:	0005883a 	mov	r2,zero
  814d10:	8084d83a 	srl	r2,r16,r2
  814d14:	010020b4 	movhi	r4,130
  814d18:	210c1204 	addi	r4,r4,12360
  814d1c:	01800804 	movi	r6,32
  814d20:	1105883a 	add	r2,r2,r4
  814d24:	10c00003 	ldbu	r3,0(r2)
  814d28:	28c7883a 	add	r3,r5,r3
  814d2c:	30edc83a 	sub	r22,r6,r3
  814d30:	b000ee1e 	bne	r22,zero,8150ec <__udivdi3+0x440>
  814d34:	802ad43a 	srli	r21,r16,16
  814d38:	00800044 	movi	r2,1
  814d3c:	a423c83a 	sub	r17,r20,r16
  814d40:	85ffffcc 	andi	r23,r16,65535
  814d44:	d8800315 	stw	r2,12(sp)
  814d48:	8809883a 	mov	r4,r17
  814d4c:	a80b883a 	mov	r5,r21
  814d50:	080cfd80 	call	80cfd8 <__udivsi3>
  814d54:	8809883a 	mov	r4,r17
  814d58:	a80b883a 	mov	r5,r21
  814d5c:	102d883a 	mov	r22,r2
  814d60:	080cfe00 	call	80cfe0 <__umodsi3>
  814d64:	1004943a 	slli	r2,r2,16
  814d68:	e006d43a 	srli	r3,fp,16
  814d6c:	bda3383a 	mul	r17,r23,r22
  814d70:	10c4b03a 	or	r2,r2,r3
  814d74:	1440042e 	bgeu	r2,r17,814d88 <__udivdi3+0xdc>
  814d78:	1405883a 	add	r2,r2,r16
  814d7c:	b5bfffc4 	addi	r22,r22,-1
  814d80:	14000136 	bltu	r2,r16,814d88 <__udivdi3+0xdc>
  814d84:	14413d36 	bltu	r2,r17,81527c <__udivdi3+0x5d0>
  814d88:	1463c83a 	sub	r17,r2,r17
  814d8c:	8809883a 	mov	r4,r17
  814d90:	a80b883a 	mov	r5,r21
  814d94:	080cfd80 	call	80cfd8 <__udivsi3>
  814d98:	8809883a 	mov	r4,r17
  814d9c:	a80b883a 	mov	r5,r21
  814da0:	1029883a 	mov	r20,r2
  814da4:	080cfe00 	call	80cfe0 <__umodsi3>
  814da8:	1004943a 	slli	r2,r2,16
  814dac:	bd09383a 	mul	r4,r23,r20
  814db0:	e0ffffcc 	andi	r3,fp,65535
  814db4:	10c4b03a 	or	r2,r2,r3
  814db8:	1100042e 	bgeu	r2,r4,814dcc <__udivdi3+0x120>
  814dbc:	8085883a 	add	r2,r16,r2
  814dc0:	a53fffc4 	addi	r20,r20,-1
  814dc4:	14000136 	bltu	r2,r16,814dcc <__udivdi3+0x120>
  814dc8:	11012036 	bltu	r2,r4,81524c <__udivdi3+0x5a0>
  814dcc:	b004943a 	slli	r2,r22,16
  814dd0:	d9000317 	ldw	r4,12(sp)
  814dd4:	a084b03a 	or	r2,r20,r2
  814dd8:	00001506 	br	814e30 <__udivdi3+0x184>
  814ddc:	380d883a 	mov	r6,r7
  814de0:	29c06236 	bltu	r5,r7,814f6c <__udivdi3+0x2c0>
  814de4:	00bfffd4 	movui	r2,65535
  814de8:	11c05a36 	bltu	r2,r7,814f54 <__udivdi3+0x2a8>
  814dec:	00803fc4 	movi	r2,255
  814df0:	11c0fc36 	bltu	r2,r7,8151e4 <__udivdi3+0x538>
  814df4:	000b883a 	mov	r5,zero
  814df8:	0005883a 	mov	r2,zero
  814dfc:	3084d83a 	srl	r2,r6,r2
  814e00:	010020b4 	movhi	r4,130
  814e04:	210c1204 	addi	r4,r4,12360
  814e08:	01c00804 	movi	r7,32
  814e0c:	1105883a 	add	r2,r2,r4
  814e10:	10c00003 	ldbu	r3,0(r2)
  814e14:	28c7883a 	add	r3,r5,r3
  814e18:	38efc83a 	sub	r23,r7,r3
  814e1c:	b800691e 	bne	r23,zero,814fc4 <__udivdi3+0x318>
  814e20:	35000136 	bltu	r6,r20,814e28 <__udivdi3+0x17c>
  814e24:	e4005136 	bltu	fp,r16,814f6c <__udivdi3+0x2c0>
  814e28:	00800044 	movi	r2,1
  814e2c:	0009883a 	mov	r4,zero
  814e30:	2007883a 	mov	r3,r4
  814e34:	dfc00f17 	ldw	ra,60(sp)
  814e38:	df000e17 	ldw	fp,56(sp)
  814e3c:	ddc00d17 	ldw	r23,52(sp)
  814e40:	dd800c17 	ldw	r22,48(sp)
  814e44:	dd400b17 	ldw	r21,44(sp)
  814e48:	dd000a17 	ldw	r20,40(sp)
  814e4c:	dcc00917 	ldw	r19,36(sp)
  814e50:	dc800817 	ldw	r18,32(sp)
  814e54:	dc400717 	ldw	r17,28(sp)
  814e58:	dc000617 	ldw	r16,24(sp)
  814e5c:	dec01004 	addi	sp,sp,64
  814e60:	f800283a 	ret
  814e64:	00bfffd4 	movui	r2,65535
  814e68:	12005036 	bltu	r2,r8,814fac <__udivdi3+0x300>
  814e6c:	00803fc4 	movi	r2,255
  814e70:	1200e836 	bltu	r2,r8,815214 <__udivdi3+0x568>
  814e74:	000b883a 	mov	r5,zero
  814e78:	0005883a 	mov	r2,zero
  814e7c:	8084d83a 	srl	r2,r16,r2
  814e80:	010020b4 	movhi	r4,130
  814e84:	210c1204 	addi	r4,r4,12360
  814e88:	01800804 	movi	r6,32
  814e8c:	1105883a 	add	r2,r2,r4
  814e90:	10c00003 	ldbu	r3,0(r2)
  814e94:	28c7883a 	add	r3,r5,r3
  814e98:	30cbc83a 	sub	r5,r6,r3
  814e9c:	28000626 	beq	r5,zero,814eb8 <__udivdi3+0x20c>
  814ea0:	3145c83a 	sub	r2,r6,r5
  814ea4:	e084d83a 	srl	r2,fp,r2
  814ea8:	a146983a 	sll	r3,r20,r5
  814eac:	e178983a 	sll	fp,fp,r5
  814eb0:	8160983a 	sll	r16,r16,r5
  814eb4:	18a8b03a 	or	r20,r3,r2
  814eb8:	802ad43a 	srli	r21,r16,16
  814ebc:	a009883a 	mov	r4,r20
  814ec0:	85ffffcc 	andi	r23,r16,65535
  814ec4:	a80b883a 	mov	r5,r21
  814ec8:	080cfd80 	call	80cfd8 <__udivsi3>
  814ecc:	a009883a 	mov	r4,r20
  814ed0:	a80b883a 	mov	r5,r21
  814ed4:	102d883a 	mov	r22,r2
  814ed8:	080cfe00 	call	80cfe0 <__umodsi3>
  814edc:	1004943a 	slli	r2,r2,16
  814ee0:	e006d43a 	srli	r3,fp,16
  814ee4:	bda3383a 	mul	r17,r23,r22
  814ee8:	10c4b03a 	or	r2,r2,r3
  814eec:	1440042e 	bgeu	r2,r17,814f00 <__udivdi3+0x254>
  814ef0:	1405883a 	add	r2,r2,r16
  814ef4:	b5bfffc4 	addi	r22,r22,-1
  814ef8:	14000136 	bltu	r2,r16,814f00 <__udivdi3+0x254>
  814efc:	1440d536 	bltu	r2,r17,815254 <__udivdi3+0x5a8>
  814f00:	1463c83a 	sub	r17,r2,r17
  814f04:	8809883a 	mov	r4,r17
  814f08:	a80b883a 	mov	r5,r21
  814f0c:	080cfd80 	call	80cfd8 <__udivsi3>
  814f10:	8809883a 	mov	r4,r17
  814f14:	a80b883a 	mov	r5,r21
  814f18:	1029883a 	mov	r20,r2
  814f1c:	080cfe00 	call	80cfe0 <__umodsi3>
  814f20:	1004943a 	slli	r2,r2,16
  814f24:	bd09383a 	mul	r4,r23,r20
  814f28:	e0ffffcc 	andi	r3,fp,65535
  814f2c:	10c4b03a 	or	r2,r2,r3
  814f30:	1100042e 	bgeu	r2,r4,814f44 <__udivdi3+0x298>
  814f34:	8085883a 	add	r2,r16,r2
  814f38:	a53fffc4 	addi	r20,r20,-1
  814f3c:	14000136 	bltu	r2,r16,814f44 <__udivdi3+0x298>
  814f40:	1100c736 	bltu	r2,r4,815260 <__udivdi3+0x5b4>
  814f44:	b004943a 	slli	r2,r22,16
  814f48:	0009883a 	mov	r4,zero
  814f4c:	a084b03a 	or	r2,r20,r2
  814f50:	003fb706 	br	814e30 <__udivdi3+0x184>
  814f54:	00804034 	movhi	r2,256
  814f58:	10bfffc4 	addi	r2,r2,-1
  814f5c:	11c0a436 	bltu	r2,r7,8151f0 <__udivdi3+0x544>
  814f60:	01400404 	movi	r5,16
  814f64:	2805883a 	mov	r2,r5
  814f68:	003fa406 	br	814dfc <__udivdi3+0x150>
  814f6c:	0005883a 	mov	r2,zero
  814f70:	0009883a 	mov	r4,zero
  814f74:	003fae06 	br	814e30 <__udivdi3+0x184>
  814f78:	00804034 	movhi	r2,256
  814f7c:	10bfffc4 	addi	r2,r2,-1
  814f80:	1400a136 	bltu	r2,r16,815208 <__udivdi3+0x55c>
  814f84:	01400404 	movi	r5,16
  814f88:	2805883a 	mov	r2,r5
  814f8c:	003f6006 	br	814d10 <__udivdi3+0x64>
  814f90:	01000044 	movi	r4,1
  814f94:	000b883a 	mov	r5,zero
  814f98:	080cfd80 	call	80cfd8 <__udivsi3>
  814f9c:	1021883a 	mov	r16,r2
  814fa0:	00bfffd4 	movui	r2,65535
  814fa4:	143ff436 	bltu	r2,r16,814f78 <__udivdi3+0x2cc>
  814fa8:	003f5506 	br	814d00 <__udivdi3+0x54>
  814fac:	00804034 	movhi	r2,256
  814fb0:	10bfffc4 	addi	r2,r2,-1
  814fb4:	12009a36 	bltu	r2,r8,815220 <__udivdi3+0x574>
  814fb8:	01400404 	movi	r5,16
  814fbc:	2805883a 	mov	r2,r5
  814fc0:	003fae06 	br	814e7c <__udivdi3+0x1d0>
  814fc4:	3dc5c83a 	sub	r2,r7,r23
  814fc8:	35c8983a 	sll	r4,r6,r23
  814fcc:	8086d83a 	srl	r3,r16,r2
  814fd0:	a0a2d83a 	srl	r17,r20,r2
  814fd4:	e084d83a 	srl	r2,fp,r2
  814fd8:	20eab03a 	or	r21,r4,r3
  814fdc:	a82cd43a 	srli	r22,r21,16
  814fe0:	a5c6983a 	sll	r3,r20,r23
  814fe4:	8809883a 	mov	r4,r17
  814fe8:	b00b883a 	mov	r5,r22
  814fec:	1886b03a 	or	r3,r3,r2
  814ff0:	d8c00215 	stw	r3,8(sp)
  814ff4:	080cfd80 	call	80cfd8 <__udivsi3>
  814ff8:	8809883a 	mov	r4,r17
  814ffc:	b00b883a 	mov	r5,r22
  815000:	1029883a 	mov	r20,r2
  815004:	080cfe00 	call	80cfe0 <__umodsi3>
  815008:	a8ffffcc 	andi	r3,r21,65535
  81500c:	d8c00515 	stw	r3,20(sp)
  815010:	d9000217 	ldw	r4,8(sp)
  815014:	d9400517 	ldw	r5,20(sp)
  815018:	1004943a 	slli	r2,r2,16
  81501c:	2006d43a 	srli	r3,r4,16
  815020:	85e0983a 	sll	r16,r16,r23
  815024:	2d23383a 	mul	r17,r5,r20
  815028:	10c4b03a 	or	r2,r2,r3
  81502c:	dc000015 	stw	r16,0(sp)
  815030:	1440032e 	bgeu	r2,r17,815040 <__udivdi3+0x394>
  815034:	1545883a 	add	r2,r2,r21
  815038:	a53fffc4 	addi	r20,r20,-1
  81503c:	15407f2e 	bgeu	r2,r21,81523c <__udivdi3+0x590>
  815040:	1463c83a 	sub	r17,r2,r17
  815044:	8809883a 	mov	r4,r17
  815048:	b00b883a 	mov	r5,r22
  81504c:	080cfd80 	call	80cfd8 <__udivsi3>
  815050:	8809883a 	mov	r4,r17
  815054:	b00b883a 	mov	r5,r22
  815058:	1021883a 	mov	r16,r2
  81505c:	080cfe00 	call	80cfe0 <__umodsi3>
  815060:	d8c00517 	ldw	r3,20(sp)
  815064:	d9000217 	ldw	r4,8(sp)
  815068:	1004943a 	slli	r2,r2,16
  81506c:	1c0f383a 	mul	r7,r3,r16
  815070:	20ffffcc 	andi	r3,r4,65535
  815074:	10e2b03a 	or	r17,r2,r3
  815078:	89c0032e 	bgeu	r17,r7,815088 <__udivdi3+0x3dc>
  81507c:	8d63883a 	add	r17,r17,r21
  815080:	843fffc4 	addi	r16,r16,-1
  815084:	8d40692e 	bgeu	r17,r21,81522c <__udivdi3+0x580>
  815088:	a008943a 	slli	r4,r20,16
  81508c:	d9400017 	ldw	r5,0(sp)
  815090:	89e3c83a 	sub	r17,r17,r7
  815094:	8110b03a 	or	r8,r16,r4
  815098:	280cd43a 	srli	r6,r5,16
  81509c:	28ffffcc 	andi	r3,r5,65535
  8150a0:	40bfffcc 	andi	r2,r8,65535
  8150a4:	400ad43a 	srli	r5,r8,16
  8150a8:	10d3383a 	mul	r9,r2,r3
  8150ac:	1185383a 	mul	r2,r2,r6
  8150b0:	28c7383a 	mul	r3,r5,r3
  8150b4:	4808d43a 	srli	r4,r9,16
  8150b8:	298b383a 	mul	r5,r5,r6
  8150bc:	10c5883a 	add	r2,r2,r3
  8150c0:	2089883a 	add	r4,r4,r2
  8150c4:	20c0022e 	bgeu	r4,r3,8150d0 <__udivdi3+0x424>
  8150c8:	00800074 	movhi	r2,1
  8150cc:	288b883a 	add	r5,r5,r2
  8150d0:	2004d43a 	srli	r2,r4,16
  8150d4:	288b883a 	add	r5,r5,r2
  8150d8:	89403f36 	bltu	r17,r5,8151d8 <__udivdi3+0x52c>
  8150dc:	89403926 	beq	r17,r5,8151c4 <__udivdi3+0x518>
  8150e0:	4005883a 	mov	r2,r8
  8150e4:	0009883a 	mov	r4,zero
  8150e8:	003f5106 	br	814e30 <__udivdi3+0x184>
  8150ec:	85a0983a 	sll	r16,r16,r22
  8150f0:	3585c83a 	sub	r2,r6,r22
  8150f4:	a0a2d83a 	srl	r17,r20,r2
  8150f8:	802ad43a 	srli	r21,r16,16
  8150fc:	e084d83a 	srl	r2,fp,r2
  815100:	a586983a 	sll	r3,r20,r22
  815104:	8809883a 	mov	r4,r17
  815108:	a80b883a 	mov	r5,r21
  81510c:	1886b03a 	or	r3,r3,r2
  815110:	d8c00115 	stw	r3,4(sp)
  815114:	080cfd80 	call	80cfd8 <__udivsi3>
  815118:	8809883a 	mov	r4,r17
  81511c:	a80b883a 	mov	r5,r21
  815120:	d8800415 	stw	r2,16(sp)
  815124:	080cfe00 	call	80cfe0 <__umodsi3>
  815128:	d9000117 	ldw	r4,4(sp)
  81512c:	d9400417 	ldw	r5,16(sp)
  815130:	1004943a 	slli	r2,r2,16
  815134:	85ffffcc 	andi	r23,r16,65535
  815138:	2006d43a 	srli	r3,r4,16
  81513c:	b963383a 	mul	r17,r23,r5
  815140:	10c4b03a 	or	r2,r2,r3
  815144:	1440042e 	bgeu	r2,r17,815158 <__udivdi3+0x4ac>
  815148:	297fffc4 	addi	r5,r5,-1
  81514c:	1405883a 	add	r2,r2,r16
  815150:	d9400415 	stw	r5,16(sp)
  815154:	1400442e 	bgeu	r2,r16,815268 <__udivdi3+0x5bc>
  815158:	1463c83a 	sub	r17,r2,r17
  81515c:	8809883a 	mov	r4,r17
  815160:	a80b883a 	mov	r5,r21
  815164:	080cfd80 	call	80cfd8 <__udivsi3>
  815168:	8809883a 	mov	r4,r17
  81516c:	a80b883a 	mov	r5,r21
  815170:	1029883a 	mov	r20,r2
  815174:	080cfe00 	call	80cfe0 <__umodsi3>
  815178:	d9400117 	ldw	r5,4(sp)
  81517c:	1004943a 	slli	r2,r2,16
  815180:	bd09383a 	mul	r4,r23,r20
  815184:	28ffffcc 	andi	r3,r5,65535
  815188:	10c6b03a 	or	r3,r2,r3
  81518c:	1900062e 	bgeu	r3,r4,8151a8 <__udivdi3+0x4fc>
  815190:	1c07883a 	add	r3,r3,r16
  815194:	a53fffc4 	addi	r20,r20,-1
  815198:	1c000336 	bltu	r3,r16,8151a8 <__udivdi3+0x4fc>
  81519c:	1900022e 	bgeu	r3,r4,8151a8 <__udivdi3+0x4fc>
  8151a0:	a53fffc4 	addi	r20,r20,-1
  8151a4:	1c07883a 	add	r3,r3,r16
  8151a8:	d9400417 	ldw	r5,16(sp)
  8151ac:	e5b8983a 	sll	fp,fp,r22
  8151b0:	1923c83a 	sub	r17,r3,r4
  8151b4:	2804943a 	slli	r2,r5,16
  8151b8:	a0a8b03a 	or	r20,r20,r2
  8151bc:	dd000315 	stw	r20,12(sp)
  8151c0:	003ee106 	br	814d48 <__udivdi3+0x9c>
  8151c4:	2004943a 	slli	r2,r4,16
  8151c8:	e5c8983a 	sll	r4,fp,r23
  8151cc:	48ffffcc 	andi	r3,r9,65535
  8151d0:	10c5883a 	add	r2,r2,r3
  8151d4:	20bfc22e 	bgeu	r4,r2,8150e0 <__udivdi3+0x434>
  8151d8:	40bfffc4 	addi	r2,r8,-1
  8151dc:	0009883a 	mov	r4,zero
  8151e0:	003f1306 	br	814e30 <__udivdi3+0x184>
  8151e4:	01400204 	movi	r5,8
  8151e8:	2805883a 	mov	r2,r5
  8151ec:	003f0306 	br	814dfc <__udivdi3+0x150>
  8151f0:	01400604 	movi	r5,24
  8151f4:	2805883a 	mov	r2,r5
  8151f8:	003f0006 	br	814dfc <__udivdi3+0x150>
  8151fc:	01400204 	movi	r5,8
  815200:	2805883a 	mov	r2,r5
  815204:	003ec206 	br	814d10 <__udivdi3+0x64>
  815208:	01400604 	movi	r5,24
  81520c:	2805883a 	mov	r2,r5
  815210:	003ebf06 	br	814d10 <__udivdi3+0x64>
  815214:	01400204 	movi	r5,8
  815218:	2805883a 	mov	r2,r5
  81521c:	003f1706 	br	814e7c <__udivdi3+0x1d0>
  815220:	01400604 	movi	r5,24
  815224:	2805883a 	mov	r2,r5
  815228:	003f1406 	br	814e7c <__udivdi3+0x1d0>
  81522c:	89ff962e 	bgeu	r17,r7,815088 <__udivdi3+0x3dc>
  815230:	8d63883a 	add	r17,r17,r21
  815234:	843fffc4 	addi	r16,r16,-1
  815238:	003f9306 	br	815088 <__udivdi3+0x3dc>
  81523c:	147f802e 	bgeu	r2,r17,815040 <__udivdi3+0x394>
  815240:	a53fffc4 	addi	r20,r20,-1
  815244:	1545883a 	add	r2,r2,r21
  815248:	003f7d06 	br	815040 <__udivdi3+0x394>
  81524c:	a53fffc4 	addi	r20,r20,-1
  815250:	003ede06 	br	814dcc <__udivdi3+0x120>
  815254:	b5bfffc4 	addi	r22,r22,-1
  815258:	1405883a 	add	r2,r2,r16
  81525c:	003f2806 	br	814f00 <__udivdi3+0x254>
  815260:	a53fffc4 	addi	r20,r20,-1
  815264:	003f3706 	br	814f44 <__udivdi3+0x298>
  815268:	147fbb2e 	bgeu	r2,r17,815158 <__udivdi3+0x4ac>
  81526c:	297fffc4 	addi	r5,r5,-1
  815270:	1405883a 	add	r2,r2,r16
  815274:	d9400415 	stw	r5,16(sp)
  815278:	003fb706 	br	815158 <__udivdi3+0x4ac>
  81527c:	b5bfffc4 	addi	r22,r22,-1
  815280:	1405883a 	add	r2,r2,r16
  815284:	003ec006 	br	814d88 <__udivdi3+0xdc>

00815288 <__umoddi3>:
  815288:	defff104 	addi	sp,sp,-60
  81528c:	dd800b15 	stw	r22,44(sp)
  815290:	dd000915 	stw	r20,36(sp)
  815294:	dc000515 	stw	r16,20(sp)
  815298:	dfc00e15 	stw	ra,56(sp)
  81529c:	df000d15 	stw	fp,52(sp)
  8152a0:	ddc00c15 	stw	r23,48(sp)
  8152a4:	dd400a15 	stw	r21,40(sp)
  8152a8:	dcc00815 	stw	r19,32(sp)
  8152ac:	dc800715 	stw	r18,28(sp)
  8152b0:	dc400615 	stw	r17,24(sp)
  8152b4:	3021883a 	mov	r16,r6
  8152b8:	202d883a 	mov	r22,r4
  8152bc:	2829883a 	mov	r20,r5
  8152c0:	38002b1e 	bne	r7,zero,815370 <__umoddi3+0xe8>
  8152c4:	29805036 	bltu	r5,r6,815408 <__umoddi3+0x180>
  8152c8:	30008a26 	beq	r6,zero,8154f4 <__umoddi3+0x26c>
  8152cc:	00bfffd4 	movui	r2,65535
  8152d0:	14008236 	bltu	r2,r16,8154dc <__umoddi3+0x254>
  8152d4:	00803fc4 	movi	r2,255
  8152d8:	14013636 	bltu	r2,r16,8157b4 <__umoddi3+0x52c>
  8152dc:	000b883a 	mov	r5,zero
  8152e0:	0005883a 	mov	r2,zero
  8152e4:	8084d83a 	srl	r2,r16,r2
  8152e8:	010020b4 	movhi	r4,130
  8152ec:	210c1204 	addi	r4,r4,12360
  8152f0:	01800804 	movi	r6,32
  8152f4:	1105883a 	add	r2,r2,r4
  8152f8:	10c00003 	ldbu	r3,0(r2)
  8152fc:	28c7883a 	add	r3,r5,r3
  815300:	30efc83a 	sub	r23,r6,r3
  815304:	b800941e 	bne	r23,zero,815558 <__umoddi3+0x2d0>
  815308:	802ad43a 	srli	r21,r16,16
  81530c:	a423c83a 	sub	r17,r20,r16
  815310:	0039883a 	mov	fp,zero
  815314:	853fffcc 	andi	r20,r16,65535
  815318:	8809883a 	mov	r4,r17
  81531c:	a80b883a 	mov	r5,r21
  815320:	080cfd80 	call	80cfd8 <__udivsi3>
  815324:	8809883a 	mov	r4,r17
  815328:	a80b883a 	mov	r5,r21
  81532c:	a0a3383a 	mul	r17,r20,r2
  815330:	080cfe00 	call	80cfe0 <__umodsi3>
  815334:	1004943a 	slli	r2,r2,16
  815338:	b006d43a 	srli	r3,r22,16
  81533c:	10c4b03a 	or	r2,r2,r3
  815340:	1440032e 	bgeu	r2,r17,815350 <__umoddi3+0xc8>
  815344:	1405883a 	add	r2,r2,r16
  815348:	14000136 	bltu	r2,r16,815350 <__umoddi3+0xc8>
  81534c:	14413536 	bltu	r2,r17,815824 <__umoddi3+0x59c>
  815350:	1463c83a 	sub	r17,r2,r17
  815354:	8809883a 	mov	r4,r17
  815358:	a80b883a 	mov	r5,r21
  81535c:	080cfd80 	call	80cfd8 <__udivsi3>
  815360:	8809883a 	mov	r4,r17
  815364:	a0a3383a 	mul	r17,r20,r2
  815368:	a80b883a 	mov	r5,r21
  81536c:	00004d06 	br	8154a4 <__umoddi3+0x21c>
  815370:	380d883a 	mov	r6,r7
  815374:	29c0102e 	bgeu	r5,r7,8153b8 <__umoddi3+0x130>
  815378:	2011883a 	mov	r8,r4
  81537c:	2813883a 	mov	r9,r5
  815380:	4005883a 	mov	r2,r8
  815384:	4807883a 	mov	r3,r9
  815388:	dfc00e17 	ldw	ra,56(sp)
  81538c:	df000d17 	ldw	fp,52(sp)
  815390:	ddc00c17 	ldw	r23,48(sp)
  815394:	dd800b17 	ldw	r22,44(sp)
  815398:	dd400a17 	ldw	r21,40(sp)
  81539c:	dd000917 	ldw	r20,36(sp)
  8153a0:	dcc00817 	ldw	r19,32(sp)
  8153a4:	dc800717 	ldw	r18,28(sp)
  8153a8:	dc400617 	ldw	r17,24(sp)
  8153ac:	dc000517 	ldw	r16,20(sp)
  8153b0:	dec00f04 	addi	sp,sp,60
  8153b4:	f800283a 	ret
  8153b8:	00bfffd4 	movui	r2,65535
  8153bc:	11c05a36 	bltu	r2,r7,815528 <__umoddi3+0x2a0>
  8153c0:	00803fc4 	movi	r2,255
  8153c4:	11c0fe36 	bltu	r2,r7,8157c0 <__umoddi3+0x538>
  8153c8:	000b883a 	mov	r5,zero
  8153cc:	0005883a 	mov	r2,zero
  8153d0:	3084d83a 	srl	r2,r6,r2
  8153d4:	010020b4 	movhi	r4,130
  8153d8:	210c1204 	addi	r4,r4,12360
  8153dc:	01c00804 	movi	r7,32
  8153e0:	1105883a 	add	r2,r2,r4
  8153e4:	10c00003 	ldbu	r3,0(r2)
  8153e8:	28c7883a 	add	r3,r5,r3
  8153ec:	38ebc83a 	sub	r21,r7,r3
  8153f0:	a800851e 	bne	r21,zero,815608 <__umoddi3+0x380>
  8153f4:	35005236 	bltu	r6,r20,815540 <__umoddi3+0x2b8>
  8153f8:	b400512e 	bgeu	r22,r16,815540 <__umoddi3+0x2b8>
  8153fc:	b011883a 	mov	r8,r22
  815400:	a013883a 	mov	r9,r20
  815404:	003fde06 	br	815380 <__umoddi3+0xf8>
  815408:	00bfffd4 	movui	r2,65535
  81540c:	11804036 	bltu	r2,r6,815510 <__umoddi3+0x288>
  815410:	00803fc4 	movi	r2,255
  815414:	1180ed36 	bltu	r2,r6,8157cc <__umoddi3+0x544>
  815418:	000b883a 	mov	r5,zero
  81541c:	0005883a 	mov	r2,zero
  815420:	8084d83a 	srl	r2,r16,r2
  815424:	010020b4 	movhi	r4,130
  815428:	210c1204 	addi	r4,r4,12360
  81542c:	01800804 	movi	r6,32
  815430:	1105883a 	add	r2,r2,r4
  815434:	10c00003 	ldbu	r3,0(r2)
  815438:	28c7883a 	add	r3,r5,r3
  81543c:	30c7c83a 	sub	r3,r6,r3
  815440:	1800bf1e 	bne	r3,zero,815740 <__umoddi3+0x4b8>
  815444:	0039883a 	mov	fp,zero
  815448:	802ad43a 	srli	r21,r16,16
  81544c:	a009883a 	mov	r4,r20
  815450:	85ffffcc 	andi	r23,r16,65535
  815454:	a80b883a 	mov	r5,r21
  815458:	080cfd80 	call	80cfd8 <__udivsi3>
  81545c:	a009883a 	mov	r4,r20
  815460:	a80b883a 	mov	r5,r21
  815464:	b8a3383a 	mul	r17,r23,r2
  815468:	080cfe00 	call	80cfe0 <__umodsi3>
  81546c:	1004943a 	slli	r2,r2,16
  815470:	b006d43a 	srli	r3,r22,16
  815474:	10c4b03a 	or	r2,r2,r3
  815478:	1440032e 	bgeu	r2,r17,815488 <__umoddi3+0x200>
  81547c:	1405883a 	add	r2,r2,r16
  815480:	14000136 	bltu	r2,r16,815488 <__umoddi3+0x200>
  815484:	1440e536 	bltu	r2,r17,81581c <__umoddi3+0x594>
  815488:	1463c83a 	sub	r17,r2,r17
  81548c:	8809883a 	mov	r4,r17
  815490:	a80b883a 	mov	r5,r21
  815494:	080cfd80 	call	80cfd8 <__udivsi3>
  815498:	8809883a 	mov	r4,r17
  81549c:	b8a3383a 	mul	r17,r23,r2
  8154a0:	a80b883a 	mov	r5,r21
  8154a4:	080cfe00 	call	80cfe0 <__umodsi3>
  8154a8:	1004943a 	slli	r2,r2,16
  8154ac:	b0ffffcc 	andi	r3,r22,65535
  8154b0:	10c4b03a 	or	r2,r2,r3
  8154b4:	1440042e 	bgeu	r2,r17,8154c8 <__umoddi3+0x240>
  8154b8:	1405883a 	add	r2,r2,r16
  8154bc:	14000236 	bltu	r2,r16,8154c8 <__umoddi3+0x240>
  8154c0:	1440012e 	bgeu	r2,r17,8154c8 <__umoddi3+0x240>
  8154c4:	1405883a 	add	r2,r2,r16
  8154c8:	1445c83a 	sub	r2,r2,r17
  8154cc:	1724d83a 	srl	r18,r2,fp
  8154d0:	0013883a 	mov	r9,zero
  8154d4:	9011883a 	mov	r8,r18
  8154d8:	003fa906 	br	815380 <__umoddi3+0xf8>
  8154dc:	00804034 	movhi	r2,256
  8154e0:	10bfffc4 	addi	r2,r2,-1
  8154e4:	1400b036 	bltu	r2,r16,8157a8 <__umoddi3+0x520>
  8154e8:	01400404 	movi	r5,16
  8154ec:	2805883a 	mov	r2,r5
  8154f0:	003f7c06 	br	8152e4 <__umoddi3+0x5c>
  8154f4:	01000044 	movi	r4,1
  8154f8:	000b883a 	mov	r5,zero
  8154fc:	080cfd80 	call	80cfd8 <__udivsi3>
  815500:	1021883a 	mov	r16,r2
  815504:	00bfffd4 	movui	r2,65535
  815508:	143ff436 	bltu	r2,r16,8154dc <__umoddi3+0x254>
  81550c:	003f7106 	br	8152d4 <__umoddi3+0x4c>
  815510:	00804034 	movhi	r2,256
  815514:	10bfffc4 	addi	r2,r2,-1
  815518:	1180af36 	bltu	r2,r6,8157d8 <__umoddi3+0x550>
  81551c:	01400404 	movi	r5,16
  815520:	2805883a 	mov	r2,r5
  815524:	003fbe06 	br	815420 <__umoddi3+0x198>
  815528:	00804034 	movhi	r2,256
  81552c:	10bfffc4 	addi	r2,r2,-1
  815530:	11c0ac36 	bltu	r2,r7,8157e4 <__umoddi3+0x55c>
  815534:	01400404 	movi	r5,16
  815538:	2805883a 	mov	r2,r5
  81553c:	003fa406 	br	8153d0 <__umoddi3+0x148>
  815540:	b409c83a 	sub	r4,r22,r16
  815544:	b105803a 	cmpltu	r2,r22,r4
  815548:	a187c83a 	sub	r3,r20,r6
  81554c:	18a9c83a 	sub	r20,r3,r2
  815550:	202d883a 	mov	r22,r4
  815554:	003fa906 	br	8153fc <__umoddi3+0x174>
  815558:	85e0983a 	sll	r16,r16,r23
  81555c:	35c5c83a 	sub	r2,r6,r23
  815560:	a0a2d83a 	srl	r17,r20,r2
  815564:	802ad43a 	srli	r21,r16,16
  815568:	b084d83a 	srl	r2,r22,r2
  81556c:	a5c6983a 	sll	r3,r20,r23
  815570:	8809883a 	mov	r4,r17
  815574:	a80b883a 	mov	r5,r21
  815578:	1886b03a 	or	r3,r3,r2
  81557c:	d8c00115 	stw	r3,4(sp)
  815580:	853fffcc 	andi	r20,r16,65535
  815584:	080cfd80 	call	80cfd8 <__udivsi3>
  815588:	8809883a 	mov	r4,r17
  81558c:	a80b883a 	mov	r5,r21
  815590:	a0a3383a 	mul	r17,r20,r2
  815594:	080cfe00 	call	80cfe0 <__umodsi3>
  815598:	d9000117 	ldw	r4,4(sp)
  81559c:	1004943a 	slli	r2,r2,16
  8155a0:	b839883a 	mov	fp,r23
  8155a4:	2006d43a 	srli	r3,r4,16
  8155a8:	10c4b03a 	or	r2,r2,r3
  8155ac:	1440022e 	bgeu	r2,r17,8155b8 <__umoddi3+0x330>
  8155b0:	1405883a 	add	r2,r2,r16
  8155b4:	1400962e 	bgeu	r2,r16,815810 <__umoddi3+0x588>
  8155b8:	1463c83a 	sub	r17,r2,r17
  8155bc:	8809883a 	mov	r4,r17
  8155c0:	a80b883a 	mov	r5,r21
  8155c4:	080cfd80 	call	80cfd8 <__udivsi3>
  8155c8:	8809883a 	mov	r4,r17
  8155cc:	a80b883a 	mov	r5,r21
  8155d0:	a0a3383a 	mul	r17,r20,r2
  8155d4:	080cfe00 	call	80cfe0 <__umodsi3>
  8155d8:	d9400117 	ldw	r5,4(sp)
  8155dc:	1004943a 	slli	r2,r2,16
  8155e0:	28ffffcc 	andi	r3,r5,65535
  8155e4:	10c4b03a 	or	r2,r2,r3
  8155e8:	1440042e 	bgeu	r2,r17,8155fc <__umoddi3+0x374>
  8155ec:	1405883a 	add	r2,r2,r16
  8155f0:	14000236 	bltu	r2,r16,8155fc <__umoddi3+0x374>
  8155f4:	1440012e 	bgeu	r2,r17,8155fc <__umoddi3+0x374>
  8155f8:	1405883a 	add	r2,r2,r16
  8155fc:	b5ec983a 	sll	r22,r22,r23
  815600:	1463c83a 	sub	r17,r2,r17
  815604:	003f4406 	br	815318 <__umoddi3+0x90>
  815608:	3d4fc83a 	sub	r7,r7,r21
  81560c:	3546983a 	sll	r3,r6,r21
  815610:	81c4d83a 	srl	r2,r16,r7
  815614:	a1e2d83a 	srl	r17,r20,r7
  815618:	a54c983a 	sll	r6,r20,r21
  81561c:	18aeb03a 	or	r23,r3,r2
  815620:	b828d43a 	srli	r20,r23,16
  815624:	b1c4d83a 	srl	r2,r22,r7
  815628:	8809883a 	mov	r4,r17
  81562c:	a00b883a 	mov	r5,r20
  815630:	308cb03a 	or	r6,r6,r2
  815634:	d9c00315 	stw	r7,12(sp)
  815638:	d9800215 	stw	r6,8(sp)
  81563c:	080cfd80 	call	80cfd8 <__udivsi3>
  815640:	8809883a 	mov	r4,r17
  815644:	a00b883a 	mov	r5,r20
  815648:	1039883a 	mov	fp,r2
  81564c:	080cfe00 	call	80cfe0 <__umodsi3>
  815650:	b8ffffcc 	andi	r3,r23,65535
  815654:	d8c00415 	stw	r3,16(sp)
  815658:	d9000217 	ldw	r4,8(sp)
  81565c:	d9400417 	ldw	r5,16(sp)
  815660:	1004943a 	slli	r2,r2,16
  815664:	2006d43a 	srli	r3,r4,16
  815668:	8560983a 	sll	r16,r16,r21
  81566c:	2f23383a 	mul	r17,r5,fp
  815670:	10c4b03a 	or	r2,r2,r3
  815674:	dc000015 	stw	r16,0(sp)
  815678:	b56c983a 	sll	r22,r22,r21
  81567c:	1440032e 	bgeu	r2,r17,81568c <__umoddi3+0x404>
  815680:	15c5883a 	add	r2,r2,r23
  815684:	e73fffc4 	addi	fp,fp,-1
  815688:	15c05d2e 	bgeu	r2,r23,815800 <__umoddi3+0x578>
  81568c:	1463c83a 	sub	r17,r2,r17
  815690:	8809883a 	mov	r4,r17
  815694:	a00b883a 	mov	r5,r20
  815698:	080cfd80 	call	80cfd8 <__udivsi3>
  81569c:	8809883a 	mov	r4,r17
  8156a0:	a00b883a 	mov	r5,r20
  8156a4:	1021883a 	mov	r16,r2
  8156a8:	080cfe00 	call	80cfe0 <__umodsi3>
  8156ac:	d8c00417 	ldw	r3,16(sp)
  8156b0:	d9000217 	ldw	r4,8(sp)
  8156b4:	1004943a 	slli	r2,r2,16
  8156b8:	1c23383a 	mul	r17,r3,r16
  8156bc:	20ffffcc 	andi	r3,r4,65535
  8156c0:	10ceb03a 	or	r7,r2,r3
  8156c4:	3c40032e 	bgeu	r7,r17,8156d4 <__umoddi3+0x44c>
  8156c8:	3dcf883a 	add	r7,r7,r23
  8156cc:	843fffc4 	addi	r16,r16,-1
  8156d0:	3dc0472e 	bgeu	r7,r23,8157f0 <__umoddi3+0x568>
  8156d4:	e004943a 	slli	r2,fp,16
  8156d8:	d9400017 	ldw	r5,0(sp)
  8156dc:	3c4fc83a 	sub	r7,r7,r17
  8156e0:	8084b03a 	or	r2,r16,r2
  8156e4:	28ffffcc 	andi	r3,r5,65535
  8156e8:	280cd43a 	srli	r6,r5,16
  8156ec:	100ad43a 	srli	r5,r2,16
  8156f0:	10bfffcc 	andi	r2,r2,65535
  8156f4:	10d1383a 	mul	r8,r2,r3
  8156f8:	28c7383a 	mul	r3,r5,r3
  8156fc:	1185383a 	mul	r2,r2,r6
  815700:	4008d43a 	srli	r4,r8,16
  815704:	298b383a 	mul	r5,r5,r6
  815708:	10c5883a 	add	r2,r2,r3
  81570c:	2089883a 	add	r4,r4,r2
  815710:	20c0022e 	bgeu	r4,r3,81571c <__umoddi3+0x494>
  815714:	00800074 	movhi	r2,1
  815718:	288b883a 	add	r5,r5,r2
  81571c:	2004d43a 	srli	r2,r4,16
  815720:	2008943a 	slli	r4,r4,16
  815724:	40ffffcc 	andi	r3,r8,65535
  815728:	288b883a 	add	r5,r5,r2
  81572c:	20c9883a 	add	r4,r4,r3
  815730:	39400b36 	bltu	r7,r5,815760 <__umoddi3+0x4d8>
  815734:	39403d26 	beq	r7,r5,81582c <__umoddi3+0x5a4>
  815738:	394bc83a 	sub	r5,r7,r5
  81573c:	00000f06 	br	81577c <__umoddi3+0x4f4>
  815740:	30c5c83a 	sub	r2,r6,r3
  815744:	1839883a 	mov	fp,r3
  815748:	b084d83a 	srl	r2,r22,r2
  81574c:	a0c6983a 	sll	r3,r20,r3
  815750:	8720983a 	sll	r16,r16,fp
  815754:	b72c983a 	sll	r22,r22,fp
  815758:	18a8b03a 	or	r20,r3,r2
  81575c:	003f3a06 	br	815448 <__umoddi3+0x1c0>
  815760:	d8c00017 	ldw	r3,0(sp)
  815764:	20c5c83a 	sub	r2,r4,r3
  815768:	2089803a 	cmpltu	r4,r4,r2
  81576c:	2dc7c83a 	sub	r3,r5,r23
  815770:	1907c83a 	sub	r3,r3,r4
  815774:	38cbc83a 	sub	r5,r7,r3
  815778:	1009883a 	mov	r4,r2
  81577c:	b105c83a 	sub	r2,r22,r4
  815780:	b087803a 	cmpltu	r3,r22,r2
  815784:	28c7c83a 	sub	r3,r5,r3
  815788:	d9400317 	ldw	r5,12(sp)
  81578c:	1544d83a 	srl	r2,r2,r21
  815790:	1948983a 	sll	r4,r3,r5
  815794:	1d46d83a 	srl	r3,r3,r21
  815798:	20a4b03a 	or	r18,r4,r2
  81579c:	9011883a 	mov	r8,r18
  8157a0:	1813883a 	mov	r9,r3
  8157a4:	003ef606 	br	815380 <__umoddi3+0xf8>
  8157a8:	01400604 	movi	r5,24
  8157ac:	2805883a 	mov	r2,r5
  8157b0:	003ecc06 	br	8152e4 <__umoddi3+0x5c>
  8157b4:	01400204 	movi	r5,8
  8157b8:	2805883a 	mov	r2,r5
  8157bc:	003ec906 	br	8152e4 <__umoddi3+0x5c>
  8157c0:	01400204 	movi	r5,8
  8157c4:	2805883a 	mov	r2,r5
  8157c8:	003f0106 	br	8153d0 <__umoddi3+0x148>
  8157cc:	01400204 	movi	r5,8
  8157d0:	2805883a 	mov	r2,r5
  8157d4:	003f1206 	br	815420 <__umoddi3+0x198>
  8157d8:	01400604 	movi	r5,24
  8157dc:	2805883a 	mov	r2,r5
  8157e0:	003f0f06 	br	815420 <__umoddi3+0x198>
  8157e4:	01400604 	movi	r5,24
  8157e8:	2805883a 	mov	r2,r5
  8157ec:	003ef806 	br	8153d0 <__umoddi3+0x148>
  8157f0:	3c7fb82e 	bgeu	r7,r17,8156d4 <__umoddi3+0x44c>
  8157f4:	843fffc4 	addi	r16,r16,-1
  8157f8:	3dcf883a 	add	r7,r7,r23
  8157fc:	003fb506 	br	8156d4 <__umoddi3+0x44c>
  815800:	147fa22e 	bgeu	r2,r17,81568c <__umoddi3+0x404>
  815804:	e73fffc4 	addi	fp,fp,-1
  815808:	15c5883a 	add	r2,r2,r23
  81580c:	003f9f06 	br	81568c <__umoddi3+0x404>
  815810:	147f692e 	bgeu	r2,r17,8155b8 <__umoddi3+0x330>
  815814:	1405883a 	add	r2,r2,r16
  815818:	003f6706 	br	8155b8 <__umoddi3+0x330>
  81581c:	1405883a 	add	r2,r2,r16
  815820:	003f1906 	br	815488 <__umoddi3+0x200>
  815824:	1405883a 	add	r2,r2,r16
  815828:	003ec906 	br	815350 <__umoddi3+0xc8>
  81582c:	b13fcc36 	bltu	r22,r4,815760 <__umoddi3+0x4d8>
  815830:	000b883a 	mov	r5,zero
  815834:	003fd106 	br	81577c <__umoddi3+0x4f4>

00815838 <__nedf2>:
  815838:	deffef04 	addi	sp,sp,-68
  81583c:	dc400f15 	stw	r17,60(sp)
  815840:	dc400404 	addi	r17,sp,16
  815844:	2005883a 	mov	r2,r4
  815848:	2807883a 	mov	r3,r5
  81584c:	dc000e15 	stw	r16,56(sp)
  815850:	d809883a 	mov	r4,sp
  815854:	880b883a 	mov	r5,r17
  815858:	dc000904 	addi	r16,sp,36
  81585c:	d8c00115 	stw	r3,4(sp)
  815860:	d8800015 	stw	r2,0(sp)
  815864:	d9800215 	stw	r6,8(sp)
  815868:	dfc01015 	stw	ra,64(sp)
  81586c:	d9c00315 	stw	r7,12(sp)
  815870:	080d4140 	call	80d414 <__unpack_d>
  815874:	d9000204 	addi	r4,sp,8
  815878:	800b883a 	mov	r5,r16
  81587c:	080d4140 	call	80d414 <__unpack_d>
  815880:	d8800417 	ldw	r2,16(sp)
  815884:	00c00044 	movi	r3,1
  815888:	180d883a 	mov	r6,r3
  81588c:	1880062e 	bgeu	r3,r2,8158a8 <__nedf2+0x70>
  815890:	d8800917 	ldw	r2,36(sp)
  815894:	8809883a 	mov	r4,r17
  815898:	800b883a 	mov	r5,r16
  81589c:	1880022e 	bgeu	r3,r2,8158a8 <__nedf2+0x70>
  8158a0:	080d54c0 	call	80d54c <__fpcmp_parts_d>
  8158a4:	100d883a 	mov	r6,r2
  8158a8:	3005883a 	mov	r2,r6
  8158ac:	dfc01017 	ldw	ra,64(sp)
  8158b0:	dc400f17 	ldw	r17,60(sp)
  8158b4:	dc000e17 	ldw	r16,56(sp)
  8158b8:	dec01104 	addi	sp,sp,68
  8158bc:	f800283a 	ret

008158c0 <__ltdf2>:
  8158c0:	deffef04 	addi	sp,sp,-68
  8158c4:	dc400f15 	stw	r17,60(sp)
  8158c8:	dc400404 	addi	r17,sp,16
  8158cc:	2005883a 	mov	r2,r4
  8158d0:	2807883a 	mov	r3,r5
  8158d4:	dc000e15 	stw	r16,56(sp)
  8158d8:	d809883a 	mov	r4,sp
  8158dc:	880b883a 	mov	r5,r17
  8158e0:	dc000904 	addi	r16,sp,36
  8158e4:	d8c00115 	stw	r3,4(sp)
  8158e8:	d8800015 	stw	r2,0(sp)
  8158ec:	d9800215 	stw	r6,8(sp)
  8158f0:	dfc01015 	stw	ra,64(sp)
  8158f4:	d9c00315 	stw	r7,12(sp)
  8158f8:	080d4140 	call	80d414 <__unpack_d>
  8158fc:	d9000204 	addi	r4,sp,8
  815900:	800b883a 	mov	r5,r16
  815904:	080d4140 	call	80d414 <__unpack_d>
  815908:	d8800417 	ldw	r2,16(sp)
  81590c:	00c00044 	movi	r3,1
  815910:	180d883a 	mov	r6,r3
  815914:	1880062e 	bgeu	r3,r2,815930 <__ltdf2+0x70>
  815918:	d8800917 	ldw	r2,36(sp)
  81591c:	8809883a 	mov	r4,r17
  815920:	800b883a 	mov	r5,r16
  815924:	1880022e 	bgeu	r3,r2,815930 <__ltdf2+0x70>
  815928:	080d54c0 	call	80d54c <__fpcmp_parts_d>
  81592c:	100d883a 	mov	r6,r2
  815930:	3005883a 	mov	r2,r6
  815934:	dfc01017 	ldw	ra,64(sp)
  815938:	dc400f17 	ldw	r17,60(sp)
  81593c:	dc000e17 	ldw	r16,56(sp)
  815940:	dec01104 	addi	sp,sp,68
  815944:	f800283a 	ret

00815948 <__floatunsidf>:
  815948:	defff204 	addi	sp,sp,-56
  81594c:	dfc00d15 	stw	ra,52(sp)
  815950:	ddc00c15 	stw	r23,48(sp)
  815954:	dd800b15 	stw	r22,44(sp)
  815958:	dd400a15 	stw	r21,40(sp)
  81595c:	dd000915 	stw	r20,36(sp)
  815960:	dcc00815 	stw	r19,32(sp)
  815964:	dc800715 	stw	r18,28(sp)
  815968:	dc400615 	stw	r17,24(sp)
  81596c:	dc000515 	stw	r16,20(sp)
  815970:	d8000115 	stw	zero,4(sp)
  815974:	20000f1e 	bne	r4,zero,8159b4 <__floatunsidf+0x6c>
  815978:	00800084 	movi	r2,2
  81597c:	d8800015 	stw	r2,0(sp)
  815980:	d809883a 	mov	r4,sp
  815984:	080d1000 	call	80d100 <__pack_d>
  815988:	dfc00d17 	ldw	ra,52(sp)
  81598c:	ddc00c17 	ldw	r23,48(sp)
  815990:	dd800b17 	ldw	r22,44(sp)
  815994:	dd400a17 	ldw	r21,40(sp)
  815998:	dd000917 	ldw	r20,36(sp)
  81599c:	dcc00817 	ldw	r19,32(sp)
  8159a0:	dc800717 	ldw	r18,28(sp)
  8159a4:	dc400617 	ldw	r17,24(sp)
  8159a8:	dc000517 	ldw	r16,20(sp)
  8159ac:	dec00e04 	addi	sp,sp,56
  8159b0:	f800283a 	ret
  8159b4:	008000c4 	movi	r2,3
  8159b8:	00c00f04 	movi	r3,60
  8159bc:	002f883a 	mov	r23,zero
  8159c0:	202d883a 	mov	r22,r4
  8159c4:	d8800015 	stw	r2,0(sp)
  8159c8:	d8c00215 	stw	r3,8(sp)
  8159cc:	d9000315 	stw	r4,12(sp)
  8159d0:	ddc00415 	stw	r23,16(sp)
  8159d4:	080d0800 	call	80d080 <__clzsi2>
  8159d8:	12400744 	addi	r9,r2,29
  8159dc:	48000b16 	blt	r9,zero,815a0c <__floatunsidf+0xc4>
  8159e0:	483fe726 	beq	r9,zero,815980 <__floatunsidf+0x38>
  8159e4:	10bfff44 	addi	r2,r2,-3
  8159e8:	10002e16 	blt	r2,zero,815aa4 <__floatunsidf+0x15c>
  8159ec:	b0a2983a 	sll	r17,r22,r2
  8159f0:	0021883a 	mov	r16,zero
  8159f4:	d8800217 	ldw	r2,8(sp)
  8159f8:	dc400415 	stw	r17,16(sp)
  8159fc:	dc000315 	stw	r16,12(sp)
  815a00:	1245c83a 	sub	r2,r2,r9
  815a04:	d8800215 	stw	r2,8(sp)
  815a08:	003fdd06 	br	815980 <__floatunsidf+0x38>
  815a0c:	0255c83a 	sub	r10,zero,r9
  815a10:	51bff804 	addi	r6,r10,-32
  815a14:	30001b16 	blt	r6,zero,815a84 <__floatunsidf+0x13c>
  815a18:	b9a8d83a 	srl	r20,r23,r6
  815a1c:	002b883a 	mov	r21,zero
  815a20:	000f883a 	mov	r7,zero
  815a24:	01000044 	movi	r4,1
  815a28:	0011883a 	mov	r8,zero
  815a2c:	30002516 	blt	r6,zero,815ac4 <__floatunsidf+0x17c>
  815a30:	21a6983a 	sll	r19,r4,r6
  815a34:	0025883a 	mov	r18,zero
  815a38:	00bfffc4 	movi	r2,-1
  815a3c:	9089883a 	add	r4,r18,r2
  815a40:	988b883a 	add	r5,r19,r2
  815a44:	248d803a 	cmpltu	r6,r4,r18
  815a48:	314b883a 	add	r5,r6,r5
  815a4c:	b104703a 	and	r2,r22,r4
  815a50:	b946703a 	and	r3,r23,r5
  815a54:	10c4b03a 	or	r2,r2,r3
  815a58:	10000226 	beq	r2,zero,815a64 <__floatunsidf+0x11c>
  815a5c:	01c00044 	movi	r7,1
  815a60:	0011883a 	mov	r8,zero
  815a64:	d9000217 	ldw	r4,8(sp)
  815a68:	a1c4b03a 	or	r2,r20,r7
  815a6c:	aa06b03a 	or	r3,r21,r8
  815a70:	2249c83a 	sub	r4,r4,r9
  815a74:	d8c00415 	stw	r3,16(sp)
  815a78:	d9000215 	stw	r4,8(sp)
  815a7c:	d8800315 	stw	r2,12(sp)
  815a80:	003fbf06 	br	815980 <__floatunsidf+0x38>
  815a84:	bdc7883a 	add	r3,r23,r23
  815a88:	008007c4 	movi	r2,31
  815a8c:	1285c83a 	sub	r2,r2,r10
  815a90:	1886983a 	sll	r3,r3,r2
  815a94:	b2a8d83a 	srl	r20,r22,r10
  815a98:	baaad83a 	srl	r21,r23,r10
  815a9c:	1d28b03a 	or	r20,r3,r20
  815aa0:	003fdf06 	br	815a20 <__floatunsidf+0xd8>
  815aa4:	b006d07a 	srli	r3,r22,1
  815aa8:	008007c4 	movi	r2,31
  815aac:	1245c83a 	sub	r2,r2,r9
  815ab0:	1886d83a 	srl	r3,r3,r2
  815ab4:	ba62983a 	sll	r17,r23,r9
  815ab8:	b260983a 	sll	r16,r22,r9
  815abc:	1c62b03a 	or	r17,r3,r17
  815ac0:	003fcc06 	br	8159f4 <__floatunsidf+0xac>
  815ac4:	2006d07a 	srli	r3,r4,1
  815ac8:	008007c4 	movi	r2,31
  815acc:	1285c83a 	sub	r2,r2,r10
  815ad0:	18a6d83a 	srl	r19,r3,r2
  815ad4:	22a4983a 	sll	r18,r4,r10
  815ad8:	003fd706 	br	815a38 <__floatunsidf+0xf0>

00815adc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  815adc:	defff804 	addi	sp,sp,-32
  815ae0:	dfc00715 	stw	ra,28(sp)
  815ae4:	df000615 	stw	fp,24(sp)
  815ae8:	df000604 	addi	fp,sp,24
  815aec:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  815af0:	e0bffc17 	ldw	r2,-16(fp)
  815af4:	1004803a 	cmplt	r2,r2,zero
  815af8:	1000081e 	bne	r2,zero,815b1c <close+0x40>
  815afc:	e0bffc17 	ldw	r2,-16(fp)
  815b00:	10800324 	muli	r2,r2,12
  815b04:	1007883a 	mov	r3,r2
  815b08:	008020b4 	movhi	r2,130
  815b0c:	108f4b04 	addi	r2,r2,15660
  815b10:	1887883a 	add	r3,r3,r2
  815b14:	e0ffff15 	stw	r3,-4(fp)
  815b18:	00000106 	br	815b20 <close+0x44>
  815b1c:	e03fff15 	stw	zero,-4(fp)
  815b20:	e0bfff17 	ldw	r2,-4(fp)
  815b24:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  815b28:	e0bffb17 	ldw	r2,-20(fp)
  815b2c:	1005003a 	cmpeq	r2,r2,zero
  815b30:	10001d1e 	bne	r2,zero,815ba8 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  815b34:	e0bffb17 	ldw	r2,-20(fp)
  815b38:	10800017 	ldw	r2,0(r2)
  815b3c:	10800417 	ldw	r2,16(r2)
  815b40:	1005003a 	cmpeq	r2,r2,zero
  815b44:	1000071e 	bne	r2,zero,815b64 <close+0x88>
  815b48:	e0bffb17 	ldw	r2,-20(fp)
  815b4c:	10800017 	ldw	r2,0(r2)
  815b50:	10800417 	ldw	r2,16(r2)
  815b54:	e13ffb17 	ldw	r4,-20(fp)
  815b58:	103ee83a 	callr	r2
  815b5c:	e0bffe15 	stw	r2,-8(fp)
  815b60:	00000106 	br	815b68 <close+0x8c>
  815b64:	e03ffe15 	stw	zero,-8(fp)
  815b68:	e0bffe17 	ldw	r2,-8(fp)
  815b6c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  815b70:	e13ffc17 	ldw	r4,-16(fp)
  815b74:	081633c0 	call	81633c <alt_release_fd>
    if (rval < 0)
  815b78:	e0bffa17 	ldw	r2,-24(fp)
  815b7c:	1004403a 	cmpge	r2,r2,zero
  815b80:	1000071e 	bne	r2,zero,815ba0 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  815b84:	0815bd80 	call	815bd8 <alt_get_errno>
  815b88:	e0fffa17 	ldw	r3,-24(fp)
  815b8c:	00c7c83a 	sub	r3,zero,r3
  815b90:	10c00015 	stw	r3,0(r2)
      return -1;
  815b94:	00bfffc4 	movi	r2,-1
  815b98:	e0bffd15 	stw	r2,-12(fp)
  815b9c:	00000806 	br	815bc0 <close+0xe4>
    }
    return 0;
  815ba0:	e03ffd15 	stw	zero,-12(fp)
  815ba4:	00000606 	br	815bc0 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  815ba8:	0815bd80 	call	815bd8 <alt_get_errno>
  815bac:	1007883a 	mov	r3,r2
  815bb0:	00801444 	movi	r2,81
  815bb4:	18800015 	stw	r2,0(r3)
    return -1;
  815bb8:	00bfffc4 	movi	r2,-1
  815bbc:	e0bffd15 	stw	r2,-12(fp)
  815bc0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  815bc4:	e037883a 	mov	sp,fp
  815bc8:	dfc00117 	ldw	ra,4(sp)
  815bcc:	df000017 	ldw	fp,0(sp)
  815bd0:	dec00204 	addi	sp,sp,8
  815bd4:	f800283a 	ret

00815bd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  815bd8:	defffd04 	addi	sp,sp,-12
  815bdc:	dfc00215 	stw	ra,8(sp)
  815be0:	df000115 	stw	fp,4(sp)
  815be4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  815be8:	008020b4 	movhi	r2,130
  815bec:	1093f404 	addi	r2,r2,20432
  815bf0:	10800017 	ldw	r2,0(r2)
  815bf4:	1005003a 	cmpeq	r2,r2,zero
  815bf8:	1000061e 	bne	r2,zero,815c14 <alt_get_errno+0x3c>
  815bfc:	008020b4 	movhi	r2,130
  815c00:	1093f404 	addi	r2,r2,20432
  815c04:	10800017 	ldw	r2,0(r2)
  815c08:	103ee83a 	callr	r2
  815c0c:	e0bfff15 	stw	r2,-4(fp)
  815c10:	00000306 	br	815c20 <alt_get_errno+0x48>
  815c14:	008020b4 	movhi	r2,130
  815c18:	109afc04 	addi	r2,r2,27632
  815c1c:	e0bfff15 	stw	r2,-4(fp)
  815c20:	e0bfff17 	ldw	r2,-4(fp)
}
  815c24:	e037883a 	mov	sp,fp
  815c28:	dfc00117 	ldw	ra,4(sp)
  815c2c:	df000017 	ldw	fp,0(sp)
  815c30:	dec00204 	addi	sp,sp,8
  815c34:	f800283a 	ret

00815c38 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  815c38:	defffc04 	addi	sp,sp,-16
  815c3c:	df000315 	stw	fp,12(sp)
  815c40:	df000304 	addi	fp,sp,12
  815c44:	e13ffd15 	stw	r4,-12(fp)
  815c48:	e17ffe15 	stw	r5,-8(fp)
  815c4c:	e1bfff15 	stw	r6,-4(fp)
  return len;
  815c50:	e0bfff17 	ldw	r2,-4(fp)
}
  815c54:	e037883a 	mov	sp,fp
  815c58:	df000017 	ldw	fp,0(sp)
  815c5c:	dec00104 	addi	sp,sp,4
  815c60:	f800283a 	ret

00815c64 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  815c64:	defff904 	addi	sp,sp,-28
  815c68:	dfc00615 	stw	ra,24(sp)
  815c6c:	df000515 	stw	fp,20(sp)
  815c70:	df000504 	addi	fp,sp,20
  815c74:	e13ffc15 	stw	r4,-16(fp)
  815c78:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  815c7c:	e0bffc17 	ldw	r2,-16(fp)
  815c80:	1004803a 	cmplt	r2,r2,zero
  815c84:	1000081e 	bne	r2,zero,815ca8 <fstat+0x44>
  815c88:	e0bffc17 	ldw	r2,-16(fp)
  815c8c:	10800324 	muli	r2,r2,12
  815c90:	1007883a 	mov	r3,r2
  815c94:	008020b4 	movhi	r2,130
  815c98:	108f4b04 	addi	r2,r2,15660
  815c9c:	1887883a 	add	r3,r3,r2
  815ca0:	e0ffff15 	stw	r3,-4(fp)
  815ca4:	00000106 	br	815cac <fstat+0x48>
  815ca8:	e03fff15 	stw	zero,-4(fp)
  815cac:	e0bfff17 	ldw	r2,-4(fp)
  815cb0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  815cb4:	e0bffb17 	ldw	r2,-20(fp)
  815cb8:	1005003a 	cmpeq	r2,r2,zero
  815cbc:	1000121e 	bne	r2,zero,815d08 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  815cc0:	e0bffb17 	ldw	r2,-20(fp)
  815cc4:	10800017 	ldw	r2,0(r2)
  815cc8:	10800817 	ldw	r2,32(r2)
  815ccc:	1005003a 	cmpeq	r2,r2,zero
  815cd0:	1000081e 	bne	r2,zero,815cf4 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  815cd4:	e0bffb17 	ldw	r2,-20(fp)
  815cd8:	10800017 	ldw	r2,0(r2)
  815cdc:	10800817 	ldw	r2,32(r2)
  815ce0:	e13ffb17 	ldw	r4,-20(fp)
  815ce4:	e17ffd17 	ldw	r5,-12(fp)
  815ce8:	103ee83a 	callr	r2
  815cec:	e0bffe15 	stw	r2,-8(fp)
  815cf0:	00000b06 	br	815d20 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  815cf4:	e0fffd17 	ldw	r3,-12(fp)
  815cf8:	00880004 	movi	r2,8192
  815cfc:	18800115 	stw	r2,4(r3)
      return 0;
  815d00:	e03ffe15 	stw	zero,-8(fp)
  815d04:	00000606 	br	815d20 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  815d08:	0815d380 	call	815d38 <alt_get_errno>
  815d0c:	1007883a 	mov	r3,r2
  815d10:	00801444 	movi	r2,81
  815d14:	18800015 	stw	r2,0(r3)
    return -1;
  815d18:	00bfffc4 	movi	r2,-1
  815d1c:	e0bffe15 	stw	r2,-8(fp)
  815d20:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  815d24:	e037883a 	mov	sp,fp
  815d28:	dfc00117 	ldw	ra,4(sp)
  815d2c:	df000017 	ldw	fp,0(sp)
  815d30:	dec00204 	addi	sp,sp,8
  815d34:	f800283a 	ret

00815d38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  815d38:	defffd04 	addi	sp,sp,-12
  815d3c:	dfc00215 	stw	ra,8(sp)
  815d40:	df000115 	stw	fp,4(sp)
  815d44:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  815d48:	008020b4 	movhi	r2,130
  815d4c:	1093f404 	addi	r2,r2,20432
  815d50:	10800017 	ldw	r2,0(r2)
  815d54:	1005003a 	cmpeq	r2,r2,zero
  815d58:	1000061e 	bne	r2,zero,815d74 <alt_get_errno+0x3c>
  815d5c:	008020b4 	movhi	r2,130
  815d60:	1093f404 	addi	r2,r2,20432
  815d64:	10800017 	ldw	r2,0(r2)
  815d68:	103ee83a 	callr	r2
  815d6c:	e0bfff15 	stw	r2,-4(fp)
  815d70:	00000306 	br	815d80 <alt_get_errno+0x48>
  815d74:	008020b4 	movhi	r2,130
  815d78:	109afc04 	addi	r2,r2,27632
  815d7c:	e0bfff15 	stw	r2,-4(fp)
  815d80:	e0bfff17 	ldw	r2,-4(fp)
}
  815d84:	e037883a 	mov	sp,fp
  815d88:	dfc00117 	ldw	ra,4(sp)
  815d8c:	df000017 	ldw	fp,0(sp)
  815d90:	dec00204 	addi	sp,sp,8
  815d94:	f800283a 	ret

00815d98 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  815d98:	deffeb04 	addi	sp,sp,-84
  815d9c:	dfc01415 	stw	ra,80(sp)
  815da0:	df001315 	stw	fp,76(sp)
  815da4:	df001304 	addi	fp,sp,76
  815da8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  815dac:	e0bffd17 	ldw	r2,-12(fp)
  815db0:	1004803a 	cmplt	r2,r2,zero
  815db4:	1000081e 	bne	r2,zero,815dd8 <isatty+0x40>
  815db8:	e0bffd17 	ldw	r2,-12(fp)
  815dbc:	10800324 	muli	r2,r2,12
  815dc0:	1007883a 	mov	r3,r2
  815dc4:	008020b4 	movhi	r2,130
  815dc8:	108f4b04 	addi	r2,r2,15660
  815dcc:	1887883a 	add	r3,r3,r2
  815dd0:	e0ffff15 	stw	r3,-4(fp)
  815dd4:	00000106 	br	815ddc <isatty+0x44>
  815dd8:	e03fff15 	stw	zero,-4(fp)
  815ddc:	e0bfff17 	ldw	r2,-4(fp)
  815de0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  815de4:	e0bfed17 	ldw	r2,-76(fp)
  815de8:	1005003a 	cmpeq	r2,r2,zero
  815dec:	10000f1e 	bne	r2,zero,815e2c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  815df0:	e0bfed17 	ldw	r2,-76(fp)
  815df4:	10800017 	ldw	r2,0(r2)
  815df8:	10800817 	ldw	r2,32(r2)
  815dfc:	1004c03a 	cmpne	r2,r2,zero
  815e00:	1000031e 	bne	r2,zero,815e10 <isatty+0x78>
    {
      return 1;
  815e04:	00800044 	movi	r2,1
  815e08:	e0bffe15 	stw	r2,-8(fp)
  815e0c:	00000c06 	br	815e40 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  815e10:	e17fee04 	addi	r5,fp,-72
  815e14:	e13ffd17 	ldw	r4,-12(fp)
  815e18:	0815c640 	call	815c64 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  815e1c:	e0bfef17 	ldw	r2,-68(fp)
  815e20:	10880020 	cmpeqi	r2,r2,8192
  815e24:	e0bffe15 	stw	r2,-8(fp)
  815e28:	00000506 	br	815e40 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  815e2c:	0815e580 	call	815e58 <alt_get_errno>
  815e30:	1007883a 	mov	r3,r2
  815e34:	00801444 	movi	r2,81
  815e38:	18800015 	stw	r2,0(r3)
    return 0;
  815e3c:	e03ffe15 	stw	zero,-8(fp)
  815e40:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  815e44:	e037883a 	mov	sp,fp
  815e48:	dfc00117 	ldw	ra,4(sp)
  815e4c:	df000017 	ldw	fp,0(sp)
  815e50:	dec00204 	addi	sp,sp,8
  815e54:	f800283a 	ret

00815e58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  815e58:	defffd04 	addi	sp,sp,-12
  815e5c:	dfc00215 	stw	ra,8(sp)
  815e60:	df000115 	stw	fp,4(sp)
  815e64:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  815e68:	008020b4 	movhi	r2,130
  815e6c:	1093f404 	addi	r2,r2,20432
  815e70:	10800017 	ldw	r2,0(r2)
  815e74:	1005003a 	cmpeq	r2,r2,zero
  815e78:	1000061e 	bne	r2,zero,815e94 <alt_get_errno+0x3c>
  815e7c:	008020b4 	movhi	r2,130
  815e80:	1093f404 	addi	r2,r2,20432
  815e84:	10800017 	ldw	r2,0(r2)
  815e88:	103ee83a 	callr	r2
  815e8c:	e0bfff15 	stw	r2,-4(fp)
  815e90:	00000306 	br	815ea0 <alt_get_errno+0x48>
  815e94:	008020b4 	movhi	r2,130
  815e98:	109afc04 	addi	r2,r2,27632
  815e9c:	e0bfff15 	stw	r2,-4(fp)
  815ea0:	e0bfff17 	ldw	r2,-4(fp)
}
  815ea4:	e037883a 	mov	sp,fp
  815ea8:	dfc00117 	ldw	ra,4(sp)
  815eac:	df000017 	ldw	fp,0(sp)
  815eb0:	dec00204 	addi	sp,sp,8
  815eb4:	f800283a 	ret

00815eb8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  815eb8:	defffe04 	addi	sp,sp,-8
  815ebc:	dfc00115 	stw	ra,4(sp)
  815ec0:	df000015 	stw	fp,0(sp)
  815ec4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  815ec8:	010020b4 	movhi	r4,130
  815ecc:	21141804 	addi	r4,r4,20576
  815ed0:	014020b4 	movhi	r5,130
  815ed4:	294d3904 	addi	r5,r5,13540
  815ed8:	018020b4 	movhi	r6,130
  815edc:	31941804 	addi	r6,r6,20576
  815ee0:	0815f380 	call	815f38 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  815ee4:	01002034 	movhi	r4,128
  815ee8:	21000004 	addi	r4,r4,0
  815eec:	01404434 	movhi	r5,272
  815ef0:	29500804 	addi	r5,r5,16416
  815ef4:	01804434 	movhi	r6,272
  815ef8:	31907004 	addi	r6,r6,16832
  815efc:	0815f380 	call	815f38 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  815f00:	010020b4 	movhi	r4,130
  815f04:	2109be04 	addi	r4,r4,9976
  815f08:	014020b4 	movhi	r5,130
  815f0c:	2949be04 	addi	r5,r5,9976
  815f10:	018020b4 	movhi	r6,130
  815f14:	318d3904 	addi	r6,r6,13540
  815f18:	0815f380 	call	815f38 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  815f1c:	08210e80 	call	8210e8 <alt_dcache_flush_all>
  alt_icache_flush_all();
  815f20:	082139c0 	call	82139c <alt_icache_flush_all>
}
  815f24:	e037883a 	mov	sp,fp
  815f28:	dfc00117 	ldw	ra,4(sp)
  815f2c:	df000017 	ldw	fp,0(sp)
  815f30:	dec00204 	addi	sp,sp,8
  815f34:	f800283a 	ret

00815f38 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  815f38:	defffc04 	addi	sp,sp,-16
  815f3c:	df000315 	stw	fp,12(sp)
  815f40:	df000304 	addi	fp,sp,12
  815f44:	e13ffd15 	stw	r4,-12(fp)
  815f48:	e17ffe15 	stw	r5,-8(fp)
  815f4c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  815f50:	e0fffe17 	ldw	r3,-8(fp)
  815f54:	e0bffd17 	ldw	r2,-12(fp)
  815f58:	18800e26 	beq	r3,r2,815f94 <alt_load_section+0x5c>
  {
    while( to != end )
  815f5c:	00000a06 	br	815f88 <alt_load_section+0x50>
    {
      *to++ = *from++;
  815f60:	e0bffd17 	ldw	r2,-12(fp)
  815f64:	10c00017 	ldw	r3,0(r2)
  815f68:	e0bffe17 	ldw	r2,-8(fp)
  815f6c:	10c00015 	stw	r3,0(r2)
  815f70:	e0bffe17 	ldw	r2,-8(fp)
  815f74:	10800104 	addi	r2,r2,4
  815f78:	e0bffe15 	stw	r2,-8(fp)
  815f7c:	e0bffd17 	ldw	r2,-12(fp)
  815f80:	10800104 	addi	r2,r2,4
  815f84:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  815f88:	e0fffe17 	ldw	r3,-8(fp)
  815f8c:	e0bfff17 	ldw	r2,-4(fp)
  815f90:	18bff31e 	bne	r3,r2,815f60 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  815f94:	e037883a 	mov	sp,fp
  815f98:	df000017 	ldw	fp,0(sp)
  815f9c:	dec00104 	addi	sp,sp,4
  815fa0:	f800283a 	ret

00815fa4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  815fa4:	defff804 	addi	sp,sp,-32
  815fa8:	dfc00715 	stw	ra,28(sp)
  815fac:	df000615 	stw	fp,24(sp)
  815fb0:	df000604 	addi	fp,sp,24
  815fb4:	e13ffc15 	stw	r4,-16(fp)
  815fb8:	e17ffd15 	stw	r5,-12(fp)
  815fbc:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  815fc0:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  815fc4:	e0bffc17 	ldw	r2,-16(fp)
  815fc8:	1004803a 	cmplt	r2,r2,zero
  815fcc:	1000081e 	bne	r2,zero,815ff0 <lseek+0x4c>
  815fd0:	e0bffc17 	ldw	r2,-16(fp)
  815fd4:	10800324 	muli	r2,r2,12
  815fd8:	1007883a 	mov	r3,r2
  815fdc:	008020b4 	movhi	r2,130
  815fe0:	108f4b04 	addi	r2,r2,15660
  815fe4:	1887883a 	add	r3,r3,r2
  815fe8:	e0ffff15 	stw	r3,-4(fp)
  815fec:	00000106 	br	815ff4 <lseek+0x50>
  815ff0:	e03fff15 	stw	zero,-4(fp)
  815ff4:	e0bfff17 	ldw	r2,-4(fp)
  815ff8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  815ffc:	e0bffb17 	ldw	r2,-20(fp)
  816000:	1005003a 	cmpeq	r2,r2,zero
  816004:	1000111e 	bne	r2,zero,81604c <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  816008:	e0bffb17 	ldw	r2,-20(fp)
  81600c:	10800017 	ldw	r2,0(r2)
  816010:	10800717 	ldw	r2,28(r2)
  816014:	1005003a 	cmpeq	r2,r2,zero
  816018:	1000091e 	bne	r2,zero,816040 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  81601c:	e0bffb17 	ldw	r2,-20(fp)
  816020:	10800017 	ldw	r2,0(r2)
  816024:	10800717 	ldw	r2,28(r2)
  816028:	e13ffb17 	ldw	r4,-20(fp)
  81602c:	e17ffd17 	ldw	r5,-12(fp)
  816030:	e1bffe17 	ldw	r6,-8(fp)
  816034:	103ee83a 	callr	r2
  816038:	e0bffa15 	stw	r2,-24(fp)
  81603c:	00000506 	br	816054 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  816040:	00bfde84 	movi	r2,-134
  816044:	e0bffa15 	stw	r2,-24(fp)
  816048:	00000206 	br	816054 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  81604c:	00bfebc4 	movi	r2,-81
  816050:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  816054:	e0bffa17 	ldw	r2,-24(fp)
  816058:	1004403a 	cmpge	r2,r2,zero
  81605c:	1000071e 	bne	r2,zero,81607c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  816060:	08160940 	call	816094 <alt_get_errno>
  816064:	1007883a 	mov	r3,r2
  816068:	e0bffa17 	ldw	r2,-24(fp)
  81606c:	0085c83a 	sub	r2,zero,r2
  816070:	18800015 	stw	r2,0(r3)
    rc = -1;
  816074:	00bfffc4 	movi	r2,-1
  816078:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  81607c:	e0bffa17 	ldw	r2,-24(fp)
}
  816080:	e037883a 	mov	sp,fp
  816084:	dfc00117 	ldw	ra,4(sp)
  816088:	df000017 	ldw	fp,0(sp)
  81608c:	dec00204 	addi	sp,sp,8
  816090:	f800283a 	ret

00816094 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  816094:	defffd04 	addi	sp,sp,-12
  816098:	dfc00215 	stw	ra,8(sp)
  81609c:	df000115 	stw	fp,4(sp)
  8160a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8160a4:	008020b4 	movhi	r2,130
  8160a8:	1093f404 	addi	r2,r2,20432
  8160ac:	10800017 	ldw	r2,0(r2)
  8160b0:	1005003a 	cmpeq	r2,r2,zero
  8160b4:	1000061e 	bne	r2,zero,8160d0 <alt_get_errno+0x3c>
  8160b8:	008020b4 	movhi	r2,130
  8160bc:	1093f404 	addi	r2,r2,20432
  8160c0:	10800017 	ldw	r2,0(r2)
  8160c4:	103ee83a 	callr	r2
  8160c8:	e0bfff15 	stw	r2,-4(fp)
  8160cc:	00000306 	br	8160dc <alt_get_errno+0x48>
  8160d0:	008020b4 	movhi	r2,130
  8160d4:	109afc04 	addi	r2,r2,27632
  8160d8:	e0bfff15 	stw	r2,-4(fp)
  8160dc:	e0bfff17 	ldw	r2,-4(fp)
}
  8160e0:	e037883a 	mov	sp,fp
  8160e4:	dfc00117 	ldw	ra,4(sp)
  8160e8:	df000017 	ldw	fp,0(sp)
  8160ec:	dec00204 	addi	sp,sp,8
  8160f0:	f800283a 	ret

008160f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8160f4:	defffb04 	addi	sp,sp,-20
  8160f8:	dfc00415 	stw	ra,16(sp)
  8160fc:	df000315 	stw	fp,12(sp)
  816100:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  816104:	0009883a 	mov	r4,zero
  816108:	081eb840 	call	81eb84 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  81610c:	08171e00 	call	8171e0 <OSInit>
  816110:	01000044 	movi	r4,1
  816114:	081c0a40 	call	81c0a4 <OSSemCreate>
  816118:	1007883a 	mov	r3,r2
  81611c:	008020b4 	movhi	r2,130
  816120:	109b0504 	addi	r2,r2,27668
  816124:	10c00015 	stw	r3,0(r2)
  816128:	01000044 	movi	r4,1
  81612c:	081c0a40 	call	81c0a4 <OSSemCreate>
  816130:	1007883a 	mov	r3,r2
  816134:	008020b4 	movhi	r2,130
  816138:	109b0704 	addi	r2,r2,27676
  81613c:	10c00015 	stw	r3,0(r2)
  816140:	008020b4 	movhi	r2,130
  816144:	109b0004 	addi	r2,r2,27648
  816148:	e0bffd15 	stw	r2,-12(fp)
  81614c:	00800044 	movi	r2,1
  816150:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  816154:	e13ffe0b 	ldhu	r4,-8(fp)
  816158:	081c0a40 	call	81c0a4 <OSSemCreate>
  81615c:	1007883a 	mov	r3,r2
  816160:	e0bffd17 	ldw	r2,-12(fp)
  816164:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  816168:	081ebb80 	call	81ebb8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  81616c:	010020b4 	movhi	r4,130
  816170:	210cd404 	addi	r4,r4,13136
  816174:	014020b4 	movhi	r5,130
  816178:	294cd404 	addi	r5,r5,13136
  81617c:	018020b4 	movhi	r6,130
  816180:	318cd404 	addi	r6,r6,13136
  816184:	08214900 	call	821490 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  816188:	08212400 	call	821240 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  81618c:	010020b4 	movhi	r4,130
  816190:	2104a904 	addi	r4,r4,4772
  816194:	08222e00 	call	8222e0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  816198:	d1271817 	ldw	r4,-25504(gp)
  81619c:	d1671917 	ldw	r5,-25500(gp)
  8161a0:	d1a71a17 	ldw	r6,-25496(gp)
  8161a4:	08001ec0 	call	8001ec <main>
  8161a8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8161ac:	01000044 	movi	r4,1
  8161b0:	0815adc0 	call	815adc <close>
  exit (result);
  8161b4:	e13fff17 	ldw	r4,-4(fp)
  8161b8:	08222f40 	call	8222f4 <exit>

008161bc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8161bc:	defff704 	addi	sp,sp,-36
  8161c0:	dfc00815 	stw	ra,32(sp)
  8161c4:	df000715 	stw	fp,28(sp)
  8161c8:	df000704 	addi	fp,sp,28
  8161cc:	e13ffb15 	stw	r4,-20(fp)
  8161d0:	e17ffc15 	stw	r5,-16(fp)
  8161d4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8161d8:	e0bffb17 	ldw	r2,-20(fp)
  8161dc:	1004803a 	cmplt	r2,r2,zero
  8161e0:	1000081e 	bne	r2,zero,816204 <read+0x48>
  8161e4:	e0bffb17 	ldw	r2,-20(fp)
  8161e8:	10800324 	muli	r2,r2,12
  8161ec:	1007883a 	mov	r3,r2
  8161f0:	008020b4 	movhi	r2,130
  8161f4:	108f4b04 	addi	r2,r2,15660
  8161f8:	1887883a 	add	r3,r3,r2
  8161fc:	e0ffff15 	stw	r3,-4(fp)
  816200:	00000106 	br	816208 <read+0x4c>
  816204:	e03fff15 	stw	zero,-4(fp)
  816208:	e0bfff17 	ldw	r2,-4(fp)
  81620c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  816210:	e0bffa17 	ldw	r2,-24(fp)
  816214:	1005003a 	cmpeq	r2,r2,zero
  816218:	1000241e 	bne	r2,zero,8162ac <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  81621c:	e0bffa17 	ldw	r2,-24(fp)
  816220:	10800217 	ldw	r2,8(r2)
  816224:	108000cc 	andi	r2,r2,3
  816228:	10800060 	cmpeqi	r2,r2,1
  81622c:	10001a1e 	bne	r2,zero,816298 <read+0xdc>
  816230:	e0bffa17 	ldw	r2,-24(fp)
  816234:	10800017 	ldw	r2,0(r2)
  816238:	10800517 	ldw	r2,20(r2)
  81623c:	1005003a 	cmpeq	r2,r2,zero
  816240:	1000151e 	bne	r2,zero,816298 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  816244:	e0bffa17 	ldw	r2,-24(fp)
  816248:	10800017 	ldw	r2,0(r2)
  81624c:	10800517 	ldw	r2,20(r2)
  816250:	e17ffc17 	ldw	r5,-16(fp)
  816254:	e1bffd17 	ldw	r6,-12(fp)
  816258:	e13ffa17 	ldw	r4,-24(fp)
  81625c:	103ee83a 	callr	r2
  816260:	e0bff915 	stw	r2,-28(fp)
  816264:	e0bff917 	ldw	r2,-28(fp)
  816268:	1004403a 	cmpge	r2,r2,zero
  81626c:	1000071e 	bne	r2,zero,81628c <read+0xd0>
        {
          ALT_ERRNO = -rval;
  816270:	08162dc0 	call	8162dc <alt_get_errno>
  816274:	e0fff917 	ldw	r3,-28(fp)
  816278:	00c7c83a 	sub	r3,zero,r3
  81627c:	10c00015 	stw	r3,0(r2)
          return -1;
  816280:	00bfffc4 	movi	r2,-1
  816284:	e0bffe15 	stw	r2,-8(fp)
  816288:	00000e06 	br	8162c4 <read+0x108>
        }
        return rval;
  81628c:	e0bff917 	ldw	r2,-28(fp)
  816290:	e0bffe15 	stw	r2,-8(fp)
  816294:	00000b06 	br	8162c4 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  816298:	08162dc0 	call	8162dc <alt_get_errno>
  81629c:	1007883a 	mov	r3,r2
  8162a0:	00800344 	movi	r2,13
  8162a4:	18800015 	stw	r2,0(r3)
  8162a8:	00000406 	br	8162bc <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  8162ac:	08162dc0 	call	8162dc <alt_get_errno>
  8162b0:	1007883a 	mov	r3,r2
  8162b4:	00801444 	movi	r2,81
  8162b8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8162bc:	00bfffc4 	movi	r2,-1
  8162c0:	e0bffe15 	stw	r2,-8(fp)
  8162c4:	e0bffe17 	ldw	r2,-8(fp)
}
  8162c8:	e037883a 	mov	sp,fp
  8162cc:	dfc00117 	ldw	ra,4(sp)
  8162d0:	df000017 	ldw	fp,0(sp)
  8162d4:	dec00204 	addi	sp,sp,8
  8162d8:	f800283a 	ret

008162dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8162dc:	defffd04 	addi	sp,sp,-12
  8162e0:	dfc00215 	stw	ra,8(sp)
  8162e4:	df000115 	stw	fp,4(sp)
  8162e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8162ec:	008020b4 	movhi	r2,130
  8162f0:	1093f404 	addi	r2,r2,20432
  8162f4:	10800017 	ldw	r2,0(r2)
  8162f8:	1005003a 	cmpeq	r2,r2,zero
  8162fc:	1000061e 	bne	r2,zero,816318 <alt_get_errno+0x3c>
  816300:	008020b4 	movhi	r2,130
  816304:	1093f404 	addi	r2,r2,20432
  816308:	10800017 	ldw	r2,0(r2)
  81630c:	103ee83a 	callr	r2
  816310:	e0bfff15 	stw	r2,-4(fp)
  816314:	00000306 	br	816324 <alt_get_errno+0x48>
  816318:	008020b4 	movhi	r2,130
  81631c:	109afc04 	addi	r2,r2,27632
  816320:	e0bfff15 	stw	r2,-4(fp)
  816324:	e0bfff17 	ldw	r2,-4(fp)
}
  816328:	e037883a 	mov	sp,fp
  81632c:	dfc00117 	ldw	ra,4(sp)
  816330:	df000017 	ldw	fp,0(sp)
  816334:	dec00204 	addi	sp,sp,8
  816338:	f800283a 	ret

0081633c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  81633c:	defffe04 	addi	sp,sp,-8
  816340:	df000115 	stw	fp,4(sp)
  816344:	df000104 	addi	fp,sp,4
  816348:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  81634c:	e0bfff17 	ldw	r2,-4(fp)
  816350:	108000d0 	cmplti	r2,r2,3
  816354:	10000d1e 	bne	r2,zero,81638c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  816358:	e0bfff17 	ldw	r2,-4(fp)
  81635c:	00c020b4 	movhi	r3,130
  816360:	18cf4b04 	addi	r3,r3,15660
  816364:	10800324 	muli	r2,r2,12
  816368:	10c5883a 	add	r2,r2,r3
  81636c:	10800204 	addi	r2,r2,8
  816370:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  816374:	e0bfff17 	ldw	r2,-4(fp)
  816378:	00c020b4 	movhi	r3,130
  81637c:	18cf4b04 	addi	r3,r3,15660
  816380:	10800324 	muli	r2,r2,12
  816384:	10c5883a 	add	r2,r2,r3
  816388:	10000015 	stw	zero,0(r2)
  }
}
  81638c:	e037883a 	mov	sp,fp
  816390:	df000017 	ldw	fp,0(sp)
  816394:	dec00104 	addi	sp,sp,4
  816398:	f800283a 	ret

0081639c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  81639c:	defff804 	addi	sp,sp,-32
  8163a0:	df000715 	stw	fp,28(sp)
  8163a4:	df000704 	addi	fp,sp,28
  8163a8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8163ac:	0005303a 	rdctl	r2,status
  8163b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8163b4:	e0fffb17 	ldw	r3,-20(fp)
  8163b8:	00bfff84 	movi	r2,-2
  8163bc:	1884703a 	and	r2,r3,r2
  8163c0:	1001703a 	wrctl	status,r2
  
  return context;
  8163c4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  8163c8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  8163cc:	d0a00c17 	ldw	r2,-32720(gp)
  8163d0:	10c000c4 	addi	r3,r2,3
  8163d4:	00bfff04 	movi	r2,-4
  8163d8:	1884703a 	and	r2,r3,r2
  8163dc:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  8163e0:	d0e00c17 	ldw	r3,-32720(gp)
  8163e4:	e0bffe17 	ldw	r2,-8(fp)
  8163e8:	1887883a 	add	r3,r3,r2
  8163ec:	00804034 	movhi	r2,256
  8163f0:	10800004 	addi	r2,r2,0
  8163f4:	10c0072e 	bgeu	r2,r3,816414 <sbrk+0x78>
  8163f8:	e0bffd17 	ldw	r2,-12(fp)
  8163fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816400:	e0bffa17 	ldw	r2,-24(fp)
  816404:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  816408:	00bfffc4 	movi	r2,-1
  81640c:	e0bfff15 	stw	r2,-4(fp)
  816410:	00000c06 	br	816444 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  816414:	d0a00c17 	ldw	r2,-32720(gp)
  816418:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  81641c:	d0e00c17 	ldw	r3,-32720(gp)
  816420:	e0bffe17 	ldw	r2,-8(fp)
  816424:	1885883a 	add	r2,r3,r2
  816428:	d0a00c15 	stw	r2,-32720(gp)
  81642c:	e0bffd17 	ldw	r2,-12(fp)
  816430:	e0bff915 	stw	r2,-28(fp)
  816434:	e0bff917 	ldw	r2,-28(fp)
  816438:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  81643c:	e0bffc17 	ldw	r2,-16(fp)
  816440:	e0bfff15 	stw	r2,-4(fp)
  816444:	e0bfff17 	ldw	r2,-4(fp)
} 
  816448:	e037883a 	mov	sp,fp
  81644c:	df000017 	ldw	fp,0(sp)
  816450:	dec00104 	addi	sp,sp,4
  816454:	f800283a 	ret

00816458 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  816458:	defff704 	addi	sp,sp,-36
  81645c:	dfc00815 	stw	ra,32(sp)
  816460:	df000715 	stw	fp,28(sp)
  816464:	df000704 	addi	fp,sp,28
  816468:	e13ffb15 	stw	r4,-20(fp)
  81646c:	e17ffc15 	stw	r5,-16(fp)
  816470:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  816474:	e0bffb17 	ldw	r2,-20(fp)
  816478:	1004803a 	cmplt	r2,r2,zero
  81647c:	1000081e 	bne	r2,zero,8164a0 <write+0x48>
  816480:	e0bffb17 	ldw	r2,-20(fp)
  816484:	10800324 	muli	r2,r2,12
  816488:	1007883a 	mov	r3,r2
  81648c:	008020b4 	movhi	r2,130
  816490:	108f4b04 	addi	r2,r2,15660
  816494:	1887883a 	add	r3,r3,r2
  816498:	e0ffff15 	stw	r3,-4(fp)
  81649c:	00000106 	br	8164a4 <write+0x4c>
  8164a0:	e03fff15 	stw	zero,-4(fp)
  8164a4:	e0bfff17 	ldw	r2,-4(fp)
  8164a8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  8164ac:	e0bffa17 	ldw	r2,-24(fp)
  8164b0:	1005003a 	cmpeq	r2,r2,zero
  8164b4:	1000241e 	bne	r2,zero,816548 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  8164b8:	e0bffa17 	ldw	r2,-24(fp)
  8164bc:	10800217 	ldw	r2,8(r2)
  8164c0:	108000cc 	andi	r2,r2,3
  8164c4:	1005003a 	cmpeq	r2,r2,zero
  8164c8:	10001a1e 	bne	r2,zero,816534 <write+0xdc>
  8164cc:	e0bffa17 	ldw	r2,-24(fp)
  8164d0:	10800017 	ldw	r2,0(r2)
  8164d4:	10800617 	ldw	r2,24(r2)
  8164d8:	1005003a 	cmpeq	r2,r2,zero
  8164dc:	1000151e 	bne	r2,zero,816534 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  8164e0:	e0bffa17 	ldw	r2,-24(fp)
  8164e4:	10800017 	ldw	r2,0(r2)
  8164e8:	10800617 	ldw	r2,24(r2)
  8164ec:	e17ffc17 	ldw	r5,-16(fp)
  8164f0:	e1bffd17 	ldw	r6,-12(fp)
  8164f4:	e13ffa17 	ldw	r4,-24(fp)
  8164f8:	103ee83a 	callr	r2
  8164fc:	e0bff915 	stw	r2,-28(fp)
  816500:	e0bff917 	ldw	r2,-28(fp)
  816504:	1004403a 	cmpge	r2,r2,zero
  816508:	1000071e 	bne	r2,zero,816528 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  81650c:	08165780 	call	816578 <alt_get_errno>
  816510:	e0fff917 	ldw	r3,-28(fp)
  816514:	00c7c83a 	sub	r3,zero,r3
  816518:	10c00015 	stw	r3,0(r2)
        return -1;
  81651c:	00bfffc4 	movi	r2,-1
  816520:	e0bffe15 	stw	r2,-8(fp)
  816524:	00000e06 	br	816560 <write+0x108>
      }
      return rval;
  816528:	e0bff917 	ldw	r2,-28(fp)
  81652c:	e0bffe15 	stw	r2,-8(fp)
  816530:	00000b06 	br	816560 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  816534:	08165780 	call	816578 <alt_get_errno>
  816538:	1007883a 	mov	r3,r2
  81653c:	00800344 	movi	r2,13
  816540:	18800015 	stw	r2,0(r3)
  816544:	00000406 	br	816558 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  816548:	08165780 	call	816578 <alt_get_errno>
  81654c:	1007883a 	mov	r3,r2
  816550:	00801444 	movi	r2,81
  816554:	18800015 	stw	r2,0(r3)
  }
  return -1;
  816558:	00bfffc4 	movi	r2,-1
  81655c:	e0bffe15 	stw	r2,-8(fp)
  816560:	e0bffe17 	ldw	r2,-8(fp)
}
  816564:	e037883a 	mov	sp,fp
  816568:	dfc00117 	ldw	ra,4(sp)
  81656c:	df000017 	ldw	fp,0(sp)
  816570:	dec00204 	addi	sp,sp,8
  816574:	f800283a 	ret

00816578 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  816578:	defffd04 	addi	sp,sp,-12
  81657c:	dfc00215 	stw	ra,8(sp)
  816580:	df000115 	stw	fp,4(sp)
  816584:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  816588:	008020b4 	movhi	r2,130
  81658c:	1093f404 	addi	r2,r2,20432
  816590:	10800017 	ldw	r2,0(r2)
  816594:	1005003a 	cmpeq	r2,r2,zero
  816598:	1000061e 	bne	r2,zero,8165b4 <alt_get_errno+0x3c>
  81659c:	008020b4 	movhi	r2,130
  8165a0:	1093f404 	addi	r2,r2,20432
  8165a4:	10800017 	ldw	r2,0(r2)
  8165a8:	103ee83a 	callr	r2
  8165ac:	e0bfff15 	stw	r2,-4(fp)
  8165b0:	00000306 	br	8165c0 <alt_get_errno+0x48>
  8165b4:	008020b4 	movhi	r2,130
  8165b8:	109afc04 	addi	r2,r2,27632
  8165bc:	e0bfff15 	stw	r2,-4(fp)
  8165c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8165c4:	e037883a 	mov	sp,fp
  8165c8:	dfc00117 	ldw	ra,4(sp)
  8165cc:	df000017 	ldw	fp,0(sp)
  8165d0:	dec00204 	addi	sp,sp,8
  8165d4:	f800283a 	ret

008165d8 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  8165d8:	deffdf04 	addi	sp,sp,-132
  8165dc:	dfc02015 	stw	ra,128(sp)
  8165e0:	df001f15 	stw	fp,124(sp)
  8165e4:	df001f04 	addi	fp,sp,124
  8165e8:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  8165ec:	e17fe204 	addi	r5,fp,-120
  8165f0:	01003fc4 	movi	r4,255
  8165f4:	081e42c0 	call	81e42c <OSTaskQuery>
  8165f8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  8165fc:	e0bffe83 	ldbu	r2,-6(fp)
  816600:	10803fcc 	andi	r2,r2,255
  816604:	1004c03a 	cmpne	r2,r2,zero
  816608:	1000191e 	bne	r2,zero,816670 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
  81660c:	e0bfee83 	ldbu	r2,-70(fp)
  816610:	10803fcc 	andi	r2,r2,255
  816614:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  816618:	d1271c17 	ldw	r4,-25488(gp)
  81661c:	e17ffd04 	addi	r5,fp,-12
  816620:	081c9780 	call	81c978 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  816624:	e0bffe43 	ldbu	r2,-7(fp)
  816628:	10803fcc 	andi	r2,r2,255
  81662c:	1005003a 	cmpeq	r2,r2,zero
  816630:	1000071e 	bne	r2,zero,816650 <__env_lock+0x78>
  816634:	d0e00d17 	ldw	r3,-32716(gp)
  816638:	e0bfe117 	ldw	r2,-124(fp)
  81663c:	10c0041e 	bne	r2,r3,816650 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
  816640:	d0a71b17 	ldw	r2,-25492(gp)
  816644:	10800044 	addi	r2,r2,1
  816648:	d0a71b15 	stw	r2,-25492(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
  81664c:	00000806 	br	816670 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  816650:	d1271c17 	ldw	r4,-25488(gp)
  816654:	e1bffe84 	addi	r6,fp,-6
  816658:	000b883a 	mov	r5,zero
  81665c:	081c4580 	call	81c458 <OSSemPend>
    locks  = 1;
  816660:	00800044 	movi	r2,1
  816664:	d0a71b15 	stw	r2,-25492(gp)
    lockid = id;
  816668:	e0bfe117 	ldw	r2,-124(fp)
  81666c:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  816670:	e037883a 	mov	sp,fp
  816674:	dfc00117 	ldw	ra,4(sp)
  816678:	df000017 	ldw	fp,0(sp)
  81667c:	dec00204 	addi	sp,sp,8
  816680:	f800283a 	ret

00816684 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  816684:	defffd04 	addi	sp,sp,-12
  816688:	dfc00215 	stw	ra,8(sp)
  81668c:	df000115 	stw	fp,4(sp)
  816690:	df000104 	addi	fp,sp,4
  816694:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  816698:	d0a71b17 	ldw	r2,-25492(gp)
  81669c:	1005003a 	cmpeq	r2,r2,zero
  8166a0:	10000a1e 	bne	r2,zero,8166cc <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  8166a4:	d0a71b17 	ldw	r2,-25492(gp)
  8166a8:	10bfffc4 	addi	r2,r2,-1
  8166ac:	d0a71b15 	stw	r2,-25492(gp)
  8166b0:	d0a71b17 	ldw	r2,-25492(gp)
  8166b4:	1004c03a 	cmpne	r2,r2,zero
  8166b8:	1000041e 	bne	r2,zero,8166cc <__env_unlock+0x48>
  {
    lockid = -1;
  8166bc:	00bfffc4 	movi	r2,-1
  8166c0:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
  8166c4:	d1271c17 	ldw	r4,-25488(gp)
  8166c8:	081c8500 	call	81c850 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  8166cc:	e037883a 	mov	sp,fp
  8166d0:	dfc00117 	ldw	ra,4(sp)
  8166d4:	df000017 	ldw	fp,0(sp)
  8166d8:	dec00204 	addi	sp,sp,8
  8166dc:	f800283a 	ret

008166e0 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  8166e0:	deffdb04 	addi	sp,sp,-148
  8166e4:	dfc02415 	stw	ra,144(sp)
  8166e8:	df002315 	stw	fp,140(sp)
  8166ec:	df002304 	addi	fp,sp,140
  8166f0:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8166f4:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  8166f8:	008020b4 	movhi	r2,130
  8166fc:	109b0844 	addi	r2,r2,27681
  816700:	10800003 	ldbu	r2,0(r2)
  816704:	10803fcc 	andi	r2,r2,255
  816708:	10800058 	cmpnei	r2,r2,1
  81670c:	1000311e 	bne	r2,zero,8167d4 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  816710:	e17fe204 	addi	r5,fp,-120
  816714:	01003fc4 	movi	r4,255
  816718:	081e42c0 	call	81e42c <OSTaskQuery>
  81671c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  816720:	e0bffe83 	ldbu	r2,-6(fp)
  816724:	10803fcc 	andi	r2,r2,255
  816728:	1004c03a 	cmpne	r2,r2,zero
  81672c:	1000291e 	bne	r2,zero,8167d4 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
  816730:	e0bfee83 	ldbu	r2,-70(fp)
  816734:	10803fcc 	andi	r2,r2,255
  816738:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  81673c:	d1271e17 	ldw	r4,-25480(gp)
  816740:	e17ffd04 	addi	r5,fp,-12
  816744:	081c9780 	call	81c978 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816748:	0005303a 	rdctl	r2,status
  81674c:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816750:	e0ffdf17 	ldw	r3,-132(fp)
  816754:	00bfff84 	movi	r2,-2
  816758:	1884703a 	and	r2,r3,r2
  81675c:	1001703a 	wrctl	status,r2
  
  return context;
  816760:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
  816764:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
  816768:	e0bffd0b 	ldhu	r2,-12(fp)
  81676c:	10bfffcc 	andi	r2,r2,65535
  816770:	1004c03a 	cmpne	r2,r2,zero
  816774:	10000b1e 	bne	r2,zero,8167a4 <__malloc_lock+0xc4>
  816778:	d0e00e17 	ldw	r3,-32712(gp)
  81677c:	e0bfe117 	ldw	r2,-124(fp)
  816780:	10c0081e 	bne	r2,r3,8167a4 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
  816784:	d0a71d17 	ldw	r2,-25484(gp)
  816788:	10800044 	addi	r2,r2,1
  81678c:	d0a71d15 	stw	r2,-25484(gp)
  816790:	e0bfe017 	ldw	r2,-128(fp)
  816794:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816798:	e0bfde17 	ldw	r2,-136(fp)
  81679c:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
  8167a0:	00000c06 	br	8167d4 <__malloc_lock+0xf4>
  8167a4:	e0bfe017 	ldw	r2,-128(fp)
  8167a8:	e0bfdd15 	stw	r2,-140(fp)
  8167ac:	e0bfdd17 	ldw	r2,-140(fp)
  8167b0:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  8167b4:	d1271e17 	ldw	r4,-25480(gp)
  8167b8:	e1bffe84 	addi	r6,fp,-6
  8167bc:	000b883a 	mov	r5,zero
  8167c0:	081c4580 	call	81c458 <OSSemPend>
    locks  = 1;
  8167c4:	00800044 	movi	r2,1
  8167c8:	d0a71d15 	stw	r2,-25484(gp)
    lockid = id;
  8167cc:	e0bfe117 	ldw	r2,-124(fp)
  8167d0:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  8167d4:	e037883a 	mov	sp,fp
  8167d8:	dfc00117 	ldw	ra,4(sp)
  8167dc:	df000017 	ldw	fp,0(sp)
  8167e0:	dec00204 	addi	sp,sp,8
  8167e4:	f800283a 	ret

008167e8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  8167e8:	defff804 	addi	sp,sp,-32
  8167ec:	dfc00715 	stw	ra,28(sp)
  8167f0:	df000615 	stw	fp,24(sp)
  8167f4:	df000604 	addi	fp,sp,24
  8167f8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8167fc:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
  816800:	008020b4 	movhi	r2,130
  816804:	109b0844 	addi	r2,r2,27681
  816808:	10800003 	ldbu	r2,0(r2)
  81680c:	10803fcc 	andi	r2,r2,255
  816810:	10800058 	cmpnei	r2,r2,1
  816814:	1000231e 	bne	r2,zero,8168a4 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816818:	0005303a 	rdctl	r2,status
  81681c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816820:	e0fffd17 	ldw	r3,-12(fp)
  816824:	00bfff84 	movi	r2,-2
  816828:	1884703a 	and	r2,r3,r2
  81682c:	1001703a 	wrctl	status,r2
  
  return context;
  816830:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
  816834:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
  816838:	d0a71d17 	ldw	r2,-25484(gp)
  81683c:	1004c03a 	cmpne	r2,r2,zero
  816840:	1000051e 	bne	r2,zero,816858 <__malloc_unlock+0x70>
  816844:	e0bffe17 	ldw	r2,-8(fp)
  816848:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81684c:	e0bffc17 	ldw	r2,-16(fp)
  816850:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  816854:	00001306 	br	8168a4 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  816858:	d0a71d17 	ldw	r2,-25484(gp)
  81685c:	10bfffc4 	addi	r2,r2,-1
  816860:	d0a71d15 	stw	r2,-25484(gp)
  816864:	d0a71d17 	ldw	r2,-25484(gp)
  816868:	1004c03a 	cmpne	r2,r2,zero
  81686c:	1000091e 	bne	r2,zero,816894 <__malloc_unlock+0xac>
  {
    lockid = -1;
  816870:	00bfffc4 	movi	r2,-1
  816874:	d0a00e15 	stw	r2,-32712(gp)
  816878:	e0bffe17 	ldw	r2,-8(fp)
  81687c:	e0bffb15 	stw	r2,-20(fp)
  816880:	e0bffb17 	ldw	r2,-20(fp)
  816884:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  816888:	d1271e17 	ldw	r4,-25480(gp)
  81688c:	081c8500 	call	81c850 <OSSemPost>
  816890:	00000406 	br	8168a4 <__malloc_unlock+0xbc>
  816894:	e0bffe17 	ldw	r2,-8(fp)
  816898:	e0bffa15 	stw	r2,-24(fp)
  81689c:	e0bffa17 	ldw	r2,-24(fp)
  8168a0:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  8168a4:	e037883a 	mov	sp,fp
  8168a8:	dfc00117 	ldw	ra,4(sp)
  8168ac:	df000017 	ldw	fp,0(sp)
  8168b0:	dec00204 	addi	sp,sp,8
  8168b4:	f800283a 	ret

008168b8 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  8168b8:	defff604 	addi	sp,sp,-40
  8168bc:	dfc00915 	stw	ra,36(sp)
  8168c0:	df000815 	stw	fp,32(sp)
  8168c4:	df000804 	addi	fp,sp,32
  8168c8:	e13ffc15 	stw	r4,-16(fp)
  8168cc:	e17ffd15 	stw	r5,-12(fp)
  8168d0:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8168d4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8168d8:	e0bffe17 	ldw	r2,-8(fp)
  8168dc:	1004c03a 	cmpne	r2,r2,zero
  8168e0:	1000021e 	bne	r2,zero,8168ec <OSEventNameGet+0x34>
        return (0);
  8168e4:	e03fff15 	stw	zero,-4(fp)
  8168e8:	00003906 	br	8169d0 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  8168ec:	e0bffc17 	ldw	r2,-16(fp)
  8168f0:	1004c03a 	cmpne	r2,r2,zero
  8168f4:	1000051e 	bne	r2,zero,81690c <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  8168f8:	e0fffe17 	ldw	r3,-8(fp)
  8168fc:	00800104 	movi	r2,4
  816900:	18800005 	stb	r2,0(r3)
        return (0);
  816904:	e03fff15 	stw	zero,-4(fp)
  816908:	00003106 	br	8169d0 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  81690c:	e0bffd17 	ldw	r2,-12(fp)
  816910:	1004c03a 	cmpne	r2,r2,zero
  816914:	1000051e 	bne	r2,zero,81692c <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  816918:	e0fffe17 	ldw	r3,-8(fp)
  81691c:	00800304 	movi	r2,12
  816920:	18800005 	stb	r2,0(r3)
        return (0);
  816924:	e03fff15 	stw	zero,-4(fp)
  816928:	00002906 	br	8169d0 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81692c:	d0a72d03 	ldbu	r2,-25420(gp)
  816930:	10803fcc 	andi	r2,r2,255
  816934:	1005003a 	cmpeq	r2,r2,zero
  816938:	1000051e 	bne	r2,zero,816950 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
  81693c:	e0fffe17 	ldw	r3,-8(fp)
  816940:	00800444 	movi	r2,17
  816944:	18800005 	stb	r2,0(r3)
        return (0);
  816948:	e03fff15 	stw	zero,-4(fp)
  81694c:	00002006 	br	8169d0 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
  816950:	e0bffc17 	ldw	r2,-16(fp)
  816954:	10800003 	ldbu	r2,0(r2)
  816958:	10803fcc 	andi	r2,r2,255
  81695c:	10bfffc4 	addi	r2,r2,-1
  816960:	10800128 	cmpgeui	r2,r2,4
  816964:	1000161e 	bne	r2,zero,8169c0 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816968:	0005303a 	rdctl	r2,status
  81696c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816970:	e0fff917 	ldw	r3,-28(fp)
  816974:	00bfff84 	movi	r2,-2
  816978:	1884703a 	and	r2,r3,r2
  81697c:	1001703a 	wrctl	status,r2
  
  return context;
  816980:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  816984:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  816988:	e0bffc17 	ldw	r2,-16(fp)
  81698c:	11400384 	addi	r5,r2,14
  816990:	e13ffd17 	ldw	r4,-12(fp)
  816994:	081843c0 	call	81843c <OS_StrCopy>
  816998:	e0bffb05 	stb	r2,-20(fp)
  81699c:	e0bffa17 	ldw	r2,-24(fp)
  8169a0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8169a4:	e0bff817 	ldw	r2,-32(fp)
  8169a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8169ac:	e0bffe17 	ldw	r2,-8(fp)
  8169b0:	10000005 	stb	zero,0(r2)
    return (len);
  8169b4:	e0bffb03 	ldbu	r2,-20(fp)
  8169b8:	e0bfff15 	stw	r2,-4(fp)
  8169bc:	00000406 	br	8169d0 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  8169c0:	e0fffe17 	ldw	r3,-8(fp)
  8169c4:	00800044 	movi	r2,1
  8169c8:	18800005 	stb	r2,0(r3)
             return (0);
  8169cc:	e03fff15 	stw	zero,-4(fp)
  8169d0:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
  8169d4:	e037883a 	mov	sp,fp
  8169d8:	dfc00117 	ldw	ra,4(sp)
  8169dc:	df000017 	ldw	fp,0(sp)
  8169e0:	dec00204 	addi	sp,sp,8
  8169e4:	f800283a 	ret

008169e8 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  8169e8:	defff604 	addi	sp,sp,-40
  8169ec:	dfc00915 	stw	ra,36(sp)
  8169f0:	df000815 	stw	fp,32(sp)
  8169f4:	df000804 	addi	fp,sp,32
  8169f8:	e13ffd15 	stw	r4,-12(fp)
  8169fc:	e17ffe15 	stw	r5,-8(fp)
  816a00:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  816a04:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  816a08:	e0bfff17 	ldw	r2,-4(fp)
  816a0c:	1005003a 	cmpeq	r2,r2,zero
  816a10:	1000411e 	bne	r2,zero,816b18 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  816a14:	e0bffd17 	ldw	r2,-12(fp)
  816a18:	1004c03a 	cmpne	r2,r2,zero
  816a1c:	1000041e 	bne	r2,zero,816a30 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  816a20:	e0ffff17 	ldw	r3,-4(fp)
  816a24:	00800104 	movi	r2,4
  816a28:	18800005 	stb	r2,0(r3)
        return;
  816a2c:	00003a06 	br	816b18 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  816a30:	e0bffe17 	ldw	r2,-8(fp)
  816a34:	1004c03a 	cmpne	r2,r2,zero
  816a38:	1000041e 	bne	r2,zero,816a4c <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  816a3c:	e0ffff17 	ldw	r3,-4(fp)
  816a40:	00800304 	movi	r2,12
  816a44:	18800005 	stb	r2,0(r3)
        return;
  816a48:	00003306 	br	816b18 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  816a4c:	d0a72d03 	ldbu	r2,-25420(gp)
  816a50:	10803fcc 	andi	r2,r2,255
  816a54:	1005003a 	cmpeq	r2,r2,zero
  816a58:	1000041e 	bne	r2,zero,816a6c <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
  816a5c:	e0ffff17 	ldw	r3,-4(fp)
  816a60:	00800484 	movi	r2,18
  816a64:	18800005 	stb	r2,0(r3)
        return;
  816a68:	00002b06 	br	816b18 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
  816a6c:	e0bffd17 	ldw	r2,-12(fp)
  816a70:	10800003 	ldbu	r2,0(r2)
  816a74:	10803fcc 	andi	r2,r2,255
  816a78:	10bfffc4 	addi	r2,r2,-1
  816a7c:	10800128 	cmpgeui	r2,r2,4
  816a80:	10000f1e 	bne	r2,zero,816ac0 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816a84:	0005303a 	rdctl	r2,status
  816a88:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816a8c:	e0fffa17 	ldw	r3,-24(fp)
  816a90:	00bfff84 	movi	r2,-2
  816a94:	1884703a 	and	r2,r3,r2
  816a98:	1001703a 	wrctl	status,r2
  
  return context;
  816a9c:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  816aa0:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  816aa4:	e13ffe17 	ldw	r4,-8(fp)
  816aa8:	08184bc0 	call	8184bc <OS_StrLen>
  816aac:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  816ab0:	e0bffc03 	ldbu	r2,-16(fp)
  816ab4:	10800828 	cmpgeui	r2,r2,32
  816ab8:	1000051e 	bne	r2,zero,816ad0 <OSEventNameSet+0xe8>
  816abc:	00000c06 	br	816af0 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  816ac0:	e0ffff17 	ldw	r3,-4(fp)
  816ac4:	00800044 	movi	r2,1
  816ac8:	18800005 	stb	r2,0(r3)
             return;
  816acc:	00001206 	br	816b18 <OSEventNameSet+0x130>
  816ad0:	e0bffb17 	ldw	r2,-20(fp)
  816ad4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816ad8:	e0bff917 	ldw	r2,-28(fp)
  816adc:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  816ae0:	e0ffff17 	ldw	r3,-4(fp)
  816ae4:	008002c4 	movi	r2,11
  816ae8:	18800005 	stb	r2,0(r3)
        return;
  816aec:	00000a06 	br	816b18 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  816af0:	e0bffd17 	ldw	r2,-12(fp)
  816af4:	11000384 	addi	r4,r2,14
  816af8:	e17ffe17 	ldw	r5,-8(fp)
  816afc:	081843c0 	call	81843c <OS_StrCopy>
  816b00:	e0bffb17 	ldw	r2,-20(fp)
  816b04:	e0bff815 	stw	r2,-32(fp)
  816b08:	e0bff817 	ldw	r2,-32(fp)
  816b0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  816b10:	e0bfff17 	ldw	r2,-4(fp)
  816b14:	10000005 	stb	zero,0(r2)
}
  816b18:	e037883a 	mov	sp,fp
  816b1c:	dfc00117 	ldw	ra,4(sp)
  816b20:	df000017 	ldw	fp,0(sp)
  816b24:	dec00204 	addi	sp,sp,8
  816b28:	f800283a 	ret

00816b2c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  816b2c:	deffe704 	addi	sp,sp,-100
  816b30:	dfc01815 	stw	ra,96(sp)
  816b34:	df001715 	stw	fp,92(sp)
  816b38:	df001704 	addi	fp,sp,92
  816b3c:	e13ff615 	stw	r4,-40(fp)
  816b40:	e17ff715 	stw	r5,-36(fp)
  816b44:	e1bff815 	stw	r6,-32(fp)
  816b48:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  816b4c:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  816b50:	e0800217 	ldw	r2,8(fp)
  816b54:	1004c03a 	cmpne	r2,r2,zero
  816b58:	1000021e 	bne	r2,zero,816b64 <OSEventPendMulti+0x38>
        return (0);
  816b5c:	e03fff15 	stw	zero,-4(fp)
  816b60:	00019906 	br	8171c8 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  816b64:	e0bff617 	ldw	r2,-40(fp)
  816b68:	1004c03a 	cmpne	r2,r2,zero
  816b6c:	1000051e 	bne	r2,zero,816b84 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
  816b70:	e0c00217 	ldw	r3,8(fp)
  816b74:	00800104 	movi	r2,4
  816b78:	18800005 	stb	r2,0(r3)
        return (0);
  816b7c:	e03fff15 	stw	zero,-4(fp)
  816b80:	00019106 	br	8171c8 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  816b84:	e0bff717 	ldw	r2,-36(fp)
  816b88:	1004c03a 	cmpne	r2,r2,zero
  816b8c:	1000051e 	bne	r2,zero,816ba4 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
  816b90:	e0c00217 	ldw	r3,8(fp)
  816b94:	00800104 	movi	r2,4
  816b98:	18800005 	stb	r2,0(r3)
        return (0);
  816b9c:	e03fff15 	stw	zero,-4(fp)
  816ba0:	00018906 	br	8171c8 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  816ba4:	e0bff817 	ldw	r2,-32(fp)
  816ba8:	1004c03a 	cmpne	r2,r2,zero
  816bac:	1000051e 	bne	r2,zero,816bc4 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
  816bb0:	e0c00217 	ldw	r3,8(fp)
  816bb4:	00800104 	movi	r2,4
  816bb8:	18800005 	stb	r2,0(r3)
        return (0);
  816bbc:	e03fff15 	stw	zero,-4(fp)
  816bc0:	00018106 	br	8171c8 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  816bc4:	e0bff717 	ldw	r2,-36(fp)
  816bc8:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  816bcc:	e0bff617 	ldw	r2,-40(fp)
  816bd0:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
  816bd4:	e0bff517 	ldw	r2,-44(fp)
  816bd8:	10800017 	ldw	r2,0(r2)
  816bdc:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
  816be0:	00001806 	br	816c44 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  816be4:	e0bff417 	ldw	r2,-48(fp)
  816be8:	10800003 	ldbu	r2,0(r2)
  816bec:	10803fcc 	andi	r2,r2,255
  816bf0:	e0bffe15 	stw	r2,-8(fp)
  816bf4:	e0fffe17 	ldw	r3,-8(fp)
  816bf8:	188000a0 	cmpeqi	r2,r3,2
  816bfc:	10000b1e 	bne	r2,zero,816c2c <OSEventPendMulti+0x100>
  816c00:	e0fffe17 	ldw	r3,-8(fp)
  816c04:	188000e0 	cmpeqi	r2,r3,3
  816c08:	1000081e 	bne	r2,zero,816c2c <OSEventPendMulti+0x100>
  816c0c:	e0fffe17 	ldw	r3,-8(fp)
  816c10:	18800060 	cmpeqi	r2,r3,1
  816c14:	1000051e 	bne	r2,zero,816c2c <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  816c18:	e0c00217 	ldw	r3,8(fp)
  816c1c:	00800044 	movi	r2,1
  816c20:	18800005 	stb	r2,0(r3)
                 return (0);
  816c24:	e03fff15 	stw	zero,-4(fp)
  816c28:	00016706 	br	8171c8 <OSEventPendMulti+0x69c>
        }
        pevents++;
  816c2c:	e0bff517 	ldw	r2,-44(fp)
  816c30:	10800104 	addi	r2,r2,4
  816c34:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  816c38:	e0bff517 	ldw	r2,-44(fp)
  816c3c:	10800017 	ldw	r2,0(r2)
  816c40:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  816c44:	e0bff417 	ldw	r2,-48(fp)
  816c48:	1004c03a 	cmpne	r2,r2,zero
  816c4c:	103fe51e 	bne	r2,zero,816be4 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  816c50:	d0a72d03 	ldbu	r2,-25420(gp)
  816c54:	10803fcc 	andi	r2,r2,255
  816c58:	1005003a 	cmpeq	r2,r2,zero
  816c5c:	1000051e 	bne	r2,zero,816c74 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  816c60:	e0c00217 	ldw	r3,8(fp)
  816c64:	00800084 	movi	r2,2
  816c68:	18800005 	stb	r2,0(r3)
        return (0);
  816c6c:	e03fff15 	stw	zero,-4(fp)
  816c70:	00015506 	br	8171c8 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  816c74:	d0a71f03 	ldbu	r2,-25476(gp)
  816c78:	10803fcc 	andi	r2,r2,255
  816c7c:	1005003a 	cmpeq	r2,r2,zero
  816c80:	1000051e 	bne	r2,zero,816c98 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  816c84:	e0c00217 	ldw	r3,8(fp)
  816c88:	00800344 	movi	r2,13
  816c8c:	18800005 	stb	r2,0(r3)
        return (0);
  816c90:	e03fff15 	stw	zero,-4(fp)
  816c94:	00014c06 	br	8171c8 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816c98:	0005303a 	rdctl	r2,status
  816c9c:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816ca0:	e0ffef17 	ldw	r3,-68(fp)
  816ca4:	00bfff84 	movi	r2,-2
  816ca8:	1884703a 	and	r2,r3,r2
  816cac:	1001703a 	wrctl	status,r2
  
  return context;
  816cb0:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  816cb4:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
  816cb8:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
  816cbc:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  816cc0:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
  816cc4:	e0bff617 	ldw	r2,-40(fp)
  816cc8:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
  816ccc:	e0bff517 	ldw	r2,-44(fp)
  816cd0:	10800017 	ldw	r2,0(r2)
  816cd4:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  816cd8:	00008f06 	br	816f18 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
  816cdc:	e0bff417 	ldw	r2,-48(fp)
  816ce0:	10800003 	ldbu	r2,0(r2)
  816ce4:	10803fcc 	andi	r2,r2,255
  816ce8:	e0bffd15 	stw	r2,-12(fp)
  816cec:	e0fffd17 	ldw	r3,-12(fp)
  816cf0:	188000a0 	cmpeqi	r2,r3,2
  816cf4:	1000441e 	bne	r2,zero,816e08 <OSEventPendMulti+0x2dc>
  816cf8:	e0fffd17 	ldw	r3,-12(fp)
  816cfc:	188000e0 	cmpeqi	r2,r3,3
  816d00:	1000041e 	bne	r2,zero,816d14 <OSEventPendMulti+0x1e8>
  816d04:	e0fffd17 	ldw	r3,-12(fp)
  816d08:	18800060 	cmpeqi	r2,r3,1
  816d0c:	1000211e 	bne	r2,zero,816d94 <OSEventPendMulti+0x268>
  816d10:	00006f06 	br	816ed0 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  816d14:	e0bff417 	ldw	r2,-48(fp)
  816d18:	1080020b 	ldhu	r2,8(r2)
  816d1c:	10bfffcc 	andi	r2,r2,65535
  816d20:	1005003a 	cmpeq	r2,r2,zero
  816d24:	1000171e 	bne	r2,zero,816d84 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  816d28:	e0bff417 	ldw	r2,-48(fp)
  816d2c:	1080020b 	ldhu	r2,8(r2)
  816d30:	10bfffc4 	addi	r2,r2,-1
  816d34:	1007883a 	mov	r3,r2
  816d38:	e0bff417 	ldw	r2,-48(fp)
  816d3c:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  816d40:	e0fff717 	ldw	r3,-36(fp)
  816d44:	e0bff417 	ldw	r2,-48(fp)
  816d48:	18800015 	stw	r2,0(r3)
  816d4c:	e0bff717 	ldw	r2,-36(fp)
  816d50:	10800104 	addi	r2,r2,4
  816d54:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
  816d58:	00800044 	movi	r2,1
  816d5c:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  816d60:	e0bff817 	ldw	r2,-32(fp)
  816d64:	10000015 	stw	zero,0(r2)
  816d68:	e0bff817 	ldw	r2,-32(fp)
  816d6c:	10800104 	addi	r2,r2,4
  816d70:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
  816d74:	e0bff18b 	ldhu	r2,-58(fp)
  816d78:	10800044 	addi	r2,r2,1
  816d7c:	e0bff18d 	sth	r2,-58(fp)
  816d80:	00005f06 	br	816f00 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  816d84:	e0bff103 	ldbu	r2,-60(fp)
  816d88:	10800054 	ori	r2,r2,1
  816d8c:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  816d90:	00005b06 	br	816f00 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  816d94:	e0bff417 	ldw	r2,-48(fp)
  816d98:	10800117 	ldw	r2,4(r2)
  816d9c:	1005003a 	cmpeq	r2,r2,zero
  816da0:	1000151e 	bne	r2,zero,816df8 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  816da4:	e0bff417 	ldw	r2,-48(fp)
  816da8:	10c00117 	ldw	r3,4(r2)
  816dac:	e0bff817 	ldw	r2,-32(fp)
  816db0:	10c00015 	stw	r3,0(r2)
  816db4:	e0bff817 	ldw	r2,-32(fp)
  816db8:	10800104 	addi	r2,r2,4
  816dbc:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
  816dc0:	e0bff417 	ldw	r2,-48(fp)
  816dc4:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  816dc8:	e0fff717 	ldw	r3,-36(fp)
  816dcc:	e0bff417 	ldw	r2,-48(fp)
  816dd0:	18800015 	stw	r2,0(r3)
  816dd4:	e0bff717 	ldw	r2,-36(fp)
  816dd8:	10800104 	addi	r2,r2,4
  816ddc:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
  816de0:	00800044 	movi	r2,1
  816de4:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  816de8:	e0bff18b 	ldhu	r2,-58(fp)
  816dec:	10800044 	addi	r2,r2,1
  816df0:	e0bff18d 	sth	r2,-58(fp)
  816df4:	00004206 	br	816f00 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  816df8:	e0bff103 	ldbu	r2,-60(fp)
  816dfc:	10800094 	ori	r2,r2,2
  816e00:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  816e04:	00003e06 	br	816f00 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  816e08:	e0bff417 	ldw	r2,-48(fp)
  816e0c:	10800117 	ldw	r2,4(r2)
  816e10:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  816e14:	e0bff317 	ldw	r2,-52(fp)
  816e18:	1080058b 	ldhu	r2,22(r2)
  816e1c:	10bfffcc 	andi	r2,r2,65535
  816e20:	1005003a 	cmpeq	r2,r2,zero
  816e24:	1000261e 	bne	r2,zero,816ec0 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  816e28:	e0bff317 	ldw	r2,-52(fp)
  816e2c:	11000417 	ldw	r4,16(r2)
  816e30:	20c00017 	ldw	r3,0(r4)
  816e34:	e0bff817 	ldw	r2,-32(fp)
  816e38:	10c00015 	stw	r3,0(r2)
  816e3c:	e0bff817 	ldw	r2,-32(fp)
  816e40:	10800104 	addi	r2,r2,4
  816e44:	e0bff815 	stw	r2,-32(fp)
  816e48:	20c00104 	addi	r3,r4,4
  816e4c:	e0bff317 	ldw	r2,-52(fp)
  816e50:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  816e54:	e0bff317 	ldw	r2,-52(fp)
  816e58:	10c00417 	ldw	r3,16(r2)
  816e5c:	e0bff317 	ldw	r2,-52(fp)
  816e60:	10800217 	ldw	r2,8(r2)
  816e64:	1880041e 	bne	r3,r2,816e78 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  816e68:	e0bff317 	ldw	r2,-52(fp)
  816e6c:	10c00117 	ldw	r3,4(r2)
  816e70:	e0bff317 	ldw	r2,-52(fp)
  816e74:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  816e78:	e0bff317 	ldw	r2,-52(fp)
  816e7c:	1080058b 	ldhu	r2,22(r2)
  816e80:	10bfffc4 	addi	r2,r2,-1
  816e84:	1007883a 	mov	r3,r2
  816e88:	e0bff317 	ldw	r2,-52(fp)
  816e8c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  816e90:	e0fff717 	ldw	r3,-36(fp)
  816e94:	e0bff417 	ldw	r2,-48(fp)
  816e98:	18800015 	stw	r2,0(r3)
  816e9c:	e0bff717 	ldw	r2,-36(fp)
  816ea0:	10800104 	addi	r2,r2,4
  816ea4:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
  816ea8:	00800044 	movi	r2,1
  816eac:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  816eb0:	e0bff18b 	ldhu	r2,-58(fp)
  816eb4:	10800044 	addi	r2,r2,1
  816eb8:	e0bff18d 	sth	r2,-58(fp)
  816ebc:	00001006 	br	816f00 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  816ec0:	e0bff103 	ldbu	r2,-60(fp)
  816ec4:	10800114 	ori	r2,r2,4
  816ec8:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  816ecc:	00000c06 	br	816f00 <OSEventPendMulti+0x3d4>
  816ed0:	e0bff017 	ldw	r2,-64(fp)
  816ed4:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816ed8:	e0bfee17 	ldw	r2,-72(fp)
  816edc:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  816ee0:	e0bff717 	ldw	r2,-36(fp)
  816ee4:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  816ee8:	e0c00217 	ldw	r3,8(fp)
  816eec:	00800044 	movi	r2,1
  816ef0:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
  816ef4:	e0bff18b 	ldhu	r2,-58(fp)
  816ef8:	e0bfff15 	stw	r2,-4(fp)
  816efc:	0000b206 	br	8171c8 <OSEventPendMulti+0x69c>
        }
        pevents++;
  816f00:	e0bff517 	ldw	r2,-44(fp)
  816f04:	10800104 	addi	r2,r2,4
  816f08:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  816f0c:	e0bff517 	ldw	r2,-44(fp)
  816f10:	10800017 	ldw	r2,0(r2)
  816f14:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  816f18:	e0bff417 	ldw	r2,-48(fp)
  816f1c:	1004c03a 	cmpne	r2,r2,zero
  816f20:	103f6e1e 	bne	r2,zero,816cdc <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  816f24:	e0bff203 	ldbu	r2,-56(fp)
  816f28:	10800058 	cmpnei	r2,r2,1
  816f2c:	10000b1e 	bne	r2,zero,816f5c <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  816f30:	e0bff717 	ldw	r2,-36(fp)
  816f34:	10000015 	stw	zero,0(r2)
  816f38:	e0bff017 	ldw	r2,-64(fp)
  816f3c:	e0bfed15 	stw	r2,-76(fp)
  816f40:	e0bfed17 	ldw	r2,-76(fp)
  816f44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  816f48:	e0800217 	ldw	r2,8(fp)
  816f4c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  816f50:	e0fff18b 	ldhu	r3,-58(fp)
  816f54:	e0ffff15 	stw	r3,-4(fp)
  816f58:	00009b06 	br	8171c8 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  816f5c:	d1272e17 	ldw	r4,-25416(gp)
  816f60:	d0a72e17 	ldw	r2,-25416(gp)
  816f64:	10c00c03 	ldbu	r3,48(r2)
  816f68:	e0bff103 	ldbu	r2,-60(fp)
  816f6c:	1884b03a 	or	r2,r3,r2
  816f70:	1007883a 	mov	r3,r2
  816f74:	00bfe004 	movi	r2,-128
  816f78:	1884b03a 	or	r2,r3,r2
  816f7c:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  816f80:	d0a72e17 	ldw	r2,-25416(gp)
  816f84:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  816f88:	d0e72e17 	ldw	r3,-25416(gp)
  816f8c:	e0bff90b 	ldhu	r2,-28(fp)
  816f90:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  816f94:	e13ff617 	ldw	r4,-40(fp)
  816f98:	0817b5c0 	call	817b5c <OS_EventTaskWaitMulti>
  816f9c:	e0bff017 	ldw	r2,-64(fp)
  816fa0:	e0bfec15 	stw	r2,-80(fp)
  816fa4:	e0bfec17 	ldw	r2,-80(fp)
  816fa8:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  816fac:	08182f80 	call	8182f8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816fb0:	0005303a 	rdctl	r2,status
  816fb4:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816fb8:	e0ffeb17 	ldw	r3,-84(fp)
  816fbc:	00bfff84 	movi	r2,-2
  816fc0:	1884703a 	and	r2,r3,r2
  816fc4:	1001703a 	wrctl	status,r2
  
  return context;
  816fc8:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
  816fcc:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  816fd0:	d0a72e17 	ldw	r2,-25416(gp)
  816fd4:	10800c43 	ldbu	r2,49(r2)
  816fd8:	10803fcc 	andi	r2,r2,255
  816fdc:	e0bffc15 	stw	r2,-16(fp)
  816fe0:	e0fffc17 	ldw	r3,-16(fp)
  816fe4:	1805003a 	cmpeq	r2,r3,zero
  816fe8:	1000041e 	bne	r2,zero,816ffc <OSEventPendMulti+0x4d0>
  816fec:	e0fffc17 	ldw	r3,-16(fp)
  816ff0:	188000a0 	cmpeqi	r2,r3,2
  816ff4:	1000011e 	bne	r2,zero,816ffc <OSEventPendMulti+0x4d0>
  816ff8:	00001906 	br	817060 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  816ffc:	d0a72e17 	ldw	r2,-25416(gp)
  817000:	10800717 	ldw	r2,28(r2)
  817004:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  817008:	e0bff417 	ldw	r2,-48(fp)
  81700c:	1005003a 	cmpeq	r2,r2,zero
  817010:	10000c1e 	bne	r2,zero,817044 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  817014:	e0fff717 	ldw	r3,-36(fp)
  817018:	e0bff417 	ldw	r2,-48(fp)
  81701c:	18800015 	stw	r2,0(r3)
  817020:	e0bff717 	ldw	r2,-36(fp)
  817024:	10800104 	addi	r2,r2,4
  817028:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  81702c:	e0bff717 	ldw	r2,-36(fp)
  817030:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  817034:	e0bff18b 	ldhu	r2,-58(fp)
  817038:	10800044 	addi	r2,r2,1
  81703c:	e0bff18d 	sth	r2,-58(fp)
  817040:	00000a06 	br	81706c <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  817044:	d0a72e17 	ldw	r2,-25416(gp)
  817048:	00c00044 	movi	r3,1
  81704c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  817050:	d1272e17 	ldw	r4,-25416(gp)
  817054:	e17ff617 	ldw	r5,-40(fp)
  817058:	0817d680 	call	817d68 <OS_EventTaskRemoveMulti>
             }
			 break;
  81705c:	00000306 	br	81706c <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  817060:	d1272e17 	ldw	r4,-25416(gp)
  817064:	e17ff617 	ldw	r5,-40(fp)
  817068:	0817d680 	call	817d68 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
  81706c:	d0a72e17 	ldw	r2,-25416(gp)
  817070:	10800c43 	ldbu	r2,49(r2)
  817074:	10803fcc 	andi	r2,r2,255
  817078:	e0bffb15 	stw	r2,-20(fp)
  81707c:	e0fffb17 	ldw	r3,-20(fp)
  817080:	1805003a 	cmpeq	r2,r3,zero
  817084:	1000041e 	bne	r2,zero,817098 <OSEventPendMulti+0x56c>
  817088:	e0fffb17 	ldw	r3,-20(fp)
  81708c:	188000a0 	cmpeqi	r2,r3,2
  817090:	10002c1e 	bne	r2,zero,817144 <OSEventPendMulti+0x618>
  817094:	00003406 	br	817168 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  817098:	e0bff417 	ldw	r2,-48(fp)
  81709c:	10800003 	ldbu	r2,0(r2)
  8170a0:	10803fcc 	andi	r2,r2,255
  8170a4:	e0bffa15 	stw	r2,-24(fp)
  8170a8:	e0fffa17 	ldw	r3,-24(fp)
  8170ac:	18800050 	cmplti	r2,r3,1
  8170b0:	1000151e 	bne	r2,zero,817108 <OSEventPendMulti+0x5dc>
  8170b4:	e0fffa17 	ldw	r3,-24(fp)
  8170b8:	188000d0 	cmplti	r2,r3,3
  8170bc:	10000a1e 	bne	r2,zero,8170e8 <OSEventPendMulti+0x5bc>
  8170c0:	e0fffa17 	ldw	r3,-24(fp)
  8170c4:	188000e0 	cmpeqi	r2,r3,3
  8170c8:	1000011e 	bne	r2,zero,8170d0 <OSEventPendMulti+0x5a4>
  8170cc:	00000e06 	br	817108 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  8170d0:	e0bff817 	ldw	r2,-32(fp)
  8170d4:	10000015 	stw	zero,0(r2)
  8170d8:	e0bff817 	ldw	r2,-32(fp)
  8170dc:	10800104 	addi	r2,r2,4
  8170e0:	e0bff815 	stw	r2,-32(fp)
                      break;
  8170e4:	00001406 	br	817138 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  8170e8:	d0a72e17 	ldw	r2,-25416(gp)
  8170ec:	10c00917 	ldw	r3,36(r2)
  8170f0:	e0bff817 	ldw	r2,-32(fp)
  8170f4:	10c00015 	stw	r3,0(r2)
  8170f8:	e0bff817 	ldw	r2,-32(fp)
  8170fc:	10800104 	addi	r2,r2,4
  817100:	e0bff815 	stw	r2,-32(fp)
                      break;
  817104:	00000c06 	br	817138 <OSEventPendMulti+0x60c>
  817108:	e0bff017 	ldw	r2,-64(fp)
  81710c:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817110:	e0bfea17 	ldw	r2,-88(fp)
  817114:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  817118:	e0bff717 	ldw	r2,-36(fp)
  81711c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  817120:	e0c00217 	ldw	r3,8(fp)
  817124:	00800044 	movi	r2,1
  817128:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
  81712c:	e0bff18b 	ldhu	r2,-58(fp)
  817130:	e0bfff15 	stw	r2,-4(fp)
  817134:	00002406 	br	8171c8 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
  817138:	e0800217 	ldw	r2,8(fp)
  81713c:	10000005 	stb	zero,0(r2)
             break;
  817140:	00001106 	br	817188 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  817144:	e0bff817 	ldw	r2,-32(fp)
  817148:	10000015 	stw	zero,0(r2)
  81714c:	e0bff817 	ldw	r2,-32(fp)
  817150:	10800104 	addi	r2,r2,4
  817154:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  817158:	e0c00217 	ldw	r3,8(fp)
  81715c:	00800384 	movi	r2,14
  817160:	18800005 	stb	r2,0(r3)
             break;
  817164:	00000806 	br	817188 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  817168:	e0bff817 	ldw	r2,-32(fp)
  81716c:	10000015 	stw	zero,0(r2)
  817170:	e0bff817 	ldw	r2,-32(fp)
  817174:	10800104 	addi	r2,r2,4
  817178:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  81717c:	e0c00217 	ldw	r3,8(fp)
  817180:	00800284 	movi	r2,10
  817184:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  817188:	d0a72e17 	ldw	r2,-25416(gp)
  81718c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  817190:	d0a72e17 	ldw	r2,-25416(gp)
  817194:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  817198:	d0a72e17 	ldw	r2,-25416(gp)
  81719c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  8171a0:	d0a72e17 	ldw	r2,-25416(gp)
  8171a4:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  8171a8:	d0a72e17 	ldw	r2,-25416(gp)
  8171ac:	10000915 	stw	zero,36(r2)
  8171b0:	e0bff017 	ldw	r2,-64(fp)
  8171b4:	e0bfe915 	stw	r2,-92(fp)
  8171b8:	e0bfe917 	ldw	r2,-92(fp)
  8171bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  8171c0:	e0fff18b 	ldhu	r3,-58(fp)
  8171c4:	e0ffff15 	stw	r3,-4(fp)
  8171c8:	e0bfff17 	ldw	r2,-4(fp)
}
  8171cc:	e037883a 	mov	sp,fp
  8171d0:	dfc00117 	ldw	ra,4(sp)
  8171d4:	df000017 	ldw	fp,0(sp)
  8171d8:	dec00204 	addi	sp,sp,8
  8171dc:	f800283a 	ret

008171e0 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  8171e0:	defffe04 	addi	sp,sp,-8
  8171e4:	dfc00115 	stw	ra,4(sp)
  8171e8:	df000015 	stw	fp,0(sp)
  8171ec:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  8171f0:	0821fc80 	call	821fc8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  8171f4:	0817fb00 	call	817fb0 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  8171f8:	0817ff40 	call	817ff4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  8171fc:	08181580 	call	818158 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  817200:	0817ed40 	call	817ed4 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  817204:	081a2080 	call	81a208 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  817208:	081abe00 	call	81abe0 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  81720c:	081bf380 	call	81bf38 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  817210:	08180600 	call	818060 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  817214:	08180dc0 	call	8180dc <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  817218:	0821fe40 	call	821fe4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  81721c:	08189e00 	call	8189e0 <OSDebugInit>
#endif
}
  817220:	e037883a 	mov	sp,fp
  817224:	dfc00117 	ldw	ra,4(sp)
  817228:	df000017 	ldw	fp,0(sp)
  81722c:	dec00204 	addi	sp,sp,8
  817230:	f800283a 	ret

00817234 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  817234:	defffc04 	addi	sp,sp,-16
  817238:	df000315 	stw	fp,12(sp)
  81723c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  817240:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
  817244:	d0a71f43 	ldbu	r2,-25475(gp)
  817248:	10803fcc 	andi	r2,r2,255
  81724c:	10800058 	cmpnei	r2,r2,1
  817250:	1000131e 	bne	r2,zero,8172a0 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817254:	0005303a 	rdctl	r2,status
  817258:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81725c:	e0fffe17 	ldw	r3,-8(fp)
  817260:	00bfff84 	movi	r2,-2
  817264:	1884703a 	and	r2,r3,r2
  817268:	1001703a 	wrctl	status,r2
  
  return context;
  81726c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  817270:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
  817274:	d0a72d03 	ldbu	r2,-25420(gp)
  817278:	10803fcc 	andi	r2,r2,255
  81727c:	10803fe0 	cmpeqi	r2,r2,255
  817280:	1000031e 	bne	r2,zero,817290 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  817284:	d0a72d03 	ldbu	r2,-25420(gp)
  817288:	10800044 	addi	r2,r2,1
  81728c:	d0a72d05 	stb	r2,-25420(gp)
  817290:	e0bfff17 	ldw	r2,-4(fp)
  817294:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817298:	e0bffd17 	ldw	r2,-12(fp)
  81729c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
  8172a0:	e037883a 	mov	sp,fp
  8172a4:	df000017 	ldw	fp,0(sp)
  8172a8:	dec00104 	addi	sp,sp,4
  8172ac:	f800283a 	ret

008172b0 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  8172b0:	defffb04 	addi	sp,sp,-20
  8172b4:	dfc00415 	stw	ra,16(sp)
  8172b8:	df000315 	stw	fp,12(sp)
  8172bc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8172c0:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
  8172c4:	d0a71f43 	ldbu	r2,-25475(gp)
  8172c8:	10803fcc 	andi	r2,r2,255
  8172cc:	10800058 	cmpnei	r2,r2,1
  8172d0:	1000321e 	bne	r2,zero,81739c <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8172d4:	0005303a 	rdctl	r2,status
  8172d8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8172dc:	e0fffe17 	ldw	r3,-8(fp)
  8172e0:	00bfff84 	movi	r2,-2
  8172e4:	1884703a 	and	r2,r3,r2
  8172e8:	1001703a 	wrctl	status,r2
  
  return context;
  8172ec:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  8172f0:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  8172f4:	d0a72d03 	ldbu	r2,-25420(gp)
  8172f8:	10803fcc 	andi	r2,r2,255
  8172fc:	1005003a 	cmpeq	r2,r2,zero
  817300:	1000031e 	bne	r2,zero,817310 <OSIntExit+0x60>
            OSIntNesting--;
  817304:	d0a72d03 	ldbu	r2,-25420(gp)
  817308:	10bfffc4 	addi	r2,r2,-1
  81730c:	d0a72d05 	stb	r2,-25420(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  817310:	d0a72d03 	ldbu	r2,-25420(gp)
  817314:	10803fcc 	andi	r2,r2,255
  817318:	1004c03a 	cmpne	r2,r2,zero
  81731c:	10001b1e 	bne	r2,zero,81738c <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  817320:	d0a71f03 	ldbu	r2,-25476(gp)
  817324:	10803fcc 	andi	r2,r2,255
  817328:	1004c03a 	cmpne	r2,r2,zero
  81732c:	1000171e 	bne	r2,zero,81738c <OSIntExit+0xdc>
                OS_SchedNew();
  817330:	08183cc0 	call	8183cc <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  817334:	d0a72103 	ldbu	r2,-25468(gp)
  817338:	d0e72143 	ldbu	r3,-25467(gp)
  81733c:	11003fcc 	andi	r4,r2,255
  817340:	18803fcc 	andi	r2,r3,255
  817344:	20801126 	beq	r4,r2,81738c <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  817348:	d0a72103 	ldbu	r2,-25468(gp)
  81734c:	10803fcc 	andi	r2,r2,255
  817350:	00c020f4 	movhi	r3,131
  817354:	18c02f04 	addi	r3,r3,188
  817358:	1085883a 	add	r2,r2,r2
  81735c:	1085883a 	add	r2,r2,r2
  817360:	10c5883a 	add	r2,r2,r3
  817364:	10800017 	ldw	r2,0(r2)
  817368:	d0a72915 	stw	r2,-25436(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  81736c:	d0e72917 	ldw	r3,-25436(gp)
  817370:	18800e17 	ldw	r2,56(r3)
  817374:	10800044 	addi	r2,r2,1
  817378:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  81737c:	d0a72417 	ldw	r2,-25456(gp)
  817380:	10800044 	addi	r2,r2,1
  817384:	d0a72415 	stw	r2,-25456(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  817388:	0821b540 	call	821b54 <OSCtxSw>
  81738c:	e0bfff17 	ldw	r2,-4(fp)
  817390:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817394:	e0bffd17 	ldw	r2,-12(fp)
  817398:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  81739c:	e037883a 	mov	sp,fp
  8173a0:	dfc00117 	ldw	ra,4(sp)
  8173a4:	df000017 	ldw	fp,0(sp)
  8173a8:	dec00204 	addi	sp,sp,8
  8173ac:	f800283a 	ret

008173b0 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  8173b0:	defffc04 	addi	sp,sp,-16
  8173b4:	df000315 	stw	fp,12(sp)
  8173b8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8173bc:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  8173c0:	d0a71f43 	ldbu	r2,-25475(gp)
  8173c4:	10803fcc 	andi	r2,r2,255
  8173c8:	10800058 	cmpnei	r2,r2,1
  8173cc:	1000171e 	bne	r2,zero,81742c <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8173d0:	0005303a 	rdctl	r2,status
  8173d4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8173d8:	e0fffe17 	ldw	r3,-8(fp)
  8173dc:	00bfff84 	movi	r2,-2
  8173e0:	1884703a 	and	r2,r3,r2
  8173e4:	1001703a 	wrctl	status,r2
  
  return context;
  8173e8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  8173ec:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  8173f0:	d0a72d03 	ldbu	r2,-25420(gp)
  8173f4:	10803fcc 	andi	r2,r2,255
  8173f8:	1004c03a 	cmpne	r2,r2,zero
  8173fc:	1000071e 	bne	r2,zero,81741c <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  817400:	d0a71f03 	ldbu	r2,-25476(gp)
  817404:	10803fcc 	andi	r2,r2,255
  817408:	10803fe0 	cmpeqi	r2,r2,255
  81740c:	1000031e 	bne	r2,zero,81741c <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  817410:	d0a71f03 	ldbu	r2,-25476(gp)
  817414:	10800044 	addi	r2,r2,1
  817418:	d0a71f05 	stb	r2,-25476(gp)
  81741c:	e0bfff17 	ldw	r2,-4(fp)
  817420:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817424:	e0bffd17 	ldw	r2,-12(fp)
  817428:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  81742c:	e037883a 	mov	sp,fp
  817430:	df000017 	ldw	fp,0(sp)
  817434:	dec00104 	addi	sp,sp,4
  817438:	f800283a 	ret

0081743c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  81743c:	defff804 	addi	sp,sp,-32
  817440:	dfc00715 	stw	ra,28(sp)
  817444:	df000615 	stw	fp,24(sp)
  817448:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81744c:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  817450:	d0a71f43 	ldbu	r2,-25475(gp)
  817454:	10803fcc 	andi	r2,r2,255
  817458:	10800058 	cmpnei	r2,r2,1
  81745c:	10002b1e 	bne	r2,zero,81750c <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817460:	0005303a 	rdctl	r2,status
  817464:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817468:	e0fffe17 	ldw	r3,-8(fp)
  81746c:	00bfff84 	movi	r2,-2
  817470:	1884703a 	and	r2,r3,r2
  817474:	1001703a 	wrctl	status,r2
  
  return context;
  817478:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  81747c:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  817480:	d0a71f03 	ldbu	r2,-25476(gp)
  817484:	10803fcc 	andi	r2,r2,255
  817488:	1005003a 	cmpeq	r2,r2,zero
  81748c:	10001b1e 	bne	r2,zero,8174fc <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  817490:	d0a71f03 	ldbu	r2,-25476(gp)
  817494:	10bfffc4 	addi	r2,r2,-1
  817498:	d0a71f05 	stb	r2,-25476(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  81749c:	d0a71f03 	ldbu	r2,-25476(gp)
  8174a0:	10803fcc 	andi	r2,r2,255
  8174a4:	1004c03a 	cmpne	r2,r2,zero
  8174a8:	10000f1e 	bne	r2,zero,8174e8 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  8174ac:	d0a72d03 	ldbu	r2,-25420(gp)
  8174b0:	10803fcc 	andi	r2,r2,255
  8174b4:	1004c03a 	cmpne	r2,r2,zero
  8174b8:	1000061e 	bne	r2,zero,8174d4 <OSSchedUnlock+0x98>
  8174bc:	e0bfff17 	ldw	r2,-4(fp)
  8174c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8174c4:	e0bffd17 	ldw	r2,-12(fp)
  8174c8:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  8174cc:	08182f80 	call	8182f8 <OS_Sched>
  8174d0:	00000e06 	br	81750c <OSSchedUnlock+0xd0>
  8174d4:	e0bfff17 	ldw	r2,-4(fp)
  8174d8:	e0bffc15 	stw	r2,-16(fp)
  8174dc:	e0bffc17 	ldw	r2,-16(fp)
  8174e0:	1001703a 	wrctl	status,r2
  8174e4:	00000906 	br	81750c <OSSchedUnlock+0xd0>
  8174e8:	e0bfff17 	ldw	r2,-4(fp)
  8174ec:	e0bffb15 	stw	r2,-20(fp)
  8174f0:	e0bffb17 	ldw	r2,-20(fp)
  8174f4:	1001703a 	wrctl	status,r2
  8174f8:	00000406 	br	81750c <OSSchedUnlock+0xd0>
  8174fc:	e0bfff17 	ldw	r2,-4(fp)
  817500:	e0bffa15 	stw	r2,-24(fp)
  817504:	e0bffa17 	ldw	r2,-24(fp)
  817508:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  81750c:	e037883a 	mov	sp,fp
  817510:	dfc00117 	ldw	ra,4(sp)
  817514:	df000017 	ldw	fp,0(sp)
  817518:	dec00204 	addi	sp,sp,8
  81751c:	f800283a 	ret

00817520 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  817520:	defffe04 	addi	sp,sp,-8
  817524:	dfc00115 	stw	ra,4(sp)
  817528:	df000015 	stw	fp,0(sp)
  81752c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  817530:	d0a71f43 	ldbu	r2,-25475(gp)
  817534:	10803fcc 	andi	r2,r2,255
  817538:	1004c03a 	cmpne	r2,r2,zero
  81753c:	10000f1e 	bne	r2,zero,81757c <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  817540:	08183cc0 	call	8183cc <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  817544:	d0a72103 	ldbu	r2,-25468(gp)
  817548:	d0a72145 	stb	r2,-25467(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  81754c:	d0a72103 	ldbu	r2,-25468(gp)
  817550:	10803fcc 	andi	r2,r2,255
  817554:	00c020f4 	movhi	r3,131
  817558:	18c02f04 	addi	r3,r3,188
  81755c:	1085883a 	add	r2,r2,r2
  817560:	1085883a 	add	r2,r2,r2
  817564:	10c5883a 	add	r2,r2,r3
  817568:	10800017 	ldw	r2,0(r2)
  81756c:	d0a72915 	stw	r2,-25436(gp)
        OSTCBCur      = OSTCBHighRdy;
  817570:	d0a72917 	ldw	r2,-25436(gp)
  817574:	d0a72e15 	stw	r2,-25416(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  817578:	0821be00 	call	821be0 <OSStartHighRdy>
    }
}
  81757c:	e037883a 	mov	sp,fp
  817580:	dfc00117 	ldw	ra,4(sp)
  817584:	df000017 	ldw	fp,0(sp)
  817588:	dec00204 	addi	sp,sp,8
  81758c:	f800283a 	ret

00817590 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  817590:	defff904 	addi	sp,sp,-28
  817594:	dfc00615 	stw	ra,24(sp)
  817598:	df000515 	stw	fp,20(sp)
  81759c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8175a0:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  8175a4:	01000084 	movi	r4,2
  8175a8:	081e5ec0 	call	81e5ec <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8175ac:	0005303a 	rdctl	r2,status
  8175b0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8175b4:	e0fffe17 	ldw	r3,-8(fp)
  8175b8:	00bfff84 	movi	r2,-2
  8175bc:	1884703a 	and	r2,r3,r2
  8175c0:	1001703a 	wrctl	status,r2
  
  return context;
  8175c4:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  8175c8:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  8175cc:	d0272015 	stw	zero,-25472(gp)
  8175d0:	e0bfff17 	ldw	r2,-4(fp)
  8175d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8175d8:	e0bffd17 	ldw	r2,-12(fp)
  8175dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  8175e0:	01001904 	movi	r4,100
  8175e4:	081e5ec0 	call	81e5ec <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8175e8:	0005303a 	rdctl	r2,status
  8175ec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8175f0:	e0fffc17 	ldw	r3,-16(fp)
  8175f4:	00bfff84 	movi	r2,-2
  8175f8:	1884703a 	and	r2,r3,r2
  8175fc:	1001703a 	wrctl	status,r2
  
  return context;
  817600:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  817604:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  817608:	d0a72017 	ldw	r2,-25472(gp)
  81760c:	d0a72515 	stw	r2,-25452(gp)
    OSStatRdy    = OS_TRUE;
  817610:	00800044 	movi	r2,1
  817614:	d0a73105 	stb	r2,-25404(gp)
  817618:	e0bfff17 	ldw	r2,-4(fp)
  81761c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817620:	e0bffb17 	ldw	r2,-20(fp)
  817624:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  817628:	e037883a 	mov	sp,fp
  81762c:	dfc00117 	ldw	ra,4(sp)
  817630:	df000017 	ldw	fp,0(sp)
  817634:	dec00204 	addi	sp,sp,8
  817638:	f800283a 	ret

0081763c <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  81763c:	defff604 	addi	sp,sp,-40
  817640:	dfc00915 	stw	ra,36(sp)
  817644:	df000815 	stw	fp,32(sp)
  817648:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  81764c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  817650:	0821fac0 	call	821fac <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817654:	0005303a 	rdctl	r2,status
  817658:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81765c:	e0fffb17 	ldw	r3,-20(fp)
  817660:	00bfff84 	movi	r2,-2
  817664:	1884703a 	and	r2,r3,r2
  817668:	1001703a 	wrctl	status,r2
  
  return context;
  81766c:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  817670:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
  817674:	d0a72f17 	ldw	r2,-25412(gp)
  817678:	10800044 	addi	r2,r2,1
  81767c:	d0a72f15 	stw	r2,-25412(gp)
  817680:	e0bffc17 	ldw	r2,-16(fp)
  817684:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817688:	e0bffa17 	ldw	r2,-24(fp)
  81768c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  817690:	d0a71f43 	ldbu	r2,-25475(gp)
  817694:	10803fcc 	andi	r2,r2,255
  817698:	10800058 	cmpnei	r2,r2,1
  81769c:	1000721e 	bne	r2,zero,817868 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  8176a0:	d0a72303 	ldbu	r2,-25460(gp)
  8176a4:	10803fcc 	andi	r2,r2,255
  8176a8:	e0bfff15 	stw	r2,-4(fp)
  8176ac:	e0ffff17 	ldw	r3,-4(fp)
  8176b0:	18800060 	cmpeqi	r2,r3,1
  8176b4:	10000a1e 	bne	r2,zero,8176e0 <OSTimeTick+0xa4>
  8176b8:	e0ffff17 	ldw	r3,-4(fp)
  8176bc:	188000a0 	cmpeqi	r2,r3,2
  8176c0:	1000091e 	bne	r2,zero,8176e8 <OSTimeTick+0xac>
  8176c4:	e0ffff17 	ldw	r3,-4(fp)
  8176c8:	1805003a 	cmpeq	r2,r3,zero
  8176cc:	1000011e 	bne	r2,zero,8176d4 <OSTimeTick+0x98>
  8176d0:	00000a06 	br	8176fc <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  8176d4:	00800044 	movi	r2,1
  8176d8:	e0bffd05 	stb	r2,-12(fp)
                 break;
  8176dc:	00000a06 	br	817708 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  8176e0:	e03ffd05 	stb	zero,-12(fp)
                 break;
  8176e4:	00000806 	br	817708 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  8176e8:	00800044 	movi	r2,1
  8176ec:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  8176f0:	00800044 	movi	r2,1
  8176f4:	d0a72305 	stb	r2,-25460(gp)
                 break;
  8176f8:	00000306 	br	817708 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  8176fc:	00800044 	movi	r2,1
  817700:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  817704:	d0272305 	stb	zero,-25460(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  817708:	e0bffd03 	ldbu	r2,-12(fp)
  81770c:	1005003a 	cmpeq	r2,r2,zero
  817710:	1000551e 	bne	r2,zero,817868 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  817714:	d0a72217 	ldw	r2,-25464(gp)
  817718:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  81771c:	00004d06 	br	817854 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817720:	0005303a 	rdctl	r2,status
  817724:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817728:	e0fff917 	ldw	r3,-28(fp)
  81772c:	00bfff84 	movi	r2,-2
  817730:	1884703a 	and	r2,r3,r2
  817734:	1001703a 	wrctl	status,r2
  
  return context;
  817738:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
  81773c:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  817740:	e0bffe17 	ldw	r2,-8(fp)
  817744:	10800b8b 	ldhu	r2,46(r2)
  817748:	10bfffcc 	andi	r2,r2,65535
  81774c:	1005003a 	cmpeq	r2,r2,zero
  817750:	1000391e 	bne	r2,zero,817838 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  817754:	e0bffe17 	ldw	r2,-8(fp)
  817758:	10800b8b 	ldhu	r2,46(r2)
  81775c:	10bfffc4 	addi	r2,r2,-1
  817760:	1007883a 	mov	r3,r2
  817764:	e0bffe17 	ldw	r2,-8(fp)
  817768:	10c00b8d 	sth	r3,46(r2)
  81776c:	e0bffe17 	ldw	r2,-8(fp)
  817770:	10800b8b 	ldhu	r2,46(r2)
  817774:	10bfffcc 	andi	r2,r2,65535
  817778:	1004c03a 	cmpne	r2,r2,zero
  81777c:	10002e1e 	bne	r2,zero,817838 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  817780:	e0bffe17 	ldw	r2,-8(fp)
  817784:	10800c03 	ldbu	r2,48(r2)
  817788:	10803fcc 	andi	r2,r2,255
  81778c:	10800dcc 	andi	r2,r2,55
  817790:	1005003a 	cmpeq	r2,r2,zero
  817794:	10000b1e 	bne	r2,zero,8177c4 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  817798:	e0bffe17 	ldw	r2,-8(fp)
  81779c:	10c00c03 	ldbu	r3,48(r2)
  8177a0:	00bff204 	movi	r2,-56
  8177a4:	1884703a 	and	r2,r3,r2
  8177a8:	1007883a 	mov	r3,r2
  8177ac:	e0bffe17 	ldw	r2,-8(fp)
  8177b0:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  8177b4:	e0fffe17 	ldw	r3,-8(fp)
  8177b8:	00800044 	movi	r2,1
  8177bc:	18800c45 	stb	r2,49(r3)
  8177c0:	00000206 	br	8177cc <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  8177c4:	e0bffe17 	ldw	r2,-8(fp)
  8177c8:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  8177cc:	e0bffe17 	ldw	r2,-8(fp)
  8177d0:	10800c03 	ldbu	r2,48(r2)
  8177d4:	10803fcc 	andi	r2,r2,255
  8177d8:	1080020c 	andi	r2,r2,8
  8177dc:	1004c03a 	cmpne	r2,r2,zero
  8177e0:	1000151e 	bne	r2,zero,817838 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  8177e4:	e0bffe17 	ldw	r2,-8(fp)
  8177e8:	10c00d83 	ldbu	r3,54(r2)
  8177ec:	d0a72b03 	ldbu	r2,-25428(gp)
  8177f0:	1884b03a 	or	r2,r3,r2
  8177f4:	d0a72b05 	stb	r2,-25428(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  8177f8:	e0bffe17 	ldw	r2,-8(fp)
  8177fc:	10800d03 	ldbu	r2,52(r2)
  817800:	11003fcc 	andi	r4,r2,255
  817804:	e0bffe17 	ldw	r2,-8(fp)
  817808:	10800d03 	ldbu	r2,52(r2)
  81780c:	10c03fcc 	andi	r3,r2,255
  817810:	d0a72b44 	addi	r2,gp,-25427
  817814:	1885883a 	add	r2,r3,r2
  817818:	10c00003 	ldbu	r3,0(r2)
  81781c:	e0bffe17 	ldw	r2,-8(fp)
  817820:	10800d43 	ldbu	r2,53(r2)
  817824:	1884b03a 	or	r2,r3,r2
  817828:	1007883a 	mov	r3,r2
  81782c:	d0a72b44 	addi	r2,gp,-25427
  817830:	2085883a 	add	r2,r4,r2
  817834:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  817838:	e0bffe17 	ldw	r2,-8(fp)
  81783c:	10800517 	ldw	r2,20(r2)
  817840:	e0bffe15 	stw	r2,-8(fp)
  817844:	e0bffc17 	ldw	r2,-16(fp)
  817848:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81784c:	e0bff817 	ldw	r2,-32(fp)
  817850:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  817854:	e0bffe17 	ldw	r2,-8(fp)
  817858:	10800c83 	ldbu	r2,50(r2)
  81785c:	10803fcc 	andi	r2,r2,255
  817860:	10800518 	cmpnei	r2,r2,20
  817864:	103fae1e 	bne	r2,zero,817720 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  817868:	e037883a 	mov	sp,fp
  81786c:	dfc00117 	ldw	ra,4(sp)
  817870:	df000017 	ldw	fp,0(sp)
  817874:	dec00204 	addi	sp,sp,8
  817878:	f800283a 	ret

0081787c <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  81787c:	deffff04 	addi	sp,sp,-4
  817880:	df000015 	stw	fp,0(sp)
  817884:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  817888:	00804784 	movi	r2,286
}
  81788c:	e037883a 	mov	sp,fp
  817890:	df000017 	ldw	fp,0(sp)
  817894:	dec00104 	addi	sp,sp,4
  817898:	f800283a 	ret

0081789c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  81789c:	deffff04 	addi	sp,sp,-4
  8178a0:	df000015 	stw	fp,0(sp)
  8178a4:	d839883a 	mov	fp,sp
}
  8178a8:	e037883a 	mov	sp,fp
  8178ac:	df000017 	ldw	fp,0(sp)
  8178b0:	dec00104 	addi	sp,sp,4
  8178b4:	f800283a 	ret

008178b8 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  8178b8:	defff804 	addi	sp,sp,-32
  8178bc:	dfc00715 	stw	ra,28(sp)
  8178c0:	df000615 	stw	fp,24(sp)
  8178c4:	df000604 	addi	fp,sp,24
  8178c8:	e13ffc15 	stw	r4,-16(fp)
  8178cc:	e17ffd15 	stw	r5,-12(fp)
  8178d0:	e1bffe05 	stb	r6,-8(fp)
  8178d4:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  8178d8:	e0bffc17 	ldw	r2,-16(fp)
  8178dc:	10800283 	ldbu	r2,10(r2)
  8178e0:	10c03fcc 	andi	r3,r2,255
  8178e4:	008020b4 	movhi	r2,130
  8178e8:	108cd904 	addi	r2,r2,13156
  8178ec:	10c5883a 	add	r2,r2,r3
  8178f0:	10800003 	ldbu	r2,0(r2)
  8178f4:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  8178f8:	e0fffa83 	ldbu	r3,-22(fp)
  8178fc:	e0bffc17 	ldw	r2,-16(fp)
  817900:	1885883a 	add	r2,r3,r2
  817904:	10800204 	addi	r2,r2,8
  817908:	108000c3 	ldbu	r2,3(r2)
  81790c:	10c03fcc 	andi	r3,r2,255
  817910:	008020b4 	movhi	r2,130
  817914:	108cd904 	addi	r2,r2,13156
  817918:	10c5883a 	add	r2,r2,r3
  81791c:	10800003 	ldbu	r2,0(r2)
  817920:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  817924:	e0bffa83 	ldbu	r2,-22(fp)
  817928:	100490fa 	slli	r2,r2,3
  81792c:	1007883a 	mov	r3,r2
  817930:	e0bffa43 	ldbu	r2,-23(fp)
  817934:	1885883a 	add	r2,r3,r2
  817938:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  81793c:	e0bffa03 	ldbu	r2,-24(fp)
  817940:	00c020f4 	movhi	r3,131
  817944:	18c02f04 	addi	r3,r3,188
  817948:	1085883a 	add	r2,r2,r2
  81794c:	1085883a 	add	r2,r2,r2
  817950:	10c5883a 	add	r2,r2,r3
  817954:	10800017 	ldw	r2,0(r2)
  817958:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  81795c:	e0bffb17 	ldw	r2,-20(fp)
  817960:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  817964:	e0fffb17 	ldw	r3,-20(fp)
  817968:	e0bffd17 	ldw	r2,-12(fp)
  81796c:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  817970:	e0bffb17 	ldw	r2,-20(fp)
  817974:	10800c03 	ldbu	r2,48(r2)
  817978:	1007883a 	mov	r3,r2
  81797c:	e0bffe03 	ldbu	r2,-8(fp)
  817980:	0084303a 	nor	r2,zero,r2
  817984:	1884703a 	and	r2,r3,r2
  817988:	1007883a 	mov	r3,r2
  81798c:	e0bffb17 	ldw	r2,-20(fp)
  817990:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  817994:	e0fffb17 	ldw	r3,-20(fp)
  817998:	e0bfff03 	ldbu	r2,-4(fp)
  81799c:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  8179a0:	e0bffb17 	ldw	r2,-20(fp)
  8179a4:	10800c03 	ldbu	r2,48(r2)
  8179a8:	10803fcc 	andi	r2,r2,255
  8179ac:	1080020c 	andi	r2,r2,8
  8179b0:	1004c03a 	cmpne	r2,r2,zero
  8179b4:	1000111e 	bne	r2,zero,8179fc <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  8179b8:	e0bffb17 	ldw	r2,-20(fp)
  8179bc:	10c00d83 	ldbu	r3,54(r2)
  8179c0:	d0a72b03 	ldbu	r2,-25428(gp)
  8179c4:	1884b03a 	or	r2,r3,r2
  8179c8:	d0a72b05 	stb	r2,-25428(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  8179cc:	e13ffa83 	ldbu	r4,-22(fp)
  8179d0:	e0fffa83 	ldbu	r3,-22(fp)
  8179d4:	d0a72b44 	addi	r2,gp,-25427
  8179d8:	1885883a 	add	r2,r3,r2
  8179dc:	10c00003 	ldbu	r3,0(r2)
  8179e0:	e0bffb17 	ldw	r2,-20(fp)
  8179e4:	10800d43 	ldbu	r2,53(r2)
  8179e8:	1884b03a 	or	r2,r3,r2
  8179ec:	1007883a 	mov	r3,r2
  8179f0:	d0a72b44 	addi	r2,gp,-25427
  8179f4:	2085883a 	add	r2,r4,r2
  8179f8:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  8179fc:	e13ffb17 	ldw	r4,-20(fp)
  817a00:	e17ffc17 	ldw	r5,-16(fp)
  817a04:	0817cb00 	call	817cb0 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  817a08:	e0bffb17 	ldw	r2,-20(fp)
  817a0c:	10800817 	ldw	r2,32(r2)
  817a10:	1005003a 	cmpeq	r2,r2,zero
  817a14:	1000071e 	bne	r2,zero,817a34 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  817a18:	e0bffb17 	ldw	r2,-20(fp)
  817a1c:	11400817 	ldw	r5,32(r2)
  817a20:	e13ffb17 	ldw	r4,-20(fp)
  817a24:	0817d680 	call	817d68 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  817a28:	e0fffb17 	ldw	r3,-20(fp)
  817a2c:	e0bffc17 	ldw	r2,-16(fp)
  817a30:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
  817a34:	e0bffa03 	ldbu	r2,-24(fp)
}
  817a38:	e037883a 	mov	sp,fp
  817a3c:	dfc00117 	ldw	ra,4(sp)
  817a40:	df000017 	ldw	fp,0(sp)
  817a44:	dec00204 	addi	sp,sp,8
  817a48:	f800283a 	ret

00817a4c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  817a4c:	defffd04 	addi	sp,sp,-12
  817a50:	df000215 	stw	fp,8(sp)
  817a54:	df000204 	addi	fp,sp,8
  817a58:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  817a5c:	d0e72e17 	ldw	r3,-25416(gp)
  817a60:	e0bfff17 	ldw	r2,-4(fp)
  817a64:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  817a68:	d0a72e17 	ldw	r2,-25416(gp)
  817a6c:	10800d03 	ldbu	r2,52(r2)
  817a70:	11003fcc 	andi	r4,r2,255
  817a74:	d0a72e17 	ldw	r2,-25416(gp)
  817a78:	10800d03 	ldbu	r2,52(r2)
  817a7c:	10c03fcc 	andi	r3,r2,255
  817a80:	e0bfff17 	ldw	r2,-4(fp)
  817a84:	1885883a 	add	r2,r3,r2
  817a88:	10800204 	addi	r2,r2,8
  817a8c:	10c000c3 	ldbu	r3,3(r2)
  817a90:	d0a72e17 	ldw	r2,-25416(gp)
  817a94:	10800d43 	ldbu	r2,53(r2)
  817a98:	1884b03a 	or	r2,r3,r2
  817a9c:	1007883a 	mov	r3,r2
  817aa0:	e0bfff17 	ldw	r2,-4(fp)
  817aa4:	2085883a 	add	r2,r4,r2
  817aa8:	10800204 	addi	r2,r2,8
  817aac:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  817ab0:	e0bfff17 	ldw	r2,-4(fp)
  817ab4:	10c00283 	ldbu	r3,10(r2)
  817ab8:	d0a72e17 	ldw	r2,-25416(gp)
  817abc:	10800d83 	ldbu	r2,54(r2)
  817ac0:	1884b03a 	or	r2,r3,r2
  817ac4:	1007883a 	mov	r3,r2
  817ac8:	e0bfff17 	ldw	r2,-4(fp)
  817acc:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  817ad0:	d0a72e17 	ldw	r2,-25416(gp)
  817ad4:	10800d03 	ldbu	r2,52(r2)
  817ad8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  817adc:	e13ffe03 	ldbu	r4,-8(fp)
  817ae0:	e0fffe03 	ldbu	r3,-8(fp)
  817ae4:	d0a72b44 	addi	r2,gp,-25427
  817ae8:	1885883a 	add	r2,r3,r2
  817aec:	10800003 	ldbu	r2,0(r2)
  817af0:	1007883a 	mov	r3,r2
  817af4:	d0a72e17 	ldw	r2,-25416(gp)
  817af8:	10800d43 	ldbu	r2,53(r2)
  817afc:	0084303a 	nor	r2,zero,r2
  817b00:	1884703a 	and	r2,r3,r2
  817b04:	1007883a 	mov	r3,r2
  817b08:	d0a72b44 	addi	r2,gp,-25427
  817b0c:	2085883a 	add	r2,r4,r2
  817b10:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  817b14:	e0fffe03 	ldbu	r3,-8(fp)
  817b18:	d0a72b44 	addi	r2,gp,-25427
  817b1c:	1885883a 	add	r2,r3,r2
  817b20:	10800003 	ldbu	r2,0(r2)
  817b24:	10803fcc 	andi	r2,r2,255
  817b28:	1004c03a 	cmpne	r2,r2,zero
  817b2c:	1000071e 	bne	r2,zero,817b4c <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  817b30:	d0a72e17 	ldw	r2,-25416(gp)
  817b34:	10800d83 	ldbu	r2,54(r2)
  817b38:	0084303a 	nor	r2,zero,r2
  817b3c:	1007883a 	mov	r3,r2
  817b40:	d0a72b03 	ldbu	r2,-25428(gp)
  817b44:	1884703a 	and	r2,r3,r2
  817b48:	d0a72b05 	stb	r2,-25428(gp)
    }
}
  817b4c:	e037883a 	mov	sp,fp
  817b50:	df000017 	ldw	fp,0(sp)
  817b54:	dec00104 	addi	sp,sp,4
  817b58:	f800283a 	ret

00817b5c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  817b5c:	defffb04 	addi	sp,sp,-20
  817b60:	df000415 	stw	fp,16(sp)
  817b64:	df000404 	addi	fp,sp,16
  817b68:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  817b6c:	d0a72e17 	ldw	r2,-25416(gp)
  817b70:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  817b74:	d0e72e17 	ldw	r3,-25416(gp)
  817b78:	e0bfff17 	ldw	r2,-4(fp)
  817b7c:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
  817b80:	e0bfff17 	ldw	r2,-4(fp)
  817b84:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
  817b88:	e0bffe17 	ldw	r2,-8(fp)
  817b8c:	10800017 	ldw	r2,0(r2)
  817b90:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  817b94:	00002006 	br	817c18 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  817b98:	d0a72e17 	ldw	r2,-25416(gp)
  817b9c:	10800d03 	ldbu	r2,52(r2)
  817ba0:	11003fcc 	andi	r4,r2,255
  817ba4:	d0a72e17 	ldw	r2,-25416(gp)
  817ba8:	10800d03 	ldbu	r2,52(r2)
  817bac:	10c03fcc 	andi	r3,r2,255
  817bb0:	e0bffd17 	ldw	r2,-12(fp)
  817bb4:	1885883a 	add	r2,r3,r2
  817bb8:	10800204 	addi	r2,r2,8
  817bbc:	10c000c3 	ldbu	r3,3(r2)
  817bc0:	d0a72e17 	ldw	r2,-25416(gp)
  817bc4:	10800d43 	ldbu	r2,53(r2)
  817bc8:	1884b03a 	or	r2,r3,r2
  817bcc:	1007883a 	mov	r3,r2
  817bd0:	e0bffd17 	ldw	r2,-12(fp)
  817bd4:	2085883a 	add	r2,r4,r2
  817bd8:	10800204 	addi	r2,r2,8
  817bdc:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  817be0:	e0bffd17 	ldw	r2,-12(fp)
  817be4:	10c00283 	ldbu	r3,10(r2)
  817be8:	d0a72e17 	ldw	r2,-25416(gp)
  817bec:	10800d83 	ldbu	r2,54(r2)
  817bf0:	1884b03a 	or	r2,r3,r2
  817bf4:	1007883a 	mov	r3,r2
  817bf8:	e0bffd17 	ldw	r2,-12(fp)
  817bfc:	10c00285 	stb	r3,10(r2)
        pevents++;
  817c00:	e0bffe17 	ldw	r2,-8(fp)
  817c04:	10800104 	addi	r2,r2,4
  817c08:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
  817c0c:	e0bffe17 	ldw	r2,-8(fp)
  817c10:	10800017 	ldw	r2,0(r2)
  817c14:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  817c18:	e0bffd17 	ldw	r2,-12(fp)
  817c1c:	1004c03a 	cmpne	r2,r2,zero
  817c20:	103fdd1e 	bne	r2,zero,817b98 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  817c24:	d0a72e17 	ldw	r2,-25416(gp)
  817c28:	10800d03 	ldbu	r2,52(r2)
  817c2c:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  817c30:	e13ffc03 	ldbu	r4,-16(fp)
  817c34:	e0fffc03 	ldbu	r3,-16(fp)
  817c38:	d0a72b44 	addi	r2,gp,-25427
  817c3c:	1885883a 	add	r2,r3,r2
  817c40:	10800003 	ldbu	r2,0(r2)
  817c44:	1007883a 	mov	r3,r2
  817c48:	d0a72e17 	ldw	r2,-25416(gp)
  817c4c:	10800d43 	ldbu	r2,53(r2)
  817c50:	0084303a 	nor	r2,zero,r2
  817c54:	1884703a 	and	r2,r3,r2
  817c58:	1007883a 	mov	r3,r2
  817c5c:	d0a72b44 	addi	r2,gp,-25427
  817c60:	2085883a 	add	r2,r4,r2
  817c64:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  817c68:	e0fffc03 	ldbu	r3,-16(fp)
  817c6c:	d0a72b44 	addi	r2,gp,-25427
  817c70:	1885883a 	add	r2,r3,r2
  817c74:	10800003 	ldbu	r2,0(r2)
  817c78:	10803fcc 	andi	r2,r2,255
  817c7c:	1004c03a 	cmpne	r2,r2,zero
  817c80:	1000071e 	bne	r2,zero,817ca0 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  817c84:	d0a72e17 	ldw	r2,-25416(gp)
  817c88:	10800d83 	ldbu	r2,54(r2)
  817c8c:	0084303a 	nor	r2,zero,r2
  817c90:	1007883a 	mov	r3,r2
  817c94:	d0a72b03 	ldbu	r2,-25428(gp)
  817c98:	1884703a 	and	r2,r3,r2
  817c9c:	d0a72b05 	stb	r2,-25428(gp)
    }
}
  817ca0:	e037883a 	mov	sp,fp
  817ca4:	df000017 	ldw	fp,0(sp)
  817ca8:	dec00104 	addi	sp,sp,4
  817cac:	f800283a 	ret

00817cb0 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  817cb0:	defffc04 	addi	sp,sp,-16
  817cb4:	df000315 	stw	fp,12(sp)
  817cb8:	df000304 	addi	fp,sp,12
  817cbc:	e13ffe15 	stw	r4,-8(fp)
  817cc0:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  817cc4:	e0bffe17 	ldw	r2,-8(fp)
  817cc8:	10800d03 	ldbu	r2,52(r2)
  817ccc:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  817cd0:	e13ffd03 	ldbu	r4,-12(fp)
  817cd4:	e0fffd03 	ldbu	r3,-12(fp)
  817cd8:	e0bfff17 	ldw	r2,-4(fp)
  817cdc:	1885883a 	add	r2,r3,r2
  817ce0:	10800204 	addi	r2,r2,8
  817ce4:	108000c3 	ldbu	r2,3(r2)
  817ce8:	1007883a 	mov	r3,r2
  817cec:	e0bffe17 	ldw	r2,-8(fp)
  817cf0:	10800d43 	ldbu	r2,53(r2)
  817cf4:	0084303a 	nor	r2,zero,r2
  817cf8:	1884703a 	and	r2,r3,r2
  817cfc:	1007883a 	mov	r3,r2
  817d00:	e0bfff17 	ldw	r2,-4(fp)
  817d04:	2085883a 	add	r2,r4,r2
  817d08:	10800204 	addi	r2,r2,8
  817d0c:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
  817d10:	e0fffd03 	ldbu	r3,-12(fp)
  817d14:	e0bfff17 	ldw	r2,-4(fp)
  817d18:	1885883a 	add	r2,r3,r2
  817d1c:	10800204 	addi	r2,r2,8
  817d20:	108000c3 	ldbu	r2,3(r2)
  817d24:	10803fcc 	andi	r2,r2,255
  817d28:	1004c03a 	cmpne	r2,r2,zero
  817d2c:	10000a1e 	bne	r2,zero,817d58 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  817d30:	e0bfff17 	ldw	r2,-4(fp)
  817d34:	10800283 	ldbu	r2,10(r2)
  817d38:	1007883a 	mov	r3,r2
  817d3c:	e0bffe17 	ldw	r2,-8(fp)
  817d40:	10800d83 	ldbu	r2,54(r2)
  817d44:	0084303a 	nor	r2,zero,r2
  817d48:	1884703a 	and	r2,r3,r2
  817d4c:	1007883a 	mov	r3,r2
  817d50:	e0bfff17 	ldw	r2,-4(fp)
  817d54:	10c00285 	stb	r3,10(r2)
    }
}
  817d58:	e037883a 	mov	sp,fp
  817d5c:	df000017 	ldw	fp,0(sp)
  817d60:	dec00104 	addi	sp,sp,4
  817d64:	f800283a 	ret

00817d68 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  817d68:	defffa04 	addi	sp,sp,-24
  817d6c:	df000515 	stw	fp,20(sp)
  817d70:	df000504 	addi	fp,sp,20
  817d74:	e13ffe15 	stw	r4,-8(fp)
  817d78:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  817d7c:	e0bffe17 	ldw	r2,-8(fp)
  817d80:	10800d03 	ldbu	r2,52(r2)
  817d84:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
  817d88:	e0bffe17 	ldw	r2,-8(fp)
  817d8c:	10800d83 	ldbu	r2,54(r2)
  817d90:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
  817d94:	e0bffe17 	ldw	r2,-8(fp)
  817d98:	10800d43 	ldbu	r2,53(r2)
  817d9c:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
  817da0:	e0bfff17 	ldw	r2,-4(fp)
  817da4:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
  817da8:	e0bffd17 	ldw	r2,-12(fp)
  817dac:	10800017 	ldw	r2,0(r2)
  817db0:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  817db4:	00002606 	br	817e50 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
  817db8:	e13ffb83 	ldbu	r4,-18(fp)
  817dbc:	e0fffb83 	ldbu	r3,-18(fp)
  817dc0:	e0bffc17 	ldw	r2,-16(fp)
  817dc4:	1885883a 	add	r2,r3,r2
  817dc8:	10800204 	addi	r2,r2,8
  817dcc:	108000c3 	ldbu	r2,3(r2)
  817dd0:	1007883a 	mov	r3,r2
  817dd4:	e0bffb03 	ldbu	r2,-20(fp)
  817dd8:	0084303a 	nor	r2,zero,r2
  817ddc:	1884703a 	and	r2,r3,r2
  817de0:	1007883a 	mov	r3,r2
  817de4:	e0bffc17 	ldw	r2,-16(fp)
  817de8:	2085883a 	add	r2,r4,r2
  817dec:	10800204 	addi	r2,r2,8
  817df0:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
  817df4:	e0fffb83 	ldbu	r3,-18(fp)
  817df8:	e0bffc17 	ldw	r2,-16(fp)
  817dfc:	1885883a 	add	r2,r3,r2
  817e00:	10800204 	addi	r2,r2,8
  817e04:	108000c3 	ldbu	r2,3(r2)
  817e08:	10803fcc 	andi	r2,r2,255
  817e0c:	1004c03a 	cmpne	r2,r2,zero
  817e10:	1000091e 	bne	r2,zero,817e38 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
  817e14:	e0bffc17 	ldw	r2,-16(fp)
  817e18:	10800283 	ldbu	r2,10(r2)
  817e1c:	1007883a 	mov	r3,r2
  817e20:	e0bffb43 	ldbu	r2,-19(fp)
  817e24:	0084303a 	nor	r2,zero,r2
  817e28:	1884703a 	and	r2,r3,r2
  817e2c:	1007883a 	mov	r3,r2
  817e30:	e0bffc17 	ldw	r2,-16(fp)
  817e34:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  817e38:	e0bffd17 	ldw	r2,-12(fp)
  817e3c:	10800104 	addi	r2,r2,4
  817e40:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
  817e44:	e0bffd17 	ldw	r2,-12(fp)
  817e48:	10800017 	ldw	r2,0(r2)
  817e4c:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  817e50:	e0bffc17 	ldw	r2,-16(fp)
  817e54:	1004c03a 	cmpne	r2,r2,zero
  817e58:	103fd71e 	bne	r2,zero,817db8 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  817e5c:	e037883a 	mov	sp,fp
  817e60:	df000017 	ldw	fp,0(sp)
  817e64:	dec00104 	addi	sp,sp,4
  817e68:	f800283a 	ret

00817e6c <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  817e6c:	defffc04 	addi	sp,sp,-16
  817e70:	df000315 	stw	fp,12(sp)
  817e74:	df000304 	addi	fp,sp,12
  817e78:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  817e7c:	e0bfff17 	ldw	r2,-4(fp)
  817e80:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  817e84:	e0bfff17 	ldw	r2,-4(fp)
  817e88:	108002c4 	addi	r2,r2,11
  817e8c:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  817e90:	e03ffd05 	stb	zero,-12(fp)
  817e94:	00000806 	br	817eb8 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
  817e98:	e0bffe17 	ldw	r2,-8(fp)
  817e9c:	10000005 	stb	zero,0(r2)
  817ea0:	e0bffe17 	ldw	r2,-8(fp)
  817ea4:	10800044 	addi	r2,r2,1
  817ea8:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  817eac:	e0bffd03 	ldbu	r2,-12(fp)
  817eb0:	10800044 	addi	r2,r2,1
  817eb4:	e0bffd05 	stb	r2,-12(fp)
  817eb8:	e0bffd03 	ldbu	r2,-12(fp)
  817ebc:	108000f0 	cmpltui	r2,r2,3
  817ec0:	103ff51e 	bne	r2,zero,817e98 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
  817ec4:	e037883a 	mov	sp,fp
  817ec8:	df000017 	ldw	fp,0(sp)
  817ecc:	dec00104 	addi	sp,sp,4
  817ed0:	f800283a 	ret

00817ed4 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  817ed4:	defffb04 	addi	sp,sp,-20
  817ed8:	dfc00415 	stw	ra,16(sp)
  817edc:	df000315 	stw	fp,12(sp)
  817ee0:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  817ee4:	010020f4 	movhi	r4,131
  817ee8:	213c1b04 	addi	r4,r4,-3988
  817eec:	0142d004 	movi	r5,2880
  817ef0:	08182380 	call	818238 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  817ef4:	008020f4 	movhi	r2,131
  817ef8:	10bc1b04 	addi	r2,r2,-3988
  817efc:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  817f00:	008020f4 	movhi	r2,131
  817f04:	10bc2704 	addi	r2,r2,-3940
  817f08:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  817f0c:	e03fff0d 	sth	zero,-4(fp)
  817f10:	00001306 	br	817f60 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  817f14:	e0bffe17 	ldw	r2,-8(fp)
  817f18:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  817f1c:	e0fffe17 	ldw	r3,-8(fp)
  817f20:	e0bffd17 	ldw	r2,-12(fp)
  817f24:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  817f28:	e0fffe17 	ldw	r3,-8(fp)
  817f2c:	00800fc4 	movi	r2,63
  817f30:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  817f34:	e0bffe17 	ldw	r2,-8(fp)
  817f38:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  817f3c:	e0bffe17 	ldw	r2,-8(fp)
  817f40:	10800c04 	addi	r2,r2,48
  817f44:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  817f48:	e0bffd17 	ldw	r2,-12(fp)
  817f4c:	10800c04 	addi	r2,r2,48
  817f50:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  817f54:	e0bfff0b 	ldhu	r2,-4(fp)
  817f58:	10800044 	addi	r2,r2,1
  817f5c:	e0bfff0d 	sth	r2,-4(fp)
  817f60:	e0bfff0b 	ldhu	r2,-4(fp)
  817f64:	10800ef0 	cmpltui	r2,r2,59
  817f68:	103fea1e 	bne	r2,zero,817f14 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  817f6c:	e0bffe17 	ldw	r2,-8(fp)
  817f70:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  817f74:	e0bffe17 	ldw	r2,-8(fp)
  817f78:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  817f7c:	e0fffe17 	ldw	r3,-8(fp)
  817f80:	00800fc4 	movi	r2,63
  817f84:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  817f88:	e0bffe17 	ldw	r2,-8(fp)
  817f8c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  817f90:	008020f4 	movhi	r2,131
  817f94:	10bc1b04 	addi	r2,r2,-3988
  817f98:	d0a72c15 	stw	r2,-25424(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  817f9c:	e037883a 	mov	sp,fp
  817fa0:	dfc00117 	ldw	ra,4(sp)
  817fa4:	df000017 	ldw	fp,0(sp)
  817fa8:	dec00204 	addi	sp,sp,8
  817fac:	f800283a 	ret

00817fb0 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  817fb0:	deffff04 	addi	sp,sp,-4
  817fb4:	df000015 	stw	fp,0(sp)
  817fb8:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  817fbc:	d0272f15 	stw	zero,-25412(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  817fc0:	d0272d05 	stb	zero,-25420(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  817fc4:	d0271f05 	stb	zero,-25476(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  817fc8:	d0272745 	stb	zero,-25443(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  817fcc:	d0271f45 	stb	zero,-25475(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  817fd0:	d0272415 	stw	zero,-25456(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  817fd4:	d0272015 	stw	zero,-25472(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  817fd8:	d0273215 	stw	zero,-25400(gp)
    OSIdleCtrMax  = 0L;
  817fdc:	d0272515 	stw	zero,-25452(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  817fe0:	d0273105 	stb	zero,-25404(gp)
#endif
}
  817fe4:	e037883a 	mov	sp,fp
  817fe8:	df000017 	ldw	fp,0(sp)
  817fec:	dec00104 	addi	sp,sp,4
  817ff0:	f800283a 	ret

00817ff4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  817ff4:	defffd04 	addi	sp,sp,-12
  817ff8:	df000215 	stw	fp,8(sp)
  817ffc:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  818000:	d0272b05 	stb	zero,-25428(gp)
    prdytbl       = &OSRdyTbl[0];
  818004:	d0a72b44 	addi	r2,gp,-25427
  818008:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  81800c:	e03fff05 	stb	zero,-4(fp)
  818010:	00000806 	br	818034 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
  818014:	e0bffe17 	ldw	r2,-8(fp)
  818018:	10000005 	stb	zero,0(r2)
  81801c:	e0bffe17 	ldw	r2,-8(fp)
  818020:	10800044 	addi	r2,r2,1
  818024:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  818028:	e0bfff03 	ldbu	r2,-4(fp)
  81802c:	10800044 	addi	r2,r2,1
  818030:	e0bfff05 	stb	r2,-4(fp)
  818034:	e0bfff03 	ldbu	r2,-4(fp)
  818038:	108000f0 	cmpltui	r2,r2,3
  81803c:	103ff51e 	bne	r2,zero,818014 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  818040:	d0272145 	stb	zero,-25467(gp)
    OSPrioHighRdy = 0;
  818044:	d0272105 	stb	zero,-25468(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  818048:	d0272915 	stw	zero,-25436(gp)
    OSTCBCur      = (OS_TCB *)0;
  81804c:	d0272e15 	stw	zero,-25416(gp)
}
  818050:	e037883a 	mov	sp,fp
  818054:	df000017 	ldw	fp,0(sp)
  818058:	dec00104 	addi	sp,sp,4
  81805c:	f800283a 	ret

00818060 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  818060:	defff804 	addi	sp,sp,-32
  818064:	dfc00715 	stw	ra,28(sp)
  818068:	df000615 	stw	fp,24(sp)
  81806c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  818070:	018020f4 	movhi	r6,131
  818074:	31bc1a04 	addi	r6,r6,-3992
  818078:	00bfffd4 	movui	r2,65535
  81807c:	d8800015 	stw	r2,0(sp)
  818080:	008020f4 	movhi	r2,131
  818084:	10ba1b04 	addi	r2,r2,-6036
  818088:	d8800115 	stw	r2,4(sp)
  81808c:	00808004 	movi	r2,512
  818090:	d8800215 	stw	r2,8(sp)
  818094:	d8000315 	stw	zero,12(sp)
  818098:	008000c4 	movi	r2,3
  81809c:	d8800415 	stw	r2,16(sp)
  8180a0:	010020b4 	movhi	r4,130
  8180a4:	21214504 	addi	r4,r4,-31468
  8180a8:	000b883a 	mov	r5,zero
  8180ac:	01c00504 	movi	r7,20
  8180b0:	081d2f40 	call	81d2f4 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  8180b4:	014020b4 	movhi	r5,130
  8180b8:	294d1904 	addi	r5,r5,13412
  8180bc:	01000504 	movi	r4,20
  8180c0:	e1bfff04 	addi	r6,fp,-4
  8180c4:	081dc280 	call	81dc28 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  8180c8:	e037883a 	mov	sp,fp
  8180cc:	dfc00117 	ldw	ra,4(sp)
  8180d0:	df000017 	ldw	fp,0(sp)
  8180d4:	dec00204 	addi	sp,sp,8
  8180d8:	f800283a 	ret

008180dc <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  8180dc:	defff804 	addi	sp,sp,-32
  8180e0:	dfc00715 	stw	ra,28(sp)
  8180e4:	df000615 	stw	fp,24(sp)
  8180e8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  8180ec:	018020f4 	movhi	r6,131
  8180f0:	31b9a204 	addi	r6,r6,-6520
  8180f4:	00bfff94 	movui	r2,65534
  8180f8:	d8800015 	stw	r2,0(sp)
  8180fc:	008020f4 	movhi	r2,131
  818100:	10b7a304 	addi	r2,r2,-8564
  818104:	d8800115 	stw	r2,4(sp)
  818108:	00808004 	movi	r2,512
  81810c:	d8800215 	stw	r2,8(sp)
  818110:	d8000315 	stw	zero,12(sp)
  818114:	008000c4 	movi	r2,3
  818118:	d8800415 	stw	r2,16(sp)
  81811c:	010020b4 	movhi	r4,130
  818120:	21215c04 	addi	r4,r4,-31376
  818124:	000b883a 	mov	r5,zero
  818128:	01c004c4 	movi	r7,19
  81812c:	081d2f40 	call	81d2f4 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  818130:	014020b4 	movhi	r5,130
  818134:	294d1d04 	addi	r5,r5,13428
  818138:	010004c4 	movi	r4,19
  81813c:	e1bfff04 	addi	r6,fp,-4
  818140:	081dc280 	call	81dc28 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  818144:	e037883a 	mov	sp,fp
  818148:	dfc00117 	ldw	ra,4(sp)
  81814c:	df000017 	ldw	fp,0(sp)
  818150:	dec00204 	addi	sp,sp,8
  818154:	f800283a 	ret

00818158 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  818158:	defffb04 	addi	sp,sp,-20
  81815c:	dfc00415 	stw	ra,16(sp)
  818160:	df000315 	stw	fp,12(sp)
  818164:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  818168:	010020f4 	movhi	r4,131
  81816c:	213eeb04 	addi	r4,r4,-1108
  818170:	01414404 	movi	r5,1296
  818174:	08182380 	call	818238 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  818178:	010020f4 	movhi	r4,131
  81817c:	21002f04 	addi	r4,r4,188
  818180:	01401504 	movi	r5,84
  818184:	08182380 	call	818238 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  818188:	008020f4 	movhi	r2,131
  81818c:	10beeb04 	addi	r2,r2,-1108
  818190:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  818194:	008020f4 	movhi	r2,131
  818198:	10bf0604 	addi	r2,r2,-1000
  81819c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  8181a0:	e03fff05 	stb	zero,-4(fp)
  8181a4:	00001106 	br	8181ec <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  8181a8:	e0fffe17 	ldw	r3,-8(fp)
  8181ac:	e0bffd17 	ldw	r2,-12(fp)
  8181b0:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  8181b4:	e0fffe17 	ldw	r3,-8(fp)
  8181b8:	00800fc4 	movi	r2,63
  8181bc:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  8181c0:	e0bffe17 	ldw	r2,-8(fp)
  8181c4:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  8181c8:	e0bffe17 	ldw	r2,-8(fp)
  8181cc:	10801b04 	addi	r2,r2,108
  8181d0:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  8181d4:	e0bffd17 	ldw	r2,-12(fp)
  8181d8:	10801b04 	addi	r2,r2,108
  8181dc:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  8181e0:	e0bfff03 	ldbu	r2,-4(fp)
  8181e4:	10800044 	addi	r2,r2,1
  8181e8:	e0bfff05 	stb	r2,-4(fp)
  8181ec:	e0bfff03 	ldbu	r2,-4(fp)
  8181f0:	108002f0 	cmpltui	r2,r2,11
  8181f4:	103fec1e 	bne	r2,zero,8181a8 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  8181f8:	e0bffe17 	ldw	r2,-8(fp)
  8181fc:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  818200:	e0fffe17 	ldw	r3,-8(fp)
  818204:	00800fc4 	movi	r2,63
  818208:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  81820c:	e0bffe17 	ldw	r2,-8(fp)
  818210:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  818214:	d0272215 	stw	zero,-25464(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  818218:	008020f4 	movhi	r2,131
  81821c:	10beeb04 	addi	r2,r2,-1108
  818220:	d0a72615 	stw	r2,-25448(gp)
}
  818224:	e037883a 	mov	sp,fp
  818228:	dfc00117 	ldw	ra,4(sp)
  81822c:	df000017 	ldw	fp,0(sp)
  818230:	dec00204 	addi	sp,sp,8
  818234:	f800283a 	ret

00818238 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  818238:	defffd04 	addi	sp,sp,-12
  81823c:	df000215 	stw	fp,8(sp)
  818240:	df000204 	addi	fp,sp,8
  818244:	e13ffe15 	stw	r4,-8(fp)
  818248:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
  81824c:	00000806 	br	818270 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  818250:	e0bffe17 	ldw	r2,-8(fp)
  818254:	10000005 	stb	zero,0(r2)
  818258:	e0bffe17 	ldw	r2,-8(fp)
  81825c:	10800044 	addi	r2,r2,1
  818260:	e0bffe15 	stw	r2,-8(fp)
        size--;
  818264:	e0bfff0b 	ldhu	r2,-4(fp)
  818268:	10bfffc4 	addi	r2,r2,-1
  81826c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  818270:	e0bfff0b 	ldhu	r2,-4(fp)
  818274:	1004c03a 	cmpne	r2,r2,zero
  818278:	103ff51e 	bne	r2,zero,818250 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  81827c:	e037883a 	mov	sp,fp
  818280:	df000017 	ldw	fp,0(sp)
  818284:	dec00104 	addi	sp,sp,4
  818288:	f800283a 	ret

0081828c <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  81828c:	defffc04 	addi	sp,sp,-16
  818290:	df000315 	stw	fp,12(sp)
  818294:	df000304 	addi	fp,sp,12
  818298:	e13ffd15 	stw	r4,-12(fp)
  81829c:	e17ffe15 	stw	r5,-8(fp)
  8182a0:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
  8182a4:	00000d06 	br	8182dc <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
  8182a8:	e0bffe17 	ldw	r2,-8(fp)
  8182ac:	10c00003 	ldbu	r3,0(r2)
  8182b0:	e0bffd17 	ldw	r2,-12(fp)
  8182b4:	10c00005 	stb	r3,0(r2)
  8182b8:	e0bffd17 	ldw	r2,-12(fp)
  8182bc:	10800044 	addi	r2,r2,1
  8182c0:	e0bffd15 	stw	r2,-12(fp)
  8182c4:	e0bffe17 	ldw	r2,-8(fp)
  8182c8:	10800044 	addi	r2,r2,1
  8182cc:	e0bffe15 	stw	r2,-8(fp)
        size--;
  8182d0:	e0bfff0b 	ldhu	r2,-4(fp)
  8182d4:	10bfffc4 	addi	r2,r2,-1
  8182d8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  8182dc:	e0bfff0b 	ldhu	r2,-4(fp)
  8182e0:	1004c03a 	cmpne	r2,r2,zero
  8182e4:	103ff01e 	bne	r2,zero,8182a8 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
  8182e8:	e037883a 	mov	sp,fp
  8182ec:	df000017 	ldw	fp,0(sp)
  8182f0:	dec00104 	addi	sp,sp,4
  8182f4:	f800283a 	ret

008182f8 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  8182f8:	defffb04 	addi	sp,sp,-20
  8182fc:	dfc00415 	stw	ra,16(sp)
  818300:	df000315 	stw	fp,12(sp)
  818304:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  818308:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81830c:	0005303a 	rdctl	r2,status
  818310:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818314:	e0fffe17 	ldw	r3,-8(fp)
  818318:	00bfff84 	movi	r2,-2
  81831c:	1884703a 	and	r2,r3,r2
  818320:	1001703a 	wrctl	status,r2
  
  return context;
  818324:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  818328:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  81832c:	d0a72d03 	ldbu	r2,-25420(gp)
  818330:	10803fcc 	andi	r2,r2,255
  818334:	1004c03a 	cmpne	r2,r2,zero
  818338:	10001b1e 	bne	r2,zero,8183a8 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  81833c:	d0a71f03 	ldbu	r2,-25476(gp)
  818340:	10803fcc 	andi	r2,r2,255
  818344:	1004c03a 	cmpne	r2,r2,zero
  818348:	1000171e 	bne	r2,zero,8183a8 <OS_Sched+0xb0>
            OS_SchedNew();
  81834c:	08183cc0 	call	8183cc <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  818350:	d0a72103 	ldbu	r2,-25468(gp)
  818354:	d0e72143 	ldbu	r3,-25467(gp)
  818358:	11003fcc 	andi	r4,r2,255
  81835c:	18803fcc 	andi	r2,r3,255
  818360:	20801126 	beq	r4,r2,8183a8 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  818364:	d0a72103 	ldbu	r2,-25468(gp)
  818368:	10803fcc 	andi	r2,r2,255
  81836c:	00c020f4 	movhi	r3,131
  818370:	18c02f04 	addi	r3,r3,188
  818374:	1085883a 	add	r2,r2,r2
  818378:	1085883a 	add	r2,r2,r2
  81837c:	10c5883a 	add	r2,r2,r3
  818380:	10800017 	ldw	r2,0(r2)
  818384:	d0a72915 	stw	r2,-25436(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  818388:	d0e72917 	ldw	r3,-25436(gp)
  81838c:	18800e17 	ldw	r2,56(r3)
  818390:	10800044 	addi	r2,r2,1
  818394:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  818398:	d0a72417 	ldw	r2,-25456(gp)
  81839c:	10800044 	addi	r2,r2,1
  8183a0:	d0a72415 	stw	r2,-25456(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  8183a4:	0821b540 	call	821b54 <OSCtxSw>
  8183a8:	e0bfff17 	ldw	r2,-4(fp)
  8183ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8183b0:	e0bffd17 	ldw	r2,-12(fp)
  8183b4:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  8183b8:	e037883a 	mov	sp,fp
  8183bc:	dfc00117 	ldw	ra,4(sp)
  8183c0:	df000017 	ldw	fp,0(sp)
  8183c4:	dec00204 	addi	sp,sp,8
  8183c8:	f800283a 	ret

008183cc <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  8183cc:	defffe04 	addi	sp,sp,-8
  8183d0:	df000115 	stw	fp,4(sp)
  8183d4:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  8183d8:	d0a72b03 	ldbu	r2,-25428(gp)
  8183dc:	10c03fcc 	andi	r3,r2,255
  8183e0:	008020b4 	movhi	r2,130
  8183e4:	108cd904 	addi	r2,r2,13156
  8183e8:	10c5883a 	add	r2,r2,r3
  8183ec:	10800003 	ldbu	r2,0(r2)
  8183f0:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  8183f4:	e0bfff03 	ldbu	r2,-4(fp)
  8183f8:	100490fa 	slli	r2,r2,3
  8183fc:	1009883a 	mov	r4,r2
  818400:	e0ffff03 	ldbu	r3,-4(fp)
  818404:	d0a72b44 	addi	r2,gp,-25427
  818408:	1885883a 	add	r2,r3,r2
  81840c:	10800003 	ldbu	r2,0(r2)
  818410:	10c03fcc 	andi	r3,r2,255
  818414:	008020b4 	movhi	r2,130
  818418:	108cd904 	addi	r2,r2,13156
  81841c:	10c5883a 	add	r2,r2,r3
  818420:	10800003 	ldbu	r2,0(r2)
  818424:	2085883a 	add	r2,r4,r2
  818428:	d0a72105 	stb	r2,-25468(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  81842c:	e037883a 	mov	sp,fp
  818430:	df000017 	ldw	fp,0(sp)
  818434:	dec00104 	addi	sp,sp,4
  818438:	f800283a 	ret

0081843c <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  81843c:	defffc04 	addi	sp,sp,-16
  818440:	df000315 	stw	fp,12(sp)
  818444:	df000304 	addi	fp,sp,12
  818448:	e13ffe15 	stw	r4,-8(fp)
  81844c:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  818450:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  818454:	00000d06 	br	81848c <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
  818458:	e0bfff17 	ldw	r2,-4(fp)
  81845c:	10c00003 	ldbu	r3,0(r2)
  818460:	e0bffe17 	ldw	r2,-8(fp)
  818464:	10c00005 	stb	r3,0(r2)
  818468:	e0bffe17 	ldw	r2,-8(fp)
  81846c:	10800044 	addi	r2,r2,1
  818470:	e0bffe15 	stw	r2,-8(fp)
  818474:	e0bfff17 	ldw	r2,-4(fp)
  818478:	10800044 	addi	r2,r2,1
  81847c:	e0bfff15 	stw	r2,-4(fp)
        len++;
  818480:	e0bffd03 	ldbu	r2,-12(fp)
  818484:	10800044 	addi	r2,r2,1
  818488:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  81848c:	e0bfff17 	ldw	r2,-4(fp)
  818490:	10800003 	ldbu	r2,0(r2)
  818494:	10803fcc 	andi	r2,r2,255
  818498:	1004c03a 	cmpne	r2,r2,zero
  81849c:	103fee1e 	bne	r2,zero,818458 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  8184a0:	e0bffe17 	ldw	r2,-8(fp)
  8184a4:	10000005 	stb	zero,0(r2)
    return (len);
  8184a8:	e0bffd03 	ldbu	r2,-12(fp)
}
  8184ac:	e037883a 	mov	sp,fp
  8184b0:	df000017 	ldw	fp,0(sp)
  8184b4:	dec00104 	addi	sp,sp,4
  8184b8:	f800283a 	ret

008184bc <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  8184bc:	defffd04 	addi	sp,sp,-12
  8184c0:	df000215 	stw	fp,8(sp)
  8184c4:	df000204 	addi	fp,sp,8
  8184c8:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  8184cc:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  8184d0:	00000606 	br	8184ec <OS_StrLen+0x30>
        psrc++;
  8184d4:	e0bfff17 	ldw	r2,-4(fp)
  8184d8:	10800044 	addi	r2,r2,1
  8184dc:	e0bfff15 	stw	r2,-4(fp)
        len++;
  8184e0:	e0bffe03 	ldbu	r2,-8(fp)
  8184e4:	10800044 	addi	r2,r2,1
  8184e8:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  8184ec:	e0bfff17 	ldw	r2,-4(fp)
  8184f0:	10800003 	ldbu	r2,0(r2)
  8184f4:	10803fcc 	andi	r2,r2,255
  8184f8:	1004c03a 	cmpne	r2,r2,zero
  8184fc:	103ff51e 	bne	r2,zero,8184d4 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
  818500:	e0bffe03 	ldbu	r2,-8(fp)
}
  818504:	e037883a 	mov	sp,fp
  818508:	df000017 	ldw	fp,0(sp)
  81850c:	dec00104 	addi	sp,sp,4
  818510:	f800283a 	ret

00818514 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  818514:	defffa04 	addi	sp,sp,-24
  818518:	dfc00515 	stw	ra,20(sp)
  81851c:	df000415 	stw	fp,16(sp)
  818520:	df000404 	addi	fp,sp,16
  818524:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  818528:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81852c:	0005303a 	rdctl	r2,status
  818530:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818534:	e0fffd17 	ldw	r3,-12(fp)
  818538:	00bfff84 	movi	r2,-2
  81853c:	1884703a 	and	r2,r3,r2
  818540:	1001703a 	wrctl	status,r2
  
  return context;
  818544:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  818548:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
  81854c:	d0a72017 	ldw	r2,-25472(gp)
  818550:	10800044 	addi	r2,r2,1
  818554:	d0a72015 	stw	r2,-25472(gp)
  818558:	e0bffe17 	ldw	r2,-8(fp)
  81855c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818560:	e0bffc17 	ldw	r2,-16(fp)
  818564:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  818568:	08220000 	call	822000 <OSTaskIdleHook>
    }
  81856c:	003fef06 	br	81852c <OS_TaskIdle+0x18>

00818570 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  818570:	defffa04 	addi	sp,sp,-24
  818574:	dfc00515 	stw	ra,20(sp)
  818578:	df000415 	stw	fp,16(sp)
  81857c:	df000404 	addi	fp,sp,16
  818580:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  818584:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  818588:	00000206 	br	818594 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  81858c:	01003204 	movi	r4,200
  818590:	081e5ec0 	call	81e5ec <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  818594:	d0a73103 	ldbu	r2,-25404(gp)
  818598:	10803fcc 	andi	r2,r2,255
  81859c:	1005003a 	cmpeq	r2,r2,zero
  8185a0:	103ffa1e 	bne	r2,zero,81858c <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  8185a4:	d1272517 	ldw	r4,-25452(gp)
  8185a8:	01401904 	movi	r5,100
  8185ac:	080cfd80 	call	80cfd8 <__udivsi3>
  8185b0:	d0a72515 	stw	r2,-25452(gp)
    if (OSIdleCtrMax == 0L) {
  8185b4:	d0a72517 	ldw	r2,-25452(gp)
  8185b8:	1004c03a 	cmpne	r2,r2,zero
  8185bc:	1000031e 	bne	r2,zero,8185cc <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
  8185c0:	d0272705 	stb	zero,-25444(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  8185c4:	01003fc4 	movi	r4,255
  8185c8:	081e2000 	call	81e200 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8185cc:	0005303a 	rdctl	r2,status
  8185d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8185d4:	e0fffd17 	ldw	r3,-12(fp)
  8185d8:	00bfff84 	movi	r2,-2
  8185dc:	1884703a 	and	r2,r3,r2
  8185e0:	1001703a 	wrctl	status,r2
  
  return context;
  8185e4:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  8185e8:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  8185ec:	d0a72017 	ldw	r2,-25472(gp)
  8185f0:	d0a73215 	stw	r2,-25400(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  8185f4:	d0272015 	stw	zero,-25472(gp)
  8185f8:	e0bffe17 	ldw	r2,-8(fp)
  8185fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818600:	e0bffc17 	ldw	r2,-16(fp)
  818604:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  818608:	d1273217 	ldw	r4,-25400(gp)
  81860c:	d1672517 	ldw	r5,-25452(gp)
  818610:	080cfd80 	call	80cfd8 <__udivsi3>
  818614:	1007883a 	mov	r3,r2
  818618:	00801904 	movi	r2,100
  81861c:	10c5c83a 	sub	r2,r2,r3
  818620:	d0a72705 	stb	r2,-25444(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  818624:	0821f900 	call	821f90 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  818628:	08186380 	call	818638 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  81862c:	01001904 	movi	r4,100
  818630:	081e5ec0 	call	81e5ec <OSTimeDly>
    }
  818634:	003fe506 	br	8185cc <OS_TaskStat+0x5c>

00818638 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  818638:	defffa04 	addi	sp,sp,-24
  81863c:	dfc00515 	stw	ra,20(sp)
  818640:	df000415 	stw	fp,16(sp)
  818644:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  818648:	e03ffc05 	stb	zero,-16(fp)
  81864c:	00002406 	br	8186e0 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  818650:	e13ffc03 	ldbu	r4,-16(fp)
  818654:	e17ffe04 	addi	r5,fp,-8
  818658:	081e0040 	call	81e004 <OSTaskStkChk>
  81865c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  818660:	e0bffc43 	ldbu	r2,-15(fp)
  818664:	1004c03a 	cmpne	r2,r2,zero
  818668:	10001a1e 	bne	r2,zero,8186d4 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  81866c:	e0bffc03 	ldbu	r2,-16(fp)
  818670:	00c020f4 	movhi	r3,131
  818674:	18c02f04 	addi	r3,r3,188
  818678:	1085883a 	add	r2,r2,r2
  81867c:	1085883a 	add	r2,r2,r2
  818680:	10c5883a 	add	r2,r2,r3
  818684:	10800017 	ldw	r2,0(r2)
  818688:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  81868c:	e0bffd17 	ldw	r2,-12(fp)
  818690:	1005003a 	cmpeq	r2,r2,zero
  818694:	10000f1e 	bne	r2,zero,8186d4 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  818698:	e0bffd17 	ldw	r2,-12(fp)
  81869c:	10800060 	cmpeqi	r2,r2,1
  8186a0:	10000c1e 	bne	r2,zero,8186d4 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  8186a4:	e0bffd17 	ldw	r2,-12(fp)
  8186a8:	10c00217 	ldw	r3,8(r2)
  8186ac:	e0bffd17 	ldw	r2,-12(fp)
  8186b0:	10800317 	ldw	r2,12(r2)
  8186b4:	1085883a 	add	r2,r2,r2
  8186b8:	1085883a 	add	r2,r2,r2
  8186bc:	1887883a 	add	r3,r3,r2
  8186c0:	e0bffd17 	ldw	r2,-12(fp)
  8186c4:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  8186c8:	e0ffff17 	ldw	r3,-4(fp)
  8186cc:	e0bffd17 	ldw	r2,-12(fp)
  8186d0:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  8186d4:	e0bffc03 	ldbu	r2,-16(fp)
  8186d8:	10800044 	addi	r2,r2,1
  8186dc:	e0bffc05 	stb	r2,-16(fp)
  8186e0:	e0bffc03 	ldbu	r2,-16(fp)
  8186e4:	10800570 	cmpltui	r2,r2,21
  8186e8:	103fd91e 	bne	r2,zero,818650 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
  8186ec:	e037883a 	mov	sp,fp
  8186f0:	dfc00117 	ldw	ra,4(sp)
  8186f4:	df000017 	ldw	fp,0(sp)
  8186f8:	dec00204 	addi	sp,sp,8
  8186fc:	f800283a 	ret

00818700 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  818700:	defff104 	addi	sp,sp,-60
  818704:	dfc00e15 	stw	ra,56(sp)
  818708:	df000d15 	stw	fp,52(sp)
  81870c:	df000d04 	addi	fp,sp,52
  818710:	e17ffb15 	stw	r5,-20(fp)
  818714:	e1bffc15 	stw	r6,-16(fp)
  818718:	e0800417 	ldw	r2,16(fp)
  81871c:	e13ffa05 	stb	r4,-24(fp)
  818720:	e1fffd0d 	sth	r7,-12(fp)
  818724:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  818728:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81872c:	0005303a 	rdctl	r2,status
  818730:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818734:	e0fff717 	ldw	r3,-36(fp)
  818738:	00bfff84 	movi	r2,-2
  81873c:	1884703a 	and	r2,r3,r2
  818740:	1001703a 	wrctl	status,r2
  
  return context;
  818744:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
  818748:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  81874c:	d0a72617 	ldw	r2,-25448(gp)
  818750:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
  818754:	e0bff917 	ldw	r2,-28(fp)
  818758:	1005003a 	cmpeq	r2,r2,zero
  81875c:	1000941e 	bne	r2,zero,8189b0 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  818760:	e0bff917 	ldw	r2,-28(fp)
  818764:	10800517 	ldw	r2,20(r2)
  818768:	d0a72615 	stw	r2,-25448(gp)
  81876c:	e0bff817 	ldw	r2,-32(fp)
  818770:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818774:	e0bff617 	ldw	r2,-40(fp)
  818778:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  81877c:	e0fff917 	ldw	r3,-28(fp)
  818780:	e0bffb17 	ldw	r2,-20(fp)
  818784:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  818788:	e0fff917 	ldw	r3,-28(fp)
  81878c:	e0bffa03 	ldbu	r2,-24(fp)
  818790:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  818794:	e0bff917 	ldw	r2,-28(fp)
  818798:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  81879c:	e0bff917 	ldw	r2,-28(fp)
  8187a0:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  8187a4:	e0bff917 	ldw	r2,-28(fp)
  8187a8:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  8187ac:	e0fff917 	ldw	r3,-28(fp)
  8187b0:	e0800317 	ldw	r2,12(fp)
  8187b4:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  8187b8:	e0fff917 	ldw	r3,-28(fp)
  8187bc:	e0800217 	ldw	r2,8(fp)
  8187c0:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  8187c4:	e0fff917 	ldw	r3,-28(fp)
  8187c8:	e0bffc17 	ldw	r2,-16(fp)
  8187cc:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  8187d0:	e0fff917 	ldw	r3,-28(fp)
  8187d4:	e0bffe0b 	ldhu	r2,-8(fp)
  8187d8:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  8187dc:	e0fff917 	ldw	r3,-28(fp)
  8187e0:	e0bffd0b 	ldhu	r2,-12(fp)
  8187e4:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  8187e8:	e0bff917 	ldw	r2,-28(fp)
  8187ec:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  8187f0:	e0bffa03 	ldbu	r2,-24(fp)
  8187f4:	1004d0fa 	srli	r2,r2,3
  8187f8:	1007883a 	mov	r3,r2
  8187fc:	e0bff917 	ldw	r2,-28(fp)
  818800:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  818804:	e0bffa03 	ldbu	r2,-24(fp)
  818808:	108001cc 	andi	r2,r2,7
  81880c:	1007883a 	mov	r3,r2
  818810:	e0bff917 	ldw	r2,-28(fp)
  818814:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  818818:	e0bff917 	ldw	r2,-28(fp)
  81881c:	10800d03 	ldbu	r2,52(r2)
  818820:	10c03fcc 	andi	r3,r2,255
  818824:	00800044 	movi	r2,1
  818828:	10c4983a 	sll	r2,r2,r3
  81882c:	1007883a 	mov	r3,r2
  818830:	e0bff917 	ldw	r2,-28(fp)
  818834:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  818838:	e0bff917 	ldw	r2,-28(fp)
  81883c:	10800cc3 	ldbu	r2,51(r2)
  818840:	10c03fcc 	andi	r3,r2,255
  818844:	00800044 	movi	r2,1
  818848:	10c4983a 	sll	r2,r2,r3
  81884c:	1007883a 	mov	r3,r2
  818850:	e0bff917 	ldw	r2,-28(fp)
  818854:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  818858:	e0bff917 	ldw	r2,-28(fp)
  81885c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  818860:	e0bff917 	ldw	r2,-28(fp)
  818864:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  818868:	e0bff917 	ldw	r2,-28(fp)
  81886c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  818870:	e0bff917 	ldw	r2,-28(fp)
  818874:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  818878:	e0bff917 	ldw	r2,-28(fp)
  81887c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  818880:	e0bff917 	ldw	r2,-28(fp)
  818884:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  818888:	e0bff917 	ldw	r2,-28(fp)
  81888c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  818890:	e0bff917 	ldw	r2,-28(fp)
  818894:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  818898:	e0bff917 	ldw	r2,-28(fp)
  81889c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  8188a0:	e0fff917 	ldw	r3,-28(fp)
  8188a4:	00800fc4 	movi	r2,63
  8188a8:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  8188ac:	e0bff917 	ldw	r2,-28(fp)
  8188b0:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  8188b4:	e13ff917 	ldw	r4,-28(fp)
  8188b8:	082201c0 	call	82201c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  8188bc:	e13ff917 	ldw	r4,-28(fp)
  8188c0:	0821f340 	call	821f34 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8188c4:	0005303a 	rdctl	r2,status
  8188c8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8188cc:	e0fff517 	ldw	r3,-44(fp)
  8188d0:	00bfff84 	movi	r2,-2
  8188d4:	1884703a 	and	r2,r3,r2
  8188d8:	1001703a 	wrctl	status,r2
  
  return context;
  8188dc:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  8188e0:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
  8188e4:	e0bffa03 	ldbu	r2,-24(fp)
  8188e8:	00c020f4 	movhi	r3,131
  8188ec:	18c02f04 	addi	r3,r3,188
  8188f0:	1085883a 	add	r2,r2,r2
  8188f4:	1085883a 	add	r2,r2,r2
  8188f8:	10c7883a 	add	r3,r2,r3
  8188fc:	e0bff917 	ldw	r2,-28(fp)
  818900:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  818904:	d0e72217 	ldw	r3,-25464(gp)
  818908:	e0bff917 	ldw	r2,-28(fp)
  81890c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  818910:	e0bff917 	ldw	r2,-28(fp)
  818914:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  818918:	d0a72217 	ldw	r2,-25464(gp)
  81891c:	1005003a 	cmpeq	r2,r2,zero
  818920:	1000031e 	bne	r2,zero,818930 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
  818924:	d0e72217 	ldw	r3,-25464(gp)
  818928:	e0bff917 	ldw	r2,-28(fp)
  81892c:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
  818930:	e0bff917 	ldw	r2,-28(fp)
  818934:	d0a72215 	stw	r2,-25464(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  818938:	e0bff917 	ldw	r2,-28(fp)
  81893c:	10c00d83 	ldbu	r3,54(r2)
  818940:	d0a72b03 	ldbu	r2,-25428(gp)
  818944:	1884b03a 	or	r2,r3,r2
  818948:	d0a72b05 	stb	r2,-25428(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  81894c:	e0bff917 	ldw	r2,-28(fp)
  818950:	10800d03 	ldbu	r2,52(r2)
  818954:	11003fcc 	andi	r4,r2,255
  818958:	e0bff917 	ldw	r2,-28(fp)
  81895c:	10800d03 	ldbu	r2,52(r2)
  818960:	10c03fcc 	andi	r3,r2,255
  818964:	d0a72b44 	addi	r2,gp,-25427
  818968:	1885883a 	add	r2,r3,r2
  81896c:	10c00003 	ldbu	r3,0(r2)
  818970:	e0bff917 	ldw	r2,-28(fp)
  818974:	10800d43 	ldbu	r2,53(r2)
  818978:	1884b03a 	or	r2,r3,r2
  81897c:	1007883a 	mov	r3,r2
  818980:	d0a72b44 	addi	r2,gp,-25427
  818984:	2085883a 	add	r2,r4,r2
  818988:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  81898c:	d0a72743 	ldbu	r2,-25443(gp)
  818990:	10800044 	addi	r2,r2,1
  818994:	d0a72745 	stb	r2,-25443(gp)
  818998:	e0bff817 	ldw	r2,-32(fp)
  81899c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8189a0:	e0bff417 	ldw	r2,-48(fp)
  8189a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  8189a8:	e03fff15 	stw	zero,-4(fp)
  8189ac:	00000606 	br	8189c8 <OS_TCBInit+0x2c8>
  8189b0:	e0bff817 	ldw	r2,-32(fp)
  8189b4:	e0bff315 	stw	r2,-52(fp)
  8189b8:	e0bff317 	ldw	r2,-52(fp)
  8189bc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  8189c0:	00801084 	movi	r2,66
  8189c4:	e0bfff15 	stw	r2,-4(fp)
  8189c8:	e0bfff17 	ldw	r2,-4(fp)
}
  8189cc:	e037883a 	mov	sp,fp
  8189d0:	dfc00117 	ldw	ra,4(sp)
  8189d4:	df000017 	ldw	fp,0(sp)
  8189d8:	dec00204 	addi	sp,sp,8
  8189dc:	f800283a 	ret

008189e0 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  8189e0:	defffe04 	addi	sp,sp,-8
  8189e4:	df000115 	stw	fp,4(sp)
  8189e8:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  8189ec:	d0a00f04 	addi	r2,gp,-32708
  8189f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  8189f4:	d0a01004 	addi	r2,gp,-32704
  8189f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  8189fc:	d0a01184 	addi	r2,gp,-32698
  818a00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  818a04:	d0a01204 	addi	r2,gp,-32696
  818a08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  818a0c:	d0a01104 	addi	r2,gp,-32700
  818a10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  818a14:	d0a01284 	addi	r2,gp,-32694
  818a18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  818a1c:	d0a01304 	addi	r2,gp,-32692
  818a20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  818a24:	d0a01384 	addi	r2,gp,-32690
  818a28:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  818a2c:	d0a01404 	addi	r2,gp,-32688
  818a30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  818a34:	d0a01484 	addi	r2,gp,-32686
  818a38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  818a3c:	d0a01504 	addi	r2,gp,-32684
  818a40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  818a44:	d0a01584 	addi	r2,gp,-32682
  818a48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  818a4c:	d0a01604 	addi	r2,gp,-32680
  818a50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  818a54:	d0a01684 	addi	r2,gp,-32678
  818a58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  818a5c:	d0a01704 	addi	r2,gp,-32676
  818a60:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  818a64:	d0a01784 	addi	r2,gp,-32674
  818a68:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  818a6c:	d0a01804 	addi	r2,gp,-32672
  818a70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  818a74:	d0a01884 	addi	r2,gp,-32670
  818a78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  818a7c:	d0a01904 	addi	r2,gp,-32668
  818a80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  818a84:	d0a01984 	addi	r2,gp,-32666
  818a88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  818a8c:	d0a01a04 	addi	r2,gp,-32664
  818a90:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  818a94:	d0a01a84 	addi	r2,gp,-32662
  818a98:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  818a9c:	d0a01b04 	addi	r2,gp,-32660
  818aa0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  818aa4:	d0a01b84 	addi	r2,gp,-32658
  818aa8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  818aac:	d0a01c04 	addi	r2,gp,-32656
  818ab0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  818ab4:	d0a01c84 	addi	r2,gp,-32654
  818ab8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  818abc:	d0a01d04 	addi	r2,gp,-32652
  818ac0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  818ac4:	d0a01d84 	addi	r2,gp,-32650
  818ac8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  818acc:	d0a01e04 	addi	r2,gp,-32648
  818ad0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  818ad4:	d0a01e84 	addi	r2,gp,-32646
  818ad8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  818adc:	d0a01f04 	addi	r2,gp,-32644
  818ae0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  818ae4:	d0a01f84 	addi	r2,gp,-32642
  818ae8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  818aec:	d0a02004 	addi	r2,gp,-32640
  818af0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  818af4:	d0a02084 	addi	r2,gp,-32638
  818af8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  818afc:	d0a02104 	addi	r2,gp,-32636
  818b00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  818b04:	d0a02184 	addi	r2,gp,-32634
  818b08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  818b0c:	d0a02204 	addi	r2,gp,-32632
  818b10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  818b14:	d0a02284 	addi	r2,gp,-32630
  818b18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  818b1c:	d0a02304 	addi	r2,gp,-32628
  818b20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  818b24:	d0a02384 	addi	r2,gp,-32626
  818b28:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  818b2c:	d0a02404 	addi	r2,gp,-32624
  818b30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  818b34:	d0a02484 	addi	r2,gp,-32622
  818b38:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  818b3c:	d0a02504 	addi	r2,gp,-32620
  818b40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  818b44:	d0a02584 	addi	r2,gp,-32618
  818b48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  818b4c:	d0a02604 	addi	r2,gp,-32616
  818b50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  818b54:	d0a02b04 	addi	r2,gp,-32596
  818b58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  818b5c:	e037883a 	mov	sp,fp
  818b60:	df000017 	ldw	fp,0(sp)
  818b64:	dec00104 	addi	sp,sp,4
  818b68:	f800283a 	ret

00818b6c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  818b6c:	defff104 	addi	sp,sp,-60
  818b70:	df000e15 	stw	fp,56(sp)
  818b74:	df000e04 	addi	fp,sp,56
  818b78:	e13ffa15 	stw	r4,-24(fp)
  818b7c:	e1fffd15 	stw	r7,-12(fp)
  818b80:	e17ffb0d 	sth	r5,-20(fp)
  818b84:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  818b88:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  818b8c:	e0bffd17 	ldw	r2,-12(fp)
  818b90:	1004c03a 	cmpne	r2,r2,zero
  818b94:	1000021e 	bne	r2,zero,818ba0 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
  818b98:	e03fff15 	stw	zero,-4(fp)
  818b9c:	0000bb06 	br	818e8c <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  818ba0:	e0bffa17 	ldw	r2,-24(fp)
  818ba4:	1004c03a 	cmpne	r2,r2,zero
  818ba8:	1000051e 	bne	r2,zero,818bc0 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  818bac:	e0fffd17 	ldw	r3,-12(fp)
  818bb0:	00801b84 	movi	r2,110
  818bb4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  818bb8:	e03fff15 	stw	zero,-4(fp)
  818bbc:	0000b306 	br	818e8c <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  818bc0:	e0bffa17 	ldw	r2,-24(fp)
  818bc4:	10800003 	ldbu	r2,0(r2)
  818bc8:	10803fcc 	andi	r2,r2,255
  818bcc:	10800160 	cmpeqi	r2,r2,5
  818bd0:	1000051e 	bne	r2,zero,818be8 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  818bd4:	e0fffd17 	ldw	r3,-12(fp)
  818bd8:	00800044 	movi	r2,1
  818bdc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  818be0:	e03fff15 	stw	zero,-4(fp)
  818be4:	0000a906 	br	818e8c <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  818be8:	e0fffc03 	ldbu	r3,-16(fp)
  818bec:	00bfe004 	movi	r2,-128
  818bf0:	1884703a 	and	r2,r3,r2
  818bf4:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  818bf8:	e0bff943 	ldbu	r2,-27(fp)
  818bfc:	1005003a 	cmpeq	r2,r2,zero
  818c00:	1000061e 	bne	r2,zero,818c1c <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
  818c04:	e0bffc03 	ldbu	r2,-16(fp)
  818c08:	10801fcc 	andi	r2,r2,127
  818c0c:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
  818c10:	00800044 	movi	r2,1
  818c14:	e0bff905 	stb	r2,-28(fp)
  818c18:	00000106 	br	818c20 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
  818c1c:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  818c20:	e0bffd17 	ldw	r2,-12(fp)
  818c24:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818c28:	0005303a 	rdctl	r2,status
  818c2c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818c30:	e0fff717 	ldw	r3,-36(fp)
  818c34:	00bfff84 	movi	r2,-2
  818c38:	1884703a 	and	r2,r3,r2
  818c3c:	1001703a 	wrctl	status,r2
  
  return context;
  818c40:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  818c44:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
  818c48:	e0bffc03 	ldbu	r2,-16(fp)
  818c4c:	e0bffe15 	stw	r2,-8(fp)
  818c50:	e0fffe17 	ldw	r3,-8(fp)
  818c54:	18800060 	cmpeqi	r2,r3,1
  818c58:	1000651e 	bne	r2,zero,818df0 <OSFlagAccept+0x284>
  818c5c:	e0fffe17 	ldw	r3,-8(fp)
  818c60:	18800088 	cmpgei	r2,r3,2
  818c64:	1000041e 	bne	r2,zero,818c78 <OSFlagAccept+0x10c>
  818c68:	e0fffe17 	ldw	r3,-8(fp)
  818c6c:	1805003a 	cmpeq	r2,r3,zero
  818c70:	1000421e 	bne	r2,zero,818d7c <OSFlagAccept+0x210>
  818c74:	00007b06 	br	818e64 <OSFlagAccept+0x2f8>
  818c78:	e0fffe17 	ldw	r3,-8(fp)
  818c7c:	188000a0 	cmpeqi	r2,r3,2
  818c80:	1000041e 	bne	r2,zero,818c94 <OSFlagAccept+0x128>
  818c84:	e0fffe17 	ldw	r3,-8(fp)
  818c88:	188000e0 	cmpeqi	r2,r3,3
  818c8c:	10001e1e 	bne	r2,zero,818d08 <OSFlagAccept+0x19c>
  818c90:	00007406 	br	818e64 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  818c94:	e0bffa17 	ldw	r2,-24(fp)
  818c98:	10c0020b 	ldhu	r3,8(r2)
  818c9c:	e0bffb0b 	ldhu	r2,-20(fp)
  818ca0:	1884703a 	and	r2,r3,r2
  818ca4:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  818ca8:	e0fff98b 	ldhu	r3,-26(fp)
  818cac:	e0bffb0b 	ldhu	r2,-20(fp)
  818cb0:	18800d1e 	bne	r3,r2,818ce8 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  818cb4:	e0bff903 	ldbu	r2,-28(fp)
  818cb8:	10800058 	cmpnei	r2,r2,1
  818cbc:	10000d1e 	bne	r2,zero,818cf4 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  818cc0:	e0bffa17 	ldw	r2,-24(fp)
  818cc4:	1080020b 	ldhu	r2,8(r2)
  818cc8:	1007883a 	mov	r3,r2
  818ccc:	e0bff98b 	ldhu	r2,-26(fp)
  818cd0:	0084303a 	nor	r2,zero,r2
  818cd4:	1884703a 	and	r2,r3,r2
  818cd8:	1007883a 	mov	r3,r2
  818cdc:	e0bffa17 	ldw	r2,-24(fp)
  818ce0:	10c0020d 	sth	r3,8(r2)
  818ce4:	00000306 	br	818cf4 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  818ce8:	e0fffd17 	ldw	r3,-12(fp)
  818cec:	00801c04 	movi	r2,112
  818cf0:	18800005 	stb	r2,0(r3)
  818cf4:	e0bff817 	ldw	r2,-32(fp)
  818cf8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818cfc:	e0bff617 	ldw	r2,-40(fp)
  818d00:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  818d04:	00005f06 	br	818e84 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  818d08:	e0bffa17 	ldw	r2,-24(fp)
  818d0c:	10c0020b 	ldhu	r3,8(r2)
  818d10:	e0bffb0b 	ldhu	r2,-20(fp)
  818d14:	1884703a 	and	r2,r3,r2
  818d18:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  818d1c:	e0bff98b 	ldhu	r2,-26(fp)
  818d20:	1005003a 	cmpeq	r2,r2,zero
  818d24:	10000d1e 	bne	r2,zero,818d5c <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  818d28:	e0bff903 	ldbu	r2,-28(fp)
  818d2c:	10800058 	cmpnei	r2,r2,1
  818d30:	10000d1e 	bne	r2,zero,818d68 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  818d34:	e0bffa17 	ldw	r2,-24(fp)
  818d38:	1080020b 	ldhu	r2,8(r2)
  818d3c:	1007883a 	mov	r3,r2
  818d40:	e0bff98b 	ldhu	r2,-26(fp)
  818d44:	0084303a 	nor	r2,zero,r2
  818d48:	1884703a 	and	r2,r3,r2
  818d4c:	1007883a 	mov	r3,r2
  818d50:	e0bffa17 	ldw	r2,-24(fp)
  818d54:	10c0020d 	sth	r3,8(r2)
  818d58:	00000306 	br	818d68 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  818d5c:	e0fffd17 	ldw	r3,-12(fp)
  818d60:	00801c04 	movi	r2,112
  818d64:	18800005 	stb	r2,0(r3)
  818d68:	e0bff817 	ldw	r2,-32(fp)
  818d6c:	e0bff515 	stw	r2,-44(fp)
  818d70:	e0bff517 	ldw	r2,-44(fp)
  818d74:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  818d78:	00004206 	br	818e84 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  818d7c:	e0bffa17 	ldw	r2,-24(fp)
  818d80:	1080020b 	ldhu	r2,8(r2)
  818d84:	0084303a 	nor	r2,zero,r2
  818d88:	1007883a 	mov	r3,r2
  818d8c:	e0bffb0b 	ldhu	r2,-20(fp)
  818d90:	1884703a 	and	r2,r3,r2
  818d94:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  818d98:	e0fff98b 	ldhu	r3,-26(fp)
  818d9c:	e0bffb0b 	ldhu	r2,-20(fp)
  818da0:	18800b1e 	bne	r3,r2,818dd0 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  818da4:	e0bff903 	ldbu	r2,-28(fp)
  818da8:	10800058 	cmpnei	r2,r2,1
  818dac:	10000b1e 	bne	r2,zero,818ddc <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  818db0:	e0bffa17 	ldw	r2,-24(fp)
  818db4:	10c0020b 	ldhu	r3,8(r2)
  818db8:	e0bff98b 	ldhu	r2,-26(fp)
  818dbc:	1884b03a 	or	r2,r3,r2
  818dc0:	1007883a 	mov	r3,r2
  818dc4:	e0bffa17 	ldw	r2,-24(fp)
  818dc8:	10c0020d 	sth	r3,8(r2)
  818dcc:	00000306 	br	818ddc <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  818dd0:	e0fffd17 	ldw	r3,-12(fp)
  818dd4:	00801c04 	movi	r2,112
  818dd8:	18800005 	stb	r2,0(r3)
  818ddc:	e0bff817 	ldw	r2,-32(fp)
  818de0:	e0bff415 	stw	r2,-48(fp)
  818de4:	e0bff417 	ldw	r2,-48(fp)
  818de8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  818dec:	00002506 	br	818e84 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  818df0:	e0bffa17 	ldw	r2,-24(fp)
  818df4:	1080020b 	ldhu	r2,8(r2)
  818df8:	0084303a 	nor	r2,zero,r2
  818dfc:	1007883a 	mov	r3,r2
  818e00:	e0bffb0b 	ldhu	r2,-20(fp)
  818e04:	1884703a 	and	r2,r3,r2
  818e08:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  818e0c:	e0bff98b 	ldhu	r2,-26(fp)
  818e10:	1005003a 	cmpeq	r2,r2,zero
  818e14:	10000b1e 	bne	r2,zero,818e44 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  818e18:	e0bff903 	ldbu	r2,-28(fp)
  818e1c:	10800058 	cmpnei	r2,r2,1
  818e20:	10000b1e 	bne	r2,zero,818e50 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  818e24:	e0bffa17 	ldw	r2,-24(fp)
  818e28:	10c0020b 	ldhu	r3,8(r2)
  818e2c:	e0bff98b 	ldhu	r2,-26(fp)
  818e30:	1884b03a 	or	r2,r3,r2
  818e34:	1007883a 	mov	r3,r2
  818e38:	e0bffa17 	ldw	r2,-24(fp)
  818e3c:	10c0020d 	sth	r3,8(r2)
  818e40:	00000306 	br	818e50 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  818e44:	e0fffd17 	ldw	r3,-12(fp)
  818e48:	00801c04 	movi	r2,112
  818e4c:	18800005 	stb	r2,0(r3)
  818e50:	e0bff817 	ldw	r2,-32(fp)
  818e54:	e0bff315 	stw	r2,-52(fp)
  818e58:	e0bff317 	ldw	r2,-52(fp)
  818e5c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  818e60:	00000806 	br	818e84 <OSFlagAccept+0x318>
  818e64:	e0bff817 	ldw	r2,-32(fp)
  818e68:	e0bff215 	stw	r2,-56(fp)
  818e6c:	e0bff217 	ldw	r2,-56(fp)
  818e70:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  818e74:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  818e78:	e0fffd17 	ldw	r3,-12(fp)
  818e7c:	00801bc4 	movi	r2,111
  818e80:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
  818e84:	e0bff98b 	ldhu	r2,-26(fp)
  818e88:	e0bfff15 	stw	r2,-4(fp)
  818e8c:	e0bfff17 	ldw	r2,-4(fp)
}
  818e90:	e037883a 	mov	sp,fp
  818e94:	df000017 	ldw	fp,0(sp)
  818e98:	dec00104 	addi	sp,sp,4
  818e9c:	f800283a 	ret

00818ea0 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  818ea0:	defff704 	addi	sp,sp,-36
  818ea4:	df000815 	stw	fp,32(sp)
  818ea8:	df000804 	addi	fp,sp,32
  818eac:	e17ffe15 	stw	r5,-8(fp)
  818eb0:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  818eb4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  818eb8:	e0bffe17 	ldw	r2,-8(fp)
  818ebc:	1004c03a 	cmpne	r2,r2,zero
  818ec0:	1000021e 	bne	r2,zero,818ecc <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  818ec4:	e03fff15 	stw	zero,-4(fp)
  818ec8:	00003f06 	br	818fc8 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  818ecc:	008020b4 	movhi	r2,130
  818ed0:	109b1604 	addi	r2,r2,27736
  818ed4:	10800003 	ldbu	r2,0(r2)
  818ed8:	10803fcc 	andi	r2,r2,255
  818edc:	1005003a 	cmpeq	r2,r2,zero
  818ee0:	1000051e 	bne	r2,zero,818ef8 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  818ee4:	e0fffe17 	ldw	r3,-8(fp)
  818ee8:	00800404 	movi	r2,16
  818eec:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
  818ef0:	e03fff15 	stw	zero,-4(fp)
  818ef4:	00003406 	br	818fc8 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818ef8:	0005303a 	rdctl	r2,status
  818efc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818f00:	e0fffa17 	ldw	r3,-24(fp)
  818f04:	00bfff84 	movi	r2,-2
  818f08:	1884703a 	and	r2,r3,r2
  818f0c:	1001703a 	wrctl	status,r2
  
  return context;
  818f10:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  818f14:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  818f18:	008020b4 	movhi	r2,130
  818f1c:	109b1904 	addi	r2,r2,27748
  818f20:	10800017 	ldw	r2,0(r2)
  818f24:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  818f28:	e0bffc17 	ldw	r2,-16(fp)
  818f2c:	1005003a 	cmpeq	r2,r2,zero
  818f30:	10001c1e 	bne	r2,zero,818fa4 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  818f34:	008020b4 	movhi	r2,130
  818f38:	109b1904 	addi	r2,r2,27748
  818f3c:	10800017 	ldw	r2,0(r2)
  818f40:	10800117 	ldw	r2,4(r2)
  818f44:	1007883a 	mov	r3,r2
  818f48:	008020b4 	movhi	r2,130
  818f4c:	109b1904 	addi	r2,r2,27748
  818f50:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  818f54:	e0fffc17 	ldw	r3,-16(fp)
  818f58:	00800144 	movi	r2,5
  818f5c:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  818f60:	e0fffc17 	ldw	r3,-16(fp)
  818f64:	e0bffd0b 	ldhu	r2,-12(fp)
  818f68:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  818f6c:	e0bffc17 	ldw	r2,-16(fp)
  818f70:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  818f74:	e0fffc17 	ldw	r3,-16(fp)
  818f78:	00800fc4 	movi	r2,63
  818f7c:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  818f80:	e0bffc17 	ldw	r2,-16(fp)
  818f84:	100002c5 	stb	zero,11(r2)
  818f88:	e0bffb17 	ldw	r2,-20(fp)
  818f8c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818f90:	e0bff917 	ldw	r2,-28(fp)
  818f94:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  818f98:	e0bffe17 	ldw	r2,-8(fp)
  818f9c:	10000005 	stb	zero,0(r2)
  818fa0:	00000706 	br	818fc0 <OSFlagCreate+0x120>
  818fa4:	e0bffb17 	ldw	r2,-20(fp)
  818fa8:	e0bff815 	stw	r2,-32(fp)
  818fac:	e0bff817 	ldw	r2,-32(fp)
  818fb0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  818fb4:	e0fffe17 	ldw	r3,-8(fp)
  818fb8:	00801c84 	movi	r2,114
  818fbc:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  818fc0:	e0bffc17 	ldw	r2,-16(fp)
  818fc4:	e0bfff15 	stw	r2,-4(fp)
  818fc8:	e0bfff17 	ldw	r2,-4(fp)
}
  818fcc:	e037883a 	mov	sp,fp
  818fd0:	df000017 	ldw	fp,0(sp)
  818fd4:	dec00104 	addi	sp,sp,4
  818fd8:	f800283a 	ret

00818fdc <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  818fdc:	defff004 	addi	sp,sp,-64
  818fe0:	dfc00f15 	stw	ra,60(sp)
  818fe4:	df000e15 	stw	fp,56(sp)
  818fe8:	df000e04 	addi	fp,sp,56
  818fec:	e13ffb15 	stw	r4,-20(fp)
  818ff0:	e1bffd15 	stw	r6,-12(fp)
  818ff4:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  818ff8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  818ffc:	e0bffd17 	ldw	r2,-12(fp)
  819000:	1004c03a 	cmpne	r2,r2,zero
  819004:	1000031e 	bne	r2,zero,819014 <OSFlagDel+0x38>
        return (pgrp);
  819008:	e0bffb17 	ldw	r2,-20(fp)
  81900c:	e0bfff15 	stw	r2,-4(fp)
  819010:	00009606 	br	81926c <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  819014:	e0bffb17 	ldw	r2,-20(fp)
  819018:	1004c03a 	cmpne	r2,r2,zero
  81901c:	1000061e 	bne	r2,zero,819038 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  819020:	e0fffd17 	ldw	r3,-12(fp)
  819024:	00801b84 	movi	r2,110
  819028:	18800005 	stb	r2,0(r3)
        return (pgrp);
  81902c:	e0fffb17 	ldw	r3,-20(fp)
  819030:	e0ffff15 	stw	r3,-4(fp)
  819034:	00008d06 	br	81926c <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  819038:	008020b4 	movhi	r2,130
  81903c:	109b1604 	addi	r2,r2,27736
  819040:	10800003 	ldbu	r2,0(r2)
  819044:	10803fcc 	andi	r2,r2,255
  819048:	1005003a 	cmpeq	r2,r2,zero
  81904c:	1000061e 	bne	r2,zero,819068 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  819050:	e0fffd17 	ldw	r3,-12(fp)
  819054:	008003c4 	movi	r2,15
  819058:	18800005 	stb	r2,0(r3)
        return (pgrp);
  81905c:	e0bffb17 	ldw	r2,-20(fp)
  819060:	e0bfff15 	stw	r2,-4(fp)
  819064:	00008106 	br	81926c <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  819068:	e0bffb17 	ldw	r2,-20(fp)
  81906c:	10800003 	ldbu	r2,0(r2)
  819070:	10803fcc 	andi	r2,r2,255
  819074:	10800160 	cmpeqi	r2,r2,5
  819078:	1000061e 	bne	r2,zero,819094 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
  81907c:	e0fffd17 	ldw	r3,-12(fp)
  819080:	00800044 	movi	r2,1
  819084:	18800005 	stb	r2,0(r3)
        return (pgrp);
  819088:	e0fffb17 	ldw	r3,-20(fp)
  81908c:	e0ffff15 	stw	r3,-4(fp)
  819090:	00007606 	br	81926c <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819094:	0005303a 	rdctl	r2,status
  819098:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81909c:	e0fff617 	ldw	r3,-40(fp)
  8190a0:	00bfff84 	movi	r2,-2
  8190a4:	1884703a 	and	r2,r3,r2
  8190a8:	1001703a 	wrctl	status,r2
  
  return context;
  8190ac:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  8190b0:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  8190b4:	e0bffb17 	ldw	r2,-20(fp)
  8190b8:	10800117 	ldw	r2,4(r2)
  8190bc:	1005003a 	cmpeq	r2,r2,zero
  8190c0:	1000031e 	bne	r2,zero,8190d0 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  8190c4:	00800044 	movi	r2,1
  8190c8:	e0bffa05 	stb	r2,-24(fp)
  8190cc:	00000106 	br	8190d4 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  8190d0:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  8190d4:	e0bffc03 	ldbu	r2,-16(fp)
  8190d8:	e0bffe15 	stw	r2,-8(fp)
  8190dc:	e0fffe17 	ldw	r3,-8(fp)
  8190e0:	1805003a 	cmpeq	r2,r3,zero
  8190e4:	1000041e 	bne	r2,zero,8190f8 <OSFlagDel+0x11c>
  8190e8:	e0fffe17 	ldw	r3,-8(fp)
  8190ec:	18800060 	cmpeqi	r2,r3,1
  8190f0:	1000281e 	bne	r2,zero,819194 <OSFlagDel+0x1b8>
  8190f4:	00005206 	br	819240 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  8190f8:	e0bffa03 	ldbu	r2,-24(fp)
  8190fc:	1004c03a 	cmpne	r2,r2,zero
  819100:	10001a1e 	bne	r2,zero,81916c <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  819104:	e0fffb17 	ldw	r3,-20(fp)
  819108:	00800fc4 	movi	r2,63
  81910c:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  819110:	e0bffb17 	ldw	r2,-20(fp)
  819114:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  819118:	e0bffb17 	ldw	r2,-20(fp)
  81911c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  819120:	008020b4 	movhi	r2,130
  819124:	109b1904 	addi	r2,r2,27748
  819128:	10c00017 	ldw	r3,0(r2)
  81912c:	e0bffb17 	ldw	r2,-20(fp)
  819130:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  819134:	e0bffb17 	ldw	r2,-20(fp)
  819138:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  81913c:	00c020b4 	movhi	r3,130
  819140:	18db1904 	addi	r3,r3,27748
  819144:	e0bffb17 	ldw	r2,-20(fp)
  819148:	18800015 	stw	r2,0(r3)
  81914c:	e0bff717 	ldw	r2,-36(fp)
  819150:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819154:	e0bff517 	ldw	r2,-44(fp)
  819158:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  81915c:	e0bffd17 	ldw	r2,-12(fp)
  819160:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  819164:	e03ff815 	stw	zero,-32(fp)
  819168:	00003e06 	br	819264 <OSFlagDel+0x288>
  81916c:	e0bff717 	ldw	r2,-36(fp)
  819170:	e0bff415 	stw	r2,-48(fp)
  819174:	e0bff417 	ldw	r2,-48(fp)
  819178:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  81917c:	e0fffd17 	ldw	r3,-12(fp)
  819180:	00801244 	movi	r2,73
  819184:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
  819188:	e0bffb17 	ldw	r2,-20(fp)
  81918c:	e0bff815 	stw	r2,-32(fp)
             }
             break;
  819190:	00003406 	br	819264 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  819194:	e0bffb17 	ldw	r2,-20(fp)
  819198:	10800117 	ldw	r2,4(r2)
  81919c:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  8191a0:	00000606 	br	8191bc <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  8191a4:	e13ff917 	ldw	r4,-28(fp)
  8191a8:	000b883a 	mov	r5,zero
  8191ac:	081a2ec0 	call	81a2ec <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  8191b0:	e0bff917 	ldw	r2,-28(fp)
  8191b4:	10800017 	ldw	r2,0(r2)
  8191b8:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  8191bc:	e0bff917 	ldw	r2,-28(fp)
  8191c0:	1004c03a 	cmpne	r2,r2,zero
  8191c4:	103ff71e 	bne	r2,zero,8191a4 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  8191c8:	e0fffb17 	ldw	r3,-20(fp)
  8191cc:	00800fc4 	movi	r2,63
  8191d0:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  8191d4:	e0bffb17 	ldw	r2,-20(fp)
  8191d8:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  8191dc:	e0bffb17 	ldw	r2,-20(fp)
  8191e0:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  8191e4:	008020b4 	movhi	r2,130
  8191e8:	109b1904 	addi	r2,r2,27748
  8191ec:	10c00017 	ldw	r3,0(r2)
  8191f0:	e0bffb17 	ldw	r2,-20(fp)
  8191f4:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  8191f8:	e0bffb17 	ldw	r2,-20(fp)
  8191fc:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  819200:	00c020b4 	movhi	r3,130
  819204:	18db1904 	addi	r3,r3,27748
  819208:	e0bffb17 	ldw	r2,-20(fp)
  81920c:	18800015 	stw	r2,0(r3)
  819210:	e0bff717 	ldw	r2,-36(fp)
  819214:	e0bff315 	stw	r2,-52(fp)
  819218:	e0bff317 	ldw	r2,-52(fp)
  81921c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  819220:	e0bffa03 	ldbu	r2,-24(fp)
  819224:	10800058 	cmpnei	r2,r2,1
  819228:	1000011e 	bne	r2,zero,819230 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  81922c:	08182f80 	call	8182f8 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  819230:	e0bffd17 	ldw	r2,-12(fp)
  819234:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  819238:	e03ff815 	stw	zero,-32(fp)
             break;
  81923c:	00000906 	br	819264 <OSFlagDel+0x288>
  819240:	e0bff717 	ldw	r2,-36(fp)
  819244:	e0bff215 	stw	r2,-56(fp)
  819248:	e0bff217 	ldw	r2,-56(fp)
  81924c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  819250:	e0fffd17 	ldw	r3,-12(fp)
  819254:	008001c4 	movi	r2,7
  819258:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
  81925c:	e0bffb17 	ldw	r2,-20(fp)
  819260:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
  819264:	e0bff817 	ldw	r2,-32(fp)
  819268:	e0bfff15 	stw	r2,-4(fp)
  81926c:	e0bfff17 	ldw	r2,-4(fp)
}
  819270:	e037883a 	mov	sp,fp
  819274:	dfc00117 	ldw	ra,4(sp)
  819278:	df000017 	ldw	fp,0(sp)
  81927c:	dec00204 	addi	sp,sp,8
  819280:	f800283a 	ret

00819284 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  819284:	defff504 	addi	sp,sp,-44
  819288:	dfc00a15 	stw	ra,40(sp)
  81928c:	df000915 	stw	fp,36(sp)
  819290:	df000904 	addi	fp,sp,36
  819294:	e13ffc15 	stw	r4,-16(fp)
  819298:	e17ffd15 	stw	r5,-12(fp)
  81929c:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8192a0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8192a4:	e0bffe17 	ldw	r2,-8(fp)
  8192a8:	1004c03a 	cmpne	r2,r2,zero
  8192ac:	1000021e 	bne	r2,zero,8192b8 <OSFlagNameGet+0x34>
        return (0);
  8192b0:	e03fff15 	stw	zero,-4(fp)
  8192b4:	00003e06 	br	8193b0 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  8192b8:	e0bffc17 	ldw	r2,-16(fp)
  8192bc:	1004c03a 	cmpne	r2,r2,zero
  8192c0:	1000051e 	bne	r2,zero,8192d8 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  8192c4:	e0fffe17 	ldw	r3,-8(fp)
  8192c8:	00801b84 	movi	r2,110
  8192cc:	18800005 	stb	r2,0(r3)
        return (0);
  8192d0:	e03fff15 	stw	zero,-4(fp)
  8192d4:	00003606 	br	8193b0 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  8192d8:	e0bffd17 	ldw	r2,-12(fp)
  8192dc:	1004c03a 	cmpne	r2,r2,zero
  8192e0:	1000051e 	bne	r2,zero,8192f8 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  8192e4:	e0fffe17 	ldw	r3,-8(fp)
  8192e8:	00800304 	movi	r2,12
  8192ec:	18800005 	stb	r2,0(r3)
        return (0);
  8192f0:	e03fff15 	stw	zero,-4(fp)
  8192f4:	00002e06 	br	8193b0 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8192f8:	008020b4 	movhi	r2,130
  8192fc:	109b1604 	addi	r2,r2,27736
  819300:	10800003 	ldbu	r2,0(r2)
  819304:	10803fcc 	andi	r2,r2,255
  819308:	1005003a 	cmpeq	r2,r2,zero
  81930c:	1000051e 	bne	r2,zero,819324 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  819310:	e0fffe17 	ldw	r3,-8(fp)
  819314:	00800444 	movi	r2,17
  819318:	18800005 	stb	r2,0(r3)
        return (0);
  81931c:	e03fff15 	stw	zero,-4(fp)
  819320:	00002306 	br	8193b0 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819324:	0005303a 	rdctl	r2,status
  819328:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81932c:	e0fff917 	ldw	r3,-28(fp)
  819330:	00bfff84 	movi	r2,-2
  819334:	1884703a 	and	r2,r3,r2
  819338:	1001703a 	wrctl	status,r2
  
  return context;
  81933c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  819340:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  819344:	e0bffc17 	ldw	r2,-16(fp)
  819348:	10800003 	ldbu	r2,0(r2)
  81934c:	10803fcc 	andi	r2,r2,255
  819350:	10800160 	cmpeqi	r2,r2,5
  819354:	1000091e 	bne	r2,zero,81937c <OSFlagNameGet+0xf8>
  819358:	e0bffa17 	ldw	r2,-24(fp)
  81935c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819360:	e0bff817 	ldw	r2,-32(fp)
  819364:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  819368:	e0fffe17 	ldw	r3,-8(fp)
  81936c:	00800044 	movi	r2,1
  819370:	18800005 	stb	r2,0(r3)
        return (0);
  819374:	e03fff15 	stw	zero,-4(fp)
  819378:	00000d06 	br	8193b0 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  81937c:	e0bffc17 	ldw	r2,-16(fp)
  819380:	11400284 	addi	r5,r2,10
  819384:	e13ffd17 	ldw	r4,-12(fp)
  819388:	081843c0 	call	81843c <OS_StrCopy>
  81938c:	e0bffb05 	stb	r2,-20(fp)
  819390:	e0bffa17 	ldw	r2,-24(fp)
  819394:	e0bff715 	stw	r2,-36(fp)
  819398:	e0bff717 	ldw	r2,-36(fp)
  81939c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8193a0:	e0bffe17 	ldw	r2,-8(fp)
  8193a4:	10000005 	stb	zero,0(r2)
    return (len);
  8193a8:	e0bffb03 	ldbu	r2,-20(fp)
  8193ac:	e0bfff15 	stw	r2,-4(fp)
  8193b0:	e0bfff17 	ldw	r2,-4(fp)
}
  8193b4:	e037883a 	mov	sp,fp
  8193b8:	dfc00117 	ldw	ra,4(sp)
  8193bc:	df000017 	ldw	fp,0(sp)
  8193c0:	dec00204 	addi	sp,sp,8
  8193c4:	f800283a 	ret

008193c8 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  8193c8:	defff504 	addi	sp,sp,-44
  8193cc:	dfc00a15 	stw	ra,40(sp)
  8193d0:	df000915 	stw	fp,36(sp)
  8193d4:	df000904 	addi	fp,sp,36
  8193d8:	e13ffd15 	stw	r4,-12(fp)
  8193dc:	e17ffe15 	stw	r5,-8(fp)
  8193e0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8193e4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8193e8:	e0bfff17 	ldw	r2,-4(fp)
  8193ec:	1005003a 	cmpeq	r2,r2,zero
  8193f0:	1000451e 	bne	r2,zero,819508 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  8193f4:	e0bffd17 	ldw	r2,-12(fp)
  8193f8:	1004c03a 	cmpne	r2,r2,zero
  8193fc:	1000041e 	bne	r2,zero,819410 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  819400:	e0ffff17 	ldw	r3,-4(fp)
  819404:	00801b84 	movi	r2,110
  819408:	18800005 	stb	r2,0(r3)
        return;
  81940c:	00003e06 	br	819508 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  819410:	e0bffe17 	ldw	r2,-8(fp)
  819414:	1004c03a 	cmpne	r2,r2,zero
  819418:	1000041e 	bne	r2,zero,81942c <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  81941c:	e0ffff17 	ldw	r3,-4(fp)
  819420:	00800304 	movi	r2,12
  819424:	18800005 	stb	r2,0(r3)
        return;
  819428:	00003706 	br	819508 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81942c:	008020b4 	movhi	r2,130
  819430:	109b1604 	addi	r2,r2,27736
  819434:	10800003 	ldbu	r2,0(r2)
  819438:	10803fcc 	andi	r2,r2,255
  81943c:	1005003a 	cmpeq	r2,r2,zero
  819440:	1000041e 	bne	r2,zero,819454 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  819444:	e0ffff17 	ldw	r3,-4(fp)
  819448:	00800484 	movi	r2,18
  81944c:	18800005 	stb	r2,0(r3)
        return;
  819450:	00002d06 	br	819508 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819454:	0005303a 	rdctl	r2,status
  819458:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81945c:	e0fffa17 	ldw	r3,-24(fp)
  819460:	00bfff84 	movi	r2,-2
  819464:	1884703a 	and	r2,r3,r2
  819468:	1001703a 	wrctl	status,r2
  
  return context;
  81946c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  819470:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  819474:	e0bffd17 	ldw	r2,-12(fp)
  819478:	10800003 	ldbu	r2,0(r2)
  81947c:	10803fcc 	andi	r2,r2,255
  819480:	10800160 	cmpeqi	r2,r2,5
  819484:	1000081e 	bne	r2,zero,8194a8 <OSFlagNameSet+0xe0>
  819488:	e0bffb17 	ldw	r2,-20(fp)
  81948c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819490:	e0bff917 	ldw	r2,-28(fp)
  819494:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  819498:	e0ffff17 	ldw	r3,-4(fp)
  81949c:	00800044 	movi	r2,1
  8194a0:	18800005 	stb	r2,0(r3)
        return;
  8194a4:	00001806 	br	819508 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  8194a8:	e13ffe17 	ldw	r4,-8(fp)
  8194ac:	08184bc0 	call	8184bc <OS_StrLen>
  8194b0:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  8194b4:	e0bffc03 	ldbu	r2,-16(fp)
  8194b8:	10800830 	cmpltui	r2,r2,32
  8194bc:	1000081e 	bne	r2,zero,8194e0 <OSFlagNameSet+0x118>
  8194c0:	e0bffb17 	ldw	r2,-20(fp)
  8194c4:	e0bff815 	stw	r2,-32(fp)
  8194c8:	e0bff817 	ldw	r2,-32(fp)
  8194cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  8194d0:	e0ffff17 	ldw	r3,-4(fp)
  8194d4:	00801cc4 	movi	r2,115
  8194d8:	18800005 	stb	r2,0(r3)
        return;
  8194dc:	00000a06 	br	819508 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  8194e0:	e0bffd17 	ldw	r2,-12(fp)
  8194e4:	11000284 	addi	r4,r2,10
  8194e8:	e17ffe17 	ldw	r5,-8(fp)
  8194ec:	081843c0 	call	81843c <OS_StrCopy>
  8194f0:	e0bffb17 	ldw	r2,-20(fp)
  8194f4:	e0bff715 	stw	r2,-36(fp)
  8194f8:	e0bff717 	ldw	r2,-36(fp)
  8194fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  819500:	e0bfff17 	ldw	r2,-4(fp)
  819504:	10000005 	stb	zero,0(r2)
    return;
}
  819508:	e037883a 	mov	sp,fp
  81950c:	dfc00117 	ldw	ra,4(sp)
  819510:	df000017 	ldw	fp,0(sp)
  819514:	dec00204 	addi	sp,sp,8
  819518:	f800283a 	ret

0081951c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  81951c:	deffe004 	addi	sp,sp,-128
  819520:	dfc01f15 	stw	ra,124(sp)
  819524:	df001e15 	stw	fp,120(sp)
  819528:	df001e04 	addi	fp,sp,120
  81952c:	e13ff915 	stw	r4,-28(fp)
  819530:	e17ffa0d 	sth	r5,-24(fp)
  819534:	e1bffb05 	stb	r6,-20(fp)
  819538:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  81953c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  819540:	e0800217 	ldw	r2,8(fp)
  819544:	1004c03a 	cmpne	r2,r2,zero
  819548:	1000021e 	bne	r2,zero,819554 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
  81954c:	e03fff15 	stw	zero,-4(fp)
  819550:	00017d06 	br	819b48 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  819554:	e0bff917 	ldw	r2,-28(fp)
  819558:	1004c03a 	cmpne	r2,r2,zero
  81955c:	1000051e 	bne	r2,zero,819574 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  819560:	e0c00217 	ldw	r3,8(fp)
  819564:	00801b84 	movi	r2,110
  819568:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  81956c:	e03fff15 	stw	zero,-4(fp)
  819570:	00017506 	br	819b48 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  819574:	008020b4 	movhi	r2,130
  819578:	109b1604 	addi	r2,r2,27736
  81957c:	10800003 	ldbu	r2,0(r2)
  819580:	10803fcc 	andi	r2,r2,255
  819584:	1005003a 	cmpeq	r2,r2,zero
  819588:	1000051e 	bne	r2,zero,8195a0 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  81958c:	e0c00217 	ldw	r3,8(fp)
  819590:	00800084 	movi	r2,2
  819594:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  819598:	e03fff15 	stw	zero,-4(fp)
  81959c:	00016a06 	br	819b48 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  8195a0:	008020b4 	movhi	r2,130
  8195a4:	109b0804 	addi	r2,r2,27680
  8195a8:	10800003 	ldbu	r2,0(r2)
  8195ac:	10803fcc 	andi	r2,r2,255
  8195b0:	1005003a 	cmpeq	r2,r2,zero
  8195b4:	1000051e 	bne	r2,zero,8195cc <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  8195b8:	e0c00217 	ldw	r3,8(fp)
  8195bc:	00800344 	movi	r2,13
  8195c0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8195c4:	e03fff15 	stw	zero,-4(fp)
  8195c8:	00015f06 	br	819b48 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  8195cc:	e0bff917 	ldw	r2,-28(fp)
  8195d0:	10800003 	ldbu	r2,0(r2)
  8195d4:	10803fcc 	andi	r2,r2,255
  8195d8:	10800160 	cmpeqi	r2,r2,5
  8195dc:	1000051e 	bne	r2,zero,8195f4 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
  8195e0:	e0c00217 	ldw	r3,8(fp)
  8195e4:	00800044 	movi	r2,1
  8195e8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8195ec:	e03fff15 	stw	zero,-4(fp)
  8195f0:	00015506 	br	819b48 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  8195f4:	e0fffb03 	ldbu	r3,-20(fp)
  8195f8:	00bfe004 	movi	r2,-128
  8195fc:	1884703a 	and	r2,r3,r2
  819600:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  819604:	e0bff283 	ldbu	r2,-54(fp)
  819608:	1005003a 	cmpeq	r2,r2,zero
  81960c:	1000071e 	bne	r2,zero,81962c <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  819610:	00c01fc4 	movi	r3,127
  819614:	e0bffb03 	ldbu	r2,-20(fp)
  819618:	10c4703a 	and	r2,r2,r3
  81961c:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
  819620:	00800044 	movi	r2,1
  819624:	e0bff205 	stb	r2,-56(fp)
  819628:	00000106 	br	819630 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
  81962c:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819630:	0005303a 	rdctl	r2,status
  819634:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819638:	e0fff017 	ldw	r3,-64(fp)
  81963c:	00bfff84 	movi	r2,-2
  819640:	1884703a 	and	r2,r3,r2
  819644:	1001703a 	wrctl	status,r2
  
  return context;
  819648:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  81964c:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
  819650:	e0bffb03 	ldbu	r2,-20(fp)
  819654:	e0bffe15 	stw	r2,-8(fp)
  819658:	e0fffe17 	ldw	r3,-8(fp)
  81965c:	18800060 	cmpeqi	r2,r3,1
  819660:	1000981e 	bne	r2,zero,8198c4 <OSFlagPend+0x3a8>
  819664:	e0fffe17 	ldw	r3,-8(fp)
  819668:	18800088 	cmpgei	r2,r3,2
  81966c:	1000041e 	bne	r2,zero,819680 <OSFlagPend+0x164>
  819670:	e0fffe17 	ldw	r3,-8(fp)
  819674:	1805003a 	cmpeq	r2,r3,zero
  819678:	1000641e 	bne	r2,zero,81980c <OSFlagPend+0x2f0>
  81967c:	0000bf06 	br	81997c <OSFlagPend+0x460>
  819680:	e0fffe17 	ldw	r3,-8(fp)
  819684:	188000a0 	cmpeqi	r2,r3,2
  819688:	1000041e 	bne	r2,zero,81969c <OSFlagPend+0x180>
  81968c:	e0fffe17 	ldw	r3,-8(fp)
  819690:	188000e0 	cmpeqi	r2,r3,3
  819694:	10002f1e 	bne	r2,zero,819754 <OSFlagPend+0x238>
  819698:	0000b806 	br	81997c <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  81969c:	e0bff917 	ldw	r2,-28(fp)
  8196a0:	10c0020b 	ldhu	r3,8(r2)
  8196a4:	e0bffa0b 	ldhu	r2,-24(fp)
  8196a8:	1884703a 	and	r2,r3,r2
  8196ac:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  8196b0:	e0fff30b 	ldhu	r3,-52(fp)
  8196b4:	e0bffa0b 	ldhu	r2,-24(fp)
  8196b8:	18801a1e 	bne	r3,r2,819724 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8196bc:	e0bff203 	ldbu	r2,-56(fp)
  8196c0:	10800058 	cmpnei	r2,r2,1
  8196c4:	1000091e 	bne	r2,zero,8196ec <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  8196c8:	e0bff917 	ldw	r2,-28(fp)
  8196cc:	1080020b 	ldhu	r2,8(r2)
  8196d0:	1007883a 	mov	r3,r2
  8196d4:	e0bff30b 	ldhu	r2,-52(fp)
  8196d8:	0084303a 	nor	r2,zero,r2
  8196dc:	1884703a 	and	r2,r3,r2
  8196e0:	1007883a 	mov	r3,r2
  8196e4:	e0bff917 	ldw	r2,-28(fp)
  8196e8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  8196ec:	008020b4 	movhi	r2,130
  8196f0:	109b1704 	addi	r2,r2,27740
  8196f4:	10c00017 	ldw	r3,0(r2)
  8196f8:	e0bff30b 	ldhu	r2,-52(fp)
  8196fc:	18800b0d 	sth	r2,44(r3)
  819700:	e0bff117 	ldw	r2,-60(fp)
  819704:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819708:	e0bfef17 	ldw	r2,-68(fp)
  81970c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  819710:	e0800217 	ldw	r2,8(fp)
  819714:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  819718:	e0bff30b 	ldhu	r2,-52(fp)
  81971c:	e0bfff15 	stw	r2,-4(fp)
  819720:	00010906 	br	819b48 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  819724:	e1bffa0b 	ldhu	r6,-24(fp)
  819728:	e1fffb03 	ldbu	r7,-20(fp)
  81972c:	e0bffc0b 	ldhu	r2,-16(fp)
  819730:	e17ff404 	addi	r5,fp,-48
  819734:	d8800015 	stw	r2,0(sp)
  819738:	e13ff917 	ldw	r4,-28(fp)
  81973c:	081a0440 	call	81a044 <OS_FlagBlock>
  819740:	e0bff117 	ldw	r2,-60(fp)
  819744:	e0bfee15 	stw	r2,-72(fp)
  819748:	e0bfee17 	ldw	r2,-72(fp)
  81974c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  819750:	00009506 	br	8199a8 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  819754:	e0bff917 	ldw	r2,-28(fp)
  819758:	10c0020b 	ldhu	r3,8(r2)
  81975c:	e0bffa0b 	ldhu	r2,-24(fp)
  819760:	1884703a 	and	r2,r3,r2
  819764:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  819768:	e0bff30b 	ldhu	r2,-52(fp)
  81976c:	1005003a 	cmpeq	r2,r2,zero
  819770:	10001a1e 	bne	r2,zero,8197dc <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  819774:	e0bff203 	ldbu	r2,-56(fp)
  819778:	10800058 	cmpnei	r2,r2,1
  81977c:	1000091e 	bne	r2,zero,8197a4 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  819780:	e0bff917 	ldw	r2,-28(fp)
  819784:	1080020b 	ldhu	r2,8(r2)
  819788:	1007883a 	mov	r3,r2
  81978c:	e0bff30b 	ldhu	r2,-52(fp)
  819790:	0084303a 	nor	r2,zero,r2
  819794:	1884703a 	and	r2,r3,r2
  819798:	1007883a 	mov	r3,r2
  81979c:	e0bff917 	ldw	r2,-28(fp)
  8197a0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  8197a4:	008020b4 	movhi	r2,130
  8197a8:	109b1704 	addi	r2,r2,27740
  8197ac:	10c00017 	ldw	r3,0(r2)
  8197b0:	e0bff30b 	ldhu	r2,-52(fp)
  8197b4:	18800b0d 	sth	r2,44(r3)
  8197b8:	e0bff117 	ldw	r2,-60(fp)
  8197bc:	e0bfed15 	stw	r2,-76(fp)
  8197c0:	e0bfed17 	ldw	r2,-76(fp)
  8197c4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  8197c8:	e0800217 	ldw	r2,8(fp)
  8197cc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  8197d0:	e0fff30b 	ldhu	r3,-52(fp)
  8197d4:	e0ffff15 	stw	r3,-4(fp)
  8197d8:	0000db06 	br	819b48 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  8197dc:	e1bffa0b 	ldhu	r6,-24(fp)
  8197e0:	e1fffb03 	ldbu	r7,-20(fp)
  8197e4:	e0bffc0b 	ldhu	r2,-16(fp)
  8197e8:	e17ff404 	addi	r5,fp,-48
  8197ec:	d8800015 	stw	r2,0(sp)
  8197f0:	e13ff917 	ldw	r4,-28(fp)
  8197f4:	081a0440 	call	81a044 <OS_FlagBlock>
  8197f8:	e0bff117 	ldw	r2,-60(fp)
  8197fc:	e0bfec15 	stw	r2,-80(fp)
  819800:	e0bfec17 	ldw	r2,-80(fp)
  819804:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  819808:	00006706 	br	8199a8 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  81980c:	e0bff917 	ldw	r2,-28(fp)
  819810:	1080020b 	ldhu	r2,8(r2)
  819814:	0084303a 	nor	r2,zero,r2
  819818:	1007883a 	mov	r3,r2
  81981c:	e0bffa0b 	ldhu	r2,-24(fp)
  819820:	1884703a 	and	r2,r3,r2
  819824:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  819828:	e0fff30b 	ldhu	r3,-52(fp)
  81982c:	e0bffa0b 	ldhu	r2,-24(fp)
  819830:	1880181e 	bne	r3,r2,819894 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  819834:	e0bff203 	ldbu	r2,-56(fp)
  819838:	10800058 	cmpnei	r2,r2,1
  81983c:	1000071e 	bne	r2,zero,81985c <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  819840:	e0bff917 	ldw	r2,-28(fp)
  819844:	10c0020b 	ldhu	r3,8(r2)
  819848:	e0bff30b 	ldhu	r2,-52(fp)
  81984c:	1884b03a 	or	r2,r3,r2
  819850:	1007883a 	mov	r3,r2
  819854:	e0bff917 	ldw	r2,-28(fp)
  819858:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  81985c:	008020b4 	movhi	r2,130
  819860:	109b1704 	addi	r2,r2,27740
  819864:	10c00017 	ldw	r3,0(r2)
  819868:	e0bff30b 	ldhu	r2,-52(fp)
  81986c:	18800b0d 	sth	r2,44(r3)
  819870:	e0bff117 	ldw	r2,-60(fp)
  819874:	e0bfeb15 	stw	r2,-84(fp)
  819878:	e0bfeb17 	ldw	r2,-84(fp)
  81987c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  819880:	e0800217 	ldw	r2,8(fp)
  819884:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  819888:	e0bff30b 	ldhu	r2,-52(fp)
  81988c:	e0bfff15 	stw	r2,-4(fp)
  819890:	0000ad06 	br	819b48 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  819894:	e1bffa0b 	ldhu	r6,-24(fp)
  819898:	e1fffb03 	ldbu	r7,-20(fp)
  81989c:	e0bffc0b 	ldhu	r2,-16(fp)
  8198a0:	e17ff404 	addi	r5,fp,-48
  8198a4:	d8800015 	stw	r2,0(sp)
  8198a8:	e13ff917 	ldw	r4,-28(fp)
  8198ac:	081a0440 	call	81a044 <OS_FlagBlock>
  8198b0:	e0bff117 	ldw	r2,-60(fp)
  8198b4:	e0bfea15 	stw	r2,-88(fp)
  8198b8:	e0bfea17 	ldw	r2,-88(fp)
  8198bc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  8198c0:	00003906 	br	8199a8 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  8198c4:	e0bff917 	ldw	r2,-28(fp)
  8198c8:	1080020b 	ldhu	r2,8(r2)
  8198cc:	0084303a 	nor	r2,zero,r2
  8198d0:	1007883a 	mov	r3,r2
  8198d4:	e0bffa0b 	ldhu	r2,-24(fp)
  8198d8:	1884703a 	and	r2,r3,r2
  8198dc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  8198e0:	e0bff30b 	ldhu	r2,-52(fp)
  8198e4:	1005003a 	cmpeq	r2,r2,zero
  8198e8:	1000181e 	bne	r2,zero,81994c <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8198ec:	e0bff203 	ldbu	r2,-56(fp)
  8198f0:	10800058 	cmpnei	r2,r2,1
  8198f4:	1000071e 	bne	r2,zero,819914 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  8198f8:	e0bff917 	ldw	r2,-28(fp)
  8198fc:	10c0020b 	ldhu	r3,8(r2)
  819900:	e0bff30b 	ldhu	r2,-52(fp)
  819904:	1884b03a 	or	r2,r3,r2
  819908:	1007883a 	mov	r3,r2
  81990c:	e0bff917 	ldw	r2,-28(fp)
  819910:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  819914:	008020b4 	movhi	r2,130
  819918:	109b1704 	addi	r2,r2,27740
  81991c:	10c00017 	ldw	r3,0(r2)
  819920:	e0bff30b 	ldhu	r2,-52(fp)
  819924:	18800b0d 	sth	r2,44(r3)
  819928:	e0bff117 	ldw	r2,-60(fp)
  81992c:	e0bfe915 	stw	r2,-92(fp)
  819930:	e0bfe917 	ldw	r2,-92(fp)
  819934:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  819938:	e0800217 	ldw	r2,8(fp)
  81993c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  819940:	e0fff30b 	ldhu	r3,-52(fp)
  819944:	e0ffff15 	stw	r3,-4(fp)
  819948:	00007f06 	br	819b48 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  81994c:	e1bffa0b 	ldhu	r6,-24(fp)
  819950:	e1fffb03 	ldbu	r7,-20(fp)
  819954:	e0bffc0b 	ldhu	r2,-16(fp)
  819958:	e17ff404 	addi	r5,fp,-48
  81995c:	d8800015 	stw	r2,0(sp)
  819960:	e13ff917 	ldw	r4,-28(fp)
  819964:	081a0440 	call	81a044 <OS_FlagBlock>
  819968:	e0bff117 	ldw	r2,-60(fp)
  81996c:	e0bfe815 	stw	r2,-96(fp)
  819970:	e0bfe817 	ldw	r2,-96(fp)
  819974:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  819978:	00000b06 	br	8199a8 <OSFlagPend+0x48c>
  81997c:	e0bff117 	ldw	r2,-60(fp)
  819980:	e0bfe715 	stw	r2,-100(fp)
  819984:	e0bfe717 	ldw	r2,-100(fp)
  819988:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  81998c:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  819990:	e0c00217 	ldw	r3,8(fp)
  819994:	00801bc4 	movi	r2,111
  819998:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
  81999c:	e0bff30b 	ldhu	r2,-52(fp)
  8199a0:	e0bfff15 	stw	r2,-4(fp)
  8199a4:	00006806 	br	819b48 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  8199a8:	08182f80 	call	8182f8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8199ac:	0005303a 	rdctl	r2,status
  8199b0:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8199b4:	e0ffe617 	ldw	r3,-104(fp)
  8199b8:	00bfff84 	movi	r2,-2
  8199bc:	1884703a 	and	r2,r3,r2
  8199c0:	1001703a 	wrctl	status,r2
  
  return context;
  8199c4:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
  8199c8:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  8199cc:	008020b4 	movhi	r2,130
  8199d0:	109b1704 	addi	r2,r2,27740
  8199d4:	10800017 	ldw	r2,0(r2)
  8199d8:	10800c43 	ldbu	r2,49(r2)
  8199dc:	10803fcc 	andi	r2,r2,255
  8199e0:	1005003a 	cmpeq	r2,r2,zero
  8199e4:	1000221e 	bne	r2,zero,819a70 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  8199e8:	008020b4 	movhi	r2,130
  8199ec:	109b1704 	addi	r2,r2,27740
  8199f0:	10800017 	ldw	r2,0(r2)
  8199f4:	10800c43 	ldbu	r2,49(r2)
  8199f8:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  8199fc:	008020b4 	movhi	r2,130
  819a00:	109b1704 	addi	r2,r2,27740
  819a04:	10800017 	ldw	r2,0(r2)
  819a08:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  819a0c:	e13ff404 	addi	r4,fp,-48
  819a10:	081a3fc0 	call	81a3fc <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  819a14:	008020b4 	movhi	r2,130
  819a18:	109b1704 	addi	r2,r2,27740
  819a1c:	10800017 	ldw	r2,0(r2)
  819a20:	10000c05 	stb	zero,48(r2)
  819a24:	e0bff117 	ldw	r2,-60(fp)
  819a28:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819a2c:	e0bfe517 	ldw	r2,-108(fp)
  819a30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  819a34:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
  819a38:	e0bff243 	ldbu	r2,-55(fp)
  819a3c:	108000a0 	cmpeqi	r2,r2,2
  819a40:	1000011e 	bne	r2,zero,819a48 <OSFlagPend+0x52c>
  819a44:	00000406 	br	819a58 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  819a48:	e0c00217 	ldw	r3,8(fp)
  819a4c:	00800384 	movi	r2,14
  819a50:	18800005 	stb	r2,0(r3)
                 break;
  819a54:	00000306 	br	819a64 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  819a58:	e0c00217 	ldw	r3,8(fp)
  819a5c:	00800284 	movi	r2,10
  819a60:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
  819a64:	e0fff30b 	ldhu	r3,-52(fp)
  819a68:	e0ffff15 	stw	r3,-4(fp)
  819a6c:	00003606 	br	819b48 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  819a70:	008020b4 	movhi	r2,130
  819a74:	109b1704 	addi	r2,r2,27740
  819a78:	10800017 	ldw	r2,0(r2)
  819a7c:	10800b0b 	ldhu	r2,44(r2)
  819a80:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  819a84:	e0bff203 	ldbu	r2,-56(fp)
  819a88:	10800058 	cmpnei	r2,r2,1
  819a8c:	1000261e 	bne	r2,zero,819b28 <OSFlagPend+0x60c>
        switch (wait_type) {
  819a90:	e0bffb03 	ldbu	r2,-20(fp)
  819a94:	e0bffd15 	stw	r2,-12(fp)
  819a98:	e0fffd17 	ldw	r3,-12(fp)
  819a9c:	1804803a 	cmplt	r2,r3,zero
  819aa0:	1000181e 	bne	r2,zero,819b04 <OSFlagPend+0x5e8>
  819aa4:	e0fffd17 	ldw	r3,-12(fp)
  819aa8:	18800090 	cmplti	r2,r3,2
  819aac:	10000d1e 	bne	r2,zero,819ae4 <OSFlagPend+0x5c8>
  819ab0:	e0fffd17 	ldw	r3,-12(fp)
  819ab4:	18800108 	cmpgei	r2,r3,4
  819ab8:	1000121e 	bne	r2,zero,819b04 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  819abc:	e0bff917 	ldw	r2,-28(fp)
  819ac0:	1080020b 	ldhu	r2,8(r2)
  819ac4:	1007883a 	mov	r3,r2
  819ac8:	e0bff30b 	ldhu	r2,-52(fp)
  819acc:	0084303a 	nor	r2,zero,r2
  819ad0:	1884703a 	and	r2,r3,r2
  819ad4:	1007883a 	mov	r3,r2
  819ad8:	e0bff917 	ldw	r2,-28(fp)
  819adc:	10c0020d 	sth	r3,8(r2)
                 break;
  819ae0:	00001106 	br	819b28 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  819ae4:	e0bff917 	ldw	r2,-28(fp)
  819ae8:	10c0020b 	ldhu	r3,8(r2)
  819aec:	e0bff30b 	ldhu	r2,-52(fp)
  819af0:	1884b03a 	or	r2,r3,r2
  819af4:	1007883a 	mov	r3,r2
  819af8:	e0bff917 	ldw	r2,-28(fp)
  819afc:	10c0020d 	sth	r3,8(r2)
                 break;
  819b00:	00000906 	br	819b28 <OSFlagPend+0x60c>
  819b04:	e0bff117 	ldw	r2,-60(fp)
  819b08:	e0bfe415 	stw	r2,-112(fp)
  819b0c:	e0bfe417 	ldw	r2,-112(fp)
  819b10:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  819b14:	e0c00217 	ldw	r3,8(fp)
  819b18:	00801bc4 	movi	r2,111
  819b1c:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  819b20:	e03fff15 	stw	zero,-4(fp)
  819b24:	00000806 	br	819b48 <OSFlagPend+0x62c>
  819b28:	e0bff117 	ldw	r2,-60(fp)
  819b2c:	e0bfe315 	stw	r2,-116(fp)
  819b30:	e0bfe317 	ldw	r2,-116(fp)
  819b34:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  819b38:	e0800217 	ldw	r2,8(fp)
  819b3c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  819b40:	e0bff30b 	ldhu	r2,-52(fp)
  819b44:	e0bfff15 	stw	r2,-4(fp)
  819b48:	e0bfff17 	ldw	r2,-4(fp)
}
  819b4c:	e037883a 	mov	sp,fp
  819b50:	dfc00117 	ldw	ra,4(sp)
  819b54:	df000017 	ldw	fp,0(sp)
  819b58:	dec00204 	addi	sp,sp,8
  819b5c:	f800283a 	ret

00819b60 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  819b60:	defffb04 	addi	sp,sp,-20
  819b64:	df000415 	stw	fp,16(sp)
  819b68:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  819b6c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819b70:	0005303a 	rdctl	r2,status
  819b74:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819b78:	e0fffd17 	ldw	r3,-12(fp)
  819b7c:	00bfff84 	movi	r2,-2
  819b80:	1884703a 	and	r2,r3,r2
  819b84:	1001703a 	wrctl	status,r2
  
  return context;
  819b88:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  819b8c:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  819b90:	008020b4 	movhi	r2,130
  819b94:	109b1704 	addi	r2,r2,27740
  819b98:	10800017 	ldw	r2,0(r2)
  819b9c:	10800b0b 	ldhu	r2,44(r2)
  819ba0:	e0bfff0d 	sth	r2,-4(fp)
  819ba4:	e0bffe17 	ldw	r2,-8(fp)
  819ba8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819bac:	e0bffc17 	ldw	r2,-16(fp)
  819bb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  819bb4:	e0bfff0b 	ldhu	r2,-4(fp)
}
  819bb8:	e037883a 	mov	sp,fp
  819bbc:	df000017 	ldw	fp,0(sp)
  819bc0:	dec00104 	addi	sp,sp,4
  819bc4:	f800283a 	ret

00819bc8 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  819bc8:	deffed04 	addi	sp,sp,-76
  819bcc:	dfc01215 	stw	ra,72(sp)
  819bd0:	df001115 	stw	fp,68(sp)
  819bd4:	df001104 	addi	fp,sp,68
  819bd8:	e13ff915 	stw	r4,-28(fp)
  819bdc:	e1fffc15 	stw	r7,-16(fp)
  819be0:	e17ffa0d 	sth	r5,-24(fp)
  819be4:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  819be8:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  819bec:	e0bffc17 	ldw	r2,-16(fp)
  819bf0:	1004c03a 	cmpne	r2,r2,zero
  819bf4:	1000021e 	bne	r2,zero,819c00 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
  819bf8:	e03fff15 	stw	zero,-4(fp)
  819bfc:	0000d606 	br	819f58 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  819c00:	e0bff917 	ldw	r2,-28(fp)
  819c04:	1004c03a 	cmpne	r2,r2,zero
  819c08:	1000051e 	bne	r2,zero,819c20 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  819c0c:	e0fffc17 	ldw	r3,-16(fp)
  819c10:	00801b84 	movi	r2,110
  819c14:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  819c18:	e03fff15 	stw	zero,-4(fp)
  819c1c:	0000ce06 	br	819f58 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  819c20:	e0bff917 	ldw	r2,-28(fp)
  819c24:	10800003 	ldbu	r2,0(r2)
  819c28:	10803fcc 	andi	r2,r2,255
  819c2c:	10800160 	cmpeqi	r2,r2,5
  819c30:	1000051e 	bne	r2,zero,819c48 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  819c34:	e0fffc17 	ldw	r3,-16(fp)
  819c38:	00800044 	movi	r2,1
  819c3c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  819c40:	e03fff15 	stw	zero,-4(fp)
  819c44:	0000c406 	br	819f58 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819c48:	0005303a 	rdctl	r2,status
  819c4c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819c50:	e0fff417 	ldw	r3,-48(fp)
  819c54:	00bfff84 	movi	r2,-2
  819c58:	1884703a 	and	r2,r3,r2
  819c5c:	1001703a 	wrctl	status,r2
  
  return context;
  819c60:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  819c64:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
  819c68:	e0bffb03 	ldbu	r2,-20(fp)
  819c6c:	e0bffe15 	stw	r2,-8(fp)
  819c70:	e0fffe17 	ldw	r3,-8(fp)
  819c74:	1805003a 	cmpeq	r2,r3,zero
  819c78:	1000041e 	bne	r2,zero,819c8c <OSFlagPost+0xc4>
  819c7c:	e0fffe17 	ldw	r3,-8(fp)
  819c80:	18800060 	cmpeqi	r2,r3,1
  819c84:	10000b1e 	bne	r2,zero,819cb4 <OSFlagPost+0xec>
  819c88:	00001206 	br	819cd4 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  819c8c:	e0bff917 	ldw	r2,-28(fp)
  819c90:	1080020b 	ldhu	r2,8(r2)
  819c94:	1007883a 	mov	r3,r2
  819c98:	e0bffa0b 	ldhu	r2,-24(fp)
  819c9c:	0084303a 	nor	r2,zero,r2
  819ca0:	1884703a 	and	r2,r3,r2
  819ca4:	1007883a 	mov	r3,r2
  819ca8:	e0bff917 	ldw	r2,-28(fp)
  819cac:	10c0020d 	sth	r3,8(r2)
             break;
  819cb0:	00001106 	br	819cf8 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  819cb4:	e0bff917 	ldw	r2,-28(fp)
  819cb8:	10c0020b 	ldhu	r3,8(r2)
  819cbc:	e0bffa0b 	ldhu	r2,-24(fp)
  819cc0:	1884b03a 	or	r2,r3,r2
  819cc4:	1007883a 	mov	r3,r2
  819cc8:	e0bff917 	ldw	r2,-28(fp)
  819ccc:	10c0020d 	sth	r3,8(r2)
             break;
  819cd0:	00000906 	br	819cf8 <OSFlagPost+0x130>
  819cd4:	e0bff517 	ldw	r2,-44(fp)
  819cd8:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819cdc:	e0bff317 	ldw	r2,-52(fp)
  819ce0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  819ce4:	e0fffc17 	ldw	r3,-16(fp)
  819ce8:	00801c44 	movi	r2,113
  819cec:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
  819cf0:	e03fff15 	stw	zero,-4(fp)
  819cf4:	00009806 	br	819f58 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  819cf8:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  819cfc:	e0bff917 	ldw	r2,-28(fp)
  819d00:	10800117 	ldw	r2,4(r2)
  819d04:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  819d08:	00007506 	br	819ee0 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
  819d0c:	e0bff817 	ldw	r2,-32(fp)
  819d10:	10800483 	ldbu	r2,18(r2)
  819d14:	10803fcc 	andi	r2,r2,255
  819d18:	e0bffd15 	stw	r2,-12(fp)
  819d1c:	e0fffd17 	ldw	r3,-12(fp)
  819d20:	18800060 	cmpeqi	r2,r3,1
  819d24:	10004d1e 	bne	r2,zero,819e5c <OSFlagPost+0x294>
  819d28:	e0fffd17 	ldw	r3,-12(fp)
  819d2c:	18800088 	cmpgei	r2,r3,2
  819d30:	1000041e 	bne	r2,zero,819d44 <OSFlagPost+0x17c>
  819d34:	e0fffd17 	ldw	r3,-12(fp)
  819d38:	1805003a 	cmpeq	r2,r3,zero
  819d3c:	1000301e 	bne	r2,zero,819e00 <OSFlagPost+0x238>
  819d40:	00005b06 	br	819eb0 <OSFlagPost+0x2e8>
  819d44:	e0fffd17 	ldw	r3,-12(fp)
  819d48:	188000a0 	cmpeqi	r2,r3,2
  819d4c:	1000041e 	bne	r2,zero,819d60 <OSFlagPost+0x198>
  819d50:	e0fffd17 	ldw	r3,-12(fp)
  819d54:	188000e0 	cmpeqi	r2,r3,3
  819d58:	1000161e 	bne	r2,zero,819db4 <OSFlagPost+0x1ec>
  819d5c:	00005406 	br	819eb0 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  819d60:	e0bff917 	ldw	r2,-28(fp)
  819d64:	10c0020b 	ldhu	r3,8(r2)
  819d68:	e0bff817 	ldw	r2,-32(fp)
  819d6c:	1080040b 	ldhu	r2,16(r2)
  819d70:	1884703a 	and	r2,r3,r2
  819d74:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  819d78:	e0bff817 	ldw	r2,-32(fp)
  819d7c:	1080040b 	ldhu	r2,16(r2)
  819d80:	10ffffcc 	andi	r3,r2,65535
  819d84:	e0bff68b 	ldhu	r2,-38(fp)
  819d88:	1880521e 	bne	r3,r2,819ed4 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  819d8c:	e17ff68b 	ldhu	r5,-38(fp)
  819d90:	e13ff817 	ldw	r4,-32(fp)
  819d94:	081a2ec0 	call	81a2ec <OS_FlagTaskRdy>
  819d98:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  819d9c:	e0bff603 	ldbu	r2,-40(fp)
  819da0:	10800058 	cmpnei	r2,r2,1
  819da4:	10004b1e 	bne	r2,zero,819ed4 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  819da8:	00800044 	movi	r2,1
  819dac:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  819db0:	00004806 	br	819ed4 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  819db4:	e0bff917 	ldw	r2,-28(fp)
  819db8:	10c0020b 	ldhu	r3,8(r2)
  819dbc:	e0bff817 	ldw	r2,-32(fp)
  819dc0:	1080040b 	ldhu	r2,16(r2)
  819dc4:	1884703a 	and	r2,r3,r2
  819dc8:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  819dcc:	e0bff68b 	ldhu	r2,-38(fp)
  819dd0:	1005003a 	cmpeq	r2,r2,zero
  819dd4:	10003f1e 	bne	r2,zero,819ed4 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  819dd8:	e17ff68b 	ldhu	r5,-38(fp)
  819ddc:	e13ff817 	ldw	r4,-32(fp)
  819de0:	081a2ec0 	call	81a2ec <OS_FlagTaskRdy>
  819de4:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  819de8:	e0bff603 	ldbu	r2,-40(fp)
  819dec:	10800058 	cmpnei	r2,r2,1
  819df0:	1000381e 	bne	r2,zero,819ed4 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  819df4:	00800044 	movi	r2,1
  819df8:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  819dfc:	00003506 	br	819ed4 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  819e00:	e0bff917 	ldw	r2,-28(fp)
  819e04:	1080020b 	ldhu	r2,8(r2)
  819e08:	0084303a 	nor	r2,zero,r2
  819e0c:	1007883a 	mov	r3,r2
  819e10:	e0bff817 	ldw	r2,-32(fp)
  819e14:	1080040b 	ldhu	r2,16(r2)
  819e18:	1884703a 	and	r2,r3,r2
  819e1c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  819e20:	e0bff817 	ldw	r2,-32(fp)
  819e24:	1080040b 	ldhu	r2,16(r2)
  819e28:	10ffffcc 	andi	r3,r2,65535
  819e2c:	e0bff68b 	ldhu	r2,-38(fp)
  819e30:	1880281e 	bne	r3,r2,819ed4 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  819e34:	e17ff68b 	ldhu	r5,-38(fp)
  819e38:	e13ff817 	ldw	r4,-32(fp)
  819e3c:	081a2ec0 	call	81a2ec <OS_FlagTaskRdy>
  819e40:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  819e44:	e0bff603 	ldbu	r2,-40(fp)
  819e48:	10800058 	cmpnei	r2,r2,1
  819e4c:	1000211e 	bne	r2,zero,819ed4 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  819e50:	00800044 	movi	r2,1
  819e54:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  819e58:	00001e06 	br	819ed4 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  819e5c:	e0bff917 	ldw	r2,-28(fp)
  819e60:	1080020b 	ldhu	r2,8(r2)
  819e64:	0084303a 	nor	r2,zero,r2
  819e68:	1007883a 	mov	r3,r2
  819e6c:	e0bff817 	ldw	r2,-32(fp)
  819e70:	1080040b 	ldhu	r2,16(r2)
  819e74:	1884703a 	and	r2,r3,r2
  819e78:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  819e7c:	e0bff68b 	ldhu	r2,-38(fp)
  819e80:	1005003a 	cmpeq	r2,r2,zero
  819e84:	1000131e 	bne	r2,zero,819ed4 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  819e88:	e17ff68b 	ldhu	r5,-38(fp)
  819e8c:	e13ff817 	ldw	r4,-32(fp)
  819e90:	081a2ec0 	call	81a2ec <OS_FlagTaskRdy>
  819e94:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  819e98:	e0bff603 	ldbu	r2,-40(fp)
  819e9c:	10800058 	cmpnei	r2,r2,1
  819ea0:	10000c1e 	bne	r2,zero,819ed4 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  819ea4:	00800044 	movi	r2,1
  819ea8:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  819eac:	00000906 	br	819ed4 <OSFlagPost+0x30c>
  819eb0:	e0bff517 	ldw	r2,-44(fp)
  819eb4:	e0bff215 	stw	r2,-56(fp)
  819eb8:	e0bff217 	ldw	r2,-56(fp)
  819ebc:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  819ec0:	e0fffc17 	ldw	r3,-16(fp)
  819ec4:	00801bc4 	movi	r2,111
  819ec8:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  819ecc:	e03fff15 	stw	zero,-4(fp)
  819ed0:	00002106 	br	819f58 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  819ed4:	e0bff817 	ldw	r2,-32(fp)
  819ed8:	10800017 	ldw	r2,0(r2)
  819edc:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  819ee0:	e0bff817 	ldw	r2,-32(fp)
  819ee4:	1004c03a 	cmpne	r2,r2,zero
  819ee8:	103f881e 	bne	r2,zero,819d0c <OSFlagPost+0x144>
  819eec:	e0bff517 	ldw	r2,-44(fp)
  819ef0:	e0bff115 	stw	r2,-60(fp)
  819ef4:	e0bff117 	ldw	r2,-60(fp)
  819ef8:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  819efc:	e0bff783 	ldbu	r2,-34(fp)
  819f00:	10800058 	cmpnei	r2,r2,1
  819f04:	1000011e 	bne	r2,zero,819f0c <OSFlagPost+0x344>
        OS_Sched();
  819f08:	08182f80 	call	8182f8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819f0c:	0005303a 	rdctl	r2,status
  819f10:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819f14:	e0fff017 	ldw	r3,-64(fp)
  819f18:	00bfff84 	movi	r2,-2
  819f1c:	1884703a 	and	r2,r3,r2
  819f20:	1001703a 	wrctl	status,r2
  
  return context;
  819f24:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
  819f28:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
  819f2c:	e0bff917 	ldw	r2,-28(fp)
  819f30:	1080020b 	ldhu	r2,8(r2)
  819f34:	e0bff70d 	sth	r2,-36(fp)
  819f38:	e0bff517 	ldw	r2,-44(fp)
  819f3c:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819f40:	e0bfef17 	ldw	r2,-68(fp)
  819f44:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  819f48:	e0bffc17 	ldw	r2,-16(fp)
  819f4c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  819f50:	e0bff70b 	ldhu	r2,-36(fp)
  819f54:	e0bfff15 	stw	r2,-4(fp)
  819f58:	e0bfff17 	ldw	r2,-4(fp)
}
  819f5c:	e037883a 	mov	sp,fp
  819f60:	dfc00117 	ldw	ra,4(sp)
  819f64:	df000017 	ldw	fp,0(sp)
  819f68:	dec00204 	addi	sp,sp,8
  819f6c:	f800283a 	ret

00819f70 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  819f70:	defff804 	addi	sp,sp,-32
  819f74:	df000715 	stw	fp,28(sp)
  819f78:	df000704 	addi	fp,sp,28
  819f7c:	e13ffd15 	stw	r4,-12(fp)
  819f80:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  819f84:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  819f88:	e0bffe17 	ldw	r2,-8(fp)
  819f8c:	1004c03a 	cmpne	r2,r2,zero
  819f90:	1000021e 	bne	r2,zero,819f9c <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
  819f94:	e03fff15 	stw	zero,-4(fp)
  819f98:	00002506 	br	81a030 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  819f9c:	e0bffd17 	ldw	r2,-12(fp)
  819fa0:	1004c03a 	cmpne	r2,r2,zero
  819fa4:	1000051e 	bne	r2,zero,819fbc <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  819fa8:	e0fffe17 	ldw	r3,-8(fp)
  819fac:	00801b84 	movi	r2,110
  819fb0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  819fb4:	e03fff15 	stw	zero,-4(fp)
  819fb8:	00001d06 	br	81a030 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  819fbc:	e0bffd17 	ldw	r2,-12(fp)
  819fc0:	10800003 	ldbu	r2,0(r2)
  819fc4:	10803fcc 	andi	r2,r2,255
  819fc8:	10800160 	cmpeqi	r2,r2,5
  819fcc:	1000051e 	bne	r2,zero,819fe4 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  819fd0:	e0fffe17 	ldw	r3,-8(fp)
  819fd4:	00800044 	movi	r2,1
  819fd8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  819fdc:	e03fff15 	stw	zero,-4(fp)
  819fe0:	00001306 	br	81a030 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819fe4:	0005303a 	rdctl	r2,status
  819fe8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819fec:	e0fffa17 	ldw	r3,-24(fp)
  819ff0:	00bfff84 	movi	r2,-2
  819ff4:	1884703a 	and	r2,r3,r2
  819ff8:	1001703a 	wrctl	status,r2
  
  return context;
  819ffc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81a000:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
  81a004:	e0bffd17 	ldw	r2,-12(fp)
  81a008:	1080020b 	ldhu	r2,8(r2)
  81a00c:	e0bffc0d 	sth	r2,-16(fp)
  81a010:	e0bffb17 	ldw	r2,-20(fp)
  81a014:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a018:	e0bff917 	ldw	r2,-28(fp)
  81a01c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81a020:	e0bffe17 	ldw	r2,-8(fp)
  81a024:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  81a028:	e0bffc0b 	ldhu	r2,-16(fp)
  81a02c:	e0bfff15 	stw	r2,-4(fp)
  81a030:	e0bfff17 	ldw	r2,-4(fp)
}
  81a034:	e037883a 	mov	sp,fp
  81a038:	df000017 	ldw	fp,0(sp)
  81a03c:	dec00104 	addi	sp,sp,4
  81a040:	f800283a 	ret

0081a044 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  81a044:	defff804 	addi	sp,sp,-32
  81a048:	df000715 	stw	fp,28(sp)
  81a04c:	df000704 	addi	fp,sp,28
  81a050:	e13ffb15 	stw	r4,-20(fp)
  81a054:	e17ffc15 	stw	r5,-16(fp)
  81a058:	e0800117 	ldw	r2,4(fp)
  81a05c:	e1bffd0d 	sth	r6,-12(fp)
  81a060:	e1fffe05 	stb	r7,-8(fp)
  81a064:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  81a068:	008020b4 	movhi	r2,130
  81a06c:	109b1704 	addi	r2,r2,27740
  81a070:	10c00017 	ldw	r3,0(r2)
  81a074:	008020b4 	movhi	r2,130
  81a078:	109b1704 	addi	r2,r2,27740
  81a07c:	10800017 	ldw	r2,0(r2)
  81a080:	10800c03 	ldbu	r2,48(r2)
  81a084:	10800814 	ori	r2,r2,32
  81a088:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  81a08c:	008020b4 	movhi	r2,130
  81a090:	109b1704 	addi	r2,r2,27740
  81a094:	10800017 	ldw	r2,0(r2)
  81a098:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  81a09c:	008020b4 	movhi	r2,130
  81a0a0:	109b1704 	addi	r2,r2,27740
  81a0a4:	10c00017 	ldw	r3,0(r2)
  81a0a8:	e0bfff0b 	ldhu	r2,-4(fp)
  81a0ac:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  81a0b0:	008020b4 	movhi	r2,130
  81a0b4:	109b1704 	addi	r2,r2,27740
  81a0b8:	10c00017 	ldw	r3,0(r2)
  81a0bc:	e0bffc17 	ldw	r2,-16(fp)
  81a0c0:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  81a0c4:	e0fffc17 	ldw	r3,-16(fp)
  81a0c8:	e0bffd0b 	ldhu	r2,-12(fp)
  81a0cc:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  81a0d0:	e0fffc17 	ldw	r3,-16(fp)
  81a0d4:	e0bffe03 	ldbu	r2,-8(fp)
  81a0d8:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  81a0dc:	008020b4 	movhi	r2,130
  81a0e0:	109b1704 	addi	r2,r2,27740
  81a0e4:	10c00017 	ldw	r3,0(r2)
  81a0e8:	e0bffc17 	ldw	r2,-16(fp)
  81a0ec:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  81a0f0:	e0bffb17 	ldw	r2,-20(fp)
  81a0f4:	10c00117 	ldw	r3,4(r2)
  81a0f8:	e0bffc17 	ldw	r2,-16(fp)
  81a0fc:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  81a100:	e0bffc17 	ldw	r2,-16(fp)
  81a104:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  81a108:	e0fffc17 	ldw	r3,-16(fp)
  81a10c:	e0bffb17 	ldw	r2,-20(fp)
  81a110:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  81a114:	e0bffb17 	ldw	r2,-20(fp)
  81a118:	10800117 	ldw	r2,4(r2)
  81a11c:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  81a120:	e0bffa17 	ldw	r2,-24(fp)
  81a124:	1005003a 	cmpeq	r2,r2,zero
  81a128:	1000031e 	bne	r2,zero,81a138 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  81a12c:	e0fffa17 	ldw	r3,-24(fp)
  81a130:	e0bffc17 	ldw	r2,-16(fp)
  81a134:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  81a138:	e0fffb17 	ldw	r3,-20(fp)
  81a13c:	e0bffc17 	ldw	r2,-16(fp)
  81a140:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  81a144:	008020b4 	movhi	r2,130
  81a148:	109b1704 	addi	r2,r2,27740
  81a14c:	10800017 	ldw	r2,0(r2)
  81a150:	10800d03 	ldbu	r2,52(r2)
  81a154:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  81a158:	e13ff903 	ldbu	r4,-28(fp)
  81a15c:	e0fff903 	ldbu	r3,-28(fp)
  81a160:	008020b4 	movhi	r2,130
  81a164:	109b1444 	addi	r2,r2,27729
  81a168:	10c5883a 	add	r2,r2,r3
  81a16c:	10800003 	ldbu	r2,0(r2)
  81a170:	1007883a 	mov	r3,r2
  81a174:	008020b4 	movhi	r2,130
  81a178:	109b1704 	addi	r2,r2,27740
  81a17c:	10800017 	ldw	r2,0(r2)
  81a180:	10800d43 	ldbu	r2,53(r2)
  81a184:	0084303a 	nor	r2,zero,r2
  81a188:	1884703a 	and	r2,r3,r2
  81a18c:	1007883a 	mov	r3,r2
  81a190:	008020b4 	movhi	r2,130
  81a194:	109b1444 	addi	r2,r2,27729
  81a198:	1105883a 	add	r2,r2,r4
  81a19c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  81a1a0:	e0fff903 	ldbu	r3,-28(fp)
  81a1a4:	008020b4 	movhi	r2,130
  81a1a8:	109b1444 	addi	r2,r2,27729
  81a1ac:	10c5883a 	add	r2,r2,r3
  81a1b0:	10800003 	ldbu	r2,0(r2)
  81a1b4:	10803fcc 	andi	r2,r2,255
  81a1b8:	1004c03a 	cmpne	r2,r2,zero
  81a1bc:	10000e1e 	bne	r2,zero,81a1f8 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  81a1c0:	008020b4 	movhi	r2,130
  81a1c4:	109b1704 	addi	r2,r2,27740
  81a1c8:	10800017 	ldw	r2,0(r2)
  81a1cc:	10800d83 	ldbu	r2,54(r2)
  81a1d0:	0084303a 	nor	r2,zero,r2
  81a1d4:	1007883a 	mov	r3,r2
  81a1d8:	008020b4 	movhi	r2,130
  81a1dc:	109b1404 	addi	r2,r2,27728
  81a1e0:	10800003 	ldbu	r2,0(r2)
  81a1e4:	1884703a 	and	r2,r3,r2
  81a1e8:	1007883a 	mov	r3,r2
  81a1ec:	008020b4 	movhi	r2,130
  81a1f0:	109b1404 	addi	r2,r2,27728
  81a1f4:	10c00005 	stb	r3,0(r2)
    }
}
  81a1f8:	e037883a 	mov	sp,fp
  81a1fc:	df000017 	ldw	fp,0(sp)
  81a200:	dec00104 	addi	sp,sp,4
  81a204:	f800283a 	ret

0081a208 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  81a208:	defffb04 	addi	sp,sp,-20
  81a20c:	dfc00415 	stw	ra,16(sp)
  81a210:	df000315 	stw	fp,12(sp)
  81a214:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  81a218:	010020f4 	movhi	r4,131
  81a21c:	2133bb04 	addi	r4,r4,-12564
  81a220:	0140dc04 	movi	r5,880
  81a224:	08182380 	call	818238 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  81a228:	008020f4 	movhi	r2,131
  81a22c:	10b3bb04 	addi	r2,r2,-12564
  81a230:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  81a234:	008020f4 	movhi	r2,131
  81a238:	10b3c604 	addi	r2,r2,-12520
  81a23c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  81a240:	e03fff0d 	sth	zero,-4(fp)
  81a244:	00001306 	br	81a294 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  81a248:	e0bffe17 	ldw	r2,-8(fp)
  81a24c:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  81a250:	e0fffe17 	ldw	r3,-8(fp)
  81a254:	e0bffd17 	ldw	r2,-12(fp)
  81a258:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  81a25c:	e0fffe17 	ldw	r3,-8(fp)
  81a260:	00800fc4 	movi	r2,63
  81a264:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  81a268:	e0bffe17 	ldw	r2,-8(fp)
  81a26c:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  81a270:	e0bffe17 	ldw	r2,-8(fp)
  81a274:	10800b04 	addi	r2,r2,44
  81a278:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  81a27c:	e0bffd17 	ldw	r2,-12(fp)
  81a280:	10800b04 	addi	r2,r2,44
  81a284:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  81a288:	e0bfff0b 	ldhu	r2,-4(fp)
  81a28c:	10800044 	addi	r2,r2,1
  81a290:	e0bfff0d 	sth	r2,-4(fp)
  81a294:	e0bfff0b 	ldhu	r2,-4(fp)
  81a298:	108004f0 	cmpltui	r2,r2,19
  81a29c:	103fea1e 	bne	r2,zero,81a248 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  81a2a0:	e0bffe17 	ldw	r2,-8(fp)
  81a2a4:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  81a2a8:	e0bffe17 	ldw	r2,-8(fp)
  81a2ac:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  81a2b0:	e0fffe17 	ldw	r3,-8(fp)
  81a2b4:	00800fc4 	movi	r2,63
  81a2b8:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  81a2bc:	e0bffe17 	ldw	r2,-8(fp)
  81a2c0:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  81a2c4:	00c020b4 	movhi	r3,130
  81a2c8:	18db1904 	addi	r3,r3,27748
  81a2cc:	008020f4 	movhi	r2,131
  81a2d0:	10b3bb04 	addi	r2,r2,-12564
  81a2d4:	18800015 	stw	r2,0(r3)
#endif
}
  81a2d8:	e037883a 	mov	sp,fp
  81a2dc:	dfc00117 	ldw	ra,4(sp)
  81a2e0:	df000017 	ldw	fp,0(sp)
  81a2e4:	dec00204 	addi	sp,sp,8
  81a2e8:	f800283a 	ret

0081a2ec <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  81a2ec:	defffa04 	addi	sp,sp,-24
  81a2f0:	dfc00515 	stw	ra,20(sp)
  81a2f4:	df000415 	stw	fp,16(sp)
  81a2f8:	df000404 	addi	fp,sp,16
  81a2fc:	e13ffe15 	stw	r4,-8(fp)
  81a300:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  81a304:	e0bffe17 	ldw	r2,-8(fp)
  81a308:	10800217 	ldw	r2,8(r2)
  81a30c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  81a310:	e0bffd17 	ldw	r2,-12(fp)
  81a314:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  81a318:	e0fffd17 	ldw	r3,-12(fp)
  81a31c:	e0bfff0b 	ldhu	r2,-4(fp)
  81a320:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  81a324:	e0bffd17 	ldw	r2,-12(fp)
  81a328:	10c00c03 	ldbu	r3,48(r2)
  81a32c:	00bff7c4 	movi	r2,-33
  81a330:	1884703a 	and	r2,r3,r2
  81a334:	1007883a 	mov	r3,r2
  81a338:	e0bffd17 	ldw	r2,-12(fp)
  81a33c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  81a340:	e0bffd17 	ldw	r2,-12(fp)
  81a344:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  81a348:	e0bffd17 	ldw	r2,-12(fp)
  81a34c:	10800c03 	ldbu	r2,48(r2)
  81a350:	10803fcc 	andi	r2,r2,255
  81a354:	1004c03a 	cmpne	r2,r2,zero
  81a358:	10001f1e 	bne	r2,zero,81a3d8 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  81a35c:	e0bffd17 	ldw	r2,-12(fp)
  81a360:	10c00d83 	ldbu	r3,54(r2)
  81a364:	008020b4 	movhi	r2,130
  81a368:	109b1404 	addi	r2,r2,27728
  81a36c:	10800003 	ldbu	r2,0(r2)
  81a370:	1884b03a 	or	r2,r3,r2
  81a374:	1007883a 	mov	r3,r2
  81a378:	008020b4 	movhi	r2,130
  81a37c:	109b1404 	addi	r2,r2,27728
  81a380:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  81a384:	e0bffd17 	ldw	r2,-12(fp)
  81a388:	10800d03 	ldbu	r2,52(r2)
  81a38c:	11003fcc 	andi	r4,r2,255
  81a390:	e0bffd17 	ldw	r2,-12(fp)
  81a394:	10800d03 	ldbu	r2,52(r2)
  81a398:	10c03fcc 	andi	r3,r2,255
  81a39c:	008020b4 	movhi	r2,130
  81a3a0:	109b1444 	addi	r2,r2,27729
  81a3a4:	10c5883a 	add	r2,r2,r3
  81a3a8:	10c00003 	ldbu	r3,0(r2)
  81a3ac:	e0bffd17 	ldw	r2,-12(fp)
  81a3b0:	10800d43 	ldbu	r2,53(r2)
  81a3b4:	1884b03a 	or	r2,r3,r2
  81a3b8:	1007883a 	mov	r3,r2
  81a3bc:	008020b4 	movhi	r2,130
  81a3c0:	109b1444 	addi	r2,r2,27729
  81a3c4:	1105883a 	add	r2,r2,r4
  81a3c8:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
  81a3cc:	00800044 	movi	r2,1
  81a3d0:	e0bffc05 	stb	r2,-16(fp)
  81a3d4:	00000106 	br	81a3dc <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
  81a3d8:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  81a3dc:	e13ffe17 	ldw	r4,-8(fp)
  81a3e0:	081a3fc0 	call	81a3fc <OS_FlagUnlink>
    return (sched);
  81a3e4:	e0bffc03 	ldbu	r2,-16(fp)
}
  81a3e8:	e037883a 	mov	sp,fp
  81a3ec:	dfc00117 	ldw	ra,4(sp)
  81a3f0:	df000017 	ldw	fp,0(sp)
  81a3f4:	dec00204 	addi	sp,sp,8
  81a3f8:	f800283a 	ret

0081a3fc <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  81a3fc:	defffa04 	addi	sp,sp,-24
  81a400:	df000515 	stw	fp,20(sp)
  81a404:	df000504 	addi	fp,sp,20
  81a408:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  81a40c:	e0bfff17 	ldw	r2,-4(fp)
  81a410:	10800117 	ldw	r2,4(r2)
  81a414:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  81a418:	e0bfff17 	ldw	r2,-4(fp)
  81a41c:	10800017 	ldw	r2,0(r2)
  81a420:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  81a424:	e0bffc17 	ldw	r2,-16(fp)
  81a428:	1004c03a 	cmpne	r2,r2,zero
  81a42c:	10000c1e 	bne	r2,zero,81a460 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  81a430:	e0bfff17 	ldw	r2,-4(fp)
  81a434:	10800317 	ldw	r2,12(r2)
  81a438:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  81a43c:	e0fffd17 	ldw	r3,-12(fp)
  81a440:	e0bffb17 	ldw	r2,-20(fp)
  81a444:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  81a448:	e0bffb17 	ldw	r2,-20(fp)
  81a44c:	1005003a 	cmpeq	r2,r2,zero
  81a450:	10000c1e 	bne	r2,zero,81a484 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  81a454:	e0bffb17 	ldw	r2,-20(fp)
  81a458:	10000115 	stw	zero,4(r2)
  81a45c:	00000906 	br	81a484 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  81a460:	e0fffc17 	ldw	r3,-16(fp)
  81a464:	e0bffb17 	ldw	r2,-20(fp)
  81a468:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  81a46c:	e0bffb17 	ldw	r2,-20(fp)
  81a470:	1005003a 	cmpeq	r2,r2,zero
  81a474:	1000031e 	bne	r2,zero,81a484 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  81a478:	e0fffb17 	ldw	r3,-20(fp)
  81a47c:	e0bffc17 	ldw	r2,-16(fp)
  81a480:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  81a484:	e0bfff17 	ldw	r2,-4(fp)
  81a488:	10800217 	ldw	r2,8(r2)
  81a48c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  81a490:	e0bffe17 	ldw	r2,-8(fp)
  81a494:	10000a15 	stw	zero,40(r2)
#endif
}
  81a498:	e037883a 	mov	sp,fp
  81a49c:	df000017 	ldw	fp,0(sp)
  81a4a0:	dec00104 	addi	sp,sp,4
  81a4a4:	f800283a 	ret

0081a4a8 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  81a4a8:	defff304 	addi	sp,sp,-52
  81a4ac:	df000c15 	stw	fp,48(sp)
  81a4b0:	df000c04 	addi	fp,sp,48
  81a4b4:	e13ffb15 	stw	r4,-20(fp)
  81a4b8:	e17ffc15 	stw	r5,-16(fp)
  81a4bc:	e1bffd15 	stw	r6,-12(fp)
  81a4c0:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81a4c4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  81a4c8:	e0bffe17 	ldw	r2,-8(fp)
  81a4cc:	1004c03a 	cmpne	r2,r2,zero
  81a4d0:	1000021e 	bne	r2,zero,81a4dc <OSMemCreate+0x34>
        return ((OS_MEM *)0);
  81a4d4:	e03fff15 	stw	zero,-4(fp)
  81a4d8:	00007506 	br	81a6b0 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  81a4dc:	e0bffb17 	ldw	r2,-20(fp)
  81a4e0:	1004c03a 	cmpne	r2,r2,zero
  81a4e4:	1000051e 	bne	r2,zero,81a4fc <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  81a4e8:	e0fffe17 	ldw	r3,-8(fp)
  81a4ec:	00801884 	movi	r2,98
  81a4f0:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  81a4f4:	e03fff15 	stw	zero,-4(fp)
  81a4f8:	00006d06 	br	81a6b0 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  81a4fc:	e0bffb17 	ldw	r2,-20(fp)
  81a500:	108000cc 	andi	r2,r2,3
  81a504:	1005003a 	cmpeq	r2,r2,zero
  81a508:	1000051e 	bne	r2,zero,81a520 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  81a50c:	e0fffe17 	ldw	r3,-8(fp)
  81a510:	00801884 	movi	r2,98
  81a514:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  81a518:	e03fff15 	stw	zero,-4(fp)
  81a51c:	00006406 	br	81a6b0 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  81a520:	e0bffc17 	ldw	r2,-16(fp)
  81a524:	108000a8 	cmpgeui	r2,r2,2
  81a528:	1000051e 	bne	r2,zero,81a540 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  81a52c:	e0fffe17 	ldw	r3,-8(fp)
  81a530:	008016c4 	movi	r2,91
  81a534:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  81a538:	e03fff15 	stw	zero,-4(fp)
  81a53c:	00005c06 	br	81a6b0 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  81a540:	e0bffd17 	ldw	r2,-12(fp)
  81a544:	10800128 	cmpgeui	r2,r2,4
  81a548:	1000051e 	bne	r2,zero,81a560 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  81a54c:	e0fffe17 	ldw	r3,-8(fp)
  81a550:	00801704 	movi	r2,92
  81a554:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  81a558:	e03fff15 	stw	zero,-4(fp)
  81a55c:	00005406 	br	81a6b0 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a560:	0005303a 	rdctl	r2,status
  81a564:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a568:	e0fff517 	ldw	r3,-44(fp)
  81a56c:	00bfff84 	movi	r2,-2
  81a570:	1884703a 	and	r2,r3,r2
  81a574:	1001703a 	wrctl	status,r2
  
  return context;
  81a578:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81a57c:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  81a580:	008020b4 	movhi	r2,130
  81a584:	109b1104 	addi	r2,r2,27716
  81a588:	10800017 	ldw	r2,0(r2)
  81a58c:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  81a590:	008020b4 	movhi	r2,130
  81a594:	109b1104 	addi	r2,r2,27716
  81a598:	10800017 	ldw	r2,0(r2)
  81a59c:	1005003a 	cmpeq	r2,r2,zero
  81a5a0:	1000081e 	bne	r2,zero,81a5c4 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  81a5a4:	008020b4 	movhi	r2,130
  81a5a8:	109b1104 	addi	r2,r2,27716
  81a5ac:	10800017 	ldw	r2,0(r2)
  81a5b0:	10800117 	ldw	r2,4(r2)
  81a5b4:	1007883a 	mov	r3,r2
  81a5b8:	008020b4 	movhi	r2,130
  81a5bc:	109b1104 	addi	r2,r2,27716
  81a5c0:	10c00015 	stw	r3,0(r2)
  81a5c4:	e0bff617 	ldw	r2,-40(fp)
  81a5c8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a5cc:	e0bff417 	ldw	r2,-48(fp)
  81a5d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  81a5d4:	e0bffa17 	ldw	r2,-24(fp)
  81a5d8:	1004c03a 	cmpne	r2,r2,zero
  81a5dc:	1000051e 	bne	r2,zero,81a5f4 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
  81a5e0:	e0fffe17 	ldw	r3,-8(fp)
  81a5e4:	00801684 	movi	r2,90
  81a5e8:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  81a5ec:	e03fff15 	stw	zero,-4(fp)
  81a5f0:	00002f06 	br	81a6b0 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  81a5f4:	e0bffb17 	ldw	r2,-20(fp)
  81a5f8:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  81a5fc:	e0bffb17 	ldw	r2,-20(fp)
  81a600:	1007883a 	mov	r3,r2
  81a604:	e0bffd17 	ldw	r2,-12(fp)
  81a608:	1885883a 	add	r2,r3,r2
  81a60c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
  81a610:	e03ff715 	stw	zero,-36(fp)
  81a614:	00000d06 	br	81a64c <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  81a618:	e0fff817 	ldw	r3,-32(fp)
  81a61c:	e0bff917 	ldw	r2,-28(fp)
  81a620:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  81a624:	e0bff917 	ldw	r2,-28(fp)
  81a628:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  81a62c:	e0bff917 	ldw	r2,-28(fp)
  81a630:	1007883a 	mov	r3,r2
  81a634:	e0bffd17 	ldw	r2,-12(fp)
  81a638:	1885883a 	add	r2,r3,r2
  81a63c:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  81a640:	e0bff717 	ldw	r2,-36(fp)
  81a644:	10800044 	addi	r2,r2,1
  81a648:	e0bff715 	stw	r2,-36(fp)
  81a64c:	e0bffc17 	ldw	r2,-16(fp)
  81a650:	10ffffc4 	addi	r3,r2,-1
  81a654:	e0bff717 	ldw	r2,-36(fp)
  81a658:	10ffef36 	bltu	r2,r3,81a618 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  81a65c:	e0bff817 	ldw	r2,-32(fp)
  81a660:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  81a664:	e0fffa17 	ldw	r3,-24(fp)
  81a668:	e0bffb17 	ldw	r2,-20(fp)
  81a66c:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  81a670:	e0fffa17 	ldw	r3,-24(fp)
  81a674:	e0bffb17 	ldw	r2,-20(fp)
  81a678:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  81a67c:	e0fffa17 	ldw	r3,-24(fp)
  81a680:	e0bffc17 	ldw	r2,-16(fp)
  81a684:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
  81a688:	e0fffa17 	ldw	r3,-24(fp)
  81a68c:	e0bffc17 	ldw	r2,-16(fp)
  81a690:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  81a694:	e0fffa17 	ldw	r3,-24(fp)
  81a698:	e0bffd17 	ldw	r2,-12(fp)
  81a69c:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
  81a6a0:	e0bffe17 	ldw	r2,-8(fp)
  81a6a4:	10000005 	stb	zero,0(r2)
    return (pmem);
  81a6a8:	e0bffa17 	ldw	r2,-24(fp)
  81a6ac:	e0bfff15 	stw	r2,-4(fp)
  81a6b0:	e0bfff17 	ldw	r2,-4(fp)
}
  81a6b4:	e037883a 	mov	sp,fp
  81a6b8:	df000017 	ldw	fp,0(sp)
  81a6bc:	dec00104 	addi	sp,sp,4
  81a6c0:	f800283a 	ret

0081a6c4 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  81a6c4:	defff704 	addi	sp,sp,-36
  81a6c8:	df000815 	stw	fp,32(sp)
  81a6cc:	df000804 	addi	fp,sp,32
  81a6d0:	e13ffd15 	stw	r4,-12(fp)
  81a6d4:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81a6d8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  81a6dc:	e0bffe17 	ldw	r2,-8(fp)
  81a6e0:	1004c03a 	cmpne	r2,r2,zero
  81a6e4:	1000021e 	bne	r2,zero,81a6f0 <OSMemGet+0x2c>
        return ((void *)0);
  81a6e8:	e03fff15 	stw	zero,-4(fp)
  81a6ec:	00003106 	br	81a7b4 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  81a6f0:	e0bffd17 	ldw	r2,-12(fp)
  81a6f4:	1004c03a 	cmpne	r2,r2,zero
  81a6f8:	1000051e 	bne	r2,zero,81a710 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  81a6fc:	e0fffe17 	ldw	r3,-8(fp)
  81a700:	00801804 	movi	r2,96
  81a704:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81a708:	e03fff15 	stw	zero,-4(fp)
  81a70c:	00002906 	br	81a7b4 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a710:	0005303a 	rdctl	r2,status
  81a714:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a718:	e0fffa17 	ldw	r3,-24(fp)
  81a71c:	00bfff84 	movi	r2,-2
  81a720:	1884703a 	and	r2,r3,r2
  81a724:	1001703a 	wrctl	status,r2
  
  return context;
  81a728:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81a72c:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  81a730:	e0bffd17 	ldw	r2,-12(fp)
  81a734:	10800417 	ldw	r2,16(r2)
  81a738:	1005003a 	cmpeq	r2,r2,zero
  81a73c:	1000151e 	bne	r2,zero,81a794 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  81a740:	e0bffd17 	ldw	r2,-12(fp)
  81a744:	10800117 	ldw	r2,4(r2)
  81a748:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  81a74c:	e0bffc17 	ldw	r2,-16(fp)
  81a750:	10c00017 	ldw	r3,0(r2)
  81a754:	e0bffd17 	ldw	r2,-12(fp)
  81a758:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  81a75c:	e0bffd17 	ldw	r2,-12(fp)
  81a760:	10800417 	ldw	r2,16(r2)
  81a764:	10ffffc4 	addi	r3,r2,-1
  81a768:	e0bffd17 	ldw	r2,-12(fp)
  81a76c:	10c00415 	stw	r3,16(r2)
  81a770:	e0bffb17 	ldw	r2,-20(fp)
  81a774:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a778:	e0bff917 	ldw	r2,-28(fp)
  81a77c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  81a780:	e0bffe17 	ldw	r2,-8(fp)
  81a784:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  81a788:	e0bffc17 	ldw	r2,-16(fp)
  81a78c:	e0bfff15 	stw	r2,-4(fp)
  81a790:	00000806 	br	81a7b4 <OSMemGet+0xf0>
  81a794:	e0bffb17 	ldw	r2,-20(fp)
  81a798:	e0bff815 	stw	r2,-32(fp)
  81a79c:	e0bff817 	ldw	r2,-32(fp)
  81a7a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  81a7a4:	e0fffe17 	ldw	r3,-8(fp)
  81a7a8:	00801744 	movi	r2,93
  81a7ac:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  81a7b0:	e03fff15 	stw	zero,-4(fp)
  81a7b4:	e0bfff17 	ldw	r2,-4(fp)
}
  81a7b8:	e037883a 	mov	sp,fp
  81a7bc:	df000017 	ldw	fp,0(sp)
  81a7c0:	dec00104 	addi	sp,sp,4
  81a7c4:	f800283a 	ret

0081a7c8 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  81a7c8:	defff604 	addi	sp,sp,-40
  81a7cc:	dfc00915 	stw	ra,36(sp)
  81a7d0:	df000815 	stw	fp,32(sp)
  81a7d4:	df000804 	addi	fp,sp,32
  81a7d8:	e13ffc15 	stw	r4,-16(fp)
  81a7dc:	e17ffd15 	stw	r5,-12(fp)
  81a7e0:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81a7e4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  81a7e8:	e0bffe17 	ldw	r2,-8(fp)
  81a7ec:	1004c03a 	cmpne	r2,r2,zero
  81a7f0:	1000021e 	bne	r2,zero,81a7fc <OSMemNameGet+0x34>
        return (0);
  81a7f4:	e03fff15 	stw	zero,-4(fp)
  81a7f8:	00003006 	br	81a8bc <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  81a7fc:	e0bffc17 	ldw	r2,-16(fp)
  81a800:	1004c03a 	cmpne	r2,r2,zero
  81a804:	1000051e 	bne	r2,zero,81a81c <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  81a808:	e0fffe17 	ldw	r3,-8(fp)
  81a80c:	00801804 	movi	r2,96
  81a810:	18800005 	stb	r2,0(r3)
        return (0);
  81a814:	e03fff15 	stw	zero,-4(fp)
  81a818:	00002806 	br	81a8bc <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  81a81c:	e0bffd17 	ldw	r2,-12(fp)
  81a820:	1004c03a 	cmpne	r2,r2,zero
  81a824:	1000051e 	bne	r2,zero,81a83c <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  81a828:	e0fffe17 	ldw	r3,-8(fp)
  81a82c:	00800304 	movi	r2,12
  81a830:	18800005 	stb	r2,0(r3)
        return (0);
  81a834:	e03fff15 	stw	zero,-4(fp)
  81a838:	00002006 	br	81a8bc <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81a83c:	008020b4 	movhi	r2,130
  81a840:	109b1604 	addi	r2,r2,27736
  81a844:	10800003 	ldbu	r2,0(r2)
  81a848:	10803fcc 	andi	r2,r2,255
  81a84c:	1005003a 	cmpeq	r2,r2,zero
  81a850:	1000051e 	bne	r2,zero,81a868 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  81a854:	e0fffe17 	ldw	r3,-8(fp)
  81a858:	00800444 	movi	r2,17
  81a85c:	18800005 	stb	r2,0(r3)
        return (0);
  81a860:	e03fff15 	stw	zero,-4(fp)
  81a864:	00001506 	br	81a8bc <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a868:	0005303a 	rdctl	r2,status
  81a86c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a870:	e0fff917 	ldw	r3,-28(fp)
  81a874:	00bfff84 	movi	r2,-2
  81a878:	1884703a 	and	r2,r3,r2
  81a87c:	1001703a 	wrctl	status,r2
  
  return context;
  81a880:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81a884:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  81a888:	e0bffc17 	ldw	r2,-16(fp)
  81a88c:	11400504 	addi	r5,r2,20
  81a890:	e13ffd17 	ldw	r4,-12(fp)
  81a894:	081843c0 	call	81843c <OS_StrCopy>
  81a898:	e0bffb05 	stb	r2,-20(fp)
  81a89c:	e0bffa17 	ldw	r2,-24(fp)
  81a8a0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a8a4:	e0bff817 	ldw	r2,-32(fp)
  81a8a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81a8ac:	e0bffe17 	ldw	r2,-8(fp)
  81a8b0:	10000005 	stb	zero,0(r2)
    return (len);
  81a8b4:	e0bffb03 	ldbu	r2,-20(fp)
  81a8b8:	e0bfff15 	stw	r2,-4(fp)
  81a8bc:	e0bfff17 	ldw	r2,-4(fp)
}
  81a8c0:	e037883a 	mov	sp,fp
  81a8c4:	dfc00117 	ldw	ra,4(sp)
  81a8c8:	df000017 	ldw	fp,0(sp)
  81a8cc:	dec00204 	addi	sp,sp,8
  81a8d0:	f800283a 	ret

0081a8d4 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  81a8d4:	defff604 	addi	sp,sp,-40
  81a8d8:	dfc00915 	stw	ra,36(sp)
  81a8dc:	df000815 	stw	fp,32(sp)
  81a8e0:	df000804 	addi	fp,sp,32
  81a8e4:	e13ffd15 	stw	r4,-12(fp)
  81a8e8:	e17ffe15 	stw	r5,-8(fp)
  81a8ec:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81a8f0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  81a8f4:	e0bfff17 	ldw	r2,-4(fp)
  81a8f8:	1005003a 	cmpeq	r2,r2,zero
  81a8fc:	1000381e 	bne	r2,zero,81a9e0 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  81a900:	e0bffd17 	ldw	r2,-12(fp)
  81a904:	1004c03a 	cmpne	r2,r2,zero
  81a908:	1000041e 	bne	r2,zero,81a91c <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  81a90c:	e0ffff17 	ldw	r3,-4(fp)
  81a910:	00801804 	movi	r2,96
  81a914:	18800005 	stb	r2,0(r3)
        return;
  81a918:	00003106 	br	81a9e0 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  81a91c:	e0bffe17 	ldw	r2,-8(fp)
  81a920:	1004c03a 	cmpne	r2,r2,zero
  81a924:	1000041e 	bne	r2,zero,81a938 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  81a928:	e0ffff17 	ldw	r3,-4(fp)
  81a92c:	00800304 	movi	r2,12
  81a930:	18800005 	stb	r2,0(r3)
        return;
  81a934:	00002a06 	br	81a9e0 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81a938:	008020b4 	movhi	r2,130
  81a93c:	109b1604 	addi	r2,r2,27736
  81a940:	10800003 	ldbu	r2,0(r2)
  81a944:	10803fcc 	andi	r2,r2,255
  81a948:	1005003a 	cmpeq	r2,r2,zero
  81a94c:	1000041e 	bne	r2,zero,81a960 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  81a950:	e0ffff17 	ldw	r3,-4(fp)
  81a954:	00800484 	movi	r2,18
  81a958:	18800005 	stb	r2,0(r3)
        return;
  81a95c:	00002006 	br	81a9e0 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a960:	0005303a 	rdctl	r2,status
  81a964:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a968:	e0fffa17 	ldw	r3,-24(fp)
  81a96c:	00bfff84 	movi	r2,-2
  81a970:	1884703a 	and	r2,r3,r2
  81a974:	1001703a 	wrctl	status,r2
  
  return context;
  81a978:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81a97c:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  81a980:	e13ffe17 	ldw	r4,-8(fp)
  81a984:	08184bc0 	call	8184bc <OS_StrLen>
  81a988:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  81a98c:	e0bffc03 	ldbu	r2,-16(fp)
  81a990:	10800830 	cmpltui	r2,r2,32
  81a994:	1000081e 	bne	r2,zero,81a9b8 <OSMemNameSet+0xe4>
  81a998:	e0bffb17 	ldw	r2,-20(fp)
  81a99c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a9a0:	e0bff917 	ldw	r2,-28(fp)
  81a9a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  81a9a8:	e0ffff17 	ldw	r3,-4(fp)
  81a9ac:	008018c4 	movi	r2,99
  81a9b0:	18800005 	stb	r2,0(r3)
        return;
  81a9b4:	00000a06 	br	81a9e0 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  81a9b8:	e0bffd17 	ldw	r2,-12(fp)
  81a9bc:	11000504 	addi	r4,r2,20
  81a9c0:	e17ffe17 	ldw	r5,-8(fp)
  81a9c4:	081843c0 	call	81843c <OS_StrCopy>
  81a9c8:	e0bffb17 	ldw	r2,-20(fp)
  81a9cc:	e0bff815 	stw	r2,-32(fp)
  81a9d0:	e0bff817 	ldw	r2,-32(fp)
  81a9d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81a9d8:	e0bfff17 	ldw	r2,-4(fp)
  81a9dc:	10000005 	stb	zero,0(r2)
}
  81a9e0:	e037883a 	mov	sp,fp
  81a9e4:	dfc00117 	ldw	ra,4(sp)
  81a9e8:	df000017 	ldw	fp,0(sp)
  81a9ec:	dec00204 	addi	sp,sp,8
  81a9f0:	f800283a 	ret

0081a9f4 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  81a9f4:	defff804 	addi	sp,sp,-32
  81a9f8:	df000715 	stw	fp,28(sp)
  81a9fc:	df000704 	addi	fp,sp,28
  81aa00:	e13ffd15 	stw	r4,-12(fp)
  81aa04:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81aa08:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  81aa0c:	e0bffd17 	ldw	r2,-12(fp)
  81aa10:	1004c03a 	cmpne	r2,r2,zero
  81aa14:	1000031e 	bne	r2,zero,81aa24 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  81aa18:	00801804 	movi	r2,96
  81aa1c:	e0bfff15 	stw	r2,-4(fp)
  81aa20:	00002b06 	br	81aad0 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  81aa24:	e0bffe17 	ldw	r2,-8(fp)
  81aa28:	1004c03a 	cmpne	r2,r2,zero
  81aa2c:	1000031e 	bne	r2,zero,81aa3c <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
  81aa30:	008017c4 	movi	r2,95
  81aa34:	e0bfff15 	stw	r2,-4(fp)
  81aa38:	00002506 	br	81aad0 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81aa3c:	0005303a 	rdctl	r2,status
  81aa40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81aa44:	e0fffb17 	ldw	r3,-20(fp)
  81aa48:	00bfff84 	movi	r2,-2
  81aa4c:	1884703a 	and	r2,r3,r2
  81aa50:	1001703a 	wrctl	status,r2
  
  return context;
  81aa54:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81aa58:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  81aa5c:	e0bffd17 	ldw	r2,-12(fp)
  81aa60:	10c00417 	ldw	r3,16(r2)
  81aa64:	e0bffd17 	ldw	r2,-12(fp)
  81aa68:	10800317 	ldw	r2,12(r2)
  81aa6c:	18800736 	bltu	r3,r2,81aa8c <OSMemPut+0x98>
  81aa70:	e0bffc17 	ldw	r2,-16(fp)
  81aa74:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81aa78:	e0bffa17 	ldw	r2,-24(fp)
  81aa7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  81aa80:	00801784 	movi	r2,94
  81aa84:	e0bfff15 	stw	r2,-4(fp)
  81aa88:	00001106 	br	81aad0 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  81aa8c:	e0fffe17 	ldw	r3,-8(fp)
  81aa90:	e0bffd17 	ldw	r2,-12(fp)
  81aa94:	10800117 	ldw	r2,4(r2)
  81aa98:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
  81aa9c:	e0fffd17 	ldw	r3,-12(fp)
  81aaa0:	e0bffe17 	ldw	r2,-8(fp)
  81aaa4:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  81aaa8:	e0bffd17 	ldw	r2,-12(fp)
  81aaac:	10800417 	ldw	r2,16(r2)
  81aab0:	10c00044 	addi	r3,r2,1
  81aab4:	e0bffd17 	ldw	r2,-12(fp)
  81aab8:	10c00415 	stw	r3,16(r2)
  81aabc:	e0bffc17 	ldw	r2,-16(fp)
  81aac0:	e0bff915 	stw	r2,-28(fp)
  81aac4:	e0bff917 	ldw	r2,-28(fp)
  81aac8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  81aacc:	e03fff15 	stw	zero,-4(fp)
  81aad0:	e0bfff17 	ldw	r2,-4(fp)
}
  81aad4:	e037883a 	mov	sp,fp
  81aad8:	df000017 	ldw	fp,0(sp)
  81aadc:	dec00104 	addi	sp,sp,4
  81aae0:	f800283a 	ret

0081aae4 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  81aae4:	defff904 	addi	sp,sp,-28
  81aae8:	df000615 	stw	fp,24(sp)
  81aaec:	df000604 	addi	fp,sp,24
  81aaf0:	e13ffd15 	stw	r4,-12(fp)
  81aaf4:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81aaf8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  81aafc:	e0bffd17 	ldw	r2,-12(fp)
  81ab00:	1004c03a 	cmpne	r2,r2,zero
  81ab04:	1000031e 	bne	r2,zero,81ab14 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  81ab08:	00801804 	movi	r2,96
  81ab0c:	e0bfff15 	stw	r2,-4(fp)
  81ab10:	00002e06 	br	81abcc <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  81ab14:	e0bffe17 	ldw	r2,-8(fp)
  81ab18:	1004c03a 	cmpne	r2,r2,zero
  81ab1c:	1000031e 	bne	r2,zero,81ab2c <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
  81ab20:	00801844 	movi	r2,97
  81ab24:	e0bfff15 	stw	r2,-4(fp)
  81ab28:	00002806 	br	81abcc <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81ab2c:	0005303a 	rdctl	r2,status
  81ab30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ab34:	e0fffb17 	ldw	r3,-20(fp)
  81ab38:	00bfff84 	movi	r2,-2
  81ab3c:	1884703a 	and	r2,r3,r2
  81ab40:	1001703a 	wrctl	status,r2
  
  return context;
  81ab44:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81ab48:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  81ab4c:	e0bffd17 	ldw	r2,-12(fp)
  81ab50:	10c00017 	ldw	r3,0(r2)
  81ab54:	e0bffe17 	ldw	r2,-8(fp)
  81ab58:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  81ab5c:	e0bffd17 	ldw	r2,-12(fp)
  81ab60:	10c00117 	ldw	r3,4(r2)
  81ab64:	e0bffe17 	ldw	r2,-8(fp)
  81ab68:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  81ab6c:	e0bffd17 	ldw	r2,-12(fp)
  81ab70:	10c00217 	ldw	r3,8(r2)
  81ab74:	e0bffe17 	ldw	r2,-8(fp)
  81ab78:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  81ab7c:	e0bffd17 	ldw	r2,-12(fp)
  81ab80:	10c00317 	ldw	r3,12(r2)
  81ab84:	e0bffe17 	ldw	r2,-8(fp)
  81ab88:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  81ab8c:	e0bffd17 	ldw	r2,-12(fp)
  81ab90:	10c00417 	ldw	r3,16(r2)
  81ab94:	e0bffe17 	ldw	r2,-8(fp)
  81ab98:	10c00415 	stw	r3,16(r2)
  81ab9c:	e0bffc17 	ldw	r2,-16(fp)
  81aba0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81aba4:	e0bffa17 	ldw	r2,-24(fp)
  81aba8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  81abac:	e0bffe17 	ldw	r2,-8(fp)
  81abb0:	10c00317 	ldw	r3,12(r2)
  81abb4:	e0bffe17 	ldw	r2,-8(fp)
  81abb8:	10800417 	ldw	r2,16(r2)
  81abbc:	1887c83a 	sub	r3,r3,r2
  81abc0:	e0bffe17 	ldw	r2,-8(fp)
  81abc4:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  81abc8:	e03fff15 	stw	zero,-4(fp)
  81abcc:	e0bfff17 	ldw	r2,-4(fp)
}
  81abd0:	e037883a 	mov	sp,fp
  81abd4:	df000017 	ldw	fp,0(sp)
  81abd8:	dec00104 	addi	sp,sp,4
  81abdc:	f800283a 	ret

0081abe0 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  81abe0:	defffc04 	addi	sp,sp,-16
  81abe4:	dfc00315 	stw	ra,12(sp)
  81abe8:	df000215 	stw	fp,8(sp)
  81abec:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  81abf0:	010020f4 	movhi	r4,131
  81abf4:	21349704 	addi	r4,r4,-11684
  81abf8:	01430c04 	movi	r5,3120
  81abfc:	08182380 	call	818238 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  81ac00:	008020f4 	movhi	r2,131
  81ac04:	10b49704 	addi	r2,r2,-11684
  81ac08:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  81ac0c:	e03ffe0d 	sth	zero,-8(fp)
  81ac10:	00001306 	br	81ac60 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  81ac14:	e0bffe0b 	ldhu	r2,-8(fp)
  81ac18:	10800d24 	muli	r2,r2,52
  81ac1c:	1007883a 	mov	r3,r2
  81ac20:	008020f4 	movhi	r2,131
  81ac24:	10b4a404 	addi	r2,r2,-11632
  81ac28:	1887883a 	add	r3,r3,r2
  81ac2c:	e0bfff17 	ldw	r2,-4(fp)
  81ac30:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  81ac34:	e0ffff17 	ldw	r3,-4(fp)
  81ac38:	00800fc4 	movi	r2,63
  81ac3c:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  81ac40:	e0bfff17 	ldw	r2,-4(fp)
  81ac44:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  81ac48:	e0bfff17 	ldw	r2,-4(fp)
  81ac4c:	10800d04 	addi	r2,r2,52
  81ac50:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  81ac54:	e0bffe0b 	ldhu	r2,-8(fp)
  81ac58:	10800044 	addi	r2,r2,1
  81ac5c:	e0bffe0d 	sth	r2,-8(fp)
  81ac60:	e0bffe0b 	ldhu	r2,-8(fp)
  81ac64:	10800ef0 	cmpltui	r2,r2,59
  81ac68:	103fea1e 	bne	r2,zero,81ac14 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  81ac6c:	e0bfff17 	ldw	r2,-4(fp)
  81ac70:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  81ac74:	e0ffff17 	ldw	r3,-4(fp)
  81ac78:	00800fc4 	movi	r2,63
  81ac7c:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  81ac80:	e0bfff17 	ldw	r2,-4(fp)
  81ac84:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  81ac88:	00c020b4 	movhi	r3,130
  81ac8c:	18db1104 	addi	r3,r3,27716
  81ac90:	008020f4 	movhi	r2,131
  81ac94:	10b49704 	addi	r2,r2,-11684
  81ac98:	18800015 	stw	r2,0(r3)
#endif
}
  81ac9c:	e037883a 	mov	sp,fp
  81aca0:	dfc00117 	ldw	ra,4(sp)
  81aca4:	df000017 	ldw	fp,0(sp)
  81aca8:	dec00204 	addi	sp,sp,8
  81acac:	f800283a 	ret

0081acb0 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  81acb0:	defff704 	addi	sp,sp,-36
  81acb4:	df000815 	stw	fp,32(sp)
  81acb8:	df000804 	addi	fp,sp,32
  81acbc:	e13ffd15 	stw	r4,-12(fp)
  81acc0:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81acc4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  81acc8:	e0bffe17 	ldw	r2,-8(fp)
  81accc:	1004c03a 	cmpne	r2,r2,zero
  81acd0:	1000021e 	bne	r2,zero,81acdc <OSQAccept+0x2c>
        return ((void *)0);
  81acd4:	e03fff15 	stw	zero,-4(fp)
  81acd8:	00004506 	br	81adf0 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  81acdc:	e0bffd17 	ldw	r2,-12(fp)
  81ace0:	1004c03a 	cmpne	r2,r2,zero
  81ace4:	1000051e 	bne	r2,zero,81acfc <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  81ace8:	e0fffe17 	ldw	r3,-8(fp)
  81acec:	00800104 	movi	r2,4
  81acf0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81acf4:	e03fff15 	stw	zero,-4(fp)
  81acf8:	00003d06 	br	81adf0 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  81acfc:	e0bffd17 	ldw	r2,-12(fp)
  81ad00:	10800003 	ldbu	r2,0(r2)
  81ad04:	10803fcc 	andi	r2,r2,255
  81ad08:	108000a0 	cmpeqi	r2,r2,2
  81ad0c:	1000051e 	bne	r2,zero,81ad24 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  81ad10:	e0fffe17 	ldw	r3,-8(fp)
  81ad14:	00800044 	movi	r2,1
  81ad18:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81ad1c:	e03fff15 	stw	zero,-4(fp)
  81ad20:	00003306 	br	81adf0 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81ad24:	0005303a 	rdctl	r2,status
  81ad28:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ad2c:	e0fff917 	ldw	r3,-28(fp)
  81ad30:	00bfff84 	movi	r2,-2
  81ad34:	1884703a 	and	r2,r3,r2
  81ad38:	1001703a 	wrctl	status,r2
  
  return context;
  81ad3c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81ad40:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  81ad44:	e0bffd17 	ldw	r2,-12(fp)
  81ad48:	10800117 	ldw	r2,4(r2)
  81ad4c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  81ad50:	e0bffb17 	ldw	r2,-20(fp)
  81ad54:	1080058b 	ldhu	r2,22(r2)
  81ad58:	10bfffcc 	andi	r2,r2,65535
  81ad5c:	1005003a 	cmpeq	r2,r2,zero
  81ad60:	1000191e 	bne	r2,zero,81adc8 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  81ad64:	e0bffb17 	ldw	r2,-20(fp)
  81ad68:	10c00417 	ldw	r3,16(r2)
  81ad6c:	18800017 	ldw	r2,0(r3)
  81ad70:	e0bffc15 	stw	r2,-16(fp)
  81ad74:	18c00104 	addi	r3,r3,4
  81ad78:	e0bffb17 	ldw	r2,-20(fp)
  81ad7c:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  81ad80:	e0bffb17 	ldw	r2,-20(fp)
  81ad84:	1080058b 	ldhu	r2,22(r2)
  81ad88:	10bfffc4 	addi	r2,r2,-1
  81ad8c:	1007883a 	mov	r3,r2
  81ad90:	e0bffb17 	ldw	r2,-20(fp)
  81ad94:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  81ad98:	e0bffb17 	ldw	r2,-20(fp)
  81ad9c:	10c00417 	ldw	r3,16(r2)
  81ada0:	e0bffb17 	ldw	r2,-20(fp)
  81ada4:	10800217 	ldw	r2,8(r2)
  81ada8:	1880041e 	bne	r3,r2,81adbc <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
  81adac:	e0bffb17 	ldw	r2,-20(fp)
  81adb0:	10c00117 	ldw	r3,4(r2)
  81adb4:	e0bffb17 	ldw	r2,-20(fp)
  81adb8:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  81adbc:	e0bffe17 	ldw	r2,-8(fp)
  81adc0:	10000005 	stb	zero,0(r2)
  81adc4:	00000406 	br	81add8 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  81adc8:	e0fffe17 	ldw	r3,-8(fp)
  81adcc:	008007c4 	movi	r2,31
  81add0:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  81add4:	e03ffc15 	stw	zero,-16(fp)
  81add8:	e0bffa17 	ldw	r2,-24(fp)
  81addc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81ade0:	e0bff817 	ldw	r2,-32(fp)
  81ade4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  81ade8:	e0bffc17 	ldw	r2,-16(fp)
  81adec:	e0bfff15 	stw	r2,-4(fp)
  81adf0:	e0bfff17 	ldw	r2,-4(fp)
}
  81adf4:	e037883a 	mov	sp,fp
  81adf8:	df000017 	ldw	fp,0(sp)
  81adfc:	dec00104 	addi	sp,sp,4
  81ae00:	f800283a 	ret

0081ae04 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  81ae04:	defff304 	addi	sp,sp,-52
  81ae08:	dfc00c15 	stw	ra,48(sp)
  81ae0c:	df000b15 	stw	fp,44(sp)
  81ae10:	df000b04 	addi	fp,sp,44
  81ae14:	e13ffd15 	stw	r4,-12(fp)
  81ae18:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81ae1c:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  81ae20:	008020b4 	movhi	r2,130
  81ae24:	109b1604 	addi	r2,r2,27736
  81ae28:	10800003 	ldbu	r2,0(r2)
  81ae2c:	10803fcc 	andi	r2,r2,255
  81ae30:	1005003a 	cmpeq	r2,r2,zero
  81ae34:	1000021e 	bne	r2,zero,81ae40 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  81ae38:	e03fff15 	stw	zero,-4(fp)
  81ae3c:	00007006 	br	81b000 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81ae40:	0005303a 	rdctl	r2,status
  81ae44:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ae48:	e0fff917 	ldw	r3,-28(fp)
  81ae4c:	00bfff84 	movi	r2,-2
  81ae50:	1884703a 	and	r2,r3,r2
  81ae54:	1001703a 	wrctl	status,r2
  
  return context;
  81ae58:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81ae5c:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  81ae60:	008020b4 	movhi	r2,130
  81ae64:	109b1504 	addi	r2,r2,27732
  81ae68:	10800017 	ldw	r2,0(r2)
  81ae6c:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  81ae70:	008020b4 	movhi	r2,130
  81ae74:	109b1504 	addi	r2,r2,27732
  81ae78:	10800017 	ldw	r2,0(r2)
  81ae7c:	1005003a 	cmpeq	r2,r2,zero
  81ae80:	1000081e 	bne	r2,zero,81aea4 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  81ae84:	008020b4 	movhi	r2,130
  81ae88:	109b1504 	addi	r2,r2,27732
  81ae8c:	10800017 	ldw	r2,0(r2)
  81ae90:	10800117 	ldw	r2,4(r2)
  81ae94:	1007883a 	mov	r3,r2
  81ae98:	008020b4 	movhi	r2,130
  81ae9c:	109b1504 	addi	r2,r2,27732
  81aea0:	10c00015 	stw	r3,0(r2)
  81aea4:	e0bffa17 	ldw	r2,-24(fp)
  81aea8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81aeac:	e0bff817 	ldw	r2,-32(fp)
  81aeb0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  81aeb4:	e0bffc17 	ldw	r2,-16(fp)
  81aeb8:	1005003a 	cmpeq	r2,r2,zero
  81aebc:	10004e1e 	bne	r2,zero,81aff8 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81aec0:	0005303a 	rdctl	r2,status
  81aec4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81aec8:	e0fff717 	ldw	r3,-36(fp)
  81aecc:	00bfff84 	movi	r2,-2
  81aed0:	1884703a 	and	r2,r3,r2
  81aed4:	1001703a 	wrctl	status,r2
  
  return context;
  81aed8:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
  81aedc:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  81aee0:	008020b4 	movhi	r2,130
  81aee4:	109b1304 	addi	r2,r2,27724
  81aee8:	10800017 	ldw	r2,0(r2)
  81aeec:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  81aef0:	e0bffb17 	ldw	r2,-20(fp)
  81aef4:	1005003a 	cmpeq	r2,r2,zero
  81aef8:	1000311e 	bne	r2,zero,81afc0 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  81aefc:	008020b4 	movhi	r2,130
  81af00:	109b1304 	addi	r2,r2,27724
  81af04:	10800017 	ldw	r2,0(r2)
  81af08:	10c00017 	ldw	r3,0(r2)
  81af0c:	008020b4 	movhi	r2,130
  81af10:	109b1304 	addi	r2,r2,27724
  81af14:	10c00015 	stw	r3,0(r2)
  81af18:	e0bffa17 	ldw	r2,-24(fp)
  81af1c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81af20:	e0bff617 	ldw	r2,-40(fp)
  81af24:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  81af28:	e0fffb17 	ldw	r3,-20(fp)
  81af2c:	e0bffd17 	ldw	r2,-12(fp)
  81af30:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
  81af34:	e0bffe0b 	ldhu	r2,-8(fp)
  81af38:	1085883a 	add	r2,r2,r2
  81af3c:	1085883a 	add	r2,r2,r2
  81af40:	1007883a 	mov	r3,r2
  81af44:	e0bffd17 	ldw	r2,-12(fp)
  81af48:	1887883a 	add	r3,r3,r2
  81af4c:	e0bffb17 	ldw	r2,-20(fp)
  81af50:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  81af54:	e0fffb17 	ldw	r3,-20(fp)
  81af58:	e0bffd17 	ldw	r2,-12(fp)
  81af5c:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
  81af60:	e0fffb17 	ldw	r3,-20(fp)
  81af64:	e0bffd17 	ldw	r2,-12(fp)
  81af68:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
  81af6c:	e0fffb17 	ldw	r3,-20(fp)
  81af70:	e0bffe0b 	ldhu	r2,-8(fp)
  81af74:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
  81af78:	e0bffb17 	ldw	r2,-20(fp)
  81af7c:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  81af80:	e0fffc17 	ldw	r3,-16(fp)
  81af84:	00800084 	movi	r2,2
  81af88:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
  81af8c:	e0bffc17 	ldw	r2,-16(fp)
  81af90:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  81af94:	e0fffc17 	ldw	r3,-16(fp)
  81af98:	e0bffb17 	ldw	r2,-20(fp)
  81af9c:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  81afa0:	e0fffc17 	ldw	r3,-16(fp)
  81afa4:	00800fc4 	movi	r2,63
  81afa8:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  81afac:	e0bffc17 	ldw	r2,-16(fp)
  81afb0:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  81afb4:	e13ffc17 	ldw	r4,-16(fp)
  81afb8:	0817e6c0 	call	817e6c <OS_EventWaitListInit>
  81afbc:	00000e06 	br	81aff8 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  81afc0:	008020b4 	movhi	r2,130
  81afc4:	109b1504 	addi	r2,r2,27732
  81afc8:	10c00017 	ldw	r3,0(r2)
  81afcc:	e0bffc17 	ldw	r2,-16(fp)
  81afd0:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  81afd4:	00c020b4 	movhi	r3,130
  81afd8:	18db1504 	addi	r3,r3,27732
  81afdc:	e0bffc17 	ldw	r2,-16(fp)
  81afe0:	18800015 	stw	r2,0(r3)
  81afe4:	e0bffa17 	ldw	r2,-24(fp)
  81afe8:	e0bff515 	stw	r2,-44(fp)
  81afec:	e0bff517 	ldw	r2,-44(fp)
  81aff0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  81aff4:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
  81aff8:	e0bffc17 	ldw	r2,-16(fp)
  81affc:	e0bfff15 	stw	r2,-4(fp)
  81b000:	e0bfff17 	ldw	r2,-4(fp)
}
  81b004:	e037883a 	mov	sp,fp
  81b008:	dfc00117 	ldw	ra,4(sp)
  81b00c:	df000017 	ldw	fp,0(sp)
  81b010:	dec00204 	addi	sp,sp,8
  81b014:	f800283a 	ret

0081b018 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  81b018:	defff004 	addi	sp,sp,-64
  81b01c:	dfc00f15 	stw	ra,60(sp)
  81b020:	df000e15 	stw	fp,56(sp)
  81b024:	df000e04 	addi	fp,sp,56
  81b028:	e13ffb15 	stw	r4,-20(fp)
  81b02c:	e1bffd15 	stw	r6,-12(fp)
  81b030:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81b034:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  81b038:	e0bffd17 	ldw	r2,-12(fp)
  81b03c:	1004c03a 	cmpne	r2,r2,zero
  81b040:	1000031e 	bne	r2,zero,81b050 <OSQDel+0x38>
        return (pevent);
  81b044:	e0bffb17 	ldw	r2,-20(fp)
  81b048:	e0bfff15 	stw	r2,-4(fp)
  81b04c:	0000ac06 	br	81b300 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  81b050:	e0bffb17 	ldw	r2,-20(fp)
  81b054:	1004c03a 	cmpne	r2,r2,zero
  81b058:	1000061e 	bne	r2,zero,81b074 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  81b05c:	e0fffd17 	ldw	r3,-12(fp)
  81b060:	00800104 	movi	r2,4
  81b064:	18800005 	stb	r2,0(r3)
        return (pevent);
  81b068:	e0fffb17 	ldw	r3,-20(fp)
  81b06c:	e0ffff15 	stw	r3,-4(fp)
  81b070:	0000a306 	br	81b300 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  81b074:	e0bffb17 	ldw	r2,-20(fp)
  81b078:	10800003 	ldbu	r2,0(r2)
  81b07c:	10803fcc 	andi	r2,r2,255
  81b080:	108000a0 	cmpeqi	r2,r2,2
  81b084:	1000061e 	bne	r2,zero,81b0a0 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  81b088:	e0fffd17 	ldw	r3,-12(fp)
  81b08c:	00800044 	movi	r2,1
  81b090:	18800005 	stb	r2,0(r3)
        return (pevent);
  81b094:	e0bffb17 	ldw	r2,-20(fp)
  81b098:	e0bfff15 	stw	r2,-4(fp)
  81b09c:	00009806 	br	81b300 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  81b0a0:	008020b4 	movhi	r2,130
  81b0a4:	109b1604 	addi	r2,r2,27736
  81b0a8:	10800003 	ldbu	r2,0(r2)
  81b0ac:	10803fcc 	andi	r2,r2,255
  81b0b0:	1005003a 	cmpeq	r2,r2,zero
  81b0b4:	1000061e 	bne	r2,zero,81b0d0 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  81b0b8:	e0fffd17 	ldw	r3,-12(fp)
  81b0bc:	008003c4 	movi	r2,15
  81b0c0:	18800005 	stb	r2,0(r3)
        return (pevent);
  81b0c4:	e0fffb17 	ldw	r3,-20(fp)
  81b0c8:	e0ffff15 	stw	r3,-4(fp)
  81b0cc:	00008c06 	br	81b300 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b0d0:	0005303a 	rdctl	r2,status
  81b0d4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b0d8:	e0fff617 	ldw	r3,-40(fp)
  81b0dc:	00bfff84 	movi	r2,-2
  81b0e0:	1884703a 	and	r2,r3,r2
  81b0e4:	1001703a 	wrctl	status,r2
  
  return context;
  81b0e8:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  81b0ec:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  81b0f0:	e0bffb17 	ldw	r2,-20(fp)
  81b0f4:	10800283 	ldbu	r2,10(r2)
  81b0f8:	10803fcc 	andi	r2,r2,255
  81b0fc:	1005003a 	cmpeq	r2,r2,zero
  81b100:	1000031e 	bne	r2,zero,81b110 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  81b104:	00800044 	movi	r2,1
  81b108:	e0bffa05 	stb	r2,-24(fp)
  81b10c:	00000106 	br	81b114 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  81b110:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  81b114:	e0bffc03 	ldbu	r2,-16(fp)
  81b118:	e0bffe15 	stw	r2,-8(fp)
  81b11c:	e0fffe17 	ldw	r3,-8(fp)
  81b120:	1805003a 	cmpeq	r2,r3,zero
  81b124:	1000041e 	bne	r2,zero,81b138 <OSQDel+0x120>
  81b128:	e0fffe17 	ldw	r3,-8(fp)
  81b12c:	18800060 	cmpeqi	r2,r3,1
  81b130:	1000391e 	bne	r2,zero,81b218 <OSQDel+0x200>
  81b134:	00006706 	br	81b2d4 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  81b138:	e0bffa03 	ldbu	r2,-24(fp)
  81b13c:	1004c03a 	cmpne	r2,r2,zero
  81b140:	1000261e 	bne	r2,zero,81b1dc <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  81b144:	e0fffb17 	ldw	r3,-20(fp)
  81b148:	00800fc4 	movi	r2,63
  81b14c:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  81b150:	e0bffb17 	ldw	r2,-20(fp)
  81b154:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  81b158:	e0bffb17 	ldw	r2,-20(fp)
  81b15c:	10800117 	ldw	r2,4(r2)
  81b160:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  81b164:	008020b4 	movhi	r2,130
  81b168:	109b1304 	addi	r2,r2,27724
  81b16c:	10c00017 	ldw	r3,0(r2)
  81b170:	e0bff817 	ldw	r2,-32(fp)
  81b174:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  81b178:	00c020b4 	movhi	r3,130
  81b17c:	18db1304 	addi	r3,r3,27724
  81b180:	e0bff817 	ldw	r2,-32(fp)
  81b184:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  81b188:	e0bffb17 	ldw	r2,-20(fp)
  81b18c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  81b190:	008020b4 	movhi	r2,130
  81b194:	109b1504 	addi	r2,r2,27732
  81b198:	10c00017 	ldw	r3,0(r2)
  81b19c:	e0bffb17 	ldw	r2,-20(fp)
  81b1a0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  81b1a4:	e0bffb17 	ldw	r2,-20(fp)
  81b1a8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  81b1ac:	00c020b4 	movhi	r3,130
  81b1b0:	18db1504 	addi	r3,r3,27732
  81b1b4:	e0bffb17 	ldw	r2,-20(fp)
  81b1b8:	18800015 	stw	r2,0(r3)
  81b1bc:	e0bff717 	ldw	r2,-36(fp)
  81b1c0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b1c4:	e0bff517 	ldw	r2,-44(fp)
  81b1c8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  81b1cc:	e0bffd17 	ldw	r2,-12(fp)
  81b1d0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  81b1d4:	e03ff915 	stw	zero,-28(fp)
  81b1d8:	00004706 	br	81b2f8 <OSQDel+0x2e0>
  81b1dc:	e0bff717 	ldw	r2,-36(fp)
  81b1e0:	e0bff415 	stw	r2,-48(fp)
  81b1e4:	e0bff417 	ldw	r2,-48(fp)
  81b1e8:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  81b1ec:	e0fffd17 	ldw	r3,-12(fp)
  81b1f0:	00801244 	movi	r2,73
  81b1f4:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  81b1f8:	e0bffb17 	ldw	r2,-20(fp)
  81b1fc:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  81b200:	00003d06 	br	81b2f8 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  81b204:	e13ffb17 	ldw	r4,-20(fp)
  81b208:	000b883a 	mov	r5,zero
  81b20c:	01800104 	movi	r6,4
  81b210:	000f883a 	mov	r7,zero
  81b214:	08178b80 	call	8178b8 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  81b218:	e0bffb17 	ldw	r2,-20(fp)
  81b21c:	10800283 	ldbu	r2,10(r2)
  81b220:	10803fcc 	andi	r2,r2,255
  81b224:	1004c03a 	cmpne	r2,r2,zero
  81b228:	103ff61e 	bne	r2,zero,81b204 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  81b22c:	e0fffb17 	ldw	r3,-20(fp)
  81b230:	00800fc4 	movi	r2,63
  81b234:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  81b238:	e0bffb17 	ldw	r2,-20(fp)
  81b23c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  81b240:	e0bffb17 	ldw	r2,-20(fp)
  81b244:	10800117 	ldw	r2,4(r2)
  81b248:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  81b24c:	008020b4 	movhi	r2,130
  81b250:	109b1304 	addi	r2,r2,27724
  81b254:	10c00017 	ldw	r3,0(r2)
  81b258:	e0bff817 	ldw	r2,-32(fp)
  81b25c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  81b260:	00c020b4 	movhi	r3,130
  81b264:	18db1304 	addi	r3,r3,27724
  81b268:	e0bff817 	ldw	r2,-32(fp)
  81b26c:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  81b270:	e0bffb17 	ldw	r2,-20(fp)
  81b274:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  81b278:	008020b4 	movhi	r2,130
  81b27c:	109b1504 	addi	r2,r2,27732
  81b280:	10c00017 	ldw	r3,0(r2)
  81b284:	e0bffb17 	ldw	r2,-20(fp)
  81b288:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  81b28c:	e0bffb17 	ldw	r2,-20(fp)
  81b290:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  81b294:	00c020b4 	movhi	r3,130
  81b298:	18db1504 	addi	r3,r3,27732
  81b29c:	e0bffb17 	ldw	r2,-20(fp)
  81b2a0:	18800015 	stw	r2,0(r3)
  81b2a4:	e0bff717 	ldw	r2,-36(fp)
  81b2a8:	e0bff315 	stw	r2,-52(fp)
  81b2ac:	e0bff317 	ldw	r2,-52(fp)
  81b2b0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  81b2b4:	e0bffa03 	ldbu	r2,-24(fp)
  81b2b8:	10800058 	cmpnei	r2,r2,1
  81b2bc:	1000011e 	bne	r2,zero,81b2c4 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  81b2c0:	08182f80 	call	8182f8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  81b2c4:	e0bffd17 	ldw	r2,-12(fp)
  81b2c8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  81b2cc:	e03ff915 	stw	zero,-28(fp)
             break;
  81b2d0:	00000906 	br	81b2f8 <OSQDel+0x2e0>
  81b2d4:	e0bff717 	ldw	r2,-36(fp)
  81b2d8:	e0bff215 	stw	r2,-56(fp)
  81b2dc:	e0bff217 	ldw	r2,-56(fp)
  81b2e0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  81b2e4:	e0fffd17 	ldw	r3,-12(fp)
  81b2e8:	008001c4 	movi	r2,7
  81b2ec:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  81b2f0:	e0bffb17 	ldw	r2,-20(fp)
  81b2f4:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  81b2f8:	e0bff917 	ldw	r2,-28(fp)
  81b2fc:	e0bfff15 	stw	r2,-4(fp)
  81b300:	e0bfff17 	ldw	r2,-4(fp)
}
  81b304:	e037883a 	mov	sp,fp
  81b308:	dfc00117 	ldw	ra,4(sp)
  81b30c:	df000017 	ldw	fp,0(sp)
  81b310:	dec00204 	addi	sp,sp,8
  81b314:	f800283a 	ret

0081b318 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  81b318:	defff904 	addi	sp,sp,-28
  81b31c:	df000615 	stw	fp,24(sp)
  81b320:	df000604 	addi	fp,sp,24
  81b324:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81b328:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81b32c:	e0bffe17 	ldw	r2,-8(fp)
  81b330:	1004c03a 	cmpne	r2,r2,zero
  81b334:	1000031e 	bne	r2,zero,81b344 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
  81b338:	00800104 	movi	r2,4
  81b33c:	e0bfff15 	stw	r2,-4(fp)
  81b340:	00002206 	br	81b3cc <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  81b344:	e0bffe17 	ldw	r2,-8(fp)
  81b348:	10800003 	ldbu	r2,0(r2)
  81b34c:	10803fcc 	andi	r2,r2,255
  81b350:	108000a0 	cmpeqi	r2,r2,2
  81b354:	1000031e 	bne	r2,zero,81b364 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
  81b358:	00800044 	movi	r2,1
  81b35c:	e0bfff15 	stw	r2,-4(fp)
  81b360:	00001a06 	br	81b3cc <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b364:	0005303a 	rdctl	r2,status
  81b368:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b36c:	e0fffb17 	ldw	r3,-20(fp)
  81b370:	00bfff84 	movi	r2,-2
  81b374:	1884703a 	and	r2,r3,r2
  81b378:	1001703a 	wrctl	status,r2
  
  return context;
  81b37c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81b380:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  81b384:	e0bffe17 	ldw	r2,-8(fp)
  81b388:	10800117 	ldw	r2,4(r2)
  81b38c:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
  81b390:	e0bffd17 	ldw	r2,-12(fp)
  81b394:	10c00117 	ldw	r3,4(r2)
  81b398:	e0bffd17 	ldw	r2,-12(fp)
  81b39c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  81b3a0:	e0bffd17 	ldw	r2,-12(fp)
  81b3a4:	10c00117 	ldw	r3,4(r2)
  81b3a8:	e0bffd17 	ldw	r2,-12(fp)
  81b3ac:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  81b3b0:	e0bffd17 	ldw	r2,-12(fp)
  81b3b4:	1000058d 	sth	zero,22(r2)
  81b3b8:	e0bffc17 	ldw	r2,-16(fp)
  81b3bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b3c0:	e0bffa17 	ldw	r2,-24(fp)
  81b3c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81b3c8:	e03fff15 	stw	zero,-4(fp)
  81b3cc:	e0bfff17 	ldw	r2,-4(fp)
}
  81b3d0:	e037883a 	mov	sp,fp
  81b3d4:	df000017 	ldw	fp,0(sp)
  81b3d8:	dec00104 	addi	sp,sp,4
  81b3dc:	f800283a 	ret

0081b3e0 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  81b3e0:	defff104 	addi	sp,sp,-60
  81b3e4:	dfc00e15 	stw	ra,56(sp)
  81b3e8:	df000d15 	stw	fp,52(sp)
  81b3ec:	df000d04 	addi	fp,sp,52
  81b3f0:	e13ffb15 	stw	r4,-20(fp)
  81b3f4:	e1bffd15 	stw	r6,-12(fp)
  81b3f8:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81b3fc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  81b400:	e0bffd17 	ldw	r2,-12(fp)
  81b404:	1004c03a 	cmpne	r2,r2,zero
  81b408:	1000021e 	bne	r2,zero,81b414 <OSQPend+0x34>
        return ((void *)0);
  81b40c:	e03fff15 	stw	zero,-4(fp)
  81b410:	0000b506 	br	81b6e8 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  81b414:	e0bffb17 	ldw	r2,-20(fp)
  81b418:	1004c03a 	cmpne	r2,r2,zero
  81b41c:	1000051e 	bne	r2,zero,81b434 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  81b420:	e0fffd17 	ldw	r3,-12(fp)
  81b424:	00800104 	movi	r2,4
  81b428:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81b42c:	e03fff15 	stw	zero,-4(fp)
  81b430:	0000ad06 	br	81b6e8 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  81b434:	e0bffb17 	ldw	r2,-20(fp)
  81b438:	10800003 	ldbu	r2,0(r2)
  81b43c:	10803fcc 	andi	r2,r2,255
  81b440:	108000a0 	cmpeqi	r2,r2,2
  81b444:	1000051e 	bne	r2,zero,81b45c <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  81b448:	e0fffd17 	ldw	r3,-12(fp)
  81b44c:	00800044 	movi	r2,1
  81b450:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81b454:	e03fff15 	stw	zero,-4(fp)
  81b458:	0000a306 	br	81b6e8 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  81b45c:	008020b4 	movhi	r2,130
  81b460:	109b1604 	addi	r2,r2,27736
  81b464:	10800003 	ldbu	r2,0(r2)
  81b468:	10803fcc 	andi	r2,r2,255
  81b46c:	1005003a 	cmpeq	r2,r2,zero
  81b470:	1000051e 	bne	r2,zero,81b488 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  81b474:	e0fffd17 	ldw	r3,-12(fp)
  81b478:	00800084 	movi	r2,2
  81b47c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81b480:	e03fff15 	stw	zero,-4(fp)
  81b484:	00009806 	br	81b6e8 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  81b488:	008020b4 	movhi	r2,130
  81b48c:	109b0804 	addi	r2,r2,27680
  81b490:	10800003 	ldbu	r2,0(r2)
  81b494:	10803fcc 	andi	r2,r2,255
  81b498:	1005003a 	cmpeq	r2,r2,zero
  81b49c:	1000051e 	bne	r2,zero,81b4b4 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  81b4a0:	e0fffd17 	ldw	r3,-12(fp)
  81b4a4:	00800344 	movi	r2,13
  81b4a8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81b4ac:	e03fff15 	stw	zero,-4(fp)
  81b4b0:	00008d06 	br	81b6e8 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b4b4:	0005303a 	rdctl	r2,status
  81b4b8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b4bc:	e0fff717 	ldw	r3,-36(fp)
  81b4c0:	00bfff84 	movi	r2,-2
  81b4c4:	1884703a 	and	r2,r3,r2
  81b4c8:	1001703a 	wrctl	status,r2
  
  return context;
  81b4cc:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  81b4d0:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  81b4d4:	e0bffb17 	ldw	r2,-20(fp)
  81b4d8:	10800117 	ldw	r2,4(r2)
  81b4dc:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  81b4e0:	e0bff917 	ldw	r2,-28(fp)
  81b4e4:	1080058b 	ldhu	r2,22(r2)
  81b4e8:	10bfffcc 	andi	r2,r2,65535
  81b4ec:	1005003a 	cmpeq	r2,r2,zero
  81b4f0:	10001f1e 	bne	r2,zero,81b570 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  81b4f4:	e0bff917 	ldw	r2,-28(fp)
  81b4f8:	10c00417 	ldw	r3,16(r2)
  81b4fc:	18800017 	ldw	r2,0(r3)
  81b500:	e0bffa15 	stw	r2,-24(fp)
  81b504:	18c00104 	addi	r3,r3,4
  81b508:	e0bff917 	ldw	r2,-28(fp)
  81b50c:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  81b510:	e0bff917 	ldw	r2,-28(fp)
  81b514:	1080058b 	ldhu	r2,22(r2)
  81b518:	10bfffc4 	addi	r2,r2,-1
  81b51c:	1007883a 	mov	r3,r2
  81b520:	e0bff917 	ldw	r2,-28(fp)
  81b524:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  81b528:	e0bff917 	ldw	r2,-28(fp)
  81b52c:	10c00417 	ldw	r3,16(r2)
  81b530:	e0bff917 	ldw	r2,-28(fp)
  81b534:	10800217 	ldw	r2,8(r2)
  81b538:	1880041e 	bne	r3,r2,81b54c <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
  81b53c:	e0bff917 	ldw	r2,-28(fp)
  81b540:	10c00117 	ldw	r3,4(r2)
  81b544:	e0bff917 	ldw	r2,-28(fp)
  81b548:	10c00415 	stw	r3,16(r2)
  81b54c:	e0bff817 	ldw	r2,-32(fp)
  81b550:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b554:	e0bff617 	ldw	r2,-40(fp)
  81b558:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  81b55c:	e0bffd17 	ldw	r2,-12(fp)
  81b560:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  81b564:	e0bffa17 	ldw	r2,-24(fp)
  81b568:	e0bfff15 	stw	r2,-4(fp)
  81b56c:	00005e06 	br	81b6e8 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  81b570:	008020b4 	movhi	r2,130
  81b574:	109b1704 	addi	r2,r2,27740
  81b578:	10c00017 	ldw	r3,0(r2)
  81b57c:	008020b4 	movhi	r2,130
  81b580:	109b1704 	addi	r2,r2,27740
  81b584:	10800017 	ldw	r2,0(r2)
  81b588:	10800c03 	ldbu	r2,48(r2)
  81b58c:	10800114 	ori	r2,r2,4
  81b590:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  81b594:	008020b4 	movhi	r2,130
  81b598:	109b1704 	addi	r2,r2,27740
  81b59c:	10800017 	ldw	r2,0(r2)
  81b5a0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  81b5a4:	008020b4 	movhi	r2,130
  81b5a8:	109b1704 	addi	r2,r2,27740
  81b5ac:	10c00017 	ldw	r3,0(r2)
  81b5b0:	e0bffc0b 	ldhu	r2,-16(fp)
  81b5b4:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  81b5b8:	e13ffb17 	ldw	r4,-20(fp)
  81b5bc:	0817a4c0 	call	817a4c <OS_EventTaskWait>
  81b5c0:	e0bff817 	ldw	r2,-32(fp)
  81b5c4:	e0bff515 	stw	r2,-44(fp)
  81b5c8:	e0bff517 	ldw	r2,-44(fp)
  81b5cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  81b5d0:	08182f80 	call	8182f8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b5d4:	0005303a 	rdctl	r2,status
  81b5d8:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b5dc:	e0fff417 	ldw	r3,-48(fp)
  81b5e0:	00bfff84 	movi	r2,-2
  81b5e4:	1884703a 	and	r2,r3,r2
  81b5e8:	1001703a 	wrctl	status,r2
  
  return context;
  81b5ec:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
  81b5f0:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  81b5f4:	008020b4 	movhi	r2,130
  81b5f8:	109b1704 	addi	r2,r2,27740
  81b5fc:	10800017 	ldw	r2,0(r2)
  81b600:	10800c43 	ldbu	r2,49(r2)
  81b604:	10803fcc 	andi	r2,r2,255
  81b608:	e0bffe15 	stw	r2,-8(fp)
  81b60c:	e0fffe17 	ldw	r3,-8(fp)
  81b610:	1805003a 	cmpeq	r2,r3,zero
  81b614:	1000041e 	bne	r2,zero,81b628 <OSQPend+0x248>
  81b618:	e0fffe17 	ldw	r3,-8(fp)
  81b61c:	188000a0 	cmpeqi	r2,r3,2
  81b620:	1000091e 	bne	r2,zero,81b648 <OSQPend+0x268>
  81b624:	00000d06 	br	81b65c <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  81b628:	008020b4 	movhi	r2,130
  81b62c:	109b1704 	addi	r2,r2,27740
  81b630:	10800017 	ldw	r2,0(r2)
  81b634:	10800917 	ldw	r2,36(r2)
  81b638:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
  81b63c:	e0bffd17 	ldw	r2,-12(fp)
  81b640:	10000005 	stb	zero,0(r2)
             break;
  81b644:	00000e06 	br	81b680 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  81b648:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  81b64c:	e0fffd17 	ldw	r3,-12(fp)
  81b650:	00800384 	movi	r2,14
  81b654:	18800005 	stb	r2,0(r3)
             break;
  81b658:	00000906 	br	81b680 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  81b65c:	008020b4 	movhi	r2,130
  81b660:	109b1704 	addi	r2,r2,27740
  81b664:	11000017 	ldw	r4,0(r2)
  81b668:	e17ffb17 	ldw	r5,-20(fp)
  81b66c:	0817cb00 	call	817cb0 <OS_EventTaskRemove>
             pmsg = (void *)0;
  81b670:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  81b674:	e0fffd17 	ldw	r3,-12(fp)
  81b678:	00800284 	movi	r2,10
  81b67c:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  81b680:	008020b4 	movhi	r2,130
  81b684:	109b1704 	addi	r2,r2,27740
  81b688:	10800017 	ldw	r2,0(r2)
  81b68c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  81b690:	008020b4 	movhi	r2,130
  81b694:	109b1704 	addi	r2,r2,27740
  81b698:	10800017 	ldw	r2,0(r2)
  81b69c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  81b6a0:	008020b4 	movhi	r2,130
  81b6a4:	109b1704 	addi	r2,r2,27740
  81b6a8:	10800017 	ldw	r2,0(r2)
  81b6ac:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  81b6b0:	008020b4 	movhi	r2,130
  81b6b4:	109b1704 	addi	r2,r2,27740
  81b6b8:	10800017 	ldw	r2,0(r2)
  81b6bc:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  81b6c0:	008020b4 	movhi	r2,130
  81b6c4:	109b1704 	addi	r2,r2,27740
  81b6c8:	10800017 	ldw	r2,0(r2)
  81b6cc:	10000915 	stw	zero,36(r2)
  81b6d0:	e0bff817 	ldw	r2,-32(fp)
  81b6d4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b6d8:	e0bff317 	ldw	r2,-52(fp)
  81b6dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  81b6e0:	e0bffa17 	ldw	r2,-24(fp)
  81b6e4:	e0bfff15 	stw	r2,-4(fp)
  81b6e8:	e0bfff17 	ldw	r2,-4(fp)
}
  81b6ec:	e037883a 	mov	sp,fp
  81b6f0:	dfc00117 	ldw	ra,4(sp)
  81b6f4:	df000017 	ldw	fp,0(sp)
  81b6f8:	dec00204 	addi	sp,sp,8
  81b6fc:	f800283a 	ret

0081b700 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  81b700:	defff504 	addi	sp,sp,-44
  81b704:	dfc00a15 	stw	ra,40(sp)
  81b708:	df000915 	stw	fp,36(sp)
  81b70c:	df000904 	addi	fp,sp,36
  81b710:	e13ffc15 	stw	r4,-16(fp)
  81b714:	e1bffe15 	stw	r6,-8(fp)
  81b718:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81b71c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  81b720:	e0bffe17 	ldw	r2,-8(fp)
  81b724:	1004c03a 	cmpne	r2,r2,zero
  81b728:	1000021e 	bne	r2,zero,81b734 <OSQPendAbort+0x34>
        return (0);
  81b72c:	e03fff15 	stw	zero,-4(fp)
  81b730:	00004c06 	br	81b864 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  81b734:	e0bffc17 	ldw	r2,-16(fp)
  81b738:	1004c03a 	cmpne	r2,r2,zero
  81b73c:	1000051e 	bne	r2,zero,81b754 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  81b740:	e0fffe17 	ldw	r3,-8(fp)
  81b744:	00800104 	movi	r2,4
  81b748:	18800005 	stb	r2,0(r3)
        return (0);
  81b74c:	e03fff15 	stw	zero,-4(fp)
  81b750:	00004406 	br	81b864 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  81b754:	e0bffc17 	ldw	r2,-16(fp)
  81b758:	10800003 	ldbu	r2,0(r2)
  81b75c:	10803fcc 	andi	r2,r2,255
  81b760:	108000a0 	cmpeqi	r2,r2,2
  81b764:	1000051e 	bne	r2,zero,81b77c <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  81b768:	e0fffe17 	ldw	r3,-8(fp)
  81b76c:	00800044 	movi	r2,1
  81b770:	18800005 	stb	r2,0(r3)
        return (0);
  81b774:	e03fff15 	stw	zero,-4(fp)
  81b778:	00003a06 	br	81b864 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b77c:	0005303a 	rdctl	r2,status
  81b780:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b784:	e0fff917 	ldw	r3,-28(fp)
  81b788:	00bfff84 	movi	r2,-2
  81b78c:	1884703a 	and	r2,r3,r2
  81b790:	1001703a 	wrctl	status,r2
  
  return context;
  81b794:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81b798:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  81b79c:	e0bffc17 	ldw	r2,-16(fp)
  81b7a0:	10800283 	ldbu	r2,10(r2)
  81b7a4:	10803fcc 	andi	r2,r2,255
  81b7a8:	1005003a 	cmpeq	r2,r2,zero
  81b7ac:	1000261e 	bne	r2,zero,81b848 <OSQPendAbort+0x148>
        nbr_tasks = 0;
  81b7b0:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  81b7b4:	e0bffd03 	ldbu	r2,-12(fp)
  81b7b8:	10800060 	cmpeqi	r2,r2,1
  81b7bc:	1000091e 	bne	r2,zero,81b7e4 <OSQPendAbort+0xe4>
  81b7c0:	00000e06 	br	81b7fc <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  81b7c4:	e13ffc17 	ldw	r4,-16(fp)
  81b7c8:	000b883a 	mov	r5,zero
  81b7cc:	01800104 	movi	r6,4
  81b7d0:	01c00084 	movi	r7,2
  81b7d4:	08178b80 	call	8178b8 <OS_EventTaskRdy>
                     nbr_tasks++;
  81b7d8:	e0bffb03 	ldbu	r2,-20(fp)
  81b7dc:	10800044 	addi	r2,r2,1
  81b7e0:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  81b7e4:	e0bffc17 	ldw	r2,-16(fp)
  81b7e8:	10800283 	ldbu	r2,10(r2)
  81b7ec:	10803fcc 	andi	r2,r2,255
  81b7f0:	1004c03a 	cmpne	r2,r2,zero
  81b7f4:	103ff31e 	bne	r2,zero,81b7c4 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  81b7f8:	00000806 	br	81b81c <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  81b7fc:	e13ffc17 	ldw	r4,-16(fp)
  81b800:	000b883a 	mov	r5,zero
  81b804:	01800104 	movi	r6,4
  81b808:	01c00084 	movi	r7,2
  81b80c:	08178b80 	call	8178b8 <OS_EventTaskRdy>
                 nbr_tasks++;
  81b810:	e0bffb03 	ldbu	r2,-20(fp)
  81b814:	10800044 	addi	r2,r2,1
  81b818:	e0bffb05 	stb	r2,-20(fp)
  81b81c:	e0bffa17 	ldw	r2,-24(fp)
  81b820:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b824:	e0bff817 	ldw	r2,-32(fp)
  81b828:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  81b82c:	08182f80 	call	8182f8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  81b830:	e0fffe17 	ldw	r3,-8(fp)
  81b834:	00800384 	movi	r2,14
  81b838:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  81b83c:	e0bffb03 	ldbu	r2,-20(fp)
  81b840:	e0bfff15 	stw	r2,-4(fp)
  81b844:	00000706 	br	81b864 <OSQPendAbort+0x164>
  81b848:	e0bffa17 	ldw	r2,-24(fp)
  81b84c:	e0bff715 	stw	r2,-36(fp)
  81b850:	e0bff717 	ldw	r2,-36(fp)
  81b854:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81b858:	e0bffe17 	ldw	r2,-8(fp)
  81b85c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  81b860:	e03fff15 	stw	zero,-4(fp)
  81b864:	e0bfff17 	ldw	r2,-4(fp)
}
  81b868:	e037883a 	mov	sp,fp
  81b86c:	dfc00117 	ldw	ra,4(sp)
  81b870:	df000017 	ldw	fp,0(sp)
  81b874:	dec00204 	addi	sp,sp,8
  81b878:	f800283a 	ret

0081b87c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  81b87c:	defff504 	addi	sp,sp,-44
  81b880:	dfc00a15 	stw	ra,40(sp)
  81b884:	df000915 	stw	fp,36(sp)
  81b888:	df000904 	addi	fp,sp,36
  81b88c:	e13ffd15 	stw	r4,-12(fp)
  81b890:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  81b894:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  81b898:	e0bffd17 	ldw	r2,-12(fp)
  81b89c:	1004c03a 	cmpne	r2,r2,zero
  81b8a0:	1000031e 	bne	r2,zero,81b8b0 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
  81b8a4:	00800104 	movi	r2,4
  81b8a8:	e0bfff15 	stw	r2,-4(fp)
  81b8ac:	00004d06 	br	81b9e4 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  81b8b0:	e0bffd17 	ldw	r2,-12(fp)
  81b8b4:	10800003 	ldbu	r2,0(r2)
  81b8b8:	10803fcc 	andi	r2,r2,255
  81b8bc:	108000a0 	cmpeqi	r2,r2,2
  81b8c0:	1000031e 	bne	r2,zero,81b8d0 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
  81b8c4:	00800044 	movi	r2,1
  81b8c8:	e0bfff15 	stw	r2,-4(fp)
  81b8cc:	00004506 	br	81b9e4 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b8d0:	0005303a 	rdctl	r2,status
  81b8d4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b8d8:	e0fffa17 	ldw	r3,-24(fp)
  81b8dc:	00bfff84 	movi	r2,-2
  81b8e0:	1884703a 	and	r2,r3,r2
  81b8e4:	1001703a 	wrctl	status,r2
  
  return context;
  81b8e8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81b8ec:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  81b8f0:	e0bffd17 	ldw	r2,-12(fp)
  81b8f4:	10800283 	ldbu	r2,10(r2)
  81b8f8:	10803fcc 	andi	r2,r2,255
  81b8fc:	1005003a 	cmpeq	r2,r2,zero
  81b900:	10000c1e 	bne	r2,zero,81b934 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  81b904:	e13ffd17 	ldw	r4,-12(fp)
  81b908:	e17ffe17 	ldw	r5,-8(fp)
  81b90c:	01800104 	movi	r6,4
  81b910:	000f883a 	mov	r7,zero
  81b914:	08178b80 	call	8178b8 <OS_EventTaskRdy>
  81b918:	e0bffb17 	ldw	r2,-20(fp)
  81b91c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b920:	e0bff917 	ldw	r2,-28(fp)
  81b924:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  81b928:	08182f80 	call	8182f8 <OS_Sched>
        return (OS_ERR_NONE);
  81b92c:	e03fff15 	stw	zero,-4(fp)
  81b930:	00002c06 	br	81b9e4 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  81b934:	e0bffd17 	ldw	r2,-12(fp)
  81b938:	10800117 	ldw	r2,4(r2)
  81b93c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  81b940:	e0bffc17 	ldw	r2,-16(fp)
  81b944:	10c0058b 	ldhu	r3,22(r2)
  81b948:	e0bffc17 	ldw	r2,-16(fp)
  81b94c:	1080050b 	ldhu	r2,20(r2)
  81b950:	18ffffcc 	andi	r3,r3,65535
  81b954:	10bfffcc 	andi	r2,r2,65535
  81b958:	18800736 	bltu	r3,r2,81b978 <OSQPost+0xfc>
  81b95c:	e0bffb17 	ldw	r2,-20(fp)
  81b960:	e0bff815 	stw	r2,-32(fp)
  81b964:	e0bff817 	ldw	r2,-32(fp)
  81b968:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  81b96c:	00800784 	movi	r2,30
  81b970:	e0bfff15 	stw	r2,-4(fp)
  81b974:	00001b06 	br	81b9e4 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  81b978:	e0bffc17 	ldw	r2,-16(fp)
  81b97c:	10c00317 	ldw	r3,12(r2)
  81b980:	e0bffe17 	ldw	r2,-8(fp)
  81b984:	18800015 	stw	r2,0(r3)
  81b988:	18c00104 	addi	r3,r3,4
  81b98c:	e0bffc17 	ldw	r2,-16(fp)
  81b990:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  81b994:	e0bffc17 	ldw	r2,-16(fp)
  81b998:	1080058b 	ldhu	r2,22(r2)
  81b99c:	10800044 	addi	r2,r2,1
  81b9a0:	1007883a 	mov	r3,r2
  81b9a4:	e0bffc17 	ldw	r2,-16(fp)
  81b9a8:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  81b9ac:	e0bffc17 	ldw	r2,-16(fp)
  81b9b0:	10c00317 	ldw	r3,12(r2)
  81b9b4:	e0bffc17 	ldw	r2,-16(fp)
  81b9b8:	10800217 	ldw	r2,8(r2)
  81b9bc:	1880041e 	bne	r3,r2,81b9d0 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
  81b9c0:	e0bffc17 	ldw	r2,-16(fp)
  81b9c4:	10c00117 	ldw	r3,4(r2)
  81b9c8:	e0bffc17 	ldw	r2,-16(fp)
  81b9cc:	10c00315 	stw	r3,12(r2)
  81b9d0:	e0bffb17 	ldw	r2,-20(fp)
  81b9d4:	e0bff715 	stw	r2,-36(fp)
  81b9d8:	e0bff717 	ldw	r2,-36(fp)
  81b9dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81b9e0:	e03fff15 	stw	zero,-4(fp)
  81b9e4:	e0bfff17 	ldw	r2,-4(fp)
}
  81b9e8:	e037883a 	mov	sp,fp
  81b9ec:	dfc00117 	ldw	ra,4(sp)
  81b9f0:	df000017 	ldw	fp,0(sp)
  81b9f4:	dec00204 	addi	sp,sp,8
  81b9f8:	f800283a 	ret

0081b9fc <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  81b9fc:	defff504 	addi	sp,sp,-44
  81ba00:	dfc00a15 	stw	ra,40(sp)
  81ba04:	df000915 	stw	fp,36(sp)
  81ba08:	df000904 	addi	fp,sp,36
  81ba0c:	e13ffd15 	stw	r4,-12(fp)
  81ba10:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81ba14:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81ba18:	e0bffd17 	ldw	r2,-12(fp)
  81ba1c:	1004c03a 	cmpne	r2,r2,zero
  81ba20:	1000031e 	bne	r2,zero,81ba30 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
  81ba24:	00800104 	movi	r2,4
  81ba28:	e0bfff15 	stw	r2,-4(fp)
  81ba2c:	00004f06 	br	81bb6c <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  81ba30:	e0bffd17 	ldw	r2,-12(fp)
  81ba34:	10800003 	ldbu	r2,0(r2)
  81ba38:	10803fcc 	andi	r2,r2,255
  81ba3c:	108000a0 	cmpeqi	r2,r2,2
  81ba40:	1000031e 	bne	r2,zero,81ba50 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
  81ba44:	00800044 	movi	r2,1
  81ba48:	e0bfff15 	stw	r2,-4(fp)
  81ba4c:	00004706 	br	81bb6c <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81ba50:	0005303a 	rdctl	r2,status
  81ba54:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ba58:	e0fffa17 	ldw	r3,-24(fp)
  81ba5c:	00bfff84 	movi	r2,-2
  81ba60:	1884703a 	and	r2,r3,r2
  81ba64:	1001703a 	wrctl	status,r2
  
  return context;
  81ba68:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81ba6c:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  81ba70:	e0bffd17 	ldw	r2,-12(fp)
  81ba74:	10800283 	ldbu	r2,10(r2)
  81ba78:	10803fcc 	andi	r2,r2,255
  81ba7c:	1005003a 	cmpeq	r2,r2,zero
  81ba80:	10000c1e 	bne	r2,zero,81bab4 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  81ba84:	e13ffd17 	ldw	r4,-12(fp)
  81ba88:	e17ffe17 	ldw	r5,-8(fp)
  81ba8c:	01800104 	movi	r6,4
  81ba90:	000f883a 	mov	r7,zero
  81ba94:	08178b80 	call	8178b8 <OS_EventTaskRdy>
  81ba98:	e0bffb17 	ldw	r2,-20(fp)
  81ba9c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81baa0:	e0bff917 	ldw	r2,-28(fp)
  81baa4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  81baa8:	08182f80 	call	8182f8 <OS_Sched>
        return (OS_ERR_NONE);
  81baac:	e03fff15 	stw	zero,-4(fp)
  81bab0:	00002e06 	br	81bb6c <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  81bab4:	e0bffd17 	ldw	r2,-12(fp)
  81bab8:	10800117 	ldw	r2,4(r2)
  81babc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  81bac0:	e0bffc17 	ldw	r2,-16(fp)
  81bac4:	10c0058b 	ldhu	r3,22(r2)
  81bac8:	e0bffc17 	ldw	r2,-16(fp)
  81bacc:	1080050b 	ldhu	r2,20(r2)
  81bad0:	18ffffcc 	andi	r3,r3,65535
  81bad4:	10bfffcc 	andi	r2,r2,65535
  81bad8:	18800736 	bltu	r3,r2,81baf8 <OSQPostFront+0xfc>
  81badc:	e0bffb17 	ldw	r2,-20(fp)
  81bae0:	e0bff815 	stw	r2,-32(fp)
  81bae4:	e0bff817 	ldw	r2,-32(fp)
  81bae8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  81baec:	00800784 	movi	r2,30
  81baf0:	e0bfff15 	stw	r2,-4(fp)
  81baf4:	00001d06 	br	81bb6c <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  81baf8:	e0bffc17 	ldw	r2,-16(fp)
  81bafc:	10c00417 	ldw	r3,16(r2)
  81bb00:	e0bffc17 	ldw	r2,-16(fp)
  81bb04:	10800117 	ldw	r2,4(r2)
  81bb08:	1880041e 	bne	r3,r2,81bb1c <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
  81bb0c:	e0bffc17 	ldw	r2,-16(fp)
  81bb10:	10c00217 	ldw	r3,8(r2)
  81bb14:	e0bffc17 	ldw	r2,-16(fp)
  81bb18:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  81bb1c:	e0bffc17 	ldw	r2,-16(fp)
  81bb20:	10800417 	ldw	r2,16(r2)
  81bb24:	10ffff04 	addi	r3,r2,-4
  81bb28:	e0bffc17 	ldw	r2,-16(fp)
  81bb2c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  81bb30:	e0bffc17 	ldw	r2,-16(fp)
  81bb34:	10c00417 	ldw	r3,16(r2)
  81bb38:	e0bffe17 	ldw	r2,-8(fp)
  81bb3c:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  81bb40:	e0bffc17 	ldw	r2,-16(fp)
  81bb44:	1080058b 	ldhu	r2,22(r2)
  81bb48:	10800044 	addi	r2,r2,1
  81bb4c:	1007883a 	mov	r3,r2
  81bb50:	e0bffc17 	ldw	r2,-16(fp)
  81bb54:	10c0058d 	sth	r3,22(r2)
  81bb58:	e0bffb17 	ldw	r2,-20(fp)
  81bb5c:	e0bff715 	stw	r2,-36(fp)
  81bb60:	e0bff717 	ldw	r2,-36(fp)
  81bb64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81bb68:	e03fff15 	stw	zero,-4(fp)
  81bb6c:	e0bfff17 	ldw	r2,-4(fp)
}
  81bb70:	e037883a 	mov	sp,fp
  81bb74:	dfc00117 	ldw	ra,4(sp)
  81bb78:	df000017 	ldw	fp,0(sp)
  81bb7c:	dec00204 	addi	sp,sp,8
  81bb80:	f800283a 	ret

0081bb84 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  81bb84:	defff404 	addi	sp,sp,-48
  81bb88:	dfc00b15 	stw	ra,44(sp)
  81bb8c:	df000a15 	stw	fp,40(sp)
  81bb90:	df000a04 	addi	fp,sp,40
  81bb94:	e13ffc15 	stw	r4,-16(fp)
  81bb98:	e17ffd15 	stw	r5,-12(fp)
  81bb9c:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81bba0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81bba4:	e0bffc17 	ldw	r2,-16(fp)
  81bba8:	1004c03a 	cmpne	r2,r2,zero
  81bbac:	1000031e 	bne	r2,zero,81bbbc <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
  81bbb0:	00800104 	movi	r2,4
  81bbb4:	e0bfff15 	stw	r2,-4(fp)
  81bbb8:	00007906 	br	81bda0 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  81bbbc:	e0bffc17 	ldw	r2,-16(fp)
  81bbc0:	10800003 	ldbu	r2,0(r2)
  81bbc4:	10803fcc 	andi	r2,r2,255
  81bbc8:	108000a0 	cmpeqi	r2,r2,2
  81bbcc:	1000031e 	bne	r2,zero,81bbdc <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
  81bbd0:	00800044 	movi	r2,1
  81bbd4:	e0bfff15 	stw	r2,-4(fp)
  81bbd8:	00007106 	br	81bda0 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81bbdc:	0005303a 	rdctl	r2,status
  81bbe0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81bbe4:	e0fff917 	ldw	r3,-28(fp)
  81bbe8:	00bfff84 	movi	r2,-2
  81bbec:	1884703a 	and	r2,r3,r2
  81bbf0:	1001703a 	wrctl	status,r2
  
  return context;
  81bbf4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81bbf8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  81bbfc:	e0bffc17 	ldw	r2,-16(fp)
  81bc00:	10800283 	ldbu	r2,10(r2)
  81bc04:	10803fcc 	andi	r2,r2,255
  81bc08:	1005003a 	cmpeq	r2,r2,zero
  81bc0c:	1000211e 	bne	r2,zero,81bc94 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  81bc10:	e0bffe03 	ldbu	r2,-8(fp)
  81bc14:	1080004c 	andi	r2,r2,1
  81bc18:	10803fcc 	andi	r2,r2,255
  81bc1c:	1005003a 	cmpeq	r2,r2,zero
  81bc20:	10000c1e 	bne	r2,zero,81bc54 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  81bc24:	00000506 	br	81bc3c <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  81bc28:	e13ffc17 	ldw	r4,-16(fp)
  81bc2c:	e17ffd17 	ldw	r5,-12(fp)
  81bc30:	01800104 	movi	r6,4
  81bc34:	000f883a 	mov	r7,zero
  81bc38:	08178b80 	call	8178b8 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  81bc3c:	e0bffc17 	ldw	r2,-16(fp)
  81bc40:	10800283 	ldbu	r2,10(r2)
  81bc44:	10803fcc 	andi	r2,r2,255
  81bc48:	1004c03a 	cmpne	r2,r2,zero
  81bc4c:	103ff61e 	bne	r2,zero,81bc28 <OSQPostOpt+0xa4>
  81bc50:	00000506 	br	81bc68 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  81bc54:	e13ffc17 	ldw	r4,-16(fp)
  81bc58:	e17ffd17 	ldw	r5,-12(fp)
  81bc5c:	01800104 	movi	r6,4
  81bc60:	000f883a 	mov	r7,zero
  81bc64:	08178b80 	call	8178b8 <OS_EventTaskRdy>
  81bc68:	e0bffa17 	ldw	r2,-24(fp)
  81bc6c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81bc70:	e0bff817 	ldw	r2,-32(fp)
  81bc74:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  81bc78:	e0bffe03 	ldbu	r2,-8(fp)
  81bc7c:	1080010c 	andi	r2,r2,4
  81bc80:	1004c03a 	cmpne	r2,r2,zero
  81bc84:	1000011e 	bne	r2,zero,81bc8c <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
  81bc88:	08182f80 	call	8182f8 <OS_Sched>
        }
        return (OS_ERR_NONE);
  81bc8c:	e03fff15 	stw	zero,-4(fp)
  81bc90:	00004306 	br	81bda0 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  81bc94:	e0bffc17 	ldw	r2,-16(fp)
  81bc98:	10800117 	ldw	r2,4(r2)
  81bc9c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  81bca0:	e0bffb17 	ldw	r2,-20(fp)
  81bca4:	10c0058b 	ldhu	r3,22(r2)
  81bca8:	e0bffb17 	ldw	r2,-20(fp)
  81bcac:	1080050b 	ldhu	r2,20(r2)
  81bcb0:	18ffffcc 	andi	r3,r3,65535
  81bcb4:	10bfffcc 	andi	r2,r2,65535
  81bcb8:	18800736 	bltu	r3,r2,81bcd8 <OSQPostOpt+0x154>
  81bcbc:	e0bffa17 	ldw	r2,-24(fp)
  81bcc0:	e0bff715 	stw	r2,-36(fp)
  81bcc4:	e0bff717 	ldw	r2,-36(fp)
  81bcc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  81bccc:	00800784 	movi	r2,30
  81bcd0:	e0bfff15 	stw	r2,-4(fp)
  81bcd4:	00003206 	br	81bda0 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  81bcd8:	e0bffe03 	ldbu	r2,-8(fp)
  81bcdc:	1080008c 	andi	r2,r2,2
  81bce0:	1005003a 	cmpeq	r2,r2,zero
  81bce4:	1000131e 	bne	r2,zero,81bd34 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  81bce8:	e0bffb17 	ldw	r2,-20(fp)
  81bcec:	10c00417 	ldw	r3,16(r2)
  81bcf0:	e0bffb17 	ldw	r2,-20(fp)
  81bcf4:	10800117 	ldw	r2,4(r2)
  81bcf8:	1880041e 	bne	r3,r2,81bd0c <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  81bcfc:	e0bffb17 	ldw	r2,-20(fp)
  81bd00:	10c00217 	ldw	r3,8(r2)
  81bd04:	e0bffb17 	ldw	r2,-20(fp)
  81bd08:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  81bd0c:	e0bffb17 	ldw	r2,-20(fp)
  81bd10:	10800417 	ldw	r2,16(r2)
  81bd14:	10ffff04 	addi	r3,r2,-4
  81bd18:	e0bffb17 	ldw	r2,-20(fp)
  81bd1c:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  81bd20:	e0bffb17 	ldw	r2,-20(fp)
  81bd24:	10c00417 	ldw	r3,16(r2)
  81bd28:	e0bffd17 	ldw	r2,-12(fp)
  81bd2c:	18800015 	stw	r2,0(r3)
  81bd30:	00001006 	br	81bd74 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  81bd34:	e0bffb17 	ldw	r2,-20(fp)
  81bd38:	10c00317 	ldw	r3,12(r2)
  81bd3c:	e0bffd17 	ldw	r2,-12(fp)
  81bd40:	18800015 	stw	r2,0(r3)
  81bd44:	18c00104 	addi	r3,r3,4
  81bd48:	e0bffb17 	ldw	r2,-20(fp)
  81bd4c:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  81bd50:	e0bffb17 	ldw	r2,-20(fp)
  81bd54:	10c00317 	ldw	r3,12(r2)
  81bd58:	e0bffb17 	ldw	r2,-20(fp)
  81bd5c:	10800217 	ldw	r2,8(r2)
  81bd60:	1880041e 	bne	r3,r2,81bd74 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
  81bd64:	e0bffb17 	ldw	r2,-20(fp)
  81bd68:	10c00117 	ldw	r3,4(r2)
  81bd6c:	e0bffb17 	ldw	r2,-20(fp)
  81bd70:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  81bd74:	e0bffb17 	ldw	r2,-20(fp)
  81bd78:	1080058b 	ldhu	r2,22(r2)
  81bd7c:	10800044 	addi	r2,r2,1
  81bd80:	1007883a 	mov	r3,r2
  81bd84:	e0bffb17 	ldw	r2,-20(fp)
  81bd88:	10c0058d 	sth	r3,22(r2)
  81bd8c:	e0bffa17 	ldw	r2,-24(fp)
  81bd90:	e0bff615 	stw	r2,-40(fp)
  81bd94:	e0bff617 	ldw	r2,-40(fp)
  81bd98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81bd9c:	e03fff15 	stw	zero,-4(fp)
  81bda0:	e0bfff17 	ldw	r2,-4(fp)
}
  81bda4:	e037883a 	mov	sp,fp
  81bda8:	dfc00117 	ldw	ra,4(sp)
  81bdac:	df000017 	ldw	fp,0(sp)
  81bdb0:	dec00204 	addi	sp,sp,8
  81bdb4:	f800283a 	ret

0081bdb8 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  81bdb8:	defff504 	addi	sp,sp,-44
  81bdbc:	df000a15 	stw	fp,40(sp)
  81bdc0:	df000a04 	addi	fp,sp,40
  81bdc4:	e13ffd15 	stw	r4,-12(fp)
  81bdc8:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  81bdcc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  81bdd0:	e0bffd17 	ldw	r2,-12(fp)
  81bdd4:	1004c03a 	cmpne	r2,r2,zero
  81bdd8:	1000031e 	bne	r2,zero,81bde8 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  81bddc:	00800104 	movi	r2,4
  81bde0:	e0bfff15 	stw	r2,-4(fp)
  81bde4:	00004f06 	br	81bf24 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  81bde8:	e0bffe17 	ldw	r2,-8(fp)
  81bdec:	1004c03a 	cmpne	r2,r2,zero
  81bdf0:	1000031e 	bne	r2,zero,81be00 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  81bdf4:	00800244 	movi	r2,9
  81bdf8:	e0bfff15 	stw	r2,-4(fp)
  81bdfc:	00004906 	br	81bf24 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  81be00:	e0bffd17 	ldw	r2,-12(fp)
  81be04:	10800003 	ldbu	r2,0(r2)
  81be08:	10803fcc 	andi	r2,r2,255
  81be0c:	108000a0 	cmpeqi	r2,r2,2
  81be10:	1000031e 	bne	r2,zero,81be20 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  81be14:	00800044 	movi	r2,1
  81be18:	e0bfff15 	stw	r2,-4(fp)
  81be1c:	00004106 	br	81bf24 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81be20:	0005303a 	rdctl	r2,status
  81be24:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81be28:	e0fff717 	ldw	r3,-36(fp)
  81be2c:	00bfff84 	movi	r2,-2
  81be30:	1884703a 	and	r2,r3,r2
  81be34:	1001703a 	wrctl	status,r2
  
  return context;
  81be38:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  81be3c:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  81be40:	e0bffd17 	ldw	r2,-12(fp)
  81be44:	10c00283 	ldbu	r3,10(r2)
  81be48:	e0bffe17 	ldw	r2,-8(fp)
  81be4c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  81be50:	e0bffd17 	ldw	r2,-12(fp)
  81be54:	108002c4 	addi	r2,r2,11
  81be58:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  81be5c:	e0bffe17 	ldw	r2,-8(fp)
  81be60:	10800204 	addi	r2,r2,8
  81be64:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  81be68:	e03ffb05 	stb	zero,-20(fp)
  81be6c:	00000d06 	br	81bea4 <OSQQuery+0xec>
        *pdest++ = *psrc++;
  81be70:	e0bffa17 	ldw	r2,-24(fp)
  81be74:	10c00003 	ldbu	r3,0(r2)
  81be78:	e0bff917 	ldw	r2,-28(fp)
  81be7c:	10c00005 	stb	r3,0(r2)
  81be80:	e0bff917 	ldw	r2,-28(fp)
  81be84:	10800044 	addi	r2,r2,1
  81be88:	e0bff915 	stw	r2,-28(fp)
  81be8c:	e0bffa17 	ldw	r2,-24(fp)
  81be90:	10800044 	addi	r2,r2,1
  81be94:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  81be98:	e0bffb03 	ldbu	r2,-20(fp)
  81be9c:	10800044 	addi	r2,r2,1
  81bea0:	e0bffb05 	stb	r2,-20(fp)
  81bea4:	e0bffb03 	ldbu	r2,-20(fp)
  81bea8:	108000f0 	cmpltui	r2,r2,3
  81beac:	103ff01e 	bne	r2,zero,81be70 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  81beb0:	e0bffd17 	ldw	r2,-12(fp)
  81beb4:	10800117 	ldw	r2,4(r2)
  81beb8:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  81bebc:	e0bffc17 	ldw	r2,-16(fp)
  81bec0:	1080058b 	ldhu	r2,22(r2)
  81bec4:	10bfffcc 	andi	r2,r2,65535
  81bec8:	1005003a 	cmpeq	r2,r2,zero
  81becc:	1000061e 	bne	r2,zero,81bee8 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  81bed0:	e0bffc17 	ldw	r2,-16(fp)
  81bed4:	10800417 	ldw	r2,16(r2)
  81bed8:	10c00017 	ldw	r3,0(r2)
  81bedc:	e0bffe17 	ldw	r2,-8(fp)
  81bee0:	10c00015 	stw	r3,0(r2)
  81bee4:	00000206 	br	81bef0 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
  81bee8:	e0bffe17 	ldw	r2,-8(fp)
  81beec:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  81bef0:	e0bffc17 	ldw	r2,-16(fp)
  81bef4:	10c0058b 	ldhu	r3,22(r2)
  81bef8:	e0bffe17 	ldw	r2,-8(fp)
  81befc:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  81bf00:	e0bffc17 	ldw	r2,-16(fp)
  81bf04:	10c0050b 	ldhu	r3,20(r2)
  81bf08:	e0bffe17 	ldw	r2,-8(fp)
  81bf0c:	10c0018d 	sth	r3,6(r2)
  81bf10:	e0bff817 	ldw	r2,-32(fp)
  81bf14:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81bf18:	e0bff617 	ldw	r2,-40(fp)
  81bf1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81bf20:	e03fff15 	stw	zero,-4(fp)
  81bf24:	e0bfff17 	ldw	r2,-4(fp)
}
  81bf28:	e037883a 	mov	sp,fp
  81bf2c:	df000017 	ldw	fp,0(sp)
  81bf30:	dec00104 	addi	sp,sp,4
  81bf34:	f800283a 	ret

0081bf38 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  81bf38:	defffb04 	addi	sp,sp,-20
  81bf3c:	dfc00415 	stw	ra,16(sp)
  81bf40:	df000315 	stw	fp,12(sp)
  81bf44:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  81bf48:	010020f4 	movhi	r4,131
  81bf4c:	2139a304 	addi	r4,r4,-6516
  81bf50:	01407804 	movi	r5,480
  81bf54:	08182380 	call	818238 <OS_MemClr>
    pq1 = &OSQTbl[0];
  81bf58:	008020f4 	movhi	r2,131
  81bf5c:	10b9a304 	addi	r2,r2,-6516
  81bf60:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  81bf64:	008020f4 	movhi	r2,131
  81bf68:	10b9a904 	addi	r2,r2,-6492
  81bf6c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  81bf70:	e03fff0d 	sth	zero,-4(fp)
  81bf74:	00000c06 	br	81bfa8 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  81bf78:	e0fffe17 	ldw	r3,-8(fp)
  81bf7c:	e0bffd17 	ldw	r2,-12(fp)
  81bf80:	18800015 	stw	r2,0(r3)
        pq1++;
  81bf84:	e0bffe17 	ldw	r2,-8(fp)
  81bf88:	10800604 	addi	r2,r2,24
  81bf8c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  81bf90:	e0bffd17 	ldw	r2,-12(fp)
  81bf94:	10800604 	addi	r2,r2,24
  81bf98:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  81bf9c:	e0bfff0b 	ldhu	r2,-4(fp)
  81bfa0:	10800044 	addi	r2,r2,1
  81bfa4:	e0bfff0d 	sth	r2,-4(fp)
  81bfa8:	e0bfff0b 	ldhu	r2,-4(fp)
  81bfac:	108004f0 	cmpltui	r2,r2,19
  81bfb0:	103ff11e 	bne	r2,zero,81bf78 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  81bfb4:	e0bffe17 	ldw	r2,-8(fp)
  81bfb8:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  81bfbc:	00c020b4 	movhi	r3,130
  81bfc0:	18db1304 	addi	r3,r3,27724
  81bfc4:	008020f4 	movhi	r2,131
  81bfc8:	10b9a304 	addi	r2,r2,-6516
  81bfcc:	18800015 	stw	r2,0(r3)
#endif
}
  81bfd0:	e037883a 	mov	sp,fp
  81bfd4:	dfc00117 	ldw	ra,4(sp)
  81bfd8:	df000017 	ldw	fp,0(sp)
  81bfdc:	dec00204 	addi	sp,sp,8
  81bfe0:	f800283a 	ret

0081bfe4 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  81bfe4:	defff904 	addi	sp,sp,-28
  81bfe8:	df000615 	stw	fp,24(sp)
  81bfec:	df000604 	addi	fp,sp,24
  81bff0:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81bff4:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81bff8:	e0bffe17 	ldw	r2,-8(fp)
  81bffc:	1004c03a 	cmpne	r2,r2,zero
  81c000:	1000021e 	bne	r2,zero,81c00c <OSSemAccept+0x28>
        return (0);
  81c004:	e03fff15 	stw	zero,-4(fp)
  81c008:	00002106 	br	81c090 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  81c00c:	e0bffe17 	ldw	r2,-8(fp)
  81c010:	10800003 	ldbu	r2,0(r2)
  81c014:	10803fcc 	andi	r2,r2,255
  81c018:	108000e0 	cmpeqi	r2,r2,3
  81c01c:	1000021e 	bne	r2,zero,81c028 <OSSemAccept+0x44>
        return (0);
  81c020:	e03fff15 	stw	zero,-4(fp)
  81c024:	00001a06 	br	81c090 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c028:	0005303a 	rdctl	r2,status
  81c02c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c030:	e0fffb17 	ldw	r3,-20(fp)
  81c034:	00bfff84 	movi	r2,-2
  81c038:	1884703a 	and	r2,r3,r2
  81c03c:	1001703a 	wrctl	status,r2
  
  return context;
  81c040:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  81c044:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
  81c048:	e0bffe17 	ldw	r2,-8(fp)
  81c04c:	1080020b 	ldhu	r2,8(r2)
  81c050:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  81c054:	e0bffd0b 	ldhu	r2,-12(fp)
  81c058:	1005003a 	cmpeq	r2,r2,zero
  81c05c:	1000061e 	bne	r2,zero,81c078 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  81c060:	e0bffe17 	ldw	r2,-8(fp)
  81c064:	1080020b 	ldhu	r2,8(r2)
  81c068:	10bfffc4 	addi	r2,r2,-1
  81c06c:	1007883a 	mov	r3,r2
  81c070:	e0bffe17 	ldw	r2,-8(fp)
  81c074:	10c0020d 	sth	r3,8(r2)
  81c078:	e0bffc17 	ldw	r2,-16(fp)
  81c07c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c080:	e0bffa17 	ldw	r2,-24(fp)
  81c084:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  81c088:	e0bffd0b 	ldhu	r2,-12(fp)
  81c08c:	e0bfff15 	stw	r2,-4(fp)
  81c090:	e0bfff17 	ldw	r2,-4(fp)
}
  81c094:	e037883a 	mov	sp,fp
  81c098:	df000017 	ldw	fp,0(sp)
  81c09c:	dec00104 	addi	sp,sp,4
  81c0a0:	f800283a 	ret

0081c0a4 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  81c0a4:	defff804 	addi	sp,sp,-32
  81c0a8:	dfc00715 	stw	ra,28(sp)
  81c0ac:	df000615 	stw	fp,24(sp)
  81c0b0:	df000604 	addi	fp,sp,24
  81c0b4:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81c0b8:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  81c0bc:	008020b4 	movhi	r2,130
  81c0c0:	109b1604 	addi	r2,r2,27736
  81c0c4:	10800003 	ldbu	r2,0(r2)
  81c0c8:	10803fcc 	andi	r2,r2,255
  81c0cc:	1005003a 	cmpeq	r2,r2,zero
  81c0d0:	1000021e 	bne	r2,zero,81c0dc <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  81c0d4:	e03fff15 	stw	zero,-4(fp)
  81c0d8:	00003106 	br	81c1a0 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c0dc:	0005303a 	rdctl	r2,status
  81c0e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c0e4:	e0fffb17 	ldw	r3,-20(fp)
  81c0e8:	00bfff84 	movi	r2,-2
  81c0ec:	1884703a 	and	r2,r3,r2
  81c0f0:	1001703a 	wrctl	status,r2
  
  return context;
  81c0f4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  81c0f8:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  81c0fc:	008020b4 	movhi	r2,130
  81c100:	109b1504 	addi	r2,r2,27732
  81c104:	10800017 	ldw	r2,0(r2)
  81c108:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  81c10c:	008020b4 	movhi	r2,130
  81c110:	109b1504 	addi	r2,r2,27732
  81c114:	10800017 	ldw	r2,0(r2)
  81c118:	1005003a 	cmpeq	r2,r2,zero
  81c11c:	1000081e 	bne	r2,zero,81c140 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  81c120:	008020b4 	movhi	r2,130
  81c124:	109b1504 	addi	r2,r2,27732
  81c128:	10800017 	ldw	r2,0(r2)
  81c12c:	10800117 	ldw	r2,4(r2)
  81c130:	1007883a 	mov	r3,r2
  81c134:	008020b4 	movhi	r2,130
  81c138:	109b1504 	addi	r2,r2,27732
  81c13c:	10c00015 	stw	r3,0(r2)
  81c140:	e0bffc17 	ldw	r2,-16(fp)
  81c144:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c148:	e0bffa17 	ldw	r2,-24(fp)
  81c14c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  81c150:	e0bffd17 	ldw	r2,-12(fp)
  81c154:	1005003a 	cmpeq	r2,r2,zero
  81c158:	10000f1e 	bne	r2,zero,81c198 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  81c15c:	e0fffd17 	ldw	r3,-12(fp)
  81c160:	008000c4 	movi	r2,3
  81c164:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  81c168:	e0fffd17 	ldw	r3,-12(fp)
  81c16c:	e0bffe0b 	ldhu	r2,-8(fp)
  81c170:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  81c174:	e0bffd17 	ldw	r2,-12(fp)
  81c178:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  81c17c:	e0fffd17 	ldw	r3,-12(fp)
  81c180:	00800fc4 	movi	r2,63
  81c184:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  81c188:	e0bffd17 	ldw	r2,-12(fp)
  81c18c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  81c190:	e13ffd17 	ldw	r4,-12(fp)
  81c194:	0817e6c0 	call	817e6c <OS_EventWaitListInit>
    }
    return (pevent);
  81c198:	e0bffd17 	ldw	r2,-12(fp)
  81c19c:	e0bfff15 	stw	r2,-4(fp)
  81c1a0:	e0bfff17 	ldw	r2,-4(fp)
}
  81c1a4:	e037883a 	mov	sp,fp
  81c1a8:	dfc00117 	ldw	ra,4(sp)
  81c1ac:	df000017 	ldw	fp,0(sp)
  81c1b0:	dec00204 	addi	sp,sp,8
  81c1b4:	f800283a 	ret

0081c1b8 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  81c1b8:	defff104 	addi	sp,sp,-60
  81c1bc:	dfc00e15 	stw	ra,56(sp)
  81c1c0:	df000d15 	stw	fp,52(sp)
  81c1c4:	df000d04 	addi	fp,sp,52
  81c1c8:	e13ffb15 	stw	r4,-20(fp)
  81c1cc:	e1bffd15 	stw	r6,-12(fp)
  81c1d0:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81c1d4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  81c1d8:	e0bffd17 	ldw	r2,-12(fp)
  81c1dc:	1004c03a 	cmpne	r2,r2,zero
  81c1e0:	1000031e 	bne	r2,zero,81c1f0 <OSSemDel+0x38>
        return (pevent);
  81c1e4:	e0bffb17 	ldw	r2,-20(fp)
  81c1e8:	e0bfff15 	stw	r2,-4(fp)
  81c1ec:	00009406 	br	81c440 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  81c1f0:	e0bffb17 	ldw	r2,-20(fp)
  81c1f4:	1004c03a 	cmpne	r2,r2,zero
  81c1f8:	1000061e 	bne	r2,zero,81c214 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  81c1fc:	e0fffd17 	ldw	r3,-12(fp)
  81c200:	00800104 	movi	r2,4
  81c204:	18800005 	stb	r2,0(r3)
        return (pevent);
  81c208:	e0fffb17 	ldw	r3,-20(fp)
  81c20c:	e0ffff15 	stw	r3,-4(fp)
  81c210:	00008b06 	br	81c440 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  81c214:	e0bffb17 	ldw	r2,-20(fp)
  81c218:	10800003 	ldbu	r2,0(r2)
  81c21c:	10803fcc 	andi	r2,r2,255
  81c220:	108000e0 	cmpeqi	r2,r2,3
  81c224:	1000061e 	bne	r2,zero,81c240 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  81c228:	e0fffd17 	ldw	r3,-12(fp)
  81c22c:	00800044 	movi	r2,1
  81c230:	18800005 	stb	r2,0(r3)
        return (pevent);
  81c234:	e0bffb17 	ldw	r2,-20(fp)
  81c238:	e0bfff15 	stw	r2,-4(fp)
  81c23c:	00008006 	br	81c440 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  81c240:	008020b4 	movhi	r2,130
  81c244:	109b1604 	addi	r2,r2,27736
  81c248:	10800003 	ldbu	r2,0(r2)
  81c24c:	10803fcc 	andi	r2,r2,255
  81c250:	1005003a 	cmpeq	r2,r2,zero
  81c254:	1000061e 	bne	r2,zero,81c270 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  81c258:	e0fffd17 	ldw	r3,-12(fp)
  81c25c:	008003c4 	movi	r2,15
  81c260:	18800005 	stb	r2,0(r3)
        return (pevent);
  81c264:	e0fffb17 	ldw	r3,-20(fp)
  81c268:	e0ffff15 	stw	r3,-4(fp)
  81c26c:	00007406 	br	81c440 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c270:	0005303a 	rdctl	r2,status
  81c274:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c278:	e0fff717 	ldw	r3,-36(fp)
  81c27c:	00bfff84 	movi	r2,-2
  81c280:	1884703a 	and	r2,r3,r2
  81c284:	1001703a 	wrctl	status,r2
  
  return context;
  81c288:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  81c28c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  81c290:	e0bffb17 	ldw	r2,-20(fp)
  81c294:	10800283 	ldbu	r2,10(r2)
  81c298:	10803fcc 	andi	r2,r2,255
  81c29c:	1005003a 	cmpeq	r2,r2,zero
  81c2a0:	1000031e 	bne	r2,zero,81c2b0 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  81c2a4:	00800044 	movi	r2,1
  81c2a8:	e0bffa05 	stb	r2,-24(fp)
  81c2ac:	00000106 	br	81c2b4 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  81c2b0:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  81c2b4:	e0bffc03 	ldbu	r2,-16(fp)
  81c2b8:	e0bffe15 	stw	r2,-8(fp)
  81c2bc:	e0fffe17 	ldw	r3,-8(fp)
  81c2c0:	1805003a 	cmpeq	r2,r3,zero
  81c2c4:	1000041e 	bne	r2,zero,81c2d8 <OSSemDel+0x120>
  81c2c8:	e0fffe17 	ldw	r3,-8(fp)
  81c2cc:	18800060 	cmpeqi	r2,r3,1
  81c2d0:	10002d1e 	bne	r2,zero,81c388 <OSSemDel+0x1d0>
  81c2d4:	00004f06 	br	81c414 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  81c2d8:	e0bffa03 	ldbu	r2,-24(fp)
  81c2dc:	1004c03a 	cmpne	r2,r2,zero
  81c2e0:	10001a1e 	bne	r2,zero,81c34c <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  81c2e4:	e0fffb17 	ldw	r3,-20(fp)
  81c2e8:	00800fc4 	movi	r2,63
  81c2ec:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  81c2f0:	e0bffb17 	ldw	r2,-20(fp)
  81c2f4:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  81c2f8:	e0bffb17 	ldw	r2,-20(fp)
  81c2fc:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  81c300:	008020b4 	movhi	r2,130
  81c304:	109b1504 	addi	r2,r2,27732
  81c308:	10c00017 	ldw	r3,0(r2)
  81c30c:	e0bffb17 	ldw	r2,-20(fp)
  81c310:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  81c314:	e0bffb17 	ldw	r2,-20(fp)
  81c318:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  81c31c:	00c020b4 	movhi	r3,130
  81c320:	18db1504 	addi	r3,r3,27732
  81c324:	e0bffb17 	ldw	r2,-20(fp)
  81c328:	18800015 	stw	r2,0(r3)
  81c32c:	e0bff817 	ldw	r2,-32(fp)
  81c330:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c334:	e0bff617 	ldw	r2,-40(fp)
  81c338:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  81c33c:	e0bffd17 	ldw	r2,-12(fp)
  81c340:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  81c344:	e03ff915 	stw	zero,-28(fp)
  81c348:	00003b06 	br	81c438 <OSSemDel+0x280>
  81c34c:	e0bff817 	ldw	r2,-32(fp)
  81c350:	e0bff515 	stw	r2,-44(fp)
  81c354:	e0bff517 	ldw	r2,-44(fp)
  81c358:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  81c35c:	e0fffd17 	ldw	r3,-12(fp)
  81c360:	00801244 	movi	r2,73
  81c364:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  81c368:	e0bffb17 	ldw	r2,-20(fp)
  81c36c:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  81c370:	00003106 	br	81c438 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  81c374:	e13ffb17 	ldw	r4,-20(fp)
  81c378:	000b883a 	mov	r5,zero
  81c37c:	01800044 	movi	r6,1
  81c380:	000f883a 	mov	r7,zero
  81c384:	08178b80 	call	8178b8 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  81c388:	e0bffb17 	ldw	r2,-20(fp)
  81c38c:	10800283 	ldbu	r2,10(r2)
  81c390:	10803fcc 	andi	r2,r2,255
  81c394:	1004c03a 	cmpne	r2,r2,zero
  81c398:	103ff61e 	bne	r2,zero,81c374 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  81c39c:	e0fffb17 	ldw	r3,-20(fp)
  81c3a0:	00800fc4 	movi	r2,63
  81c3a4:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  81c3a8:	e0bffb17 	ldw	r2,-20(fp)
  81c3ac:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  81c3b0:	e0bffb17 	ldw	r2,-20(fp)
  81c3b4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  81c3b8:	008020b4 	movhi	r2,130
  81c3bc:	109b1504 	addi	r2,r2,27732
  81c3c0:	10c00017 	ldw	r3,0(r2)
  81c3c4:	e0bffb17 	ldw	r2,-20(fp)
  81c3c8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  81c3cc:	e0bffb17 	ldw	r2,-20(fp)
  81c3d0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  81c3d4:	00c020b4 	movhi	r3,130
  81c3d8:	18db1504 	addi	r3,r3,27732
  81c3dc:	e0bffb17 	ldw	r2,-20(fp)
  81c3e0:	18800015 	stw	r2,0(r3)
  81c3e4:	e0bff817 	ldw	r2,-32(fp)
  81c3e8:	e0bff415 	stw	r2,-48(fp)
  81c3ec:	e0bff417 	ldw	r2,-48(fp)
  81c3f0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  81c3f4:	e0bffa03 	ldbu	r2,-24(fp)
  81c3f8:	10800058 	cmpnei	r2,r2,1
  81c3fc:	1000011e 	bne	r2,zero,81c404 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  81c400:	08182f80 	call	8182f8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  81c404:	e0bffd17 	ldw	r2,-12(fp)
  81c408:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  81c40c:	e03ff915 	stw	zero,-28(fp)
             break;
  81c410:	00000906 	br	81c438 <OSSemDel+0x280>
  81c414:	e0bff817 	ldw	r2,-32(fp)
  81c418:	e0bff315 	stw	r2,-52(fp)
  81c41c:	e0bff317 	ldw	r2,-52(fp)
  81c420:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  81c424:	e0fffd17 	ldw	r3,-12(fp)
  81c428:	008001c4 	movi	r2,7
  81c42c:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  81c430:	e0bffb17 	ldw	r2,-20(fp)
  81c434:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  81c438:	e0bff917 	ldw	r2,-28(fp)
  81c43c:	e0bfff15 	stw	r2,-4(fp)
  81c440:	e0bfff17 	ldw	r2,-4(fp)
}
  81c444:	e037883a 	mov	sp,fp
  81c448:	dfc00117 	ldw	ra,4(sp)
  81c44c:	df000017 	ldw	fp,0(sp)
  81c450:	dec00204 	addi	sp,sp,8
  81c454:	f800283a 	ret

0081c458 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  81c458:	defff404 	addi	sp,sp,-48
  81c45c:	dfc00b15 	stw	ra,44(sp)
  81c460:	df000a15 	stw	fp,40(sp)
  81c464:	df000a04 	addi	fp,sp,40
  81c468:	e13ffc15 	stw	r4,-16(fp)
  81c46c:	e1bffe15 	stw	r6,-8(fp)
  81c470:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81c474:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  81c478:	e0bffe17 	ldw	r2,-8(fp)
  81c47c:	1005003a 	cmpeq	r2,r2,zero
  81c480:	10008f1e 	bne	r2,zero,81c6c0 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81c484:	e0bffc17 	ldw	r2,-16(fp)
  81c488:	1004c03a 	cmpne	r2,r2,zero
  81c48c:	1000041e 	bne	r2,zero,81c4a0 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  81c490:	e0fffe17 	ldw	r3,-8(fp)
  81c494:	00800104 	movi	r2,4
  81c498:	18800005 	stb	r2,0(r3)
        return;
  81c49c:	00008806 	br	81c6c0 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  81c4a0:	e0bffc17 	ldw	r2,-16(fp)
  81c4a4:	10800003 	ldbu	r2,0(r2)
  81c4a8:	10803fcc 	andi	r2,r2,255
  81c4ac:	108000e0 	cmpeqi	r2,r2,3
  81c4b0:	1000041e 	bne	r2,zero,81c4c4 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  81c4b4:	e0fffe17 	ldw	r3,-8(fp)
  81c4b8:	00800044 	movi	r2,1
  81c4bc:	18800005 	stb	r2,0(r3)
        return;
  81c4c0:	00007f06 	br	81c6c0 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  81c4c4:	008020b4 	movhi	r2,130
  81c4c8:	109b1604 	addi	r2,r2,27736
  81c4cc:	10800003 	ldbu	r2,0(r2)
  81c4d0:	10803fcc 	andi	r2,r2,255
  81c4d4:	1005003a 	cmpeq	r2,r2,zero
  81c4d8:	1000041e 	bne	r2,zero,81c4ec <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  81c4dc:	e0fffe17 	ldw	r3,-8(fp)
  81c4e0:	00800084 	movi	r2,2
  81c4e4:	18800005 	stb	r2,0(r3)
        return;
  81c4e8:	00007506 	br	81c6c0 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  81c4ec:	008020b4 	movhi	r2,130
  81c4f0:	109b0804 	addi	r2,r2,27680
  81c4f4:	10800003 	ldbu	r2,0(r2)
  81c4f8:	10803fcc 	andi	r2,r2,255
  81c4fc:	1005003a 	cmpeq	r2,r2,zero
  81c500:	1000041e 	bne	r2,zero,81c514 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  81c504:	e0fffe17 	ldw	r3,-8(fp)
  81c508:	00800344 	movi	r2,13
  81c50c:	18800005 	stb	r2,0(r3)
        return;
  81c510:	00006b06 	br	81c6c0 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c514:	0005303a 	rdctl	r2,status
  81c518:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c51c:	e0fffa17 	ldw	r3,-24(fp)
  81c520:	00bfff84 	movi	r2,-2
  81c524:	1884703a 	and	r2,r3,r2
  81c528:	1001703a 	wrctl	status,r2
  
  return context;
  81c52c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81c530:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  81c534:	e0bffc17 	ldw	r2,-16(fp)
  81c538:	1080020b 	ldhu	r2,8(r2)
  81c53c:	10bfffcc 	andi	r2,r2,65535
  81c540:	1005003a 	cmpeq	r2,r2,zero
  81c544:	10000d1e 	bne	r2,zero,81c57c <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  81c548:	e0bffc17 	ldw	r2,-16(fp)
  81c54c:	1080020b 	ldhu	r2,8(r2)
  81c550:	10bfffc4 	addi	r2,r2,-1
  81c554:	1007883a 	mov	r3,r2
  81c558:	e0bffc17 	ldw	r2,-16(fp)
  81c55c:	10c0020d 	sth	r3,8(r2)
  81c560:	e0bffb17 	ldw	r2,-20(fp)
  81c564:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c568:	e0bff917 	ldw	r2,-28(fp)
  81c56c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  81c570:	e0bffe17 	ldw	r2,-8(fp)
  81c574:	10000005 	stb	zero,0(r2)
        return;
  81c578:	00005106 	br	81c6c0 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  81c57c:	008020b4 	movhi	r2,130
  81c580:	109b1704 	addi	r2,r2,27740
  81c584:	10c00017 	ldw	r3,0(r2)
  81c588:	008020b4 	movhi	r2,130
  81c58c:	109b1704 	addi	r2,r2,27740
  81c590:	10800017 	ldw	r2,0(r2)
  81c594:	10800c03 	ldbu	r2,48(r2)
  81c598:	10800054 	ori	r2,r2,1
  81c59c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  81c5a0:	008020b4 	movhi	r2,130
  81c5a4:	109b1704 	addi	r2,r2,27740
  81c5a8:	10800017 	ldw	r2,0(r2)
  81c5ac:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  81c5b0:	008020b4 	movhi	r2,130
  81c5b4:	109b1704 	addi	r2,r2,27740
  81c5b8:	10c00017 	ldw	r3,0(r2)
  81c5bc:	e0bffd0b 	ldhu	r2,-12(fp)
  81c5c0:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  81c5c4:	e13ffc17 	ldw	r4,-16(fp)
  81c5c8:	0817a4c0 	call	817a4c <OS_EventTaskWait>
  81c5cc:	e0bffb17 	ldw	r2,-20(fp)
  81c5d0:	e0bff815 	stw	r2,-32(fp)
  81c5d4:	e0bff817 	ldw	r2,-32(fp)
  81c5d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  81c5dc:	08182f80 	call	8182f8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c5e0:	0005303a 	rdctl	r2,status
  81c5e4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c5e8:	e0fff717 	ldw	r3,-36(fp)
  81c5ec:	00bfff84 	movi	r2,-2
  81c5f0:	1884703a 	and	r2,r3,r2
  81c5f4:	1001703a 	wrctl	status,r2
  
  return context;
  81c5f8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  81c5fc:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  81c600:	008020b4 	movhi	r2,130
  81c604:	109b1704 	addi	r2,r2,27740
  81c608:	10800017 	ldw	r2,0(r2)
  81c60c:	10800c43 	ldbu	r2,49(r2)
  81c610:	10803fcc 	andi	r2,r2,255
  81c614:	e0bfff15 	stw	r2,-4(fp)
  81c618:	e0ffff17 	ldw	r3,-4(fp)
  81c61c:	1805003a 	cmpeq	r2,r3,zero
  81c620:	1000041e 	bne	r2,zero,81c634 <OSSemPend+0x1dc>
  81c624:	e0ffff17 	ldw	r3,-4(fp)
  81c628:	188000a0 	cmpeqi	r2,r3,2
  81c62c:	1000041e 	bne	r2,zero,81c640 <OSSemPend+0x1e8>
  81c630:	00000706 	br	81c650 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  81c634:	e0bffe17 	ldw	r2,-8(fp)
  81c638:	10000005 	stb	zero,0(r2)
             break;
  81c63c:	00000c06 	br	81c670 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  81c640:	e0fffe17 	ldw	r3,-8(fp)
  81c644:	00800384 	movi	r2,14
  81c648:	18800005 	stb	r2,0(r3)
             break;
  81c64c:	00000806 	br	81c670 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  81c650:	008020b4 	movhi	r2,130
  81c654:	109b1704 	addi	r2,r2,27740
  81c658:	11000017 	ldw	r4,0(r2)
  81c65c:	e17ffc17 	ldw	r5,-16(fp)
  81c660:	0817cb00 	call	817cb0 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  81c664:	e0fffe17 	ldw	r3,-8(fp)
  81c668:	00800284 	movi	r2,10
  81c66c:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  81c670:	008020b4 	movhi	r2,130
  81c674:	109b1704 	addi	r2,r2,27740
  81c678:	10800017 	ldw	r2,0(r2)
  81c67c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  81c680:	008020b4 	movhi	r2,130
  81c684:	109b1704 	addi	r2,r2,27740
  81c688:	10800017 	ldw	r2,0(r2)
  81c68c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  81c690:	008020b4 	movhi	r2,130
  81c694:	109b1704 	addi	r2,r2,27740
  81c698:	10800017 	ldw	r2,0(r2)
  81c69c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  81c6a0:	008020b4 	movhi	r2,130
  81c6a4:	109b1704 	addi	r2,r2,27740
  81c6a8:	10800017 	ldw	r2,0(r2)
  81c6ac:	10000815 	stw	zero,32(r2)
  81c6b0:	e0bffb17 	ldw	r2,-20(fp)
  81c6b4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c6b8:	e0bff617 	ldw	r2,-40(fp)
  81c6bc:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
  81c6c0:	e037883a 	mov	sp,fp
  81c6c4:	dfc00117 	ldw	ra,4(sp)
  81c6c8:	df000017 	ldw	fp,0(sp)
  81c6cc:	dec00204 	addi	sp,sp,8
  81c6d0:	f800283a 	ret

0081c6d4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  81c6d4:	defff504 	addi	sp,sp,-44
  81c6d8:	dfc00a15 	stw	ra,40(sp)
  81c6dc:	df000915 	stw	fp,36(sp)
  81c6e0:	df000904 	addi	fp,sp,36
  81c6e4:	e13ffc15 	stw	r4,-16(fp)
  81c6e8:	e1bffe15 	stw	r6,-8(fp)
  81c6ec:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81c6f0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  81c6f4:	e0bffe17 	ldw	r2,-8(fp)
  81c6f8:	1004c03a 	cmpne	r2,r2,zero
  81c6fc:	1000021e 	bne	r2,zero,81c708 <OSSemPendAbort+0x34>
        return (0);
  81c700:	e03fff15 	stw	zero,-4(fp)
  81c704:	00004c06 	br	81c838 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81c708:	e0bffc17 	ldw	r2,-16(fp)
  81c70c:	1004c03a 	cmpne	r2,r2,zero
  81c710:	1000051e 	bne	r2,zero,81c728 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  81c714:	e0fffe17 	ldw	r3,-8(fp)
  81c718:	00800104 	movi	r2,4
  81c71c:	18800005 	stb	r2,0(r3)
        return (0);
  81c720:	e03fff15 	stw	zero,-4(fp)
  81c724:	00004406 	br	81c838 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  81c728:	e0bffc17 	ldw	r2,-16(fp)
  81c72c:	10800003 	ldbu	r2,0(r2)
  81c730:	10803fcc 	andi	r2,r2,255
  81c734:	108000e0 	cmpeqi	r2,r2,3
  81c738:	1000051e 	bne	r2,zero,81c750 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  81c73c:	e0fffe17 	ldw	r3,-8(fp)
  81c740:	00800044 	movi	r2,1
  81c744:	18800005 	stb	r2,0(r3)
        return (0);
  81c748:	e03fff15 	stw	zero,-4(fp)
  81c74c:	00003a06 	br	81c838 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c750:	0005303a 	rdctl	r2,status
  81c754:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c758:	e0fff917 	ldw	r3,-28(fp)
  81c75c:	00bfff84 	movi	r2,-2
  81c760:	1884703a 	and	r2,r3,r2
  81c764:	1001703a 	wrctl	status,r2
  
  return context;
  81c768:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81c76c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  81c770:	e0bffc17 	ldw	r2,-16(fp)
  81c774:	10800283 	ldbu	r2,10(r2)
  81c778:	10803fcc 	andi	r2,r2,255
  81c77c:	1005003a 	cmpeq	r2,r2,zero
  81c780:	1000261e 	bne	r2,zero,81c81c <OSSemPendAbort+0x148>
        nbr_tasks = 0;
  81c784:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  81c788:	e0bffd03 	ldbu	r2,-12(fp)
  81c78c:	10800060 	cmpeqi	r2,r2,1
  81c790:	1000091e 	bne	r2,zero,81c7b8 <OSSemPendAbort+0xe4>
  81c794:	00000e06 	br	81c7d0 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  81c798:	e13ffc17 	ldw	r4,-16(fp)
  81c79c:	000b883a 	mov	r5,zero
  81c7a0:	01800044 	movi	r6,1
  81c7a4:	01c00084 	movi	r7,2
  81c7a8:	08178b80 	call	8178b8 <OS_EventTaskRdy>
                     nbr_tasks++;
  81c7ac:	e0bffb03 	ldbu	r2,-20(fp)
  81c7b0:	10800044 	addi	r2,r2,1
  81c7b4:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  81c7b8:	e0bffc17 	ldw	r2,-16(fp)
  81c7bc:	10800283 	ldbu	r2,10(r2)
  81c7c0:	10803fcc 	andi	r2,r2,255
  81c7c4:	1004c03a 	cmpne	r2,r2,zero
  81c7c8:	103ff31e 	bne	r2,zero,81c798 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  81c7cc:	00000806 	br	81c7f0 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  81c7d0:	e13ffc17 	ldw	r4,-16(fp)
  81c7d4:	000b883a 	mov	r5,zero
  81c7d8:	01800044 	movi	r6,1
  81c7dc:	01c00084 	movi	r7,2
  81c7e0:	08178b80 	call	8178b8 <OS_EventTaskRdy>
                 nbr_tasks++;
  81c7e4:	e0bffb03 	ldbu	r2,-20(fp)
  81c7e8:	10800044 	addi	r2,r2,1
  81c7ec:	e0bffb05 	stb	r2,-20(fp)
  81c7f0:	e0bffa17 	ldw	r2,-24(fp)
  81c7f4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c7f8:	e0bff817 	ldw	r2,-32(fp)
  81c7fc:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  81c800:	08182f80 	call	8182f8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  81c804:	e0fffe17 	ldw	r3,-8(fp)
  81c808:	00800384 	movi	r2,14
  81c80c:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  81c810:	e0bffb03 	ldbu	r2,-20(fp)
  81c814:	e0bfff15 	stw	r2,-4(fp)
  81c818:	00000706 	br	81c838 <OSSemPendAbort+0x164>
  81c81c:	e0bffa17 	ldw	r2,-24(fp)
  81c820:	e0bff715 	stw	r2,-36(fp)
  81c824:	e0bff717 	ldw	r2,-36(fp)
  81c828:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81c82c:	e0bffe17 	ldw	r2,-8(fp)
  81c830:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  81c834:	e03fff15 	stw	zero,-4(fp)
  81c838:	e0bfff17 	ldw	r2,-4(fp)
}
  81c83c:	e037883a 	mov	sp,fp
  81c840:	dfc00117 	ldw	ra,4(sp)
  81c844:	df000017 	ldw	fp,0(sp)
  81c848:	dec00204 	addi	sp,sp,8
  81c84c:	f800283a 	ret

0081c850 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  81c850:	defff704 	addi	sp,sp,-36
  81c854:	dfc00815 	stw	ra,32(sp)
  81c858:	df000715 	stw	fp,28(sp)
  81c85c:	df000704 	addi	fp,sp,28
  81c860:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81c864:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81c868:	e0bffe17 	ldw	r2,-8(fp)
  81c86c:	1004c03a 	cmpne	r2,r2,zero
  81c870:	1000031e 	bne	r2,zero,81c880 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
  81c874:	00800104 	movi	r2,4
  81c878:	e0bfff15 	stw	r2,-4(fp)
  81c87c:	00003806 	br	81c960 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  81c880:	e0bffe17 	ldw	r2,-8(fp)
  81c884:	10800003 	ldbu	r2,0(r2)
  81c888:	10803fcc 	andi	r2,r2,255
  81c88c:	108000e0 	cmpeqi	r2,r2,3
  81c890:	1000031e 	bne	r2,zero,81c8a0 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
  81c894:	00800044 	movi	r2,1
  81c898:	e0bfff15 	stw	r2,-4(fp)
  81c89c:	00003006 	br	81c960 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c8a0:	0005303a 	rdctl	r2,status
  81c8a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c8a8:	e0fffc17 	ldw	r3,-16(fp)
  81c8ac:	00bfff84 	movi	r2,-2
  81c8b0:	1884703a 	and	r2,r3,r2
  81c8b4:	1001703a 	wrctl	status,r2
  
  return context;
  81c8b8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  81c8bc:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  81c8c0:	e0bffe17 	ldw	r2,-8(fp)
  81c8c4:	10800283 	ldbu	r2,10(r2)
  81c8c8:	10803fcc 	andi	r2,r2,255
  81c8cc:	1005003a 	cmpeq	r2,r2,zero
  81c8d0:	10000c1e 	bne	r2,zero,81c904 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  81c8d4:	e13ffe17 	ldw	r4,-8(fp)
  81c8d8:	000b883a 	mov	r5,zero
  81c8dc:	01800044 	movi	r6,1
  81c8e0:	000f883a 	mov	r7,zero
  81c8e4:	08178b80 	call	8178b8 <OS_EventTaskRdy>
  81c8e8:	e0bffd17 	ldw	r2,-12(fp)
  81c8ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c8f0:	e0bffb17 	ldw	r2,-20(fp)
  81c8f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  81c8f8:	08182f80 	call	8182f8 <OS_Sched>
        return (OS_ERR_NONE);
  81c8fc:	e03fff15 	stw	zero,-4(fp)
  81c900:	00001706 	br	81c960 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  81c904:	e0bffe17 	ldw	r2,-8(fp)
  81c908:	1080020b 	ldhu	r2,8(r2)
  81c90c:	10ffffcc 	andi	r3,r2,65535
  81c910:	00bfffd4 	movui	r2,65535
  81c914:	18800c26 	beq	r3,r2,81c948 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  81c918:	e0bffe17 	ldw	r2,-8(fp)
  81c91c:	1080020b 	ldhu	r2,8(r2)
  81c920:	10800044 	addi	r2,r2,1
  81c924:	1007883a 	mov	r3,r2
  81c928:	e0bffe17 	ldw	r2,-8(fp)
  81c92c:	10c0020d 	sth	r3,8(r2)
  81c930:	e0bffd17 	ldw	r2,-12(fp)
  81c934:	e0bffa15 	stw	r2,-24(fp)
  81c938:	e0bffa17 	ldw	r2,-24(fp)
  81c93c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  81c940:	e03fff15 	stw	zero,-4(fp)
  81c944:	00000606 	br	81c960 <OSSemPost+0x110>
  81c948:	e0bffd17 	ldw	r2,-12(fp)
  81c94c:	e0bff915 	stw	r2,-28(fp)
  81c950:	e0bff917 	ldw	r2,-28(fp)
  81c954:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  81c958:	00800c84 	movi	r2,50
  81c95c:	e0bfff15 	stw	r2,-4(fp)
  81c960:	e0bfff17 	ldw	r2,-4(fp)
}
  81c964:	e037883a 	mov	sp,fp
  81c968:	dfc00117 	ldw	ra,4(sp)
  81c96c:	df000017 	ldw	fp,0(sp)
  81c970:	dec00204 	addi	sp,sp,8
  81c974:	f800283a 	ret

0081c978 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  81c978:	defff604 	addi	sp,sp,-40
  81c97c:	df000915 	stw	fp,36(sp)
  81c980:	df000904 	addi	fp,sp,36
  81c984:	e13ffd15 	stw	r4,-12(fp)
  81c988:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81c98c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  81c990:	e0bffd17 	ldw	r2,-12(fp)
  81c994:	1004c03a 	cmpne	r2,r2,zero
  81c998:	1000031e 	bne	r2,zero,81c9a8 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  81c99c:	00800104 	movi	r2,4
  81c9a0:	e0bfff15 	stw	r2,-4(fp)
  81c9a4:	00003b06 	br	81ca94 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  81c9a8:	e0bffe17 	ldw	r2,-8(fp)
  81c9ac:	1004c03a 	cmpne	r2,r2,zero
  81c9b0:	1000031e 	bne	r2,zero,81c9c0 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  81c9b4:	00800244 	movi	r2,9
  81c9b8:	e0bfff15 	stw	r2,-4(fp)
  81c9bc:	00003506 	br	81ca94 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  81c9c0:	e0bffd17 	ldw	r2,-12(fp)
  81c9c4:	10800003 	ldbu	r2,0(r2)
  81c9c8:	10803fcc 	andi	r2,r2,255
  81c9cc:	108000e0 	cmpeqi	r2,r2,3
  81c9d0:	1000031e 	bne	r2,zero,81c9e0 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  81c9d4:	00800044 	movi	r2,1
  81c9d8:	e0bfff15 	stw	r2,-4(fp)
  81c9dc:	00002d06 	br	81ca94 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c9e0:	0005303a 	rdctl	r2,status
  81c9e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c9e8:	e0fff817 	ldw	r3,-32(fp)
  81c9ec:	00bfff84 	movi	r2,-2
  81c9f0:	1884703a 	and	r2,r3,r2
  81c9f4:	1001703a 	wrctl	status,r2
  
  return context;
  81c9f8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  81c9fc:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  81ca00:	e0bffd17 	ldw	r2,-12(fp)
  81ca04:	10c00283 	ldbu	r3,10(r2)
  81ca08:	e0bffe17 	ldw	r2,-8(fp)
  81ca0c:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  81ca10:	e0bffd17 	ldw	r2,-12(fp)
  81ca14:	108002c4 	addi	r2,r2,11
  81ca18:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  81ca1c:	e0bffe17 	ldw	r2,-8(fp)
  81ca20:	10800084 	addi	r2,r2,2
  81ca24:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  81ca28:	e03ffa05 	stb	zero,-24(fp)
  81ca2c:	00000d06 	br	81ca64 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
  81ca30:	e0bffc17 	ldw	r2,-16(fp)
  81ca34:	10c00003 	ldbu	r3,0(r2)
  81ca38:	e0bffb17 	ldw	r2,-20(fp)
  81ca3c:	10c00005 	stb	r3,0(r2)
  81ca40:	e0bffb17 	ldw	r2,-20(fp)
  81ca44:	10800044 	addi	r2,r2,1
  81ca48:	e0bffb15 	stw	r2,-20(fp)
  81ca4c:	e0bffc17 	ldw	r2,-16(fp)
  81ca50:	10800044 	addi	r2,r2,1
  81ca54:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  81ca58:	e0bffa03 	ldbu	r2,-24(fp)
  81ca5c:	10800044 	addi	r2,r2,1
  81ca60:	e0bffa05 	stb	r2,-24(fp)
  81ca64:	e0bffa03 	ldbu	r2,-24(fp)
  81ca68:	108000f0 	cmpltui	r2,r2,3
  81ca6c:	103ff01e 	bne	r2,zero,81ca30 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  81ca70:	e0bffd17 	ldw	r2,-12(fp)
  81ca74:	10c0020b 	ldhu	r3,8(r2)
  81ca78:	e0bffe17 	ldw	r2,-8(fp)
  81ca7c:	10c0000d 	sth	r3,0(r2)
  81ca80:	e0bff917 	ldw	r2,-28(fp)
  81ca84:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81ca88:	e0bff717 	ldw	r2,-36(fp)
  81ca8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81ca90:	e03fff15 	stw	zero,-4(fp)
  81ca94:	e0bfff17 	ldw	r2,-4(fp)
}
  81ca98:	e037883a 	mov	sp,fp
  81ca9c:	df000017 	ldw	fp,0(sp)
  81caa0:	dec00104 	addi	sp,sp,4
  81caa4:	f800283a 	ret

0081caa8 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  81caa8:	defff904 	addi	sp,sp,-28
  81caac:	df000615 	stw	fp,24(sp)
  81cab0:	df000604 	addi	fp,sp,24
  81cab4:	e13ffd15 	stw	r4,-12(fp)
  81cab8:	e1bfff15 	stw	r6,-4(fp)
  81cabc:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81cac0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  81cac4:	e0bfff17 	ldw	r2,-4(fp)
  81cac8:	1005003a 	cmpeq	r2,r2,zero
  81cacc:	1000331e 	bne	r2,zero,81cb9c <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81cad0:	e0bffd17 	ldw	r2,-12(fp)
  81cad4:	1004c03a 	cmpne	r2,r2,zero
  81cad8:	1000041e 	bne	r2,zero,81caec <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  81cadc:	e0ffff17 	ldw	r3,-4(fp)
  81cae0:	00800104 	movi	r2,4
  81cae4:	18800005 	stb	r2,0(r3)
        return;
  81cae8:	00002c06 	br	81cb9c <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  81caec:	e0bffd17 	ldw	r2,-12(fp)
  81caf0:	10800003 	ldbu	r2,0(r2)
  81caf4:	10803fcc 	andi	r2,r2,255
  81caf8:	108000e0 	cmpeqi	r2,r2,3
  81cafc:	1000041e 	bne	r2,zero,81cb10 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  81cb00:	e0ffff17 	ldw	r3,-4(fp)
  81cb04:	00800044 	movi	r2,1
  81cb08:	18800005 	stb	r2,0(r3)
        return;
  81cb0c:	00002306 	br	81cb9c <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81cb10:	0005303a 	rdctl	r2,status
  81cb14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81cb18:	e0fffb17 	ldw	r3,-20(fp)
  81cb1c:	00bfff84 	movi	r2,-2
  81cb20:	1884703a 	and	r2,r3,r2
  81cb24:	1001703a 	wrctl	status,r2
  
  return context;
  81cb28:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  81cb2c:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
  81cb30:	e0bfff17 	ldw	r2,-4(fp)
  81cb34:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  81cb38:	e0bffd17 	ldw	r2,-12(fp)
  81cb3c:	1080020b 	ldhu	r2,8(r2)
  81cb40:	10bfffcc 	andi	r2,r2,65535
  81cb44:	1005003a 	cmpeq	r2,r2,zero
  81cb48:	1000041e 	bne	r2,zero,81cb5c <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  81cb4c:	e0fffd17 	ldw	r3,-12(fp)
  81cb50:	e0bffe0b 	ldhu	r2,-8(fp)
  81cb54:	1880020d 	sth	r2,8(r3)
  81cb58:	00000c06 	br	81cb8c <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  81cb5c:	e0bffd17 	ldw	r2,-12(fp)
  81cb60:	10800283 	ldbu	r2,10(r2)
  81cb64:	10803fcc 	andi	r2,r2,255
  81cb68:	1004c03a 	cmpne	r2,r2,zero
  81cb6c:	1000041e 	bne	r2,zero,81cb80 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  81cb70:	e0fffd17 	ldw	r3,-12(fp)
  81cb74:	e0bffe0b 	ldhu	r2,-8(fp)
  81cb78:	1880020d 	sth	r2,8(r3)
  81cb7c:	00000306 	br	81cb8c <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  81cb80:	e0ffff17 	ldw	r3,-4(fp)
  81cb84:	00801244 	movi	r2,73
  81cb88:	18800005 	stb	r2,0(r3)
  81cb8c:	e0bffc17 	ldw	r2,-16(fp)
  81cb90:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81cb94:	e0bffa17 	ldw	r2,-24(fp)
  81cb98:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
  81cb9c:	e037883a 	mov	sp,fp
  81cba0:	df000017 	ldw	fp,0(sp)
  81cba4:	dec00104 	addi	sp,sp,4
  81cba8:	f800283a 	ret

0081cbac <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  81cbac:	defff004 	addi	sp,sp,-64
  81cbb0:	dfc00f15 	stw	ra,60(sp)
  81cbb4:	df000e15 	stw	fp,56(sp)
  81cbb8:	df000e04 	addi	fp,sp,56
  81cbbc:	e13ffd05 	stb	r4,-12(fp)
  81cbc0:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  81cbc4:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  81cbc8:	e0bffd03 	ldbu	r2,-12(fp)
  81cbcc:	10800530 	cmpltui	r2,r2,20
  81cbd0:	1000061e 	bne	r2,zero,81cbec <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
  81cbd4:	e0bffd03 	ldbu	r2,-12(fp)
  81cbd8:	10803fe0 	cmpeqi	r2,r2,255
  81cbdc:	1000031e 	bne	r2,zero,81cbec <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
  81cbe0:	00800a84 	movi	r2,42
  81cbe4:	e0bfff15 	stw	r2,-4(fp)
  81cbe8:	00014706 	br	81d108 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  81cbec:	e0bffe03 	ldbu	r2,-8(fp)
  81cbf0:	10800530 	cmpltui	r2,r2,20
  81cbf4:	1000031e 	bne	r2,zero,81cc04 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  81cbf8:	00800a84 	movi	r2,42
  81cbfc:	e0bfff15 	stw	r2,-4(fp)
  81cc00:	00014106 	br	81d108 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81cc04:	0005303a 	rdctl	r2,status
  81cc08:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81cc0c:	e0fff617 	ldw	r3,-40(fp)
  81cc10:	00bfff84 	movi	r2,-2
  81cc14:	1884703a 	and	r2,r3,r2
  81cc18:	1001703a 	wrctl	status,r2
  
  return context;
  81cc1c:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81cc20:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  81cc24:	e0bffe03 	ldbu	r2,-8(fp)
  81cc28:	00c020f4 	movhi	r3,131
  81cc2c:	18c02f04 	addi	r3,r3,188
  81cc30:	1085883a 	add	r2,r2,r2
  81cc34:	1085883a 	add	r2,r2,r2
  81cc38:	10c5883a 	add	r2,r2,r3
  81cc3c:	10800017 	ldw	r2,0(r2)
  81cc40:	1005003a 	cmpeq	r2,r2,zero
  81cc44:	1000071e 	bne	r2,zero,81cc64 <OSTaskChangePrio+0xb8>
  81cc48:	e0bff717 	ldw	r2,-36(fp)
  81cc4c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81cc50:	e0bff517 	ldw	r2,-44(fp)
  81cc54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  81cc58:	00800a04 	movi	r2,40
  81cc5c:	e0bfff15 	stw	r2,-4(fp)
  81cc60:	00012906 	br	81d108 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  81cc64:	e0bffd03 	ldbu	r2,-12(fp)
  81cc68:	10803fd8 	cmpnei	r2,r2,255
  81cc6c:	1000051e 	bne	r2,zero,81cc84 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  81cc70:	008020b4 	movhi	r2,130
  81cc74:	109b1704 	addi	r2,r2,27740
  81cc78:	10800017 	ldw	r2,0(r2)
  81cc7c:	10800c83 	ldbu	r2,50(r2)
  81cc80:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  81cc84:	e0bffd03 	ldbu	r2,-12(fp)
  81cc88:	00c020f4 	movhi	r3,131
  81cc8c:	18c02f04 	addi	r3,r3,188
  81cc90:	1085883a 	add	r2,r2,r2
  81cc94:	1085883a 	add	r2,r2,r2
  81cc98:	10c5883a 	add	r2,r2,r3
  81cc9c:	10800017 	ldw	r2,0(r2)
  81cca0:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  81cca4:	e0bffa17 	ldw	r2,-24(fp)
  81cca8:	1004c03a 	cmpne	r2,r2,zero
  81ccac:	1000071e 	bne	r2,zero,81cccc <OSTaskChangePrio+0x120>
  81ccb0:	e0bff717 	ldw	r2,-36(fp)
  81ccb4:	e0bff415 	stw	r2,-48(fp)
  81ccb8:	e0bff417 	ldw	r2,-48(fp)
  81ccbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  81ccc0:	00800a44 	movi	r2,41
  81ccc4:	e0bfff15 	stw	r2,-4(fp)
  81ccc8:	00010f06 	br	81d108 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  81cccc:	e0bffa17 	ldw	r2,-24(fp)
  81ccd0:	10800058 	cmpnei	r2,r2,1
  81ccd4:	1000071e 	bne	r2,zero,81ccf4 <OSTaskChangePrio+0x148>
  81ccd8:	e0bff717 	ldw	r2,-36(fp)
  81ccdc:	e0bff315 	stw	r2,-52(fp)
  81cce0:	e0bff317 	ldw	r2,-52(fp)
  81cce4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  81cce8:	008010c4 	movi	r2,67
  81ccec:	e0bfff15 	stw	r2,-4(fp)
  81ccf0:	00010506 	br	81d108 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  81ccf4:	e0bffe03 	ldbu	r2,-8(fp)
  81ccf8:	1004d0fa 	srli	r2,r2,3
  81ccfc:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  81cd00:	e0bffe03 	ldbu	r2,-8(fp)
  81cd04:	108001cc 	andi	r2,r2,7
  81cd08:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
  81cd0c:	e0fff983 	ldbu	r3,-26(fp)
  81cd10:	00800044 	movi	r2,1
  81cd14:	10c4983a 	sll	r2,r2,r3
  81cd18:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
  81cd1c:	e0fff943 	ldbu	r3,-27(fp)
  81cd20:	00800044 	movi	r2,1
  81cd24:	10c4983a 	sll	r2,r2,r3
  81cd28:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  81cd2c:	e0bffd03 	ldbu	r2,-12(fp)
  81cd30:	00c020f4 	movhi	r3,131
  81cd34:	18c02f04 	addi	r3,r3,188
  81cd38:	1085883a 	add	r2,r2,r2
  81cd3c:	1085883a 	add	r2,r2,r2
  81cd40:	10c5883a 	add	r2,r2,r3
  81cd44:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  81cd48:	e0bffe03 	ldbu	r2,-8(fp)
  81cd4c:	00c020f4 	movhi	r3,131
  81cd50:	18c02f04 	addi	r3,r3,188
  81cd54:	1085883a 	add	r2,r2,r2
  81cd58:	1085883a 	add	r2,r2,r2
  81cd5c:	10c7883a 	add	r3,r2,r3
  81cd60:	e0bffa17 	ldw	r2,-24(fp)
  81cd64:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
  81cd68:	e0bffa17 	ldw	r2,-24(fp)
  81cd6c:	10800d03 	ldbu	r2,52(r2)
  81cd70:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
  81cd74:	e0bffa17 	ldw	r2,-24(fp)
  81cd78:	10800d83 	ldbu	r2,54(r2)
  81cd7c:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  81cd80:	e0bffa17 	ldw	r2,-24(fp)
  81cd84:	10800d43 	ldbu	r2,53(r2)
  81cd88:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  81cd8c:	e0fff903 	ldbu	r3,-28(fp)
  81cd90:	008020b4 	movhi	r2,130
  81cd94:	109b1444 	addi	r2,r2,27729
  81cd98:	10c5883a 	add	r2,r2,r3
  81cd9c:	10c00003 	ldbu	r3,0(r2)
  81cda0:	e0bff803 	ldbu	r2,-32(fp)
  81cda4:	1884703a 	and	r2,r3,r2
  81cda8:	10803fcc 	andi	r2,r2,255
  81cdac:	1005003a 	cmpeq	r2,r2,zero
  81cdb0:	1000381e 	bne	r2,zero,81ce94 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
  81cdb4:	e13ff903 	ldbu	r4,-28(fp)
  81cdb8:	e0fff903 	ldbu	r3,-28(fp)
  81cdbc:	008020b4 	movhi	r2,130
  81cdc0:	109b1444 	addi	r2,r2,27729
  81cdc4:	10c5883a 	add	r2,r2,r3
  81cdc8:	10800003 	ldbu	r2,0(r2)
  81cdcc:	1007883a 	mov	r3,r2
  81cdd0:	e0bff803 	ldbu	r2,-32(fp)
  81cdd4:	0084303a 	nor	r2,zero,r2
  81cdd8:	1884703a 	and	r2,r3,r2
  81cddc:	1007883a 	mov	r3,r2
  81cde0:	008020b4 	movhi	r2,130
  81cde4:	109b1444 	addi	r2,r2,27729
  81cde8:	1105883a 	add	r2,r2,r4
  81cdec:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  81cdf0:	e0fff903 	ldbu	r3,-28(fp)
  81cdf4:	008020b4 	movhi	r2,130
  81cdf8:	109b1444 	addi	r2,r2,27729
  81cdfc:	10c5883a 	add	r2,r2,r3
  81ce00:	10800003 	ldbu	r2,0(r2)
  81ce04:	10803fcc 	andi	r2,r2,255
  81ce08:	1004c03a 	cmpne	r2,r2,zero
  81ce0c:	10000b1e 	bne	r2,zero,81ce3c <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
  81ce10:	e0bff843 	ldbu	r2,-31(fp)
  81ce14:	0084303a 	nor	r2,zero,r2
  81ce18:	1007883a 	mov	r3,r2
  81ce1c:	008020b4 	movhi	r2,130
  81ce20:	109b1404 	addi	r2,r2,27728
  81ce24:	10800003 	ldbu	r2,0(r2)
  81ce28:	1884703a 	and	r2,r3,r2
  81ce2c:	1007883a 	mov	r3,r2
  81ce30:	008020b4 	movhi	r2,130
  81ce34:	109b1404 	addi	r2,r2,27728
  81ce38:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  81ce3c:	008020b4 	movhi	r2,130
  81ce40:	109b1404 	addi	r2,r2,27728
  81ce44:	10c00003 	ldbu	r3,0(r2)
  81ce48:	e0bff8c3 	ldbu	r2,-29(fp)
  81ce4c:	1884b03a 	or	r2,r3,r2
  81ce50:	1007883a 	mov	r3,r2
  81ce54:	008020b4 	movhi	r2,130
  81ce58:	109b1404 	addi	r2,r2,27728
  81ce5c:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
  81ce60:	e13ff983 	ldbu	r4,-26(fp)
  81ce64:	e0fff983 	ldbu	r3,-26(fp)
  81ce68:	008020b4 	movhi	r2,130
  81ce6c:	109b1444 	addi	r2,r2,27729
  81ce70:	10c5883a 	add	r2,r2,r3
  81ce74:	10c00003 	ldbu	r3,0(r2)
  81ce78:	e0bff883 	ldbu	r2,-30(fp)
  81ce7c:	1884b03a 	or	r2,r3,r2
  81ce80:	1007883a 	mov	r3,r2
  81ce84:	008020b4 	movhi	r2,130
  81ce88:	109b1444 	addi	r2,r2,27729
  81ce8c:	1105883a 	add	r2,r2,r4
  81ce90:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  81ce94:	e0bffa17 	ldw	r2,-24(fp)
  81ce98:	10800717 	ldw	r2,28(r2)
  81ce9c:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
  81cea0:	e0bffc17 	ldw	r2,-16(fp)
  81cea4:	1005003a 	cmpeq	r2,r2,zero
  81cea8:	1000341e 	bne	r2,zero,81cf7c <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  81ceac:	e13ff903 	ldbu	r4,-28(fp)
  81ceb0:	e0fff903 	ldbu	r3,-28(fp)
  81ceb4:	e0bffc17 	ldw	r2,-16(fp)
  81ceb8:	1885883a 	add	r2,r3,r2
  81cebc:	10800204 	addi	r2,r2,8
  81cec0:	108000c3 	ldbu	r2,3(r2)
  81cec4:	1007883a 	mov	r3,r2
  81cec8:	e0bff803 	ldbu	r2,-32(fp)
  81cecc:	0084303a 	nor	r2,zero,r2
  81ced0:	1884703a 	and	r2,r3,r2
  81ced4:	1007883a 	mov	r3,r2
  81ced8:	e0bffc17 	ldw	r2,-16(fp)
  81cedc:	2085883a 	add	r2,r4,r2
  81cee0:	10800204 	addi	r2,r2,8
  81cee4:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  81cee8:	e0fff903 	ldbu	r3,-28(fp)
  81ceec:	e0bffc17 	ldw	r2,-16(fp)
  81cef0:	1885883a 	add	r2,r3,r2
  81cef4:	10800204 	addi	r2,r2,8
  81cef8:	108000c3 	ldbu	r2,3(r2)
  81cefc:	10803fcc 	andi	r2,r2,255
  81cf00:	1004c03a 	cmpne	r2,r2,zero
  81cf04:	1000091e 	bne	r2,zero,81cf2c <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
  81cf08:	e0bffc17 	ldw	r2,-16(fp)
  81cf0c:	10800283 	ldbu	r2,10(r2)
  81cf10:	1007883a 	mov	r3,r2
  81cf14:	e0bff843 	ldbu	r2,-31(fp)
  81cf18:	0084303a 	nor	r2,zero,r2
  81cf1c:	1884703a 	and	r2,r3,r2
  81cf20:	1007883a 	mov	r3,r2
  81cf24:	e0bffc17 	ldw	r2,-16(fp)
  81cf28:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  81cf2c:	e0bffc17 	ldw	r2,-16(fp)
  81cf30:	10c00283 	ldbu	r3,10(r2)
  81cf34:	e0bff8c3 	ldbu	r2,-29(fp)
  81cf38:	1884b03a 	or	r2,r3,r2
  81cf3c:	1007883a 	mov	r3,r2
  81cf40:	e0bffc17 	ldw	r2,-16(fp)
  81cf44:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  81cf48:	e13ff983 	ldbu	r4,-26(fp)
  81cf4c:	e0fff983 	ldbu	r3,-26(fp)
  81cf50:	e0bffc17 	ldw	r2,-16(fp)
  81cf54:	1885883a 	add	r2,r3,r2
  81cf58:	10800204 	addi	r2,r2,8
  81cf5c:	10c000c3 	ldbu	r3,3(r2)
  81cf60:	e0bff883 	ldbu	r2,-30(fp)
  81cf64:	1884b03a 	or	r2,r3,r2
  81cf68:	1007883a 	mov	r3,r2
  81cf6c:	e0bffc17 	ldw	r2,-16(fp)
  81cf70:	2085883a 	add	r2,r4,r2
  81cf74:	10800204 	addi	r2,r2,8
  81cf78:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  81cf7c:	e0bffa17 	ldw	r2,-24(fp)
  81cf80:	10800817 	ldw	r2,32(r2)
  81cf84:	1005003a 	cmpeq	r2,r2,zero
  81cf88:	1000441e 	bne	r2,zero,81d09c <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
  81cf8c:	e0bffa17 	ldw	r2,-24(fp)
  81cf90:	10800817 	ldw	r2,32(r2)
  81cf94:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
  81cf98:	e0bffb17 	ldw	r2,-20(fp)
  81cf9c:	10800017 	ldw	r2,0(r2)
  81cfa0:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
  81cfa4:	00003a06 	br	81d090 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  81cfa8:	e13ff903 	ldbu	r4,-28(fp)
  81cfac:	e0fff903 	ldbu	r3,-28(fp)
  81cfb0:	e0bffc17 	ldw	r2,-16(fp)
  81cfb4:	1885883a 	add	r2,r3,r2
  81cfb8:	10800204 	addi	r2,r2,8
  81cfbc:	108000c3 	ldbu	r2,3(r2)
  81cfc0:	1007883a 	mov	r3,r2
  81cfc4:	e0bff803 	ldbu	r2,-32(fp)
  81cfc8:	0084303a 	nor	r2,zero,r2
  81cfcc:	1884703a 	and	r2,r3,r2
  81cfd0:	1007883a 	mov	r3,r2
  81cfd4:	e0bffc17 	ldw	r2,-16(fp)
  81cfd8:	2085883a 	add	r2,r4,r2
  81cfdc:	10800204 	addi	r2,r2,8
  81cfe0:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  81cfe4:	e0fff903 	ldbu	r3,-28(fp)
  81cfe8:	e0bffc17 	ldw	r2,-16(fp)
  81cfec:	1885883a 	add	r2,r3,r2
  81cff0:	10800204 	addi	r2,r2,8
  81cff4:	108000c3 	ldbu	r2,3(r2)
  81cff8:	10803fcc 	andi	r2,r2,255
  81cffc:	1004c03a 	cmpne	r2,r2,zero
  81d000:	1000091e 	bne	r2,zero,81d028 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
  81d004:	e0bffc17 	ldw	r2,-16(fp)
  81d008:	10800283 	ldbu	r2,10(r2)
  81d00c:	1007883a 	mov	r3,r2
  81d010:	e0bff843 	ldbu	r2,-31(fp)
  81d014:	0084303a 	nor	r2,zero,r2
  81d018:	1884703a 	and	r2,r3,r2
  81d01c:	1007883a 	mov	r3,r2
  81d020:	e0bffc17 	ldw	r2,-16(fp)
  81d024:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  81d028:	e0bffc17 	ldw	r2,-16(fp)
  81d02c:	10c00283 	ldbu	r3,10(r2)
  81d030:	e0bff8c3 	ldbu	r2,-29(fp)
  81d034:	1884b03a 	or	r2,r3,r2
  81d038:	1007883a 	mov	r3,r2
  81d03c:	e0bffc17 	ldw	r2,-16(fp)
  81d040:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  81d044:	e13ff983 	ldbu	r4,-26(fp)
  81d048:	e0fff983 	ldbu	r3,-26(fp)
  81d04c:	e0bffc17 	ldw	r2,-16(fp)
  81d050:	1885883a 	add	r2,r3,r2
  81d054:	10800204 	addi	r2,r2,8
  81d058:	10c000c3 	ldbu	r3,3(r2)
  81d05c:	e0bff883 	ldbu	r2,-30(fp)
  81d060:	1884b03a 	or	r2,r3,r2
  81d064:	1007883a 	mov	r3,r2
  81d068:	e0bffc17 	ldw	r2,-16(fp)
  81d06c:	2085883a 	add	r2,r4,r2
  81d070:	10800204 	addi	r2,r2,8
  81d074:	10c000c5 	stb	r3,3(r2)
            pevents++;
  81d078:	e0bffb17 	ldw	r2,-20(fp)
  81d07c:	10800104 	addi	r2,r2,4
  81d080:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
  81d084:	e0bffb17 	ldw	r2,-20(fp)
  81d088:	10800017 	ldw	r2,0(r2)
  81d08c:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  81d090:	e0bffc17 	ldw	r2,-16(fp)
  81d094:	1004c03a 	cmpne	r2,r2,zero
  81d098:	103fc31e 	bne	r2,zero,81cfa8 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  81d09c:	e0fffa17 	ldw	r3,-24(fp)
  81d0a0:	e0bffe03 	ldbu	r2,-8(fp)
  81d0a4:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
  81d0a8:	e0fffa17 	ldw	r3,-24(fp)
  81d0ac:	e0bff983 	ldbu	r2,-26(fp)
  81d0b0:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
  81d0b4:	e0fffa17 	ldw	r3,-24(fp)
  81d0b8:	e0bff943 	ldbu	r2,-27(fp)
  81d0bc:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
  81d0c0:	e0fffa17 	ldw	r3,-24(fp)
  81d0c4:	e0bff8c3 	ldbu	r2,-29(fp)
  81d0c8:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
  81d0cc:	e0fffa17 	ldw	r3,-24(fp)
  81d0d0:	e0bff883 	ldbu	r2,-30(fp)
  81d0d4:	18800d45 	stb	r2,53(r3)
  81d0d8:	e0bff717 	ldw	r2,-36(fp)
  81d0dc:	e0bff215 	stw	r2,-56(fp)
  81d0e0:	e0bff217 	ldw	r2,-56(fp)
  81d0e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  81d0e8:	008020b4 	movhi	r2,130
  81d0ec:	109b0844 	addi	r2,r2,27681
  81d0f0:	10800003 	ldbu	r2,0(r2)
  81d0f4:	10803fcc 	andi	r2,r2,255
  81d0f8:	10800058 	cmpnei	r2,r2,1
  81d0fc:	1000011e 	bne	r2,zero,81d104 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
  81d100:	08182f80 	call	8182f8 <OS_Sched>
    }
    return (OS_ERR_NONE);
  81d104:	e03fff15 	stw	zero,-4(fp)
  81d108:	e0bfff17 	ldw	r2,-4(fp)
}
  81d10c:	e037883a 	mov	sp,fp
  81d110:	dfc00117 	ldw	ra,4(sp)
  81d114:	df000017 	ldw	fp,0(sp)
  81d118:	dec00204 	addi	sp,sp,8
  81d11c:	f800283a 	ret

0081d120 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  81d120:	deffed04 	addi	sp,sp,-76
  81d124:	dfc01215 	stw	ra,72(sp)
  81d128:	df001115 	stw	fp,68(sp)
  81d12c:	df001104 	addi	fp,sp,68
  81d130:	e13ffb15 	stw	r4,-20(fp)
  81d134:	e17ffc15 	stw	r5,-16(fp)
  81d138:	e1bffd15 	stw	r6,-12(fp)
  81d13c:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  81d140:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  81d144:	e0bffe03 	ldbu	r2,-8(fp)
  81d148:	10800570 	cmpltui	r2,r2,21
  81d14c:	1000031e 	bne	r2,zero,81d15c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  81d150:	00800a84 	movi	r2,42
  81d154:	e0bfff15 	stw	r2,-4(fp)
  81d158:	00006006 	br	81d2dc <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d15c:	0005303a 	rdctl	r2,status
  81d160:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d164:	e0fff717 	ldw	r3,-36(fp)
  81d168:	00bfff84 	movi	r2,-2
  81d16c:	1884703a 	and	r2,r3,r2
  81d170:	1001703a 	wrctl	status,r2
  
  return context;
  81d174:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81d178:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  81d17c:	008020b4 	movhi	r2,130
  81d180:	109b1604 	addi	r2,r2,27736
  81d184:	10800003 	ldbu	r2,0(r2)
  81d188:	10803fcc 	andi	r2,r2,255
  81d18c:	1005003a 	cmpeq	r2,r2,zero
  81d190:	1000071e 	bne	r2,zero,81d1b0 <OSTaskCreate+0x90>
  81d194:	e0bff817 	ldw	r2,-32(fp)
  81d198:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d19c:	e0bff617 	ldw	r2,-40(fp)
  81d1a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  81d1a4:	00800f04 	movi	r2,60
  81d1a8:	e0bfff15 	stw	r2,-4(fp)
  81d1ac:	00004b06 	br	81d2dc <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  81d1b0:	e0bffe03 	ldbu	r2,-8(fp)
  81d1b4:	00c020f4 	movhi	r3,131
  81d1b8:	18c02f04 	addi	r3,r3,188
  81d1bc:	1085883a 	add	r2,r2,r2
  81d1c0:	1085883a 	add	r2,r2,r2
  81d1c4:	10c5883a 	add	r2,r2,r3
  81d1c8:	10800017 	ldw	r2,0(r2)
  81d1cc:	1004c03a 	cmpne	r2,r2,zero
  81d1d0:	10003c1e 	bne	r2,zero,81d2c4 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  81d1d4:	e0bffe03 	ldbu	r2,-8(fp)
  81d1d8:	00c020f4 	movhi	r3,131
  81d1dc:	18c02f04 	addi	r3,r3,188
  81d1e0:	1085883a 	add	r2,r2,r2
  81d1e4:	1085883a 	add	r2,r2,r2
  81d1e8:	10c7883a 	add	r3,r2,r3
  81d1ec:	00800044 	movi	r2,1
  81d1f0:	18800015 	stw	r2,0(r3)
  81d1f4:	e0bff817 	ldw	r2,-32(fp)
  81d1f8:	e0bff515 	stw	r2,-44(fp)
  81d1fc:	e0bff517 	ldw	r2,-44(fp)
  81d200:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  81d204:	e13ffb17 	ldw	r4,-20(fp)
  81d208:	e17ffc17 	ldw	r5,-16(fp)
  81d20c:	e1bffd17 	ldw	r6,-12(fp)
  81d210:	000f883a 	mov	r7,zero
  81d214:	0821c240 	call	821c24 <OSTaskStkInit>
  81d218:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  81d21c:	e13ffe03 	ldbu	r4,-8(fp)
  81d220:	d8000015 	stw	zero,0(sp)
  81d224:	d8000115 	stw	zero,4(sp)
  81d228:	d8000215 	stw	zero,8(sp)
  81d22c:	e17ffa17 	ldw	r5,-24(fp)
  81d230:	000d883a 	mov	r6,zero
  81d234:	000f883a 	mov	r7,zero
  81d238:	08187000 	call	818700 <OS_TCBInit>
  81d23c:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
  81d240:	e0bff903 	ldbu	r2,-28(fp)
  81d244:	1004c03a 	cmpne	r2,r2,zero
  81d248:	1000081e 	bne	r2,zero,81d26c <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  81d24c:	008020b4 	movhi	r2,130
  81d250:	109b0844 	addi	r2,r2,27681
  81d254:	10800003 	ldbu	r2,0(r2)
  81d258:	10803fcc 	andi	r2,r2,255
  81d25c:	10800058 	cmpnei	r2,r2,1
  81d260:	1000151e 	bne	r2,zero,81d2b8 <OSTaskCreate+0x198>
                OS_Sched();
  81d264:	08182f80 	call	8182f8 <OS_Sched>
  81d268:	00001306 	br	81d2b8 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d26c:	0005303a 	rdctl	r2,status
  81d270:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d274:	e0fff417 	ldw	r3,-48(fp)
  81d278:	00bfff84 	movi	r2,-2
  81d27c:	1884703a 	and	r2,r3,r2
  81d280:	1001703a 	wrctl	status,r2
  
  return context;
  81d284:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  81d288:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  81d28c:	e0bffe03 	ldbu	r2,-8(fp)
  81d290:	00c020f4 	movhi	r3,131
  81d294:	18c02f04 	addi	r3,r3,188
  81d298:	1085883a 	add	r2,r2,r2
  81d29c:	1085883a 	add	r2,r2,r2
  81d2a0:	10c5883a 	add	r2,r2,r3
  81d2a4:	10000015 	stw	zero,0(r2)
  81d2a8:	e0bff817 	ldw	r2,-32(fp)
  81d2ac:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d2b0:	e0bff317 	ldw	r2,-52(fp)
  81d2b4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  81d2b8:	e0bff903 	ldbu	r2,-28(fp)
  81d2bc:	e0bfff15 	stw	r2,-4(fp)
  81d2c0:	00000606 	br	81d2dc <OSTaskCreate+0x1bc>
  81d2c4:	e0bff817 	ldw	r2,-32(fp)
  81d2c8:	e0bff215 	stw	r2,-56(fp)
  81d2cc:	e0bff217 	ldw	r2,-56(fp)
  81d2d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  81d2d4:	00800a04 	movi	r2,40
  81d2d8:	e0bfff15 	stw	r2,-4(fp)
  81d2dc:	e0bfff17 	ldw	r2,-4(fp)
}
  81d2e0:	e037883a 	mov	sp,fp
  81d2e4:	dfc00117 	ldw	ra,4(sp)
  81d2e8:	df000017 	ldw	fp,0(sp)
  81d2ec:	dec00204 	addi	sp,sp,8
  81d2f0:	f800283a 	ret

0081d2f4 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  81d2f4:	deffeb04 	addi	sp,sp,-84
  81d2f8:	dfc01415 	stw	ra,80(sp)
  81d2fc:	df001315 	stw	fp,76(sp)
  81d300:	df001304 	addi	fp,sp,76
  81d304:	e13ff915 	stw	r4,-28(fp)
  81d308:	e17ffa15 	stw	r5,-24(fp)
  81d30c:	e1bffb15 	stw	r6,-20(fp)
  81d310:	e0800217 	ldw	r2,8(fp)
  81d314:	e0c00617 	ldw	r3,24(fp)
  81d318:	e1fffc05 	stb	r7,-16(fp)
  81d31c:	e0bffd0d 	sth	r2,-12(fp)
  81d320:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  81d324:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  81d328:	e0bffc03 	ldbu	r2,-16(fp)
  81d32c:	10800570 	cmpltui	r2,r2,21
  81d330:	1000031e 	bne	r2,zero,81d340 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  81d334:	00800a84 	movi	r2,42
  81d338:	e0bfff15 	stw	r2,-4(fp)
  81d33c:	00006706 	br	81d4dc <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d340:	0005303a 	rdctl	r2,status
  81d344:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d348:	e0fff517 	ldw	r3,-44(fp)
  81d34c:	00bfff84 	movi	r2,-2
  81d350:	1884703a 	and	r2,r3,r2
  81d354:	1001703a 	wrctl	status,r2
  
  return context;
  81d358:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81d35c:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  81d360:	008020b4 	movhi	r2,130
  81d364:	109b1604 	addi	r2,r2,27736
  81d368:	10800003 	ldbu	r2,0(r2)
  81d36c:	10803fcc 	andi	r2,r2,255
  81d370:	1005003a 	cmpeq	r2,r2,zero
  81d374:	1000071e 	bne	r2,zero,81d394 <OSTaskCreateExt+0xa0>
  81d378:	e0bff617 	ldw	r2,-40(fp)
  81d37c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d380:	e0bff417 	ldw	r2,-48(fp)
  81d384:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  81d388:	00800f04 	movi	r2,60
  81d38c:	e0bfff15 	stw	r2,-4(fp)
  81d390:	00005206 	br	81d4dc <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  81d394:	e0bffc03 	ldbu	r2,-16(fp)
  81d398:	00c020f4 	movhi	r3,131
  81d39c:	18c02f04 	addi	r3,r3,188
  81d3a0:	1085883a 	add	r2,r2,r2
  81d3a4:	1085883a 	add	r2,r2,r2
  81d3a8:	10c5883a 	add	r2,r2,r3
  81d3ac:	10800017 	ldw	r2,0(r2)
  81d3b0:	1004c03a 	cmpne	r2,r2,zero
  81d3b4:	1000431e 	bne	r2,zero,81d4c4 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  81d3b8:	e0bffc03 	ldbu	r2,-16(fp)
  81d3bc:	00c020f4 	movhi	r3,131
  81d3c0:	18c02f04 	addi	r3,r3,188
  81d3c4:	1085883a 	add	r2,r2,r2
  81d3c8:	1085883a 	add	r2,r2,r2
  81d3cc:	10c7883a 	add	r3,r2,r3
  81d3d0:	00800044 	movi	r2,1
  81d3d4:	18800015 	stw	r2,0(r3)
  81d3d8:	e0bff617 	ldw	r2,-40(fp)
  81d3dc:	e0bff315 	stw	r2,-52(fp)
  81d3e0:	e0bff317 	ldw	r2,-52(fp)
  81d3e4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  81d3e8:	e1bffe0b 	ldhu	r6,-8(fp)
  81d3ec:	e1000317 	ldw	r4,12(fp)
  81d3f0:	e1400417 	ldw	r5,16(fp)
  81d3f4:	081e5700 	call	81e570 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  81d3f8:	e1fffe0b 	ldhu	r7,-8(fp)
  81d3fc:	e13ff917 	ldw	r4,-28(fp)
  81d400:	e17ffa17 	ldw	r5,-24(fp)
  81d404:	e1bffb17 	ldw	r6,-20(fp)
  81d408:	0821c240 	call	821c24 <OSTaskStkInit>
  81d40c:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  81d410:	e13ffc03 	ldbu	r4,-16(fp)
  81d414:	e1fffd0b 	ldhu	r7,-12(fp)
  81d418:	e0fffe0b 	ldhu	r3,-8(fp)
  81d41c:	e0800417 	ldw	r2,16(fp)
  81d420:	d8800015 	stw	r2,0(sp)
  81d424:	e0800517 	ldw	r2,20(fp)
  81d428:	d8800115 	stw	r2,4(sp)
  81d42c:	d8c00215 	stw	r3,8(sp)
  81d430:	e17ff817 	ldw	r5,-32(fp)
  81d434:	e1800317 	ldw	r6,12(fp)
  81d438:	08187000 	call	818700 <OS_TCBInit>
  81d43c:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
  81d440:	e0bff703 	ldbu	r2,-36(fp)
  81d444:	1004c03a 	cmpne	r2,r2,zero
  81d448:	1000081e 	bne	r2,zero,81d46c <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  81d44c:	008020b4 	movhi	r2,130
  81d450:	109b0844 	addi	r2,r2,27681
  81d454:	10800003 	ldbu	r2,0(r2)
  81d458:	10803fcc 	andi	r2,r2,255
  81d45c:	10800058 	cmpnei	r2,r2,1
  81d460:	1000151e 	bne	r2,zero,81d4b8 <OSTaskCreateExt+0x1c4>
                OS_Sched();
  81d464:	08182f80 	call	8182f8 <OS_Sched>
  81d468:	00001306 	br	81d4b8 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d46c:	0005303a 	rdctl	r2,status
  81d470:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d474:	e0fff217 	ldw	r3,-56(fp)
  81d478:	00bfff84 	movi	r2,-2
  81d47c:	1884703a 	and	r2,r3,r2
  81d480:	1001703a 	wrctl	status,r2
  
  return context;
  81d484:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  81d488:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  81d48c:	e0bffc03 	ldbu	r2,-16(fp)
  81d490:	00c020f4 	movhi	r3,131
  81d494:	18c02f04 	addi	r3,r3,188
  81d498:	1085883a 	add	r2,r2,r2
  81d49c:	1085883a 	add	r2,r2,r2
  81d4a0:	10c5883a 	add	r2,r2,r3
  81d4a4:	10000015 	stw	zero,0(r2)
  81d4a8:	e0bff617 	ldw	r2,-40(fp)
  81d4ac:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d4b0:	e0bff117 	ldw	r2,-60(fp)
  81d4b4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  81d4b8:	e0bff703 	ldbu	r2,-36(fp)
  81d4bc:	e0bfff15 	stw	r2,-4(fp)
  81d4c0:	00000606 	br	81d4dc <OSTaskCreateExt+0x1e8>
  81d4c4:	e0bff617 	ldw	r2,-40(fp)
  81d4c8:	e0bff015 	stw	r2,-64(fp)
  81d4cc:	e0bff017 	ldw	r2,-64(fp)
  81d4d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  81d4d4:	00800a04 	movi	r2,40
  81d4d8:	e0bfff15 	stw	r2,-4(fp)
  81d4dc:	e0bfff17 	ldw	r2,-4(fp)
}
  81d4e0:	e037883a 	mov	sp,fp
  81d4e4:	dfc00117 	ldw	ra,4(sp)
  81d4e8:	df000017 	ldw	fp,0(sp)
  81d4ec:	dec00204 	addi	sp,sp,8
  81d4f0:	f800283a 	ret

0081d4f4 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  81d4f4:	defff304 	addi	sp,sp,-52
  81d4f8:	dfc00c15 	stw	ra,48(sp)
  81d4fc:	df000b15 	stw	fp,44(sp)
  81d500:	df000b04 	addi	fp,sp,44
  81d504:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  81d508:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  81d50c:	008020b4 	movhi	r2,130
  81d510:	109b1604 	addi	r2,r2,27736
  81d514:	10800003 	ldbu	r2,0(r2)
  81d518:	10803fcc 	andi	r2,r2,255
  81d51c:	1005003a 	cmpeq	r2,r2,zero
  81d520:	1000031e 	bne	r2,zero,81d530 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
  81d524:	00801004 	movi	r2,64
  81d528:	e0bfff15 	stw	r2,-4(fp)
  81d52c:	0000ee06 	br	81d8e8 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  81d530:	e0bffe03 	ldbu	r2,-8(fp)
  81d534:	10800518 	cmpnei	r2,r2,20
  81d538:	1000031e 	bne	r2,zero,81d548 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
  81d53c:	00800f84 	movi	r2,62
  81d540:	e0bfff15 	stw	r2,-4(fp)
  81d544:	0000e806 	br	81d8e8 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  81d548:	e0bffe03 	ldbu	r2,-8(fp)
  81d54c:	10800530 	cmpltui	r2,r2,20
  81d550:	1000061e 	bne	r2,zero,81d56c <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
  81d554:	e0bffe03 	ldbu	r2,-8(fp)
  81d558:	10803fe0 	cmpeqi	r2,r2,255
  81d55c:	1000031e 	bne	r2,zero,81d56c <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
  81d560:	00800a84 	movi	r2,42
  81d564:	e0bfff15 	stw	r2,-4(fp)
  81d568:	0000df06 	br	81d8e8 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d56c:	0005303a 	rdctl	r2,status
  81d570:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d574:	e0fffa17 	ldw	r3,-24(fp)
  81d578:	00bfff84 	movi	r2,-2
  81d57c:	1884703a 	and	r2,r3,r2
  81d580:	1001703a 	wrctl	status,r2
  
  return context;
  81d584:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  81d588:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  81d58c:	e0bffe03 	ldbu	r2,-8(fp)
  81d590:	10803fd8 	cmpnei	r2,r2,255
  81d594:	1000051e 	bne	r2,zero,81d5ac <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  81d598:	008020b4 	movhi	r2,130
  81d59c:	109b1704 	addi	r2,r2,27740
  81d5a0:	10800017 	ldw	r2,0(r2)
  81d5a4:	10800c83 	ldbu	r2,50(r2)
  81d5a8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81d5ac:	e0bffe03 	ldbu	r2,-8(fp)
  81d5b0:	00c020f4 	movhi	r3,131
  81d5b4:	18c02f04 	addi	r3,r3,188
  81d5b8:	1085883a 	add	r2,r2,r2
  81d5bc:	1085883a 	add	r2,r2,r2
  81d5c0:	10c5883a 	add	r2,r2,r3
  81d5c4:	10800017 	ldw	r2,0(r2)
  81d5c8:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  81d5cc:	e0bffc17 	ldw	r2,-16(fp)
  81d5d0:	1004c03a 	cmpne	r2,r2,zero
  81d5d4:	1000071e 	bne	r2,zero,81d5f4 <OSTaskDel+0x100>
  81d5d8:	e0bffb17 	ldw	r2,-20(fp)
  81d5dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d5e0:	e0bff917 	ldw	r2,-28(fp)
  81d5e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  81d5e8:	008010c4 	movi	r2,67
  81d5ec:	e0bfff15 	stw	r2,-4(fp)
  81d5f0:	0000bd06 	br	81d8e8 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  81d5f4:	e0bffc17 	ldw	r2,-16(fp)
  81d5f8:	10800058 	cmpnei	r2,r2,1
  81d5fc:	1000071e 	bne	r2,zero,81d61c <OSTaskDel+0x128>
  81d600:	e0bffb17 	ldw	r2,-20(fp)
  81d604:	e0bff815 	stw	r2,-32(fp)
  81d608:	e0bff817 	ldw	r2,-32(fp)
  81d60c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  81d610:	00800f44 	movi	r2,61
  81d614:	e0bfff15 	stw	r2,-4(fp)
  81d618:	0000b306 	br	81d8e8 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  81d61c:	e0bffc17 	ldw	r2,-16(fp)
  81d620:	10800d03 	ldbu	r2,52(r2)
  81d624:	11003fcc 	andi	r4,r2,255
  81d628:	e0bffc17 	ldw	r2,-16(fp)
  81d62c:	10800d03 	ldbu	r2,52(r2)
  81d630:	10c03fcc 	andi	r3,r2,255
  81d634:	008020b4 	movhi	r2,130
  81d638:	109b1444 	addi	r2,r2,27729
  81d63c:	10c5883a 	add	r2,r2,r3
  81d640:	10800003 	ldbu	r2,0(r2)
  81d644:	1007883a 	mov	r3,r2
  81d648:	e0bffc17 	ldw	r2,-16(fp)
  81d64c:	10800d43 	ldbu	r2,53(r2)
  81d650:	0084303a 	nor	r2,zero,r2
  81d654:	1884703a 	and	r2,r3,r2
  81d658:	1007883a 	mov	r3,r2
  81d65c:	008020b4 	movhi	r2,130
  81d660:	109b1444 	addi	r2,r2,27729
  81d664:	1105883a 	add	r2,r2,r4
  81d668:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  81d66c:	e0bffc17 	ldw	r2,-16(fp)
  81d670:	10800d03 	ldbu	r2,52(r2)
  81d674:	10c03fcc 	andi	r3,r2,255
  81d678:	008020b4 	movhi	r2,130
  81d67c:	109b1444 	addi	r2,r2,27729
  81d680:	10c5883a 	add	r2,r2,r3
  81d684:	10800003 	ldbu	r2,0(r2)
  81d688:	10803fcc 	andi	r2,r2,255
  81d68c:	1004c03a 	cmpne	r2,r2,zero
  81d690:	10000c1e 	bne	r2,zero,81d6c4 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  81d694:	e0bffc17 	ldw	r2,-16(fp)
  81d698:	10800d83 	ldbu	r2,54(r2)
  81d69c:	0084303a 	nor	r2,zero,r2
  81d6a0:	1007883a 	mov	r3,r2
  81d6a4:	008020b4 	movhi	r2,130
  81d6a8:	109b1404 	addi	r2,r2,27728
  81d6ac:	10800003 	ldbu	r2,0(r2)
  81d6b0:	1884703a 	and	r2,r3,r2
  81d6b4:	1007883a 	mov	r3,r2
  81d6b8:	008020b4 	movhi	r2,130
  81d6bc:	109b1404 	addi	r2,r2,27728
  81d6c0:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  81d6c4:	e0bffc17 	ldw	r2,-16(fp)
  81d6c8:	10800717 	ldw	r2,28(r2)
  81d6cc:	1005003a 	cmpeq	r2,r2,zero
  81d6d0:	1000041e 	bne	r2,zero,81d6e4 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  81d6d4:	e0bffc17 	ldw	r2,-16(fp)
  81d6d8:	11400717 	ldw	r5,28(r2)
  81d6dc:	e13ffc17 	ldw	r4,-16(fp)
  81d6e0:	0817cb00 	call	817cb0 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  81d6e4:	e0bffc17 	ldw	r2,-16(fp)
  81d6e8:	10800817 	ldw	r2,32(r2)
  81d6ec:	1005003a 	cmpeq	r2,r2,zero
  81d6f0:	1000041e 	bne	r2,zero,81d704 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  81d6f4:	e0bffc17 	ldw	r2,-16(fp)
  81d6f8:	11400817 	ldw	r5,32(r2)
  81d6fc:	e13ffc17 	ldw	r4,-16(fp)
  81d700:	0817d680 	call	817d68 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  81d704:	e0bffc17 	ldw	r2,-16(fp)
  81d708:	10800a17 	ldw	r2,40(r2)
  81d70c:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  81d710:	e0bffd17 	ldw	r2,-12(fp)
  81d714:	1005003a 	cmpeq	r2,r2,zero
  81d718:	1000021e 	bne	r2,zero,81d724 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  81d71c:	e13ffd17 	ldw	r4,-12(fp)
  81d720:	081a3fc0 	call	81a3fc <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  81d724:	e0bffc17 	ldw	r2,-16(fp)
  81d728:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  81d72c:	e0bffc17 	ldw	r2,-16(fp)
  81d730:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  81d734:	e0bffc17 	ldw	r2,-16(fp)
  81d738:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  81d73c:	008020b4 	movhi	r2,130
  81d740:	109b0804 	addi	r2,r2,27680
  81d744:	10800003 	ldbu	r2,0(r2)
  81d748:	10803fcc 	andi	r2,r2,255
  81d74c:	10803fe0 	cmpeqi	r2,r2,255
  81d750:	1000081e 	bne	r2,zero,81d774 <OSTaskDel+0x280>
        OSLockNesting++;
  81d754:	008020b4 	movhi	r2,130
  81d758:	109b0804 	addi	r2,r2,27680
  81d75c:	10800003 	ldbu	r2,0(r2)
  81d760:	10800044 	addi	r2,r2,1
  81d764:	1007883a 	mov	r3,r2
  81d768:	008020b4 	movhi	r2,130
  81d76c:	109b0804 	addi	r2,r2,27680
  81d770:	10c00005 	stb	r3,0(r2)
  81d774:	e0bffb17 	ldw	r2,-20(fp)
  81d778:	e0bff715 	stw	r2,-36(fp)
  81d77c:	e0bff717 	ldw	r2,-36(fp)
  81d780:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  81d784:	081789c0 	call	81789c <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d788:	0005303a 	rdctl	r2,status
  81d78c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d790:	e0fff617 	ldw	r3,-40(fp)
  81d794:	00bfff84 	movi	r2,-2
  81d798:	1884703a 	and	r2,r3,r2
  81d79c:	1001703a 	wrctl	status,r2
  
  return context;
  81d7a0:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  81d7a4:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  81d7a8:	008020b4 	movhi	r2,130
  81d7ac:	109b0804 	addi	r2,r2,27680
  81d7b0:	10800003 	ldbu	r2,0(r2)
  81d7b4:	10803fcc 	andi	r2,r2,255
  81d7b8:	1005003a 	cmpeq	r2,r2,zero
  81d7bc:	1000081e 	bne	r2,zero,81d7e0 <OSTaskDel+0x2ec>
        OSLockNesting--;
  81d7c0:	008020b4 	movhi	r2,130
  81d7c4:	109b0804 	addi	r2,r2,27680
  81d7c8:	10800003 	ldbu	r2,0(r2)
  81d7cc:	10bfffc4 	addi	r2,r2,-1
  81d7d0:	1007883a 	mov	r3,r2
  81d7d4:	008020b4 	movhi	r2,130
  81d7d8:	109b0804 	addi	r2,r2,27680
  81d7dc:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  81d7e0:	e13ffc17 	ldw	r4,-16(fp)
  81d7e4:	0821f540 	call	821f54 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  81d7e8:	008020b4 	movhi	r2,130
  81d7ec:	109b1044 	addi	r2,r2,27713
  81d7f0:	10800003 	ldbu	r2,0(r2)
  81d7f4:	10bfffc4 	addi	r2,r2,-1
  81d7f8:	1007883a 	mov	r3,r2
  81d7fc:	008020b4 	movhi	r2,130
  81d800:	109b1044 	addi	r2,r2,27713
  81d804:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  81d808:	e0bffe03 	ldbu	r2,-8(fp)
  81d80c:	00c020f4 	movhi	r3,131
  81d810:	18c02f04 	addi	r3,r3,188
  81d814:	1085883a 	add	r2,r2,r2
  81d818:	1085883a 	add	r2,r2,r2
  81d81c:	10c5883a 	add	r2,r2,r3
  81d820:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  81d824:	e0bffc17 	ldw	r2,-16(fp)
  81d828:	10800617 	ldw	r2,24(r2)
  81d82c:	1004c03a 	cmpne	r2,r2,zero
  81d830:	1000091e 	bne	r2,zero,81d858 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  81d834:	e0bffc17 	ldw	r2,-16(fp)
  81d838:	10800517 	ldw	r2,20(r2)
  81d83c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  81d840:	e0bffc17 	ldw	r2,-16(fp)
  81d844:	10c00517 	ldw	r3,20(r2)
  81d848:	008020b4 	movhi	r2,130
  81d84c:	109b0b04 	addi	r2,r2,27692
  81d850:	10c00015 	stw	r3,0(r2)
  81d854:	00000a06 	br	81d880 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  81d858:	e0bffc17 	ldw	r2,-16(fp)
  81d85c:	10c00617 	ldw	r3,24(r2)
  81d860:	e0bffc17 	ldw	r2,-16(fp)
  81d864:	10800517 	ldw	r2,20(r2)
  81d868:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  81d86c:	e0bffc17 	ldw	r2,-16(fp)
  81d870:	10c00517 	ldw	r3,20(r2)
  81d874:	e0bffc17 	ldw	r2,-16(fp)
  81d878:	10800617 	ldw	r2,24(r2)
  81d87c:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  81d880:	008020b4 	movhi	r2,130
  81d884:	109b0f04 	addi	r2,r2,27708
  81d888:	10c00017 	ldw	r3,0(r2)
  81d88c:	e0bffc17 	ldw	r2,-16(fp)
  81d890:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  81d894:	00c020b4 	movhi	r3,130
  81d898:	18db0f04 	addi	r3,r3,27708
  81d89c:	e0bffc17 	ldw	r2,-16(fp)
  81d8a0:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  81d8a4:	e0fffc17 	ldw	r3,-16(fp)
  81d8a8:	00800fc4 	movi	r2,63
  81d8ac:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  81d8b0:	e0bffc17 	ldw	r2,-16(fp)
  81d8b4:	10001345 	stb	zero,77(r2)
  81d8b8:	e0bffb17 	ldw	r2,-20(fp)
  81d8bc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d8c0:	e0bff517 	ldw	r2,-44(fp)
  81d8c4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  81d8c8:	008020b4 	movhi	r2,130
  81d8cc:	109b0844 	addi	r2,r2,27681
  81d8d0:	10800003 	ldbu	r2,0(r2)
  81d8d4:	10803fcc 	andi	r2,r2,255
  81d8d8:	10800058 	cmpnei	r2,r2,1
  81d8dc:	1000011e 	bne	r2,zero,81d8e4 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
  81d8e0:	08182f80 	call	8182f8 <OS_Sched>
    }
    return (OS_ERR_NONE);
  81d8e4:	e03fff15 	stw	zero,-4(fp)
  81d8e8:	e0bfff17 	ldw	r2,-4(fp)
}
  81d8ec:	e037883a 	mov	sp,fp
  81d8f0:	dfc00117 	ldw	ra,4(sp)
  81d8f4:	df000017 	ldw	fp,0(sp)
  81d8f8:	dec00204 	addi	sp,sp,8
  81d8fc:	f800283a 	ret

0081d900 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  81d900:	defff404 	addi	sp,sp,-48
  81d904:	df000b15 	stw	fp,44(sp)
  81d908:	df000b04 	addi	fp,sp,44
  81d90c:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81d910:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  81d914:	e0bffe03 	ldbu	r2,-8(fp)
  81d918:	10800518 	cmpnei	r2,r2,20
  81d91c:	1000031e 	bne	r2,zero,81d92c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  81d920:	00800f84 	movi	r2,62
  81d924:	e0bfff15 	stw	r2,-4(fp)
  81d928:	00004c06 	br	81da5c <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  81d92c:	e0bffe03 	ldbu	r2,-8(fp)
  81d930:	10800530 	cmpltui	r2,r2,20
  81d934:	1000061e 	bne	r2,zero,81d950 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
  81d938:	e0bffe03 	ldbu	r2,-8(fp)
  81d93c:	10803fe0 	cmpeqi	r2,r2,255
  81d940:	1000031e 	bne	r2,zero,81d950 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
  81d944:	00800a84 	movi	r2,42
  81d948:	e0bfff15 	stw	r2,-4(fp)
  81d94c:	00004306 	br	81da5c <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  81d950:	e0bffe03 	ldbu	r2,-8(fp)
  81d954:	10803fd8 	cmpnei	r2,r2,255
  81d958:	1000141e 	bne	r2,zero,81d9ac <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d95c:	0005303a 	rdctl	r2,status
  81d960:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d964:	e0fffa17 	ldw	r3,-24(fp)
  81d968:	00bfff84 	movi	r2,-2
  81d96c:	1884703a 	and	r2,r3,r2
  81d970:	1001703a 	wrctl	status,r2
  
  return context;
  81d974:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  81d978:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  81d97c:	008020b4 	movhi	r2,130
  81d980:	109b1704 	addi	r2,r2,27740
  81d984:	10800017 	ldw	r2,0(r2)
  81d988:	10800dc3 	ldbu	r2,55(r2)
  81d98c:	e0bffd05 	stb	r2,-12(fp)
  81d990:	e0bffb17 	ldw	r2,-20(fp)
  81d994:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d998:	e0bff917 	ldw	r2,-28(fp)
  81d99c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  81d9a0:	e0bffd03 	ldbu	r2,-12(fp)
  81d9a4:	e0bfff15 	stw	r2,-4(fp)
  81d9a8:	00002c06 	br	81da5c <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d9ac:	0005303a 	rdctl	r2,status
  81d9b0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d9b4:	e0fff817 	ldw	r3,-32(fp)
  81d9b8:	00bfff84 	movi	r2,-2
  81d9bc:	1884703a 	and	r2,r3,r2
  81d9c0:	1001703a 	wrctl	status,r2
  
  return context;
  81d9c4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  81d9c8:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
  81d9cc:	e0bffe03 	ldbu	r2,-8(fp)
  81d9d0:	00c020f4 	movhi	r3,131
  81d9d4:	18c02f04 	addi	r3,r3,188
  81d9d8:	1085883a 	add	r2,r2,r2
  81d9dc:	1085883a 	add	r2,r2,r2
  81d9e0:	10c5883a 	add	r2,r2,r3
  81d9e4:	10800017 	ldw	r2,0(r2)
  81d9e8:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  81d9ec:	e0bffc17 	ldw	r2,-16(fp)
  81d9f0:	1004c03a 	cmpne	r2,r2,zero
  81d9f4:	1000071e 	bne	r2,zero,81da14 <OSTaskDelReq+0x114>
  81d9f8:	e0bffb17 	ldw	r2,-20(fp)
  81d9fc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81da00:	e0bff717 	ldw	r2,-36(fp)
  81da04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  81da08:	008010c4 	movi	r2,67
  81da0c:	e0bfff15 	stw	r2,-4(fp)
  81da10:	00001206 	br	81da5c <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  81da14:	e0bffc17 	ldw	r2,-16(fp)
  81da18:	10800058 	cmpnei	r2,r2,1
  81da1c:	1000071e 	bne	r2,zero,81da3c <OSTaskDelReq+0x13c>
  81da20:	e0bffb17 	ldw	r2,-20(fp)
  81da24:	e0bff615 	stw	r2,-40(fp)
  81da28:	e0bff617 	ldw	r2,-40(fp)
  81da2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  81da30:	00800f44 	movi	r2,61
  81da34:	e0bfff15 	stw	r2,-4(fp)
  81da38:	00000806 	br	81da5c <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  81da3c:	e0fffc17 	ldw	r3,-16(fp)
  81da40:	00800fc4 	movi	r2,63
  81da44:	18800dc5 	stb	r2,55(r3)
  81da48:	e0bffb17 	ldw	r2,-20(fp)
  81da4c:	e0bff515 	stw	r2,-44(fp)
  81da50:	e0bff517 	ldw	r2,-44(fp)
  81da54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81da58:	e03fff15 	stw	zero,-4(fp)
  81da5c:	e0bfff17 	ldw	r2,-4(fp)
}
  81da60:	e037883a 	mov	sp,fp
  81da64:	df000017 	ldw	fp,0(sp)
  81da68:	dec00104 	addi	sp,sp,4
  81da6c:	f800283a 	ret

0081da70 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  81da70:	defff304 	addi	sp,sp,-52
  81da74:	dfc00c15 	stw	ra,48(sp)
  81da78:	df000b15 	stw	fp,44(sp)
  81da7c:	df000b04 	addi	fp,sp,44
  81da80:	e17ffd15 	stw	r5,-12(fp)
  81da84:	e1bffe15 	stw	r6,-8(fp)
  81da88:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  81da8c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  81da90:	e0bffe17 	ldw	r2,-8(fp)
  81da94:	1004c03a 	cmpne	r2,r2,zero
  81da98:	1000021e 	bne	r2,zero,81daa4 <OSTaskNameGet+0x34>
        return (0);
  81da9c:	e03fff15 	stw	zero,-4(fp)
  81daa0:	00005b06 	br	81dc10 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  81daa4:	e0bffc03 	ldbu	r2,-16(fp)
  81daa8:	10800570 	cmpltui	r2,r2,21
  81daac:	1000081e 	bne	r2,zero,81dad0 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  81dab0:	e0bffc03 	ldbu	r2,-16(fp)
  81dab4:	10803fe0 	cmpeqi	r2,r2,255
  81dab8:	1000051e 	bne	r2,zero,81dad0 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  81dabc:	e0fffe17 	ldw	r3,-8(fp)
  81dac0:	00800a84 	movi	r2,42
  81dac4:	18800005 	stb	r2,0(r3)
            return (0);
  81dac8:	e03fff15 	stw	zero,-4(fp)
  81dacc:	00005006 	br	81dc10 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  81dad0:	e0bffd17 	ldw	r2,-12(fp)
  81dad4:	1004c03a 	cmpne	r2,r2,zero
  81dad8:	1000051e 	bne	r2,zero,81daf0 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  81dadc:	e0fffe17 	ldw	r3,-8(fp)
  81dae0:	00800304 	movi	r2,12
  81dae4:	18800005 	stb	r2,0(r3)
        return (0);
  81dae8:	e03fff15 	stw	zero,-4(fp)
  81daec:	00004806 	br	81dc10 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  81daf0:	008020b4 	movhi	r2,130
  81daf4:	109b1604 	addi	r2,r2,27736
  81daf8:	10800003 	ldbu	r2,0(r2)
  81dafc:	10803fcc 	andi	r2,r2,255
  81db00:	1005003a 	cmpeq	r2,r2,zero
  81db04:	1000051e 	bne	r2,zero,81db1c <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
  81db08:	e0fffe17 	ldw	r3,-8(fp)
  81db0c:	00800444 	movi	r2,17
  81db10:	18800005 	stb	r2,0(r3)
        return (0);
  81db14:	e03fff15 	stw	zero,-4(fp)
  81db18:	00003d06 	br	81dc10 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81db1c:	0005303a 	rdctl	r2,status
  81db20:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81db24:	e0fff817 	ldw	r3,-32(fp)
  81db28:	00bfff84 	movi	r2,-2
  81db2c:	1884703a 	and	r2,r3,r2
  81db30:	1001703a 	wrctl	status,r2
  
  return context;
  81db34:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  81db38:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  81db3c:	e0bffc03 	ldbu	r2,-16(fp)
  81db40:	10803fd8 	cmpnei	r2,r2,255
  81db44:	1000051e 	bne	r2,zero,81db5c <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
  81db48:	008020b4 	movhi	r2,130
  81db4c:	109b1704 	addi	r2,r2,27740
  81db50:	10800017 	ldw	r2,0(r2)
  81db54:	10800c83 	ldbu	r2,50(r2)
  81db58:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81db5c:	e0bffc03 	ldbu	r2,-16(fp)
  81db60:	00c020f4 	movhi	r3,131
  81db64:	18c02f04 	addi	r3,r3,188
  81db68:	1085883a 	add	r2,r2,r2
  81db6c:	1085883a 	add	r2,r2,r2
  81db70:	10c5883a 	add	r2,r2,r3
  81db74:	10800017 	ldw	r2,0(r2)
  81db78:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  81db7c:	e0bffb17 	ldw	r2,-20(fp)
  81db80:	1004c03a 	cmpne	r2,r2,zero
  81db84:	1000091e 	bne	r2,zero,81dbac <OSTaskNameGet+0x13c>
  81db88:	e0bff917 	ldw	r2,-28(fp)
  81db8c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81db90:	e0bff717 	ldw	r2,-36(fp)
  81db94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  81db98:	e0fffe17 	ldw	r3,-8(fp)
  81db9c:	008010c4 	movi	r2,67
  81dba0:	18800005 	stb	r2,0(r3)
        return (0);
  81dba4:	e03fff15 	stw	zero,-4(fp)
  81dba8:	00001906 	br	81dc10 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  81dbac:	e0bffb17 	ldw	r2,-20(fp)
  81dbb0:	10800058 	cmpnei	r2,r2,1
  81dbb4:	1000091e 	bne	r2,zero,81dbdc <OSTaskNameGet+0x16c>
  81dbb8:	e0bff917 	ldw	r2,-28(fp)
  81dbbc:	e0bff615 	stw	r2,-40(fp)
  81dbc0:	e0bff617 	ldw	r2,-40(fp)
  81dbc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  81dbc8:	e0fffe17 	ldw	r3,-8(fp)
  81dbcc:	008010c4 	movi	r2,67
  81dbd0:	18800005 	stb	r2,0(r3)
        return (0);
  81dbd4:	e03fff15 	stw	zero,-4(fp)
  81dbd8:	00000d06 	br	81dc10 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  81dbdc:	e0bffb17 	ldw	r2,-20(fp)
  81dbe0:	11401304 	addi	r5,r2,76
  81dbe4:	e13ffd17 	ldw	r4,-12(fp)
  81dbe8:	081843c0 	call	81843c <OS_StrCopy>
  81dbec:	e0bffa05 	stb	r2,-24(fp)
  81dbf0:	e0bff917 	ldw	r2,-28(fp)
  81dbf4:	e0bff515 	stw	r2,-44(fp)
  81dbf8:	e0bff517 	ldw	r2,-44(fp)
  81dbfc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81dc00:	e0bffe17 	ldw	r2,-8(fp)
  81dc04:	10000005 	stb	zero,0(r2)
    return (len);
  81dc08:	e0bffa03 	ldbu	r2,-24(fp)
  81dc0c:	e0bfff15 	stw	r2,-4(fp)
  81dc10:	e0bfff17 	ldw	r2,-4(fp)
}
  81dc14:	e037883a 	mov	sp,fp
  81dc18:	dfc00117 	ldw	ra,4(sp)
  81dc1c:	df000017 	ldw	fp,0(sp)
  81dc20:	dec00204 	addi	sp,sp,8
  81dc24:	f800283a 	ret

0081dc28 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  81dc28:	defff304 	addi	sp,sp,-52
  81dc2c:	dfc00c15 	stw	ra,48(sp)
  81dc30:	df000b15 	stw	fp,44(sp)
  81dc34:	df000b04 	addi	fp,sp,44
  81dc38:	e17ffe15 	stw	r5,-8(fp)
  81dc3c:	e1bfff15 	stw	r6,-4(fp)
  81dc40:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  81dc44:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  81dc48:	e0bfff17 	ldw	r2,-4(fp)
  81dc4c:	1005003a 	cmpeq	r2,r2,zero
  81dc50:	1000611e 	bne	r2,zero,81ddd8 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  81dc54:	e0bffd03 	ldbu	r2,-12(fp)
  81dc58:	10800570 	cmpltui	r2,r2,21
  81dc5c:	1000071e 	bne	r2,zero,81dc7c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  81dc60:	e0bffd03 	ldbu	r2,-12(fp)
  81dc64:	10803fe0 	cmpeqi	r2,r2,255
  81dc68:	1000041e 	bne	r2,zero,81dc7c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  81dc6c:	e0ffff17 	ldw	r3,-4(fp)
  81dc70:	00800a84 	movi	r2,42
  81dc74:	18800005 	stb	r2,0(r3)
            return;
  81dc78:	00005706 	br	81ddd8 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  81dc7c:	e0bffe17 	ldw	r2,-8(fp)
  81dc80:	1004c03a 	cmpne	r2,r2,zero
  81dc84:	1000041e 	bne	r2,zero,81dc98 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  81dc88:	e0ffff17 	ldw	r3,-4(fp)
  81dc8c:	00800304 	movi	r2,12
  81dc90:	18800005 	stb	r2,0(r3)
        return;
  81dc94:	00005006 	br	81ddd8 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  81dc98:	008020b4 	movhi	r2,130
  81dc9c:	109b1604 	addi	r2,r2,27736
  81dca0:	10800003 	ldbu	r2,0(r2)
  81dca4:	10803fcc 	andi	r2,r2,255
  81dca8:	1005003a 	cmpeq	r2,r2,zero
  81dcac:	1000041e 	bne	r2,zero,81dcc0 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
  81dcb0:	e0ffff17 	ldw	r3,-4(fp)
  81dcb4:	00800484 	movi	r2,18
  81dcb8:	18800005 	stb	r2,0(r3)
        return;
  81dcbc:	00004606 	br	81ddd8 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81dcc0:	0005303a 	rdctl	r2,status
  81dcc4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81dcc8:	e0fff917 	ldw	r3,-28(fp)
  81dccc:	00bfff84 	movi	r2,-2
  81dcd0:	1884703a 	and	r2,r3,r2
  81dcd4:	1001703a 	wrctl	status,r2
  
  return context;
  81dcd8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81dcdc:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  81dce0:	e0bffd03 	ldbu	r2,-12(fp)
  81dce4:	10803fd8 	cmpnei	r2,r2,255
  81dce8:	1000051e 	bne	r2,zero,81dd00 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
  81dcec:	008020b4 	movhi	r2,130
  81dcf0:	109b1704 	addi	r2,r2,27740
  81dcf4:	10800017 	ldw	r2,0(r2)
  81dcf8:	10800c83 	ldbu	r2,50(r2)
  81dcfc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81dd00:	e0bffd03 	ldbu	r2,-12(fp)
  81dd04:	00c020f4 	movhi	r3,131
  81dd08:	18c02f04 	addi	r3,r3,188
  81dd0c:	1085883a 	add	r2,r2,r2
  81dd10:	1085883a 	add	r2,r2,r2
  81dd14:	10c5883a 	add	r2,r2,r3
  81dd18:	10800017 	ldw	r2,0(r2)
  81dd1c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  81dd20:	e0bffb17 	ldw	r2,-20(fp)
  81dd24:	1004c03a 	cmpne	r2,r2,zero
  81dd28:	1000081e 	bne	r2,zero,81dd4c <OSTaskNameSet+0x124>
  81dd2c:	e0bffa17 	ldw	r2,-24(fp)
  81dd30:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81dd34:	e0bff817 	ldw	r2,-32(fp)
  81dd38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  81dd3c:	e0ffff17 	ldw	r3,-4(fp)
  81dd40:	008010c4 	movi	r2,67
  81dd44:	18800005 	stb	r2,0(r3)
        return;
  81dd48:	00002306 	br	81ddd8 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  81dd4c:	e0bffb17 	ldw	r2,-20(fp)
  81dd50:	10800058 	cmpnei	r2,r2,1
  81dd54:	1000081e 	bne	r2,zero,81dd78 <OSTaskNameSet+0x150>
  81dd58:	e0bffa17 	ldw	r2,-24(fp)
  81dd5c:	e0bff715 	stw	r2,-36(fp)
  81dd60:	e0bff717 	ldw	r2,-36(fp)
  81dd64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  81dd68:	e0ffff17 	ldw	r3,-4(fp)
  81dd6c:	008010c4 	movi	r2,67
  81dd70:	18800005 	stb	r2,0(r3)
        return;
  81dd74:	00001806 	br	81ddd8 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  81dd78:	e13ffe17 	ldw	r4,-8(fp)
  81dd7c:	08184bc0 	call	8184bc <OS_StrLen>
  81dd80:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  81dd84:	e0bffc03 	ldbu	r2,-16(fp)
  81dd88:	10800830 	cmpltui	r2,r2,32
  81dd8c:	1000081e 	bne	r2,zero,81ddb0 <OSTaskNameSet+0x188>
  81dd90:	e0bffa17 	ldw	r2,-24(fp)
  81dd94:	e0bff615 	stw	r2,-40(fp)
  81dd98:	e0bff617 	ldw	r2,-40(fp)
  81dd9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  81dda0:	e0ffff17 	ldw	r3,-4(fp)
  81dda4:	00801044 	movi	r2,65
  81dda8:	18800005 	stb	r2,0(r3)
        return;
  81ddac:	00000a06 	br	81ddd8 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  81ddb0:	e0bffb17 	ldw	r2,-20(fp)
  81ddb4:	11001304 	addi	r4,r2,76
  81ddb8:	e17ffe17 	ldw	r5,-8(fp)
  81ddbc:	081843c0 	call	81843c <OS_StrCopy>
  81ddc0:	e0bffa17 	ldw	r2,-24(fp)
  81ddc4:	e0bff515 	stw	r2,-44(fp)
  81ddc8:	e0bff517 	ldw	r2,-44(fp)
  81ddcc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81ddd0:	e0bfff17 	ldw	r2,-4(fp)
  81ddd4:	10000005 	stb	zero,0(r2)
}
  81ddd8:	e037883a 	mov	sp,fp
  81dddc:	dfc00117 	ldw	ra,4(sp)
  81dde0:	df000017 	ldw	fp,0(sp)
  81dde4:	dec00204 	addi	sp,sp,8
  81dde8:	f800283a 	ret

0081ddec <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  81ddec:	defff304 	addi	sp,sp,-52
  81ddf0:	dfc00c15 	stw	ra,48(sp)
  81ddf4:	df000b15 	stw	fp,44(sp)
  81ddf8:	df000b04 	addi	fp,sp,44
  81ddfc:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  81de00:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  81de04:	e0bffe03 	ldbu	r2,-8(fp)
  81de08:	10800530 	cmpltui	r2,r2,20
  81de0c:	1000031e 	bne	r2,zero,81de1c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  81de10:	00800a84 	movi	r2,42
  81de14:	e0bfff15 	stw	r2,-4(fp)
  81de18:	00007406 	br	81dfec <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81de1c:	0005303a 	rdctl	r2,status
  81de20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81de24:	e0fffb17 	ldw	r3,-20(fp)
  81de28:	00bfff84 	movi	r2,-2
  81de2c:	1884703a 	and	r2,r3,r2
  81de30:	1001703a 	wrctl	status,r2
  
  return context;
  81de34:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81de38:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
  81de3c:	e0bffe03 	ldbu	r2,-8(fp)
  81de40:	00c020f4 	movhi	r3,131
  81de44:	18c02f04 	addi	r3,r3,188
  81de48:	1085883a 	add	r2,r2,r2
  81de4c:	1085883a 	add	r2,r2,r2
  81de50:	10c5883a 	add	r2,r2,r3
  81de54:	10800017 	ldw	r2,0(r2)
  81de58:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  81de5c:	e0bffd17 	ldw	r2,-12(fp)
  81de60:	1004c03a 	cmpne	r2,r2,zero
  81de64:	1000071e 	bne	r2,zero,81de84 <OSTaskResume+0x98>
  81de68:	e0bffc17 	ldw	r2,-16(fp)
  81de6c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81de70:	e0bffa17 	ldw	r2,-24(fp)
  81de74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  81de78:	00801184 	movi	r2,70
  81de7c:	e0bfff15 	stw	r2,-4(fp)
  81de80:	00005a06 	br	81dfec <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  81de84:	e0bffd17 	ldw	r2,-12(fp)
  81de88:	10800058 	cmpnei	r2,r2,1
  81de8c:	1000071e 	bne	r2,zero,81deac <OSTaskResume+0xc0>
  81de90:	e0bffc17 	ldw	r2,-16(fp)
  81de94:	e0bff915 	stw	r2,-28(fp)
  81de98:	e0bff917 	ldw	r2,-28(fp)
  81de9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  81dea0:	008010c4 	movi	r2,67
  81dea4:	e0bfff15 	stw	r2,-4(fp)
  81dea8:	00005006 	br	81dfec <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  81deac:	e0bffd17 	ldw	r2,-12(fp)
  81deb0:	10800c03 	ldbu	r2,48(r2)
  81deb4:	10803fcc 	andi	r2,r2,255
  81deb8:	1080020c 	andi	r2,r2,8
  81debc:	1005003a 	cmpeq	r2,r2,zero
  81dec0:	1000441e 	bne	r2,zero,81dfd4 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  81dec4:	e0bffd17 	ldw	r2,-12(fp)
  81dec8:	10c00c03 	ldbu	r3,48(r2)
  81decc:	00bffdc4 	movi	r2,-9
  81ded0:	1884703a 	and	r2,r3,r2
  81ded4:	1007883a 	mov	r3,r2
  81ded8:	e0bffd17 	ldw	r2,-12(fp)
  81dedc:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  81dee0:	e0bffd17 	ldw	r2,-12(fp)
  81dee4:	10800c03 	ldbu	r2,48(r2)
  81dee8:	10803fcc 	andi	r2,r2,255
  81deec:	1004c03a 	cmpne	r2,r2,zero
  81def0:	1000321e 	bne	r2,zero,81dfbc <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
  81def4:	e0bffd17 	ldw	r2,-12(fp)
  81def8:	10800b8b 	ldhu	r2,46(r2)
  81defc:	10bfffcc 	andi	r2,r2,65535
  81df00:	1004c03a 	cmpne	r2,r2,zero
  81df04:	1000281e 	bne	r2,zero,81dfa8 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  81df08:	e0bffd17 	ldw	r2,-12(fp)
  81df0c:	10c00d83 	ldbu	r3,54(r2)
  81df10:	008020b4 	movhi	r2,130
  81df14:	109b1404 	addi	r2,r2,27728
  81df18:	10800003 	ldbu	r2,0(r2)
  81df1c:	1884b03a 	or	r2,r3,r2
  81df20:	1007883a 	mov	r3,r2
  81df24:	008020b4 	movhi	r2,130
  81df28:	109b1404 	addi	r2,r2,27728
  81df2c:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  81df30:	e0bffd17 	ldw	r2,-12(fp)
  81df34:	10800d03 	ldbu	r2,52(r2)
  81df38:	11003fcc 	andi	r4,r2,255
  81df3c:	e0bffd17 	ldw	r2,-12(fp)
  81df40:	10800d03 	ldbu	r2,52(r2)
  81df44:	10c03fcc 	andi	r3,r2,255
  81df48:	008020b4 	movhi	r2,130
  81df4c:	109b1444 	addi	r2,r2,27729
  81df50:	10c5883a 	add	r2,r2,r3
  81df54:	10c00003 	ldbu	r3,0(r2)
  81df58:	e0bffd17 	ldw	r2,-12(fp)
  81df5c:	10800d43 	ldbu	r2,53(r2)
  81df60:	1884b03a 	or	r2,r3,r2
  81df64:	1007883a 	mov	r3,r2
  81df68:	008020b4 	movhi	r2,130
  81df6c:	109b1444 	addi	r2,r2,27729
  81df70:	1105883a 	add	r2,r2,r4
  81df74:	10c00005 	stb	r3,0(r2)
  81df78:	e0bffc17 	ldw	r2,-16(fp)
  81df7c:	e0bff815 	stw	r2,-32(fp)
  81df80:	e0bff817 	ldw	r2,-32(fp)
  81df84:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  81df88:	008020b4 	movhi	r2,130
  81df8c:	109b0844 	addi	r2,r2,27681
  81df90:	10800003 	ldbu	r2,0(r2)
  81df94:	10803fcc 	andi	r2,r2,255
  81df98:	10800058 	cmpnei	r2,r2,1
  81df9c:	10000b1e 	bne	r2,zero,81dfcc <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
  81dfa0:	08182f80 	call	8182f8 <OS_Sched>
  81dfa4:	00000906 	br	81dfcc <OSTaskResume+0x1e0>
  81dfa8:	e0bffc17 	ldw	r2,-16(fp)
  81dfac:	e0bff715 	stw	r2,-36(fp)
  81dfb0:	e0bff717 	ldw	r2,-36(fp)
  81dfb4:	1001703a 	wrctl	status,r2
  81dfb8:	00000406 	br	81dfcc <OSTaskResume+0x1e0>
  81dfbc:	e0bffc17 	ldw	r2,-16(fp)
  81dfc0:	e0bff615 	stw	r2,-40(fp)
  81dfc4:	e0bff617 	ldw	r2,-40(fp)
  81dfc8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  81dfcc:	e03fff15 	stw	zero,-4(fp)
  81dfd0:	00000606 	br	81dfec <OSTaskResume+0x200>
  81dfd4:	e0bffc17 	ldw	r2,-16(fp)
  81dfd8:	e0bff515 	stw	r2,-44(fp)
  81dfdc:	e0bff517 	ldw	r2,-44(fp)
  81dfe0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  81dfe4:	00801104 	movi	r2,68
  81dfe8:	e0bfff15 	stw	r2,-4(fp)
  81dfec:	e0bfff17 	ldw	r2,-4(fp)
}
  81dff0:	e037883a 	mov	sp,fp
  81dff4:	dfc00117 	ldw	ra,4(sp)
  81dff8:	df000017 	ldw	fp,0(sp)
  81dffc:	dec00204 	addi	sp,sp,8
  81e000:	f800283a 	ret

0081e004 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  81e004:	defff204 	addi	sp,sp,-56
  81e008:	df000d15 	stw	fp,52(sp)
  81e00c:	df000d04 	addi	fp,sp,52
  81e010:	e17ffe15 	stw	r5,-8(fp)
  81e014:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  81e018:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  81e01c:	e0bffd03 	ldbu	r2,-12(fp)
  81e020:	10800570 	cmpltui	r2,r2,21
  81e024:	1000061e 	bne	r2,zero,81e040 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  81e028:	e0bffd03 	ldbu	r2,-12(fp)
  81e02c:	10803fe0 	cmpeqi	r2,r2,255
  81e030:	1000031e 	bne	r2,zero,81e040 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  81e034:	00800a84 	movi	r2,42
  81e038:	e0bfff15 	stw	r2,-4(fp)
  81e03c:	00006b06 	br	81e1ec <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  81e040:	e0bffe17 	ldw	r2,-8(fp)
  81e044:	1004c03a 	cmpne	r2,r2,zero
  81e048:	1000031e 	bne	r2,zero,81e058 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
  81e04c:	00800244 	movi	r2,9
  81e050:	e0bfff15 	stw	r2,-4(fp)
  81e054:	00006506 	br	81e1ec <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  81e058:	e0bffe17 	ldw	r2,-8(fp)
  81e05c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  81e060:	e0bffe17 	ldw	r2,-8(fp)
  81e064:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81e068:	0005303a 	rdctl	r2,status
  81e06c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81e070:	e0fff717 	ldw	r3,-36(fp)
  81e074:	00bfff84 	movi	r2,-2
  81e078:	1884703a 	and	r2,r3,r2
  81e07c:	1001703a 	wrctl	status,r2
  
  return context;
  81e080:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  81e084:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  81e088:	e0bffd03 	ldbu	r2,-12(fp)
  81e08c:	10803fd8 	cmpnei	r2,r2,255
  81e090:	1000051e 	bne	r2,zero,81e0a8 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
  81e094:	008020b4 	movhi	r2,130
  81e098:	109b1704 	addi	r2,r2,27740
  81e09c:	10800017 	ldw	r2,0(r2)
  81e0a0:	10800c83 	ldbu	r2,50(r2)
  81e0a4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81e0a8:	e0bffd03 	ldbu	r2,-12(fp)
  81e0ac:	00c020f4 	movhi	r3,131
  81e0b0:	18c02f04 	addi	r3,r3,188
  81e0b4:	1085883a 	add	r2,r2,r2
  81e0b8:	1085883a 	add	r2,r2,r2
  81e0bc:	10c5883a 	add	r2,r2,r3
  81e0c0:	10800017 	ldw	r2,0(r2)
  81e0c4:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  81e0c8:	e0bffc17 	ldw	r2,-16(fp)
  81e0cc:	1004c03a 	cmpne	r2,r2,zero
  81e0d0:	1000071e 	bne	r2,zero,81e0f0 <OSTaskStkChk+0xec>
  81e0d4:	e0bff817 	ldw	r2,-32(fp)
  81e0d8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81e0dc:	e0bff617 	ldw	r2,-40(fp)
  81e0e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  81e0e4:	008010c4 	movi	r2,67
  81e0e8:	e0bfff15 	stw	r2,-4(fp)
  81e0ec:	00003f06 	br	81e1ec <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  81e0f0:	e0bffc17 	ldw	r2,-16(fp)
  81e0f4:	10800058 	cmpnei	r2,r2,1
  81e0f8:	1000071e 	bne	r2,zero,81e118 <OSTaskStkChk+0x114>
  81e0fc:	e0bff817 	ldw	r2,-32(fp)
  81e100:	e0bff515 	stw	r2,-44(fp)
  81e104:	e0bff517 	ldw	r2,-44(fp)
  81e108:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  81e10c:	008010c4 	movi	r2,67
  81e110:	e0bfff15 	stw	r2,-4(fp)
  81e114:	00003506 	br	81e1ec <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  81e118:	e0bffc17 	ldw	r2,-16(fp)
  81e11c:	1080040b 	ldhu	r2,16(r2)
  81e120:	10bfffcc 	andi	r2,r2,65535
  81e124:	1080004c 	andi	r2,r2,1
  81e128:	1004c03a 	cmpne	r2,r2,zero
  81e12c:	1000071e 	bne	r2,zero,81e14c <OSTaskStkChk+0x148>
  81e130:	e0bff817 	ldw	r2,-32(fp)
  81e134:	e0bff415 	stw	r2,-48(fp)
  81e138:	e0bff417 	ldw	r2,-48(fp)
  81e13c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  81e140:	00801144 	movi	r2,69
  81e144:	e0bfff15 	stw	r2,-4(fp)
  81e148:	00002806 	br	81e1ec <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
  81e14c:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
  81e150:	e0bffc17 	ldw	r2,-16(fp)
  81e154:	10800317 	ldw	r2,12(r2)
  81e158:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
  81e15c:	e0bffc17 	ldw	r2,-16(fp)
  81e160:	10800217 	ldw	r2,8(r2)
  81e164:	e0bffb15 	stw	r2,-20(fp)
  81e168:	e0bff817 	ldw	r2,-32(fp)
  81e16c:	e0bff315 	stw	r2,-52(fp)
  81e170:	e0bff317 	ldw	r2,-52(fp)
  81e174:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  81e178:	00000306 	br	81e188 <OSTaskStkChk+0x184>
        nfree++;
  81e17c:	e0bffa17 	ldw	r2,-24(fp)
  81e180:	10800044 	addi	r2,r2,1
  81e184:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  81e188:	e0bffb17 	ldw	r2,-20(fp)
  81e18c:	10800017 	ldw	r2,0(r2)
  81e190:	1005003a 	cmpeq	r2,r2,zero
  81e194:	1007883a 	mov	r3,r2
  81e198:	e0bffb17 	ldw	r2,-20(fp)
  81e19c:	10800104 	addi	r2,r2,4
  81e1a0:	e0bffb15 	stw	r2,-20(fp)
  81e1a4:	18803fcc 	andi	r2,r3,255
  81e1a8:	1004c03a 	cmpne	r2,r2,zero
  81e1ac:	103ff31e 	bne	r2,zero,81e17c <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  81e1b0:	e0bffa17 	ldw	r2,-24(fp)
  81e1b4:	1085883a 	add	r2,r2,r2
  81e1b8:	1085883a 	add	r2,r2,r2
  81e1bc:	1007883a 	mov	r3,r2
  81e1c0:	e0bffe17 	ldw	r2,-8(fp)
  81e1c4:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  81e1c8:	e0fff917 	ldw	r3,-28(fp)
  81e1cc:	e0bffa17 	ldw	r2,-24(fp)
  81e1d0:	1885c83a 	sub	r2,r3,r2
  81e1d4:	1085883a 	add	r2,r2,r2
  81e1d8:	1085883a 	add	r2,r2,r2
  81e1dc:	1007883a 	mov	r3,r2
  81e1e0:	e0bffe17 	ldw	r2,-8(fp)
  81e1e4:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  81e1e8:	e03fff15 	stw	zero,-4(fp)
  81e1ec:	e0bfff17 	ldw	r2,-4(fp)
}
  81e1f0:	e037883a 	mov	sp,fp
  81e1f4:	df000017 	ldw	fp,0(sp)
  81e1f8:	dec00104 	addi	sp,sp,4
  81e1fc:	f800283a 	ret

0081e200 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  81e200:	defff404 	addi	sp,sp,-48
  81e204:	dfc00b15 	stw	ra,44(sp)
  81e208:	df000a15 	stw	fp,40(sp)
  81e20c:	df000a04 	addi	fp,sp,40
  81e210:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81e214:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  81e218:	e0bffe03 	ldbu	r2,-8(fp)
  81e21c:	10800518 	cmpnei	r2,r2,20
  81e220:	1000031e 	bne	r2,zero,81e230 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  81e224:	008011c4 	movi	r2,71
  81e228:	e0bfff15 	stw	r2,-4(fp)
  81e22c:	00007906 	br	81e414 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  81e230:	e0bffe03 	ldbu	r2,-8(fp)
  81e234:	10800530 	cmpltui	r2,r2,20
  81e238:	1000061e 	bne	r2,zero,81e254 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
  81e23c:	e0bffe03 	ldbu	r2,-8(fp)
  81e240:	10803fe0 	cmpeqi	r2,r2,255
  81e244:	1000031e 	bne	r2,zero,81e254 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
  81e248:	00800a84 	movi	r2,42
  81e24c:	e0bfff15 	stw	r2,-4(fp)
  81e250:	00007006 	br	81e414 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81e254:	0005303a 	rdctl	r2,status
  81e258:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81e25c:	e0fff917 	ldw	r3,-28(fp)
  81e260:	00bfff84 	movi	r2,-2
  81e264:	1884703a 	and	r2,r3,r2
  81e268:	1001703a 	wrctl	status,r2
  
  return context;
  81e26c:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  81e270:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  81e274:	e0bffe03 	ldbu	r2,-8(fp)
  81e278:	10803fd8 	cmpnei	r2,r2,255
  81e27c:	1000081e 	bne	r2,zero,81e2a0 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
  81e280:	008020b4 	movhi	r2,130
  81e284:	109b1704 	addi	r2,r2,27740
  81e288:	10800017 	ldw	r2,0(r2)
  81e28c:	10800c83 	ldbu	r2,50(r2)
  81e290:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
  81e294:	00800044 	movi	r2,1
  81e298:	e0bffd05 	stb	r2,-12(fp)
  81e29c:	00000b06 	br	81e2cc <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  81e2a0:	008020b4 	movhi	r2,130
  81e2a4:	109b1704 	addi	r2,r2,27740
  81e2a8:	10800017 	ldw	r2,0(r2)
  81e2ac:	10800c83 	ldbu	r2,50(r2)
  81e2b0:	10c03fcc 	andi	r3,r2,255
  81e2b4:	e0bffe03 	ldbu	r2,-8(fp)
  81e2b8:	1880031e 	bne	r3,r2,81e2c8 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
  81e2bc:	00800044 	movi	r2,1
  81e2c0:	e0bffd05 	stb	r2,-12(fp)
  81e2c4:	00000106 	br	81e2cc <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  81e2c8:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81e2cc:	e0bffe03 	ldbu	r2,-8(fp)
  81e2d0:	00c020f4 	movhi	r3,131
  81e2d4:	18c02f04 	addi	r3,r3,188
  81e2d8:	1085883a 	add	r2,r2,r2
  81e2dc:	1085883a 	add	r2,r2,r2
  81e2e0:	10c5883a 	add	r2,r2,r3
  81e2e4:	10800017 	ldw	r2,0(r2)
  81e2e8:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  81e2ec:	e0bffc17 	ldw	r2,-16(fp)
  81e2f0:	1004c03a 	cmpne	r2,r2,zero
  81e2f4:	1000071e 	bne	r2,zero,81e314 <OSTaskSuspend+0x114>
  81e2f8:	e0bffa17 	ldw	r2,-24(fp)
  81e2fc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81e300:	e0bff817 	ldw	r2,-32(fp)
  81e304:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  81e308:	00801204 	movi	r2,72
  81e30c:	e0bfff15 	stw	r2,-4(fp)
  81e310:	00004006 	br	81e414 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  81e314:	e0bffc17 	ldw	r2,-16(fp)
  81e318:	10800058 	cmpnei	r2,r2,1
  81e31c:	1000071e 	bne	r2,zero,81e33c <OSTaskSuspend+0x13c>
  81e320:	e0bffa17 	ldw	r2,-24(fp)
  81e324:	e0bff715 	stw	r2,-36(fp)
  81e328:	e0bff717 	ldw	r2,-36(fp)
  81e32c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  81e330:	008010c4 	movi	r2,67
  81e334:	e0bfff15 	stw	r2,-4(fp)
  81e338:	00003606 	br	81e414 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
  81e33c:	e0bffc17 	ldw	r2,-16(fp)
  81e340:	10800d03 	ldbu	r2,52(r2)
  81e344:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  81e348:	e13ffb03 	ldbu	r4,-20(fp)
  81e34c:	e0fffb03 	ldbu	r3,-20(fp)
  81e350:	008020b4 	movhi	r2,130
  81e354:	109b1444 	addi	r2,r2,27729
  81e358:	10c5883a 	add	r2,r2,r3
  81e35c:	10800003 	ldbu	r2,0(r2)
  81e360:	1007883a 	mov	r3,r2
  81e364:	e0bffc17 	ldw	r2,-16(fp)
  81e368:	10800d43 	ldbu	r2,53(r2)
  81e36c:	0084303a 	nor	r2,zero,r2
  81e370:	1884703a 	and	r2,r3,r2
  81e374:	1007883a 	mov	r3,r2
  81e378:	008020b4 	movhi	r2,130
  81e37c:	109b1444 	addi	r2,r2,27729
  81e380:	1105883a 	add	r2,r2,r4
  81e384:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  81e388:	e0fffb03 	ldbu	r3,-20(fp)
  81e38c:	008020b4 	movhi	r2,130
  81e390:	109b1444 	addi	r2,r2,27729
  81e394:	10c5883a 	add	r2,r2,r3
  81e398:	10800003 	ldbu	r2,0(r2)
  81e39c:	10803fcc 	andi	r2,r2,255
  81e3a0:	1004c03a 	cmpne	r2,r2,zero
  81e3a4:	10000c1e 	bne	r2,zero,81e3d8 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  81e3a8:	e0bffc17 	ldw	r2,-16(fp)
  81e3ac:	10800d83 	ldbu	r2,54(r2)
  81e3b0:	0084303a 	nor	r2,zero,r2
  81e3b4:	1007883a 	mov	r3,r2
  81e3b8:	008020b4 	movhi	r2,130
  81e3bc:	109b1404 	addi	r2,r2,27728
  81e3c0:	10800003 	ldbu	r2,0(r2)
  81e3c4:	1884703a 	and	r2,r3,r2
  81e3c8:	1007883a 	mov	r3,r2
  81e3cc:	008020b4 	movhi	r2,130
  81e3d0:	109b1404 	addi	r2,r2,27728
  81e3d4:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  81e3d8:	e0bffc17 	ldw	r2,-16(fp)
  81e3dc:	10800c03 	ldbu	r2,48(r2)
  81e3e0:	10800214 	ori	r2,r2,8
  81e3e4:	1007883a 	mov	r3,r2
  81e3e8:	e0bffc17 	ldw	r2,-16(fp)
  81e3ec:	10c00c05 	stb	r3,48(r2)
  81e3f0:	e0bffa17 	ldw	r2,-24(fp)
  81e3f4:	e0bff615 	stw	r2,-40(fp)
  81e3f8:	e0bff617 	ldw	r2,-40(fp)
  81e3fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  81e400:	e0bffd03 	ldbu	r2,-12(fp)
  81e404:	10800058 	cmpnei	r2,r2,1
  81e408:	1000011e 	bne	r2,zero,81e410 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
  81e40c:	08182f80 	call	8182f8 <OS_Sched>
    }
    return (OS_ERR_NONE);
  81e410:	e03fff15 	stw	zero,-4(fp)
  81e414:	e0bfff17 	ldw	r2,-4(fp)
}
  81e418:	e037883a 	mov	sp,fp
  81e41c:	dfc00117 	ldw	ra,4(sp)
  81e420:	df000017 	ldw	fp,0(sp)
  81e424:	dec00204 	addi	sp,sp,8
  81e428:	f800283a 	ret

0081e42c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  81e42c:	defff504 	addi	sp,sp,-44
  81e430:	dfc00a15 	stw	ra,40(sp)
  81e434:	df000915 	stw	fp,36(sp)
  81e438:	df000904 	addi	fp,sp,36
  81e43c:	e17ffe15 	stw	r5,-8(fp)
  81e440:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81e444:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  81e448:	e0bffd03 	ldbu	r2,-12(fp)
  81e44c:	10800570 	cmpltui	r2,r2,21
  81e450:	1000061e 	bne	r2,zero,81e46c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  81e454:	e0bffd03 	ldbu	r2,-12(fp)
  81e458:	10803fe0 	cmpeqi	r2,r2,255
  81e45c:	1000031e 	bne	r2,zero,81e46c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  81e460:	00800a84 	movi	r2,42
  81e464:	e0bfff15 	stw	r2,-4(fp)
  81e468:	00003b06 	br	81e558 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  81e46c:	e0bffe17 	ldw	r2,-8(fp)
  81e470:	1004c03a 	cmpne	r2,r2,zero
  81e474:	1000031e 	bne	r2,zero,81e484 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
  81e478:	00800244 	movi	r2,9
  81e47c:	e0bfff15 	stw	r2,-4(fp)
  81e480:	00003506 	br	81e558 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81e484:	0005303a 	rdctl	r2,status
  81e488:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81e48c:	e0fffa17 	ldw	r3,-24(fp)
  81e490:	00bfff84 	movi	r2,-2
  81e494:	1884703a 	and	r2,r3,r2
  81e498:	1001703a 	wrctl	status,r2
  
  return context;
  81e49c:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81e4a0:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  81e4a4:	e0bffd03 	ldbu	r2,-12(fp)
  81e4a8:	10803fd8 	cmpnei	r2,r2,255
  81e4ac:	1000051e 	bne	r2,zero,81e4c4 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
  81e4b0:	008020b4 	movhi	r2,130
  81e4b4:	109b1704 	addi	r2,r2,27740
  81e4b8:	10800017 	ldw	r2,0(r2)
  81e4bc:	10800c83 	ldbu	r2,50(r2)
  81e4c0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81e4c4:	e0bffd03 	ldbu	r2,-12(fp)
  81e4c8:	00c020f4 	movhi	r3,131
  81e4cc:	18c02f04 	addi	r3,r3,188
  81e4d0:	1085883a 	add	r2,r2,r2
  81e4d4:	1085883a 	add	r2,r2,r2
  81e4d8:	10c5883a 	add	r2,r2,r3
  81e4dc:	10800017 	ldw	r2,0(r2)
  81e4e0:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  81e4e4:	e0bffc17 	ldw	r2,-16(fp)
  81e4e8:	1004c03a 	cmpne	r2,r2,zero
  81e4ec:	1000071e 	bne	r2,zero,81e50c <OSTaskQuery+0xe0>
  81e4f0:	e0bffb17 	ldw	r2,-20(fp)
  81e4f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81e4f8:	e0bff917 	ldw	r2,-28(fp)
  81e4fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  81e500:	00800a44 	movi	r2,41
  81e504:	e0bfff15 	stw	r2,-4(fp)
  81e508:	00001306 	br	81e558 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  81e50c:	e0bffc17 	ldw	r2,-16(fp)
  81e510:	10800058 	cmpnei	r2,r2,1
  81e514:	1000071e 	bne	r2,zero,81e534 <OSTaskQuery+0x108>
  81e518:	e0bffb17 	ldw	r2,-20(fp)
  81e51c:	e0bff815 	stw	r2,-32(fp)
  81e520:	e0bff817 	ldw	r2,-32(fp)
  81e524:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  81e528:	008010c4 	movi	r2,67
  81e52c:	e0bfff15 	stw	r2,-4(fp)
  81e530:	00000906 	br	81e558 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  81e534:	e13ffe17 	ldw	r4,-8(fp)
  81e538:	e17ffc17 	ldw	r5,-16(fp)
  81e53c:	01801b04 	movi	r6,108
  81e540:	081828c0 	call	81828c <OS_MemCopy>
  81e544:	e0bffb17 	ldw	r2,-20(fp)
  81e548:	e0bff715 	stw	r2,-36(fp)
  81e54c:	e0bff717 	ldw	r2,-36(fp)
  81e550:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81e554:	e03fff15 	stw	zero,-4(fp)
  81e558:	e0bfff17 	ldw	r2,-4(fp)
}
  81e55c:	e037883a 	mov	sp,fp
  81e560:	dfc00117 	ldw	ra,4(sp)
  81e564:	df000017 	ldw	fp,0(sp)
  81e568:	dec00204 	addi	sp,sp,8
  81e56c:	f800283a 	ret

0081e570 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  81e570:	defffc04 	addi	sp,sp,-16
  81e574:	df000315 	stw	fp,12(sp)
  81e578:	df000304 	addi	fp,sp,12
  81e57c:	e13ffd15 	stw	r4,-12(fp)
  81e580:	e17ffe15 	stw	r5,-8(fp)
  81e584:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  81e588:	e0bfff0b 	ldhu	r2,-4(fp)
  81e58c:	1080004c 	andi	r2,r2,1
  81e590:	10803fcc 	andi	r2,r2,255
  81e594:	1005003a 	cmpeq	r2,r2,zero
  81e598:	1000101e 	bne	r2,zero,81e5dc <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  81e59c:	e0bfff0b 	ldhu	r2,-4(fp)
  81e5a0:	1080008c 	andi	r2,r2,2
  81e5a4:	1005003a 	cmpeq	r2,r2,zero
  81e5a8:	10000c1e 	bne	r2,zero,81e5dc <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  81e5ac:	00000806 	br	81e5d0 <OS_TaskStkClr+0x60>
                size--;
  81e5b0:	e0bffe17 	ldw	r2,-8(fp)
  81e5b4:	10bfffc4 	addi	r2,r2,-1
  81e5b8:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  81e5bc:	e0bffd17 	ldw	r2,-12(fp)
  81e5c0:	10000015 	stw	zero,0(r2)
  81e5c4:	e0bffd17 	ldw	r2,-12(fp)
  81e5c8:	10800104 	addi	r2,r2,4
  81e5cc:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  81e5d0:	e0bffe17 	ldw	r2,-8(fp)
  81e5d4:	1004c03a 	cmpne	r2,r2,zero
  81e5d8:	103ff51e 	bne	r2,zero,81e5b0 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  81e5dc:	e037883a 	mov	sp,fp
  81e5e0:	df000017 	ldw	fp,0(sp)
  81e5e4:	dec00104 	addi	sp,sp,4
  81e5e8:	f800283a 	ret

0081e5ec <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  81e5ec:	defff904 	addi	sp,sp,-28
  81e5f0:	dfc00615 	stw	ra,24(sp)
  81e5f4:	df000515 	stw	fp,20(sp)
  81e5f8:	df000504 	addi	fp,sp,20
  81e5fc:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81e600:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81e604:	008020b4 	movhi	r2,130
  81e608:	109b1604 	addi	r2,r2,27736
  81e60c:	10800003 	ldbu	r2,0(r2)
  81e610:	10803fcc 	andi	r2,r2,255
  81e614:	1004c03a 	cmpne	r2,r2,zero
  81e618:	1000421e 	bne	r2,zero,81e724 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  81e61c:	e0bfff0b 	ldhu	r2,-4(fp)
  81e620:	1005003a 	cmpeq	r2,r2,zero
  81e624:	10003f1e 	bne	r2,zero,81e724 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81e628:	0005303a 	rdctl	r2,status
  81e62c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81e630:	e0fffc17 	ldw	r3,-16(fp)
  81e634:	00bfff84 	movi	r2,-2
  81e638:	1884703a 	and	r2,r3,r2
  81e63c:	1001703a 	wrctl	status,r2
  
  return context;
  81e640:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
  81e644:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  81e648:	008020b4 	movhi	r2,130
  81e64c:	109b1704 	addi	r2,r2,27740
  81e650:	10800017 	ldw	r2,0(r2)
  81e654:	10800d03 	ldbu	r2,52(r2)
  81e658:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  81e65c:	e13ffe03 	ldbu	r4,-8(fp)
  81e660:	e0fffe03 	ldbu	r3,-8(fp)
  81e664:	008020b4 	movhi	r2,130
  81e668:	109b1444 	addi	r2,r2,27729
  81e66c:	10c5883a 	add	r2,r2,r3
  81e670:	10800003 	ldbu	r2,0(r2)
  81e674:	1007883a 	mov	r3,r2
  81e678:	008020b4 	movhi	r2,130
  81e67c:	109b1704 	addi	r2,r2,27740
  81e680:	10800017 	ldw	r2,0(r2)
  81e684:	10800d43 	ldbu	r2,53(r2)
  81e688:	0084303a 	nor	r2,zero,r2
  81e68c:	1884703a 	and	r2,r3,r2
  81e690:	1007883a 	mov	r3,r2
  81e694:	008020b4 	movhi	r2,130
  81e698:	109b1444 	addi	r2,r2,27729
  81e69c:	1105883a 	add	r2,r2,r4
  81e6a0:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
  81e6a4:	e0fffe03 	ldbu	r3,-8(fp)
  81e6a8:	008020b4 	movhi	r2,130
  81e6ac:	109b1444 	addi	r2,r2,27729
  81e6b0:	10c5883a 	add	r2,r2,r3
  81e6b4:	10800003 	ldbu	r2,0(r2)
  81e6b8:	10803fcc 	andi	r2,r2,255
  81e6bc:	1004c03a 	cmpne	r2,r2,zero
  81e6c0:	10000e1e 	bne	r2,zero,81e6fc <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  81e6c4:	008020b4 	movhi	r2,130
  81e6c8:	109b1704 	addi	r2,r2,27740
  81e6cc:	10800017 	ldw	r2,0(r2)
  81e6d0:	10800d83 	ldbu	r2,54(r2)
  81e6d4:	0084303a 	nor	r2,zero,r2
  81e6d8:	1007883a 	mov	r3,r2
  81e6dc:	008020b4 	movhi	r2,130
  81e6e0:	109b1404 	addi	r2,r2,27728
  81e6e4:	10800003 	ldbu	r2,0(r2)
  81e6e8:	1884703a 	and	r2,r3,r2
  81e6ec:	1007883a 	mov	r3,r2
  81e6f0:	008020b4 	movhi	r2,130
  81e6f4:	109b1404 	addi	r2,r2,27728
  81e6f8:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  81e6fc:	008020b4 	movhi	r2,130
  81e700:	109b1704 	addi	r2,r2,27740
  81e704:	10c00017 	ldw	r3,0(r2)
  81e708:	e0bfff0b 	ldhu	r2,-4(fp)
  81e70c:	18800b8d 	sth	r2,46(r3)
  81e710:	e0bffd17 	ldw	r2,-12(fp)
  81e714:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81e718:	e0bffb17 	ldw	r2,-20(fp)
  81e71c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  81e720:	08182f80 	call	8182f8 <OS_Sched>
    }
}
  81e724:	e037883a 	mov	sp,fp
  81e728:	dfc00117 	ldw	ra,4(sp)
  81e72c:	df000017 	ldw	fp,0(sp)
  81e730:	dec00204 	addi	sp,sp,8
  81e734:	f800283a 	ret

0081e738 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  81e738:	defff604 	addi	sp,sp,-40
  81e73c:	dfc00915 	stw	ra,36(sp)
  81e740:	df000815 	stw	fp,32(sp)
  81e744:	dc000715 	stw	r16,28(sp)
  81e748:	df000704 	addi	fp,sp,28
  81e74c:	e13ffb05 	stb	r4,-20(fp)
  81e750:	e17ffc05 	stb	r5,-16(fp)
  81e754:	e1bffd05 	stb	r6,-12(fp)
  81e758:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81e75c:	008020b4 	movhi	r2,130
  81e760:	109b1604 	addi	r2,r2,27736
  81e764:	10800003 	ldbu	r2,0(r2)
  81e768:	10803fcc 	andi	r2,r2,255
  81e76c:	1005003a 	cmpeq	r2,r2,zero
  81e770:	1000031e 	bne	r2,zero,81e780 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  81e774:	00801544 	movi	r2,85
  81e778:	e0bfff15 	stw	r2,-4(fp)
  81e77c:	00004406 	br	81e890 <OSTimeDlyHMSM+0x158>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  81e780:	e0bffb03 	ldbu	r2,-20(fp)
  81e784:	1004c03a 	cmpne	r2,r2,zero
  81e788:	10000c1e 	bne	r2,zero,81e7bc <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
  81e78c:	e0bffc03 	ldbu	r2,-16(fp)
  81e790:	1004c03a 	cmpne	r2,r2,zero
  81e794:	1000091e 	bne	r2,zero,81e7bc <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
  81e798:	e0bffd03 	ldbu	r2,-12(fp)
  81e79c:	1004c03a 	cmpne	r2,r2,zero
  81e7a0:	1000061e 	bne	r2,zero,81e7bc <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
  81e7a4:	e0bffe0b 	ldhu	r2,-8(fp)
  81e7a8:	1004c03a 	cmpne	r2,r2,zero
  81e7ac:	1000031e 	bne	r2,zero,81e7bc <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
  81e7b0:	00801504 	movi	r2,84
  81e7b4:	e0bfff15 	stw	r2,-4(fp)
  81e7b8:	00003506 	br	81e890 <OSTimeDlyHMSM+0x158>
                }
            }
        }
    }
    if (minutes > 59) {
  81e7bc:	e0bffc03 	ldbu	r2,-16(fp)
  81e7c0:	10800f30 	cmpltui	r2,r2,60
  81e7c4:	1000031e 	bne	r2,zero,81e7d4 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  81e7c8:	00801444 	movi	r2,81
  81e7cc:	e0bfff15 	stw	r2,-4(fp)
  81e7d0:	00002f06 	br	81e890 <OSTimeDlyHMSM+0x158>
    }
    if (seconds > 59) {
  81e7d4:	e0bffd03 	ldbu	r2,-12(fp)
  81e7d8:	10800f30 	cmpltui	r2,r2,60
  81e7dc:	1000031e 	bne	r2,zero,81e7ec <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
  81e7e0:	00801484 	movi	r2,82
  81e7e4:	e0bfff15 	stw	r2,-4(fp)
  81e7e8:	00002906 	br	81e890 <OSTimeDlyHMSM+0x158>
    }
    if (ms > 999) {
  81e7ec:	e0bffe0b 	ldhu	r2,-8(fp)
  81e7f0:	1080fa30 	cmpltui	r2,r2,1000
  81e7f4:	1000031e 	bne	r2,zero,81e804 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
  81e7f8:	008014c4 	movi	r2,83
  81e7fc:	e0bfff15 	stw	r2,-4(fp)
  81e800:	00002306 	br	81e890 <OSTimeDlyHMSM+0x158>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  81e804:	e0bffb03 	ldbu	r2,-20(fp)
  81e808:	10c38424 	muli	r3,r2,3600
  81e80c:	e0bffc03 	ldbu	r2,-16(fp)
  81e810:	10800f24 	muli	r2,r2,60
  81e814:	1887883a 	add	r3,r3,r2
  81e818:	e0bffd03 	ldbu	r2,-12(fp)
  81e81c:	1885883a 	add	r2,r3,r2
  81e820:	1400fa24 	muli	r16,r2,1000
  81e824:	e0bffe0b 	ldhu	r2,-8(fp)
  81e828:	1100fa24 	muli	r4,r2,1000
  81e82c:	0140fa04 	movi	r5,1000
  81e830:	080cfd80 	call	80cfd8 <__udivsi3>
  81e834:	8085883a 	add	r2,r16,r2
  81e838:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  81e83c:	e0bffa17 	ldw	r2,-24(fp)
  81e840:	1004d43a 	srli	r2,r2,16
  81e844:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  81e848:	e0bffa17 	ldw	r2,-24(fp)
  81e84c:	10bfffcc 	andi	r2,r2,65535
  81e850:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  81e854:	e0bffa17 	ldw	r2,-24(fp)
  81e858:	113fffcc 	andi	r4,r2,65535
  81e85c:	081e5ec0 	call	81e5ec <OSTimeDly>
    while (loops > 0) {
  81e860:	00000706 	br	81e880 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
  81e864:	01200014 	movui	r4,32768
  81e868:	081e5ec0 	call	81e5ec <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  81e86c:	01200014 	movui	r4,32768
  81e870:	081e5ec0 	call	81e5ec <OSTimeDly>
        loops--;
  81e874:	e0bff90b 	ldhu	r2,-28(fp)
  81e878:	10bfffc4 	addi	r2,r2,-1
  81e87c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  81e880:	e0bff90b 	ldhu	r2,-28(fp)
  81e884:	1004c03a 	cmpne	r2,r2,zero
  81e888:	103ff61e 	bne	r2,zero,81e864 <OSTimeDlyHMSM+0x12c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  81e88c:	e03fff15 	stw	zero,-4(fp)
  81e890:	e0bfff17 	ldw	r2,-4(fp)
}
  81e894:	e037883a 	mov	sp,fp
  81e898:	dfc00217 	ldw	ra,8(sp)
  81e89c:	df000117 	ldw	fp,4(sp)
  81e8a0:	dc000017 	ldw	r16,0(sp)
  81e8a4:	dec00304 	addi	sp,sp,12
  81e8a8:	f800283a 	ret

0081e8ac <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  81e8ac:	defff404 	addi	sp,sp,-48
  81e8b0:	dfc00b15 	stw	ra,44(sp)
  81e8b4:	df000a15 	stw	fp,40(sp)
  81e8b8:	df000a04 	addi	fp,sp,40
  81e8bc:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81e8c0:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  81e8c4:	e0bffe03 	ldbu	r2,-8(fp)
  81e8c8:	10800530 	cmpltui	r2,r2,20
  81e8cc:	1000031e 	bne	r2,zero,81e8dc <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  81e8d0:	00800a84 	movi	r2,42
  81e8d4:	e0bfff15 	stw	r2,-4(fp)
  81e8d8:	00007206 	br	81eaa4 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81e8dc:	0005303a 	rdctl	r2,status
  81e8e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81e8e4:	e0fffb17 	ldw	r3,-20(fp)
  81e8e8:	00bfff84 	movi	r2,-2
  81e8ec:	1884703a 	and	r2,r3,r2
  81e8f0:	1001703a 	wrctl	status,r2
  
  return context;
  81e8f4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  81e8f8:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  81e8fc:	e0bffe03 	ldbu	r2,-8(fp)
  81e900:	00c020f4 	movhi	r3,131
  81e904:	18c02f04 	addi	r3,r3,188
  81e908:	1085883a 	add	r2,r2,r2
  81e90c:	1085883a 	add	r2,r2,r2
  81e910:	10c5883a 	add	r2,r2,r3
  81e914:	10800017 	ldw	r2,0(r2)
  81e918:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
  81e91c:	e0bffd17 	ldw	r2,-12(fp)
  81e920:	1004c03a 	cmpne	r2,r2,zero
  81e924:	1000071e 	bne	r2,zero,81e944 <OSTimeDlyResume+0x98>
  81e928:	e0bffc17 	ldw	r2,-16(fp)
  81e92c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81e930:	e0bffa17 	ldw	r2,-24(fp)
  81e934:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  81e938:	008010c4 	movi	r2,67
  81e93c:	e0bfff15 	stw	r2,-4(fp)
  81e940:	00005806 	br	81eaa4 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  81e944:	e0bffd17 	ldw	r2,-12(fp)
  81e948:	10800058 	cmpnei	r2,r2,1
  81e94c:	1000071e 	bne	r2,zero,81e96c <OSTimeDlyResume+0xc0>
  81e950:	e0bffc17 	ldw	r2,-16(fp)
  81e954:	e0bff915 	stw	r2,-28(fp)
  81e958:	e0bff917 	ldw	r2,-28(fp)
  81e95c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  81e960:	008010c4 	movi	r2,67
  81e964:	e0bfff15 	stw	r2,-4(fp)
  81e968:	00004e06 	br	81eaa4 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  81e96c:	e0bffd17 	ldw	r2,-12(fp)
  81e970:	10800b8b 	ldhu	r2,46(r2)
  81e974:	10bfffcc 	andi	r2,r2,65535
  81e978:	1004c03a 	cmpne	r2,r2,zero
  81e97c:	1000071e 	bne	r2,zero,81e99c <OSTimeDlyResume+0xf0>
  81e980:	e0bffc17 	ldw	r2,-16(fp)
  81e984:	e0bff815 	stw	r2,-32(fp)
  81e988:	e0bff817 	ldw	r2,-32(fp)
  81e98c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  81e990:	00801404 	movi	r2,80
  81e994:	e0bfff15 	stw	r2,-4(fp)
  81e998:	00004206 	br	81eaa4 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  81e99c:	e0bffd17 	ldw	r2,-12(fp)
  81e9a0:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  81e9a4:	e0bffd17 	ldw	r2,-12(fp)
  81e9a8:	10800c03 	ldbu	r2,48(r2)
  81e9ac:	10803fcc 	andi	r2,r2,255
  81e9b0:	10800dcc 	andi	r2,r2,55
  81e9b4:	1005003a 	cmpeq	r2,r2,zero
  81e9b8:	10000b1e 	bne	r2,zero,81e9e8 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  81e9bc:	e0bffd17 	ldw	r2,-12(fp)
  81e9c0:	10c00c03 	ldbu	r3,48(r2)
  81e9c4:	00bff204 	movi	r2,-56
  81e9c8:	1884703a 	and	r2,r3,r2
  81e9cc:	1007883a 	mov	r3,r2
  81e9d0:	e0bffd17 	ldw	r2,-12(fp)
  81e9d4:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  81e9d8:	e0fffd17 	ldw	r3,-12(fp)
  81e9dc:	00800044 	movi	r2,1
  81e9e0:	18800c45 	stb	r2,49(r3)
  81e9e4:	00000206 	br	81e9f0 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  81e9e8:	e0bffd17 	ldw	r2,-12(fp)
  81e9ec:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  81e9f0:	e0bffd17 	ldw	r2,-12(fp)
  81e9f4:	10800c03 	ldbu	r2,48(r2)
  81e9f8:	10803fcc 	andi	r2,r2,255
  81e9fc:	1080020c 	andi	r2,r2,8
  81ea00:	1004c03a 	cmpne	r2,r2,zero
  81ea04:	1000221e 	bne	r2,zero,81ea90 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  81ea08:	e0bffd17 	ldw	r2,-12(fp)
  81ea0c:	10c00d83 	ldbu	r3,54(r2)
  81ea10:	008020b4 	movhi	r2,130
  81ea14:	109b1404 	addi	r2,r2,27728
  81ea18:	10800003 	ldbu	r2,0(r2)
  81ea1c:	1884b03a 	or	r2,r3,r2
  81ea20:	1007883a 	mov	r3,r2
  81ea24:	008020b4 	movhi	r2,130
  81ea28:	109b1404 	addi	r2,r2,27728
  81ea2c:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  81ea30:	e0bffd17 	ldw	r2,-12(fp)
  81ea34:	10800d03 	ldbu	r2,52(r2)
  81ea38:	11003fcc 	andi	r4,r2,255
  81ea3c:	e0bffd17 	ldw	r2,-12(fp)
  81ea40:	10800d03 	ldbu	r2,52(r2)
  81ea44:	10c03fcc 	andi	r3,r2,255
  81ea48:	008020b4 	movhi	r2,130
  81ea4c:	109b1444 	addi	r2,r2,27729
  81ea50:	10c5883a 	add	r2,r2,r3
  81ea54:	10c00003 	ldbu	r3,0(r2)
  81ea58:	e0bffd17 	ldw	r2,-12(fp)
  81ea5c:	10800d43 	ldbu	r2,53(r2)
  81ea60:	1884b03a 	or	r2,r3,r2
  81ea64:	1007883a 	mov	r3,r2
  81ea68:	008020b4 	movhi	r2,130
  81ea6c:	109b1444 	addi	r2,r2,27729
  81ea70:	1105883a 	add	r2,r2,r4
  81ea74:	10c00005 	stb	r3,0(r2)
  81ea78:	e0bffc17 	ldw	r2,-16(fp)
  81ea7c:	e0bff715 	stw	r2,-36(fp)
  81ea80:	e0bff717 	ldw	r2,-36(fp)
  81ea84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  81ea88:	08182f80 	call	8182f8 <OS_Sched>
  81ea8c:	00000406 	br	81eaa0 <OSTimeDlyResume+0x1f4>
  81ea90:	e0bffc17 	ldw	r2,-16(fp)
  81ea94:	e0bff615 	stw	r2,-40(fp)
  81ea98:	e0bff617 	ldw	r2,-40(fp)
  81ea9c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  81eaa0:	e03fff15 	stw	zero,-4(fp)
  81eaa4:	e0bfff17 	ldw	r2,-4(fp)
}
  81eaa8:	e037883a 	mov	sp,fp
  81eaac:	dfc00117 	ldw	ra,4(sp)
  81eab0:	df000017 	ldw	fp,0(sp)
  81eab4:	dec00204 	addi	sp,sp,8
  81eab8:	f800283a 	ret

0081eabc <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  81eabc:	defffb04 	addi	sp,sp,-20
  81eac0:	df000415 	stw	fp,16(sp)
  81eac4:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81eac8:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81eacc:	0005303a 	rdctl	r2,status
  81ead0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ead4:	e0fffd17 	ldw	r3,-12(fp)
  81ead8:	00bfff84 	movi	r2,-2
  81eadc:	1884703a 	and	r2,r3,r2
  81eae0:	1001703a 	wrctl	status,r2
  
  return context;
  81eae4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  81eae8:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
  81eaec:	008020b4 	movhi	r2,130
  81eaf0:	109b1804 	addi	r2,r2,27744
  81eaf4:	10800017 	ldw	r2,0(r2)
  81eaf8:	e0bfff15 	stw	r2,-4(fp)
  81eafc:	e0bffe17 	ldw	r2,-8(fp)
  81eb00:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81eb04:	e0bffc17 	ldw	r2,-16(fp)
  81eb08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  81eb0c:	e0bfff17 	ldw	r2,-4(fp)
}
  81eb10:	e037883a 	mov	sp,fp
  81eb14:	df000017 	ldw	fp,0(sp)
  81eb18:	dec00104 	addi	sp,sp,4
  81eb1c:	f800283a 	ret

0081eb20 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  81eb20:	defffb04 	addi	sp,sp,-20
  81eb24:	df000415 	stw	fp,16(sp)
  81eb28:	df000404 	addi	fp,sp,16
  81eb2c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81eb30:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81eb34:	0005303a 	rdctl	r2,status
  81eb38:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81eb3c:	e0fffd17 	ldw	r3,-12(fp)
  81eb40:	00bfff84 	movi	r2,-2
  81eb44:	1884703a 	and	r2,r3,r2
  81eb48:	1001703a 	wrctl	status,r2
  
  return context;
  81eb4c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  81eb50:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
  81eb54:	00c020b4 	movhi	r3,130
  81eb58:	18db1804 	addi	r3,r3,27744
  81eb5c:	e0bfff17 	ldw	r2,-4(fp)
  81eb60:	18800015 	stw	r2,0(r3)
  81eb64:	e0bffe17 	ldw	r2,-8(fp)
  81eb68:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81eb6c:	e0bffc17 	ldw	r2,-16(fp)
  81eb70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  81eb74:	e037883a 	mov	sp,fp
  81eb78:	df000017 	ldw	fp,0(sp)
  81eb7c:	dec00104 	addi	sp,sp,4
  81eb80:	f800283a 	ret

0081eb84 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  81eb84:	defffd04 	addi	sp,sp,-12
  81eb88:	dfc00215 	stw	ra,8(sp)
  81eb8c:	df000115 	stw	fp,4(sp)
  81eb90:	df000104 	addi	fp,sp,4
  81eb94:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  81eb98:	0821b340 	call	821b34 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  81eb9c:	00800044 	movi	r2,1
  81eba0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  81eba4:	e037883a 	mov	sp,fp
  81eba8:	dfc00117 	ldw	ra,4(sp)
  81ebac:	df000017 	ldw	fp,0(sp)
  81ebb0:	dec00204 	addi	sp,sp,8
  81ebb4:	f800283a 	ret

0081ebb8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  81ebb8:	defffe04 	addi	sp,sp,-8
  81ebbc:	dfc00115 	stw	ra,4(sp)
  81ebc0:	df000015 	stw	fp,0(sp)
  81ebc4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  81ebc8:	01004474 	movhi	r4,273
  81ebcc:	21241004 	addi	r4,r4,-28608
  81ebd0:	000b883a 	mov	r5,zero
  81ebd4:	000d883a 	mov	r6,zero
  81ebd8:	01c0fa04 	movi	r7,1000
  81ebdc:	081fa480 	call	81fa48 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  81ebe0:	010020b4 	movhi	r4,130
  81ebe4:	210fb504 	addi	r4,r4,16084
  81ebe8:	000b883a 	mov	r5,zero
  81ebec:	01800044 	movi	r6,1
  81ebf0:	081edc40 	call	81edc4 <altera_avalon_jtag_uart_init>
  81ebf4:	010020b4 	movhi	r4,130
  81ebf8:	210fab04 	addi	r4,r4,16044
  81ebfc:	081ec440 	call	81ec44 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SD_CARD_SPI_MASTER, sd_card_spi_master);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
  81ec00:	010020b4 	movhi	r4,130
  81ec04:	2113c604 	addi	r4,r4,20248
  81ec08:	081ec440 	call	81ec44 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
  81ec0c:	010020b4 	movhi	r4,130
  81ec10:	2113d204 	addi	r4,r4,20296
  81ec14:	081ec440 	call	81ec44 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  81ec18:	010020b4 	movhi	r4,130
  81ec1c:	2113de04 	addi	r4,r4,20344
  81ec20:	0820b140 	call	820b14 <alt_up_character_lcd_init>
  81ec24:	010020b4 	movhi	r4,130
  81ec28:	2113de04 	addi	r4,r4,20344
  81ec2c:	081ec440 	call	81ec44 <alt_dev_reg>
}
  81ec30:	e037883a 	mov	sp,fp
  81ec34:	dfc00117 	ldw	ra,4(sp)
  81ec38:	df000017 	ldw	fp,0(sp)
  81ec3c:	dec00204 	addi	sp,sp,8
  81ec40:	f800283a 	ret

0081ec44 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  81ec44:	defffd04 	addi	sp,sp,-12
  81ec48:	dfc00215 	stw	ra,8(sp)
  81ec4c:	df000115 	stw	fp,4(sp)
  81ec50:	df000104 	addi	fp,sp,4
  81ec54:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  81ec58:	e13fff17 	ldw	r4,-4(fp)
  81ec5c:	014020b4 	movhi	r5,130
  81ec60:	2953f104 	addi	r5,r5,20420
  81ec64:	082112c0 	call	82112c <alt_dev_llist_insert>
}
  81ec68:	e037883a 	mov	sp,fp
  81ec6c:	dfc00117 	ldw	ra,4(sp)
  81ec70:	df000017 	ldw	fp,0(sp)
  81ec74:	dec00204 	addi	sp,sp,8
  81ec78:	f800283a 	ret

0081ec7c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  81ec7c:	defffa04 	addi	sp,sp,-24
  81ec80:	dfc00515 	stw	ra,20(sp)
  81ec84:	df000415 	stw	fp,16(sp)
  81ec88:	df000404 	addi	fp,sp,16
  81ec8c:	e13ffd15 	stw	r4,-12(fp)
  81ec90:	e17ffe15 	stw	r5,-8(fp)
  81ec94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81ec98:	e0bffd17 	ldw	r2,-12(fp)
  81ec9c:	10800017 	ldw	r2,0(r2)
  81eca0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  81eca4:	e0bffc17 	ldw	r2,-16(fp)
  81eca8:	11000a04 	addi	r4,r2,40
  81ecac:	e0bffd17 	ldw	r2,-12(fp)
  81ecb0:	11c00217 	ldw	r7,8(r2)
  81ecb4:	e17ffe17 	ldw	r5,-8(fp)
  81ecb8:	e1bfff17 	ldw	r6,-4(fp)
  81ecbc:	081f4380 	call	81f438 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  81ecc0:	e037883a 	mov	sp,fp
  81ecc4:	dfc00117 	ldw	ra,4(sp)
  81ecc8:	df000017 	ldw	fp,0(sp)
  81eccc:	dec00204 	addi	sp,sp,8
  81ecd0:	f800283a 	ret

0081ecd4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  81ecd4:	defffa04 	addi	sp,sp,-24
  81ecd8:	dfc00515 	stw	ra,20(sp)
  81ecdc:	df000415 	stw	fp,16(sp)
  81ece0:	df000404 	addi	fp,sp,16
  81ece4:	e13ffd15 	stw	r4,-12(fp)
  81ece8:	e17ffe15 	stw	r5,-8(fp)
  81ecec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81ecf0:	e0bffd17 	ldw	r2,-12(fp)
  81ecf4:	10800017 	ldw	r2,0(r2)
  81ecf8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  81ecfc:	e0bffc17 	ldw	r2,-16(fp)
  81ed00:	11000a04 	addi	r4,r2,40
  81ed04:	e0bffd17 	ldw	r2,-12(fp)
  81ed08:	11c00217 	ldw	r7,8(r2)
  81ed0c:	e17ffe17 	ldw	r5,-8(fp)
  81ed10:	e1bfff17 	ldw	r6,-4(fp)
  81ed14:	081f6f80 	call	81f6f8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  81ed18:	e037883a 	mov	sp,fp
  81ed1c:	dfc00117 	ldw	ra,4(sp)
  81ed20:	df000017 	ldw	fp,0(sp)
  81ed24:	dec00204 	addi	sp,sp,8
  81ed28:	f800283a 	ret

0081ed2c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  81ed2c:	defffc04 	addi	sp,sp,-16
  81ed30:	dfc00315 	stw	ra,12(sp)
  81ed34:	df000215 	stw	fp,8(sp)
  81ed38:	df000204 	addi	fp,sp,8
  81ed3c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81ed40:	e0bfff17 	ldw	r2,-4(fp)
  81ed44:	10800017 	ldw	r2,0(r2)
  81ed48:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  81ed4c:	e0bffe17 	ldw	r2,-8(fp)
  81ed50:	11000a04 	addi	r4,r2,40
  81ed54:	e0bfff17 	ldw	r2,-4(fp)
  81ed58:	11400217 	ldw	r5,8(r2)
  81ed5c:	081f2d00 	call	81f2d0 <altera_avalon_jtag_uart_close>
}
  81ed60:	e037883a 	mov	sp,fp
  81ed64:	dfc00117 	ldw	ra,4(sp)
  81ed68:	df000017 	ldw	fp,0(sp)
  81ed6c:	dec00204 	addi	sp,sp,8
  81ed70:	f800283a 	ret

0081ed74 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  81ed74:	defffa04 	addi	sp,sp,-24
  81ed78:	dfc00515 	stw	ra,20(sp)
  81ed7c:	df000415 	stw	fp,16(sp)
  81ed80:	df000404 	addi	fp,sp,16
  81ed84:	e13ffd15 	stw	r4,-12(fp)
  81ed88:	e17ffe15 	stw	r5,-8(fp)
  81ed8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  81ed90:	e0bffd17 	ldw	r2,-12(fp)
  81ed94:	10800017 	ldw	r2,0(r2)
  81ed98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  81ed9c:	e0bffc17 	ldw	r2,-16(fp)
  81eda0:	11000a04 	addi	r4,r2,40
  81eda4:	e17ffe17 	ldw	r5,-8(fp)
  81eda8:	e1bfff17 	ldw	r6,-4(fp)
  81edac:	081f3440 	call	81f344 <altera_avalon_jtag_uart_ioctl>
}
  81edb0:	e037883a 	mov	sp,fp
  81edb4:	dfc00117 	ldw	ra,4(sp)
  81edb8:	df000017 	ldw	fp,0(sp)
  81edbc:	dec00204 	addi	sp,sp,8
  81edc0:	f800283a 	ret

0081edc4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  81edc4:	defff504 	addi	sp,sp,-44
  81edc8:	dfc00a15 	stw	ra,40(sp)
  81edcc:	df000915 	stw	fp,36(sp)
  81edd0:	df000904 	addi	fp,sp,36
  81edd4:	e13ffd15 	stw	r4,-12(fp)
  81edd8:	e17ffe15 	stw	r5,-8(fp)
  81eddc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  81ede0:	e0bffd17 	ldw	r2,-12(fp)
  81ede4:	10800c04 	addi	r2,r2,48
  81ede8:	e0bffb15 	stw	r2,-20(fp)
  81edec:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  81edf0:	e13ffc0b 	ldhu	r4,-16(fp)
  81edf4:	e17ffc84 	addi	r5,fp,-14
  81edf8:	0818ea00 	call	818ea0 <OSFlagCreate>
  81edfc:	1007883a 	mov	r3,r2
  81ee00:	e0bffb17 	ldw	r2,-20(fp)
  81ee04:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  81ee08:	e0bffd17 	ldw	r2,-12(fp)
  81ee0c:	10800a04 	addi	r2,r2,40
  81ee10:	e0bff915 	stw	r2,-28(fp)
  81ee14:	00800044 	movi	r2,1
  81ee18:	e0bffa0d 	sth	r2,-24(fp)
  81ee1c:	e13ffa0b 	ldhu	r4,-24(fp)
  81ee20:	081c0a40 	call	81c0a4 <OSSemCreate>
  81ee24:	1007883a 	mov	r3,r2
  81ee28:	e0bff917 	ldw	r2,-28(fp)
  81ee2c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  81ee30:	e0bffd17 	ldw	r2,-12(fp)
  81ee34:	10800b04 	addi	r2,r2,44
  81ee38:	e0bff715 	stw	r2,-36(fp)
  81ee3c:	00800044 	movi	r2,1
  81ee40:	e0bff80d 	sth	r2,-32(fp)
  81ee44:	e13ff80b 	ldhu	r4,-32(fp)
  81ee48:	081c0a40 	call	81c0a4 <OSSemCreate>
  81ee4c:	1007883a 	mov	r3,r2
  81ee50:	e0bff717 	ldw	r2,-36(fp)
  81ee54:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81ee58:	e0fffd17 	ldw	r3,-12(fp)
  81ee5c:	00800044 	movi	r2,1
  81ee60:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  81ee64:	e0bffd17 	ldw	r2,-12(fp)
  81ee68:	10800017 	ldw	r2,0(r2)
  81ee6c:	11000104 	addi	r4,r2,4
  81ee70:	e0bffd17 	ldw	r2,-12(fp)
  81ee74:	10800817 	ldw	r2,32(r2)
  81ee78:	1007883a 	mov	r3,r2
  81ee7c:	2005883a 	mov	r2,r4
  81ee80:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  81ee84:	e13fff17 	ldw	r4,-4(fp)
  81ee88:	e17ffd17 	ldw	r5,-12(fp)
  81ee8c:	018020b4 	movhi	r6,130
  81ee90:	31bbbd04 	addi	r6,r6,-4364
  81ee94:	08215080 	call	821508 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  81ee98:	e0bffd17 	ldw	r2,-12(fp)
  81ee9c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  81eea0:	e0bffd17 	ldw	r2,-12(fp)
  81eea4:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  81eea8:	008020b4 	movhi	r2,130
  81eeac:	109b1d04 	addi	r2,r2,27764
  81eeb0:	10800017 	ldw	r2,0(r2)
  81eeb4:	100b883a 	mov	r5,r2
  81eeb8:	018020b4 	movhi	r6,130
  81eebc:	31bc6f04 	addi	r6,r6,-3652
  81eec0:	e1fffd17 	ldw	r7,-12(fp)
  81eec4:	0820f940 	call	820f94 <alt_alarm_start>
  81eec8:	1004403a 	cmpge	r2,r2,zero
  81eecc:	1000041e 	bne	r2,zero,81eee0 <altera_avalon_jtag_uart_init+0x11c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  81eed0:	e0fffd17 	ldw	r3,-12(fp)
  81eed4:	00a00034 	movhi	r2,32768
  81eed8:	10bfffc4 	addi	r2,r2,-1
  81eedc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  81eee0:	e037883a 	mov	sp,fp
  81eee4:	dfc00117 	ldw	ra,4(sp)
  81eee8:	df000017 	ldw	fp,0(sp)
  81eeec:	dec00204 	addi	sp,sp,8
  81eef0:	f800283a 	ret

0081eef4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  81eef4:	defff104 	addi	sp,sp,-60
  81eef8:	dfc00e15 	stw	ra,56(sp)
  81eefc:	df000d15 	stw	fp,52(sp)
  81ef00:	df000d04 	addi	fp,sp,52
  81ef04:	e13ffe15 	stw	r4,-8(fp)
  81ef08:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  81ef0c:	e0bffe17 	ldw	r2,-8(fp)
  81ef10:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
  81ef14:	e0bffc17 	ldw	r2,-16(fp)
  81ef18:	10800017 	ldw	r2,0(r2)
  81ef1c:	e0bffb15 	stw	r2,-20(fp)
  81ef20:	00000006 	br	81ef24 <altera_avalon_jtag_uart_irq+0x30>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  81ef24:	e0bffb17 	ldw	r2,-20(fp)
  81ef28:	10800104 	addi	r2,r2,4
  81ef2c:	10800037 	ldwio	r2,0(r2)
  81ef30:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  81ef34:	e0bffa17 	ldw	r2,-24(fp)
  81ef38:	1080c00c 	andi	r2,r2,768
  81ef3c:	1005003a 	cmpeq	r2,r2,zero
  81ef40:	1000991e 	bne	r2,zero,81f1a8 <altera_avalon_jtag_uart_irq+0x2b4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  81ef44:	e0bffa17 	ldw	r2,-24(fp)
  81ef48:	1080400c 	andi	r2,r2,256
  81ef4c:	1005003a 	cmpeq	r2,r2,zero
  81ef50:	1000481e 	bne	r2,zero,81f074 <altera_avalon_jtag_uart_irq+0x180>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  81ef54:	00800074 	movhi	r2,1
  81ef58:	e0bff915 	stw	r2,-28(fp)
  81ef5c:	00000006 	br	81ef60 <altera_avalon_jtag_uart_irq+0x6c>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81ef60:	e0bffc17 	ldw	r2,-16(fp)
  81ef64:	10800d17 	ldw	r2,52(r2)
  81ef68:	10800044 	addi	r2,r2,1
  81ef6c:	1081ffcc 	andi	r2,r2,2047
  81ef70:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
  81ef74:	e0bffc17 	ldw	r2,-16(fp)
  81ef78:	10c00e17 	ldw	r3,56(r2)
  81ef7c:	e0bff817 	ldw	r2,-32(fp)
  81ef80:	18802826 	beq	r3,r2,81f024 <altera_avalon_jtag_uart_irq+0x130>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  81ef84:	e0bffb17 	ldw	r2,-20(fp)
  81ef88:	10800037 	ldwio	r2,0(r2)
  81ef8c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  81ef90:	e0bff917 	ldw	r2,-28(fp)
  81ef94:	10a0000c 	andi	r2,r2,32768
  81ef98:	1005003a 	cmpeq	r2,r2,zero
  81ef9c:	1000211e 	bne	r2,zero,81f024 <altera_avalon_jtag_uart_irq+0x130>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  81efa0:	e0bffc17 	ldw	r2,-16(fp)
  81efa4:	10c00d17 	ldw	r3,52(r2)
  81efa8:	e0bff917 	ldw	r2,-28(fp)
  81efac:	1009883a 	mov	r4,r2
  81efb0:	e0bffc17 	ldw	r2,-16(fp)
  81efb4:	1885883a 	add	r2,r3,r2
  81efb8:	10801104 	addi	r2,r2,68
  81efbc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81efc0:	e0bffc17 	ldw	r2,-16(fp)
  81efc4:	10800d17 	ldw	r2,52(r2)
  81efc8:	10800044 	addi	r2,r2,1
  81efcc:	10c1ffcc 	andi	r3,r2,2047
  81efd0:	e0bffc17 	ldw	r2,-16(fp)
  81efd4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  81efd8:	e0bffc17 	ldw	r2,-16(fp)
  81efdc:	10800c17 	ldw	r2,48(r2)
  81efe0:	e0bff515 	stw	r2,-44(fp)
  81efe4:	00800044 	movi	r2,1
  81efe8:	e0bff60d 	sth	r2,-40(fp)
  81efec:	00800044 	movi	r2,1
  81eff0:	e0bff685 	stb	r2,-38(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  81eff4:	008020b4 	movhi	r2,130
  81eff8:	109b0844 	addi	r2,r2,27681
  81effc:	10800003 	ldbu	r2,0(r2)
  81f000:	10803fcc 	andi	r2,r2,255
  81f004:	1005003a 	cmpeq	r2,r2,zero
  81f008:	103fd51e 	bne	r2,zero,81ef60 <altera_avalon_jtag_uart_irq+0x6c>
  {
    OSFlagPost (group, flags, opt, &err);
  81f00c:	e17ff60b 	ldhu	r5,-40(fp)
  81f010:	e1bff683 	ldbu	r6,-38(fp)
  81f014:	e1fffd04 	addi	r7,fp,-12
  81f018:	e13ff517 	ldw	r4,-44(fp)
  81f01c:	0819bc80 	call	819bc8 <OSFlagPost>
    return err;
  81f020:	003fcf06 	br	81ef60 <altera_avalon_jtag_uart_irq+0x6c>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  81f024:	e0bff917 	ldw	r2,-28(fp)
  81f028:	10bfffec 	andhi	r2,r2,65535
  81f02c:	1005003a 	cmpeq	r2,r2,zero
  81f030:	1000101e 	bne	r2,zero,81f074 <altera_avalon_jtag_uart_irq+0x180>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81f034:	e0bffc17 	ldw	r2,-16(fp)
  81f038:	10c00817 	ldw	r3,32(r2)
  81f03c:	00bfff84 	movi	r2,-2
  81f040:	1886703a 	and	r3,r3,r2
  81f044:	e0bffc17 	ldw	r2,-16(fp)
  81f048:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  81f04c:	e0bffb17 	ldw	r2,-20(fp)
  81f050:	11000104 	addi	r4,r2,4
  81f054:	e0bffc17 	ldw	r2,-16(fp)
  81f058:	10800817 	ldw	r2,32(r2)
  81f05c:	1007883a 	mov	r3,r2
  81f060:	2005883a 	mov	r2,r4
  81f064:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  81f068:	e0bffb17 	ldw	r2,-20(fp)
  81f06c:	10800104 	addi	r2,r2,4
  81f070:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  81f074:	e0bffa17 	ldw	r2,-24(fp)
  81f078:	1080800c 	andi	r2,r2,512
  81f07c:	1005003a 	cmpeq	r2,r2,zero
  81f080:	103fa81e 	bne	r2,zero,81ef24 <altera_avalon_jtag_uart_irq+0x30>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  81f084:	e0bffa17 	ldw	r2,-24(fp)
  81f088:	10bfffec 	andhi	r2,r2,65535
  81f08c:	1004d43a 	srli	r2,r2,16
  81f090:	e0bff715 	stw	r2,-36(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  81f094:	00002706 	br	81f134 <altera_avalon_jtag_uart_irq+0x240>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  81f098:	e13ffb17 	ldw	r4,-20(fp)
  81f09c:	e0bffc17 	ldw	r2,-16(fp)
  81f0a0:	10c01017 	ldw	r3,64(r2)
  81f0a4:	e0bffc17 	ldw	r2,-16(fp)
  81f0a8:	1885883a 	add	r2,r3,r2
  81f0ac:	10821104 	addi	r2,r2,2116
  81f0b0:	10800003 	ldbu	r2,0(r2)
  81f0b4:	10c03fcc 	andi	r3,r2,255
  81f0b8:	18c0201c 	xori	r3,r3,128
  81f0bc:	18ffe004 	addi	r3,r3,-128
  81f0c0:	2005883a 	mov	r2,r4
  81f0c4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81f0c8:	e0bffc17 	ldw	r2,-16(fp)
  81f0cc:	10801017 	ldw	r2,64(r2)
  81f0d0:	10800044 	addi	r2,r2,1
  81f0d4:	10c1ffcc 	andi	r3,r2,2047
  81f0d8:	e0bffc17 	ldw	r2,-16(fp)
  81f0dc:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  81f0e0:	e0bffc17 	ldw	r2,-16(fp)
  81f0e4:	10800c17 	ldw	r2,48(r2)
  81f0e8:	e0bff315 	stw	r2,-52(fp)
  81f0ec:	00800084 	movi	r2,2
  81f0f0:	e0bff40d 	sth	r2,-48(fp)
  81f0f4:	00800044 	movi	r2,1
  81f0f8:	e0bff485 	stb	r2,-46(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  81f0fc:	008020b4 	movhi	r2,130
  81f100:	109b0844 	addi	r2,r2,27681
  81f104:	10800003 	ldbu	r2,0(r2)
  81f108:	10803fcc 	andi	r2,r2,255
  81f10c:	1005003a 	cmpeq	r2,r2,zero
  81f110:	1000051e 	bne	r2,zero,81f128 <altera_avalon_jtag_uart_irq+0x234>
  {
    OSFlagPost (group, flags, opt, &err);
  81f114:	e17ff40b 	ldhu	r5,-48(fp)
  81f118:	e1bff483 	ldbu	r6,-46(fp)
  81f11c:	e1fffd44 	addi	r7,fp,-11
  81f120:	e13ff317 	ldw	r4,-52(fp)
  81f124:	0819bc80 	call	819bc8 <OSFlagPost>

        space--;
  81f128:	e0bff717 	ldw	r2,-36(fp)
  81f12c:	10bfffc4 	addi	r2,r2,-1
  81f130:	e0bff715 	stw	r2,-36(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  81f134:	e0bff717 	ldw	r2,-36(fp)
  81f138:	1005003a 	cmpeq	r2,r2,zero
  81f13c:	1000051e 	bne	r2,zero,81f154 <altera_avalon_jtag_uart_irq+0x260>
  81f140:	e0bffc17 	ldw	r2,-16(fp)
  81f144:	10c01017 	ldw	r3,64(r2)
  81f148:	e0bffc17 	ldw	r2,-16(fp)
  81f14c:	10800f17 	ldw	r2,60(r2)
  81f150:	18bfd11e 	bne	r3,r2,81f098 <altera_avalon_jtag_uart_irq+0x1a4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  81f154:	e0bff717 	ldw	r2,-36(fp)
  81f158:	1005003a 	cmpeq	r2,r2,zero
  81f15c:	103f711e 	bne	r2,zero,81ef24 <altera_avalon_jtag_uart_irq+0x30>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  81f160:	e0bffc17 	ldw	r2,-16(fp)
  81f164:	10c00817 	ldw	r3,32(r2)
  81f168:	00bfff44 	movi	r2,-3
  81f16c:	1886703a 	and	r3,r3,r2
  81f170:	e0bffc17 	ldw	r2,-16(fp)
  81f174:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81f178:	e0bffc17 	ldw	r2,-16(fp)
  81f17c:	10800017 	ldw	r2,0(r2)
  81f180:	11000104 	addi	r4,r2,4
  81f184:	e0bffc17 	ldw	r2,-16(fp)
  81f188:	10800817 	ldw	r2,32(r2)
  81f18c:	1007883a 	mov	r3,r2
  81f190:	2005883a 	mov	r2,r4
  81f194:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  81f198:	e0bffb17 	ldw	r2,-20(fp)
  81f19c:	10800104 	addi	r2,r2,4
  81f1a0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  81f1a4:	003f5f06 	br	81ef24 <altera_avalon_jtag_uart_irq+0x30>
}
  81f1a8:	e037883a 	mov	sp,fp
  81f1ac:	dfc00117 	ldw	ra,4(sp)
  81f1b0:	df000017 	ldw	fp,0(sp)
  81f1b4:	dec00204 	addi	sp,sp,8
  81f1b8:	f800283a 	ret

0081f1bc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  81f1bc:	defff804 	addi	sp,sp,-32
  81f1c0:	dfc00715 	stw	ra,28(sp)
  81f1c4:	df000615 	stw	fp,24(sp)
  81f1c8:	df000604 	addi	fp,sp,24
  81f1cc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  81f1d0:	e0bfff17 	ldw	r2,-4(fp)
  81f1d4:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  81f1d8:	e0bffd17 	ldw	r2,-12(fp)
  81f1dc:	10800017 	ldw	r2,0(r2)
  81f1e0:	10800104 	addi	r2,r2,4
  81f1e4:	10800037 	ldwio	r2,0(r2)
  81f1e8:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  81f1ec:	e0bffc17 	ldw	r2,-16(fp)
  81f1f0:	1081000c 	andi	r2,r2,1024
  81f1f4:	1005003a 	cmpeq	r2,r2,zero
  81f1f8:	10000c1e 	bne	r2,zero,81f22c <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  81f1fc:	e0bffd17 	ldw	r2,-12(fp)
  81f200:	10800017 	ldw	r2,0(r2)
  81f204:	11000104 	addi	r4,r2,4
  81f208:	e0bffd17 	ldw	r2,-12(fp)
  81f20c:	10800817 	ldw	r2,32(r2)
  81f210:	10810014 	ori	r2,r2,1024
  81f214:	1007883a 	mov	r3,r2
  81f218:	2005883a 	mov	r2,r4
  81f21c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  81f220:	e0bffd17 	ldw	r2,-12(fp)
  81f224:	10000915 	stw	zero,36(r2)
  81f228:	00002106 	br	81f2b0 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  81f22c:	e0bffd17 	ldw	r2,-12(fp)
  81f230:	10c00917 	ldw	r3,36(r2)
  81f234:	00a00034 	movhi	r2,32768
  81f238:	10bfff04 	addi	r2,r2,-4
  81f23c:	10c01c36 	bltu	r2,r3,81f2b0 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
  81f240:	e0bffd17 	ldw	r2,-12(fp)
  81f244:	10800917 	ldw	r2,36(r2)
  81f248:	10c00044 	addi	r3,r2,1
  81f24c:	e0bffd17 	ldw	r2,-12(fp)
  81f250:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  81f254:	e0bffd17 	ldw	r2,-12(fp)
  81f258:	10c00917 	ldw	r3,36(r2)
  81f25c:	e0bffd17 	ldw	r2,-12(fp)
  81f260:	10800117 	ldw	r2,4(r2)
  81f264:	18801236 	bltu	r3,r2,81f2b0 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  81f268:	e0bffd17 	ldw	r2,-12(fp)
  81f26c:	10800c17 	ldw	r2,48(r2)
  81f270:	e0bffa15 	stw	r2,-24(fp)
  81f274:	00800104 	movi	r2,4
  81f278:	e0bffb0d 	sth	r2,-20(fp)
  81f27c:	00800044 	movi	r2,1
  81f280:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  81f284:	008020b4 	movhi	r2,130
  81f288:	109b0844 	addi	r2,r2,27681
  81f28c:	10800003 	ldbu	r2,0(r2)
  81f290:	10803fcc 	andi	r2,r2,255
  81f294:	1005003a 	cmpeq	r2,r2,zero
  81f298:	1000051e 	bne	r2,zero,81f2b0 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
  81f29c:	e17ffb0b 	ldhu	r5,-20(fp)
  81f2a0:	e1bffb83 	ldbu	r6,-18(fp)
  81f2a4:	e1fffe04 	addi	r7,fp,-8
  81f2a8:	e13ffa17 	ldw	r4,-24(fp)
  81f2ac:	0819bc80 	call	819bc8 <OSFlagPost>
  81f2b0:	008020b4 	movhi	r2,130
  81f2b4:	109b1d04 	addi	r2,r2,27764
  81f2b8:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
  81f2bc:	e037883a 	mov	sp,fp
  81f2c0:	dfc00117 	ldw	ra,4(sp)
  81f2c4:	df000017 	ldw	fp,0(sp)
  81f2c8:	dec00204 	addi	sp,sp,8
  81f2cc:	f800283a 	ret

0081f2d0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  81f2d0:	defffc04 	addi	sp,sp,-16
  81f2d4:	df000315 	stw	fp,12(sp)
  81f2d8:	df000304 	addi	fp,sp,12
  81f2dc:	e13ffd15 	stw	r4,-12(fp)
  81f2e0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  81f2e4:	00000706 	br	81f304 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  81f2e8:	e0bffe17 	ldw	r2,-8(fp)
  81f2ec:	1090000c 	andi	r2,r2,16384
  81f2f0:	1005003a 	cmpeq	r2,r2,zero
  81f2f4:	1000031e 	bne	r2,zero,81f304 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  81f2f8:	00bffd44 	movi	r2,-11
  81f2fc:	e0bfff15 	stw	r2,-4(fp)
  81f300:	00000b06 	br	81f330 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  81f304:	e0bffd17 	ldw	r2,-12(fp)
  81f308:	10c01017 	ldw	r3,64(r2)
  81f30c:	e0bffd17 	ldw	r2,-12(fp)
  81f310:	10800f17 	ldw	r2,60(r2)
  81f314:	18800526 	beq	r3,r2,81f32c <altera_avalon_jtag_uart_close+0x5c>
  81f318:	e0bffd17 	ldw	r2,-12(fp)
  81f31c:	10c00917 	ldw	r3,36(r2)
  81f320:	e0bffd17 	ldw	r2,-12(fp)
  81f324:	10800117 	ldw	r2,4(r2)
  81f328:	18bfef36 	bltu	r3,r2,81f2e8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  81f32c:	e03fff15 	stw	zero,-4(fp)
  81f330:	e0bfff17 	ldw	r2,-4(fp)
}
  81f334:	e037883a 	mov	sp,fp
  81f338:	df000017 	ldw	fp,0(sp)
  81f33c:	dec00104 	addi	sp,sp,4
  81f340:	f800283a 	ret

0081f344 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  81f344:	defff804 	addi	sp,sp,-32
  81f348:	df000715 	stw	fp,28(sp)
  81f34c:	df000704 	addi	fp,sp,28
  81f350:	e13ffb15 	stw	r4,-20(fp)
  81f354:	e17ffc15 	stw	r5,-16(fp)
  81f358:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  81f35c:	00bff9c4 	movi	r2,-25
  81f360:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  81f364:	e0bffc17 	ldw	r2,-16(fp)
  81f368:	e0bfff15 	stw	r2,-4(fp)
  81f36c:	e0ffff17 	ldw	r3,-4(fp)
  81f370:	189a8060 	cmpeqi	r2,r3,27137
  81f374:	1000041e 	bne	r2,zero,81f388 <altera_avalon_jtag_uart_ioctl+0x44>
  81f378:	e0ffff17 	ldw	r3,-4(fp)
  81f37c:	189a80a0 	cmpeqi	r2,r3,27138
  81f380:	10001b1e 	bne	r2,zero,81f3f0 <altera_avalon_jtag_uart_ioctl+0xac>
  81f384:	00002706 	br	81f424 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  81f388:	e0bffb17 	ldw	r2,-20(fp)
  81f38c:	10c00117 	ldw	r3,4(r2)
  81f390:	00a00034 	movhi	r2,32768
  81f394:	10bfffc4 	addi	r2,r2,-1
  81f398:	18802226 	beq	r3,r2,81f424 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  81f39c:	e0bffd17 	ldw	r2,-12(fp)
  81f3a0:	10800017 	ldw	r2,0(r2)
  81f3a4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  81f3a8:	e0bff917 	ldw	r2,-28(fp)
  81f3ac:	10800090 	cmplti	r2,r2,2
  81f3b0:	1000071e 	bne	r2,zero,81f3d0 <altera_avalon_jtag_uart_ioctl+0x8c>
  81f3b4:	e0fff917 	ldw	r3,-28(fp)
  81f3b8:	00a00034 	movhi	r2,32768
  81f3bc:	10bfffc4 	addi	r2,r2,-1
  81f3c0:	18800326 	beq	r3,r2,81f3d0 <altera_avalon_jtag_uart_ioctl+0x8c>
  81f3c4:	e0bff917 	ldw	r2,-28(fp)
  81f3c8:	e0bffe15 	stw	r2,-8(fp)
  81f3cc:	00000306 	br	81f3dc <altera_avalon_jtag_uart_ioctl+0x98>
  81f3d0:	00e00034 	movhi	r3,32768
  81f3d4:	18ffff84 	addi	r3,r3,-2
  81f3d8:	e0fffe15 	stw	r3,-8(fp)
  81f3dc:	e0bffb17 	ldw	r2,-20(fp)
  81f3e0:	e0fffe17 	ldw	r3,-8(fp)
  81f3e4:	10c00115 	stw	r3,4(r2)
      rc = 0;
  81f3e8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  81f3ec:	00000d06 	br	81f424 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  81f3f0:	e0bffb17 	ldw	r2,-20(fp)
  81f3f4:	10c00117 	ldw	r3,4(r2)
  81f3f8:	00a00034 	movhi	r2,32768
  81f3fc:	10bfffc4 	addi	r2,r2,-1
  81f400:	18800826 	beq	r3,r2,81f424 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  81f404:	e13ffd17 	ldw	r4,-12(fp)
  81f408:	e0bffb17 	ldw	r2,-20(fp)
  81f40c:	10c00917 	ldw	r3,36(r2)
  81f410:	e0bffb17 	ldw	r2,-20(fp)
  81f414:	10800117 	ldw	r2,4(r2)
  81f418:	1885803a 	cmpltu	r2,r3,r2
  81f41c:	20800015 	stw	r2,0(r4)
      rc = 0;
  81f420:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  81f424:	e0bffa17 	ldw	r2,-24(fp)
}
  81f428:	e037883a 	mov	sp,fp
  81f42c:	df000017 	ldw	fp,0(sp)
  81f430:	dec00104 	addi	sp,sp,4
  81f434:	f800283a 	ret

0081f438 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  81f438:	deffeb04 	addi	sp,sp,-84
  81f43c:	dfc01415 	stw	ra,80(sp)
  81f440:	df001315 	stw	fp,76(sp)
  81f444:	df001304 	addi	fp,sp,76
  81f448:	e13ffb15 	stw	r4,-20(fp)
  81f44c:	e17ffc15 	stw	r5,-16(fp)
  81f450:	e1bffd15 	stw	r6,-12(fp)
  81f454:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  81f458:	e0bffc17 	ldw	r2,-16(fp)
  81f45c:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  81f460:	e0bffb17 	ldw	r2,-20(fp)
  81f464:	10800a17 	ldw	r2,40(r2)
  81f468:	e0bff315 	stw	r2,-52(fp)
  81f46c:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  81f470:	e17ff40b 	ldhu	r5,-48(fp)
  81f474:	e1bffa44 	addi	r6,fp,-23
  81f478:	e13ff317 	ldw	r4,-52(fp)
  81f47c:	081c4580 	call	81c458 <OSSemPend>

  while (space > 0)
  81f480:	00006406 	br	81f614 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  81f484:	e0bffb17 	ldw	r2,-20(fp)
  81f488:	10800d17 	ldw	r2,52(r2)
  81f48c:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
  81f490:	e0bffb17 	ldw	r2,-20(fp)
  81f494:	10800e17 	ldw	r2,56(r2)
  81f498:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
  81f49c:	e0fff617 	ldw	r3,-40(fp)
  81f4a0:	e0bff517 	ldw	r2,-44(fp)
  81f4a4:	18800536 	bltu	r3,r2,81f4bc <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
  81f4a8:	e0bff617 	ldw	r2,-40(fp)
  81f4ac:	e0fff517 	ldw	r3,-44(fp)
  81f4b0:	10c5c83a 	sub	r2,r2,r3
  81f4b4:	e0bff715 	stw	r2,-36(fp)
  81f4b8:	00000406 	br	81f4cc <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  81f4bc:	00820004 	movi	r2,2048
  81f4c0:	e0fff517 	ldw	r3,-44(fp)
  81f4c4:	10c5c83a 	sub	r2,r2,r3
  81f4c8:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  81f4cc:	e0bff717 	ldw	r2,-36(fp)
  81f4d0:	1005003a 	cmpeq	r2,r2,zero
  81f4d4:	10001f1e 	bne	r2,zero,81f554 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  81f4d8:	e0fffd17 	ldw	r3,-12(fp)
  81f4dc:	e0bff717 	ldw	r2,-36(fp)
  81f4e0:	1880022e 	bgeu	r3,r2,81f4ec <altera_avalon_jtag_uart_read+0xb4>
        n = space;
  81f4e4:	e0bffd17 	ldw	r2,-12(fp)
  81f4e8:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  81f4ec:	e0bffb17 	ldw	r2,-20(fp)
  81f4f0:	10c01104 	addi	r3,r2,68
  81f4f4:	e0bff517 	ldw	r2,-44(fp)
  81f4f8:	1887883a 	add	r3,r3,r2
  81f4fc:	e0bff917 	ldw	r2,-28(fp)
  81f500:	1009883a 	mov	r4,r2
  81f504:	180b883a 	mov	r5,r3
  81f508:	e1bff717 	ldw	r6,-36(fp)
  81f50c:	080dd7c0 	call	80dd7c <memcpy>
      ptr   += n;
  81f510:	e0fff717 	ldw	r3,-36(fp)
  81f514:	e0bff917 	ldw	r2,-28(fp)
  81f518:	10c5883a 	add	r2,r2,r3
  81f51c:	e0bff915 	stw	r2,-28(fp)
      space -= n;
  81f520:	e0fffd17 	ldw	r3,-12(fp)
  81f524:	e0bff717 	ldw	r2,-36(fp)
  81f528:	1885c83a 	sub	r2,r3,r2
  81f52c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81f530:	e0fff517 	ldw	r3,-44(fp)
  81f534:	e0bff717 	ldw	r2,-36(fp)
  81f538:	1885883a 	add	r2,r3,r2
  81f53c:	10c1ffcc 	andi	r3,r2,2047
  81f540:	e0bffb17 	ldw	r2,-20(fp)
  81f544:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  81f548:	e0bffd17 	ldw	r2,-12(fp)
  81f54c:	10800048 	cmpgei	r2,r2,1
  81f550:	103fcc1e 	bne	r2,zero,81f484 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
  81f554:	e0fff917 	ldw	r3,-28(fp)
  81f558:	e0bffc17 	ldw	r2,-16(fp)
  81f55c:	1880301e 	bne	r3,r2,81f620 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  81f560:	e0bffe17 	ldw	r2,-8(fp)
  81f564:	1090000c 	andi	r2,r2,16384
  81f568:	1004c03a 	cmpne	r2,r2,zero
  81f56c:	10002c1e 	bne	r2,zero,81f620 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  81f570:	008020b4 	movhi	r2,130
  81f574:	109b0844 	addi	r2,r2,27681
  81f578:	10800003 	ldbu	r2,0(r2)
  81f57c:	10803fcc 	andi	r2,r2,255
  81f580:	10800058 	cmpnei	r2,r2,1
  81f584:	1000161e 	bne	r2,zero,81f5e0 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  81f588:	e0bffb17 	ldw	r2,-20(fp)
  81f58c:	10800c17 	ldw	r2,48(r2)
  81f590:	e0bff015 	stw	r2,-64(fp)
  81f594:	00800144 	movi	r2,5
  81f598:	e0bff10d 	sth	r2,-60(fp)
  81f59c:	00bfe0c4 	movi	r2,-125
  81f5a0:	e0bff185 	stb	r2,-58(fp)
  81f5a4:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  81f5a8:	008020b4 	movhi	r2,130
  81f5ac:	109b0844 	addi	r2,r2,27681
  81f5b0:	10800003 	ldbu	r2,0(r2)
  81f5b4:	10803fcc 	andi	r2,r2,255
  81f5b8:	1005003a 	cmpeq	r2,r2,zero
  81f5bc:	1000111e 	bne	r2,zero,81f604 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  81f5c0:	e17ff10b 	ldhu	r5,-60(fp)
  81f5c4:	e1bff183 	ldbu	r6,-58(fp)
  81f5c8:	e1fff20b 	ldhu	r7,-56(fp)
  81f5cc:	e0bffa04 	addi	r2,fp,-24
  81f5d0:	d8800015 	stw	r2,0(sp)
  81f5d4:	e13ff017 	ldw	r4,-64(fp)
  81f5d8:	081951c0 	call	81951c <OSFlagPend>
    return err;
  81f5dc:	00000906 	br	81f604 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  81f5e0:	e0bffb17 	ldw	r2,-20(fp)
  81f5e4:	10c00d17 	ldw	r3,52(r2)
  81f5e8:	e0bff617 	ldw	r2,-40(fp)
  81f5ec:	1880051e 	bne	r3,r2,81f604 <altera_avalon_jtag_uart_read+0x1cc>
  81f5f0:	e0bffb17 	ldw	r2,-20(fp)
  81f5f4:	10c00917 	ldw	r3,36(r2)
  81f5f8:	e0bffb17 	ldw	r2,-20(fp)
  81f5fc:	10800117 	ldw	r2,4(r2)
  81f600:	18bff736 	bltu	r3,r2,81f5e0 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  81f604:	e0bffb17 	ldw	r2,-20(fp)
  81f608:	10c00d17 	ldw	r3,52(r2)
  81f60c:	e0bff617 	ldw	r2,-40(fp)
  81f610:	18800326 	beq	r3,r2,81f620 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  81f614:	e0bffd17 	ldw	r2,-12(fp)
  81f618:	10800048 	cmpgei	r2,r2,1
  81f61c:	103f991e 	bne	r2,zero,81f484 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  81f620:	e0bffb17 	ldw	r2,-20(fp)
  81f624:	11000a17 	ldw	r4,40(r2)
  81f628:	081c8500 	call	81c850 <OSSemPost>

  if (ptr != buffer)
  81f62c:	e0fff917 	ldw	r3,-28(fp)
  81f630:	e0bffc17 	ldw	r2,-16(fp)
  81f634:	18801926 	beq	r3,r2,81f69c <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81f638:	0005303a 	rdctl	r2,status
  81f63c:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81f640:	e0ffef17 	ldw	r3,-68(fp)
  81f644:	00bfff84 	movi	r2,-2
  81f648:	1884703a 	and	r2,r3,r2
  81f64c:	1001703a 	wrctl	status,r2
  
  return context;
  81f650:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  81f654:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81f658:	e0bffb17 	ldw	r2,-20(fp)
  81f65c:	10800817 	ldw	r2,32(r2)
  81f660:	10c00054 	ori	r3,r2,1
  81f664:	e0bffb17 	ldw	r2,-20(fp)
  81f668:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81f66c:	e0bffb17 	ldw	r2,-20(fp)
  81f670:	10800017 	ldw	r2,0(r2)
  81f674:	11000104 	addi	r4,r2,4
  81f678:	e0bffb17 	ldw	r2,-20(fp)
  81f67c:	10800817 	ldw	r2,32(r2)
  81f680:	1007883a 	mov	r3,r2
  81f684:	2005883a 	mov	r2,r4
  81f688:	10c00035 	stwio	r3,0(r2)
  81f68c:	e0bff817 	ldw	r2,-32(fp)
  81f690:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81f694:	e0bfee17 	ldw	r2,-72(fp)
  81f698:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  81f69c:	e0fff917 	ldw	r3,-28(fp)
  81f6a0:	e0bffc17 	ldw	r2,-16(fp)
  81f6a4:	18800526 	beq	r3,r2,81f6bc <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
  81f6a8:	e0fff917 	ldw	r3,-28(fp)
  81f6ac:	e0bffc17 	ldw	r2,-16(fp)
  81f6b0:	1887c83a 	sub	r3,r3,r2
  81f6b4:	e0ffff15 	stw	r3,-4(fp)
  81f6b8:	00000906 	br	81f6e0 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  81f6bc:	e0bffe17 	ldw	r2,-8(fp)
  81f6c0:	1090000c 	andi	r2,r2,16384
  81f6c4:	1005003a 	cmpeq	r2,r2,zero
  81f6c8:	1000031e 	bne	r2,zero,81f6d8 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
  81f6cc:	00bffd44 	movi	r2,-11
  81f6d0:	e0bfff15 	stw	r2,-4(fp)
  81f6d4:	00000206 	br	81f6e0 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  81f6d8:	00bffec4 	movi	r2,-5
  81f6dc:	e0bfff15 	stw	r2,-4(fp)
  81f6e0:	e0bfff17 	ldw	r2,-4(fp)
}
  81f6e4:	e037883a 	mov	sp,fp
  81f6e8:	dfc00117 	ldw	ra,4(sp)
  81f6ec:	df000017 	ldw	fp,0(sp)
  81f6f0:	dec00204 	addi	sp,sp,8
  81f6f4:	f800283a 	ret

0081f6f8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  81f6f8:	deffeb04 	addi	sp,sp,-84
  81f6fc:	dfc01415 	stw	ra,80(sp)
  81f700:	df001315 	stw	fp,76(sp)
  81f704:	df001304 	addi	fp,sp,76
  81f708:	e13ffb15 	stw	r4,-20(fp)
  81f70c:	e17ffc15 	stw	r5,-16(fp)
  81f710:	e1bffd15 	stw	r6,-12(fp)
  81f714:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  81f718:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  81f71c:	e0bffc17 	ldw	r2,-16(fp)
  81f720:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  81f724:	e0bffb17 	ldw	r2,-20(fp)
  81f728:	10800b17 	ldw	r2,44(r2)
  81f72c:	e0bff315 	stw	r2,-52(fp)
  81f730:	e03ff40d 	sth	zero,-48(fp)
  81f734:	e17ff40b 	ldhu	r5,-48(fp)
  81f738:	e1bffa04 	addi	r6,fp,-24
  81f73c:	e13ff317 	ldw	r4,-52(fp)
  81f740:	081c4580 	call	81c458 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  81f744:	00003a06 	br	81f830 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  81f748:	e0bffb17 	ldw	r2,-20(fp)
  81f74c:	10800f17 	ldw	r2,60(r2)
  81f750:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  81f754:	e0bffb17 	ldw	r2,-20(fp)
  81f758:	10801017 	ldw	r2,64(r2)
  81f75c:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
  81f760:	e0fff917 	ldw	r3,-28(fp)
  81f764:	e0bff817 	ldw	r2,-32(fp)
  81f768:	1880062e 	bgeu	r3,r2,81f784 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
  81f76c:	e0fff817 	ldw	r3,-32(fp)
  81f770:	e0bff917 	ldw	r2,-28(fp)
  81f774:	1885c83a 	sub	r2,r3,r2
  81f778:	10bfffc4 	addi	r2,r2,-1
  81f77c:	e0bff715 	stw	r2,-36(fp)
  81f780:	00000c06 	br	81f7b4 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
  81f784:	e0bff817 	ldw	r2,-32(fp)
  81f788:	1005003a 	cmpeq	r2,r2,zero
  81f78c:	1000051e 	bne	r2,zero,81f7a4 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  81f790:	00820004 	movi	r2,2048
  81f794:	e0fff917 	ldw	r3,-28(fp)
  81f798:	10c5c83a 	sub	r2,r2,r3
  81f79c:	e0bff715 	stw	r2,-36(fp)
  81f7a0:	00000406 	br	81f7b4 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  81f7a4:	0081ffc4 	movi	r2,2047
  81f7a8:	e0fff917 	ldw	r3,-28(fp)
  81f7ac:	10c5c83a 	sub	r2,r2,r3
  81f7b0:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  81f7b4:	e0bff717 	ldw	r2,-36(fp)
  81f7b8:	1005003a 	cmpeq	r2,r2,zero
  81f7bc:	10001f1e 	bne	r2,zero,81f83c <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
  81f7c0:	e0fffd17 	ldw	r3,-12(fp)
  81f7c4:	e0bff717 	ldw	r2,-36(fp)
  81f7c8:	1880022e 	bgeu	r3,r2,81f7d4 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  81f7cc:	e0bffd17 	ldw	r2,-12(fp)
  81f7d0:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  81f7d4:	e0bffb17 	ldw	r2,-20(fp)
  81f7d8:	10c21104 	addi	r3,r2,2116
  81f7dc:	e0bff917 	ldw	r2,-28(fp)
  81f7e0:	1885883a 	add	r2,r3,r2
  81f7e4:	e0fffc17 	ldw	r3,-16(fp)
  81f7e8:	1009883a 	mov	r4,r2
  81f7ec:	180b883a 	mov	r5,r3
  81f7f0:	e1bff717 	ldw	r6,-36(fp)
  81f7f4:	080dd7c0 	call	80dd7c <memcpy>
      ptr   += n;
  81f7f8:	e0fff717 	ldw	r3,-36(fp)
  81f7fc:	e0bffc17 	ldw	r2,-16(fp)
  81f800:	10c5883a 	add	r2,r2,r3
  81f804:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  81f808:	e0fffd17 	ldw	r3,-12(fp)
  81f80c:	e0bff717 	ldw	r2,-36(fp)
  81f810:	1885c83a 	sub	r2,r3,r2
  81f814:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81f818:	e0fff917 	ldw	r3,-28(fp)
  81f81c:	e0bff717 	ldw	r2,-36(fp)
  81f820:	1885883a 	add	r2,r3,r2
  81f824:	10c1ffcc 	andi	r3,r2,2047
  81f828:	e0bffb17 	ldw	r2,-20(fp)
  81f82c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  81f830:	e0bffd17 	ldw	r2,-12(fp)
  81f834:	10800048 	cmpgei	r2,r2,1
  81f838:	103fc31e 	bne	r2,zero,81f748 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81f83c:	0005303a 	rdctl	r2,status
  81f840:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81f844:	e0fff217 	ldw	r3,-56(fp)
  81f848:	00bfff84 	movi	r2,-2
  81f84c:	1884703a 	and	r2,r3,r2
  81f850:	1001703a 	wrctl	status,r2
  
  return context;
  81f854:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  81f858:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  81f85c:	e0bffb17 	ldw	r2,-20(fp)
  81f860:	10800817 	ldw	r2,32(r2)
  81f864:	10c00094 	ori	r3,r2,2
  81f868:	e0bffb17 	ldw	r2,-20(fp)
  81f86c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81f870:	e0bffb17 	ldw	r2,-20(fp)
  81f874:	10800017 	ldw	r2,0(r2)
  81f878:	11000104 	addi	r4,r2,4
  81f87c:	e0bffb17 	ldw	r2,-20(fp)
  81f880:	10800817 	ldw	r2,32(r2)
  81f884:	1007883a 	mov	r3,r2
  81f888:	2005883a 	mov	r2,r4
  81f88c:	10c00035 	stwio	r3,0(r2)
  81f890:	e0bff617 	ldw	r2,-40(fp)
  81f894:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81f898:	e0bff117 	ldw	r2,-60(fp)
  81f89c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  81f8a0:	e0bffd17 	ldw	r2,-12(fp)
  81f8a4:	10800050 	cmplti	r2,r2,1
  81f8a8:	10002d1e 	bne	r2,zero,81f960 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
  81f8ac:	e0bffe17 	ldw	r2,-8(fp)
  81f8b0:	1090000c 	andi	r2,r2,16384
  81f8b4:	1004c03a 	cmpne	r2,r2,zero
  81f8b8:	10002c1e 	bne	r2,zero,81f96c <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  81f8bc:	008020b4 	movhi	r2,130
  81f8c0:	109b0844 	addi	r2,r2,27681
  81f8c4:	10800003 	ldbu	r2,0(r2)
  81f8c8:	10803fcc 	andi	r2,r2,255
  81f8cc:	10800058 	cmpnei	r2,r2,1
  81f8d0:	1000161e 	bne	r2,zero,81f92c <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
  81f8d4:	e0bffb17 	ldw	r2,-20(fp)
  81f8d8:	10800c17 	ldw	r2,48(r2)
  81f8dc:	e0bfee15 	stw	r2,-72(fp)
  81f8e0:	00800184 	movi	r2,6
  81f8e4:	e0bfef0d 	sth	r2,-68(fp)
  81f8e8:	00bfe0c4 	movi	r2,-125
  81f8ec:	e0bfef85 	stb	r2,-66(fp)
  81f8f0:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  81f8f4:	008020b4 	movhi	r2,130
  81f8f8:	109b0844 	addi	r2,r2,27681
  81f8fc:	10800003 	ldbu	r2,0(r2)
  81f900:	10803fcc 	andi	r2,r2,255
  81f904:	1005003a 	cmpeq	r2,r2,zero
  81f908:	1000111e 	bne	r2,zero,81f950 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  81f90c:	e17fef0b 	ldhu	r5,-68(fp)
  81f910:	e1bfef83 	ldbu	r6,-66(fp)
  81f914:	e1fff00b 	ldhu	r7,-64(fp)
  81f918:	e0bffa44 	addi	r2,fp,-23
  81f91c:	d8800015 	stw	r2,0(sp)
  81f920:	e13fee17 	ldw	r4,-72(fp)
  81f924:	081951c0 	call	81951c <OSFlagPend>
    return err;
  81f928:	00000906 	br	81f950 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  81f92c:	e0bffb17 	ldw	r2,-20(fp)
  81f930:	10c01017 	ldw	r3,64(r2)
  81f934:	e0bff817 	ldw	r2,-32(fp)
  81f938:	1880051e 	bne	r3,r2,81f950 <altera_avalon_jtag_uart_write+0x258>
  81f93c:	e0bffb17 	ldw	r2,-20(fp)
  81f940:	10c00917 	ldw	r3,36(r2)
  81f944:	e0bffb17 	ldw	r2,-20(fp)
  81f948:	10800117 	ldw	r2,4(r2)
  81f94c:	18bff736 	bltu	r3,r2,81f92c <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  81f950:	e0bffb17 	ldw	r2,-20(fp)
  81f954:	10c01017 	ldw	r3,64(r2)
  81f958:	e0bff817 	ldw	r2,-32(fp)
  81f95c:	18800326 	beq	r3,r2,81f96c <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
  81f960:	e0bffd17 	ldw	r2,-12(fp)
  81f964:	10800048 	cmpgei	r2,r2,1
  81f968:	103fb11e 	bne	r2,zero,81f830 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  81f96c:	e0bffb17 	ldw	r2,-20(fp)
  81f970:	11000b17 	ldw	r4,44(r2)
  81f974:	081c8500 	call	81c850 <OSSemPost>

  if (ptr != start)
  81f978:	e0fffc17 	ldw	r3,-16(fp)
  81f97c:	e0bff517 	ldw	r2,-44(fp)
  81f980:	18800526 	beq	r3,r2,81f998 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
  81f984:	e0fffc17 	ldw	r3,-16(fp)
  81f988:	e0bff517 	ldw	r2,-44(fp)
  81f98c:	1887c83a 	sub	r3,r3,r2
  81f990:	e0ffff15 	stw	r3,-4(fp)
  81f994:	00000906 	br	81f9bc <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
  81f998:	e0bffe17 	ldw	r2,-8(fp)
  81f99c:	1090000c 	andi	r2,r2,16384
  81f9a0:	1005003a 	cmpeq	r2,r2,zero
  81f9a4:	1000031e 	bne	r2,zero,81f9b4 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
  81f9a8:	00bffd44 	movi	r2,-11
  81f9ac:	e0bfff15 	stw	r2,-4(fp)
  81f9b0:	00000206 	br	81f9bc <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
  81f9b4:	00bffec4 	movi	r2,-5
  81f9b8:	e0bfff15 	stw	r2,-4(fp)
  81f9bc:	e0bfff17 	ldw	r2,-4(fp)
}
  81f9c0:	e037883a 	mov	sp,fp
  81f9c4:	dfc00117 	ldw	ra,4(sp)
  81f9c8:	df000017 	ldw	fp,0(sp)
  81f9cc:	dec00204 	addi	sp,sp,8
  81f9d0:	f800283a 	ret

0081f9d4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  81f9d4:	defff904 	addi	sp,sp,-28
  81f9d8:	dfc00615 	stw	ra,24(sp)
  81f9dc:	df000515 	stw	fp,20(sp)
  81f9e0:	df000504 	addi	fp,sp,20
  81f9e4:	e13ffe15 	stw	r4,-8(fp)
  81f9e8:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  81f9ec:	e0bffe17 	ldw	r2,-8(fp)
  81f9f0:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  81f9f4:	e0bffe17 	ldw	r2,-8(fp)
  81f9f8:	10800104 	addi	r2,r2,4
  81f9fc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81fa00:	0005303a 	rdctl	r2,status
  81fa04:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81fa08:	e0fffc17 	ldw	r3,-16(fp)
  81fa0c:	00bfff84 	movi	r2,-2
  81fa10:	1884703a 	and	r2,r3,r2
  81fa14:	1001703a 	wrctl	status,r2
  
  return context;
  81fa18:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  81fa1c:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
  81fa20:	0821a240 	call	821a24 <alt_tick>
  81fa24:	e0bffd17 	ldw	r2,-12(fp)
  81fa28:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81fa2c:	e0bffb17 	ldw	r2,-20(fp)
  81fa30:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  81fa34:	e037883a 	mov	sp,fp
  81fa38:	dfc00117 	ldw	ra,4(sp)
  81fa3c:	df000017 	ldw	fp,0(sp)
  81fa40:	dec00204 	addi	sp,sp,8
  81fa44:	f800283a 	ret

0081fa48 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  81fa48:	defff904 	addi	sp,sp,-28
  81fa4c:	dfc00615 	stw	ra,24(sp)
  81fa50:	df000515 	stw	fp,20(sp)
  81fa54:	df000504 	addi	fp,sp,20
  81fa58:	e13ffc15 	stw	r4,-16(fp)
  81fa5c:	e17ffd15 	stw	r5,-12(fp)
  81fa60:	e1bffe15 	stw	r6,-8(fp)
  81fa64:	e1ffff15 	stw	r7,-4(fp)
  81fa68:	e0bfff17 	ldw	r2,-4(fp)
  81fa6c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  81fa70:	008020b4 	movhi	r2,130
  81fa74:	109b1d04 	addi	r2,r2,27764
  81fa78:	10800017 	ldw	r2,0(r2)
  81fa7c:	1004c03a 	cmpne	r2,r2,zero
  81fa80:	1000041e 	bne	r2,zero,81fa94 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  81fa84:	00c020b4 	movhi	r3,130
  81fa88:	18db1d04 	addi	r3,r3,27764
  81fa8c:	e0bffb17 	ldw	r2,-20(fp)
  81fa90:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  81fa94:	e0bffc17 	ldw	r2,-16(fp)
  81fa98:	10800104 	addi	r2,r2,4
  81fa9c:	1007883a 	mov	r3,r2
  81faa0:	008001c4 	movi	r2,7
  81faa4:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  81faa8:	e13ffe17 	ldw	r4,-8(fp)
  81faac:	e17ffc17 	ldw	r5,-16(fp)
  81fab0:	018020b4 	movhi	r6,130
  81fab4:	31be7504 	addi	r6,r6,-1580
  81fab8:	08215080 	call	821508 <alt_irq_register>
#endif  
}
  81fabc:	e037883a 	mov	sp,fp
  81fac0:	dfc00117 	ldw	ra,4(sp)
  81fac4:	df000017 	ldw	fp,0(sp)
  81fac8:	dec00204 	addi	sp,sp,8
  81facc:	f800283a 	ret

0081fad0 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
  81fad0:	defffc04 	addi	sp,sp,-16
  81fad4:	dfc00315 	stw	ra,12(sp)
  81fad8:	df000215 	stw	fp,8(sp)
  81fadc:	df000204 	addi	fp,sp,8
  81fae0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
  81fae4:	e13fff17 	ldw	r4,-4(fp)
  81fae8:	014020b4 	movhi	r5,130
  81faec:	2953f104 	addi	r5,r5,20420
  81faf0:	08213080 	call	821308 <alt_find_dev>
  81faf4:	e0bffe15 	stw	r2,-8(fp)
  return dev;
  81faf8:	e0bffe17 	ldw	r2,-8(fp)
}
  81fafc:	e037883a 	mov	sp,fp
  81fb00:	dfc00117 	ldw	ra,4(sp)
  81fb04:	df000017 	ldw	fp,0(sp)
  81fb08:	dec00204 	addi	sp,sp,8
  81fb0c:	f800283a 	ret

0081fb10 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
  81fb10:	defffd04 	addi	sp,sp,-12
  81fb14:	df000215 	stw	fp,8(sp)
  81fb18:	df000204 	addi	fp,sp,8
  81fb1c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81fb20:	e0bfff17 	ldw	r2,-4(fp)
  81fb24:	10800a17 	ldw	r2,40(r2)
  81fb28:	10800037 	ldwio	r2,0(r2)
  81fb2c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
  81fb30:	e0bffe17 	ldw	r2,-8(fp)
  81fb34:	10800054 	ori	r2,r2,1
  81fb38:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81fb3c:	e0bfff17 	ldw	r2,-4(fp)
  81fb40:	10800a17 	ldw	r2,40(r2)
  81fb44:	e0fffe17 	ldw	r3,-8(fp)
  81fb48:	10c00035 	stwio	r3,0(r2)
}
  81fb4c:	e037883a 	mov	sp,fp
  81fb50:	df000017 	ldw	fp,0(sp)
  81fb54:	dec00104 	addi	sp,sp,4
  81fb58:	f800283a 	ret

0081fb5c <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
  81fb5c:	defffd04 	addi	sp,sp,-12
  81fb60:	df000215 	stw	fp,8(sp)
  81fb64:	df000204 	addi	fp,sp,8
  81fb68:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81fb6c:	e0bfff17 	ldw	r2,-4(fp)
  81fb70:	10800a17 	ldw	r2,40(r2)
  81fb74:	10800037 	ldwio	r2,0(r2)
  81fb78:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
  81fb7c:	e0fffe17 	ldw	r3,-8(fp)
  81fb80:	00bfff84 	movi	r2,-2
  81fb84:	1884703a 	and	r2,r3,r2
  81fb88:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81fb8c:	e0bfff17 	ldw	r2,-4(fp)
  81fb90:	10800a17 	ldw	r2,40(r2)
  81fb94:	e0fffe17 	ldw	r3,-8(fp)
  81fb98:	10c00035 	stwio	r3,0(r2)
}
  81fb9c:	e037883a 	mov	sp,fp
  81fba0:	df000017 	ldw	fp,0(sp)
  81fba4:	dec00104 	addi	sp,sp,4
  81fba8:	f800283a 	ret

0081fbac <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
  81fbac:	defffd04 	addi	sp,sp,-12
  81fbb0:	df000215 	stw	fp,8(sp)
  81fbb4:	df000204 	addi	fp,sp,8
  81fbb8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81fbbc:	e0bfff17 	ldw	r2,-4(fp)
  81fbc0:	10800a17 	ldw	r2,40(r2)
  81fbc4:	10800037 	ldwio	r2,0(r2)
  81fbc8:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
  81fbcc:	e0bffe17 	ldw	r2,-8(fp)
  81fbd0:	10800094 	ori	r2,r2,2
  81fbd4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81fbd8:	e0bfff17 	ldw	r2,-4(fp)
  81fbdc:	10800a17 	ldw	r2,40(r2)
  81fbe0:	e0fffe17 	ldw	r3,-8(fp)
  81fbe4:	10c00035 	stwio	r3,0(r2)
}
  81fbe8:	e037883a 	mov	sp,fp
  81fbec:	df000017 	ldw	fp,0(sp)
  81fbf0:	dec00104 	addi	sp,sp,4
  81fbf4:	f800283a 	ret

0081fbf8 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
  81fbf8:	defffd04 	addi	sp,sp,-12
  81fbfc:	df000215 	stw	fp,8(sp)
  81fc00:	df000204 	addi	fp,sp,8
  81fc04:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81fc08:	e0bfff17 	ldw	r2,-4(fp)
  81fc0c:	10800a17 	ldw	r2,40(r2)
  81fc10:	10800037 	ldwio	r2,0(r2)
  81fc14:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
  81fc18:	e0fffe17 	ldw	r3,-8(fp)
  81fc1c:	00bfff44 	movi	r2,-3
  81fc20:	1884703a 	and	r2,r3,r2
  81fc24:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81fc28:	e0bfff17 	ldw	r2,-4(fp)
  81fc2c:	10800a17 	ldw	r2,40(r2)
  81fc30:	e0fffe17 	ldw	r3,-8(fp)
  81fc34:	10c00035 	stwio	r3,0(r2)
}
  81fc38:	e037883a 	mov	sp,fp
  81fc3c:	df000017 	ldw	fp,0(sp)
  81fc40:	dec00104 	addi	sp,sp,4
  81fc44:	f800283a 	ret

0081fc48 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
  81fc48:	defffd04 	addi	sp,sp,-12
  81fc4c:	df000215 	stw	fp,8(sp)
  81fc50:	df000204 	addi	fp,sp,8
  81fc54:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81fc58:	e0bfff17 	ldw	r2,-4(fp)
  81fc5c:	10800a17 	ldw	r2,40(r2)
  81fc60:	10800037 	ldwio	r2,0(r2)
  81fc64:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
  81fc68:	e0bffe17 	ldw	r2,-8(fp)
  81fc6c:	1080400c 	andi	r2,r2,256
  81fc70:	1004c03a 	cmpne	r2,r2,zero
}
  81fc74:	e037883a 	mov	sp,fp
  81fc78:	df000017 	ldw	fp,0(sp)
  81fc7c:	dec00104 	addi	sp,sp,4
  81fc80:	f800283a 	ret

0081fc84 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
  81fc84:	defffd04 	addi	sp,sp,-12
  81fc88:	df000215 	stw	fp,8(sp)
  81fc8c:	df000204 	addi	fp,sp,8
  81fc90:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81fc94:	e0bfff17 	ldw	r2,-4(fp)
  81fc98:	10800a17 	ldw	r2,40(r2)
  81fc9c:	10800037 	ldwio	r2,0(r2)
  81fca0:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
  81fca4:	e0bffe17 	ldw	r2,-8(fp)
  81fca8:	1080800c 	andi	r2,r2,512
  81fcac:	1004c03a 	cmpne	r2,r2,zero
}
  81fcb0:	e037883a 	mov	sp,fp
  81fcb4:	df000017 	ldw	fp,0(sp)
  81fcb8:	dec00104 	addi	sp,sp,4
  81fcbc:	f800283a 	ret

0081fcc0 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
  81fcc0:	defffd04 	addi	sp,sp,-12
  81fcc4:	df000215 	stw	fp,8(sp)
  81fcc8:	df000204 	addi	fp,sp,8
  81fccc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81fcd0:	e0bfff17 	ldw	r2,-4(fp)
  81fcd4:	10800a17 	ldw	r2,40(r2)
  81fcd8:	10800037 	ldwio	r2,0(r2)
  81fcdc:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
  81fce0:	e0bffe17 	ldw	r2,-8(fp)
  81fce4:	10800114 	ori	r2,r2,4
  81fce8:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
  81fcec:	e0bffe17 	ldw	r2,-8(fp)
  81fcf0:	10800214 	ori	r2,r2,8
  81fcf4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81fcf8:	e0bfff17 	ldw	r2,-4(fp)
  81fcfc:	10800a17 	ldw	r2,40(r2)
  81fd00:	e0fffe17 	ldw	r3,-8(fp)
  81fd04:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
  81fd08:	e0fffe17 	ldw	r3,-8(fp)
  81fd0c:	00bffec4 	movi	r2,-5
  81fd10:	1884703a 	and	r2,r3,r2
  81fd14:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
  81fd18:	e0fffe17 	ldw	r3,-8(fp)
  81fd1c:	00bffdc4 	movi	r2,-9
  81fd20:	1884703a 	and	r2,r3,r2
  81fd24:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81fd28:	e0bfff17 	ldw	r2,-4(fp)
  81fd2c:	10800a17 	ldw	r2,40(r2)
  81fd30:	e0fffe17 	ldw	r3,-8(fp)
  81fd34:	10c00035 	stwio	r3,0(r2)
}
  81fd38:	e037883a 	mov	sp,fp
  81fd3c:	df000017 	ldw	fp,0(sp)
  81fd40:	dec00104 	addi	sp,sp,4
  81fd44:	f800283a 	ret

0081fd48 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
  81fd48:	defffb04 	addi	sp,sp,-20
  81fd4c:	df000415 	stw	fp,16(sp)
  81fd50:	df000404 	addi	fp,sp,16
  81fd54:	e13ffd15 	stw	r4,-12(fp)
  81fd58:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  81fd5c:	e0bffd17 	ldw	r2,-12(fp)
  81fd60:	10800a17 	ldw	r2,40(r2)
  81fd64:	10800104 	addi	r2,r2,4
  81fd68:	10800037 	ldwio	r2,0(r2)
  81fd6c:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  81fd70:	e0bffe17 	ldw	r2,-8(fp)
  81fd74:	1004c03a 	cmpne	r2,r2,zero
  81fd78:	1000051e 	bne	r2,zero,81fd90 <alt_up_audio_read_fifo_avail+0x48>
  81fd7c:	e0bffc17 	ldw	r2,-16(fp)
  81fd80:	10bfc00c 	andi	r2,r2,65280
  81fd84:	1004d23a 	srli	r2,r2,8
  81fd88:	e0bfff15 	stw	r2,-4(fp)
  81fd8c:	00000306 	br	81fd9c <alt_up_audio_read_fifo_avail+0x54>
  81fd90:	e0bffc17 	ldw	r2,-16(fp)
  81fd94:	10803fcc 	andi	r2,r2,255
  81fd98:	e0bfff15 	stw	r2,-4(fp)
  81fd9c:	e0bfff17 	ldw	r2,-4(fp)
  81fda0:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
  81fda4:	e0bffc17 	ldw	r2,-16(fp)
}
  81fda8:	e037883a 	mov	sp,fp
  81fdac:	df000017 	ldw	fp,0(sp)
  81fdb0:	dec00104 	addi	sp,sp,4
  81fdb4:	f800283a 	ret

0081fdb8 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  81fdb8:	defff904 	addi	sp,sp,-28
  81fdbc:	dfc00615 	stw	ra,24(sp)
  81fdc0:	df000515 	stw	fp,20(sp)
  81fdc4:	df000504 	addi	fp,sp,20
  81fdc8:	e13ffc15 	stw	r4,-16(fp)
  81fdcc:	e17ffd15 	stw	r5,-12(fp)
  81fdd0:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
  81fdd4:	e13ffc17 	ldw	r4,-16(fp)
  81fdd8:	01400044 	movi	r5,1
  81fddc:	081fd480 	call	81fd48 <alt_up_audio_read_fifo_avail>
  81fde0:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  81fde4:	e0bffb17 	ldw	r2,-20(fp)
  81fde8:	10801868 	cmpgeui	r2,r2,97
  81fdec:	1000021e 	bne	r2,zero,81fdf8 <alt_up_audio_record_r+0x40>
		return 0;
  81fdf0:	e03fff15 	stw	zero,-4(fp)
  81fdf4:	00000606 	br	81fe10 <alt_up_audio_record_r+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  81fdf8:	e13ffc17 	ldw	r4,-16(fp)
  81fdfc:	e17ffd17 	ldw	r5,-12(fp)
  81fe00:	e1bffe17 	ldw	r6,-8(fp)
  81fe04:	01c00044 	movi	r7,1
  81fe08:	081ffec0 	call	81ffec <alt_up_audio_read_fifo>
  81fe0c:	e0bfff15 	stw	r2,-4(fp)
  81fe10:	e0bfff17 	ldw	r2,-4(fp)
}
  81fe14:	e037883a 	mov	sp,fp
  81fe18:	dfc00117 	ldw	ra,4(sp)
  81fe1c:	df000017 	ldw	fp,0(sp)
  81fe20:	dec00204 	addi	sp,sp,8
  81fe24:	f800283a 	ret

0081fe28 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  81fe28:	defff904 	addi	sp,sp,-28
  81fe2c:	dfc00615 	stw	ra,24(sp)
  81fe30:	df000515 	stw	fp,20(sp)
  81fe34:	df000504 	addi	fp,sp,20
  81fe38:	e13ffc15 	stw	r4,-16(fp)
  81fe3c:	e17ffd15 	stw	r5,-12(fp)
  81fe40:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
  81fe44:	e13ffc17 	ldw	r4,-16(fp)
  81fe48:	000b883a 	mov	r5,zero
  81fe4c:	081fd480 	call	81fd48 <alt_up_audio_read_fifo_avail>
  81fe50:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  81fe54:	e0bffb17 	ldw	r2,-20(fp)
  81fe58:	10801868 	cmpgeui	r2,r2,97
  81fe5c:	1000021e 	bne	r2,zero,81fe68 <alt_up_audio_record_l+0x40>
		return 0;
  81fe60:	e03fff15 	stw	zero,-4(fp)
  81fe64:	00000606 	br	81fe80 <alt_up_audio_record_l+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  81fe68:	e13ffc17 	ldw	r4,-16(fp)
  81fe6c:	e17ffd17 	ldw	r5,-12(fp)
  81fe70:	e1bffe17 	ldw	r6,-8(fp)
  81fe74:	000f883a 	mov	r7,zero
  81fe78:	081ffec0 	call	81ffec <alt_up_audio_read_fifo>
  81fe7c:	e0bfff15 	stw	r2,-4(fp)
  81fe80:	e0bfff17 	ldw	r2,-4(fp)
}
  81fe84:	e037883a 	mov	sp,fp
  81fe88:	dfc00117 	ldw	ra,4(sp)
  81fe8c:	df000017 	ldw	fp,0(sp)
  81fe90:	dec00204 	addi	sp,sp,8
  81fe94:	f800283a 	ret

0081fe98 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
  81fe98:	defffb04 	addi	sp,sp,-20
  81fe9c:	df000415 	stw	fp,16(sp)
  81fea0:	df000404 	addi	fp,sp,16
  81fea4:	e13ffd15 	stw	r4,-12(fp)
  81fea8:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  81feac:	e0bffd17 	ldw	r2,-12(fp)
  81feb0:	10800a17 	ldw	r2,40(r2)
  81feb4:	10800104 	addi	r2,r2,4
  81feb8:	10800037 	ldwio	r2,0(r2)
  81febc:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  81fec0:	e0bffe17 	ldw	r2,-8(fp)
  81fec4:	1004c03a 	cmpne	r2,r2,zero
  81fec8:	1000051e 	bne	r2,zero,81fee0 <alt_up_audio_write_fifo_space+0x48>
  81fecc:	e0bffc17 	ldw	r2,-16(fp)
  81fed0:	10bfc02c 	andhi	r2,r2,65280
  81fed4:	1004d63a 	srli	r2,r2,24
  81fed8:	e0bfff15 	stw	r2,-4(fp)
  81fedc:	00000406 	br	81fef0 <alt_up_audio_write_fifo_space+0x58>
  81fee0:	e0bffc17 	ldw	r2,-16(fp)
  81fee4:	10803fec 	andhi	r2,r2,255
  81fee8:	1004d43a 	srli	r2,r2,16
  81feec:	e0bfff15 	stw	r2,-4(fp)
  81fef0:	e0bfff17 	ldw	r2,-4(fp)
  81fef4:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
  81fef8:	e0bffc17 	ldw	r2,-16(fp)
}
  81fefc:	e037883a 	mov	sp,fp
  81ff00:	df000017 	ldw	fp,0(sp)
  81ff04:	dec00104 	addi	sp,sp,4
  81ff08:	f800283a 	ret

0081ff0c <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  81ff0c:	defff904 	addi	sp,sp,-28
  81ff10:	dfc00615 	stw	ra,24(sp)
  81ff14:	df000515 	stw	fp,20(sp)
  81ff18:	df000504 	addi	fp,sp,20
  81ff1c:	e13ffc15 	stw	r4,-16(fp)
  81ff20:	e17ffd15 	stw	r5,-12(fp)
  81ff24:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
  81ff28:	e13ffc17 	ldw	r4,-16(fp)
  81ff2c:	01400044 	movi	r5,1
  81ff30:	081fe980 	call	81fe98 <alt_up_audio_write_fifo_space>
  81ff34:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  81ff38:	e0bffb17 	ldw	r2,-20(fp)
  81ff3c:	10801868 	cmpgeui	r2,r2,97
  81ff40:	1000021e 	bne	r2,zero,81ff4c <alt_up_audio_play_r+0x40>
		return 0;
  81ff44:	e03fff15 	stw	zero,-4(fp)
  81ff48:	00000606 	br	81ff64 <alt_up_audio_play_r+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  81ff4c:	e13ffc17 	ldw	r4,-16(fp)
  81ff50:	e17ffd17 	ldw	r5,-12(fp)
  81ff54:	e1bffe17 	ldw	r6,-8(fp)
  81ff58:	01c00044 	movi	r7,1
  81ff5c:	08200f00 	call	8200f0 <alt_up_audio_write_fifo>
  81ff60:	e0bfff15 	stw	r2,-4(fp)
  81ff64:	e0bfff17 	ldw	r2,-4(fp)
}
  81ff68:	e037883a 	mov	sp,fp
  81ff6c:	dfc00117 	ldw	ra,4(sp)
  81ff70:	df000017 	ldw	fp,0(sp)
  81ff74:	dec00204 	addi	sp,sp,8
  81ff78:	f800283a 	ret

0081ff7c <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  81ff7c:	defff904 	addi	sp,sp,-28
  81ff80:	dfc00615 	stw	ra,24(sp)
  81ff84:	df000515 	stw	fp,20(sp)
  81ff88:	df000504 	addi	fp,sp,20
  81ff8c:	e13ffc15 	stw	r4,-16(fp)
  81ff90:	e17ffd15 	stw	r5,-12(fp)
  81ff94:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
  81ff98:	e13ffc17 	ldw	r4,-16(fp)
  81ff9c:	000b883a 	mov	r5,zero
  81ffa0:	081fe980 	call	81fe98 <alt_up_audio_write_fifo_space>
  81ffa4:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  81ffa8:	e0bffb17 	ldw	r2,-20(fp)
  81ffac:	10801868 	cmpgeui	r2,r2,97
  81ffb0:	1000021e 	bne	r2,zero,81ffbc <alt_up_audio_play_l+0x40>
		return 0;
  81ffb4:	e03fff15 	stw	zero,-4(fp)
  81ffb8:	00000606 	br	81ffd4 <alt_up_audio_play_l+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  81ffbc:	e13ffc17 	ldw	r4,-16(fp)
  81ffc0:	e17ffd17 	ldw	r5,-12(fp)
  81ffc4:	e1bffe17 	ldw	r6,-8(fp)
  81ffc8:	000f883a 	mov	r7,zero
  81ffcc:	08200f00 	call	8200f0 <alt_up_audio_write_fifo>
  81ffd0:	e0bfff15 	stw	r2,-4(fp)
  81ffd4:	e0bfff17 	ldw	r2,-4(fp)
}
  81ffd8:	e037883a 	mov	sp,fp
  81ffdc:	dfc00117 	ldw	ra,4(sp)
  81ffe0:	df000017 	ldw	fp,0(sp)
  81ffe4:	dec00204 	addi	sp,sp,8
  81ffe8:	f800283a 	ret

0081ffec <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  81ffec:	defff604 	addi	sp,sp,-40
  81fff0:	df000915 	stw	fp,36(sp)
  81fff4:	df000904 	addi	fp,sp,36
  81fff8:	e13ff915 	stw	r4,-28(fp)
  81fffc:	e17ffa15 	stw	r5,-24(fp)
  820000:	e1bffb15 	stw	r6,-20(fp)
  820004:	e1fffc15 	stw	r7,-16(fp)
	unsigned int fifospace;
	int count = 0;
  820008:	e03ff715 	stw	zero,-36(fp)
	while ( count < len ) 
  82000c:	00003006 	br	8200d0 <alt_up_audio_read_fifo+0xe4>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  820010:	e0bff917 	ldw	r2,-28(fp)
  820014:	10800a17 	ldw	r2,40(r2)
  820018:	10800104 	addi	r2,r2,4
  82001c:	10800037 	ldwio	r2,0(r2)
  820020:	e0bff815 	stw	r2,-32(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  820024:	e0bffc17 	ldw	r2,-16(fp)
  820028:	1004c03a 	cmpne	r2,r2,zero
  82002c:	1000051e 	bne	r2,zero,820044 <alt_up_audio_read_fifo+0x58>
  820030:	e0bff817 	ldw	r2,-32(fp)
  820034:	10bfc00c 	andi	r2,r2,65280
  820038:	1004d23a 	srli	r2,r2,8
  82003c:	e0bfff15 	stw	r2,-4(fp)
  820040:	00000306 	br	820050 <alt_up_audio_read_fifo+0x64>
  820044:	e0bff817 	ldw	r2,-32(fp)
  820048:	10803fcc 	andi	r2,r2,255
  82004c:	e0bfff15 	stw	r2,-4(fp)
  820050:	e0bfff17 	ldw	r2,-4(fp)
  820054:	e0bff815 	stw	r2,-32(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
  820058:	e0bff817 	ldw	r2,-32(fp)
  82005c:	1005003a 	cmpeq	r2,r2,zero
  820060:	10001e1e 	bne	r2,zero,8200dc <alt_up_audio_read_fifo+0xf0>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  820064:	e0bff717 	ldw	r2,-36(fp)
  820068:	1085883a 	add	r2,r2,r2
  82006c:	1085883a 	add	r2,r2,r2
  820070:	1007883a 	mov	r3,r2
  820074:	e0bffa17 	ldw	r2,-24(fp)
  820078:	1887883a 	add	r3,r3,r2
  82007c:	e0fffe15 	stw	r3,-8(fp)
  820080:	e0bffc17 	ldw	r2,-16(fp)
  820084:	1004c03a 	cmpne	r2,r2,zero
  820088:	1000061e 	bne	r2,zero,8200a4 <alt_up_audio_read_fifo+0xb8>
  82008c:	e0bff917 	ldw	r2,-28(fp)
  820090:	10800a17 	ldw	r2,40(r2)
  820094:	10800204 	addi	r2,r2,8
  820098:	10800037 	ldwio	r2,0(r2)
  82009c:	e0bffd15 	stw	r2,-12(fp)
  8200a0:	00000506 	br	8200b8 <alt_up_audio_read_fifo+0xcc>
  8200a4:	e0bff917 	ldw	r2,-28(fp)
  8200a8:	10800a17 	ldw	r2,40(r2)
  8200ac:	10800304 	addi	r2,r2,12
  8200b0:	10800037 	ldwio	r2,0(r2)
  8200b4:	e0bffd15 	stw	r2,-12(fp)
  8200b8:	e0fffd17 	ldw	r3,-12(fp)
  8200bc:	e0bffe17 	ldw	r2,-8(fp)
  8200c0:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  8200c4:	e0bff717 	ldw	r2,-36(fp)
  8200c8:	10800044 	addi	r2,r2,1
  8200cc:	e0bff715 	stw	r2,-36(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  8200d0:	e0fff717 	ldw	r3,-36(fp)
  8200d4:	e0bffb17 	ldw	r2,-20(fp)
  8200d8:	18bfcd16 	blt	r3,r2,820010 <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
  8200dc:	e0bff717 	ldw	r2,-36(fp)
}
  8200e0:	e037883a 	mov	sp,fp
  8200e4:	df000017 	ldw	fp,0(sp)
  8200e8:	dec00104 	addi	sp,sp,4
  8200ec:	f800283a 	ret

008200f0 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  8200f0:	defff804 	addi	sp,sp,-32
  8200f4:	df000715 	stw	fp,28(sp)
  8200f8:	df000704 	addi	fp,sp,28
  8200fc:	e13ffb15 	stw	r4,-20(fp)
  820100:	e17ffc15 	stw	r5,-16(fp)
  820104:	e1bffd15 	stw	r6,-12(fp)
  820108:	e1fffe15 	stw	r7,-8(fp)
	unsigned int fifospace;
	int count = 0;
  82010c:	e03ff915 	stw	zero,-28(fp)
	while ( count < len ) 
  820110:	00003a06 	br	8201fc <alt_up_audio_write_fifo+0x10c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  820114:	e0bffb17 	ldw	r2,-20(fp)
  820118:	10800a17 	ldw	r2,40(r2)
  82011c:	10800104 	addi	r2,r2,4
  820120:	10800037 	ldwio	r2,0(r2)
  820124:	e0bffa15 	stw	r2,-24(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  820128:	e0bffe17 	ldw	r2,-8(fp)
  82012c:	1004c03a 	cmpne	r2,r2,zero
  820130:	1000051e 	bne	r2,zero,820148 <alt_up_audio_write_fifo+0x58>
  820134:	e0bffa17 	ldw	r2,-24(fp)
  820138:	10bfc02c 	andhi	r2,r2,65280
  82013c:	1004d63a 	srli	r2,r2,24
  820140:	e0bfff15 	stw	r2,-4(fp)
  820144:	00000406 	br	820158 <alt_up_audio_write_fifo+0x68>
  820148:	e0bffa17 	ldw	r2,-24(fp)
  82014c:	10803fec 	andhi	r2,r2,255
  820150:	1004d43a 	srli	r2,r2,16
  820154:	e0bfff15 	stw	r2,-4(fp)
  820158:	e0bfff17 	ldw	r2,-4(fp)
  82015c:	e0bffa15 	stw	r2,-24(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
  820160:	e0bffa17 	ldw	r2,-24(fp)
  820164:	1005003a 	cmpeq	r2,r2,zero
  820168:	1000271e 	bne	r2,zero,820208 <alt_up_audio_write_fifo+0x118>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
  82016c:	e0bffe17 	ldw	r2,-8(fp)
  820170:	1004c03a 	cmpne	r2,r2,zero
  820174:	1000111e 	bne	r2,zero,8201bc <alt_up_audio_write_fifo+0xcc>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
  820178:	e0bffb17 	ldw	r2,-20(fp)
  82017c:	10800a17 	ldw	r2,40(r2)
  820180:	11000204 	addi	r4,r2,8
  820184:	e0bff917 	ldw	r2,-28(fp)
  820188:	1085883a 	add	r2,r2,r2
  82018c:	1085883a 	add	r2,r2,r2
  820190:	1007883a 	mov	r3,r2
  820194:	e0bffc17 	ldw	r2,-16(fp)
  820198:	1885883a 	add	r2,r3,r2
  82019c:	10800017 	ldw	r2,0(r2)
  8201a0:	1007883a 	mov	r3,r2
  8201a4:	e0bff917 	ldw	r2,-28(fp)
  8201a8:	10800044 	addi	r2,r2,1
  8201ac:	e0bff915 	stw	r2,-28(fp)
  8201b0:	2005883a 	mov	r2,r4
  8201b4:	10c00035 	stwio	r3,0(r2)
  8201b8:	00001006 	br	8201fc <alt_up_audio_write_fifo+0x10c>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
  8201bc:	e0bffb17 	ldw	r2,-20(fp)
  8201c0:	10800a17 	ldw	r2,40(r2)
  8201c4:	11000304 	addi	r4,r2,12
  8201c8:	e0bff917 	ldw	r2,-28(fp)
  8201cc:	1085883a 	add	r2,r2,r2
  8201d0:	1085883a 	add	r2,r2,r2
  8201d4:	1007883a 	mov	r3,r2
  8201d8:	e0bffc17 	ldw	r2,-16(fp)
  8201dc:	1885883a 	add	r2,r3,r2
  8201e0:	10800017 	ldw	r2,0(r2)
  8201e4:	1007883a 	mov	r3,r2
  8201e8:	e0bff917 	ldw	r2,-28(fp)
  8201ec:	10800044 	addi	r2,r2,1
  8201f0:	e0bff915 	stw	r2,-28(fp)
  8201f4:	2005883a 	mov	r2,r4
  8201f8:	10c00035 	stwio	r3,0(r2)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  8201fc:	e0fff917 	ldw	r3,-28(fp)
  820200:	e0bffd17 	ldw	r2,-12(fp)
  820204:	18bfc316 	blt	r3,r2,820114 <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
  820208:	e0bff917 	ldw	r2,-28(fp)
}
  82020c:	e037883a 	mov	sp,fp
  820210:	df000017 	ldw	fp,0(sp)
  820214:	dec00104 	addi	sp,sp,4
  820218:	f800283a 	ret

0082021c <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
  82021c:	defffc04 	addi	sp,sp,-16
  820220:	df000315 	stw	fp,12(sp)
  820224:	df000304 	addi	fp,sp,12
  820228:	e13ffd15 	stw	r4,-12(fp)
  82022c:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  820230:	e0bffe17 	ldw	r2,-8(fp)
  820234:	1004c03a 	cmpne	r2,r2,zero
  820238:	1000061e 	bne	r2,zero,820254 <alt_up_audio_read_fifo_head+0x38>
  82023c:	e0bffd17 	ldw	r2,-12(fp)
  820240:	10800a17 	ldw	r2,40(r2)
  820244:	10800204 	addi	r2,r2,8
  820248:	10800037 	ldwio	r2,0(r2)
  82024c:	e0bfff15 	stw	r2,-4(fp)
  820250:	00000506 	br	820268 <alt_up_audio_read_fifo_head+0x4c>
  820254:	e0bffd17 	ldw	r2,-12(fp)
  820258:	10800a17 	ldw	r2,40(r2)
  82025c:	10800304 	addi	r2,r2,12
  820260:	10800037 	ldwio	r2,0(r2)
  820264:	e0bfff15 	stw	r2,-4(fp)
  820268:	e0bfff17 	ldw	r2,-4(fp)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
  82026c:	e037883a 	mov	sp,fp
  820270:	df000017 	ldw	fp,0(sp)
  820274:	dec00104 	addi	sp,sp,4
  820278:	f800283a 	ret

0082027c <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
  82027c:	defffc04 	addi	sp,sp,-16
  820280:	df000315 	stw	fp,12(sp)
  820284:	df000304 	addi	fp,sp,12
  820288:	e13ffd15 	stw	r4,-12(fp)
  82028c:	e17ffe15 	stw	r5,-8(fp)
  820290:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
  820294:	e0bfff17 	ldw	r2,-4(fp)
  820298:	1004c03a 	cmpne	r2,r2,zero
  82029c:	1000061e 	bne	r2,zero,8202b8 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
  8202a0:	e0bffd17 	ldw	r2,-12(fp)
  8202a4:	10800a17 	ldw	r2,40(r2)
  8202a8:	10800204 	addi	r2,r2,8
  8202ac:	e0fffe17 	ldw	r3,-8(fp)
  8202b0:	10c00035 	stwio	r3,0(r2)
  8202b4:	00000506 	br	8202cc <alt_up_audio_write_fifo_head+0x50>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
  8202b8:	e0bffd17 	ldw	r2,-12(fp)
  8202bc:	10800a17 	ldw	r2,40(r2)
  8202c0:	10800304 	addi	r2,r2,12
  8202c4:	e0fffe17 	ldw	r3,-8(fp)
  8202c8:	10c00035 	stwio	r3,0(r2)
}
  8202cc:	e037883a 	mov	sp,fp
  8202d0:	df000017 	ldw	fp,0(sp)
  8202d4:	dec00104 	addi	sp,sp,4
  8202d8:	f800283a 	ret

008202dc <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
  8202dc:	defffc04 	addi	sp,sp,-16
  8202e0:	dfc00315 	stw	ra,12(sp)
  8202e4:	df000215 	stw	fp,8(sp)
  8202e8:	df000204 	addi	fp,sp,8
  8202ec:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
  8202f0:	e13fff17 	ldw	r4,-4(fp)
  8202f4:	014020b4 	movhi	r5,130
  8202f8:	2953f104 	addi	r5,r5,20420
  8202fc:	08213080 	call	821308 <alt_find_dev>
  820300:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
  820304:	e0bffe17 	ldw	r2,-8(fp)
  820308:	10800a17 	ldw	r2,40(r2)
  82030c:	10800104 	addi	r2,r2,4
  820310:	10800037 	ldwio	r2,0(r2)
  820314:	10803fec 	andhi	r2,r2,255
  820318:	1005d43a 	srai	r2,r2,16
  82031c:	1007883a 	mov	r3,r2
  820320:	e0bffe17 	ldw	r2,-8(fp)
  820324:	10c00b15 	stw	r3,44(r2)

  return dev;
  820328:	e0bffe17 	ldw	r2,-8(fp)
}
  82032c:	e037883a 	mov	sp,fp
  820330:	dfc00117 	ldw	ra,4(sp)
  820334:	df000017 	ldw	fp,0(sp)
  820338:	dec00204 	addi	sp,sp,8
  82033c:	f800283a 	ret

00820340 <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  820340:	defffc04 	addi	sp,sp,-16
  820344:	df000315 	stw	fp,12(sp)
  820348:	df000304 	addi	fp,sp,12
  82034c:	e13ffd15 	stw	r4,-12(fp)
  820350:	e17ffe15 	stw	r5,-8(fp)
  820354:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  820358:	e0bffd17 	ldw	r2,-12(fp)
  82035c:	10800a17 	ldw	r2,40(r2)
  820360:	11000204 	addi	r4,r2,8
  820364:	e0bffe17 	ldw	r2,-8(fp)
  820368:	10c03fcc 	andi	r3,r2,255
  82036c:	2005883a 	mov	r2,r4
  820370:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
  820374:	e0bffd17 	ldw	r2,-12(fp)
  820378:	10800a17 	ldw	r2,40(r2)
  82037c:	11000304 	addi	r4,r2,12
  820380:	e0bfff17 	ldw	r2,-4(fp)
  820384:	10ffffcc 	andi	r3,r2,65535
  820388:	2005883a 	mov	r2,r4
  82038c:	10c00035 	stwio	r3,0(r2)

	return 0;
  820390:	0005883a 	mov	r2,zero
}
  820394:	e037883a 	mov	sp,fp
  820398:	df000017 	ldw	fp,0(sp)
  82039c:	dec00104 	addi	sp,sp,4
  8203a0:	f800283a 	ret

008203a4 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
  8203a4:	defffa04 	addi	sp,sp,-24
  8203a8:	dfc00515 	stw	ra,20(sp)
  8203ac:	df000415 	stw	fp,16(sp)
  8203b0:	df000404 	addi	fp,sp,16
  8203b4:	e13ffc15 	stw	r4,-16(fp)
  8203b8:	e17ffd15 	stw	r5,-12(fp)
  8203bc:	e1bffe15 	stw	r6,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  8203c0:	e0bffc17 	ldw	r2,-16(fp)
  8203c4:	10800a17 	ldw	r2,40(r2)
  8203c8:	11000204 	addi	r4,r2,8
  8203cc:	e0bffd17 	ldw	r2,-12(fp)
  8203d0:	10c03fcc 	andi	r3,r2,255
  8203d4:	2005883a 	mov	r2,r4
  8203d8:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
  8203dc:	e0bffc17 	ldw	r2,-16(fp)
  8203e0:	10800a17 	ldw	r2,40(r2)
  8203e4:	10800304 	addi	r2,r2,12
  8203e8:	10800037 	ldwio	r2,0(r2)
  8203ec:	1007883a 	mov	r3,r2
  8203f0:	e0bffe17 	ldw	r2,-8(fp)
  8203f4:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
  8203f8:	e13ffc17 	ldw	r4,-16(fp)
  8203fc:	08204d00 	call	8204d0 <alt_up_av_config_read_acknowledge>
  820400:	1005003a 	cmpeq	r2,r2,zero
  820404:	1000031e 	bne	r2,zero,820414 <alt_up_av_config_read_data+0x70>
		return -1;
  820408:	00bfffc4 	movi	r2,-1
  82040c:	e0bfff15 	stw	r2,-4(fp)
  820410:	00000106 	br	820418 <alt_up_av_config_read_data+0x74>

	return 0;
  820414:	e03fff15 	stw	zero,-4(fp)
  820418:	e0bfff17 	ldw	r2,-4(fp)
}
  82041c:	e037883a 	mov	sp,fp
  820420:	dfc00117 	ldw	ra,4(sp)
  820424:	df000017 	ldw	fp,0(sp)
  820428:	dec00204 	addi	sp,sp,8
  82042c:	f800283a 	ret

00820430 <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
  820430:	defffe04 	addi	sp,sp,-8
  820434:	df000115 	stw	fp,4(sp)
  820438:	df000104 	addi	fp,sp,4
  82043c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
  820440:	e0bfff17 	ldw	r2,-4(fp)
  820444:	10800a17 	ldw	r2,40(r2)
  820448:	1007883a 	mov	r3,r2
  82044c:	00800044 	movi	r2,1
  820450:	18800025 	stbio	r2,0(r3)
	return 0;
  820454:	0005883a 	mov	r2,zero
}
  820458:	e037883a 	mov	sp,fp
  82045c:	df000017 	ldw	fp,0(sp)
  820460:	dec00104 	addi	sp,sp,4
  820464:	f800283a 	ret

00820468 <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
  820468:	defffe04 	addi	sp,sp,-8
  82046c:	df000115 	stw	fp,4(sp)
  820470:	df000104 	addi	fp,sp,4
  820474:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
  820478:	e0bfff17 	ldw	r2,-4(fp)
  82047c:	10800a17 	ldw	r2,40(r2)
  820480:	1007883a 	mov	r3,r2
  820484:	00800084 	movi	r2,2
  820488:	18800025 	stbio	r2,0(r3)
	return 0;
  82048c:	0005883a 	mov	r2,zero
}
  820490:	e037883a 	mov	sp,fp
  820494:	df000017 	ldw	fp,0(sp)
  820498:	dec00104 	addi	sp,sp,4
  82049c:	f800283a 	ret

008204a0 <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
  8204a0:	defffe04 	addi	sp,sp,-8
  8204a4:	df000115 	stw	fp,4(sp)
  8204a8:	df000104 	addi	fp,sp,4
  8204ac:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
  8204b0:	e0bfff17 	ldw	r2,-4(fp)
  8204b4:	10800a17 	ldw	r2,40(r2)
  8204b8:	10000025 	stbio	zero,0(r2)
	return 0;
  8204bc:	0005883a 	mov	r2,zero
}
  8204c0:	e037883a 	mov	sp,fp
  8204c4:	df000017 	ldw	fp,0(sp)
  8204c8:	dec00104 	addi	sp,sp,4
  8204cc:	f800283a 	ret

008204d0 <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
  8204d0:	defffd04 	addi	sp,sp,-12
  8204d4:	df000215 	stw	fp,8(sp)
  8204d8:	df000204 	addi	fp,sp,8
  8204dc:	e13ffe15 	stw	r4,-8(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
  8204e0:	e0bffe17 	ldw	r2,-8(fp)
  8204e4:	10800a17 	ldw	r2,40(r2)
  8204e8:	10800104 	addi	r2,r2,4
  8204ec:	10800037 	ldwio	r2,0(r2)
  8204f0:	1080008c 	andi	r2,r2,2
  8204f4:	1005d07a 	srai	r2,r2,1
  8204f8:	1005003a 	cmpeq	r2,r2,zero
  8204fc:	1000071e 	bne	r2,zero,82051c <alt_up_av_config_read_acknowledge+0x4c>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
  820500:	e0bffe17 	ldw	r2,-8(fp)
  820504:	10800a17 	ldw	r2,40(r2)
  820508:	10800104 	addi	r2,r2,4
  82050c:	10800037 	ldwio	r2,0(r2)
  820510:	1080004c 	andi	r2,r2,1
  820514:	e0bfff15 	stw	r2,-4(fp)
  820518:	00000206 	br	820524 <alt_up_av_config_read_acknowledge+0x54>
	return -1;
  82051c:	00bfffc4 	movi	r2,-1
  820520:	e0bfff15 	stw	r2,-4(fp)
  820524:	e0bfff17 	ldw	r2,-4(fp)
}
  820528:	e037883a 	mov	sp,fp
  82052c:	df000017 	ldw	fp,0(sp)
  820530:	dec00104 	addi	sp,sp,4
  820534:	f800283a 	ret

00820538 <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
  820538:	defffe04 	addi	sp,sp,-8
  82053c:	df000115 	stw	fp,4(sp)
  820540:	df000104 	addi	fp,sp,4
  820544:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
  820548:	e0bfff17 	ldw	r2,-4(fp)
  82054c:	10800a17 	ldw	r2,40(r2)
  820550:	10800104 	addi	r2,r2,4
  820554:	10800037 	ldwio	r2,0(r2)
  820558:	1080008c 	andi	r2,r2,2
  82055c:	1005d07a 	srai	r2,r2,1
}
  820560:	e037883a 	mov	sp,fp
  820564:	df000017 	ldw	fp,0(sp)
  820568:	dec00104 	addi	sp,sp,4
  82056c:	f800283a 	ret

00820570 <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  820570:	defff904 	addi	sp,sp,-28
  820574:	dfc00615 	stw	ra,24(sp)
  820578:	df000515 	stw	fp,20(sp)
  82057c:	df000504 	addi	fp,sp,20
  820580:	e13ffc15 	stw	r4,-16(fp)
  820584:	e17ffd15 	stw	r5,-12(fp)
  820588:	e1bffe15 	stw	r6,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  82058c:	e0bffc17 	ldw	r2,-16(fp)
  820590:	10800b17 	ldw	r2,44(r2)
  820594:	10800060 	cmpeqi	r2,r2,1
  820598:	10000f1e 	bne	r2,zero,8205d8 <alt_up_av_config_write_audio_cfg_register+0x68>
  82059c:	e0bffc17 	ldw	r2,-16(fp)
  8205a0:	10800b17 	ldw	r2,44(r2)
  8205a4:	108000a0 	cmpeqi	r2,r2,2
  8205a8:	10000b1e 	bne	r2,zero,8205d8 <alt_up_av_config_write_audio_cfg_register+0x68>
  8205ac:	e0bffc17 	ldw	r2,-16(fp)
  8205b0:	10800b17 	ldw	r2,44(r2)
  8205b4:	108000e0 	cmpeqi	r2,r2,3
  8205b8:	1000071e 	bne	r2,zero,8205d8 <alt_up_av_config_write_audio_cfg_register+0x68>
  8205bc:	e0bffc17 	ldw	r2,-16(fp)
  8205c0:	10800b17 	ldw	r2,44(r2)
  8205c4:	10800120 	cmpeqi	r2,r2,4
  8205c8:	1000031e 	bne	r2,zero,8205d8 <alt_up_av_config_write_audio_cfg_register+0x68>
		return -EINVAL;
  8205cc:	00bffa84 	movi	r2,-22
  8205d0:	e0bfff15 	stw	r2,-4(fp)
  8205d4:	00000b06 	br	820604 <alt_up_av_config_write_audio_cfg_register+0x94>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
  8205d8:	e03ffb15 	stw	zero,-20(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
  8205dc:	e0bffc17 	ldw	r2,-16(fp)
  8205e0:	10800a17 	ldw	r2,40(r2)
  8205e4:	10800084 	addi	r2,r2,2
  8205e8:	e0fffb17 	ldw	r3,-20(fp)
  8205ec:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  8205f0:	e13ffc17 	ldw	r4,-16(fp)
  8205f4:	e17ffd17 	ldw	r5,-12(fp)
  8205f8:	e1bffe17 	ldw	r6,-8(fp)
  8205fc:	08203400 	call	820340 <alt_up_av_config_write_data>
  820600:	e0bfff15 	stw	r2,-4(fp)
  820604:	e0bfff17 	ldw	r2,-4(fp)
}
  820608:	e037883a 	mov	sp,fp
  82060c:	dfc00117 	ldw	ra,4(sp)
  820610:	df000017 	ldw	fp,0(sp)
  820614:	dec00204 	addi	sp,sp,8
  820618:	f800283a 	ret

0082061c <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
  82061c:	defff904 	addi	sp,sp,-28
  820620:	dfc00615 	stw	ra,24(sp)
  820624:	df000515 	stw	fp,20(sp)
  820628:	df000504 	addi	fp,sp,20
  82062c:	e13ffb15 	stw	r4,-20(fp)
  820630:	e17ffc15 	stw	r5,-16(fp)
  820634:	e1bffd15 	stw	r6,-12(fp)
  820638:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  82063c:	e0bffb17 	ldw	r2,-20(fp)
  820640:	10800b17 	ldw	r2,44(r2)
  820644:	108000a0 	cmpeqi	r2,r2,2
  820648:	10000b1e 	bne	r2,zero,820678 <alt_up_av_config_read_video_cfg_register+0x5c>
  82064c:	e0bffb17 	ldw	r2,-20(fp)
  820650:	10800b17 	ldw	r2,44(r2)
  820654:	108000e0 	cmpeqi	r2,r2,3
  820658:	1000071e 	bne	r2,zero,820678 <alt_up_av_config_read_video_cfg_register+0x5c>
  82065c:	e0bffb17 	ldw	r2,-20(fp)
  820660:	10800b17 	ldw	r2,44(r2)
  820664:	10800120 	cmpeqi	r2,r2,4
  820668:	1000031e 	bne	r2,zero,820678 <alt_up_av_config_read_video_cfg_register+0x5c>
		return -EINVAL;
  82066c:	00bffa84 	movi	r2,-22
  820670:	e0bfff15 	stw	r2,-4(fp)
  820674:	00002106 	br	8206fc <alt_up_av_config_read_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  820678:	e0bffb17 	ldw	r2,-20(fp)
  82067c:	10800b17 	ldw	r2,44(r2)
  820680:	108000a0 	cmpeqi	r2,r2,2
  820684:	1000041e 	bne	r2,zero,820698 <alt_up_av_config_read_video_cfg_register+0x7c>
  820688:	e0bffb17 	ldw	r2,-20(fp)
  82068c:	10800b17 	ldw	r2,44(r2)
  820690:	10800118 	cmpnei	r2,r2,4
  820694:	1000061e 	bne	r2,zero,8206b0 <alt_up_av_config_read_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  820698:	e0bffe17 	ldw	r2,-8(fp)
  82069c:	10800060 	cmpeqi	r2,r2,1
  8206a0:	10000c1e 	bne	r2,zero,8206d4 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  8206a4:	00bffa84 	movi	r2,-22
  8206a8:	e0bfff15 	stw	r2,-4(fp)
  8206ac:	00001306 	br	8206fc <alt_up_av_config_read_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  8206b0:	e0bffe17 	ldw	r2,-8(fp)
  8206b4:	10800060 	cmpeqi	r2,r2,1
  8206b8:	1000061e 	bne	r2,zero,8206d4 <alt_up_av_config_read_video_cfg_register+0xb8>
  8206bc:	e0bffe17 	ldw	r2,-8(fp)
  8206c0:	108000a0 	cmpeqi	r2,r2,2
  8206c4:	1000031e 	bne	r2,zero,8206d4 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  8206c8:	00bffa84 	movi	r2,-22
  8206cc:	e0bfff15 	stw	r2,-4(fp)
  8206d0:	00000a06 	br	8206fc <alt_up_av_config_read_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  8206d4:	e0bffb17 	ldw	r2,-20(fp)
  8206d8:	10800a17 	ldw	r2,40(r2)
  8206dc:	10800084 	addi	r2,r2,2
  8206e0:	e0fffe17 	ldw	r3,-8(fp)
  8206e4:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_read_data(av_config, addr, data);
  8206e8:	e13ffb17 	ldw	r4,-20(fp)
  8206ec:	e17ffc17 	ldw	r5,-16(fp)
  8206f0:	e1bffd17 	ldw	r6,-12(fp)
  8206f4:	08203a40 	call	8203a4 <alt_up_av_config_read_data>
  8206f8:	e0bfff15 	stw	r2,-4(fp)
  8206fc:	e0bfff17 	ldw	r2,-4(fp)
}
  820700:	e037883a 	mov	sp,fp
  820704:	dfc00117 	ldw	ra,4(sp)
  820708:	df000017 	ldw	fp,0(sp)
  82070c:	dec00204 	addi	sp,sp,8
  820710:	f800283a 	ret

00820714 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
  820714:	defff904 	addi	sp,sp,-28
  820718:	dfc00615 	stw	ra,24(sp)
  82071c:	df000515 	stw	fp,20(sp)
  820720:	df000504 	addi	fp,sp,20
  820724:	e13ffb15 	stw	r4,-20(fp)
  820728:	e17ffc15 	stw	r5,-16(fp)
  82072c:	e1bffd15 	stw	r6,-12(fp)
  820730:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  820734:	e0bffb17 	ldw	r2,-20(fp)
  820738:	10800b17 	ldw	r2,44(r2)
  82073c:	108000a0 	cmpeqi	r2,r2,2
  820740:	10000b1e 	bne	r2,zero,820770 <alt_up_av_config_write_video_cfg_register+0x5c>
  820744:	e0bffb17 	ldw	r2,-20(fp)
  820748:	10800b17 	ldw	r2,44(r2)
  82074c:	108000e0 	cmpeqi	r2,r2,3
  820750:	1000071e 	bne	r2,zero,820770 <alt_up_av_config_write_video_cfg_register+0x5c>
  820754:	e0bffb17 	ldw	r2,-20(fp)
  820758:	10800b17 	ldw	r2,44(r2)
  82075c:	10800120 	cmpeqi	r2,r2,4
  820760:	1000031e 	bne	r2,zero,820770 <alt_up_av_config_write_video_cfg_register+0x5c>
		return -EINVAL;
  820764:	00bffa84 	movi	r2,-22
  820768:	e0bfff15 	stw	r2,-4(fp)
  82076c:	00002106 	br	8207f4 <alt_up_av_config_write_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  820770:	e0bffb17 	ldw	r2,-20(fp)
  820774:	10800b17 	ldw	r2,44(r2)
  820778:	108000a0 	cmpeqi	r2,r2,2
  82077c:	1000041e 	bne	r2,zero,820790 <alt_up_av_config_write_video_cfg_register+0x7c>
  820780:	e0bffb17 	ldw	r2,-20(fp)
  820784:	10800b17 	ldw	r2,44(r2)
  820788:	10800118 	cmpnei	r2,r2,4
  82078c:	1000061e 	bne	r2,zero,8207a8 <alt_up_av_config_write_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  820790:	e0bffe17 	ldw	r2,-8(fp)
  820794:	10800060 	cmpeqi	r2,r2,1
  820798:	10000c1e 	bne	r2,zero,8207cc <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  82079c:	00bffa84 	movi	r2,-22
  8207a0:	e0bfff15 	stw	r2,-4(fp)
  8207a4:	00001306 	br	8207f4 <alt_up_av_config_write_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  8207a8:	e0bffe17 	ldw	r2,-8(fp)
  8207ac:	10800060 	cmpeqi	r2,r2,1
  8207b0:	1000061e 	bne	r2,zero,8207cc <alt_up_av_config_write_video_cfg_register+0xb8>
  8207b4:	e0bffe17 	ldw	r2,-8(fp)
  8207b8:	108000a0 	cmpeqi	r2,r2,2
  8207bc:	1000031e 	bne	r2,zero,8207cc <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  8207c0:	00bffa84 	movi	r2,-22
  8207c4:	e0bfff15 	stw	r2,-4(fp)
  8207c8:	00000a06 	br	8207f4 <alt_up_av_config_write_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  8207cc:	e0bffb17 	ldw	r2,-20(fp)
  8207d0:	10800a17 	ldw	r2,40(r2)
  8207d4:	10800084 	addi	r2,r2,2
  8207d8:	e0fffe17 	ldw	r3,-8(fp)
  8207dc:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  8207e0:	e13ffb17 	ldw	r4,-20(fp)
  8207e4:	e17ffc17 	ldw	r5,-16(fp)
  8207e8:	e1bffd17 	ldw	r6,-12(fp)
  8207ec:	08203400 	call	820340 <alt_up_av_config_write_data>
  8207f0:	e0bfff15 	stw	r2,-4(fp)
  8207f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8207f8:	e037883a 	mov	sp,fp
  8207fc:	dfc00117 	ldw	ra,4(sp)
  820800:	df000017 	ldw	fp,0(sp)
  820804:	dec00204 	addi	sp,sp,8
  820808:	f800283a 	ret

0082080c <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  82080c:	defffa04 	addi	sp,sp,-24
  820810:	dfc00515 	stw	ra,20(sp)
  820814:	df000415 	stw	fp,16(sp)
  820818:	df000404 	addi	fp,sp,16
  82081c:	e13ffc15 	stw	r4,-16(fp)
  820820:	e17ffd15 	stw	r5,-12(fp)
  820824:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  820828:	e0bffc17 	ldw	r2,-16(fp)
  82082c:	10800b17 	ldw	r2,44(r2)
  820830:	10800220 	cmpeqi	r2,r2,8
  820834:	1000031e 	bne	r2,zero,820844 <alt_up_av_config_read_DC2_cfg_register+0x38>
		return -EINVAL;
  820838:	00bffa84 	movi	r2,-22
  82083c:	e0bfff15 	stw	r2,-4(fp)
  820840:	00000506 	br	820858 <alt_up_av_config_read_DC2_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  820844:	e13ffc17 	ldw	r4,-16(fp)
  820848:	e17ffd17 	ldw	r5,-12(fp)
  82084c:	e1bffe17 	ldw	r6,-8(fp)
  820850:	08203a40 	call	8203a4 <alt_up_av_config_read_data>
  820854:	e0bfff15 	stw	r2,-4(fp)
  820858:	e0bfff17 	ldw	r2,-4(fp)
}
  82085c:	e037883a 	mov	sp,fp
  820860:	dfc00117 	ldw	ra,4(sp)
  820864:	df000017 	ldw	fp,0(sp)
  820868:	dec00204 	addi	sp,sp,8
  82086c:	f800283a 	ret

00820870 <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  820870:	defffa04 	addi	sp,sp,-24
  820874:	dfc00515 	stw	ra,20(sp)
  820878:	df000415 	stw	fp,16(sp)
  82087c:	df000404 	addi	fp,sp,16
  820880:	e13ffc15 	stw	r4,-16(fp)
  820884:	e17ffd15 	stw	r5,-12(fp)
  820888:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  82088c:	e0bffc17 	ldw	r2,-16(fp)
  820890:	10800b17 	ldw	r2,44(r2)
  820894:	10800220 	cmpeqi	r2,r2,8
  820898:	1000031e 	bne	r2,zero,8208a8 <alt_up_av_config_write_DC2_cfg_register+0x38>
		return -EINVAL;
  82089c:	00bffa84 	movi	r2,-22
  8208a0:	e0bfff15 	stw	r2,-4(fp)
  8208a4:	00000506 	br	8208bc <alt_up_av_config_write_DC2_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  8208a8:	e13ffc17 	ldw	r4,-16(fp)
  8208ac:	e17ffd17 	ldw	r5,-12(fp)
  8208b0:	e1bffe17 	ldw	r6,-8(fp)
  8208b4:	08203400 	call	820340 <alt_up_av_config_write_data>
  8208b8:	e0bfff15 	stw	r2,-4(fp)
  8208bc:	e0bfff17 	ldw	r2,-4(fp)
}
  8208c0:	e037883a 	mov	sp,fp
  8208c4:	dfc00117 	ldw	ra,4(sp)
  8208c8:	df000017 	ldw	fp,0(sp)
  8208cc:	dec00204 	addi	sp,sp,8
  8208d0:	f800283a 	ret

008208d4 <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  8208d4:	defffa04 	addi	sp,sp,-24
  8208d8:	dfc00515 	stw	ra,20(sp)
  8208dc:	df000415 	stw	fp,16(sp)
  8208e0:	df000404 	addi	fp,sp,16
  8208e4:	e13ffc15 	stw	r4,-16(fp)
  8208e8:	e17ffd15 	stw	r5,-12(fp)
  8208ec:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  8208f0:	e0bffc17 	ldw	r2,-16(fp)
  8208f4:	10800b17 	ldw	r2,44(r2)
  8208f8:	10800260 	cmpeqi	r2,r2,9
  8208fc:	1000031e 	bne	r2,zero,82090c <alt_up_av_config_read_D5M_cfg_register+0x38>
		return -EINVAL;
  820900:	00bffa84 	movi	r2,-22
  820904:	e0bfff15 	stw	r2,-4(fp)
  820908:	00000506 	br	820920 <alt_up_av_config_read_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_read_data(av_config, addr, data);
  82090c:	e13ffc17 	ldw	r4,-16(fp)
  820910:	e17ffd17 	ldw	r5,-12(fp)
  820914:	e1bffe17 	ldw	r6,-8(fp)
  820918:	08203a40 	call	8203a4 <alt_up_av_config_read_data>
  82091c:	e0bfff15 	stw	r2,-4(fp)
  820920:	e0bfff17 	ldw	r2,-4(fp)
}
  820924:	e037883a 	mov	sp,fp
  820928:	dfc00117 	ldw	ra,4(sp)
  82092c:	df000017 	ldw	fp,0(sp)
  820930:	dec00204 	addi	sp,sp,8
  820934:	f800283a 	ret

00820938 <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  820938:	defffa04 	addi	sp,sp,-24
  82093c:	dfc00515 	stw	ra,20(sp)
  820940:	df000415 	stw	fp,16(sp)
  820944:	df000404 	addi	fp,sp,16
  820948:	e13ffc15 	stw	r4,-16(fp)
  82094c:	e17ffd15 	stw	r5,-12(fp)
  820950:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  820954:	e0bffc17 	ldw	r2,-16(fp)
  820958:	10800b17 	ldw	r2,44(r2)
  82095c:	10800260 	cmpeqi	r2,r2,9
  820960:	1000031e 	bne	r2,zero,820970 <alt_up_av_config_write_D5M_cfg_register+0x38>
		return -EINVAL;
  820964:	00bffa84 	movi	r2,-22
  820968:	e0bfff15 	stw	r2,-4(fp)
  82096c:	00000506 	br	820984 <alt_up_av_config_write_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_write_data(av_config, addr, data);
  820970:	e13ffc17 	ldw	r4,-16(fp)
  820974:	e17ffd17 	ldw	r5,-12(fp)
  820978:	e1bffe17 	ldw	r6,-8(fp)
  82097c:	08203400 	call	820340 <alt_up_av_config_write_data>
  820980:	e0bfff15 	stw	r2,-4(fp)
  820984:	e0bfff17 	ldw	r2,-4(fp)
}
  820988:	e037883a 	mov	sp,fp
  82098c:	dfc00117 	ldw	ra,4(sp)
  820990:	df000017 	ldw	fp,0(sp)
  820994:	dec00204 	addi	sp,sp,8
  820998:	f800283a 	ret

0082099c <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  82099c:	defffa04 	addi	sp,sp,-24
  8209a0:	dfc00515 	stw	ra,20(sp)
  8209a4:	df000415 	stw	fp,16(sp)
  8209a8:	df000404 	addi	fp,sp,16
  8209ac:	e13ffc15 	stw	r4,-16(fp)
  8209b0:	e17ffd15 	stw	r5,-12(fp)
  8209b4:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  8209b8:	e0bffc17 	ldw	r2,-16(fp)
  8209bc:	10800b17 	ldw	r2,44(r2)
  8209c0:	108002a0 	cmpeqi	r2,r2,10
  8209c4:	1000031e 	bne	r2,zero,8209d4 <alt_up_av_config_read_LTM_cfg_register+0x38>
		return -EINVAL;
  8209c8:	00bffa84 	movi	r2,-22
  8209cc:	e0bfff15 	stw	r2,-4(fp)
  8209d0:	00000506 	br	8209e8 <alt_up_av_config_read_LTM_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  8209d4:	e13ffc17 	ldw	r4,-16(fp)
  8209d8:	e17ffd17 	ldw	r5,-12(fp)
  8209dc:	e1bffe17 	ldw	r6,-8(fp)
  8209e0:	08203a40 	call	8203a4 <alt_up_av_config_read_data>
  8209e4:	e0bfff15 	stw	r2,-4(fp)
  8209e8:	e0bfff17 	ldw	r2,-4(fp)
}
  8209ec:	e037883a 	mov	sp,fp
  8209f0:	dfc00117 	ldw	ra,4(sp)
  8209f4:	df000017 	ldw	fp,0(sp)
  8209f8:	dec00204 	addi	sp,sp,8
  8209fc:	f800283a 	ret

00820a00 <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  820a00:	defffa04 	addi	sp,sp,-24
  820a04:	dfc00515 	stw	ra,20(sp)
  820a08:	df000415 	stw	fp,16(sp)
  820a0c:	df000404 	addi	fp,sp,16
  820a10:	e13ffc15 	stw	r4,-16(fp)
  820a14:	e17ffd15 	stw	r5,-12(fp)
  820a18:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  820a1c:	e0bffc17 	ldw	r2,-16(fp)
  820a20:	10800b17 	ldw	r2,44(r2)
  820a24:	108002a0 	cmpeqi	r2,r2,10
  820a28:	1000031e 	bne	r2,zero,820a38 <alt_up_av_config_write_LTM_cfg_register+0x38>
		return -EINVAL;
  820a2c:	00bffa84 	movi	r2,-22
  820a30:	e0bfff15 	stw	r2,-4(fp)
  820a34:	00000506 	br	820a4c <alt_up_av_config_write_LTM_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  820a38:	e13ffc17 	ldw	r4,-16(fp)
  820a3c:	e17ffd17 	ldw	r5,-12(fp)
  820a40:	e1bffe17 	ldw	r6,-8(fp)
  820a44:	08203400 	call	820340 <alt_up_av_config_write_data>
  820a48:	e0bfff15 	stw	r2,-4(fp)
  820a4c:	e0bfff17 	ldw	r2,-4(fp)
}
  820a50:	e037883a 	mov	sp,fp
  820a54:	dfc00117 	ldw	ra,4(sp)
  820a58:	df000017 	ldw	fp,0(sp)
  820a5c:	dec00204 	addi	sp,sp,8
  820a60:	f800283a 	ret

00820a64 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  820a64:	defffc04 	addi	sp,sp,-16
  820a68:	df000315 	stw	fp,12(sp)
  820a6c:	df000304 	addi	fp,sp,12
  820a70:	e13ffe15 	stw	r4,-8(fp)
  820a74:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  820a78:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  820a7c:	e0bfff17 	ldw	r2,-4(fp)
  820a80:	1004c03a 	cmpne	r2,r2,zero
  820a84:	1000061e 	bne	r2,zero,820aa0 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  820a88:	e0bffe17 	ldw	r2,-8(fp)
  820a8c:	1007883a 	mov	r3,r2
  820a90:	e0bffd03 	ldbu	r2,-12(fp)
  820a94:	10c4b03a 	or	r2,r2,r3
  820a98:	e0bffd05 	stb	r2,-12(fp)
  820a9c:	00000806 	br	820ac0 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  820aa0:	e0bffe17 	ldw	r2,-8(fp)
  820aa4:	1007883a 	mov	r3,r2
  820aa8:	e0bffd03 	ldbu	r2,-12(fp)
  820aac:	10c4b03a 	or	r2,r2,r3
  820ab0:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  820ab4:	e0bffd03 	ldbu	r2,-12(fp)
  820ab8:	10801014 	ori	r2,r2,64
  820abc:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  820ac0:	e0fffd03 	ldbu	r3,-12(fp)
  820ac4:	00bfe004 	movi	r2,-128
  820ac8:	1884b03a 	or	r2,r3,r2
  820acc:	10803fcc 	andi	r2,r2,255
}
  820ad0:	e037883a 	mov	sp,fp
  820ad4:	df000017 	ldw	fp,0(sp)
  820ad8:	dec00104 	addi	sp,sp,4
  820adc:	f800283a 	ret

00820ae0 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  820ae0:	defffd04 	addi	sp,sp,-12
  820ae4:	df000215 	stw	fp,8(sp)
  820ae8:	df000204 	addi	fp,sp,8
  820aec:	e13ffe15 	stw	r4,-8(fp)
  820af0:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  820af4:	e0bffe17 	ldw	r2,-8(fp)
  820af8:	10800a17 	ldw	r2,40(r2)
  820afc:	e0ffff03 	ldbu	r3,-4(fp)
  820b00:	10c00025 	stbio	r3,0(r2)
}
  820b04:	e037883a 	mov	sp,fp
  820b08:	df000017 	ldw	fp,0(sp)
  820b0c:	dec00104 	addi	sp,sp,4
  820b10:	f800283a 	ret

00820b14 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  820b14:	defffe04 	addi	sp,sp,-8
  820b18:	df000115 	stw	fp,4(sp)
  820b1c:	df000104 	addi	fp,sp,4
  820b20:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  820b24:	e0bfff17 	ldw	r2,-4(fp)
  820b28:	10800a17 	ldw	r2,40(r2)
  820b2c:	1007883a 	mov	r3,r2
  820b30:	00800044 	movi	r2,1
  820b34:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  820b38:	e037883a 	mov	sp,fp
  820b3c:	df000017 	ldw	fp,0(sp)
  820b40:	dec00104 	addi	sp,sp,4
  820b44:	f800283a 	ret

00820b48 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  820b48:	defffc04 	addi	sp,sp,-16
  820b4c:	dfc00315 	stw	ra,12(sp)
  820b50:	df000215 	stw	fp,8(sp)
  820b54:	df000204 	addi	fp,sp,8
  820b58:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  820b5c:	e13fff17 	ldw	r4,-4(fp)
  820b60:	014020b4 	movhi	r5,130
  820b64:	2953f104 	addi	r5,r5,20420
  820b68:	08213080 	call	821308 <alt_find_dev>
  820b6c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  820b70:	e0bffe17 	ldw	r2,-8(fp)
}
  820b74:	e037883a 	mov	sp,fp
  820b78:	dfc00117 	ldw	ra,4(sp)
  820b7c:	df000017 	ldw	fp,0(sp)
  820b80:	dec00204 	addi	sp,sp,8
  820b84:	f800283a 	ret

00820b88 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  820b88:	defffb04 	addi	sp,sp,-20
  820b8c:	df000415 	stw	fp,16(sp)
  820b90:	df000404 	addi	fp,sp,16
  820b94:	e13ffd15 	stw	r4,-12(fp)
  820b98:	e17ffe15 	stw	r5,-8(fp)
  820b9c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  820ba0:	e03ffc15 	stw	zero,-16(fp)
  820ba4:	00000f06 	br	820be4 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  820ba8:	e0bffd17 	ldw	r2,-12(fp)
  820bac:	10800a17 	ldw	r2,40(r2)
  820bb0:	11000044 	addi	r4,r2,1
  820bb4:	e0fffc17 	ldw	r3,-16(fp)
  820bb8:	e0bffe17 	ldw	r2,-8(fp)
  820bbc:	1885883a 	add	r2,r3,r2
  820bc0:	10800003 	ldbu	r2,0(r2)
  820bc4:	10c03fcc 	andi	r3,r2,255
  820bc8:	18c0201c 	xori	r3,r3,128
  820bcc:	18ffe004 	addi	r3,r3,-128
  820bd0:	2005883a 	mov	r2,r4
  820bd4:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  820bd8:	e0bffc17 	ldw	r2,-16(fp)
  820bdc:	10800044 	addi	r2,r2,1
  820be0:	e0bffc15 	stw	r2,-16(fp)
  820be4:	e0fffc17 	ldw	r3,-16(fp)
  820be8:	e0bfff17 	ldw	r2,-4(fp)
  820bec:	18bfee36 	bltu	r3,r2,820ba8 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  820bf0:	e037883a 	mov	sp,fp
  820bf4:	df000017 	ldw	fp,0(sp)
  820bf8:	dec00104 	addi	sp,sp,4
  820bfc:	f800283a 	ret

00820c00 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  820c00:	defffd04 	addi	sp,sp,-12
  820c04:	df000215 	stw	fp,8(sp)
  820c08:	df000204 	addi	fp,sp,8
  820c0c:	e13ffe15 	stw	r4,-8(fp)
  820c10:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  820c14:	00000d06 	br	820c4c <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  820c18:	e0bffe17 	ldw	r2,-8(fp)
  820c1c:	10800a17 	ldw	r2,40(r2)
  820c20:	11000044 	addi	r4,r2,1
  820c24:	e0bfff17 	ldw	r2,-4(fp)
  820c28:	10800003 	ldbu	r2,0(r2)
  820c2c:	10c03fcc 	andi	r3,r2,255
  820c30:	18c0201c 	xori	r3,r3,128
  820c34:	18ffe004 	addi	r3,r3,-128
  820c38:	2005883a 	mov	r2,r4
  820c3c:	10c00025 	stbio	r3,0(r2)
		++ptr;
  820c40:	e0bfff17 	ldw	r2,-4(fp)
  820c44:	10800044 	addi	r2,r2,1
  820c48:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  820c4c:	e0bfff17 	ldw	r2,-4(fp)
  820c50:	10800003 	ldbu	r2,0(r2)
  820c54:	10803fcc 	andi	r2,r2,255
  820c58:	1080201c 	xori	r2,r2,128
  820c5c:	10bfe004 	addi	r2,r2,-128
  820c60:	1004c03a 	cmpne	r2,r2,zero
  820c64:	103fec1e 	bne	r2,zero,820c18 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  820c68:	e037883a 	mov	sp,fp
  820c6c:	df000017 	ldw	fp,0(sp)
  820c70:	dec00104 	addi	sp,sp,4
  820c74:	f800283a 	ret

00820c78 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  820c78:	defffb04 	addi	sp,sp,-20
  820c7c:	dfc00415 	stw	ra,16(sp)
  820c80:	df000315 	stw	fp,12(sp)
  820c84:	df000304 	addi	fp,sp,12
  820c88:	e13ffd15 	stw	r4,-12(fp)
  820c8c:	e17ffe15 	stw	r5,-8(fp)
  820c90:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  820c94:	e0bffd17 	ldw	r2,-12(fp)
  820c98:	10800017 	ldw	r2,0(r2)
  820c9c:	1009883a 	mov	r4,r2
  820ca0:	e1bfff17 	ldw	r6,-4(fp)
  820ca4:	e17ffe17 	ldw	r5,-8(fp)
  820ca8:	0820b880 	call	820b88 <alt_up_character_lcd_write>
	return 0;
  820cac:	0005883a 	mov	r2,zero
}
  820cb0:	e037883a 	mov	sp,fp
  820cb4:	dfc00117 	ldw	ra,4(sp)
  820cb8:	df000017 	ldw	fp,0(sp)
  820cbc:	dec00204 	addi	sp,sp,8
  820cc0:	f800283a 	ret

00820cc4 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  820cc4:	defff904 	addi	sp,sp,-28
  820cc8:	dfc00615 	stw	ra,24(sp)
  820ccc:	df000515 	stw	fp,20(sp)
  820cd0:	df000504 	addi	fp,sp,20
  820cd4:	e13ffc15 	stw	r4,-16(fp)
  820cd8:	e17ffd15 	stw	r5,-12(fp)
  820cdc:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  820ce0:	e0bffd17 	ldw	r2,-12(fp)
  820ce4:	10800a28 	cmpgeui	r2,r2,40
  820ce8:	1000031e 	bne	r2,zero,820cf8 <alt_up_character_lcd_set_cursor_pos+0x34>
  820cec:	e0bffe17 	ldw	r2,-8(fp)
  820cf0:	108000b0 	cmpltui	r2,r2,2
  820cf4:	1000031e 	bne	r2,zero,820d04 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  820cf8:	00bfffc4 	movi	r2,-1
  820cfc:	e0bfff15 	stw	r2,-4(fp)
  820d00:	00000806 	br	820d24 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  820d04:	e13ffd17 	ldw	r4,-12(fp)
  820d08:	e17ffe17 	ldw	r5,-8(fp)
  820d0c:	0820a640 	call	820a64 <get_DDRAM_addr>
  820d10:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  820d14:	e17ffb03 	ldbu	r5,-20(fp)
  820d18:	e13ffc17 	ldw	r4,-16(fp)
  820d1c:	0820ae00 	call	820ae0 <alt_up_character_lcd_send_cmd>
	return 0;
  820d20:	e03fff15 	stw	zero,-4(fp)
  820d24:	e0bfff17 	ldw	r2,-4(fp)
}
  820d28:	e037883a 	mov	sp,fp
  820d2c:	dfc00117 	ldw	ra,4(sp)
  820d30:	df000017 	ldw	fp,0(sp)
  820d34:	dec00204 	addi	sp,sp,8
  820d38:	f800283a 	ret

00820d3c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  820d3c:	defff904 	addi	sp,sp,-28
  820d40:	dfc00615 	stw	ra,24(sp)
  820d44:	df000515 	stw	fp,20(sp)
  820d48:	df000504 	addi	fp,sp,20
  820d4c:	e13ffc15 	stw	r4,-16(fp)
  820d50:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  820d54:	e0bffd17 	ldw	r2,-12(fp)
  820d58:	1005003a 	cmpeq	r2,r2,zero
  820d5c:	10001e1e 	bne	r2,zero,820dd8 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  820d60:	e0bffd17 	ldw	r2,-12(fp)
  820d64:	10800050 	cmplti	r2,r2,1
  820d68:	1000031e 	bne	r2,zero,820d78 <alt_up_character_lcd_shift_cursor+0x3c>
  820d6c:	00800504 	movi	r2,20
  820d70:	e0bfff05 	stb	r2,-4(fp)
  820d74:	00000206 	br	820d80 <alt_up_character_lcd_shift_cursor+0x44>
  820d78:	00c00404 	movi	r3,16
  820d7c:	e0ffff05 	stb	r3,-4(fp)
  820d80:	e0bfff03 	ldbu	r2,-4(fp)
  820d84:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  820d88:	e0fffd17 	ldw	r3,-12(fp)
  820d8c:	e0fffe15 	stw	r3,-8(fp)
  820d90:	e0fffe17 	ldw	r3,-8(fp)
  820d94:	1804403a 	cmpge	r2,r3,zero
  820d98:	1000031e 	bne	r2,zero,820da8 <alt_up_character_lcd_shift_cursor+0x6c>
  820d9c:	e0bffe17 	ldw	r2,-8(fp)
  820da0:	0085c83a 	sub	r2,zero,r2
  820da4:	e0bffe15 	stw	r2,-8(fp)
  820da8:	e0fffe17 	ldw	r3,-8(fp)
  820dac:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  820db0:	00000306 	br	820dc0 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  820db4:	e17ffb43 	ldbu	r5,-19(fp)
  820db8:	e13ffc17 	ldw	r4,-16(fp)
  820dbc:	0820ae00 	call	820ae0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  820dc0:	e0bffb03 	ldbu	r2,-20(fp)
  820dc4:	10bfffc4 	addi	r2,r2,-1
  820dc8:	e0bffb05 	stb	r2,-20(fp)
  820dcc:	e0bffb03 	ldbu	r2,-20(fp)
  820dd0:	10803fd8 	cmpnei	r2,r2,255
  820dd4:	103ff71e 	bne	r2,zero,820db4 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  820dd8:	e037883a 	mov	sp,fp
  820ddc:	dfc00117 	ldw	ra,4(sp)
  820de0:	df000017 	ldw	fp,0(sp)
  820de4:	dec00204 	addi	sp,sp,8
  820de8:	f800283a 	ret

00820dec <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  820dec:	defff904 	addi	sp,sp,-28
  820df0:	dfc00615 	stw	ra,24(sp)
  820df4:	df000515 	stw	fp,20(sp)
  820df8:	df000504 	addi	fp,sp,20
  820dfc:	e13ffc15 	stw	r4,-16(fp)
  820e00:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  820e04:	e0bffd17 	ldw	r2,-12(fp)
  820e08:	1005003a 	cmpeq	r2,r2,zero
  820e0c:	10001e1e 	bne	r2,zero,820e88 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  820e10:	e0bffd17 	ldw	r2,-12(fp)
  820e14:	10800050 	cmplti	r2,r2,1
  820e18:	1000031e 	bne	r2,zero,820e28 <alt_up_character_lcd_shift_display+0x3c>
  820e1c:	00800704 	movi	r2,28
  820e20:	e0bfff05 	stb	r2,-4(fp)
  820e24:	00000206 	br	820e30 <alt_up_character_lcd_shift_display+0x44>
  820e28:	00c00604 	movi	r3,24
  820e2c:	e0ffff05 	stb	r3,-4(fp)
  820e30:	e0bfff03 	ldbu	r2,-4(fp)
  820e34:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  820e38:	e0fffd17 	ldw	r3,-12(fp)
  820e3c:	e0fffe15 	stw	r3,-8(fp)
  820e40:	e0fffe17 	ldw	r3,-8(fp)
  820e44:	1804403a 	cmpge	r2,r3,zero
  820e48:	1000031e 	bne	r2,zero,820e58 <alt_up_character_lcd_shift_display+0x6c>
  820e4c:	e0bffe17 	ldw	r2,-8(fp)
  820e50:	0085c83a 	sub	r2,zero,r2
  820e54:	e0bffe15 	stw	r2,-8(fp)
  820e58:	e0fffe17 	ldw	r3,-8(fp)
  820e5c:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  820e60:	00000306 	br	820e70 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  820e64:	e17ffb43 	ldbu	r5,-19(fp)
  820e68:	e13ffc17 	ldw	r4,-16(fp)
  820e6c:	0820ae00 	call	820ae0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  820e70:	e0bffb03 	ldbu	r2,-20(fp)
  820e74:	10bfffc4 	addi	r2,r2,-1
  820e78:	e0bffb05 	stb	r2,-20(fp)
  820e7c:	e0bffb03 	ldbu	r2,-20(fp)
  820e80:	10803fd8 	cmpnei	r2,r2,255
  820e84:	103ff71e 	bne	r2,zero,820e64 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  820e88:	e037883a 	mov	sp,fp
  820e8c:	dfc00117 	ldw	ra,4(sp)
  820e90:	df000017 	ldw	fp,0(sp)
  820e94:	dec00204 	addi	sp,sp,8
  820e98:	f800283a 	ret

00820e9c <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  820e9c:	defff904 	addi	sp,sp,-28
  820ea0:	dfc00615 	stw	ra,24(sp)
  820ea4:	df000515 	stw	fp,20(sp)
  820ea8:	df000504 	addi	fp,sp,20
  820eac:	e13ffc15 	stw	r4,-16(fp)
  820eb0:	e17ffd15 	stw	r5,-12(fp)
  820eb4:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  820eb8:	e0bffd17 	ldw	r2,-12(fp)
  820ebc:	10800a28 	cmpgeui	r2,r2,40
  820ec0:	1000031e 	bne	r2,zero,820ed0 <alt_up_character_lcd_erase_pos+0x34>
  820ec4:	e0bffe17 	ldw	r2,-8(fp)
  820ec8:	108000b0 	cmpltui	r2,r2,2
  820ecc:	1000031e 	bne	r2,zero,820edc <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  820ed0:	00bfffc4 	movi	r2,-1
  820ed4:	e0bfff15 	stw	r2,-4(fp)
  820ed8:	00000e06 	br	820f14 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  820edc:	e13ffd17 	ldw	r4,-12(fp)
  820ee0:	e17ffe17 	ldw	r5,-8(fp)
  820ee4:	0820a640 	call	820a64 <get_DDRAM_addr>
  820ee8:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  820eec:	e17ffb03 	ldbu	r5,-20(fp)
  820ef0:	e13ffc17 	ldw	r4,-16(fp)
  820ef4:	0820ae00 	call	820ae0 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
  820ef8:	e0bffc17 	ldw	r2,-16(fp)
  820efc:	10800a17 	ldw	r2,40(r2)
  820f00:	10800044 	addi	r2,r2,1
  820f04:	1007883a 	mov	r3,r2
  820f08:	00800084 	movi	r2,2
  820f0c:	18800025 	stbio	r2,0(r3)
	return 0;
  820f10:	e03fff15 	stw	zero,-4(fp)
  820f14:	e0bfff17 	ldw	r2,-4(fp)
}
  820f18:	e037883a 	mov	sp,fp
  820f1c:	dfc00117 	ldw	ra,4(sp)
  820f20:	df000017 	ldw	fp,0(sp)
  820f24:	dec00204 	addi	sp,sp,8
  820f28:	f800283a 	ret

00820f2c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  820f2c:	defffd04 	addi	sp,sp,-12
  820f30:	dfc00215 	stw	ra,8(sp)
  820f34:	df000115 	stw	fp,4(sp)
  820f38:	df000104 	addi	fp,sp,4
  820f3c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  820f40:	e13fff17 	ldw	r4,-4(fp)
  820f44:	01400304 	movi	r5,12
  820f48:	0820ae00 	call	820ae0 <alt_up_character_lcd_send_cmd>
}
  820f4c:	e037883a 	mov	sp,fp
  820f50:	dfc00117 	ldw	ra,4(sp)
  820f54:	df000017 	ldw	fp,0(sp)
  820f58:	dec00204 	addi	sp,sp,8
  820f5c:	f800283a 	ret

00820f60 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  820f60:	defffd04 	addi	sp,sp,-12
  820f64:	dfc00215 	stw	ra,8(sp)
  820f68:	df000115 	stw	fp,4(sp)
  820f6c:	df000104 	addi	fp,sp,4
  820f70:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  820f74:	e13fff17 	ldw	r4,-4(fp)
  820f78:	014003c4 	movi	r5,15
  820f7c:	0820ae00 	call	820ae0 <alt_up_character_lcd_send_cmd>
}
  820f80:	e037883a 	mov	sp,fp
  820f84:	dfc00117 	ldw	ra,4(sp)
  820f88:	df000017 	ldw	fp,0(sp)
  820f8c:	dec00204 	addi	sp,sp,8
  820f90:	f800283a 	ret

00820f94 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  820f94:	defff404 	addi	sp,sp,-48
  820f98:	df000b15 	stw	fp,44(sp)
  820f9c:	df000b04 	addi	fp,sp,44
  820fa0:	e13ffb15 	stw	r4,-20(fp)
  820fa4:	e17ffc15 	stw	r5,-16(fp)
  820fa8:	e1bffd15 	stw	r6,-12(fp)
  820fac:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  820fb0:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  820fb4:	008020b4 	movhi	r2,130
  820fb8:	109b1d04 	addi	r2,r2,27764
  820fbc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  820fc0:	1005003a 	cmpeq	r2,r2,zero
  820fc4:	1000411e 	bne	r2,zero,8210cc <alt_alarm_start+0x138>
  {
    if (alarm)
  820fc8:	e0bffb17 	ldw	r2,-20(fp)
  820fcc:	1005003a 	cmpeq	r2,r2,zero
  820fd0:	10003b1e 	bne	r2,zero,8210c0 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  820fd4:	e0fffb17 	ldw	r3,-20(fp)
  820fd8:	e0bffd17 	ldw	r2,-12(fp)
  820fdc:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  820fe0:	e0fffb17 	ldw	r3,-20(fp)
  820fe4:	e0bffe17 	ldw	r2,-8(fp)
  820fe8:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  820fec:	0005303a 	rdctl	r2,status
  820ff0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  820ff4:	e0fff817 	ldw	r3,-32(fp)
  820ff8:	00bfff84 	movi	r2,-2
  820ffc:	1884703a 	and	r2,r3,r2
  821000:	1001703a 	wrctl	status,r2
  
  return context;
  821004:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  821008:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  82100c:	008020b4 	movhi	r2,130
  821010:	109b1e04 	addi	r2,r2,27768
  821014:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  821018:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  82101c:	e0fffc17 	ldw	r3,-16(fp)
  821020:	e0bff917 	ldw	r2,-28(fp)
  821024:	1885883a 	add	r2,r3,r2
  821028:	10c00044 	addi	r3,r2,1
  82102c:	e0bffb17 	ldw	r2,-20(fp)
  821030:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  821034:	e0bffb17 	ldw	r2,-20(fp)
  821038:	10c00217 	ldw	r3,8(r2)
  82103c:	e0bff917 	ldw	r2,-28(fp)
  821040:	1880042e 	bgeu	r3,r2,821054 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  821044:	e0fffb17 	ldw	r3,-20(fp)
  821048:	00800044 	movi	r2,1
  82104c:	18800405 	stb	r2,16(r3)
  821050:	00000206 	br	82105c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  821054:	e0bffb17 	ldw	r2,-20(fp)
  821058:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  82105c:	e0fffb17 	ldw	r3,-20(fp)
  821060:	008020b4 	movhi	r2,130
  821064:	10941604 	addi	r2,r2,20568
  821068:	e0bff615 	stw	r2,-40(fp)
  82106c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  821070:	e0fff717 	ldw	r3,-36(fp)
  821074:	e0bff617 	ldw	r2,-40(fp)
  821078:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  82107c:	e0bff617 	ldw	r2,-40(fp)
  821080:	10c00017 	ldw	r3,0(r2)
  821084:	e0bff717 	ldw	r2,-36(fp)
  821088:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  82108c:	e0bff617 	ldw	r2,-40(fp)
  821090:	10c00017 	ldw	r3,0(r2)
  821094:	e0bff717 	ldw	r2,-36(fp)
  821098:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  82109c:	e0fff617 	ldw	r3,-40(fp)
  8210a0:	e0bff717 	ldw	r2,-36(fp)
  8210a4:	18800015 	stw	r2,0(r3)
  8210a8:	e0bffa17 	ldw	r2,-24(fp)
  8210ac:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8210b0:	e0bff517 	ldw	r2,-44(fp)
  8210b4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  8210b8:	e03fff15 	stw	zero,-4(fp)
  8210bc:	00000506 	br	8210d4 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  8210c0:	00bffa84 	movi	r2,-22
  8210c4:	e0bfff15 	stw	r2,-4(fp)
  8210c8:	00000206 	br	8210d4 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  8210cc:	00bfde84 	movi	r2,-134
  8210d0:	e0bfff15 	stw	r2,-4(fp)
  8210d4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  8210d8:	e037883a 	mov	sp,fp
  8210dc:	df000017 	ldw	fp,0(sp)
  8210e0:	dec00104 	addi	sp,sp,4
  8210e4:	f800283a 	ret

008210e8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  8210e8:	defffe04 	addi	sp,sp,-8
  8210ec:	df000115 	stw	fp,4(sp)
  8210f0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  8210f4:	e03fff15 	stw	zero,-4(fp)
  8210f8:	00000506 	br	821110 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  8210fc:	e0bfff17 	ldw	r2,-4(fp)
  821100:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  821104:	e0bfff17 	ldw	r2,-4(fp)
  821108:	10800804 	addi	r2,r2,32
  82110c:	e0bfff15 	stw	r2,-4(fp)
  821110:	e0bfff17 	ldw	r2,-4(fp)
  821114:	10820030 	cmpltui	r2,r2,2048
  821118:	103ff81e 	bne	r2,zero,8210fc <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  82111c:	e037883a 	mov	sp,fp
  821120:	df000017 	ldw	fp,0(sp)
  821124:	dec00104 	addi	sp,sp,4
  821128:	f800283a 	ret

0082112c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  82112c:	defff904 	addi	sp,sp,-28
  821130:	dfc00615 	stw	ra,24(sp)
  821134:	df000515 	stw	fp,20(sp)
  821138:	df000504 	addi	fp,sp,20
  82113c:	e13ffd15 	stw	r4,-12(fp)
  821140:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  821144:	e0bffd17 	ldw	r2,-12(fp)
  821148:	1005003a 	cmpeq	r2,r2,zero
  82114c:	1000041e 	bne	r2,zero,821160 <alt_dev_llist_insert+0x34>
  821150:	e0bffd17 	ldw	r2,-12(fp)
  821154:	10800217 	ldw	r2,8(r2)
  821158:	1004c03a 	cmpne	r2,r2,zero
  82115c:	1000071e 	bne	r2,zero,82117c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  821160:	08211e00 	call	8211e0 <alt_get_errno>
  821164:	1007883a 	mov	r3,r2
  821168:	00800584 	movi	r2,22
  82116c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  821170:	00bffa84 	movi	r2,-22
  821174:	e0bfff15 	stw	r2,-4(fp)
  821178:	00001306 	br	8211c8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  82117c:	e0fffd17 	ldw	r3,-12(fp)
  821180:	e0bffe17 	ldw	r2,-8(fp)
  821184:	e0bffb15 	stw	r2,-20(fp)
  821188:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  82118c:	e0fffc17 	ldw	r3,-16(fp)
  821190:	e0bffb17 	ldw	r2,-20(fp)
  821194:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  821198:	e0bffb17 	ldw	r2,-20(fp)
  82119c:	10c00017 	ldw	r3,0(r2)
  8211a0:	e0bffc17 	ldw	r2,-16(fp)
  8211a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8211a8:	e0bffb17 	ldw	r2,-20(fp)
  8211ac:	10c00017 	ldw	r3,0(r2)
  8211b0:	e0bffc17 	ldw	r2,-16(fp)
  8211b4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8211b8:	e0fffb17 	ldw	r3,-20(fp)
  8211bc:	e0bffc17 	ldw	r2,-16(fp)
  8211c0:	18800015 	stw	r2,0(r3)

  return 0;  
  8211c4:	e03fff15 	stw	zero,-4(fp)
  8211c8:	e0bfff17 	ldw	r2,-4(fp)
}
  8211cc:	e037883a 	mov	sp,fp
  8211d0:	dfc00117 	ldw	ra,4(sp)
  8211d4:	df000017 	ldw	fp,0(sp)
  8211d8:	dec00204 	addi	sp,sp,8
  8211dc:	f800283a 	ret

008211e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8211e0:	defffd04 	addi	sp,sp,-12
  8211e4:	dfc00215 	stw	ra,8(sp)
  8211e8:	df000115 	stw	fp,4(sp)
  8211ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8211f0:	008020b4 	movhi	r2,130
  8211f4:	1093f404 	addi	r2,r2,20432
  8211f8:	10800017 	ldw	r2,0(r2)
  8211fc:	1005003a 	cmpeq	r2,r2,zero
  821200:	1000061e 	bne	r2,zero,82121c <alt_get_errno+0x3c>
  821204:	008020b4 	movhi	r2,130
  821208:	1093f404 	addi	r2,r2,20432
  82120c:	10800017 	ldw	r2,0(r2)
  821210:	103ee83a 	callr	r2
  821214:	e0bfff15 	stw	r2,-4(fp)
  821218:	00000306 	br	821228 <alt_get_errno+0x48>
  82121c:	008020b4 	movhi	r2,130
  821220:	109afc04 	addi	r2,r2,27632
  821224:	e0bfff15 	stw	r2,-4(fp)
  821228:	e0bfff17 	ldw	r2,-4(fp)
}
  82122c:	e037883a 	mov	sp,fp
  821230:	dfc00117 	ldw	ra,4(sp)
  821234:	df000017 	ldw	fp,0(sp)
  821238:	dec00204 	addi	sp,sp,8
  82123c:	f800283a 	ret

00821240 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  821240:	defffd04 	addi	sp,sp,-12
  821244:	dfc00215 	stw	ra,8(sp)
  821248:	df000115 	stw	fp,4(sp)
  82124c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  821250:	00bfff04 	movi	r2,-4
  821254:	00c020b4 	movhi	r3,130
  821258:	18c9be04 	addi	r3,r3,9976
  82125c:	1885883a 	add	r2,r3,r2
  821260:	e0bfff15 	stw	r2,-4(fp)
  821264:	00000606 	br	821280 <_do_ctors+0x40>
        (*ctor) (); 
  821268:	e0bfff17 	ldw	r2,-4(fp)
  82126c:	10800017 	ldw	r2,0(r2)
  821270:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  821274:	e0bfff17 	ldw	r2,-4(fp)
  821278:	10bfff04 	addi	r2,r2,-4
  82127c:	e0bfff15 	stw	r2,-4(fp)
  821280:	e0ffff17 	ldw	r3,-4(fp)
  821284:	008020b4 	movhi	r2,130
  821288:	1089bd04 	addi	r2,r2,9972
  82128c:	18bff62e 	bgeu	r3,r2,821268 <_do_ctors+0x28>
        (*ctor) (); 
}
  821290:	e037883a 	mov	sp,fp
  821294:	dfc00117 	ldw	ra,4(sp)
  821298:	df000017 	ldw	fp,0(sp)
  82129c:	dec00204 	addi	sp,sp,8
  8212a0:	f800283a 	ret

008212a4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8212a4:	defffd04 	addi	sp,sp,-12
  8212a8:	dfc00215 	stw	ra,8(sp)
  8212ac:	df000115 	stw	fp,4(sp)
  8212b0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8212b4:	00bfff04 	movi	r2,-4
  8212b8:	00c020b4 	movhi	r3,130
  8212bc:	18c9be04 	addi	r3,r3,9976
  8212c0:	1885883a 	add	r2,r3,r2
  8212c4:	e0bfff15 	stw	r2,-4(fp)
  8212c8:	00000606 	br	8212e4 <_do_dtors+0x40>
        (*dtor) (); 
  8212cc:	e0bfff17 	ldw	r2,-4(fp)
  8212d0:	10800017 	ldw	r2,0(r2)
  8212d4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8212d8:	e0bfff17 	ldw	r2,-4(fp)
  8212dc:	10bfff04 	addi	r2,r2,-4
  8212e0:	e0bfff15 	stw	r2,-4(fp)
  8212e4:	e0ffff17 	ldw	r3,-4(fp)
  8212e8:	008020b4 	movhi	r2,130
  8212ec:	1089be04 	addi	r2,r2,9976
  8212f0:	18bff62e 	bgeu	r3,r2,8212cc <_do_dtors+0x28>
        (*dtor) (); 
}
  8212f4:	e037883a 	mov	sp,fp
  8212f8:	dfc00117 	ldw	ra,4(sp)
  8212fc:	df000017 	ldw	fp,0(sp)
  821300:	dec00204 	addi	sp,sp,8
  821304:	f800283a 	ret

00821308 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  821308:	defff904 	addi	sp,sp,-28
  82130c:	dfc00615 	stw	ra,24(sp)
  821310:	df000515 	stw	fp,20(sp)
  821314:	df000504 	addi	fp,sp,20
  821318:	e13ffd15 	stw	r4,-12(fp)
  82131c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  821320:	e0bffe17 	ldw	r2,-8(fp)
  821324:	10800017 	ldw	r2,0(r2)
  821328:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  82132c:	e13ffd17 	ldw	r4,-12(fp)
  821330:	080dfdc0 	call	80dfdc <strlen>
  821334:	10800044 	addi	r2,r2,1
  821338:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  82133c:	00000d06 	br	821374 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  821340:	e0bffc17 	ldw	r2,-16(fp)
  821344:	11000217 	ldw	r4,8(r2)
  821348:	e1bffb17 	ldw	r6,-20(fp)
  82134c:	e17ffd17 	ldw	r5,-12(fp)
  821350:	082232c0 	call	82232c <memcmp>
  821354:	1004c03a 	cmpne	r2,r2,zero
  821358:	1000031e 	bne	r2,zero,821368 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  82135c:	e0bffc17 	ldw	r2,-16(fp)
  821360:	e0bfff15 	stw	r2,-4(fp)
  821364:	00000706 	br	821384 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  821368:	e0bffc17 	ldw	r2,-16(fp)
  82136c:	10800017 	ldw	r2,0(r2)
  821370:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  821374:	e0fffe17 	ldw	r3,-8(fp)
  821378:	e0bffc17 	ldw	r2,-16(fp)
  82137c:	10fff01e 	bne	r2,r3,821340 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  821380:	e03fff15 	stw	zero,-4(fp)
  821384:	e0bfff17 	ldw	r2,-4(fp)
}
  821388:	e037883a 	mov	sp,fp
  82138c:	dfc00117 	ldw	ra,4(sp)
  821390:	df000017 	ldw	fp,0(sp)
  821394:	dec00204 	addi	sp,sp,8
  821398:	f800283a 	ret

0082139c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  82139c:	defffe04 	addi	sp,sp,-8
  8213a0:	dfc00115 	stw	ra,4(sp)
  8213a4:	df000015 	stw	fp,0(sp)
  8213a8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  8213ac:	0009883a 	mov	r4,zero
  8213b0:	01440004 	movi	r5,4096
  8213b4:	08222500 	call	822250 <alt_icache_flush>
#endif
}
  8213b8:	e037883a 	mov	sp,fp
  8213bc:	dfc00117 	ldw	ra,4(sp)
  8213c0:	df000017 	ldw	fp,0(sp)
  8213c4:	dec00204 	addi	sp,sp,8
  8213c8:	f800283a 	ret

008213cc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8213cc:	defff904 	addi	sp,sp,-28
  8213d0:	dfc00615 	stw	ra,24(sp)
  8213d4:	df000515 	stw	fp,20(sp)
  8213d8:	df000504 	addi	fp,sp,20
  8213dc:	e13ffc15 	stw	r4,-16(fp)
  8213e0:	e17ffd15 	stw	r5,-12(fp)
  8213e4:	e1bffe15 	stw	r6,-8(fp)
  8213e8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  8213ec:	e13ffd17 	ldw	r4,-12(fp)
  8213f0:	e17ffe17 	ldw	r5,-8(fp)
  8213f4:	e1bfff17 	ldw	r6,-4(fp)
  8213f8:	08217a40 	call	8217a4 <open>
  8213fc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  821400:	e0bffb17 	ldw	r2,-20(fp)
  821404:	1004803a 	cmplt	r2,r2,zero
  821408:	10001c1e 	bne	r2,zero,82147c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  82140c:	e0bffb17 	ldw	r2,-20(fp)
  821410:	00c020b4 	movhi	r3,130
  821414:	18cf4b04 	addi	r3,r3,15660
  821418:	10800324 	muli	r2,r2,12
  82141c:	10c5883a 	add	r2,r2,r3
  821420:	10c00017 	ldw	r3,0(r2)
  821424:	e0bffc17 	ldw	r2,-16(fp)
  821428:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  82142c:	e0bffb17 	ldw	r2,-20(fp)
  821430:	00c020b4 	movhi	r3,130
  821434:	18cf4b04 	addi	r3,r3,15660
  821438:	10800324 	muli	r2,r2,12
  82143c:	10c5883a 	add	r2,r2,r3
  821440:	10800104 	addi	r2,r2,4
  821444:	10c00017 	ldw	r3,0(r2)
  821448:	e0bffc17 	ldw	r2,-16(fp)
  82144c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  821450:	e0bffb17 	ldw	r2,-20(fp)
  821454:	00c020b4 	movhi	r3,130
  821458:	18cf4b04 	addi	r3,r3,15660
  82145c:	10800324 	muli	r2,r2,12
  821460:	10c5883a 	add	r2,r2,r3
  821464:	10800204 	addi	r2,r2,8
  821468:	10c00017 	ldw	r3,0(r2)
  82146c:	e0bffc17 	ldw	r2,-16(fp)
  821470:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  821474:	e13ffb17 	ldw	r4,-20(fp)
  821478:	081633c0 	call	81633c <alt_release_fd>
  }
} 
  82147c:	e037883a 	mov	sp,fp
  821480:	dfc00117 	ldw	ra,4(sp)
  821484:	df000017 	ldw	fp,0(sp)
  821488:	dec00204 	addi	sp,sp,8
  82148c:	f800283a 	ret

00821490 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  821490:	defffb04 	addi	sp,sp,-20
  821494:	dfc00415 	stw	ra,16(sp)
  821498:	df000315 	stw	fp,12(sp)
  82149c:	df000304 	addi	fp,sp,12
  8214a0:	e13ffd15 	stw	r4,-12(fp)
  8214a4:	e17ffe15 	stw	r5,-8(fp)
  8214a8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8214ac:	010020b4 	movhi	r4,130
  8214b0:	210f4e04 	addi	r4,r4,15672
  8214b4:	e17ffd17 	ldw	r5,-12(fp)
  8214b8:	01800044 	movi	r6,1
  8214bc:	01c07fc4 	movi	r7,511
  8214c0:	08213cc0 	call	8213cc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8214c4:	010020b4 	movhi	r4,130
  8214c8:	210f4b04 	addi	r4,r4,15660
  8214cc:	e17ffe17 	ldw	r5,-8(fp)
  8214d0:	000d883a 	mov	r6,zero
  8214d4:	01c07fc4 	movi	r7,511
  8214d8:	08213cc0 	call	8213cc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8214dc:	010020b4 	movhi	r4,130
  8214e0:	210f5104 	addi	r4,r4,15684
  8214e4:	e17fff17 	ldw	r5,-4(fp)
  8214e8:	01800044 	movi	r6,1
  8214ec:	01c07fc4 	movi	r7,511
  8214f0:	08213cc0 	call	8213cc <alt_open_fd>
}  
  8214f4:	e037883a 	mov	sp,fp
  8214f8:	dfc00117 	ldw	ra,4(sp)
  8214fc:	df000017 	ldw	fp,0(sp)
  821500:	dec00204 	addi	sp,sp,8
  821504:	f800283a 	ret

00821508 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  821508:	deffef04 	addi	sp,sp,-68
  82150c:	df001015 	stw	fp,64(sp)
  821510:	df001004 	addi	fp,sp,64
  821514:	e13ffc15 	stw	r4,-16(fp)
  821518:	e17ffd15 	stw	r5,-12(fp)
  82151c:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  821520:	00bffa84 	movi	r2,-22
  821524:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  821528:	e0bffc17 	ldw	r2,-16(fp)
  82152c:	10800828 	cmpgeui	r2,r2,32
  821530:	1000601e 	bne	r2,zero,8216b4 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  821534:	0005303a 	rdctl	r2,status
  821538:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  82153c:	e0fff917 	ldw	r3,-28(fp)
  821540:	00bfff84 	movi	r2,-2
  821544:	1884703a 	and	r2,r3,r2
  821548:	1001703a 	wrctl	status,r2
  
  return context;
  82154c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  821550:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  821554:	e0bffc17 	ldw	r2,-16(fp)
  821558:	00c020f4 	movhi	r3,131
  82155c:	18c04404 	addi	r3,r3,272
  821560:	100490fa 	slli	r2,r2,3
  821564:	10c7883a 	add	r3,r2,r3
  821568:	e0bffe17 	ldw	r2,-8(fp)
  82156c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  821570:	e0bffc17 	ldw	r2,-16(fp)
  821574:	00c020f4 	movhi	r3,131
  821578:	18c04404 	addi	r3,r3,272
  82157c:	100490fa 	slli	r2,r2,3
  821580:	10c5883a 	add	r2,r2,r3
  821584:	10c00104 	addi	r3,r2,4
  821588:	e0bffd17 	ldw	r2,-12(fp)
  82158c:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  821590:	e0bffe17 	ldw	r2,-8(fp)
  821594:	1005003a 	cmpeq	r2,r2,zero
  821598:	1000201e 	bne	r2,zero,82161c <alt_irq_register+0x114>
  82159c:	e0bffc17 	ldw	r2,-16(fp)
  8215a0:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8215a4:	0005303a 	rdctl	r2,status
  8215a8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8215ac:	e0fff617 	ldw	r3,-40(fp)
  8215b0:	00bfff84 	movi	r2,-2
  8215b4:	1884703a 	and	r2,r3,r2
  8215b8:	1001703a 	wrctl	status,r2
  
  return context;
  8215bc:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8215c0:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  8215c4:	e0fff717 	ldw	r3,-36(fp)
  8215c8:	00800044 	movi	r2,1
  8215cc:	10c4983a 	sll	r2,r2,r3
  8215d0:	1007883a 	mov	r3,r2
  8215d4:	008020b4 	movhi	r2,130
  8215d8:	109b1c04 	addi	r2,r2,27760
  8215dc:	10800017 	ldw	r2,0(r2)
  8215e0:	1886b03a 	or	r3,r3,r2
  8215e4:	008020b4 	movhi	r2,130
  8215e8:	109b1c04 	addi	r2,r2,27760
  8215ec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8215f0:	008020b4 	movhi	r2,130
  8215f4:	109b1c04 	addi	r2,r2,27760
  8215f8:	10800017 	ldw	r2,0(r2)
  8215fc:	100170fa 	wrctl	ienable,r2
  821600:	e0bff817 	ldw	r2,-32(fp)
  821604:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  821608:	e0bff517 	ldw	r2,-44(fp)
  82160c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  821610:	0005883a 	mov	r2,zero
  821614:	e0bfff15 	stw	r2,-4(fp)
  821618:	00002006 	br	82169c <alt_irq_register+0x194>
  82161c:	e0bffc17 	ldw	r2,-16(fp)
  821620:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  821624:	0005303a 	rdctl	r2,status
  821628:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  82162c:	e0fff217 	ldw	r3,-56(fp)
  821630:	00bfff84 	movi	r2,-2
  821634:	1884703a 	and	r2,r3,r2
  821638:	1001703a 	wrctl	status,r2
  
  return context;
  82163c:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  821640:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  821644:	e0fff317 	ldw	r3,-52(fp)
  821648:	00800044 	movi	r2,1
  82164c:	10c4983a 	sll	r2,r2,r3
  821650:	0084303a 	nor	r2,zero,r2
  821654:	1007883a 	mov	r3,r2
  821658:	008020b4 	movhi	r2,130
  82165c:	109b1c04 	addi	r2,r2,27760
  821660:	10800017 	ldw	r2,0(r2)
  821664:	1886703a 	and	r3,r3,r2
  821668:	008020b4 	movhi	r2,130
  82166c:	109b1c04 	addi	r2,r2,27760
  821670:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  821674:	008020b4 	movhi	r2,130
  821678:	109b1c04 	addi	r2,r2,27760
  82167c:	10800017 	ldw	r2,0(r2)
  821680:	100170fa 	wrctl	ienable,r2
  821684:	e0bff417 	ldw	r2,-48(fp)
  821688:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82168c:	e0bff117 	ldw	r2,-60(fp)
  821690:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  821694:	0005883a 	mov	r2,zero
  821698:	e0bfff15 	stw	r2,-4(fp)
  82169c:	e0bfff17 	ldw	r2,-4(fp)
  8216a0:	e0bffb15 	stw	r2,-20(fp)
  8216a4:	e0bffa17 	ldw	r2,-24(fp)
  8216a8:	e0bff015 	stw	r2,-64(fp)
  8216ac:	e0bff017 	ldw	r2,-64(fp)
  8216b0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  8216b4:	e0bffb17 	ldw	r2,-20(fp)
}
  8216b8:	e037883a 	mov	sp,fp
  8216bc:	df000017 	ldw	fp,0(sp)
  8216c0:	dec00104 	addi	sp,sp,4
  8216c4:	f800283a 	ret

008216c8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  8216c8:	defffc04 	addi	sp,sp,-16
  8216cc:	df000315 	stw	fp,12(sp)
  8216d0:	df000304 	addi	fp,sp,12
  8216d4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8216d8:	e0bffe17 	ldw	r2,-8(fp)
  8216dc:	10800217 	ldw	r2,8(r2)
  8216e0:	10d00034 	orhi	r3,r2,16384
  8216e4:	e0bffe17 	ldw	r2,-8(fp)
  8216e8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8216ec:	e03ffd15 	stw	zero,-12(fp)
  8216f0:	00002006 	br	821774 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8216f4:	e0bffd17 	ldw	r2,-12(fp)
  8216f8:	00c020b4 	movhi	r3,130
  8216fc:	18cf4b04 	addi	r3,r3,15660
  821700:	10800324 	muli	r2,r2,12
  821704:	10c5883a 	add	r2,r2,r3
  821708:	10c00017 	ldw	r3,0(r2)
  82170c:	e0bffe17 	ldw	r2,-8(fp)
  821710:	10800017 	ldw	r2,0(r2)
  821714:	1880141e 	bne	r3,r2,821768 <alt_file_locked+0xa0>
  821718:	e0bffd17 	ldw	r2,-12(fp)
  82171c:	00c020b4 	movhi	r3,130
  821720:	18cf4b04 	addi	r3,r3,15660
  821724:	10800324 	muli	r2,r2,12
  821728:	10c5883a 	add	r2,r2,r3
  82172c:	10800204 	addi	r2,r2,8
  821730:	10800017 	ldw	r2,0(r2)
  821734:	1004403a 	cmpge	r2,r2,zero
  821738:	10000b1e 	bne	r2,zero,821768 <alt_file_locked+0xa0>
  82173c:	e0bffd17 	ldw	r2,-12(fp)
  821740:	10800324 	muli	r2,r2,12
  821744:	1007883a 	mov	r3,r2
  821748:	008020b4 	movhi	r2,130
  82174c:	108f4b04 	addi	r2,r2,15660
  821750:	1887883a 	add	r3,r3,r2
  821754:	e0bffe17 	ldw	r2,-8(fp)
  821758:	18800326 	beq	r3,r2,821768 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  82175c:	00bffcc4 	movi	r2,-13
  821760:	e0bfff15 	stw	r2,-4(fp)
  821764:	00000a06 	br	821790 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  821768:	e0bffd17 	ldw	r2,-12(fp)
  82176c:	10800044 	addi	r2,r2,1
  821770:	e0bffd15 	stw	r2,-12(fp)
  821774:	008020b4 	movhi	r2,130
  821778:	1093f304 	addi	r2,r2,20428
  82177c:	10800017 	ldw	r2,0(r2)
  821780:	1007883a 	mov	r3,r2
  821784:	e0bffd17 	ldw	r2,-12(fp)
  821788:	18bfda2e 	bgeu	r3,r2,8216f4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  82178c:	e03fff15 	stw	zero,-4(fp)
  821790:	e0bfff17 	ldw	r2,-4(fp)
}
  821794:	e037883a 	mov	sp,fp
  821798:	df000017 	ldw	fp,0(sp)
  82179c:	dec00104 	addi	sp,sp,4
  8217a0:	f800283a 	ret

008217a4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8217a4:	defff404 	addi	sp,sp,-48
  8217a8:	dfc00b15 	stw	ra,44(sp)
  8217ac:	df000a15 	stw	fp,40(sp)
  8217b0:	df000a04 	addi	fp,sp,40
  8217b4:	e13ffb15 	stw	r4,-20(fp)
  8217b8:	e17ffc15 	stw	r5,-16(fp)
  8217bc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  8217c0:	00bfffc4 	movi	r2,-1
  8217c4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  8217c8:	00bffb44 	movi	r2,-19
  8217cc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  8217d0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8217d4:	e13ffb17 	ldw	r4,-20(fp)
  8217d8:	014020b4 	movhi	r5,130
  8217dc:	2953f104 	addi	r5,r5,20420
  8217e0:	08213080 	call	821308 <alt_find_dev>
  8217e4:	e0bffa15 	stw	r2,-24(fp)
  8217e8:	e0bffa17 	ldw	r2,-24(fp)
  8217ec:	1004c03a 	cmpne	r2,r2,zero
  8217f0:	1000051e 	bne	r2,zero,821808 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8217f4:	e13ffb17 	ldw	r4,-20(fp)
  8217f8:	082203c0 	call	82203c <alt_find_file>
  8217fc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  821800:	00800044 	movi	r2,1
  821804:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  821808:	e0bffa17 	ldw	r2,-24(fp)
  82180c:	1005003a 	cmpeq	r2,r2,zero
  821810:	1000301e 	bne	r2,zero,8218d4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  821814:	e13ffa17 	ldw	r4,-24(fp)
  821818:	082215c0 	call	82215c <alt_get_fd>
  82181c:	e0bff815 	stw	r2,-32(fp)
  821820:	e0bff817 	ldw	r2,-32(fp)
  821824:	1004403a 	cmpge	r2,r2,zero
  821828:	1000031e 	bne	r2,zero,821838 <open+0x94>
    {
      status = index;
  82182c:	e0bff817 	ldw	r2,-32(fp)
  821830:	e0bff715 	stw	r2,-36(fp)
  821834:	00002906 	br	8218dc <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  821838:	e0bff817 	ldw	r2,-32(fp)
  82183c:	10800324 	muli	r2,r2,12
  821840:	1007883a 	mov	r3,r2
  821844:	008020b4 	movhi	r2,130
  821848:	108f4b04 	addi	r2,r2,15660
  82184c:	1885883a 	add	r2,r3,r2
  821850:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  821854:	e0fffc17 	ldw	r3,-16(fp)
  821858:	00900034 	movhi	r2,16384
  82185c:	10bfffc4 	addi	r2,r2,-1
  821860:	1886703a 	and	r3,r3,r2
  821864:	e0bff917 	ldw	r2,-28(fp)
  821868:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  82186c:	e0bff617 	ldw	r2,-40(fp)
  821870:	1004c03a 	cmpne	r2,r2,zero
  821874:	1000061e 	bne	r2,zero,821890 <open+0xec>
  821878:	e13ff917 	ldw	r4,-28(fp)
  82187c:	08216c80 	call	8216c8 <alt_file_locked>
  821880:	e0bff715 	stw	r2,-36(fp)
  821884:	e0bff717 	ldw	r2,-36(fp)
  821888:	1004803a 	cmplt	r2,r2,zero
  82188c:	1000131e 	bne	r2,zero,8218dc <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  821890:	e0bffa17 	ldw	r2,-24(fp)
  821894:	10800317 	ldw	r2,12(r2)
  821898:	1005003a 	cmpeq	r2,r2,zero
  82189c:	1000091e 	bne	r2,zero,8218c4 <open+0x120>
  8218a0:	e0bffa17 	ldw	r2,-24(fp)
  8218a4:	10800317 	ldw	r2,12(r2)
  8218a8:	e13ff917 	ldw	r4,-28(fp)
  8218ac:	e17ffb17 	ldw	r5,-20(fp)
  8218b0:	e1bffc17 	ldw	r6,-16(fp)
  8218b4:	e1fffd17 	ldw	r7,-12(fp)
  8218b8:	103ee83a 	callr	r2
  8218bc:	e0bfff15 	stw	r2,-4(fp)
  8218c0:	00000106 	br	8218c8 <open+0x124>
  8218c4:	e03fff15 	stw	zero,-4(fp)
  8218c8:	e0bfff17 	ldw	r2,-4(fp)
  8218cc:	e0bff715 	stw	r2,-36(fp)
  8218d0:	00000206 	br	8218dc <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  8218d4:	00bffb44 	movi	r2,-19
  8218d8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8218dc:	e0bff717 	ldw	r2,-36(fp)
  8218e0:	1004403a 	cmpge	r2,r2,zero
  8218e4:	1000091e 	bne	r2,zero,82190c <open+0x168>
  {
    alt_release_fd (index);  
  8218e8:	e13ff817 	ldw	r4,-32(fp)
  8218ec:	081633c0 	call	81633c <alt_release_fd>
    ALT_ERRNO = -status;
  8218f0:	082192c0 	call	82192c <alt_get_errno>
  8218f4:	e0fff717 	ldw	r3,-36(fp)
  8218f8:	00c7c83a 	sub	r3,zero,r3
  8218fc:	10c00015 	stw	r3,0(r2)
    return -1;
  821900:	00bfffc4 	movi	r2,-1
  821904:	e0bffe15 	stw	r2,-8(fp)
  821908:	00000206 	br	821914 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  82190c:	e0bff817 	ldw	r2,-32(fp)
  821910:	e0bffe15 	stw	r2,-8(fp)
  821914:	e0bffe17 	ldw	r2,-8(fp)
}
  821918:	e037883a 	mov	sp,fp
  82191c:	dfc00117 	ldw	ra,4(sp)
  821920:	df000017 	ldw	fp,0(sp)
  821924:	dec00204 	addi	sp,sp,8
  821928:	f800283a 	ret

0082192c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  82192c:	defffd04 	addi	sp,sp,-12
  821930:	dfc00215 	stw	ra,8(sp)
  821934:	df000115 	stw	fp,4(sp)
  821938:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  82193c:	008020b4 	movhi	r2,130
  821940:	1093f404 	addi	r2,r2,20432
  821944:	10800017 	ldw	r2,0(r2)
  821948:	1005003a 	cmpeq	r2,r2,zero
  82194c:	1000061e 	bne	r2,zero,821968 <alt_get_errno+0x3c>
  821950:	008020b4 	movhi	r2,130
  821954:	1093f404 	addi	r2,r2,20432
  821958:	10800017 	ldw	r2,0(r2)
  82195c:	103ee83a 	callr	r2
  821960:	e0bfff15 	stw	r2,-4(fp)
  821964:	00000306 	br	821974 <alt_get_errno+0x48>
  821968:	008020b4 	movhi	r2,130
  82196c:	109afc04 	addi	r2,r2,27632
  821970:	e0bfff15 	stw	r2,-4(fp)
  821974:	e0bfff17 	ldw	r2,-4(fp)
}
  821978:	e037883a 	mov	sp,fp
  82197c:	dfc00117 	ldw	ra,4(sp)
  821980:	df000017 	ldw	fp,0(sp)
  821984:	dec00204 	addi	sp,sp,8
  821988:	f800283a 	ret

0082198c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  82198c:	defffa04 	addi	sp,sp,-24
  821990:	df000515 	stw	fp,20(sp)
  821994:	df000504 	addi	fp,sp,20
  821998:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82199c:	0005303a 	rdctl	r2,status
  8219a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8219a4:	e0fffd17 	ldw	r3,-12(fp)
  8219a8:	00bfff84 	movi	r2,-2
  8219ac:	1884703a 	and	r2,r3,r2
  8219b0:	1001703a 	wrctl	status,r2
  
  return context;
  8219b4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8219b8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  8219bc:	e0bfff17 	ldw	r2,-4(fp)
  8219c0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8219c4:	e0bffc17 	ldw	r2,-16(fp)
  8219c8:	10c00017 	ldw	r3,0(r2)
  8219cc:	e0bffc17 	ldw	r2,-16(fp)
  8219d0:	10800117 	ldw	r2,4(r2)
  8219d4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  8219d8:	e0bffc17 	ldw	r2,-16(fp)
  8219dc:	10c00117 	ldw	r3,4(r2)
  8219e0:	e0bffc17 	ldw	r2,-16(fp)
  8219e4:	10800017 	ldw	r2,0(r2)
  8219e8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8219ec:	e0fffc17 	ldw	r3,-16(fp)
  8219f0:	e0bffc17 	ldw	r2,-16(fp)
  8219f4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  8219f8:	e0fffc17 	ldw	r3,-16(fp)
  8219fc:	e0bffc17 	ldw	r2,-16(fp)
  821a00:	18800015 	stw	r2,0(r3)
  821a04:	e0bffe17 	ldw	r2,-8(fp)
  821a08:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  821a0c:	e0bffb17 	ldw	r2,-20(fp)
  821a10:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  821a14:	e037883a 	mov	sp,fp
  821a18:	df000017 	ldw	fp,0(sp)
  821a1c:	dec00104 	addi	sp,sp,4
  821a20:	f800283a 	ret

00821a24 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  821a24:	defffb04 	addi	sp,sp,-20
  821a28:	dfc00415 	stw	ra,16(sp)
  821a2c:	df000315 	stw	fp,12(sp)
  821a30:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  821a34:	d0a02d17 	ldw	r2,-32588(gp)
  821a38:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  821a3c:	d0a73517 	ldw	r2,-25388(gp)
  821a40:	10800044 	addi	r2,r2,1
  821a44:	d0a73515 	stw	r2,-25388(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  821a48:	00003106 	br	821b10 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  821a4c:	e0bffe17 	ldw	r2,-8(fp)
  821a50:	10800017 	ldw	r2,0(r2)
  821a54:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  821a58:	e0bffe17 	ldw	r2,-8(fp)
  821a5c:	10800403 	ldbu	r2,16(r2)
  821a60:	10803fcc 	andi	r2,r2,255
  821a64:	1005003a 	cmpeq	r2,r2,zero
  821a68:	1000051e 	bne	r2,zero,821a80 <alt_tick+0x5c>
  821a6c:	d0a73517 	ldw	r2,-25388(gp)
  821a70:	1004c03a 	cmpne	r2,r2,zero
  821a74:	1000021e 	bne	r2,zero,821a80 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  821a78:	e0bffe17 	ldw	r2,-8(fp)
  821a7c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  821a80:	e0bffe17 	ldw	r2,-8(fp)
  821a84:	10c00217 	ldw	r3,8(r2)
  821a88:	d0a73517 	ldw	r2,-25388(gp)
  821a8c:	10c01e36 	bltu	r2,r3,821b08 <alt_tick+0xe4>
  821a90:	e0bffe17 	ldw	r2,-8(fp)
  821a94:	10800403 	ldbu	r2,16(r2)
  821a98:	10803fcc 	andi	r2,r2,255
  821a9c:	1004c03a 	cmpne	r2,r2,zero
  821aa0:	1000191e 	bne	r2,zero,821b08 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  821aa4:	e0bffe17 	ldw	r2,-8(fp)
  821aa8:	10c00317 	ldw	r3,12(r2)
  821aac:	e0bffe17 	ldw	r2,-8(fp)
  821ab0:	11000517 	ldw	r4,20(r2)
  821ab4:	183ee83a 	callr	r3
  821ab8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  821abc:	e0bffd17 	ldw	r2,-12(fp)
  821ac0:	1004c03a 	cmpne	r2,r2,zero
  821ac4:	1000031e 	bne	r2,zero,821ad4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  821ac8:	e13ffe17 	ldw	r4,-8(fp)
  821acc:	082198c0 	call	82198c <alt_alarm_stop>
  821ad0:	00000d06 	br	821b08 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  821ad4:	e0bffe17 	ldw	r2,-8(fp)
  821ad8:	10c00217 	ldw	r3,8(r2)
  821adc:	e0bffd17 	ldw	r2,-12(fp)
  821ae0:	1887883a 	add	r3,r3,r2
  821ae4:	e0bffe17 	ldw	r2,-8(fp)
  821ae8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  821aec:	e0bffe17 	ldw	r2,-8(fp)
  821af0:	10c00217 	ldw	r3,8(r2)
  821af4:	d0a73517 	ldw	r2,-25388(gp)
  821af8:	1880032e 	bgeu	r3,r2,821b08 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  821afc:	e0fffe17 	ldw	r3,-8(fp)
  821b00:	00800044 	movi	r2,1
  821b04:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  821b08:	e0bfff17 	ldw	r2,-4(fp)
  821b0c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  821b10:	d0e02d04 	addi	r3,gp,-32588
  821b14:	e0bffe17 	ldw	r2,-8(fp)
  821b18:	10ffcc1e 	bne	r2,r3,821a4c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  821b1c:	081763c0 	call	81763c <OSTimeTick>
}
  821b20:	e037883a 	mov	sp,fp
  821b24:	dfc00117 	ldw	ra,4(sp)
  821b28:	df000017 	ldw	fp,0(sp)
  821b2c:	dec00204 	addi	sp,sp,8
  821b30:	f800283a 	ret

00821b34 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  821b34:	deffff04 	addi	sp,sp,-4
  821b38:	df000015 	stw	fp,0(sp)
  821b3c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  821b40:	000170fa 	wrctl	ienable,zero
}
  821b44:	e037883a 	mov	sp,fp
  821b48:	df000017 	ldw	fp,0(sp)
  821b4c:	dec00104 	addi	sp,sp,4
  821b50:	f800283a 	ret

00821b54 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  821b54:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  821b58:	d0e00217 	ldw	r3,-32760(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  821b5c:	d1272e17 	ldw	r4,-25416(gp)

      stw ra,  0(sp)
  821b60:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  821b64:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  821b68:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  821b6c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  821b70:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  821b74:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  821b78:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  821b7c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  821b80:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  821b84:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  821b88:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  821b8c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  821b90:	0821f740 	call	821f74 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  821b94:	d1272917 	ldw	r4,-25436(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  821b98:	d1672107 	ldb	r5,-25468(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  821b9c:	d1272e15 	stw	r4,-25416(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  821ba0:	d1672145 	stb	r5,-25467(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  821ba4:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  821ba8:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  821bac:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  821bb0:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  821bb4:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  821bb8:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  821bbc:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  821bc0:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  821bc4:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  821bc8:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  821bcc:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  821bd0:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  821bd4:	d0e00215 	stw	r3,-32760(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  821bd8:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  821bdc:	f800283a 	ret

00821be0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  821be0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  821be4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  821be8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  821bec:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  821bf0:	0821f740 	call	821f74 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  821bf4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  821bf8:	d4a71f45 	stb	r18,-25475(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  821bfc:	003fe506 	br	821b94 <OSCtxSw+0x40>

00821c00 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  821c00:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  821c04:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  821c08:	10800054 	ori	r2,r2,1
      wrctl status, r2
  821c0c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  821c10:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  821c14:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  821c18:	dec00204 	addi	sp,sp,8

      callr r2
  821c1c:	103ee83a 	callr	r2

      nop
  821c20:	0001883a 	nop

00821c24 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  821c24:	defff704 	addi	sp,sp,-36
  821c28:	dfc00815 	stw	ra,32(sp)
  821c2c:	df000715 	stw	fp,28(sp)
  821c30:	df000704 	addi	fp,sp,28
  821c34:	e13ffc15 	stw	r4,-16(fp)
  821c38:	e17ffd15 	stw	r5,-12(fp)
  821c3c:	e1bffe15 	stw	r6,-8(fp)
  821c40:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  821c44:	e0bffe17 	ldw	r2,-8(fp)
  821c48:	1007883a 	mov	r3,r2
  821c4c:	00bfff04 	movi	r2,-4
  821c50:	1884703a 	and	r2,r3,r2
  821c54:	10bf0004 	addi	r2,r2,-1024
  821c58:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  821c5c:	e0bff917 	ldw	r2,-28(fp)
  821c60:	10000015 	stw	zero,0(r2)
  821c64:	e0bff917 	ldw	r2,-28(fp)
  821c68:	10c0bb04 	addi	r3,r2,748
  821c6c:	e0bff917 	ldw	r2,-28(fp)
  821c70:	10c00115 	stw	r3,4(r2)
  821c74:	e0bff917 	ldw	r2,-28(fp)
  821c78:	1080bb04 	addi	r2,r2,748
  821c7c:	10c01704 	addi	r3,r2,92
  821c80:	e0bff917 	ldw	r2,-28(fp)
  821c84:	10c00215 	stw	r3,8(r2)
  821c88:	e0bff917 	ldw	r2,-28(fp)
  821c8c:	1080bb04 	addi	r2,r2,748
  821c90:	10c02e04 	addi	r3,r2,184
  821c94:	e0bff917 	ldw	r2,-28(fp)
  821c98:	10c00315 	stw	r3,12(r2)
  821c9c:	e0bff917 	ldw	r2,-28(fp)
  821ca0:	10000415 	stw	zero,16(r2)
  821ca4:	e0bff917 	ldw	r2,-28(fp)
  821ca8:	10800504 	addi	r2,r2,20
  821cac:	1009883a 	mov	r4,r2
  821cb0:	01800644 	movi	r6,25
  821cb4:	000b883a 	mov	r5,zero
  821cb8:	0812be80 	call	812be8 <memset>
  821cbc:	e0bff917 	ldw	r2,-28(fp)
  821cc0:	10000c15 	stw	zero,48(r2)
  821cc4:	e0fff917 	ldw	r3,-28(fp)
  821cc8:	008020b4 	movhi	r2,130
  821ccc:	108d3804 	addi	r2,r2,13536
  821cd0:	18800d15 	stw	r2,52(r3)
  821cd4:	e0bff917 	ldw	r2,-28(fp)
  821cd8:	10000e15 	stw	zero,56(r2)
  821cdc:	e0bff917 	ldw	r2,-28(fp)
  821ce0:	10000f15 	stw	zero,60(r2)
  821ce4:	e0bff917 	ldw	r2,-28(fp)
  821ce8:	10001015 	stw	zero,64(r2)
  821cec:	e0bff917 	ldw	r2,-28(fp)
  821cf0:	10001115 	stw	zero,68(r2)
  821cf4:	e0bff917 	ldw	r2,-28(fp)
  821cf8:	10001215 	stw	zero,72(r2)
  821cfc:	e0bff917 	ldw	r2,-28(fp)
  821d00:	10001315 	stw	zero,76(r2)
  821d04:	e0bff917 	ldw	r2,-28(fp)
  821d08:	10001415 	stw	zero,80(r2)
  821d0c:	e0bff917 	ldw	r2,-28(fp)
  821d10:	10001515 	stw	zero,84(r2)
  821d14:	e0bff917 	ldw	r2,-28(fp)
  821d18:	10001615 	stw	zero,88(r2)
  821d1c:	e0bff917 	ldw	r2,-28(fp)
  821d20:	10001715 	stw	zero,92(r2)
  821d24:	e0bff917 	ldw	r2,-28(fp)
  821d28:	10001805 	stb	zero,96(r2)
  821d2c:	e0bff917 	ldw	r2,-28(fp)
  821d30:	10801f04 	addi	r2,r2,124
  821d34:	10000015 	stw	zero,0(r2)
  821d38:	10000115 	stw	zero,4(r2)
  821d3c:	10000215 	stw	zero,8(r2)
  821d40:	10000315 	stw	zero,12(r2)
  821d44:	10000415 	stw	zero,16(r2)
  821d48:	10000515 	stw	zero,20(r2)
  821d4c:	10000615 	stw	zero,24(r2)
  821d50:	10000715 	stw	zero,28(r2)
  821d54:	10000815 	stw	zero,32(r2)
  821d58:	e0bff917 	ldw	r2,-28(fp)
  821d5c:	10002815 	stw	zero,160(r2)
  821d60:	e0fff917 	ldw	r3,-28(fp)
  821d64:	00800044 	movi	r2,1
  821d68:	18802915 	stw	r2,164(r3)
  821d6c:	18002a15 	stw	zero,168(r3)
  821d70:	e0fff917 	ldw	r3,-28(fp)
  821d74:	008cc384 	movi	r2,13070
  821d78:	18802b0d 	sth	r2,172(r3)
  821d7c:	e0fff917 	ldw	r3,-28(fp)
  821d80:	00aaf344 	movi	r2,-21555
  821d84:	18802b8d 	sth	r2,174(r3)
  821d88:	e0fff917 	ldw	r3,-28(fp)
  821d8c:	00848d04 	movi	r2,4660
  821d90:	18802c0d 	sth	r2,176(r3)
  821d94:	e0fff917 	ldw	r3,-28(fp)
  821d98:	00b99b44 	movi	r2,-6547
  821d9c:	18802c8d 	sth	r2,178(r3)
  821da0:	e0fff917 	ldw	r3,-28(fp)
  821da4:	00b7bb04 	movi	r2,-8468
  821da8:	18802d0d 	sth	r2,180(r3)
  821dac:	e0fff917 	ldw	r3,-28(fp)
  821db0:	00800144 	movi	r2,5
  821db4:	18802d8d 	sth	r2,182(r3)
  821db8:	e0fff917 	ldw	r3,-28(fp)
  821dbc:	008002c4 	movi	r2,11
  821dc0:	18802e0d 	sth	r2,184(r3)
  821dc4:	e0bff917 	ldw	r2,-28(fp)
  821dc8:	10002f15 	stw	zero,188(r2)
  821dcc:	e0bff917 	ldw	r2,-28(fp)
  821dd0:	10003015 	stw	zero,192(r2)
  821dd4:	e0bff917 	ldw	r2,-28(fp)
  821dd8:	10003115 	stw	zero,196(r2)
  821ddc:	e0bff917 	ldw	r2,-28(fp)
  821de0:	10003215 	stw	zero,200(r2)
  821de4:	e0bff917 	ldw	r2,-28(fp)
  821de8:	10003315 	stw	zero,204(r2)
  821dec:	e0bff917 	ldw	r2,-28(fp)
  821df0:	10003415 	stw	zero,208(r2)
  821df4:	e0bff917 	ldw	r2,-28(fp)
  821df8:	10003e15 	stw	zero,248(r2)
  821dfc:	e0bff917 	ldw	r2,-28(fp)
  821e00:	10003f15 	stw	zero,252(r2)
  821e04:	e0bff917 	ldw	r2,-28(fp)
  821e08:	10004015 	stw	zero,256(r2)
  821e0c:	e0bff917 	ldw	r2,-28(fp)
  821e10:	10004115 	stw	zero,260(r2)
  821e14:	e0bff917 	ldw	r2,-28(fp)
  821e18:	10004215 	stw	zero,264(r2)
  821e1c:	e0bff917 	ldw	r2,-28(fp)
  821e20:	10004315 	stw	zero,268(r2)
  821e24:	e0bff917 	ldw	r2,-28(fp)
  821e28:	10004415 	stw	zero,272(r2)
  821e2c:	e0bff917 	ldw	r2,-28(fp)
  821e30:	10004515 	stw	zero,276(r2)
  821e34:	e0bff917 	ldw	r2,-28(fp)
  821e38:	10004615 	stw	zero,280(r2)
  821e3c:	e0bff917 	ldw	r2,-28(fp)
  821e40:	10004715 	stw	zero,284(r2)
  821e44:	e0bff917 	ldw	r2,-28(fp)
  821e48:	10003505 	stb	zero,212(r2)
  821e4c:	e0bff917 	ldw	r2,-28(fp)
  821e50:	10003705 	stb	zero,220(r2)
  821e54:	e0bff917 	ldw	r2,-28(fp)
  821e58:	10003d15 	stw	zero,244(r2)
  821e5c:	e0bff917 	ldw	r2,-28(fp)
  821e60:	10005215 	stw	zero,328(r2)
  821e64:	e0bff917 	ldw	r2,-28(fp)
  821e68:	10005315 	stw	zero,332(r2)
  821e6c:	e0bff917 	ldw	r2,-28(fp)
  821e70:	10005415 	stw	zero,336(r2)
  821e74:	e0bff917 	ldw	r2,-28(fp)
  821e78:	10005515 	stw	zero,340(r2)
  821e7c:	e0bff917 	ldw	r2,-28(fp)
  821e80:	1000b515 	stw	zero,724(r2)
  821e84:	e0bff917 	ldw	r2,-28(fp)
  821e88:	10007515 	stw	zero,468(r2)
  821e8c:	e0bff917 	ldw	r2,-28(fp)
  821e90:	1000b715 	stw	zero,732(r2)
  821e94:	e0bff917 	ldw	r2,-28(fp)
  821e98:	1000b815 	stw	zero,736(r2)
  821e9c:	e0bff917 	ldw	r2,-28(fp)
  821ea0:	1000b915 	stw	zero,740(r2)
  821ea4:	e0bff917 	ldw	r2,-28(fp)
  821ea8:	1000ba15 	stw	zero,744(r2)
  821eac:	e0bff917 	ldw	r2,-28(fp)
  821eb0:	1080bb04 	addi	r2,r2,748
  821eb4:	1009883a 	mov	r4,r2
  821eb8:	01804504 	movi	r6,276
  821ebc:	000b883a 	mov	r5,zero
  821ec0:	0812be80 	call	812be8 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  821ec4:	e0bff917 	ldw	r2,-28(fp)
  821ec8:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  821ecc:	e0bffb17 	ldw	r2,-20(fp)
  821ed0:	10bff304 	addi	r2,r2,-52
  821ed4:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  821ed8:	e0bffa17 	ldw	r2,-24(fp)
  821edc:	10c00c04 	addi	r3,r2,48
  821ee0:	e0bffc17 	ldw	r2,-16(fp)
  821ee4:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  821ee8:	e0bffa17 	ldw	r2,-24(fp)
  821eec:	10c00b04 	addi	r3,r2,44
  821ef0:	e0bffd17 	ldw	r2,-12(fp)
  821ef4:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  821ef8:	e0bffa17 	ldw	r2,-24(fp)
  821efc:	10c00a04 	addi	r3,r2,40
  821f00:	e0bff917 	ldw	r2,-28(fp)
  821f04:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  821f08:	008020b4 	movhi	r2,130
  821f0c:	10870004 	addi	r2,r2,7168
  821f10:	10c00104 	addi	r3,r2,4
  821f14:	e0bffa17 	ldw	r2,-24(fp)
  821f18:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  821f1c:	e0bffa17 	ldw	r2,-24(fp)
}
  821f20:	e037883a 	mov	sp,fp
  821f24:	dfc00117 	ldw	ra,4(sp)
  821f28:	df000017 	ldw	fp,0(sp)
  821f2c:	dec00204 	addi	sp,sp,8
  821f30:	f800283a 	ret

00821f34 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  821f34:	defffe04 	addi	sp,sp,-8
  821f38:	df000115 	stw	fp,4(sp)
  821f3c:	df000104 	addi	fp,sp,4
  821f40:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  821f44:	e037883a 	mov	sp,fp
  821f48:	df000017 	ldw	fp,0(sp)
  821f4c:	dec00104 	addi	sp,sp,4
  821f50:	f800283a 	ret

00821f54 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  821f54:	defffe04 	addi	sp,sp,-8
  821f58:	df000115 	stw	fp,4(sp)
  821f5c:	df000104 	addi	fp,sp,4
  821f60:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  821f64:	e037883a 	mov	sp,fp
  821f68:	df000017 	ldw	fp,0(sp)
  821f6c:	dec00104 	addi	sp,sp,4
  821f70:	f800283a 	ret

00821f74 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  821f74:	deffff04 	addi	sp,sp,-4
  821f78:	df000015 	stw	fp,0(sp)
  821f7c:	d839883a 	mov	fp,sp
}
  821f80:	e037883a 	mov	sp,fp
  821f84:	df000017 	ldw	fp,0(sp)
  821f88:	dec00104 	addi	sp,sp,4
  821f8c:	f800283a 	ret

00821f90 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  821f90:	deffff04 	addi	sp,sp,-4
  821f94:	df000015 	stw	fp,0(sp)
  821f98:	d839883a 	mov	fp,sp
}
  821f9c:	e037883a 	mov	sp,fp
  821fa0:	df000017 	ldw	fp,0(sp)
  821fa4:	dec00104 	addi	sp,sp,4
  821fa8:	f800283a 	ret

00821fac <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  821fac:	deffff04 	addi	sp,sp,-4
  821fb0:	df000015 	stw	fp,0(sp)
  821fb4:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  821fb8:	e037883a 	mov	sp,fp
  821fbc:	df000017 	ldw	fp,0(sp)
  821fc0:	dec00104 	addi	sp,sp,4
  821fc4:	f800283a 	ret

00821fc8 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  821fc8:	deffff04 	addi	sp,sp,-4
  821fcc:	df000015 	stw	fp,0(sp)
  821fd0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  821fd4:	e037883a 	mov	sp,fp
  821fd8:	df000017 	ldw	fp,0(sp)
  821fdc:	dec00104 	addi	sp,sp,4
  821fe0:	f800283a 	ret

00821fe4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  821fe4:	deffff04 	addi	sp,sp,-4
  821fe8:	df000015 	stw	fp,0(sp)
  821fec:	d839883a 	mov	fp,sp
}
  821ff0:	e037883a 	mov	sp,fp
  821ff4:	df000017 	ldw	fp,0(sp)
  821ff8:	dec00104 	addi	sp,sp,4
  821ffc:	f800283a 	ret

00822000 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  822000:	deffff04 	addi	sp,sp,-4
  822004:	df000015 	stw	fp,0(sp)
  822008:	d839883a 	mov	fp,sp
}
  82200c:	e037883a 	mov	sp,fp
  822010:	df000017 	ldw	fp,0(sp)
  822014:	dec00104 	addi	sp,sp,4
  822018:	f800283a 	ret

0082201c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  82201c:	defffe04 	addi	sp,sp,-8
  822020:	df000115 	stw	fp,4(sp)
  822024:	df000104 	addi	fp,sp,4
  822028:	e13fff15 	stw	r4,-4(fp)
}
  82202c:	e037883a 	mov	sp,fp
  822030:	df000017 	ldw	fp,0(sp)
  822034:	dec00104 	addi	sp,sp,4
  822038:	f800283a 	ret

0082203c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  82203c:	defffa04 	addi	sp,sp,-24
  822040:	dfc00515 	stw	ra,20(sp)
  822044:	df000415 	stw	fp,16(sp)
  822048:	df000404 	addi	fp,sp,16
  82204c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  822050:	008020b4 	movhi	r2,130
  822054:	1093ef04 	addi	r2,r2,20412
  822058:	10800017 	ldw	r2,0(r2)
  82205c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  822060:	00003306 	br	822130 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  822064:	e0bffd17 	ldw	r2,-12(fp)
  822068:	11000217 	ldw	r4,8(r2)
  82206c:	080dfdc0 	call	80dfdc <strlen>
  822070:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  822074:	e0bffd17 	ldw	r2,-12(fp)
  822078:	10c00217 	ldw	r3,8(r2)
  82207c:	e0bffc17 	ldw	r2,-16(fp)
  822080:	1885883a 	add	r2,r3,r2
  822084:	10bfffc4 	addi	r2,r2,-1
  822088:	10800003 	ldbu	r2,0(r2)
  82208c:	10803fcc 	andi	r2,r2,255
  822090:	1080201c 	xori	r2,r2,128
  822094:	10bfe004 	addi	r2,r2,-128
  822098:	10800bd8 	cmpnei	r2,r2,47
  82209c:	1000031e 	bne	r2,zero,8220ac <alt_find_file+0x70>
    {
      len -= 1;
  8220a0:	e0bffc17 	ldw	r2,-16(fp)
  8220a4:	10bfffc4 	addi	r2,r2,-1
  8220a8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8220ac:	e0bffc17 	ldw	r2,-16(fp)
  8220b0:	1007883a 	mov	r3,r2
  8220b4:	e0bffe17 	ldw	r2,-8(fp)
  8220b8:	1885883a 	add	r2,r3,r2
  8220bc:	10800003 	ldbu	r2,0(r2)
  8220c0:	10803fcc 	andi	r2,r2,255
  8220c4:	1080201c 	xori	r2,r2,128
  8220c8:	10bfe004 	addi	r2,r2,-128
  8220cc:	10800be0 	cmpeqi	r2,r2,47
  8220d0:	10000a1e 	bne	r2,zero,8220fc <alt_find_file+0xc0>
  8220d4:	e0bffc17 	ldw	r2,-16(fp)
  8220d8:	1007883a 	mov	r3,r2
  8220dc:	e0bffe17 	ldw	r2,-8(fp)
  8220e0:	1885883a 	add	r2,r3,r2
  8220e4:	10800003 	ldbu	r2,0(r2)
  8220e8:	10803fcc 	andi	r2,r2,255
  8220ec:	1080201c 	xori	r2,r2,128
  8220f0:	10bfe004 	addi	r2,r2,-128
  8220f4:	1004c03a 	cmpne	r2,r2,zero
  8220f8:	10000a1e 	bne	r2,zero,822124 <alt_find_file+0xe8>
  8220fc:	e0bffd17 	ldw	r2,-12(fp)
  822100:	11000217 	ldw	r4,8(r2)
  822104:	e1bffc17 	ldw	r6,-16(fp)
  822108:	e17ffe17 	ldw	r5,-8(fp)
  82210c:	082232c0 	call	82232c <memcmp>
  822110:	1004c03a 	cmpne	r2,r2,zero
  822114:	1000031e 	bne	r2,zero,822124 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  822118:	e0bffd17 	ldw	r2,-12(fp)
  82211c:	e0bfff15 	stw	r2,-4(fp)
  822120:	00000806 	br	822144 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  822124:	e0bffd17 	ldw	r2,-12(fp)
  822128:	10800017 	ldw	r2,0(r2)
  82212c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  822130:	00c020b4 	movhi	r3,130
  822134:	18d3ef04 	addi	r3,r3,20412
  822138:	e0bffd17 	ldw	r2,-12(fp)
  82213c:	10ffc91e 	bne	r2,r3,822064 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  822140:	e03fff15 	stw	zero,-4(fp)
  822144:	e0bfff17 	ldw	r2,-4(fp)
}
  822148:	e037883a 	mov	sp,fp
  82214c:	dfc00117 	ldw	ra,4(sp)
  822150:	df000017 	ldw	fp,0(sp)
  822154:	dec00204 	addi	sp,sp,8
  822158:	f800283a 	ret

0082215c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  82215c:	defff804 	addi	sp,sp,-32
  822160:	dfc00715 	stw	ra,28(sp)
  822164:	df000615 	stw	fp,24(sp)
  822168:	df000604 	addi	fp,sp,24
  82216c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  822170:	00bffa04 	movi	r2,-24
  822174:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  822178:	008020b4 	movhi	r2,130
  82217c:	109b0004 	addi	r2,r2,27648
  822180:	10800017 	ldw	r2,0(r2)
  822184:	e0bffa15 	stw	r2,-24(fp)
  822188:	e03ffb0d 	sth	zero,-20(fp)
  82218c:	e17ffb0b 	ldhu	r5,-20(fp)
  822190:	e1bffe04 	addi	r6,fp,-8
  822194:	e13ffa17 	ldw	r4,-24(fp)
  822198:	081c4580 	call	81c458 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  82219c:	e03ffd15 	stw	zero,-12(fp)
  8221a0:	00001e06 	br	82221c <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
  8221a4:	e0bffd17 	ldw	r2,-12(fp)
  8221a8:	00c020b4 	movhi	r3,130
  8221ac:	18cf4b04 	addi	r3,r3,15660
  8221b0:	10800324 	muli	r2,r2,12
  8221b4:	10c5883a 	add	r2,r2,r3
  8221b8:	10800017 	ldw	r2,0(r2)
  8221bc:	1004c03a 	cmpne	r2,r2,zero
  8221c0:	1000131e 	bne	r2,zero,822210 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
  8221c4:	e0bffd17 	ldw	r2,-12(fp)
  8221c8:	00c020b4 	movhi	r3,130
  8221cc:	18cf4b04 	addi	r3,r3,15660
  8221d0:	10800324 	muli	r2,r2,12
  8221d4:	10c7883a 	add	r3,r2,r3
  8221d8:	e0bfff17 	ldw	r2,-4(fp)
  8221dc:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  8221e0:	008020b4 	movhi	r2,130
  8221e4:	1093f304 	addi	r2,r2,20428
  8221e8:	10c00017 	ldw	r3,0(r2)
  8221ec:	e0bffd17 	ldw	r2,-12(fp)
  8221f0:	1880040e 	bge	r3,r2,822204 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
  8221f4:	00c020b4 	movhi	r3,130
  8221f8:	18d3f304 	addi	r3,r3,20428
  8221fc:	e0bffd17 	ldw	r2,-12(fp)
  822200:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  822204:	e0bffd17 	ldw	r2,-12(fp)
  822208:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
  82220c:	00000606 	br	822228 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  822210:	e0bffd17 	ldw	r2,-12(fp)
  822214:	10800044 	addi	r2,r2,1
  822218:	e0bffd15 	stw	r2,-12(fp)
  82221c:	e0bffd17 	ldw	r2,-12(fp)
  822220:	10800810 	cmplti	r2,r2,32
  822224:	103fdf1e 	bne	r2,zero,8221a4 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  822228:	008020b4 	movhi	r2,130
  82222c:	109b0004 	addi	r2,r2,27648
  822230:	11000017 	ldw	r4,0(r2)
  822234:	081c8500 	call	81c850 <OSSemPost>

  return rc;
  822238:	e0bffc17 	ldw	r2,-16(fp)
}
  82223c:	e037883a 	mov	sp,fp
  822240:	dfc00117 	ldw	ra,4(sp)
  822244:	df000017 	ldw	fp,0(sp)
  822248:	dec00204 	addi	sp,sp,8
  82224c:	f800283a 	ret

00822250 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  822250:	defffb04 	addi	sp,sp,-20
  822254:	df000415 	stw	fp,16(sp)
  822258:	df000404 	addi	fp,sp,16
  82225c:	e13ffe15 	stw	r4,-8(fp)
  822260:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  822264:	e0bfff17 	ldw	r2,-4(fp)
  822268:	10840070 	cmpltui	r2,r2,4097
  82226c:	1000021e 	bne	r2,zero,822278 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  822270:	00840004 	movi	r2,4096
  822274:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  822278:	e0fffe17 	ldw	r3,-8(fp)
  82227c:	e0bfff17 	ldw	r2,-4(fp)
  822280:	1885883a 	add	r2,r3,r2
  822284:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  822288:	e0bffe17 	ldw	r2,-8(fp)
  82228c:	e0bffd15 	stw	r2,-12(fp)
  822290:	00000506 	br	8222a8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  822294:	e0bffd17 	ldw	r2,-12(fp)
  822298:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  82229c:	e0bffd17 	ldw	r2,-12(fp)
  8222a0:	10800804 	addi	r2,r2,32
  8222a4:	e0bffd15 	stw	r2,-12(fp)
  8222a8:	e0fffd17 	ldw	r3,-12(fp)
  8222ac:	e0bffc17 	ldw	r2,-16(fp)
  8222b0:	18bff836 	bltu	r3,r2,822294 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8222b4:	e0bffe17 	ldw	r2,-8(fp)
  8222b8:	108007cc 	andi	r2,r2,31
  8222bc:	1005003a 	cmpeq	r2,r2,zero
  8222c0:	1000021e 	bne	r2,zero,8222cc <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8222c4:	e0bffd17 	ldw	r2,-12(fp)
  8222c8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8222cc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8222d0:	e037883a 	mov	sp,fp
  8222d4:	df000017 	ldw	fp,0(sp)
  8222d8:	dec00104 	addi	sp,sp,4
  8222dc:	f800283a 	ret

008222e0 <atexit>:
  8222e0:	200b883a 	mov	r5,r4
  8222e4:	000d883a 	mov	r6,zero
  8222e8:	0009883a 	mov	r4,zero
  8222ec:	000f883a 	mov	r7,zero
  8222f0:	08223a01 	jmpi	8223a0 <__register_exitproc>

008222f4 <exit>:
  8222f4:	defffe04 	addi	sp,sp,-8
  8222f8:	000b883a 	mov	r5,zero
  8222fc:	dc000015 	stw	r16,0(sp)
  822300:	dfc00115 	stw	ra,4(sp)
  822304:	2021883a 	mov	r16,r4
  822308:	08224d80 	call	8224d8 <__call_exitprocs>
  82230c:	008020b4 	movhi	r2,130
  822310:	1093ec04 	addi	r2,r2,20400
  822314:	11000017 	ldw	r4,0(r2)
  822318:	20800f17 	ldw	r2,60(r4)
  82231c:	10000126 	beq	r2,zero,822324 <exit+0x30>
  822320:	103ee83a 	callr	r2
  822324:	8009883a 	mov	r4,r16
  822328:	08226c80 	call	8226c8 <_exit>

0082232c <memcmp>:
  82232c:	00c000c4 	movi	r3,3
  822330:	1980032e 	bgeu	r3,r6,822340 <memcmp+0x14>
  822334:	2144b03a 	or	r2,r4,r5
  822338:	10c4703a 	and	r2,r2,r3
  82233c:	10000f26 	beq	r2,zero,82237c <memcmp+0x50>
  822340:	31ffffc4 	addi	r7,r6,-1
  822344:	3000061e 	bne	r6,zero,822360 <memcmp+0x34>
  822348:	00000a06 	br	822374 <memcmp+0x48>
  82234c:	39ffffc4 	addi	r7,r7,-1
  822350:	00bfffc4 	movi	r2,-1
  822354:	21000044 	addi	r4,r4,1
  822358:	29400044 	addi	r5,r5,1
  82235c:	38800526 	beq	r7,r2,822374 <memcmp+0x48>
  822360:	20c00003 	ldbu	r3,0(r4)
  822364:	28800003 	ldbu	r2,0(r5)
  822368:	18bff826 	beq	r3,r2,82234c <memcmp+0x20>
  82236c:	1885c83a 	sub	r2,r3,r2
  822370:	f800283a 	ret
  822374:	0005883a 	mov	r2,zero
  822378:	f800283a 	ret
  82237c:	180f883a 	mov	r7,r3
  822380:	20c00017 	ldw	r3,0(r4)
  822384:	28800017 	ldw	r2,0(r5)
  822388:	18bfed1e 	bne	r3,r2,822340 <memcmp+0x14>
  82238c:	31bfff04 	addi	r6,r6,-4
  822390:	21000104 	addi	r4,r4,4
  822394:	29400104 	addi	r5,r5,4
  822398:	39bff936 	bltu	r7,r6,822380 <memcmp+0x54>
  82239c:	003fe806 	br	822340 <memcmp+0x14>

008223a0 <__register_exitproc>:
  8223a0:	defffa04 	addi	sp,sp,-24
  8223a4:	008020b4 	movhi	r2,130
  8223a8:	1093ec04 	addi	r2,r2,20400
  8223ac:	dc000015 	stw	r16,0(sp)
  8223b0:	14000017 	ldw	r16,0(r2)
  8223b4:	dd000415 	stw	r20,16(sp)
  8223b8:	2829883a 	mov	r20,r5
  8223bc:	81405217 	ldw	r5,328(r16)
  8223c0:	dcc00315 	stw	r19,12(sp)
  8223c4:	dc800215 	stw	r18,8(sp)
  8223c8:	dc400115 	stw	r17,4(sp)
  8223cc:	dfc00515 	stw	ra,20(sp)
  8223d0:	2023883a 	mov	r17,r4
  8223d4:	3027883a 	mov	r19,r6
  8223d8:	3825883a 	mov	r18,r7
  8223dc:	28002526 	beq	r5,zero,822474 <__register_exitproc+0xd4>
  8223e0:	29000117 	ldw	r4,4(r5)
  8223e4:	008007c4 	movi	r2,31
  8223e8:	11002716 	blt	r2,r4,822488 <__register_exitproc+0xe8>
  8223ec:	8800101e 	bne	r17,zero,822430 <__register_exitproc+0x90>
  8223f0:	2105883a 	add	r2,r4,r4
  8223f4:	1085883a 	add	r2,r2,r2
  8223f8:	20c00044 	addi	r3,r4,1
  8223fc:	1145883a 	add	r2,r2,r5
  822400:	0009883a 	mov	r4,zero
  822404:	15000215 	stw	r20,8(r2)
  822408:	28c00115 	stw	r3,4(r5)
  82240c:	2005883a 	mov	r2,r4
  822410:	dfc00517 	ldw	ra,20(sp)
  822414:	dd000417 	ldw	r20,16(sp)
  822418:	dcc00317 	ldw	r19,12(sp)
  82241c:	dc800217 	ldw	r18,8(sp)
  822420:	dc400117 	ldw	r17,4(sp)
  822424:	dc000017 	ldw	r16,0(sp)
  822428:	dec00604 	addi	sp,sp,24
  82242c:	f800283a 	ret
  822430:	29802204 	addi	r6,r5,136
  822434:	00800044 	movi	r2,1
  822438:	110e983a 	sll	r7,r2,r4
  82243c:	30c04017 	ldw	r3,256(r6)
  822440:	2105883a 	add	r2,r4,r4
  822444:	1085883a 	add	r2,r2,r2
  822448:	1185883a 	add	r2,r2,r6
  82244c:	19c6b03a 	or	r3,r3,r7
  822450:	14802015 	stw	r18,128(r2)
  822454:	14c00015 	stw	r19,0(r2)
  822458:	00800084 	movi	r2,2
  82245c:	30c04015 	stw	r3,256(r6)
  822460:	88bfe31e 	bne	r17,r2,8223f0 <__register_exitproc+0x50>
  822464:	30804117 	ldw	r2,260(r6)
  822468:	11c4b03a 	or	r2,r2,r7
  82246c:	30804115 	stw	r2,260(r6)
  822470:	003fdf06 	br	8223f0 <__register_exitproc+0x50>
  822474:	008020f4 	movhi	r2,131
  822478:	10808404 	addi	r2,r2,528
  82247c:	100b883a 	mov	r5,r2
  822480:	80805215 	stw	r2,328(r16)
  822484:	003fd606 	br	8223e0 <__register_exitproc+0x40>
  822488:	00802074 	movhi	r2,129
  82248c:	10b58a04 	addi	r2,r2,-10712
  822490:	1000021e 	bne	r2,zero,82249c <__register_exitproc+0xfc>
  822494:	013fffc4 	movi	r4,-1
  822498:	003fdc06 	br	82240c <__register_exitproc+0x6c>
  82249c:	01006404 	movi	r4,400
  8224a0:	103ee83a 	callr	r2
  8224a4:	1007883a 	mov	r3,r2
  8224a8:	103ffa26 	beq	r2,zero,822494 <__register_exitproc+0xf4>
  8224ac:	80805217 	ldw	r2,328(r16)
  8224b0:	180b883a 	mov	r5,r3
  8224b4:	18000115 	stw	zero,4(r3)
  8224b8:	18800015 	stw	r2,0(r3)
  8224bc:	80c05215 	stw	r3,328(r16)
  8224c0:	18006215 	stw	zero,392(r3)
  8224c4:	18006315 	stw	zero,396(r3)
  8224c8:	0009883a 	mov	r4,zero
  8224cc:	883fc826 	beq	r17,zero,8223f0 <__register_exitproc+0x50>
  8224d0:	003fd706 	br	822430 <__register_exitproc+0x90>

008224d4 <register_fini>:
  8224d4:	f800283a 	ret

008224d8 <__call_exitprocs>:
  8224d8:	008020b4 	movhi	r2,130
  8224dc:	1093ec04 	addi	r2,r2,20400
  8224e0:	10800017 	ldw	r2,0(r2)
  8224e4:	defff304 	addi	sp,sp,-52
  8224e8:	df000b15 	stw	fp,44(sp)
  8224ec:	d8800115 	stw	r2,4(sp)
  8224f0:	00802074 	movhi	r2,129
  8224f4:	10b58504 	addi	r2,r2,-10732
  8224f8:	1005003a 	cmpeq	r2,r2,zero
  8224fc:	d8800215 	stw	r2,8(sp)
  822500:	d8800117 	ldw	r2,4(sp)
  822504:	dd400815 	stw	r21,32(sp)
  822508:	dd000715 	stw	r20,28(sp)
  82250c:	10805204 	addi	r2,r2,328
  822510:	dfc00c15 	stw	ra,48(sp)
  822514:	ddc00a15 	stw	r23,40(sp)
  822518:	dd800915 	stw	r22,36(sp)
  82251c:	dcc00615 	stw	r19,24(sp)
  822520:	dc800515 	stw	r18,20(sp)
  822524:	dc400415 	stw	r17,16(sp)
  822528:	dc000315 	stw	r16,12(sp)
  82252c:	282b883a 	mov	r21,r5
  822530:	2039883a 	mov	fp,r4
  822534:	d8800015 	stw	r2,0(sp)
  822538:	2829003a 	cmpeq	r20,r5,zero
  82253c:	d8800117 	ldw	r2,4(sp)
  822540:	14405217 	ldw	r17,328(r2)
  822544:	88001026 	beq	r17,zero,822588 <__call_exitprocs+0xb0>
  822548:	ddc00017 	ldw	r23,0(sp)
  82254c:	88800117 	ldw	r2,4(r17)
  822550:	8c802204 	addi	r18,r17,136
  822554:	143fffc4 	addi	r16,r2,-1
  822558:	80000916 	blt	r16,zero,822580 <__call_exitprocs+0xa8>
  82255c:	05bfffc4 	movi	r22,-1
  822560:	a000151e 	bne	r20,zero,8225b8 <__call_exitprocs+0xe0>
  822564:	8409883a 	add	r4,r16,r16
  822568:	2105883a 	add	r2,r4,r4
  82256c:	1485883a 	add	r2,r2,r18
  822570:	10c02017 	ldw	r3,128(r2)
  822574:	a8c01126 	beq	r21,r3,8225bc <__call_exitprocs+0xe4>
  822578:	843fffc4 	addi	r16,r16,-1
  82257c:	85bff81e 	bne	r16,r22,822560 <__call_exitprocs+0x88>
  822580:	d8800217 	ldw	r2,8(sp)
  822584:	10003126 	beq	r2,zero,82264c <__call_exitprocs+0x174>
  822588:	dfc00c17 	ldw	ra,48(sp)
  82258c:	df000b17 	ldw	fp,44(sp)
  822590:	ddc00a17 	ldw	r23,40(sp)
  822594:	dd800917 	ldw	r22,36(sp)
  822598:	dd400817 	ldw	r21,32(sp)
  82259c:	dd000717 	ldw	r20,28(sp)
  8225a0:	dcc00617 	ldw	r19,24(sp)
  8225a4:	dc800517 	ldw	r18,20(sp)
  8225a8:	dc400417 	ldw	r17,16(sp)
  8225ac:	dc000317 	ldw	r16,12(sp)
  8225b0:	dec00d04 	addi	sp,sp,52
  8225b4:	f800283a 	ret
  8225b8:	8409883a 	add	r4,r16,r16
  8225bc:	88c00117 	ldw	r3,4(r17)
  8225c0:	2105883a 	add	r2,r4,r4
  8225c4:	1445883a 	add	r2,r2,r17
  8225c8:	18ffffc4 	addi	r3,r3,-1
  8225cc:	11800217 	ldw	r6,8(r2)
  8225d0:	1c001526 	beq	r3,r16,822628 <__call_exitprocs+0x150>
  8225d4:	10000215 	stw	zero,8(r2)
  8225d8:	303fe726 	beq	r6,zero,822578 <__call_exitprocs+0xa0>
  8225dc:	00c00044 	movi	r3,1
  8225e0:	1c06983a 	sll	r3,r3,r16
  8225e4:	90804017 	ldw	r2,256(r18)
  8225e8:	8cc00117 	ldw	r19,4(r17)
  8225ec:	1884703a 	and	r2,r3,r2
  8225f0:	10001426 	beq	r2,zero,822644 <__call_exitprocs+0x16c>
  8225f4:	90804117 	ldw	r2,260(r18)
  8225f8:	1884703a 	and	r2,r3,r2
  8225fc:	10000c1e 	bne	r2,zero,822630 <__call_exitprocs+0x158>
  822600:	2105883a 	add	r2,r4,r4
  822604:	1485883a 	add	r2,r2,r18
  822608:	11400017 	ldw	r5,0(r2)
  82260c:	e009883a 	mov	r4,fp
  822610:	303ee83a 	callr	r6
  822614:	88800117 	ldw	r2,4(r17)
  822618:	98bfc81e 	bne	r19,r2,82253c <__call_exitprocs+0x64>
  82261c:	b8800017 	ldw	r2,0(r23)
  822620:	147fd526 	beq	r2,r17,822578 <__call_exitprocs+0xa0>
  822624:	003fc506 	br	82253c <__call_exitprocs+0x64>
  822628:	8c000115 	stw	r16,4(r17)
  82262c:	003fea06 	br	8225d8 <__call_exitprocs+0x100>
  822630:	2105883a 	add	r2,r4,r4
  822634:	1485883a 	add	r2,r2,r18
  822638:	11000017 	ldw	r4,0(r2)
  82263c:	303ee83a 	callr	r6
  822640:	003ff406 	br	822614 <__call_exitprocs+0x13c>
  822644:	303ee83a 	callr	r6
  822648:	003ff206 	br	822614 <__call_exitprocs+0x13c>
  82264c:	88800117 	ldw	r2,4(r17)
  822650:	1000081e 	bne	r2,zero,822674 <__call_exitprocs+0x19c>
  822654:	89000017 	ldw	r4,0(r17)
  822658:	20000726 	beq	r4,zero,822678 <__call_exitprocs+0x1a0>
  82265c:	b9000015 	stw	r4,0(r23)
  822660:	8809883a 	mov	r4,r17
  822664:	080d6140 	call	80d614 <free>
  822668:	bc400017 	ldw	r17,0(r23)
  82266c:	883fb71e 	bne	r17,zero,82254c <__call_exitprocs+0x74>
  822670:	003fc506 	br	822588 <__call_exitprocs+0xb0>
  822674:	89000017 	ldw	r4,0(r17)
  822678:	882f883a 	mov	r23,r17
  82267c:	2023883a 	mov	r17,r4
  822680:	883fb21e 	bne	r17,zero,82254c <__call_exitprocs+0x74>
  822684:	003fc006 	br	822588 <__call_exitprocs+0xb0>

00822688 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  822688:	defffd04 	addi	sp,sp,-12
  82268c:	df000215 	stw	fp,8(sp)
  822690:	df000204 	addi	fp,sp,8
  822694:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  822698:	e0bfff17 	ldw	r2,-4(fp)
  82269c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8226a0:	e0bffe17 	ldw	r2,-8(fp)
  8226a4:	1005003a 	cmpeq	r2,r2,zero
  8226a8:	1000021e 	bne	r2,zero,8226b4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  8226ac:	002af070 	cmpltui	zero,zero,43969
  8226b0:	00000106 	br	8226b8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  8226b4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  8226b8:	e037883a 	mov	sp,fp
  8226bc:	df000017 	ldw	fp,0(sp)
  8226c0:	dec00104 	addi	sp,sp,4
  8226c4:	f800283a 	ret

008226c8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  8226c8:	defffd04 	addi	sp,sp,-12
  8226cc:	dfc00215 	stw	ra,8(sp)
  8226d0:	df000115 	stw	fp,4(sp)
  8226d4:	df000104 	addi	fp,sp,4
  8226d8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  8226dc:	008020b4 	movhi	r2,130
  8226e0:	109b0844 	addi	r2,r2,27681
  8226e4:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  8226e8:	e13fff17 	ldw	r4,-4(fp)
  8226ec:	08226880 	call	822688 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8226f0:	003fff06 	br	8226f0 <_exit+0x28>
  8226f4:	008224d4 	movui	r2,2195
