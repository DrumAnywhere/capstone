
capstone_Volatile.elf:     file format elf32-littlenios2
capstone_Volatile.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800000

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x0002a720 memsz 0x0013dffc flags rwx
    LOAD off    0x0002c000 vaddr 0x01400000 paddr 0x01400000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x0002c020 vaddr 0x01904020 paddr 0x01904020 align 2**12
         filesz 0x000001a0 memsz 0x000001a0 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  01400000  01400000  0002c000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  01904020  01904020  0002c020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000274dc  00800000  00800000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000016c4  008274dc  008274dc  000284dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b80  00828ba0  00828ba0  00029ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00113bb6  0082a720  0082a720  0002b720  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0002c1c0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001510  00000000  00000000  0002c1e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00003eaa  00000000  00000000  0002d6f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00049090  00000000  00000000  000315a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000dbc2  00000000  00000000  0007a632  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00029c7f  00000000  00000000  000881f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000044e4  00000000  00000000  000b1e74  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000369c  00000000  00000000  000b6358  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00012398  00000000  00000000  000b99f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  000cbd8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000d58  00000000  00000000  000cbde0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000d3c5c  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000d3c62  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000d3c6e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000d3c6f  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000d3c70  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000d3c74  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000d3c78  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000d3c7c  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000d3c87  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000d3c92  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  000d3c9d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004b  00000000  00000000  000d3caa  2**0
                  CONTENTS, READONLY
 29 .jdi          000051db  00000000  00000000  000d3cf5  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0009bdf7  00000000  00000000  000d8ed0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01400000 l    d  .entry	00000000 .entry
01904020 l    d  .exceptions	00000000 .exceptions
00800000 l    d  .text	00000000 .text
008274dc l    d  .rodata	00000000 .rodata
00828ba0 l    d  .rwdata	00000000 .rwdata
0082a720 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00800044 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 mpu9250.c
00000000 l    df *ABS*	00000000 audio.c
00000000 l    df *ABS*	00000000 buttons.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 dir.c
00000000 l    df *ABS*	00000000 disc.c
00000000 l    df *ABS*	00000000 efs.c
00000000 l    df *ABS*	00000000 extract.c
00000000 l    df *ABS*	00000000 fat.c
00000000 l    df *ABS*	00000000 file.c
00000000 l    df *ABS*	00000000 fs.c
00000000 l    df *ABS*	00000000 ioman.c
00000000 l    df *ABS*	00000000 ls.c
00000000 l    df *ABS*	00000000 mkfs.c
00000000 l    df *ABS*	00000000 nios2.c
00000000 l    df *ABS*	00000000 nios2_ramdisk.c
0080a24c l     F .text	00000024 ramdisk_setup
0080a270 l     F .text	00000074 ramdisk_read
0080a2e4 l     F .text	00000074 ramdisk_write
00828ba0 l     O .rwdata	0000000c spifuncs
00000000 l    df *ABS*	00000000 partition.c
00000000 l    df *ABS*	00000000 plibc.c
00000000 l    df *ABS*	00000000 sd.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 ui.c
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 imu_i2c.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 save.c
00000000 l    df *ABS*	00000000 sd.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
00827ef8 l     O .rodata	00000010 bp
00827f08 l     O .rodata	00000010 dp_l
00827f18 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
00827f28 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
0080f884 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0081012c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00811098 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00828bac l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 perror.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 vfprintf.c
00812c54 l     F .text	00000058 __sprint_r
0082887a l     O .rodata	00000010 blanks.3452
0082886a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00814cb8 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008166b4 l     F .text	00000058 std
008167c0 l     F .text	00000008 __fp_lock
008167c8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0082a678 l     O .rwdata	00000004 charset
008288ac l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
008289f4 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0081a948 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0081a9a8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0081aaa8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0081ad88 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0081aed8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0081b120 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0082a698 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0081b4d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0082a69c l     O .rwdata	00000004 lockid
0082a768 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0082a6a0 l     O .rwdata	00000004 lockid
0082a770 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0081cf0c l     F .text	00000044 OS_InitMisc
0081cf50 l     F .text	0000006c OS_InitRdyList
0081d0b4 l     F .text	000000e0 OS_InitTCBList
0081ce30 l     F .text	000000dc OS_InitEventList
0081cfbc l     F .text	0000007c OS_InitTaskIdle
0081d038 l     F .text	0000007c OS_InitTaskStat
0081d328 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0081f248 l     F .text	00000110 OS_FlagTaskRdy
0081efa0 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00829568 l     O .rwdata	0000106c jtag_uart_0
0082a5d4 l     O .rwdata	00000030 audio_and_video_config_0
0082a604 l     O .rwdata	00000030 audio_0
0082a634 l     O .rwdata	0000002c character_lcd_0
00823ba0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00823e50 l     F .text	000002c8 altera_avalon_jtag_uart_irq
00824118 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00824930 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00826244 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00826400 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0082653c l     F .text	000000dc alt_file_locked
008267a0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
008272b8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0082746c l     F .text	00000040 alt_sim_halt
0082538c g     F .text	00000038 alt_up_av_config_reset
0081241c g     F .text	0000001c putchar
00817ddc g     F .text	00000094 _mprec_log10
00825830 g     F .text	00000064 alt_up_av_config_read_D5M_cfg_register
0082a6ee g     O .rwdata	00000002 OSTaskNameSize
0080b1e4 g     F .text	000001dc sd_getDriveSize
008054f4 g     F .text	00000068 file_write
00817ec8 g     F .text	00000088 __any_on
0081986c g     F .text	00000070 _isatty_r
008289cc g     O .rodata	00000028 __mprec_tinytens
008253fc g     F .text	00000030 alt_up_av_config_disable_interrupt
008068b8 g     F .text	00000158 fs_countDataSectors
0081af38 g     F .text	000000c8 alt_main
00812440 g     F .text	000000a0 _puts_r
0093dd6c g     O .bss	00000100 alt_irq
00803790 g     F .text	00000048 disc_initDisc
00803b7c g     F .text	0000014c ex_getPartitionField
0080f3f4 g     F .text	00000018 fabs
008198dc g     F .text	00000078 _lseek_r
00802a4c g     F .text	0000017c interrupt_isr_buttonPress
0081fb3c g     F .text	000000d0 OS_MemInit
00823a7c g     F .text	00000064 OSTimeSet
008065e0 g     F .text	0000013c fs_loadVolumeId
008087e4 g     F .text	000000dc ioman_putSectorInCache
00825a3c g     F .text	00000034 alt_up_character_lcd_send_cmd
00810c4c g     F .text	00000088 __eqdf2
0082a7f8 g     O .bss	0000001c isPlaying
0080499c g     F .text	000001b0 fat_getNextClusterChain
0081ba88 g     F .text	000006b4 OSEventPendMulti
00824ca4 g     F .text	00000070 alt_up_audio_read_fifo_avail
0093dffc g       *ABS*	00000000 __alt_heap_start
008254cc g     F .text	000000ac alt_up_av_config_write_audio_cfg_register
00826da8 g     F .text	00000020 OSTaskCreateHook
0082a814 g     O .bss	00002000 task1_stk
008089d4 g     F .text	00000154 ioman_flushRange
008123a4 g     F .text	00000044 printf
0082a6c6 g     O .rwdata	00000002 OSMboxEn
00824d14 g     F .text	00000070 alt_up_audio_record_r
0081c190 g     F .text	0000007c OSIntEnter
008191ec g     F .text	00000068 __sseek
0081671c g     F .text	000000a4 __sinit
008193ec g     F .text	00000130 __swbuf_r
0082a6d6 g     O .rwdata	00000002 OSQEn
00809f30 g     F .text	00000044 if_spiInit
00817540 g     F .text	00000084 _setlocale_r
0082a720 g     O .bss	00000004 sem
0081681c g     F .text	00000068 __sfmoreglue
0081b744 g     F .text	000000d0 __malloc_unlock
00808120 g     F .text	00000068 ioman_getPtr
00826e04 g     F .text	0000001c OSTaskStatHook
0082a778 g     O .bss	00000001 OSLockNesting
0080fd1c g     F .text	00000174 __divsf3
00812564 g     F .text	00000674 strerror
0082a714 g     O .rwdata	00000002 OSDataSize
0082a779 g     O .bss	00000001 OSRunning
00824c1c g     F .text	00000088 alt_up_audio_reset_audio_core
00807f60 g     F .text	000001c0 ioman_push
008084a4 g     F .text	00000084 ioman_findFreeSpot
00817858 g     F .text	000000e0 memmove
00826e3c g     F .text	0000001c OSInitHookBegin
0080b0e0 g     F .text	00000104 sd_readSector
0082a70c g     O .rwdata	00000002 OSTmrSize
0081680c g     F .text	00000010 _cleanup
00817f50 g     F .text	000000bc _Balloc
0082a77c g     O .bss	00000004 OSIdleCtr
00810d5c g     F .text	00000088 __gtdf2
0080ac78 g     F .text	000001d8 sd_Resp8bError
00826a74 g       .text	00000000 OSStartTsk
00811b0c g     F .text	00000010 __errno
008259c0 g     F .text	0000007c get_DDRAM_addr
0081d65c g     F .text	000002e0 OS_TCBInit
0080c2f8 g     F .text	00000144 i2c_write
00805f30 g     F .text	00000278 file_normalToFatName
01400000 g     F .entry	00000000 __reset
00802758 g     F .text	00000298 synthesize
0082a724 g     O .bss	00000004 edge_capture
0082a712 g     O .rwdata	00000002 OSTmrWheelTblSize
00802f68 g     F .text	00000088 dir_updateDirectoryEntry
0082a6b2 g     O .rwdata	00000002 OSEventSize
0082a780 g     O .bss	00000001 OSPrioHighRdy
008197f8 g     F .text	00000074 _fstat_r
00826dc8 g     F .text	00000020 OSTaskDelHook
0082a728 g     O .bss	00000004 semaphore
0082a744 g     O .bss	00000004 errno
00810fec g     F .text	00000038 __make_dp
00826a54 g       .text	00000000 OSStartHighRdy
0080a5e4 g     F .text	00000060 part_getSect
00822250 g     F .text	00000200 OSTaskCreateExt
0080aae0 g     F .text	000000b4 sd_Command
0081eabc g     F .text	00000068 OSFlagPendGetFlagsRdy
0082a6f2 g     O .rwdata	00000002 OSTaskStatStkSize
00824be0 g     F .text	0000003c alt_up_audio_write_interrupt_pending
008115cc g     F .text	0000002c __make_fp
0081dac8 g     F .text	00000334 OSFlagAccept
008032cc g     F .text	00000124 dir_findinCluster
00820274 g     F .text	000000c8 OSQFlush
0080ab94 g     F .text	0000007c sd_Resp8b
00809764 g     F .text	00000110 ls_getRootAreaEntry
0081fc0c g     F .text	00000154 OSQAccept
0082a760 g     O .bss	00000004 alt_argv
008079ac g     F .text	0000006c ioman_getUseCnt
00832660 g       *ABS*	00000000 _gp
0081b29c g     F .text	00000118 usleep
008033f0 g     F .text	000000f8 dir_findinDir
0080fa68 g     F .text	00000070 __subsf3
0082207c g     F .text	000001d4 OSTaskCreate
00821b08 g     F .text	00000574 OSTaskChangePrio
0082a774 g     O .bss	00000004 alt_heapsem
0081d93c g     F .text	0000018c OSDebugInit
00822450 g     F .text	0000040c OSTaskDel
008046b8 g     F .text	000002e4 fat_setNextClusterAddressWBuf
00806c54 g     F .text	000000fc fs_sectorToCluster
00803cf0 g     F .text	00000128 fat_getSectorAddressFatEntry
00809904 g     F .text	000000a4 ls_fileEntryToDirListEntry
008293e8 g     O .rwdata	00000180 alt_fd_list
0093ab48 g     O .bss	00000370 OSFlagTbl
00812438 g     F .text	00000008 _putchar_r
008094d8 g     F .text	0000008c ls_getDirEntry
0081cc0c g     F .text	000000b8 OS_EventTaskRemove
0082636c g     F .text	00000094 alt_find_dev
00812284 g     F .text	000000a0 memcpy
0082a6dc g     O .rwdata	00000002 OSRdyTblSize
00825bd4 g     F .text	0000004c alt_up_character_lcd_write_fd
00816800 g     F .text	0000000c _cleanup_r
00810ef4 g     F .text	000000f8 __floatsidf
00812390 g     F .text	00000014 perror
008264c4 g     F .text	00000078 alt_io_redirect
00810de4 g     F .text	00000088 __ltdf2
0080927c g     F .text	000001a4 ioman_printStatus
008029f0 g     F .text	0000005c init_button_pio
0080960c g     F .text	00000158 ls_getRealDirEntry
008274dc g       *ABS*	00000000 __DTOR_END__
008124e0 g     F .text	00000014 puts
0081b814 g     F .text	00000130 OSEventNameGet
0082a6c0 g     O .rwdata	00000002 OSFlagMax
00817d2c g     F .text	000000b0 __ratio
0081c20c g     F .text	00000100 OSIntExit
0080d888 g     F .text	0000011c parseWav
0082a6fa g     O .rwdata	00000002 OSTCBSize
00825178 g     F .text	00000060 alt_up_audio_read_fifo_head
0082a781 g     O .bss	00000001 OSPrioCur
00824394 g     F .text	000002c0 altera_avalon_jtag_uart_read
00811b30 g     F .text	00000014 malloc
008123e8 g     F .text	00000034 _printf_r
00806a10 g     F .text	0000007c fs_determineFatType
00802e40 g     F .text	000000a8 dir_setFirstCluster
01904000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
008064b0 g     F .text	000000bc fs_initFs
008111d4 g     F .text	00000008 __udivsi3
0081acc8 g     F .text	000000c0 isatty
008002a0 g     F .text	00000358 initMPU9250
00806360 g     F .text	00000150 file_requiredCluster
0082c814 g     O .bss	000249f0 tom2
0082a6e0 g     O .rwdata	00000002 OSStkWidth
008288dc g     O .rodata	000000c8 __mprec_tens
0082a6d4 g     O .rwdata	00000002 OSPtrSize
00806b88 g     F .text	000000cc fs_clusterToSector
0080bf78 g     F .text	0000015c I2C_ReadFromDeviceRegister
0080399c g     F .text	00000060 ex_getb16
00851204 g     O .bss	00004e20 kick
0081751c g     F .text	00000008 __locale_charset
0082a6b4 g     O .rwdata	00000002 OSEventTblSize
00803874 g     F .text	00000128 efs_init
008269c8 g       .text	00000000 OSCtxSw
0082a738 g     O .bss	00000004 __malloc_top_pad
0082a784 g     O .bss	00000004 OSTCBList
0082a754 g     O .bss	00000004 alt_fd_list_lock
00825300 g     F .text	0000008c alt_up_av_config_read_data
0082a674 g     O .rwdata	00000004 __mb_cur_max
00817524 g     F .text	0000000c _localeconv_r
008088c0 g     F .text	00000114 ioman_flushSector
00818648 g     F .text	0000003c __i2b
00816f00 g     F .text	0000049c __sfvwrite_r
0093aeb8 g     O .bss	00000c30 OSMemTbl
0082a788 g     O .bss	00000001 OSTickStepState
0082a72c g     O .bss	00000004 audio_dev
00808240 g     F .text	0000008c ioman_readSector
008124f4 g     F .text	00000070 _sbrk_r
0080a4ac g     F .text	00000070 part_readBuf
00856024 g     O .bss	00000040 nextToPlay
00856064 g     O .bss	00037ab8 tom
0082a6d8 g     O .rwdata	00000002 OSQMax
0093bae8 g     O .bss	00000800 OSTaskStatStk
0081f724 g     F .text	0000010c OSMemNameGet
0080631c g     F .text	00000044 file_getAttr
0082a6b8 g     O .rwdata	00000002 OSFlagEn
00808528 g     F .text	00000170 ioman_findUnusedSpot
00819954 g     F .text	00000078 _read_r
0082a6fe g     O .rwdata	00000002 OSTimeTickHookEn
0080a58c g     F .text	00000058 part_getRealLBA
008207d8 g     F .text	00000180 OSQPost
0081f358 g     F .text	000000ac OS_FlagUnlink
008293b4 g     O .rwdata	0000000c __lc_ctype
0082a68c g     O .rwdata	00000004 alt_max_fd
0081d1e8 g     F .text	0000006c OS_MemCopy
008251d8 g     F .text	00000060 alt_up_audio_write_fifo_head
0081d254 g     F .text	000000d4 OS_Sched
0081190c g     F .text	00000138 __unpack_d
008196d4 g     F .text	00000110 _fclose_r
008061a8 g     F .text	000000e8 file_validateChar
0081f620 g     F .text	00000104 OSMemGet
0080a380 g     F .text	000000b0 part_initPartition
00822b84 g     F .text	000001c4 OSTaskNameSet
00816680 g     F .text	00000034 fflush
0082a73c g     O .bss	00000004 __malloc_max_sbrked_mem
0082a78c g     O .bss	00000004 OSCtxSwCtr
00826e20 g     F .text	0000001c OSTimeTickHook
0081ab08 g     F .text	000001c0 alt_irq_register
0082a6c2 g     O .rwdata	00000002 OSFlagNameSize
00810018 g     F .text	00000054 __extendsfdf2
0081ccc4 g     F .text	00000104 OS_EventTaskRemoveMulti
00808bfc g     F .text	0000030c ioman_getSector
008105bc g     F .text	00000074 __adddf3
0080c5a8 g     F .text	00000b44 pollIMU
0081cab8 g     F .text	00000154 OS_EventTaskWaitMulti
00817c0c g     F .text	00000120 __b2d
00803240 g     F .text	0000008c dir_findinBuf
0082a6da g     O .rwdata	00000002 OSQSize
0080b3c0 g     F .text	00000020 fs_makeDate
00819fa8 g     F .text	000005b0 __umoddi3
0081ade8 g     F .text	000000f0 lseek
008213b4 g     F .text	0000027c OSSemPend
0082a660 g     O .rwdata	00000004 __fdlib_version
0082a668 g     O .rwdata	00000004 _global_impure_ptr
00818bb0 g     F .text	000005f4 _realloc_r
0082a6c4 g     O .rwdata	00000002 OSLowestPrio
0093dffc g       *ABS*	00000000 __bss_end
00802690 g     F .text	000000c8 audio_isr
00826e90 g     F .text	00000020 OSTCBInitHook
0082a70a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00826898 g     F .text	00000110 alt_tick
008199cc g     F .text	000005dc __udivdi3
0080a714 g     F .text	0000006c part_directSectorRead
008083f8 g     F .text	000000ac ioman_findSectorInCache
0080b3e0 g     F .text	00000020 fs_makeTime
0082a6ac g     O .rwdata	00000002 OSEventEn
008289a4 g     O .rodata	00000028 __mprec_bigtens
008188a4 g     F .text	00000120 __s2b
0082a706 g     O .rwdata	00000002 OSTmrCfgNameSize
0081a6b8 g     F .text	00000194 __floatunsidf
00817b2c g     F .text	00000060 __mcmp
00808698 g     F .text	0000014c ioman_findOverallocableSpot
0088db1c g     O .bss	000062a4 hihat2
00824a2c g     F .text	00000040 alt_up_audio_open_dev
0082a730 g     O .bss	00000004 button
008167e8 g     F .text	00000018 __fp_lock_all
0080a944 g     F .text	0000005c memSet
00803700 g     F .text	00000090 dir_addCluster
0082a734 g     O .bss	00000004 myLCD
00809f08 g     F .text	00000028 if_setPos
0081f164 g     F .text	000000e4 OS_FlagInit
0080b860 g     F .text	000002c8 makedir
00824e68 g     F .text	00000070 alt_up_audio_play_r
00826800 g     F .text	00000098 alt_alarm_stop
0080bc90 g     F .text	00000130 I2C_WriteToDeviceRegister
0082a6e8 g     O .rwdata	00000002 OSTaskIdleStkSize
0082a758 g     O .bss	00000004 alt_irq_active
00820f40 g     F .text	000000c0 OSSemAccept
0081f950 g     F .text	000000f0 OSMemPut
00806df4 g     F .text	00000240 fs_findFile
008044f0 g     F .text	000001c8 fat_getNextClusterAddressWBuf
0081f404 g     F .text	0000021c OSMemCreate
0082a790 g     O .bss	00000004 OSIdleCtrMax
00807034 g     F .text	00000120 fs_findFreeFile
019040ec g     F .exceptions	000000d4 alt_irq_handler
008293c0 g     O .rwdata	00000028 alt_dev_null
0082a6fc g     O .rwdata	00000002 OSTicksPerSec
00803aec g     F .text	00000090 ex_setb32
0080f470 g     F .text	00000210 rint
0081145c g     F .text	000000c8 __unpack_f
00825ebc g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00809564 g     F .text	000000a8 ls_getNext
0080c1f8 g     F .text	00000088 i2c_start
008269c8 g       .text	00000000 OSIntCtxSw
008076a4 g     F .text	00000170 ioman_reset
008179f8 g     F .text	00000070 __hi0bits
0081a5e0 g     F .text	000000d8 __fixdfsi
00807c9c g     F .text	00000094 ioman_decRefCnt
008072e0 g     F .text	00000048 fs_setFirstClusterInDirEntry
0082a794 g     O .bss	00000004 OSTCBFreeList
00821630 g     F .text	0000017c OSSemPendAbort
0082a684 g     O .rwdata	00000008 alt_dev_list
008169d8 g     F .text	00000058 _fputc_r
0081b3b4 g     F .text	00000120 write
00818ac8 g     F .text	000000e8 _putc_r
0082a700 g     O .rwdata	00000002 OSVersionNbr
008000a0 g     F .text	00000100 readAccelData
0080fe90 g     F .text	00000078 __gtsf2
0080722c g     F .text	00000054 fs_getFirstClusterRootDir
0081a9d4 g     F .text	000000d4 fstat
00810e6c g     F .text	00000088 __ledf2
0082a6a8 g     O .rwdata	00000004 OSEndiannessTest
00818784 g     F .text	00000120 __pow5mult
0082a748 g     O .bss	00000004 __nlocale_changed
008111dc g     F .text	00000008 __umodsi3
00804b4c g     F .text	00000130 fat_LogicToDiscCluster
00804040 g     F .text	00000374 fat_setNextClusterAddress
0082a6ba g     O .rwdata	00000002 OSFlagGrpSize
0093dffc g       *ABS*	00000000 end
008112fc g     F .text	00000160 __pack_f
00823d20 g     F .text	00000130 altera_avalon_jtag_uart_init
0081d4cc g     F .text	000000c8 OS_TaskStat
00805174 g     F .text	00000080 fat_countFreeClusters
008058fc g     F .text	00000478 file_fopen
008274d8 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008249a4 g     F .text	00000088 alt_avalon_timer_sc_init
0081127c g     F .text	00000080 __clzsi2
00824654 g     F .text	000002dc altera_avalon_jtag_uart_write
008034e8 g     F .text	00000144 dir_findinRootArea
0081670c g     F .text	00000004 __sfp_lock_acquire
00817774 g     F .text	000000e4 memchr
0081d194 g     F .text	00000054 OS_MemClr
00825ae4 g     F .text	00000078 alt_up_character_lcd_write
00812cac g     F .text	00001eac ___vfprintf_internal_r
00826a98 g     F .text	00000310 OSTaskStkInit
0080bdc0 g     F .text	000000c4 I2C_WriteMore
00816bec g     F .text	00000314 _free_r
0081c814 g     F .text	00000194 OS_EventTaskRdy
00808188 g     F .text	000000b8 ioman_getBp
0080d6e0 g     F .text	00000080 sdInit
00803e18 g     F .text	00000228 fat_getNextClusterAddress
00807aac g     F .text	00000094 ioman_decUseCnt
008272bc g     F .text	000001b0 __call_exitprocs
0080548c g     F .text	00000068 file_read
0082a798 g     O .bss	00000001 OSCPUUsage
0082a74c g     O .bss	00000004 __mlocale_changed
0082a670 g     O .rwdata	00000004 __malloc_sbrk_base
00800000 g     F .text	00000048 _start
00800048 g     F .text	0000002c getAres
0082a7c8 g     O .bss	00000004 _alt_tick_rate
0082033c g     F .text	00000320 OSQPend
00807328 g     F .text	0000004c fs_flushFs
00812c4c g     F .text	00000008 _user_strerror
00823548 g     F .text	0000014c OSTimeDly
0082504c g     F .text	0000012c alt_up_audio_write_fifo
008050c4 g     F .text	000000b0 fat_DiscToLogicCluster
00818314 g     F .text	0000014c __lshift
0082529c g     F .text	00000064 alt_up_av_config_write_data
0082a7cc g     O .bss	00000004 _alt_nticks
0081b000 g     F .text	00000120 read
00823b14 g     F .text	0000008c alt_sys_init
00825d48 g     F .text	000000b0 alt_up_character_lcd_shift_display
0080ff80 g     F .text	00000098 __floatsisf
00802d0c g     F .text	00000084 dir_createDirectoryEntry
00824f48 g     F .text	00000104 alt_up_audio_read_fifo
0080a430 g     F .text	0000007c part_isFatPart
00827184 g     F .text	00000134 __register_exitproc
0082a799 g     O .bss	00000001 OSTaskCtr
0082595c g     F .text	00000064 alt_up_av_config_write_LTM_cfg_register
00824b54 g     F .text	00000050 alt_up_audio_disable_write_interrupt
00809f74 g     F .text	00000120 if_spiSend
00823694 g     F .text	00000174 OSTimeDlyHMSM
00818460 g     F .text	000001e8 __multiply
00807814 g     F .text	0000002c ioman_getBuffer
00825df8 g     F .text	00000090 alt_up_character_lcd_erase_pos
0080de2c g     F .text	00001300 __ieee754_pow
0082422c g     F .text	00000074 altera_avalon_jtag_uart_close
0080d9a4 g     F .text	00000488 pow
0080bb98 g     F .text	000000f8 I2C_WriteToDevice
0082a7d0 g     O .bss	00000028 __malloc_current_mallinfo
0082a6ae g     O .rwdata	00000002 OSEventMax
0081800c g     F .text	0000017c __d2b
00807374 g     F .text	0000003c fs_umount
008217ac g     F .text	00000128 OSSemPost
00806dd0 g     F .text	00000024 fs_giveFreeClusterHint
0080a8f0 g     F .text	00000054 memClr
008082cc g     F .text	0000008c ioman_writeSector
0081c398 g     F .text	000000e4 OSSchedUnlock
00807154 g     F .text	000000d8 fs_getLastCluster
00823bd8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00826fd0 g     F .text	000000f4 alt_get_fd
0082a79c g     O .bss	00000004 OSMemFreeList
0081c4ec g     F .text	000000ac OSStatInit
00826044 g     F .text	0000014c alt_busy_sleep
0081eecc g     F .text	000000d4 OSFlagQuery
00811a44 g     F .text	000000c8 __fpcmp_parts_d
00808f08 g     F .text	000000e0 ioman_releaseSector
0082a6e4 g     O .rwdata	00000002 OSTaskCreateExtEn
00819664 g     F .text	00000070 _close_r
00824b08 g     F .text	0000004c alt_up_audio_enable_write_interrupt
00827110 g     F .text	00000074 memcmp
0081c7f8 g     F .text	0000001c OS_Dummy
00823c88 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0093dffc g       *ABS*	00000000 __alt_stack_base
00823cd0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00893dc0 g     O .bss	0003ddb8 crash
00806a8c g     F .text	000000c0 fs_findFirstSectorRootDir
0080755c g     F .text	000000d0 fs_setFsInfo
00814b7c g     F .text	0000013c __swsetup_r
0093c2e8 g     O .bss	000001e0 OSQTbl
008109f4 g     F .text	00000258 __divdf3
0080be84 g     F .text	000000f4 I2C_ReadFromDevice
00824ab8 g     F .text	00000050 alt_up_audio_disable_read_interrupt
00816884 g     F .text	000000f0 __sfp
00817e70 g     F .text	00000058 __copybits
00828fac g     O .rwdata	00000408 __malloc_av_
00802d90 g     F .text	000000b0 dir_createDefaultEntry
00816718 g     F .text	00000004 __sinit_lock_release
008014f8 g     F .text	00000fe8 MPU9250SelfTest
0080c280 g     F .text	00000078 i2c_stop
0082a7a0 g     O .bss	00000004 OSTCBHighRdy
00810630 g     F .text	000003c4 __muldf3
008192d0 g     F .text	00000060 __sread
00827f38 g     O .rodata	00000010 __thenan_sf
0082a7a4 g     O .bss	00000004 OSQFreeList
00826eb0 g     F .text	00000120 alt_find_file
00809110 g     F .text	0000016c ioman_directSectorWrite
00826190 g     F .text	000000b4 alt_dev_llist_insert
0081b63c g     F .text	00000108 __malloc_lock
0081b1e0 g     F .text	000000bc sbrk
0080a884 g     F .text	0000006c memCpy
0080a51c g     F .text	00000070 part_writeBuf
0081b944 g     F .text	00000144 OSEventNameSet
00816484 g     F .text	000001fc _fflush_r
008195b0 g     F .text	000000b4 _calloc_r
0082a7a8 g     O .bss	00000001 OSRdyGrp
00809ebc g     F .text	0000004c if_writeBuf
0080762c g     F .text	00000078 ioman_init
00809874 g     F .text	00000090 ls_isValidFileEntry
00809420 g     F .text	000000b8 ls_openDir
0082a720 g       *ABS*	00000000 __bss_start
00808b28 g     F .text	000000d4 ioman_flushAll
00817938 g     F .text	00000098 memset
0080d0ec g     F .text	000005f4 main
00824df4 g     F .text	00000074 alt_up_audio_write_fifo_space
0082a764 g     O .bss	00000004 alt_envp
0082a740 g     O .bss	00000004 __malloc_max_total_mem
00823c30 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080c43c g     F .text	0000016c i2c_read
0081951c g     F .text	0000001c __swbuf
00828a20 g     O .rodata	00000100 OSUnMapTbl
0080ff08 g     F .text	00000078 __ltsf2
0080b00c g     F .text	000000d4 sd_writeSector
0082a6de g     O .rwdata	00000002 OSSemEn
00825c98 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0081eb24 g     F .text	000003a8 OSFlagPost
008039fc g     F .text	00000098 ex_getb32
008191e4 g     F .text	00000008 __sclose
0080f458 g     F .text	00000008 matherr
01000000 g       *ABS*	00000000 __alt_heap_limit
008197e4 g     F .text	00000014 fclose
0081c9a8 g     F .text	00000110 OS_EventTaskWait
008d1b78 g     O .bss	00002000 task2_stk
00811024 g     F .text	00000074 __truncdfsf2
0081d594 g     F .text	000000c8 OS_TaskStatStkChk
0093de6c g     O .bss	00000190 _atexit0
0082285c g     F .text	00000170 OSTaskDelReq
00814ed0 g     F .text	000015b4 _dtoa_r
00811b44 g     F .text	00000740 _malloc_r
0082a690 g     O .rwdata	00000004 alt_errno
0081c47c g     F .text	00000070 OSStart
0081b5e0 g     F .text	0000005c __env_unlock
00817464 g     F .text	000000b8 _fwalk
00822d48 g     F .text	00000218 OSTaskResume
0081fa40 g     F .text	000000fc OSMemQuery
0082a6f0 g     O .rwdata	00000002 OSTaskStatEn
00803cc8 g     F .text	00000028 ex_setPartitionField
00807c08 g     F .text	00000094 ioman_incRefCnt
0082a6ca g     O .rwdata	00000002 OSMemMax
00820958 g     F .text	00000188 OSQPostFront
008189c4 g     F .text	00000104 putc
00811114 g     F .text	00000060 __divsi3
0082a7a9 g     O .bss	00000003 OSRdyTbl
0082a6a4 g     O .rwdata	00000002 OSDebugEn
00827f48 g     O .rodata	00000014 __thenan_df
00825aa4 g     F .text	00000040 alt_up_character_lcd_open_dev
00816ac0 g     F .text	0000012c _malloc_trim_r
008274dc g       *ABS*	00000000 __CTOR_END__
0080fb3c g     F .text	000001e0 __mulsf3
0080f40c g     F .text	0000001c finite
0082a6bc g     O .rwdata	00000002 OSFlagNodeSize
00802ff0 g     F .text	00000158 dir_findFileinBuf
0082a704 g     O .rwdata	00000002 OSTmrCfgMax
00825a70 g     F .text	00000034 alt_up_character_lcd_init
008001a0 g     F .text	00000100 readGyroData
00819330 g     F .text	000000bc strcmp
0081fd60 g     F .text	00000214 OSQCreate
008229cc g     F .text	000001b8 OSTaskNameGet
00820ae0 g     F .text	00000234 OSQPostOpt
0081c598 g     F .text	00000240 OSTimeTick
0082a6ec g     O .rwdata	00000002 OSTaskMax
008274dc g       *ABS*	00000000 __DTOR_LIST__
00821000 g     F .text	00000114 OSSemCreate
0082a710 g     O .rwdata	00000002 OSTmrWheelSize
00807840 g     F .text	000000e4 ioman_setAttr
008043b4 g     F .text	000000b4 fat_isEocMarker
0080f860 g     F .text	00000024 copysign
0080b720 g     F .text	00000140 rmfile
00810cd4 g     F .text	00000088 __nedf2
008d3b78 g     O .bss	0000001c drums
0082a6e6 g     O .rwdata	00000002 OSTaskDelEn
00808fe8 g     F .text	00000128 ioman_directSectorRead
01880000 g       *ABS*	00000000 __alt_mem_sram_0
0080a644 g     F .text	0000004c part_relSect
00825238 g     F .text	00000064 alt_up_av_config_open_dev
0080a358 g     F .text	00000028 ramdisk_init
00807d8c g     F .text	000001d4 ioman_pop
0080a690 g     F .text	00000084 part_flushPart
008218d4 g     F .text	00000130 OSSemQuery
0081ff74 g     F .text	00000300 OSQDel
0082065c g     F .text	0000017c OSQPendAbort
00823ae0 g     F .text	00000034 alt_irq_init
0081b180 g     F .text	00000060 alt_release_fd
00803a94 g     F .text	00000058 ex_setb16
00804c7c g     F .text	000002cc fat_allocClusterChain
00804468 g     F .text	00000088 fat_giveEocMarker
0080b420 g     F .text	00000300 listFiles
00807924 g     F .text	00000088 ioman_getAttr
00807b40 g     F .text	0000005c ioman_resetUseCnt
00825e88 g     F .text	00000034 alt_up_character_lcd_cursor_off
00827f5c g     O .rodata	00000100 __clz_tab
008051f4 g     F .text	00000298 file_fread
0082a750 g     O .bss	00000004 _PathLocale
0080b400 g     F .text	00000020 fs_hasTimeSupport
01400000 g       *ABS*	00000000 __alt_mem_generic_tristate_controller_0
008270c4 g     F .text	00000014 atexit
00819538 g     F .text	00000078 _write_r
00825494 g     F .text	00000038 alt_up_av_config_read_ready
0080a7ec g     F .text	00000098 strMatch
0081c30c g     F .text	0000008c OSSchedLock
008175c4 g     F .text	0000001c setlocale
0081ddfc g     F .text	0000013c OSFlagCreate
0080bb28 g     F .text	00000038 I2C_Start
0082a664 g     O .rwdata	00000004 _impure_ptr
0080a094 g     F .text	000000d0 if_spi_sendbuf
0082a75c g     O .bss	00000004 alt_argc
0080f680 g     F .text	000001e0 scalbn
00802bc8 g     F .text	00000088 setDrum
00826308 g     F .text	00000064 _do_dtors
0080c180 g     F .text	00000078 i2c_selectAddress
0082a6b6 g     O .rwdata	00000002 OSEventMultiEn
008024e0 g     F .text	000001b0 audioInit
0081df38 g     F .text	000002a8 OSFlagDel
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
0082a7ac g     O .bss	00000004 OSEventFreeList
01904020 g       .exceptions	00000000 alt_irq_entry
00817b8c g     F .text	00000080 __ulp
008191a4 g     F .text	00000040 __isinfd
0081e478 g     F .text	00000644 OSFlagPend
0082a702 g     O .rwdata	00000002 OSTmrEn
008167d0 g     F .text	00000018 __fp_unlock_all
00816974 g     F .text	00000064 fputc
0082a67c g     O .rwdata	00000008 alt_fs_list
0081d398 g     F .text	00000080 OS_StrCopy
00824d84 g     F .text	00000070 alt_up_audio_record_l
00806290 g     F .text	0000008c file_setAttr
0082a6cc g     O .rwdata	00000002 OSMemNameSize
0080f460 g     F .text	00000010 nan
00826e58 g     F .text	0000001c OSInitHookEnd
00806d50 g     F .text	00000080 fs_getNextFreeCluster
0082a6f8 g     O .rwdata	00000002 OSTCBPrioTblMax
00817530 g     F .text	00000010 localeconv
0080f12c g     F .text	000002c8 __ieee754_sqrt
0082a6f4 g     O .rwdata	00000002 OSTaskStatStkChkEn
00805d74 g     F .text	00000100 file_fclose
008253c4 g     F .text	00000038 alt_up_av_config_enable_interrupt
00807b9c g     F .text	0000006c ioman_getRefCnt
0082a6c8 g     O .rwdata	00000002 OSMemEn
0082a6d2 g     O .rwdata	00000002 OSMutexEn
0082542c g     F .text	00000068 alt_up_av_config_read_acknowledge
00807d30 g     F .text	0000005c ioman_resetRefCnt
008257cc g     F .text	00000064 alt_up_av_config_write_DC2_cfg_register
0082a720 g       *ABS*	00000000 _edata
00805020 g     F .text	000000a4 fat_countClustersInChain
0093dffc g       *ABS*	00000000 _end
00802ee8 g     F .text	00000080 dir_setFileSize
0082a7b0 g     O .bss	00000001 OSIntNesting
0080671c g     F .text	0000019c fs_verifySanity
0080362c g     F .text	000000d4 dir_getFatFileName
008242a0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00816a30 g     F .text	00000074 _fputs_r
008099a8 g     F .text	000003e4 mkfs_makevfat
008037d8 g     F .text	0000009c disc_loadMBR
00823808 g     F .text	00000210 OSTimeDlyResume
00804f48 g     F .text	000000d8 fat_unlinkClusterChain
0081e324 g     F .text	00000154 OSFlagNameSet
008d3b94 g     O .bss	0000710c snare
00824ed8 g     F .text	00000070 alt_up_audio_play_l
00822f60 g     F .text	000001fc OSTaskStkChk
0082a6ce g     O .rwdata	00000002 OSMemSize
00802c50 g     F .text	000000bc dir_getFileStructure
00819254 g     F .text	0000007c __swrite
0082a66c g     O .rwdata	00000004 __malloc_trim_threshold
00812324 g     F .text	0000006c _perror_r
008269a8 g     F .text	00000020 altera_nios2_qsys_irq_init
0082a7b4 g     O .bss	00000004 OSTCBCur
008270d8 g     F .text	00000038 exit
0082a6d0 g     O .rwdata	00000002 OSMemTblSize
0081739c g     F .text	000000c8 _fwalk_reent
0081006c g     F .text	000000c0 __floatunsisf
00818188 g     F .text	0000018c __mdiff
008258f8 g     F .text	00000064 alt_up_av_config_read_LTM_cfg_register
00811174 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
01904020 g     F .exceptions	00000000 alt_exception
00816710 g     F .text	00000004 __sfp_lock_release
0081c13c g     F .text	00000054 OSInit
00823388 g     F .text	00000144 OSTaskQuery
00809e6c g     F .text	00000050 if_readBuf
00807a18 g     F .text	00000094 ioman_incUseCnt
00825b5c g     F .text	00000078 alt_up_character_lcd_string
00820e94 g     F .text	000000ac OS_QInit
0081d418 g     F .text	00000058 OS_StrLen
00800074 g     F .text	0000002c getGres
0081f830 g     F .text	00000120 OSMemNameSet
0080a164 g     F .text	000000e8 if_spi_readbuf
0080ac10 g     F .text	00000068 sd_Resp16b
00807460 g     F .text	000000fc fs_getFsInfo
0082a6ea g     O .rwdata	00000002 OSTaskProfileEn
0080d760 g     F .text	00000128 sdRead
0082a7b8 g     O .bss	00000004 OSTime
0080bb60 g     F .text	00000038 I2C_Stop
00811524 g     F .text	000000a8 __fpcmp_parts_f
0093c4c8 g     O .bss	00000800 OSTaskIdleStk
008274ac g     F .text	0000002c _exit
0080f428 g     F .text	00000030 __isnand
00825ef0 g     F .text	00000154 alt_alarm_start
0081e1e0 g     F .text	00000144 OSFlagNameGet
00823a18 g     F .text	00000064 OSTimeGet
008111e4 g     F .text	00000098 __muldi3
008175e0 g     F .text	00000194 __smakebuf_r
0080555c g     F .text	00000054 file_setpos
00805e74 g     F .text	000000bc file_initFile
00812bd8 g     F .text	00000074 strlen
00826de8 g     F .text	0000001c OSTaskSwHook
00826618 g     F .text	00000188 open
0093ccc8 g     O .bss	00000b40 OSEventTbl
0081a558 g     F .text	00000088 __gedf2
00807280 g     F .text	00000060 fs_initClusterChain
008005f8 g     F .text	00000f00 calibrateMPU9250
0093d808 g     O .bss	00000510 OSTCBTbl
00821a04 g     F .text	00000104 OSSemSet
00825578 g     F .text	000000f8 alt_up_av_config_read_video_cfg_register
00808358 g     F .text	000000a0 ioman_resetCacheItem
00816aa4 g     F .text	0000001c fputs
00825c20 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0082a694 g     O .rwdata	00000004 alt_priority_mask
00806b4c g     F .text	0000003c fs_initCurrentDir
00821114 g     F .text	000002a0 OSSemDel
0082a7bc g     O .bss	00000004 OSFlagFreeList
0082a6b0 g     O .rwdata	00000002 OSEventNameSize
00814b58 g     F .text	00000024 __vfprintf_internal
0082a7c0 g     O .bss	00000001 OSStatRdy
00825894 g     F .text	00000064 alt_up_av_config_write_D5M_cfg_register
0093dd18 g     O .bss	00000054 OSTCBPrioTbl
0081b534 g     F .text	000000ac __env_lock
0082a6f6 g     O .rwdata	00000002 OSTaskSwHookEn
008073b0 g     F .text	000000b0 fs_clearCluster
0081053c g     F .text	00000080 __subdf3
0080a780 g     F .text	0000006c part_directSectorWrite
0080c0d4 g     F .text	000000ac I2C_ReadMore
0080ae50 g     F .text	000001bc sd_State
00817a68 g     F .text	000000c4 __lo0bits
0080a9a0 g     F .text	00000140 sd_Init
0082a718 g     O .rwdata	00000008 alt_alarm_list
0082a6be g     O .rwdata	00000002 OSFlagWidth
008262a4 g     F .text	00000064 _do_ctors
00803148 g     F .text	000000f8 dir_findFreeEntryinBuf
0081a84c g     F .text	000000fc close
0080fad8 g     F .text	00000064 __addsf3
0082a76c g     O .bss	00000004 alt_envsem
0082a7c4 g     O .bss	00000004 OSIdleCtrRun
00809d8c g     F .text	000000e0 if_initInterface
0081c7d8 g     F .text	00000020 OSVersion
008055b0 g     F .text	0000034c file_fwrite
0082a708 g     O .rwdata	00000002 OSTmrCfgWheelSize
00824a6c g     F .text	0000004c alt_up_audio_enable_read_interrupt
008234cc g     F .text	0000007c OS_TaskStkClr
00825670 g     F .text	000000f8 alt_up_av_config_write_video_cfg_register
008115f8 g     F .text	00000314 __pack_d
0082a6e2 g     O .rwdata	00000002 OSTaskCreateEn
0081cdc8 g     F .text	00000068 OS_EventWaitListInit
008daca0 g     O .bss	0005fea8 hihat
00826e74 g     F .text	0000001c OSTaskIdleHook
00811b1c g     F .text	00000014 free
00816714 g     F .text	00000004 __sinit_lock_acquire
00818684 g     F .text	00000100 __multadd
0082315c g     F .text	0000022c OSTaskSuspend
008179d0 g     F .text	00000028 _Bfree
0080656c g     F .text	00000074 fs_isValidFat
00825768 g     F .text	00000064 alt_up_av_config_read_DC2_cfg_register
0081d470 g     F .text	0000005c OS_TaskIdle
0082a70e g     O .rwdata	00000002 OSTmrTblSize
00824ba4 g     F .text	0000003c alt_up_audio_read_interrupt_pending
00820d14 g     F .text	00000180 OSQQuery



Disassembly of section .exceptions:

01904020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1904020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1904024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1904028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 190402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1904030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1904034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1904038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 190403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1904040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1904044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1904048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 190404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1904050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1904054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1904058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 190405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1904060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1904064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1904068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 190406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1904070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1904074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1904078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 190407c:	10000326 	beq	r2,zero,190408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1904080:	20000226 	beq	r4,zero,190408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1904084:	19040ec0 	call	19040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1904088:	00000306 	br	1904098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 190408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1904090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1904094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1904098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 190409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 19040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 19040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 19040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 19040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 19040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 19040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 19040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 19040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 19040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 19040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 19040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 19040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 19040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 19040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 19040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 19040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 19040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 19040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 19040e8:	ef80083a 	eret

019040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 19040ec:	defff904 	addi	sp,sp,-28
 19040f0:	dfc00615 	stw	ra,24(sp)
 19040f4:	df000515 	stw	fp,20(sp)
 19040f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 19040fc:	081c1900 	call	81c190 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1904100:	0005313a 	rdctl	r2,ipending
 1904104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1904108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 190410c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 1904110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1904114:	00800044 	movi	r2,1
 1904118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 190411c:	e0ffff17 	ldw	r3,-4(fp)
 1904120:	e0bffe17 	ldw	r2,-8(fp)
 1904124:	1884703a 	and	r2,r3,r2
 1904128:	1005003a 	cmpeq	r2,r2,zero
 190412c:	1000171e 	bne	r2,zero,190418c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 1904130:	e0bffd17 	ldw	r2,-12(fp)
 1904134:	00c02534 	movhi	r3,148
 1904138:	18f75b04 	addi	r3,r3,-8852
 190413c:	100490fa 	slli	r2,r2,3
 1904140:	10c5883a 	add	r2,r2,r3
 1904144:	11800017 	ldw	r6,0(r2)
 1904148:	e0bffd17 	ldw	r2,-12(fp)
 190414c:	00c02534 	movhi	r3,148
 1904150:	18f75b04 	addi	r3,r3,-8852
 1904154:	100490fa 	slli	r2,r2,3
 1904158:	10c5883a 	add	r2,r2,r3
 190415c:	10800104 	addi	r2,r2,4
 1904160:	11000017 	ldw	r4,0(r2)
 1904164:	e17ffd17 	ldw	r5,-12(fp)
 1904168:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 190416c:	0005313a 	rdctl	r2,ipending
 1904170:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1904174:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1904178:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 190417c:	e0bfff17 	ldw	r2,-4(fp)
 1904180:	1004c03a 	cmpne	r2,r2,zero
 1904184:	103fe21e 	bne	r2,zero,1904110 <alt_irq_handler+0x24>
 1904188:	00000706 	br	19041a8 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 190418c:	e0bffe17 	ldw	r2,-8(fp)
 1904190:	1085883a 	add	r2,r2,r2
 1904194:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1904198:	e0bffd17 	ldw	r2,-12(fp)
 190419c:	10800044 	addi	r2,r2,1
 19041a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19041a4:	003fdd06 	br	190411c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 19041a8:	081c20c0 	call	81c20c <OSIntExit>
}
 19041ac:	e037883a 	mov	sp,fp
 19041b0:	dfc00117 	ldw	ra,4(sp)
 19041b4:	df000017 	ldw	fp,0(sp)
 19041b8:	dec00204 	addi	sp,sp,8
 19041bc:	f800283a 	ret

Disassembly of section .text:

00800000 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800000:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800004:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800010:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800014:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  800018:	068020f4 	movhi	gp,131
    ori gp, gp, %lo(_gp)
  80001c:	d6899814 	ori	gp,gp,9824
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800020:	008020b4 	movhi	r2,130
    ori r2, r2, %lo(__bss_start)
  800024:	10a9c814 	ori	r2,r2,42784

    movhi r3, %hi(__bss_end)
  800028:	00c024f4 	movhi	r3,147
    ori r3, r3, %lo(__bss_end)
  80002c:	18f7ff14 	ori	r3,r3,57340

    beq r2, r3, 1f
  800030:	10c00326 	beq	r2,r3,800040 <_start+0x40>

0:
    stw zero, (r2)
  800034:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800038:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  80003c:	10fffd36 	bltu	r2,r3,800034 <_start+0x34>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800040:	081af380 	call	81af38 <alt_main>

00800044 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800044:	003fff06 	br	800044 <alt_after_alt_main>

00800048 <getAres>:
**************************************************************************/
/*
 * Sets the resolution of the accelerometer
 */

void getAres(float* aRes){
  800048:	defffe04 	addi	sp,sp,-8
  80004c:	df000115 	stw	fp,4(sp)
  800050:	df000104 	addi	fp,sp,4
  800054:	e13fff15 	stw	r4,-4(fp)
	// Possible accelerometer scales (and their register bit settings) are:
	// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
	*aRes =  (float)2.0 / (float)32768.0;
  800058:	e0ffff17 	ldw	r3,-4(fp)
  80005c:	008e2034 	movhi	r2,14464
  800060:	18800015 	stw	r2,0(r3)
}
  800064:	e037883a 	mov	sp,fp
  800068:	df000017 	ldw	fp,0(sp)
  80006c:	dec00104 	addi	sp,sp,4
  800070:	f800283a 	ret

00800074 <getGres>:

/*
 * Sets the resolution of the gyroscope
 */
void getGres(float* gRes){
  800074:	defffe04 	addi	sp,sp,-8
  800078:	df000115 	stw	fp,4(sp)
  80007c:	df000104 	addi	fp,sp,4
  800080:	e13fff15 	stw	r4,-4(fp)
	// Possible gyro scales (and their register bit settings) are:
	// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS (11).
	*gRes =  (float)1000.0 / (float)32768.0;
  800084:	e0ffff17 	ldw	r3,-4(fp)
  800088:	008f3eb4 	movhi	r2,15610
  80008c:	18800015 	stw	r2,0(r3)
}
  800090:	e037883a 	mov	sp,fp
  800094:	df000017 	ldw	fp,0(sp)
  800098:	dec00104 	addi	sp,sp,4
  80009c:	f800283a 	ret

008000a0 <readAccelData>:

/*
 * Read the accelerometer data*/
void readAccelData(alt_16 * destination, alt_u32 scl_base, alt_u32 sda_base)
{
  8000a0:	defff604 	addi	sp,sp,-40
  8000a4:	dfc00915 	stw	ra,36(sp)
  8000a8:	df000815 	stw	fp,32(sp)
  8000ac:	df000804 	addi	fp,sp,32
  8000b0:	e13ffd15 	stw	r4,-12(fp)
  8000b4:	e17ffe15 	stw	r5,-8(fp)
  8000b8:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 deviceAddress = 0xD0;
  8000bc:	00bff404 	movi	r2,-48
  8000c0:	e0bffb05 	stb	r2,-20(fp)
  alt_u8 rawData[6];  // x/y/z accel register data stored here
  // Read the six raw data registers into data array
  I2C_Start(scl_base, sda_base);
  8000c4:	e13ffe17 	ldw	r4,-8(fp)
  8000c8:	e17fff17 	ldw	r5,-4(fp)
  8000cc:	080bb280 	call	80bb28 <I2C_Start>
  I2C_ReadFromDeviceRegister(scl_base, sda_base, deviceAddress, ACCEL_XOUT_H, &rawData[0], 6, true);
  8000d0:	e0bffb03 	ldbu	r2,-20(fp)
  8000d4:	11803fcc 	andi	r6,r2,255
  8000d8:	3180201c 	xori	r6,r6,128
  8000dc:	31bfe004 	addi	r6,r6,-128
  8000e0:	e0bffb44 	addi	r2,fp,-19
  8000e4:	d8800015 	stw	r2,0(sp)
  8000e8:	00800184 	movi	r2,6
  8000ec:	d8800115 	stw	r2,4(sp)
  8000f0:	00800044 	movi	r2,1
  8000f4:	d8800215 	stw	r2,8(sp)
  8000f8:	e13ffe17 	ldw	r4,-8(fp)
  8000fc:	e17fff17 	ldw	r5,-4(fp)
  800100:	01c00ec4 	movi	r7,59
  800104:	080bf780 	call	80bf78 <I2C_ReadFromDeviceRegister>
  I2C_Stop(scl_base, sda_base);
  800108:	e13ffe17 	ldw	r4,-8(fp)
  80010c:	e17fff17 	ldw	r5,-4(fp)
  800110:	080bb600 	call	80bb60 <I2C_Stop>

  // Turn the MSB and LSB into a signed 16-bit value
  destination[0] = ((alt_16)rawData[0] << 8) | rawData[1] ;
  800114:	e0bffb43 	ldbu	r2,-19(fp)
  800118:	10803fcc 	andi	r2,r2,255
  80011c:	1004923a 	slli	r2,r2,8
  800120:	1007883a 	mov	r3,r2
  800124:	e0bffb83 	ldbu	r2,-18(fp)
  800128:	10803fcc 	andi	r2,r2,255
  80012c:	1884b03a 	or	r2,r3,r2
  800130:	1007883a 	mov	r3,r2
  800134:	e0bffd17 	ldw	r2,-12(fp)
  800138:	10c0000d 	sth	r3,0(r2)
  destination[1] = ((alt_16)rawData[2] << 8) | rawData[3] ;
  80013c:	e0bffd17 	ldw	r2,-12(fp)
  800140:	11000084 	addi	r4,r2,2
  800144:	e0bffbc3 	ldbu	r2,-17(fp)
  800148:	10803fcc 	andi	r2,r2,255
  80014c:	1004923a 	slli	r2,r2,8
  800150:	1007883a 	mov	r3,r2
  800154:	e0bffc03 	ldbu	r2,-16(fp)
  800158:	10803fcc 	andi	r2,r2,255
  80015c:	1884b03a 	or	r2,r3,r2
  800160:	2080000d 	sth	r2,0(r4)
  destination[2] = ((alt_16)rawData[4] << 8) | rawData[5] ;
  800164:	e0bffd17 	ldw	r2,-12(fp)
  800168:	11000104 	addi	r4,r2,4
  80016c:	e0bffc43 	ldbu	r2,-15(fp)
  800170:	10803fcc 	andi	r2,r2,255
  800174:	1004923a 	slli	r2,r2,8
  800178:	1007883a 	mov	r3,r2
  80017c:	e0bffc83 	ldbu	r2,-14(fp)
  800180:	10803fcc 	andi	r2,r2,255
  800184:	1884b03a 	or	r2,r3,r2
  800188:	2080000d 	sth	r2,0(r4)
  //printf("destination[0] %d\n", destination[0]);
  //printf("destination[1] %d\n", destination[1]);
  //printf("destination[2] %d\n", destination[2]);
}
  80018c:	e037883a 	mov	sp,fp
  800190:	dfc00117 	ldw	ra,4(sp)
  800194:	df000017 	ldw	fp,0(sp)
  800198:	dec00204 	addi	sp,sp,8
  80019c:	f800283a 	ret

008001a0 <readGyroData>:

/* Read the gyroscope data*/
void readGyroData(alt_16 * destination, alt_u32 scl_base, alt_u32 sda_base)
{
  8001a0:	defff604 	addi	sp,sp,-40
  8001a4:	dfc00915 	stw	ra,36(sp)
  8001a8:	df000815 	stw	fp,32(sp)
  8001ac:	df000804 	addi	fp,sp,32
  8001b0:	e13ffd15 	stw	r4,-12(fp)
  8001b4:	e17ffe15 	stw	r5,-8(fp)
  8001b8:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 deviceAddress = 0xD0;
  8001bc:	00bff404 	movi	r2,-48
  8001c0:	e0bffb05 	stb	r2,-20(fp)
  alt_u8 rawData[6];  // x/y/z gyro register data stored here
  // Read the six raw data registers sequentially into data array
  I2C_Start(scl_base, sda_base);
  8001c4:	e13ffe17 	ldw	r4,-8(fp)
  8001c8:	e17fff17 	ldw	r5,-4(fp)
  8001cc:	080bb280 	call	80bb28 <I2C_Start>
  I2C_ReadFromDeviceRegister(scl_base, sda_base, deviceAddress, GYRO_XOUT_H, &rawData[0], 6, true);
  8001d0:	e0bffb03 	ldbu	r2,-20(fp)
  8001d4:	11803fcc 	andi	r6,r2,255
  8001d8:	3180201c 	xori	r6,r6,128
  8001dc:	31bfe004 	addi	r6,r6,-128
  8001e0:	e0bffb44 	addi	r2,fp,-19
  8001e4:	d8800015 	stw	r2,0(sp)
  8001e8:	00800184 	movi	r2,6
  8001ec:	d8800115 	stw	r2,4(sp)
  8001f0:	00800044 	movi	r2,1
  8001f4:	d8800215 	stw	r2,8(sp)
  8001f8:	e13ffe17 	ldw	r4,-8(fp)
  8001fc:	e17fff17 	ldw	r5,-4(fp)
  800200:	01c010c4 	movi	r7,67
  800204:	080bf780 	call	80bf78 <I2C_ReadFromDeviceRegister>
  I2C_Stop(scl_base, sda_base);
  800208:	e13ffe17 	ldw	r4,-8(fp)
  80020c:	e17fff17 	ldw	r5,-4(fp)
  800210:	080bb600 	call	80bb60 <I2C_Stop>

  // Turn the MSB and LSB into a signed 16-bit value
  destination[0] = ((alt_16)rawData[0] << 8) | rawData[1] ;
  800214:	e0bffb43 	ldbu	r2,-19(fp)
  800218:	10803fcc 	andi	r2,r2,255
  80021c:	1004923a 	slli	r2,r2,8
  800220:	1007883a 	mov	r3,r2
  800224:	e0bffb83 	ldbu	r2,-18(fp)
  800228:	10803fcc 	andi	r2,r2,255
  80022c:	1884b03a 	or	r2,r3,r2
  800230:	1007883a 	mov	r3,r2
  800234:	e0bffd17 	ldw	r2,-12(fp)
  800238:	10c0000d 	sth	r3,0(r2)
  destination[1] = ((alt_16)rawData[2] << 8) | rawData[3] ;
  80023c:	e0bffd17 	ldw	r2,-12(fp)
  800240:	11000084 	addi	r4,r2,2
  800244:	e0bffbc3 	ldbu	r2,-17(fp)
  800248:	10803fcc 	andi	r2,r2,255
  80024c:	1004923a 	slli	r2,r2,8
  800250:	1007883a 	mov	r3,r2
  800254:	e0bffc03 	ldbu	r2,-16(fp)
  800258:	10803fcc 	andi	r2,r2,255
  80025c:	1884b03a 	or	r2,r3,r2
  800260:	2080000d 	sth	r2,0(r4)
  destination[2] = ((alt_16)rawData[4] << 8) | rawData[5] ;
  800264:	e0bffd17 	ldw	r2,-12(fp)
  800268:	11000104 	addi	r4,r2,4
  80026c:	e0bffc43 	ldbu	r2,-15(fp)
  800270:	10803fcc 	andi	r2,r2,255
  800274:	1004923a 	slli	r2,r2,8
  800278:	1007883a 	mov	r3,r2
  80027c:	e0bffc83 	ldbu	r2,-14(fp)
  800280:	10803fcc 	andi	r2,r2,255
  800284:	1884b03a 	or	r2,r3,r2
  800288:	2080000d 	sth	r2,0(r4)
}
  80028c:	e037883a 	mov	sp,fp
  800290:	dfc00117 	ldw	ra,4(sp)
  800294:	df000017 	ldw	fp,0(sp)
  800298:	dec00204 	addi	sp,sp,8
  80029c:	f800283a 	ret

008002a0 <initMPU9250>:

/*
 * Initialize the IMU to Active/Read mode
 * */
void initMPU9250(alt_u32 scl_base, alt_u32 sda_base){
  8002a0:	defff804 	addi	sp,sp,-32
  8002a4:	dfc00715 	stw	ra,28(sp)
  8002a8:	df000615 	stw	fp,24(sp)
  8002ac:	df000604 	addi	fp,sp,24
  8002b0:	e13ffe15 	stw	r4,-8(fp)
  8002b4:	e17fff15 	stw	r5,-4(fp)
  alt_u8 deviceAddress = 0xD0;
  8002b8:	00bff404 	movi	r2,-48
  8002bc:	e0bffd45 	stb	r2,-11(fp)
  alt_u8 c;
  // wake up device
  // Clear sleep mode bit (6), enable all sensors
  I2C_Start(scl_base, sda_base);
  8002c0:	e13ffe17 	ldw	r4,-8(fp)
  8002c4:	e17fff17 	ldw	r5,-4(fp)
  8002c8:	080bb280 	call	80bb28 <I2C_Start>
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, PWR_MGMT_1, 0x00, 1);
  8002cc:	e0bffd43 	ldbu	r2,-11(fp)
  8002d0:	11803fcc 	andi	r6,r2,255
  8002d4:	3180201c 	xori	r6,r6,128
  8002d8:	31bfe004 	addi	r6,r6,-128
  8002dc:	d8000015 	stw	zero,0(sp)
  8002e0:	00800044 	movi	r2,1
  8002e4:	d8800115 	stw	r2,4(sp)
  8002e8:	e13ffe17 	ldw	r4,-8(fp)
  8002ec:	e17fff17 	ldw	r5,-4(fp)
  8002f0:	01c01ac4 	movi	r7,107
  8002f4:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>

  OSTimeDlyHMSM(0, 0, 0, 100); ; // Wait for all registers to reset
  8002f8:	0009883a 	mov	r4,zero
  8002fc:	000b883a 	mov	r5,zero
  800300:	000d883a 	mov	r6,zero
  800304:	01c01904 	movi	r7,100
  800308:	08236940 	call	823694 <OSTimeDlyHMSM>

  // Get stable time source
  // Auto select clock source to be PLL gyroscope reference if ready else
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, PWR_MGMT_1, 0x01, 1);
  80030c:	e0bffd43 	ldbu	r2,-11(fp)
  800310:	11803fcc 	andi	r6,r2,255
  800314:	3180201c 	xori	r6,r6,128
  800318:	31bfe004 	addi	r6,r6,-128
  80031c:	00800044 	movi	r2,1
  800320:	d8800015 	stw	r2,0(sp)
  800324:	00800044 	movi	r2,1
  800328:	d8800115 	stw	r2,4(sp)
  80032c:	e13ffe17 	ldw	r4,-8(fp)
  800330:	e17fff17 	ldw	r5,-4(fp)
  800334:	01c01ac4 	movi	r7,107
  800338:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>

  OSTimeDlyHMSM(0, 0, 0, 200);
  80033c:	0009883a 	mov	r4,zero
  800340:	000b883a 	mov	r5,zero
  800344:	000d883a 	mov	r6,zero
  800348:	01c03204 	movi	r7,200
  80034c:	08236940 	call	823694 <OSTimeDlyHMSM>
  // minimum delay time for this setting is 5.9 ms, which means sensor fusion
  // update rates cannot be higher than 1 / 0.0059 = 170 Hz
  // DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
  // With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!),
  // 8 kHz, or 1 kHz
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, CONFIG, 0x03, 1);
  800350:	e0bffd43 	ldbu	r2,-11(fp)
  800354:	11803fcc 	andi	r6,r2,255
  800358:	3180201c 	xori	r6,r6,128
  80035c:	31bfe004 	addi	r6,r6,-128
  800360:	008000c4 	movi	r2,3
  800364:	d8800015 	stw	r2,0(sp)
  800368:	00800044 	movi	r2,1
  80036c:	d8800115 	stw	r2,4(sp)
  800370:	e13ffe17 	ldw	r4,-8(fp)
  800374:	e17fff17 	ldw	r5,-4(fp)
  800378:	01c00684 	movi	r7,26
  80037c:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>

  // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  // Use a 200 Hz rate; a rate consistent with the filter update rate
  // determined inset in CONFIG above.
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, SMPLRT_DIV, 0x04, 1);
  800380:	e0bffd43 	ldbu	r2,-11(fp)
  800384:	11803fcc 	andi	r6,r2,255
  800388:	3180201c 	xori	r6,r6,128
  80038c:	31bfe004 	addi	r6,r6,-128
  800390:	00800104 	movi	r2,4
  800394:	d8800015 	stw	r2,0(sp)
  800398:	00800044 	movi	r2,1
  80039c:	d8800115 	stw	r2,4(sp)
  8003a0:	e13ffe17 	ldw	r4,-8(fp)
  8003a4:	e17fff17 	ldw	r5,-4(fp)
  8003a8:	01c00644 	movi	r7,25
  8003ac:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>

  // Set gyroscope full scale range
  // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are
  // left-shifted into positions 4:3
  I2C_Stop(scl_base, sda_base);
  8003b0:	e13ffe17 	ldw	r4,-8(fp)
  8003b4:	e17fff17 	ldw	r5,-4(fp)
  8003b8:	080bb600 	call	80bb60 <I2C_Stop>
  // get current GYRO_CONFIG register value
  I2C_Start(scl_base, sda_base);
  8003bc:	e13ffe17 	ldw	r4,-8(fp)
  8003c0:	e17fff17 	ldw	r5,-4(fp)
  8003c4:	080bb280 	call	80bb28 <I2C_Start>
  I2C_ReadFromDeviceRegister(scl_base, sda_base, deviceAddress, GYRO_CONFIG, c, 1, true);
  8003c8:	e0bffd43 	ldbu	r2,-11(fp)
  8003cc:	11803fcc 	andi	r6,r2,255
  8003d0:	3180201c 	xori	r6,r6,128
  8003d4:	31bfe004 	addi	r6,r6,-128
  8003d8:	e0bffd03 	ldbu	r2,-12(fp)
  8003dc:	d8800015 	stw	r2,0(sp)
  8003e0:	00800044 	movi	r2,1
  8003e4:	d8800115 	stw	r2,4(sp)
  8003e8:	00800044 	movi	r2,1
  8003ec:	d8800215 	stw	r2,8(sp)
  8003f0:	e13ffe17 	ldw	r4,-8(fp)
  8003f4:	e17fff17 	ldw	r5,-4(fp)
  8003f8:	01c006c4 	movi	r7,27
  8003fc:	080bf780 	call	80bf78 <I2C_ReadFromDeviceRegister>
  I2C_Stop(scl_base, sda_base);
  800400:	e13ffe17 	ldw	r4,-8(fp)
  800404:	e17fff17 	ldw	r5,-4(fp)
  800408:	080bb600 	call	80bb60 <I2C_Stop>
  // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
  80040c:	e0fffd03 	ldbu	r3,-12(fp)
  800410:	00bfff44 	movi	r2,-3
  800414:	1884703a 	and	r2,r3,r2
  800418:	e0bffd05 	stb	r2,-12(fp)
  c = c & ~0x18; // Clear AFS bits [4:3]
  80041c:	e0fffd03 	ldbu	r3,-12(fp)
  800420:	00bff9c4 	movi	r2,-25
  800424:	1884703a 	and	r2,r3,r2
  800428:	e0bffd05 	stb	r2,-12(fp)
  c = c | GFS_250DPS   << 3; // Set full scale range for the gyro
  // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of
  // GYRO_CONFIG
  // c =| 0x00;
  // Write new GYRO_CONFIG value to register
  I2C_Start(scl_base, sda_base);
  80042c:	e13ffe17 	ldw	r4,-8(fp)
  800430:	e17fff17 	ldw	r5,-4(fp)
  800434:	080bb280 	call	80bb28 <I2C_Start>
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, GYRO_CONFIG, c, 1);
  800438:	e0bffd43 	ldbu	r2,-11(fp)
  80043c:	11803fcc 	andi	r6,r2,255
  800440:	3180201c 	xori	r6,r6,128
  800444:	31bfe004 	addi	r6,r6,-128
  800448:	e0bffd03 	ldbu	r2,-12(fp)
  80044c:	d8800015 	stw	r2,0(sp)
  800450:	00800044 	movi	r2,1
  800454:	d8800115 	stw	r2,4(sp)
  800458:	e13ffe17 	ldw	r4,-8(fp)
  80045c:	e17fff17 	ldw	r5,-4(fp)
  800460:	01c006c4 	movi	r7,27
  800464:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  I2C_Stop(scl_base, sda_base);
  800468:	e13ffe17 	ldw	r4,-8(fp)
  80046c:	e17fff17 	ldw	r5,-4(fp)
  800470:	080bb600 	call	80bb60 <I2C_Stop>

  // Set accelerometer full-scale range configuration
  // Get current ACCEL_CONFIG register value
  I2C_Start(scl_base, sda_base);
  800474:	e13ffe17 	ldw	r4,-8(fp)
  800478:	e17fff17 	ldw	r5,-4(fp)
  80047c:	080bb280 	call	80bb28 <I2C_Start>
  I2C_ReadFromDeviceRegister(scl_base, sda_base, deviceAddress, ACCEL_CONFIG, c, 1, true);
  800480:	e0bffd43 	ldbu	r2,-11(fp)
  800484:	11803fcc 	andi	r6,r2,255
  800488:	3180201c 	xori	r6,r6,128
  80048c:	31bfe004 	addi	r6,r6,-128
  800490:	e0bffd03 	ldbu	r2,-12(fp)
  800494:	d8800015 	stw	r2,0(sp)
  800498:	00800044 	movi	r2,1
  80049c:	d8800115 	stw	r2,4(sp)
  8004a0:	00800044 	movi	r2,1
  8004a4:	d8800215 	stw	r2,8(sp)
  8004a8:	e13ffe17 	ldw	r4,-8(fp)
  8004ac:	e17fff17 	ldw	r5,-4(fp)
  8004b0:	01c00704 	movi	r7,28
  8004b4:	080bf780 	call	80bf78 <I2C_ReadFromDeviceRegister>
  I2C_Stop(scl_base, sda_base);
  8004b8:	e13ffe17 	ldw	r4,-8(fp)
  8004bc:	e17fff17 	ldw	r5,-4(fp)
  8004c0:	080bb600 	call	80bb60 <I2C_Stop>
  // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
  8004c4:	e0fffd03 	ldbu	r3,-12(fp)
  8004c8:	00bff9c4 	movi	r2,-25
  8004cc:	1884703a 	and	r2,r3,r2
  8004d0:	e0bffd05 	stb	r2,-12(fp)
  c = c | AFS_2G << 3; // Set full scale range for the accelerometer
  // Write new ACCEL_CONFIG register value
  I2C_Start(scl_base, sda_base);
  8004d4:	e13ffe17 	ldw	r4,-8(fp)
  8004d8:	e17fff17 	ldw	r5,-4(fp)
  8004dc:	080bb280 	call	80bb28 <I2C_Start>
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, ACCEL_CONFIG, c, 1);
  8004e0:	e0bffd43 	ldbu	r2,-11(fp)
  8004e4:	11803fcc 	andi	r6,r2,255
  8004e8:	3180201c 	xori	r6,r6,128
  8004ec:	31bfe004 	addi	r6,r6,-128
  8004f0:	e0bffd03 	ldbu	r2,-12(fp)
  8004f4:	d8800015 	stw	r2,0(sp)
  8004f8:	00800044 	movi	r2,1
  8004fc:	d8800115 	stw	r2,4(sp)
  800500:	e13ffe17 	ldw	r4,-8(fp)
  800504:	e17fff17 	ldw	r5,-4(fp)
  800508:	01c00704 	movi	r7,28
  80050c:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  I2C_Stop(scl_base, sda_base);
  800510:	e13ffe17 	ldw	r4,-8(fp)
  800514:	e17fff17 	ldw	r5,-4(fp)
  800518:	080bb600 	call	80bb60 <I2C_Stop>
  // Set accelerometer sample rate configuration
  // It is possible to get a 4 kHz sample rate from the accelerometer by
  // choosing 1 for accel_fchoice_b bit [3]; in this case the bandwidth is
  // 1.13 kHz
  // Get current ACCEL_CONFIG2 register value
  I2C_Start(scl_base, sda_base);
  80051c:	e13ffe17 	ldw	r4,-8(fp)
  800520:	e17fff17 	ldw	r5,-4(fp)
  800524:	080bb280 	call	80bb28 <I2C_Start>
  I2C_ReadFromDeviceRegister(scl_base, sda_base, deviceAddress, ACCEL_CONFIG2, c, 1, true);
  800528:	e0bffd43 	ldbu	r2,-11(fp)
  80052c:	11803fcc 	andi	r6,r2,255
  800530:	3180201c 	xori	r6,r6,128
  800534:	31bfe004 	addi	r6,r6,-128
  800538:	e0bffd03 	ldbu	r2,-12(fp)
  80053c:	d8800015 	stw	r2,0(sp)
  800540:	00800044 	movi	r2,1
  800544:	d8800115 	stw	r2,4(sp)
  800548:	00800044 	movi	r2,1
  80054c:	d8800215 	stw	r2,8(sp)
  800550:	e13ffe17 	ldw	r4,-8(fp)
  800554:	e17fff17 	ldw	r5,-4(fp)
  800558:	01c00744 	movi	r7,29
  80055c:	080bf780 	call	80bf78 <I2C_ReadFromDeviceRegister>
  I2C_Stop(scl_base, sda_base);
  800560:	e13ffe17 	ldw	r4,-8(fp)
  800564:	e17fff17 	ldw	r5,-4(fp)
  800568:	080bb600 	call	80bb60 <I2C_Stop>
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
  80056c:	e0fffd03 	ldbu	r3,-12(fp)
  800570:	00bffc04 	movi	r2,-16
  800574:	1884703a 	and	r2,r3,r2
  800578:	e0bffd05 	stb	r2,-12(fp)
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
  80057c:	e0bffd03 	ldbu	r2,-12(fp)
  800580:	108000d4 	ori	r2,r2,3
  800584:	e0bffd05 	stb	r2,-12(fp)

  // Write new ACCEL_CONFIG2 register value
  I2C_Start(scl_base, sda_base);
  800588:	e13ffe17 	ldw	r4,-8(fp)
  80058c:	e17fff17 	ldw	r5,-4(fp)
  800590:	080bb280 	call	80bb28 <I2C_Start>
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, ACCEL_CONFIG2, c, 1);
  800594:	e0bffd43 	ldbu	r2,-11(fp)
  800598:	11803fcc 	andi	r6,r2,255
  80059c:	3180201c 	xori	r6,r6,128
  8005a0:	31bfe004 	addi	r6,r6,-128
  8005a4:	e0bffd03 	ldbu	r2,-12(fp)
  8005a8:	d8800015 	stw	r2,0(sp)
  8005ac:	00800044 	movi	r2,1
  8005b0:	d8800115 	stw	r2,4(sp)
  8005b4:	e13ffe17 	ldw	r4,-8(fp)
  8005b8:	e17fff17 	ldw	r5,-4(fp)
  8005bc:	01c00744 	movi	r7,29
  8005c0:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  //I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, INT_PIN_CFG, 0x22, 1);

  // Enable data ready (bit 0) interrupt
  //I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, INT_ENABLE, 0x01, 1);

  I2C_Stop(scl_base, sda_base);
  8005c4:	e13ffe17 	ldw	r4,-8(fp)
  8005c8:	e17fff17 	ldw	r5,-4(fp)
  8005cc:	080bb600 	call	80bb60 <I2C_Stop>
  OSTimeDlyHMSM(0, 0, 0, 100);
  8005d0:	0009883a 	mov	r4,zero
  8005d4:	000b883a 	mov	r5,zero
  8005d8:	000d883a 	mov	r6,zero
  8005dc:	01c01904 	movi	r7,100
  8005e0:	08236940 	call	823694 <OSTimeDlyHMSM>
}
  8005e4:	e037883a 	mov	sp,fp
  8005e8:	dfc00117 	ldw	ra,4(sp)
  8005ec:	df000017 	ldw	fp,0(sp)
  8005f0:	dec00204 	addi	sp,sp,8
  8005f4:	f800283a 	ret

008005f8 <calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device
// initialization. It calculates the average of the at-rest readings and then
// loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(float * gyroBias, float * accelBias, alt_u32 scl_base, alt_u32 sda_base) {
  8005f8:	deffd504 	addi	sp,sp,-172
  8005fc:	dfc02a15 	stw	ra,168(sp)
  800600:	df002915 	stw	fp,164(sp)
  800604:	dc402815 	stw	r17,160(sp)
  800608:	dc002715 	stw	r16,156(sp)
  80060c:	df002704 	addi	fp,sp,156
  800610:	e13ff015 	stw	r4,-64(fp)
  800614:	e17ff115 	stw	r5,-60(fp)
  800618:	e1bff215 	stw	r6,-56(fp)
  80061c:	e1fff315 	stw	r7,-52(fp)

  alt_u8 deviceAddress = 0xD0;
  800620:	00bff404 	movi	r2,-48
  800624:	e0bfdf85 	stb	r2,-130(fp)
  alt_u8 data[12]; // data array to hold accelerometer and gyro x, y, z, data
  alt_u16 ii, packet_count, fifo_count;
  alt_32 gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
  800628:	e03fe315 	stw	zero,-116(fp)
  80062c:	e03fe415 	stw	zero,-112(fp)
  800630:	e03fe515 	stw	zero,-108(fp)
  800634:	e03fe615 	stw	zero,-104(fp)
  800638:	e03fe715 	stw	zero,-100(fp)
  80063c:	e03fe815 	stw	zero,-96(fp)

  // reset device
  // Write a one to bit 7 reset bit; toggle reset device
  I2C_Start(scl_base, sda_base);
  800640:	e13ff217 	ldw	r4,-56(fp)
  800644:	e17ff317 	ldw	r5,-52(fp)
  800648:	080bb280 	call	80bb28 <I2C_Start>
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, PWR_MGMT_1, READ_FLAG, 1);
  80064c:	e0bfdf83 	ldbu	r2,-130(fp)
  800650:	11803fcc 	andi	r6,r2,255
  800654:	3180201c 	xori	r6,r6,128
  800658:	31bfe004 	addi	r6,r6,-128
  80065c:	00802004 	movi	r2,128
  800660:	d8800015 	stw	r2,0(sp)
  800664:	00800044 	movi	r2,1
  800668:	d8800115 	stw	r2,4(sp)
  80066c:	e13ff217 	ldw	r4,-56(fp)
  800670:	e17ff317 	ldw	r5,-52(fp)
  800674:	01c01ac4 	movi	r7,107
  800678:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  OSTimeDlyHMSM(0, 0, 0, 100);
  80067c:	0009883a 	mov	r4,zero
  800680:	000b883a 	mov	r5,zero
  800684:	000d883a 	mov	r6,zero
  800688:	01c01904 	movi	r7,100
  80068c:	08236940 	call	823694 <OSTimeDlyHMSM>
  // get stable time source; Auto select clock source to be PLL gyroscope
  // reference if ready else use the internal oscillator, bits 2:0 = 001
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, PWR_MGMT_1, 0x01, 1);
  800690:	e0bfdf83 	ldbu	r2,-130(fp)
  800694:	11803fcc 	andi	r6,r2,255
  800698:	3180201c 	xori	r6,r6,128
  80069c:	31bfe004 	addi	r6,r6,-128
  8006a0:	00800044 	movi	r2,1
  8006a4:	d8800015 	stw	r2,0(sp)
  8006a8:	00800044 	movi	r2,1
  8006ac:	d8800115 	stw	r2,4(sp)
  8006b0:	e13ff217 	ldw	r4,-56(fp)
  8006b4:	e17ff317 	ldw	r5,-52(fp)
  8006b8:	01c01ac4 	movi	r7,107
  8006bc:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, PWR_MGMT_2, 0x00, 1);
  8006c0:	e0bfdf83 	ldbu	r2,-130(fp)
  8006c4:	11803fcc 	andi	r6,r2,255
  8006c8:	3180201c 	xori	r6,r6,128
  8006cc:	31bfe004 	addi	r6,r6,-128
  8006d0:	d8000015 	stw	zero,0(sp)
  8006d4:	00800044 	movi	r2,1
  8006d8:	d8800115 	stw	r2,4(sp)
  8006dc:	e13ff217 	ldw	r4,-56(fp)
  8006e0:	e17ff317 	ldw	r5,-52(fp)
  8006e4:	01c01b04 	movi	r7,108
  8006e8:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>

  OSTimeDlyHMSM(0, 0, 0, 200);
  8006ec:	0009883a 	mov	r4,zero
  8006f0:	000b883a 	mov	r5,zero
  8006f4:	000d883a 	mov	r6,zero
  8006f8:	01c03204 	movi	r7,200
  8006fc:	08236940 	call	823694 <OSTimeDlyHMSM>

  // Configure device for bias calculation
  // Disable all interrupts
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, INT_ENABLE, 0x00, 1);
  800700:	e0bfdf83 	ldbu	r2,-130(fp)
  800704:	11803fcc 	andi	r6,r2,255
  800708:	3180201c 	xori	r6,r6,128
  80070c:	31bfe004 	addi	r6,r6,-128
  800710:	d8000015 	stw	zero,0(sp)
  800714:	00800044 	movi	r2,1
  800718:	d8800115 	stw	r2,4(sp)
  80071c:	e13ff217 	ldw	r4,-56(fp)
  800720:	e17ff317 	ldw	r5,-52(fp)
  800724:	01c00e04 	movi	r7,56
  800728:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  // Disable FIFO
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, FIFO_EN, 0x00, 1);
  80072c:	e0bfdf83 	ldbu	r2,-130(fp)
  800730:	11803fcc 	andi	r6,r2,255
  800734:	3180201c 	xori	r6,r6,128
  800738:	31bfe004 	addi	r6,r6,-128
  80073c:	d8000015 	stw	zero,0(sp)
  800740:	00800044 	movi	r2,1
  800744:	d8800115 	stw	r2,4(sp)
  800748:	e13ff217 	ldw	r4,-56(fp)
  80074c:	e17ff317 	ldw	r5,-52(fp)
  800750:	01c008c4 	movi	r7,35
  800754:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  // Turn on internal clock source
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, PWR_MGMT_1, 0x00, 1);
  800758:	e0bfdf83 	ldbu	r2,-130(fp)
  80075c:	11803fcc 	andi	r6,r2,255
  800760:	3180201c 	xori	r6,r6,128
  800764:	31bfe004 	addi	r6,r6,-128
  800768:	d8000015 	stw	zero,0(sp)
  80076c:	00800044 	movi	r2,1
  800770:	d8800115 	stw	r2,4(sp)
  800774:	e13ff217 	ldw	r4,-56(fp)
  800778:	e17ff317 	ldw	r5,-52(fp)
  80077c:	01c01ac4 	movi	r7,107
  800780:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  // Disable I2C master
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, I2C_MST_CTRL, 0x00, 1);
  800784:	e0bfdf83 	ldbu	r2,-130(fp)
  800788:	11803fcc 	andi	r6,r2,255
  80078c:	3180201c 	xori	r6,r6,128
  800790:	31bfe004 	addi	r6,r6,-128
  800794:	d8000015 	stw	zero,0(sp)
  800798:	00800044 	movi	r2,1
  80079c:	d8800115 	stw	r2,4(sp)
  8007a0:	e13ff217 	ldw	r4,-56(fp)
  8007a4:	e17ff317 	ldw	r5,-52(fp)
  8007a8:	01c00904 	movi	r7,36
  8007ac:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  // Disable FIFO and I2C master modes
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress,  USER_CTRL, 0x00, 1);
  8007b0:	e0bfdf83 	ldbu	r2,-130(fp)
  8007b4:	11803fcc 	andi	r6,r2,255
  8007b8:	3180201c 	xori	r6,r6,128
  8007bc:	31bfe004 	addi	r6,r6,-128
  8007c0:	d8000015 	stw	zero,0(sp)
  8007c4:	00800044 	movi	r2,1
  8007c8:	d8800115 	stw	r2,4(sp)
  8007cc:	e13ff217 	ldw	r4,-56(fp)
  8007d0:	e17ff317 	ldw	r5,-52(fp)
  8007d4:	01c01a84 	movi	r7,106
  8007d8:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  // Reset FIFO and DMP
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress,  USER_CTRL, 0x0C, 1);
  8007dc:	e0bfdf83 	ldbu	r2,-130(fp)
  8007e0:	11803fcc 	andi	r6,r2,255
  8007e4:	3180201c 	xori	r6,r6,128
  8007e8:	31bfe004 	addi	r6,r6,-128
  8007ec:	00800304 	movi	r2,12
  8007f0:	d8800015 	stw	r2,0(sp)
  8007f4:	00800044 	movi	r2,1
  8007f8:	d8800115 	stw	r2,4(sp)
  8007fc:	e13ff217 	ldw	r4,-56(fp)
  800800:	e17ff317 	ldw	r5,-52(fp)
  800804:	01c01a84 	movi	r7,106
  800808:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  OSTimeDlyHMSM(0, 0, 0, 15);
  80080c:	0009883a 	mov	r4,zero
  800810:	000b883a 	mov	r5,zero
  800814:	000d883a 	mov	r6,zero
  800818:	01c003c4 	movi	r7,15
  80081c:	08236940 	call	823694 <OSTimeDlyHMSM>

  // Configure MPU6050 gyro and accelerometer for bias calculation
  // Set low-pass filter to 188 Hz
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, CONFIG, 0x01, 1);
  800820:	e0bfdf83 	ldbu	r2,-130(fp)
  800824:	11803fcc 	andi	r6,r2,255
  800828:	3180201c 	xori	r6,r6,128
  80082c:	31bfe004 	addi	r6,r6,-128
  800830:	00800044 	movi	r2,1
  800834:	d8800015 	stw	r2,0(sp)
  800838:	00800044 	movi	r2,1
  80083c:	d8800115 	stw	r2,4(sp)
  800840:	e13ff217 	ldw	r4,-56(fp)
  800844:	e17ff317 	ldw	r5,-52(fp)
  800848:	01c00684 	movi	r7,26
  80084c:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  // Set sample rate to 1 kHz
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress,  SMPLRT_DIV, 0x00, 1);
  800850:	e0bfdf83 	ldbu	r2,-130(fp)
  800854:	11803fcc 	andi	r6,r2,255
  800858:	3180201c 	xori	r6,r6,128
  80085c:	31bfe004 	addi	r6,r6,-128
  800860:	d8000015 	stw	zero,0(sp)
  800864:	00800044 	movi	r2,1
  800868:	d8800115 	stw	r2,4(sp)
  80086c:	e13ff217 	ldw	r4,-56(fp)
  800870:	e17ff317 	ldw	r5,-52(fp)
  800874:	01c00644 	movi	r7,25
  800878:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, GYRO_CONFIG, 0x00, 1);
  80087c:	e0bfdf83 	ldbu	r2,-130(fp)
  800880:	11803fcc 	andi	r6,r2,255
  800884:	3180201c 	xori	r6,r6,128
  800888:	31bfe004 	addi	r6,r6,-128
  80088c:	d8000015 	stw	zero,0(sp)
  800890:	00800044 	movi	r2,1
  800894:	d8800115 	stw	r2,4(sp)
  800898:	e13ff217 	ldw	r4,-56(fp)
  80089c:	e17ff317 	ldw	r5,-52(fp)
  8008a0:	01c006c4 	movi	r7,27
  8008a4:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  // Set accelerometer full-scale to 2 g, maximum sensitivity
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress,  ACCEL_CONFIG, 0x00, 1);
  8008a8:	e0bfdf83 	ldbu	r2,-130(fp)
  8008ac:	11803fcc 	andi	r6,r2,255
  8008b0:	3180201c 	xori	r6,r6,128
  8008b4:	31bfe004 	addi	r6,r6,-128
  8008b8:	d8000015 	stw	zero,0(sp)
  8008bc:	00800044 	movi	r2,1
  8008c0:	d8800115 	stw	r2,4(sp)
  8008c4:	e13ff217 	ldw	r4,-56(fp)
  8008c8:	e17ff317 	ldw	r5,-52(fp)
  8008cc:	01c00704 	movi	r7,28
  8008d0:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>

  alt_u16  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
  8008d4:	008020c4 	movi	r2,131
  8008d8:	e0bfdd8d 	sth	r2,-138(fp)
  alt_u16  accelsensitivity = 16384; // = 16384 LSB/g
  8008dc:	00900004 	movi	r2,16384
  8008e0:	e0bfdd0d 	sth	r2,-140(fp)

  // Configure FIFO to capture accelerometer and gyro data for bias calculation
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress,  USER_CTRL, 0x40, 1);  // Enable FIFO
  8008e4:	e0bfdf83 	ldbu	r2,-130(fp)
  8008e8:	11803fcc 	andi	r6,r2,255
  8008ec:	3180201c 	xori	r6,r6,128
  8008f0:	31bfe004 	addi	r6,r6,-128
  8008f4:	00801004 	movi	r2,64
  8008f8:	d8800015 	stw	r2,0(sp)
  8008fc:	00800044 	movi	r2,1
  800900:	d8800115 	stw	r2,4(sp)
  800904:	e13ff217 	ldw	r4,-56(fp)
  800908:	e17ff317 	ldw	r5,-52(fp)
  80090c:	01c01a84 	movi	r7,106
  800910:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in
  // MPU-9150)
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress,  FIFO_EN, 0x78, 1);
  800914:	e0bfdf83 	ldbu	r2,-130(fp)
  800918:	11803fcc 	andi	r6,r2,255
  80091c:	3180201c 	xori	r6,r6,128
  800920:	31bfe004 	addi	r6,r6,-128
  800924:	00801e04 	movi	r2,120
  800928:	d8800015 	stw	r2,0(sp)
  80092c:	00800044 	movi	r2,1
  800930:	d8800115 	stw	r2,4(sp)
  800934:	e13ff217 	ldw	r4,-56(fp)
  800938:	e17ff317 	ldw	r5,-52(fp)
  80093c:	01c008c4 	movi	r7,35
  800940:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>

  OSTimeDlyHMSM(0, 0, 0, 40);  // accumulate 40 samples in 40 milliseconds = 480 bytes
  800944:	0009883a 	mov	r4,zero
  800948:	000b883a 	mov	r5,zero
  80094c:	000d883a 	mov	r6,zero
  800950:	01c00a04 	movi	r7,40
  800954:	08236940 	call	823694 <OSTimeDlyHMSM>

  // At end of sample accumulation, turn off FIFO sensor read
  // Disable gyro and accelerometer sensors for FIFO
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress,  FIFO_EN, 0x00, 1);
  800958:	e0bfdf83 	ldbu	r2,-130(fp)
  80095c:	11803fcc 	andi	r6,r2,255
  800960:	3180201c 	xori	r6,r6,128
  800964:	31bfe004 	addi	r6,r6,-128
  800968:	d8000015 	stw	zero,0(sp)
  80096c:	00800044 	movi	r2,1
  800970:	d8800115 	stw	r2,4(sp)
  800974:	e13ff217 	ldw	r4,-56(fp)
  800978:	e17ff317 	ldw	r5,-52(fp)
  80097c:	01c008c4 	movi	r7,35
  800980:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>


  I2C_Stop(scl_base, sda_base);
  800984:	e13ff217 	ldw	r4,-56(fp)
  800988:	e17ff317 	ldw	r5,-52(fp)
  80098c:	080bb600 	call	80bb60 <I2C_Stop>

  I2C_Start(scl_base, sda_base);
  800990:	e13ff217 	ldw	r4,-56(fp)
  800994:	e17ff317 	ldw	r5,-52(fp)
  800998:	080bb280 	call	80bb28 <I2C_Start>
  // Read FIFO sample count
  I2C_ReadFromDeviceRegister(scl_base, sda_base, deviceAddress, FIFO_COUNTH, &data[0], 2, true);
  80099c:	e0bfdf83 	ldbu	r2,-130(fp)
  8009a0:	11803fcc 	andi	r6,r2,255
  8009a4:	3180201c 	xori	r6,r6,128
  8009a8:	31bfe004 	addi	r6,r6,-128
  8009ac:	e0bfdfc4 	addi	r2,fp,-129
  8009b0:	d8800015 	stw	r2,0(sp)
  8009b4:	00800084 	movi	r2,2
  8009b8:	d8800115 	stw	r2,4(sp)
  8009bc:	00800044 	movi	r2,1
  8009c0:	d8800215 	stw	r2,8(sp)
  8009c4:	e13ff217 	ldw	r4,-56(fp)
  8009c8:	e17ff317 	ldw	r5,-52(fp)
  8009cc:	01c01c84 	movi	r7,114
  8009d0:	080bf780 	call	80bf78 <I2C_ReadFromDeviceRegister>
  I2C_Stop(scl_base, sda_base);
  8009d4:	e13ff217 	ldw	r4,-56(fp)
  8009d8:	e17ff317 	ldw	r5,-52(fp)
  8009dc:	080bb600 	call	80bb60 <I2C_Stop>

  fifo_count = ((alt_u16)data[0] << 8) | data[1];
  8009e0:	e0bfdfc3 	ldbu	r2,-129(fp)
  8009e4:	10803fcc 	andi	r2,r2,255
  8009e8:	1004923a 	slli	r2,r2,8
  8009ec:	1007883a 	mov	r3,r2
  8009f0:	e0bfe003 	ldbu	r2,-128(fp)
  8009f4:	10803fcc 	andi	r2,r2,255
  8009f8:	1884b03a 	or	r2,r3,r2
  8009fc:	e0bfde0d 	sth	r2,-136(fp)
  // How many sets of full gyro and accelerometer data for averaging
  packet_count = fifo_count/12;
  800a00:	e13fde0b 	ldhu	r4,-136(fp)
  800a04:	01400304 	movi	r5,12
  800a08:	08111d40 	call	8111d4 <__udivsi3>
  800a0c:	e0bfde8d 	sth	r2,-134(fp)

  for (ii = 0; ii < packet_count; ii++)
  800a10:	e03fdf0d 	sth	zero,-132(fp)
  800a14:	00007706 	br	800bf4 <calibrateMPU9250+0x5fc>
  {
    alt_16 accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
  800a18:	e03fed0d 	sth	zero,-76(fp)
  800a1c:	e03fed8d 	sth	zero,-74(fp)
  800a20:	e03fee0d 	sth	zero,-72(fp)
  800a24:	e03fee8d 	sth	zero,-70(fp)
  800a28:	e03fef0d 	sth	zero,-68(fp)
  800a2c:	e03fef8d 	sth	zero,-66(fp)
    // Read data for averaging
    I2C_Start(scl_base, sda_base);
  800a30:	e13ff217 	ldw	r4,-56(fp)
  800a34:	e17ff317 	ldw	r5,-52(fp)
  800a38:	080bb280 	call	80bb28 <I2C_Start>
	// Read FIFO sample count
	I2C_ReadFromDeviceRegister(scl_base, sda_base, deviceAddress, FIFO_R_W, &data[0], 12, true);
  800a3c:	e0bfdf83 	ldbu	r2,-130(fp)
  800a40:	11803fcc 	andi	r6,r2,255
  800a44:	3180201c 	xori	r6,r6,128
  800a48:	31bfe004 	addi	r6,r6,-128
  800a4c:	e0bfdfc4 	addi	r2,fp,-129
  800a50:	d8800015 	stw	r2,0(sp)
  800a54:	00800304 	movi	r2,12
  800a58:	d8800115 	stw	r2,4(sp)
  800a5c:	00800044 	movi	r2,1
  800a60:	d8800215 	stw	r2,8(sp)
  800a64:	e13ff217 	ldw	r4,-56(fp)
  800a68:	e17ff317 	ldw	r5,-52(fp)
  800a6c:	01c01d04 	movi	r7,116
  800a70:	080bf780 	call	80bf78 <I2C_ReadFromDeviceRegister>
	I2C_Stop(scl_base, sda_base);
  800a74:	e13ff217 	ldw	r4,-56(fp)
  800a78:	e17ff317 	ldw	r5,-52(fp)
  800a7c:	080bb600 	call	80bb60 <I2C_Stop>
    // Form signed 16-bit integer for each sample in FIFO
    accel_temp[0] = (alt_16) (((alt_16)data[0] << 8) | data[1]  );
  800a80:	e0bfdfc3 	ldbu	r2,-129(fp)
  800a84:	10803fcc 	andi	r2,r2,255
  800a88:	1004923a 	slli	r2,r2,8
  800a8c:	1007883a 	mov	r3,r2
  800a90:	e0bfe003 	ldbu	r2,-128(fp)
  800a94:	10803fcc 	andi	r2,r2,255
  800a98:	1884b03a 	or	r2,r3,r2
  800a9c:	e0bfed0d 	sth	r2,-76(fp)
    accel_temp[1] = (alt_16) (((alt_16)data[2] << 8) | data[3]  );
  800aa0:	e0bfe043 	ldbu	r2,-127(fp)
  800aa4:	10803fcc 	andi	r2,r2,255
  800aa8:	1004923a 	slli	r2,r2,8
  800aac:	1007883a 	mov	r3,r2
  800ab0:	e0bfe083 	ldbu	r2,-126(fp)
  800ab4:	10803fcc 	andi	r2,r2,255
  800ab8:	1884b03a 	or	r2,r3,r2
  800abc:	e0bfed8d 	sth	r2,-74(fp)
    accel_temp[2] = (alt_16) (((alt_16)data[4] << 8) | data[5]  );
  800ac0:	e0bfe0c3 	ldbu	r2,-125(fp)
  800ac4:	10803fcc 	andi	r2,r2,255
  800ac8:	1004923a 	slli	r2,r2,8
  800acc:	1007883a 	mov	r3,r2
  800ad0:	e0bfe103 	ldbu	r2,-124(fp)
  800ad4:	10803fcc 	andi	r2,r2,255
  800ad8:	1884b03a 	or	r2,r3,r2
  800adc:	e0bfee0d 	sth	r2,-72(fp)
    gyro_temp[0]  = (alt_16) (((alt_16)data[6] << 8) | data[7]  );
  800ae0:	e0bfe143 	ldbu	r2,-123(fp)
  800ae4:	10803fcc 	andi	r2,r2,255
  800ae8:	1004923a 	slli	r2,r2,8
  800aec:	1007883a 	mov	r3,r2
  800af0:	e0bfe183 	ldbu	r2,-122(fp)
  800af4:	10803fcc 	andi	r2,r2,255
  800af8:	1884b03a 	or	r2,r3,r2
  800afc:	e0bfee8d 	sth	r2,-70(fp)
    gyro_temp[1]  = (alt_16) (((alt_16)data[8] << 8) | data[9]  );
  800b00:	e0bfe1c3 	ldbu	r2,-121(fp)
  800b04:	10803fcc 	andi	r2,r2,255
  800b08:	1004923a 	slli	r2,r2,8
  800b0c:	1007883a 	mov	r3,r2
  800b10:	e0bfe203 	ldbu	r2,-120(fp)
  800b14:	10803fcc 	andi	r2,r2,255
  800b18:	1884b03a 	or	r2,r3,r2
  800b1c:	e0bfef0d 	sth	r2,-68(fp)
    gyro_temp[2]  = (alt_16) (((alt_16)data[10] << 8) | data[11]);
  800b20:	e0bfe243 	ldbu	r2,-119(fp)
  800b24:	10803fcc 	andi	r2,r2,255
  800b28:	1004923a 	slli	r2,r2,8
  800b2c:	1007883a 	mov	r3,r2
  800b30:	e0bfe283 	ldbu	r2,-118(fp)
  800b34:	10803fcc 	andi	r2,r2,255
  800b38:	1884b03a 	or	r2,r3,r2
  800b3c:	e0bfef8d 	sth	r2,-66(fp)

    // Sum individual signed 16-bit biases to get accumulated signed 32-bit
    // biases.
    accel_bias[0] += (alt_32) accel_temp[0];
  800b40:	e0ffe617 	ldw	r3,-104(fp)
  800b44:	e0bfed0b 	ldhu	r2,-76(fp)
  800b48:	10bfffcc 	andi	r2,r2,65535
  800b4c:	10a0001c 	xori	r2,r2,32768
  800b50:	10a00004 	addi	r2,r2,-32768
  800b54:	1885883a 	add	r2,r3,r2
  800b58:	e0bfe615 	stw	r2,-104(fp)
    accel_bias[1] += (alt_32) accel_temp[1];
  800b5c:	e0ffe717 	ldw	r3,-100(fp)
  800b60:	e0bfed8b 	ldhu	r2,-74(fp)
  800b64:	10bfffcc 	andi	r2,r2,65535
  800b68:	10a0001c 	xori	r2,r2,32768
  800b6c:	10a00004 	addi	r2,r2,-32768
  800b70:	1885883a 	add	r2,r3,r2
  800b74:	e0bfe715 	stw	r2,-100(fp)
    accel_bias[2] += (alt_32) accel_temp[2];
  800b78:	e0ffe817 	ldw	r3,-96(fp)
  800b7c:	e0bfee0b 	ldhu	r2,-72(fp)
  800b80:	10bfffcc 	andi	r2,r2,65535
  800b84:	10a0001c 	xori	r2,r2,32768
  800b88:	10a00004 	addi	r2,r2,-32768
  800b8c:	1885883a 	add	r2,r3,r2
  800b90:	e0bfe815 	stw	r2,-96(fp)
    gyro_bias[0]  += (alt_32) gyro_temp[0];
  800b94:	e0ffe317 	ldw	r3,-116(fp)
  800b98:	e0bfee8b 	ldhu	r2,-70(fp)
  800b9c:	10bfffcc 	andi	r2,r2,65535
  800ba0:	10a0001c 	xori	r2,r2,32768
  800ba4:	10a00004 	addi	r2,r2,-32768
  800ba8:	1885883a 	add	r2,r3,r2
  800bac:	e0bfe315 	stw	r2,-116(fp)
    gyro_bias[1]  += (alt_32) gyro_temp[1];
  800bb0:	e0ffe417 	ldw	r3,-112(fp)
  800bb4:	e0bfef0b 	ldhu	r2,-68(fp)
  800bb8:	10bfffcc 	andi	r2,r2,65535
  800bbc:	10a0001c 	xori	r2,r2,32768
  800bc0:	10a00004 	addi	r2,r2,-32768
  800bc4:	1885883a 	add	r2,r3,r2
  800bc8:	e0bfe415 	stw	r2,-112(fp)
    gyro_bias[2]  += (alt_32) gyro_temp[2];
  800bcc:	e0ffe517 	ldw	r3,-108(fp)
  800bd0:	e0bfef8b 	ldhu	r2,-66(fp)
  800bd4:	10bfffcc 	andi	r2,r2,65535
  800bd8:	10a0001c 	xori	r2,r2,32768
  800bdc:	10a00004 	addi	r2,r2,-32768
  800be0:	1885883a 	add	r2,r3,r2
  800be4:	e0bfe515 	stw	r2,-108(fp)

  fifo_count = ((alt_u16)data[0] << 8) | data[1];
  // How many sets of full gyro and accelerometer data for averaging
  packet_count = fifo_count/12;

  for (ii = 0; ii < packet_count; ii++)
  800be8:	e0bfdf0b 	ldhu	r2,-132(fp)
  800bec:	10800044 	addi	r2,r2,1
  800bf0:	e0bfdf0d 	sth	r2,-132(fp)
  800bf4:	e0ffdf0b 	ldhu	r3,-132(fp)
  800bf8:	e0bfde8b 	ldhu	r2,-134(fp)
  800bfc:	18bf8636 	bltu	r3,r2,800a18 <calibrateMPU9250+0x420>
    gyro_bias[0]  += (alt_32) gyro_temp[0];
    gyro_bias[1]  += (alt_32) gyro_temp[1];
    gyro_bias[2]  += (alt_32) gyro_temp[2];
  }
  // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
  accel_bias[0] /= (alt_32) packet_count;
  800c00:	e13fe617 	ldw	r4,-104(fp)
  800c04:	e17fde8b 	ldhu	r5,-134(fp)
  800c08:	08111140 	call	811114 <__divsi3>
  800c0c:	e0bfe615 	stw	r2,-104(fp)
  accel_bias[1] /= (alt_32) packet_count;
  800c10:	e13fe717 	ldw	r4,-100(fp)
  800c14:	e17fde8b 	ldhu	r5,-134(fp)
  800c18:	08111140 	call	811114 <__divsi3>
  800c1c:	e0bfe715 	stw	r2,-100(fp)
  accel_bias[2] /= (alt_32) packet_count;
  800c20:	e13fe817 	ldw	r4,-96(fp)
  800c24:	e17fde8b 	ldhu	r5,-134(fp)
  800c28:	08111140 	call	811114 <__divsi3>
  800c2c:	e0bfe815 	stw	r2,-96(fp)
  gyro_bias[0]  /= (alt_32) packet_count;
  800c30:	e13fe317 	ldw	r4,-116(fp)
  800c34:	e17fde8b 	ldhu	r5,-134(fp)
  800c38:	08111140 	call	811114 <__divsi3>
  800c3c:	e0bfe315 	stw	r2,-116(fp)
  gyro_bias[1]  /= (alt_32) packet_count;
  800c40:	e13fe417 	ldw	r4,-112(fp)
  800c44:	e17fde8b 	ldhu	r5,-134(fp)
  800c48:	08111140 	call	811114 <__divsi3>
  800c4c:	e0bfe415 	stw	r2,-112(fp)
  gyro_bias[2]  /= (alt_32) packet_count;
  800c50:	e13fe517 	ldw	r4,-108(fp)
  800c54:	e17fde8b 	ldhu	r5,-134(fp)
  800c58:	08111140 	call	811114 <__divsi3>
  800c5c:	e0bfe515 	stw	r2,-108(fp)

  // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
  if (accel_bias[2] > 0L)
  800c60:	e0bfe817 	ldw	r2,-96(fp)
  800c64:	10800050 	cmplti	r2,r2,1
  800c68:	1000051e 	bne	r2,zero,800c80 <calibrateMPU9250+0x688>
  {
    accel_bias[2] -= (alt_32) accelsensitivity;
  800c6c:	e0bfe817 	ldw	r2,-96(fp)
  800c70:	e0ffdd0b 	ldhu	r3,-140(fp)
  800c74:	10c5c83a 	sub	r2,r2,r3
  800c78:	e0bfe815 	stw	r2,-96(fp)
  800c7c:	00000406 	br	800c90 <calibrateMPU9250+0x698>
  }
  else
  {
    accel_bias[2] += (alt_32) accelsensitivity;
  800c80:	e0bfe817 	ldw	r2,-96(fp)
  800c84:	e0ffdd0b 	ldhu	r3,-140(fp)
  800c88:	10c5883a 	add	r2,r2,r3
  800c8c:	e0bfe815 	stw	r2,-96(fp)

  // Construct the gyro biases for push to the hardware gyro bias registers,
  // which are reset to zero upon device startup.
  // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input
  // format.
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF;
  800c90:	e0bfe317 	ldw	r2,-116(fp)
  800c94:	0085c83a 	sub	r2,zero,r2
  800c98:	e0bff715 	stw	r2,-36(fp)
  800c9c:	e0fff717 	ldw	r3,-36(fp)
  800ca0:	1804403a 	cmpge	r2,r3,zero
  800ca4:	1000031e 	bne	r2,zero,800cb4 <calibrateMPU9250+0x6bc>
  800ca8:	e0bff717 	ldw	r2,-36(fp)
  800cac:	108000c4 	addi	r2,r2,3
  800cb0:	e0bff715 	stw	r2,-36(fp)
  800cb4:	e0fff717 	ldw	r3,-36(fp)
  800cb8:	1805d0ba 	srai	r2,r3,2
  800cbc:	1005d23a 	srai	r2,r2,8
  800cc0:	1007883a 	mov	r3,r2
  800cc4:	00bfffc4 	movi	r2,-1
  800cc8:	1884703a 	and	r2,r3,r2
  800ccc:	e0bfdfc5 	stb	r2,-129(fp)
  // Biases are additive, so change sign on calculated average gyro biases
  data[1] = (-gyro_bias[0]/4)       & 0xFF;
  800cd0:	e0bfe317 	ldw	r2,-116(fp)
  800cd4:	0085c83a 	sub	r2,zero,r2
  800cd8:	e0bff815 	stw	r2,-32(fp)
  800cdc:	e0fff817 	ldw	r3,-32(fp)
  800ce0:	1804403a 	cmpge	r2,r3,zero
  800ce4:	1000031e 	bne	r2,zero,800cf4 <calibrateMPU9250+0x6fc>
  800ce8:	e0bff817 	ldw	r2,-32(fp)
  800cec:	108000c4 	addi	r2,r2,3
  800cf0:	e0bff815 	stw	r2,-32(fp)
  800cf4:	e0fff817 	ldw	r3,-32(fp)
  800cf8:	1805d0ba 	srai	r2,r3,2
  800cfc:	1007883a 	mov	r3,r2
  800d00:	00bfffc4 	movi	r2,-1
  800d04:	1884703a 	and	r2,r3,r2
  800d08:	e0bfe005 	stb	r2,-128(fp)
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
  800d0c:	e0bfe417 	ldw	r2,-112(fp)
  800d10:	0085c83a 	sub	r2,zero,r2
  800d14:	e0bff915 	stw	r2,-28(fp)
  800d18:	e0fff917 	ldw	r3,-28(fp)
  800d1c:	1804403a 	cmpge	r2,r3,zero
  800d20:	1000031e 	bne	r2,zero,800d30 <calibrateMPU9250+0x738>
  800d24:	e0bff917 	ldw	r2,-28(fp)
  800d28:	108000c4 	addi	r2,r2,3
  800d2c:	e0bff915 	stw	r2,-28(fp)
  800d30:	e0fff917 	ldw	r3,-28(fp)
  800d34:	1805d0ba 	srai	r2,r3,2
  800d38:	1005d23a 	srai	r2,r2,8
  800d3c:	1007883a 	mov	r3,r2
  800d40:	00bfffc4 	movi	r2,-1
  800d44:	1884703a 	and	r2,r3,r2
  800d48:	e0bfe045 	stb	r2,-127(fp)
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
  800d4c:	e0bfe417 	ldw	r2,-112(fp)
  800d50:	0085c83a 	sub	r2,zero,r2
  800d54:	e0bffa15 	stw	r2,-24(fp)
  800d58:	e0fffa17 	ldw	r3,-24(fp)
  800d5c:	1804403a 	cmpge	r2,r3,zero
  800d60:	1000031e 	bne	r2,zero,800d70 <calibrateMPU9250+0x778>
  800d64:	e0bffa17 	ldw	r2,-24(fp)
  800d68:	108000c4 	addi	r2,r2,3
  800d6c:	e0bffa15 	stw	r2,-24(fp)
  800d70:	e0fffa17 	ldw	r3,-24(fp)
  800d74:	1805d0ba 	srai	r2,r3,2
  800d78:	1007883a 	mov	r3,r2
  800d7c:	00bfffc4 	movi	r2,-1
  800d80:	1884703a 	and	r2,r3,r2
  800d84:	e0bfe085 	stb	r2,-126(fp)
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
  800d88:	e0bfe517 	ldw	r2,-108(fp)
  800d8c:	0085c83a 	sub	r2,zero,r2
  800d90:	e0bffb15 	stw	r2,-20(fp)
  800d94:	e0fffb17 	ldw	r3,-20(fp)
  800d98:	1804403a 	cmpge	r2,r3,zero
  800d9c:	1000031e 	bne	r2,zero,800dac <calibrateMPU9250+0x7b4>
  800da0:	e0bffb17 	ldw	r2,-20(fp)
  800da4:	108000c4 	addi	r2,r2,3
  800da8:	e0bffb15 	stw	r2,-20(fp)
  800dac:	e0fffb17 	ldw	r3,-20(fp)
  800db0:	1805d0ba 	srai	r2,r3,2
  800db4:	1005d23a 	srai	r2,r2,8
  800db8:	1007883a 	mov	r3,r2
  800dbc:	00bfffc4 	movi	r2,-1
  800dc0:	1884703a 	and	r2,r3,r2
  800dc4:	e0bfe0c5 	stb	r2,-125(fp)
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
  800dc8:	e0bfe517 	ldw	r2,-108(fp)
  800dcc:	0085c83a 	sub	r2,zero,r2
  800dd0:	e0bffc15 	stw	r2,-16(fp)
  800dd4:	e0fffc17 	ldw	r3,-16(fp)
  800dd8:	1804403a 	cmpge	r2,r3,zero
  800ddc:	1000031e 	bne	r2,zero,800dec <calibrateMPU9250+0x7f4>
  800de0:	e0bffc17 	ldw	r2,-16(fp)
  800de4:	108000c4 	addi	r2,r2,3
  800de8:	e0bffc15 	stw	r2,-16(fp)
  800dec:	e0fffc17 	ldw	r3,-16(fp)
  800df0:	1805d0ba 	srai	r2,r3,2
  800df4:	1007883a 	mov	r3,r2
  800df8:	00bfffc4 	movi	r2,-1
  800dfc:	1884703a 	and	r2,r3,r2
  800e00:	e0bfe105 	stb	r2,-124(fp)

  // Push gyro biases to hardware registers

  I2C_Start(scl_base, sda_base);
  800e04:	e13ff217 	ldw	r4,-56(fp)
  800e08:	e17ff317 	ldw	r5,-52(fp)
  800e0c:	080bb280 	call	80bb28 <I2C_Start>
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress,  XG_OFFSET_H, data[0], 1);
  800e10:	e0bfdf83 	ldbu	r2,-130(fp)
  800e14:	11803fcc 	andi	r6,r2,255
  800e18:	3180201c 	xori	r6,r6,128
  800e1c:	31bfe004 	addi	r6,r6,-128
  800e20:	e0bfdfc3 	ldbu	r2,-129(fp)
  800e24:	10803fcc 	andi	r2,r2,255
  800e28:	d8800015 	stw	r2,0(sp)
  800e2c:	00800044 	movi	r2,1
  800e30:	d8800115 	stw	r2,4(sp)
  800e34:	e13ff217 	ldw	r4,-56(fp)
  800e38:	e17ff317 	ldw	r5,-52(fp)
  800e3c:	01c004c4 	movi	r7,19
  800e40:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress,  XG_OFFSET_L, data[1], 1);
  800e44:	e0bfdf83 	ldbu	r2,-130(fp)
  800e48:	11803fcc 	andi	r6,r2,255
  800e4c:	3180201c 	xori	r6,r6,128
  800e50:	31bfe004 	addi	r6,r6,-128
  800e54:	e0bfe003 	ldbu	r2,-128(fp)
  800e58:	10803fcc 	andi	r2,r2,255
  800e5c:	d8800015 	stw	r2,0(sp)
  800e60:	00800044 	movi	r2,1
  800e64:	d8800115 	stw	r2,4(sp)
  800e68:	e13ff217 	ldw	r4,-56(fp)
  800e6c:	e17ff317 	ldw	r5,-52(fp)
  800e70:	01c00504 	movi	r7,20
  800e74:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, YG_OFFSET_H, data[2], 1);
  800e78:	e0bfdf83 	ldbu	r2,-130(fp)
  800e7c:	11803fcc 	andi	r6,r2,255
  800e80:	3180201c 	xori	r6,r6,128
  800e84:	31bfe004 	addi	r6,r6,-128
  800e88:	e0bfe043 	ldbu	r2,-127(fp)
  800e8c:	10803fcc 	andi	r2,r2,255
  800e90:	d8800015 	stw	r2,0(sp)
  800e94:	00800044 	movi	r2,1
  800e98:	d8800115 	stw	r2,4(sp)
  800e9c:	e13ff217 	ldw	r4,-56(fp)
  800ea0:	e17ff317 	ldw	r5,-52(fp)
  800ea4:	01c00544 	movi	r7,21
  800ea8:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, YG_OFFSET_L, data[3], 1);
  800eac:	e0bfdf83 	ldbu	r2,-130(fp)
  800eb0:	11803fcc 	andi	r6,r2,255
  800eb4:	3180201c 	xori	r6,r6,128
  800eb8:	31bfe004 	addi	r6,r6,-128
  800ebc:	e0bfe083 	ldbu	r2,-126(fp)
  800ec0:	10803fcc 	andi	r2,r2,255
  800ec4:	d8800015 	stw	r2,0(sp)
  800ec8:	00800044 	movi	r2,1
  800ecc:	d8800115 	stw	r2,4(sp)
  800ed0:	e13ff217 	ldw	r4,-56(fp)
  800ed4:	e17ff317 	ldw	r5,-52(fp)
  800ed8:	01c00584 	movi	r7,22
  800edc:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, ZG_OFFSET_H, data[4], 1);
  800ee0:	e0bfdf83 	ldbu	r2,-130(fp)
  800ee4:	11803fcc 	andi	r6,r2,255
  800ee8:	3180201c 	xori	r6,r6,128
  800eec:	31bfe004 	addi	r6,r6,-128
  800ef0:	e0bfe0c3 	ldbu	r2,-125(fp)
  800ef4:	10803fcc 	andi	r2,r2,255
  800ef8:	d8800015 	stw	r2,0(sp)
  800efc:	00800044 	movi	r2,1
  800f00:	d8800115 	stw	r2,4(sp)
  800f04:	e13ff217 	ldw	r4,-56(fp)
  800f08:	e17ff317 	ldw	r5,-52(fp)
  800f0c:	01c005c4 	movi	r7,23
  800f10:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, ZG_OFFSET_L, data[5], 1);
  800f14:	e0bfdf83 	ldbu	r2,-130(fp)
  800f18:	11803fcc 	andi	r6,r2,255
  800f1c:	3180201c 	xori	r6,r6,128
  800f20:	31bfe004 	addi	r6,r6,-128
  800f24:	e0bfe103 	ldbu	r2,-124(fp)
  800f28:	10803fcc 	andi	r2,r2,255
  800f2c:	d8800015 	stw	r2,0(sp)
  800f30:	00800044 	movi	r2,1
  800f34:	d8800115 	stw	r2,4(sp)
  800f38:	e13ff217 	ldw	r4,-56(fp)
  800f3c:	e17ff317 	ldw	r5,-52(fp)
  800f40:	01c00604 	movi	r7,24
  800f44:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  I2C_Stop(scl_base, sda_base);
  800f48:	e13ff217 	ldw	r4,-56(fp)
  800f4c:	e17ff317 	ldw	r5,-52(fp)
  800f50:	080bb600 	call	80bb60 <I2C_Stop>


  // Output scaled gyro biases for display in the main program
  gyroBias[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
  800f54:	e13fe317 	ldw	r4,-116(fp)
  800f58:	080ff800 	call	80ff80 <__floatsisf>
  800f5c:	1021883a 	mov	r16,r2
  800f60:	e13fdd8b 	ldhu	r4,-138(fp)
  800f64:	081006c0 	call	81006c <__floatunsisf>
  800f68:	8009883a 	mov	r4,r16
  800f6c:	100b883a 	mov	r5,r2
  800f70:	080fd1c0 	call	80fd1c <__divsf3>
  800f74:	1007883a 	mov	r3,r2
  800f78:	e0bff017 	ldw	r2,-64(fp)
  800f7c:	10c00015 	stw	r3,0(r2)
  gyroBias[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
  800f80:	e0bff017 	ldw	r2,-64(fp)
  800f84:	14400104 	addi	r17,r2,4
  800f88:	e13fe417 	ldw	r4,-112(fp)
  800f8c:	080ff800 	call	80ff80 <__floatsisf>
  800f90:	1021883a 	mov	r16,r2
  800f94:	e13fdd8b 	ldhu	r4,-138(fp)
  800f98:	081006c0 	call	81006c <__floatunsisf>
  800f9c:	8009883a 	mov	r4,r16
  800fa0:	100b883a 	mov	r5,r2
  800fa4:	080fd1c0 	call	80fd1c <__divsf3>
  800fa8:	88800015 	stw	r2,0(r17)
  gyroBias[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
  800fac:	e0bff017 	ldw	r2,-64(fp)
  800fb0:	14400204 	addi	r17,r2,8
  800fb4:	e13fe517 	ldw	r4,-108(fp)
  800fb8:	080ff800 	call	80ff80 <__floatsisf>
  800fbc:	1021883a 	mov	r16,r2
  800fc0:	e13fdd8b 	ldhu	r4,-138(fp)
  800fc4:	081006c0 	call	81006c <__floatunsisf>
  800fc8:	8009883a 	mov	r4,r16
  800fcc:	100b883a 	mov	r5,r2
  800fd0:	080fd1c0 	call	80fd1c <__divsf3>
  800fd4:	88800015 	stw	r2,0(r17)
  // preserved since it is used for temperature compensation calculations.
  // Accelerometer bias registers expect bias input as 2048 LSB per g, so that
  // the accelerometer biases calculated above must be divided by 8.

  // A place to hold the factory accelerometer trim biases
  alt_32 accel_bias_reg[3] = {0, 0, 0};
  800fd8:	e03fe915 	stw	zero,-92(fp)
  800fdc:	e03fea15 	stw	zero,-88(fp)
  800fe0:	e03feb15 	stw	zero,-84(fp)
  // Read factory accelerometer trim values
  I2C_Start(scl_base, sda_base);
  800fe4:	e13ff217 	ldw	r4,-56(fp)
  800fe8:	e17ff317 	ldw	r5,-52(fp)
  800fec:	080bb280 	call	80bb28 <I2C_Start>
  I2C_ReadFromDeviceRegister(scl_base, sda_base, deviceAddress, XA_OFFSET_H, &data[0], 2, true);
  800ff0:	e0bfdf83 	ldbu	r2,-130(fp)
  800ff4:	11803fcc 	andi	r6,r2,255
  800ff8:	3180201c 	xori	r6,r6,128
  800ffc:	31bfe004 	addi	r6,r6,-128
  801000:	e0bfdfc4 	addi	r2,fp,-129
  801004:	d8800015 	stw	r2,0(sp)
  801008:	00800084 	movi	r2,2
  80100c:	d8800115 	stw	r2,4(sp)
  801010:	00800044 	movi	r2,1
  801014:	d8800215 	stw	r2,8(sp)
  801018:	e13ff217 	ldw	r4,-56(fp)
  80101c:	e17ff317 	ldw	r5,-52(fp)
  801020:	01c01dc4 	movi	r7,119
  801024:	080bf780 	call	80bf78 <I2C_ReadFromDeviceRegister>
  I2C_Stop(scl_base, sda_base);
  801028:	e13ff217 	ldw	r4,-56(fp)
  80102c:	e17ff317 	ldw	r5,-52(fp)
  801030:	080bb600 	call	80bb60 <I2C_Stop>
  accel_bias_reg[0] = (alt_32) (((alt_16)data[0] << 8) | data[1]);
  801034:	e0bfdfc3 	ldbu	r2,-129(fp)
  801038:	10803fcc 	andi	r2,r2,255
  80103c:	1006923a 	slli	r3,r2,8
  801040:	e0bfe003 	ldbu	r2,-128(fp)
  801044:	10803fcc 	andi	r2,r2,255
  801048:	1884b03a 	or	r2,r3,r2
  80104c:	e0bfe915 	stw	r2,-92(fp)
  I2C_Start(scl_base, sda_base);
  801050:	e13ff217 	ldw	r4,-56(fp)
  801054:	e17ff317 	ldw	r5,-52(fp)
  801058:	080bb280 	call	80bb28 <I2C_Start>
  I2C_ReadFromDeviceRegister(scl_base, sda_base, deviceAddress, YA_OFFSET_H, &data[0], 2, true);
  80105c:	e0bfdf83 	ldbu	r2,-130(fp)
  801060:	11803fcc 	andi	r6,r2,255
  801064:	3180201c 	xori	r6,r6,128
  801068:	31bfe004 	addi	r6,r6,-128
  80106c:	e0bfdfc4 	addi	r2,fp,-129
  801070:	d8800015 	stw	r2,0(sp)
  801074:	00800084 	movi	r2,2
  801078:	d8800115 	stw	r2,4(sp)
  80107c:	00800044 	movi	r2,1
  801080:	d8800215 	stw	r2,8(sp)
  801084:	e13ff217 	ldw	r4,-56(fp)
  801088:	e17ff317 	ldw	r5,-52(fp)
  80108c:	01c01e84 	movi	r7,122
  801090:	080bf780 	call	80bf78 <I2C_ReadFromDeviceRegister>
  I2C_Stop(scl_base, sda_base);
  801094:	e13ff217 	ldw	r4,-56(fp)
  801098:	e17ff317 	ldw	r5,-52(fp)
  80109c:	080bb600 	call	80bb60 <I2C_Stop>
  accel_bias_reg[1] = (alt_32) (((alt_16)data[0] << 8) | data[1]);
  8010a0:	e0bfdfc3 	ldbu	r2,-129(fp)
  8010a4:	10803fcc 	andi	r2,r2,255
  8010a8:	1006923a 	slli	r3,r2,8
  8010ac:	e0bfe003 	ldbu	r2,-128(fp)
  8010b0:	10803fcc 	andi	r2,r2,255
  8010b4:	1884b03a 	or	r2,r3,r2
  8010b8:	e0bfea15 	stw	r2,-88(fp)
  I2C_Start(scl_base, sda_base);
  8010bc:	e13ff217 	ldw	r4,-56(fp)
  8010c0:	e17ff317 	ldw	r5,-52(fp)
  8010c4:	080bb280 	call	80bb28 <I2C_Start>
  I2C_ReadFromDeviceRegister(scl_base, sda_base, deviceAddress, ZA_OFFSET_H, &data[0], 2, true);
  8010c8:	e0bfdf83 	ldbu	r2,-130(fp)
  8010cc:	11803fcc 	andi	r6,r2,255
  8010d0:	3180201c 	xori	r6,r6,128
  8010d4:	31bfe004 	addi	r6,r6,-128
  8010d8:	e0bfdfc4 	addi	r2,fp,-129
  8010dc:	d8800015 	stw	r2,0(sp)
  8010e0:	00800084 	movi	r2,2
  8010e4:	d8800115 	stw	r2,4(sp)
  8010e8:	00800044 	movi	r2,1
  8010ec:	d8800215 	stw	r2,8(sp)
  8010f0:	e13ff217 	ldw	r4,-56(fp)
  8010f4:	e17ff317 	ldw	r5,-52(fp)
  8010f8:	01c01f44 	movi	r7,125
  8010fc:	080bf780 	call	80bf78 <I2C_ReadFromDeviceRegister>
  I2C_Stop(scl_base, sda_base);
  801100:	e13ff217 	ldw	r4,-56(fp)
  801104:	e17ff317 	ldw	r5,-52(fp)
  801108:	080bb600 	call	80bb60 <I2C_Stop>
  accel_bias_reg[2] = (alt_32) (((alt_16)data[0] << 8) | data[1]);
  80110c:	e0bfdfc3 	ldbu	r2,-129(fp)
  801110:	10803fcc 	andi	r2,r2,255
  801114:	1006923a 	slli	r3,r2,8
  801118:	e0bfe003 	ldbu	r2,-128(fp)
  80111c:	10803fcc 	andi	r2,r2,255
  801120:	1884b03a 	or	r2,r3,r2
  801124:	e0bfeb15 	stw	r2,-84(fp)

  // Define mask for temperature compensation bit 0 of lower byte of
  // accelerometer bias registers
  alt_u32 mask = 1uL;
  801128:	00800044 	movi	r2,1
  80112c:	e0bfdc15 	stw	r2,-144(fp)
  // Define array to hold mask bit for each accelerometer bias axis
  alt_u8 mask_bit[3] = {0, 0, 0};
  801130:	e03fec05 	stb	zero,-80(fp)
  801134:	e03fec45 	stb	zero,-79(fp)
  801138:	e03fec85 	stb	zero,-78(fp)

  for (ii = 0; ii < 3; ii++)
  80113c:	e03fdf0d 	sth	zero,-132(fp)
  801140:	00001406 	br	801194 <calibrateMPU9250+0xb9c>
  {
    // If temperature compensation bit is set, record that fact in mask_bit
    if ((accel_bias_reg[ii] & mask))
  801144:	e0bfdf0b 	ldhu	r2,-132(fp)
  801148:	1085883a 	add	r2,r2,r2
  80114c:	1085883a 	add	r2,r2,r2
  801150:	e0ffdc04 	addi	r3,fp,-144
  801154:	10c5883a 	add	r2,r2,r3
  801158:	10800d04 	addi	r2,r2,52
  80115c:	10800017 	ldw	r2,0(r2)
  801160:	1007883a 	mov	r3,r2
  801164:	e0bfdc17 	ldw	r2,-144(fp)
  801168:	1884703a 	and	r2,r3,r2
  80116c:	1005003a 	cmpeq	r2,r2,zero
  801170:	1000051e 	bne	r2,zero,801188 <calibrateMPU9250+0xb90>
    {
      mask_bit[ii] = 0x01;
  801174:	e0ffdf0b 	ldhu	r3,-132(fp)
  801178:	e0bfec04 	addi	r2,fp,-80
  80117c:	10c7883a 	add	r3,r2,r3
  801180:	00800044 	movi	r2,1
  801184:	18800005 	stb	r2,0(r3)
  // accelerometer bias registers
  alt_u32 mask = 1uL;
  // Define array to hold mask bit for each accelerometer bias axis
  alt_u8 mask_bit[3] = {0, 0, 0};

  for (ii = 0; ii < 3; ii++)
  801188:	e0bfdf0b 	ldhu	r2,-132(fp)
  80118c:	10800044 	addi	r2,r2,1
  801190:	e0bfdf0d 	sth	r2,-132(fp)
  801194:	e0bfdf0b 	ldhu	r2,-132(fp)
  801198:	108000f0 	cmpltui	r2,r2,3
  80119c:	103fe91e 	bne	r2,zero,801144 <calibrateMPU9250+0xb4c>

  // Construct total accelerometer bias, including calculated average
  // accelerometer bias from above
  // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g
  // (16 g full scale)
  accel_bias_reg[0] -= (accel_bias[0]/8);
  8011a0:	e0bfe917 	ldw	r2,-92(fp)
  8011a4:	e0bff615 	stw	r2,-40(fp)
  8011a8:	e0bfe617 	ldw	r2,-104(fp)
  8011ac:	e0bffd15 	stw	r2,-12(fp)
  8011b0:	e0fffd17 	ldw	r3,-12(fp)
  8011b4:	1804403a 	cmpge	r2,r3,zero
  8011b8:	1000031e 	bne	r2,zero,8011c8 <calibrateMPU9250+0xbd0>
  8011bc:	e0bffd17 	ldw	r2,-12(fp)
  8011c0:	108001c4 	addi	r2,r2,7
  8011c4:	e0bffd15 	stw	r2,-12(fp)
  8011c8:	e0fffd17 	ldw	r3,-12(fp)
  8011cc:	1805d0fa 	srai	r2,r3,3
  8011d0:	e0fff617 	ldw	r3,-40(fp)
  8011d4:	1885c83a 	sub	r2,r3,r2
  8011d8:	e0bfe915 	stw	r2,-92(fp)
  accel_bias_reg[1] -= (accel_bias[1]/8);
  8011dc:	e0bfea17 	ldw	r2,-88(fp)
  8011e0:	e0bff515 	stw	r2,-44(fp)
  8011e4:	e0bfe717 	ldw	r2,-100(fp)
  8011e8:	e0bffe15 	stw	r2,-8(fp)
  8011ec:	e0fffe17 	ldw	r3,-8(fp)
  8011f0:	1804403a 	cmpge	r2,r3,zero
  8011f4:	1000031e 	bne	r2,zero,801204 <calibrateMPU9250+0xc0c>
  8011f8:	e0bffe17 	ldw	r2,-8(fp)
  8011fc:	108001c4 	addi	r2,r2,7
  801200:	e0bffe15 	stw	r2,-8(fp)
  801204:	e0fffe17 	ldw	r3,-8(fp)
  801208:	1805d0fa 	srai	r2,r3,3
  80120c:	e0fff517 	ldw	r3,-44(fp)
  801210:	1885c83a 	sub	r2,r3,r2
  801214:	e0bfea15 	stw	r2,-88(fp)
  accel_bias_reg[2] -= (accel_bias[2]/8);
  801218:	e0bfeb17 	ldw	r2,-84(fp)
  80121c:	e0bff415 	stw	r2,-48(fp)
  801220:	e0bfe817 	ldw	r2,-96(fp)
  801224:	e0bfff15 	stw	r2,-4(fp)
  801228:	e0ffff17 	ldw	r3,-4(fp)
  80122c:	1804403a 	cmpge	r2,r3,zero
  801230:	1000031e 	bne	r2,zero,801240 <calibrateMPU9250+0xc48>
  801234:	e0bfff17 	ldw	r2,-4(fp)
  801238:	108001c4 	addi	r2,r2,7
  80123c:	e0bfff15 	stw	r2,-4(fp)
  801240:	e0ffff17 	ldw	r3,-4(fp)
  801244:	1805d0fa 	srai	r2,r3,3
  801248:	e0fff417 	ldw	r3,-48(fp)
  80124c:	1885c83a 	sub	r2,r3,r2
  801250:	e0bfeb15 	stw	r2,-84(fp)

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
  801254:	e0bfe917 	ldw	r2,-92(fp)
  801258:	1005d23a 	srai	r2,r2,8
  80125c:	1007883a 	mov	r3,r2
  801260:	00bfffc4 	movi	r2,-1
  801264:	1884703a 	and	r2,r3,r2
  801268:	e0bfdfc5 	stb	r2,-129(fp)
  data[1] = (accel_bias_reg[0])      & 0xFF;
  80126c:	e0bfe917 	ldw	r2,-92(fp)
  801270:	1007883a 	mov	r3,r2
  801274:	00bfffc4 	movi	r2,-1
  801278:	1884703a 	and	r2,r3,r2
  80127c:	e0bfe005 	stb	r2,-128(fp)
  // preserve temperature compensation bit when writing back to accelerometer
  // bias registers
  data[1] = data[1] | mask_bit[0];
  801280:	e0ffe003 	ldbu	r3,-128(fp)
  801284:	e0bfec03 	ldbu	r2,-80(fp)
  801288:	1884b03a 	or	r2,r3,r2
  80128c:	e0bfe005 	stb	r2,-128(fp)
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
  801290:	e0bfea17 	ldw	r2,-88(fp)
  801294:	1005d23a 	srai	r2,r2,8
  801298:	1007883a 	mov	r3,r2
  80129c:	00bfffc4 	movi	r2,-1
  8012a0:	1884703a 	and	r2,r3,r2
  8012a4:	e0bfe045 	stb	r2,-127(fp)
  data[3] = (accel_bias_reg[1])      & 0xFF;
  8012a8:	e0bfea17 	ldw	r2,-88(fp)
  8012ac:	1007883a 	mov	r3,r2
  8012b0:	00bfffc4 	movi	r2,-1
  8012b4:	1884703a 	and	r2,r3,r2
  8012b8:	e0bfe085 	stb	r2,-126(fp)
  // Preserve temperature compensation bit when writing back to accelerometer
  // bias registers
  data[3] = data[3] | mask_bit[1];
  8012bc:	e0ffe083 	ldbu	r3,-126(fp)
  8012c0:	e0bfec43 	ldbu	r2,-79(fp)
  8012c4:	1884b03a 	or	r2,r3,r2
  8012c8:	e0bfe085 	stb	r2,-126(fp)
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
  8012cc:	e0bfeb17 	ldw	r2,-84(fp)
  8012d0:	1005d23a 	srai	r2,r2,8
  8012d4:	1007883a 	mov	r3,r2
  8012d8:	00bfffc4 	movi	r2,-1
  8012dc:	1884703a 	and	r2,r3,r2
  8012e0:	e0bfe0c5 	stb	r2,-125(fp)
  data[5] = (accel_bias_reg[2])      & 0xFF;
  8012e4:	e0bfeb17 	ldw	r2,-84(fp)
  8012e8:	1007883a 	mov	r3,r2
  8012ec:	00bfffc4 	movi	r2,-1
  8012f0:	1884703a 	and	r2,r3,r2
  8012f4:	e0bfe105 	stb	r2,-124(fp)
  // Preserve temperature compensation bit when writing back to accelerometer
  // bias registers
  data[5] = data[5] | mask_bit[2];
  8012f8:	e0ffe103 	ldbu	r3,-124(fp)
  8012fc:	e0bfec83 	ldbu	r2,-78(fp)
  801300:	1884b03a 	or	r2,r3,r2
  801304:	e0bfe105 	stb	r2,-124(fp)

  // Apparently this is not working for the acceleration biases in the MPU-9250
  // Are we handling the temperature correction bit properly?
  // Push accelerometer biases to hardware registers
  I2C_Start(scl_base, sda_base);
  801308:	e13ff217 	ldw	r4,-56(fp)
  80130c:	e17ff317 	ldw	r5,-52(fp)
  801310:	080bb280 	call	80bb28 <I2C_Start>
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress,  XA_OFFSET_H, data[0], 1);
  801314:	e0bfdf83 	ldbu	r2,-130(fp)
  801318:	11803fcc 	andi	r6,r2,255
  80131c:	3180201c 	xori	r6,r6,128
  801320:	31bfe004 	addi	r6,r6,-128
  801324:	e0bfdfc3 	ldbu	r2,-129(fp)
  801328:	10803fcc 	andi	r2,r2,255
  80132c:	d8800015 	stw	r2,0(sp)
  801330:	00800044 	movi	r2,1
  801334:	d8800115 	stw	r2,4(sp)
  801338:	e13ff217 	ldw	r4,-56(fp)
  80133c:	e17ff317 	ldw	r5,-52(fp)
  801340:	01c01dc4 	movi	r7,119
  801344:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress,  XA_OFFSET_L, data[1], 1);
  801348:	e0bfdf83 	ldbu	r2,-130(fp)
  80134c:	11803fcc 	andi	r6,r2,255
  801350:	3180201c 	xori	r6,r6,128
  801354:	31bfe004 	addi	r6,r6,-128
  801358:	e0bfe003 	ldbu	r2,-128(fp)
  80135c:	10803fcc 	andi	r2,r2,255
  801360:	d8800015 	stw	r2,0(sp)
  801364:	00800044 	movi	r2,1
  801368:	d8800115 	stw	r2,4(sp)
  80136c:	e13ff217 	ldw	r4,-56(fp)
  801370:	e17ff317 	ldw	r5,-52(fp)
  801374:	01c01e04 	movi	r7,120
  801378:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, YA_OFFSET_H, data[2], 1);
  80137c:	e0bfdf83 	ldbu	r2,-130(fp)
  801380:	11803fcc 	andi	r6,r2,255
  801384:	3180201c 	xori	r6,r6,128
  801388:	31bfe004 	addi	r6,r6,-128
  80138c:	e0bfe043 	ldbu	r2,-127(fp)
  801390:	10803fcc 	andi	r2,r2,255
  801394:	d8800015 	stw	r2,0(sp)
  801398:	00800044 	movi	r2,1
  80139c:	d8800115 	stw	r2,4(sp)
  8013a0:	e13ff217 	ldw	r4,-56(fp)
  8013a4:	e17ff317 	ldw	r5,-52(fp)
  8013a8:	01c01e84 	movi	r7,122
  8013ac:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, YA_OFFSET_L, data[3], 1);
  8013b0:	e0bfdf83 	ldbu	r2,-130(fp)
  8013b4:	11803fcc 	andi	r6,r2,255
  8013b8:	3180201c 	xori	r6,r6,128
  8013bc:	31bfe004 	addi	r6,r6,-128
  8013c0:	e0bfe083 	ldbu	r2,-126(fp)
  8013c4:	10803fcc 	andi	r2,r2,255
  8013c8:	d8800015 	stw	r2,0(sp)
  8013cc:	00800044 	movi	r2,1
  8013d0:	d8800115 	stw	r2,4(sp)
  8013d4:	e13ff217 	ldw	r4,-56(fp)
  8013d8:	e17ff317 	ldw	r5,-52(fp)
  8013dc:	01c01ec4 	movi	r7,123
  8013e0:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, ZA_OFFSET_H, data[4], 1);
  8013e4:	e0bfdf83 	ldbu	r2,-130(fp)
  8013e8:	11803fcc 	andi	r6,r2,255
  8013ec:	3180201c 	xori	r6,r6,128
  8013f0:	31bfe004 	addi	r6,r6,-128
  8013f4:	e0bfe0c3 	ldbu	r2,-125(fp)
  8013f8:	10803fcc 	andi	r2,r2,255
  8013fc:	d8800015 	stw	r2,0(sp)
  801400:	00800044 	movi	r2,1
  801404:	d8800115 	stw	r2,4(sp)
  801408:	e13ff217 	ldw	r4,-56(fp)
  80140c:	e17ff317 	ldw	r5,-52(fp)
  801410:	01c01f44 	movi	r7,125
  801414:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, ZA_OFFSET_L, data[5], 1);
  801418:	e0bfdf83 	ldbu	r2,-130(fp)
  80141c:	11803fcc 	andi	r6,r2,255
  801420:	3180201c 	xori	r6,r6,128
  801424:	31bfe004 	addi	r6,r6,-128
  801428:	e0bfe103 	ldbu	r2,-124(fp)
  80142c:	10803fcc 	andi	r2,r2,255
  801430:	d8800015 	stw	r2,0(sp)
  801434:	00800044 	movi	r2,1
  801438:	d8800115 	stw	r2,4(sp)
  80143c:	e13ff217 	ldw	r4,-56(fp)
  801440:	e17ff317 	ldw	r5,-52(fp)
  801444:	01c01f84 	movi	r7,126
  801448:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  I2C_Stop(scl_base, sda_base);
  80144c:	e13ff217 	ldw	r4,-56(fp)
  801450:	e17ff317 	ldw	r5,-52(fp)
  801454:	080bb600 	call	80bb60 <I2C_Stop>


  // Output scaled accelerometer biases for display in the main program
  accelBias[0] = (float)accel_bias[0]/(float)accelsensitivity;
  801458:	e13fe617 	ldw	r4,-104(fp)
  80145c:	080ff800 	call	80ff80 <__floatsisf>
  801460:	1021883a 	mov	r16,r2
  801464:	e13fdd0b 	ldhu	r4,-140(fp)
  801468:	081006c0 	call	81006c <__floatunsisf>
  80146c:	8009883a 	mov	r4,r16
  801470:	100b883a 	mov	r5,r2
  801474:	080fd1c0 	call	80fd1c <__divsf3>
  801478:	1007883a 	mov	r3,r2
  80147c:	e0bff117 	ldw	r2,-60(fp)
  801480:	10c00015 	stw	r3,0(r2)
  accelBias[1] = (float)accel_bias[1]/(float)accelsensitivity;
  801484:	e0bff117 	ldw	r2,-60(fp)
  801488:	14400104 	addi	r17,r2,4
  80148c:	e13fe717 	ldw	r4,-100(fp)
  801490:	080ff800 	call	80ff80 <__floatsisf>
  801494:	1021883a 	mov	r16,r2
  801498:	e13fdd0b 	ldhu	r4,-140(fp)
  80149c:	081006c0 	call	81006c <__floatunsisf>
  8014a0:	8009883a 	mov	r4,r16
  8014a4:	100b883a 	mov	r5,r2
  8014a8:	080fd1c0 	call	80fd1c <__divsf3>
  8014ac:	88800015 	stw	r2,0(r17)
  accelBias[2] = (float)accel_bias[2]/(float)accelsensitivity;
  8014b0:	e0bff117 	ldw	r2,-60(fp)
  8014b4:	14400204 	addi	r17,r2,8
  8014b8:	e13fe817 	ldw	r4,-96(fp)
  8014bc:	080ff800 	call	80ff80 <__floatsisf>
  8014c0:	1021883a 	mov	r16,r2
  8014c4:	e13fdd0b 	ldhu	r4,-140(fp)
  8014c8:	081006c0 	call	81006c <__floatunsisf>
  8014cc:	8009883a 	mov	r4,r16
  8014d0:	100b883a 	mov	r5,r2
  8014d4:	080fd1c0 	call	80fd1c <__divsf3>
  8014d8:	88800015 	stw	r2,0(r17)
}
  8014dc:	e037883a 	mov	sp,fp
  8014e0:	dfc00317 	ldw	ra,12(sp)
  8014e4:	df000217 	ldw	fp,8(sp)
  8014e8:	dc400117 	ldw	r17,4(sp)
  8014ec:	dc000017 	ldw	r16,0(sp)
  8014f0:	dec00404 	addi	sp,sp,16
  8014f4:	f800283a 	ret

008014f8 <MPU9250SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
// Should return percent deviation from factory trim values, +/- 14 or less
// deviation is a pass.
void MPU9250SelfTest(float * destination, alt_u32 scl_base, alt_u32 sda_base)
{
  8014f8:	deffde04 	addi	sp,sp,-136
  8014fc:	dfc02115 	stw	ra,132(sp)
  801500:	df002015 	stw	fp,128(sp)
  801504:	dc401f15 	stw	r17,124(sp)
  801508:	dc001e15 	stw	r16,120(sp)
  80150c:	df001e04 	addi	fp,sp,120
  801510:	e13ffd15 	stw	r4,-12(fp)
  801514:	e17ffe15 	stw	r5,-8(fp)
  801518:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 deviceAddress = 0xD0;
  80151c:	00bff404 	movi	r2,-48
  801520:	e0bfe645 	stb	r2,-103(fp)
  alt_u8 rawData[6];
  alt_u8 selfTest[6];
  alt_32 gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
  801524:	e03fea15 	stw	zero,-88(fp)
  801528:	e03feb15 	stw	zero,-84(fp)
  80152c:	e03fec15 	stw	zero,-80(fp)
  801530:	e03fed15 	stw	zero,-76(fp)
  801534:	e03fee15 	stw	zero,-72(fp)
  801538:	e03fef15 	stw	zero,-68(fp)
  80153c:	e03ff015 	stw	zero,-64(fp)
  801540:	e03ff115 	stw	zero,-60(fp)
  801544:	e03ff215 	stw	zero,-56(fp)
  801548:	e03ff315 	stw	zero,-52(fp)
  80154c:	e03ff415 	stw	zero,-48(fp)
  801550:	e03ff515 	stw	zero,-44(fp)
  float factoryTrim[6];
  alt_u8 FS = 0;
  801554:	e03fe605 	stb	zero,-104(fp)
  alt_u8 ReadBuf[1];

  I2C_Start(scl_base, sda_base);
  801558:	e13ffe17 	ldw	r4,-8(fp)
  80155c:	e17fff17 	ldw	r5,-4(fp)
  801560:	080bb280 	call	80bb28 <I2C_Start>
  // Set gyro sample rate to 1 kHz
  if(!I2C_ReadFromDeviceRegister(scl_base,sda_base, deviceAddress, 0x75, (alt_u8*)&ReadBuf, 1, true)){
  801564:	e0bfe643 	ldbu	r2,-103(fp)
  801568:	11803fcc 	andi	r6,r2,255
  80156c:	3180201c 	xori	r6,r6,128
  801570:	31bfe004 	addi	r6,r6,-128
  801574:	e0bffc04 	addi	r2,fp,-16
  801578:	d8800015 	stw	r2,0(sp)
  80157c:	00800044 	movi	r2,1
  801580:	d8800115 	stw	r2,4(sp)
  801584:	00800044 	movi	r2,1
  801588:	d8800215 	stw	r2,8(sp)
  80158c:	e13ffe17 	ldw	r4,-8(fp)
  801590:	e17fff17 	ldw	r5,-4(fp)
  801594:	01c01d44 	movi	r7,117
  801598:	080bf780 	call	80bf78 <I2C_ReadFromDeviceRegister>

  }
  I2C_Stop(scl_base, sda_base);
  80159c:	e13ffe17 	ldw	r4,-8(fp)
  8015a0:	e17fff17 	ldw	r5,-4(fp)
  8015a4:	080bb600 	call	80bb60 <I2C_Stop>
  printf("WHO AM I: %0x\n", ReadBuf[0]);
  8015a8:	e0bffc03 	ldbu	r2,-16(fp)
  8015ac:	11403fcc 	andi	r5,r2,255
  8015b0:	010020b4 	movhi	r4,130
  8015b4:	211d3704 	addi	r4,r4,29916
  8015b8:	08123a40 	call	8123a4 <printf>


  I2C_Start(scl_base, sda_base);
  8015bc:	e13ffe17 	ldw	r4,-8(fp)
  8015c0:	e17fff17 	ldw	r5,-4(fp)
  8015c4:	080bb280 	call	80bb28 <I2C_Start>
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, SMPLRT_DIV, 0x00, 1);
  8015c8:	e0bfe643 	ldbu	r2,-103(fp)
  8015cc:	11803fcc 	andi	r6,r2,255
  8015d0:	3180201c 	xori	r6,r6,128
  8015d4:	31bfe004 	addi	r6,r6,-128
  8015d8:	d8000015 	stw	zero,0(sp)
  8015dc:	00800044 	movi	r2,1
  8015e0:	d8800115 	stw	r2,4(sp)
  8015e4:	e13ffe17 	ldw	r4,-8(fp)
  8015e8:	e17fff17 	ldw	r5,-4(fp)
  8015ec:	01c00644 	movi	r7,25
  8015f0:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, CONFIG, 0x02, 1);
  8015f4:	e0bfe643 	ldbu	r2,-103(fp)
  8015f8:	11803fcc 	andi	r6,r2,255
  8015fc:	3180201c 	xori	r6,r6,128
  801600:	31bfe004 	addi	r6,r6,-128
  801604:	00800084 	movi	r2,2
  801608:	d8800015 	stw	r2,0(sp)
  80160c:	00800044 	movi	r2,1
  801610:	d8800115 	stw	r2,4(sp)
  801614:	e13ffe17 	ldw	r4,-8(fp)
  801618:	e17fff17 	ldw	r5,-4(fp)
  80161c:	01c00684 	movi	r7,26
  801620:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  // Set full scale range for the gyro to 250 dps
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, GYRO_CONFIG,  0x10, 1);
  801624:	e0bfe643 	ldbu	r2,-103(fp)
  801628:	11803fcc 	andi	r6,r2,255
  80162c:	3180201c 	xori	r6,r6,128
  801630:	31bfe004 	addi	r6,r6,-128
  801634:	00800404 	movi	r2,16
  801638:	d8800015 	stw	r2,0(sp)
  80163c:	00800044 	movi	r2,1
  801640:	d8800115 	stw	r2,4(sp)
  801644:	e13ffe17 	ldw	r4,-8(fp)
  801648:	e17fff17 	ldw	r5,-4(fp)
  80164c:	01c006c4 	movi	r7,27
  801650:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, ACCEL_CONFIG2, 0x02, 1);
  801654:	e0bfe643 	ldbu	r2,-103(fp)
  801658:	11803fcc 	andi	r6,r2,255
  80165c:	3180201c 	xori	r6,r6,128
  801660:	31bfe004 	addi	r6,r6,-128
  801664:	00800084 	movi	r2,2
  801668:	d8800015 	stw	r2,0(sp)
  80166c:	00800044 	movi	r2,1
  801670:	d8800115 	stw	r2,4(sp)
  801674:	e13ffe17 	ldw	r4,-8(fp)
  801678:	e17fff17 	ldw	r5,-4(fp)
  80167c:	01c00744 	movi	r7,29
  801680:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  // Set full scale range for the accelerometer to 2 g
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, ACCEL_CONFIG, 1<<FS, 1);
  801684:	e0bfe643 	ldbu	r2,-103(fp)
  801688:	11803fcc 	andi	r6,r2,255
  80168c:	3180201c 	xori	r6,r6,128
  801690:	31bfe004 	addi	r6,r6,-128
  801694:	e0ffe603 	ldbu	r3,-104(fp)
  801698:	00800044 	movi	r2,1
  80169c:	10c4983a 	sll	r2,r2,r3
  8016a0:	d8800015 	stw	r2,0(sp)
  8016a4:	00800044 	movi	r2,1
  8016a8:	d8800115 	stw	r2,4(sp)
  8016ac:	e13ffe17 	ldw	r4,-8(fp)
  8016b0:	e17fff17 	ldw	r5,-4(fp)
  8016b4:	01c00704 	movi	r7,28
  8016b8:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  I2C_Stop(scl_base, sda_base);
  8016bc:	e13ffe17 	ldw	r4,-8(fp)
  8016c0:	e17fff17 	ldw	r5,-4(fp)
  8016c4:	080bb600 	call	80bb60 <I2C_Stop>


  int ii;
  // Get average current values of gyro and acclerometer
  for ( ii = 0; ii < 100; ii= ii+1) {
  8016c8:	e03fe515 	stw	zero,-108(fp)
  8016cc:	00007606 	br	8018a8 <MPU9250SelfTest+0x3b0>

  	//printf("BHW::ii = %d \n", ii );
  	I2C_Start(scl_base, sda_base);
  8016d0:	e13ffe17 	ldw	r4,-8(fp)
  8016d4:	e17fff17 	ldw	r5,-4(fp)
  8016d8:	080bb280 	call	80bb28 <I2C_Start>
    // Read the six raw data registers into data array
	I2C_ReadFromDeviceRegister(scl_base, sda_base, 0xD0, ACCEL_XOUT_H, &rawData[0],6, true);
  8016dc:	e0bfe684 	addi	r2,fp,-102
  8016e0:	d8800015 	stw	r2,0(sp)
  8016e4:	00800184 	movi	r2,6
  8016e8:	d8800115 	stw	r2,4(sp)
  8016ec:	00800044 	movi	r2,1
  8016f0:	d8800215 	stw	r2,8(sp)
  8016f4:	e13ffe17 	ldw	r4,-8(fp)
  8016f8:	e17fff17 	ldw	r5,-4(fp)
  8016fc:	01bff404 	movi	r6,-48
  801700:	01c00ec4 	movi	r7,59
  801704:	080bf780 	call	80bf78 <I2C_ReadFromDeviceRegister>
    I2C_Stop(scl_base, sda_base);
  801708:	e13ffe17 	ldw	r4,-8(fp)
  80170c:	e17fff17 	ldw	r5,-4(fp)
  801710:	080bb600 	call	80bb60 <I2C_Stop>

	// Turn the MSB and LSB into a signed 16-bit value
    aAvg[0] += (alt_16)(((alt_16)rawData[0] << 8) | rawData[1]) ;
  801714:	e13fed17 	ldw	r4,-76(fp)
  801718:	e0bfe683 	ldbu	r2,-102(fp)
  80171c:	10803fcc 	andi	r2,r2,255
  801720:	1004923a 	slli	r2,r2,8
  801724:	1007883a 	mov	r3,r2
  801728:	e0bfe6c3 	ldbu	r2,-101(fp)
  80172c:	10803fcc 	andi	r2,r2,255
  801730:	1884b03a 	or	r2,r3,r2
  801734:	10bfffcc 	andi	r2,r2,65535
  801738:	10a0001c 	xori	r2,r2,32768
  80173c:	10a00004 	addi	r2,r2,-32768
  801740:	2085883a 	add	r2,r4,r2
  801744:	e0bfed15 	stw	r2,-76(fp)
    aAvg[1] += (alt_16)(((alt_16)rawData[2] << 8) | rawData[3]) ;
  801748:	e13fee17 	ldw	r4,-72(fp)
  80174c:	e0bfe703 	ldbu	r2,-100(fp)
  801750:	10803fcc 	andi	r2,r2,255
  801754:	1004923a 	slli	r2,r2,8
  801758:	1007883a 	mov	r3,r2
  80175c:	e0bfe743 	ldbu	r2,-99(fp)
  801760:	10803fcc 	andi	r2,r2,255
  801764:	1884b03a 	or	r2,r3,r2
  801768:	10bfffcc 	andi	r2,r2,65535
  80176c:	10a0001c 	xori	r2,r2,32768
  801770:	10a00004 	addi	r2,r2,-32768
  801774:	2085883a 	add	r2,r4,r2
  801778:	e0bfee15 	stw	r2,-72(fp)
    aAvg[2] += (alt_16)(((alt_16)rawData[4] << 8) | rawData[5]) ;
  80177c:	e13fef17 	ldw	r4,-68(fp)
  801780:	e0bfe783 	ldbu	r2,-98(fp)
  801784:	10803fcc 	andi	r2,r2,255
  801788:	1004923a 	slli	r2,r2,8
  80178c:	1007883a 	mov	r3,r2
  801790:	e0bfe7c3 	ldbu	r2,-97(fp)
  801794:	10803fcc 	andi	r2,r2,255
  801798:	1884b03a 	or	r2,r3,r2
  80179c:	10bfffcc 	andi	r2,r2,65535
  8017a0:	10a0001c 	xori	r2,r2,32768
  8017a4:	10a00004 	addi	r2,r2,-32768
  8017a8:	2085883a 	add	r2,r4,r2
  8017ac:	e0bfef15 	stw	r2,-68(fp)

  	I2C_Start(scl_base, sda_base);
  8017b0:	e13ffe17 	ldw	r4,-8(fp)
  8017b4:	e17fff17 	ldw	r5,-4(fp)
  8017b8:	080bb280 	call	80bb28 <I2C_Start>

    // Read the six raw data registers sequentially into data array
	I2C_ReadFromDeviceRegister(scl_base, sda_base, deviceAddress, GYRO_XOUT_H, &rawData[0], 6, true);
  8017bc:	e0bfe643 	ldbu	r2,-103(fp)
  8017c0:	11803fcc 	andi	r6,r2,255
  8017c4:	3180201c 	xori	r6,r6,128
  8017c8:	31bfe004 	addi	r6,r6,-128
  8017cc:	e0bfe684 	addi	r2,fp,-102
  8017d0:	d8800015 	stw	r2,0(sp)
  8017d4:	00800184 	movi	r2,6
  8017d8:	d8800115 	stw	r2,4(sp)
  8017dc:	00800044 	movi	r2,1
  8017e0:	d8800215 	stw	r2,8(sp)
  8017e4:	e13ffe17 	ldw	r4,-8(fp)
  8017e8:	e17fff17 	ldw	r5,-4(fp)
  8017ec:	01c010c4 	movi	r7,67
  8017f0:	080bf780 	call	80bf78 <I2C_ReadFromDeviceRegister>
    I2C_Stop(scl_base, sda_base);
  8017f4:	e13ffe17 	ldw	r4,-8(fp)
  8017f8:	e17fff17 	ldw	r5,-4(fp)
  8017fc:	080bb600 	call	80bb60 <I2C_Stop>

	// Turn the MSB and LSB into a signed 16-bit value
    gAvg[0] += (alt_16)(((alt_16)rawData[0] << 8) | rawData[1]) ;
  801800:	e13fea17 	ldw	r4,-88(fp)
  801804:	e0bfe683 	ldbu	r2,-102(fp)
  801808:	10803fcc 	andi	r2,r2,255
  80180c:	1004923a 	slli	r2,r2,8
  801810:	1007883a 	mov	r3,r2
  801814:	e0bfe6c3 	ldbu	r2,-101(fp)
  801818:	10803fcc 	andi	r2,r2,255
  80181c:	1884b03a 	or	r2,r3,r2
  801820:	10bfffcc 	andi	r2,r2,65535
  801824:	10a0001c 	xori	r2,r2,32768
  801828:	10a00004 	addi	r2,r2,-32768
  80182c:	2085883a 	add	r2,r4,r2
  801830:	e0bfea15 	stw	r2,-88(fp)
    gAvg[1] += (alt_16)(((alt_16)rawData[2] << 8) | rawData[3]) ;
  801834:	e13feb17 	ldw	r4,-84(fp)
  801838:	e0bfe703 	ldbu	r2,-100(fp)
  80183c:	10803fcc 	andi	r2,r2,255
  801840:	1004923a 	slli	r2,r2,8
  801844:	1007883a 	mov	r3,r2
  801848:	e0bfe743 	ldbu	r2,-99(fp)
  80184c:	10803fcc 	andi	r2,r2,255
  801850:	1884b03a 	or	r2,r3,r2
  801854:	10bfffcc 	andi	r2,r2,65535
  801858:	10a0001c 	xori	r2,r2,32768
  80185c:	10a00004 	addi	r2,r2,-32768
  801860:	2085883a 	add	r2,r4,r2
  801864:	e0bfeb15 	stw	r2,-84(fp)
    gAvg[2] += (alt_16)(((alt_16)rawData[4] << 8) | rawData[5]) ;
  801868:	e13fec17 	ldw	r4,-80(fp)
  80186c:	e0bfe783 	ldbu	r2,-98(fp)
  801870:	10803fcc 	andi	r2,r2,255
  801874:	1004923a 	slli	r2,r2,8
  801878:	1007883a 	mov	r3,r2
  80187c:	e0bfe7c3 	ldbu	r2,-97(fp)
  801880:	10803fcc 	andi	r2,r2,255
  801884:	1884b03a 	or	r2,r3,r2
  801888:	10bfffcc 	andi	r2,r2,65535
  80188c:	10a0001c 	xori	r2,r2,32768
  801890:	10a00004 	addi	r2,r2,-32768
  801894:	2085883a 	add	r2,r4,r2
  801898:	e0bfec15 	stw	r2,-80(fp)
  I2C_Stop(scl_base, sda_base);


  int ii;
  // Get average current values of gyro and acclerometer
  for ( ii = 0; ii < 100; ii= ii+1) {
  80189c:	e0bfe517 	ldw	r2,-108(fp)
  8018a0:	10800044 	addi	r2,r2,1
  8018a4:	e0bfe515 	stw	r2,-108(fp)
  8018a8:	e0bfe517 	ldw	r2,-108(fp)
  8018ac:	10801910 	cmplti	r2,r2,100
  8018b0:	103f871e 	bne	r2,zero,8016d0 <MPU9250SelfTest+0x1d8>
    gAvg[2] += (alt_16)(((alt_16)rawData[4] << 8) | rawData[5]) ;

  }

  // Get average of 200 values and store as average current readings
  for ( ii =0; ii < 3; ii = ii+1)
  8018b4:	e03fe515 	stw	zero,-108(fp)
  8018b8:	00002506 	br	801950 <MPU9250SelfTest+0x458>
  {
    aAvg[ii] /= 100;
  8018bc:	e43fe517 	ldw	r16,-108(fp)
  8018c0:	e0bfe517 	ldw	r2,-108(fp)
  8018c4:	1085883a 	add	r2,r2,r2
  8018c8:	1085883a 	add	r2,r2,r2
  8018cc:	e0ffe504 	addi	r3,fp,-108
  8018d0:	10c5883a 	add	r2,r2,r3
  8018d4:	10800804 	addi	r2,r2,32
  8018d8:	11000017 	ldw	r4,0(r2)
  8018dc:	01401904 	movi	r5,100
  8018e0:	08111140 	call	811114 <__divsi3>
  8018e4:	1007883a 	mov	r3,r2
  8018e8:	8405883a 	add	r2,r16,r16
  8018ec:	1085883a 	add	r2,r2,r2
  8018f0:	e13fe504 	addi	r4,fp,-108
  8018f4:	1105883a 	add	r2,r2,r4
  8018f8:	10800804 	addi	r2,r2,32
  8018fc:	10c00015 	stw	r3,0(r2)
    gAvg[ii] /= 100;
  801900:	e43fe517 	ldw	r16,-108(fp)
  801904:	e0bfe517 	ldw	r2,-108(fp)
  801908:	1085883a 	add	r2,r2,r2
  80190c:	1085883a 	add	r2,r2,r2
  801910:	e0ffe504 	addi	r3,fp,-108
  801914:	10c5883a 	add	r2,r2,r3
  801918:	10800504 	addi	r2,r2,20
  80191c:	11000017 	ldw	r4,0(r2)
  801920:	01401904 	movi	r5,100
  801924:	08111140 	call	811114 <__divsi3>
  801928:	1007883a 	mov	r3,r2
  80192c:	8405883a 	add	r2,r16,r16
  801930:	1085883a 	add	r2,r2,r2
  801934:	e13fe504 	addi	r4,fp,-108
  801938:	1105883a 	add	r2,r2,r4
  80193c:	10800504 	addi	r2,r2,20
  801940:	10c00015 	stw	r3,0(r2)
    gAvg[2] += (alt_16)(((alt_16)rawData[4] << 8) | rawData[5]) ;

  }

  // Get average of 200 values and store as average current readings
  for ( ii =0; ii < 3; ii = ii+1)
  801944:	e0bfe517 	ldw	r2,-108(fp)
  801948:	10800044 	addi	r2,r2,1
  80194c:	e0bfe515 	stw	r2,-108(fp)
  801950:	e0bfe517 	ldw	r2,-108(fp)
  801954:	108000d0 	cmplti	r2,r2,3
  801958:	103fd81e 	bne	r2,zero,8018bc <MPU9250SelfTest+0x3c4>
  {
    aAvg[ii] /= 100;
    gAvg[ii] /= 100;
  }
  I2C_Start(scl_base, sda_base);
  80195c:	e13ffe17 	ldw	r4,-8(fp)
  801960:	e17fff17 	ldw	r5,-4(fp)
  801964:	080bb280 	call	80bb28 <I2C_Start>


  // Configure the accelerometer for self-test
  // Enable self test on all three axes and set accelerometer range to +/- 2 g
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, ACCEL_CONFIG, 0xE0, 1);
  801968:	e0bfe643 	ldbu	r2,-103(fp)
  80196c:	11803fcc 	andi	r6,r2,255
  801970:	3180201c 	xori	r6,r6,128
  801974:	31bfe004 	addi	r6,r6,-128
  801978:	00803804 	movi	r2,224
  80197c:	d8800015 	stw	r2,0(sp)
  801980:	00800044 	movi	r2,1
  801984:	d8800115 	stw	r2,4(sp)
  801988:	e13ffe17 	ldw	r4,-8(fp)
  80198c:	e17fff17 	ldw	r5,-4(fp)
  801990:	01c00704 	movi	r7,28
  801994:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, GYRO_CONFIG, 0xF0, 1);
  801998:	e0bfe643 	ldbu	r2,-103(fp)
  80199c:	11803fcc 	andi	r6,r2,255
  8019a0:	3180201c 	xori	r6,r6,128
  8019a4:	31bfe004 	addi	r6,r6,-128
  8019a8:	00803c04 	movi	r2,240
  8019ac:	d8800015 	stw	r2,0(sp)
  8019b0:	00800044 	movi	r2,1
  8019b4:	d8800115 	stw	r2,4(sp)
  8019b8:	e13ffe17 	ldw	r4,-8(fp)
  8019bc:	e17fff17 	ldw	r5,-4(fp)
  8019c0:	01c006c4 	movi	r7,27
  8019c4:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>

  I2C_Stop(scl_base, sda_base);
  8019c8:	e13ffe17 	ldw	r4,-8(fp)
  8019cc:	e17fff17 	ldw	r5,-4(fp)
  8019d0:	080bb600 	call	80bb60 <I2C_Stop>
  OSTimeDlyHMSM(0, 0, 0, 25);  // Delay a while to let the device stabilize
  8019d4:	0009883a 	mov	r4,zero
  8019d8:	000b883a 	mov	r5,zero
  8019dc:	000d883a 	mov	r6,zero
  8019e0:	01c00644 	movi	r7,25
  8019e4:	08236940 	call	823694 <OSTimeDlyHMSM>


  // Get average self-test values of gyro and acclerometer
  for ( ii =0; ii < 100; ii = ii+1)
  8019e8:	e03fe515 	stw	zero,-108(fp)
  8019ec:	00007906 	br	801bd4 <MPU9250SelfTest+0x6dc>
  {
	I2C_Start(scl_base, sda_base);
  8019f0:	e13ffe17 	ldw	r4,-8(fp)
  8019f4:	e17fff17 	ldw	r5,-4(fp)
  8019f8:	080bb280 	call	80bb28 <I2C_Start>
    // Read the six raw data registers into data array
	I2C_ReadFromDeviceRegister(scl_base, sda_base, deviceAddress, ACCEL_XOUT_H, &rawData[0], 6, true);
  8019fc:	e0bfe643 	ldbu	r2,-103(fp)
  801a00:	11803fcc 	andi	r6,r2,255
  801a04:	3180201c 	xori	r6,r6,128
  801a08:	31bfe004 	addi	r6,r6,-128
  801a0c:	e0bfe684 	addi	r2,fp,-102
  801a10:	d8800015 	stw	r2,0(sp)
  801a14:	00800184 	movi	r2,6
  801a18:	d8800115 	stw	r2,4(sp)
  801a1c:	00800044 	movi	r2,1
  801a20:	d8800215 	stw	r2,8(sp)
  801a24:	e13ffe17 	ldw	r4,-8(fp)
  801a28:	e17fff17 	ldw	r5,-4(fp)
  801a2c:	01c00ec4 	movi	r7,59
  801a30:	080bf780 	call	80bf78 <I2C_ReadFromDeviceRegister>
    I2C_Stop(scl_base, sda_base);
  801a34:	e13ffe17 	ldw	r4,-8(fp)
  801a38:	e17fff17 	ldw	r5,-4(fp)
  801a3c:	080bb600 	call	80bb60 <I2C_Stop>

	// Turn the MSB and LSB into a signed 16-bit value
    aSTAvg[0] += (alt_16)(((alt_16)rawData[0] << 8) | rawData[1]) ;
  801a40:	e13ff017 	ldw	r4,-64(fp)
  801a44:	e0bfe683 	ldbu	r2,-102(fp)
  801a48:	10803fcc 	andi	r2,r2,255
  801a4c:	1004923a 	slli	r2,r2,8
  801a50:	1007883a 	mov	r3,r2
  801a54:	e0bfe6c3 	ldbu	r2,-101(fp)
  801a58:	10803fcc 	andi	r2,r2,255
  801a5c:	1884b03a 	or	r2,r3,r2
  801a60:	10bfffcc 	andi	r2,r2,65535
  801a64:	10a0001c 	xori	r2,r2,32768
  801a68:	10a00004 	addi	r2,r2,-32768
  801a6c:	2085883a 	add	r2,r4,r2
  801a70:	e0bff015 	stw	r2,-64(fp)
    aSTAvg[1] += (alt_16)(((alt_16)rawData[2] << 8) | rawData[3]) ;
  801a74:	e13ff117 	ldw	r4,-60(fp)
  801a78:	e0bfe703 	ldbu	r2,-100(fp)
  801a7c:	10803fcc 	andi	r2,r2,255
  801a80:	1004923a 	slli	r2,r2,8
  801a84:	1007883a 	mov	r3,r2
  801a88:	e0bfe743 	ldbu	r2,-99(fp)
  801a8c:	10803fcc 	andi	r2,r2,255
  801a90:	1884b03a 	or	r2,r3,r2
  801a94:	10bfffcc 	andi	r2,r2,65535
  801a98:	10a0001c 	xori	r2,r2,32768
  801a9c:	10a00004 	addi	r2,r2,-32768
  801aa0:	2085883a 	add	r2,r4,r2
  801aa4:	e0bff115 	stw	r2,-60(fp)
    aSTAvg[2] += (alt_16)(((alt_16)rawData[4] << 8) | rawData[5]) ;
  801aa8:	e13ff217 	ldw	r4,-56(fp)
  801aac:	e0bfe783 	ldbu	r2,-98(fp)
  801ab0:	10803fcc 	andi	r2,r2,255
  801ab4:	1004923a 	slli	r2,r2,8
  801ab8:	1007883a 	mov	r3,r2
  801abc:	e0bfe7c3 	ldbu	r2,-97(fp)
  801ac0:	10803fcc 	andi	r2,r2,255
  801ac4:	1884b03a 	or	r2,r3,r2
  801ac8:	10bfffcc 	andi	r2,r2,65535
  801acc:	10a0001c 	xori	r2,r2,32768
  801ad0:	10a00004 	addi	r2,r2,-32768
  801ad4:	2085883a 	add	r2,r4,r2
  801ad8:	e0bff215 	stw	r2,-56(fp)

    I2C_Start(scl_base, sda_base);
  801adc:	e13ffe17 	ldw	r4,-8(fp)
  801ae0:	e17fff17 	ldw	r5,-4(fp)
  801ae4:	080bb280 	call	80bb28 <I2C_Start>
    // Read the six raw data registers sequentially into data array
	I2C_ReadFromDeviceRegister(scl_base, sda_base, deviceAddress, GYRO_XOUT_H, &rawData[0], 6, true);
  801ae8:	e0bfe643 	ldbu	r2,-103(fp)
  801aec:	11803fcc 	andi	r6,r2,255
  801af0:	3180201c 	xori	r6,r6,128
  801af4:	31bfe004 	addi	r6,r6,-128
  801af8:	e0bfe684 	addi	r2,fp,-102
  801afc:	d8800015 	stw	r2,0(sp)
  801b00:	00800184 	movi	r2,6
  801b04:	d8800115 	stw	r2,4(sp)
  801b08:	00800044 	movi	r2,1
  801b0c:	d8800215 	stw	r2,8(sp)
  801b10:	e13ffe17 	ldw	r4,-8(fp)
  801b14:	e17fff17 	ldw	r5,-4(fp)
  801b18:	01c010c4 	movi	r7,67
  801b1c:	080bf780 	call	80bf78 <I2C_ReadFromDeviceRegister>
    I2C_Stop(scl_base, sda_base);
  801b20:	e13ffe17 	ldw	r4,-8(fp)
  801b24:	e17fff17 	ldw	r5,-4(fp)
  801b28:	080bb600 	call	80bb60 <I2C_Stop>

	// Turn the MSB and LSB into a signed 16-bit value
    gSTAvg[0] += (alt_16)(((alt_16)rawData[0] << 8) | rawData[1]) ;
  801b2c:	e13ff317 	ldw	r4,-52(fp)
  801b30:	e0bfe683 	ldbu	r2,-102(fp)
  801b34:	10803fcc 	andi	r2,r2,255
  801b38:	1004923a 	slli	r2,r2,8
  801b3c:	1007883a 	mov	r3,r2
  801b40:	e0bfe6c3 	ldbu	r2,-101(fp)
  801b44:	10803fcc 	andi	r2,r2,255
  801b48:	1884b03a 	or	r2,r3,r2
  801b4c:	10bfffcc 	andi	r2,r2,65535
  801b50:	10a0001c 	xori	r2,r2,32768
  801b54:	10a00004 	addi	r2,r2,-32768
  801b58:	2085883a 	add	r2,r4,r2
  801b5c:	e0bff315 	stw	r2,-52(fp)
    gSTAvg[1] += (alt_16)(((alt_16)rawData[2] << 8) | rawData[3]) ;
  801b60:	e13ff417 	ldw	r4,-48(fp)
  801b64:	e0bfe703 	ldbu	r2,-100(fp)
  801b68:	10803fcc 	andi	r2,r2,255
  801b6c:	1004923a 	slli	r2,r2,8
  801b70:	1007883a 	mov	r3,r2
  801b74:	e0bfe743 	ldbu	r2,-99(fp)
  801b78:	10803fcc 	andi	r2,r2,255
  801b7c:	1884b03a 	or	r2,r3,r2
  801b80:	10bfffcc 	andi	r2,r2,65535
  801b84:	10a0001c 	xori	r2,r2,32768
  801b88:	10a00004 	addi	r2,r2,-32768
  801b8c:	2085883a 	add	r2,r4,r2
  801b90:	e0bff415 	stw	r2,-48(fp)
    gSTAvg[2] += (alt_16)(((alt_16)rawData[4] << 8) | rawData[5]) ;
  801b94:	e13ff517 	ldw	r4,-44(fp)
  801b98:	e0bfe783 	ldbu	r2,-98(fp)
  801b9c:	10803fcc 	andi	r2,r2,255
  801ba0:	1004923a 	slli	r2,r2,8
  801ba4:	1007883a 	mov	r3,r2
  801ba8:	e0bfe7c3 	ldbu	r2,-97(fp)
  801bac:	10803fcc 	andi	r2,r2,255
  801bb0:	1884b03a 	or	r2,r3,r2
  801bb4:	10bfffcc 	andi	r2,r2,65535
  801bb8:	10a0001c 	xori	r2,r2,32768
  801bbc:	10a00004 	addi	r2,r2,-32768
  801bc0:	2085883a 	add	r2,r4,r2
  801bc4:	e0bff515 	stw	r2,-44(fp)
  I2C_Stop(scl_base, sda_base);
  OSTimeDlyHMSM(0, 0, 0, 25);  // Delay a while to let the device stabilize


  // Get average self-test values of gyro and acclerometer
  for ( ii =0; ii < 100; ii = ii+1)
  801bc8:	e0bfe517 	ldw	r2,-108(fp)
  801bcc:	10800044 	addi	r2,r2,1
  801bd0:	e0bfe515 	stw	r2,-108(fp)
  801bd4:	e0bfe517 	ldw	r2,-108(fp)
  801bd8:	10801910 	cmplti	r2,r2,100
  801bdc:	103f841e 	bne	r2,zero,8019f0 <MPU9250SelfTest+0x4f8>
    gSTAvg[1] += (alt_16)(((alt_16)rawData[2] << 8) | rawData[3]) ;
    gSTAvg[2] += (alt_16)(((alt_16)rawData[4] << 8) | rawData[5]) ;
  }

  // Get average of 200 values and store as average self-test readings
  for ( ii =0; ii < 3; ii = ii+1)
  801be0:	e03fe515 	stw	zero,-108(fp)
  801be4:	00002506 	br	801c7c <MPU9250SelfTest+0x784>
  {
    aSTAvg[ii] /= 100;
  801be8:	e43fe517 	ldw	r16,-108(fp)
  801bec:	e0bfe517 	ldw	r2,-108(fp)
  801bf0:	1085883a 	add	r2,r2,r2
  801bf4:	1085883a 	add	r2,r2,r2
  801bf8:	e0ffe504 	addi	r3,fp,-108
  801bfc:	10c5883a 	add	r2,r2,r3
  801c00:	10800b04 	addi	r2,r2,44
  801c04:	11000017 	ldw	r4,0(r2)
  801c08:	01401904 	movi	r5,100
  801c0c:	08111140 	call	811114 <__divsi3>
  801c10:	1007883a 	mov	r3,r2
  801c14:	8405883a 	add	r2,r16,r16
  801c18:	1085883a 	add	r2,r2,r2
  801c1c:	e13fe504 	addi	r4,fp,-108
  801c20:	1105883a 	add	r2,r2,r4
  801c24:	10800b04 	addi	r2,r2,44
  801c28:	10c00015 	stw	r3,0(r2)
    gSTAvg[ii] /= 100;
  801c2c:	e43fe517 	ldw	r16,-108(fp)
  801c30:	e0bfe517 	ldw	r2,-108(fp)
  801c34:	1085883a 	add	r2,r2,r2
  801c38:	1085883a 	add	r2,r2,r2
  801c3c:	e0ffe504 	addi	r3,fp,-108
  801c40:	10c5883a 	add	r2,r2,r3
  801c44:	10800e04 	addi	r2,r2,56
  801c48:	11000017 	ldw	r4,0(r2)
  801c4c:	01401904 	movi	r5,100
  801c50:	08111140 	call	811114 <__divsi3>
  801c54:	1007883a 	mov	r3,r2
  801c58:	8405883a 	add	r2,r16,r16
  801c5c:	1085883a 	add	r2,r2,r2
  801c60:	e13fe504 	addi	r4,fp,-108
  801c64:	1105883a 	add	r2,r2,r4
  801c68:	10800e04 	addi	r2,r2,56
  801c6c:	10c00015 	stw	r3,0(r2)
    gSTAvg[1] += (alt_16)(((alt_16)rawData[2] << 8) | rawData[3]) ;
    gSTAvg[2] += (alt_16)(((alt_16)rawData[4] << 8) | rawData[5]) ;
  }

  // Get average of 200 values and store as average self-test readings
  for ( ii =0; ii < 3; ii = ii+1)
  801c70:	e0bfe517 	ldw	r2,-108(fp)
  801c74:	10800044 	addi	r2,r2,1
  801c78:	e0bfe515 	stw	r2,-108(fp)
  801c7c:	e0bfe517 	ldw	r2,-108(fp)
  801c80:	108000d0 	cmplti	r2,r2,3
  801c84:	103fd81e 	bne	r2,zero,801be8 <MPU9250SelfTest+0x6f0>
  {
    aSTAvg[ii] /= 100;
    gSTAvg[ii] /= 100;
  }

  I2C_Start(scl_base, sda_base);
  801c88:	e13ffe17 	ldw	r4,-8(fp)
  801c8c:	e17fff17 	ldw	r5,-4(fp)
  801c90:	080bb280 	call	80bb28 <I2C_Start>

  // Configure the gyro and accelerometer for normal operation
  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, ACCEL_CONFIG, 0x00, 1);
  801c94:	e0bfe643 	ldbu	r2,-103(fp)
  801c98:	11803fcc 	andi	r6,r2,255
  801c9c:	3180201c 	xori	r6,r6,128
  801ca0:	31bfe004 	addi	r6,r6,-128
  801ca4:	d8000015 	stw	zero,0(sp)
  801ca8:	00800044 	movi	r2,1
  801cac:	d8800115 	stw	r2,4(sp)
  801cb0:	e13ffe17 	ldw	r4,-8(fp)
  801cb4:	e17fff17 	ldw	r5,-4(fp)
  801cb8:	01c00704 	movi	r7,28
  801cbc:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  I2C_Stop(scl_base, sda_base);
  801cc0:	e13ffe17 	ldw	r4,-8(fp)
  801cc4:	e17fff17 	ldw	r5,-4(fp)
  801cc8:	080bb600 	call	80bb60 <I2C_Stop>
  I2C_Start(scl_base, sda_base);
  801ccc:	e13ffe17 	ldw	r4,-8(fp)
  801cd0:	e17fff17 	ldw	r5,-4(fp)
  801cd4:	080bb280 	call	80bb28 <I2C_Start>

  I2C_WriteToDeviceRegister(scl_base, sda_base, deviceAddress, GYRO_CONFIG, 0x10, 1);
  801cd8:	e0bfe643 	ldbu	r2,-103(fp)
  801cdc:	11803fcc 	andi	r6,r2,255
  801ce0:	3180201c 	xori	r6,r6,128
  801ce4:	31bfe004 	addi	r6,r6,-128
  801ce8:	00800404 	movi	r2,16
  801cec:	d8800015 	stw	r2,0(sp)
  801cf0:	00800044 	movi	r2,1
  801cf4:	d8800115 	stw	r2,4(sp)
  801cf8:	e13ffe17 	ldw	r4,-8(fp)
  801cfc:	e17fff17 	ldw	r5,-4(fp)
  801d00:	01c006c4 	movi	r7,27
  801d04:	080bc900 	call	80bc90 <I2C_WriteToDeviceRegister>
  OSTimeDlyHMSM(0, 0, 0, 25);;  // Delay a while to let the device stabilize
  801d08:	0009883a 	mov	r4,zero
  801d0c:	000b883a 	mov	r5,zero
  801d10:	000d883a 	mov	r6,zero
  801d14:	01c00644 	movi	r7,25
  801d18:	08236940 	call	823694 <OSTimeDlyHMSM>

  // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
  // X-axis accel self-test results
  I2C_Stop(scl_base, sda_base);
  801d1c:	e13ffe17 	ldw	r4,-8(fp)
  801d20:	e17fff17 	ldw	r5,-4(fp)
  801d24:	080bb600 	call	80bb60 <I2C_Stop>
  I2C_Start(scl_base, sda_base);
  801d28:	e13ffe17 	ldw	r4,-8(fp)
  801d2c:	e17fff17 	ldw	r5,-4(fp)
  801d30:	080bb280 	call	80bb28 <I2C_Start>
  I2C_ReadFromDeviceRegister(scl_base, sda_base, deviceAddress, SELF_TEST_X_ACCEL, &selfTest[0] , 1, true);
  801d34:	e0bfe643 	ldbu	r2,-103(fp)
  801d38:	11803fcc 	andi	r6,r2,255
  801d3c:	3180201c 	xori	r6,r6,128
  801d40:	31bfe004 	addi	r6,r6,-128
  801d44:	e0bfe804 	addi	r2,fp,-96
  801d48:	d8800015 	stw	r2,0(sp)
  801d4c:	00800044 	movi	r2,1
  801d50:	d8800115 	stw	r2,4(sp)
  801d54:	00800044 	movi	r2,1
  801d58:	d8800215 	stw	r2,8(sp)
  801d5c:	e13ffe17 	ldw	r4,-8(fp)
  801d60:	e17fff17 	ldw	r5,-4(fp)
  801d64:	01c00344 	movi	r7,13
  801d68:	080bf780 	call	80bf78 <I2C_ReadFromDeviceRegister>
  // Y-axis accel self-test results
  I2C_Stop(scl_base, sda_base);
  801d6c:	e13ffe17 	ldw	r4,-8(fp)
  801d70:	e17fff17 	ldw	r5,-4(fp)
  801d74:	080bb600 	call	80bb60 <I2C_Stop>
  I2C_Start(scl_base, sda_base);
  801d78:	e13ffe17 	ldw	r4,-8(fp)
  801d7c:	e17fff17 	ldw	r5,-4(fp)
  801d80:	080bb280 	call	80bb28 <I2C_Start>
  I2C_ReadFromDeviceRegister(scl_base, sda_base, deviceAddress, SELF_TEST_Y_ACCEL, &selfTest[1] , 1, true);
  801d84:	e0bfe643 	ldbu	r2,-103(fp)
  801d88:	11803fcc 	andi	r6,r2,255
  801d8c:	3180201c 	xori	r6,r6,128
  801d90:	31bfe004 	addi	r6,r6,-128
  801d94:	e0bfe804 	addi	r2,fp,-96
  801d98:	10800044 	addi	r2,r2,1
  801d9c:	d8800015 	stw	r2,0(sp)
  801da0:	00800044 	movi	r2,1
  801da4:	d8800115 	stw	r2,4(sp)
  801da8:	00800044 	movi	r2,1
  801dac:	d8800215 	stw	r2,8(sp)
  801db0:	e13ffe17 	ldw	r4,-8(fp)
  801db4:	e17fff17 	ldw	r5,-4(fp)
  801db8:	01c00384 	movi	r7,14
  801dbc:	080bf780 	call	80bf78 <I2C_ReadFromDeviceRegister>
  // Z-axis accel self-test results
  I2C_Stop(scl_base, sda_base);
  801dc0:	e13ffe17 	ldw	r4,-8(fp)
  801dc4:	e17fff17 	ldw	r5,-4(fp)
  801dc8:	080bb600 	call	80bb60 <I2C_Stop>
  I2C_Start(scl_base, sda_base);
  801dcc:	e13ffe17 	ldw	r4,-8(fp)
  801dd0:	e17fff17 	ldw	r5,-4(fp)
  801dd4:	080bb280 	call	80bb28 <I2C_Start>
  I2C_ReadFromDeviceRegister(scl_base, sda_base, deviceAddress, SELF_TEST_Z_ACCEL, &selfTest[2] , 1, true);
  801dd8:	e0bfe643 	ldbu	r2,-103(fp)
  801ddc:	11803fcc 	andi	r6,r2,255
  801de0:	3180201c 	xori	r6,r6,128
  801de4:	31bfe004 	addi	r6,r6,-128
  801de8:	e0bfe804 	addi	r2,fp,-96
  801dec:	10800084 	addi	r2,r2,2
  801df0:	d8800015 	stw	r2,0(sp)
  801df4:	00800044 	movi	r2,1
  801df8:	d8800115 	stw	r2,4(sp)
  801dfc:	00800044 	movi	r2,1
  801e00:	d8800215 	stw	r2,8(sp)
  801e04:	e13ffe17 	ldw	r4,-8(fp)
  801e08:	e17fff17 	ldw	r5,-4(fp)
  801e0c:	01c003c4 	movi	r7,15
  801e10:	080bf780 	call	80bf78 <I2C_ReadFromDeviceRegister>
  // X-axis gyro self-test results
  I2C_Stop(scl_base, sda_base);
  801e14:	e13ffe17 	ldw	r4,-8(fp)
  801e18:	e17fff17 	ldw	r5,-4(fp)
  801e1c:	080bb600 	call	80bb60 <I2C_Stop>
  I2C_Start(scl_base, sda_base);
  801e20:	e13ffe17 	ldw	r4,-8(fp)
  801e24:	e17fff17 	ldw	r5,-4(fp)
  801e28:	080bb280 	call	80bb28 <I2C_Start>
  I2C_ReadFromDeviceRegister(scl_base, sda_base, deviceAddress, SELF_TEST_X_GYRO, &selfTest[3] , 1, true);
  801e2c:	e0bfe643 	ldbu	r2,-103(fp)
  801e30:	11803fcc 	andi	r6,r2,255
  801e34:	3180201c 	xori	r6,r6,128
  801e38:	31bfe004 	addi	r6,r6,-128
  801e3c:	e0bfe804 	addi	r2,fp,-96
  801e40:	108000c4 	addi	r2,r2,3
  801e44:	d8800015 	stw	r2,0(sp)
  801e48:	00800044 	movi	r2,1
  801e4c:	d8800115 	stw	r2,4(sp)
  801e50:	00800044 	movi	r2,1
  801e54:	d8800215 	stw	r2,8(sp)
  801e58:	e13ffe17 	ldw	r4,-8(fp)
  801e5c:	e17fff17 	ldw	r5,-4(fp)
  801e60:	000f883a 	mov	r7,zero
  801e64:	080bf780 	call	80bf78 <I2C_ReadFromDeviceRegister>
  // Y-axis gyro self-test results
  I2C_Stop(scl_base, sda_base);
  801e68:	e13ffe17 	ldw	r4,-8(fp)
  801e6c:	e17fff17 	ldw	r5,-4(fp)
  801e70:	080bb600 	call	80bb60 <I2C_Stop>
  I2C_Start(scl_base, sda_base);
  801e74:	e13ffe17 	ldw	r4,-8(fp)
  801e78:	e17fff17 	ldw	r5,-4(fp)
  801e7c:	080bb280 	call	80bb28 <I2C_Start>
  I2C_ReadFromDeviceRegister(scl_base, sda_base, deviceAddress, SELF_TEST_Y_GYRO, &selfTest[4] , 1, true);
  801e80:	e0bfe643 	ldbu	r2,-103(fp)
  801e84:	11803fcc 	andi	r6,r2,255
  801e88:	3180201c 	xori	r6,r6,128
  801e8c:	31bfe004 	addi	r6,r6,-128
  801e90:	e0bfe804 	addi	r2,fp,-96
  801e94:	10800104 	addi	r2,r2,4
  801e98:	d8800015 	stw	r2,0(sp)
  801e9c:	00800044 	movi	r2,1
  801ea0:	d8800115 	stw	r2,4(sp)
  801ea4:	00800044 	movi	r2,1
  801ea8:	d8800215 	stw	r2,8(sp)
  801eac:	e13ffe17 	ldw	r4,-8(fp)
  801eb0:	e17fff17 	ldw	r5,-4(fp)
  801eb4:	01c00044 	movi	r7,1
  801eb8:	080bf780 	call	80bf78 <I2C_ReadFromDeviceRegister>
  // Z-axis gyro self-test results
  I2C_Stop(scl_base, sda_base);
  801ebc:	e13ffe17 	ldw	r4,-8(fp)
  801ec0:	e17fff17 	ldw	r5,-4(fp)
  801ec4:	080bb600 	call	80bb60 <I2C_Stop>
  I2C_Start(scl_base, sda_base);
  801ec8:	e13ffe17 	ldw	r4,-8(fp)
  801ecc:	e17fff17 	ldw	r5,-4(fp)
  801ed0:	080bb280 	call	80bb28 <I2C_Start>
  I2C_ReadFromDeviceRegister(scl_base, sda_base, deviceAddress, SELF_TEST_Z_GYRO, &selfTest[5] , 1, true);
  801ed4:	e0bfe643 	ldbu	r2,-103(fp)
  801ed8:	11803fcc 	andi	r6,r2,255
  801edc:	3180201c 	xori	r6,r6,128
  801ee0:	31bfe004 	addi	r6,r6,-128
  801ee4:	e0bfe804 	addi	r2,fp,-96
  801ee8:	10800144 	addi	r2,r2,5
  801eec:	d8800015 	stw	r2,0(sp)
  801ef0:	00800044 	movi	r2,1
  801ef4:	d8800115 	stw	r2,4(sp)
  801ef8:	00800044 	movi	r2,1
  801efc:	d8800215 	stw	r2,8(sp)
  801f00:	e13ffe17 	ldw	r4,-8(fp)
  801f04:	e17fff17 	ldw	r5,-4(fp)
  801f08:	01c00084 	movi	r7,2
  801f0c:	080bf780 	call	80bf78 <I2C_ReadFromDeviceRegister>

  I2C_Stop(scl_base, sda_base);
  801f10:	e13ffe17 	ldw	r4,-8(fp)
  801f14:	e17fff17 	ldw	r5,-4(fp)
  801f18:	080bb600 	call	80bb60 <I2C_Stop>


  // Retrieve factory self-test value from self-test code reads
  // FT[Xa] factory trim calculation
  factoryTrim[0] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[0] - 1.0) ));
  801f1c:	e0ffe603 	ldbu	r3,-104(fp)
  801f20:	00828f04 	movi	r2,2620
  801f24:	10c8983a 	sll	r4,r2,r3
  801f28:	080ff800 	call	80ff80 <__floatsisf>
  801f2c:	1009883a 	mov	r4,r2
  801f30:	08100180 	call	810018 <__extendsfdf2>
  801f34:	1021883a 	mov	r16,r2
  801f38:	1823883a 	mov	r17,r3
  801f3c:	e0bfe803 	ldbu	r2,-96(fp)
  801f40:	11003fcc 	andi	r4,r2,255
  801f44:	081006c0 	call	81006c <__floatunsisf>
  801f48:	1009883a 	mov	r4,r2
  801f4c:	08100180 	call	810018 <__extendsfdf2>
  801f50:	100b883a 	mov	r5,r2
  801f54:	180d883a 	mov	r6,r3
  801f58:	2809883a 	mov	r4,r5
  801f5c:	300b883a 	mov	r5,r6
  801f60:	000d883a 	mov	r6,zero
  801f64:	01cffc34 	movhi	r7,16368
  801f68:	081053c0 	call	81053c <__subdf3>
  801f6c:	1009883a 	mov	r4,r2
  801f70:	180b883a 	mov	r5,r3
  801f74:	2005883a 	mov	r2,r4
  801f78:	2807883a 	mov	r3,r5
  801f7c:	0130a3f4 	movhi	r4,49807
  801f80:	21170a44 	addi	r4,r4,23593
  801f84:	014ffc34 	movhi	r5,16368
  801f88:	294a3d44 	addi	r5,r5,10485
  801f8c:	100d883a 	mov	r6,r2
  801f90:	180f883a 	mov	r7,r3
  801f94:	080d9a40 	call	80d9a4 <pow>
  801f98:	1009883a 	mov	r4,r2
  801f9c:	180b883a 	mov	r5,r3
  801fa0:	2005883a 	mov	r2,r4
  801fa4:	2807883a 	mov	r3,r5
  801fa8:	8009883a 	mov	r4,r16
  801fac:	880b883a 	mov	r5,r17
  801fb0:	100d883a 	mov	r6,r2
  801fb4:	180f883a 	mov	r7,r3
  801fb8:	08106300 	call	810630 <__muldf3>
  801fbc:	1009883a 	mov	r4,r2
  801fc0:	180b883a 	mov	r5,r3
  801fc4:	2005883a 	mov	r2,r4
  801fc8:	2807883a 	mov	r3,r5
  801fcc:	1009883a 	mov	r4,r2
  801fd0:	180b883a 	mov	r5,r3
  801fd4:	08110240 	call	811024 <__truncdfsf2>
  801fd8:	e0bff615 	stw	r2,-40(fp)
  // FT[Ya] factory trim calculation
  factoryTrim[1] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[1] - 1.0) ));
  801fdc:	e0ffe603 	ldbu	r3,-104(fp)
  801fe0:	00828f04 	movi	r2,2620
  801fe4:	10c8983a 	sll	r4,r2,r3
  801fe8:	080ff800 	call	80ff80 <__floatsisf>
  801fec:	1009883a 	mov	r4,r2
  801ff0:	08100180 	call	810018 <__extendsfdf2>
  801ff4:	1021883a 	mov	r16,r2
  801ff8:	1823883a 	mov	r17,r3
  801ffc:	e0bfe843 	ldbu	r2,-95(fp)
  802000:	11003fcc 	andi	r4,r2,255
  802004:	081006c0 	call	81006c <__floatunsisf>
  802008:	1009883a 	mov	r4,r2
  80200c:	08100180 	call	810018 <__extendsfdf2>
  802010:	100b883a 	mov	r5,r2
  802014:	180d883a 	mov	r6,r3
  802018:	2809883a 	mov	r4,r5
  80201c:	300b883a 	mov	r5,r6
  802020:	000d883a 	mov	r6,zero
  802024:	01cffc34 	movhi	r7,16368
  802028:	081053c0 	call	81053c <__subdf3>
  80202c:	1009883a 	mov	r4,r2
  802030:	180b883a 	mov	r5,r3
  802034:	2005883a 	mov	r2,r4
  802038:	2807883a 	mov	r3,r5
  80203c:	0130a3f4 	movhi	r4,49807
  802040:	21170a44 	addi	r4,r4,23593
  802044:	014ffc34 	movhi	r5,16368
  802048:	294a3d44 	addi	r5,r5,10485
  80204c:	100d883a 	mov	r6,r2
  802050:	180f883a 	mov	r7,r3
  802054:	080d9a40 	call	80d9a4 <pow>
  802058:	100f883a 	mov	r7,r2
  80205c:	1811883a 	mov	r8,r3
  802060:	8009883a 	mov	r4,r16
  802064:	880b883a 	mov	r5,r17
  802068:	380d883a 	mov	r6,r7
  80206c:	400f883a 	mov	r7,r8
  802070:	08106300 	call	810630 <__muldf3>
  802074:	1009883a 	mov	r4,r2
  802078:	180b883a 	mov	r5,r3
  80207c:	2005883a 	mov	r2,r4
  802080:	2807883a 	mov	r3,r5
  802084:	1009883a 	mov	r4,r2
  802088:	180b883a 	mov	r5,r3
  80208c:	08110240 	call	811024 <__truncdfsf2>
  802090:	e0bff715 	stw	r2,-36(fp)
  // FT[Za] factory trim calculation
  factoryTrim[2] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[2] - 1.0) ));
  802094:	e0ffe603 	ldbu	r3,-104(fp)
  802098:	00828f04 	movi	r2,2620
  80209c:	10c8983a 	sll	r4,r2,r3
  8020a0:	080ff800 	call	80ff80 <__floatsisf>
  8020a4:	1009883a 	mov	r4,r2
  8020a8:	08100180 	call	810018 <__extendsfdf2>
  8020ac:	1021883a 	mov	r16,r2
  8020b0:	1823883a 	mov	r17,r3
  8020b4:	e0bfe883 	ldbu	r2,-94(fp)
  8020b8:	11003fcc 	andi	r4,r2,255
  8020bc:	081006c0 	call	81006c <__floatunsisf>
  8020c0:	1009883a 	mov	r4,r2
  8020c4:	08100180 	call	810018 <__extendsfdf2>
  8020c8:	100b883a 	mov	r5,r2
  8020cc:	180d883a 	mov	r6,r3
  8020d0:	2809883a 	mov	r4,r5
  8020d4:	300b883a 	mov	r5,r6
  8020d8:	000d883a 	mov	r6,zero
  8020dc:	01cffc34 	movhi	r7,16368
  8020e0:	081053c0 	call	81053c <__subdf3>
  8020e4:	1009883a 	mov	r4,r2
  8020e8:	180b883a 	mov	r5,r3
  8020ec:	2005883a 	mov	r2,r4
  8020f0:	2807883a 	mov	r3,r5
  8020f4:	0130a3f4 	movhi	r4,49807
  8020f8:	21170a44 	addi	r4,r4,23593
  8020fc:	014ffc34 	movhi	r5,16368
  802100:	294a3d44 	addi	r5,r5,10485
  802104:	100d883a 	mov	r6,r2
  802108:	180f883a 	mov	r7,r3
  80210c:	080d9a40 	call	80d9a4 <pow>
  802110:	100f883a 	mov	r7,r2
  802114:	1811883a 	mov	r8,r3
  802118:	8009883a 	mov	r4,r16
  80211c:	880b883a 	mov	r5,r17
  802120:	380d883a 	mov	r6,r7
  802124:	400f883a 	mov	r7,r8
  802128:	08106300 	call	810630 <__muldf3>
  80212c:	1009883a 	mov	r4,r2
  802130:	180b883a 	mov	r5,r3
  802134:	2005883a 	mov	r2,r4
  802138:	2807883a 	mov	r3,r5
  80213c:	1009883a 	mov	r4,r2
  802140:	180b883a 	mov	r5,r3
  802144:	08110240 	call	811024 <__truncdfsf2>
  802148:	e0bff815 	stw	r2,-32(fp)
  // FT[Xg] factory trim calculation
  factoryTrim[3] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[3] - 1.0) ));
  80214c:	e0ffe603 	ldbu	r3,-104(fp)
  802150:	00828f04 	movi	r2,2620
  802154:	10c8983a 	sll	r4,r2,r3
  802158:	080ff800 	call	80ff80 <__floatsisf>
  80215c:	1009883a 	mov	r4,r2
  802160:	08100180 	call	810018 <__extendsfdf2>
  802164:	1021883a 	mov	r16,r2
  802168:	1823883a 	mov	r17,r3
  80216c:	e0bfe8c3 	ldbu	r2,-93(fp)
  802170:	11003fcc 	andi	r4,r2,255
  802174:	081006c0 	call	81006c <__floatunsisf>
  802178:	1009883a 	mov	r4,r2
  80217c:	08100180 	call	810018 <__extendsfdf2>
  802180:	100b883a 	mov	r5,r2
  802184:	180d883a 	mov	r6,r3
  802188:	2809883a 	mov	r4,r5
  80218c:	300b883a 	mov	r5,r6
  802190:	000d883a 	mov	r6,zero
  802194:	01cffc34 	movhi	r7,16368
  802198:	081053c0 	call	81053c <__subdf3>
  80219c:	1009883a 	mov	r4,r2
  8021a0:	180b883a 	mov	r5,r3
  8021a4:	2005883a 	mov	r2,r4
  8021a8:	2807883a 	mov	r3,r5
  8021ac:	0130a3f4 	movhi	r4,49807
  8021b0:	21170a44 	addi	r4,r4,23593
  8021b4:	014ffc34 	movhi	r5,16368
  8021b8:	294a3d44 	addi	r5,r5,10485
  8021bc:	100d883a 	mov	r6,r2
  8021c0:	180f883a 	mov	r7,r3
  8021c4:	080d9a40 	call	80d9a4 <pow>
  8021c8:	100f883a 	mov	r7,r2
  8021cc:	1811883a 	mov	r8,r3
  8021d0:	8009883a 	mov	r4,r16
  8021d4:	880b883a 	mov	r5,r17
  8021d8:	380d883a 	mov	r6,r7
  8021dc:	400f883a 	mov	r7,r8
  8021e0:	08106300 	call	810630 <__muldf3>
  8021e4:	1009883a 	mov	r4,r2
  8021e8:	180b883a 	mov	r5,r3
  8021ec:	2005883a 	mov	r2,r4
  8021f0:	2807883a 	mov	r3,r5
  8021f4:	1009883a 	mov	r4,r2
  8021f8:	180b883a 	mov	r5,r3
  8021fc:	08110240 	call	811024 <__truncdfsf2>
  802200:	e0bff915 	stw	r2,-28(fp)
  // FT[Yg] factory trim calculation
  factoryTrim[4] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[4] - 1.0) ));
  802204:	e0ffe603 	ldbu	r3,-104(fp)
  802208:	00828f04 	movi	r2,2620
  80220c:	10c8983a 	sll	r4,r2,r3
  802210:	080ff800 	call	80ff80 <__floatsisf>
  802214:	1009883a 	mov	r4,r2
  802218:	08100180 	call	810018 <__extendsfdf2>
  80221c:	1021883a 	mov	r16,r2
  802220:	1823883a 	mov	r17,r3
  802224:	e0bfe903 	ldbu	r2,-92(fp)
  802228:	11003fcc 	andi	r4,r2,255
  80222c:	081006c0 	call	81006c <__floatunsisf>
  802230:	1009883a 	mov	r4,r2
  802234:	08100180 	call	810018 <__extendsfdf2>
  802238:	100b883a 	mov	r5,r2
  80223c:	180d883a 	mov	r6,r3
  802240:	2809883a 	mov	r4,r5
  802244:	300b883a 	mov	r5,r6
  802248:	000d883a 	mov	r6,zero
  80224c:	01cffc34 	movhi	r7,16368
  802250:	081053c0 	call	81053c <__subdf3>
  802254:	1009883a 	mov	r4,r2
  802258:	180b883a 	mov	r5,r3
  80225c:	2005883a 	mov	r2,r4
  802260:	2807883a 	mov	r3,r5
  802264:	0130a3f4 	movhi	r4,49807
  802268:	21170a44 	addi	r4,r4,23593
  80226c:	014ffc34 	movhi	r5,16368
  802270:	294a3d44 	addi	r5,r5,10485
  802274:	100d883a 	mov	r6,r2
  802278:	180f883a 	mov	r7,r3
  80227c:	080d9a40 	call	80d9a4 <pow>
  802280:	100f883a 	mov	r7,r2
  802284:	1811883a 	mov	r8,r3
  802288:	8009883a 	mov	r4,r16
  80228c:	880b883a 	mov	r5,r17
  802290:	380d883a 	mov	r6,r7
  802294:	400f883a 	mov	r7,r8
  802298:	08106300 	call	810630 <__muldf3>
  80229c:	1009883a 	mov	r4,r2
  8022a0:	180b883a 	mov	r5,r3
  8022a4:	2005883a 	mov	r2,r4
  8022a8:	2807883a 	mov	r3,r5
  8022ac:	1009883a 	mov	r4,r2
  8022b0:	180b883a 	mov	r5,r3
  8022b4:	08110240 	call	811024 <__truncdfsf2>
  8022b8:	e0bffa15 	stw	r2,-24(fp)
  // FT[Zg] factory trim calculation
  factoryTrim[5] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[5] - 1.0) ));
  8022bc:	e0ffe603 	ldbu	r3,-104(fp)
  8022c0:	00828f04 	movi	r2,2620
  8022c4:	10c8983a 	sll	r4,r2,r3
  8022c8:	080ff800 	call	80ff80 <__floatsisf>
  8022cc:	1009883a 	mov	r4,r2
  8022d0:	08100180 	call	810018 <__extendsfdf2>
  8022d4:	1021883a 	mov	r16,r2
  8022d8:	1823883a 	mov	r17,r3
  8022dc:	e0bfe943 	ldbu	r2,-91(fp)
  8022e0:	11003fcc 	andi	r4,r2,255
  8022e4:	081006c0 	call	81006c <__floatunsisf>
  8022e8:	1009883a 	mov	r4,r2
  8022ec:	08100180 	call	810018 <__extendsfdf2>
  8022f0:	100b883a 	mov	r5,r2
  8022f4:	180d883a 	mov	r6,r3
  8022f8:	2809883a 	mov	r4,r5
  8022fc:	300b883a 	mov	r5,r6
  802300:	000d883a 	mov	r6,zero
  802304:	01cffc34 	movhi	r7,16368
  802308:	081053c0 	call	81053c <__subdf3>
  80230c:	1009883a 	mov	r4,r2
  802310:	180b883a 	mov	r5,r3
  802314:	2005883a 	mov	r2,r4
  802318:	2807883a 	mov	r3,r5
  80231c:	0130a3f4 	movhi	r4,49807
  802320:	21170a44 	addi	r4,r4,23593
  802324:	014ffc34 	movhi	r5,16368
  802328:	294a3d44 	addi	r5,r5,10485
  80232c:	100d883a 	mov	r6,r2
  802330:	180f883a 	mov	r7,r3
  802334:	080d9a40 	call	80d9a4 <pow>
  802338:	100f883a 	mov	r7,r2
  80233c:	1811883a 	mov	r8,r3
  802340:	8009883a 	mov	r4,r16
  802344:	880b883a 	mov	r5,r17
  802348:	380d883a 	mov	r6,r7
  80234c:	400f883a 	mov	r7,r8
  802350:	08106300 	call	810630 <__muldf3>
  802354:	1009883a 	mov	r4,r2
  802358:	180b883a 	mov	r5,r3
  80235c:	2005883a 	mov	r2,r4
  802360:	2807883a 	mov	r3,r5
  802364:	1009883a 	mov	r4,r2
  802368:	180b883a 	mov	r5,r3
  80236c:	08110240 	call	811024 <__truncdfsf2>
  802370:	e0bffb15 	stw	r2,-20(fp)

  // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim
  // of the Self-Test Response
  // To get percent, must multiply by 100
  for ( ii =0; ii < 3; ii = ii+1)
  802374:	e03fe515 	stw	zero,-108(fp)
  802378:	00004f06 	br	8024b8 <MPU9250SelfTest+0xfc0>
  {
	//printf("aSTAvg = %f\n",(float)aSTAvg[ii]);
	//printf("aAvg = %f\n",(float)aAvg[ii]);
	//printf("factoryTrim = %f\n",(float)factoryTrim[ii]);
    // Report percent differences
    destination[ii] = 100.0 * (((float)(aSTAvg[ii] - aAvg[ii])) / factoryTrim[ii]);
  80237c:	e0bfe517 	ldw	r2,-108(fp)
  802380:	1085883a 	add	r2,r2,r2
  802384:	1085883a 	add	r2,r2,r2
  802388:	1007883a 	mov	r3,r2
  80238c:	e0bffd17 	ldw	r2,-12(fp)
  802390:	18a1883a 	add	r16,r3,r2
  802394:	e0bfe517 	ldw	r2,-108(fp)
  802398:	1085883a 	add	r2,r2,r2
  80239c:	1085883a 	add	r2,r2,r2
  8023a0:	e0ffe504 	addi	r3,fp,-108
  8023a4:	10c5883a 	add	r2,r2,r3
  8023a8:	10800b04 	addi	r2,r2,44
  8023ac:	10c00017 	ldw	r3,0(r2)
  8023b0:	e0bfe517 	ldw	r2,-108(fp)
  8023b4:	1085883a 	add	r2,r2,r2
  8023b8:	1085883a 	add	r2,r2,r2
  8023bc:	e13fe504 	addi	r4,fp,-108
  8023c0:	1105883a 	add	r2,r2,r4
  8023c4:	10800804 	addi	r2,r2,32
  8023c8:	10800017 	ldw	r2,0(r2)
  8023cc:	1889c83a 	sub	r4,r3,r2
  8023d0:	080ff800 	call	80ff80 <__floatsisf>
  8023d4:	1007883a 	mov	r3,r2
  8023d8:	e0bfe517 	ldw	r2,-108(fp)
  8023dc:	1085883a 	add	r2,r2,r2
  8023e0:	1085883a 	add	r2,r2,r2
  8023e4:	e13fe504 	addi	r4,fp,-108
  8023e8:	1105883a 	add	r2,r2,r4
  8023ec:	10801104 	addi	r2,r2,68
  8023f0:	10800017 	ldw	r2,0(r2)
  8023f4:	1809883a 	mov	r4,r3
  8023f8:	100b883a 	mov	r5,r2
  8023fc:	080fd1c0 	call	80fd1c <__divsf3>
  802400:	1009883a 	mov	r4,r2
  802404:	0150b234 	movhi	r5,17096
  802408:	080fb3c0 	call	80fb3c <__mulsf3>
  80240c:	80800015 	stw	r2,0(r16)
    // Report percent differences
    destination[ii+3] = 100.0*(((float)(gSTAvg[ii] - gAvg[ii]))/factoryTrim[ii+3]);
  802410:	e0bfe517 	ldw	r2,-108(fp)
  802414:	1085883a 	add	r2,r2,r2
  802418:	1085883a 	add	r2,r2,r2
  80241c:	1007883a 	mov	r3,r2
  802420:	e0bffd17 	ldw	r2,-12(fp)
  802424:	1885883a 	add	r2,r3,r2
  802428:	14000304 	addi	r16,r2,12
  80242c:	e0bfe517 	ldw	r2,-108(fp)
  802430:	1085883a 	add	r2,r2,r2
  802434:	1085883a 	add	r2,r2,r2
  802438:	e0ffe504 	addi	r3,fp,-108
  80243c:	10c5883a 	add	r2,r2,r3
  802440:	10800e04 	addi	r2,r2,56
  802444:	10c00017 	ldw	r3,0(r2)
  802448:	e0bfe517 	ldw	r2,-108(fp)
  80244c:	1085883a 	add	r2,r2,r2
  802450:	1085883a 	add	r2,r2,r2
  802454:	e13fe504 	addi	r4,fp,-108
  802458:	1105883a 	add	r2,r2,r4
  80245c:	10800504 	addi	r2,r2,20
  802460:	10800017 	ldw	r2,0(r2)
  802464:	1889c83a 	sub	r4,r3,r2
  802468:	080ff800 	call	80ff80 <__floatsisf>
  80246c:	1007883a 	mov	r3,r2
  802470:	e0bfe517 	ldw	r2,-108(fp)
  802474:	108000c4 	addi	r2,r2,3
  802478:	1085883a 	add	r2,r2,r2
  80247c:	1085883a 	add	r2,r2,r2
  802480:	e13fe504 	addi	r4,fp,-108
  802484:	1105883a 	add	r2,r2,r4
  802488:	10801104 	addi	r2,r2,68
  80248c:	10800017 	ldw	r2,0(r2)
  802490:	1809883a 	mov	r4,r3
  802494:	100b883a 	mov	r5,r2
  802498:	080fd1c0 	call	80fd1c <__divsf3>
  80249c:	1009883a 	mov	r4,r2
  8024a0:	0150b234 	movhi	r5,17096
  8024a4:	080fb3c0 	call	80fb3c <__mulsf3>
  8024a8:	80800015 	stw	r2,0(r16)
  factoryTrim[5] = (float)(2620/1<<FS)*(pow(1.01 ,((float)selfTest[5] - 1.0) ));

  // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim
  // of the Self-Test Response
  // To get percent, must multiply by 100
  for ( ii =0; ii < 3; ii = ii+1)
  8024ac:	e0bfe517 	ldw	r2,-108(fp)
  8024b0:	10800044 	addi	r2,r2,1
  8024b4:	e0bfe515 	stw	r2,-108(fp)
  8024b8:	e0bfe517 	ldw	r2,-108(fp)
  8024bc:	108000d0 	cmplti	r2,r2,3
  8024c0:	103fae1e 	bne	r2,zero,80237c <MPU9250SelfTest+0xe84>
    // printf("destination[%d] = %f\n",ii+3, destination[ii+3]);
    //printf("test1 difference: %f\n",aSTAvg[ii] - aAvg[ii]);
    //printf("test q: %f\n",416 / 6479.571777);

  }
}
  8024c4:	e037883a 	mov	sp,fp
  8024c8:	dfc00317 	ldw	ra,12(sp)
  8024cc:	df000217 	ldw	fp,8(sp)
  8024d0:	dc400117 	ldw	r17,4(sp)
  8024d4:	dc000017 	ldw	r16,0(sp)
  8024d8:	dec00404 	addi	sp,sp,16
  8024dc:	f800283a 	ret

008024e0 <audioInit>:

#include "DrumAnyWhere.h"

// sets our audio codec up, sets the appropriate registers
// set up for sampling rate of 44100
void audioInit(alt_up_av_config_dev * audio_config_dev) {
  8024e0:	defff904 	addi	sp,sp,-28
  8024e4:	dfc00615 	stw	ra,24(sp)
  8024e8:	df000515 	stw	fp,20(sp)
  8024ec:	df000504 	addi	fp,sp,20
  8024f0:	e13fff15 	stw	r4,-4(fp)

	if ( audio_config_dev == NULL)
  8024f4:	e0bfff17 	ldw	r2,-4(fp)
  8024f8:	1004c03a 	cmpne	r2,r2,zero
  8024fc:	1000041e 	bne	r2,zero,802510 <audioInit+0x30>
		printf("Error: could not open audio config device \n");
  802500:	010020b4 	movhi	r4,130
  802504:	211d3b04 	addi	r4,r4,29932
  802508:	08124e00 	call	8124e0 <puts>
  80250c:	00000306 	br	80251c <audioInit+0x3c>
	else
		printf("Opened audio config device \n");
  802510:	010020b4 	movhi	r4,130
  802514:	211d4604 	addi	r4,r4,29976
  802518:	08124e00 	call	8124e0 <puts>

	audio_dev = alt_up_audio_open_dev ("/dev/audio_0");
  80251c:	010020b4 	movhi	r4,130
  802520:	211d4d04 	addi	r4,r4,30004
  802524:	0824a2c0 	call	824a2c <alt_up_audio_open_dev>
  802528:	d0a03315 	stw	r2,-32564(gp)
	if ( audio_dev == NULL)
  80252c:	d0a03317 	ldw	r2,-32564(gp)
  802530:	1004c03a 	cmpne	r2,r2,zero
  802534:	1000041e 	bne	r2,zero,802548 <audioInit+0x68>
		printf("Error: could not open audio device \n");
  802538:	010020b4 	movhi	r4,130
  80253c:	211d5104 	addi	r4,r4,30020
  802540:	08124e00 	call	8124e0 <puts>
  802544:	00000306 	br	802554 <audioInit+0x74>
	else
		printf("Opened audio device \n");
  802548:	010020b4 	movhi	r4,130
  80254c:	211d5a04 	addi	r4,r4,30056
  802550:	08124e00 	call	8124e0 <puts>

	alt_up_av_config_reset(audio_config_dev);
  802554:	e13fff17 	ldw	r4,-4(fp)
  802558:	082538c0 	call	82538c <alt_up_av_config_reset>
	alt_up_audio_reset_audio_core(audio_dev);
  80255c:	d1203317 	ldw	r4,-32564(gp)
  802560:	0824c1c0 	call	824c1c <alt_up_audio_reset_audio_core>

	/* Write to configuration registers in the audio codec; see datasheet for what these values mean */
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x0, 0x17);
  802564:	e13fff17 	ldw	r4,-4(fp)
  802568:	000b883a 	mov	r5,zero
  80256c:	018005c4 	movi	r6,23
  802570:	08254cc0 	call	8254cc <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x1, 0x17);
  802574:	e13fff17 	ldw	r4,-4(fp)
  802578:	01400044 	movi	r5,1
  80257c:	018005c4 	movi	r6,23
  802580:	08254cc0 	call	8254cc <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x2, 0x68);
  802584:	e13fff17 	ldw	r4,-4(fp)
  802588:	01400084 	movi	r5,2
  80258c:	01801a04 	movi	r6,104
  802590:	08254cc0 	call	8254cc <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x3, 0x68);
  802594:	e13fff17 	ldw	r4,-4(fp)
  802598:	014000c4 	movi	r5,3
  80259c:	01801a04 	movi	r6,104
  8025a0:	08254cc0 	call	8254cc <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x4, 0x15);
  8025a4:	e13fff17 	ldw	r4,-4(fp)
  8025a8:	01400104 	movi	r5,4
  8025ac:	01800544 	movi	r6,21
  8025b0:	08254cc0 	call	8254cc <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x5, 0x06);
  8025b4:	e13fff17 	ldw	r4,-4(fp)
  8025b8:	01400144 	movi	r5,5
  8025bc:	01800184 	movi	r6,6
  8025c0:	08254cc0 	call	8254cc <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x6, 0x00);
  8025c4:	e13fff17 	ldw	r4,-4(fp)
  8025c8:	01400184 	movi	r5,6
  8025cc:	000d883a 	mov	r6,zero
  8025d0:	08254cc0 	call	8254cc <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x8, 0x22);
  8025d4:	e13fff17 	ldw	r4,-4(fp)
  8025d8:	01400204 	movi	r5,8
  8025dc:	01800884 	movi	r6,34
  8025e0:	08254cc0 	call	8254cc <alt_up_av_config_write_audio_cfg_register>

	alt_up_audio_disable_read_interrupt(audio_dev);
  8025e4:	d1203317 	ldw	r4,-32564(gp)
  8025e8:	0824ab80 	call	824ab8 <alt_up_audio_disable_read_interrupt>
	alt_up_audio_disable_write_interrupt(audio_dev);
  8025ec:	d1203317 	ldw	r4,-32564(gp)
  8025f0:	0824b540 	call	824b54 <alt_up_audio_disable_write_interrupt>

	alt_irq_register(AUDIO_0_IRQ, 0x0, audio_isr);
  8025f4:	010000c4 	movi	r4,3
  8025f8:	000b883a 	mov	r5,zero
  8025fc:	01802034 	movhi	r6,128
  802600:	3189a404 	addi	r6,r6,9872
  802604:	081ab080 	call	81ab08 <alt_irq_register>
  802608:	008000c4 	movi	r2,3
  80260c:	e0bffd15 	stw	r2,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802610:	0005303a 	rdctl	r2,status
  802614:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802618:	e0fffc17 	ldw	r3,-16(fp)
  80261c:	00bfff84 	movi	r2,-2
  802620:	1884703a 	and	r2,r3,r2
  802624:	1001703a 	wrctl	status,r2
  
  return context;
  802628:	e0bffc17 	ldw	r2,-16(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80262c:	e0bffe15 	stw	r2,-8(fp)

  alt_irq_active |= (1 << id);
  802630:	e0fffd17 	ldw	r3,-12(fp)
  802634:	00800044 	movi	r2,1
  802638:	10c4983a 	sll	r2,r2,r3
  80263c:	1007883a 	mov	r3,r2
  802640:	008020f4 	movhi	r2,131
  802644:	10a9d604 	addi	r2,r2,-22696
  802648:	10800017 	ldw	r2,0(r2)
  80264c:	1886b03a 	or	r3,r3,r2
  802650:	008020f4 	movhi	r2,131
  802654:	10a9d604 	addi	r2,r2,-22696
  802658:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80265c:	008020f4 	movhi	r2,131
  802660:	10a9d604 	addi	r2,r2,-22696
  802664:	10800017 	ldw	r2,0(r2)
  802668:	100170fa 	wrctl	ienable,r2
  80266c:	e0bffe17 	ldw	r2,-8(fp)
  802670:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802674:	e0bffb17 	ldw	r2,-20(fp)
  802678:	1001703a 	wrctl	status,r2
	alt_irq_enable(AUDIO_0_IRQ);
}
  80267c:	e037883a 	mov	sp,fp
  802680:	dfc00117 	ldw	ra,4(sp)
  802684:	df000017 	ldw	fp,0(sp)
  802688:	dec00204 	addi	sp,sp,8
  80268c:	f800283a 	ret

00802690 <audio_isr>:


// audio interrupt fires upon having FIFO 75% empty
// will try to play from nextToPlay which contains
// sound waves that are to play
void audio_isr(void* context, alt_u32 id) {
  802690:	defff904 	addi	sp,sp,-28
  802694:	dfc00615 	stw	ra,24(sp)
  802698:	df000515 	stw	fp,20(sp)
  80269c:	df000504 	addi	fp,sp,20
  8026a0:	e13ffe15 	stw	r4,-8(fp)
  8026a4:	e17fff15 	stw	r5,-4(fp)
	//FIFO 75% empty
	int i;
	int fifospace = alt_up_audio_write_fifo_space(audio_dev, ALT_UP_AUDIO_RIGHT);
  8026a8:	d1203317 	ldw	r4,-32564(gp)
  8026ac:	01400044 	movi	r5,1
  8026b0:	0824df40 	call	824df4 <alt_up_audio_write_fifo_space>
  8026b4:	e0bffc15 	stw	r2,-16(fp)

	if(fifospace >= SAMPLE_SIZE) {
  8026b8:	e0bffc17 	ldw	r2,-16(fp)
  8026bc:	10800410 	cmplti	r2,r2,16
  8026c0:	10001e1e 	bne	r2,zero,80273c <audio_isr+0xac>
		alt_up_audio_write_fifo(audio_dev, nextToPlay, SAMPLE_SIZE, ALT_UP_AUDIO_RIGHT);
  8026c4:	d1203317 	ldw	r4,-32564(gp)
  8026c8:	01402174 	movhi	r5,133
  8026cc:	29580904 	addi	r5,r5,24612
  8026d0:	01800404 	movi	r6,16
  8026d4:	01c00044 	movi	r7,1
  8026d8:	082504c0 	call	82504c <alt_up_audio_write_fifo>
		alt_up_audio_write_fifo(audio_dev, nextToPlay, SAMPLE_SIZE, ALT_UP_AUDIO_LEFT);
  8026dc:	d1203317 	ldw	r4,-32564(gp)
  8026e0:	01402174 	movhi	r5,133
  8026e4:	29580904 	addi	r5,r5,24612
  8026e8:	01800404 	movi	r6,16
  8026ec:	000f883a 	mov	r7,zero
  8026f0:	082504c0 	call	82504c <alt_up_audio_write_fifo>
		for(i = 0; i < SAMPLE_SIZE; i++) {
  8026f4:	e03ffd15 	stw	zero,-12(fp)
  8026f8:	00000a06 	br	802724 <audio_isr+0x94>
			nextToPlay[i] = 0;
  8026fc:	e0bffd17 	ldw	r2,-12(fp)
  802700:	00c02174 	movhi	r3,133
  802704:	18d80904 	addi	r3,r3,24612
  802708:	1085883a 	add	r2,r2,r2
  80270c:	1085883a 	add	r2,r2,r2
  802710:	10c5883a 	add	r2,r2,r3
  802714:	10000015 	stw	zero,0(r2)
	int fifospace = alt_up_audio_write_fifo_space(audio_dev, ALT_UP_AUDIO_RIGHT);

	if(fifospace >= SAMPLE_SIZE) {
		alt_up_audio_write_fifo(audio_dev, nextToPlay, SAMPLE_SIZE, ALT_UP_AUDIO_RIGHT);
		alt_up_audio_write_fifo(audio_dev, nextToPlay, SAMPLE_SIZE, ALT_UP_AUDIO_LEFT);
		for(i = 0; i < SAMPLE_SIZE; i++) {
  802718:	e0bffd17 	ldw	r2,-12(fp)
  80271c:	10800044 	addi	r2,r2,1
  802720:	e0bffd15 	stw	r2,-12(fp)
  802724:	e0bffd17 	ldw	r2,-12(fp)
  802728:	10800410 	cmplti	r2,r2,16
  80272c:	103ff31e 	bne	r2,zero,8026fc <audio_isr+0x6c>
			nextToPlay[i] = 0;
		}
		INT8U error;
		error = OSSemPost(semaphore);
  802730:	d1203217 	ldw	r4,-32568(gp)
  802734:	08217ac0 	call	8217ac <OSSemPost>
  802738:	e0bffb05 	stb	r2,-20(fp)
	}
	alt_up_audio_disable_write_interrupt(audio_dev);
  80273c:	d1203317 	ldw	r4,-32564(gp)
  802740:	0824b540 	call	824b54 <alt_up_audio_disable_write_interrupt>
}
  802744:	e037883a 	mov	sp,fp
  802748:	dfc00117 	ldw	ra,4(sp)
  80274c:	df000017 	ldw	fp,0(sp)
  802750:	dec00204 	addi	sp,sp,8
  802754:	f800283a 	ret

00802758 <synthesize>:

// handles the digital signal processing
// for the DE2, adds the waveforms together, 
// scaling and decay. 
void synthesize(void* pdata) {
  802758:	defff904 	addi	sp,sp,-28
  80275c:	dfc00615 	stw	ra,24(sp)
  802760:	df000515 	stw	fp,20(sp)
  802764:	df000504 	addi	fp,sp,20
  802768:	e13fff15 	stw	r4,-4(fp)
	int i;
	int k;
	int temp;
	while(1) {
		// check for new sounds
		printf("gpio 23: %d\n", IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE));
  80276c:	00806474 	movhi	r2,401
  802770:	10a41804 	addi	r2,r2,-28576
  802774:	11400037 	ldwio	r5,0(r2)
  802778:	010020b4 	movhi	r4,130
  80277c:	211d6004 	addi	r4,r4,30080
  802780:	08123a40 	call	8123a4 <printf>
		for(i = 0; i < 7; i++) {
  802784:	e03ffd15 	stw	zero,-12(fp)
  802788:	00008f06 	br	8029c8 <synthesize+0x270>
			if(isPlaying[i] == 1) {
  80278c:	e0bffd17 	ldw	r2,-12(fp)
  802790:	00c020f4 	movhi	r3,131
  802794:	18e9fe04 	addi	r3,r3,-22536
  802798:	1085883a 	add	r2,r2,r2
  80279c:	1085883a 	add	r2,r2,r2
  8027a0:	10c5883a 	add	r2,r2,r3
  8027a4:	10800017 	ldw	r2,0(r2)
  8027a8:	10800058 	cmpnei	r2,r2,1
  8027ac:	1000831e 	bne	r2,zero,8029bc <synthesize+0x264>
				// append waveforms if needed
				for(k = 0; k < SAMPLE_SIZE; k++) {
  8027b0:	e03ffc15 	stw	zero,-16(fp)
  8027b4:	00004c06 	br	8028e8 <synthesize+0x190>
					temp = drums[i]->waveform[drums[i]->index + k];
  8027b8:	e0bffd17 	ldw	r2,-12(fp)
  8027bc:	00c02374 	movhi	r3,141
  8027c0:	18cede04 	addi	r3,r3,15224
  8027c4:	1085883a 	add	r2,r2,r2
  8027c8:	1085883a 	add	r2,r2,r2
  8027cc:	10c5883a 	add	r2,r2,r3
  8027d0:	10800017 	ldw	r2,0(r2)
  8027d4:	11000017 	ldw	r4,0(r2)
  8027d8:	e0bffd17 	ldw	r2,-12(fp)
  8027dc:	00c02374 	movhi	r3,141
  8027e0:	18cede04 	addi	r3,r3,15224
  8027e4:	1085883a 	add	r2,r2,r2
  8027e8:	1085883a 	add	r2,r2,r2
  8027ec:	10c5883a 	add	r2,r2,r3
  8027f0:	10800017 	ldw	r2,0(r2)
  8027f4:	10c00117 	ldw	r3,4(r2)
  8027f8:	e0bffc17 	ldw	r2,-16(fp)
  8027fc:	1885883a 	add	r2,r3,r2
  802800:	1085883a 	add	r2,r2,r2
  802804:	1085883a 	add	r2,r2,r2
  802808:	2085883a 	add	r2,r4,r2
  80280c:	10800017 	ldw	r2,0(r2)
  802810:	e0bffb15 	stw	r2,-20(fp)
					if(temp > 32768) {
  802814:	e0fffb17 	ldw	r3,-20(fp)
  802818:	00a00014 	movui	r2,32768
  80281c:	10c0140e 	bge	r2,r3,802870 <synthesize+0x118>
						temp = 65535 - temp;
  802820:	00ffffd4 	movui	r3,65535
  802824:	e0bffb17 	ldw	r2,-20(fp)
  802828:	1885c83a 	sub	r2,r3,r2
  80282c:	e0bffb15 	stw	r2,-20(fp)
						temp *= drums[i]->scale;
  802830:	e0bffd17 	ldw	r2,-12(fp)
  802834:	00c02374 	movhi	r3,141
  802838:	18cede04 	addi	r3,r3,15224
  80283c:	1085883a 	add	r2,r2,r2
  802840:	1085883a 	add	r2,r2,r2
  802844:	10c5883a 	add	r2,r2,r3
  802848:	10800017 	ldw	r2,0(r2)
  80284c:	10c00217 	ldw	r3,8(r2)
  802850:	e0bffb17 	ldw	r2,-20(fp)
  802854:	10c5383a 	mul	r2,r2,r3
  802858:	e0bffb15 	stw	r2,-20(fp)
						temp = 65535 - temp;
  80285c:	00ffffd4 	movui	r3,65535
  802860:	e0bffb17 	ldw	r2,-20(fp)
  802864:	1885c83a 	sub	r2,r3,r2
  802868:	e0bffb15 	stw	r2,-20(fp)
  80286c:	00000b06 	br	80289c <synthesize+0x144>
					} else {
						temp *= drums[i]->scale;
  802870:	e0bffd17 	ldw	r2,-12(fp)
  802874:	00c02374 	movhi	r3,141
  802878:	18cede04 	addi	r3,r3,15224
  80287c:	1085883a 	add	r2,r2,r2
  802880:	1085883a 	add	r2,r2,r2
  802884:	10c5883a 	add	r2,r2,r3
  802888:	10800017 	ldw	r2,0(r2)
  80288c:	10c00217 	ldw	r3,8(r2)
  802890:	e0bffb17 	ldw	r2,-20(fp)
  802894:	10c5383a 	mul	r2,r2,r3
  802898:	e0bffb15 	stw	r2,-20(fp)
					}
					nextToPlay[k] += temp;
  80289c:	e17ffc17 	ldw	r5,-16(fp)
  8028a0:	e0bffc17 	ldw	r2,-16(fp)
  8028a4:	00c02174 	movhi	r3,133
  8028a8:	18d80904 	addi	r3,r3,24612
  8028ac:	1085883a 	add	r2,r2,r2
  8028b0:	1085883a 	add	r2,r2,r2
  8028b4:	10c5883a 	add	r2,r2,r3
  8028b8:	10c00017 	ldw	r3,0(r2)
  8028bc:	e0bffb17 	ldw	r2,-20(fp)
  8028c0:	1889883a 	add	r4,r3,r2
  8028c4:	00c02174 	movhi	r3,133
  8028c8:	18d80904 	addi	r3,r3,24612
  8028cc:	2945883a 	add	r2,r5,r5
  8028d0:	1085883a 	add	r2,r2,r2
  8028d4:	10c5883a 	add	r2,r2,r3
  8028d8:	11000015 	stw	r4,0(r2)
		// check for new sounds
		printf("gpio 23: %d\n", IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE));
		for(i = 0; i < 7; i++) {
			if(isPlaying[i] == 1) {
				// append waveforms if needed
				for(k = 0; k < SAMPLE_SIZE; k++) {
  8028dc:	e0bffc17 	ldw	r2,-16(fp)
  8028e0:	10800044 	addi	r2,r2,1
  8028e4:	e0bffc15 	stw	r2,-16(fp)
  8028e8:	e0bffc17 	ldw	r2,-16(fp)
  8028ec:	10800410 	cmplti	r2,r2,16
  8028f0:	103fb11e 	bne	r2,zero,8027b8 <synthesize+0x60>
						temp *= drums[i]->scale;
					}
					nextToPlay[k] += temp;
				}

				drums[i]->index += SAMPLE_SIZE;
  8028f4:	e0bffd17 	ldw	r2,-12(fp)
  8028f8:	00c02374 	movhi	r3,141
  8028fc:	18cede04 	addi	r3,r3,15224
  802900:	1085883a 	add	r2,r2,r2
  802904:	1085883a 	add	r2,r2,r2
  802908:	10c5883a 	add	r2,r2,r3
  80290c:	11000017 	ldw	r4,0(r2)
  802910:	e0bffd17 	ldw	r2,-12(fp)
  802914:	00c02374 	movhi	r3,141
  802918:	18cede04 	addi	r3,r3,15224
  80291c:	1085883a 	add	r2,r2,r2
  802920:	1085883a 	add	r2,r2,r2
  802924:	10c5883a 	add	r2,r2,r3
  802928:	10800017 	ldw	r2,0(r2)
  80292c:	10800117 	ldw	r2,4(r2)
  802930:	10800404 	addi	r2,r2,16
  802934:	20800115 	stw	r2,4(r4)
				if(drums[i]->index >= drums[i]->numberOfSamples - SAMPLE_SIZE) {
  802938:	e0bffd17 	ldw	r2,-12(fp)
  80293c:	00c02374 	movhi	r3,141
  802940:	18cede04 	addi	r3,r3,15224
  802944:	1085883a 	add	r2,r2,r2
  802948:	1085883a 	add	r2,r2,r2
  80294c:	10c5883a 	add	r2,r2,r3
  802950:	10800017 	ldw	r2,0(r2)
  802954:	11000117 	ldw	r4,4(r2)
  802958:	e0bffd17 	ldw	r2,-12(fp)
  80295c:	00c02374 	movhi	r3,141
  802960:	18cede04 	addi	r3,r3,15224
  802964:	1085883a 	add	r2,r2,r2
  802968:	1085883a 	add	r2,r2,r2
  80296c:	10c5883a 	add	r2,r2,r3
  802970:	10800017 	ldw	r2,0(r2)
  802974:	10800317 	ldw	r2,12(r2)
  802978:	10bffc04 	addi	r2,r2,-16
  80297c:	20800f16 	blt	r4,r2,8029bc <synthesize+0x264>
					drums[i]->index = 0;
  802980:	e0bffd17 	ldw	r2,-12(fp)
  802984:	00c02374 	movhi	r3,141
  802988:	18cede04 	addi	r3,r3,15224
  80298c:	1085883a 	add	r2,r2,r2
  802990:	1085883a 	add	r2,r2,r2
  802994:	10c5883a 	add	r2,r2,r3
  802998:	10800017 	ldw	r2,0(r2)
  80299c:	10000115 	stw	zero,4(r2)
					isPlaying[i] = 0;
  8029a0:	e0bffd17 	ldw	r2,-12(fp)
  8029a4:	00c020f4 	movhi	r3,131
  8029a8:	18e9fe04 	addi	r3,r3,-22536
  8029ac:	1085883a 	add	r2,r2,r2
  8029b0:	1085883a 	add	r2,r2,r2
  8029b4:	10c5883a 	add	r2,r2,r3
  8029b8:	10000015 	stw	zero,0(r2)
	int k;
	int temp;
	while(1) {
		// check for new sounds
		printf("gpio 23: %d\n", IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE));
		for(i = 0; i < 7; i++) {
  8029bc:	e0bffd17 	ldw	r2,-12(fp)
  8029c0:	10800044 	addi	r2,r2,1
  8029c4:	e0bffd15 	stw	r2,-12(fp)
  8029c8:	e0bffd17 	ldw	r2,-12(fp)
  8029cc:	108001d0 	cmplti	r2,r2,7
  8029d0:	103f6e1e 	bne	r2,zero,80278c <synthesize+0x34>
					drums[i]->index = 0;
					isPlaying[i] = 0;
				}
			}
		}
		alt_up_audio_enable_write_interrupt(audio_dev);
  8029d4:	d1203317 	ldw	r4,-32564(gp)
  8029d8:	0824b080 	call	824b08 <alt_up_audio_enable_write_interrupt>
		//PEND SEM
		INT8U err;
		OSSemPend(semaphore, 0, &err);
  8029dc:	d1203217 	ldw	r4,-32568(gp)
  8029e0:	e1bffe04 	addi	r6,fp,-8
  8029e4:	000b883a 	mov	r5,zero
  8029e8:	08213b40 	call	8213b4 <OSSemPend>
	}
  8029ec:	003f5f06 	br	80276c <synthesize+0x14>

008029f0 <init_button_pio>:
*/

#include "DrumAnyWhere.h"


void init_button_pio() {
  8029f0:	defffd04 	addi	sp,sp,-12
  8029f4:	dfc00215 	stw	ra,8(sp)
  8029f8:	df000115 	stw	fp,4(sp)
  8029fc:	df000104 	addi	fp,sp,4
	void* edge_capture_ptr = (void*) &edge_capture;
  802a00:	d0a03104 	addi	r2,gp,-32572
  802a04:	e0bfff15 	stw	r2,-4(fp)
	/* Enable all 4 button interrupts. */
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0xf);
  802a08:	00c06474 	movhi	r3,401
  802a0c:	18e42e04 	addi	r3,r3,-28488
  802a10:	008003c4 	movi	r2,15
  802a14:	18800035 	stwio	r2,0(r3)
	/* Reset the edge capture register. */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0x0);
  802a18:	00806474 	movhi	r2,401
  802a1c:	10a42f04 	addi	r2,r2,-28484
  802a20:	10000035 	stwio	zero,0(r2)
	/* Register the ISR. */
	alt_irq_register(BUTTONS_IRQ, edge_capture_ptr, interrupt_isr_buttonPress);
  802a24:	01000144 	movi	r4,5
  802a28:	e17fff17 	ldw	r5,-4(fp)
  802a2c:	01802034 	movhi	r6,128
  802a30:	318a9304 	addi	r6,r6,10828
  802a34:	081ab080 	call	81ab08 <alt_irq_register>
}
  802a38:	e037883a 	mov	sp,fp
  802a3c:	dfc00117 	ldw	ra,4(sp)
  802a40:	df000017 	ldw	fp,0(sp)
  802a44:	dec00204 	addi	sp,sp,8
  802a48:	f800283a 	ret

00802a4c <interrupt_isr_buttonPress>:


void interrupt_isr_buttonPress(void *context, alt_u32 id) {
  802a4c:	defffb04 	addi	sp,sp,-20
  802a50:	dfc00415 	stw	ra,16(sp)
  802a54:	df000315 	stw	fp,12(sp)
  802a58:	df000304 	addi	fp,sp,12
  802a5c:	e13ffe15 	stw	r4,-8(fp)
  802a60:	e17fff15 	stw	r5,-4(fp)

	volatile int* edge_capture_ptr = (volatile int*) context;
  802a64:	e0bffe17 	ldw	r2,-8(fp)
  802a68:	e0bffd15 	stw	r2,-12(fp)
	*edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
  802a6c:	00806474 	movhi	r2,401
  802a70:	10a42f04 	addi	r2,r2,-28484
  802a74:	10c00037 	ldwio	r3,0(r2)
  802a78:	e0bffd17 	ldw	r2,-12(fp)
  802a7c:	10c00015 	stw	r3,0(r2)

	button = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
  802a80:	00806474 	movhi	r2,401
  802a84:	10a42c04 	addi	r2,r2,-28496
  802a88:	10800037 	ldwio	r2,0(r2)
  802a8c:	d0a03415 	stw	r2,-32560(gp)
	alt_up_audio_enable_write_interrupt(audio_dev);
  802a90:	d1203317 	ldw	r4,-32564(gp)
  802a94:	0824b080 	call	824b08 <alt_up_audio_enable_write_interrupt>

	if((button & 0x8) == 0) {
  802a98:	d0a03417 	ldw	r2,-32560(gp)
  802a9c:	1080020c 	andi	r2,r2,8
  802aa0:	1004c03a 	cmpne	r2,r2,zero
  802aa4:	10000c1e 	bne	r2,zero,802ad8 <interrupt_isr_buttonPress+0x8c>
		alt_up_character_lcd_init(myLCD);
  802aa8:	d1203517 	ldw	r4,-32556(gp)
  802aac:	0825a700 	call	825a70 <alt_up_character_lcd_init>
		alt_up_character_lcd_set_cursor_pos(myLCD, 0, 1);
  802ab0:	d1203517 	ldw	r4,-32556(gp)
  802ab4:	000b883a 	mov	r5,zero
  802ab8:	01800044 	movi	r6,1
  802abc:	0825c200 	call	825c20 <alt_up_character_lcd_set_cursor_pos>
		alt_up_character_lcd_string(myLCD, "kick");
  802ac0:	d1203517 	ldw	r4,-32556(gp)
  802ac4:	014020b4 	movhi	r5,130
  802ac8:	295d6404 	addi	r5,r5,30096
  802acc:	0825b5c0 	call	825b5c <alt_up_character_lcd_string>
		setDrum(kickConst);
  802ad0:	01000104 	movi	r4,4
  802ad4:	0802bc80 	call	802bc8 <setDrum>
	}
	if((button & 0x4) == 0) {
  802ad8:	d0a03417 	ldw	r2,-32560(gp)
  802adc:	1080010c 	andi	r2,r2,4
  802ae0:	1004c03a 	cmpne	r2,r2,zero
  802ae4:	10000c1e 	bne	r2,zero,802b18 <interrupt_isr_buttonPress+0xcc>
		alt_up_character_lcd_init(myLCD);
  802ae8:	d1203517 	ldw	r4,-32556(gp)
  802aec:	0825a700 	call	825a70 <alt_up_character_lcd_init>
		alt_up_character_lcd_set_cursor_pos(myLCD, 0, 1);
  802af0:	d1203517 	ldw	r4,-32556(gp)
  802af4:	000b883a 	mov	r5,zero
  802af8:	01800044 	movi	r6,1
  802afc:	0825c200 	call	825c20 <alt_up_character_lcd_set_cursor_pos>
		alt_up_character_lcd_string(myLCD, "hihat");
  802b00:	d1203517 	ldw	r4,-32556(gp)
  802b04:	014020b4 	movhi	r5,130
  802b08:	295d6604 	addi	r5,r5,30104
  802b0c:	0825b5c0 	call	825b5c <alt_up_character_lcd_string>
		setDrum(kickConst);
  802b10:	01000104 	movi	r4,4
  802b14:	0802bc80 	call	802bc8 <setDrum>
	}
	if((button & 0x2) == 0) {
  802b18:	d0a03417 	ldw	r2,-32560(gp)
  802b1c:	1080008c 	andi	r2,r2,2
  802b20:	1004c03a 	cmpne	r2,r2,zero
  802b24:	10000c1e 	bne	r2,zero,802b58 <interrupt_isr_buttonPress+0x10c>
		alt_up_character_lcd_init(myLCD);
  802b28:	d1203517 	ldw	r4,-32556(gp)
  802b2c:	0825a700 	call	825a70 <alt_up_character_lcd_init>
		alt_up_character_lcd_set_cursor_pos(myLCD, 0, 1);
  802b30:	d1203517 	ldw	r4,-32556(gp)
  802b34:	000b883a 	mov	r5,zero
  802b38:	01800044 	movi	r6,1
  802b3c:	0825c200 	call	825c20 <alt_up_character_lcd_set_cursor_pos>
		alt_up_character_lcd_string(myLCD, "hihat2");
  802b40:	d1203517 	ldw	r4,-32556(gp)
  802b44:	014020b4 	movhi	r5,130
  802b48:	295d6804 	addi	r5,r5,30112
  802b4c:	0825b5c0 	call	825b5c <alt_up_character_lcd_string>
		setDrum(hihatConst);
  802b50:	01000084 	movi	r4,2
  802b54:	0802bc80 	call	802bc8 <setDrum>
	}
	if((button & 0x1) == 0) {
  802b58:	d0a03417 	ldw	r2,-32560(gp)
  802b5c:	1080004c 	andi	r2,r2,1
  802b60:	1004c03a 	cmpne	r2,r2,zero
  802b64:	10000c1e 	bne	r2,zero,802b98 <interrupt_isr_buttonPress+0x14c>
		alt_up_character_lcd_init(myLCD);
  802b68:	d1203517 	ldw	r4,-32556(gp)
  802b6c:	0825a700 	call	825a70 <alt_up_character_lcd_init>
		alt_up_character_lcd_set_cursor_pos(myLCD, 0, 1);
  802b70:	d1203517 	ldw	r4,-32556(gp)
  802b74:	000b883a 	mov	r5,zero
  802b78:	01800044 	movi	r6,1
  802b7c:	0825c200 	call	825c20 <alt_up_character_lcd_set_cursor_pos>
		alt_up_character_lcd_string(myLCD, "snare");
  802b80:	d1203517 	ldw	r4,-32556(gp)
  802b84:	014020b4 	movhi	r5,130
  802b88:	295d6a04 	addi	r5,r5,30120
  802b8c:	0825b5c0 	call	825b5c <alt_up_character_lcd_string>
		setDrum(snareConst);
  802b90:	0009883a 	mov	r4,zero
  802b94:	0802bc80 	call	802bc8 <setDrum>
	}

	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0x01);
  802b98:	00c06474 	movhi	r3,401
  802b9c:	18e42f04 	addi	r3,r3,-28484
  802ba0:	00800044 	movi	r2,1
  802ba4:	18800035 	stwio	r2,0(r3)
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
  802ba8:	00806474 	movhi	r2,401
  802bac:	10a42f04 	addi	r2,r2,-28484
  802bb0:	10800037 	ldwio	r2,0(r2)
}
  802bb4:	e037883a 	mov	sp,fp
  802bb8:	dfc00117 	ldw	ra,4(sp)
  802bbc:	df000017 	ldw	fp,0(sp)
  802bc0:	dec00204 	addi	sp,sp,8
  802bc4:	f800283a 	ret

00802bc8 <setDrum>:

void setDrum(int drum) {
  802bc8:	defffe04 	addi	sp,sp,-8
  802bcc:	df000115 	stw	fp,4(sp)
  802bd0:	df000104 	addi	fp,sp,4
  802bd4:	e13fff15 	stw	r4,-4(fp)
	if(isPlaying[drum] == 0) {
  802bd8:	e0bfff17 	ldw	r2,-4(fp)
  802bdc:	00c020f4 	movhi	r3,131
  802be0:	18e9fe04 	addi	r3,r3,-22536
  802be4:	1085883a 	add	r2,r2,r2
  802be8:	1085883a 	add	r2,r2,r2
  802bec:	10c5883a 	add	r2,r2,r3
  802bf0:	10800017 	ldw	r2,0(r2)
  802bf4:	1004c03a 	cmpne	r2,r2,zero
  802bf8:	1000091e 	bne	r2,zero,802c20 <setDrum+0x58>
		isPlaying[drum] = 1;
  802bfc:	e0bfff17 	ldw	r2,-4(fp)
  802c00:	00c020f4 	movhi	r3,131
  802c04:	18e9fe04 	addi	r3,r3,-22536
  802c08:	1085883a 	add	r2,r2,r2
  802c0c:	1085883a 	add	r2,r2,r2
  802c10:	10c7883a 	add	r3,r2,r3
  802c14:	00800044 	movi	r2,1
  802c18:	18800015 	stw	r2,0(r3)
  802c1c:	00000806 	br	802c40 <setDrum+0x78>
	} else {
		drums[drum]->index = 0;
  802c20:	e0bfff17 	ldw	r2,-4(fp)
  802c24:	00c02374 	movhi	r3,141
  802c28:	18cede04 	addi	r3,r3,15224
  802c2c:	1085883a 	add	r2,r2,r2
  802c30:	1085883a 	add	r2,r2,r2
  802c34:	10c5883a 	add	r2,r2,r3
  802c38:	10800017 	ldw	r2,0(r2)
  802c3c:	10000115 	stw	zero,4(r2)
	}
}
  802c40:	e037883a 	mov	sp,fp
  802c44:	df000017 	ldw	fp,0(sp)
  802c48:	dec00104 	addi	sp,sp,4
  802c4c:	f800283a 	ret

00802c50 <dir_getFileStructure>:
 * Description: This function stores the filerecord located at loc in filerec.
 * It fetches the required sector for this.
 * Return value: void
*/
void dir_getFileStructure(FileSystem *fs,FileRecord *filerec,FileLocation *loc)
{
  802c50:	defffa04 	addi	sp,sp,-24
  802c54:	dfc00515 	stw	ra,20(sp)
  802c58:	df000415 	stw	fp,16(sp)
  802c5c:	df000404 	addi	fp,sp,16
  802c60:	e13ffd15 	stw	r4,-12(fp)
  802c64:	e17ffe15 	stw	r5,-8(fp)
  802c68:	e1bfff15 	stw	r6,-4(fp)
	euint8 *buf;

	buf=part_getSect(fs->part,loc->Sector,IOM_MODE_READONLY);
  802c6c:	e0bffd17 	ldw	r2,-12(fp)
  802c70:	11000017 	ldw	r4,0(r2)
  802c74:	e0bfff17 	ldw	r2,-4(fp)
  802c78:	11400017 	ldw	r5,0(r2)
  802c7c:	01800044 	movi	r6,1
  802c80:	080a5e40 	call	80a5e4 <part_getSect>
  802c84:	e0bffc15 	stw	r2,-16(fp)
	*filerec=*(((FileRecord*)buf)+loc->Offset);
  802c88:	e0bfff17 	ldw	r2,-4(fp)
  802c8c:	10800103 	ldbu	r2,4(r2)
  802c90:	10803fcc 	andi	r2,r2,255
  802c94:	1004917a 	slli	r2,r2,5
  802c98:	1007883a 	mov	r3,r2
  802c9c:	e0bffc17 	ldw	r2,-16(fp)
  802ca0:	1887883a 	add	r3,r3,r2
  802ca4:	e13ffe17 	ldw	r4,-8(fp)
  802ca8:	18800017 	ldw	r2,0(r3)
  802cac:	20800015 	stw	r2,0(r4)
  802cb0:	18800117 	ldw	r2,4(r3)
  802cb4:	20800115 	stw	r2,4(r4)
  802cb8:	18800217 	ldw	r2,8(r3)
  802cbc:	20800215 	stw	r2,8(r4)
  802cc0:	18800317 	ldw	r2,12(r3)
  802cc4:	20800315 	stw	r2,12(r4)
  802cc8:	18800417 	ldw	r2,16(r3)
  802ccc:	20800415 	stw	r2,16(r4)
  802cd0:	18800517 	ldw	r2,20(r3)
  802cd4:	20800515 	stw	r2,20(r4)
  802cd8:	18800617 	ldw	r2,24(r3)
  802cdc:	20800615 	stw	r2,24(r4)
  802ce0:	18800717 	ldw	r2,28(r3)
  802ce4:	20800715 	stw	r2,28(r4)
	part_relSect(fs->part,buf);
  802ce8:	e0bffd17 	ldw	r2,-12(fp)
  802cec:	11000017 	ldw	r4,0(r2)
  802cf0:	e17ffc17 	ldw	r5,-16(fp)
  802cf4:	080a6440 	call	80a644 <part_relSect>
}	
  802cf8:	e037883a 	mov	sp,fp
  802cfc:	dfc00117 	ldw	ra,4(sp)
  802d00:	df000017 	ldw	fp,0(sp)
  802d04:	dec00204 	addi	sp,sp,8
  802d08:	f800283a 	ret

00802d0c <dir_createDirectoryEntry>:
 * Description: This function writes the filerecord stored in filerec to disc at
 * location loc. 
 * Return value: void
*/
void dir_createDirectoryEntry(FileSystem *fs,FileRecord *filerec,FileLocation *loc)
{
  802d0c:	defffa04 	addi	sp,sp,-24
  802d10:	dfc00515 	stw	ra,20(sp)
  802d14:	df000415 	stw	fp,16(sp)
  802d18:	df000404 	addi	fp,sp,16
  802d1c:	e13ffd15 	stw	r4,-12(fp)
  802d20:	e17ffe15 	stw	r5,-8(fp)
  802d24:	e1bfff15 	stw	r6,-4(fp)
	euint8 *buf;
	
	buf = part_getSect(fs->part,loc->Sector,IOM_MODE_READWRITE);
  802d28:	e0bffd17 	ldw	r2,-12(fp)
  802d2c:	11000017 	ldw	r4,0(r2)
  802d30:	e0bfff17 	ldw	r2,-4(fp)
  802d34:	11400017 	ldw	r5,0(r2)
  802d38:	01800084 	movi	r6,2
  802d3c:	080a5e40 	call	80a5e4 <part_getSect>
  802d40:	e0bffc15 	stw	r2,-16(fp)
	memCpy(filerec,buf+(loc->Offset*sizeof(*filerec)),sizeof(*filerec));
  802d44:	e0bfff17 	ldw	r2,-4(fp)
  802d48:	10800103 	ldbu	r2,4(r2)
  802d4c:	10803fcc 	andi	r2,r2,255
  802d50:	1004917a 	slli	r2,r2,5
  802d54:	1007883a 	mov	r3,r2
  802d58:	e0bffc17 	ldw	r2,-16(fp)
  802d5c:	188b883a 	add	r5,r3,r2
  802d60:	e13ffe17 	ldw	r4,-8(fp)
  802d64:	01800804 	movi	r6,32
  802d68:	080a8840 	call	80a884 <memCpy>
	part_relSect(fs->part,buf);
  802d6c:	e0bffd17 	ldw	r2,-12(fp)
  802d70:	11000017 	ldw	r4,0(r2)
  802d74:	e17ffc17 	ldw	r5,-16(fp)
  802d78:	080a6440 	call	80a644 <part_relSect>
}
  802d7c:	e037883a 	mov	sp,fp
  802d80:	dfc00117 	ldw	ra,4(sp)
  802d84:	df000017 	ldw	fp,0(sp)
  802d88:	dec00204 	addi	sp,sp,8
  802d8c:	f800283a 	ret

00802d90 <dir_createDefaultEntry>:
 * a given fatfilename. If your system has a means of knowing time, here is an 
 * excellent place to apply it to the filerecord.  
 * Return value: void
*/
void dir_createDefaultEntry(FileSystem *fs,FileRecord *filerec,eint8* fatfilename)
{
  802d90:	defffb04 	addi	sp,sp,-20
  802d94:	dfc00415 	stw	ra,16(sp)
  802d98:	df000315 	stw	fp,12(sp)
  802d9c:	df000304 	addi	fp,sp,12
  802da0:	e13ffd15 	stw	r4,-12(fp)
  802da4:	e17ffe15 	stw	r5,-8(fp)
  802da8:	e1bfff15 	stw	r6,-4(fp)
	memCpy(fatfilename,filerec->FileName,11);
  802dac:	e17ffe17 	ldw	r5,-8(fp)
  802db0:	e13fff17 	ldw	r4,-4(fp)
  802db4:	018002c4 	movi	r6,11
  802db8:	080a8840 	call	80a884 <memCpy>
	filerec->Attribute=0x00;
  802dbc:	e0bffe17 	ldw	r2,-8(fp)
  802dc0:	100002c5 	stb	zero,11(r2)
	filerec->NTReserved=0x00;
  802dc4:	e0bffe17 	ldw	r2,-8(fp)
  802dc8:	10000305 	stb	zero,12(r2)
	filerec->MilliSecTimeStamp=0x00;
  802dcc:	e0bffe17 	ldw	r2,-8(fp)
  802dd0:	10000345 	stb	zero,13(r2)
	filerec->CreatedTime=time_getTime();
  802dd4:	e0bffe17 	ldw	r2,-8(fp)
  802dd8:	1000038d 	sth	zero,14(r2)
	filerec->CreatedDate=time_getDate(); 
  802ddc:	e0bffe17 	ldw	r2,-8(fp)
  802de0:	1000040d 	sth	zero,16(r2)
	filerec->AccessDate=filerec->CreatedDate;
  802de4:	e0bffe17 	ldw	r2,-8(fp)
  802de8:	10c0040b 	ldhu	r3,16(r2)
  802dec:	e0bffe17 	ldw	r2,-8(fp)
  802df0:	10c0048d 	sth	r3,18(r2)
	filerec->FirstClusterHigh=0x0000;
  802df4:	e0bffe17 	ldw	r2,-8(fp)
  802df8:	1000050d 	sth	zero,20(r2)
	filerec->WriteTime=filerec->CreatedTime;
  802dfc:	e0bffe17 	ldw	r2,-8(fp)
  802e00:	10c0038b 	ldhu	r3,14(r2)
  802e04:	e0bffe17 	ldw	r2,-8(fp)
  802e08:	10c0058d 	sth	r3,22(r2)
	filerec->WriteDate=filerec->CreatedDate;
  802e0c:	e0bffe17 	ldw	r2,-8(fp)
  802e10:	10c0040b 	ldhu	r3,16(r2)
  802e14:	e0bffe17 	ldw	r2,-8(fp)
  802e18:	10c0060d 	sth	r3,24(r2)
	filerec->FirstClusterLow=0x0000;
  802e1c:	e0bffe17 	ldw	r2,-8(fp)
  802e20:	1000068d 	sth	zero,26(r2)
	filerec->FileSize=0x00000000;
  802e24:	e0bffe17 	ldw	r2,-8(fp)
  802e28:	10000715 	stw	zero,28(r2)
}
  802e2c:	e037883a 	mov	sp,fp
  802e30:	dfc00117 	ldw	ra,4(sp)
  802e34:	df000017 	ldw	fp,0(sp)
  802e38:	dec00204 	addi	sp,sp,8
  802e3c:	f800283a 	ret

00802e40 <dir_setFirstCluster>:
 * Description: This function requires modification to release it from
 * depending on the file object.
 * Return value:
*/
void dir_setFirstCluster(FileSystem *fs,FileLocation *loc,euint32 cluster_addr)
{
  802e40:	defffa04 	addi	sp,sp,-24
  802e44:	dfc00515 	stw	ra,20(sp)
  802e48:	df000415 	stw	fp,16(sp)
  802e4c:	df000404 	addi	fp,sp,16
  802e50:	e13ffd15 	stw	r4,-12(fp)
  802e54:	e17ffe15 	stw	r5,-8(fp)
  802e58:	e1bfff15 	stw	r6,-4(fp)
	euint8 *buf;
 	
 	buf = part_getSect(fs->part,loc->Sector,IOM_MODE_READWRITE);
  802e5c:	e0bffd17 	ldw	r2,-12(fp)
  802e60:	11000017 	ldw	r4,0(r2)
  802e64:	e0bffe17 	ldw	r2,-8(fp)
  802e68:	11400017 	ldw	r5,0(r2)
  802e6c:	01800084 	movi	r6,2
  802e70:	080a5e40 	call	80a5e4 <part_getSect>
  802e74:	e0bffc15 	stw	r2,-16(fp)
	(((FileRecord*)buf)+loc->Offset)->FirstClusterHigh=cluster_addr>>16;
  802e78:	e0bffe17 	ldw	r2,-8(fp)
  802e7c:	10800103 	ldbu	r2,4(r2)
  802e80:	10803fcc 	andi	r2,r2,255
  802e84:	1004917a 	slli	r2,r2,5
  802e88:	1007883a 	mov	r3,r2
  802e8c:	e0bffc17 	ldw	r2,-16(fp)
  802e90:	1887883a 	add	r3,r3,r2
  802e94:	e0bfff17 	ldw	r2,-4(fp)
  802e98:	1004d43a 	srli	r2,r2,16
  802e9c:	1880050d 	sth	r2,20(r3)
	(((FileRecord*)buf)+loc->Offset)->FirstClusterLow=cluster_addr&0xFFFF;	
  802ea0:	e0bffe17 	ldw	r2,-8(fp)
  802ea4:	10800103 	ldbu	r2,4(r2)
  802ea8:	10803fcc 	andi	r2,r2,255
  802eac:	1004917a 	slli	r2,r2,5
  802eb0:	1007883a 	mov	r3,r2
  802eb4:	e0bffc17 	ldw	r2,-16(fp)
  802eb8:	1887883a 	add	r3,r3,r2
  802ebc:	e0bfff17 	ldw	r2,-4(fp)
  802ec0:	1880068d 	sth	r2,26(r3)
	part_relSect(fs->part,buf);
  802ec4:	e0bffd17 	ldw	r2,-12(fp)
  802ec8:	11000017 	ldw	r4,0(r2)
  802ecc:	e17ffc17 	ldw	r5,-16(fp)
  802ed0:	080a6440 	call	80a644 <part_relSect>
}
  802ed4:	e037883a 	mov	sp,fp
  802ed8:	dfc00117 	ldw	ra,4(sp)
  802edc:	df000017 	ldw	fp,0(sp)
  802ee0:	dec00204 	addi	sp,sp,8
  802ee4:	f800283a 	ret

00802ee8 <dir_setFileSize>:
 * Description: This function changes the filesize recorded at loc->Sector
 * to 'numbytes'.
 * Return value: void
*/
void dir_setFileSize(FileSystem *fs, FileLocation *loc,euint32 numbytes)
{
  802ee8:	defffa04 	addi	sp,sp,-24
  802eec:	dfc00515 	stw	ra,20(sp)
  802ef0:	df000415 	stw	fp,16(sp)
  802ef4:	df000404 	addi	fp,sp,16
  802ef8:	e13ffd15 	stw	r4,-12(fp)
  802efc:	e17ffe15 	stw	r5,-8(fp)
  802f00:	e1bfff15 	stw	r6,-4(fp)
	euint8 *buf;
	
	buf = part_getSect(fs->part,loc->Sector,IOM_MODE_READWRITE);
  802f04:	e0bffd17 	ldw	r2,-12(fp)
  802f08:	11000017 	ldw	r4,0(r2)
  802f0c:	e0bffe17 	ldw	r2,-8(fp)
  802f10:	11400017 	ldw	r5,0(r2)
  802f14:	01800084 	movi	r6,2
  802f18:	080a5e40 	call	80a5e4 <part_getSect>
  802f1c:	e0bffc15 	stw	r2,-16(fp)
	(((FileRecord*)buf)+loc->Offset)->FileSize=numbytes;
  802f20:	e0bffe17 	ldw	r2,-8(fp)
  802f24:	10800103 	ldbu	r2,4(r2)
  802f28:	10803fcc 	andi	r2,r2,255
  802f2c:	1004917a 	slli	r2,r2,5
  802f30:	1007883a 	mov	r3,r2
  802f34:	e0bffc17 	ldw	r2,-16(fp)
  802f38:	1887883a 	add	r3,r3,r2
  802f3c:	e0bfff17 	ldw	r2,-4(fp)
  802f40:	18800715 	stw	r2,28(r3)
	part_relSect(fs->part,buf);
  802f44:	e0bffd17 	ldw	r2,-12(fp)
  802f48:	11000017 	ldw	r4,0(r2)
  802f4c:	e17ffc17 	ldw	r5,-16(fp)
  802f50:	080a6440 	call	80a644 <part_relSect>
}
  802f54:	e037883a 	mov	sp,fp
  802f58:	dfc00117 	ldw	ra,4(sp)
  802f5c:	df000017 	ldw	fp,0(sp)
  802f60:	dec00204 	addi	sp,sp,8
  802f64:	f800283a 	ret

00802f68 <dir_updateDirectoryEntry>:
 * This function changes the entire entity stores at loc to the data recorded
 * in entry. This is for custom updates to the directoryentry.
 * Return value: 0 on success, -1 on failure
*/
esint8 dir_updateDirectoryEntry(FileSystem *fs,FileRecord *entry,FileLocation *loc)
{
  802f68:	defffa04 	addi	sp,sp,-24
  802f6c:	dfc00515 	stw	ra,20(sp)
  802f70:	df000415 	stw	fp,16(sp)
  802f74:	df000404 	addi	fp,sp,16
  802f78:	e13ffd15 	stw	r4,-12(fp)
  802f7c:	e17ffe15 	stw	r5,-8(fp)
  802f80:	e1bfff15 	stw	r6,-4(fp)
	euint8 *buf;
	
	buf = part_getSect(fs->part,loc->Sector,IOM_MODE_READWRITE);
  802f84:	e0bffd17 	ldw	r2,-12(fp)
  802f88:	11000017 	ldw	r4,0(r2)
  802f8c:	e0bfff17 	ldw	r2,-4(fp)
  802f90:	11400017 	ldw	r5,0(r2)
  802f94:	01800084 	movi	r6,2
  802f98:	080a5e40 	call	80a5e4 <part_getSect>
  802f9c:	e0bffc15 	stw	r2,-16(fp)
	memCpy(entry,buf+(loc->Offset*sizeof(*entry)),sizeof(*entry));
  802fa0:	e0bfff17 	ldw	r2,-4(fp)
  802fa4:	10800103 	ldbu	r2,4(r2)
  802fa8:	10803fcc 	andi	r2,r2,255
  802fac:	1004917a 	slli	r2,r2,5
  802fb0:	1007883a 	mov	r3,r2
  802fb4:	e0bffc17 	ldw	r2,-16(fp)
  802fb8:	188b883a 	add	r5,r3,r2
  802fbc:	e13ffe17 	ldw	r4,-8(fp)
  802fc0:	01800804 	movi	r6,32
  802fc4:	080a8840 	call	80a884 <memCpy>
	part_relSect(fs->part,buf);
  802fc8:	e0bffd17 	ldw	r2,-12(fp)
  802fcc:	11000017 	ldw	r4,0(r2)
  802fd0:	e17ffc17 	ldw	r5,-16(fp)
  802fd4:	080a6440 	call	80a644 <part_relSect>
	return(0);
  802fd8:	0005883a 	mov	r2,zero
}
  802fdc:	e037883a 	mov	sp,fp
  802fe0:	dfc00117 	ldw	ra,4(sp)
  802fe4:	df000017 	ldw	fp,0(sp)
  802fe8:	dec00204 	addi	sp,sp,8
  802fec:	f800283a 	ret

00802ff0 <dir_findFileinBuf>:
 * If loc is 0, then it's members are not touched.
 * Return value: This function returns 0 when it cannot find the file,
 * if it can find the file it will return the first cluster number.
*/
euint32 dir_findFileinBuf(euint8 *buf, eint8 *fatname, FileLocation *loc)
{
  802ff0:	defff104 	addi	sp,sp,-60
  802ff4:	dfc00e15 	stw	ra,56(sp)
  802ff8:	df000d15 	stw	fp,52(sp)
  802ffc:	df000d04 	addi	fp,sp,52
  803000:	e13ffc15 	stw	r4,-16(fp)
  803004:	e17ffd15 	stw	r5,-12(fp)
  803008:	e1bffe15 	stw	r6,-8(fp)
	FileRecord fileEntry;
	euint8 c;
	
	for(c=0; c<16; c++)
  80300c:	e03ff305 	stb	zero,-52(fp)
  803010:	00004306 	br	803120 <dir_findFileinBuf+0x130>
	{
		fileEntry = *(((FileRecord*)buf) + c);
  803014:	e0bff303 	ldbu	r2,-52(fp)
  803018:	1004917a 	slli	r2,r2,5
  80301c:	1007883a 	mov	r3,r2
  803020:	e0bffc17 	ldw	r2,-16(fp)
  803024:	1887883a 	add	r3,r3,r2
  803028:	18800017 	ldw	r2,0(r3)
  80302c:	e0bff415 	stw	r2,-48(fp)
  803030:	18800117 	ldw	r2,4(r3)
  803034:	e0bff515 	stw	r2,-44(fp)
  803038:	18800217 	ldw	r2,8(r3)
  80303c:	e0bff615 	stw	r2,-40(fp)
  803040:	18800317 	ldw	r2,12(r3)
  803044:	e0bff715 	stw	r2,-36(fp)
  803048:	18800417 	ldw	r2,16(r3)
  80304c:	e0bff815 	stw	r2,-32(fp)
  803050:	18800517 	ldw	r2,20(r3)
  803054:	e0bff915 	stw	r2,-28(fp)
  803058:	18800617 	ldw	r2,24(r3)
  80305c:	e0bffa15 	stw	r2,-24(fp)
  803060:	18800717 	ldw	r2,28(r3)
  803064:	e0bffb15 	stw	r2,-20(fp)
		/* Check if the entry is for short filenames */
		if( !( (fileEntry.Attribute & 0x0F) == 0x0F ) )
  803068:	e0bff6c3 	ldbu	r2,-37(fp)
  80306c:	10803fcc 	andi	r2,r2,255
  803070:	108003cc 	andi	r2,r2,15
  803074:	108003e0 	cmpeqi	r2,r2,15
  803078:	1000261e 	bne	r2,zero,803114 <dir_findFileinBuf+0x124>
		{
			if( strMatch((eint8*)fileEntry.FileName,fatname,11) == 0 )
  80307c:	e13ff404 	addi	r4,fp,-48
  803080:	e17ffd17 	ldw	r5,-12(fp)
  803084:	018002c4 	movi	r6,11
  803088:	080a7ec0 	call	80a7ec <strMatch>
  80308c:	10bfffcc 	andi	r2,r2,65535
  803090:	1004c03a 	cmpne	r2,r2,zero
  803094:	10001f1e 	bne	r2,zero,803114 <dir_findFileinBuf+0x124>
			{
				/* The entry has been found, return the location in the dir */
				if(loc)loc->Offset = c;
  803098:	e0bffe17 	ldw	r2,-8(fp)
  80309c:	1005003a 	cmpeq	r2,r2,zero
  8030a0:	1000031e 	bne	r2,zero,8030b0 <dir_findFileinBuf+0xc0>
  8030a4:	e0fffe17 	ldw	r3,-8(fp)
  8030a8:	e0bff303 	ldbu	r2,-52(fp)
  8030ac:	18800105 	stb	r2,4(r3)
				if(loc)loc->attrib = fileEntry.Attribute;
  8030b0:	e0bffe17 	ldw	r2,-8(fp)
  8030b4:	1005003a 	cmpeq	r2,r2,zero
  8030b8:	1000031e 	bne	r2,zero,8030c8 <dir_findFileinBuf+0xd8>
  8030bc:	e0fff6c3 	ldbu	r3,-37(fp)
  8030c0:	e0bffe17 	ldw	r2,-8(fp)
  8030c4:	10c00145 	stb	r3,5(r2)
				if((((euint32 )fileEntry.FirstClusterHigh)<<16)+ fileEntry.FirstClusterLow==0){
  8030c8:	e0bff90b 	ldhu	r2,-28(fp)
  8030cc:	10bfffcc 	andi	r2,r2,65535
  8030d0:	1006943a 	slli	r3,r2,16
  8030d4:	e0bffa8b 	ldhu	r2,-22(fp)
  8030d8:	10bfffcc 	andi	r2,r2,65535
  8030dc:	1885883a 	add	r2,r3,r2
  8030e0:	1004c03a 	cmpne	r2,r2,zero
  8030e4:	1000031e 	bne	r2,zero,8030f4 <dir_findFileinBuf+0x104>
					return(1); /* Lie about cluster, 0 means not found! */
  8030e8:	00800044 	movi	r2,1
  8030ec:	e0bfff15 	stw	r2,-4(fp)
  8030f0:	00000f06 	br	803130 <dir_findFileinBuf+0x140>
				}else{
					return
  8030f4:	e0bff90b 	ldhu	r2,-28(fp)
  8030f8:	10bfffcc 	andi	r2,r2,65535
  8030fc:	1006943a 	slli	r3,r2,16
  803100:	e0bffa8b 	ldhu	r2,-22(fp)
  803104:	10bfffcc 	andi	r2,r2,65535
  803108:	1887883a 	add	r3,r3,r2
  80310c:	e0ffff15 	stw	r3,-4(fp)
  803110:	00000706 	br	803130 <dir_findFileinBuf+0x140>
euint32 dir_findFileinBuf(euint8 *buf, eint8 *fatname, FileLocation *loc)
{
	FileRecord fileEntry;
	euint8 c;
	
	for(c=0; c<16; c++)
  803114:	e0bff303 	ldbu	r2,-52(fp)
  803118:	10800044 	addi	r2,r2,1
  80311c:	e0bff305 	stb	r2,-52(fp)
  803120:	e0bff303 	ldbu	r2,-52(fp)
  803124:	10800430 	cmpltui	r2,r2,16
  803128:	103fba1e 	bne	r2,zero,803014 <dir_findFileinBuf+0x24>
							);
				}
			}
		}
	}
	return(0);
  80312c:	e03fff15 	stw	zero,-4(fp)
  803130:	e0bfff17 	ldw	r2,-4(fp)
}
  803134:	e037883a 	mov	sp,fp
  803138:	dfc00117 	ldw	ra,4(sp)
  80313c:	df000017 	ldw	fp,0(sp)
  803140:	dec00204 	addi	sp,sp,8
  803144:	f800283a 	ret

00803148 <dir_findFreeEntryinBuf>:
 * This function searches for a free entry in a given sector 'buf'.
 * It will put the offset into the loc->Offset field, given that loc is not 0.
 * Return value: 1 when it found a free spot, 0 if it hasn't.
*/
euint32 dir_findFreeEntryinBuf(euint8* buf, FileLocation *loc)
{
  803148:	defff304 	addi	sp,sp,-52
  80314c:	df000c15 	stw	fp,48(sp)
  803150:	df000c04 	addi	fp,sp,48
  803154:	e13ffd15 	stw	r4,-12(fp)
  803158:	e17ffe15 	stw	r5,-8(fp)
	FileRecord fileEntry;
	euint8 c;
	
	for(c=0;c<16;c++){
  80315c:	e03ff405 	stb	zero,-48(fp)
  803160:	00002e06 	br	80321c <dir_findFreeEntryinBuf+0xd4>
		fileEntry = *(((FileRecord*)buf) + c);
  803164:	e0bff403 	ldbu	r2,-48(fp)
  803168:	1004917a 	slli	r2,r2,5
  80316c:	1007883a 	mov	r3,r2
  803170:	e0bffd17 	ldw	r2,-12(fp)
  803174:	1887883a 	add	r3,r3,r2
  803178:	18800017 	ldw	r2,0(r3)
  80317c:	e0bff515 	stw	r2,-44(fp)
  803180:	18800117 	ldw	r2,4(r3)
  803184:	e0bff615 	stw	r2,-40(fp)
  803188:	18800217 	ldw	r2,8(r3)
  80318c:	e0bff715 	stw	r2,-36(fp)
  803190:	18800317 	ldw	r2,12(r3)
  803194:	e0bff815 	stw	r2,-32(fp)
  803198:	18800417 	ldw	r2,16(r3)
  80319c:	e0bff915 	stw	r2,-28(fp)
  8031a0:	18800517 	ldw	r2,20(r3)
  8031a4:	e0bffa15 	stw	r2,-24(fp)
  8031a8:	18800617 	ldw	r2,24(r3)
  8031ac:	e0bffb15 	stw	r2,-20(fp)
  8031b0:	18800717 	ldw	r2,28(r3)
  8031b4:	e0bffc15 	stw	r2,-16(fp)
		if( !( (fileEntry.Attribute & 0x0F) == 0x0F ) ){
  8031b8:	e0bff7c3 	ldbu	r2,-33(fp)
  8031bc:	10803fcc 	andi	r2,r2,255
  8031c0:	108003cc 	andi	r2,r2,15
  8031c4:	108003e0 	cmpeqi	r2,r2,15
  8031c8:	1000111e 	bne	r2,zero,803210 <dir_findFreeEntryinBuf+0xc8>
			if(fileEntry.FileName[0] == 0x00 ||
  8031cc:	e0bff503 	ldbu	r2,-44(fp)
  8031d0:	10803fcc 	andi	r2,r2,255
  8031d4:	1005003a 	cmpeq	r2,r2,zero
  8031d8:	1000041e 	bne	r2,zero,8031ec <dir_findFreeEntryinBuf+0xa4>
  8031dc:	e0bff503 	ldbu	r2,-44(fp)
  8031e0:	10803fcc 	andi	r2,r2,255
  8031e4:	10803958 	cmpnei	r2,r2,229
  8031e8:	1000091e 	bne	r2,zero,803210 <dir_findFreeEntryinBuf+0xc8>
			   fileEntry.FileName[0] == 0xE5 ){
				if(loc)loc->Offset=c;
  8031ec:	e0bffe17 	ldw	r2,-8(fp)
  8031f0:	1005003a 	cmpeq	r2,r2,zero
  8031f4:	1000031e 	bne	r2,zero,803204 <dir_findFreeEntryinBuf+0xbc>
  8031f8:	e0fffe17 	ldw	r3,-8(fp)
  8031fc:	e0bff403 	ldbu	r2,-48(fp)
  803200:	18800105 	stb	r2,4(r3)
				return(1);
  803204:	00800044 	movi	r2,1
  803208:	e0bfff15 	stw	r2,-4(fp)
  80320c:	00000706 	br	80322c <dir_findFreeEntryinBuf+0xe4>
euint32 dir_findFreeEntryinBuf(euint8* buf, FileLocation *loc)
{
	FileRecord fileEntry;
	euint8 c;
	
	for(c=0;c<16;c++){
  803210:	e0bff403 	ldbu	r2,-48(fp)
  803214:	10800044 	addi	r2,r2,1
  803218:	e0bff405 	stb	r2,-48(fp)
  80321c:	e0bff403 	ldbu	r2,-48(fp)
  803220:	10800430 	cmpltui	r2,r2,16
  803224:	103fcf1e 	bne	r2,zero,803164 <dir_findFreeEntryinBuf+0x1c>
				if(loc)loc->Offset=c;
				return(1);
			}
		}
	}
	return(0);
  803228:	e03fff15 	stw	zero,-4(fp)
  80322c:	e0bfff17 	ldw	r2,-4(fp)
}
  803230:	e037883a 	mov	sp,fp
  803234:	df000017 	ldw	fp,0(sp)
  803238:	dec00104 	addi	sp,sp,4
  80323c:	f800283a 	ret

00803240 <dir_findinBuf>:
 * euint32  dir_findinBuf(euint8 *buf, eint8 *fatname, FileLocation *loc)
 * Description: This function searches for a given fatfilename in a buffer.
 * Return value: Returns 0 on not found, and the firstcluster when the name is found.
*/
euint32  dir_findinBuf(euint8 *buf, eint8 *fatname, FileLocation *loc, euint8 mode)
{
  803240:	defff804 	addi	sp,sp,-32
  803244:	dfc00715 	stw	ra,28(sp)
  803248:	df000615 	stw	fp,24(sp)
  80324c:	df000604 	addi	fp,sp,24
  803250:	e13ffa15 	stw	r4,-24(fp)
  803254:	e17ffb15 	stw	r5,-20(fp)
  803258:	e1bffc15 	stw	r6,-16(fp)
  80325c:	e1fffd05 	stb	r7,-12(fp)
	switch(mode){
  803260:	e0bffd03 	ldbu	r2,-12(fp)
  803264:	e0bfff15 	stw	r2,-4(fp)
  803268:	e0ffff17 	ldw	r3,-4(fp)
  80326c:	1805003a 	cmpeq	r2,r3,zero
  803270:	1000041e 	bne	r2,zero,803284 <dir_findinBuf+0x44>
  803274:	e0ffff17 	ldw	r3,-4(fp)
  803278:	18800060 	cmpeqi	r2,r3,1
  80327c:	1000071e 	bne	r2,zero,80329c <dir_findinBuf+0x5c>
  803280:	00000b06 	br	8032b0 <dir_findinBuf+0x70>
		case DIRFIND_FILE:
			return(dir_findFileinBuf(buf,fatname,loc));
  803284:	e13ffa17 	ldw	r4,-24(fp)
  803288:	e17ffb17 	ldw	r5,-20(fp)
  80328c:	e1bffc17 	ldw	r6,-16(fp)
  803290:	0802ff00 	call	802ff0 <dir_findFileinBuf>
  803294:	e0bffe15 	stw	r2,-8(fp)
  803298:	00000606 	br	8032b4 <dir_findinBuf+0x74>
			break;
		case DIRFIND_FREE:
			return(dir_findFreeEntryinBuf(buf,loc));
  80329c:	e13ffa17 	ldw	r4,-24(fp)
  8032a0:	e17ffc17 	ldw	r5,-16(fp)
  8032a4:	08031480 	call	803148 <dir_findFreeEntryinBuf>
  8032a8:	e0bffe15 	stw	r2,-8(fp)
  8032ac:	00000106 	br	8032b4 <dir_findinBuf+0x74>
			break;
		default:
			return(0);
  8032b0:	e03ffe15 	stw	zero,-8(fp)
  8032b4:	e0bffe17 	ldw	r2,-8(fp)
			break;
	}
	return(0);
}
  8032b8:	e037883a 	mov	sp,fp
  8032bc:	dfc00117 	ldw	ra,4(sp)
  8032c0:	df000017 	ldw	fp,0(sp)
  8032c4:	dec00204 	addi	sp,sp,8
  8032c8:	f800283a 	ret

008032cc <dir_findinCluster>:
 * This function will search for an existing (fatname) or free directory entry
 * in a full cluster.
 * Return value: 0 on failure, firstcluster on finding file, and 1 on finding free spot.
*/
euint32 dir_findinCluster(FileSystem *fs,euint32 cluster,eint8 *fatname, FileLocation *loc, euint8 mode)
{
  8032cc:	defff404 	addi	sp,sp,-48
  8032d0:	dfc00b15 	stw	ra,44(sp)
  8032d4:	df000a15 	stw	fp,40(sp)
  8032d8:	dc000915 	stw	r16,36(sp)
  8032dc:	df000904 	addi	fp,sp,36
  8032e0:	e13ffa15 	stw	r4,-24(fp)
  8032e4:	e17ffb15 	stw	r5,-20(fp)
  8032e8:	e1bffc15 	stw	r6,-16(fp)
  8032ec:	e1fffd15 	stw	r7,-12(fp)
  8032f0:	e0800317 	ldw	r2,12(fp)
  8032f4:	e0bffe05 	stb	r2,-8(fp)
	euint8 c,*buf=0;
  8032f8:	e03ff815 	stw	zero,-32(fp)
	euint32 fclus;
	
	for(c=0;c<fs->volumeId.SectorsPerCluster;c++){
  8032fc:	e03ff905 	stb	zero,-28(fp)
  803300:	00002e06 	br	8033bc <dir_findinCluster+0xf0>
		buf = part_getSect(fs->part,fs_clusterToSector(fs,cluster)+c,IOM_MODE_READONLY);
  803304:	e0bffa17 	ldw	r2,-24(fp)
  803308:	14000017 	ldw	r16,0(r2)
  80330c:	e13ffa17 	ldw	r4,-24(fp)
  803310:	e17ffb17 	ldw	r5,-20(fp)
  803314:	0806b880 	call	806b88 <fs_clusterToSector>
  803318:	1007883a 	mov	r3,r2
  80331c:	e0bff903 	ldbu	r2,-28(fp)
  803320:	188b883a 	add	r5,r3,r2
  803324:	8009883a 	mov	r4,r16
  803328:	01800044 	movi	r6,1
  80332c:	080a5e40 	call	80a5e4 <part_getSect>
  803330:	e0bff815 	stw	r2,-32(fp)
		if((fclus=dir_findinBuf(buf,fatname,loc,mode))){
  803334:	e1fffe03 	ldbu	r7,-8(fp)
  803338:	e13ff817 	ldw	r4,-32(fp)
  80333c:	e17ffc17 	ldw	r5,-16(fp)
  803340:	e1bffd17 	ldw	r6,-12(fp)
  803344:	08032400 	call	803240 <dir_findinBuf>
  803348:	e0bff715 	stw	r2,-36(fp)
  80334c:	e0bff717 	ldw	r2,-36(fp)
  803350:	1005003a 	cmpeq	r2,r2,zero
  803354:	1000121e 	bne	r2,zero,8033a0 <dir_findinCluster+0xd4>
			if(loc)loc->Sector=fs_clusterToSector(fs,cluster)+c;
  803358:	e0bffd17 	ldw	r2,-12(fp)
  80335c:	1005003a 	cmpeq	r2,r2,zero
  803360:	1000081e 	bne	r2,zero,803384 <dir_findinCluster+0xb8>
  803364:	e13ffa17 	ldw	r4,-24(fp)
  803368:	e17ffb17 	ldw	r5,-20(fp)
  80336c:	0806b880 	call	806b88 <fs_clusterToSector>
  803370:	1007883a 	mov	r3,r2
  803374:	e0bff903 	ldbu	r2,-28(fp)
  803378:	1887883a 	add	r3,r3,r2
  80337c:	e0bffd17 	ldw	r2,-12(fp)
  803380:	10c00015 	stw	r3,0(r2)
			part_relSect(fs->part,buf);
  803384:	e0bffa17 	ldw	r2,-24(fp)
  803388:	11000017 	ldw	r4,0(r2)
  80338c:	e17ff817 	ldw	r5,-32(fp)
  803390:	080a6440 	call	80a644 <part_relSect>
			return(fclus);
  803394:	e0bff717 	ldw	r2,-36(fp)
  803398:	e0bfff15 	stw	r2,-4(fp)
  80339c:	00000d06 	br	8033d4 <dir_findinCluster+0x108>
		}
		part_relSect(fs->part,buf); /* Thanks Mike ;) */
  8033a0:	e0bffa17 	ldw	r2,-24(fp)
  8033a4:	11000017 	ldw	r4,0(r2)
  8033a8:	e17ff817 	ldw	r5,-32(fp)
  8033ac:	080a6440 	call	80a644 <part_relSect>
euint32 dir_findinCluster(FileSystem *fs,euint32 cluster,eint8 *fatname, FileLocation *loc, euint8 mode)
{
	euint8 c,*buf=0;
	euint32 fclus;
	
	for(c=0;c<fs->volumeId.SectorsPerCluster;c++){
  8033b0:	e0bff903 	ldbu	r2,-28(fp)
  8033b4:	10800044 	addi	r2,r2,1
  8033b8:	e0bff905 	stb	r2,-28(fp)
  8033bc:	e0bffa17 	ldw	r2,-24(fp)
  8033c0:	10800183 	ldbu	r2,6(r2)
  8033c4:	10c03fcc 	andi	r3,r2,255
  8033c8:	e0bff903 	ldbu	r2,-28(fp)
  8033cc:	10ffcd36 	bltu	r2,r3,803304 <dir_findinCluster+0x38>
			part_relSect(fs->part,buf);
			return(fclus);
		}
		part_relSect(fs->part,buf); /* Thanks Mike ;) */
	}
	return(0);
  8033d0:	e03fff15 	stw	zero,-4(fp)
  8033d4:	e0bfff17 	ldw	r2,-4(fp)
}
  8033d8:	e037883a 	mov	sp,fp
  8033dc:	dfc00217 	ldw	ra,8(sp)
  8033e0:	df000117 	ldw	fp,4(sp)
  8033e4:	dc000017 	ldw	r16,0(sp)
  8033e8:	dec00304 	addi	sp,sp,12
  8033ec:	f800283a 	ret

008033f0 <dir_findinDir>:
 * This function will search for an existing (fatname) or free directory entry
 * in a directory, following the clusterchains.
 * Return value: 0 on failure, firstcluster on finding file, and 1 on finding free spot.
*/
euint32 dir_findinDir(FileSystem *fs, eint8* fatname,euint32 firstcluster, FileLocation *loc, euint8 mode)
{
  8033f0:	deffef04 	addi	sp,sp,-68
  8033f4:	dfc01015 	stw	ra,64(sp)
  8033f8:	df000f15 	stw	fp,60(sp)
  8033fc:	df000f04 	addi	fp,sp,60
  803400:	e13ffa15 	stw	r4,-24(fp)
  803404:	e17ffb15 	stw	r5,-20(fp)
  803408:	e1bffc15 	stw	r6,-16(fp)
  80340c:	e1fffd15 	stw	r7,-12(fp)
  803410:	e0800217 	ldw	r2,8(fp)
  803414:	e0bffe05 	stb	r2,-8(fp)
	euint32 c=0,cluster;
  803418:	e03ff315 	stw	zero,-52(fp)
	ClusterChain Cache;
	
	Cache.DiscCluster = Cache.FirstCluster = firstcluster;
  80341c:	e0bffc17 	ldw	r2,-16(fp)
  803420:	e0bff715 	stw	r2,-36(fp)
  803424:	e0bff717 	ldw	r2,-36(fp)
  803428:	e0bff615 	stw	r2,-40(fp)
	Cache.LogicCluster = Cache.LastCluster = Cache.Linear = 0;
  80342c:	e03ff405 	stb	zero,-48(fp)
  803430:	e03ff815 	stw	zero,-32(fp)
  803434:	e0bff817 	ldw	r2,-32(fp)
  803438:	e0bff515 	stw	r2,-44(fp)
	
	if(firstcluster <= 1){
  80343c:	e0bffc17 	ldw	r2,-16(fp)
  803440:	108000a8 	cmpgeui	r2,r2,2
  803444:	1000151e 	bne	r2,zero,80349c <dir_findinDir+0xac>
		return(dir_findinRootArea(fs,fatname,loc,mode));	
  803448:	e1fffe03 	ldbu	r7,-8(fp)
  80344c:	e13ffa17 	ldw	r4,-24(fp)
  803450:	e17ffb17 	ldw	r5,-20(fp)
  803454:	e1bffd17 	ldw	r6,-12(fp)
  803458:	08034e80 	call	8034e8 <dir_findinRootArea>
  80345c:	e0bfff15 	stw	r2,-4(fp)
  803460:	00001b06 	br	8034d0 <dir_findinDir+0xe0>
	}
	
	while(!fat_LogicToDiscCluster(fs,&Cache,c++)){
		if((cluster=dir_findinCluster(fs,Cache.DiscCluster,fatname,loc,mode))){
  803464:	e17ff617 	ldw	r5,-40(fp)
  803468:	e0bffe03 	ldbu	r2,-8(fp)
  80346c:	d8800015 	stw	r2,0(sp)
  803470:	e13ffa17 	ldw	r4,-24(fp)
  803474:	e1bffb17 	ldw	r6,-20(fp)
  803478:	e1fffd17 	ldw	r7,-12(fp)
  80347c:	08032cc0 	call	8032cc <dir_findinCluster>
  803480:	e0bff215 	stw	r2,-56(fp)
  803484:	e0bff217 	ldw	r2,-56(fp)
  803488:	1005003a 	cmpeq	r2,r2,zero
  80348c:	1000031e 	bne	r2,zero,80349c <dir_findinDir+0xac>
			return(cluster);
  803490:	e0bff217 	ldw	r2,-56(fp)
  803494:	e0bfff15 	stw	r2,-4(fp)
  803498:	00000d06 	br	8034d0 <dir_findinDir+0xe0>
	
	if(firstcluster <= 1){
		return(dir_findinRootArea(fs,fatname,loc,mode));	
	}
	
	while(!fat_LogicToDiscCluster(fs,&Cache,c++)){
  80349c:	e1bff317 	ldw	r6,-52(fp)
  8034a0:	e0bff317 	ldw	r2,-52(fp)
  8034a4:	10800044 	addi	r2,r2,1
  8034a8:	e0bff315 	stw	r2,-52(fp)
  8034ac:	e17ff404 	addi	r5,fp,-48
  8034b0:	e13ffa17 	ldw	r4,-24(fp)
  8034b4:	0804b4c0 	call	804b4c <fat_LogicToDiscCluster>
  8034b8:	10bfffcc 	andi	r2,r2,65535
  8034bc:	10a0001c 	xori	r2,r2,32768
  8034c0:	10a00004 	addi	r2,r2,-32768
  8034c4:	1005003a 	cmpeq	r2,r2,zero
  8034c8:	103fe61e 	bne	r2,zero,803464 <dir_findinDir+0x74>
		if((cluster=dir_findinCluster(fs,Cache.DiscCluster,fatname,loc,mode))){
			return(cluster);
		}
	}
	return(0);
  8034cc:	e03fff15 	stw	zero,-4(fp)
  8034d0:	e0bfff17 	ldw	r2,-4(fp)
}
  8034d4:	e037883a 	mov	sp,fp
  8034d8:	dfc00117 	ldw	ra,4(sp)
  8034dc:	df000017 	ldw	fp,0(sp)
  8034e0:	dec00204 	addi	sp,sp,8
  8034e4:	f800283a 	ret

008034e8 <dir_findinRootArea>:
 * This function will search for an existing (fatname) or free directory entry
 * in the rootdirectory-area of a FAT12/FAT16 filesystem.
 * Return value: 0 on failure, firstcluster on finding file, and 1 on finding free spot.
*/
euint32 dir_findinRootArea(FileSystem *fs,eint8* fatname, FileLocation *loc, euint8 mode)
{
  8034e8:	defff604 	addi	sp,sp,-40
  8034ec:	dfc00915 	stw	ra,36(sp)
  8034f0:	df000815 	stw	fp,32(sp)
  8034f4:	df000804 	addi	fp,sp,32
  8034f8:	e13ffb15 	stw	r4,-20(fp)
  8034fc:	e17ffc15 	stw	r5,-16(fp)
  803500:	e1bffd15 	stw	r6,-12(fp)
  803504:	e1fffe05 	stb	r7,-8(fp)
	euint32 c,fclus;
	euint8 *buf=0;
  803508:	e03ff815 	stw	zero,-32(fp)
	
	if((fs->type != FAT12) && (fs->type != FAT16))return(0);
  80350c:	e0bffb17 	ldw	r2,-20(fp)
  803510:	10800f03 	ldbu	r2,60(r2)
  803514:	10803fcc 	andi	r2,r2,255
  803518:	10800060 	cmpeqi	r2,r2,1
  80351c:	1000071e 	bne	r2,zero,80353c <dir_findinRootArea+0x54>
  803520:	e0bffb17 	ldw	r2,-20(fp)
  803524:	10800f03 	ldbu	r2,60(r2)
  803528:	10803fcc 	andi	r2,r2,255
  80352c:	108000a0 	cmpeqi	r2,r2,2
  803530:	1000021e 	bne	r2,zero,80353c <dir_findinRootArea+0x54>
  803534:	e03fff15 	stw	zero,-4(fp)
  803538:	00003606 	br	803614 <dir_findinRootArea+0x12c>
	
	for(c=fs->FirstSectorRootDir;c<(fs->FirstSectorRootDir+fs->volumeId.RootEntryCount/32);c++){
  80353c:	e0bffb17 	ldw	r2,-20(fp)
  803540:	10800b17 	ldw	r2,44(r2)
  803544:	e0bffa15 	stw	r2,-24(fp)
  803548:	00002306 	br	8035d8 <dir_findinRootArea+0xf0>
		buf = part_getSect(fs->part,c,IOM_MODE_READONLY);
  80354c:	e0bffb17 	ldw	r2,-20(fp)
  803550:	11000017 	ldw	r4,0(r2)
  803554:	e17ffa17 	ldw	r5,-24(fp)
  803558:	01800044 	movi	r6,1
  80355c:	080a5e40 	call	80a5e4 <part_getSect>
  803560:	e0bff815 	stw	r2,-32(fp)
		if((fclus=dir_findinBuf(buf,fatname,loc,mode))){
  803564:	e1fffe03 	ldbu	r7,-8(fp)
  803568:	e13ff817 	ldw	r4,-32(fp)
  80356c:	e17ffc17 	ldw	r5,-16(fp)
  803570:	e1bffd17 	ldw	r6,-12(fp)
  803574:	08032400 	call	803240 <dir_findinBuf>
  803578:	e0bff915 	stw	r2,-28(fp)
  80357c:	e0bff917 	ldw	r2,-28(fp)
  803580:	1005003a 	cmpeq	r2,r2,zero
  803584:	10000d1e 	bne	r2,zero,8035bc <dir_findinRootArea+0xd4>
			if(loc)loc->Sector=c;
  803588:	e0bffd17 	ldw	r2,-12(fp)
  80358c:	1005003a 	cmpeq	r2,r2,zero
  803590:	1000031e 	bne	r2,zero,8035a0 <dir_findinRootArea+0xb8>
  803594:	e0fffd17 	ldw	r3,-12(fp)
  803598:	e0bffa17 	ldw	r2,-24(fp)
  80359c:	18800015 	stw	r2,0(r3)
			part_relSect(fs->part,buf);
  8035a0:	e0bffb17 	ldw	r2,-20(fp)
  8035a4:	11000017 	ldw	r4,0(r2)
  8035a8:	e17ff817 	ldw	r5,-32(fp)
  8035ac:	080a6440 	call	80a644 <part_relSect>
			return(fclus);
  8035b0:	e0bff917 	ldw	r2,-28(fp)
  8035b4:	e0bfff15 	stw	r2,-4(fp)
  8035b8:	00001606 	br	803614 <dir_findinRootArea+0x12c>
		}	
		part_relSect(fs->part,buf);	
  8035bc:	e0bffb17 	ldw	r2,-20(fp)
  8035c0:	11000017 	ldw	r4,0(r2)
  8035c4:	e17ff817 	ldw	r5,-32(fp)
  8035c8:	080a6440 	call	80a644 <part_relSect>
	euint32 c,fclus;
	euint8 *buf=0;
	
	if((fs->type != FAT12) && (fs->type != FAT16))return(0);
	
	for(c=fs->FirstSectorRootDir;c<(fs->FirstSectorRootDir+fs->volumeId.RootEntryCount/32);c++){
  8035cc:	e0bffa17 	ldw	r2,-24(fp)
  8035d0:	10800044 	addi	r2,r2,1
  8035d4:	e0bffa15 	stw	r2,-24(fp)
  8035d8:	e0bffb17 	ldw	r2,-20(fp)
  8035dc:	10c00b17 	ldw	r3,44(r2)
  8035e0:	e0bffb17 	ldw	r2,-20(fp)
  8035e4:	1080030b 	ldhu	r2,12(r2)
  8035e8:	10bfffcc 	andi	r2,r2,65535
  8035ec:	1004d17a 	srli	r2,r2,5
  8035f0:	10bfffcc 	andi	r2,r2,65535
  8035f4:	1887883a 	add	r3,r3,r2
  8035f8:	e0bffa17 	ldw	r2,-24(fp)
  8035fc:	10ffd336 	bltu	r2,r3,80354c <dir_findinRootArea+0x64>
			part_relSect(fs->part,buf);
			return(fclus);
		}	
		part_relSect(fs->part,buf);	
	}
	part_relSect(fs->part,buf);
  803600:	e0bffb17 	ldw	r2,-20(fp)
  803604:	11000017 	ldw	r4,0(r2)
  803608:	e17ff817 	ldw	r5,-32(fp)
  80360c:	080a6440 	call	80a644 <part_relSect>
	return(0);
  803610:	e03fff15 	stw	zero,-4(fp)
  803614:	e0bfff17 	ldw	r2,-4(fp)
}
  803618:	e037883a 	mov	sp,fp
  80361c:	dfc00117 	ldw	ra,4(sp)
  803620:	df000017 	ldw	fp,0(sp)
  803624:	dec00204 	addi	sp,sp,8
  803628:	f800283a 	ret

0080362c <dir_getFatFileName>:
 * This function will take a full directory path, and strip off all leading
 * dirs and characters, leaving you with the MS-DOS notation of the actual filename.
 * Return value: 1 on success, 0 on not being able to produca a filename
*/
esint8 dir_getFatFileName(eint8* filename, eint8* fatfilename)
{
  80362c:	defff604 	addi	sp,sp,-40
  803630:	dfc00915 	stw	ra,36(sp)
  803634:	df000815 	stw	fp,32(sp)
  803638:	df000804 	addi	fp,sp,32
  80363c:	e13ffd15 	stw	r4,-12(fp)
  803640:	e17ffe15 	stw	r5,-8(fp)
	eint8 ffnamec[11],*next,nn=0;
  803644:	e03ff805 	stb	zero,-32(fp)
	
	memClr(ffnamec,11); memClr(fatfilename,11);
  803648:	e13ffa04 	addi	r4,fp,-24
  80364c:	014002c4 	movi	r5,11
  803650:	080a8f00 	call	80a8f0 <memClr>
  803654:	e13ffe17 	ldw	r4,-8(fp)
  803658:	014002c4 	movi	r5,11
  80365c:	080a8f00 	call	80a8f0 <memClr>
	next = filename;
  803660:	e0bffd17 	ldw	r2,-12(fp)
  803664:	e0bff915 	stw	r2,-28(fp)
	
	if(*filename=='/')next++;
  803668:	e0bffd17 	ldw	r2,-12(fp)
  80366c:	10800003 	ldbu	r2,0(r2)
  803670:	10803fcc 	andi	r2,r2,255
  803674:	1080201c 	xori	r2,r2,128
  803678:	10bfe004 	addi	r2,r2,-128
  80367c:	10800bd8 	cmpnei	r2,r2,47
  803680:	10000b1e 	bne	r2,zero,8036b0 <dir_getFatFileName+0x84>
  803684:	e0bff917 	ldw	r2,-28(fp)
  803688:	10800044 	addi	r2,r2,1
  80368c:	e0bff915 	stw	r2,-28(fp)
	
	while((next=file_normalToFatName(next,ffnamec))){
  803690:	00000706 	br	8036b0 <dir_getFatFileName+0x84>
		memCpy(ffnamec,fatfilename,11);	
  803694:	e13ffa04 	addi	r4,fp,-24
  803698:	e17ffe17 	ldw	r5,-8(fp)
  80369c:	018002c4 	movi	r6,11
  8036a0:	080a8840 	call	80a884 <memCpy>
		nn++;
  8036a4:	e0bff803 	ldbu	r2,-32(fp)
  8036a8:	10800044 	addi	r2,r2,1
  8036ac:	e0bff805 	stb	r2,-32(fp)
	memClr(ffnamec,11); memClr(fatfilename,11);
	next = filename;
	
	if(*filename=='/')next++;
	
	while((next=file_normalToFatName(next,ffnamec))){
  8036b0:	e17ffa04 	addi	r5,fp,-24
  8036b4:	e13ff917 	ldw	r4,-28(fp)
  8036b8:	0805f300 	call	805f30 <file_normalToFatName>
  8036bc:	e0bff915 	stw	r2,-28(fp)
  8036c0:	e0bff917 	ldw	r2,-28(fp)
  8036c4:	1004c03a 	cmpne	r2,r2,zero
  8036c8:	103ff21e 	bne	r2,zero,803694 <dir_getFatFileName+0x68>
		memCpy(ffnamec,fatfilename,11);	
		nn++;
	}
	if(nn)return(1);
  8036cc:	e0bff807 	ldb	r2,-32(fp)
  8036d0:	1005003a 	cmpeq	r2,r2,zero
  8036d4:	1000031e 	bne	r2,zero,8036e4 <dir_getFatFileName+0xb8>
  8036d8:	00800044 	movi	r2,1
  8036dc:	e0bfff15 	stw	r2,-4(fp)
  8036e0:	00000106 	br	8036e8 <dir_getFatFileName+0xbc>
	return(0);
  8036e4:	e03fff15 	stw	zero,-4(fp)
  8036e8:	e0bfff17 	ldw	r2,-4(fp)
}
  8036ec:	e037883a 	mov	sp,fp
  8036f0:	dfc00117 	ldw	ra,4(sp)
  8036f4:	df000017 	ldw	fp,0(sp)
  8036f8:	dec00204 	addi	sp,sp,8
  8036fc:	f800283a 	ret

00803700 <dir_addCluster>:
 * clusters you want pre-allocated. It will also delete the contents of that
 * cluster. (or clusters)
 * Return value: 0 on success, -1 on fail
*/
esint8 dir_addCluster(FileSystem *fs,euint32 firstCluster)
{
  803700:	defff304 	addi	sp,sp,-52
  803704:	dfc00c15 	stw	ra,48(sp)
  803708:	df000b15 	stw	fp,44(sp)
  80370c:	df000b04 	addi	fp,sp,44
  803710:	e13ffd15 	stw	r4,-12(fp)
  803714:	e17ffe15 	stw	r5,-8(fp)
	euint32 lastc,logicalc;
	ClusterChain cache;
		
	fs_initClusterChain(fs,&cache,firstCluster);
  803718:	e17ff704 	addi	r5,fp,-36
  80371c:	e13ffd17 	ldw	r4,-12(fp)
  803720:	e1bffe17 	ldw	r6,-8(fp)
  803724:	08072800 	call	807280 <fs_initClusterChain>
	if(fat_allocClusterChain(fs,&cache,1)){
  803728:	e17ff704 	addi	r5,fp,-36
  80372c:	e13ffd17 	ldw	r4,-12(fp)
  803730:	01800044 	movi	r6,1
  803734:	0804c7c0 	call	804c7c <fat_allocClusterChain>
  803738:	10bfffcc 	andi	r2,r2,65535
  80373c:	10a0001c 	xori	r2,r2,32768
  803740:	10a00004 	addi	r2,r2,-32768
  803744:	1005003a 	cmpeq	r2,r2,zero
  803748:	1000031e 	bne	r2,zero,803758 <dir_addCluster+0x58>
		return(-1);
  80374c:	00bfffc4 	movi	r2,-1
  803750:	e0bfff15 	stw	r2,-4(fp)
  803754:	00000806 	br	803778 <dir_addCluster+0x78>
	}
	lastc = fs_getLastCluster(fs,&cache);
  803758:	e17ff704 	addi	r5,fp,-36
  80375c:	e13ffd17 	ldw	r4,-12(fp)
  803760:	08071540 	call	807154 <fs_getLastCluster>
  803764:	e0bff615 	stw	r2,-40(fp)
		logicalc = fat_DiscToLogicCluster(fs,firstCluster,lastc);
		while(!fat_LogicToDiscCluster(fs,&cache,++logicalc)){
			fs_clearCluster(fs,cache.DiscCluster);
		}
	}else{
			fs_clearCluster(fs,lastc);
  803768:	e13ffd17 	ldw	r4,-12(fp)
  80376c:	e17ff617 	ldw	r5,-40(fp)
  803770:	08073b00 	call	8073b0 <fs_clearCluster>
	}
	return(0);
  803774:	e03fff15 	stw	zero,-4(fp)
  803778:	e0bfff17 	ldw	r2,-4(fp)
}
  80377c:	e037883a 	mov	sp,fp
  803780:	dfc00117 	ldw	ra,4(sp)
  803784:	df000017 	ldw	fp,0(sp)
  803788:	dec00204 	addi	sp,sp,8
  80378c:	f800283a 	ret

00803790 <disc_initDisc>:
 * void disc_initDisc(Disc *disc,hcInterface* source)
 * Description: This initialises the disc by loading the MBR and setting the
 * pointer to the hardware object.
*/
void disc_initDisc(Disc *disc,IOManager* ioman)
{
  803790:	defffc04 	addi	sp,sp,-16
  803794:	dfc00315 	stw	ra,12(sp)
  803798:	df000215 	stw	fp,8(sp)
  80379c:	df000204 	addi	fp,sp,8
  8037a0:	e13ffe15 	stw	r4,-8(fp)
  8037a4:	e17fff15 	stw	r5,-4(fp)
	disc->ioman=ioman;
  8037a8:	e0bffe17 	ldw	r2,-8(fp)
  8037ac:	e0ffff17 	ldw	r3,-4(fp)
  8037b0:	10c00015 	stw	r3,0(r2)
	disc_setError(disc,DISC_NOERROR);
  8037b4:	e0bffe17 	ldw	r2,-8(fp)
  8037b8:	10000105 	stb	zero,4(r2)
	disc_loadMBR(disc);
  8037bc:	e13ffe17 	ldw	r4,-8(fp)
  8037c0:	08037d80 	call	8037d8 <disc_loadMBR>
}
  8037c4:	e037883a 	mov	sp,fp
  8037c8:	dfc00117 	ldw	ra,4(sp)
  8037cc:	df000017 	ldw	fp,0(sp)
  8037d0:	dec00204 	addi	sp,sp,8
  8037d4:	f800283a 	ret

008037d8 <disc_loadMBR>:
/* ****************************************************************************  
 * void disc_loadMBR(Disc *disc)
 * Description: This functions copies the partitiontable to the partitions field.
*/
void disc_loadMBR(Disc *disc)
{
  8037d8:	defffb04 	addi	sp,sp,-20
  8037dc:	dfc00415 	stw	ra,16(sp)
  8037e0:	df000315 	stw	fp,12(sp)
  8037e4:	df000304 	addi	fp,sp,12
  8037e8:	e13fff15 	stw	r4,-4(fp)
	euint8 x;
	euint8 *buf;
	
	buf=ioman_getSector(disc->ioman,LBA_ADDR_MBR,IOM_MODE_READONLY|IOM_MODE_EXP_REQ);
  8037ec:	e0bfff17 	ldw	r2,-4(fp)
  8037f0:	11000017 	ldw	r4,0(r2)
  8037f4:	000b883a 	mov	r5,zero
  8037f8:	01800144 	movi	r6,5
  8037fc:	0808bfc0 	call	808bfc <ioman_getSector>
  803800:	e0bffd15 	stw	r2,-12(fp)
	for(x=0;x<4;x++){
  803804:	e03ffe05 	stb	zero,-8(fp)
  803808:	00000e06 	br	803844 <disc_loadMBR+0x6c>
		ex_getPartitionField(buf,&(disc->partitions[x]),PARTITION_TABLE_OFFSET+(x*SIZE_PARTITION_FIELD));
  80380c:	e0bfff17 	ldw	r2,-4(fp)
  803810:	10c00204 	addi	r3,r2,8
  803814:	e0bffe03 	ldbu	r2,-8(fp)
  803818:	1004913a 	slli	r2,r2,4
  80381c:	188b883a 	add	r5,r3,r2
  803820:	e0bffe03 	ldbu	r2,-8(fp)
  803824:	1004913a 	slli	r2,r2,4
  803828:	10806f84 	addi	r2,r2,446
  80382c:	100d883a 	mov	r6,r2
  803830:	e13ffd17 	ldw	r4,-12(fp)
  803834:	0803b7c0 	call	803b7c <ex_getPartitionField>
{
	euint8 x;
	euint8 *buf;
	
	buf=ioman_getSector(disc->ioman,LBA_ADDR_MBR,IOM_MODE_READONLY|IOM_MODE_EXP_REQ);
	for(x=0;x<4;x++){
  803838:	e0bffe03 	ldbu	r2,-8(fp)
  80383c:	10800044 	addi	r2,r2,1
  803840:	e0bffe05 	stb	r2,-8(fp)
  803844:	e0bffe03 	ldbu	r2,-8(fp)
  803848:	10800130 	cmpltui	r2,r2,4
  80384c:	103fef1e 	bne	r2,zero,80380c <disc_loadMBR+0x34>
		ex_getPartitionField(buf,&(disc->partitions[x]),PARTITION_TABLE_OFFSET+(x*SIZE_PARTITION_FIELD));
	}
	ioman_releaseSector(disc->ioman,buf);
  803850:	e0bfff17 	ldw	r2,-4(fp)
  803854:	11000017 	ldw	r4,0(r2)
  803858:	e17ffd17 	ldw	r5,-12(fp)
  80385c:	0808f080 	call	808f08 <ioman_releaseSector>
}
  803860:	e037883a 	mov	sp,fp
  803864:	dfc00117 	ldw	ra,4(sp)
  803868:	df000017 	ldw	fp,0(sp)
  80386c:	dec00204 	addi	sp,sp,8
  803870:	f800283a 	ret

00803874 <efs_init>:
 * Description: This function initialises all subelements of a filesystem.
 * It sets the pointerchain and verifies each step.
 * Return value: 0 on success and -1 on failure.
*/
esint8 efs_init(EmbeddedFileSystem * efs,eint8* opts)
{
  803874:	defffb04 	addi	sp,sp,-20
  803878:	dfc00415 	stw	ra,16(sp)
  80387c:	df000315 	stw	fp,12(sp)
  803880:	df000304 	addi	fp,sp,12
  803884:	e13ffd15 	stw	r4,-12(fp)
  803888:	e17ffe15 	stw	r5,-8(fp)
	if(if_initInterface(&efs->myCard, opts)==0)
  80388c:	e13ffd17 	ldw	r4,-12(fp)
  803890:	e17ffe17 	ldw	r5,-8(fp)
  803894:	0809d8c0 	call	809d8c <if_initInterface>
  803898:	10803fcc 	andi	r2,r2,255
  80389c:	1080201c 	xori	r2,r2,128
  8038a0:	10bfe004 	addi	r2,r2,-128
  8038a4:	1004c03a 	cmpne	r2,r2,zero
  8038a8:	1000341e 	bne	r2,zero,80397c <efs_init+0x108>
	{
		ioman_init(&efs->myIOman,&efs->myCard,0);
  8038ac:	e0bffd17 	ldw	r2,-12(fp)
  8038b0:	11000104 	addi	r4,r2,4
  8038b4:	e17ffd17 	ldw	r5,-12(fp)
  8038b8:	000d883a 	mov	r6,zero
  8038bc:	080762c0 	call	80762c <ioman_init>
		disc_initDisc(&efs->myDisc, &efs->myIOman);
  8038c0:	e0bffd17 	ldw	r2,-12(fp)
  8038c4:	11022504 	addi	r4,r2,2196
  8038c8:	e0bffd17 	ldw	r2,-12(fp)
  8038cc:	11400104 	addi	r5,r2,4
  8038d0:	08037900 	call	803790 <disc_initDisc>
		part_initPartition(&efs->myPart, &efs->myDisc);
  8038d4:	e0bffd17 	ldw	r2,-12(fp)
  8038d8:	11023704 	addi	r4,r2,2268
  8038dc:	e0bffd17 	ldw	r2,-12(fp)
  8038e0:	11422504 	addi	r5,r2,2196
  8038e4:	080a3800 	call	80a380 <part_initPartition>
		if(efs->myPart.activePartition==-1){
  8038e8:	e0bffd17 	ldw	r2,-12(fp)
  8038ec:	10823803 	ldbu	r2,2272(r2)
  8038f0:	10803fcc 	andi	r2,r2,255
  8038f4:	1080201c 	xori	r2,r2,128
  8038f8:	10bfe004 	addi	r2,r2,-128
  8038fc:	10bfffd8 	cmpnei	r2,r2,-1
  803900:	10000f1e 	bne	r2,zero,803940 <efs_init+0xcc>
			efs->myDisc.partitions[0].type=0x0B;
  803904:	e0fffd17 	ldw	r3,-12(fp)
  803908:	008002c4 	movi	r2,11
  80390c:	18822805 	stb	r2,2208(r3)
			efs->myDisc.partitions[0].LBA_begin=0;
  803910:	e0bffd17 	ldw	r2,-12(fp)
  803914:	10022915 	stw	zero,2212(r2)
			efs->myDisc.partitions[0].numSectors=efs->myCard.sectorCount;	
  803918:	e0bffd17 	ldw	r2,-12(fp)
  80391c:	10800017 	ldw	r2,0(r2)
  803920:	1007883a 	mov	r3,r2
  803924:	e0bffd17 	ldw	r2,-12(fp)
  803928:	10c22a15 	stw	r3,2216(r2)
			/*efs->myPart.activePartition = 0;*/
			/*efs->myPart.disc = &(efs->myDisc);*/
			part_initPartition(&efs->myPart, &efs->myDisc);
  80392c:	e0bffd17 	ldw	r2,-12(fp)
  803930:	11023704 	addi	r4,r2,2268
  803934:	e0bffd17 	ldw	r2,-12(fp)
  803938:	11422504 	addi	r5,r2,2196
  80393c:	080a3800 	call	80a380 <part_initPartition>
		}
		/*part_initPartition(&efs->myPart, &efs->myDisc);*/
		if(fs_initFs(&efs->myFs, &efs->myPart))
  803940:	e0bffd17 	ldw	r2,-12(fp)
  803944:	11023904 	addi	r4,r2,2276
  803948:	e0bffd17 	ldw	r2,-12(fp)
  80394c:	11423704 	addi	r5,r2,2268
  803950:	08064b00 	call	8064b0 <fs_initFs>
  803954:	10bfffcc 	andi	r2,r2,65535
  803958:	10a0001c 	xori	r2,r2,32768
  80395c:	10a00004 	addi	r2,r2,-32768
  803960:	1005003a 	cmpeq	r2,r2,zero
  803964:	1000031e 	bne	r2,zero,803974 <efs_init+0x100>
			return(-2);
  803968:	00bfff84 	movi	r2,-2
  80396c:	e0bfff15 	stw	r2,-4(fp)
  803970:	00000406 	br	803984 <efs_init+0x110>
		return(0);
  803974:	e03fff15 	stw	zero,-4(fp)
  803978:	00000206 	br	803984 <efs_init+0x110>
	}
	return(-1);
  80397c:	00bfffc4 	movi	r2,-1
  803980:	e0bfff15 	stw	r2,-4(fp)
  803984:	e0bfff17 	ldw	r2,-4(fp)
}
  803988:	e037883a 	mov	sp,fp
  80398c:	dfc00117 	ldw	ra,4(sp)
  803990:	df000017 	ldw	fp,0(sp)
  803994:	dec00204 	addi	sp,sp,8
  803998:	f800283a 	ret

0080399c <ex_getb16>:
/*****************************************************************************/



euint16 ex_getb16(euint8* buf,euint32 offset)
{
  80399c:	defffd04 	addi	sp,sp,-12
  8039a0:	df000215 	stw	fp,8(sp)
  8039a4:	df000204 	addi	fp,sp,8
  8039a8:	e13ffe15 	stw	r4,-8(fp)
  8039ac:	e17fff15 	stw	r5,-4(fp)
	return(ltb_end16(((*(buf+offset+1))<<8) + ((*(buf+offset+0))<<0)));
  8039b0:	e0ffff17 	ldw	r3,-4(fp)
  8039b4:	e0bffe17 	ldw	r2,-8(fp)
  8039b8:	1885883a 	add	r2,r3,r2
  8039bc:	10800044 	addi	r2,r2,1
  8039c0:	10800003 	ldbu	r2,0(r2)
  8039c4:	10803fcc 	andi	r2,r2,255
  8039c8:	1004923a 	slli	r2,r2,8
  8039cc:	1009883a 	mov	r4,r2
  8039d0:	e0ffff17 	ldw	r3,-4(fp)
  8039d4:	e0bffe17 	ldw	r2,-8(fp)
  8039d8:	1885883a 	add	r2,r3,r2
  8039dc:	10800003 	ldbu	r2,0(r2)
  8039e0:	10803fcc 	andi	r2,r2,255
  8039e4:	2085883a 	add	r2,r4,r2
  8039e8:	10bfffcc 	andi	r2,r2,65535
}
  8039ec:	e037883a 	mov	sp,fp
  8039f0:	df000017 	ldw	fp,0(sp)
  8039f4:	dec00104 	addi	sp,sp,4
  8039f8:	f800283a 	ret

008039fc <ex_getb32>:
/*****************************************************************************/

euint32 ex_getb32(euint8* buf,euint32 offset)
{
  8039fc:	defffd04 	addi	sp,sp,-12
  803a00:	df000215 	stw	fp,8(sp)
  803a04:	df000204 	addi	fp,sp,8
  803a08:	e13ffe15 	stw	r4,-8(fp)
  803a0c:	e17fff15 	stw	r5,-4(fp)
	return(ltb_end32(((euint32)buf[offset+3]<<24)+
  803a10:	e0ffff17 	ldw	r3,-4(fp)
  803a14:	e0bffe17 	ldw	r2,-8(fp)
  803a18:	1885883a 	add	r2,r3,r2
  803a1c:	108000c4 	addi	r2,r2,3
  803a20:	10800003 	ldbu	r2,0(r2)
  803a24:	10803fcc 	andi	r2,r2,255
  803a28:	1008963a 	slli	r4,r2,24
  803a2c:	e0ffff17 	ldw	r3,-4(fp)
  803a30:	e0bffe17 	ldw	r2,-8(fp)
  803a34:	1885883a 	add	r2,r3,r2
  803a38:	10800084 	addi	r2,r2,2
  803a3c:	10800003 	ldbu	r2,0(r2)
  803a40:	10803fcc 	andi	r2,r2,255
  803a44:	1004943a 	slli	r2,r2,16
  803a48:	2089883a 	add	r4,r4,r2
  803a4c:	e0ffff17 	ldw	r3,-4(fp)
  803a50:	e0bffe17 	ldw	r2,-8(fp)
  803a54:	1885883a 	add	r2,r3,r2
  803a58:	10800044 	addi	r2,r2,1
  803a5c:	10800003 	ldbu	r2,0(r2)
  803a60:	10803fcc 	andi	r2,r2,255
  803a64:	1004923a 	slli	r2,r2,8
  803a68:	2089883a 	add	r4,r4,r2
  803a6c:	e0ffff17 	ldw	r3,-4(fp)
  803a70:	e0bffe17 	ldw	r2,-8(fp)
  803a74:	1885883a 	add	r2,r3,r2
  803a78:	10800003 	ldbu	r2,0(r2)
  803a7c:	10803fcc 	andi	r2,r2,255
  803a80:	2085883a 	add	r2,r4,r2
	      ((euint32)buf[offset+2]<<16)+
	      ((euint32)buf[offset+1]<<8)+
	      ((euint32)buf[offset+0]<<0)));
}
  803a84:	e037883a 	mov	sp,fp
  803a88:	df000017 	ldw	fp,0(sp)
  803a8c:	dec00104 	addi	sp,sp,4
  803a90:	f800283a 	ret

00803a94 <ex_setb16>:
/*****************************************************************************/

void ex_setb16(euint8* buf,euint32 offset,euint16 data)
{
  803a94:	defffc04 	addi	sp,sp,-16
  803a98:	df000315 	stw	fp,12(sp)
  803a9c:	df000304 	addi	fp,sp,12
  803aa0:	e13ffd15 	stw	r4,-12(fp)
  803aa4:	e17ffe15 	stw	r5,-8(fp)
  803aa8:	e1bfff0d 	sth	r6,-4(fp)
#ifdef BIG_ENDIAN
	*(buf+offset+1) = data>>0;
	*(buf+offset+0) = data>>8;
#else
	*(buf+offset+0) = data>>0;
  803aac:	e0fffe17 	ldw	r3,-8(fp)
  803ab0:	e0bffd17 	ldw	r2,-12(fp)
  803ab4:	1887883a 	add	r3,r3,r2
  803ab8:	e0bfff0b 	ldhu	r2,-4(fp)
  803abc:	18800005 	stb	r2,0(r3)
	*(buf+offset+1) = data>>8;
  803ac0:	e0fffe17 	ldw	r3,-8(fp)
  803ac4:	e0bffd17 	ldw	r2,-12(fp)
  803ac8:	1885883a 	add	r2,r3,r2
  803acc:	10c00044 	addi	r3,r2,1
  803ad0:	e0bfff0b 	ldhu	r2,-4(fp)
  803ad4:	1004d23a 	srli	r2,r2,8
  803ad8:	18800005 	stb	r2,0(r3)
#endif
}
  803adc:	e037883a 	mov	sp,fp
  803ae0:	df000017 	ldw	fp,0(sp)
  803ae4:	dec00104 	addi	sp,sp,4
  803ae8:	f800283a 	ret

00803aec <ex_setb32>:
/*****************************************************************************/

void ex_setb32(euint8* buf,euint32 offset,euint32 data)
{
  803aec:	defffc04 	addi	sp,sp,-16
  803af0:	df000315 	stw	fp,12(sp)
  803af4:	df000304 	addi	fp,sp,12
  803af8:	e13ffd15 	stw	r4,-12(fp)
  803afc:	e17ffe15 	stw	r5,-8(fp)
  803b00:	e1bfff15 	stw	r6,-4(fp)
	*(buf+offset+3) = data>> 0;
	*(buf+offset+2) = data>> 8;
	*(buf+offset+1) = data>>16;
	*(buf+offset+0) = data>>24;
#else
	*(buf+offset+0) = data>> 0;
  803b04:	e0fffe17 	ldw	r3,-8(fp)
  803b08:	e0bffd17 	ldw	r2,-12(fp)
  803b0c:	1887883a 	add	r3,r3,r2
  803b10:	e0bfff17 	ldw	r2,-4(fp)
  803b14:	18800005 	stb	r2,0(r3)
	*(buf+offset+1) = data>> 8;
  803b18:	e0fffe17 	ldw	r3,-8(fp)
  803b1c:	e0bffd17 	ldw	r2,-12(fp)
  803b20:	1885883a 	add	r2,r3,r2
  803b24:	10c00044 	addi	r3,r2,1
  803b28:	e0bfff17 	ldw	r2,-4(fp)
  803b2c:	1004d23a 	srli	r2,r2,8
  803b30:	18800005 	stb	r2,0(r3)
	*(buf+offset+2) = data>>16;
  803b34:	e0fffe17 	ldw	r3,-8(fp)
  803b38:	e0bffd17 	ldw	r2,-12(fp)
  803b3c:	1885883a 	add	r2,r3,r2
  803b40:	10c00084 	addi	r3,r2,2
  803b44:	e0bfff17 	ldw	r2,-4(fp)
  803b48:	1004d43a 	srli	r2,r2,16
  803b4c:	18800005 	stb	r2,0(r3)
	*(buf+offset+3) = data>>24;
  803b50:	e0fffe17 	ldw	r3,-8(fp)
  803b54:	e0bffd17 	ldw	r2,-12(fp)
  803b58:	1885883a 	add	r2,r3,r2
  803b5c:	10c000c4 	addi	r3,r2,3
  803b60:	e0bfff17 	ldw	r2,-4(fp)
  803b64:	1004d63a 	srli	r2,r2,24
  803b68:	18800005 	stb	r2,0(r3)
#endif
}
  803b6c:	e037883a 	mov	sp,fp
  803b70:	df000017 	ldw	fp,0(sp)
  803b74:	dec00104 	addi	sp,sp,4
  803b78:	f800283a 	ret

00803b7c <ex_getPartitionField>:
/*****************************************************************************/

void ex_getPartitionField(euint8* buf,PartitionField* pf, euint32 offset)
{
  803b7c:	defffb04 	addi	sp,sp,-20
  803b80:	dfc00415 	stw	ra,16(sp)
  803b84:	df000315 	stw	fp,12(sp)
  803b88:	df000304 	addi	fp,sp,12
  803b8c:	e13ffd15 	stw	r4,-12(fp)
  803b90:	e17ffe15 	stw	r5,-8(fp)
  803b94:	e1bfff15 	stw	r6,-4(fp)
	pf->bootFlag       = *(buf + offset);
  803b98:	e0ffff17 	ldw	r3,-4(fp)
  803b9c:	e0bffd17 	ldw	r2,-12(fp)
  803ba0:	1885883a 	add	r2,r3,r2
  803ba4:	10c00003 	ldbu	r3,0(r2)
  803ba8:	e0bffe17 	ldw	r2,-8(fp)
  803bac:	10c00005 	stb	r3,0(r2)
	pf->CHS_begin[0]   = *(buf + offset + 1);
  803bb0:	e0ffff17 	ldw	r3,-4(fp)
  803bb4:	e0bffd17 	ldw	r2,-12(fp)
  803bb8:	1885883a 	add	r2,r3,r2
  803bbc:	10800044 	addi	r2,r2,1
  803bc0:	10c00003 	ldbu	r3,0(r2)
  803bc4:	e0bffe17 	ldw	r2,-8(fp)
  803bc8:	10c00045 	stb	r3,1(r2)
	pf->CHS_begin[1]   = *(buf + offset + 2);
  803bcc:	e0ffff17 	ldw	r3,-4(fp)
  803bd0:	e0bffd17 	ldw	r2,-12(fp)
  803bd4:	1885883a 	add	r2,r3,r2
  803bd8:	10800084 	addi	r2,r2,2
  803bdc:	10c00003 	ldbu	r3,0(r2)
  803be0:	e0bffe17 	ldw	r2,-8(fp)
  803be4:	10c00085 	stb	r3,2(r2)
	pf->CHS_begin[2]   = *(buf + offset + 3);
  803be8:	e0ffff17 	ldw	r3,-4(fp)
  803bec:	e0bffd17 	ldw	r2,-12(fp)
  803bf0:	1885883a 	add	r2,r3,r2
  803bf4:	108000c4 	addi	r2,r2,3
  803bf8:	10c00003 	ldbu	r3,0(r2)
  803bfc:	e0bffe17 	ldw	r2,-8(fp)
  803c00:	10c000c5 	stb	r3,3(r2)
	pf->type           = *(buf + offset + 4);
  803c04:	e0ffff17 	ldw	r3,-4(fp)
  803c08:	e0bffd17 	ldw	r2,-12(fp)
  803c0c:	1885883a 	add	r2,r3,r2
  803c10:	10800104 	addi	r2,r2,4
  803c14:	10c00003 	ldbu	r3,0(r2)
  803c18:	e0bffe17 	ldw	r2,-8(fp)
  803c1c:	10c00105 	stb	r3,4(r2)
	pf->CHS_end[0]     = *(buf + offset + 5);
  803c20:	e0ffff17 	ldw	r3,-4(fp)
  803c24:	e0bffd17 	ldw	r2,-12(fp)
  803c28:	1885883a 	add	r2,r3,r2
  803c2c:	10800144 	addi	r2,r2,5
  803c30:	10c00003 	ldbu	r3,0(r2)
  803c34:	e0bffe17 	ldw	r2,-8(fp)
  803c38:	10c00145 	stb	r3,5(r2)
	pf->CHS_end[1]     = *(buf + offset + 6);
  803c3c:	e0ffff17 	ldw	r3,-4(fp)
  803c40:	e0bffd17 	ldw	r2,-12(fp)
  803c44:	1885883a 	add	r2,r3,r2
  803c48:	10800184 	addi	r2,r2,6
  803c4c:	10c00003 	ldbu	r3,0(r2)
  803c50:	e0bffe17 	ldw	r2,-8(fp)
  803c54:	10c00185 	stb	r3,6(r2)
	pf->CHS_end[2]     = *(buf + offset + 7);
  803c58:	e0ffff17 	ldw	r3,-4(fp)
  803c5c:	e0bffd17 	ldw	r2,-12(fp)
  803c60:	1885883a 	add	r2,r3,r2
  803c64:	108001c4 	addi	r2,r2,7
  803c68:	10c00003 	ldbu	r3,0(r2)
  803c6c:	e0bffe17 	ldw	r2,-8(fp)
  803c70:	10c001c5 	stb	r3,7(r2)
	pf->LBA_begin      = ex_getb32(buf + offset,8);
  803c74:	e0ffff17 	ldw	r3,-4(fp)
  803c78:	e0bffd17 	ldw	r2,-12(fp)
  803c7c:	1889883a 	add	r4,r3,r2
  803c80:	01400204 	movi	r5,8
  803c84:	08039fc0 	call	8039fc <ex_getb32>
  803c88:	1007883a 	mov	r3,r2
  803c8c:	e0bffe17 	ldw	r2,-8(fp)
  803c90:	10c00215 	stw	r3,8(r2)
	pf->numSectors     = ex_getb32(buf + offset,12);
  803c94:	e0ffff17 	ldw	r3,-4(fp)
  803c98:	e0bffd17 	ldw	r2,-12(fp)
  803c9c:	1889883a 	add	r4,r3,r2
  803ca0:	01400304 	movi	r5,12
  803ca4:	08039fc0 	call	8039fc <ex_getb32>
  803ca8:	1007883a 	mov	r3,r2
  803cac:	e0bffe17 	ldw	r2,-8(fp)
  803cb0:	10c00315 	stw	r3,12(r2)
}
  803cb4:	e037883a 	mov	sp,fp
  803cb8:	dfc00117 	ldw	ra,4(sp)
  803cbc:	df000017 	ldw	fp,0(sp)
  803cc0:	dec00204 	addi	sp,sp,8
  803cc4:	f800283a 	ret

00803cc8 <ex_setPartitionField>:
/*****************************************************************************/

void ex_setPartitionField(euint8* buf,PartitionField* pf, euint32 offset)
{
  803cc8:	defffc04 	addi	sp,sp,-16
  803ccc:	df000315 	stw	fp,12(sp)
  803cd0:	df000304 	addi	fp,sp,12
  803cd4:	e13ffd15 	stw	r4,-12(fp)
  803cd8:	e17ffe15 	stw	r5,-8(fp)
  803cdc:	e1bfff15 	stw	r6,-4(fp)

}
  803ce0:	e037883a 	mov	sp,fp
  803ce4:	df000017 	ldw	fp,0(sp)
  803ce8:	dec00104 	addi	sp,sp,4
  803cec:	f800283a 	ret

00803cf0 <fat_getSectorAddressFatEntry>:
 * Description: Returns the sectornumber that holds the fat entry for cluster cluster_addr.
 * This works for all FAT types.
 * Return value: Sectornumber, or 0. Warning, no boundary check.
*/
euint32 fat_getSectorAddressFatEntry(FileSystem *fs,euint32 cluster_addr)
{ 
  803cf0:	defff904 	addi	sp,sp,-28
  803cf4:	df000615 	stw	fp,24(sp)
  803cf8:	df000604 	addi	fp,sp,24
  803cfc:	e13ffc15 	stw	r4,-16(fp)
  803d00:	e17ffd15 	stw	r5,-12(fp)
	euint32 base = fs->volumeId.ReservedSectorCount,res;
  803d04:	e0bffc17 	ldw	r2,-16(fp)
  803d08:	1080020b 	ldhu	r2,8(r2)
  803d0c:	10bfffcc 	andi	r2,r2,65535
  803d10:	e0bffb15 	stw	r2,-20(fp)
	
	switch(fs->type){
  803d14:	e0bffc17 	ldw	r2,-16(fp)
  803d18:	10800f03 	ldbu	r2,60(r2)
  803d1c:	10803fcc 	andi	r2,r2,255
  803d20:	e0bfff15 	stw	r2,-4(fp)
  803d24:	e0ffff17 	ldw	r3,-4(fp)
  803d28:	188000a0 	cmpeqi	r2,r3,2
  803d2c:	1000181e 	bne	r2,zero,803d90 <fat_getSectorAddressFatEntry+0xa0>
  803d30:	e0ffff17 	ldw	r3,-4(fp)
  803d34:	188000e0 	cmpeqi	r2,r3,3
  803d38:	1000231e 	bne	r2,zero,803dc8 <fat_getSectorAddressFatEntry+0xd8>
  803d3c:	e0ffff17 	ldw	r3,-4(fp)
  803d40:	18800060 	cmpeqi	r2,r3,1
  803d44:	1000011e 	bne	r2,zero,803d4c <fat_getSectorAddressFatEntry+0x5c>
  803d48:	00002d06 	br	803e00 <fat_getSectorAddressFatEntry+0x110>
		case FAT12:
			res=(cluster_addr*3/1024);
  803d4c:	e0fffd17 	ldw	r3,-12(fp)
  803d50:	1805883a 	mov	r2,r3
  803d54:	1085883a 	add	r2,r2,r2
  803d58:	10c5883a 	add	r2,r2,r3
  803d5c:	1004d2ba 	srli	r2,r2,10
  803d60:	e0bffa15 	stw	r2,-24(fp)
			if(res>=fs->FatSectorCount){
  803d64:	e0bffc17 	ldw	r2,-16(fp)
  803d68:	10c00917 	ldw	r3,36(r2)
  803d6c:	e0bffa17 	ldw	r2,-24(fp)
  803d70:	10c00236 	bltu	r2,r3,803d7c <fat_getSectorAddressFatEntry+0x8c>
				return(0);
  803d74:	e03ffe15 	stw	zero,-8(fp)
  803d78:	00002206 	br	803e04 <fat_getSectorAddressFatEntry+0x114>
			}else{
				return(base+res);
  803d7c:	e0fffb17 	ldw	r3,-20(fp)
  803d80:	e0bffa17 	ldw	r2,-24(fp)
  803d84:	1887883a 	add	r3,r3,r2
  803d88:	e0fffe15 	stw	r3,-8(fp)
  803d8c:	00001d06 	br	803e04 <fat_getSectorAddressFatEntry+0x114>
			}
			break;
		case FAT16:
			res=cluster_addr/256;
  803d90:	e0bffd17 	ldw	r2,-12(fp)
  803d94:	1004d23a 	srli	r2,r2,8
  803d98:	e0bffa15 	stw	r2,-24(fp)
			if(res>=fs->FatSectorCount){
  803d9c:	e0bffc17 	ldw	r2,-16(fp)
  803da0:	10c00917 	ldw	r3,36(r2)
  803da4:	e0bffa17 	ldw	r2,-24(fp)
  803da8:	10c00236 	bltu	r2,r3,803db4 <fat_getSectorAddressFatEntry+0xc4>
				return(0);
  803dac:	e03ffe15 	stw	zero,-8(fp)
  803db0:	00001406 	br	803e04 <fat_getSectorAddressFatEntry+0x114>
			}else{
				return(base+res);
  803db4:	e0fffb17 	ldw	r3,-20(fp)
  803db8:	e0bffa17 	ldw	r2,-24(fp)
  803dbc:	1887883a 	add	r3,r3,r2
  803dc0:	e0fffe15 	stw	r3,-8(fp)
  803dc4:	00000f06 	br	803e04 <fat_getSectorAddressFatEntry+0x114>
			}
			break;
		case FAT32:
			res=cluster_addr/128;
  803dc8:	e0bffd17 	ldw	r2,-12(fp)
  803dcc:	1004d1fa 	srli	r2,r2,7
  803dd0:	e0bffa15 	stw	r2,-24(fp)
			if(res>=fs->FatSectorCount){
  803dd4:	e0bffc17 	ldw	r2,-16(fp)
  803dd8:	10c00917 	ldw	r3,36(r2)
  803ddc:	e0bffa17 	ldw	r2,-24(fp)
  803de0:	10c00236 	bltu	r2,r3,803dec <fat_getSectorAddressFatEntry+0xfc>
				return(0);
  803de4:	e03ffe15 	stw	zero,-8(fp)
  803de8:	00000606 	br	803e04 <fat_getSectorAddressFatEntry+0x114>
			}else{
				return(base+res);
  803dec:	e0fffb17 	ldw	r3,-20(fp)
  803df0:	e0bffa17 	ldw	r2,-24(fp)
  803df4:	1887883a 	add	r3,r3,r2
  803df8:	e0fffe15 	stw	r3,-8(fp)
  803dfc:	00000106 	br	803e04 <fat_getSectorAddressFatEntry+0x114>
			}
			break; 
	}
	return(0);
  803e00:	e03ffe15 	stw	zero,-8(fp)
  803e04:	e0bffe17 	ldw	r2,-8(fp)
}
  803e08:	e037883a 	mov	sp,fp
  803e0c:	df000017 	ldw	fp,0(sp)
  803e10:	dec00104 	addi	sp,sp,4
  803e14:	f800283a 	ret

00803e18 <fat_getNextClusterAddress>:
 * for cluster_addr. It then fetches and (if required) calculates it's value.
 * This value is the EoC marker -or- the number of the next cluster in the chain.
 * Return value: Clusternumber or EoC
*/
euint32 fat_getNextClusterAddress(FileSystem *fs,euint32 cluster_addr,euint16 *linear)
{
  803e18:	defff504 	addi	sp,sp,-44
  803e1c:	dfc00a15 	stw	ra,40(sp)
  803e20:	df000915 	stw	fp,36(sp)
  803e24:	df000904 	addi	fp,sp,36
  803e28:	e13ffb15 	stw	r4,-20(fp)
  803e2c:	e17ffc15 	stw	r5,-16(fp)
  803e30:	e1bffd15 	stw	r6,-12(fp)
	euint8 *buf; 
	euint8 hb,lb;
	euint16 offset;
	euint32 sector;
	euint32 nextcluster=0;
  803e34:	e03ff715 	stw	zero,-36(fp)
	
	sector=fat_getSectorAddressFatEntry(fs,cluster_addr);
  803e38:	e13ffb17 	ldw	r4,-20(fp)
  803e3c:	e17ffc17 	ldw	r5,-16(fp)
  803e40:	0803cf00 	call	803cf0 <fat_getSectorAddressFatEntry>
  803e44:	e0bff815 	stw	r2,-32(fp)
	if( (fs->FatSectorCount <= (sector-fs->volumeId.ReservedSectorCount)) || sector==0 )
  803e48:	e0bffb17 	ldw	r2,-20(fp)
  803e4c:	11000917 	ldw	r4,36(r2)
  803e50:	e0bffb17 	ldw	r2,-20(fp)
  803e54:	1080020b 	ldhu	r2,8(r2)
  803e58:	10ffffcc 	andi	r3,r2,65535
  803e5c:	e0bff817 	ldw	r2,-32(fp)
  803e60:	10c5c83a 	sub	r2,r2,r3
  803e64:	1100032e 	bgeu	r2,r4,803e74 <fat_getNextClusterAddress+0x5c>
  803e68:	e0bff817 	ldw	r2,-32(fp)
  803e6c:	1004c03a 	cmpne	r2,r2,zero
  803e70:	1000021e 	bne	r2,zero,803e7c <fat_getNextClusterAddress+0x64>
	{
		return(0);
  803e74:	e03fff15 	stw	zero,-4(fp)
  803e78:	00006b06 	br	804028 <fat_getNextClusterAddress+0x210>
	}
	
	buf=part_getSect(fs->part,sector,IOM_MODE_READONLY);
  803e7c:	e0bffb17 	ldw	r2,-20(fp)
  803e80:	11000017 	ldw	r4,0(r2)
  803e84:	e17ff817 	ldw	r5,-32(fp)
  803e88:	01800044 	movi	r6,1
  803e8c:	080a5e40 	call	80a5e4 <part_getSect>
  803e90:	e0bffa15 	stw	r2,-24(fp)
		
	switch(fs->type)
  803e94:	e0bffb17 	ldw	r2,-20(fp)
  803e98:	10800f03 	ldbu	r2,60(r2)
  803e9c:	10803fcc 	andi	r2,r2,255
  803ea0:	e0bffe15 	stw	r2,-8(fp)
  803ea4:	e0fffe17 	ldw	r3,-8(fp)
  803ea8:	188000a0 	cmpeqi	r2,r3,2
  803eac:	1000411e 	bne	r2,zero,803fb4 <fat_getNextClusterAddress+0x19c>
  803eb0:	e0fffe17 	ldw	r3,-8(fp)
  803eb4:	188000e0 	cmpeqi	r2,r3,3
  803eb8:	10004a1e 	bne	r2,zero,803fe4 <fat_getNextClusterAddress+0x1cc>
  803ebc:	e0fffe17 	ldw	r3,-8(fp)
  803ec0:	18800060 	cmpeqi	r2,r3,1
  803ec4:	1000011e 	bne	r2,zero,803ecc <fat_getNextClusterAddress+0xb4>
  803ec8:	00005106 	br	804010 <fat_getNextClusterAddress+0x1f8>
	{
		case FAT12:
			offset = ((cluster_addr%1024)*3/2)%512;
  803ecc:	e0bffc17 	ldw	r2,-16(fp)
  803ed0:	10c0ffcc 	andi	r3,r2,1023
  803ed4:	1805883a 	mov	r2,r3
  803ed8:	1085883a 	add	r2,r2,r2
  803edc:	10c5883a 	add	r2,r2,r3
  803ee0:	1004d07a 	srli	r2,r2,1
  803ee4:	10807fcc 	andi	r2,r2,511
  803ee8:	e0bff90d 	sth	r2,-28(fp)
			hb = buf[offset];
  803eec:	e0bff90b 	ldhu	r2,-28(fp)
  803ef0:	1007883a 	mov	r3,r2
  803ef4:	e0bffa17 	ldw	r2,-24(fp)
  803ef8:	1885883a 	add	r2,r3,r2
  803efc:	10800003 	ldbu	r2,0(r2)
  803f00:	e0bff9c5 	stb	r2,-25(fp)
			if(offset == 511){
  803f04:	e0bff90b 	ldhu	r2,-28(fp)
  803f08:	10807fd8 	cmpnei	r2,r2,511
  803f0c:	10000f1e 	bne	r2,zero,803f4c <fat_getNextClusterAddress+0x134>
				part_relSect(fs->part,buf);
  803f10:	e0bffb17 	ldw	r2,-20(fp)
  803f14:	11000017 	ldw	r4,0(r2)
  803f18:	e17ffa17 	ldw	r5,-24(fp)
  803f1c:	080a6440 	call	80a644 <part_relSect>
				buf=part_getSect(fs->part,sector+1,IOM_MODE_READONLY);
  803f20:	e0bffb17 	ldw	r2,-20(fp)
  803f24:	11000017 	ldw	r4,0(r2)
  803f28:	e0bff817 	ldw	r2,-32(fp)
  803f2c:	11400044 	addi	r5,r2,1
  803f30:	01800044 	movi	r6,1
  803f34:	080a5e40 	call	80a5e4 <part_getSect>
  803f38:	e0bffa15 	stw	r2,-24(fp)
				lb = buf[0];
  803f3c:	e0bffa17 	ldw	r2,-24(fp)
  803f40:	10800003 	ldbu	r2,0(r2)
  803f44:	e0bff985 	stb	r2,-26(fp)
  803f48:	00000706 	br	803f68 <fat_getNextClusterAddress+0x150>
			}else{
				lb = buf[offset + 1];
  803f4c:	e0bff90b 	ldhu	r2,-28(fp)
  803f50:	1007883a 	mov	r3,r2
  803f54:	e0bffa17 	ldw	r2,-24(fp)
  803f58:	1885883a 	add	r2,r3,r2
  803f5c:	10800044 	addi	r2,r2,1
  803f60:	10800003 	ldbu	r2,0(r2)
  803f64:	e0bff985 	stb	r2,-26(fp)
			}
			if(cluster_addr%2==0){
  803f68:	e0bffc17 	ldw	r2,-16(fp)
  803f6c:	1080004c 	andi	r2,r2,1
  803f70:	1004c03a 	cmpne	r2,r2,zero
  803f74:	1000071e 	bne	r2,zero,803f94 <fat_getNextClusterAddress+0x17c>
				nextcluster = ( ((lb&0x0F)<<8) + (hb) );
  803f78:	e0bff983 	ldbu	r2,-26(fp)
  803f7c:	108003cc 	andi	r2,r2,15
  803f80:	1006923a 	slli	r3,r2,8
  803f84:	e0bff9c3 	ldbu	r2,-25(fp)
  803f88:	1885883a 	add	r2,r3,r2
  803f8c:	e0bff715 	stw	r2,-36(fp)
  803f90:	00001f06 	br	804010 <fat_getNextClusterAddress+0x1f8>
			}else{
				nextcluster = ( (lb<<4) + (hb>>4) );
  803f94:	e0bff983 	ldbu	r2,-26(fp)
  803f98:	1006913a 	slli	r3,r2,4
  803f9c:	e0bff9c3 	ldbu	r2,-25(fp)
  803fa0:	1004d13a 	srli	r2,r2,4
  803fa4:	10803fcc 	andi	r2,r2,255
  803fa8:	1885883a 	add	r2,r3,r2
  803fac:	e0bff715 	stw	r2,-36(fp)
			}
			break;
  803fb0:	00001706 	br	804010 <fat_getNextClusterAddress+0x1f8>
		case FAT16:
			offset=cluster_addr%256;
  803fb4:	e0bffc17 	ldw	r2,-16(fp)
  803fb8:	10803fcc 	andi	r2,r2,255
  803fbc:	e0bff90d 	sth	r2,-28(fp)
			nextcluster = *((euint16 *)buf + offset);
  803fc0:	e0bff90b 	ldhu	r2,-28(fp)
  803fc4:	1085883a 	add	r2,r2,r2
  803fc8:	1007883a 	mov	r3,r2
  803fcc:	e0bffa17 	ldw	r2,-24(fp)
  803fd0:	1885883a 	add	r2,r3,r2
  803fd4:	1080000b 	ldhu	r2,0(r2)
  803fd8:	10bfffcc 	andi	r2,r2,65535
  803fdc:	e0bff715 	stw	r2,-36(fp)
			break;
  803fe0:	00000b06 	br	804010 <fat_getNextClusterAddress+0x1f8>
		case FAT32:
			offset=cluster_addr%128;
  803fe4:	e0bffc17 	ldw	r2,-16(fp)
  803fe8:	10801fcc 	andi	r2,r2,127
  803fec:	e0bff90d 	sth	r2,-28(fp)
			nextcluster = *((euint32 *)buf + offset);
  803ff0:	e0bff90b 	ldhu	r2,-28(fp)
  803ff4:	1085883a 	add	r2,r2,r2
  803ff8:	1085883a 	add	r2,r2,r2
  803ffc:	1007883a 	mov	r3,r2
  804000:	e0bffa17 	ldw	r2,-24(fp)
  804004:	1885883a 	add	r2,r3,r2
  804008:	10800017 	ldw	r2,0(r2)
  80400c:	e0bff715 	stw	r2,-36(fp)
			break;
	}
	
	part_relSect(fs->part,buf);
  804010:	e0bffb17 	ldw	r2,-20(fp)
  804014:	11000017 	ldw	r4,0(r2)
  804018:	e17ffa17 	ldw	r5,-24(fp)
  80401c:	080a6440 	call	80a644 <part_relSect>
	
	return(nextcluster);
  804020:	e0bff717 	ldw	r2,-36(fp)
  804024:	e0bfff15 	stw	r2,-4(fp)
  804028:	e0bfff17 	ldw	r2,-4(fp)
}
  80402c:	e037883a 	mov	sp,fp
  804030:	dfc00117 	ldw	ra,4(sp)
  804034:	df000017 	ldw	fp,0(sp)
  804038:	dec00204 	addi	sp,sp,8
  80403c:	f800283a 	ret

00804040 <fat_setNextClusterAddress>:
 * void fat_setNextClusterAddress(FileSystem *fs,unsigned long cluster_addr,unsigned long next_cluster_addr)
 * Description: This function makes an entry in the fattable for cluster_addr. The value it puts there
 * is next_cluster_addr. 
*/
void fat_setNextClusterAddress(FileSystem *fs,euint32 cluster_addr,euint32 next_cluster_addr)
{
  804040:	defff504 	addi	sp,sp,-44
  804044:	dfc00a15 	stw	ra,40(sp)
  804048:	df000915 	stw	fp,36(sp)
  80404c:	dc000815 	stw	r16,32(sp)
  804050:	df000804 	addi	fp,sp,32
  804054:	e13ffc15 	stw	r4,-16(fp)
  804058:	e17ffd15 	stw	r5,-12(fp)
  80405c:	e1bffe15 	stw	r6,-8(fp)
	euint8 *buf,*buf2; 
	euint16 offset;
	euint32 sector;
	
	sector=fat_getSectorAddressFatEntry(fs,cluster_addr);
  804060:	e13ffc17 	ldw	r4,-16(fp)
  804064:	e17ffd17 	ldw	r5,-12(fp)
  804068:	0803cf00 	call	803cf0 <fat_getSectorAddressFatEntry>
  80406c:	e0bff815 	stw	r2,-32(fp)
	
	if(( fs->FatSectorCount <= (sector - fs->volumeId.ReservedSectorCount )||(sector==0))){
  804070:	e0bffc17 	ldw	r2,-16(fp)
  804074:	11000917 	ldw	r4,36(r2)
  804078:	e0bffc17 	ldw	r2,-16(fp)
  80407c:	1080020b 	ldhu	r2,8(r2)
  804080:	10ffffcc 	andi	r3,r2,65535
  804084:	e0bff817 	ldw	r2,-32(fp)
  804088:	10c5c83a 	sub	r2,r2,r3
  80408c:	1100032e 	bgeu	r2,r4,80409c <fat_setNextClusterAddress+0x5c>
  804090:	e0bff817 	ldw	r2,-32(fp)
  804094:	1004c03a 	cmpne	r2,r2,zero
  804098:	1000041e 	bne	r2,zero,8040ac <fat_setNextClusterAddress+0x6c>
	    DBG((TXT("HARDERROR:::fat_getNextClusterAddress READ PAST FAT BOUNDARY\n")));
  80409c:	010020b4 	movhi	r4,130
  8040a0:	211d6c04 	addi	r4,r4,30128
  8040a4:	08124e00 	call	8124e0 <puts>
	    return;
  8040a8:	0000bc06 	br	80439c <fat_setNextClusterAddress+0x35c>
	}
	
	buf=part_getSect(fs->part,sector,IOM_MODE_READWRITE);
  8040ac:	e0bffc17 	ldw	r2,-16(fp)
  8040b0:	11000017 	ldw	r4,0(r2)
  8040b4:	e17ff817 	ldw	r5,-32(fp)
  8040b8:	01800084 	movi	r6,2
  8040bc:	080a5e40 	call	80a5e4 <part_getSect>
  8040c0:	e0bffb15 	stw	r2,-20(fp)
		
	switch(fs->type){
  8040c4:	e0bffc17 	ldw	r2,-16(fp)
  8040c8:	10800f03 	ldbu	r2,60(r2)
  8040cc:	10803fcc 	andi	r2,r2,255
  8040d0:	e0bfff15 	stw	r2,-4(fp)
  8040d4:	e0ffff17 	ldw	r3,-4(fp)
  8040d8:	188000a0 	cmpeqi	r2,r3,2
  8040dc:	1000911e 	bne	r2,zero,804324 <fat_setNextClusterAddress+0x2e4>
  8040e0:	e0ffff17 	ldw	r3,-4(fp)
  8040e4:	188000e0 	cmpeqi	r2,r3,3
  8040e8:	10009d1e 	bne	r2,zero,804360 <fat_setNextClusterAddress+0x320>
  8040ec:	e0ffff17 	ldw	r3,-4(fp)
  8040f0:	18800060 	cmpeqi	r2,r3,1
  8040f4:	1000011e 	bne	r2,zero,8040fc <fat_setNextClusterAddress+0xbc>
  8040f8:	0000a806 	br	80439c <fat_setNextClusterAddress+0x35c>
		case FAT12:
			offset = ((cluster_addr%1024)*3/2)%512;
  8040fc:	e0bffd17 	ldw	r2,-12(fp)
  804100:	10c0ffcc 	andi	r3,r2,1023
  804104:	1805883a 	mov	r2,r3
  804108:	1085883a 	add	r2,r2,r2
  80410c:	10c5883a 	add	r2,r2,r3
  804110:	1004d07a 	srli	r2,r2,1
  804114:	10807fcc 	andi	r2,r2,511
  804118:	e0bff90d 	sth	r2,-28(fp)
			if(offset == 511){
  80411c:	e0bff90b 	ldhu	r2,-28(fp)
  804120:	10807fd8 	cmpnei	r2,r2,511
  804124:	1000421e 	bne	r2,zero,804230 <fat_setNextClusterAddress+0x1f0>
				if(cluster_addr%2==0){
  804128:	e0bffd17 	ldw	r2,-12(fp)
  80412c:	1080004c 	andi	r2,r2,1
  804130:	1004c03a 	cmpne	r2,r2,zero
  804134:	1000071e 	bne	r2,zero,804154 <fat_setNextClusterAddress+0x114>
					buf[offset]=next_cluster_addr&0xFF;
  804138:	e0bff90b 	ldhu	r2,-28(fp)
  80413c:	1007883a 	mov	r3,r2
  804140:	e0bffb17 	ldw	r2,-20(fp)
  804144:	1887883a 	add	r3,r3,r2
  804148:	e0bffe17 	ldw	r2,-8(fp)
  80414c:	18800005 	stb	r2,0(r3)
  804150:	00001206 	br	80419c <fat_setNextClusterAddress+0x15c>
				}else{
					buf[offset]=(buf[offset]&0xF)+((next_cluster_addr<<4)&0xF0);
  804154:	e0bff90b 	ldhu	r2,-28(fp)
  804158:	1007883a 	mov	r3,r2
  80415c:	e0bffb17 	ldw	r2,-20(fp)
  804160:	188b883a 	add	r5,r3,r2
  804164:	e0bff90b 	ldhu	r2,-28(fp)
  804168:	1007883a 	mov	r3,r2
  80416c:	e0bffb17 	ldw	r2,-20(fp)
  804170:	1885883a 	add	r2,r3,r2
  804174:	10800003 	ldbu	r2,0(r2)
  804178:	108003cc 	andi	r2,r2,15
  80417c:	1009883a 	mov	r4,r2
  804180:	e0bffe17 	ldw	r2,-8(fp)
  804184:	1004913a 	slli	r2,r2,4
  804188:	1007883a 	mov	r3,r2
  80418c:	00bffc04 	movi	r2,-16
  804190:	1884703a 	and	r2,r3,r2
  804194:	2085883a 	add	r2,r4,r2
  804198:	28800005 	stb	r2,0(r5)
				}
				buf2=part_getSect(fs->part,fat_getSectorAddressFatEntry(fs,cluster_addr)+1,IOM_MODE_READWRITE);
  80419c:	e0bffc17 	ldw	r2,-16(fp)
  8041a0:	14000017 	ldw	r16,0(r2)
  8041a4:	e13ffc17 	ldw	r4,-16(fp)
  8041a8:	e17ffd17 	ldw	r5,-12(fp)
  8041ac:	0803cf00 	call	803cf0 <fat_getSectorAddressFatEntry>
  8041b0:	11400044 	addi	r5,r2,1
  8041b4:	8009883a 	mov	r4,r16
  8041b8:	01800084 	movi	r6,2
  8041bc:	080a5e40 	call	80a5e4 <part_getSect>
  8041c0:	e0bffa15 	stw	r2,-24(fp)
				if(cluster_addr%2==0){
  8041c4:	e0bffd17 	ldw	r2,-12(fp)
  8041c8:	1080004c 	andi	r2,r2,1
  8041cc:	1004c03a 	cmpne	r2,r2,zero
  8041d0:	10000d1e 	bne	r2,zero,804208 <fat_setNextClusterAddress+0x1c8>
					buf2[0]=(buf2[0]&0xF0)+((next_cluster_addr>>8)&0xF);
  8041d4:	e0bffa17 	ldw	r2,-24(fp)
  8041d8:	10c00003 	ldbu	r3,0(r2)
  8041dc:	00bffc04 	movi	r2,-16
  8041e0:	1884703a 	and	r2,r3,r2
  8041e4:	1007883a 	mov	r3,r2
  8041e8:	e0bffe17 	ldw	r2,-8(fp)
  8041ec:	1004d23a 	srli	r2,r2,8
  8041f0:	108003cc 	andi	r2,r2,15
  8041f4:	1885883a 	add	r2,r3,r2
  8041f8:	1007883a 	mov	r3,r2
  8041fc:	e0bffa17 	ldw	r2,-24(fp)
  804200:	10c00005 	stb	r3,0(r2)
  804204:	00000506 	br	80421c <fat_setNextClusterAddress+0x1dc>
				}else{
					buf2[0]=(next_cluster_addr>>4)&0xFF;
  804208:	e0bffe17 	ldw	r2,-8(fp)
  80420c:	1004d13a 	srli	r2,r2,4
  804210:	1007883a 	mov	r3,r2
  804214:	e0bffa17 	ldw	r2,-24(fp)
  804218:	10c00005 	stb	r3,0(r2)
				}
				part_relSect(fs->part,buf2);
  80421c:	e0bffc17 	ldw	r2,-16(fp)
  804220:	11000017 	ldw	r4,0(r2)
  804224:	e17ffa17 	ldw	r5,-24(fp)
  804228:	080a6440 	call	80a644 <part_relSect>
  80422c:	00003806 	br	804310 <fat_setNextClusterAddress+0x2d0>
			}else{
				if(cluster_addr%2==0){
  804230:	e0bffd17 	ldw	r2,-12(fp)
  804234:	1080004c 	andi	r2,r2,1
  804238:	1004c03a 	cmpne	r2,r2,zero
  80423c:	10001a1e 	bne	r2,zero,8042a8 <fat_setNextClusterAddress+0x268>
					buf[offset]=next_cluster_addr&0xFF;
  804240:	e0bff90b 	ldhu	r2,-28(fp)
  804244:	1007883a 	mov	r3,r2
  804248:	e0bffb17 	ldw	r2,-20(fp)
  80424c:	1887883a 	add	r3,r3,r2
  804250:	e0bffe17 	ldw	r2,-8(fp)
  804254:	18800005 	stb	r2,0(r3)
					buf[offset+1]=(buf[offset+1]&0xF0)+((next_cluster_addr>>8)&0xF);
  804258:	e0bff90b 	ldhu	r2,-28(fp)
  80425c:	1007883a 	mov	r3,r2
  804260:	e0bffb17 	ldw	r2,-20(fp)
  804264:	1885883a 	add	r2,r3,r2
  804268:	11000044 	addi	r4,r2,1
  80426c:	e0bff90b 	ldhu	r2,-28(fp)
  804270:	1007883a 	mov	r3,r2
  804274:	e0bffb17 	ldw	r2,-20(fp)
  804278:	1885883a 	add	r2,r3,r2
  80427c:	10800044 	addi	r2,r2,1
  804280:	10c00003 	ldbu	r3,0(r2)
  804284:	00bffc04 	movi	r2,-16
  804288:	1884703a 	and	r2,r3,r2
  80428c:	1007883a 	mov	r3,r2
  804290:	e0bffe17 	ldw	r2,-8(fp)
  804294:	1004d23a 	srli	r2,r2,8
  804298:	108003cc 	andi	r2,r2,15
  80429c:	1885883a 	add	r2,r3,r2
  8042a0:	20800005 	stb	r2,0(r4)
  8042a4:	00001a06 	br	804310 <fat_setNextClusterAddress+0x2d0>
				}else{
					buf[offset]=(buf[offset]&0xF)+((next_cluster_addr<<4)&0xF0);
  8042a8:	e0bff90b 	ldhu	r2,-28(fp)
  8042ac:	1007883a 	mov	r3,r2
  8042b0:	e0bffb17 	ldw	r2,-20(fp)
  8042b4:	188b883a 	add	r5,r3,r2
  8042b8:	e0bff90b 	ldhu	r2,-28(fp)
  8042bc:	1007883a 	mov	r3,r2
  8042c0:	e0bffb17 	ldw	r2,-20(fp)
  8042c4:	1885883a 	add	r2,r3,r2
  8042c8:	10800003 	ldbu	r2,0(r2)
  8042cc:	108003cc 	andi	r2,r2,15
  8042d0:	1009883a 	mov	r4,r2
  8042d4:	e0bffe17 	ldw	r2,-8(fp)
  8042d8:	1004913a 	slli	r2,r2,4
  8042dc:	1007883a 	mov	r3,r2
  8042e0:	00bffc04 	movi	r2,-16
  8042e4:	1884703a 	and	r2,r3,r2
  8042e8:	2085883a 	add	r2,r4,r2
  8042ec:	28800005 	stb	r2,0(r5)
					buf[offset+1]=(next_cluster_addr>>4)&0xFF;
  8042f0:	e0bff90b 	ldhu	r2,-28(fp)
  8042f4:	1007883a 	mov	r3,r2
  8042f8:	e0bffb17 	ldw	r2,-20(fp)
  8042fc:	1885883a 	add	r2,r3,r2
  804300:	10c00044 	addi	r3,r2,1
  804304:	e0bffe17 	ldw	r2,-8(fp)
  804308:	1004d13a 	srli	r2,r2,4
  80430c:	18800005 	stb	r2,0(r3)
				}
			}
			part_relSect(fs->part,buf);
  804310:	e0bffc17 	ldw	r2,-16(fp)
  804314:	11000017 	ldw	r4,0(r2)
  804318:	e17ffb17 	ldw	r5,-20(fp)
  80431c:	080a6440 	call	80a644 <part_relSect>
			break;
  804320:	00001e06 	br	80439c <fat_setNextClusterAddress+0x35c>
		case FAT16:
			offset=cluster_addr%256;
  804324:	e0bffd17 	ldw	r2,-12(fp)
  804328:	10803fcc 	andi	r2,r2,255
  80432c:	e0bff90d 	sth	r2,-28(fp)
			*((euint16*)buf+offset)=next_cluster_addr;
  804330:	e0bff90b 	ldhu	r2,-28(fp)
  804334:	1085883a 	add	r2,r2,r2
  804338:	1007883a 	mov	r3,r2
  80433c:	e0bffb17 	ldw	r2,-20(fp)
  804340:	1887883a 	add	r3,r3,r2
  804344:	e0bffe17 	ldw	r2,-8(fp)
  804348:	1880000d 	sth	r2,0(r3)
			part_relSect(fs->part,buf);
  80434c:	e0bffc17 	ldw	r2,-16(fp)
  804350:	11000017 	ldw	r4,0(r2)
  804354:	e17ffb17 	ldw	r5,-20(fp)
  804358:	080a6440 	call	80a644 <part_relSect>
			break;
  80435c:	00000f06 	br	80439c <fat_setNextClusterAddress+0x35c>
		case FAT32:
			offset=cluster_addr%128;
  804360:	e0bffd17 	ldw	r2,-12(fp)
  804364:	10801fcc 	andi	r2,r2,127
  804368:	e0bff90d 	sth	r2,-28(fp)
			*((euint32*)buf+offset)=next_cluster_addr;
  80436c:	e0bff90b 	ldhu	r2,-28(fp)
  804370:	1085883a 	add	r2,r2,r2
  804374:	1085883a 	add	r2,r2,r2
  804378:	1007883a 	mov	r3,r2
  80437c:	e0bffb17 	ldw	r2,-20(fp)
  804380:	1887883a 	add	r3,r3,r2
  804384:	e0bffe17 	ldw	r2,-8(fp)
  804388:	18800015 	stw	r2,0(r3)
			part_relSect(fs->part,buf);
  80438c:	e0bffc17 	ldw	r2,-16(fp)
  804390:	11000017 	ldw	r4,0(r2)
  804394:	e17ffb17 	ldw	r5,-20(fp)
  804398:	080a6440 	call	80a644 <part_relSect>
			break;
	}
	
}
  80439c:	e037883a 	mov	sp,fp
  8043a0:	dfc00217 	ldw	ra,8(sp)
  8043a4:	df000117 	ldw	fp,4(sp)
  8043a8:	dc000017 	ldw	r16,0(sp)
  8043ac:	dec00304 	addi	sp,sp,12
  8043b0:	f800283a 	ret

008043b4 <fat_isEocMarker>:
 * Description: Checks if a certain value is the EoC marker for the filesystem
 * noted in fs->type.
 * Return value: Returns 0 when it is the EoC marker, and 1 otherwise.
*/
eint16 fat_isEocMarker(FileSystem *fs,euint32 fat_entry)
{
  8043b4:	defffb04 	addi	sp,sp,-20
  8043b8:	df000415 	stw	fp,16(sp)
  8043bc:	df000404 	addi	fp,sp,16
  8043c0:	e13ffc15 	stw	r4,-16(fp)
  8043c4:	e17ffd15 	stw	r5,-12(fp)
	switch(fs->type){
  8043c8:	e0bffc17 	ldw	r2,-16(fp)
  8043cc:	10800f03 	ldbu	r2,60(r2)
  8043d0:	10803fcc 	andi	r2,r2,255
  8043d4:	e0bfff15 	stw	r2,-4(fp)
  8043d8:	e0ffff17 	ldw	r3,-4(fp)
  8043dc:	188000a0 	cmpeqi	r2,r3,2
  8043e0:	10000c1e 	bne	r2,zero,804414 <fat_isEocMarker+0x60>
  8043e4:	e0ffff17 	ldw	r3,-4(fp)
  8043e8:	188000e0 	cmpeqi	r2,r3,3
  8043ec:	10000e1e 	bne	r2,zero,804428 <fat_isEocMarker+0x74>
  8043f0:	e0ffff17 	ldw	r3,-4(fp)
  8043f4:	18800060 	cmpeqi	r2,r3,1
  8043f8:	1000011e 	bne	r2,zero,804400 <fat_isEocMarker+0x4c>
  8043fc:	00001306 	br	80444c <fat_isEocMarker+0x98>
		case FAT12:
			if(fat_entry<0xFF8){
  804400:	e0bffd17 	ldw	r2,-12(fp)
  804404:	1083fe28 	cmpgeui	r2,r2,4088
  804408:	1000101e 	bne	r2,zero,80444c <fat_isEocMarker+0x98>
				return(0);
  80440c:	e03ffe15 	stw	zero,-8(fp)
  804410:	00001006 	br	804454 <fat_isEocMarker+0xa0>
			}
			break;
		case FAT16:
			if(fat_entry<0xFFF8){
  804414:	e0fffd17 	ldw	r3,-12(fp)
  804418:	00bffdd4 	movui	r2,65527
  80441c:	10c00b36 	bltu	r2,r3,80444c <fat_isEocMarker+0x98>
				return(0);
  804420:	e03ffe15 	stw	zero,-8(fp)
  804424:	00000b06 	br	804454 <fat_isEocMarker+0xa0>
			}
			break;
		case FAT32:
			if((fat_entry&0x0FFFFFFF)<0xFFFFFF8){
  804428:	e0fffd17 	ldw	r3,-12(fp)
  80442c:	00840034 	movhi	r2,4096
  804430:	10bfffc4 	addi	r2,r2,-1
  804434:	1886703a 	and	r3,r3,r2
  804438:	00840034 	movhi	r2,4096
  80443c:	10bffdc4 	addi	r2,r2,-9
  804440:	10c00236 	bltu	r2,r3,80444c <fat_isEocMarker+0x98>
				return(0);
  804444:	e03ffe15 	stw	zero,-8(fp)
  804448:	00000206 	br	804454 <fat_isEocMarker+0xa0>
			}
			break;
	}
	return(1);
  80444c:	00800044 	movi	r2,1
  804450:	e0bffe15 	stw	r2,-8(fp)
  804454:	e0bffe17 	ldw	r2,-8(fp)
}
  804458:	e037883a 	mov	sp,fp
  80445c:	df000017 	ldw	fp,0(sp)
  804460:	dec00104 	addi	sp,sp,4
  804464:	f800283a 	ret

00804468 <fat_giveEocMarker>:
 * Note, for FAT32, the upper 4 bits are set to zero, although they should be un
 * touched according to MicroSoft specifications. I didn't care.
 * Return value: The EoC marker cast to an ulong.
*/
euint32 fat_giveEocMarker(FileSystem *fs)
{
  804468:	defffc04 	addi	sp,sp,-16
  80446c:	df000315 	stw	fp,12(sp)
  804470:	df000304 	addi	fp,sp,12
  804474:	e13ffd15 	stw	r4,-12(fp)
	switch(fs->type)
  804478:	e0bffd17 	ldw	r2,-12(fp)
  80447c:	10800f03 	ldbu	r2,60(r2)
  804480:	10803fcc 	andi	r2,r2,255
  804484:	e0bfff15 	stw	r2,-4(fp)
  804488:	e0ffff17 	ldw	r3,-4(fp)
  80448c:	188000a0 	cmpeqi	r2,r3,2
  804490:	10000a1e 	bne	r2,zero,8044bc <fat_giveEocMarker+0x54>
  804494:	e0ffff17 	ldw	r3,-4(fp)
  804498:	188000e0 	cmpeqi	r2,r3,3
  80449c:	10000a1e 	bne	r2,zero,8044c8 <fat_giveEocMarker+0x60>
  8044a0:	e0ffff17 	ldw	r3,-4(fp)
  8044a4:	18800060 	cmpeqi	r2,r3,1
  8044a8:	1000011e 	bne	r2,zero,8044b0 <fat_giveEocMarker+0x48>
  8044ac:	00000a06 	br	8044d8 <fat_giveEocMarker+0x70>
	{
		case FAT12:
			return(0xFFF);
  8044b0:	0083ffc4 	movi	r2,4095
  8044b4:	e0bffe15 	stw	r2,-8(fp)
  8044b8:	00000806 	br	8044dc <fat_giveEocMarker+0x74>
			break;
		case FAT16:
			return(0xFFFF);
  8044bc:	00ffffd4 	movui	r3,65535
  8044c0:	e0fffe15 	stw	r3,-8(fp)
  8044c4:	00000506 	br	8044dc <fat_giveEocMarker+0x74>
			break;
		case FAT32:
			return(0x0FFFFFFF);
  8044c8:	00840034 	movhi	r2,4096
  8044cc:	10bfffc4 	addi	r2,r2,-1
  8044d0:	e0bffe15 	stw	r2,-8(fp)
  8044d4:	00000106 	br	8044dc <fat_giveEocMarker+0x74>
			break;
	}
	return(0);
  8044d8:	e03ffe15 	stw	zero,-8(fp)
  8044dc:	e0bffe17 	ldw	r2,-8(fp)
}
  8044e0:	e037883a 	mov	sp,fp
  8044e4:	df000017 	ldw	fp,0(sp)
  8044e8:	dec00104 	addi	sp,sp,4
  8044ec:	f800283a 	ret

008044f0 <fat_getNextClusterAddressWBuf>:
 * it's own buffer, it is given as a parameter. (ioman makes this function rather obsolete)
 * Only in the case of a FAT12 crosssector data entry a sector is retrieved here.
 * Return value: The value of the clusterfield is returned.
*/
euint32 fat_getNextClusterAddressWBuf(FileSystem *fs,euint32 cluster_addr, euint8* buf)
{
  8044f0:	defff604 	addi	sp,sp,-40
  8044f4:	dfc00915 	stw	ra,36(sp)
  8044f8:	df000815 	stw	fp,32(sp)
  8044fc:	dc000715 	stw	r16,28(sp)
  804500:	df000704 	addi	fp,sp,28
  804504:	e13ffc15 	stw	r4,-16(fp)
  804508:	e17ffd15 	stw	r5,-12(fp)
  80450c:	e1bffe15 	stw	r6,-8(fp)
	euint8  *buf2; /* For FAT12 fallover only */
	euint8 hb,lb;
	euint16 offset;
	euint32 nextcluster=0;
  804510:	e03ff915 	stw	zero,-28(fp)
	
	switch(fs->type)
  804514:	e0bffc17 	ldw	r2,-16(fp)
  804518:	10800f03 	ldbu	r2,60(r2)
  80451c:	10803fcc 	andi	r2,r2,255
  804520:	e0bfff15 	stw	r2,-4(fp)
  804524:	e0ffff17 	ldw	r3,-4(fp)
  804528:	188000a0 	cmpeqi	r2,r3,2
  80452c:	1000441e 	bne	r2,zero,804640 <fat_getNextClusterAddressWBuf+0x150>
  804530:	e0ffff17 	ldw	r3,-4(fp)
  804534:	188000e0 	cmpeqi	r2,r3,3
  804538:	10004d1e 	bne	r2,zero,804670 <fat_getNextClusterAddressWBuf+0x180>
  80453c:	e0ffff17 	ldw	r3,-4(fp)
  804540:	18800060 	cmpeqi	r2,r3,1
  804544:	1000011e 	bne	r2,zero,80454c <fat_getNextClusterAddressWBuf+0x5c>
  804548:	00005406 	br	80469c <fat_getNextClusterAddressWBuf+0x1ac>
	{
		case FAT12:
			offset = ((cluster_addr%1024)*3/2)%512;
  80454c:	e0bffd17 	ldw	r2,-12(fp)
  804550:	10c0ffcc 	andi	r3,r2,1023
  804554:	1805883a 	mov	r2,r3
  804558:	1085883a 	add	r2,r2,r2
  80455c:	10c5883a 	add	r2,r2,r3
  804560:	1004d07a 	srli	r2,r2,1
  804564:	10807fcc 	andi	r2,r2,511
  804568:	e0bffa0d 	sth	r2,-24(fp)
			hb = buf[offset];
  80456c:	e0bffa0b 	ldhu	r2,-24(fp)
  804570:	1007883a 	mov	r3,r2
  804574:	e0bffe17 	ldw	r2,-8(fp)
  804578:	1885883a 	add	r2,r3,r2
  80457c:	10800003 	ldbu	r2,0(r2)
  804580:	e0bffac5 	stb	r2,-21(fp)
			if(offset == 511){
  804584:	e0bffa0b 	ldhu	r2,-24(fp)
  804588:	10807fd8 	cmpnei	r2,r2,511
  80458c:	1000121e 	bne	r2,zero,8045d8 <fat_getNextClusterAddressWBuf+0xe8>
				buf2=part_getSect(fs->part,fat_getSectorAddressFatEntry(fs,cluster_addr)+1,IOM_MODE_READONLY);
  804590:	e0bffc17 	ldw	r2,-16(fp)
  804594:	14000017 	ldw	r16,0(r2)
  804598:	e13ffc17 	ldw	r4,-16(fp)
  80459c:	e17ffd17 	ldw	r5,-12(fp)
  8045a0:	0803cf00 	call	803cf0 <fat_getSectorAddressFatEntry>
  8045a4:	11400044 	addi	r5,r2,1
  8045a8:	8009883a 	mov	r4,r16
  8045ac:	01800044 	movi	r6,1
  8045b0:	080a5e40 	call	80a5e4 <part_getSect>
  8045b4:	e0bffb15 	stw	r2,-20(fp)
				lb = buf2[0];
  8045b8:	e0bffb17 	ldw	r2,-20(fp)
  8045bc:	10800003 	ldbu	r2,0(r2)
  8045c0:	e0bffa85 	stb	r2,-22(fp)
				part_relSect(fs->part,buf2);
  8045c4:	e0bffc17 	ldw	r2,-16(fp)
  8045c8:	11000017 	ldw	r4,0(r2)
  8045cc:	e17ffb17 	ldw	r5,-20(fp)
  8045d0:	080a6440 	call	80a644 <part_relSect>
  8045d4:	00000706 	br	8045f4 <fat_getNextClusterAddressWBuf+0x104>
			}else{
				lb = buf[offset + 1];
  8045d8:	e0bffa0b 	ldhu	r2,-24(fp)
  8045dc:	1007883a 	mov	r3,r2
  8045e0:	e0bffe17 	ldw	r2,-8(fp)
  8045e4:	1885883a 	add	r2,r3,r2
  8045e8:	10800044 	addi	r2,r2,1
  8045ec:	10800003 	ldbu	r2,0(r2)
  8045f0:	e0bffa85 	stb	r2,-22(fp)
			}
			if(cluster_addr%2==0){
  8045f4:	e0bffd17 	ldw	r2,-12(fp)
  8045f8:	1080004c 	andi	r2,r2,1
  8045fc:	1004c03a 	cmpne	r2,r2,zero
  804600:	1000071e 	bne	r2,zero,804620 <fat_getNextClusterAddressWBuf+0x130>
				nextcluster = ( ((lb&0x0F)<<8) + (hb) );
  804604:	e0bffa83 	ldbu	r2,-22(fp)
  804608:	108003cc 	andi	r2,r2,15
  80460c:	1006923a 	slli	r3,r2,8
  804610:	e0bffac3 	ldbu	r2,-21(fp)
  804614:	1885883a 	add	r2,r3,r2
  804618:	e0bff915 	stw	r2,-28(fp)
  80461c:	00001f06 	br	80469c <fat_getNextClusterAddressWBuf+0x1ac>
			}else{
				nextcluster = ( (lb<<4) + (hb>>4) );
  804620:	e0bffa83 	ldbu	r2,-22(fp)
  804624:	1006913a 	slli	r3,r2,4
  804628:	e0bffac3 	ldbu	r2,-21(fp)
  80462c:	1004d13a 	srli	r2,r2,4
  804630:	10803fcc 	andi	r2,r2,255
  804634:	1885883a 	add	r2,r3,r2
  804638:	e0bff915 	stw	r2,-28(fp)
			}
			break;
  80463c:	00001706 	br	80469c <fat_getNextClusterAddressWBuf+0x1ac>
		case FAT16:
			offset=cluster_addr%256;
  804640:	e0bffd17 	ldw	r2,-12(fp)
  804644:	10803fcc 	andi	r2,r2,255
  804648:	e0bffa0d 	sth	r2,-24(fp)
			nextcluster = *((euint16*)buf + offset);
  80464c:	e0bffa0b 	ldhu	r2,-24(fp)
  804650:	1085883a 	add	r2,r2,r2
  804654:	1007883a 	mov	r3,r2
  804658:	e0bffe17 	ldw	r2,-8(fp)
  80465c:	1885883a 	add	r2,r3,r2
  804660:	1080000b 	ldhu	r2,0(r2)
  804664:	10bfffcc 	andi	r2,r2,65535
  804668:	e0bff915 	stw	r2,-28(fp)
			break;
  80466c:	00000b06 	br	80469c <fat_getNextClusterAddressWBuf+0x1ac>
		case FAT32:
			offset=cluster_addr%128;
  804670:	e0bffd17 	ldw	r2,-12(fp)
  804674:	10801fcc 	andi	r2,r2,127
  804678:	e0bffa0d 	sth	r2,-24(fp)
			nextcluster = *((euint32*)buf + offset);
  80467c:	e0bffa0b 	ldhu	r2,-24(fp)
  804680:	1085883a 	add	r2,r2,r2
  804684:	1085883a 	add	r2,r2,r2
  804688:	1007883a 	mov	r3,r2
  80468c:	e0bffe17 	ldw	r2,-8(fp)
  804690:	1885883a 	add	r2,r3,r2
  804694:	10800017 	ldw	r2,0(r2)
  804698:	e0bff915 	stw	r2,-28(fp)
			break;
	}
	return(nextcluster);
  80469c:	e0bff917 	ldw	r2,-28(fp)
}
  8046a0:	e037883a 	mov	sp,fp
  8046a4:	dfc00217 	ldw	ra,8(sp)
  8046a8:	df000117 	ldw	fp,4(sp)
  8046ac:	dc000017 	ldw	r16,0(sp)
  8046b0:	dec00304 	addi	sp,sp,12
  8046b4:	f800283a 	ret

008046b8 <fat_setNextClusterAddressWBuf>:
 * not write the data itself, except in the case of FAT 12 cross sector data, where
 * the second sector is handled by this function.
 * Return value:
*/
void fat_setNextClusterAddressWBuf(FileSystem *fs,euint32 cluster_addr,euint32 next_cluster_addr,euint8* buf)
{
  8046b8:	defff604 	addi	sp,sp,-40
  8046bc:	dfc00915 	stw	ra,36(sp)
  8046c0:	df000815 	stw	fp,32(sp)
  8046c4:	dc000715 	stw	r16,28(sp)
  8046c8:	df000704 	addi	fp,sp,28
  8046cc:	e13ffb15 	stw	r4,-20(fp)
  8046d0:	e17ffc15 	stw	r5,-16(fp)
  8046d4:	e1bffd15 	stw	r6,-12(fp)
  8046d8:	e1fffe15 	stw	r7,-8(fp)
	euint16 offset;
	euint8 *buf2;
		
	switch(fs->type)
  8046dc:	e0bffb17 	ldw	r2,-20(fp)
  8046e0:	10800f03 	ldbu	r2,60(r2)
  8046e4:	10803fcc 	andi	r2,r2,255
  8046e8:	e0bfff15 	stw	r2,-4(fp)
  8046ec:	e0ffff17 	ldw	r3,-4(fp)
  8046f0:	188000a0 	cmpeqi	r2,r3,2
  8046f4:	10008d1e 	bne	r2,zero,80492c <fat_setNextClusterAddressWBuf+0x274>
  8046f8:	e0ffff17 	ldw	r3,-4(fp)
  8046fc:	188000e0 	cmpeqi	r2,r3,3
  804700:	1000951e 	bne	r2,zero,804958 <fat_setNextClusterAddressWBuf+0x2a0>
  804704:	e0ffff17 	ldw	r3,-4(fp)
  804708:	18800060 	cmpeqi	r2,r3,1
  80470c:	1000011e 	bne	r2,zero,804714 <fat_setNextClusterAddressWBuf+0x5c>
  804710:	00009c06 	br	804984 <fat_setNextClusterAddressWBuf+0x2cc>
	{
		case FAT12:
			offset = ((cluster_addr%1024)*3/2)%512;
  804714:	e0bffc17 	ldw	r2,-16(fp)
  804718:	10c0ffcc 	andi	r3,r2,1023
  80471c:	1805883a 	mov	r2,r3
  804720:	1085883a 	add	r2,r2,r2
  804724:	10c5883a 	add	r2,r2,r3
  804728:	1004d07a 	srli	r2,r2,1
  80472c:	10807fcc 	andi	r2,r2,511
  804730:	e0bffa0d 	sth	r2,-24(fp)
			if(offset == 511){
  804734:	e0bffa0b 	ldhu	r2,-24(fp)
  804738:	10807fd8 	cmpnei	r2,r2,511
  80473c:	1000421e 	bne	r2,zero,804848 <fat_setNextClusterAddressWBuf+0x190>
				if(cluster_addr%2==0){
  804740:	e0bffc17 	ldw	r2,-16(fp)
  804744:	1080004c 	andi	r2,r2,1
  804748:	1004c03a 	cmpne	r2,r2,zero
  80474c:	1000071e 	bne	r2,zero,80476c <fat_setNextClusterAddressWBuf+0xb4>
					buf[offset]=next_cluster_addr&0xFF;
  804750:	e0bffa0b 	ldhu	r2,-24(fp)
  804754:	1007883a 	mov	r3,r2
  804758:	e0bffe17 	ldw	r2,-8(fp)
  80475c:	1887883a 	add	r3,r3,r2
  804760:	e0bffd17 	ldw	r2,-12(fp)
  804764:	18800005 	stb	r2,0(r3)
  804768:	00001206 	br	8047b4 <fat_setNextClusterAddressWBuf+0xfc>
				}else{
					buf[offset]=(buf[offset]&0xF)+((next_cluster_addr<<4)&0xF0);
  80476c:	e0bffa0b 	ldhu	r2,-24(fp)
  804770:	1007883a 	mov	r3,r2
  804774:	e0bffe17 	ldw	r2,-8(fp)
  804778:	188b883a 	add	r5,r3,r2
  80477c:	e0bffa0b 	ldhu	r2,-24(fp)
  804780:	1007883a 	mov	r3,r2
  804784:	e0bffe17 	ldw	r2,-8(fp)
  804788:	1885883a 	add	r2,r3,r2
  80478c:	10800003 	ldbu	r2,0(r2)
  804790:	108003cc 	andi	r2,r2,15
  804794:	1009883a 	mov	r4,r2
  804798:	e0bffd17 	ldw	r2,-12(fp)
  80479c:	1004913a 	slli	r2,r2,4
  8047a0:	1007883a 	mov	r3,r2
  8047a4:	00bffc04 	movi	r2,-16
  8047a8:	1884703a 	and	r2,r3,r2
  8047ac:	2085883a 	add	r2,r4,r2
  8047b0:	28800005 	stb	r2,0(r5)
				}
				buf2=part_getSect(fs->part,fat_getSectorAddressFatEntry(fs,cluster_addr)+1,IOM_MODE_READWRITE);
  8047b4:	e0bffb17 	ldw	r2,-20(fp)
  8047b8:	14000017 	ldw	r16,0(r2)
  8047bc:	e13ffb17 	ldw	r4,-20(fp)
  8047c0:	e17ffc17 	ldw	r5,-16(fp)
  8047c4:	0803cf00 	call	803cf0 <fat_getSectorAddressFatEntry>
  8047c8:	11400044 	addi	r5,r2,1
  8047cc:	8009883a 	mov	r4,r16
  8047d0:	01800084 	movi	r6,2
  8047d4:	080a5e40 	call	80a5e4 <part_getSect>
  8047d8:	e0bff915 	stw	r2,-28(fp)
				if(cluster_addr%2==0){
  8047dc:	e0bffc17 	ldw	r2,-16(fp)
  8047e0:	1080004c 	andi	r2,r2,1
  8047e4:	1004c03a 	cmpne	r2,r2,zero
  8047e8:	10000d1e 	bne	r2,zero,804820 <fat_setNextClusterAddressWBuf+0x168>
					buf2[0]=(buf2[0]&0xF0)+((next_cluster_addr>>8)&0xF);
  8047ec:	e0bff917 	ldw	r2,-28(fp)
  8047f0:	10c00003 	ldbu	r3,0(r2)
  8047f4:	00bffc04 	movi	r2,-16
  8047f8:	1884703a 	and	r2,r3,r2
  8047fc:	1007883a 	mov	r3,r2
  804800:	e0bffd17 	ldw	r2,-12(fp)
  804804:	1004d23a 	srli	r2,r2,8
  804808:	108003cc 	andi	r2,r2,15
  80480c:	1885883a 	add	r2,r3,r2
  804810:	1007883a 	mov	r3,r2
  804814:	e0bff917 	ldw	r2,-28(fp)
  804818:	10c00005 	stb	r3,0(r2)
  80481c:	00000506 	br	804834 <fat_setNextClusterAddressWBuf+0x17c>
				}else{
					buf2[0]=(next_cluster_addr>>4)&0xFF;
  804820:	e0bffd17 	ldw	r2,-12(fp)
  804824:	1004d13a 	srli	r2,r2,4
  804828:	1007883a 	mov	r3,r2
  80482c:	e0bff917 	ldw	r2,-28(fp)
  804830:	10c00005 	stb	r3,0(r2)
				}
				part_relSect(fs->part,buf2);
  804834:	e0bffb17 	ldw	r2,-20(fp)
  804838:	11000017 	ldw	r4,0(r2)
  80483c:	e17ff917 	ldw	r5,-28(fp)
  804840:	080a6440 	call	80a644 <part_relSect>
  804844:	00004f06 	br	804984 <fat_setNextClusterAddressWBuf+0x2cc>
			}else{
				if(cluster_addr%2==0){
  804848:	e0bffc17 	ldw	r2,-16(fp)
  80484c:	1080004c 	andi	r2,r2,1
  804850:	1004c03a 	cmpne	r2,r2,zero
  804854:	10001a1e 	bne	r2,zero,8048c0 <fat_setNextClusterAddressWBuf+0x208>
					buf[offset]=next_cluster_addr&0xFF;
  804858:	e0bffa0b 	ldhu	r2,-24(fp)
  80485c:	1007883a 	mov	r3,r2
  804860:	e0bffe17 	ldw	r2,-8(fp)
  804864:	1887883a 	add	r3,r3,r2
  804868:	e0bffd17 	ldw	r2,-12(fp)
  80486c:	18800005 	stb	r2,0(r3)
					buf[offset+1]=(buf[offset+1]&0xF0)+((next_cluster_addr>>8)&0xF);
  804870:	e0bffa0b 	ldhu	r2,-24(fp)
  804874:	1007883a 	mov	r3,r2
  804878:	e0bffe17 	ldw	r2,-8(fp)
  80487c:	1885883a 	add	r2,r3,r2
  804880:	11000044 	addi	r4,r2,1
  804884:	e0bffa0b 	ldhu	r2,-24(fp)
  804888:	1007883a 	mov	r3,r2
  80488c:	e0bffe17 	ldw	r2,-8(fp)
  804890:	1885883a 	add	r2,r3,r2
  804894:	10800044 	addi	r2,r2,1
  804898:	10c00003 	ldbu	r3,0(r2)
  80489c:	00bffc04 	movi	r2,-16
  8048a0:	1884703a 	and	r2,r3,r2
  8048a4:	1007883a 	mov	r3,r2
  8048a8:	e0bffd17 	ldw	r2,-12(fp)
  8048ac:	1004d23a 	srli	r2,r2,8
  8048b0:	108003cc 	andi	r2,r2,15
  8048b4:	1885883a 	add	r2,r3,r2
  8048b8:	20800005 	stb	r2,0(r4)
  8048bc:	00003106 	br	804984 <fat_setNextClusterAddressWBuf+0x2cc>
				}else{
					buf[offset]=(buf[offset]&0xF)+((next_cluster_addr<<4)&0xF0);
  8048c0:	e0bffa0b 	ldhu	r2,-24(fp)
  8048c4:	1007883a 	mov	r3,r2
  8048c8:	e0bffe17 	ldw	r2,-8(fp)
  8048cc:	188b883a 	add	r5,r3,r2
  8048d0:	e0bffa0b 	ldhu	r2,-24(fp)
  8048d4:	1007883a 	mov	r3,r2
  8048d8:	e0bffe17 	ldw	r2,-8(fp)
  8048dc:	1885883a 	add	r2,r3,r2
  8048e0:	10800003 	ldbu	r2,0(r2)
  8048e4:	108003cc 	andi	r2,r2,15
  8048e8:	1009883a 	mov	r4,r2
  8048ec:	e0bffd17 	ldw	r2,-12(fp)
  8048f0:	1004913a 	slli	r2,r2,4
  8048f4:	1007883a 	mov	r3,r2
  8048f8:	00bffc04 	movi	r2,-16
  8048fc:	1884703a 	and	r2,r3,r2
  804900:	2085883a 	add	r2,r4,r2
  804904:	28800005 	stb	r2,0(r5)
					buf[offset+1]=(next_cluster_addr>>4)&0xFF;
  804908:	e0bffa0b 	ldhu	r2,-24(fp)
  80490c:	1007883a 	mov	r3,r2
  804910:	e0bffe17 	ldw	r2,-8(fp)
  804914:	1885883a 	add	r2,r3,r2
  804918:	10c00044 	addi	r3,r2,1
  80491c:	e0bffd17 	ldw	r2,-12(fp)
  804920:	1004d13a 	srli	r2,r2,4
  804924:	18800005 	stb	r2,0(r3)
				}
			}
			break;
  804928:	00001606 	br	804984 <fat_setNextClusterAddressWBuf+0x2cc>
		case FAT16:
			offset=cluster_addr%256;
  80492c:	e0bffc17 	ldw	r2,-16(fp)
  804930:	10803fcc 	andi	r2,r2,255
  804934:	e0bffa0d 	sth	r2,-24(fp)
			*((euint16*)buf+offset)=next_cluster_addr;
  804938:	e0bffa0b 	ldhu	r2,-24(fp)
  80493c:	1085883a 	add	r2,r2,r2
  804940:	1007883a 	mov	r3,r2
  804944:	e0bffe17 	ldw	r2,-8(fp)
  804948:	1887883a 	add	r3,r3,r2
  80494c:	e0bffd17 	ldw	r2,-12(fp)
  804950:	1880000d 	sth	r2,0(r3)
			break;
  804954:	00000b06 	br	804984 <fat_setNextClusterAddressWBuf+0x2cc>
		case FAT32:
			offset=cluster_addr%128;
  804958:	e0bffc17 	ldw	r2,-16(fp)
  80495c:	10801fcc 	andi	r2,r2,127
  804960:	e0bffa0d 	sth	r2,-24(fp)
			*((euint32*)buf+offset)=next_cluster_addr;
  804964:	e0bffa0b 	ldhu	r2,-24(fp)
  804968:	1085883a 	add	r2,r2,r2
  80496c:	1085883a 	add	r2,r2,r2
  804970:	1007883a 	mov	r3,r2
  804974:	e0bffe17 	ldw	r2,-8(fp)
  804978:	1887883a 	add	r3,r3,r2
  80497c:	e0bffd17 	ldw	r2,-12(fp)
  804980:	18800015 	stw	r2,0(r3)
			break;
	}
}
  804984:	e037883a 	mov	sp,fp
  804988:	dfc00217 	ldw	ra,8(sp)
  80498c:	df000117 	ldw	fp,4(sp)
  804990:	dc000017 	ldw	r16,0(sp)
  804994:	dec00304 	addi	sp,sp,12
  804998:	f800283a 	ret

0080499c <fat_getNextClusterChain>:
 * With lineair is meant that logical cluster n+1 should be 1 more than logical cluster n
 * at the disc level.
 * Return value: 0 on success, or -1 when EoC.
*/
esint16 fat_getNextClusterChain(FileSystem *fs, ClusterChain *Cache)
{
  80499c:	defff404 	addi	sp,sp,-48
  8049a0:	dfc00b15 	stw	ra,44(sp)
  8049a4:	df000a15 	stw	fp,40(sp)
  8049a8:	df000a04 	addi	fp,sp,40
  8049ac:	e13ffc15 	stw	r4,-16(fp)
  8049b0:	e17ffd15 	stw	r5,-12(fp)
	euint32 sect,lr,nlr,dc;
	esint16 lin=0;
  8049b4:	e03ff70d 	sth	zero,-36(fp)
	euint8 *buf;

	if(Cache->DiscCluster==0)
  8049b8:	e0bffd17 	ldw	r2,-12(fp)
  8049bc:	10800217 	ldw	r2,8(r2)
  8049c0:	1004c03a 	cmpne	r2,r2,zero
  8049c4:	1000031e 	bne	r2,zero,8049d4 <fat_getNextClusterChain+0x38>
	{
		return(-1);
  8049c8:	00bfffc4 	movi	r2,-1
  8049cc:	e0bfff15 	stw	r2,-4(fp)
  8049d0:	00005806 	br	804b34 <fat_getNextClusterChain+0x198>
	}

	sect=fat_getSectorAddressFatEntry(fs,Cache->DiscCluster);
  8049d4:	e0bffd17 	ldw	r2,-12(fp)
  8049d8:	11400217 	ldw	r5,8(r2)
  8049dc:	e13ffc17 	ldw	r4,-16(fp)
  8049e0:	0803cf00 	call	803cf0 <fat_getSectorAddressFatEntry>
  8049e4:	e0bffb15 	stw	r2,-20(fp)
	buf=part_getSect(fs->part,sect,IOM_MODE_READONLY);
  8049e8:	e0bffc17 	ldw	r2,-16(fp)
  8049ec:	11000017 	ldw	r4,0(r2)
  8049f0:	e17ffb17 	ldw	r5,-20(fp)
  8049f4:	01800044 	movi	r6,1
  8049f8:	080a5e40 	call	80a5e4 <part_getSect>
  8049fc:	e0bff615 	stw	r2,-40(fp)
	dc=fat_getNextClusterAddressWBuf(fs,Cache->DiscCluster,buf);
  804a00:	e0bffd17 	ldw	r2,-12(fp)
  804a04:	11400217 	ldw	r5,8(r2)
  804a08:	e13ffc17 	ldw	r4,-16(fp)
  804a0c:	e1bff617 	ldw	r6,-40(fp)
  804a10:	08044f00 	call	8044f0 <fat_getNextClusterAddressWBuf>
  804a14:	e0bff815 	stw	r2,-32(fp)
	if(fat_isEocMarker(fs,dc))
  804a18:	e13ffc17 	ldw	r4,-16(fp)
  804a1c:	e17ff817 	ldw	r5,-32(fp)
  804a20:	08043b40 	call	8043b4 <fat_isEocMarker>
  804a24:	10bfffcc 	andi	r2,r2,65535
  804a28:	10a0001c 	xori	r2,r2,32768
  804a2c:	10a00004 	addi	r2,r2,-32768
  804a30:	1005003a 	cmpeq	r2,r2,zero
  804a34:	10000b1e 	bne	r2,zero,804a64 <fat_getNextClusterChain+0xc8>
	{
		Cache->LastCluster=Cache->DiscCluster;
  804a38:	e0bffd17 	ldw	r2,-12(fp)
  804a3c:	10c00217 	ldw	r3,8(r2)
  804a40:	e0bffd17 	ldw	r2,-12(fp)
  804a44:	10c00415 	stw	r3,16(r2)
		part_relSect(fs->part,buf);
  804a48:	e0bffc17 	ldw	r2,-16(fp)
  804a4c:	11000017 	ldw	r4,0(r2)
  804a50:	e17ff617 	ldw	r5,-40(fp)
  804a54:	080a6440 	call	80a644 <part_relSect>
		return(-1);
  804a58:	00ffffc4 	movi	r3,-1
  804a5c:	e0ffff15 	stw	r3,-4(fp)
  804a60:	00003406 	br	804b34 <fat_getNextClusterChain+0x198>
	}
	
	Cache->DiscCluster=dc;
  804a64:	e0fffd17 	ldw	r3,-12(fp)
  804a68:	e0bff817 	ldw	r2,-32(fp)
  804a6c:	18800215 	stw	r2,8(r3)
	Cache->LogicCluster++;
  804a70:	e0bffd17 	ldw	r2,-12(fp)
  804a74:	10800117 	ldw	r2,4(r2)
  804a78:	10c00044 	addi	r3,r2,1
  804a7c:	e0bffd17 	ldw	r2,-12(fp)
  804a80:	10c00115 	stw	r3,4(r2)
		
	lr=Cache->DiscCluster-1;
  804a84:	e0bffd17 	ldw	r2,-12(fp)
  804a88:	10800217 	ldw	r2,8(r2)
  804a8c:	10bfffc4 	addi	r2,r2,-1
  804a90:	e0bffa15 	stw	r2,-24(fp)
	nlr=lr+1;
  804a94:	e0bffa17 	ldw	r2,-24(fp)
  804a98:	10800044 	addi	r2,r2,1
  804a9c:	e0bff915 	stw	r2,-28(fp)
	
	while(nlr-1==lr && fat_getSectorAddressFatEntry(fs,nlr)==sect)
  804aa0:	00000a06 	br	804acc <fat_getNextClusterChain+0x130>
	{
		lr=nlr;
  804aa4:	e0bff917 	ldw	r2,-28(fp)
  804aa8:	e0bffa15 	stw	r2,-24(fp)
		nlr=fat_getNextClusterAddressWBuf(fs,lr,buf);
  804aac:	e13ffc17 	ldw	r4,-16(fp)
  804ab0:	e17ffa17 	ldw	r5,-24(fp)
  804ab4:	e1bff617 	ldw	r6,-40(fp)
  804ab8:	08044f00 	call	8044f0 <fat_getNextClusterAddressWBuf>
  804abc:	e0bff915 	stw	r2,-28(fp)
		lin++;	
  804ac0:	e0bff70b 	ldhu	r2,-36(fp)
  804ac4:	10800044 	addi	r2,r2,1
  804ac8:	e0bff70d 	sth	r2,-36(fp)
	Cache->LogicCluster++;
		
	lr=Cache->DiscCluster-1;
	nlr=lr+1;
	
	while(nlr-1==lr && fat_getSectorAddressFatEntry(fs,nlr)==sect)
  804acc:	e0bff917 	ldw	r2,-28(fp)
  804ad0:	10ffffc4 	addi	r3,r2,-1
  804ad4:	e0bffa17 	ldw	r2,-24(fp)
  804ad8:	1880061e 	bne	r3,r2,804af4 <fat_getNextClusterChain+0x158>
  804adc:	e13ffc17 	ldw	r4,-16(fp)
  804ae0:	e17ff917 	ldw	r5,-28(fp)
  804ae4:	0803cf00 	call	803cf0 <fat_getSectorAddressFatEntry>
  804ae8:	1007883a 	mov	r3,r2
  804aec:	e0bffb17 	ldw	r2,-20(fp)
  804af0:	18bfec26 	beq	r3,r2,804aa4 <fat_getNextClusterChain+0x108>
		lr=nlr;
		nlr=fat_getNextClusterAddressWBuf(fs,lr,buf);
		lin++;	
	}
	
	Cache->Linear=lin-1<0?0:lin-1;
  804af4:	e0bff70f 	ldh	r2,-36(fp)
  804af8:	10800050 	cmplti	r2,r2,1
  804afc:	1000041e 	bne	r2,zero,804b10 <fat_getNextClusterChain+0x174>
  804b00:	e0bff70b 	ldhu	r2,-36(fp)
  804b04:	10bfffc4 	addi	r2,r2,-1
  804b08:	e0bffe05 	stb	r2,-8(fp)
  804b0c:	00000106 	br	804b14 <fat_getNextClusterChain+0x178>
  804b10:	e03ffe05 	stb	zero,-8(fp)
  804b14:	e0bffd17 	ldw	r2,-12(fp)
  804b18:	e0fffe03 	ldbu	r3,-8(fp)
  804b1c:	10c00005 	stb	r3,0(r2)
	
	part_relSect(fs->part,buf);
  804b20:	e0bffc17 	ldw	r2,-16(fp)
  804b24:	11000017 	ldw	r4,0(r2)
  804b28:	e17ff617 	ldw	r5,-40(fp)
  804b2c:	080a6440 	call	80a644 <part_relSect>
	return(0);
  804b30:	e03fff15 	stw	zero,-4(fp)
  804b34:	e0bfff17 	ldw	r2,-4(fp)
}
  804b38:	e037883a 	mov	sp,fp
  804b3c:	dfc00117 	ldw	ra,4(sp)
  804b40:	df000017 	ldw	fp,0(sp)
  804b44:	dec00204 	addi	sp,sp,8
  804b48:	f800283a 	ret

00804b4c <fat_LogicToDiscCluster>:
 * It is NOT recommended to go backwards in clusterchains, since this will require
 * scanning the entire chain every time.
 * Return value: 0 on success and -1 on failure (meaning out of bounds).
*/
esint16 fat_LogicToDiscCluster(FileSystem *fs, ClusterChain *Cache,euint32 logiccluster)
{
  804b4c:	defffa04 	addi	sp,sp,-24
  804b50:	dfc00515 	stw	ra,20(sp)
  804b54:	df000415 	stw	fp,16(sp)
  804b58:	df000404 	addi	fp,sp,16
  804b5c:	e13ffc15 	stw	r4,-16(fp)
  804b60:	e17ffd15 	stw	r5,-12(fp)
  804b64:	e1bffe15 	stw	r6,-8(fp)
	if(logiccluster<Cache->LogicCluster || Cache->DiscCluster==0){
  804b68:	e0bffd17 	ldw	r2,-12(fp)
  804b6c:	10800117 	ldw	r2,4(r2)
  804b70:	1007883a 	mov	r3,r2
  804b74:	e0bffe17 	ldw	r2,-8(fp)
  804b78:	10c00436 	bltu	r2,r3,804b8c <fat_LogicToDiscCluster+0x40>
  804b7c:	e0bffd17 	ldw	r2,-12(fp)
  804b80:	10800217 	ldw	r2,8(r2)
  804b84:	1004c03a 	cmpne	r2,r2,zero
  804b88:	1000081e 	bne	r2,zero,804bac <fat_LogicToDiscCluster+0x60>
		Cache->LogicCluster=0;
  804b8c:	e0bffd17 	ldw	r2,-12(fp)
  804b90:	10000115 	stw	zero,4(r2)
		Cache->DiscCluster=Cache->FirstCluster;
  804b94:	e0bffd17 	ldw	r2,-12(fp)
  804b98:	10c00317 	ldw	r3,12(r2)
  804b9c:	e0bffd17 	ldw	r2,-12(fp)
  804ba0:	10c00215 	stw	r3,8(r2)
		Cache->Linear=0;
  804ba4:	e0bffd17 	ldw	r2,-12(fp)
  804ba8:	10000005 	stb	zero,0(r2)
	}
	
	if(Cache->LogicCluster==logiccluster){
  804bac:	e0bffd17 	ldw	r2,-12(fp)
  804bb0:	10800117 	ldw	r2,4(r2)
  804bb4:	1007883a 	mov	r3,r2
  804bb8:	e0bffe17 	ldw	r2,-8(fp)
  804bbc:	1880231e 	bne	r3,r2,804c4c <fat_LogicToDiscCluster+0x100>
		return(0);
  804bc0:	e03fff15 	stw	zero,-4(fp)
  804bc4:	00002706 	br	804c64 <fat_LogicToDiscCluster+0x118>
	}
	
	while(Cache->LogicCluster!=logiccluster)
	{
		if(Cache->Linear!=0)
  804bc8:	e0bffd17 	ldw	r2,-12(fp)
  804bcc:	10800003 	ldbu	r2,0(r2)
  804bd0:	10803fcc 	andi	r2,r2,255
  804bd4:	1005003a 	cmpeq	r2,r2,zero
  804bd8:	1000111e 	bne	r2,zero,804c20 <fat_LogicToDiscCluster+0xd4>
		{
			Cache->Linear--;
  804bdc:	e0bffd17 	ldw	r2,-12(fp)
  804be0:	10800003 	ldbu	r2,0(r2)
  804be4:	10bfffc4 	addi	r2,r2,-1
  804be8:	1007883a 	mov	r3,r2
  804bec:	e0bffd17 	ldw	r2,-12(fp)
  804bf0:	10c00005 	stb	r3,0(r2)
			Cache->LogicCluster++;
  804bf4:	e0bffd17 	ldw	r2,-12(fp)
  804bf8:	10800117 	ldw	r2,4(r2)
  804bfc:	10c00044 	addi	r3,r2,1
  804c00:	e0bffd17 	ldw	r2,-12(fp)
  804c04:	10c00115 	stw	r3,4(r2)
			Cache->DiscCluster++;
  804c08:	e0bffd17 	ldw	r2,-12(fp)
  804c0c:	10800217 	ldw	r2,8(r2)
  804c10:	10c00044 	addi	r3,r2,1
  804c14:	e0bffd17 	ldw	r2,-12(fp)
  804c18:	10c00215 	stw	r3,8(r2)
  804c1c:	00000b06 	br	804c4c <fat_LogicToDiscCluster+0x100>
		}
		else
		{
			if((fat_getNextClusterChain(fs,Cache))!=0){
  804c20:	e13ffc17 	ldw	r4,-16(fp)
  804c24:	e17ffd17 	ldw	r5,-12(fp)
  804c28:	080499c0 	call	80499c <fat_getNextClusterChain>
  804c2c:	10bfffcc 	andi	r2,r2,65535
  804c30:	10a0001c 	xori	r2,r2,32768
  804c34:	10a00004 	addi	r2,r2,-32768
  804c38:	1005003a 	cmpeq	r2,r2,zero
  804c3c:	1000031e 	bne	r2,zero,804c4c <fat_LogicToDiscCluster+0x100>
				return(-1);
  804c40:	00bfffc4 	movi	r2,-1
  804c44:	e0bfff15 	stw	r2,-4(fp)
  804c48:	00000606 	br	804c64 <fat_LogicToDiscCluster+0x118>
	
	if(Cache->LogicCluster==logiccluster){
		return(0);
	}
	
	while(Cache->LogicCluster!=logiccluster)
  804c4c:	e0bffd17 	ldw	r2,-12(fp)
  804c50:	10800117 	ldw	r2,4(r2)
  804c54:	1007883a 	mov	r3,r2
  804c58:	e0bffe17 	ldw	r2,-8(fp)
  804c5c:	18bfda1e 	bne	r3,r2,804bc8 <fat_LogicToDiscCluster+0x7c>
			if((fat_getNextClusterChain(fs,Cache))!=0){
				return(-1);
			}
		}
	}
	return(0);
  804c60:	e03fff15 	stw	zero,-4(fp)
  804c64:	e0bfff17 	ldw	r2,-4(fp)
}
  804c68:	e037883a 	mov	sp,fp
  804c6c:	dfc00117 	ldw	ra,4(sp)
  804c70:	df000017 	ldw	fp,0(sp)
  804c74:	dec00204 	addi	sp,sp,8
  804c78:	f800283a 	ret

00804c7c <fat_allocClusterChain>:
 * number of clusters it *failed* to allocate. 
 * Return value: 0 on success, all other values are the number of clusters it could
 * not allocate.
*/
eint16 fat_allocClusterChain(FileSystem *fs,ClusterChain *Cache,euint32 num_clusters)
{
  804c7c:	defff304 	addi	sp,sp,-52
  804c80:	dfc00c15 	stw	ra,48(sp)
  804c84:	df000b15 	stw	fp,44(sp)
  804c88:	dc000a15 	stw	r16,40(sp)
  804c8c:	df000a04 	addi	fp,sp,40
  804c90:	e13ffc15 	stw	r4,-16(fp)
  804c94:	e17ffd15 	stw	r5,-12(fp)
  804c98:	e1bffe15 	stw	r6,-8(fp)
	euint32 cc,ncl=num_clusters,lc;
  804c9c:	e0bffe17 	ldw	r2,-8(fp)
  804ca0:	e0bffa15 	stw	r2,-24(fp)
	euint8 *bufa=0,*bufb=0;
  804ca4:	e03ff815 	stw	zero,-32(fp)
  804ca8:	e03ff715 	stw	zero,-36(fp)
	euint8  overflow=0;
  804cac:	e03ff605 	stb	zero,-40(fp)

	if(Cache->FirstCluster<=1)return(num_clusters);
  804cb0:	e0bffd17 	ldw	r2,-12(fp)
  804cb4:	10800317 	ldw	r2,12(r2)
  804cb8:	108000a8 	cmpgeui	r2,r2,2
  804cbc:	1000061e 	bne	r2,zero,804cd8 <fat_allocClusterChain+0x5c>
  804cc0:	e0bffe17 	ldw	r2,-8(fp)
  804cc4:	10bfffcc 	andi	r2,r2,65535
  804cc8:	10a0001c 	xori	r2,r2,32768
  804ccc:	10a00004 	addi	r2,r2,-32768
  804cd0:	e0bfff15 	stw	r2,-4(fp)
  804cd4:	00009506 	br	804f2c <fat_allocClusterChain+0x2b0>
	
	lc=fs_getLastCluster(fs,Cache);
  804cd8:	e13ffc17 	ldw	r4,-16(fp)
  804cdc:	e17ffd17 	ldw	r5,-12(fp)
  804ce0:	08071540 	call	807154 <fs_getLastCluster>
  804ce4:	e0bff915 	stw	r2,-28(fp)
	cc=lc;
  804ce8:	e0bff917 	ldw	r2,-28(fp)
  804cec:	e0bffb15 	stw	r2,-20(fp)
	
	while(ncl > 0){
  804cf0:	00008006 	br	804ef4 <fat_allocClusterChain+0x278>
		cc++;
  804cf4:	e0bffb17 	ldw	r2,-20(fp)
  804cf8:	10800044 	addi	r2,r2,1
  804cfc:	e0bffb15 	stw	r2,-20(fp)
		if(cc>=fs->DataClusterCount+1){
  804d00:	e0bffc17 	ldw	r2,-16(fp)
  804d04:	10800817 	ldw	r2,32(r2)
  804d08:	10c00044 	addi	r3,r2,1
  804d0c:	e0bffb17 	ldw	r2,-20(fp)
  804d10:	10c03136 	bltu	r2,r3,804dd8 <fat_allocClusterChain+0x15c>
			if(overflow){
  804d14:	e0bff603 	ldbu	r2,-40(fp)
  804d18:	1005003a 	cmpeq	r2,r2,zero
  804d1c:	1000291e 	bne	r2,zero,804dc4 <fat_allocClusterChain+0x148>
				bufa=part_getSect(fs->part,fat_getSectorAddressFatEntry(fs,lc),IOM_MODE_READWRITE);
  804d20:	e0bffc17 	ldw	r2,-16(fp)
  804d24:	14000017 	ldw	r16,0(r2)
  804d28:	e13ffc17 	ldw	r4,-16(fp)
  804d2c:	e17ff917 	ldw	r5,-28(fp)
  804d30:	0803cf00 	call	803cf0 <fat_getSectorAddressFatEntry>
  804d34:	100b883a 	mov	r5,r2
  804d38:	8009883a 	mov	r4,r16
  804d3c:	01800084 	movi	r6,2
  804d40:	080a5e40 	call	80a5e4 <part_getSect>
  804d44:	e0bff815 	stw	r2,-32(fp)
				fat_setNextClusterAddressWBuf(fs,lc,fat_giveEocMarker(fs),bufa);
  804d48:	e13ffc17 	ldw	r4,-16(fp)
  804d4c:	08044680 	call	804468 <fat_giveEocMarker>
  804d50:	100d883a 	mov	r6,r2
  804d54:	e13ffc17 	ldw	r4,-16(fp)
  804d58:	e17ff917 	ldw	r5,-28(fp)
  804d5c:	e1fff817 	ldw	r7,-32(fp)
  804d60:	08046b80 	call	8046b8 <fat_setNextClusterAddressWBuf>
				Cache->LastCluster=lc;
  804d64:	e0fffd17 	ldw	r3,-12(fp)
  804d68:	e0bff917 	ldw	r2,-28(fp)
  804d6c:	18800415 	stw	r2,16(r3)
				part_relSect(fs->part,bufa);
  804d70:	e0bffc17 	ldw	r2,-16(fp)
  804d74:	11000017 	ldw	r4,0(r2)
  804d78:	e17ff817 	ldw	r5,-32(fp)
  804d7c:	080a6440 	call	80a644 <part_relSect>
				fs->FreeClusterCount-=num_clusters-ncl;
  804d80:	e0bffc17 	ldw	r2,-16(fp)
  804d84:	11000d17 	ldw	r4,52(r2)
  804d88:	e0fffe17 	ldw	r3,-8(fp)
  804d8c:	e0bffa17 	ldw	r2,-24(fp)
  804d90:	1885c83a 	sub	r2,r3,r2
  804d94:	2087c83a 	sub	r3,r4,r2
  804d98:	e0bffc17 	ldw	r2,-16(fp)
  804d9c:	10c00d15 	stw	r3,52(r2)
				return(num_clusters-ncl);
  804da0:	e0bffe17 	ldw	r2,-8(fp)
  804da4:	1007883a 	mov	r3,r2
  804da8:	e0bffa17 	ldw	r2,-24(fp)
  804dac:	1885c83a 	sub	r2,r3,r2
  804db0:	10bfffcc 	andi	r2,r2,65535
  804db4:	10a0001c 	xori	r2,r2,32768
  804db8:	10a00004 	addi	r2,r2,-32768
  804dbc:	e0bfff15 	stw	r2,-4(fp)
  804dc0:	00005a06 	br	804f2c <fat_allocClusterChain+0x2b0>
			}
			cc=2;
  804dc4:	00800084 	movi	r2,2
  804dc8:	e0bffb15 	stw	r2,-20(fp)
			overflow++;
  804dcc:	e0bff603 	ldbu	r2,-40(fp)
  804dd0:	10800044 	addi	r2,r2,1
  804dd4:	e0bff605 	stb	r2,-40(fp)
		}
		bufa=part_getSect(fs->part,fat_getSectorAddressFatEntry(fs,cc),IOM_MODE_READONLY);
  804dd8:	e0bffc17 	ldw	r2,-16(fp)
  804ddc:	14000017 	ldw	r16,0(r2)
  804de0:	e13ffc17 	ldw	r4,-16(fp)
  804de4:	e17ffb17 	ldw	r5,-20(fp)
  804de8:	0803cf00 	call	803cf0 <fat_getSectorAddressFatEntry>
  804dec:	100b883a 	mov	r5,r2
  804df0:	8009883a 	mov	r4,r16
  804df4:	01800044 	movi	r6,1
  804df8:	080a5e40 	call	80a5e4 <part_getSect>
  804dfc:	e0bff815 	stw	r2,-32(fp)
		if(fat_getNextClusterAddressWBuf(fs,cc,bufa)==0){
  804e00:	e13ffc17 	ldw	r4,-16(fp)
  804e04:	e17ffb17 	ldw	r5,-20(fp)
  804e08:	e1bff817 	ldw	r6,-32(fp)
  804e0c:	08044f00 	call	8044f0 <fat_getNextClusterAddressWBuf>
  804e10:	1004c03a 	cmpne	r2,r2,zero
  804e14:	1000181e 	bne	r2,zero,804e78 <fat_allocClusterChain+0x1fc>
			bufb=part_getSect(fs->part,fat_getSectorAddressFatEntry(fs,lc),IOM_MODE_READWRITE);
  804e18:	e0bffc17 	ldw	r2,-16(fp)
  804e1c:	14000017 	ldw	r16,0(r2)
  804e20:	e13ffc17 	ldw	r4,-16(fp)
  804e24:	e17ff917 	ldw	r5,-28(fp)
  804e28:	0803cf00 	call	803cf0 <fat_getSectorAddressFatEntry>
  804e2c:	100b883a 	mov	r5,r2
  804e30:	8009883a 	mov	r4,r16
  804e34:	01800084 	movi	r6,2
  804e38:	080a5e40 	call	80a5e4 <part_getSect>
  804e3c:	e0bff715 	stw	r2,-36(fp)
			fat_setNextClusterAddressWBuf(fs,lc,cc,bufb);
  804e40:	e13ffc17 	ldw	r4,-16(fp)
  804e44:	e17ff917 	ldw	r5,-28(fp)
  804e48:	e1bffb17 	ldw	r6,-20(fp)
  804e4c:	e1fff717 	ldw	r7,-36(fp)
  804e50:	08046b80 	call	8046b8 <fat_setNextClusterAddressWBuf>
			part_relSect(fs->part,bufb);
  804e54:	e0bffc17 	ldw	r2,-16(fp)
  804e58:	11000017 	ldw	r4,0(r2)
  804e5c:	e17ff717 	ldw	r5,-36(fp)
  804e60:	080a6440 	call	80a644 <part_relSect>
			ncl--;
  804e64:	e0bffa17 	ldw	r2,-24(fp)
  804e68:	10bfffc4 	addi	r2,r2,-1
  804e6c:	e0bffa15 	stw	r2,-24(fp)
			lc=cc;
  804e70:	e0bffb17 	ldw	r2,-20(fp)
  804e74:	e0bff915 	stw	r2,-28(fp)
		}
		part_relSect(fs->part,bufa);
  804e78:	e0bffc17 	ldw	r2,-16(fp)
  804e7c:	11000017 	ldw	r4,0(r2)
  804e80:	e17ff817 	ldw	r5,-32(fp)
  804e84:	080a6440 	call	80a644 <part_relSect>
		if(ncl==0){
  804e88:	e0bffa17 	ldw	r2,-24(fp)
  804e8c:	1004c03a 	cmpne	r2,r2,zero
  804e90:	1000181e 	bne	r2,zero,804ef4 <fat_allocClusterChain+0x278>
			bufa=part_getSect(fs->part,fat_getSectorAddressFatEntry(fs,lc),IOM_MODE_READWRITE);
  804e94:	e0bffc17 	ldw	r2,-16(fp)
  804e98:	14000017 	ldw	r16,0(r2)
  804e9c:	e13ffc17 	ldw	r4,-16(fp)
  804ea0:	e17ff917 	ldw	r5,-28(fp)
  804ea4:	0803cf00 	call	803cf0 <fat_getSectorAddressFatEntry>
  804ea8:	100b883a 	mov	r5,r2
  804eac:	8009883a 	mov	r4,r16
  804eb0:	01800084 	movi	r6,2
  804eb4:	080a5e40 	call	80a5e4 <part_getSect>
  804eb8:	e0bff815 	stw	r2,-32(fp)
			fat_setNextClusterAddressWBuf(fs,lc,fat_giveEocMarker(fs),bufa);
  804ebc:	e13ffc17 	ldw	r4,-16(fp)
  804ec0:	08044680 	call	804468 <fat_giveEocMarker>
  804ec4:	100d883a 	mov	r6,r2
  804ec8:	e13ffc17 	ldw	r4,-16(fp)
  804ecc:	e17ff917 	ldw	r5,-28(fp)
  804ed0:	e1fff817 	ldw	r7,-32(fp)
  804ed4:	08046b80 	call	8046b8 <fat_setNextClusterAddressWBuf>
			Cache->LastCluster=lc;
  804ed8:	e0fffd17 	ldw	r3,-12(fp)
  804edc:	e0bff917 	ldw	r2,-28(fp)
  804ee0:	18800415 	stw	r2,16(r3)
			part_relSect(fs->part,bufa);
  804ee4:	e0bffc17 	ldw	r2,-16(fp)
  804ee8:	11000017 	ldw	r4,0(r2)
  804eec:	e17ff817 	ldw	r5,-32(fp)
  804ef0:	080a6440 	call	80a644 <part_relSect>
	if(Cache->FirstCluster<=1)return(num_clusters);
	
	lc=fs_getLastCluster(fs,Cache);
	cc=lc;
	
	while(ncl > 0){
  804ef4:	e0bffa17 	ldw	r2,-24(fp)
  804ef8:	1004c03a 	cmpne	r2,r2,zero
  804efc:	103f7d1e 	bne	r2,zero,804cf4 <fat_allocClusterChain+0x78>
			fat_setNextClusterAddressWBuf(fs,lc,fat_giveEocMarker(fs),bufa);
			Cache->LastCluster=lc;
			part_relSect(fs->part,bufa);
		}
	}
	if(Cache->ClusterCount)Cache->ClusterCount+=num_clusters;
  804f00:	e0bffd17 	ldw	r2,-12(fp)
  804f04:	10800517 	ldw	r2,20(r2)
  804f08:	1005003a 	cmpeq	r2,r2,zero
  804f0c:	1000061e 	bne	r2,zero,804f28 <fat_allocClusterChain+0x2ac>
  804f10:	e0bffd17 	ldw	r2,-12(fp)
  804f14:	10c00517 	ldw	r3,20(r2)
  804f18:	e0bffe17 	ldw	r2,-8(fp)
  804f1c:	1887883a 	add	r3,r3,r2
  804f20:	e0bffd17 	ldw	r2,-12(fp)
  804f24:	10c00515 	stw	r3,20(r2)
	return(0);
  804f28:	e03fff15 	stw	zero,-4(fp)
  804f2c:	e0bfff17 	ldw	r2,-4(fp)
}
  804f30:	e037883a 	mov	sp,fp
  804f34:	dfc00217 	ldw	ra,8(sp)
  804f38:	df000117 	ldw	fp,4(sp)
  804f3c:	dc000017 	ldw	r16,0(sp)
  804f40:	dec00304 	addi	sp,sp,12
  804f44:	f800283a 	ret

00804f48 <fat_unlinkClusterChain>:
 * Description: This function removes a clusterchain. Starting at FirstCluster
 * it follows the chain until the end, resetting all values to 0.
 * Return value: 0 on success.
*/
eint16 fat_unlinkClusterChain(FileSystem *fs,ClusterChain *Cache)
{
  804f48:	defffa04 	addi	sp,sp,-24
  804f4c:	dfc00515 	stw	ra,20(sp)
  804f50:	df000415 	stw	fp,16(sp)
  804f54:	df000404 	addi	fp,sp,16
  804f58:	e13ffe15 	stw	r4,-8(fp)
  804f5c:	e17fff15 	stw	r5,-4(fp)
	euint32 c,tbd=0;
  804f60:	e03ffc15 	stw	zero,-16(fp)
	
	Cache->LogicCluster=0;
  804f64:	e0bfff17 	ldw	r2,-4(fp)
  804f68:	10000115 	stw	zero,4(r2)
	Cache->DiscCluster=Cache->FirstCluster;
  804f6c:	e0bfff17 	ldw	r2,-4(fp)
  804f70:	10c00317 	ldw	r3,12(r2)
  804f74:	e0bfff17 	ldw	r2,-4(fp)
  804f78:	10c00215 	stw	r3,8(r2)
	
	c=0;
  804f7c:	e03ffd15 	stw	zero,-12(fp)
	
	while(!fat_LogicToDiscCluster(fs,Cache,c++)){
  804f80:	00000a06 	br	804fac <fat_unlinkClusterChain+0x64>
		if(tbd!=0){
  804f84:	e0bffc17 	ldw	r2,-16(fp)
  804f88:	1005003a 	cmpeq	r2,r2,zero
  804f8c:	1000041e 	bne	r2,zero,804fa0 <fat_unlinkClusterChain+0x58>
			fat_setNextClusterAddress(fs,tbd,0);
  804f90:	e13ffe17 	ldw	r4,-8(fp)
  804f94:	e17ffc17 	ldw	r5,-16(fp)
  804f98:	000d883a 	mov	r6,zero
  804f9c:	08040400 	call	804040 <fat_setNextClusterAddress>
		}
		tbd=Cache->DiscCluster;
  804fa0:	e0bfff17 	ldw	r2,-4(fp)
  804fa4:	10800217 	ldw	r2,8(r2)
  804fa8:	e0bffc15 	stw	r2,-16(fp)
	Cache->LogicCluster=0;
	Cache->DiscCluster=Cache->FirstCluster;
	
	c=0;
	
	while(!fat_LogicToDiscCluster(fs,Cache,c++)){
  804fac:	e1bffd17 	ldw	r6,-12(fp)
  804fb0:	e0bffd17 	ldw	r2,-12(fp)
  804fb4:	10800044 	addi	r2,r2,1
  804fb8:	e0bffd15 	stw	r2,-12(fp)
  804fbc:	e13ffe17 	ldw	r4,-8(fp)
  804fc0:	e17fff17 	ldw	r5,-4(fp)
  804fc4:	0804b4c0 	call	804b4c <fat_LogicToDiscCluster>
  804fc8:	10bfffcc 	andi	r2,r2,65535
  804fcc:	10a0001c 	xori	r2,r2,32768
  804fd0:	10a00004 	addi	r2,r2,-32768
  804fd4:	1005003a 	cmpeq	r2,r2,zero
  804fd8:	103fea1e 	bne	r2,zero,804f84 <fat_unlinkClusterChain+0x3c>
		if(tbd!=0){
			fat_setNextClusterAddress(fs,tbd,0);
		}
		tbd=Cache->DiscCluster;
	}
	fat_setNextClusterAddress(fs,Cache->DiscCluster,0);
  804fdc:	e0bfff17 	ldw	r2,-4(fp)
  804fe0:	11400217 	ldw	r5,8(r2)
  804fe4:	e13ffe17 	ldw	r4,-8(fp)
  804fe8:	000d883a 	mov	r6,zero
  804fec:	08040400 	call	804040 <fat_setNextClusterAddress>
	fs->FreeClusterCount+=c;	
  804ff0:	e0bffe17 	ldw	r2,-8(fp)
  804ff4:	10c00d17 	ldw	r3,52(r2)
  804ff8:	e0bffd17 	ldw	r2,-12(fp)
  804ffc:	1887883a 	add	r3,r3,r2
  805000:	e0bffe17 	ldw	r2,-8(fp)
  805004:	10c00d15 	stw	r3,52(r2)
 	return(0);
  805008:	0005883a 	mov	r2,zero
}
  80500c:	e037883a 	mov	sp,fp
  805010:	dfc00117 	ldw	ra,4(sp)
  805014:	df000017 	ldw	fp,0(sp)
  805018:	dec00204 	addi	sp,sp,8
  80501c:	f800283a 	ret

00805020 <fat_countClustersInChain>:

euint32 fat_countClustersInChain(FileSystem *fs,euint32 firstcluster)
{
  805020:	defff404 	addi	sp,sp,-48
  805024:	dfc00b15 	stw	ra,44(sp)
  805028:	df000a15 	stw	fp,40(sp)
  80502c:	df000a04 	addi	fp,sp,40
  805030:	e13ffd15 	stw	r4,-12(fp)
  805034:	e17ffe15 	stw	r5,-8(fp)
	ClusterChain cache;
	euint32 c=0;
  805038:	e03ff615 	stw	zero,-40(fp)
	
	if(firstcluster<=1)return(0);
  80503c:	e0bffe17 	ldw	r2,-8(fp)
  805040:	108000a8 	cmpgeui	r2,r2,2
  805044:	1000021e 	bne	r2,zero,805050 <fat_countClustersInChain+0x30>
  805048:	e03fff15 	stw	zero,-4(fp)
  80504c:	00001706 	br	8050ac <fat_countClustersInChain+0x8c>
	
	cache.DiscCluster = cache.LogicCluster = cache.LastCluster = cache.Linear = 0;
  805050:	e03ff705 	stb	zero,-36(fp)
  805054:	e03ffb15 	stw	zero,-20(fp)
  805058:	e0bffb17 	ldw	r2,-20(fp)
  80505c:	e0bff815 	stw	r2,-32(fp)
  805060:	e0bff817 	ldw	r2,-32(fp)
  805064:	e0bff915 	stw	r2,-28(fp)
	cache.FirstCluster = firstcluster;
  805068:	e0bffe17 	ldw	r2,-8(fp)
  80506c:	e0bffa15 	stw	r2,-24(fp)
	
	while(!(fat_LogicToDiscCluster(fs,&cache,c++)));
  805070:	e1bff617 	ldw	r6,-40(fp)
  805074:	e0bff617 	ldw	r2,-40(fp)
  805078:	10800044 	addi	r2,r2,1
  80507c:	e0bff615 	stw	r2,-40(fp)
  805080:	e17ff704 	addi	r5,fp,-36
  805084:	e13ffd17 	ldw	r4,-12(fp)
  805088:	0804b4c0 	call	804b4c <fat_LogicToDiscCluster>
  80508c:	10bfffcc 	andi	r2,r2,65535
  805090:	10a0001c 	xori	r2,r2,32768
  805094:	10a00004 	addi	r2,r2,-32768
  805098:	1005003a 	cmpeq	r2,r2,zero
  80509c:	103ff41e 	bne	r2,zero,805070 <fat_countClustersInChain+0x50>
	
	return(c-1);
  8050a0:	e0bff617 	ldw	r2,-40(fp)
  8050a4:	10bfffc4 	addi	r2,r2,-1
  8050a8:	e0bfff15 	stw	r2,-4(fp)
  8050ac:	e0bfff17 	ldw	r2,-4(fp)
}
  8050b0:	e037883a 	mov	sp,fp
  8050b4:	dfc00117 	ldw	ra,4(sp)
  8050b8:	df000017 	ldw	fp,0(sp)
  8050bc:	dec00204 	addi	sp,sp,8
  8050c0:	f800283a 	ret

008050c4 <fat_DiscToLogicCluster>:

euint32 fat_DiscToLogicCluster(FileSystem *fs,euint32 firstcluster,euint32 disccluster)
{
  8050c4:	defff304 	addi	sp,sp,-52
  8050c8:	dfc00c15 	stw	ra,48(sp)
  8050cc:	df000b15 	stw	fp,44(sp)
  8050d0:	df000b04 	addi	fp,sp,44
  8050d4:	e13ffd15 	stw	r4,-12(fp)
  8050d8:	e17ffe15 	stw	r5,-8(fp)
  8050dc:	e1bfff15 	stw	r6,-4(fp)
	ClusterChain cache;
	euint32 c=0,r=0;
  8050e0:	e03ff615 	stw	zero,-40(fp)
  8050e4:	e03ff515 	stw	zero,-44(fp)
	
	cache.DiscCluster = cache.LogicCluster = cache.LastCluster = cache.Linear = 0;
  8050e8:	e03ff705 	stb	zero,-36(fp)
  8050ec:	e03ffb15 	stw	zero,-20(fp)
  8050f0:	e0bffb17 	ldw	r2,-20(fp)
  8050f4:	e0bff815 	stw	r2,-32(fp)
  8050f8:	e0bff817 	ldw	r2,-32(fp)
  8050fc:	e0bff915 	stw	r2,-28(fp)
	cache.FirstCluster = firstcluster;
  805100:	e0bffe17 	ldw	r2,-8(fp)
  805104:	e0bffa15 	stw	r2,-24(fp)
	
	while(!(fat_LogicToDiscCluster(fs,&cache,c++)) && !r){
  805108:	00000506 	br	805120 <fat_DiscToLogicCluster+0x5c>
		if(cache.DiscCluster == disccluster){
  80510c:	e0fff917 	ldw	r3,-28(fp)
  805110:	e0bfff17 	ldw	r2,-4(fp)
  805114:	1880021e 	bne	r3,r2,805120 <fat_DiscToLogicCluster+0x5c>
			r = cache.LogicCluster;
  805118:	e0bff817 	ldw	r2,-32(fp)
  80511c:	e0bff515 	stw	r2,-44(fp)
	euint32 c=0,r=0;
	
	cache.DiscCluster = cache.LogicCluster = cache.LastCluster = cache.Linear = 0;
	cache.FirstCluster = firstcluster;
	
	while(!(fat_LogicToDiscCluster(fs,&cache,c++)) && !r){
  805120:	e1bff617 	ldw	r6,-40(fp)
  805124:	e0bff617 	ldw	r2,-40(fp)
  805128:	10800044 	addi	r2,r2,1
  80512c:	e0bff615 	stw	r2,-40(fp)
  805130:	e17ff704 	addi	r5,fp,-36
  805134:	e13ffd17 	ldw	r4,-12(fp)
  805138:	0804b4c0 	call	804b4c <fat_LogicToDiscCluster>
  80513c:	10bfffcc 	andi	r2,r2,65535
  805140:	10a0001c 	xori	r2,r2,32768
  805144:	10a00004 	addi	r2,r2,-32768
  805148:	1004c03a 	cmpne	r2,r2,zero
  80514c:	1000031e 	bne	r2,zero,80515c <fat_DiscToLogicCluster+0x98>
  805150:	e0bff517 	ldw	r2,-44(fp)
  805154:	1005003a 	cmpeq	r2,r2,zero
  805158:	103fec1e 	bne	r2,zero,80510c <fat_DiscToLogicCluster+0x48>
		if(cache.DiscCluster == disccluster){
			r = cache.LogicCluster;
		}
	}
	return(r);
  80515c:	e0bff517 	ldw	r2,-44(fp)
}
  805160:	e037883a 	mov	sp,fp
  805164:	dfc00117 	ldw	ra,4(sp)
  805168:	df000017 	ldw	fp,0(sp)
  80516c:	dec00204 	addi	sp,sp,8
  805170:	f800283a 	ret

00805174 <fat_countFreeClusters>:

euint32 fat_countFreeClusters(FileSystem *fs)
{
  805174:	defffb04 	addi	sp,sp,-20
  805178:	dfc00415 	stw	ra,16(sp)
  80517c:	df000315 	stw	fp,12(sp)
  805180:	df000304 	addi	fp,sp,12
  805184:	e13fff15 	stw	r4,-4(fp)
	euint32 c=2,fc=0;
  805188:	00800084 	movi	r2,2
  80518c:	e0bffe15 	stw	r2,-8(fp)
  805190:	e03ffd15 	stw	zero,-12(fp)
	
	while(c<=fs->DataClusterCount+1){
  805194:	00000c06 	br	8051c8 <fat_countFreeClusters+0x54>
		if(fat_getNextClusterAddress(fs,c,0)==0)fc++;
  805198:	e13fff17 	ldw	r4,-4(fp)
  80519c:	e17ffe17 	ldw	r5,-8(fp)
  8051a0:	000d883a 	mov	r6,zero
  8051a4:	0803e180 	call	803e18 <fat_getNextClusterAddress>
  8051a8:	1004c03a 	cmpne	r2,r2,zero
  8051ac:	1000031e 	bne	r2,zero,8051bc <fat_countFreeClusters+0x48>
  8051b0:	e0bffd17 	ldw	r2,-12(fp)
  8051b4:	10800044 	addi	r2,r2,1
  8051b8:	e0bffd15 	stw	r2,-12(fp)
		c++;
  8051bc:	e0bffe17 	ldw	r2,-8(fp)
  8051c0:	10800044 	addi	r2,r2,1
  8051c4:	e0bffe15 	stw	r2,-8(fp)

euint32 fat_countFreeClusters(FileSystem *fs)
{
	euint32 c=2,fc=0;
	
	while(c<=fs->DataClusterCount+1){
  8051c8:	e0bfff17 	ldw	r2,-4(fp)
  8051cc:	10800817 	ldw	r2,32(r2)
  8051d0:	10c00044 	addi	r3,r2,1
  8051d4:	e0bffe17 	ldw	r2,-8(fp)
  8051d8:	18bfef2e 	bgeu	r3,r2,805198 <fat_countFreeClusters+0x24>
		if(fat_getNextClusterAddress(fs,c,0)==0)fc++;
		c++;
	}
	return(fc);
  8051dc:	e0bffd17 	ldw	r2,-12(fp)
}
  8051e0:	e037883a 	mov	sp,fp
  8051e4:	dfc00117 	ldw	ra,4(sp)
  8051e8:	df000017 	ldw	fp,0(sp)
  8051ec:	dec00204 	addi	sp,sp,8
  8051f0:	f800283a 	ret

008051f4 <file_fread>:
 * 'offset' and puts the result in '*buf'.
 * Return value: amount of bytes actually read (can differ from the given
 * size when the file was smaller
*/
euint32 file_fread(File *file,euint32 offset, euint32 size,euint8 *buf)
{
  8051f4:	deffed04 	addi	sp,sp,-76
  8051f8:	dfc01215 	stw	ra,72(sp)
  8051fc:	df001115 	stw	fp,68(sp)
  805200:	df001104 	addi	fp,sp,68
  805204:	e13ff915 	stw	r4,-28(fp)
  805208:	e17ffa15 	stw	r5,-24(fp)
  80520c:	e1bffb15 	stw	r6,-20(fp)
  805210:	e1fffc15 	stw	r7,-16(fp)
	euint32 bytes_read=0,size_left=size,coffset=offset;
  805214:	e03ff815 	stw	zero,-32(fp)
  805218:	e0bffb17 	ldw	r2,-20(fp)
  80521c:	e0bff715 	stw	r2,-36(fp)
  805220:	e0bffa17 	ldw	r2,-24(fp)
  805224:	e0bff615 	stw	r2,-40(fp)
	euint32 cclus,csec,cbyte;
	euint32 rclus,rsec;
	euint32 btr;
	euint8 *tbuf;
		
	if(!file_getAttr(file,FILE_STATUS_OPEN))return(0);
  805228:	e13ff917 	ldw	r4,-28(fp)
  80522c:	000b883a 	mov	r5,zero
  805230:	080631c0 	call	80631c <file_getAttr>
  805234:	10803fcc 	andi	r2,r2,255
  805238:	1004c03a 	cmpne	r2,r2,zero
  80523c:	1000021e 	bne	r2,zero,805248 <file_fread+0x54>
  805240:	e03ffd15 	stw	zero,-12(fp)
  805244:	00008b06 	br	805474 <file_fread+0x280>
	
	if(offset>=file->FileSize)
  805248:	e0bff917 	ldw	r2,-28(fp)
  80524c:	10c01317 	ldw	r3,76(r2)
  805250:	e0bffa17 	ldw	r2,-24(fp)
  805254:	10c00136 	bltu	r2,r3,80525c <file_fread+0x68>
		size_left=0; /* Offset check */
  805258:	e03ff715 	stw	zero,-36(fp)
	
	if( (offset+size > file->FileSize) && size_left!=0)
  80525c:	e0fffa17 	ldw	r3,-24(fp)
  805260:	e0bffb17 	ldw	r2,-20(fp)
  805264:	1887883a 	add	r3,r3,r2
  805268:	e0bff917 	ldw	r2,-28(fp)
  80526c:	10801317 	ldw	r2,76(r2)
  805270:	10c07b2e 	bgeu	r2,r3,805460 <file_fread+0x26c>
  805274:	e0bff717 	ldw	r2,-36(fp)
  805278:	1005003a 	cmpeq	r2,r2,zero
  80527c:	1000781e 	bne	r2,zero,805460 <file_fread+0x26c>
		size_left=file->FileSize-offset;
  805280:	e0bff917 	ldw	r2,-28(fp)
  805284:	10c01317 	ldw	r3,76(r2)
  805288:	e0bffa17 	ldw	r2,-24(fp)
  80528c:	1885c83a 	sub	r2,r3,r2
  805290:	e0bff715 	stw	r2,-36(fp)
	
	while(size_left>0){
  805294:	00007206 	br	805460 <file_fread+0x26c>
        //printf("size_left = %d\n", size_left);
	
		cclus = coffset/(512*file->fs->volumeId.SectorsPerCluster);
  805298:	e0bff917 	ldw	r2,-28(fp)
  80529c:	10800a17 	ldw	r2,40(r2)
  8052a0:	10800183 	ldbu	r2,6(r2)
  8052a4:	10803fcc 	andi	r2,r2,255
  8052a8:	1004927a 	slli	r2,r2,9
  8052ac:	100b883a 	mov	r5,r2
  8052b0:	e13ff617 	ldw	r4,-40(fp)
  8052b4:	08111d40 	call	8111d4 <__udivsi3>
  8052b8:	e0bff515 	stw	r2,-44(fp)
		csec = (coffset/(512))%file->fs->volumeId.SectorsPerCluster;
  8052bc:	e0bff617 	ldw	r2,-40(fp)
  8052c0:	1008d27a 	srli	r4,r2,9
  8052c4:	e0bff917 	ldw	r2,-28(fp)
  8052c8:	10800a17 	ldw	r2,40(r2)
  8052cc:	10800183 	ldbu	r2,6(r2)
  8052d0:	11403fcc 	andi	r5,r2,255
  8052d4:	08111dc0 	call	8111dc <__umodsi3>
  8052d8:	e0bff415 	stw	r2,-48(fp)
		cbyte = coffset%512;
  8052dc:	e0bff617 	ldw	r2,-40(fp)
  8052e0:	10807fcc 	andi	r2,r2,511
  8052e4:	e0bff315 	stw	r2,-52(fp)
		
		if(cbyte!=0 || size_left<512){
  8052e8:	e0bff317 	ldw	r2,-52(fp)
  8052ec:	1004c03a 	cmpne	r2,r2,zero
  8052f0:	1000031e 	bne	r2,zero,805300 <file_fread+0x10c>
  8052f4:	e0bff717 	ldw	r2,-36(fp)
  8052f8:	10808028 	cmpgeui	r2,r2,512
  8052fc:	10000f1e 	bne	r2,zero,80533c <file_fread+0x148>
			btr = 512-(coffset%512)>=size_left?size_left:512-(coffset%512);
  805300:	e0bff617 	ldw	r2,-40(fp)
  805304:	10c07fcc 	andi	r3,r2,511
  805308:	00808004 	movi	r2,512
  80530c:	10c5c83a 	sub	r2,r2,r3
  805310:	e0fff717 	ldw	r3,-36(fp)
  805314:	e0ffff15 	stw	r3,-4(fp)
  805318:	e0bffe15 	stw	r2,-8(fp)
  80531c:	e0bfff17 	ldw	r2,-4(fp)
  805320:	e0fffe17 	ldw	r3,-8(fp)
  805324:	10c0022e 	bgeu	r2,r3,805330 <file_fread+0x13c>
  805328:	e0bfff17 	ldw	r2,-4(fp)
  80532c:	e0bffe15 	stw	r2,-8(fp)
  805330:	e0fffe17 	ldw	r3,-8(fp)
  805334:	e0fff015 	stw	r3,-64(fp)
	
		cclus = coffset/(512*file->fs->volumeId.SectorsPerCluster);
		csec = (coffset/(512))%file->fs->volumeId.SectorsPerCluster;
		cbyte = coffset%512;
		
		if(cbyte!=0 || size_left<512){
  805338:	00000206 	br	805344 <file_fread+0x150>
			btr = 512-(coffset%512)>=size_left?size_left:512-(coffset%512);
		}else{
			btr = 512;
  80533c:	00808004 	movi	r2,512
  805340:	e0bff015 	stw	r2,-64(fp)
		}

		if((fat_LogicToDiscCluster(file->fs,&(file->Cache),cclus))!=0){
  805344:	e0bff917 	ldw	r2,-28(fp)
  805348:	11000a17 	ldw	r4,40(r2)
  80534c:	e0bff917 	ldw	r2,-28(fp)
  805350:	11400b04 	addi	r5,r2,44
  805354:	e1bff517 	ldw	r6,-44(fp)
  805358:	0804b4c0 	call	804b4c <fat_LogicToDiscCluster>
  80535c:	10bfffcc 	andi	r2,r2,65535
  805360:	10a0001c 	xori	r2,r2,32768
  805364:	10a00004 	addi	r2,r2,-32768
  805368:	1005003a 	cmpeq	r2,r2,zero
  80536c:	1000021e 	bne	r2,zero,805378 <file_fread+0x184>
			return(0);
  805370:	e03ffd15 	stw	zero,-12(fp)
  805374:	00003f06 	br	805474 <file_fread+0x280>
		}
		rclus=file->Cache.DiscCluster;
  805378:	e0bff917 	ldw	r2,-28(fp)
  80537c:	10800d17 	ldw	r2,52(r2)
  805380:	e0bff215 	stw	r2,-56(fp)
		rsec=fs_clusterToSector(file->fs,rclus);
  805384:	e0bff917 	ldw	r2,-28(fp)
  805388:	11000a17 	ldw	r4,40(r2)
  80538c:	e17ff217 	ldw	r5,-56(fp)
  805390:	0806b880 	call	806b88 <fs_clusterToSector>
  805394:	e0bff115 	stw	r2,-60(fp)
		
		
		if(btr==512){
  805398:	e0bff017 	ldw	r2,-64(fp)
  80539c:	10808018 	cmpnei	r2,r2,512
  8053a0:	10000b1e 	bne	r2,zero,8053d0 <file_fread+0x1dc>
			/*part_readBuf(file->fs->part,rsec+csec,buf+bytes_read);*/
			part_directSectorRead(file->fs->part,rsec+csec,buf+bytes_read);
  8053a4:	e0bff917 	ldw	r2,-28(fp)
  8053a8:	10800a17 	ldw	r2,40(r2)
  8053ac:	11000017 	ldw	r4,0(r2)
  8053b0:	e0fff117 	ldw	r3,-60(fp)
  8053b4:	e0bff417 	ldw	r2,-48(fp)
  8053b8:	188b883a 	add	r5,r3,r2
  8053bc:	e0fff817 	ldw	r3,-32(fp)
  8053c0:	e0bffc17 	ldw	r2,-16(fp)
  8053c4:	188d883a 	add	r6,r3,r2
  8053c8:	080a7140 	call	80a714 <part_directSectorRead>
  8053cc:	00001806 	br	805430 <file_fread+0x23c>
		}else{
			/*part_readBuf(file->fs->part,rsec+csec,tbuf);*/
			tbuf = part_getSect(file->fs->part,rsec+csec,IOM_MODE_READONLY);
  8053d0:	e0bff917 	ldw	r2,-28(fp)
  8053d4:	10800a17 	ldw	r2,40(r2)
  8053d8:	11000017 	ldw	r4,0(r2)
  8053dc:	e0fff117 	ldw	r3,-60(fp)
  8053e0:	e0bff417 	ldw	r2,-48(fp)
  8053e4:	188b883a 	add	r5,r3,r2
  8053e8:	01800044 	movi	r6,1
  8053ec:	080a5e40 	call	80a5e4 <part_getSect>
  8053f0:	e0bfef15 	stw	r2,-68(fp)
			memCpy(tbuf+(coffset%512),buf+bytes_read,btr);
  8053f4:	e0bff617 	ldw	r2,-40(fp)
  8053f8:	10807fcc 	andi	r2,r2,511
  8053fc:	1007883a 	mov	r3,r2
  805400:	e0bfef17 	ldw	r2,-68(fp)
  805404:	1889883a 	add	r4,r3,r2
  805408:	e0fff817 	ldw	r3,-32(fp)
  80540c:	e0bffc17 	ldw	r2,-16(fp)
  805410:	188b883a 	add	r5,r3,r2
  805414:	e1bff017 	ldw	r6,-64(fp)
  805418:	080a8840 	call	80a884 <memCpy>
			part_relSect(file->fs->part,tbuf);
  80541c:	e0bff917 	ldw	r2,-28(fp)
  805420:	10800a17 	ldw	r2,40(r2)
  805424:	11000017 	ldw	r4,0(r2)
  805428:	e17fef17 	ldw	r5,-68(fp)
  80542c:	080a6440 	call	80a644 <part_relSect>
		}
		
		coffset+=btr;
  805430:	e0fff617 	ldw	r3,-40(fp)
  805434:	e0bff017 	ldw	r2,-64(fp)
  805438:	1885883a 	add	r2,r3,r2
  80543c:	e0bff615 	stw	r2,-40(fp)
		bytes_read+=btr;
  805440:	e0fff817 	ldw	r3,-32(fp)
  805444:	e0bff017 	ldw	r2,-64(fp)
  805448:	1885883a 	add	r2,r3,r2
  80544c:	e0bff815 	stw	r2,-32(fp)
		size_left-=btr;
  805450:	e0fff717 	ldw	r3,-36(fp)
  805454:	e0bff017 	ldw	r2,-64(fp)
  805458:	1885c83a 	sub	r2,r3,r2
  80545c:	e0bff715 	stw	r2,-36(fp)
		size_left=0; /* Offset check */
	
	if( (offset+size > file->FileSize) && size_left!=0)
		size_left=file->FileSize-offset;
	
	while(size_left>0){
  805460:	e0bff717 	ldw	r2,-36(fp)
  805464:	1004c03a 	cmpne	r2,r2,zero
  805468:	103f8b1e 	bne	r2,zero,805298 <file_fread+0xa4>
		coffset+=btr;
		bytes_read+=btr;
		size_left-=btr;
	}
		
	return(bytes_read);
  80546c:	e0bff817 	ldw	r2,-32(fp)
  805470:	e0bffd15 	stw	r2,-12(fp)
  805474:	e0bffd17 	ldw	r2,-12(fp)
}
  805478:	e037883a 	mov	sp,fp
  80547c:	dfc00117 	ldw	ra,4(sp)
  805480:	df000017 	ldw	fp,0(sp)
  805484:	dec00204 	addi	sp,sp,8
  805488:	f800283a 	ret

0080548c <file_read>:
 * Description: This function reads from a file, taking the FilePtr into account
 * and advancing it according to the freadcall.
 * Return value: Value obtained from fread
*/
euint32 file_read(File *file,euint32 size,euint8 *buf)
{
  80548c:	defffa04 	addi	sp,sp,-24
  805490:	dfc00515 	stw	ra,20(sp)
  805494:	df000415 	stw	fp,16(sp)
  805498:	df000404 	addi	fp,sp,16
  80549c:	e13ffd15 	stw	r4,-12(fp)
  8054a0:	e17ffe15 	stw	r5,-8(fp)
  8054a4:	e1bfff15 	stw	r6,-4(fp)
	euint32 r;
	
	r=file_fread(file,file->FilePtr,size,buf);
  8054a8:	e0bffd17 	ldw	r2,-12(fp)
  8054ac:	11401217 	ldw	r5,72(r2)
  8054b0:	e13ffd17 	ldw	r4,-12(fp)
  8054b4:	e1bffe17 	ldw	r6,-8(fp)
  8054b8:	e1ffff17 	ldw	r7,-4(fp)
  8054bc:	08051f40 	call	8051f4 <file_fread>
  8054c0:	e0bffc15 	stw	r2,-16(fp)
	file->FilePtr+=r;
  8054c4:	e0bffd17 	ldw	r2,-12(fp)
  8054c8:	10c01217 	ldw	r3,72(r2)
  8054cc:	e0bffc17 	ldw	r2,-16(fp)
  8054d0:	1887883a 	add	r3,r3,r2
  8054d4:	e0bffd17 	ldw	r2,-12(fp)
  8054d8:	10c01215 	stw	r3,72(r2)
	return(r);
  8054dc:	e0bffc17 	ldw	r2,-16(fp)
}
  8054e0:	e037883a 	mov	sp,fp
  8054e4:	dfc00117 	ldw	ra,4(sp)
  8054e8:	df000017 	ldw	fp,0(sp)
  8054ec:	dec00204 	addi	sp,sp,8
  8054f0:	f800283a 	ret

008054f4 <file_write>:
 * Description: This function writes to a file, taking FilePtr into account
 * and advancing it according to the fwritecall.
 * Return value: Value obtained from fread
*/
euint32 file_write(File *file, euint32 size,euint8 *buf)
{
  8054f4:	defffa04 	addi	sp,sp,-24
  8054f8:	dfc00515 	stw	ra,20(sp)
  8054fc:	df000415 	stw	fp,16(sp)
  805500:	df000404 	addi	fp,sp,16
  805504:	e13ffd15 	stw	r4,-12(fp)
  805508:	e17ffe15 	stw	r5,-8(fp)
  80550c:	e1bfff15 	stw	r6,-4(fp)
	euint32 r;
	
	r=file_fwrite(file,file->FilePtr,size,buf);
  805510:	e0bffd17 	ldw	r2,-12(fp)
  805514:	11401217 	ldw	r5,72(r2)
  805518:	e13ffd17 	ldw	r4,-12(fp)
  80551c:	e1bffe17 	ldw	r6,-8(fp)
  805520:	e1ffff17 	ldw	r7,-4(fp)
  805524:	08055b00 	call	8055b0 <file_fwrite>
  805528:	e0bffc15 	stw	r2,-16(fp)
	file->FilePtr+=r;
  80552c:	e0bffd17 	ldw	r2,-12(fp)
  805530:	10c01217 	ldw	r3,72(r2)
  805534:	e0bffc17 	ldw	r2,-16(fp)
  805538:	1887883a 	add	r3,r3,r2
  80553c:	e0bffd17 	ldw	r2,-12(fp)
  805540:	10c01215 	stw	r3,72(r2)
	return(r);
  805544:	e0bffc17 	ldw	r2,-16(fp)
}
  805548:	e037883a 	mov	sp,fp
  80554c:	dfc00117 	ldw	ra,4(sp)
  805550:	df000017 	ldw	fp,0(sp)
  805554:	dec00204 	addi	sp,sp,8
  805558:	f800283a 	ret

0080555c <file_setpos>:
 * Description: This function does a sanity check on the requested position
 * and changes the fileptr accordingly.
 * Return value: 0 on success and -1 on failure.
*/
esint16 file_setpos(File *file,euint32 pos)
{
  80555c:	defffc04 	addi	sp,sp,-16
  805560:	df000315 	stw	fp,12(sp)
  805564:	df000304 	addi	fp,sp,12
  805568:	e13ffd15 	stw	r4,-12(fp)
  80556c:	e17ffe15 	stw	r5,-8(fp)
	if(pos<=file->FileSize){
  805570:	e0bffd17 	ldw	r2,-12(fp)
  805574:	10c01317 	ldw	r3,76(r2)
  805578:	e0bffe17 	ldw	r2,-8(fp)
  80557c:	18800536 	bltu	r3,r2,805594 <file_setpos+0x38>
		file->FilePtr=pos;
  805580:	e0fffd17 	ldw	r3,-12(fp)
  805584:	e0bffe17 	ldw	r2,-8(fp)
  805588:	18801215 	stw	r2,72(r3)
		return(0);
  80558c:	e03fff15 	stw	zero,-4(fp)
  805590:	00000206 	br	80559c <file_setpos+0x40>
	}
	return(-1);
  805594:	00bfffc4 	movi	r2,-1
  805598:	e0bfff15 	stw	r2,-4(fp)
  80559c:	e0bfff17 	ldw	r2,-4(fp)
}
  8055a0:	e037883a 	mov	sp,fp
  8055a4:	df000017 	ldw	fp,0(sp)
  8055a8:	dec00104 	addi	sp,sp,4
  8055ac:	f800283a 	ret

008055b0 <file_fwrite>:
 * Description: This function writes to a file, at offset 'offset' and size 'size'.
 * It also updates the FileSize in the object, and discstructure.
 * Return value: Bytes actually written.
*/
euint32 file_fwrite(File* file,euint32 offset,euint32 size,euint8* buf)
{
  8055b0:	deffec04 	addi	sp,sp,-80
  8055b4:	dfc01315 	stw	ra,76(sp)
  8055b8:	df001215 	stw	fp,72(sp)
  8055bc:	df001204 	addi	fp,sp,72
  8055c0:	e13ff915 	stw	r4,-28(fp)
  8055c4:	e17ffa15 	stw	r5,-24(fp)
  8055c8:	e1bffb15 	stw	r6,-20(fp)
  8055cc:	e1fffc15 	stw	r7,-16(fp)
	euint32 need_cluster;
	euint32 cclus,csec,cbyte;
	euint32 size_left=size,bytes_written=0;
  8055d0:	e0bffb17 	ldw	r2,-20(fp)
  8055d4:	e0bff415 	stw	r2,-48(fp)
  8055d8:	e03ff315 	stw	zero,-52(fp)
	euint32 rclus,rsec;
	euint32 coffset=offset;
  8055dc:	e0bffa17 	ldw	r2,-24(fp)
  8055e0:	e0bff015 	stw	r2,-64(fp)
	euint16 btr;
	euint8 *tbuf;

	if(!file_getAttr(file,FILE_STATUS_OPEN) || !file_getAttr(file,FILE_STATUS_WRITE))return(0);
  8055e4:	e13ff917 	ldw	r4,-28(fp)
  8055e8:	000b883a 	mov	r5,zero
  8055ec:	080631c0 	call	80631c <file_getAttr>
  8055f0:	10803fcc 	andi	r2,r2,255
  8055f4:	1005003a 	cmpeq	r2,r2,zero
  8055f8:	1000061e 	bne	r2,zero,805614 <file_fwrite+0x64>
  8055fc:	e13ff917 	ldw	r4,-28(fp)
  805600:	01400044 	movi	r5,1
  805604:	080631c0 	call	80631c <file_getAttr>
  805608:	10803fcc 	andi	r2,r2,255
  80560c:	1004c03a 	cmpne	r2,r2,zero
  805610:	1000021e 	bne	r2,zero,80561c <file_fwrite+0x6c>
  805614:	e03ffe15 	stw	zero,-8(fp)
  805618:	0000b206 	br	8058e4 <file_fwrite+0x334>
	
	if(offset>file->FileSize){
  80561c:	e0bff917 	ldw	r2,-28(fp)
  805620:	10c01317 	ldw	r3,76(r2)
  805624:	e0bffa17 	ldw	r2,-24(fp)
  805628:	1880032e 	bgeu	r3,r2,805638 <file_fwrite+0x88>
		offset=file->FileSize;
  80562c:	e0bff917 	ldw	r2,-28(fp)
  805630:	10801317 	ldw	r2,76(r2)
  805634:	e0bffa15 	stw	r2,-24(fp)
	}
	
	need_cluster = file_requiredCluster(file,offset,size);
  805638:	e13ff917 	ldw	r4,-28(fp)
  80563c:	e17ffa17 	ldw	r5,-24(fp)
  805640:	e1bffb17 	ldw	r6,-20(fp)
  805644:	08063600 	call	806360 <file_requiredCluster>
  805648:	e0bff815 	stw	r2,-32(fp)
	
	if(need_cluster){
  80564c:	e0bff817 	ldw	r2,-32(fp)
  805650:	1005003a 	cmpeq	r2,r2,zero
  805654:	10008d1e 	bne	r2,zero,80588c <file_fwrite+0x2dc>
		if(fat_allocClusterChain(file->fs,&(file->Cache),need_cluster+CLUSTER_PREALLOC_FILE)!=0){
  805658:	e0bff917 	ldw	r2,-28(fp)
  80565c:	11000a17 	ldw	r4,40(r2)
  805660:	e0bff917 	ldw	r2,-28(fp)
  805664:	11400b04 	addi	r5,r2,44
  805668:	e1bff817 	ldw	r6,-32(fp)
  80566c:	0804c7c0 	call	804c7c <fat_allocClusterChain>
  805670:	10bfffcc 	andi	r2,r2,65535
  805674:	10a0001c 	xori	r2,r2,32768
  805678:	10a00004 	addi	r2,r2,-32768
  80567c:	1005003a 	cmpeq	r2,r2,zero
  805680:	1000821e 	bne	r2,zero,80588c <file_fwrite+0x2dc>
			return(0);
  805684:	e03ffe15 	stw	zero,-8(fp)
  805688:	00009606 	br	8058e4 <file_fwrite+0x334>
		}
	}
	
	while(size_left>0){
	
		cclus = coffset/(512*file->fs->volumeId.SectorsPerCluster);
  80568c:	e0bff917 	ldw	r2,-28(fp)
  805690:	10800a17 	ldw	r2,40(r2)
  805694:	10800183 	ldbu	r2,6(r2)
  805698:	10803fcc 	andi	r2,r2,255
  80569c:	1004927a 	slli	r2,r2,9
  8056a0:	100b883a 	mov	r5,r2
  8056a4:	e13ff017 	ldw	r4,-64(fp)
  8056a8:	08111d40 	call	8111d4 <__udivsi3>
  8056ac:	e0bff715 	stw	r2,-36(fp)
		csec = (coffset/(512))%file->fs->volumeId.SectorsPerCluster;
  8056b0:	e0bff017 	ldw	r2,-64(fp)
  8056b4:	1008d27a 	srli	r4,r2,9
  8056b8:	e0bff917 	ldw	r2,-28(fp)
  8056bc:	10800a17 	ldw	r2,40(r2)
  8056c0:	10800183 	ldbu	r2,6(r2)
  8056c4:	11403fcc 	andi	r5,r2,255
  8056c8:	08111dc0 	call	8111dc <__umodsi3>
  8056cc:	e0bff615 	stw	r2,-40(fp)
		cbyte = coffset%512;
  8056d0:	e0bff017 	ldw	r2,-64(fp)
  8056d4:	10807fcc 	andi	r2,r2,511
  8056d8:	e0bff515 	stw	r2,-44(fp)
		
		if(cbyte!=0 || size_left<512){
  8056dc:	e0bff517 	ldw	r2,-44(fp)
  8056e0:	1004c03a 	cmpne	r2,r2,zero
  8056e4:	1000031e 	bne	r2,zero,8056f4 <file_fwrite+0x144>
  8056e8:	e0bff417 	ldw	r2,-48(fp)
  8056ec:	10808028 	cmpgeui	r2,r2,512
  8056f0:	10000f1e 	bne	r2,zero,805730 <file_fwrite+0x180>
			btr = 512-(coffset%512)>=size_left?size_left:512-(coffset%512);
  8056f4:	e0bff017 	ldw	r2,-64(fp)
  8056f8:	10c07fcc 	andi	r3,r2,511
  8056fc:	00808004 	movi	r2,512
  805700:	10c5c83a 	sub	r2,r2,r3
  805704:	e0fff417 	ldw	r3,-48(fp)
  805708:	e0ffff15 	stw	r3,-4(fp)
  80570c:	e0bffd15 	stw	r2,-12(fp)
  805710:	e0bfff17 	ldw	r2,-4(fp)
  805714:	e0fffd17 	ldw	r3,-12(fp)
  805718:	10c0022e 	bgeu	r2,r3,805724 <file_fwrite+0x174>
  80571c:	e0bfff17 	ldw	r2,-4(fp)
  805720:	e0bffd15 	stw	r2,-12(fp)
  805724:	e0fffd17 	ldw	r3,-12(fp)
  805728:	e0ffef0d 	sth	r3,-68(fp)
	
		cclus = coffset/(512*file->fs->volumeId.SectorsPerCluster);
		csec = (coffset/(512))%file->fs->volumeId.SectorsPerCluster;
		cbyte = coffset%512;
		
		if(cbyte!=0 || size_left<512){
  80572c:	00000206 	br	805738 <file_fwrite+0x188>
			btr = 512-(coffset%512)>=size_left?size_left:512-(coffset%512);
		}else{
			btr = 512;
  805730:	00808004 	movi	r2,512
  805734:	e0bfef0d 	sth	r2,-68(fp)
		}

		if((fat_LogicToDiscCluster(file->fs,&(file->Cache),cclus))!=0){
  805738:	e0bff917 	ldw	r2,-28(fp)
  80573c:	11000a17 	ldw	r4,40(r2)
  805740:	e0bff917 	ldw	r2,-28(fp)
  805744:	11400b04 	addi	r5,r2,44
  805748:	e1bff717 	ldw	r6,-36(fp)
  80574c:	0804b4c0 	call	804b4c <fat_LogicToDiscCluster>
  805750:	10bfffcc 	andi	r2,r2,65535
  805754:	10a0001c 	xori	r2,r2,32768
  805758:	10a00004 	addi	r2,r2,-32768
  80575c:	1005003a 	cmpeq	r2,r2,zero
  805760:	1000101e 	bne	r2,zero,8057a4 <file_fwrite+0x1f4>
			file->FileSize+=bytes_written;
  805764:	e0bff917 	ldw	r2,-28(fp)
  805768:	10c01317 	ldw	r3,76(r2)
  80576c:	e0bff317 	ldw	r2,-52(fp)
  805770:	1887883a 	add	r3,r3,r2
  805774:	e0bff917 	ldw	r2,-28(fp)
  805778:	10c01315 	stw	r3,76(r2)
			dir_setFileSize(file->fs,&(file->Location),file->FileSize);
  80577c:	e0bff917 	ldw	r2,-28(fp)
  805780:	11000a17 	ldw	r4,40(r2)
  805784:	e0bff917 	ldw	r2,-28(fp)
  805788:	11400804 	addi	r5,r2,32
  80578c:	e0bff917 	ldw	r2,-28(fp)
  805790:	11801317 	ldw	r6,76(r2)
  805794:	0802ee80 	call	802ee8 <dir_setFileSize>
			return(bytes_written);
  805798:	e0bff317 	ldw	r2,-52(fp)
  80579c:	e0bffe15 	stw	r2,-8(fp)
  8057a0:	00005006 	br	8058e4 <file_fwrite+0x334>
		}
		rclus=file->Cache.DiscCluster;
  8057a4:	e0bff917 	ldw	r2,-28(fp)
  8057a8:	10800d17 	ldw	r2,52(r2)
  8057ac:	e0bff215 	stw	r2,-56(fp)
		rsec=fs_clusterToSector(file->fs,rclus);
  8057b0:	e0bff917 	ldw	r2,-28(fp)
  8057b4:	11000a17 	ldw	r4,40(r2)
  8057b8:	e17ff217 	ldw	r5,-56(fp)
  8057bc:	0806b880 	call	806b88 <fs_clusterToSector>
  8057c0:	e0bff115 	stw	r2,-60(fp)
		
		if(btr==512){
  8057c4:	e0bfef0b 	ldhu	r2,-68(fp)
  8057c8:	10808018 	cmpnei	r2,r2,512
  8057cc:	10000b1e 	bne	r2,zero,8057fc <file_fwrite+0x24c>
			/*part_writeBuf(file->fs->part,rsec+csec,buf+bytes_written);*/
			part_directSectorWrite(file->fs->part,rsec+csec,buf+bytes_written);
  8057d0:	e0bff917 	ldw	r2,-28(fp)
  8057d4:	10800a17 	ldw	r2,40(r2)
  8057d8:	11000017 	ldw	r4,0(r2)
  8057dc:	e0fff117 	ldw	r3,-60(fp)
  8057e0:	e0bff617 	ldw	r2,-40(fp)
  8057e4:	188b883a 	add	r5,r3,r2
  8057e8:	e0fff317 	ldw	r3,-52(fp)
  8057ec:	e0bffc17 	ldw	r2,-16(fp)
  8057f0:	188d883a 	add	r6,r3,r2
  8057f4:	080a7800 	call	80a780 <part_directSectorWrite>
  8057f8:	00001806 	br	80585c <file_fwrite+0x2ac>
		}else{
			/*part_readBuf(file->fs->part,rsec+csec,tbuf);*/
			tbuf = part_getSect(file->fs->part,rsec+csec,IOM_MODE_READWRITE);
  8057fc:	e0bff917 	ldw	r2,-28(fp)
  805800:	10800a17 	ldw	r2,40(r2)
  805804:	11000017 	ldw	r4,0(r2)
  805808:	e0fff117 	ldw	r3,-60(fp)
  80580c:	e0bff617 	ldw	r2,-40(fp)
  805810:	188b883a 	add	r5,r3,r2
  805814:	01800084 	movi	r6,2
  805818:	080a5e40 	call	80a5e4 <part_getSect>
  80581c:	e0bfee15 	stw	r2,-72(fp)
			memCpy(buf+bytes_written,tbuf+(coffset%512),btr);
  805820:	e0fff317 	ldw	r3,-52(fp)
  805824:	e0bffc17 	ldw	r2,-16(fp)
  805828:	1889883a 	add	r4,r3,r2
  80582c:	e0bff017 	ldw	r2,-64(fp)
  805830:	10807fcc 	andi	r2,r2,511
  805834:	1007883a 	mov	r3,r2
  805838:	e0bfee17 	ldw	r2,-72(fp)
  80583c:	188b883a 	add	r5,r3,r2
  805840:	e1bfef0b 	ldhu	r6,-68(fp)
  805844:	080a8840 	call	80a884 <memCpy>
			/*part_writeBuf(file->fs->part,rsec+csec,tbuf);*/
			part_relSect(file->fs->part,tbuf);
  805848:	e0bff917 	ldw	r2,-28(fp)
  80584c:	10800a17 	ldw	r2,40(r2)
  805850:	11000017 	ldw	r4,0(r2)
  805854:	e17fee17 	ldw	r5,-72(fp)
  805858:	080a6440 	call	80a644 <part_relSect>
		}
		
		coffset+=btr;
  80585c:	e0ffef0b 	ldhu	r3,-68(fp)
  805860:	e0bff017 	ldw	r2,-64(fp)
  805864:	10c5883a 	add	r2,r2,r3
  805868:	e0bff015 	stw	r2,-64(fp)
		bytes_written+=btr;
  80586c:	e0ffef0b 	ldhu	r3,-68(fp)
  805870:	e0bff317 	ldw	r2,-52(fp)
  805874:	10c5883a 	add	r2,r2,r3
  805878:	e0bff315 	stw	r2,-52(fp)
		size_left-=btr;
  80587c:	e0ffef0b 	ldhu	r3,-68(fp)
  805880:	e0bff417 	ldw	r2,-48(fp)
  805884:	10c5c83a 	sub	r2,r2,r3
  805888:	e0bff415 	stw	r2,-48(fp)
		if(fat_allocClusterChain(file->fs,&(file->Cache),need_cluster+CLUSTER_PREALLOC_FILE)!=0){
			return(0);
		}
	}
	
	while(size_left>0){
  80588c:	e0bff417 	ldw	r2,-48(fp)
  805890:	1004c03a 	cmpne	r2,r2,zero
  805894:	103f7d1e 	bne	r2,zero,80568c <file_fwrite+0xdc>
		coffset+=btr;
		bytes_written+=btr;
		size_left-=btr;
	}
	
	if(bytes_written>file->FileSize-offset){
  805898:	e0bff917 	ldw	r2,-28(fp)
  80589c:	10c01317 	ldw	r3,76(r2)
  8058a0:	e0bffa17 	ldw	r2,-24(fp)
  8058a4:	1887c83a 	sub	r3,r3,r2
  8058a8:	e0bff317 	ldw	r2,-52(fp)
  8058ac:	18800b2e 	bgeu	r3,r2,8058dc <file_fwrite+0x32c>
		file->FileSize+=bytes_written-(file->FileSize-offset);
  8058b0:	e0bff917 	ldw	r2,-28(fp)
  8058b4:	11001317 	ldw	r4,76(r2)
  8058b8:	e0bff917 	ldw	r2,-28(fp)
  8058bc:	10c01317 	ldw	r3,76(r2)
  8058c0:	e0bffa17 	ldw	r2,-24(fp)
  8058c4:	1887c83a 	sub	r3,r3,r2
  8058c8:	e0bff317 	ldw	r2,-52(fp)
  8058cc:	10c5c83a 	sub	r2,r2,r3
  8058d0:	2087883a 	add	r3,r4,r2
  8058d4:	e0bff917 	ldw	r2,-28(fp)
  8058d8:	10c01315 	stw	r3,76(r2)
    }
	
	return(bytes_written);	
  8058dc:	e0fff317 	ldw	r3,-52(fp)
  8058e0:	e0fffe15 	stw	r3,-8(fp)
  8058e4:	e0bffe17 	ldw	r2,-8(fp)
}
  8058e8:	e037883a 	mov	sp,fp
  8058ec:	dfc00117 	ldw	ra,4(sp)
  8058f0:	df000017 	ldw	fp,0(sp)
  8058f4:	dec00204 	addi	sp,sp,8
  8058f8:	f800283a 	ret

008058fc <file_fopen>:
 * Description: This functions opens a file.                               
 * This function is about to be redesigned. No Docs.                       
 * Return value:
*/
esint8 file_fopen(File* file,FileSystem *fs,eint8* filename,eint8 mode)
{
  8058fc:	deffe904 	addi	sp,sp,-92
  805900:	dfc01615 	stw	ra,88(sp)
  805904:	df001515 	stw	fp,84(sp)
  805908:	dc001415 	stw	r16,80(sp)
  80590c:	df001404 	addi	fp,sp,80
  805910:	e13ffa15 	stw	r4,-24(fp)
  805914:	e17ffb15 	stw	r5,-20(fp)
  805918:	e1bffc15 	stw	r6,-16(fp)
  80591c:	e1fffd05 	stb	r7,-12(fp)
    FileLocation loc;
    FileRecord wtmp;
    eint8 fatfilename[11];
    euint32 sec;

    dir_getFatFileName(filename,fatfilename);
  805920:	e17ff604 	addi	r5,fp,-40
  805924:	e13ffc17 	ldw	r4,-16(fp)
  805928:	080362c0 	call	80362c <dir_getFatFileName>
	
    switch(mode)
  80592c:	e0bffd07 	ldb	r2,-12(fp)
  805930:	e0bfff15 	stw	r2,-4(fp)
  805934:	e0ffff17 	ldw	r3,-4(fp)
  805938:	18801ca0 	cmpeqi	r2,r3,114
  80593c:	1000071e 	bne	r2,zero,80595c <file_fopen+0x60>
  805940:	e0ffff17 	ldw	r3,-4(fp)
  805944:	18801de0 	cmpeqi	r2,r3,119
  805948:	1000231e 	bne	r2,zero,8059d8 <file_fopen+0xdc>
  80594c:	e0ffff17 	ldw	r3,-4(fp)
  805950:	18801860 	cmpeqi	r2,r3,97
  805954:	1000781e 	bne	r2,zero,805b38 <file_fopen+0x23c>
  805958:	0000fd06 	br	805d50 <file_fopen+0x454>
	{
        case MODE_READ:
            if(fs_findFile(fs,filename,&loc,0)==1)
  80595c:	e13ffb17 	ldw	r4,-20(fp)
  805960:	e17ffc17 	ldw	r5,-16(fp)
  805964:	e1bfec04 	addi	r6,fp,-80
  805968:	000f883a 	mov	r7,zero
  80596c:	0806df40 	call	806df4 <fs_findFile>
  805970:	10803fcc 	andi	r2,r2,255
  805974:	1080201c 	xori	r2,r2,128
  805978:	10bfe004 	addi	r2,r2,-128
  80597c:	10800058 	cmpnei	r2,r2,1
  805980:	1000121e 	bne	r2,zero,8059cc <file_fopen+0xd0>
			{
                dir_getFileStructure(fs,&(file->DirEntry), &loc);
  805984:	e17ffa17 	ldw	r5,-24(fp)
  805988:	e13ffb17 	ldw	r4,-20(fp)
  80598c:	e1bfec04 	addi	r6,fp,-80
  805990:	0802c500 	call	802c50 <dir_getFileStructure>
                file_initFile(file,fs,&loc);
  805994:	e13ffa17 	ldw	r4,-24(fp)
  805998:	e17ffb17 	ldw	r5,-20(fp)
  80599c:	e1bfec04 	addi	r6,fp,-80
  8059a0:	0805e740 	call	805e74 <file_initFile>
				file_setAttr(file,FILE_STATUS_OPEN,1);
  8059a4:	e13ffa17 	ldw	r4,-24(fp)
  8059a8:	000b883a 	mov	r5,zero
  8059ac:	01800044 	movi	r6,1
  8059b0:	08062900 	call	806290 <file_setAttr>
				file_setAttr(file,FILE_STATUS_WRITE,0);
  8059b4:	e13ffa17 	ldw	r4,-24(fp)
  8059b8:	01400044 	movi	r5,1
  8059bc:	000d883a 	mov	r6,zero
  8059c0:	08062900 	call	806290 <file_setAttr>
                return(0);
  8059c4:	e03ffe15 	stw	zero,-8(fp)
  8059c8:	0000e306 	br	805d58 <file_fopen+0x45c>
            }
            return(-1);
  8059cc:	00bfffc4 	movi	r2,-1
  8059d0:	e0bffe15 	stw	r2,-8(fp)
  8059d4:	0000e006 	br	805d58 <file_fopen+0x45c>
            break;
        case MODE_WRITE:
            if(fs_findFile(fs,filename,&loc,&sec)) /* File may NOT exist, but parent HAS to exist */
  8059d8:	e1fff904 	addi	r7,fp,-28
  8059dc:	e13ffb17 	ldw	r4,-20(fp)
  8059e0:	e17ffc17 	ldw	r5,-16(fp)
  8059e4:	e1bfec04 	addi	r6,fp,-80
  8059e8:	0806df40 	call	806df4 <fs_findFile>
  8059ec:	10803fcc 	andi	r2,r2,255
  8059f0:	1080201c 	xori	r2,r2,128
  8059f4:	10bfe004 	addi	r2,r2,-128
  8059f8:	1005003a 	cmpeq	r2,r2,zero
  8059fc:	1000031e 	bne	r2,zero,805a0c <file_fopen+0x110>
			{
                return(-2);
  805a00:	00ffff84 	movi	r3,-2
  805a04:	e0fffe15 	stw	r3,-8(fp)
  805a08:	0000d306 	br	805d58 <file_fopen+0x45c>
			}
			if(sec==0){ /* Parent dir does not exist */
  805a0c:	e0bff917 	ldw	r2,-28(fp)
  805a10:	1004c03a 	cmpne	r2,r2,zero
  805a14:	1000031e 	bne	r2,zero,805a24 <file_fopen+0x128>
 				return(-4);
  805a18:	00bfff04 	movi	r2,-4
  805a1c:	e0bffe15 	stw	r2,-8(fp)
  805a20:	0000cd06 	br	805d58 <file_fopen+0x45c>
			}
            if(fs_findFreeFile(fs,filename,&loc,0))
  805a24:	e13ffb17 	ldw	r4,-20(fp)
  805a28:	e17ffc17 	ldw	r5,-16(fp)
  805a2c:	e1bfec04 	addi	r6,fp,-80
  805a30:	000f883a 	mov	r7,zero
  805a34:	08070340 	call	807034 <fs_findFreeFile>
  805a38:	10bfffcc 	andi	r2,r2,65535
  805a3c:	10a0001c 	xori	r2,r2,32768
  805a40:	10a00004 	addi	r2,r2,-32768
  805a44:	1005003a 	cmpeq	r2,r2,zero
  805a48:	1000381e 	bne	r2,zero,805b2c <file_fopen+0x230>
			{
                dir_createDefaultEntry(fs,&wtmp,fatfilename);
  805a4c:	e17fee04 	addi	r5,fp,-72
  805a50:	e1bff604 	addi	r6,fp,-40
  805a54:	e13ffb17 	ldw	r4,-20(fp)
  805a58:	0802d900 	call	802d90 <dir_createDefaultEntry>
                dir_createDirectoryEntry(fs,&wtmp,&loc);
  805a5c:	e17fee04 	addi	r5,fp,-72
  805a60:	e13ffb17 	ldw	r4,-20(fp)
  805a64:	e1bfec04 	addi	r6,fp,-80
  805a68:	0802d0c0 	call	802d0c <dir_createDirectoryEntry>
                memCpy(&wtmp,&(file->DirEntry),sizeof(wtmp));
  805a6c:	e17ffa17 	ldw	r5,-24(fp)
  805a70:	e13fee04 	addi	r4,fp,-72
  805a74:	01800804 	movi	r6,32
  805a78:	080a8840 	call	80a884 <memCpy>
				file_initFile(file,fs,&loc);
  805a7c:	e13ffa17 	ldw	r4,-24(fp)
  805a80:	e17ffb17 	ldw	r5,-20(fp)
  805a84:	e1bfec04 	addi	r6,fp,-80
  805a88:	0805e740 	call	805e74 <file_initFile>
                sec=fs_getNextFreeCluster(file->fs,fs_giveFreeClusterHint(file->fs));
  805a8c:	e0bffa17 	ldw	r2,-24(fp)
  805a90:	14000a17 	ldw	r16,40(r2)
  805a94:	e0bffa17 	ldw	r2,-24(fp)
  805a98:	11000a17 	ldw	r4,40(r2)
  805a9c:	0806dd00 	call	806dd0 <fs_giveFreeClusterHint>
  805aa0:	100b883a 	mov	r5,r2
  805aa4:	8009883a 	mov	r4,r16
  805aa8:	0806d500 	call	806d50 <fs_getNextFreeCluster>
  805aac:	e0bff915 	stw	r2,-28(fp)
                dir_setFirstCluster(file->fs,&(file->Location),sec);
  805ab0:	e0bffa17 	ldw	r2,-24(fp)
  805ab4:	11000a17 	ldw	r4,40(r2)
  805ab8:	e0bffa17 	ldw	r2,-24(fp)
  805abc:	11400804 	addi	r5,r2,32
  805ac0:	e1bff917 	ldw	r6,-28(fp)
  805ac4:	0802e400 	call	802e40 <dir_setFirstCluster>
                fs_setFirstClusterInDirEntry(&(file->DirEntry),sec);
  805ac8:	e13ffa17 	ldw	r4,-24(fp)
  805acc:	e17ff917 	ldw	r5,-28(fp)
  805ad0:	08072e00 	call	8072e0 <fs_setFirstClusterInDirEntry>
                fs_initClusterChain(fs,&(file->Cache),sec);
  805ad4:	e0bffa17 	ldw	r2,-24(fp)
  805ad8:	11400b04 	addi	r5,r2,44
  805adc:	e1bff917 	ldw	r6,-28(fp)
  805ae0:	e13ffb17 	ldw	r4,-20(fp)
  805ae4:	08072800 	call	807280 <fs_initClusterChain>
                fat_setNextClusterAddress(fs,sec,fat_giveEocMarker(fs));
  805ae8:	e43ff917 	ldw	r16,-28(fp)
  805aec:	e13ffb17 	ldw	r4,-20(fp)
  805af0:	08044680 	call	804468 <fat_giveEocMarker>
  805af4:	100d883a 	mov	r6,r2
  805af8:	e13ffb17 	ldw	r4,-20(fp)
  805afc:	800b883a 	mov	r5,r16
  805b00:	08040400 	call	804040 <fat_setNextClusterAddress>
				file_setAttr(file,FILE_STATUS_OPEN,1);
  805b04:	e13ffa17 	ldw	r4,-24(fp)
  805b08:	000b883a 	mov	r5,zero
  805b0c:	01800044 	movi	r6,1
  805b10:	08062900 	call	806290 <file_setAttr>
				file_setAttr(file,FILE_STATUS_WRITE,1);
  805b14:	e13ffa17 	ldw	r4,-24(fp)
  805b18:	01400044 	movi	r5,1
  805b1c:	01800044 	movi	r6,1
  805b20:	08062900 	call	806290 <file_setAttr>
            	return(0);
  805b24:	e03ffe15 	stw	zero,-8(fp)
  805b28:	00008b06 	br	805d58 <file_fopen+0x45c>
			}
            else
			{
                return(-3);
  805b2c:	00ffff44 	movi	r3,-3
  805b30:	e0fffe15 	stw	r3,-8(fp)
  805b34:	00008806 	br	805d58 <file_fopen+0x45c>
			}
            break;
        case MODE_APPEND:
			if(fs_findFile(fs,filename,&loc,0)==1) /* File exists */
  805b38:	e13ffb17 	ldw	r4,-20(fp)
  805b3c:	e17ffc17 	ldw	r5,-16(fp)
  805b40:	e1bfec04 	addi	r6,fp,-80
  805b44:	000f883a 	mov	r7,zero
  805b48:	0806df40 	call	806df4 <fs_findFile>
  805b4c:	10803fcc 	andi	r2,r2,255
  805b50:	1080201c 	xori	r2,r2,128
  805b54:	10bfe004 	addi	r2,r2,-128
  805b58:	10800058 	cmpnei	r2,r2,1
  805b5c:	1000361e 	bne	r2,zero,805c38 <file_fopen+0x33c>
			{
				dir_getFileStructure(fs,&(file->DirEntry), &loc);
  805b60:	e17ffa17 	ldw	r5,-24(fp)
  805b64:	e13ffb17 	ldw	r4,-20(fp)
  805b68:	e1bfec04 	addi	r6,fp,-80
  805b6c:	0802c500 	call	802c50 <dir_getFileStructure>
				file_initFile(file,fs,&loc);
  805b70:	e13ffa17 	ldw	r4,-24(fp)
  805b74:	e17ffb17 	ldw	r5,-20(fp)
  805b78:	e1bfec04 	addi	r6,fp,-80
  805b7c:	0805e740 	call	805e74 <file_initFile>
				if(file->Cache.FirstCluster==0){
  805b80:	e0bffa17 	ldw	r2,-24(fp)
  805b84:	10800e17 	ldw	r2,56(r2)
  805b88:	1004c03a 	cmpne	r2,r2,zero
  805b8c:	10001d1e 	bne	r2,zero,805c04 <file_fopen+0x308>
					sec=fs_getNextFreeCluster(file->fs,fs_giveFreeClusterHint(file->fs));
  805b90:	e0bffa17 	ldw	r2,-24(fp)
  805b94:	14000a17 	ldw	r16,40(r2)
  805b98:	e0bffa17 	ldw	r2,-24(fp)
  805b9c:	11000a17 	ldw	r4,40(r2)
  805ba0:	0806dd00 	call	806dd0 <fs_giveFreeClusterHint>
  805ba4:	100b883a 	mov	r5,r2
  805ba8:	8009883a 	mov	r4,r16
  805bac:	0806d500 	call	806d50 <fs_getNextFreeCluster>
  805bb0:	e0bff915 	stw	r2,-28(fp)
					dir_setFirstCluster(file->fs,&(file->Location),sec);
  805bb4:	e0bffa17 	ldw	r2,-24(fp)
  805bb8:	11000a17 	ldw	r4,40(r2)
  805bbc:	e0bffa17 	ldw	r2,-24(fp)
  805bc0:	11400804 	addi	r5,r2,32
  805bc4:	e1bff917 	ldw	r6,-28(fp)
  805bc8:	0802e400 	call	802e40 <dir_setFirstCluster>
					fs_setFirstClusterInDirEntry(&(file->DirEntry),sec);
  805bcc:	e13ffa17 	ldw	r4,-24(fp)
  805bd0:	e17ff917 	ldw	r5,-28(fp)
  805bd4:	08072e00 	call	8072e0 <fs_setFirstClusterInDirEntry>
					fat_setNextClusterAddress(fs,sec,fat_giveEocMarker(fs));
  805bd8:	e43ff917 	ldw	r16,-28(fp)
  805bdc:	e13ffb17 	ldw	r4,-20(fp)
  805be0:	08044680 	call	804468 <fat_giveEocMarker>
  805be4:	100d883a 	mov	r6,r2
  805be8:	e13ffb17 	ldw	r4,-20(fp)
  805bec:	800b883a 	mov	r5,r16
  805bf0:	08040400 	call	804040 <fat_setNextClusterAddress>
					file_initFile(file,fs,&loc);
  805bf4:	e13ffa17 	ldw	r4,-24(fp)
  805bf8:	e17ffb17 	ldw	r5,-20(fp)
  805bfc:	e1bfec04 	addi	r6,fp,-80
  805c00:	0805e740 	call	805e74 <file_initFile>
				}
				file_setpos(file,file->FileSize);
  805c04:	e0bffa17 	ldw	r2,-24(fp)
  805c08:	11401317 	ldw	r5,76(r2)
  805c0c:	e13ffa17 	ldw	r4,-24(fp)
  805c10:	080555c0 	call	80555c <file_setpos>
				file_setAttr(file,FILE_STATUS_OPEN,1);
  805c14:	e13ffa17 	ldw	r4,-24(fp)
  805c18:	000b883a 	mov	r5,zero
  805c1c:	01800044 	movi	r6,1
  805c20:	08062900 	call	806290 <file_setAttr>
				file_setAttr(file,FILE_STATUS_WRITE,1);
  805c24:	e13ffa17 	ldw	r4,-24(fp)
  805c28:	01400044 	movi	r5,1
  805c2c:	01800044 	movi	r6,1
  805c30:	08062900 	call	806290 <file_setAttr>
  805c34:	00004406 	br	805d48 <file_fopen+0x44c>
			}
			else /* File does not excist */
			{
				if(fs_findFreeFile(fs,filename,&loc,0))
  805c38:	e13ffb17 	ldw	r4,-20(fp)
  805c3c:	e17ffc17 	ldw	r5,-16(fp)
  805c40:	e1bfec04 	addi	r6,fp,-80
  805c44:	000f883a 	mov	r7,zero
  805c48:	08070340 	call	807034 <fs_findFreeFile>
  805c4c:	10bfffcc 	andi	r2,r2,65535
  805c50:	10a0001c 	xori	r2,r2,32768
  805c54:	10a00004 	addi	r2,r2,-32768
  805c58:	1005003a 	cmpeq	r2,r2,zero
  805c5c:	1000371e 	bne	r2,zero,805d3c <file_fopen+0x440>
				{
					dir_createDefaultEntry(fs,&wtmp,fatfilename);
  805c60:	e17fee04 	addi	r5,fp,-72
  805c64:	e1bff604 	addi	r6,fp,-40
  805c68:	e13ffb17 	ldw	r4,-20(fp)
  805c6c:	0802d900 	call	802d90 <dir_createDefaultEntry>
					dir_createDirectoryEntry(fs,&wtmp,&loc);
  805c70:	e17fee04 	addi	r5,fp,-72
  805c74:	e13ffb17 	ldw	r4,-20(fp)
  805c78:	e1bfec04 	addi	r6,fp,-80
  805c7c:	0802d0c0 	call	802d0c <dir_createDirectoryEntry>
					memCpy(&wtmp,&(file->DirEntry),sizeof(wtmp));
  805c80:	e17ffa17 	ldw	r5,-24(fp)
  805c84:	e13fee04 	addi	r4,fp,-72
  805c88:	01800804 	movi	r6,32
  805c8c:	080a8840 	call	80a884 <memCpy>
					file_initFile(file,fs,&loc);
  805c90:	e13ffa17 	ldw	r4,-24(fp)
  805c94:	e17ffb17 	ldw	r5,-20(fp)
  805c98:	e1bfec04 	addi	r6,fp,-80
  805c9c:	0805e740 	call	805e74 <file_initFile>
					sec=fs_getNextFreeCluster(file->fs,fs_giveFreeClusterHint(file->fs));
  805ca0:	e0bffa17 	ldw	r2,-24(fp)
  805ca4:	14000a17 	ldw	r16,40(r2)
  805ca8:	e0bffa17 	ldw	r2,-24(fp)
  805cac:	11000a17 	ldw	r4,40(r2)
  805cb0:	0806dd00 	call	806dd0 <fs_giveFreeClusterHint>
  805cb4:	100b883a 	mov	r5,r2
  805cb8:	8009883a 	mov	r4,r16
  805cbc:	0806d500 	call	806d50 <fs_getNextFreeCluster>
  805cc0:	e0bff915 	stw	r2,-28(fp)
					dir_setFirstCluster(file->fs,&(file->Location),sec);
  805cc4:	e0bffa17 	ldw	r2,-24(fp)
  805cc8:	11000a17 	ldw	r4,40(r2)
  805ccc:	e0bffa17 	ldw	r2,-24(fp)
  805cd0:	11400804 	addi	r5,r2,32
  805cd4:	e1bff917 	ldw	r6,-28(fp)
  805cd8:	0802e400 	call	802e40 <dir_setFirstCluster>
	                fs_setFirstClusterInDirEntry(&(file->DirEntry),sec);
  805cdc:	e13ffa17 	ldw	r4,-24(fp)
  805ce0:	e17ff917 	ldw	r5,-28(fp)
  805ce4:	08072e00 	call	8072e0 <fs_setFirstClusterInDirEntry>
    	            fs_initClusterChain(fs,&(file->Cache),sec);
  805ce8:	e0bffa17 	ldw	r2,-24(fp)
  805cec:	11400b04 	addi	r5,r2,44
  805cf0:	e1bff917 	ldw	r6,-28(fp)
  805cf4:	e13ffb17 	ldw	r4,-20(fp)
  805cf8:	08072800 	call	807280 <fs_initClusterChain>
					fat_setNextClusterAddress(fs,sec,fat_giveEocMarker(fs));
  805cfc:	e43ff917 	ldw	r16,-28(fp)
  805d00:	e13ffb17 	ldw	r4,-20(fp)
  805d04:	08044680 	call	804468 <fat_giveEocMarker>
  805d08:	100d883a 	mov	r6,r2
  805d0c:	e13ffb17 	ldw	r4,-20(fp)
  805d10:	800b883a 	mov	r5,r16
  805d14:	08040400 	call	804040 <fat_setNextClusterAddress>
					file_setAttr(file,FILE_STATUS_OPEN,1);
  805d18:	e13ffa17 	ldw	r4,-24(fp)
  805d1c:	000b883a 	mov	r5,zero
  805d20:	01800044 	movi	r6,1
  805d24:	08062900 	call	806290 <file_setAttr>
					file_setAttr(file,FILE_STATUS_WRITE,1);
  805d28:	e13ffa17 	ldw	r4,-24(fp)
  805d2c:	01400044 	movi	r5,1
  805d30:	01800044 	movi	r6,1
  805d34:	08062900 	call	806290 <file_setAttr>
  805d38:	00000306 	br	805d48 <file_fopen+0x44c>
				}
				else
				{
					return(-3);
  805d3c:	00bfff44 	movi	r2,-3
  805d40:	e0bffe15 	stw	r2,-8(fp)
  805d44:	00000406 	br	805d58 <file_fopen+0x45c>
				}
			}
			return(0);
  805d48:	e03ffe15 	stw	zero,-8(fp)
  805d4c:	00000206 	br	805d58 <file_fopen+0x45c>
            break;
        default:
            return(-4);
  805d50:	00ffff04 	movi	r3,-4
  805d54:	e0fffe15 	stw	r3,-8(fp)
  805d58:	e0bffe17 	ldw	r2,-8(fp)
            break;
    }
    return(-5);
}
  805d5c:	e037883a 	mov	sp,fp
  805d60:	dfc00217 	ldw	ra,8(sp)
  805d64:	df000117 	ldw	fp,4(sp)
  805d68:	dc000017 	ldw	r16,0(sp)
  805d6c:	dec00304 	addi	sp,sp,12
  805d70:	f800283a 	ret

00805d74 <file_fclose>:
 * esint8 file_fclose(File *file)
 * Description: This function closes a file, by clearing the object.
 * Return value: 0 on success.
*/
esint8 file_fclose(File *file)
{
  805d74:	defffd04 	addi	sp,sp,-12
  805d78:	dfc00215 	stw	ra,8(sp)
  805d7c:	df000115 	stw	fp,4(sp)
  805d80:	df000104 	addi	fp,sp,4
  805d84:	e13fff15 	stw	r4,-4(fp)
	if(fs_hasTimeSupport()){
  805d88:	080b4000 	call	80b400 <fs_hasTimeSupport>
  805d8c:	10803fcc 	andi	r2,r2,255
  805d90:	1005003a 	cmpeq	r2,r2,zero
  805d94:	1000191e 	bne	r2,zero,805dfc <file_fclose+0x88>
		file->DirEntry.AccessDate = time_getDate();
  805d98:	e0bfff17 	ldw	r2,-4(fp)
  805d9c:	1000048d 	sth	zero,18(r2)
		if(file_getAttr(file,FILE_STATUS_WRITE)){
  805da0:	e13fff17 	ldw	r4,-4(fp)
  805da4:	01400044 	movi	r5,1
  805da8:	080631c0 	call	80631c <file_getAttr>
  805dac:	10803fcc 	andi	r2,r2,255
  805db0:	1005003a 	cmpeq	r2,r2,zero
  805db4:	10000a1e 	bne	r2,zero,805de0 <file_fclose+0x6c>
			file->DirEntry.FileSize = file->FileSize;
  805db8:	e0bfff17 	ldw	r2,-4(fp)
  805dbc:	10c01317 	ldw	r3,76(r2)
  805dc0:	e0bfff17 	ldw	r2,-4(fp)
  805dc4:	10c00715 	stw	r3,28(r2)
			file->DirEntry.WriteDate = file->DirEntry.AccessDate;
  805dc8:	e0bfff17 	ldw	r2,-4(fp)
  805dcc:	10c0048b 	ldhu	r3,18(r2)
  805dd0:	e0bfff17 	ldw	r2,-4(fp)
  805dd4:	10c0060d 	sth	r3,24(r2)
			file->DirEntry.WriteTime = time_getTime();
  805dd8:	e0bfff17 	ldw	r2,-4(fp)
  805ddc:	1000058d 	sth	zero,22(r2)
		}
		dir_updateDirectoryEntry(file->fs,&(file->DirEntry),&(file->Location));
  805de0:	e0bfff17 	ldw	r2,-4(fp)
  805de4:	11000a17 	ldw	r4,40(r2)
  805de8:	e17fff17 	ldw	r5,-4(fp)
  805dec:	e0bfff17 	ldw	r2,-4(fp)
  805df0:	11800804 	addi	r6,r2,32
  805df4:	0802f680 	call	802f68 <dir_updateDirectoryEntry>
  805df8:	00000d06 	br	805e30 <file_fclose+0xbc>
	}else{
		if(file_getAttr(file,FILE_STATUS_WRITE)){
  805dfc:	e13fff17 	ldw	r4,-4(fp)
  805e00:	01400044 	movi	r5,1
  805e04:	080631c0 	call	80631c <file_getAttr>
  805e08:	10803fcc 	andi	r2,r2,255
  805e0c:	1005003a 	cmpeq	r2,r2,zero
  805e10:	1000071e 	bne	r2,zero,805e30 <file_fclose+0xbc>
			dir_setFileSize(file->fs,&(file->Location),file->FileSize);
  805e14:	e0bfff17 	ldw	r2,-4(fp)
  805e18:	11000a17 	ldw	r4,40(r2)
  805e1c:	e0bfff17 	ldw	r2,-4(fp)
  805e20:	11400804 	addi	r5,r2,32
  805e24:	e0bfff17 	ldw	r2,-4(fp)
  805e28:	11801317 	ldw	r6,76(r2)
  805e2c:	0802ee80 	call	802ee8 <dir_setFileSize>
		}
	}
	
	memClr(file,sizeof(*file));
  805e30:	e13fff17 	ldw	r4,-4(fp)
  805e34:	01401404 	movi	r5,80
  805e38:	080a8f00 	call	80a8f0 <memClr>
	file_setAttr(file,FILE_STATUS_OPEN,0);
  805e3c:	e13fff17 	ldw	r4,-4(fp)
  805e40:	000b883a 	mov	r5,zero
  805e44:	000d883a 	mov	r6,zero
  805e48:	08062900 	call	806290 <file_setAttr>
	file_setAttr(file,FILE_STATUS_WRITE,0);
  805e4c:	e13fff17 	ldw	r4,-4(fp)
  805e50:	01400044 	movi	r5,1
  805e54:	000d883a 	mov	r6,zero
  805e58:	08062900 	call	806290 <file_setAttr>
	return(0);
  805e5c:	0005883a 	mov	r2,zero
}
  805e60:	e037883a 	mov	sp,fp
  805e64:	dfc00117 	ldw	ra,4(sp)
  805e68:	df000017 	ldw	fp,0(sp)
  805e6c:	dec00204 	addi	sp,sp,8
  805e70:	f800283a 	ret

00805e74 <file_initFile>:
 * the fs pointer, filesize (note, that DirEntry must already be filled in)
 * and known cache parameters.
 * Return value: void
*/
void file_initFile(File *file, FileSystem *fs, FileLocation *loc)
{
  805e74:	defffc04 	addi	sp,sp,-16
  805e78:	df000315 	stw	fp,12(sp)
  805e7c:	df000304 	addi	fp,sp,12
  805e80:	e13ffd15 	stw	r4,-12(fp)
  805e84:	e17ffe15 	stw	r5,-8(fp)
  805e88:	e1bfff15 	stw	r6,-4(fp)
	file->fs=fs;
  805e8c:	e0fffd17 	ldw	r3,-12(fp)
  805e90:	e0bffe17 	ldw	r2,-8(fp)
  805e94:	18800a15 	stw	r2,40(r3)
	file->FileSize=file->DirEntry.FileSize;
  805e98:	e0bffd17 	ldw	r2,-12(fp)
  805e9c:	10c00717 	ldw	r3,28(r2)
  805ea0:	e0bffd17 	ldw	r2,-12(fp)
  805ea4:	10c01315 	stw	r3,76(r2)
	file->FilePtr=0;
  805ea8:	e0bffd17 	ldw	r2,-12(fp)
  805eac:	10001215 	stw	zero,72(r2)
	file->Location.Sector=loc->Sector;
  805eb0:	e0bfff17 	ldw	r2,-4(fp)
  805eb4:	10c00017 	ldw	r3,0(r2)
  805eb8:	e0bffd17 	ldw	r2,-12(fp)
  805ebc:	10c00815 	stw	r3,32(r2)
	file->Location.Offset=loc->Offset;
  805ec0:	e0bfff17 	ldw	r2,-4(fp)
  805ec4:	10c00103 	ldbu	r3,4(r2)
  805ec8:	e0bffd17 	ldw	r2,-12(fp)
  805ecc:	10c00905 	stb	r3,36(r2)
	file->Cache.Linear=0;
  805ed0:	e0bffd17 	ldw	r2,-12(fp)
  805ed4:	10000b05 	stb	zero,44(r2)
	file->Cache.FirstCluster=(((euint32)file->DirEntry.FirstClusterHigh)<<16)+ 
  805ed8:	e0bffd17 	ldw	r2,-12(fp)
  805edc:	1080050b 	ldhu	r2,20(r2)
  805ee0:	10bfffcc 	andi	r2,r2,65535
  805ee4:	1006943a 	slli	r3,r2,16
  805ee8:	e0bffd17 	ldw	r2,-12(fp)
  805eec:	1080068b 	ldhu	r2,26(r2)
  805ef0:	10bfffcc 	andi	r2,r2,65535
  805ef4:	1887883a 	add	r3,r3,r2
  805ef8:	e0bffd17 	ldw	r2,-12(fp)
  805efc:	10c00e15 	stw	r3,56(r2)
	                                    file->DirEntry.FirstClusterLow;
	file->Cache.LastCluster=0; 
  805f00:	e0bffd17 	ldw	r2,-12(fp)
  805f04:	10000f15 	stw	zero,60(r2)
	file->Cache.LogicCluster=0;
  805f08:	e0bffd17 	ldw	r2,-12(fp)
  805f0c:	10000c15 	stw	zero,48(r2)
	file->Cache.DiscCluster=file->Cache.FirstCluster;
  805f10:	e0bffd17 	ldw	r2,-12(fp)
  805f14:	10c00e17 	ldw	r3,56(r2)
  805f18:	e0bffd17 	ldw	r2,-12(fp)
  805f1c:	10c00d15 	stw	r3,52(r2)
}
  805f20:	e037883a 	mov	sp,fp
  805f24:	df000017 	ldw	fp,0(sp)
  805f28:	dec00104 	addi	sp,sp,4
  805f2c:	f800283a 	ret

00805f30 <file_normalToFatName>:
 * changed to capital X and only the first 11 characters are used.
 * Furthermore all letters are capitalised.
 * Return value: pointer after the filename
*/
eint8* file_normalToFatName(eint8* filename,eint8* fatfilename)
{
  805f30:	defff904 	addi	sp,sp,-28
  805f34:	dfc00615 	stw	ra,24(sp)
  805f38:	df000515 	stw	fp,20(sp)
  805f3c:	dc000415 	stw	r16,16(sp)
  805f40:	df000404 	addi	fp,sp,16
  805f44:	e13ffd15 	stw	r4,-12(fp)
  805f48:	e17ffe15 	stw	r5,-8(fp)
	euint8 c,dot=0,vc=0;
  805f4c:	e03ffc45 	stb	zero,-15(fp)
  805f50:	e03ffc05 	stb	zero,-16(fp)
	
	for(c=0;c<11;c++)fatfilename[c]=' ';
  805f54:	e03ffc85 	stb	zero,-14(fp)
  805f58:	00000906 	br	805f80 <file_normalToFatName+0x50>
  805f5c:	e0bffc83 	ldbu	r2,-14(fp)
  805f60:	1007883a 	mov	r3,r2
  805f64:	e0bffe17 	ldw	r2,-8(fp)
  805f68:	1887883a 	add	r3,r3,r2
  805f6c:	00800804 	movi	r2,32
  805f70:	18800005 	stb	r2,0(r3)
  805f74:	e0bffc83 	ldbu	r2,-14(fp)
  805f78:	10800044 	addi	r2,r2,1
  805f7c:	e0bffc85 	stb	r2,-14(fp)
  805f80:	e0bffc83 	ldbu	r2,-14(fp)
  805f84:	108002f0 	cmpltui	r2,r2,11
  805f88:	103ff41e 	bne	r2,zero,805f5c <file_normalToFatName+0x2c>
	
	c=0;
  805f8c:	e03ffc85 	stb	zero,-14(fp)
	
	if(*filename == '.'){
  805f90:	e0bffd17 	ldw	r2,-12(fp)
  805f94:	10800003 	ldbu	r2,0(r2)
  805f98:	10803fcc 	andi	r2,r2,255
  805f9c:	1080201c 	xori	r2,r2,128
  805fa0:	10bfe004 	addi	r2,r2,-128
  805fa4:	10800b98 	cmpnei	r2,r2,46
  805fa8:	1000511e 	bne	r2,zero,8060f0 <file_normalToFatName+0x1c0>
		fatfilename[0]='.';
  805fac:	e0fffe17 	ldw	r3,-8(fp)
  805fb0:	00800b84 	movi	r2,46
  805fb4:	18800005 	stb	r2,0(r3)
		vc++; 
  805fb8:	e0bffc03 	ldbu	r2,-16(fp)
  805fbc:	10800044 	addi	r2,r2,1
  805fc0:	e0bffc05 	stb	r2,-16(fp)
		if(*(filename+1) == '.'){
  805fc4:	e0bffd17 	ldw	r2,-12(fp)
  805fc8:	10800044 	addi	r2,r2,1
  805fcc:	10800003 	ldbu	r2,0(r2)
  805fd0:	10803fcc 	andi	r2,r2,255
  805fd4:	1080201c 	xori	r2,r2,128
  805fd8:	10bfe004 	addi	r2,r2,-128
  805fdc:	10800b98 	cmpnei	r2,r2,46
  805fe0:	1000081e 	bne	r2,zero,806004 <file_normalToFatName+0xd4>
			fatfilename[1]='.';
  805fe4:	e0bffe17 	ldw	r2,-8(fp)
  805fe8:	10c00044 	addi	r3,r2,1
  805fec:	00800b84 	movi	r2,46
  805ff0:	18800005 	stb	r2,0(r3)
			filename+=2;
  805ff4:	e0bffd17 	ldw	r2,-12(fp)
  805ff8:	10800084 	addi	r2,r2,2
  805ffc:	e0bffd15 	stw	r2,-12(fp)
  806000:	00005006 	br	806144 <file_normalToFatName+0x214>
		}else{
			filename++;
  806004:	e0bffd17 	ldw	r2,-12(fp)
  806008:	10800044 	addi	r2,r2,1
  80600c:	e0bffd15 	stw	r2,-12(fp)
  806010:	00004c06 	br	806144 <file_normalToFatName+0x214>
		}
	}else{
		while(*filename != '\0' && *filename != ' ' && *filename != '/'){
			if(*filename=='.' && !dot){
  806014:	e0bffd17 	ldw	r2,-12(fp)
  806018:	10800003 	ldbu	r2,0(r2)
  80601c:	10803fcc 	andi	r2,r2,255
  806020:	1080201c 	xori	r2,r2,128
  806024:	10bfe004 	addi	r2,r2,-128
  806028:	10800b98 	cmpnei	r2,r2,46
  80602c:	1000081e 	bne	r2,zero,806050 <file_normalToFatName+0x120>
  806030:	e0bffc43 	ldbu	r2,-15(fp)
  806034:	1004c03a 	cmpne	r2,r2,zero
  806038:	1000051e 	bne	r2,zero,806050 <file_normalToFatName+0x120>
				dot=1;
  80603c:	00800044 	movi	r2,1
  806040:	e0bffc45 	stb	r2,-15(fp)
				c=8;
  806044:	00800204 	movi	r2,8
  806048:	e0bffc85 	stb	r2,-14(fp)
		}else{
			filename++;
		}
	}else{
		while(*filename != '\0' && *filename != ' ' && *filename != '/'){
			if(*filename=='.' && !dot){
  80604c:	00002506 	br	8060e4 <file_normalToFatName+0x1b4>
				dot=1;
				c=8;
			}else{
				if(dot){
  806050:	e0bffc43 	ldbu	r2,-15(fp)
  806054:	1005003a 	cmpeq	r2,r2,zero
  806058:	1000101e 	bne	r2,zero,80609c <file_normalToFatName+0x16c>
					if(c<=10){
  80605c:	e0bffc83 	ldbu	r2,-14(fp)
  806060:	108002e8 	cmpgeui	r2,r2,11
  806064:	10001f1e 	bne	r2,zero,8060e4 <file_normalToFatName+0x1b4>
						fatfilename[c]=file_validateChar(*filename);
  806068:	e0bffc83 	ldbu	r2,-14(fp)
  80606c:	1007883a 	mov	r3,r2
  806070:	e0bffe17 	ldw	r2,-8(fp)
  806074:	18a1883a 	add	r16,r3,r2
  806078:	e0bffd17 	ldw	r2,-12(fp)
  80607c:	10800003 	ldbu	r2,0(r2)
  806080:	11003fcc 	andi	r4,r2,255
  806084:	08061a80 	call	8061a8 <file_validateChar>
  806088:	80800005 	stb	r2,0(r16)
						c++; 
  80608c:	e0bffc83 	ldbu	r2,-14(fp)
  806090:	10800044 	addi	r2,r2,1
  806094:	e0bffc85 	stb	r2,-14(fp)
  806098:	00001206 	br	8060e4 <file_normalToFatName+0x1b4>
					}
				}else{
					if(c<=7){
  80609c:	e0bffc83 	ldbu	r2,-14(fp)
  8060a0:	10800228 	cmpgeui	r2,r2,8
  8060a4:	10000f1e 	bne	r2,zero,8060e4 <file_normalToFatName+0x1b4>
						fatfilename[c]=file_validateChar(*filename);
  8060a8:	e0bffc83 	ldbu	r2,-14(fp)
  8060ac:	1007883a 	mov	r3,r2
  8060b0:	e0bffe17 	ldw	r2,-8(fp)
  8060b4:	18a1883a 	add	r16,r3,r2
  8060b8:	e0bffd17 	ldw	r2,-12(fp)
  8060bc:	10800003 	ldbu	r2,0(r2)
  8060c0:	11003fcc 	andi	r4,r2,255
  8060c4:	08061a80 	call	8061a8 <file_validateChar>
  8060c8:	80800005 	stb	r2,0(r16)
						c++; vc++;
  8060cc:	e0bffc83 	ldbu	r2,-14(fp)
  8060d0:	10800044 	addi	r2,r2,1
  8060d4:	e0bffc85 	stb	r2,-14(fp)
  8060d8:	e0bffc03 	ldbu	r2,-16(fp)
  8060dc:	10800044 	addi	r2,r2,1
  8060e0:	e0bffc05 	stb	r2,-16(fp)
					}
				}
			}
			filename++;
  8060e4:	e0bffd17 	ldw	r2,-12(fp)
  8060e8:	10800044 	addi	r2,r2,1
  8060ec:	e0bffd15 	stw	r2,-12(fp)
			filename+=2;
		}else{
			filename++;
		}
	}else{
		while(*filename != '\0' && *filename != ' ' && *filename != '/'){
  8060f0:	e0bffd17 	ldw	r2,-12(fp)
  8060f4:	10800003 	ldbu	r2,0(r2)
  8060f8:	10803fcc 	andi	r2,r2,255
  8060fc:	1080201c 	xori	r2,r2,128
  806100:	10bfe004 	addi	r2,r2,-128
  806104:	1005003a 	cmpeq	r2,r2,zero
  806108:	10000e1e 	bne	r2,zero,806144 <file_normalToFatName+0x214>
  80610c:	e0bffd17 	ldw	r2,-12(fp)
  806110:	10800003 	ldbu	r2,0(r2)
  806114:	10803fcc 	andi	r2,r2,255
  806118:	1080201c 	xori	r2,r2,128
  80611c:	10bfe004 	addi	r2,r2,-128
  806120:	10800820 	cmpeqi	r2,r2,32
  806124:	1000071e 	bne	r2,zero,806144 <file_normalToFatName+0x214>
  806128:	e0bffd17 	ldw	r2,-12(fp)
  80612c:	10800003 	ldbu	r2,0(r2)
  806130:	10803fcc 	andi	r2,r2,255
  806134:	1080201c 	xori	r2,r2,128
  806138:	10bfe004 	addi	r2,r2,-128
  80613c:	10800bd8 	cmpnei	r2,r2,47
  806140:	103fb41e 	bne	r2,zero,806014 <file_normalToFatName+0xe4>
			}
			filename++;
		}
	}
	
	if(vc>0){
  806144:	e0bffc03 	ldbu	r2,-16(fp)
  806148:	1005003a 	cmpeq	r2,r2,zero
  80614c:	10000e1e 	bne	r2,zero,806188 <file_normalToFatName+0x258>
		if(*filename=='\0'){
  806150:	e0bffd17 	ldw	r2,-12(fp)
  806154:	10800003 	ldbu	r2,0(r2)
  806158:	10803fcc 	andi	r2,r2,255
  80615c:	1080201c 	xori	r2,r2,128
  806160:	10bfe004 	addi	r2,r2,-128
  806164:	1004c03a 	cmpne	r2,r2,zero
  806168:	1000031e 	bne	r2,zero,806178 <file_normalToFatName+0x248>
			return(filename);
  80616c:	e0bffd17 	ldw	r2,-12(fp)
  806170:	e0bfff15 	stw	r2,-4(fp)
  806174:	00000506 	br	80618c <file_normalToFatName+0x25c>
		}else{
			return(filename+1);
  806178:	e0bffd17 	ldw	r2,-12(fp)
  80617c:	10800044 	addi	r2,r2,1
  806180:	e0bfff15 	stw	r2,-4(fp)
  806184:	00000106 	br	80618c <file_normalToFatName+0x25c>
		}
	}else{
		return(0);
  806188:	e03fff15 	stw	zero,-4(fp)
  80618c:	e0bfff17 	ldw	r2,-4(fp)
	}
}
  806190:	e037883a 	mov	sp,fp
  806194:	dfc00217 	ldw	ra,8(sp)
  806198:	df000117 	ldw	fp,4(sp)
  80619c:	dc000017 	ldw	r16,0(sp)
  8061a0:	dec00304 	addi	sp,sp,12
  8061a4:	f800283a 	ret

008061a8 <file_validateChar>:
 * uppercase equivalent is returned. The remaining characters are returned    *
 * as they are.      
 * Return value: The validated char
*/
euint8 file_validateChar(euint8 c)
{
  8061a8:	defffd04 	addi	sp,sp,-12
  8061ac:	df000215 	stw	fp,8(sp)
  8061b0:	df000204 	addi	fp,sp,8
  8061b4:	e13ffe05 	stb	r4,-8(fp)
    if( (c<0x20) || (c>0x20&&c<0x30&&c!='-') || (c>0x39&&c<0x41) || (c>0x5A&&c<0x61&&c!='_') ||	(c>0x7A&&c!='~') )
  8061b8:	e0bffe03 	ldbu	r2,-8(fp)
  8061bc:	10800830 	cmpltui	r2,r2,32
  8061c0:	10001e1e 	bne	r2,zero,80623c <file_validateChar+0x94>
  8061c4:	e0bffe03 	ldbu	r2,-8(fp)
  8061c8:	10800870 	cmpltui	r2,r2,33
  8061cc:	1000061e 	bne	r2,zero,8061e8 <file_validateChar+0x40>
  8061d0:	e0bffe03 	ldbu	r2,-8(fp)
  8061d4:	10800c28 	cmpgeui	r2,r2,48
  8061d8:	1000031e 	bne	r2,zero,8061e8 <file_validateChar+0x40>
  8061dc:	e0bffe03 	ldbu	r2,-8(fp)
  8061e0:	10800b58 	cmpnei	r2,r2,45
  8061e4:	1000151e 	bne	r2,zero,80623c <file_validateChar+0x94>
  8061e8:	e0bffe03 	ldbu	r2,-8(fp)
  8061ec:	10800eb0 	cmpltui	r2,r2,58
  8061f0:	1000031e 	bne	r2,zero,806200 <file_validateChar+0x58>
  8061f4:	e0bffe03 	ldbu	r2,-8(fp)
  8061f8:	10801070 	cmpltui	r2,r2,65
  8061fc:	10000f1e 	bne	r2,zero,80623c <file_validateChar+0x94>
  806200:	e0bffe03 	ldbu	r2,-8(fp)
  806204:	108016f0 	cmpltui	r2,r2,91
  806208:	1000061e 	bne	r2,zero,806224 <file_validateChar+0x7c>
  80620c:	e0bffe03 	ldbu	r2,-8(fp)
  806210:	10801868 	cmpgeui	r2,r2,97
  806214:	1000031e 	bne	r2,zero,806224 <file_validateChar+0x7c>
  806218:	e0bffe03 	ldbu	r2,-8(fp)
  80621c:	108017d8 	cmpnei	r2,r2,95
  806220:	1000061e 	bne	r2,zero,80623c <file_validateChar+0x94>
  806224:	e0bffe03 	ldbu	r2,-8(fp)
  806228:	10801ef0 	cmpltui	r2,r2,123
  80622c:	1000061e 	bne	r2,zero,806248 <file_validateChar+0xa0>
  806230:	e0bffe03 	ldbu	r2,-8(fp)
  806234:	10801fa0 	cmpeqi	r2,r2,126
  806238:	1000031e 	bne	r2,zero,806248 <file_validateChar+0xa0>
		return(0x58);
  80623c:	00801604 	movi	r2,88
  806240:	e0bfff15 	stw	r2,-4(fp)
  806244:	00000d06 	br	80627c <file_validateChar+0xd4>
    if( c>=0x61 && c<=0x7A )
  806248:	e0bffe03 	ldbu	r2,-8(fp)
  80624c:	10801870 	cmpltui	r2,r2,97
  806250:	1000081e 	bne	r2,zero,806274 <file_validateChar+0xcc>
  806254:	e0bffe03 	ldbu	r2,-8(fp)
  806258:	10801ee8 	cmpgeui	r2,r2,123
  80625c:	1000051e 	bne	r2,zero,806274 <file_validateChar+0xcc>
		return(c-32);
  806260:	e0bffe03 	ldbu	r2,-8(fp)
  806264:	10bff804 	addi	r2,r2,-32
  806268:	10803fcc 	andi	r2,r2,255
  80626c:	e0bfff15 	stw	r2,-4(fp)
  806270:	00000206 	br	80627c <file_validateChar+0xd4>

	return(c);
  806274:	e0bffe03 	ldbu	r2,-8(fp)
  806278:	e0bfff15 	stw	r2,-4(fp)
  80627c:	e0bfff17 	ldw	r2,-4(fp)
}
  806280:	e037883a 	mov	sp,fp
  806284:	df000017 	ldw	fp,0(sp)
  806288:	dec00104 	addi	sp,sp,4
  80628c:	f800283a 	ret

00806290 <file_setAttr>:
 * Description: This sets the attribute of 'bufplace' to the given value (binary).
 *
 * Return value: void
*/
void file_setAttr(File* file,euint8 attribute,euint8 val)
{
  806290:	defffc04 	addi	sp,sp,-16
  806294:	df000315 	stw	fp,12(sp)
  806298:	df000304 	addi	fp,sp,12
  80629c:	e13ffd15 	stw	r4,-12(fp)
  8062a0:	e17ffe05 	stb	r5,-8(fp)
  8062a4:	e1bfff05 	stb	r6,-4(fp)
	if(val){
  8062a8:	e0bfff03 	ldbu	r2,-4(fp)
  8062ac:	1005003a 	cmpeq	r2,r2,zero
  8062b0:	10000b1e 	bne	r2,zero,8062e0 <file_setAttr+0x50>
		file->FileStatus|=1<<attribute;
  8062b4:	e0bffd17 	ldw	r2,-12(fp)
  8062b8:	10801103 	ldbu	r2,68(r2)
  8062bc:	1009883a 	mov	r4,r2
  8062c0:	e0fffe03 	ldbu	r3,-8(fp)
  8062c4:	00800044 	movi	r2,1
  8062c8:	10c4983a 	sll	r2,r2,r3
  8062cc:	2084b03a 	or	r2,r4,r2
  8062d0:	1007883a 	mov	r3,r2
  8062d4:	e0bffd17 	ldw	r2,-12(fp)
  8062d8:	10c01105 	stb	r3,68(r2)
  8062dc:	00000b06 	br	80630c <file_setAttr+0x7c>
	}else{
		file->FileStatus&=~(1<<attribute);
  8062e0:	e0bffd17 	ldw	r2,-12(fp)
  8062e4:	10801103 	ldbu	r2,68(r2)
  8062e8:	1009883a 	mov	r4,r2
  8062ec:	e0fffe03 	ldbu	r3,-8(fp)
  8062f0:	00800044 	movi	r2,1
  8062f4:	10c4983a 	sll	r2,r2,r3
  8062f8:	0084303a 	nor	r2,zero,r2
  8062fc:	2084703a 	and	r2,r4,r2
  806300:	1007883a 	mov	r3,r2
  806304:	e0bffd17 	ldw	r2,-12(fp)
  806308:	10c01105 	stb	r3,68(r2)
	}
}
  80630c:	e037883a 	mov	sp,fp
  806310:	df000017 	ldw	fp,0(sp)
  806314:	dec00104 	addi	sp,sp,4
  806318:	f800283a 	ret

0080631c <file_getAttr>:
 * It returns nonzero when it attribute is true and 0 when it is false.
 * Please note, I said "nonzero", not 1.
 * Return value: Attribute.
*/
euint8 file_getAttr(File* file,euint8 attribute)
{
  80631c:	defffd04 	addi	sp,sp,-12
  806320:	df000215 	stw	fp,8(sp)
  806324:	df000204 	addi	fp,sp,8
  806328:	e13ffe15 	stw	r4,-8(fp)
  80632c:	e17fff05 	stb	r5,-4(fp)
	return(file->FileStatus&(1<<attribute));
  806330:	e0bffe17 	ldw	r2,-8(fp)
  806334:	10801103 	ldbu	r2,68(r2)
  806338:	1009883a 	mov	r4,r2
  80633c:	e0ffff03 	ldbu	r3,-4(fp)
  806340:	00800044 	movi	r2,1
  806344:	10c4983a 	sll	r2,r2,r3
  806348:	2084703a 	and	r2,r4,r2
  80634c:	10803fcc 	andi	r2,r2,255
}
  806350:	e037883a 	mov	sp,fp
  806354:	df000017 	ldw	fp,0(sp)
  806358:	dec00104 	addi	sp,sp,4
  80635c:	f800283a 	ret

00806360 <file_requiredCluster>:
/*****************************************************************************/

euint32 file_requiredCluster(File *file,euint32 offset, euint32 size)
{
  806360:	defff704 	addi	sp,sp,-36
  806364:	dfc00815 	stw	ra,32(sp)
  806368:	df000715 	stw	fp,28(sp)
  80636c:	dc000615 	stw	r16,24(sp)
  806370:	df000604 	addi	fp,sp,24
  806374:	e13ffd15 	stw	r4,-12(fp)
  806378:	e17ffe15 	stw	r5,-8(fp)
  80637c:	e1bfff15 	stw	r6,-4(fp)
	euint32 clusters_required,clustersize;
	euint32 hc;

	if((offset+size)>file->FileSize){
  806380:	e0fffe17 	ldw	r3,-8(fp)
  806384:	e0bfff17 	ldw	r2,-4(fp)
  806388:	1887883a 	add	r3,r3,r2
  80638c:	e0bffd17 	ldw	r2,-12(fp)
  806390:	10801317 	ldw	r2,76(r2)
  806394:	10c03e2e 	bgeu	r2,r3,806490 <file_requiredCluster+0x130>
		if(file->Cache.ClusterCount==0){ /* Number of cluster unknown */
  806398:	e0bffd17 	ldw	r2,-12(fp)
  80639c:	10801017 	ldw	r2,64(r2)
  8063a0:	1004c03a 	cmpne	r2,r2,zero
  8063a4:	10000a1e 	bne	r2,zero,8063d0 <file_requiredCluster+0x70>
			hc = fat_countClustersInChain(file->fs,file->Cache.FirstCluster);
  8063a8:	e0bffd17 	ldw	r2,-12(fp)
  8063ac:	11000a17 	ldw	r4,40(r2)
  8063b0:	e0bffd17 	ldw	r2,-12(fp)
  8063b4:	11400e17 	ldw	r5,56(r2)
  8063b8:	08050200 	call	805020 <fat_countClustersInChain>
  8063bc:	e0bffa15 	stw	r2,-24(fp)
			file->Cache.ClusterCount = hc;
  8063c0:	e0fffd17 	ldw	r3,-12(fp)
  8063c4:	e0bffa17 	ldw	r2,-24(fp)
  8063c8:	18801015 	stw	r2,64(r3)
  8063cc:	00000306 	br	8063dc <file_requiredCluster+0x7c>
		}else{
			hc = file->Cache.ClusterCount; /* This better be right */
  8063d0:	e0bffd17 	ldw	r2,-12(fp)
  8063d4:	10801017 	ldw	r2,64(r2)
  8063d8:	e0bffa15 	stw	r2,-24(fp)
		}
		clustersize = file->fs->volumeId.BytesPerSector * file->fs->volumeId.SectorsPerCluster;
  8063dc:	e0bffd17 	ldw	r2,-12(fp)
  8063e0:	10800a17 	ldw	r2,40(r2)
  8063e4:	1080010b 	ldhu	r2,4(r2)
  8063e8:	10ffffcc 	andi	r3,r2,65535
  8063ec:	e0bffd17 	ldw	r2,-12(fp)
  8063f0:	10800a17 	ldw	r2,40(r2)
  8063f4:	10800183 	ldbu	r2,6(r2)
  8063f8:	10803fcc 	andi	r2,r2,255
  8063fc:	1885383a 	mul	r2,r3,r2
  806400:	e0bffb15 	stw	r2,-20(fp)
		if((size-file->FileSize+offset)>
  806404:	e0bffd17 	ldw	r2,-12(fp)
  806408:	10c01317 	ldw	r3,76(r2)
  80640c:	e0bfff17 	ldw	r2,-4(fp)
  806410:	10c7c83a 	sub	r3,r2,r3
  806414:	e0bffe17 	ldw	r2,-8(fp)
  806418:	18a1883a 	add	r16,r3,r2
  80641c:	e0bffd17 	ldw	r2,-12(fp)
  806420:	10c01317 	ldw	r3,76(r2)
  806424:	e0bffb17 	ldw	r2,-20(fp)
  806428:	1885883a 	add	r2,r3,r2
  80642c:	113fffc4 	addi	r4,r2,-1
  806430:	e17ffb17 	ldw	r5,-20(fp)
  806434:	08111d40 	call	8111d4 <__udivsi3>
  806438:	1007883a 	mov	r3,r2
  80643c:	e0bffa17 	ldw	r2,-24(fp)
  806440:	10c7c83a 	sub	r3,r2,r3
  806444:	e0bffb17 	ldw	r2,-20(fp)
  806448:	1885383a 	mul	r2,r3,r2
  80644c:	14000e2e 	bgeu	r2,r16,806488 <file_requiredCluster+0x128>
		   ((hc-((file->FileSize+clustersize-1)/clustersize))*clustersize)){
			clusters_required = (((offset+size)-(hc*clustersize))+clustersize-1)/clustersize;
  806450:	e0fffe17 	ldw	r3,-8(fp)
  806454:	e0bfff17 	ldw	r2,-4(fp)
  806458:	1889883a 	add	r4,r3,r2
  80645c:	e0fffa17 	ldw	r3,-24(fp)
  806460:	e0bffb17 	ldw	r2,-20(fp)
  806464:	1885383a 	mul	r2,r3,r2
  806468:	2087c83a 	sub	r3,r4,r2
  80646c:	e0bffb17 	ldw	r2,-20(fp)
  806470:	1885883a 	add	r2,r3,r2
  806474:	113fffc4 	addi	r4,r2,-1
  806478:	e17ffb17 	ldw	r5,-20(fp)
  80647c:	08111d40 	call	8111d4 <__udivsi3>
  806480:	e0bffc15 	stw	r2,-16(fp)
  806484:	00000306 	br	806494 <file_requiredCluster+0x134>
		}else{
			clusters_required = 0;
  806488:	e03ffc15 	stw	zero,-16(fp)
  80648c:	00000106 	br	806494 <file_requiredCluster+0x134>
		}
	}else{
		clusters_required = 0;
  806490:	e03ffc15 	stw	zero,-16(fp)
	}
	return(clusters_required);
  806494:	e0bffc17 	ldw	r2,-16(fp)
}
  806498:	e037883a 	mov	sp,fp
  80649c:	dfc00217 	ldw	ra,8(sp)
  8064a0:	df000117 	ldw	fp,4(sp)
  8064a4:	dc000017 	ldw	r16,0(sp)
  8064a8:	dec00304 	addi	sp,sp,12
  8064ac:	f800283a 	ret

008064b0 <fs_initFs>:
 * Description: This functions glues the initialisation of the filesystem together.
 * It loads the volumeID, computes the FS type and searches for the rootsector.
 * Return value: Returns 0 on succes and -1 on error (if magic code is wrong)
*/
eint16 fs_initFs(FileSystem *fs,Partition *part)
{
  8064b0:	defffb04 	addi	sp,sp,-20
  8064b4:	dfc00415 	stw	ra,16(sp)
  8064b8:	df000315 	stw	fp,12(sp)
  8064bc:	df000304 	addi	fp,sp,12
  8064c0:	e13ffd15 	stw	r4,-12(fp)
  8064c4:	e17ffe15 	stw	r5,-8(fp)
	if(!fs_isValidFat(part)){
  8064c8:	e13ffe17 	ldw	r4,-8(fp)
  8064cc:	080656c0 	call	80656c <fs_isValidFat>
  8064d0:	10bfffcc 	andi	r2,r2,65535
  8064d4:	10a0001c 	xori	r2,r2,32768
  8064d8:	10a00004 	addi	r2,r2,-32768
  8064dc:	1004c03a 	cmpne	r2,r2,zero
  8064e0:	1000031e 	bne	r2,zero,8064f0 <fs_initFs+0x40>
		return(-1);
  8064e4:	00bfffc4 	movi	r2,-1
  8064e8:	e0bfff15 	stw	r2,-4(fp)
  8064ec:	00001906 	br	806554 <fs_initFs+0xa4>
	}
	fs->part=part;
  8064f0:	e0fffd17 	ldw	r3,-12(fp)
  8064f4:	e0bffe17 	ldw	r2,-8(fp)
  8064f8:	18800015 	stw	r2,0(r3)
	fs_loadVolumeId(fs,part);
  8064fc:	e13ffd17 	ldw	r4,-12(fp)
  806500:	e17ffe17 	ldw	r5,-8(fp)
  806504:	08065e00 	call	8065e0 <fs_loadVolumeId>
	if(!fs_verifySanity(fs))return(-2);
  806508:	e13ffd17 	ldw	r4,-12(fp)
  80650c:	080671c0 	call	80671c <fs_verifySanity>
  806510:	10bfffcc 	andi	r2,r2,65535
  806514:	10a0001c 	xori	r2,r2,32768
  806518:	10a00004 	addi	r2,r2,-32768
  80651c:	1004c03a 	cmpne	r2,r2,zero
  806520:	1000031e 	bne	r2,zero,806530 <fs_initFs+0x80>
  806524:	00bfff84 	movi	r2,-2
  806528:	e0bfff15 	stw	r2,-4(fp)
  80652c:	00000906 	br	806554 <fs_initFs+0xa4>
  	fs_countDataSectors(fs);
  806530:	e13ffd17 	ldw	r4,-12(fp)
  806534:	08068b80 	call	8068b8 <fs_countDataSectors>
	fs_determineFatType(fs);
  806538:	e13ffd17 	ldw	r4,-12(fp)
  80653c:	0806a100 	call	806a10 <fs_determineFatType>
	fs_findFirstSectorRootDir(fs);
  806540:	e13ffd17 	ldw	r4,-12(fp)
  806544:	0806a8c0 	call	806a8c <fs_findFirstSectorRootDir>
	fs_initCurrentDir(fs); 
  806548:	e13ffd17 	ldw	r4,-12(fp)
  80654c:	0806b4c0 	call	806b4c <fs_initCurrentDir>
	return(0);
  806550:	e03fff15 	stw	zero,-4(fp)
  806554:	e0bfff17 	ldw	r2,-4(fp)
}
  806558:	e037883a 	mov	sp,fp
  80655c:	dfc00117 	ldw	ra,4(sp)
  806560:	df000017 	ldw	fp,0(sp)
  806564:	dec00204 	addi	sp,sp,8
  806568:	f800283a 	ret

0080656c <fs_isValidFat>:
 * Description: This functions loads the volumeID and checks if the magic
 * value is present.
 * Return value: returns 0 when magic code is missing, 1 if it is there.
*/
eint16 fs_isValidFat(Partition *part)
{
  80656c:	defffb04 	addi	sp,sp,-20
  806570:	dfc00415 	stw	ra,16(sp)
  806574:	df000315 	stw	fp,12(sp)
  806578:	df000304 	addi	fp,sp,12
  80657c:	e13ffe15 	stw	r4,-8(fp)
	euint8 *buf;
	
	buf=part_getSect(part,0,IOM_MODE_READONLY|IOM_MODE_EXP_REQ); /* Load Volume label */
  806580:	e13ffe17 	ldw	r4,-8(fp)
  806584:	000b883a 	mov	r5,zero
  806588:	01800144 	movi	r6,5
  80658c:	080a5e40 	call	80a5e4 <part_getSect>
  806590:	e0bffd15 	stw	r2,-12(fp)
	if( ex_getb16(buf,0x1FE) != 0xAA55 ){
  806594:	e13ffd17 	ldw	r4,-12(fp)
  806598:	01407f84 	movi	r5,510
  80659c:	080399c0 	call	80399c <ex_getb16>
  8065a0:	10ffffcc 	andi	r3,r2,65535
  8065a4:	00aa9554 	movui	r2,43605
  8065a8:	18800226 	beq	r3,r2,8065b4 <fs_isValidFat+0x48>
		return (0);
  8065ac:	e03fff15 	stw	zero,-4(fp)
  8065b0:	00000506 	br	8065c8 <fs_isValidFat+0x5c>
	}
	part_relSect(part,buf);
  8065b4:	e13ffe17 	ldw	r4,-8(fp)
  8065b8:	e17ffd17 	ldw	r5,-12(fp)
  8065bc:	080a6440 	call	80a644 <part_relSect>
	return(1);
  8065c0:	00800044 	movi	r2,1
  8065c4:	e0bfff15 	stw	r2,-4(fp)
  8065c8:	e0bfff17 	ldw	r2,-4(fp)
}
  8065cc:	e037883a 	mov	sp,fp
  8065d0:	dfc00117 	ldw	ra,4(sp)
  8065d4:	df000017 	ldw	fp,0(sp)
  8065d8:	dec00204 	addi	sp,sp,8
  8065dc:	f800283a 	ret

008065e0 <fs_loadVolumeId>:
/* ****************************************************************************  
 * void fs_loadVolumeId(FileSystem *fs, Partition *part)
 * Description: This function loads all relevant fields from the volumeid.
*/
void fs_loadVolumeId(FileSystem *fs, Partition *part)
{
  8065e0:	defffb04 	addi	sp,sp,-20
  8065e4:	dfc00415 	stw	ra,16(sp)
  8065e8:	df000315 	stw	fp,12(sp)
  8065ec:	df000304 	addi	fp,sp,12
  8065f0:	e13ffe15 	stw	r4,-8(fp)
  8065f4:	e17fff15 	stw	r5,-4(fp)
	euint8 *buf;
	
	buf=part_getSect(part,0,IOM_MODE_READONLY|IOM_MODE_EXP_REQ);
  8065f8:	e13fff17 	ldw	r4,-4(fp)
  8065fc:	000b883a 	mov	r5,zero
  806600:	01800144 	movi	r6,5
  806604:	080a5e40 	call	80a5e4 <part_getSect>
  806608:	e0bffd15 	stw	r2,-12(fp)
	
	fs->volumeId.BytesPerSector=ex_getb16(buf,0x0B);
  80660c:	e13ffd17 	ldw	r4,-12(fp)
  806610:	014002c4 	movi	r5,11
  806614:	080399c0 	call	80399c <ex_getb16>
  806618:	1007883a 	mov	r3,r2
  80661c:	e0bffe17 	ldw	r2,-8(fp)
  806620:	10c0010d 	sth	r3,4(r2)
	fs->volumeId.SectorsPerCluster=*((eint8*)(buf+0x0D));
  806624:	e0bffd17 	ldw	r2,-12(fp)
  806628:	10800344 	addi	r2,r2,13
  80662c:	10800003 	ldbu	r2,0(r2)
  806630:	1007883a 	mov	r3,r2
  806634:	e0bffe17 	ldw	r2,-8(fp)
  806638:	10c00185 	stb	r3,6(r2)
	fs->volumeId.ReservedSectorCount=ex_getb16(buf,0x0E);
  80663c:	e13ffd17 	ldw	r4,-12(fp)
  806640:	01400384 	movi	r5,14
  806644:	080399c0 	call	80399c <ex_getb16>
  806648:	1007883a 	mov	r3,r2
  80664c:	e0bffe17 	ldw	r2,-8(fp)
  806650:	10c0020d 	sth	r3,8(r2)
	fs->volumeId.NumberOfFats=*((eint8*)(buf+0x10));
  806654:	e0bffd17 	ldw	r2,-12(fp)
  806658:	10800404 	addi	r2,r2,16
  80665c:	10800003 	ldbu	r2,0(r2)
  806660:	1007883a 	mov	r3,r2
  806664:	e0bffe17 	ldw	r2,-8(fp)
  806668:	10c00285 	stb	r3,10(r2)
	fs->volumeId.RootEntryCount=ex_getb16(buf,0x11);
  80666c:	e13ffd17 	ldw	r4,-12(fp)
  806670:	01400444 	movi	r5,17
  806674:	080399c0 	call	80399c <ex_getb16>
  806678:	1007883a 	mov	r3,r2
  80667c:	e0bffe17 	ldw	r2,-8(fp)
  806680:	10c0030d 	sth	r3,12(r2)
	fs->volumeId.SectorCount16=ex_getb16(buf,0x13);
  806684:	e13ffd17 	ldw	r4,-12(fp)
  806688:	014004c4 	movi	r5,19
  80668c:	080399c0 	call	80399c <ex_getb16>
  806690:	1007883a 	mov	r3,r2
  806694:	e0bffe17 	ldw	r2,-8(fp)
  806698:	10c0038d 	sth	r3,14(r2)
	fs->volumeId.FatSectorCount16=ex_getb16(buf,0x16);
  80669c:	e13ffd17 	ldw	r4,-12(fp)
  8066a0:	01400584 	movi	r5,22
  8066a4:	080399c0 	call	80399c <ex_getb16>
  8066a8:	1007883a 	mov	r3,r2
  8066ac:	e0bffe17 	ldw	r2,-8(fp)
  8066b0:	10c0040d 	sth	r3,16(r2)
	fs->volumeId.SectorCount32=ex_getb32(buf,0x20);
  8066b4:	e13ffd17 	ldw	r4,-12(fp)
  8066b8:	01400804 	movi	r5,32
  8066bc:	08039fc0 	call	8039fc <ex_getb32>
  8066c0:	1007883a 	mov	r3,r2
  8066c4:	e0bffe17 	ldw	r2,-8(fp)
  8066c8:	10c00515 	stw	r3,20(r2)
	fs->volumeId.FatSectorCount32=ex_getb32(buf,0x24);
  8066cc:	e13ffd17 	ldw	r4,-12(fp)
  8066d0:	01400904 	movi	r5,36
  8066d4:	08039fc0 	call	8039fc <ex_getb32>
  8066d8:	1007883a 	mov	r3,r2
  8066dc:	e0bffe17 	ldw	r2,-8(fp)
  8066e0:	10c00615 	stw	r3,24(r2)
	fs->volumeId.RootCluster=ex_getb32(buf,0x2C);
  8066e4:	e13ffd17 	ldw	r4,-12(fp)
  8066e8:	01400b04 	movi	r5,44
  8066ec:	08039fc0 	call	8039fc <ex_getb32>
  8066f0:	1007883a 	mov	r3,r2
  8066f4:	e0bffe17 	ldw	r2,-8(fp)
  8066f8:	10c00715 	stw	r3,28(r2)
	
	part_relSect(part,buf);
  8066fc:	e13fff17 	ldw	r4,-4(fp)
  806700:	e17ffd17 	ldw	r5,-12(fp)
  806704:	080a6440 	call	80a644 <part_relSect>
	
}
  806708:	e037883a 	mov	sp,fp
  80670c:	dfc00117 	ldw	ra,4(sp)
  806710:	df000017 	ldw	fp,0(sp)
  806714:	dec00204 	addi	sp,sp,8
  806718:	f800283a 	ret

0080671c <fs_verifySanity>:
 * esint16 fs_verifySanity(FileSystem *fs)
 * Description: Does some sanity calculations.
 * Return value: 1 on success, 0 when discrepancies were found.
*/
esint16 fs_verifySanity(FileSystem *fs)
{
  80671c:	defffd04 	addi	sp,sp,-12
  806720:	df000215 	stw	fp,8(sp)
  806724:	df000204 	addi	fp,sp,8
  806728:	e13fff15 	stw	r4,-4(fp)
	esint16 sane=1; /* Sane until proven otherwise */
  80672c:	00800044 	movi	r2,1
  806730:	e0bffe0d 	sth	r2,-8(fp)
	/* First check, BPS, we only support 512 */
	if(fs->volumeId.BytesPerSector!=512)sane=0;
  806734:	e0bfff17 	ldw	r2,-4(fp)
  806738:	1080010b 	ldhu	r2,4(r2)
  80673c:	10bfffcc 	andi	r2,r2,65535
  806740:	10808020 	cmpeqi	r2,r2,512
  806744:	1000011e 	bne	r2,zero,80674c <fs_verifySanity+0x30>
  806748:	e03ffe0d 	sth	zero,-8(fp)
	/* Check is SPC is valid (multiple of 2, and clustersize >=32KB */
	if(!((fs->volumeId.SectorsPerCluster == 1 ) |
  80674c:	e0bfff17 	ldw	r2,-4(fp)
  806750:	10800183 	ldbu	r2,6(r2)
  806754:	10803fcc 	andi	r2,r2,255
  806758:	10800060 	cmpeqi	r2,r2,1
  80675c:	1007883a 	mov	r3,r2
  806760:	e0bfff17 	ldw	r2,-4(fp)
  806764:	10800183 	ldbu	r2,6(r2)
  806768:	10803fcc 	andi	r2,r2,255
  80676c:	108000a0 	cmpeqi	r2,r2,2
  806770:	1884b03a 	or	r2,r3,r2
  806774:	10c03fcc 	andi	r3,r2,255
  806778:	e0bfff17 	ldw	r2,-4(fp)
  80677c:	10800183 	ldbu	r2,6(r2)
  806780:	10803fcc 	andi	r2,r2,255
  806784:	10800120 	cmpeqi	r2,r2,4
  806788:	1886b03a 	or	r3,r3,r2
  80678c:	e0bfff17 	ldw	r2,-4(fp)
  806790:	10800183 	ldbu	r2,6(r2)
  806794:	10803fcc 	andi	r2,r2,255
  806798:	10800220 	cmpeqi	r2,r2,8
  80679c:	1886b03a 	or	r3,r3,r2
  8067a0:	e0bfff17 	ldw	r2,-4(fp)
  8067a4:	10800183 	ldbu	r2,6(r2)
  8067a8:	10803fcc 	andi	r2,r2,255
  8067ac:	10800420 	cmpeqi	r2,r2,16
  8067b0:	1886b03a 	or	r3,r3,r2
  8067b4:	e0bfff17 	ldw	r2,-4(fp)
  8067b8:	10800183 	ldbu	r2,6(r2)
  8067bc:	10803fcc 	andi	r2,r2,255
  8067c0:	10800820 	cmpeqi	r2,r2,32
  8067c4:	1886b03a 	or	r3,r3,r2
  8067c8:	e0bfff17 	ldw	r2,-4(fp)
  8067cc:	10800183 	ldbu	r2,6(r2)
  8067d0:	10803fcc 	andi	r2,r2,255
  8067d4:	10801020 	cmpeqi	r2,r2,64
  8067d8:	1884b03a 	or	r2,r3,r2
  8067dc:	1004c03a 	cmpne	r2,r2,zero
  8067e0:	1000011e 	bne	r2,zero,8067e8 <fs_verifySanity+0xcc>
	     (fs->volumeId.SectorsPerCluster == 2 ) |
	     (fs->volumeId.SectorsPerCluster == 4 ) |
	     (fs->volumeId.SectorsPerCluster == 8 ) |
	     (fs->volumeId.SectorsPerCluster == 16) |
	     (fs->volumeId.SectorsPerCluster == 32) |
	     (fs->volumeId.SectorsPerCluster == 64) ))sane=0;
  8067e4:	e03ffe0d 	sth	zero,-8(fp)
	/* Any number of FAT's should be supported... (untested) */
	/* There should be at least 1 reserved sector */
	if(fs->volumeId.ReservedSectorCount==0)sane=0;
  8067e8:	e0bfff17 	ldw	r2,-4(fp)
  8067ec:	1080020b 	ldhu	r2,8(r2)
  8067f0:	10bfffcc 	andi	r2,r2,65535
  8067f4:	1004c03a 	cmpne	r2,r2,zero
  8067f8:	1000011e 	bne	r2,zero,806800 <fs_verifySanity+0xe4>
  8067fc:	e03ffe0d 	sth	zero,-8(fp)
	if(fs->volumeId.FatSectorCount16 != 0){
  806800:	e0bfff17 	ldw	r2,-4(fp)
  806804:	1080040b 	ldhu	r2,16(r2)
  806808:	10bfffcc 	andi	r2,r2,65535
  80680c:	1005003a 	cmpeq	r2,r2,zero
  806810:	1000131e 	bne	r2,zero,806860 <fs_verifySanity+0x144>
		if(fs->volumeId.FatSectorCount16 > fs->part->disc->partitions[fs->part->activePartition].numSectors)sane=0;
  806814:	e0bfff17 	ldw	r2,-4(fp)
  806818:	1080040b 	ldhu	r2,16(r2)
  80681c:	113fffcc 	andi	r4,r2,65535
  806820:	e0bfff17 	ldw	r2,-4(fp)
  806824:	10800017 	ldw	r2,0(r2)
  806828:	10c00017 	ldw	r3,0(r2)
  80682c:	e0bfff17 	ldw	r2,-4(fp)
  806830:	10800017 	ldw	r2,0(r2)
  806834:	10800103 	ldbu	r2,4(r2)
  806838:	10803fcc 	andi	r2,r2,255
  80683c:	1080201c 	xori	r2,r2,128
  806840:	10bfe004 	addi	r2,r2,-128
  806844:	1004913a 	slli	r2,r2,4
  806848:	10c5883a 	add	r2,r2,r3
  80684c:	10800504 	addi	r2,r2,20
  806850:	10800017 	ldw	r2,0(r2)
  806854:	1100132e 	bgeu	r2,r4,8068a4 <fs_verifySanity+0x188>
  806858:	e03ffe0d 	sth	zero,-8(fp)
  80685c:	00001106 	br	8068a4 <fs_verifySanity+0x188>
	}else{
        if(fs->volumeId.FatSectorCount32 > fs->part->disc->partitions[fs->part->activePartition].numSectors)sane=0;
  806860:	e0bfff17 	ldw	r2,-4(fp)
  806864:	11000617 	ldw	r4,24(r2)
  806868:	e0bfff17 	ldw	r2,-4(fp)
  80686c:	10800017 	ldw	r2,0(r2)
  806870:	10c00017 	ldw	r3,0(r2)
  806874:	e0bfff17 	ldw	r2,-4(fp)
  806878:	10800017 	ldw	r2,0(r2)
  80687c:	10800103 	ldbu	r2,4(r2)
  806880:	10803fcc 	andi	r2,r2,255
  806884:	1080201c 	xori	r2,r2,128
  806888:	10bfe004 	addi	r2,r2,-128
  80688c:	1004913a 	slli	r2,r2,4
  806890:	10c5883a 	add	r2,r2,r3
  806894:	10800504 	addi	r2,r2,20
  806898:	10800017 	ldw	r2,0(r2)
  80689c:	1100012e 	bgeu	r2,r4,8068a4 <fs_verifySanity+0x188>
  8068a0:	e03ffe0d 	sth	zero,-8(fp)
	}
	return(sane);
  8068a4:	e0bffe0f 	ldh	r2,-8(fp)
}
  8068a8:	e037883a 	mov	sp,fp
  8068ac:	df000017 	ldw	fp,0(sp)
  8068b0:	dec00104 	addi	sp,sp,4
  8068b4:	f800283a 	ret

008068b8 <fs_countDataSectors>:
 * void fs_countDataSectors(FileSystem *fs)
 * Description: This functions calculates the sectorcounts, fatsectorcounts and
 * dataclustercounts. It fills in the general fields.
*/
void fs_countDataSectors(FileSystem *fs)
{
  8068b8:	defffb04 	addi	sp,sp,-20
  8068bc:	dfc00415 	stw	ra,16(sp)
  8068c0:	df000315 	stw	fp,12(sp)
  8068c4:	df000304 	addi	fp,sp,12
  8068c8:	e13fff15 	stw	r4,-4(fp)
  euint32 rootDirSectors,dataSectorCount;

  rootDirSectors=((fs->volumeId.RootEntryCount*32) +
  8068cc:	e0bfff17 	ldw	r2,-4(fp)
  8068d0:	1080030b 	ldhu	r2,12(r2)
  8068d4:	10bfffcc 	andi	r2,r2,65535
  8068d8:	1006917a 	slli	r3,r2,5
  8068dc:	e0bfff17 	ldw	r2,-4(fp)
  8068e0:	1080010b 	ldhu	r2,4(r2)
  8068e4:	10bfffcc 	andi	r2,r2,65535
  8068e8:	1885883a 	add	r2,r3,r2
  8068ec:	113fffc4 	addi	r4,r2,-1
  8068f0:	e0bfff17 	ldw	r2,-4(fp)
  8068f4:	1080010b 	ldhu	r2,4(r2)
  8068f8:	117fffcc 	andi	r5,r2,65535
  8068fc:	08111140 	call	811114 <__divsi3>
  806900:	e0bffe15 	stw	r2,-8(fp)
                 (fs->volumeId.BytesPerSector - 1)) /
                 fs->volumeId.BytesPerSector;

  if(fs->volumeId.FatSectorCount16 != 0)
  806904:	e0bfff17 	ldw	r2,-4(fp)
  806908:	1080040b 	ldhu	r2,16(r2)
  80690c:	10bfffcc 	andi	r2,r2,65535
  806910:	1005003a 	cmpeq	r2,r2,zero
  806914:	1000081e 	bne	r2,zero,806938 <fs_countDataSectors+0x80>
  {
    fs->FatSectorCount=fs->volumeId.FatSectorCount16;
  806918:	e0bfff17 	ldw	r2,-4(fp)
  80691c:	1080040b 	ldhu	r2,16(r2)
  806920:	10ffffcc 	andi	r3,r2,65535
  806924:	e0bfff17 	ldw	r2,-4(fp)
  806928:	10c00915 	stw	r3,36(r2)
    fs->volumeId.FatSectorCount32=0;
  80692c:	e0bfff17 	ldw	r2,-4(fp)
  806930:	10000615 	stw	zero,24(r2)
  806934:	00000606 	br	806950 <fs_countDataSectors+0x98>
  }
  else
  {
    fs->FatSectorCount=fs->volumeId.FatSectorCount32;
  806938:	e0bfff17 	ldw	r2,-4(fp)
  80693c:	10c00617 	ldw	r3,24(r2)
  806940:	e0bfff17 	ldw	r2,-4(fp)
  806944:	10c00915 	stw	r3,36(r2)
    fs->volumeId.FatSectorCount16=0;
  806948:	e0bfff17 	ldw	r2,-4(fp)
  80694c:	1000040d 	sth	zero,16(r2)
  }

  if(fs->volumeId.SectorCount16!=0)
  806950:	e0bfff17 	ldw	r2,-4(fp)
  806954:	1080038b 	ldhu	r2,14(r2)
  806958:	10bfffcc 	andi	r2,r2,65535
  80695c:	1005003a 	cmpeq	r2,r2,zero
  806960:	1000081e 	bne	r2,zero,806984 <fs_countDataSectors+0xcc>
  {
    fs->SectorCount=fs->volumeId.SectorCount16;
  806964:	e0bfff17 	ldw	r2,-4(fp)
  806968:	1080038b 	ldhu	r2,14(r2)
  80696c:	10ffffcc 	andi	r3,r2,65535
  806970:	e0bfff17 	ldw	r2,-4(fp)
  806974:	10c00a15 	stw	r3,40(r2)
    fs->volumeId.SectorCount32=0;
  806978:	e0bfff17 	ldw	r2,-4(fp)
  80697c:	10000515 	stw	zero,20(r2)
  806980:	00000606 	br	80699c <fs_countDataSectors+0xe4>
  }
  else
  {
    fs->SectorCount=fs->volumeId.SectorCount32;
  806984:	e0bfff17 	ldw	r2,-4(fp)
  806988:	10c00517 	ldw	r3,20(r2)
  80698c:	e0bfff17 	ldw	r2,-4(fp)
  806990:	10c00a15 	stw	r3,40(r2)
    fs->volumeId.SectorCount16=0;
  806994:	e0bfff17 	ldw	r2,-4(fp)
  806998:	1000038d 	sth	zero,14(r2)
  }

  dataSectorCount=fs->SectorCount - (
  80699c:	e0bfff17 	ldw	r2,-4(fp)
  8069a0:	11400a17 	ldw	r5,40(r2)
  8069a4:	e0bfff17 	ldw	r2,-4(fp)
  8069a8:	1080020b 	ldhu	r2,8(r2)
  8069ac:	113fffcc 	andi	r4,r2,65535
  8069b0:	e0bfff17 	ldw	r2,-4(fp)
  8069b4:	10800283 	ldbu	r2,10(r2)
  8069b8:	10c03fcc 	andi	r3,r2,255
  8069bc:	e0bfff17 	ldw	r2,-4(fp)
  8069c0:	10800917 	ldw	r2,36(r2)
  8069c4:	1885383a 	mul	r2,r3,r2
  8069c8:	2087883a 	add	r3,r4,r2
  8069cc:	e0bffe17 	ldw	r2,-8(fp)
  8069d0:	1885883a 	add	r2,r3,r2
  8069d4:	2885c83a 	sub	r2,r5,r2
  8069d8:	e0bffd15 	stw	r2,-12(fp)
                  fs->volumeId.ReservedSectorCount +
                  (fs->volumeId.NumberOfFats * fs->FatSectorCount) +
                  rootDirSectors);

  fs->DataClusterCount=dataSectorCount/fs->volumeId.SectorsPerCluster;
  8069dc:	e0bfff17 	ldw	r2,-4(fp)
  8069e0:	10800183 	ldbu	r2,6(r2)
  8069e4:	11403fcc 	andi	r5,r2,255
  8069e8:	e13ffd17 	ldw	r4,-12(fp)
  8069ec:	08111d40 	call	8111d4 <__udivsi3>
  8069f0:	1007883a 	mov	r3,r2
  8069f4:	e0bfff17 	ldw	r2,-4(fp)
  8069f8:	10c00815 	stw	r3,32(r2)
}
  8069fc:	e037883a 	mov	sp,fp
  806a00:	dfc00117 	ldw	ra,4(sp)
  806a04:	df000017 	ldw	fp,0(sp)
  806a08:	dec00204 	addi	sp,sp,8
  806a0c:	f800283a 	ret

00806a10 <fs_determineFatType>:
 * void fs_determineFatType(FileSystem *fs)
 * Description: This function looks af the Dataclustercount and determines the
 * FAT type. It fills in fs->type.
*/
void fs_determineFatType(FileSystem *fs)
{
  806a10:	defffe04 	addi	sp,sp,-8
  806a14:	df000115 	stw	fp,4(sp)
  806a18:	df000104 	addi	fp,sp,4
  806a1c:	e13fff15 	stw	r4,-4(fp)
	if(fs->DataClusterCount < 4085)
  806a20:	e0bfff17 	ldw	r2,-4(fp)
  806a24:	10800817 	ldw	r2,32(r2)
  806a28:	1083fd68 	cmpgeui	r2,r2,4085
  806a2c:	1000061e 	bne	r2,zero,806a48 <fs_determineFatType+0x38>
	{
		fs->type=FAT12;
  806a30:	e0bfff17 	ldw	r2,-4(fp)
  806a34:	00c00044 	movi	r3,1
  806a38:	10c00f05 	stb	r3,60(r2)
		fs->volumeId.RootCluster=0;
  806a3c:	e0bfff17 	ldw	r2,-4(fp)
  806a40:	10000715 	stw	zero,28(r2)
  806a44:	00000d06 	br	806a7c <fs_determineFatType+0x6c>
	}
	else if(fs->DataClusterCount < 65525)
  806a48:	e0bfff17 	ldw	r2,-4(fp)
  806a4c:	10c00817 	ldw	r3,32(r2)
  806a50:	00bffd14 	movui	r2,65524
  806a54:	10c00636 	bltu	r2,r3,806a70 <fs_determineFatType+0x60>
	{
		fs->type=FAT16;
  806a58:	e0bfff17 	ldw	r2,-4(fp)
  806a5c:	00c00084 	movi	r3,2
  806a60:	10c00f05 	stb	r3,60(r2)
		fs->volumeId.RootCluster=0;
  806a64:	e0bfff17 	ldw	r2,-4(fp)
  806a68:	10000715 	stw	zero,28(r2)
  806a6c:	00000306 	br	806a7c <fs_determineFatType+0x6c>
	}
	else
	{
		fs->type=FAT32;
  806a70:	e0ffff17 	ldw	r3,-4(fp)
  806a74:	008000c4 	movi	r2,3
  806a78:	18800f05 	stb	r2,60(r3)
	}
}
  806a7c:	e037883a 	mov	sp,fp
  806a80:	df000017 	ldw	fp,0(sp)
  806a84:	dec00104 	addi	sp,sp,4
  806a88:	f800283a 	ret

00806a8c <fs_findFirstSectorRootDir>:
 * void fs_findFirstSectorRootDir(FileSystem *fs)
 * Description: This functions fills in the fs->FirstSectorRootDir field, even
 * for FAT32, although that is not necessary (because you have FirstClusterRootDir).
*/
void fs_findFirstSectorRootDir(FileSystem *fs)
{
  806a8c:	defffe04 	addi	sp,sp,-8
  806a90:	df000115 	stw	fp,4(sp)
  806a94:	df000104 	addi	fp,sp,4
  806a98:	e13fff15 	stw	r4,-4(fp)
	if(fs->type==FAT32)
  806a9c:	e0bfff17 	ldw	r2,-4(fp)
  806aa0:	10800f03 	ldbu	r2,60(r2)
  806aa4:	10803fcc 	andi	r2,r2,255
  806aa8:	108000d8 	cmpnei	r2,r2,3
  806aac:	1000151e 	bne	r2,zero,806b04 <fs_findFirstSectorRootDir+0x78>
		fs->FirstSectorRootDir = fs->volumeId.ReservedSectorCount + 
  806ab0:	e0bfff17 	ldw	r2,-4(fp)
  806ab4:	1080020b 	ldhu	r2,8(r2)
  806ab8:	117fffcc 	andi	r5,r2,65535
  806abc:	e0bfff17 	ldw	r2,-4(fp)
  806ac0:	10800717 	ldw	r2,28(r2)
  806ac4:	10ffff84 	addi	r3,r2,-2
  806ac8:	e0bfff17 	ldw	r2,-4(fp)
  806acc:	10800183 	ldbu	r2,6(r2)
  806ad0:	10803fcc 	andi	r2,r2,255
  806ad4:	1889383a 	mul	r4,r3,r2
  806ad8:	e0bfff17 	ldw	r2,-4(fp)
  806adc:	10800283 	ldbu	r2,10(r2)
  806ae0:	10c03fcc 	andi	r3,r2,255
  806ae4:	e0bfff17 	ldw	r2,-4(fp)
  806ae8:	10800617 	ldw	r2,24(r2)
  806aec:	1885383a 	mul	r2,r3,r2
  806af0:	2085883a 	add	r2,r4,r2
  806af4:	2887883a 	add	r3,r5,r2
  806af8:	e0bfff17 	ldw	r2,-4(fp)
  806afc:	10c00b15 	stw	r3,44(r2)
  806b00:	00000e06 	br	806b3c <fs_findFirstSectorRootDir+0xb0>
		                         (fs->volumeId.NumberOfFats*fs->volumeId.FatSectorCount32) +
								 (fs->volumeId.RootCluster-2)*fs->volumeId.SectorsPerCluster;
	else
		fs->FirstSectorRootDir = fs->volumeId.ReservedSectorCount + 
  806b04:	e0bfff17 	ldw	r2,-4(fp)
  806b08:	1080020b 	ldhu	r2,8(r2)
  806b0c:	113fffcc 	andi	r4,r2,65535
  806b10:	e0bfff17 	ldw	r2,-4(fp)
  806b14:	10800283 	ldbu	r2,10(r2)
  806b18:	10c03fcc 	andi	r3,r2,255
  806b1c:	e0bfff17 	ldw	r2,-4(fp)
  806b20:	1080040b 	ldhu	r2,16(r2)
  806b24:	10bfffcc 	andi	r2,r2,65535
  806b28:	1885383a 	mul	r2,r3,r2
  806b2c:	2085883a 	add	r2,r4,r2
  806b30:	1007883a 	mov	r3,r2
  806b34:	e0bfff17 	ldw	r2,-4(fp)
  806b38:	10c00b15 	stw	r3,44(r2)
		                         (fs->volumeId.NumberOfFats*fs->volumeId.FatSectorCount16);
}
  806b3c:	e037883a 	mov	sp,fp
  806b40:	df000017 	ldw	fp,0(sp)
  806b44:	dec00104 	addi	sp,sp,4
  806b48:	f800283a 	ret

00806b4c <fs_initCurrentDir>:
/*****************************************************************************/ 

void fs_initCurrentDir(FileSystem *fs)
{
  806b4c:	defffd04 	addi	sp,sp,-12
  806b50:	dfc00215 	stw	ra,8(sp)
  806b54:	df000115 	stw	fp,4(sp)
  806b58:	df000104 	addi	fp,sp,4
  806b5c:	e13fff15 	stw	r4,-4(fp)
	fs->FirstClusterCurrentDir = fs_getFirstClusterRootDir(fs);
  806b60:	e13fff17 	ldw	r4,-4(fp)
  806b64:	080722c0 	call	80722c <fs_getFirstClusterRootDir>
  806b68:	1007883a 	mov	r3,r2
  806b6c:	e0bfff17 	ldw	r2,-4(fp)
  806b70:	10c00c15 	stw	r3,48(r2)
}
  806b74:	e037883a 	mov	sp,fp
  806b78:	dfc00117 	ldw	ra,4(sp)
  806b7c:	df000017 	ldw	fp,0(sp)
  806b80:	dec00204 	addi	sp,sp,8
  806b84:	f800283a 	ret

00806b88 <fs_clusterToSector>:
 * Description: This function converts a clusternumber in the effective sector
 * number where this cluster starts. Boundary check is not implemented
 * Return value: A long is returned representing the sectornumber.
*/
euint32 fs_clusterToSector(FileSystem *fs,euint32 cluster)
{
  806b88:	defffc04 	addi	sp,sp,-16
  806b8c:	df000315 	stw	fp,12(sp)
  806b90:	df000304 	addi	fp,sp,12
  806b94:	e13ffe15 	stw	r4,-8(fp)
  806b98:	e17fff15 	stw	r5,-4(fp)
	eint32 base;
	
	if(fs->type==FAT32)
  806b9c:	e0bffe17 	ldw	r2,-8(fp)
  806ba0:	10800f03 	ldbu	r2,60(r2)
  806ba4:	10803fcc 	andi	r2,r2,255
  806ba8:	108000d8 	cmpnei	r2,r2,3
  806bac:	10000c1e 	bne	r2,zero,806be0 <fs_clusterToSector+0x58>
	{
		base=
  806bb0:	e0bffe17 	ldw	r2,-8(fp)
  806bb4:	1080020b 	ldhu	r2,8(r2)
  806bb8:	113fffcc 	andi	r4,r2,65535
  806bbc:	e0bffe17 	ldw	r2,-8(fp)
  806bc0:	10c00917 	ldw	r3,36(r2)
  806bc4:	e0bffe17 	ldw	r2,-8(fp)
  806bc8:	10800283 	ldbu	r2,10(r2)
  806bcc:	10803fcc 	andi	r2,r2,255
  806bd0:	1885383a 	mul	r2,r3,r2
  806bd4:	2085883a 	add	r2,r4,r2
  806bd8:	e0bffd15 	stw	r2,-12(fp)
  806bdc:	00001106 	br	806c24 <fs_clusterToSector+0x9c>
			fs->volumeId.ReservedSectorCount+
			fs->FatSectorCount*fs->volumeId.NumberOfFats;
	}
	else
	{
		base=
  806be0:	e0bffe17 	ldw	r2,-8(fp)
  806be4:	1080020b 	ldhu	r2,8(r2)
  806be8:	113fffcc 	andi	r4,r2,65535
  806bec:	e0bffe17 	ldw	r2,-8(fp)
  806bf0:	10c00917 	ldw	r3,36(r2)
  806bf4:	e0bffe17 	ldw	r2,-8(fp)
  806bf8:	10800283 	ldbu	r2,10(r2)
  806bfc:	10803fcc 	andi	r2,r2,255
  806c00:	1885383a 	mul	r2,r3,r2
  806c04:	2087883a 	add	r3,r4,r2
  806c08:	e0bffe17 	ldw	r2,-8(fp)
  806c0c:	1080030b 	ldhu	r2,12(r2)
  806c10:	10bfffcc 	andi	r2,r2,65535
  806c14:	1004d13a 	srli	r2,r2,4
  806c18:	10bfffcc 	andi	r2,r2,65535
  806c1c:	1885883a 	add	r2,r3,r2
  806c20:	e0bffd15 	stw	r2,-12(fp)
			fs->volumeId.ReservedSectorCount+
			fs->FatSectorCount*fs->volumeId.NumberOfFats+
			fs->volumeId.RootEntryCount/16;
	}
	return( base + (cluster-2)*fs->volumeId.SectorsPerCluster );
  806c24:	e0bfff17 	ldw	r2,-4(fp)
  806c28:	10ffff84 	addi	r3,r2,-2
  806c2c:	e0bffe17 	ldw	r2,-8(fp)
  806c30:	10800183 	ldbu	r2,6(r2)
  806c34:	10803fcc 	andi	r2,r2,255
  806c38:	1887383a 	mul	r3,r3,r2
  806c3c:	e0bffd17 	ldw	r2,-12(fp)
  806c40:	1885883a 	add	r2,r3,r2
}
  806c44:	e037883a 	mov	sp,fp
  806c48:	df000017 	ldw	fp,0(sp)
  806c4c:	dec00104 	addi	sp,sp,4
  806c50:	f800283a 	ret

00806c54 <fs_sectorToCluster>:
/*****************************************************************************/ 

/* Function is unused, but may be usefull */
euint32 fs_sectorToCluster(FileSystem *fs,euint32 sector)
{
  806c54:	defffa04 	addi	sp,sp,-24
  806c58:	dfc00515 	stw	ra,20(sp)
  806c5c:	df000415 	stw	fp,16(sp)
  806c60:	dc000315 	stw	r16,12(sp)
  806c64:	df000304 	addi	fp,sp,12
  806c68:	e13ffe15 	stw	r4,-8(fp)
  806c6c:	e17fff15 	stw	r5,-4(fp)
	eint32 base;
	
	if(fs->type==FAT32)
  806c70:	e0bffe17 	ldw	r2,-8(fp)
  806c74:	10800f03 	ldbu	r2,60(r2)
  806c78:	10803fcc 	andi	r2,r2,255
  806c7c:	108000d8 	cmpnei	r2,r2,3
  806c80:	10000c1e 	bne	r2,zero,806cb4 <fs_sectorToCluster+0x60>
	{
		base=
  806c84:	e0bffe17 	ldw	r2,-8(fp)
  806c88:	1080020b 	ldhu	r2,8(r2)
  806c8c:	113fffcc 	andi	r4,r2,65535
  806c90:	e0bffe17 	ldw	r2,-8(fp)
  806c94:	10c00917 	ldw	r3,36(r2)
  806c98:	e0bffe17 	ldw	r2,-8(fp)
  806c9c:	10800283 	ldbu	r2,10(r2)
  806ca0:	10803fcc 	andi	r2,r2,255
  806ca4:	1885383a 	mul	r2,r3,r2
  806ca8:	2085883a 	add	r2,r4,r2
  806cac:	e0bffd15 	stw	r2,-12(fp)
  806cb0:	00001106 	br	806cf8 <fs_sectorToCluster+0xa4>
			fs->volumeId.ReservedSectorCount+
			fs->FatSectorCount*fs->volumeId.NumberOfFats;
	}
	else
	{
		base=
  806cb4:	e0bffe17 	ldw	r2,-8(fp)
  806cb8:	1080020b 	ldhu	r2,8(r2)
  806cbc:	113fffcc 	andi	r4,r2,65535
  806cc0:	e0bffe17 	ldw	r2,-8(fp)
  806cc4:	10c00917 	ldw	r3,36(r2)
  806cc8:	e0bffe17 	ldw	r2,-8(fp)
  806ccc:	10800283 	ldbu	r2,10(r2)
  806cd0:	10803fcc 	andi	r2,r2,255
  806cd4:	1885383a 	mul	r2,r3,r2
  806cd8:	2087883a 	add	r3,r4,r2
  806cdc:	e0bffe17 	ldw	r2,-8(fp)
  806ce0:	1080030b 	ldhu	r2,12(r2)
  806ce4:	10bfffcc 	andi	r2,r2,65535
  806ce8:	1004d13a 	srli	r2,r2,4
  806cec:	10bfffcc 	andi	r2,r2,65535
  806cf0:	1885883a 	add	r2,r3,r2
  806cf4:	e0bffd15 	stw	r2,-12(fp)
			fs->volumeId.ReservedSectorCount+
			fs->FatSectorCount*fs->volumeId.NumberOfFats+
			fs->volumeId.RootEntryCount/16;
	}
	return(((sector-base)-((sector-base)%fs->volumeId.SectorsPerCluster))/fs->volumeId.SectorsPerCluster+2 );
  806cf8:	e0fffd17 	ldw	r3,-12(fp)
  806cfc:	e0bfff17 	ldw	r2,-4(fp)
  806d00:	10e1c83a 	sub	r16,r2,r3
  806d04:	e0fffd17 	ldw	r3,-12(fp)
  806d08:	e0bfff17 	ldw	r2,-4(fp)
  806d0c:	10c9c83a 	sub	r4,r2,r3
  806d10:	e0bffe17 	ldw	r2,-8(fp)
  806d14:	10800183 	ldbu	r2,6(r2)
  806d18:	11403fcc 	andi	r5,r2,255
  806d1c:	08111dc0 	call	8111dc <__umodsi3>
  806d20:	8089c83a 	sub	r4,r16,r2
  806d24:	e0bffe17 	ldw	r2,-8(fp)
  806d28:	10800183 	ldbu	r2,6(r2)
  806d2c:	11403fcc 	andi	r5,r2,255
  806d30:	08111d40 	call	8111d4 <__udivsi3>
  806d34:	10800084 	addi	r2,r2,2
}
  806d38:	e037883a 	mov	sp,fp
  806d3c:	dfc00217 	ldw	ra,8(sp)
  806d40:	df000117 	ldw	fp,4(sp)
  806d44:	dc000017 	ldw	r16,0(sp)
  806d48:	dec00304 	addi	sp,sp,12
  806d4c:	f800283a 	ret

00806d50 <fs_getNextFreeCluster>:
 * fragmentation. Implementing rollover search is still to be done.
 * Return value: If a free cluster is found it's number is returned. If none is 
 * found 0 is returned.
*/
euint32 fs_getNextFreeCluster(FileSystem *fs,euint32 startingcluster)
{
  806d50:	defffa04 	addi	sp,sp,-24
  806d54:	dfc00515 	stw	ra,20(sp)
  806d58:	df000415 	stw	fp,16(sp)
  806d5c:	df000404 	addi	fp,sp,16
  806d60:	e13ffd15 	stw	r4,-12(fp)
  806d64:	e17ffe15 	stw	r5,-8(fp)
	euint32 r;
	
	while(startingcluster<fs->DataClusterCount){
  806d68:	00000e06 	br	806da4 <fs_getNextFreeCluster+0x54>
		r=fat_getNextClusterAddress(fs,startingcluster,0);
  806d6c:	e13ffd17 	ldw	r4,-12(fp)
  806d70:	e17ffe17 	ldw	r5,-8(fp)
  806d74:	000d883a 	mov	r6,zero
  806d78:	0803e180 	call	803e18 <fat_getNextClusterAddress>
  806d7c:	e0bffc15 	stw	r2,-16(fp)
		if(r==0){
  806d80:	e0bffc17 	ldw	r2,-16(fp)
  806d84:	1004c03a 	cmpne	r2,r2,zero
  806d88:	1000031e 	bne	r2,zero,806d98 <fs_getNextFreeCluster+0x48>
			return(startingcluster);
  806d8c:	e0bffe17 	ldw	r2,-8(fp)
  806d90:	e0bfff15 	stw	r2,-4(fp)
  806d94:	00000806 	br	806db8 <fs_getNextFreeCluster+0x68>
		}
		startingcluster++;
  806d98:	e0bffe17 	ldw	r2,-8(fp)
  806d9c:	10800044 	addi	r2,r2,1
  806da0:	e0bffe15 	stw	r2,-8(fp)
*/
euint32 fs_getNextFreeCluster(FileSystem *fs,euint32 startingcluster)
{
	euint32 r;
	
	while(startingcluster<fs->DataClusterCount){
  806da4:	e0bffd17 	ldw	r2,-12(fp)
  806da8:	10c00817 	ldw	r3,32(r2)
  806dac:	e0bffe17 	ldw	r2,-8(fp)
  806db0:	10ffee36 	bltu	r2,r3,806d6c <fs_getNextFreeCluster+0x1c>
		if(r==0){
			return(startingcluster);
		}
		startingcluster++;
	}
	return(0);
  806db4:	e03fff15 	stw	zero,-4(fp)
  806db8:	e0bfff17 	ldw	r2,-4(fp)
}
  806dbc:	e037883a 	mov	sp,fp
  806dc0:	dfc00117 	ldw	ra,4(sp)
  806dc4:	df000017 	ldw	fp,0(sp)
  806dc8:	dec00204 	addi	sp,sp,8
  806dcc:	f800283a 	ret

00806dd0 <fs_giveFreeClusterHint>:
 * files in the rootdirectory.
 * 
 * Return value: Returns it's best guess.
*/
euint32 fs_giveFreeClusterHint(FileSystem *fs)
{
  806dd0:	defffe04 	addi	sp,sp,-8
  806dd4:	df000115 	stw	fp,4(sp)
  806dd8:	df000104 	addi	fp,sp,4
  806ddc:	e13fff15 	stw	r4,-4(fp)
	return(2); /* Now THIS is a hint ;) */
  806de0:	00800084 	movi	r2,2
}
  806de4:	e037883a 	mov	sp,fp
  806de8:	df000017 	ldw	fp,0(sp)
  806dec:	dec00104 	addi	sp,sp,4
  806df0:	f800283a 	ret

00806df4 <fs_findFile>:
 * Return value: Returns 0 when nothing was found, 1 when the thing found
 * was a file and 2 if the thing found was a directory.
*/

esint8 fs_findFile(FileSystem *fs,eint8* filename,FileLocation *loc,euint32 *lastDir)
{
  806df4:	defff104 	addi	sp,sp,-60
  806df8:	dfc00e15 	stw	ra,56(sp)
  806dfc:	df000d15 	stw	fp,52(sp)
  806e00:	df000d04 	addi	fp,sp,52
  806e04:	e13ffb15 	stw	r4,-20(fp)
  806e08:	e17ffc15 	stw	r5,-16(fp)
  806e0c:	e1bffd15 	stw	r6,-12(fp)
  806e10:	e1fffe15 	stw	r7,-8(fp)
	euint32 fccd,tmpclus;
	eint8 ffname[11],*next,it=0,filefound=0;
  806e14:	e03ff445 	stb	zero,-47(fp)
  806e18:	e03ff405 	stb	zero,-48(fp)
	
	if(*filename=='/'){
  806e1c:	e0bffc17 	ldw	r2,-16(fp)
  806e20:	10800003 	ldbu	r2,0(r2)
  806e24:	10803fcc 	andi	r2,r2,255
  806e28:	1080201c 	xori	r2,r2,128
  806e2c:	10bfe004 	addi	r2,r2,-128
  806e30:	10800bd8 	cmpnei	r2,r2,47
  806e34:	1000161e 	bne	r2,zero,806e90 <fs_findFile+0x9c>
		fccd = fs_getFirstClusterRootDir(fs);
  806e38:	e13ffb17 	ldw	r4,-20(fp)
  806e3c:	080722c0 	call	80722c <fs_getFirstClusterRootDir>
  806e40:	e0bff715 	stw	r2,-36(fp)
		filename++;
  806e44:	e0bffc17 	ldw	r2,-16(fp)
  806e48:	10800044 	addi	r2,r2,1
  806e4c:	e0bffc15 	stw	r2,-16(fp)
		if(lastDir)*lastDir=fccd;
  806e50:	e0bffe17 	ldw	r2,-8(fp)
  806e54:	1005003a 	cmpeq	r2,r2,zero
  806e58:	1000031e 	bne	r2,zero,806e68 <fs_findFile+0x74>
  806e5c:	e0fffe17 	ldw	r3,-8(fp)
  806e60:	e0bff717 	ldw	r2,-36(fp)
  806e64:	18800015 	stw	r2,0(r3)
		if(!*filename){
  806e68:	e0bffc17 	ldw	r2,-16(fp)
  806e6c:	10800003 	ldbu	r2,0(r2)
  806e70:	10803fcc 	andi	r2,r2,255
  806e74:	1080201c 	xori	r2,r2,128
  806e78:	10bfe004 	addi	r2,r2,-128
  806e7c:	1004c03a 	cmpne	r2,r2,zero
  806e80:	10004c1e 	bne	r2,zero,806fb4 <fs_findFile+0x1c0>
			return(2);
  806e84:	00800084 	movi	r2,2
  806e88:	e0bfff15 	stw	r2,-4(fp)
  806e8c:	00006306 	br	80701c <fs_findFile+0x228>
		}
	}else{
		fccd = fs->FirstClusterCurrentDir;
  806e90:	e0bffb17 	ldw	r2,-20(fp)
  806e94:	10800c17 	ldw	r2,48(r2)
  806e98:	e0bff715 	stw	r2,-36(fp)
		if(lastDir)*lastDir=fccd;
  806e9c:	e0bffe17 	ldw	r2,-8(fp)
  806ea0:	1005003a 	cmpeq	r2,r2,zero
  806ea4:	1000431e 	bne	r2,zero,806fb4 <fs_findFile+0x1c0>
  806ea8:	e0fffe17 	ldw	r3,-8(fp)
  806eac:	e0bff717 	ldw	r2,-36(fp)
  806eb0:	18800015 	stw	r2,0(r3)
	}
	
	
	while((next=file_normalToFatName(filename,ffname))!=0){
  806eb4:	00003f06 	br	806fb4 <fs_findFile+0x1c0>
		if((tmpclus=dir_findinDir(fs,ffname,fccd,loc,DIRFIND_FILE))==0){
  806eb8:	e17ff804 	addi	r5,fp,-32
  806ebc:	d8000015 	stw	zero,0(sp)
  806ec0:	e13ffb17 	ldw	r4,-20(fp)
  806ec4:	e1bff717 	ldw	r6,-36(fp)
  806ec8:	e1fffd17 	ldw	r7,-12(fp)
  806ecc:	08033f00 	call	8033f0 <dir_findinDir>
  806ed0:	e0bff615 	stw	r2,-40(fp)
  806ed4:	e0bff617 	ldw	r2,-40(fp)
  806ed8:	1004c03a 	cmpne	r2,r2,zero
  806edc:	10000c1e 	bne	r2,zero,806f10 <fs_findFile+0x11c>
			/* We didn't find what we wanted */
			/* We should check, to see if there is more after it, so that
			 * we can invalidate lastDir
			 */
			if((file_normalToFatName(next,ffname))!=0){
  806ee0:	e17ff804 	addi	r5,fp,-32
  806ee4:	e13ff517 	ldw	r4,-44(fp)
  806ee8:	0805f300 	call	805f30 <file_normalToFatName>
  806eec:	1005003a 	cmpeq	r2,r2,zero
  806ef0:	1000051e 	bne	r2,zero,806f08 <fs_findFile+0x114>
				if(lastDir)*lastDir=0;
  806ef4:	e0bffe17 	ldw	r2,-8(fp)
  806ef8:	1005003a 	cmpeq	r2,r2,zero
  806efc:	1000021e 	bne	r2,zero,806f08 <fs_findFile+0x114>
  806f00:	e0bffe17 	ldw	r2,-8(fp)
  806f04:	10000015 	stw	zero,0(r2)
			}			 
			return(0);
  806f08:	e03fff15 	stw	zero,-4(fp)
  806f0c:	00004306 	br	80701c <fs_findFile+0x228>
		}
		it++;
  806f10:	e0bff443 	ldbu	r2,-47(fp)
  806f14:	10800044 	addi	r2,r2,1
  806f18:	e0bff445 	stb	r2,-47(fp)
		if(loc->attrib&ATTR_DIRECTORY){
  806f1c:	e0bffd17 	ldw	r2,-12(fp)
  806f20:	10800143 	ldbu	r2,5(r2)
  806f24:	10803fcc 	andi	r2,r2,255
  806f28:	1080040c 	andi	r2,r2,16
  806f2c:	1005003a 	cmpeq	r2,r2,zero
  806f30:	1000101e 	bne	r2,zero,806f74 <fs_findFile+0x180>
			fccd = tmpclus;
  806f34:	e0bff617 	ldw	r2,-40(fp)
  806f38:	e0bff715 	stw	r2,-36(fp)
			filename = next;
  806f3c:	e0bff517 	ldw	r2,-44(fp)
  806f40:	e0bffc15 	stw	r2,-16(fp)
			if(lastDir)*lastDir=fccd;
  806f44:	e0bffe17 	ldw	r2,-8(fp)
  806f48:	1005003a 	cmpeq	r2,r2,zero
  806f4c:	1000031e 	bne	r2,zero,806f5c <fs_findFile+0x168>
  806f50:	e0fffe17 	ldw	r3,-8(fp)
  806f54:	e0bff717 	ldw	r2,-36(fp)
  806f58:	18800015 	stw	r2,0(r3)
			if(filefound)*lastDir=0;
  806f5c:	e0bff407 	ldb	r2,-48(fp)
  806f60:	1005003a 	cmpeq	r2,r2,zero
  806f64:	1000131e 	bne	r2,zero,806fb4 <fs_findFile+0x1c0>
  806f68:	e0bffe17 	ldw	r2,-8(fp)
  806f6c:	10000015 	stw	zero,0(r2)
  806f70:	00001006 	br	806fb4 <fs_findFile+0x1c0>
		}else{
			filefound=1;
  806f74:	00800044 	movi	r2,1
  806f78:	e0bff405 	stb	r2,-48(fp)
			if((file_normalToFatName(next,ffname))!=0){
  806f7c:	e17ff804 	addi	r5,fp,-32
  806f80:	e13ff517 	ldw	r4,-44(fp)
  806f84:	0805f300 	call	805f30 <file_normalToFatName>
  806f88:	1005003a 	cmpeq	r2,r2,zero
  806f8c:	1000071e 	bne	r2,zero,806fac <fs_findFile+0x1b8>
				if(lastDir)*lastDir=0;
  806f90:	e0bffe17 	ldw	r2,-8(fp)
  806f94:	1005003a 	cmpeq	r2,r2,zero
  806f98:	1000021e 	bne	r2,zero,806fa4 <fs_findFile+0x1b0>
  806f9c:	e0bffe17 	ldw	r2,-8(fp)
  806fa0:	10000015 	stw	zero,0(r2)
				return(0);
  806fa4:	e03fff15 	stw	zero,-4(fp)
  806fa8:	00001c06 	br	80701c <fs_findFile+0x228>
			}else{
				filename=next;	
  806fac:	e0bff517 	ldw	r2,-44(fp)
  806fb0:	e0bffc15 	stw	r2,-16(fp)
		fccd = fs->FirstClusterCurrentDir;
		if(lastDir)*lastDir=fccd;
	}
	
	
	while((next=file_normalToFatName(filename,ffname))!=0){
  806fb4:	e17ff804 	addi	r5,fp,-32
  806fb8:	e13ffc17 	ldw	r4,-16(fp)
  806fbc:	0805f300 	call	805f30 <file_normalToFatName>
  806fc0:	e0bff515 	stw	r2,-44(fp)
  806fc4:	e0bff517 	ldw	r2,-44(fp)
  806fc8:	1004c03a 	cmpne	r2,r2,zero
  806fcc:	103fba1e 	bne	r2,zero,806eb8 <fs_findFile+0xc4>
				filename=next;	
			}
		}
	}
	
	if(it==0)return(0);
  806fd0:	e0bff447 	ldb	r2,-47(fp)
  806fd4:	1004c03a 	cmpne	r2,r2,zero
  806fd8:	1000021e 	bne	r2,zero,806fe4 <fs_findFile+0x1f0>
  806fdc:	e03fff15 	stw	zero,-4(fp)
  806fe0:	00000e06 	br	80701c <fs_findFile+0x228>
	if(loc->attrib&ATTR_DIRECTORY || !filefound)return(2);
  806fe4:	e0bffd17 	ldw	r2,-12(fp)
  806fe8:	10800143 	ldbu	r2,5(r2)
  806fec:	10803fcc 	andi	r2,r2,255
  806ff0:	1080040c 	andi	r2,r2,16
  806ff4:	1004c03a 	cmpne	r2,r2,zero
  806ff8:	1000031e 	bne	r2,zero,807008 <fs_findFile+0x214>
  806ffc:	e0bff407 	ldb	r2,-48(fp)
  807000:	1004c03a 	cmpne	r2,r2,zero
  807004:	1000031e 	bne	r2,zero,807014 <fs_findFile+0x220>
  807008:	00800084 	movi	r2,2
  80700c:	e0bfff15 	stw	r2,-4(fp)
  807010:	00000206 	br	80701c <fs_findFile+0x228>
	return(1);
  807014:	00800044 	movi	r2,1
  807018:	e0bfff15 	stw	r2,-4(fp)
  80701c:	e0bfff17 	ldw	r2,-4(fp)
}
  807020:	e037883a 	mov	sp,fp
  807024:	dfc00117 	ldw	ra,4(sp)
  807028:	df000017 	ldw	fp,0(sp)
  80702c:	dec00204 	addi	sp,sp,8
  807030:	f800283a 	ret

00807034 <fs_findFreeFile>:
/*****************************************************************************/

esint16 fs_findFreeFile(FileSystem *fs,eint8* filename,FileLocation *loc,euint8 mode)
{
  807034:	defff404 	addi	sp,sp,-48
  807038:	dfc00b15 	stw	ra,44(sp)
  80703c:	df000a15 	stw	fp,40(sp)
  807040:	df000a04 	addi	fp,sp,40
  807044:	e13ffb15 	stw	r4,-20(fp)
  807048:	e17ffc15 	stw	r5,-16(fp)
  80704c:	e1bffd15 	stw	r6,-12(fp)
  807050:	e1fffe05 	stb	r7,-8(fp)
	euint32 targetdir=0;
  807054:	e03ff715 	stw	zero,-36(fp)
	eint8 ffname[11];
	
	if(fs_findFile(fs,filename,loc,&targetdir))return(0);
  807058:	e13ffb17 	ldw	r4,-20(fp)
  80705c:	e17ffc17 	ldw	r5,-16(fp)
  807060:	e1bffd17 	ldw	r6,-12(fp)
  807064:	e1fff704 	addi	r7,fp,-36
  807068:	0806df40 	call	806df4 <fs_findFile>
  80706c:	10803fcc 	andi	r2,r2,255
  807070:	1080201c 	xori	r2,r2,128
  807074:	10bfe004 	addi	r2,r2,-128
  807078:	1005003a 	cmpeq	r2,r2,zero
  80707c:	1000021e 	bne	r2,zero,807088 <fs_findFreeFile+0x54>
  807080:	e03fff15 	stw	zero,-4(fp)
  807084:	00002d06 	br	80713c <fs_findFreeFile+0x108>
	if(!dir_getFatFileName(filename,ffname))return(0);
  807088:	e17ff804 	addi	r5,fp,-32
  80708c:	e13ffc17 	ldw	r4,-16(fp)
  807090:	080362c0 	call	80362c <dir_getFatFileName>
  807094:	10803fcc 	andi	r2,r2,255
  807098:	1080201c 	xori	r2,r2,128
  80709c:	10bfe004 	addi	r2,r2,-128
  8070a0:	1004c03a 	cmpne	r2,r2,zero
  8070a4:	1000021e 	bne	r2,zero,8070b0 <fs_findFreeFile+0x7c>
  8070a8:	e03fff15 	stw	zero,-4(fp)
  8070ac:	00002306 	br	80713c <fs_findFreeFile+0x108>
	if(dir_findinDir(fs,ffname,targetdir,loc,DIRFIND_FREE)){
  8070b0:	e1bff717 	ldw	r6,-36(fp)
  8070b4:	e17ff804 	addi	r5,fp,-32
  8070b8:	00800044 	movi	r2,1
  8070bc:	d8800015 	stw	r2,0(sp)
  8070c0:	e13ffb17 	ldw	r4,-20(fp)
  8070c4:	e1fffd17 	ldw	r7,-12(fp)
  8070c8:	08033f00 	call	8033f0 <dir_findinDir>
  8070cc:	1005003a 	cmpeq	r2,r2,zero
  8070d0:	1000031e 	bne	r2,zero,8070e0 <fs_findFreeFile+0xac>
		return(1);
  8070d4:	00800044 	movi	r2,1
  8070d8:	e0bfff15 	stw	r2,-4(fp)
  8070dc:	00001706 	br	80713c <fs_findFreeFile+0x108>
	}else{
		if(dir_addCluster(fs,targetdir)){
  8070e0:	e17ff717 	ldw	r5,-36(fp)
  8070e4:	e13ffb17 	ldw	r4,-20(fp)
  8070e8:	08037000 	call	803700 <dir_addCluster>
  8070ec:	10803fcc 	andi	r2,r2,255
  8070f0:	1080201c 	xori	r2,r2,128
  8070f4:	10bfe004 	addi	r2,r2,-128
  8070f8:	1005003a 	cmpeq	r2,r2,zero
  8070fc:	1000021e 	bne	r2,zero,807108 <fs_findFreeFile+0xd4>
			return(0);
  807100:	e03fff15 	stw	zero,-4(fp)
  807104:	00000d06 	br	80713c <fs_findFreeFile+0x108>
		}else{
			if(dir_findinDir(fs,ffname,targetdir,loc,DIRFIND_FREE)){
  807108:	e1bff717 	ldw	r6,-36(fp)
  80710c:	e17ff804 	addi	r5,fp,-32
  807110:	00800044 	movi	r2,1
  807114:	d8800015 	stw	r2,0(sp)
  807118:	e13ffb17 	ldw	r4,-20(fp)
  80711c:	e1fffd17 	ldw	r7,-12(fp)
  807120:	08033f00 	call	8033f0 <dir_findinDir>
  807124:	1005003a 	cmpeq	r2,r2,zero
  807128:	1000031e 	bne	r2,zero,807138 <fs_findFreeFile+0x104>
				return(1);
  80712c:	00800044 	movi	r2,1
  807130:	e0bfff15 	stw	r2,-4(fp)
  807134:	00000106 	br	80713c <fs_findFreeFile+0x108>
			}
		}
	}
		
	return(0);
  807138:	e03fff15 	stw	zero,-4(fp)
  80713c:	e0bfff17 	ldw	r2,-4(fp)
}
  807140:	e037883a 	mov	sp,fp
  807144:	dfc00117 	ldw	ra,4(sp)
  807148:	df000017 	ldw	fp,0(sp)
  80714c:	dec00204 	addi	sp,sp,8
  807150:	f800283a 	ret

00807154 <fs_getLastCluster>:
 * euint32 fs_getLastCluster(FileSystem *fs,ClusterChain *Cache)
 * Description: This function searches the last cluster of a chain.
 * Return value: The LastCluster (also stored in cache);
*/
euint32 fs_getLastCluster(FileSystem *fs,ClusterChain *Cache)
{
  807154:	defffc04 	addi	sp,sp,-16
  807158:	dfc00315 	stw	ra,12(sp)
  80715c:	df000215 	stw	fp,8(sp)
  807160:	df000204 	addi	fp,sp,8
  807164:	e13ffe15 	stw	r4,-8(fp)
  807168:	e17fff15 	stw	r5,-4(fp)
	if(Cache->DiscCluster==0){
  80716c:	e0bfff17 	ldw	r2,-4(fp)
  807170:	10800217 	ldw	r2,8(r2)
  807174:	1004c03a 	cmpne	r2,r2,zero
  807178:	1000061e 	bne	r2,zero,807194 <fs_getLastCluster+0x40>
		Cache->DiscCluster=Cache->FirstCluster;
  80717c:	e0bfff17 	ldw	r2,-4(fp)
  807180:	10c00317 	ldw	r3,12(r2)
  807184:	e0bfff17 	ldw	r2,-4(fp)
  807188:	10c00215 	stw	r3,8(r2)
		Cache->LogicCluster=0;
  80718c:	e0bfff17 	ldw	r2,-4(fp)
  807190:	10000115 	stw	zero,4(r2)
	}
	
	if(Cache->LastCluster==0)
  807194:	e0bfff17 	ldw	r2,-4(fp)
  807198:	10800417 	ldw	r2,16(r2)
  80719c:	1004c03a 	cmpne	r2,r2,zero
  8071a0:	10001b1e 	bne	r2,zero,807210 <fs_getLastCluster+0xbc>
	{
		while(fat_getNextClusterChain(fs, Cache)==0)
  8071a4:	00001206 	br	8071f0 <fs_getLastCluster+0x9c>
		{
			Cache->LogicCluster+=Cache->Linear;
  8071a8:	e0bfff17 	ldw	r2,-4(fp)
  8071ac:	10c00117 	ldw	r3,4(r2)
  8071b0:	e0bfff17 	ldw	r2,-4(fp)
  8071b4:	10800003 	ldbu	r2,0(r2)
  8071b8:	10803fcc 	andi	r2,r2,255
  8071bc:	1887883a 	add	r3,r3,r2
  8071c0:	e0bfff17 	ldw	r2,-4(fp)
  8071c4:	10c00115 	stw	r3,4(r2)
			Cache->DiscCluster+=Cache->Linear;
  8071c8:	e0bfff17 	ldw	r2,-4(fp)
  8071cc:	10c00217 	ldw	r3,8(r2)
  8071d0:	e0bfff17 	ldw	r2,-4(fp)
  8071d4:	10800003 	ldbu	r2,0(r2)
  8071d8:	10803fcc 	andi	r2,r2,255
  8071dc:	1887883a 	add	r3,r3,r2
  8071e0:	e0bfff17 	ldw	r2,-4(fp)
  8071e4:	10c00215 	stw	r3,8(r2)
			Cache->Linear=0;
  8071e8:	e0bfff17 	ldw	r2,-4(fp)
  8071ec:	10000005 	stb	zero,0(r2)
		Cache->LogicCluster=0;
	}
	
	if(Cache->LastCluster==0)
	{
		while(fat_getNextClusterChain(fs, Cache)==0)
  8071f0:	e13ffe17 	ldw	r4,-8(fp)
  8071f4:	e17fff17 	ldw	r5,-4(fp)
  8071f8:	080499c0 	call	80499c <fat_getNextClusterChain>
  8071fc:	10bfffcc 	andi	r2,r2,65535
  807200:	10a0001c 	xori	r2,r2,32768
  807204:	10a00004 	addi	r2,r2,-32768
  807208:	1005003a 	cmpeq	r2,r2,zero
  80720c:	103fe61e 	bne	r2,zero,8071a8 <fs_getLastCluster+0x54>
			Cache->LogicCluster+=Cache->Linear;
			Cache->DiscCluster+=Cache->Linear;
			Cache->Linear=0;
		}
	}
	return(Cache->LastCluster);
  807210:	e0bfff17 	ldw	r2,-4(fp)
  807214:	10800417 	ldw	r2,16(r2)
}
  807218:	e037883a 	mov	sp,fp
  80721c:	dfc00117 	ldw	ra,4(sp)
  807220:	df000017 	ldw	fp,0(sp)
  807224:	dec00204 	addi	sp,sp,8
  807228:	f800283a 	ret

0080722c <fs_getFirstClusterRootDir>:
/*****************************************************************************/

euint32 fs_getFirstClusterRootDir(FileSystem *fs)
{
  80722c:	defffd04 	addi	sp,sp,-12
  807230:	df000215 	stw	fp,8(sp)
  807234:	df000204 	addi	fp,sp,8
  807238:	e13ffe15 	stw	r4,-8(fp)
	switch(fs->type){
  80723c:	e0bffe17 	ldw	r2,-8(fp)
  807240:	10800f03 	ldbu	r2,60(r2)
  807244:	10803fcc 	andi	r2,r2,255
  807248:	108000e0 	cmpeqi	r2,r2,3
  80724c:	1000011e 	bne	r2,zero,807254 <fs_getFirstClusterRootDir+0x28>
  807250:	00000406 	br	807264 <fs_getFirstClusterRootDir+0x38>
		case FAT32:
			return(fs->volumeId.RootCluster);
  807254:	e0bffe17 	ldw	r2,-8(fp)
  807258:	10800717 	ldw	r2,28(r2)
  80725c:	e0bfff15 	stw	r2,-4(fp)
  807260:	00000206 	br	80726c <fs_getFirstClusterRootDir+0x40>
			break;
		default:
				return(1);
  807264:	00800044 	movi	r2,1
  807268:	e0bfff15 	stw	r2,-4(fp)
  80726c:	e0bfff17 	ldw	r2,-4(fp)
				break;
	}
}
  807270:	e037883a 	mov	sp,fp
  807274:	df000017 	ldw	fp,0(sp)
  807278:	dec00104 	addi	sp,sp,4
  80727c:	f800283a 	ret

00807280 <fs_initClusterChain>:
/*****************************************************************************/

void fs_initClusterChain(FileSystem *fs,ClusterChain *cache,euint32 cluster_addr)
{
  807280:	defffc04 	addi	sp,sp,-16
  807284:	df000315 	stw	fp,12(sp)
  807288:	df000304 	addi	fp,sp,12
  80728c:	e13ffd15 	stw	r4,-12(fp)
  807290:	e17ffe15 	stw	r5,-8(fp)
  807294:	e1bfff15 	stw	r6,-4(fp)
	cache->FirstCluster=cluster_addr;
  807298:	e0fffe17 	ldw	r3,-8(fp)
  80729c:	e0bfff17 	ldw	r2,-4(fp)
  8072a0:	18800315 	stw	r2,12(r3)
	cache->DiscCluster=cluster_addr;
  8072a4:	e0fffe17 	ldw	r3,-8(fp)
  8072a8:	e0bfff17 	ldw	r2,-4(fp)
  8072ac:	18800215 	stw	r2,8(r3)
	cache->LogicCluster=0;
  8072b0:	e0bffe17 	ldw	r2,-8(fp)
  8072b4:	10000115 	stw	zero,4(r2)
	cache->LastCluster=0; /* Warning flag here */
  8072b8:	e0bffe17 	ldw	r2,-8(fp)
  8072bc:	10000415 	stw	zero,16(r2)
	cache->Linear=0;
  8072c0:	e0bffe17 	ldw	r2,-8(fp)
  8072c4:	10000005 	stb	zero,0(r2)
	cache->ClusterCount=0; /* 0 means NOT known */
  8072c8:	e0bffe17 	ldw	r2,-8(fp)
  8072cc:	10000515 	stw	zero,20(r2)
}
  8072d0:	e037883a 	mov	sp,fp
  8072d4:	df000017 	ldw	fp,0(sp)
  8072d8:	dec00104 	addi	sp,sp,4
  8072dc:	f800283a 	ret

008072e0 <fs_setFirstClusterInDirEntry>:
/*****************************************************************************/

void fs_setFirstClusterInDirEntry(FileRecord *rec,euint32 cluster_addr)
{
  8072e0:	defffd04 	addi	sp,sp,-12
  8072e4:	df000215 	stw	fp,8(sp)
  8072e8:	df000204 	addi	fp,sp,8
  8072ec:	e13ffe15 	stw	r4,-8(fp)
  8072f0:	e17fff15 	stw	r5,-4(fp)
	rec->FirstClusterHigh=cluster_addr>>16;
  8072f4:	e0bfff17 	ldw	r2,-4(fp)
  8072f8:	1004d43a 	srli	r2,r2,16
  8072fc:	1007883a 	mov	r3,r2
  807300:	e0bffe17 	ldw	r2,-8(fp)
  807304:	10c0050d 	sth	r3,20(r2)
	rec->FirstClusterLow=cluster_addr&0xFFFF;
  807308:	e0bfff17 	ldw	r2,-4(fp)
  80730c:	1007883a 	mov	r3,r2
  807310:	e0bffe17 	ldw	r2,-8(fp)
  807314:	10c0068d 	sth	r3,26(r2)
}
  807318:	e037883a 	mov	sp,fp
  80731c:	df000017 	ldw	fp,0(sp)
  807320:	dec00104 	addi	sp,sp,4
  807324:	f800283a 	ret

00807328 <fs_flushFs>:
/*****************************************************************************/

esint8 fs_flushFs(FileSystem *fs)
{
  807328:	defffd04 	addi	sp,sp,-12
  80732c:	dfc00215 	stw	ra,8(sp)
  807330:	df000115 	stw	fp,4(sp)
  807334:	df000104 	addi	fp,sp,4
  807338:	e13fff15 	stw	r4,-4(fp)
	return(part_flushPart(fs->part,0,fs->SectorCount));
  80733c:	e0bfff17 	ldw	r2,-4(fp)
  807340:	11000017 	ldw	r4,0(r2)
  807344:	e0bfff17 	ldw	r2,-4(fp)
  807348:	11800a17 	ldw	r6,40(r2)
  80734c:	000b883a 	mov	r5,zero
  807350:	080a6900 	call	80a690 <part_flushPart>
  807354:	10803fcc 	andi	r2,r2,255
  807358:	1080201c 	xori	r2,r2,128
  80735c:	10bfe004 	addi	r2,r2,-128
}
  807360:	e037883a 	mov	sp,fp
  807364:	dfc00117 	ldw	ra,4(sp)
  807368:	df000017 	ldw	fp,0(sp)
  80736c:	dec00204 	addi	sp,sp,8
  807370:	f800283a 	ret

00807374 <fs_umount>:
/*****************************************************************************/

esint8 fs_umount(FileSystem *fs)
{
  807374:	defffd04 	addi	sp,sp,-12
  807378:	dfc00215 	stw	ra,8(sp)
  80737c:	df000115 	stw	fp,4(sp)
  807380:	df000104 	addi	fp,sp,4
  807384:	e13fff15 	stw	r4,-4(fp)
	return(fs_flushFs(fs));
  807388:	e13fff17 	ldw	r4,-4(fp)
  80738c:	08073280 	call	807328 <fs_flushFs>
  807390:	10803fcc 	andi	r2,r2,255
  807394:	1080201c 	xori	r2,r2,128
  807398:	10bfe004 	addi	r2,r2,-128
}
  80739c:	e037883a 	mov	sp,fp
  8073a0:	dfc00117 	ldw	ra,4(sp)
  8073a4:	df000017 	ldw	fp,0(sp)
  8073a8:	dec00204 	addi	sp,sp,8
  8073ac:	f800283a 	ret

008073b0 <fs_clearCluster>:
/*****************************************************************************/

esint8 fs_clearCluster(FileSystem *fs,euint32 cluster)
{
  8073b0:	defff904 	addi	sp,sp,-28
  8073b4:	dfc00615 	stw	ra,24(sp)
  8073b8:	df000515 	stw	fp,20(sp)
  8073bc:	dc000415 	stw	r16,16(sp)
  8073c0:	df000404 	addi	fp,sp,16
  8073c4:	e13ffe15 	stw	r4,-8(fp)
  8073c8:	e17fff15 	stw	r5,-4(fp)
	euint16 c;
	euint8* buf;
	
	for(c=0;c<(fs->volumeId.SectorsPerCluster);c++){
  8073cc:	e03ffd0d 	sth	zero,-12(fp)
  8073d0:	00001606 	br	80742c <fs_clearCluster+0x7c>
		buf = part_getSect(fs->part,fs_clusterToSector(fs,cluster)+c,IOM_MODE_READWRITE);
  8073d4:	e0bffe17 	ldw	r2,-8(fp)
  8073d8:	14000017 	ldw	r16,0(r2)
  8073dc:	e13ffe17 	ldw	r4,-8(fp)
  8073e0:	e17fff17 	ldw	r5,-4(fp)
  8073e4:	0806b880 	call	806b88 <fs_clusterToSector>
  8073e8:	1007883a 	mov	r3,r2
  8073ec:	e0bffd0b 	ldhu	r2,-12(fp)
  8073f0:	188b883a 	add	r5,r3,r2
  8073f4:	8009883a 	mov	r4,r16
  8073f8:	01800084 	movi	r6,2
  8073fc:	080a5e40 	call	80a5e4 <part_getSect>
  807400:	e0bffc15 	stw	r2,-16(fp)
		memClr(buf,512);
  807404:	e13ffc17 	ldw	r4,-16(fp)
  807408:	01408004 	movi	r5,512
  80740c:	080a8f00 	call	80a8f0 <memClr>
		part_relSect(fs->part,buf);
  807410:	e0bffe17 	ldw	r2,-8(fp)
  807414:	11000017 	ldw	r4,0(r2)
  807418:	e17ffc17 	ldw	r5,-16(fp)
  80741c:	080a6440 	call	80a644 <part_relSect>
esint8 fs_clearCluster(FileSystem *fs,euint32 cluster)
{
	euint16 c;
	euint8* buf;
	
	for(c=0;c<(fs->volumeId.SectorsPerCluster);c++){
  807420:	e0bffd0b 	ldhu	r2,-12(fp)
  807424:	10800044 	addi	r2,r2,1
  807428:	e0bffd0d 	sth	r2,-12(fp)
  80742c:	e0bffe17 	ldw	r2,-8(fp)
  807430:	10800183 	ldbu	r2,6(r2)
  807434:	10803fcc 	andi	r2,r2,255
  807438:	10ffffcc 	andi	r3,r2,65535
  80743c:	e0bffd0b 	ldhu	r2,-12(fp)
  807440:	10ffe436 	bltu	r2,r3,8073d4 <fs_clearCluster+0x24>
		buf = part_getSect(fs->part,fs_clusterToSector(fs,cluster)+c,IOM_MODE_READWRITE);
		memClr(buf,512);
		part_relSect(fs->part,buf);
	}
	return(0);
  807444:	0005883a 	mov	r2,zero
}
  807448:	e037883a 	mov	sp,fp
  80744c:	dfc00217 	ldw	ra,8(sp)
  807450:	df000117 	ldw	fp,4(sp)
  807454:	dc000017 	ldw	r16,0(sp)
  807458:	dec00304 	addi	sp,sp,12
  80745c:	f800283a 	ret

00807460 <fs_getFsInfo>:

esint8 fs_getFsInfo(FileSystem *fs,euint8 force_update)
{
  807460:	defffa04 	addi	sp,sp,-24
  807464:	dfc00515 	stw	ra,20(sp)
  807468:	df000415 	stw	fp,16(sp)
  80746c:	df000404 	addi	fp,sp,16
  807470:	e13ffd15 	stw	r4,-12(fp)
  807474:	e17ffe05 	stb	r5,-8(fp)
	euint8 *buf;
		
 	if(!fs->type==FAT32)return(0);
	buf = part_getSect(fs->part,FS_INFO_SECTOR,IOM_MODE_READONLY);
  807478:	e0bffd17 	ldw	r2,-12(fp)
  80747c:	11000017 	ldw	r4,0(r2)
  807480:	01400044 	movi	r5,1
  807484:	01800044 	movi	r6,1
  807488:	080a5e40 	call	80a5e4 <part_getSect>
  80748c:	e0bffc15 	stw	r2,-16(fp)
	if(ex_getb32(buf,0)!=FSINFO_MAGIC_BEGIN || ex_getb32(buf,508)!=FSINFO_MAGIC_END){
  807490:	e13ffc17 	ldw	r4,-16(fp)
  807494:	000b883a 	mov	r5,zero
  807498:	08039fc0 	call	8039fc <ex_getb32>
  80749c:	1007883a 	mov	r3,r2
  8074a0:	00905874 	movhi	r2,16737
  8074a4:	10949484 	addi	r2,r2,21074
  8074a8:	1880061e 	bne	r3,r2,8074c4 <fs_getFsInfo+0x64>
  8074ac:	e13ffc17 	ldw	r4,-16(fp)
  8074b0:	01407f04 	movi	r5,508
  8074b4:	08039fc0 	call	8039fc <ex_getb32>
  8074b8:	1007883a 	mov	r3,r2
  8074bc:	00aa9574 	movhi	r2,43605
  8074c0:	18800726 	beq	r3,r2,8074e0 <fs_getFsInfo+0x80>
		part_relSect(fs->part,buf);
  8074c4:	e0bffd17 	ldw	r2,-12(fp)
  8074c8:	11000017 	ldw	r4,0(r2)
  8074cc:	e17ffc17 	ldw	r5,-16(fp)
  8074d0:	080a6440 	call	80a644 <part_relSect>
		return(-1);
  8074d4:	00bfffc4 	movi	r2,-1
  8074d8:	e0bfff15 	stw	r2,-4(fp)
  8074dc:	00001906 	br	807544 <fs_getFsInfo+0xe4>
	}
	fs->FreeClusterCount = ex_getb32(buf,488);
  8074e0:	e13ffc17 	ldw	r4,-16(fp)
  8074e4:	01407a04 	movi	r5,488
  8074e8:	08039fc0 	call	8039fc <ex_getb32>
  8074ec:	1007883a 	mov	r3,r2
  8074f0:	e0bffd17 	ldw	r2,-12(fp)
  8074f4:	10c00d15 	stw	r3,52(r2)
	fs->NextFreeCluster  = ex_getb32(buf,492);
  8074f8:	e13ffc17 	ldw	r4,-16(fp)
  8074fc:	01407b04 	movi	r5,492
  807500:	08039fc0 	call	8039fc <ex_getb32>
  807504:	1007883a 	mov	r3,r2
  807508:	e0bffd17 	ldw	r2,-12(fp)
  80750c:	10c00e15 	stw	r3,56(r2)
	part_relSect(fs->part,buf);
  807510:	e0bffd17 	ldw	r2,-12(fp)
  807514:	11000017 	ldw	r4,0(r2)
  807518:	e17ffc17 	ldw	r5,-16(fp)
  80751c:	080a6440 	call	80a644 <part_relSect>
	if(force_update){
  807520:	e0bffe03 	ldbu	r2,-8(fp)
  807524:	1005003a 	cmpeq	r2,r2,zero
  807528:	1000051e 	bne	r2,zero,807540 <fs_getFsInfo+0xe0>
		fs->FreeClusterCount=fat_countFreeClusters(fs);
  80752c:	e13ffd17 	ldw	r4,-12(fp)
  807530:	08051740 	call	805174 <fat_countFreeClusters>
  807534:	1007883a 	mov	r3,r2
  807538:	e0bffd17 	ldw	r2,-12(fp)
  80753c:	10c00d15 	stw	r3,52(r2)
	}
	return(0);
  807540:	e03fff15 	stw	zero,-4(fp)
  807544:	e0bfff17 	ldw	r2,-4(fp)
}
  807548:	e037883a 	mov	sp,fp
  80754c:	dfc00117 	ldw	ra,4(sp)
  807550:	df000017 	ldw	fp,0(sp)
  807554:	dec00204 	addi	sp,sp,8
  807558:	f800283a 	ret

0080755c <fs_setFsInfo>:

esint8 fs_setFsInfo(FileSystem *fs)
{
  80755c:	defffb04 	addi	sp,sp,-20
  807560:	dfc00415 	stw	ra,16(sp)
  807564:	df000315 	stw	fp,12(sp)
  807568:	df000304 	addi	fp,sp,12
  80756c:	e13ffe15 	stw	r4,-8(fp)
	euint8* buf;

	if(!fs->type==FAT32)return(0);
	buf = part_getSect(fs->part,FS_INFO_SECTOR,IOM_MODE_READWRITE);
  807570:	e0bffe17 	ldw	r2,-8(fp)
  807574:	11000017 	ldw	r4,0(r2)
  807578:	01400044 	movi	r5,1
  80757c:	01800084 	movi	r6,2
  807580:	080a5e40 	call	80a5e4 <part_getSect>
  807584:	e0bffd15 	stw	r2,-12(fp)
	if(ex_getb32(buf,0)!=FSINFO_MAGIC_BEGIN || ex_getb32(buf,508)!=FSINFO_MAGIC_END){
  807588:	e13ffd17 	ldw	r4,-12(fp)
  80758c:	000b883a 	mov	r5,zero
  807590:	08039fc0 	call	8039fc <ex_getb32>
  807594:	1007883a 	mov	r3,r2
  807598:	00905874 	movhi	r2,16737
  80759c:	10949484 	addi	r2,r2,21074
  8075a0:	1880061e 	bne	r3,r2,8075bc <fs_setFsInfo+0x60>
  8075a4:	e13ffd17 	ldw	r4,-12(fp)
  8075a8:	01407f04 	movi	r5,508
  8075ac:	08039fc0 	call	8039fc <ex_getb32>
  8075b0:	1007883a 	mov	r3,r2
  8075b4:	00aa9574 	movhi	r2,43605
  8075b8:	18800726 	beq	r3,r2,8075d8 <fs_setFsInfo+0x7c>
		part_relSect(fs->part,buf);
  8075bc:	e0bffe17 	ldw	r2,-8(fp)
  8075c0:	11000017 	ldw	r4,0(r2)
  8075c4:	e17ffd17 	ldw	r5,-12(fp)
  8075c8:	080a6440 	call	80a644 <part_relSect>
		return(-1);
  8075cc:	00bfffc4 	movi	r2,-1
  8075d0:	e0bfff15 	stw	r2,-4(fp)
  8075d4:	00000f06 	br	807614 <fs_setFsInfo+0xb8>
	}
	ex_setb32(buf,488,fs->FreeClusterCount);
  8075d8:	e0bffe17 	ldw	r2,-8(fp)
  8075dc:	11800d17 	ldw	r6,52(r2)
  8075e0:	e13ffd17 	ldw	r4,-12(fp)
  8075e4:	01407a04 	movi	r5,488
  8075e8:	0803aec0 	call	803aec <ex_setb32>
	ex_setb32(buf,492,fs->NextFreeCluster);
  8075ec:	e0bffe17 	ldw	r2,-8(fp)
  8075f0:	11800e17 	ldw	r6,56(r2)
  8075f4:	e13ffd17 	ldw	r4,-12(fp)
  8075f8:	01407b04 	movi	r5,492
  8075fc:	0803aec0 	call	803aec <ex_setb32>
	part_relSect(fs->part,buf);
  807600:	e0bffe17 	ldw	r2,-8(fp)
  807604:	11000017 	ldw	r4,0(r2)
  807608:	e17ffd17 	ldw	r5,-12(fp)
  80760c:	080a6440 	call	80a644 <part_relSect>
	return(0);
  807610:	e03fff15 	stw	zero,-4(fp)
  807614:	e0bfff17 	ldw	r2,-4(fp)
}
  807618:	e037883a 	mov	sp,fp
  80761c:	dfc00117 	ldw	ra,4(sp)
  807620:	df000017 	ldw	fp,0(sp)
  807624:	dec00204 	addi	sp,sp,8
  807628:	f800283a 	ret

0080762c <ioman_init>:
/*****************************************************************************/
#include "ioman.h"
/*****************************************************************************/

esint8 ioman_init(IOManager *ioman, hwInterface *iface, euint8* bufferarea)
{
  80762c:	defffb04 	addi	sp,sp,-20
  807630:	dfc00415 	stw	ra,16(sp)
  807634:	df000315 	stw	fp,12(sp)
  807638:	df000304 	addi	fp,sp,12
  80763c:	e13ffd15 	stw	r4,-12(fp)
  807640:	e17ffe15 	stw	r5,-8(fp)
  807644:	e1bfff15 	stw	r6,-4(fp)
    ioman->iface=iface;
  807648:	e0fffd17 	ldw	r3,-12(fp)
  80764c:	e0bffe17 	ldw	r2,-8(fp)
  807650:	18800015 	stw	r2,0(r3)
    
    ioman->bufptr = ioman_getBuffer(ioman,bufferarea);
  807654:	e13ffd17 	ldw	r4,-12(fp)
  807658:	e17fff17 	ldw	r5,-4(fp)
  80765c:	08078140 	call	807814 <ioman_getBuffer>
  807660:	1007883a 	mov	r3,r2
  807664:	e0bffd17 	ldw	r2,-12(fp)
  807668:	10c00115 	stw	r3,4(r2)
    ioman->numbuf = IOMAN_NUMBUFFER;
  80766c:	e0fffd17 	ldw	r3,-12(fp)
  807670:	00800104 	movi	r2,4
  807674:	1880020d 	sth	r2,8(r3)
    ioman->numit  = IOMAN_NUMITERATIONS;
  807678:	e0fffd17 	ldw	r3,-12(fp)
  80767c:	008000c4 	movi	r2,3
  807680:	1880028d 	sth	r2,10(r3)
    
    ioman_reset(ioman);
  807684:	e13ffd17 	ldw	r4,-12(fp)
  807688:	08076a40 	call	8076a4 <ioman_reset>
    return(0);
  80768c:	0005883a 	mov	r2,zero
}
  807690:	e037883a 	mov	sp,fp
  807694:	dfc00117 	ldw	ra,4(sp)
  807698:	df000017 	ldw	fp,0(sp)
  80769c:	dec00204 	addi	sp,sp,8
  8076a0:	f800283a 	ret

008076a4 <ioman_reset>:
/*****************************************************************************/

void ioman_reset(IOManager *ioman)
{
  8076a4:	defffc04 	addi	sp,sp,-16
  8076a8:	dfc00315 	stw	ra,12(sp)
  8076ac:	df000215 	stw	fp,8(sp)
  8076b0:	df000204 	addi	fp,sp,8
  8076b4:	e13fff15 	stw	r4,-4(fp)
    euint16 nb,ni;
    
    memClr(ioman->sector,sizeof(euint32)*ioman->numbuf);
  8076b8:	e0bfff17 	ldw	r2,-4(fp)
  8076bc:	11001c04 	addi	r4,r2,112
  8076c0:	e0bfff17 	ldw	r2,-4(fp)
  8076c4:	1080020b 	ldhu	r2,8(r2)
  8076c8:	10bfffcc 	andi	r2,r2,65535
  8076cc:	1085883a 	add	r2,r2,r2
  8076d0:	1085883a 	add	r2,r2,r2
  8076d4:	100b883a 	mov	r5,r2
  8076d8:	080a8f00 	call	80a8f0 <memClr>
    memClr(ioman->status,sizeof(euint8) *ioman->numbuf);
  8076dc:	e0bfff17 	ldw	r2,-4(fp)
  8076e0:	11002004 	addi	r4,r2,128
  8076e4:	e0bfff17 	ldw	r2,-4(fp)
  8076e8:	1080020b 	ldhu	r2,8(r2)
  8076ec:	117fffcc 	andi	r5,r2,65535
  8076f0:	080a8f00 	call	80a8f0 <memClr>
    memClr(ioman->usage ,sizeof(euint8) *ioman->numbuf);
  8076f4:	e0bfff17 	ldw	r2,-4(fp)
  8076f8:	11002104 	addi	r4,r2,132
  8076fc:	e0bfff17 	ldw	r2,-4(fp)
  807700:	1080020b 	ldhu	r2,8(r2)
  807704:	117fffcc 	andi	r5,r2,65535
  807708:	080a8f00 	call	80a8f0 <memClr>
    memClr(ioman->itptr ,sizeof(euint8) *ioman->numbuf);
  80770c:	e0bfff17 	ldw	r2,-4(fp)
  807710:	11002304 	addi	r4,r2,140
  807714:	e0bfff17 	ldw	r2,-4(fp)
  807718:	1080020b 	ldhu	r2,8(r2)
  80771c:	117fffcc 	andi	r5,r2,65535
  807720:	080a8f00 	call	80a8f0 <memClr>
    ioman_setError(ioman,IOMAN_NOERROR);
  807724:	e0bfff17 	ldw	r2,-4(fp)
  807728:	10000305 	stb	zero,12(r2)
        
    for(nb=0;nb<ioman->numbuf;nb++){
  80772c:	e03ffe8d 	sth	zero,-6(fp)
  807730:	00002e06 	br	8077ec <ioman_reset+0x148>
        for(ni=0;ni<ioman->numit;ni++){
  807734:	e03ffe0d 	sth	zero,-8(fp)
  807738:	00002406 	br	8077cc <ioman_reset+0x128>
            ioman->stack[nb][ni].sector=0;
  80773c:	e0fffe8b 	ldhu	r3,-6(fp)
  807740:	e13ffe0b 	ldhu	r4,-8(fp)
  807744:	e17fff17 	ldw	r5,-4(fp)
  807748:	1805883a 	mov	r2,r3
  80774c:	1085883a 	add	r2,r2,r2
  807750:	10c5883a 	add	r2,r2,r3
  807754:	1105883a 	add	r2,r2,r4
  807758:	100490fa 	slli	r2,r2,3
  80775c:	1145883a 	add	r2,r2,r5
  807760:	10800404 	addi	r2,r2,16
  807764:	10000015 	stw	zero,0(r2)
            ioman->stack[nb][ni].status=0;
  807768:	e0fffe8b 	ldhu	r3,-6(fp)
  80776c:	e13ffe0b 	ldhu	r4,-8(fp)
  807770:	e17fff17 	ldw	r5,-4(fp)
  807774:	1805883a 	mov	r2,r3
  807778:	1085883a 	add	r2,r2,r2
  80777c:	10c5883a 	add	r2,r2,r3
  807780:	1105883a 	add	r2,r2,r4
  807784:	100490fa 	slli	r2,r2,3
  807788:	1145883a 	add	r2,r2,r5
  80778c:	10800504 	addi	r2,r2,20
  807790:	10000005 	stb	zero,0(r2)
            ioman->stack[nb][ni].usage =0;
  807794:	e0fffe8b 	ldhu	r3,-6(fp)
  807798:	e13ffe0b 	ldhu	r4,-8(fp)
  80779c:	e17fff17 	ldw	r5,-4(fp)
  8077a0:	1805883a 	mov	r2,r3
  8077a4:	1085883a 	add	r2,r2,r2
  8077a8:	10c5883a 	add	r2,r2,r3
  8077ac:	1105883a 	add	r2,r2,r4
  8077b0:	100490fa 	slli	r2,r2,3
  8077b4:	1145883a 	add	r2,r2,r5
  8077b8:	10800504 	addi	r2,r2,20
  8077bc:	10000045 	stb	zero,1(r2)
    memClr(ioman->usage ,sizeof(euint8) *ioman->numbuf);
    memClr(ioman->itptr ,sizeof(euint8) *ioman->numbuf);
    ioman_setError(ioman,IOMAN_NOERROR);
        
    for(nb=0;nb<ioman->numbuf;nb++){
        for(ni=0;ni<ioman->numit;ni++){
  8077c0:	e0bffe0b 	ldhu	r2,-8(fp)
  8077c4:	10800044 	addi	r2,r2,1
  8077c8:	e0bffe0d 	sth	r2,-8(fp)
  8077cc:	e0bfff17 	ldw	r2,-4(fp)
  8077d0:	1080028b 	ldhu	r2,10(r2)
  8077d4:	10ffffcc 	andi	r3,r2,65535
  8077d8:	e0bffe0b 	ldhu	r2,-8(fp)
  8077dc:	10ffd736 	bltu	r2,r3,80773c <ioman_reset+0x98>
    memClr(ioman->status,sizeof(euint8) *ioman->numbuf);
    memClr(ioman->usage ,sizeof(euint8) *ioman->numbuf);
    memClr(ioman->itptr ,sizeof(euint8) *ioman->numbuf);
    ioman_setError(ioman,IOMAN_NOERROR);
        
    for(nb=0;nb<ioman->numbuf;nb++){
  8077e0:	e0bffe8b 	ldhu	r2,-6(fp)
  8077e4:	10800044 	addi	r2,r2,1
  8077e8:	e0bffe8d 	sth	r2,-6(fp)
  8077ec:	e0bfff17 	ldw	r2,-4(fp)
  8077f0:	1080020b 	ldhu	r2,8(r2)
  8077f4:	10ffffcc 	andi	r3,r2,65535
  8077f8:	e0bffe8b 	ldhu	r2,-6(fp)
  8077fc:	10ffcd36 	bltu	r2,r3,807734 <ioman_reset+0x90>
            ioman->stack[nb][ni].sector=0;
            ioman->stack[nb][ni].status=0;
            ioman->stack[nb][ni].usage =0;
        }
    }
}
  807800:	e037883a 	mov	sp,fp
  807804:	dfc00117 	ldw	ra,4(sp)
  807808:	df000017 	ldw	fp,0(sp)
  80780c:	dec00204 	addi	sp,sp,8
  807810:	f800283a 	ret

00807814 <ioman_getBuffer>:
/*****************************************************************************/

euint8* ioman_getBuffer(IOManager *ioman,euint8* bufferarea)
{
  807814:	defffd04 	addi	sp,sp,-12
  807818:	df000215 	stw	fp,8(sp)
  80781c:	df000204 	addi	fp,sp,8
  807820:	e13ffe15 	stw	r4,-8(fp)
  807824:	e17fff15 	stw	r5,-4(fp)
#ifdef IOMAN_DO_MEMALLOC
    return(ioman->cache_mem);
  807828:	e0bffe17 	ldw	r2,-8(fp)
  80782c:	10802404 	addi	r2,r2,144
#else
    return(bufferarea);
#endif
}
  807830:	e037883a 	mov	sp,fp
  807834:	df000017 	ldw	fp,0(sp)
  807838:	dec00104 	addi	sp,sp,4
  80783c:	f800283a 	ret

00807840 <ioman_setAttr>:
/*****************************************************************************/

void ioman_setAttr(IOManager *ioman,euint16 bufplace,euint8 attribute,euint8 val)
{
  807840:	defffb04 	addi	sp,sp,-20
  807844:	df000415 	stw	fp,16(sp)
  807848:	df000404 	addi	fp,sp,16
  80784c:	e13ffc15 	stw	r4,-16(fp)
  807850:	e17ffd0d 	sth	r5,-12(fp)
  807854:	e1bffe05 	stb	r6,-8(fp)
  807858:	e1ffff05 	stb	r7,-4(fp)
    if(bufplace>=ioman->numbuf){
  80785c:	e0bffc17 	ldw	r2,-16(fp)
  807860:	1080020b 	ldhu	r2,8(r2)
  807864:	10ffffcc 	andi	r3,r2,65535
  807868:	e0bffd0b 	ldhu	r2,-12(fp)
  80786c:	10c00436 	bltu	r2,r3,807880 <ioman_setAttr+0x40>
        ioman_setError(ioman,IOMAN_ERR_SETATTROUTOFBOUNDS);
  807870:	e0fffc17 	ldw	r3,-16(fp)
  807874:	00800044 	movi	r2,1
  807878:	18800305 	stb	r2,12(r3)
        return; /* Out of bounds */
  80787c:	00002506 	br	807914 <ioman_setAttr+0xd4>
    }
    
    if(val){
  807880:	e0bfff03 	ldbu	r2,-4(fp)
  807884:	1005003a 	cmpeq	r2,r2,zero
  807888:	1000111e 	bne	r2,zero,8078d0 <ioman_setAttr+0x90>
        ioman->status[bufplace]|=1<<attribute;
  80788c:	e17ffd0b 	ldhu	r5,-12(fp)
  807890:	e0fffd0b 	ldhu	r3,-12(fp)
  807894:	e0bffc17 	ldw	r2,-16(fp)
  807898:	1885883a 	add	r2,r3,r2
  80789c:	10802004 	addi	r2,r2,128
  8078a0:	10800003 	ldbu	r2,0(r2)
  8078a4:	1009883a 	mov	r4,r2
  8078a8:	e0fffe03 	ldbu	r3,-8(fp)
  8078ac:	00800044 	movi	r2,1
  8078b0:	10c4983a 	sll	r2,r2,r3
  8078b4:	2084b03a 	or	r2,r4,r2
  8078b8:	1007883a 	mov	r3,r2
  8078bc:	e0bffc17 	ldw	r2,-16(fp)
  8078c0:	2885883a 	add	r2,r5,r2
  8078c4:	10802004 	addi	r2,r2,128
  8078c8:	10c00005 	stb	r3,0(r2)
  8078cc:	00001106 	br	807914 <ioman_setAttr+0xd4>
    }else{
        ioman->status[bufplace]&=~(1<<attribute);
  8078d0:	e17ffd0b 	ldhu	r5,-12(fp)
  8078d4:	e0fffd0b 	ldhu	r3,-12(fp)
  8078d8:	e0bffc17 	ldw	r2,-16(fp)
  8078dc:	1885883a 	add	r2,r3,r2
  8078e0:	10802004 	addi	r2,r2,128
  8078e4:	10800003 	ldbu	r2,0(r2)
  8078e8:	1009883a 	mov	r4,r2
  8078ec:	e0fffe03 	ldbu	r3,-8(fp)
  8078f0:	00800044 	movi	r2,1
  8078f4:	10c4983a 	sll	r2,r2,r3
  8078f8:	0084303a 	nor	r2,zero,r2
  8078fc:	2084703a 	and	r2,r4,r2
  807900:	1007883a 	mov	r3,r2
  807904:	e0bffc17 	ldw	r2,-16(fp)
  807908:	2885883a 	add	r2,r5,r2
  80790c:	10802004 	addi	r2,r2,128
  807910:	10c00005 	stb	r3,0(r2)
    }
}
  807914:	e037883a 	mov	sp,fp
  807918:	df000017 	ldw	fp,0(sp)
  80791c:	dec00104 	addi	sp,sp,4
  807920:	f800283a 	ret

00807924 <ioman_getAttr>:
/*****************************************************************************/

euint8 ioman_getAttr(IOManager *ioman,euint16 bufplace,euint8 attribute)
{
  807924:	defffb04 	addi	sp,sp,-20
  807928:	df000415 	stw	fp,16(sp)
  80792c:	df000404 	addi	fp,sp,16
  807930:	e13ffc15 	stw	r4,-16(fp)
  807934:	e17ffd0d 	sth	r5,-12(fp)
  807938:	e1bffe05 	stb	r6,-8(fp)
    if(bufplace>=ioman->numbuf){
  80793c:	e0bffc17 	ldw	r2,-16(fp)
  807940:	1080020b 	ldhu	r2,8(r2)
  807944:	10ffffcc 	andi	r3,r2,65535
  807948:	e0bffd0b 	ldhu	r2,-12(fp)
  80794c:	10c00636 	bltu	r2,r3,807968 <ioman_getAttr+0x44>
        ioman_setError(ioman,IOMAN_ERR_GETATTROUTOFBOUNDS);
  807950:	e0fffc17 	ldw	r3,-16(fp)
  807954:	00800084 	movi	r2,2
  807958:	18800305 	stb	r2,12(r3)
        return(0xFF); /* Out of bounds */
  80795c:	00803fc4 	movi	r2,255
  807960:	e0bfff15 	stw	r2,-4(fp)
  807964:	00000c06 	br	807998 <ioman_getAttr+0x74>
    }

    return(ioman->status[bufplace]&(1<<attribute));
  807968:	e0fffd0b 	ldhu	r3,-12(fp)
  80796c:	e0bffc17 	ldw	r2,-16(fp)
  807970:	1885883a 	add	r2,r3,r2
  807974:	10802004 	addi	r2,r2,128
  807978:	10800003 	ldbu	r2,0(r2)
  80797c:	1009883a 	mov	r4,r2
  807980:	e0fffe03 	ldbu	r3,-8(fp)
  807984:	00800044 	movi	r2,1
  807988:	10c4983a 	sll	r2,r2,r3
  80798c:	2084703a 	and	r2,r4,r2
  807990:	10803fcc 	andi	r2,r2,255
  807994:	e0bfff15 	stw	r2,-4(fp)
  807998:	e0bfff17 	ldw	r2,-4(fp)
}
  80799c:	e037883a 	mov	sp,fp
  8079a0:	df000017 	ldw	fp,0(sp)
  8079a4:	dec00104 	addi	sp,sp,4
  8079a8:	f800283a 	ret

008079ac <ioman_getUseCnt>:
/*****************************************************************************/

euint8 ioman_getUseCnt(IOManager *ioman,euint16 bufplace)
{
  8079ac:	defffc04 	addi	sp,sp,-16
  8079b0:	df000315 	stw	fp,12(sp)
  8079b4:	df000304 	addi	fp,sp,12
  8079b8:	e13ffd15 	stw	r4,-12(fp)
  8079bc:	e17ffe0d 	sth	r5,-8(fp)
    if(bufplace>=ioman->numbuf){
  8079c0:	e0bffd17 	ldw	r2,-12(fp)
  8079c4:	1080020b 	ldhu	r2,8(r2)
  8079c8:	10ffffcc 	andi	r3,r2,65535
  8079cc:	e0bffe0b 	ldhu	r2,-8(fp)
  8079d0:	10c00536 	bltu	r2,r3,8079e8 <ioman_getUseCnt+0x3c>
        ioman_setError(ioman,IOMAN_ERR_OPOUTOFBOUNDS);
  8079d4:	e0fffd17 	ldw	r3,-12(fp)
  8079d8:	00800144 	movi	r2,5
  8079dc:	18800305 	stb	r2,12(r3)
        return(0x00);
  8079e0:	e03fff15 	stw	zero,-4(fp)
  8079e4:	00000706 	br	807a04 <ioman_getUseCnt+0x58>
    }
    return(ioman->usage[bufplace]);
  8079e8:	e0fffe0b 	ldhu	r3,-8(fp)
  8079ec:	e0bffd17 	ldw	r2,-12(fp)
  8079f0:	1885883a 	add	r2,r3,r2
  8079f4:	10802104 	addi	r2,r2,132
  8079f8:	10800003 	ldbu	r2,0(r2)
  8079fc:	10803fcc 	andi	r2,r2,255
  807a00:	e0bfff15 	stw	r2,-4(fp)
  807a04:	e0bfff17 	ldw	r2,-4(fp)
}
  807a08:	e037883a 	mov	sp,fp
  807a0c:	df000017 	ldw	fp,0(sp)
  807a10:	dec00104 	addi	sp,sp,4
  807a14:	f800283a 	ret

00807a18 <ioman_incUseCnt>:
/*****************************************************************************/


void ioman_incUseCnt(IOManager *ioman,euint16 bufplace)
{
  807a18:	defffd04 	addi	sp,sp,-12
  807a1c:	df000215 	stw	fp,8(sp)
  807a20:	df000204 	addi	fp,sp,8
  807a24:	e13ffe15 	stw	r4,-8(fp)
  807a28:	e17fff0d 	sth	r5,-4(fp)
    if(bufplace>=ioman->numbuf){
  807a2c:	e0bffe17 	ldw	r2,-8(fp)
  807a30:	1080020b 	ldhu	r2,8(r2)
  807a34:	10ffffcc 	andi	r3,r2,65535
  807a38:	e0bfff0b 	ldhu	r2,-4(fp)
  807a3c:	10c00436 	bltu	r2,r3,807a50 <ioman_incUseCnt+0x38>
        ioman_setError(ioman,IOMAN_ERR_OPOUTOFBOUNDS);
  807a40:	e0fffe17 	ldw	r3,-8(fp)
  807a44:	00800144 	movi	r2,5
  807a48:	18800305 	stb	r2,12(r3)
        return;
  807a4c:	00001306 	br	807a9c <ioman_incUseCnt+0x84>
    }
    if(ioman->usage[bufplace]==0xFF)return;
  807a50:	e0ffff0b 	ldhu	r3,-4(fp)
  807a54:	e0bffe17 	ldw	r2,-8(fp)
  807a58:	1885883a 	add	r2,r3,r2
  807a5c:	10802104 	addi	r2,r2,132
  807a60:	10800003 	ldbu	r2,0(r2)
  807a64:	10803fcc 	andi	r2,r2,255
  807a68:	10803fe0 	cmpeqi	r2,r2,255
  807a6c:	10000b1e 	bne	r2,zero,807a9c <ioman_incUseCnt+0x84>
    else ioman->usage[bufplace]++;
  807a70:	e13fff0b 	ldhu	r4,-4(fp)
  807a74:	e0bffe17 	ldw	r2,-8(fp)
  807a78:	2085883a 	add	r2,r4,r2
  807a7c:	10802104 	addi	r2,r2,132
  807a80:	10800003 	ldbu	r2,0(r2)
  807a84:	10800044 	addi	r2,r2,1
  807a88:	1007883a 	mov	r3,r2
  807a8c:	e0bffe17 	ldw	r2,-8(fp)
  807a90:	2085883a 	add	r2,r4,r2
  807a94:	10802104 	addi	r2,r2,132
  807a98:	10c00005 	stb	r3,0(r2)
}
  807a9c:	e037883a 	mov	sp,fp
  807aa0:	df000017 	ldw	fp,0(sp)
  807aa4:	dec00104 	addi	sp,sp,4
  807aa8:	f800283a 	ret

00807aac <ioman_decUseCnt>:
/*****************************************************************************/

void ioman_decUseCnt(IOManager *ioman,euint16 bufplace)
{
  807aac:	defffd04 	addi	sp,sp,-12
  807ab0:	df000215 	stw	fp,8(sp)
  807ab4:	df000204 	addi	fp,sp,8
  807ab8:	e13ffe15 	stw	r4,-8(fp)
  807abc:	e17fff0d 	sth	r5,-4(fp)
    if(bufplace>=ioman->numbuf){
  807ac0:	e0bffe17 	ldw	r2,-8(fp)
  807ac4:	1080020b 	ldhu	r2,8(r2)
  807ac8:	10ffffcc 	andi	r3,r2,65535
  807acc:	e0bfff0b 	ldhu	r2,-4(fp)
  807ad0:	10c00436 	bltu	r2,r3,807ae4 <ioman_decUseCnt+0x38>
        ioman_setError(ioman,IOMAN_ERR_OPOUTOFBOUNDS);
  807ad4:	e0fffe17 	ldw	r3,-8(fp)
  807ad8:	00800144 	movi	r2,5
  807adc:	18800305 	stb	r2,12(r3)
        return;
  807ae0:	00001306 	br	807b30 <ioman_decUseCnt+0x84>
    }
    if(ioman->usage[bufplace]==0x0)return;
  807ae4:	e0ffff0b 	ldhu	r3,-4(fp)
  807ae8:	e0bffe17 	ldw	r2,-8(fp)
  807aec:	1885883a 	add	r2,r3,r2
  807af0:	10802104 	addi	r2,r2,132
  807af4:	10800003 	ldbu	r2,0(r2)
  807af8:	10803fcc 	andi	r2,r2,255
  807afc:	1005003a 	cmpeq	r2,r2,zero
  807b00:	10000b1e 	bne	r2,zero,807b30 <ioman_decUseCnt+0x84>
    else ioman->usage[bufplace]--;
  807b04:	e13fff0b 	ldhu	r4,-4(fp)
  807b08:	e0bffe17 	ldw	r2,-8(fp)
  807b0c:	2085883a 	add	r2,r4,r2
  807b10:	10802104 	addi	r2,r2,132
  807b14:	10800003 	ldbu	r2,0(r2)
  807b18:	10bfffc4 	addi	r2,r2,-1
  807b1c:	1007883a 	mov	r3,r2
  807b20:	e0bffe17 	ldw	r2,-8(fp)
  807b24:	2085883a 	add	r2,r4,r2
  807b28:	10802104 	addi	r2,r2,132
  807b2c:	10c00005 	stb	r3,0(r2)
}
  807b30:	e037883a 	mov	sp,fp
  807b34:	df000017 	ldw	fp,0(sp)
  807b38:	dec00104 	addi	sp,sp,4
  807b3c:	f800283a 	ret

00807b40 <ioman_resetUseCnt>:
/*****************************************************************************/

void ioman_resetUseCnt(IOManager *ioman,euint16 bufplace)
{
  807b40:	defffd04 	addi	sp,sp,-12
  807b44:	df000215 	stw	fp,8(sp)
  807b48:	df000204 	addi	fp,sp,8
  807b4c:	e13ffe15 	stw	r4,-8(fp)
  807b50:	e17fff0d 	sth	r5,-4(fp)
    if(bufplace>=ioman->numbuf){
  807b54:	e0bffe17 	ldw	r2,-8(fp)
  807b58:	1080020b 	ldhu	r2,8(r2)
  807b5c:	10ffffcc 	andi	r3,r2,65535
  807b60:	e0bfff0b 	ldhu	r2,-4(fp)
  807b64:	10c00436 	bltu	r2,r3,807b78 <ioman_resetUseCnt+0x38>
        ioman_setError(ioman,IOMAN_ERR_OPOUTOFBOUNDS);
  807b68:	e0fffe17 	ldw	r3,-8(fp)
  807b6c:	00800144 	movi	r2,5
  807b70:	18800305 	stb	r2,12(r3)
        return;
  807b74:	00000506 	br	807b8c <ioman_resetUseCnt+0x4c>
    }
    ioman->usage[bufplace]=0x00;
  807b78:	e0ffff0b 	ldhu	r3,-4(fp)
  807b7c:	e0bffe17 	ldw	r2,-8(fp)
  807b80:	1885883a 	add	r2,r3,r2
  807b84:	10802104 	addi	r2,r2,132
  807b88:	10000005 	stb	zero,0(r2)
}
  807b8c:	e037883a 	mov	sp,fp
  807b90:	df000017 	ldw	fp,0(sp)
  807b94:	dec00104 	addi	sp,sp,4
  807b98:	f800283a 	ret

00807b9c <ioman_getRefCnt>:
/*****************************************************************************/

euint8 ioman_getRefCnt(IOManager *ioman,euint16 bufplace)
{
  807b9c:	defffc04 	addi	sp,sp,-16
  807ba0:	df000315 	stw	fp,12(sp)
  807ba4:	df000304 	addi	fp,sp,12
  807ba8:	e13ffd15 	stw	r4,-12(fp)
  807bac:	e17ffe0d 	sth	r5,-8(fp)
    if(bufplace>=ioman->numbuf){
  807bb0:	e0bffd17 	ldw	r2,-12(fp)
  807bb4:	1080020b 	ldhu	r2,8(r2)
  807bb8:	10ffffcc 	andi	r3,r2,65535
  807bbc:	e0bffe0b 	ldhu	r2,-8(fp)
  807bc0:	10c00536 	bltu	r2,r3,807bd8 <ioman_getRefCnt+0x3c>
        ioman_setError(ioman,IOMAN_ERR_OPOUTOFBOUNDS);
  807bc4:	e0fffd17 	ldw	r3,-12(fp)
  807bc8:	00800144 	movi	r2,5
  807bcc:	18800305 	stb	r2,12(r3)
        return(0x00);
  807bd0:	e03fff15 	stw	zero,-4(fp)
  807bd4:	00000706 	br	807bf4 <ioman_getRefCnt+0x58>
    }
    return(ioman->reference[bufplace]);
  807bd8:	e0fffe0b 	ldhu	r3,-8(fp)
  807bdc:	e0bffd17 	ldw	r2,-12(fp)
  807be0:	1885883a 	add	r2,r3,r2
  807be4:	10802204 	addi	r2,r2,136
  807be8:	10800003 	ldbu	r2,0(r2)
  807bec:	10803fcc 	andi	r2,r2,255
  807bf0:	e0bfff15 	stw	r2,-4(fp)
  807bf4:	e0bfff17 	ldw	r2,-4(fp)
}
  807bf8:	e037883a 	mov	sp,fp
  807bfc:	df000017 	ldw	fp,0(sp)
  807c00:	dec00104 	addi	sp,sp,4
  807c04:	f800283a 	ret

00807c08 <ioman_incRefCnt>:
/*****************************************************************************/

void ioman_incRefCnt(IOManager *ioman,euint16 bufplace)
{
  807c08:	defffd04 	addi	sp,sp,-12
  807c0c:	df000215 	stw	fp,8(sp)
  807c10:	df000204 	addi	fp,sp,8
  807c14:	e13ffe15 	stw	r4,-8(fp)
  807c18:	e17fff0d 	sth	r5,-4(fp)
    if(bufplace>=ioman->numbuf){
  807c1c:	e0bffe17 	ldw	r2,-8(fp)
  807c20:	1080020b 	ldhu	r2,8(r2)
  807c24:	10ffffcc 	andi	r3,r2,65535
  807c28:	e0bfff0b 	ldhu	r2,-4(fp)
  807c2c:	10c00436 	bltu	r2,r3,807c40 <ioman_incRefCnt+0x38>
        ioman_setError(ioman,IOMAN_ERR_OPOUTOFBOUNDS);
  807c30:	e0fffe17 	ldw	r3,-8(fp)
  807c34:	00800144 	movi	r2,5
  807c38:	18800305 	stb	r2,12(r3)
        return;
  807c3c:	00001306 	br	807c8c <ioman_incRefCnt+0x84>
    }
    if(ioman->reference[bufplace]==0xFF)return;
  807c40:	e0ffff0b 	ldhu	r3,-4(fp)
  807c44:	e0bffe17 	ldw	r2,-8(fp)
  807c48:	1885883a 	add	r2,r3,r2
  807c4c:	10802204 	addi	r2,r2,136
  807c50:	10800003 	ldbu	r2,0(r2)
  807c54:	10803fcc 	andi	r2,r2,255
  807c58:	10803fe0 	cmpeqi	r2,r2,255
  807c5c:	10000b1e 	bne	r2,zero,807c8c <ioman_incRefCnt+0x84>
    else ioman->reference[bufplace]++;
  807c60:	e13fff0b 	ldhu	r4,-4(fp)
  807c64:	e0bffe17 	ldw	r2,-8(fp)
  807c68:	2085883a 	add	r2,r4,r2
  807c6c:	10802204 	addi	r2,r2,136
  807c70:	10800003 	ldbu	r2,0(r2)
  807c74:	10800044 	addi	r2,r2,1
  807c78:	1007883a 	mov	r3,r2
  807c7c:	e0bffe17 	ldw	r2,-8(fp)
  807c80:	2085883a 	add	r2,r4,r2
  807c84:	10802204 	addi	r2,r2,136
  807c88:	10c00005 	stb	r3,0(r2)
}
  807c8c:	e037883a 	mov	sp,fp
  807c90:	df000017 	ldw	fp,0(sp)
  807c94:	dec00104 	addi	sp,sp,4
  807c98:	f800283a 	ret

00807c9c <ioman_decRefCnt>:
/*****************************************************************************/

void ioman_decRefCnt(IOManager *ioman,euint16 bufplace)
{
  807c9c:	defffd04 	addi	sp,sp,-12
  807ca0:	df000215 	stw	fp,8(sp)
  807ca4:	df000204 	addi	fp,sp,8
  807ca8:	e13ffe15 	stw	r4,-8(fp)
  807cac:	e17fff0d 	sth	r5,-4(fp)
    if(bufplace>=ioman->numbuf){
  807cb0:	e0bffe17 	ldw	r2,-8(fp)
  807cb4:	1080020b 	ldhu	r2,8(r2)
  807cb8:	10ffffcc 	andi	r3,r2,65535
  807cbc:	e0bfff0b 	ldhu	r2,-4(fp)
  807cc0:	10c00436 	bltu	r2,r3,807cd4 <ioman_decRefCnt+0x38>
        ioman_setError(ioman,IOMAN_ERR_OPOUTOFBOUNDS);
  807cc4:	e0fffe17 	ldw	r3,-8(fp)
  807cc8:	00800144 	movi	r2,5
  807ccc:	18800305 	stb	r2,12(r3)
        return;
  807cd0:	00001306 	br	807d20 <ioman_decRefCnt+0x84>
    }
    if(ioman->reference[bufplace]==0x00)return;
  807cd4:	e0ffff0b 	ldhu	r3,-4(fp)
  807cd8:	e0bffe17 	ldw	r2,-8(fp)
  807cdc:	1885883a 	add	r2,r3,r2
  807ce0:	10802204 	addi	r2,r2,136
  807ce4:	10800003 	ldbu	r2,0(r2)
  807ce8:	10803fcc 	andi	r2,r2,255
  807cec:	1005003a 	cmpeq	r2,r2,zero
  807cf0:	10000b1e 	bne	r2,zero,807d20 <ioman_decRefCnt+0x84>
    else ioman->reference[bufplace]--;
  807cf4:	e13fff0b 	ldhu	r4,-4(fp)
  807cf8:	e0bffe17 	ldw	r2,-8(fp)
  807cfc:	2085883a 	add	r2,r4,r2
  807d00:	10802204 	addi	r2,r2,136
  807d04:	10800003 	ldbu	r2,0(r2)
  807d08:	10bfffc4 	addi	r2,r2,-1
  807d0c:	1007883a 	mov	r3,r2
  807d10:	e0bffe17 	ldw	r2,-8(fp)
  807d14:	2085883a 	add	r2,r4,r2
  807d18:	10802204 	addi	r2,r2,136
  807d1c:	10c00005 	stb	r3,0(r2)
}
  807d20:	e037883a 	mov	sp,fp
  807d24:	df000017 	ldw	fp,0(sp)
  807d28:	dec00104 	addi	sp,sp,4
  807d2c:	f800283a 	ret

00807d30 <ioman_resetRefCnt>:
/*****************************************************************************/

void ioman_resetRefCnt(IOManager *ioman,euint16 bufplace)
{
  807d30:	defffd04 	addi	sp,sp,-12
  807d34:	df000215 	stw	fp,8(sp)
  807d38:	df000204 	addi	fp,sp,8
  807d3c:	e13ffe15 	stw	r4,-8(fp)
  807d40:	e17fff0d 	sth	r5,-4(fp)
    if(bufplace>=ioman->numbuf){
  807d44:	e0bffe17 	ldw	r2,-8(fp)
  807d48:	1080020b 	ldhu	r2,8(r2)
  807d4c:	10ffffcc 	andi	r3,r2,65535
  807d50:	e0bfff0b 	ldhu	r2,-4(fp)
  807d54:	10c00436 	bltu	r2,r3,807d68 <ioman_resetRefCnt+0x38>
        ioman_setError(ioman,IOMAN_ERR_OPOUTOFBOUNDS);
  807d58:	e0fffe17 	ldw	r3,-8(fp)
  807d5c:	00800144 	movi	r2,5
  807d60:	18800305 	stb	r2,12(r3)
        return;
  807d64:	00000506 	br	807d7c <ioman_resetRefCnt+0x4c>
    }
    ioman->reference[bufplace]=0x00;
  807d68:	e0ffff0b 	ldhu	r3,-4(fp)
  807d6c:	e0bffe17 	ldw	r2,-8(fp)
  807d70:	1885883a 	add	r2,r3,r2
  807d74:	10802204 	addi	r2,r2,136
  807d78:	10000005 	stb	zero,0(r2)
}
  807d7c:	e037883a 	mov	sp,fp
  807d80:	df000017 	ldw	fp,0(sp)
  807d84:	dec00104 	addi	sp,sp,4
  807d88:	f800283a 	ret

00807d8c <ioman_pop>:
/*****************************************************************************/

esint8 ioman_pop(IOManager *ioman,euint16 bufplace)
{
  807d8c:	defffc04 	addi	sp,sp,-16
  807d90:	df000315 	stw	fp,12(sp)
  807d94:	df000304 	addi	fp,sp,12
  807d98:	e13ffd15 	stw	r4,-12(fp)
  807d9c:	e17ffe0d 	sth	r5,-8(fp)
    if(bufplace>=ioman->numbuf){
  807da0:	e0bffd17 	ldw	r2,-12(fp)
  807da4:	1080020b 	ldhu	r2,8(r2)
  807da8:	10ffffcc 	andi	r3,r2,65535
  807dac:	e0bffe0b 	ldhu	r2,-8(fp)
  807db0:	10c00636 	bltu	r2,r3,807dcc <ioman_pop+0x40>
        ioman_setError(ioman,IOMAN_ERR_POPEMPTYSTACK);
  807db4:	e0fffd17 	ldw	r3,-12(fp)
  807db8:	008001c4 	movi	r2,7
  807dbc:	18800305 	stb	r2,12(r3)
        return(-1);
  807dc0:	00bfffc4 	movi	r2,-1
  807dc4:	e0bfff15 	stw	r2,-4(fp)
  807dc8:	00006006 	br	807f4c <ioman_pop+0x1c0>
    }
    if(ioman->itptr[bufplace]==0 || ioman->itptr[bufplace]>IOMAN_NUMITERATIONS)return(-1);
  807dcc:	e0fffe0b 	ldhu	r3,-8(fp)
  807dd0:	e0bffd17 	ldw	r2,-12(fp)
  807dd4:	1885883a 	add	r2,r3,r2
  807dd8:	10802304 	addi	r2,r2,140
  807ddc:	10800003 	ldbu	r2,0(r2)
  807de0:	10803fcc 	andi	r2,r2,255
  807de4:	1005003a 	cmpeq	r2,r2,zero
  807de8:	1000081e 	bne	r2,zero,807e0c <ioman_pop+0x80>
  807dec:	e0fffe0b 	ldhu	r3,-8(fp)
  807df0:	e0bffd17 	ldw	r2,-12(fp)
  807df4:	1885883a 	add	r2,r3,r2
  807df8:	10802304 	addi	r2,r2,140
  807dfc:	10800003 	ldbu	r2,0(r2)
  807e00:	10803fcc 	andi	r2,r2,255
  807e04:	10800130 	cmpltui	r2,r2,4
  807e08:	1000031e 	bne	r2,zero,807e18 <ioman_pop+0x8c>
  807e0c:	00bfffc4 	movi	r2,-1
  807e10:	e0bfff15 	stw	r2,-4(fp)
  807e14:	00004d06 	br	807f4c <ioman_pop+0x1c0>
    ioman->sector[bufplace] = ioman->stack[bufplace][ioman->itptr[bufplace]].sector;
  807e18:	e1bffe0b 	ldhu	r6,-8(fp)
  807e1c:	e13ffe0b 	ldhu	r4,-8(fp)
  807e20:	e0fffe0b 	ldhu	r3,-8(fp)
  807e24:	e0bffd17 	ldw	r2,-12(fp)
  807e28:	1885883a 	add	r2,r3,r2
  807e2c:	10802304 	addi	r2,r2,140
  807e30:	10800003 	ldbu	r2,0(r2)
  807e34:	10c03fcc 	andi	r3,r2,255
  807e38:	e17ffd17 	ldw	r5,-12(fp)
  807e3c:	2005883a 	mov	r2,r4
  807e40:	1085883a 	add	r2,r2,r2
  807e44:	1105883a 	add	r2,r2,r4
  807e48:	10c5883a 	add	r2,r2,r3
  807e4c:	100490fa 	slli	r2,r2,3
  807e50:	1145883a 	add	r2,r2,r5
  807e54:	10800404 	addi	r2,r2,16
  807e58:	11000017 	ldw	r4,0(r2)
  807e5c:	e0fffd17 	ldw	r3,-12(fp)
  807e60:	3185883a 	add	r2,r6,r6
  807e64:	1085883a 	add	r2,r2,r2
  807e68:	10c5883a 	add	r2,r2,r3
  807e6c:	10801c04 	addi	r2,r2,112
  807e70:	11000015 	stw	r4,0(r2)
    ioman->status[bufplace] = ioman->stack[bufplace][ioman->itptr[bufplace]].status;
  807e74:	e1bffe0b 	ldhu	r6,-8(fp)
  807e78:	e13ffe0b 	ldhu	r4,-8(fp)
  807e7c:	e0fffe0b 	ldhu	r3,-8(fp)
  807e80:	e0bffd17 	ldw	r2,-12(fp)
  807e84:	1885883a 	add	r2,r3,r2
  807e88:	10802304 	addi	r2,r2,140
  807e8c:	10800003 	ldbu	r2,0(r2)
  807e90:	10c03fcc 	andi	r3,r2,255
  807e94:	e17ffd17 	ldw	r5,-12(fp)
  807e98:	2005883a 	mov	r2,r4
  807e9c:	1085883a 	add	r2,r2,r2
  807ea0:	1105883a 	add	r2,r2,r4
  807ea4:	10c5883a 	add	r2,r2,r3
  807ea8:	100490fa 	slli	r2,r2,3
  807eac:	1145883a 	add	r2,r2,r5
  807eb0:	10800504 	addi	r2,r2,20
  807eb4:	10c00003 	ldbu	r3,0(r2)
  807eb8:	e0bffd17 	ldw	r2,-12(fp)
  807ebc:	3085883a 	add	r2,r6,r2
  807ec0:	10802004 	addi	r2,r2,128
  807ec4:	10c00005 	stb	r3,0(r2)
    ioman->usage[bufplace]  = ioman->stack[bufplace][ioman->itptr[bufplace]].usage; 
  807ec8:	e1bffe0b 	ldhu	r6,-8(fp)
  807ecc:	e13ffe0b 	ldhu	r4,-8(fp)
  807ed0:	e0fffe0b 	ldhu	r3,-8(fp)
  807ed4:	e0bffd17 	ldw	r2,-12(fp)
  807ed8:	1885883a 	add	r2,r3,r2
  807edc:	10802304 	addi	r2,r2,140
  807ee0:	10800003 	ldbu	r2,0(r2)
  807ee4:	10c03fcc 	andi	r3,r2,255
  807ee8:	e17ffd17 	ldw	r5,-12(fp)
  807eec:	2005883a 	mov	r2,r4
  807ef0:	1085883a 	add	r2,r2,r2
  807ef4:	1105883a 	add	r2,r2,r4
  807ef8:	10c5883a 	add	r2,r2,r3
  807efc:	100490fa 	slli	r2,r2,3
  807f00:	1145883a 	add	r2,r2,r5
  807f04:	10800504 	addi	r2,r2,20
  807f08:	10c00043 	ldbu	r3,1(r2)
  807f0c:	e0bffd17 	ldw	r2,-12(fp)
  807f10:	3085883a 	add	r2,r6,r2
  807f14:	10802104 	addi	r2,r2,132
  807f18:	10c00005 	stb	r3,0(r2)
    ioman->itptr[bufplace]--;
  807f1c:	e13ffe0b 	ldhu	r4,-8(fp)
  807f20:	e0bffd17 	ldw	r2,-12(fp)
  807f24:	2085883a 	add	r2,r4,r2
  807f28:	10802304 	addi	r2,r2,140
  807f2c:	10800003 	ldbu	r2,0(r2)
  807f30:	10bfffc4 	addi	r2,r2,-1
  807f34:	1007883a 	mov	r3,r2
  807f38:	e0bffd17 	ldw	r2,-12(fp)
  807f3c:	2085883a 	add	r2,r4,r2
  807f40:	10802304 	addi	r2,r2,140
  807f44:	10c00005 	stb	r3,0(r2)
    return(0);
  807f48:	e03fff15 	stw	zero,-4(fp)
  807f4c:	e0bfff17 	ldw	r2,-4(fp)
}
  807f50:	e037883a 	mov	sp,fp
  807f54:	df000017 	ldw	fp,0(sp)
  807f58:	dec00104 	addi	sp,sp,4
  807f5c:	f800283a 	ret

00807f60 <ioman_push>:
/*****************************************************************************/

esint8 ioman_push(IOManager *ioman,euint16 bufplace)
{
  807f60:	defffc04 	addi	sp,sp,-16
  807f64:	df000315 	stw	fp,12(sp)
  807f68:	df000304 	addi	fp,sp,12
  807f6c:	e13ffd15 	stw	r4,-12(fp)
  807f70:	e17ffe0d 	sth	r5,-8(fp)
    if(bufplace>=ioman->numbuf){
  807f74:	e0bffd17 	ldw	r2,-12(fp)
  807f78:	1080020b 	ldhu	r2,8(r2)
  807f7c:	10ffffcc 	andi	r3,r2,65535
  807f80:	e0bffe0b 	ldhu	r2,-8(fp)
  807f84:	10c00636 	bltu	r2,r3,807fa0 <ioman_push+0x40>
        ioman_setError(ioman,IOMAN_ERR_OPOUTOFBOUNDS);
  807f88:	e0fffd17 	ldw	r3,-12(fp)
  807f8c:	00800144 	movi	r2,5
  807f90:	18800305 	stb	r2,12(r3)
        return(-1);
  807f94:	00bfffc4 	movi	r2,-1
  807f98:	e0bfff15 	stw	r2,-4(fp)
  807f9c:	00005b06 	br	80810c <ioman_push+0x1ac>
    }
    if(ioman->itptr[bufplace]>=IOMAN_NUMITERATIONS){
  807fa0:	e0fffe0b 	ldhu	r3,-8(fp)
  807fa4:	e0bffd17 	ldw	r2,-12(fp)
  807fa8:	1885883a 	add	r2,r3,r2
  807fac:	10802304 	addi	r2,r2,140
  807fb0:	10800003 	ldbu	r2,0(r2)
  807fb4:	10803fcc 	andi	r2,r2,255
  807fb8:	108000f0 	cmpltui	r2,r2,3
  807fbc:	1000061e 	bne	r2,zero,807fd8 <ioman_push+0x78>
        ioman_setError(ioman,IOMAN_ERR_PUSHBEYONDSTACK);    
  807fc0:	e0fffd17 	ldw	r3,-12(fp)
  807fc4:	00800184 	movi	r2,6
  807fc8:	18800305 	stb	r2,12(r3)
        return(-1);
  807fcc:	00bfffc4 	movi	r2,-1
  807fd0:	e0bfff15 	stw	r2,-4(fp)
  807fd4:	00004d06 	br	80810c <ioman_push+0x1ac>
    }
    ioman->itptr[bufplace]++;
  807fd8:	e13ffe0b 	ldhu	r4,-8(fp)
  807fdc:	e0bffd17 	ldw	r2,-12(fp)
  807fe0:	2085883a 	add	r2,r4,r2
  807fe4:	10802304 	addi	r2,r2,140
  807fe8:	10800003 	ldbu	r2,0(r2)
  807fec:	10800044 	addi	r2,r2,1
  807ff0:	1007883a 	mov	r3,r2
  807ff4:	e0bffd17 	ldw	r2,-12(fp)
  807ff8:	2085883a 	add	r2,r4,r2
  807ffc:	10802304 	addi	r2,r2,140
  808000:	10c00005 	stb	r3,0(r2)
    ioman->stack[bufplace][ioman->itptr[bufplace]].sector = ioman->sector[bufplace];
  808004:	e17ffe0b 	ldhu	r5,-8(fp)
  808008:	e0fffe0b 	ldhu	r3,-8(fp)
  80800c:	e0bffd17 	ldw	r2,-12(fp)
  808010:	1885883a 	add	r2,r3,r2
  808014:	10802304 	addi	r2,r2,140
  808018:	10800003 	ldbu	r2,0(r2)
  80801c:	11803fcc 	andi	r6,r2,255
  808020:	e0bffe0b 	ldhu	r2,-8(fp)
  808024:	e0fffd17 	ldw	r3,-12(fp)
  808028:	1085883a 	add	r2,r2,r2
  80802c:	1085883a 	add	r2,r2,r2
  808030:	10c5883a 	add	r2,r2,r3
  808034:	10801c04 	addi	r2,r2,112
  808038:	10c00017 	ldw	r3,0(r2)
  80803c:	e13ffd17 	ldw	r4,-12(fp)
  808040:	2805883a 	mov	r2,r5
  808044:	1085883a 	add	r2,r2,r2
  808048:	1145883a 	add	r2,r2,r5
  80804c:	1185883a 	add	r2,r2,r6
  808050:	100490fa 	slli	r2,r2,3
  808054:	1105883a 	add	r2,r2,r4
  808058:	10800404 	addi	r2,r2,16
  80805c:	10c00015 	stw	r3,0(r2)
    ioman->stack[bufplace][ioman->itptr[bufplace]].status = ioman->status[bufplace];
  808060:	e13ffe0b 	ldhu	r4,-8(fp)
  808064:	e0fffe0b 	ldhu	r3,-8(fp)
  808068:	e0bffd17 	ldw	r2,-12(fp)
  80806c:	1885883a 	add	r2,r3,r2
  808070:	10802304 	addi	r2,r2,140
  808074:	10800003 	ldbu	r2,0(r2)
  808078:	11403fcc 	andi	r5,r2,255
  80807c:	e0fffe0b 	ldhu	r3,-8(fp)
  808080:	e0bffd17 	ldw	r2,-12(fp)
  808084:	1885883a 	add	r2,r3,r2
  808088:	10802004 	addi	r2,r2,128
  80808c:	10c00003 	ldbu	r3,0(r2)
  808090:	e1bffd17 	ldw	r6,-12(fp)
  808094:	2005883a 	mov	r2,r4
  808098:	1085883a 	add	r2,r2,r2
  80809c:	1105883a 	add	r2,r2,r4
  8080a0:	1145883a 	add	r2,r2,r5
  8080a4:	100490fa 	slli	r2,r2,3
  8080a8:	1185883a 	add	r2,r2,r6
  8080ac:	10800504 	addi	r2,r2,20
  8080b0:	10c00005 	stb	r3,0(r2)
    ioman->stack[bufplace][ioman->itptr[bufplace]].usage  = ioman->usage[bufplace];
  8080b4:	e13ffe0b 	ldhu	r4,-8(fp)
  8080b8:	e0fffe0b 	ldhu	r3,-8(fp)
  8080bc:	e0bffd17 	ldw	r2,-12(fp)
  8080c0:	1885883a 	add	r2,r3,r2
  8080c4:	10802304 	addi	r2,r2,140
  8080c8:	10800003 	ldbu	r2,0(r2)
  8080cc:	11403fcc 	andi	r5,r2,255
  8080d0:	e0fffe0b 	ldhu	r3,-8(fp)
  8080d4:	e0bffd17 	ldw	r2,-12(fp)
  8080d8:	1885883a 	add	r2,r3,r2
  8080dc:	10802104 	addi	r2,r2,132
  8080e0:	10c00003 	ldbu	r3,0(r2)
  8080e4:	e1bffd17 	ldw	r6,-12(fp)
  8080e8:	2005883a 	mov	r2,r4
  8080ec:	1085883a 	add	r2,r2,r2
  8080f0:	1105883a 	add	r2,r2,r4
  8080f4:	1145883a 	add	r2,r2,r5
  8080f8:	100490fa 	slli	r2,r2,3
  8080fc:	1185883a 	add	r2,r2,r6
  808100:	10800504 	addi	r2,r2,20
  808104:	10c00045 	stb	r3,1(r2)
    return(0);
  808108:	e03fff15 	stw	zero,-4(fp)
  80810c:	e0bfff17 	ldw	r2,-4(fp)
}
  808110:	e037883a 	mov	sp,fp
  808114:	df000017 	ldw	fp,0(sp)
  808118:	dec00104 	addi	sp,sp,4
  80811c:	f800283a 	ret

00808120 <ioman_getPtr>:
/*****************************************************************************/

euint8* ioman_getPtr(IOManager *ioman,euint16 bufplace)
{
  808120:	defffc04 	addi	sp,sp,-16
  808124:	df000315 	stw	fp,12(sp)
  808128:	df000304 	addi	fp,sp,12
  80812c:	e13ffd15 	stw	r4,-12(fp)
  808130:	e17ffe0d 	sth	r5,-8(fp)
    if(bufplace>=ioman->numbuf){
  808134:	e0bffd17 	ldw	r2,-12(fp)
  808138:	1080020b 	ldhu	r2,8(r2)
  80813c:	10ffffcc 	andi	r3,r2,65535
  808140:	e0bffe0b 	ldhu	r2,-8(fp)
  808144:	10c00536 	bltu	r2,r3,80815c <ioman_getPtr+0x3c>
        ioman_setError(ioman,IOMAN_ERR_OPOUTOFBOUNDS);
  808148:	e0fffd17 	ldw	r3,-12(fp)
  80814c:	00800144 	movi	r2,5
  808150:	18800305 	stb	r2,12(r3)
        return(0);
  808154:	e03fff15 	stw	zero,-4(fp)
  808158:	00000606 	br	808174 <ioman_getPtr+0x54>
    }
    return(ioman->bufptr+bufplace*512);
  80815c:	e0bffd17 	ldw	r2,-12(fp)
  808160:	10c00117 	ldw	r3,4(r2)
  808164:	e0bffe0b 	ldhu	r2,-8(fp)
  808168:	1004927a 	slli	r2,r2,9
  80816c:	1887883a 	add	r3,r3,r2
  808170:	e0ffff15 	stw	r3,-4(fp)
  808174:	e0bfff17 	ldw	r2,-4(fp)
}
  808178:	e037883a 	mov	sp,fp
  80817c:	df000017 	ldw	fp,0(sp)
  808180:	dec00104 	addi	sp,sp,4
  808184:	f800283a 	ret

00808188 <ioman_getBp>:
/*****************************************************************************/

esint16 ioman_getBp(IOManager *ioman,euint8* buf)
{
  808188:	defffb04 	addi	sp,sp,-20
  80818c:	df000415 	stw	fp,16(sp)
  808190:	df000404 	addi	fp,sp,16
  808194:	e13ffc15 	stw	r4,-16(fp)
  808198:	e17ffd15 	stw	r5,-12(fp)
    if(buf<(ioman->bufptr) || buf>=( ioman->bufptr+(ioman->numbuf*512) )){
  80819c:	e0bffc17 	ldw	r2,-16(fp)
  8081a0:	10c00117 	ldw	r3,4(r2)
  8081a4:	e0bffd17 	ldw	r2,-12(fp)
  8081a8:	10c00936 	bltu	r2,r3,8081d0 <ioman_getBp+0x48>
  8081ac:	e0bffc17 	ldw	r2,-16(fp)
  8081b0:	10c00117 	ldw	r3,4(r2)
  8081b4:	e0bffc17 	ldw	r2,-16(fp)
  8081b8:	1080020b 	ldhu	r2,8(r2)
  8081bc:	10bfffcc 	andi	r2,r2,65535
  8081c0:	1004927a 	slli	r2,r2,9
  8081c4:	1887883a 	add	r3,r3,r2
  8081c8:	e0bffd17 	ldw	r2,-12(fp)
  8081cc:	10c00636 	bltu	r2,r3,8081e8 <ioman_getBp+0x60>
        ioman_setError(ioman,IOMAN_ERR_CACHEPTROUTOFRANGE);
  8081d0:	e0fffc17 	ldw	r3,-16(fp)
  8081d4:	00800204 	movi	r2,8
  8081d8:	18800305 	stb	r2,12(r3)
        return(-1);
  8081dc:	00bfffc4 	movi	r2,-1
  8081e0:	e0bffe15 	stw	r2,-8(fp)
  8081e4:	00001106 	br	80822c <ioman_getBp+0xa4>
    }
    return((buf-(ioman->bufptr))/512);
  8081e8:	e0fffd17 	ldw	r3,-12(fp)
  8081ec:	e0bffc17 	ldw	r2,-16(fp)
  8081f0:	10800117 	ldw	r2,4(r2)
  8081f4:	1885c83a 	sub	r2,r3,r2
  8081f8:	e0bfff15 	stw	r2,-4(fp)
  8081fc:	e0ffff17 	ldw	r3,-4(fp)
  808200:	1804403a 	cmpge	r2,r3,zero
  808204:	1000031e 	bne	r2,zero,808214 <ioman_getBp+0x8c>
  808208:	e0bfff17 	ldw	r2,-4(fp)
  80820c:	10807fc4 	addi	r2,r2,511
  808210:	e0bfff15 	stw	r2,-4(fp)
  808214:	e0ffff17 	ldw	r3,-4(fp)
  808218:	1805d27a 	srai	r2,r3,9
  80821c:	10bfffcc 	andi	r2,r2,65535
  808220:	10a0001c 	xori	r2,r2,32768
  808224:	10a00004 	addi	r2,r2,-32768
  808228:	e0bffe15 	stw	r2,-8(fp)
  80822c:	e0bffe17 	ldw	r2,-8(fp)
}
  808230:	e037883a 	mov	sp,fp
  808234:	df000017 	ldw	fp,0(sp)
  808238:	dec00104 	addi	sp,sp,4
  80823c:	f800283a 	ret

00808240 <ioman_readSector>:
/*****************************************************************************/

esint8 ioman_readSector(IOManager *ioman,euint32 address,euint8* buf)
{
  808240:	defff904 	addi	sp,sp,-28
  808244:	dfc00615 	stw	ra,24(sp)
  808248:	df000515 	stw	fp,20(sp)
  80824c:	df000504 	addi	fp,sp,20
  808250:	e13ffc15 	stw	r4,-16(fp)
  808254:	e17ffd15 	stw	r5,-12(fp)
  808258:	e1bffe15 	stw	r6,-8(fp)
    esint8 r;

    if(buf==0){
  80825c:	e0bffe17 	ldw	r2,-8(fp)
  808260:	1004c03a 	cmpne	r2,r2,zero
  808264:	1000031e 	bne	r2,zero,808274 <ioman_readSector+0x34>
        return(-1);
  808268:	00bfffc4 	movi	r2,-1
  80826c:	e0bfff15 	stw	r2,-4(fp)
  808270:	00001006 	br	8082b4 <ioman_readSector+0x74>
    }
    
    r=if_readBuf(ioman->iface,address,buf);
  808274:	e0bffc17 	ldw	r2,-16(fp)
  808278:	11000017 	ldw	r4,0(r2)
  80827c:	e17ffd17 	ldw	r5,-12(fp)
  808280:	e1bffe17 	ldw	r6,-8(fp)
  808284:	0809e6c0 	call	809e6c <if_readBuf>
  808288:	e0bffb05 	stb	r2,-20(fp)
    
    if(r!=0){
  80828c:	e0bffb07 	ldb	r2,-20(fp)
  808290:	1005003a 	cmpeq	r2,r2,zero
  808294:	1000061e 	bne	r2,zero,8082b0 <ioman_readSector+0x70>
        ioman_setError(ioman,IOMAN_ERR_READFAIL);
  808298:	e0fffc17 	ldw	r3,-16(fp)
  80829c:	008000c4 	movi	r2,3
  8082a0:	18800305 	stb	r2,12(r3)
        return(-1);
  8082a4:	00bfffc4 	movi	r2,-1
  8082a8:	e0bfff15 	stw	r2,-4(fp)
  8082ac:	00000106 	br	8082b4 <ioman_readSector+0x74>
    }
    return(0);
  8082b0:	e03fff15 	stw	zero,-4(fp)
  8082b4:	e0bfff17 	ldw	r2,-4(fp)
}
  8082b8:	e037883a 	mov	sp,fp
  8082bc:	dfc00117 	ldw	ra,4(sp)
  8082c0:	df000017 	ldw	fp,0(sp)
  8082c4:	dec00204 	addi	sp,sp,8
  8082c8:	f800283a 	ret

008082cc <ioman_writeSector>:
/*****************************************************************************/

esint8 ioman_writeSector(IOManager *ioman, euint32 address, euint8* buf)
{
  8082cc:	defff904 	addi	sp,sp,-28
  8082d0:	dfc00615 	stw	ra,24(sp)
  8082d4:	df000515 	stw	fp,20(sp)
  8082d8:	df000504 	addi	fp,sp,20
  8082dc:	e13ffc15 	stw	r4,-16(fp)
  8082e0:	e17ffd15 	stw	r5,-12(fp)
  8082e4:	e1bffe15 	stw	r6,-8(fp)
    esint8 r;

    if(buf==0)return(-1);
  8082e8:	e0bffe17 	ldw	r2,-8(fp)
  8082ec:	1004c03a 	cmpne	r2,r2,zero
  8082f0:	1000031e 	bne	r2,zero,808300 <ioman_writeSector+0x34>
  8082f4:	00bfffc4 	movi	r2,-1
  8082f8:	e0bfff15 	stw	r2,-4(fp)
  8082fc:	00001006 	br	808340 <ioman_writeSector+0x74>
    
    r=if_writeBuf(ioman->iface,address,buf);
  808300:	e0bffc17 	ldw	r2,-16(fp)
  808304:	11000017 	ldw	r4,0(r2)
  808308:	e17ffd17 	ldw	r5,-12(fp)
  80830c:	e1bffe17 	ldw	r6,-8(fp)
  808310:	0809ebc0 	call	809ebc <if_writeBuf>
  808314:	e0bffb05 	stb	r2,-20(fp)

    if(r<=0){
  808318:	e0bffb07 	ldb	r2,-20(fp)
  80831c:	10800048 	cmpgei	r2,r2,1
  808320:	1000061e 	bne	r2,zero,80833c <ioman_writeSector+0x70>
        ioman_setError(ioman,IOMAN_ERR_WRITEFAIL);
  808324:	e0fffc17 	ldw	r3,-16(fp)
  808328:	00800104 	movi	r2,4
  80832c:	18800305 	stb	r2,12(r3)
        return(-1);
  808330:	00bfffc4 	movi	r2,-1
  808334:	e0bfff15 	stw	r2,-4(fp)
  808338:	00000106 	br	808340 <ioman_writeSector+0x74>
    }
    return(0);
  80833c:	e03fff15 	stw	zero,-4(fp)
  808340:	e0bfff17 	ldw	r2,-4(fp)
}
  808344:	e037883a 	mov	sp,fp
  808348:	dfc00117 	ldw	ra,4(sp)
  80834c:	df000017 	ldw	fp,0(sp)
  808350:	dec00204 	addi	sp,sp,8
  808354:	f800283a 	ret

00808358 <ioman_resetCacheItem>:
/*****************************************************************************/

void ioman_resetCacheItem(IOManager *ioman,euint16 bufplace)
{
  808358:	defffd04 	addi	sp,sp,-12
  80835c:	df000215 	stw	fp,8(sp)
  808360:	df000204 	addi	fp,sp,8
  808364:	e13ffe15 	stw	r4,-8(fp)
  808368:	e17fff0d 	sth	r5,-4(fp)
    if(bufplace>=ioman->numbuf){
  80836c:	e0bffe17 	ldw	r2,-8(fp)
  808370:	1080020b 	ldhu	r2,8(r2)
  808374:	10ffffcc 	andi	r3,r2,65535
  808378:	e0bfff0b 	ldhu	r2,-4(fp)
  80837c:	10c00436 	bltu	r2,r3,808390 <ioman_resetCacheItem+0x38>
        ioman_setError(ioman,IOMAN_ERR_OPOUTOFBOUNDS);
  808380:	e0fffe17 	ldw	r3,-8(fp)
  808384:	00800144 	movi	r2,5
  808388:	18800305 	stb	r2,12(r3)
        return;
  80838c:	00001606 	br	8083e8 <ioman_resetCacheItem+0x90>
    }
    ioman->sector[bufplace]    = 0;
  808390:	e0bfff0b 	ldhu	r2,-4(fp)
  808394:	e0fffe17 	ldw	r3,-8(fp)
  808398:	1085883a 	add	r2,r2,r2
  80839c:	1085883a 	add	r2,r2,r2
  8083a0:	10c5883a 	add	r2,r2,r3
  8083a4:	10801c04 	addi	r2,r2,112
  8083a8:	10000015 	stw	zero,0(r2)
    ioman->status[bufplace]    = 0;
  8083ac:	e0ffff0b 	ldhu	r3,-4(fp)
  8083b0:	e0bffe17 	ldw	r2,-8(fp)
  8083b4:	1885883a 	add	r2,r3,r2
  8083b8:	10802004 	addi	r2,r2,128
  8083bc:	10000005 	stb	zero,0(r2)
    ioman->usage[bufplace]     = 0;
  8083c0:	e0ffff0b 	ldhu	r3,-4(fp)
  8083c4:	e0bffe17 	ldw	r2,-8(fp)
  8083c8:	1885883a 	add	r2,r3,r2
  8083cc:	10802104 	addi	r2,r2,132
  8083d0:	10000005 	stb	zero,0(r2)
    ioman->reference[bufplace] = 0;
  8083d4:	e0ffff0b 	ldhu	r3,-4(fp)
  8083d8:	e0bffe17 	ldw	r2,-8(fp)
  8083dc:	1885883a 	add	r2,r3,r2
  8083e0:	10802204 	addi	r2,r2,136
  8083e4:	10000005 	stb	zero,0(r2)
}
  8083e8:	e037883a 	mov	sp,fp
  8083ec:	df000017 	ldw	fp,0(sp)
  8083f0:	dec00104 	addi	sp,sp,4
  8083f4:	f800283a 	ret

008083f8 <ioman_findSectorInCache>:
/*****************************************************************************/

esint32 ioman_findSectorInCache(IOManager *ioman, euint32 address)
{
  8083f8:	defffa04 	addi	sp,sp,-24
  8083fc:	dfc00515 	stw	ra,20(sp)
  808400:	df000415 	stw	fp,16(sp)
  808404:	df000404 	addi	fp,sp,16
  808408:	e13ffd15 	stw	r4,-12(fp)
  80840c:	e17ffe15 	stw	r5,-8(fp)
    euint16 c;
    
    for(c=0;c<ioman->numbuf;c++){
  808410:	e03ffc0d 	sth	zero,-16(fp)
  808414:	00001606 	br	808470 <ioman_findSectorInCache+0x78>
        if(ioman_isValid(c) && ioman->sector[c] == address)return(c);
  808418:	e17ffc0b 	ldhu	r5,-16(fp)
  80841c:	e13ffd17 	ldw	r4,-12(fp)
  808420:	000d883a 	mov	r6,zero
  808424:	08079240 	call	807924 <ioman_getAttr>
  808428:	10803fcc 	andi	r2,r2,255
  80842c:	1005003a 	cmpeq	r2,r2,zero
  808430:	10000c1e 	bne	r2,zero,808464 <ioman_findSectorInCache+0x6c>
  808434:	e0bffc0b 	ldhu	r2,-16(fp)
  808438:	e0fffd17 	ldw	r3,-12(fp)
  80843c:	1085883a 	add	r2,r2,r2
  808440:	1085883a 	add	r2,r2,r2
  808444:	10c5883a 	add	r2,r2,r3
  808448:	10801c04 	addi	r2,r2,112
  80844c:	10c00017 	ldw	r3,0(r2)
  808450:	e0bffe17 	ldw	r2,-8(fp)
  808454:	1880031e 	bne	r3,r2,808464 <ioman_findSectorInCache+0x6c>
  808458:	e0bffc0b 	ldhu	r2,-16(fp)
  80845c:	e0bfff15 	stw	r2,-4(fp)
  808460:	00000a06 	br	80848c <ioman_findSectorInCache+0x94>

esint32 ioman_findSectorInCache(IOManager *ioman, euint32 address)
{
    euint16 c;
    
    for(c=0;c<ioman->numbuf;c++){
  808464:	e0bffc0b 	ldhu	r2,-16(fp)
  808468:	10800044 	addi	r2,r2,1
  80846c:	e0bffc0d 	sth	r2,-16(fp)
  808470:	e0bffd17 	ldw	r2,-12(fp)
  808474:	1080020b 	ldhu	r2,8(r2)
  808478:	10ffffcc 	andi	r3,r2,65535
  80847c:	e0bffc0b 	ldhu	r2,-16(fp)
  808480:	10ffe536 	bltu	r2,r3,808418 <ioman_findSectorInCache+0x20>
        if(ioman_isValid(c) && ioman->sector[c] == address)return(c);
    }
    return(-1);
  808484:	00bfffc4 	movi	r2,-1
  808488:	e0bfff15 	stw	r2,-4(fp)
  80848c:	e0bfff17 	ldw	r2,-4(fp)
}
  808490:	e037883a 	mov	sp,fp
  808494:	dfc00117 	ldw	ra,4(sp)
  808498:	df000017 	ldw	fp,0(sp)
  80849c:	dec00204 	addi	sp,sp,8
  8084a0:	f800283a 	ret

008084a4 <ioman_findFreeSpot>:
/*****************************************************************************/

esint32 ioman_findFreeSpot(IOManager *ioman)
{
  8084a4:	defffb04 	addi	sp,sp,-20
  8084a8:	dfc00415 	stw	ra,16(sp)
  8084ac:	df000315 	stw	fp,12(sp)
  8084b0:	df000304 	addi	fp,sp,12
  8084b4:	e13ffe15 	stw	r4,-8(fp)
    euint16 c;
    
    for(c=0;c<ioman->numbuf;c++){
  8084b8:	e03ffd0d 	sth	zero,-12(fp)
  8084bc:	00000d06 	br	8084f4 <ioman_findFreeSpot+0x50>
        if(!ioman_isValid(c))return(c);
  8084c0:	e17ffd0b 	ldhu	r5,-12(fp)
  8084c4:	e13ffe17 	ldw	r4,-8(fp)
  8084c8:	000d883a 	mov	r6,zero
  8084cc:	08079240 	call	807924 <ioman_getAttr>
  8084d0:	10803fcc 	andi	r2,r2,255
  8084d4:	1004c03a 	cmpne	r2,r2,zero
  8084d8:	1000031e 	bne	r2,zero,8084e8 <ioman_findFreeSpot+0x44>
  8084dc:	e0bffd0b 	ldhu	r2,-12(fp)
  8084e0:	e0bfff15 	stw	r2,-4(fp)
  8084e4:	00000a06 	br	808510 <ioman_findFreeSpot+0x6c>

esint32 ioman_findFreeSpot(IOManager *ioman)
{
    euint16 c;
    
    for(c=0;c<ioman->numbuf;c++){
  8084e8:	e0bffd0b 	ldhu	r2,-12(fp)
  8084ec:	10800044 	addi	r2,r2,1
  8084f0:	e0bffd0d 	sth	r2,-12(fp)
  8084f4:	e0bffe17 	ldw	r2,-8(fp)
  8084f8:	1080020b 	ldhu	r2,8(r2)
  8084fc:	10ffffcc 	andi	r3,r2,65535
  808500:	e0bffd0b 	ldhu	r2,-12(fp)
  808504:	10ffee36 	bltu	r2,r3,8084c0 <ioman_findFreeSpot+0x1c>
        if(!ioman_isValid(c))return(c);
    }
    return(-1);
  808508:	00bfffc4 	movi	r2,-1
  80850c:	e0bfff15 	stw	r2,-4(fp)
  808510:	e0bfff17 	ldw	r2,-4(fp)
}
  808514:	e037883a 	mov	sp,fp
  808518:	dfc00117 	ldw	ra,4(sp)
  80851c:	df000017 	ldw	fp,0(sp)
  808520:	dec00204 	addi	sp,sp,8
  808524:	f800283a 	ret

00808528 <ioman_findUnusedSpot>:
/*****************************************************************************/

esint32 ioman_findUnusedSpot(IOManager *ioman)
{
  808528:	defffb04 	addi	sp,sp,-20
  80852c:	dfc00415 	stw	ra,16(sp)
  808530:	df000315 	stw	fp,12(sp)
  808534:	df000304 	addi	fp,sp,12
  808538:	e13fff15 	stw	r4,-4(fp)
    esint32 r=-1;
  80853c:	00bfffc4 	movi	r2,-1
  808540:	e0bffe15 	stw	r2,-8(fp)
    euint16 c;
    euint8 fr=0,lr=0xFF;
  808544:	e03ffd45 	stb	zero,-11(fp)
  808548:	00bfffc4 	movi	r2,-1
  80854c:	e0bffd05 	stb	r2,-12(fp)
    
    for(c=0;c<ioman->numbuf;c++){
  808550:	e03ffd8d 	sth	zero,-10(fp)
  808554:	00004506 	br	80866c <ioman_findUnusedSpot+0x144>
        if(ioman_getUseCnt(ioman,c)==0){
  808558:	e17ffd8b 	ldhu	r5,-10(fp)
  80855c:	e13fff17 	ldw	r4,-4(fp)
  808560:	08079ac0 	call	8079ac <ioman_getUseCnt>
  808564:	10803fcc 	andi	r2,r2,255
  808568:	1004c03a 	cmpne	r2,r2,zero
  80856c:	10003c1e 	bne	r2,zero,808660 <ioman_findUnusedSpot+0x138>
            if(!ioman_isWritable(c) && !fr){
  808570:	e17ffd8b 	ldhu	r5,-10(fp)
  808574:	e13fff17 	ldw	r4,-4(fp)
  808578:	01800084 	movi	r6,2
  80857c:	08079240 	call	807924 <ioman_getAttr>
  808580:	10803fcc 	andi	r2,r2,255
  808584:	1004c03a 	cmpne	r2,r2,zero
  808588:	1000091e 	bne	r2,zero,8085b0 <ioman_findUnusedSpot+0x88>
  80858c:	e0bffd43 	ldbu	r2,-11(fp)
  808590:	1004c03a 	cmpne	r2,r2,zero
  808594:	1000061e 	bne	r2,zero,8085b0 <ioman_findUnusedSpot+0x88>
                fr=1;
  808598:	00800044 	movi	r2,1
  80859c:	e0bffd45 	stb	r2,-11(fp)
                lr=0xFF;
  8085a0:	00bfffc4 	movi	r2,-1
  8085a4:	e0bffd05 	stb	r2,-12(fp)
                r=-1;
  8085a8:	00bfffc4 	movi	r2,-1
  8085ac:	e0bffe15 	stw	r2,-8(fp)
            }
            if(ioman_isWritable(c) && !fr){
  8085b0:	e17ffd8b 	ldhu	r5,-10(fp)
  8085b4:	e13fff17 	ldw	r4,-4(fp)
  8085b8:	01800084 	movi	r6,2
  8085bc:	08079240 	call	807924 <ioman_getAttr>
  8085c0:	10803fcc 	andi	r2,r2,255
  8085c4:	1005003a 	cmpeq	r2,r2,zero
  8085c8:	10000f1e 	bne	r2,zero,808608 <ioman_findUnusedSpot+0xe0>
  8085cc:	e0bffd43 	ldbu	r2,-11(fp)
  8085d0:	1004c03a 	cmpne	r2,r2,zero
  8085d4:	10000c1e 	bne	r2,zero,808608 <ioman_findUnusedSpot+0xe0>
                if(ioman_getRefCnt(ioman,c)<=lr){
  8085d8:	e17ffd8b 	ldhu	r5,-10(fp)
  8085dc:	e13fff17 	ldw	r4,-4(fp)
  8085e0:	0807b9c0 	call	807b9c <ioman_getRefCnt>
  8085e4:	10c03fcc 	andi	r3,r2,255
  8085e8:	e0bffd03 	ldbu	r2,-12(fp)
  8085ec:	10c00636 	bltu	r2,r3,808608 <ioman_findUnusedSpot+0xe0>
                    r=c;
  8085f0:	e0bffd8b 	ldhu	r2,-10(fp)
  8085f4:	e0bffe15 	stw	r2,-8(fp)
                    lr=ioman_getRefCnt(ioman,c);
  8085f8:	e17ffd8b 	ldhu	r5,-10(fp)
  8085fc:	e13fff17 	ldw	r4,-4(fp)
  808600:	0807b9c0 	call	807b9c <ioman_getRefCnt>
  808604:	e0bffd05 	stb	r2,-12(fp)
                }
            }
            if(fr && !ioman_isWritable(c)){
  808608:	e0bffd43 	ldbu	r2,-11(fp)
  80860c:	1005003a 	cmpeq	r2,r2,zero
  808610:	1000131e 	bne	r2,zero,808660 <ioman_findUnusedSpot+0x138>
  808614:	e17ffd8b 	ldhu	r5,-10(fp)
  808618:	e13fff17 	ldw	r4,-4(fp)
  80861c:	01800084 	movi	r6,2
  808620:	08079240 	call	807924 <ioman_getAttr>
  808624:	10803fcc 	andi	r2,r2,255
  808628:	1004c03a 	cmpne	r2,r2,zero
  80862c:	10000c1e 	bne	r2,zero,808660 <ioman_findUnusedSpot+0x138>
                if(ioman_getRefCnt(ioman,c)<=lr){
  808630:	e17ffd8b 	ldhu	r5,-10(fp)
  808634:	e13fff17 	ldw	r4,-4(fp)
  808638:	0807b9c0 	call	807b9c <ioman_getRefCnt>
  80863c:	10c03fcc 	andi	r3,r2,255
  808640:	e0bffd03 	ldbu	r2,-12(fp)
  808644:	10c00636 	bltu	r2,r3,808660 <ioman_findUnusedSpot+0x138>
                    r=c;
  808648:	e0bffd8b 	ldhu	r2,-10(fp)
  80864c:	e0bffe15 	stw	r2,-8(fp)
                    lr=ioman_getRefCnt(ioman,c);
  808650:	e17ffd8b 	ldhu	r5,-10(fp)
  808654:	e13fff17 	ldw	r4,-4(fp)
  808658:	0807b9c0 	call	807b9c <ioman_getRefCnt>
  80865c:	e0bffd05 	stb	r2,-12(fp)
{
    esint32 r=-1;
    euint16 c;
    euint8 fr=0,lr=0xFF;
    
    for(c=0;c<ioman->numbuf;c++){
  808660:	e0bffd8b 	ldhu	r2,-10(fp)
  808664:	10800044 	addi	r2,r2,1
  808668:	e0bffd8d 	sth	r2,-10(fp)
  80866c:	e0bfff17 	ldw	r2,-4(fp)
  808670:	1080020b 	ldhu	r2,8(r2)
  808674:	10ffffcc 	andi	r3,r2,65535
  808678:	e0bffd8b 	ldhu	r2,-10(fp)
  80867c:	10ffb636 	bltu	r2,r3,808558 <ioman_findUnusedSpot+0x30>
                    lr=ioman_getRefCnt(ioman,c);
                }
            }
        }
    }
    return(r);
  808680:	e0bffe17 	ldw	r2,-8(fp)
}
  808684:	e037883a 	mov	sp,fp
  808688:	dfc00117 	ldw	ra,4(sp)
  80868c:	df000017 	ldw	fp,0(sp)
  808690:	dec00204 	addi	sp,sp,8
  808694:	f800283a 	ret

00808698 <ioman_findOverallocableSpot>:
/*****************************************************************************/

esint32 ioman_findOverallocableSpot(IOManager *ioman)
{
  808698:	defffb04 	addi	sp,sp,-20
  80869c:	dfc00415 	stw	ra,16(sp)
  8086a0:	df000315 	stw	fp,12(sp)
  8086a4:	df000304 	addi	fp,sp,12
  8086a8:	e13fff15 	stw	r4,-4(fp)
    euint8 points,lp=0xFF;
  8086ac:	00bfffc4 	movi	r2,-1
  8086b0:	e0bffe85 	stb	r2,-6(fp)
    euint16 c;
    esint32 r=-1;
  8086b4:	00bfffc4 	movi	r2,-1
  8086b8:	e0bffd15 	stw	r2,-12(fp)
    
    for(c=0;c<ioman->numbuf;c++){
  8086bc:	e03ffe0d 	sth	zero,-8(fp)
  8086c0:	00003d06 	br	8087b8 <ioman_findOverallocableSpot+0x120>
        if(ioman->itptr[c]<ioman->numit){
  8086c4:	e0fffe0b 	ldhu	r3,-8(fp)
  8086c8:	e0bfff17 	ldw	r2,-4(fp)
  8086cc:	1885883a 	add	r2,r3,r2
  8086d0:	10802304 	addi	r2,r2,140
  8086d4:	10800003 	ldbu	r2,0(r2)
  8086d8:	10c03fcc 	andi	r3,r2,255
  8086dc:	e0bfff17 	ldw	r2,-4(fp)
  8086e0:	1080028b 	ldhu	r2,10(r2)
  8086e4:	18ffffcc 	andi	r3,r3,65535
  8086e8:	10bfffcc 	andi	r2,r2,65535
  8086ec:	18802f2e 	bgeu	r3,r2,8087ac <ioman_findOverallocableSpot+0x114>
            points = 0;
  8086f0:	e03ffec5 	stb	zero,-5(fp)
            if(ioman_isWritable(c))points+=0x7F;
  8086f4:	e17ffe0b 	ldhu	r5,-8(fp)
  8086f8:	e13fff17 	ldw	r4,-4(fp)
  8086fc:	01800084 	movi	r6,2
  808700:	08079240 	call	807924 <ioman_getAttr>
  808704:	10803fcc 	andi	r2,r2,255
  808708:	1005003a 	cmpeq	r2,r2,zero
  80870c:	1000031e 	bne	r2,zero,80871c <ioman_findOverallocableSpot+0x84>
  808710:	e0bffec3 	ldbu	r2,-5(fp)
  808714:	10801fc4 	addi	r2,r2,127
  808718:	e0bffec5 	stb	r2,-5(fp)
            points += ((euint16)(ioman->itptr[c]*0x4D))/(ioman->numit);
  80871c:	e0fffe0b 	ldhu	r3,-8(fp)
  808720:	e0bfff17 	ldw	r2,-4(fp)
  808724:	1885883a 	add	r2,r3,r2
  808728:	10802304 	addi	r2,r2,140
  80872c:	10800003 	ldbu	r2,0(r2)
  808730:	10803fcc 	andi	r2,r2,255
  808734:	10801364 	muli	r2,r2,77
  808738:	1007883a 	mov	r3,r2
  80873c:	e0bfff17 	ldw	r2,-4(fp)
  808740:	1080028b 	ldhu	r2,10(r2)
  808744:	193fffcc 	andi	r4,r3,65535
  808748:	117fffcc 	andi	r5,r2,65535
  80874c:	08111d40 	call	8111d4 <__udivsi3>
  808750:	1007883a 	mov	r3,r2
  808754:	e0bffec3 	ldbu	r2,-5(fp)
  808758:	10c5883a 	add	r2,r2,r3
  80875c:	e0bffec5 	stb	r2,-5(fp)
            points += ((euint16)(ioman_getRefCnt(ioman,c)*0x33))/0xFF;
  808760:	e17ffe0b 	ldhu	r5,-8(fp)
  808764:	e13fff17 	ldw	r4,-4(fp)
  808768:	0807b9c0 	call	807b9c <ioman_getRefCnt>
  80876c:	10803fcc 	andi	r2,r2,255
  808770:	10800ce4 	muli	r2,r2,51
  808774:	113fffcc 	andi	r4,r2,65535
  808778:	01403fc4 	movi	r5,255
  80877c:	08111d40 	call	8111d4 <__udivsi3>
  808780:	1007883a 	mov	r3,r2
  808784:	e0bffec3 	ldbu	r2,-5(fp)
  808788:	10c5883a 	add	r2,r2,r3
  80878c:	e0bffec5 	stb	r2,-5(fp)
            if(points<lp){
  808790:	e0fffec3 	ldbu	r3,-5(fp)
  808794:	e0bffe83 	ldbu	r2,-6(fp)
  808798:	1880042e 	bgeu	r3,r2,8087ac <ioman_findOverallocableSpot+0x114>
                lp=points;
  80879c:	e0bffec3 	ldbu	r2,-5(fp)
  8087a0:	e0bffe85 	stb	r2,-6(fp)
                r=c;
  8087a4:	e0bffe0b 	ldhu	r2,-8(fp)
  8087a8:	e0bffd15 	stw	r2,-12(fp)
{
    euint8 points,lp=0xFF;
    euint16 c;
    esint32 r=-1;
    
    for(c=0;c<ioman->numbuf;c++){
  8087ac:	e0bffe0b 	ldhu	r2,-8(fp)
  8087b0:	10800044 	addi	r2,r2,1
  8087b4:	e0bffe0d 	sth	r2,-8(fp)
  8087b8:	e0bfff17 	ldw	r2,-4(fp)
  8087bc:	1080020b 	ldhu	r2,8(r2)
  8087c0:	10ffffcc 	andi	r3,r2,65535
  8087c4:	e0bffe0b 	ldhu	r2,-8(fp)
  8087c8:	10ffbe36 	bltu	r2,r3,8086c4 <ioman_findOverallocableSpot+0x2c>
                lp=points;
                r=c;
            }
        }
    }
    return(r);
  8087cc:	e0bffd17 	ldw	r2,-12(fp)
}
  8087d0:	e037883a 	mov	sp,fp
  8087d4:	dfc00117 	ldw	ra,4(sp)
  8087d8:	df000017 	ldw	fp,0(sp)
  8087dc:	dec00204 	addi	sp,sp,8
  8087e0:	f800283a 	ret

008087e4 <ioman_putSectorInCache>:
/*****************************************************************************/

esint8 ioman_putSectorInCache(IOManager *ioman, euint32 address, euint16 bufplace)
{
  8087e4:	defff904 	addi	sp,sp,-28
  8087e8:	dfc00615 	stw	ra,24(sp)
  8087ec:	df000515 	stw	fp,20(sp)
  8087f0:	df000504 	addi	fp,sp,20
  8087f4:	e13ffc15 	stw	r4,-16(fp)
  8087f8:	e17ffd15 	stw	r5,-12(fp)
  8087fc:	e1bffe0d 	sth	r6,-8(fp)
    euint8* buf;
    
    if((buf = ioman_getPtr(ioman,bufplace))==0){
  808800:	e17ffe0b 	ldhu	r5,-8(fp)
  808804:	e13ffc17 	ldw	r4,-16(fp)
  808808:	08081200 	call	808120 <ioman_getPtr>
  80880c:	e0bffb15 	stw	r2,-20(fp)
  808810:	e0bffb17 	ldw	r2,-20(fp)
  808814:	1004c03a 	cmpne	r2,r2,zero
  808818:	1000061e 	bne	r2,zero,808834 <ioman_putSectorInCache+0x50>
        ioman_setError(ioman,IOMAN_ERR_CACHEPTROUTOFRANGE);
  80881c:	e0fffc17 	ldw	r3,-16(fp)
  808820:	00800204 	movi	r2,8
  808824:	18800305 	stb	r2,12(r3)
        return(-1);
  808828:	00bfffc4 	movi	r2,-1
  80882c:	e0bfff15 	stw	r2,-4(fp)
  808830:	00001d06 	br	8088a8 <ioman_putSectorInCache+0xc4>
    }
    if((ioman_readSector(ioman,address,buf))){
  808834:	e13ffc17 	ldw	r4,-16(fp)
  808838:	e17ffd17 	ldw	r5,-12(fp)
  80883c:	e1bffb17 	ldw	r6,-20(fp)
  808840:	08082400 	call	808240 <ioman_readSector>
  808844:	10803fcc 	andi	r2,r2,255
  808848:	1080201c 	xori	r2,r2,128
  80884c:	10bfe004 	addi	r2,r2,-128
  808850:	1005003a 	cmpeq	r2,r2,zero
  808854:	1000061e 	bne	r2,zero,808870 <ioman_putSectorInCache+0x8c>
        ioman_setError(ioman,IOMAN_ERR_READFAIL);
  808858:	e0fffc17 	ldw	r3,-16(fp)
  80885c:	008000c4 	movi	r2,3
  808860:	18800305 	stb	r2,12(r3)
        return(-1);
  808864:	00bfffc4 	movi	r2,-1
  808868:	e0bfff15 	stw	r2,-4(fp)
  80886c:	00000e06 	br	8088a8 <ioman_putSectorInCache+0xc4>
    }
    ioman_setValid(bufplace);
  808870:	e17ffe0b 	ldhu	r5,-8(fp)
  808874:	e13ffc17 	ldw	r4,-16(fp)
  808878:	000d883a 	mov	r6,zero
  80887c:	01c00044 	movi	r7,1
  808880:	08078400 	call	807840 <ioman_setAttr>
    ioman->sector[bufplace]=address;
  808884:	e0bffe0b 	ldhu	r2,-8(fp)
  808888:	e0fffc17 	ldw	r3,-16(fp)
  80888c:	1085883a 	add	r2,r2,r2
  808890:	1085883a 	add	r2,r2,r2
  808894:	10c5883a 	add	r2,r2,r3
  808898:	10c01c04 	addi	r3,r2,112
  80889c:	e0bffd17 	ldw	r2,-12(fp)
  8088a0:	18800015 	stw	r2,0(r3)
    return(0);
  8088a4:	e03fff15 	stw	zero,-4(fp)
  8088a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8088ac:	e037883a 	mov	sp,fp
  8088b0:	dfc00117 	ldw	ra,4(sp)
  8088b4:	df000017 	ldw	fp,0(sp)
  8088b8:	dec00204 	addi	sp,sp,8
  8088bc:	f800283a 	ret

008088c0 <ioman_flushSector>:
/*****************  if(bufplace>=ioman->numbuf)return;
************************************************************/

esint8 ioman_flushSector(IOManager *ioman, euint16 bufplace)
{
  8088c0:	defffa04 	addi	sp,sp,-24
  8088c4:	dfc00515 	stw	ra,20(sp)
  8088c8:	df000415 	stw	fp,16(sp)
  8088cc:	df000404 	addi	fp,sp,16
  8088d0:	e13ffd15 	stw	r4,-12(fp)
  8088d4:	e17ffe0d 	sth	r5,-8(fp)
    euint8* buf;
    
    if((buf = ioman_getPtr(ioman,bufplace))==0){
  8088d8:	e17ffe0b 	ldhu	r5,-8(fp)
  8088dc:	e13ffd17 	ldw	r4,-12(fp)
  8088e0:	08081200 	call	808120 <ioman_getPtr>
  8088e4:	e0bffc15 	stw	r2,-16(fp)
  8088e8:	e0bffc17 	ldw	r2,-16(fp)
  8088ec:	1004c03a 	cmpne	r2,r2,zero
  8088f0:	1000061e 	bne	r2,zero,80890c <ioman_flushSector+0x4c>
        ioman_setError(ioman,IOMAN_ERR_CACHEPTROUTOFRANGE);
  8088f4:	e0fffd17 	ldw	r3,-12(fp)
  8088f8:	00800204 	movi	r2,8
  8088fc:	18800305 	stb	r2,12(r3)
        return(-1);
  808900:	00bfffc4 	movi	r2,-1
  808904:	e0bfff15 	stw	r2,-4(fp)
  808908:	00002c06 	br	8089bc <ioman_flushSector+0xfc>
    }
    if(!ioman_isWritable(bufplace)){
  80890c:	e17ffe0b 	ldhu	r5,-8(fp)
  808910:	e13ffd17 	ldw	r4,-12(fp)
  808914:	01800084 	movi	r6,2
  808918:	08079240 	call	807924 <ioman_getAttr>
  80891c:	10803fcc 	andi	r2,r2,255
  808920:	1004c03a 	cmpne	r2,r2,zero
  808924:	1000061e 	bne	r2,zero,808940 <ioman_flushSector+0x80>
        ioman_setError(ioman,IOMAN_ERR_WRITEREADONLYSECTOR);
  808928:	e0fffd17 	ldw	r3,-12(fp)
  80892c:	00800244 	movi	r2,9
  808930:	18800305 	stb	r2,12(r3)
        return(-1);
  808934:	00bfffc4 	movi	r2,-1
  808938:	e0bfff15 	stw	r2,-4(fp)
  80893c:	00001f06 	br	8089bc <ioman_flushSector+0xfc>
    }
    if(!(ioman_writeSector(ioman,ioman->sector[bufplace],buf))){
  808940:	e0bffe0b 	ldhu	r2,-8(fp)
  808944:	e0fffd17 	ldw	r3,-12(fp)
  808948:	1085883a 	add	r2,r2,r2
  80894c:	1085883a 	add	r2,r2,r2
  808950:	10c5883a 	add	r2,r2,r3
  808954:	10801c04 	addi	r2,r2,112
  808958:	11400017 	ldw	r5,0(r2)
  80895c:	e13ffd17 	ldw	r4,-12(fp)
  808960:	e1bffc17 	ldw	r6,-16(fp)
  808964:	08082cc0 	call	8082cc <ioman_writeSector>
  808968:	10803fcc 	andi	r2,r2,255
  80896c:	1080201c 	xori	r2,r2,128
  808970:	10bfe004 	addi	r2,r2,-128
  808974:	1004c03a 	cmpne	r2,r2,zero
  808978:	1000061e 	bne	r2,zero,808994 <ioman_flushSector+0xd4>
        ioman_setError(ioman,IOMAN_ERR_WRITEFAIL);  
  80897c:	e0fffd17 	ldw	r3,-12(fp)
  808980:	00800104 	movi	r2,4
  808984:	18800305 	stb	r2,12(r3)
        return(-1);
  808988:	00bfffc4 	movi	r2,-1
  80898c:	e0bfff15 	stw	r2,-4(fp)
  808990:	00000a06 	br	8089bc <ioman_flushSector+0xfc>
    }
    if(ioman->usage==0)ioman_setNotWritable(bufplace);
  808994:	e0bffd17 	ldw	r2,-12(fp)
  808998:	10802104 	addi	r2,r2,132
  80899c:	1004c03a 	cmpne	r2,r2,zero
  8089a0:	1000051e 	bne	r2,zero,8089b8 <ioman_flushSector+0xf8>
  8089a4:	e17ffe0b 	ldhu	r5,-8(fp)
  8089a8:	e13ffd17 	ldw	r4,-12(fp)
  8089ac:	01800084 	movi	r6,2
  8089b0:	000f883a 	mov	r7,zero
  8089b4:	08078400 	call	807840 <ioman_setAttr>
    return(0);
  8089b8:	e03fff15 	stw	zero,-4(fp)
  8089bc:	e0bfff17 	ldw	r2,-4(fp)
}
  8089c0:	e037883a 	mov	sp,fp
  8089c4:	dfc00117 	ldw	ra,4(sp)
  8089c8:	df000017 	ldw	fp,0(sp)
  8089cc:	dec00204 	addi	sp,sp,8
  8089d0:	f800283a 	ret

008089d4 <ioman_flushRange>:
/*****************************************************************************/

esint8 ioman_flushRange(IOManager *ioman,euint32 address_low, euint32 address_high)
{
  8089d4:	defff904 	addi	sp,sp,-28
  8089d8:	dfc00615 	stw	ra,24(sp)
  8089dc:	df000515 	stw	fp,20(sp)
  8089e0:	df000504 	addi	fp,sp,20
  8089e4:	e13ffc15 	stw	r4,-16(fp)
  8089e8:	e17ffd15 	stw	r5,-12(fp)
  8089ec:	e1bffe15 	stw	r6,-8(fp)
    euint32 c;
    
    if(address_low>address_high){
  8089f0:	e0fffd17 	ldw	r3,-12(fp)
  8089f4:	e0bffe17 	ldw	r2,-8(fp)
  8089f8:	10c0062e 	bgeu	r2,r3,808a14 <ioman_flushRange+0x40>
        c=address_low; address_low=address_high;address_high=c;
  8089fc:	e0bffd17 	ldw	r2,-12(fp)
  808a00:	e0bffb15 	stw	r2,-20(fp)
  808a04:	e0bffe17 	ldw	r2,-8(fp)
  808a08:	e0bffd15 	stw	r2,-12(fp)
  808a0c:	e0bffb17 	ldw	r2,-20(fp)
  808a10:	e0bffe15 	stw	r2,-8(fp)
    }
    
    for(c=0;c<ioman->numbuf;c++){
  808a14:	e03ffb15 	stw	zero,-20(fp)
  808a18:	00003706 	br	808af8 <ioman_flushRange+0x124>
        if((ioman->sector[c]>=address_low) && (ioman->sector[c]<=address_high) && (ioman_isWritable(c))){
  808a1c:	e0bffb17 	ldw	r2,-20(fp)
  808a20:	e0fffc17 	ldw	r3,-16(fp)
  808a24:	1085883a 	add	r2,r2,r2
  808a28:	1085883a 	add	r2,r2,r2
  808a2c:	10c5883a 	add	r2,r2,r3
  808a30:	10801c04 	addi	r2,r2,112
  808a34:	10c00017 	ldw	r3,0(r2)
  808a38:	e0bffd17 	ldw	r2,-12(fp)
  808a3c:	18802b36 	bltu	r3,r2,808aec <ioman_flushRange+0x118>
  808a40:	e0bffb17 	ldw	r2,-20(fp)
  808a44:	e0fffc17 	ldw	r3,-16(fp)
  808a48:	1085883a 	add	r2,r2,r2
  808a4c:	1085883a 	add	r2,r2,r2
  808a50:	10c5883a 	add	r2,r2,r3
  808a54:	10801c04 	addi	r2,r2,112
  808a58:	10c00017 	ldw	r3,0(r2)
  808a5c:	e0bffe17 	ldw	r2,-8(fp)
  808a60:	10c02236 	bltu	r2,r3,808aec <ioman_flushRange+0x118>
  808a64:	e0bffb17 	ldw	r2,-20(fp)
  808a68:	117fffcc 	andi	r5,r2,65535
  808a6c:	e13ffc17 	ldw	r4,-16(fp)
  808a70:	01800084 	movi	r6,2
  808a74:	08079240 	call	807924 <ioman_getAttr>
  808a78:	10803fcc 	andi	r2,r2,255
  808a7c:	1005003a 	cmpeq	r2,r2,zero
  808a80:	10001a1e 	bne	r2,zero,808aec <ioman_flushRange+0x118>
            if(ioman_flushSector(ioman,c)){
  808a84:	e0bffb17 	ldw	r2,-20(fp)
  808a88:	117fffcc 	andi	r5,r2,65535
  808a8c:	e13ffc17 	ldw	r4,-16(fp)
  808a90:	08088c00 	call	8088c0 <ioman_flushSector>
  808a94:	10803fcc 	andi	r2,r2,255
  808a98:	1080201c 	xori	r2,r2,128
  808a9c:	10bfe004 	addi	r2,r2,-128
  808aa0:	1005003a 	cmpeq	r2,r2,zero
  808aa4:	1000031e 	bne	r2,zero,808ab4 <ioman_flushRange+0xe0>
                return(-1);
  808aa8:	00bfffc4 	movi	r2,-1
  808aac:	e0bfff15 	stw	r2,-4(fp)
  808ab0:	00001706 	br	808b10 <ioman_flushRange+0x13c>
            }
            if(ioman->usage[c]==0)ioman_setNotWritable(c);
  808ab4:	e0fffb17 	ldw	r3,-20(fp)
  808ab8:	e0bffc17 	ldw	r2,-16(fp)
  808abc:	1885883a 	add	r2,r3,r2
  808ac0:	10802104 	addi	r2,r2,132
  808ac4:	10800003 	ldbu	r2,0(r2)
  808ac8:	10803fcc 	andi	r2,r2,255
  808acc:	1004c03a 	cmpne	r2,r2,zero
  808ad0:	1000061e 	bne	r2,zero,808aec <ioman_flushRange+0x118>
  808ad4:	e0bffb17 	ldw	r2,-20(fp)
  808ad8:	117fffcc 	andi	r5,r2,65535
  808adc:	e13ffc17 	ldw	r4,-16(fp)
  808ae0:	01800084 	movi	r6,2
  808ae4:	000f883a 	mov	r7,zero
  808ae8:	08078400 	call	807840 <ioman_setAttr>
    
    if(address_low>address_high){
        c=address_low; address_low=address_high;address_high=c;
    }
    
    for(c=0;c<ioman->numbuf;c++){
  808aec:	e0bffb17 	ldw	r2,-20(fp)
  808af0:	10800044 	addi	r2,r2,1
  808af4:	e0bffb15 	stw	r2,-20(fp)
  808af8:	e0bffc17 	ldw	r2,-16(fp)
  808afc:	1080020b 	ldhu	r2,8(r2)
  808b00:	10ffffcc 	andi	r3,r2,65535
  808b04:	e0bffb17 	ldw	r2,-20(fp)
  808b08:	10ffc436 	bltu	r2,r3,808a1c <ioman_flushRange+0x48>
                return(-1);
            }
            if(ioman->usage[c]==0)ioman_setNotWritable(c);
        }
    }
    return(0);
  808b0c:	e03fff15 	stw	zero,-4(fp)
  808b10:	e0bfff17 	ldw	r2,-4(fp)
}
  808b14:	e037883a 	mov	sp,fp
  808b18:	dfc00117 	ldw	ra,4(sp)
  808b1c:	df000017 	ldw	fp,0(sp)
  808b20:	dec00204 	addi	sp,sp,8
  808b24:	f800283a 	ret

00808b28 <ioman_flushAll>:
/*****************************************************************************/

esint8 ioman_flushAll(IOManager *ioman)
{
  808b28:	defffb04 	addi	sp,sp,-20
  808b2c:	dfc00415 	stw	ra,16(sp)
  808b30:	df000315 	stw	fp,12(sp)
  808b34:	df000304 	addi	fp,sp,12
  808b38:	e13ffe15 	stw	r4,-8(fp)
    euint16 c;
    
    for(c=0;c<ioman->numbuf;c++){
  808b3c:	e03ffd0d 	sth	zero,-12(fp)
  808b40:	00002206 	br	808bcc <ioman_flushAll+0xa4>
        if(ioman_isWritable(c)){
  808b44:	e17ffd0b 	ldhu	r5,-12(fp)
  808b48:	e13ffe17 	ldw	r4,-8(fp)
  808b4c:	01800084 	movi	r6,2
  808b50:	08079240 	call	807924 <ioman_getAttr>
  808b54:	10803fcc 	andi	r2,r2,255
  808b58:	1005003a 	cmpeq	r2,r2,zero
  808b5c:	1000181e 	bne	r2,zero,808bc0 <ioman_flushAll+0x98>
            if(ioman_flushSector(ioman,c)){
  808b60:	e17ffd0b 	ldhu	r5,-12(fp)
  808b64:	e13ffe17 	ldw	r4,-8(fp)
  808b68:	08088c00 	call	8088c0 <ioman_flushSector>
  808b6c:	10803fcc 	andi	r2,r2,255
  808b70:	1080201c 	xori	r2,r2,128
  808b74:	10bfe004 	addi	r2,r2,-128
  808b78:	1005003a 	cmpeq	r2,r2,zero
  808b7c:	1000031e 	bne	r2,zero,808b8c <ioman_flushAll+0x64>
                return(-1);
  808b80:	00bfffc4 	movi	r2,-1
  808b84:	e0bfff15 	stw	r2,-4(fp)
  808b88:	00001606 	br	808be4 <ioman_flushAll+0xbc>
            }
            if(ioman->usage[c]==0)ioman_setNotWritable(c);
  808b8c:	e0fffd0b 	ldhu	r3,-12(fp)
  808b90:	e0bffe17 	ldw	r2,-8(fp)
  808b94:	1885883a 	add	r2,r3,r2
  808b98:	10802104 	addi	r2,r2,132
  808b9c:	10800003 	ldbu	r2,0(r2)
  808ba0:	10803fcc 	andi	r2,r2,255
  808ba4:	1004c03a 	cmpne	r2,r2,zero
  808ba8:	1000051e 	bne	r2,zero,808bc0 <ioman_flushAll+0x98>
  808bac:	e17ffd0b 	ldhu	r5,-12(fp)
  808bb0:	e13ffe17 	ldw	r4,-8(fp)
  808bb4:	01800084 	movi	r6,2
  808bb8:	000f883a 	mov	r7,zero
  808bbc:	08078400 	call	807840 <ioman_setAttr>

esint8 ioman_flushAll(IOManager *ioman)
{
    euint16 c;
    
    for(c=0;c<ioman->numbuf;c++){
  808bc0:	e0bffd0b 	ldhu	r2,-12(fp)
  808bc4:	10800044 	addi	r2,r2,1
  808bc8:	e0bffd0d 	sth	r2,-12(fp)
  808bcc:	e0bffe17 	ldw	r2,-8(fp)
  808bd0:	1080020b 	ldhu	r2,8(r2)
  808bd4:	10ffffcc 	andi	r3,r2,65535
  808bd8:	e0bffd0b 	ldhu	r2,-12(fp)
  808bdc:	10ffd936 	bltu	r2,r3,808b44 <ioman_flushAll+0x1c>
                return(-1);
            }
            if(ioman->usage[c]==0)ioman_setNotWritable(c);
        }
    }
    return(0);
  808be0:	e03fff15 	stw	zero,-4(fp)
  808be4:	e0bfff17 	ldw	r2,-4(fp)
}
  808be8:	e037883a 	mov	sp,fp
  808bec:	dfc00117 	ldw	ra,4(sp)
  808bf0:	df000017 	ldw	fp,0(sp)
  808bf4:	dec00204 	addi	sp,sp,8
  808bf8:	f800283a 	ret

00808bfc <ioman_getSector>:
/*****************************************************************************/

euint8* ioman_getSector(IOManager *ioman,euint32 address, euint8 mode)
{
  808bfc:	defff904 	addi	sp,sp,-28
  808c00:	dfc00615 	stw	ra,24(sp)
  808c04:	df000515 	stw	fp,20(sp)
  808c08:	df000504 	addi	fp,sp,20
  808c0c:	e13ffc15 	stw	r4,-16(fp)
  808c10:	e17ffd15 	stw	r5,-12(fp)
  808c14:	e1bffe05 	stb	r6,-8(fp)
    esint32 bp;
    
    if((bp=ioman_findSectorInCache(ioman,address))!=-1){
  808c18:	e13ffc17 	ldw	r4,-16(fp)
  808c1c:	e17ffd17 	ldw	r5,-12(fp)
  808c20:	08083f80 	call	8083f8 <ioman_findSectorInCache>
  808c24:	e0bffb15 	stw	r2,-20(fp)
  808c28:	e0bffb17 	ldw	r2,-20(fp)
  808c2c:	10bfffe0 	cmpeqi	r2,r2,-1
  808c30:	10001c1e 	bne	r2,zero,808ca4 <ioman_getSector+0xa8>
        if(ioman_isReqRw(mode)){
  808c34:	e0bffe03 	ldbu	r2,-8(fp)
  808c38:	1080008c 	andi	r2,r2,2
  808c3c:	1005003a 	cmpeq	r2,r2,zero
  808c40:	1000061e 	bne	r2,zero,808c5c <ioman_getSector+0x60>
            ioman_setWritable(bp);
  808c44:	e0bffb17 	ldw	r2,-20(fp)
  808c48:	117fffcc 	andi	r5,r2,65535
  808c4c:	e13ffc17 	ldw	r4,-16(fp)
  808c50:	01800084 	movi	r6,2
  808c54:	01c00044 	movi	r7,1
  808c58:	08078400 	call	807840 <ioman_setAttr>
        }
        ioman_incUseCnt(ioman,bp);
  808c5c:	e0bffb17 	ldw	r2,-20(fp)
  808c60:	117fffcc 	andi	r5,r2,65535
  808c64:	e13ffc17 	ldw	r4,-16(fp)
  808c68:	0807a180 	call	807a18 <ioman_incUseCnt>
        if(!ioman_isReqExp(mode))ioman_incRefCnt(ioman,bp);
  808c6c:	e0bffe03 	ldbu	r2,-8(fp)
  808c70:	1080010c 	andi	r2,r2,4
  808c74:	1004c03a 	cmpne	r2,r2,zero
  808c78:	1000041e 	bne	r2,zero,808c8c <ioman_getSector+0x90>
  808c7c:	e0bffb17 	ldw	r2,-20(fp)
  808c80:	117fffcc 	andi	r5,r2,65535
  808c84:	e13ffc17 	ldw	r4,-16(fp)
  808c88:	0807c080 	call	807c08 <ioman_incRefCnt>
        return(ioman_getPtr(ioman,bp));
  808c8c:	e0bffb17 	ldw	r2,-20(fp)
  808c90:	117fffcc 	andi	r5,r2,65535
  808c94:	e13ffc17 	ldw	r4,-16(fp)
  808c98:	08081200 	call	808120 <ioman_getPtr>
  808c9c:	e0bfff15 	stw	r2,-4(fp)
  808ca0:	00009306 	br	808ef0 <ioman_getSector+0x2f4>
    }
    
    if((bp=ioman_findFreeSpot(ioman))==-1){
  808ca4:	e13ffc17 	ldw	r4,-16(fp)
  808ca8:	08084a40 	call	8084a4 <ioman_findFreeSpot>
  808cac:	e0bffb15 	stw	r2,-20(fp)
  808cb0:	e0bffb17 	ldw	r2,-20(fp)
  808cb4:	10bfffd8 	cmpnei	r2,r2,-1
  808cb8:	1000121e 	bne	r2,zero,808d04 <ioman_getSector+0x108>
        if(((bp=ioman_findUnusedSpot(ioman))!=-1)&&(ioman_isWritable(bp))){
  808cbc:	e13ffc17 	ldw	r4,-16(fp)
  808cc0:	08085280 	call	808528 <ioman_findUnusedSpot>
  808cc4:	e0bffb15 	stw	r2,-20(fp)
  808cc8:	e0bffb17 	ldw	r2,-20(fp)
  808ccc:	10bfffe0 	cmpeqi	r2,r2,-1
  808cd0:	10000c1e 	bne	r2,zero,808d04 <ioman_getSector+0x108>
  808cd4:	e0bffb17 	ldw	r2,-20(fp)
  808cd8:	117fffcc 	andi	r5,r2,65535
  808cdc:	e13ffc17 	ldw	r4,-16(fp)
  808ce0:	01800084 	movi	r6,2
  808ce4:	08079240 	call	807924 <ioman_getAttr>
  808ce8:	10803fcc 	andi	r2,r2,255
  808cec:	1005003a 	cmpeq	r2,r2,zero
  808cf0:	1000041e 	bne	r2,zero,808d04 <ioman_getSector+0x108>
            ioman_flushSector(ioman,bp);
  808cf4:	e0bffb17 	ldw	r2,-20(fp)
  808cf8:	117fffcc 	andi	r5,r2,65535
  808cfc:	e13ffc17 	ldw	r4,-16(fp)
  808d00:	08088c00 	call	8088c0 <ioman_flushSector>
        }
    }
    
    if(bp!=-1){
  808d04:	e0bffb17 	ldw	r2,-20(fp)
  808d08:	10bfffe0 	cmpeqi	r2,r2,-1
  808d0c:	10002b1e 	bne	r2,zero,808dbc <ioman_getSector+0x1c0>
        ioman_resetCacheItem(ioman,bp);
  808d10:	e0bffb17 	ldw	r2,-20(fp)
  808d14:	117fffcc 	andi	r5,r2,65535
  808d18:	e13ffc17 	ldw	r4,-16(fp)
  808d1c:	08083580 	call	808358 <ioman_resetCacheItem>
        if((ioman_putSectorInCache(ioman,address,bp))){
  808d20:	e0bffb17 	ldw	r2,-20(fp)
  808d24:	11bfffcc 	andi	r6,r2,65535
  808d28:	e13ffc17 	ldw	r4,-16(fp)
  808d2c:	e17ffd17 	ldw	r5,-12(fp)
  808d30:	08087e40 	call	8087e4 <ioman_putSectorInCache>
  808d34:	10803fcc 	andi	r2,r2,255
  808d38:	1080201c 	xori	r2,r2,128
  808d3c:	10bfe004 	addi	r2,r2,-128
  808d40:	1005003a 	cmpeq	r2,r2,zero
  808d44:	1000021e 	bne	r2,zero,808d50 <ioman_getSector+0x154>
            return(0);
  808d48:	e03fff15 	stw	zero,-4(fp)
  808d4c:	00006806 	br	808ef0 <ioman_getSector+0x2f4>
        }
        if(mode==IOM_MODE_READWRITE){
  808d50:	e0bffe03 	ldbu	r2,-8(fp)
  808d54:	10800098 	cmpnei	r2,r2,2
  808d58:	1000061e 	bne	r2,zero,808d74 <ioman_getSector+0x178>
            ioman_setWritable(bp);
  808d5c:	e0bffb17 	ldw	r2,-20(fp)
  808d60:	117fffcc 	andi	r5,r2,65535
  808d64:	e13ffc17 	ldw	r4,-16(fp)
  808d68:	01800084 	movi	r6,2
  808d6c:	01c00044 	movi	r7,1
  808d70:	08078400 	call	807840 <ioman_setAttr>
        }
        ioman_incUseCnt(ioman,bp);
  808d74:	e0bffb17 	ldw	r2,-20(fp)
  808d78:	117fffcc 	andi	r5,r2,65535
  808d7c:	e13ffc17 	ldw	r4,-16(fp)
  808d80:	0807a180 	call	807a18 <ioman_incUseCnt>
        if(!ioman_isReqExp(mode))ioman_incRefCnt(ioman,bp);
  808d84:	e0bffe03 	ldbu	r2,-8(fp)
  808d88:	1080010c 	andi	r2,r2,4
  808d8c:	1004c03a 	cmpne	r2,r2,zero
  808d90:	1000041e 	bne	r2,zero,808da4 <ioman_getSector+0x1a8>
  808d94:	e0bffb17 	ldw	r2,-20(fp)
  808d98:	117fffcc 	andi	r5,r2,65535
  808d9c:	e13ffc17 	ldw	r4,-16(fp)
  808da0:	0807c080 	call	807c08 <ioman_incRefCnt>
        return(ioman_getPtr(ioman,bp));
  808da4:	e0bffb17 	ldw	r2,-20(fp)
  808da8:	117fffcc 	andi	r5,r2,65535
  808dac:	e13ffc17 	ldw	r4,-16(fp)
  808db0:	08081200 	call	808120 <ioman_getPtr>
  808db4:	e0bfff15 	stw	r2,-4(fp)
  808db8:	00004d06 	br	808ef0 <ioman_getSector+0x2f4>
    }
    
    if((bp=ioman_findOverallocableSpot(ioman))!=-1){
  808dbc:	e13ffc17 	ldw	r4,-16(fp)
  808dc0:	08086980 	call	808698 <ioman_findOverallocableSpot>
  808dc4:	e0bffb15 	stw	r2,-20(fp)
  808dc8:	e0bffb17 	ldw	r2,-20(fp)
  808dcc:	10bfffe0 	cmpeqi	r2,r2,-1
  808dd0:	1000431e 	bne	r2,zero,808ee0 <ioman_getSector+0x2e4>
        if(ioman_isWritable(bp)){
  808dd4:	e0bffb17 	ldw	r2,-20(fp)
  808dd8:	117fffcc 	andi	r5,r2,65535
  808ddc:	e13ffc17 	ldw	r4,-16(fp)
  808de0:	01800084 	movi	r6,2
  808de4:	08079240 	call	807924 <ioman_getAttr>
  808de8:	10803fcc 	andi	r2,r2,255
  808dec:	1005003a 	cmpeq	r2,r2,zero
  808df0:	1000041e 	bne	r2,zero,808e04 <ioman_getSector+0x208>
            ioman_flushSector(ioman,bp);
  808df4:	e0bffb17 	ldw	r2,-20(fp)
  808df8:	117fffcc 	andi	r5,r2,65535
  808dfc:	e13ffc17 	ldw	r4,-16(fp)
  808e00:	08088c00 	call	8088c0 <ioman_flushSector>
        }
        if(ioman_push(ioman,bp)){
  808e04:	e0bffb17 	ldw	r2,-20(fp)
  808e08:	117fffcc 	andi	r5,r2,65535
  808e0c:	e13ffc17 	ldw	r4,-16(fp)
  808e10:	0807f600 	call	807f60 <ioman_push>
  808e14:	10803fcc 	andi	r2,r2,255
  808e18:	1080201c 	xori	r2,r2,128
  808e1c:	10bfe004 	addi	r2,r2,-128
  808e20:	1005003a 	cmpeq	r2,r2,zero
  808e24:	1000021e 	bne	r2,zero,808e30 <ioman_getSector+0x234>
            return(0);
  808e28:	e03fff15 	stw	zero,-4(fp)
  808e2c:	00003006 	br	808ef0 <ioman_getSector+0x2f4>
        }
        ioman_resetCacheItem(ioman,bp);
  808e30:	e0bffb17 	ldw	r2,-20(fp)
  808e34:	117fffcc 	andi	r5,r2,65535
  808e38:	e13ffc17 	ldw	r4,-16(fp)
  808e3c:	08083580 	call	808358 <ioman_resetCacheItem>
        if((ioman_putSectorInCache(ioman,address,bp))){
  808e40:	e0bffb17 	ldw	r2,-20(fp)
  808e44:	11bfffcc 	andi	r6,r2,65535
  808e48:	e13ffc17 	ldw	r4,-16(fp)
  808e4c:	e17ffd17 	ldw	r5,-12(fp)
  808e50:	08087e40 	call	8087e4 <ioman_putSectorInCache>
  808e54:	10803fcc 	andi	r2,r2,255
  808e58:	1080201c 	xori	r2,r2,128
  808e5c:	10bfe004 	addi	r2,r2,-128
  808e60:	1005003a 	cmpeq	r2,r2,zero
  808e64:	1000021e 	bne	r2,zero,808e70 <ioman_getSector+0x274>
            return(0);
  808e68:	e03fff15 	stw	zero,-4(fp)
  808e6c:	00002006 	br	808ef0 <ioman_getSector+0x2f4>
        }
        if(ioman_isReqRw(mode)){
  808e70:	e0bffe03 	ldbu	r2,-8(fp)
  808e74:	1080008c 	andi	r2,r2,2
  808e78:	1005003a 	cmpeq	r2,r2,zero
  808e7c:	1000061e 	bne	r2,zero,808e98 <ioman_getSector+0x29c>
            ioman_setWritable(bp);
  808e80:	e0bffb17 	ldw	r2,-20(fp)
  808e84:	117fffcc 	andi	r5,r2,65535
  808e88:	e13ffc17 	ldw	r4,-16(fp)
  808e8c:	01800084 	movi	r6,2
  808e90:	01c00044 	movi	r7,1
  808e94:	08078400 	call	807840 <ioman_setAttr>
        }
        ioman_incUseCnt(ioman,bp);
  808e98:	e0bffb17 	ldw	r2,-20(fp)
  808e9c:	117fffcc 	andi	r5,r2,65535
  808ea0:	e13ffc17 	ldw	r4,-16(fp)
  808ea4:	0807a180 	call	807a18 <ioman_incUseCnt>
        if(!ioman_isReqExp(mode))ioman_incRefCnt(ioman,bp);
  808ea8:	e0bffe03 	ldbu	r2,-8(fp)
  808eac:	1080010c 	andi	r2,r2,4
  808eb0:	1004c03a 	cmpne	r2,r2,zero
  808eb4:	1000041e 	bne	r2,zero,808ec8 <ioman_getSector+0x2cc>
  808eb8:	e0bffb17 	ldw	r2,-20(fp)
  808ebc:	117fffcc 	andi	r5,r2,65535
  808ec0:	e13ffc17 	ldw	r4,-16(fp)
  808ec4:	0807c080 	call	807c08 <ioman_incRefCnt>
        return(ioman_getPtr(ioman,bp));
  808ec8:	e0bffb17 	ldw	r2,-20(fp)
  808ecc:	117fffcc 	andi	r5,r2,65535
  808ed0:	e13ffc17 	ldw	r4,-16(fp)
  808ed4:	08081200 	call	808120 <ioman_getPtr>
  808ed8:	e0bfff15 	stw	r2,-4(fp)
  808edc:	00000406 	br	808ef0 <ioman_getSector+0x2f4>
    }
    ioman_setError(ioman,IOMAN_ERR_NOMEMORY);
  808ee0:	e0fffc17 	ldw	r3,-16(fp)
  808ee4:	00800284 	movi	r2,10
  808ee8:	18800305 	stb	r2,12(r3)
    return(0);
  808eec:	e03fff15 	stw	zero,-4(fp)
  808ef0:	e0bfff17 	ldw	r2,-4(fp)
}
  808ef4:	e037883a 	mov	sp,fp
  808ef8:	dfc00117 	ldw	ra,4(sp)
  808efc:	df000017 	ldw	fp,0(sp)
  808f00:	dec00204 	addi	sp,sp,8
  808f04:	f800283a 	ret

00808f08 <ioman_releaseSector>:
/*****************************************************************************/

esint8 ioman_releaseSector(IOManager *ioman,euint8* buf)
{
  808f08:	defffb04 	addi	sp,sp,-20
  808f0c:	dfc00415 	stw	ra,16(sp)
  808f10:	df000315 	stw	fp,12(sp)
  808f14:	df000304 	addi	fp,sp,12
  808f18:	e13ffe15 	stw	r4,-8(fp)
  808f1c:	e17fff15 	stw	r5,-4(fp)
    euint16 bp;
    
    bp=ioman_getBp(ioman,buf);
  808f20:	e13ffe17 	ldw	r4,-8(fp)
  808f24:	e17fff17 	ldw	r5,-4(fp)
  808f28:	08081880 	call	808188 <ioman_getBp>
  808f2c:	e0bffd0d 	sth	r2,-12(fp)
    ioman_decUseCnt(ioman,bp);
  808f30:	e17ffd0b 	ldhu	r5,-12(fp)
  808f34:	e13ffe17 	ldw	r4,-8(fp)
  808f38:	0807aac0 	call	807aac <ioman_decUseCnt>
    
    if(ioman_getUseCnt(ioman,bp)==0 && ioman->itptr[bp]!=0){
  808f3c:	e17ffd0b 	ldhu	r5,-12(fp)
  808f40:	e13ffe17 	ldw	r4,-8(fp)
  808f44:	08079ac0 	call	8079ac <ioman_getUseCnt>
  808f48:	10803fcc 	andi	r2,r2,255
  808f4c:	1004c03a 	cmpne	r2,r2,zero
  808f50:	10001f1e 	bne	r2,zero,808fd0 <ioman_releaseSector+0xc8>
  808f54:	e0fffd0b 	ldhu	r3,-12(fp)
  808f58:	e0bffe17 	ldw	r2,-8(fp)
  808f5c:	1885883a 	add	r2,r3,r2
  808f60:	10802304 	addi	r2,r2,140
  808f64:	10800003 	ldbu	r2,0(r2)
  808f68:	10803fcc 	andi	r2,r2,255
  808f6c:	1005003a 	cmpeq	r2,r2,zero
  808f70:	1000171e 	bne	r2,zero,808fd0 <ioman_releaseSector+0xc8>
        if(ioman_isWritable(bp)){
  808f74:	e17ffd0b 	ldhu	r5,-12(fp)
  808f78:	e13ffe17 	ldw	r4,-8(fp)
  808f7c:	01800084 	movi	r6,2
  808f80:	08079240 	call	807924 <ioman_getAttr>
  808f84:	10803fcc 	andi	r2,r2,255
  808f88:	1005003a 	cmpeq	r2,r2,zero
  808f8c:	1000031e 	bne	r2,zero,808f9c <ioman_releaseSector+0x94>
            ioman_flushSector(ioman,bp);
  808f90:	e17ffd0b 	ldhu	r5,-12(fp)
  808f94:	e13ffe17 	ldw	r4,-8(fp)
  808f98:	08088c00 	call	8088c0 <ioman_flushSector>
        }
        ioman_pop(ioman,bp);
  808f9c:	e17ffd0b 	ldhu	r5,-12(fp)
  808fa0:	e13ffe17 	ldw	r4,-8(fp)
  808fa4:	0807d8c0 	call	807d8c <ioman_pop>
        ioman_putSectorInCache(ioman,ioman->sector[bp],bp);
  808fa8:	e0bffd0b 	ldhu	r2,-12(fp)
  808fac:	e0fffe17 	ldw	r3,-8(fp)
  808fb0:	1085883a 	add	r2,r2,r2
  808fb4:	1085883a 	add	r2,r2,r2
  808fb8:	10c5883a 	add	r2,r2,r3
  808fbc:	10801c04 	addi	r2,r2,112
  808fc0:	11400017 	ldw	r5,0(r2)
  808fc4:	e1bffd0b 	ldhu	r6,-12(fp)
  808fc8:	e13ffe17 	ldw	r4,-8(fp)
  808fcc:	08087e40 	call	8087e4 <ioman_putSectorInCache>
    }
    return(0);
  808fd0:	0005883a 	mov	r2,zero
}
  808fd4:	e037883a 	mov	sp,fp
  808fd8:	dfc00117 	ldw	ra,4(sp)
  808fdc:	df000017 	ldw	fp,0(sp)
  808fe0:	dec00204 	addi	sp,sp,8
  808fe4:	f800283a 	ret

00808fe8 <ioman_directSectorRead>:
/*****************************************************************************/

esint8 ioman_directSectorRead(IOManager *ioman,euint32 address, euint8* buf)
{
  808fe8:	defff804 	addi	sp,sp,-32
  808fec:	dfc00715 	stw	ra,28(sp)
  808ff0:	df000615 	stw	fp,24(sp)
  808ff4:	df000604 	addi	fp,sp,24
  808ff8:	e13ffc15 	stw	r4,-16(fp)
  808ffc:	e17ffd15 	stw	r5,-12(fp)
  809000:	e1bffe15 	stw	r6,-8(fp)
    euint8* ibuf;
    esint16 bp;
    
    if((bp=ioman_findSectorInCache(ioman,address))!=-1){
  809004:	e13ffc17 	ldw	r4,-16(fp)
  809008:	e17ffd17 	ldw	r5,-12(fp)
  80900c:	08083f80 	call	8083f8 <ioman_findSectorInCache>
  809010:	e0bffa0d 	sth	r2,-24(fp)
  809014:	e0bffa0f 	ldh	r2,-24(fp)
  809018:	10bfffe0 	cmpeqi	r2,r2,-1
  80901c:	10000b1e 	bne	r2,zero,80904c <ioman_directSectorRead+0x64>
        ibuf=ioman_getPtr(ioman,bp);
  809020:	e0bffa0b 	ldhu	r2,-24(fp)
  809024:	117fffcc 	andi	r5,r2,65535
  809028:	e13ffc17 	ldw	r4,-16(fp)
  80902c:	08081200 	call	808120 <ioman_getPtr>
  809030:	e0bffb15 	stw	r2,-20(fp)
        memCpy(ibuf,buf,512);
  809034:	e13ffb17 	ldw	r4,-20(fp)
  809038:	e17ffe17 	ldw	r5,-8(fp)
  80903c:	01808004 	movi	r6,512
  809040:	080a8840 	call	80a884 <memCpy>
        return(0);
  809044:	e03fff15 	stw	zero,-4(fp)
  809048:	00002b06 	br	8090f8 <ioman_directSectorRead+0x110>
    }
    
    if((bp=ioman_findFreeSpot(ioman))!=-1){
  80904c:	e13ffc17 	ldw	r4,-16(fp)
  809050:	08084a40 	call	8084a4 <ioman_findFreeSpot>
  809054:	e0bffa0d 	sth	r2,-24(fp)
  809058:	e0bffa0f 	ldh	r2,-24(fp)
  80905c:	10bfffe0 	cmpeqi	r2,r2,-1
  809060:	1000181e 	bne	r2,zero,8090c4 <ioman_directSectorRead+0xdc>
        if((ioman_putSectorInCache(ioman,address,bp))){
  809064:	e0bffa0b 	ldhu	r2,-24(fp)
  809068:	11bfffcc 	andi	r6,r2,65535
  80906c:	e13ffc17 	ldw	r4,-16(fp)
  809070:	e17ffd17 	ldw	r5,-12(fp)
  809074:	08087e40 	call	8087e4 <ioman_putSectorInCache>
  809078:	10803fcc 	andi	r2,r2,255
  80907c:	1080201c 	xori	r2,r2,128
  809080:	10bfe004 	addi	r2,r2,-128
  809084:	1005003a 	cmpeq	r2,r2,zero
  809088:	1000031e 	bne	r2,zero,809098 <ioman_directSectorRead+0xb0>
            return(-1);
  80908c:	00bfffc4 	movi	r2,-1
  809090:	e0bfff15 	stw	r2,-4(fp)
  809094:	00001806 	br	8090f8 <ioman_directSectorRead+0x110>
        }
        ibuf=ioman_getPtr(ioman,bp);
  809098:	e0bffa0b 	ldhu	r2,-24(fp)
  80909c:	117fffcc 	andi	r5,r2,65535
  8090a0:	e13ffc17 	ldw	r4,-16(fp)
  8090a4:	08081200 	call	808120 <ioman_getPtr>
  8090a8:	e0bffb15 	stw	r2,-20(fp)
        memCpy(ibuf,buf,512);
  8090ac:	e13ffb17 	ldw	r4,-20(fp)
  8090b0:	e17ffe17 	ldw	r5,-8(fp)
  8090b4:	01808004 	movi	r6,512
  8090b8:	080a8840 	call	80a884 <memCpy>
        return(0);
  8090bc:	e03fff15 	stw	zero,-4(fp)
  8090c0:	00000d06 	br	8090f8 <ioman_directSectorRead+0x110>
    }

    if(ioman_readSector(ioman,address,buf)){
  8090c4:	e13ffc17 	ldw	r4,-16(fp)
  8090c8:	e17ffd17 	ldw	r5,-12(fp)
  8090cc:	e1bffe17 	ldw	r6,-8(fp)
  8090d0:	08082400 	call	808240 <ioman_readSector>
  8090d4:	10803fcc 	andi	r2,r2,255
  8090d8:	1080201c 	xori	r2,r2,128
  8090dc:	10bfe004 	addi	r2,r2,-128
  8090e0:	1005003a 	cmpeq	r2,r2,zero
  8090e4:	1000031e 	bne	r2,zero,8090f4 <ioman_directSectorRead+0x10c>
        return(-1);
  8090e8:	00bfffc4 	movi	r2,-1
  8090ec:	e0bfff15 	stw	r2,-4(fp)
  8090f0:	00000106 	br	8090f8 <ioman_directSectorRead+0x110>
    }

    return(0);
  8090f4:	e03fff15 	stw	zero,-4(fp)
  8090f8:	e0bfff17 	ldw	r2,-4(fp)
}
  8090fc:	e037883a 	mov	sp,fp
  809100:	dfc00117 	ldw	ra,4(sp)
  809104:	df000017 	ldw	fp,0(sp)
  809108:	dec00204 	addi	sp,sp,8
  80910c:	f800283a 	ret

00809110 <ioman_directSectorWrite>:
/*****************************************************************************/

esint8 ioman_directSectorWrite(IOManager *ioman,euint32 address, euint8* buf)
{
  809110:	defff804 	addi	sp,sp,-32
  809114:	dfc00715 	stw	ra,28(sp)
  809118:	df000615 	stw	fp,24(sp)
  80911c:	df000604 	addi	fp,sp,24
  809120:	e13ffc15 	stw	r4,-16(fp)
  809124:	e17ffd15 	stw	r5,-12(fp)
  809128:	e1bffe15 	stw	r6,-8(fp)
    euint8* ibuf;
    esint16 bp;
    
    if((bp=ioman_findSectorInCache(ioman,address))!=-1){
  80912c:	e13ffc17 	ldw	r4,-16(fp)
  809130:	e17ffd17 	ldw	r5,-12(fp)
  809134:	08083f80 	call	8083f8 <ioman_findSectorInCache>
  809138:	e0bffa0d 	sth	r2,-24(fp)
  80913c:	e0bffa0f 	ldh	r2,-24(fp)
  809140:	10bfffe0 	cmpeqi	r2,r2,-1
  809144:	1000111e 	bne	r2,zero,80918c <ioman_directSectorWrite+0x7c>
        ibuf=ioman_getPtr(ioman,bp);
  809148:	e0bffa0b 	ldhu	r2,-24(fp)
  80914c:	117fffcc 	andi	r5,r2,65535
  809150:	e13ffc17 	ldw	r4,-16(fp)
  809154:	08081200 	call	808120 <ioman_getPtr>
  809158:	e0bffb15 	stw	r2,-20(fp)
        memCpy(buf,ibuf,512);
  80915c:	e13ffe17 	ldw	r4,-8(fp)
  809160:	e17ffb17 	ldw	r5,-20(fp)
  809164:	01808004 	movi	r6,512
  809168:	080a8840 	call	80a884 <memCpy>
        ioman_setWritable(bp);
  80916c:	e0bffa0b 	ldhu	r2,-24(fp)
  809170:	117fffcc 	andi	r5,r2,65535
  809174:	e13ffc17 	ldw	r4,-16(fp)
  809178:	01800084 	movi	r6,2
  80917c:	01c00044 	movi	r7,1
  809180:	08078400 	call	807840 <ioman_setAttr>
        return(0);
  809184:	e03fff15 	stw	zero,-4(fp)
  809188:	00003606 	br	809264 <ioman_directSectorWrite+0x154>
    }
    
    if((bp=ioman_findFreeSpot(ioman))!=-1){
  80918c:	e13ffc17 	ldw	r4,-16(fp)
  809190:	08084a40 	call	8084a4 <ioman_findFreeSpot>
  809194:	e0bffa0d 	sth	r2,-24(fp)
  809198:	e0bffa0f 	ldh	r2,-24(fp)
  80919c:	10bfffe0 	cmpeqi	r2,r2,-1
  8091a0:	1000231e 	bne	r2,zero,809230 <ioman_directSectorWrite+0x120>
        ibuf=ioman_getPtr(ioman,bp);
  8091a4:	e0bffa0b 	ldhu	r2,-24(fp)
  8091a8:	117fffcc 	andi	r5,r2,65535
  8091ac:	e13ffc17 	ldw	r4,-16(fp)
  8091b0:	08081200 	call	808120 <ioman_getPtr>
  8091b4:	e0bffb15 	stw	r2,-20(fp)
        memCpy(buf,ibuf,512);
  8091b8:	e13ffe17 	ldw	r4,-8(fp)
  8091bc:	e17ffb17 	ldw	r5,-20(fp)
  8091c0:	01808004 	movi	r6,512
  8091c4:	080a8840 	call	80a884 <memCpy>
        ioman_resetCacheItem(ioman,bp);
  8091c8:	e0bffa0b 	ldhu	r2,-24(fp)
  8091cc:	117fffcc 	andi	r5,r2,65535
  8091d0:	e13ffc17 	ldw	r4,-16(fp)
  8091d4:	08083580 	call	808358 <ioman_resetCacheItem>
        ioman->sector[bp]=address;
  8091d8:	e0bffa0f 	ldh	r2,-24(fp)
  8091dc:	e0fffc17 	ldw	r3,-16(fp)
  8091e0:	1085883a 	add	r2,r2,r2
  8091e4:	1085883a 	add	r2,r2,r2
  8091e8:	10c5883a 	add	r2,r2,r3
  8091ec:	10c01c04 	addi	r3,r2,112
  8091f0:	e0bffd17 	ldw	r2,-12(fp)
  8091f4:	18800015 	stw	r2,0(r3)
        ioman_setWritable(bp);
  8091f8:	e0bffa0b 	ldhu	r2,-24(fp)
  8091fc:	117fffcc 	andi	r5,r2,65535
  809200:	e13ffc17 	ldw	r4,-16(fp)
  809204:	01800084 	movi	r6,2
  809208:	01c00044 	movi	r7,1
  80920c:	08078400 	call	807840 <ioman_setAttr>
        ioman_setValid(bp);
  809210:	e0bffa0b 	ldhu	r2,-24(fp)
  809214:	117fffcc 	andi	r5,r2,65535
  809218:	e13ffc17 	ldw	r4,-16(fp)
  80921c:	000d883a 	mov	r6,zero
  809220:	01c00044 	movi	r7,1
  809224:	08078400 	call	807840 <ioman_setAttr>
        return(0);
  809228:	e03fff15 	stw	zero,-4(fp)
  80922c:	00000d06 	br	809264 <ioman_directSectorWrite+0x154>
    }

    if(ioman_writeSector(ioman,address,buf)){
  809230:	e13ffc17 	ldw	r4,-16(fp)
  809234:	e17ffd17 	ldw	r5,-12(fp)
  809238:	e1bffe17 	ldw	r6,-8(fp)
  80923c:	08082cc0 	call	8082cc <ioman_writeSector>
  809240:	10803fcc 	andi	r2,r2,255
  809244:	1080201c 	xori	r2,r2,128
  809248:	10bfe004 	addi	r2,r2,-128
  80924c:	1005003a 	cmpeq	r2,r2,zero
  809250:	1000031e 	bne	r2,zero,809260 <ioman_directSectorWrite+0x150>
        return(-1);
  809254:	00bfffc4 	movi	r2,-1
  809258:	e0bfff15 	stw	r2,-4(fp)
  80925c:	00000106 	br	809264 <ioman_directSectorWrite+0x154>
    }

    return(0);
  809260:	e03fff15 	stw	zero,-4(fp)
  809264:	e0bfff17 	ldw	r2,-4(fp)
}
  809268:	e037883a 	mov	sp,fp
  80926c:	dfc00117 	ldw	ra,4(sp)
  809270:	df000017 	ldw	fp,0(sp)
  809274:	dec00204 	addi	sp,sp,8
  809278:	f800283a 	ret

0080927c <ioman_printStatus>:
/*****************************************************************************/

void ioman_printStatus(IOManager *ioman)
{
  80927c:	defff304 	addi	sp,sp,-52
  809280:	dfc00c15 	stw	ra,48(sp)
  809284:	df000b15 	stw	fp,44(sp)
  809288:	df000b04 	addi	fp,sp,44
  80928c:	e13ff915 	stw	r4,-28(fp)
    euint16 c;
    
    DBG((TXT("IO-Manager -- Report\n====================\n")));
  809290:	010020b4 	movhi	r4,130
  809294:	211d7c04 	addi	r4,r4,30192
  809298:	08124e00 	call	8124e0 <puts>
    DBG((TXT("Buffer is %i sectors, from %p to %p\n"),
  80929c:	e0bff917 	ldw	r2,-28(fp)
  8092a0:	1080020b 	ldhu	r2,8(r2)
  8092a4:	117fffcc 	andi	r5,r2,65535
  8092a8:	e0bff917 	ldw	r2,-28(fp)
  8092ac:	11800117 	ldw	r6,4(r2)
  8092b0:	e0bff917 	ldw	r2,-28(fp)
  8092b4:	10c00117 	ldw	r3,4(r2)
  8092b8:	e0bff917 	ldw	r2,-28(fp)
  8092bc:	1080020b 	ldhu	r2,8(r2)
  8092c0:	10bfffcc 	andi	r2,r2,65535
  8092c4:	1004927a 	slli	r2,r2,9
  8092c8:	188f883a 	add	r7,r3,r2
  8092cc:	010020b4 	movhi	r4,130
  8092d0:	211d8704 	addi	r4,r4,30236
  8092d4:	08123a40 	call	8123a4 <printf>
              ioman->numbuf,ioman->bufptr,ioman->bufptr+(ioman->numbuf*512)));
    for(c=0;c<ioman->numbuf;c++){
  8092d8:	e03ff80d 	sth	zero,-32(fp)
  8092dc:	00004606 	br	8093f8 <ioman_printStatus+0x17c>
        if(ioman_isValid(c)){
  8092e0:	e17ff80b 	ldhu	r5,-32(fp)
  8092e4:	e13ff917 	ldw	r4,-28(fp)
  8092e8:	000d883a 	mov	r6,zero
  8092ec:	08079240 	call	807924 <ioman_getAttr>
  8092f0:	10803fcc 	andi	r2,r2,255
  8092f4:	1005003a 	cmpeq	r2,r2,zero
  8092f8:	10003c1e 	bne	r2,zero,8093ec <ioman_printStatus+0x170>
            DBG((TXT("BP %3i\t SC %8li\t\t US %i\t RF %i\t %s %s\n"),
  8092fc:	e0bff80b 	ldhu	r2,-32(fp)
  809300:	e0bfff15 	stw	r2,-4(fp)
  809304:	e0bff80b 	ldhu	r2,-32(fp)
  809308:	e0fff917 	ldw	r3,-28(fp)
  80930c:	1085883a 	add	r2,r2,r2
  809310:	1085883a 	add	r2,r2,r2
  809314:	10c5883a 	add	r2,r2,r3
  809318:	10801c04 	addi	r2,r2,112
  80931c:	10800017 	ldw	r2,0(r2)
  809320:	e0bffe15 	stw	r2,-8(fp)
  809324:	e17ff80b 	ldhu	r5,-32(fp)
  809328:	e13ff917 	ldw	r4,-28(fp)
  80932c:	08079ac0 	call	8079ac <ioman_getUseCnt>
  809330:	10803fcc 	andi	r2,r2,255
  809334:	e0bffd15 	stw	r2,-12(fp)
  809338:	e17ff80b 	ldhu	r5,-32(fp)
  80933c:	e13ff917 	ldw	r4,-28(fp)
  809340:	0807b9c0 	call	807b9c <ioman_getRefCnt>
  809344:	10803fcc 	andi	r2,r2,255
  809348:	e0bffc15 	stw	r2,-16(fp)
  80934c:	e17ff80b 	ldhu	r5,-32(fp)
  809350:	e13ff917 	ldw	r4,-28(fp)
  809354:	01800044 	movi	r6,1
  809358:	08079240 	call	807924 <ioman_getAttr>
  80935c:	10803fcc 	andi	r2,r2,255
  809360:	1005003a 	cmpeq	r2,r2,zero
  809364:	1000041e 	bne	r2,zero,809378 <ioman_printStatus+0xfc>
  809368:	008020b4 	movhi	r2,130
  80936c:	109d9104 	addi	r2,r2,30276
  809370:	e0bffb15 	stw	r2,-20(fp)
  809374:	00000306 	br	809384 <ioman_printStatus+0x108>
  809378:	008020b4 	movhi	r2,130
  80937c:	109d9304 	addi	r2,r2,30284
  809380:	e0bffb15 	stw	r2,-20(fp)
  809384:	e17ff80b 	ldhu	r5,-32(fp)
  809388:	e13ff917 	ldw	r4,-28(fp)
  80938c:	01800084 	movi	r6,2
  809390:	08079240 	call	807924 <ioman_getAttr>
  809394:	10803fcc 	andi	r2,r2,255
  809398:	1005003a 	cmpeq	r2,r2,zero
  80939c:	1000041e 	bne	r2,zero,8093b0 <ioman_printStatus+0x134>
  8093a0:	008020b4 	movhi	r2,130
  8093a4:	109d9504 	addi	r2,r2,30292
  8093a8:	e0bffa15 	stw	r2,-24(fp)
  8093ac:	00000306 	br	8093bc <ioman_printStatus+0x140>
  8093b0:	008020b4 	movhi	r2,130
  8093b4:	109d9804 	addi	r2,r2,30304
  8093b8:	e0bffa15 	stw	r2,-24(fp)
  8093bc:	e0bffc17 	ldw	r2,-16(fp)
  8093c0:	d8800015 	stw	r2,0(sp)
  8093c4:	e0bffb17 	ldw	r2,-20(fp)
  8093c8:	d8800115 	stw	r2,4(sp)
  8093cc:	e0bffa17 	ldw	r2,-24(fp)
  8093d0:	d8800215 	stw	r2,8(sp)
  8093d4:	010020b4 	movhi	r4,130
  8093d8:	211d9b04 	addi	r4,r4,30316
  8093dc:	e17fff17 	ldw	r5,-4(fp)
  8093e0:	e1bffe17 	ldw	r6,-8(fp)
  8093e4:	e1fffd17 	ldw	r7,-12(fp)
  8093e8:	08123a40 	call	8123a4 <printf>
    euint16 c;
    
    DBG((TXT("IO-Manager -- Report\n====================\n")));
    DBG((TXT("Buffer is %i sectors, from %p to %p\n"),
              ioman->numbuf,ioman->bufptr,ioman->bufptr+(ioman->numbuf*512)));
    for(c=0;c<ioman->numbuf;c++){
  8093ec:	e0bff80b 	ldhu	r2,-32(fp)
  8093f0:	10800044 	addi	r2,r2,1
  8093f4:	e0bff80d 	sth	r2,-32(fp)
  8093f8:	e0bff917 	ldw	r2,-28(fp)
  8093fc:	1080020b 	ldhu	r2,8(r2)
  809400:	10ffffcc 	andi	r3,r2,65535
  809404:	e0bff80b 	ldhu	r2,-32(fp)
  809408:	10ffb536 	bltu	r2,r3,8092e0 <ioman_printStatus+0x64>
                c,ioman->sector[c],ioman_getUseCnt(ioman,c),ioman_getRefCnt(ioman,c),
                ioman_isUserBuf(c) ? "USRBUF" : "      ",
                ioman_isWritable(c) ? "WRITABLE" : "READONLY"));
        }
    }
}
  80940c:	e037883a 	mov	sp,fp
  809410:	dfc00117 	ldw	ra,4(sp)
  809414:	df000017 	ldw	fp,0(sp)
  809418:	dec00204 	addi	sp,sp,8
  80941c:	f800283a 	ret

00809420 <ls_openDir>:
/*****************************************************************************/
#include "ls.h"
/*****************************************************************************/

esint8 ls_openDir(DirList *dlist,FileSystem *fs,eint8* dirname)
{
  809420:	defff704 	addi	sp,sp,-36
  809424:	dfc00815 	stw	ra,32(sp)
  809428:	df000715 	stw	fp,28(sp)
  80942c:	df000704 	addi	fp,sp,28
  809430:	e13ffc15 	stw	r4,-16(fp)
  809434:	e17ffd15 	stw	r5,-12(fp)
  809438:	e1bffe15 	stw	r6,-8(fp)
	FileLocation loc;
	euint32 fc;
	
	dlist->fs=fs;
  80943c:	e0fffc17 	ldw	r3,-16(fp)
  809440:	e0bffd17 	ldw	r2,-12(fp)
  809444:	18800015 	stw	r2,0(r3)
	
	if(fs_findFile(dlist->fs,dirname,&loc,&fc)!=2)
  809448:	e0bffc17 	ldw	r2,-16(fp)
  80944c:	11000017 	ldw	r4,0(r2)
  809450:	e1fffb04 	addi	r7,fp,-20
  809454:	e17ffe17 	ldw	r5,-8(fp)
  809458:	e1bff904 	addi	r6,fp,-28
  80945c:	0806df40 	call	806df4 <fs_findFile>
  809460:	10803fcc 	andi	r2,r2,255
  809464:	1080201c 	xori	r2,r2,128
  809468:	10bfe004 	addi	r2,r2,-128
  80946c:	108000a0 	cmpeqi	r2,r2,2
  809470:	1000031e 	bne	r2,zero,809480 <ls_openDir+0x60>
	{
		return(-1);
  809474:	00bfffc4 	movi	r2,-1
  809478:	e0bfff15 	stw	r2,-4(fp)
  80947c:	00001006 	br	8094c0 <ls_openDir+0xa0>
	}
	
	fs_initClusterChain(dlist->fs,&(dlist->Cache),fc);
  809480:	e0bffc17 	ldw	r2,-16(fp)
  809484:	11000017 	ldw	r4,0(r2)
  809488:	e0bffc17 	ldw	r2,-16(fp)
  80948c:	11400704 	addi	r5,r2,28
  809490:	e1bffb17 	ldw	r6,-20(fp)
  809494:	08072800 	call	807280 <fs_initClusterChain>
	memClr(&(dlist->currentEntry),sizeof(dlist->currentEntry));
  809498:	e0bffc17 	ldw	r2,-16(fp)
  80949c:	11000204 	addi	r4,r2,8
  8094a0:	01400504 	movi	r5,20
  8094a4:	080a8f00 	call	80a8f0 <memClr>
	dlist->rEntry=0;
  8094a8:	e0bffc17 	ldw	r2,-16(fp)
  8094ac:	1000018d 	sth	zero,6(r2)
	dlist->cEntry=0xFFFF;
  8094b0:	e0fffc17 	ldw	r3,-16(fp)
  8094b4:	00bfffc4 	movi	r2,-1
  8094b8:	1880010d 	sth	r2,4(r3)
	
	return(0);
  8094bc:	e03fff15 	stw	zero,-4(fp)
  8094c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8094c4:	e037883a 	mov	sp,fp
  8094c8:	dfc00117 	ldw	ra,4(sp)
  8094cc:	df000017 	ldw	fp,0(sp)
  8094d0:	dec00204 	addi	sp,sp,8
  8094d4:	f800283a 	ret

008094d8 <ls_getDirEntry>:
/*****************************************************************************/

esint8 ls_getDirEntry(DirList *dlist)
{
  8094d8:	defffc04 	addi	sp,sp,-16
  8094dc:	dfc00315 	stw	ra,12(sp)
  8094e0:	df000215 	stw	fp,8(sp)
  8094e4:	df000204 	addi	fp,sp,8
  8094e8:	e13ffe15 	stw	r4,-8(fp)
	if(dlist->Cache.FirstCluster == 1){
  8094ec:	e0bffe17 	ldw	r2,-8(fp)
  8094f0:	10800a17 	ldw	r2,40(r2)
  8094f4:	10800058 	cmpnei	r2,r2,1
  8094f8:	1000071e 	bne	r2,zero,809518 <ls_getDirEntry+0x40>
		return(ls_getRootAreaEntry(dlist));
  8094fc:	e13ffe17 	ldw	r4,-8(fp)
  809500:	08097640 	call	809764 <ls_getRootAreaEntry>
  809504:	10803fcc 	andi	r2,r2,255
  809508:	1080201c 	xori	r2,r2,128
  80950c:	10bfe004 	addi	r2,r2,-128
  809510:	e0bfff15 	stw	r2,-4(fp)
  809514:	00000d06 	br	80954c <ls_getDirEntry+0x74>
	}else if(dlist->Cache.FirstCluster){
  809518:	e0bffe17 	ldw	r2,-8(fp)
  80951c:	10800a17 	ldw	r2,40(r2)
  809520:	1005003a 	cmpeq	r2,r2,zero
  809524:	1000071e 	bne	r2,zero,809544 <ls_getDirEntry+0x6c>
		return(ls_getRealDirEntry(dlist));
  809528:	e13ffe17 	ldw	r4,-8(fp)
  80952c:	080960c0 	call	80960c <ls_getRealDirEntry>
  809530:	10803fcc 	andi	r2,r2,255
  809534:	1080201c 	xori	r2,r2,128
  809538:	10bfe004 	addi	r2,r2,-128
  80953c:	e0bfff15 	stw	r2,-4(fp)
  809540:	00000206 	br	80954c <ls_getDirEntry+0x74>
	}
	return(-1);
  809544:	00bfffc4 	movi	r2,-1
  809548:	e0bfff15 	stw	r2,-4(fp)
  80954c:	e0bfff17 	ldw	r2,-4(fp)
}
  809550:	e037883a 	mov	sp,fp
  809554:	dfc00117 	ldw	ra,4(sp)
  809558:	df000017 	ldw	fp,0(sp)
  80955c:	dec00204 	addi	sp,sp,8
  809560:	f800283a 	ret

00809564 <ls_getNext>:
/*****************************************************************************/

esint8 ls_getNext(DirList *dlist)
{
  809564:	defffc04 	addi	sp,sp,-16
  809568:	dfc00315 	stw	ra,12(sp)
  80956c:	df000215 	stw	fp,8(sp)
  809570:	df000204 	addi	fp,sp,8
  809574:	e13ffe15 	stw	r4,-8(fp)
	do{
		if(ls_getDirEntry(dlist))return(-1);
  809578:	e13ffe17 	ldw	r4,-8(fp)
  80957c:	08094d80 	call	8094d8 <ls_getDirEntry>
  809580:	10803fcc 	andi	r2,r2,255
  809584:	1080201c 	xori	r2,r2,128
  809588:	10bfe004 	addi	r2,r2,-128
  80958c:	1005003a 	cmpeq	r2,r2,zero
  809590:	1000031e 	bne	r2,zero,8095a0 <ls_getNext+0x3c>
  809594:	00bfffc4 	movi	r2,-1
  809598:	e0bfff15 	stw	r2,-4(fp)
  80959c:	00001506 	br	8095f4 <ls_getNext+0x90>
		dlist->rEntry++;
  8095a0:	e0bffe17 	ldw	r2,-8(fp)
  8095a4:	1080018b 	ldhu	r2,6(r2)
  8095a8:	10800044 	addi	r2,r2,1
  8095ac:	1007883a 	mov	r3,r2
  8095b0:	e0bffe17 	ldw	r2,-8(fp)
  8095b4:	10c0018d 	sth	r3,6(r2)
	}while(!ls_isValidFileEntry(&(dlist->currentEntry)));
  8095b8:	e0bffe17 	ldw	r2,-8(fp)
  8095bc:	11000204 	addi	r4,r2,8
  8095c0:	08098740 	call	809874 <ls_isValidFileEntry>
  8095c4:	10803fcc 	andi	r2,r2,255
  8095c8:	1080201c 	xori	r2,r2,128
  8095cc:	10bfe004 	addi	r2,r2,-128
  8095d0:	1005003a 	cmpeq	r2,r2,zero
  8095d4:	103fe81e 	bne	r2,zero,809578 <ls_getNext+0x14>
	dlist->cEntry++;
  8095d8:	e0bffe17 	ldw	r2,-8(fp)
  8095dc:	1080010b 	ldhu	r2,4(r2)
  8095e0:	10800044 	addi	r2,r2,1
  8095e4:	1007883a 	mov	r3,r2
  8095e8:	e0bffe17 	ldw	r2,-8(fp)
  8095ec:	10c0010d 	sth	r3,4(r2)
	return(0);
  8095f0:	e03fff15 	stw	zero,-4(fp)
  8095f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8095f8:	e037883a 	mov	sp,fp
  8095fc:	dfc00117 	ldw	ra,4(sp)
  809600:	df000017 	ldw	fp,0(sp)
  809604:	dec00204 	addi	sp,sp,8
  809608:	f800283a 	ret

0080960c <ls_getRealDirEntry>:
/*****************************************************************************/

esint8 ls_getRealDirEntry(DirList *dlist)
{
  80960c:	defff904 	addi	sp,sp,-28
  809610:	dfc00615 	stw	ra,24(sp)
  809614:	df000515 	stw	fp,20(sp)
  809618:	dc400415 	stw	r17,16(sp)
  80961c:	dc000315 	stw	r16,12(sp)
  809620:	df000304 	addi	fp,sp,12
  809624:	e13ffe15 	stw	r4,-8(fp)
	euint8* buf;
	
	if(dlist->Cache.FirstCluster<=1)return(-1);
  809628:	e0bffe17 	ldw	r2,-8(fp)
  80962c:	10800a17 	ldw	r2,40(r2)
  809630:	108000a8 	cmpgeui	r2,r2,2
  809634:	1000031e 	bne	r2,zero,809644 <ls_getRealDirEntry+0x38>
  809638:	00bfffc4 	movi	r2,-1
  80963c:	e0bfff15 	stw	r2,-4(fp)
  809640:	00004006 	br	809744 <ls_getRealDirEntry+0x138>
	
	if(fat_LogicToDiscCluster(dlist->fs,
  809644:	e0bffe17 	ldw	r2,-8(fp)
  809648:	14000017 	ldw	r16,0(r2)
  80964c:	e0bffe17 	ldw	r2,-8(fp)
  809650:	14400704 	addi	r17,r2,28
  809654:	e0bffe17 	ldw	r2,-8(fp)
  809658:	1080018b 	ldhu	r2,6(r2)
  80965c:	113fffcc 	andi	r4,r2,65535
  809660:	e0bffe17 	ldw	r2,-8(fp)
  809664:	10800017 	ldw	r2,0(r2)
  809668:	10800183 	ldbu	r2,6(r2)
  80966c:	10803fcc 	andi	r2,r2,255
  809670:	100a913a 	slli	r5,r2,4
  809674:	08111140 	call	811114 <__divsi3>
  809678:	100d883a 	mov	r6,r2
  80967c:	8009883a 	mov	r4,r16
  809680:	880b883a 	mov	r5,r17
  809684:	0804b4c0 	call	804b4c <fat_LogicToDiscCluster>
  809688:	10bfffcc 	andi	r2,r2,65535
  80968c:	10a0001c 	xori	r2,r2,32768
  809690:	10a00004 	addi	r2,r2,-32768
  809694:	1005003a 	cmpeq	r2,r2,zero
  809698:	1000031e 	bne	r2,zero,8096a8 <ls_getRealDirEntry+0x9c>
						   &(dlist->Cache),
						   (dlist->rEntry)/(16 * dlist->fs->volumeId.SectorsPerCluster))){
		return(-1);
  80969c:	00bfffc4 	movi	r2,-1
  8096a0:	e0bfff15 	stw	r2,-4(fp)
  8096a4:	00002706 	br	809744 <ls_getRealDirEntry+0x138>
	}
	
	buf = part_getSect(dlist->fs->part,
  8096a8:	e0bffe17 	ldw	r2,-8(fp)
  8096ac:	10800017 	ldw	r2,0(r2)
  8096b0:	14000017 	ldw	r16,0(r2)
  8096b4:	e0bffe17 	ldw	r2,-8(fp)
  8096b8:	11000017 	ldw	r4,0(r2)
  8096bc:	e0bffe17 	ldw	r2,-8(fp)
  8096c0:	11400917 	ldw	r5,36(r2)
  8096c4:	0806b880 	call	806b88 <fs_clusterToSector>
  8096c8:	1023883a 	mov	r17,r2
  8096cc:	e0bffe17 	ldw	r2,-8(fp)
  8096d0:	1080018b 	ldhu	r2,6(r2)
  8096d4:	10bfffcc 	andi	r2,r2,65535
  8096d8:	1004d13a 	srli	r2,r2,4
  8096dc:	113fffcc 	andi	r4,r2,65535
  8096e0:	e0bffe17 	ldw	r2,-8(fp)
  8096e4:	10800017 	ldw	r2,0(r2)
  8096e8:	10800183 	ldbu	r2,6(r2)
  8096ec:	11403fcc 	andi	r5,r2,255
  8096f0:	08111740 	call	811174 <__modsi3>
  8096f4:	888b883a 	add	r5,r17,r2
  8096f8:	8009883a 	mov	r4,r16
  8096fc:	01800044 	movi	r6,1
  809700:	080a5e40 	call	80a5e4 <part_getSect>
  809704:	e0bffd15 	stw	r2,-12(fp)
					   fs_clusterToSector(dlist->fs,dlist->Cache.DiscCluster) + (dlist->rEntry/16)%dlist->fs->volumeId.SectorsPerCluster,
				       IOM_MODE_READONLY);
	
	/*memCpy(buf+(dlist->rEntry%16)*32,&(dlist->currentEntry),32);*/
	ls_fileEntryToDirListEntry(dlist,buf,32*(dlist->rEntry%16));
  809708:	e0bffe17 	ldw	r2,-8(fp)
  80970c:	1080018b 	ldhu	r2,6(r2)
  809710:	10bfffcc 	andi	r2,r2,65535
  809714:	108003cc 	andi	r2,r2,15
  809718:	1004917a 	slli	r2,r2,5
  80971c:	11bfffcc 	andi	r6,r2,65535
  809720:	e13ffe17 	ldw	r4,-8(fp)
  809724:	e17ffd17 	ldw	r5,-12(fp)
  809728:	08099040 	call	809904 <ls_fileEntryToDirListEntry>
	
	part_relSect(dlist->fs->part,buf);
  80972c:	e0bffe17 	ldw	r2,-8(fp)
  809730:	10800017 	ldw	r2,0(r2)
  809734:	11000017 	ldw	r4,0(r2)
  809738:	e17ffd17 	ldw	r5,-12(fp)
  80973c:	080a6440 	call	80a644 <part_relSect>
	
	return(0);
  809740:	e03fff15 	stw	zero,-4(fp)
  809744:	e0bfff17 	ldw	r2,-4(fp)
}
  809748:	e037883a 	mov	sp,fp
  80974c:	dfc00317 	ldw	ra,12(sp)
  809750:	df000217 	ldw	fp,8(sp)
  809754:	dc400117 	ldw	r17,4(sp)
  809758:	dc000017 	ldw	r16,0(sp)
  80975c:	dec00404 	addi	sp,sp,16
  809760:	f800283a 	ret

00809764 <ls_getRootAreaEntry>:
/*****************************************************************************/

esint8 ls_getRootAreaEntry(DirList *dlist)
{
  809764:	defffb04 	addi	sp,sp,-20
  809768:	dfc00415 	stw	ra,16(sp)
  80976c:	df000315 	stw	fp,12(sp)
  809770:	df000304 	addi	fp,sp,12
  809774:	e13ffe15 	stw	r4,-8(fp)
	euint8 *buf=0;
  809778:	e03ffd15 	stw	zero,-12(fp)
	
	if((dlist->fs->type != FAT12) && (dlist->fs->type != FAT16))return(-1);
  80977c:	e0bffe17 	ldw	r2,-8(fp)
  809780:	10800017 	ldw	r2,0(r2)
  809784:	10800f03 	ldbu	r2,60(r2)
  809788:	10803fcc 	andi	r2,r2,255
  80978c:	10800060 	cmpeqi	r2,r2,1
  809790:	1000091e 	bne	r2,zero,8097b8 <ls_getRootAreaEntry+0x54>
  809794:	e0bffe17 	ldw	r2,-8(fp)
  809798:	10800017 	ldw	r2,0(r2)
  80979c:	10800f03 	ldbu	r2,60(r2)
  8097a0:	10803fcc 	andi	r2,r2,255
  8097a4:	108000a0 	cmpeqi	r2,r2,2
  8097a8:	1000031e 	bne	r2,zero,8097b8 <ls_getRootAreaEntry+0x54>
  8097ac:	00bfffc4 	movi	r2,-1
  8097b0:	e0bfff15 	stw	r2,-4(fp)
  8097b4:	00002906 	br	80985c <ls_getRootAreaEntry+0xf8>
	if(dlist->rEntry>=dlist->fs->volumeId.RootEntryCount)return(-1);
  8097b8:	e0bffe17 	ldw	r2,-8(fp)
  8097bc:	10c0018b 	ldhu	r3,6(r2)
  8097c0:	e0bffe17 	ldw	r2,-8(fp)
  8097c4:	10800017 	ldw	r2,0(r2)
  8097c8:	1080030b 	ldhu	r2,12(r2)
  8097cc:	18ffffcc 	andi	r3,r3,65535
  8097d0:	10bfffcc 	andi	r2,r2,65535
  8097d4:	18800336 	bltu	r3,r2,8097e4 <ls_getRootAreaEntry+0x80>
  8097d8:	00bfffc4 	movi	r2,-1
  8097dc:	e0bfff15 	stw	r2,-4(fp)
  8097e0:	00001e06 	br	80985c <ls_getRootAreaEntry+0xf8>
	
	buf = part_getSect(dlist->fs->part,
  8097e4:	e0bffe17 	ldw	r2,-8(fp)
  8097e8:	10800017 	ldw	r2,0(r2)
  8097ec:	11000017 	ldw	r4,0(r2)
  8097f0:	e0bffe17 	ldw	r2,-8(fp)
  8097f4:	10800017 	ldw	r2,0(r2)
  8097f8:	10c00b17 	ldw	r3,44(r2)
  8097fc:	e0bffe17 	ldw	r2,-8(fp)
  809800:	1080018b 	ldhu	r2,6(r2)
  809804:	10bfffcc 	andi	r2,r2,65535
  809808:	1004d13a 	srli	r2,r2,4
  80980c:	10bfffcc 	andi	r2,r2,65535
  809810:	188b883a 	add	r5,r3,r2
  809814:	01800044 	movi	r6,1
  809818:	080a5e40 	call	80a5e4 <part_getSect>
  80981c:	e0bffd15 	stw	r2,-12(fp)
					   dlist->fs->FirstSectorRootDir+dlist->rEntry/16,
					   IOM_MODE_READONLY);
	/*memCpy(buf+32*(dlist->rEntry%16),&(dlist->currentEntry),32);*/
	ls_fileEntryToDirListEntry(dlist,buf,32*(dlist->rEntry%16));
  809820:	e0bffe17 	ldw	r2,-8(fp)
  809824:	1080018b 	ldhu	r2,6(r2)
  809828:	10bfffcc 	andi	r2,r2,65535
  80982c:	108003cc 	andi	r2,r2,15
  809830:	1004917a 	slli	r2,r2,5
  809834:	11bfffcc 	andi	r6,r2,65535
  809838:	e13ffe17 	ldw	r4,-8(fp)
  80983c:	e17ffd17 	ldw	r5,-12(fp)
  809840:	08099040 	call	809904 <ls_fileEntryToDirListEntry>
	part_relSect(dlist->fs->part,buf);
  809844:	e0bffe17 	ldw	r2,-8(fp)
  809848:	10800017 	ldw	r2,0(r2)
  80984c:	11000017 	ldw	r4,0(r2)
  809850:	e17ffd17 	ldw	r5,-12(fp)
  809854:	080a6440 	call	80a644 <part_relSect>
	return(0);
  809858:	e03fff15 	stw	zero,-4(fp)
  80985c:	e0bfff17 	ldw	r2,-4(fp)
}
  809860:	e037883a 	mov	sp,fp
  809864:	dfc00117 	ldw	ra,4(sp)
  809868:	df000017 	ldw	fp,0(sp)
  80986c:	dec00204 	addi	sp,sp,8
  809870:	f800283a 	ret

00809874 <ls_isValidFileEntry>:
/*****************************************************************************/

esint8 ls_isValidFileEntry(ListDirEntry *entry)
{
  809874:	defffd04 	addi	sp,sp,-12
  809878:	df000215 	stw	fp,8(sp)
  80987c:	df000204 	addi	fp,sp,8
  809880:	e13ffe15 	stw	r4,-8(fp)
	if(entry->FileName[0] == 0 || entry->FileName[0] == 0xE5 || entry->FileName[0] == '.')return(0);
  809884:	e0bffe17 	ldw	r2,-8(fp)
  809888:	10800003 	ldbu	r2,0(r2)
  80988c:	10803fcc 	andi	r2,r2,255
  809890:	1005003a 	cmpeq	r2,r2,zero
  809894:	10000a1e 	bne	r2,zero,8098c0 <ls_isValidFileEntry+0x4c>
  809898:	e0bffe17 	ldw	r2,-8(fp)
  80989c:	10800003 	ldbu	r2,0(r2)
  8098a0:	10803fcc 	andi	r2,r2,255
  8098a4:	10803960 	cmpeqi	r2,r2,229
  8098a8:	1000051e 	bne	r2,zero,8098c0 <ls_isValidFileEntry+0x4c>
  8098ac:	e0bffe17 	ldw	r2,-8(fp)
  8098b0:	10800003 	ldbu	r2,0(r2)
  8098b4:	10803fcc 	andi	r2,r2,255
  8098b8:	10800b98 	cmpnei	r2,r2,46
  8098bc:	1000021e 	bne	r2,zero,8098c8 <ls_isValidFileEntry+0x54>
  8098c0:	e03fff15 	stw	zero,-4(fp)
  8098c4:	00000a06 	br	8098f0 <ls_isValidFileEntry+0x7c>
	if((entry->Attribute&0x0F)==0x0F)return(0);
  8098c8:	e0bffe17 	ldw	r2,-8(fp)
  8098cc:	10800403 	ldbu	r2,16(r2)
  8098d0:	10803fcc 	andi	r2,r2,255
  8098d4:	108003cc 	andi	r2,r2,15
  8098d8:	108003d8 	cmpnei	r2,r2,15
  8098dc:	1000021e 	bne	r2,zero,8098e8 <ls_isValidFileEntry+0x74>
  8098e0:	e03fff15 	stw	zero,-4(fp)
  8098e4:	00000206 	br	8098f0 <ls_isValidFileEntry+0x7c>
 	return(1);
  8098e8:	00800044 	movi	r2,1
  8098ec:	e0bfff15 	stw	r2,-4(fp)
  8098f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8098f4:	e037883a 	mov	sp,fp
  8098f8:	df000017 	ldw	fp,0(sp)
  8098fc:	dec00104 	addi	sp,sp,4
  809900:	f800283a 	ret

00809904 <ls_fileEntryToDirListEntry>:
/*****************************************************************************/

void ls_fileEntryToDirListEntry(DirList *dlist, euint8* buf, euint16 offset)
{
  809904:	defffb04 	addi	sp,sp,-20
  809908:	dfc00415 	stw	ra,16(sp)
  80990c:	df000315 	stw	fp,12(sp)
  809910:	df000304 	addi	fp,sp,12
  809914:	e13ffd15 	stw	r4,-12(fp)
  809918:	e17ffe15 	stw	r5,-8(fp)
  80991c:	e1bfff0d 	sth	r6,-4(fp)
	if(offset>480 || offset%32)return;
  809920:	e0bfff0b 	ldhu	r2,-4(fp)
  809924:	10807868 	cmpgeui	r2,r2,481
  809928:	10001a1e 	bne	r2,zero,809994 <ls_fileEntryToDirListEntry+0x90>
  80992c:	e0bfff0b 	ldhu	r2,-4(fp)
  809930:	108007cc 	andi	r2,r2,31
  809934:	1005003a 	cmpeq	r2,r2,zero
  809938:	1000011e 	bne	r2,zero,809940 <ls_fileEntryToDirListEntry+0x3c>
  80993c:	00001506 	br	809994 <ls_fileEntryToDirListEntry+0x90>
	
	buf+=offset;
  809940:	e0bfff0b 	ldhu	r2,-4(fp)
  809944:	1007883a 	mov	r3,r2
  809948:	e0bffe17 	ldw	r2,-8(fp)
  80994c:	10c5883a 	add	r2,r2,r3
  809950:	e0bffe15 	stw	r2,-8(fp)
	memCpy(buf+OFFSET_DE_FILENAME,dlist->currentEntry.FileName,LIST_MAXLENFILENAME);
  809954:	e0bffd17 	ldw	r2,-12(fp)
  809958:	11400204 	addi	r5,r2,8
  80995c:	e13ffe17 	ldw	r4,-8(fp)
  809960:	01800304 	movi	r6,12
  809964:	080a8840 	call	80a884 <memCpy>
	dlist->currentEntry.Attribute = *(buf+OFFSET_DE_ATTRIBUTE);
  809968:	e0bffe17 	ldw	r2,-8(fp)
  80996c:	108002c4 	addi	r2,r2,11
  809970:	10c00003 	ldbu	r3,0(r2)
  809974:	e0bffd17 	ldw	r2,-12(fp)
  809978:	10c00605 	stb	r3,24(r2)
	dlist->currentEntry.FileSize = ex_getb32(buf,OFFSET_DE_FILESIZE);
  80997c:	e13ffe17 	ldw	r4,-8(fp)
  809980:	01400704 	movi	r5,28
  809984:	08039fc0 	call	8039fc <ex_getb32>
  809988:	1007883a 	mov	r3,r2
  80998c:	e0bffd17 	ldw	r2,-12(fp)
  809990:	10c00515 	stw	r3,20(r2)
}
  809994:	e037883a 	mov	sp,fp
  809998:	dfc00117 	ldw	ra,4(sp)
  80999c:	df000017 	ldw	fp,0(sp)
  8099a0:	dec00204 	addi	sp,sp,8
  8099a4:	f800283a 	ret

008099a8 <mkfs_makevfat>:
/*****************************************************************************/
#include "mkfs.h"
/*****************************************************************************/

signed short mkfs_makevfat(Partition *part)
{
  8099a8:	deff7504 	addi	sp,sp,-556
  8099ac:	dfc08a15 	stw	ra,552(sp)
  8099b0:	df008915 	stw	fp,548(sp)
  8099b4:	df008904 	addi	fp,sp,548
  8099b8:	e13ffe15 	stw	r4,-8(fp)
	unsigned long c,cc,ret;
	unsigned long ns,fs,ds,dc;
	unsigned char buf[512];
	
	ns=part->disc->partitions[part->activePartition].numSectors;
  8099bc:	e0bffe17 	ldw	r2,-8(fp)
  8099c0:	10c00017 	ldw	r3,0(r2)
  8099c4:	e0bffe17 	ldw	r2,-8(fp)
  8099c8:	10800103 	ldbu	r2,4(r2)
  8099cc:	10803fcc 	andi	r2,r2,255
  8099d0:	1080201c 	xori	r2,r2,128
  8099d4:	10bfe004 	addi	r2,r2,-128
  8099d8:	1004913a 	slli	r2,r2,4
  8099dc:	10c5883a 	add	r2,r2,r3
  8099e0:	10800504 	addi	r2,r2,20
  8099e4:	10800017 	ldw	r2,0(r2)
  8099e8:	e0bf7a15 	stw	r2,-536(fp)
	
	if( ns < 66581 ){
  8099ec:	e0ff7a17 	ldw	r3,-536(fp)
  8099f0:	00800074 	movhi	r2,1
  8099f4:	10810504 	addi	r2,r2,1044
  8099f8:	10c00636 	bltu	r2,r3,809a14 <mkfs_makevfat+0x6c>
		DBG((TXT("This is not possible due to insufficient sectors. Sorry\n")));
  8099fc:	010020b4 	movhi	r4,130
  809a00:	211da504 	addi	r4,r4,30356
  809a04:	08124e00 	call	8124e0 <puts>
		return(MKFS_ERR_TOOLITTLESECTORS);
  809a08:	00800044 	movi	r2,1
  809a0c:	e0bfff15 	stw	r2,-4(fp)
  809a10:	0000d806 	br	809d74 <mkfs_makevfat+0x3cc>
	}
	
	ret=0;
  809a14:	e03f7b15 	stw	zero,-532(fp)
	
	for(c=1<<6;c>=1;c>>=1){
  809a18:	00801004 	movi	r2,64
  809a1c:	e0bf7d15 	stw	r2,-524(fp)
  809a20:	00004a06 	br	809b4c <mkfs_makevfat+0x1a4>
		
		/* First guess */
		ds = ns - 32;
  809a24:	e0bf7a17 	ldw	r2,-536(fp)
  809a28:	10bff804 	addi	r2,r2,-32
  809a2c:	e0bf7815 	stw	r2,-544(fp)
		fs = ((ds/c)+127)/128;
  809a30:	e13f7817 	ldw	r4,-544(fp)
  809a34:	e17f7d17 	ldw	r5,-524(fp)
  809a38:	08111d40 	call	8111d4 <__udivsi3>
  809a3c:	10801fc4 	addi	r2,r2,127
  809a40:	1004d1fa 	srli	r2,r2,7
  809a44:	e0bf7915 	stw	r2,-540(fp)
		/* ds was guess too large, so fs is too large now too. */
		
		for(cc=0;cc<2;cc++){
  809a48:	e03f7c15 	stw	zero,-528(fp)
  809a4c:	00001d06 	br	809ac4 <mkfs_makevfat+0x11c>
		
			/* Round 2, error round */
			ds = ns - 32 - 2*fs;
  809a50:	e0bf7917 	ldw	r2,-540(fp)
  809a54:	1085883a 	add	r2,r2,r2
  809a58:	1007883a 	mov	r3,r2
  809a5c:	e0bf7a17 	ldw	r2,-536(fp)
  809a60:	10c5c83a 	sub	r2,r2,r3
  809a64:	10bff804 	addi	r2,r2,-32
  809a68:	e0bf7815 	stw	r2,-544(fp)
			fs = ((ds/c)+127)/128; 
  809a6c:	e13f7817 	ldw	r4,-544(fp)
  809a70:	e17f7d17 	ldw	r5,-524(fp)
  809a74:	08111d40 	call	8111d4 <__udivsi3>
  809a78:	10801fc4 	addi	r2,r2,127
  809a7c:	1004d1fa 	srli	r2,r2,7
  809a80:	e0bf7915 	stw	r2,-540(fp)
			/* Since fs was too large, ds became too small. So the fs for this small ds is too small as well. */
			
			/* Round 3, correction round */
			ds = ns - 32 - 2*fs;
  809a84:	e0bf7917 	ldw	r2,-540(fp)
  809a88:	1085883a 	add	r2,r2,r2
  809a8c:	1007883a 	mov	r3,r2
  809a90:	e0bf7a17 	ldw	r2,-536(fp)
  809a94:	10c5c83a 	sub	r2,r2,r3
  809a98:	10bff804 	addi	r2,r2,-32
  809a9c:	e0bf7815 	stw	r2,-544(fp)
			fs = ((ds/c)+127)/128; 
  809aa0:	e13f7817 	ldw	r4,-544(fp)
  809aa4:	e17f7d17 	ldw	r5,-524(fp)
  809aa8:	08111d40 	call	8111d4 <__udivsi3>
  809aac:	10801fc4 	addi	r2,r2,127
  809ab0:	1004d1fa 	srli	r2,r2,7
  809ab4:	e0bf7915 	stw	r2,-540(fp)
		/* First guess */
		ds = ns - 32;
		fs = ((ds/c)+127)/128;
		/* ds was guess too large, so fs is too large now too. */
		
		for(cc=0;cc<2;cc++){
  809ab8:	e0bf7c17 	ldw	r2,-528(fp)
  809abc:	10800044 	addi	r2,r2,1
  809ac0:	e0bf7c15 	stw	r2,-528(fp)
  809ac4:	e0bf7c17 	ldw	r2,-528(fp)
  809ac8:	108000b0 	cmpltui	r2,r2,2
  809acc:	103fe01e 	bne	r2,zero,809a50 <mkfs_makevfat+0xa8>
			/* The fs was too small, so ds was too large. The calculated fs should be slightly too large. */
		
		}
		
		/* Round 4, finalise */
		ds = ns - 32 - 2*fs; 
  809ad0:	e0bf7917 	ldw	r2,-540(fp)
  809ad4:	1085883a 	add	r2,r2,r2
  809ad8:	1007883a 	mov	r3,r2
  809adc:	e0bf7a17 	ldw	r2,-536(fp)
  809ae0:	10c5c83a 	sub	r2,r2,r3
  809ae4:	10bff804 	addi	r2,r2,-32
  809ae8:	e0bf7815 	stw	r2,-544(fp)

		dc = ds / c;
  809aec:	e13f7817 	ldw	r4,-544(fp)
  809af0:	e17f7d17 	ldw	r5,-524(fp)
  809af4:	08111d40 	call	8111d4 <__udivsi3>
  809af8:	e0bf7715 	stw	r2,-548(fp)
		if(ret<(fs*128-dc)/128)ret=(fs*128-dc)/128;
  809afc:	e0bf7917 	ldw	r2,-540(fp)
  809b00:	100691fa 	slli	r3,r2,7
  809b04:	e0bf7717 	ldw	r2,-548(fp)
  809b08:	1885c83a 	sub	r2,r3,r2
  809b0c:	1006d1fa 	srli	r3,r2,7
  809b10:	e0bf7b17 	ldw	r2,-532(fp)
  809b14:	10c0062e 	bgeu	r2,r3,809b30 <mkfs_makevfat+0x188>
  809b18:	e0bf7917 	ldw	r2,-540(fp)
  809b1c:	100691fa 	slli	r3,r2,7
  809b20:	e0bf7717 	ldw	r2,-548(fp)
  809b24:	1885c83a 	sub	r2,r3,r2
  809b28:	1004d1fa 	srli	r2,r2,7
  809b2c:	e0bf7b15 	stw	r2,-532(fp)
		
		/* Check if with current setting we have a valid fat ? */
		
		if(dc >= 65525 + 16){
  809b30:	e0ff7717 	ldw	r3,-548(fp)
  809b34:	00800074 	movhi	r2,1
  809b38:	10800104 	addi	r2,r2,4
  809b3c:	10c00636 	bltu	r2,r3,809b58 <mkfs_makevfat+0x1b0>
		return(MKFS_ERR_TOOLITTLESECTORS);
	}
	
	ret=0;
	
	for(c=1<<6;c>=1;c>>=1){
  809b40:	e0bf7d17 	ldw	r2,-524(fp)
  809b44:	1004d07a 	srli	r2,r2,1
  809b48:	e0bf7d15 	stw	r2,-524(fp)
  809b4c:	e0bf7d17 	ldw	r2,-524(fp)
  809b50:	1004c03a 	cmpne	r2,r2,zero
  809b54:	103fb31e 	bne	r2,zero,809a24 <mkfs_makevfat+0x7c>
			break;
		}
	}

	/* Generate BPB */
	memClr(buf,512);
  809b58:	e13f7e04 	addi	r4,fp,-520
  809b5c:	01408004 	movi	r5,512
  809b60:	080a8f00 	call	80a8f0 <memClr>
	
	/* Boot code */
	*(buf+0)=0xE9;	*(buf+1)=0x00;	*(buf+2)=0x00; /* RESET */
  809b64:	00bffa44 	movi	r2,-23
  809b68:	e0bf7e05 	stb	r2,-520(fp)
  809b6c:	e0bf7e04 	addi	r2,fp,-520
  809b70:	10800044 	addi	r2,r2,1
  809b74:	10000005 	stb	zero,0(r2)
  809b78:	e0bf7e04 	addi	r2,fp,-520
  809b7c:	10800084 	addi	r2,r2,2
  809b80:	10000005 	stb	zero,0(r2)
	
	/* OEM name */
	memCpy("DSCOSMSH",buf+3,8);
  809b84:	e0bf7e04 	addi	r2,fp,-520
  809b88:	114000c4 	addi	r5,r2,3
  809b8c:	010020b4 	movhi	r4,130
  809b90:	211db304 	addi	r4,r4,30412
  809b94:	01800204 	movi	r6,8
  809b98:	080a8840 	call	80a884 <memCpy>
	
	/* Bytes/Sector */
	*((unsigned short*)(buf+11)) = 512;
  809b9c:	e0bf7e04 	addi	r2,fp,-520
  809ba0:	108002c4 	addi	r2,r2,11
  809ba4:	1007883a 	mov	r3,r2
  809ba8:	00808004 	movi	r2,512
  809bac:	1880000d 	sth	r2,0(r3)
	
	/* Sectors/Cluster */
	*(buf+13) = c;
  809bb0:	e0bf7e04 	addi	r2,fp,-520
  809bb4:	10c00344 	addi	r3,r2,13
  809bb8:	e0bf7d17 	ldw	r2,-524(fp)
  809bbc:	18800005 	stb	r2,0(r3)
	
	/* Reserved Sectors */
	*((unsigned short*)(buf+14)) = 32;
  809bc0:	e0bf7e04 	addi	r2,fp,-520
  809bc4:	10800384 	addi	r2,r2,14
  809bc8:	1007883a 	mov	r3,r2
  809bcc:	00800804 	movi	r2,32
  809bd0:	1880000d 	sth	r2,0(r3)
	
	/* Number of FAT Tables */
	*(buf+16) = 2;
  809bd4:	e0bf7e04 	addi	r2,fp,-520
  809bd8:	10c00404 	addi	r3,r2,16
  809bdc:	00800084 	movi	r2,2
  809be0:	18800005 	stb	r2,0(r3)
	
	/* RootEntryCount */
	*((unsigned short*)(buf+17)) = 0;
  809be4:	e0bf7e04 	addi	r2,fp,-520
  809be8:	10800444 	addi	r2,r2,17
  809bec:	1000000d 	sth	zero,0(r2)
	
	/* Total Sector Count __16 */
	*((unsigned short*)(buf+19)) = 0;
  809bf0:	e0bf7e04 	addi	r2,fp,-520
  809bf4:	108004c4 	addi	r2,r2,19
  809bf8:	1000000d 	sth	zero,0(r2)
	
	/* Media (crap) */
	*(buf+21) = 0xF8;
  809bfc:	e0bf7e04 	addi	r2,fp,-520
  809c00:	10c00544 	addi	r3,r2,21
  809c04:	00bffe04 	movi	r2,-8
  809c08:	18800005 	stb	r2,0(r3)
	
	/* FAT size 16 */
	*((unsigned short*)(buf+22)) = 0;
  809c0c:	e0bf7e04 	addi	r2,fp,-520
  809c10:	10800584 	addi	r2,r2,22
  809c14:	1000000d 	sth	zero,0(r2)
	
	/* Total Sector Count __32 */
	*((unsigned long*)(buf+32)) = ns;
  809c18:	e0bf7e04 	addi	r2,fp,-520
  809c1c:	10800804 	addi	r2,r2,32
  809c20:	1007883a 	mov	r3,r2
  809c24:	e0bf7a17 	ldw	r2,-536(fp)
  809c28:	18800015 	stw	r2,0(r3)
	
	/* Fat Size 32 */
	*((unsigned long*)(buf+36)) = fs;
  809c2c:	e0bf7e04 	addi	r2,fp,-520
  809c30:	10800904 	addi	r2,r2,36
  809c34:	1007883a 	mov	r3,r2
  809c38:	e0bf7917 	ldw	r2,-540(fp)
  809c3c:	18800015 	stw	r2,0(r3)
	
	/* First Cluster Root Dir */
	*((unsigned long*)(buf+44)) = 2;
  809c40:	e0bf7e04 	addi	r2,fp,-520
  809c44:	10800b04 	addi	r2,r2,44
  809c48:	1007883a 	mov	r3,r2
  809c4c:	00800084 	movi	r2,2
  809c50:	18800015 	stw	r2,0(r3)
	
	/* VolumeID */
	*((unsigned long*)(buf+67)) = 0x13371337;
  809c54:	e0bf7e04 	addi	r2,fp,-520
  809c58:	108010c4 	addi	r2,r2,67
  809c5c:	1007883a 	mov	r3,r2
  809c60:	0084cdf4 	movhi	r2,4919
  809c64:	1084cdc4 	addi	r2,r2,4919
  809c68:	18800015 	stw	r2,0(r3)
	
	/* Volume Label */
	memCpy("DISCOSMASH!",buf+71,11);
  809c6c:	e0bf7e04 	addi	r2,fp,-520
  809c70:	114011c4 	addi	r5,r2,71
  809c74:	010020b4 	movhi	r4,130
  809c78:	211db604 	addi	r4,r4,30424
  809c7c:	018002c4 	movi	r6,11
  809c80:	080a8840 	call	80a884 <memCpy>
	
	/* Filesystemtype */
	memCpy("FAT32   ",buf+82,8);
  809c84:	e0bf7e04 	addi	r2,fp,-520
  809c88:	11401484 	addi	r5,r2,82
  809c8c:	010020b4 	movhi	r4,130
  809c90:	211db904 	addi	r4,r4,30436
  809c94:	01800204 	movi	r6,8
  809c98:	080a8840 	call	80a884 <memCpy>
	
	/* Magic */
	*(buf+510) = 0x55; *(buf+511) = 0xAA;
  809c9c:	e0bf7e04 	addi	r2,fp,-520
  809ca0:	10c07f84 	addi	r3,r2,510
  809ca4:	00801544 	movi	r2,85
  809ca8:	18800005 	stb	r2,0(r3)
  809cac:	e0bf7e04 	addi	r2,fp,-520
  809cb0:	10c07fc4 	addi	r3,r2,511
  809cb4:	00bfea84 	movi	r2,-86
  809cb8:	18800005 	stb	r2,0(r3)
	
	part_writeBuf(part,0,buf);
  809cbc:	e1bf7e04 	addi	r6,fp,-520
  809cc0:	e13ffe17 	ldw	r4,-8(fp)
  809cc4:	000b883a 	mov	r5,zero
  809cc8:	080a51c0 	call	80a51c <part_writeBuf>
	
	memClr(buf,512);
  809ccc:	e13f7e04 	addi	r4,fp,-520
  809cd0:	01408004 	movi	r5,512
  809cd4:	080a8f00 	call	80a8f0 <memClr>
	for(c=32;c<(32+2*fs);c++){
  809cd8:	00800804 	movi	r2,32
  809cdc:	e0bf7d15 	stw	r2,-524(fp)
  809ce0:	00000706 	br	809d00 <mkfs_makevfat+0x358>
		part_writeBuf(part,c,buf);
  809ce4:	e1bf7e04 	addi	r6,fp,-520
  809ce8:	e13ffe17 	ldw	r4,-8(fp)
  809cec:	e17f7d17 	ldw	r5,-524(fp)
  809cf0:	080a51c0 	call	80a51c <part_writeBuf>
	*(buf+510) = 0x55; *(buf+511) = 0xAA;
	
	part_writeBuf(part,0,buf);
	
	memClr(buf,512);
	for(c=32;c<(32+2*fs);c++){
  809cf4:	e0bf7d17 	ldw	r2,-524(fp)
  809cf8:	10800044 	addi	r2,r2,1
  809cfc:	e0bf7d15 	stw	r2,-524(fp)
  809d00:	e0bf7917 	ldw	r2,-540(fp)
  809d04:	1085883a 	add	r2,r2,r2
  809d08:	10c00804 	addi	r3,r2,32
  809d0c:	e0bf7d17 	ldw	r2,-524(fp)
  809d10:	10fff436 	bltu	r2,r3,809ce4 <mkfs_makevfat+0x33c>
		part_writeBuf(part,c,buf);
	}
	*(((unsigned long*)buf)  )=0x0FFFFFF8;
  809d14:	e0ff7e04 	addi	r3,fp,-520
  809d18:	00840034 	movhi	r2,4096
  809d1c:	10bffe04 	addi	r2,r2,-8
  809d20:	18800015 	stw	r2,0(r3)
	*(((unsigned long*)buf)+1)=0x0FFFFFFF;
  809d24:	e0bf7e04 	addi	r2,fp,-520
  809d28:	10c00104 	addi	r3,r2,4
  809d2c:	00840034 	movhi	r2,4096
  809d30:	10bfffc4 	addi	r2,r2,-1
  809d34:	18800015 	stw	r2,0(r3)
	*(((unsigned long*)buf)+2)=0x0FFFFFF8;
  809d38:	e0bf7e04 	addi	r2,fp,-520
  809d3c:	10c00204 	addi	r3,r2,8
  809d40:	00840034 	movhi	r2,4096
  809d44:	10bffe04 	addi	r2,r2,-8
  809d48:	18800015 	stw	r2,0(r3)
	part_writeBuf(part,32,buf);
  809d4c:	e1bf7e04 	addi	r6,fp,-520
  809d50:	e13ffe17 	ldw	r4,-8(fp)
  809d54:	01400804 	movi	r5,32
  809d58:	080a51c0 	call	80a51c <part_writeBuf>
	part_writeBuf(part,32+fs,buf);
  809d5c:	e0bf7917 	ldw	r2,-540(fp)
  809d60:	11400804 	addi	r5,r2,32
  809d64:	e1bf7e04 	addi	r6,fp,-520
  809d68:	e13ffe17 	ldw	r4,-8(fp)
  809d6c:	080a51c0 	call	80a51c <part_writeBuf>
	
	return(0);
  809d70:	e03fff15 	stw	zero,-4(fp)
  809d74:	e0bfff17 	ldw	r2,-4(fp)
}
  809d78:	e037883a 	mov	sp,fp
  809d7c:	dfc00117 	ldw	ra,4(sp)
  809d80:	df000017 	ldw	fp,0(sp)
  809d84:	dec00204 	addi	sp,sp,8
  809d88:	f800283a 	ret

00809d8c <if_initInterface>:

#define  DUMMY 0xFF
/*****************************************************************************/

esint8 if_initInterface(hwInterface* file, eint8* opts)
{
  809d8c:	defffa04 	addi	sp,sp,-24
  809d90:	dfc00515 	stw	ra,20(sp)
  809d94:	df000415 	stw	fp,16(sp)
  809d98:	df000404 	addi	fp,sp,16
  809d9c:	e13ffd15 	stw	r4,-12(fp)
  809da0:	e17ffe15 	stw	r5,-8(fp)
euint32 size;
	if_spiInit(file);
  809da4:	e13ffd17 	ldw	r4,-12(fp)
  809da8:	0809f300 	call	809f30 <if_spiInit>
	if(sd_Init(file)<0)	{
  809dac:	e13ffd17 	ldw	r4,-12(fp)
  809db0:	080a9a00 	call	80a9a0 <sd_Init>
  809db4:	10803fcc 	andi	r2,r2,255
  809db8:	1080201c 	xori	r2,r2,128
  809dbc:	10bfe004 	addi	r2,r2,-128
  809dc0:	1004403a 	cmpge	r2,r2,zero
  809dc4:	1000061e 	bne	r2,zero,809de0 <if_initInterface+0x54>
		DBG((TXT("Card failed to init, breaking up...\n")));
  809dc8:	010020b4 	movhi	r4,130
  809dcc:	211dbc04 	addi	r4,r4,30448
  809dd0:	08124e00 	call	8124e0 <puts>
		return(-1);
  809dd4:	00bfffc4 	movi	r2,-1
  809dd8:	e0bfff15 	stw	r2,-4(fp)
  809ddc:	00001d06 	br	809e54 <if_initInterface+0xc8>
	}
	if(sd_State(file)<0){
  809de0:	e13ffd17 	ldw	r4,-12(fp)
  809de4:	080ae500 	call	80ae50 <sd_State>
  809de8:	10803fcc 	andi	r2,r2,255
  809dec:	1080201c 	xori	r2,r2,128
  809df0:	10bfe004 	addi	r2,r2,-128
  809df4:	1004403a 	cmpge	r2,r2,zero
  809df8:	1000061e 	bne	r2,zero,809e14 <if_initInterface+0x88>
		DBG((TXT("Card didn't return the ready state, breaking up...\n")));
  809dfc:	010020b4 	movhi	r4,130
  809e00:	211dc504 	addi	r4,r4,30484
  809e04:	08124e00 	call	8124e0 <puts>
		return(-2);
  809e08:	00bfff84 	movi	r2,-2
  809e0c:	e0bfff15 	stw	r2,-4(fp)
  809e10:	00001006 	br	809e54 <if_initInterface+0xc8>
	}
    
    sd_getDriveSize(file,&size);
  809e14:	e13ffd17 	ldw	r4,-12(fp)
  809e18:	e17ffc04 	addi	r5,fp,-16
  809e1c:	080b1e40 	call	80b1e4 <sd_getDriveSize>

	file->sectorCount=size>>9; /* FIXME ASAP!! */
  809e20:	e0bffc17 	ldw	r2,-16(fp)
  809e24:	1004d27a 	srli	r2,r2,9
  809e28:	1007883a 	mov	r3,r2
  809e2c:	e0bffd17 	ldw	r2,-12(fp)
  809e30:	10c00015 	stw	r3,0(r2)
    DBG(TXT(("Card size:%d\n",size)));
  809e34:	e17ffc17 	ldw	r5,-16(fp)
  809e38:	010020b4 	movhi	r4,130
  809e3c:	211dd204 	addi	r4,r4,30536
  809e40:	08123a40 	call	8123a4 <printf>
	DBG((TXT("Init done...\n")));
  809e44:	010020b4 	movhi	r4,130
  809e48:	211dd604 	addi	r4,r4,30552
  809e4c:	08124e00 	call	8124e0 <puts>
	return(0);
  809e50:	e03fff15 	stw	zero,-4(fp)
  809e54:	e0bfff17 	ldw	r2,-4(fp)
}
  809e58:	e037883a 	mov	sp,fp
  809e5c:	dfc00117 	ldw	ra,4(sp)
  809e60:	df000017 	ldw	fp,0(sp)
  809e64:	dec00204 	addi	sp,sp,8
  809e68:	f800283a 	ret

00809e6c <if_readBuf>:
/*****************************************************************************/ 

esint8 if_readBuf(hwInterface* file,euint32 address,euint8* buf)
{
  809e6c:	defffb04 	addi	sp,sp,-20
  809e70:	dfc00415 	stw	ra,16(sp)
  809e74:	df000315 	stw	fp,12(sp)
  809e78:	df000304 	addi	fp,sp,12
  809e7c:	e13ffd15 	stw	r4,-12(fp)
  809e80:	e17ffe15 	stw	r5,-8(fp)
  809e84:	e1bfff15 	stw	r6,-4(fp)
	return(sd_readSector(file,address,buf,512));
  809e88:	e13ffd17 	ldw	r4,-12(fp)
  809e8c:	e17ffe17 	ldw	r5,-8(fp)
  809e90:	e1bfff17 	ldw	r6,-4(fp)
  809e94:	01c08004 	movi	r7,512
  809e98:	080b0e00 	call	80b0e0 <sd_readSector>
  809e9c:	10803fcc 	andi	r2,r2,255
  809ea0:	1080201c 	xori	r2,r2,128
  809ea4:	10bfe004 	addi	r2,r2,-128
}
  809ea8:	e037883a 	mov	sp,fp
  809eac:	dfc00117 	ldw	ra,4(sp)
  809eb0:	df000017 	ldw	fp,0(sp)
  809eb4:	dec00204 	addi	sp,sp,8
  809eb8:	f800283a 	ret

00809ebc <if_writeBuf>:
/*****************************************************************************/

esint8 if_writeBuf(hwInterface* file,euint32 address,euint8* buf)
{
  809ebc:	defffb04 	addi	sp,sp,-20
  809ec0:	dfc00415 	stw	ra,16(sp)
  809ec4:	df000315 	stw	fp,12(sp)
  809ec8:	df000304 	addi	fp,sp,12
  809ecc:	e13ffd15 	stw	r4,-12(fp)
  809ed0:	e17ffe15 	stw	r5,-8(fp)
  809ed4:	e1bfff15 	stw	r6,-4(fp)
	return(sd_writeSector(file,address, buf));
  809ed8:	e13ffd17 	ldw	r4,-12(fp)
  809edc:	e17ffe17 	ldw	r5,-8(fp)
  809ee0:	e1bfff17 	ldw	r6,-4(fp)
  809ee4:	080b00c0 	call	80b00c <sd_writeSector>
  809ee8:	10803fcc 	andi	r2,r2,255
  809eec:	1080201c 	xori	r2,r2,128
  809ef0:	10bfe004 	addi	r2,r2,-128
}
  809ef4:	e037883a 	mov	sp,fp
  809ef8:	dfc00117 	ldw	ra,4(sp)
  809efc:	df000017 	ldw	fp,0(sp)
  809f00:	dec00204 	addi	sp,sp,8
  809f04:	f800283a 	ret

00809f08 <if_setPos>:
/*****************************************************************************/ 

esint8 if_setPos(hwInterface* file,euint32 address)
{
  809f08:	defffd04 	addi	sp,sp,-12
  809f0c:	df000215 	stw	fp,8(sp)
  809f10:	df000204 	addi	fp,sp,8
  809f14:	e13ffe15 	stw	r4,-8(fp)
  809f18:	e17fff15 	stw	r5,-4(fp)
	return(0);
  809f1c:	0005883a 	mov	r2,zero
}
  809f20:	e037883a 	mov	sp,fp
  809f24:	df000017 	ldw	fp,0(sp)
  809f28:	dec00104 	addi	sp,sp,4
  809f2c:	f800283a 	ret

00809f30 <if_spiInit>:
/*****************************************************************************/ 

void if_spiInit(hwInterface *iface)
{
  809f30:	defffc04 	addi	sp,sp,-16
  809f34:	dfc00315 	stw	ra,12(sp)
  809f38:	df000215 	stw	fp,8(sp)
  809f3c:	df000204 	addi	fp,sp,8
  809f40:	e13fff15 	stw	r4,-4(fp)
	euint8 i;
	IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(SPI_0_BASE, 1 );
  809f44:	00c06474 	movhi	r3,401
  809f48:	18e40d04 	addi	r3,r3,-28620
  809f4c:	00800044 	movi	r2,1
  809f50:	18800035 	stwio	r2,0(r3)
	printf("\n spi ini");
  809f54:	010020b4 	movhi	r4,130
  809f58:	211dda04 	addi	r4,r4,30568
  809f5c:	08123a40 	call	8123a4 <printf>
}
  809f60:	e037883a 	mov	sp,fp
  809f64:	dfc00117 	ldw	ra,4(sp)
  809f68:	df000017 	ldw	fp,0(sp)
  809f6c:	dec00204 	addi	sp,sp,8
  809f70:	f800283a 	ret

00809f74 <if_spiSend>:
/*****************************************************************************/

euint8 if_spiSend(hwInterface *iface, euint8 outgoing)
{
  809f74:	defffb04 	addi	sp,sp,-20
  809f78:	dfc00415 	stw	ra,16(sp)
  809f7c:	df000315 	stw	fp,12(sp)
  809f80:	df000304 	addi	fp,sp,12
  809f84:	e13ffe15 	stw	r4,-8(fp)
  809f88:	e17fff05 	stb	r5,-4(fp)
	euint8 incoming=0;
  809f8c:	e03ffd85 	stb	zero,-10(fp)
	alt_u8  SD_Data=0,status;
  809f90:	e03ffd45 	stb	zero,-11(fp)
  
	
	/* Set the SSO bit (force chipselect) */
	IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE, 0x400);
  809f94:	00c06474 	movhi	r3,401
  809f98:	18e40b04 	addi	r3,r3,-28628
  809f9c:	00810004 	movi	r2,1024
  809fa0:	18800035 	stwio	r2,0(r3)

	do{
    	    status = IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE);//get status
  809fa4:	00806474 	movhi	r2,401
  809fa8:	10a40a04 	addi	r2,r2,-28632
  809fac:	10800037 	ldwio	r2,0(r2)
  809fb0:	e0bffd05 	stb	r2,-12(fp)
	}while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 ) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  809fb4:	e0bffd03 	ldbu	r2,-12(fp)
  809fb8:	1080100c 	andi	r2,r2,64
  809fbc:	1004c03a 	cmpne	r2,r2,zero
  809fc0:	1000061e 	bne	r2,zero,809fdc <if_spiSend+0x68>
  809fc4:	e0bffd03 	ldbu	r2,-12(fp)
  809fc8:	10803fcc 	andi	r2,r2,255
  809fcc:	1080201c 	xori	r2,r2,128
  809fd0:	10bfe004 	addi	r2,r2,-128
  809fd4:	1004403a 	cmpge	r2,r2,zero
  809fd8:	103ff21e 	bne	r2,zero,809fa4 <if_spiSend+0x30>
	/* wait till transmit and ready ok */

	IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, outgoing);
  809fdc:	e0ffff03 	ldbu	r3,-4(fp)
  809fe0:	00806474 	movhi	r2,401
  809fe4:	10a40904 	addi	r2,r2,-28636
  809fe8:	10c00035 	stwio	r3,0(r2)
    
	/* Wait until the interface has finished transmitting */
	do{status = IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE);}
  809fec:	00806474 	movhi	r2,401
  809ff0:	10a40a04 	addi	r2,r2,-28632
  809ff4:	10800037 	ldwio	r2,0(r2)
  809ff8:	e0bffd05 	stb	r2,-12(fp)
	while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
  809ffc:	e0bffd03 	ldbu	r2,-12(fp)
  80a000:	1080080c 	andi	r2,r2,32
  80a004:	1005003a 	cmpeq	r2,r2,zero
  80a008:	103ff81e 	bne	r2,zero,809fec <if_spiSend+0x78>

	/* reciver ready */
	if (((status & 0x80) != 0) ){
  80a00c:	e0bffd03 	ldbu	r2,-12(fp)
  80a010:	10803fcc 	andi	r2,r2,255
  80a014:	1080201c 	xori	r2,r2,128
  80a018:	10bfe004 	addi	r2,r2,-128
  80a01c:	1004403a 	cmpge	r2,r2,zero
  80a020:	1000051e 	bne	r2,zero,80a038 <if_spiSend+0xc4>
    	    SD_Data = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);
  80a024:	00806474 	movhi	r2,401
  80a028:	10a40804 	addi	r2,r2,-28640
  80a02c:	10800037 	ldwio	r2,0(r2)
  80a030:	e0bffd45 	stb	r2,-11(fp)
  80a034:	00000306 	br	80a044 <if_spiSend+0xd0>
	}
	else{
		printf("\n no recive after transmit");
  80a038:	010020b4 	movhi	r4,130
  80a03c:	211ddd04 	addi	r4,r4,30580
  80a040:	08123a40 	call	8123a4 <printf>
	}
 
	IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(SPI_0_BASE, 1);
  80a044:	00c06474 	movhi	r3,401
  80a048:	18e40d04 	addi	r3,r3,-28620
  80a04c:	00800044 	movi	r2,1
  80a050:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE, 0);
  80a054:	00806474 	movhi	r2,401
  80a058:	10a40b04 	addi	r2,r2,-28628
  80a05c:	10000035 	stwio	zero,0(r2)
 
	if( (status & 0x100) !=0)
  80a060:	e0bffd03 	ldbu	r2,-12(fp)
  80a064:	1080400c 	andi	r2,r2,256
  80a068:	1005003a 	cmpeq	r2,r2,zero
  80a06c:	1000031e 	bne	r2,zero,80a07c <if_spiSend+0x108>
    	printf("\n error in spi error in spi");
  80a070:	010020b4 	movhi	r4,130
  80a074:	211de404 	addi	r4,r4,30608
  80a078:	08123a40 	call	8123a4 <printf>
  
	return (SD_Data);
  80a07c:	e0bffd43 	ldbu	r2,-11(fp)
}
  80a080:	e037883a 	mov	sp,fp
  80a084:	dfc00117 	ldw	ra,4(sp)
  80a088:	df000017 	ldw	fp,0(sp)
  80a08c:	dec00204 	addi	sp,sp,8
  80a090:	f800283a 	ret

0080a094 <if_spi_sendbuf>:
/*****************************************************************************/

euint8 if_spi_sendbuf(hwInterface *iface, euint8 *buf, euint16 len)
{
  80a094:	defffb04 	addi	sp,sp,-20
  80a098:	df000415 	stw	fp,16(sp)
  80a09c:	df000404 	addi	fp,sp,16
  80a0a0:	e13ffd15 	stw	r4,-12(fp)
  80a0a4:	e17ffe15 	stw	r5,-8(fp)
  80a0a8:	e1bfff0d 	sth	r6,-4(fp)
    alt_u8  SD_Data=0,status;
  80a0ac:	e03ffcc5 	stb	zero,-13(fp)
    alt_u16 i;
   
    /* Set the SSO bit (force chipselect) */
    IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE, 0x400);
  80a0b0:	00c06474 	movhi	r3,401
  80a0b4:	18e40b04 	addi	r3,r3,-28628
  80a0b8:	00810004 	movi	r2,1024
  80a0bc:	18800035 	stwio	r2,0(r3)

    for(i=0;i<len;i++)
  80a0c0:	e03ffc0d 	sth	zero,-16(fp)
  80a0c4:	00001406 	br	80a118 <if_spi_sendbuf+0x84>
    {
        do{
            status = IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE);//get status
  80a0c8:	00806474 	movhi	r2,401
  80a0cc:	10a40a04 	addi	r2,r2,-28632
  80a0d0:	10800037 	ldwio	r2,0(r2)
  80a0d4:	e0bffc85 	stb	r2,-14(fp)
        }while ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 );
  80a0d8:	e0bffc83 	ldbu	r2,-14(fp)
  80a0dc:	1080100c 	andi	r2,r2,64
  80a0e0:	1005003a 	cmpeq	r2,r2,zero
  80a0e4:	103ff81e 	bne	r2,zero,80a0c8 <if_spi_sendbuf+0x34>
        /* wait till transmit and ready ok */

        IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, buf[i]);
  80a0e8:	e0bffc0b 	ldhu	r2,-16(fp)
  80a0ec:	1007883a 	mov	r3,r2
  80a0f0:	e0bffe17 	ldw	r2,-8(fp)
  80a0f4:	1885883a 	add	r2,r3,r2
  80a0f8:	10800003 	ldbu	r2,0(r2)
  80a0fc:	10c03fcc 	andi	r3,r2,255
  80a100:	00806474 	movhi	r2,401
  80a104:	10a40904 	addi	r2,r2,-28636
  80a108:	10c00035 	stwio	r3,0(r2)
    alt_u16 i;
   
    /* Set the SSO bit (force chipselect) */
    IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE, 0x400);

    for(i=0;i<len;i++)
  80a10c:	e0bffc0b 	ldhu	r2,-16(fp)
  80a110:	10800044 	addi	r2,r2,1
  80a114:	e0bffc0d 	sth	r2,-16(fp)
  80a118:	e0fffc0b 	ldhu	r3,-16(fp)
  80a11c:	e0bfff0b 	ldhu	r2,-4(fp)
  80a120:	18bfe936 	bltu	r3,r2,80a0c8 <if_spi_sendbuf+0x34>
        IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, buf[i]);
    }

    
    do{
        status = IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE);//get status
  80a124:	00806474 	movhi	r2,401
  80a128:	10a40a04 	addi	r2,r2,-28632
  80a12c:	10800037 	ldwio	r2,0(r2)
  80a130:	e0bffc85 	stb	r2,-14(fp)
    }while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0 );
  80a134:	e0bffc83 	ldbu	r2,-14(fp)
  80a138:	1080080c 	andi	r2,r2,32
  80a13c:	1005003a 	cmpeq	r2,r2,zero
  80a140:	103ff81e 	bne	r2,zero,80a124 <if_spi_sendbuf+0x90>
 
    IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE, 0);
  80a144:	00806474 	movhi	r2,401
  80a148:	10a40b04 	addi	r2,r2,-28628
  80a14c:	10000035 	stwio	zero,0(r2)
    return (0);
  80a150:	0005883a 	mov	r2,zero
}
  80a154:	e037883a 	mov	sp,fp
  80a158:	df000017 	ldw	fp,0(sp)
  80a15c:	dec00104 	addi	sp,sp,4
  80a160:	f800283a 	ret

0080a164 <if_spi_readbuf>:

/*****************************************************************************/

euint8 if_spi_readbuf(hwInterface *iface, euint8 *buf, euint16 len)
{
  80a164:	defffb04 	addi	sp,sp,-20
  80a168:	df000415 	stw	fp,16(sp)
  80a16c:	df000404 	addi	fp,sp,16
  80a170:	e13ffd15 	stw	r4,-12(fp)
  80a174:	e17ffe15 	stw	r5,-8(fp)
  80a178:	e1bfff0d 	sth	r6,-4(fp)
    alt_u8  status;
    alt_u16 i;
   
    /* Set the SSO bit (force chipselect) */
    IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE, 0x400);
  80a17c:	00c06474 	movhi	r3,401
  80a180:	18e40b04 	addi	r3,r3,-28628
  80a184:	00810004 	movi	r2,1024
  80a188:	18800035 	stwio	r2,0(r3)
    /* Clear RX reg*/
    buf[0] = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);
  80a18c:	00806474 	movhi	r2,401
  80a190:	10a40804 	addi	r2,r2,-28640
  80a194:	10800037 	ldwio	r2,0(r2)
  80a198:	1007883a 	mov	r3,r2
  80a19c:	e0bffe17 	ldw	r2,-8(fp)
  80a1a0:	10c00005 	stb	r3,0(r2)
    /* wait till transmit and ready ok */
    do{
        status = IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE);//get status
  80a1a4:	00806474 	movhi	r2,401
  80a1a8:	10a40a04 	addi	r2,r2,-28632
  80a1ac:	10800037 	ldwio	r2,0(r2)
  80a1b0:	e0bffc85 	stb	r2,-14(fp)
    }while ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 );
  80a1b4:	e0bffc83 	ldbu	r2,-14(fp)
  80a1b8:	1080100c 	andi	r2,r2,64
  80a1bc:	1005003a 	cmpeq	r2,r2,zero
  80a1c0:	103ff81e 	bne	r2,zero,80a1a4 <if_spi_readbuf+0x40>
    
    for(i=0;i<len;i++)
  80a1c4:	e03ffc0d 	sth	zero,-16(fp)
  80a1c8:	00001506 	br	80a220 <if_spi_readbuf+0xbc>
    {
        IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, DUMMY);
  80a1cc:	00c06474 	movhi	r3,401
  80a1d0:	18e40904 	addi	r3,r3,-28636
  80a1d4:	00803fc4 	movi	r2,255
  80a1d8:	18800035 	stwio	r2,0(r3)
        /* Wait until the interface has finished transmitting */
        
        while ((IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE) & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  80a1dc:	00806474 	movhi	r2,401
  80a1e0:	10a40a04 	addi	r2,r2,-28632
  80a1e4:	10800037 	ldwio	r2,0(r2)
  80a1e8:	1080200c 	andi	r2,r2,128
  80a1ec:	1005003a 	cmpeq	r2,r2,zero
  80a1f0:	103ffa1e 	bne	r2,zero,80a1dc <if_spi_readbuf+0x78>

        /* reciver ready */
        buf[i] = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);
  80a1f4:	e0bffc0b 	ldhu	r2,-16(fp)
  80a1f8:	1007883a 	mov	r3,r2
  80a1fc:	e0bffe17 	ldw	r2,-8(fp)
  80a200:	1887883a 	add	r3,r3,r2
  80a204:	00806474 	movhi	r2,401
  80a208:	10a40804 	addi	r2,r2,-28640
  80a20c:	10800037 	ldwio	r2,0(r2)
  80a210:	18800005 	stb	r2,0(r3)
    /* wait till transmit and ready ok */
    do{
        status = IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE);//get status
    }while ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 );
    
    for(i=0;i<len;i++)
  80a214:	e0bffc0b 	ldhu	r2,-16(fp)
  80a218:	10800044 	addi	r2,r2,1
  80a21c:	e0bffc0d 	sth	r2,-16(fp)
  80a220:	e0fffc0b 	ldhu	r3,-16(fp)
  80a224:	e0bfff0b 	ldhu	r2,-4(fp)
  80a228:	18bfe836 	bltu	r3,r2,80a1cc <if_spi_readbuf+0x68>
        /* reciver ready */
        buf[i] = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);
    
    }
 
    IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE, 0);
  80a22c:	00806474 	movhi	r2,401
  80a230:	10a40b04 	addi	r2,r2,-28628
  80a234:	10000035 	stwio	zero,0(r2)
    return (0);
  80a238:	0005883a 	mov	r2,zero
}
  80a23c:	e037883a 	mov	sp,fp
  80a240:	df000017 	ldw	fp,0(sp)
  80a244:	dec00104 	addi	sp,sp,4
  80a248:	f800283a 	ret

0080a24c <ramdisk_setup>:


//#define CHECK_RAM 1

static esint8 ramdisk_setup(euint8 DevType)
{
  80a24c:	defffe04 	addi	sp,sp,-8
  80a250:	df000115 	stw	fp,4(sp)
  80a254:	df000104 	addi	fp,sp,4
  80a258:	e13fff05 	stb	r4,-4(fp)
            return -1;
    }
#endif   
    
   // memset((eunit8 *)(RAMDISK_ADDRESS_START),0x0,RAMDISK_SECTOR_CNT * RAMDISK_SECTOR_SIZE);
	return 0;
  80a25c:	0005883a 	mov	r2,zero
}
  80a260:	e037883a 	mov	sp,fp
  80a264:	df000017 	ldw	fp,0(sp)
  80a268:	dec00104 	addi	sp,sp,4
  80a26c:	f800283a 	ret

0080a270 <ramdisk_read>:

/*--------------------------------------
  return actual bytes read
*/
static esint8 ramdisk_read( int block, char *buf,int blkcnt)
{
  80a270:	defffb04 	addi	sp,sp,-20
  80a274:	dfc00415 	stw	ra,16(sp)
  80a278:	df000315 	stw	fp,12(sp)
  80a27c:	df000304 	addi	fp,sp,12
  80a280:	e13ffd15 	stw	r4,-12(fp)
  80a284:	e17ffe15 	stw	r5,-8(fp)
  80a288:	e1bfff15 	stw	r6,-4(fp)
#ifdef EN_DMA
    memcpy_dma(buf,(eunit8 *)(RAMDISK_ADDRESS_START + block * RAMDISK_SECTOR_SIZE),blkcnt * RAMDISK_SECTOR_SIZE);
#else
	memcpy(buf,(euint8 *)(RAMDISK_ADDRESS_START + block * RAMDISK_SECTOR_SIZE),blkcnt * RAMDISK_SECTOR_SIZE);
  80a28c:	e0bffd17 	ldw	r2,-12(fp)
  80a290:	1006927a 	slli	r3,r2,9
  80a294:	00802034 	movhi	r2,128
  80a298:	1885883a 	add	r2,r3,r2
  80a29c:	100b883a 	mov	r5,r2
  80a2a0:	e0bfff17 	ldw	r2,-4(fp)
  80a2a4:	1004927a 	slli	r2,r2,9
  80a2a8:	1007883a 	mov	r3,r2
  80a2ac:	e0bffe17 	ldw	r2,-8(fp)
  80a2b0:	1009883a 	mov	r4,r2
  80a2b4:	180d883a 	mov	r6,r3
  80a2b8:	08122840 	call	812284 <memcpy>
#endif
	return blkcnt*512;
  80a2bc:	e0bfff17 	ldw	r2,-4(fp)
  80a2c0:	1004927a 	slli	r2,r2,9
  80a2c4:	10803fcc 	andi	r2,r2,255
  80a2c8:	1080201c 	xori	r2,r2,128
  80a2cc:	10bfe004 	addi	r2,r2,-128
}
  80a2d0:	e037883a 	mov	sp,fp
  80a2d4:	dfc00117 	ldw	ra,4(sp)
  80a2d8:	df000017 	ldw	fp,0(sp)
  80a2dc:	dec00204 	addi	sp,sp,8
  80a2e0:	f800283a 	ret

0080a2e4 <ramdisk_write>:
/*---------------------------------------
  return actual bytes written
*/
static esint8 ramdisk_write(int block, char *buf,int blkcnt)
{
  80a2e4:	defffb04 	addi	sp,sp,-20
  80a2e8:	dfc00415 	stw	ra,16(sp)
  80a2ec:	df000315 	stw	fp,12(sp)
  80a2f0:	df000304 	addi	fp,sp,12
  80a2f4:	e13ffd15 	stw	r4,-12(fp)
  80a2f8:	e17ffe15 	stw	r5,-8(fp)
  80a2fc:	e1bfff15 	stw	r6,-4(fp)
#ifdef EN_DMA
    
	memcpy_dma((eunit8 *)(RAMDISK_ADDRESS_START + block * RAMDISK_SECTOR_SIZE),buf,blkcnt * RAMDISK_SECTOR_SIZE);
#else

	memcpy((euint8 *)(RAMDISK_ADDRESS_START + block * RAMDISK_SECTOR_SIZE),buf,blkcnt * RAMDISK_SECTOR_SIZE);
  80a300:	e0bffd17 	ldw	r2,-12(fp)
  80a304:	1006927a 	slli	r3,r2,9
  80a308:	00802034 	movhi	r2,128
  80a30c:	1885883a 	add	r2,r3,r2
  80a310:	1007883a 	mov	r3,r2
  80a314:	e0bfff17 	ldw	r2,-4(fp)
  80a318:	1004927a 	slli	r2,r2,9
  80a31c:	100d883a 	mov	r6,r2
  80a320:	e0bffe17 	ldw	r2,-8(fp)
  80a324:	1809883a 	mov	r4,r3
  80a328:	100b883a 	mov	r5,r2
  80a32c:	08122840 	call	812284 <memcpy>
#endif
	return blkcnt*512;
  80a330:	e0bfff17 	ldw	r2,-4(fp)
  80a334:	1004927a 	slli	r2,r2,9
  80a338:	10803fcc 	andi	r2,r2,255
  80a33c:	1080201c 	xori	r2,r2,128
  80a340:	10bfe004 	addi	r2,r2,-128
}
  80a344:	e037883a 	mov	sp,fp
  80a348:	dfc00117 	ldw	ra,4(sp)
  80a34c:	df000017 	ldw	fp,0(sp)
  80a350:	dec00204 	addi	sp,sp,8
  80a354:	f800283a 	ret

0080a358 <ramdisk_init>:
*******************************************************************************
*                           GLOBAL FUNCTIONS
*******************************************************************************
*/
EFSBlockDev * ramdisk_init(euint8 DevType)
{
  80a358:	defffe04 	addi	sp,sp,-8
  80a35c:	df000115 	stw	fp,4(sp)
  80a360:	df000104 	addi	fp,sp,4
  80a364:	e13fff05 	stb	r4,-4(fp)
	return &spifuncs;
  80a368:	008020f4 	movhi	r2,131
  80a36c:	10a2e804 	addi	r2,r2,-29792
}
  80a370:	e037883a 	mov	sp,fp
  80a374:	df000017 	ldw	fp,0(sp)
  80a378:	dec00104 	addi	sp,sp,4
  80a37c:	f800283a 	ret

0080a380 <part_initPartition>:
 * void part_initPartition(Partition *part,Disc* refDisc)
 * Description: This function searches the 4 partitions for a FAT class partition
 * and marks the first one found as the active to be used partition.
*/
void part_initPartition(Partition *part,Disc* refDisc)
{
  80a380:	defffb04 	addi	sp,sp,-20
  80a384:	dfc00415 	stw	ra,16(sp)
  80a388:	df000315 	stw	fp,12(sp)
  80a38c:	df000304 	addi	fp,sp,12
  80a390:	e13ffe15 	stw	r4,-8(fp)
  80a394:	e17fff15 	stw	r5,-4(fp)
	eint16 c;
	
	part->disc=refDisc;
  80a398:	e0fffe17 	ldw	r3,-8(fp)
  80a39c:	e0bfff17 	ldw	r2,-4(fp)
  80a3a0:	18800015 	stw	r2,0(r3)
	part->activePartition=-1; /* No partition selected */
  80a3a4:	e0fffe17 	ldw	r3,-8(fp)
  80a3a8:	00bfffc4 	movi	r2,-1
  80a3ac:	18800105 	stb	r2,4(r3)
	part_setError(part,PART_NOERROR);
	for(c=3;c>=0;c--){
  80a3b0:	008000c4 	movi	r2,3
  80a3b4:	e0bffd0d 	sth	r2,-12(fp)
  80a3b8:	00001506 	br	80a410 <part_initPartition+0x90>
		if(part_isFatPart(part->disc->partitions[c].type))
  80a3bc:	e0bffe17 	ldw	r2,-8(fp)
  80a3c0:	10c00017 	ldw	r3,0(r2)
  80a3c4:	e0bffd0f 	ldh	r2,-12(fp)
  80a3c8:	1004913a 	slli	r2,r2,4
  80a3cc:	10c5883a 	add	r2,r2,r3
  80a3d0:	10800304 	addi	r2,r2,12
  80a3d4:	10800003 	ldbu	r2,0(r2)
  80a3d8:	11003fcc 	andi	r4,r2,255
  80a3dc:	080a4300 	call	80a430 <part_isFatPart>
  80a3e0:	10bfffcc 	andi	r2,r2,65535
  80a3e4:	10a0001c 	xori	r2,r2,32768
  80a3e8:	10a00004 	addi	r2,r2,-32768
  80a3ec:	1005003a 	cmpeq	r2,r2,zero
  80a3f0:	1000041e 	bne	r2,zero,80a404 <part_initPartition+0x84>
			part->activePartition=c;
  80a3f4:	e0bffd0b 	ldhu	r2,-12(fp)
  80a3f8:	1007883a 	mov	r3,r2
  80a3fc:	e0bffe17 	ldw	r2,-8(fp)
  80a400:	10c00105 	stb	r3,4(r2)
	eint16 c;
	
	part->disc=refDisc;
	part->activePartition=-1; /* No partition selected */
	part_setError(part,PART_NOERROR);
	for(c=3;c>=0;c--){
  80a404:	e0bffd0b 	ldhu	r2,-12(fp)
  80a408:	10bfffc4 	addi	r2,r2,-1
  80a40c:	e0bffd0d 	sth	r2,-12(fp)
  80a410:	e0bffd0f 	ldh	r2,-12(fp)
  80a414:	1004403a 	cmpge	r2,r2,zero
  80a418:	103fe81e 	bne	r2,zero,80a3bc <part_initPartition+0x3c>
		if(part_isFatPart(part->disc->partitions[c].type))
			part->activePartition=c;
	} 
}
  80a41c:	e037883a 	mov	sp,fp
  80a420:	dfc00117 	ldw	ra,4(sp)
  80a424:	df000017 	ldw	fp,0(sp)
  80a428:	dec00204 	addi	sp,sp,8
  80a42c:	f800283a 	ret

0080a430 <part_isFatPart>:
 * Description: This functions checks if a partitiontype (eint8) is of the FAT
 * type in the broadest sense. I
 * Return value: If it is FAT, returns 1, otherwise 0.
*/
eint16 part_isFatPart(euint8 type)
{
  80a430:	defffd04 	addi	sp,sp,-12
  80a434:	df000215 	stw	fp,8(sp)
  80a438:	df000204 	addi	fp,sp,8
  80a43c:	e13ffe05 	stb	r4,-8(fp)
	if(type == PT_FAT12  ||
  80a440:	e0bffe03 	ldbu	r2,-8(fp)
  80a444:	10800060 	cmpeqi	r2,r2,1
  80a448:	10000f1e 	bne	r2,zero,80a488 <part_isFatPart+0x58>
  80a44c:	e0bffe03 	ldbu	r2,-8(fp)
  80a450:	10800120 	cmpeqi	r2,r2,4
  80a454:	10000c1e 	bne	r2,zero,80a488 <part_isFatPart+0x58>
  80a458:	e0bffe03 	ldbu	r2,-8(fp)
  80a45c:	108001a0 	cmpeqi	r2,r2,6
  80a460:	1000091e 	bne	r2,zero,80a488 <part_isFatPart+0x58>
  80a464:	e0bffe03 	ldbu	r2,-8(fp)
  80a468:	108002e0 	cmpeqi	r2,r2,11
  80a46c:	1000061e 	bne	r2,zero,80a488 <part_isFatPart+0x58>
  80a470:	e0bffe03 	ldbu	r2,-8(fp)
  80a474:	10801720 	cmpeqi	r2,r2,92
  80a478:	1000031e 	bne	r2,zero,80a488 <part_isFatPart+0x58>
  80a47c:	e0bffe03 	ldbu	r2,-8(fp)
  80a480:	10801798 	cmpnei	r2,r2,94
  80a484:	1000031e 	bne	r2,zero,80a494 <part_isFatPart+0x64>
	   type == PT_FAT16  ||
	   type == PT_FAT32  ||
	   type == PT_FAT32A ||
	   type == PT_FAT16B   )
	{
		return(1);
  80a488:	00800044 	movi	r2,1
  80a48c:	e0bfff15 	stw	r2,-4(fp)
  80a490:	00000106 	br	80a498 <part_isFatPart+0x68>
	}
	return(0);
  80a494:	e03fff15 	stw	zero,-4(fp)
  80a498:	e0bfff17 	ldw	r2,-4(fp)
}
  80a49c:	e037883a 	mov	sp,fp
  80a4a0:	df000017 	ldw	fp,0(sp)
  80a4a4:	dec00104 	addi	sp,sp,4
  80a4a8:	f800283a 	ret

0080a4ac <part_readBuf>:
/*****************************************************************************/ 

esint8 part_readBuf(Partition *part, euint32 address, euint8* buf)
{
  80a4ac:	defffa04 	addi	sp,sp,-24
  80a4b0:	dfc00515 	stw	ra,20(sp)
  80a4b4:	df000415 	stw	fp,16(sp)
  80a4b8:	dc000315 	stw	r16,12(sp)
  80a4bc:	df000304 	addi	fp,sp,12
  80a4c0:	e13ffd15 	stw	r4,-12(fp)
  80a4c4:	e17ffe15 	stw	r5,-8(fp)
  80a4c8:	e1bfff15 	stw	r6,-4(fp)
	return(if_readBuf(part->disc->ioman->iface,part_getRealLBA(part,address), buf));
  80a4cc:	e0bffd17 	ldw	r2,-12(fp)
  80a4d0:	10800017 	ldw	r2,0(r2)
  80a4d4:	10800017 	ldw	r2,0(r2)
  80a4d8:	14000017 	ldw	r16,0(r2)
  80a4dc:	e13ffd17 	ldw	r4,-12(fp)
  80a4e0:	e17ffe17 	ldw	r5,-8(fp)
  80a4e4:	080a58c0 	call	80a58c <part_getRealLBA>
  80a4e8:	100b883a 	mov	r5,r2
  80a4ec:	8009883a 	mov	r4,r16
  80a4f0:	e1bfff17 	ldw	r6,-4(fp)
  80a4f4:	0809e6c0 	call	809e6c <if_readBuf>
  80a4f8:	10803fcc 	andi	r2,r2,255
  80a4fc:	1080201c 	xori	r2,r2,128
  80a500:	10bfe004 	addi	r2,r2,-128
}
  80a504:	e037883a 	mov	sp,fp
  80a508:	dfc00217 	ldw	ra,8(sp)
  80a50c:	df000117 	ldw	fp,4(sp)
  80a510:	dc000017 	ldw	r16,0(sp)
  80a514:	dec00304 	addi	sp,sp,12
  80a518:	f800283a 	ret

0080a51c <part_writeBuf>:
 * Description: This function writes 512 bytes, from buf. It's offset is address
 * sectors from the beginning of the partition.
 * Return value: It returns whatever the hardware function returns. (-1=error)
*/
eint16 part_writeBuf(Partition *part,euint32 address,euint8* buf)
{
  80a51c:	defffa04 	addi	sp,sp,-24
  80a520:	dfc00515 	stw	ra,20(sp)
  80a524:	df000415 	stw	fp,16(sp)
  80a528:	dc000315 	stw	r16,12(sp)
  80a52c:	df000304 	addi	fp,sp,12
  80a530:	e13ffd15 	stw	r4,-12(fp)
  80a534:	e17ffe15 	stw	r5,-8(fp)
  80a538:	e1bfff15 	stw	r6,-4(fp)
	/*DBG((TXT("part_writeBuf :: %li\n"),address));*/
	return(if_writeBuf(part->disc->ioman->iface,part_getRealLBA(part,address),buf));
  80a53c:	e0bffd17 	ldw	r2,-12(fp)
  80a540:	10800017 	ldw	r2,0(r2)
  80a544:	10800017 	ldw	r2,0(r2)
  80a548:	14000017 	ldw	r16,0(r2)
  80a54c:	e13ffd17 	ldw	r4,-12(fp)
  80a550:	e17ffe17 	ldw	r5,-8(fp)
  80a554:	080a58c0 	call	80a58c <part_getRealLBA>
  80a558:	100b883a 	mov	r5,r2
  80a55c:	8009883a 	mov	r4,r16
  80a560:	e1bfff17 	ldw	r6,-4(fp)
  80a564:	0809ebc0 	call	809ebc <if_writeBuf>
  80a568:	10803fcc 	andi	r2,r2,255
  80a56c:	1080201c 	xori	r2,r2,128
  80a570:	10bfe004 	addi	r2,r2,-128
}
  80a574:	e037883a 	mov	sp,fp
  80a578:	dfc00217 	ldw	ra,8(sp)
  80a57c:	df000117 	ldw	fp,4(sp)
  80a580:	dc000017 	ldw	r16,0(sp)
  80a584:	dec00304 	addi	sp,sp,12
  80a588:	f800283a 	ret

0080a58c <part_getRealLBA>:
 * Description: This function calculates what the partition offset for
 * a partition is + the address.
 * Return value: Sector address.
*/
euint32 part_getRealLBA(Partition *part,euint32 address)
{
  80a58c:	defffd04 	addi	sp,sp,-12
  80a590:	df000215 	stw	fp,8(sp)
  80a594:	df000204 	addi	fp,sp,8
  80a598:	e13ffe15 	stw	r4,-8(fp)
  80a59c:	e17fff15 	stw	r5,-4(fp)
	return(part->disc->partitions[part->activePartition].LBA_begin+address);
  80a5a0:	e0bffe17 	ldw	r2,-8(fp)
  80a5a4:	10c00017 	ldw	r3,0(r2)
  80a5a8:	e0bffe17 	ldw	r2,-8(fp)
  80a5ac:	10800103 	ldbu	r2,4(r2)
  80a5b0:	10803fcc 	andi	r2,r2,255
  80a5b4:	1080201c 	xori	r2,r2,128
  80a5b8:	10bfe004 	addi	r2,r2,-128
  80a5bc:	1004913a 	slli	r2,r2,4
  80a5c0:	10c5883a 	add	r2,r2,r3
  80a5c4:	10800404 	addi	r2,r2,16
  80a5c8:	10c00017 	ldw	r3,0(r2)
  80a5cc:	e0bfff17 	ldw	r2,-4(fp)
  80a5d0:	1885883a 	add	r2,r3,r2
}
  80a5d4:	e037883a 	mov	sp,fp
  80a5d8:	df000017 	ldw	fp,0(sp)
  80a5dc:	dec00104 	addi	sp,sp,4
  80a5e0:	f800283a 	ret

0080a5e4 <part_getSect>:
 * Description: This function calls ioman_getSector, but recalculates the sector
 * address to be partition relative.
 * Return value: Whatever getSector returns. (pointer or 0)
*/
euint8* part_getSect(Partition *part, euint32 address, euint8 mode)
{
  80a5e4:	defffa04 	addi	sp,sp,-24
  80a5e8:	dfc00515 	stw	ra,20(sp)
  80a5ec:	df000415 	stw	fp,16(sp)
  80a5f0:	dc000315 	stw	r16,12(sp)
  80a5f4:	df000304 	addi	fp,sp,12
  80a5f8:	e13ffd15 	stw	r4,-12(fp)
  80a5fc:	e17ffe15 	stw	r5,-8(fp)
  80a600:	e1bfff05 	stb	r6,-4(fp)
	return(ioman_getSector(part->disc->ioman,part_getRealLBA(part,address),mode));
  80a604:	e0bffd17 	ldw	r2,-12(fp)
  80a608:	10800017 	ldw	r2,0(r2)
  80a60c:	14000017 	ldw	r16,0(r2)
  80a610:	e13ffd17 	ldw	r4,-12(fp)
  80a614:	e17ffe17 	ldw	r5,-8(fp)
  80a618:	080a58c0 	call	80a58c <part_getRealLBA>
  80a61c:	100b883a 	mov	r5,r2
  80a620:	e1bfff03 	ldbu	r6,-4(fp)
  80a624:	8009883a 	mov	r4,r16
  80a628:	0808bfc0 	call	808bfc <ioman_getSector>
}
  80a62c:	e037883a 	mov	sp,fp
  80a630:	dfc00217 	ldw	ra,8(sp)
  80a634:	df000117 	ldw	fp,4(sp)
  80a638:	dc000017 	ldw	r16,0(sp)
  80a63c:	dec00304 	addi	sp,sp,12
  80a640:	f800283a 	ret

0080a644 <part_relSect>:
 * esint8 part_relSect(Partition *part, euint8* buf)
 * Description: This function calls ioman_releaseSector.
 * Return value: Whatever releaseSector returns.
*/
esint8 part_relSect(Partition *part, euint8* buf)
{
  80a644:	defffc04 	addi	sp,sp,-16
  80a648:	dfc00315 	stw	ra,12(sp)
  80a64c:	df000215 	stw	fp,8(sp)
  80a650:	df000204 	addi	fp,sp,8
  80a654:	e13ffe15 	stw	r4,-8(fp)
  80a658:	e17fff15 	stw	r5,-4(fp)
	return(ioman_releaseSector(part->disc->ioman,buf));
  80a65c:	e0bffe17 	ldw	r2,-8(fp)
  80a660:	10800017 	ldw	r2,0(r2)
  80a664:	11000017 	ldw	r4,0(r2)
  80a668:	e17fff17 	ldw	r5,-4(fp)
  80a66c:	0808f080 	call	808f08 <ioman_releaseSector>
  80a670:	10803fcc 	andi	r2,r2,255
  80a674:	1080201c 	xori	r2,r2,128
  80a678:	10bfe004 	addi	r2,r2,-128
}
  80a67c:	e037883a 	mov	sp,fp
  80a680:	dfc00117 	ldw	ra,4(sp)
  80a684:	df000017 	ldw	fp,0(sp)
  80a688:	dec00204 	addi	sp,sp,8
  80a68c:	f800283a 	ret

0080a690 <part_flushPart>:

esint8 part_flushPart(Partition *part,euint32 addr_l, euint32 addr_h)
{
  80a690:	defff904 	addi	sp,sp,-28
  80a694:	dfc00615 	stw	ra,24(sp)
  80a698:	df000515 	stw	fp,20(sp)
  80a69c:	dc400415 	stw	r17,16(sp)
  80a6a0:	dc000315 	stw	r16,12(sp)
  80a6a4:	df000304 	addi	fp,sp,12
  80a6a8:	e13ffd15 	stw	r4,-12(fp)
  80a6ac:	e17ffe15 	stw	r5,-8(fp)
  80a6b0:	e1bfff15 	stw	r6,-4(fp)
	return( 
  80a6b4:	e0bffd17 	ldw	r2,-12(fp)
  80a6b8:	10800017 	ldw	r2,0(r2)
  80a6bc:	14000017 	ldw	r16,0(r2)
  80a6c0:	e13ffd17 	ldw	r4,-12(fp)
  80a6c4:	e17ffe17 	ldw	r5,-8(fp)
  80a6c8:	080a58c0 	call	80a58c <part_getRealLBA>
  80a6cc:	1023883a 	mov	r17,r2
  80a6d0:	e13ffd17 	ldw	r4,-12(fp)
  80a6d4:	e17fff17 	ldw	r5,-4(fp)
  80a6d8:	080a58c0 	call	80a58c <part_getRealLBA>
  80a6dc:	100d883a 	mov	r6,r2
  80a6e0:	8009883a 	mov	r4,r16
  80a6e4:	880b883a 	mov	r5,r17
  80a6e8:	08089d40 	call	8089d4 <ioman_flushRange>
  80a6ec:	10803fcc 	andi	r2,r2,255
  80a6f0:	1080201c 	xori	r2,r2,128
  80a6f4:	10bfe004 	addi	r2,r2,-128
		ioman_flushRange(part->disc->ioman,part_getRealLBA(part,addr_l),part_getRealLBA(part,addr_h)) 
	);	
}
  80a6f8:	e037883a 	mov	sp,fp
  80a6fc:	dfc00317 	ldw	ra,12(sp)
  80a700:	df000217 	ldw	fp,8(sp)
  80a704:	dc400117 	ldw	r17,4(sp)
  80a708:	dc000017 	ldw	r16,0(sp)
  80a70c:	dec00404 	addi	sp,sp,16
  80a710:	f800283a 	ret

0080a714 <part_directSectorRead>:

esint8 part_directSectorRead(Partition *part,euint32 address, euint8* buf)
{
  80a714:	defffa04 	addi	sp,sp,-24
  80a718:	dfc00515 	stw	ra,20(sp)
  80a71c:	df000415 	stw	fp,16(sp)
  80a720:	dc000315 	stw	r16,12(sp)
  80a724:	df000304 	addi	fp,sp,12
  80a728:	e13ffd15 	stw	r4,-12(fp)
  80a72c:	e17ffe15 	stw	r5,-8(fp)
  80a730:	e1bfff15 	stw	r6,-4(fp)
	return(
  80a734:	e0bffd17 	ldw	r2,-12(fp)
  80a738:	10800017 	ldw	r2,0(r2)
  80a73c:	14000017 	ldw	r16,0(r2)
  80a740:	e13ffd17 	ldw	r4,-12(fp)
  80a744:	e17ffe17 	ldw	r5,-8(fp)
  80a748:	080a58c0 	call	80a58c <part_getRealLBA>
  80a74c:	100b883a 	mov	r5,r2
  80a750:	8009883a 	mov	r4,r16
  80a754:	e1bfff17 	ldw	r6,-4(fp)
  80a758:	0808fe80 	call	808fe8 <ioman_directSectorRead>
  80a75c:	10803fcc 	andi	r2,r2,255
  80a760:	1080201c 	xori	r2,r2,128
  80a764:	10bfe004 	addi	r2,r2,-128
		ioman_directSectorRead(part->disc->ioman,part_getRealLBA(part,address),buf)
	);
}
  80a768:	e037883a 	mov	sp,fp
  80a76c:	dfc00217 	ldw	ra,8(sp)
  80a770:	df000117 	ldw	fp,4(sp)
  80a774:	dc000017 	ldw	r16,0(sp)
  80a778:	dec00304 	addi	sp,sp,12
  80a77c:	f800283a 	ret

0080a780 <part_directSectorWrite>:

esint8 part_directSectorWrite(Partition *part,euint32 address, euint8* buf)
{
  80a780:	defffa04 	addi	sp,sp,-24
  80a784:	dfc00515 	stw	ra,20(sp)
  80a788:	df000415 	stw	fp,16(sp)
  80a78c:	dc000315 	stw	r16,12(sp)
  80a790:	df000304 	addi	fp,sp,12
  80a794:	e13ffd15 	stw	r4,-12(fp)
  80a798:	e17ffe15 	stw	r5,-8(fp)
  80a79c:	e1bfff15 	stw	r6,-4(fp)
	return(
  80a7a0:	e0bffd17 	ldw	r2,-12(fp)
  80a7a4:	10800017 	ldw	r2,0(r2)
  80a7a8:	14000017 	ldw	r16,0(r2)
  80a7ac:	e13ffd17 	ldw	r4,-12(fp)
  80a7b0:	e17ffe17 	ldw	r5,-8(fp)
  80a7b4:	080a58c0 	call	80a58c <part_getRealLBA>
  80a7b8:	100b883a 	mov	r5,r2
  80a7bc:	8009883a 	mov	r4,r16
  80a7c0:	e1bfff17 	ldw	r6,-4(fp)
  80a7c4:	08091100 	call	809110 <ioman_directSectorWrite>
  80a7c8:	10803fcc 	andi	r2,r2,255
  80a7cc:	1080201c 	xori	r2,r2,128
  80a7d0:	10bfe004 	addi	r2,r2,-128
		ioman_directSectorWrite(part->disc->ioman,part_getRealLBA(part,address),buf)
	);
}
  80a7d4:	e037883a 	mov	sp,fp
  80a7d8:	dfc00217 	ldw	ra,8(sp)
  80a7dc:	df000117 	ldw	fp,4(sp)
  80a7e0:	dc000017 	ldw	r16,0(sp)
  80a7e4:	dec00304 	addi	sp,sp,12
  80a7e8:	f800283a 	ret

0080a7ec <strMatch>:
 * unsigned short strMatch(char* bufa, char*bufb, unsigned long n)
 * Description: Compares bufa and bufb for a length of n bytes.
 * Return value: Returns the number of character NOT matching.
*/
euint16 strMatch(eint8* bufa, eint8*bufb,euint32 n)
{
  80a7ec:	defffa04 	addi	sp,sp,-24
  80a7f0:	df000515 	stw	fp,20(sp)
  80a7f4:	df000504 	addi	fp,sp,20
  80a7f8:	e13ffd15 	stw	r4,-12(fp)
  80a7fc:	e17ffe15 	stw	r5,-8(fp)
  80a800:	e1bfff15 	stw	r6,-4(fp)
	euint32 c;
	euint16 res=0;
  80a804:	e03ffb0d 	sth	zero,-20(fp)
	for(c=0;c<n;c++)if(bufa[c]!=bufb[c])res++;
  80a808:	e03ffc15 	stw	zero,-16(fp)
  80a80c:	00001506 	br	80a864 <strMatch+0x78>
  80a810:	e0fffc17 	ldw	r3,-16(fp)
  80a814:	e0bffd17 	ldw	r2,-12(fp)
  80a818:	1885883a 	add	r2,r3,r2
  80a81c:	11000003 	ldbu	r4,0(r2)
  80a820:	e0fffc17 	ldw	r3,-16(fp)
  80a824:	e0bffe17 	ldw	r2,-8(fp)
  80a828:	1885883a 	add	r2,r3,r2
  80a82c:	10800003 	ldbu	r2,0(r2)
  80a830:	20c03fcc 	andi	r3,r4,255
  80a834:	18c0201c 	xori	r3,r3,128
  80a838:	18ffe004 	addi	r3,r3,-128
  80a83c:	10803fcc 	andi	r2,r2,255
  80a840:	1080201c 	xori	r2,r2,128
  80a844:	10bfe004 	addi	r2,r2,-128
  80a848:	18800326 	beq	r3,r2,80a858 <strMatch+0x6c>
  80a84c:	e0bffb0b 	ldhu	r2,-20(fp)
  80a850:	10800044 	addi	r2,r2,1
  80a854:	e0bffb0d 	sth	r2,-20(fp)
  80a858:	e0bffc17 	ldw	r2,-16(fp)
  80a85c:	10800044 	addi	r2,r2,1
  80a860:	e0bffc15 	stw	r2,-16(fp)
  80a864:	e0fffc17 	ldw	r3,-16(fp)
  80a868:	e0bfff17 	ldw	r2,-4(fp)
  80a86c:	18bfe836 	bltu	r3,r2,80a810 <strMatch+0x24>
	return(res);
  80a870:	e0bffb0b 	ldhu	r2,-20(fp)
}
  80a874:	e037883a 	mov	sp,fp
  80a878:	df000017 	ldw	fp,0(sp)
  80a87c:	dec00104 	addi	sp,sp,4
  80a880:	f800283a 	ret

0080a884 <memCpy>:
 * void memCpy(void* psrc, void* pdest, unsigned long size)
 * Description: Copies the contents of psrc into pdest on a byte per byte basis.
 * The total number of bytes copies is size.
*/
void memCpy(void* psrc, void* pdest, euint32 size)
{
  80a884:	defffc04 	addi	sp,sp,-16
  80a888:	df000315 	stw	fp,12(sp)
  80a88c:	df000304 	addi	fp,sp,12
  80a890:	e13ffd15 	stw	r4,-12(fp)
  80a894:	e17ffe15 	stw	r5,-8(fp)
  80a898:	e1bfff15 	stw	r6,-4(fp)
	while(size>0){
  80a89c:	00000d06 	br	80a8d4 <memCpy+0x50>
		*((eint8*)pdest+size-1)=*((eint8*)psrc+size-1);
  80a8a0:	e0fffe17 	ldw	r3,-8(fp)
  80a8a4:	e0bfff17 	ldw	r2,-4(fp)
  80a8a8:	1885883a 	add	r2,r3,r2
  80a8ac:	113fffc4 	addi	r4,r2,-1
  80a8b0:	e0fffd17 	ldw	r3,-12(fp)
  80a8b4:	e0bfff17 	ldw	r2,-4(fp)
  80a8b8:	1885883a 	add	r2,r3,r2
  80a8bc:	10bfffc4 	addi	r2,r2,-1
  80a8c0:	10800003 	ldbu	r2,0(r2)
  80a8c4:	20800005 	stb	r2,0(r4)
		size--;
  80a8c8:	e0bfff17 	ldw	r2,-4(fp)
  80a8cc:	10bfffc4 	addi	r2,r2,-1
  80a8d0:	e0bfff15 	stw	r2,-4(fp)
 * Description: Copies the contents of psrc into pdest on a byte per byte basis.
 * The total number of bytes copies is size.
*/
void memCpy(void* psrc, void* pdest, euint32 size)
{
	while(size>0){
  80a8d4:	e0bfff17 	ldw	r2,-4(fp)
  80a8d8:	1004c03a 	cmpne	r2,r2,zero
  80a8dc:	103ff01e 	bne	r2,zero,80a8a0 <memCpy+0x1c>
		*((eint8*)pdest+size-1)=*((eint8*)psrc+size-1);
		size--;
	}
}
  80a8e0:	e037883a 	mov	sp,fp
  80a8e4:	df000017 	ldw	fp,0(sp)
  80a8e8:	dec00104 	addi	sp,sp,4
  80a8ec:	f800283a 	ret

0080a8f0 <memClr>:
/*****************************************************************************/ 

void memClr(void *pdest,euint32 size)
{
  80a8f0:	defffd04 	addi	sp,sp,-12
  80a8f4:	df000215 	stw	fp,8(sp)
  80a8f8:	df000204 	addi	fp,sp,8
  80a8fc:	e13ffe15 	stw	r4,-8(fp)
  80a900:	e17fff15 	stw	r5,-4(fp)
	while(size>0){
  80a904:	00000806 	br	80a928 <memClr+0x38>
		*(((eint8*)pdest)+size-1)=0x00;
  80a908:	e0fffe17 	ldw	r3,-8(fp)
  80a90c:	e0bfff17 	ldw	r2,-4(fp)
  80a910:	1885883a 	add	r2,r3,r2
  80a914:	10bfffc4 	addi	r2,r2,-1
  80a918:	10000005 	stb	zero,0(r2)
		size--;
  80a91c:	e0bfff17 	ldw	r2,-4(fp)
  80a920:	10bfffc4 	addi	r2,r2,-1
  80a924:	e0bfff15 	stw	r2,-4(fp)
}
/*****************************************************************************/ 

void memClr(void *pdest,euint32 size)
{
	while(size>0){
  80a928:	e0bfff17 	ldw	r2,-4(fp)
  80a92c:	1004c03a 	cmpne	r2,r2,zero
  80a930:	103ff51e 	bne	r2,zero,80a908 <memClr+0x18>
		*(((eint8*)pdest)+size-1)=0x00;
		size--;
	}
}
  80a934:	e037883a 	mov	sp,fp
  80a938:	df000017 	ldw	fp,0(sp)
  80a93c:	dec00104 	addi	sp,sp,4
  80a940:	f800283a 	ret

0080a944 <memSet>:

void memSet(void *pdest,euint32 size,euint8 data)
{
  80a944:	defffc04 	addi	sp,sp,-16
  80a948:	df000315 	stw	fp,12(sp)
  80a94c:	df000304 	addi	fp,sp,12
  80a950:	e13ffd15 	stw	r4,-12(fp)
  80a954:	e17ffe15 	stw	r5,-8(fp)
  80a958:	e1bfff05 	stb	r6,-4(fp)
	while(size>0){
  80a95c:	00000906 	br	80a984 <memSet+0x40>
		*(((eint8*)pdest)+size-1)=data;
  80a960:	e0fffd17 	ldw	r3,-12(fp)
  80a964:	e0bffe17 	ldw	r2,-8(fp)
  80a968:	1885883a 	add	r2,r3,r2
  80a96c:	10ffffc4 	addi	r3,r2,-1
  80a970:	e0bfff03 	ldbu	r2,-4(fp)
  80a974:	18800005 	stb	r2,0(r3)
		size--;
  80a978:	e0bffe17 	ldw	r2,-8(fp)
  80a97c:	10bfffc4 	addi	r2,r2,-1
  80a980:	e0bffe15 	stw	r2,-8(fp)
	}
}

void memSet(void *pdest,euint32 size,euint8 data)
{
	while(size>0){
  80a984:	e0bffe17 	ldw	r2,-8(fp)
  80a988:	1004c03a 	cmpne	r2,r2,zero
  80a98c:	103ff41e 	bne	r2,zero,80a960 <memSet+0x1c>
		*(((eint8*)pdest)+size-1)=data;
		size--;
	}
}
  80a990:	e037883a 	mov	sp,fp
  80a994:	df000017 	ldw	fp,0(sp)
  80a998:	dec00104 	addi	sp,sp,4
  80a99c:	f800283a 	ret

0080a9a0 <sd_Init>:
#include "sd.h"

/*****************************************************************************/

esint8 sd_Init(hwInterface *iface)
{
  80a9a0:	defffb04 	addi	sp,sp,-20
  80a9a4:	dfc00415 	stw	ra,16(sp)
  80a9a8:	df000315 	stw	fp,12(sp)
  80a9ac:	df000304 	addi	fp,sp,12
  80a9b0:	e13ffe15 	stw	r4,-8(fp)
	esint16 i;
	euint8 resp;
	
	/* Try to send reset command up to 100 times */
	i=100;
  80a9b4:	00801904 	movi	r2,100
  80a9b8:	e0bffd8d 	sth	r2,-10(fp)
	do{
		sd_Command(iface,0, 0, 0);
  80a9bc:	e13ffe17 	ldw	r4,-8(fp)
  80a9c0:	000b883a 	mov	r5,zero
  80a9c4:	000d883a 	mov	r6,zero
  80a9c8:	000f883a 	mov	r7,zero
  80a9cc:	080aae00 	call	80aae0 <sd_Command>
		resp=sd_Resp8b(iface);
  80a9d0:	e13ffe17 	ldw	r4,-8(fp)
  80a9d4:	080ab940 	call	80ab94 <sd_Resp8b>
  80a9d8:	e0bffd05 	stb	r2,-12(fp)
	}
	while(resp!=1 && i--);
  80a9dc:	e0bffd03 	ldbu	r2,-12(fp)
  80a9e0:	10800060 	cmpeqi	r2,r2,1
  80a9e4:	1000061e 	bne	r2,zero,80aa00 <sd_Init+0x60>
  80a9e8:	e0bffd8b 	ldhu	r2,-10(fp)
  80a9ec:	10bfffc4 	addi	r2,r2,-1
  80a9f0:	e0bffd8d 	sth	r2,-10(fp)
  80a9f4:	e0bffd8f 	ldh	r2,-10(fp)
  80a9f8:	10bfffd8 	cmpnei	r2,r2,-1
  80a9fc:	103fef1e 	bne	r2,zero,80a9bc <sd_Init+0x1c>
	
	if(resp!=1){
  80aa00:	e0bffd03 	ldbu	r2,-12(fp)
  80aa04:	10800060 	cmpeqi	r2,r2,1
  80aa08:	10000c1e 	bne	r2,zero,80aa3c <sd_Init+0x9c>
		if(resp==0xff){
  80aa0c:	e0bffd03 	ldbu	r2,-12(fp)
  80aa10:	10803fd8 	cmpnei	r2,r2,255
  80aa14:	1000031e 	bne	r2,zero,80aa24 <sd_Init+0x84>
			return(-1);
  80aa18:	00bfffc4 	movi	r2,-1
  80aa1c:	e0bfff15 	stw	r2,-4(fp)
  80aa20:	00002906 	br	80aac8 <sd_Init+0x128>
		}
		else{
			sd_Resp8bError(iface,resp);
  80aa24:	e17ffd03 	ldbu	r5,-12(fp)
  80aa28:	e13ffe17 	ldw	r4,-8(fp)
  80aa2c:	080ac780 	call	80ac78 <sd_Resp8bError>
			return(-2);
  80aa30:	00bfff84 	movi	r2,-2
  80aa34:	e0bfff15 	stw	r2,-4(fp)
  80aa38:	00002306 	br	80aac8 <sd_Init+0x128>
		}
	}

	/* Wait till card is ready initialising (returns 0 on CMD1) */
	/* Try up to 32000 times. */
	i=32000;
  80aa3c:	009f4004 	movi	r2,32000
  80aa40:	e0bffd8d 	sth	r2,-10(fp)
	do{
		sd_Command(iface,1, 0, 0);
  80aa44:	e13ffe17 	ldw	r4,-8(fp)
  80aa48:	01400044 	movi	r5,1
  80aa4c:	000d883a 	mov	r6,zero
  80aa50:	000f883a 	mov	r7,zero
  80aa54:	080aae00 	call	80aae0 <sd_Command>
		
		resp=sd_Resp8b(iface);
  80aa58:	e13ffe17 	ldw	r4,-8(fp)
  80aa5c:	080ab940 	call	80ab94 <sd_Resp8b>
  80aa60:	e0bffd05 	stb	r2,-12(fp)
		if(resp!=0)
  80aa64:	e0bffd03 	ldbu	r2,-12(fp)
  80aa68:	1005003a 	cmpeq	r2,r2,zero
  80aa6c:	1000031e 	bne	r2,zero,80aa7c <sd_Init+0xdc>
			sd_Resp8bError(iface,resp);
  80aa70:	e17ffd03 	ldbu	r5,-12(fp)
  80aa74:	e13ffe17 	ldw	r4,-8(fp)
  80aa78:	080ac780 	call	80ac78 <sd_Resp8bError>
	}
	while(resp==1 && i--);
  80aa7c:	e0bffd03 	ldbu	r2,-12(fp)
  80aa80:	10800058 	cmpnei	r2,r2,1
  80aa84:	1000061e 	bne	r2,zero,80aaa0 <sd_Init+0x100>
  80aa88:	e0bffd8b 	ldhu	r2,-10(fp)
  80aa8c:	10bfffc4 	addi	r2,r2,-1
  80aa90:	e0bffd8d 	sth	r2,-10(fp)
  80aa94:	e0bffd8f 	ldh	r2,-10(fp)
  80aa98:	10bfffd8 	cmpnei	r2,r2,-1
  80aa9c:	103fe91e 	bne	r2,zero,80aa44 <sd_Init+0xa4>
	
	if(resp!=0){
  80aaa0:	e0bffd03 	ldbu	r2,-12(fp)
  80aaa4:	1005003a 	cmpeq	r2,r2,zero
  80aaa8:	1000061e 	bne	r2,zero,80aac4 <sd_Init+0x124>
		sd_Resp8bError(iface,resp);
  80aaac:	e17ffd03 	ldbu	r5,-12(fp)
  80aab0:	e13ffe17 	ldw	r4,-8(fp)
  80aab4:	080ac780 	call	80ac78 <sd_Resp8bError>
		return(-3);
  80aab8:	00bfff44 	movi	r2,-3
  80aabc:	e0bfff15 	stw	r2,-4(fp)
  80aac0:	00000106 	br	80aac8 <sd_Init+0x128>
	}
	
	return(0);
  80aac4:	e03fff15 	stw	zero,-4(fp)
  80aac8:	e0bfff17 	ldw	r2,-4(fp)
}
  80aacc:	e037883a 	mov	sp,fp
  80aad0:	dfc00117 	ldw	ra,4(sp)
  80aad4:	df000017 	ldw	fp,0(sp)
  80aad8:	dec00204 	addi	sp,sp,8
  80aadc:	f800283a 	ret

0080aae0 <sd_Command>:
/*****************************************************************************/

void sd_Command(hwInterface *iface,euint8 cmd, euint16 paramx, euint16 paramy)
{
  80aae0:	defffa04 	addi	sp,sp,-24
  80aae4:	dfc00515 	stw	ra,20(sp)
  80aae8:	df000415 	stw	fp,16(sp)
  80aaec:	df000404 	addi	fp,sp,16
  80aaf0:	e13ffc15 	stw	r4,-16(fp)
  80aaf4:	e17ffd05 	stb	r5,-12(fp)
  80aaf8:	e1bffe0d 	sth	r6,-8(fp)
  80aafc:	e1ffff0d 	sth	r7,-4(fp)
	if_spiSend(iface,0xff);
  80ab00:	e13ffc17 	ldw	r4,-16(fp)
  80ab04:	01403fc4 	movi	r5,255
  80ab08:	0809f740 	call	809f74 <if_spiSend>

	if_spiSend(iface,0x40 | cmd);
  80ab0c:	e0bffd03 	ldbu	r2,-12(fp)
  80ab10:	10801014 	ori	r2,r2,64
  80ab14:	11403fcc 	andi	r5,r2,255
  80ab18:	e13ffc17 	ldw	r4,-16(fp)
  80ab1c:	0809f740 	call	809f74 <if_spiSend>
	if_spiSend(iface,(euint8) (paramx >> 8)); /* MSB of parameter x */
  80ab20:	e0bffe0b 	ldhu	r2,-8(fp)
  80ab24:	1004d23a 	srli	r2,r2,8
  80ab28:	11403fcc 	andi	r5,r2,255
  80ab2c:	e13ffc17 	ldw	r4,-16(fp)
  80ab30:	0809f740 	call	809f74 <if_spiSend>
	if_spiSend(iface,(euint8) (paramx)); /* LSB of parameter x */
  80ab34:	e0bffe0b 	ldhu	r2,-8(fp)
  80ab38:	11403fcc 	andi	r5,r2,255
  80ab3c:	e13ffc17 	ldw	r4,-16(fp)
  80ab40:	0809f740 	call	809f74 <if_spiSend>
	if_spiSend(iface,(euint8) (paramy >> 8)); /* MSB of parameter y */
  80ab44:	e0bfff0b 	ldhu	r2,-4(fp)
  80ab48:	1004d23a 	srli	r2,r2,8
  80ab4c:	11403fcc 	andi	r5,r2,255
  80ab50:	e13ffc17 	ldw	r4,-16(fp)
  80ab54:	0809f740 	call	809f74 <if_spiSend>
	if_spiSend(iface,(euint8) (paramy)); /* LSB of parameter y */
  80ab58:	e0bfff0b 	ldhu	r2,-4(fp)
  80ab5c:	11403fcc 	andi	r5,r2,255
  80ab60:	e13ffc17 	ldw	r4,-16(fp)
  80ab64:	0809f740 	call	809f74 <if_spiSend>

	if_spiSend(iface,0x95); /* Checksum (should be only valid for first command (0) */
  80ab68:	e13ffc17 	ldw	r4,-16(fp)
  80ab6c:	01402544 	movi	r5,149
  80ab70:	0809f740 	call	809f74 <if_spiSend>

	if_spiSend(iface,0xff); /* eat empty command - response */
  80ab74:	e13ffc17 	ldw	r4,-16(fp)
  80ab78:	01403fc4 	movi	r5,255
  80ab7c:	0809f740 	call	809f74 <if_spiSend>
}
  80ab80:	e037883a 	mov	sp,fp
  80ab84:	dfc00117 	ldw	ra,4(sp)
  80ab88:	df000017 	ldw	fp,0(sp)
  80ab8c:	dec00204 	addi	sp,sp,8
  80ab90:	f800283a 	ret

0080ab94 <sd_Resp8b>:
/*****************************************************************************/

euint8 sd_Resp8b(hwInterface *iface)
{
  80ab94:	defffb04 	addi	sp,sp,-20
  80ab98:	dfc00415 	stw	ra,16(sp)
  80ab9c:	df000315 	stw	fp,12(sp)
  80aba0:	df000304 	addi	fp,sp,12
  80aba4:	e13ffe15 	stw	r4,-8(fp)
	euint8 i;
	euint8 resp;
	
	/* Respone will come after 1 - 8 pings */
	for(i=0;i<8;i++){
  80aba8:	e03ffd45 	stb	zero,-11(fp)
  80abac:	00000d06 	br	80abe4 <sd_Resp8b+0x50>
		resp = if_spiSend(iface,0xff);
  80abb0:	e13ffe17 	ldw	r4,-8(fp)
  80abb4:	01403fc4 	movi	r5,255
  80abb8:	0809f740 	call	809f74 <if_spiSend>
  80abbc:	e0bffd05 	stb	r2,-12(fp)
		if(resp != 0xff)
  80abc0:	e0bffd03 	ldbu	r2,-12(fp)
  80abc4:	10803fe0 	cmpeqi	r2,r2,255
  80abc8:	1000031e 	bne	r2,zero,80abd8 <sd_Resp8b+0x44>
			return(resp);
  80abcc:	e0bffd03 	ldbu	r2,-12(fp)
  80abd0:	e0bfff15 	stw	r2,-4(fp)
  80abd4:	00000806 	br	80abf8 <sd_Resp8b+0x64>
{
	euint8 i;
	euint8 resp;
	
	/* Respone will come after 1 - 8 pings */
	for(i=0;i<8;i++){
  80abd8:	e0bffd43 	ldbu	r2,-11(fp)
  80abdc:	10800044 	addi	r2,r2,1
  80abe0:	e0bffd45 	stb	r2,-11(fp)
  80abe4:	e0bffd43 	ldbu	r2,-11(fp)
  80abe8:	10800230 	cmpltui	r2,r2,8
  80abec:	103ff01e 	bne	r2,zero,80abb0 <sd_Resp8b+0x1c>
		resp = if_spiSend(iface,0xff);
		if(resp != 0xff)
			return(resp);
	}
		
	return(resp);
  80abf0:	e0bffd03 	ldbu	r2,-12(fp)
  80abf4:	e0bfff15 	stw	r2,-4(fp)
  80abf8:	e0bfff17 	ldw	r2,-4(fp)
}
  80abfc:	e037883a 	mov	sp,fp
  80ac00:	dfc00117 	ldw	ra,4(sp)
  80ac04:	df000017 	ldw	fp,0(sp)
  80ac08:	dec00204 	addi	sp,sp,8
  80ac0c:	f800283a 	ret

0080ac10 <sd_Resp16b>:
/*****************************************************************************/

euint16 sd_Resp16b(hwInterface *iface)
{
  80ac10:	defffc04 	addi	sp,sp,-16
  80ac14:	dfc00315 	stw	ra,12(sp)
  80ac18:	df000215 	stw	fp,8(sp)
  80ac1c:	df000204 	addi	fp,sp,8
  80ac20:	e13fff15 	stw	r4,-4(fp)
	euint16 resp;
	
	resp = ( sd_Resp8b(iface) << 8 ) & 0xff00;
  80ac24:	e13fff17 	ldw	r4,-4(fp)
  80ac28:	080ab940 	call	80ab94 <sd_Resp8b>
  80ac2c:	10803fcc 	andi	r2,r2,255
  80ac30:	1004923a 	slli	r2,r2,8
  80ac34:	1007883a 	mov	r3,r2
  80ac38:	00bfc004 	movi	r2,-256
  80ac3c:	1884703a 	and	r2,r3,r2
  80ac40:	e0bffe0d 	sth	r2,-8(fp)
	resp |= if_spiSend(iface,0xff);
  80ac44:	e13fff17 	ldw	r4,-4(fp)
  80ac48:	01403fc4 	movi	r5,255
  80ac4c:	0809f740 	call	809f74 <if_spiSend>
  80ac50:	10c03fcc 	andi	r3,r2,255
  80ac54:	e0bffe0b 	ldhu	r2,-8(fp)
  80ac58:	10c4b03a 	or	r2,r2,r3
  80ac5c:	e0bffe0d 	sth	r2,-8(fp)
	
	return(resp);
  80ac60:	e0bffe0b 	ldhu	r2,-8(fp)
}
  80ac64:	e037883a 	mov	sp,fp
  80ac68:	dfc00117 	ldw	ra,4(sp)
  80ac6c:	df000017 	ldw	fp,0(sp)
  80ac70:	dec00204 	addi	sp,sp,8
  80ac74:	f800283a 	ret

0080ac78 <sd_Resp8bError>:
/*****************************************************************************/

void sd_Resp8bError(hwInterface *iface,euint8 value)
{
  80ac78:	defffb04 	addi	sp,sp,-20
  80ac7c:	dfc00415 	stw	ra,16(sp)
  80ac80:	df000315 	stw	fp,12(sp)
  80ac84:	df000304 	addi	fp,sp,12
  80ac88:	e13ffd15 	stw	r4,-12(fp)
  80ac8c:	e17ffe05 	stb	r5,-8(fp)
	switch(value)
  80ac90:	e0bffe03 	ldbu	r2,-8(fp)
  80ac94:	e0bfff15 	stw	r2,-4(fp)
  80ac98:	e0ffff17 	ldw	r3,-4(fp)
  80ac9c:	18801068 	cmpgeui	r2,r3,65
  80aca0:	1000621e 	bne	r2,zero,80ae2c <sd_Resp8bError+0x1b4>
  80aca4:	e13fff17 	ldw	r4,-4(fp)
  80aca8:	e13fff17 	ldw	r4,-4(fp)
  80acac:	2105883a 	add	r2,r4,r4
  80acb0:	1087883a 	add	r3,r2,r2
  80acb4:	00802074 	movhi	r2,129
  80acb8:	10ab3204 	addi	r2,r2,-21304
  80acbc:	1885883a 	add	r2,r3,r2
  80acc0:	10800017 	ldw	r2,0(r2)
  80acc4:	1000683a 	jmp	r2
  80acc8:	0080ae2c 	andhi	r2,zero,696
  80accc:	0080ae3c 	xorhi	r2,zero,696
  80acd0:	0080ae1c 	xori	r2,zero,696
  80acd4:	0080ae2c 	andhi	r2,zero,696
  80acd8:	0080ae0c 	andi	r2,zero,696
  80acdc:	0080ae2c 	andhi	r2,zero,696
  80ace0:	0080ae2c 	andhi	r2,zero,696
  80ace4:	0080ae2c 	andhi	r2,zero,696
  80ace8:	0080adfc 	xorhi	r2,zero,695
  80acec:	0080ae2c 	andhi	r2,zero,696
  80acf0:	0080ae2c 	andhi	r2,zero,696
  80acf4:	0080ae2c 	andhi	r2,zero,696
  80acf8:	0080ae2c 	andhi	r2,zero,696
  80acfc:	0080ae2c 	andhi	r2,zero,696
  80ad00:	0080ae2c 	andhi	r2,zero,696
  80ad04:	0080ae2c 	andhi	r2,zero,696
  80ad08:	0080adec 	andhi	r2,zero,695
  80ad0c:	0080ae2c 	andhi	r2,zero,696
  80ad10:	0080ae2c 	andhi	r2,zero,696
  80ad14:	0080ae2c 	andhi	r2,zero,696
  80ad18:	0080ae2c 	andhi	r2,zero,696
  80ad1c:	0080ae2c 	andhi	r2,zero,696
  80ad20:	0080ae2c 	andhi	r2,zero,696
  80ad24:	0080ae2c 	andhi	r2,zero,696
  80ad28:	0080ae2c 	andhi	r2,zero,696
  80ad2c:	0080ae2c 	andhi	r2,zero,696
  80ad30:	0080ae2c 	andhi	r2,zero,696
  80ad34:	0080ae2c 	andhi	r2,zero,696
  80ad38:	0080ae2c 	andhi	r2,zero,696
  80ad3c:	0080ae2c 	andhi	r2,zero,696
  80ad40:	0080ae2c 	andhi	r2,zero,696
  80ad44:	0080ae2c 	andhi	r2,zero,696
  80ad48:	0080addc 	xori	r2,zero,695
  80ad4c:	0080ae2c 	andhi	r2,zero,696
  80ad50:	0080ae2c 	andhi	r2,zero,696
  80ad54:	0080ae2c 	andhi	r2,zero,696
  80ad58:	0080ae2c 	andhi	r2,zero,696
  80ad5c:	0080ae2c 	andhi	r2,zero,696
  80ad60:	0080ae2c 	andhi	r2,zero,696
  80ad64:	0080ae2c 	andhi	r2,zero,696
  80ad68:	0080ae2c 	andhi	r2,zero,696
  80ad6c:	0080ae2c 	andhi	r2,zero,696
  80ad70:	0080ae2c 	andhi	r2,zero,696
  80ad74:	0080ae2c 	andhi	r2,zero,696
  80ad78:	0080ae2c 	andhi	r2,zero,696
  80ad7c:	0080ae2c 	andhi	r2,zero,696
  80ad80:	0080ae2c 	andhi	r2,zero,696
  80ad84:	0080ae2c 	andhi	r2,zero,696
  80ad88:	0080ae2c 	andhi	r2,zero,696
  80ad8c:	0080ae2c 	andhi	r2,zero,696
  80ad90:	0080ae2c 	andhi	r2,zero,696
  80ad94:	0080ae2c 	andhi	r2,zero,696
  80ad98:	0080ae2c 	andhi	r2,zero,696
  80ad9c:	0080ae2c 	andhi	r2,zero,696
  80ada0:	0080ae2c 	andhi	r2,zero,696
  80ada4:	0080ae2c 	andhi	r2,zero,696
  80ada8:	0080ae2c 	andhi	r2,zero,696
  80adac:	0080ae2c 	andhi	r2,zero,696
  80adb0:	0080ae2c 	andhi	r2,zero,696
  80adb4:	0080ae2c 	andhi	r2,zero,696
  80adb8:	0080ae2c 	andhi	r2,zero,696
  80adbc:	0080ae2c 	andhi	r2,zero,696
  80adc0:	0080ae2c 	andhi	r2,zero,696
  80adc4:	0080ae2c 	andhi	r2,zero,696
  80adc8:	0080adcc 	andi	r2,zero,695
	{
		case 0x40:
			DBG((TXT("Argument out of bounds.\n")));
  80adcc:	010020b4 	movhi	r4,130
  80add0:	211deb04 	addi	r4,r4,30636
  80add4:	08124e00 	call	8124e0 <puts>
			break;
  80add8:	00001806 	br	80ae3c <sd_Resp8bError+0x1c4>
		case 0x20:
			DBG((TXT("Address out of bounds.\n")));
  80addc:	010020b4 	movhi	r4,130
  80ade0:	211df104 	addi	r4,r4,30660
  80ade4:	08124e00 	call	8124e0 <puts>
			break;
  80ade8:	00001406 	br	80ae3c <sd_Resp8bError+0x1c4>
		case 0x10:
			DBG((TXT("Error during erase sequence.\n")));
  80adec:	010020b4 	movhi	r4,130
  80adf0:	211df704 	addi	r4,r4,30684
  80adf4:	08124e00 	call	8124e0 <puts>
			break;
  80adf8:	00001006 	br	80ae3c <sd_Resp8bError+0x1c4>
		case 0x08:
			DBG((TXT("CRC failed.\n")));
  80adfc:	010020b4 	movhi	r4,130
  80ae00:	211dff04 	addi	r4,r4,30716
  80ae04:	08124e00 	call	8124e0 <puts>
			break;
  80ae08:	00000c06 	br	80ae3c <sd_Resp8bError+0x1c4>
		case 0x04:
			DBG((TXT("Illegal command.\n")));
  80ae0c:	010020b4 	movhi	r4,130
  80ae10:	211e0204 	addi	r4,r4,30728
  80ae14:	08124e00 	call	8124e0 <puts>
			break;
  80ae18:	00000806 	br	80ae3c <sd_Resp8bError+0x1c4>
		case 0x02:
			DBG((TXT("Erase reset (see SanDisk docs p5-13).\n")));
  80ae1c:	010020b4 	movhi	r4,130
  80ae20:	211e0704 	addi	r4,r4,30748
  80ae24:	08124e00 	call	8124e0 <puts>
			break;
  80ae28:	00000406 	br	80ae3c <sd_Resp8bError+0x1c4>
		case 0x01:
			//DBG((TXT("Card is initialising.\n")));
			break;
		default:
			DBG((TXT("Unknown error 0x%x (see SanDisk docs p5-13).\n"),value));
  80ae2c:	e17ffe03 	ldbu	r5,-8(fp)
  80ae30:	010020b4 	movhi	r4,130
  80ae34:	211e1104 	addi	r4,r4,30788
  80ae38:	08123a40 	call	8123a4 <printf>
			break;
	}
}
  80ae3c:	e037883a 	mov	sp,fp
  80ae40:	dfc00117 	ldw	ra,4(sp)
  80ae44:	df000017 	ldw	fp,0(sp)
  80ae48:	dec00204 	addi	sp,sp,8
  80ae4c:	f800283a 	ret

0080ae50 <sd_State>:
/*****************************************************************************/

esint8 sd_State(hwInterface *iface)
{
  80ae50:	defffa04 	addi	sp,sp,-24
  80ae54:	dfc00515 	stw	ra,20(sp)
  80ae58:	df000415 	stw	fp,16(sp)
  80ae5c:	df000404 	addi	fp,sp,16
  80ae60:	e13ffd15 	stw	r4,-12(fp)
	eint16 value;
	
	sd_Command(iface,13, 0, 0);
  80ae64:	e13ffd17 	ldw	r4,-12(fp)
  80ae68:	01400344 	movi	r5,13
  80ae6c:	000d883a 	mov	r6,zero
  80ae70:	000f883a 	mov	r7,zero
  80ae74:	080aae00 	call	80aae0 <sd_Command>
	value=sd_Resp16b(iface);
  80ae78:	e13ffd17 	ldw	r4,-12(fp)
  80ae7c:	080ac100 	call	80ac10 <sd_Resp16b>
  80ae80:	e0bffc0d 	sth	r2,-16(fp)

	switch(value)
  80ae84:	e0bffc0f 	ldh	r2,-16(fp)
  80ae88:	e0bfff15 	stw	r2,-4(fp)
  80ae8c:	e0ffff17 	ldw	r3,-4(fp)
  80ae90:	18800220 	cmpeqi	r2,r3,8
  80ae94:	1000341e 	bne	r2,zero,80af68 <sd_State+0x118>
  80ae98:	e0ffff17 	ldw	r3,-4(fp)
  80ae9c:	18800248 	cmpgei	r2,r3,9
  80aea0:	1000111e 	bne	r2,zero,80aee8 <sd_State+0x98>
  80aea4:	e0ffff17 	ldw	r3,-4(fp)
  80aea8:	18800060 	cmpeqi	r2,r3,1
  80aeac:	1000221e 	bne	r2,zero,80af38 <sd_State+0xe8>
  80aeb0:	e0ffff17 	ldw	r3,-4(fp)
  80aeb4:	18800088 	cmpgei	r2,r3,2
  80aeb8:	1000041e 	bne	r2,zero,80aecc <sd_State+0x7c>
  80aebc:	e0ffff17 	ldw	r3,-4(fp)
  80aec0:	1805003a 	cmpeq	r2,r3,zero
  80aec4:	1000191e 	bne	r2,zero,80af2c <sd_State+0xdc>
  80aec8:	00003b06 	br	80afb8 <sd_State+0x168>
  80aecc:	e0ffff17 	ldw	r3,-4(fp)
  80aed0:	188000a0 	cmpeqi	r2,r3,2
  80aed4:	10001c1e 	bne	r2,zero,80af48 <sd_State+0xf8>
  80aed8:	e0ffff17 	ldw	r3,-4(fp)
  80aedc:	18800120 	cmpeqi	r2,r3,4
  80aee0:	10001d1e 	bne	r2,zero,80af58 <sd_State+0x108>
  80aee4:	00003406 	br	80afb8 <sd_State+0x168>
  80aee8:	e0ffff17 	ldw	r3,-4(fp)
  80aeec:	18800820 	cmpeqi	r2,r3,32
  80aef0:	1000251e 	bne	r2,zero,80af88 <sd_State+0x138>
  80aef4:	e0ffff17 	ldw	r3,-4(fp)
  80aef8:	18800848 	cmpgei	r2,r3,33
  80aefc:	1000041e 	bne	r2,zero,80af10 <sd_State+0xc0>
  80af00:	e0ffff17 	ldw	r3,-4(fp)
  80af04:	18800420 	cmpeqi	r2,r3,16
  80af08:	10001b1e 	bne	r2,zero,80af78 <sd_State+0x128>
  80af0c:	00002a06 	br	80afb8 <sd_State+0x168>
  80af10:	e0ffff17 	ldw	r3,-4(fp)
  80af14:	18801020 	cmpeqi	r2,r3,64
  80af18:	10001f1e 	bne	r2,zero,80af98 <sd_State+0x148>
  80af1c:	e0ffff17 	ldw	r3,-4(fp)
  80af20:	18802020 	cmpeqi	r2,r3,128
  80af24:	1000201e 	bne	r2,zero,80afa8 <sd_State+0x158>
  80af28:	00002306 	br	80afb8 <sd_State+0x168>
	{
		case 0x000:
			return(1);
  80af2c:	00800044 	movi	r2,1
  80af30:	e0bffe15 	stw	r2,-8(fp)
  80af34:	00002f06 	br	80aff4 <sd_State+0x1a4>
			break;
		case 0x0001:
			DBG((TXT("Card is Locked.\n")));
  80af38:	010020b4 	movhi	r4,130
  80af3c:	211e1d04 	addi	r4,r4,30836
  80af40:	08124e00 	call	8124e0 <puts>
			break;
  80af44:	00002906 	br	80afec <sd_State+0x19c>
		case 0x0002:
			DBG((TXT("WP Erase Skip, Lock/Unlock Cmd Failed.\n")));
  80af48:	010020b4 	movhi	r4,130
  80af4c:	211e2104 	addi	r4,r4,30852
  80af50:	08124e00 	call	8124e0 <puts>
			break;
  80af54:	00002506 	br	80afec <sd_State+0x19c>
		case 0x0004:
			DBG((TXT("General / Unknown error -- card broken?.\n")));
  80af58:	010020b4 	movhi	r4,130
  80af5c:	211e2b04 	addi	r4,r4,30892
  80af60:	08124e00 	call	8124e0 <puts>
			break;
  80af64:	00002106 	br	80afec <sd_State+0x19c>
		case 0x0008:
			DBG((TXT("Internal card controller error.\n")));
  80af68:	010020b4 	movhi	r4,130
  80af6c:	211e3604 	addi	r4,r4,30936
  80af70:	08124e00 	call	8124e0 <puts>
			break;
  80af74:	00001d06 	br	80afec <sd_State+0x19c>
		case 0x0010:
			DBG((TXT("Card internal ECC was applied, but failed to correct the data.\n")));
  80af78:	010020b4 	movhi	r4,130
  80af7c:	211e3e04 	addi	r4,r4,30968
  80af80:	08124e00 	call	8124e0 <puts>
			break;
  80af84:	00001906 	br	80afec <sd_State+0x19c>
		case 0x0020:
			DBG((TXT("Write protect violation.\n")));
  80af88:	010020b4 	movhi	r4,130
  80af8c:	211e4e04 	addi	r4,r4,31032
  80af90:	08124e00 	call	8124e0 <puts>
			break;
  80af94:	00001506 	br	80afec <sd_State+0x19c>
		case 0x0040:
			DBG((TXT("An invalid selection, sectors for erase.\n")));
  80af98:	010020b4 	movhi	r4,130
  80af9c:	211e5504 	addi	r4,r4,31060
  80afa0:	08124e00 	call	8124e0 <puts>
			break;
  80afa4:	00001106 	br	80afec <sd_State+0x19c>
		case 0x0080:
			DBG((TXT("Out of Range, CSD_Overwrite.\n")));
  80afa8:	010020b4 	movhi	r4,130
  80afac:	211e6004 	addi	r4,r4,31104
  80afb0:	08124e00 	call	8124e0 <puts>
			break;
  80afb4:	00000d06 	br	80afec <sd_State+0x19c>
		default:
			if(value>0x00FF)
  80afb8:	e0bffc0f 	ldh	r2,-16(fp)
  80afbc:	10804010 	cmplti	r2,r2,256
  80afc0:	1000061e 	bne	r2,zero,80afdc <sd_State+0x18c>
				sd_Resp8bError(iface,(euint8) (value>>8));
  80afc4:	e0bffc0f 	ldh	r2,-16(fp)
  80afc8:	1005d23a 	srai	r2,r2,8
  80afcc:	11403fcc 	andi	r5,r2,255
  80afd0:	e13ffd17 	ldw	r4,-12(fp)
  80afd4:	080ac780 	call	80ac78 <sd_Resp8bError>
  80afd8:	00000406 	br	80afec <sd_State+0x19c>
			else
				DBG((TXT("Unknown error: 0x%x (see SanDisk docs p5-14).\n"),value));
  80afdc:	e17ffc0f 	ldh	r5,-16(fp)
  80afe0:	010020b4 	movhi	r4,130
  80afe4:	211e6804 	addi	r4,r4,31136
  80afe8:	08123a40 	call	8123a4 <printf>
			break;
	}
	return(-1);
  80afec:	00ffffc4 	movi	r3,-1
  80aff0:	e0fffe15 	stw	r3,-8(fp)
  80aff4:	e0bffe17 	ldw	r2,-8(fp)
}
  80aff8:	e037883a 	mov	sp,fp
  80affc:	dfc00117 	ldw	ra,4(sp)
  80b000:	df000017 	ldw	fp,0(sp)
  80b004:	dec00204 	addi	sp,sp,8
  80b008:	f800283a 	ret

0080b00c <sd_writeSector>:
 *      CHKS (2B)
 * BUSY...
 */

esint8 sd_writeSector(hwInterface *iface,euint32 address, euint8* buf)
{
  80b00c:	defff904 	addi	sp,sp,-28
  80b010:	dfc00615 	stw	ra,24(sp)
  80b014:	df000515 	stw	fp,20(sp)
  80b018:	df000504 	addi	fp,sp,20
  80b01c:	e13ffd15 	stw	r4,-12(fp)
  80b020:	e17ffe15 	stw	r5,-8(fp)
  80b024:	e1bfff15 	stw	r6,-4(fp)
	euint32 place;
	euint16 i;
	euint16 t=0;
  80b028:	e03ffb0d 	sth	zero,-20(fp)
	
	/*DBG((TXT("Trying to write %u to sector %u.\n"),(void *)&buf,address));*/
	place=512*address;
  80b02c:	e0bffe17 	ldw	r2,-8(fp)
  80b030:	1004927a 	slli	r2,r2,9
  80b034:	e0bffc15 	stw	r2,-16(fp)
	sd_Command(iface,CMDWRITE, (euint16) (place >> 16), (euint16) place);
  80b038:	e0bffc17 	ldw	r2,-16(fp)
  80b03c:	1004d43a 	srli	r2,r2,16
  80b040:	11bfffcc 	andi	r6,r2,65535
  80b044:	e0bffc17 	ldw	r2,-16(fp)
  80b048:	11ffffcc 	andi	r7,r2,65535
  80b04c:	e13ffd17 	ldw	r4,-12(fp)
  80b050:	01400604 	movi	r5,24
  80b054:	080aae00 	call	80aae0 <sd_Command>

	sd_Resp8b(iface); /* Card response */
  80b058:	e13ffd17 	ldw	r4,-12(fp)
  80b05c:	080ab940 	call	80ab94 <sd_Resp8b>

	if_spiSend(iface,0xfe); /* Start block */
  80b060:	e13ffd17 	ldw	r4,-12(fp)
  80b064:	01403f84 	movi	r5,254
  80b068:	0809f740 	call	809f74 <if_spiSend>
    #if 0
	for(i=0;i<512;i++) 
		if_spiSend(iface,buf[i]); /* Send data */
    #else
        if_spi_sendbuf(iface, buf, 512);
  80b06c:	e13ffd17 	ldw	r4,-12(fp)
  80b070:	e17fff17 	ldw	r5,-4(fp)
  80b074:	01808004 	movi	r6,512
  80b078:	080a0940 	call	80a094 <if_spi_sendbuf>
    #endif
	if_spiSend(iface,0xff); /* Checksum part 1 */
  80b07c:	e13ffd17 	ldw	r4,-12(fp)
  80b080:	01403fc4 	movi	r5,255
  80b084:	0809f740 	call	809f74 <if_spiSend>
	if_spiSend(iface,0xff); /* Checksum part 2 */
  80b088:	e13ffd17 	ldw	r4,-12(fp)
  80b08c:	01403fc4 	movi	r5,255
  80b090:	0809f740 	call	809f74 <if_spiSend>

	if_spiSend(iface,0xff);
  80b094:	e13ffd17 	ldw	r4,-12(fp)
  80b098:	01403fc4 	movi	r5,255
  80b09c:	0809f740 	call	809f74 <if_spiSend>

	while(if_spiSend(iface,0xff)!=0xff){
  80b0a0:	00000306 	br	80b0b0 <sd_writeSector+0xa4>
		t++;
  80b0a4:	e0bffb0b 	ldhu	r2,-20(fp)
  80b0a8:	10800044 	addi	r2,r2,1
  80b0ac:	e0bffb0d 	sth	r2,-20(fp)
	if_spiSend(iface,0xff); /* Checksum part 1 */
	if_spiSend(iface,0xff); /* Checksum part 2 */

	if_spiSend(iface,0xff);

	while(if_spiSend(iface,0xff)!=0xff){
  80b0b0:	e13ffd17 	ldw	r4,-12(fp)
  80b0b4:	01403fc4 	movi	r5,255
  80b0b8:	0809f740 	call	809f74 <if_spiSend>
  80b0bc:	10803fcc 	andi	r2,r2,255
  80b0c0:	10803fd8 	cmpnei	r2,r2,255
  80b0c4:	103ff71e 	bne	r2,zero,80b0a4 <sd_writeSector+0x98>
		t++;
		/* Removed NOP */
	}
	/*DBG((TXT("Nopp'ed %u times.\n"),t));*/

	return(0);
  80b0c8:	0005883a 	mov	r2,zero
}
  80b0cc:	e037883a 	mov	sp,fp
  80b0d0:	dfc00117 	ldw	ra,4(sp)
  80b0d4:	df000017 	ldw	fp,0(sp)
  80b0d8:	dec00204 	addi	sp,sp,8
  80b0dc:	f800283a 	ret

0080b0e0 <sd_readSector>:
 * 		DATA
 * 		CHKS (2B)
 */

esint8 sd_readSector(hwInterface *iface,euint32 address, euint8* buf, euint16 len)
{
  80b0e0:	defff504 	addi	sp,sp,-44
  80b0e4:	dfc00a15 	stw	ra,40(sp)
  80b0e8:	df000915 	stw	fp,36(sp)
  80b0ec:	df000904 	addi	fp,sp,36
  80b0f0:	e13ffb15 	stw	r4,-20(fp)
  80b0f4:	e17ffc15 	stw	r5,-16(fp)
  80b0f8:	e1bffd15 	stw	r6,-12(fp)
  80b0fc:	e1fffe0d 	sth	r7,-8(fp)
	euint8 cardresp;
	euint8 firstblock;
	euint8 c;
	euint16 fb_timeout=0xffff;
  80b100:	00bfffc4 	movi	r2,-1
  80b104:	e0bff90d 	sth	r2,-28(fp)
	euint32 i;
	euint32 place;

	/*DBG((TXT("sd_readSector::Trying to read sector %u and store it at %p.\n"),address,&buf[0]));*/
	place=address<<9;
  80b108:	e0bffc17 	ldw	r2,-16(fp)
  80b10c:	1004927a 	slli	r2,r2,9
  80b110:	e0bff715 	stw	r2,-36(fp)
	sd_Command(iface,CMDREAD, (euint16) (place >> 16), (euint16) place);
  80b114:	e0bff717 	ldw	r2,-36(fp)
  80b118:	1004d43a 	srli	r2,r2,16
  80b11c:	11bfffcc 	andi	r6,r2,65535
  80b120:	e0bff717 	ldw	r2,-36(fp)
  80b124:	11ffffcc 	andi	r7,r2,65535
  80b128:	e13ffb17 	ldw	r4,-20(fp)
  80b12c:	01400444 	movi	r5,17
  80b130:	080aae00 	call	80aae0 <sd_Command>
	
	cardresp=sd_Resp8b(iface); /* Card response */ 
  80b134:	e13ffb17 	ldw	r4,-20(fp)
  80b138:	080ab940 	call	80ab94 <sd_Resp8b>
  80b13c:	e0bffa05 	stb	r2,-24(fp)

	/* Wait for startblock */
	do
		firstblock=sd_Resp8b(iface); 
  80b140:	e13ffb17 	ldw	r4,-20(fp)
  80b144:	080ab940 	call	80ab94 <sd_Resp8b>
  80b148:	e0bff9c5 	stb	r2,-25(fp)
	while(firstblock==0xff && fb_timeout--);
  80b14c:	e0bff9c3 	ldbu	r2,-25(fp)
  80b150:	10803fd8 	cmpnei	r2,r2,255
  80b154:	1000061e 	bne	r2,zero,80b170 <sd_readSector+0x90>
  80b158:	e0bff90b 	ldhu	r2,-28(fp)
  80b15c:	10bfffc4 	addi	r2,r2,-1
  80b160:	e0bff90d 	sth	r2,-28(fp)
  80b164:	e0fff90b 	ldhu	r3,-28(fp)
  80b168:	00bfffd4 	movui	r2,65535
  80b16c:	18bff41e 	bne	r3,r2,80b140 <sd_readSector+0x60>

	if(cardresp!=0x00 || firstblock!=0xfe){
  80b170:	e0bffa03 	ldbu	r2,-24(fp)
  80b174:	1004c03a 	cmpne	r2,r2,zero
  80b178:	1000031e 	bne	r2,zero,80b188 <sd_readSector+0xa8>
  80b17c:	e0bff9c3 	ldbu	r2,-25(fp)
  80b180:	10803fa0 	cmpeqi	r2,r2,254
  80b184:	1000061e 	bne	r2,zero,80b1a0 <sd_readSector+0xc0>
		sd_Resp8bError(iface,firstblock);
  80b188:	e17ff9c3 	ldbu	r5,-25(fp)
  80b18c:	e13ffb17 	ldw	r4,-20(fp)
  80b190:	080ac780 	call	80ac78 <sd_Resp8bError>
		return(-1);
  80b194:	00bfffc4 	movi	r2,-1
  80b198:	e0bfff15 	stw	r2,-4(fp)
  80b19c:	00000b06 	br	80b1cc <sd_readSector+0xec>
		c = if_spiSend(iface,0xff);
		if(i<len)
			buf[i] = c;
	}
#else
   if_spi_readbuf(iface,buf,len); 
  80b1a0:	e1bffe0b 	ldhu	r6,-8(fp)
  80b1a4:	e13ffb17 	ldw	r4,-20(fp)
  80b1a8:	e17ffd17 	ldw	r5,-12(fp)
  80b1ac:	080a1640 	call	80a164 <if_spi_readbuf>
#endif
	/* Checksum (2 byte) - ignore for now */
	if_spiSend(iface,0xff);
  80b1b0:	e13ffb17 	ldw	r4,-20(fp)
  80b1b4:	01403fc4 	movi	r5,255
  80b1b8:	0809f740 	call	809f74 <if_spiSend>
	if_spiSend(iface,0xff);
  80b1bc:	e13ffb17 	ldw	r4,-20(fp)
  80b1c0:	01403fc4 	movi	r5,255
  80b1c4:	0809f740 	call	809f74 <if_spiSend>
	return(0);
  80b1c8:	e03fff15 	stw	zero,-4(fp)
  80b1cc:	e0bfff17 	ldw	r2,-4(fp)
}
  80b1d0:	e037883a 	mov	sp,fp
  80b1d4:	dfc00117 	ldw	ra,4(sp)
  80b1d8:	df000017 	ldw	fp,0(sp)
  80b1dc:	dec00204 	addi	sp,sp,8
  80b1e0:	f800283a 	ret

0080b1e4 <sd_getDriveSize>:
/* ****************************************************************************
 calculates size of card from CSD 
 (extension by Martin Thomas, inspired by code from Holger Klabunde)
 */
esint8 sd_getDriveSize(hwInterface *iface, euint32* drive_size )
{
  80b1e4:	defff404 	addi	sp,sp,-48
  80b1e8:	dfc00b15 	stw	ra,44(sp)
  80b1ec:	df000a15 	stw	fp,40(sp)
  80b1f0:	dc000915 	stw	r16,36(sp)
  80b1f4:	df000904 	addi	fp,sp,36
  80b1f8:	e13ffe15 	stw	r4,-8(fp)
  80b1fc:	e17fff15 	stw	r5,-4(fp)
	euint8 cardresp, i, by;
	euint8 iob[16];
	euint16 c_size, c_size_mult, read_bl_len;
	
	sd_Command(iface, CMDREADCSD, 0, 0);
  80b200:	e13ffe17 	ldw	r4,-8(fp)
  80b204:	01400244 	movi	r5,9
  80b208:	000d883a 	mov	r6,zero
  80b20c:	000f883a 	mov	r7,zero
  80b210:	080aae00 	call	80aae0 <sd_Command>
	
	do {
		cardresp = sd_Resp8b(iface);
  80b214:	e13ffe17 	ldw	r4,-8(fp)
  80b218:	080ab940 	call	80ab94 <sd_Resp8b>
  80b21c:	e0bff905 	stb	r2,-28(fp)
	} while ( cardresp != 0xFE );
  80b220:	e0bff903 	ldbu	r2,-28(fp)
  80b224:	10803f98 	cmpnei	r2,r2,254
  80b228:	103ffa1e 	bne	r2,zero,80b214 <sd_getDriveSize+0x30>

	DBG((TXT("CSD:")));
  80b22c:	010020b4 	movhi	r4,130
  80b230:	211e7404 	addi	r4,r4,31184
  80b234:	08123a40 	call	8123a4 <printf>
	for( i=0; i<16; i++) {
  80b238:	e03ff8c5 	stb	zero,-29(fp)
  80b23c:	00001206 	br	80b288 <sd_getDriveSize+0xa4>
		iob[i] = sd_Resp8b(iface);
  80b240:	e43ff8c3 	ldbu	r16,-29(fp)
  80b244:	e13ffe17 	ldw	r4,-8(fp)
  80b248:	080ab940 	call	80ab94 <sd_Resp8b>
  80b24c:	1007883a 	mov	r3,r2
  80b250:	e0bff944 	addi	r2,fp,-27
  80b254:	1405883a 	add	r2,r2,r16
  80b258:	10c00005 	stb	r3,0(r2)
		DBG((TXT(" %02x"), iob[i]));
  80b25c:	e0fff8c3 	ldbu	r3,-29(fp)
  80b260:	e0bff944 	addi	r2,fp,-27
  80b264:	10c5883a 	add	r2,r2,r3
  80b268:	10800003 	ldbu	r2,0(r2)
  80b26c:	11403fcc 	andi	r5,r2,255
  80b270:	010020b4 	movhi	r4,130
  80b274:	211e7604 	addi	r4,r4,31192
  80b278:	08123a40 	call	8123a4 <printf>
	do {
		cardresp = sd_Resp8b(iface);
	} while ( cardresp != 0xFE );

	DBG((TXT("CSD:")));
	for( i=0; i<16; i++) {
  80b27c:	e0bff8c3 	ldbu	r2,-29(fp)
  80b280:	10800044 	addi	r2,r2,1
  80b284:	e0bff8c5 	stb	r2,-29(fp)
  80b288:	e0bff8c3 	ldbu	r2,-29(fp)
  80b28c:	10800430 	cmpltui	r2,r2,16
  80b290:	103feb1e 	bne	r2,zero,80b240 <sd_getDriveSize+0x5c>
		iob[i] = sd_Resp8b(iface);
		DBG((TXT(" %02x"), iob[i]));
	}
	DBG((TXT("\n")));
  80b294:	01000284 	movi	r4,10
  80b298:	081241c0 	call	81241c <putchar>

	if_spiSend(iface,0xff);
  80b29c:	e13ffe17 	ldw	r4,-8(fp)
  80b2a0:	01403fc4 	movi	r5,255
  80b2a4:	0809f740 	call	809f74 <if_spiSend>
	if_spiSend(iface,0xff);
  80b2a8:	e13ffe17 	ldw	r4,-8(fp)
  80b2ac:	01403fc4 	movi	r5,255
  80b2b0:	0809f740 	call	809f74 <if_spiSend>
	
	c_size = iob[6] & 0x03; // bits 1..0
  80b2b4:	e0bffac3 	ldbu	r2,-21(fp)
  80b2b8:	10803fcc 	andi	r2,r2,255
  80b2bc:	108000cc 	andi	r2,r2,3
  80b2c0:	e0bff80d 	sth	r2,-32(fp)
	c_size <<= 10;
  80b2c4:	e0bff80b 	ldhu	r2,-32(fp)
  80b2c8:	100492ba 	slli	r2,r2,10
  80b2cc:	e0bff80d 	sth	r2,-32(fp)
	c_size += (euint16)iob[7]<<2;
  80b2d0:	e0bffb03 	ldbu	r2,-20(fp)
  80b2d4:	10803fcc 	andi	r2,r2,255
  80b2d8:	1085883a 	add	r2,r2,r2
  80b2dc:	1085883a 	add	r2,r2,r2
  80b2e0:	1007883a 	mov	r3,r2
  80b2e4:	e0bff80b 	ldhu	r2,-32(fp)
  80b2e8:	10c5883a 	add	r2,r2,r3
  80b2ec:	e0bff80d 	sth	r2,-32(fp)
	c_size += iob[8]>>6;
  80b2f0:	e0bffb43 	ldbu	r2,-19(fp)
  80b2f4:	10803fcc 	andi	r2,r2,255
  80b2f8:	1004d1ba 	srli	r2,r2,6
  80b2fc:	10c03fcc 	andi	r3,r2,255
  80b300:	e0bff80b 	ldhu	r2,-32(fp)
  80b304:	10c5883a 	add	r2,r2,r3
  80b308:	e0bff80d 	sth	r2,-32(fp)

	by= iob[5] & 0x0F;
  80b30c:	e0bffa83 	ldbu	r2,-22(fp)
  80b310:	108003cc 	andi	r2,r2,15
  80b314:	e0bff885 	stb	r2,-30(fp)
	read_bl_len = 1;
  80b318:	00800044 	movi	r2,1
  80b31c:	e0bff70d 	sth	r2,-36(fp)
	read_bl_len <<= by;
  80b320:	e0fff70b 	ldhu	r3,-36(fp)
  80b324:	e0bff883 	ldbu	r2,-30(fp)
  80b328:	1884983a 	sll	r2,r3,r2
  80b32c:	e0bff70d 	sth	r2,-36(fp)

	by=iob[9] & 0x03;
  80b330:	e0bffb83 	ldbu	r2,-18(fp)
  80b334:	108000cc 	andi	r2,r2,3
  80b338:	e0bff885 	stb	r2,-30(fp)
	by <<= 1;
  80b33c:	e0bff883 	ldbu	r2,-30(fp)
  80b340:	1085883a 	add	r2,r2,r2
  80b344:	e0bff885 	stb	r2,-30(fp)
	by += iob[10] >> 7;
  80b348:	e0bffbc3 	ldbu	r2,-17(fp)
  80b34c:	10803fcc 	andi	r2,r2,255
  80b350:	1004d1fa 	srli	r2,r2,7
  80b354:	1007883a 	mov	r3,r2
  80b358:	e0bff883 	ldbu	r2,-30(fp)
  80b35c:	10c5883a 	add	r2,r2,r3
  80b360:	e0bff885 	stb	r2,-30(fp)
	
	c_size_mult = 1;
  80b364:	00800044 	movi	r2,1
  80b368:	e0bff78d 	sth	r2,-34(fp)
	c_size_mult <<= (2+by);
  80b36c:	e0fff78b 	ldhu	r3,-34(fp)
  80b370:	e0bff883 	ldbu	r2,-30(fp)
  80b374:	10800084 	addi	r2,r2,2
  80b378:	1884983a 	sll	r2,r3,r2
  80b37c:	e0bff78d 	sth	r2,-34(fp)
	
	*drive_size = (euint32)(c_size+1) * (euint32)c_size_mult * (euint32)read_bl_len;
  80b380:	e0bff80b 	ldhu	r2,-32(fp)
  80b384:	10800044 	addi	r2,r2,1
  80b388:	1007883a 	mov	r3,r2
  80b38c:	e0bff78b 	ldhu	r2,-34(fp)
  80b390:	1887383a 	mul	r3,r3,r2
  80b394:	e0bff70b 	ldhu	r2,-36(fp)
  80b398:	1887383a 	mul	r3,r3,r2
  80b39c:	e0bfff17 	ldw	r2,-4(fp)
  80b3a0:	10c00015 	stw	r3,0(r2)

	return 0;
  80b3a4:	0005883a 	mov	r2,zero
}
  80b3a8:	e037883a 	mov	sp,fp
  80b3ac:	dfc00217 	ldw	ra,8(sp)
  80b3b0:	df000117 	ldw	fp,4(sp)
  80b3b4:	dc000017 	ldw	r16,0(sp)
  80b3b8:	dec00304 	addi	sp,sp,12
  80b3bc:	f800283a 	ret

0080b3c0 <fs_makeDate>:
/*****************************************************************************/
#include "time.h"
/*****************************************************************************/

euint16 fs_makeDate(void)
{
  80b3c0:	deffff04 	addi	sp,sp,-4
  80b3c4:	df000015 	stw	fp,0(sp)
  80b3c8:	d839883a 	mov	fp,sp
#ifndef DATE_TIME_SUPPORT
	return(0);
  80b3cc:	0005883a 	mov	r2,zero
		(y>127?127<<9:(y&0x3F)<<9)   |
		((m==0||m>12)?1:(m&0xF)<<5)  |
		((d==0||d>31)?1:(d&0x1F))
	);
#endif
}
  80b3d0:	e037883a 	mov	sp,fp
  80b3d4:	df000017 	ldw	fp,0(sp)
  80b3d8:	dec00104 	addi	sp,sp,4
  80b3dc:	f800283a 	ret

0080b3e0 <fs_makeTime>:
/*****************************************************************************/

euint16 fs_makeTime(void)
{
  80b3e0:	deffff04 	addi	sp,sp,-4
  80b3e4:	df000015 	stw	fp,0(sp)
  80b3e8:	d839883a 	mov	fp,sp
#ifndef DATE_TIME_SUPPORT
	return(0);
  80b3ec:	0005883a 	mov	r2,zero
		(h>23?0:(h&0x1F)<<11) |
		(m>59?0:(m&0x3F)<<5)  |
		(s>59?0:(s-s%2)/2)
	);
#endif
}
  80b3f0:	e037883a 	mov	sp,fp
  80b3f4:	df000017 	ldw	fp,0(sp)
  80b3f8:	dec00104 	addi	sp,sp,4
  80b3fc:	f800283a 	ret

0080b400 <fs_hasTimeSupport>:
/*****************************************************************************/

euint8 fs_hasTimeSupport(void)
{
  80b400:	deffff04 	addi	sp,sp,-4
  80b404:	df000015 	stw	fp,0(sp)
  80b408:	d839883a 	mov	fp,sp
#ifdef DATE_TIME_SUPPORT
	return(1);
#else
	return(0);
  80b40c:	0005883a 	mov	r2,zero
#endif
}
  80b410:	e037883a 	mov	sp,fp
  80b414:	df000017 	ldw	fp,0(sp)
  80b418:	dec00104 	addi	sp,sp,4
  80b41c:	f800283a 	ret

0080b420 <listFiles>:
 * Return value: number of files/directories in the given directory or -1
 * if directory does not exist.
\*****************************************************************************/

short listFiles(FileSystem *fs, char *dirname)
{
  80b420:	deff5904 	addi	sp,sp,-668
  80b424:	dfc0a615 	stw	ra,664(sp)
  80b428:	df00a515 	stw	fp,660(sp)
  80b42c:	df00a504 	addi	fp,sp,660
  80b430:	e13ffd15 	stw	r4,-12(fp)
  80b434:	e17ffe15 	stw	r5,-8(fp)
	unsigned long startCluster;
	unsigned char fileEntryCount;
	unsigned short counter=0;
  80b438:	e03f5d0d 	sth	zero,-652(fp)
	unsigned long offset=0;
  80b43c:	e03f5c15 	stw	zero,-656(fp)
	unsigned char buf[512];
	File dir;
	unsigned short i;
	
	/* Find out if we are searching in the root dir or in */
	if(dirname[0]=='/' && dirname[1]=='\0')
  80b440:	e0bffe17 	ldw	r2,-8(fp)
  80b444:	10800003 	ldbu	r2,0(r2)
  80b448:	10803fcc 	andi	r2,r2,255
  80b44c:	1080201c 	xori	r2,r2,128
  80b450:	10bfe004 	addi	r2,r2,-128
  80b454:	10800bd8 	cmpnei	r2,r2,47
  80b458:	1000291e 	bne	r2,zero,80b500 <listFiles+0xe0>
  80b45c:	e0bffe17 	ldw	r2,-8(fp)
  80b460:	10800044 	addi	r2,r2,1
  80b464:	10800003 	ldbu	r2,0(r2)
  80b468:	10803fcc 	andi	r2,r2,255
  80b46c:	1080201c 	xori	r2,r2,128
  80b470:	10bfe004 	addi	r2,r2,-128
  80b474:	1004c03a 	cmpne	r2,r2,zero
  80b478:	1000211e 	bne	r2,zero,80b500 <listFiles+0xe0>
	{
		if( (fs->type == FAT12) || (fs->type == FAT16) )
  80b47c:	e0bffd17 	ldw	r2,-12(fp)
  80b480:	10800f03 	ldbu	r2,60(r2)
  80b484:	10803fcc 	andi	r2,r2,255
  80b488:	10800060 	cmpeqi	r2,r2,1
  80b48c:	1000051e 	bne	r2,zero,80b4a4 <listFiles+0x84>
  80b490:	e0bffd17 	ldw	r2,-12(fp)
  80b494:	10800f03 	ldbu	r2,60(r2)
  80b498:	10803fcc 	andi	r2,r2,255
  80b49c:	10800098 	cmpnei	r2,r2,2
  80b4a0:	1000941e 	bne	r2,zero,80b6f4 <listFiles+0x2d4>
		{
			for(i=0;i<=(fs->volumeId.RootEntryCount/16);i++)
  80b4a4:	e03f5b0d 	sth	zero,-660(fp)
  80b4a8:	00000d06 	br	80b4e0 <listFiles+0xc0>
			{
				loc.Sector=fs->FirstSectorRootDir + i;
  80b4ac:	e0bffd17 	ldw	r2,-12(fp)
  80b4b0:	10c00b17 	ldw	r3,44(r2)
  80b4b4:	e0bf5b0b 	ldhu	r2,-660(fp)
  80b4b8:	1885883a 	add	r2,r3,r2
  80b4bc:	e0bf6715 	stw	r2,-612(fp)
				part_readBuf(fs->part,loc.Sector,buf);
  80b4c0:	e0bffd17 	ldw	r2,-12(fp)
  80b4c4:	11000017 	ldw	r4,0(r2)
  80b4c8:	e17f6717 	ldw	r5,-612(fp)
  80b4cc:	e1bf6904 	addi	r6,fp,-604
  80b4d0:	080a4ac0 	call	80a4ac <part_readBuf>
	/* Find out if we are searching in the root dir or in */
	if(dirname[0]=='/' && dirname[1]=='\0')
	{
		if( (fs->type == FAT12) || (fs->type == FAT16) )
		{
			for(i=0;i<=(fs->volumeId.RootEntryCount/16);i++)
  80b4d4:	e0bf5b0b 	ldhu	r2,-660(fp)
  80b4d8:	10800044 	addi	r2,r2,1
  80b4dc:	e0bf5b0d 	sth	r2,-660(fp)
  80b4e0:	e0bffd17 	ldw	r2,-12(fp)
  80b4e4:	1080030b 	ldhu	r2,12(r2)
  80b4e8:	10bfffcc 	andi	r2,r2,65535
  80b4ec:	1004d13a 	srli	r2,r2,4
  80b4f0:	10ffffcc 	andi	r3,r2,65535
  80b4f4:	e0bf5b0b 	ldhu	r2,-660(fp)
  80b4f8:	18bfec2e 	bgeu	r3,r2,80b4ac <listFiles+0x8c>
	unsigned char buf[512];
	File dir;
	unsigned short i;
	
	/* Find out if we are searching in the root dir or in */
	if(dirname[0]=='/' && dirname[1]=='\0')
  80b4fc:	00007d06 	br	80b6f4 <listFiles+0x2d4>
		}
	}
	else /* Normal directory */
	{
		/* Check if path given is a directory */
		if(fs_findFile(fs,dirname,&loc,0)!=2)
  80b500:	e1bf6704 	addi	r6,fp,-612
  80b504:	e13ffd17 	ldw	r4,-12(fp)
  80b508:	e17ffe17 	ldw	r5,-8(fp)
  80b50c:	000f883a 	mov	r7,zero
  80b510:	0806df40 	call	806df4 <fs_findFile>
  80b514:	10803fcc 	andi	r2,r2,255
  80b518:	1080201c 	xori	r2,r2,128
  80b51c:	10bfe004 	addi	r2,r2,-128
  80b520:	108000a0 	cmpeqi	r2,r2,2
  80b524:	1000031e 	bne	r2,zero,80b534 <listFiles+0x114>
		{
			FUNC_OUT((TXT("")));
			return(-1);
  80b528:	00bfffc4 	movi	r2,-1
  80b52c:	e0bfff15 	stw	r2,-4(fp)
  80b530:	00007506 	br	80b708 <listFiles+0x2e8>
		}
	
		/* Find out what the startcluster of the directory is */
		part_readBuf(fs->part,loc.Sector, buf);
  80b534:	e0bffd17 	ldw	r2,-12(fp)
  80b538:	11000017 	ldw	r4,0(r2)
  80b53c:	e17f6717 	ldw	r5,-612(fp)
  80b540:	e1bf6904 	addi	r6,fp,-604
  80b544:	080a4ac0 	call	80a4ac <part_readBuf>
		fileEntry = *(((FileRecord*)buf) + loc.Offset);
  80b548:	e0ff6904 	addi	r3,fp,-604
  80b54c:	e0bf6803 	ldbu	r2,-608(fp)
  80b550:	10803fcc 	andi	r2,r2,255
  80b554:	1004917a 	slli	r2,r2,5
  80b558:	1887883a 	add	r3,r3,r2
  80b55c:	18800017 	ldw	r2,0(r3)
  80b560:	e0bf5f15 	stw	r2,-644(fp)
  80b564:	18800117 	ldw	r2,4(r3)
  80b568:	e0bf6015 	stw	r2,-640(fp)
  80b56c:	18800217 	ldw	r2,8(r3)
  80b570:	e0bf6115 	stw	r2,-636(fp)
  80b574:	18800317 	ldw	r2,12(r3)
  80b578:	e0bf6215 	stw	r2,-632(fp)
  80b57c:	18800417 	ldw	r2,16(r3)
  80b580:	e0bf6315 	stw	r2,-628(fp)
  80b584:	18800517 	ldw	r2,20(r3)
  80b588:	e0bf6415 	stw	r2,-624(fp)
  80b58c:	18800617 	ldw	r2,24(r3)
  80b590:	e0bf6515 	stw	r2,-620(fp)
  80b594:	18800717 	ldw	r2,28(r3)
  80b598:	e0bf6615 	stw	r2,-616(fp)
		startCluster = (((unsigned long)fileEntry.FirstClusterHigh)<<16) 
  80b59c:	e0bf640b 	ldhu	r2,-624(fp)
  80b5a0:	10bfffcc 	andi	r2,r2,65535
  80b5a4:	1006943a 	slli	r3,r2,16
  80b5a8:	e0bf658b 	ldhu	r2,-618(fp)
  80b5ac:	10bfffcc 	andi	r2,r2,65535
  80b5b0:	1885883a 	add	r2,r3,r2
  80b5b4:	e0bf5e15 	stw	r2,-648(fp)
			+ fileEntry.FirstClusterLow;

	    /* Init of dir */
		dir.fs=fs;
  80b5b8:	e0bffd17 	ldw	r2,-12(fp)
  80b5bc:	e0bff315 	stw	r2,-52(fp)
		dir.Cache.LogicCluster=-1;
  80b5c0:	00bfffc4 	movi	r2,-1
  80b5c4:	e0bff515 	stw	r2,-44(fp)
		dir.Cache.FirstCluster=startCluster;
  80b5c8:	e0bf5e17 	ldw	r2,-648(fp)
  80b5cc:	e0bff715 	stw	r2,-36(fp)
		dir.DirEntry.Attribute=ATTR_DIRECTORY;
  80b5d0:	00800404 	movi	r2,16
  80b5d4:	e0bfebc5 	stb	r2,-81(fp)
	
		while((file_fread(&dir,offset,512,buf)))
  80b5d8:	00003f06 	br	80b6d8 <listFiles+0x2b8>
		{
			DBG((TXT("Read 512 bytes from dir with offset %li.\n"),offset));
  80b5dc:	010020b4 	movhi	r4,130
  80b5e0:	211e7804 	addi	r4,r4,31200
  80b5e4:	e17f5c17 	ldw	r5,-656(fp)
  80b5e8:	08123a40 	call	8123a4 <printf>
			for(fileEntryCount=0;fileEntryCount<16;fileEntryCount++)
  80b5ec:	e03f5d85 	stb	zero,-650(fp)
  80b5f0:	00003306 	br	80b6c0 <listFiles+0x2a0>
			{
				fileEntry = *(((FileRecord*)buf) + fileEntryCount);
  80b5f4:	e0ff6904 	addi	r3,fp,-604
  80b5f8:	e0bf5d83 	ldbu	r2,-650(fp)
  80b5fc:	1004917a 	slli	r2,r2,5
  80b600:	1887883a 	add	r3,r3,r2
  80b604:	18800017 	ldw	r2,0(r3)
  80b608:	e0bf5f15 	stw	r2,-644(fp)
  80b60c:	18800117 	ldw	r2,4(r3)
  80b610:	e0bf6015 	stw	r2,-640(fp)
  80b614:	18800217 	ldw	r2,8(r3)
  80b618:	e0bf6115 	stw	r2,-636(fp)
  80b61c:	18800317 	ldw	r2,12(r3)
  80b620:	e0bf6215 	stw	r2,-632(fp)
  80b624:	18800417 	ldw	r2,16(r3)
  80b628:	e0bf6315 	stw	r2,-628(fp)
  80b62c:	18800517 	ldw	r2,20(r3)
  80b630:	e0bf6415 	stw	r2,-624(fp)
  80b634:	18800617 	ldw	r2,24(r3)
  80b638:	e0bf6515 	stw	r2,-620(fp)
  80b63c:	18800717 	ldw	r2,28(r3)
  80b640:	e0bf6615 	stw	r2,-616(fp)
				if( !( (fileEntry.Attribute & 0x0F) == 0x0F ) )
  80b644:	e0bf61c3 	ldbu	r2,-633(fp)
  80b648:	10803fcc 	andi	r2,r2,255
  80b64c:	108003cc 	andi	r2,r2,15
  80b650:	108003e0 	cmpeqi	r2,r2,15
  80b654:	1000171e 	bne	r2,zero,80b6b4 <listFiles+0x294>
				{
					if
					(
  80b658:	e0bf5f03 	ldbu	r2,-644(fp)
  80b65c:	10803fcc 	andi	r2,r2,255
  80b660:	10801070 	cmpltui	r2,r2,65
  80b664:	1000041e 	bne	r2,zero,80b678 <listFiles+0x258>
  80b668:	e0bf5f03 	ldbu	r2,-644(fp)
  80b66c:	10803fcc 	andi	r2,r2,255
  80b670:	108016f0 	cmpltui	r2,r2,91
  80b674:	1000081e 	bne	r2,zero,80b698 <listFiles+0x278>
  80b678:	e0bf5f03 	ldbu	r2,-644(fp)
  80b67c:	10803fcc 	andi	r2,r2,255
  80b680:	10800c30 	cmpltui	r2,r2,48
  80b684:	10000b1e 	bne	r2,zero,80b6b4 <listFiles+0x294>
  80b688:	e0bf5f03 	ldbu	r2,-644(fp)
  80b68c:	10803fcc 	andi	r2,r2,255
  80b690:	10800ea8 	cmpgeui	r2,r2,58
  80b694:	1000071e 	bne	r2,zero,80b6b4 <listFiles+0x294>
					 (fileEntry.FileName[0]>='A' && fileEntry.FileName[0]<='Z')
					 ||
					 (fileEntry.FileName[0]>='0' && fileEntry.FileName[0]<='9')
					)
					{
						DBG((TXT("Filename: %s\n"),fileEntry.FileName));
  80b698:	e17f5f04 	addi	r5,fp,-644
  80b69c:	010020b4 	movhi	r4,130
  80b6a0:	211e8304 	addi	r4,r4,31244
  80b6a4:	08123a40 	call	8123a4 <printf>
						counter++;
  80b6a8:	e0bf5d0b 	ldhu	r2,-652(fp)
  80b6ac:	10800044 	addi	r2,r2,1
  80b6b0:	e0bf5d0d 	sth	r2,-652(fp)
		dir.DirEntry.Attribute=ATTR_DIRECTORY;
	
		while((file_fread(&dir,offset,512,buf)))
		{
			DBG((TXT("Read 512 bytes from dir with offset %li.\n"),offset));
			for(fileEntryCount=0;fileEntryCount<16;fileEntryCount++)
  80b6b4:	e0bf5d83 	ldbu	r2,-650(fp)
  80b6b8:	10800044 	addi	r2,r2,1
  80b6bc:	e0bf5d85 	stb	r2,-650(fp)
  80b6c0:	e0bf5d83 	ldbu	r2,-650(fp)
  80b6c4:	10800430 	cmpltui	r2,r2,16
  80b6c8:	103fca1e 	bne	r2,zero,80b5f4 <listFiles+0x1d4>
						DBG((TXT("Filename: %s\n"),fileEntry.FileName));
						counter++;
					}
				}
			}
			offset+=512;
  80b6cc:	e0bf5c17 	ldw	r2,-656(fp)
  80b6d0:	10808004 	addi	r2,r2,512
  80b6d4:	e0bf5c15 	stw	r2,-656(fp)
		dir.fs=fs;
		dir.Cache.LogicCluster=-1;
		dir.Cache.FirstCluster=startCluster;
		dir.DirEntry.Attribute=ATTR_DIRECTORY;
	
		while((file_fread(&dir,offset,512,buf)))
  80b6d8:	e13fe904 	addi	r4,fp,-92
  80b6dc:	e1ff6904 	addi	r7,fp,-604
  80b6e0:	e17f5c17 	ldw	r5,-656(fp)
  80b6e4:	01808004 	movi	r6,512
  80b6e8:	08051f40 	call	8051f4 <file_fread>
  80b6ec:	1004c03a 	cmpne	r2,r2,zero
  80b6f0:	103fba1e 	bne	r2,zero,80b5dc <listFiles+0x1bc>
			offset+=512;
		}
	}
	
	FUNC_OUT((TXT("")));
	return(counter);
  80b6f4:	e0bf5d0b 	ldhu	r2,-652(fp)
  80b6f8:	10bfffcc 	andi	r2,r2,65535
  80b6fc:	10a0001c 	xori	r2,r2,32768
  80b700:	10a00004 	addi	r2,r2,-32768
  80b704:	e0bfff15 	stw	r2,-4(fp)
  80b708:	e0bfff17 	ldw	r2,-4(fp)
	
	return(-1);
}
  80b70c:	e037883a 	mov	sp,fp
  80b710:	dfc00117 	ldw	ra,4(sp)
  80b714:	df000017 	ldw	fp,0(sp)
  80b718:	dec00204 	addi	sp,sp,8
  80b71c:	f800283a 	ret

0080b720 <rmfile>:
 * Description: This function takes a filename as argument and deletes it,
 * by freeing it's clusterchain, and deleting it's entry from the directory.
 * Return value: 0 on success, -1 on errors, like file not found.
*/
esint16 rmfile(FileSystem *fs,euint8* filename)
{
  80b720:	defff104 	addi	sp,sp,-60
  80b724:	dfc00e15 	stw	ra,56(sp)
  80b728:	df000d15 	stw	fp,52(sp)
  80b72c:	df000d04 	addi	fp,sp,52
  80b730:	e13ffd15 	stw	r4,-12(fp)
  80b734:	e17ffe15 	stw	r5,-8(fp)
	FileLocation loc;
	ClusterChain cache;
	euint8* buf;
	euint32 firstCluster=0;
  80b738:	e03ff315 	stw	zero,-52(fp)
	
	if((fs_findFile(fs,(eint8*)filename,&loc,0))==1){
  80b73c:	e17ffe17 	ldw	r5,-8(fp)
  80b740:	e1bff504 	addi	r6,fp,-44
  80b744:	e13ffd17 	ldw	r4,-12(fp)
  80b748:	000f883a 	mov	r7,zero
  80b74c:	0806df40 	call	806df4 <fs_findFile>
  80b750:	10803fcc 	andi	r2,r2,255
  80b754:	1080201c 	xori	r2,r2,128
  80b758:	10bfe004 	addi	r2,r2,-128
  80b75c:	10800058 	cmpnei	r2,r2,1
  80b760:	1000371e 	bne	r2,zero,80b840 <rmfile+0x120>
		buf=part_getSect(fs->part,loc.Sector,IOM_MODE_READWRITE);
  80b764:	e0bffd17 	ldw	r2,-12(fp)
  80b768:	11000017 	ldw	r4,0(r2)
  80b76c:	e17ff517 	ldw	r5,-44(fp)
  80b770:	01800084 	movi	r6,2
  80b774:	080a5e40 	call	80a5e4 <part_getSect>
  80b778:	e0bff415 	stw	r2,-48(fp)
		firstCluster = ex_getb16(buf,loc.Offset*32+20);
  80b77c:	e0bff603 	ldbu	r2,-40(fp)
  80b780:	10803fcc 	andi	r2,r2,255
  80b784:	1004917a 	slli	r2,r2,5
  80b788:	10800504 	addi	r2,r2,20
  80b78c:	100b883a 	mov	r5,r2
  80b790:	e13ff417 	ldw	r4,-48(fp)
  80b794:	080399c0 	call	80399c <ex_getb16>
  80b798:	10bfffcc 	andi	r2,r2,65535
  80b79c:	e0bff315 	stw	r2,-52(fp)
		firstCluster <<= 16;
  80b7a0:	e0bff317 	ldw	r2,-52(fp)
  80b7a4:	1004943a 	slli	r2,r2,16
  80b7a8:	e0bff315 	stw	r2,-52(fp)
		firstCluster += ex_getb16(buf,loc.Offset*32+26);
  80b7ac:	e0bff603 	ldbu	r2,-40(fp)
  80b7b0:	10803fcc 	andi	r2,r2,255
  80b7b4:	1004917a 	slli	r2,r2,5
  80b7b8:	10800684 	addi	r2,r2,26
  80b7bc:	100b883a 	mov	r5,r2
  80b7c0:	e13ff417 	ldw	r4,-48(fp)
  80b7c4:	080399c0 	call	80399c <ex_getb16>
  80b7c8:	10ffffcc 	andi	r3,r2,65535
  80b7cc:	e0bff317 	ldw	r2,-52(fp)
  80b7d0:	10c5883a 	add	r2,r2,r3
  80b7d4:	e0bff315 	stw	r2,-52(fp)
		/* Bugfix:
		 * By clearing the entire structure, you mark end of directory.
		 * If this is not the case, files that are further away cannot
		* be opened anymore by implementations that follow the spec. */
		/*memClr(buf+(loc.Offset*32),32);*/
		*(buf+(loc.Offset*32)+0) = 0xE5; /* Mark file deleted */
  80b7d8:	e0bff603 	ldbu	r2,-40(fp)
  80b7dc:	10803fcc 	andi	r2,r2,255
  80b7e0:	1004917a 	slli	r2,r2,5
  80b7e4:	1007883a 	mov	r3,r2
  80b7e8:	e0bff417 	ldw	r2,-48(fp)
  80b7ec:	1887883a 	add	r3,r3,r2
  80b7f0:	00bff944 	movi	r2,-27
  80b7f4:	18800005 	stb	r2,0(r3)
		part_relSect(fs->part,buf);
  80b7f8:	e0bffd17 	ldw	r2,-12(fp)
  80b7fc:	11000017 	ldw	r4,0(r2)
  80b800:	e17ff417 	ldw	r5,-48(fp)
  80b804:	080a6440 	call	80a644 <part_relSect>
		cache.DiscCluster = cache.LastCluster = cache.Linear = cache.LogicCluster = 0;
  80b808:	e03ff815 	stw	zero,-32(fp)
  80b80c:	e03ff705 	stb	zero,-36(fp)
  80b810:	e0bff703 	ldbu	r2,-36(fp)
  80b814:	10803fcc 	andi	r2,r2,255
  80b818:	e0bffb15 	stw	r2,-20(fp)
  80b81c:	e0bffb17 	ldw	r2,-20(fp)
  80b820:	e0bff915 	stw	r2,-28(fp)
		cache.FirstCluster = firstCluster;
  80b824:	e0bff317 	ldw	r2,-52(fp)
  80b828:	e0bffa15 	stw	r2,-24(fp)
 		fat_unlinkClusterChain(fs,&cache);
  80b82c:	e17ff704 	addi	r5,fp,-36
  80b830:	e13ffd17 	ldw	r4,-12(fp)
  80b834:	0804f480 	call	804f48 <fat_unlinkClusterChain>
		return(0);
  80b838:	e03fff15 	stw	zero,-4(fp)
  80b83c:	00000206 	br	80b848 <rmfile+0x128>
	}
	return(-1);
  80b840:	00bfffc4 	movi	r2,-1
  80b844:	e0bfff15 	stw	r2,-4(fp)
  80b848:	e0bfff17 	ldw	r2,-4(fp)
}
  80b84c:	e037883a 	mov	sp,fp
  80b850:	dfc00117 	ldw	ra,4(sp)
  80b854:	df000017 	ldw	fp,0(sp)
  80b858:	dec00204 	addi	sp,sp,8
  80b85c:	f800283a 	ret

0080b860 <makedir>:

/*****************************************************************************/
esint8 makedir(FileSystem *fs,eint8* dirname)
{
  80b860:	deffea04 	addi	sp,sp,-88
  80b864:	dfc01515 	stw	ra,84(sp)
  80b868:	df001415 	stw	fp,80(sp)
  80b86c:	dc001315 	stw	r16,76(sp)
  80b870:	df001304 	addi	fp,sp,76
  80b874:	e13ffd15 	stw	r4,-12(fp)
  80b878:	e17ffe15 	stw	r5,-8(fp)
	FileRecord direntry;
	euint32 nc,parentdir;
	euint8* buf;
	eint8 ffname[11];
	
	if( fs_findFile(fs,dirname,&loc,&parentdir) ){
  80b87c:	e1bfef04 	addi	r6,fp,-68
  80b880:	e1fff904 	addi	r7,fp,-28
  80b884:	e13ffd17 	ldw	r4,-12(fp)
  80b888:	e17ffe17 	ldw	r5,-8(fp)
  80b88c:	0806df40 	call	806df4 <fs_findFile>
  80b890:	10803fcc 	andi	r2,r2,255
  80b894:	1080201c 	xori	r2,r2,128
  80b898:	10bfe004 	addi	r2,r2,-128
  80b89c:	1005003a 	cmpeq	r2,r2,zero
  80b8a0:	1000031e 	bne	r2,zero,80b8b0 <makedir+0x50>
		return(-1);
  80b8a4:	00bfffc4 	movi	r2,-1
  80b8a8:	e0bfff15 	stw	r2,-4(fp)
  80b8ac:	00009706 	br	80bb0c <makedir+0x2ac>
	}
	if(parentdir==0)return(-2);
  80b8b0:	e0bff917 	ldw	r2,-28(fp)
  80b8b4:	1004c03a 	cmpne	r2,r2,zero
  80b8b8:	1000031e 	bne	r2,zero,80b8c8 <makedir+0x68>
  80b8bc:	00bfff84 	movi	r2,-2
  80b8c0:	e0bfff15 	stw	r2,-4(fp)
  80b8c4:	00009106 	br	80bb0c <makedir+0x2ac>
	
	if(!fs_findFreeFile(fs,dirname,&loc,0))return(-3);
  80b8c8:	e1bfef04 	addi	r6,fp,-68
  80b8cc:	e13ffd17 	ldw	r4,-12(fp)
  80b8d0:	e17ffe17 	ldw	r5,-8(fp)
  80b8d4:	000f883a 	mov	r7,zero
  80b8d8:	08070340 	call	807034 <fs_findFreeFile>
  80b8dc:	10bfffcc 	andi	r2,r2,65535
  80b8e0:	10a0001c 	xori	r2,r2,32768
  80b8e4:	10a00004 	addi	r2,r2,-32768
  80b8e8:	1004c03a 	cmpne	r2,r2,zero
  80b8ec:	1000031e 	bne	r2,zero,80b8fc <makedir+0x9c>
  80b8f0:	00bfff44 	movi	r2,-3
  80b8f4:	e0bfff15 	stw	r2,-4(fp)
  80b8f8:	00008406 	br	80bb0c <makedir+0x2ac>
	 * is why getNextFreeCluster has to be called AFTER calling
	 * fs_findFreeFile, which may have to expand a directory in
	 * order to store the new filerecord !! 
	 */
	
	nc = fs_getNextFreeCluster(fs,fs_giveFreeClusterHint(fs));
  80b8fc:	e13ffd17 	ldw	r4,-12(fp)
  80b900:	0806dd00 	call	806dd0 <fs_giveFreeClusterHint>
  80b904:	100b883a 	mov	r5,r2
  80b908:	e13ffd17 	ldw	r4,-12(fp)
  80b90c:	0806d500 	call	806d50 <fs_getNextFreeCluster>
  80b910:	e0bfee15 	stw	r2,-72(fp)
	if(nc==0)return(0);
  80b914:	e0bfee17 	ldw	r2,-72(fp)
  80b918:	1004c03a 	cmpne	r2,r2,zero
  80b91c:	1000021e 	bne	r2,zero,80b928 <makedir+0xc8>
  80b920:	e03fff15 	stw	zero,-4(fp)
  80b924:	00007906 	br	80bb0c <makedir+0x2ac>
	
	fs_clearCluster(fs,nc);
  80b928:	e13ffd17 	ldw	r4,-12(fp)
  80b92c:	e17fee17 	ldw	r5,-72(fp)
  80b930:	08073b00 	call	8073b0 <fs_clearCluster>
	
	buf = part_getSect(fs->part,loc.Sector,IOM_MODE_READWRITE);
  80b934:	e0bffd17 	ldw	r2,-12(fp)
  80b938:	11000017 	ldw	r4,0(r2)
  80b93c:	e17fef17 	ldw	r5,-68(fp)
  80b940:	01800084 	movi	r6,2
  80b944:	080a5e40 	call	80a5e4 <part_getSect>
  80b948:	e0bfed15 	stw	r2,-76(fp)

	dir_getFatFileName(dirname,ffname);
  80b94c:	e17ffa04 	addi	r5,fp,-24
  80b950:	e13ffe17 	ldw	r4,-8(fp)
  80b954:	080362c0 	call	80362c <dir_getFatFileName>
	memClr(&direntry,sizeof(direntry));
  80b958:	e13ff104 	addi	r4,fp,-60
  80b95c:	01400804 	movi	r5,32
  80b960:	080a8f00 	call	80a8f0 <memClr>
	memCpy(ffname,&direntry,11);
  80b964:	e13ffa04 	addi	r4,fp,-24
  80b968:	e17ff104 	addi	r5,fp,-60
  80b96c:	018002c4 	movi	r6,11
  80b970:	080a8840 	call	80a884 <memCpy>
	direntry.FileSize = 0;
  80b974:	e03ff815 	stw	zero,-32(fp)
	direntry.FirstClusterHigh=nc>>16;
  80b978:	e0bfee17 	ldw	r2,-72(fp)
  80b97c:	1004d43a 	srli	r2,r2,16
  80b980:	e0bff60d 	sth	r2,-40(fp)
	direntry.FirstClusterLow=nc&0xFFFF;
  80b984:	e0bfee17 	ldw	r2,-72(fp)
  80b988:	e0bff78d 	sth	r2,-34(fp)
	direntry.Attribute = ATTR_DIRECTORY;
  80b98c:	00800404 	movi	r2,16
  80b990:	e0bff3c5 	stb	r2,-49(fp)
	memCpy(&direntry,buf+(32*loc.Offset),32);
  80b994:	e0bff003 	ldbu	r2,-64(fp)
  80b998:	10803fcc 	andi	r2,r2,255
  80b99c:	1004917a 	slli	r2,r2,5
  80b9a0:	1007883a 	mov	r3,r2
  80b9a4:	e0bfed17 	ldw	r2,-76(fp)
  80b9a8:	188b883a 	add	r5,r3,r2
  80b9ac:	e13ff104 	addi	r4,fp,-60
  80b9b0:	01800804 	movi	r6,32
  80b9b4:	080a8840 	call	80a884 <memCpy>
		
	part_relSect(fs->part,buf);
  80b9b8:	e0bffd17 	ldw	r2,-12(fp)
  80b9bc:	11000017 	ldw	r4,0(r2)
  80b9c0:	e17fed17 	ldw	r5,-76(fp)
  80b9c4:	080a6440 	call	80a644 <part_relSect>
	
	buf = part_getSect(fs->part,fs_clusterToSector(fs,nc),IOM_MODE_READWRITE);
  80b9c8:	e0bffd17 	ldw	r2,-12(fp)
  80b9cc:	14000017 	ldw	r16,0(r2)
  80b9d0:	e13ffd17 	ldw	r4,-12(fp)
  80b9d4:	e17fee17 	ldw	r5,-72(fp)
  80b9d8:	0806b880 	call	806b88 <fs_clusterToSector>
  80b9dc:	100b883a 	mov	r5,r2
  80b9e0:	8009883a 	mov	r4,r16
  80b9e4:	01800084 	movi	r6,2
  80b9e8:	080a5e40 	call	80a5e4 <part_getSect>
  80b9ec:	e0bfed15 	stw	r2,-76(fp)
	
	memClr(&direntry,sizeof(direntry));
  80b9f0:	e13ff104 	addi	r4,fp,-60
  80b9f4:	01400804 	movi	r5,32
  80b9f8:	080a8f00 	call	80a8f0 <memClr>
	memCpy(".          ",&direntry,11);
  80b9fc:	e17ff104 	addi	r5,fp,-60
  80ba00:	010020b4 	movhi	r4,130
  80ba04:	211e8704 	addi	r4,r4,31260
  80ba08:	018002c4 	movi	r6,11
  80ba0c:	080a8840 	call	80a884 <memCpy>
	direntry.Attribute = ATTR_DIRECTORY;
  80ba10:	00800404 	movi	r2,16
  80ba14:	e0bff3c5 	stb	r2,-49(fp)
	direntry.FileSize = 0;
  80ba18:	e03ff815 	stw	zero,-32(fp)
	direntry.FirstClusterHigh=nc>>16;
  80ba1c:	e0bfee17 	ldw	r2,-72(fp)
  80ba20:	1004d43a 	srli	r2,r2,16
  80ba24:	e0bff60d 	sth	r2,-40(fp)
	direntry.FirstClusterLow=nc&0xFFFF;
  80ba28:	e0bfee17 	ldw	r2,-72(fp)
  80ba2c:	e0bff78d 	sth	r2,-34(fp)
	memCpy(&direntry,buf,32);
  80ba30:	e13ff104 	addi	r4,fp,-60
  80ba34:	e17fed17 	ldw	r5,-76(fp)
  80ba38:	01800804 	movi	r6,32
  80ba3c:	080a8840 	call	80a884 <memCpy>
	
	if(fs->type == FAT32 && parentdir == fs->volumeId.RootCluster){
  80ba40:	e0bffd17 	ldw	r2,-12(fp)
  80ba44:	10800f03 	ldbu	r2,60(r2)
  80ba48:	10803fcc 	andi	r2,r2,255
  80ba4c:	108000d8 	cmpnei	r2,r2,3
  80ba50:	1000051e 	bne	r2,zero,80ba68 <makedir+0x208>
  80ba54:	e0bffd17 	ldw	r2,-12(fp)
  80ba58:	10c00717 	ldw	r3,28(r2)
  80ba5c:	e0bff917 	ldw	r2,-28(fp)
  80ba60:	1880011e 	bne	r3,r2,80ba68 <makedir+0x208>
		parentdir = 0;
  80ba64:	e03ff915 	stw	zero,-28(fp)
	}
	if(fs->type != FAT32 && parentdir<=1){
  80ba68:	e0bffd17 	ldw	r2,-12(fp)
  80ba6c:	10800f03 	ldbu	r2,60(r2)
  80ba70:	10803fcc 	andi	r2,r2,255
  80ba74:	108000e0 	cmpeqi	r2,r2,3
  80ba78:	1000041e 	bne	r2,zero,80ba8c <makedir+0x22c>
  80ba7c:	e0bff917 	ldw	r2,-28(fp)
  80ba80:	108000a8 	cmpgeui	r2,r2,2
  80ba84:	1000011e 	bne	r2,zero,80ba8c <makedir+0x22c>
		parentdir = 0;
  80ba88:	e03ff915 	stw	zero,-28(fp)
	} 
	
	memClr(&direntry,sizeof(direntry));
  80ba8c:	e13ff104 	addi	r4,fp,-60
  80ba90:	01400804 	movi	r5,32
  80ba94:	080a8f00 	call	80a8f0 <memClr>
	memCpy("..         ",&direntry,11);
  80ba98:	e17ff104 	addi	r5,fp,-60
  80ba9c:	010020b4 	movhi	r4,130
  80baa0:	211e8a04 	addi	r4,r4,31272
  80baa4:	018002c4 	movi	r6,11
  80baa8:	080a8840 	call	80a884 <memCpy>
	direntry.Attribute = ATTR_DIRECTORY;
  80baac:	00800404 	movi	r2,16
  80bab0:	e0bff3c5 	stb	r2,-49(fp)
	direntry.FileSize = 0;
  80bab4:	e03ff815 	stw	zero,-32(fp)
	direntry.FirstClusterHigh=parentdir>>16;
  80bab8:	e0bff917 	ldw	r2,-28(fp)
  80babc:	1004d43a 	srli	r2,r2,16
  80bac0:	e0bff60d 	sth	r2,-40(fp)
	direntry.FirstClusterLow=parentdir&0xFFFF;
  80bac4:	e0bff917 	ldw	r2,-28(fp)
  80bac8:	e0bff78d 	sth	r2,-34(fp)
	memCpy(&direntry,buf+32,32);
  80bacc:	e0bfed17 	ldw	r2,-76(fp)
  80bad0:	11400804 	addi	r5,r2,32
  80bad4:	e13ff104 	addi	r4,fp,-60
  80bad8:	01800804 	movi	r6,32
  80badc:	080a8840 	call	80a884 <memCpy>

	part_relSect(fs->part,buf);
  80bae0:	e0bffd17 	ldw	r2,-12(fp)
  80bae4:	11000017 	ldw	r4,0(r2)
  80bae8:	e17fed17 	ldw	r5,-76(fp)
  80baec:	080a6440 	call	80a644 <part_relSect>
	
	fat_setNextClusterAddress(fs,nc,fat_giveEocMarker(fs));
  80baf0:	e13ffd17 	ldw	r4,-12(fp)
  80baf4:	08044680 	call	804468 <fat_giveEocMarker>
  80baf8:	100d883a 	mov	r6,r2
  80bafc:	e13ffd17 	ldw	r4,-12(fp)
  80bb00:	e17fee17 	ldw	r5,-72(fp)
  80bb04:	08040400 	call	804040 <fat_setNextClusterAddress>

	return(0);
  80bb08:	e03fff15 	stw	zero,-4(fp)
  80bb0c:	e0bfff17 	ldw	r2,-4(fp)
}
  80bb10:	e037883a 	mov	sp,fp
  80bb14:	dfc00217 	ldw	ra,8(sp)
  80bb18:	df000117 	ldw	fp,4(sp)
  80bb1c:	dc000017 	ldw	r16,0(sp)
  80bb20:	dec00304 	addi	sp,sp,12
  80bb24:	f800283a 	ret

0080bb28 <I2C_Start>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

/* Write an i2c start condition */
void I2C_Start(alt_u32 clk_base, alt_u32 data_base)
{
  80bb28:	defffc04 	addi	sp,sp,-16
  80bb2c:	dfc00315 	stw	ra,12(sp)
  80bb30:	df000215 	stw	fp,8(sp)
  80bb34:	df000204 	addi	fp,sp,8
  80bb38:	e13ffe15 	stw	r4,-8(fp)
  80bb3c:	e17fff15 	stw	r5,-4(fp)
	i2c_start(clk_base, data_base);
  80bb40:	e13ffe17 	ldw	r4,-8(fp)
  80bb44:	e17fff17 	ldw	r5,-4(fp)
  80bb48:	080c1f80 	call	80c1f8 <i2c_start>
}
  80bb4c:	e037883a 	mov	sp,fp
  80bb50:	dfc00117 	ldw	ra,4(sp)
  80bb54:	df000017 	ldw	fp,0(sp)
  80bb58:	dec00204 	addi	sp,sp,8
  80bb5c:	f800283a 	ret

0080bb60 <I2C_Stop>:

/* Write an i2c stop condition */
void I2C_Stop(alt_u32 clk_base, alt_u32 data_base)
{
  80bb60:	defffc04 	addi	sp,sp,-16
  80bb64:	dfc00315 	stw	ra,12(sp)
  80bb68:	df000215 	stw	fp,8(sp)
  80bb6c:	df000204 	addi	fp,sp,8
  80bb70:	e13ffe15 	stw	r4,-8(fp)
  80bb74:	e17fff15 	stw	r5,-4(fp)
	i2c_stop(clk_base, data_base);
  80bb78:	e13ffe17 	ldw	r4,-8(fp)
  80bb7c:	e17fff17 	ldw	r5,-4(fp)
  80bb80:	080c2800 	call	80c280 <i2c_stop>
}
  80bb84:	e037883a 	mov	sp,fp
  80bb88:	dfc00117 	ldw	ra,4(sp)
  80bb8c:	df000017 	ldw	fp,0(sp)
  80bb90:	dec00204 	addi	sp,sp,8
  80bb94:	f800283a 	ret

0080bb98 <I2C_WriteToDevice>:

/* Write len bytes of data to specified device */
bool I2C_WriteToDevice(alt_u32 clk_base, alt_u32 data_base, alt_8 deviceAddr, alt_u8 *pData, alt_u16 len)
{
  80bb98:	defff604 	addi	sp,sp,-40
  80bb9c:	dfc00915 	stw	ra,36(sp)
  80bba0:	df000815 	stw	fp,32(sp)
  80bba4:	df000804 	addi	fp,sp,32
  80bba8:	e13ffa15 	stw	r4,-24(fp)
  80bbac:	e17ffb15 	stw	r5,-20(fp)
  80bbb0:	e1fffd15 	stw	r7,-12(fp)
  80bbb4:	e0800217 	ldw	r2,8(fp)
  80bbb8:	e1bffc05 	stb	r6,-16(fp)
  80bbbc:	e0bffe0d 	sth	r2,-8(fp)
	int i;
	bool bSuccess = true;
  80bbc0:	00800044 	movi	r2,1
  80bbc4:	e0bff805 	stb	r2,-32(fp)

	if (!i2c_selectAddress(clk_base, data_base, deviceAddr))
  80bbc8:	e1bffc07 	ldb	r6,-16(fp)
  80bbcc:	e13ffa17 	ldw	r4,-24(fp)
  80bbd0:	e17ffb17 	ldw	r5,-20(fp)
  80bbd4:	080c1800 	call	80c180 <i2c_selectAddress>
  80bbd8:	1080005c 	xori	r2,r2,1
  80bbdc:	10803fcc 	andi	r2,r2,255
  80bbe0:	1005003a 	cmpeq	r2,r2,zero
  80bbe4:	1000021e 	bne	r2,zero,80bbf0 <I2C_WriteToDevice+0x58>
		return false;
  80bbe8:	e03fff15 	stw	zero,-4(fp)
  80bbec:	00002206 	br	80bc78 <I2C_WriteToDevice+0xe0>

	for (i = 0; i < len && bSuccess; i++)
  80bbf0:	e03ff915 	stw	zero,-28(fp)
  80bbf4:	00000d06 	br	80bc2c <I2C_WriteToDevice+0x94>
	{
		bSuccess = i2c_write(clk_base, data_base, *pData);
  80bbf8:	e0bffd17 	ldw	r2,-12(fp)
  80bbfc:	10800003 	ldbu	r2,0(r2)
  80bc00:	11803fcc 	andi	r6,r2,255
  80bc04:	e13ffa17 	ldw	r4,-24(fp)
  80bc08:	e17ffb17 	ldw	r5,-20(fp)
  80bc0c:	080c2f80 	call	80c2f8 <i2c_write>
  80bc10:	e0bff805 	stb	r2,-32(fp)
		pData++;
  80bc14:	e0bffd17 	ldw	r2,-12(fp)
  80bc18:	10800044 	addi	r2,r2,1
  80bc1c:	e0bffd15 	stw	r2,-12(fp)
	bool bSuccess = true;

	if (!i2c_selectAddress(clk_base, data_base, deviceAddr))
		return false;

	for (i = 0; i < len && bSuccess; i++)
  80bc20:	e0bff917 	ldw	r2,-28(fp)
  80bc24:	10800044 	addi	r2,r2,1
  80bc28:	e0bff915 	stw	r2,-28(fp)
  80bc2c:	e0fffe0b 	ldhu	r3,-8(fp)
  80bc30:	e0bff917 	ldw	r2,-28(fp)
  80bc34:	10c0030e 	bge	r2,r3,80bc44 <I2C_WriteToDevice+0xac>
  80bc38:	e0bff803 	ldbu	r2,-32(fp)
  80bc3c:	1004c03a 	cmpne	r2,r2,zero
  80bc40:	103fed1e 	bne	r2,zero,80bbf8 <I2C_WriteToDevice+0x60>
	{
		bSuccess = i2c_write(clk_base, data_base, *pData);
		pData++;
	}

	if (!bSuccess)
  80bc44:	e0bff803 	ldbu	r2,-32(fp)
  80bc48:	1080005c 	xori	r2,r2,1
  80bc4c:	10803fcc 	andi	r2,r2,255
  80bc50:	1005003a 	cmpeq	r2,r2,zero
  80bc54:	1000061e 	bne	r2,zero,80bc70 <I2C_WriteToDevice+0xd8>
	{
		printf("I2C Error: Data write to device 0x%02x failed\n", deviceAddr);
  80bc58:	e17ffc07 	ldb	r5,-16(fp)
  80bc5c:	010020b4 	movhi	r4,130
  80bc60:	211e8d04 	addi	r4,r4,31284
  80bc64:	08123a40 	call	8123a4 <printf>
		return false;
  80bc68:	e03fff15 	stw	zero,-4(fp)
  80bc6c:	00000206 	br	80bc78 <I2C_WriteToDevice+0xe0>
	}
    
    return true;
  80bc70:	00800044 	movi	r2,1
  80bc74:	e0bfff15 	stw	r2,-4(fp)
  80bc78:	e0bfff17 	ldw	r2,-4(fp)
}
  80bc7c:	e037883a 	mov	sp,fp
  80bc80:	dfc00117 	ldw	ra,4(sp)
  80bc84:	df000017 	ldw	fp,0(sp)
  80bc88:	dec00204 	addi	sp,sp,8
  80bc8c:	f800283a 	ret

0080bc90 <I2C_WriteToDeviceRegister>:

/* Write len bytes of data to specified control register of specified device */
bool I2C_WriteToDeviceRegister(alt_u32 clk_base, alt_u32 data_base, alt_8 deviceAddr,
							   alt_u8 controlAddr, alt_u8 *pData, alt_u16 len)
{
  80bc90:	defff604 	addi	sp,sp,-40
  80bc94:	dfc00915 	stw	ra,36(sp)
  80bc98:	df000815 	stw	fp,32(sp)
  80bc9c:	df000804 	addi	fp,sp,32
  80bca0:	e13ffa15 	stw	r4,-24(fp)
  80bca4:	e17ffb15 	stw	r5,-20(fp)
  80bca8:	e0800317 	ldw	r2,12(fp)
  80bcac:	e1bffc05 	stb	r6,-16(fp)
  80bcb0:	e1fffd05 	stb	r7,-12(fp)
  80bcb4:	e0bffe0d 	sth	r2,-8(fp)
	int i;
	bool bSuccess = true;
  80bcb8:	00800044 	movi	r2,1
  80bcbc:	e0bff805 	stb	r2,-32(fp)

	if (!i2c_selectAddress(clk_base, data_base, deviceAddr))
  80bcc0:	e1bffc07 	ldb	r6,-16(fp)
  80bcc4:	e13ffa17 	ldw	r4,-24(fp)
  80bcc8:	e17ffb17 	ldw	r5,-20(fp)
  80bccc:	080c1800 	call	80c180 <i2c_selectAddress>
  80bcd0:	1080005c 	xori	r2,r2,1
  80bcd4:	10803fcc 	andi	r2,r2,255
  80bcd8:	1005003a 	cmpeq	r2,r2,zero
  80bcdc:	1000021e 	bne	r2,zero,80bce8 <I2C_WriteToDeviceRegister+0x58>
		return false;
  80bce0:	e03fff15 	stw	zero,-4(fp)
  80bce4:	00003006 	br	80bda8 <I2C_WriteToDeviceRegister+0x118>

	if (!i2c_selectAddress(clk_base, data_base, controlAddr))
  80bce8:	e0bffd03 	ldbu	r2,-12(fp)
  80bcec:	11803fcc 	andi	r6,r2,255
  80bcf0:	3180201c 	xori	r6,r6,128
  80bcf4:	31bfe004 	addi	r6,r6,-128
  80bcf8:	e13ffa17 	ldw	r4,-24(fp)
  80bcfc:	e17ffb17 	ldw	r5,-20(fp)
  80bd00:	080c1800 	call	80c180 <i2c_selectAddress>
  80bd04:	1080005c 	xori	r2,r2,1
  80bd08:	10803fcc 	andi	r2,r2,255
  80bd0c:	1005003a 	cmpeq	r2,r2,zero
  80bd10:	1000021e 	bne	r2,zero,80bd1c <I2C_WriteToDeviceRegister+0x8c>
		return false;
  80bd14:	e03fff15 	stw	zero,-4(fp)
  80bd18:	00002306 	br	80bda8 <I2C_WriteToDeviceRegister+0x118>

	for (i = 0; i < len && bSuccess; i++)
  80bd1c:	e03ff915 	stw	zero,-28(fp)
  80bd20:	00000d06 	br	80bd58 <I2C_WriteToDeviceRegister+0xc8>
	{
		bSuccess = i2c_write(clk_base, data_base, *pData);
  80bd24:	e0800217 	ldw	r2,8(fp)
  80bd28:	10800003 	ldbu	r2,0(r2)
  80bd2c:	11803fcc 	andi	r6,r2,255
  80bd30:	e13ffa17 	ldw	r4,-24(fp)
  80bd34:	e17ffb17 	ldw	r5,-20(fp)
  80bd38:	080c2f80 	call	80c2f8 <i2c_write>
  80bd3c:	e0bff805 	stb	r2,-32(fp)
		pData++;
  80bd40:	e0800217 	ldw	r2,8(fp)
  80bd44:	10800044 	addi	r2,r2,1
  80bd48:	e0800215 	stw	r2,8(fp)
		return false;

	if (!i2c_selectAddress(clk_base, data_base, controlAddr))
		return false;

	for (i = 0; i < len && bSuccess; i++)
  80bd4c:	e0bff917 	ldw	r2,-28(fp)
  80bd50:	10800044 	addi	r2,r2,1
  80bd54:	e0bff915 	stw	r2,-28(fp)
  80bd58:	e0fffe0b 	ldhu	r3,-8(fp)
  80bd5c:	e0bff917 	ldw	r2,-28(fp)
  80bd60:	10c0030e 	bge	r2,r3,80bd70 <I2C_WriteToDeviceRegister+0xe0>
  80bd64:	e0bff803 	ldbu	r2,-32(fp)
  80bd68:	1004c03a 	cmpne	r2,r2,zero
  80bd6c:	103fed1e 	bne	r2,zero,80bd24 <I2C_WriteToDeviceRegister+0x94>
	{
		bSuccess = i2c_write(clk_base, data_base, *pData);
		pData++;
	}

	if (!bSuccess)
  80bd70:	e0bff803 	ldbu	r2,-32(fp)
  80bd74:	1080005c 	xori	r2,r2,1
  80bd78:	10803fcc 	andi	r2,r2,255
  80bd7c:	1005003a 	cmpeq	r2,r2,zero
  80bd80:	1000071e 	bne	r2,zero,80bda0 <I2C_WriteToDeviceRegister+0x110>
	{
		printf("I2C Error: Data write to register 0x%02x on device 0x%02x failed\n", deviceAddr, controlAddr);
  80bd84:	e17ffc07 	ldb	r5,-16(fp)
  80bd88:	e1bffd03 	ldbu	r6,-12(fp)
  80bd8c:	010020b4 	movhi	r4,130
  80bd90:	211e9904 	addi	r4,r4,31332
  80bd94:	08123a40 	call	8123a4 <printf>
		return false;
  80bd98:	e03fff15 	stw	zero,-4(fp)
  80bd9c:	00000206 	br	80bda8 <I2C_WriteToDeviceRegister+0x118>
	}

    return true;
  80bda0:	00800044 	movi	r2,1
  80bda4:	e0bfff15 	stw	r2,-4(fp)
  80bda8:	e0bfff17 	ldw	r2,-4(fp)
}
  80bdac:	e037883a 	mov	sp,fp
  80bdb0:	dfc00117 	ldw	ra,4(sp)
  80bdb4:	df000017 	ldw	fp,0(sp)
  80bdb8:	dec00204 	addi	sp,sp,8
  80bdbc:	f800283a 	ret

0080bdc0 <I2C_WriteMore>:

/* Write len bytes of data to last address */
bool I2C_WriteMore(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, alt_u16 len)
{
  80bdc0:	defff704 	addi	sp,sp,-36
  80bdc4:	dfc00815 	stw	ra,32(sp)
  80bdc8:	df000715 	stw	fp,28(sp)
  80bdcc:	df000704 	addi	fp,sp,28
  80bdd0:	e13ffb15 	stw	r4,-20(fp)
  80bdd4:	e17ffc15 	stw	r5,-16(fp)
  80bdd8:	e1bffd15 	stw	r6,-12(fp)
  80bddc:	e1fffe0d 	sth	r7,-8(fp)
	int i;
	bool bSuccess = true;
  80bde0:	00800044 	movi	r2,1
  80bde4:	e0bff905 	stb	r2,-28(fp)

	for (i = 0; i < len && bSuccess; i++)
  80bde8:	e03ffa15 	stw	zero,-24(fp)
  80bdec:	00000d06 	br	80be24 <I2C_WriteMore+0x64>
	{
		bSuccess = i2c_write(clk_base, data_base, *pData);
  80bdf0:	e0bffd17 	ldw	r2,-12(fp)
  80bdf4:	10800003 	ldbu	r2,0(r2)
  80bdf8:	11803fcc 	andi	r6,r2,255
  80bdfc:	e13ffb17 	ldw	r4,-20(fp)
  80be00:	e17ffc17 	ldw	r5,-16(fp)
  80be04:	080c2f80 	call	80c2f8 <i2c_write>
  80be08:	e0bff905 	stb	r2,-28(fp)
		pData++;
  80be0c:	e0bffd17 	ldw	r2,-12(fp)
  80be10:	10800044 	addi	r2,r2,1
  80be14:	e0bffd15 	stw	r2,-12(fp)
bool I2C_WriteMore(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, alt_u16 len)
{
	int i;
	bool bSuccess = true;

	for (i = 0; i < len && bSuccess; i++)
  80be18:	e0bffa17 	ldw	r2,-24(fp)
  80be1c:	10800044 	addi	r2,r2,1
  80be20:	e0bffa15 	stw	r2,-24(fp)
  80be24:	e0fffe0b 	ldhu	r3,-8(fp)
  80be28:	e0bffa17 	ldw	r2,-24(fp)
  80be2c:	10c0030e 	bge	r2,r3,80be3c <I2C_WriteMore+0x7c>
  80be30:	e0bff903 	ldbu	r2,-28(fp)
  80be34:	1004c03a 	cmpne	r2,r2,zero
  80be38:	103fed1e 	bne	r2,zero,80bdf0 <I2C_WriteMore+0x30>
	{
		bSuccess = i2c_write(clk_base, data_base, *pData);
		pData++;
	}

	if (!bSuccess)
  80be3c:	e0bff903 	ldbu	r2,-28(fp)
  80be40:	1080005c 	xori	r2,r2,1
  80be44:	10803fcc 	andi	r2,r2,255
  80be48:	1005003a 	cmpeq	r2,r2,zero
  80be4c:	1000051e 	bne	r2,zero,80be64 <I2C_WriteMore+0xa4>
	{
		printf("I2C Error: Additional data write failed\n");
  80be50:	010020b4 	movhi	r4,130
  80be54:	211eaa04 	addi	r4,r4,31400
  80be58:	08124e00 	call	8124e0 <puts>
		return false;
  80be5c:	e03fff15 	stw	zero,-4(fp)
  80be60:	00000206 	br	80be6c <I2C_WriteMore+0xac>
	}

    return true;
  80be64:	00800044 	movi	r2,1
  80be68:	e0bfff15 	stw	r2,-4(fp)
  80be6c:	e0bfff17 	ldw	r2,-4(fp)
}
  80be70:	e037883a 	mov	sp,fp
  80be74:	dfc00117 	ldw	ra,4(sp)
  80be78:	df000017 	ldw	fp,0(sp)
  80be7c:	dec00204 	addi	sp,sp,8
  80be80:	f800283a 	ret

0080be84 <I2C_ReadFromDevice>:

/* Read len bytes of data from specified device */
bool I2C_ReadFromDevice(alt_u32 clk_base, alt_u32 data_base, alt_8 deviceAddr, alt_u8 *pBuf, alt_u16 len, bool endRead)
{
  80be84:	defff604 	addi	sp,sp,-40
  80be88:	dfc00915 	stw	ra,36(sp)
  80be8c:	df000815 	stw	fp,32(sp)
  80be90:	df000804 	addi	fp,sp,32
  80be94:	e13ff915 	stw	r4,-28(fp)
  80be98:	e17ffa15 	stw	r5,-24(fp)
  80be9c:	e1fffc15 	stw	r7,-16(fp)
  80bea0:	e0800217 	ldw	r2,8(fp)
  80bea4:	e0c00317 	ldw	r3,12(fp)
  80bea8:	e1bffb05 	stb	r6,-20(fp)
  80beac:	e0bffd0d 	sth	r2,-12(fp)
  80beb0:	e0fffe05 	stb	r3,-8(fp)
    int i;
    deviceAddr |= 1; // Read address
  80beb4:	e0bffb03 	ldbu	r2,-20(fp)
  80beb8:	10800054 	ori	r2,r2,1
  80bebc:	e0bffb05 	stb	r2,-20(fp)

	if (!i2c_selectAddress(clk_base, data_base, deviceAddr))
  80bec0:	e1bffb07 	ldb	r6,-20(fp)
  80bec4:	e13ff917 	ldw	r4,-28(fp)
  80bec8:	e17ffa17 	ldw	r5,-24(fp)
  80becc:	080c1800 	call	80c180 <i2c_selectAddress>
  80bed0:	1080005c 	xori	r2,r2,1
  80bed4:	10803fcc 	andi	r2,r2,255
  80bed8:	1005003a 	cmpeq	r2,r2,zero
  80bedc:	1000021e 	bne	r2,zero,80bee8 <I2C_ReadFromDevice+0x64>
		return false;
  80bee0:	e03fff15 	stw	zero,-4(fp)
  80bee4:	00001e06 	br	80bf60 <I2C_ReadFromDevice+0xdc>
    
	for (i = 0; i < len; i++)
  80bee8:	e03ff815 	stw	zero,-32(fp)
  80beec:	00001706 	br	80bf4c <I2C_ReadFromDevice+0xc8>
	{
		if (i == (len - 1))
  80bef0:	e0bffd0b 	ldhu	r2,-12(fp)
  80bef4:	10ffffc4 	addi	r3,r2,-1
  80bef8:	e0bff817 	ldw	r2,-32(fp)
  80befc:	1880081e 	bne	r3,r2,80bf20 <I2C_ReadFromDevice+0x9c>
		{
			i2c_read(clk_base, data_base, pBuf, !endRead);  // last byte
  80bf00:	e0bffe03 	ldbu	r2,-8(fp)
  80bf04:	1080005c 	xori	r2,r2,1
  80bf08:	11c03fcc 	andi	r7,r2,255
  80bf0c:	e13ff917 	ldw	r4,-28(fp)
  80bf10:	e17ffa17 	ldw	r5,-24(fp)
  80bf14:	e1bffc17 	ldw	r6,-16(fp)
  80bf18:	080c43c0 	call	80c43c <i2c_read>
  80bf1c:	00000806 	br	80bf40 <I2C_ReadFromDevice+0xbc>
		}
		else
		{
			i2c_read(clk_base, data_base, pBuf, true);  // read
  80bf20:	e13ff917 	ldw	r4,-28(fp)
  80bf24:	e17ffa17 	ldw	r5,-24(fp)
  80bf28:	e1bffc17 	ldw	r6,-16(fp)
  80bf2c:	01c00044 	movi	r7,1
  80bf30:	080c43c0 	call	80c43c <i2c_read>
			pBuf++;
  80bf34:	e0bffc17 	ldw	r2,-16(fp)
  80bf38:	10800044 	addi	r2,r2,1
  80bf3c:	e0bffc15 	stw	r2,-16(fp)
    deviceAddr |= 1; // Read address

	if (!i2c_selectAddress(clk_base, data_base, deviceAddr))
		return false;
    
	for (i = 0; i < len; i++)
  80bf40:	e0bff817 	ldw	r2,-32(fp)
  80bf44:	10800044 	addi	r2,r2,1
  80bf48:	e0bff815 	stw	r2,-32(fp)
  80bf4c:	e0fffd0b 	ldhu	r3,-12(fp)
  80bf50:	e0bff817 	ldw	r2,-32(fp)
  80bf54:	10ffe616 	blt	r2,r3,80bef0 <I2C_ReadFromDevice+0x6c>
			i2c_read(clk_base, data_base, pBuf, true);  // read
			pBuf++;
		}
	}

	return true;
  80bf58:	00800044 	movi	r2,1
  80bf5c:	e0bfff15 	stw	r2,-4(fp)
  80bf60:	e0bfff17 	ldw	r2,-4(fp)
}
  80bf64:	e037883a 	mov	sp,fp
  80bf68:	dfc00117 	ldw	ra,4(sp)
  80bf6c:	df000017 	ldw	fp,0(sp)
  80bf70:	dec00204 	addi	sp,sp,8
  80bf74:	f800283a 	ret

0080bf78 <I2C_ReadFromDeviceRegister>:

/* Read len bytes of data from specified control register of specified device */
bool I2C_ReadFromDeviceRegister(alt_u32 clk_base, alt_u32 data_base, alt_8 deviceAddr,
								alt_u8 controlAddr, alt_u8 *pBuf, alt_u16 len, bool endRead)
{
  80bf78:	defff604 	addi	sp,sp,-40
  80bf7c:	dfc00915 	stw	ra,36(sp)
  80bf80:	df000815 	stw	fp,32(sp)
  80bf84:	df000804 	addi	fp,sp,32
  80bf88:	e13ff915 	stw	r4,-28(fp)
  80bf8c:	e17ffa15 	stw	r5,-24(fp)
  80bf90:	e0800317 	ldw	r2,12(fp)
  80bf94:	e0c00417 	ldw	r3,16(fp)
  80bf98:	e1bffb05 	stb	r6,-20(fp)
  80bf9c:	e1fffc05 	stb	r7,-16(fp)
  80bfa0:	e0bffd0d 	sth	r2,-12(fp)
  80bfa4:	e0fffe05 	stb	r3,-8(fp)
    int i;

	if (!i2c_selectAddress(clk_base, data_base, deviceAddr))
  80bfa8:	e1bffb07 	ldb	r6,-20(fp)
  80bfac:	e13ff917 	ldw	r4,-28(fp)
  80bfb0:	e17ffa17 	ldw	r5,-24(fp)
  80bfb4:	080c1800 	call	80c180 <i2c_selectAddress>
  80bfb8:	1080005c 	xori	r2,r2,1
  80bfbc:	10803fcc 	andi	r2,r2,255
  80bfc0:	1005003a 	cmpeq	r2,r2,zero
  80bfc4:	1000021e 	bne	r2,zero,80bfd0 <I2C_ReadFromDeviceRegister+0x58>
		return false;
  80bfc8:	e03fff15 	stw	zero,-4(fp)
  80bfcc:	00003b06 	br	80c0bc <I2C_ReadFromDeviceRegister+0x144>

	if (!i2c_selectAddress(clk_base, data_base, controlAddr))
  80bfd0:	e0bffc03 	ldbu	r2,-16(fp)
  80bfd4:	11803fcc 	andi	r6,r2,255
  80bfd8:	3180201c 	xori	r6,r6,128
  80bfdc:	31bfe004 	addi	r6,r6,-128
  80bfe0:	e13ff917 	ldw	r4,-28(fp)
  80bfe4:	e17ffa17 	ldw	r5,-24(fp)
  80bfe8:	080c1800 	call	80c180 <i2c_selectAddress>
  80bfec:	1080005c 	xori	r2,r2,1
  80bff0:	10803fcc 	andi	r2,r2,255
  80bff4:	1005003a 	cmpeq	r2,r2,zero
  80bff8:	1000021e 	bne	r2,zero,80c004 <I2C_ReadFromDeviceRegister+0x8c>
		return false;
  80bffc:	e03fff15 	stw	zero,-4(fp)
  80c000:	00002e06 	br	80c0bc <I2C_ReadFromDeviceRegister+0x144>

    i2c_start(clk_base, data_base);  // restart
  80c004:	e13ff917 	ldw	r4,-28(fp)
  80c008:	e17ffa17 	ldw	r5,-24(fp)
  80c00c:	080c1f80 	call	80c1f8 <i2c_start>
    deviceAddr |= 1; // Read address
  80c010:	e0bffb03 	ldbu	r2,-20(fp)
  80c014:	10800054 	ori	r2,r2,1
  80c018:	e0bffb05 	stb	r2,-20(fp)

	if (!i2c_selectAddress(clk_base, data_base, deviceAddr))
  80c01c:	e1bffb07 	ldb	r6,-20(fp)
  80c020:	e13ff917 	ldw	r4,-28(fp)
  80c024:	e17ffa17 	ldw	r5,-24(fp)
  80c028:	080c1800 	call	80c180 <i2c_selectAddress>
  80c02c:	1080005c 	xori	r2,r2,1
  80c030:	10803fcc 	andi	r2,r2,255
  80c034:	1005003a 	cmpeq	r2,r2,zero
  80c038:	1000021e 	bne	r2,zero,80c044 <I2C_ReadFromDeviceRegister+0xcc>
		return false;
  80c03c:	e03fff15 	stw	zero,-4(fp)
  80c040:	00001e06 	br	80c0bc <I2C_ReadFromDeviceRegister+0x144>

	for (i = 0; i < len; i++)
  80c044:	e03ff815 	stw	zero,-32(fp)
  80c048:	00001706 	br	80c0a8 <I2C_ReadFromDeviceRegister+0x130>
	{
		if (i == (len - 1))
  80c04c:	e0bffd0b 	ldhu	r2,-12(fp)
  80c050:	10ffffc4 	addi	r3,r2,-1
  80c054:	e0bff817 	ldw	r2,-32(fp)
  80c058:	1880081e 	bne	r3,r2,80c07c <I2C_ReadFromDeviceRegister+0x104>
		{
			i2c_read(clk_base, data_base, pBuf, !endRead);  // last byte
  80c05c:	e0bffe03 	ldbu	r2,-8(fp)
  80c060:	1080005c 	xori	r2,r2,1
  80c064:	11c03fcc 	andi	r7,r2,255
  80c068:	e13ff917 	ldw	r4,-28(fp)
  80c06c:	e17ffa17 	ldw	r5,-24(fp)
  80c070:	e1800217 	ldw	r6,8(fp)
  80c074:	080c43c0 	call	80c43c <i2c_read>
  80c078:	00000806 	br	80c09c <I2C_ReadFromDeviceRegister+0x124>
		}
		else
		{
			i2c_read(clk_base, data_base, pBuf, true);  // read
  80c07c:	e13ff917 	ldw	r4,-28(fp)
  80c080:	e17ffa17 	ldw	r5,-24(fp)
  80c084:	e1800217 	ldw	r6,8(fp)
  80c088:	01c00044 	movi	r7,1
  80c08c:	080c43c0 	call	80c43c <i2c_read>
			pBuf++;
  80c090:	e0800217 	ldw	r2,8(fp)
  80c094:	10800044 	addi	r2,r2,1
  80c098:	e0800215 	stw	r2,8(fp)
    deviceAddr |= 1; // Read address

	if (!i2c_selectAddress(clk_base, data_base, deviceAddr))
		return false;

	for (i = 0; i < len; i++)
  80c09c:	e0bff817 	ldw	r2,-32(fp)
  80c0a0:	10800044 	addi	r2,r2,1
  80c0a4:	e0bff815 	stw	r2,-32(fp)
  80c0a8:	e0fffd0b 	ldhu	r3,-12(fp)
  80c0ac:	e0bff817 	ldw	r2,-32(fp)
  80c0b0:	10ffe616 	blt	r2,r3,80c04c <I2C_ReadFromDeviceRegister+0xd4>
			i2c_read(clk_base, data_base, pBuf, true);  // read
			pBuf++;
		}
	}

	return true;
  80c0b4:	00800044 	movi	r2,1
  80c0b8:	e0bfff15 	stw	r2,-4(fp)
  80c0bc:	e0bfff17 	ldw	r2,-4(fp)
}
  80c0c0:	e037883a 	mov	sp,fp
  80c0c4:	dfc00117 	ldw	ra,4(sp)
  80c0c8:	df000017 	ldw	fp,0(sp)
  80c0cc:	dec00204 	addi	sp,sp,8
  80c0d0:	f800283a 	ret

0080c0d4 <I2C_ReadMore>:

/* Read len bytes of data from last address */
void I2C_ReadMore(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pBuf, alt_u16 len, bool endRead)
{
  80c0d4:	defff804 	addi	sp,sp,-32
  80c0d8:	dfc00715 	stw	ra,28(sp)
  80c0dc:	df000615 	stw	fp,24(sp)
  80c0e0:	df000604 	addi	fp,sp,24
  80c0e4:	e13ffb15 	stw	r4,-20(fp)
  80c0e8:	e17ffc15 	stw	r5,-16(fp)
  80c0ec:	e1bffd15 	stw	r6,-12(fp)
  80c0f0:	e0800217 	ldw	r2,8(fp)
  80c0f4:	e1fffe0d 	sth	r7,-8(fp)
  80c0f8:	e0bfff05 	stb	r2,-4(fp)
    int i;

	for (i = 0; i < len; i++)
  80c0fc:	e03ffa15 	stw	zero,-24(fp)
  80c100:	00001706 	br	80c160 <I2C_ReadMore+0x8c>
	{
		if (i == (len - 1))
  80c104:	e0bffe0b 	ldhu	r2,-8(fp)
  80c108:	10ffffc4 	addi	r3,r2,-1
  80c10c:	e0bffa17 	ldw	r2,-24(fp)
  80c110:	1880081e 	bne	r3,r2,80c134 <I2C_ReadMore+0x60>
		{
			i2c_read(clk_base, data_base, pBuf, !endRead);  // last byte
  80c114:	e0bfff03 	ldbu	r2,-4(fp)
  80c118:	1080005c 	xori	r2,r2,1
  80c11c:	11c03fcc 	andi	r7,r2,255
  80c120:	e13ffb17 	ldw	r4,-20(fp)
  80c124:	e17ffc17 	ldw	r5,-16(fp)
  80c128:	e1bffd17 	ldw	r6,-12(fp)
  80c12c:	080c43c0 	call	80c43c <i2c_read>
  80c130:	00000806 	br	80c154 <I2C_ReadMore+0x80>
		}
		else
		{
			i2c_read(clk_base, data_base, pBuf, true);  // read
  80c134:	e13ffb17 	ldw	r4,-20(fp)
  80c138:	e17ffc17 	ldw	r5,-16(fp)
  80c13c:	e1bffd17 	ldw	r6,-12(fp)
  80c140:	01c00044 	movi	r7,1
  80c144:	080c43c0 	call	80c43c <i2c_read>
			pBuf++;
  80c148:	e0bffd17 	ldw	r2,-12(fp)
  80c14c:	10800044 	addi	r2,r2,1
  80c150:	e0bffd15 	stw	r2,-12(fp)
/* Read len bytes of data from last address */
void I2C_ReadMore(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pBuf, alt_u16 len, bool endRead)
{
    int i;

	for (i = 0; i < len; i++)
  80c154:	e0bffa17 	ldw	r2,-24(fp)
  80c158:	10800044 	addi	r2,r2,1
  80c15c:	e0bffa15 	stw	r2,-24(fp)
  80c160:	e0fffe0b 	ldhu	r3,-8(fp)
  80c164:	e0bffa17 	ldw	r2,-24(fp)
  80c168:	10ffe616 	blt	r2,r3,80c104 <I2C_ReadMore+0x30>
		{
			i2c_read(clk_base, data_base, pBuf, true);  // read
			pBuf++;
		}
	}
}
  80c16c:	e037883a 	mov	sp,fp
  80c170:	dfc00117 	ldw	ra,4(sp)
  80c174:	df000017 	ldw	fp,0(sp)
  80c178:	dec00204 	addi	sp,sp,8
  80c17c:	f800283a 	ret

0080c180 <i2c_selectAddress>:
///////////// Internal functions (i2c_XXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////

// write the given address on the i2c bus
bool i2c_selectAddress(alt_u32 clk_base, alt_u32 data_base, alt_8 address)
{
  80c180:	defffa04 	addi	sp,sp,-24
  80c184:	dfc00515 	stw	ra,20(sp)
  80c188:	df000415 	stw	fp,16(sp)
  80c18c:	df000404 	addi	fp,sp,16
  80c190:	e13ffc15 	stw	r4,-16(fp)
  80c194:	e17ffd15 	stw	r5,-12(fp)
  80c198:	e1bffe05 	stb	r6,-8(fp)
    if (!i2c_write(clk_base, data_base, address))
  80c19c:	e0bffe03 	ldbu	r2,-8(fp)
  80c1a0:	11803fcc 	andi	r6,r2,255
  80c1a4:	e13ffc17 	ldw	r4,-16(fp)
  80c1a8:	e17ffd17 	ldw	r5,-12(fp)
  80c1ac:	080c2f80 	call	80c2f8 <i2c_write>
  80c1b0:	1080005c 	xori	r2,r2,1
  80c1b4:	10803fcc 	andi	r2,r2,255
  80c1b8:	1005003a 	cmpeq	r2,r2,zero
  80c1bc:	1000061e 	bne	r2,zero,80c1d8 <i2c_selectAddress+0x58>
    {
		printf("I2C Error: Address write to device 0x%02x failed\n", address);
  80c1c0:	e17ffe07 	ldb	r5,-8(fp)
  80c1c4:	010020b4 	movhi	r4,130
  80c1c8:	211eb404 	addi	r4,r4,31440
  80c1cc:	08123a40 	call	8123a4 <printf>
    	return false;
  80c1d0:	e03fff15 	stw	zero,-4(fp)
  80c1d4:	00000206 	br	80c1e0 <i2c_selectAddress+0x60>
    }

    return true;
  80c1d8:	00800044 	movi	r2,1
  80c1dc:	e0bfff15 	stw	r2,-4(fp)
  80c1e0:	e0bfff17 	ldw	r2,-4(fp)
}
  80c1e4:	e037883a 	mov	sp,fp
  80c1e8:	dfc00117 	ldw	ra,4(sp)
  80c1ec:	df000017 	ldw	fp,0(sp)
  80c1f0:	dec00204 	addi	sp,sp,8
  80c1f4:	f800283a 	ret

0080c1f8 <i2c_start>:

//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base)
{
  80c1f8:	defffc04 	addi	sp,sp,-16
  80c1fc:	dfc00315 	stw	ra,12(sp)
  80c200:	df000215 	stw	fp,8(sp)
  80c204:	df000204 	addi	fp,sp,8
  80c208:	e13ffe15 	stw	r4,-8(fp)
  80c20c:	e17fff15 	stw	r5,-4(fp)
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
  80c210:	e0bfff17 	ldw	r2,-4(fp)
  80c214:	10800104 	addi	r2,r2,4
  80c218:	1007883a 	mov	r3,r2
  80c21c:	00800044 	movi	r2,1
  80c220:	18800035 	stwio	r2,0(r3)
    
    // start condition
    SDA_HIGH(data_base); // data high
  80c224:	e0bfff17 	ldw	r2,-4(fp)
  80c228:	1007883a 	mov	r3,r2
  80c22c:	00800044 	movi	r2,1
  80c230:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base);
  80c234:	e0bffe17 	ldw	r2,-8(fp)
  80c238:	1007883a 	mov	r3,r2
  80c23c:	00800044 	movi	r2,1
  80c240:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;
  80c244:	01000044 	movi	r4,1
  80c248:	081b29c0 	call	81b29c <usleep>
    SDA_LOW(data_base); // data low
  80c24c:	e0bfff17 	ldw	r2,-4(fp)
  80c250:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; 
  80c254:	01000044 	movi	r4,1
  80c258:	081b29c0 	call	81b29c <usleep>
    SCL_LOW(clk_base); // clock low
  80c25c:	e0bffe17 	ldw	r2,-8(fp)
  80c260:	10000035 	stwio	zero,0(r2)
    SCL_DELAY;
  80c264:	01000044 	movi	r4,1
  80c268:	081b29c0 	call	81b29c <usleep>
}
  80c26c:	e037883a 	mov	sp,fp
  80c270:	dfc00117 	ldw	ra,4(sp)
  80c274:	df000017 	ldw	fp,0(sp)
  80c278:	dec00204 	addi	sp,sp,8
  80c27c:	f800283a 	ret

0080c280 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base)
{
  80c280:	defffc04 	addi	sp,sp,-16
  80c284:	dfc00315 	stw	ra,12(sp)
  80c288:	df000215 	stw	fp,8(sp)
  80c28c:	df000204 	addi	fp,sp,8
  80c290:	e13ffe15 	stw	r4,-8(fp)
  80c294:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
  80c298:	e0bfff17 	ldw	r2,-4(fp)
  80c29c:	10800104 	addi	r2,r2,4
  80c2a0:	1007883a 	mov	r3,r2
  80c2a4:	00800044 	movi	r2,1
  80c2a8:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
  80c2ac:	e0bfff17 	ldw	r2,-4(fp)
  80c2b0:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
  80c2b4:	e0bffe17 	ldw	r2,-8(fp)
  80c2b8:	1007883a 	mov	r3,r2
  80c2bc:	00800044 	movi	r2,1
  80c2c0:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high long delay
  80c2c4:	01000044 	movi	r4,1
  80c2c8:	081b29c0 	call	81b29c <usleep>
    SDA_HIGH(data_base); // data high
  80c2cc:	e0bfff17 	ldw	r2,-4(fp)
  80c2d0:	1007883a 	mov	r3,r2
  80c2d4:	00800044 	movi	r2,1
  80c2d8:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // data high delay
  80c2dc:	01000044 	movi	r4,1
  80c2e0:	081b29c0 	call	81b29c <usleep>
}
  80c2e4:	e037883a 	mov	sp,fp
  80c2e8:	dfc00117 	ldw	ra,4(sp)
  80c2ec:	df000017 	ldw	fp,0(sp)
  80c2f0:	dec00204 	addi	sp,sp,8
  80c2f4:	f800283a 	ret

0080c2f8 <i2c_write>:

// return true if device response ack
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data)
{
  80c2f8:	defff904 	addi	sp,sp,-28
  80c2fc:	dfc00615 	stw	ra,24(sp)
  80c300:	df000515 	stw	fp,20(sp)
  80c304:	df000504 	addi	fp,sp,20
  80c308:	e13ffd15 	stw	r4,-12(fp)
  80c30c:	e17ffe15 	stw	r5,-8(fp)
  80c310:	e1bfff05 	stb	r6,-4(fp)
    alt_u8 Mask = 0x80;
  80c314:	00bfe004 	movi	r2,-128
  80c318:	e0bffc45 	stb	r2,-15(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
  80c31c:	e0bffe17 	ldw	r2,-8(fp)
  80c320:	10800104 	addi	r2,r2,4
  80c324:	1007883a 	mov	r3,r2
  80c328:	00800044 	movi	r2,1
  80c32c:	18800035 	stwio	r2,0(r3)
    
    for (i = 0; i < 8; i++)
  80c330:	e03ffb15 	stw	zero,-20(fp)
  80c334:	00002306 	br	80c3c4 <i2c_write+0xcc>
    {
        SCL_LOW(clk_base);  // new, make sure data change at clk low
  80c338:	e0bffd17 	ldw	r2,-12(fp)
  80c33c:	10000035 	stwio	zero,0(r2)
        // output data on bus
        if (Data & Mask)
  80c340:	e0ffff03 	ldbu	r3,-4(fp)
  80c344:	e0bffc43 	ldbu	r2,-15(fp)
  80c348:	1884703a 	and	r2,r3,r2
  80c34c:	10803fcc 	andi	r2,r2,255
  80c350:	1005003a 	cmpeq	r2,r2,zero
  80c354:	1000051e 	bne	r2,zero,80c36c <i2c_write+0x74>
        { // there is a delay in this command
            SDA_HIGH(data_base);
  80c358:	e0bffe17 	ldw	r2,-8(fp)
  80c35c:	1007883a 	mov	r3,r2
  80c360:	00800044 	movi	r2,1
  80c364:	18800035 	stwio	r2,0(r3)
  80c368:	00000206 	br	80c374 <i2c_write+0x7c>
        }
        else
        {
            SDA_LOW(data_base);
  80c36c:	e0bffe17 	ldw	r2,-8(fp)
  80c370:	10000035 	stwio	zero,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
  80c374:	e0bffc43 	ldbu	r2,-15(fp)
  80c378:	1004d07a 	srli	r2,r2,1
  80c37c:	e0bffc45 	stb	r2,-15(fp)
        // clock high
        SCL_HIGH(clk_base);
  80c380:	e0bffd17 	ldw	r2,-12(fp)
  80c384:	1007883a 	mov	r3,r2
  80c388:	00800044 	movi	r2,1
  80c38c:	18800035 	stwio	r2,0(r3)
        while (SCL_READ(clk_base) == 0); // clock stretching
  80c390:	e0bffd17 	ldw	r2,-12(fp)
  80c394:	10800037 	ldwio	r2,0(r2)
  80c398:	1005003a 	cmpeq	r2,r2,zero
  80c39c:	103ffc1e 	bne	r2,zero,80c390 <i2c_write+0x98>
        SCL_DELAY;
  80c3a0:	01000044 	movi	r4,1
  80c3a4:	081b29c0 	call	81b29c <usleep>
        SCL_LOW(clk_base);
  80c3a8:	e0bffd17 	ldw	r2,-12(fp)
  80c3ac:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
  80c3b0:	01000044 	movi	r4,1
  80c3b4:	081b29c0 	call	81b29c <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for (i = 0; i < 8; i++)
  80c3b8:	e0bffb17 	ldw	r2,-20(fp)
  80c3bc:	10800044 	addi	r2,r2,1
  80c3c0:	e0bffb15 	stw	r2,-20(fp)
  80c3c4:	e0bffb17 	ldw	r2,-20(fp)
  80c3c8:	10800210 	cmplti	r2,r2,8
  80c3cc:	103fda1e 	bne	r2,zero,80c338 <i2c_write+0x40>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
  80c3d0:	e0bffe17 	ldw	r2,-8(fp)
  80c3d4:	10800104 	addi	r2,r2,4
  80c3d8:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
  80c3dc:	e0bffd17 	ldw	r2,-12(fp)
  80c3e0:	1007883a 	mov	r3,r2
  80c3e4:	00800044 	movi	r2,1
  80c3e8:	18800035 	stwio	r2,0(r3)
    while (SCL_READ(clk_base) == 0); // clock stretching
  80c3ec:	e0bffd17 	ldw	r2,-12(fp)
  80c3f0:	10800037 	ldwio	r2,0(r2)
  80c3f4:	1005003a 	cmpeq	r2,r2,zero
  80c3f8:	103ffc1e 	bne	r2,zero,80c3ec <i2c_write+0xf4>
    SCL_DELAY;  // clock high delay
  80c3fc:	01000044 	movi	r4,1
  80c400:	081b29c0 	call	81b29c <usleep>
    bAck = SDA_READ(data_base)?false:true;  // get ack
  80c404:	e0bffe17 	ldw	r2,-8(fp)
  80c408:	10800037 	ldwio	r2,0(r2)
  80c40c:	1005003a 	cmpeq	r2,r2,zero
  80c410:	e0bffc05 	stb	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
  80c414:	e0bffd17 	ldw	r2,-12(fp)
  80c418:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
  80c41c:	01000044 	movi	r4,1
  80c420:	081b29c0 	call	81b29c <usleep>
    return bAck;
  80c424:	e0bffc03 	ldbu	r2,-16(fp)
}    
  80c428:	e037883a 	mov	sp,fp
  80c42c:	dfc00117 	ldw	ra,4(sp)
  80c430:	df000017 	ldw	fp,0(sp)
  80c434:	dec00204 	addi	sp,sp,8
  80c438:	f800283a 	ret

0080c43c <i2c_read>:

// return true if device response ack
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck)
{
  80c43c:	defff804 	addi	sp,sp,-32
  80c440:	dfc00715 	stw	ra,28(sp)
  80c444:	df000615 	stw	fp,24(sp)
  80c448:	df000604 	addi	fp,sp,24
  80c44c:	e13ffc15 	stw	r4,-16(fp)
  80c450:	e17ffd15 	stw	r5,-12(fp)
  80c454:	e1bffe15 	stw	r6,-8(fp)
  80c458:	e1ffff05 	stb	r7,-4(fp)
    alt_u8 Data = 0;
  80c45c:	e03ffb05 	stb	zero,-20(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
  80c460:	e0bffd17 	ldw	r2,-12(fp)
  80c464:	10800104 	addi	r2,r2,4
  80c468:	10000035 	stwio	zero,0(r2)
    SCL_LOW(clk_base); // clock low
  80c46c:	e0bffc17 	ldw	r2,-16(fp)
  80c470:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
  80c474:	01000044 	movi	r4,1
  80c478:	081b29c0 	call	81b29c <usleep>

    for (i = 0; i < 8; i++)
  80c47c:	e03ffa15 	stw	zero,-24(fp)
  80c480:	00001b06 	br	80c4f0 <i2c_read+0xb4>
    {
        Data <<= 1;
  80c484:	e0bffb03 	ldbu	r2,-20(fp)
  80c488:	1085883a 	add	r2,r2,r2
  80c48c:	e0bffb05 	stb	r2,-20(fp)
        SCL_HIGH(clk_base);  // clock high
  80c490:	e0bffc17 	ldw	r2,-16(fp)
  80c494:	1007883a 	mov	r3,r2
  80c498:	00800044 	movi	r2,1
  80c49c:	18800035 	stwio	r2,0(r3)
        while (SCL_READ(clk_base) == 0); // clock stretching
  80c4a0:	e0bffc17 	ldw	r2,-16(fp)
  80c4a4:	10800037 	ldwio	r2,0(r2)
  80c4a8:	1005003a 	cmpeq	r2,r2,zero
  80c4ac:	103ffc1e 	bne	r2,zero,80c4a0 <i2c_read+0x64>
        SCL_DELAY;
  80c4b0:	01000044 	movi	r4,1
  80c4b4:	081b29c0 	call	81b29c <usleep>
        if (SDA_READ(data_base))  // read data   
  80c4b8:	e0bffd17 	ldw	r2,-12(fp)
  80c4bc:	10800037 	ldwio	r2,0(r2)
  80c4c0:	1005003a 	cmpeq	r2,r2,zero
  80c4c4:	1000031e 	bne	r2,zero,80c4d4 <i2c_read+0x98>
        {
            Data |= 0x01;
  80c4c8:	e0bffb03 	ldbu	r2,-20(fp)
  80c4cc:	10800054 	ori	r2,r2,1
  80c4d0:	e0bffb05 	stb	r2,-20(fp)
        else
        {
        	//printf("0");
        }

        SCL_LOW(clk_base);  // clock low
  80c4d4:	e0bffc17 	ldw	r2,-16(fp)
  80c4d8:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
  80c4dc:	01000044 	movi	r4,1
  80c4e0:	081b29c0 	call	81b29c <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for (i = 0; i < 8; i++)
  80c4e4:	e0bffa17 	ldw	r2,-24(fp)
  80c4e8:	10800044 	addi	r2,r2,1
  80c4ec:	e0bffa15 	stw	r2,-24(fp)
  80c4f0:	e0bffa17 	ldw	r2,-24(fp)
  80c4f4:	10800210 	cmplti	r2,r2,8
  80c4f8:	103fe21e 	bne	r2,zero,80c484 <i2c_read+0x48>
        SCL_LOW(clk_base);  // clock low
        SCL_DELAY;
    }
    //printf("\n");
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
  80c4fc:	e0bffc17 	ldw	r2,-16(fp)
  80c500:	10000035 	stwio	zero,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
  80c504:	e0bffd17 	ldw	r2,-12(fp)
  80c508:	10800104 	addi	r2,r2,4
  80c50c:	1007883a 	mov	r3,r2
  80c510:	00800044 	movi	r2,1
  80c514:	18800035 	stwio	r2,0(r3)
    if (bAck)
  80c518:	e0bfff03 	ldbu	r2,-4(fp)
  80c51c:	1005003a 	cmpeq	r2,r2,zero
  80c520:	1000031e 	bne	r2,zero,80c530 <i2c_read+0xf4>
        SDA_LOW(data_base);
  80c524:	e0bffd17 	ldw	r2,-12(fp)
  80c528:	10000035 	stwio	zero,0(r2)
  80c52c:	00000406 	br	80c540 <i2c_read+0x104>
    else
        SDA_HIGH(data_base);
  80c530:	e0bffd17 	ldw	r2,-12(fp)
  80c534:	1007883a 	mov	r3,r2
  80c538:	00800044 	movi	r2,1
  80c53c:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base); // clock high
  80c540:	e0bffc17 	ldw	r2,-16(fp)
  80c544:	1007883a 	mov	r3,r2
  80c548:	00800044 	movi	r2,1
  80c54c:	18800035 	stwio	r2,0(r3)
    while (SCL_READ(clk_base) == 0); // clock stretching
  80c550:	e0bffc17 	ldw	r2,-16(fp)
  80c554:	10800037 	ldwio	r2,0(r2)
  80c558:	1005003a 	cmpeq	r2,r2,zero
  80c55c:	103ffc1e 	bne	r2,zero,80c550 <i2c_read+0x114>
    SCL_DELAY; // clock high  delay
  80c560:	01000044 	movi	r4,1
  80c564:	081b29c0 	call	81b29c <usleep>
    SCL_LOW(clk_base); // clock low
  80c568:	e0bffc17 	ldw	r2,-16(fp)
  80c56c:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
  80c570:	01000044 	movi	r4,1
  80c574:	081b29c0 	call	81b29c <usleep>
    SDA_LOW(data_base);  // data low
  80c578:	e0bffd17 	ldw	r2,-12(fp)
  80c57c:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // data low delay
  80c580:	01000044 	movi	r4,1
  80c584:	081b29c0 	call	81b29c <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
  80c588:	e0fffe17 	ldw	r3,-8(fp)
  80c58c:	e0bffb03 	ldbu	r2,-20(fp)
  80c590:	18800005 	stb	r2,0(r3)
}
  80c594:	e037883a 	mov	sp,fp
  80c598:	dfc00117 	ldw	ra,4(sp)
  80c59c:	df000017 	ldw	fp,0(sp)
  80c5a0:	dec00204 	addi	sp,sp,8
  80c5a4:	f800283a 	ret

0080c5a8 <pollIMU>:
**************************************************************************/

#include "DrumAnyWhere.h"

/* This task initializes the IMUs using I2C communication and reads data from the registers */
void pollIMU(void* pdata){
  80c5a8:	deffd504 	addi	sp,sp,-172
  80c5ac:	dfc02a15 	stw	ra,168(sp)
  80c5b0:	df002915 	stw	fp,164(sp)
  80c5b4:	df002904 	addi	fp,sp,164
  80c5b8:	e13fff15 	stw	r4,-4(fp)

	//Temporary buffer to read into
	alt_u8 ReadBuf[6];
	//Device address
	alt_u8 deviceAddress = 0xD0;
  80c5bc:	00bff404 	movi	r2,-48
  80c5c0:	e0bff1c5 	stb	r2,-57(fp)
	//WHO AM I Register
	alt_u8 whoamireg = 0x75;
  80c5c4:	00801d44 	movi	r2,117
  80c5c8:	e0bff185 	stb	r2,-58(fp)
	alt_u16 buflen = 1;
  80c5cc:	00800044 	movi	r2,1
  80c5d0:	e0bff10d 	sth	r2,-60(fp)
	// Self tests, biases and resolution for DPS conversions
	float selfTest[6];
	float aRes, gRes;

    // WHO AM I testing
  	I2C_Start(I2C_SCL_BASE,I2C_SDA_BASE);
  80c5d4:	01006474 	movhi	r4,401
  80c5d8:	21242804 	addi	r4,r4,-28512
  80c5dc:	01406474 	movhi	r5,401
  80c5e0:	29642404 	addi	r5,r5,-28528
  80c5e4:	080bb280 	call	80bb28 <I2C_Start>
    if(!I2C_ReadFromDeviceRegister(I2C_SCL_BASE,I2C_SDA_BASE, deviceAddress, whoamireg, (alt_u8*)&ReadBuf, buflen, true)){
  80c5e8:	e0bff1c3 	ldbu	r2,-57(fp)
  80c5ec:	11803fcc 	andi	r6,r2,255
  80c5f0:	3180201c 	xori	r6,r6,128
  80c5f4:	31bfe004 	addi	r6,r6,-128
  80c5f8:	e1fff183 	ldbu	r7,-58(fp)
  80c5fc:	e0fff10b 	ldhu	r3,-60(fp)
  80c600:	e0bff204 	addi	r2,fp,-56
  80c604:	d8800015 	stw	r2,0(sp)
  80c608:	d8c00115 	stw	r3,4(sp)
  80c60c:	00800044 	movi	r2,1
  80c610:	d8800215 	stw	r2,8(sp)
  80c614:	01006474 	movhi	r4,401
  80c618:	21242804 	addi	r4,r4,-28512
  80c61c:	01406474 	movhi	r5,401
  80c620:	29642404 	addi	r5,r5,-28528
  80c624:	080bf780 	call	80bf78 <I2C_ReadFromDeviceRegister>

	  }
    I2C_Stop(I2C_SCL_BASE, I2C_SDA_BASE);
  80c628:	01006474 	movhi	r4,401
  80c62c:	21242804 	addi	r4,r4,-28512
  80c630:	01406474 	movhi	r5,401
  80c634:	29642404 	addi	r5,r5,-28528
  80c638:	080bb600 	call	80bb60 <I2C_Stop>
    printf("DrumStick #1 - WHO AM I: %0x\n", ReadBuf[0]);
  80c63c:	e0bff203 	ldbu	r2,-56(fp)
  80c640:	11403fcc 	andi	r5,r2,255
  80c644:	010020b4 	movhi	r4,130
  80c648:	211ec104 	addi	r4,r4,31492
  80c64c:	08123a40 	call	8123a4 <printf>

    printf("Starting Self Tests - DrumStick #1\n");
  80c650:	010020b4 	movhi	r4,130
  80c654:	211ec904 	addi	r4,r4,31524
  80c658:	08124e00 	call	8124e0 <puts>

    //Self Testing
    MPU9250SelfTest(selfTest, I2C_SCL_BASE,I2C_SDA_BASE);
  80c65c:	e13ff404 	addi	r4,fp,-48
  80c660:	01406474 	movhi	r5,401
  80c664:	29642804 	addi	r5,r5,-28512
  80c668:	01806474 	movhi	r6,401
  80c66c:	31a42404 	addi	r6,r6,-28528
  80c670:	08014f80 	call	8014f8 <MPU9250SelfTest>
    printf("x-axis self test: acceleration trim within : ");
  80c674:	010020b4 	movhi	r4,130
  80c678:	211ed204 	addi	r4,r4,31560
  80c67c:	08123a40 	call	8123a4 <printf>
   	printf("%.1f", selfTest[0]); printf("%% of factory value\n");
  80c680:	e0bff417 	ldw	r2,-48(fp)
  80c684:	1009883a 	mov	r4,r2
  80c688:	08100180 	call	810018 <__extendsfdf2>
  80c68c:	100d883a 	mov	r6,r2
  80c690:	180f883a 	mov	r7,r3
  80c694:	010020b4 	movhi	r4,130
  80c698:	211ede04 	addi	r4,r4,31608
  80c69c:	300b883a 	mov	r5,r6
  80c6a0:	380d883a 	mov	r6,r7
  80c6a4:	08123a40 	call	8123a4 <printf>
  80c6a8:	010020b4 	movhi	r4,130
  80c6ac:	211ee004 	addi	r4,r4,31616
  80c6b0:	08123a40 	call	8123a4 <printf>
  	printf("y-axis self test: acceleration trim within : ");
  80c6b4:	010020b4 	movhi	r4,130
  80c6b8:	211ee604 	addi	r4,r4,31640
  80c6bc:	08123a40 	call	8123a4 <printf>
  	printf("%.1f", selfTest[1]); printf("%% of factory value\n");
  80c6c0:	e0bff517 	ldw	r2,-44(fp)
  80c6c4:	1009883a 	mov	r4,r2
  80c6c8:	08100180 	call	810018 <__extendsfdf2>
  80c6cc:	100d883a 	mov	r6,r2
  80c6d0:	180f883a 	mov	r7,r3
  80c6d4:	010020b4 	movhi	r4,130
  80c6d8:	211ede04 	addi	r4,r4,31608
  80c6dc:	300b883a 	mov	r5,r6
  80c6e0:	380d883a 	mov	r6,r7
  80c6e4:	08123a40 	call	8123a4 <printf>
  80c6e8:	010020b4 	movhi	r4,130
  80c6ec:	211ee004 	addi	r4,r4,31616
  80c6f0:	08123a40 	call	8123a4 <printf>
  	printf("z-axis self test: acceleration trim within : ");
  80c6f4:	010020b4 	movhi	r4,130
  80c6f8:	211ef204 	addi	r4,r4,31688
  80c6fc:	08123a40 	call	8123a4 <printf>
  	printf("%.1f", selfTest[2]); printf("%% of factory value\n");
  80c700:	e0bff617 	ldw	r2,-40(fp)
  80c704:	1009883a 	mov	r4,r2
  80c708:	08100180 	call	810018 <__extendsfdf2>
  80c70c:	100d883a 	mov	r6,r2
  80c710:	180f883a 	mov	r7,r3
  80c714:	010020b4 	movhi	r4,130
  80c718:	211ede04 	addi	r4,r4,31608
  80c71c:	300b883a 	mov	r5,r6
  80c720:	380d883a 	mov	r6,r7
  80c724:	08123a40 	call	8123a4 <printf>
  80c728:	010020b4 	movhi	r4,130
  80c72c:	211ee004 	addi	r4,r4,31616
  80c730:	08123a40 	call	8123a4 <printf>
  	printf("x-axis self test: gyration trim within : ");
  80c734:	010020b4 	movhi	r4,130
  80c738:	211efe04 	addi	r4,r4,31736
  80c73c:	08123a40 	call	8123a4 <printf>
  	printf("%.1f", selfTest[3]); printf("%% of factory value\n");
  80c740:	e0bff717 	ldw	r2,-36(fp)
  80c744:	1009883a 	mov	r4,r2
  80c748:	08100180 	call	810018 <__extendsfdf2>
  80c74c:	100d883a 	mov	r6,r2
  80c750:	180f883a 	mov	r7,r3
  80c754:	010020b4 	movhi	r4,130
  80c758:	211ede04 	addi	r4,r4,31608
  80c75c:	300b883a 	mov	r5,r6
  80c760:	380d883a 	mov	r6,r7
  80c764:	08123a40 	call	8123a4 <printf>
  80c768:	010020b4 	movhi	r4,130
  80c76c:	211ee004 	addi	r4,r4,31616
  80c770:	08123a40 	call	8123a4 <printf>
  	printf("y-axis self test: gyration trim within : ");
  80c774:	010020b4 	movhi	r4,130
  80c778:	211f0904 	addi	r4,r4,31780
  80c77c:	08123a40 	call	8123a4 <printf>
  	printf("%.1f", selfTest[4]); printf("%% of factory value\n");
  80c780:	e0bff817 	ldw	r2,-32(fp)
  80c784:	1009883a 	mov	r4,r2
  80c788:	08100180 	call	810018 <__extendsfdf2>
  80c78c:	100d883a 	mov	r6,r2
  80c790:	180f883a 	mov	r7,r3
  80c794:	010020b4 	movhi	r4,130
  80c798:	211ede04 	addi	r4,r4,31608
  80c79c:	300b883a 	mov	r5,r6
  80c7a0:	380d883a 	mov	r6,r7
  80c7a4:	08123a40 	call	8123a4 <printf>
  80c7a8:	010020b4 	movhi	r4,130
  80c7ac:	211ee004 	addi	r4,r4,31616
  80c7b0:	08123a40 	call	8123a4 <printf>
  	printf("z-axis self test: gyration trim within : ");
  80c7b4:	010020b4 	movhi	r4,130
  80c7b8:	211f1404 	addi	r4,r4,31824
  80c7bc:	08123a40 	call	8123a4 <printf>
  	printf("%.1f", selfTest[5]); printf("%% of factory value\n");
  80c7c0:	e0bff917 	ldw	r2,-28(fp)
  80c7c4:	1009883a 	mov	r4,r2
  80c7c8:	08100180 	call	810018 <__extendsfdf2>
  80c7cc:	100d883a 	mov	r6,r2
  80c7d0:	180f883a 	mov	r7,r3
  80c7d4:	010020b4 	movhi	r4,130
  80c7d8:	211ede04 	addi	r4,r4,31608
  80c7dc:	300b883a 	mov	r5,r6
  80c7e0:	380d883a 	mov	r6,r7
  80c7e4:	08123a40 	call	8123a4 <printf>
  80c7e8:	010020b4 	movhi	r4,130
  80c7ec:	211ee004 	addi	r4,r4,31616
  80c7f0:	08123a40 	call	8123a4 <printf>


  	printf("DrumStick #1 initialized for active data mode....\n");
  80c7f4:	010020b4 	movhi	r4,130
  80c7f8:	211f1f04 	addi	r4,r4,31868
  80c7fc:	08124e00 	call	8124e0 <puts>

  	// Get sensor resolutions
  	getAres(&aRes);
  80c800:	e13ffa04 	addi	r4,fp,-24
  80c804:	08000480 	call	800048 <getAres>
  	getGres(&gRes);
  80c808:	e13ffb04 	addi	r4,fp,-20
  80c80c:	08000740 	call	800074 <getGres>

	int hit_flag_1 = 0;
  80c810:	e03ff015 	stw	zero,-64(fp)
	int gz_hit_flag_1 = 0;
  80c814:	e03fef15 	stw	zero,-68(fp)
	int gy_hit_flag_1 = 0;
  80c818:	e03fee15 	stw	zero,-72(fp)

	int drum1_index = 1;
  80c81c:	00800044 	movi	r2,1
  80c820:	e0bfed15 	stw	r2,-76(fp)
	int drum1_gy_count_up = 0;
  80c824:	e03fec15 	stw	zero,-80(fp)
	int drum1_gy_count_down = 0;
  80c828:	e03feb15 	stw	zero,-84(fp)

	// WHO AM I testing
	I2C_Start(I2C_SCL_2_BASE, I2C_SDA_2_BASE);
  80c82c:	01006474 	movhi	r4,401
  80c830:	21241c04 	addi	r4,r4,-28560
  80c834:	01406474 	movhi	r5,401
  80c838:	29642004 	addi	r5,r5,-28544
  80c83c:	080bb280 	call	80bb28 <I2C_Start>
	if(!I2C_ReadFromDeviceRegister(I2C_SCL_2_BASE, I2C_SDA_2_BASE, deviceAddress, whoamireg, (alt_u8*)&ReadBuf, buflen, true)){
  80c840:	e0bff1c3 	ldbu	r2,-57(fp)
  80c844:	11803fcc 	andi	r6,r2,255
  80c848:	3180201c 	xori	r6,r6,128
  80c84c:	31bfe004 	addi	r6,r6,-128
  80c850:	e1fff183 	ldbu	r7,-58(fp)
  80c854:	e0fff10b 	ldhu	r3,-60(fp)
  80c858:	e0bff204 	addi	r2,fp,-56
  80c85c:	d8800015 	stw	r2,0(sp)
  80c860:	d8c00115 	stw	r3,4(sp)
  80c864:	00800044 	movi	r2,1
  80c868:	d8800215 	stw	r2,8(sp)
  80c86c:	01006474 	movhi	r4,401
  80c870:	21241c04 	addi	r4,r4,-28560
  80c874:	01406474 	movhi	r5,401
  80c878:	29642004 	addi	r5,r5,-28544
  80c87c:	080bf780 	call	80bf78 <I2C_ReadFromDeviceRegister>

	}
	I2C_Stop(I2C_SCL_2_BASE, I2C_SDA_2_BASE);
  80c880:	01006474 	movhi	r4,401
  80c884:	21241c04 	addi	r4,r4,-28560
  80c888:	01406474 	movhi	r5,401
  80c88c:	29642004 	addi	r5,r5,-28544
  80c890:	080bb600 	call	80bb60 <I2C_Stop>
	printf("DrumStick #2 - WHO AM I: %0x\n", ReadBuf[0]);
  80c894:	e0bff203 	ldbu	r2,-56(fp)
  80c898:	11403fcc 	andi	r5,r2,255
  80c89c:	010020b4 	movhi	r4,130
  80c8a0:	211f2c04 	addi	r4,r4,31920
  80c8a4:	08123a40 	call	8123a4 <printf>

	printf("Starting Self Tests - DrumStick #2\n");
  80c8a8:	010020b4 	movhi	r4,130
  80c8ac:	211f3404 	addi	r4,r4,31952
  80c8b0:	08124e00 	call	8124e0 <puts>

	//Self Testing
	MPU9250SelfTest(selfTest, I2C_SCL_2_BASE, I2C_SDA_2_BASE);
  80c8b4:	e13ff404 	addi	r4,fp,-48
  80c8b8:	01406474 	movhi	r5,401
  80c8bc:	29641c04 	addi	r5,r5,-28560
  80c8c0:	01806474 	movhi	r6,401
  80c8c4:	31a42004 	addi	r6,r6,-28544
  80c8c8:	08014f80 	call	8014f8 <MPU9250SelfTest>
	printf("x-axis self test: acceleration trim within : ");
  80c8cc:	010020b4 	movhi	r4,130
  80c8d0:	211ed204 	addi	r4,r4,31560
  80c8d4:	08123a40 	call	8123a4 <printf>
	printf("%.1f", selfTest[0]); printf("%% of factory value\n");
  80c8d8:	e0bff417 	ldw	r2,-48(fp)
  80c8dc:	1009883a 	mov	r4,r2
  80c8e0:	08100180 	call	810018 <__extendsfdf2>
  80c8e4:	100d883a 	mov	r6,r2
  80c8e8:	180f883a 	mov	r7,r3
  80c8ec:	010020b4 	movhi	r4,130
  80c8f0:	211ede04 	addi	r4,r4,31608
  80c8f4:	300b883a 	mov	r5,r6
  80c8f8:	380d883a 	mov	r6,r7
  80c8fc:	08123a40 	call	8123a4 <printf>
  80c900:	010020b4 	movhi	r4,130
  80c904:	211ee004 	addi	r4,r4,31616
  80c908:	08123a40 	call	8123a4 <printf>
	printf("y-axis self test: acceleration trim within : ");
  80c90c:	010020b4 	movhi	r4,130
  80c910:	211ee604 	addi	r4,r4,31640
  80c914:	08123a40 	call	8123a4 <printf>
	printf("%.1f", selfTest[1]); printf("%% of factory value\n");
  80c918:	e0bff517 	ldw	r2,-44(fp)
  80c91c:	1009883a 	mov	r4,r2
  80c920:	08100180 	call	810018 <__extendsfdf2>
  80c924:	100d883a 	mov	r6,r2
  80c928:	180f883a 	mov	r7,r3
  80c92c:	010020b4 	movhi	r4,130
  80c930:	211ede04 	addi	r4,r4,31608
  80c934:	300b883a 	mov	r5,r6
  80c938:	380d883a 	mov	r6,r7
  80c93c:	08123a40 	call	8123a4 <printf>
  80c940:	010020b4 	movhi	r4,130
  80c944:	211ee004 	addi	r4,r4,31616
  80c948:	08123a40 	call	8123a4 <printf>
	printf("z-axis self test: acceleration trim within : ");
  80c94c:	010020b4 	movhi	r4,130
  80c950:	211ef204 	addi	r4,r4,31688
  80c954:	08123a40 	call	8123a4 <printf>
	printf("%.1f", selfTest[2]); printf("%% of factory value\n");
  80c958:	e0bff617 	ldw	r2,-40(fp)
  80c95c:	1009883a 	mov	r4,r2
  80c960:	08100180 	call	810018 <__extendsfdf2>
  80c964:	100d883a 	mov	r6,r2
  80c968:	180f883a 	mov	r7,r3
  80c96c:	010020b4 	movhi	r4,130
  80c970:	211ede04 	addi	r4,r4,31608
  80c974:	300b883a 	mov	r5,r6
  80c978:	380d883a 	mov	r6,r7
  80c97c:	08123a40 	call	8123a4 <printf>
  80c980:	010020b4 	movhi	r4,130
  80c984:	211ee004 	addi	r4,r4,31616
  80c988:	08123a40 	call	8123a4 <printf>
	printf("x-axis self test: gyration trim within : ");
  80c98c:	010020b4 	movhi	r4,130
  80c990:	211efe04 	addi	r4,r4,31736
  80c994:	08123a40 	call	8123a4 <printf>
	printf("%.1f", selfTest[3]); printf("%% of factory value\n");
  80c998:	e0bff717 	ldw	r2,-36(fp)
  80c99c:	1009883a 	mov	r4,r2
  80c9a0:	08100180 	call	810018 <__extendsfdf2>
  80c9a4:	100d883a 	mov	r6,r2
  80c9a8:	180f883a 	mov	r7,r3
  80c9ac:	010020b4 	movhi	r4,130
  80c9b0:	211ede04 	addi	r4,r4,31608
  80c9b4:	300b883a 	mov	r5,r6
  80c9b8:	380d883a 	mov	r6,r7
  80c9bc:	08123a40 	call	8123a4 <printf>
  80c9c0:	010020b4 	movhi	r4,130
  80c9c4:	211ee004 	addi	r4,r4,31616
  80c9c8:	08123a40 	call	8123a4 <printf>
	printf("y-axis self test: gyration trim within : ");
  80c9cc:	010020b4 	movhi	r4,130
  80c9d0:	211f0904 	addi	r4,r4,31780
  80c9d4:	08123a40 	call	8123a4 <printf>
	printf("%.1f", selfTest[4]); printf("%% of factory value\n");
  80c9d8:	e0bff817 	ldw	r2,-32(fp)
  80c9dc:	1009883a 	mov	r4,r2
  80c9e0:	08100180 	call	810018 <__extendsfdf2>
  80c9e4:	100d883a 	mov	r6,r2
  80c9e8:	180f883a 	mov	r7,r3
  80c9ec:	010020b4 	movhi	r4,130
  80c9f0:	211ede04 	addi	r4,r4,31608
  80c9f4:	300b883a 	mov	r5,r6
  80c9f8:	380d883a 	mov	r6,r7
  80c9fc:	08123a40 	call	8123a4 <printf>
  80ca00:	010020b4 	movhi	r4,130
  80ca04:	211ee004 	addi	r4,r4,31616
  80ca08:	08123a40 	call	8123a4 <printf>
	printf("z-axis self test: gyration trim within : ");
  80ca0c:	010020b4 	movhi	r4,130
  80ca10:	211f1404 	addi	r4,r4,31824
  80ca14:	08123a40 	call	8123a4 <printf>
	printf("%.1f", selfTest[5]); printf("%% of factory value\n");
  80ca18:	e0bff917 	ldw	r2,-28(fp)
  80ca1c:	1009883a 	mov	r4,r2
  80ca20:	08100180 	call	810018 <__extendsfdf2>
  80ca24:	100d883a 	mov	r6,r2
  80ca28:	180f883a 	mov	r7,r3
  80ca2c:	010020b4 	movhi	r4,130
  80ca30:	211ede04 	addi	r4,r4,31608
  80ca34:	300b883a 	mov	r5,r6
  80ca38:	380d883a 	mov	r6,r7
  80ca3c:	08123a40 	call	8123a4 <printf>
  80ca40:	010020b4 	movhi	r4,130
  80ca44:	211ee004 	addi	r4,r4,31616
  80ca48:	08123a40 	call	8123a4 <printf>


	printf("DrumStick #2 initialized for active data mode....\n");
  80ca4c:	010020b4 	movhi	r4,130
  80ca50:	211f3d04 	addi	r4,r4,31988
  80ca54:	08124e00 	call	8124e0 <puts>
	int hit_flag_2 = 0;
  80ca58:	e03fea15 	stw	zero,-88(fp)
	int gz_hit_flag_2 = 0;
  80ca5c:	e03fe915 	stw	zero,-92(fp)
	int gy_hit_flag_2 = 0;
  80ca60:	e03fe815 	stw	zero,-96(fp)

	int drum2_index = 1;
  80ca64:	00800044 	movi	r2,1
  80ca68:	e0bfe715 	stw	r2,-100(fp)
	int drum2_gy_count_up = 0;
  80ca6c:	e03fe615 	stw	zero,-104(fp)
	int drum2_gy_count_down = 0;
  80ca70:	e03fe515 	stw	zero,-108(fp)
	float ax, ay, az, gx, gy, gz, d1_az_old, d2_az_old;

	// Stores the 16-bit signed accelerometer and gyroscope sensor output
	alt_16 accelCount[3];
	alt_16 gyroCount[3];
	d1_az_old = 0;
  80ca74:	e03fdb15 	stw	zero,-148(fp)
	d2_az_old = 0;
  80ca78:	e03fda15 	stw	zero,-152(fp)

	//********************* DRUMSTICK #1 *********************************************
	// Read the x/y/z accelerometer values
	readAccelData(accelCount, I2C_SCL_BASE,I2C_SDA_BASE);
  80ca7c:	e13ffc04 	addi	r4,fp,-16
  80ca80:	01406474 	movhi	r5,401
  80ca84:	29642804 	addi	r5,r5,-28512
  80ca88:	01806474 	movhi	r6,401
  80ca8c:	31a42404 	addi	r6,r6,-28528
  80ca90:	08000a00 	call	8000a0 <readAccelData>
	 // Read the x/y/z gyroscope values
	readGyroData(gyroCount, I2C_SCL_BASE,I2C_SDA_BASE);
  80ca94:	e13ffd84 	addi	r4,fp,-10
  80ca98:	01406474 	movhi	r5,401
  80ca9c:	29642804 	addi	r5,r5,-28512
  80caa0:	01806474 	movhi	r6,401
  80caa4:	31a42404 	addi	r6,r6,-28528
  80caa8:	08001a00 	call	8001a0 <readGyroData>

	// Calculating the acceleration values into actual g's
	// Depends on scale being set
	ax = (float)accelCount[0]*aRes;
  80caac:	e0bffc0b 	ldhu	r2,-16(fp)
  80cab0:	113fffcc 	andi	r4,r2,65535
  80cab4:	2120001c 	xori	r4,r4,32768
  80cab8:	21200004 	addi	r4,r4,-32768
  80cabc:	080ff800 	call	80ff80 <__floatsisf>
  80cac0:	e0fffa17 	ldw	r3,-24(fp)
  80cac4:	1009883a 	mov	r4,r2
  80cac8:	180b883a 	mov	r5,r3
  80cacc:	080fb3c0 	call	80fb3c <__mulsf3>
  80cad0:	e0bfe115 	stw	r2,-124(fp)
	ay = (float)accelCount[1]*aRes;
  80cad4:	e0bffc8b 	ldhu	r2,-14(fp)
  80cad8:	113fffcc 	andi	r4,r2,65535
  80cadc:	2120001c 	xori	r4,r4,32768
  80cae0:	21200004 	addi	r4,r4,-32768
  80cae4:	080ff800 	call	80ff80 <__floatsisf>
  80cae8:	e0fffa17 	ldw	r3,-24(fp)
  80caec:	1009883a 	mov	r4,r2
  80caf0:	180b883a 	mov	r5,r3
  80caf4:	080fb3c0 	call	80fb3c <__mulsf3>
  80caf8:	e0bfe015 	stw	r2,-128(fp)
	az = (float)accelCount[2]*aRes;
  80cafc:	e0bffd0b 	ldhu	r2,-12(fp)
  80cb00:	113fffcc 	andi	r4,r2,65535
  80cb04:	2120001c 	xori	r4,r4,32768
  80cb08:	21200004 	addi	r4,r4,-32768
  80cb0c:	080ff800 	call	80ff80 <__floatsisf>
  80cb10:	e0fffa17 	ldw	r3,-24(fp)
  80cb14:	1009883a 	mov	r4,r2
  80cb18:	180b883a 	mov	r5,r3
  80cb1c:	080fb3c0 	call	80fb3c <__mulsf3>
  80cb20:	e0bfdf15 	stw	r2,-132(fp)

	// Calculating the gyro values into actual degrees per second
	// Depends on scale being set
	gx = (float)gyroCount[0]*gRes;
  80cb24:	e0bffd8b 	ldhu	r2,-10(fp)
  80cb28:	113fffcc 	andi	r4,r2,65535
  80cb2c:	2120001c 	xori	r4,r4,32768
  80cb30:	21200004 	addi	r4,r4,-32768
  80cb34:	080ff800 	call	80ff80 <__floatsisf>
  80cb38:	e0fffb17 	ldw	r3,-20(fp)
  80cb3c:	1009883a 	mov	r4,r2
  80cb40:	180b883a 	mov	r5,r3
  80cb44:	080fb3c0 	call	80fb3c <__mulsf3>
  80cb48:	e0bfde15 	stw	r2,-136(fp)
	gy = (float)gyroCount[1]*gRes;
  80cb4c:	e0bffe0b 	ldhu	r2,-8(fp)
  80cb50:	113fffcc 	andi	r4,r2,65535
  80cb54:	2120001c 	xori	r4,r4,32768
  80cb58:	21200004 	addi	r4,r4,-32768
  80cb5c:	080ff800 	call	80ff80 <__floatsisf>
  80cb60:	e0fffb17 	ldw	r3,-20(fp)
  80cb64:	1009883a 	mov	r4,r2
  80cb68:	180b883a 	mov	r5,r3
  80cb6c:	080fb3c0 	call	80fb3c <__mulsf3>
  80cb70:	e0bfdd15 	stw	r2,-140(fp)
	gz = (float)gyroCount[2]*gRes;
  80cb74:	e0bffe8b 	ldhu	r2,-6(fp)
  80cb78:	113fffcc 	andi	r4,r2,65535
  80cb7c:	2120001c 	xori	r4,r4,32768
  80cb80:	21200004 	addi	r4,r4,-32768
  80cb84:	080ff800 	call	80ff80 <__floatsisf>
  80cb88:	e0fffb17 	ldw	r3,-20(fp)
  80cb8c:	1009883a 	mov	r4,r2
  80cb90:	180b883a 	mov	r5,r3
  80cb94:	080fb3c0 	call	80fb3c <__mulsf3>
  80cb98:	e0bfdc15 	stw	r2,-144(fp)

	//printf("gx =  %f, gy = %f, gz = %f \n", gx, gy, gz);
	//printf("%f\n", gy);

	// Horizontal Tracking
	if((gz) < -200){
  80cb9c:	e13fdc17 	ldw	r4,-144(fp)
  80cba0:	0170d234 	movhi	r5,49992
  80cba4:	080ff080 	call	80ff08 <__ltsf2>
  80cba8:	1004803a 	cmplt	r2,r2,zero
  80cbac:	1000011e 	bne	r2,zero,80cbb4 <pollIMU+0x60c>
  80cbb0:	00000f06 	br	80cbf0 <pollIMU+0x648>
		if(!gz_hit_flag_1 && drum1_index != 2 && drum1_index != 5){
  80cbb4:	e0bfef17 	ldw	r2,-68(fp)
  80cbb8:	1004c03a 	cmpne	r2,r2,zero
  80cbbc:	1000131e 	bne	r2,zero,80cc0c <pollIMU+0x664>
  80cbc0:	e0bfed17 	ldw	r2,-76(fp)
  80cbc4:	108000a0 	cmpeqi	r2,r2,2
  80cbc8:	1000101e 	bne	r2,zero,80cc0c <pollIMU+0x664>
  80cbcc:	e0bfed17 	ldw	r2,-76(fp)
  80cbd0:	10800160 	cmpeqi	r2,r2,5
  80cbd4:	10000d1e 	bne	r2,zero,80cc0c <pollIMU+0x664>
			drum1_index += 1;
  80cbd8:	e0bfed17 	ldw	r2,-76(fp)
  80cbdc:	10800044 	addi	r2,r2,1
  80cbe0:	e0bfed15 	stw	r2,-76(fp)
			gz_hit_flag_1 = 1;
  80cbe4:	00800044 	movi	r2,1
  80cbe8:	e0bfef15 	stw	r2,-68(fp)
  80cbec:	00000706 	br	80cc0c <pollIMU+0x664>
		}
	}
	else if (gz < 30){
  80cbf0:	e13fdc17 	ldw	r4,-144(fp)
  80cbf4:	01507c34 	movhi	r5,16880
  80cbf8:	080ff080 	call	80ff08 <__ltsf2>
  80cbfc:	1004803a 	cmplt	r2,r2,zero
  80cc00:	1000011e 	bne	r2,zero,80cc08 <pollIMU+0x660>
  80cc04:	00000106 	br	80cc0c <pollIMU+0x664>
		gz_hit_flag_1 = 0;
  80cc08:	e03fef15 	stw	zero,-68(fp)
	}

	if((gz) > 200){
  80cc0c:	e13fdc17 	ldw	r4,-144(fp)
  80cc10:	0150d234 	movhi	r5,17224
  80cc14:	080fe900 	call	80fe90 <__gtsf2>
  80cc18:	10800048 	cmpgei	r2,r2,1
  80cc1c:	1000011e 	bne	r2,zero,80cc24 <pollIMU+0x67c>
  80cc20:	00000f06 	br	80cc60 <pollIMU+0x6b8>
		if(!gz_hit_flag_1 && drum1_index != 0 && drum1_index != 3){
  80cc24:	e0bfef17 	ldw	r2,-68(fp)
  80cc28:	1004c03a 	cmpne	r2,r2,zero
  80cc2c:	1000131e 	bne	r2,zero,80cc7c <pollIMU+0x6d4>
  80cc30:	e0bfed17 	ldw	r2,-76(fp)
  80cc34:	1005003a 	cmpeq	r2,r2,zero
  80cc38:	1000101e 	bne	r2,zero,80cc7c <pollIMU+0x6d4>
  80cc3c:	e0bfed17 	ldw	r2,-76(fp)
  80cc40:	108000e0 	cmpeqi	r2,r2,3
  80cc44:	10000d1e 	bne	r2,zero,80cc7c <pollIMU+0x6d4>
			drum1_index -= 1;
  80cc48:	e0bfed17 	ldw	r2,-76(fp)
  80cc4c:	10bfffc4 	addi	r2,r2,-1
  80cc50:	e0bfed15 	stw	r2,-76(fp)
			gz_hit_flag_1 = 1;
  80cc54:	00800044 	movi	r2,1
  80cc58:	e0bfef15 	stw	r2,-68(fp)
  80cc5c:	00000706 	br	80cc7c <pollIMU+0x6d4>
		}
	}
	else if (gz > 30){
  80cc60:	e13fdc17 	ldw	r4,-144(fp)
  80cc64:	01507c34 	movhi	r5,16880
  80cc68:	080fe900 	call	80fe90 <__gtsf2>
  80cc6c:	10800048 	cmpgei	r2,r2,1
  80cc70:	1000011e 	bne	r2,zero,80cc78 <pollIMU+0x6d0>
  80cc74:	00000106 	br	80cc7c <pollIMU+0x6d4>
		gz_hit_flag_1 = 0;
  80cc78:	e03fef15 	stw	zero,-68(fp)
	}

	// Vertical shift tracking
	if(gy < -70){
  80cc7c:	e13fdd17 	ldw	r4,-140(fp)
  80cc80:	0170a334 	movhi	r5,49804
  80cc84:	080ff080 	call	80ff08 <__ltsf2>
  80cc88:	1004803a 	cmplt	r2,r2,zero
  80cc8c:	1000011e 	bne	r2,zero,80cc94 <pollIMU+0x6ec>
  80cc90:	00000406 	br	80cca4 <pollIMU+0x6fc>
		drum1_gy_count_up++;
  80cc94:	e0bfec17 	ldw	r2,-80(fp)
  80cc98:	10800044 	addi	r2,r2,1
  80cc9c:	e0bfec15 	stw	r2,-80(fp)
  80cca0:	00000106 	br	80cca8 <pollIMU+0x700>
	}
	else{
		drum1_gy_count_up = 0;
  80cca4:	e03fec15 	stw	zero,-80(fp)
	}

	if(gy > 50){
  80cca8:	e13fdd17 	ldw	r4,-140(fp)
  80ccac:	01509234 	movhi	r5,16968
  80ccb0:	080fe900 	call	80fe90 <__gtsf2>
  80ccb4:	10800048 	cmpgei	r2,r2,1
  80ccb8:	1000011e 	bne	r2,zero,80ccc0 <pollIMU+0x718>
  80ccbc:	00000406 	br	80ccd0 <pollIMU+0x728>
		drum1_gy_count_down++;
  80ccc0:	e0bfeb17 	ldw	r2,-84(fp)
  80ccc4:	10800044 	addi	r2,r2,1
  80ccc8:	e0bfeb15 	stw	r2,-84(fp)
  80cccc:	00000106 	br	80ccd4 <pollIMU+0x72c>
	}
	else{
		drum1_gy_count_down = 0;
  80ccd0:	e03feb15 	stw	zero,-84(fp)
	}

	if(drum1_gy_count_up > 14 && drum1_index < 3 ){
  80ccd4:	e0bfec17 	ldw	r2,-80(fp)
  80ccd8:	108003d0 	cmplti	r2,r2,15
  80ccdc:	1000061e 	bne	r2,zero,80ccf8 <pollIMU+0x750>
  80cce0:	e0bfed17 	ldw	r2,-76(fp)
  80cce4:	108000c8 	cmpgei	r2,r2,3
  80cce8:	1000031e 	bne	r2,zero,80ccf8 <pollIMU+0x750>
		drum1_index += 3;
  80ccec:	e0bfed17 	ldw	r2,-76(fp)
  80ccf0:	108000c4 	addi	r2,r2,3
  80ccf4:	e0bfed15 	stw	r2,-76(fp)
	}
	if(drum1_gy_count_down > 13 && drum1_index > 2){
  80ccf8:	e0bfeb17 	ldw	r2,-84(fp)
  80ccfc:	10800390 	cmplti	r2,r2,14
  80cd00:	1000061e 	bne	r2,zero,80cd1c <pollIMU+0x774>
  80cd04:	e0bfed17 	ldw	r2,-76(fp)
  80cd08:	108000d0 	cmplti	r2,r2,3
  80cd0c:	1000031e 	bne	r2,zero,80cd1c <pollIMU+0x774>
		drum1_index -= 3;
  80cd10:	e0bfed17 	ldw	r2,-76(fp)
  80cd14:	10bfff44 	addi	r2,r2,-3
  80cd18:	e0bfed15 	stw	r2,-76(fp)
	}

	// Hits
	if((((az - d1_az_old)*1000) < -1000)){
  80cd1c:	e13fdf17 	ldw	r4,-132(fp)
  80cd20:	e17fdb17 	ldw	r5,-148(fp)
  80cd24:	080fa680 	call	80fa68 <__subsf3>
  80cd28:	1009883a 	mov	r4,r2
  80cd2c:	01511eb4 	movhi	r5,17530
  80cd30:	080fb3c0 	call	80fb3c <__mulsf3>
  80cd34:	1009883a 	mov	r4,r2
  80cd38:	01711eb4 	movhi	r5,50298
  80cd3c:	080ff080 	call	80ff08 <__ltsf2>
  80cd40:	1004803a 	cmplt	r2,r2,zero
  80cd44:	1000011e 	bne	r2,zero,80cd4c <pollIMU+0x7a4>
  80cd48:	00000806 	br	80cd6c <pollIMU+0x7c4>
		if(!hit_flag_1){
  80cd4c:	e0bff017 	ldw	r2,-64(fp)
  80cd50:	1004c03a 	cmpne	r2,r2,zero
  80cd54:	1000121e 	bne	r2,zero,80cda0 <pollIMU+0x7f8>
			//printf("Hit One: Position %d\n", drum1_index);
			hit_flag_1 = 1;
  80cd58:	00800044 	movi	r2,1
  80cd5c:	e0bff015 	stw	r2,-64(fp)
			setDrum(drum1_index);
  80cd60:	e13fed17 	ldw	r4,-76(fp)
  80cd64:	0802bc80 	call	802bc8 <setDrum>
  80cd68:	00000d06 	br	80cda0 <pollIMU+0x7f8>
		}
	}
	else if ((((az - d1_az_old)*1000) > 1000)){
  80cd6c:	e13fdf17 	ldw	r4,-132(fp)
  80cd70:	e17fdb17 	ldw	r5,-148(fp)
  80cd74:	080fa680 	call	80fa68 <__subsf3>
  80cd78:	1009883a 	mov	r4,r2
  80cd7c:	01511eb4 	movhi	r5,17530
  80cd80:	080fb3c0 	call	80fb3c <__mulsf3>
  80cd84:	1009883a 	mov	r4,r2
  80cd88:	01511eb4 	movhi	r5,17530
  80cd8c:	080fe900 	call	80fe90 <__gtsf2>
  80cd90:	10800048 	cmpgei	r2,r2,1
  80cd94:	1000011e 	bne	r2,zero,80cd9c <pollIMU+0x7f4>
  80cd98:	00000106 	br	80cda0 <pollIMU+0x7f8>
		hit_flag_1 = 0;
  80cd9c:	e03ff015 	stw	zero,-64(fp)
	}
	d1_az_old =az;
  80cda0:	e0bfdf17 	ldw	r2,-132(fp)
  80cda4:	e0bfdb15 	stw	r2,-148(fp)

	// ************************ DRUMSTICK #2 **********************************
	// Read the x/y/z accelerometer values
	readAccelData(accelCount, I2C_SCL_2_BASE, I2C_SDA_2_BASE);
  80cda8:	e13ffc04 	addi	r4,fp,-16
  80cdac:	01406474 	movhi	r5,401
  80cdb0:	29641c04 	addi	r5,r5,-28560
  80cdb4:	01806474 	movhi	r6,401
  80cdb8:	31a42004 	addi	r6,r6,-28544
  80cdbc:	08000a00 	call	8000a0 <readAccelData>
	 // Read the x/y/z gyroscope values
	readGyroData(gyroCount, I2C_SCL_2_BASE, I2C_SDA_2_BASE);
  80cdc0:	e13ffd84 	addi	r4,fp,-10
  80cdc4:	01406474 	movhi	r5,401
  80cdc8:	29641c04 	addi	r5,r5,-28560
  80cdcc:	01806474 	movhi	r6,401
  80cdd0:	31a42004 	addi	r6,r6,-28544
  80cdd4:	08001a00 	call	8001a0 <readGyroData>

	// Calculating the acceleration values into actual g's
	// Depends on scale being set
	ax = (float)accelCount[0]*aRes;
  80cdd8:	e0bffc0b 	ldhu	r2,-16(fp)
  80cddc:	113fffcc 	andi	r4,r2,65535
  80cde0:	2120001c 	xori	r4,r4,32768
  80cde4:	21200004 	addi	r4,r4,-32768
  80cde8:	080ff800 	call	80ff80 <__floatsisf>
  80cdec:	e0fffa17 	ldw	r3,-24(fp)
  80cdf0:	1009883a 	mov	r4,r2
  80cdf4:	180b883a 	mov	r5,r3
  80cdf8:	080fb3c0 	call	80fb3c <__mulsf3>
  80cdfc:	e0bfe115 	stw	r2,-124(fp)
	ay = (float)accelCount[1]*aRes;
  80ce00:	e0bffc8b 	ldhu	r2,-14(fp)
  80ce04:	113fffcc 	andi	r4,r2,65535
  80ce08:	2120001c 	xori	r4,r4,32768
  80ce0c:	21200004 	addi	r4,r4,-32768
  80ce10:	080ff800 	call	80ff80 <__floatsisf>
  80ce14:	e0fffa17 	ldw	r3,-24(fp)
  80ce18:	1009883a 	mov	r4,r2
  80ce1c:	180b883a 	mov	r5,r3
  80ce20:	080fb3c0 	call	80fb3c <__mulsf3>
  80ce24:	e0bfe015 	stw	r2,-128(fp)
	az = (float)accelCount[2]*aRes;
  80ce28:	e0bffd0b 	ldhu	r2,-12(fp)
  80ce2c:	113fffcc 	andi	r4,r2,65535
  80ce30:	2120001c 	xori	r4,r4,32768
  80ce34:	21200004 	addi	r4,r4,-32768
  80ce38:	080ff800 	call	80ff80 <__floatsisf>
  80ce3c:	e0fffa17 	ldw	r3,-24(fp)
  80ce40:	1009883a 	mov	r4,r2
  80ce44:	180b883a 	mov	r5,r3
  80ce48:	080fb3c0 	call	80fb3c <__mulsf3>
  80ce4c:	e0bfdf15 	stw	r2,-132(fp)

	// Calculating the gyro values into actual degrees per second
	// Depends on scale being set
	gx = (float)gyroCount[0]*gRes;
  80ce50:	e0bffd8b 	ldhu	r2,-10(fp)
  80ce54:	113fffcc 	andi	r4,r2,65535
  80ce58:	2120001c 	xori	r4,r4,32768
  80ce5c:	21200004 	addi	r4,r4,-32768
  80ce60:	080ff800 	call	80ff80 <__floatsisf>
  80ce64:	e0fffb17 	ldw	r3,-20(fp)
  80ce68:	1009883a 	mov	r4,r2
  80ce6c:	180b883a 	mov	r5,r3
  80ce70:	080fb3c0 	call	80fb3c <__mulsf3>
  80ce74:	e0bfde15 	stw	r2,-136(fp)
	gy = (float)gyroCount[1]*gRes;
  80ce78:	e0bffe0b 	ldhu	r2,-8(fp)
  80ce7c:	113fffcc 	andi	r4,r2,65535
  80ce80:	2120001c 	xori	r4,r4,32768
  80ce84:	21200004 	addi	r4,r4,-32768
  80ce88:	080ff800 	call	80ff80 <__floatsisf>
  80ce8c:	e0fffb17 	ldw	r3,-20(fp)
  80ce90:	1009883a 	mov	r4,r2
  80ce94:	180b883a 	mov	r5,r3
  80ce98:	080fb3c0 	call	80fb3c <__mulsf3>
  80ce9c:	e0bfdd15 	stw	r2,-140(fp)
	gz = (float)gyroCount[2]*gRes;
  80cea0:	e0bffe8b 	ldhu	r2,-6(fp)
  80cea4:	113fffcc 	andi	r4,r2,65535
  80cea8:	2120001c 	xori	r4,r4,32768
  80ceac:	21200004 	addi	r4,r4,-32768
  80ceb0:	080ff800 	call	80ff80 <__floatsisf>
  80ceb4:	e0fffb17 	ldw	r3,-20(fp)
  80ceb8:	1009883a 	mov	r4,r2
  80cebc:	180b883a 	mov	r5,r3
  80cec0:	080fb3c0 	call	80fb3c <__mulsf3>
  80cec4:	e0bfdc15 	stw	r2,-144(fp)

	// Horizontal Tracking
	if((gz) < -200){
  80cec8:	e13fdc17 	ldw	r4,-144(fp)
  80cecc:	0170d234 	movhi	r5,49992
  80ced0:	080ff080 	call	80ff08 <__ltsf2>
  80ced4:	1004803a 	cmplt	r2,r2,zero
  80ced8:	1000011e 	bne	r2,zero,80cee0 <pollIMU+0x938>
  80cedc:	00000f06 	br	80cf1c <pollIMU+0x974>
		if(!gz_hit_flag_2 && drum2_index != 2 && drum2_index != 5){
  80cee0:	e0bfe917 	ldw	r2,-92(fp)
  80cee4:	1004c03a 	cmpne	r2,r2,zero
  80cee8:	1000131e 	bne	r2,zero,80cf38 <pollIMU+0x990>
  80ceec:	e0bfe717 	ldw	r2,-100(fp)
  80cef0:	108000a0 	cmpeqi	r2,r2,2
  80cef4:	1000101e 	bne	r2,zero,80cf38 <pollIMU+0x990>
  80cef8:	e0bfe717 	ldw	r2,-100(fp)
  80cefc:	10800160 	cmpeqi	r2,r2,5
  80cf00:	10000d1e 	bne	r2,zero,80cf38 <pollIMU+0x990>
			drum2_index += 1;
  80cf04:	e0bfe717 	ldw	r2,-100(fp)
  80cf08:	10800044 	addi	r2,r2,1
  80cf0c:	e0bfe715 	stw	r2,-100(fp)
			gz_hit_flag_2 = 1;
  80cf10:	00800044 	movi	r2,1
  80cf14:	e0bfe915 	stw	r2,-92(fp)
  80cf18:	00000706 	br	80cf38 <pollIMU+0x990>
		}
	}
	else if (gz < 30){
  80cf1c:	e13fdc17 	ldw	r4,-144(fp)
  80cf20:	01507c34 	movhi	r5,16880
  80cf24:	080ff080 	call	80ff08 <__ltsf2>
  80cf28:	1004803a 	cmplt	r2,r2,zero
  80cf2c:	1000011e 	bne	r2,zero,80cf34 <pollIMU+0x98c>
  80cf30:	00000106 	br	80cf38 <pollIMU+0x990>
		gz_hit_flag_2 = 0;
  80cf34:	e03fe915 	stw	zero,-92(fp)
	}

	if((gz) > 200){
  80cf38:	e13fdc17 	ldw	r4,-144(fp)
  80cf3c:	0150d234 	movhi	r5,17224
  80cf40:	080fe900 	call	80fe90 <__gtsf2>
  80cf44:	10800048 	cmpgei	r2,r2,1
  80cf48:	1000011e 	bne	r2,zero,80cf50 <pollIMU+0x9a8>
  80cf4c:	00000f06 	br	80cf8c <pollIMU+0x9e4>
		if(!gz_hit_flag_2 && drum2_index != 0 && drum2_index != 3){
  80cf50:	e0bfe917 	ldw	r2,-92(fp)
  80cf54:	1004c03a 	cmpne	r2,r2,zero
  80cf58:	1000131e 	bne	r2,zero,80cfa8 <pollIMU+0xa00>
  80cf5c:	e0bfe717 	ldw	r2,-100(fp)
  80cf60:	1005003a 	cmpeq	r2,r2,zero
  80cf64:	1000101e 	bne	r2,zero,80cfa8 <pollIMU+0xa00>
  80cf68:	e0bfe717 	ldw	r2,-100(fp)
  80cf6c:	108000e0 	cmpeqi	r2,r2,3
  80cf70:	10000d1e 	bne	r2,zero,80cfa8 <pollIMU+0xa00>
			drum2_index -= 1;
  80cf74:	e0bfe717 	ldw	r2,-100(fp)
  80cf78:	10bfffc4 	addi	r2,r2,-1
  80cf7c:	e0bfe715 	stw	r2,-100(fp)
			gz_hit_flag_2 = 1;
  80cf80:	00800044 	movi	r2,1
  80cf84:	e0bfe915 	stw	r2,-92(fp)
  80cf88:	00000706 	br	80cfa8 <pollIMU+0xa00>
		}
	}
	else if (gz > 30){
  80cf8c:	e13fdc17 	ldw	r4,-144(fp)
  80cf90:	01507c34 	movhi	r5,16880
  80cf94:	080fe900 	call	80fe90 <__gtsf2>
  80cf98:	10800048 	cmpgei	r2,r2,1
  80cf9c:	1000011e 	bne	r2,zero,80cfa4 <pollIMU+0x9fc>
  80cfa0:	00000106 	br	80cfa8 <pollIMU+0xa00>
		gz_hit_flag_2 = 0;
  80cfa4:	e03fe915 	stw	zero,-92(fp)
	}

	// Vertical shift tracking
	if(gy < -70){
  80cfa8:	e13fdd17 	ldw	r4,-140(fp)
  80cfac:	0170a334 	movhi	r5,49804
  80cfb0:	080ff080 	call	80ff08 <__ltsf2>
  80cfb4:	1004803a 	cmplt	r2,r2,zero
  80cfb8:	1000011e 	bne	r2,zero,80cfc0 <pollIMU+0xa18>
  80cfbc:	00000406 	br	80cfd0 <pollIMU+0xa28>
		drum2_gy_count_up++;
  80cfc0:	e0bfe617 	ldw	r2,-104(fp)
  80cfc4:	10800044 	addi	r2,r2,1
  80cfc8:	e0bfe615 	stw	r2,-104(fp)
  80cfcc:	00000106 	br	80cfd4 <pollIMU+0xa2c>
	}
	else{
		drum2_gy_count_up = 0;
  80cfd0:	e03fe615 	stw	zero,-104(fp)
	}

	if(gy > 50){
  80cfd4:	e13fdd17 	ldw	r4,-140(fp)
  80cfd8:	01509234 	movhi	r5,16968
  80cfdc:	080fe900 	call	80fe90 <__gtsf2>
  80cfe0:	10800048 	cmpgei	r2,r2,1
  80cfe4:	1000011e 	bne	r2,zero,80cfec <pollIMU+0xa44>
  80cfe8:	00000406 	br	80cffc <pollIMU+0xa54>
		drum2_gy_count_down++;
  80cfec:	e0bfe517 	ldw	r2,-108(fp)
  80cff0:	10800044 	addi	r2,r2,1
  80cff4:	e0bfe515 	stw	r2,-108(fp)
  80cff8:	00000106 	br	80d000 <pollIMU+0xa58>
	}
	else{
		drum2_gy_count_down = 0;
  80cffc:	e03fe515 	stw	zero,-108(fp)
	}

	if(drum2_gy_count_up > 14 && drum2_index < 3 ){
  80d000:	e0bfe617 	ldw	r2,-104(fp)
  80d004:	108003d0 	cmplti	r2,r2,15
  80d008:	1000061e 	bne	r2,zero,80d024 <pollIMU+0xa7c>
  80d00c:	e0bfe717 	ldw	r2,-100(fp)
  80d010:	108000c8 	cmpgei	r2,r2,3
  80d014:	1000031e 	bne	r2,zero,80d024 <pollIMU+0xa7c>
		drum2_index += 3;
  80d018:	e0bfe717 	ldw	r2,-100(fp)
  80d01c:	108000c4 	addi	r2,r2,3
  80d020:	e0bfe715 	stw	r2,-100(fp)
	}
	if(drum2_gy_count_down > 13 && drum2_index > 2){
  80d024:	e0bfe517 	ldw	r2,-108(fp)
  80d028:	10800390 	cmplti	r2,r2,14
  80d02c:	1000061e 	bne	r2,zero,80d048 <pollIMU+0xaa0>
  80d030:	e0bfe717 	ldw	r2,-100(fp)
  80d034:	108000d0 	cmplti	r2,r2,3
  80d038:	1000031e 	bne	r2,zero,80d048 <pollIMU+0xaa0>
		drum2_index -= 3;
  80d03c:	e0bfe717 	ldw	r2,-100(fp)
  80d040:	10bfff44 	addi	r2,r2,-3
  80d044:	e0bfe715 	stw	r2,-100(fp)
	}

	// Hits
	if((((az - d2_az_old)*1000) < -1000)){
  80d048:	e13fdf17 	ldw	r4,-132(fp)
  80d04c:	e17fda17 	ldw	r5,-152(fp)
  80d050:	080fa680 	call	80fa68 <__subsf3>
  80d054:	1009883a 	mov	r4,r2
  80d058:	01511eb4 	movhi	r5,17530
  80d05c:	080fb3c0 	call	80fb3c <__mulsf3>
  80d060:	1009883a 	mov	r4,r2
  80d064:	01711eb4 	movhi	r5,50298
  80d068:	080ff080 	call	80ff08 <__ltsf2>
  80d06c:	1004803a 	cmplt	r2,r2,zero
  80d070:	1000011e 	bne	r2,zero,80d078 <pollIMU+0xad0>
  80d074:	00000806 	br	80d098 <pollIMU+0xaf0>
		if(!hit_flag_2){
  80d078:	e0bfea17 	ldw	r2,-88(fp)
  80d07c:	1004c03a 	cmpne	r2,r2,zero
  80d080:	1000121e 	bne	r2,zero,80d0cc <pollIMU+0xb24>
			//printf("Hit two: Position %d\n", drum2_index);
			hit_flag_2 = 1;
  80d084:	00800044 	movi	r2,1
  80d088:	e0bfea15 	stw	r2,-88(fp)
			setDrum(drum2_index);
  80d08c:	e13fe717 	ldw	r4,-100(fp)
  80d090:	0802bc80 	call	802bc8 <setDrum>
  80d094:	00000d06 	br	80d0cc <pollIMU+0xb24>
		}
	}
	else if ((((az - d2_az_old)*1000) > 1000)){
  80d098:	e13fdf17 	ldw	r4,-132(fp)
  80d09c:	e17fda17 	ldw	r5,-152(fp)
  80d0a0:	080fa680 	call	80fa68 <__subsf3>
  80d0a4:	1009883a 	mov	r4,r2
  80d0a8:	01511eb4 	movhi	r5,17530
  80d0ac:	080fb3c0 	call	80fb3c <__mulsf3>
  80d0b0:	1009883a 	mov	r4,r2
  80d0b4:	01511eb4 	movhi	r5,17530
  80d0b8:	080fe900 	call	80fe90 <__gtsf2>
  80d0bc:	10800048 	cmpgei	r2,r2,1
  80d0c0:	1000011e 	bne	r2,zero,80d0c8 <pollIMU+0xb20>
  80d0c4:	00000106 	br	80d0cc <pollIMU+0xb24>
		hit_flag_2 = 0;
  80d0c8:	e03fea15 	stw	zero,-88(fp)
	}
	d2_az_old =az;
  80d0cc:	e0bfdf17 	ldw	r2,-132(fp)
  80d0d0:	e0bfda15 	stw	r2,-152(fp)
//		}
//		//alt_up_audio_enable_write_interrupt(audio_dev);
//		sem = 1;
//	}
//	alt_up_audio_enable_write_interrupt(audio_dev);
	OSTimeDlyHMSM(0, 0, 0, 1);
  80d0d4:	0009883a 	mov	r4,zero
  80d0d8:	000b883a 	mov	r5,zero
  80d0dc:	000d883a 	mov	r6,zero
  80d0e0:	01c00044 	movi	r7,1
  80d0e4:	08236940 	call	823694 <OSTimeDlyHMSM>
  }
  80d0e8:	003e6206 	br	80ca74 <pollIMU+0x4cc>

0080d0ec <main>:


#include "DrumAnyWhere.h"


int main(void) {
  80d0ec:	defd8b04 	addi	sp,sp,-2516
  80d0f0:	dfc27415 	stw	ra,2512(sp)
  80d0f4:	df027315 	stw	fp,2508(sp)
  80d0f8:	dc027215 	stw	r16,2504(sp)
  80d0fc:	df027204 	addi	fp,sp,2504
	EmbeddedFileSystem efsl;
	File readFile;

	// needed objects for software init
	alt_up_av_config_dev * audio_config_dev;
	audio_config_dev = alt_up_av_config_open_dev("/dev/audio_and_video_config_0");
  80d100:	010020b4 	movhi	r4,130
  80d104:	211f4a04 	addi	r4,r4,32040
  80d108:	08252380 	call	825238 <alt_up_av_config_open_dev>
  80d10c:	e0bd9b15 	stw	r2,-2452(fp)
	myLCD = alt_up_character_lcd_open_dev(CHARACTER_LCD_0_NAME);
  80d110:	010020b4 	movhi	r4,130
  80d114:	211f5204 	addi	r4,r4,32072
  80d118:	0825aa40 	call	825aa4 <alt_up_character_lcd_open_dev>
  80d11c:	d0a03515 	stw	r2,-32556(gp)
	alt_up_character_lcd_init(myLCD);
  80d120:	d1203517 	ldw	r4,-32556(gp)
  80d124:	0825a700 	call	825a70 <alt_up_character_lcd_init>

	// Drum Sounds filenames
	char *fileNames[7];
	fileNames[snareConst] = "snare2.wav";
  80d128:	008020b4 	movhi	r2,130
  80d12c:	109f5804 	addi	r2,r2,32096
  80d130:	e0bff915 	stw	r2,-28(fp)
	fileNames[crashConst] = "crash.wav";
  80d134:	008020b4 	movhi	r2,130
  80d138:	109f5b04 	addi	r2,r2,32108
  80d13c:	e0bffa15 	stw	r2,-24(fp)
	fileNames[hihatConst] = "hihat.wav";
  80d140:	008020b4 	movhi	r2,130
  80d144:	109f5e04 	addi	r2,r2,32120
  80d148:	e0bffb15 	stw	r2,-20(fp)
	fileNames[hihat2Const] = "hithat2.wav";
  80d14c:	008020b4 	movhi	r2,130
  80d150:	109f6104 	addi	r2,r2,32132
  80d154:	e0bffc15 	stw	r2,-16(fp)
	fileNames[kickConst] = "kick.wav";
  80d158:	008020b4 	movhi	r2,130
  80d15c:	109f6404 	addi	r2,r2,32144
  80d160:	e0bffd15 	stw	r2,-12(fp)
	fileNames[tomConst] = "tom.wav";
  80d164:	008020b4 	movhi	r2,130
  80d168:	109f6704 	addi	r2,r2,32156
  80d16c:	e0bffe15 	stw	r2,-8(fp)
	fileNames[tom2Const] = "tom2.wav";
  80d170:	008020b4 	movhi	r2,130
  80d174:	109f6904 	addi	r2,r2,32164
  80d178:	e0bfff15 	stw	r2,-4(fp)
	int i;
	for (i = 0; i < numDrums; i++) {
  80d17c:	e03d9a15 	stw	zero,-2456(fp)
  80d180:	00000a06 	br	80d1ac <main+0xc0>
		isPlaying[i] = 0;
  80d184:	e0bd9a17 	ldw	r2,-2456(fp)
  80d188:	00c020f4 	movhi	r3,131
  80d18c:	18e9fe04 	addi	r3,r3,-22536
  80d190:	1085883a 	add	r2,r2,r2
  80d194:	1085883a 	add	r2,r2,r2
  80d198:	10c5883a 	add	r2,r2,r3
  80d19c:	10000015 	stw	zero,0(r2)
	fileNames[hihat2Const] = "hithat2.wav";
	fileNames[kickConst] = "kick.wav";
	fileNames[tomConst] = "tom.wav";
	fileNames[tom2Const] = "tom2.wav";
	int i;
	for (i = 0; i < numDrums; i++) {
  80d1a0:	e0bd9a17 	ldw	r2,-2456(fp)
  80d1a4:	10800044 	addi	r2,r2,1
  80d1a8:	e0bd9a15 	stw	r2,-2456(fp)
  80d1ac:	e0bd9a17 	ldw	r2,-2456(fp)
  80d1b0:	108001d0 	cmplti	r2,r2,7
  80d1b4:	103ff31e 	bne	r2,zero,80d184 <main+0x98>
		isPlaying[i] = 0;
	}

	// arrays for reading all data from sd card
	euint8* snareTemp = malloc(snareSize * sizeof(eint8));
  80d1b8:	011c6b84 	movi	r4,29102
  80d1bc:	0811b300 	call	811b30 <malloc>
  80d1c0:	e0bd9915 	stw	r2,-2460(fp)
	euint8* crashTemp = malloc(crashSize * sizeof(eint8));
  80d1c4:	01000134 	movhi	r4,4
  80d1c8:	21377904 	addi	r4,r4,-8732
  80d1cc:	0811b300 	call	811b30 <malloc>
  80d1d0:	e0bd9815 	stw	r2,-2464(fp)
	euint8* hihatTemp = malloc(hihatSize * sizeof(eint8));
  80d1d4:	010001b4 	movhi	r4,6
  80d1d8:	213fb504 	addi	r4,r4,-300
  80d1dc:	0811b300 	call	811b30 <malloc>
  80d1e0:	e0bd9715 	stw	r2,-2468(fp)
	euint8* hihat2Temp  = malloc(hihat2Size * sizeof(eint8));
  80d1e4:	0118b404 	movi	r4,25296
  80d1e8:	0811b300 	call	811b30 <malloc>
  80d1ec:	e0bd9615 	stw	r2,-2472(fp)
	euint8* kickTemp = malloc(kickSize * sizeof(eint8));
  80d1f0:	01000074 	movhi	r4,1
  80d1f4:	2116f784 	addi	r4,r4,23518
  80d1f8:	0811b300 	call	811b30 <malloc>
  80d1fc:	e0bd9515 	stw	r2,-2476(fp)
	euint8* tomTemp = malloc(tomSize * sizeof(eint8));
  80d200:	010000f4 	movhi	r4,3
  80d204:	211ed684 	addi	r4,r4,31578
  80d208:	0811b300 	call	811b30 <malloc>
  80d20c:	e0bd9415 	stw	r2,-2480(fp)
	euint8* tom2Temp = malloc(tom2Size * sizeof(eint8));
  80d210:	010000f4 	movhi	r4,3
  80d214:	21305904 	addi	r4,r4,-16028
  80d218:	0811b300 	call	811b30 <malloc>
  80d21c:	e0bd9315 	stw	r2,-2484(fp)

	// init lcd
	alt_up_character_lcd_init(myLCD);
  80d220:	d1203517 	ldw	r4,-32556(gp)
  80d224:	0825a700 	call	825a70 <alt_up_character_lcd_init>
	alt_up_character_lcd_set_cursor_pos(myLCD, 0, 1);
  80d228:	d1203517 	ldw	r4,-32556(gp)
  80d22c:	000b883a 	mov	r5,zero
  80d230:	01800044 	movi	r6,1
  80d234:	0825c200 	call	825c20 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string(myLCD, "Loading Sounds");
  80d238:	d1203517 	ldw	r4,-32556(gp)
  80d23c:	014020b4 	movhi	r5,130
  80d240:	295f6c04 	addi	r5,r5,32176
  80d244:	0825b5c0 	call	825b5c <alt_up_character_lcd_string>

	// init spi interface
	sdInit(&efsl, &readFile);
  80d248:	e13d9c04 	addi	r4,fp,-2448
  80d24c:	e17fe504 	addi	r5,fp,-108
  80d250:	080d6e00 	call	80d6e0 <sdInit>

	// read files from sd card
	snareTemp = sdRead(fileNames[snareConst], &efsl, &readFile);
  80d254:	e13ff917 	ldw	r4,-28(fp)
  80d258:	e17d9c04 	addi	r5,fp,-2448
  80d25c:	e1bfe504 	addi	r6,fp,-108
  80d260:	080d7600 	call	80d760 <sdRead>
  80d264:	e0bd9915 	stw	r2,-2460(fp)
	crashTemp = sdRead(fileNames[crashConst], &efsl, &readFile);
  80d268:	e13ffa17 	ldw	r4,-24(fp)
  80d26c:	e17d9c04 	addi	r5,fp,-2448
  80d270:	e1bfe504 	addi	r6,fp,-108
  80d274:	080d7600 	call	80d760 <sdRead>
  80d278:	e0bd9815 	stw	r2,-2464(fp)
	hihatTemp = sdRead(fileNames[hihatConst], &efsl, &readFile);
  80d27c:	e13ffb17 	ldw	r4,-20(fp)
  80d280:	e17d9c04 	addi	r5,fp,-2448
  80d284:	e1bfe504 	addi	r6,fp,-108
  80d288:	080d7600 	call	80d760 <sdRead>
  80d28c:	e0bd9715 	stw	r2,-2468(fp)
	hihat2Temp = sdRead(fileNames[hihat2Const], &efsl, &readFile);
  80d290:	e13ffc17 	ldw	r4,-16(fp)
  80d294:	e17d9c04 	addi	r5,fp,-2448
  80d298:	e1bfe504 	addi	r6,fp,-108
  80d29c:	080d7600 	call	80d760 <sdRead>
  80d2a0:	e0bd9615 	stw	r2,-2472(fp)
	kickTemp = sdRead(fileNames[kickConst], &efsl, &readFile);
  80d2a4:	e13ffd17 	ldw	r4,-12(fp)
  80d2a8:	e17d9c04 	addi	r5,fp,-2448
  80d2ac:	e1bfe504 	addi	r6,fp,-108
  80d2b0:	080d7600 	call	80d760 <sdRead>
  80d2b4:	e0bd9515 	stw	r2,-2476(fp)
	tomTemp = sdRead(fileNames[tomConst], &efsl, &readFile);
  80d2b8:	e13ffe17 	ldw	r4,-8(fp)
  80d2bc:	e17d9c04 	addi	r5,fp,-2448
  80d2c0:	e1bfe504 	addi	r6,fp,-108
  80d2c4:	080d7600 	call	80d760 <sdRead>
  80d2c8:	e0bd9415 	stw	r2,-2480(fp)
	tom2Temp = sdRead(fileNames[tom2Const], &efsl, &readFile);
  80d2cc:	e13fff17 	ldw	r4,-4(fp)
  80d2d0:	e17d9c04 	addi	r5,fp,-2448
  80d2d4:	e1bfe504 	addi	r6,fp,-108
  80d2d8:	080d7600 	call	80d760 <sdRead>
  80d2dc:	e0bd9315 	stw	r2,-2484(fp)


	// parse the actual data from the .wav files
	parseWav(snareTemp, snareNumberSamples, snare);
  80d2e0:	e13d9917 	ldw	r4,-2460(fp)
  80d2e4:	014710c4 	movi	r5,7235
  80d2e8:	01802374 	movhi	r6,141
  80d2ec:	318ee504 	addi	r6,r6,15252
  80d2f0:	080d8880 	call	80d888 <parseWav>
	parseWav(crashTemp, crashNumberSamples, crash);
  80d2f4:	e13d9817 	ldw	r4,-2464(fp)
  80d2f8:	017ddb94 	movui	r5,63342
  80d2fc:	01802274 	movhi	r6,137
  80d300:	318f7004 	addi	r6,r6,15808
  80d304:	080d8880 	call	80d888 <parseWav>
	parseWav(hihatTemp, hihatNumberSamples, hihat);
  80d308:	e13d9717 	ldw	r4,-2468(fp)
  80d30c:	01400074 	movhi	r5,1
  80d310:	295fea84 	addi	r5,r5,32682
  80d314:	018023b4 	movhi	r6,142
  80d318:	31ab2804 	addi	r6,r6,-21344
  80d31c:	080d8880 	call	80d888 <parseWav>
	parseWav(hihat2Temp, hihat2NumberSamples, hihat2);
  80d320:	e13d9617 	ldw	r4,-2472(fp)
  80d324:	01462a44 	movi	r5,6313
  80d328:	01802274 	movhi	r6,137
  80d32c:	31b6c704 	addi	r6,r6,-9444
  80d330:	080d8880 	call	80d888 <parseWav>
	parseWav(kickTemp, kickNumberSamples, kick);
  80d334:	e13d9517 	ldw	r4,-2476(fp)
  80d338:	0144e204 	movi	r5,5000
  80d33c:	01802174 	movhi	r6,133
  80d340:	31848104 	addi	r6,r6,4612
  80d344:	080d8880 	call	80d888 <parseWav>
	parseWav(tomTemp, tomNumberSamples, tom);
  80d348:	e13d9417 	ldw	r4,-2480(fp)
  80d34c:	0177ab94 	movui	r5,57006
  80d350:	01802174 	movhi	r6,133
  80d354:	31981904 	addi	r6,r6,24676
  80d358:	080d8880 	call	80d888 <parseWav>
	parseWav(tom2Temp, tom2NumberSamples, tom2);
  80d35c:	e13d9317 	ldw	r4,-2484(fp)
  80d360:	01649f14 	movui	r5,37500
  80d364:	018020f4 	movhi	r6,131
  80d368:	31b20504 	addi	r6,r6,-14316
  80d36c:	080d8880 	call	80d888 <parseWav>


	// init structs for waveform info
	for(i = 0; i < 7; i++) {
  80d370:	e03d9a15 	stw	zero,-2456(fp)
  80d374:	00001806 	br	80d3d8 <main+0x2ec>
		drums[i] = malloc(sizeof(Drum));
  80d378:	e43d9a17 	ldw	r16,-2456(fp)
  80d37c:	01000404 	movi	r4,16
  80d380:	0811b300 	call	811b30 <malloc>
  80d384:	1009883a 	mov	r4,r2
  80d388:	00c02374 	movhi	r3,141
  80d38c:	18cede04 	addi	r3,r3,15224
  80d390:	8405883a 	add	r2,r16,r16
  80d394:	1085883a 	add	r2,r2,r2
  80d398:	10c5883a 	add	r2,r2,r3
  80d39c:	11000015 	stw	r4,0(r2)
		drums[i]->waveform = malloc(hihatNumberSamples * sizeof(unsigned int));
  80d3a0:	e0bd9a17 	ldw	r2,-2456(fp)
  80d3a4:	00c02374 	movhi	r3,141
  80d3a8:	18cede04 	addi	r3,r3,15224
  80d3ac:	1085883a 	add	r2,r2,r2
  80d3b0:	1085883a 	add	r2,r2,r2
  80d3b4:	10c5883a 	add	r2,r2,r3
  80d3b8:	14000017 	ldw	r16,0(r2)
  80d3bc:	010001b4 	movhi	r4,6
  80d3c0:	213faa04 	addi	r4,r4,-344
  80d3c4:	0811b300 	call	811b30 <malloc>
  80d3c8:	80800015 	stw	r2,0(r16)
	parseWav(tomTemp, tomNumberSamples, tom);
	parseWav(tom2Temp, tom2NumberSamples, tom2);


	// init structs for waveform info
	for(i = 0; i < 7; i++) {
  80d3cc:	e0bd9a17 	ldw	r2,-2456(fp)
  80d3d0:	10800044 	addi	r2,r2,1
  80d3d4:	e0bd9a15 	stw	r2,-2456(fp)
  80d3d8:	e0bd9a17 	ldw	r2,-2456(fp)
  80d3dc:	108001d0 	cmplti	r2,r2,7
  80d3e0:	103fe51e 	bne	r2,zero,80d378 <main+0x28c>
		drums[i] = malloc(sizeof(Drum));
		drums[i]->waveform = malloc(hihatNumberSamples * sizeof(unsigned int));
	}

	drums[snareConst]->waveform = snare;
  80d3e4:	00802374 	movhi	r2,141
  80d3e8:	108ede04 	addi	r2,r2,15224
  80d3ec:	10c00017 	ldw	r3,0(r2)
  80d3f0:	00802374 	movhi	r2,141
  80d3f4:	108ee504 	addi	r2,r2,15252
  80d3f8:	18800015 	stw	r2,0(r3)
	drums[snareConst]->numberOfSamples = snareNumberSamples;
  80d3fc:	00802374 	movhi	r2,141
  80d400:	108ede04 	addi	r2,r2,15224
  80d404:	10c00017 	ldw	r3,0(r2)
  80d408:	008710c4 	movi	r2,7235
  80d40c:	18800315 	stw	r2,12(r3)
	drums[snareConst]->index = 0;
  80d410:	00802374 	movhi	r2,141
  80d414:	108ede04 	addi	r2,r2,15224
  80d418:	10800017 	ldw	r2,0(r2)
  80d41c:	10000115 	stw	zero,4(r2)
	drums[snareConst]->scale = 3;
  80d420:	00802374 	movhi	r2,141
  80d424:	108ede04 	addi	r2,r2,15224
  80d428:	10c00017 	ldw	r3,0(r2)
  80d42c:	008000c4 	movi	r2,3
  80d430:	18800215 	stw	r2,8(r3)
	drums[crashConst]->waveform = crash;
  80d434:	00802374 	movhi	r2,141
  80d438:	108ede04 	addi	r2,r2,15224
  80d43c:	10c00117 	ldw	r3,4(r2)
  80d440:	00802274 	movhi	r2,137
  80d444:	108f7004 	addi	r2,r2,15808
  80d448:	18800015 	stw	r2,0(r3)
	drums[crashConst]->numberOfSamples = crashNumberSamples;
  80d44c:	00802374 	movhi	r2,141
  80d450:	108ede04 	addi	r2,r2,15224
  80d454:	10c00117 	ldw	r3,4(r2)
  80d458:	00bddb94 	movui	r2,63342
  80d45c:	18800315 	stw	r2,12(r3)
	drums[crashConst]->index = 0;
  80d460:	00802374 	movhi	r2,141
  80d464:	108ede04 	addi	r2,r2,15224
  80d468:	10800117 	ldw	r2,4(r2)
  80d46c:	10000115 	stw	zero,4(r2)
	drums[crashConst]->scale = 2;
  80d470:	00802374 	movhi	r2,141
  80d474:	108ede04 	addi	r2,r2,15224
  80d478:	10c00117 	ldw	r3,4(r2)
  80d47c:	00800084 	movi	r2,2
  80d480:	18800215 	stw	r2,8(r3)
	drums[hihatConst]->waveform = hihat;
  80d484:	00802374 	movhi	r2,141
  80d488:	108ede04 	addi	r2,r2,15224
  80d48c:	10c00217 	ldw	r3,8(r2)
  80d490:	008023b4 	movhi	r2,142
  80d494:	10ab2804 	addi	r2,r2,-21344
  80d498:	18800015 	stw	r2,0(r3)
	drums[hihatConst]->numberOfSamples = hihatNumberSamples;
  80d49c:	00802374 	movhi	r2,141
  80d4a0:	108ede04 	addi	r2,r2,15224
  80d4a4:	10c00217 	ldw	r3,8(r2)
  80d4a8:	00800074 	movhi	r2,1
  80d4ac:	109fea84 	addi	r2,r2,32682
  80d4b0:	18800315 	stw	r2,12(r3)
	drums[hihatConst]->index = 0;
  80d4b4:	00802374 	movhi	r2,141
  80d4b8:	108ede04 	addi	r2,r2,15224
  80d4bc:	10800217 	ldw	r2,8(r2)
  80d4c0:	10000115 	stw	zero,4(r2)
	drums[hihatConst]->scale = 1;
  80d4c4:	00802374 	movhi	r2,141
  80d4c8:	108ede04 	addi	r2,r2,15224
  80d4cc:	10c00217 	ldw	r3,8(r2)
  80d4d0:	00800044 	movi	r2,1
  80d4d4:	18800215 	stw	r2,8(r3)
	drums[hihat2Const]->waveform = hihat2;
  80d4d8:	00802374 	movhi	r2,141
  80d4dc:	108ede04 	addi	r2,r2,15224
  80d4e0:	10c00317 	ldw	r3,12(r2)
  80d4e4:	00802274 	movhi	r2,137
  80d4e8:	10b6c704 	addi	r2,r2,-9444
  80d4ec:	18800015 	stw	r2,0(r3)
	drums[hihat2Const]->numberOfSamples = hihat2NumberSamples;
  80d4f0:	00802374 	movhi	r2,141
  80d4f4:	108ede04 	addi	r2,r2,15224
  80d4f8:	10c00317 	ldw	r3,12(r2)
  80d4fc:	00862a44 	movi	r2,6313
  80d500:	18800315 	stw	r2,12(r3)
	drums[hihat2Const]->index = 0;
  80d504:	00802374 	movhi	r2,141
  80d508:	108ede04 	addi	r2,r2,15224
  80d50c:	10800317 	ldw	r2,12(r2)
  80d510:	10000115 	stw	zero,4(r2)
	drums[hihat2Const]->scale = 1;
  80d514:	00802374 	movhi	r2,141
  80d518:	108ede04 	addi	r2,r2,15224
  80d51c:	10c00317 	ldw	r3,12(r2)
  80d520:	00800044 	movi	r2,1
  80d524:	18800215 	stw	r2,8(r3)
	drums[tomConst]->waveform = tom;
  80d528:	00802374 	movhi	r2,141
  80d52c:	108ede04 	addi	r2,r2,15224
  80d530:	10c00517 	ldw	r3,20(r2)
  80d534:	00802174 	movhi	r2,133
  80d538:	10981904 	addi	r2,r2,24676
  80d53c:	18800015 	stw	r2,0(r3)
	drums[tomConst]->numberOfSamples = tomNumberSamples;
  80d540:	00802374 	movhi	r2,141
  80d544:	108ede04 	addi	r2,r2,15224
  80d548:	10c00517 	ldw	r3,20(r2)
  80d54c:	00b7ab94 	movui	r2,57006
  80d550:	18800315 	stw	r2,12(r3)
	drums[tomConst]->index = 0;
  80d554:	00802374 	movhi	r2,141
  80d558:	108ede04 	addi	r2,r2,15224
  80d55c:	10800517 	ldw	r2,20(r2)
  80d560:	10000115 	stw	zero,4(r2)
	drums[tomConst]->scale = 1;
  80d564:	00802374 	movhi	r2,141
  80d568:	108ede04 	addi	r2,r2,15224
  80d56c:	10c00517 	ldw	r3,20(r2)
  80d570:	00800044 	movi	r2,1
  80d574:	18800215 	stw	r2,8(r3)
	drums[tom2Const]->waveform = tom2;
  80d578:	00802374 	movhi	r2,141
  80d57c:	108ede04 	addi	r2,r2,15224
  80d580:	10c00617 	ldw	r3,24(r2)
  80d584:	008020f4 	movhi	r2,131
  80d588:	10b20504 	addi	r2,r2,-14316
  80d58c:	18800015 	stw	r2,0(r3)
	drums[tom2Const]->numberOfSamples = tom2NumberSamples;
  80d590:	00802374 	movhi	r2,141
  80d594:	108ede04 	addi	r2,r2,15224
  80d598:	10c00617 	ldw	r3,24(r2)
  80d59c:	00a49f14 	movui	r2,37500
  80d5a0:	18800315 	stw	r2,12(r3)
	drums[tom2Const]->index = 0;
  80d5a4:	00802374 	movhi	r2,141
  80d5a8:	108ede04 	addi	r2,r2,15224
  80d5ac:	10800617 	ldw	r2,24(r2)
  80d5b0:	10000115 	stw	zero,4(r2)
	drums[tom2Const]->scale = 1;
  80d5b4:	00802374 	movhi	r2,141
  80d5b8:	108ede04 	addi	r2,r2,15224
  80d5bc:	10c00617 	ldw	r3,24(r2)
  80d5c0:	00800044 	movi	r2,1
  80d5c4:	18800215 	stw	r2,8(r3)
	drums[kickConst]->waveform = kick;
  80d5c8:	00802374 	movhi	r2,141
  80d5cc:	108ede04 	addi	r2,r2,15224
  80d5d0:	10c00417 	ldw	r3,16(r2)
  80d5d4:	00802174 	movhi	r2,133
  80d5d8:	10848104 	addi	r2,r2,4612
  80d5dc:	18800015 	stw	r2,0(r3)
	drums[kickConst]->numberOfSamples = kickNumberSamples;
  80d5e0:	00802374 	movhi	r2,141
  80d5e4:	108ede04 	addi	r2,r2,15224
  80d5e8:	10c00417 	ldw	r3,16(r2)
  80d5ec:	0084e204 	movi	r2,5000
  80d5f0:	18800315 	stw	r2,12(r3)
	drums[kickConst]->index = 0;
  80d5f4:	00802374 	movhi	r2,141
  80d5f8:	108ede04 	addi	r2,r2,15224
  80d5fc:	10800417 	ldw	r2,16(r2)
  80d600:	10000115 	stw	zero,4(r2)
	drums[kickConst]->scale = 1;
  80d604:	00802374 	movhi	r2,141
  80d608:	108ede04 	addi	r2,r2,15224
  80d60c:	10c00417 	ldw	r3,16(r2)
  80d610:	00800044 	movi	r2,1
  80d614:	18800215 	stw	r2,8(r3)

	// audio init, Button INit
	audioInit(audio_config_dev);
  80d618:	e13d9b17 	ldw	r4,-2452(fp)
  80d61c:	08024e00 	call	8024e0 <audioInit>
	init_button_pio();
  80d620:	08029f00 	call	8029f0 <init_button_pio>
	printf("Ready To Play\n");
  80d624:	010020b4 	movhi	r4,130
  80d628:	211f7004 	addi	r4,r4,32192
  80d62c:	08124e00 	call	8124e0 <puts>
	// system is now ready to play
	alt_up_character_lcd_init(myLCD);
  80d630:	d1203517 	ldw	r4,-32556(gp)
  80d634:	0825a700 	call	825a70 <alt_up_character_lcd_init>
	alt_up_character_lcd_set_cursor_pos(myLCD, 0, 1);
  80d638:	d1203517 	ldw	r4,-32556(gp)
  80d63c:	000b883a 	mov	r5,zero
  80d640:	01800044 	movi	r6,1
  80d644:	0825c200 	call	825c20 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string(myLCD, "Ready To Play");
  80d648:	d1203517 	ldw	r4,-32556(gp)
  80d64c:	014020b4 	movhi	r5,130
  80d650:	295f7004 	addi	r5,r5,32192
  80d654:	0825b5c0 	call	825b5c <alt_up_character_lcd_string>

	//init semaphore
	semaphore = OSSemCreate(0);
  80d658:	0009883a 	mov	r4,zero
  80d65c:	08210000 	call	821000 <OSSemCreate>
  80d660:	d0a03215 	stw	r2,-32568(gp)
	sem = 0;
  80d664:	d0203015 	stw	zero,-32576(gp)

	printf("gpio: %d\n", IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE));
  80d668:	00806474 	movhi	r2,401
  80d66c:	10a41804 	addi	r2,r2,-28576
  80d670:	11400037 	ldwio	r5,0(r2)
  80d674:	010020b4 	movhi	r4,130
  80d678:	211f7404 	addi	r4,r4,32208
  80d67c:	08123a40 	call	8123a4 <printf>
//	                  task1_stk,
//	                  TASK_STACKSIZE,
//	                  NULL,
//	                  0);

	OSTaskCreateExt(synthesize,
  80d680:	01802374 	movhi	r6,141
  80d684:	318edd04 	addi	r6,r6,15220
  80d688:	00800044 	movi	r2,1
  80d68c:	d8800015 	stw	r2,0(sp)
  80d690:	00802374 	movhi	r2,141
  80d694:	1086de04 	addi	r2,r2,7032
  80d698:	d8800115 	stw	r2,4(sp)
  80d69c:	00820004 	movi	r2,2048
  80d6a0:	d8800215 	stw	r2,8(sp)
  80d6a4:	d8000315 	stw	zero,12(sp)
  80d6a8:	d8000415 	stw	zero,16(sp)
  80d6ac:	01002034 	movhi	r4,128
  80d6b0:	2109d604 	addi	r4,r4,10072
  80d6b4:	000b883a 	mov	r5,zero
  80d6b8:	01c00044 	movi	r7,1
  80d6bc:	08222500 	call	822250 <OSTaskCreateExt>
	                  TASK2_PRIORITY,
	                  task2_stk,
	                  TASK_STACKSIZE,
	                  NULL,
	                  0);
	  OSStart();
  80d6c0:	081c47c0 	call	81c47c <OSStart>
	  return 0;
  80d6c4:	0005883a 	mov	r2,zero
}
  80d6c8:	e037883a 	mov	sp,fp
  80d6cc:	dfc00217 	ldw	ra,8(sp)
  80d6d0:	df000117 	ldw	fp,4(sp)
  80d6d4:	dc000017 	ldw	r16,0(sp)
  80d6d8:	dec00304 	addi	sp,sp,12
  80d6dc:	f800283a 	ret

0080d6e0 <sdInit>:
*/

#include "DrumAnyWhere.h"

// initializes spi interface for sd card reading
void sdInit(EmbeddedFileSystem *efsl, File *readFile) {
  80d6e0:	defffb04 	addi	sp,sp,-20
  80d6e4:	dfc00415 	stw	ra,16(sp)
  80d6e8:	df000315 	stw	fp,12(sp)
  80d6ec:	df000304 	addi	fp,sp,12
  80d6f0:	e13ffe15 	stw	r4,-8(fp)
  80d6f4:	e17fff15 	stw	r5,-4(fp)

	// Initialises the filesystem on the SD card, if the filesystem does not
	// init properly then it displays an error message.
	printf("Attempting to init filesystem");
  80d6f8:	010020b4 	movhi	r4,130
  80d6fc:	211f7704 	addi	r4,r4,32220
  80d700:	08123a40 	call	8123a4 <printf>
	int ret = efs_init(efsl, SD_CARD_SPI_MASTER_NAME);
  80d704:	e13ffe17 	ldw	r4,-8(fp)
  80d708:	014020b4 	movhi	r5,130
  80d70c:	295f7f04 	addi	r5,r5,32252
  80d710:	08038740 	call	803874 <efs_init>
  80d714:	10803fcc 	andi	r2,r2,255
  80d718:	1080201c 	xori	r2,r2,128
  80d71c:	10bfe004 	addi	r2,r2,-128
  80d720:	e0bffd15 	stw	r2,-12(fp)

	// Initialize efsl
	if(ret != 0)
  80d724:	e0bffd17 	ldw	r2,-12(fp)
  80d728:	1005003a 	cmpeq	r2,r2,zero
  80d72c:	1000041e 	bne	r2,zero,80d740 <sdInit+0x60>
	{
	printf("...could not initialize filesystem.\n");
  80d730:	010020b4 	movhi	r4,130
  80d734:	211f8504 	addi	r4,r4,32276
  80d738:	08124e00 	call	8124e0 <puts>
  80d73c:	00000306 	br	80d74c <sdInit+0x6c>
	}
	else
	printf("...success!\n");
  80d740:	010020b4 	movhi	r4,130
  80d744:	211f8e04 	addi	r4,r4,32312
  80d748:	08124e00 	call	8124e0 <puts>
}
  80d74c:	e037883a 	mov	sp,fp
  80d750:	dfc00117 	ldw	ra,4(sp)
  80d754:	df000017 	ldw	fp,0(sp)
  80d758:	dec00204 	addi	sp,sp,8
  80d75c:	f800283a 	ret

0080d760 <sdRead>:

// sdRead will read wav file given its filename and the efsl needed variables
// returns the raw .wav data 
euint8* sdRead(char* fileName, EmbeddedFileSystem *efsl, File *readFile) {
  80d760:	defff804 	addi	sp,sp,-32
  80d764:	dfc00715 	stw	ra,28(sp)
  80d768:	df000615 	stw	fp,24(sp)
  80d76c:	df000604 	addi	fp,sp,24
  80d770:	e13ffd15 	stw	r4,-12(fp)
  80d774:	e17ffe15 	stw	r5,-8(fp)
  80d778:	e1bfff15 	stw	r6,-4(fp)
	// API functions such as "ls_openDir(...)" and "ls_getNext(...). Reference
	// the included PDF for the documentation to do such a thing. This example
	// simply shows reading a file with a known filename.

	// Open the test file
	printf("\nAttempting to open file: \"%s\"\n", fileName);
  80d77c:	010020b4 	movhi	r4,130
  80d780:	211f9104 	addi	r4,r4,32324
  80d784:	e17ffd17 	ldw	r5,-12(fp)
  80d788:	08123a40 	call	8123a4 <printf>

	int ret1 = file_fopen(readFile, &efsl->myFs, fileName, 'r');
  80d78c:	e0bffe17 	ldw	r2,-8(fp)
  80d790:	11423904 	addi	r5,r2,2276
  80d794:	e13fff17 	ldw	r4,-4(fp)
  80d798:	e1bffd17 	ldw	r6,-12(fp)
  80d79c:	01c01c84 	movi	r7,114
  80d7a0:	08058fc0 	call	8058fc <file_fopen>
  80d7a4:	10803fcc 	andi	r2,r2,255
  80d7a8:	1080201c 	xori	r2,r2,128
  80d7ac:	10bfe004 	addi	r2,r2,-128
  80d7b0:	e0bffc15 	stw	r2,-16(fp)
	printf("ret1: %d\n", ret1);
  80d7b4:	010020b4 	movhi	r4,130
  80d7b8:	211f9904 	addi	r4,r4,32356
  80d7bc:	e17ffc17 	ldw	r5,-16(fp)
  80d7c0:	08123a40 	call	8123a4 <printf>
	if (ret1 != 0)
  80d7c4:	e0bffc17 	ldw	r2,-16(fp)
  80d7c8:	1005003a 	cmpeq	r2,r2,zero
  80d7cc:	1000041e 	bne	r2,zero,80d7e0 <sdRead+0x80>
	{
		printf("Error:\tCould not open file\n");
  80d7d0:	010020b4 	movhi	r4,130
  80d7d4:	211f9c04 	addi	r4,r4,32368
  80d7d8:	08124e00 	call	8124e0 <puts>
  80d7dc:	00000306 	br	80d7ec <sdRead+0x8c>
	}
	else
	{
		printf("Reading file...\n");
  80d7e0:	010020b4 	movhi	r4,130
  80d7e4:	211fa304 	addi	r4,r4,32396
  80d7e8:	08124e00 	call	8124e0 <puts>
	}

	euint8* fileBuffer = malloc(readFile->FileSize * sizeof(eint8));
  80d7ec:	e0bfff17 	ldw	r2,-4(fp)
  80d7f0:	11001317 	ldw	r4,76(r2)
  80d7f4:	0811b300 	call	811b30 <malloc>
  80d7f8:	e0bffb15 	stw	r2,-20(fp)
	if (!(fileBuffer)) {
  80d7fc:	e0bffb17 	ldw	r2,-20(fp)
  80d800:	1004c03a 	cmpne	r2,r2,zero
  80d804:	1000031e 	bne	r2,zero,80d814 <sdRead+0xb4>
		perror("malloc failed!\n");
  80d808:	010020b4 	movhi	r4,130
  80d80c:	211fa704 	addi	r4,r4,32412
  80d810:	08123900 	call	812390 <perror>
	}

	// Read all the file's contents into the buffer. See the file_fread(...) function
	// for the ability to read chunks of the file at a time, which is desirable for
	// larger files.
	unsigned int bytesRead = file_read(readFile, readFile->FileSize, fileBuffer);
  80d814:	e0bfff17 	ldw	r2,-4(fp)
  80d818:	11401317 	ldw	r5,76(r2)
  80d81c:	e13fff17 	ldw	r4,-4(fp)
  80d820:	e1bffb17 	ldw	r6,-20(fp)
  80d824:	080548c0 	call	80548c <file_read>
  80d828:	e0bffa15 	stw	r2,-24(fp)
	printf("%u bytes read from the file\n", bytesRead);
  80d82c:	010020b4 	movhi	r4,130
  80d830:	211fab04 	addi	r4,r4,32428
  80d834:	e17ffa17 	ldw	r5,-24(fp)
  80d838:	08123a40 	call	8123a4 <printf>

	// Close the file
	if (file_fclose(readFile) != 0) {
  80d83c:	e13fff17 	ldw	r4,-4(fp)
  80d840:	0805d740 	call	805d74 <file_fclose>
  80d844:	10803fcc 	andi	r2,r2,255
  80d848:	1080201c 	xori	r2,r2,128
  80d84c:	10bfe004 	addi	r2,r2,-128
  80d850:	1005003a 	cmpeq	r2,r2,zero
  80d854:	1000031e 	bne	r2,zero,80d864 <sdRead+0x104>
		printf("Error:\tCould not close file properly\n");
  80d858:	010020b4 	movhi	r4,130
  80d85c:	211fb304 	addi	r4,r4,32460
  80d860:	08124e00 	call	8124e0 <puts>
	}

	// Unmount the file system
	fs_umount(&efsl->myFs);
  80d864:	e0bffe17 	ldw	r2,-8(fp)
  80d868:	11023904 	addi	r4,r2,2276
  80d86c:	08073740 	call	807374 <fs_umount>
	return fileBuffer;
  80d870:	e0bffb17 	ldw	r2,-20(fp)
}
  80d874:	e037883a 	mov	sp,fp
  80d878:	dfc00117 	ldw	ra,4(sp)
  80d87c:	df000017 	ldw	fp,0(sp)
  80d880:	dec00204 	addi	sp,sp,8
  80d884:	f800283a 	ret

0080d888 <parseWav>:

// takes in raw .wav data, parses needed data to play on codec
void parseWav(euint8* fileBuffer, unsigned long numberSamples, unsigned int *fileBufL) {
  80d888:	defffa04 	addi	sp,sp,-24
  80d88c:	df000515 	stw	fp,20(sp)
  80d890:	df000504 	addi	fp,sp,20
  80d894:	e13ffd15 	stw	r4,-12(fp)
  80d898:	e17ffe15 	stw	r5,-8(fp)
  80d89c:	e1bfff15 	stw	r6,-4(fp)
	
	int i;
	unsigned int temp;
	for(i = 0; i < numberSamples; i++) {
  80d8a0:	e03ffc15 	stw	zero,-16(fp)
  80d8a4:	00003806 	br	80d988 <parseWav+0x100>
		temp = (int) ((fileBuffer[i*4+44] | (fileBuffer[i*4+45] << 8)));
  80d8a8:	e0bffc17 	ldw	r2,-16(fp)
  80d8ac:	1085883a 	add	r2,r2,r2
  80d8b0:	1085883a 	add	r2,r2,r2
  80d8b4:	1007883a 	mov	r3,r2
  80d8b8:	e0bffd17 	ldw	r2,-12(fp)
  80d8bc:	1885883a 	add	r2,r3,r2
  80d8c0:	10800b04 	addi	r2,r2,44
  80d8c4:	10800003 	ldbu	r2,0(r2)
  80d8c8:	11003fcc 	andi	r4,r2,255
  80d8cc:	e0bffc17 	ldw	r2,-16(fp)
  80d8d0:	1085883a 	add	r2,r2,r2
  80d8d4:	1085883a 	add	r2,r2,r2
  80d8d8:	1007883a 	mov	r3,r2
  80d8dc:	e0bffd17 	ldw	r2,-12(fp)
  80d8e0:	1885883a 	add	r2,r3,r2
  80d8e4:	10800b44 	addi	r2,r2,45
  80d8e8:	10800003 	ldbu	r2,0(r2)
  80d8ec:	10803fcc 	andi	r2,r2,255
  80d8f0:	1004923a 	slli	r2,r2,8
  80d8f4:	2084b03a 	or	r2,r4,r2
  80d8f8:	e0bffb15 	stw	r2,-20(fp)
		if(temp > 32768) {
  80d8fc:	e0fffb17 	ldw	r3,-20(fp)
  80d900:	00a00014 	movui	r2,32768
  80d904:	10c0142e 	bgeu	r2,r3,80d958 <parseWav+0xd0>
			temp = 65535 - temp;
  80d908:	00ffffd4 	movui	r3,65535
  80d90c:	e0bffb17 	ldw	r2,-20(fp)
  80d910:	1885c83a 	sub	r2,r3,r2
  80d914:	e0bffb15 	stw	r2,-20(fp)
			temp /= 2;
  80d918:	e0bffb17 	ldw	r2,-20(fp)
  80d91c:	1004d07a 	srli	r2,r2,1
  80d920:	e0bffb15 	stw	r2,-20(fp)
			temp = 65535 - temp;
  80d924:	00ffffd4 	movui	r3,65535
  80d928:	e0bffb17 	ldw	r2,-20(fp)
  80d92c:	1885c83a 	sub	r2,r3,r2
  80d930:	e0bffb15 	stw	r2,-20(fp)
			fileBufL[i] = temp;
  80d934:	e0bffc17 	ldw	r2,-16(fp)
  80d938:	1085883a 	add	r2,r2,r2
  80d93c:	1085883a 	add	r2,r2,r2
  80d940:	1007883a 	mov	r3,r2
  80d944:	e0bfff17 	ldw	r2,-4(fp)
  80d948:	1887883a 	add	r3,r3,r2
  80d94c:	e0bffb17 	ldw	r2,-20(fp)
  80d950:	18800015 	stw	r2,0(r3)
  80d954:	00000906 	br	80d97c <parseWav+0xf4>
		} else {
			fileBufL[i] = temp/2;
  80d958:	e0bffc17 	ldw	r2,-16(fp)
  80d95c:	1085883a 	add	r2,r2,r2
  80d960:	1085883a 	add	r2,r2,r2
  80d964:	1007883a 	mov	r3,r2
  80d968:	e0bfff17 	ldw	r2,-4(fp)
  80d96c:	1887883a 	add	r3,r3,r2
  80d970:	e0bffb17 	ldw	r2,-20(fp)
  80d974:	1004d07a 	srli	r2,r2,1
  80d978:	18800015 	stw	r2,0(r3)
// takes in raw .wav data, parses needed data to play on codec
void parseWav(euint8* fileBuffer, unsigned long numberSamples, unsigned int *fileBufL) {
	
	int i;
	unsigned int temp;
	for(i = 0; i < numberSamples; i++) {
  80d97c:	e0bffc17 	ldw	r2,-16(fp)
  80d980:	10800044 	addi	r2,r2,1
  80d984:	e0bffc15 	stw	r2,-16(fp)
  80d988:	e0fffc17 	ldw	r3,-16(fp)
  80d98c:	e0bffe17 	ldw	r2,-8(fp)
  80d990:	18bfc536 	bltu	r3,r2,80d8a8 <parseWav+0x20>
			fileBufL[i] = temp;
		} else {
			fileBufL[i] = temp/2;
		}
	}
}
  80d994:	e037883a 	mov	sp,fp
  80d998:	df000017 	ldw	fp,0(sp)
  80d99c:	dec00104 	addi	sp,sp,4
  80d9a0:	f800283a 	ret

0080d9a4 <pow>:
  80d9a4:	deffee04 	addi	sp,sp,-72
  80d9a8:	ddc01015 	stw	r23,64(sp)
  80d9ac:	05c020f4 	movhi	r23,131
  80d9b0:	bde99804 	addi	r23,r23,-22944
  80d9b4:	dd800f15 	stw	r22,60(sp)
  80d9b8:	dd400e15 	stw	r21,56(sp)
  80d9bc:	dd000d15 	stw	r20,52(sp)
  80d9c0:	dcc00c15 	stw	r19,48(sp)
  80d9c4:	dc800b15 	stw	r18,44(sp)
  80d9c8:	dc400a15 	stw	r17,40(sp)
  80d9cc:	dc000915 	stw	r16,36(sp)
  80d9d0:	2029883a 	mov	r20,r4
  80d9d4:	dfc01115 	stw	ra,68(sp)
  80d9d8:	3025883a 	mov	r18,r6
  80d9dc:	282b883a 	mov	r21,r5
  80d9e0:	3827883a 	mov	r19,r7
  80d9e4:	080de2c0 	call	80de2c <__ieee754_pow>
  80d9e8:	b9000017 	ldw	r4,0(r23)
  80d9ec:	05bfffc4 	movi	r22,-1
  80d9f0:	1021883a 	mov	r16,r2
  80d9f4:	1823883a 	mov	r17,r3
  80d9f8:	25800426 	beq	r4,r22,80da0c <pow+0x68>
  80d9fc:	9009883a 	mov	r4,r18
  80da00:	980b883a 	mov	r5,r19
  80da04:	080f4280 	call	80f428 <__isnand>
  80da08:	10000d26 	beq	r2,zero,80da40 <pow+0x9c>
  80da0c:	8005883a 	mov	r2,r16
  80da10:	8807883a 	mov	r3,r17
  80da14:	dfc01117 	ldw	ra,68(sp)
  80da18:	ddc01017 	ldw	r23,64(sp)
  80da1c:	dd800f17 	ldw	r22,60(sp)
  80da20:	dd400e17 	ldw	r21,56(sp)
  80da24:	dd000d17 	ldw	r20,52(sp)
  80da28:	dcc00c17 	ldw	r19,48(sp)
  80da2c:	dc800b17 	ldw	r18,44(sp)
  80da30:	dc400a17 	ldw	r17,40(sp)
  80da34:	dc000917 	ldw	r16,36(sp)
  80da38:	dec01204 	addi	sp,sp,72
  80da3c:	f800283a 	ret
  80da40:	a009883a 	mov	r4,r20
  80da44:	a80b883a 	mov	r5,r21
  80da48:	080f4280 	call	80f428 <__isnand>
  80da4c:	1000151e 	bne	r2,zero,80daa4 <pow+0x100>
  80da50:	000d883a 	mov	r6,zero
  80da54:	000f883a 	mov	r7,zero
  80da58:	a009883a 	mov	r4,r20
  80da5c:	a80b883a 	mov	r5,r21
  80da60:	0810c4c0 	call	810c4c <__eqdf2>
  80da64:	1000541e 	bne	r2,zero,80dbb8 <pow+0x214>
  80da68:	000d883a 	mov	r6,zero
  80da6c:	000f883a 	mov	r7,zero
  80da70:	9009883a 	mov	r4,r18
  80da74:	980b883a 	mov	r5,r19
  80da78:	0810c4c0 	call	810c4c <__eqdf2>
  80da7c:	10002c1e 	bne	r2,zero,80db30 <pow+0x18c>
  80da80:	b8800017 	ldw	r2,0(r23)
  80da84:	d8000615 	stw	zero,24(sp)
  80da88:	d8000715 	stw	zero,28(sp)
  80da8c:	10001226 	beq	r2,zero,80dad8 <pow+0x134>
  80da90:	008ffc34 	movhi	r2,16368
  80da94:	d8800715 	stw	r2,28(sp)
  80da98:	dc000617 	ldw	r16,24(sp)
  80da9c:	dc400717 	ldw	r17,28(sp)
  80daa0:	003fda06 	br	80da0c <pow+0x68>
  80daa4:	000d883a 	mov	r6,zero
  80daa8:	000f883a 	mov	r7,zero
  80daac:	9009883a 	mov	r4,r18
  80dab0:	980b883a 	mov	r5,r19
  80dab4:	0810c4c0 	call	810c4c <__eqdf2>
  80dab8:	103fd41e 	bne	r2,zero,80da0c <pow+0x68>
  80dabc:	b8c00017 	ldw	r3,0(r23)
  80dac0:	010ffc34 	movhi	r4,16368
  80dac4:	d8000615 	stw	zero,24(sp)
  80dac8:	d9000715 	stw	r4,28(sp)
  80dacc:	1d801526 	beq	r3,r22,80db24 <pow+0x180>
  80dad0:	00800084 	movi	r2,2
  80dad4:	18801326 	beq	r3,r2,80db24 <pow+0x180>
  80dad8:	008020b4 	movhi	r2,130
  80dadc:	109fbd04 	addi	r2,r2,32500
  80dae0:	00c00044 	movi	r3,1
  80dae4:	d809883a 	mov	r4,sp
  80dae8:	dcc00515 	stw	r19,20(sp)
  80daec:	dd400315 	stw	r21,12(sp)
  80daf0:	d8800115 	stw	r2,4(sp)
  80daf4:	d8c00015 	stw	r3,0(sp)
  80daf8:	dc800415 	stw	r18,16(sp)
  80dafc:	dd000215 	stw	r20,8(sp)
  80db00:	d8000815 	stw	zero,32(sp)
  80db04:	080f4580 	call	80f458 <matherr>
  80db08:	10002726 	beq	r2,zero,80dba8 <pow+0x204>
  80db0c:	d8800817 	ldw	r2,32(sp)
  80db10:	103fe126 	beq	r2,zero,80da98 <pow+0xf4>
  80db14:	0811b0c0 	call	811b0c <__errno>
  80db18:	d8c00817 	ldw	r3,32(sp)
  80db1c:	10c00015 	stw	r3,0(r2)
  80db20:	003fdd06 	br	80da98 <pow+0xf4>
  80db24:	d9000715 	stw	r4,28(sp)
  80db28:	d8000615 	stw	zero,24(sp)
  80db2c:	003fda06 	br	80da98 <pow+0xf4>
  80db30:	9009883a 	mov	r4,r18
  80db34:	980b883a 	mov	r5,r19
  80db38:	080f40c0 	call	80f40c <finite>
  80db3c:	103fb326 	beq	r2,zero,80da0c <pow+0x68>
  80db40:	000d883a 	mov	r6,zero
  80db44:	000f883a 	mov	r7,zero
  80db48:	9009883a 	mov	r4,r18
  80db4c:	980b883a 	mov	r5,r19
  80db50:	0810de40 	call	810de4 <__ltdf2>
  80db54:	103fad0e 	bge	r2,zero,80da0c <pow+0x68>
  80db58:	b9000017 	ldw	r4,0(r23)
  80db5c:	00800044 	movi	r2,1
  80db60:	00c020b4 	movhi	r3,130
  80db64:	18dfbd04 	addi	r3,r3,32500
  80db68:	d8800015 	stw	r2,0(sp)
  80db6c:	d8c00115 	stw	r3,4(sp)
  80db70:	dd400315 	stw	r21,12(sp)
  80db74:	dcc00515 	stw	r19,20(sp)
  80db78:	d8000815 	stw	zero,32(sp)
  80db7c:	dd000215 	stw	r20,8(sp)
  80db80:	dc800415 	stw	r18,16(sp)
  80db84:	20005626 	beq	r4,zero,80dce0 <pow+0x33c>
  80db88:	00bffc34 	movhi	r2,65520
  80db8c:	d8800715 	stw	r2,28(sp)
  80db90:	00800084 	movi	r2,2
  80db94:	d8000615 	stw	zero,24(sp)
  80db98:	20800326 	beq	r4,r2,80dba8 <pow+0x204>
  80db9c:	d809883a 	mov	r4,sp
  80dba0:	080f4580 	call	80f458 <matherr>
  80dba4:	103fd91e 	bne	r2,zero,80db0c <pow+0x168>
  80dba8:	0811b0c0 	call	811b0c <__errno>
  80dbac:	00c00844 	movi	r3,33
  80dbb0:	10c00015 	stw	r3,0(r2)
  80dbb4:	003fd506 	br	80db0c <pow+0x168>
  80dbb8:	8009883a 	mov	r4,r16
  80dbbc:	880b883a 	mov	r5,r17
  80dbc0:	080f40c0 	call	80f40c <finite>
  80dbc4:	10002426 	beq	r2,zero,80dc58 <pow+0x2b4>
  80dbc8:	000d883a 	mov	r6,zero
  80dbcc:	000f883a 	mov	r7,zero
  80dbd0:	8009883a 	mov	r4,r16
  80dbd4:	880b883a 	mov	r5,r17
  80dbd8:	0810c4c0 	call	810c4c <__eqdf2>
  80dbdc:	103f8b1e 	bne	r2,zero,80da0c <pow+0x68>
  80dbe0:	a009883a 	mov	r4,r20
  80dbe4:	a80b883a 	mov	r5,r21
  80dbe8:	080f40c0 	call	80f40c <finite>
  80dbec:	103f8726 	beq	r2,zero,80da0c <pow+0x68>
  80dbf0:	9009883a 	mov	r4,r18
  80dbf4:	980b883a 	mov	r5,r19
  80dbf8:	080f40c0 	call	80f40c <finite>
  80dbfc:	103f8326 	beq	r2,zero,80da0c <pow+0x68>
  80dc00:	b9000017 	ldw	r4,0(r23)
  80dc04:	00800104 	movi	r2,4
  80dc08:	d8800015 	stw	r2,0(sp)
  80dc0c:	00c020b4 	movhi	r3,130
  80dc10:	18dfbd04 	addi	r3,r3,32500
  80dc14:	00800084 	movi	r2,2
  80dc18:	d8c00115 	stw	r3,4(sp)
  80dc1c:	dd400315 	stw	r21,12(sp)
  80dc20:	dcc00515 	stw	r19,20(sp)
  80dc24:	d8000815 	stw	zero,32(sp)
  80dc28:	dd000215 	stw	r20,8(sp)
  80dc2c:	dc800415 	stw	r18,16(sp)
  80dc30:	d8000615 	stw	zero,24(sp)
  80dc34:	d8000715 	stw	zero,28(sp)
  80dc38:	20800326 	beq	r4,r2,80dc48 <pow+0x2a4>
  80dc3c:	d809883a 	mov	r4,sp
  80dc40:	080f4580 	call	80f458 <matherr>
  80dc44:	103fb11e 	bne	r2,zero,80db0c <pow+0x168>
  80dc48:	0811b0c0 	call	811b0c <__errno>
  80dc4c:	00c00884 	movi	r3,34
  80dc50:	10c00015 	stw	r3,0(r2)
  80dc54:	003fad06 	br	80db0c <pow+0x168>
  80dc58:	a009883a 	mov	r4,r20
  80dc5c:	a80b883a 	mov	r5,r21
  80dc60:	080f40c0 	call	80f40c <finite>
  80dc64:	103fd826 	beq	r2,zero,80dbc8 <pow+0x224>
  80dc68:	9009883a 	mov	r4,r18
  80dc6c:	980b883a 	mov	r5,r19
  80dc70:	080f40c0 	call	80f40c <finite>
  80dc74:	103fd426 	beq	r2,zero,80dbc8 <pow+0x224>
  80dc78:	880b883a 	mov	r5,r17
  80dc7c:	8009883a 	mov	r4,r16
  80dc80:	080f4280 	call	80f428 <__isnand>
  80dc84:	10001926 	beq	r2,zero,80dcec <pow+0x348>
  80dc88:	bc000017 	ldw	r16,0(r23)
  80dc8c:	00800044 	movi	r2,1
  80dc90:	00c020b4 	movhi	r3,130
  80dc94:	18dfbd04 	addi	r3,r3,32500
  80dc98:	d8800015 	stw	r2,0(sp)
  80dc9c:	d8c00115 	stw	r3,4(sp)
  80dca0:	dd400315 	stw	r21,12(sp)
  80dca4:	dcc00515 	stw	r19,20(sp)
  80dca8:	d8000815 	stw	zero,32(sp)
  80dcac:	dd000215 	stw	r20,8(sp)
  80dcb0:	dc800415 	stw	r18,16(sp)
  80dcb4:	80000a26 	beq	r16,zero,80dce0 <pow+0x33c>
  80dcb8:	0009883a 	mov	r4,zero
  80dcbc:	000d883a 	mov	r6,zero
  80dcc0:	000b883a 	mov	r5,zero
  80dcc4:	000f883a 	mov	r7,zero
  80dcc8:	08109f40 	call	8109f4 <__divdf3>
  80dccc:	d8800615 	stw	r2,24(sp)
  80dcd0:	00800084 	movi	r2,2
  80dcd4:	d8c00715 	stw	r3,28(sp)
  80dcd8:	80bfb01e 	bne	r16,r2,80db9c <pow+0x1f8>
  80dcdc:	003fb206 	br	80dba8 <pow+0x204>
  80dce0:	d8000615 	stw	zero,24(sp)
  80dce4:	d8000715 	stw	zero,28(sp)
  80dce8:	003fac06 	br	80db9c <pow+0x1f8>
  80dcec:	b8800017 	ldw	r2,0(r23)
  80dcf0:	00c000c4 	movi	r3,3
  80dcf4:	010020b4 	movhi	r4,130
  80dcf8:	211fbd04 	addi	r4,r4,32500
  80dcfc:	d8c00015 	stw	r3,0(sp)
  80dd00:	d9000115 	stw	r4,4(sp)
  80dd04:	d8000815 	stw	zero,32(sp)
  80dd08:	dd000215 	stw	r20,8(sp)
  80dd0c:	dd400315 	stw	r21,12(sp)
  80dd10:	dc800415 	stw	r18,16(sp)
  80dd14:	dcc00515 	stw	r19,20(sp)
  80dd18:	1000251e 	bne	r2,zero,80ddb0 <pow+0x40c>
  80dd1c:	05b80034 	movhi	r22,57344
  80dd20:	0091fc34 	movhi	r2,18416
  80dd24:	10bfffc4 	addi	r2,r2,-1
  80dd28:	000d883a 	mov	r6,zero
  80dd2c:	000f883a 	mov	r7,zero
  80dd30:	a80b883a 	mov	r5,r21
  80dd34:	a009883a 	mov	r4,r20
  80dd38:	d8800715 	stw	r2,28(sp)
  80dd3c:	dd800615 	stw	r22,24(sp)
  80dd40:	0810de40 	call	810de4 <__ltdf2>
  80dd44:	103fbd0e 	bge	r2,zero,80dc3c <pow+0x298>
  80dd48:	0005883a 	mov	r2,zero
  80dd4c:	00cff834 	movhi	r3,16352
  80dd50:	180f883a 	mov	r7,r3
  80dd54:	100d883a 	mov	r6,r2
  80dd58:	980b883a 	mov	r5,r19
  80dd5c:	9009883a 	mov	r4,r18
  80dd60:	08106300 	call	810630 <__muldf3>
  80dd64:	1009883a 	mov	r4,r2
  80dd68:	180b883a 	mov	r5,r3
  80dd6c:	1021883a 	mov	r16,r2
  80dd70:	1823883a 	mov	r17,r3
  80dd74:	080f4700 	call	80f470 <rint>
  80dd78:	180f883a 	mov	r7,r3
  80dd7c:	8009883a 	mov	r4,r16
  80dd80:	880b883a 	mov	r5,r17
  80dd84:	100d883a 	mov	r6,r2
  80dd88:	0810cd40 	call	810cd4 <__nedf2>
  80dd8c:	10000426 	beq	r2,zero,80dda0 <pow+0x3fc>
  80dd90:	00b1fc34 	movhi	r2,51184
  80dd94:	10bfffc4 	addi	r2,r2,-1
  80dd98:	dd800615 	stw	r22,24(sp)
  80dd9c:	d8800715 	stw	r2,28(sp)
  80dda0:	b8c00017 	ldw	r3,0(r23)
  80dda4:	00800084 	movi	r2,2
  80dda8:	18bfa41e 	bne	r3,r2,80dc3c <pow+0x298>
  80ddac:	003fa606 	br	80dc48 <pow+0x2a4>
  80ddb0:	009ffc34 	movhi	r2,32752
  80ddb4:	000d883a 	mov	r6,zero
  80ddb8:	000f883a 	mov	r7,zero
  80ddbc:	a80b883a 	mov	r5,r21
  80ddc0:	a009883a 	mov	r4,r20
  80ddc4:	d8800715 	stw	r2,28(sp)
  80ddc8:	d8000615 	stw	zero,24(sp)
  80ddcc:	0810de40 	call	810de4 <__ltdf2>
  80ddd0:	103ff30e 	bge	r2,zero,80dda0 <pow+0x3fc>
  80ddd4:	0005883a 	mov	r2,zero
  80ddd8:	00cff834 	movhi	r3,16352
  80dddc:	180f883a 	mov	r7,r3
  80dde0:	100d883a 	mov	r6,r2
  80dde4:	980b883a 	mov	r5,r19
  80dde8:	9009883a 	mov	r4,r18
  80ddec:	08106300 	call	810630 <__muldf3>
  80ddf0:	1009883a 	mov	r4,r2
  80ddf4:	180b883a 	mov	r5,r3
  80ddf8:	1021883a 	mov	r16,r2
  80ddfc:	1823883a 	mov	r17,r3
  80de00:	080f4700 	call	80f470 <rint>
  80de04:	180f883a 	mov	r7,r3
  80de08:	8009883a 	mov	r4,r16
  80de0c:	880b883a 	mov	r5,r17
  80de10:	100d883a 	mov	r6,r2
  80de14:	0810cd40 	call	810cd4 <__nedf2>
  80de18:	103fe126 	beq	r2,zero,80dda0 <pow+0x3fc>
  80de1c:	00bffc34 	movhi	r2,65520
  80de20:	d8800715 	stw	r2,28(sp)
  80de24:	d8000615 	stw	zero,24(sp)
  80de28:	003fdd06 	br	80dda0 <pow+0x3fc>

0080de2c <__ieee754_pow>:
  80de2c:	deffbb04 	addi	sp,sp,-276
  80de30:	3005883a 	mov	r2,r6
  80de34:	dd404015 	stw	r21,256(sp)
  80de38:	dd003f15 	stw	r20,252(sp)
  80de3c:	d9802815 	stw	r6,160(sp)
  80de40:	2029883a 	mov	r20,r4
  80de44:	282b883a 	mov	r21,r5
  80de48:	3009883a 	mov	r4,r6
  80de4c:	380b883a 	mov	r5,r7
  80de50:	01a00034 	movhi	r6,32768
  80de54:	31bfffc4 	addi	r6,r6,-1
  80de58:	dc003b15 	stw	r16,236(sp)
  80de5c:	29a0703a 	and	r16,r5,r6
  80de60:	1404b03a 	or	r2,r2,r16
  80de64:	dd804115 	stw	r22,260(sp)
  80de68:	dc403c15 	stw	r17,240(sp)
  80de6c:	d9c02915 	stw	r7,164(sp)
  80de70:	382d883a 	mov	r22,r7
  80de74:	dfc04415 	stw	ra,272(sp)
  80de78:	200f883a 	mov	r7,r4
  80de7c:	df004315 	stw	fp,268(sp)
  80de80:	ddc04215 	stw	r23,264(sp)
  80de84:	dcc03e15 	stw	r19,248(sp)
  80de88:	dc803d15 	stw	r18,244(sp)
  80de8c:	a023883a 	mov	r17,r20
  80de90:	2809883a 	mov	r4,r5
  80de94:	10000826 	beq	r2,zero,80deb8 <__ieee754_pow+0x8c>
  80de98:	a9a4703a 	and	r18,r21,r6
  80de9c:	009ffc34 	movhi	r2,32752
  80dea0:	a827883a 	mov	r19,r21
  80dea4:	1480180e 	bge	r2,r18,80df08 <__ieee754_pow+0xdc>
  80dea8:	00b00434 	movhi	r2,49168
  80deac:	9085883a 	add	r2,r18,r2
  80deb0:	8884b03a 	or	r2,r17,r2
  80deb4:	1000321e 	bne	r2,zero,80df80 <__ieee754_pow+0x154>
  80deb8:	0009883a 	mov	r4,zero
  80debc:	014ffc34 	movhi	r5,16368
  80dec0:	d9002815 	stw	r4,160(sp)
  80dec4:	d9402915 	stw	r5,164(sp)
  80dec8:	d9002817 	ldw	r4,160(sp)
  80decc:	d9402917 	ldw	r5,164(sp)
  80ded0:	2005883a 	mov	r2,r4
  80ded4:	2807883a 	mov	r3,r5
  80ded8:	dfc04417 	ldw	ra,272(sp)
  80dedc:	df004317 	ldw	fp,268(sp)
  80dee0:	ddc04217 	ldw	r23,264(sp)
  80dee4:	dd804117 	ldw	r22,260(sp)
  80dee8:	dd404017 	ldw	r21,256(sp)
  80deec:	dd003f17 	ldw	r20,252(sp)
  80def0:	dcc03e17 	ldw	r19,248(sp)
  80def4:	dc803d17 	ldw	r18,244(sp)
  80def8:	dc403c17 	ldw	r17,240(sp)
  80defc:	dc003b17 	ldw	r16,236(sp)
  80df00:	dec04504 	addi	sp,sp,276
  80df04:	f800283a 	ret
  80df08:	90802b26 	beq	r18,r2,80dfb8 <__ieee754_pow+0x18c>
  80df0c:	143fe616 	blt	r2,r16,80dea8 <__ieee754_pow+0x7c>
  80df10:	80806126 	beq	r16,r2,80e098 <__ieee754_pow+0x26c>
  80df14:	982e403a 	cmpge	r23,r19,zero
  80df18:	b8004e26 	beq	r23,zero,80e054 <__ieee754_pow+0x228>
  80df1c:	0039883a 	mov	fp,zero
  80df20:	3800281e 	bne	r7,zero,80dfc4 <__ieee754_pow+0x198>
  80df24:	009ffc34 	movhi	r2,32752
  80df28:	80804f26 	beq	r16,r2,80e068 <__ieee754_pow+0x23c>
  80df2c:	008ffc34 	movhi	r2,16368
  80df30:	80808226 	beq	r16,r2,80e13c <__ieee754_pow+0x310>
  80df34:	00900034 	movhi	r2,16384
  80df38:	20828426 	beq	r4,r2,80e94c <__ieee754_pow+0xb20>
  80df3c:	008ff834 	movhi	r2,16352
  80df40:	2080201e 	bne	r4,r2,80dfc4 <__ieee754_pow+0x198>
  80df44:	98001f16 	blt	r19,zero,80dfc4 <__ieee754_pow+0x198>
  80df48:	a80b883a 	mov	r5,r21
  80df4c:	a009883a 	mov	r4,r20
  80df50:	dfc04417 	ldw	ra,272(sp)
  80df54:	df004317 	ldw	fp,268(sp)
  80df58:	ddc04217 	ldw	r23,264(sp)
  80df5c:	dd804117 	ldw	r22,260(sp)
  80df60:	dd404017 	ldw	r21,256(sp)
  80df64:	dd003f17 	ldw	r20,252(sp)
  80df68:	dcc03e17 	ldw	r19,248(sp)
  80df6c:	dc803d17 	ldw	r18,244(sp)
  80df70:	dc403c17 	ldw	r17,240(sp)
  80df74:	dc003b17 	ldw	r16,236(sp)
  80df78:	dec04504 	addi	sp,sp,276
  80df7c:	080f12c1 	jmpi	80f12c <__ieee754_sqrt>
  80df80:	010020f4 	movhi	r4,131
  80df84:	21221204 	addi	r4,r4,-30648
  80df88:	dfc04417 	ldw	ra,272(sp)
  80df8c:	df004317 	ldw	fp,268(sp)
  80df90:	ddc04217 	ldw	r23,264(sp)
  80df94:	dd804117 	ldw	r22,260(sp)
  80df98:	dd404017 	ldw	r21,256(sp)
  80df9c:	dd003f17 	ldw	r20,252(sp)
  80dfa0:	dcc03e17 	ldw	r19,248(sp)
  80dfa4:	dc803d17 	ldw	r18,244(sp)
  80dfa8:	dc403c17 	ldw	r17,240(sp)
  80dfac:	dc003b17 	ldw	r16,236(sp)
  80dfb0:	dec04504 	addi	sp,sp,276
  80dfb4:	080f4601 	jmpi	80f460 <nan>
  80dfb8:	a03fbb1e 	bne	r20,zero,80dea8 <__ieee754_pow+0x7c>
  80dfbc:	003fd306 	br	80df0c <__ieee754_pow+0xe0>
  80dfc0:	0039883a 	mov	fp,zero
  80dfc4:	a009883a 	mov	r4,r20
  80dfc8:	a80b883a 	mov	r5,r21
  80dfcc:	080f3f40 	call	80f3f4 <fabs>
  80dfd0:	1015883a 	mov	r10,r2
  80dfd4:	1817883a 	mov	r11,r3
  80dfd8:	88001226 	beq	r17,zero,80e024 <__ieee754_pow+0x1f8>
  80dfdc:	9804d7fa 	srli	r2,r19,31
  80dfe0:	10bfffc4 	addi	r2,r2,-1
  80dfe4:	1706b03a 	or	r3,r2,fp
  80dfe8:	d8802515 	stw	r2,148(sp)
  80dfec:	18002c1e 	bne	r3,zero,80e0a0 <__ieee754_pow+0x274>
  80dff0:	a80f883a 	mov	r7,r21
  80dff4:	a009883a 	mov	r4,r20
  80dff8:	a80b883a 	mov	r5,r21
  80dffc:	a00d883a 	mov	r6,r20
  80e000:	081053c0 	call	81053c <__subdf3>
  80e004:	1009883a 	mov	r4,r2
  80e008:	180b883a 	mov	r5,r3
  80e00c:	100d883a 	mov	r6,r2
  80e010:	180f883a 	mov	r7,r3
  80e014:	08109f40 	call	8109f4 <__divdf3>
  80e018:	d8802815 	stw	r2,160(sp)
  80e01c:	d8c02915 	stw	r3,164(sp)
  80e020:	003fa906 	br	80dec8 <__ieee754_pow+0x9c>
  80e024:	009ffc34 	movhi	r2,32752
  80e028:	90800326 	beq	r18,r2,80e038 <__ieee754_pow+0x20c>
  80e02c:	90000226 	beq	r18,zero,80e038 <__ieee754_pow+0x20c>
  80e030:	008ffc34 	movhi	r2,16368
  80e034:	90bfe91e 	bne	r18,r2,80dfdc <__ieee754_pow+0x1b0>
  80e038:	b0026316 	blt	r22,zero,80e9c8 <__ieee754_pow+0xb9c>
  80e03c:	5011883a 	mov	r8,r10
  80e040:	5813883a 	mov	r9,r11
  80e044:	b8023126 	beq	r23,zero,80e90c <__ieee754_pow+0xae0>
  80e048:	da002815 	stw	r8,160(sp)
  80e04c:	da402915 	stw	r9,164(sp)
  80e050:	003f9d06 	br	80dec8 <__ieee754_pow+0x9c>
  80e054:	0090d034 	movhi	r2,17216
  80e058:	10bfffc4 	addi	r2,r2,-1
  80e05c:	1400270e 	bge	r2,r16,80e0fc <__ieee754_pow+0x2d0>
  80e060:	07000084 	movi	fp,2
  80e064:	003fae06 	br	80df20 <__ieee754_pow+0xf4>
  80e068:	00b00434 	movhi	r2,49168
  80e06c:	9085883a 	add	r2,r18,r2
  80e070:	8884b03a 	or	r2,r17,r2
  80e074:	103f9026 	beq	r2,zero,80deb8 <__ieee754_pow+0x8c>
  80e078:	008ffc34 	movhi	r2,16368
  80e07c:	10bfffc4 	addi	r2,r2,-1
  80e080:	1482d00e 	bge	r2,r18,80ebc4 <__ieee754_pow+0xd98>
  80e084:	b03f900e 	bge	r22,zero,80dec8 <__ieee754_pow+0x9c>
  80e088:	0005883a 	mov	r2,zero
  80e08c:	d8802815 	stw	r2,160(sp)
  80e090:	d8802915 	stw	r2,164(sp)
  80e094:	003f8c06 	br	80dec8 <__ieee754_pow+0x9c>
  80e098:	383f9e26 	beq	r7,zero,80df14 <__ieee754_pow+0xe8>
  80e09c:	003f8206 	br	80dea8 <__ieee754_pow+0x7c>
  80e0a0:	00907834 	movhi	r2,16864
  80e0a4:	1400290e 	bge	r2,r16,80e14c <__ieee754_pow+0x320>
  80e0a8:	0090fc34 	movhi	r2,17392
  80e0ac:	1402500e 	bge	r2,r16,80e9f0 <__ieee754_pow+0xbc4>
  80e0b0:	008ffc34 	movhi	r2,16368
  80e0b4:	10bfffc4 	addi	r2,r2,-1
  80e0b8:	14800b0e 	bge	r2,r18,80e0e8 <__ieee754_pow+0x2bc>
  80e0bc:	05800b0e 	bge	zero,r22,80e0ec <__ieee754_pow+0x2c0>
  80e0c0:	00a20034 	movhi	r2,34816
  80e0c4:	109d6704 	addi	r2,r2,30108
  80e0c8:	00df8e34 	movhi	r3,32312
  80e0cc:	18f90f04 	addi	r3,r3,-7108
  80e0d0:	100d883a 	mov	r6,r2
  80e0d4:	180f883a 	mov	r7,r3
  80e0d8:	1009883a 	mov	r4,r2
  80e0dc:	180b883a 	mov	r5,r3
  80e0e0:	08106300 	call	810630 <__muldf3>
  80e0e4:	003fcc06 	br	80e018 <__ieee754_pow+0x1ec>
  80e0e8:	b03ff516 	blt	r22,zero,80e0c0 <__ieee754_pow+0x294>
  80e0ec:	0007883a 	mov	r3,zero
  80e0f0:	d8c02815 	stw	r3,160(sp)
  80e0f4:	d8c02915 	stw	r3,164(sp)
  80e0f8:	003f7306 	br	80dec8 <__ieee754_pow+0x9c>
  80e0fc:	008ffc34 	movhi	r2,16368
  80e100:	10bfffc4 	addi	r2,r2,-1
  80e104:	143f850e 	bge	r2,r16,80df1c <__ieee754_pow+0xf0>
  80e108:	8005d53a 	srai	r2,r16,20
  80e10c:	01400504 	movi	r5,20
  80e110:	10ff0044 	addi	r3,r2,-1023
  80e114:	28c3e10e 	bge	r5,r3,80f09c <__ieee754_pow+0x1270>
  80e118:	00800d04 	movi	r2,52
  80e11c:	10c5c83a 	sub	r2,r2,r3
  80e120:	3886d83a 	srl	r3,r7,r2
  80e124:	1884983a 	sll	r2,r3,r2
  80e128:	38bf7c1e 	bne	r7,r2,80df1c <__ieee754_pow+0xf0>
  80e12c:	18c0004c 	andi	r3,r3,1
  80e130:	00800084 	movi	r2,2
  80e134:	10f9c83a 	sub	fp,r2,r3
  80e138:	003f7906 	br	80df20 <__ieee754_pow+0xf4>
  80e13c:	b0038516 	blt	r22,zero,80ef54 <__ieee754_pow+0x1128>
  80e140:	dd002815 	stw	r20,160(sp)
  80e144:	dd402915 	stw	r21,164(sp)
  80e148:	003f5f06 	br	80dec8 <__ieee754_pow+0x9c>
  80e14c:	00800434 	movhi	r2,16
  80e150:	10bfffc4 	addi	r2,r2,-1
  80e154:	1482900e 	bge	r2,r18,80eb98 <__ieee754_pow+0xd6c>
  80e158:	000b883a 	mov	r5,zero
  80e15c:	9005d53a 	srai	r2,r18,20
  80e160:	00c00434 	movhi	r3,16
  80e164:	18ffffc4 	addi	r3,r3,-1
  80e168:	90c8703a 	and	r4,r18,r3
  80e16c:	2887883a 	add	r3,r5,r2
  80e170:	18bf0044 	addi	r2,r3,-1023
  80e174:	d8800015 	stw	r2,0(sp)
  80e178:	00800134 	movhi	r2,4
  80e17c:	10a62384 	addi	r2,r2,-26482
  80e180:	250ffc34 	orhi	r20,r4,16368
  80e184:	1101ee0e 	bge	r2,r4,80e940 <__ieee754_pow+0xb14>
  80e188:	00800334 	movhi	r2,12
  80e18c:	10ad9e44 	addi	r2,r2,-18823
  80e190:	1101e716 	blt	r2,r4,80e930 <__ieee754_pow+0xb04>
  80e194:	01000044 	movi	r4,1
  80e198:	04000334 	movhi	r16,12
  80e19c:	200890fa 	slli	r4,r4,3
  80e1a0:	da800115 	stw	r10,4(sp)
  80e1a4:	dd000215 	stw	r20,8(sp)
  80e1a8:	d9002c15 	stw	r4,176(sp)
  80e1ac:	d9402c17 	ldw	r5,176(sp)
  80e1b0:	010020b4 	movhi	r4,130
  80e1b4:	211fbe04 	addi	r4,r4,32504
  80e1b8:	a02bd07a 	srai	r21,r20,1
  80e1bc:	2909883a 	add	r4,r5,r4
  80e1c0:	25800017 	ldw	r22,0(r4)
  80e1c4:	25c00117 	ldw	r23,4(r4)
  80e1c8:	a00b883a 	mov	r5,r20
  80e1cc:	5009883a 	mov	r4,r10
  80e1d0:	b00d883a 	mov	r6,r22
  80e1d4:	b80f883a 	mov	r7,r23
  80e1d8:	081053c0 	call	81053c <__subdf3>
  80e1dc:	d9000117 	ldw	r4,4(sp)
  80e1e0:	a00b883a 	mov	r5,r20
  80e1e4:	b00d883a 	mov	r6,r22
  80e1e8:	b80f883a 	mov	r7,r23
  80e1ec:	1025883a 	mov	r18,r2
  80e1f0:	1827883a 	mov	r19,r3
  80e1f4:	08105bc0 	call	8105bc <__adddf3>
  80e1f8:	0011883a 	mov	r8,zero
  80e1fc:	024ffc34 	movhi	r9,16368
  80e200:	480b883a 	mov	r5,r9
  80e204:	4009883a 	mov	r4,r8
  80e208:	180f883a 	mov	r7,r3
  80e20c:	100d883a 	mov	r6,r2
  80e210:	08109f40 	call	8109f4 <__divdf3>
  80e214:	d8c02e15 	stw	r3,184(sp)
  80e218:	d8800f15 	stw	r2,60(sp)
  80e21c:	d8802d15 	stw	r2,180(sp)
  80e220:	d8802e17 	ldw	r2,184(sp)
  80e224:	d9800f17 	ldw	r6,60(sp)
  80e228:	9009883a 	mov	r4,r18
  80e22c:	980b883a 	mov	r5,r19
  80e230:	100f883a 	mov	r7,r2
  80e234:	dc800b15 	stw	r18,44(sp)
  80e238:	dcc00c15 	stw	r19,48(sp)
  80e23c:	d8801015 	stw	r2,64(sp)
  80e240:	08106300 	call	810630 <__muldf3>
  80e244:	d8c03015 	stw	r3,192(sp)
  80e248:	d9003017 	ldw	r4,192(sp)
  80e24c:	d8802f15 	stw	r2,188(sp)
  80e250:	d8800315 	stw	r2,12(sp)
  80e254:	ad480034 	orhi	r21,r21,8192
  80e258:	0005883a 	mov	r2,zero
  80e25c:	ac2b883a 	add	r21,r21,r16
  80e260:	000b883a 	mov	r5,zero
  80e264:	1021883a 	mov	r16,r2
  80e268:	2005883a 	mov	r2,r4
  80e26c:	800d883a 	mov	r6,r16
  80e270:	a80f883a 	mov	r7,r21
  80e274:	d9000415 	stw	r4,16(sp)
  80e278:	d9002715 	stw	r4,156(sp)
  80e27c:	d9402615 	stw	r5,152(sp)
  80e280:	d9401615 	stw	r5,88(sp)
  80e284:	d9001715 	stw	r4,92(sp)
  80e288:	100b883a 	mov	r5,r2
  80e28c:	0009883a 	mov	r4,zero
  80e290:	08106300 	call	810630 <__muldf3>
  80e294:	d9000b17 	ldw	r4,44(sp)
  80e298:	980b883a 	mov	r5,r19
  80e29c:	180f883a 	mov	r7,r3
  80e2a0:	100d883a 	mov	r6,r2
  80e2a4:	081053c0 	call	81053c <__subdf3>
  80e2a8:	8009883a 	mov	r4,r16
  80e2ac:	a80b883a 	mov	r5,r21
  80e2b0:	b80f883a 	mov	r7,r23
  80e2b4:	b00d883a 	mov	r6,r22
  80e2b8:	1021883a 	mov	r16,r2
  80e2bc:	1823883a 	mov	r17,r3
  80e2c0:	081053c0 	call	81053c <__subdf3>
  80e2c4:	d9000117 	ldw	r4,4(sp)
  80e2c8:	a00b883a 	mov	r5,r20
  80e2cc:	180f883a 	mov	r7,r3
  80e2d0:	100d883a 	mov	r6,r2
  80e2d4:	081053c0 	call	81053c <__subdf3>
  80e2d8:	d9001617 	ldw	r4,88(sp)
  80e2dc:	d9402717 	ldw	r5,156(sp)
  80e2e0:	180f883a 	mov	r7,r3
  80e2e4:	100d883a 	mov	r6,r2
  80e2e8:	08106300 	call	810630 <__muldf3>
  80e2ec:	180f883a 	mov	r7,r3
  80e2f0:	880b883a 	mov	r5,r17
  80e2f4:	8009883a 	mov	r4,r16
  80e2f8:	100d883a 	mov	r6,r2
  80e2fc:	081053c0 	call	81053c <__subdf3>
  80e300:	d9000f17 	ldw	r4,60(sp)
  80e304:	d9402e17 	ldw	r5,184(sp)
  80e308:	180f883a 	mov	r7,r3
  80e30c:	100d883a 	mov	r6,r2
  80e310:	08106300 	call	810630 <__muldf3>
  80e314:	d9000317 	ldw	r4,12(sp)
  80e318:	d9403017 	ldw	r5,192(sp)
  80e31c:	d8803115 	stw	r2,196(sp)
  80e320:	200d883a 	mov	r6,r4
  80e324:	280f883a 	mov	r7,r5
  80e328:	d8c03215 	stw	r3,200(sp)
  80e32c:	08106300 	call	810630 <__muldf3>
  80e330:	1009883a 	mov	r4,r2
  80e334:	180b883a 	mov	r5,r3
  80e338:	100d883a 	mov	r6,r2
  80e33c:	180f883a 	mov	r7,r3
  80e340:	1021883a 	mov	r16,r2
  80e344:	1823883a 	mov	r17,r3
  80e348:	08106300 	call	810630 <__muldf3>
  80e34c:	02129174 	movhi	r8,19013
  80e350:	4213bbc4 	addi	r8,r8,20207
  80e354:	024ff2b4 	movhi	r9,16330
  80e358:	4a5f8a04 	addi	r9,r9,32296
  80e35c:	480f883a 	mov	r7,r9
  80e360:	8009883a 	mov	r4,r16
  80e364:	880b883a 	mov	r5,r17
  80e368:	400d883a 	mov	r6,r8
  80e36c:	1029883a 	mov	r20,r2
  80e370:	182b883a 	mov	r21,r3
  80e374:	08106300 	call	810630 <__muldf3>
  80e378:	0224f2b4 	movhi	r8,37834
  80e37c:	4236d944 	addi	r8,r8,-9371
  80e380:	024ff3b4 	movhi	r9,16334
  80e384:	4a619284 	addi	r9,r9,-31158
  80e388:	480f883a 	mov	r7,r9
  80e38c:	400d883a 	mov	r6,r8
  80e390:	180b883a 	mov	r5,r3
  80e394:	1009883a 	mov	r4,r2
  80e398:	08105bc0 	call	8105bc <__adddf3>
  80e39c:	180f883a 	mov	r7,r3
  80e3a0:	8009883a 	mov	r4,r16
  80e3a4:	880b883a 	mov	r5,r17
  80e3a8:	100d883a 	mov	r6,r2
  80e3ac:	08106300 	call	810630 <__muldf3>
  80e3b0:	022a4774 	movhi	r8,43293
  80e3b4:	42104044 	addi	r8,r8,16641
  80e3b8:	024ff474 	movhi	r9,16337
  80e3bc:	4a5d1804 	addi	r9,r9,29792
  80e3c0:	480f883a 	mov	r7,r9
  80e3c4:	400d883a 	mov	r6,r8
  80e3c8:	180b883a 	mov	r5,r3
  80e3cc:	1009883a 	mov	r4,r2
  80e3d0:	08105bc0 	call	8105bc <__adddf3>
  80e3d4:	180f883a 	mov	r7,r3
  80e3d8:	8009883a 	mov	r4,r16
  80e3dc:	880b883a 	mov	r5,r17
  80e3e0:	100d883a 	mov	r6,r2
  80e3e4:	08106300 	call	810630 <__muldf3>
  80e3e8:	021463f4 	movhi	r8,20879
  80e3ec:	42099344 	addi	r8,r8,9805
  80e3f0:	024ff574 	movhi	r9,16341
  80e3f4:	4a555544 	addi	r9,r9,21845
  80e3f8:	480f883a 	mov	r7,r9
  80e3fc:	400d883a 	mov	r6,r8
  80e400:	180b883a 	mov	r5,r3
  80e404:	1009883a 	mov	r4,r2
  80e408:	08105bc0 	call	8105bc <__adddf3>
  80e40c:	180f883a 	mov	r7,r3
  80e410:	8009883a 	mov	r4,r16
  80e414:	880b883a 	mov	r5,r17
  80e418:	100d883a 	mov	r6,r2
  80e41c:	08106300 	call	810630 <__muldf3>
  80e420:	0236dc34 	movhi	r8,56176
  80e424:	422affc4 	addi	r8,r8,-21505
  80e428:	024ff6f4 	movhi	r9,16347
  80e42c:	4a5b6d84 	addi	r9,r9,28086
  80e430:	480f883a 	mov	r7,r9
  80e434:	400d883a 	mov	r6,r8
  80e438:	180b883a 	mov	r5,r3
  80e43c:	1009883a 	mov	r4,r2
  80e440:	08105bc0 	call	8105bc <__adddf3>
  80e444:	180f883a 	mov	r7,r3
  80e448:	8009883a 	mov	r4,r16
  80e44c:	880b883a 	mov	r5,r17
  80e450:	100d883a 	mov	r6,r2
  80e454:	08106300 	call	810630 <__muldf3>
  80e458:	020cccf4 	movhi	r8,13107
  80e45c:	420cc0c4 	addi	r8,r8,13059
  80e460:	024ff8f4 	movhi	r9,16355
  80e464:	4a4cccc4 	addi	r9,r9,13107
  80e468:	480f883a 	mov	r7,r9
  80e46c:	400d883a 	mov	r6,r8
  80e470:	180b883a 	mov	r5,r3
  80e474:	1009883a 	mov	r4,r2
  80e478:	08105bc0 	call	8105bc <__adddf3>
  80e47c:	180f883a 	mov	r7,r3
  80e480:	a80b883a 	mov	r5,r21
  80e484:	a009883a 	mov	r4,r20
  80e488:	100d883a 	mov	r6,r2
  80e48c:	08106300 	call	810630 <__muldf3>
  80e490:	d9000317 	ldw	r4,12(sp)
  80e494:	d9403017 	ldw	r5,192(sp)
  80e498:	d9801617 	ldw	r6,88(sp)
  80e49c:	d9c02717 	ldw	r7,156(sp)
  80e4a0:	1021883a 	mov	r16,r2
  80e4a4:	1823883a 	mov	r17,r3
  80e4a8:	08105bc0 	call	8105bc <__adddf3>
  80e4ac:	d9003117 	ldw	r4,196(sp)
  80e4b0:	d9403217 	ldw	r5,200(sp)
  80e4b4:	180f883a 	mov	r7,r3
  80e4b8:	100d883a 	mov	r6,r2
  80e4bc:	d9001415 	stw	r4,80(sp)
  80e4c0:	d9401515 	stw	r5,84(sp)
  80e4c4:	08106300 	call	810630 <__muldf3>
  80e4c8:	180f883a 	mov	r7,r3
  80e4cc:	8009883a 	mov	r4,r16
  80e4d0:	880b883a 	mov	r5,r17
  80e4d4:	100d883a 	mov	r6,r2
  80e4d8:	08105bc0 	call	8105bc <__adddf3>
  80e4dc:	d9001617 	ldw	r4,88(sp)
  80e4e0:	d9402717 	ldw	r5,156(sp)
  80e4e4:	d8803315 	stw	r2,204(sp)
  80e4e8:	200d883a 	mov	r6,r4
  80e4ec:	280f883a 	mov	r7,r5
  80e4f0:	d8c03415 	stw	r3,208(sp)
  80e4f4:	08106300 	call	810630 <__muldf3>
  80e4f8:	182f883a 	mov	r23,r3
  80e4fc:	05500234 	movhi	r21,16392
  80e500:	0029883a 	mov	r20,zero
  80e504:	b80b883a 	mov	r5,r23
  80e508:	a00d883a 	mov	r6,r20
  80e50c:	a80f883a 	mov	r7,r21
  80e510:	1009883a 	mov	r4,r2
  80e514:	d8800715 	stw	r2,28(sp)
  80e518:	d8c00815 	stw	r3,32(sp)
  80e51c:	08105bc0 	call	8105bc <__adddf3>
  80e520:	d9003317 	ldw	r4,204(sp)
  80e524:	d9403417 	ldw	r5,208(sp)
  80e528:	180f883a 	mov	r7,r3
  80e52c:	100d883a 	mov	r6,r2
  80e530:	d9000515 	stw	r4,20(sp)
  80e534:	d9400615 	stw	r5,24(sp)
  80e538:	08105bc0 	call	8105bc <__adddf3>
  80e53c:	d9001617 	ldw	r4,88(sp)
  80e540:	d9402717 	ldw	r5,156(sp)
  80e544:	0025883a 	mov	r18,zero
  80e548:	900d883a 	mov	r6,r18
  80e54c:	180f883a 	mov	r7,r3
  80e550:	1823883a 	mov	r17,r3
  80e554:	08106300 	call	810630 <__muldf3>
  80e558:	d9001417 	ldw	r4,80(sp)
  80e55c:	d9403217 	ldw	r5,200(sp)
  80e560:	880f883a 	mov	r7,r17
  80e564:	900d883a 	mov	r6,r18
  80e568:	d8803515 	stw	r2,212(sp)
  80e56c:	d8c03615 	stw	r3,216(sp)
  80e570:	08106300 	call	810630 <__muldf3>
  80e574:	a80f883a 	mov	r7,r21
  80e578:	880b883a 	mov	r5,r17
  80e57c:	000d883a 	mov	r6,zero
  80e580:	9009883a 	mov	r4,r18
  80e584:	1021883a 	mov	r16,r2
  80e588:	1823883a 	mov	r17,r3
  80e58c:	081053c0 	call	81053c <__subdf3>
  80e590:	d9800717 	ldw	r6,28(sp)
  80e594:	b80f883a 	mov	r7,r23
  80e598:	180b883a 	mov	r5,r3
  80e59c:	1009883a 	mov	r4,r2
  80e5a0:	081053c0 	call	81053c <__subdf3>
  80e5a4:	d9000517 	ldw	r4,20(sp)
  80e5a8:	d9403417 	ldw	r5,208(sp)
  80e5ac:	180f883a 	mov	r7,r3
  80e5b0:	100d883a 	mov	r6,r2
  80e5b4:	081053c0 	call	81053c <__subdf3>
  80e5b8:	d9000317 	ldw	r4,12(sp)
  80e5bc:	d9403017 	ldw	r5,192(sp)
  80e5c0:	180f883a 	mov	r7,r3
  80e5c4:	100d883a 	mov	r6,r2
  80e5c8:	08106300 	call	810630 <__muldf3>
  80e5cc:	180f883a 	mov	r7,r3
  80e5d0:	880b883a 	mov	r5,r17
  80e5d4:	8009883a 	mov	r4,r16
  80e5d8:	100d883a 	mov	r6,r2
  80e5dc:	08105bc0 	call	8105bc <__adddf3>
  80e5e0:	102d883a 	mov	r22,r2
  80e5e4:	d9003617 	ldw	r4,216(sp)
  80e5e8:	d8803517 	ldw	r2,212(sp)
  80e5ec:	d9403617 	ldw	r5,216(sp)
  80e5f0:	182f883a 	mov	r23,r3
  80e5f4:	b00d883a 	mov	r6,r22
  80e5f8:	b80f883a 	mov	r7,r23
  80e5fc:	d9000a15 	stw	r4,40(sp)
  80e600:	1009883a 	mov	r4,r2
  80e604:	054ffbf4 	movhi	r21,16367
  80e608:	ad71c244 	addi	r21,r21,-14583
  80e60c:	dd800d15 	stw	r22,52(sp)
  80e610:	ddc00e15 	stw	r23,56(sp)
  80e614:	05380034 	movhi	r20,57344
  80e618:	d8800915 	stw	r2,36(sp)
  80e61c:	08105bc0 	call	8105bc <__adddf3>
  80e620:	180b883a 	mov	r5,r3
  80e624:	a00d883a 	mov	r6,r20
  80e628:	a80f883a 	mov	r7,r21
  80e62c:	9009883a 	mov	r4,r18
  80e630:	1823883a 	mov	r17,r3
  80e634:	08106300 	call	810630 <__muldf3>
  80e638:	020516f4 	movhi	r8,5211
  80e63c:	42007d44 	addi	r8,r8,501
  80e640:	026f8fb4 	movhi	r9,48702
  80e644:	4a4bf804 	addi	r9,r9,12256
  80e648:	480f883a 	mov	r7,r9
  80e64c:	400d883a 	mov	r6,r8
  80e650:	880b883a 	mov	r5,r17
  80e654:	9009883a 	mov	r4,r18
  80e658:	d8803715 	stw	r2,220(sp)
  80e65c:	d8c03815 	stw	r3,224(sp)
  80e660:	08106300 	call	810630 <__muldf3>
  80e664:	d9800917 	ldw	r6,36(sp)
  80e668:	d9c03617 	ldw	r7,216(sp)
  80e66c:	880b883a 	mov	r5,r17
  80e670:	9009883a 	mov	r4,r18
  80e674:	1021883a 	mov	r16,r2
  80e678:	1823883a 	mov	r17,r3
  80e67c:	081053c0 	call	81053c <__subdf3>
  80e680:	d9000d17 	ldw	r4,52(sp)
  80e684:	b80b883a 	mov	r5,r23
  80e688:	180f883a 	mov	r7,r3
  80e68c:	100d883a 	mov	r6,r2
  80e690:	081053c0 	call	81053c <__subdf3>
  80e694:	180b883a 	mov	r5,r3
  80e698:	a80f883a 	mov	r7,r21
  80e69c:	01b70eb4 	movhi	r6,56378
  80e6a0:	3180ff44 	addi	r6,r6,1021
  80e6a4:	1009883a 	mov	r4,r2
  80e6a8:	08106300 	call	810630 <__muldf3>
  80e6ac:	180f883a 	mov	r7,r3
  80e6b0:	880b883a 	mov	r5,r17
  80e6b4:	8009883a 	mov	r4,r16
  80e6b8:	100d883a 	mov	r6,r2
  80e6bc:	08105bc0 	call	8105bc <__adddf3>
  80e6c0:	d9402c17 	ldw	r5,176(sp)
  80e6c4:	010020b4 	movhi	r4,130
  80e6c8:	211fc204 	addi	r4,r4,32520
  80e6cc:	2909883a 	add	r4,r5,r4
  80e6d0:	22400117 	ldw	r9,4(r4)
  80e6d4:	22000017 	ldw	r8,0(r4)
  80e6d8:	180b883a 	mov	r5,r3
  80e6dc:	480f883a 	mov	r7,r9
  80e6e0:	400d883a 	mov	r6,r8
  80e6e4:	1009883a 	mov	r4,r2
  80e6e8:	08105bc0 	call	8105bc <__adddf3>
  80e6ec:	d9000017 	ldw	r4,0(sp)
  80e6f0:	182f883a 	mov	r23,r3
  80e6f4:	102d883a 	mov	r22,r2
  80e6f8:	0810ef40 	call	810ef4 <__floatsidf>
  80e6fc:	d9402c17 	ldw	r5,176(sp)
  80e700:	010020b4 	movhi	r4,130
  80e704:	211fc604 	addi	r4,r4,32536
  80e708:	b00d883a 	mov	r6,r22
  80e70c:	2911883a 	add	r8,r5,r4
  80e710:	d9003717 	ldw	r4,220(sp)
  80e714:	d9403817 	ldw	r5,224(sp)
  80e718:	45000017 	ldw	r20,0(r8)
  80e71c:	d9002315 	stw	r4,140(sp)
  80e720:	d9003817 	ldw	r4,224(sp)
  80e724:	45400117 	ldw	r21,4(r8)
  80e728:	b80f883a 	mov	r7,r23
  80e72c:	d9002415 	stw	r4,144(sp)
  80e730:	d9002317 	ldw	r4,140(sp)
  80e734:	1021883a 	mov	r16,r2
  80e738:	1823883a 	mov	r17,r3
  80e73c:	dd802115 	stw	r22,132(sp)
  80e740:	ddc02215 	stw	r23,136(sp)
  80e744:	08105bc0 	call	8105bc <__adddf3>
  80e748:	180b883a 	mov	r5,r3
  80e74c:	1009883a 	mov	r4,r2
  80e750:	a00d883a 	mov	r6,r20
  80e754:	a80f883a 	mov	r7,r21
  80e758:	08105bc0 	call	8105bc <__adddf3>
  80e75c:	180f883a 	mov	r7,r3
  80e760:	8009883a 	mov	r4,r16
  80e764:	880b883a 	mov	r5,r17
  80e768:	100d883a 	mov	r6,r2
  80e76c:	08105bc0 	call	8105bc <__adddf3>
  80e770:	180b883a 	mov	r5,r3
  80e774:	0009883a 	mov	r4,zero
  80e778:	800d883a 	mov	r6,r16
  80e77c:	880f883a 	mov	r7,r17
  80e780:	d9001b15 	stw	r4,108(sp)
  80e784:	d8c01c15 	stw	r3,112(sp)
  80e788:	081053c0 	call	81053c <__subdf3>
  80e78c:	180b883a 	mov	r5,r3
  80e790:	a80f883a 	mov	r7,r21
  80e794:	1009883a 	mov	r4,r2
  80e798:	a00d883a 	mov	r6,r20
  80e79c:	081053c0 	call	81053c <__subdf3>
  80e7a0:	d9802317 	ldw	r6,140(sp)
  80e7a4:	d9c03817 	ldw	r7,224(sp)
  80e7a8:	180b883a 	mov	r5,r3
  80e7ac:	1009883a 	mov	r4,r2
  80e7b0:	081053c0 	call	81053c <__subdf3>
  80e7b4:	d9002117 	ldw	r4,132(sp)
  80e7b8:	1011883a 	mov	r8,r2
  80e7bc:	1813883a 	mov	r9,r3
  80e7c0:	b80b883a 	mov	r5,r23
  80e7c4:	480f883a 	mov	r7,r9
  80e7c8:	400d883a 	mov	r6,r8
  80e7cc:	081053c0 	call	81053c <__subdf3>
  80e7d0:	1823883a 	mov	r17,r3
  80e7d4:	d8c02517 	ldw	r3,148(sp)
  80e7d8:	1021883a 	mov	r16,r2
  80e7dc:	e0bfffc4 	addi	r2,fp,-1
  80e7e0:	1884b03a 	or	r2,r3,r2
  80e7e4:	1000731e 	bne	r2,zero,80e9b4 <__ieee754_pow+0xb88>
  80e7e8:	0009883a 	mov	r4,zero
  80e7ec:	016ffc34 	movhi	r5,49136
  80e7f0:	d9001915 	stw	r4,100(sp)
  80e7f4:	d9401a15 	stw	r5,104(sp)
  80e7f8:	d9402917 	ldw	r5,164(sp)
  80e7fc:	d9002817 	ldw	r4,160(sp)
  80e800:	0029883a 	mov	r20,zero
  80e804:	a00d883a 	mov	r6,r20
  80e808:	280f883a 	mov	r7,r5
  80e80c:	2827883a 	mov	r19,r5
  80e810:	081053c0 	call	81053c <__subdf3>
  80e814:	d9001b17 	ldw	r4,108(sp)
  80e818:	d9401c17 	ldw	r5,112(sp)
  80e81c:	180f883a 	mov	r7,r3
  80e820:	100d883a 	mov	r6,r2
  80e824:	08106300 	call	810630 <__muldf3>
  80e828:	d9c02917 	ldw	r7,164(sp)
  80e82c:	d9802817 	ldw	r6,160(sp)
  80e830:	880b883a 	mov	r5,r17
  80e834:	8009883a 	mov	r4,r16
  80e838:	1823883a 	mov	r17,r3
  80e83c:	1021883a 	mov	r16,r2
  80e840:	08106300 	call	810630 <__muldf3>
  80e844:	180f883a 	mov	r7,r3
  80e848:	880b883a 	mov	r5,r17
  80e84c:	8009883a 	mov	r4,r16
  80e850:	100d883a 	mov	r6,r2
  80e854:	08105bc0 	call	8105bc <__adddf3>
  80e858:	d9401c17 	ldw	r5,112(sp)
  80e85c:	d9001b17 	ldw	r4,108(sp)
  80e860:	a00d883a 	mov	r6,r20
  80e864:	980f883a 	mov	r7,r19
  80e868:	1029883a 	mov	r20,r2
  80e86c:	182b883a 	mov	r21,r3
  80e870:	08106300 	call	810630 <__muldf3>
  80e874:	1025883a 	mov	r18,r2
  80e878:	1827883a 	mov	r19,r3
  80e87c:	a009883a 	mov	r4,r20
  80e880:	a80b883a 	mov	r5,r21
  80e884:	900d883a 	mov	r6,r18
  80e888:	980f883a 	mov	r7,r19
  80e88c:	dd001d15 	stw	r20,116(sp)
  80e890:	dc801f15 	stw	r18,124(sp)
  80e894:	dd401e15 	stw	r21,120(sp)
  80e898:	dcc02015 	stw	r19,128(sp)
  80e89c:	08105bc0 	call	8105bc <__adddf3>
  80e8a0:	1823883a 	mov	r17,r3
  80e8a4:	01102434 	movhi	r4,16528
  80e8a8:	213fffc4 	addi	r4,r4,-1
  80e8ac:	1021883a 	mov	r16,r2
  80e8b0:	182f883a 	mov	r23,r3
  80e8b4:	dc401815 	stw	r17,96(sp)
  80e8b8:	100b883a 	mov	r5,r2
  80e8bc:	20c02c0e 	bge	r4,r3,80e970 <__ieee754_pow+0xb44>
  80e8c0:	00afdc34 	movhi	r2,49008
  80e8c4:	1885883a 	add	r2,r3,r2
  80e8c8:	2884b03a 	or	r2,r5,r2
  80e8cc:	1001a626 	beq	r2,zero,80ef68 <__ieee754_pow+0x113c>
  80e8d0:	04220034 	movhi	r16,34816
  80e8d4:	841d6704 	addi	r16,r16,30108
  80e8d8:	045f8e34 	movhi	r17,32312
  80e8dc:	8c790f04 	addi	r17,r17,-7108
  80e8e0:	d9401a17 	ldw	r5,104(sp)
  80e8e4:	d9001917 	ldw	r4,100(sp)
  80e8e8:	800d883a 	mov	r6,r16
  80e8ec:	880f883a 	mov	r7,r17
  80e8f0:	08106300 	call	810630 <__muldf3>
  80e8f4:	180b883a 	mov	r5,r3
  80e8f8:	800d883a 	mov	r6,r16
  80e8fc:	880f883a 	mov	r7,r17
  80e900:	1009883a 	mov	r4,r2
  80e904:	08106300 	call	810630 <__muldf3>
  80e908:	003dc306 	br	80e018 <__ieee754_pow+0x1ec>
  80e90c:	00b00434 	movhi	r2,49168
  80e910:	9085883a 	add	r2,r18,r2
  80e914:	e084b03a 	or	r2,fp,r2
  80e918:	1000af1e 	bne	r2,zero,80ebd8 <__ieee754_pow+0xdac>
  80e91c:	480f883a 	mov	r7,r9
  80e920:	4009883a 	mov	r4,r8
  80e924:	480b883a 	mov	r5,r9
  80e928:	400d883a 	mov	r6,r8
  80e92c:	003db406 	br	80e000 <__ieee754_pow+0x1d4>
  80e930:	00bffc34 	movhi	r2,65520
  80e934:	18ff0084 	addi	r3,r3,-1022
  80e938:	a0a9883a 	add	r20,r20,r2
  80e93c:	d8c00015 	stw	r3,0(sp)
  80e940:	0009883a 	mov	r4,zero
  80e944:	04000234 	movhi	r16,8
  80e948:	003e1406 	br	80e19c <__ieee754_pow+0x370>
  80e94c:	a80f883a 	mov	r7,r21
  80e950:	a009883a 	mov	r4,r20
  80e954:	a80b883a 	mov	r5,r21
  80e958:	a00d883a 	mov	r6,r20
  80e95c:	08106300 	call	810630 <__muldf3>
  80e960:	180b883a 	mov	r5,r3
  80e964:	d8802815 	stw	r2,160(sp)
  80e968:	d9402915 	stw	r5,164(sp)
  80e96c:	003d5606 	br	80dec8 <__ieee754_pow+0x9c>
  80e970:	d9001817 	ldw	r4,96(sp)
  80e974:	00a00034 	movhi	r2,32768
  80e978:	10bfffc4 	addi	r2,r2,-1
  80e97c:	00d02474 	movhi	r3,16529
  80e980:	18f2ffc4 	addi	r3,r3,-13313
  80e984:	20b8703a 	and	fp,r4,r2
  80e988:	1f009d0e 	bge	r3,fp,80ec00 <__ieee754_pow+0xdd4>
  80e98c:	008fdbf4 	movhi	r2,16239
  80e990:	108d0004 	addi	r2,r2,13312
  80e994:	2085883a 	add	r2,r4,r2
  80e998:	1144b03a 	or	r2,r2,r5
  80e99c:	1001c626 	beq	r2,zero,80f0b8 <__ieee754_pow+0x128c>
  80e9a0:	0430be74 	movhi	r16,49913
  80e9a4:	843cd644 	addi	r16,r16,-3239
  80e9a8:	04406974 	movhi	r17,421
  80e9ac:	8c5b87c4 	addi	r17,r17,28191
  80e9b0:	003fcb06 	br	80e8e0 <__ieee754_pow+0xab4>
  80e9b4:	0005883a 	mov	r2,zero
  80e9b8:	00cffc34 	movhi	r3,16368
  80e9bc:	d8801915 	stw	r2,100(sp)
  80e9c0:	d8c01a15 	stw	r3,104(sp)
  80e9c4:	003f8c06 	br	80e7f8 <__ieee754_pow+0x9cc>
  80e9c8:	0005883a 	mov	r2,zero
  80e9cc:	00cffc34 	movhi	r3,16368
  80e9d0:	180b883a 	mov	r5,r3
  80e9d4:	580f883a 	mov	r7,r11
  80e9d8:	1009883a 	mov	r4,r2
  80e9dc:	500d883a 	mov	r6,r10
  80e9e0:	08109f40 	call	8109f4 <__divdf3>
  80e9e4:	1011883a 	mov	r8,r2
  80e9e8:	1813883a 	mov	r9,r3
  80e9ec:	003d9506 	br	80e044 <__ieee754_pow+0x218>
  80e9f0:	008ffc34 	movhi	r2,16368
  80e9f4:	10bfff84 	addi	r2,r2,-2
  80e9f8:	14bdbb0e 	bge	r2,r18,80e0e8 <__ieee754_pow+0x2bc>
  80e9fc:	008ffc34 	movhi	r2,16368
  80ea00:	14bdae16 	blt	r2,r18,80e0bc <__ieee754_pow+0x290>
  80ea04:	580b883a 	mov	r5,r11
  80ea08:	5009883a 	mov	r4,r10
  80ea0c:	000d883a 	mov	r6,zero
  80ea10:	100f883a 	mov	r7,r2
  80ea14:	081053c0 	call	81053c <__subdf3>
  80ea18:	1021883a 	mov	r16,r2
  80ea1c:	1823883a 	mov	r17,r3
  80ea20:	00980034 	movhi	r2,24576
  80ea24:	00cffdf4 	movhi	r3,16375
  80ea28:	18c551c4 	addi	r3,r3,5447
  80ea2c:	8009883a 	mov	r4,r16
  80ea30:	880b883a 	mov	r5,r17
  80ea34:	180f883a 	mov	r7,r3
  80ea38:	100d883a 	mov	r6,r2
  80ea3c:	08106300 	call	810630 <__muldf3>
  80ea40:	023e17b4 	movhi	r8,63582
  80ea44:	4237d104 	addi	r8,r8,-8380
  80ea48:	024f9574 	movhi	r9,15957
  80ea4c:	4a6b82c4 	addi	r9,r9,-20981
  80ea50:	480f883a 	mov	r7,r9
  80ea54:	400d883a 	mov	r6,r8
  80ea58:	8009883a 	mov	r4,r16
  80ea5c:	880b883a 	mov	r5,r17
  80ea60:	102d883a 	mov	r22,r2
  80ea64:	182f883a 	mov	r23,r3
  80ea68:	08106300 	call	810630 <__muldf3>
  80ea6c:	8009883a 	mov	r4,r16
  80ea70:	880b883a 	mov	r5,r17
  80ea74:	800d883a 	mov	r6,r16
  80ea78:	880f883a 	mov	r7,r17
  80ea7c:	d8802a15 	stw	r2,168(sp)
  80ea80:	d8c02b15 	stw	r3,172(sp)
  80ea84:	08106300 	call	810630 <__muldf3>
  80ea88:	0011883a 	mov	r8,zero
  80ea8c:	026ff434 	movhi	r9,49104
  80ea90:	480f883a 	mov	r7,r9
  80ea94:	8009883a 	mov	r4,r16
  80ea98:	880b883a 	mov	r5,r17
  80ea9c:	400d883a 	mov	r6,r8
  80eaa0:	1029883a 	mov	r20,r2
  80eaa4:	182b883a 	mov	r21,r3
  80eaa8:	08106300 	call	810630 <__muldf3>
  80eaac:	02155574 	movhi	r8,21845
  80eab0:	42155544 	addi	r8,r8,21845
  80eab4:	024ff574 	movhi	r9,16341
  80eab8:	4a555544 	addi	r9,r9,21845
  80eabc:	480f883a 	mov	r7,r9
  80eac0:	400d883a 	mov	r6,r8
  80eac4:	180b883a 	mov	r5,r3
  80eac8:	1009883a 	mov	r4,r2
  80eacc:	08105bc0 	call	8105bc <__adddf3>
  80ead0:	180f883a 	mov	r7,r3
  80ead4:	8009883a 	mov	r4,r16
  80ead8:	880b883a 	mov	r5,r17
  80eadc:	100d883a 	mov	r6,r2
  80eae0:	08106300 	call	810630 <__muldf3>
  80eae4:	0011883a 	mov	r8,zero
  80eae8:	024ff834 	movhi	r9,16352
  80eaec:	480b883a 	mov	r5,r9
  80eaf0:	4009883a 	mov	r4,r8
  80eaf4:	180f883a 	mov	r7,r3
  80eaf8:	100d883a 	mov	r6,r2
  80eafc:	081053c0 	call	81053c <__subdf3>
  80eb00:	180f883a 	mov	r7,r3
  80eb04:	a80b883a 	mov	r5,r21
  80eb08:	a009883a 	mov	r4,r20
  80eb0c:	100d883a 	mov	r6,r2
  80eb10:	08106300 	call	810630 <__muldf3>
  80eb14:	02194b34 	movhi	r8,25900
  80eb18:	4220bf84 	addi	r8,r8,-32002
  80eb1c:	026ffdf4 	movhi	r9,49143
  80eb20:	4a4551c4 	addi	r9,r9,5447
  80eb24:	480f883a 	mov	r7,r9
  80eb28:	400d883a 	mov	r6,r8
  80eb2c:	180b883a 	mov	r5,r3
  80eb30:	1009883a 	mov	r4,r2
  80eb34:	08106300 	call	810630 <__muldf3>
  80eb38:	d9402b17 	ldw	r5,172(sp)
  80eb3c:	d9002a17 	ldw	r4,168(sp)
  80eb40:	180f883a 	mov	r7,r3
  80eb44:	100d883a 	mov	r6,r2
  80eb48:	08105bc0 	call	8105bc <__adddf3>
  80eb4c:	100d883a 	mov	r6,r2
  80eb50:	b009883a 	mov	r4,r22
  80eb54:	b80b883a 	mov	r5,r23
  80eb58:	180f883a 	mov	r7,r3
  80eb5c:	1021883a 	mov	r16,r2
  80eb60:	1823883a 	mov	r17,r3
  80eb64:	08105bc0 	call	8105bc <__adddf3>
  80eb68:	180b883a 	mov	r5,r3
  80eb6c:	0009883a 	mov	r4,zero
  80eb70:	b00d883a 	mov	r6,r22
  80eb74:	b80f883a 	mov	r7,r23
  80eb78:	d9001b15 	stw	r4,108(sp)
  80eb7c:	d8c01c15 	stw	r3,112(sp)
  80eb80:	081053c0 	call	81053c <__subdf3>
  80eb84:	1011883a 	mov	r8,r2
  80eb88:	1813883a 	mov	r9,r3
  80eb8c:	8009883a 	mov	r4,r16
  80eb90:	880b883a 	mov	r5,r17
  80eb94:	003f0b06 	br	80e7c4 <__ieee754_pow+0x998>
  80eb98:	0005883a 	mov	r2,zero
  80eb9c:	00d0d034 	movhi	r3,17216
  80eba0:	580b883a 	mov	r5,r11
  80eba4:	5009883a 	mov	r4,r10
  80eba8:	180f883a 	mov	r7,r3
  80ebac:	100d883a 	mov	r6,r2
  80ebb0:	08106300 	call	810630 <__muldf3>
  80ebb4:	1015883a 	mov	r10,r2
  80ebb8:	1825883a 	mov	r18,r3
  80ebbc:	017ff2c4 	movi	r5,-53
  80ebc0:	003d6606 	br	80e15c <__ieee754_pow+0x330>
  80ebc4:	b03d300e 	bge	r22,zero,80e088 <__ieee754_pow+0x25c>
  80ebc8:	d9402917 	ldw	r5,164(sp)
  80ebcc:	28e0003c 	xorhi	r3,r5,32768
  80ebd0:	d8c02915 	stw	r3,164(sp)
  80ebd4:	003cbc06 	br	80dec8 <__ieee754_pow+0x9c>
  80ebd8:	00800044 	movi	r2,1
  80ebdc:	e0bd1a1e 	bne	fp,r2,80e048 <__ieee754_pow+0x21c>
  80ebe0:	48e0003c 	xorhi	r3,r9,32768
  80ebe4:	da002815 	stw	r8,160(sp)
  80ebe8:	d8c02915 	stw	r3,164(sp)
  80ebec:	003cb606 	br	80dec8 <__ieee754_pow+0x9c>
  80ebf0:	d9001817 	ldw	r4,96(sp)
  80ebf4:	00a00034 	movhi	r2,32768
  80ebf8:	10bfffc4 	addi	r2,r2,-1
  80ebfc:	20b8703a 	and	fp,r4,r2
  80ec00:	008ff834 	movhi	r2,16352
  80ec04:	1700fc16 	blt	r2,fp,80eff8 <__ieee754_pow+0x11cc>
  80ec08:	0039883a 	mov	fp,zero
  80ec0c:	d8001315 	stw	zero,76(sp)
  80ec10:	0025883a 	mov	r18,zero
  80ec14:	0005883a 	mov	r2,zero
  80ec18:	00cff9b4 	movhi	r3,16358
  80ec1c:	18cb90c4 	addi	r3,r3,11843
  80ec20:	9009883a 	mov	r4,r18
  80ec24:	b80b883a 	mov	r5,r23
  80ec28:	180f883a 	mov	r7,r3
  80ec2c:	100d883a 	mov	r6,r2
  80ec30:	08106300 	call	810630 <__muldf3>
  80ec34:	d9c02017 	ldw	r7,128(sp)
  80ec38:	d9801f17 	ldw	r6,124(sp)
  80ec3c:	9009883a 	mov	r4,r18
  80ec40:	b80b883a 	mov	r5,r23
  80ec44:	b823883a 	mov	r17,r23
  80ec48:	102d883a 	mov	r22,r2
  80ec4c:	182f883a 	mov	r23,r3
  80ec50:	081053c0 	call	81053c <__subdf3>
  80ec54:	d9401e17 	ldw	r5,120(sp)
  80ec58:	d9001d17 	ldw	r4,116(sp)
  80ec5c:	180f883a 	mov	r7,r3
  80ec60:	100d883a 	mov	r6,r2
  80ec64:	081053c0 	call	81053c <__subdf3>
  80ec68:	023fbeb4 	movhi	r8,65274
  80ec6c:	420e7bc4 	addi	r8,r8,14831
  80ec70:	024ff9b4 	movhi	r9,16358
  80ec74:	4a4b9084 	addi	r9,r9,11842
  80ec78:	480f883a 	mov	r7,r9
  80ec7c:	400d883a 	mov	r6,r8
  80ec80:	180b883a 	mov	r5,r3
  80ec84:	1009883a 	mov	r4,r2
  80ec88:	08106300 	call	810630 <__muldf3>
  80ec8c:	02032a34 	movhi	r8,3240
  80ec90:	421b0e44 	addi	r8,r8,27705
  80ec94:	026f8834 	movhi	r9,48672
  80ec98:	4a571844 	addi	r9,r9,23649
  80ec9c:	480f883a 	mov	r7,r9
  80eca0:	400d883a 	mov	r6,r8
  80eca4:	9009883a 	mov	r4,r18
  80eca8:	880b883a 	mov	r5,r17
  80ecac:	1021883a 	mov	r16,r2
  80ecb0:	1823883a 	mov	r17,r3
  80ecb4:	08106300 	call	810630 <__muldf3>
  80ecb8:	180f883a 	mov	r7,r3
  80ecbc:	880b883a 	mov	r5,r17
  80ecc0:	8009883a 	mov	r4,r16
  80ecc4:	100d883a 	mov	r6,r2
  80ecc8:	08105bc0 	call	8105bc <__adddf3>
  80eccc:	100d883a 	mov	r6,r2
  80ecd0:	b009883a 	mov	r4,r22
  80ecd4:	b80b883a 	mov	r5,r23
  80ecd8:	180f883a 	mov	r7,r3
  80ecdc:	1021883a 	mov	r16,r2
  80ece0:	1823883a 	mov	r17,r3
  80ece4:	08105bc0 	call	8105bc <__adddf3>
  80ece8:	1009883a 	mov	r4,r2
  80ecec:	180b883a 	mov	r5,r3
  80ecf0:	b00d883a 	mov	r6,r22
  80ecf4:	b80f883a 	mov	r7,r23
  80ecf8:	d8803915 	stw	r2,228(sp)
  80ecfc:	d8c03a15 	stw	r3,232(sp)
  80ed00:	d8801115 	stw	r2,68(sp)
  80ed04:	d8c01215 	stw	r3,72(sp)
  80ed08:	081053c0 	call	81053c <__subdf3>
  80ed0c:	180f883a 	mov	r7,r3
  80ed10:	8009883a 	mov	r4,r16
  80ed14:	880b883a 	mov	r5,r17
  80ed18:	100d883a 	mov	r6,r2
  80ed1c:	081053c0 	call	81053c <__subdf3>
  80ed20:	d9001117 	ldw	r4,68(sp)
  80ed24:	d9403a17 	ldw	r5,232(sp)
  80ed28:	1029883a 	mov	r20,r2
  80ed2c:	200d883a 	mov	r6,r4
  80ed30:	280f883a 	mov	r7,r5
  80ed34:	182b883a 	mov	r21,r3
  80ed38:	08106300 	call	810630 <__muldf3>
  80ed3c:	1021883a 	mov	r16,r2
  80ed40:	1823883a 	mov	r17,r3
  80ed44:	009caff4 	movhi	r2,29375
  80ed48:	10a93404 	addi	r2,r2,-23344
  80ed4c:	00cf99b4 	movhi	r3,15974
  80ed50:	18cdda44 	addi	r3,r3,14185
  80ed54:	8009883a 	mov	r4,r16
  80ed58:	880b883a 	mov	r5,r17
  80ed5c:	180f883a 	mov	r7,r3
  80ed60:	100d883a 	mov	r6,r2
  80ed64:	08106300 	call	810630 <__muldf3>
  80ed68:	023174b4 	movhi	r8,50642
  80ed6c:	421afc44 	addi	r8,r8,27633
  80ed70:	024faf34 	movhi	r9,16060
  80ed74:	4a6f5044 	addi	r9,r9,-17087
  80ed78:	480f883a 	mov	r7,r9
  80ed7c:	400d883a 	mov	r6,r8
  80ed80:	180b883a 	mov	r5,r3
  80ed84:	1009883a 	mov	r4,r2
  80ed88:	081053c0 	call	81053c <__subdf3>
  80ed8c:	180f883a 	mov	r7,r3
  80ed90:	8009883a 	mov	r4,r16
  80ed94:	880b883a 	mov	r5,r17
  80ed98:	100d883a 	mov	r6,r2
  80ed9c:	08106300 	call	810630 <__muldf3>
  80eda0:	022bc9b4 	movhi	r8,44838
  80eda4:	42378b04 	addi	r8,r8,-8660
  80eda8:	024fc474 	movhi	r9,16145
  80edac:	4a559a84 	addi	r9,r9,22122
  80edb0:	480f883a 	mov	r7,r9
  80edb4:	400d883a 	mov	r6,r8
  80edb8:	180b883a 	mov	r5,r3
  80edbc:	1009883a 	mov	r4,r2
  80edc0:	08105bc0 	call	8105bc <__adddf3>
  80edc4:	180f883a 	mov	r7,r3
  80edc8:	8009883a 	mov	r4,r16
  80edcc:	880b883a 	mov	r5,r17
  80edd0:	100d883a 	mov	r6,r2
  80edd4:	08106300 	call	810630 <__muldf3>
  80edd8:	0205aff4 	movhi	r8,5823
  80eddc:	422f64c4 	addi	r8,r8,-17005
  80ede0:	024fd9f4 	movhi	r9,16231
  80ede4:	4a705b04 	addi	r9,r9,-16020
  80ede8:	480f883a 	mov	r7,r9
  80edec:	400d883a 	mov	r6,r8
  80edf0:	180b883a 	mov	r5,r3
  80edf4:	1009883a 	mov	r4,r2
  80edf8:	081053c0 	call	81053c <__subdf3>
  80edfc:	180f883a 	mov	r7,r3
  80ee00:	8009883a 	mov	r4,r16
  80ee04:	880b883a 	mov	r5,r17
  80ee08:	100d883a 	mov	r6,r2
  80ee0c:	08106300 	call	810630 <__muldf3>
  80ee10:	02155574 	movhi	r8,21845
  80ee14:	42154f84 	addi	r8,r8,21822
  80ee18:	024ff174 	movhi	r9,16325
  80ee1c:	4a555544 	addi	r9,r9,21845
  80ee20:	480f883a 	mov	r7,r9
  80ee24:	400d883a 	mov	r6,r8
  80ee28:	180b883a 	mov	r5,r3
  80ee2c:	1009883a 	mov	r4,r2
  80ee30:	08105bc0 	call	8105bc <__adddf3>
  80ee34:	180f883a 	mov	r7,r3
  80ee38:	8009883a 	mov	r4,r16
  80ee3c:	880b883a 	mov	r5,r17
  80ee40:	100d883a 	mov	r6,r2
  80ee44:	08106300 	call	810630 <__muldf3>
  80ee48:	d9001117 	ldw	r4,68(sp)
  80ee4c:	d9403a17 	ldw	r5,232(sp)
  80ee50:	180f883a 	mov	r7,r3
  80ee54:	100d883a 	mov	r6,r2
  80ee58:	081053c0 	call	81053c <__subdf3>
  80ee5c:	d9001117 	ldw	r4,68(sp)
  80ee60:	d9403a17 	ldw	r5,232(sp)
  80ee64:	100d883a 	mov	r6,r2
  80ee68:	180f883a 	mov	r7,r3
  80ee6c:	1021883a 	mov	r16,r2
  80ee70:	1823883a 	mov	r17,r3
  80ee74:	08106300 	call	810630 <__muldf3>
  80ee78:	0011883a 	mov	r8,zero
  80ee7c:	02500034 	movhi	r9,16384
  80ee80:	480f883a 	mov	r7,r9
  80ee84:	400d883a 	mov	r6,r8
  80ee88:	8009883a 	mov	r4,r16
  80ee8c:	880b883a 	mov	r5,r17
  80ee90:	1021883a 	mov	r16,r2
  80ee94:	1823883a 	mov	r17,r3
  80ee98:	081053c0 	call	81053c <__subdf3>
  80ee9c:	180f883a 	mov	r7,r3
  80eea0:	880b883a 	mov	r5,r17
  80eea4:	8009883a 	mov	r4,r16
  80eea8:	100d883a 	mov	r6,r2
  80eeac:	08109f40 	call	8109f4 <__divdf3>
  80eeb0:	d9001117 	ldw	r4,68(sp)
  80eeb4:	d9403a17 	ldw	r5,232(sp)
  80eeb8:	a00d883a 	mov	r6,r20
  80eebc:	a80f883a 	mov	r7,r21
  80eec0:	1025883a 	mov	r18,r2
  80eec4:	1827883a 	mov	r19,r3
  80eec8:	08106300 	call	810630 <__muldf3>
  80eecc:	180f883a 	mov	r7,r3
  80eed0:	a009883a 	mov	r4,r20
  80eed4:	a80b883a 	mov	r5,r21
  80eed8:	100d883a 	mov	r6,r2
  80eedc:	08105bc0 	call	8105bc <__adddf3>
  80eee0:	180f883a 	mov	r7,r3
  80eee4:	980b883a 	mov	r5,r19
  80eee8:	9009883a 	mov	r4,r18
  80eeec:	100d883a 	mov	r6,r2
  80eef0:	081053c0 	call	81053c <__subdf3>
  80eef4:	d9801117 	ldw	r6,68(sp)
  80eef8:	d9c03a17 	ldw	r7,232(sp)
  80eefc:	180b883a 	mov	r5,r3
  80ef00:	1009883a 	mov	r4,r2
  80ef04:	081053c0 	call	81053c <__subdf3>
  80ef08:	0011883a 	mov	r8,zero
  80ef0c:	024ffc34 	movhi	r9,16368
  80ef10:	480b883a 	mov	r5,r9
  80ef14:	180f883a 	mov	r7,r3
  80ef18:	4009883a 	mov	r4,r8
  80ef1c:	100d883a 	mov	r6,r2
  80ef20:	081053c0 	call	81053c <__subdf3>
  80ef24:	100b883a 	mov	r5,r2
  80ef28:	d8801317 	ldw	r2,76(sp)
  80ef2c:	10d5883a 	add	r10,r2,r3
  80ef30:	5005d53a 	srai	r2,r10,20
  80ef34:	0080720e 	bge	zero,r2,80f100 <__ieee754_pow+0x12d4>
  80ef38:	2811883a 	mov	r8,r5
  80ef3c:	5013883a 	mov	r9,r10
  80ef40:	d9c01a17 	ldw	r7,104(sp)
  80ef44:	d9801917 	ldw	r6,100(sp)
  80ef48:	480b883a 	mov	r5,r9
  80ef4c:	4009883a 	mov	r4,r8
  80ef50:	003e8206 	br	80e95c <__ieee754_pow+0xb30>
  80ef54:	0009883a 	mov	r4,zero
  80ef58:	800b883a 	mov	r5,r16
  80ef5c:	a80f883a 	mov	r7,r21
  80ef60:	a00d883a 	mov	r6,r20
  80ef64:	003c2b06 	br	80e014 <__ieee754_pow+0x1e8>
  80ef68:	d9001d17 	ldw	r4,116(sp)
  80ef6c:	00994b34 	movhi	r2,25900
  80ef70:	10a0bf84 	addi	r2,r2,-32002
  80ef74:	00cf25f4 	movhi	r3,15511
  80ef78:	18c551c4 	addi	r3,r3,5447
  80ef7c:	a80b883a 	mov	r5,r21
  80ef80:	180f883a 	mov	r7,r3
  80ef84:	100d883a 	mov	r6,r2
  80ef88:	08105bc0 	call	8105bc <__adddf3>
  80ef8c:	d9801f17 	ldw	r6,124(sp)
  80ef90:	880b883a 	mov	r5,r17
  80ef94:	8009883a 	mov	r4,r16
  80ef98:	980f883a 	mov	r7,r19
  80ef9c:	1021883a 	mov	r16,r2
  80efa0:	1823883a 	mov	r17,r3
  80efa4:	081053c0 	call	81053c <__subdf3>
  80efa8:	180f883a 	mov	r7,r3
  80efac:	880b883a 	mov	r5,r17
  80efb0:	8009883a 	mov	r4,r16
  80efb4:	100d883a 	mov	r6,r2
  80efb8:	0810d5c0 	call	810d5c <__gtdf2>
  80efbc:	00bf0c0e 	bge	zero,r2,80ebf0 <__ieee754_pow+0xdc4>
  80efc0:	04220034 	movhi	r16,34816
  80efc4:	841d6704 	addi	r16,r16,30108
  80efc8:	045f8e34 	movhi	r17,32312
  80efcc:	8c790f04 	addi	r17,r17,-7108
  80efd0:	d9401a17 	ldw	r5,104(sp)
  80efd4:	d9001917 	ldw	r4,100(sp)
  80efd8:	800d883a 	mov	r6,r16
  80efdc:	880f883a 	mov	r7,r17
  80efe0:	08106300 	call	810630 <__muldf3>
  80efe4:	180b883a 	mov	r5,r3
  80efe8:	800d883a 	mov	r6,r16
  80efec:	880f883a 	mov	r7,r17
  80eff0:	1009883a 	mov	r4,r2
  80eff4:	003e5906 	br	80e95c <__ieee754_pow+0xb30>
  80eff8:	e005d53a 	srai	r2,fp,20
  80effc:	01800434 	movhi	r6,16
  80f000:	d9401817 	ldw	r5,96(sp)
  80f004:	10bf0084 	addi	r2,r2,-1022
  80f008:	308dd83a 	sra	r6,r6,r2
  80f00c:	02000434 	movhi	r8,16
  80f010:	423fffc4 	addi	r8,r8,-1
  80f014:	0005883a 	mov	r2,zero
  80f018:	298d883a 	add	r6,r5,r6
  80f01c:	318b883a 	add	r5,r6,r6
  80f020:	320e703a 	and	r7,r6,r8
  80f024:	1013883a 	mov	r9,r2
  80f028:	280ad57a 	srli	r5,r5,21
  80f02c:	d8801817 	ldw	r2,96(sp)
  80f030:	01000504 	movi	r4,20
  80f034:	297f0044 	addi	r5,r5,-1023
  80f038:	4151d83a 	sra	r8,r8,r5
  80f03c:	39c00434 	orhi	r7,r7,16
  80f040:	2149c83a 	sub	r4,r4,r5
  80f044:	0210303a 	nor	r8,zero,r8
  80f048:	3939d83a 	sra	fp,r7,r4
  80f04c:	320e703a 	and	r7,r6,r8
  80f050:	10002916 	blt	r2,zero,80f0f8 <__ieee754_pow+0x12cc>
  80f054:	d9402017 	ldw	r5,128(sp)
  80f058:	d9001f17 	ldw	r4,124(sp)
  80f05c:	480d883a 	mov	r6,r9
  80f060:	081053c0 	call	81053c <__subdf3>
  80f064:	180b883a 	mov	r5,r3
  80f068:	d9402015 	stw	r5,128(sp)
  80f06c:	280f883a 	mov	r7,r5
  80f070:	d9001d17 	ldw	r4,116(sp)
  80f074:	d9401e17 	ldw	r5,120(sp)
  80f078:	1007883a 	mov	r3,r2
  80f07c:	180d883a 	mov	r6,r3
  80f080:	d8801f15 	stw	r2,124(sp)
  80f084:	08105bc0 	call	8105bc <__adddf3>
  80f088:	180b883a 	mov	r5,r3
  80f08c:	e006953a 	slli	r3,fp,20
  80f090:	282f883a 	mov	r23,r5
  80f094:	d8c01315 	stw	r3,76(sp)
  80f098:	003edd06 	br	80ec10 <__ieee754_pow+0xde4>
  80f09c:	383bc81e 	bne	r7,zero,80dfc0 <__ieee754_pow+0x194>
  80f0a0:	28c5c83a 	sub	r2,r5,r3
  80f0a4:	8087d83a 	sra	r3,r16,r2
  80f0a8:	1884983a 	sll	r2,r3,r2
  80f0ac:	80801b26 	beq	r16,r2,80f11c <__ieee754_pow+0x12f0>
  80f0b0:	0039883a 	mov	fp,zero
  80f0b4:	003b9d06 	br	80df2c <__ieee754_pow+0x100>
  80f0b8:	d9801f17 	ldw	r6,124(sp)
  80f0bc:	8009883a 	mov	r4,r16
  80f0c0:	880b883a 	mov	r5,r17
  80f0c4:	980f883a 	mov	r7,r19
  80f0c8:	081053c0 	call	81053c <__subdf3>
  80f0cc:	d9001d17 	ldw	r4,116(sp)
  80f0d0:	a80b883a 	mov	r5,r21
  80f0d4:	180f883a 	mov	r7,r3
  80f0d8:	100d883a 	mov	r6,r2
  80f0dc:	0810e6c0 	call	810e6c <__ledf2>
  80f0e0:	00bfc516 	blt	zero,r2,80eff8 <__ieee754_pow+0x11cc>
  80f0e4:	0430be74 	movhi	r16,49913
  80f0e8:	843cd644 	addi	r16,r16,-3239
  80f0ec:	04406974 	movhi	r17,421
  80f0f0:	8c5b87c4 	addi	r17,r17,28191
  80f0f4:	003fb606 	br	80efd0 <__ieee754_pow+0x11a4>
  80f0f8:	0739c83a 	sub	fp,zero,fp
  80f0fc:	003fd506 	br	80f054 <__ieee754_pow+0x1228>
  80f100:	2809883a 	mov	r4,r5
  80f104:	e00d883a 	mov	r6,fp
  80f108:	180b883a 	mov	r5,r3
  80f10c:	080f6800 	call	80f680 <scalbn>
  80f110:	1011883a 	mov	r8,r2
  80f114:	1813883a 	mov	r9,r3
  80f118:	003f8906 	br	80ef40 <__ieee754_pow+0x1114>
  80f11c:	18c0004c 	andi	r3,r3,1
  80f120:	00800084 	movi	r2,2
  80f124:	10f9c83a 	sub	fp,r2,r3
  80f128:	003b8006 	br	80df2c <__ieee754_pow+0x100>

0080f12c <__ieee754_sqrt>:
  80f12c:	defffd04 	addi	sp,sp,-12
  80f130:	dc000015 	stw	r16,0(sp)
  80f134:	009ffc34 	movhi	r2,32752
  80f138:	2021883a 	mov	r16,r4
  80f13c:	291ffc2c 	andhi	r4,r5,32752
  80f140:	dc400115 	stw	r17,4(sp)
  80f144:	dfc00215 	stw	ra,8(sp)
  80f148:	2823883a 	mov	r17,r5
  80f14c:	280f883a 	mov	r7,r5
  80f150:	2807883a 	mov	r3,r5
  80f154:	8011883a 	mov	r8,r16
  80f158:	20807d26 	beq	r4,r2,80f350 <__ieee754_sqrt+0x224>
  80f15c:	01408d0e 	bge	zero,r5,80f394 <__ieee754_sqrt+0x268>
  80f160:	380dd53a 	srai	r6,r7,20
  80f164:	3000131e 	bne	r6,zero,80f1b4 <__ieee754_sqrt+0x88>
  80f168:	1800041e 	bne	r3,zero,80f17c <__ieee754_sqrt+0x50>
  80f16c:	400ed2fa 	srli	r7,r8,11
  80f170:	31bffac4 	addi	r6,r6,-21
  80f174:	4010957a 	slli	r8,r8,21
  80f178:	383ffc26 	beq	r7,zero,80f16c <__ieee754_sqrt+0x40>
  80f17c:	3880042c 	andhi	r2,r7,16
  80f180:	1000991e 	bne	r2,zero,80f3e8 <__ieee754_sqrt+0x2bc>
  80f184:	0009883a 	mov	r4,zero
  80f188:	39cf883a 	add	r7,r7,r7
  80f18c:	3880042c 	andhi	r2,r7,16
  80f190:	21000044 	addi	r4,r4,1
  80f194:	103ffc26 	beq	r2,zero,80f188 <__ieee754_sqrt+0x5c>
  80f198:	00800804 	movi	r2,32
  80f19c:	1105c83a 	sub	r2,r2,r4
  80f1a0:	4086d83a 	srl	r3,r8,r2
  80f1a4:	4110983a 	sll	r8,r8,r4
  80f1a8:	3105c83a 	sub	r2,r6,r4
  80f1ac:	38ceb03a 	or	r7,r7,r3
  80f1b0:	11800044 	addi	r6,r2,1
  80f1b4:	31bf0044 	addi	r6,r6,-1023
  80f1b8:	30c0004c 	andi	r3,r6,1
  80f1bc:	00800434 	movhi	r2,16
  80f1c0:	10bfffc4 	addi	r2,r2,-1
  80f1c4:	3884703a 	and	r2,r7,r2
  80f1c8:	1807003a 	cmpeq	r3,r3,zero
  80f1cc:	11000434 	orhi	r4,r2,16
  80f1d0:	18005426 	beq	r3,zero,80f324 <__ieee754_sqrt+0x1f8>
  80f1d4:	4004d7fa 	srli	r2,r8,31
  80f1d8:	4207883a 	add	r3,r8,r8
  80f1dc:	02800834 	movhi	r10,32
  80f1e0:	1105883a 	add	r2,r2,r4
  80f1e4:	2089883a 	add	r4,r4,r2
  80f1e8:	0011883a 	mov	r8,zero
  80f1ec:	000b883a 	mov	r5,zero
  80f1f0:	0013883a 	mov	r9,zero
  80f1f4:	02c00584 	movi	r11,22
  80f1f8:	520f883a 	add	r7,r10,r8
  80f1fc:	1804d7fa 	srli	r2,r3,31
  80f200:	4a400044 	addi	r9,r9,1
  80f204:	18c7883a 	add	r3,r3,r3
  80f208:	21c00316 	blt	r4,r7,80f218 <__ieee754_sqrt+0xec>
  80f20c:	21c9c83a 	sub	r4,r4,r7
  80f210:	2a8b883a 	add	r5,r5,r10
  80f214:	51d1883a 	add	r8,r10,r7
  80f218:	1105883a 	add	r2,r2,r4
  80f21c:	5014d07a 	srli	r10,r10,1
  80f220:	2089883a 	add	r4,r4,r2
  80f224:	4afff41e 	bne	r9,r11,80f1f8 <__ieee754_sqrt+0xcc>
  80f228:	02600034 	movhi	r9,32768
  80f22c:	0017883a 	mov	r11,zero
  80f230:	0019883a 	mov	r12,zero
  80f234:	0015883a 	mov	r10,zero
  80f238:	4821883a 	mov	r16,r9
  80f23c:	03c00804 	movi	r15,32
  80f240:	00000806 	br	80f264 <__ieee754_sqrt+0x138>
  80f244:	22003426 	beq	r4,r8,80f318 <__ieee754_sqrt+0x1ec>
  80f248:	1804d7fa 	srli	r2,r3,31
  80f24c:	52800044 	addi	r10,r10,1
  80f250:	18c7883a 	add	r3,r3,r3
  80f254:	1105883a 	add	r2,r2,r4
  80f258:	2089883a 	add	r4,r4,r2
  80f25c:	4812d07a 	srli	r9,r9,1
  80f260:	53c01326 	beq	r10,r15,80f2b0 <__ieee754_sqrt+0x184>
  80f264:	4acf883a 	add	r7,r9,r11
  80f268:	413ff60e 	bge	r8,r4,80f244 <__ieee754_sqrt+0x118>
  80f26c:	38a0002c 	andhi	r2,r7,32768
  80f270:	3a57883a 	add	r11,r7,r9
  80f274:	14002426 	beq	r2,r16,80f308 <__ieee754_sqrt+0x1dc>
  80f278:	4005883a 	mov	r2,r8
  80f27c:	2209c83a 	sub	r4,r4,r8
  80f280:	19c0012e 	bgeu	r3,r7,80f288 <__ieee754_sqrt+0x15c>
  80f284:	213fffc4 	addi	r4,r4,-1
  80f288:	19c7c83a 	sub	r3,r3,r7
  80f28c:	1011883a 	mov	r8,r2
  80f290:	1804d7fa 	srli	r2,r3,31
  80f294:	52800044 	addi	r10,r10,1
  80f298:	6259883a 	add	r12,r12,r9
  80f29c:	1105883a 	add	r2,r2,r4
  80f2a0:	18c7883a 	add	r3,r3,r3
  80f2a4:	2089883a 	add	r4,r4,r2
  80f2a8:	4812d07a 	srli	r9,r9,1
  80f2ac:	53ffed1e 	bne	r10,r15,80f264 <__ieee754_sqrt+0x138>
  80f2b0:	20c4b03a 	or	r2,r4,r3
  80f2b4:	1000201e 	bne	r2,zero,80f338 <__ieee754_sqrt+0x20c>
  80f2b8:	600ed07a 	srli	r7,r12,1
  80f2bc:	2880004c 	andi	r2,r5,1
  80f2c0:	1005003a 	cmpeq	r2,r2,zero
  80f2c4:	1000011e 	bne	r2,zero,80f2cc <__ieee754_sqrt+0x1a0>
  80f2c8:	39e00034 	orhi	r7,r7,32768
  80f2cc:	300dd07a 	srai	r6,r6,1
  80f2d0:	280bd07a 	srai	r5,r5,1
  80f2d4:	010ff834 	movhi	r4,16352
  80f2d8:	300c953a 	slli	r6,r6,20
  80f2dc:	290b883a 	add	r5,r5,r4
  80f2e0:	3821883a 	mov	r16,r7
  80f2e4:	299d883a 	add	r14,r5,r6
  80f2e8:	7023883a 	mov	r17,r14
  80f2ec:	8005883a 	mov	r2,r16
  80f2f0:	8807883a 	mov	r3,r17
  80f2f4:	dfc00217 	ldw	ra,8(sp)
  80f2f8:	dc400117 	ldw	r17,4(sp)
  80f2fc:	dc000017 	ldw	r16,0(sp)
  80f300:	dec00304 	addi	sp,sp,12
  80f304:	f800283a 	ret
  80f308:	5884703a 	and	r2,r11,r2
  80f30c:	103fda1e 	bne	r2,zero,80f278 <__ieee754_sqrt+0x14c>
  80f310:	40800044 	addi	r2,r8,1
  80f314:	003fd906 	br	80f27c <__ieee754_sqrt+0x150>
  80f318:	19ffd42e 	bgeu	r3,r7,80f26c <__ieee754_sqrt+0x140>
  80f31c:	2011883a 	mov	r8,r4
  80f320:	003fc906 	br	80f248 <__ieee754_sqrt+0x11c>
  80f324:	4004d7fa 	srli	r2,r8,31
  80f328:	4211883a 	add	r8,r8,r8
  80f32c:	1105883a 	add	r2,r2,r4
  80f330:	2089883a 	add	r4,r4,r2
  80f334:	003fa706 	br	80f1d4 <__ieee754_sqrt+0xa8>
  80f338:	00bfffc4 	movi	r2,-1
  80f33c:	60802726 	beq	r12,r2,80f3dc <__ieee754_sqrt+0x2b0>
  80f340:	6080004c 	andi	r2,r12,1
  80f344:	6085883a 	add	r2,r12,r2
  80f348:	100ed07a 	srli	r7,r2,1
  80f34c:	003fdb06 	br	80f2bc <__ieee754_sqrt+0x190>
  80f350:	8009883a 	mov	r4,r16
  80f354:	800d883a 	mov	r6,r16
  80f358:	08106300 	call	810630 <__muldf3>
  80f35c:	180f883a 	mov	r7,r3
  80f360:	880b883a 	mov	r5,r17
  80f364:	8009883a 	mov	r4,r16
  80f368:	100d883a 	mov	r6,r2
  80f36c:	08105bc0 	call	8105bc <__adddf3>
  80f370:	1021883a 	mov	r16,r2
  80f374:	1823883a 	mov	r17,r3
  80f378:	8005883a 	mov	r2,r16
  80f37c:	8807883a 	mov	r3,r17
  80f380:	dfc00217 	ldw	ra,8(sp)
  80f384:	dc400117 	ldw	r17,4(sp)
  80f388:	dc000017 	ldw	r16,0(sp)
  80f38c:	dec00304 	addi	sp,sp,12
  80f390:	f800283a 	ret
  80f394:	00a00034 	movhi	r2,32768
  80f398:	10bfffc4 	addi	r2,r2,-1
  80f39c:	2884703a 	and	r2,r5,r2
  80f3a0:	8084b03a 	or	r2,r16,r2
  80f3a4:	103fd126 	beq	r2,zero,80f2ec <__ieee754_sqrt+0x1c0>
  80f3a8:	283f6d26 	beq	r5,zero,80f160 <__ieee754_sqrt+0x34>
  80f3ac:	280f883a 	mov	r7,r5
  80f3b0:	8009883a 	mov	r4,r16
  80f3b4:	800d883a 	mov	r6,r16
  80f3b8:	081053c0 	call	81053c <__subdf3>
  80f3bc:	1009883a 	mov	r4,r2
  80f3c0:	180b883a 	mov	r5,r3
  80f3c4:	100d883a 	mov	r6,r2
  80f3c8:	180f883a 	mov	r7,r3
  80f3cc:	08109f40 	call	8109f4 <__divdf3>
  80f3d0:	1021883a 	mov	r16,r2
  80f3d4:	1823883a 	mov	r17,r3
  80f3d8:	003fc406 	br	80f2ec <__ieee754_sqrt+0x1c0>
  80f3dc:	29400044 	addi	r5,r5,1
  80f3e0:	000f883a 	mov	r7,zero
  80f3e4:	003fb506 	br	80f2bc <__ieee754_sqrt+0x190>
  80f3e8:	0009883a 	mov	r4,zero
  80f3ec:	00800804 	movi	r2,32
  80f3f0:	003f6b06 	br	80f1a0 <__ieee754_sqrt+0x74>

0080f3f4 <fabs>:
  80f3f4:	01e00034 	movhi	r7,32768
  80f3f8:	39ffffc4 	addi	r7,r7,-1
  80f3fc:	394e703a 	and	r7,r7,r5
  80f400:	2005883a 	mov	r2,r4
  80f404:	3807883a 	mov	r3,r7
  80f408:	f800283a 	ret

0080f40c <finite>:
  80f40c:	00a00034 	movhi	r2,32768
  80f410:	10bfffc4 	addi	r2,r2,-1
  80f414:	2884703a 	and	r2,r5,r2
  80f418:	01600434 	movhi	r5,32784
  80f41c:	1145883a 	add	r2,r2,r5
  80f420:	1004d7fa 	srli	r2,r2,31
  80f424:	f800283a 	ret

0080f428 <__isnand>:
  80f428:	200d883a 	mov	r6,r4
  80f42c:	0109c83a 	sub	r4,zero,r4
  80f430:	2188b03a 	or	r4,r4,r6
  80f434:	2008d7fa 	srli	r4,r4,31
  80f438:	00a00034 	movhi	r2,32768
  80f43c:	10bfffc4 	addi	r2,r2,-1
  80f440:	1144703a 	and	r2,r2,r5
  80f444:	2088b03a 	or	r4,r4,r2
  80f448:	009ffc34 	movhi	r2,32752
  80f44c:	1105c83a 	sub	r2,r2,r4
  80f450:	1004d7fa 	srli	r2,r2,31
  80f454:	f800283a 	ret

0080f458 <matherr>:
  80f458:	0005883a 	mov	r2,zero
  80f45c:	f800283a 	ret

0080f460 <nan>:
  80f460:	015ffe34 	movhi	r5,32760
  80f464:	0005883a 	mov	r2,zero
  80f468:	2807883a 	mov	r3,r5
  80f46c:	f800283a 	ret

0080f470 <rint>:
  80f470:	2015883a 	mov	r10,r4
  80f474:	2809d53a 	srai	r4,r5,20
  80f478:	defff904 	addi	sp,sp,-28
  80f47c:	034004c4 	movi	r13,19
  80f480:	2101ffcc 	andi	r4,r4,2047
  80f484:	227f0044 	addi	r9,r4,-1023
  80f488:	dc800415 	stw	r18,16(sp)
  80f48c:	dfc00615 	stw	ra,24(sp)
  80f490:	dcc00515 	stw	r19,20(sp)
  80f494:	dc400315 	stw	r17,12(sp)
  80f498:	dc000215 	stw	r16,8(sp)
  80f49c:	2817883a 	mov	r11,r5
  80f4a0:	500d883a 	mov	r6,r10
  80f4a4:	2824d7fa 	srli	r18,r5,31
  80f4a8:	6a403016 	blt	r13,r9,80f56c <rint+0xfc>
  80f4ac:	48004916 	blt	r9,zero,80f5d4 <rint+0x164>
  80f4b0:	00800434 	movhi	r2,16
  80f4b4:	10bfffc4 	addi	r2,r2,-1
  80f4b8:	1247d83a 	sra	r3,r2,r9
  80f4bc:	2809883a 	mov	r4,r5
  80f4c0:	1944703a 	and	r2,r3,r5
  80f4c4:	5084b03a 	or	r2,r10,r2
  80f4c8:	10001f26 	beq	r2,zero,80f548 <rint+0xd8>
  80f4cc:	180ad07a 	srli	r5,r3,1
  80f4d0:	5944703a 	and	r2,r11,r5
  80f4d4:	5084b03a 	or	r2,r10,r2
  80f4d8:	10000626 	beq	r2,zero,80f4f4 <rint+0x84>
  80f4dc:	4b406626 	beq	r9,r13,80f678 <rint+0x208>
  80f4e0:	00c000b4 	movhi	r3,2
  80f4e4:	1a47d83a 	sra	r3,r3,r9
  80f4e8:	0144303a 	nor	r2,zero,r5
  80f4ec:	5884703a 	and	r2,r11,r2
  80f4f0:	10c8b03a 	or	r4,r2,r3
  80f4f4:	900690fa 	slli	r3,r18,3
  80f4f8:	008020b4 	movhi	r2,130
  80f4fc:	109fca04 	addi	r2,r2,32552
  80f500:	200f883a 	mov	r7,r4
  80f504:	1887883a 	add	r3,r3,r2
  80f508:	1c000017 	ldw	r16,0(r3)
  80f50c:	1c400117 	ldw	r17,4(r3)
  80f510:	8009883a 	mov	r4,r16
  80f514:	880b883a 	mov	r5,r17
  80f518:	08105bc0 	call	8105bc <__adddf3>
  80f51c:	d8800015 	stw	r2,0(sp)
  80f520:	d8c00115 	stw	r3,4(sp)
  80f524:	d8800017 	ldw	r2,0(sp)
  80f528:	d8c00117 	ldw	r3,4(sp)
  80f52c:	880f883a 	mov	r7,r17
  80f530:	800d883a 	mov	r6,r16
  80f534:	180b883a 	mov	r5,r3
  80f538:	1009883a 	mov	r4,r2
  80f53c:	081053c0 	call	81053c <__subdf3>
  80f540:	1015883a 	mov	r10,r2
  80f544:	1817883a 	mov	r11,r3
  80f548:	5005883a 	mov	r2,r10
  80f54c:	5807883a 	mov	r3,r11
  80f550:	dfc00617 	ldw	ra,24(sp)
  80f554:	dcc00517 	ldw	r19,20(sp)
  80f558:	dc800417 	ldw	r18,16(sp)
  80f55c:	dc400317 	ldw	r17,12(sp)
  80f560:	dc000217 	ldw	r16,8(sp)
  80f564:	dec00704 	addi	sp,sp,28
  80f568:	f800283a 	ret
  80f56c:	00800cc4 	movi	r2,51
  80f570:	12400f16 	blt	r2,r9,80f5b0 <rint+0x140>
  80f574:	213efb44 	addi	r4,r4,-1043
  80f578:	00bfffc4 	movi	r2,-1
  80f57c:	1104d83a 	srl	r2,r2,r4
  80f580:	5086703a 	and	r3,r10,r2
  80f584:	183ff026 	beq	r3,zero,80f548 <rint+0xd8>
  80f588:	100ad07a 	srli	r5,r2,1
  80f58c:	5144703a 	and	r2,r10,r5
  80f590:	10000526 	beq	r2,zero,80f5a8 <rint+0x138>
  80f594:	00d00034 	movhi	r3,16384
  80f598:	1907d83a 	sra	r3,r3,r4
  80f59c:	0144303a 	nor	r2,zero,r5
  80f5a0:	5084703a 	and	r2,r10,r2
  80f5a4:	10ccb03a 	or	r6,r2,r3
  80f5a8:	5809883a 	mov	r4,r11
  80f5ac:	003fd106 	br	80f4f4 <rint+0x84>
  80f5b0:	00810004 	movi	r2,1024
  80f5b4:	48bfe41e 	bne	r9,r2,80f548 <rint+0xd8>
  80f5b8:	5009883a 	mov	r4,r10
  80f5bc:	500d883a 	mov	r6,r10
  80f5c0:	280f883a 	mov	r7,r5
  80f5c4:	08105bc0 	call	8105bc <__adddf3>
  80f5c8:	1015883a 	mov	r10,r2
  80f5cc:	1817883a 	mov	r11,r3
  80f5d0:	003fdd06 	br	80f548 <rint+0xd8>
  80f5d4:	04e00034 	movhi	r19,32768
  80f5d8:	9cffffc4 	addi	r19,r19,-1
  80f5dc:	2cc4703a 	and	r2,r5,r19
  80f5e0:	5084b03a 	or	r2,r10,r2
  80f5e4:	103fd826 	beq	r2,zero,80f548 <rint+0xd8>
  80f5e8:	00c00434 	movhi	r3,16
  80f5ec:	18ffffc4 	addi	r3,r3,-1
  80f5f0:	28c6703a 	and	r3,r5,r3
  80f5f4:	50c6b03a 	or	r3,r10,r3
  80f5f8:	00cdc83a 	sub	r6,zero,r3
  80f5fc:	900a90fa 	slli	r5,r18,3
  80f600:	1986b03a 	or	r3,r3,r6
  80f604:	010020b4 	movhi	r4,130
  80f608:	211fca04 	addi	r4,r4,32552
  80f60c:	1806d33a 	srli	r3,r3,12
  80f610:	290b883a 	add	r5,r5,r4
  80f614:	2c000017 	ldw	r16,0(r5)
  80f618:	2c400117 	ldw	r17,4(r5)
  80f61c:	593fffac 	andhi	r4,r11,65534
  80f620:	18c0022c 	andhi	r3,r3,8
  80f624:	1906b03a 	or	r3,r3,r4
  80f628:	500d883a 	mov	r6,r10
  80f62c:	180f883a 	mov	r7,r3
  80f630:	8009883a 	mov	r4,r16
  80f634:	880b883a 	mov	r5,r17
  80f638:	08105bc0 	call	8105bc <__adddf3>
  80f63c:	d8800015 	stw	r2,0(sp)
  80f640:	d8c00115 	stw	r3,4(sp)
  80f644:	d8800017 	ldw	r2,0(sp)
  80f648:	d8c00117 	ldw	r3,4(sp)
  80f64c:	880f883a 	mov	r7,r17
  80f650:	800d883a 	mov	r6,r16
  80f654:	180b883a 	mov	r5,r3
  80f658:	1009883a 	mov	r4,r2
  80f65c:	081053c0 	call	81053c <__subdf3>
  80f660:	901297fa 	slli	r9,r18,31
  80f664:	98d0703a 	and	r8,r19,r3
  80f668:	1015883a 	mov	r10,r2
  80f66c:	4250b03a 	or	r8,r8,r9
  80f670:	4017883a 	mov	r11,r8
  80f674:	003fb406 	br	80f548 <rint+0xd8>
  80f678:	01900034 	movhi	r6,16384
  80f67c:	003f9d06 	br	80f4f4 <rint+0x84>

0080f680 <scalbn>:
  80f680:	2011883a 	mov	r8,r4
  80f684:	291ffc2c 	andhi	r4,r5,32752
  80f688:	2009d53a 	srai	r4,r4,20
  80f68c:	defffd04 	addi	sp,sp,-12
  80f690:	dc000015 	stw	r16,0(sp)
  80f694:	dfc00215 	stw	ra,8(sp)
  80f698:	dc400115 	stw	r17,4(sp)
  80f69c:	2813883a 	mov	r9,r5
  80f6a0:	2815883a 	mov	r10,r5
  80f6a4:	3021883a 	mov	r16,r6
  80f6a8:	2000281e 	bne	r4,zero,80f74c <scalbn+0xcc>
  80f6ac:	00a00034 	movhi	r2,32768
  80f6b0:	10bfffc4 	addi	r2,r2,-1
  80f6b4:	2884703a 	and	r2,r5,r2
  80f6b8:	4084b03a 	or	r2,r8,r2
  80f6bc:	10001826 	beq	r2,zero,80f720 <scalbn+0xa0>
  80f6c0:	0005883a 	mov	r2,zero
  80f6c4:	00d0d434 	movhi	r3,17232
  80f6c8:	4009883a 	mov	r4,r8
  80f6cc:	100d883a 	mov	r6,r2
  80f6d0:	180f883a 	mov	r7,r3
  80f6d4:	08106300 	call	810630 <__muldf3>
  80f6d8:	100b883a 	mov	r5,r2
  80f6dc:	1011883a 	mov	r8,r2
  80f6e0:	00bffff4 	movhi	r2,65535
  80f6e4:	108f2c04 	addi	r2,r2,15536
  80f6e8:	180d883a 	mov	r6,r3
  80f6ec:	1813883a 	mov	r9,r3
  80f6f0:	8080120e 	bge	r16,r2,80f73c <scalbn+0xbc>
  80f6f4:	00b0be74 	movhi	r2,49913
  80f6f8:	10bcd644 	addi	r2,r2,-3239
  80f6fc:	00c06974 	movhi	r3,421
  80f700:	18db87c4 	addi	r3,r3,28191
  80f704:	2809883a 	mov	r4,r5
  80f708:	180f883a 	mov	r7,r3
  80f70c:	300b883a 	mov	r5,r6
  80f710:	100d883a 	mov	r6,r2
  80f714:	08106300 	call	810630 <__muldf3>
  80f718:	1011883a 	mov	r8,r2
  80f71c:	1813883a 	mov	r9,r3
  80f720:	4005883a 	mov	r2,r8
  80f724:	4807883a 	mov	r3,r9
  80f728:	dfc00217 	ldw	ra,8(sp)
  80f72c:	dc400117 	ldw	r17,4(sp)
  80f730:	dc000017 	ldw	r16,0(sp)
  80f734:	dec00304 	addi	sp,sp,12
  80f738:	f800283a 	ret
  80f73c:	189ffc2c 	andhi	r2,r3,32752
  80f740:	1005d53a 	srai	r2,r2,20
  80f744:	1815883a 	mov	r10,r3
  80f748:	113ff284 	addi	r4,r2,-54
  80f74c:	0081ffc4 	movi	r2,2047
  80f750:	20801126 	beq	r4,r2,80f798 <scalbn+0x118>
  80f754:	2409883a 	add	r4,r4,r16
  80f758:	0081ff84 	movi	r2,2046
  80f75c:	11001c16 	blt	r2,r4,80f7d0 <scalbn+0x150>
  80f760:	0100290e 	bge	zero,r4,80f808 <scalbn+0x188>
  80f764:	200a953a 	slli	r5,r4,20
  80f768:	01200434 	movhi	r4,32784
  80f76c:	213fffc4 	addi	r4,r4,-1
  80f770:	5108703a 	and	r4,r10,r4
  80f774:	2148b03a 	or	r4,r4,r5
  80f778:	2013883a 	mov	r9,r4
  80f77c:	4005883a 	mov	r2,r8
  80f780:	4807883a 	mov	r3,r9
  80f784:	dfc00217 	ldw	ra,8(sp)
  80f788:	dc400117 	ldw	r17,4(sp)
  80f78c:	dc000017 	ldw	r16,0(sp)
  80f790:	dec00304 	addi	sp,sp,12
  80f794:	f800283a 	ret
  80f798:	480f883a 	mov	r7,r9
  80f79c:	4009883a 	mov	r4,r8
  80f7a0:	480b883a 	mov	r5,r9
  80f7a4:	400d883a 	mov	r6,r8
  80f7a8:	08105bc0 	call	8105bc <__adddf3>
  80f7ac:	1011883a 	mov	r8,r2
  80f7b0:	1813883a 	mov	r9,r3
  80f7b4:	4005883a 	mov	r2,r8
  80f7b8:	4807883a 	mov	r3,r9
  80f7bc:	dfc00217 	ldw	ra,8(sp)
  80f7c0:	dc400117 	ldw	r17,4(sp)
  80f7c4:	dc000017 	ldw	r16,0(sp)
  80f7c8:	dec00304 	addi	sp,sp,12
  80f7cc:	f800283a 	ret
  80f7d0:	04220034 	movhi	r16,34816
  80f7d4:	841d6704 	addi	r16,r16,30108
  80f7d8:	045f8e34 	movhi	r17,32312
  80f7dc:	8c790f04 	addi	r17,r17,-7108
  80f7e0:	480f883a 	mov	r7,r9
  80f7e4:	400d883a 	mov	r6,r8
  80f7e8:	8009883a 	mov	r4,r16
  80f7ec:	880b883a 	mov	r5,r17
  80f7f0:	080f8600 	call	80f860 <copysign>
  80f7f4:	180b883a 	mov	r5,r3
  80f7f8:	800d883a 	mov	r6,r16
  80f7fc:	880f883a 	mov	r7,r17
  80f800:	1009883a 	mov	r4,r2
  80f804:	003fc306 	br	80f714 <scalbn+0x94>
  80f808:	00bff284 	movi	r2,-54
  80f80c:	11000716 	blt	r2,r4,80f82c <scalbn+0x1ac>
  80f810:	00b0d414 	movui	r2,50000
  80f814:	143fee16 	blt	r2,r16,80f7d0 <scalbn+0x150>
  80f818:	0430be74 	movhi	r16,49913
  80f81c:	843cd644 	addi	r16,r16,-3239
  80f820:	04406974 	movhi	r17,421
  80f824:	8c5b87c4 	addi	r17,r17,28191
  80f828:	003fed06 	br	80f7e0 <scalbn+0x160>
  80f82c:	21000d84 	addi	r4,r4,54
  80f830:	2008953a 	slli	r4,r4,20
  80f834:	01e00434 	movhi	r7,32784
  80f838:	39ffffc4 	addi	r7,r7,-1
  80f83c:	51ce703a 	and	r7,r10,r7
  80f840:	390eb03a 	or	r7,r7,r4
  80f844:	024f2434 	movhi	r9,15504
  80f848:	4009883a 	mov	r4,r8
  80f84c:	0011883a 	mov	r8,zero
  80f850:	380b883a 	mov	r5,r7
  80f854:	400d883a 	mov	r6,r8
  80f858:	480f883a 	mov	r7,r9
  80f85c:	003fad06 	br	80f714 <scalbn+0x94>

0080f860 <copysign>:
  80f860:	3813883a 	mov	r9,r7
  80f864:	01e00034 	movhi	r7,32768
  80f868:	39ffffc4 	addi	r7,r7,-1
  80f86c:	394e703a 	and	r7,r7,r5
  80f870:	4aa0002c 	andhi	r10,r9,32768
  80f874:	3a8eb03a 	or	r7,r7,r10
  80f878:	2005883a 	mov	r2,r4
  80f87c:	3807883a 	mov	r3,r7
  80f880:	f800283a 	ret

0080f884 <_fpadd_parts>:
  80f884:	21c00017 	ldw	r7,0(r4)
  80f888:	02000044 	movi	r8,1
  80f88c:	41c0332e 	bgeu	r8,r7,80f95c <_fpadd_parts+0xd8>
  80f890:	28800017 	ldw	r2,0(r5)
  80f894:	4080462e 	bgeu	r8,r2,80f9b0 <_fpadd_parts+0x12c>
  80f898:	00c00104 	movi	r3,4
  80f89c:	38c06b26 	beq	r7,r3,80fa4c <_fpadd_parts+0x1c8>
  80f8a0:	10c04326 	beq	r2,r3,80f9b0 <_fpadd_parts+0x12c>
  80f8a4:	00c00084 	movi	r3,2
  80f8a8:	10c02e26 	beq	r2,r3,80f964 <_fpadd_parts+0xe0>
  80f8ac:	38c04026 	beq	r7,r3,80f9b0 <_fpadd_parts+0x12c>
  80f8b0:	22800217 	ldw	r10,8(r4)
  80f8b4:	28c00217 	ldw	r3,8(r5)
  80f8b8:	23000317 	ldw	r12,12(r4)
  80f8bc:	2a400317 	ldw	r9,12(r5)
  80f8c0:	50cfc83a 	sub	r7,r10,r3
  80f8c4:	3817883a 	mov	r11,r7
  80f8c8:	38004f16 	blt	r7,zero,80fa08 <_fpadd_parts+0x184>
  80f8cc:	008007c4 	movi	r2,31
  80f8d0:	11c03316 	blt	r2,r7,80f9a0 <_fpadd_parts+0x11c>
  80f8d4:	02c0540e 	bge	zero,r11,80fa28 <_fpadd_parts+0x1a4>
  80f8d8:	41c4983a 	sll	r2,r8,r7
  80f8dc:	49c6d83a 	srl	r3,r9,r7
  80f8e0:	10bfffc4 	addi	r2,r2,-1
  80f8e4:	4884703a 	and	r2,r9,r2
  80f8e8:	1004c03a 	cmpne	r2,r2,zero
  80f8ec:	1892b03a 	or	r9,r3,r2
  80f8f0:	20c00117 	ldw	r3,4(r4)
  80f8f4:	28800117 	ldw	r2,4(r5)
  80f8f8:	18803c26 	beq	r3,r2,80f9ec <_fpadd_parts+0x168>
  80f8fc:	18002f26 	beq	r3,zero,80f9bc <_fpadd_parts+0x138>
  80f900:	4b05c83a 	sub	r2,r9,r12
  80f904:	10004216 	blt	r2,zero,80fa10 <_fpadd_parts+0x18c>
  80f908:	32800215 	stw	r10,8(r6)
  80f90c:	30800315 	stw	r2,12(r6)
  80f910:	30000115 	stw	zero,4(r6)
  80f914:	31000317 	ldw	r4,12(r6)
  80f918:	01d00034 	movhi	r7,16384
  80f91c:	39ffff84 	addi	r7,r7,-2
  80f920:	20bfffc4 	addi	r2,r4,-1
  80f924:	2007883a 	mov	r3,r4
  80f928:	38800836 	bltu	r7,r2,80f94c <_fpadd_parts+0xc8>
  80f92c:	31400217 	ldw	r5,8(r6)
  80f930:	18c9883a 	add	r4,r3,r3
  80f934:	20bfffc4 	addi	r2,r4,-1
  80f938:	297fffc4 	addi	r5,r5,-1
  80f93c:	2007883a 	mov	r3,r4
  80f940:	38bffb2e 	bgeu	r7,r2,80f930 <_fpadd_parts+0xac>
  80f944:	31400215 	stw	r5,8(r6)
  80f948:	31000315 	stw	r4,12(r6)
  80f94c:	008000c4 	movi	r2,3
  80f950:	30800015 	stw	r2,0(r6)
  80f954:	20001b16 	blt	r4,zero,80f9c4 <_fpadd_parts+0x140>
  80f958:	3009883a 	mov	r4,r6
  80f95c:	2005883a 	mov	r2,r4
  80f960:	f800283a 	ret
  80f964:	38fffd1e 	bne	r7,r3,80f95c <_fpadd_parts+0xd8>
  80f968:	31c00015 	stw	r7,0(r6)
  80f96c:	20800117 	ldw	r2,4(r4)
  80f970:	30800115 	stw	r2,4(r6)
  80f974:	20c00217 	ldw	r3,8(r4)
  80f978:	30c00215 	stw	r3,8(r6)
  80f97c:	20800317 	ldw	r2,12(r4)
  80f980:	30800315 	stw	r2,12(r6)
  80f984:	20c00117 	ldw	r3,4(r4)
  80f988:	28800117 	ldw	r2,4(r5)
  80f98c:	3009883a 	mov	r4,r6
  80f990:	1886703a 	and	r3,r3,r2
  80f994:	2005883a 	mov	r2,r4
  80f998:	30c00115 	stw	r3,4(r6)
  80f99c:	f800283a 	ret
  80f9a0:	1a801716 	blt	r3,r10,80fa00 <_fpadd_parts+0x17c>
  80f9a4:	1815883a 	mov	r10,r3
  80f9a8:	0019883a 	mov	r12,zero
  80f9ac:	003fd006 	br	80f8f0 <_fpadd_parts+0x6c>
  80f9b0:	2809883a 	mov	r4,r5
  80f9b4:	2005883a 	mov	r2,r4
  80f9b8:	f800283a 	ret
  80f9bc:	6245c83a 	sub	r2,r12,r9
  80f9c0:	003fd006 	br	80f904 <_fpadd_parts+0x80>
  80f9c4:	30800217 	ldw	r2,8(r6)
  80f9c8:	2006d07a 	srli	r3,r4,1
  80f9cc:	2100004c 	andi	r4,r4,1
  80f9d0:	10800044 	addi	r2,r2,1
  80f9d4:	1906b03a 	or	r3,r3,r4
  80f9d8:	3009883a 	mov	r4,r6
  80f9dc:	30800215 	stw	r2,8(r6)
  80f9e0:	2005883a 	mov	r2,r4
  80f9e4:	30c00315 	stw	r3,12(r6)
  80f9e8:	f800283a 	ret
  80f9ec:	4b09883a 	add	r4,r9,r12
  80f9f0:	30c00115 	stw	r3,4(r6)
  80f9f4:	32800215 	stw	r10,8(r6)
  80f9f8:	31000315 	stw	r4,12(r6)
  80f9fc:	003fd306 	br	80f94c <_fpadd_parts+0xc8>
  80fa00:	0013883a 	mov	r9,zero
  80fa04:	003fba06 	br	80f8f0 <_fpadd_parts+0x6c>
  80fa08:	01cfc83a 	sub	r7,zero,r7
  80fa0c:	003faf06 	br	80f8cc <_fpadd_parts+0x48>
  80fa10:	0089c83a 	sub	r4,zero,r2
  80fa14:	00800044 	movi	r2,1
  80fa18:	30800115 	stw	r2,4(r6)
  80fa1c:	32800215 	stw	r10,8(r6)
  80fa20:	31000315 	stw	r4,12(r6)
  80fa24:	003fbb06 	br	80f914 <_fpadd_parts+0x90>
  80fa28:	583fb126 	beq	r11,zero,80f8f0 <_fpadd_parts+0x6c>
  80fa2c:	41c4983a 	sll	r2,r8,r7
  80fa30:	61c6d83a 	srl	r3,r12,r7
  80fa34:	51d5883a 	add	r10,r10,r7
  80fa38:	10bfffc4 	addi	r2,r2,-1
  80fa3c:	6084703a 	and	r2,r12,r2
  80fa40:	1004c03a 	cmpne	r2,r2,zero
  80fa44:	1898b03a 	or	r12,r3,r2
  80fa48:	003fa906 	br	80f8f0 <_fpadd_parts+0x6c>
  80fa4c:	11ffc31e 	bne	r2,r7,80f95c <_fpadd_parts+0xd8>
  80fa50:	28c00117 	ldw	r3,4(r5)
  80fa54:	20800117 	ldw	r2,4(r4)
  80fa58:	10ffc026 	beq	r2,r3,80f95c <_fpadd_parts+0xd8>
  80fa5c:	010020b4 	movhi	r4,130
  80fa60:	211fce04 	addi	r4,r4,32568
  80fa64:	003fbd06 	br	80f95c <_fpadd_parts+0xd8>

0080fa68 <__subsf3>:
  80fa68:	deffef04 	addi	sp,sp,-68
  80fa6c:	dcc00f15 	stw	r19,60(sp)
  80fa70:	dcc00204 	addi	r19,sp,8
  80fa74:	dc400e15 	stw	r17,56(sp)
  80fa78:	d9000015 	stw	r4,0(sp)
  80fa7c:	d9400115 	stw	r5,4(sp)
  80fa80:	d809883a 	mov	r4,sp
  80fa84:	980b883a 	mov	r5,r19
  80fa88:	dc400604 	addi	r17,sp,24
  80fa8c:	dfc01015 	stw	ra,64(sp)
  80fa90:	081145c0 	call	81145c <__unpack_f>
  80fa94:	d9000104 	addi	r4,sp,4
  80fa98:	880b883a 	mov	r5,r17
  80fa9c:	081145c0 	call	81145c <__unpack_f>
  80faa0:	d8800717 	ldw	r2,28(sp)
  80faa4:	9809883a 	mov	r4,r19
  80faa8:	880b883a 	mov	r5,r17
  80faac:	d9800a04 	addi	r6,sp,40
  80fab0:	1080005c 	xori	r2,r2,1
  80fab4:	d8800715 	stw	r2,28(sp)
  80fab8:	080f8840 	call	80f884 <_fpadd_parts>
  80fabc:	1009883a 	mov	r4,r2
  80fac0:	08112fc0 	call	8112fc <__pack_f>
  80fac4:	dfc01017 	ldw	ra,64(sp)
  80fac8:	dcc00f17 	ldw	r19,60(sp)
  80facc:	dc400e17 	ldw	r17,56(sp)
  80fad0:	dec01104 	addi	sp,sp,68
  80fad4:	f800283a 	ret

0080fad8 <__addsf3>:
  80fad8:	deffef04 	addi	sp,sp,-68
  80fadc:	dcc00f15 	stw	r19,60(sp)
  80fae0:	dcc00204 	addi	r19,sp,8
  80fae4:	dc400e15 	stw	r17,56(sp)
  80fae8:	d9000015 	stw	r4,0(sp)
  80faec:	d9400115 	stw	r5,4(sp)
  80faf0:	d809883a 	mov	r4,sp
  80faf4:	980b883a 	mov	r5,r19
  80faf8:	dc400604 	addi	r17,sp,24
  80fafc:	dfc01015 	stw	ra,64(sp)
  80fb00:	081145c0 	call	81145c <__unpack_f>
  80fb04:	d9000104 	addi	r4,sp,4
  80fb08:	880b883a 	mov	r5,r17
  80fb0c:	081145c0 	call	81145c <__unpack_f>
  80fb10:	d9800a04 	addi	r6,sp,40
  80fb14:	9809883a 	mov	r4,r19
  80fb18:	880b883a 	mov	r5,r17
  80fb1c:	080f8840 	call	80f884 <_fpadd_parts>
  80fb20:	1009883a 	mov	r4,r2
  80fb24:	08112fc0 	call	8112fc <__pack_f>
  80fb28:	dfc01017 	ldw	ra,64(sp)
  80fb2c:	dcc00f17 	ldw	r19,60(sp)
  80fb30:	dc400e17 	ldw	r17,56(sp)
  80fb34:	dec01104 	addi	sp,sp,68
  80fb38:	f800283a 	ret

0080fb3c <__mulsf3>:
  80fb3c:	deffef04 	addi	sp,sp,-68
  80fb40:	dc400f15 	stw	r17,60(sp)
  80fb44:	dc400204 	addi	r17,sp,8
  80fb48:	dc000e15 	stw	r16,56(sp)
  80fb4c:	d9000015 	stw	r4,0(sp)
  80fb50:	d9400115 	stw	r5,4(sp)
  80fb54:	d809883a 	mov	r4,sp
  80fb58:	880b883a 	mov	r5,r17
  80fb5c:	dc000604 	addi	r16,sp,24
  80fb60:	dfc01015 	stw	ra,64(sp)
  80fb64:	081145c0 	call	81145c <__unpack_f>
  80fb68:	d9000104 	addi	r4,sp,4
  80fb6c:	800b883a 	mov	r5,r16
  80fb70:	081145c0 	call	81145c <__unpack_f>
  80fb74:	d9000217 	ldw	r4,8(sp)
  80fb78:	00800044 	movi	r2,1
  80fb7c:	01400104 	movi	r5,4
  80fb80:	1100142e 	bgeu	r2,r4,80fbd4 <__mulsf3+0x98>
  80fb84:	d8c00617 	ldw	r3,24(sp)
  80fb88:	10c0052e 	bgeu	r2,r3,80fba0 <__mulsf3+0x64>
  80fb8c:	21400f26 	beq	r4,r5,80fbcc <__mulsf3+0x90>
  80fb90:	19405d26 	beq	r3,r5,80fd08 <__mulsf3+0x1cc>
  80fb94:	00800084 	movi	r2,2
  80fb98:	20800e26 	beq	r4,r2,80fbd4 <__mulsf3+0x98>
  80fb9c:	1880181e 	bne	r3,r2,80fc00 <__mulsf3+0xc4>
  80fba0:	d8c00717 	ldw	r3,28(sp)
  80fba4:	d8800317 	ldw	r2,12(sp)
  80fba8:	8009883a 	mov	r4,r16
  80fbac:	10c4c03a 	cmpne	r2,r2,r3
  80fbb0:	d8800715 	stw	r2,28(sp)
  80fbb4:	08112fc0 	call	8112fc <__pack_f>
  80fbb8:	dfc01017 	ldw	ra,64(sp)
  80fbbc:	dc400f17 	ldw	r17,60(sp)
  80fbc0:	dc000e17 	ldw	r16,56(sp)
  80fbc4:	dec01104 	addi	sp,sp,68
  80fbc8:	f800283a 	ret
  80fbcc:	00800084 	movi	r2,2
  80fbd0:	18804f26 	beq	r3,r2,80fd10 <__mulsf3+0x1d4>
  80fbd4:	d8800317 	ldw	r2,12(sp)
  80fbd8:	d8c00717 	ldw	r3,28(sp)
  80fbdc:	8809883a 	mov	r4,r17
  80fbe0:	10c4c03a 	cmpne	r2,r2,r3
  80fbe4:	d8800315 	stw	r2,12(sp)
  80fbe8:	08112fc0 	call	8112fc <__pack_f>
  80fbec:	dfc01017 	ldw	ra,64(sp)
  80fbf0:	dc400f17 	ldw	r17,60(sp)
  80fbf4:	dc000e17 	ldw	r16,56(sp)
  80fbf8:	dec01104 	addi	sp,sp,68
  80fbfc:	f800283a 	ret
  80fc00:	d8800517 	ldw	r2,20(sp)
  80fc04:	da000917 	ldw	r8,36(sp)
  80fc08:	0013883a 	mov	r9,zero
  80fc0c:	0007883a 	mov	r3,zero
  80fc10:	480f883a 	mov	r7,r9
  80fc14:	180b883a 	mov	r5,r3
  80fc18:	400d883a 	mov	r6,r8
  80fc1c:	1009883a 	mov	r4,r2
  80fc20:	08111e40 	call	8111e4 <__muldi3>
  80fc24:	da800417 	ldw	r10,16(sp)
  80fc28:	d9800817 	ldw	r6,32(sp)
  80fc2c:	da400317 	ldw	r9,12(sp)
  80fc30:	52800084 	addi	r10,r10,2
  80fc34:	3295883a 	add	r10,r6,r10
  80fc38:	d9800717 	ldw	r6,28(sp)
  80fc3c:	180b883a 	mov	r5,r3
  80fc40:	180f883a 	mov	r7,r3
  80fc44:	4992c03a 	cmpne	r9,r9,r6
  80fc48:	da400b15 	stw	r9,44(sp)
  80fc4c:	1007883a 	mov	r3,r2
  80fc50:	da800c15 	stw	r10,48(sp)
  80fc54:	2800070e 	bge	r5,zero,80fc74 <__mulsf3+0x138>
  80fc58:	2880004c 	andi	r2,r5,1
  80fc5c:	1005003a 	cmpeq	r2,r2,zero
  80fc60:	500d883a 	mov	r6,r10
  80fc64:	10001e26 	beq	r2,zero,80fce0 <__mulsf3+0x1a4>
  80fc68:	380ed07a 	srli	r7,r7,1
  80fc6c:	31800044 	addi	r6,r6,1
  80fc70:	d9800c15 	stw	r6,48(sp)
  80fc74:	01100034 	movhi	r4,16384
  80fc78:	213fffc4 	addi	r4,r4,-1
  80fc7c:	21c00b36 	bltu	r4,r7,80fcac <__mulsf3+0x170>
  80fc80:	d8800c17 	ldw	r2,48(sp)
  80fc84:	00000206 	br	80fc90 <__mulsf3+0x154>
  80fc88:	18c7883a 	add	r3,r3,r3
  80fc8c:	21c00636 	bltu	r4,r7,80fca8 <__mulsf3+0x16c>
  80fc90:	10bfffc4 	addi	r2,r2,-1
  80fc94:	39cf883a 	add	r7,r7,r7
  80fc98:	183ffb0e 	bge	r3,zero,80fc88 <__mulsf3+0x14c>
  80fc9c:	39c00054 	ori	r7,r7,1
  80fca0:	18c7883a 	add	r3,r3,r3
  80fca4:	21fffa2e 	bgeu	r4,r7,80fc90 <__mulsf3+0x154>
  80fca8:	d8800c15 	stw	r2,48(sp)
  80fcac:	39001fcc 	andi	r4,r7,127
  80fcb0:	00801004 	movi	r2,64
  80fcb4:	20800d26 	beq	r4,r2,80fcec <__mulsf3+0x1b0>
  80fcb8:	008000c4 	movi	r2,3
  80fcbc:	d9000a04 	addi	r4,sp,40
  80fcc0:	d9c00d15 	stw	r7,52(sp)
  80fcc4:	d8800a15 	stw	r2,40(sp)
  80fcc8:	08112fc0 	call	8112fc <__pack_f>
  80fccc:	dfc01017 	ldw	ra,64(sp)
  80fcd0:	dc400f17 	ldw	r17,60(sp)
  80fcd4:	dc000e17 	ldw	r16,56(sp)
  80fcd8:	dec01104 	addi	sp,sp,68
  80fcdc:	f800283a 	ret
  80fce0:	1804d07a 	srli	r2,r3,1
  80fce4:	10e00034 	orhi	r3,r2,32768
  80fce8:	003fdf06 	br	80fc68 <__mulsf3+0x12c>
  80fcec:	3880200c 	andi	r2,r7,128
  80fcf0:	103ff11e 	bne	r2,zero,80fcb8 <__mulsf3+0x17c>
  80fcf4:	183ff026 	beq	r3,zero,80fcb8 <__mulsf3+0x17c>
  80fcf8:	3907883a 	add	r3,r7,r4
  80fcfc:	00bfe004 	movi	r2,-128
  80fd00:	188e703a 	and	r7,r3,r2
  80fd04:	003fec06 	br	80fcb8 <__mulsf3+0x17c>
  80fd08:	00800084 	movi	r2,2
  80fd0c:	20bfa41e 	bne	r4,r2,80fba0 <__mulsf3+0x64>
  80fd10:	010020b4 	movhi	r4,130
  80fd14:	211fce04 	addi	r4,r4,32568
  80fd18:	003fb306 	br	80fbe8 <__mulsf3+0xac>

0080fd1c <__divsf3>:
  80fd1c:	defff304 	addi	sp,sp,-52
  80fd20:	dc400b15 	stw	r17,44(sp)
  80fd24:	dc400204 	addi	r17,sp,8
  80fd28:	dc000a15 	stw	r16,40(sp)
  80fd2c:	d9000015 	stw	r4,0(sp)
  80fd30:	d9400115 	stw	r5,4(sp)
  80fd34:	d809883a 	mov	r4,sp
  80fd38:	880b883a 	mov	r5,r17
  80fd3c:	dc000604 	addi	r16,sp,24
  80fd40:	dfc00c15 	stw	ra,48(sp)
  80fd44:	081145c0 	call	81145c <__unpack_f>
  80fd48:	d9000104 	addi	r4,sp,4
  80fd4c:	800b883a 	mov	r5,r16
  80fd50:	081145c0 	call	81145c <__unpack_f>
  80fd54:	d9000217 	ldw	r4,8(sp)
  80fd58:	00800044 	movi	r2,1
  80fd5c:	01800104 	movi	r6,4
  80fd60:	11000a2e 	bgeu	r2,r4,80fd8c <__divsf3+0x70>
  80fd64:	d9400617 	ldw	r5,24(sp)
  80fd68:	1140432e 	bgeu	r2,r5,80fe78 <__divsf3+0x15c>
  80fd6c:	d8800317 	ldw	r2,12(sp)
  80fd70:	d8c00717 	ldw	r3,28(sp)
  80fd74:	10c4f03a 	xor	r2,r2,r3
  80fd78:	d8800315 	stw	r2,12(sp)
  80fd7c:	21800226 	beq	r4,r6,80fd88 <__divsf3+0x6c>
  80fd80:	00800084 	movi	r2,2
  80fd84:	2080101e 	bne	r4,r2,80fdc8 <__divsf3+0xac>
  80fd88:	29000726 	beq	r5,r4,80fda8 <__divsf3+0x8c>
  80fd8c:	8809883a 	mov	r4,r17
  80fd90:	08112fc0 	call	8112fc <__pack_f>
  80fd94:	dfc00c17 	ldw	ra,48(sp)
  80fd98:	dc400b17 	ldw	r17,44(sp)
  80fd9c:	dc000a17 	ldw	r16,40(sp)
  80fda0:	dec00d04 	addi	sp,sp,52
  80fda4:	f800283a 	ret
  80fda8:	010020b4 	movhi	r4,130
  80fdac:	211fce04 	addi	r4,r4,32568
  80fdb0:	08112fc0 	call	8112fc <__pack_f>
  80fdb4:	dfc00c17 	ldw	ra,48(sp)
  80fdb8:	dc400b17 	ldw	r17,44(sp)
  80fdbc:	dc000a17 	ldw	r16,40(sp)
  80fdc0:	dec00d04 	addi	sp,sp,52
  80fdc4:	f800283a 	ret
  80fdc8:	29802d26 	beq	r5,r6,80fe80 <__divsf3+0x164>
  80fdcc:	28801a26 	beq	r5,r2,80fe38 <__divsf3+0x11c>
  80fdd0:	d8c00417 	ldw	r3,16(sp)
  80fdd4:	d8800817 	ldw	r2,32(sp)
  80fdd8:	d9000517 	ldw	r4,20(sp)
  80fddc:	d9800917 	ldw	r6,36(sp)
  80fde0:	1885c83a 	sub	r2,r3,r2
  80fde4:	d8800415 	stw	r2,16(sp)
  80fde8:	2180032e 	bgeu	r4,r6,80fdf8 <__divsf3+0xdc>
  80fdec:	10bfffc4 	addi	r2,r2,-1
  80fdf0:	d8800415 	stw	r2,16(sp)
  80fdf4:	2109883a 	add	r4,r4,r4
  80fdf8:	01500034 	movhi	r5,16384
  80fdfc:	0007883a 	mov	r3,zero
  80fe00:	0005883a 	mov	r2,zero
  80fe04:	01c007c4 	movi	r7,31
  80fe08:	10800044 	addi	r2,r2,1
  80fe0c:	21800236 	bltu	r4,r6,80fe18 <__divsf3+0xfc>
  80fe10:	1946b03a 	or	r3,r3,r5
  80fe14:	2189c83a 	sub	r4,r4,r6
  80fe18:	280ad07a 	srli	r5,r5,1
  80fe1c:	2109883a 	add	r4,r4,r4
  80fe20:	11fff91e 	bne	r2,r7,80fe08 <__divsf3+0xec>
  80fe24:	19401fcc 	andi	r5,r3,127
  80fe28:	00801004 	movi	r2,64
  80fe2c:	28800a26 	beq	r5,r2,80fe58 <__divsf3+0x13c>
  80fe30:	d8c00515 	stw	r3,20(sp)
  80fe34:	003fd506 	br	80fd8c <__divsf3+0x70>
  80fe38:	8809883a 	mov	r4,r17
  80fe3c:	d9800215 	stw	r6,8(sp)
  80fe40:	08112fc0 	call	8112fc <__pack_f>
  80fe44:	dfc00c17 	ldw	ra,48(sp)
  80fe48:	dc400b17 	ldw	r17,44(sp)
  80fe4c:	dc000a17 	ldw	r16,40(sp)
  80fe50:	dec00d04 	addi	sp,sp,52
  80fe54:	f800283a 	ret
  80fe58:	1880200c 	andi	r2,r3,128
  80fe5c:	103ff41e 	bne	r2,zero,80fe30 <__divsf3+0x114>
  80fe60:	203ff326 	beq	r4,zero,80fe30 <__divsf3+0x114>
  80fe64:	1947883a 	add	r3,r3,r5
  80fe68:	00bfe004 	movi	r2,-128
  80fe6c:	1886703a 	and	r3,r3,r2
  80fe70:	d8c00515 	stw	r3,20(sp)
  80fe74:	003fc506 	br	80fd8c <__divsf3+0x70>
  80fe78:	8009883a 	mov	r4,r16
  80fe7c:	003fc406 	br	80fd90 <__divsf3+0x74>
  80fe80:	8809883a 	mov	r4,r17
  80fe84:	d8000515 	stw	zero,20(sp)
  80fe88:	d8000415 	stw	zero,16(sp)
  80fe8c:	003fc006 	br	80fd90 <__divsf3+0x74>

0080fe90 <__gtsf2>:
  80fe90:	defff304 	addi	sp,sp,-52
  80fe94:	dc400b15 	stw	r17,44(sp)
  80fe98:	dc400204 	addi	r17,sp,8
  80fe9c:	dc000a15 	stw	r16,40(sp)
  80fea0:	d9000015 	stw	r4,0(sp)
  80fea4:	d9400115 	stw	r5,4(sp)
  80fea8:	d809883a 	mov	r4,sp
  80feac:	880b883a 	mov	r5,r17
  80feb0:	dc000604 	addi	r16,sp,24
  80feb4:	dfc00c15 	stw	ra,48(sp)
  80feb8:	081145c0 	call	81145c <__unpack_f>
  80febc:	d9000104 	addi	r4,sp,4
  80fec0:	800b883a 	mov	r5,r16
  80fec4:	081145c0 	call	81145c <__unpack_f>
  80fec8:	d8800217 	ldw	r2,8(sp)
  80fecc:	00c00044 	movi	r3,1
  80fed0:	01bfffc4 	movi	r6,-1
  80fed4:	1880062e 	bgeu	r3,r2,80fef0 <__gtsf2+0x60>
  80fed8:	d8800617 	ldw	r2,24(sp)
  80fedc:	8809883a 	mov	r4,r17
  80fee0:	800b883a 	mov	r5,r16
  80fee4:	1880022e 	bgeu	r3,r2,80fef0 <__gtsf2+0x60>
  80fee8:	08115240 	call	811524 <__fpcmp_parts_f>
  80feec:	100d883a 	mov	r6,r2
  80fef0:	3005883a 	mov	r2,r6
  80fef4:	dfc00c17 	ldw	ra,48(sp)
  80fef8:	dc400b17 	ldw	r17,44(sp)
  80fefc:	dc000a17 	ldw	r16,40(sp)
  80ff00:	dec00d04 	addi	sp,sp,52
  80ff04:	f800283a 	ret

0080ff08 <__ltsf2>:
  80ff08:	defff304 	addi	sp,sp,-52
  80ff0c:	dc400b15 	stw	r17,44(sp)
  80ff10:	dc400204 	addi	r17,sp,8
  80ff14:	dc000a15 	stw	r16,40(sp)
  80ff18:	d9000015 	stw	r4,0(sp)
  80ff1c:	d9400115 	stw	r5,4(sp)
  80ff20:	d809883a 	mov	r4,sp
  80ff24:	880b883a 	mov	r5,r17
  80ff28:	dc000604 	addi	r16,sp,24
  80ff2c:	dfc00c15 	stw	ra,48(sp)
  80ff30:	081145c0 	call	81145c <__unpack_f>
  80ff34:	d9000104 	addi	r4,sp,4
  80ff38:	800b883a 	mov	r5,r16
  80ff3c:	081145c0 	call	81145c <__unpack_f>
  80ff40:	d8800217 	ldw	r2,8(sp)
  80ff44:	00c00044 	movi	r3,1
  80ff48:	180d883a 	mov	r6,r3
  80ff4c:	1880062e 	bgeu	r3,r2,80ff68 <__ltsf2+0x60>
  80ff50:	d8800617 	ldw	r2,24(sp)
  80ff54:	8809883a 	mov	r4,r17
  80ff58:	800b883a 	mov	r5,r16
  80ff5c:	1880022e 	bgeu	r3,r2,80ff68 <__ltsf2+0x60>
  80ff60:	08115240 	call	811524 <__fpcmp_parts_f>
  80ff64:	100d883a 	mov	r6,r2
  80ff68:	3005883a 	mov	r2,r6
  80ff6c:	dfc00c17 	ldw	ra,48(sp)
  80ff70:	dc400b17 	ldw	r17,44(sp)
  80ff74:	dc000a17 	ldw	r16,40(sp)
  80ff78:	dec00d04 	addi	sp,sp,52
  80ff7c:	f800283a 	ret

0080ff80 <__floatsisf>:
  80ff80:	2006d7fa 	srli	r3,r4,31
  80ff84:	defffa04 	addi	sp,sp,-24
  80ff88:	008000c4 	movi	r2,3
  80ff8c:	dfc00515 	stw	ra,20(sp)
  80ff90:	dc000415 	stw	r16,16(sp)
  80ff94:	d8800015 	stw	r2,0(sp)
  80ff98:	d8c00115 	stw	r3,4(sp)
  80ff9c:	2000081e 	bne	r4,zero,80ffc0 <__floatsisf+0x40>
  80ffa0:	00800084 	movi	r2,2
  80ffa4:	d8800015 	stw	r2,0(sp)
  80ffa8:	d809883a 	mov	r4,sp
  80ffac:	08112fc0 	call	8112fc <__pack_f>
  80ffb0:	dfc00517 	ldw	ra,20(sp)
  80ffb4:	dc000417 	ldw	r16,16(sp)
  80ffb8:	dec00604 	addi	sp,sp,24
  80ffbc:	f800283a 	ret
  80ffc0:	00800784 	movi	r2,30
  80ffc4:	1807003a 	cmpeq	r3,r3,zero
  80ffc8:	d8800215 	stw	r2,8(sp)
  80ffcc:	18000e1e 	bne	r3,zero,810008 <__floatsisf+0x88>
  80ffd0:	00a00034 	movhi	r2,32768
  80ffd4:	20800e26 	beq	r4,r2,810010 <__floatsisf+0x90>
  80ffd8:	0121c83a 	sub	r16,zero,r4
  80ffdc:	8009883a 	mov	r4,r16
  80ffe0:	dc000315 	stw	r16,12(sp)
  80ffe4:	081127c0 	call	81127c <__clzsi2>
  80ffe8:	117fffc4 	addi	r5,r2,-1
  80ffec:	017fee0e 	bge	zero,r5,80ffa8 <__floatsisf+0x28>
  80fff0:	d8800217 	ldw	r2,8(sp)
  80fff4:	8146983a 	sll	r3,r16,r5
  80fff8:	1145c83a 	sub	r2,r2,r5
  80fffc:	d8c00315 	stw	r3,12(sp)
  810000:	d8800215 	stw	r2,8(sp)
  810004:	003fe806 	br	80ffa8 <__floatsisf+0x28>
  810008:	2021883a 	mov	r16,r4
  81000c:	003ff306 	br	80ffdc <__floatsisf+0x5c>
  810010:	00b3c034 	movhi	r2,52992
  810014:	003fe606 	br	80ffb0 <__floatsisf+0x30>

00810018 <__extendsfdf2>:
  810018:	defff904 	addi	sp,sp,-28
  81001c:	d9000115 	stw	r4,4(sp)
  810020:	d9400204 	addi	r5,sp,8
  810024:	d9000104 	addi	r4,sp,4
  810028:	dfc00615 	stw	ra,24(sp)
  81002c:	081145c0 	call	81145c <__unpack_f>
  810030:	d9c00517 	ldw	r7,20(sp)
  810034:	0011883a 	mov	r8,zero
  810038:	400697ba 	slli	r3,r8,30
  81003c:	3812d0ba 	srli	r9,r7,2
  810040:	380497ba 	slli	r2,r7,30
  810044:	d9000217 	ldw	r4,8(sp)
  810048:	d9400317 	ldw	r5,12(sp)
  81004c:	d9800417 	ldw	r6,16(sp)
  810050:	48c6b03a 	or	r3,r9,r3
  810054:	100f883a 	mov	r7,r2
  810058:	d8c00015 	stw	r3,0(sp)
  81005c:	0810fec0 	call	810fec <__make_dp>
  810060:	dfc00617 	ldw	ra,24(sp)
  810064:	dec00704 	addi	sp,sp,28
  810068:	f800283a 	ret

0081006c <__floatunsisf>:
  81006c:	defff904 	addi	sp,sp,-28
  810070:	dc400515 	stw	r17,20(sp)
  810074:	dc000415 	stw	r16,16(sp)
  810078:	dfc00615 	stw	ra,24(sp)
  81007c:	04400784 	movi	r17,30
  810080:	2021883a 	mov	r16,r4
  810084:	d8000115 	stw	zero,4(sp)
  810088:	2000091e 	bne	r4,zero,8100b0 <__floatunsisf+0x44>
  81008c:	00800084 	movi	r2,2
  810090:	d8800015 	stw	r2,0(sp)
  810094:	d809883a 	mov	r4,sp
  810098:	08112fc0 	call	8112fc <__pack_f>
  81009c:	dfc00617 	ldw	ra,24(sp)
  8100a0:	dc400517 	ldw	r17,20(sp)
  8100a4:	dc000417 	ldw	r16,16(sp)
  8100a8:	dec00704 	addi	sp,sp,28
  8100ac:	f800283a 	ret
  8100b0:	008000c4 	movi	r2,3
  8100b4:	d9000315 	stw	r4,12(sp)
  8100b8:	d8800015 	stw	r2,0(sp)
  8100bc:	dc400215 	stw	r17,8(sp)
  8100c0:	081127c0 	call	81127c <__clzsi2>
  8100c4:	117fffc4 	addi	r5,r2,-1
  8100c8:	0147c83a 	sub	r3,zero,r5
  8100cc:	00800044 	movi	r2,1
  8100d0:	10c4983a 	sll	r2,r2,r3
  8100d4:	80c6d83a 	srl	r3,r16,r3
  8100d8:	8949c83a 	sub	r4,r17,r5
  8100dc:	10bfffc4 	addi	r2,r2,-1
  8100e0:	8084703a 	and	r2,r16,r2
  8100e4:	1004c03a 	cmpne	r2,r2,zero
  8100e8:	1886b03a 	or	r3,r3,r2
  8100ec:	28000c16 	blt	r5,zero,810120 <__floatunsisf+0xb4>
  8100f0:	8144983a 	sll	r2,r16,r5
  8100f4:	8947c83a 	sub	r3,r17,r5
  8100f8:	283fe626 	beq	r5,zero,810094 <__floatunsisf+0x28>
  8100fc:	d809883a 	mov	r4,sp
  810100:	d8800315 	stw	r2,12(sp)
  810104:	d8c00215 	stw	r3,8(sp)
  810108:	08112fc0 	call	8112fc <__pack_f>
  81010c:	dfc00617 	ldw	ra,24(sp)
  810110:	dc400517 	ldw	r17,20(sp)
  810114:	dc000417 	ldw	r16,16(sp)
  810118:	dec00704 	addi	sp,sp,28
  81011c:	f800283a 	ret
  810120:	d8c00315 	stw	r3,12(sp)
  810124:	d9000215 	stw	r4,8(sp)
  810128:	003fda06 	br	810094 <__floatunsisf+0x28>

0081012c <_fpadd_parts>:
  81012c:	defff804 	addi	sp,sp,-32
  810130:	dcc00315 	stw	r19,12(sp)
  810134:	2027883a 	mov	r19,r4
  810138:	21000017 	ldw	r4,0(r4)
  81013c:	00c00044 	movi	r3,1
  810140:	dd400515 	stw	r21,20(sp)
  810144:	dd000415 	stw	r20,16(sp)
  810148:	ddc00715 	stw	r23,28(sp)
  81014c:	dd800615 	stw	r22,24(sp)
  810150:	dc800215 	stw	r18,8(sp)
  810154:	dc400115 	stw	r17,4(sp)
  810158:	dc000015 	stw	r16,0(sp)
  81015c:	282b883a 	mov	r21,r5
  810160:	3029883a 	mov	r20,r6
  810164:	1900632e 	bgeu	r3,r4,8102f4 <_fpadd_parts+0x1c8>
  810168:	28800017 	ldw	r2,0(r5)
  81016c:	1880812e 	bgeu	r3,r2,810374 <_fpadd_parts+0x248>
  810170:	00c00104 	movi	r3,4
  810174:	20c0dc26 	beq	r4,r3,8104e8 <_fpadd_parts+0x3bc>
  810178:	10c07e26 	beq	r2,r3,810374 <_fpadd_parts+0x248>
  81017c:	00c00084 	movi	r3,2
  810180:	10c06726 	beq	r2,r3,810320 <_fpadd_parts+0x1f4>
  810184:	20c07b26 	beq	r4,r3,810374 <_fpadd_parts+0x248>
  810188:	9dc00217 	ldw	r23,8(r19)
  81018c:	28c00217 	ldw	r3,8(r5)
  810190:	9c400317 	ldw	r17,12(r19)
  810194:	2bc00317 	ldw	r15,12(r5)
  810198:	b8cdc83a 	sub	r6,r23,r3
  81019c:	9c800417 	ldw	r18,16(r19)
  8101a0:	2c000417 	ldw	r16,16(r5)
  8101a4:	3009883a 	mov	r4,r6
  8101a8:	30009716 	blt	r6,zero,810408 <_fpadd_parts+0x2dc>
  8101ac:	00800fc4 	movi	r2,63
  8101b0:	11806b16 	blt	r2,r6,810360 <_fpadd_parts+0x234>
  8101b4:	0100a40e 	bge	zero,r4,810448 <_fpadd_parts+0x31c>
  8101b8:	35bff804 	addi	r22,r6,-32
  8101bc:	b000bc16 	blt	r22,zero,8104b0 <_fpadd_parts+0x384>
  8101c0:	8596d83a 	srl	r11,r16,r22
  8101c4:	0019883a 	mov	r12,zero
  8101c8:	0013883a 	mov	r9,zero
  8101cc:	01000044 	movi	r4,1
  8101d0:	0015883a 	mov	r10,zero
  8101d4:	b000be16 	blt	r22,zero,8104d0 <_fpadd_parts+0x3a4>
  8101d8:	2590983a 	sll	r8,r4,r22
  8101dc:	000f883a 	mov	r7,zero
  8101e0:	00bfffc4 	movi	r2,-1
  8101e4:	3889883a 	add	r4,r7,r2
  8101e8:	408b883a 	add	r5,r8,r2
  8101ec:	21cd803a 	cmpltu	r6,r4,r7
  8101f0:	314b883a 	add	r5,r6,r5
  8101f4:	7904703a 	and	r2,r15,r4
  8101f8:	8146703a 	and	r3,r16,r5
  8101fc:	10c4b03a 	or	r2,r2,r3
  810200:	10000226 	beq	r2,zero,81020c <_fpadd_parts+0xe0>
  810204:	02400044 	movi	r9,1
  810208:	0015883a 	mov	r10,zero
  81020c:	5a5eb03a 	or	r15,r11,r9
  810210:	62a0b03a 	or	r16,r12,r10
  810214:	99400117 	ldw	r5,4(r19)
  810218:	a8800117 	ldw	r2,4(r21)
  81021c:	28806e26 	beq	r5,r2,8103d8 <_fpadd_parts+0x2ac>
  810220:	28006626 	beq	r5,zero,8103bc <_fpadd_parts+0x290>
  810224:	7c45c83a 	sub	r2,r15,r17
  810228:	7889803a 	cmpltu	r4,r15,r2
  81022c:	8487c83a 	sub	r3,r16,r18
  810230:	1909c83a 	sub	r4,r3,r4
  810234:	100d883a 	mov	r6,r2
  810238:	200f883a 	mov	r7,r4
  81023c:	38007716 	blt	r7,zero,81041c <_fpadd_parts+0x2f0>
  810240:	a5c00215 	stw	r23,8(r20)
  810244:	a1c00415 	stw	r7,16(r20)
  810248:	a0000115 	stw	zero,4(r20)
  81024c:	a1800315 	stw	r6,12(r20)
  810250:	a2000317 	ldw	r8,12(r20)
  810254:	a2400417 	ldw	r9,16(r20)
  810258:	00bfffc4 	movi	r2,-1
  81025c:	408b883a 	add	r5,r8,r2
  810260:	2a09803a 	cmpltu	r4,r5,r8
  810264:	488d883a 	add	r6,r9,r2
  810268:	01c40034 	movhi	r7,4096
  81026c:	39ffffc4 	addi	r7,r7,-1
  810270:	218d883a 	add	r6,r4,r6
  810274:	39801736 	bltu	r7,r6,8102d4 <_fpadd_parts+0x1a8>
  810278:	31c06526 	beq	r6,r7,810410 <_fpadd_parts+0x2e4>
  81027c:	a3000217 	ldw	r12,8(r20)
  810280:	4209883a 	add	r4,r8,r8
  810284:	00bfffc4 	movi	r2,-1
  810288:	220f803a 	cmpltu	r7,r4,r8
  81028c:	4a4b883a 	add	r5,r9,r9
  810290:	394f883a 	add	r7,r7,r5
  810294:	2095883a 	add	r10,r4,r2
  810298:	3897883a 	add	r11,r7,r2
  81029c:	510d803a 	cmpltu	r6,r10,r4
  8102a0:	6099883a 	add	r12,r12,r2
  8102a4:	32d7883a 	add	r11,r6,r11
  8102a8:	00840034 	movhi	r2,4096
  8102ac:	10bfffc4 	addi	r2,r2,-1
  8102b0:	2011883a 	mov	r8,r4
  8102b4:	3813883a 	mov	r9,r7
  8102b8:	a1000315 	stw	r4,12(r20)
  8102bc:	a1c00415 	stw	r7,16(r20)
  8102c0:	a3000215 	stw	r12,8(r20)
  8102c4:	12c00336 	bltu	r2,r11,8102d4 <_fpadd_parts+0x1a8>
  8102c8:	58bfed1e 	bne	r11,r2,810280 <_fpadd_parts+0x154>
  8102cc:	00bfff84 	movi	r2,-2
  8102d0:	12bfeb2e 	bgeu	r2,r10,810280 <_fpadd_parts+0x154>
  8102d4:	a2800417 	ldw	r10,16(r20)
  8102d8:	008000c4 	movi	r2,3
  8102dc:	00c80034 	movhi	r3,8192
  8102e0:	18ffffc4 	addi	r3,r3,-1
  8102e4:	a2400317 	ldw	r9,12(r20)
  8102e8:	a0800015 	stw	r2,0(r20)
  8102ec:	1a802336 	bltu	r3,r10,81037c <_fpadd_parts+0x250>
  8102f0:	a027883a 	mov	r19,r20
  8102f4:	9805883a 	mov	r2,r19
  8102f8:	ddc00717 	ldw	r23,28(sp)
  8102fc:	dd800617 	ldw	r22,24(sp)
  810300:	dd400517 	ldw	r21,20(sp)
  810304:	dd000417 	ldw	r20,16(sp)
  810308:	dcc00317 	ldw	r19,12(sp)
  81030c:	dc800217 	ldw	r18,8(sp)
  810310:	dc400117 	ldw	r17,4(sp)
  810314:	dc000017 	ldw	r16,0(sp)
  810318:	dec00804 	addi	sp,sp,32
  81031c:	f800283a 	ret
  810320:	20fff41e 	bne	r4,r3,8102f4 <_fpadd_parts+0x1c8>
  810324:	31000015 	stw	r4,0(r6)
  810328:	98800117 	ldw	r2,4(r19)
  81032c:	30800115 	stw	r2,4(r6)
  810330:	98c00217 	ldw	r3,8(r19)
  810334:	30c00215 	stw	r3,8(r6)
  810338:	98800317 	ldw	r2,12(r19)
  81033c:	30800315 	stw	r2,12(r6)
  810340:	98c00417 	ldw	r3,16(r19)
  810344:	30c00415 	stw	r3,16(r6)
  810348:	98800117 	ldw	r2,4(r19)
  81034c:	28c00117 	ldw	r3,4(r5)
  810350:	3027883a 	mov	r19,r6
  810354:	10c4703a 	and	r2,r2,r3
  810358:	30800115 	stw	r2,4(r6)
  81035c:	003fe506 	br	8102f4 <_fpadd_parts+0x1c8>
  810360:	1dc02616 	blt	r3,r23,8103fc <_fpadd_parts+0x2d0>
  810364:	0023883a 	mov	r17,zero
  810368:	182f883a 	mov	r23,r3
  81036c:	0025883a 	mov	r18,zero
  810370:	003fa806 	br	810214 <_fpadd_parts+0xe8>
  810374:	a827883a 	mov	r19,r21
  810378:	003fde06 	br	8102f4 <_fpadd_parts+0x1c8>
  81037c:	01800044 	movi	r6,1
  810380:	500497fa 	slli	r2,r10,31
  810384:	4808d07a 	srli	r4,r9,1
  810388:	518ad83a 	srl	r5,r10,r6
  81038c:	a2000217 	ldw	r8,8(r20)
  810390:	1108b03a 	or	r4,r2,r4
  810394:	0007883a 	mov	r3,zero
  810398:	4984703a 	and	r2,r9,r6
  81039c:	208cb03a 	or	r6,r4,r2
  8103a0:	28ceb03a 	or	r7,r5,r3
  8103a4:	42000044 	addi	r8,r8,1
  8103a8:	a027883a 	mov	r19,r20
  8103ac:	a1c00415 	stw	r7,16(r20)
  8103b0:	a2000215 	stw	r8,8(r20)
  8103b4:	a1800315 	stw	r6,12(r20)
  8103b8:	003fce06 	br	8102f4 <_fpadd_parts+0x1c8>
  8103bc:	8bc5c83a 	sub	r2,r17,r15
  8103c0:	8889803a 	cmpltu	r4,r17,r2
  8103c4:	9407c83a 	sub	r3,r18,r16
  8103c8:	1909c83a 	sub	r4,r3,r4
  8103cc:	100d883a 	mov	r6,r2
  8103d0:	200f883a 	mov	r7,r4
  8103d4:	003f9906 	br	81023c <_fpadd_parts+0x110>
  8103d8:	7c45883a 	add	r2,r15,r17
  8103dc:	13c9803a 	cmpltu	r4,r2,r15
  8103e0:	8487883a 	add	r3,r16,r18
  8103e4:	20c9883a 	add	r4,r4,r3
  8103e8:	a1400115 	stw	r5,4(r20)
  8103ec:	a5c00215 	stw	r23,8(r20)
  8103f0:	a0800315 	stw	r2,12(r20)
  8103f4:	a1000415 	stw	r4,16(r20)
  8103f8:	003fb606 	br	8102d4 <_fpadd_parts+0x1a8>
  8103fc:	001f883a 	mov	r15,zero
  810400:	0021883a 	mov	r16,zero
  810404:	003f8306 	br	810214 <_fpadd_parts+0xe8>
  810408:	018dc83a 	sub	r6,zero,r6
  81040c:	003f6706 	br	8101ac <_fpadd_parts+0x80>
  810410:	00bfff84 	movi	r2,-2
  810414:	117faf36 	bltu	r2,r5,8102d4 <_fpadd_parts+0x1a8>
  810418:	003f9806 	br	81027c <_fpadd_parts+0x150>
  81041c:	0005883a 	mov	r2,zero
  810420:	1189c83a 	sub	r4,r2,r6
  810424:	1105803a 	cmpltu	r2,r2,r4
  810428:	01cbc83a 	sub	r5,zero,r7
  81042c:	2885c83a 	sub	r2,r5,r2
  810430:	01800044 	movi	r6,1
  810434:	a1800115 	stw	r6,4(r20)
  810438:	a5c00215 	stw	r23,8(r20)
  81043c:	a1000315 	stw	r4,12(r20)
  810440:	a0800415 	stw	r2,16(r20)
  810444:	003f8206 	br	810250 <_fpadd_parts+0x124>
  810448:	203f7226 	beq	r4,zero,810214 <_fpadd_parts+0xe8>
  81044c:	35bff804 	addi	r22,r6,-32
  810450:	b9af883a 	add	r23,r23,r6
  810454:	b0003116 	blt	r22,zero,81051c <_fpadd_parts+0x3f0>
  810458:	959ad83a 	srl	r13,r18,r22
  81045c:	001d883a 	mov	r14,zero
  810460:	000f883a 	mov	r7,zero
  810464:	01000044 	movi	r4,1
  810468:	0011883a 	mov	r8,zero
  81046c:	b0002516 	blt	r22,zero,810504 <_fpadd_parts+0x3d8>
  810470:	2594983a 	sll	r10,r4,r22
  810474:	0013883a 	mov	r9,zero
  810478:	00bfffc4 	movi	r2,-1
  81047c:	4889883a 	add	r4,r9,r2
  810480:	508b883a 	add	r5,r10,r2
  810484:	224d803a 	cmpltu	r6,r4,r9
  810488:	314b883a 	add	r5,r6,r5
  81048c:	8904703a 	and	r2,r17,r4
  810490:	9146703a 	and	r3,r18,r5
  810494:	10c4b03a 	or	r2,r2,r3
  810498:	10000226 	beq	r2,zero,8104a4 <_fpadd_parts+0x378>
  81049c:	01c00044 	movi	r7,1
  8104a0:	0011883a 	mov	r8,zero
  8104a4:	69e2b03a 	or	r17,r13,r7
  8104a8:	7224b03a 	or	r18,r14,r8
  8104ac:	003f5906 	br	810214 <_fpadd_parts+0xe8>
  8104b0:	8407883a 	add	r3,r16,r16
  8104b4:	008007c4 	movi	r2,31
  8104b8:	1185c83a 	sub	r2,r2,r6
  8104bc:	1886983a 	sll	r3,r3,r2
  8104c0:	7996d83a 	srl	r11,r15,r6
  8104c4:	8198d83a 	srl	r12,r16,r6
  8104c8:	1ad6b03a 	or	r11,r3,r11
  8104cc:	003f3e06 	br	8101c8 <_fpadd_parts+0x9c>
  8104d0:	2006d07a 	srli	r3,r4,1
  8104d4:	008007c4 	movi	r2,31
  8104d8:	1185c83a 	sub	r2,r2,r6
  8104dc:	1890d83a 	srl	r8,r3,r2
  8104e0:	218e983a 	sll	r7,r4,r6
  8104e4:	003f3e06 	br	8101e0 <_fpadd_parts+0xb4>
  8104e8:	113f821e 	bne	r2,r4,8102f4 <_fpadd_parts+0x1c8>
  8104ec:	28c00117 	ldw	r3,4(r5)
  8104f0:	98800117 	ldw	r2,4(r19)
  8104f4:	10ff7f26 	beq	r2,r3,8102f4 <_fpadd_parts+0x1c8>
  8104f8:	04c020b4 	movhi	r19,130
  8104fc:	9cdfd204 	addi	r19,r19,32584
  810500:	003f7c06 	br	8102f4 <_fpadd_parts+0x1c8>
  810504:	2006d07a 	srli	r3,r4,1
  810508:	008007c4 	movi	r2,31
  81050c:	1185c83a 	sub	r2,r2,r6
  810510:	1894d83a 	srl	r10,r3,r2
  810514:	2192983a 	sll	r9,r4,r6
  810518:	003fd706 	br	810478 <_fpadd_parts+0x34c>
  81051c:	9487883a 	add	r3,r18,r18
  810520:	008007c4 	movi	r2,31
  810524:	1185c83a 	sub	r2,r2,r6
  810528:	1886983a 	sll	r3,r3,r2
  81052c:	899ad83a 	srl	r13,r17,r6
  810530:	919cd83a 	srl	r14,r18,r6
  810534:	1b5ab03a 	or	r13,r3,r13
  810538:	003fc906 	br	810460 <_fpadd_parts+0x334>

0081053c <__subdf3>:
  81053c:	deffea04 	addi	sp,sp,-88
  810540:	dcc01415 	stw	r19,80(sp)
  810544:	dcc00404 	addi	r19,sp,16
  810548:	2011883a 	mov	r8,r4
  81054c:	2813883a 	mov	r9,r5
  810550:	dc401315 	stw	r17,76(sp)
  810554:	d809883a 	mov	r4,sp
  810558:	980b883a 	mov	r5,r19
  81055c:	dc400904 	addi	r17,sp,36
  810560:	dfc01515 	stw	ra,84(sp)
  810564:	da400115 	stw	r9,4(sp)
  810568:	d9c00315 	stw	r7,12(sp)
  81056c:	da000015 	stw	r8,0(sp)
  810570:	d9800215 	stw	r6,8(sp)
  810574:	081190c0 	call	81190c <__unpack_d>
  810578:	d9000204 	addi	r4,sp,8
  81057c:	880b883a 	mov	r5,r17
  810580:	081190c0 	call	81190c <__unpack_d>
  810584:	d8800a17 	ldw	r2,40(sp)
  810588:	880b883a 	mov	r5,r17
  81058c:	9809883a 	mov	r4,r19
  810590:	d9800e04 	addi	r6,sp,56
  810594:	1080005c 	xori	r2,r2,1
  810598:	d8800a15 	stw	r2,40(sp)
  81059c:	081012c0 	call	81012c <_fpadd_parts>
  8105a0:	1009883a 	mov	r4,r2
  8105a4:	08115f80 	call	8115f8 <__pack_d>
  8105a8:	dfc01517 	ldw	ra,84(sp)
  8105ac:	dcc01417 	ldw	r19,80(sp)
  8105b0:	dc401317 	ldw	r17,76(sp)
  8105b4:	dec01604 	addi	sp,sp,88
  8105b8:	f800283a 	ret

008105bc <__adddf3>:
  8105bc:	deffea04 	addi	sp,sp,-88
  8105c0:	dcc01415 	stw	r19,80(sp)
  8105c4:	dcc00404 	addi	r19,sp,16
  8105c8:	2011883a 	mov	r8,r4
  8105cc:	2813883a 	mov	r9,r5
  8105d0:	dc401315 	stw	r17,76(sp)
  8105d4:	d809883a 	mov	r4,sp
  8105d8:	980b883a 	mov	r5,r19
  8105dc:	dc400904 	addi	r17,sp,36
  8105e0:	dfc01515 	stw	ra,84(sp)
  8105e4:	da400115 	stw	r9,4(sp)
  8105e8:	d9c00315 	stw	r7,12(sp)
  8105ec:	da000015 	stw	r8,0(sp)
  8105f0:	d9800215 	stw	r6,8(sp)
  8105f4:	081190c0 	call	81190c <__unpack_d>
  8105f8:	d9000204 	addi	r4,sp,8
  8105fc:	880b883a 	mov	r5,r17
  810600:	081190c0 	call	81190c <__unpack_d>
  810604:	d9800e04 	addi	r6,sp,56
  810608:	9809883a 	mov	r4,r19
  81060c:	880b883a 	mov	r5,r17
  810610:	081012c0 	call	81012c <_fpadd_parts>
  810614:	1009883a 	mov	r4,r2
  810618:	08115f80 	call	8115f8 <__pack_d>
  81061c:	dfc01517 	ldw	ra,84(sp)
  810620:	dcc01417 	ldw	r19,80(sp)
  810624:	dc401317 	ldw	r17,76(sp)
  810628:	dec01604 	addi	sp,sp,88
  81062c:	f800283a 	ret

00810630 <__muldf3>:
  810630:	deffe004 	addi	sp,sp,-128
  810634:	dc401815 	stw	r17,96(sp)
  810638:	dc400404 	addi	r17,sp,16
  81063c:	2011883a 	mov	r8,r4
  810640:	2813883a 	mov	r9,r5
  810644:	dc001715 	stw	r16,92(sp)
  810648:	d809883a 	mov	r4,sp
  81064c:	880b883a 	mov	r5,r17
  810650:	dc000904 	addi	r16,sp,36
  810654:	dfc01f15 	stw	ra,124(sp)
  810658:	da400115 	stw	r9,4(sp)
  81065c:	d9c00315 	stw	r7,12(sp)
  810660:	da000015 	stw	r8,0(sp)
  810664:	d9800215 	stw	r6,8(sp)
  810668:	ddc01e15 	stw	r23,120(sp)
  81066c:	dd801d15 	stw	r22,116(sp)
  810670:	dd401c15 	stw	r21,112(sp)
  810674:	dd001b15 	stw	r20,108(sp)
  810678:	dcc01a15 	stw	r19,104(sp)
  81067c:	dc801915 	stw	r18,100(sp)
  810680:	081190c0 	call	81190c <__unpack_d>
  810684:	d9000204 	addi	r4,sp,8
  810688:	800b883a 	mov	r5,r16
  81068c:	081190c0 	call	81190c <__unpack_d>
  810690:	d9000417 	ldw	r4,16(sp)
  810694:	00800044 	movi	r2,1
  810698:	1100102e 	bgeu	r2,r4,8106dc <__muldf3+0xac>
  81069c:	d8c00917 	ldw	r3,36(sp)
  8106a0:	10c0062e 	bgeu	r2,r3,8106bc <__muldf3+0x8c>
  8106a4:	00800104 	movi	r2,4
  8106a8:	20800a26 	beq	r4,r2,8106d4 <__muldf3+0xa4>
  8106ac:	1880cc26 	beq	r3,r2,8109e0 <__muldf3+0x3b0>
  8106b0:	00800084 	movi	r2,2
  8106b4:	20800926 	beq	r4,r2,8106dc <__muldf3+0xac>
  8106b8:	1880191e 	bne	r3,r2,810720 <__muldf3+0xf0>
  8106bc:	d8c00a17 	ldw	r3,40(sp)
  8106c0:	d8800517 	ldw	r2,20(sp)
  8106c4:	8009883a 	mov	r4,r16
  8106c8:	10c4c03a 	cmpne	r2,r2,r3
  8106cc:	d8800a15 	stw	r2,40(sp)
  8106d0:	00000706 	br	8106f0 <__muldf3+0xc0>
  8106d4:	00800084 	movi	r2,2
  8106d8:	1880c326 	beq	r3,r2,8109e8 <__muldf3+0x3b8>
  8106dc:	d8800517 	ldw	r2,20(sp)
  8106e0:	d8c00a17 	ldw	r3,40(sp)
  8106e4:	8809883a 	mov	r4,r17
  8106e8:	10c4c03a 	cmpne	r2,r2,r3
  8106ec:	d8800515 	stw	r2,20(sp)
  8106f0:	08115f80 	call	8115f8 <__pack_d>
  8106f4:	dfc01f17 	ldw	ra,124(sp)
  8106f8:	ddc01e17 	ldw	r23,120(sp)
  8106fc:	dd801d17 	ldw	r22,116(sp)
  810700:	dd401c17 	ldw	r21,112(sp)
  810704:	dd001b17 	ldw	r20,108(sp)
  810708:	dcc01a17 	ldw	r19,104(sp)
  81070c:	dc801917 	ldw	r18,100(sp)
  810710:	dc401817 	ldw	r17,96(sp)
  810714:	dc001717 	ldw	r16,92(sp)
  810718:	dec02004 	addi	sp,sp,128
  81071c:	f800283a 	ret
  810720:	dd800717 	ldw	r22,28(sp)
  810724:	dc800c17 	ldw	r18,48(sp)
  810728:	002b883a 	mov	r21,zero
  81072c:	0023883a 	mov	r17,zero
  810730:	a80b883a 	mov	r5,r21
  810734:	b00d883a 	mov	r6,r22
  810738:	880f883a 	mov	r7,r17
  81073c:	ddc00817 	ldw	r23,32(sp)
  810740:	dcc00d17 	ldw	r19,52(sp)
  810744:	9009883a 	mov	r4,r18
  810748:	08111e40 	call	8111e4 <__muldi3>
  81074c:	001b883a 	mov	r13,zero
  810750:	680f883a 	mov	r7,r13
  810754:	b009883a 	mov	r4,r22
  810758:	000b883a 	mov	r5,zero
  81075c:	980d883a 	mov	r6,r19
  810760:	b82d883a 	mov	r22,r23
  810764:	002f883a 	mov	r23,zero
  810768:	db401615 	stw	r13,88(sp)
  81076c:	d8801315 	stw	r2,76(sp)
  810770:	d8c01415 	stw	r3,80(sp)
  810774:	dcc01515 	stw	r19,84(sp)
  810778:	08111e40 	call	8111e4 <__muldi3>
  81077c:	b00d883a 	mov	r6,r22
  810780:	000b883a 	mov	r5,zero
  810784:	9009883a 	mov	r4,r18
  810788:	b80f883a 	mov	r7,r23
  81078c:	1021883a 	mov	r16,r2
  810790:	1823883a 	mov	r17,r3
  810794:	08111e40 	call	8111e4 <__muldi3>
  810798:	8085883a 	add	r2,r16,r2
  81079c:	140d803a 	cmpltu	r6,r2,r16
  8107a0:	88c7883a 	add	r3,r17,r3
  8107a4:	30cd883a 	add	r6,r6,r3
  8107a8:	1029883a 	mov	r20,r2
  8107ac:	302b883a 	mov	r21,r6
  8107b0:	da801317 	ldw	r10,76(sp)
  8107b4:	dac01417 	ldw	r11,80(sp)
  8107b8:	db001517 	ldw	r12,84(sp)
  8107bc:	db401617 	ldw	r13,88(sp)
  8107c0:	3440612e 	bgeu	r6,r17,810948 <__muldf3+0x318>
  8107c4:	0009883a 	mov	r4,zero
  8107c8:	5105883a 	add	r2,r10,r4
  8107cc:	128d803a 	cmpltu	r6,r2,r10
  8107d0:	5d07883a 	add	r3,r11,r20
  8107d4:	30cd883a 	add	r6,r6,r3
  8107d8:	0021883a 	mov	r16,zero
  8107dc:	04400044 	movi	r17,1
  8107e0:	1025883a 	mov	r18,r2
  8107e4:	3027883a 	mov	r19,r6
  8107e8:	32c06236 	bltu	r6,r11,810974 <__muldf3+0x344>
  8107ec:	59807a26 	beq	r11,r6,8109d8 <__muldf3+0x3a8>
  8107f0:	680b883a 	mov	r5,r13
  8107f4:	b80f883a 	mov	r7,r23
  8107f8:	6009883a 	mov	r4,r12
  8107fc:	b00d883a 	mov	r6,r22
  810800:	08111e40 	call	8111e4 <__muldi3>
  810804:	1009883a 	mov	r4,r2
  810808:	000f883a 	mov	r7,zero
  81080c:	1545883a 	add	r2,r2,r21
  810810:	1111803a 	cmpltu	r8,r2,r4
  810814:	19c7883a 	add	r3,r3,r7
  810818:	40c7883a 	add	r3,r8,r3
  81081c:	88cb883a 	add	r5,r17,r3
  810820:	d8c00617 	ldw	r3,24(sp)
  810824:	8089883a 	add	r4,r16,r2
  810828:	d8800b17 	ldw	r2,44(sp)
  81082c:	18c00104 	addi	r3,r3,4
  810830:	240d803a 	cmpltu	r6,r4,r16
  810834:	10c7883a 	add	r3,r2,r3
  810838:	2013883a 	mov	r9,r4
  81083c:	d8800a17 	ldw	r2,40(sp)
  810840:	d9000517 	ldw	r4,20(sp)
  810844:	314d883a 	add	r6,r6,r5
  810848:	3015883a 	mov	r10,r6
  81084c:	2088c03a 	cmpne	r4,r4,r2
  810850:	00880034 	movhi	r2,8192
  810854:	10bfffc4 	addi	r2,r2,-1
  810858:	d9000f15 	stw	r4,60(sp)
  81085c:	d8c01015 	stw	r3,64(sp)
  810860:	1180162e 	bgeu	r2,r6,8108bc <__muldf3+0x28c>
  810864:	1811883a 	mov	r8,r3
  810868:	101f883a 	mov	r15,r2
  81086c:	980497fa 	slli	r2,r19,31
  810870:	9016d07a 	srli	r11,r18,1
  810874:	500697fa 	slli	r3,r10,31
  810878:	480cd07a 	srli	r6,r9,1
  81087c:	500ed07a 	srli	r7,r10,1
  810880:	12d6b03a 	or	r11,r2,r11
  810884:	00800044 	movi	r2,1
  810888:	198cb03a 	or	r6,r3,r6
  81088c:	4888703a 	and	r4,r9,r2
  810890:	9818d07a 	srli	r12,r19,1
  810894:	001b883a 	mov	r13,zero
  810898:	03a00034 	movhi	r14,32768
  81089c:	3013883a 	mov	r9,r6
  8108a0:	3815883a 	mov	r10,r7
  8108a4:	4091883a 	add	r8,r8,r2
  8108a8:	20000226 	beq	r4,zero,8108b4 <__muldf3+0x284>
  8108ac:	5b64b03a 	or	r18,r11,r13
  8108b0:	63a6b03a 	or	r19,r12,r14
  8108b4:	7abfed36 	bltu	r15,r10,81086c <__muldf3+0x23c>
  8108b8:	da001015 	stw	r8,64(sp)
  8108bc:	00840034 	movhi	r2,4096
  8108c0:	10bfffc4 	addi	r2,r2,-1
  8108c4:	12801436 	bltu	r2,r10,810918 <__muldf3+0x2e8>
  8108c8:	da001017 	ldw	r8,64(sp)
  8108cc:	101f883a 	mov	r15,r2
  8108d0:	4a45883a 	add	r2,r9,r9
  8108d4:	124d803a 	cmpltu	r6,r2,r9
  8108d8:	5287883a 	add	r3,r10,r10
  8108dc:	9497883a 	add	r11,r18,r18
  8108e0:	5c8f803a 	cmpltu	r7,r11,r18
  8108e4:	9cd9883a 	add	r12,r19,r19
  8108e8:	01000044 	movi	r4,1
  8108ec:	30cd883a 	add	r6,r6,r3
  8108f0:	3b0f883a 	add	r7,r7,r12
  8108f4:	423fffc4 	addi	r8,r8,-1
  8108f8:	1013883a 	mov	r9,r2
  8108fc:	3015883a 	mov	r10,r6
  810900:	111ab03a 	or	r13,r2,r4
  810904:	98003016 	blt	r19,zero,8109c8 <__muldf3+0x398>
  810908:	5825883a 	mov	r18,r11
  81090c:	3827883a 	mov	r19,r7
  810910:	7abfef2e 	bgeu	r15,r10,8108d0 <__muldf3+0x2a0>
  810914:	da001015 	stw	r8,64(sp)
  810918:	00803fc4 	movi	r2,255
  81091c:	488e703a 	and	r7,r9,r2
  810920:	00802004 	movi	r2,128
  810924:	0007883a 	mov	r3,zero
  810928:	0011883a 	mov	r8,zero
  81092c:	38801826 	beq	r7,r2,810990 <__muldf3+0x360>
  810930:	008000c4 	movi	r2,3
  810934:	d9000e04 	addi	r4,sp,56
  810938:	da801215 	stw	r10,72(sp)
  81093c:	d8800e15 	stw	r2,56(sp)
  810940:	da401115 	stw	r9,68(sp)
  810944:	003f6a06 	br	8106f0 <__muldf3+0xc0>
  810948:	89802126 	beq	r17,r6,8109d0 <__muldf3+0x3a0>
  81094c:	0009883a 	mov	r4,zero
  810950:	5105883a 	add	r2,r10,r4
  810954:	128d803a 	cmpltu	r6,r2,r10
  810958:	5d07883a 	add	r3,r11,r20
  81095c:	30cd883a 	add	r6,r6,r3
  810960:	0021883a 	mov	r16,zero
  810964:	0023883a 	mov	r17,zero
  810968:	1025883a 	mov	r18,r2
  81096c:	3027883a 	mov	r19,r6
  810970:	32ff9e2e 	bgeu	r6,r11,8107ec <__muldf3+0x1bc>
  810974:	00800044 	movi	r2,1
  810978:	8089883a 	add	r4,r16,r2
  81097c:	240d803a 	cmpltu	r6,r4,r16
  810980:	344d883a 	add	r6,r6,r17
  810984:	2021883a 	mov	r16,r4
  810988:	3023883a 	mov	r17,r6
  81098c:	003f9806 	br	8107f0 <__muldf3+0x1c0>
  810990:	403fe71e 	bne	r8,zero,810930 <__muldf3+0x300>
  810994:	01004004 	movi	r4,256
  810998:	4904703a 	and	r2,r9,r4
  81099c:	10c4b03a 	or	r2,r2,r3
  8109a0:	103fe31e 	bne	r2,zero,810930 <__muldf3+0x300>
  8109a4:	94c4b03a 	or	r2,r18,r19
  8109a8:	103fe126 	beq	r2,zero,810930 <__muldf3+0x300>
  8109ac:	49c5883a 	add	r2,r9,r7
  8109b0:	1251803a 	cmpltu	r8,r2,r9
  8109b4:	4291883a 	add	r8,r8,r10
  8109b8:	013fc004 	movi	r4,-256
  8109bc:	1112703a 	and	r9,r2,r4
  8109c0:	4015883a 	mov	r10,r8
  8109c4:	003fda06 	br	810930 <__muldf3+0x300>
  8109c8:	6813883a 	mov	r9,r13
  8109cc:	003fce06 	br	810908 <__muldf3+0x2d8>
  8109d0:	143f7c36 	bltu	r2,r16,8107c4 <__muldf3+0x194>
  8109d4:	003fdd06 	br	81094c <__muldf3+0x31c>
  8109d8:	12bf852e 	bgeu	r2,r10,8107f0 <__muldf3+0x1c0>
  8109dc:	003fe506 	br	810974 <__muldf3+0x344>
  8109e0:	00800084 	movi	r2,2
  8109e4:	20bf351e 	bne	r4,r2,8106bc <__muldf3+0x8c>
  8109e8:	010020b4 	movhi	r4,130
  8109ec:	211fd204 	addi	r4,r4,32584
  8109f0:	003f3f06 	br	8106f0 <__muldf3+0xc0>

008109f4 <__divdf3>:
  8109f4:	deffed04 	addi	sp,sp,-76
  8109f8:	dcc01115 	stw	r19,68(sp)
  8109fc:	dcc00404 	addi	r19,sp,16
  810a00:	2011883a 	mov	r8,r4
  810a04:	2813883a 	mov	r9,r5
  810a08:	dc000e15 	stw	r16,56(sp)
  810a0c:	d809883a 	mov	r4,sp
  810a10:	980b883a 	mov	r5,r19
  810a14:	dc000904 	addi	r16,sp,36
  810a18:	dfc01215 	stw	ra,72(sp)
  810a1c:	da400115 	stw	r9,4(sp)
  810a20:	d9c00315 	stw	r7,12(sp)
  810a24:	da000015 	stw	r8,0(sp)
  810a28:	d9800215 	stw	r6,8(sp)
  810a2c:	dc801015 	stw	r18,64(sp)
  810a30:	dc400f15 	stw	r17,60(sp)
  810a34:	081190c0 	call	81190c <__unpack_d>
  810a38:	d9000204 	addi	r4,sp,8
  810a3c:	800b883a 	mov	r5,r16
  810a40:	081190c0 	call	81190c <__unpack_d>
  810a44:	d9000417 	ldw	r4,16(sp)
  810a48:	00800044 	movi	r2,1
  810a4c:	11000b2e 	bgeu	r2,r4,810a7c <__divdf3+0x88>
  810a50:	d9400917 	ldw	r5,36(sp)
  810a54:	1140762e 	bgeu	r2,r5,810c30 <__divdf3+0x23c>
  810a58:	d8800517 	ldw	r2,20(sp)
  810a5c:	d8c00a17 	ldw	r3,40(sp)
  810a60:	01800104 	movi	r6,4
  810a64:	10c4f03a 	xor	r2,r2,r3
  810a68:	d8800515 	stw	r2,20(sp)
  810a6c:	21800226 	beq	r4,r6,810a78 <__divdf3+0x84>
  810a70:	00800084 	movi	r2,2
  810a74:	2080141e 	bne	r4,r2,810ac8 <__divdf3+0xd4>
  810a78:	29000926 	beq	r5,r4,810aa0 <__divdf3+0xac>
  810a7c:	9809883a 	mov	r4,r19
  810a80:	08115f80 	call	8115f8 <__pack_d>
  810a84:	dfc01217 	ldw	ra,72(sp)
  810a88:	dcc01117 	ldw	r19,68(sp)
  810a8c:	dc801017 	ldw	r18,64(sp)
  810a90:	dc400f17 	ldw	r17,60(sp)
  810a94:	dc000e17 	ldw	r16,56(sp)
  810a98:	dec01304 	addi	sp,sp,76
  810a9c:	f800283a 	ret
  810aa0:	010020b4 	movhi	r4,130
  810aa4:	211fd204 	addi	r4,r4,32584
  810aa8:	08115f80 	call	8115f8 <__pack_d>
  810aac:	dfc01217 	ldw	ra,72(sp)
  810ab0:	dcc01117 	ldw	r19,68(sp)
  810ab4:	dc801017 	ldw	r18,64(sp)
  810ab8:	dc400f17 	ldw	r17,60(sp)
  810abc:	dc000e17 	ldw	r16,56(sp)
  810ac0:	dec01304 	addi	sp,sp,76
  810ac4:	f800283a 	ret
  810ac8:	29805b26 	beq	r5,r6,810c38 <__divdf3+0x244>
  810acc:	28802d26 	beq	r5,r2,810b84 <__divdf3+0x190>
  810ad0:	d8c00617 	ldw	r3,24(sp)
  810ad4:	d8800b17 	ldw	r2,44(sp)
  810ad8:	d9c00817 	ldw	r7,32(sp)
  810adc:	dc400d17 	ldw	r17,52(sp)
  810ae0:	188bc83a 	sub	r5,r3,r2
  810ae4:	d9800717 	ldw	r6,28(sp)
  810ae8:	dc000c17 	ldw	r16,48(sp)
  810aec:	d9400615 	stw	r5,24(sp)
  810af0:	3c403836 	bltu	r7,r17,810bd4 <__divdf3+0x1e0>
  810af4:	89c03626 	beq	r17,r7,810bd0 <__divdf3+0x1dc>
  810af8:	0015883a 	mov	r10,zero
  810afc:	001d883a 	mov	r14,zero
  810b00:	02c40034 	movhi	r11,4096
  810b04:	001f883a 	mov	r15,zero
  810b08:	003f883a 	mov	ra,zero
  810b0c:	04800f44 	movi	r18,61
  810b10:	00000f06 	br	810b50 <__divdf3+0x15c>
  810b14:	601d883a 	mov	r14,r12
  810b18:	681f883a 	mov	r15,r13
  810b1c:	400d883a 	mov	r6,r8
  810b20:	100f883a 	mov	r7,r2
  810b24:	3191883a 	add	r8,r6,r6
  810b28:	5808d07a 	srli	r4,r11,1
  810b2c:	4185803a 	cmpltu	r2,r8,r6
  810b30:	39d3883a 	add	r9,r7,r7
  810b34:	28c6b03a 	or	r3,r5,r3
  810b38:	1245883a 	add	r2,r2,r9
  810b3c:	1815883a 	mov	r10,r3
  810b40:	2017883a 	mov	r11,r4
  810b44:	400d883a 	mov	r6,r8
  810b48:	100f883a 	mov	r7,r2
  810b4c:	fc801726 	beq	ra,r18,810bac <__divdf3+0x1b8>
  810b50:	580a97fa 	slli	r5,r11,31
  810b54:	5006d07a 	srli	r3,r10,1
  810b58:	ffc00044 	addi	ra,ra,1
  810b5c:	3c7ff136 	bltu	r7,r17,810b24 <__divdf3+0x130>
  810b60:	3411c83a 	sub	r8,r6,r16
  810b64:	3205803a 	cmpltu	r2,r6,r8
  810b68:	3c53c83a 	sub	r9,r7,r17
  810b6c:	7298b03a 	or	r12,r14,r10
  810b70:	7adab03a 	or	r13,r15,r11
  810b74:	4885c83a 	sub	r2,r9,r2
  810b78:	89ffe61e 	bne	r17,r7,810b14 <__divdf3+0x120>
  810b7c:	343fe936 	bltu	r6,r16,810b24 <__divdf3+0x130>
  810b80:	003fe406 	br	810b14 <__divdf3+0x120>
  810b84:	9809883a 	mov	r4,r19
  810b88:	d9800415 	stw	r6,16(sp)
  810b8c:	08115f80 	call	8115f8 <__pack_d>
  810b90:	dfc01217 	ldw	ra,72(sp)
  810b94:	dcc01117 	ldw	r19,68(sp)
  810b98:	dc801017 	ldw	r18,64(sp)
  810b9c:	dc400f17 	ldw	r17,60(sp)
  810ba0:	dc000e17 	ldw	r16,56(sp)
  810ba4:	dec01304 	addi	sp,sp,76
  810ba8:	f800283a 	ret
  810bac:	00803fc4 	movi	r2,255
  810bb0:	7090703a 	and	r8,r14,r2
  810bb4:	00802004 	movi	r2,128
  810bb8:	0007883a 	mov	r3,zero
  810bbc:	0013883a 	mov	r9,zero
  810bc0:	40800d26 	beq	r8,r2,810bf8 <__divdf3+0x204>
  810bc4:	dbc00815 	stw	r15,32(sp)
  810bc8:	db800715 	stw	r14,28(sp)
  810bcc:	003fab06 	br	810a7c <__divdf3+0x88>
  810bd0:	343fc92e 	bgeu	r6,r16,810af8 <__divdf3+0x104>
  810bd4:	3185883a 	add	r2,r6,r6
  810bd8:	1189803a 	cmpltu	r4,r2,r6
  810bdc:	39c7883a 	add	r3,r7,r7
  810be0:	20c9883a 	add	r4,r4,r3
  810be4:	297fffc4 	addi	r5,r5,-1
  810be8:	100d883a 	mov	r6,r2
  810bec:	200f883a 	mov	r7,r4
  810bf0:	d9400615 	stw	r5,24(sp)
  810bf4:	003fc006 	br	810af8 <__divdf3+0x104>
  810bf8:	483ff21e 	bne	r9,zero,810bc4 <__divdf3+0x1d0>
  810bfc:	01004004 	movi	r4,256
  810c00:	7104703a 	and	r2,r14,r4
  810c04:	10c4b03a 	or	r2,r2,r3
  810c08:	103fee1e 	bne	r2,zero,810bc4 <__divdf3+0x1d0>
  810c0c:	31c4b03a 	or	r2,r6,r7
  810c10:	103fec26 	beq	r2,zero,810bc4 <__divdf3+0x1d0>
  810c14:	7205883a 	add	r2,r14,r8
  810c18:	1391803a 	cmpltu	r8,r2,r14
  810c1c:	43d1883a 	add	r8,r8,r15
  810c20:	013fc004 	movi	r4,-256
  810c24:	111c703a 	and	r14,r2,r4
  810c28:	401f883a 	mov	r15,r8
  810c2c:	003fe506 	br	810bc4 <__divdf3+0x1d0>
  810c30:	8009883a 	mov	r4,r16
  810c34:	003f9206 	br	810a80 <__divdf3+0x8c>
  810c38:	9809883a 	mov	r4,r19
  810c3c:	d8000715 	stw	zero,28(sp)
  810c40:	d8000815 	stw	zero,32(sp)
  810c44:	d8000615 	stw	zero,24(sp)
  810c48:	003f8d06 	br	810a80 <__divdf3+0x8c>

00810c4c <__eqdf2>:
  810c4c:	deffef04 	addi	sp,sp,-68
  810c50:	dc400f15 	stw	r17,60(sp)
  810c54:	dc400404 	addi	r17,sp,16
  810c58:	2005883a 	mov	r2,r4
  810c5c:	2807883a 	mov	r3,r5
  810c60:	dc000e15 	stw	r16,56(sp)
  810c64:	d809883a 	mov	r4,sp
  810c68:	880b883a 	mov	r5,r17
  810c6c:	dc000904 	addi	r16,sp,36
  810c70:	d8c00115 	stw	r3,4(sp)
  810c74:	d8800015 	stw	r2,0(sp)
  810c78:	d9800215 	stw	r6,8(sp)
  810c7c:	dfc01015 	stw	ra,64(sp)
  810c80:	d9c00315 	stw	r7,12(sp)
  810c84:	081190c0 	call	81190c <__unpack_d>
  810c88:	d9000204 	addi	r4,sp,8
  810c8c:	800b883a 	mov	r5,r16
  810c90:	081190c0 	call	81190c <__unpack_d>
  810c94:	d8800417 	ldw	r2,16(sp)
  810c98:	00c00044 	movi	r3,1
  810c9c:	180d883a 	mov	r6,r3
  810ca0:	1880062e 	bgeu	r3,r2,810cbc <__eqdf2+0x70>
  810ca4:	d8800917 	ldw	r2,36(sp)
  810ca8:	8809883a 	mov	r4,r17
  810cac:	800b883a 	mov	r5,r16
  810cb0:	1880022e 	bgeu	r3,r2,810cbc <__eqdf2+0x70>
  810cb4:	0811a440 	call	811a44 <__fpcmp_parts_d>
  810cb8:	100d883a 	mov	r6,r2
  810cbc:	3005883a 	mov	r2,r6
  810cc0:	dfc01017 	ldw	ra,64(sp)
  810cc4:	dc400f17 	ldw	r17,60(sp)
  810cc8:	dc000e17 	ldw	r16,56(sp)
  810ccc:	dec01104 	addi	sp,sp,68
  810cd0:	f800283a 	ret

00810cd4 <__nedf2>:
  810cd4:	deffef04 	addi	sp,sp,-68
  810cd8:	dc400f15 	stw	r17,60(sp)
  810cdc:	dc400404 	addi	r17,sp,16
  810ce0:	2005883a 	mov	r2,r4
  810ce4:	2807883a 	mov	r3,r5
  810ce8:	dc000e15 	stw	r16,56(sp)
  810cec:	d809883a 	mov	r4,sp
  810cf0:	880b883a 	mov	r5,r17
  810cf4:	dc000904 	addi	r16,sp,36
  810cf8:	d8c00115 	stw	r3,4(sp)
  810cfc:	d8800015 	stw	r2,0(sp)
  810d00:	d9800215 	stw	r6,8(sp)
  810d04:	dfc01015 	stw	ra,64(sp)
  810d08:	d9c00315 	stw	r7,12(sp)
  810d0c:	081190c0 	call	81190c <__unpack_d>
  810d10:	d9000204 	addi	r4,sp,8
  810d14:	800b883a 	mov	r5,r16
  810d18:	081190c0 	call	81190c <__unpack_d>
  810d1c:	d8800417 	ldw	r2,16(sp)
  810d20:	00c00044 	movi	r3,1
  810d24:	180d883a 	mov	r6,r3
  810d28:	1880062e 	bgeu	r3,r2,810d44 <__nedf2+0x70>
  810d2c:	d8800917 	ldw	r2,36(sp)
  810d30:	8809883a 	mov	r4,r17
  810d34:	800b883a 	mov	r5,r16
  810d38:	1880022e 	bgeu	r3,r2,810d44 <__nedf2+0x70>
  810d3c:	0811a440 	call	811a44 <__fpcmp_parts_d>
  810d40:	100d883a 	mov	r6,r2
  810d44:	3005883a 	mov	r2,r6
  810d48:	dfc01017 	ldw	ra,64(sp)
  810d4c:	dc400f17 	ldw	r17,60(sp)
  810d50:	dc000e17 	ldw	r16,56(sp)
  810d54:	dec01104 	addi	sp,sp,68
  810d58:	f800283a 	ret

00810d5c <__gtdf2>:
  810d5c:	deffef04 	addi	sp,sp,-68
  810d60:	dc400f15 	stw	r17,60(sp)
  810d64:	dc400404 	addi	r17,sp,16
  810d68:	2005883a 	mov	r2,r4
  810d6c:	2807883a 	mov	r3,r5
  810d70:	dc000e15 	stw	r16,56(sp)
  810d74:	d809883a 	mov	r4,sp
  810d78:	880b883a 	mov	r5,r17
  810d7c:	dc000904 	addi	r16,sp,36
  810d80:	d8c00115 	stw	r3,4(sp)
  810d84:	d8800015 	stw	r2,0(sp)
  810d88:	d9800215 	stw	r6,8(sp)
  810d8c:	dfc01015 	stw	ra,64(sp)
  810d90:	d9c00315 	stw	r7,12(sp)
  810d94:	081190c0 	call	81190c <__unpack_d>
  810d98:	d9000204 	addi	r4,sp,8
  810d9c:	800b883a 	mov	r5,r16
  810da0:	081190c0 	call	81190c <__unpack_d>
  810da4:	d8800417 	ldw	r2,16(sp)
  810da8:	00c00044 	movi	r3,1
  810dac:	01bfffc4 	movi	r6,-1
  810db0:	1880062e 	bgeu	r3,r2,810dcc <__gtdf2+0x70>
  810db4:	d8800917 	ldw	r2,36(sp)
  810db8:	8809883a 	mov	r4,r17
  810dbc:	800b883a 	mov	r5,r16
  810dc0:	1880022e 	bgeu	r3,r2,810dcc <__gtdf2+0x70>
  810dc4:	0811a440 	call	811a44 <__fpcmp_parts_d>
  810dc8:	100d883a 	mov	r6,r2
  810dcc:	3005883a 	mov	r2,r6
  810dd0:	dfc01017 	ldw	ra,64(sp)
  810dd4:	dc400f17 	ldw	r17,60(sp)
  810dd8:	dc000e17 	ldw	r16,56(sp)
  810ddc:	dec01104 	addi	sp,sp,68
  810de0:	f800283a 	ret

00810de4 <__ltdf2>:
  810de4:	deffef04 	addi	sp,sp,-68
  810de8:	dc400f15 	stw	r17,60(sp)
  810dec:	dc400404 	addi	r17,sp,16
  810df0:	2005883a 	mov	r2,r4
  810df4:	2807883a 	mov	r3,r5
  810df8:	dc000e15 	stw	r16,56(sp)
  810dfc:	d809883a 	mov	r4,sp
  810e00:	880b883a 	mov	r5,r17
  810e04:	dc000904 	addi	r16,sp,36
  810e08:	d8c00115 	stw	r3,4(sp)
  810e0c:	d8800015 	stw	r2,0(sp)
  810e10:	d9800215 	stw	r6,8(sp)
  810e14:	dfc01015 	stw	ra,64(sp)
  810e18:	d9c00315 	stw	r7,12(sp)
  810e1c:	081190c0 	call	81190c <__unpack_d>
  810e20:	d9000204 	addi	r4,sp,8
  810e24:	800b883a 	mov	r5,r16
  810e28:	081190c0 	call	81190c <__unpack_d>
  810e2c:	d8800417 	ldw	r2,16(sp)
  810e30:	00c00044 	movi	r3,1
  810e34:	180d883a 	mov	r6,r3
  810e38:	1880062e 	bgeu	r3,r2,810e54 <__ltdf2+0x70>
  810e3c:	d8800917 	ldw	r2,36(sp)
  810e40:	8809883a 	mov	r4,r17
  810e44:	800b883a 	mov	r5,r16
  810e48:	1880022e 	bgeu	r3,r2,810e54 <__ltdf2+0x70>
  810e4c:	0811a440 	call	811a44 <__fpcmp_parts_d>
  810e50:	100d883a 	mov	r6,r2
  810e54:	3005883a 	mov	r2,r6
  810e58:	dfc01017 	ldw	ra,64(sp)
  810e5c:	dc400f17 	ldw	r17,60(sp)
  810e60:	dc000e17 	ldw	r16,56(sp)
  810e64:	dec01104 	addi	sp,sp,68
  810e68:	f800283a 	ret

00810e6c <__ledf2>:
  810e6c:	deffef04 	addi	sp,sp,-68
  810e70:	dc400f15 	stw	r17,60(sp)
  810e74:	dc400404 	addi	r17,sp,16
  810e78:	2005883a 	mov	r2,r4
  810e7c:	2807883a 	mov	r3,r5
  810e80:	dc000e15 	stw	r16,56(sp)
  810e84:	d809883a 	mov	r4,sp
  810e88:	880b883a 	mov	r5,r17
  810e8c:	dc000904 	addi	r16,sp,36
  810e90:	d8c00115 	stw	r3,4(sp)
  810e94:	d8800015 	stw	r2,0(sp)
  810e98:	d9800215 	stw	r6,8(sp)
  810e9c:	dfc01015 	stw	ra,64(sp)
  810ea0:	d9c00315 	stw	r7,12(sp)
  810ea4:	081190c0 	call	81190c <__unpack_d>
  810ea8:	d9000204 	addi	r4,sp,8
  810eac:	800b883a 	mov	r5,r16
  810eb0:	081190c0 	call	81190c <__unpack_d>
  810eb4:	d8800417 	ldw	r2,16(sp)
  810eb8:	00c00044 	movi	r3,1
  810ebc:	180d883a 	mov	r6,r3
  810ec0:	1880062e 	bgeu	r3,r2,810edc <__ledf2+0x70>
  810ec4:	d8800917 	ldw	r2,36(sp)
  810ec8:	8809883a 	mov	r4,r17
  810ecc:	800b883a 	mov	r5,r16
  810ed0:	1880022e 	bgeu	r3,r2,810edc <__ledf2+0x70>
  810ed4:	0811a440 	call	811a44 <__fpcmp_parts_d>
  810ed8:	100d883a 	mov	r6,r2
  810edc:	3005883a 	mov	r2,r6
  810ee0:	dfc01017 	ldw	ra,64(sp)
  810ee4:	dc400f17 	ldw	r17,60(sp)
  810ee8:	dc000e17 	ldw	r16,56(sp)
  810eec:	dec01104 	addi	sp,sp,68
  810ef0:	f800283a 	ret

00810ef4 <__floatsidf>:
  810ef4:	2006d7fa 	srli	r3,r4,31
  810ef8:	defff604 	addi	sp,sp,-40
  810efc:	008000c4 	movi	r2,3
  810f00:	dfc00915 	stw	ra,36(sp)
  810f04:	dcc00815 	stw	r19,32(sp)
  810f08:	dc800715 	stw	r18,28(sp)
  810f0c:	dc400615 	stw	r17,24(sp)
  810f10:	dc000515 	stw	r16,20(sp)
  810f14:	d8800015 	stw	r2,0(sp)
  810f18:	d8c00115 	stw	r3,4(sp)
  810f1c:	20000f1e 	bne	r4,zero,810f5c <__floatsidf+0x68>
  810f20:	00800084 	movi	r2,2
  810f24:	d8800015 	stw	r2,0(sp)
  810f28:	d809883a 	mov	r4,sp
  810f2c:	08115f80 	call	8115f8 <__pack_d>
  810f30:	1009883a 	mov	r4,r2
  810f34:	180b883a 	mov	r5,r3
  810f38:	2005883a 	mov	r2,r4
  810f3c:	2807883a 	mov	r3,r5
  810f40:	dfc00917 	ldw	ra,36(sp)
  810f44:	dcc00817 	ldw	r19,32(sp)
  810f48:	dc800717 	ldw	r18,28(sp)
  810f4c:	dc400617 	ldw	r17,24(sp)
  810f50:	dc000517 	ldw	r16,20(sp)
  810f54:	dec00a04 	addi	sp,sp,40
  810f58:	f800283a 	ret
  810f5c:	00800f04 	movi	r2,60
  810f60:	1807003a 	cmpeq	r3,r3,zero
  810f64:	d8800215 	stw	r2,8(sp)
  810f68:	18001126 	beq	r3,zero,810fb0 <__floatsidf+0xbc>
  810f6c:	0027883a 	mov	r19,zero
  810f70:	2025883a 	mov	r18,r4
  810f74:	d9000315 	stw	r4,12(sp)
  810f78:	dcc00415 	stw	r19,16(sp)
  810f7c:	081127c0 	call	81127c <__clzsi2>
  810f80:	11000744 	addi	r4,r2,29
  810f84:	013fe80e 	bge	zero,r4,810f28 <__floatsidf+0x34>
  810f88:	10bfff44 	addi	r2,r2,-3
  810f8c:	10000c16 	blt	r2,zero,810fc0 <__floatsidf+0xcc>
  810f90:	90a2983a 	sll	r17,r18,r2
  810f94:	0021883a 	mov	r16,zero
  810f98:	d8800217 	ldw	r2,8(sp)
  810f9c:	dc400415 	stw	r17,16(sp)
  810fa0:	dc000315 	stw	r16,12(sp)
  810fa4:	1105c83a 	sub	r2,r2,r4
  810fa8:	d8800215 	stw	r2,8(sp)
  810fac:	003fde06 	br	810f28 <__floatsidf+0x34>
  810fb0:	00a00034 	movhi	r2,32768
  810fb4:	20800a26 	beq	r4,r2,810fe0 <__floatsidf+0xec>
  810fb8:	0109c83a 	sub	r4,zero,r4
  810fbc:	003feb06 	br	810f6c <__floatsidf+0x78>
  810fc0:	9006d07a 	srli	r3,r18,1
  810fc4:	008007c4 	movi	r2,31
  810fc8:	1105c83a 	sub	r2,r2,r4
  810fcc:	1886d83a 	srl	r3,r3,r2
  810fd0:	9922983a 	sll	r17,r19,r4
  810fd4:	9120983a 	sll	r16,r18,r4
  810fd8:	1c62b03a 	or	r17,r3,r17
  810fdc:	003fee06 	br	810f98 <__floatsidf+0xa4>
  810fe0:	0009883a 	mov	r4,zero
  810fe4:	01707834 	movhi	r5,49632
  810fe8:	003fd306 	br	810f38 <__floatsidf+0x44>

00810fec <__make_dp>:
  810fec:	defff904 	addi	sp,sp,-28
  810ff0:	d8c00717 	ldw	r3,28(sp)
  810ff4:	d9000015 	stw	r4,0(sp)
  810ff8:	d809883a 	mov	r4,sp
  810ffc:	dfc00515 	stw	ra,20(sp)
  811000:	d9c00615 	stw	r7,24(sp)
  811004:	d9400115 	stw	r5,4(sp)
  811008:	d9800215 	stw	r6,8(sp)
  81100c:	d8c00415 	stw	r3,16(sp)
  811010:	d9c00315 	stw	r7,12(sp)
  811014:	08115f80 	call	8115f8 <__pack_d>
  811018:	dfc00517 	ldw	ra,20(sp)
  81101c:	dec00704 	addi	sp,sp,28
  811020:	f800283a 	ret

00811024 <__truncdfsf2>:
  811024:	defff804 	addi	sp,sp,-32
  811028:	2005883a 	mov	r2,r4
  81102c:	2807883a 	mov	r3,r5
  811030:	d809883a 	mov	r4,sp
  811034:	d9400204 	addi	r5,sp,8
  811038:	d8c00115 	stw	r3,4(sp)
  81103c:	d8800015 	stw	r2,0(sp)
  811040:	dfc00715 	stw	ra,28(sp)
  811044:	081190c0 	call	81190c <__unpack_d>
  811048:	d9c00517 	ldw	r7,20(sp)
  81104c:	da000617 	ldw	r8,24(sp)
  811050:	02d00034 	movhi	r11,16384
  811054:	5affffc4 	addi	r11,r11,-1
  811058:	3812d7ba 	srli	r9,r7,30
  81105c:	401a90ba 	slli	r13,r8,2
  811060:	3ac4703a 	and	r2,r7,r11
  811064:	0007883a 	mov	r3,zero
  811068:	6a52b03a 	or	r9,r13,r9
  81106c:	10c4b03a 	or	r2,r2,r3
  811070:	d9000217 	ldw	r4,8(sp)
  811074:	d9400317 	ldw	r5,12(sp)
  811078:	d9800417 	ldw	r6,16(sp)
  81107c:	480f883a 	mov	r7,r9
  811080:	10000126 	beq	r2,zero,811088 <__truncdfsf2+0x64>
  811084:	49c00054 	ori	r7,r9,1
  811088:	08115cc0 	call	8115cc <__make_fp>
  81108c:	dfc00717 	ldw	ra,28(sp)
  811090:	dec00804 	addi	sp,sp,32
  811094:	f800283a 	ret

00811098 <udivmodsi4>:
  811098:	29001b2e 	bgeu	r5,r4,811108 <udivmodsi4+0x70>
  81109c:	28001a16 	blt	r5,zero,811108 <udivmodsi4+0x70>
  8110a0:	00800044 	movi	r2,1
  8110a4:	0007883a 	mov	r3,zero
  8110a8:	01c007c4 	movi	r7,31
  8110ac:	00000306 	br	8110bc <udivmodsi4+0x24>
  8110b0:	19c01326 	beq	r3,r7,811100 <udivmodsi4+0x68>
  8110b4:	18c00044 	addi	r3,r3,1
  8110b8:	28000416 	blt	r5,zero,8110cc <udivmodsi4+0x34>
  8110bc:	294b883a 	add	r5,r5,r5
  8110c0:	1085883a 	add	r2,r2,r2
  8110c4:	293ffa36 	bltu	r5,r4,8110b0 <udivmodsi4+0x18>
  8110c8:	10000d26 	beq	r2,zero,811100 <udivmodsi4+0x68>
  8110cc:	0007883a 	mov	r3,zero
  8110d0:	21400236 	bltu	r4,r5,8110dc <udivmodsi4+0x44>
  8110d4:	2149c83a 	sub	r4,r4,r5
  8110d8:	1886b03a 	or	r3,r3,r2
  8110dc:	1004d07a 	srli	r2,r2,1
  8110e0:	280ad07a 	srli	r5,r5,1
  8110e4:	103ffa1e 	bne	r2,zero,8110d0 <udivmodsi4+0x38>
  8110e8:	30000226 	beq	r6,zero,8110f4 <udivmodsi4+0x5c>
  8110ec:	2005883a 	mov	r2,r4
  8110f0:	f800283a 	ret
  8110f4:	1809883a 	mov	r4,r3
  8110f8:	2005883a 	mov	r2,r4
  8110fc:	f800283a 	ret
  811100:	0007883a 	mov	r3,zero
  811104:	003ff806 	br	8110e8 <udivmodsi4+0x50>
  811108:	00800044 	movi	r2,1
  81110c:	0007883a 	mov	r3,zero
  811110:	003fef06 	br	8110d0 <udivmodsi4+0x38>

00811114 <__divsi3>:
  811114:	defffe04 	addi	sp,sp,-8
  811118:	dc000015 	stw	r16,0(sp)
  81111c:	dfc00115 	stw	ra,4(sp)
  811120:	0021883a 	mov	r16,zero
  811124:	20000c16 	blt	r4,zero,811158 <__divsi3+0x44>
  811128:	000d883a 	mov	r6,zero
  81112c:	28000e16 	blt	r5,zero,811168 <__divsi3+0x54>
  811130:	08110980 	call	811098 <udivmodsi4>
  811134:	1007883a 	mov	r3,r2
  811138:	8005003a 	cmpeq	r2,r16,zero
  81113c:	1000011e 	bne	r2,zero,811144 <__divsi3+0x30>
  811140:	00c7c83a 	sub	r3,zero,r3
  811144:	1805883a 	mov	r2,r3
  811148:	dfc00117 	ldw	ra,4(sp)
  81114c:	dc000017 	ldw	r16,0(sp)
  811150:	dec00204 	addi	sp,sp,8
  811154:	f800283a 	ret
  811158:	0109c83a 	sub	r4,zero,r4
  81115c:	04000044 	movi	r16,1
  811160:	000d883a 	mov	r6,zero
  811164:	283ff20e 	bge	r5,zero,811130 <__divsi3+0x1c>
  811168:	014bc83a 	sub	r5,zero,r5
  81116c:	8021003a 	cmpeq	r16,r16,zero
  811170:	003fef06 	br	811130 <__divsi3+0x1c>

00811174 <__modsi3>:
  811174:	deffff04 	addi	sp,sp,-4
  811178:	dfc00015 	stw	ra,0(sp)
  81117c:	01800044 	movi	r6,1
  811180:	2807883a 	mov	r3,r5
  811184:	20000416 	blt	r4,zero,811198 <__modsi3+0x24>
  811188:	28000c16 	blt	r5,zero,8111bc <__modsi3+0x48>
  81118c:	dfc00017 	ldw	ra,0(sp)
  811190:	dec00104 	addi	sp,sp,4
  811194:	08110981 	jmpi	811098 <udivmodsi4>
  811198:	0109c83a 	sub	r4,zero,r4
  81119c:	28000b16 	blt	r5,zero,8111cc <__modsi3+0x58>
  8111a0:	180b883a 	mov	r5,r3
  8111a4:	01800044 	movi	r6,1
  8111a8:	08110980 	call	811098 <udivmodsi4>
  8111ac:	0085c83a 	sub	r2,zero,r2
  8111b0:	dfc00017 	ldw	ra,0(sp)
  8111b4:	dec00104 	addi	sp,sp,4
  8111b8:	f800283a 	ret
  8111bc:	014bc83a 	sub	r5,zero,r5
  8111c0:	dfc00017 	ldw	ra,0(sp)
  8111c4:	dec00104 	addi	sp,sp,4
  8111c8:	08110981 	jmpi	811098 <udivmodsi4>
  8111cc:	0147c83a 	sub	r3,zero,r5
  8111d0:	003ff306 	br	8111a0 <__modsi3+0x2c>

008111d4 <__udivsi3>:
  8111d4:	000d883a 	mov	r6,zero
  8111d8:	08110981 	jmpi	811098 <udivmodsi4>

008111dc <__umodsi3>:
  8111dc:	01800044 	movi	r6,1
  8111e0:	08110981 	jmpi	811098 <udivmodsi4>

008111e4 <__muldi3>:
  8111e4:	2011883a 	mov	r8,r4
  8111e8:	427fffcc 	andi	r9,r8,65535
  8111ec:	4018d43a 	srli	r12,r8,16
  8111f0:	32bfffcc 	andi	r10,r6,65535
  8111f4:	3016d43a 	srli	r11,r6,16
  8111f8:	4a85383a 	mul	r2,r9,r10
  8111fc:	6295383a 	mul	r10,r12,r10
  811200:	4ad3383a 	mul	r9,r9,r11
  811204:	113fffcc 	andi	r4,r2,65535
  811208:	1004d43a 	srli	r2,r2,16
  81120c:	4a93883a 	add	r9,r9,r10
  811210:	3807883a 	mov	r3,r7
  811214:	1245883a 	add	r2,r2,r9
  811218:	280f883a 	mov	r7,r5
  81121c:	180b883a 	mov	r5,r3
  811220:	1006943a 	slli	r3,r2,16
  811224:	defffd04 	addi	sp,sp,-12
  811228:	dc800215 	stw	r18,8(sp)
  81122c:	1907883a 	add	r3,r3,r4
  811230:	dc400115 	stw	r17,4(sp)
  811234:	dc000015 	stw	r16,0(sp)
  811238:	4165383a 	mul	r18,r8,r5
  81123c:	31e3383a 	mul	r17,r6,r7
  811240:	1012d43a 	srli	r9,r2,16
  811244:	62d9383a 	mul	r12,r12,r11
  811248:	181f883a 	mov	r15,r3
  81124c:	1280022e 	bgeu	r2,r10,811258 <__muldi3+0x74>
  811250:	00800074 	movhi	r2,1
  811254:	6099883a 	add	r12,r12,r2
  811258:	624d883a 	add	r6,r12,r9
  81125c:	9187883a 	add	r3,r18,r6
  811260:	88c7883a 	add	r3,r17,r3
  811264:	7805883a 	mov	r2,r15
  811268:	dc800217 	ldw	r18,8(sp)
  81126c:	dc400117 	ldw	r17,4(sp)
  811270:	dc000017 	ldw	r16,0(sp)
  811274:	dec00304 	addi	sp,sp,12
  811278:	f800283a 	ret

0081127c <__clzsi2>:
  81127c:	00bfffd4 	movui	r2,65535
  811280:	11000e36 	bltu	r2,r4,8112bc <__clzsi2+0x40>
  811284:	00803fc4 	movi	r2,255
  811288:	01400204 	movi	r5,8
  81128c:	0007883a 	mov	r3,zero
  811290:	11001036 	bltu	r2,r4,8112d4 <__clzsi2+0x58>
  811294:	000b883a 	mov	r5,zero
  811298:	20c6d83a 	srl	r3,r4,r3
  81129c:	008020b4 	movhi	r2,130
  8112a0:	109fd704 	addi	r2,r2,32604
  8112a4:	1887883a 	add	r3,r3,r2
  8112a8:	18800003 	ldbu	r2,0(r3)
  8112ac:	00c00804 	movi	r3,32
  8112b0:	2885883a 	add	r2,r5,r2
  8112b4:	1885c83a 	sub	r2,r3,r2
  8112b8:	f800283a 	ret
  8112bc:	01400404 	movi	r5,16
  8112c0:	00804034 	movhi	r2,256
  8112c4:	10bfffc4 	addi	r2,r2,-1
  8112c8:	2807883a 	mov	r3,r5
  8112cc:	113ff22e 	bgeu	r2,r4,811298 <__clzsi2+0x1c>
  8112d0:	01400604 	movi	r5,24
  8112d4:	2807883a 	mov	r3,r5
  8112d8:	20c6d83a 	srl	r3,r4,r3
  8112dc:	008020b4 	movhi	r2,130
  8112e0:	109fd704 	addi	r2,r2,32604
  8112e4:	1887883a 	add	r3,r3,r2
  8112e8:	18800003 	ldbu	r2,0(r3)
  8112ec:	00c00804 	movi	r3,32
  8112f0:	2885883a 	add	r2,r5,r2
  8112f4:	1885c83a 	sub	r2,r3,r2
  8112f8:	f800283a 	ret

008112fc <__pack_f>:
  8112fc:	20c00017 	ldw	r3,0(r4)
  811300:	01c00044 	movi	r7,1
  811304:	21800317 	ldw	r6,12(r4)
  811308:	21400117 	ldw	r5,4(r4)
  81130c:	38c02d2e 	bgeu	r7,r3,8113c4 <__pack_f+0xc8>
  811310:	00800104 	movi	r2,4
  811314:	18802826 	beq	r3,r2,8113b8 <__pack_f+0xbc>
  811318:	00800084 	movi	r2,2
  81131c:	18800126 	beq	r3,r2,811324 <__pack_f+0x28>
  811320:	3000101e 	bne	r6,zero,811364 <__pack_f+0x68>
  811324:	000d883a 	mov	r6,zero
  811328:	0007883a 	mov	r3,zero
  81132c:	19003fcc 	andi	r4,r3,255
  811330:	200895fa 	slli	r4,r4,23
  811334:	00c02034 	movhi	r3,128
  811338:	18ffffc4 	addi	r3,r3,-1
  81133c:	30c6703a 	and	r3,r6,r3
  811340:	10a0002c 	andhi	r2,r2,32768
  811344:	10c4b03a 	or	r2,r2,r3
  811348:	280a97fa 	slli	r5,r5,31
  81134c:	1104b03a 	or	r2,r2,r4
  811350:	00e00034 	movhi	r3,32768
  811354:	18ffffc4 	addi	r3,r3,-1
  811358:	10c4703a 	and	r2,r2,r3
  81135c:	1144b03a 	or	r2,r2,r5
  811360:	f800283a 	ret
  811364:	21000217 	ldw	r4,8(r4)
  811368:	00bfe084 	movi	r2,-126
  81136c:	20801b16 	blt	r4,r2,8113dc <__pack_f+0xe0>
  811370:	00801fc4 	movi	r2,127
  811374:	11001016 	blt	r2,r4,8113b8 <__pack_f+0xbc>
  811378:	308e703a 	and	r7,r6,r2
  81137c:	2087883a 	add	r3,r4,r2
  811380:	00801004 	movi	r2,64
  811384:	38800526 	beq	r7,r2,81139c <__pack_f+0xa0>
  811388:	31800fc4 	addi	r6,r6,63
  81138c:	30000716 	blt	r6,zero,8113ac <__pack_f+0xb0>
  811390:	300490ba 	slli	r2,r6,2
  811394:	100cd27a 	srli	r6,r2,9
  811398:	003fe406 	br	81132c <__pack_f+0x30>
  81139c:	3080200c 	andi	r2,r6,128
  8113a0:	103ffa26 	beq	r2,zero,81138c <__pack_f+0x90>
  8113a4:	31cd883a 	add	r6,r6,r7
  8113a8:	003ff806 	br	81138c <__pack_f+0x90>
  8113ac:	300cd07a 	srli	r6,r6,1
  8113b0:	18c00044 	addi	r3,r3,1
  8113b4:	003ff606 	br	811390 <__pack_f+0x94>
  8113b8:	000d883a 	mov	r6,zero
  8113bc:	00ffffc4 	movi	r3,-1
  8113c0:	003fda06 	br	81132c <__pack_f+0x30>
  8113c4:	31800434 	orhi	r6,r6,16
  8113c8:	00802034 	movhi	r2,128
  8113cc:	10bfffc4 	addi	r2,r2,-1
  8113d0:	308c703a 	and	r6,r6,r2
  8113d4:	00ffffc4 	movi	r3,-1
  8113d8:	003fd406 	br	81132c <__pack_f+0x30>
  8113dc:	1109c83a 	sub	r4,r2,r4
  8113e0:	00800644 	movi	r2,25
  8113e4:	11001216 	blt	r2,r4,811430 <__pack_f+0x134>
  8113e8:	3904983a 	sll	r2,r7,r4
  8113ec:	3106d83a 	srl	r3,r6,r4
  8113f0:	10bfffc4 	addi	r2,r2,-1
  8113f4:	3084703a 	and	r2,r6,r2
  8113f8:	1004c03a 	cmpne	r2,r2,zero
  8113fc:	1886b03a 	or	r3,r3,r2
  811400:	19001fcc 	andi	r4,r3,127
  811404:	00801004 	movi	r2,64
  811408:	20800c26 	beq	r4,r2,81143c <__pack_f+0x140>
  81140c:	18c00fc4 	addi	r3,r3,63
  811410:	00900034 	movhi	r2,16384
  811414:	10bfffc4 	addi	r2,r2,-1
  811418:	180cd1fa 	srli	r6,r3,7
  81141c:	10c7803a 	cmpltu	r3,r2,r3
  811420:	00802034 	movhi	r2,128
  811424:	10bfffc4 	addi	r2,r2,-1
  811428:	308c703a 	and	r6,r6,r2
  81142c:	003fbf06 	br	81132c <__pack_f+0x30>
  811430:	0007883a 	mov	r3,zero
  811434:	000d883a 	mov	r6,zero
  811438:	003ff906 	br	811420 <__pack_f+0x124>
  81143c:	1880200c 	andi	r2,r3,128
  811440:	10000126 	beq	r2,zero,811448 <__pack_f+0x14c>
  811444:	1907883a 	add	r3,r3,r4
  811448:	180cd1fa 	srli	r6,r3,7
  81144c:	00900034 	movhi	r2,16384
  811450:	10bfffc4 	addi	r2,r2,-1
  811454:	10c7803a 	cmpltu	r3,r2,r3
  811458:	003ff106 	br	811420 <__pack_f+0x124>

0081145c <__unpack_f>:
  81145c:	21800017 	ldw	r6,0(r4)
  811460:	00c02034 	movhi	r3,128
  811464:	18ffffc4 	addi	r3,r3,-1
  811468:	3004d5fa 	srli	r2,r6,23
  81146c:	3008d7fa 	srli	r4,r6,31
  811470:	30ce703a 	and	r7,r6,r3
  811474:	10c03fcc 	andi	r3,r2,255
  811478:	29000115 	stw	r4,4(r5)
  81147c:	1800131e 	bne	r3,zero,8114cc <__unpack_f+0x70>
  811480:	38000f26 	beq	r7,zero,8114c0 <__unpack_f+0x64>
  811484:	380691fa 	slli	r3,r7,7
  811488:	01bfe084 	movi	r6,-126
  81148c:	008000c4 	movi	r2,3
  811490:	01100034 	movhi	r4,16384
  811494:	213fffc4 	addi	r4,r4,-1
  811498:	28800015 	stw	r2,0(r5)
  81149c:	29800215 	stw	r6,8(r5)
  8114a0:	20c00536 	bltu	r4,r3,8114b8 <__unpack_f+0x5c>
  8114a4:	3005883a 	mov	r2,r6
  8114a8:	18c7883a 	add	r3,r3,r3
  8114ac:	10bfffc4 	addi	r2,r2,-1
  8114b0:	20fffd2e 	bgeu	r4,r3,8114a8 <__unpack_f+0x4c>
  8114b4:	28800215 	stw	r2,8(r5)
  8114b8:	28c00315 	stw	r3,12(r5)
  8114bc:	f800283a 	ret
  8114c0:	00800084 	movi	r2,2
  8114c4:	28800015 	stw	r2,0(r5)
  8114c8:	f800283a 	ret
  8114cc:	00803fc4 	movi	r2,255
  8114d0:	18800826 	beq	r3,r2,8114f4 <__unpack_f+0x98>
  8114d4:	380491fa 	slli	r2,r7,7
  8114d8:	18ffe044 	addi	r3,r3,-127
  8114dc:	28c00215 	stw	r3,8(r5)
  8114e0:	10900034 	orhi	r2,r2,16384
  8114e4:	28800315 	stw	r2,12(r5)
  8114e8:	008000c4 	movi	r2,3
  8114ec:	28800015 	stw	r2,0(r5)
  8114f0:	f800283a 	ret
  8114f4:	3800031e 	bne	r7,zero,811504 <__unpack_f+0xa8>
  8114f8:	00800104 	movi	r2,4
  8114fc:	28800015 	stw	r2,0(r5)
  811500:	f800283a 	ret
  811504:	3080042c 	andhi	r2,r6,16
  811508:	10000426 	beq	r2,zero,81151c <__unpack_f+0xc0>
  81150c:	00800044 	movi	r2,1
  811510:	28800015 	stw	r2,0(r5)
  811514:	29c00315 	stw	r7,12(r5)
  811518:	f800283a 	ret
  81151c:	28000015 	stw	zero,0(r5)
  811520:	003ffc06 	br	811514 <__unpack_f+0xb8>

00811524 <__fpcmp_parts_f>:
  811524:	21800017 	ldw	r6,0(r4)
  811528:	00c00044 	movi	r3,1
  81152c:	19800a2e 	bgeu	r3,r6,811558 <__fpcmp_parts_f+0x34>
  811530:	28800017 	ldw	r2,0(r5)
  811534:	1880082e 	bgeu	r3,r2,811558 <__fpcmp_parts_f+0x34>
  811538:	00c00104 	movi	r3,4
  81153c:	30c01e26 	beq	r6,r3,8115b8 <__fpcmp_parts_f+0x94>
  811540:	10c01a26 	beq	r2,r3,8115ac <__fpcmp_parts_f+0x88>
  811544:	00c00084 	movi	r3,2
  811548:	30c00526 	beq	r6,r3,811560 <__fpcmp_parts_f+0x3c>
  81154c:	10c0071e 	bne	r2,r3,81156c <__fpcmp_parts_f+0x48>
  811550:	20800117 	ldw	r2,4(r4)
  811554:	1000091e 	bne	r2,zero,81157c <__fpcmp_parts_f+0x58>
  811558:	00800044 	movi	r2,1
  81155c:	f800283a 	ret
  811560:	10c0121e 	bne	r2,r3,8115ac <__fpcmp_parts_f+0x88>
  811564:	0005883a 	mov	r2,zero
  811568:	f800283a 	ret
  81156c:	20c00117 	ldw	r3,4(r4)
  811570:	28800117 	ldw	r2,4(r5)
  811574:	18800326 	beq	r3,r2,811584 <__fpcmp_parts_f+0x60>
  811578:	183ff726 	beq	r3,zero,811558 <__fpcmp_parts_f+0x34>
  81157c:	00bfffc4 	movi	r2,-1
  811580:	f800283a 	ret
  811584:	21800217 	ldw	r6,8(r4)
  811588:	28800217 	ldw	r2,8(r5)
  81158c:	11bffa16 	blt	r2,r6,811578 <__fpcmp_parts_f+0x54>
  811590:	30800416 	blt	r6,r2,8115a4 <__fpcmp_parts_f+0x80>
  811594:	21000317 	ldw	r4,12(r4)
  811598:	29400317 	ldw	r5,12(r5)
  81159c:	293ff636 	bltu	r5,r4,811578 <__fpcmp_parts_f+0x54>
  8115a0:	217ff02e 	bgeu	r4,r5,811564 <__fpcmp_parts_f+0x40>
  8115a4:	183fec1e 	bne	r3,zero,811558 <__fpcmp_parts_f+0x34>
  8115a8:	003ff406 	br	81157c <__fpcmp_parts_f+0x58>
  8115ac:	28800117 	ldw	r2,4(r5)
  8115b0:	103fe91e 	bne	r2,zero,811558 <__fpcmp_parts_f+0x34>
  8115b4:	003ff106 	br	81157c <__fpcmp_parts_f+0x58>
  8115b8:	11bfe51e 	bne	r2,r6,811550 <__fpcmp_parts_f+0x2c>
  8115bc:	28c00117 	ldw	r3,4(r5)
  8115c0:	20800117 	ldw	r2,4(r4)
  8115c4:	1885c83a 	sub	r2,r3,r2
  8115c8:	f800283a 	ret

008115cc <__make_fp>:
  8115cc:	defffb04 	addi	sp,sp,-20
  8115d0:	d9000015 	stw	r4,0(sp)
  8115d4:	d809883a 	mov	r4,sp
  8115d8:	dfc00415 	stw	ra,16(sp)
  8115dc:	d9400115 	stw	r5,4(sp)
  8115e0:	d9800215 	stw	r6,8(sp)
  8115e4:	d9c00315 	stw	r7,12(sp)
  8115e8:	08112fc0 	call	8112fc <__pack_f>
  8115ec:	dfc00417 	ldw	ra,16(sp)
  8115f0:	dec00504 	addi	sp,sp,20
  8115f4:	f800283a 	ret

008115f8 <__pack_d>:
  8115f8:	20c00017 	ldw	r3,0(r4)
  8115fc:	defffd04 	addi	sp,sp,-12
  811600:	dc000015 	stw	r16,0(sp)
  811604:	dc800215 	stw	r18,8(sp)
  811608:	dc400115 	stw	r17,4(sp)
  81160c:	00800044 	movi	r2,1
  811610:	22000317 	ldw	r8,12(r4)
  811614:	001f883a 	mov	r15,zero
  811618:	22400417 	ldw	r9,16(r4)
  81161c:	24000117 	ldw	r16,4(r4)
  811620:	10c0552e 	bgeu	r2,r3,811778 <__pack_d+0x180>
  811624:	00800104 	movi	r2,4
  811628:	18804f26 	beq	r3,r2,811768 <__pack_d+0x170>
  81162c:	00800084 	movi	r2,2
  811630:	18800226 	beq	r3,r2,81163c <__pack_d+0x44>
  811634:	4244b03a 	or	r2,r8,r9
  811638:	10001a1e 	bne	r2,zero,8116a4 <__pack_d+0xac>
  81163c:	000d883a 	mov	r6,zero
  811640:	000f883a 	mov	r7,zero
  811644:	0011883a 	mov	r8,zero
  811648:	00800434 	movhi	r2,16
  81164c:	10bfffc4 	addi	r2,r2,-1
  811650:	301d883a 	mov	r14,r6
  811654:	3884703a 	and	r2,r7,r2
  811658:	400a953a 	slli	r5,r8,20
  81165c:	79bffc2c 	andhi	r6,r15,65520
  811660:	308cb03a 	or	r6,r6,r2
  811664:	00e00434 	movhi	r3,32784
  811668:	18ffffc4 	addi	r3,r3,-1
  81166c:	800497fa 	slli	r2,r16,31
  811670:	30c6703a 	and	r3,r6,r3
  811674:	1946b03a 	or	r3,r3,r5
  811678:	01600034 	movhi	r5,32768
  81167c:	297fffc4 	addi	r5,r5,-1
  811680:	194a703a 	and	r5,r3,r5
  811684:	288ab03a 	or	r5,r5,r2
  811688:	2807883a 	mov	r3,r5
  81168c:	7005883a 	mov	r2,r14
  811690:	dc800217 	ldw	r18,8(sp)
  811694:	dc400117 	ldw	r17,4(sp)
  811698:	dc000017 	ldw	r16,0(sp)
  81169c:	dec00304 	addi	sp,sp,12
  8116a0:	f800283a 	ret
  8116a4:	21000217 	ldw	r4,8(r4)
  8116a8:	00bf0084 	movi	r2,-1022
  8116ac:	20803f16 	blt	r4,r2,8117ac <__pack_d+0x1b4>
  8116b0:	0080ffc4 	movi	r2,1023
  8116b4:	11002c16 	blt	r2,r4,811768 <__pack_d+0x170>
  8116b8:	00803fc4 	movi	r2,255
  8116bc:	408c703a 	and	r6,r8,r2
  8116c0:	00802004 	movi	r2,128
  8116c4:	0007883a 	mov	r3,zero
  8116c8:	000f883a 	mov	r7,zero
  8116cc:	2280ffc4 	addi	r10,r4,1023
  8116d0:	30801e26 	beq	r6,r2,81174c <__pack_d+0x154>
  8116d4:	00801fc4 	movi	r2,127
  8116d8:	4089883a 	add	r4,r8,r2
  8116dc:	220d803a 	cmpltu	r6,r4,r8
  8116e0:	324d883a 	add	r6,r6,r9
  8116e4:	2011883a 	mov	r8,r4
  8116e8:	3013883a 	mov	r9,r6
  8116ec:	00880034 	movhi	r2,8192
  8116f0:	10bfffc4 	addi	r2,r2,-1
  8116f4:	12400d36 	bltu	r2,r9,81172c <__pack_d+0x134>
  8116f8:	4804963a 	slli	r2,r9,24
  8116fc:	400cd23a 	srli	r6,r8,8
  811700:	480ed23a 	srli	r7,r9,8
  811704:	013fffc4 	movi	r4,-1
  811708:	118cb03a 	or	r6,r2,r6
  81170c:	01400434 	movhi	r5,16
  811710:	297fffc4 	addi	r5,r5,-1
  811714:	3104703a 	and	r2,r6,r4
  811718:	3946703a 	and	r3,r7,r5
  81171c:	5201ffcc 	andi	r8,r10,2047
  811720:	100d883a 	mov	r6,r2
  811724:	180f883a 	mov	r7,r3
  811728:	003fc706 	br	811648 <__pack_d+0x50>
  81172c:	480897fa 	slli	r4,r9,31
  811730:	4004d07a 	srli	r2,r8,1
  811734:	4806d07a 	srli	r3,r9,1
  811738:	52800044 	addi	r10,r10,1
  81173c:	2084b03a 	or	r2,r4,r2
  811740:	1011883a 	mov	r8,r2
  811744:	1813883a 	mov	r9,r3
  811748:	003feb06 	br	8116f8 <__pack_d+0x100>
  81174c:	383fe11e 	bne	r7,zero,8116d4 <__pack_d+0xdc>
  811750:	01004004 	movi	r4,256
  811754:	4104703a 	and	r2,r8,r4
  811758:	10c4b03a 	or	r2,r2,r3
  81175c:	103fe326 	beq	r2,zero,8116ec <__pack_d+0xf4>
  811760:	3005883a 	mov	r2,r6
  811764:	003fdc06 	br	8116d8 <__pack_d+0xe0>
  811768:	000d883a 	mov	r6,zero
  81176c:	000f883a 	mov	r7,zero
  811770:	0201ffc4 	movi	r8,2047
  811774:	003fb406 	br	811648 <__pack_d+0x50>
  811778:	0005883a 	mov	r2,zero
  81177c:	00c00234 	movhi	r3,8
  811780:	408cb03a 	or	r6,r8,r2
  811784:	48ceb03a 	or	r7,r9,r3
  811788:	013fffc4 	movi	r4,-1
  81178c:	01400434 	movhi	r5,16
  811790:	297fffc4 	addi	r5,r5,-1
  811794:	3104703a 	and	r2,r6,r4
  811798:	3946703a 	and	r3,r7,r5
  81179c:	100d883a 	mov	r6,r2
  8117a0:	180f883a 	mov	r7,r3
  8117a4:	0201ffc4 	movi	r8,2047
  8117a8:	003fa706 	br	811648 <__pack_d+0x50>
  8117ac:	1109c83a 	sub	r4,r2,r4
  8117b0:	00800e04 	movi	r2,56
  8117b4:	11004316 	blt	r2,r4,8118c4 <__pack_d+0x2cc>
  8117b8:	21fff804 	addi	r7,r4,-32
  8117bc:	38004516 	blt	r7,zero,8118d4 <__pack_d+0x2dc>
  8117c0:	49d8d83a 	srl	r12,r9,r7
  8117c4:	001b883a 	mov	r13,zero
  8117c8:	0023883a 	mov	r17,zero
  8117cc:	01400044 	movi	r5,1
  8117d0:	0025883a 	mov	r18,zero
  8117d4:	38004716 	blt	r7,zero,8118f4 <__pack_d+0x2fc>
  8117d8:	29d6983a 	sll	r11,r5,r7
  8117dc:	0015883a 	mov	r10,zero
  8117e0:	00bfffc4 	movi	r2,-1
  8117e4:	5089883a 	add	r4,r10,r2
  8117e8:	588b883a 	add	r5,r11,r2
  8117ec:	228d803a 	cmpltu	r6,r4,r10
  8117f0:	314b883a 	add	r5,r6,r5
  8117f4:	4104703a 	and	r2,r8,r4
  8117f8:	4946703a 	and	r3,r9,r5
  8117fc:	10c4b03a 	or	r2,r2,r3
  811800:	10000226 	beq	r2,zero,81180c <__pack_d+0x214>
  811804:	04400044 	movi	r17,1
  811808:	0025883a 	mov	r18,zero
  81180c:	00803fc4 	movi	r2,255
  811810:	644eb03a 	or	r7,r12,r17
  811814:	3892703a 	and	r9,r7,r2
  811818:	00802004 	movi	r2,128
  81181c:	6c90b03a 	or	r8,r13,r18
  811820:	0015883a 	mov	r10,zero
  811824:	48801626 	beq	r9,r2,811880 <__pack_d+0x288>
  811828:	01001fc4 	movi	r4,127
  81182c:	3905883a 	add	r2,r7,r4
  811830:	11cd803a 	cmpltu	r6,r2,r7
  811834:	320d883a 	add	r6,r6,r8
  811838:	100f883a 	mov	r7,r2
  81183c:	00840034 	movhi	r2,4096
  811840:	10bfffc4 	addi	r2,r2,-1
  811844:	3011883a 	mov	r8,r6
  811848:	0007883a 	mov	r3,zero
  81184c:	11801b36 	bltu	r2,r6,8118bc <__pack_d+0x2c4>
  811850:	4004963a 	slli	r2,r8,24
  811854:	3808d23a 	srli	r4,r7,8
  811858:	400ad23a 	srli	r5,r8,8
  81185c:	1813883a 	mov	r9,r3
  811860:	1108b03a 	or	r4,r2,r4
  811864:	00bfffc4 	movi	r2,-1
  811868:	00c00434 	movhi	r3,16
  81186c:	18ffffc4 	addi	r3,r3,-1
  811870:	208c703a 	and	r6,r4,r2
  811874:	28ce703a 	and	r7,r5,r3
  811878:	4a01ffcc 	andi	r8,r9,2047
  81187c:	003f7206 	br	811648 <__pack_d+0x50>
  811880:	503fe91e 	bne	r10,zero,811828 <__pack_d+0x230>
  811884:	01004004 	movi	r4,256
  811888:	3904703a 	and	r2,r7,r4
  81188c:	0007883a 	mov	r3,zero
  811890:	10c4b03a 	or	r2,r2,r3
  811894:	10000626 	beq	r2,zero,8118b0 <__pack_d+0x2b8>
  811898:	3a45883a 	add	r2,r7,r9
  81189c:	11cd803a 	cmpltu	r6,r2,r7
  8118a0:	320d883a 	add	r6,r6,r8
  8118a4:	100f883a 	mov	r7,r2
  8118a8:	3011883a 	mov	r8,r6
  8118ac:	0007883a 	mov	r3,zero
  8118b0:	00840034 	movhi	r2,4096
  8118b4:	10bfffc4 	addi	r2,r2,-1
  8118b8:	123fe52e 	bgeu	r2,r8,811850 <__pack_d+0x258>
  8118bc:	00c00044 	movi	r3,1
  8118c0:	003fe306 	br	811850 <__pack_d+0x258>
  8118c4:	0009883a 	mov	r4,zero
  8118c8:	0013883a 	mov	r9,zero
  8118cc:	000b883a 	mov	r5,zero
  8118d0:	003fe406 	br	811864 <__pack_d+0x26c>
  8118d4:	4a47883a 	add	r3,r9,r9
  8118d8:	008007c4 	movi	r2,31
  8118dc:	1105c83a 	sub	r2,r2,r4
  8118e0:	1886983a 	sll	r3,r3,r2
  8118e4:	4118d83a 	srl	r12,r8,r4
  8118e8:	491ad83a 	srl	r13,r9,r4
  8118ec:	1b18b03a 	or	r12,r3,r12
  8118f0:	003fb506 	br	8117c8 <__pack_d+0x1d0>
  8118f4:	2806d07a 	srli	r3,r5,1
  8118f8:	008007c4 	movi	r2,31
  8118fc:	1105c83a 	sub	r2,r2,r4
  811900:	1896d83a 	srl	r11,r3,r2
  811904:	2914983a 	sll	r10,r5,r4
  811908:	003fb506 	br	8117e0 <__pack_d+0x1e8>

0081190c <__unpack_d>:
  81190c:	20c00117 	ldw	r3,4(r4)
  811910:	22400017 	ldw	r9,0(r4)
  811914:	00800434 	movhi	r2,16
  811918:	10bfffc4 	addi	r2,r2,-1
  81191c:	1808d53a 	srli	r4,r3,20
  811920:	180cd7fa 	srli	r6,r3,31
  811924:	1894703a 	and	r10,r3,r2
  811928:	2201ffcc 	andi	r8,r4,2047
  81192c:	281b883a 	mov	r13,r5
  811930:	4817883a 	mov	r11,r9
  811934:	29800115 	stw	r6,4(r5)
  811938:	5019883a 	mov	r12,r10
  81193c:	40001e1e 	bne	r8,zero,8119b8 <__unpack_d+0xac>
  811940:	4a84b03a 	or	r2,r9,r10
  811944:	10001926 	beq	r2,zero,8119ac <__unpack_d+0xa0>
  811948:	4804d63a 	srli	r2,r9,24
  81194c:	500c923a 	slli	r6,r10,8
  811950:	013f0084 	movi	r4,-1022
  811954:	00c40034 	movhi	r3,4096
  811958:	18ffffc4 	addi	r3,r3,-1
  81195c:	118cb03a 	or	r6,r2,r6
  811960:	008000c4 	movi	r2,3
  811964:	480a923a 	slli	r5,r9,8
  811968:	68800015 	stw	r2,0(r13)
  81196c:	69000215 	stw	r4,8(r13)
  811970:	19800b36 	bltu	r3,r6,8119a0 <__unpack_d+0x94>
  811974:	200f883a 	mov	r7,r4
  811978:	1811883a 	mov	r8,r3
  81197c:	2945883a 	add	r2,r5,r5
  811980:	1149803a 	cmpltu	r4,r2,r5
  811984:	3187883a 	add	r3,r6,r6
  811988:	20c9883a 	add	r4,r4,r3
  81198c:	100b883a 	mov	r5,r2
  811990:	200d883a 	mov	r6,r4
  811994:	39ffffc4 	addi	r7,r7,-1
  811998:	413ff82e 	bgeu	r8,r4,81197c <__unpack_d+0x70>
  81199c:	69c00215 	stw	r7,8(r13)
  8119a0:	69800415 	stw	r6,16(r13)
  8119a4:	69400315 	stw	r5,12(r13)
  8119a8:	f800283a 	ret
  8119ac:	00800084 	movi	r2,2
  8119b0:	28800015 	stw	r2,0(r5)
  8119b4:	f800283a 	ret
  8119b8:	0081ffc4 	movi	r2,2047
  8119bc:	40800f26 	beq	r8,r2,8119fc <__unpack_d+0xf0>
  8119c0:	480cd63a 	srli	r6,r9,24
  8119c4:	5006923a 	slli	r3,r10,8
  8119c8:	4804923a 	slli	r2,r9,8
  8119cc:	0009883a 	mov	r4,zero
  8119d0:	30c6b03a 	or	r3,r6,r3
  8119d4:	01440034 	movhi	r5,4096
  8119d8:	110cb03a 	or	r6,r2,r4
  8119dc:	423f0044 	addi	r8,r8,-1023
  8119e0:	194eb03a 	or	r7,r3,r5
  8119e4:	008000c4 	movi	r2,3
  8119e8:	69c00415 	stw	r7,16(r13)
  8119ec:	6a000215 	stw	r8,8(r13)
  8119f0:	68800015 	stw	r2,0(r13)
  8119f4:	69800315 	stw	r6,12(r13)
  8119f8:	f800283a 	ret
  8119fc:	4a84b03a 	or	r2,r9,r10
  811a00:	1000031e 	bne	r2,zero,811a10 <__unpack_d+0x104>
  811a04:	00800104 	movi	r2,4
  811a08:	28800015 	stw	r2,0(r5)
  811a0c:	f800283a 	ret
  811a10:	0009883a 	mov	r4,zero
  811a14:	01400234 	movhi	r5,8
  811a18:	4904703a 	and	r2,r9,r4
  811a1c:	5146703a 	and	r3,r10,r5
  811a20:	10c4b03a 	or	r2,r2,r3
  811a24:	10000526 	beq	r2,zero,811a3c <__unpack_d+0x130>
  811a28:	00800044 	movi	r2,1
  811a2c:	68800015 	stw	r2,0(r13)
  811a30:	6b000415 	stw	r12,16(r13)
  811a34:	6ac00315 	stw	r11,12(r13)
  811a38:	f800283a 	ret
  811a3c:	68000015 	stw	zero,0(r13)
  811a40:	003ffb06 	br	811a30 <__unpack_d+0x124>

00811a44 <__fpcmp_parts_d>:
  811a44:	21800017 	ldw	r6,0(r4)
  811a48:	00c00044 	movi	r3,1
  811a4c:	19800a2e 	bgeu	r3,r6,811a78 <__fpcmp_parts_d+0x34>
  811a50:	28800017 	ldw	r2,0(r5)
  811a54:	1880082e 	bgeu	r3,r2,811a78 <__fpcmp_parts_d+0x34>
  811a58:	00c00104 	movi	r3,4
  811a5c:	30c02626 	beq	r6,r3,811af8 <__fpcmp_parts_d+0xb4>
  811a60:	10c02226 	beq	r2,r3,811aec <__fpcmp_parts_d+0xa8>
  811a64:	00c00084 	movi	r3,2
  811a68:	30c00526 	beq	r6,r3,811a80 <__fpcmp_parts_d+0x3c>
  811a6c:	10c0071e 	bne	r2,r3,811a8c <__fpcmp_parts_d+0x48>
  811a70:	20800117 	ldw	r2,4(r4)
  811a74:	1000091e 	bne	r2,zero,811a9c <__fpcmp_parts_d+0x58>
  811a78:	00800044 	movi	r2,1
  811a7c:	f800283a 	ret
  811a80:	10c01a1e 	bne	r2,r3,811aec <__fpcmp_parts_d+0xa8>
  811a84:	0005883a 	mov	r2,zero
  811a88:	f800283a 	ret
  811a8c:	22000117 	ldw	r8,4(r4)
  811a90:	28800117 	ldw	r2,4(r5)
  811a94:	40800326 	beq	r8,r2,811aa4 <__fpcmp_parts_d+0x60>
  811a98:	403ff726 	beq	r8,zero,811a78 <__fpcmp_parts_d+0x34>
  811a9c:	00bfffc4 	movi	r2,-1
  811aa0:	f800283a 	ret
  811aa4:	20c00217 	ldw	r3,8(r4)
  811aa8:	28800217 	ldw	r2,8(r5)
  811aac:	10fffa16 	blt	r2,r3,811a98 <__fpcmp_parts_d+0x54>
  811ab0:	18800916 	blt	r3,r2,811ad8 <__fpcmp_parts_d+0x94>
  811ab4:	21c00417 	ldw	r7,16(r4)
  811ab8:	28c00417 	ldw	r3,16(r5)
  811abc:	21800317 	ldw	r6,12(r4)
  811ac0:	28800317 	ldw	r2,12(r5)
  811ac4:	19fff436 	bltu	r3,r7,811a98 <__fpcmp_parts_d+0x54>
  811ac8:	38c00526 	beq	r7,r3,811ae0 <__fpcmp_parts_d+0x9c>
  811acc:	38c00236 	bltu	r7,r3,811ad8 <__fpcmp_parts_d+0x94>
  811ad0:	19ffec1e 	bne	r3,r7,811a84 <__fpcmp_parts_d+0x40>
  811ad4:	30bfeb2e 	bgeu	r6,r2,811a84 <__fpcmp_parts_d+0x40>
  811ad8:	403fe71e 	bne	r8,zero,811a78 <__fpcmp_parts_d+0x34>
  811adc:	003fef06 	br	811a9c <__fpcmp_parts_d+0x58>
  811ae0:	11bffa2e 	bgeu	r2,r6,811acc <__fpcmp_parts_d+0x88>
  811ae4:	403fe426 	beq	r8,zero,811a78 <__fpcmp_parts_d+0x34>
  811ae8:	003fec06 	br	811a9c <__fpcmp_parts_d+0x58>
  811aec:	28800117 	ldw	r2,4(r5)
  811af0:	103fe11e 	bne	r2,zero,811a78 <__fpcmp_parts_d+0x34>
  811af4:	003fe906 	br	811a9c <__fpcmp_parts_d+0x58>
  811af8:	11bfdd1e 	bne	r2,r6,811a70 <__fpcmp_parts_d+0x2c>
  811afc:	28c00117 	ldw	r3,4(r5)
  811b00:	20800117 	ldw	r2,4(r4)
  811b04:	1885c83a 	sub	r2,r3,r2
  811b08:	f800283a 	ret

00811b0c <__errno>:
  811b0c:	00c020f4 	movhi	r3,131
  811b10:	18e99904 	addi	r3,r3,-22940
  811b14:	18800017 	ldw	r2,0(r3)
  811b18:	f800283a 	ret

00811b1c <free>:
  811b1c:	008020f4 	movhi	r2,131
  811b20:	10a99904 	addi	r2,r2,-22940
  811b24:	200b883a 	mov	r5,r4
  811b28:	11000017 	ldw	r4,0(r2)
  811b2c:	0816bec1 	jmpi	816bec <_free_r>

00811b30 <malloc>:
  811b30:	008020f4 	movhi	r2,131
  811b34:	10a99904 	addi	r2,r2,-22940
  811b38:	200b883a 	mov	r5,r4
  811b3c:	11000017 	ldw	r4,0(r2)
  811b40:	0811b441 	jmpi	811b44 <_malloc_r>

00811b44 <_malloc_r>:
  811b44:	defff604 	addi	sp,sp,-40
  811b48:	28c002c4 	addi	r3,r5,11
  811b4c:	00800584 	movi	r2,22
  811b50:	dc800215 	stw	r18,8(sp)
  811b54:	dfc00915 	stw	ra,36(sp)
  811b58:	df000815 	stw	fp,32(sp)
  811b5c:	ddc00715 	stw	r23,28(sp)
  811b60:	dd800615 	stw	r22,24(sp)
  811b64:	dd400515 	stw	r21,20(sp)
  811b68:	dd000415 	stw	r20,16(sp)
  811b6c:	dcc00315 	stw	r19,12(sp)
  811b70:	dc400115 	stw	r17,4(sp)
  811b74:	dc000015 	stw	r16,0(sp)
  811b78:	2025883a 	mov	r18,r4
  811b7c:	10c01236 	bltu	r2,r3,811bc8 <_malloc_r+0x84>
  811b80:	04400404 	movi	r17,16
  811b84:	8940142e 	bgeu	r17,r5,811bd8 <_malloc_r+0x94>
  811b88:	00800304 	movi	r2,12
  811b8c:	0007883a 	mov	r3,zero
  811b90:	90800015 	stw	r2,0(r18)
  811b94:	1805883a 	mov	r2,r3
  811b98:	dfc00917 	ldw	ra,36(sp)
  811b9c:	df000817 	ldw	fp,32(sp)
  811ba0:	ddc00717 	ldw	r23,28(sp)
  811ba4:	dd800617 	ldw	r22,24(sp)
  811ba8:	dd400517 	ldw	r21,20(sp)
  811bac:	dd000417 	ldw	r20,16(sp)
  811bb0:	dcc00317 	ldw	r19,12(sp)
  811bb4:	dc800217 	ldw	r18,8(sp)
  811bb8:	dc400117 	ldw	r17,4(sp)
  811bbc:	dc000017 	ldw	r16,0(sp)
  811bc0:	dec00a04 	addi	sp,sp,40
  811bc4:	f800283a 	ret
  811bc8:	00bffe04 	movi	r2,-8
  811bcc:	18a2703a 	and	r17,r3,r2
  811bd0:	883fed16 	blt	r17,zero,811b88 <_malloc_r+0x44>
  811bd4:	897fec36 	bltu	r17,r5,811b88 <_malloc_r+0x44>
  811bd8:	9009883a 	mov	r4,r18
  811bdc:	081b63c0 	call	81b63c <__malloc_lock>
  811be0:	00807dc4 	movi	r2,503
  811be4:	14402b2e 	bgeu	r2,r17,811c94 <_malloc_r+0x150>
  811be8:	8806d27a 	srli	r3,r17,9
  811bec:	18003f1e 	bne	r3,zero,811cec <_malloc_r+0x1a8>
  811bf0:	880cd0fa 	srli	r6,r17,3
  811bf4:	300490fa 	slli	r2,r6,3
  811bf8:	02c020f4 	movhi	r11,131
  811bfc:	5ae3eb04 	addi	r11,r11,-28756
  811c00:	12cb883a 	add	r5,r2,r11
  811c04:	2c000317 	ldw	r16,12(r5)
  811c08:	580f883a 	mov	r7,r11
  811c0c:	2c00041e 	bne	r5,r16,811c20 <_malloc_r+0xdc>
  811c10:	00000a06 	br	811c3c <_malloc_r+0xf8>
  811c14:	1800860e 	bge	r3,zero,811e30 <_malloc_r+0x2ec>
  811c18:	84000317 	ldw	r16,12(r16)
  811c1c:	2c000726 	beq	r5,r16,811c3c <_malloc_r+0xf8>
  811c20:	80800117 	ldw	r2,4(r16)
  811c24:	00ffff04 	movi	r3,-4
  811c28:	10c8703a 	and	r4,r2,r3
  811c2c:	2447c83a 	sub	r3,r4,r17
  811c30:	008003c4 	movi	r2,15
  811c34:	10fff70e 	bge	r2,r3,811c14 <_malloc_r+0xd0>
  811c38:	31bfffc4 	addi	r6,r6,-1
  811c3c:	32400044 	addi	r9,r6,1
  811c40:	028020f4 	movhi	r10,131
  811c44:	52a3ed04 	addi	r10,r10,-28748
  811c48:	54000217 	ldw	r16,8(r10)
  811c4c:	8280a026 	beq	r16,r10,811ed0 <_malloc_r+0x38c>
  811c50:	80800117 	ldw	r2,4(r16)
  811c54:	00ffff04 	movi	r3,-4
  811c58:	10ca703a 	and	r5,r2,r3
  811c5c:	2c4dc83a 	sub	r6,r5,r17
  811c60:	008003c4 	movi	r2,15
  811c64:	11808316 	blt	r2,r6,811e74 <_malloc_r+0x330>
  811c68:	52800315 	stw	r10,12(r10)
  811c6c:	52800215 	stw	r10,8(r10)
  811c70:	30002916 	blt	r6,zero,811d18 <_malloc_r+0x1d4>
  811c74:	8147883a 	add	r3,r16,r5
  811c78:	18800117 	ldw	r2,4(r3)
  811c7c:	9009883a 	mov	r4,r18
  811c80:	10800054 	ori	r2,r2,1
  811c84:	18800115 	stw	r2,4(r3)
  811c88:	081b7440 	call	81b744 <__malloc_unlock>
  811c8c:	80c00204 	addi	r3,r16,8
  811c90:	003fc006 	br	811b94 <_malloc_r+0x50>
  811c94:	02c020f4 	movhi	r11,131
  811c98:	5ae3eb04 	addi	r11,r11,-28756
  811c9c:	8ac5883a 	add	r2,r17,r11
  811ca0:	14000317 	ldw	r16,12(r2)
  811ca4:	580f883a 	mov	r7,r11
  811ca8:	8806d0fa 	srli	r3,r17,3
  811cac:	14006c26 	beq	r2,r16,811e60 <_malloc_r+0x31c>
  811cb0:	80c00117 	ldw	r3,4(r16)
  811cb4:	00bfff04 	movi	r2,-4
  811cb8:	81800317 	ldw	r6,12(r16)
  811cbc:	1886703a 	and	r3,r3,r2
  811cc0:	80c7883a 	add	r3,r16,r3
  811cc4:	18800117 	ldw	r2,4(r3)
  811cc8:	81400217 	ldw	r5,8(r16)
  811ccc:	9009883a 	mov	r4,r18
  811cd0:	10800054 	ori	r2,r2,1
  811cd4:	18800115 	stw	r2,4(r3)
  811cd8:	31400215 	stw	r5,8(r6)
  811cdc:	29800315 	stw	r6,12(r5)
  811ce0:	081b7440 	call	81b744 <__malloc_unlock>
  811ce4:	80c00204 	addi	r3,r16,8
  811ce8:	003faa06 	br	811b94 <_malloc_r+0x50>
  811cec:	00800104 	movi	r2,4
  811cf0:	10c0052e 	bgeu	r2,r3,811d08 <_malloc_r+0x1c4>
  811cf4:	00800504 	movi	r2,20
  811cf8:	10c07836 	bltu	r2,r3,811edc <_malloc_r+0x398>
  811cfc:	198016c4 	addi	r6,r3,91
  811d00:	300490fa 	slli	r2,r6,3
  811d04:	003fbc06 	br	811bf8 <_malloc_r+0xb4>
  811d08:	8804d1ba 	srli	r2,r17,6
  811d0c:	11800e04 	addi	r6,r2,56
  811d10:	300490fa 	slli	r2,r6,3
  811d14:	003fb806 	br	811bf8 <_malloc_r+0xb4>
  811d18:	00807fc4 	movi	r2,511
  811d1c:	1140bb36 	bltu	r2,r5,81200c <_malloc_r+0x4c8>
  811d20:	2806d0fa 	srli	r3,r5,3
  811d24:	573ffe04 	addi	fp,r10,-8
  811d28:	00800044 	movi	r2,1
  811d2c:	180890fa 	slli	r4,r3,3
  811d30:	1807d0ba 	srai	r3,r3,2
  811d34:	e1c00117 	ldw	r7,4(fp)
  811d38:	5909883a 	add	r4,r11,r4
  811d3c:	21400217 	ldw	r5,8(r4)
  811d40:	10c4983a 	sll	r2,r2,r3
  811d44:	81000315 	stw	r4,12(r16)
  811d48:	81400215 	stw	r5,8(r16)
  811d4c:	388eb03a 	or	r7,r7,r2
  811d50:	2c000315 	stw	r16,12(r5)
  811d54:	24000215 	stw	r16,8(r4)
  811d58:	e1c00115 	stw	r7,4(fp)
  811d5c:	4807883a 	mov	r3,r9
  811d60:	4800cd16 	blt	r9,zero,812098 <_malloc_r+0x554>
  811d64:	1807d0ba 	srai	r3,r3,2
  811d68:	00800044 	movi	r2,1
  811d6c:	10c8983a 	sll	r4,r2,r3
  811d70:	39004436 	bltu	r7,r4,811e84 <_malloc_r+0x340>
  811d74:	21c4703a 	and	r2,r4,r7
  811d78:	10000a1e 	bne	r2,zero,811da4 <_malloc_r+0x260>
  811d7c:	2109883a 	add	r4,r4,r4
  811d80:	00bfff04 	movi	r2,-4
  811d84:	4884703a 	and	r2,r9,r2
  811d88:	3906703a 	and	r3,r7,r4
  811d8c:	12400104 	addi	r9,r2,4
  811d90:	1800041e 	bne	r3,zero,811da4 <_malloc_r+0x260>
  811d94:	2109883a 	add	r4,r4,r4
  811d98:	3904703a 	and	r2,r7,r4
  811d9c:	4a400104 	addi	r9,r9,4
  811da0:	103ffc26 	beq	r2,zero,811d94 <_malloc_r+0x250>
  811da4:	480490fa 	slli	r2,r9,3
  811da8:	4819883a 	mov	r12,r9
  811dac:	023fff04 	movi	r8,-4
  811db0:	589b883a 	add	r13,r11,r2
  811db4:	6807883a 	mov	r3,r13
  811db8:	014003c4 	movi	r5,15
  811dbc:	1c000317 	ldw	r16,12(r3)
  811dc0:	1c00041e 	bne	r3,r16,811dd4 <_malloc_r+0x290>
  811dc4:	0000a706 	br	812064 <_malloc_r+0x520>
  811dc8:	3000ab0e 	bge	r6,zero,812078 <_malloc_r+0x534>
  811dcc:	84000317 	ldw	r16,12(r16)
  811dd0:	1c00a426 	beq	r3,r16,812064 <_malloc_r+0x520>
  811dd4:	80800117 	ldw	r2,4(r16)
  811dd8:	1204703a 	and	r2,r2,r8
  811ddc:	144dc83a 	sub	r6,r2,r17
  811de0:	29bff90e 	bge	r5,r6,811dc8 <_malloc_r+0x284>
  811de4:	81000317 	ldw	r4,12(r16)
  811de8:	80c00217 	ldw	r3,8(r16)
  811dec:	89400054 	ori	r5,r17,1
  811df0:	8445883a 	add	r2,r16,r17
  811df4:	20c00215 	stw	r3,8(r4)
  811df8:	19000315 	stw	r4,12(r3)
  811dfc:	81400115 	stw	r5,4(r16)
  811e00:	1187883a 	add	r3,r2,r6
  811e04:	31000054 	ori	r4,r6,1
  811e08:	50800315 	stw	r2,12(r10)
  811e0c:	50800215 	stw	r2,8(r10)
  811e10:	19800015 	stw	r6,0(r3)
  811e14:	11000115 	stw	r4,4(r2)
  811e18:	12800215 	stw	r10,8(r2)
  811e1c:	12800315 	stw	r10,12(r2)
  811e20:	9009883a 	mov	r4,r18
  811e24:	081b7440 	call	81b744 <__malloc_unlock>
  811e28:	80c00204 	addi	r3,r16,8
  811e2c:	003f5906 	br	811b94 <_malloc_r+0x50>
  811e30:	8109883a 	add	r4,r16,r4
  811e34:	20800117 	ldw	r2,4(r4)
  811e38:	80c00217 	ldw	r3,8(r16)
  811e3c:	81400317 	ldw	r5,12(r16)
  811e40:	10800054 	ori	r2,r2,1
  811e44:	20800115 	stw	r2,4(r4)
  811e48:	28c00215 	stw	r3,8(r5)
  811e4c:	19400315 	stw	r5,12(r3)
  811e50:	9009883a 	mov	r4,r18
  811e54:	081b7440 	call	81b744 <__malloc_unlock>
  811e58:	80c00204 	addi	r3,r16,8
  811e5c:	003f4d06 	br	811b94 <_malloc_r+0x50>
  811e60:	80800204 	addi	r2,r16,8
  811e64:	14000317 	ldw	r16,12(r2)
  811e68:	143f911e 	bne	r2,r16,811cb0 <_malloc_r+0x16c>
  811e6c:	1a400084 	addi	r9,r3,2
  811e70:	003f7306 	br	811c40 <_malloc_r+0xfc>
  811e74:	88c00054 	ori	r3,r17,1
  811e78:	8445883a 	add	r2,r16,r17
  811e7c:	80c00115 	stw	r3,4(r16)
  811e80:	003fdf06 	br	811e00 <_malloc_r+0x2bc>
  811e84:	e4000217 	ldw	r16,8(fp)
  811e88:	00bfff04 	movi	r2,-4
  811e8c:	80c00117 	ldw	r3,4(r16)
  811e90:	802d883a 	mov	r22,r16
  811e94:	18aa703a 	and	r21,r3,r2
  811e98:	ac401636 	bltu	r21,r17,811ef4 <_malloc_r+0x3b0>
  811e9c:	ac49c83a 	sub	r4,r21,r17
  811ea0:	008003c4 	movi	r2,15
  811ea4:	1100130e 	bge	r2,r4,811ef4 <_malloc_r+0x3b0>
  811ea8:	88800054 	ori	r2,r17,1
  811eac:	8447883a 	add	r3,r16,r17
  811eb0:	80800115 	stw	r2,4(r16)
  811eb4:	20800054 	ori	r2,r4,1
  811eb8:	18800115 	stw	r2,4(r3)
  811ebc:	e0c00215 	stw	r3,8(fp)
  811ec0:	9009883a 	mov	r4,r18
  811ec4:	081b7440 	call	81b744 <__malloc_unlock>
  811ec8:	80c00204 	addi	r3,r16,8
  811ecc:	003f3106 	br	811b94 <_malloc_r+0x50>
  811ed0:	39c00117 	ldw	r7,4(r7)
  811ed4:	573ffe04 	addi	fp,r10,-8
  811ed8:	003fa006 	br	811d5c <_malloc_r+0x218>
  811edc:	00801504 	movi	r2,84
  811ee0:	10c06736 	bltu	r2,r3,812080 <_malloc_r+0x53c>
  811ee4:	8804d33a 	srli	r2,r17,12
  811ee8:	11801b84 	addi	r6,r2,110
  811eec:	300490fa 	slli	r2,r6,3
  811ef0:	003f4106 	br	811bf8 <_malloc_r+0xb4>
  811ef4:	d0a03617 	ldw	r2,-32552(gp)
  811ef8:	d0e00417 	ldw	r3,-32752(gp)
  811efc:	053fffc4 	movi	r20,-1
  811f00:	10800404 	addi	r2,r2,16
  811f04:	88a7883a 	add	r19,r17,r2
  811f08:	1d000326 	beq	r3,r20,811f18 <_malloc_r+0x3d4>
  811f0c:	98c3ffc4 	addi	r3,r19,4095
  811f10:	00bc0004 	movi	r2,-4096
  811f14:	18a6703a 	and	r19,r3,r2
  811f18:	9009883a 	mov	r4,r18
  811f1c:	980b883a 	mov	r5,r19
  811f20:	08124f40 	call	8124f4 <_sbrk_r>
  811f24:	1009883a 	mov	r4,r2
  811f28:	15000426 	beq	r2,r20,811f3c <_malloc_r+0x3f8>
  811f2c:	854b883a 	add	r5,r16,r21
  811f30:	1029883a 	mov	r20,r2
  811f34:	11405a2e 	bgeu	r2,r5,8120a0 <_malloc_r+0x55c>
  811f38:	87000c26 	beq	r16,fp,811f6c <_malloc_r+0x428>
  811f3c:	e4000217 	ldw	r16,8(fp)
  811f40:	80c00117 	ldw	r3,4(r16)
  811f44:	00bfff04 	movi	r2,-4
  811f48:	1884703a 	and	r2,r3,r2
  811f4c:	14400336 	bltu	r2,r17,811f5c <_malloc_r+0x418>
  811f50:	1449c83a 	sub	r4,r2,r17
  811f54:	008003c4 	movi	r2,15
  811f58:	113fd316 	blt	r2,r4,811ea8 <_malloc_r+0x364>
  811f5c:	9009883a 	mov	r4,r18
  811f60:	081b7440 	call	81b744 <__malloc_unlock>
  811f64:	0007883a 	mov	r3,zero
  811f68:	003f0a06 	br	811b94 <_malloc_r+0x50>
  811f6c:	05c020f4 	movhi	r23,131
  811f70:	bde9f404 	addi	r23,r23,-22576
  811f74:	b8800017 	ldw	r2,0(r23)
  811f78:	988d883a 	add	r6,r19,r2
  811f7c:	b9800015 	stw	r6,0(r23)
  811f80:	d0e00417 	ldw	r3,-32752(gp)
  811f84:	00bfffc4 	movi	r2,-1
  811f88:	18808e26 	beq	r3,r2,8121c4 <_malloc_r+0x680>
  811f8c:	2145c83a 	sub	r2,r4,r5
  811f90:	3085883a 	add	r2,r6,r2
  811f94:	b8800015 	stw	r2,0(r23)
  811f98:	20c001cc 	andi	r3,r4,7
  811f9c:	18005f1e 	bne	r3,zero,81211c <_malloc_r+0x5d8>
  811fa0:	000b883a 	mov	r5,zero
  811fa4:	a4c5883a 	add	r2,r20,r19
  811fa8:	1083ffcc 	andi	r2,r2,4095
  811fac:	00c40004 	movi	r3,4096
  811fb0:	1887c83a 	sub	r3,r3,r2
  811fb4:	28e7883a 	add	r19,r5,r3
  811fb8:	9009883a 	mov	r4,r18
  811fbc:	980b883a 	mov	r5,r19
  811fc0:	08124f40 	call	8124f4 <_sbrk_r>
  811fc4:	1007883a 	mov	r3,r2
  811fc8:	00bfffc4 	movi	r2,-1
  811fcc:	18807a26 	beq	r3,r2,8121b8 <_malloc_r+0x674>
  811fd0:	1d05c83a 	sub	r2,r3,r20
  811fd4:	9885883a 	add	r2,r19,r2
  811fd8:	10c00054 	ori	r3,r2,1
  811fdc:	b8800017 	ldw	r2,0(r23)
  811fe0:	a021883a 	mov	r16,r20
  811fe4:	a0c00115 	stw	r3,4(r20)
  811fe8:	9885883a 	add	r2,r19,r2
  811fec:	b8800015 	stw	r2,0(r23)
  811ff0:	e5000215 	stw	r20,8(fp)
  811ff4:	b7003626 	beq	r22,fp,8120d0 <_malloc_r+0x58c>
  811ff8:	018003c4 	movi	r6,15
  811ffc:	35404b36 	bltu	r6,r21,81212c <_malloc_r+0x5e8>
  812000:	00800044 	movi	r2,1
  812004:	a0800115 	stw	r2,4(r20)
  812008:	003fcd06 	br	811f40 <_malloc_r+0x3fc>
  81200c:	2808d27a 	srli	r4,r5,9
  812010:	2000371e 	bne	r4,zero,8120f0 <_malloc_r+0x5ac>
  812014:	2808d0fa 	srli	r4,r5,3
  812018:	200690fa 	slli	r3,r4,3
  81201c:	1ad1883a 	add	r8,r3,r11
  812020:	41800217 	ldw	r6,8(r8)
  812024:	41805b26 	beq	r8,r6,812194 <_malloc_r+0x650>
  812028:	30800117 	ldw	r2,4(r6)
  81202c:	00ffff04 	movi	r3,-4
  812030:	10c4703a 	and	r2,r2,r3
  812034:	2880022e 	bgeu	r5,r2,812040 <_malloc_r+0x4fc>
  812038:	31800217 	ldw	r6,8(r6)
  81203c:	41bffa1e 	bne	r8,r6,812028 <_malloc_r+0x4e4>
  812040:	32000317 	ldw	r8,12(r6)
  812044:	39c00117 	ldw	r7,4(r7)
  812048:	82000315 	stw	r8,12(r16)
  81204c:	81800215 	stw	r6,8(r16)
  812050:	070020f4 	movhi	fp,131
  812054:	e723eb04 	addi	fp,fp,-28756
  812058:	34000315 	stw	r16,12(r6)
  81205c:	44000215 	stw	r16,8(r8)
  812060:	003f3e06 	br	811d5c <_malloc_r+0x218>
  812064:	63000044 	addi	r12,r12,1
  812068:	608000cc 	andi	r2,r12,3
  81206c:	10005d26 	beq	r2,zero,8121e4 <_malloc_r+0x6a0>
  812070:	18c00204 	addi	r3,r3,8
  812074:	003f5106 	br	811dbc <_malloc_r+0x278>
  812078:	8089883a 	add	r4,r16,r2
  81207c:	003f6d06 	br	811e34 <_malloc_r+0x2f0>
  812080:	00805504 	movi	r2,340
  812084:	10c02036 	bltu	r2,r3,812108 <_malloc_r+0x5c4>
  812088:	8804d3fa 	srli	r2,r17,15
  81208c:	11801dc4 	addi	r6,r2,119
  812090:	300490fa 	slli	r2,r6,3
  812094:	003ed806 	br	811bf8 <_malloc_r+0xb4>
  812098:	48c000c4 	addi	r3,r9,3
  81209c:	003f3106 	br	811d64 <_malloc_r+0x220>
  8120a0:	05c020f4 	movhi	r23,131
  8120a4:	bde9f404 	addi	r23,r23,-22576
  8120a8:	b8800017 	ldw	r2,0(r23)
  8120ac:	988d883a 	add	r6,r19,r2
  8120b0:	b9800015 	stw	r6,0(r23)
  8120b4:	293fb21e 	bne	r5,r4,811f80 <_malloc_r+0x43c>
  8120b8:	2083ffcc 	andi	r2,r4,4095
  8120bc:	103fb01e 	bne	r2,zero,811f80 <_malloc_r+0x43c>
  8120c0:	e4000217 	ldw	r16,8(fp)
  8120c4:	9d45883a 	add	r2,r19,r21
  8120c8:	10800054 	ori	r2,r2,1
  8120cc:	80800115 	stw	r2,4(r16)
  8120d0:	b8c00017 	ldw	r3,0(r23)
  8120d4:	d0a03717 	ldw	r2,-32548(gp)
  8120d8:	10c0012e 	bgeu	r2,r3,8120e0 <_malloc_r+0x59c>
  8120dc:	d0e03715 	stw	r3,-32548(gp)
  8120e0:	d0a03817 	ldw	r2,-32544(gp)
  8120e4:	10ff962e 	bgeu	r2,r3,811f40 <_malloc_r+0x3fc>
  8120e8:	d0e03815 	stw	r3,-32544(gp)
  8120ec:	003f9406 	br	811f40 <_malloc_r+0x3fc>
  8120f0:	00800104 	movi	r2,4
  8120f4:	11001e36 	bltu	r2,r4,812170 <_malloc_r+0x62c>
  8120f8:	2804d1ba 	srli	r2,r5,6
  8120fc:	11000e04 	addi	r4,r2,56
  812100:	200690fa 	slli	r3,r4,3
  812104:	003fc506 	br	81201c <_malloc_r+0x4d8>
  812108:	00815504 	movi	r2,1364
  81210c:	10c01d2e 	bgeu	r2,r3,812184 <_malloc_r+0x640>
  812110:	01801f84 	movi	r6,126
  812114:	0080fc04 	movi	r2,1008
  812118:	003eb706 	br	811bf8 <_malloc_r+0xb4>
  81211c:	00800204 	movi	r2,8
  812120:	10cbc83a 	sub	r5,r2,r3
  812124:	2169883a 	add	r20,r4,r5
  812128:	003f9e06 	br	811fa4 <_malloc_r+0x460>
  81212c:	00bffe04 	movi	r2,-8
  812130:	a93ffd04 	addi	r4,r21,-12
  812134:	2088703a 	and	r4,r4,r2
  812138:	b10b883a 	add	r5,r22,r4
  81213c:	00c00144 	movi	r3,5
  812140:	28c00215 	stw	r3,8(r5)
  812144:	28c00115 	stw	r3,4(r5)
  812148:	b0800117 	ldw	r2,4(r22)
  81214c:	1080004c 	andi	r2,r2,1
  812150:	2084b03a 	or	r2,r4,r2
  812154:	b0800115 	stw	r2,4(r22)
  812158:	313fdd2e 	bgeu	r6,r4,8120d0 <_malloc_r+0x58c>
  81215c:	b1400204 	addi	r5,r22,8
  812160:	9009883a 	mov	r4,r18
  812164:	0816bec0 	call	816bec <_free_r>
  812168:	e4000217 	ldw	r16,8(fp)
  81216c:	003fd806 	br	8120d0 <_malloc_r+0x58c>
  812170:	00800504 	movi	r2,20
  812174:	11001536 	bltu	r2,r4,8121cc <_malloc_r+0x688>
  812178:	210016c4 	addi	r4,r4,91
  81217c:	200690fa 	slli	r3,r4,3
  812180:	003fa606 	br	81201c <_malloc_r+0x4d8>
  812184:	8804d4ba 	srli	r2,r17,18
  812188:	11801f04 	addi	r6,r2,124
  81218c:	300490fa 	slli	r2,r6,3
  812190:	003e9906 	br	811bf8 <_malloc_r+0xb4>
  812194:	2009d0ba 	srai	r4,r4,2
  812198:	014020f4 	movhi	r5,131
  81219c:	2963eb04 	addi	r5,r5,-28756
  8121a0:	00c00044 	movi	r3,1
  8121a4:	28800117 	ldw	r2,4(r5)
  8121a8:	1906983a 	sll	r3,r3,r4
  8121ac:	10c4b03a 	or	r2,r2,r3
  8121b0:	28800115 	stw	r2,4(r5)
  8121b4:	003fa306 	br	812044 <_malloc_r+0x500>
  8121b8:	0027883a 	mov	r19,zero
  8121bc:	00c00044 	movi	r3,1
  8121c0:	003f8606 	br	811fdc <_malloc_r+0x498>
  8121c4:	d1200415 	stw	r4,-32752(gp)
  8121c8:	003f7306 	br	811f98 <_malloc_r+0x454>
  8121cc:	00801504 	movi	r2,84
  8121d0:	11001936 	bltu	r2,r4,812238 <_malloc_r+0x6f4>
  8121d4:	2804d33a 	srli	r2,r5,12
  8121d8:	11001b84 	addi	r4,r2,110
  8121dc:	200690fa 	slli	r3,r4,3
  8121e0:	003f8e06 	br	81201c <_malloc_r+0x4d8>
  8121e4:	480b883a 	mov	r5,r9
  8121e8:	6807883a 	mov	r3,r13
  8121ec:	288000cc 	andi	r2,r5,3
  8121f0:	18fffe04 	addi	r3,r3,-8
  8121f4:	297fffc4 	addi	r5,r5,-1
  8121f8:	10001526 	beq	r2,zero,812250 <_malloc_r+0x70c>
  8121fc:	18800217 	ldw	r2,8(r3)
  812200:	10fffa26 	beq	r2,r3,8121ec <_malloc_r+0x6a8>
  812204:	2109883a 	add	r4,r4,r4
  812208:	393f1e36 	bltu	r7,r4,811e84 <_malloc_r+0x340>
  81220c:	203f1d26 	beq	r4,zero,811e84 <_malloc_r+0x340>
  812210:	21c4703a 	and	r2,r4,r7
  812214:	10000226 	beq	r2,zero,812220 <_malloc_r+0x6dc>
  812218:	6013883a 	mov	r9,r12
  81221c:	003ee106 	br	811da4 <_malloc_r+0x260>
  812220:	2109883a 	add	r4,r4,r4
  812224:	3904703a 	and	r2,r7,r4
  812228:	63000104 	addi	r12,r12,4
  81222c:	103ffc26 	beq	r2,zero,812220 <_malloc_r+0x6dc>
  812230:	6013883a 	mov	r9,r12
  812234:	003edb06 	br	811da4 <_malloc_r+0x260>
  812238:	00805504 	movi	r2,340
  81223c:	11000836 	bltu	r2,r4,812260 <_malloc_r+0x71c>
  812240:	2804d3fa 	srli	r2,r5,15
  812244:	11001dc4 	addi	r4,r2,119
  812248:	200690fa 	slli	r3,r4,3
  81224c:	003f7306 	br	81201c <_malloc_r+0x4d8>
  812250:	0104303a 	nor	r2,zero,r4
  812254:	388e703a 	and	r7,r7,r2
  812258:	e1c00115 	stw	r7,4(fp)
  81225c:	003fe906 	br	812204 <_malloc_r+0x6c0>
  812260:	00815504 	movi	r2,1364
  812264:	1100032e 	bgeu	r2,r4,812274 <_malloc_r+0x730>
  812268:	01001f84 	movi	r4,126
  81226c:	00c0fc04 	movi	r3,1008
  812270:	003f6a06 	br	81201c <_malloc_r+0x4d8>
  812274:	2804d4ba 	srli	r2,r5,18
  812278:	11001f04 	addi	r4,r2,124
  81227c:	200690fa 	slli	r3,r4,3
  812280:	003f6606 	br	81201c <_malloc_r+0x4d8>

00812284 <memcpy>:
  812284:	01c003c4 	movi	r7,15
  812288:	2007883a 	mov	r3,r4
  81228c:	3980032e 	bgeu	r7,r6,81229c <memcpy+0x18>
  812290:	2904b03a 	or	r2,r5,r4
  812294:	108000cc 	andi	r2,r2,3
  812298:	10000926 	beq	r2,zero,8122c0 <memcpy+0x3c>
  81229c:	30000626 	beq	r6,zero,8122b8 <memcpy+0x34>
  8122a0:	30cd883a 	add	r6,r6,r3
  8122a4:	28800003 	ldbu	r2,0(r5)
  8122a8:	29400044 	addi	r5,r5,1
  8122ac:	18800005 	stb	r2,0(r3)
  8122b0:	18c00044 	addi	r3,r3,1
  8122b4:	30fffb1e 	bne	r6,r3,8122a4 <memcpy+0x20>
  8122b8:	2005883a 	mov	r2,r4
  8122bc:	f800283a 	ret
  8122c0:	3811883a 	mov	r8,r7
  8122c4:	200f883a 	mov	r7,r4
  8122c8:	28c00017 	ldw	r3,0(r5)
  8122cc:	31bffc04 	addi	r6,r6,-16
  8122d0:	38c00015 	stw	r3,0(r7)
  8122d4:	28800117 	ldw	r2,4(r5)
  8122d8:	38800115 	stw	r2,4(r7)
  8122dc:	28c00217 	ldw	r3,8(r5)
  8122e0:	38c00215 	stw	r3,8(r7)
  8122e4:	28800317 	ldw	r2,12(r5)
  8122e8:	29400404 	addi	r5,r5,16
  8122ec:	38800315 	stw	r2,12(r7)
  8122f0:	39c00404 	addi	r7,r7,16
  8122f4:	41bff436 	bltu	r8,r6,8122c8 <memcpy+0x44>
  8122f8:	008000c4 	movi	r2,3
  8122fc:	1180072e 	bgeu	r2,r6,81231c <memcpy+0x98>
  812300:	1007883a 	mov	r3,r2
  812304:	28800017 	ldw	r2,0(r5)
  812308:	31bfff04 	addi	r6,r6,-4
  81230c:	29400104 	addi	r5,r5,4
  812310:	38800015 	stw	r2,0(r7)
  812314:	39c00104 	addi	r7,r7,4
  812318:	19bffa36 	bltu	r3,r6,812304 <memcpy+0x80>
  81231c:	3807883a 	mov	r3,r7
  812320:	003fde06 	br	81229c <memcpy+0x18>

00812324 <_perror_r>:
  812324:	defffe04 	addi	sp,sp,-8
  812328:	dc000015 	stw	r16,0(sp)
  81232c:	dfc00115 	stw	ra,4(sp)
  812330:	2021883a 	mov	r16,r4
  812334:	28000326 	beq	r5,zero,812344 <_perror_r+0x20>
  812338:	28800007 	ldb	r2,0(r5)
  81233c:	2809883a 	mov	r4,r5
  812340:	10000c1e 	bne	r2,zero,812374 <_perror_r+0x50>
  812344:	81000017 	ldw	r4,0(r16)
  812348:	08125640 	call	812564 <strerror>
  81234c:	1009883a 	mov	r4,r2
  812350:	10000226 	beq	r2,zero,81235c <_perror_r+0x38>
  812354:	81400317 	ldw	r5,12(r16)
  812358:	0816aa40 	call	816aa4 <fputs>
  81235c:	81400317 	ldw	r5,12(r16)
  812360:	01000284 	movi	r4,10
  812364:	dfc00117 	ldw	ra,4(sp)
  812368:	dc000017 	ldw	r16,0(sp)
  81236c:	dec00204 	addi	sp,sp,8
  812370:	08169741 	jmpi	816974 <fputc>
  812374:	81400317 	ldw	r5,12(r16)
  812378:	0816aa40 	call	816aa4 <fputs>
  81237c:	81400317 	ldw	r5,12(r16)
  812380:	010020f4 	movhi	r4,131
  812384:	21201804 	addi	r4,r4,-32672
  812388:	0816aa40 	call	816aa4 <fputs>
  81238c:	003fed06 	br	812344 <_perror_r+0x20>

00812390 <perror>:
  812390:	008020f4 	movhi	r2,131
  812394:	10a99904 	addi	r2,r2,-22940
  812398:	200b883a 	mov	r5,r4
  81239c:	11000017 	ldw	r4,0(r2)
  8123a0:	08123241 	jmpi	812324 <_perror_r>

008123a4 <printf>:
  8123a4:	defffb04 	addi	sp,sp,-20
  8123a8:	dfc00115 	stw	ra,4(sp)
  8123ac:	d9400215 	stw	r5,8(sp)
  8123b0:	d9800315 	stw	r6,12(sp)
  8123b4:	d9c00415 	stw	r7,16(sp)
  8123b8:	008020f4 	movhi	r2,131
  8123bc:	10a99904 	addi	r2,r2,-22940
  8123c0:	10c00017 	ldw	r3,0(r2)
  8123c4:	200b883a 	mov	r5,r4
  8123c8:	d8800204 	addi	r2,sp,8
  8123cc:	19000217 	ldw	r4,8(r3)
  8123d0:	100d883a 	mov	r6,r2
  8123d4:	d8800015 	stw	r2,0(sp)
  8123d8:	0814b580 	call	814b58 <__vfprintf_internal>
  8123dc:	dfc00117 	ldw	ra,4(sp)
  8123e0:	dec00504 	addi	sp,sp,20
  8123e4:	f800283a 	ret

008123e8 <_printf_r>:
  8123e8:	defffc04 	addi	sp,sp,-16
  8123ec:	dfc00115 	stw	ra,4(sp)
  8123f0:	d9800215 	stw	r6,8(sp)
  8123f4:	d9c00315 	stw	r7,12(sp)
  8123f8:	280d883a 	mov	r6,r5
  8123fc:	21400217 	ldw	r5,8(r4)
  812400:	d8c00204 	addi	r3,sp,8
  812404:	180f883a 	mov	r7,r3
  812408:	d8c00015 	stw	r3,0(sp)
  81240c:	0812cac0 	call	812cac <___vfprintf_internal_r>
  812410:	dfc00117 	ldw	ra,4(sp)
  812414:	dec00404 	addi	sp,sp,16
  812418:	f800283a 	ret

0081241c <putchar>:
  81241c:	008020f4 	movhi	r2,131
  812420:	10a99904 	addi	r2,r2,-22940
  812424:	11800017 	ldw	r6,0(r2)
  812428:	200b883a 	mov	r5,r4
  81242c:	3009883a 	mov	r4,r6
  812430:	31800217 	ldw	r6,8(r6)
  812434:	0818ac81 	jmpi	818ac8 <_putc_r>

00812438 <_putchar_r>:
  812438:	21800217 	ldw	r6,8(r4)
  81243c:	0818ac81 	jmpi	818ac8 <_putc_r>

00812440 <_puts_r>:
  812440:	defff604 	addi	sp,sp,-40
  812444:	dc400715 	stw	r17,28(sp)
  812448:	2023883a 	mov	r17,r4
  81244c:	2809883a 	mov	r4,r5
  812450:	dfc00915 	stw	ra,36(sp)
  812454:	dcc00815 	stw	r19,32(sp)
  812458:	2827883a 	mov	r19,r5
  81245c:	0812bd80 	call	812bd8 <strlen>
  812460:	89400217 	ldw	r5,8(r17)
  812464:	00c020f4 	movhi	r3,131
  812468:	18e01904 	addi	r3,r3,-32668
  81246c:	01c00044 	movi	r7,1
  812470:	12000044 	addi	r8,r2,1
  812474:	d8c00515 	stw	r3,20(sp)
  812478:	d9c00615 	stw	r7,24(sp)
  81247c:	d8c00304 	addi	r3,sp,12
  812480:	01c00084 	movi	r7,2
  812484:	8809883a 	mov	r4,r17
  812488:	d80d883a 	mov	r6,sp
  81248c:	d8c00015 	stw	r3,0(sp)
  812490:	dcc00315 	stw	r19,12(sp)
  812494:	da000215 	stw	r8,8(sp)
  812498:	d9c00115 	stw	r7,4(sp)
  81249c:	d8800415 	stw	r2,16(sp)
  8124a0:	0816f000 	call	816f00 <__sfvwrite_r>
  8124a4:	00ffffc4 	movi	r3,-1
  8124a8:	10000626 	beq	r2,zero,8124c4 <_puts_r+0x84>
  8124ac:	1805883a 	mov	r2,r3
  8124b0:	dfc00917 	ldw	ra,36(sp)
  8124b4:	dcc00817 	ldw	r19,32(sp)
  8124b8:	dc400717 	ldw	r17,28(sp)
  8124bc:	dec00a04 	addi	sp,sp,40
  8124c0:	f800283a 	ret
  8124c4:	00c00284 	movi	r3,10
  8124c8:	1805883a 	mov	r2,r3
  8124cc:	dfc00917 	ldw	ra,36(sp)
  8124d0:	dcc00817 	ldw	r19,32(sp)
  8124d4:	dc400717 	ldw	r17,28(sp)
  8124d8:	dec00a04 	addi	sp,sp,40
  8124dc:	f800283a 	ret

008124e0 <puts>:
  8124e0:	008020f4 	movhi	r2,131
  8124e4:	10a99904 	addi	r2,r2,-22940
  8124e8:	200b883a 	mov	r5,r4
  8124ec:	11000017 	ldw	r4,0(r2)
  8124f0:	08124401 	jmpi	812440 <_puts_r>

008124f4 <_sbrk_r>:
  8124f4:	defffd04 	addi	sp,sp,-12
  8124f8:	dc000015 	stw	r16,0(sp)
  8124fc:	040020f4 	movhi	r16,131
  812500:	8429d104 	addi	r16,r16,-22716
  812504:	dc400115 	stw	r17,4(sp)
  812508:	80000015 	stw	zero,0(r16)
  81250c:	2023883a 	mov	r17,r4
  812510:	2809883a 	mov	r4,r5
  812514:	dfc00215 	stw	ra,8(sp)
  812518:	081b1e00 	call	81b1e0 <sbrk>
  81251c:	1007883a 	mov	r3,r2
  812520:	00bfffc4 	movi	r2,-1
  812524:	18800626 	beq	r3,r2,812540 <_sbrk_r+0x4c>
  812528:	1805883a 	mov	r2,r3
  81252c:	dfc00217 	ldw	ra,8(sp)
  812530:	dc400117 	ldw	r17,4(sp)
  812534:	dc000017 	ldw	r16,0(sp)
  812538:	dec00304 	addi	sp,sp,12
  81253c:	f800283a 	ret
  812540:	80800017 	ldw	r2,0(r16)
  812544:	103ff826 	beq	r2,zero,812528 <_sbrk_r+0x34>
  812548:	88800015 	stw	r2,0(r17)
  81254c:	1805883a 	mov	r2,r3
  812550:	dfc00217 	ldw	ra,8(sp)
  812554:	dc400117 	ldw	r17,4(sp)
  812558:	dc000017 	ldw	r16,0(sp)
  81255c:	dec00304 	addi	sp,sp,12
  812560:	f800283a 	ret

00812564 <strerror>:
  812564:	deffff04 	addi	sp,sp,-4
  812568:	00802184 	movi	r2,134
  81256c:	dfc00015 	stw	ra,0(sp)
  812570:	200b883a 	mov	r5,r4
  812574:	11008e36 	bltu	r2,r4,8127b0 <strerror+0x24c>
  812578:	2105883a 	add	r2,r4,r4
  81257c:	1085883a 	add	r2,r2,r2
  812580:	00c02074 	movhi	r3,129
  812584:	18c96504 	addi	r3,r3,9620
  812588:	10c5883a 	add	r2,r2,r3
  81258c:	11000017 	ldw	r4,0(r2)
  812590:	2000683a 	jmp	r4
  812594:	008127b0 	cmpltui	r2,zero,1182
  812598:	008127e8 	cmpgeui	r2,zero,1183
  81259c:	008127f4 	movhi	r2,1183
  8125a0:	00812800 	call	81280 <OSCtxSw_SWITCH_PC+0x81240>
  8125a4:	0081280c 	andi	r2,zero,1184
  8125a8:	00812818 	cmpnei	r2,zero,1184
  8125ac:	00812824 	muli	r2,zero,1184
  8125b0:	00812830 	cmpltui	r2,zero,1184
  8125b4:	0081283c 	xorhi	r2,zero,1184
  8125b8:	00812848 	cmpgei	r2,zero,1185
  8125bc:	00812854 	movui	r2,1185
  8125c0:	00812860 	cmpeqi	r2,zero,1185
  8125c4:	0081286c 	andhi	r2,zero,1185
  8125c8:	00812878 	rdprs	r2,zero,1185
  8125cc:	00812884 	movi	r2,1186
  8125d0:	00812890 	cmplti	r2,zero,1186
  8125d4:	0081289c 	xori	r2,zero,1186
  8125d8:	008128a8 	cmpgeui	r2,zero,1186
  8125dc:	008128b4 	movhi	r2,1186
  8125e0:	008128c0 	call	8128c <OSCtxSw_SWITCH_PC+0x8124c>
  8125e4:	008128cc 	andi	r2,zero,1187
  8125e8:	008128d8 	cmpnei	r2,zero,1187
  8125ec:	008128e4 	muli	r2,zero,1187
  8125f0:	008128f0 	cmpltui	r2,zero,1187
  8125f4:	008128fc 	xorhi	r2,zero,1187
  8125f8:	00812908 	cmpgei	r2,zero,1188
  8125fc:	00812914 	movui	r2,1188
  812600:	00812920 	cmpeqi	r2,zero,1188
  812604:	0081292c 	andhi	r2,zero,1188
  812608:	00812938 	rdprs	r2,zero,1188
  81260c:	00812944 	movi	r2,1189
  812610:	00812950 	cmplti	r2,zero,1189
  812614:	0081295c 	xori	r2,zero,1189
  812618:	00812968 	cmpgeui	r2,zero,1189
  81261c:	00812974 	movhi	r2,1189
  812620:	00812980 	call	81298 <OSCtxSw_SWITCH_PC+0x81258>
  812624:	0081298c 	andi	r2,zero,1190
  812628:	008127b0 	cmpltui	r2,zero,1182
  81262c:	008127b0 	cmpltui	r2,zero,1182
  812630:	008127b0 	cmpltui	r2,zero,1182
  812634:	008127b0 	cmpltui	r2,zero,1182
  812638:	008127b0 	cmpltui	r2,zero,1182
  81263c:	008127b0 	cmpltui	r2,zero,1182
  812640:	008127b0 	cmpltui	r2,zero,1182
  812644:	008127b0 	cmpltui	r2,zero,1182
  812648:	00812998 	cmpnei	r2,zero,1190
  81264c:	008129a4 	muli	r2,zero,1190
  812650:	008127b0 	cmpltui	r2,zero,1182
  812654:	008127b0 	cmpltui	r2,zero,1182
  812658:	008127b0 	cmpltui	r2,zero,1182
  81265c:	008127b0 	cmpltui	r2,zero,1182
  812660:	008127b0 	cmpltui	r2,zero,1182
  812664:	008127b0 	cmpltui	r2,zero,1182
  812668:	008127b0 	cmpltui	r2,zero,1182
  81266c:	008127b0 	cmpltui	r2,zero,1182
  812670:	008127b0 	cmpltui	r2,zero,1182
  812674:	008127b0 	cmpltui	r2,zero,1182
  812678:	008127b0 	cmpltui	r2,zero,1182
  81267c:	008127b0 	cmpltui	r2,zero,1182
  812680:	008127b0 	cmpltui	r2,zero,1182
  812684:	008129b0 	cmpltui	r2,zero,1190
  812688:	008127b0 	cmpltui	r2,zero,1182
  81268c:	008129bc 	xorhi	r2,zero,1190
  812690:	008129c8 	cmpgei	r2,zero,1191
  812694:	008129d4 	movui	r2,1191
  812698:	008129e0 	cmpeqi	r2,zero,1191
  81269c:	008129ec 	andhi	r2,zero,1191
  8126a0:	008129f8 	rdprs	r2,zero,1191
  8126a4:	00812a04 	movi	r2,1192
  8126a8:	00812a10 	cmplti	r2,zero,1192
  8126ac:	00812a1c 	xori	r2,zero,1192
  8126b0:	00812a28 	cmpgeui	r2,zero,1192
  8126b4:	008127b0 	cmpltui	r2,zero,1182
  8126b8:	008127b0 	cmpltui	r2,zero,1182
  8126bc:	00812a34 	movhi	r2,1192
  8126c0:	008127b0 	cmpltui	r2,zero,1182
  8126c4:	008127b0 	cmpltui	r2,zero,1182
  8126c8:	00812a40 	call	812a4 <OSCtxSw_SWITCH_PC+0x81264>
  8126cc:	008127b0 	cmpltui	r2,zero,1182
  8126d0:	008127b0 	cmpltui	r2,zero,1182
  8126d4:	008127b0 	cmpltui	r2,zero,1182
  8126d8:	008127b0 	cmpltui	r2,zero,1182
  8126dc:	008127b0 	cmpltui	r2,zero,1182
  8126e0:	00812a4c 	andi	r2,zero,1193
  8126e4:	00812a58 	cmpnei	r2,zero,1193
  8126e8:	00812a64 	muli	r2,zero,1193
  8126ec:	00812a70 	cmpltui	r2,zero,1193
  8126f0:	00812a7c 	xorhi	r2,zero,1193
  8126f4:	00812a88 	cmpgei	r2,zero,1194
  8126f8:	00812a94 	movui	r2,1194
  8126fc:	00812aa0 	cmpeqi	r2,zero,1194
  812700:	00812aac 	andhi	r2,zero,1194
  812704:	00812ab8 	rdprs	r2,zero,1194
  812708:	008127b0 	cmpltui	r2,zero,1182
  81270c:	008127b0 	cmpltui	r2,zero,1182
  812710:	00812ac4 	movi	r2,1195
  812714:	008127b0 	cmpltui	r2,zero,1182
  812718:	008127b0 	cmpltui	r2,zero,1182
  81271c:	008127b0 	cmpltui	r2,zero,1182
  812720:	008127b0 	cmpltui	r2,zero,1182
  812724:	008127b0 	cmpltui	r2,zero,1182
  812728:	008127b0 	cmpltui	r2,zero,1182
  81272c:	008127b0 	cmpltui	r2,zero,1182
  812730:	008127b0 	cmpltui	r2,zero,1182
  812734:	008127b0 	cmpltui	r2,zero,1182
  812738:	00812ad0 	cmplti	r2,zero,1195
  81273c:	00812adc 	xori	r2,zero,1195
  812740:	00812ae8 	cmpgeui	r2,zero,1195
  812744:	00812af4 	movhi	r2,1195
  812748:	00812b00 	call	812b0 <OSCtxSw_SWITCH_PC+0x81270>
  81274c:	00812b0c 	andi	r2,zero,1196
  812750:	00812b18 	cmpnei	r2,zero,1196
  812754:	00812b24 	muli	r2,zero,1196
  812758:	00812b30 	cmpltui	r2,zero,1196
  81275c:	00812b3c 	xorhi	r2,zero,1196
  812760:	00812b48 	cmpgei	r2,zero,1197
  812764:	00812b54 	movui	r2,1197
  812768:	00812b60 	cmpeqi	r2,zero,1197
  81276c:	00812b6c 	andhi	r2,zero,1197
  812770:	00812b78 	rdprs	r2,zero,1197
  812774:	00812b84 	movi	r2,1198
  812778:	00812b90 	cmplti	r2,zero,1198
  81277c:	00812b9c 	xori	r2,zero,1198
  812780:	00812ba8 	cmpgeui	r2,zero,1198
  812784:	00812bb4 	movhi	r2,1198
  812788:	008127b0 	cmpltui	r2,zero,1182
  81278c:	008127b0 	cmpltui	r2,zero,1182
  812790:	00812bc0 	call	812bc <OSCtxSw_SWITCH_PC+0x8127c>
  812794:	00812bcc 	andi	r2,zero,1199
  812798:	008127b0 	cmpltui	r2,zero,1182
  81279c:	008127b0 	cmpltui	r2,zero,1182
  8127a0:	008127b0 	cmpltui	r2,zero,1182
  8127a4:	008127b0 	cmpltui	r2,zero,1182
  8127a8:	008127b0 	cmpltui	r2,zero,1182
  8127ac:	008127dc 	xori	r2,zero,1183
  8127b0:	2809883a 	mov	r4,r5
  8127b4:	0812c4c0 	call	812c4c <_user_strerror>
  8127b8:	10000326 	beq	r2,zero,8127c8 <strerror+0x264>
  8127bc:	dfc00017 	ldw	ra,0(sp)
  8127c0:	dec00104 	addi	sp,sp,4
  8127c4:	f800283a 	ret
  8127c8:	008020f4 	movhi	r2,131
  8127cc:	10a21204 	addi	r2,r2,-30648
  8127d0:	dfc00017 	ldw	ra,0(sp)
  8127d4:	dec00104 	addi	sp,sp,4
  8127d8:	f800283a 	ret
  8127dc:	008020f4 	movhi	r2,131
  8127e0:	10a0d504 	addi	r2,r2,-31916
  8127e4:	003ff506 	br	8127bc <strerror+0x258>
  8127e8:	008020f4 	movhi	r2,131
  8127ec:	10a02504 	addi	r2,r2,-32620
  8127f0:	003ff206 	br	8127bc <strerror+0x258>
  8127f4:	008020f4 	movhi	r2,131
  8127f8:	10a02804 	addi	r2,r2,-32608
  8127fc:	003fef06 	br	8127bc <strerror+0x258>
  812800:	008020f4 	movhi	r2,131
  812804:	10a02f04 	addi	r2,r2,-32580
  812808:	003fec06 	br	8127bc <strerror+0x258>
  81280c:	008020f4 	movhi	r2,131
  812810:	10a03304 	addi	r2,r2,-32564
  812814:	003fe906 	br	8127bc <strerror+0x258>
  812818:	008020f4 	movhi	r2,131
  81281c:	10a03904 	addi	r2,r2,-32540
  812820:	003fe606 	br	8127bc <strerror+0x258>
  812824:	008020f4 	movhi	r2,131
  812828:	10a03c04 	addi	r2,r2,-32528
  81282c:	003fe306 	br	8127bc <strerror+0x258>
  812830:	008020f4 	movhi	r2,131
  812834:	10a04304 	addi	r2,r2,-32500
  812838:	003fe006 	br	8127bc <strerror+0x258>
  81283c:	008020f4 	movhi	r2,131
  812840:	10a04804 	addi	r2,r2,-32480
  812844:	003fdd06 	br	8127bc <strerror+0x258>
  812848:	008020f4 	movhi	r2,131
  81284c:	10a05404 	addi	r2,r2,-32432
  812850:	003fda06 	br	8127bc <strerror+0x258>
  812854:	008020f4 	movhi	r2,131
  812858:	10a05804 	addi	r2,r2,-32416
  81285c:	003fd706 	br	8127bc <strerror+0x258>
  812860:	008020f4 	movhi	r2,131
  812864:	10a06304 	addi	r2,r2,-32372
  812868:	003fd406 	br	8127bc <strerror+0x258>
  81286c:	008020f4 	movhi	r2,131
  812870:	10a06804 	addi	r2,r2,-32352
  812874:	003fd106 	br	8127bc <strerror+0x258>
  812878:	008020f4 	movhi	r2,131
  81287c:	10a06d04 	addi	r2,r2,-32332
  812880:	003fce06 	br	8127bc <strerror+0x258>
  812884:	008020f4 	movhi	r2,131
  812888:	10a07204 	addi	r2,r2,-32312
  81288c:	003fcb06 	br	8127bc <strerror+0x258>
  812890:	008020f4 	movhi	r2,131
  812894:	10a07504 	addi	r2,r2,-32300
  812898:	003fc806 	br	8127bc <strerror+0x258>
  81289c:	008020f4 	movhi	r2,131
  8128a0:	10a07b04 	addi	r2,r2,-32276
  8128a4:	003fc506 	br	8127bc <strerror+0x258>
  8128a8:	008020f4 	movhi	r2,131
  8128ac:	10a08104 	addi	r2,r2,-32252
  8128b0:	003fc206 	br	8127bc <strerror+0x258>
  8128b4:	008020f4 	movhi	r2,131
  8128b8:	10a08404 	addi	r2,r2,-32240
  8128bc:	003fbf06 	br	8127bc <strerror+0x258>
  8128c0:	008020f4 	movhi	r2,131
  8128c4:	10a08904 	addi	r2,r2,-32220
  8128c8:	003fbc06 	br	8127bc <strerror+0x258>
  8128cc:	008020f4 	movhi	r2,131
  8128d0:	10a08d04 	addi	r2,r2,-32204
  8128d4:	003fb906 	br	8127bc <strerror+0x258>
  8128d8:	008020f4 	movhi	r2,131
  8128dc:	10a09d04 	addi	r2,r2,-32140
  8128e0:	003fb606 	br	8127bc <strerror+0x258>
  8128e4:	008020f4 	movhi	r2,131
  8128e8:	10a0a104 	addi	r2,r2,-32124
  8128ec:	003fb306 	br	8127bc <strerror+0x258>
  8128f0:	008020f4 	movhi	r2,131
  8128f4:	10a0af04 	addi	r2,r2,-32068
  8128f8:	003fb006 	br	8127bc <strerror+0x258>
  8128fc:	008020f4 	movhi	r2,131
  812900:	10a0b704 	addi	r2,r2,-32036
  812904:	003fad06 	br	8127bc <strerror+0x258>
  812908:	008020f4 	movhi	r2,131
  81290c:	10a0bc04 	addi	r2,r2,-32016
  812910:	003faa06 	br	8127bc <strerror+0x258>
  812914:	008020f4 	movhi	r2,131
  812918:	10a0c204 	addi	r2,r2,-31992
  81291c:	003fa706 	br	8127bc <strerror+0x258>
  812920:	008020f4 	movhi	r2,131
  812924:	10a0c604 	addi	r2,r2,-31976
  812928:	003fa406 	br	8127bc <strerror+0x258>
  81292c:	008020f4 	movhi	r2,131
  812930:	10a0cf04 	addi	r2,r2,-31940
  812934:	003fa106 	br	8127bc <strerror+0x258>
  812938:	008020f4 	movhi	r2,131
  81293c:	10a0d904 	addi	r2,r2,-31900
  812940:	003f9e06 	br	8127bc <strerror+0x258>
  812944:	008020f4 	movhi	r2,131
  812948:	10a0dd04 	addi	r2,r2,-31884
  81294c:	003f9b06 	br	8127bc <strerror+0x258>
  812950:	008020f4 	movhi	r2,131
  812954:	10a0e304 	addi	r2,r2,-31860
  812958:	003f9806 	br	8127bc <strerror+0x258>
  81295c:	008020f4 	movhi	r2,131
  812960:	10a0e704 	addi	r2,r2,-31844
  812964:	003f9506 	br	8127bc <strerror+0x258>
  812968:	008020f4 	movhi	r2,131
  81296c:	10a0ea04 	addi	r2,r2,-31832
  812970:	003f9206 	br	8127bc <strerror+0x258>
  812974:	008020f4 	movhi	r2,131
  812978:	10a0ee04 	addi	r2,r2,-31816
  81297c:	003f8f06 	br	8127bc <strerror+0x258>
  812980:	008020f4 	movhi	r2,131
  812984:	10a0f304 	addi	r2,r2,-31796
  812988:	003f8c06 	br	8127bc <strerror+0x258>
  81298c:	008020f4 	movhi	r2,131
  812990:	10a0fa04 	addi	r2,r2,-31768
  812994:	003f8906 	br	8127bc <strerror+0x258>
  812998:	008020f4 	movhi	r2,131
  81299c:	10a0ff04 	addi	r2,r2,-31748
  8129a0:	003f8606 	br	8127bc <strerror+0x258>
  8129a4:	008020f4 	movhi	r2,131
  8129a8:	10a10804 	addi	r2,r2,-31712
  8129ac:	003f8306 	br	8127bc <strerror+0x258>
  8129b0:	008020f4 	movhi	r2,131
  8129b4:	10a10a04 	addi	r2,r2,-31704
  8129b8:	003f8006 	br	8127bc <strerror+0x258>
  8129bc:	008020f4 	movhi	r2,131
  8129c0:	10a10e04 	addi	r2,r2,-31688
  8129c4:	003f7d06 	br	8127bc <strerror+0x258>
  8129c8:	008020f4 	movhi	r2,131
  8129cc:	10a11404 	addi	r2,r2,-31664
  8129d0:	003f7a06 	br	8127bc <strerror+0x258>
  8129d4:	008020f4 	movhi	r2,131
  8129d8:	10a11904 	addi	r2,r2,-31644
  8129dc:	003f7706 	br	8127bc <strerror+0x258>
  8129e0:	008020f4 	movhi	r2,131
  8129e4:	10a12104 	addi	r2,r2,-31612
  8129e8:	003f7406 	br	8127bc <strerror+0x258>
  8129ec:	008020f4 	movhi	r2,131
  8129f0:	10a12404 	addi	r2,r2,-31600
  8129f4:	003f7106 	br	8127bc <strerror+0x258>
  8129f8:	008020f4 	movhi	r2,131
  8129fc:	10a12904 	addi	r2,r2,-31580
  812a00:	003f6e06 	br	8127bc <strerror+0x258>
  812a04:	008020f4 	movhi	r2,131
  812a08:	10a12f04 	addi	r2,r2,-31556
  812a0c:	003f6b06 	br	8127bc <strerror+0x258>
  812a10:	008020f4 	movhi	r2,131
  812a14:	10a13304 	addi	r2,r2,-31540
  812a18:	003f6806 	br	8127bc <strerror+0x258>
  812a1c:	008020f4 	movhi	r2,131
  812a20:	10a13704 	addi	r2,r2,-31524
  812a24:	003f6506 	br	8127bc <strerror+0x258>
  812a28:	008020f4 	movhi	r2,131
  812a2c:	10a13c04 	addi	r2,r2,-31504
  812a30:	003f6206 	br	8127bc <strerror+0x258>
  812a34:	008020f4 	movhi	r2,131
  812a38:	10a14504 	addi	r2,r2,-31468
  812a3c:	003f5f06 	br	8127bc <strerror+0x258>
  812a40:	008020f4 	movhi	r2,131
  812a44:	10a14a04 	addi	r2,r2,-31448
  812a48:	003f5c06 	br	8127bc <strerror+0x258>
  812a4c:	008020f4 	movhi	r2,131
  812a50:	10a14d04 	addi	r2,r2,-31436
  812a54:	003f5906 	br	8127bc <strerror+0x258>
  812a58:	008020f4 	movhi	r2,131
  812a5c:	10a15704 	addi	r2,r2,-31396
  812a60:	003f5606 	br	8127bc <strerror+0x258>
  812a64:	008020f4 	movhi	r2,131
  812a68:	10a16104 	addi	r2,r2,-31356
  812a6c:	003f5306 	br	8127bc <strerror+0x258>
  812a70:	008020f4 	movhi	r2,131
  812a74:	10a16904 	addi	r2,r2,-31324
  812a78:	003f5006 	br	8127bc <strerror+0x258>
  812a7c:	008020f4 	movhi	r2,131
  812a80:	10a17904 	addi	r2,r2,-31260
  812a84:	003f4d06 	br	8127bc <strerror+0x258>
  812a88:	008020f4 	movhi	r2,131
  812a8c:	10a18304 	addi	r2,r2,-31220
  812a90:	003f4a06 	br	8127bc <strerror+0x258>
  812a94:	008020f4 	movhi	r2,131
  812a98:	10a18a04 	addi	r2,r2,-31192
  812a9c:	003f4706 	br	8127bc <strerror+0x258>
  812aa0:	008020f4 	movhi	r2,131
  812aa4:	10a18e04 	addi	r2,r2,-31176
  812aa8:	003f4406 	br	8127bc <strerror+0x258>
  812aac:	008020f4 	movhi	r2,131
  812ab0:	10a19304 	addi	r2,r2,-31156
  812ab4:	003f4106 	br	8127bc <strerror+0x258>
  812ab8:	008020f4 	movhi	r2,131
  812abc:	10a19a04 	addi	r2,r2,-31128
  812ac0:	003f3e06 	br	8127bc <strerror+0x258>
  812ac4:	008020f4 	movhi	r2,131
  812ac8:	10a1fa04 	addi	r2,r2,-30744
  812acc:	003f3b06 	br	8127bc <strerror+0x258>
  812ad0:	008020f4 	movhi	r2,131
  812ad4:	10a1a004 	addi	r2,r2,-31104
  812ad8:	003f3806 	br	8127bc <strerror+0x258>
  812adc:	008020f4 	movhi	r2,131
  812ae0:	10a1a704 	addi	r2,r2,-31076
  812ae4:	003f3506 	br	8127bc <strerror+0x258>
  812ae8:	008020f4 	movhi	r2,131
  812aec:	10a1b304 	addi	r2,r2,-31028
  812af0:	003f3206 	br	8127bc <strerror+0x258>
  812af4:	008020f4 	movhi	r2,131
  812af8:	10a1bb04 	addi	r2,r2,-30996
  812afc:	003f2f06 	br	8127bc <strerror+0x258>
  812b00:	008020f4 	movhi	r2,131
  812b04:	10a1c304 	addi	r2,r2,-30964
  812b08:	003f2c06 	br	8127bc <strerror+0x258>
  812b0c:	008020f4 	movhi	r2,131
  812b10:	10a1c904 	addi	r2,r2,-30940
  812b14:	003f2906 	br	8127bc <strerror+0x258>
  812b18:	008020f4 	movhi	r2,131
  812b1c:	10a1d204 	addi	r2,r2,-30904
  812b20:	003f2606 	br	8127bc <strerror+0x258>
  812b24:	008020f4 	movhi	r2,131
  812b28:	10a1d704 	addi	r2,r2,-30884
  812b2c:	003f2306 	br	8127bc <strerror+0x258>
  812b30:	008020f4 	movhi	r2,131
  812b34:	10a1dd04 	addi	r2,r2,-30860
  812b38:	003f2006 	br	8127bc <strerror+0x258>
  812b3c:	008020f4 	movhi	r2,131
  812b40:	10a10204 	addi	r2,r2,-31736
  812b44:	003f1d06 	br	8127bc <strerror+0x258>
  812b48:	008020f4 	movhi	r2,131
  812b4c:	10a0a604 	addi	r2,r2,-32104
  812b50:	003f1a06 	br	8127bc <strerror+0x258>
  812b54:	008020f4 	movhi	r2,131
  812b58:	10a01f04 	addi	r2,r2,-32644
  812b5c:	003f1706 	br	8127bc <strerror+0x258>
  812b60:	008020f4 	movhi	r2,131
  812b64:	10a09104 	addi	r2,r2,-32188
  812b68:	003f1406 	br	8127bc <strerror+0x258>
  812b6c:	008020f4 	movhi	r2,131
  812b70:	10a0ca04 	addi	r2,r2,-31960
  812b74:	003f1106 	br	8127bc <strerror+0x258>
  812b78:	008020f4 	movhi	r2,131
  812b7c:	10a09504 	addi	r2,r2,-32172
  812b80:	003f0e06 	br	8127bc <strerror+0x258>
  812b84:	008020f4 	movhi	r2,131
  812b88:	10a04d04 	addi	r2,r2,-32460
  812b8c:	003f0b06 	br	8127bc <strerror+0x258>
  812b90:	008020f4 	movhi	r2,131
  812b94:	10a05b04 	addi	r2,r2,-32404
  812b98:	003f0806 	br	8127bc <strerror+0x258>
  812b9c:	008020f4 	movhi	r2,131
  812ba0:	10a01a04 	addi	r2,r2,-32664
  812ba4:	003f0506 	br	8127bc <strerror+0x258>
  812ba8:	008020f4 	movhi	r2,131
  812bac:	10a14004 	addi	r2,r2,-31488
  812bb0:	003f0206 	br	8127bc <strerror+0x258>
  812bb4:	008020f4 	movhi	r2,131
  812bb8:	10a1ec04 	addi	r2,r2,-30800
  812bbc:	003eff06 	br	8127bc <strerror+0x258>
  812bc0:	008020f4 	movhi	r2,131
  812bc4:	10a1f304 	addi	r2,r2,-30772
  812bc8:	003efc06 	br	8127bc <strerror+0x258>
  812bcc:	008020f4 	movhi	r2,131
  812bd0:	10a1e604 	addi	r2,r2,-30824
  812bd4:	003ef906 	br	8127bc <strerror+0x258>

00812bd8 <strlen>:
  812bd8:	208000cc 	andi	r2,r4,3
  812bdc:	2011883a 	mov	r8,r4
  812be0:	1000161e 	bne	r2,zero,812c3c <strlen+0x64>
  812be4:	20c00017 	ldw	r3,0(r4)
  812be8:	017fbff4 	movhi	r5,65279
  812bec:	297fbfc4 	addi	r5,r5,-257
  812bf0:	01e02074 	movhi	r7,32897
  812bf4:	39e02004 	addi	r7,r7,-32640
  812bf8:	1945883a 	add	r2,r3,r5
  812bfc:	11c4703a 	and	r2,r2,r7
  812c00:	00c6303a 	nor	r3,zero,r3
  812c04:	1886703a 	and	r3,r3,r2
  812c08:	18000c1e 	bne	r3,zero,812c3c <strlen+0x64>
  812c0c:	280d883a 	mov	r6,r5
  812c10:	380b883a 	mov	r5,r7
  812c14:	21000104 	addi	r4,r4,4
  812c18:	20800017 	ldw	r2,0(r4)
  812c1c:	1187883a 	add	r3,r2,r6
  812c20:	1946703a 	and	r3,r3,r5
  812c24:	0084303a 	nor	r2,zero,r2
  812c28:	10c4703a 	and	r2,r2,r3
  812c2c:	103ff926 	beq	r2,zero,812c14 <strlen+0x3c>
  812c30:	20800007 	ldb	r2,0(r4)
  812c34:	10000326 	beq	r2,zero,812c44 <strlen+0x6c>
  812c38:	21000044 	addi	r4,r4,1
  812c3c:	20800007 	ldb	r2,0(r4)
  812c40:	103ffd1e 	bne	r2,zero,812c38 <strlen+0x60>
  812c44:	2205c83a 	sub	r2,r4,r8
  812c48:	f800283a 	ret

00812c4c <_user_strerror>:
  812c4c:	0005883a 	mov	r2,zero
  812c50:	f800283a 	ret

00812c54 <__sprint_r>:
  812c54:	30800217 	ldw	r2,8(r6)
  812c58:	defffe04 	addi	sp,sp,-8
  812c5c:	dc000015 	stw	r16,0(sp)
  812c60:	dfc00115 	stw	ra,4(sp)
  812c64:	3021883a 	mov	r16,r6
  812c68:	0007883a 	mov	r3,zero
  812c6c:	1000061e 	bne	r2,zero,812c88 <__sprint_r+0x34>
  812c70:	1805883a 	mov	r2,r3
  812c74:	30000115 	stw	zero,4(r6)
  812c78:	dfc00117 	ldw	ra,4(sp)
  812c7c:	dc000017 	ldw	r16,0(sp)
  812c80:	dec00204 	addi	sp,sp,8
  812c84:	f800283a 	ret
  812c88:	0816f000 	call	816f00 <__sfvwrite_r>
  812c8c:	1007883a 	mov	r3,r2
  812c90:	1805883a 	mov	r2,r3
  812c94:	80000115 	stw	zero,4(r16)
  812c98:	80000215 	stw	zero,8(r16)
  812c9c:	dfc00117 	ldw	ra,4(sp)
  812ca0:	dc000017 	ldw	r16,0(sp)
  812ca4:	dec00204 	addi	sp,sp,8
  812ca8:	f800283a 	ret

00812cac <___vfprintf_internal_r>:
  812cac:	defea404 	addi	sp,sp,-1392
  812cb0:	dd815815 	stw	r22,1376(sp)
  812cb4:	dc015215 	stw	r16,1352(sp)
  812cb8:	d9c15115 	stw	r7,1348(sp)
  812cbc:	dfc15b15 	stw	ra,1388(sp)
  812cc0:	df015a15 	stw	fp,1384(sp)
  812cc4:	ddc15915 	stw	r23,1380(sp)
  812cc8:	dd415715 	stw	r21,1372(sp)
  812ccc:	dd015615 	stw	r20,1368(sp)
  812cd0:	dcc15515 	stw	r19,1364(sp)
  812cd4:	dc815415 	stw	r18,1360(sp)
  812cd8:	dc415315 	stw	r17,1356(sp)
  812cdc:	282d883a 	mov	r22,r5
  812ce0:	3021883a 	mov	r16,r6
  812ce4:	d9014f15 	stw	r4,1340(sp)
  812ce8:	08175240 	call	817524 <_localeconv_r>
  812cec:	10800017 	ldw	r2,0(r2)
  812cf0:	d9c15117 	ldw	r7,1348(sp)
  812cf4:	d8814915 	stw	r2,1316(sp)
  812cf8:	d8814f17 	ldw	r2,1340(sp)
  812cfc:	10000226 	beq	r2,zero,812d08 <___vfprintf_internal_r+0x5c>
  812d00:	10800e17 	ldw	r2,56(r2)
  812d04:	10020d26 	beq	r2,zero,81353c <___vfprintf_internal_r+0x890>
  812d08:	b080030b 	ldhu	r2,12(r22)
  812d0c:	1080020c 	andi	r2,r2,8
  812d10:	10020e26 	beq	r2,zero,81354c <___vfprintf_internal_r+0x8a0>
  812d14:	b0800417 	ldw	r2,16(r22)
  812d18:	10020c26 	beq	r2,zero,81354c <___vfprintf_internal_r+0x8a0>
  812d1c:	b200030b 	ldhu	r8,12(r22)
  812d20:	00800284 	movi	r2,10
  812d24:	40c0068c 	andi	r3,r8,26
  812d28:	18802f1e 	bne	r3,r2,812de8 <___vfprintf_internal_r+0x13c>
  812d2c:	b080038f 	ldh	r2,14(r22)
  812d30:	10002d16 	blt	r2,zero,812de8 <___vfprintf_internal_r+0x13c>
  812d34:	b240038b 	ldhu	r9,14(r22)
  812d38:	b2800717 	ldw	r10,28(r22)
  812d3c:	b2c00917 	ldw	r11,36(r22)
  812d40:	d9014f17 	ldw	r4,1340(sp)
  812d44:	dc402904 	addi	r17,sp,164
  812d48:	d8804004 	addi	r2,sp,256
  812d4c:	00c10004 	movi	r3,1024
  812d50:	423fff4c 	andi	r8,r8,65533
  812d54:	800d883a 	mov	r6,r16
  812d58:	880b883a 	mov	r5,r17
  812d5c:	da002c0d 	sth	r8,176(sp)
  812d60:	da402c8d 	sth	r9,178(sp)
  812d64:	da803015 	stw	r10,192(sp)
  812d68:	dac03215 	stw	r11,200(sp)
  812d6c:	d8802d15 	stw	r2,180(sp)
  812d70:	d8c02e15 	stw	r3,184(sp)
  812d74:	d8802915 	stw	r2,164(sp)
  812d78:	d8c02b15 	stw	r3,172(sp)
  812d7c:	d8002f15 	stw	zero,188(sp)
  812d80:	0812cac0 	call	812cac <___vfprintf_internal_r>
  812d84:	d8814b15 	stw	r2,1324(sp)
  812d88:	10000416 	blt	r2,zero,812d9c <___vfprintf_internal_r+0xf0>
  812d8c:	d9014f17 	ldw	r4,1340(sp)
  812d90:	880b883a 	mov	r5,r17
  812d94:	08164840 	call	816484 <_fflush_r>
  812d98:	1002321e 	bne	r2,zero,813664 <___vfprintf_internal_r+0x9b8>
  812d9c:	d8802c0b 	ldhu	r2,176(sp)
  812da0:	1080100c 	andi	r2,r2,64
  812da4:	10000326 	beq	r2,zero,812db4 <___vfprintf_internal_r+0x108>
  812da8:	b080030b 	ldhu	r2,12(r22)
  812dac:	10801014 	ori	r2,r2,64
  812db0:	b080030d 	sth	r2,12(r22)
  812db4:	d8814b17 	ldw	r2,1324(sp)
  812db8:	dfc15b17 	ldw	ra,1388(sp)
  812dbc:	df015a17 	ldw	fp,1384(sp)
  812dc0:	ddc15917 	ldw	r23,1380(sp)
  812dc4:	dd815817 	ldw	r22,1376(sp)
  812dc8:	dd415717 	ldw	r21,1372(sp)
  812dcc:	dd015617 	ldw	r20,1368(sp)
  812dd0:	dcc15517 	ldw	r19,1364(sp)
  812dd4:	dc815417 	ldw	r18,1360(sp)
  812dd8:	dc415317 	ldw	r17,1356(sp)
  812ddc:	dc015217 	ldw	r16,1352(sp)
  812de0:	dec15c04 	addi	sp,sp,1392
  812de4:	f800283a 	ret
  812de8:	0005883a 	mov	r2,zero
  812dec:	0007883a 	mov	r3,zero
  812df0:	dd401904 	addi	r21,sp,100
  812df4:	d8814215 	stw	r2,1288(sp)
  812df8:	802f883a 	mov	r23,r16
  812dfc:	d8c14315 	stw	r3,1292(sp)
  812e00:	d8014b15 	stw	zero,1324(sp)
  812e04:	d8014815 	stw	zero,1312(sp)
  812e08:	d8014415 	stw	zero,1296(sp)
  812e0c:	d8014715 	stw	zero,1308(sp)
  812e10:	dd400c15 	stw	r21,48(sp)
  812e14:	d8000e15 	stw	zero,56(sp)
  812e18:	d8000d15 	stw	zero,52(sp)
  812e1c:	b8800007 	ldb	r2,0(r23)
  812e20:	10001926 	beq	r2,zero,812e88 <___vfprintf_internal_r+0x1dc>
  812e24:	00c00944 	movi	r3,37
  812e28:	10c01726 	beq	r2,r3,812e88 <___vfprintf_internal_r+0x1dc>
  812e2c:	b821883a 	mov	r16,r23
  812e30:	00000106 	br	812e38 <___vfprintf_internal_r+0x18c>
  812e34:	10c00326 	beq	r2,r3,812e44 <___vfprintf_internal_r+0x198>
  812e38:	84000044 	addi	r16,r16,1
  812e3c:	80800007 	ldb	r2,0(r16)
  812e40:	103ffc1e 	bne	r2,zero,812e34 <___vfprintf_internal_r+0x188>
  812e44:	85e7c83a 	sub	r19,r16,r23
  812e48:	98000e26 	beq	r19,zero,812e84 <___vfprintf_internal_r+0x1d8>
  812e4c:	dc800e17 	ldw	r18,56(sp)
  812e50:	dc400d17 	ldw	r17,52(sp)
  812e54:	008001c4 	movi	r2,7
  812e58:	94e5883a 	add	r18,r18,r19
  812e5c:	8c400044 	addi	r17,r17,1
  812e60:	adc00015 	stw	r23,0(r21)
  812e64:	dc800e15 	stw	r18,56(sp)
  812e68:	acc00115 	stw	r19,4(r21)
  812e6c:	dc400d15 	stw	r17,52(sp)
  812e70:	14428b16 	blt	r2,r17,8138a0 <___vfprintf_internal_r+0xbf4>
  812e74:	ad400204 	addi	r21,r21,8
  812e78:	d9014b17 	ldw	r4,1324(sp)
  812e7c:	24c9883a 	add	r4,r4,r19
  812e80:	d9014b15 	stw	r4,1324(sp)
  812e84:	802f883a 	mov	r23,r16
  812e88:	b8800007 	ldb	r2,0(r23)
  812e8c:	10013c26 	beq	r2,zero,813380 <___vfprintf_internal_r+0x6d4>
  812e90:	bdc00044 	addi	r23,r23,1
  812e94:	d8000405 	stb	zero,16(sp)
  812e98:	b8c00007 	ldb	r3,0(r23)
  812e9c:	04ffffc4 	movi	r19,-1
  812ea0:	d8014c15 	stw	zero,1328(sp)
  812ea4:	d8014a15 	stw	zero,1320(sp)
  812ea8:	d8c14d15 	stw	r3,1332(sp)
  812eac:	bdc00044 	addi	r23,r23,1
  812eb0:	d9414d17 	ldw	r5,1332(sp)
  812eb4:	00801604 	movi	r2,88
  812eb8:	28fff804 	addi	r3,r5,-32
  812ebc:	10c06036 	bltu	r2,r3,813040 <___vfprintf_internal_r+0x394>
  812ec0:	18c5883a 	add	r2,r3,r3
  812ec4:	1085883a 	add	r2,r2,r2
  812ec8:	00c02074 	movhi	r3,129
  812ecc:	18cbb704 	addi	r3,r3,11996
  812ed0:	10c5883a 	add	r2,r2,r3
  812ed4:	11000017 	ldw	r4,0(r2)
  812ed8:	2000683a 	jmp	r4
  812edc:	00813e50 	cmplti	r2,zero,1273
  812ee0:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812ee4:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812ee8:	00813e3c 	xorhi	r2,zero,1272
  812eec:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812ef0:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812ef4:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812ef8:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812efc:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812f00:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812f04:	00813c1c 	xori	r2,zero,1264
  812f08:	00813e2c 	andhi	r2,zero,1272
  812f0c:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812f10:	00813c34 	movhi	r2,1264
  812f14:	00813ec8 	cmpgei	r2,zero,1275
  812f18:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812f1c:	00813eb4 	movhi	r2,1274
  812f20:	00813e7c 	xorhi	r2,zero,1273
  812f24:	00813e7c 	xorhi	r2,zero,1273
  812f28:	00813e7c 	xorhi	r2,zero,1273
  812f2c:	00813e7c 	xorhi	r2,zero,1273
  812f30:	00813e7c 	xorhi	r2,zero,1273
  812f34:	00813e7c 	xorhi	r2,zero,1273
  812f38:	00813e7c 	xorhi	r2,zero,1273
  812f3c:	00813e7c 	xorhi	r2,zero,1273
  812f40:	00813e7c 	xorhi	r2,zero,1273
  812f44:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812f48:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812f4c:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812f50:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812f54:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812f58:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812f5c:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812f60:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812f64:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812f68:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812f6c:	00813698 	cmpnei	r2,zero,1242
  812f70:	00813d04 	movi	r2,1268
  812f74:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812f78:	00813d04 	movi	r2,1268
  812f7c:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812f80:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812f84:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812f88:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812f8c:	00813e68 	cmpgeui	r2,zero,1273
  812f90:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812f94:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812f98:	0081374c 	andi	r2,zero,1245
  812f9c:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812fa0:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812fa4:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812fa8:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812fac:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812fb0:	00813798 	cmpnei	r2,zero,1246
  812fb4:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812fb8:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812fbc:	00813db8 	rdprs	r2,zero,1270
  812fc0:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812fc4:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812fc8:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812fcc:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812fd0:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812fd4:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812fd8:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812fdc:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812fe0:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812fe4:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  812fe8:	00813d8c 	andi	r2,zero,1270
  812fec:	008136a4 	muli	r2,zero,1242
  812ff0:	00813d04 	movi	r2,1268
  812ff4:	00813d04 	movi	r2,1268
  812ff8:	00813d04 	movi	r2,1268
  812ffc:	00813cf0 	cmpltui	r2,zero,1267
  813000:	008136a4 	muli	r2,zero,1242
  813004:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  813008:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  81300c:	00813c78 	rdprs	r2,zero,1265
  813010:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  813014:	00813c48 	cmpgei	r2,zero,1265
  813018:	00813758 	cmpnei	r2,zero,1245
  81301c:	00813ca8 	cmpgeui	r2,zero,1266
  813020:	00813c94 	movui	r2,1266
  813024:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  813028:	00813f24 	muli	r2,zero,1276
  81302c:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  813030:	008137a4 	muli	r2,zero,1246
  813034:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  813038:	00813040 	call	81304 <OSCtxSw_SWITCH_PC+0x812c4>
  81303c:	00813e1c 	xori	r2,zero,1272
  813040:	d9014d17 	ldw	r4,1332(sp)
  813044:	2000ce26 	beq	r4,zero,813380 <___vfprintf_internal_r+0x6d4>
  813048:	01400044 	movi	r5,1
  81304c:	d9800f04 	addi	r6,sp,60
  813050:	d9c14015 	stw	r7,1280(sp)
  813054:	d9414515 	stw	r5,1300(sp)
  813058:	d9814115 	stw	r6,1284(sp)
  81305c:	280f883a 	mov	r7,r5
  813060:	d9000f05 	stb	r4,60(sp)
  813064:	d8000405 	stb	zero,16(sp)
  813068:	d8014615 	stw	zero,1304(sp)
  81306c:	d8c14c17 	ldw	r3,1328(sp)
  813070:	1880008c 	andi	r2,r3,2
  813074:	1005003a 	cmpeq	r2,r2,zero
  813078:	d8815015 	stw	r2,1344(sp)
  81307c:	1000031e 	bne	r2,zero,81308c <___vfprintf_internal_r+0x3e0>
  813080:	d9014517 	ldw	r4,1300(sp)
  813084:	21000084 	addi	r4,r4,2
  813088:	d9014515 	stw	r4,1300(sp)
  81308c:	d9414c17 	ldw	r5,1328(sp)
  813090:	2940210c 	andi	r5,r5,132
  813094:	d9414e15 	stw	r5,1336(sp)
  813098:	28002d1e 	bne	r5,zero,813150 <___vfprintf_internal_r+0x4a4>
  81309c:	d9814a17 	ldw	r6,1320(sp)
  8130a0:	d8814517 	ldw	r2,1300(sp)
  8130a4:	30a1c83a 	sub	r16,r6,r2
  8130a8:	0400290e 	bge	zero,r16,813150 <___vfprintf_internal_r+0x4a4>
  8130ac:	00800404 	movi	r2,16
  8130b0:	1404580e 	bge	r2,r16,814214 <___vfprintf_internal_r+0x1568>
  8130b4:	dc800e17 	ldw	r18,56(sp)
  8130b8:	dc400d17 	ldw	r17,52(sp)
  8130bc:	1027883a 	mov	r19,r2
  8130c0:	070020f4 	movhi	fp,131
  8130c4:	e7221e84 	addi	fp,fp,-30598
  8130c8:	050001c4 	movi	r20,7
  8130cc:	00000306 	br	8130dc <___vfprintf_internal_r+0x430>
  8130d0:	843ffc04 	addi	r16,r16,-16
  8130d4:	ad400204 	addi	r21,r21,8
  8130d8:	9c00130e 	bge	r19,r16,813128 <___vfprintf_internal_r+0x47c>
  8130dc:	94800404 	addi	r18,r18,16
  8130e0:	8c400044 	addi	r17,r17,1
  8130e4:	af000015 	stw	fp,0(r21)
  8130e8:	acc00115 	stw	r19,4(r21)
  8130ec:	dc800e15 	stw	r18,56(sp)
  8130f0:	dc400d15 	stw	r17,52(sp)
  8130f4:	a47ff60e 	bge	r20,r17,8130d0 <___vfprintf_internal_r+0x424>
  8130f8:	d9014f17 	ldw	r4,1340(sp)
  8130fc:	b00b883a 	mov	r5,r22
  813100:	d9800c04 	addi	r6,sp,48
  813104:	d9c15115 	stw	r7,1348(sp)
  813108:	0812c540 	call	812c54 <__sprint_r>
  81310c:	d9c15117 	ldw	r7,1348(sp)
  813110:	10009e1e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  813114:	843ffc04 	addi	r16,r16,-16
  813118:	dc800e17 	ldw	r18,56(sp)
  81311c:	dc400d17 	ldw	r17,52(sp)
  813120:	dd401904 	addi	r21,sp,100
  813124:	9c3fed16 	blt	r19,r16,8130dc <___vfprintf_internal_r+0x430>
  813128:	9425883a 	add	r18,r18,r16
  81312c:	8c400044 	addi	r17,r17,1
  813130:	008001c4 	movi	r2,7
  813134:	af000015 	stw	fp,0(r21)
  813138:	ac000115 	stw	r16,4(r21)
  81313c:	dc800e15 	stw	r18,56(sp)
  813140:	dc400d15 	stw	r17,52(sp)
  813144:	1441f516 	blt	r2,r17,81391c <___vfprintf_internal_r+0xc70>
  813148:	ad400204 	addi	r21,r21,8
  81314c:	00000206 	br	813158 <___vfprintf_internal_r+0x4ac>
  813150:	dc800e17 	ldw	r18,56(sp)
  813154:	dc400d17 	ldw	r17,52(sp)
  813158:	d8800407 	ldb	r2,16(sp)
  81315c:	10000b26 	beq	r2,zero,81318c <___vfprintf_internal_r+0x4e0>
  813160:	00800044 	movi	r2,1
  813164:	94800044 	addi	r18,r18,1
  813168:	8c400044 	addi	r17,r17,1
  81316c:	a8800115 	stw	r2,4(r21)
  813170:	d8c00404 	addi	r3,sp,16
  813174:	008001c4 	movi	r2,7
  813178:	a8c00015 	stw	r3,0(r21)
  81317c:	dc800e15 	stw	r18,56(sp)
  813180:	dc400d15 	stw	r17,52(sp)
  813184:	1441da16 	blt	r2,r17,8138f0 <___vfprintf_internal_r+0xc44>
  813188:	ad400204 	addi	r21,r21,8
  81318c:	d9015017 	ldw	r4,1344(sp)
  813190:	20000b1e 	bne	r4,zero,8131c0 <___vfprintf_internal_r+0x514>
  813194:	d8800444 	addi	r2,sp,17
  813198:	94800084 	addi	r18,r18,2
  81319c:	8c400044 	addi	r17,r17,1
  8131a0:	a8800015 	stw	r2,0(r21)
  8131a4:	00c00084 	movi	r3,2
  8131a8:	008001c4 	movi	r2,7
  8131ac:	a8c00115 	stw	r3,4(r21)
  8131b0:	dc800e15 	stw	r18,56(sp)
  8131b4:	dc400d15 	stw	r17,52(sp)
  8131b8:	1441c216 	blt	r2,r17,8138c4 <___vfprintf_internal_r+0xc18>
  8131bc:	ad400204 	addi	r21,r21,8
  8131c0:	d9414e17 	ldw	r5,1336(sp)
  8131c4:	00802004 	movi	r2,128
  8131c8:	2880b126 	beq	r5,r2,813490 <___vfprintf_internal_r+0x7e4>
  8131cc:	d8c14617 	ldw	r3,1304(sp)
  8131d0:	19e1c83a 	sub	r16,r3,r7
  8131d4:	0400260e 	bge	zero,r16,813270 <___vfprintf_internal_r+0x5c4>
  8131d8:	00800404 	movi	r2,16
  8131dc:	1403c90e 	bge	r2,r16,814104 <___vfprintf_internal_r+0x1458>
  8131e0:	1027883a 	mov	r19,r2
  8131e4:	070020f4 	movhi	fp,131
  8131e8:	e7221a84 	addi	fp,fp,-30614
  8131ec:	050001c4 	movi	r20,7
  8131f0:	00000306 	br	813200 <___vfprintf_internal_r+0x554>
  8131f4:	843ffc04 	addi	r16,r16,-16
  8131f8:	ad400204 	addi	r21,r21,8
  8131fc:	9c00130e 	bge	r19,r16,81324c <___vfprintf_internal_r+0x5a0>
  813200:	94800404 	addi	r18,r18,16
  813204:	8c400044 	addi	r17,r17,1
  813208:	af000015 	stw	fp,0(r21)
  81320c:	acc00115 	stw	r19,4(r21)
  813210:	dc800e15 	stw	r18,56(sp)
  813214:	dc400d15 	stw	r17,52(sp)
  813218:	a47ff60e 	bge	r20,r17,8131f4 <___vfprintf_internal_r+0x548>
  81321c:	d9014f17 	ldw	r4,1340(sp)
  813220:	b00b883a 	mov	r5,r22
  813224:	d9800c04 	addi	r6,sp,48
  813228:	d9c15115 	stw	r7,1348(sp)
  81322c:	0812c540 	call	812c54 <__sprint_r>
  813230:	d9c15117 	ldw	r7,1348(sp)
  813234:	1000551e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  813238:	843ffc04 	addi	r16,r16,-16
  81323c:	dc800e17 	ldw	r18,56(sp)
  813240:	dc400d17 	ldw	r17,52(sp)
  813244:	dd401904 	addi	r21,sp,100
  813248:	9c3fed16 	blt	r19,r16,813200 <___vfprintf_internal_r+0x554>
  81324c:	9425883a 	add	r18,r18,r16
  813250:	8c400044 	addi	r17,r17,1
  813254:	008001c4 	movi	r2,7
  813258:	af000015 	stw	fp,0(r21)
  81325c:	ac000115 	stw	r16,4(r21)
  813260:	dc800e15 	stw	r18,56(sp)
  813264:	dc400d15 	stw	r17,52(sp)
  813268:	14418216 	blt	r2,r17,813874 <___vfprintf_internal_r+0xbc8>
  81326c:	ad400204 	addi	r21,r21,8
  813270:	d9014c17 	ldw	r4,1328(sp)
  813274:	2080400c 	andi	r2,r4,256
  813278:	10004a1e 	bne	r2,zero,8133a4 <___vfprintf_internal_r+0x6f8>
  81327c:	d9414117 	ldw	r5,1284(sp)
  813280:	91e5883a 	add	r18,r18,r7
  813284:	8c400044 	addi	r17,r17,1
  813288:	008001c4 	movi	r2,7
  81328c:	a9400015 	stw	r5,0(r21)
  813290:	a9c00115 	stw	r7,4(r21)
  813294:	dc800e15 	stw	r18,56(sp)
  813298:	dc400d15 	stw	r17,52(sp)
  81329c:	14416716 	blt	r2,r17,81383c <___vfprintf_internal_r+0xb90>
  8132a0:	a8c00204 	addi	r3,r21,8
  8132a4:	d9814c17 	ldw	r6,1328(sp)
  8132a8:	3080010c 	andi	r2,r6,4
  8132ac:	10002826 	beq	r2,zero,813350 <___vfprintf_internal_r+0x6a4>
  8132b0:	d8814a17 	ldw	r2,1320(sp)
  8132b4:	d9014517 	ldw	r4,1300(sp)
  8132b8:	1121c83a 	sub	r16,r2,r4
  8132bc:	0400240e 	bge	zero,r16,813350 <___vfprintf_internal_r+0x6a4>
  8132c0:	00800404 	movi	r2,16
  8132c4:	14044f0e 	bge	r2,r16,814404 <___vfprintf_internal_r+0x1758>
  8132c8:	dc400d17 	ldw	r17,52(sp)
  8132cc:	1027883a 	mov	r19,r2
  8132d0:	070020f4 	movhi	fp,131
  8132d4:	e7221e84 	addi	fp,fp,-30598
  8132d8:	050001c4 	movi	r20,7
  8132dc:	00000306 	br	8132ec <___vfprintf_internal_r+0x640>
  8132e0:	843ffc04 	addi	r16,r16,-16
  8132e4:	18c00204 	addi	r3,r3,8
  8132e8:	9c00110e 	bge	r19,r16,813330 <___vfprintf_internal_r+0x684>
  8132ec:	94800404 	addi	r18,r18,16
  8132f0:	8c400044 	addi	r17,r17,1
  8132f4:	1f000015 	stw	fp,0(r3)
  8132f8:	1cc00115 	stw	r19,4(r3)
  8132fc:	dc800e15 	stw	r18,56(sp)
  813300:	dc400d15 	stw	r17,52(sp)
  813304:	a47ff60e 	bge	r20,r17,8132e0 <___vfprintf_internal_r+0x634>
  813308:	d9014f17 	ldw	r4,1340(sp)
  81330c:	b00b883a 	mov	r5,r22
  813310:	d9800c04 	addi	r6,sp,48
  813314:	0812c540 	call	812c54 <__sprint_r>
  813318:	10001c1e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  81331c:	843ffc04 	addi	r16,r16,-16
  813320:	dc800e17 	ldw	r18,56(sp)
  813324:	dc400d17 	ldw	r17,52(sp)
  813328:	d8c01904 	addi	r3,sp,100
  81332c:	9c3fef16 	blt	r19,r16,8132ec <___vfprintf_internal_r+0x640>
  813330:	9425883a 	add	r18,r18,r16
  813334:	8c400044 	addi	r17,r17,1
  813338:	008001c4 	movi	r2,7
  81333c:	1f000015 	stw	fp,0(r3)
  813340:	1c000115 	stw	r16,4(r3)
  813344:	dc800e15 	stw	r18,56(sp)
  813348:	dc400d15 	stw	r17,52(sp)
  81334c:	1440cb16 	blt	r2,r17,81367c <___vfprintf_internal_r+0x9d0>
  813350:	d8814a17 	ldw	r2,1320(sp)
  813354:	d9414517 	ldw	r5,1300(sp)
  813358:	1140010e 	bge	r2,r5,813360 <___vfprintf_internal_r+0x6b4>
  81335c:	2805883a 	mov	r2,r5
  813360:	d9814b17 	ldw	r6,1324(sp)
  813364:	308d883a 	add	r6,r6,r2
  813368:	d9814b15 	stw	r6,1324(sp)
  81336c:	90013b1e 	bne	r18,zero,81385c <___vfprintf_internal_r+0xbb0>
  813370:	d9c14017 	ldw	r7,1280(sp)
  813374:	dd401904 	addi	r21,sp,100
  813378:	d8000d15 	stw	zero,52(sp)
  81337c:	003ea706 	br	812e1c <___vfprintf_internal_r+0x170>
  813380:	d8800e17 	ldw	r2,56(sp)
  813384:	10053f1e 	bne	r2,zero,814884 <___vfprintf_internal_r+0x1bd8>
  813388:	d8000d15 	stw	zero,52(sp)
  81338c:	b080030b 	ldhu	r2,12(r22)
  813390:	1080100c 	andi	r2,r2,64
  813394:	103e8726 	beq	r2,zero,812db4 <___vfprintf_internal_r+0x108>
  813398:	00bfffc4 	movi	r2,-1
  81339c:	d8814b15 	stw	r2,1324(sp)
  8133a0:	003e8406 	br	812db4 <___vfprintf_internal_r+0x108>
  8133a4:	d9814d17 	ldw	r6,1332(sp)
  8133a8:	00801944 	movi	r2,101
  8133ac:	11806e16 	blt	r2,r6,813568 <___vfprintf_internal_r+0x8bc>
  8133b0:	d9414717 	ldw	r5,1308(sp)
  8133b4:	00c00044 	movi	r3,1
  8133b8:	1943430e 	bge	r3,r5,8140c8 <___vfprintf_internal_r+0x141c>
  8133bc:	d8814117 	ldw	r2,1284(sp)
  8133c0:	94800044 	addi	r18,r18,1
  8133c4:	8c400044 	addi	r17,r17,1
  8133c8:	a8800015 	stw	r2,0(r21)
  8133cc:	008001c4 	movi	r2,7
  8133d0:	a8c00115 	stw	r3,4(r21)
  8133d4:	dc800e15 	stw	r18,56(sp)
  8133d8:	dc400d15 	stw	r17,52(sp)
  8133dc:	1441ca16 	blt	r2,r17,813b08 <___vfprintf_internal_r+0xe5c>
  8133e0:	a8c00204 	addi	r3,r21,8
  8133e4:	d9014917 	ldw	r4,1316(sp)
  8133e8:	00800044 	movi	r2,1
  8133ec:	94800044 	addi	r18,r18,1
  8133f0:	8c400044 	addi	r17,r17,1
  8133f4:	18800115 	stw	r2,4(r3)
  8133f8:	008001c4 	movi	r2,7
  8133fc:	19000015 	stw	r4,0(r3)
  813400:	dc800e15 	stw	r18,56(sp)
  813404:	dc400d15 	stw	r17,52(sp)
  813408:	1441b616 	blt	r2,r17,813ae4 <___vfprintf_internal_r+0xe38>
  81340c:	1cc00204 	addi	r19,r3,8
  813410:	d9014217 	ldw	r4,1288(sp)
  813414:	d9414317 	ldw	r5,1292(sp)
  813418:	000d883a 	mov	r6,zero
  81341c:	000f883a 	mov	r7,zero
  813420:	0810cd40 	call	810cd4 <__nedf2>
  813424:	10017426 	beq	r2,zero,8139f8 <___vfprintf_internal_r+0xd4c>
  813428:	d9414717 	ldw	r5,1308(sp)
  81342c:	d9814117 	ldw	r6,1284(sp)
  813430:	8c400044 	addi	r17,r17,1
  813434:	2c85883a 	add	r2,r5,r18
  813438:	14bfffc4 	addi	r18,r2,-1
  81343c:	28bfffc4 	addi	r2,r5,-1
  813440:	30c00044 	addi	r3,r6,1
  813444:	98800115 	stw	r2,4(r19)
  813448:	008001c4 	movi	r2,7
  81344c:	98c00015 	stw	r3,0(r19)
  813450:	dc800e15 	stw	r18,56(sp)
  813454:	dc400d15 	stw	r17,52(sp)
  813458:	14418e16 	blt	r2,r17,813a94 <___vfprintf_internal_r+0xde8>
  81345c:	9cc00204 	addi	r19,r19,8
  813460:	d9414817 	ldw	r5,1312(sp)
  813464:	d8800804 	addi	r2,sp,32
  813468:	8c400044 	addi	r17,r17,1
  81346c:	9165883a 	add	r18,r18,r5
  813470:	98800015 	stw	r2,0(r19)
  813474:	008001c4 	movi	r2,7
  813478:	99400115 	stw	r5,4(r19)
  81347c:	dc800e15 	stw	r18,56(sp)
  813480:	dc400d15 	stw	r17,52(sp)
  813484:	1440ed16 	blt	r2,r17,81383c <___vfprintf_internal_r+0xb90>
  813488:	98c00204 	addi	r3,r19,8
  81348c:	003f8506 	br	8132a4 <___vfprintf_internal_r+0x5f8>
  813490:	d9814a17 	ldw	r6,1320(sp)
  813494:	d8814517 	ldw	r2,1300(sp)
  813498:	30a1c83a 	sub	r16,r6,r2
  81349c:	043f4b0e 	bge	zero,r16,8131cc <___vfprintf_internal_r+0x520>
  8134a0:	00800404 	movi	r2,16
  8134a4:	1404340e 	bge	r2,r16,814578 <___vfprintf_internal_r+0x18cc>
  8134a8:	1027883a 	mov	r19,r2
  8134ac:	070020f4 	movhi	fp,131
  8134b0:	e7221a84 	addi	fp,fp,-30614
  8134b4:	050001c4 	movi	r20,7
  8134b8:	00000306 	br	8134c8 <___vfprintf_internal_r+0x81c>
  8134bc:	843ffc04 	addi	r16,r16,-16
  8134c0:	ad400204 	addi	r21,r21,8
  8134c4:	9c00130e 	bge	r19,r16,813514 <___vfprintf_internal_r+0x868>
  8134c8:	94800404 	addi	r18,r18,16
  8134cc:	8c400044 	addi	r17,r17,1
  8134d0:	af000015 	stw	fp,0(r21)
  8134d4:	acc00115 	stw	r19,4(r21)
  8134d8:	dc800e15 	stw	r18,56(sp)
  8134dc:	dc400d15 	stw	r17,52(sp)
  8134e0:	a47ff60e 	bge	r20,r17,8134bc <___vfprintf_internal_r+0x810>
  8134e4:	d9014f17 	ldw	r4,1340(sp)
  8134e8:	b00b883a 	mov	r5,r22
  8134ec:	d9800c04 	addi	r6,sp,48
  8134f0:	d9c15115 	stw	r7,1348(sp)
  8134f4:	0812c540 	call	812c54 <__sprint_r>
  8134f8:	d9c15117 	ldw	r7,1348(sp)
  8134fc:	103fa31e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  813500:	843ffc04 	addi	r16,r16,-16
  813504:	dc800e17 	ldw	r18,56(sp)
  813508:	dc400d17 	ldw	r17,52(sp)
  81350c:	dd401904 	addi	r21,sp,100
  813510:	9c3fed16 	blt	r19,r16,8134c8 <___vfprintf_internal_r+0x81c>
  813514:	9425883a 	add	r18,r18,r16
  813518:	8c400044 	addi	r17,r17,1
  81351c:	008001c4 	movi	r2,7
  813520:	af000015 	stw	fp,0(r21)
  813524:	ac000115 	stw	r16,4(r21)
  813528:	dc800e15 	stw	r18,56(sp)
  81352c:	dc400d15 	stw	r17,52(sp)
  813530:	14416116 	blt	r2,r17,813ab8 <___vfprintf_internal_r+0xe0c>
  813534:	ad400204 	addi	r21,r21,8
  813538:	003f2406 	br	8131cc <___vfprintf_internal_r+0x520>
  81353c:	d9014f17 	ldw	r4,1340(sp)
  813540:	081671c0 	call	81671c <__sinit>
  813544:	d9c15117 	ldw	r7,1348(sp)
  813548:	003def06 	br	812d08 <___vfprintf_internal_r+0x5c>
  81354c:	d9014f17 	ldw	r4,1340(sp)
  813550:	b00b883a 	mov	r5,r22
  813554:	d9c15115 	stw	r7,1348(sp)
  813558:	0814b7c0 	call	814b7c <__swsetup_r>
  81355c:	d9c15117 	ldw	r7,1348(sp)
  813560:	103dee26 	beq	r2,zero,812d1c <___vfprintf_internal_r+0x70>
  813564:	003f8c06 	br	813398 <___vfprintf_internal_r+0x6ec>
  813568:	d9014217 	ldw	r4,1288(sp)
  81356c:	d9414317 	ldw	r5,1292(sp)
  813570:	000d883a 	mov	r6,zero
  813574:	000f883a 	mov	r7,zero
  813578:	0810c4c0 	call	810c4c <__eqdf2>
  81357c:	1000f21e 	bne	r2,zero,813948 <___vfprintf_internal_r+0xc9c>
  813580:	008020f4 	movhi	r2,131
  813584:	10a21a04 	addi	r2,r2,-30616
  813588:	94800044 	addi	r18,r18,1
  81358c:	8c400044 	addi	r17,r17,1
  813590:	a8800015 	stw	r2,0(r21)
  813594:	00c00044 	movi	r3,1
  813598:	008001c4 	movi	r2,7
  81359c:	a8c00115 	stw	r3,4(r21)
  8135a0:	dc800e15 	stw	r18,56(sp)
  8135a4:	dc400d15 	stw	r17,52(sp)
  8135a8:	1442fa16 	blt	r2,r17,814194 <___vfprintf_internal_r+0x14e8>
  8135ac:	a8c00204 	addi	r3,r21,8
  8135b0:	d8800517 	ldw	r2,20(sp)
  8135b4:	d9014717 	ldw	r4,1308(sp)
  8135b8:	11015c0e 	bge	r2,r4,813b2c <___vfprintf_internal_r+0xe80>
  8135bc:	dc400d17 	ldw	r17,52(sp)
  8135c0:	d9814917 	ldw	r6,1316(sp)
  8135c4:	00800044 	movi	r2,1
  8135c8:	94800044 	addi	r18,r18,1
  8135cc:	8c400044 	addi	r17,r17,1
  8135d0:	18800115 	stw	r2,4(r3)
  8135d4:	008001c4 	movi	r2,7
  8135d8:	19800015 	stw	r6,0(r3)
  8135dc:	dc800e15 	stw	r18,56(sp)
  8135e0:	dc400d15 	stw	r17,52(sp)
  8135e4:	14431016 	blt	r2,r17,814228 <___vfprintf_internal_r+0x157c>
  8135e8:	18c00204 	addi	r3,r3,8
  8135ec:	d8814717 	ldw	r2,1308(sp)
  8135f0:	143fffc4 	addi	r16,r2,-1
  8135f4:	043f2b0e 	bge	zero,r16,8132a4 <___vfprintf_internal_r+0x5f8>
  8135f8:	00800404 	movi	r2,16
  8135fc:	1402a20e 	bge	r2,r16,814088 <___vfprintf_internal_r+0x13dc>
  813600:	dc400d17 	ldw	r17,52(sp)
  813604:	1027883a 	mov	r19,r2
  813608:	070020f4 	movhi	fp,131
  81360c:	e7221a84 	addi	fp,fp,-30614
  813610:	050001c4 	movi	r20,7
  813614:	00000306 	br	813624 <___vfprintf_internal_r+0x978>
  813618:	18c00204 	addi	r3,r3,8
  81361c:	843ffc04 	addi	r16,r16,-16
  813620:	9c029c0e 	bge	r19,r16,814094 <___vfprintf_internal_r+0x13e8>
  813624:	94800404 	addi	r18,r18,16
  813628:	8c400044 	addi	r17,r17,1
  81362c:	1f000015 	stw	fp,0(r3)
  813630:	1cc00115 	stw	r19,4(r3)
  813634:	dc800e15 	stw	r18,56(sp)
  813638:	dc400d15 	stw	r17,52(sp)
  81363c:	a47ff60e 	bge	r20,r17,813618 <___vfprintf_internal_r+0x96c>
  813640:	d9014f17 	ldw	r4,1340(sp)
  813644:	b00b883a 	mov	r5,r22
  813648:	d9800c04 	addi	r6,sp,48
  81364c:	0812c540 	call	812c54 <__sprint_r>
  813650:	103f4e1e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  813654:	dc800e17 	ldw	r18,56(sp)
  813658:	dc400d17 	ldw	r17,52(sp)
  81365c:	d8c01904 	addi	r3,sp,100
  813660:	003fee06 	br	81361c <___vfprintf_internal_r+0x970>
  813664:	d8802c0b 	ldhu	r2,176(sp)
  813668:	00ffffc4 	movi	r3,-1
  81366c:	d8c14b15 	stw	r3,1324(sp)
  813670:	1080100c 	andi	r2,r2,64
  813674:	103dcc1e 	bne	r2,zero,812da8 <___vfprintf_internal_r+0xfc>
  813678:	003dce06 	br	812db4 <___vfprintf_internal_r+0x108>
  81367c:	d9014f17 	ldw	r4,1340(sp)
  813680:	b00b883a 	mov	r5,r22
  813684:	d9800c04 	addi	r6,sp,48
  813688:	0812c540 	call	812c54 <__sprint_r>
  81368c:	103f3f1e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  813690:	dc800e17 	ldw	r18,56(sp)
  813694:	003f2e06 	br	813350 <___vfprintf_internal_r+0x6a4>
  813698:	d9414c17 	ldw	r5,1328(sp)
  81369c:	29400414 	ori	r5,r5,16
  8136a0:	d9414c15 	stw	r5,1328(sp)
  8136a4:	d9814c17 	ldw	r6,1328(sp)
  8136a8:	3080080c 	andi	r2,r6,32
  8136ac:	10014f1e 	bne	r2,zero,813bec <___vfprintf_internal_r+0xf40>
  8136b0:	d8c14c17 	ldw	r3,1328(sp)
  8136b4:	1880040c 	andi	r2,r3,16
  8136b8:	1002ea1e 	bne	r2,zero,814264 <___vfprintf_internal_r+0x15b8>
  8136bc:	d9014c17 	ldw	r4,1328(sp)
  8136c0:	2080100c 	andi	r2,r4,64
  8136c4:	1002e726 	beq	r2,zero,814264 <___vfprintf_internal_r+0x15b8>
  8136c8:	3880000f 	ldh	r2,0(r7)
  8136cc:	39c00104 	addi	r7,r7,4
  8136d0:	d9c14015 	stw	r7,1280(sp)
  8136d4:	1023d7fa 	srai	r17,r2,31
  8136d8:	1021883a 	mov	r16,r2
  8136dc:	88037216 	blt	r17,zero,8144a8 <___vfprintf_internal_r+0x17fc>
  8136e0:	01000044 	movi	r4,1
  8136e4:	98000416 	blt	r19,zero,8136f8 <___vfprintf_internal_r+0xa4c>
  8136e8:	d8c14c17 	ldw	r3,1328(sp)
  8136ec:	00bfdfc4 	movi	r2,-129
  8136f0:	1886703a 	and	r3,r3,r2
  8136f4:	d8c14c15 	stw	r3,1328(sp)
  8136f8:	8444b03a 	or	r2,r16,r17
  8136fc:	1002261e 	bne	r2,zero,813f98 <___vfprintf_internal_r+0x12ec>
  813700:	9802251e 	bne	r19,zero,813f98 <___vfprintf_internal_r+0x12ec>
  813704:	20803fcc 	andi	r2,r4,255
  813708:	10029b26 	beq	r2,zero,814178 <___vfprintf_internal_r+0x14cc>
  81370c:	d8c01904 	addi	r3,sp,100
  813710:	dd000f04 	addi	r20,sp,60
  813714:	d8c14115 	stw	r3,1284(sp)
  813718:	d8c14117 	ldw	r3,1284(sp)
  81371c:	dcc14515 	stw	r19,1300(sp)
  813720:	a0c5c83a 	sub	r2,r20,r3
  813724:	11c00a04 	addi	r7,r2,40
  813728:	99c0010e 	bge	r19,r7,813730 <___vfprintf_internal_r+0xa84>
  81372c:	d9c14515 	stw	r7,1300(sp)
  813730:	dcc14615 	stw	r19,1304(sp)
  813734:	d8800407 	ldb	r2,16(sp)
  813738:	103e4c26 	beq	r2,zero,81306c <___vfprintf_internal_r+0x3c0>
  81373c:	d8814517 	ldw	r2,1300(sp)
  813740:	10800044 	addi	r2,r2,1
  813744:	d8814515 	stw	r2,1300(sp)
  813748:	003e4806 	br	81306c <___vfprintf_internal_r+0x3c0>
  81374c:	d9814c17 	ldw	r6,1328(sp)
  813750:	31800414 	ori	r6,r6,16
  813754:	d9814c15 	stw	r6,1328(sp)
  813758:	d8c14c17 	ldw	r3,1328(sp)
  81375c:	1880080c 	andi	r2,r3,32
  813760:	1001271e 	bne	r2,zero,813c00 <___vfprintf_internal_r+0xf54>
  813764:	d9414c17 	ldw	r5,1328(sp)
  813768:	2880040c 	andi	r2,r5,16
  81376c:	1002b61e 	bne	r2,zero,814248 <___vfprintf_internal_r+0x159c>
  813770:	d9814c17 	ldw	r6,1328(sp)
  813774:	3080100c 	andi	r2,r6,64
  813778:	1002b326 	beq	r2,zero,814248 <___vfprintf_internal_r+0x159c>
  81377c:	3c00000b 	ldhu	r16,0(r7)
  813780:	0009883a 	mov	r4,zero
  813784:	39c00104 	addi	r7,r7,4
  813788:	0023883a 	mov	r17,zero
  81378c:	d9c14015 	stw	r7,1280(sp)
  813790:	d8000405 	stb	zero,16(sp)
  813794:	003fd306 	br	8136e4 <___vfprintf_internal_r+0xa38>
  813798:	d9014c17 	ldw	r4,1328(sp)
  81379c:	21000414 	ori	r4,r4,16
  8137a0:	d9014c15 	stw	r4,1328(sp)
  8137a4:	d9414c17 	ldw	r5,1328(sp)
  8137a8:	2880080c 	andi	r2,r5,32
  8137ac:	1001081e 	bne	r2,zero,813bd0 <___vfprintf_internal_r+0xf24>
  8137b0:	d8c14c17 	ldw	r3,1328(sp)
  8137b4:	1880040c 	andi	r2,r3,16
  8137b8:	1002b01e 	bne	r2,zero,81427c <___vfprintf_internal_r+0x15d0>
  8137bc:	d9014c17 	ldw	r4,1328(sp)
  8137c0:	2080100c 	andi	r2,r4,64
  8137c4:	1002ad26 	beq	r2,zero,81427c <___vfprintf_internal_r+0x15d0>
  8137c8:	3c00000b 	ldhu	r16,0(r7)
  8137cc:	01000044 	movi	r4,1
  8137d0:	39c00104 	addi	r7,r7,4
  8137d4:	0023883a 	mov	r17,zero
  8137d8:	d9c14015 	stw	r7,1280(sp)
  8137dc:	d8000405 	stb	zero,16(sp)
  8137e0:	003fc006 	br	8136e4 <___vfprintf_internal_r+0xa38>
  8137e4:	d9014f17 	ldw	r4,1340(sp)
  8137e8:	b00b883a 	mov	r5,r22
  8137ec:	d9800c04 	addi	r6,sp,48
  8137f0:	0812c540 	call	812c54 <__sprint_r>
  8137f4:	103ee51e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  8137f8:	dc800e17 	ldw	r18,56(sp)
  8137fc:	d8c01904 	addi	r3,sp,100
  813800:	d9814c17 	ldw	r6,1328(sp)
  813804:	3080004c 	andi	r2,r6,1
  813808:	1005003a 	cmpeq	r2,r2,zero
  81380c:	103ea51e 	bne	r2,zero,8132a4 <___vfprintf_internal_r+0x5f8>
  813810:	00800044 	movi	r2,1
  813814:	dc400d17 	ldw	r17,52(sp)
  813818:	18800115 	stw	r2,4(r3)
  81381c:	d8814917 	ldw	r2,1316(sp)
  813820:	94800044 	addi	r18,r18,1
  813824:	8c400044 	addi	r17,r17,1
  813828:	18800015 	stw	r2,0(r3)
  81382c:	008001c4 	movi	r2,7
  813830:	dc800e15 	stw	r18,56(sp)
  813834:	dc400d15 	stw	r17,52(sp)
  813838:	14421e0e 	bge	r2,r17,8140b4 <___vfprintf_internal_r+0x1408>
  81383c:	d9014f17 	ldw	r4,1340(sp)
  813840:	b00b883a 	mov	r5,r22
  813844:	d9800c04 	addi	r6,sp,48
  813848:	0812c540 	call	812c54 <__sprint_r>
  81384c:	103ecf1e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  813850:	dc800e17 	ldw	r18,56(sp)
  813854:	d8c01904 	addi	r3,sp,100
  813858:	003e9206 	br	8132a4 <___vfprintf_internal_r+0x5f8>
  81385c:	d9014f17 	ldw	r4,1340(sp)
  813860:	b00b883a 	mov	r5,r22
  813864:	d9800c04 	addi	r6,sp,48
  813868:	0812c540 	call	812c54 <__sprint_r>
  81386c:	103ec026 	beq	r2,zero,813370 <___vfprintf_internal_r+0x6c4>
  813870:	003ec606 	br	81338c <___vfprintf_internal_r+0x6e0>
  813874:	d9014f17 	ldw	r4,1340(sp)
  813878:	b00b883a 	mov	r5,r22
  81387c:	d9800c04 	addi	r6,sp,48
  813880:	d9c15115 	stw	r7,1348(sp)
  813884:	0812c540 	call	812c54 <__sprint_r>
  813888:	d9c15117 	ldw	r7,1348(sp)
  81388c:	103ebf1e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  813890:	dc800e17 	ldw	r18,56(sp)
  813894:	dc400d17 	ldw	r17,52(sp)
  813898:	dd401904 	addi	r21,sp,100
  81389c:	003e7406 	br	813270 <___vfprintf_internal_r+0x5c4>
  8138a0:	d9014f17 	ldw	r4,1340(sp)
  8138a4:	b00b883a 	mov	r5,r22
  8138a8:	d9800c04 	addi	r6,sp,48
  8138ac:	d9c15115 	stw	r7,1348(sp)
  8138b0:	0812c540 	call	812c54 <__sprint_r>
  8138b4:	d9c15117 	ldw	r7,1348(sp)
  8138b8:	103eb41e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  8138bc:	dd401904 	addi	r21,sp,100
  8138c0:	003d6d06 	br	812e78 <___vfprintf_internal_r+0x1cc>
  8138c4:	d9014f17 	ldw	r4,1340(sp)
  8138c8:	b00b883a 	mov	r5,r22
  8138cc:	d9800c04 	addi	r6,sp,48
  8138d0:	d9c15115 	stw	r7,1348(sp)
  8138d4:	0812c540 	call	812c54 <__sprint_r>
  8138d8:	d9c15117 	ldw	r7,1348(sp)
  8138dc:	103eab1e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  8138e0:	dc800e17 	ldw	r18,56(sp)
  8138e4:	dc400d17 	ldw	r17,52(sp)
  8138e8:	dd401904 	addi	r21,sp,100
  8138ec:	003e3406 	br	8131c0 <___vfprintf_internal_r+0x514>
  8138f0:	d9014f17 	ldw	r4,1340(sp)
  8138f4:	b00b883a 	mov	r5,r22
  8138f8:	d9800c04 	addi	r6,sp,48
  8138fc:	d9c15115 	stw	r7,1348(sp)
  813900:	0812c540 	call	812c54 <__sprint_r>
  813904:	d9c15117 	ldw	r7,1348(sp)
  813908:	103ea01e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  81390c:	dc800e17 	ldw	r18,56(sp)
  813910:	dc400d17 	ldw	r17,52(sp)
  813914:	dd401904 	addi	r21,sp,100
  813918:	003e1c06 	br	81318c <___vfprintf_internal_r+0x4e0>
  81391c:	d9014f17 	ldw	r4,1340(sp)
  813920:	b00b883a 	mov	r5,r22
  813924:	d9800c04 	addi	r6,sp,48
  813928:	d9c15115 	stw	r7,1348(sp)
  81392c:	0812c540 	call	812c54 <__sprint_r>
  813930:	d9c15117 	ldw	r7,1348(sp)
  813934:	103e951e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  813938:	dc800e17 	ldw	r18,56(sp)
  81393c:	dc400d17 	ldw	r17,52(sp)
  813940:	dd401904 	addi	r21,sp,100
  813944:	003e0406 	br	813158 <___vfprintf_internal_r+0x4ac>
  813948:	d9000517 	ldw	r4,20(sp)
  81394c:	0102520e 	bge	zero,r4,814298 <___vfprintf_internal_r+0x15ec>
  813950:	d9814717 	ldw	r6,1308(sp)
  813954:	21807a16 	blt	r4,r6,813b40 <___vfprintf_internal_r+0xe94>
  813958:	d8814117 	ldw	r2,1284(sp)
  81395c:	91a5883a 	add	r18,r18,r6
  813960:	8c400044 	addi	r17,r17,1
  813964:	a8800015 	stw	r2,0(r21)
  813968:	008001c4 	movi	r2,7
  81396c:	a9800115 	stw	r6,4(r21)
  813970:	dc800e15 	stw	r18,56(sp)
  813974:	dc400d15 	stw	r17,52(sp)
  813978:	1442f616 	blt	r2,r17,814554 <___vfprintf_internal_r+0x18a8>
  81397c:	a8c00204 	addi	r3,r21,8
  813980:	d9414717 	ldw	r5,1308(sp)
  813984:	2161c83a 	sub	r16,r4,r5
  813988:	043f9d0e 	bge	zero,r16,813800 <___vfprintf_internal_r+0xb54>
  81398c:	00800404 	movi	r2,16
  813990:	1402130e 	bge	r2,r16,8141e0 <___vfprintf_internal_r+0x1534>
  813994:	dc400d17 	ldw	r17,52(sp)
  813998:	1027883a 	mov	r19,r2
  81399c:	070020f4 	movhi	fp,131
  8139a0:	e7221a84 	addi	fp,fp,-30614
  8139a4:	050001c4 	movi	r20,7
  8139a8:	00000306 	br	8139b8 <___vfprintf_internal_r+0xd0c>
  8139ac:	18c00204 	addi	r3,r3,8
  8139b0:	843ffc04 	addi	r16,r16,-16
  8139b4:	9c020d0e 	bge	r19,r16,8141ec <___vfprintf_internal_r+0x1540>
  8139b8:	94800404 	addi	r18,r18,16
  8139bc:	8c400044 	addi	r17,r17,1
  8139c0:	1f000015 	stw	fp,0(r3)
  8139c4:	1cc00115 	stw	r19,4(r3)
  8139c8:	dc800e15 	stw	r18,56(sp)
  8139cc:	dc400d15 	stw	r17,52(sp)
  8139d0:	a47ff60e 	bge	r20,r17,8139ac <___vfprintf_internal_r+0xd00>
  8139d4:	d9014f17 	ldw	r4,1340(sp)
  8139d8:	b00b883a 	mov	r5,r22
  8139dc:	d9800c04 	addi	r6,sp,48
  8139e0:	0812c540 	call	812c54 <__sprint_r>
  8139e4:	103e691e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  8139e8:	dc800e17 	ldw	r18,56(sp)
  8139ec:	dc400d17 	ldw	r17,52(sp)
  8139f0:	d8c01904 	addi	r3,sp,100
  8139f4:	003fee06 	br	8139b0 <___vfprintf_internal_r+0xd04>
  8139f8:	d8814717 	ldw	r2,1308(sp)
  8139fc:	143fffc4 	addi	r16,r2,-1
  813a00:	043e970e 	bge	zero,r16,813460 <___vfprintf_internal_r+0x7b4>
  813a04:	00800404 	movi	r2,16
  813a08:	1400180e 	bge	r2,r16,813a6c <___vfprintf_internal_r+0xdc0>
  813a0c:	1029883a 	mov	r20,r2
  813a10:	070020f4 	movhi	fp,131
  813a14:	e7221a84 	addi	fp,fp,-30614
  813a18:	054001c4 	movi	r21,7
  813a1c:	00000306 	br	813a2c <___vfprintf_internal_r+0xd80>
  813a20:	9cc00204 	addi	r19,r19,8
  813a24:	843ffc04 	addi	r16,r16,-16
  813a28:	a400120e 	bge	r20,r16,813a74 <___vfprintf_internal_r+0xdc8>
  813a2c:	94800404 	addi	r18,r18,16
  813a30:	8c400044 	addi	r17,r17,1
  813a34:	9f000015 	stw	fp,0(r19)
  813a38:	9d000115 	stw	r20,4(r19)
  813a3c:	dc800e15 	stw	r18,56(sp)
  813a40:	dc400d15 	stw	r17,52(sp)
  813a44:	ac7ff60e 	bge	r21,r17,813a20 <___vfprintf_internal_r+0xd74>
  813a48:	d9014f17 	ldw	r4,1340(sp)
  813a4c:	b00b883a 	mov	r5,r22
  813a50:	d9800c04 	addi	r6,sp,48
  813a54:	0812c540 	call	812c54 <__sprint_r>
  813a58:	103e4c1e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  813a5c:	dc800e17 	ldw	r18,56(sp)
  813a60:	dc400d17 	ldw	r17,52(sp)
  813a64:	dcc01904 	addi	r19,sp,100
  813a68:	003fee06 	br	813a24 <___vfprintf_internal_r+0xd78>
  813a6c:	070020f4 	movhi	fp,131
  813a70:	e7221a84 	addi	fp,fp,-30614
  813a74:	9425883a 	add	r18,r18,r16
  813a78:	8c400044 	addi	r17,r17,1
  813a7c:	008001c4 	movi	r2,7
  813a80:	9f000015 	stw	fp,0(r19)
  813a84:	9c000115 	stw	r16,4(r19)
  813a88:	dc800e15 	stw	r18,56(sp)
  813a8c:	dc400d15 	stw	r17,52(sp)
  813a90:	147e720e 	bge	r2,r17,81345c <___vfprintf_internal_r+0x7b0>
  813a94:	d9014f17 	ldw	r4,1340(sp)
  813a98:	b00b883a 	mov	r5,r22
  813a9c:	d9800c04 	addi	r6,sp,48
  813aa0:	0812c540 	call	812c54 <__sprint_r>
  813aa4:	103e391e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  813aa8:	dc800e17 	ldw	r18,56(sp)
  813aac:	dc400d17 	ldw	r17,52(sp)
  813ab0:	dcc01904 	addi	r19,sp,100
  813ab4:	003e6a06 	br	813460 <___vfprintf_internal_r+0x7b4>
  813ab8:	d9014f17 	ldw	r4,1340(sp)
  813abc:	b00b883a 	mov	r5,r22
  813ac0:	d9800c04 	addi	r6,sp,48
  813ac4:	d9c15115 	stw	r7,1348(sp)
  813ac8:	0812c540 	call	812c54 <__sprint_r>
  813acc:	d9c15117 	ldw	r7,1348(sp)
  813ad0:	103e2e1e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  813ad4:	dc800e17 	ldw	r18,56(sp)
  813ad8:	dc400d17 	ldw	r17,52(sp)
  813adc:	dd401904 	addi	r21,sp,100
  813ae0:	003dba06 	br	8131cc <___vfprintf_internal_r+0x520>
  813ae4:	d9014f17 	ldw	r4,1340(sp)
  813ae8:	b00b883a 	mov	r5,r22
  813aec:	d9800c04 	addi	r6,sp,48
  813af0:	0812c540 	call	812c54 <__sprint_r>
  813af4:	103e251e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  813af8:	dc800e17 	ldw	r18,56(sp)
  813afc:	dc400d17 	ldw	r17,52(sp)
  813b00:	dcc01904 	addi	r19,sp,100
  813b04:	003e4206 	br	813410 <___vfprintf_internal_r+0x764>
  813b08:	d9014f17 	ldw	r4,1340(sp)
  813b0c:	b00b883a 	mov	r5,r22
  813b10:	d9800c04 	addi	r6,sp,48
  813b14:	0812c540 	call	812c54 <__sprint_r>
  813b18:	103e1c1e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  813b1c:	dc800e17 	ldw	r18,56(sp)
  813b20:	dc400d17 	ldw	r17,52(sp)
  813b24:	d8c01904 	addi	r3,sp,100
  813b28:	003e2e06 	br	8133e4 <___vfprintf_internal_r+0x738>
  813b2c:	d9414c17 	ldw	r5,1328(sp)
  813b30:	2880004c 	andi	r2,r5,1
  813b34:	1005003a 	cmpeq	r2,r2,zero
  813b38:	103dda1e 	bne	r2,zero,8132a4 <___vfprintf_internal_r+0x5f8>
  813b3c:	003e9f06 	br	8135bc <___vfprintf_internal_r+0x910>
  813b40:	d8c14117 	ldw	r3,1284(sp)
  813b44:	9125883a 	add	r18,r18,r4
  813b48:	8c400044 	addi	r17,r17,1
  813b4c:	008001c4 	movi	r2,7
  813b50:	a8c00015 	stw	r3,0(r21)
  813b54:	a9000115 	stw	r4,4(r21)
  813b58:	dc800e15 	stw	r18,56(sp)
  813b5c:	dc400d15 	stw	r17,52(sp)
  813b60:	14426616 	blt	r2,r17,8144fc <___vfprintf_internal_r+0x1850>
  813b64:	a8c00204 	addi	r3,r21,8
  813b68:	d9414917 	ldw	r5,1316(sp)
  813b6c:	00800044 	movi	r2,1
  813b70:	94800044 	addi	r18,r18,1
  813b74:	8c400044 	addi	r17,r17,1
  813b78:	18800115 	stw	r2,4(r3)
  813b7c:	008001c4 	movi	r2,7
  813b80:	19400015 	stw	r5,0(r3)
  813b84:	dc800e15 	stw	r18,56(sp)
  813b88:	dc400d15 	stw	r17,52(sp)
  813b8c:	2021883a 	mov	r16,r4
  813b90:	14425016 	blt	r2,r17,8144d4 <___vfprintf_internal_r+0x1828>
  813b94:	19400204 	addi	r5,r3,8
  813b98:	d9814717 	ldw	r6,1308(sp)
  813b9c:	8c400044 	addi	r17,r17,1
  813ba0:	dc400d15 	stw	r17,52(sp)
  813ba4:	3107c83a 	sub	r3,r6,r4
  813ba8:	d9014117 	ldw	r4,1284(sp)
  813bac:	90e5883a 	add	r18,r18,r3
  813bb0:	28c00115 	stw	r3,4(r5)
  813bb4:	8105883a 	add	r2,r16,r4
  813bb8:	28800015 	stw	r2,0(r5)
  813bbc:	008001c4 	movi	r2,7
  813bc0:	dc800e15 	stw	r18,56(sp)
  813bc4:	147f1d16 	blt	r2,r17,81383c <___vfprintf_internal_r+0xb90>
  813bc8:	28c00204 	addi	r3,r5,8
  813bcc:	003db506 	br	8132a4 <___vfprintf_internal_r+0x5f8>
  813bd0:	3c000017 	ldw	r16,0(r7)
  813bd4:	3c400117 	ldw	r17,4(r7)
  813bd8:	39800204 	addi	r6,r7,8
  813bdc:	01000044 	movi	r4,1
  813be0:	d9814015 	stw	r6,1280(sp)
  813be4:	d8000405 	stb	zero,16(sp)
  813be8:	003ebe06 	br	8136e4 <___vfprintf_internal_r+0xa38>
  813bec:	3c000017 	ldw	r16,0(r7)
  813bf0:	3c400117 	ldw	r17,4(r7)
  813bf4:	38800204 	addi	r2,r7,8
  813bf8:	d8814015 	stw	r2,1280(sp)
  813bfc:	003eb706 	br	8136dc <___vfprintf_internal_r+0xa30>
  813c00:	3c000017 	ldw	r16,0(r7)
  813c04:	3c400117 	ldw	r17,4(r7)
  813c08:	39000204 	addi	r4,r7,8
  813c0c:	d9014015 	stw	r4,1280(sp)
  813c10:	0009883a 	mov	r4,zero
  813c14:	d8000405 	stb	zero,16(sp)
  813c18:	003eb206 	br	8136e4 <___vfprintf_internal_r+0xa38>
  813c1c:	38c00017 	ldw	r3,0(r7)
  813c20:	39c00104 	addi	r7,r7,4
  813c24:	d8c14a15 	stw	r3,1320(sp)
  813c28:	1800d10e 	bge	r3,zero,813f70 <___vfprintf_internal_r+0x12c4>
  813c2c:	00c7c83a 	sub	r3,zero,r3
  813c30:	d8c14a15 	stw	r3,1320(sp)
  813c34:	d9014c17 	ldw	r4,1328(sp)
  813c38:	b8c00007 	ldb	r3,0(r23)
  813c3c:	21000114 	ori	r4,r4,4
  813c40:	d9014c15 	stw	r4,1328(sp)
  813c44:	003c9806 	br	812ea8 <___vfprintf_internal_r+0x1fc>
  813c48:	d9814c17 	ldw	r6,1328(sp)
  813c4c:	3080080c 	andi	r2,r6,32
  813c50:	1001f026 	beq	r2,zero,814414 <___vfprintf_internal_r+0x1768>
  813c54:	d9014b17 	ldw	r4,1324(sp)
  813c58:	38800017 	ldw	r2,0(r7)
  813c5c:	39c00104 	addi	r7,r7,4
  813c60:	d9c14015 	stw	r7,1280(sp)
  813c64:	2007d7fa 	srai	r3,r4,31
  813c68:	d9c14017 	ldw	r7,1280(sp)
  813c6c:	11000015 	stw	r4,0(r2)
  813c70:	10c00115 	stw	r3,4(r2)
  813c74:	003c6906 	br	812e1c <___vfprintf_internal_r+0x170>
  813c78:	b8c00007 	ldb	r3,0(r23)
  813c7c:	00801b04 	movi	r2,108
  813c80:	18824f26 	beq	r3,r2,8145c0 <___vfprintf_internal_r+0x1914>
  813c84:	d9414c17 	ldw	r5,1328(sp)
  813c88:	29400414 	ori	r5,r5,16
  813c8c:	d9414c15 	stw	r5,1328(sp)
  813c90:	003c8506 	br	812ea8 <___vfprintf_internal_r+0x1fc>
  813c94:	d9814c17 	ldw	r6,1328(sp)
  813c98:	b8c00007 	ldb	r3,0(r23)
  813c9c:	31800814 	ori	r6,r6,32
  813ca0:	d9814c15 	stw	r6,1328(sp)
  813ca4:	003c8006 	br	812ea8 <___vfprintf_internal_r+0x1fc>
  813ca8:	d8814c17 	ldw	r2,1328(sp)
  813cac:	3c000017 	ldw	r16,0(r7)
  813cb0:	00c01e04 	movi	r3,120
  813cb4:	10800094 	ori	r2,r2,2
  813cb8:	d8814c15 	stw	r2,1328(sp)
  813cbc:	39c00104 	addi	r7,r7,4
  813cc0:	014020f4 	movhi	r5,131
  813cc4:	29620304 	addi	r5,r5,-30708
  813cc8:	00800c04 	movi	r2,48
  813ccc:	0023883a 	mov	r17,zero
  813cd0:	01000084 	movi	r4,2
  813cd4:	d9c14015 	stw	r7,1280(sp)
  813cd8:	d8c14d15 	stw	r3,1332(sp)
  813cdc:	d9414415 	stw	r5,1296(sp)
  813ce0:	d8800445 	stb	r2,17(sp)
  813ce4:	d8c00485 	stb	r3,18(sp)
  813ce8:	d8000405 	stb	zero,16(sp)
  813cec:	003e7d06 	br	8136e4 <___vfprintf_internal_r+0xa38>
  813cf0:	d8814c17 	ldw	r2,1328(sp)
  813cf4:	b8c00007 	ldb	r3,0(r23)
  813cf8:	10801014 	ori	r2,r2,64
  813cfc:	d8814c15 	stw	r2,1328(sp)
  813d00:	003c6906 	br	812ea8 <___vfprintf_internal_r+0x1fc>
  813d04:	d9414c17 	ldw	r5,1328(sp)
  813d08:	2880020c 	andi	r2,r5,8
  813d0c:	1001df26 	beq	r2,zero,81448c <___vfprintf_internal_r+0x17e0>
  813d10:	39800017 	ldw	r6,0(r7)
  813d14:	38800204 	addi	r2,r7,8
  813d18:	d8814015 	stw	r2,1280(sp)
  813d1c:	d9814215 	stw	r6,1288(sp)
  813d20:	39c00117 	ldw	r7,4(r7)
  813d24:	d9c14315 	stw	r7,1292(sp)
  813d28:	d9014217 	ldw	r4,1288(sp)
  813d2c:	d9414317 	ldw	r5,1292(sp)
  813d30:	08191a40 	call	8191a4 <__isinfd>
  813d34:	10021726 	beq	r2,zero,814594 <___vfprintf_internal_r+0x18e8>
  813d38:	d9014217 	ldw	r4,1288(sp)
  813d3c:	d9414317 	ldw	r5,1292(sp)
  813d40:	000d883a 	mov	r6,zero
  813d44:	000f883a 	mov	r7,zero
  813d48:	0810de40 	call	810de4 <__ltdf2>
  813d4c:	1002ca16 	blt	r2,zero,814878 <___vfprintf_internal_r+0x1bcc>
  813d50:	d9414d17 	ldw	r5,1332(sp)
  813d54:	008011c4 	movi	r2,71
  813d58:	11420a16 	blt	r2,r5,814584 <___vfprintf_internal_r+0x18d8>
  813d5c:	018020f4 	movhi	r6,131
  813d60:	31a20804 	addi	r6,r6,-30688
  813d64:	d9814115 	stw	r6,1284(sp)
  813d68:	d9014c17 	ldw	r4,1328(sp)
  813d6c:	00c000c4 	movi	r3,3
  813d70:	00bfdfc4 	movi	r2,-129
  813d74:	2088703a 	and	r4,r4,r2
  813d78:	180f883a 	mov	r7,r3
  813d7c:	d8c14515 	stw	r3,1300(sp)
  813d80:	d9014c15 	stw	r4,1328(sp)
  813d84:	d8014615 	stw	zero,1304(sp)
  813d88:	003e6a06 	br	813734 <___vfprintf_internal_r+0xa88>
  813d8c:	38800017 	ldw	r2,0(r7)
  813d90:	00c00044 	movi	r3,1
  813d94:	39c00104 	addi	r7,r7,4
  813d98:	d9c14015 	stw	r7,1280(sp)
  813d9c:	d9000f04 	addi	r4,sp,60
  813da0:	180f883a 	mov	r7,r3
  813da4:	d8c14515 	stw	r3,1300(sp)
  813da8:	d9014115 	stw	r4,1284(sp)
  813dac:	d8800f05 	stb	r2,60(sp)
  813db0:	d8000405 	stb	zero,16(sp)
  813db4:	003cac06 	br	813068 <___vfprintf_internal_r+0x3bc>
  813db8:	014020f4 	movhi	r5,131
  813dbc:	29620e04 	addi	r5,r5,-30664
  813dc0:	d9414415 	stw	r5,1296(sp)
  813dc4:	d9814c17 	ldw	r6,1328(sp)
  813dc8:	3080080c 	andi	r2,r6,32
  813dcc:	1000f926 	beq	r2,zero,8141b4 <___vfprintf_internal_r+0x1508>
  813dd0:	3c000017 	ldw	r16,0(r7)
  813dd4:	3c400117 	ldw	r17,4(r7)
  813dd8:	38800204 	addi	r2,r7,8
  813ddc:	d8814015 	stw	r2,1280(sp)
  813de0:	d9414c17 	ldw	r5,1328(sp)
  813de4:	2880004c 	andi	r2,r5,1
  813de8:	1005003a 	cmpeq	r2,r2,zero
  813dec:	1000b31e 	bne	r2,zero,8140bc <___vfprintf_internal_r+0x1410>
  813df0:	8444b03a 	or	r2,r16,r17
  813df4:	1000b126 	beq	r2,zero,8140bc <___vfprintf_internal_r+0x1410>
  813df8:	d9814d17 	ldw	r6,1332(sp)
  813dfc:	29400094 	ori	r5,r5,2
  813e00:	00800c04 	movi	r2,48
  813e04:	01000084 	movi	r4,2
  813e08:	d9414c15 	stw	r5,1328(sp)
  813e0c:	d8800445 	stb	r2,17(sp)
  813e10:	d9800485 	stb	r6,18(sp)
  813e14:	d8000405 	stb	zero,16(sp)
  813e18:	003e3206 	br	8136e4 <___vfprintf_internal_r+0xa38>
  813e1c:	018020f4 	movhi	r6,131
  813e20:	31a20304 	addi	r6,r6,-30708
  813e24:	d9814415 	stw	r6,1296(sp)
  813e28:	003fe606 	br	813dc4 <___vfprintf_internal_r+0x1118>
  813e2c:	00800ac4 	movi	r2,43
  813e30:	d8800405 	stb	r2,16(sp)
  813e34:	b8c00007 	ldb	r3,0(r23)
  813e38:	003c1b06 	br	812ea8 <___vfprintf_internal_r+0x1fc>
  813e3c:	d8814c17 	ldw	r2,1328(sp)
  813e40:	b8c00007 	ldb	r3,0(r23)
  813e44:	10800054 	ori	r2,r2,1
  813e48:	d8814c15 	stw	r2,1328(sp)
  813e4c:	003c1606 	br	812ea8 <___vfprintf_internal_r+0x1fc>
  813e50:	d8800407 	ldb	r2,16(sp)
  813e54:	1000461e 	bne	r2,zero,813f70 <___vfprintf_internal_r+0x12c4>
  813e58:	00800804 	movi	r2,32
  813e5c:	d8800405 	stb	r2,16(sp)
  813e60:	b8c00007 	ldb	r3,0(r23)
  813e64:	003c1006 	br	812ea8 <___vfprintf_internal_r+0x1fc>
  813e68:	d9814c17 	ldw	r6,1328(sp)
  813e6c:	b8c00007 	ldb	r3,0(r23)
  813e70:	31800214 	ori	r6,r6,8
  813e74:	d9814c15 	stw	r6,1328(sp)
  813e78:	003c0b06 	br	812ea8 <___vfprintf_internal_r+0x1fc>
  813e7c:	0007883a 	mov	r3,zero
  813e80:	01000244 	movi	r4,9
  813e84:	188002a4 	muli	r2,r3,10
  813e88:	b8c00007 	ldb	r3,0(r23)
  813e8c:	d9814d17 	ldw	r6,1332(sp)
  813e90:	bdc00044 	addi	r23,r23,1
  813e94:	d8c14d15 	stw	r3,1332(sp)
  813e98:	d9414d17 	ldw	r5,1332(sp)
  813e9c:	3085883a 	add	r2,r6,r2
  813ea0:	10fff404 	addi	r3,r2,-48
  813ea4:	28bff404 	addi	r2,r5,-48
  813ea8:	20bff62e 	bgeu	r4,r2,813e84 <___vfprintf_internal_r+0x11d8>
  813eac:	d8c14a15 	stw	r3,1320(sp)
  813eb0:	003bff06 	br	812eb0 <___vfprintf_internal_r+0x204>
  813eb4:	d9414c17 	ldw	r5,1328(sp)
  813eb8:	b8c00007 	ldb	r3,0(r23)
  813ebc:	29402014 	ori	r5,r5,128
  813ec0:	d9414c15 	stw	r5,1328(sp)
  813ec4:	003bf806 	br	812ea8 <___vfprintf_internal_r+0x1fc>
  813ec8:	b8c00007 	ldb	r3,0(r23)
  813ecc:	00800a84 	movi	r2,42
  813ed0:	bdc00044 	addi	r23,r23,1
  813ed4:	18831526 	beq	r3,r2,814b2c <___vfprintf_internal_r+0x1e80>
  813ed8:	d8c14d15 	stw	r3,1332(sp)
  813edc:	18bff404 	addi	r2,r3,-48
  813ee0:	00c00244 	movi	r3,9
  813ee4:	18827836 	bltu	r3,r2,8148c8 <___vfprintf_internal_r+0x1c1c>
  813ee8:	000d883a 	mov	r6,zero
  813eec:	308002a4 	muli	r2,r6,10
  813ef0:	b9800007 	ldb	r6,0(r23)
  813ef4:	d9414d17 	ldw	r5,1332(sp)
  813ef8:	bdc00044 	addi	r23,r23,1
  813efc:	d9814d15 	stw	r6,1332(sp)
  813f00:	d9014d17 	ldw	r4,1332(sp)
  813f04:	1145883a 	add	r2,r2,r5
  813f08:	11bff404 	addi	r6,r2,-48
  813f0c:	20bff404 	addi	r2,r4,-48
  813f10:	18bff62e 	bgeu	r3,r2,813eec <___vfprintf_internal_r+0x1240>
  813f14:	3027883a 	mov	r19,r6
  813f18:	303be50e 	bge	r6,zero,812eb0 <___vfprintf_internal_r+0x204>
  813f1c:	04ffffc4 	movi	r19,-1
  813f20:	003be306 	br	812eb0 <___vfprintf_internal_r+0x204>
  813f24:	d8000405 	stb	zero,16(sp)
  813f28:	39800017 	ldw	r6,0(r7)
  813f2c:	39c00104 	addi	r7,r7,4
  813f30:	d9c14015 	stw	r7,1280(sp)
  813f34:	d9814115 	stw	r6,1284(sp)
  813f38:	3001c926 	beq	r6,zero,814660 <___vfprintf_internal_r+0x19b4>
  813f3c:	98000e16 	blt	r19,zero,813f78 <___vfprintf_internal_r+0x12cc>
  813f40:	d9014117 	ldw	r4,1284(sp)
  813f44:	000b883a 	mov	r5,zero
  813f48:	980d883a 	mov	r6,r19
  813f4c:	08177740 	call	817774 <memchr>
  813f50:	10025926 	beq	r2,zero,8148b8 <___vfprintf_internal_r+0x1c0c>
  813f54:	d8c14117 	ldw	r3,1284(sp)
  813f58:	10cfc83a 	sub	r7,r2,r3
  813f5c:	99c19e16 	blt	r19,r7,8145d8 <___vfprintf_internal_r+0x192c>
  813f60:	d9c14515 	stw	r7,1300(sp)
  813f64:	38000916 	blt	r7,zero,813f8c <___vfprintf_internal_r+0x12e0>
  813f68:	d8014615 	stw	zero,1304(sp)
  813f6c:	003df106 	br	813734 <___vfprintf_internal_r+0xa88>
  813f70:	b8c00007 	ldb	r3,0(r23)
  813f74:	003bcc06 	br	812ea8 <___vfprintf_internal_r+0x1fc>
  813f78:	d9014117 	ldw	r4,1284(sp)
  813f7c:	0812bd80 	call	812bd8 <strlen>
  813f80:	d8814515 	stw	r2,1300(sp)
  813f84:	100f883a 	mov	r7,r2
  813f88:	103ff70e 	bge	r2,zero,813f68 <___vfprintf_internal_r+0x12bc>
  813f8c:	d8014515 	stw	zero,1300(sp)
  813f90:	d8014615 	stw	zero,1304(sp)
  813f94:	003de706 	br	813734 <___vfprintf_internal_r+0xa88>
  813f98:	20c03fcc 	andi	r3,r4,255
  813f9c:	00800044 	movi	r2,1
  813fa0:	18802d26 	beq	r3,r2,814058 <___vfprintf_internal_r+0x13ac>
  813fa4:	18800e36 	bltu	r3,r2,813fe0 <___vfprintf_internal_r+0x1334>
  813fa8:	00800084 	movi	r2,2
  813fac:	1880fa26 	beq	r3,r2,814398 <___vfprintf_internal_r+0x16ec>
  813fb0:	010020f4 	movhi	r4,131
  813fb4:	21221304 	addi	r4,r4,-30644
  813fb8:	0812bd80 	call	812bd8 <strlen>
  813fbc:	100f883a 	mov	r7,r2
  813fc0:	dcc14515 	stw	r19,1300(sp)
  813fc4:	9880010e 	bge	r19,r2,813fcc <___vfprintf_internal_r+0x1320>
  813fc8:	d8814515 	stw	r2,1300(sp)
  813fcc:	008020f4 	movhi	r2,131
  813fd0:	10a21304 	addi	r2,r2,-30644
  813fd4:	dcc14615 	stw	r19,1304(sp)
  813fd8:	d8814115 	stw	r2,1284(sp)
  813fdc:	003dd506 	br	813734 <___vfprintf_internal_r+0xa88>
  813fe0:	d9401904 	addi	r5,sp,100
  813fe4:	dd000f04 	addi	r20,sp,60
  813fe8:	d9414115 	stw	r5,1284(sp)
  813fec:	880a977a 	slli	r5,r17,29
  813ff0:	d9814117 	ldw	r6,1284(sp)
  813ff4:	8004d0fa 	srli	r2,r16,3
  813ff8:	8806d0fa 	srli	r3,r17,3
  813ffc:	810001cc 	andi	r4,r16,7
  814000:	2884b03a 	or	r2,r5,r2
  814004:	31bfffc4 	addi	r6,r6,-1
  814008:	21000c04 	addi	r4,r4,48
  81400c:	d9814115 	stw	r6,1284(sp)
  814010:	10cab03a 	or	r5,r2,r3
  814014:	31000005 	stb	r4,0(r6)
  814018:	1021883a 	mov	r16,r2
  81401c:	1823883a 	mov	r17,r3
  814020:	283ff21e 	bne	r5,zero,813fec <___vfprintf_internal_r+0x1340>
  814024:	d8c14c17 	ldw	r3,1328(sp)
  814028:	1880004c 	andi	r2,r3,1
  81402c:	1005003a 	cmpeq	r2,r2,zero
  814030:	103db91e 	bne	r2,zero,813718 <___vfprintf_internal_r+0xa6c>
  814034:	20803fcc 	andi	r2,r4,255
  814038:	1080201c 	xori	r2,r2,128
  81403c:	10bfe004 	addi	r2,r2,-128
  814040:	00c00c04 	movi	r3,48
  814044:	10fdb426 	beq	r2,r3,813718 <___vfprintf_internal_r+0xa6c>
  814048:	31bfffc4 	addi	r6,r6,-1
  81404c:	d9814115 	stw	r6,1284(sp)
  814050:	30c00005 	stb	r3,0(r6)
  814054:	003db006 	br	813718 <___vfprintf_internal_r+0xa6c>
  814058:	88800068 	cmpgeui	r2,r17,1
  81405c:	10002c1e 	bne	r2,zero,814110 <___vfprintf_internal_r+0x1464>
  814060:	8800021e 	bne	r17,zero,81406c <___vfprintf_internal_r+0x13c0>
  814064:	00800244 	movi	r2,9
  814068:	14002936 	bltu	r2,r16,814110 <___vfprintf_internal_r+0x1464>
  81406c:	d90018c4 	addi	r4,sp,99
  814070:	dd000f04 	addi	r20,sp,60
  814074:	d9014115 	stw	r4,1284(sp)
  814078:	d9014117 	ldw	r4,1284(sp)
  81407c:	80800c04 	addi	r2,r16,48
  814080:	20800005 	stb	r2,0(r4)
  814084:	003da406 	br	813718 <___vfprintf_internal_r+0xa6c>
  814088:	dc400d17 	ldw	r17,52(sp)
  81408c:	070020f4 	movhi	fp,131
  814090:	e7221a84 	addi	fp,fp,-30614
  814094:	9425883a 	add	r18,r18,r16
  814098:	8c400044 	addi	r17,r17,1
  81409c:	008001c4 	movi	r2,7
  8140a0:	1f000015 	stw	fp,0(r3)
  8140a4:	1c000115 	stw	r16,4(r3)
  8140a8:	dc800e15 	stw	r18,56(sp)
  8140ac:	dc400d15 	stw	r17,52(sp)
  8140b0:	147de216 	blt	r2,r17,81383c <___vfprintf_internal_r+0xb90>
  8140b4:	18c00204 	addi	r3,r3,8
  8140b8:	003c7a06 	br	8132a4 <___vfprintf_internal_r+0x5f8>
  8140bc:	01000084 	movi	r4,2
  8140c0:	d8000405 	stb	zero,16(sp)
  8140c4:	003d8706 	br	8136e4 <___vfprintf_internal_r+0xa38>
  8140c8:	d9814c17 	ldw	r6,1328(sp)
  8140cc:	30c4703a 	and	r2,r6,r3
  8140d0:	1005003a 	cmpeq	r2,r2,zero
  8140d4:	103cb926 	beq	r2,zero,8133bc <___vfprintf_internal_r+0x710>
  8140d8:	d9014117 	ldw	r4,1284(sp)
  8140dc:	94800044 	addi	r18,r18,1
  8140e0:	8c400044 	addi	r17,r17,1
  8140e4:	008001c4 	movi	r2,7
  8140e8:	a9000015 	stw	r4,0(r21)
  8140ec:	a8c00115 	stw	r3,4(r21)
  8140f0:	dc800e15 	stw	r18,56(sp)
  8140f4:	dc400d15 	stw	r17,52(sp)
  8140f8:	147e6616 	blt	r2,r17,813a94 <___vfprintf_internal_r+0xde8>
  8140fc:	acc00204 	addi	r19,r21,8
  814100:	003cd706 	br	813460 <___vfprintf_internal_r+0x7b4>
  814104:	070020f4 	movhi	fp,131
  814108:	e7221a84 	addi	fp,fp,-30614
  81410c:	003c4f06 	br	81324c <___vfprintf_internal_r+0x5a0>
  814110:	dd000f04 	addi	r20,sp,60
  814114:	dc801904 	addi	r18,sp,100
  814118:	8009883a 	mov	r4,r16
  81411c:	880b883a 	mov	r5,r17
  814120:	01800284 	movi	r6,10
  814124:	000f883a 	mov	r7,zero
  814128:	0819fa80 	call	819fa8 <__umoddi3>
  81412c:	12000c04 	addi	r8,r2,48
  814130:	94bfffc4 	addi	r18,r18,-1
  814134:	8009883a 	mov	r4,r16
  814138:	880b883a 	mov	r5,r17
  81413c:	01800284 	movi	r6,10
  814140:	000f883a 	mov	r7,zero
  814144:	92000005 	stb	r8,0(r18)
  814148:	08199cc0 	call	8199cc <__udivdi3>
  81414c:	1009883a 	mov	r4,r2
  814150:	1021883a 	mov	r16,r2
  814154:	18800068 	cmpgeui	r2,r3,1
  814158:	1823883a 	mov	r17,r3
  81415c:	103fee1e 	bne	r2,zero,814118 <___vfprintf_internal_r+0x146c>
  814160:	1800021e 	bne	r3,zero,81416c <___vfprintf_internal_r+0x14c0>
  814164:	00800244 	movi	r2,9
  814168:	113feb36 	bltu	r2,r4,814118 <___vfprintf_internal_r+0x146c>
  81416c:	94bfffc4 	addi	r18,r18,-1
  814170:	dc814115 	stw	r18,1284(sp)
  814174:	003fc006 	br	814078 <___vfprintf_internal_r+0x13cc>
  814178:	d9014c17 	ldw	r4,1328(sp)
  81417c:	2080004c 	andi	r2,r4,1
  814180:	10009a1e 	bne	r2,zero,8143ec <___vfprintf_internal_r+0x1740>
  814184:	d9401904 	addi	r5,sp,100
  814188:	dd000f04 	addi	r20,sp,60
  81418c:	d9414115 	stw	r5,1284(sp)
  814190:	003d6106 	br	813718 <___vfprintf_internal_r+0xa6c>
  814194:	d9014f17 	ldw	r4,1340(sp)
  814198:	b00b883a 	mov	r5,r22
  81419c:	d9800c04 	addi	r6,sp,48
  8141a0:	0812c540 	call	812c54 <__sprint_r>
  8141a4:	103c791e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  8141a8:	dc800e17 	ldw	r18,56(sp)
  8141ac:	d8c01904 	addi	r3,sp,100
  8141b0:	003cff06 	br	8135b0 <___vfprintf_internal_r+0x904>
  8141b4:	d8c14c17 	ldw	r3,1328(sp)
  8141b8:	1880040c 	andi	r2,r3,16
  8141bc:	1000711e 	bne	r2,zero,814384 <___vfprintf_internal_r+0x16d8>
  8141c0:	d9014c17 	ldw	r4,1328(sp)
  8141c4:	2080100c 	andi	r2,r4,64
  8141c8:	10006e26 	beq	r2,zero,814384 <___vfprintf_internal_r+0x16d8>
  8141cc:	3c00000b 	ldhu	r16,0(r7)
  8141d0:	0023883a 	mov	r17,zero
  8141d4:	39c00104 	addi	r7,r7,4
  8141d8:	d9c14015 	stw	r7,1280(sp)
  8141dc:	003f0006 	br	813de0 <___vfprintf_internal_r+0x1134>
  8141e0:	dc400d17 	ldw	r17,52(sp)
  8141e4:	070020f4 	movhi	fp,131
  8141e8:	e7221a84 	addi	fp,fp,-30614
  8141ec:	9425883a 	add	r18,r18,r16
  8141f0:	8c400044 	addi	r17,r17,1
  8141f4:	008001c4 	movi	r2,7
  8141f8:	1f000015 	stw	fp,0(r3)
  8141fc:	1c000115 	stw	r16,4(r3)
  814200:	dc800e15 	stw	r18,56(sp)
  814204:	dc400d15 	stw	r17,52(sp)
  814208:	147d7616 	blt	r2,r17,8137e4 <___vfprintf_internal_r+0xb38>
  81420c:	18c00204 	addi	r3,r3,8
  814210:	003d7b06 	br	813800 <___vfprintf_internal_r+0xb54>
  814214:	dc800e17 	ldw	r18,56(sp)
  814218:	dc400d17 	ldw	r17,52(sp)
  81421c:	070020f4 	movhi	fp,131
  814220:	e7221e84 	addi	fp,fp,-30598
  814224:	003bc006 	br	813128 <___vfprintf_internal_r+0x47c>
  814228:	d9014f17 	ldw	r4,1340(sp)
  81422c:	b00b883a 	mov	r5,r22
  814230:	d9800c04 	addi	r6,sp,48
  814234:	0812c540 	call	812c54 <__sprint_r>
  814238:	103c541e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  81423c:	dc800e17 	ldw	r18,56(sp)
  814240:	d8c01904 	addi	r3,sp,100
  814244:	003ce906 	br	8135ec <___vfprintf_internal_r+0x940>
  814248:	3c000017 	ldw	r16,0(r7)
  81424c:	0009883a 	mov	r4,zero
  814250:	39c00104 	addi	r7,r7,4
  814254:	0023883a 	mov	r17,zero
  814258:	d9c14015 	stw	r7,1280(sp)
  81425c:	d8000405 	stb	zero,16(sp)
  814260:	003d2006 	br	8136e4 <___vfprintf_internal_r+0xa38>
  814264:	38800017 	ldw	r2,0(r7)
  814268:	39c00104 	addi	r7,r7,4
  81426c:	d9c14015 	stw	r7,1280(sp)
  814270:	1023d7fa 	srai	r17,r2,31
  814274:	1021883a 	mov	r16,r2
  814278:	003d1806 	br	8136dc <___vfprintf_internal_r+0xa30>
  81427c:	3c000017 	ldw	r16,0(r7)
  814280:	01000044 	movi	r4,1
  814284:	39c00104 	addi	r7,r7,4
  814288:	0023883a 	mov	r17,zero
  81428c:	d9c14015 	stw	r7,1280(sp)
  814290:	d8000405 	stb	zero,16(sp)
  814294:	003d1306 	br	8136e4 <___vfprintf_internal_r+0xa38>
  814298:	008020f4 	movhi	r2,131
  81429c:	10a21a04 	addi	r2,r2,-30616
  8142a0:	94800044 	addi	r18,r18,1
  8142a4:	8c400044 	addi	r17,r17,1
  8142a8:	a8800015 	stw	r2,0(r21)
  8142ac:	00c00044 	movi	r3,1
  8142b0:	008001c4 	movi	r2,7
  8142b4:	a8c00115 	stw	r3,4(r21)
  8142b8:	dc800e15 	stw	r18,56(sp)
  8142bc:	dc400d15 	stw	r17,52(sp)
  8142c0:	1440ca16 	blt	r2,r17,8145ec <___vfprintf_internal_r+0x1940>
  8142c4:	a8c00204 	addi	r3,r21,8
  8142c8:	2000061e 	bne	r4,zero,8142e4 <___vfprintf_internal_r+0x1638>
  8142cc:	d9414717 	ldw	r5,1308(sp)
  8142d0:	2800041e 	bne	r5,zero,8142e4 <___vfprintf_internal_r+0x1638>
  8142d4:	d9814c17 	ldw	r6,1328(sp)
  8142d8:	3080004c 	andi	r2,r6,1
  8142dc:	1005003a 	cmpeq	r2,r2,zero
  8142e0:	103bf01e 	bne	r2,zero,8132a4 <___vfprintf_internal_r+0x5f8>
  8142e4:	00800044 	movi	r2,1
  8142e8:	dc400d17 	ldw	r17,52(sp)
  8142ec:	18800115 	stw	r2,4(r3)
  8142f0:	d8814917 	ldw	r2,1316(sp)
  8142f4:	94800044 	addi	r18,r18,1
  8142f8:	8c400044 	addi	r17,r17,1
  8142fc:	18800015 	stw	r2,0(r3)
  814300:	008001c4 	movi	r2,7
  814304:	dc800e15 	stw	r18,56(sp)
  814308:	dc400d15 	stw	r17,52(sp)
  81430c:	1440ca16 	blt	r2,r17,814638 <___vfprintf_internal_r+0x198c>
  814310:	18c00204 	addi	r3,r3,8
  814314:	0121c83a 	sub	r16,zero,r4
  814318:	0400500e 	bge	zero,r16,81445c <___vfprintf_internal_r+0x17b0>
  81431c:	00800404 	movi	r2,16
  814320:	1400800e 	bge	r2,r16,814524 <___vfprintf_internal_r+0x1878>
  814324:	1027883a 	mov	r19,r2
  814328:	070020f4 	movhi	fp,131
  81432c:	e7221a84 	addi	fp,fp,-30614
  814330:	050001c4 	movi	r20,7
  814334:	00000306 	br	814344 <___vfprintf_internal_r+0x1698>
  814338:	18c00204 	addi	r3,r3,8
  81433c:	843ffc04 	addi	r16,r16,-16
  814340:	9c007a0e 	bge	r19,r16,81452c <___vfprintf_internal_r+0x1880>
  814344:	94800404 	addi	r18,r18,16
  814348:	8c400044 	addi	r17,r17,1
  81434c:	1f000015 	stw	fp,0(r3)
  814350:	1cc00115 	stw	r19,4(r3)
  814354:	dc800e15 	stw	r18,56(sp)
  814358:	dc400d15 	stw	r17,52(sp)
  81435c:	a47ff60e 	bge	r20,r17,814338 <___vfprintf_internal_r+0x168c>
  814360:	d9014f17 	ldw	r4,1340(sp)
  814364:	b00b883a 	mov	r5,r22
  814368:	d9800c04 	addi	r6,sp,48
  81436c:	0812c540 	call	812c54 <__sprint_r>
  814370:	103c061e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  814374:	dc800e17 	ldw	r18,56(sp)
  814378:	dc400d17 	ldw	r17,52(sp)
  81437c:	d8c01904 	addi	r3,sp,100
  814380:	003fee06 	br	81433c <___vfprintf_internal_r+0x1690>
  814384:	3c000017 	ldw	r16,0(r7)
  814388:	0023883a 	mov	r17,zero
  81438c:	39c00104 	addi	r7,r7,4
  814390:	d9c14015 	stw	r7,1280(sp)
  814394:	003e9206 	br	813de0 <___vfprintf_internal_r+0x1134>
  814398:	d9401904 	addi	r5,sp,100
  81439c:	dd000f04 	addi	r20,sp,60
  8143a0:	d9414115 	stw	r5,1284(sp)
  8143a4:	d9814417 	ldw	r6,1296(sp)
  8143a8:	880a973a 	slli	r5,r17,28
  8143ac:	8004d13a 	srli	r2,r16,4
  8143b0:	810003cc 	andi	r4,r16,15
  8143b4:	3109883a 	add	r4,r6,r4
  8143b8:	2884b03a 	or	r2,r5,r2
  8143bc:	21400003 	ldbu	r5,0(r4)
  8143c0:	d9014117 	ldw	r4,1284(sp)
  8143c4:	8806d13a 	srli	r3,r17,4
  8143c8:	1021883a 	mov	r16,r2
  8143cc:	213fffc4 	addi	r4,r4,-1
  8143d0:	d9014115 	stw	r4,1284(sp)
  8143d4:	d9814117 	ldw	r6,1284(sp)
  8143d8:	10c8b03a 	or	r4,r2,r3
  8143dc:	1823883a 	mov	r17,r3
  8143e0:	31400005 	stb	r5,0(r6)
  8143e4:	203fef1e 	bne	r4,zero,8143a4 <___vfprintf_internal_r+0x16f8>
  8143e8:	003ccb06 	br	813718 <___vfprintf_internal_r+0xa6c>
  8143ec:	00800c04 	movi	r2,48
  8143f0:	d98018c4 	addi	r6,sp,99
  8143f4:	dd000f04 	addi	r20,sp,60
  8143f8:	d88018c5 	stb	r2,99(sp)
  8143fc:	d9814115 	stw	r6,1284(sp)
  814400:	003cc506 	br	813718 <___vfprintf_internal_r+0xa6c>
  814404:	dc400d17 	ldw	r17,52(sp)
  814408:	070020f4 	movhi	fp,131
  81440c:	e7221e84 	addi	fp,fp,-30598
  814410:	003bc706 	br	813330 <___vfprintf_internal_r+0x684>
  814414:	d9414c17 	ldw	r5,1328(sp)
  814418:	2880040c 	andi	r2,r5,16
  81441c:	10007c26 	beq	r2,zero,814610 <___vfprintf_internal_r+0x1964>
  814420:	38800017 	ldw	r2,0(r7)
  814424:	39c00104 	addi	r7,r7,4
  814428:	d9c14015 	stw	r7,1280(sp)
  81442c:	d9814b17 	ldw	r6,1324(sp)
  814430:	d9c14017 	ldw	r7,1280(sp)
  814434:	11800015 	stw	r6,0(r2)
  814438:	003a7806 	br	812e1c <___vfprintf_internal_r+0x170>
  81443c:	d9014f17 	ldw	r4,1340(sp)
  814440:	b00b883a 	mov	r5,r22
  814444:	d9800c04 	addi	r6,sp,48
  814448:	0812c540 	call	812c54 <__sprint_r>
  81444c:	103bcf1e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  814450:	dc800e17 	ldw	r18,56(sp)
  814454:	dc400d17 	ldw	r17,52(sp)
  814458:	d8c01904 	addi	r3,sp,100
  81445c:	d9014717 	ldw	r4,1308(sp)
  814460:	d9414117 	ldw	r5,1284(sp)
  814464:	8c400044 	addi	r17,r17,1
  814468:	9125883a 	add	r18,r18,r4
  81446c:	008001c4 	movi	r2,7
  814470:	19400015 	stw	r5,0(r3)
  814474:	19000115 	stw	r4,4(r3)
  814478:	dc800e15 	stw	r18,56(sp)
  81447c:	dc400d15 	stw	r17,52(sp)
  814480:	147cee16 	blt	r2,r17,81383c <___vfprintf_internal_r+0xb90>
  814484:	18c00204 	addi	r3,r3,8
  814488:	003b8606 	br	8132a4 <___vfprintf_internal_r+0x5f8>
  81448c:	38c00017 	ldw	r3,0(r7)
  814490:	39000204 	addi	r4,r7,8
  814494:	d9014015 	stw	r4,1280(sp)
  814498:	d8c14215 	stw	r3,1288(sp)
  81449c:	39c00117 	ldw	r7,4(r7)
  8144a0:	d9c14315 	stw	r7,1292(sp)
  8144a4:	003e2006 	br	813d28 <___vfprintf_internal_r+0x107c>
  8144a8:	0005883a 	mov	r2,zero
  8144ac:	1409c83a 	sub	r4,r2,r16
  8144b0:	1105803a 	cmpltu	r2,r2,r4
  8144b4:	044bc83a 	sub	r5,zero,r17
  8144b8:	2885c83a 	sub	r2,r5,r2
  8144bc:	2021883a 	mov	r16,r4
  8144c0:	1023883a 	mov	r17,r2
  8144c4:	01000044 	movi	r4,1
  8144c8:	00800b44 	movi	r2,45
  8144cc:	d8800405 	stb	r2,16(sp)
  8144d0:	003c8406 	br	8136e4 <___vfprintf_internal_r+0xa38>
  8144d4:	d9014f17 	ldw	r4,1340(sp)
  8144d8:	b00b883a 	mov	r5,r22
  8144dc:	d9800c04 	addi	r6,sp,48
  8144e0:	0812c540 	call	812c54 <__sprint_r>
  8144e4:	103ba91e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  8144e8:	dc800e17 	ldw	r18,56(sp)
  8144ec:	dc400d17 	ldw	r17,52(sp)
  8144f0:	d9000517 	ldw	r4,20(sp)
  8144f4:	d9401904 	addi	r5,sp,100
  8144f8:	003da706 	br	813b98 <___vfprintf_internal_r+0xeec>
  8144fc:	d9014f17 	ldw	r4,1340(sp)
  814500:	b00b883a 	mov	r5,r22
  814504:	d9800c04 	addi	r6,sp,48
  814508:	0812c540 	call	812c54 <__sprint_r>
  81450c:	103b9f1e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  814510:	dc800e17 	ldw	r18,56(sp)
  814514:	dc400d17 	ldw	r17,52(sp)
  814518:	d9000517 	ldw	r4,20(sp)
  81451c:	d8c01904 	addi	r3,sp,100
  814520:	003d9106 	br	813b68 <___vfprintf_internal_r+0xebc>
  814524:	070020f4 	movhi	fp,131
  814528:	e7221a84 	addi	fp,fp,-30614
  81452c:	9425883a 	add	r18,r18,r16
  814530:	8c400044 	addi	r17,r17,1
  814534:	008001c4 	movi	r2,7
  814538:	1f000015 	stw	fp,0(r3)
  81453c:	1c000115 	stw	r16,4(r3)
  814540:	dc800e15 	stw	r18,56(sp)
  814544:	dc400d15 	stw	r17,52(sp)
  814548:	147fbc16 	blt	r2,r17,81443c <___vfprintf_internal_r+0x1790>
  81454c:	18c00204 	addi	r3,r3,8
  814550:	003fc206 	br	81445c <___vfprintf_internal_r+0x17b0>
  814554:	d9014f17 	ldw	r4,1340(sp)
  814558:	b00b883a 	mov	r5,r22
  81455c:	d9800c04 	addi	r6,sp,48
  814560:	0812c540 	call	812c54 <__sprint_r>
  814564:	103b891e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  814568:	dc800e17 	ldw	r18,56(sp)
  81456c:	d9000517 	ldw	r4,20(sp)
  814570:	d8c01904 	addi	r3,sp,100
  814574:	003d0206 	br	813980 <___vfprintf_internal_r+0xcd4>
  814578:	070020f4 	movhi	fp,131
  81457c:	e7221a84 	addi	fp,fp,-30614
  814580:	003be406 	br	813514 <___vfprintf_internal_r+0x868>
  814584:	008020f4 	movhi	r2,131
  814588:	10a20904 	addi	r2,r2,-30684
  81458c:	d8814115 	stw	r2,1284(sp)
  814590:	003df506 	br	813d68 <___vfprintf_internal_r+0x10bc>
  814594:	d9014217 	ldw	r4,1288(sp)
  814598:	d9414317 	ldw	r5,1292(sp)
  81459c:	080f4280 	call	80f428 <__isnand>
  8145a0:	10003926 	beq	r2,zero,814688 <___vfprintf_internal_r+0x19dc>
  8145a4:	d9414d17 	ldw	r5,1332(sp)
  8145a8:	008011c4 	movi	r2,71
  8145ac:	1140ce16 	blt	r2,r5,8148e8 <___vfprintf_internal_r+0x1c3c>
  8145b0:	018020f4 	movhi	r6,131
  8145b4:	31a20a04 	addi	r6,r6,-30680
  8145b8:	d9814115 	stw	r6,1284(sp)
  8145bc:	003dea06 	br	813d68 <___vfprintf_internal_r+0x10bc>
  8145c0:	d9014c17 	ldw	r4,1328(sp)
  8145c4:	bdc00044 	addi	r23,r23,1
  8145c8:	b8c00007 	ldb	r3,0(r23)
  8145cc:	21000814 	ori	r4,r4,32
  8145d0:	d9014c15 	stw	r4,1328(sp)
  8145d4:	003a3406 	br	812ea8 <___vfprintf_internal_r+0x1fc>
  8145d8:	dcc14515 	stw	r19,1300(sp)
  8145dc:	98011016 	blt	r19,zero,814a20 <___vfprintf_internal_r+0x1d74>
  8145e0:	980f883a 	mov	r7,r19
  8145e4:	d8014615 	stw	zero,1304(sp)
  8145e8:	003c5206 	br	813734 <___vfprintf_internal_r+0xa88>
  8145ec:	d9014f17 	ldw	r4,1340(sp)
  8145f0:	b00b883a 	mov	r5,r22
  8145f4:	d9800c04 	addi	r6,sp,48
  8145f8:	0812c540 	call	812c54 <__sprint_r>
  8145fc:	103b631e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  814600:	dc800e17 	ldw	r18,56(sp)
  814604:	d9000517 	ldw	r4,20(sp)
  814608:	d8c01904 	addi	r3,sp,100
  81460c:	003f2e06 	br	8142c8 <___vfprintf_internal_r+0x161c>
  814610:	d8c14c17 	ldw	r3,1328(sp)
  814614:	1880100c 	andi	r2,r3,64
  814618:	1000a026 	beq	r2,zero,81489c <___vfprintf_internal_r+0x1bf0>
  81461c:	38800017 	ldw	r2,0(r7)
  814620:	39c00104 	addi	r7,r7,4
  814624:	d9c14015 	stw	r7,1280(sp)
  814628:	d9014b17 	ldw	r4,1324(sp)
  81462c:	d9c14017 	ldw	r7,1280(sp)
  814630:	1100000d 	sth	r4,0(r2)
  814634:	0039f906 	br	812e1c <___vfprintf_internal_r+0x170>
  814638:	d9014f17 	ldw	r4,1340(sp)
  81463c:	b00b883a 	mov	r5,r22
  814640:	d9800c04 	addi	r6,sp,48
  814644:	0812c540 	call	812c54 <__sprint_r>
  814648:	103b501e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  81464c:	dc800e17 	ldw	r18,56(sp)
  814650:	dc400d17 	ldw	r17,52(sp)
  814654:	d9000517 	ldw	r4,20(sp)
  814658:	d8c01904 	addi	r3,sp,100
  81465c:	003f2d06 	br	814314 <___vfprintf_internal_r+0x1668>
  814660:	00800184 	movi	r2,6
  814664:	14c09a36 	bltu	r2,r19,8148d0 <___vfprintf_internal_r+0x1c24>
  814668:	dcc14515 	stw	r19,1300(sp)
  81466c:	9800010e 	bge	r19,zero,814674 <___vfprintf_internal_r+0x19c8>
  814670:	d8014515 	stw	zero,1300(sp)
  814674:	008020f4 	movhi	r2,131
  814678:	10a20c04 	addi	r2,r2,-30672
  81467c:	980f883a 	mov	r7,r19
  814680:	d8814115 	stw	r2,1284(sp)
  814684:	003a7806 	br	813068 <___vfprintf_internal_r+0x3bc>
  814688:	00bfffc4 	movi	r2,-1
  81468c:	9880e226 	beq	r19,r2,814a18 <___vfprintf_internal_r+0x1d6c>
  814690:	d9414d17 	ldw	r5,1332(sp)
  814694:	008019c4 	movi	r2,103
  814698:	2880dc26 	beq	r5,r2,814a0c <___vfprintf_internal_r+0x1d60>
  81469c:	008011c4 	movi	r2,71
  8146a0:	2880da26 	beq	r5,r2,814a0c <___vfprintf_internal_r+0x1d60>
  8146a4:	d9414c17 	ldw	r5,1328(sp)
  8146a8:	d9014317 	ldw	r4,1292(sp)
  8146ac:	d9814217 	ldw	r6,1288(sp)
  8146b0:	29404014 	ori	r5,r5,256
  8146b4:	d9414c15 	stw	r5,1328(sp)
  8146b8:	2000cc16 	blt	r4,zero,8149ec <___vfprintf_internal_r+0x1d40>
  8146bc:	3021883a 	mov	r16,r6
  8146c0:	2023883a 	mov	r17,r4
  8146c4:	0039883a 	mov	fp,zero
  8146c8:	d9414d17 	ldw	r5,1332(sp)
  8146cc:	00801984 	movi	r2,102
  8146d0:	2880b726 	beq	r5,r2,8149b0 <___vfprintf_internal_r+0x1d04>
  8146d4:	00801184 	movi	r2,70
  8146d8:	2880b526 	beq	r5,r2,8149b0 <___vfprintf_internal_r+0x1d04>
  8146dc:	00801944 	movi	r2,101
  8146e0:	2880c826 	beq	r5,r2,814a04 <___vfprintf_internal_r+0x1d58>
  8146e4:	00801144 	movi	r2,69
  8146e8:	2880c626 	beq	r5,r2,814a04 <___vfprintf_internal_r+0x1d58>
  8146ec:	9829883a 	mov	r20,r19
  8146f0:	d9014f17 	ldw	r4,1340(sp)
  8146f4:	d8800504 	addi	r2,sp,20
  8146f8:	880d883a 	mov	r6,r17
  8146fc:	d8800115 	stw	r2,4(sp)
  814700:	d8c00604 	addi	r3,sp,24
  814704:	d8800704 	addi	r2,sp,28
  814708:	800b883a 	mov	r5,r16
  81470c:	01c00084 	movi	r7,2
  814710:	d8c00215 	stw	r3,8(sp)
  814714:	d8800315 	stw	r2,12(sp)
  814718:	dd000015 	stw	r20,0(sp)
  81471c:	0814ed00 	call	814ed0 <_dtoa_r>
  814720:	d9814d17 	ldw	r6,1332(sp)
  814724:	d8814115 	stw	r2,1284(sp)
  814728:	008019c4 	movi	r2,103
  81472c:	30809526 	beq	r6,r2,814984 <___vfprintf_internal_r+0x1cd8>
  814730:	d8c14d17 	ldw	r3,1332(sp)
  814734:	008011c4 	movi	r2,71
  814738:	18809226 	beq	r3,r2,814984 <___vfprintf_internal_r+0x1cd8>
  81473c:	d9414117 	ldw	r5,1284(sp)
  814740:	d9814d17 	ldw	r6,1332(sp)
  814744:	00801984 	movi	r2,102
  814748:	2d25883a 	add	r18,r5,r20
  81474c:	30808626 	beq	r6,r2,814968 <___vfprintf_internal_r+0x1cbc>
  814750:	00801184 	movi	r2,70
  814754:	30808426 	beq	r6,r2,814968 <___vfprintf_internal_r+0x1cbc>
  814758:	000d883a 	mov	r6,zero
  81475c:	000f883a 	mov	r7,zero
  814760:	880b883a 	mov	r5,r17
  814764:	8009883a 	mov	r4,r16
  814768:	0810c4c0 	call	810c4c <__eqdf2>
  81476c:	1000751e 	bne	r2,zero,814944 <___vfprintf_internal_r+0x1c98>
  814770:	9005883a 	mov	r2,r18
  814774:	dc800715 	stw	r18,28(sp)
  814778:	d9014117 	ldw	r4,1284(sp)
  81477c:	d9414d17 	ldw	r5,1332(sp)
  814780:	00c019c4 	movi	r3,103
  814784:	1125c83a 	sub	r18,r2,r4
  814788:	28c06826 	beq	r5,r3,81492c <___vfprintf_internal_r+0x1c80>
  81478c:	008011c4 	movi	r2,71
  814790:	28806626 	beq	r5,r2,81492c <___vfprintf_internal_r+0x1c80>
  814794:	d9000517 	ldw	r4,20(sp)
  814798:	d8c14d17 	ldw	r3,1332(sp)
  81479c:	00801944 	movi	r2,101
  8147a0:	10c05516 	blt	r2,r3,8148f8 <___vfprintf_internal_r+0x1c4c>
  8147a4:	213fffc4 	addi	r4,r4,-1
  8147a8:	d9000515 	stw	r4,20(sp)
  8147ac:	d8c00805 	stb	r3,32(sp)
  8147b0:	2021883a 	mov	r16,r4
  8147b4:	2000c116 	blt	r4,zero,814abc <___vfprintf_internal_r+0x1e10>
  8147b8:	00800ac4 	movi	r2,43
  8147bc:	d8800845 	stb	r2,33(sp)
  8147c0:	00800244 	movi	r2,9
  8147c4:	1400af0e 	bge	r2,r16,814a84 <___vfprintf_internal_r+0x1dd8>
  8147c8:	1027883a 	mov	r19,r2
  8147cc:	dc400b84 	addi	r17,sp,46
  8147d0:	8009883a 	mov	r4,r16
  8147d4:	01400284 	movi	r5,10
  8147d8:	08111740 	call	811174 <__modsi3>
  8147dc:	10800c04 	addi	r2,r2,48
  8147e0:	8c7fffc4 	addi	r17,r17,-1
  8147e4:	8009883a 	mov	r4,r16
  8147e8:	01400284 	movi	r5,10
  8147ec:	88800005 	stb	r2,0(r17)
  8147f0:	08111140 	call	811114 <__divsi3>
  8147f4:	1021883a 	mov	r16,r2
  8147f8:	98bff516 	blt	r19,r2,8147d0 <___vfprintf_internal_r+0x1b24>
  8147fc:	10c00c04 	addi	r3,r2,48
  814800:	d88009c4 	addi	r2,sp,39
  814804:	108001c4 	addi	r2,r2,7
  814808:	897fffc4 	addi	r5,r17,-1
  81480c:	88ffffc5 	stb	r3,-1(r17)
  814810:	2880a72e 	bgeu	r5,r2,814ab0 <___vfprintf_internal_r+0x1e04>
  814814:	1009883a 	mov	r4,r2
  814818:	d9800804 	addi	r6,sp,32
  81481c:	d8c00884 	addi	r3,sp,34
  814820:	28800003 	ldbu	r2,0(r5)
  814824:	29400044 	addi	r5,r5,1
  814828:	18800005 	stb	r2,0(r3)
  81482c:	18c00044 	addi	r3,r3,1
  814830:	293ffb36 	bltu	r5,r4,814820 <___vfprintf_internal_r+0x1b74>
  814834:	1987c83a 	sub	r3,r3,r6
  814838:	00800044 	movi	r2,1
  81483c:	d8c14815 	stw	r3,1312(sp)
  814840:	90cf883a 	add	r7,r18,r3
  814844:	1480960e 	bge	r2,r18,814aa0 <___vfprintf_internal_r+0x1df4>
  814848:	39c00044 	addi	r7,r7,1
  81484c:	d9c14515 	stw	r7,1300(sp)
  814850:	38003416 	blt	r7,zero,814924 <___vfprintf_internal_r+0x1c78>
  814854:	e0803fcc 	andi	r2,fp,255
  814858:	1080201c 	xori	r2,r2,128
  81485c:	10bfe004 	addi	r2,r2,-128
  814860:	10004e26 	beq	r2,zero,81499c <___vfprintf_internal_r+0x1cf0>
  814864:	00800b44 	movi	r2,45
  814868:	dc814715 	stw	r18,1308(sp)
  81486c:	d8014615 	stw	zero,1304(sp)
  814870:	d8800405 	stb	r2,16(sp)
  814874:	003bb106 	br	81373c <___vfprintf_internal_r+0xa90>
  814878:	00800b44 	movi	r2,45
  81487c:	d8800405 	stb	r2,16(sp)
  814880:	003d3306 	br	813d50 <___vfprintf_internal_r+0x10a4>
  814884:	d9014f17 	ldw	r4,1340(sp)
  814888:	b00b883a 	mov	r5,r22
  81488c:	d9800c04 	addi	r6,sp,48
  814890:	0812c540 	call	812c54 <__sprint_r>
  814894:	103abd1e 	bne	r2,zero,81338c <___vfprintf_internal_r+0x6e0>
  814898:	003abb06 	br	813388 <___vfprintf_internal_r+0x6dc>
  81489c:	38800017 	ldw	r2,0(r7)
  8148a0:	39c00104 	addi	r7,r7,4
  8148a4:	d9c14015 	stw	r7,1280(sp)
  8148a8:	d9414b17 	ldw	r5,1324(sp)
  8148ac:	d9c14017 	ldw	r7,1280(sp)
  8148b0:	11400015 	stw	r5,0(r2)
  8148b4:	00395906 	br	812e1c <___vfprintf_internal_r+0x170>
  8148b8:	980f883a 	mov	r7,r19
  8148bc:	dcc14515 	stw	r19,1300(sp)
  8148c0:	d8014615 	stw	zero,1304(sp)
  8148c4:	003b9b06 	br	813734 <___vfprintf_internal_r+0xa88>
  8148c8:	0027883a 	mov	r19,zero
  8148cc:	00397806 	br	812eb0 <___vfprintf_internal_r+0x204>
  8148d0:	00c020f4 	movhi	r3,131
  8148d4:	18e20c04 	addi	r3,r3,-30672
  8148d8:	100f883a 	mov	r7,r2
  8148dc:	d8814515 	stw	r2,1300(sp)
  8148e0:	d8c14115 	stw	r3,1284(sp)
  8148e4:	0039e006 	br	813068 <___vfprintf_internal_r+0x3bc>
  8148e8:	008020f4 	movhi	r2,131
  8148ec:	10a20b04 	addi	r2,r2,-30676
  8148f0:	d8814115 	stw	r2,1284(sp)
  8148f4:	003d1c06 	br	813d68 <___vfprintf_internal_r+0x10bc>
  8148f8:	d9414d17 	ldw	r5,1332(sp)
  8148fc:	00801984 	movi	r2,102
  814900:	28804926 	beq	r5,r2,814a28 <___vfprintf_internal_r+0x1d7c>
  814904:	200f883a 	mov	r7,r4
  814908:	24805716 	blt	r4,r18,814a68 <___vfprintf_internal_r+0x1dbc>
  81490c:	d9414c17 	ldw	r5,1328(sp)
  814910:	2880004c 	andi	r2,r5,1
  814914:	10000126 	beq	r2,zero,81491c <___vfprintf_internal_r+0x1c70>
  814918:	21c00044 	addi	r7,r4,1
  81491c:	d9c14515 	stw	r7,1300(sp)
  814920:	383fcc0e 	bge	r7,zero,814854 <___vfprintf_internal_r+0x1ba8>
  814924:	d8014515 	stw	zero,1300(sp)
  814928:	003fca06 	br	814854 <___vfprintf_internal_r+0x1ba8>
  81492c:	d9000517 	ldw	r4,20(sp)
  814930:	00bfff04 	movi	r2,-4
  814934:	1100480e 	bge	r2,r4,814a58 <___vfprintf_internal_r+0x1dac>
  814938:	99004716 	blt	r19,r4,814a58 <___vfprintf_internal_r+0x1dac>
  81493c:	d8c14d15 	stw	r3,1332(sp)
  814940:	003ff006 	br	814904 <___vfprintf_internal_r+0x1c58>
  814944:	d8800717 	ldw	r2,28(sp)
  814948:	14bf8b2e 	bgeu	r2,r18,814778 <___vfprintf_internal_r+0x1acc>
  81494c:	9007883a 	mov	r3,r18
  814950:	01000c04 	movi	r4,48
  814954:	11000005 	stb	r4,0(r2)
  814958:	10800044 	addi	r2,r2,1
  81495c:	d8800715 	stw	r2,28(sp)
  814960:	18bffc1e 	bne	r3,r2,814954 <___vfprintf_internal_r+0x1ca8>
  814964:	003f8406 	br	814778 <___vfprintf_internal_r+0x1acc>
  814968:	d8814117 	ldw	r2,1284(sp)
  81496c:	10c00007 	ldb	r3,0(r2)
  814970:	00800c04 	movi	r2,48
  814974:	18805b26 	beq	r3,r2,814ae4 <___vfprintf_internal_r+0x1e38>
  814978:	d9000517 	ldw	r4,20(sp)
  81497c:	9125883a 	add	r18,r18,r4
  814980:	003f7506 	br	814758 <___vfprintf_internal_r+0x1aac>
  814984:	d9014c17 	ldw	r4,1328(sp)
  814988:	2080004c 	andi	r2,r4,1
  81498c:	1005003a 	cmpeq	r2,r2,zero
  814990:	103f6a26 	beq	r2,zero,81473c <___vfprintf_internal_r+0x1a90>
  814994:	d8800717 	ldw	r2,28(sp)
  814998:	003f7706 	br	814778 <___vfprintf_internal_r+0x1acc>
  81499c:	d9c14515 	stw	r7,1300(sp)
  8149a0:	38004d16 	blt	r7,zero,814ad8 <___vfprintf_internal_r+0x1e2c>
  8149a4:	dc814715 	stw	r18,1308(sp)
  8149a8:	d8014615 	stw	zero,1304(sp)
  8149ac:	003b6106 	br	813734 <___vfprintf_internal_r+0xa88>
  8149b0:	d9014f17 	ldw	r4,1340(sp)
  8149b4:	d8800504 	addi	r2,sp,20
  8149b8:	d8800115 	stw	r2,4(sp)
  8149bc:	d8c00604 	addi	r3,sp,24
  8149c0:	d8800704 	addi	r2,sp,28
  8149c4:	800b883a 	mov	r5,r16
  8149c8:	880d883a 	mov	r6,r17
  8149cc:	01c000c4 	movi	r7,3
  8149d0:	d8c00215 	stw	r3,8(sp)
  8149d4:	d8800315 	stw	r2,12(sp)
  8149d8:	dcc00015 	stw	r19,0(sp)
  8149dc:	9829883a 	mov	r20,r19
  8149e0:	0814ed00 	call	814ed0 <_dtoa_r>
  8149e4:	d8814115 	stw	r2,1284(sp)
  8149e8:	003f5106 	br	814730 <___vfprintf_internal_r+0x1a84>
  8149ec:	d8c14217 	ldw	r3,1288(sp)
  8149f0:	d9014317 	ldw	r4,1292(sp)
  8149f4:	07000b44 	movi	fp,45
  8149f8:	1821883a 	mov	r16,r3
  8149fc:	2460003c 	xorhi	r17,r4,32768
  814a00:	003f3106 	br	8146c8 <___vfprintf_internal_r+0x1a1c>
  814a04:	9d000044 	addi	r20,r19,1
  814a08:	003f3906 	br	8146f0 <___vfprintf_internal_r+0x1a44>
  814a0c:	983f251e 	bne	r19,zero,8146a4 <___vfprintf_internal_r+0x19f8>
  814a10:	04c00044 	movi	r19,1
  814a14:	003f2306 	br	8146a4 <___vfprintf_internal_r+0x19f8>
  814a18:	04c00184 	movi	r19,6
  814a1c:	003f2106 	br	8146a4 <___vfprintf_internal_r+0x19f8>
  814a20:	d8014515 	stw	zero,1300(sp)
  814a24:	003eee06 	br	8145e0 <___vfprintf_internal_r+0x1934>
  814a28:	200f883a 	mov	r7,r4
  814a2c:	0100370e 	bge	zero,r4,814b0c <___vfprintf_internal_r+0x1e60>
  814a30:	9800031e 	bne	r19,zero,814a40 <___vfprintf_internal_r+0x1d94>
  814a34:	d9814c17 	ldw	r6,1328(sp)
  814a38:	3080004c 	andi	r2,r6,1
  814a3c:	103fb726 	beq	r2,zero,81491c <___vfprintf_internal_r+0x1c70>
  814a40:	20800044 	addi	r2,r4,1
  814a44:	98a7883a 	add	r19,r19,r2
  814a48:	dcc14515 	stw	r19,1300(sp)
  814a4c:	980f883a 	mov	r7,r19
  814a50:	983f800e 	bge	r19,zero,814854 <___vfprintf_internal_r+0x1ba8>
  814a54:	003fb306 	br	814924 <___vfprintf_internal_r+0x1c78>
  814a58:	d9814d17 	ldw	r6,1332(sp)
  814a5c:	31bfff84 	addi	r6,r6,-2
  814a60:	d9814d15 	stw	r6,1332(sp)
  814a64:	003f4c06 	br	814798 <___vfprintf_internal_r+0x1aec>
  814a68:	0100180e 	bge	zero,r4,814acc <___vfprintf_internal_r+0x1e20>
  814a6c:	00800044 	movi	r2,1
  814a70:	1485883a 	add	r2,r2,r18
  814a74:	d8814515 	stw	r2,1300(sp)
  814a78:	100f883a 	mov	r7,r2
  814a7c:	103f750e 	bge	r2,zero,814854 <___vfprintf_internal_r+0x1ba8>
  814a80:	003fa806 	br	814924 <___vfprintf_internal_r+0x1c78>
  814a84:	80c00c04 	addi	r3,r16,48
  814a88:	00800c04 	movi	r2,48
  814a8c:	d8c008c5 	stb	r3,35(sp)
  814a90:	d9800804 	addi	r6,sp,32
  814a94:	d8c00904 	addi	r3,sp,36
  814a98:	d8800885 	stb	r2,34(sp)
  814a9c:	003f6506 	br	814834 <___vfprintf_internal_r+0x1b88>
  814aa0:	d9014c17 	ldw	r4,1328(sp)
  814aa4:	2084703a 	and	r2,r4,r2
  814aa8:	103f9c26 	beq	r2,zero,81491c <___vfprintf_internal_r+0x1c70>
  814aac:	003f6606 	br	814848 <___vfprintf_internal_r+0x1b9c>
  814ab0:	d9800804 	addi	r6,sp,32
  814ab4:	d8c00884 	addi	r3,sp,34
  814ab8:	003f5e06 	br	814834 <___vfprintf_internal_r+0x1b88>
  814abc:	00800b44 	movi	r2,45
  814ac0:	0121c83a 	sub	r16,zero,r4
  814ac4:	d8800845 	stb	r2,33(sp)
  814ac8:	003f3d06 	br	8147c0 <___vfprintf_internal_r+0x1b14>
  814acc:	00800084 	movi	r2,2
  814ad0:	1105c83a 	sub	r2,r2,r4
  814ad4:	003fe606 	br	814a70 <___vfprintf_internal_r+0x1dc4>
  814ad8:	d8014515 	stw	zero,1300(sp)
  814adc:	dc814715 	stw	r18,1308(sp)
  814ae0:	003fb106 	br	8149a8 <___vfprintf_internal_r+0x1cfc>
  814ae4:	000d883a 	mov	r6,zero
  814ae8:	000f883a 	mov	r7,zero
  814aec:	8009883a 	mov	r4,r16
  814af0:	880b883a 	mov	r5,r17
  814af4:	0810cd40 	call	810cd4 <__nedf2>
  814af8:	103f9f26 	beq	r2,zero,814978 <___vfprintf_internal_r+0x1ccc>
  814afc:	00800044 	movi	r2,1
  814b00:	1509c83a 	sub	r4,r2,r20
  814b04:	d9000515 	stw	r4,20(sp)
  814b08:	003f9b06 	br	814978 <___vfprintf_internal_r+0x1ccc>
  814b0c:	98000d1e 	bne	r19,zero,814b44 <___vfprintf_internal_r+0x1e98>
  814b10:	d8c14c17 	ldw	r3,1328(sp)
  814b14:	1880004c 	andi	r2,r3,1
  814b18:	10000a1e 	bne	r2,zero,814b44 <___vfprintf_internal_r+0x1e98>
  814b1c:	01000044 	movi	r4,1
  814b20:	200f883a 	mov	r7,r4
  814b24:	d9014515 	stw	r4,1300(sp)
  814b28:	003f4a06 	br	814854 <___vfprintf_internal_r+0x1ba8>
  814b2c:	3cc00017 	ldw	r19,0(r7)
  814b30:	39c00104 	addi	r7,r7,4
  814b34:	983d0e0e 	bge	r19,zero,813f70 <___vfprintf_internal_r+0x12c4>
  814b38:	b8c00007 	ldb	r3,0(r23)
  814b3c:	04ffffc4 	movi	r19,-1
  814b40:	0038d906 	br	812ea8 <___vfprintf_internal_r+0x1fc>
  814b44:	9cc00084 	addi	r19,r19,2
  814b48:	dcc14515 	stw	r19,1300(sp)
  814b4c:	980f883a 	mov	r7,r19
  814b50:	983f400e 	bge	r19,zero,814854 <___vfprintf_internal_r+0x1ba8>
  814b54:	003f7306 	br	814924 <___vfprintf_internal_r+0x1c78>

00814b58 <__vfprintf_internal>:
  814b58:	008020f4 	movhi	r2,131
  814b5c:	10a99904 	addi	r2,r2,-22940
  814b60:	2013883a 	mov	r9,r4
  814b64:	11000017 	ldw	r4,0(r2)
  814b68:	2805883a 	mov	r2,r5
  814b6c:	300f883a 	mov	r7,r6
  814b70:	480b883a 	mov	r5,r9
  814b74:	100d883a 	mov	r6,r2
  814b78:	0812cac1 	jmpi	812cac <___vfprintf_internal_r>

00814b7c <__swsetup_r>:
  814b7c:	008020f4 	movhi	r2,131
  814b80:	10a99904 	addi	r2,r2,-22940
  814b84:	10c00017 	ldw	r3,0(r2)
  814b88:	defffd04 	addi	sp,sp,-12
  814b8c:	dc400115 	stw	r17,4(sp)
  814b90:	dc000015 	stw	r16,0(sp)
  814b94:	dfc00215 	stw	ra,8(sp)
  814b98:	2023883a 	mov	r17,r4
  814b9c:	2821883a 	mov	r16,r5
  814ba0:	18000226 	beq	r3,zero,814bac <__swsetup_r+0x30>
  814ba4:	18800e17 	ldw	r2,56(r3)
  814ba8:	10001f26 	beq	r2,zero,814c28 <__swsetup_r+0xac>
  814bac:	8100030b 	ldhu	r4,12(r16)
  814bb0:	2080020c 	andi	r2,r4,8
  814bb4:	10002826 	beq	r2,zero,814c58 <__swsetup_r+0xdc>
  814bb8:	81400417 	ldw	r5,16(r16)
  814bbc:	28001d26 	beq	r5,zero,814c34 <__swsetup_r+0xb8>
  814bc0:	2080004c 	andi	r2,r4,1
  814bc4:	1005003a 	cmpeq	r2,r2,zero
  814bc8:	10000b26 	beq	r2,zero,814bf8 <__swsetup_r+0x7c>
  814bcc:	2080008c 	andi	r2,r4,2
  814bd0:	10001226 	beq	r2,zero,814c1c <__swsetup_r+0xa0>
  814bd4:	0005883a 	mov	r2,zero
  814bd8:	80800215 	stw	r2,8(r16)
  814bdc:	28000b26 	beq	r5,zero,814c0c <__swsetup_r+0x90>
  814be0:	0005883a 	mov	r2,zero
  814be4:	dfc00217 	ldw	ra,8(sp)
  814be8:	dc400117 	ldw	r17,4(sp)
  814bec:	dc000017 	ldw	r16,0(sp)
  814bf0:	dec00304 	addi	sp,sp,12
  814bf4:	f800283a 	ret
  814bf8:	80800517 	ldw	r2,20(r16)
  814bfc:	80000215 	stw	zero,8(r16)
  814c00:	0085c83a 	sub	r2,zero,r2
  814c04:	80800615 	stw	r2,24(r16)
  814c08:	283ff51e 	bne	r5,zero,814be0 <__swsetup_r+0x64>
  814c0c:	2080200c 	andi	r2,r4,128
  814c10:	103ff326 	beq	r2,zero,814be0 <__swsetup_r+0x64>
  814c14:	00bfffc4 	movi	r2,-1
  814c18:	003ff206 	br	814be4 <__swsetup_r+0x68>
  814c1c:	80800517 	ldw	r2,20(r16)
  814c20:	80800215 	stw	r2,8(r16)
  814c24:	003fed06 	br	814bdc <__swsetup_r+0x60>
  814c28:	1809883a 	mov	r4,r3
  814c2c:	081671c0 	call	81671c <__sinit>
  814c30:	003fde06 	br	814bac <__swsetup_r+0x30>
  814c34:	20c0a00c 	andi	r3,r4,640
  814c38:	00808004 	movi	r2,512
  814c3c:	18bfe026 	beq	r3,r2,814bc0 <__swsetup_r+0x44>
  814c40:	8809883a 	mov	r4,r17
  814c44:	800b883a 	mov	r5,r16
  814c48:	08175e00 	call	8175e0 <__smakebuf_r>
  814c4c:	8100030b 	ldhu	r4,12(r16)
  814c50:	81400417 	ldw	r5,16(r16)
  814c54:	003fda06 	br	814bc0 <__swsetup_r+0x44>
  814c58:	2080040c 	andi	r2,r4,16
  814c5c:	103fed26 	beq	r2,zero,814c14 <__swsetup_r+0x98>
  814c60:	2080010c 	andi	r2,r4,4
  814c64:	10001226 	beq	r2,zero,814cb0 <__swsetup_r+0x134>
  814c68:	81400c17 	ldw	r5,48(r16)
  814c6c:	28000526 	beq	r5,zero,814c84 <__swsetup_r+0x108>
  814c70:	80801004 	addi	r2,r16,64
  814c74:	28800226 	beq	r5,r2,814c80 <__swsetup_r+0x104>
  814c78:	8809883a 	mov	r4,r17
  814c7c:	0816bec0 	call	816bec <_free_r>
  814c80:	80000c15 	stw	zero,48(r16)
  814c84:	8080030b 	ldhu	r2,12(r16)
  814c88:	81400417 	ldw	r5,16(r16)
  814c8c:	80000115 	stw	zero,4(r16)
  814c90:	10bff6cc 	andi	r2,r2,65499
  814c94:	8080030d 	sth	r2,12(r16)
  814c98:	81400015 	stw	r5,0(r16)
  814c9c:	8080030b 	ldhu	r2,12(r16)
  814ca0:	10800214 	ori	r2,r2,8
  814ca4:	113fffcc 	andi	r4,r2,65535
  814ca8:	8080030d 	sth	r2,12(r16)
  814cac:	003fc306 	br	814bbc <__swsetup_r+0x40>
  814cb0:	81400417 	ldw	r5,16(r16)
  814cb4:	003ff906 	br	814c9c <__swsetup_r+0x120>

00814cb8 <quorem>:
  814cb8:	28c00417 	ldw	r3,16(r5)
  814cbc:	20800417 	ldw	r2,16(r4)
  814cc0:	defff604 	addi	sp,sp,-40
  814cc4:	ddc00715 	stw	r23,28(sp)
  814cc8:	dd400515 	stw	r21,20(sp)
  814ccc:	dfc00915 	stw	ra,36(sp)
  814cd0:	df000815 	stw	fp,32(sp)
  814cd4:	dd800615 	stw	r22,24(sp)
  814cd8:	dd000415 	stw	r20,16(sp)
  814cdc:	dcc00315 	stw	r19,12(sp)
  814ce0:	dc800215 	stw	r18,8(sp)
  814ce4:	dc400115 	stw	r17,4(sp)
  814ce8:	dc000015 	stw	r16,0(sp)
  814cec:	202f883a 	mov	r23,r4
  814cf0:	282b883a 	mov	r21,r5
  814cf4:	10c07416 	blt	r2,r3,814ec8 <quorem+0x210>
  814cf8:	1c7fffc4 	addi	r17,r3,-1
  814cfc:	8c45883a 	add	r2,r17,r17
  814d00:	1085883a 	add	r2,r2,r2
  814d04:	2c000504 	addi	r16,r5,20
  814d08:	24c00504 	addi	r19,r4,20
  814d0c:	14ed883a 	add	r22,r2,r19
  814d10:	80a5883a 	add	r18,r16,r2
  814d14:	b7000017 	ldw	fp,0(r22)
  814d18:	91400017 	ldw	r5,0(r18)
  814d1c:	e009883a 	mov	r4,fp
  814d20:	29400044 	addi	r5,r5,1
  814d24:	08111d40 	call	8111d4 <__udivsi3>
  814d28:	1029883a 	mov	r20,r2
  814d2c:	10003c1e 	bne	r2,zero,814e20 <quorem+0x168>
  814d30:	a80b883a 	mov	r5,r21
  814d34:	b809883a 	mov	r4,r23
  814d38:	0817b2c0 	call	817b2c <__mcmp>
  814d3c:	10002b16 	blt	r2,zero,814dec <quorem+0x134>
  814d40:	a5000044 	addi	r20,r20,1
  814d44:	980f883a 	mov	r7,r19
  814d48:	0011883a 	mov	r8,zero
  814d4c:	0009883a 	mov	r4,zero
  814d50:	81400017 	ldw	r5,0(r16)
  814d54:	38c00017 	ldw	r3,0(r7)
  814d58:	84000104 	addi	r16,r16,4
  814d5c:	28bfffcc 	andi	r2,r5,65535
  814d60:	2085883a 	add	r2,r4,r2
  814d64:	11bfffcc 	andi	r6,r2,65535
  814d68:	193fffcc 	andi	r4,r3,65535
  814d6c:	1004d43a 	srli	r2,r2,16
  814d70:	280ad43a 	srli	r5,r5,16
  814d74:	2189c83a 	sub	r4,r4,r6
  814d78:	2209883a 	add	r4,r4,r8
  814d7c:	1806d43a 	srli	r3,r3,16
  814d80:	288b883a 	add	r5,r5,r2
  814d84:	200dd43a 	srai	r6,r4,16
  814d88:	28bfffcc 	andi	r2,r5,65535
  814d8c:	1887c83a 	sub	r3,r3,r2
  814d90:	1987883a 	add	r3,r3,r6
  814d94:	3900000d 	sth	r4,0(r7)
  814d98:	38c0008d 	sth	r3,2(r7)
  814d9c:	2808d43a 	srli	r4,r5,16
  814da0:	39c00104 	addi	r7,r7,4
  814da4:	1811d43a 	srai	r8,r3,16
  814da8:	943fe92e 	bgeu	r18,r16,814d50 <quorem+0x98>
  814dac:	8c45883a 	add	r2,r17,r17
  814db0:	1085883a 	add	r2,r2,r2
  814db4:	9885883a 	add	r2,r19,r2
  814db8:	10c00017 	ldw	r3,0(r2)
  814dbc:	18000b1e 	bne	r3,zero,814dec <quorem+0x134>
  814dc0:	113fff04 	addi	r4,r2,-4
  814dc4:	9900082e 	bgeu	r19,r4,814de8 <quorem+0x130>
  814dc8:	10bfff17 	ldw	r2,-4(r2)
  814dcc:	10000326 	beq	r2,zero,814ddc <quorem+0x124>
  814dd0:	00000506 	br	814de8 <quorem+0x130>
  814dd4:	20800017 	ldw	r2,0(r4)
  814dd8:	1000031e 	bne	r2,zero,814de8 <quorem+0x130>
  814ddc:	213fff04 	addi	r4,r4,-4
  814de0:	8c7fffc4 	addi	r17,r17,-1
  814de4:	993ffb36 	bltu	r19,r4,814dd4 <quorem+0x11c>
  814de8:	bc400415 	stw	r17,16(r23)
  814dec:	a005883a 	mov	r2,r20
  814df0:	dfc00917 	ldw	ra,36(sp)
  814df4:	df000817 	ldw	fp,32(sp)
  814df8:	ddc00717 	ldw	r23,28(sp)
  814dfc:	dd800617 	ldw	r22,24(sp)
  814e00:	dd400517 	ldw	r21,20(sp)
  814e04:	dd000417 	ldw	r20,16(sp)
  814e08:	dcc00317 	ldw	r19,12(sp)
  814e0c:	dc800217 	ldw	r18,8(sp)
  814e10:	dc400117 	ldw	r17,4(sp)
  814e14:	dc000017 	ldw	r16,0(sp)
  814e18:	dec00a04 	addi	sp,sp,40
  814e1c:	f800283a 	ret
  814e20:	980f883a 	mov	r7,r19
  814e24:	8011883a 	mov	r8,r16
  814e28:	0013883a 	mov	r9,zero
  814e2c:	000d883a 	mov	r6,zero
  814e30:	40c00017 	ldw	r3,0(r8)
  814e34:	39000017 	ldw	r4,0(r7)
  814e38:	42000104 	addi	r8,r8,4
  814e3c:	18bfffcc 	andi	r2,r3,65535
  814e40:	a085383a 	mul	r2,r20,r2
  814e44:	1806d43a 	srli	r3,r3,16
  814e48:	217fffcc 	andi	r5,r4,65535
  814e4c:	3085883a 	add	r2,r6,r2
  814e50:	11bfffcc 	andi	r6,r2,65535
  814e54:	a0c7383a 	mul	r3,r20,r3
  814e58:	1004d43a 	srli	r2,r2,16
  814e5c:	298bc83a 	sub	r5,r5,r6
  814e60:	2a4b883a 	add	r5,r5,r9
  814e64:	2008d43a 	srli	r4,r4,16
  814e68:	1887883a 	add	r3,r3,r2
  814e6c:	280dd43a 	srai	r6,r5,16
  814e70:	18bfffcc 	andi	r2,r3,65535
  814e74:	2089c83a 	sub	r4,r4,r2
  814e78:	2189883a 	add	r4,r4,r6
  814e7c:	3900008d 	sth	r4,2(r7)
  814e80:	3940000d 	sth	r5,0(r7)
  814e84:	180cd43a 	srli	r6,r3,16
  814e88:	39c00104 	addi	r7,r7,4
  814e8c:	2013d43a 	srai	r9,r4,16
  814e90:	923fe72e 	bgeu	r18,r8,814e30 <quorem+0x178>
  814e94:	e03fa61e 	bne	fp,zero,814d30 <quorem+0x78>
  814e98:	b0ffff04 	addi	r3,r22,-4
  814e9c:	98c0082e 	bgeu	r19,r3,814ec0 <quorem+0x208>
  814ea0:	b0bfff17 	ldw	r2,-4(r22)
  814ea4:	10000326 	beq	r2,zero,814eb4 <quorem+0x1fc>
  814ea8:	00000506 	br	814ec0 <quorem+0x208>
  814eac:	18800017 	ldw	r2,0(r3)
  814eb0:	1000031e 	bne	r2,zero,814ec0 <quorem+0x208>
  814eb4:	18ffff04 	addi	r3,r3,-4
  814eb8:	8c7fffc4 	addi	r17,r17,-1
  814ebc:	98fffb36 	bltu	r19,r3,814eac <quorem+0x1f4>
  814ec0:	bc400415 	stw	r17,16(r23)
  814ec4:	003f9a06 	br	814d30 <quorem+0x78>
  814ec8:	0005883a 	mov	r2,zero
  814ecc:	003fc806 	br	814df0 <quorem+0x138>

00814ed0 <_dtoa_r>:
  814ed0:	22001017 	ldw	r8,64(r4)
  814ed4:	deffda04 	addi	sp,sp,-152
  814ed8:	dd402115 	stw	r21,132(sp)
  814edc:	dd002015 	stw	r20,128(sp)
  814ee0:	dc801e15 	stw	r18,120(sp)
  814ee4:	dc401d15 	stw	r17,116(sp)
  814ee8:	dfc02515 	stw	ra,148(sp)
  814eec:	df002415 	stw	fp,144(sp)
  814ef0:	ddc02315 	stw	r23,140(sp)
  814ef4:	dd802215 	stw	r22,136(sp)
  814ef8:	dcc01f15 	stw	r19,124(sp)
  814efc:	dc001c15 	stw	r16,112(sp)
  814f00:	d9001615 	stw	r4,88(sp)
  814f04:	3023883a 	mov	r17,r6
  814f08:	2829883a 	mov	r20,r5
  814f0c:	d9c01715 	stw	r7,92(sp)
  814f10:	dc802817 	ldw	r18,160(sp)
  814f14:	302b883a 	mov	r21,r6
  814f18:	40000a26 	beq	r8,zero,814f44 <_dtoa_r+0x74>
  814f1c:	20801117 	ldw	r2,68(r4)
  814f20:	400b883a 	mov	r5,r8
  814f24:	40800115 	stw	r2,4(r8)
  814f28:	20c01117 	ldw	r3,68(r4)
  814f2c:	00800044 	movi	r2,1
  814f30:	10c4983a 	sll	r2,r2,r3
  814f34:	40800215 	stw	r2,8(r8)
  814f38:	08179d00 	call	8179d0 <_Bfree>
  814f3c:	d8c01617 	ldw	r3,88(sp)
  814f40:	18001015 	stw	zero,64(r3)
  814f44:	8800a316 	blt	r17,zero,8151d4 <_dtoa_r+0x304>
  814f48:	90000015 	stw	zero,0(r18)
  814f4c:	a8dffc2c 	andhi	r3,r21,32752
  814f50:	009ffc34 	movhi	r2,32752
  814f54:	18809126 	beq	r3,r2,81519c <_dtoa_r+0x2cc>
  814f58:	000d883a 	mov	r6,zero
  814f5c:	000f883a 	mov	r7,zero
  814f60:	a009883a 	mov	r4,r20
  814f64:	a80b883a 	mov	r5,r21
  814f68:	dd001215 	stw	r20,72(sp)
  814f6c:	dd401315 	stw	r21,76(sp)
  814f70:	0810cd40 	call	810cd4 <__nedf2>
  814f74:	1000171e 	bne	r2,zero,814fd4 <_dtoa_r+0x104>
  814f78:	d9802717 	ldw	r6,156(sp)
  814f7c:	00800044 	movi	r2,1
  814f80:	30800015 	stw	r2,0(r6)
  814f84:	d8802917 	ldw	r2,164(sp)
  814f88:	10029b26 	beq	r2,zero,8159f8 <_dtoa_r+0xb28>
  814f8c:	d9002917 	ldw	r4,164(sp)
  814f90:	008020f4 	movhi	r2,131
  814f94:	10a21a44 	addi	r2,r2,-30615
  814f98:	10ffffc4 	addi	r3,r2,-1
  814f9c:	20800015 	stw	r2,0(r4)
  814fa0:	1805883a 	mov	r2,r3
  814fa4:	dfc02517 	ldw	ra,148(sp)
  814fa8:	df002417 	ldw	fp,144(sp)
  814fac:	ddc02317 	ldw	r23,140(sp)
  814fb0:	dd802217 	ldw	r22,136(sp)
  814fb4:	dd402117 	ldw	r21,132(sp)
  814fb8:	dd002017 	ldw	r20,128(sp)
  814fbc:	dcc01f17 	ldw	r19,124(sp)
  814fc0:	dc801e17 	ldw	r18,120(sp)
  814fc4:	dc401d17 	ldw	r17,116(sp)
  814fc8:	dc001c17 	ldw	r16,112(sp)
  814fcc:	dec02604 	addi	sp,sp,152
  814fd0:	f800283a 	ret
  814fd4:	d9001617 	ldw	r4,88(sp)
  814fd8:	d9401217 	ldw	r5,72(sp)
  814fdc:	d8800104 	addi	r2,sp,4
  814fe0:	a80d883a 	mov	r6,r21
  814fe4:	d9c00204 	addi	r7,sp,8
  814fe8:	d8800015 	stw	r2,0(sp)
  814fec:	081800c0 	call	81800c <__d2b>
  814ff0:	d8800715 	stw	r2,28(sp)
  814ff4:	a804d53a 	srli	r2,r21,20
  814ff8:	1101ffcc 	andi	r4,r2,2047
  814ffc:	20008626 	beq	r4,zero,815218 <_dtoa_r+0x348>
  815000:	d8c01217 	ldw	r3,72(sp)
  815004:	00800434 	movhi	r2,16
  815008:	10bfffc4 	addi	r2,r2,-1
  81500c:	ddc00117 	ldw	r23,4(sp)
  815010:	a884703a 	and	r2,r21,r2
  815014:	1811883a 	mov	r8,r3
  815018:	124ffc34 	orhi	r9,r2,16368
  81501c:	25bf0044 	addi	r22,r4,-1023
  815020:	d8000815 	stw	zero,32(sp)
  815024:	0005883a 	mov	r2,zero
  815028:	00cffe34 	movhi	r3,16376
  81502c:	480b883a 	mov	r5,r9
  815030:	4009883a 	mov	r4,r8
  815034:	180f883a 	mov	r7,r3
  815038:	100d883a 	mov	r6,r2
  81503c:	081053c0 	call	81053c <__subdf3>
  815040:	0218dbf4 	movhi	r8,25455
  815044:	4210d844 	addi	r8,r8,17249
  815048:	024ff4f4 	movhi	r9,16339
  81504c:	4a61e9c4 	addi	r9,r9,-30809
  815050:	480f883a 	mov	r7,r9
  815054:	400d883a 	mov	r6,r8
  815058:	180b883a 	mov	r5,r3
  81505c:	1009883a 	mov	r4,r2
  815060:	08106300 	call	810630 <__muldf3>
  815064:	0222d874 	movhi	r8,35681
  815068:	42322cc4 	addi	r8,r8,-14157
  81506c:	024ff1f4 	movhi	r9,16327
  815070:	4a628a04 	addi	r9,r9,-30168
  815074:	480f883a 	mov	r7,r9
  815078:	400d883a 	mov	r6,r8
  81507c:	180b883a 	mov	r5,r3
  815080:	1009883a 	mov	r4,r2
  815084:	08105bc0 	call	8105bc <__adddf3>
  815088:	b009883a 	mov	r4,r22
  81508c:	1021883a 	mov	r16,r2
  815090:	1823883a 	mov	r17,r3
  815094:	0810ef40 	call	810ef4 <__floatsidf>
  815098:	021427f4 	movhi	r8,20639
  81509c:	421e7ec4 	addi	r8,r8,31227
  8150a0:	024ff4f4 	movhi	r9,16339
  8150a4:	4a5104c4 	addi	r9,r9,17427
  8150a8:	480f883a 	mov	r7,r9
  8150ac:	400d883a 	mov	r6,r8
  8150b0:	180b883a 	mov	r5,r3
  8150b4:	1009883a 	mov	r4,r2
  8150b8:	08106300 	call	810630 <__muldf3>
  8150bc:	180f883a 	mov	r7,r3
  8150c0:	880b883a 	mov	r5,r17
  8150c4:	100d883a 	mov	r6,r2
  8150c8:	8009883a 	mov	r4,r16
  8150cc:	08105bc0 	call	8105bc <__adddf3>
  8150d0:	1009883a 	mov	r4,r2
  8150d4:	180b883a 	mov	r5,r3
  8150d8:	1021883a 	mov	r16,r2
  8150dc:	1823883a 	mov	r17,r3
  8150e0:	081a5e00 	call	81a5e0 <__fixdfsi>
  8150e4:	000d883a 	mov	r6,zero
  8150e8:	000f883a 	mov	r7,zero
  8150ec:	8009883a 	mov	r4,r16
  8150f0:	880b883a 	mov	r5,r17
  8150f4:	d8800d15 	stw	r2,52(sp)
  8150f8:	0810de40 	call	810de4 <__ltdf2>
  8150fc:	10031716 	blt	r2,zero,815d5c <_dtoa_r+0xe8c>
  815100:	d8c00d17 	ldw	r3,52(sp)
  815104:	00800584 	movi	r2,22
  815108:	10c1482e 	bgeu	r2,r3,81562c <_dtoa_r+0x75c>
  81510c:	01000044 	movi	r4,1
  815110:	d9000c15 	stw	r4,48(sp)
  815114:	bd85c83a 	sub	r2,r23,r22
  815118:	11bfffc4 	addi	r6,r2,-1
  81511c:	30030b16 	blt	r6,zero,815d4c <_dtoa_r+0xe7c>
  815120:	d9800a15 	stw	r6,40(sp)
  815124:	d8001115 	stw	zero,68(sp)
  815128:	d8c00d17 	ldw	r3,52(sp)
  81512c:	1802ff16 	blt	r3,zero,815d2c <_dtoa_r+0xe5c>
  815130:	d9000a17 	ldw	r4,40(sp)
  815134:	d8c00915 	stw	r3,36(sp)
  815138:	d8001015 	stw	zero,64(sp)
  81513c:	20c9883a 	add	r4,r4,r3
  815140:	d9000a15 	stw	r4,40(sp)
  815144:	d9001717 	ldw	r4,92(sp)
  815148:	00800244 	movi	r2,9
  81514c:	11004636 	bltu	r2,r4,815268 <_dtoa_r+0x398>
  815150:	00800144 	movi	r2,5
  815154:	11020416 	blt	r2,r4,815968 <_dtoa_r+0xa98>
  815158:	04400044 	movi	r17,1
  81515c:	d8c01717 	ldw	r3,92(sp)
  815160:	00800144 	movi	r2,5
  815164:	10c1ed36 	bltu	r2,r3,81591c <_dtoa_r+0xa4c>
  815168:	18c5883a 	add	r2,r3,r3
  81516c:	1085883a 	add	r2,r2,r2
  815170:	00c02074 	movhi	r3,129
  815174:	18d46104 	addi	r3,r3,20868
  815178:	10c5883a 	add	r2,r2,r3
  81517c:	11000017 	ldw	r4,0(r2)
  815180:	2000683a 	jmp	r4
  815184:	00815270 	cmpltui	r2,zero,1353
  815188:	00815270 	cmpltui	r2,zero,1353
  81518c:	00815c70 	cmpltui	r2,zero,1393
  815190:	00815c48 	cmpgei	r2,zero,1393
  815194:	00815c8c 	andi	r2,zero,1394
  815198:	00815c98 	cmpnei	r2,zero,1394
  81519c:	d9002717 	ldw	r4,156(sp)
  8151a0:	0089c3c4 	movi	r2,9999
  8151a4:	20800015 	stw	r2,0(r4)
  8151a8:	a0001026 	beq	r20,zero,8151ec <_dtoa_r+0x31c>
  8151ac:	00c020f4 	movhi	r3,131
  8151b0:	18e22604 	addi	r3,r3,-30568
  8151b4:	d9802917 	ldw	r6,164(sp)
  8151b8:	303f7926 	beq	r6,zero,814fa0 <_dtoa_r+0xd0>
  8151bc:	188000c7 	ldb	r2,3(r3)
  8151c0:	190000c4 	addi	r4,r3,3
  8151c4:	1000101e 	bne	r2,zero,815208 <_dtoa_r+0x338>
  8151c8:	d8802917 	ldw	r2,164(sp)
  8151cc:	11000015 	stw	r4,0(r2)
  8151d0:	003f7306 	br	814fa0 <_dtoa_r+0xd0>
  8151d4:	00a00034 	movhi	r2,32768
  8151d8:	10bfffc4 	addi	r2,r2,-1
  8151dc:	00c00044 	movi	r3,1
  8151e0:	88aa703a 	and	r21,r17,r2
  8151e4:	90c00015 	stw	r3,0(r18)
  8151e8:	003f5806 	br	814f4c <_dtoa_r+0x7c>
  8151ec:	00800434 	movhi	r2,16
  8151f0:	10bfffc4 	addi	r2,r2,-1
  8151f4:	a884703a 	and	r2,r21,r2
  8151f8:	103fec1e 	bne	r2,zero,8151ac <_dtoa_r+0x2dc>
  8151fc:	00c020f4 	movhi	r3,131
  815200:	18e22304 	addi	r3,r3,-30580
  815204:	003feb06 	br	8151b4 <_dtoa_r+0x2e4>
  815208:	d8802917 	ldw	r2,164(sp)
  81520c:	19000204 	addi	r4,r3,8
  815210:	11000015 	stw	r4,0(r2)
  815214:	003f6206 	br	814fa0 <_dtoa_r+0xd0>
  815218:	ddc00117 	ldw	r23,4(sp)
  81521c:	d8800217 	ldw	r2,8(sp)
  815220:	01000804 	movi	r4,32
  815224:	b8c10c84 	addi	r3,r23,1074
  815228:	18a3883a 	add	r17,r3,r2
  81522c:	2441b80e 	bge	r4,r17,815910 <_dtoa_r+0xa40>
  815230:	00c01004 	movi	r3,64
  815234:	1c47c83a 	sub	r3,r3,r17
  815238:	88bff804 	addi	r2,r17,-32
  81523c:	a8c6983a 	sll	r3,r21,r3
  815240:	a084d83a 	srl	r2,r20,r2
  815244:	1888b03a 	or	r4,r3,r2
  815248:	081a6b80 	call	81a6b8 <__floatunsidf>
  81524c:	1011883a 	mov	r8,r2
  815250:	00bf8434 	movhi	r2,65040
  815254:	01000044 	movi	r4,1
  815258:	10d3883a 	add	r9,r2,r3
  81525c:	8dbef344 	addi	r22,r17,-1075
  815260:	d9000815 	stw	r4,32(sp)
  815264:	003f6f06 	br	815024 <_dtoa_r+0x154>
  815268:	d8001715 	stw	zero,92(sp)
  81526c:	04400044 	movi	r17,1
  815270:	00bfffc4 	movi	r2,-1
  815274:	00c00044 	movi	r3,1
  815278:	d8800e15 	stw	r2,56(sp)
  81527c:	d8002615 	stw	zero,152(sp)
  815280:	d8800f15 	stw	r2,60(sp)
  815284:	d8c00b15 	stw	r3,44(sp)
  815288:	1021883a 	mov	r16,r2
  81528c:	d8801617 	ldw	r2,88(sp)
  815290:	10001115 	stw	zero,68(r2)
  815294:	d8801617 	ldw	r2,88(sp)
  815298:	11401117 	ldw	r5,68(r2)
  81529c:	1009883a 	mov	r4,r2
  8152a0:	0817f500 	call	817f50 <_Balloc>
  8152a4:	d8c01617 	ldw	r3,88(sp)
  8152a8:	d8800515 	stw	r2,20(sp)
  8152ac:	18801015 	stw	r2,64(r3)
  8152b0:	00800384 	movi	r2,14
  8152b4:	14006836 	bltu	r2,r16,815458 <_dtoa_r+0x588>
  8152b8:	8805003a 	cmpeq	r2,r17,zero
  8152bc:	1000661e 	bne	r2,zero,815458 <_dtoa_r+0x588>
  8152c0:	d9000d17 	ldw	r4,52(sp)
  8152c4:	0102300e 	bge	zero,r4,815b88 <_dtoa_r+0xcb8>
  8152c8:	208003cc 	andi	r2,r4,15
  8152cc:	100490fa 	slli	r2,r2,3
  8152d0:	2025d13a 	srai	r18,r4,4
  8152d4:	00c020f4 	movhi	r3,131
  8152d8:	18e23704 	addi	r3,r3,-30500
  8152dc:	10c5883a 	add	r2,r2,r3
  8152e0:	90c0040c 	andi	r3,r18,16
  8152e4:	14000017 	ldw	r16,0(r2)
  8152e8:	14400117 	ldw	r17,4(r2)
  8152ec:	18036a1e 	bne	r3,zero,816098 <_dtoa_r+0x11c8>
  8152f0:	05800084 	movi	r22,2
  8152f4:	90001026 	beq	r18,zero,815338 <_dtoa_r+0x468>
  8152f8:	04c020f4 	movhi	r19,131
  8152fc:	9ce26904 	addi	r19,r19,-30300
  815300:	9080004c 	andi	r2,r18,1
  815304:	1005003a 	cmpeq	r2,r2,zero
  815308:	1000081e 	bne	r2,zero,81532c <_dtoa_r+0x45c>
  81530c:	99800017 	ldw	r6,0(r19)
  815310:	99c00117 	ldw	r7,4(r19)
  815314:	880b883a 	mov	r5,r17
  815318:	8009883a 	mov	r4,r16
  81531c:	08106300 	call	810630 <__muldf3>
  815320:	1021883a 	mov	r16,r2
  815324:	b5800044 	addi	r22,r22,1
  815328:	1823883a 	mov	r17,r3
  81532c:	9025d07a 	srai	r18,r18,1
  815330:	9cc00204 	addi	r19,r19,8
  815334:	903ff21e 	bne	r18,zero,815300 <_dtoa_r+0x430>
  815338:	a80b883a 	mov	r5,r21
  81533c:	a009883a 	mov	r4,r20
  815340:	880f883a 	mov	r7,r17
  815344:	800d883a 	mov	r6,r16
  815348:	08109f40 	call	8109f4 <__divdf3>
  81534c:	1029883a 	mov	r20,r2
  815350:	182b883a 	mov	r21,r3
  815354:	d8c00c17 	ldw	r3,48(sp)
  815358:	1805003a 	cmpeq	r2,r3,zero
  81535c:	1000081e 	bne	r2,zero,815380 <_dtoa_r+0x4b0>
  815360:	0005883a 	mov	r2,zero
  815364:	00cffc34 	movhi	r3,16368
  815368:	180f883a 	mov	r7,r3
  81536c:	a009883a 	mov	r4,r20
  815370:	a80b883a 	mov	r5,r21
  815374:	100d883a 	mov	r6,r2
  815378:	0810de40 	call	810de4 <__ltdf2>
  81537c:	1003fe16 	blt	r2,zero,816378 <_dtoa_r+0x14a8>
  815380:	b009883a 	mov	r4,r22
  815384:	0810ef40 	call	810ef4 <__floatsidf>
  815388:	180b883a 	mov	r5,r3
  81538c:	1009883a 	mov	r4,r2
  815390:	a00d883a 	mov	r6,r20
  815394:	a80f883a 	mov	r7,r21
  815398:	08106300 	call	810630 <__muldf3>
  81539c:	0011883a 	mov	r8,zero
  8153a0:	02500734 	movhi	r9,16412
  8153a4:	1009883a 	mov	r4,r2
  8153a8:	180b883a 	mov	r5,r3
  8153ac:	480f883a 	mov	r7,r9
  8153b0:	400d883a 	mov	r6,r8
  8153b4:	08105bc0 	call	8105bc <__adddf3>
  8153b8:	d9000f17 	ldw	r4,60(sp)
  8153bc:	102d883a 	mov	r22,r2
  8153c0:	00bf3034 	movhi	r2,64704
  8153c4:	18b9883a 	add	fp,r3,r2
  8153c8:	e02f883a 	mov	r23,fp
  8153cc:	20028f1e 	bne	r4,zero,815e0c <_dtoa_r+0xf3c>
  8153d0:	0005883a 	mov	r2,zero
  8153d4:	00d00534 	movhi	r3,16404
  8153d8:	a009883a 	mov	r4,r20
  8153dc:	a80b883a 	mov	r5,r21
  8153e0:	180f883a 	mov	r7,r3
  8153e4:	100d883a 	mov	r6,r2
  8153e8:	081053c0 	call	81053c <__subdf3>
  8153ec:	1009883a 	mov	r4,r2
  8153f0:	e00f883a 	mov	r7,fp
  8153f4:	180b883a 	mov	r5,r3
  8153f8:	b00d883a 	mov	r6,r22
  8153fc:	1025883a 	mov	r18,r2
  815400:	1827883a 	mov	r19,r3
  815404:	0810d5c0 	call	810d5c <__gtdf2>
  815408:	00834f16 	blt	zero,r2,816148 <_dtoa_r+0x1278>
  81540c:	e0e0003c 	xorhi	r3,fp,32768
  815410:	9009883a 	mov	r4,r18
  815414:	980b883a 	mov	r5,r19
  815418:	180f883a 	mov	r7,r3
  81541c:	b00d883a 	mov	r6,r22
  815420:	0810de40 	call	810de4 <__ltdf2>
  815424:	1000080e 	bge	r2,zero,815448 <_dtoa_r+0x578>
  815428:	0027883a 	mov	r19,zero
  81542c:	0025883a 	mov	r18,zero
  815430:	d8802617 	ldw	r2,152(sp)
  815434:	df000517 	ldw	fp,20(sp)
  815438:	d8000615 	stw	zero,24(sp)
  81543c:	0084303a 	nor	r2,zero,r2
  815440:	d8800d15 	stw	r2,52(sp)
  815444:	00019b06 	br	815ab4 <_dtoa_r+0xbe4>
  815448:	d9801217 	ldw	r6,72(sp)
  81544c:	d8801317 	ldw	r2,76(sp)
  815450:	3029883a 	mov	r20,r6
  815454:	102b883a 	mov	r21,r2
  815458:	d8c00217 	ldw	r3,8(sp)
  81545c:	18008516 	blt	r3,zero,815674 <_dtoa_r+0x7a4>
  815460:	d9000d17 	ldw	r4,52(sp)
  815464:	00800384 	movi	r2,14
  815468:	11008216 	blt	r2,r4,815674 <_dtoa_r+0x7a4>
  81546c:	200490fa 	slli	r2,r4,3
  815470:	d9802617 	ldw	r6,152(sp)
  815474:	00c020f4 	movhi	r3,131
  815478:	18e23704 	addi	r3,r3,-30500
  81547c:	10c5883a 	add	r2,r2,r3
  815480:	14800017 	ldw	r18,0(r2)
  815484:	14c00117 	ldw	r19,4(r2)
  815488:	30031e16 	blt	r6,zero,816104 <_dtoa_r+0x1234>
  81548c:	d9000517 	ldw	r4,20(sp)
  815490:	d8c00f17 	ldw	r3,60(sp)
  815494:	a823883a 	mov	r17,r21
  815498:	a021883a 	mov	r16,r20
  81549c:	192b883a 	add	r21,r3,r4
  8154a0:	2039883a 	mov	fp,r4
  8154a4:	00000f06 	br	8154e4 <_dtoa_r+0x614>
  8154a8:	0005883a 	mov	r2,zero
  8154ac:	00d00934 	movhi	r3,16420
  8154b0:	5009883a 	mov	r4,r10
  8154b4:	580b883a 	mov	r5,r11
  8154b8:	180f883a 	mov	r7,r3
  8154bc:	100d883a 	mov	r6,r2
  8154c0:	08106300 	call	810630 <__muldf3>
  8154c4:	180b883a 	mov	r5,r3
  8154c8:	000d883a 	mov	r6,zero
  8154cc:	000f883a 	mov	r7,zero
  8154d0:	1009883a 	mov	r4,r2
  8154d4:	1021883a 	mov	r16,r2
  8154d8:	1823883a 	mov	r17,r3
  8154dc:	0810cd40 	call	810cd4 <__nedf2>
  8154e0:	10004526 	beq	r2,zero,8155f8 <_dtoa_r+0x728>
  8154e4:	900d883a 	mov	r6,r18
  8154e8:	980f883a 	mov	r7,r19
  8154ec:	8009883a 	mov	r4,r16
  8154f0:	880b883a 	mov	r5,r17
  8154f4:	08109f40 	call	8109f4 <__divdf3>
  8154f8:	180b883a 	mov	r5,r3
  8154fc:	1009883a 	mov	r4,r2
  815500:	081a5e00 	call	81a5e0 <__fixdfsi>
  815504:	1009883a 	mov	r4,r2
  815508:	1029883a 	mov	r20,r2
  81550c:	0810ef40 	call	810ef4 <__floatsidf>
  815510:	180f883a 	mov	r7,r3
  815514:	9009883a 	mov	r4,r18
  815518:	980b883a 	mov	r5,r19
  81551c:	100d883a 	mov	r6,r2
  815520:	08106300 	call	810630 <__muldf3>
  815524:	180f883a 	mov	r7,r3
  815528:	880b883a 	mov	r5,r17
  81552c:	8009883a 	mov	r4,r16
  815530:	100d883a 	mov	r6,r2
  815534:	081053c0 	call	81053c <__subdf3>
  815538:	1015883a 	mov	r10,r2
  81553c:	a0800c04 	addi	r2,r20,48
  815540:	e0800005 	stb	r2,0(fp)
  815544:	e7000044 	addi	fp,fp,1
  815548:	1817883a 	mov	r11,r3
  81554c:	e57fd61e 	bne	fp,r21,8154a8 <_dtoa_r+0x5d8>
  815550:	500d883a 	mov	r6,r10
  815554:	180f883a 	mov	r7,r3
  815558:	5009883a 	mov	r4,r10
  81555c:	180b883a 	mov	r5,r3
  815560:	08105bc0 	call	8105bc <__adddf3>
  815564:	100d883a 	mov	r6,r2
  815568:	9009883a 	mov	r4,r18
  81556c:	980b883a 	mov	r5,r19
  815570:	180f883a 	mov	r7,r3
  815574:	1021883a 	mov	r16,r2
  815578:	1823883a 	mov	r17,r3
  81557c:	0810de40 	call	810de4 <__ltdf2>
  815580:	10000816 	blt	r2,zero,8155a4 <_dtoa_r+0x6d4>
  815584:	980b883a 	mov	r5,r19
  815588:	800d883a 	mov	r6,r16
  81558c:	880f883a 	mov	r7,r17
  815590:	9009883a 	mov	r4,r18
  815594:	0810c4c0 	call	810c4c <__eqdf2>
  815598:	1000171e 	bne	r2,zero,8155f8 <_dtoa_r+0x728>
  81559c:	a080004c 	andi	r2,r20,1
  8155a0:	10001526 	beq	r2,zero,8155f8 <_dtoa_r+0x728>
  8155a4:	d8800d17 	ldw	r2,52(sp)
  8155a8:	d8800415 	stw	r2,16(sp)
  8155ac:	e009883a 	mov	r4,fp
  8155b0:	213fffc4 	addi	r4,r4,-1
  8155b4:	20c00007 	ldb	r3,0(r4)
  8155b8:	00800e44 	movi	r2,57
  8155bc:	1880081e 	bne	r3,r2,8155e0 <_dtoa_r+0x710>
  8155c0:	d8800517 	ldw	r2,20(sp)
  8155c4:	113ffa1e 	bne	r2,r4,8155b0 <_dtoa_r+0x6e0>
  8155c8:	d8c00417 	ldw	r3,16(sp)
  8155cc:	d9800517 	ldw	r6,20(sp)
  8155d0:	00800c04 	movi	r2,48
  8155d4:	18c00044 	addi	r3,r3,1
  8155d8:	d8c00415 	stw	r3,16(sp)
  8155dc:	30800005 	stb	r2,0(r6)
  8155e0:	20800003 	ldbu	r2,0(r4)
  8155e4:	d8c00417 	ldw	r3,16(sp)
  8155e8:	27000044 	addi	fp,r4,1
  8155ec:	10800044 	addi	r2,r2,1
  8155f0:	d8c00d15 	stw	r3,52(sp)
  8155f4:	20800005 	stb	r2,0(r4)
  8155f8:	d9001617 	ldw	r4,88(sp)
  8155fc:	d9400717 	ldw	r5,28(sp)
  815600:	08179d00 	call	8179d0 <_Bfree>
  815604:	e0000005 	stb	zero,0(fp)
  815608:	d9800d17 	ldw	r6,52(sp)
  81560c:	d8c02717 	ldw	r3,156(sp)
  815610:	d9002917 	ldw	r4,164(sp)
  815614:	30800044 	addi	r2,r6,1
  815618:	18800015 	stw	r2,0(r3)
  81561c:	20029c26 	beq	r4,zero,816090 <_dtoa_r+0x11c0>
  815620:	d8c00517 	ldw	r3,20(sp)
  815624:	27000015 	stw	fp,0(r4)
  815628:	003e5d06 	br	814fa0 <_dtoa_r+0xd0>
  81562c:	d9800d17 	ldw	r6,52(sp)
  815630:	00c020f4 	movhi	r3,131
  815634:	18e23704 	addi	r3,r3,-30500
  815638:	d9001217 	ldw	r4,72(sp)
  81563c:	300490fa 	slli	r2,r6,3
  815640:	d9401317 	ldw	r5,76(sp)
  815644:	10c5883a 	add	r2,r2,r3
  815648:	12000017 	ldw	r8,0(r2)
  81564c:	12400117 	ldw	r9,4(r2)
  815650:	400d883a 	mov	r6,r8
  815654:	480f883a 	mov	r7,r9
  815658:	0810de40 	call	810de4 <__ltdf2>
  81565c:	1000030e 	bge	r2,zero,81566c <_dtoa_r+0x79c>
  815660:	d8800d17 	ldw	r2,52(sp)
  815664:	10bfffc4 	addi	r2,r2,-1
  815668:	d8800d15 	stw	r2,52(sp)
  81566c:	d8000c15 	stw	zero,48(sp)
  815670:	003ea806 	br	815114 <_dtoa_r+0x244>
  815674:	d9000b17 	ldw	r4,44(sp)
  815678:	202cc03a 	cmpne	r22,r4,zero
  81567c:	b000c71e 	bne	r22,zero,81599c <_dtoa_r+0xacc>
  815680:	dc001117 	ldw	r16,68(sp)
  815684:	dc801017 	ldw	r18,64(sp)
  815688:	0027883a 	mov	r19,zero
  81568c:	04000b0e 	bge	zero,r16,8156bc <_dtoa_r+0x7ec>
  815690:	d8c00a17 	ldw	r3,40(sp)
  815694:	00c0090e 	bge	zero,r3,8156bc <_dtoa_r+0x7ec>
  815698:	8005883a 	mov	r2,r16
  81569c:	1c011316 	blt	r3,r16,815aec <_dtoa_r+0xc1c>
  8156a0:	d9000a17 	ldw	r4,40(sp)
  8156a4:	d9801117 	ldw	r6,68(sp)
  8156a8:	80a1c83a 	sub	r16,r16,r2
  8156ac:	2089c83a 	sub	r4,r4,r2
  8156b0:	308dc83a 	sub	r6,r6,r2
  8156b4:	d9000a15 	stw	r4,40(sp)
  8156b8:	d9801115 	stw	r6,68(sp)
  8156bc:	d8801017 	ldw	r2,64(sp)
  8156c0:	0080150e 	bge	zero,r2,815718 <_dtoa_r+0x848>
  8156c4:	d8c00b17 	ldw	r3,44(sp)
  8156c8:	1805003a 	cmpeq	r2,r3,zero
  8156cc:	1001c91e 	bne	r2,zero,815df4 <_dtoa_r+0xf24>
  8156d0:	04800e0e 	bge	zero,r18,81570c <_dtoa_r+0x83c>
  8156d4:	d9001617 	ldw	r4,88(sp)
  8156d8:	980b883a 	mov	r5,r19
  8156dc:	900d883a 	mov	r6,r18
  8156e0:	08187840 	call	818784 <__pow5mult>
  8156e4:	d9001617 	ldw	r4,88(sp)
  8156e8:	d9800717 	ldw	r6,28(sp)
  8156ec:	100b883a 	mov	r5,r2
  8156f0:	1027883a 	mov	r19,r2
  8156f4:	08184600 	call	818460 <__multiply>
  8156f8:	d9001617 	ldw	r4,88(sp)
  8156fc:	d9400717 	ldw	r5,28(sp)
  815700:	1023883a 	mov	r17,r2
  815704:	08179d00 	call	8179d0 <_Bfree>
  815708:	dc400715 	stw	r17,28(sp)
  81570c:	d9001017 	ldw	r4,64(sp)
  815710:	248dc83a 	sub	r6,r4,r18
  815714:	30010e1e 	bne	r6,zero,815b50 <_dtoa_r+0xc80>
  815718:	d9001617 	ldw	r4,88(sp)
  81571c:	04400044 	movi	r17,1
  815720:	880b883a 	mov	r5,r17
  815724:	08186480 	call	818648 <__i2b>
  815728:	d9800917 	ldw	r6,36(sp)
  81572c:	1025883a 	mov	r18,r2
  815730:	0180040e 	bge	zero,r6,815744 <_dtoa_r+0x874>
  815734:	d9001617 	ldw	r4,88(sp)
  815738:	100b883a 	mov	r5,r2
  81573c:	08187840 	call	818784 <__pow5mult>
  815740:	1025883a 	mov	r18,r2
  815744:	d8801717 	ldw	r2,92(sp)
  815748:	8880f30e 	bge	r17,r2,815b18 <_dtoa_r+0xc48>
  81574c:	0023883a 	mov	r17,zero
  815750:	d9800917 	ldw	r6,36(sp)
  815754:	30019e1e 	bne	r6,zero,815dd0 <_dtoa_r+0xf00>
  815758:	00c00044 	movi	r3,1
  81575c:	d9000a17 	ldw	r4,40(sp)
  815760:	20c5883a 	add	r2,r4,r3
  815764:	10c007cc 	andi	r3,r2,31
  815768:	1800841e 	bne	r3,zero,81597c <_dtoa_r+0xaac>
  81576c:	00800704 	movi	r2,28
  815770:	d9000a17 	ldw	r4,40(sp)
  815774:	d9801117 	ldw	r6,68(sp)
  815778:	80a1883a 	add	r16,r16,r2
  81577c:	2089883a 	add	r4,r4,r2
  815780:	308d883a 	add	r6,r6,r2
  815784:	d9000a15 	stw	r4,40(sp)
  815788:	d9801115 	stw	r6,68(sp)
  81578c:	d8801117 	ldw	r2,68(sp)
  815790:	0080050e 	bge	zero,r2,8157a8 <_dtoa_r+0x8d8>
  815794:	d9400717 	ldw	r5,28(sp)
  815798:	d9001617 	ldw	r4,88(sp)
  81579c:	100d883a 	mov	r6,r2
  8157a0:	08183140 	call	818314 <__lshift>
  8157a4:	d8800715 	stw	r2,28(sp)
  8157a8:	d8c00a17 	ldw	r3,40(sp)
  8157ac:	00c0050e 	bge	zero,r3,8157c4 <_dtoa_r+0x8f4>
  8157b0:	d9001617 	ldw	r4,88(sp)
  8157b4:	900b883a 	mov	r5,r18
  8157b8:	180d883a 	mov	r6,r3
  8157bc:	08183140 	call	818314 <__lshift>
  8157c0:	1025883a 	mov	r18,r2
  8157c4:	d9000c17 	ldw	r4,48(sp)
  8157c8:	2005003a 	cmpeq	r2,r4,zero
  8157cc:	10016f26 	beq	r2,zero,815d8c <_dtoa_r+0xebc>
  8157d0:	d9000f17 	ldw	r4,60(sp)
  8157d4:	0102170e 	bge	zero,r4,816034 <_dtoa_r+0x1164>
  8157d8:	d9800b17 	ldw	r6,44(sp)
  8157dc:	3005003a 	cmpeq	r2,r6,zero
  8157e0:	1000881e 	bne	r2,zero,815a04 <_dtoa_r+0xb34>
  8157e4:	0400050e 	bge	zero,r16,8157fc <_dtoa_r+0x92c>
  8157e8:	d9001617 	ldw	r4,88(sp)
  8157ec:	980b883a 	mov	r5,r19
  8157f0:	800d883a 	mov	r6,r16
  8157f4:	08183140 	call	818314 <__lshift>
  8157f8:	1027883a 	mov	r19,r2
  8157fc:	8804c03a 	cmpne	r2,r17,zero
  815800:	1002541e 	bne	r2,zero,816154 <_dtoa_r+0x1284>
  815804:	980b883a 	mov	r5,r19
  815808:	dd800517 	ldw	r22,20(sp)
  81580c:	dcc00615 	stw	r19,24(sp)
  815810:	a700004c 	andi	fp,r20,1
  815814:	2827883a 	mov	r19,r5
  815818:	d9000717 	ldw	r4,28(sp)
  81581c:	900b883a 	mov	r5,r18
  815820:	0814cb80 	call	814cb8 <quorem>
  815824:	d9000717 	ldw	r4,28(sp)
  815828:	d9400617 	ldw	r5,24(sp)
  81582c:	1023883a 	mov	r17,r2
  815830:	8dc00c04 	addi	r23,r17,48
  815834:	0817b2c0 	call	817b2c <__mcmp>
  815838:	d9001617 	ldw	r4,88(sp)
  81583c:	900b883a 	mov	r5,r18
  815840:	980d883a 	mov	r6,r19
  815844:	1029883a 	mov	r20,r2
  815848:	08181880 	call	818188 <__mdiff>
  81584c:	102b883a 	mov	r21,r2
  815850:	10800317 	ldw	r2,12(r2)
  815854:	1001281e 	bne	r2,zero,815cf8 <_dtoa_r+0xe28>
  815858:	d9000717 	ldw	r4,28(sp)
  81585c:	a80b883a 	mov	r5,r21
  815860:	0817b2c0 	call	817b2c <__mcmp>
  815864:	d9001617 	ldw	r4,88(sp)
  815868:	1021883a 	mov	r16,r2
  81586c:	a80b883a 	mov	r5,r21
  815870:	08179d00 	call	8179d0 <_Bfree>
  815874:	8000041e 	bne	r16,zero,815888 <_dtoa_r+0x9b8>
  815878:	d8801717 	ldw	r2,92(sp)
  81587c:	1000021e 	bne	r2,zero,815888 <_dtoa_r+0x9b8>
  815880:	e004c03a 	cmpne	r2,fp,zero
  815884:	10011726 	beq	r2,zero,815ce4 <_dtoa_r+0xe14>
  815888:	a0010616 	blt	r20,zero,815ca4 <_dtoa_r+0xdd4>
  81588c:	a000041e 	bne	r20,zero,8158a0 <_dtoa_r+0x9d0>
  815890:	d8c01717 	ldw	r3,92(sp)
  815894:	1800021e 	bne	r3,zero,8158a0 <_dtoa_r+0x9d0>
  815898:	e004c03a 	cmpne	r2,fp,zero
  81589c:	10010126 	beq	r2,zero,815ca4 <_dtoa_r+0xdd4>
  8158a0:	04023d16 	blt	zero,r16,816198 <_dtoa_r+0x12c8>
  8158a4:	b5c00005 	stb	r23,0(r22)
  8158a8:	d9800517 	ldw	r6,20(sp)
  8158ac:	d9000f17 	ldw	r4,60(sp)
  8158b0:	b5800044 	addi	r22,r22,1
  8158b4:	3105883a 	add	r2,r6,r4
  8158b8:	b0806526 	beq	r22,r2,815a50 <_dtoa_r+0xb80>
  8158bc:	d9400717 	ldw	r5,28(sp)
  8158c0:	d9001617 	ldw	r4,88(sp)
  8158c4:	01800284 	movi	r6,10
  8158c8:	000f883a 	mov	r7,zero
  8158cc:	08186840 	call	818684 <__multadd>
  8158d0:	d8800715 	stw	r2,28(sp)
  8158d4:	d8800617 	ldw	r2,24(sp)
  8158d8:	14c10c26 	beq	r2,r19,815d0c <_dtoa_r+0xe3c>
  8158dc:	d9400617 	ldw	r5,24(sp)
  8158e0:	d9001617 	ldw	r4,88(sp)
  8158e4:	01800284 	movi	r6,10
  8158e8:	000f883a 	mov	r7,zero
  8158ec:	08186840 	call	818684 <__multadd>
  8158f0:	d9001617 	ldw	r4,88(sp)
  8158f4:	980b883a 	mov	r5,r19
  8158f8:	01800284 	movi	r6,10
  8158fc:	000f883a 	mov	r7,zero
  815900:	d8800615 	stw	r2,24(sp)
  815904:	08186840 	call	818684 <__multadd>
  815908:	1027883a 	mov	r19,r2
  81590c:	003fc206 	br	815818 <_dtoa_r+0x948>
  815910:	2445c83a 	sub	r2,r4,r17
  815914:	a088983a 	sll	r4,r20,r2
  815918:	003e4b06 	br	815248 <_dtoa_r+0x378>
  81591c:	01bfffc4 	movi	r6,-1
  815920:	00800044 	movi	r2,1
  815924:	d9800e15 	stw	r6,56(sp)
  815928:	d9800f15 	stw	r6,60(sp)
  81592c:	d8800b15 	stw	r2,44(sp)
  815930:	d8c01617 	ldw	r3,88(sp)
  815934:	008005c4 	movi	r2,23
  815938:	18001115 	stw	zero,68(r3)
  81593c:	1580082e 	bgeu	r2,r22,815960 <_dtoa_r+0xa90>
  815940:	00c00104 	movi	r3,4
  815944:	0009883a 	mov	r4,zero
  815948:	18c7883a 	add	r3,r3,r3
  81594c:	18800504 	addi	r2,r3,20
  815950:	21000044 	addi	r4,r4,1
  815954:	b0bffc2e 	bgeu	r22,r2,815948 <_dtoa_r+0xa78>
  815958:	d9801617 	ldw	r6,88(sp)
  81595c:	31001115 	stw	r4,68(r6)
  815960:	dc000f17 	ldw	r16,60(sp)
  815964:	003e4b06 	br	815294 <_dtoa_r+0x3c4>
  815968:	d9801717 	ldw	r6,92(sp)
  81596c:	0023883a 	mov	r17,zero
  815970:	31bfff04 	addi	r6,r6,-4
  815974:	d9801715 	stw	r6,92(sp)
  815978:	003df806 	br	81515c <_dtoa_r+0x28c>
  81597c:	00800804 	movi	r2,32
  815980:	10c9c83a 	sub	r4,r2,r3
  815984:	00c00104 	movi	r3,4
  815988:	19005a16 	blt	r3,r4,815af4 <_dtoa_r+0xc24>
  81598c:	008000c4 	movi	r2,3
  815990:	113f7e16 	blt	r2,r4,81578c <_dtoa_r+0x8bc>
  815994:	20800704 	addi	r2,r4,28
  815998:	003f7506 	br	815770 <_dtoa_r+0x8a0>
  81599c:	d9801717 	ldw	r6,92(sp)
  8159a0:	00800044 	movi	r2,1
  8159a4:	1180a10e 	bge	r2,r6,815c2c <_dtoa_r+0xd5c>
  8159a8:	d9800f17 	ldw	r6,60(sp)
  8159ac:	d8c01017 	ldw	r3,64(sp)
  8159b0:	30bfffc4 	addi	r2,r6,-1
  8159b4:	1881c616 	blt	r3,r2,8160d0 <_dtoa_r+0x1200>
  8159b8:	18a5c83a 	sub	r18,r3,r2
  8159bc:	d8800f17 	ldw	r2,60(sp)
  8159c0:	10026216 	blt	r2,zero,81634c <_dtoa_r+0x147c>
  8159c4:	dc001117 	ldw	r16,68(sp)
  8159c8:	1007883a 	mov	r3,r2
  8159cc:	d9800a17 	ldw	r6,40(sp)
  8159d0:	d8801117 	ldw	r2,68(sp)
  8159d4:	d9001617 	ldw	r4,88(sp)
  8159d8:	30cd883a 	add	r6,r6,r3
  8159dc:	10c5883a 	add	r2,r2,r3
  8159e0:	01400044 	movi	r5,1
  8159e4:	d9800a15 	stw	r6,40(sp)
  8159e8:	d8801115 	stw	r2,68(sp)
  8159ec:	08186480 	call	818648 <__i2b>
  8159f0:	1027883a 	mov	r19,r2
  8159f4:	003f2506 	br	81568c <_dtoa_r+0x7bc>
  8159f8:	00c020f4 	movhi	r3,131
  8159fc:	18e21a04 	addi	r3,r3,-30616
  815a00:	003d6706 	br	814fa0 <_dtoa_r+0xd0>
  815a04:	dd800517 	ldw	r22,20(sp)
  815a08:	04000044 	movi	r16,1
  815a0c:	00000706 	br	815a2c <_dtoa_r+0xb5c>
  815a10:	d9400717 	ldw	r5,28(sp)
  815a14:	d9001617 	ldw	r4,88(sp)
  815a18:	01800284 	movi	r6,10
  815a1c:	000f883a 	mov	r7,zero
  815a20:	08186840 	call	818684 <__multadd>
  815a24:	d8800715 	stw	r2,28(sp)
  815a28:	84000044 	addi	r16,r16,1
  815a2c:	d9000717 	ldw	r4,28(sp)
  815a30:	900b883a 	mov	r5,r18
  815a34:	0814cb80 	call	814cb8 <quorem>
  815a38:	15c00c04 	addi	r23,r2,48
  815a3c:	b5c00005 	stb	r23,0(r22)
  815a40:	d8c00f17 	ldw	r3,60(sp)
  815a44:	b5800044 	addi	r22,r22,1
  815a48:	80fff116 	blt	r16,r3,815a10 <_dtoa_r+0xb40>
  815a4c:	d8000615 	stw	zero,24(sp)
  815a50:	d9400717 	ldw	r5,28(sp)
  815a54:	d9001617 	ldw	r4,88(sp)
  815a58:	01800044 	movi	r6,1
  815a5c:	08183140 	call	818314 <__lshift>
  815a60:	1009883a 	mov	r4,r2
  815a64:	900b883a 	mov	r5,r18
  815a68:	d8800715 	stw	r2,28(sp)
  815a6c:	0817b2c0 	call	817b2c <__mcmp>
  815a70:	00803c0e 	bge	zero,r2,815b64 <_dtoa_r+0xc94>
  815a74:	b009883a 	mov	r4,r22
  815a78:	213fffc4 	addi	r4,r4,-1
  815a7c:	21400003 	ldbu	r5,0(r4)
  815a80:	00800e44 	movi	r2,57
  815a84:	28c03fcc 	andi	r3,r5,255
  815a88:	18c0201c 	xori	r3,r3,128
  815a8c:	18ffe004 	addi	r3,r3,-128
  815a90:	1881981e 	bne	r3,r2,8160f4 <_dtoa_r+0x1224>
  815a94:	d9800517 	ldw	r6,20(sp)
  815a98:	21bff71e 	bne	r4,r6,815a78 <_dtoa_r+0xba8>
  815a9c:	d8800d17 	ldw	r2,52(sp)
  815aa0:	37000044 	addi	fp,r6,1
  815aa4:	10800044 	addi	r2,r2,1
  815aa8:	d8800d15 	stw	r2,52(sp)
  815aac:	00800c44 	movi	r2,49
  815ab0:	30800005 	stb	r2,0(r6)
  815ab4:	d9001617 	ldw	r4,88(sp)
  815ab8:	900b883a 	mov	r5,r18
  815abc:	08179d00 	call	8179d0 <_Bfree>
  815ac0:	983ecd26 	beq	r19,zero,8155f8 <_dtoa_r+0x728>
  815ac4:	d8c00617 	ldw	r3,24(sp)
  815ac8:	18000426 	beq	r3,zero,815adc <_dtoa_r+0xc0c>
  815acc:	1cc00326 	beq	r3,r19,815adc <_dtoa_r+0xc0c>
  815ad0:	d9001617 	ldw	r4,88(sp)
  815ad4:	180b883a 	mov	r5,r3
  815ad8:	08179d00 	call	8179d0 <_Bfree>
  815adc:	d9001617 	ldw	r4,88(sp)
  815ae0:	980b883a 	mov	r5,r19
  815ae4:	08179d00 	call	8179d0 <_Bfree>
  815ae8:	003ec306 	br	8155f8 <_dtoa_r+0x728>
  815aec:	1805883a 	mov	r2,r3
  815af0:	003eeb06 	br	8156a0 <_dtoa_r+0x7d0>
  815af4:	d9800a17 	ldw	r6,40(sp)
  815af8:	d8c01117 	ldw	r3,68(sp)
  815afc:	20bfff04 	addi	r2,r4,-4
  815b00:	308d883a 	add	r6,r6,r2
  815b04:	1887883a 	add	r3,r3,r2
  815b08:	80a1883a 	add	r16,r16,r2
  815b0c:	d9800a15 	stw	r6,40(sp)
  815b10:	d8c01115 	stw	r3,68(sp)
  815b14:	003f1d06 	br	81578c <_dtoa_r+0x8bc>
  815b18:	a03f0c1e 	bne	r20,zero,81574c <_dtoa_r+0x87c>
  815b1c:	00800434 	movhi	r2,16
  815b20:	10bfffc4 	addi	r2,r2,-1
  815b24:	a884703a 	and	r2,r21,r2
  815b28:	103f081e 	bne	r2,zero,81574c <_dtoa_r+0x87c>
  815b2c:	a89ffc2c 	andhi	r2,r21,32752
  815b30:	103f0626 	beq	r2,zero,81574c <_dtoa_r+0x87c>
  815b34:	d8c01117 	ldw	r3,68(sp)
  815b38:	d9000a17 	ldw	r4,40(sp)
  815b3c:	18c00044 	addi	r3,r3,1
  815b40:	21000044 	addi	r4,r4,1
  815b44:	d8c01115 	stw	r3,68(sp)
  815b48:	d9000a15 	stw	r4,40(sp)
  815b4c:	003f0006 	br	815750 <_dtoa_r+0x880>
  815b50:	d9400717 	ldw	r5,28(sp)
  815b54:	d9001617 	ldw	r4,88(sp)
  815b58:	08187840 	call	818784 <__pow5mult>
  815b5c:	d8800715 	stw	r2,28(sp)
  815b60:	003eed06 	br	815718 <_dtoa_r+0x848>
  815b64:	1000021e 	bne	r2,zero,815b70 <_dtoa_r+0xca0>
  815b68:	b880004c 	andi	r2,r23,1
  815b6c:	103fc11e 	bne	r2,zero,815a74 <_dtoa_r+0xba4>
  815b70:	b5bfffc4 	addi	r22,r22,-1
  815b74:	b0c00007 	ldb	r3,0(r22)
  815b78:	00800c04 	movi	r2,48
  815b7c:	18bffc26 	beq	r3,r2,815b70 <_dtoa_r+0xca0>
  815b80:	b7000044 	addi	fp,r22,1
  815b84:	003fcb06 	br	815ab4 <_dtoa_r+0xbe4>
  815b88:	d9800d17 	ldw	r6,52(sp)
  815b8c:	018fc83a 	sub	r7,zero,r6
  815b90:	3801f726 	beq	r7,zero,816370 <_dtoa_r+0x14a0>
  815b94:	398003cc 	andi	r6,r7,15
  815b98:	300c90fa 	slli	r6,r6,3
  815b9c:	014020f4 	movhi	r5,131
  815ba0:	29623704 	addi	r5,r5,-30500
  815ba4:	d9001217 	ldw	r4,72(sp)
  815ba8:	314d883a 	add	r6,r6,r5
  815bac:	30c00117 	ldw	r3,4(r6)
  815bb0:	30800017 	ldw	r2,0(r6)
  815bb4:	d9401317 	ldw	r5,76(sp)
  815bb8:	3821d13a 	srai	r16,r7,4
  815bbc:	100d883a 	mov	r6,r2
  815bc0:	180f883a 	mov	r7,r3
  815bc4:	08106300 	call	810630 <__muldf3>
  815bc8:	1011883a 	mov	r8,r2
  815bcc:	1813883a 	mov	r9,r3
  815bd0:	1029883a 	mov	r20,r2
  815bd4:	182b883a 	mov	r21,r3
  815bd8:	8001e526 	beq	r16,zero,816370 <_dtoa_r+0x14a0>
  815bdc:	05800084 	movi	r22,2
  815be0:	044020f4 	movhi	r17,131
  815be4:	8c626904 	addi	r17,r17,-30300
  815be8:	8080004c 	andi	r2,r16,1
  815bec:	1005003a 	cmpeq	r2,r2,zero
  815bf0:	1000081e 	bne	r2,zero,815c14 <_dtoa_r+0xd44>
  815bf4:	89800017 	ldw	r6,0(r17)
  815bf8:	89c00117 	ldw	r7,4(r17)
  815bfc:	480b883a 	mov	r5,r9
  815c00:	4009883a 	mov	r4,r8
  815c04:	08106300 	call	810630 <__muldf3>
  815c08:	1011883a 	mov	r8,r2
  815c0c:	b5800044 	addi	r22,r22,1
  815c10:	1813883a 	mov	r9,r3
  815c14:	8021d07a 	srai	r16,r16,1
  815c18:	8c400204 	addi	r17,r17,8
  815c1c:	803ff21e 	bne	r16,zero,815be8 <_dtoa_r+0xd18>
  815c20:	4029883a 	mov	r20,r8
  815c24:	482b883a 	mov	r21,r9
  815c28:	003dca06 	br	815354 <_dtoa_r+0x484>
  815c2c:	d9000817 	ldw	r4,32(sp)
  815c30:	2005003a 	cmpeq	r2,r4,zero
  815c34:	1001f61e 	bne	r2,zero,816410 <_dtoa_r+0x1540>
  815c38:	dc001117 	ldw	r16,68(sp)
  815c3c:	dc801017 	ldw	r18,64(sp)
  815c40:	18c10cc4 	addi	r3,r3,1075
  815c44:	003f6106 	br	8159cc <_dtoa_r+0xafc>
  815c48:	d8000b15 	stw	zero,44(sp)
  815c4c:	d9802617 	ldw	r6,152(sp)
  815c50:	d8c00d17 	ldw	r3,52(sp)
  815c54:	30800044 	addi	r2,r6,1
  815c58:	18ad883a 	add	r22,r3,r2
  815c5c:	b13fffc4 	addi	r4,r22,-1
  815c60:	d9000e15 	stw	r4,56(sp)
  815c64:	0581f60e 	bge	zero,r22,816440 <_dtoa_r+0x1570>
  815c68:	dd800f15 	stw	r22,60(sp)
  815c6c:	003f3006 	br	815930 <_dtoa_r+0xa60>
  815c70:	d8000b15 	stw	zero,44(sp)
  815c74:	d9002617 	ldw	r4,152(sp)
  815c78:	0101eb0e 	bge	zero,r4,816428 <_dtoa_r+0x1558>
  815c7c:	202d883a 	mov	r22,r4
  815c80:	d9000e15 	stw	r4,56(sp)
  815c84:	d9000f15 	stw	r4,60(sp)
  815c88:	003f2906 	br	815930 <_dtoa_r+0xa60>
  815c8c:	01800044 	movi	r6,1
  815c90:	d9800b15 	stw	r6,44(sp)
  815c94:	003ff706 	br	815c74 <_dtoa_r+0xda4>
  815c98:	01000044 	movi	r4,1
  815c9c:	d9000b15 	stw	r4,44(sp)
  815ca0:	003fea06 	br	815c4c <_dtoa_r+0xd7c>
  815ca4:	04000c0e 	bge	zero,r16,815cd8 <_dtoa_r+0xe08>
  815ca8:	d9400717 	ldw	r5,28(sp)
  815cac:	d9001617 	ldw	r4,88(sp)
  815cb0:	01800044 	movi	r6,1
  815cb4:	08183140 	call	818314 <__lshift>
  815cb8:	1009883a 	mov	r4,r2
  815cbc:	900b883a 	mov	r5,r18
  815cc0:	d8800715 	stw	r2,28(sp)
  815cc4:	0817b2c0 	call	817b2c <__mcmp>
  815cc8:	0081e00e 	bge	zero,r2,81644c <_dtoa_r+0x157c>
  815ccc:	bdc00044 	addi	r23,r23,1
  815cd0:	00800e84 	movi	r2,58
  815cd4:	b881a226 	beq	r23,r2,816360 <_dtoa_r+0x1490>
  815cd8:	b7000044 	addi	fp,r22,1
  815cdc:	b5c00005 	stb	r23,0(r22)
  815ce0:	003f7406 	br	815ab4 <_dtoa_r+0xbe4>
  815ce4:	00800e44 	movi	r2,57
  815ce8:	b8819d26 	beq	r23,r2,816360 <_dtoa_r+0x1490>
  815cec:	053ffa0e 	bge	zero,r20,815cd8 <_dtoa_r+0xe08>
  815cf0:	8dc00c44 	addi	r23,r17,49
  815cf4:	003ff806 	br	815cd8 <_dtoa_r+0xe08>
  815cf8:	d9001617 	ldw	r4,88(sp)
  815cfc:	a80b883a 	mov	r5,r21
  815d00:	04000044 	movi	r16,1
  815d04:	08179d00 	call	8179d0 <_Bfree>
  815d08:	003edf06 	br	815888 <_dtoa_r+0x9b8>
  815d0c:	d9001617 	ldw	r4,88(sp)
  815d10:	980b883a 	mov	r5,r19
  815d14:	01800284 	movi	r6,10
  815d18:	000f883a 	mov	r7,zero
  815d1c:	08186840 	call	818684 <__multadd>
  815d20:	1027883a 	mov	r19,r2
  815d24:	d8800615 	stw	r2,24(sp)
  815d28:	003ebb06 	br	815818 <_dtoa_r+0x948>
  815d2c:	d9801117 	ldw	r6,68(sp)
  815d30:	d8800d17 	ldw	r2,52(sp)
  815d34:	d8000915 	stw	zero,36(sp)
  815d38:	308dc83a 	sub	r6,r6,r2
  815d3c:	0087c83a 	sub	r3,zero,r2
  815d40:	d9801115 	stw	r6,68(sp)
  815d44:	d8c01015 	stw	r3,64(sp)
  815d48:	003cfe06 	br	815144 <_dtoa_r+0x274>
  815d4c:	018dc83a 	sub	r6,zero,r6
  815d50:	d9801115 	stw	r6,68(sp)
  815d54:	d8000a15 	stw	zero,40(sp)
  815d58:	003cf306 	br	815128 <_dtoa_r+0x258>
  815d5c:	d9000d17 	ldw	r4,52(sp)
  815d60:	0810ef40 	call	810ef4 <__floatsidf>
  815d64:	880b883a 	mov	r5,r17
  815d68:	8009883a 	mov	r4,r16
  815d6c:	180f883a 	mov	r7,r3
  815d70:	100d883a 	mov	r6,r2
  815d74:	0810cd40 	call	810cd4 <__nedf2>
  815d78:	103ce126 	beq	r2,zero,815100 <_dtoa_r+0x230>
  815d7c:	d9800d17 	ldw	r6,52(sp)
  815d80:	31bfffc4 	addi	r6,r6,-1
  815d84:	d9800d15 	stw	r6,52(sp)
  815d88:	003cdd06 	br	815100 <_dtoa_r+0x230>
  815d8c:	d9000717 	ldw	r4,28(sp)
  815d90:	900b883a 	mov	r5,r18
  815d94:	0817b2c0 	call	817b2c <__mcmp>
  815d98:	103e8d0e 	bge	r2,zero,8157d0 <_dtoa_r+0x900>
  815d9c:	d9400717 	ldw	r5,28(sp)
  815da0:	d9001617 	ldw	r4,88(sp)
  815da4:	01800284 	movi	r6,10
  815da8:	000f883a 	mov	r7,zero
  815dac:	08186840 	call	818684 <__multadd>
  815db0:	d9800d17 	ldw	r6,52(sp)
  815db4:	d8800715 	stw	r2,28(sp)
  815db8:	31bfffc4 	addi	r6,r6,-1
  815dbc:	d9800d15 	stw	r6,52(sp)
  815dc0:	b001a71e 	bne	r22,zero,816460 <_dtoa_r+0x1590>
  815dc4:	d8800e17 	ldw	r2,56(sp)
  815dc8:	d8800f15 	stw	r2,60(sp)
  815dcc:	003e8006 	br	8157d0 <_dtoa_r+0x900>
  815dd0:	90800417 	ldw	r2,16(r18)
  815dd4:	1085883a 	add	r2,r2,r2
  815dd8:	1085883a 	add	r2,r2,r2
  815ddc:	1485883a 	add	r2,r2,r18
  815de0:	11000417 	ldw	r4,16(r2)
  815de4:	08179f80 	call	8179f8 <__hi0bits>
  815de8:	00c00804 	movi	r3,32
  815dec:	1887c83a 	sub	r3,r3,r2
  815df0:	003e5a06 	br	81575c <_dtoa_r+0x88c>
  815df4:	d9400717 	ldw	r5,28(sp)
  815df8:	d9801017 	ldw	r6,64(sp)
  815dfc:	d9001617 	ldw	r4,88(sp)
  815e00:	08187840 	call	818784 <__pow5mult>
  815e04:	d8800715 	stw	r2,28(sp)
  815e08:	003e4306 	br	815718 <_dtoa_r+0x848>
  815e0c:	d9800f17 	ldw	r6,60(sp)
  815e10:	d8800d17 	ldw	r2,52(sp)
  815e14:	d9800315 	stw	r6,12(sp)
  815e18:	d8800415 	stw	r2,16(sp)
  815e1c:	d8c00b17 	ldw	r3,44(sp)
  815e20:	1805003a 	cmpeq	r2,r3,zero
  815e24:	1000e21e 	bne	r2,zero,8161b0 <_dtoa_r+0x12e0>
  815e28:	d9000317 	ldw	r4,12(sp)
  815e2c:	0005883a 	mov	r2,zero
  815e30:	00cff834 	movhi	r3,16352
  815e34:	200c90fa 	slli	r6,r4,3
  815e38:	010020f4 	movhi	r4,131
  815e3c:	21223704 	addi	r4,r4,-30500
  815e40:	180b883a 	mov	r5,r3
  815e44:	310d883a 	add	r6,r6,r4
  815e48:	327fff17 	ldw	r9,-4(r6)
  815e4c:	323ffe17 	ldw	r8,-8(r6)
  815e50:	1009883a 	mov	r4,r2
  815e54:	480f883a 	mov	r7,r9
  815e58:	400d883a 	mov	r6,r8
  815e5c:	08109f40 	call	8109f4 <__divdf3>
  815e60:	180b883a 	mov	r5,r3
  815e64:	b00d883a 	mov	r6,r22
  815e68:	b80f883a 	mov	r7,r23
  815e6c:	1009883a 	mov	r4,r2
  815e70:	081053c0 	call	81053c <__subdf3>
  815e74:	a80b883a 	mov	r5,r21
  815e78:	a009883a 	mov	r4,r20
  815e7c:	d8c01915 	stw	r3,100(sp)
  815e80:	d8801815 	stw	r2,96(sp)
  815e84:	081a5e00 	call	81a5e0 <__fixdfsi>
  815e88:	1009883a 	mov	r4,r2
  815e8c:	1027883a 	mov	r19,r2
  815e90:	0810ef40 	call	810ef4 <__floatsidf>
  815e94:	a80b883a 	mov	r5,r21
  815e98:	a009883a 	mov	r4,r20
  815e9c:	180f883a 	mov	r7,r3
  815ea0:	100d883a 	mov	r6,r2
  815ea4:	081053c0 	call	81053c <__subdf3>
  815ea8:	d9801817 	ldw	r6,96(sp)
  815eac:	1823883a 	mov	r17,r3
  815eb0:	d8801415 	stw	r2,80(sp)
  815eb4:	302d883a 	mov	r22,r6
  815eb8:	d9800517 	ldw	r6,20(sp)
  815ebc:	9cc00c04 	addi	r19,r19,48
  815ec0:	dc401515 	stw	r17,84(sp)
  815ec4:	d8c01917 	ldw	r3,100(sp)
  815ec8:	34c00005 	stb	r19,0(r6)
  815ecc:	d8800517 	ldw	r2,20(sp)
  815ed0:	d9401917 	ldw	r5,100(sp)
  815ed4:	d9801417 	ldw	r6,80(sp)
  815ed8:	b009883a 	mov	r4,r22
  815edc:	880f883a 	mov	r7,r17
  815ee0:	182f883a 	mov	r23,r3
  815ee4:	17000044 	addi	fp,r2,1
  815ee8:	0810d5c0 	call	810d5c <__gtdf2>
  815eec:	00804e16 	blt	zero,r2,816028 <_dtoa_r+0x1158>
  815ef0:	d9801417 	ldw	r6,80(sp)
  815ef4:	0005883a 	mov	r2,zero
  815ef8:	00cffc34 	movhi	r3,16368
  815efc:	180b883a 	mov	r5,r3
  815f00:	880f883a 	mov	r7,r17
  815f04:	1009883a 	mov	r4,r2
  815f08:	081053c0 	call	81053c <__subdf3>
  815f0c:	d9401917 	ldw	r5,100(sp)
  815f10:	180f883a 	mov	r7,r3
  815f14:	b009883a 	mov	r4,r22
  815f18:	100d883a 	mov	r6,r2
  815f1c:	0810d5c0 	call	810d5c <__gtdf2>
  815f20:	00bda216 	blt	zero,r2,8155ac <_dtoa_r+0x6dc>
  815f24:	d8c00317 	ldw	r3,12(sp)
  815f28:	00800044 	movi	r2,1
  815f2c:	10c01216 	blt	r2,r3,815f78 <_dtoa_r+0x10a8>
  815f30:	003d4506 	br	815448 <_dtoa_r+0x578>
  815f34:	d9801417 	ldw	r6,80(sp)
  815f38:	0005883a 	mov	r2,zero
  815f3c:	00cffc34 	movhi	r3,16368
  815f40:	180b883a 	mov	r5,r3
  815f44:	880f883a 	mov	r7,r17
  815f48:	1009883a 	mov	r4,r2
  815f4c:	081053c0 	call	81053c <__subdf3>
  815f50:	d9c01b17 	ldw	r7,108(sp)
  815f54:	180b883a 	mov	r5,r3
  815f58:	1009883a 	mov	r4,r2
  815f5c:	b00d883a 	mov	r6,r22
  815f60:	0810de40 	call	810de4 <__ltdf2>
  815f64:	103d9116 	blt	r2,zero,8155ac <_dtoa_r+0x6dc>
  815f68:	d9800517 	ldw	r6,20(sp)
  815f6c:	d9000317 	ldw	r4,12(sp)
  815f70:	3105883a 	add	r2,r6,r4
  815f74:	e0bd3426 	beq	fp,r2,815448 <_dtoa_r+0x578>
  815f78:	04500934 	movhi	r17,16420
  815f7c:	0021883a 	mov	r16,zero
  815f80:	b80b883a 	mov	r5,r23
  815f84:	b009883a 	mov	r4,r22
  815f88:	800d883a 	mov	r6,r16
  815f8c:	880f883a 	mov	r7,r17
  815f90:	08106300 	call	810630 <__muldf3>
  815f94:	d9401517 	ldw	r5,84(sp)
  815f98:	d9001417 	ldw	r4,80(sp)
  815f9c:	880f883a 	mov	r7,r17
  815fa0:	000d883a 	mov	r6,zero
  815fa4:	d8801a15 	stw	r2,104(sp)
  815fa8:	d8c01b15 	stw	r3,108(sp)
  815fac:	08106300 	call	810630 <__muldf3>
  815fb0:	180b883a 	mov	r5,r3
  815fb4:	1009883a 	mov	r4,r2
  815fb8:	1823883a 	mov	r17,r3
  815fbc:	1021883a 	mov	r16,r2
  815fc0:	081a5e00 	call	81a5e0 <__fixdfsi>
  815fc4:	1009883a 	mov	r4,r2
  815fc8:	102b883a 	mov	r21,r2
  815fcc:	0810ef40 	call	810ef4 <__floatsidf>
  815fd0:	880b883a 	mov	r5,r17
  815fd4:	8009883a 	mov	r4,r16
  815fd8:	180f883a 	mov	r7,r3
  815fdc:	100d883a 	mov	r6,r2
  815fe0:	081053c0 	call	81053c <__subdf3>
  815fe4:	1021883a 	mov	r16,r2
  815fe8:	d9001b17 	ldw	r4,108(sp)
  815fec:	1823883a 	mov	r17,r3
  815ff0:	dc001415 	stw	r16,80(sp)
  815ff4:	ad400c04 	addi	r21,r21,48
  815ff8:	dc401515 	stw	r17,84(sp)
  815ffc:	d8801a17 	ldw	r2,104(sp)
  816000:	e5400005 	stb	r21,0(fp)
  816004:	202f883a 	mov	r23,r4
  816008:	d9c01b17 	ldw	r7,108(sp)
  81600c:	d9001417 	ldw	r4,80(sp)
  816010:	880b883a 	mov	r5,r17
  816014:	100d883a 	mov	r6,r2
  816018:	102d883a 	mov	r22,r2
  81601c:	e7000044 	addi	fp,fp,1
  816020:	0810de40 	call	810de4 <__ltdf2>
  816024:	103fc30e 	bge	r2,zero,815f34 <_dtoa_r+0x1064>
  816028:	d9000417 	ldw	r4,16(sp)
  81602c:	d9000d15 	stw	r4,52(sp)
  816030:	003d7106 	br	8155f8 <_dtoa_r+0x728>
  816034:	d9801717 	ldw	r6,92(sp)
  816038:	00800084 	movi	r2,2
  81603c:	11bde60e 	bge	r2,r6,8157d8 <_dtoa_r+0x908>
  816040:	203cfb1e 	bne	r4,zero,815430 <_dtoa_r+0x560>
  816044:	d9001617 	ldw	r4,88(sp)
  816048:	900b883a 	mov	r5,r18
  81604c:	01800144 	movi	r6,5
  816050:	000f883a 	mov	r7,zero
  816054:	08186840 	call	818684 <__multadd>
  816058:	d9000717 	ldw	r4,28(sp)
  81605c:	100b883a 	mov	r5,r2
  816060:	1025883a 	mov	r18,r2
  816064:	0817b2c0 	call	817b2c <__mcmp>
  816068:	00bcf10e 	bge	zero,r2,815430 <_dtoa_r+0x560>
  81606c:	d8c00d17 	ldw	r3,52(sp)
  816070:	d9000517 	ldw	r4,20(sp)
  816074:	d8000615 	stw	zero,24(sp)
  816078:	18c00044 	addi	r3,r3,1
  81607c:	d8c00d15 	stw	r3,52(sp)
  816080:	00800c44 	movi	r2,49
  816084:	27000044 	addi	fp,r4,1
  816088:	20800005 	stb	r2,0(r4)
  81608c:	003e8906 	br	815ab4 <_dtoa_r+0xbe4>
  816090:	d8c00517 	ldw	r3,20(sp)
  816094:	003bc206 	br	814fa0 <_dtoa_r+0xd0>
  816098:	018020f4 	movhi	r6,131
  81609c:	31a26904 	addi	r6,r6,-30300
  8160a0:	30c00917 	ldw	r3,36(r6)
  8160a4:	30800817 	ldw	r2,32(r6)
  8160a8:	d9001217 	ldw	r4,72(sp)
  8160ac:	d9401317 	ldw	r5,76(sp)
  8160b0:	180f883a 	mov	r7,r3
  8160b4:	100d883a 	mov	r6,r2
  8160b8:	08109f40 	call	8109f4 <__divdf3>
  8160bc:	948003cc 	andi	r18,r18,15
  8160c0:	058000c4 	movi	r22,3
  8160c4:	1029883a 	mov	r20,r2
  8160c8:	182b883a 	mov	r21,r3
  8160cc:	003c8906 	br	8152f4 <_dtoa_r+0x424>
  8160d0:	d9001017 	ldw	r4,64(sp)
  8160d4:	d9800917 	ldw	r6,36(sp)
  8160d8:	0025883a 	mov	r18,zero
  8160dc:	1105c83a 	sub	r2,r2,r4
  8160e0:	2089883a 	add	r4,r4,r2
  8160e4:	308d883a 	add	r6,r6,r2
  8160e8:	d9001015 	stw	r4,64(sp)
  8160ec:	d9800915 	stw	r6,36(sp)
  8160f0:	003e3206 	br	8159bc <_dtoa_r+0xaec>
  8160f4:	28800044 	addi	r2,r5,1
  8160f8:	27000044 	addi	fp,r4,1
  8160fc:	20800005 	stb	r2,0(r4)
  816100:	003e6c06 	br	815ab4 <_dtoa_r+0xbe4>
  816104:	d8800f17 	ldw	r2,60(sp)
  816108:	00bce016 	blt	zero,r2,81548c <_dtoa_r+0x5bc>
  81610c:	d9800f17 	ldw	r6,60(sp)
  816110:	303cc51e 	bne	r6,zero,815428 <_dtoa_r+0x558>
  816114:	0005883a 	mov	r2,zero
  816118:	00d00534 	movhi	r3,16404
  81611c:	980b883a 	mov	r5,r19
  816120:	180f883a 	mov	r7,r3
  816124:	9009883a 	mov	r4,r18
  816128:	100d883a 	mov	r6,r2
  81612c:	08106300 	call	810630 <__muldf3>
  816130:	180b883a 	mov	r5,r3
  816134:	a80f883a 	mov	r7,r21
  816138:	1009883a 	mov	r4,r2
  81613c:	a00d883a 	mov	r6,r20
  816140:	081a5580 	call	81a558 <__gedf2>
  816144:	103cb80e 	bge	r2,zero,815428 <_dtoa_r+0x558>
  816148:	0027883a 	mov	r19,zero
  81614c:	0025883a 	mov	r18,zero
  816150:	003fc606 	br	81606c <_dtoa_r+0x119c>
  816154:	99400117 	ldw	r5,4(r19)
  816158:	d9001617 	ldw	r4,88(sp)
  81615c:	0817f500 	call	817f50 <_Balloc>
  816160:	99800417 	ldw	r6,16(r19)
  816164:	11000304 	addi	r4,r2,12
  816168:	99400304 	addi	r5,r19,12
  81616c:	318d883a 	add	r6,r6,r6
  816170:	318d883a 	add	r6,r6,r6
  816174:	31800204 	addi	r6,r6,8
  816178:	1023883a 	mov	r17,r2
  81617c:	08122840 	call	812284 <memcpy>
  816180:	d9001617 	ldw	r4,88(sp)
  816184:	880b883a 	mov	r5,r17
  816188:	01800044 	movi	r6,1
  81618c:	08183140 	call	818314 <__lshift>
  816190:	100b883a 	mov	r5,r2
  816194:	003d9c06 	br	815808 <_dtoa_r+0x938>
  816198:	00800e44 	movi	r2,57
  81619c:	b8807026 	beq	r23,r2,816360 <_dtoa_r+0x1490>
  8161a0:	b8800044 	addi	r2,r23,1
  8161a4:	b7000044 	addi	fp,r22,1
  8161a8:	b0800005 	stb	r2,0(r22)
  8161ac:	003e4106 	br	815ab4 <_dtoa_r+0xbe4>
  8161b0:	d8800317 	ldw	r2,12(sp)
  8161b4:	018020f4 	movhi	r6,131
  8161b8:	31a23704 	addi	r6,r6,-30500
  8161bc:	b009883a 	mov	r4,r22
  8161c0:	100e90fa 	slli	r7,r2,3
  8161c4:	b80b883a 	mov	r5,r23
  8161c8:	398f883a 	add	r7,r7,r6
  8161cc:	38bffe17 	ldw	r2,-8(r7)
  8161d0:	d9800517 	ldw	r6,20(sp)
  8161d4:	38ffff17 	ldw	r3,-4(r7)
  8161d8:	37000044 	addi	fp,r6,1
  8161dc:	180f883a 	mov	r7,r3
  8161e0:	100d883a 	mov	r6,r2
  8161e4:	08106300 	call	810630 <__muldf3>
  8161e8:	a80b883a 	mov	r5,r21
  8161ec:	a009883a 	mov	r4,r20
  8161f0:	182f883a 	mov	r23,r3
  8161f4:	102d883a 	mov	r22,r2
  8161f8:	081a5e00 	call	81a5e0 <__fixdfsi>
  8161fc:	1009883a 	mov	r4,r2
  816200:	1027883a 	mov	r19,r2
  816204:	0810ef40 	call	810ef4 <__floatsidf>
  816208:	a80b883a 	mov	r5,r21
  81620c:	a009883a 	mov	r4,r20
  816210:	180f883a 	mov	r7,r3
  816214:	100d883a 	mov	r6,r2
  816218:	081053c0 	call	81053c <__subdf3>
  81621c:	180b883a 	mov	r5,r3
  816220:	d8c00517 	ldw	r3,20(sp)
  816224:	9cc00c04 	addi	r19,r19,48
  816228:	1009883a 	mov	r4,r2
  81622c:	1cc00005 	stb	r19,0(r3)
  816230:	2021883a 	mov	r16,r4
  816234:	d9000317 	ldw	r4,12(sp)
  816238:	00800044 	movi	r2,1
  81623c:	2823883a 	mov	r17,r5
  816240:	20802226 	beq	r4,r2,8162cc <_dtoa_r+0x13fc>
  816244:	1029883a 	mov	r20,r2
  816248:	0005883a 	mov	r2,zero
  81624c:	00d00934 	movhi	r3,16420
  816250:	180f883a 	mov	r7,r3
  816254:	100d883a 	mov	r6,r2
  816258:	880b883a 	mov	r5,r17
  81625c:	8009883a 	mov	r4,r16
  816260:	08106300 	call	810630 <__muldf3>
  816264:	180b883a 	mov	r5,r3
  816268:	1009883a 	mov	r4,r2
  81626c:	1823883a 	mov	r17,r3
  816270:	1021883a 	mov	r16,r2
  816274:	081a5e00 	call	81a5e0 <__fixdfsi>
  816278:	1009883a 	mov	r4,r2
  81627c:	102b883a 	mov	r21,r2
  816280:	0810ef40 	call	810ef4 <__floatsidf>
  816284:	880b883a 	mov	r5,r17
  816288:	8009883a 	mov	r4,r16
  81628c:	180f883a 	mov	r7,r3
  816290:	100d883a 	mov	r6,r2
  816294:	081053c0 	call	81053c <__subdf3>
  816298:	180b883a 	mov	r5,r3
  81629c:	d8c00517 	ldw	r3,20(sp)
  8162a0:	1009883a 	mov	r4,r2
  8162a4:	ad400c04 	addi	r21,r21,48
  8162a8:	1d05883a 	add	r2,r3,r20
  8162ac:	15400005 	stb	r21,0(r2)
  8162b0:	2021883a 	mov	r16,r4
  8162b4:	d9000317 	ldw	r4,12(sp)
  8162b8:	a5000044 	addi	r20,r20,1
  8162bc:	2823883a 	mov	r17,r5
  8162c0:	a13fe11e 	bne	r20,r4,816248 <_dtoa_r+0x1378>
  8162c4:	e505883a 	add	r2,fp,r20
  8162c8:	173fffc4 	addi	fp,r2,-1
  8162cc:	0025883a 	mov	r18,zero
  8162d0:	04cff834 	movhi	r19,16352
  8162d4:	b009883a 	mov	r4,r22
  8162d8:	b80b883a 	mov	r5,r23
  8162dc:	900d883a 	mov	r6,r18
  8162e0:	980f883a 	mov	r7,r19
  8162e4:	08105bc0 	call	8105bc <__adddf3>
  8162e8:	180b883a 	mov	r5,r3
  8162ec:	1009883a 	mov	r4,r2
  8162f0:	800d883a 	mov	r6,r16
  8162f4:	880f883a 	mov	r7,r17
  8162f8:	0810de40 	call	810de4 <__ltdf2>
  8162fc:	103cab16 	blt	r2,zero,8155ac <_dtoa_r+0x6dc>
  816300:	0009883a 	mov	r4,zero
  816304:	980b883a 	mov	r5,r19
  816308:	b80f883a 	mov	r7,r23
  81630c:	b00d883a 	mov	r6,r22
  816310:	081053c0 	call	81053c <__subdf3>
  816314:	180b883a 	mov	r5,r3
  816318:	880f883a 	mov	r7,r17
  81631c:	1009883a 	mov	r4,r2
  816320:	800d883a 	mov	r6,r16
  816324:	0810d5c0 	call	810d5c <__gtdf2>
  816328:	00bc470e 	bge	zero,r2,815448 <_dtoa_r+0x578>
  81632c:	00c00c04 	movi	r3,48
  816330:	e73fffc4 	addi	fp,fp,-1
  816334:	e0800007 	ldb	r2,0(fp)
  816338:	10fffd26 	beq	r2,r3,816330 <_dtoa_r+0x1460>
  81633c:	d9800417 	ldw	r6,16(sp)
  816340:	e7000044 	addi	fp,fp,1
  816344:	d9800d15 	stw	r6,52(sp)
  816348:	003cab06 	br	8155f8 <_dtoa_r+0x728>
  81634c:	d8c00f17 	ldw	r3,60(sp)
  816350:	d9001117 	ldw	r4,68(sp)
  816354:	20e1c83a 	sub	r16,r4,r3
  816358:	0007883a 	mov	r3,zero
  81635c:	003d9b06 	br	8159cc <_dtoa_r+0xafc>
  816360:	00800e44 	movi	r2,57
  816364:	b0800005 	stb	r2,0(r22)
  816368:	b5800044 	addi	r22,r22,1
  81636c:	003dc106 	br	815a74 <_dtoa_r+0xba4>
  816370:	05800084 	movi	r22,2
  816374:	003bf706 	br	815354 <_dtoa_r+0x484>
  816378:	d9000f17 	ldw	r4,60(sp)
  81637c:	013c000e 	bge	zero,r4,815380 <_dtoa_r+0x4b0>
  816380:	d9800e17 	ldw	r6,56(sp)
  816384:	01bc300e 	bge	zero,r6,815448 <_dtoa_r+0x578>
  816388:	0005883a 	mov	r2,zero
  81638c:	00d00934 	movhi	r3,16420
  816390:	a80b883a 	mov	r5,r21
  816394:	180f883a 	mov	r7,r3
  816398:	a009883a 	mov	r4,r20
  81639c:	100d883a 	mov	r6,r2
  8163a0:	08106300 	call	810630 <__muldf3>
  8163a4:	b1000044 	addi	r4,r22,1
  8163a8:	1021883a 	mov	r16,r2
  8163ac:	1823883a 	mov	r17,r3
  8163b0:	0810ef40 	call	810ef4 <__floatsidf>
  8163b4:	880b883a 	mov	r5,r17
  8163b8:	8009883a 	mov	r4,r16
  8163bc:	180f883a 	mov	r7,r3
  8163c0:	100d883a 	mov	r6,r2
  8163c4:	08106300 	call	810630 <__muldf3>
  8163c8:	0011883a 	mov	r8,zero
  8163cc:	02500734 	movhi	r9,16412
  8163d0:	180b883a 	mov	r5,r3
  8163d4:	480f883a 	mov	r7,r9
  8163d8:	1009883a 	mov	r4,r2
  8163dc:	400d883a 	mov	r6,r8
  8163e0:	08105bc0 	call	8105bc <__adddf3>
  8163e4:	102d883a 	mov	r22,r2
  8163e8:	00bf3034 	movhi	r2,64704
  8163ec:	10ef883a 	add	r23,r2,r3
  8163f0:	d8800d17 	ldw	r2,52(sp)
  8163f4:	d8c00e17 	ldw	r3,56(sp)
  8163f8:	8029883a 	mov	r20,r16
  8163fc:	10bfffc4 	addi	r2,r2,-1
  816400:	882b883a 	mov	r21,r17
  816404:	d8800415 	stw	r2,16(sp)
  816408:	d8c00315 	stw	r3,12(sp)
  81640c:	003e8306 	br	815e1c <_dtoa_r+0xf4c>
  816410:	d8800117 	ldw	r2,4(sp)
  816414:	dc001117 	ldw	r16,68(sp)
  816418:	dc801017 	ldw	r18,64(sp)
  81641c:	00c00d84 	movi	r3,54
  816420:	1887c83a 	sub	r3,r3,r2
  816424:	003d6906 	br	8159cc <_dtoa_r+0xafc>
  816428:	01800044 	movi	r6,1
  81642c:	3021883a 	mov	r16,r6
  816430:	d9800f15 	stw	r6,60(sp)
  816434:	d9802615 	stw	r6,152(sp)
  816438:	d9800e15 	stw	r6,56(sp)
  81643c:	003b9306 	br	81528c <_dtoa_r+0x3bc>
  816440:	b021883a 	mov	r16,r22
  816444:	dd800f15 	stw	r22,60(sp)
  816448:	003b9006 	br	81528c <_dtoa_r+0x3bc>
  81644c:	103e221e 	bne	r2,zero,815cd8 <_dtoa_r+0xe08>
  816450:	b880004c 	andi	r2,r23,1
  816454:	1005003a 	cmpeq	r2,r2,zero
  816458:	103e1f1e 	bne	r2,zero,815cd8 <_dtoa_r+0xe08>
  81645c:	003e1b06 	br	815ccc <_dtoa_r+0xdfc>
  816460:	d9001617 	ldw	r4,88(sp)
  816464:	980b883a 	mov	r5,r19
  816468:	01800284 	movi	r6,10
  81646c:	000f883a 	mov	r7,zero
  816470:	08186840 	call	818684 <__multadd>
  816474:	d8c00e17 	ldw	r3,56(sp)
  816478:	1027883a 	mov	r19,r2
  81647c:	d8c00f15 	stw	r3,60(sp)
  816480:	003cd306 	br	8157d0 <_dtoa_r+0x900>

00816484 <_fflush_r>:
  816484:	defffb04 	addi	sp,sp,-20
  816488:	dcc00315 	stw	r19,12(sp)
  81648c:	dc800215 	stw	r18,8(sp)
  816490:	dfc00415 	stw	ra,16(sp)
  816494:	dc400115 	stw	r17,4(sp)
  816498:	dc000015 	stw	r16,0(sp)
  81649c:	2027883a 	mov	r19,r4
  8164a0:	2825883a 	mov	r18,r5
  8164a4:	20000226 	beq	r4,zero,8164b0 <_fflush_r+0x2c>
  8164a8:	20800e17 	ldw	r2,56(r4)
  8164ac:	10005626 	beq	r2,zero,816608 <_fflush_r+0x184>
  8164b0:	9100030b 	ldhu	r4,12(r18)
  8164b4:	20ffffcc 	andi	r3,r4,65535
  8164b8:	18e0001c 	xori	r3,r3,32768
  8164bc:	18e00004 	addi	r3,r3,-32768
  8164c0:	1880020c 	andi	r2,r3,8
  8164c4:	1000261e 	bne	r2,zero,816560 <_fflush_r+0xdc>
  8164c8:	90c00117 	ldw	r3,4(r18)
  8164cc:	20820014 	ori	r2,r4,2048
  8164d0:	9080030d 	sth	r2,12(r18)
  8164d4:	1009883a 	mov	r4,r2
  8164d8:	00c0400e 	bge	zero,r3,8165dc <_fflush_r+0x158>
  8164dc:	92000a17 	ldw	r8,40(r18)
  8164e0:	40004026 	beq	r8,zero,8165e4 <_fflush_r+0x160>
  8164e4:	2084000c 	andi	r2,r4,4096
  8164e8:	10005326 	beq	r2,zero,816638 <_fflush_r+0x1b4>
  8164ec:	94001417 	ldw	r16,80(r18)
  8164f0:	9080030b 	ldhu	r2,12(r18)
  8164f4:	1080010c 	andi	r2,r2,4
  8164f8:	1000481e 	bne	r2,zero,81661c <_fflush_r+0x198>
  8164fc:	91400717 	ldw	r5,28(r18)
  816500:	9809883a 	mov	r4,r19
  816504:	800d883a 	mov	r6,r16
  816508:	000f883a 	mov	r7,zero
  81650c:	403ee83a 	callr	r8
  816510:	8080261e 	bne	r16,r2,8165ac <_fflush_r+0x128>
  816514:	9080030b 	ldhu	r2,12(r18)
  816518:	91000417 	ldw	r4,16(r18)
  81651c:	90000115 	stw	zero,4(r18)
  816520:	10bdffcc 	andi	r2,r2,63487
  816524:	10ffffcc 	andi	r3,r2,65535
  816528:	18c4000c 	andi	r3,r3,4096
  81652c:	9080030d 	sth	r2,12(r18)
  816530:	91000015 	stw	r4,0(r18)
  816534:	18002b26 	beq	r3,zero,8165e4 <_fflush_r+0x160>
  816538:	0007883a 	mov	r3,zero
  81653c:	1805883a 	mov	r2,r3
  816540:	94001415 	stw	r16,80(r18)
  816544:	dfc00417 	ldw	ra,16(sp)
  816548:	dcc00317 	ldw	r19,12(sp)
  81654c:	dc800217 	ldw	r18,8(sp)
  816550:	dc400117 	ldw	r17,4(sp)
  816554:	dc000017 	ldw	r16,0(sp)
  816558:	dec00504 	addi	sp,sp,20
  81655c:	f800283a 	ret
  816560:	94400417 	ldw	r17,16(r18)
  816564:	88001f26 	beq	r17,zero,8165e4 <_fflush_r+0x160>
  816568:	90800017 	ldw	r2,0(r18)
  81656c:	18c000cc 	andi	r3,r3,3
  816570:	94400015 	stw	r17,0(r18)
  816574:	1461c83a 	sub	r16,r2,r17
  816578:	18002526 	beq	r3,zero,816610 <_fflush_r+0x18c>
  81657c:	0005883a 	mov	r2,zero
  816580:	90800215 	stw	r2,8(r18)
  816584:	0400170e 	bge	zero,r16,8165e4 <_fflush_r+0x160>
  816588:	90c00917 	ldw	r3,36(r18)
  81658c:	91400717 	ldw	r5,28(r18)
  816590:	880d883a 	mov	r6,r17
  816594:	800f883a 	mov	r7,r16
  816598:	9809883a 	mov	r4,r19
  81659c:	183ee83a 	callr	r3
  8165a0:	88a3883a 	add	r17,r17,r2
  8165a4:	80a1c83a 	sub	r16,r16,r2
  8165a8:	00bff616 	blt	zero,r2,816584 <_fflush_r+0x100>
  8165ac:	9080030b 	ldhu	r2,12(r18)
  8165b0:	00ffffc4 	movi	r3,-1
  8165b4:	10801014 	ori	r2,r2,64
  8165b8:	9080030d 	sth	r2,12(r18)
  8165bc:	1805883a 	mov	r2,r3
  8165c0:	dfc00417 	ldw	ra,16(sp)
  8165c4:	dcc00317 	ldw	r19,12(sp)
  8165c8:	dc800217 	ldw	r18,8(sp)
  8165cc:	dc400117 	ldw	r17,4(sp)
  8165d0:	dc000017 	ldw	r16,0(sp)
  8165d4:	dec00504 	addi	sp,sp,20
  8165d8:	f800283a 	ret
  8165dc:	90800f17 	ldw	r2,60(r18)
  8165e0:	00bfbe16 	blt	zero,r2,8164dc <_fflush_r+0x58>
  8165e4:	0007883a 	mov	r3,zero
  8165e8:	1805883a 	mov	r2,r3
  8165ec:	dfc00417 	ldw	ra,16(sp)
  8165f0:	dcc00317 	ldw	r19,12(sp)
  8165f4:	dc800217 	ldw	r18,8(sp)
  8165f8:	dc400117 	ldw	r17,4(sp)
  8165fc:	dc000017 	ldw	r16,0(sp)
  816600:	dec00504 	addi	sp,sp,20
  816604:	f800283a 	ret
  816608:	081671c0 	call	81671c <__sinit>
  81660c:	003fa806 	br	8164b0 <_fflush_r+0x2c>
  816610:	90800517 	ldw	r2,20(r18)
  816614:	90800215 	stw	r2,8(r18)
  816618:	003fda06 	br	816584 <_fflush_r+0x100>
  81661c:	90800117 	ldw	r2,4(r18)
  816620:	90c00c17 	ldw	r3,48(r18)
  816624:	80a1c83a 	sub	r16,r16,r2
  816628:	183fb426 	beq	r3,zero,8164fc <_fflush_r+0x78>
  81662c:	90800f17 	ldw	r2,60(r18)
  816630:	80a1c83a 	sub	r16,r16,r2
  816634:	003fb106 	br	8164fc <_fflush_r+0x78>
  816638:	91400717 	ldw	r5,28(r18)
  81663c:	9809883a 	mov	r4,r19
  816640:	000d883a 	mov	r6,zero
  816644:	01c00044 	movi	r7,1
  816648:	403ee83a 	callr	r8
  81664c:	1021883a 	mov	r16,r2
  816650:	00bfffc4 	movi	r2,-1
  816654:	80800226 	beq	r16,r2,816660 <_fflush_r+0x1dc>
  816658:	92000a17 	ldw	r8,40(r18)
  81665c:	003fa406 	br	8164f0 <_fflush_r+0x6c>
  816660:	98c00017 	ldw	r3,0(r19)
  816664:	00800744 	movi	r2,29
  816668:	18bfde26 	beq	r3,r2,8165e4 <_fflush_r+0x160>
  81666c:	9080030b 	ldhu	r2,12(r18)
  816670:	8007883a 	mov	r3,r16
  816674:	10801014 	ori	r2,r2,64
  816678:	9080030d 	sth	r2,12(r18)
  81667c:	003fcf06 	br	8165bc <_fflush_r+0x138>

00816680 <fflush>:
  816680:	01402074 	movhi	r5,129
  816684:	29592104 	addi	r5,r5,25732
  816688:	2007883a 	mov	r3,r4
  81668c:	20000526 	beq	r4,zero,8166a4 <fflush+0x24>
  816690:	008020f4 	movhi	r2,131
  816694:	10a99904 	addi	r2,r2,-22940
  816698:	11000017 	ldw	r4,0(r2)
  81669c:	180b883a 	mov	r5,r3
  8166a0:	08164841 	jmpi	816484 <_fflush_r>
  8166a4:	008020f4 	movhi	r2,131
  8166a8:	10a99a04 	addi	r2,r2,-22936
  8166ac:	11000017 	ldw	r4,0(r2)
  8166b0:	081739c1 	jmpi	81739c <_fwalk_reent>

008166b4 <std>:
  8166b4:	008020b4 	movhi	r2,130
  8166b8:	10a47904 	addi	r2,r2,-28188
  8166bc:	20800b15 	stw	r2,44(r4)
  8166c0:	008020b4 	movhi	r2,130
  8166c4:	10a4b404 	addi	r2,r2,-27952
  8166c8:	20800815 	stw	r2,32(r4)
  8166cc:	00c020b4 	movhi	r3,130
  8166d0:	18e49504 	addi	r3,r3,-28076
  8166d4:	008020b4 	movhi	r2,130
  8166d8:	10a47b04 	addi	r2,r2,-28180
  8166dc:	2140030d 	sth	r5,12(r4)
  8166e0:	2180038d 	sth	r6,14(r4)
  8166e4:	20c00915 	stw	r3,36(r4)
  8166e8:	20800a15 	stw	r2,40(r4)
  8166ec:	20000015 	stw	zero,0(r4)
  8166f0:	20000115 	stw	zero,4(r4)
  8166f4:	20000215 	stw	zero,8(r4)
  8166f8:	20000415 	stw	zero,16(r4)
  8166fc:	20000515 	stw	zero,20(r4)
  816700:	20000615 	stw	zero,24(r4)
  816704:	21000715 	stw	r4,28(r4)
  816708:	f800283a 	ret

0081670c <__sfp_lock_acquire>:
  81670c:	f800283a 	ret

00816710 <__sfp_lock_release>:
  816710:	f800283a 	ret

00816714 <__sinit_lock_acquire>:
  816714:	f800283a 	ret

00816718 <__sinit_lock_release>:
  816718:	f800283a 	ret

0081671c <__sinit>:
  81671c:	20800e17 	ldw	r2,56(r4)
  816720:	defffd04 	addi	sp,sp,-12
  816724:	dc400115 	stw	r17,4(sp)
  816728:	dc000015 	stw	r16,0(sp)
  81672c:	dfc00215 	stw	ra,8(sp)
  816730:	04400044 	movi	r17,1
  816734:	01400104 	movi	r5,4
  816738:	000d883a 	mov	r6,zero
  81673c:	2021883a 	mov	r16,r4
  816740:	2200bb04 	addi	r8,r4,748
  816744:	200f883a 	mov	r7,r4
  816748:	10000526 	beq	r2,zero,816760 <__sinit+0x44>
  81674c:	dfc00217 	ldw	ra,8(sp)
  816750:	dc400117 	ldw	r17,4(sp)
  816754:	dc000017 	ldw	r16,0(sp)
  816758:	dec00304 	addi	sp,sp,12
  81675c:	f800283a 	ret
  816760:	21000117 	ldw	r4,4(r4)
  816764:	00802074 	movhi	r2,129
  816768:	109a0004 	addi	r2,r2,26624
  81676c:	00c000c4 	movi	r3,3
  816770:	80800f15 	stw	r2,60(r16)
  816774:	80c0b915 	stw	r3,740(r16)
  816778:	8200ba15 	stw	r8,744(r16)
  81677c:	84400e15 	stw	r17,56(r16)
  816780:	8000b815 	stw	zero,736(r16)
  816784:	08166b40 	call	8166b4 <std>
  816788:	81000217 	ldw	r4,8(r16)
  81678c:	880d883a 	mov	r6,r17
  816790:	800f883a 	mov	r7,r16
  816794:	01400284 	movi	r5,10
  816798:	08166b40 	call	8166b4 <std>
  81679c:	81000317 	ldw	r4,12(r16)
  8167a0:	800f883a 	mov	r7,r16
  8167a4:	01400484 	movi	r5,18
  8167a8:	01800084 	movi	r6,2
  8167ac:	dfc00217 	ldw	ra,8(sp)
  8167b0:	dc400117 	ldw	r17,4(sp)
  8167b4:	dc000017 	ldw	r16,0(sp)
  8167b8:	dec00304 	addi	sp,sp,12
  8167bc:	08166b41 	jmpi	8166b4 <std>

008167c0 <__fp_lock>:
  8167c0:	0005883a 	mov	r2,zero
  8167c4:	f800283a 	ret

008167c8 <__fp_unlock>:
  8167c8:	0005883a 	mov	r2,zero
  8167cc:	f800283a 	ret

008167d0 <__fp_unlock_all>:
  8167d0:	008020f4 	movhi	r2,131
  8167d4:	10a99904 	addi	r2,r2,-22940
  8167d8:	11000017 	ldw	r4,0(r2)
  8167dc:	01402074 	movhi	r5,129
  8167e0:	2959f204 	addi	r5,r5,26568
  8167e4:	08174641 	jmpi	817464 <_fwalk>

008167e8 <__fp_lock_all>:
  8167e8:	008020f4 	movhi	r2,131
  8167ec:	10a99904 	addi	r2,r2,-22940
  8167f0:	11000017 	ldw	r4,0(r2)
  8167f4:	01402074 	movhi	r5,129
  8167f8:	2959f004 	addi	r5,r5,26560
  8167fc:	08174641 	jmpi	817464 <_fwalk>

00816800 <_cleanup_r>:
  816800:	014020b4 	movhi	r5,130
  816804:	2965f904 	addi	r5,r5,-26652
  816808:	08174641 	jmpi	817464 <_fwalk>

0081680c <_cleanup>:
  81680c:	008020f4 	movhi	r2,131
  816810:	10a99a04 	addi	r2,r2,-22936
  816814:	11000017 	ldw	r4,0(r2)
  816818:	08168001 	jmpi	816800 <_cleanup_r>

0081681c <__sfmoreglue>:
  81681c:	defffc04 	addi	sp,sp,-16
  816820:	dc400115 	stw	r17,4(sp)
  816824:	2c401724 	muli	r17,r5,92
  816828:	dc800215 	stw	r18,8(sp)
  81682c:	2825883a 	mov	r18,r5
  816830:	89400304 	addi	r5,r17,12
  816834:	dc000015 	stw	r16,0(sp)
  816838:	dfc00315 	stw	ra,12(sp)
  81683c:	0811b440 	call	811b44 <_malloc_r>
  816840:	0021883a 	mov	r16,zero
  816844:	880d883a 	mov	r6,r17
  816848:	000b883a 	mov	r5,zero
  81684c:	10000626 	beq	r2,zero,816868 <__sfmoreglue+0x4c>
  816850:	11000304 	addi	r4,r2,12
  816854:	14800115 	stw	r18,4(r2)
  816858:	10000015 	stw	zero,0(r2)
  81685c:	11000215 	stw	r4,8(r2)
  816860:	1021883a 	mov	r16,r2
  816864:	08179380 	call	817938 <memset>
  816868:	8005883a 	mov	r2,r16
  81686c:	dfc00317 	ldw	ra,12(sp)
  816870:	dc800217 	ldw	r18,8(sp)
  816874:	dc400117 	ldw	r17,4(sp)
  816878:	dc000017 	ldw	r16,0(sp)
  81687c:	dec00404 	addi	sp,sp,16
  816880:	f800283a 	ret

00816884 <__sfp>:
  816884:	defffd04 	addi	sp,sp,-12
  816888:	008020f4 	movhi	r2,131
  81688c:	10a99a04 	addi	r2,r2,-22936
  816890:	dc000015 	stw	r16,0(sp)
  816894:	14000017 	ldw	r16,0(r2)
  816898:	dc400115 	stw	r17,4(sp)
  81689c:	dfc00215 	stw	ra,8(sp)
  8168a0:	80800e17 	ldw	r2,56(r16)
  8168a4:	2023883a 	mov	r17,r4
  8168a8:	10002626 	beq	r2,zero,816944 <__sfp+0xc0>
  8168ac:	8400b804 	addi	r16,r16,736
  8168b0:	80800117 	ldw	r2,4(r16)
  8168b4:	81000217 	ldw	r4,8(r16)
  8168b8:	10ffffc4 	addi	r3,r2,-1
  8168bc:	18000916 	blt	r3,zero,8168e4 <__sfp+0x60>
  8168c0:	2080030f 	ldh	r2,12(r4)
  8168c4:	10000b26 	beq	r2,zero,8168f4 <__sfp+0x70>
  8168c8:	017fffc4 	movi	r5,-1
  8168cc:	00000206 	br	8168d8 <__sfp+0x54>
  8168d0:	2080030f 	ldh	r2,12(r4)
  8168d4:	10000726 	beq	r2,zero,8168f4 <__sfp+0x70>
  8168d8:	18ffffc4 	addi	r3,r3,-1
  8168dc:	21001704 	addi	r4,r4,92
  8168e0:	197ffb1e 	bne	r3,r5,8168d0 <__sfp+0x4c>
  8168e4:	80800017 	ldw	r2,0(r16)
  8168e8:	10001926 	beq	r2,zero,816950 <__sfp+0xcc>
  8168ec:	1021883a 	mov	r16,r2
  8168f0:	003fef06 	br	8168b0 <__sfp+0x2c>
  8168f4:	00bfffc4 	movi	r2,-1
  8168f8:	00c00044 	movi	r3,1
  8168fc:	2080038d 	sth	r2,14(r4)
  816900:	20c0030d 	sth	r3,12(r4)
  816904:	20000015 	stw	zero,0(r4)
  816908:	20000215 	stw	zero,8(r4)
  81690c:	20000115 	stw	zero,4(r4)
  816910:	20000415 	stw	zero,16(r4)
  816914:	20000515 	stw	zero,20(r4)
  816918:	20000615 	stw	zero,24(r4)
  81691c:	20000c15 	stw	zero,48(r4)
  816920:	20000d15 	stw	zero,52(r4)
  816924:	20001115 	stw	zero,68(r4)
  816928:	20001215 	stw	zero,72(r4)
  81692c:	2005883a 	mov	r2,r4
  816930:	dfc00217 	ldw	ra,8(sp)
  816934:	dc400117 	ldw	r17,4(sp)
  816938:	dc000017 	ldw	r16,0(sp)
  81693c:	dec00304 	addi	sp,sp,12
  816940:	f800283a 	ret
  816944:	8009883a 	mov	r4,r16
  816948:	081671c0 	call	81671c <__sinit>
  81694c:	003fd706 	br	8168ac <__sfp+0x28>
  816950:	8809883a 	mov	r4,r17
  816954:	01400104 	movi	r5,4
  816958:	081681c0 	call	81681c <__sfmoreglue>
  81695c:	80800015 	stw	r2,0(r16)
  816960:	103fe21e 	bne	r2,zero,8168ec <__sfp+0x68>
  816964:	00800304 	movi	r2,12
  816968:	0009883a 	mov	r4,zero
  81696c:	88800015 	stw	r2,0(r17)
  816970:	003fee06 	br	81692c <__sfp+0xa8>

00816974 <fputc>:
  816974:	defffc04 	addi	sp,sp,-16
  816978:	dc800215 	stw	r18,8(sp)
  81697c:	048020f4 	movhi	r18,131
  816980:	94a99904 	addi	r18,r18,-22940
  816984:	90c00017 	ldw	r3,0(r18)
  816988:	dc400115 	stw	r17,4(sp)
  81698c:	dc000015 	stw	r16,0(sp)
  816990:	dfc00315 	stw	ra,12(sp)
  816994:	2021883a 	mov	r16,r4
  816998:	2823883a 	mov	r17,r5
  81699c:	18000326 	beq	r3,zero,8169ac <fputc+0x38>
  8169a0:	18800e17 	ldw	r2,56(r3)
  8169a4:	1809883a 	mov	r4,r3
  8169a8:	10000926 	beq	r2,zero,8169d0 <fputc+0x5c>
  8169ac:	91000017 	ldw	r4,0(r18)
  8169b0:	800b883a 	mov	r5,r16
  8169b4:	880d883a 	mov	r6,r17
  8169b8:	dfc00317 	ldw	ra,12(sp)
  8169bc:	dc800217 	ldw	r18,8(sp)
  8169c0:	dc400117 	ldw	r17,4(sp)
  8169c4:	dc000017 	ldw	r16,0(sp)
  8169c8:	dec00404 	addi	sp,sp,16
  8169cc:	0818ac81 	jmpi	818ac8 <_putc_r>
  8169d0:	081671c0 	call	81671c <__sinit>
  8169d4:	003ff506 	br	8169ac <fputc+0x38>

008169d8 <_fputc_r>:
  8169d8:	defffc04 	addi	sp,sp,-16
  8169dc:	dc800215 	stw	r18,8(sp)
  8169e0:	dc400115 	stw	r17,4(sp)
  8169e4:	dc000015 	stw	r16,0(sp)
  8169e8:	dfc00315 	stw	ra,12(sp)
  8169ec:	2021883a 	mov	r16,r4
  8169f0:	2823883a 	mov	r17,r5
  8169f4:	3025883a 	mov	r18,r6
  8169f8:	20000226 	beq	r4,zero,816a04 <_fputc_r+0x2c>
  8169fc:	20800e17 	ldw	r2,56(r4)
  816a00:	10000926 	beq	r2,zero,816a28 <_fputc_r+0x50>
  816a04:	8009883a 	mov	r4,r16
  816a08:	880b883a 	mov	r5,r17
  816a0c:	900d883a 	mov	r6,r18
  816a10:	dfc00317 	ldw	ra,12(sp)
  816a14:	dc800217 	ldw	r18,8(sp)
  816a18:	dc400117 	ldw	r17,4(sp)
  816a1c:	dc000017 	ldw	r16,0(sp)
  816a20:	dec00404 	addi	sp,sp,16
  816a24:	0818ac81 	jmpi	818ac8 <_putc_r>
  816a28:	081671c0 	call	81671c <__sinit>
  816a2c:	003ff506 	br	816a04 <_fputc_r+0x2c>

00816a30 <_fputs_r>:
  816a30:	defff804 	addi	sp,sp,-32
  816a34:	dc000515 	stw	r16,20(sp)
  816a38:	2021883a 	mov	r16,r4
  816a3c:	2809883a 	mov	r4,r5
  816a40:	dc400615 	stw	r17,24(sp)
  816a44:	dfc00715 	stw	ra,28(sp)
  816a48:	3023883a 	mov	r17,r6
  816a4c:	d9400015 	stw	r5,0(sp)
  816a50:	0812bd80 	call	812bd8 <strlen>
  816a54:	00c00044 	movi	r3,1
  816a58:	d8800115 	stw	r2,4(sp)
  816a5c:	d8c00315 	stw	r3,12(sp)
  816a60:	d8800415 	stw	r2,16(sp)
  816a64:	dec00215 	stw	sp,8(sp)
  816a68:	80000326 	beq	r16,zero,816a78 <_fputs_r+0x48>
  816a6c:	80800e17 	ldw	r2,56(r16)
  816a70:	8009883a 	mov	r4,r16
  816a74:	10000926 	beq	r2,zero,816a9c <_fputs_r+0x6c>
  816a78:	8009883a 	mov	r4,r16
  816a7c:	880b883a 	mov	r5,r17
  816a80:	d9800204 	addi	r6,sp,8
  816a84:	0816f000 	call	816f00 <__sfvwrite_r>
  816a88:	dfc00717 	ldw	ra,28(sp)
  816a8c:	dc400617 	ldw	r17,24(sp)
  816a90:	dc000517 	ldw	r16,20(sp)
  816a94:	dec00804 	addi	sp,sp,32
  816a98:	f800283a 	ret
  816a9c:	081671c0 	call	81671c <__sinit>
  816aa0:	003ff506 	br	816a78 <_fputs_r+0x48>

00816aa4 <fputs>:
  816aa4:	018020f4 	movhi	r6,131
  816aa8:	31a99904 	addi	r6,r6,-22940
  816aac:	2007883a 	mov	r3,r4
  816ab0:	31000017 	ldw	r4,0(r6)
  816ab4:	280d883a 	mov	r6,r5
  816ab8:	180b883a 	mov	r5,r3
  816abc:	0816a301 	jmpi	816a30 <_fputs_r>

00816ac0 <_malloc_trim_r>:
  816ac0:	defffb04 	addi	sp,sp,-20
  816ac4:	dcc00315 	stw	r19,12(sp)
  816ac8:	04c020f4 	movhi	r19,131
  816acc:	9ce3eb04 	addi	r19,r19,-28756
  816ad0:	dc800215 	stw	r18,8(sp)
  816ad4:	dc400115 	stw	r17,4(sp)
  816ad8:	dc000015 	stw	r16,0(sp)
  816adc:	2823883a 	mov	r17,r5
  816ae0:	2025883a 	mov	r18,r4
  816ae4:	dfc00415 	stw	ra,16(sp)
  816ae8:	081b63c0 	call	81b63c <__malloc_lock>
  816aec:	98800217 	ldw	r2,8(r19)
  816af0:	9009883a 	mov	r4,r18
  816af4:	000b883a 	mov	r5,zero
  816af8:	10c00117 	ldw	r3,4(r2)
  816afc:	00bfff04 	movi	r2,-4
  816b00:	18a0703a 	and	r16,r3,r2
  816b04:	8463c83a 	sub	r17,r16,r17
  816b08:	8c43fbc4 	addi	r17,r17,4079
  816b0c:	8822d33a 	srli	r17,r17,12
  816b10:	0083ffc4 	movi	r2,4095
  816b14:	8c7fffc4 	addi	r17,r17,-1
  816b18:	8822933a 	slli	r17,r17,12
  816b1c:	1440060e 	bge	r2,r17,816b38 <_malloc_trim_r+0x78>
  816b20:	08124f40 	call	8124f4 <_sbrk_r>
  816b24:	98c00217 	ldw	r3,8(r19)
  816b28:	9009883a 	mov	r4,r18
  816b2c:	044bc83a 	sub	r5,zero,r17
  816b30:	80c7883a 	add	r3,r16,r3
  816b34:	10c00926 	beq	r2,r3,816b5c <_malloc_trim_r+0x9c>
  816b38:	081b7440 	call	81b744 <__malloc_unlock>
  816b3c:	0005883a 	mov	r2,zero
  816b40:	dfc00417 	ldw	ra,16(sp)
  816b44:	dcc00317 	ldw	r19,12(sp)
  816b48:	dc800217 	ldw	r18,8(sp)
  816b4c:	dc400117 	ldw	r17,4(sp)
  816b50:	dc000017 	ldw	r16,0(sp)
  816b54:	dec00504 	addi	sp,sp,20
  816b58:	f800283a 	ret
  816b5c:	9009883a 	mov	r4,r18
  816b60:	08124f40 	call	8124f4 <_sbrk_r>
  816b64:	844dc83a 	sub	r6,r16,r17
  816b68:	00ffffc4 	movi	r3,-1
  816b6c:	9009883a 	mov	r4,r18
  816b70:	000b883a 	mov	r5,zero
  816b74:	01c020f4 	movhi	r7,131
  816b78:	39e9f404 	addi	r7,r7,-22576
  816b7c:	31800054 	ori	r6,r6,1
  816b80:	10c00926 	beq	r2,r3,816ba8 <_malloc_trim_r+0xe8>
  816b84:	38800017 	ldw	r2,0(r7)
  816b88:	98c00217 	ldw	r3,8(r19)
  816b8c:	9009883a 	mov	r4,r18
  816b90:	1445c83a 	sub	r2,r2,r17
  816b94:	38800015 	stw	r2,0(r7)
  816b98:	19800115 	stw	r6,4(r3)
  816b9c:	081b7440 	call	81b744 <__malloc_unlock>
  816ba0:	00800044 	movi	r2,1
  816ba4:	003fe606 	br	816b40 <_malloc_trim_r+0x80>
  816ba8:	08124f40 	call	8124f4 <_sbrk_r>
  816bac:	99800217 	ldw	r6,8(r19)
  816bb0:	100f883a 	mov	r7,r2
  816bb4:	9009883a 	mov	r4,r18
  816bb8:	1187c83a 	sub	r3,r2,r6
  816bbc:	008003c4 	movi	r2,15
  816bc0:	19400054 	ori	r5,r3,1
  816bc4:	10ffdc0e 	bge	r2,r3,816b38 <_malloc_trim_r+0x78>
  816bc8:	008020f4 	movhi	r2,131
  816bcc:	10a99c04 	addi	r2,r2,-22928
  816bd0:	10c00017 	ldw	r3,0(r2)
  816bd4:	008020f4 	movhi	r2,131
  816bd8:	10a9f404 	addi	r2,r2,-22576
  816bdc:	31400115 	stw	r5,4(r6)
  816be0:	38c7c83a 	sub	r3,r7,r3
  816be4:	10c00015 	stw	r3,0(r2)
  816be8:	003fd306 	br	816b38 <_malloc_trim_r+0x78>

00816bec <_free_r>:
  816bec:	defffd04 	addi	sp,sp,-12
  816bf0:	dc400115 	stw	r17,4(sp)
  816bf4:	dc000015 	stw	r16,0(sp)
  816bf8:	dfc00215 	stw	ra,8(sp)
  816bfc:	2821883a 	mov	r16,r5
  816c00:	2023883a 	mov	r17,r4
  816c04:	28005a26 	beq	r5,zero,816d70 <_free_r+0x184>
  816c08:	081b63c0 	call	81b63c <__malloc_lock>
  816c0c:	823ffe04 	addi	r8,r16,-8
  816c10:	41400117 	ldw	r5,4(r8)
  816c14:	00bfff84 	movi	r2,-2
  816c18:	028020f4 	movhi	r10,131
  816c1c:	52a3eb04 	addi	r10,r10,-28756
  816c20:	288e703a 	and	r7,r5,r2
  816c24:	41cd883a 	add	r6,r8,r7
  816c28:	30c00117 	ldw	r3,4(r6)
  816c2c:	51000217 	ldw	r4,8(r10)
  816c30:	00bfff04 	movi	r2,-4
  816c34:	1892703a 	and	r9,r3,r2
  816c38:	5017883a 	mov	r11,r10
  816c3c:	31006726 	beq	r6,r4,816ddc <_free_r+0x1f0>
  816c40:	2880004c 	andi	r2,r5,1
  816c44:	1005003a 	cmpeq	r2,r2,zero
  816c48:	32400115 	stw	r9,4(r6)
  816c4c:	10001a1e 	bne	r2,zero,816cb8 <_free_r+0xcc>
  816c50:	000b883a 	mov	r5,zero
  816c54:	3247883a 	add	r3,r6,r9
  816c58:	18800117 	ldw	r2,4(r3)
  816c5c:	1080004c 	andi	r2,r2,1
  816c60:	1000231e 	bne	r2,zero,816cf0 <_free_r+0x104>
  816c64:	280ac03a 	cmpne	r5,r5,zero
  816c68:	3a4f883a 	add	r7,r7,r9
  816c6c:	2800451e 	bne	r5,zero,816d84 <_free_r+0x198>
  816c70:	31000217 	ldw	r4,8(r6)
  816c74:	008020f4 	movhi	r2,131
  816c78:	10a3ed04 	addi	r2,r2,-28748
  816c7c:	20807b26 	beq	r4,r2,816e6c <_free_r+0x280>
  816c80:	30800317 	ldw	r2,12(r6)
  816c84:	3a07883a 	add	r3,r7,r8
  816c88:	19c00015 	stw	r7,0(r3)
  816c8c:	11000215 	stw	r4,8(r2)
  816c90:	20800315 	stw	r2,12(r4)
  816c94:	38800054 	ori	r2,r7,1
  816c98:	40800115 	stw	r2,4(r8)
  816c9c:	28001a26 	beq	r5,zero,816d08 <_free_r+0x11c>
  816ca0:	8809883a 	mov	r4,r17
  816ca4:	dfc00217 	ldw	ra,8(sp)
  816ca8:	dc400117 	ldw	r17,4(sp)
  816cac:	dc000017 	ldw	r16,0(sp)
  816cb0:	dec00304 	addi	sp,sp,12
  816cb4:	081b7441 	jmpi	81b744 <__malloc_unlock>
  816cb8:	80bffe17 	ldw	r2,-8(r16)
  816cbc:	50c00204 	addi	r3,r10,8
  816cc0:	4091c83a 	sub	r8,r8,r2
  816cc4:	41000217 	ldw	r4,8(r8)
  816cc8:	388f883a 	add	r7,r7,r2
  816ccc:	20c06126 	beq	r4,r3,816e54 <_free_r+0x268>
  816cd0:	40800317 	ldw	r2,12(r8)
  816cd4:	3247883a 	add	r3,r6,r9
  816cd8:	000b883a 	mov	r5,zero
  816cdc:	11000215 	stw	r4,8(r2)
  816ce0:	20800315 	stw	r2,12(r4)
  816ce4:	18800117 	ldw	r2,4(r3)
  816ce8:	1080004c 	andi	r2,r2,1
  816cec:	103fdd26 	beq	r2,zero,816c64 <_free_r+0x78>
  816cf0:	38800054 	ori	r2,r7,1
  816cf4:	3a07883a 	add	r3,r7,r8
  816cf8:	280ac03a 	cmpne	r5,r5,zero
  816cfc:	40800115 	stw	r2,4(r8)
  816d00:	19c00015 	stw	r7,0(r3)
  816d04:	283fe61e 	bne	r5,zero,816ca0 <_free_r+0xb4>
  816d08:	00807fc4 	movi	r2,511
  816d0c:	11c01f2e 	bgeu	r2,r7,816d8c <_free_r+0x1a0>
  816d10:	3806d27a 	srli	r3,r7,9
  816d14:	1800481e 	bne	r3,zero,816e38 <_free_r+0x24c>
  816d18:	3804d0fa 	srli	r2,r7,3
  816d1c:	100690fa 	slli	r3,r2,3
  816d20:	1acd883a 	add	r6,r3,r11
  816d24:	31400217 	ldw	r5,8(r6)
  816d28:	31405926 	beq	r6,r5,816e90 <_free_r+0x2a4>
  816d2c:	28800117 	ldw	r2,4(r5)
  816d30:	00ffff04 	movi	r3,-4
  816d34:	10c4703a 	and	r2,r2,r3
  816d38:	3880022e 	bgeu	r7,r2,816d44 <_free_r+0x158>
  816d3c:	29400217 	ldw	r5,8(r5)
  816d40:	317ffa1e 	bne	r6,r5,816d2c <_free_r+0x140>
  816d44:	29800317 	ldw	r6,12(r5)
  816d48:	41800315 	stw	r6,12(r8)
  816d4c:	41400215 	stw	r5,8(r8)
  816d50:	8809883a 	mov	r4,r17
  816d54:	2a000315 	stw	r8,12(r5)
  816d58:	32000215 	stw	r8,8(r6)
  816d5c:	dfc00217 	ldw	ra,8(sp)
  816d60:	dc400117 	ldw	r17,4(sp)
  816d64:	dc000017 	ldw	r16,0(sp)
  816d68:	dec00304 	addi	sp,sp,12
  816d6c:	081b7441 	jmpi	81b744 <__malloc_unlock>
  816d70:	dfc00217 	ldw	ra,8(sp)
  816d74:	dc400117 	ldw	r17,4(sp)
  816d78:	dc000017 	ldw	r16,0(sp)
  816d7c:	dec00304 	addi	sp,sp,12
  816d80:	f800283a 	ret
  816d84:	31000217 	ldw	r4,8(r6)
  816d88:	003fbd06 	br	816c80 <_free_r+0x94>
  816d8c:	3806d0fa 	srli	r3,r7,3
  816d90:	00800044 	movi	r2,1
  816d94:	51400117 	ldw	r5,4(r10)
  816d98:	180890fa 	slli	r4,r3,3
  816d9c:	1807d0ba 	srai	r3,r3,2
  816da0:	22c9883a 	add	r4,r4,r11
  816da4:	21800217 	ldw	r6,8(r4)
  816da8:	10c4983a 	sll	r2,r2,r3
  816dac:	41000315 	stw	r4,12(r8)
  816db0:	41800215 	stw	r6,8(r8)
  816db4:	288ab03a 	or	r5,r5,r2
  816db8:	22000215 	stw	r8,8(r4)
  816dbc:	8809883a 	mov	r4,r17
  816dc0:	51400115 	stw	r5,4(r10)
  816dc4:	32000315 	stw	r8,12(r6)
  816dc8:	dfc00217 	ldw	ra,8(sp)
  816dcc:	dc400117 	ldw	r17,4(sp)
  816dd0:	dc000017 	ldw	r16,0(sp)
  816dd4:	dec00304 	addi	sp,sp,12
  816dd8:	081b7441 	jmpi	81b744 <__malloc_unlock>
  816ddc:	2880004c 	andi	r2,r5,1
  816de0:	3a4d883a 	add	r6,r7,r9
  816de4:	1000071e 	bne	r2,zero,816e04 <_free_r+0x218>
  816de8:	80bffe17 	ldw	r2,-8(r16)
  816dec:	4091c83a 	sub	r8,r8,r2
  816df0:	41000317 	ldw	r4,12(r8)
  816df4:	40c00217 	ldw	r3,8(r8)
  816df8:	308d883a 	add	r6,r6,r2
  816dfc:	20c00215 	stw	r3,8(r4)
  816e00:	19000315 	stw	r4,12(r3)
  816e04:	008020f4 	movhi	r2,131
  816e08:	10a99b04 	addi	r2,r2,-22932
  816e0c:	11000017 	ldw	r4,0(r2)
  816e10:	30c00054 	ori	r3,r6,1
  816e14:	52000215 	stw	r8,8(r10)
  816e18:	40c00115 	stw	r3,4(r8)
  816e1c:	313fa036 	bltu	r6,r4,816ca0 <_free_r+0xb4>
  816e20:	008020f4 	movhi	r2,131
  816e24:	10a9ce04 	addi	r2,r2,-22728
  816e28:	11400017 	ldw	r5,0(r2)
  816e2c:	8809883a 	mov	r4,r17
  816e30:	0816ac00 	call	816ac0 <_malloc_trim_r>
  816e34:	003f9a06 	br	816ca0 <_free_r+0xb4>
  816e38:	00800104 	movi	r2,4
  816e3c:	10c0072e 	bgeu	r2,r3,816e5c <_free_r+0x270>
  816e40:	00800504 	movi	r2,20
  816e44:	10c01936 	bltu	r2,r3,816eac <_free_r+0x2c0>
  816e48:	188016c4 	addi	r2,r3,91
  816e4c:	100690fa 	slli	r3,r2,3
  816e50:	003fb306 	br	816d20 <_free_r+0x134>
  816e54:	01400044 	movi	r5,1
  816e58:	003f7e06 	br	816c54 <_free_r+0x68>
  816e5c:	3804d1ba 	srli	r2,r7,6
  816e60:	10800e04 	addi	r2,r2,56
  816e64:	100690fa 	slli	r3,r2,3
  816e68:	003fad06 	br	816d20 <_free_r+0x134>
  816e6c:	22000315 	stw	r8,12(r4)
  816e70:	22000215 	stw	r8,8(r4)
  816e74:	3a05883a 	add	r2,r7,r8
  816e78:	38c00054 	ori	r3,r7,1
  816e7c:	11c00015 	stw	r7,0(r2)
  816e80:	41000215 	stw	r4,8(r8)
  816e84:	40c00115 	stw	r3,4(r8)
  816e88:	41000315 	stw	r4,12(r8)
  816e8c:	003f8406 	br	816ca0 <_free_r+0xb4>
  816e90:	1005d0ba 	srai	r2,r2,2
  816e94:	00c00044 	movi	r3,1
  816e98:	51000117 	ldw	r4,4(r10)
  816e9c:	1886983a 	sll	r3,r3,r2
  816ea0:	20c8b03a 	or	r4,r4,r3
  816ea4:	51000115 	stw	r4,4(r10)
  816ea8:	003fa706 	br	816d48 <_free_r+0x15c>
  816eac:	00801504 	movi	r2,84
  816eb0:	10c00436 	bltu	r2,r3,816ec4 <_free_r+0x2d8>
  816eb4:	3804d33a 	srli	r2,r7,12
  816eb8:	10801b84 	addi	r2,r2,110
  816ebc:	100690fa 	slli	r3,r2,3
  816ec0:	003f9706 	br	816d20 <_free_r+0x134>
  816ec4:	00805504 	movi	r2,340
  816ec8:	10c00436 	bltu	r2,r3,816edc <_free_r+0x2f0>
  816ecc:	3804d3fa 	srli	r2,r7,15
  816ed0:	10801dc4 	addi	r2,r2,119
  816ed4:	100690fa 	slli	r3,r2,3
  816ed8:	003f9106 	br	816d20 <_free_r+0x134>
  816edc:	00815504 	movi	r2,1364
  816ee0:	10c0032e 	bgeu	r2,r3,816ef0 <_free_r+0x304>
  816ee4:	00801f84 	movi	r2,126
  816ee8:	00c0fc04 	movi	r3,1008
  816eec:	003f8c06 	br	816d20 <_free_r+0x134>
  816ef0:	3804d4ba 	srli	r2,r7,18
  816ef4:	10801f04 	addi	r2,r2,124
  816ef8:	100690fa 	slli	r3,r2,3
  816efc:	003f8806 	br	816d20 <_free_r+0x134>

00816f00 <__sfvwrite_r>:
  816f00:	30800217 	ldw	r2,8(r6)
  816f04:	defff504 	addi	sp,sp,-44
  816f08:	df000915 	stw	fp,36(sp)
  816f0c:	dd800715 	stw	r22,28(sp)
  816f10:	dc800315 	stw	r18,12(sp)
  816f14:	dfc00a15 	stw	ra,40(sp)
  816f18:	ddc00815 	stw	r23,32(sp)
  816f1c:	dd400615 	stw	r21,24(sp)
  816f20:	dd000515 	stw	r20,20(sp)
  816f24:	dcc00415 	stw	r19,16(sp)
  816f28:	dc400215 	stw	r17,8(sp)
  816f2c:	dc000115 	stw	r16,4(sp)
  816f30:	302d883a 	mov	r22,r6
  816f34:	2039883a 	mov	fp,r4
  816f38:	2825883a 	mov	r18,r5
  816f3c:	10001c26 	beq	r2,zero,816fb0 <__sfvwrite_r+0xb0>
  816f40:	29c0030b 	ldhu	r7,12(r5)
  816f44:	3880020c 	andi	r2,r7,8
  816f48:	10002726 	beq	r2,zero,816fe8 <__sfvwrite_r+0xe8>
  816f4c:	28800417 	ldw	r2,16(r5)
  816f50:	10002526 	beq	r2,zero,816fe8 <__sfvwrite_r+0xe8>
  816f54:	3880008c 	andi	r2,r7,2
  816f58:	b5400017 	ldw	r21,0(r22)
  816f5c:	10002826 	beq	r2,zero,817000 <__sfvwrite_r+0x100>
  816f60:	0021883a 	mov	r16,zero
  816f64:	0023883a 	mov	r17,zero
  816f68:	880d883a 	mov	r6,r17
  816f6c:	e009883a 	mov	r4,fp
  816f70:	00810004 	movi	r2,1024
  816f74:	80006e26 	beq	r16,zero,817130 <__sfvwrite_r+0x230>
  816f78:	800f883a 	mov	r7,r16
  816f7c:	91400717 	ldw	r5,28(r18)
  816f80:	1400012e 	bgeu	r2,r16,816f88 <__sfvwrite_r+0x88>
  816f84:	100f883a 	mov	r7,r2
  816f88:	90c00917 	ldw	r3,36(r18)
  816f8c:	183ee83a 	callr	r3
  816f90:	1007883a 	mov	r3,r2
  816f94:	80a1c83a 	sub	r16,r16,r2
  816f98:	88a3883a 	add	r17,r17,r2
  816f9c:	00806d0e 	bge	zero,r2,817154 <__sfvwrite_r+0x254>
  816fa0:	b0800217 	ldw	r2,8(r22)
  816fa4:	10c5c83a 	sub	r2,r2,r3
  816fa8:	b0800215 	stw	r2,8(r22)
  816fac:	103fee1e 	bne	r2,zero,816f68 <__sfvwrite_r+0x68>
  816fb0:	0009883a 	mov	r4,zero
  816fb4:	2005883a 	mov	r2,r4
  816fb8:	dfc00a17 	ldw	ra,40(sp)
  816fbc:	df000917 	ldw	fp,36(sp)
  816fc0:	ddc00817 	ldw	r23,32(sp)
  816fc4:	dd800717 	ldw	r22,28(sp)
  816fc8:	dd400617 	ldw	r21,24(sp)
  816fcc:	dd000517 	ldw	r20,20(sp)
  816fd0:	dcc00417 	ldw	r19,16(sp)
  816fd4:	dc800317 	ldw	r18,12(sp)
  816fd8:	dc400217 	ldw	r17,8(sp)
  816fdc:	dc000117 	ldw	r16,4(sp)
  816fe0:	dec00b04 	addi	sp,sp,44
  816fe4:	f800283a 	ret
  816fe8:	0814b7c0 	call	814b7c <__swsetup_r>
  816fec:	1000e41e 	bne	r2,zero,817380 <__sfvwrite_r+0x480>
  816ff0:	91c0030b 	ldhu	r7,12(r18)
  816ff4:	b5400017 	ldw	r21,0(r22)
  816ff8:	3880008c 	andi	r2,r7,2
  816ffc:	103fd81e 	bne	r2,zero,816f60 <__sfvwrite_r+0x60>
  817000:	3880004c 	andi	r2,r7,1
  817004:	1005003a 	cmpeq	r2,r2,zero
  817008:	10005726 	beq	r2,zero,817168 <__sfvwrite_r+0x268>
  81700c:	0029883a 	mov	r20,zero
  817010:	002f883a 	mov	r23,zero
  817014:	a0004226 	beq	r20,zero,817120 <__sfvwrite_r+0x220>
  817018:	3880800c 	andi	r2,r7,512
  81701c:	94000217 	ldw	r16,8(r18)
  817020:	10008b26 	beq	r2,zero,817250 <__sfvwrite_r+0x350>
  817024:	800d883a 	mov	r6,r16
  817028:	a400a536 	bltu	r20,r16,8172c0 <__sfvwrite_r+0x3c0>
  81702c:	3881200c 	andi	r2,r7,1152
  817030:	10002726 	beq	r2,zero,8170d0 <__sfvwrite_r+0x1d0>
  817034:	90800517 	ldw	r2,20(r18)
  817038:	92000417 	ldw	r8,16(r18)
  81703c:	91400017 	ldw	r5,0(r18)
  817040:	1087883a 	add	r3,r2,r2
  817044:	1887883a 	add	r3,r3,r2
  817048:	1808d7fa 	srli	r4,r3,31
  81704c:	2a21c83a 	sub	r16,r5,r8
  817050:	80800044 	addi	r2,r16,1
  817054:	20c9883a 	add	r4,r4,r3
  817058:	2027d07a 	srai	r19,r4,1
  81705c:	a085883a 	add	r2,r20,r2
  817060:	980d883a 	mov	r6,r19
  817064:	9880022e 	bgeu	r19,r2,817070 <__sfvwrite_r+0x170>
  817068:	1027883a 	mov	r19,r2
  81706c:	100d883a 	mov	r6,r2
  817070:	3881000c 	andi	r2,r7,1024
  817074:	1000b826 	beq	r2,zero,817358 <__sfvwrite_r+0x458>
  817078:	300b883a 	mov	r5,r6
  81707c:	e009883a 	mov	r4,fp
  817080:	0811b440 	call	811b44 <_malloc_r>
  817084:	10003126 	beq	r2,zero,81714c <__sfvwrite_r+0x24c>
  817088:	91400417 	ldw	r5,16(r18)
  81708c:	1009883a 	mov	r4,r2
  817090:	800d883a 	mov	r6,r16
  817094:	1023883a 	mov	r17,r2
  817098:	08122840 	call	812284 <memcpy>
  81709c:	90c0030b 	ldhu	r3,12(r18)
  8170a0:	00beffc4 	movi	r2,-1025
  8170a4:	1886703a 	and	r3,r3,r2
  8170a8:	18c02014 	ori	r3,r3,128
  8170ac:	90c0030d 	sth	r3,12(r18)
  8170b0:	9c07c83a 	sub	r3,r19,r16
  8170b4:	8c05883a 	add	r2,r17,r16
  8170b8:	a00d883a 	mov	r6,r20
  8170bc:	a021883a 	mov	r16,r20
  8170c0:	90800015 	stw	r2,0(r18)
  8170c4:	90c00215 	stw	r3,8(r18)
  8170c8:	94400415 	stw	r17,16(r18)
  8170cc:	94c00515 	stw	r19,20(r18)
  8170d0:	91000017 	ldw	r4,0(r18)
  8170d4:	b80b883a 	mov	r5,r23
  8170d8:	a023883a 	mov	r17,r20
  8170dc:	08178580 	call	817858 <memmove>
  8170e0:	90c00217 	ldw	r3,8(r18)
  8170e4:	90800017 	ldw	r2,0(r18)
  8170e8:	a027883a 	mov	r19,r20
  8170ec:	1c07c83a 	sub	r3,r3,r16
  8170f0:	1405883a 	add	r2,r2,r16
  8170f4:	90c00215 	stw	r3,8(r18)
  8170f8:	a021883a 	mov	r16,r20
  8170fc:	90800015 	stw	r2,0(r18)
  817100:	b0800217 	ldw	r2,8(r22)
  817104:	1405c83a 	sub	r2,r2,r16
  817108:	b0800215 	stw	r2,8(r22)
  81710c:	103fa826 	beq	r2,zero,816fb0 <__sfvwrite_r+0xb0>
  817110:	a469c83a 	sub	r20,r20,r17
  817114:	91c0030b 	ldhu	r7,12(r18)
  817118:	bcef883a 	add	r23,r23,r19
  81711c:	a03fbe1e 	bne	r20,zero,817018 <__sfvwrite_r+0x118>
  817120:	adc00017 	ldw	r23,0(r21)
  817124:	ad000117 	ldw	r20,4(r21)
  817128:	ad400204 	addi	r21,r21,8
  81712c:	003fb906 	br	817014 <__sfvwrite_r+0x114>
  817130:	ac400017 	ldw	r17,0(r21)
  817134:	ac000117 	ldw	r16,4(r21)
  817138:	ad400204 	addi	r21,r21,8
  81713c:	003f8a06 	br	816f68 <__sfvwrite_r+0x68>
  817140:	91400417 	ldw	r5,16(r18)
  817144:	e009883a 	mov	r4,fp
  817148:	0816bec0 	call	816bec <_free_r>
  81714c:	00800304 	movi	r2,12
  817150:	e0800015 	stw	r2,0(fp)
  817154:	9080030b 	ldhu	r2,12(r18)
  817158:	013fffc4 	movi	r4,-1
  81715c:	10801014 	ori	r2,r2,64
  817160:	9080030d 	sth	r2,12(r18)
  817164:	003f9306 	br	816fb4 <__sfvwrite_r+0xb4>
  817168:	0027883a 	mov	r19,zero
  81716c:	002f883a 	mov	r23,zero
  817170:	d8000015 	stw	zero,0(sp)
  817174:	0029883a 	mov	r20,zero
  817178:	98001e26 	beq	r19,zero,8171f4 <__sfvwrite_r+0x2f4>
  81717c:	d8c00017 	ldw	r3,0(sp)
  817180:	1804c03a 	cmpne	r2,r3,zero
  817184:	10005e26 	beq	r2,zero,817300 <__sfvwrite_r+0x400>
  817188:	9821883a 	mov	r16,r19
  81718c:	a4c0012e 	bgeu	r20,r19,817194 <__sfvwrite_r+0x294>
  817190:	a021883a 	mov	r16,r20
  817194:	91000017 	ldw	r4,0(r18)
  817198:	90800417 	ldw	r2,16(r18)
  81719c:	91800217 	ldw	r6,8(r18)
  8171a0:	91c00517 	ldw	r7,20(r18)
  8171a4:	1100022e 	bgeu	r2,r4,8171b0 <__sfvwrite_r+0x2b0>
  8171a8:	31e3883a 	add	r17,r6,r7
  8171ac:	8c001616 	blt	r17,r16,817208 <__sfvwrite_r+0x308>
  8171b0:	81c03816 	blt	r16,r7,817294 <__sfvwrite_r+0x394>
  8171b4:	90c00917 	ldw	r3,36(r18)
  8171b8:	91400717 	ldw	r5,28(r18)
  8171bc:	e009883a 	mov	r4,fp
  8171c0:	b80d883a 	mov	r6,r23
  8171c4:	183ee83a 	callr	r3
  8171c8:	1023883a 	mov	r17,r2
  8171cc:	00bfe10e 	bge	zero,r2,817154 <__sfvwrite_r+0x254>
  8171d0:	a469c83a 	sub	r20,r20,r17
  8171d4:	a0001826 	beq	r20,zero,817238 <__sfvwrite_r+0x338>
  8171d8:	b0800217 	ldw	r2,8(r22)
  8171dc:	1445c83a 	sub	r2,r2,r17
  8171e0:	b0800215 	stw	r2,8(r22)
  8171e4:	103f7226 	beq	r2,zero,816fb0 <__sfvwrite_r+0xb0>
  8171e8:	9c67c83a 	sub	r19,r19,r17
  8171ec:	bc6f883a 	add	r23,r23,r17
  8171f0:	983fe21e 	bne	r19,zero,81717c <__sfvwrite_r+0x27c>
  8171f4:	adc00017 	ldw	r23,0(r21)
  8171f8:	acc00117 	ldw	r19,4(r21)
  8171fc:	ad400204 	addi	r21,r21,8
  817200:	d8000015 	stw	zero,0(sp)
  817204:	003fdc06 	br	817178 <__sfvwrite_r+0x278>
  817208:	b80b883a 	mov	r5,r23
  81720c:	880d883a 	mov	r6,r17
  817210:	08178580 	call	817858 <memmove>
  817214:	90c00017 	ldw	r3,0(r18)
  817218:	e009883a 	mov	r4,fp
  81721c:	900b883a 	mov	r5,r18
  817220:	1c47883a 	add	r3,r3,r17
  817224:	90c00015 	stw	r3,0(r18)
  817228:	08164840 	call	816484 <_fflush_r>
  81722c:	103fc91e 	bne	r2,zero,817154 <__sfvwrite_r+0x254>
  817230:	a469c83a 	sub	r20,r20,r17
  817234:	a03fe81e 	bne	r20,zero,8171d8 <__sfvwrite_r+0x2d8>
  817238:	e009883a 	mov	r4,fp
  81723c:	900b883a 	mov	r5,r18
  817240:	08164840 	call	816484 <_fflush_r>
  817244:	103fc31e 	bne	r2,zero,817154 <__sfvwrite_r+0x254>
  817248:	d8000015 	stw	zero,0(sp)
  81724c:	003fe206 	br	8171d8 <__sfvwrite_r+0x2d8>
  817250:	91000017 	ldw	r4,0(r18)
  817254:	90800417 	ldw	r2,16(r18)
  817258:	1100022e 	bgeu	r2,r4,817264 <__sfvwrite_r+0x364>
  81725c:	8023883a 	mov	r17,r16
  817260:	85003136 	bltu	r16,r20,817328 <__sfvwrite_r+0x428>
  817264:	91c00517 	ldw	r7,20(r18)
  817268:	a1c01836 	bltu	r20,r7,8172cc <__sfvwrite_r+0x3cc>
  81726c:	90c00917 	ldw	r3,36(r18)
  817270:	91400717 	ldw	r5,28(r18)
  817274:	e009883a 	mov	r4,fp
  817278:	b80d883a 	mov	r6,r23
  81727c:	183ee83a 	callr	r3
  817280:	1021883a 	mov	r16,r2
  817284:	00bfb30e 	bge	zero,r2,817154 <__sfvwrite_r+0x254>
  817288:	1023883a 	mov	r17,r2
  81728c:	1027883a 	mov	r19,r2
  817290:	003f9b06 	br	817100 <__sfvwrite_r+0x200>
  817294:	b80b883a 	mov	r5,r23
  817298:	800d883a 	mov	r6,r16
  81729c:	08178580 	call	817858 <memmove>
  8172a0:	90c00217 	ldw	r3,8(r18)
  8172a4:	90800017 	ldw	r2,0(r18)
  8172a8:	8023883a 	mov	r17,r16
  8172ac:	1c07c83a 	sub	r3,r3,r16
  8172b0:	1405883a 	add	r2,r2,r16
  8172b4:	90c00215 	stw	r3,8(r18)
  8172b8:	90800015 	stw	r2,0(r18)
  8172bc:	003fc406 	br	8171d0 <__sfvwrite_r+0x2d0>
  8172c0:	a00d883a 	mov	r6,r20
  8172c4:	a021883a 	mov	r16,r20
  8172c8:	003f8106 	br	8170d0 <__sfvwrite_r+0x1d0>
  8172cc:	b80b883a 	mov	r5,r23
  8172d0:	a00d883a 	mov	r6,r20
  8172d4:	08178580 	call	817858 <memmove>
  8172d8:	90c00217 	ldw	r3,8(r18)
  8172dc:	90800017 	ldw	r2,0(r18)
  8172e0:	a021883a 	mov	r16,r20
  8172e4:	1d07c83a 	sub	r3,r3,r20
  8172e8:	1505883a 	add	r2,r2,r20
  8172ec:	a023883a 	mov	r17,r20
  8172f0:	a027883a 	mov	r19,r20
  8172f4:	90c00215 	stw	r3,8(r18)
  8172f8:	90800015 	stw	r2,0(r18)
  8172fc:	003f8006 	br	817100 <__sfvwrite_r+0x200>
  817300:	b809883a 	mov	r4,r23
  817304:	01400284 	movi	r5,10
  817308:	980d883a 	mov	r6,r19
  81730c:	08177740 	call	817774 <memchr>
  817310:	10001726 	beq	r2,zero,817370 <__sfvwrite_r+0x470>
  817314:	15c5c83a 	sub	r2,r2,r23
  817318:	15000044 	addi	r20,r2,1
  81731c:	00800044 	movi	r2,1
  817320:	d8800015 	stw	r2,0(sp)
  817324:	003f9806 	br	817188 <__sfvwrite_r+0x288>
  817328:	b80b883a 	mov	r5,r23
  81732c:	800d883a 	mov	r6,r16
  817330:	08178580 	call	817858 <memmove>
  817334:	90c00017 	ldw	r3,0(r18)
  817338:	e009883a 	mov	r4,fp
  81733c:	900b883a 	mov	r5,r18
  817340:	1c07883a 	add	r3,r3,r16
  817344:	90c00015 	stw	r3,0(r18)
  817348:	8027883a 	mov	r19,r16
  81734c:	08164840 	call	816484 <_fflush_r>
  817350:	103f6b26 	beq	r2,zero,817100 <__sfvwrite_r+0x200>
  817354:	003f7f06 	br	817154 <__sfvwrite_r+0x254>
  817358:	400b883a 	mov	r5,r8
  81735c:	e009883a 	mov	r4,fp
  817360:	0818bb00 	call	818bb0 <_realloc_r>
  817364:	103f7626 	beq	r2,zero,817140 <__sfvwrite_r+0x240>
  817368:	1023883a 	mov	r17,r2
  81736c:	003f5006 	br	8170b0 <__sfvwrite_r+0x1b0>
  817370:	00c00044 	movi	r3,1
  817374:	9d000044 	addi	r20,r19,1
  817378:	d8c00015 	stw	r3,0(sp)
  81737c:	003f8206 	br	817188 <__sfvwrite_r+0x288>
  817380:	9080030b 	ldhu	r2,12(r18)
  817384:	00c00244 	movi	r3,9
  817388:	013fffc4 	movi	r4,-1
  81738c:	10801014 	ori	r2,r2,64
  817390:	9080030d 	sth	r2,12(r18)
  817394:	e0c00015 	stw	r3,0(fp)
  817398:	003f0606 	br	816fb4 <__sfvwrite_r+0xb4>

0081739c <_fwalk_reent>:
  81739c:	defff704 	addi	sp,sp,-36
  8173a0:	dcc00315 	stw	r19,12(sp)
  8173a4:	24c0b804 	addi	r19,r4,736
  8173a8:	dd800615 	stw	r22,24(sp)
  8173ac:	dd400515 	stw	r21,20(sp)
  8173b0:	dfc00815 	stw	ra,32(sp)
  8173b4:	ddc00715 	stw	r23,28(sp)
  8173b8:	dd000415 	stw	r20,16(sp)
  8173bc:	dc800215 	stw	r18,8(sp)
  8173c0:	dc400115 	stw	r17,4(sp)
  8173c4:	dc000015 	stw	r16,0(sp)
  8173c8:	202b883a 	mov	r21,r4
  8173cc:	282d883a 	mov	r22,r5
  8173d0:	081670c0 	call	81670c <__sfp_lock_acquire>
  8173d4:	98002126 	beq	r19,zero,81745c <_fwalk_reent+0xc0>
  8173d8:	002f883a 	mov	r23,zero
  8173dc:	9c800117 	ldw	r18,4(r19)
  8173e0:	9c000217 	ldw	r16,8(r19)
  8173e4:	90bfffc4 	addi	r2,r18,-1
  8173e8:	10000d16 	blt	r2,zero,817420 <_fwalk_reent+0x84>
  8173ec:	0023883a 	mov	r17,zero
  8173f0:	053fffc4 	movi	r20,-1
  8173f4:	8080030f 	ldh	r2,12(r16)
  8173f8:	8c400044 	addi	r17,r17,1
  8173fc:	10000626 	beq	r2,zero,817418 <_fwalk_reent+0x7c>
  817400:	8080038f 	ldh	r2,14(r16)
  817404:	800b883a 	mov	r5,r16
  817408:	a809883a 	mov	r4,r21
  81740c:	15000226 	beq	r2,r20,817418 <_fwalk_reent+0x7c>
  817410:	b03ee83a 	callr	r22
  817414:	b8aeb03a 	or	r23,r23,r2
  817418:	84001704 	addi	r16,r16,92
  81741c:	947ff51e 	bne	r18,r17,8173f4 <_fwalk_reent+0x58>
  817420:	9cc00017 	ldw	r19,0(r19)
  817424:	983fed1e 	bne	r19,zero,8173dc <_fwalk_reent+0x40>
  817428:	08167100 	call	816710 <__sfp_lock_release>
  81742c:	b805883a 	mov	r2,r23
  817430:	dfc00817 	ldw	ra,32(sp)
  817434:	ddc00717 	ldw	r23,28(sp)
  817438:	dd800617 	ldw	r22,24(sp)
  81743c:	dd400517 	ldw	r21,20(sp)
  817440:	dd000417 	ldw	r20,16(sp)
  817444:	dcc00317 	ldw	r19,12(sp)
  817448:	dc800217 	ldw	r18,8(sp)
  81744c:	dc400117 	ldw	r17,4(sp)
  817450:	dc000017 	ldw	r16,0(sp)
  817454:	dec00904 	addi	sp,sp,36
  817458:	f800283a 	ret
  81745c:	002f883a 	mov	r23,zero
  817460:	003ff106 	br	817428 <_fwalk_reent+0x8c>

00817464 <_fwalk>:
  817464:	defff804 	addi	sp,sp,-32
  817468:	dcc00315 	stw	r19,12(sp)
  81746c:	24c0b804 	addi	r19,r4,736
  817470:	dd400515 	stw	r21,20(sp)
  817474:	dfc00715 	stw	ra,28(sp)
  817478:	dd800615 	stw	r22,24(sp)
  81747c:	dd000415 	stw	r20,16(sp)
  817480:	dc800215 	stw	r18,8(sp)
  817484:	dc400115 	stw	r17,4(sp)
  817488:	dc000015 	stw	r16,0(sp)
  81748c:	282b883a 	mov	r21,r5
  817490:	081670c0 	call	81670c <__sfp_lock_acquire>
  817494:	98001f26 	beq	r19,zero,817514 <_fwalk+0xb0>
  817498:	002d883a 	mov	r22,zero
  81749c:	9c800117 	ldw	r18,4(r19)
  8174a0:	9c000217 	ldw	r16,8(r19)
  8174a4:	90bfffc4 	addi	r2,r18,-1
  8174a8:	10000c16 	blt	r2,zero,8174dc <_fwalk+0x78>
  8174ac:	0023883a 	mov	r17,zero
  8174b0:	053fffc4 	movi	r20,-1
  8174b4:	8080030f 	ldh	r2,12(r16)
  8174b8:	8c400044 	addi	r17,r17,1
  8174bc:	10000526 	beq	r2,zero,8174d4 <_fwalk+0x70>
  8174c0:	8080038f 	ldh	r2,14(r16)
  8174c4:	8009883a 	mov	r4,r16
  8174c8:	15000226 	beq	r2,r20,8174d4 <_fwalk+0x70>
  8174cc:	a83ee83a 	callr	r21
  8174d0:	b0acb03a 	or	r22,r22,r2
  8174d4:	84001704 	addi	r16,r16,92
  8174d8:	947ff61e 	bne	r18,r17,8174b4 <_fwalk+0x50>
  8174dc:	9cc00017 	ldw	r19,0(r19)
  8174e0:	983fee1e 	bne	r19,zero,81749c <_fwalk+0x38>
  8174e4:	08167100 	call	816710 <__sfp_lock_release>
  8174e8:	b005883a 	mov	r2,r22
  8174ec:	dfc00717 	ldw	ra,28(sp)
  8174f0:	dd800617 	ldw	r22,24(sp)
  8174f4:	dd400517 	ldw	r21,20(sp)
  8174f8:	dd000417 	ldw	r20,16(sp)
  8174fc:	dcc00317 	ldw	r19,12(sp)
  817500:	dc800217 	ldw	r18,8(sp)
  817504:	dc400117 	ldw	r17,4(sp)
  817508:	dc000017 	ldw	r16,0(sp)
  81750c:	dec00804 	addi	sp,sp,32
  817510:	f800283a 	ret
  817514:	002d883a 	mov	r22,zero
  817518:	003ff206 	br	8174e4 <_fwalk+0x80>

0081751c <__locale_charset>:
  81751c:	d0a00617 	ldw	r2,-32744(gp)
  817520:	f800283a 	ret

00817524 <_localeconv_r>:
  817524:	008020f4 	movhi	r2,131
  817528:	10a22b04 	addi	r2,r2,-30548
  81752c:	f800283a 	ret

00817530 <localeconv>:
  817530:	008020f4 	movhi	r2,131
  817534:	10a99904 	addi	r2,r2,-22940
  817538:	11000017 	ldw	r4,0(r2)
  81753c:	08175241 	jmpi	817524 <_localeconv_r>

00817540 <_setlocale_r>:
  817540:	defffc04 	addi	sp,sp,-16
  817544:	00c020f4 	movhi	r3,131
  817548:	18e01704 	addi	r3,r3,-32676
  81754c:	dc800215 	stw	r18,8(sp)
  817550:	dc400115 	stw	r17,4(sp)
  817554:	dc000015 	stw	r16,0(sp)
  817558:	2023883a 	mov	r17,r4
  81755c:	2825883a 	mov	r18,r5
  817560:	dfc00315 	stw	ra,12(sp)
  817564:	3021883a 	mov	r16,r6
  817568:	3009883a 	mov	r4,r6
  81756c:	180b883a 	mov	r5,r3
  817570:	30000926 	beq	r6,zero,817598 <_setlocale_r+0x58>
  817574:	08193300 	call	819330 <strcmp>
  817578:	8009883a 	mov	r4,r16
  81757c:	014020f4 	movhi	r5,131
  817580:	29621204 	addi	r5,r5,-30648
  817584:	10000b1e 	bne	r2,zero,8175b4 <_setlocale_r+0x74>
  817588:	8c000d15 	stw	r16,52(r17)
  81758c:	8c800c15 	stw	r18,48(r17)
  817590:	00c020f4 	movhi	r3,131
  817594:	18e01704 	addi	r3,r3,-32676
  817598:	1805883a 	mov	r2,r3
  81759c:	dfc00317 	ldw	ra,12(sp)
  8175a0:	dc800217 	ldw	r18,8(sp)
  8175a4:	dc400117 	ldw	r17,4(sp)
  8175a8:	dc000017 	ldw	r16,0(sp)
  8175ac:	dec00404 	addi	sp,sp,16
  8175b0:	f800283a 	ret
  8175b4:	08193300 	call	819330 <strcmp>
  8175b8:	0007883a 	mov	r3,zero
  8175bc:	103ff226 	beq	r2,zero,817588 <_setlocale_r+0x48>
  8175c0:	003ff506 	br	817598 <_setlocale_r+0x58>

008175c4 <setlocale>:
  8175c4:	018020f4 	movhi	r6,131
  8175c8:	31a99904 	addi	r6,r6,-22940
  8175cc:	2007883a 	mov	r3,r4
  8175d0:	31000017 	ldw	r4,0(r6)
  8175d4:	280d883a 	mov	r6,r5
  8175d8:	180b883a 	mov	r5,r3
  8175dc:	08175401 	jmpi	817540 <_setlocale_r>

008175e0 <__smakebuf_r>:
  8175e0:	2880030b 	ldhu	r2,12(r5)
  8175e4:	deffed04 	addi	sp,sp,-76
  8175e8:	dc401015 	stw	r17,64(sp)
  8175ec:	1080008c 	andi	r2,r2,2
  8175f0:	dc000f15 	stw	r16,60(sp)
  8175f4:	dfc01215 	stw	ra,72(sp)
  8175f8:	dc801115 	stw	r18,68(sp)
  8175fc:	2821883a 	mov	r16,r5
  817600:	2023883a 	mov	r17,r4
  817604:	10000b26 	beq	r2,zero,817634 <__smakebuf_r+0x54>
  817608:	28c010c4 	addi	r3,r5,67
  81760c:	00800044 	movi	r2,1
  817610:	28800515 	stw	r2,20(r5)
  817614:	28c00415 	stw	r3,16(r5)
  817618:	28c00015 	stw	r3,0(r5)
  81761c:	dfc01217 	ldw	ra,72(sp)
  817620:	dc801117 	ldw	r18,68(sp)
  817624:	dc401017 	ldw	r17,64(sp)
  817628:	dc000f17 	ldw	r16,60(sp)
  81762c:	dec01304 	addi	sp,sp,76
  817630:	f800283a 	ret
  817634:	2940038f 	ldh	r5,14(r5)
  817638:	28002116 	blt	r5,zero,8176c0 <__smakebuf_r+0xe0>
  81763c:	d80d883a 	mov	r6,sp
  817640:	08197f80 	call	8197f8 <_fstat_r>
  817644:	10001e16 	blt	r2,zero,8176c0 <__smakebuf_r+0xe0>
  817648:	d8800117 	ldw	r2,4(sp)
  81764c:	00e00014 	movui	r3,32768
  817650:	113c000c 	andi	r4,r2,61440
  817654:	20c03126 	beq	r4,r3,81771c <__smakebuf_r+0x13c>
  817658:	8080030b 	ldhu	r2,12(r16)
  81765c:	00c80004 	movi	r3,8192
  817660:	10820014 	ori	r2,r2,2048
  817664:	8080030d 	sth	r2,12(r16)
  817668:	20c01e26 	beq	r4,r3,8176e4 <__smakebuf_r+0x104>
  81766c:	04810004 	movi	r18,1024
  817670:	8809883a 	mov	r4,r17
  817674:	900b883a 	mov	r5,r18
  817678:	0811b440 	call	811b44 <_malloc_r>
  81767c:	1009883a 	mov	r4,r2
  817680:	10003126 	beq	r2,zero,817748 <__smakebuf_r+0x168>
  817684:	80c0030b 	ldhu	r3,12(r16)
  817688:	00802074 	movhi	r2,129
  81768c:	109a0004 	addi	r2,r2,26624
  817690:	88800f15 	stw	r2,60(r17)
  817694:	18c02014 	ori	r3,r3,128
  817698:	84800515 	stw	r18,20(r16)
  81769c:	80c0030d 	sth	r3,12(r16)
  8176a0:	81000415 	stw	r4,16(r16)
  8176a4:	81000015 	stw	r4,0(r16)
  8176a8:	dfc01217 	ldw	ra,72(sp)
  8176ac:	dc801117 	ldw	r18,68(sp)
  8176b0:	dc401017 	ldw	r17,64(sp)
  8176b4:	dc000f17 	ldw	r16,60(sp)
  8176b8:	dec01304 	addi	sp,sp,76
  8176bc:	f800283a 	ret
  8176c0:	80c0030b 	ldhu	r3,12(r16)
  8176c4:	1880200c 	andi	r2,r3,128
  8176c8:	10000426 	beq	r2,zero,8176dc <__smakebuf_r+0xfc>
  8176cc:	04801004 	movi	r18,64
  8176d0:	18820014 	ori	r2,r3,2048
  8176d4:	8080030d 	sth	r2,12(r16)
  8176d8:	003fe506 	br	817670 <__smakebuf_r+0x90>
  8176dc:	04810004 	movi	r18,1024
  8176e0:	003ffb06 	br	8176d0 <__smakebuf_r+0xf0>
  8176e4:	8140038f 	ldh	r5,14(r16)
  8176e8:	8809883a 	mov	r4,r17
  8176ec:	081986c0 	call	81986c <_isatty_r>
  8176f0:	103fde26 	beq	r2,zero,81766c <__smakebuf_r+0x8c>
  8176f4:	8080030b 	ldhu	r2,12(r16)
  8176f8:	80c010c4 	addi	r3,r16,67
  8176fc:	04810004 	movi	r18,1024
  817700:	10800054 	ori	r2,r2,1
  817704:	8080030d 	sth	r2,12(r16)
  817708:	00800044 	movi	r2,1
  81770c:	80c00415 	stw	r3,16(r16)
  817710:	80800515 	stw	r2,20(r16)
  817714:	80c00015 	stw	r3,0(r16)
  817718:	003fd506 	br	817670 <__smakebuf_r+0x90>
  81771c:	80c00a17 	ldw	r3,40(r16)
  817720:	008020b4 	movhi	r2,130
  817724:	10a47b04 	addi	r2,r2,-28180
  817728:	18bfcb1e 	bne	r3,r2,817658 <__smakebuf_r+0x78>
  81772c:	8080030b 	ldhu	r2,12(r16)
  817730:	00c10004 	movi	r3,1024
  817734:	1825883a 	mov	r18,r3
  817738:	10c4b03a 	or	r2,r2,r3
  81773c:	8080030d 	sth	r2,12(r16)
  817740:	80c01315 	stw	r3,76(r16)
  817744:	003fca06 	br	817670 <__smakebuf_r+0x90>
  817748:	8100030b 	ldhu	r4,12(r16)
  81774c:	2080800c 	andi	r2,r4,512
  817750:	103fb21e 	bne	r2,zero,81761c <__smakebuf_r+0x3c>
  817754:	80c010c4 	addi	r3,r16,67
  817758:	21000094 	ori	r4,r4,2
  81775c:	00800044 	movi	r2,1
  817760:	80800515 	stw	r2,20(r16)
  817764:	8100030d 	sth	r4,12(r16)
  817768:	80c00415 	stw	r3,16(r16)
  81776c:	80c00015 	stw	r3,0(r16)
  817770:	003faa06 	br	81761c <__smakebuf_r+0x3c>

00817774 <memchr>:
  817774:	008000c4 	movi	r2,3
  817778:	29403fcc 	andi	r5,r5,255
  81777c:	2007883a 	mov	r3,r4
  817780:	1180022e 	bgeu	r2,r6,81778c <memchr+0x18>
  817784:	2084703a 	and	r2,r4,r2
  817788:	10000b26 	beq	r2,zero,8177b8 <memchr+0x44>
  81778c:	313fffc4 	addi	r4,r6,-1
  817790:	3000051e 	bne	r6,zero,8177a8 <memchr+0x34>
  817794:	00002c06 	br	817848 <memchr+0xd4>
  817798:	213fffc4 	addi	r4,r4,-1
  81779c:	00bfffc4 	movi	r2,-1
  8177a0:	18c00044 	addi	r3,r3,1
  8177a4:	20802826 	beq	r4,r2,817848 <memchr+0xd4>
  8177a8:	18800003 	ldbu	r2,0(r3)
  8177ac:	28bffa1e 	bne	r5,r2,817798 <memchr+0x24>
  8177b0:	1805883a 	mov	r2,r3
  8177b4:	f800283a 	ret
  8177b8:	0011883a 	mov	r8,zero
  8177bc:	0007883a 	mov	r3,zero
  8177c0:	01c00104 	movi	r7,4
  8177c4:	4004923a 	slli	r2,r8,8
  8177c8:	18c00044 	addi	r3,r3,1
  8177cc:	1151883a 	add	r8,r2,r5
  8177d0:	19fffc1e 	bne	r3,r7,8177c4 <memchr+0x50>
  8177d4:	02bfbff4 	movhi	r10,65279
  8177d8:	52bfbfc4 	addi	r10,r10,-257
  8177dc:	02602074 	movhi	r9,32897
  8177e0:	4a602004 	addi	r9,r9,-32640
  8177e4:	02c000c4 	movi	r11,3
  8177e8:	20800017 	ldw	r2,0(r4)
  8177ec:	31bfff04 	addi	r6,r6,-4
  8177f0:	200f883a 	mov	r7,r4
  8177f4:	1204f03a 	xor	r2,r2,r8
  8177f8:	1287883a 	add	r3,r2,r10
  8177fc:	1a46703a 	and	r3,r3,r9
  817800:	0084303a 	nor	r2,zero,r2
  817804:	10c4703a 	and	r2,r2,r3
  817808:	10000b26 	beq	r2,zero,817838 <memchr+0xc4>
  81780c:	20800003 	ldbu	r2,0(r4)
  817810:	28800f26 	beq	r5,r2,817850 <memchr+0xdc>
  817814:	20800043 	ldbu	r2,1(r4)
  817818:	21c00044 	addi	r7,r4,1
  81781c:	28800c26 	beq	r5,r2,817850 <memchr+0xdc>
  817820:	20800083 	ldbu	r2,2(r4)
  817824:	21c00084 	addi	r7,r4,2
  817828:	28800926 	beq	r5,r2,817850 <memchr+0xdc>
  81782c:	208000c3 	ldbu	r2,3(r4)
  817830:	21c000c4 	addi	r7,r4,3
  817834:	28800626 	beq	r5,r2,817850 <memchr+0xdc>
  817838:	21000104 	addi	r4,r4,4
  81783c:	59bfea36 	bltu	r11,r6,8177e8 <memchr+0x74>
  817840:	2007883a 	mov	r3,r4
  817844:	003fd106 	br	81778c <memchr+0x18>
  817848:	0005883a 	mov	r2,zero
  81784c:	f800283a 	ret
  817850:	3805883a 	mov	r2,r7
  817854:	f800283a 	ret

00817858 <memmove>:
  817858:	2807883a 	mov	r3,r5
  81785c:	2011883a 	mov	r8,r4
  817860:	29000c2e 	bgeu	r5,r4,817894 <memmove+0x3c>
  817864:	298f883a 	add	r7,r5,r6
  817868:	21c00a2e 	bgeu	r4,r7,817894 <memmove+0x3c>
  81786c:	30000726 	beq	r6,zero,81788c <memmove+0x34>
  817870:	2187883a 	add	r3,r4,r6
  817874:	198dc83a 	sub	r6,r3,r6
  817878:	39ffffc4 	addi	r7,r7,-1
  81787c:	38800003 	ldbu	r2,0(r7)
  817880:	18ffffc4 	addi	r3,r3,-1
  817884:	18800005 	stb	r2,0(r3)
  817888:	19bffb1e 	bne	r3,r6,817878 <memmove+0x20>
  81788c:	2005883a 	mov	r2,r4
  817890:	f800283a 	ret
  817894:	01c003c4 	movi	r7,15
  817898:	39800a36 	bltu	r7,r6,8178c4 <memmove+0x6c>
  81789c:	303ffb26 	beq	r6,zero,81788c <memmove+0x34>
  8178a0:	400f883a 	mov	r7,r8
  8178a4:	320d883a 	add	r6,r6,r8
  8178a8:	28800003 	ldbu	r2,0(r5)
  8178ac:	29400044 	addi	r5,r5,1
  8178b0:	38800005 	stb	r2,0(r7)
  8178b4:	39c00044 	addi	r7,r7,1
  8178b8:	39bffb1e 	bne	r7,r6,8178a8 <memmove+0x50>
  8178bc:	2005883a 	mov	r2,r4
  8178c0:	f800283a 	ret
  8178c4:	1904b03a 	or	r2,r3,r4
  8178c8:	108000cc 	andi	r2,r2,3
  8178cc:	103ff31e 	bne	r2,zero,81789c <memmove+0x44>
  8178d0:	3811883a 	mov	r8,r7
  8178d4:	180b883a 	mov	r5,r3
  8178d8:	200f883a 	mov	r7,r4
  8178dc:	28c00017 	ldw	r3,0(r5)
  8178e0:	31bffc04 	addi	r6,r6,-16
  8178e4:	38c00015 	stw	r3,0(r7)
  8178e8:	28800117 	ldw	r2,4(r5)
  8178ec:	38800115 	stw	r2,4(r7)
  8178f0:	28c00217 	ldw	r3,8(r5)
  8178f4:	38c00215 	stw	r3,8(r7)
  8178f8:	28800317 	ldw	r2,12(r5)
  8178fc:	29400404 	addi	r5,r5,16
  817900:	38800315 	stw	r2,12(r7)
  817904:	39c00404 	addi	r7,r7,16
  817908:	41bff436 	bltu	r8,r6,8178dc <memmove+0x84>
  81790c:	008000c4 	movi	r2,3
  817910:	1180072e 	bgeu	r2,r6,817930 <memmove+0xd8>
  817914:	1007883a 	mov	r3,r2
  817918:	28800017 	ldw	r2,0(r5)
  81791c:	31bfff04 	addi	r6,r6,-4
  817920:	29400104 	addi	r5,r5,4
  817924:	38800015 	stw	r2,0(r7)
  817928:	39c00104 	addi	r7,r7,4
  81792c:	19bffa36 	bltu	r3,r6,817918 <memmove+0xc0>
  817930:	3811883a 	mov	r8,r7
  817934:	003fd906 	br	81789c <memmove+0x44>

00817938 <memset>:
  817938:	008000c4 	movi	r2,3
  81793c:	29403fcc 	andi	r5,r5,255
  817940:	2007883a 	mov	r3,r4
  817944:	1180022e 	bgeu	r2,r6,817950 <memset+0x18>
  817948:	2084703a 	and	r2,r4,r2
  81794c:	10000826 	beq	r2,zero,817970 <memset+0x38>
  817950:	30000526 	beq	r6,zero,817968 <memset+0x30>
  817954:	2805883a 	mov	r2,r5
  817958:	30cd883a 	add	r6,r6,r3
  81795c:	18800005 	stb	r2,0(r3)
  817960:	18c00044 	addi	r3,r3,1
  817964:	19bffd1e 	bne	r3,r6,81795c <memset+0x24>
  817968:	2005883a 	mov	r2,r4
  81796c:	f800283a 	ret
  817970:	2804923a 	slli	r2,r5,8
  817974:	020003c4 	movi	r8,15
  817978:	200f883a 	mov	r7,r4
  81797c:	2884b03a 	or	r2,r5,r2
  817980:	1006943a 	slli	r3,r2,16
  817984:	10c6b03a 	or	r3,r2,r3
  817988:	41800a2e 	bgeu	r8,r6,8179b4 <memset+0x7c>
  81798c:	4005883a 	mov	r2,r8
  817990:	31bffc04 	addi	r6,r6,-16
  817994:	38c00015 	stw	r3,0(r7)
  817998:	38c00115 	stw	r3,4(r7)
  81799c:	38c00215 	stw	r3,8(r7)
  8179a0:	38c00315 	stw	r3,12(r7)
  8179a4:	39c00404 	addi	r7,r7,16
  8179a8:	11bff936 	bltu	r2,r6,817990 <memset+0x58>
  8179ac:	008000c4 	movi	r2,3
  8179b0:	1180052e 	bgeu	r2,r6,8179c8 <memset+0x90>
  8179b4:	31bfff04 	addi	r6,r6,-4
  8179b8:	008000c4 	movi	r2,3
  8179bc:	38c00015 	stw	r3,0(r7)
  8179c0:	39c00104 	addi	r7,r7,4
  8179c4:	11bffb36 	bltu	r2,r6,8179b4 <memset+0x7c>
  8179c8:	3807883a 	mov	r3,r7
  8179cc:	003fe006 	br	817950 <memset+0x18>

008179d0 <_Bfree>:
  8179d0:	28000826 	beq	r5,zero,8179f4 <_Bfree+0x24>
  8179d4:	28800117 	ldw	r2,4(r5)
  8179d8:	21001317 	ldw	r4,76(r4)
  8179dc:	1085883a 	add	r2,r2,r2
  8179e0:	1085883a 	add	r2,r2,r2
  8179e4:	1105883a 	add	r2,r2,r4
  8179e8:	10c00017 	ldw	r3,0(r2)
  8179ec:	28c00015 	stw	r3,0(r5)
  8179f0:	11400015 	stw	r5,0(r2)
  8179f4:	f800283a 	ret

008179f8 <__hi0bits>:
  8179f8:	20bfffec 	andhi	r2,r4,65535
  8179fc:	10001426 	beq	r2,zero,817a50 <__hi0bits+0x58>
  817a00:	0007883a 	mov	r3,zero
  817a04:	20bfc02c 	andhi	r2,r4,65280
  817a08:	1000021e 	bne	r2,zero,817a14 <__hi0bits+0x1c>
  817a0c:	2008923a 	slli	r4,r4,8
  817a10:	18c00204 	addi	r3,r3,8
  817a14:	20bc002c 	andhi	r2,r4,61440
  817a18:	1000021e 	bne	r2,zero,817a24 <__hi0bits+0x2c>
  817a1c:	2008913a 	slli	r4,r4,4
  817a20:	18c00104 	addi	r3,r3,4
  817a24:	20b0002c 	andhi	r2,r4,49152
  817a28:	1000031e 	bne	r2,zero,817a38 <__hi0bits+0x40>
  817a2c:	2105883a 	add	r2,r4,r4
  817a30:	18c00084 	addi	r3,r3,2
  817a34:	1089883a 	add	r4,r2,r2
  817a38:	20000316 	blt	r4,zero,817a48 <__hi0bits+0x50>
  817a3c:	2090002c 	andhi	r2,r4,16384
  817a40:	10000626 	beq	r2,zero,817a5c <__hi0bits+0x64>
  817a44:	18c00044 	addi	r3,r3,1
  817a48:	1805883a 	mov	r2,r3
  817a4c:	f800283a 	ret
  817a50:	2008943a 	slli	r4,r4,16
  817a54:	00c00404 	movi	r3,16
  817a58:	003fea06 	br	817a04 <__hi0bits+0xc>
  817a5c:	00c00804 	movi	r3,32
  817a60:	1805883a 	mov	r2,r3
  817a64:	f800283a 	ret

00817a68 <__lo0bits>:
  817a68:	20c00017 	ldw	r3,0(r4)
  817a6c:	188001cc 	andi	r2,r3,7
  817a70:	10000a26 	beq	r2,zero,817a9c <__lo0bits+0x34>
  817a74:	1880004c 	andi	r2,r3,1
  817a78:	1005003a 	cmpeq	r2,r2,zero
  817a7c:	10002126 	beq	r2,zero,817b04 <__lo0bits+0x9c>
  817a80:	1880008c 	andi	r2,r3,2
  817a84:	1000251e 	bne	r2,zero,817b1c <__lo0bits+0xb4>
  817a88:	1804d0ba 	srli	r2,r3,2
  817a8c:	01400084 	movi	r5,2
  817a90:	20800015 	stw	r2,0(r4)
  817a94:	2805883a 	mov	r2,r5
  817a98:	f800283a 	ret
  817a9c:	18bfffcc 	andi	r2,r3,65535
  817aa0:	10001526 	beq	r2,zero,817af8 <__lo0bits+0x90>
  817aa4:	000b883a 	mov	r5,zero
  817aa8:	18803fcc 	andi	r2,r3,255
  817aac:	1000021e 	bne	r2,zero,817ab8 <__lo0bits+0x50>
  817ab0:	1806d23a 	srli	r3,r3,8
  817ab4:	29400204 	addi	r5,r5,8
  817ab8:	188003cc 	andi	r2,r3,15
  817abc:	1000021e 	bne	r2,zero,817ac8 <__lo0bits+0x60>
  817ac0:	1806d13a 	srli	r3,r3,4
  817ac4:	29400104 	addi	r5,r5,4
  817ac8:	188000cc 	andi	r2,r3,3
  817acc:	1000021e 	bne	r2,zero,817ad8 <__lo0bits+0x70>
  817ad0:	1806d0ba 	srli	r3,r3,2
  817ad4:	29400084 	addi	r5,r5,2
  817ad8:	1880004c 	andi	r2,r3,1
  817adc:	1000031e 	bne	r2,zero,817aec <__lo0bits+0x84>
  817ae0:	1806d07a 	srli	r3,r3,1
  817ae4:	18000a26 	beq	r3,zero,817b10 <__lo0bits+0xa8>
  817ae8:	29400044 	addi	r5,r5,1
  817aec:	2805883a 	mov	r2,r5
  817af0:	20c00015 	stw	r3,0(r4)
  817af4:	f800283a 	ret
  817af8:	1806d43a 	srli	r3,r3,16
  817afc:	01400404 	movi	r5,16
  817b00:	003fe906 	br	817aa8 <__lo0bits+0x40>
  817b04:	000b883a 	mov	r5,zero
  817b08:	2805883a 	mov	r2,r5
  817b0c:	f800283a 	ret
  817b10:	01400804 	movi	r5,32
  817b14:	2805883a 	mov	r2,r5
  817b18:	f800283a 	ret
  817b1c:	1804d07a 	srli	r2,r3,1
  817b20:	01400044 	movi	r5,1
  817b24:	20800015 	stw	r2,0(r4)
  817b28:	003fda06 	br	817a94 <__lo0bits+0x2c>

00817b2c <__mcmp>:
  817b2c:	20800417 	ldw	r2,16(r4)
  817b30:	28c00417 	ldw	r3,16(r5)
  817b34:	10cfc83a 	sub	r7,r2,r3
  817b38:	38000c1e 	bne	r7,zero,817b6c <__mcmp+0x40>
  817b3c:	18c5883a 	add	r2,r3,r3
  817b40:	1085883a 	add	r2,r2,r2
  817b44:	10c00504 	addi	r3,r2,20
  817b48:	21000504 	addi	r4,r4,20
  817b4c:	28cb883a 	add	r5,r5,r3
  817b50:	2085883a 	add	r2,r4,r2
  817b54:	10bfff04 	addi	r2,r2,-4
  817b58:	297fff04 	addi	r5,r5,-4
  817b5c:	11800017 	ldw	r6,0(r2)
  817b60:	28c00017 	ldw	r3,0(r5)
  817b64:	30c0031e 	bne	r6,r3,817b74 <__mcmp+0x48>
  817b68:	20bffa36 	bltu	r4,r2,817b54 <__mcmp+0x28>
  817b6c:	3805883a 	mov	r2,r7
  817b70:	f800283a 	ret
  817b74:	30c00336 	bltu	r6,r3,817b84 <__mcmp+0x58>
  817b78:	01c00044 	movi	r7,1
  817b7c:	3805883a 	mov	r2,r7
  817b80:	f800283a 	ret
  817b84:	01ffffc4 	movi	r7,-1
  817b88:	003ff806 	br	817b6c <__mcmp+0x40>

00817b8c <__ulp>:
  817b8c:	295ffc2c 	andhi	r5,r5,32752
  817b90:	013f3034 	movhi	r4,64704
  817b94:	290b883a 	add	r5,r5,r4
  817b98:	0145c83a 	sub	r2,zero,r5
  817b9c:	1007d53a 	srai	r3,r2,20
  817ba0:	000d883a 	mov	r6,zero
  817ba4:	0140040e 	bge	zero,r5,817bb8 <__ulp+0x2c>
  817ba8:	280f883a 	mov	r7,r5
  817bac:	3807883a 	mov	r3,r7
  817bb0:	3005883a 	mov	r2,r6
  817bb4:	f800283a 	ret
  817bb8:	008004c4 	movi	r2,19
  817bbc:	193ffb04 	addi	r4,r3,-20
  817bc0:	10c00c0e 	bge	r2,r3,817bf4 <__ulp+0x68>
  817bc4:	008007c4 	movi	r2,31
  817bc8:	1107c83a 	sub	r3,r2,r4
  817bcc:	00800784 	movi	r2,30
  817bd0:	01400044 	movi	r5,1
  817bd4:	11000216 	blt	r2,r4,817be0 <__ulp+0x54>
  817bd8:	00800044 	movi	r2,1
  817bdc:	10ca983a 	sll	r5,r2,r3
  817be0:	000f883a 	mov	r7,zero
  817be4:	280d883a 	mov	r6,r5
  817be8:	3807883a 	mov	r3,r7
  817bec:	3005883a 	mov	r2,r6
  817bf0:	f800283a 	ret
  817bf4:	00800234 	movhi	r2,8
  817bf8:	10cfd83a 	sra	r7,r2,r3
  817bfc:	000d883a 	mov	r6,zero
  817c00:	3005883a 	mov	r2,r6
  817c04:	3807883a 	mov	r3,r7
  817c08:	f800283a 	ret

00817c0c <__b2d>:
  817c0c:	20800417 	ldw	r2,16(r4)
  817c10:	defff904 	addi	sp,sp,-28
  817c14:	dd000415 	stw	r20,16(sp)
  817c18:	1085883a 	add	r2,r2,r2
  817c1c:	25000504 	addi	r20,r4,20
  817c20:	1085883a 	add	r2,r2,r2
  817c24:	dc000015 	stw	r16,0(sp)
  817c28:	a0a1883a 	add	r16,r20,r2
  817c2c:	dd400515 	stw	r21,20(sp)
  817c30:	857fff17 	ldw	r21,-4(r16)
  817c34:	dc400115 	stw	r17,4(sp)
  817c38:	dfc00615 	stw	ra,24(sp)
  817c3c:	a809883a 	mov	r4,r21
  817c40:	2823883a 	mov	r17,r5
  817c44:	dcc00315 	stw	r19,12(sp)
  817c48:	dc800215 	stw	r18,8(sp)
  817c4c:	08179f80 	call	8179f8 <__hi0bits>
  817c50:	100b883a 	mov	r5,r2
  817c54:	00800804 	movi	r2,32
  817c58:	1145c83a 	sub	r2,r2,r5
  817c5c:	88800015 	stw	r2,0(r17)
  817c60:	00800284 	movi	r2,10
  817c64:	80ffff04 	addi	r3,r16,-4
  817c68:	11401416 	blt	r2,r5,817cbc <__b2d+0xb0>
  817c6c:	008002c4 	movi	r2,11
  817c70:	1149c83a 	sub	r4,r2,r5
  817c74:	a0c02736 	bltu	r20,r3,817d14 <__b2d+0x108>
  817c78:	000d883a 	mov	r6,zero
  817c7c:	28800544 	addi	r2,r5,21
  817c80:	a906d83a 	srl	r3,r21,r4
  817c84:	a884983a 	sll	r2,r21,r2
  817c88:	1ccffc34 	orhi	r19,r3,16368
  817c8c:	11a4b03a 	or	r18,r2,r6
  817c90:	9005883a 	mov	r2,r18
  817c94:	9807883a 	mov	r3,r19
  817c98:	dfc00617 	ldw	ra,24(sp)
  817c9c:	dd400517 	ldw	r21,20(sp)
  817ca0:	dd000417 	ldw	r20,16(sp)
  817ca4:	dcc00317 	ldw	r19,12(sp)
  817ca8:	dc800217 	ldw	r18,8(sp)
  817cac:	dc400117 	ldw	r17,4(sp)
  817cb0:	dc000017 	ldw	r16,0(sp)
  817cb4:	dec00704 	addi	sp,sp,28
  817cb8:	f800283a 	ret
  817cbc:	a0c00e36 	bltu	r20,r3,817cf8 <__b2d+0xec>
  817cc0:	293ffd44 	addi	r4,r5,-11
  817cc4:	000d883a 	mov	r6,zero
  817cc8:	20000f26 	beq	r4,zero,817d08 <__b2d+0xfc>
  817ccc:	00800804 	movi	r2,32
  817cd0:	110bc83a 	sub	r5,r2,r4
  817cd4:	a0c01236 	bltu	r20,r3,817d20 <__b2d+0x114>
  817cd8:	000f883a 	mov	r7,zero
  817cdc:	a904983a 	sll	r2,r21,r4
  817ce0:	3146d83a 	srl	r3,r6,r5
  817ce4:	3108983a 	sll	r4,r6,r4
  817ce8:	108ffc34 	orhi	r2,r2,16368
  817cec:	18a6b03a 	or	r19,r3,r2
  817cf0:	3924b03a 	or	r18,r7,r4
  817cf4:	003fe606 	br	817c90 <__b2d+0x84>
  817cf8:	293ffd44 	addi	r4,r5,-11
  817cfc:	81bffe17 	ldw	r6,-8(r16)
  817d00:	80fffe04 	addi	r3,r16,-8
  817d04:	203ff11e 	bne	r4,zero,817ccc <__b2d+0xc0>
  817d08:	accffc34 	orhi	r19,r21,16368
  817d0c:	3025883a 	mov	r18,r6
  817d10:	003fdf06 	br	817c90 <__b2d+0x84>
  817d14:	18bfff17 	ldw	r2,-4(r3)
  817d18:	110cd83a 	srl	r6,r2,r4
  817d1c:	003fd706 	br	817c7c <__b2d+0x70>
  817d20:	18bfff17 	ldw	r2,-4(r3)
  817d24:	114ed83a 	srl	r7,r2,r5
  817d28:	003fec06 	br	817cdc <__b2d+0xd0>

00817d2c <__ratio>:
  817d2c:	defff904 	addi	sp,sp,-28
  817d30:	dc400215 	stw	r17,8(sp)
  817d34:	2823883a 	mov	r17,r5
  817d38:	d80b883a 	mov	r5,sp
  817d3c:	dfc00615 	stw	ra,24(sp)
  817d40:	dd000515 	stw	r20,20(sp)
  817d44:	dcc00415 	stw	r19,16(sp)
  817d48:	dc800315 	stw	r18,12(sp)
  817d4c:	2025883a 	mov	r18,r4
  817d50:	0817c0c0 	call	817c0c <__b2d>
  817d54:	8809883a 	mov	r4,r17
  817d58:	d9400104 	addi	r5,sp,4
  817d5c:	1027883a 	mov	r19,r2
  817d60:	1829883a 	mov	r20,r3
  817d64:	0817c0c0 	call	817c0c <__b2d>
  817d68:	89000417 	ldw	r4,16(r17)
  817d6c:	91c00417 	ldw	r7,16(r18)
  817d70:	d9800117 	ldw	r6,4(sp)
  817d74:	180b883a 	mov	r5,r3
  817d78:	390fc83a 	sub	r7,r7,r4
  817d7c:	1009883a 	mov	r4,r2
  817d80:	d8800017 	ldw	r2,0(sp)
  817d84:	380e917a 	slli	r7,r7,5
  817d88:	2011883a 	mov	r8,r4
  817d8c:	1185c83a 	sub	r2,r2,r6
  817d90:	11c5883a 	add	r2,r2,r7
  817d94:	1006953a 	slli	r3,r2,20
  817d98:	2813883a 	mov	r9,r5
  817d9c:	00800d0e 	bge	zero,r2,817dd4 <__ratio+0xa8>
  817da0:	1d29883a 	add	r20,r3,r20
  817da4:	a00b883a 	mov	r5,r20
  817da8:	480f883a 	mov	r7,r9
  817dac:	9809883a 	mov	r4,r19
  817db0:	400d883a 	mov	r6,r8
  817db4:	08109f40 	call	8109f4 <__divdf3>
  817db8:	dfc00617 	ldw	ra,24(sp)
  817dbc:	dd000517 	ldw	r20,20(sp)
  817dc0:	dcc00417 	ldw	r19,16(sp)
  817dc4:	dc800317 	ldw	r18,12(sp)
  817dc8:	dc400217 	ldw	r17,8(sp)
  817dcc:	dec00704 	addi	sp,sp,28
  817dd0:	f800283a 	ret
  817dd4:	28d3c83a 	sub	r9,r5,r3
  817dd8:	003ff206 	br	817da4 <__ratio+0x78>

00817ddc <_mprec_log10>:
  817ddc:	defffe04 	addi	sp,sp,-8
  817de0:	008005c4 	movi	r2,23
  817de4:	dc000015 	stw	r16,0(sp)
  817de8:	dfc00115 	stw	ra,4(sp)
  817dec:	2021883a 	mov	r16,r4
  817df0:	11000c16 	blt	r2,r4,817e24 <_mprec_log10+0x48>
  817df4:	200490fa 	slli	r2,r4,3
  817df8:	00c020f4 	movhi	r3,131
  817dfc:	18e23704 	addi	r3,r3,-30500
  817e00:	10c5883a 	add	r2,r2,r3
  817e04:	12400117 	ldw	r9,4(r2)
  817e08:	12000017 	ldw	r8,0(r2)
  817e0c:	4807883a 	mov	r3,r9
  817e10:	4005883a 	mov	r2,r8
  817e14:	dfc00117 	ldw	ra,4(sp)
  817e18:	dc000017 	ldw	r16,0(sp)
  817e1c:	dec00204 	addi	sp,sp,8
  817e20:	f800283a 	ret
  817e24:	0011883a 	mov	r8,zero
  817e28:	024ffc34 	movhi	r9,16368
  817e2c:	0005883a 	mov	r2,zero
  817e30:	00d00934 	movhi	r3,16420
  817e34:	480b883a 	mov	r5,r9
  817e38:	4009883a 	mov	r4,r8
  817e3c:	180f883a 	mov	r7,r3
  817e40:	100d883a 	mov	r6,r2
  817e44:	08106300 	call	810630 <__muldf3>
  817e48:	843fffc4 	addi	r16,r16,-1
  817e4c:	1011883a 	mov	r8,r2
  817e50:	1813883a 	mov	r9,r3
  817e54:	803ff51e 	bne	r16,zero,817e2c <_mprec_log10+0x50>
  817e58:	4005883a 	mov	r2,r8
  817e5c:	4807883a 	mov	r3,r9
  817e60:	dfc00117 	ldw	ra,4(sp)
  817e64:	dc000017 	ldw	r16,0(sp)
  817e68:	dec00204 	addi	sp,sp,8
  817e6c:	f800283a 	ret

00817e70 <__copybits>:
  817e70:	297fffc4 	addi	r5,r5,-1
  817e74:	30800417 	ldw	r2,16(r6)
  817e78:	280bd17a 	srai	r5,r5,5
  817e7c:	31800504 	addi	r6,r6,20
  817e80:	1085883a 	add	r2,r2,r2
  817e84:	294b883a 	add	r5,r5,r5
  817e88:	294b883a 	add	r5,r5,r5
  817e8c:	1085883a 	add	r2,r2,r2
  817e90:	290b883a 	add	r5,r5,r4
  817e94:	3087883a 	add	r3,r6,r2
  817e98:	29400104 	addi	r5,r5,4
  817e9c:	30c0052e 	bgeu	r6,r3,817eb4 <__copybits+0x44>
  817ea0:	30800017 	ldw	r2,0(r6)
  817ea4:	31800104 	addi	r6,r6,4
  817ea8:	20800015 	stw	r2,0(r4)
  817eac:	21000104 	addi	r4,r4,4
  817eb0:	30fffb36 	bltu	r6,r3,817ea0 <__copybits+0x30>
  817eb4:	2140032e 	bgeu	r4,r5,817ec4 <__copybits+0x54>
  817eb8:	20000015 	stw	zero,0(r4)
  817ebc:	21000104 	addi	r4,r4,4
  817ec0:	217ffd36 	bltu	r4,r5,817eb8 <__copybits+0x48>
  817ec4:	f800283a 	ret

00817ec8 <__any_on>:
  817ec8:	20800417 	ldw	r2,16(r4)
  817ecc:	2807d17a 	srai	r3,r5,5
  817ed0:	21000504 	addi	r4,r4,20
  817ed4:	10c00d0e 	bge	r2,r3,817f0c <__any_on+0x44>
  817ed8:	1085883a 	add	r2,r2,r2
  817edc:	1085883a 	add	r2,r2,r2
  817ee0:	208d883a 	add	r6,r4,r2
  817ee4:	2180182e 	bgeu	r4,r6,817f48 <__any_on+0x80>
  817ee8:	30bfff17 	ldw	r2,-4(r6)
  817eec:	30ffff04 	addi	r3,r6,-4
  817ef0:	1000041e 	bne	r2,zero,817f04 <__any_on+0x3c>
  817ef4:	20c0142e 	bgeu	r4,r3,817f48 <__any_on+0x80>
  817ef8:	18ffff04 	addi	r3,r3,-4
  817efc:	18800017 	ldw	r2,0(r3)
  817f00:	103ffc26 	beq	r2,zero,817ef4 <__any_on+0x2c>
  817f04:	00800044 	movi	r2,1
  817f08:	f800283a 	ret
  817f0c:	18800a0e 	bge	r3,r2,817f38 <__any_on+0x70>
  817f10:	294007cc 	andi	r5,r5,31
  817f14:	28000826 	beq	r5,zero,817f38 <__any_on+0x70>
  817f18:	18c5883a 	add	r2,r3,r3
  817f1c:	1085883a 	add	r2,r2,r2
  817f20:	208d883a 	add	r6,r4,r2
  817f24:	30c00017 	ldw	r3,0(r6)
  817f28:	1944d83a 	srl	r2,r3,r5
  817f2c:	1144983a 	sll	r2,r2,r5
  817f30:	18bff41e 	bne	r3,r2,817f04 <__any_on+0x3c>
  817f34:	003feb06 	br	817ee4 <__any_on+0x1c>
  817f38:	18c5883a 	add	r2,r3,r3
  817f3c:	1085883a 	add	r2,r2,r2
  817f40:	208d883a 	add	r6,r4,r2
  817f44:	003fe706 	br	817ee4 <__any_on+0x1c>
  817f48:	0005883a 	mov	r2,zero
  817f4c:	f800283a 	ret

00817f50 <_Balloc>:
  817f50:	20c01317 	ldw	r3,76(r4)
  817f54:	defffb04 	addi	sp,sp,-20
  817f58:	dcc00315 	stw	r19,12(sp)
  817f5c:	dc800215 	stw	r18,8(sp)
  817f60:	dfc00415 	stw	ra,16(sp)
  817f64:	2825883a 	mov	r18,r5
  817f68:	dc400115 	stw	r17,4(sp)
  817f6c:	dc000015 	stw	r16,0(sp)
  817f70:	2027883a 	mov	r19,r4
  817f74:	01800404 	movi	r6,16
  817f78:	01400104 	movi	r5,4
  817f7c:	18001726 	beq	r3,zero,817fdc <_Balloc+0x8c>
  817f80:	01400044 	movi	r5,1
  817f84:	9485883a 	add	r2,r18,r18
  817f88:	2ca2983a 	sll	r17,r5,r18
  817f8c:	1085883a 	add	r2,r2,r2
  817f90:	10c7883a 	add	r3,r2,r3
  817f94:	1c000017 	ldw	r16,0(r3)
  817f98:	8c4d883a 	add	r6,r17,r17
  817f9c:	318d883a 	add	r6,r6,r6
  817fa0:	9809883a 	mov	r4,r19
  817fa4:	31800504 	addi	r6,r6,20
  817fa8:	80001226 	beq	r16,zero,817ff4 <_Balloc+0xa4>
  817fac:	80800017 	ldw	r2,0(r16)
  817fb0:	18800015 	stw	r2,0(r3)
  817fb4:	80000415 	stw	zero,16(r16)
  817fb8:	80000315 	stw	zero,12(r16)
  817fbc:	8005883a 	mov	r2,r16
  817fc0:	dfc00417 	ldw	ra,16(sp)
  817fc4:	dcc00317 	ldw	r19,12(sp)
  817fc8:	dc800217 	ldw	r18,8(sp)
  817fcc:	dc400117 	ldw	r17,4(sp)
  817fd0:	dc000017 	ldw	r16,0(sp)
  817fd4:	dec00504 	addi	sp,sp,20
  817fd8:	f800283a 	ret
  817fdc:	08195b00 	call	8195b0 <_calloc_r>
  817fe0:	1007883a 	mov	r3,r2
  817fe4:	0021883a 	mov	r16,zero
  817fe8:	98801315 	stw	r2,76(r19)
  817fec:	103fe41e 	bne	r2,zero,817f80 <_Balloc+0x30>
  817ff0:	003ff206 	br	817fbc <_Balloc+0x6c>
  817ff4:	08195b00 	call	8195b0 <_calloc_r>
  817ff8:	103ff026 	beq	r2,zero,817fbc <_Balloc+0x6c>
  817ffc:	1021883a 	mov	r16,r2
  818000:	14800115 	stw	r18,4(r2)
  818004:	14400215 	stw	r17,8(r2)
  818008:	003fea06 	br	817fb4 <_Balloc+0x64>

0081800c <__d2b>:
  81800c:	defff504 	addi	sp,sp,-44
  818010:	dcc00515 	stw	r19,20(sp)
  818014:	04c00044 	movi	r19,1
  818018:	dc000215 	stw	r16,8(sp)
  81801c:	2821883a 	mov	r16,r5
  818020:	980b883a 	mov	r5,r19
  818024:	ddc00915 	stw	r23,36(sp)
  818028:	dd800815 	stw	r22,32(sp)
  81802c:	dd400715 	stw	r21,28(sp)
  818030:	dd000615 	stw	r20,24(sp)
  818034:	dc800415 	stw	r18,16(sp)
  818038:	dc400315 	stw	r17,12(sp)
  81803c:	dfc00a15 	stw	ra,40(sp)
  818040:	3023883a 	mov	r17,r6
  818044:	382d883a 	mov	r22,r7
  818048:	ddc00b17 	ldw	r23,44(sp)
  81804c:	0817f500 	call	817f50 <_Balloc>
  818050:	1025883a 	mov	r18,r2
  818054:	00a00034 	movhi	r2,32768
  818058:	10bfffc4 	addi	r2,r2,-1
  81805c:	8888703a 	and	r4,r17,r2
  818060:	202ad53a 	srli	r21,r4,20
  818064:	00800434 	movhi	r2,16
  818068:	10bfffc4 	addi	r2,r2,-1
  81806c:	8886703a 	and	r3,r17,r2
  818070:	a829003a 	cmpeq	r20,r21,zero
  818074:	800b883a 	mov	r5,r16
  818078:	d8c00115 	stw	r3,4(sp)
  81807c:	94000504 	addi	r16,r18,20
  818080:	a000021e 	bne	r20,zero,81808c <__d2b+0x80>
  818084:	18c00434 	orhi	r3,r3,16
  818088:	d8c00115 	stw	r3,4(sp)
  81808c:	28002726 	beq	r5,zero,81812c <__d2b+0x120>
  818090:	d809883a 	mov	r4,sp
  818094:	d9400015 	stw	r5,0(sp)
  818098:	0817a680 	call	817a68 <__lo0bits>
  81809c:	100d883a 	mov	r6,r2
  8180a0:	10003526 	beq	r2,zero,818178 <__d2b+0x16c>
  8180a4:	d8c00117 	ldw	r3,4(sp)
  8180a8:	00800804 	movi	r2,32
  8180ac:	1185c83a 	sub	r2,r2,r6
  8180b0:	d9000017 	ldw	r4,0(sp)
  8180b4:	1886983a 	sll	r3,r3,r2
  8180b8:	1906b03a 	or	r3,r3,r4
  8180bc:	90c00515 	stw	r3,20(r18)
  8180c0:	d8c00117 	ldw	r3,4(sp)
  8180c4:	1986d83a 	srl	r3,r3,r6
  8180c8:	d8c00115 	stw	r3,4(sp)
  8180cc:	180b003a 	cmpeq	r5,r3,zero
  8180d0:	00800084 	movi	r2,2
  8180d4:	114bc83a 	sub	r5,r2,r5
  8180d8:	80c00115 	stw	r3,4(r16)
  8180dc:	91400415 	stw	r5,16(r18)
  8180e0:	a0001a1e 	bne	r20,zero,81814c <__d2b+0x140>
  8180e4:	3545883a 	add	r2,r6,r21
  8180e8:	10bef344 	addi	r2,r2,-1075
  8180ec:	00c00d44 	movi	r3,53
  8180f0:	b0800015 	stw	r2,0(r22)
  8180f4:	1987c83a 	sub	r3,r3,r6
  8180f8:	b8c00015 	stw	r3,0(r23)
  8180fc:	9005883a 	mov	r2,r18
  818100:	dfc00a17 	ldw	ra,40(sp)
  818104:	ddc00917 	ldw	r23,36(sp)
  818108:	dd800817 	ldw	r22,32(sp)
  81810c:	dd400717 	ldw	r21,28(sp)
  818110:	dd000617 	ldw	r20,24(sp)
  818114:	dcc00517 	ldw	r19,20(sp)
  818118:	dc800417 	ldw	r18,16(sp)
  81811c:	dc400317 	ldw	r17,12(sp)
  818120:	dc000217 	ldw	r16,8(sp)
  818124:	dec00b04 	addi	sp,sp,44
  818128:	f800283a 	ret
  81812c:	d9000104 	addi	r4,sp,4
  818130:	0817a680 	call	817a68 <__lo0bits>
  818134:	11800804 	addi	r6,r2,32
  818138:	d8800117 	ldw	r2,4(sp)
  81813c:	94c00415 	stw	r19,16(r18)
  818140:	980b883a 	mov	r5,r19
  818144:	90800515 	stw	r2,20(r18)
  818148:	a03fe626 	beq	r20,zero,8180e4 <__d2b+0xd8>
  81814c:	2945883a 	add	r2,r5,r5
  818150:	1085883a 	add	r2,r2,r2
  818154:	1405883a 	add	r2,r2,r16
  818158:	113fff17 	ldw	r4,-4(r2)
  81815c:	30fef384 	addi	r3,r6,-1074
  818160:	2820917a 	slli	r16,r5,5
  818164:	b0c00015 	stw	r3,0(r22)
  818168:	08179f80 	call	8179f8 <__hi0bits>
  81816c:	80a1c83a 	sub	r16,r16,r2
  818170:	bc000015 	stw	r16,0(r23)
  818174:	003fe106 	br	8180fc <__d2b+0xf0>
  818178:	d8800017 	ldw	r2,0(sp)
  81817c:	90800515 	stw	r2,20(r18)
  818180:	d8c00117 	ldw	r3,4(sp)
  818184:	003fd106 	br	8180cc <__d2b+0xc0>

00818188 <__mdiff>:
  818188:	defffb04 	addi	sp,sp,-20
  81818c:	dc000015 	stw	r16,0(sp)
  818190:	2821883a 	mov	r16,r5
  818194:	dc800215 	stw	r18,8(sp)
  818198:	300b883a 	mov	r5,r6
  81819c:	2025883a 	mov	r18,r4
  8181a0:	8009883a 	mov	r4,r16
  8181a4:	dc400115 	stw	r17,4(sp)
  8181a8:	dfc00415 	stw	ra,16(sp)
  8181ac:	dcc00315 	stw	r19,12(sp)
  8181b0:	3023883a 	mov	r17,r6
  8181b4:	0817b2c0 	call	817b2c <__mcmp>
  8181b8:	10004226 	beq	r2,zero,8182c4 <__mdiff+0x13c>
  8181bc:	10005016 	blt	r2,zero,818300 <__mdiff+0x178>
  8181c0:	0027883a 	mov	r19,zero
  8181c4:	81400117 	ldw	r5,4(r16)
  8181c8:	9009883a 	mov	r4,r18
  8181cc:	0817f500 	call	817f50 <_Balloc>
  8181d0:	1019883a 	mov	r12,r2
  8181d4:	82800417 	ldw	r10,16(r16)
  8181d8:	88800417 	ldw	r2,16(r17)
  8181dc:	81800504 	addi	r6,r16,20
  8181e0:	5287883a 	add	r3,r10,r10
  8181e4:	1085883a 	add	r2,r2,r2
  8181e8:	18c7883a 	add	r3,r3,r3
  8181ec:	1085883a 	add	r2,r2,r2
  8181f0:	8a000504 	addi	r8,r17,20
  8181f4:	64c00315 	stw	r19,12(r12)
  8181f8:	30db883a 	add	r13,r6,r3
  8181fc:	4097883a 	add	r11,r8,r2
  818200:	61c00504 	addi	r7,r12,20
  818204:	0013883a 	mov	r9,zero
  818208:	31000017 	ldw	r4,0(r6)
  81820c:	41400017 	ldw	r5,0(r8)
  818210:	42000104 	addi	r8,r8,4
  818214:	20bfffcc 	andi	r2,r4,65535
  818218:	28ffffcc 	andi	r3,r5,65535
  81821c:	10c5c83a 	sub	r2,r2,r3
  818220:	1245883a 	add	r2,r2,r9
  818224:	2008d43a 	srli	r4,r4,16
  818228:	280ad43a 	srli	r5,r5,16
  81822c:	1007d43a 	srai	r3,r2,16
  818230:	3880000d 	sth	r2,0(r7)
  818234:	2149c83a 	sub	r4,r4,r5
  818238:	20c9883a 	add	r4,r4,r3
  81823c:	3900008d 	sth	r4,2(r7)
  818240:	31800104 	addi	r6,r6,4
  818244:	39c00104 	addi	r7,r7,4
  818248:	2013d43a 	srai	r9,r4,16
  81824c:	42ffee36 	bltu	r8,r11,818208 <__mdiff+0x80>
  818250:	33400c2e 	bgeu	r6,r13,818284 <__mdiff+0xfc>
  818254:	30800017 	ldw	r2,0(r6)
  818258:	31800104 	addi	r6,r6,4
  81825c:	10ffffcc 	andi	r3,r2,65535
  818260:	1a47883a 	add	r3,r3,r9
  818264:	1004d43a 	srli	r2,r2,16
  818268:	1809d43a 	srai	r4,r3,16
  81826c:	38c0000d 	sth	r3,0(r7)
  818270:	1105883a 	add	r2,r2,r4
  818274:	3880008d 	sth	r2,2(r7)
  818278:	1013d43a 	srai	r9,r2,16
  81827c:	39c00104 	addi	r7,r7,4
  818280:	337ff436 	bltu	r6,r13,818254 <__mdiff+0xcc>
  818284:	38bfff17 	ldw	r2,-4(r7)
  818288:	38ffff04 	addi	r3,r7,-4
  81828c:	1000041e 	bne	r2,zero,8182a0 <__mdiff+0x118>
  818290:	18ffff04 	addi	r3,r3,-4
  818294:	18800017 	ldw	r2,0(r3)
  818298:	52bfffc4 	addi	r10,r10,-1
  81829c:	103ffc26 	beq	r2,zero,818290 <__mdiff+0x108>
  8182a0:	6005883a 	mov	r2,r12
  8182a4:	62800415 	stw	r10,16(r12)
  8182a8:	dfc00417 	ldw	ra,16(sp)
  8182ac:	dcc00317 	ldw	r19,12(sp)
  8182b0:	dc800217 	ldw	r18,8(sp)
  8182b4:	dc400117 	ldw	r17,4(sp)
  8182b8:	dc000017 	ldw	r16,0(sp)
  8182bc:	dec00504 	addi	sp,sp,20
  8182c0:	f800283a 	ret
  8182c4:	9009883a 	mov	r4,r18
  8182c8:	000b883a 	mov	r5,zero
  8182cc:	0817f500 	call	817f50 <_Balloc>
  8182d0:	1019883a 	mov	r12,r2
  8182d4:	00800044 	movi	r2,1
  8182d8:	60800415 	stw	r2,16(r12)
  8182dc:	6005883a 	mov	r2,r12
  8182e0:	60000515 	stw	zero,20(r12)
  8182e4:	dfc00417 	ldw	ra,16(sp)
  8182e8:	dcc00317 	ldw	r19,12(sp)
  8182ec:	dc800217 	ldw	r18,8(sp)
  8182f0:	dc400117 	ldw	r17,4(sp)
  8182f4:	dc000017 	ldw	r16,0(sp)
  8182f8:	dec00504 	addi	sp,sp,20
  8182fc:	f800283a 	ret
  818300:	880d883a 	mov	r6,r17
  818304:	04c00044 	movi	r19,1
  818308:	8023883a 	mov	r17,r16
  81830c:	3021883a 	mov	r16,r6
  818310:	003fac06 	br	8181c4 <__mdiff+0x3c>

00818314 <__lshift>:
  818314:	defff904 	addi	sp,sp,-28
  818318:	28800417 	ldw	r2,16(r5)
  81831c:	dc000015 	stw	r16,0(sp)
  818320:	3021d17a 	srai	r16,r6,5
  818324:	28c00217 	ldw	r3,8(r5)
  818328:	10800044 	addi	r2,r2,1
  81832c:	dc400115 	stw	r17,4(sp)
  818330:	80a3883a 	add	r17,r16,r2
  818334:	dd400515 	stw	r21,20(sp)
  818338:	dd000415 	stw	r20,16(sp)
  81833c:	dc800215 	stw	r18,8(sp)
  818340:	dfc00615 	stw	ra,24(sp)
  818344:	2825883a 	mov	r18,r5
  818348:	dcc00315 	stw	r19,12(sp)
  81834c:	3029883a 	mov	r20,r6
  818350:	202b883a 	mov	r21,r4
  818354:	29400117 	ldw	r5,4(r5)
  818358:	1c40030e 	bge	r3,r17,818368 <__lshift+0x54>
  81835c:	18c7883a 	add	r3,r3,r3
  818360:	29400044 	addi	r5,r5,1
  818364:	1c7ffd16 	blt	r3,r17,81835c <__lshift+0x48>
  818368:	a809883a 	mov	r4,r21
  81836c:	0817f500 	call	817f50 <_Balloc>
  818370:	1027883a 	mov	r19,r2
  818374:	11400504 	addi	r5,r2,20
  818378:	0400090e 	bge	zero,r16,8183a0 <__lshift+0x8c>
  81837c:	2805883a 	mov	r2,r5
  818380:	0007883a 	mov	r3,zero
  818384:	18c00044 	addi	r3,r3,1
  818388:	10000015 	stw	zero,0(r2)
  81838c:	10800104 	addi	r2,r2,4
  818390:	80fffc1e 	bne	r16,r3,818384 <__lshift+0x70>
  818394:	8405883a 	add	r2,r16,r16
  818398:	1085883a 	add	r2,r2,r2
  81839c:	288b883a 	add	r5,r5,r2
  8183a0:	90800417 	ldw	r2,16(r18)
  8183a4:	91000504 	addi	r4,r18,20
  8183a8:	a18007cc 	andi	r6,r20,31
  8183ac:	1085883a 	add	r2,r2,r2
  8183b0:	1085883a 	add	r2,r2,r2
  8183b4:	208f883a 	add	r7,r4,r2
  8183b8:	30001e26 	beq	r6,zero,818434 <__lshift+0x120>
  8183bc:	00800804 	movi	r2,32
  8183c0:	1191c83a 	sub	r8,r2,r6
  8183c4:	0007883a 	mov	r3,zero
  8183c8:	20800017 	ldw	r2,0(r4)
  8183cc:	1184983a 	sll	r2,r2,r6
  8183d0:	1884b03a 	or	r2,r3,r2
  8183d4:	28800015 	stw	r2,0(r5)
  8183d8:	20c00017 	ldw	r3,0(r4)
  8183dc:	21000104 	addi	r4,r4,4
  8183e0:	29400104 	addi	r5,r5,4
  8183e4:	1a06d83a 	srl	r3,r3,r8
  8183e8:	21fff736 	bltu	r4,r7,8183c8 <__lshift+0xb4>
  8183ec:	28c00015 	stw	r3,0(r5)
  8183f0:	18000126 	beq	r3,zero,8183f8 <__lshift+0xe4>
  8183f4:	8c400044 	addi	r17,r17,1
  8183f8:	88bfffc4 	addi	r2,r17,-1
  8183fc:	98800415 	stw	r2,16(r19)
  818400:	a809883a 	mov	r4,r21
  818404:	900b883a 	mov	r5,r18
  818408:	08179d00 	call	8179d0 <_Bfree>
  81840c:	9805883a 	mov	r2,r19
  818410:	dfc00617 	ldw	ra,24(sp)
  818414:	dd400517 	ldw	r21,20(sp)
  818418:	dd000417 	ldw	r20,16(sp)
  81841c:	dcc00317 	ldw	r19,12(sp)
  818420:	dc800217 	ldw	r18,8(sp)
  818424:	dc400117 	ldw	r17,4(sp)
  818428:	dc000017 	ldw	r16,0(sp)
  81842c:	dec00704 	addi	sp,sp,28
  818430:	f800283a 	ret
  818434:	20800017 	ldw	r2,0(r4)
  818438:	21000104 	addi	r4,r4,4
  81843c:	28800015 	stw	r2,0(r5)
  818440:	29400104 	addi	r5,r5,4
  818444:	21ffec2e 	bgeu	r4,r7,8183f8 <__lshift+0xe4>
  818448:	20800017 	ldw	r2,0(r4)
  81844c:	21000104 	addi	r4,r4,4
  818450:	28800015 	stw	r2,0(r5)
  818454:	29400104 	addi	r5,r5,4
  818458:	21fff636 	bltu	r4,r7,818434 <__lshift+0x120>
  81845c:	003fe606 	br	8183f8 <__lshift+0xe4>

00818460 <__multiply>:
  818460:	defff904 	addi	sp,sp,-28
  818464:	dcc00315 	stw	r19,12(sp)
  818468:	dc800215 	stw	r18,8(sp)
  81846c:	2cc00417 	ldw	r19,16(r5)
  818470:	34800417 	ldw	r18,16(r6)
  818474:	dd000415 	stw	r20,16(sp)
  818478:	dc400115 	stw	r17,4(sp)
  81847c:	dfc00615 	stw	ra,24(sp)
  818480:	dd400515 	stw	r21,20(sp)
  818484:	dc000015 	stw	r16,0(sp)
  818488:	2823883a 	mov	r17,r5
  81848c:	3029883a 	mov	r20,r6
  818490:	9c80040e 	bge	r19,r18,8184a4 <__multiply+0x44>
  818494:	9027883a 	mov	r19,r18
  818498:	2c800417 	ldw	r18,16(r5)
  81849c:	2829883a 	mov	r20,r5
  8184a0:	3023883a 	mov	r17,r6
  8184a4:	88800217 	ldw	r2,8(r17)
  8184a8:	9ca1883a 	add	r16,r19,r18
  8184ac:	89400117 	ldw	r5,4(r17)
  8184b0:	1400010e 	bge	r2,r16,8184b8 <__multiply+0x58>
  8184b4:	29400044 	addi	r5,r5,1
  8184b8:	0817f500 	call	817f50 <_Balloc>
  8184bc:	102b883a 	mov	r21,r2
  8184c0:	8405883a 	add	r2,r16,r16
  8184c4:	1085883a 	add	r2,r2,r2
  8184c8:	a9000504 	addi	r4,r21,20
  8184cc:	209d883a 	add	r14,r4,r2
  8184d0:	2380042e 	bgeu	r4,r14,8184e4 <__multiply+0x84>
  8184d4:	2005883a 	mov	r2,r4
  8184d8:	10000015 	stw	zero,0(r2)
  8184dc:	10800104 	addi	r2,r2,4
  8184e0:	13bffd36 	bltu	r2,r14,8184d8 <__multiply+0x78>
  8184e4:	9485883a 	add	r2,r18,r18
  8184e8:	9cc7883a 	add	r3,r19,r19
  8184ec:	a1800504 	addi	r6,r20,20
  8184f0:	1085883a 	add	r2,r2,r2
  8184f4:	8b400504 	addi	r13,r17,20
  8184f8:	18c7883a 	add	r3,r3,r3
  8184fc:	309f883a 	add	r15,r6,r2
  818500:	68d7883a 	add	r11,r13,r3
  818504:	33c03b2e 	bgeu	r6,r15,8185f4 <__multiply+0x194>
  818508:	2019883a 	mov	r12,r4
  81850c:	30800017 	ldw	r2,0(r6)
  818510:	127fffcc 	andi	r9,r2,65535
  818514:	48001826 	beq	r9,zero,818578 <__multiply+0x118>
  818518:	6811883a 	mov	r8,r13
  81851c:	600f883a 	mov	r7,r12
  818520:	0015883a 	mov	r10,zero
  818524:	40c00017 	ldw	r3,0(r8)
  818528:	39400017 	ldw	r5,0(r7)
  81852c:	42000104 	addi	r8,r8,4
  818530:	193fffcc 	andi	r4,r3,65535
  818534:	4909383a 	mul	r4,r9,r4
  818538:	1806d43a 	srli	r3,r3,16
  81853c:	28bfffcc 	andi	r2,r5,65535
  818540:	5085883a 	add	r2,r10,r2
  818544:	2089883a 	add	r4,r4,r2
  818548:	48c7383a 	mul	r3,r9,r3
  81854c:	280ad43a 	srli	r5,r5,16
  818550:	2004d43a 	srli	r2,r4,16
  818554:	3900000d 	sth	r4,0(r7)
  818558:	1947883a 	add	r3,r3,r5
  81855c:	10c5883a 	add	r2,r2,r3
  818560:	3880008d 	sth	r2,2(r7)
  818564:	1014d43a 	srli	r10,r2,16
  818568:	39c00104 	addi	r7,r7,4
  81856c:	42ffed36 	bltu	r8,r11,818524 <__multiply+0xc4>
  818570:	3a800015 	stw	r10,0(r7)
  818574:	30800017 	ldw	r2,0(r6)
  818578:	1012d43a 	srli	r9,r2,16
  81857c:	48001926 	beq	r9,zero,8185e4 <__multiply+0x184>
  818580:	60800017 	ldw	r2,0(r12)
  818584:	6811883a 	mov	r8,r13
  818588:	600f883a 	mov	r7,r12
  81858c:	0015883a 	mov	r10,zero
  818590:	100b883a 	mov	r5,r2
  818594:	41000017 	ldw	r4,0(r8)
  818598:	2806d43a 	srli	r3,r5,16
  81859c:	3880000d 	sth	r2,0(r7)
  8185a0:	20bfffcc 	andi	r2,r4,65535
  8185a4:	4885383a 	mul	r2,r9,r2
  8185a8:	50c7883a 	add	r3,r10,r3
  8185ac:	2008d43a 	srli	r4,r4,16
  8185b0:	10c5883a 	add	r2,r2,r3
  8185b4:	3880008d 	sth	r2,2(r7)
  8185b8:	39c00104 	addi	r7,r7,4
  8185bc:	39400017 	ldw	r5,0(r7)
  8185c0:	4909383a 	mul	r4,r9,r4
  8185c4:	1004d43a 	srli	r2,r2,16
  8185c8:	28ffffcc 	andi	r3,r5,65535
  8185cc:	20c9883a 	add	r4,r4,r3
  8185d0:	1105883a 	add	r2,r2,r4
  8185d4:	42000104 	addi	r8,r8,4
  8185d8:	1014d43a 	srli	r10,r2,16
  8185dc:	42ffed36 	bltu	r8,r11,818594 <__multiply+0x134>
  8185e0:	38800015 	stw	r2,0(r7)
  8185e4:	31800104 	addi	r6,r6,4
  8185e8:	33c0022e 	bgeu	r6,r15,8185f4 <__multiply+0x194>
  8185ec:	63000104 	addi	r12,r12,4
  8185f0:	003fc606 	br	81850c <__multiply+0xac>
  8185f4:	0400090e 	bge	zero,r16,81861c <__multiply+0x1bc>
  8185f8:	70bfff17 	ldw	r2,-4(r14)
  8185fc:	70ffff04 	addi	r3,r14,-4
  818600:	10000326 	beq	r2,zero,818610 <__multiply+0x1b0>
  818604:	00000506 	br	81861c <__multiply+0x1bc>
  818608:	18800017 	ldw	r2,0(r3)
  81860c:	1000031e 	bne	r2,zero,81861c <__multiply+0x1bc>
  818610:	843fffc4 	addi	r16,r16,-1
  818614:	18ffff04 	addi	r3,r3,-4
  818618:	803ffb1e 	bne	r16,zero,818608 <__multiply+0x1a8>
  81861c:	a805883a 	mov	r2,r21
  818620:	ac000415 	stw	r16,16(r21)
  818624:	dfc00617 	ldw	ra,24(sp)
  818628:	dd400517 	ldw	r21,20(sp)
  81862c:	dd000417 	ldw	r20,16(sp)
  818630:	dcc00317 	ldw	r19,12(sp)
  818634:	dc800217 	ldw	r18,8(sp)
  818638:	dc400117 	ldw	r17,4(sp)
  81863c:	dc000017 	ldw	r16,0(sp)
  818640:	dec00704 	addi	sp,sp,28
  818644:	f800283a 	ret

00818648 <__i2b>:
  818648:	defffd04 	addi	sp,sp,-12
  81864c:	dc000015 	stw	r16,0(sp)
  818650:	04000044 	movi	r16,1
  818654:	dc800115 	stw	r18,4(sp)
  818658:	2825883a 	mov	r18,r5
  81865c:	800b883a 	mov	r5,r16
  818660:	dfc00215 	stw	ra,8(sp)
  818664:	0817f500 	call	817f50 <_Balloc>
  818668:	14000415 	stw	r16,16(r2)
  81866c:	14800515 	stw	r18,20(r2)
  818670:	dfc00217 	ldw	ra,8(sp)
  818674:	dc800117 	ldw	r18,4(sp)
  818678:	dc000017 	ldw	r16,0(sp)
  81867c:	dec00304 	addi	sp,sp,12
  818680:	f800283a 	ret

00818684 <__multadd>:
  818684:	defffa04 	addi	sp,sp,-24
  818688:	dc800215 	stw	r18,8(sp)
  81868c:	2c800417 	ldw	r18,16(r5)
  818690:	dd000415 	stw	r20,16(sp)
  818694:	dcc00315 	stw	r19,12(sp)
  818698:	dc000015 	stw	r16,0(sp)
  81869c:	dfc00515 	stw	ra,20(sp)
  8186a0:	3821883a 	mov	r16,r7
  8186a4:	dc400115 	stw	r17,4(sp)
  8186a8:	2827883a 	mov	r19,r5
  8186ac:	2029883a 	mov	r20,r4
  8186b0:	2a000504 	addi	r8,r5,20
  8186b4:	000f883a 	mov	r7,zero
  8186b8:	40800017 	ldw	r2,0(r8)
  8186bc:	39c00044 	addi	r7,r7,1
  8186c0:	10ffffcc 	andi	r3,r2,65535
  8186c4:	1987383a 	mul	r3,r3,r6
  8186c8:	1004d43a 	srli	r2,r2,16
  8186cc:	1c07883a 	add	r3,r3,r16
  8186d0:	180ad43a 	srli	r5,r3,16
  8186d4:	1185383a 	mul	r2,r2,r6
  8186d8:	18ffffcc 	andi	r3,r3,65535
  8186dc:	1145883a 	add	r2,r2,r5
  8186e0:	1008943a 	slli	r4,r2,16
  8186e4:	1020d43a 	srli	r16,r2,16
  8186e8:	20c9883a 	add	r4,r4,r3
  8186ec:	41000015 	stw	r4,0(r8)
  8186f0:	42000104 	addi	r8,r8,4
  8186f4:	3cbff016 	blt	r7,r18,8186b8 <__multadd+0x34>
  8186f8:	80000826 	beq	r16,zero,81871c <__multadd+0x98>
  8186fc:	98800217 	ldw	r2,8(r19)
  818700:	90800f0e 	bge	r18,r2,818740 <__multadd+0xbc>
  818704:	9485883a 	add	r2,r18,r18
  818708:	1085883a 	add	r2,r2,r2
  81870c:	14c5883a 	add	r2,r2,r19
  818710:	90c00044 	addi	r3,r18,1
  818714:	14000515 	stw	r16,20(r2)
  818718:	98c00415 	stw	r3,16(r19)
  81871c:	9805883a 	mov	r2,r19
  818720:	dfc00517 	ldw	ra,20(sp)
  818724:	dd000417 	ldw	r20,16(sp)
  818728:	dcc00317 	ldw	r19,12(sp)
  81872c:	dc800217 	ldw	r18,8(sp)
  818730:	dc400117 	ldw	r17,4(sp)
  818734:	dc000017 	ldw	r16,0(sp)
  818738:	dec00604 	addi	sp,sp,24
  81873c:	f800283a 	ret
  818740:	99400117 	ldw	r5,4(r19)
  818744:	a009883a 	mov	r4,r20
  818748:	29400044 	addi	r5,r5,1
  81874c:	0817f500 	call	817f50 <_Balloc>
  818750:	99800417 	ldw	r6,16(r19)
  818754:	99400304 	addi	r5,r19,12
  818758:	11000304 	addi	r4,r2,12
  81875c:	318d883a 	add	r6,r6,r6
  818760:	318d883a 	add	r6,r6,r6
  818764:	31800204 	addi	r6,r6,8
  818768:	1023883a 	mov	r17,r2
  81876c:	08122840 	call	812284 <memcpy>
  818770:	980b883a 	mov	r5,r19
  818774:	a009883a 	mov	r4,r20
  818778:	08179d00 	call	8179d0 <_Bfree>
  81877c:	8827883a 	mov	r19,r17
  818780:	003fe006 	br	818704 <__multadd+0x80>

00818784 <__pow5mult>:
  818784:	defffa04 	addi	sp,sp,-24
  818788:	308000cc 	andi	r2,r6,3
  81878c:	dd000415 	stw	r20,16(sp)
  818790:	dcc00315 	stw	r19,12(sp)
  818794:	dc000015 	stw	r16,0(sp)
  818798:	dfc00515 	stw	ra,20(sp)
  81879c:	dc800215 	stw	r18,8(sp)
  8187a0:	dc400115 	stw	r17,4(sp)
  8187a4:	3021883a 	mov	r16,r6
  8187a8:	2027883a 	mov	r19,r4
  8187ac:	2829883a 	mov	r20,r5
  8187b0:	10002b1e 	bne	r2,zero,818860 <__pow5mult+0xdc>
  8187b4:	8025d0ba 	srai	r18,r16,2
  8187b8:	90001b26 	beq	r18,zero,818828 <__pow5mult+0xa4>
  8187bc:	9c001217 	ldw	r16,72(r19)
  8187c0:	8000081e 	bne	r16,zero,8187e4 <__pow5mult+0x60>
  8187c4:	00003006 	br	818888 <__pow5mult+0x104>
  8187c8:	800b883a 	mov	r5,r16
  8187cc:	800d883a 	mov	r6,r16
  8187d0:	9809883a 	mov	r4,r19
  8187d4:	90001426 	beq	r18,zero,818828 <__pow5mult+0xa4>
  8187d8:	80800017 	ldw	r2,0(r16)
  8187dc:	10001b26 	beq	r2,zero,81884c <__pow5mult+0xc8>
  8187e0:	1021883a 	mov	r16,r2
  8187e4:	9080004c 	andi	r2,r18,1
  8187e8:	1005003a 	cmpeq	r2,r2,zero
  8187ec:	9025d07a 	srai	r18,r18,1
  8187f0:	800d883a 	mov	r6,r16
  8187f4:	9809883a 	mov	r4,r19
  8187f8:	a00b883a 	mov	r5,r20
  8187fc:	103ff21e 	bne	r2,zero,8187c8 <__pow5mult+0x44>
  818800:	08184600 	call	818460 <__multiply>
  818804:	a00b883a 	mov	r5,r20
  818808:	9809883a 	mov	r4,r19
  81880c:	1023883a 	mov	r17,r2
  818810:	08179d00 	call	8179d0 <_Bfree>
  818814:	8829883a 	mov	r20,r17
  818818:	800b883a 	mov	r5,r16
  81881c:	800d883a 	mov	r6,r16
  818820:	9809883a 	mov	r4,r19
  818824:	903fec1e 	bne	r18,zero,8187d8 <__pow5mult+0x54>
  818828:	a005883a 	mov	r2,r20
  81882c:	dfc00517 	ldw	ra,20(sp)
  818830:	dd000417 	ldw	r20,16(sp)
  818834:	dcc00317 	ldw	r19,12(sp)
  818838:	dc800217 	ldw	r18,8(sp)
  81883c:	dc400117 	ldw	r17,4(sp)
  818840:	dc000017 	ldw	r16,0(sp)
  818844:	dec00604 	addi	sp,sp,24
  818848:	f800283a 	ret
  81884c:	08184600 	call	818460 <__multiply>
  818850:	80800015 	stw	r2,0(r16)
  818854:	1021883a 	mov	r16,r2
  818858:	10000015 	stw	zero,0(r2)
  81885c:	003fe106 	br	8187e4 <__pow5mult+0x60>
  818860:	1085883a 	add	r2,r2,r2
  818864:	00c020f4 	movhi	r3,131
  818868:	18e27d04 	addi	r3,r3,-30220
  81886c:	1085883a 	add	r2,r2,r2
  818870:	10c5883a 	add	r2,r2,r3
  818874:	11bfff17 	ldw	r6,-4(r2)
  818878:	000f883a 	mov	r7,zero
  81887c:	08186840 	call	818684 <__multadd>
  818880:	1029883a 	mov	r20,r2
  818884:	003fcb06 	br	8187b4 <__pow5mult+0x30>
  818888:	9809883a 	mov	r4,r19
  81888c:	01409c44 	movi	r5,625
  818890:	08186480 	call	818648 <__i2b>
  818894:	98801215 	stw	r2,72(r19)
  818898:	1021883a 	mov	r16,r2
  81889c:	10000015 	stw	zero,0(r2)
  8188a0:	003fd006 	br	8187e4 <__pow5mult+0x60>

008188a4 <__s2b>:
  8188a4:	defff904 	addi	sp,sp,-28
  8188a8:	dcc00315 	stw	r19,12(sp)
  8188ac:	dc800215 	stw	r18,8(sp)
  8188b0:	2827883a 	mov	r19,r5
  8188b4:	2025883a 	mov	r18,r4
  8188b8:	01400244 	movi	r5,9
  8188bc:	39000204 	addi	r4,r7,8
  8188c0:	dd000415 	stw	r20,16(sp)
  8188c4:	dc400115 	stw	r17,4(sp)
  8188c8:	dfc00615 	stw	ra,24(sp)
  8188cc:	dd400515 	stw	r21,20(sp)
  8188d0:	dc000015 	stw	r16,0(sp)
  8188d4:	3829883a 	mov	r20,r7
  8188d8:	3023883a 	mov	r17,r6
  8188dc:	08111140 	call	811114 <__divsi3>
  8188e0:	00c00044 	movi	r3,1
  8188e4:	1880350e 	bge	r3,r2,8189bc <__s2b+0x118>
  8188e8:	000b883a 	mov	r5,zero
  8188ec:	18c7883a 	add	r3,r3,r3
  8188f0:	29400044 	addi	r5,r5,1
  8188f4:	18bffd16 	blt	r3,r2,8188ec <__s2b+0x48>
  8188f8:	9009883a 	mov	r4,r18
  8188fc:	0817f500 	call	817f50 <_Balloc>
  818900:	1011883a 	mov	r8,r2
  818904:	d8800717 	ldw	r2,28(sp)
  818908:	00c00044 	movi	r3,1
  81890c:	01800244 	movi	r6,9
  818910:	40800515 	stw	r2,20(r8)
  818914:	40c00415 	stw	r3,16(r8)
  818918:	3440260e 	bge	r6,r17,8189b4 <__s2b+0x110>
  81891c:	3021883a 	mov	r16,r6
  818920:	99ab883a 	add	r21,r19,r6
  818924:	9c05883a 	add	r2,r19,r16
  818928:	11c00007 	ldb	r7,0(r2)
  81892c:	400b883a 	mov	r5,r8
  818930:	9009883a 	mov	r4,r18
  818934:	39fff404 	addi	r7,r7,-48
  818938:	01800284 	movi	r6,10
  81893c:	08186840 	call	818684 <__multadd>
  818940:	84000044 	addi	r16,r16,1
  818944:	1011883a 	mov	r8,r2
  818948:	8c3ff61e 	bne	r17,r16,818924 <__s2b+0x80>
  81894c:	ac45883a 	add	r2,r21,r17
  818950:	117ffe04 	addi	r5,r2,-8
  818954:	880d883a 	mov	r6,r17
  818958:	35000c0e 	bge	r6,r20,81898c <__s2b+0xe8>
  81895c:	a185c83a 	sub	r2,r20,r6
  818960:	2821883a 	mov	r16,r5
  818964:	28a3883a 	add	r17,r5,r2
  818968:	81c00007 	ldb	r7,0(r16)
  81896c:	400b883a 	mov	r5,r8
  818970:	9009883a 	mov	r4,r18
  818974:	39fff404 	addi	r7,r7,-48
  818978:	01800284 	movi	r6,10
  81897c:	08186840 	call	818684 <__multadd>
  818980:	84000044 	addi	r16,r16,1
  818984:	1011883a 	mov	r8,r2
  818988:	847ff71e 	bne	r16,r17,818968 <__s2b+0xc4>
  81898c:	4005883a 	mov	r2,r8
  818990:	dfc00617 	ldw	ra,24(sp)
  818994:	dd400517 	ldw	r21,20(sp)
  818998:	dd000417 	ldw	r20,16(sp)
  81899c:	dcc00317 	ldw	r19,12(sp)
  8189a0:	dc800217 	ldw	r18,8(sp)
  8189a4:	dc400117 	ldw	r17,4(sp)
  8189a8:	dc000017 	ldw	r16,0(sp)
  8189ac:	dec00704 	addi	sp,sp,28
  8189b0:	f800283a 	ret
  8189b4:	99400284 	addi	r5,r19,10
  8189b8:	003fe706 	br	818958 <__s2b+0xb4>
  8189bc:	000b883a 	mov	r5,zero
  8189c0:	003fcd06 	br	8188f8 <__s2b+0x54>

008189c4 <putc>:
  8189c4:	defffc04 	addi	sp,sp,-16
  8189c8:	dc800215 	stw	r18,8(sp)
  8189cc:	048020f4 	movhi	r18,131
  8189d0:	94a99904 	addi	r18,r18,-22940
  8189d4:	90c00017 	ldw	r3,0(r18)
  8189d8:	dc400115 	stw	r17,4(sp)
  8189dc:	dc000015 	stw	r16,0(sp)
  8189e0:	dfc00315 	stw	ra,12(sp)
  8189e4:	2023883a 	mov	r17,r4
  8189e8:	2821883a 	mov	r16,r5
  8189ec:	18000226 	beq	r3,zero,8189f8 <putc+0x34>
  8189f0:	18800e17 	ldw	r2,56(r3)
  8189f4:	10001126 	beq	r2,zero,818a3c <putc+0x78>
  8189f8:	80800217 	ldw	r2,8(r16)
  8189fc:	10ffffc4 	addi	r3,r2,-1
  818a00:	80c00215 	stw	r3,8(r16)
  818a04:	18001316 	blt	r3,zero,818a54 <putc+0x90>
  818a08:	80800017 	ldw	r2,0(r16)
  818a0c:	14400005 	stb	r17,0(r2)
  818a10:	80c00017 	ldw	r3,0(r16)
  818a14:	18800044 	addi	r2,r3,1
  818a18:	18c00003 	ldbu	r3,0(r3)
  818a1c:	80800015 	stw	r2,0(r16)
  818a20:	1805883a 	mov	r2,r3
  818a24:	dfc00317 	ldw	ra,12(sp)
  818a28:	dc800217 	ldw	r18,8(sp)
  818a2c:	dc400117 	ldw	r17,4(sp)
  818a30:	dc000017 	ldw	r16,0(sp)
  818a34:	dec00404 	addi	sp,sp,16
  818a38:	f800283a 	ret
  818a3c:	1809883a 	mov	r4,r3
  818a40:	081671c0 	call	81671c <__sinit>
  818a44:	80800217 	ldw	r2,8(r16)
  818a48:	10ffffc4 	addi	r3,r2,-1
  818a4c:	80c00215 	stw	r3,8(r16)
  818a50:	183fed0e 	bge	r3,zero,818a08 <putc+0x44>
  818a54:	80800617 	ldw	r2,24(r16)
  818a58:	18800f16 	blt	r3,r2,818a98 <putc+0xd4>
  818a5c:	80800017 	ldw	r2,0(r16)
  818a60:	14400005 	stb	r17,0(r2)
  818a64:	81000017 	ldw	r4,0(r16)
  818a68:	00800284 	movi	r2,10
  818a6c:	20c00003 	ldbu	r3,0(r4)
  818a70:	18801226 	beq	r3,r2,818abc <putc+0xf8>
  818a74:	20800044 	addi	r2,r4,1
  818a78:	80800015 	stw	r2,0(r16)
  818a7c:	1805883a 	mov	r2,r3
  818a80:	dfc00317 	ldw	ra,12(sp)
  818a84:	dc800217 	ldw	r18,8(sp)
  818a88:	dc400117 	ldw	r17,4(sp)
  818a8c:	dc000017 	ldw	r16,0(sp)
  818a90:	dec00404 	addi	sp,sp,16
  818a94:	f800283a 	ret
  818a98:	91000017 	ldw	r4,0(r18)
  818a9c:	880b883a 	mov	r5,r17
  818aa0:	800d883a 	mov	r6,r16
  818aa4:	dfc00317 	ldw	ra,12(sp)
  818aa8:	dc800217 	ldw	r18,8(sp)
  818aac:	dc400117 	ldw	r17,4(sp)
  818ab0:	dc000017 	ldw	r16,0(sp)
  818ab4:	dec00404 	addi	sp,sp,16
  818ab8:	08193ec1 	jmpi	8193ec <__swbuf_r>
  818abc:	91000017 	ldw	r4,0(r18)
  818ac0:	180b883a 	mov	r5,r3
  818ac4:	003ff606 	br	818aa0 <putc+0xdc>

00818ac8 <_putc_r>:
  818ac8:	defffc04 	addi	sp,sp,-16
  818acc:	dc400215 	stw	r17,8(sp)
  818ad0:	dc000115 	stw	r16,4(sp)
  818ad4:	dfc00315 	stw	ra,12(sp)
  818ad8:	2021883a 	mov	r16,r4
  818adc:	2823883a 	mov	r17,r5
  818ae0:	20000226 	beq	r4,zero,818aec <_putc_r+0x24>
  818ae4:	20800e17 	ldw	r2,56(r4)
  818ae8:	10001026 	beq	r2,zero,818b2c <_putc_r+0x64>
  818aec:	30800217 	ldw	r2,8(r6)
  818af0:	10ffffc4 	addi	r3,r2,-1
  818af4:	30c00215 	stw	r3,8(r6)
  818af8:	18001316 	blt	r3,zero,818b48 <_putc_r+0x80>
  818afc:	30800017 	ldw	r2,0(r6)
  818b00:	14400005 	stb	r17,0(r2)
  818b04:	30c00017 	ldw	r3,0(r6)
  818b08:	18800044 	addi	r2,r3,1
  818b0c:	18c00003 	ldbu	r3,0(r3)
  818b10:	30800015 	stw	r2,0(r6)
  818b14:	1805883a 	mov	r2,r3
  818b18:	dfc00317 	ldw	ra,12(sp)
  818b1c:	dc400217 	ldw	r17,8(sp)
  818b20:	dc000117 	ldw	r16,4(sp)
  818b24:	dec00404 	addi	sp,sp,16
  818b28:	f800283a 	ret
  818b2c:	d9800015 	stw	r6,0(sp)
  818b30:	081671c0 	call	81671c <__sinit>
  818b34:	d9800017 	ldw	r6,0(sp)
  818b38:	30800217 	ldw	r2,8(r6)
  818b3c:	10ffffc4 	addi	r3,r2,-1
  818b40:	30c00215 	stw	r3,8(r6)
  818b44:	183fed0e 	bge	r3,zero,818afc <_putc_r+0x34>
  818b48:	30800617 	ldw	r2,24(r6)
  818b4c:	18800e16 	blt	r3,r2,818b88 <_putc_r+0xc0>
  818b50:	30800017 	ldw	r2,0(r6)
  818b54:	14400005 	stb	r17,0(r2)
  818b58:	31000017 	ldw	r4,0(r6)
  818b5c:	00800284 	movi	r2,10
  818b60:	20c00003 	ldbu	r3,0(r4)
  818b64:	18800f26 	beq	r3,r2,818ba4 <_putc_r+0xdc>
  818b68:	20800044 	addi	r2,r4,1
  818b6c:	30800015 	stw	r2,0(r6)
  818b70:	1805883a 	mov	r2,r3
  818b74:	dfc00317 	ldw	ra,12(sp)
  818b78:	dc400217 	ldw	r17,8(sp)
  818b7c:	dc000117 	ldw	r16,4(sp)
  818b80:	dec00404 	addi	sp,sp,16
  818b84:	f800283a 	ret
  818b88:	8009883a 	mov	r4,r16
  818b8c:	880b883a 	mov	r5,r17
  818b90:	dfc00317 	ldw	ra,12(sp)
  818b94:	dc400217 	ldw	r17,8(sp)
  818b98:	dc000117 	ldw	r16,4(sp)
  818b9c:	dec00404 	addi	sp,sp,16
  818ba0:	08193ec1 	jmpi	8193ec <__swbuf_r>
  818ba4:	8009883a 	mov	r4,r16
  818ba8:	180b883a 	mov	r5,r3
  818bac:	003ff806 	br	818b90 <_putc_r+0xc8>

00818bb0 <_realloc_r>:
  818bb0:	defff404 	addi	sp,sp,-48
  818bb4:	dd800815 	stw	r22,32(sp)
  818bb8:	dc800415 	stw	r18,16(sp)
  818bbc:	dc400315 	stw	r17,12(sp)
  818bc0:	dfc00b15 	stw	ra,44(sp)
  818bc4:	df000a15 	stw	fp,40(sp)
  818bc8:	ddc00915 	stw	r23,36(sp)
  818bcc:	dd400715 	stw	r21,28(sp)
  818bd0:	dd000615 	stw	r20,24(sp)
  818bd4:	dcc00515 	stw	r19,20(sp)
  818bd8:	dc000215 	stw	r16,8(sp)
  818bdc:	2825883a 	mov	r18,r5
  818be0:	3023883a 	mov	r17,r6
  818be4:	202d883a 	mov	r22,r4
  818be8:	2800c926 	beq	r5,zero,818f10 <_realloc_r+0x360>
  818bec:	081b63c0 	call	81b63c <__malloc_lock>
  818bf0:	943ffe04 	addi	r16,r18,-8
  818bf4:	88c002c4 	addi	r3,r17,11
  818bf8:	00800584 	movi	r2,22
  818bfc:	82000117 	ldw	r8,4(r16)
  818c00:	10c01b2e 	bgeu	r2,r3,818c70 <_realloc_r+0xc0>
  818c04:	00bffe04 	movi	r2,-8
  818c08:	188e703a 	and	r7,r3,r2
  818c0c:	3839883a 	mov	fp,r7
  818c10:	38001a16 	blt	r7,zero,818c7c <_realloc_r+0xcc>
  818c14:	e4401936 	bltu	fp,r17,818c7c <_realloc_r+0xcc>
  818c18:	013fff04 	movi	r4,-4
  818c1c:	4126703a 	and	r19,r8,r4
  818c20:	99c02616 	blt	r19,r7,818cbc <_realloc_r+0x10c>
  818c24:	802b883a 	mov	r21,r16
  818c28:	9829883a 	mov	r20,r19
  818c2c:	84000204 	addi	r16,r16,8
  818c30:	a80f883a 	mov	r7,r21
  818c34:	a70dc83a 	sub	r6,r20,fp
  818c38:	008003c4 	movi	r2,15
  818c3c:	1180c136 	bltu	r2,r6,818f44 <_realloc_r+0x394>
  818c40:	38800117 	ldw	r2,4(r7)
  818c44:	a549883a 	add	r4,r20,r21
  818c48:	1080004c 	andi	r2,r2,1
  818c4c:	a084b03a 	or	r2,r20,r2
  818c50:	38800115 	stw	r2,4(r7)
  818c54:	20c00117 	ldw	r3,4(r4)
  818c58:	18c00054 	ori	r3,r3,1
  818c5c:	20c00115 	stw	r3,4(r4)
  818c60:	b009883a 	mov	r4,r22
  818c64:	081b7440 	call	81b744 <__malloc_unlock>
  818c68:	8023883a 	mov	r17,r16
  818c6c:	00000606 	br	818c88 <_realloc_r+0xd8>
  818c70:	01c00404 	movi	r7,16
  818c74:	3839883a 	mov	fp,r7
  818c78:	e47fe72e 	bgeu	fp,r17,818c18 <_realloc_r+0x68>
  818c7c:	00800304 	movi	r2,12
  818c80:	0023883a 	mov	r17,zero
  818c84:	b0800015 	stw	r2,0(r22)
  818c88:	8805883a 	mov	r2,r17
  818c8c:	dfc00b17 	ldw	ra,44(sp)
  818c90:	df000a17 	ldw	fp,40(sp)
  818c94:	ddc00917 	ldw	r23,36(sp)
  818c98:	dd800817 	ldw	r22,32(sp)
  818c9c:	dd400717 	ldw	r21,28(sp)
  818ca0:	dd000617 	ldw	r20,24(sp)
  818ca4:	dcc00517 	ldw	r19,20(sp)
  818ca8:	dc800417 	ldw	r18,16(sp)
  818cac:	dc400317 	ldw	r17,12(sp)
  818cb0:	dc000217 	ldw	r16,8(sp)
  818cb4:	dec00c04 	addi	sp,sp,48
  818cb8:	f800283a 	ret
  818cbc:	008020f4 	movhi	r2,131
  818cc0:	10a3eb04 	addi	r2,r2,-28756
  818cc4:	12400217 	ldw	r9,8(r2)
  818cc8:	84cd883a 	add	r6,r16,r19
  818ccc:	802b883a 	mov	r21,r16
  818cd0:	3240b926 	beq	r6,r9,818fb8 <_realloc_r+0x408>
  818cd4:	31400117 	ldw	r5,4(r6)
  818cd8:	00bfff84 	movi	r2,-2
  818cdc:	2884703a 	and	r2,r5,r2
  818ce0:	1185883a 	add	r2,r2,r6
  818ce4:	10c00117 	ldw	r3,4(r2)
  818ce8:	18c0004c 	andi	r3,r3,1
  818cec:	1807003a 	cmpeq	r3,r3,zero
  818cf0:	1800a326 	beq	r3,zero,818f80 <_realloc_r+0x3d0>
  818cf4:	2908703a 	and	r4,r5,r4
  818cf8:	9929883a 	add	r20,r19,r4
  818cfc:	a1c0a30e 	bge	r20,r7,818f8c <_realloc_r+0x3dc>
  818d00:	4080004c 	andi	r2,r8,1
  818d04:	1000551e 	bne	r2,zero,818e5c <_realloc_r+0x2ac>
  818d08:	80800017 	ldw	r2,0(r16)
  818d0c:	80afc83a 	sub	r23,r16,r2
  818d10:	b8c00117 	ldw	r3,4(r23)
  818d14:	00bfff04 	movi	r2,-4
  818d18:	1884703a 	and	r2,r3,r2
  818d1c:	30002e26 	beq	r6,zero,818dd8 <_realloc_r+0x228>
  818d20:	3240b926 	beq	r6,r9,819008 <_realloc_r+0x458>
  818d24:	98a9883a 	add	r20,r19,r2
  818d28:	2509883a 	add	r4,r4,r20
  818d2c:	d9000015 	stw	r4,0(sp)
  818d30:	21c02a16 	blt	r4,r7,818ddc <_realloc_r+0x22c>
  818d34:	30800317 	ldw	r2,12(r6)
  818d38:	30c00217 	ldw	r3,8(r6)
  818d3c:	01400904 	movi	r5,36
  818d40:	99bfff04 	addi	r6,r19,-4
  818d44:	18800315 	stw	r2,12(r3)
  818d48:	10c00215 	stw	r3,8(r2)
  818d4c:	b9000317 	ldw	r4,12(r23)
  818d50:	b8800217 	ldw	r2,8(r23)
  818d54:	b82b883a 	mov	r21,r23
  818d58:	bc000204 	addi	r16,r23,8
  818d5c:	20800215 	stw	r2,8(r4)
  818d60:	11000315 	stw	r4,12(r2)
  818d64:	2980e436 	bltu	r5,r6,8190f8 <_realloc_r+0x548>
  818d68:	008004c4 	movi	r2,19
  818d6c:	9009883a 	mov	r4,r18
  818d70:	8011883a 	mov	r8,r16
  818d74:	11800f2e 	bgeu	r2,r6,818db4 <_realloc_r+0x204>
  818d78:	90800017 	ldw	r2,0(r18)
  818d7c:	ba000404 	addi	r8,r23,16
  818d80:	91000204 	addi	r4,r18,8
  818d84:	b8800215 	stw	r2,8(r23)
  818d88:	90c00117 	ldw	r3,4(r18)
  818d8c:	008006c4 	movi	r2,27
  818d90:	b8c00315 	stw	r3,12(r23)
  818d94:	1180072e 	bgeu	r2,r6,818db4 <_realloc_r+0x204>
  818d98:	90c00217 	ldw	r3,8(r18)
  818d9c:	ba000604 	addi	r8,r23,24
  818da0:	91000404 	addi	r4,r18,16
  818da4:	b8c00415 	stw	r3,16(r23)
  818da8:	90800317 	ldw	r2,12(r18)
  818dac:	b8800515 	stw	r2,20(r23)
  818db0:	3140e726 	beq	r6,r5,819150 <_realloc_r+0x5a0>
  818db4:	20800017 	ldw	r2,0(r4)
  818db8:	dd000017 	ldw	r20,0(sp)
  818dbc:	b80f883a 	mov	r7,r23
  818dc0:	40800015 	stw	r2,0(r8)
  818dc4:	20c00117 	ldw	r3,4(r4)
  818dc8:	40c00115 	stw	r3,4(r8)
  818dcc:	20800217 	ldw	r2,8(r4)
  818dd0:	40800215 	stw	r2,8(r8)
  818dd4:	003f9706 	br	818c34 <_realloc_r+0x84>
  818dd8:	98a9883a 	add	r20,r19,r2
  818ddc:	a1c01f16 	blt	r20,r7,818e5c <_realloc_r+0x2ac>
  818de0:	b8c00317 	ldw	r3,12(r23)
  818de4:	b8800217 	ldw	r2,8(r23)
  818de8:	99bfff04 	addi	r6,r19,-4
  818dec:	01400904 	movi	r5,36
  818df0:	b82b883a 	mov	r21,r23
  818df4:	18800215 	stw	r2,8(r3)
  818df8:	10c00315 	stw	r3,12(r2)
  818dfc:	bc000204 	addi	r16,r23,8
  818e00:	2980c336 	bltu	r5,r6,819110 <_realloc_r+0x560>
  818e04:	008004c4 	movi	r2,19
  818e08:	9009883a 	mov	r4,r18
  818e0c:	8011883a 	mov	r8,r16
  818e10:	11800f2e 	bgeu	r2,r6,818e50 <_realloc_r+0x2a0>
  818e14:	90800017 	ldw	r2,0(r18)
  818e18:	ba000404 	addi	r8,r23,16
  818e1c:	91000204 	addi	r4,r18,8
  818e20:	b8800215 	stw	r2,8(r23)
  818e24:	90c00117 	ldw	r3,4(r18)
  818e28:	008006c4 	movi	r2,27
  818e2c:	b8c00315 	stw	r3,12(r23)
  818e30:	1180072e 	bgeu	r2,r6,818e50 <_realloc_r+0x2a0>
  818e34:	90c00217 	ldw	r3,8(r18)
  818e38:	ba000604 	addi	r8,r23,24
  818e3c:	91000404 	addi	r4,r18,16
  818e40:	b8c00415 	stw	r3,16(r23)
  818e44:	90800317 	ldw	r2,12(r18)
  818e48:	b8800515 	stw	r2,20(r23)
  818e4c:	3140c726 	beq	r6,r5,81916c <_realloc_r+0x5bc>
  818e50:	20800017 	ldw	r2,0(r4)
  818e54:	b80f883a 	mov	r7,r23
  818e58:	003fd906 	br	818dc0 <_realloc_r+0x210>
  818e5c:	880b883a 	mov	r5,r17
  818e60:	b009883a 	mov	r4,r22
  818e64:	0811b440 	call	811b44 <_malloc_r>
  818e68:	1023883a 	mov	r17,r2
  818e6c:	10002526 	beq	r2,zero,818f04 <_realloc_r+0x354>
  818e70:	80800117 	ldw	r2,4(r16)
  818e74:	00ffff84 	movi	r3,-2
  818e78:	893ffe04 	addi	r4,r17,-8
  818e7c:	10c4703a 	and	r2,r2,r3
  818e80:	8085883a 	add	r2,r16,r2
  818e84:	20809526 	beq	r4,r2,8190dc <_realloc_r+0x52c>
  818e88:	99bfff04 	addi	r6,r19,-4
  818e8c:	01c00904 	movi	r7,36
  818e90:	39804536 	bltu	r7,r6,818fa8 <_realloc_r+0x3f8>
  818e94:	008004c4 	movi	r2,19
  818e98:	9009883a 	mov	r4,r18
  818e9c:	880b883a 	mov	r5,r17
  818ea0:	11800f2e 	bgeu	r2,r6,818ee0 <_realloc_r+0x330>
  818ea4:	90800017 	ldw	r2,0(r18)
  818ea8:	89400204 	addi	r5,r17,8
  818eac:	91000204 	addi	r4,r18,8
  818eb0:	88800015 	stw	r2,0(r17)
  818eb4:	90c00117 	ldw	r3,4(r18)
  818eb8:	008006c4 	movi	r2,27
  818ebc:	88c00115 	stw	r3,4(r17)
  818ec0:	1180072e 	bgeu	r2,r6,818ee0 <_realloc_r+0x330>
  818ec4:	90c00217 	ldw	r3,8(r18)
  818ec8:	89400404 	addi	r5,r17,16
  818ecc:	91000404 	addi	r4,r18,16
  818ed0:	88c00215 	stw	r3,8(r17)
  818ed4:	90800317 	ldw	r2,12(r18)
  818ed8:	88800315 	stw	r2,12(r17)
  818edc:	31c09126 	beq	r6,r7,819124 <_realloc_r+0x574>
  818ee0:	20800017 	ldw	r2,0(r4)
  818ee4:	28800015 	stw	r2,0(r5)
  818ee8:	20c00117 	ldw	r3,4(r4)
  818eec:	28c00115 	stw	r3,4(r5)
  818ef0:	20800217 	ldw	r2,8(r4)
  818ef4:	28800215 	stw	r2,8(r5)
  818ef8:	900b883a 	mov	r5,r18
  818efc:	b009883a 	mov	r4,r22
  818f00:	0816bec0 	call	816bec <_free_r>
  818f04:	b009883a 	mov	r4,r22
  818f08:	081b7440 	call	81b744 <__malloc_unlock>
  818f0c:	003f5e06 	br	818c88 <_realloc_r+0xd8>
  818f10:	300b883a 	mov	r5,r6
  818f14:	dfc00b17 	ldw	ra,44(sp)
  818f18:	df000a17 	ldw	fp,40(sp)
  818f1c:	ddc00917 	ldw	r23,36(sp)
  818f20:	dd800817 	ldw	r22,32(sp)
  818f24:	dd400717 	ldw	r21,28(sp)
  818f28:	dd000617 	ldw	r20,24(sp)
  818f2c:	dcc00517 	ldw	r19,20(sp)
  818f30:	dc800417 	ldw	r18,16(sp)
  818f34:	dc400317 	ldw	r17,12(sp)
  818f38:	dc000217 	ldw	r16,8(sp)
  818f3c:	dec00c04 	addi	sp,sp,48
  818f40:	0811b441 	jmpi	811b44 <_malloc_r>
  818f44:	38800117 	ldw	r2,4(r7)
  818f48:	e54b883a 	add	r5,fp,r21
  818f4c:	31000054 	ori	r4,r6,1
  818f50:	1080004c 	andi	r2,r2,1
  818f54:	1704b03a 	or	r2,r2,fp
  818f58:	38800115 	stw	r2,4(r7)
  818f5c:	29000115 	stw	r4,4(r5)
  818f60:	2987883a 	add	r3,r5,r6
  818f64:	18800117 	ldw	r2,4(r3)
  818f68:	29400204 	addi	r5,r5,8
  818f6c:	b009883a 	mov	r4,r22
  818f70:	10800054 	ori	r2,r2,1
  818f74:	18800115 	stw	r2,4(r3)
  818f78:	0816bec0 	call	816bec <_free_r>
  818f7c:	003f3806 	br	818c60 <_realloc_r+0xb0>
  818f80:	000d883a 	mov	r6,zero
  818f84:	0009883a 	mov	r4,zero
  818f88:	003f5d06 	br	818d00 <_realloc_r+0x150>
  818f8c:	30c00217 	ldw	r3,8(r6)
  818f90:	30800317 	ldw	r2,12(r6)
  818f94:	800f883a 	mov	r7,r16
  818f98:	84000204 	addi	r16,r16,8
  818f9c:	10c00215 	stw	r3,8(r2)
  818fa0:	18800315 	stw	r2,12(r3)
  818fa4:	003f2306 	br	818c34 <_realloc_r+0x84>
  818fa8:	8809883a 	mov	r4,r17
  818fac:	900b883a 	mov	r5,r18
  818fb0:	08178580 	call	817858 <memmove>
  818fb4:	003fd006 	br	818ef8 <_realloc_r+0x348>
  818fb8:	30800117 	ldw	r2,4(r6)
  818fbc:	e0c00404 	addi	r3,fp,16
  818fc0:	1108703a 	and	r4,r2,r4
  818fc4:	9905883a 	add	r2,r19,r4
  818fc8:	10ff4d16 	blt	r2,r3,818d00 <_realloc_r+0x150>
  818fcc:	1705c83a 	sub	r2,r2,fp
  818fd0:	870b883a 	add	r5,r16,fp
  818fd4:	10800054 	ori	r2,r2,1
  818fd8:	28800115 	stw	r2,4(r5)
  818fdc:	80c00117 	ldw	r3,4(r16)
  818fe0:	008020f4 	movhi	r2,131
  818fe4:	10a3eb04 	addi	r2,r2,-28756
  818fe8:	b009883a 	mov	r4,r22
  818fec:	18c0004c 	andi	r3,r3,1
  818ff0:	e0c6b03a 	or	r3,fp,r3
  818ff4:	11400215 	stw	r5,8(r2)
  818ff8:	80c00115 	stw	r3,4(r16)
  818ffc:	081b7440 	call	81b744 <__malloc_unlock>
  819000:	84400204 	addi	r17,r16,8
  819004:	003f2006 	br	818c88 <_realloc_r+0xd8>
  819008:	98a9883a 	add	r20,r19,r2
  81900c:	2509883a 	add	r4,r4,r20
  819010:	e0800404 	addi	r2,fp,16
  819014:	d9000115 	stw	r4,4(sp)
  819018:	20bf7016 	blt	r4,r2,818ddc <_realloc_r+0x22c>
  81901c:	b8c00317 	ldw	r3,12(r23)
  819020:	b8800217 	ldw	r2,8(r23)
  819024:	99bfff04 	addi	r6,r19,-4
  819028:	01400904 	movi	r5,36
  81902c:	18800215 	stw	r2,8(r3)
  819030:	10c00315 	stw	r3,12(r2)
  819034:	bc400204 	addi	r17,r23,8
  819038:	29804136 	bltu	r5,r6,819140 <_realloc_r+0x590>
  81903c:	008004c4 	movi	r2,19
  819040:	9009883a 	mov	r4,r18
  819044:	880f883a 	mov	r7,r17
  819048:	11800f2e 	bgeu	r2,r6,819088 <_realloc_r+0x4d8>
  81904c:	90800017 	ldw	r2,0(r18)
  819050:	b9c00404 	addi	r7,r23,16
  819054:	91000204 	addi	r4,r18,8
  819058:	b8800215 	stw	r2,8(r23)
  81905c:	90c00117 	ldw	r3,4(r18)
  819060:	008006c4 	movi	r2,27
  819064:	b8c00315 	stw	r3,12(r23)
  819068:	1180072e 	bgeu	r2,r6,819088 <_realloc_r+0x4d8>
  81906c:	90c00217 	ldw	r3,8(r18)
  819070:	b9c00604 	addi	r7,r23,24
  819074:	91000404 	addi	r4,r18,16
  819078:	b8c00415 	stw	r3,16(r23)
  81907c:	90800317 	ldw	r2,12(r18)
  819080:	b8800515 	stw	r2,20(r23)
  819084:	31404026 	beq	r6,r5,819188 <_realloc_r+0x5d8>
  819088:	20800017 	ldw	r2,0(r4)
  81908c:	38800015 	stw	r2,0(r7)
  819090:	20c00117 	ldw	r3,4(r4)
  819094:	38c00115 	stw	r3,4(r7)
  819098:	20800217 	ldw	r2,8(r4)
  81909c:	38800215 	stw	r2,8(r7)
  8190a0:	d8c00117 	ldw	r3,4(sp)
  8190a4:	bf0b883a 	add	r5,r23,fp
  8190a8:	b009883a 	mov	r4,r22
  8190ac:	1f05c83a 	sub	r2,r3,fp
  8190b0:	10800054 	ori	r2,r2,1
  8190b4:	28800115 	stw	r2,4(r5)
  8190b8:	b8c00117 	ldw	r3,4(r23)
  8190bc:	008020f4 	movhi	r2,131
  8190c0:	10a3eb04 	addi	r2,r2,-28756
  8190c4:	11400215 	stw	r5,8(r2)
  8190c8:	18c0004c 	andi	r3,r3,1
  8190cc:	e0c6b03a 	or	r3,fp,r3
  8190d0:	b8c00115 	stw	r3,4(r23)
  8190d4:	081b7440 	call	81b744 <__malloc_unlock>
  8190d8:	003eeb06 	br	818c88 <_realloc_r+0xd8>
  8190dc:	20800117 	ldw	r2,4(r4)
  8190e0:	00ffff04 	movi	r3,-4
  8190e4:	800f883a 	mov	r7,r16
  8190e8:	10c4703a 	and	r2,r2,r3
  8190ec:	98a9883a 	add	r20,r19,r2
  8190f0:	84000204 	addi	r16,r16,8
  8190f4:	003ecf06 	br	818c34 <_realloc_r+0x84>
  8190f8:	900b883a 	mov	r5,r18
  8190fc:	8009883a 	mov	r4,r16
  819100:	08178580 	call	817858 <memmove>
  819104:	dd000017 	ldw	r20,0(sp)
  819108:	b80f883a 	mov	r7,r23
  81910c:	003ec906 	br	818c34 <_realloc_r+0x84>
  819110:	900b883a 	mov	r5,r18
  819114:	8009883a 	mov	r4,r16
  819118:	08178580 	call	817858 <memmove>
  81911c:	b80f883a 	mov	r7,r23
  819120:	003ec406 	br	818c34 <_realloc_r+0x84>
  819124:	90c00417 	ldw	r3,16(r18)
  819128:	89400604 	addi	r5,r17,24
  81912c:	91000604 	addi	r4,r18,24
  819130:	88c00415 	stw	r3,16(r17)
  819134:	90800517 	ldw	r2,20(r18)
  819138:	88800515 	stw	r2,20(r17)
  81913c:	003f6806 	br	818ee0 <_realloc_r+0x330>
  819140:	900b883a 	mov	r5,r18
  819144:	8809883a 	mov	r4,r17
  819148:	08178580 	call	817858 <memmove>
  81914c:	003fd406 	br	8190a0 <_realloc_r+0x4f0>
  819150:	90c00417 	ldw	r3,16(r18)
  819154:	91000604 	addi	r4,r18,24
  819158:	ba000804 	addi	r8,r23,32
  81915c:	b8c00615 	stw	r3,24(r23)
  819160:	90800517 	ldw	r2,20(r18)
  819164:	b8800715 	stw	r2,28(r23)
  819168:	003f1206 	br	818db4 <_realloc_r+0x204>
  81916c:	90c00417 	ldw	r3,16(r18)
  819170:	91000604 	addi	r4,r18,24
  819174:	ba000804 	addi	r8,r23,32
  819178:	b8c00615 	stw	r3,24(r23)
  81917c:	90800517 	ldw	r2,20(r18)
  819180:	b8800715 	stw	r2,28(r23)
  819184:	003f3206 	br	818e50 <_realloc_r+0x2a0>
  819188:	90c00417 	ldw	r3,16(r18)
  81918c:	91000604 	addi	r4,r18,24
  819190:	b9c00804 	addi	r7,r23,32
  819194:	b8c00615 	stw	r3,24(r23)
  819198:	90800517 	ldw	r2,20(r18)
  81919c:	b8800715 	stw	r2,28(r23)
  8191a0:	003fb906 	br	819088 <_realloc_r+0x4d8>

008191a4 <__isinfd>:
  8191a4:	200d883a 	mov	r6,r4
  8191a8:	0109c83a 	sub	r4,zero,r4
  8191ac:	2188b03a 	or	r4,r4,r6
  8191b0:	2008d7fa 	srli	r4,r4,31
  8191b4:	00a00034 	movhi	r2,32768
  8191b8:	10bfffc4 	addi	r2,r2,-1
  8191bc:	1144703a 	and	r2,r2,r5
  8191c0:	2088b03a 	or	r4,r4,r2
  8191c4:	009ffc34 	movhi	r2,32752
  8191c8:	1105c83a 	sub	r2,r2,r4
  8191cc:	0087c83a 	sub	r3,zero,r2
  8191d0:	10c4b03a 	or	r2,r2,r3
  8191d4:	1004d7fa 	srli	r2,r2,31
  8191d8:	00c00044 	movi	r3,1
  8191dc:	1885c83a 	sub	r2,r3,r2
  8191e0:	f800283a 	ret

008191e4 <__sclose>:
  8191e4:	2940038f 	ldh	r5,14(r5)
  8191e8:	08196641 	jmpi	819664 <_close_r>

008191ec <__sseek>:
  8191ec:	defffe04 	addi	sp,sp,-8
  8191f0:	dc000015 	stw	r16,0(sp)
  8191f4:	2821883a 	mov	r16,r5
  8191f8:	2940038f 	ldh	r5,14(r5)
  8191fc:	dfc00115 	stw	ra,4(sp)
  819200:	08198dc0 	call	8198dc <_lseek_r>
  819204:	1007883a 	mov	r3,r2
  819208:	00bfffc4 	movi	r2,-1
  81920c:	18800926 	beq	r3,r2,819234 <__sseek+0x48>
  819210:	8080030b 	ldhu	r2,12(r16)
  819214:	80c01415 	stw	r3,80(r16)
  819218:	10840014 	ori	r2,r2,4096
  81921c:	8080030d 	sth	r2,12(r16)
  819220:	1805883a 	mov	r2,r3
  819224:	dfc00117 	ldw	ra,4(sp)
  819228:	dc000017 	ldw	r16,0(sp)
  81922c:	dec00204 	addi	sp,sp,8
  819230:	f800283a 	ret
  819234:	8080030b 	ldhu	r2,12(r16)
  819238:	10bbffcc 	andi	r2,r2,61439
  81923c:	8080030d 	sth	r2,12(r16)
  819240:	1805883a 	mov	r2,r3
  819244:	dfc00117 	ldw	ra,4(sp)
  819248:	dc000017 	ldw	r16,0(sp)
  81924c:	dec00204 	addi	sp,sp,8
  819250:	f800283a 	ret

00819254 <__swrite>:
  819254:	2880030b 	ldhu	r2,12(r5)
  819258:	defffb04 	addi	sp,sp,-20
  81925c:	dcc00315 	stw	r19,12(sp)
  819260:	1080400c 	andi	r2,r2,256
  819264:	dc800215 	stw	r18,8(sp)
  819268:	dc400115 	stw	r17,4(sp)
  81926c:	dc000015 	stw	r16,0(sp)
  819270:	3027883a 	mov	r19,r6
  819274:	3825883a 	mov	r18,r7
  819278:	dfc00415 	stw	ra,16(sp)
  81927c:	2821883a 	mov	r16,r5
  819280:	000d883a 	mov	r6,zero
  819284:	01c00084 	movi	r7,2
  819288:	2023883a 	mov	r17,r4
  81928c:	10000226 	beq	r2,zero,819298 <__swrite+0x44>
  819290:	2940038f 	ldh	r5,14(r5)
  819294:	08198dc0 	call	8198dc <_lseek_r>
  819298:	8080030b 	ldhu	r2,12(r16)
  81929c:	8140038f 	ldh	r5,14(r16)
  8192a0:	8809883a 	mov	r4,r17
  8192a4:	10bbffcc 	andi	r2,r2,61439
  8192a8:	980d883a 	mov	r6,r19
  8192ac:	900f883a 	mov	r7,r18
  8192b0:	8080030d 	sth	r2,12(r16)
  8192b4:	dfc00417 	ldw	ra,16(sp)
  8192b8:	dcc00317 	ldw	r19,12(sp)
  8192bc:	dc800217 	ldw	r18,8(sp)
  8192c0:	dc400117 	ldw	r17,4(sp)
  8192c4:	dc000017 	ldw	r16,0(sp)
  8192c8:	dec00504 	addi	sp,sp,20
  8192cc:	08195381 	jmpi	819538 <_write_r>

008192d0 <__sread>:
  8192d0:	defffe04 	addi	sp,sp,-8
  8192d4:	dc000015 	stw	r16,0(sp)
  8192d8:	2821883a 	mov	r16,r5
  8192dc:	2940038f 	ldh	r5,14(r5)
  8192e0:	dfc00115 	stw	ra,4(sp)
  8192e4:	08199540 	call	819954 <_read_r>
  8192e8:	1007883a 	mov	r3,r2
  8192ec:	10000816 	blt	r2,zero,819310 <__sread+0x40>
  8192f0:	80801417 	ldw	r2,80(r16)
  8192f4:	10c5883a 	add	r2,r2,r3
  8192f8:	80801415 	stw	r2,80(r16)
  8192fc:	1805883a 	mov	r2,r3
  819300:	dfc00117 	ldw	ra,4(sp)
  819304:	dc000017 	ldw	r16,0(sp)
  819308:	dec00204 	addi	sp,sp,8
  81930c:	f800283a 	ret
  819310:	8080030b 	ldhu	r2,12(r16)
  819314:	10bbffcc 	andi	r2,r2,61439
  819318:	8080030d 	sth	r2,12(r16)
  81931c:	1805883a 	mov	r2,r3
  819320:	dfc00117 	ldw	ra,4(sp)
  819324:	dc000017 	ldw	r16,0(sp)
  819328:	dec00204 	addi	sp,sp,8
  81932c:	f800283a 	ret

00819330 <strcmp>:
  819330:	2144b03a 	or	r2,r4,r5
  819334:	108000cc 	andi	r2,r2,3
  819338:	10001d1e 	bne	r2,zero,8193b0 <strcmp+0x80>
  81933c:	200f883a 	mov	r7,r4
  819340:	28800017 	ldw	r2,0(r5)
  819344:	21000017 	ldw	r4,0(r4)
  819348:	280d883a 	mov	r6,r5
  81934c:	2080161e 	bne	r4,r2,8193a8 <strcmp+0x78>
  819350:	023fbff4 	movhi	r8,65279
  819354:	423fbfc4 	addi	r8,r8,-257
  819358:	2207883a 	add	r3,r4,r8
  81935c:	01602074 	movhi	r5,32897
  819360:	29602004 	addi	r5,r5,-32640
  819364:	1946703a 	and	r3,r3,r5
  819368:	0104303a 	nor	r2,zero,r4
  81936c:	10c4703a 	and	r2,r2,r3
  819370:	10001c1e 	bne	r2,zero,8193e4 <strcmp+0xb4>
  819374:	4013883a 	mov	r9,r8
  819378:	2811883a 	mov	r8,r5
  81937c:	00000106 	br	819384 <strcmp+0x54>
  819380:	1800181e 	bne	r3,zero,8193e4 <strcmp+0xb4>
  819384:	39c00104 	addi	r7,r7,4
  819388:	39000017 	ldw	r4,0(r7)
  81938c:	31800104 	addi	r6,r6,4
  819390:	31400017 	ldw	r5,0(r6)
  819394:	2245883a 	add	r2,r4,r9
  819398:	1204703a 	and	r2,r2,r8
  81939c:	0106303a 	nor	r3,zero,r4
  8193a0:	1886703a 	and	r3,r3,r2
  8193a4:	217ff626 	beq	r4,r5,819380 <strcmp+0x50>
  8193a8:	3809883a 	mov	r4,r7
  8193ac:	300b883a 	mov	r5,r6
  8193b0:	20c00007 	ldb	r3,0(r4)
  8193b4:	1800051e 	bne	r3,zero,8193cc <strcmp+0x9c>
  8193b8:	00000606 	br	8193d4 <strcmp+0xa4>
  8193bc:	21000044 	addi	r4,r4,1
  8193c0:	20c00007 	ldb	r3,0(r4)
  8193c4:	29400044 	addi	r5,r5,1
  8193c8:	18000226 	beq	r3,zero,8193d4 <strcmp+0xa4>
  8193cc:	28800007 	ldb	r2,0(r5)
  8193d0:	18bffa26 	beq	r3,r2,8193bc <strcmp+0x8c>
  8193d4:	20c00003 	ldbu	r3,0(r4)
  8193d8:	28800003 	ldbu	r2,0(r5)
  8193dc:	1885c83a 	sub	r2,r3,r2
  8193e0:	f800283a 	ret
  8193e4:	0005883a 	mov	r2,zero
  8193e8:	f800283a 	ret

008193ec <__swbuf_r>:
  8193ec:	defffc04 	addi	sp,sp,-16
  8193f0:	dc400215 	stw	r17,8(sp)
  8193f4:	dc000115 	stw	r16,4(sp)
  8193f8:	dfc00315 	stw	ra,12(sp)
  8193fc:	2023883a 	mov	r17,r4
  819400:	2821883a 	mov	r16,r5
  819404:	20000226 	beq	r4,zero,819410 <__swbuf_r+0x24>
  819408:	20800e17 	ldw	r2,56(r4)
  81940c:	10002f26 	beq	r2,zero,8194cc <__swbuf_r+0xe0>
  819410:	3080030b 	ldhu	r2,12(r6)
  819414:	30c00617 	ldw	r3,24(r6)
  819418:	1080020c 	andi	r2,r2,8
  81941c:	30c00215 	stw	r3,8(r6)
  819420:	10002226 	beq	r2,zero,8194ac <__swbuf_r+0xc0>
  819424:	30c00417 	ldw	r3,16(r6)
  819428:	18002026 	beq	r3,zero,8194ac <__swbuf_r+0xc0>
  81942c:	31000017 	ldw	r4,0(r6)
  819430:	30800517 	ldw	r2,20(r6)
  819434:	20c7c83a 	sub	r3,r4,r3
  819438:	18802f0e 	bge	r3,r2,8194f8 <__swbuf_r+0x10c>
  81943c:	19400044 	addi	r5,r3,1
  819440:	30800217 	ldw	r2,8(r6)
  819444:	84003fcc 	andi	r16,r16,255
  819448:	20c00044 	addi	r3,r4,1
  81944c:	10bfffc4 	addi	r2,r2,-1
  819450:	30800215 	stw	r2,8(r6)
  819454:	24000005 	stb	r16,0(r4)
  819458:	30800517 	ldw	r2,20(r6)
  81945c:	30c00015 	stw	r3,0(r6)
  819460:	11400c26 	beq	r2,r5,819494 <__swbuf_r+0xa8>
  819464:	3080030b 	ldhu	r2,12(r6)
  819468:	1080004c 	andi	r2,r2,1
  81946c:	1005003a 	cmpeq	r2,r2,zero
  819470:	10000626 	beq	r2,zero,81948c <__swbuf_r+0xa0>
  819474:	8005883a 	mov	r2,r16
  819478:	dfc00317 	ldw	ra,12(sp)
  81947c:	dc400217 	ldw	r17,8(sp)
  819480:	dc000117 	ldw	r16,4(sp)
  819484:	dec00404 	addi	sp,sp,16
  819488:	f800283a 	ret
  81948c:	00800284 	movi	r2,10
  819490:	80bff81e 	bne	r16,r2,819474 <__swbuf_r+0x88>
  819494:	8809883a 	mov	r4,r17
  819498:	300b883a 	mov	r5,r6
  81949c:	08164840 	call	816484 <_fflush_r>
  8194a0:	103ff426 	beq	r2,zero,819474 <__swbuf_r+0x88>
  8194a4:	043fffc4 	movi	r16,-1
  8194a8:	003ff206 	br	819474 <__swbuf_r+0x88>
  8194ac:	300b883a 	mov	r5,r6
  8194b0:	8809883a 	mov	r4,r17
  8194b4:	d9800015 	stw	r6,0(sp)
  8194b8:	0814b7c0 	call	814b7c <__swsetup_r>
  8194bc:	d9800017 	ldw	r6,0(sp)
  8194c0:	1000061e 	bne	r2,zero,8194dc <__swbuf_r+0xf0>
  8194c4:	30c00417 	ldw	r3,16(r6)
  8194c8:	003fd806 	br	81942c <__swbuf_r+0x40>
  8194cc:	d9800015 	stw	r6,0(sp)
  8194d0:	081671c0 	call	81671c <__sinit>
  8194d4:	d9800017 	ldw	r6,0(sp)
  8194d8:	003fcd06 	br	819410 <__swbuf_r+0x24>
  8194dc:	3080030b 	ldhu	r2,12(r6)
  8194e0:	00c00244 	movi	r3,9
  8194e4:	043fffc4 	movi	r16,-1
  8194e8:	10801014 	ori	r2,r2,64
  8194ec:	3080030d 	sth	r2,12(r6)
  8194f0:	88c00015 	stw	r3,0(r17)
  8194f4:	003fdf06 	br	819474 <__swbuf_r+0x88>
  8194f8:	300b883a 	mov	r5,r6
  8194fc:	8809883a 	mov	r4,r17
  819500:	d9800015 	stw	r6,0(sp)
  819504:	08164840 	call	816484 <_fflush_r>
  819508:	d9800017 	ldw	r6,0(sp)
  81950c:	103fe51e 	bne	r2,zero,8194a4 <__swbuf_r+0xb8>
  819510:	31000017 	ldw	r4,0(r6)
  819514:	01400044 	movi	r5,1
  819518:	003fc906 	br	819440 <__swbuf_r+0x54>

0081951c <__swbuf>:
  81951c:	018020f4 	movhi	r6,131
  819520:	31a99904 	addi	r6,r6,-22940
  819524:	2007883a 	mov	r3,r4
  819528:	31000017 	ldw	r4,0(r6)
  81952c:	280d883a 	mov	r6,r5
  819530:	180b883a 	mov	r5,r3
  819534:	08193ec1 	jmpi	8193ec <__swbuf_r>

00819538 <_write_r>:
  819538:	defffd04 	addi	sp,sp,-12
  81953c:	dc000015 	stw	r16,0(sp)
  819540:	040020f4 	movhi	r16,131
  819544:	8429d104 	addi	r16,r16,-22716
  819548:	dc400115 	stw	r17,4(sp)
  81954c:	80000015 	stw	zero,0(r16)
  819550:	2023883a 	mov	r17,r4
  819554:	2809883a 	mov	r4,r5
  819558:	300b883a 	mov	r5,r6
  81955c:	380d883a 	mov	r6,r7
  819560:	dfc00215 	stw	ra,8(sp)
  819564:	081b3b40 	call	81b3b4 <write>
  819568:	1007883a 	mov	r3,r2
  81956c:	00bfffc4 	movi	r2,-1
  819570:	18800626 	beq	r3,r2,81958c <_write_r+0x54>
  819574:	1805883a 	mov	r2,r3
  819578:	dfc00217 	ldw	ra,8(sp)
  81957c:	dc400117 	ldw	r17,4(sp)
  819580:	dc000017 	ldw	r16,0(sp)
  819584:	dec00304 	addi	sp,sp,12
  819588:	f800283a 	ret
  81958c:	80800017 	ldw	r2,0(r16)
  819590:	103ff826 	beq	r2,zero,819574 <_write_r+0x3c>
  819594:	88800015 	stw	r2,0(r17)
  819598:	1805883a 	mov	r2,r3
  81959c:	dfc00217 	ldw	ra,8(sp)
  8195a0:	dc400117 	ldw	r17,4(sp)
  8195a4:	dc000017 	ldw	r16,0(sp)
  8195a8:	dec00304 	addi	sp,sp,12
  8195ac:	f800283a 	ret

008195b0 <_calloc_r>:
  8195b0:	298b383a 	mul	r5,r5,r6
  8195b4:	defffe04 	addi	sp,sp,-8
  8195b8:	dc000015 	stw	r16,0(sp)
  8195bc:	dfc00115 	stw	ra,4(sp)
  8195c0:	0811b440 	call	811b44 <_malloc_r>
  8195c4:	1021883a 	mov	r16,r2
  8195c8:	01c00904 	movi	r7,36
  8195cc:	10000d26 	beq	r2,zero,819604 <_calloc_r+0x54>
  8195d0:	10ffff17 	ldw	r3,-4(r2)
  8195d4:	1009883a 	mov	r4,r2
  8195d8:	00bfff04 	movi	r2,-4
  8195dc:	1886703a 	and	r3,r3,r2
  8195e0:	1887883a 	add	r3,r3,r2
  8195e4:	180d883a 	mov	r6,r3
  8195e8:	000b883a 	mov	r5,zero
  8195ec:	38c01736 	bltu	r7,r3,81964c <_calloc_r+0x9c>
  8195f0:	008004c4 	movi	r2,19
  8195f4:	10c00836 	bltu	r2,r3,819618 <_calloc_r+0x68>
  8195f8:	20000215 	stw	zero,8(r4)
  8195fc:	20000015 	stw	zero,0(r4)
  819600:	20000115 	stw	zero,4(r4)
  819604:	8005883a 	mov	r2,r16
  819608:	dfc00117 	ldw	ra,4(sp)
  81960c:	dc000017 	ldw	r16,0(sp)
  819610:	dec00204 	addi	sp,sp,8
  819614:	f800283a 	ret
  819618:	008006c4 	movi	r2,27
  81961c:	80000015 	stw	zero,0(r16)
  819620:	80000115 	stw	zero,4(r16)
  819624:	81000204 	addi	r4,r16,8
  819628:	10fff32e 	bgeu	r2,r3,8195f8 <_calloc_r+0x48>
  81962c:	80000215 	stw	zero,8(r16)
  819630:	80000315 	stw	zero,12(r16)
  819634:	81000404 	addi	r4,r16,16
  819638:	19ffef1e 	bne	r3,r7,8195f8 <_calloc_r+0x48>
  81963c:	81000604 	addi	r4,r16,24
  819640:	80000415 	stw	zero,16(r16)
  819644:	80000515 	stw	zero,20(r16)
  819648:	003feb06 	br	8195f8 <_calloc_r+0x48>
  81964c:	08179380 	call	817938 <memset>
  819650:	8005883a 	mov	r2,r16
  819654:	dfc00117 	ldw	ra,4(sp)
  819658:	dc000017 	ldw	r16,0(sp)
  81965c:	dec00204 	addi	sp,sp,8
  819660:	f800283a 	ret

00819664 <_close_r>:
  819664:	defffd04 	addi	sp,sp,-12
  819668:	dc000015 	stw	r16,0(sp)
  81966c:	040020f4 	movhi	r16,131
  819670:	8429d104 	addi	r16,r16,-22716
  819674:	dc400115 	stw	r17,4(sp)
  819678:	80000015 	stw	zero,0(r16)
  81967c:	2023883a 	mov	r17,r4
  819680:	2809883a 	mov	r4,r5
  819684:	dfc00215 	stw	ra,8(sp)
  819688:	081a84c0 	call	81a84c <close>
  81968c:	1007883a 	mov	r3,r2
  819690:	00bfffc4 	movi	r2,-1
  819694:	18800626 	beq	r3,r2,8196b0 <_close_r+0x4c>
  819698:	1805883a 	mov	r2,r3
  81969c:	dfc00217 	ldw	ra,8(sp)
  8196a0:	dc400117 	ldw	r17,4(sp)
  8196a4:	dc000017 	ldw	r16,0(sp)
  8196a8:	dec00304 	addi	sp,sp,12
  8196ac:	f800283a 	ret
  8196b0:	80800017 	ldw	r2,0(r16)
  8196b4:	103ff826 	beq	r2,zero,819698 <_close_r+0x34>
  8196b8:	88800015 	stw	r2,0(r17)
  8196bc:	1805883a 	mov	r2,r3
  8196c0:	dfc00217 	ldw	ra,8(sp)
  8196c4:	dc400117 	ldw	r17,4(sp)
  8196c8:	dc000017 	ldw	r16,0(sp)
  8196cc:	dec00304 	addi	sp,sp,12
  8196d0:	f800283a 	ret

008196d4 <_fclose_r>:
  8196d4:	defffc04 	addi	sp,sp,-16
  8196d8:	dc400115 	stw	r17,4(sp)
  8196dc:	dc000015 	stw	r16,0(sp)
  8196e0:	dfc00315 	stw	ra,12(sp)
  8196e4:	dc800215 	stw	r18,8(sp)
  8196e8:	2821883a 	mov	r16,r5
  8196ec:	2023883a 	mov	r17,r4
  8196f0:	28002926 	beq	r5,zero,819798 <_fclose_r+0xc4>
  8196f4:	081670c0 	call	81670c <__sfp_lock_acquire>
  8196f8:	88000226 	beq	r17,zero,819704 <_fclose_r+0x30>
  8196fc:	88800e17 	ldw	r2,56(r17)
  819700:	10002d26 	beq	r2,zero,8197b8 <_fclose_r+0xe4>
  819704:	8080030f 	ldh	r2,12(r16)
  819708:	10002226 	beq	r2,zero,819794 <_fclose_r+0xc0>
  81970c:	8809883a 	mov	r4,r17
  819710:	800b883a 	mov	r5,r16
  819714:	08164840 	call	816484 <_fflush_r>
  819718:	1025883a 	mov	r18,r2
  81971c:	80800b17 	ldw	r2,44(r16)
  819720:	10000426 	beq	r2,zero,819734 <_fclose_r+0x60>
  819724:	81400717 	ldw	r5,28(r16)
  819728:	8809883a 	mov	r4,r17
  81972c:	103ee83a 	callr	r2
  819730:	10002a16 	blt	r2,zero,8197dc <_fclose_r+0x108>
  819734:	8080030b 	ldhu	r2,12(r16)
  819738:	1080200c 	andi	r2,r2,128
  81973c:	1000231e 	bne	r2,zero,8197cc <_fclose_r+0xf8>
  819740:	81400c17 	ldw	r5,48(r16)
  819744:	28000526 	beq	r5,zero,81975c <_fclose_r+0x88>
  819748:	80801004 	addi	r2,r16,64
  81974c:	28800226 	beq	r5,r2,819758 <_fclose_r+0x84>
  819750:	8809883a 	mov	r4,r17
  819754:	0816bec0 	call	816bec <_free_r>
  819758:	80000c15 	stw	zero,48(r16)
  81975c:	81401117 	ldw	r5,68(r16)
  819760:	28000326 	beq	r5,zero,819770 <_fclose_r+0x9c>
  819764:	8809883a 	mov	r4,r17
  819768:	0816bec0 	call	816bec <_free_r>
  81976c:	80001115 	stw	zero,68(r16)
  819770:	8000030d 	sth	zero,12(r16)
  819774:	08167100 	call	816710 <__sfp_lock_release>
  819778:	9005883a 	mov	r2,r18
  81977c:	dfc00317 	ldw	ra,12(sp)
  819780:	dc800217 	ldw	r18,8(sp)
  819784:	dc400117 	ldw	r17,4(sp)
  819788:	dc000017 	ldw	r16,0(sp)
  81978c:	dec00404 	addi	sp,sp,16
  819790:	f800283a 	ret
  819794:	08167100 	call	816710 <__sfp_lock_release>
  819798:	0025883a 	mov	r18,zero
  81979c:	9005883a 	mov	r2,r18
  8197a0:	dfc00317 	ldw	ra,12(sp)
  8197a4:	dc800217 	ldw	r18,8(sp)
  8197a8:	dc400117 	ldw	r17,4(sp)
  8197ac:	dc000017 	ldw	r16,0(sp)
  8197b0:	dec00404 	addi	sp,sp,16
  8197b4:	f800283a 	ret
  8197b8:	8809883a 	mov	r4,r17
  8197bc:	081671c0 	call	81671c <__sinit>
  8197c0:	8080030f 	ldh	r2,12(r16)
  8197c4:	103fd11e 	bne	r2,zero,81970c <_fclose_r+0x38>
  8197c8:	003ff206 	br	819794 <_fclose_r+0xc0>
  8197cc:	81400417 	ldw	r5,16(r16)
  8197d0:	8809883a 	mov	r4,r17
  8197d4:	0816bec0 	call	816bec <_free_r>
  8197d8:	003fd906 	br	819740 <_fclose_r+0x6c>
  8197dc:	04bfffc4 	movi	r18,-1
  8197e0:	003fd406 	br	819734 <_fclose_r+0x60>

008197e4 <fclose>:
  8197e4:	008020f4 	movhi	r2,131
  8197e8:	10a99904 	addi	r2,r2,-22940
  8197ec:	200b883a 	mov	r5,r4
  8197f0:	11000017 	ldw	r4,0(r2)
  8197f4:	08196d41 	jmpi	8196d4 <_fclose_r>

008197f8 <_fstat_r>:
  8197f8:	defffd04 	addi	sp,sp,-12
  8197fc:	dc000015 	stw	r16,0(sp)
  819800:	040020f4 	movhi	r16,131
  819804:	8429d104 	addi	r16,r16,-22716
  819808:	dc400115 	stw	r17,4(sp)
  81980c:	80000015 	stw	zero,0(r16)
  819810:	2023883a 	mov	r17,r4
  819814:	2809883a 	mov	r4,r5
  819818:	300b883a 	mov	r5,r6
  81981c:	dfc00215 	stw	ra,8(sp)
  819820:	081a9d40 	call	81a9d4 <fstat>
  819824:	1007883a 	mov	r3,r2
  819828:	00bfffc4 	movi	r2,-1
  81982c:	18800626 	beq	r3,r2,819848 <_fstat_r+0x50>
  819830:	1805883a 	mov	r2,r3
  819834:	dfc00217 	ldw	ra,8(sp)
  819838:	dc400117 	ldw	r17,4(sp)
  81983c:	dc000017 	ldw	r16,0(sp)
  819840:	dec00304 	addi	sp,sp,12
  819844:	f800283a 	ret
  819848:	80800017 	ldw	r2,0(r16)
  81984c:	103ff826 	beq	r2,zero,819830 <_fstat_r+0x38>
  819850:	88800015 	stw	r2,0(r17)
  819854:	1805883a 	mov	r2,r3
  819858:	dfc00217 	ldw	ra,8(sp)
  81985c:	dc400117 	ldw	r17,4(sp)
  819860:	dc000017 	ldw	r16,0(sp)
  819864:	dec00304 	addi	sp,sp,12
  819868:	f800283a 	ret

0081986c <_isatty_r>:
  81986c:	defffd04 	addi	sp,sp,-12
  819870:	dc000015 	stw	r16,0(sp)
  819874:	040020f4 	movhi	r16,131
  819878:	8429d104 	addi	r16,r16,-22716
  81987c:	dc400115 	stw	r17,4(sp)
  819880:	80000015 	stw	zero,0(r16)
  819884:	2023883a 	mov	r17,r4
  819888:	2809883a 	mov	r4,r5
  81988c:	dfc00215 	stw	ra,8(sp)
  819890:	081acc80 	call	81acc8 <isatty>
  819894:	1007883a 	mov	r3,r2
  819898:	00bfffc4 	movi	r2,-1
  81989c:	18800626 	beq	r3,r2,8198b8 <_isatty_r+0x4c>
  8198a0:	1805883a 	mov	r2,r3
  8198a4:	dfc00217 	ldw	ra,8(sp)
  8198a8:	dc400117 	ldw	r17,4(sp)
  8198ac:	dc000017 	ldw	r16,0(sp)
  8198b0:	dec00304 	addi	sp,sp,12
  8198b4:	f800283a 	ret
  8198b8:	80800017 	ldw	r2,0(r16)
  8198bc:	103ff826 	beq	r2,zero,8198a0 <_isatty_r+0x34>
  8198c0:	88800015 	stw	r2,0(r17)
  8198c4:	1805883a 	mov	r2,r3
  8198c8:	dfc00217 	ldw	ra,8(sp)
  8198cc:	dc400117 	ldw	r17,4(sp)
  8198d0:	dc000017 	ldw	r16,0(sp)
  8198d4:	dec00304 	addi	sp,sp,12
  8198d8:	f800283a 	ret

008198dc <_lseek_r>:
  8198dc:	defffd04 	addi	sp,sp,-12
  8198e0:	dc000015 	stw	r16,0(sp)
  8198e4:	040020f4 	movhi	r16,131
  8198e8:	8429d104 	addi	r16,r16,-22716
  8198ec:	dc400115 	stw	r17,4(sp)
  8198f0:	80000015 	stw	zero,0(r16)
  8198f4:	2023883a 	mov	r17,r4
  8198f8:	2809883a 	mov	r4,r5
  8198fc:	300b883a 	mov	r5,r6
  819900:	380d883a 	mov	r6,r7
  819904:	dfc00215 	stw	ra,8(sp)
  819908:	081ade80 	call	81ade8 <lseek>
  81990c:	1007883a 	mov	r3,r2
  819910:	00bfffc4 	movi	r2,-1
  819914:	18800626 	beq	r3,r2,819930 <_lseek_r+0x54>
  819918:	1805883a 	mov	r2,r3
  81991c:	dfc00217 	ldw	ra,8(sp)
  819920:	dc400117 	ldw	r17,4(sp)
  819924:	dc000017 	ldw	r16,0(sp)
  819928:	dec00304 	addi	sp,sp,12
  81992c:	f800283a 	ret
  819930:	80800017 	ldw	r2,0(r16)
  819934:	103ff826 	beq	r2,zero,819918 <_lseek_r+0x3c>
  819938:	88800015 	stw	r2,0(r17)
  81993c:	1805883a 	mov	r2,r3
  819940:	dfc00217 	ldw	ra,8(sp)
  819944:	dc400117 	ldw	r17,4(sp)
  819948:	dc000017 	ldw	r16,0(sp)
  81994c:	dec00304 	addi	sp,sp,12
  819950:	f800283a 	ret

00819954 <_read_r>:
  819954:	defffd04 	addi	sp,sp,-12
  819958:	dc000015 	stw	r16,0(sp)
  81995c:	040020f4 	movhi	r16,131
  819960:	8429d104 	addi	r16,r16,-22716
  819964:	dc400115 	stw	r17,4(sp)
  819968:	80000015 	stw	zero,0(r16)
  81996c:	2023883a 	mov	r17,r4
  819970:	2809883a 	mov	r4,r5
  819974:	300b883a 	mov	r5,r6
  819978:	380d883a 	mov	r6,r7
  81997c:	dfc00215 	stw	ra,8(sp)
  819980:	081b0000 	call	81b000 <read>
  819984:	1007883a 	mov	r3,r2
  819988:	00bfffc4 	movi	r2,-1
  81998c:	18800626 	beq	r3,r2,8199a8 <_read_r+0x54>
  819990:	1805883a 	mov	r2,r3
  819994:	dfc00217 	ldw	ra,8(sp)
  819998:	dc400117 	ldw	r17,4(sp)
  81999c:	dc000017 	ldw	r16,0(sp)
  8199a0:	dec00304 	addi	sp,sp,12
  8199a4:	f800283a 	ret
  8199a8:	80800017 	ldw	r2,0(r16)
  8199ac:	103ff826 	beq	r2,zero,819990 <_read_r+0x3c>
  8199b0:	88800015 	stw	r2,0(r17)
  8199b4:	1805883a 	mov	r2,r3
  8199b8:	dfc00217 	ldw	ra,8(sp)
  8199bc:	dc400117 	ldw	r17,4(sp)
  8199c0:	dc000017 	ldw	r16,0(sp)
  8199c4:	dec00304 	addi	sp,sp,12
  8199c8:	f800283a 	ret

008199cc <__udivdi3>:
  8199cc:	defff004 	addi	sp,sp,-64
  8199d0:	2005883a 	mov	r2,r4
  8199d4:	3011883a 	mov	r8,r6
  8199d8:	df000e15 	stw	fp,56(sp)
  8199dc:	dd000a15 	stw	r20,40(sp)
  8199e0:	dc000615 	stw	r16,24(sp)
  8199e4:	dfc00f15 	stw	ra,60(sp)
  8199e8:	ddc00d15 	stw	r23,52(sp)
  8199ec:	dd800c15 	stw	r22,48(sp)
  8199f0:	dd400b15 	stw	r21,44(sp)
  8199f4:	dcc00915 	stw	r19,36(sp)
  8199f8:	dc800815 	stw	r18,32(sp)
  8199fc:	dc400715 	stw	r17,28(sp)
  819a00:	4021883a 	mov	r16,r8
  819a04:	1039883a 	mov	fp,r2
  819a08:	2829883a 	mov	r20,r5
  819a0c:	38003b1e 	bne	r7,zero,819afc <__udivdi3+0x130>
  819a10:	2a005c36 	bltu	r5,r8,819b84 <__udivdi3+0x1b8>
  819a14:	4000a626 	beq	r8,zero,819cb0 <__udivdi3+0x2e4>
  819a18:	00bfffd4 	movui	r2,65535
  819a1c:	14009e36 	bltu	r2,r16,819c98 <__udivdi3+0x2cc>
  819a20:	00803fc4 	movi	r2,255
  819a24:	14013d36 	bltu	r2,r16,819f1c <__udivdi3+0x550>
  819a28:	000b883a 	mov	r5,zero
  819a2c:	0005883a 	mov	r2,zero
  819a30:	8084d83a 	srl	r2,r16,r2
  819a34:	010020b4 	movhi	r4,130
  819a38:	211fd704 	addi	r4,r4,32604
  819a3c:	01800804 	movi	r6,32
  819a40:	1105883a 	add	r2,r2,r4
  819a44:	10c00003 	ldbu	r3,0(r2)
  819a48:	28c7883a 	add	r3,r5,r3
  819a4c:	30edc83a 	sub	r22,r6,r3
  819a50:	b000ee1e 	bne	r22,zero,819e0c <__udivdi3+0x440>
  819a54:	802ad43a 	srli	r21,r16,16
  819a58:	00800044 	movi	r2,1
  819a5c:	a423c83a 	sub	r17,r20,r16
  819a60:	85ffffcc 	andi	r23,r16,65535
  819a64:	d8800315 	stw	r2,12(sp)
  819a68:	8809883a 	mov	r4,r17
  819a6c:	a80b883a 	mov	r5,r21
  819a70:	08111d40 	call	8111d4 <__udivsi3>
  819a74:	8809883a 	mov	r4,r17
  819a78:	a80b883a 	mov	r5,r21
  819a7c:	102d883a 	mov	r22,r2
  819a80:	08111dc0 	call	8111dc <__umodsi3>
  819a84:	1004943a 	slli	r2,r2,16
  819a88:	e006d43a 	srli	r3,fp,16
  819a8c:	bda3383a 	mul	r17,r23,r22
  819a90:	10c4b03a 	or	r2,r2,r3
  819a94:	1440042e 	bgeu	r2,r17,819aa8 <__udivdi3+0xdc>
  819a98:	1405883a 	add	r2,r2,r16
  819a9c:	b5bfffc4 	addi	r22,r22,-1
  819aa0:	14000136 	bltu	r2,r16,819aa8 <__udivdi3+0xdc>
  819aa4:	14413d36 	bltu	r2,r17,819f9c <__udivdi3+0x5d0>
  819aa8:	1463c83a 	sub	r17,r2,r17
  819aac:	8809883a 	mov	r4,r17
  819ab0:	a80b883a 	mov	r5,r21
  819ab4:	08111d40 	call	8111d4 <__udivsi3>
  819ab8:	8809883a 	mov	r4,r17
  819abc:	a80b883a 	mov	r5,r21
  819ac0:	1029883a 	mov	r20,r2
  819ac4:	08111dc0 	call	8111dc <__umodsi3>
  819ac8:	1004943a 	slli	r2,r2,16
  819acc:	bd09383a 	mul	r4,r23,r20
  819ad0:	e0ffffcc 	andi	r3,fp,65535
  819ad4:	10c4b03a 	or	r2,r2,r3
  819ad8:	1100042e 	bgeu	r2,r4,819aec <__udivdi3+0x120>
  819adc:	8085883a 	add	r2,r16,r2
  819ae0:	a53fffc4 	addi	r20,r20,-1
  819ae4:	14000136 	bltu	r2,r16,819aec <__udivdi3+0x120>
  819ae8:	11012036 	bltu	r2,r4,819f6c <__udivdi3+0x5a0>
  819aec:	b004943a 	slli	r2,r22,16
  819af0:	d9000317 	ldw	r4,12(sp)
  819af4:	a084b03a 	or	r2,r20,r2
  819af8:	00001506 	br	819b50 <__udivdi3+0x184>
  819afc:	380d883a 	mov	r6,r7
  819b00:	29c06236 	bltu	r5,r7,819c8c <__udivdi3+0x2c0>
  819b04:	00bfffd4 	movui	r2,65535
  819b08:	11c05a36 	bltu	r2,r7,819c74 <__udivdi3+0x2a8>
  819b0c:	00803fc4 	movi	r2,255
  819b10:	11c0fc36 	bltu	r2,r7,819f04 <__udivdi3+0x538>
  819b14:	000b883a 	mov	r5,zero
  819b18:	0005883a 	mov	r2,zero
  819b1c:	3084d83a 	srl	r2,r6,r2
  819b20:	010020b4 	movhi	r4,130
  819b24:	211fd704 	addi	r4,r4,32604
  819b28:	01c00804 	movi	r7,32
  819b2c:	1105883a 	add	r2,r2,r4
  819b30:	10c00003 	ldbu	r3,0(r2)
  819b34:	28c7883a 	add	r3,r5,r3
  819b38:	38efc83a 	sub	r23,r7,r3
  819b3c:	b800691e 	bne	r23,zero,819ce4 <__udivdi3+0x318>
  819b40:	35000136 	bltu	r6,r20,819b48 <__udivdi3+0x17c>
  819b44:	e4005136 	bltu	fp,r16,819c8c <__udivdi3+0x2c0>
  819b48:	00800044 	movi	r2,1
  819b4c:	0009883a 	mov	r4,zero
  819b50:	2007883a 	mov	r3,r4
  819b54:	dfc00f17 	ldw	ra,60(sp)
  819b58:	df000e17 	ldw	fp,56(sp)
  819b5c:	ddc00d17 	ldw	r23,52(sp)
  819b60:	dd800c17 	ldw	r22,48(sp)
  819b64:	dd400b17 	ldw	r21,44(sp)
  819b68:	dd000a17 	ldw	r20,40(sp)
  819b6c:	dcc00917 	ldw	r19,36(sp)
  819b70:	dc800817 	ldw	r18,32(sp)
  819b74:	dc400717 	ldw	r17,28(sp)
  819b78:	dc000617 	ldw	r16,24(sp)
  819b7c:	dec01004 	addi	sp,sp,64
  819b80:	f800283a 	ret
  819b84:	00bfffd4 	movui	r2,65535
  819b88:	12005036 	bltu	r2,r8,819ccc <__udivdi3+0x300>
  819b8c:	00803fc4 	movi	r2,255
  819b90:	1200e836 	bltu	r2,r8,819f34 <__udivdi3+0x568>
  819b94:	000b883a 	mov	r5,zero
  819b98:	0005883a 	mov	r2,zero
  819b9c:	8084d83a 	srl	r2,r16,r2
  819ba0:	010020b4 	movhi	r4,130
  819ba4:	211fd704 	addi	r4,r4,32604
  819ba8:	01800804 	movi	r6,32
  819bac:	1105883a 	add	r2,r2,r4
  819bb0:	10c00003 	ldbu	r3,0(r2)
  819bb4:	28c7883a 	add	r3,r5,r3
  819bb8:	30cbc83a 	sub	r5,r6,r3
  819bbc:	28000626 	beq	r5,zero,819bd8 <__udivdi3+0x20c>
  819bc0:	3145c83a 	sub	r2,r6,r5
  819bc4:	e084d83a 	srl	r2,fp,r2
  819bc8:	a146983a 	sll	r3,r20,r5
  819bcc:	e178983a 	sll	fp,fp,r5
  819bd0:	8160983a 	sll	r16,r16,r5
  819bd4:	18a8b03a 	or	r20,r3,r2
  819bd8:	802ad43a 	srli	r21,r16,16
  819bdc:	a009883a 	mov	r4,r20
  819be0:	85ffffcc 	andi	r23,r16,65535
  819be4:	a80b883a 	mov	r5,r21
  819be8:	08111d40 	call	8111d4 <__udivsi3>
  819bec:	a009883a 	mov	r4,r20
  819bf0:	a80b883a 	mov	r5,r21
  819bf4:	102d883a 	mov	r22,r2
  819bf8:	08111dc0 	call	8111dc <__umodsi3>
  819bfc:	1004943a 	slli	r2,r2,16
  819c00:	e006d43a 	srli	r3,fp,16
  819c04:	bda3383a 	mul	r17,r23,r22
  819c08:	10c4b03a 	or	r2,r2,r3
  819c0c:	1440042e 	bgeu	r2,r17,819c20 <__udivdi3+0x254>
  819c10:	1405883a 	add	r2,r2,r16
  819c14:	b5bfffc4 	addi	r22,r22,-1
  819c18:	14000136 	bltu	r2,r16,819c20 <__udivdi3+0x254>
  819c1c:	1440d536 	bltu	r2,r17,819f74 <__udivdi3+0x5a8>
  819c20:	1463c83a 	sub	r17,r2,r17
  819c24:	8809883a 	mov	r4,r17
  819c28:	a80b883a 	mov	r5,r21
  819c2c:	08111d40 	call	8111d4 <__udivsi3>
  819c30:	8809883a 	mov	r4,r17
  819c34:	a80b883a 	mov	r5,r21
  819c38:	1029883a 	mov	r20,r2
  819c3c:	08111dc0 	call	8111dc <__umodsi3>
  819c40:	1004943a 	slli	r2,r2,16
  819c44:	bd09383a 	mul	r4,r23,r20
  819c48:	e0ffffcc 	andi	r3,fp,65535
  819c4c:	10c4b03a 	or	r2,r2,r3
  819c50:	1100042e 	bgeu	r2,r4,819c64 <__udivdi3+0x298>
  819c54:	8085883a 	add	r2,r16,r2
  819c58:	a53fffc4 	addi	r20,r20,-1
  819c5c:	14000136 	bltu	r2,r16,819c64 <__udivdi3+0x298>
  819c60:	1100c736 	bltu	r2,r4,819f80 <__udivdi3+0x5b4>
  819c64:	b004943a 	slli	r2,r22,16
  819c68:	0009883a 	mov	r4,zero
  819c6c:	a084b03a 	or	r2,r20,r2
  819c70:	003fb706 	br	819b50 <__udivdi3+0x184>
  819c74:	00804034 	movhi	r2,256
  819c78:	10bfffc4 	addi	r2,r2,-1
  819c7c:	11c0a436 	bltu	r2,r7,819f10 <__udivdi3+0x544>
  819c80:	01400404 	movi	r5,16
  819c84:	2805883a 	mov	r2,r5
  819c88:	003fa406 	br	819b1c <__udivdi3+0x150>
  819c8c:	0005883a 	mov	r2,zero
  819c90:	0009883a 	mov	r4,zero
  819c94:	003fae06 	br	819b50 <__udivdi3+0x184>
  819c98:	00804034 	movhi	r2,256
  819c9c:	10bfffc4 	addi	r2,r2,-1
  819ca0:	1400a136 	bltu	r2,r16,819f28 <__udivdi3+0x55c>
  819ca4:	01400404 	movi	r5,16
  819ca8:	2805883a 	mov	r2,r5
  819cac:	003f6006 	br	819a30 <__udivdi3+0x64>
  819cb0:	01000044 	movi	r4,1
  819cb4:	000b883a 	mov	r5,zero
  819cb8:	08111d40 	call	8111d4 <__udivsi3>
  819cbc:	1021883a 	mov	r16,r2
  819cc0:	00bfffd4 	movui	r2,65535
  819cc4:	143ff436 	bltu	r2,r16,819c98 <__udivdi3+0x2cc>
  819cc8:	003f5506 	br	819a20 <__udivdi3+0x54>
  819ccc:	00804034 	movhi	r2,256
  819cd0:	10bfffc4 	addi	r2,r2,-1
  819cd4:	12009a36 	bltu	r2,r8,819f40 <__udivdi3+0x574>
  819cd8:	01400404 	movi	r5,16
  819cdc:	2805883a 	mov	r2,r5
  819ce0:	003fae06 	br	819b9c <__udivdi3+0x1d0>
  819ce4:	3dc5c83a 	sub	r2,r7,r23
  819ce8:	35c8983a 	sll	r4,r6,r23
  819cec:	8086d83a 	srl	r3,r16,r2
  819cf0:	a0a2d83a 	srl	r17,r20,r2
  819cf4:	e084d83a 	srl	r2,fp,r2
  819cf8:	20eab03a 	or	r21,r4,r3
  819cfc:	a82cd43a 	srli	r22,r21,16
  819d00:	a5c6983a 	sll	r3,r20,r23
  819d04:	8809883a 	mov	r4,r17
  819d08:	b00b883a 	mov	r5,r22
  819d0c:	1886b03a 	or	r3,r3,r2
  819d10:	d8c00215 	stw	r3,8(sp)
  819d14:	08111d40 	call	8111d4 <__udivsi3>
  819d18:	8809883a 	mov	r4,r17
  819d1c:	b00b883a 	mov	r5,r22
  819d20:	1029883a 	mov	r20,r2
  819d24:	08111dc0 	call	8111dc <__umodsi3>
  819d28:	a8ffffcc 	andi	r3,r21,65535
  819d2c:	d8c00515 	stw	r3,20(sp)
  819d30:	d9000217 	ldw	r4,8(sp)
  819d34:	d9400517 	ldw	r5,20(sp)
  819d38:	1004943a 	slli	r2,r2,16
  819d3c:	2006d43a 	srli	r3,r4,16
  819d40:	85e0983a 	sll	r16,r16,r23
  819d44:	2d23383a 	mul	r17,r5,r20
  819d48:	10c4b03a 	or	r2,r2,r3
  819d4c:	dc000015 	stw	r16,0(sp)
  819d50:	1440032e 	bgeu	r2,r17,819d60 <__udivdi3+0x394>
  819d54:	1545883a 	add	r2,r2,r21
  819d58:	a53fffc4 	addi	r20,r20,-1
  819d5c:	15407f2e 	bgeu	r2,r21,819f5c <__udivdi3+0x590>
  819d60:	1463c83a 	sub	r17,r2,r17
  819d64:	8809883a 	mov	r4,r17
  819d68:	b00b883a 	mov	r5,r22
  819d6c:	08111d40 	call	8111d4 <__udivsi3>
  819d70:	8809883a 	mov	r4,r17
  819d74:	b00b883a 	mov	r5,r22
  819d78:	1021883a 	mov	r16,r2
  819d7c:	08111dc0 	call	8111dc <__umodsi3>
  819d80:	d8c00517 	ldw	r3,20(sp)
  819d84:	d9000217 	ldw	r4,8(sp)
  819d88:	1004943a 	slli	r2,r2,16
  819d8c:	1c0f383a 	mul	r7,r3,r16
  819d90:	20ffffcc 	andi	r3,r4,65535
  819d94:	10e2b03a 	or	r17,r2,r3
  819d98:	89c0032e 	bgeu	r17,r7,819da8 <__udivdi3+0x3dc>
  819d9c:	8d63883a 	add	r17,r17,r21
  819da0:	843fffc4 	addi	r16,r16,-1
  819da4:	8d40692e 	bgeu	r17,r21,819f4c <__udivdi3+0x580>
  819da8:	a008943a 	slli	r4,r20,16
  819dac:	d9400017 	ldw	r5,0(sp)
  819db0:	89e3c83a 	sub	r17,r17,r7
  819db4:	8110b03a 	or	r8,r16,r4
  819db8:	280cd43a 	srli	r6,r5,16
  819dbc:	28ffffcc 	andi	r3,r5,65535
  819dc0:	40bfffcc 	andi	r2,r8,65535
  819dc4:	400ad43a 	srli	r5,r8,16
  819dc8:	10d3383a 	mul	r9,r2,r3
  819dcc:	1185383a 	mul	r2,r2,r6
  819dd0:	28c7383a 	mul	r3,r5,r3
  819dd4:	4808d43a 	srli	r4,r9,16
  819dd8:	298b383a 	mul	r5,r5,r6
  819ddc:	10c5883a 	add	r2,r2,r3
  819de0:	2089883a 	add	r4,r4,r2
  819de4:	20c0022e 	bgeu	r4,r3,819df0 <__udivdi3+0x424>
  819de8:	00800074 	movhi	r2,1
  819dec:	288b883a 	add	r5,r5,r2
  819df0:	2004d43a 	srli	r2,r4,16
  819df4:	288b883a 	add	r5,r5,r2
  819df8:	89403f36 	bltu	r17,r5,819ef8 <__udivdi3+0x52c>
  819dfc:	89403926 	beq	r17,r5,819ee4 <__udivdi3+0x518>
  819e00:	4005883a 	mov	r2,r8
  819e04:	0009883a 	mov	r4,zero
  819e08:	003f5106 	br	819b50 <__udivdi3+0x184>
  819e0c:	85a0983a 	sll	r16,r16,r22
  819e10:	3585c83a 	sub	r2,r6,r22
  819e14:	a0a2d83a 	srl	r17,r20,r2
  819e18:	802ad43a 	srli	r21,r16,16
  819e1c:	e084d83a 	srl	r2,fp,r2
  819e20:	a586983a 	sll	r3,r20,r22
  819e24:	8809883a 	mov	r4,r17
  819e28:	a80b883a 	mov	r5,r21
  819e2c:	1886b03a 	or	r3,r3,r2
  819e30:	d8c00115 	stw	r3,4(sp)
  819e34:	08111d40 	call	8111d4 <__udivsi3>
  819e38:	8809883a 	mov	r4,r17
  819e3c:	a80b883a 	mov	r5,r21
  819e40:	d8800415 	stw	r2,16(sp)
  819e44:	08111dc0 	call	8111dc <__umodsi3>
  819e48:	d9000117 	ldw	r4,4(sp)
  819e4c:	d9400417 	ldw	r5,16(sp)
  819e50:	1004943a 	slli	r2,r2,16
  819e54:	85ffffcc 	andi	r23,r16,65535
  819e58:	2006d43a 	srli	r3,r4,16
  819e5c:	b963383a 	mul	r17,r23,r5
  819e60:	10c4b03a 	or	r2,r2,r3
  819e64:	1440042e 	bgeu	r2,r17,819e78 <__udivdi3+0x4ac>
  819e68:	297fffc4 	addi	r5,r5,-1
  819e6c:	1405883a 	add	r2,r2,r16
  819e70:	d9400415 	stw	r5,16(sp)
  819e74:	1400442e 	bgeu	r2,r16,819f88 <__udivdi3+0x5bc>
  819e78:	1463c83a 	sub	r17,r2,r17
  819e7c:	8809883a 	mov	r4,r17
  819e80:	a80b883a 	mov	r5,r21
  819e84:	08111d40 	call	8111d4 <__udivsi3>
  819e88:	8809883a 	mov	r4,r17
  819e8c:	a80b883a 	mov	r5,r21
  819e90:	1029883a 	mov	r20,r2
  819e94:	08111dc0 	call	8111dc <__umodsi3>
  819e98:	d9400117 	ldw	r5,4(sp)
  819e9c:	1004943a 	slli	r2,r2,16
  819ea0:	bd09383a 	mul	r4,r23,r20
  819ea4:	28ffffcc 	andi	r3,r5,65535
  819ea8:	10c6b03a 	or	r3,r2,r3
  819eac:	1900062e 	bgeu	r3,r4,819ec8 <__udivdi3+0x4fc>
  819eb0:	1c07883a 	add	r3,r3,r16
  819eb4:	a53fffc4 	addi	r20,r20,-1
  819eb8:	1c000336 	bltu	r3,r16,819ec8 <__udivdi3+0x4fc>
  819ebc:	1900022e 	bgeu	r3,r4,819ec8 <__udivdi3+0x4fc>
  819ec0:	a53fffc4 	addi	r20,r20,-1
  819ec4:	1c07883a 	add	r3,r3,r16
  819ec8:	d9400417 	ldw	r5,16(sp)
  819ecc:	e5b8983a 	sll	fp,fp,r22
  819ed0:	1923c83a 	sub	r17,r3,r4
  819ed4:	2804943a 	slli	r2,r5,16
  819ed8:	a0a8b03a 	or	r20,r20,r2
  819edc:	dd000315 	stw	r20,12(sp)
  819ee0:	003ee106 	br	819a68 <__udivdi3+0x9c>
  819ee4:	2004943a 	slli	r2,r4,16
  819ee8:	e5c8983a 	sll	r4,fp,r23
  819eec:	48ffffcc 	andi	r3,r9,65535
  819ef0:	10c5883a 	add	r2,r2,r3
  819ef4:	20bfc22e 	bgeu	r4,r2,819e00 <__udivdi3+0x434>
  819ef8:	40bfffc4 	addi	r2,r8,-1
  819efc:	0009883a 	mov	r4,zero
  819f00:	003f1306 	br	819b50 <__udivdi3+0x184>
  819f04:	01400204 	movi	r5,8
  819f08:	2805883a 	mov	r2,r5
  819f0c:	003f0306 	br	819b1c <__udivdi3+0x150>
  819f10:	01400604 	movi	r5,24
  819f14:	2805883a 	mov	r2,r5
  819f18:	003f0006 	br	819b1c <__udivdi3+0x150>
  819f1c:	01400204 	movi	r5,8
  819f20:	2805883a 	mov	r2,r5
  819f24:	003ec206 	br	819a30 <__udivdi3+0x64>
  819f28:	01400604 	movi	r5,24
  819f2c:	2805883a 	mov	r2,r5
  819f30:	003ebf06 	br	819a30 <__udivdi3+0x64>
  819f34:	01400204 	movi	r5,8
  819f38:	2805883a 	mov	r2,r5
  819f3c:	003f1706 	br	819b9c <__udivdi3+0x1d0>
  819f40:	01400604 	movi	r5,24
  819f44:	2805883a 	mov	r2,r5
  819f48:	003f1406 	br	819b9c <__udivdi3+0x1d0>
  819f4c:	89ff962e 	bgeu	r17,r7,819da8 <__udivdi3+0x3dc>
  819f50:	8d63883a 	add	r17,r17,r21
  819f54:	843fffc4 	addi	r16,r16,-1
  819f58:	003f9306 	br	819da8 <__udivdi3+0x3dc>
  819f5c:	147f802e 	bgeu	r2,r17,819d60 <__udivdi3+0x394>
  819f60:	a53fffc4 	addi	r20,r20,-1
  819f64:	1545883a 	add	r2,r2,r21
  819f68:	003f7d06 	br	819d60 <__udivdi3+0x394>
  819f6c:	a53fffc4 	addi	r20,r20,-1
  819f70:	003ede06 	br	819aec <__udivdi3+0x120>
  819f74:	b5bfffc4 	addi	r22,r22,-1
  819f78:	1405883a 	add	r2,r2,r16
  819f7c:	003f2806 	br	819c20 <__udivdi3+0x254>
  819f80:	a53fffc4 	addi	r20,r20,-1
  819f84:	003f3706 	br	819c64 <__udivdi3+0x298>
  819f88:	147fbb2e 	bgeu	r2,r17,819e78 <__udivdi3+0x4ac>
  819f8c:	297fffc4 	addi	r5,r5,-1
  819f90:	1405883a 	add	r2,r2,r16
  819f94:	d9400415 	stw	r5,16(sp)
  819f98:	003fb706 	br	819e78 <__udivdi3+0x4ac>
  819f9c:	b5bfffc4 	addi	r22,r22,-1
  819fa0:	1405883a 	add	r2,r2,r16
  819fa4:	003ec006 	br	819aa8 <__udivdi3+0xdc>

00819fa8 <__umoddi3>:
  819fa8:	defff104 	addi	sp,sp,-60
  819fac:	dd800b15 	stw	r22,44(sp)
  819fb0:	dd000915 	stw	r20,36(sp)
  819fb4:	dc000515 	stw	r16,20(sp)
  819fb8:	dfc00e15 	stw	ra,56(sp)
  819fbc:	df000d15 	stw	fp,52(sp)
  819fc0:	ddc00c15 	stw	r23,48(sp)
  819fc4:	dd400a15 	stw	r21,40(sp)
  819fc8:	dcc00815 	stw	r19,32(sp)
  819fcc:	dc800715 	stw	r18,28(sp)
  819fd0:	dc400615 	stw	r17,24(sp)
  819fd4:	3021883a 	mov	r16,r6
  819fd8:	202d883a 	mov	r22,r4
  819fdc:	2829883a 	mov	r20,r5
  819fe0:	38002b1e 	bne	r7,zero,81a090 <__umoddi3+0xe8>
  819fe4:	29805036 	bltu	r5,r6,81a128 <__umoddi3+0x180>
  819fe8:	30008a26 	beq	r6,zero,81a214 <__umoddi3+0x26c>
  819fec:	00bfffd4 	movui	r2,65535
  819ff0:	14008236 	bltu	r2,r16,81a1fc <__umoddi3+0x254>
  819ff4:	00803fc4 	movi	r2,255
  819ff8:	14013636 	bltu	r2,r16,81a4d4 <__umoddi3+0x52c>
  819ffc:	000b883a 	mov	r5,zero
  81a000:	0005883a 	mov	r2,zero
  81a004:	8084d83a 	srl	r2,r16,r2
  81a008:	010020b4 	movhi	r4,130
  81a00c:	211fd704 	addi	r4,r4,32604
  81a010:	01800804 	movi	r6,32
  81a014:	1105883a 	add	r2,r2,r4
  81a018:	10c00003 	ldbu	r3,0(r2)
  81a01c:	28c7883a 	add	r3,r5,r3
  81a020:	30efc83a 	sub	r23,r6,r3
  81a024:	b800941e 	bne	r23,zero,81a278 <__umoddi3+0x2d0>
  81a028:	802ad43a 	srli	r21,r16,16
  81a02c:	a423c83a 	sub	r17,r20,r16
  81a030:	0039883a 	mov	fp,zero
  81a034:	853fffcc 	andi	r20,r16,65535
  81a038:	8809883a 	mov	r4,r17
  81a03c:	a80b883a 	mov	r5,r21
  81a040:	08111d40 	call	8111d4 <__udivsi3>
  81a044:	8809883a 	mov	r4,r17
  81a048:	a80b883a 	mov	r5,r21
  81a04c:	a0a3383a 	mul	r17,r20,r2
  81a050:	08111dc0 	call	8111dc <__umodsi3>
  81a054:	1004943a 	slli	r2,r2,16
  81a058:	b006d43a 	srli	r3,r22,16
  81a05c:	10c4b03a 	or	r2,r2,r3
  81a060:	1440032e 	bgeu	r2,r17,81a070 <__umoddi3+0xc8>
  81a064:	1405883a 	add	r2,r2,r16
  81a068:	14000136 	bltu	r2,r16,81a070 <__umoddi3+0xc8>
  81a06c:	14413536 	bltu	r2,r17,81a544 <__umoddi3+0x59c>
  81a070:	1463c83a 	sub	r17,r2,r17
  81a074:	8809883a 	mov	r4,r17
  81a078:	a80b883a 	mov	r5,r21
  81a07c:	08111d40 	call	8111d4 <__udivsi3>
  81a080:	8809883a 	mov	r4,r17
  81a084:	a0a3383a 	mul	r17,r20,r2
  81a088:	a80b883a 	mov	r5,r21
  81a08c:	00004d06 	br	81a1c4 <__umoddi3+0x21c>
  81a090:	380d883a 	mov	r6,r7
  81a094:	29c0102e 	bgeu	r5,r7,81a0d8 <__umoddi3+0x130>
  81a098:	2011883a 	mov	r8,r4
  81a09c:	2813883a 	mov	r9,r5
  81a0a0:	4005883a 	mov	r2,r8
  81a0a4:	4807883a 	mov	r3,r9
  81a0a8:	dfc00e17 	ldw	ra,56(sp)
  81a0ac:	df000d17 	ldw	fp,52(sp)
  81a0b0:	ddc00c17 	ldw	r23,48(sp)
  81a0b4:	dd800b17 	ldw	r22,44(sp)
  81a0b8:	dd400a17 	ldw	r21,40(sp)
  81a0bc:	dd000917 	ldw	r20,36(sp)
  81a0c0:	dcc00817 	ldw	r19,32(sp)
  81a0c4:	dc800717 	ldw	r18,28(sp)
  81a0c8:	dc400617 	ldw	r17,24(sp)
  81a0cc:	dc000517 	ldw	r16,20(sp)
  81a0d0:	dec00f04 	addi	sp,sp,60
  81a0d4:	f800283a 	ret
  81a0d8:	00bfffd4 	movui	r2,65535
  81a0dc:	11c05a36 	bltu	r2,r7,81a248 <__umoddi3+0x2a0>
  81a0e0:	00803fc4 	movi	r2,255
  81a0e4:	11c0fe36 	bltu	r2,r7,81a4e0 <__umoddi3+0x538>
  81a0e8:	000b883a 	mov	r5,zero
  81a0ec:	0005883a 	mov	r2,zero
  81a0f0:	3084d83a 	srl	r2,r6,r2
  81a0f4:	010020b4 	movhi	r4,130
  81a0f8:	211fd704 	addi	r4,r4,32604
  81a0fc:	01c00804 	movi	r7,32
  81a100:	1105883a 	add	r2,r2,r4
  81a104:	10c00003 	ldbu	r3,0(r2)
  81a108:	28c7883a 	add	r3,r5,r3
  81a10c:	38ebc83a 	sub	r21,r7,r3
  81a110:	a800851e 	bne	r21,zero,81a328 <__umoddi3+0x380>
  81a114:	35005236 	bltu	r6,r20,81a260 <__umoddi3+0x2b8>
  81a118:	b400512e 	bgeu	r22,r16,81a260 <__umoddi3+0x2b8>
  81a11c:	b011883a 	mov	r8,r22
  81a120:	a013883a 	mov	r9,r20
  81a124:	003fde06 	br	81a0a0 <__umoddi3+0xf8>
  81a128:	00bfffd4 	movui	r2,65535
  81a12c:	11804036 	bltu	r2,r6,81a230 <__umoddi3+0x288>
  81a130:	00803fc4 	movi	r2,255
  81a134:	1180ed36 	bltu	r2,r6,81a4ec <__umoddi3+0x544>
  81a138:	000b883a 	mov	r5,zero
  81a13c:	0005883a 	mov	r2,zero
  81a140:	8084d83a 	srl	r2,r16,r2
  81a144:	010020b4 	movhi	r4,130
  81a148:	211fd704 	addi	r4,r4,32604
  81a14c:	01800804 	movi	r6,32
  81a150:	1105883a 	add	r2,r2,r4
  81a154:	10c00003 	ldbu	r3,0(r2)
  81a158:	28c7883a 	add	r3,r5,r3
  81a15c:	30c7c83a 	sub	r3,r6,r3
  81a160:	1800bf1e 	bne	r3,zero,81a460 <__umoddi3+0x4b8>
  81a164:	0039883a 	mov	fp,zero
  81a168:	802ad43a 	srli	r21,r16,16
  81a16c:	a009883a 	mov	r4,r20
  81a170:	85ffffcc 	andi	r23,r16,65535
  81a174:	a80b883a 	mov	r5,r21
  81a178:	08111d40 	call	8111d4 <__udivsi3>
  81a17c:	a009883a 	mov	r4,r20
  81a180:	a80b883a 	mov	r5,r21
  81a184:	b8a3383a 	mul	r17,r23,r2
  81a188:	08111dc0 	call	8111dc <__umodsi3>
  81a18c:	1004943a 	slli	r2,r2,16
  81a190:	b006d43a 	srli	r3,r22,16
  81a194:	10c4b03a 	or	r2,r2,r3
  81a198:	1440032e 	bgeu	r2,r17,81a1a8 <__umoddi3+0x200>
  81a19c:	1405883a 	add	r2,r2,r16
  81a1a0:	14000136 	bltu	r2,r16,81a1a8 <__umoddi3+0x200>
  81a1a4:	1440e536 	bltu	r2,r17,81a53c <__umoddi3+0x594>
  81a1a8:	1463c83a 	sub	r17,r2,r17
  81a1ac:	8809883a 	mov	r4,r17
  81a1b0:	a80b883a 	mov	r5,r21
  81a1b4:	08111d40 	call	8111d4 <__udivsi3>
  81a1b8:	8809883a 	mov	r4,r17
  81a1bc:	b8a3383a 	mul	r17,r23,r2
  81a1c0:	a80b883a 	mov	r5,r21
  81a1c4:	08111dc0 	call	8111dc <__umodsi3>
  81a1c8:	1004943a 	slli	r2,r2,16
  81a1cc:	b0ffffcc 	andi	r3,r22,65535
  81a1d0:	10c4b03a 	or	r2,r2,r3
  81a1d4:	1440042e 	bgeu	r2,r17,81a1e8 <__umoddi3+0x240>
  81a1d8:	1405883a 	add	r2,r2,r16
  81a1dc:	14000236 	bltu	r2,r16,81a1e8 <__umoddi3+0x240>
  81a1e0:	1440012e 	bgeu	r2,r17,81a1e8 <__umoddi3+0x240>
  81a1e4:	1405883a 	add	r2,r2,r16
  81a1e8:	1445c83a 	sub	r2,r2,r17
  81a1ec:	1724d83a 	srl	r18,r2,fp
  81a1f0:	0013883a 	mov	r9,zero
  81a1f4:	9011883a 	mov	r8,r18
  81a1f8:	003fa906 	br	81a0a0 <__umoddi3+0xf8>
  81a1fc:	00804034 	movhi	r2,256
  81a200:	10bfffc4 	addi	r2,r2,-1
  81a204:	1400b036 	bltu	r2,r16,81a4c8 <__umoddi3+0x520>
  81a208:	01400404 	movi	r5,16
  81a20c:	2805883a 	mov	r2,r5
  81a210:	003f7c06 	br	81a004 <__umoddi3+0x5c>
  81a214:	01000044 	movi	r4,1
  81a218:	000b883a 	mov	r5,zero
  81a21c:	08111d40 	call	8111d4 <__udivsi3>
  81a220:	1021883a 	mov	r16,r2
  81a224:	00bfffd4 	movui	r2,65535
  81a228:	143ff436 	bltu	r2,r16,81a1fc <__umoddi3+0x254>
  81a22c:	003f7106 	br	819ff4 <__umoddi3+0x4c>
  81a230:	00804034 	movhi	r2,256
  81a234:	10bfffc4 	addi	r2,r2,-1
  81a238:	1180af36 	bltu	r2,r6,81a4f8 <__umoddi3+0x550>
  81a23c:	01400404 	movi	r5,16
  81a240:	2805883a 	mov	r2,r5
  81a244:	003fbe06 	br	81a140 <__umoddi3+0x198>
  81a248:	00804034 	movhi	r2,256
  81a24c:	10bfffc4 	addi	r2,r2,-1
  81a250:	11c0ac36 	bltu	r2,r7,81a504 <__umoddi3+0x55c>
  81a254:	01400404 	movi	r5,16
  81a258:	2805883a 	mov	r2,r5
  81a25c:	003fa406 	br	81a0f0 <__umoddi3+0x148>
  81a260:	b409c83a 	sub	r4,r22,r16
  81a264:	b105803a 	cmpltu	r2,r22,r4
  81a268:	a187c83a 	sub	r3,r20,r6
  81a26c:	18a9c83a 	sub	r20,r3,r2
  81a270:	202d883a 	mov	r22,r4
  81a274:	003fa906 	br	81a11c <__umoddi3+0x174>
  81a278:	85e0983a 	sll	r16,r16,r23
  81a27c:	35c5c83a 	sub	r2,r6,r23
  81a280:	a0a2d83a 	srl	r17,r20,r2
  81a284:	802ad43a 	srli	r21,r16,16
  81a288:	b084d83a 	srl	r2,r22,r2
  81a28c:	a5c6983a 	sll	r3,r20,r23
  81a290:	8809883a 	mov	r4,r17
  81a294:	a80b883a 	mov	r5,r21
  81a298:	1886b03a 	or	r3,r3,r2
  81a29c:	d8c00115 	stw	r3,4(sp)
  81a2a0:	853fffcc 	andi	r20,r16,65535
  81a2a4:	08111d40 	call	8111d4 <__udivsi3>
  81a2a8:	8809883a 	mov	r4,r17
  81a2ac:	a80b883a 	mov	r5,r21
  81a2b0:	a0a3383a 	mul	r17,r20,r2
  81a2b4:	08111dc0 	call	8111dc <__umodsi3>
  81a2b8:	d9000117 	ldw	r4,4(sp)
  81a2bc:	1004943a 	slli	r2,r2,16
  81a2c0:	b839883a 	mov	fp,r23
  81a2c4:	2006d43a 	srli	r3,r4,16
  81a2c8:	10c4b03a 	or	r2,r2,r3
  81a2cc:	1440022e 	bgeu	r2,r17,81a2d8 <__umoddi3+0x330>
  81a2d0:	1405883a 	add	r2,r2,r16
  81a2d4:	1400962e 	bgeu	r2,r16,81a530 <__umoddi3+0x588>
  81a2d8:	1463c83a 	sub	r17,r2,r17
  81a2dc:	8809883a 	mov	r4,r17
  81a2e0:	a80b883a 	mov	r5,r21
  81a2e4:	08111d40 	call	8111d4 <__udivsi3>
  81a2e8:	8809883a 	mov	r4,r17
  81a2ec:	a80b883a 	mov	r5,r21
  81a2f0:	a0a3383a 	mul	r17,r20,r2
  81a2f4:	08111dc0 	call	8111dc <__umodsi3>
  81a2f8:	d9400117 	ldw	r5,4(sp)
  81a2fc:	1004943a 	slli	r2,r2,16
  81a300:	28ffffcc 	andi	r3,r5,65535
  81a304:	10c4b03a 	or	r2,r2,r3
  81a308:	1440042e 	bgeu	r2,r17,81a31c <__umoddi3+0x374>
  81a30c:	1405883a 	add	r2,r2,r16
  81a310:	14000236 	bltu	r2,r16,81a31c <__umoddi3+0x374>
  81a314:	1440012e 	bgeu	r2,r17,81a31c <__umoddi3+0x374>
  81a318:	1405883a 	add	r2,r2,r16
  81a31c:	b5ec983a 	sll	r22,r22,r23
  81a320:	1463c83a 	sub	r17,r2,r17
  81a324:	003f4406 	br	81a038 <__umoddi3+0x90>
  81a328:	3d4fc83a 	sub	r7,r7,r21
  81a32c:	3546983a 	sll	r3,r6,r21
  81a330:	81c4d83a 	srl	r2,r16,r7
  81a334:	a1e2d83a 	srl	r17,r20,r7
  81a338:	a54c983a 	sll	r6,r20,r21
  81a33c:	18aeb03a 	or	r23,r3,r2
  81a340:	b828d43a 	srli	r20,r23,16
  81a344:	b1c4d83a 	srl	r2,r22,r7
  81a348:	8809883a 	mov	r4,r17
  81a34c:	a00b883a 	mov	r5,r20
  81a350:	308cb03a 	or	r6,r6,r2
  81a354:	d9c00315 	stw	r7,12(sp)
  81a358:	d9800215 	stw	r6,8(sp)
  81a35c:	08111d40 	call	8111d4 <__udivsi3>
  81a360:	8809883a 	mov	r4,r17
  81a364:	a00b883a 	mov	r5,r20
  81a368:	1039883a 	mov	fp,r2
  81a36c:	08111dc0 	call	8111dc <__umodsi3>
  81a370:	b8ffffcc 	andi	r3,r23,65535
  81a374:	d8c00415 	stw	r3,16(sp)
  81a378:	d9000217 	ldw	r4,8(sp)
  81a37c:	d9400417 	ldw	r5,16(sp)
  81a380:	1004943a 	slli	r2,r2,16
  81a384:	2006d43a 	srli	r3,r4,16
  81a388:	8560983a 	sll	r16,r16,r21
  81a38c:	2f23383a 	mul	r17,r5,fp
  81a390:	10c4b03a 	or	r2,r2,r3
  81a394:	dc000015 	stw	r16,0(sp)
  81a398:	b56c983a 	sll	r22,r22,r21
  81a39c:	1440032e 	bgeu	r2,r17,81a3ac <__umoddi3+0x404>
  81a3a0:	15c5883a 	add	r2,r2,r23
  81a3a4:	e73fffc4 	addi	fp,fp,-1
  81a3a8:	15c05d2e 	bgeu	r2,r23,81a520 <__umoddi3+0x578>
  81a3ac:	1463c83a 	sub	r17,r2,r17
  81a3b0:	8809883a 	mov	r4,r17
  81a3b4:	a00b883a 	mov	r5,r20
  81a3b8:	08111d40 	call	8111d4 <__udivsi3>
  81a3bc:	8809883a 	mov	r4,r17
  81a3c0:	a00b883a 	mov	r5,r20
  81a3c4:	1021883a 	mov	r16,r2
  81a3c8:	08111dc0 	call	8111dc <__umodsi3>
  81a3cc:	d8c00417 	ldw	r3,16(sp)
  81a3d0:	d9000217 	ldw	r4,8(sp)
  81a3d4:	1004943a 	slli	r2,r2,16
  81a3d8:	1c23383a 	mul	r17,r3,r16
  81a3dc:	20ffffcc 	andi	r3,r4,65535
  81a3e0:	10ceb03a 	or	r7,r2,r3
  81a3e4:	3c40032e 	bgeu	r7,r17,81a3f4 <__umoddi3+0x44c>
  81a3e8:	3dcf883a 	add	r7,r7,r23
  81a3ec:	843fffc4 	addi	r16,r16,-1
  81a3f0:	3dc0472e 	bgeu	r7,r23,81a510 <__umoddi3+0x568>
  81a3f4:	e004943a 	slli	r2,fp,16
  81a3f8:	d9400017 	ldw	r5,0(sp)
  81a3fc:	3c4fc83a 	sub	r7,r7,r17
  81a400:	8084b03a 	or	r2,r16,r2
  81a404:	28ffffcc 	andi	r3,r5,65535
  81a408:	280cd43a 	srli	r6,r5,16
  81a40c:	100ad43a 	srli	r5,r2,16
  81a410:	10bfffcc 	andi	r2,r2,65535
  81a414:	10d1383a 	mul	r8,r2,r3
  81a418:	28c7383a 	mul	r3,r5,r3
  81a41c:	1185383a 	mul	r2,r2,r6
  81a420:	4008d43a 	srli	r4,r8,16
  81a424:	298b383a 	mul	r5,r5,r6
  81a428:	10c5883a 	add	r2,r2,r3
  81a42c:	2089883a 	add	r4,r4,r2
  81a430:	20c0022e 	bgeu	r4,r3,81a43c <__umoddi3+0x494>
  81a434:	00800074 	movhi	r2,1
  81a438:	288b883a 	add	r5,r5,r2
  81a43c:	2004d43a 	srli	r2,r4,16
  81a440:	2008943a 	slli	r4,r4,16
  81a444:	40ffffcc 	andi	r3,r8,65535
  81a448:	288b883a 	add	r5,r5,r2
  81a44c:	20c9883a 	add	r4,r4,r3
  81a450:	39400b36 	bltu	r7,r5,81a480 <__umoddi3+0x4d8>
  81a454:	39403d26 	beq	r7,r5,81a54c <__umoddi3+0x5a4>
  81a458:	394bc83a 	sub	r5,r7,r5
  81a45c:	00000f06 	br	81a49c <__umoddi3+0x4f4>
  81a460:	30c5c83a 	sub	r2,r6,r3
  81a464:	1839883a 	mov	fp,r3
  81a468:	b084d83a 	srl	r2,r22,r2
  81a46c:	a0c6983a 	sll	r3,r20,r3
  81a470:	8720983a 	sll	r16,r16,fp
  81a474:	b72c983a 	sll	r22,r22,fp
  81a478:	18a8b03a 	or	r20,r3,r2
  81a47c:	003f3a06 	br	81a168 <__umoddi3+0x1c0>
  81a480:	d8c00017 	ldw	r3,0(sp)
  81a484:	20c5c83a 	sub	r2,r4,r3
  81a488:	2089803a 	cmpltu	r4,r4,r2
  81a48c:	2dc7c83a 	sub	r3,r5,r23
  81a490:	1907c83a 	sub	r3,r3,r4
  81a494:	38cbc83a 	sub	r5,r7,r3
  81a498:	1009883a 	mov	r4,r2
  81a49c:	b105c83a 	sub	r2,r22,r4
  81a4a0:	b087803a 	cmpltu	r3,r22,r2
  81a4a4:	28c7c83a 	sub	r3,r5,r3
  81a4a8:	d9400317 	ldw	r5,12(sp)
  81a4ac:	1544d83a 	srl	r2,r2,r21
  81a4b0:	1948983a 	sll	r4,r3,r5
  81a4b4:	1d46d83a 	srl	r3,r3,r21
  81a4b8:	20a4b03a 	or	r18,r4,r2
  81a4bc:	9011883a 	mov	r8,r18
  81a4c0:	1813883a 	mov	r9,r3
  81a4c4:	003ef606 	br	81a0a0 <__umoddi3+0xf8>
  81a4c8:	01400604 	movi	r5,24
  81a4cc:	2805883a 	mov	r2,r5
  81a4d0:	003ecc06 	br	81a004 <__umoddi3+0x5c>
  81a4d4:	01400204 	movi	r5,8
  81a4d8:	2805883a 	mov	r2,r5
  81a4dc:	003ec906 	br	81a004 <__umoddi3+0x5c>
  81a4e0:	01400204 	movi	r5,8
  81a4e4:	2805883a 	mov	r2,r5
  81a4e8:	003f0106 	br	81a0f0 <__umoddi3+0x148>
  81a4ec:	01400204 	movi	r5,8
  81a4f0:	2805883a 	mov	r2,r5
  81a4f4:	003f1206 	br	81a140 <__umoddi3+0x198>
  81a4f8:	01400604 	movi	r5,24
  81a4fc:	2805883a 	mov	r2,r5
  81a500:	003f0f06 	br	81a140 <__umoddi3+0x198>
  81a504:	01400604 	movi	r5,24
  81a508:	2805883a 	mov	r2,r5
  81a50c:	003ef806 	br	81a0f0 <__umoddi3+0x148>
  81a510:	3c7fb82e 	bgeu	r7,r17,81a3f4 <__umoddi3+0x44c>
  81a514:	843fffc4 	addi	r16,r16,-1
  81a518:	3dcf883a 	add	r7,r7,r23
  81a51c:	003fb506 	br	81a3f4 <__umoddi3+0x44c>
  81a520:	147fa22e 	bgeu	r2,r17,81a3ac <__umoddi3+0x404>
  81a524:	e73fffc4 	addi	fp,fp,-1
  81a528:	15c5883a 	add	r2,r2,r23
  81a52c:	003f9f06 	br	81a3ac <__umoddi3+0x404>
  81a530:	147f692e 	bgeu	r2,r17,81a2d8 <__umoddi3+0x330>
  81a534:	1405883a 	add	r2,r2,r16
  81a538:	003f6706 	br	81a2d8 <__umoddi3+0x330>
  81a53c:	1405883a 	add	r2,r2,r16
  81a540:	003f1906 	br	81a1a8 <__umoddi3+0x200>
  81a544:	1405883a 	add	r2,r2,r16
  81a548:	003ec906 	br	81a070 <__umoddi3+0xc8>
  81a54c:	b13fcc36 	bltu	r22,r4,81a480 <__umoddi3+0x4d8>
  81a550:	000b883a 	mov	r5,zero
  81a554:	003fd106 	br	81a49c <__umoddi3+0x4f4>

0081a558 <__gedf2>:
  81a558:	deffef04 	addi	sp,sp,-68
  81a55c:	dc400f15 	stw	r17,60(sp)
  81a560:	dc400404 	addi	r17,sp,16
  81a564:	2005883a 	mov	r2,r4
  81a568:	2807883a 	mov	r3,r5
  81a56c:	dc000e15 	stw	r16,56(sp)
  81a570:	d809883a 	mov	r4,sp
  81a574:	880b883a 	mov	r5,r17
  81a578:	dc000904 	addi	r16,sp,36
  81a57c:	d8c00115 	stw	r3,4(sp)
  81a580:	d8800015 	stw	r2,0(sp)
  81a584:	d9800215 	stw	r6,8(sp)
  81a588:	dfc01015 	stw	ra,64(sp)
  81a58c:	d9c00315 	stw	r7,12(sp)
  81a590:	081190c0 	call	81190c <__unpack_d>
  81a594:	d9000204 	addi	r4,sp,8
  81a598:	800b883a 	mov	r5,r16
  81a59c:	081190c0 	call	81190c <__unpack_d>
  81a5a0:	d8800417 	ldw	r2,16(sp)
  81a5a4:	00c00044 	movi	r3,1
  81a5a8:	01bfffc4 	movi	r6,-1
  81a5ac:	1880062e 	bgeu	r3,r2,81a5c8 <__gedf2+0x70>
  81a5b0:	d8800917 	ldw	r2,36(sp)
  81a5b4:	8809883a 	mov	r4,r17
  81a5b8:	800b883a 	mov	r5,r16
  81a5bc:	1880022e 	bgeu	r3,r2,81a5c8 <__gedf2+0x70>
  81a5c0:	0811a440 	call	811a44 <__fpcmp_parts_d>
  81a5c4:	100d883a 	mov	r6,r2
  81a5c8:	3005883a 	mov	r2,r6
  81a5cc:	dfc01017 	ldw	ra,64(sp)
  81a5d0:	dc400f17 	ldw	r17,60(sp)
  81a5d4:	dc000e17 	ldw	r16,56(sp)
  81a5d8:	dec01104 	addi	sp,sp,68
  81a5dc:	f800283a 	ret

0081a5e0 <__fixdfsi>:
  81a5e0:	defff804 	addi	sp,sp,-32
  81a5e4:	2005883a 	mov	r2,r4
  81a5e8:	2807883a 	mov	r3,r5
  81a5ec:	d809883a 	mov	r4,sp
  81a5f0:	d9400204 	addi	r5,sp,8
  81a5f4:	d8c00115 	stw	r3,4(sp)
  81a5f8:	d8800015 	stw	r2,0(sp)
  81a5fc:	dfc00715 	stw	ra,28(sp)
  81a600:	081190c0 	call	81190c <__unpack_d>
  81a604:	d8c00217 	ldw	r3,8(sp)
  81a608:	00800084 	movi	r2,2
  81a60c:	1880051e 	bne	r3,r2,81a624 <__fixdfsi+0x44>
  81a610:	0007883a 	mov	r3,zero
  81a614:	1805883a 	mov	r2,r3
  81a618:	dfc00717 	ldw	ra,28(sp)
  81a61c:	dec00804 	addi	sp,sp,32
  81a620:	f800283a 	ret
  81a624:	00800044 	movi	r2,1
  81a628:	10fff92e 	bgeu	r2,r3,81a610 <__fixdfsi+0x30>
  81a62c:	00800104 	movi	r2,4
  81a630:	18800426 	beq	r3,r2,81a644 <__fixdfsi+0x64>
  81a634:	d8c00417 	ldw	r3,16(sp)
  81a638:	183ff516 	blt	r3,zero,81a610 <__fixdfsi+0x30>
  81a63c:	00800784 	movi	r2,30
  81a640:	10c0080e 	bge	r2,r3,81a664 <__fixdfsi+0x84>
  81a644:	d8800317 	ldw	r2,12(sp)
  81a648:	1000121e 	bne	r2,zero,81a694 <__fixdfsi+0xb4>
  81a64c:	00e00034 	movhi	r3,32768
  81a650:	18ffffc4 	addi	r3,r3,-1
  81a654:	1805883a 	mov	r2,r3
  81a658:	dfc00717 	ldw	ra,28(sp)
  81a65c:	dec00804 	addi	sp,sp,32
  81a660:	f800283a 	ret
  81a664:	00800f04 	movi	r2,60
  81a668:	10d1c83a 	sub	r8,r2,r3
  81a66c:	40bff804 	addi	r2,r8,-32
  81a670:	d9800517 	ldw	r6,20(sp)
  81a674:	d9c00617 	ldw	r7,24(sp)
  81a678:	10000816 	blt	r2,zero,81a69c <__fixdfsi+0xbc>
  81a67c:	3888d83a 	srl	r4,r7,r2
  81a680:	d8800317 	ldw	r2,12(sp)
  81a684:	2007883a 	mov	r3,r4
  81a688:	103fe226 	beq	r2,zero,81a614 <__fixdfsi+0x34>
  81a68c:	0107c83a 	sub	r3,zero,r4
  81a690:	003fe006 	br	81a614 <__fixdfsi+0x34>
  81a694:	00e00034 	movhi	r3,32768
  81a698:	003fde06 	br	81a614 <__fixdfsi+0x34>
  81a69c:	39c7883a 	add	r3,r7,r7
  81a6a0:	008007c4 	movi	r2,31
  81a6a4:	1205c83a 	sub	r2,r2,r8
  81a6a8:	1886983a 	sll	r3,r3,r2
  81a6ac:	3208d83a 	srl	r4,r6,r8
  81a6b0:	1908b03a 	or	r4,r3,r4
  81a6b4:	003ff206 	br	81a680 <__fixdfsi+0xa0>

0081a6b8 <__floatunsidf>:
  81a6b8:	defff204 	addi	sp,sp,-56
  81a6bc:	dfc00d15 	stw	ra,52(sp)
  81a6c0:	ddc00c15 	stw	r23,48(sp)
  81a6c4:	dd800b15 	stw	r22,44(sp)
  81a6c8:	dd400a15 	stw	r21,40(sp)
  81a6cc:	dd000915 	stw	r20,36(sp)
  81a6d0:	dcc00815 	stw	r19,32(sp)
  81a6d4:	dc800715 	stw	r18,28(sp)
  81a6d8:	dc400615 	stw	r17,24(sp)
  81a6dc:	dc000515 	stw	r16,20(sp)
  81a6e0:	d8000115 	stw	zero,4(sp)
  81a6e4:	20000f1e 	bne	r4,zero,81a724 <__floatunsidf+0x6c>
  81a6e8:	00800084 	movi	r2,2
  81a6ec:	d8800015 	stw	r2,0(sp)
  81a6f0:	d809883a 	mov	r4,sp
  81a6f4:	08115f80 	call	8115f8 <__pack_d>
  81a6f8:	dfc00d17 	ldw	ra,52(sp)
  81a6fc:	ddc00c17 	ldw	r23,48(sp)
  81a700:	dd800b17 	ldw	r22,44(sp)
  81a704:	dd400a17 	ldw	r21,40(sp)
  81a708:	dd000917 	ldw	r20,36(sp)
  81a70c:	dcc00817 	ldw	r19,32(sp)
  81a710:	dc800717 	ldw	r18,28(sp)
  81a714:	dc400617 	ldw	r17,24(sp)
  81a718:	dc000517 	ldw	r16,20(sp)
  81a71c:	dec00e04 	addi	sp,sp,56
  81a720:	f800283a 	ret
  81a724:	008000c4 	movi	r2,3
  81a728:	00c00f04 	movi	r3,60
  81a72c:	002f883a 	mov	r23,zero
  81a730:	202d883a 	mov	r22,r4
  81a734:	d8800015 	stw	r2,0(sp)
  81a738:	d8c00215 	stw	r3,8(sp)
  81a73c:	d9000315 	stw	r4,12(sp)
  81a740:	ddc00415 	stw	r23,16(sp)
  81a744:	081127c0 	call	81127c <__clzsi2>
  81a748:	12400744 	addi	r9,r2,29
  81a74c:	48000b16 	blt	r9,zero,81a77c <__floatunsidf+0xc4>
  81a750:	483fe726 	beq	r9,zero,81a6f0 <__floatunsidf+0x38>
  81a754:	10bfff44 	addi	r2,r2,-3
  81a758:	10002e16 	blt	r2,zero,81a814 <__floatunsidf+0x15c>
  81a75c:	b0a2983a 	sll	r17,r22,r2
  81a760:	0021883a 	mov	r16,zero
  81a764:	d8800217 	ldw	r2,8(sp)
  81a768:	dc400415 	stw	r17,16(sp)
  81a76c:	dc000315 	stw	r16,12(sp)
  81a770:	1245c83a 	sub	r2,r2,r9
  81a774:	d8800215 	stw	r2,8(sp)
  81a778:	003fdd06 	br	81a6f0 <__floatunsidf+0x38>
  81a77c:	0255c83a 	sub	r10,zero,r9
  81a780:	51bff804 	addi	r6,r10,-32
  81a784:	30001b16 	blt	r6,zero,81a7f4 <__floatunsidf+0x13c>
  81a788:	b9a8d83a 	srl	r20,r23,r6
  81a78c:	002b883a 	mov	r21,zero
  81a790:	000f883a 	mov	r7,zero
  81a794:	01000044 	movi	r4,1
  81a798:	0011883a 	mov	r8,zero
  81a79c:	30002516 	blt	r6,zero,81a834 <__floatunsidf+0x17c>
  81a7a0:	21a6983a 	sll	r19,r4,r6
  81a7a4:	0025883a 	mov	r18,zero
  81a7a8:	00bfffc4 	movi	r2,-1
  81a7ac:	9089883a 	add	r4,r18,r2
  81a7b0:	988b883a 	add	r5,r19,r2
  81a7b4:	248d803a 	cmpltu	r6,r4,r18
  81a7b8:	314b883a 	add	r5,r6,r5
  81a7bc:	b104703a 	and	r2,r22,r4
  81a7c0:	b946703a 	and	r3,r23,r5
  81a7c4:	10c4b03a 	or	r2,r2,r3
  81a7c8:	10000226 	beq	r2,zero,81a7d4 <__floatunsidf+0x11c>
  81a7cc:	01c00044 	movi	r7,1
  81a7d0:	0011883a 	mov	r8,zero
  81a7d4:	d9000217 	ldw	r4,8(sp)
  81a7d8:	a1c4b03a 	or	r2,r20,r7
  81a7dc:	aa06b03a 	or	r3,r21,r8
  81a7e0:	2249c83a 	sub	r4,r4,r9
  81a7e4:	d8c00415 	stw	r3,16(sp)
  81a7e8:	d9000215 	stw	r4,8(sp)
  81a7ec:	d8800315 	stw	r2,12(sp)
  81a7f0:	003fbf06 	br	81a6f0 <__floatunsidf+0x38>
  81a7f4:	bdc7883a 	add	r3,r23,r23
  81a7f8:	008007c4 	movi	r2,31
  81a7fc:	1285c83a 	sub	r2,r2,r10
  81a800:	1886983a 	sll	r3,r3,r2
  81a804:	b2a8d83a 	srl	r20,r22,r10
  81a808:	baaad83a 	srl	r21,r23,r10
  81a80c:	1d28b03a 	or	r20,r3,r20
  81a810:	003fdf06 	br	81a790 <__floatunsidf+0xd8>
  81a814:	b006d07a 	srli	r3,r22,1
  81a818:	008007c4 	movi	r2,31
  81a81c:	1245c83a 	sub	r2,r2,r9
  81a820:	1886d83a 	srl	r3,r3,r2
  81a824:	ba62983a 	sll	r17,r23,r9
  81a828:	b260983a 	sll	r16,r22,r9
  81a82c:	1c62b03a 	or	r17,r3,r17
  81a830:	003fcc06 	br	81a764 <__floatunsidf+0xac>
  81a834:	2006d07a 	srli	r3,r4,1
  81a838:	008007c4 	movi	r2,31
  81a83c:	1285c83a 	sub	r2,r2,r10
  81a840:	18a6d83a 	srl	r19,r3,r2
  81a844:	22a4983a 	sll	r18,r4,r10
  81a848:	003fd706 	br	81a7a8 <__floatunsidf+0xf0>

0081a84c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  81a84c:	defff804 	addi	sp,sp,-32
  81a850:	dfc00715 	stw	ra,28(sp)
  81a854:	df000615 	stw	fp,24(sp)
  81a858:	df000604 	addi	fp,sp,24
  81a85c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  81a860:	e0bffc17 	ldw	r2,-16(fp)
  81a864:	1004803a 	cmplt	r2,r2,zero
  81a868:	1000081e 	bne	r2,zero,81a88c <close+0x40>
  81a86c:	e0bffc17 	ldw	r2,-16(fp)
  81a870:	10800324 	muli	r2,r2,12
  81a874:	1007883a 	mov	r3,r2
  81a878:	008020f4 	movhi	r2,131
  81a87c:	10a4fa04 	addi	r2,r2,-27672
  81a880:	1887883a 	add	r3,r3,r2
  81a884:	e0ffff15 	stw	r3,-4(fp)
  81a888:	00000106 	br	81a890 <close+0x44>
  81a88c:	e03fff15 	stw	zero,-4(fp)
  81a890:	e0bfff17 	ldw	r2,-4(fp)
  81a894:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  81a898:	e0bffb17 	ldw	r2,-20(fp)
  81a89c:	1005003a 	cmpeq	r2,r2,zero
  81a8a0:	10001d1e 	bne	r2,zero,81a918 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  81a8a4:	e0bffb17 	ldw	r2,-20(fp)
  81a8a8:	10800017 	ldw	r2,0(r2)
  81a8ac:	10800417 	ldw	r2,16(r2)
  81a8b0:	1005003a 	cmpeq	r2,r2,zero
  81a8b4:	1000071e 	bne	r2,zero,81a8d4 <close+0x88>
  81a8b8:	e0bffb17 	ldw	r2,-20(fp)
  81a8bc:	10800017 	ldw	r2,0(r2)
  81a8c0:	10800417 	ldw	r2,16(r2)
  81a8c4:	e13ffb17 	ldw	r4,-20(fp)
  81a8c8:	103ee83a 	callr	r2
  81a8cc:	e0bffe15 	stw	r2,-8(fp)
  81a8d0:	00000106 	br	81a8d8 <close+0x8c>
  81a8d4:	e03ffe15 	stw	zero,-8(fp)
  81a8d8:	e0bffe17 	ldw	r2,-8(fp)
  81a8dc:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  81a8e0:	e13ffc17 	ldw	r4,-16(fp)
  81a8e4:	081b1800 	call	81b180 <alt_release_fd>
    if (rval < 0)
  81a8e8:	e0bffa17 	ldw	r2,-24(fp)
  81a8ec:	1004403a 	cmpge	r2,r2,zero
  81a8f0:	1000071e 	bne	r2,zero,81a910 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  81a8f4:	081a9480 	call	81a948 <alt_get_errno>
  81a8f8:	e0fffa17 	ldw	r3,-24(fp)
  81a8fc:	00c7c83a 	sub	r3,zero,r3
  81a900:	10c00015 	stw	r3,0(r2)
      return -1;
  81a904:	00bfffc4 	movi	r2,-1
  81a908:	e0bffd15 	stw	r2,-12(fp)
  81a90c:	00000806 	br	81a930 <close+0xe4>
    }
    return 0;
  81a910:	e03ffd15 	stw	zero,-12(fp)
  81a914:	00000606 	br	81a930 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  81a918:	081a9480 	call	81a948 <alt_get_errno>
  81a91c:	1007883a 	mov	r3,r2
  81a920:	00801444 	movi	r2,81
  81a924:	18800015 	stw	r2,0(r3)
    return -1;
  81a928:	00bfffc4 	movi	r2,-1
  81a92c:	e0bffd15 	stw	r2,-12(fp)
  81a930:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  81a934:	e037883a 	mov	sp,fp
  81a938:	dfc00117 	ldw	ra,4(sp)
  81a93c:	df000017 	ldw	fp,0(sp)
  81a940:	dec00204 	addi	sp,sp,8
  81a944:	f800283a 	ret

0081a948 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81a948:	defffd04 	addi	sp,sp,-12
  81a94c:	dfc00215 	stw	ra,8(sp)
  81a950:	df000115 	stw	fp,4(sp)
  81a954:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81a958:	008020f4 	movhi	r2,131
  81a95c:	10a9a404 	addi	r2,r2,-22896
  81a960:	10800017 	ldw	r2,0(r2)
  81a964:	1005003a 	cmpeq	r2,r2,zero
  81a968:	1000061e 	bne	r2,zero,81a984 <alt_get_errno+0x3c>
  81a96c:	008020f4 	movhi	r2,131
  81a970:	10a9a404 	addi	r2,r2,-22896
  81a974:	10800017 	ldw	r2,0(r2)
  81a978:	103ee83a 	callr	r2
  81a97c:	e0bfff15 	stw	r2,-4(fp)
  81a980:	00000306 	br	81a990 <alt_get_errno+0x48>
  81a984:	008020f4 	movhi	r2,131
  81a988:	10a9d104 	addi	r2,r2,-22716
  81a98c:	e0bfff15 	stw	r2,-4(fp)
  81a990:	e0bfff17 	ldw	r2,-4(fp)
}
  81a994:	e037883a 	mov	sp,fp
  81a998:	dfc00117 	ldw	ra,4(sp)
  81a99c:	df000017 	ldw	fp,0(sp)
  81a9a0:	dec00204 	addi	sp,sp,8
  81a9a4:	f800283a 	ret

0081a9a8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  81a9a8:	defffc04 	addi	sp,sp,-16
  81a9ac:	df000315 	stw	fp,12(sp)
  81a9b0:	df000304 	addi	fp,sp,12
  81a9b4:	e13ffd15 	stw	r4,-12(fp)
  81a9b8:	e17ffe15 	stw	r5,-8(fp)
  81a9bc:	e1bfff15 	stw	r6,-4(fp)
  return len;
  81a9c0:	e0bfff17 	ldw	r2,-4(fp)
}
  81a9c4:	e037883a 	mov	sp,fp
  81a9c8:	df000017 	ldw	fp,0(sp)
  81a9cc:	dec00104 	addi	sp,sp,4
  81a9d0:	f800283a 	ret

0081a9d4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  81a9d4:	defff904 	addi	sp,sp,-28
  81a9d8:	dfc00615 	stw	ra,24(sp)
  81a9dc:	df000515 	stw	fp,20(sp)
  81a9e0:	df000504 	addi	fp,sp,20
  81a9e4:	e13ffc15 	stw	r4,-16(fp)
  81a9e8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81a9ec:	e0bffc17 	ldw	r2,-16(fp)
  81a9f0:	1004803a 	cmplt	r2,r2,zero
  81a9f4:	1000081e 	bne	r2,zero,81aa18 <fstat+0x44>
  81a9f8:	e0bffc17 	ldw	r2,-16(fp)
  81a9fc:	10800324 	muli	r2,r2,12
  81aa00:	1007883a 	mov	r3,r2
  81aa04:	008020f4 	movhi	r2,131
  81aa08:	10a4fa04 	addi	r2,r2,-27672
  81aa0c:	1887883a 	add	r3,r3,r2
  81aa10:	e0ffff15 	stw	r3,-4(fp)
  81aa14:	00000106 	br	81aa1c <fstat+0x48>
  81aa18:	e03fff15 	stw	zero,-4(fp)
  81aa1c:	e0bfff17 	ldw	r2,-4(fp)
  81aa20:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  81aa24:	e0bffb17 	ldw	r2,-20(fp)
  81aa28:	1005003a 	cmpeq	r2,r2,zero
  81aa2c:	1000121e 	bne	r2,zero,81aa78 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  81aa30:	e0bffb17 	ldw	r2,-20(fp)
  81aa34:	10800017 	ldw	r2,0(r2)
  81aa38:	10800817 	ldw	r2,32(r2)
  81aa3c:	1005003a 	cmpeq	r2,r2,zero
  81aa40:	1000081e 	bne	r2,zero,81aa64 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  81aa44:	e0bffb17 	ldw	r2,-20(fp)
  81aa48:	10800017 	ldw	r2,0(r2)
  81aa4c:	10800817 	ldw	r2,32(r2)
  81aa50:	e13ffb17 	ldw	r4,-20(fp)
  81aa54:	e17ffd17 	ldw	r5,-12(fp)
  81aa58:	103ee83a 	callr	r2
  81aa5c:	e0bffe15 	stw	r2,-8(fp)
  81aa60:	00000b06 	br	81aa90 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  81aa64:	e0fffd17 	ldw	r3,-12(fp)
  81aa68:	00880004 	movi	r2,8192
  81aa6c:	18800115 	stw	r2,4(r3)
      return 0;
  81aa70:	e03ffe15 	stw	zero,-8(fp)
  81aa74:	00000606 	br	81aa90 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  81aa78:	081aaa80 	call	81aaa8 <alt_get_errno>
  81aa7c:	1007883a 	mov	r3,r2
  81aa80:	00801444 	movi	r2,81
  81aa84:	18800015 	stw	r2,0(r3)
    return -1;
  81aa88:	00bfffc4 	movi	r2,-1
  81aa8c:	e0bffe15 	stw	r2,-8(fp)
  81aa90:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  81aa94:	e037883a 	mov	sp,fp
  81aa98:	dfc00117 	ldw	ra,4(sp)
  81aa9c:	df000017 	ldw	fp,0(sp)
  81aaa0:	dec00204 	addi	sp,sp,8
  81aaa4:	f800283a 	ret

0081aaa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81aaa8:	defffd04 	addi	sp,sp,-12
  81aaac:	dfc00215 	stw	ra,8(sp)
  81aab0:	df000115 	stw	fp,4(sp)
  81aab4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81aab8:	008020f4 	movhi	r2,131
  81aabc:	10a9a404 	addi	r2,r2,-22896
  81aac0:	10800017 	ldw	r2,0(r2)
  81aac4:	1005003a 	cmpeq	r2,r2,zero
  81aac8:	1000061e 	bne	r2,zero,81aae4 <alt_get_errno+0x3c>
  81aacc:	008020f4 	movhi	r2,131
  81aad0:	10a9a404 	addi	r2,r2,-22896
  81aad4:	10800017 	ldw	r2,0(r2)
  81aad8:	103ee83a 	callr	r2
  81aadc:	e0bfff15 	stw	r2,-4(fp)
  81aae0:	00000306 	br	81aaf0 <alt_get_errno+0x48>
  81aae4:	008020f4 	movhi	r2,131
  81aae8:	10a9d104 	addi	r2,r2,-22716
  81aaec:	e0bfff15 	stw	r2,-4(fp)
  81aaf0:	e0bfff17 	ldw	r2,-4(fp)
}
  81aaf4:	e037883a 	mov	sp,fp
  81aaf8:	dfc00117 	ldw	ra,4(sp)
  81aafc:	df000017 	ldw	fp,0(sp)
  81ab00:	dec00204 	addi	sp,sp,8
  81ab04:	f800283a 	ret

0081ab08 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  81ab08:	deffef04 	addi	sp,sp,-68
  81ab0c:	df001015 	stw	fp,64(sp)
  81ab10:	df001004 	addi	fp,sp,64
  81ab14:	e13ffc15 	stw	r4,-16(fp)
  81ab18:	e17ffd15 	stw	r5,-12(fp)
  81ab1c:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  81ab20:	00bffa84 	movi	r2,-22
  81ab24:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  81ab28:	e0bffc17 	ldw	r2,-16(fp)
  81ab2c:	10800828 	cmpgeui	r2,r2,32
  81ab30:	1000601e 	bne	r2,zero,81acb4 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81ab34:	0005303a 	rdctl	r2,status
  81ab38:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ab3c:	e0fff917 	ldw	r3,-28(fp)
  81ab40:	00bfff84 	movi	r2,-2
  81ab44:	1884703a 	and	r2,r3,r2
  81ab48:	1001703a 	wrctl	status,r2
  
  return context;
  81ab4c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  81ab50:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  81ab54:	e0bffc17 	ldw	r2,-16(fp)
  81ab58:	00c02534 	movhi	r3,148
  81ab5c:	18f75b04 	addi	r3,r3,-8852
  81ab60:	100490fa 	slli	r2,r2,3
  81ab64:	10c7883a 	add	r3,r2,r3
  81ab68:	e0bffe17 	ldw	r2,-8(fp)
  81ab6c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  81ab70:	e0bffc17 	ldw	r2,-16(fp)
  81ab74:	00c02534 	movhi	r3,148
  81ab78:	18f75b04 	addi	r3,r3,-8852
  81ab7c:	100490fa 	slli	r2,r2,3
  81ab80:	10c5883a 	add	r2,r2,r3
  81ab84:	10c00104 	addi	r3,r2,4
  81ab88:	e0bffd17 	ldw	r2,-12(fp)
  81ab8c:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  81ab90:	e0bffe17 	ldw	r2,-8(fp)
  81ab94:	1005003a 	cmpeq	r2,r2,zero
  81ab98:	1000201e 	bne	r2,zero,81ac1c <alt_irq_register+0x114>
  81ab9c:	e0bffc17 	ldw	r2,-16(fp)
  81aba0:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81aba4:	0005303a 	rdctl	r2,status
  81aba8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81abac:	e0fff617 	ldw	r3,-40(fp)
  81abb0:	00bfff84 	movi	r2,-2
  81abb4:	1884703a 	and	r2,r3,r2
  81abb8:	1001703a 	wrctl	status,r2
  
  return context;
  81abbc:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81abc0:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  81abc4:	e0fff717 	ldw	r3,-36(fp)
  81abc8:	00800044 	movi	r2,1
  81abcc:	10c4983a 	sll	r2,r2,r3
  81abd0:	1007883a 	mov	r3,r2
  81abd4:	008020f4 	movhi	r2,131
  81abd8:	10a9d604 	addi	r2,r2,-22696
  81abdc:	10800017 	ldw	r2,0(r2)
  81abe0:	1886b03a 	or	r3,r3,r2
  81abe4:	008020f4 	movhi	r2,131
  81abe8:	10a9d604 	addi	r2,r2,-22696
  81abec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81abf0:	008020f4 	movhi	r2,131
  81abf4:	10a9d604 	addi	r2,r2,-22696
  81abf8:	10800017 	ldw	r2,0(r2)
  81abfc:	100170fa 	wrctl	ienable,r2
  81ac00:	e0bff817 	ldw	r2,-32(fp)
  81ac04:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81ac08:	e0bff517 	ldw	r2,-44(fp)
  81ac0c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81ac10:	0005883a 	mov	r2,zero
  81ac14:	e0bfff15 	stw	r2,-4(fp)
  81ac18:	00002006 	br	81ac9c <alt_irq_register+0x194>
  81ac1c:	e0bffc17 	ldw	r2,-16(fp)
  81ac20:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81ac24:	0005303a 	rdctl	r2,status
  81ac28:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ac2c:	e0fff217 	ldw	r3,-56(fp)
  81ac30:	00bfff84 	movi	r2,-2
  81ac34:	1884703a 	and	r2,r3,r2
  81ac38:	1001703a 	wrctl	status,r2
  
  return context;
  81ac3c:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81ac40:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  81ac44:	e0fff317 	ldw	r3,-52(fp)
  81ac48:	00800044 	movi	r2,1
  81ac4c:	10c4983a 	sll	r2,r2,r3
  81ac50:	0084303a 	nor	r2,zero,r2
  81ac54:	1007883a 	mov	r3,r2
  81ac58:	008020f4 	movhi	r2,131
  81ac5c:	10a9d604 	addi	r2,r2,-22696
  81ac60:	10800017 	ldw	r2,0(r2)
  81ac64:	1886703a 	and	r3,r3,r2
  81ac68:	008020f4 	movhi	r2,131
  81ac6c:	10a9d604 	addi	r2,r2,-22696
  81ac70:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81ac74:	008020f4 	movhi	r2,131
  81ac78:	10a9d604 	addi	r2,r2,-22696
  81ac7c:	10800017 	ldw	r2,0(r2)
  81ac80:	100170fa 	wrctl	ienable,r2
  81ac84:	e0bff417 	ldw	r2,-48(fp)
  81ac88:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81ac8c:	e0bff117 	ldw	r2,-60(fp)
  81ac90:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81ac94:	0005883a 	mov	r2,zero
  81ac98:	e0bfff15 	stw	r2,-4(fp)
  81ac9c:	e0bfff17 	ldw	r2,-4(fp)
  81aca0:	e0bffb15 	stw	r2,-20(fp)
  81aca4:	e0bffa17 	ldw	r2,-24(fp)
  81aca8:	e0bff015 	stw	r2,-64(fp)
  81acac:	e0bff017 	ldw	r2,-64(fp)
  81acb0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  81acb4:	e0bffb17 	ldw	r2,-20(fp)
}
  81acb8:	e037883a 	mov	sp,fp
  81acbc:	df000017 	ldw	fp,0(sp)
  81acc0:	dec00104 	addi	sp,sp,4
  81acc4:	f800283a 	ret

0081acc8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  81acc8:	deffeb04 	addi	sp,sp,-84
  81accc:	dfc01415 	stw	ra,80(sp)
  81acd0:	df001315 	stw	fp,76(sp)
  81acd4:	df001304 	addi	fp,sp,76
  81acd8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81acdc:	e0bffd17 	ldw	r2,-12(fp)
  81ace0:	1004803a 	cmplt	r2,r2,zero
  81ace4:	1000081e 	bne	r2,zero,81ad08 <isatty+0x40>
  81ace8:	e0bffd17 	ldw	r2,-12(fp)
  81acec:	10800324 	muli	r2,r2,12
  81acf0:	1007883a 	mov	r3,r2
  81acf4:	008020f4 	movhi	r2,131
  81acf8:	10a4fa04 	addi	r2,r2,-27672
  81acfc:	1887883a 	add	r3,r3,r2
  81ad00:	e0ffff15 	stw	r3,-4(fp)
  81ad04:	00000106 	br	81ad0c <isatty+0x44>
  81ad08:	e03fff15 	stw	zero,-4(fp)
  81ad0c:	e0bfff17 	ldw	r2,-4(fp)
  81ad10:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  81ad14:	e0bfed17 	ldw	r2,-76(fp)
  81ad18:	1005003a 	cmpeq	r2,r2,zero
  81ad1c:	10000f1e 	bne	r2,zero,81ad5c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  81ad20:	e0bfed17 	ldw	r2,-76(fp)
  81ad24:	10800017 	ldw	r2,0(r2)
  81ad28:	10800817 	ldw	r2,32(r2)
  81ad2c:	1004c03a 	cmpne	r2,r2,zero
  81ad30:	1000031e 	bne	r2,zero,81ad40 <isatty+0x78>
    {
      return 1;
  81ad34:	00800044 	movi	r2,1
  81ad38:	e0bffe15 	stw	r2,-8(fp)
  81ad3c:	00000c06 	br	81ad70 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  81ad40:	e17fee04 	addi	r5,fp,-72
  81ad44:	e13ffd17 	ldw	r4,-12(fp)
  81ad48:	081a9d40 	call	81a9d4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  81ad4c:	e0bfef17 	ldw	r2,-68(fp)
  81ad50:	10880020 	cmpeqi	r2,r2,8192
  81ad54:	e0bffe15 	stw	r2,-8(fp)
  81ad58:	00000506 	br	81ad70 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  81ad5c:	081ad880 	call	81ad88 <alt_get_errno>
  81ad60:	1007883a 	mov	r3,r2
  81ad64:	00801444 	movi	r2,81
  81ad68:	18800015 	stw	r2,0(r3)
    return 0;
  81ad6c:	e03ffe15 	stw	zero,-8(fp)
  81ad70:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  81ad74:	e037883a 	mov	sp,fp
  81ad78:	dfc00117 	ldw	ra,4(sp)
  81ad7c:	df000017 	ldw	fp,0(sp)
  81ad80:	dec00204 	addi	sp,sp,8
  81ad84:	f800283a 	ret

0081ad88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81ad88:	defffd04 	addi	sp,sp,-12
  81ad8c:	dfc00215 	stw	ra,8(sp)
  81ad90:	df000115 	stw	fp,4(sp)
  81ad94:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81ad98:	008020f4 	movhi	r2,131
  81ad9c:	10a9a404 	addi	r2,r2,-22896
  81ada0:	10800017 	ldw	r2,0(r2)
  81ada4:	1005003a 	cmpeq	r2,r2,zero
  81ada8:	1000061e 	bne	r2,zero,81adc4 <alt_get_errno+0x3c>
  81adac:	008020f4 	movhi	r2,131
  81adb0:	10a9a404 	addi	r2,r2,-22896
  81adb4:	10800017 	ldw	r2,0(r2)
  81adb8:	103ee83a 	callr	r2
  81adbc:	e0bfff15 	stw	r2,-4(fp)
  81adc0:	00000306 	br	81add0 <alt_get_errno+0x48>
  81adc4:	008020f4 	movhi	r2,131
  81adc8:	10a9d104 	addi	r2,r2,-22716
  81adcc:	e0bfff15 	stw	r2,-4(fp)
  81add0:	e0bfff17 	ldw	r2,-4(fp)
}
  81add4:	e037883a 	mov	sp,fp
  81add8:	dfc00117 	ldw	ra,4(sp)
  81addc:	df000017 	ldw	fp,0(sp)
  81ade0:	dec00204 	addi	sp,sp,8
  81ade4:	f800283a 	ret

0081ade8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  81ade8:	defff804 	addi	sp,sp,-32
  81adec:	dfc00715 	stw	ra,28(sp)
  81adf0:	df000615 	stw	fp,24(sp)
  81adf4:	df000604 	addi	fp,sp,24
  81adf8:	e13ffc15 	stw	r4,-16(fp)
  81adfc:	e17ffd15 	stw	r5,-12(fp)
  81ae00:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  81ae04:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81ae08:	e0bffc17 	ldw	r2,-16(fp)
  81ae0c:	1004803a 	cmplt	r2,r2,zero
  81ae10:	1000081e 	bne	r2,zero,81ae34 <lseek+0x4c>
  81ae14:	e0bffc17 	ldw	r2,-16(fp)
  81ae18:	10800324 	muli	r2,r2,12
  81ae1c:	1007883a 	mov	r3,r2
  81ae20:	008020f4 	movhi	r2,131
  81ae24:	10a4fa04 	addi	r2,r2,-27672
  81ae28:	1887883a 	add	r3,r3,r2
  81ae2c:	e0ffff15 	stw	r3,-4(fp)
  81ae30:	00000106 	br	81ae38 <lseek+0x50>
  81ae34:	e03fff15 	stw	zero,-4(fp)
  81ae38:	e0bfff17 	ldw	r2,-4(fp)
  81ae3c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  81ae40:	e0bffb17 	ldw	r2,-20(fp)
  81ae44:	1005003a 	cmpeq	r2,r2,zero
  81ae48:	1000111e 	bne	r2,zero,81ae90 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  81ae4c:	e0bffb17 	ldw	r2,-20(fp)
  81ae50:	10800017 	ldw	r2,0(r2)
  81ae54:	10800717 	ldw	r2,28(r2)
  81ae58:	1005003a 	cmpeq	r2,r2,zero
  81ae5c:	1000091e 	bne	r2,zero,81ae84 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  81ae60:	e0bffb17 	ldw	r2,-20(fp)
  81ae64:	10800017 	ldw	r2,0(r2)
  81ae68:	10800717 	ldw	r2,28(r2)
  81ae6c:	e13ffb17 	ldw	r4,-20(fp)
  81ae70:	e17ffd17 	ldw	r5,-12(fp)
  81ae74:	e1bffe17 	ldw	r6,-8(fp)
  81ae78:	103ee83a 	callr	r2
  81ae7c:	e0bffa15 	stw	r2,-24(fp)
  81ae80:	00000506 	br	81ae98 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  81ae84:	00bfde84 	movi	r2,-134
  81ae88:	e0bffa15 	stw	r2,-24(fp)
  81ae8c:	00000206 	br	81ae98 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  81ae90:	00bfebc4 	movi	r2,-81
  81ae94:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  81ae98:	e0bffa17 	ldw	r2,-24(fp)
  81ae9c:	1004403a 	cmpge	r2,r2,zero
  81aea0:	1000071e 	bne	r2,zero,81aec0 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  81aea4:	081aed80 	call	81aed8 <alt_get_errno>
  81aea8:	1007883a 	mov	r3,r2
  81aeac:	e0bffa17 	ldw	r2,-24(fp)
  81aeb0:	0085c83a 	sub	r2,zero,r2
  81aeb4:	18800015 	stw	r2,0(r3)
    rc = -1;
  81aeb8:	00bfffc4 	movi	r2,-1
  81aebc:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  81aec0:	e0bffa17 	ldw	r2,-24(fp)
}
  81aec4:	e037883a 	mov	sp,fp
  81aec8:	dfc00117 	ldw	ra,4(sp)
  81aecc:	df000017 	ldw	fp,0(sp)
  81aed0:	dec00204 	addi	sp,sp,8
  81aed4:	f800283a 	ret

0081aed8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81aed8:	defffd04 	addi	sp,sp,-12
  81aedc:	dfc00215 	stw	ra,8(sp)
  81aee0:	df000115 	stw	fp,4(sp)
  81aee4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81aee8:	008020f4 	movhi	r2,131
  81aeec:	10a9a404 	addi	r2,r2,-22896
  81aef0:	10800017 	ldw	r2,0(r2)
  81aef4:	1005003a 	cmpeq	r2,r2,zero
  81aef8:	1000061e 	bne	r2,zero,81af14 <alt_get_errno+0x3c>
  81aefc:	008020f4 	movhi	r2,131
  81af00:	10a9a404 	addi	r2,r2,-22896
  81af04:	10800017 	ldw	r2,0(r2)
  81af08:	103ee83a 	callr	r2
  81af0c:	e0bfff15 	stw	r2,-4(fp)
  81af10:	00000306 	br	81af20 <alt_get_errno+0x48>
  81af14:	008020f4 	movhi	r2,131
  81af18:	10a9d104 	addi	r2,r2,-22716
  81af1c:	e0bfff15 	stw	r2,-4(fp)
  81af20:	e0bfff17 	ldw	r2,-4(fp)
}
  81af24:	e037883a 	mov	sp,fp
  81af28:	dfc00117 	ldw	ra,4(sp)
  81af2c:	df000017 	ldw	fp,0(sp)
  81af30:	dec00204 	addi	sp,sp,8
  81af34:	f800283a 	ret

0081af38 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  81af38:	defffb04 	addi	sp,sp,-20
  81af3c:	dfc00415 	stw	ra,16(sp)
  81af40:	df000315 	stw	fp,12(sp)
  81af44:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  81af48:	0009883a 	mov	r4,zero
  81af4c:	0823ae00 	call	823ae0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  81af50:	081c13c0 	call	81c13c <OSInit>
  81af54:	01000044 	movi	r4,1
  81af58:	08210000 	call	821000 <OSSemCreate>
  81af5c:	1007883a 	mov	r3,r2
  81af60:	008020f4 	movhi	r2,131
  81af64:	10a9db04 	addi	r2,r2,-22676
  81af68:	10c00015 	stw	r3,0(r2)
  81af6c:	01000044 	movi	r4,1
  81af70:	08210000 	call	821000 <OSSemCreate>
  81af74:	1007883a 	mov	r3,r2
  81af78:	008020f4 	movhi	r2,131
  81af7c:	10a9dd04 	addi	r2,r2,-22668
  81af80:	10c00015 	stw	r3,0(r2)
  81af84:	008020f4 	movhi	r2,131
  81af88:	10a9d504 	addi	r2,r2,-22700
  81af8c:	e0bffd15 	stw	r2,-12(fp)
  81af90:	00800044 	movi	r2,1
  81af94:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  81af98:	e13ffe0b 	ldhu	r4,-8(fp)
  81af9c:	08210000 	call	821000 <OSSemCreate>
  81afa0:	1007883a 	mov	r3,r2
  81afa4:	e0bffd17 	ldw	r2,-12(fp)
  81afa8:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  81afac:	0823b140 	call	823b14 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  81afb0:	010020f4 	movhi	r4,131
  81afb4:	21228304 	addi	r4,r4,-30196
  81afb8:	014020f4 	movhi	r5,131
  81afbc:	29628304 	addi	r5,r5,-30196
  81afc0:	018020f4 	movhi	r6,131
  81afc4:	31a28304 	addi	r6,r6,-30196
  81afc8:	08264c40 	call	8264c4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  81afcc:	08262a40 	call	8262a4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  81afd0:	010020b4 	movhi	r4,130
  81afd4:	2118c204 	addi	r4,r4,25352
  81afd8:	08270c40 	call	8270c4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  81afdc:	d1203f17 	ldw	r4,-32516(gp)
  81afe0:	d1604017 	ldw	r5,-32512(gp)
  81afe4:	d1a04117 	ldw	r6,-32508(gp)
  81afe8:	080d0ec0 	call	80d0ec <main>
  81afec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  81aff0:	01000044 	movi	r4,1
  81aff4:	081a84c0 	call	81a84c <close>
  exit (result);
  81aff8:	e13fff17 	ldw	r4,-4(fp)
  81affc:	08270d80 	call	8270d8 <exit>

0081b000 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  81b000:	defff704 	addi	sp,sp,-36
  81b004:	dfc00815 	stw	ra,32(sp)
  81b008:	df000715 	stw	fp,28(sp)
  81b00c:	df000704 	addi	fp,sp,28
  81b010:	e13ffb15 	stw	r4,-20(fp)
  81b014:	e17ffc15 	stw	r5,-16(fp)
  81b018:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81b01c:	e0bffb17 	ldw	r2,-20(fp)
  81b020:	1004803a 	cmplt	r2,r2,zero
  81b024:	1000081e 	bne	r2,zero,81b048 <read+0x48>
  81b028:	e0bffb17 	ldw	r2,-20(fp)
  81b02c:	10800324 	muli	r2,r2,12
  81b030:	1007883a 	mov	r3,r2
  81b034:	008020f4 	movhi	r2,131
  81b038:	10a4fa04 	addi	r2,r2,-27672
  81b03c:	1887883a 	add	r3,r3,r2
  81b040:	e0ffff15 	stw	r3,-4(fp)
  81b044:	00000106 	br	81b04c <read+0x4c>
  81b048:	e03fff15 	stw	zero,-4(fp)
  81b04c:	e0bfff17 	ldw	r2,-4(fp)
  81b050:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  81b054:	e0bffa17 	ldw	r2,-24(fp)
  81b058:	1005003a 	cmpeq	r2,r2,zero
  81b05c:	1000241e 	bne	r2,zero,81b0f0 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  81b060:	e0bffa17 	ldw	r2,-24(fp)
  81b064:	10800217 	ldw	r2,8(r2)
  81b068:	108000cc 	andi	r2,r2,3
  81b06c:	10800060 	cmpeqi	r2,r2,1
  81b070:	10001a1e 	bne	r2,zero,81b0dc <read+0xdc>
  81b074:	e0bffa17 	ldw	r2,-24(fp)
  81b078:	10800017 	ldw	r2,0(r2)
  81b07c:	10800517 	ldw	r2,20(r2)
  81b080:	1005003a 	cmpeq	r2,r2,zero
  81b084:	1000151e 	bne	r2,zero,81b0dc <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  81b088:	e0bffa17 	ldw	r2,-24(fp)
  81b08c:	10800017 	ldw	r2,0(r2)
  81b090:	10800517 	ldw	r2,20(r2)
  81b094:	e17ffc17 	ldw	r5,-16(fp)
  81b098:	e1bffd17 	ldw	r6,-12(fp)
  81b09c:	e13ffa17 	ldw	r4,-24(fp)
  81b0a0:	103ee83a 	callr	r2
  81b0a4:	e0bff915 	stw	r2,-28(fp)
  81b0a8:	e0bff917 	ldw	r2,-28(fp)
  81b0ac:	1004403a 	cmpge	r2,r2,zero
  81b0b0:	1000071e 	bne	r2,zero,81b0d0 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  81b0b4:	081b1200 	call	81b120 <alt_get_errno>
  81b0b8:	e0fff917 	ldw	r3,-28(fp)
  81b0bc:	00c7c83a 	sub	r3,zero,r3
  81b0c0:	10c00015 	stw	r3,0(r2)
          return -1;
  81b0c4:	00bfffc4 	movi	r2,-1
  81b0c8:	e0bffe15 	stw	r2,-8(fp)
  81b0cc:	00000e06 	br	81b108 <read+0x108>
        }
        return rval;
  81b0d0:	e0bff917 	ldw	r2,-28(fp)
  81b0d4:	e0bffe15 	stw	r2,-8(fp)
  81b0d8:	00000b06 	br	81b108 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  81b0dc:	081b1200 	call	81b120 <alt_get_errno>
  81b0e0:	1007883a 	mov	r3,r2
  81b0e4:	00800344 	movi	r2,13
  81b0e8:	18800015 	stw	r2,0(r3)
  81b0ec:	00000406 	br	81b100 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  81b0f0:	081b1200 	call	81b120 <alt_get_errno>
  81b0f4:	1007883a 	mov	r3,r2
  81b0f8:	00801444 	movi	r2,81
  81b0fc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  81b100:	00bfffc4 	movi	r2,-1
  81b104:	e0bffe15 	stw	r2,-8(fp)
  81b108:	e0bffe17 	ldw	r2,-8(fp)
}
  81b10c:	e037883a 	mov	sp,fp
  81b110:	dfc00117 	ldw	ra,4(sp)
  81b114:	df000017 	ldw	fp,0(sp)
  81b118:	dec00204 	addi	sp,sp,8
  81b11c:	f800283a 	ret

0081b120 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81b120:	defffd04 	addi	sp,sp,-12
  81b124:	dfc00215 	stw	ra,8(sp)
  81b128:	df000115 	stw	fp,4(sp)
  81b12c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81b130:	008020f4 	movhi	r2,131
  81b134:	10a9a404 	addi	r2,r2,-22896
  81b138:	10800017 	ldw	r2,0(r2)
  81b13c:	1005003a 	cmpeq	r2,r2,zero
  81b140:	1000061e 	bne	r2,zero,81b15c <alt_get_errno+0x3c>
  81b144:	008020f4 	movhi	r2,131
  81b148:	10a9a404 	addi	r2,r2,-22896
  81b14c:	10800017 	ldw	r2,0(r2)
  81b150:	103ee83a 	callr	r2
  81b154:	e0bfff15 	stw	r2,-4(fp)
  81b158:	00000306 	br	81b168 <alt_get_errno+0x48>
  81b15c:	008020f4 	movhi	r2,131
  81b160:	10a9d104 	addi	r2,r2,-22716
  81b164:	e0bfff15 	stw	r2,-4(fp)
  81b168:	e0bfff17 	ldw	r2,-4(fp)
}
  81b16c:	e037883a 	mov	sp,fp
  81b170:	dfc00117 	ldw	ra,4(sp)
  81b174:	df000017 	ldw	fp,0(sp)
  81b178:	dec00204 	addi	sp,sp,8
  81b17c:	f800283a 	ret

0081b180 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  81b180:	defffe04 	addi	sp,sp,-8
  81b184:	df000115 	stw	fp,4(sp)
  81b188:	df000104 	addi	fp,sp,4
  81b18c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  81b190:	e0bfff17 	ldw	r2,-4(fp)
  81b194:	108000d0 	cmplti	r2,r2,3
  81b198:	10000d1e 	bne	r2,zero,81b1d0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  81b19c:	e0bfff17 	ldw	r2,-4(fp)
  81b1a0:	00c020f4 	movhi	r3,131
  81b1a4:	18e4fa04 	addi	r3,r3,-27672
  81b1a8:	10800324 	muli	r2,r2,12
  81b1ac:	10c5883a 	add	r2,r2,r3
  81b1b0:	10800204 	addi	r2,r2,8
  81b1b4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  81b1b8:	e0bfff17 	ldw	r2,-4(fp)
  81b1bc:	00c020f4 	movhi	r3,131
  81b1c0:	18e4fa04 	addi	r3,r3,-27672
  81b1c4:	10800324 	muli	r2,r2,12
  81b1c8:	10c5883a 	add	r2,r2,r3
  81b1cc:	10000015 	stw	zero,0(r2)
  }
}
  81b1d0:	e037883a 	mov	sp,fp
  81b1d4:	df000017 	ldw	fp,0(sp)
  81b1d8:	dec00104 	addi	sp,sp,4
  81b1dc:	f800283a 	ret

0081b1e0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  81b1e0:	defff804 	addi	sp,sp,-32
  81b1e4:	df000715 	stw	fp,28(sp)
  81b1e8:	df000704 	addi	fp,sp,28
  81b1ec:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b1f0:	0005303a 	rdctl	r2,status
  81b1f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b1f8:	e0fffb17 	ldw	r3,-20(fp)
  81b1fc:	00bfff84 	movi	r2,-2
  81b200:	1884703a 	and	r2,r3,r2
  81b204:	1001703a 	wrctl	status,r2
  
  return context;
  81b208:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  81b20c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  81b210:	d0a00e17 	ldw	r2,-32712(gp)
  81b214:	10c000c4 	addi	r3,r2,3
  81b218:	00bfff04 	movi	r2,-4
  81b21c:	1884703a 	and	r2,r3,r2
  81b220:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  81b224:	d0e00e17 	ldw	r3,-32712(gp)
  81b228:	e0bffe17 	ldw	r2,-8(fp)
  81b22c:	1887883a 	add	r3,r3,r2
  81b230:	00804034 	movhi	r2,256
  81b234:	10800004 	addi	r2,r2,0
  81b238:	10c0072e 	bgeu	r2,r3,81b258 <sbrk+0x78>
  81b23c:	e0bffd17 	ldw	r2,-12(fp)
  81b240:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b244:	e0bffa17 	ldw	r2,-24(fp)
  81b248:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  81b24c:	00bfffc4 	movi	r2,-1
  81b250:	e0bfff15 	stw	r2,-4(fp)
  81b254:	00000c06 	br	81b288 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  81b258:	d0a00e17 	ldw	r2,-32712(gp)
  81b25c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  81b260:	d0e00e17 	ldw	r3,-32712(gp)
  81b264:	e0bffe17 	ldw	r2,-8(fp)
  81b268:	1885883a 	add	r2,r3,r2
  81b26c:	d0a00e15 	stw	r2,-32712(gp)
  81b270:	e0bffd17 	ldw	r2,-12(fp)
  81b274:	e0bff915 	stw	r2,-28(fp)
  81b278:	e0bff917 	ldw	r2,-28(fp)
  81b27c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  81b280:	e0bffc17 	ldw	r2,-16(fp)
  81b284:	e0bfff15 	stw	r2,-4(fp)
  81b288:	e0bfff17 	ldw	r2,-4(fp)
} 
  81b28c:	e037883a 	mov	sp,fp
  81b290:	df000017 	ldw	fp,0(sp)
  81b294:	dec00104 	addi	sp,sp,4
  81b298:	f800283a 	ret

0081b29c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  81b29c:	defff904 	addi	sp,sp,-28
  81b2a0:	dfc00615 	stw	ra,24(sp)
  81b2a4:	df000515 	stw	fp,20(sp)
  81b2a8:	dc000415 	stw	r16,16(sp)
  81b2ac:	df000404 	addi	fp,sp,16
  81b2b0:	e13ffe15 	stw	r4,-8(fp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
  81b2b4:	008020f4 	movhi	r2,131
  81b2b8:	10a9de44 	addi	r2,r2,-22663
  81b2bc:	10800003 	ldbu	r2,0(r2)
  81b2c0:	10803fcc 	andi	r2,r2,255
  81b2c4:	1004c03a 	cmpne	r2,r2,zero
  81b2c8:	1000041e 	bne	r2,zero,81b2dc <usleep+0x40>
  {
    return alt_busy_sleep (us);
  81b2cc:	e13ffe17 	ldw	r4,-8(fp)
  81b2d0:	08260440 	call	826044 <alt_busy_sleep>
  81b2d4:	e0bfff15 	stw	r2,-4(fp)
  81b2d8:	00002f06 	br	81b398 <usleep+0xfc>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  81b2dc:	008020f4 	movhi	r2,131
  81b2e0:	10a9f204 	addi	r2,r2,-22584
  81b2e4:	10800017 	ldw	r2,0(r2)

  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
  81b2e8:	e0bffc15 	stw	r2,-16(fp)
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
  81b2ec:	e13ffe17 	ldw	r4,-8(fp)
  81b2f0:	014003f4 	movhi	r5,15
  81b2f4:	29509004 	addi	r5,r5,16960
  81b2f8:	08111d40 	call	8111d4 <__udivsi3>
  81b2fc:	1007883a 	mov	r3,r2
  81b300:	e0bffc17 	ldw	r2,-16(fp)
  81b304:	18a1383a 	mul	r16,r3,r2
  81b308:	e13ffe17 	ldw	r4,-8(fp)
  81b30c:	014003f4 	movhi	r5,15
  81b310:	29509004 	addi	r5,r5,16960
  81b314:	08111dc0 	call	8111dc <__umodsi3>
  81b318:	1007883a 	mov	r3,r2
  81b31c:	e0bffc17 	ldw	r2,-16(fp)
  81b320:	1889383a 	mul	r4,r3,r2
  81b324:	014003f4 	movhi	r5,15
  81b328:	29509004 	addi	r5,r5,16960
  81b32c:	08111d40 	call	8111d4 <__udivsi3>
  81b330:	8085883a 	add	r2,r16,r2
  81b334:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
  81b338:	00000706 	br	81b358 <usleep+0xbc>
  {
    OSTimeDly(0xffff);
  81b33c:	013fffd4 	movui	r4,65535
  81b340:	08235480 	call	823548 <OSTimeDly>
    ticks -= 0xffff;
  81b344:	e0bffd17 	ldw	r2,-12(fp)
  81b348:	00fffff4 	movhi	r3,65535
  81b34c:	18c00044 	addi	r3,r3,1
  81b350:	10c5883a 	add	r2,r2,r3
  81b354:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
  81b358:	e0fffd17 	ldw	r3,-12(fp)
  81b35c:	00bfffd4 	movui	r2,65535
  81b360:	10fff636 	bltu	r2,r3,81b33c <usleep+0xa0>
  {
    OSTimeDly(0xffff);
    ticks -= 0xffff;
  }

  OSTimeDly ((INT16U) (ticks));
  81b364:	e0bffd17 	ldw	r2,-12(fp)
  81b368:	113fffcc 	andi	r4,r2,65535
  81b36c:	08235480 	call	823548 <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
  81b370:	010003f4 	movhi	r4,15
  81b374:	21109004 	addi	r4,r4,16960
  81b378:	e17ffc17 	ldw	r5,-16(fp)
  81b37c:	08111d40 	call	8111d4 <__udivsi3>
  81b380:	100b883a 	mov	r5,r2
  81b384:	e13ffe17 	ldw	r4,-8(fp)
  81b388:	08111dc0 	call	8111dc <__umodsi3>
  81b38c:	1009883a 	mov	r4,r2
  81b390:	08260440 	call	826044 <alt_busy_sleep>

  return 0;  
  81b394:	e03fff15 	stw	zero,-4(fp)
  81b398:	e0bfff17 	ldw	r2,-4(fp)
}
  81b39c:	e037883a 	mov	sp,fp
  81b3a0:	dfc00217 	ldw	ra,8(sp)
  81b3a4:	df000117 	ldw	fp,4(sp)
  81b3a8:	dc000017 	ldw	r16,0(sp)
  81b3ac:	dec00304 	addi	sp,sp,12
  81b3b0:	f800283a 	ret

0081b3b4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  81b3b4:	defff704 	addi	sp,sp,-36
  81b3b8:	dfc00815 	stw	ra,32(sp)
  81b3bc:	df000715 	stw	fp,28(sp)
  81b3c0:	df000704 	addi	fp,sp,28
  81b3c4:	e13ffb15 	stw	r4,-20(fp)
  81b3c8:	e17ffc15 	stw	r5,-16(fp)
  81b3cc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81b3d0:	e0bffb17 	ldw	r2,-20(fp)
  81b3d4:	1004803a 	cmplt	r2,r2,zero
  81b3d8:	1000081e 	bne	r2,zero,81b3fc <write+0x48>
  81b3dc:	e0bffb17 	ldw	r2,-20(fp)
  81b3e0:	10800324 	muli	r2,r2,12
  81b3e4:	1007883a 	mov	r3,r2
  81b3e8:	008020f4 	movhi	r2,131
  81b3ec:	10a4fa04 	addi	r2,r2,-27672
  81b3f0:	1887883a 	add	r3,r3,r2
  81b3f4:	e0ffff15 	stw	r3,-4(fp)
  81b3f8:	00000106 	br	81b400 <write+0x4c>
  81b3fc:	e03fff15 	stw	zero,-4(fp)
  81b400:	e0bfff17 	ldw	r2,-4(fp)
  81b404:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  81b408:	e0bffa17 	ldw	r2,-24(fp)
  81b40c:	1005003a 	cmpeq	r2,r2,zero
  81b410:	1000241e 	bne	r2,zero,81b4a4 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  81b414:	e0bffa17 	ldw	r2,-24(fp)
  81b418:	10800217 	ldw	r2,8(r2)
  81b41c:	108000cc 	andi	r2,r2,3
  81b420:	1005003a 	cmpeq	r2,r2,zero
  81b424:	10001a1e 	bne	r2,zero,81b490 <write+0xdc>
  81b428:	e0bffa17 	ldw	r2,-24(fp)
  81b42c:	10800017 	ldw	r2,0(r2)
  81b430:	10800617 	ldw	r2,24(r2)
  81b434:	1005003a 	cmpeq	r2,r2,zero
  81b438:	1000151e 	bne	r2,zero,81b490 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  81b43c:	e0bffa17 	ldw	r2,-24(fp)
  81b440:	10800017 	ldw	r2,0(r2)
  81b444:	10800617 	ldw	r2,24(r2)
  81b448:	e17ffc17 	ldw	r5,-16(fp)
  81b44c:	e1bffd17 	ldw	r6,-12(fp)
  81b450:	e13ffa17 	ldw	r4,-24(fp)
  81b454:	103ee83a 	callr	r2
  81b458:	e0bff915 	stw	r2,-28(fp)
  81b45c:	e0bff917 	ldw	r2,-28(fp)
  81b460:	1004403a 	cmpge	r2,r2,zero
  81b464:	1000071e 	bne	r2,zero,81b484 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  81b468:	081b4d40 	call	81b4d4 <alt_get_errno>
  81b46c:	e0fff917 	ldw	r3,-28(fp)
  81b470:	00c7c83a 	sub	r3,zero,r3
  81b474:	10c00015 	stw	r3,0(r2)
        return -1;
  81b478:	00bfffc4 	movi	r2,-1
  81b47c:	e0bffe15 	stw	r2,-8(fp)
  81b480:	00000e06 	br	81b4bc <write+0x108>
      }
      return rval;
  81b484:	e0bff917 	ldw	r2,-28(fp)
  81b488:	e0bffe15 	stw	r2,-8(fp)
  81b48c:	00000b06 	br	81b4bc <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  81b490:	081b4d40 	call	81b4d4 <alt_get_errno>
  81b494:	1007883a 	mov	r3,r2
  81b498:	00800344 	movi	r2,13
  81b49c:	18800015 	stw	r2,0(r3)
  81b4a0:	00000406 	br	81b4b4 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  81b4a4:	081b4d40 	call	81b4d4 <alt_get_errno>
  81b4a8:	1007883a 	mov	r3,r2
  81b4ac:	00801444 	movi	r2,81
  81b4b0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  81b4b4:	00bfffc4 	movi	r2,-1
  81b4b8:	e0bffe15 	stw	r2,-8(fp)
  81b4bc:	e0bffe17 	ldw	r2,-8(fp)
}
  81b4c0:	e037883a 	mov	sp,fp
  81b4c4:	dfc00117 	ldw	ra,4(sp)
  81b4c8:	df000017 	ldw	fp,0(sp)
  81b4cc:	dec00204 	addi	sp,sp,8
  81b4d0:	f800283a 	ret

0081b4d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81b4d4:	defffd04 	addi	sp,sp,-12
  81b4d8:	dfc00215 	stw	ra,8(sp)
  81b4dc:	df000115 	stw	fp,4(sp)
  81b4e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81b4e4:	008020f4 	movhi	r2,131
  81b4e8:	10a9a404 	addi	r2,r2,-22896
  81b4ec:	10800017 	ldw	r2,0(r2)
  81b4f0:	1005003a 	cmpeq	r2,r2,zero
  81b4f4:	1000061e 	bne	r2,zero,81b510 <alt_get_errno+0x3c>
  81b4f8:	008020f4 	movhi	r2,131
  81b4fc:	10a9a404 	addi	r2,r2,-22896
  81b500:	10800017 	ldw	r2,0(r2)
  81b504:	103ee83a 	callr	r2
  81b508:	e0bfff15 	stw	r2,-4(fp)
  81b50c:	00000306 	br	81b51c <alt_get_errno+0x48>
  81b510:	008020f4 	movhi	r2,131
  81b514:	10a9d104 	addi	r2,r2,-22716
  81b518:	e0bfff15 	stw	r2,-4(fp)
  81b51c:	e0bfff17 	ldw	r2,-4(fp)
}
  81b520:	e037883a 	mov	sp,fp
  81b524:	dfc00117 	ldw	ra,4(sp)
  81b528:	df000017 	ldw	fp,0(sp)
  81b52c:	dec00204 	addi	sp,sp,8
  81b530:	f800283a 	ret

0081b534 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  81b534:	deffdf04 	addi	sp,sp,-132
  81b538:	dfc02015 	stw	ra,128(sp)
  81b53c:	df001f15 	stw	fp,124(sp)
  81b540:	df001f04 	addi	fp,sp,124
  81b544:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  81b548:	e17fe204 	addi	r5,fp,-120
  81b54c:	01003fc4 	movi	r4,255
  81b550:	08233880 	call	823388 <OSTaskQuery>
  81b554:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  81b558:	e0bffe83 	ldbu	r2,-6(fp)
  81b55c:	10803fcc 	andi	r2,r2,255
  81b560:	1004c03a 	cmpne	r2,r2,zero
  81b564:	1000191e 	bne	r2,zero,81b5cc <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
  81b568:	e0bfee83 	ldbu	r2,-70(fp)
  81b56c:	10803fcc 	andi	r2,r2,255
  81b570:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  81b574:	d1204317 	ldw	r4,-32500(gp)
  81b578:	e17ffd04 	addi	r5,fp,-12
  81b57c:	08218d40 	call	8218d4 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  81b580:	e0bffe43 	ldbu	r2,-7(fp)
  81b584:	10803fcc 	andi	r2,r2,255
  81b588:	1005003a 	cmpeq	r2,r2,zero
  81b58c:	1000071e 	bne	r2,zero,81b5ac <__env_lock+0x78>
  81b590:	d0e00f17 	ldw	r3,-32708(gp)
  81b594:	e0bfe117 	ldw	r2,-124(fp)
  81b598:	10c0041e 	bne	r2,r3,81b5ac <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
  81b59c:	d0a04217 	ldw	r2,-32504(gp)
  81b5a0:	10800044 	addi	r2,r2,1
  81b5a4:	d0a04215 	stw	r2,-32504(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
  81b5a8:	00000806 	br	81b5cc <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  81b5ac:	d1204317 	ldw	r4,-32500(gp)
  81b5b0:	e1bffe84 	addi	r6,fp,-6
  81b5b4:	000b883a 	mov	r5,zero
  81b5b8:	08213b40 	call	8213b4 <OSSemPend>
    locks  = 1;
  81b5bc:	00800044 	movi	r2,1
  81b5c0:	d0a04215 	stw	r2,-32504(gp)
    lockid = id;
  81b5c4:	e0bfe117 	ldw	r2,-124(fp)
  81b5c8:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  81b5cc:	e037883a 	mov	sp,fp
  81b5d0:	dfc00117 	ldw	ra,4(sp)
  81b5d4:	df000017 	ldw	fp,0(sp)
  81b5d8:	dec00204 	addi	sp,sp,8
  81b5dc:	f800283a 	ret

0081b5e0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  81b5e0:	defffd04 	addi	sp,sp,-12
  81b5e4:	dfc00215 	stw	ra,8(sp)
  81b5e8:	df000115 	stw	fp,4(sp)
  81b5ec:	df000104 	addi	fp,sp,4
  81b5f0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  81b5f4:	d0a04217 	ldw	r2,-32504(gp)
  81b5f8:	1005003a 	cmpeq	r2,r2,zero
  81b5fc:	10000a1e 	bne	r2,zero,81b628 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  81b600:	d0a04217 	ldw	r2,-32504(gp)
  81b604:	10bfffc4 	addi	r2,r2,-1
  81b608:	d0a04215 	stw	r2,-32504(gp)
  81b60c:	d0a04217 	ldw	r2,-32504(gp)
  81b610:	1004c03a 	cmpne	r2,r2,zero
  81b614:	1000041e 	bne	r2,zero,81b628 <__env_unlock+0x48>
  {
    lockid = -1;
  81b618:	00bfffc4 	movi	r2,-1
  81b61c:	d0a00f15 	stw	r2,-32708(gp)
    OSSemPost( alt_envsem );
  81b620:	d1204317 	ldw	r4,-32500(gp)
  81b624:	08217ac0 	call	8217ac <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  81b628:	e037883a 	mov	sp,fp
  81b62c:	dfc00117 	ldw	ra,4(sp)
  81b630:	df000017 	ldw	fp,0(sp)
  81b634:	dec00204 	addi	sp,sp,8
  81b638:	f800283a 	ret

0081b63c <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  81b63c:	deffdb04 	addi	sp,sp,-148
  81b640:	dfc02415 	stw	ra,144(sp)
  81b644:	df002315 	stw	fp,140(sp)
  81b648:	df002304 	addi	fp,sp,140
  81b64c:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81b650:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  81b654:	008020f4 	movhi	r2,131
  81b658:	10a9de44 	addi	r2,r2,-22663
  81b65c:	10800003 	ldbu	r2,0(r2)
  81b660:	10803fcc 	andi	r2,r2,255
  81b664:	10800058 	cmpnei	r2,r2,1
  81b668:	1000311e 	bne	r2,zero,81b730 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  81b66c:	e17fe204 	addi	r5,fp,-120
  81b670:	01003fc4 	movi	r4,255
  81b674:	08233880 	call	823388 <OSTaskQuery>
  81b678:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  81b67c:	e0bffe83 	ldbu	r2,-6(fp)
  81b680:	10803fcc 	andi	r2,r2,255
  81b684:	1004c03a 	cmpne	r2,r2,zero
  81b688:	1000291e 	bne	r2,zero,81b730 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
  81b68c:	e0bfee83 	ldbu	r2,-70(fp)
  81b690:	10803fcc 	andi	r2,r2,255
  81b694:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  81b698:	d1204517 	ldw	r4,-32492(gp)
  81b69c:	e17ffd04 	addi	r5,fp,-12
  81b6a0:	08218d40 	call	8218d4 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b6a4:	0005303a 	rdctl	r2,status
  81b6a8:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b6ac:	e0ffdf17 	ldw	r3,-132(fp)
  81b6b0:	00bfff84 	movi	r2,-2
  81b6b4:	1884703a 	and	r2,r3,r2
  81b6b8:	1001703a 	wrctl	status,r2
  
  return context;
  81b6bc:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
  81b6c0:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
  81b6c4:	e0bffd0b 	ldhu	r2,-12(fp)
  81b6c8:	10bfffcc 	andi	r2,r2,65535
  81b6cc:	1004c03a 	cmpne	r2,r2,zero
  81b6d0:	10000b1e 	bne	r2,zero,81b700 <__malloc_lock+0xc4>
  81b6d4:	d0e01017 	ldw	r3,-32704(gp)
  81b6d8:	e0bfe117 	ldw	r2,-124(fp)
  81b6dc:	10c0081e 	bne	r2,r3,81b700 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
  81b6e0:	d0a04417 	ldw	r2,-32496(gp)
  81b6e4:	10800044 	addi	r2,r2,1
  81b6e8:	d0a04415 	stw	r2,-32496(gp)
  81b6ec:	e0bfe017 	ldw	r2,-128(fp)
  81b6f0:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b6f4:	e0bfde17 	ldw	r2,-136(fp)
  81b6f8:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
  81b6fc:	00000c06 	br	81b730 <__malloc_lock+0xf4>
  81b700:	e0bfe017 	ldw	r2,-128(fp)
  81b704:	e0bfdd15 	stw	r2,-140(fp)
  81b708:	e0bfdd17 	ldw	r2,-140(fp)
  81b70c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  81b710:	d1204517 	ldw	r4,-32492(gp)
  81b714:	e1bffe84 	addi	r6,fp,-6
  81b718:	000b883a 	mov	r5,zero
  81b71c:	08213b40 	call	8213b4 <OSSemPend>
    locks  = 1;
  81b720:	00800044 	movi	r2,1
  81b724:	d0a04415 	stw	r2,-32496(gp)
    lockid = id;
  81b728:	e0bfe117 	ldw	r2,-124(fp)
  81b72c:	d0a01015 	stw	r2,-32704(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  81b730:	e037883a 	mov	sp,fp
  81b734:	dfc00117 	ldw	ra,4(sp)
  81b738:	df000017 	ldw	fp,0(sp)
  81b73c:	dec00204 	addi	sp,sp,8
  81b740:	f800283a 	ret

0081b744 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  81b744:	defff804 	addi	sp,sp,-32
  81b748:	dfc00715 	stw	ra,28(sp)
  81b74c:	df000615 	stw	fp,24(sp)
  81b750:	df000604 	addi	fp,sp,24
  81b754:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81b758:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
  81b75c:	008020f4 	movhi	r2,131
  81b760:	10a9de44 	addi	r2,r2,-22663
  81b764:	10800003 	ldbu	r2,0(r2)
  81b768:	10803fcc 	andi	r2,r2,255
  81b76c:	10800058 	cmpnei	r2,r2,1
  81b770:	1000231e 	bne	r2,zero,81b800 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b774:	0005303a 	rdctl	r2,status
  81b778:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b77c:	e0fffd17 	ldw	r3,-12(fp)
  81b780:	00bfff84 	movi	r2,-2
  81b784:	1884703a 	and	r2,r3,r2
  81b788:	1001703a 	wrctl	status,r2
  
  return context;
  81b78c:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
  81b790:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
  81b794:	d0a04417 	ldw	r2,-32496(gp)
  81b798:	1004c03a 	cmpne	r2,r2,zero
  81b79c:	1000051e 	bne	r2,zero,81b7b4 <__malloc_unlock+0x70>
  81b7a0:	e0bffe17 	ldw	r2,-8(fp)
  81b7a4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b7a8:	e0bffc17 	ldw	r2,-16(fp)
  81b7ac:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  81b7b0:	00001306 	br	81b800 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  81b7b4:	d0a04417 	ldw	r2,-32496(gp)
  81b7b8:	10bfffc4 	addi	r2,r2,-1
  81b7bc:	d0a04415 	stw	r2,-32496(gp)
  81b7c0:	d0a04417 	ldw	r2,-32496(gp)
  81b7c4:	1004c03a 	cmpne	r2,r2,zero
  81b7c8:	1000091e 	bne	r2,zero,81b7f0 <__malloc_unlock+0xac>
  {
    lockid = -1;
  81b7cc:	00bfffc4 	movi	r2,-1
  81b7d0:	d0a01015 	stw	r2,-32704(gp)
  81b7d4:	e0bffe17 	ldw	r2,-8(fp)
  81b7d8:	e0bffb15 	stw	r2,-20(fp)
  81b7dc:	e0bffb17 	ldw	r2,-20(fp)
  81b7e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  81b7e4:	d1204517 	ldw	r4,-32492(gp)
  81b7e8:	08217ac0 	call	8217ac <OSSemPost>
  81b7ec:	00000406 	br	81b800 <__malloc_unlock+0xbc>
  81b7f0:	e0bffe17 	ldw	r2,-8(fp)
  81b7f4:	e0bffa15 	stw	r2,-24(fp)
  81b7f8:	e0bffa17 	ldw	r2,-24(fp)
  81b7fc:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  81b800:	e037883a 	mov	sp,fp
  81b804:	dfc00117 	ldw	ra,4(sp)
  81b808:	df000017 	ldw	fp,0(sp)
  81b80c:	dec00204 	addi	sp,sp,8
  81b810:	f800283a 	ret

0081b814 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  81b814:	defff604 	addi	sp,sp,-40
  81b818:	dfc00915 	stw	ra,36(sp)
  81b81c:	df000815 	stw	fp,32(sp)
  81b820:	df000804 	addi	fp,sp,32
  81b824:	e13ffc15 	stw	r4,-16(fp)
  81b828:	e17ffd15 	stw	r5,-12(fp)
  81b82c:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81b830:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  81b834:	e0bffe17 	ldw	r2,-8(fp)
  81b838:	1004c03a 	cmpne	r2,r2,zero
  81b83c:	1000021e 	bne	r2,zero,81b848 <OSEventNameGet+0x34>
        return (0);
  81b840:	e03fff15 	stw	zero,-4(fp)
  81b844:	00003906 	br	81b92c <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  81b848:	e0bffc17 	ldw	r2,-16(fp)
  81b84c:	1004c03a 	cmpne	r2,r2,zero
  81b850:	1000051e 	bne	r2,zero,81b868 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  81b854:	e0fffe17 	ldw	r3,-8(fp)
  81b858:	00800104 	movi	r2,4
  81b85c:	18800005 	stb	r2,0(r3)
        return (0);
  81b860:	e03fff15 	stw	zero,-4(fp)
  81b864:	00003106 	br	81b92c <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  81b868:	e0bffd17 	ldw	r2,-12(fp)
  81b86c:	1004c03a 	cmpne	r2,r2,zero
  81b870:	1000051e 	bne	r2,zero,81b888 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  81b874:	e0fffe17 	ldw	r3,-8(fp)
  81b878:	00800304 	movi	r2,12
  81b87c:	18800005 	stb	r2,0(r3)
        return (0);
  81b880:	e03fff15 	stw	zero,-4(fp)
  81b884:	00002906 	br	81b92c <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81b888:	d0a05403 	ldbu	r2,-32432(gp)
  81b88c:	10803fcc 	andi	r2,r2,255
  81b890:	1005003a 	cmpeq	r2,r2,zero
  81b894:	1000051e 	bne	r2,zero,81b8ac <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
  81b898:	e0fffe17 	ldw	r3,-8(fp)
  81b89c:	00800444 	movi	r2,17
  81b8a0:	18800005 	stb	r2,0(r3)
        return (0);
  81b8a4:	e03fff15 	stw	zero,-4(fp)
  81b8a8:	00002006 	br	81b92c <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
  81b8ac:	e0bffc17 	ldw	r2,-16(fp)
  81b8b0:	10800003 	ldbu	r2,0(r2)
  81b8b4:	10803fcc 	andi	r2,r2,255
  81b8b8:	10bfffc4 	addi	r2,r2,-1
  81b8bc:	10800128 	cmpgeui	r2,r2,4
  81b8c0:	1000161e 	bne	r2,zero,81b91c <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b8c4:	0005303a 	rdctl	r2,status
  81b8c8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b8cc:	e0fff917 	ldw	r3,-28(fp)
  81b8d0:	00bfff84 	movi	r2,-2
  81b8d4:	1884703a 	and	r2,r3,r2
  81b8d8:	1001703a 	wrctl	status,r2
  
  return context;
  81b8dc:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  81b8e0:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  81b8e4:	e0bffc17 	ldw	r2,-16(fp)
  81b8e8:	11400384 	addi	r5,r2,14
  81b8ec:	e13ffd17 	ldw	r4,-12(fp)
  81b8f0:	081d3980 	call	81d398 <OS_StrCopy>
  81b8f4:	e0bffb05 	stb	r2,-20(fp)
  81b8f8:	e0bffa17 	ldw	r2,-24(fp)
  81b8fc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b900:	e0bff817 	ldw	r2,-32(fp)
  81b904:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81b908:	e0bffe17 	ldw	r2,-8(fp)
  81b90c:	10000005 	stb	zero,0(r2)
    return (len);
  81b910:	e0bffb03 	ldbu	r2,-20(fp)
  81b914:	e0bfff15 	stw	r2,-4(fp)
  81b918:	00000406 	br	81b92c <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  81b91c:	e0fffe17 	ldw	r3,-8(fp)
  81b920:	00800044 	movi	r2,1
  81b924:	18800005 	stb	r2,0(r3)
             return (0);
  81b928:	e03fff15 	stw	zero,-4(fp)
  81b92c:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
  81b930:	e037883a 	mov	sp,fp
  81b934:	dfc00117 	ldw	ra,4(sp)
  81b938:	df000017 	ldw	fp,0(sp)
  81b93c:	dec00204 	addi	sp,sp,8
  81b940:	f800283a 	ret

0081b944 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  81b944:	defff604 	addi	sp,sp,-40
  81b948:	dfc00915 	stw	ra,36(sp)
  81b94c:	df000815 	stw	fp,32(sp)
  81b950:	df000804 	addi	fp,sp,32
  81b954:	e13ffd15 	stw	r4,-12(fp)
  81b958:	e17ffe15 	stw	r5,-8(fp)
  81b95c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81b960:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  81b964:	e0bfff17 	ldw	r2,-4(fp)
  81b968:	1005003a 	cmpeq	r2,r2,zero
  81b96c:	1000411e 	bne	r2,zero,81ba74 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  81b970:	e0bffd17 	ldw	r2,-12(fp)
  81b974:	1004c03a 	cmpne	r2,r2,zero
  81b978:	1000041e 	bne	r2,zero,81b98c <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  81b97c:	e0ffff17 	ldw	r3,-4(fp)
  81b980:	00800104 	movi	r2,4
  81b984:	18800005 	stb	r2,0(r3)
        return;
  81b988:	00003a06 	br	81ba74 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  81b98c:	e0bffe17 	ldw	r2,-8(fp)
  81b990:	1004c03a 	cmpne	r2,r2,zero
  81b994:	1000041e 	bne	r2,zero,81b9a8 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  81b998:	e0ffff17 	ldw	r3,-4(fp)
  81b99c:	00800304 	movi	r2,12
  81b9a0:	18800005 	stb	r2,0(r3)
        return;
  81b9a4:	00003306 	br	81ba74 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81b9a8:	d0a05403 	ldbu	r2,-32432(gp)
  81b9ac:	10803fcc 	andi	r2,r2,255
  81b9b0:	1005003a 	cmpeq	r2,r2,zero
  81b9b4:	1000041e 	bne	r2,zero,81b9c8 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
  81b9b8:	e0ffff17 	ldw	r3,-4(fp)
  81b9bc:	00800484 	movi	r2,18
  81b9c0:	18800005 	stb	r2,0(r3)
        return;
  81b9c4:	00002b06 	br	81ba74 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
  81b9c8:	e0bffd17 	ldw	r2,-12(fp)
  81b9cc:	10800003 	ldbu	r2,0(r2)
  81b9d0:	10803fcc 	andi	r2,r2,255
  81b9d4:	10bfffc4 	addi	r2,r2,-1
  81b9d8:	10800128 	cmpgeui	r2,r2,4
  81b9dc:	10000f1e 	bne	r2,zero,81ba1c <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b9e0:	0005303a 	rdctl	r2,status
  81b9e4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b9e8:	e0fffa17 	ldw	r3,-24(fp)
  81b9ec:	00bfff84 	movi	r2,-2
  81b9f0:	1884703a 	and	r2,r3,r2
  81b9f4:	1001703a 	wrctl	status,r2
  
  return context;
  81b9f8:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  81b9fc:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  81ba00:	e13ffe17 	ldw	r4,-8(fp)
  81ba04:	081d4180 	call	81d418 <OS_StrLen>
  81ba08:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  81ba0c:	e0bffc03 	ldbu	r2,-16(fp)
  81ba10:	10800828 	cmpgeui	r2,r2,32
  81ba14:	1000051e 	bne	r2,zero,81ba2c <OSEventNameSet+0xe8>
  81ba18:	00000c06 	br	81ba4c <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  81ba1c:	e0ffff17 	ldw	r3,-4(fp)
  81ba20:	00800044 	movi	r2,1
  81ba24:	18800005 	stb	r2,0(r3)
             return;
  81ba28:	00001206 	br	81ba74 <OSEventNameSet+0x130>
  81ba2c:	e0bffb17 	ldw	r2,-20(fp)
  81ba30:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81ba34:	e0bff917 	ldw	r2,-28(fp)
  81ba38:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  81ba3c:	e0ffff17 	ldw	r3,-4(fp)
  81ba40:	008002c4 	movi	r2,11
  81ba44:	18800005 	stb	r2,0(r3)
        return;
  81ba48:	00000a06 	br	81ba74 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  81ba4c:	e0bffd17 	ldw	r2,-12(fp)
  81ba50:	11000384 	addi	r4,r2,14
  81ba54:	e17ffe17 	ldw	r5,-8(fp)
  81ba58:	081d3980 	call	81d398 <OS_StrCopy>
  81ba5c:	e0bffb17 	ldw	r2,-20(fp)
  81ba60:	e0bff815 	stw	r2,-32(fp)
  81ba64:	e0bff817 	ldw	r2,-32(fp)
  81ba68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81ba6c:	e0bfff17 	ldw	r2,-4(fp)
  81ba70:	10000005 	stb	zero,0(r2)
}
  81ba74:	e037883a 	mov	sp,fp
  81ba78:	dfc00117 	ldw	ra,4(sp)
  81ba7c:	df000017 	ldw	fp,0(sp)
  81ba80:	dec00204 	addi	sp,sp,8
  81ba84:	f800283a 	ret

0081ba88 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  81ba88:	deffe704 	addi	sp,sp,-100
  81ba8c:	dfc01815 	stw	ra,96(sp)
  81ba90:	df001715 	stw	fp,92(sp)
  81ba94:	df001704 	addi	fp,sp,92
  81ba98:	e13ff615 	stw	r4,-40(fp)
  81ba9c:	e17ff715 	stw	r5,-36(fp)
  81baa0:	e1bff815 	stw	r6,-32(fp)
  81baa4:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  81baa8:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  81baac:	e0800217 	ldw	r2,8(fp)
  81bab0:	1004c03a 	cmpne	r2,r2,zero
  81bab4:	1000021e 	bne	r2,zero,81bac0 <OSEventPendMulti+0x38>
        return (0);
  81bab8:	e03fff15 	stw	zero,-4(fp)
  81babc:	00019906 	br	81c124 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  81bac0:	e0bff617 	ldw	r2,-40(fp)
  81bac4:	1004c03a 	cmpne	r2,r2,zero
  81bac8:	1000051e 	bne	r2,zero,81bae0 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
  81bacc:	e0c00217 	ldw	r3,8(fp)
  81bad0:	00800104 	movi	r2,4
  81bad4:	18800005 	stb	r2,0(r3)
        return (0);
  81bad8:	e03fff15 	stw	zero,-4(fp)
  81badc:	00019106 	br	81c124 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  81bae0:	e0bff717 	ldw	r2,-36(fp)
  81bae4:	1004c03a 	cmpne	r2,r2,zero
  81bae8:	1000051e 	bne	r2,zero,81bb00 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
  81baec:	e0c00217 	ldw	r3,8(fp)
  81baf0:	00800104 	movi	r2,4
  81baf4:	18800005 	stb	r2,0(r3)
        return (0);
  81baf8:	e03fff15 	stw	zero,-4(fp)
  81bafc:	00018906 	br	81c124 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  81bb00:	e0bff817 	ldw	r2,-32(fp)
  81bb04:	1004c03a 	cmpne	r2,r2,zero
  81bb08:	1000051e 	bne	r2,zero,81bb20 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
  81bb0c:	e0c00217 	ldw	r3,8(fp)
  81bb10:	00800104 	movi	r2,4
  81bb14:	18800005 	stb	r2,0(r3)
        return (0);
  81bb18:	e03fff15 	stw	zero,-4(fp)
  81bb1c:	00018106 	br	81c124 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  81bb20:	e0bff717 	ldw	r2,-36(fp)
  81bb24:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  81bb28:	e0bff617 	ldw	r2,-40(fp)
  81bb2c:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
  81bb30:	e0bff517 	ldw	r2,-44(fp)
  81bb34:	10800017 	ldw	r2,0(r2)
  81bb38:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
  81bb3c:	00001806 	br	81bba0 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  81bb40:	e0bff417 	ldw	r2,-48(fp)
  81bb44:	10800003 	ldbu	r2,0(r2)
  81bb48:	10803fcc 	andi	r2,r2,255
  81bb4c:	e0bffe15 	stw	r2,-8(fp)
  81bb50:	e0fffe17 	ldw	r3,-8(fp)
  81bb54:	188000a0 	cmpeqi	r2,r3,2
  81bb58:	10000b1e 	bne	r2,zero,81bb88 <OSEventPendMulti+0x100>
  81bb5c:	e0fffe17 	ldw	r3,-8(fp)
  81bb60:	188000e0 	cmpeqi	r2,r3,3
  81bb64:	1000081e 	bne	r2,zero,81bb88 <OSEventPendMulti+0x100>
  81bb68:	e0fffe17 	ldw	r3,-8(fp)
  81bb6c:	18800060 	cmpeqi	r2,r3,1
  81bb70:	1000051e 	bne	r2,zero,81bb88 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  81bb74:	e0c00217 	ldw	r3,8(fp)
  81bb78:	00800044 	movi	r2,1
  81bb7c:	18800005 	stb	r2,0(r3)
                 return (0);
  81bb80:	e03fff15 	stw	zero,-4(fp)
  81bb84:	00016706 	br	81c124 <OSEventPendMulti+0x69c>
        }
        pevents++;
  81bb88:	e0bff517 	ldw	r2,-44(fp)
  81bb8c:	10800104 	addi	r2,r2,4
  81bb90:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  81bb94:	e0bff517 	ldw	r2,-44(fp)
  81bb98:	10800017 	ldw	r2,0(r2)
  81bb9c:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  81bba0:	e0bff417 	ldw	r2,-48(fp)
  81bba4:	1004c03a 	cmpne	r2,r2,zero
  81bba8:	103fe51e 	bne	r2,zero,81bb40 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  81bbac:	d0a05403 	ldbu	r2,-32432(gp)
  81bbb0:	10803fcc 	andi	r2,r2,255
  81bbb4:	1005003a 	cmpeq	r2,r2,zero
  81bbb8:	1000051e 	bne	r2,zero,81bbd0 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  81bbbc:	e0c00217 	ldw	r3,8(fp)
  81bbc0:	00800084 	movi	r2,2
  81bbc4:	18800005 	stb	r2,0(r3)
        return (0);
  81bbc8:	e03fff15 	stw	zero,-4(fp)
  81bbcc:	00015506 	br	81c124 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  81bbd0:	d0a04603 	ldbu	r2,-32488(gp)
  81bbd4:	10803fcc 	andi	r2,r2,255
  81bbd8:	1005003a 	cmpeq	r2,r2,zero
  81bbdc:	1000051e 	bne	r2,zero,81bbf4 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  81bbe0:	e0c00217 	ldw	r3,8(fp)
  81bbe4:	00800344 	movi	r2,13
  81bbe8:	18800005 	stb	r2,0(r3)
        return (0);
  81bbec:	e03fff15 	stw	zero,-4(fp)
  81bbf0:	00014c06 	br	81c124 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81bbf4:	0005303a 	rdctl	r2,status
  81bbf8:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81bbfc:	e0ffef17 	ldw	r3,-68(fp)
  81bc00:	00bfff84 	movi	r2,-2
  81bc04:	1884703a 	and	r2,r3,r2
  81bc08:	1001703a 	wrctl	status,r2
  
  return context;
  81bc0c:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  81bc10:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
  81bc14:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
  81bc18:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  81bc1c:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
  81bc20:	e0bff617 	ldw	r2,-40(fp)
  81bc24:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
  81bc28:	e0bff517 	ldw	r2,-44(fp)
  81bc2c:	10800017 	ldw	r2,0(r2)
  81bc30:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  81bc34:	00008f06 	br	81be74 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
  81bc38:	e0bff417 	ldw	r2,-48(fp)
  81bc3c:	10800003 	ldbu	r2,0(r2)
  81bc40:	10803fcc 	andi	r2,r2,255
  81bc44:	e0bffd15 	stw	r2,-12(fp)
  81bc48:	e0fffd17 	ldw	r3,-12(fp)
  81bc4c:	188000a0 	cmpeqi	r2,r3,2
  81bc50:	1000441e 	bne	r2,zero,81bd64 <OSEventPendMulti+0x2dc>
  81bc54:	e0fffd17 	ldw	r3,-12(fp)
  81bc58:	188000e0 	cmpeqi	r2,r3,3
  81bc5c:	1000041e 	bne	r2,zero,81bc70 <OSEventPendMulti+0x1e8>
  81bc60:	e0fffd17 	ldw	r3,-12(fp)
  81bc64:	18800060 	cmpeqi	r2,r3,1
  81bc68:	1000211e 	bne	r2,zero,81bcf0 <OSEventPendMulti+0x268>
  81bc6c:	00006f06 	br	81be2c <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  81bc70:	e0bff417 	ldw	r2,-48(fp)
  81bc74:	1080020b 	ldhu	r2,8(r2)
  81bc78:	10bfffcc 	andi	r2,r2,65535
  81bc7c:	1005003a 	cmpeq	r2,r2,zero
  81bc80:	1000171e 	bne	r2,zero,81bce0 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  81bc84:	e0bff417 	ldw	r2,-48(fp)
  81bc88:	1080020b 	ldhu	r2,8(r2)
  81bc8c:	10bfffc4 	addi	r2,r2,-1
  81bc90:	1007883a 	mov	r3,r2
  81bc94:	e0bff417 	ldw	r2,-48(fp)
  81bc98:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  81bc9c:	e0fff717 	ldw	r3,-36(fp)
  81bca0:	e0bff417 	ldw	r2,-48(fp)
  81bca4:	18800015 	stw	r2,0(r3)
  81bca8:	e0bff717 	ldw	r2,-36(fp)
  81bcac:	10800104 	addi	r2,r2,4
  81bcb0:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
  81bcb4:	00800044 	movi	r2,1
  81bcb8:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  81bcbc:	e0bff817 	ldw	r2,-32(fp)
  81bcc0:	10000015 	stw	zero,0(r2)
  81bcc4:	e0bff817 	ldw	r2,-32(fp)
  81bcc8:	10800104 	addi	r2,r2,4
  81bccc:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
  81bcd0:	e0bff18b 	ldhu	r2,-58(fp)
  81bcd4:	10800044 	addi	r2,r2,1
  81bcd8:	e0bff18d 	sth	r2,-58(fp)
  81bcdc:	00005f06 	br	81be5c <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  81bce0:	e0bff103 	ldbu	r2,-60(fp)
  81bce4:	10800054 	ori	r2,r2,1
  81bce8:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  81bcec:	00005b06 	br	81be5c <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  81bcf0:	e0bff417 	ldw	r2,-48(fp)
  81bcf4:	10800117 	ldw	r2,4(r2)
  81bcf8:	1005003a 	cmpeq	r2,r2,zero
  81bcfc:	1000151e 	bne	r2,zero,81bd54 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  81bd00:	e0bff417 	ldw	r2,-48(fp)
  81bd04:	10c00117 	ldw	r3,4(r2)
  81bd08:	e0bff817 	ldw	r2,-32(fp)
  81bd0c:	10c00015 	stw	r3,0(r2)
  81bd10:	e0bff817 	ldw	r2,-32(fp)
  81bd14:	10800104 	addi	r2,r2,4
  81bd18:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
  81bd1c:	e0bff417 	ldw	r2,-48(fp)
  81bd20:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  81bd24:	e0fff717 	ldw	r3,-36(fp)
  81bd28:	e0bff417 	ldw	r2,-48(fp)
  81bd2c:	18800015 	stw	r2,0(r3)
  81bd30:	e0bff717 	ldw	r2,-36(fp)
  81bd34:	10800104 	addi	r2,r2,4
  81bd38:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
  81bd3c:	00800044 	movi	r2,1
  81bd40:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  81bd44:	e0bff18b 	ldhu	r2,-58(fp)
  81bd48:	10800044 	addi	r2,r2,1
  81bd4c:	e0bff18d 	sth	r2,-58(fp)
  81bd50:	00004206 	br	81be5c <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  81bd54:	e0bff103 	ldbu	r2,-60(fp)
  81bd58:	10800094 	ori	r2,r2,2
  81bd5c:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  81bd60:	00003e06 	br	81be5c <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  81bd64:	e0bff417 	ldw	r2,-48(fp)
  81bd68:	10800117 	ldw	r2,4(r2)
  81bd6c:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  81bd70:	e0bff317 	ldw	r2,-52(fp)
  81bd74:	1080058b 	ldhu	r2,22(r2)
  81bd78:	10bfffcc 	andi	r2,r2,65535
  81bd7c:	1005003a 	cmpeq	r2,r2,zero
  81bd80:	1000261e 	bne	r2,zero,81be1c <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  81bd84:	e0bff317 	ldw	r2,-52(fp)
  81bd88:	11000417 	ldw	r4,16(r2)
  81bd8c:	20c00017 	ldw	r3,0(r4)
  81bd90:	e0bff817 	ldw	r2,-32(fp)
  81bd94:	10c00015 	stw	r3,0(r2)
  81bd98:	e0bff817 	ldw	r2,-32(fp)
  81bd9c:	10800104 	addi	r2,r2,4
  81bda0:	e0bff815 	stw	r2,-32(fp)
  81bda4:	20c00104 	addi	r3,r4,4
  81bda8:	e0bff317 	ldw	r2,-52(fp)
  81bdac:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  81bdb0:	e0bff317 	ldw	r2,-52(fp)
  81bdb4:	10c00417 	ldw	r3,16(r2)
  81bdb8:	e0bff317 	ldw	r2,-52(fp)
  81bdbc:	10800217 	ldw	r2,8(r2)
  81bdc0:	1880041e 	bne	r3,r2,81bdd4 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  81bdc4:	e0bff317 	ldw	r2,-52(fp)
  81bdc8:	10c00117 	ldw	r3,4(r2)
  81bdcc:	e0bff317 	ldw	r2,-52(fp)
  81bdd0:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  81bdd4:	e0bff317 	ldw	r2,-52(fp)
  81bdd8:	1080058b 	ldhu	r2,22(r2)
  81bddc:	10bfffc4 	addi	r2,r2,-1
  81bde0:	1007883a 	mov	r3,r2
  81bde4:	e0bff317 	ldw	r2,-52(fp)
  81bde8:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  81bdec:	e0fff717 	ldw	r3,-36(fp)
  81bdf0:	e0bff417 	ldw	r2,-48(fp)
  81bdf4:	18800015 	stw	r2,0(r3)
  81bdf8:	e0bff717 	ldw	r2,-36(fp)
  81bdfc:	10800104 	addi	r2,r2,4
  81be00:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
  81be04:	00800044 	movi	r2,1
  81be08:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  81be0c:	e0bff18b 	ldhu	r2,-58(fp)
  81be10:	10800044 	addi	r2,r2,1
  81be14:	e0bff18d 	sth	r2,-58(fp)
  81be18:	00001006 	br	81be5c <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  81be1c:	e0bff103 	ldbu	r2,-60(fp)
  81be20:	10800114 	ori	r2,r2,4
  81be24:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  81be28:	00000c06 	br	81be5c <OSEventPendMulti+0x3d4>
  81be2c:	e0bff017 	ldw	r2,-64(fp)
  81be30:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81be34:	e0bfee17 	ldw	r2,-72(fp)
  81be38:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  81be3c:	e0bff717 	ldw	r2,-36(fp)
  81be40:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  81be44:	e0c00217 	ldw	r3,8(fp)
  81be48:	00800044 	movi	r2,1
  81be4c:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
  81be50:	e0bff18b 	ldhu	r2,-58(fp)
  81be54:	e0bfff15 	stw	r2,-4(fp)
  81be58:	0000b206 	br	81c124 <OSEventPendMulti+0x69c>
        }
        pevents++;
  81be5c:	e0bff517 	ldw	r2,-44(fp)
  81be60:	10800104 	addi	r2,r2,4
  81be64:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  81be68:	e0bff517 	ldw	r2,-44(fp)
  81be6c:	10800017 	ldw	r2,0(r2)
  81be70:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  81be74:	e0bff417 	ldw	r2,-48(fp)
  81be78:	1004c03a 	cmpne	r2,r2,zero
  81be7c:	103f6e1e 	bne	r2,zero,81bc38 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  81be80:	e0bff203 	ldbu	r2,-56(fp)
  81be84:	10800058 	cmpnei	r2,r2,1
  81be88:	10000b1e 	bne	r2,zero,81beb8 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  81be8c:	e0bff717 	ldw	r2,-36(fp)
  81be90:	10000015 	stw	zero,0(r2)
  81be94:	e0bff017 	ldw	r2,-64(fp)
  81be98:	e0bfed15 	stw	r2,-76(fp)
  81be9c:	e0bfed17 	ldw	r2,-76(fp)
  81bea0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  81bea4:	e0800217 	ldw	r2,8(fp)
  81bea8:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  81beac:	e0fff18b 	ldhu	r3,-58(fp)
  81beb0:	e0ffff15 	stw	r3,-4(fp)
  81beb4:	00009b06 	br	81c124 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  81beb8:	d1205517 	ldw	r4,-32428(gp)
  81bebc:	d0a05517 	ldw	r2,-32428(gp)
  81bec0:	10c00c03 	ldbu	r3,48(r2)
  81bec4:	e0bff103 	ldbu	r2,-60(fp)
  81bec8:	1884b03a 	or	r2,r3,r2
  81becc:	1007883a 	mov	r3,r2
  81bed0:	00bfe004 	movi	r2,-128
  81bed4:	1884b03a 	or	r2,r3,r2
  81bed8:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  81bedc:	d0a05517 	ldw	r2,-32428(gp)
  81bee0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  81bee4:	d0e05517 	ldw	r3,-32428(gp)
  81bee8:	e0bff90b 	ldhu	r2,-28(fp)
  81beec:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  81bef0:	e13ff617 	ldw	r4,-40(fp)
  81bef4:	081cab80 	call	81cab8 <OS_EventTaskWaitMulti>
  81bef8:	e0bff017 	ldw	r2,-64(fp)
  81befc:	e0bfec15 	stw	r2,-80(fp)
  81bf00:	e0bfec17 	ldw	r2,-80(fp)
  81bf04:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  81bf08:	081d2540 	call	81d254 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81bf0c:	0005303a 	rdctl	r2,status
  81bf10:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81bf14:	e0ffeb17 	ldw	r3,-84(fp)
  81bf18:	00bfff84 	movi	r2,-2
  81bf1c:	1884703a 	and	r2,r3,r2
  81bf20:	1001703a 	wrctl	status,r2
  
  return context;
  81bf24:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
  81bf28:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  81bf2c:	d0a05517 	ldw	r2,-32428(gp)
  81bf30:	10800c43 	ldbu	r2,49(r2)
  81bf34:	10803fcc 	andi	r2,r2,255
  81bf38:	e0bffc15 	stw	r2,-16(fp)
  81bf3c:	e0fffc17 	ldw	r3,-16(fp)
  81bf40:	1805003a 	cmpeq	r2,r3,zero
  81bf44:	1000041e 	bne	r2,zero,81bf58 <OSEventPendMulti+0x4d0>
  81bf48:	e0fffc17 	ldw	r3,-16(fp)
  81bf4c:	188000a0 	cmpeqi	r2,r3,2
  81bf50:	1000011e 	bne	r2,zero,81bf58 <OSEventPendMulti+0x4d0>
  81bf54:	00001906 	br	81bfbc <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  81bf58:	d0a05517 	ldw	r2,-32428(gp)
  81bf5c:	10800717 	ldw	r2,28(r2)
  81bf60:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  81bf64:	e0bff417 	ldw	r2,-48(fp)
  81bf68:	1005003a 	cmpeq	r2,r2,zero
  81bf6c:	10000c1e 	bne	r2,zero,81bfa0 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  81bf70:	e0fff717 	ldw	r3,-36(fp)
  81bf74:	e0bff417 	ldw	r2,-48(fp)
  81bf78:	18800015 	stw	r2,0(r3)
  81bf7c:	e0bff717 	ldw	r2,-36(fp)
  81bf80:	10800104 	addi	r2,r2,4
  81bf84:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  81bf88:	e0bff717 	ldw	r2,-36(fp)
  81bf8c:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  81bf90:	e0bff18b 	ldhu	r2,-58(fp)
  81bf94:	10800044 	addi	r2,r2,1
  81bf98:	e0bff18d 	sth	r2,-58(fp)
  81bf9c:	00000a06 	br	81bfc8 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  81bfa0:	d0a05517 	ldw	r2,-32428(gp)
  81bfa4:	00c00044 	movi	r3,1
  81bfa8:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  81bfac:	d1205517 	ldw	r4,-32428(gp)
  81bfb0:	e17ff617 	ldw	r5,-40(fp)
  81bfb4:	081ccc40 	call	81ccc4 <OS_EventTaskRemoveMulti>
             }
			 break;
  81bfb8:	00000306 	br	81bfc8 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  81bfbc:	d1205517 	ldw	r4,-32428(gp)
  81bfc0:	e17ff617 	ldw	r5,-40(fp)
  81bfc4:	081ccc40 	call	81ccc4 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
  81bfc8:	d0a05517 	ldw	r2,-32428(gp)
  81bfcc:	10800c43 	ldbu	r2,49(r2)
  81bfd0:	10803fcc 	andi	r2,r2,255
  81bfd4:	e0bffb15 	stw	r2,-20(fp)
  81bfd8:	e0fffb17 	ldw	r3,-20(fp)
  81bfdc:	1805003a 	cmpeq	r2,r3,zero
  81bfe0:	1000041e 	bne	r2,zero,81bff4 <OSEventPendMulti+0x56c>
  81bfe4:	e0fffb17 	ldw	r3,-20(fp)
  81bfe8:	188000a0 	cmpeqi	r2,r3,2
  81bfec:	10002c1e 	bne	r2,zero,81c0a0 <OSEventPendMulti+0x618>
  81bff0:	00003406 	br	81c0c4 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  81bff4:	e0bff417 	ldw	r2,-48(fp)
  81bff8:	10800003 	ldbu	r2,0(r2)
  81bffc:	10803fcc 	andi	r2,r2,255
  81c000:	e0bffa15 	stw	r2,-24(fp)
  81c004:	e0fffa17 	ldw	r3,-24(fp)
  81c008:	18800050 	cmplti	r2,r3,1
  81c00c:	1000151e 	bne	r2,zero,81c064 <OSEventPendMulti+0x5dc>
  81c010:	e0fffa17 	ldw	r3,-24(fp)
  81c014:	188000d0 	cmplti	r2,r3,3
  81c018:	10000a1e 	bne	r2,zero,81c044 <OSEventPendMulti+0x5bc>
  81c01c:	e0fffa17 	ldw	r3,-24(fp)
  81c020:	188000e0 	cmpeqi	r2,r3,3
  81c024:	1000011e 	bne	r2,zero,81c02c <OSEventPendMulti+0x5a4>
  81c028:	00000e06 	br	81c064 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  81c02c:	e0bff817 	ldw	r2,-32(fp)
  81c030:	10000015 	stw	zero,0(r2)
  81c034:	e0bff817 	ldw	r2,-32(fp)
  81c038:	10800104 	addi	r2,r2,4
  81c03c:	e0bff815 	stw	r2,-32(fp)
                      break;
  81c040:	00001406 	br	81c094 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  81c044:	d0a05517 	ldw	r2,-32428(gp)
  81c048:	10c00917 	ldw	r3,36(r2)
  81c04c:	e0bff817 	ldw	r2,-32(fp)
  81c050:	10c00015 	stw	r3,0(r2)
  81c054:	e0bff817 	ldw	r2,-32(fp)
  81c058:	10800104 	addi	r2,r2,4
  81c05c:	e0bff815 	stw	r2,-32(fp)
                      break;
  81c060:	00000c06 	br	81c094 <OSEventPendMulti+0x60c>
  81c064:	e0bff017 	ldw	r2,-64(fp)
  81c068:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c06c:	e0bfea17 	ldw	r2,-88(fp)
  81c070:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  81c074:	e0bff717 	ldw	r2,-36(fp)
  81c078:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  81c07c:	e0c00217 	ldw	r3,8(fp)
  81c080:	00800044 	movi	r2,1
  81c084:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
  81c088:	e0bff18b 	ldhu	r2,-58(fp)
  81c08c:	e0bfff15 	stw	r2,-4(fp)
  81c090:	00002406 	br	81c124 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
  81c094:	e0800217 	ldw	r2,8(fp)
  81c098:	10000005 	stb	zero,0(r2)
             break;
  81c09c:	00001106 	br	81c0e4 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  81c0a0:	e0bff817 	ldw	r2,-32(fp)
  81c0a4:	10000015 	stw	zero,0(r2)
  81c0a8:	e0bff817 	ldw	r2,-32(fp)
  81c0ac:	10800104 	addi	r2,r2,4
  81c0b0:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  81c0b4:	e0c00217 	ldw	r3,8(fp)
  81c0b8:	00800384 	movi	r2,14
  81c0bc:	18800005 	stb	r2,0(r3)
             break;
  81c0c0:	00000806 	br	81c0e4 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  81c0c4:	e0bff817 	ldw	r2,-32(fp)
  81c0c8:	10000015 	stw	zero,0(r2)
  81c0cc:	e0bff817 	ldw	r2,-32(fp)
  81c0d0:	10800104 	addi	r2,r2,4
  81c0d4:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  81c0d8:	e0c00217 	ldw	r3,8(fp)
  81c0dc:	00800284 	movi	r2,10
  81c0e0:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  81c0e4:	d0a05517 	ldw	r2,-32428(gp)
  81c0e8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  81c0ec:	d0a05517 	ldw	r2,-32428(gp)
  81c0f0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  81c0f4:	d0a05517 	ldw	r2,-32428(gp)
  81c0f8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  81c0fc:	d0a05517 	ldw	r2,-32428(gp)
  81c100:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  81c104:	d0a05517 	ldw	r2,-32428(gp)
  81c108:	10000915 	stw	zero,36(r2)
  81c10c:	e0bff017 	ldw	r2,-64(fp)
  81c110:	e0bfe915 	stw	r2,-92(fp)
  81c114:	e0bfe917 	ldw	r2,-92(fp)
  81c118:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  81c11c:	e0fff18b 	ldhu	r3,-58(fp)
  81c120:	e0ffff15 	stw	r3,-4(fp)
  81c124:	e0bfff17 	ldw	r2,-4(fp)
}
  81c128:	e037883a 	mov	sp,fp
  81c12c:	dfc00117 	ldw	ra,4(sp)
  81c130:	df000017 	ldw	fp,0(sp)
  81c134:	dec00204 	addi	sp,sp,8
  81c138:	f800283a 	ret

0081c13c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  81c13c:	defffe04 	addi	sp,sp,-8
  81c140:	dfc00115 	stw	ra,4(sp)
  81c144:	df000015 	stw	fp,0(sp)
  81c148:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  81c14c:	0826e3c0 	call	826e3c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  81c150:	081cf0c0 	call	81cf0c <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  81c154:	081cf500 	call	81cf50 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  81c158:	081d0b40 	call	81d0b4 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  81c15c:	081ce300 	call	81ce30 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  81c160:	081f1640 	call	81f164 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  81c164:	081fb3c0 	call	81fb3c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  81c168:	0820e940 	call	820e94 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  81c16c:	081cfbc0 	call	81cfbc <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  81c170:	081d0380 	call	81d038 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  81c174:	0826e580 	call	826e58 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  81c178:	081d93c0 	call	81d93c <OSDebugInit>
#endif
}
  81c17c:	e037883a 	mov	sp,fp
  81c180:	dfc00117 	ldw	ra,4(sp)
  81c184:	df000017 	ldw	fp,0(sp)
  81c188:	dec00204 	addi	sp,sp,8
  81c18c:	f800283a 	ret

0081c190 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  81c190:	defffc04 	addi	sp,sp,-16
  81c194:	df000315 	stw	fp,12(sp)
  81c198:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81c19c:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
  81c1a0:	d0a04643 	ldbu	r2,-32487(gp)
  81c1a4:	10803fcc 	andi	r2,r2,255
  81c1a8:	10800058 	cmpnei	r2,r2,1
  81c1ac:	1000131e 	bne	r2,zero,81c1fc <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c1b0:	0005303a 	rdctl	r2,status
  81c1b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c1b8:	e0fffe17 	ldw	r3,-8(fp)
  81c1bc:	00bfff84 	movi	r2,-2
  81c1c0:	1884703a 	and	r2,r3,r2
  81c1c4:	1001703a 	wrctl	status,r2
  
  return context;
  81c1c8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  81c1cc:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
  81c1d0:	d0a05403 	ldbu	r2,-32432(gp)
  81c1d4:	10803fcc 	andi	r2,r2,255
  81c1d8:	10803fe0 	cmpeqi	r2,r2,255
  81c1dc:	1000031e 	bne	r2,zero,81c1ec <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  81c1e0:	d0a05403 	ldbu	r2,-32432(gp)
  81c1e4:	10800044 	addi	r2,r2,1
  81c1e8:	d0a05405 	stb	r2,-32432(gp)
  81c1ec:	e0bfff17 	ldw	r2,-4(fp)
  81c1f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c1f4:	e0bffd17 	ldw	r2,-12(fp)
  81c1f8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
  81c1fc:	e037883a 	mov	sp,fp
  81c200:	df000017 	ldw	fp,0(sp)
  81c204:	dec00104 	addi	sp,sp,4
  81c208:	f800283a 	ret

0081c20c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  81c20c:	defffb04 	addi	sp,sp,-20
  81c210:	dfc00415 	stw	ra,16(sp)
  81c214:	df000315 	stw	fp,12(sp)
  81c218:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81c21c:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
  81c220:	d0a04643 	ldbu	r2,-32487(gp)
  81c224:	10803fcc 	andi	r2,r2,255
  81c228:	10800058 	cmpnei	r2,r2,1
  81c22c:	1000321e 	bne	r2,zero,81c2f8 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c230:	0005303a 	rdctl	r2,status
  81c234:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c238:	e0fffe17 	ldw	r3,-8(fp)
  81c23c:	00bfff84 	movi	r2,-2
  81c240:	1884703a 	and	r2,r3,r2
  81c244:	1001703a 	wrctl	status,r2
  
  return context;
  81c248:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  81c24c:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  81c250:	d0a05403 	ldbu	r2,-32432(gp)
  81c254:	10803fcc 	andi	r2,r2,255
  81c258:	1005003a 	cmpeq	r2,r2,zero
  81c25c:	1000031e 	bne	r2,zero,81c26c <OSIntExit+0x60>
            OSIntNesting--;
  81c260:	d0a05403 	ldbu	r2,-32432(gp)
  81c264:	10bfffc4 	addi	r2,r2,-1
  81c268:	d0a05405 	stb	r2,-32432(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  81c26c:	d0a05403 	ldbu	r2,-32432(gp)
  81c270:	10803fcc 	andi	r2,r2,255
  81c274:	1004c03a 	cmpne	r2,r2,zero
  81c278:	10001b1e 	bne	r2,zero,81c2e8 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  81c27c:	d0a04603 	ldbu	r2,-32488(gp)
  81c280:	10803fcc 	andi	r2,r2,255
  81c284:	1004c03a 	cmpne	r2,r2,zero
  81c288:	1000171e 	bne	r2,zero,81c2e8 <OSIntExit+0xdc>
                OS_SchedNew();
  81c28c:	081d3280 	call	81d328 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  81c290:	d0a04803 	ldbu	r2,-32480(gp)
  81c294:	d0e04843 	ldbu	r3,-32479(gp)
  81c298:	11003fcc 	andi	r4,r2,255
  81c29c:	18803fcc 	andi	r2,r3,255
  81c2a0:	20801126 	beq	r4,r2,81c2e8 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  81c2a4:	d0a04803 	ldbu	r2,-32480(gp)
  81c2a8:	10803fcc 	andi	r2,r2,255
  81c2ac:	00c02534 	movhi	r3,148
  81c2b0:	18f74604 	addi	r3,r3,-8936
  81c2b4:	1085883a 	add	r2,r2,r2
  81c2b8:	1085883a 	add	r2,r2,r2
  81c2bc:	10c5883a 	add	r2,r2,r3
  81c2c0:	10800017 	ldw	r2,0(r2)
  81c2c4:	d0a05015 	stw	r2,-32448(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  81c2c8:	d0e05017 	ldw	r3,-32448(gp)
  81c2cc:	18800e17 	ldw	r2,56(r3)
  81c2d0:	10800044 	addi	r2,r2,1
  81c2d4:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  81c2d8:	d0a04b17 	ldw	r2,-32468(gp)
  81c2dc:	10800044 	addi	r2,r2,1
  81c2e0:	d0a04b15 	stw	r2,-32468(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  81c2e4:	08269c80 	call	8269c8 <OSCtxSw>
  81c2e8:	e0bfff17 	ldw	r2,-4(fp)
  81c2ec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c2f0:	e0bffd17 	ldw	r2,-12(fp)
  81c2f4:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  81c2f8:	e037883a 	mov	sp,fp
  81c2fc:	dfc00117 	ldw	ra,4(sp)
  81c300:	df000017 	ldw	fp,0(sp)
  81c304:	dec00204 	addi	sp,sp,8
  81c308:	f800283a 	ret

0081c30c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  81c30c:	defffc04 	addi	sp,sp,-16
  81c310:	df000315 	stw	fp,12(sp)
  81c314:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81c318:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  81c31c:	d0a04643 	ldbu	r2,-32487(gp)
  81c320:	10803fcc 	andi	r2,r2,255
  81c324:	10800058 	cmpnei	r2,r2,1
  81c328:	1000171e 	bne	r2,zero,81c388 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c32c:	0005303a 	rdctl	r2,status
  81c330:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c334:	e0fffe17 	ldw	r3,-8(fp)
  81c338:	00bfff84 	movi	r2,-2
  81c33c:	1884703a 	and	r2,r3,r2
  81c340:	1001703a 	wrctl	status,r2
  
  return context;
  81c344:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  81c348:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  81c34c:	d0a05403 	ldbu	r2,-32432(gp)
  81c350:	10803fcc 	andi	r2,r2,255
  81c354:	1004c03a 	cmpne	r2,r2,zero
  81c358:	1000071e 	bne	r2,zero,81c378 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  81c35c:	d0a04603 	ldbu	r2,-32488(gp)
  81c360:	10803fcc 	andi	r2,r2,255
  81c364:	10803fe0 	cmpeqi	r2,r2,255
  81c368:	1000031e 	bne	r2,zero,81c378 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  81c36c:	d0a04603 	ldbu	r2,-32488(gp)
  81c370:	10800044 	addi	r2,r2,1
  81c374:	d0a04605 	stb	r2,-32488(gp)
  81c378:	e0bfff17 	ldw	r2,-4(fp)
  81c37c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c380:	e0bffd17 	ldw	r2,-12(fp)
  81c384:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  81c388:	e037883a 	mov	sp,fp
  81c38c:	df000017 	ldw	fp,0(sp)
  81c390:	dec00104 	addi	sp,sp,4
  81c394:	f800283a 	ret

0081c398 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  81c398:	defff804 	addi	sp,sp,-32
  81c39c:	dfc00715 	stw	ra,28(sp)
  81c3a0:	df000615 	stw	fp,24(sp)
  81c3a4:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81c3a8:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  81c3ac:	d0a04643 	ldbu	r2,-32487(gp)
  81c3b0:	10803fcc 	andi	r2,r2,255
  81c3b4:	10800058 	cmpnei	r2,r2,1
  81c3b8:	10002b1e 	bne	r2,zero,81c468 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c3bc:	0005303a 	rdctl	r2,status
  81c3c0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c3c4:	e0fffe17 	ldw	r3,-8(fp)
  81c3c8:	00bfff84 	movi	r2,-2
  81c3cc:	1884703a 	and	r2,r3,r2
  81c3d0:	1001703a 	wrctl	status,r2
  
  return context;
  81c3d4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  81c3d8:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  81c3dc:	d0a04603 	ldbu	r2,-32488(gp)
  81c3e0:	10803fcc 	andi	r2,r2,255
  81c3e4:	1005003a 	cmpeq	r2,r2,zero
  81c3e8:	10001b1e 	bne	r2,zero,81c458 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  81c3ec:	d0a04603 	ldbu	r2,-32488(gp)
  81c3f0:	10bfffc4 	addi	r2,r2,-1
  81c3f4:	d0a04605 	stb	r2,-32488(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  81c3f8:	d0a04603 	ldbu	r2,-32488(gp)
  81c3fc:	10803fcc 	andi	r2,r2,255
  81c400:	1004c03a 	cmpne	r2,r2,zero
  81c404:	10000f1e 	bne	r2,zero,81c444 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  81c408:	d0a05403 	ldbu	r2,-32432(gp)
  81c40c:	10803fcc 	andi	r2,r2,255
  81c410:	1004c03a 	cmpne	r2,r2,zero
  81c414:	1000061e 	bne	r2,zero,81c430 <OSSchedUnlock+0x98>
  81c418:	e0bfff17 	ldw	r2,-4(fp)
  81c41c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c420:	e0bffd17 	ldw	r2,-12(fp)
  81c424:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  81c428:	081d2540 	call	81d254 <OS_Sched>
  81c42c:	00000e06 	br	81c468 <OSSchedUnlock+0xd0>
  81c430:	e0bfff17 	ldw	r2,-4(fp)
  81c434:	e0bffc15 	stw	r2,-16(fp)
  81c438:	e0bffc17 	ldw	r2,-16(fp)
  81c43c:	1001703a 	wrctl	status,r2
  81c440:	00000906 	br	81c468 <OSSchedUnlock+0xd0>
  81c444:	e0bfff17 	ldw	r2,-4(fp)
  81c448:	e0bffb15 	stw	r2,-20(fp)
  81c44c:	e0bffb17 	ldw	r2,-20(fp)
  81c450:	1001703a 	wrctl	status,r2
  81c454:	00000406 	br	81c468 <OSSchedUnlock+0xd0>
  81c458:	e0bfff17 	ldw	r2,-4(fp)
  81c45c:	e0bffa15 	stw	r2,-24(fp)
  81c460:	e0bffa17 	ldw	r2,-24(fp)
  81c464:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  81c468:	e037883a 	mov	sp,fp
  81c46c:	dfc00117 	ldw	ra,4(sp)
  81c470:	df000017 	ldw	fp,0(sp)
  81c474:	dec00204 	addi	sp,sp,8
  81c478:	f800283a 	ret

0081c47c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  81c47c:	defffe04 	addi	sp,sp,-8
  81c480:	dfc00115 	stw	ra,4(sp)
  81c484:	df000015 	stw	fp,0(sp)
  81c488:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  81c48c:	d0a04643 	ldbu	r2,-32487(gp)
  81c490:	10803fcc 	andi	r2,r2,255
  81c494:	1004c03a 	cmpne	r2,r2,zero
  81c498:	10000f1e 	bne	r2,zero,81c4d8 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  81c49c:	081d3280 	call	81d328 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  81c4a0:	d0a04803 	ldbu	r2,-32480(gp)
  81c4a4:	d0a04845 	stb	r2,-32479(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  81c4a8:	d0a04803 	ldbu	r2,-32480(gp)
  81c4ac:	10803fcc 	andi	r2,r2,255
  81c4b0:	00c02534 	movhi	r3,148
  81c4b4:	18f74604 	addi	r3,r3,-8936
  81c4b8:	1085883a 	add	r2,r2,r2
  81c4bc:	1085883a 	add	r2,r2,r2
  81c4c0:	10c5883a 	add	r2,r2,r3
  81c4c4:	10800017 	ldw	r2,0(r2)
  81c4c8:	d0a05015 	stw	r2,-32448(gp)
        OSTCBCur      = OSTCBHighRdy;
  81c4cc:	d0a05017 	ldw	r2,-32448(gp)
  81c4d0:	d0a05515 	stw	r2,-32428(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  81c4d4:	0826a540 	call	826a54 <OSStartHighRdy>
    }
}
  81c4d8:	e037883a 	mov	sp,fp
  81c4dc:	dfc00117 	ldw	ra,4(sp)
  81c4e0:	df000017 	ldw	fp,0(sp)
  81c4e4:	dec00204 	addi	sp,sp,8
  81c4e8:	f800283a 	ret

0081c4ec <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  81c4ec:	defff904 	addi	sp,sp,-28
  81c4f0:	dfc00615 	stw	ra,24(sp)
  81c4f4:	df000515 	stw	fp,20(sp)
  81c4f8:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81c4fc:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  81c500:	01000084 	movi	r4,2
  81c504:	08235480 	call	823548 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c508:	0005303a 	rdctl	r2,status
  81c50c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c510:	e0fffe17 	ldw	r3,-8(fp)
  81c514:	00bfff84 	movi	r2,-2
  81c518:	1884703a 	and	r2,r3,r2
  81c51c:	1001703a 	wrctl	status,r2
  
  return context;
  81c520:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  81c524:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  81c528:	d0204715 	stw	zero,-32484(gp)
  81c52c:	e0bfff17 	ldw	r2,-4(fp)
  81c530:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c534:	e0bffd17 	ldw	r2,-12(fp)
  81c538:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  81c53c:	01001904 	movi	r4,100
  81c540:	08235480 	call	823548 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c544:	0005303a 	rdctl	r2,status
  81c548:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c54c:	e0fffc17 	ldw	r3,-16(fp)
  81c550:	00bfff84 	movi	r2,-2
  81c554:	1884703a 	and	r2,r3,r2
  81c558:	1001703a 	wrctl	status,r2
  
  return context;
  81c55c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  81c560:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  81c564:	d0a04717 	ldw	r2,-32484(gp)
  81c568:	d0a04c15 	stw	r2,-32464(gp)
    OSStatRdy    = OS_TRUE;
  81c56c:	00800044 	movi	r2,1
  81c570:	d0a05805 	stb	r2,-32416(gp)
  81c574:	e0bfff17 	ldw	r2,-4(fp)
  81c578:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c57c:	e0bffb17 	ldw	r2,-20(fp)
  81c580:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  81c584:	e037883a 	mov	sp,fp
  81c588:	dfc00117 	ldw	ra,4(sp)
  81c58c:	df000017 	ldw	fp,0(sp)
  81c590:	dec00204 	addi	sp,sp,8
  81c594:	f800283a 	ret

0081c598 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  81c598:	defff604 	addi	sp,sp,-40
  81c59c:	dfc00915 	stw	ra,36(sp)
  81c5a0:	df000815 	stw	fp,32(sp)
  81c5a4:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  81c5a8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  81c5ac:	0826e200 	call	826e20 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c5b0:	0005303a 	rdctl	r2,status
  81c5b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c5b8:	e0fffb17 	ldw	r3,-20(fp)
  81c5bc:	00bfff84 	movi	r2,-2
  81c5c0:	1884703a 	and	r2,r3,r2
  81c5c4:	1001703a 	wrctl	status,r2
  
  return context;
  81c5c8:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  81c5cc:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
  81c5d0:	d0a05617 	ldw	r2,-32424(gp)
  81c5d4:	10800044 	addi	r2,r2,1
  81c5d8:	d0a05615 	stw	r2,-32424(gp)
  81c5dc:	e0bffc17 	ldw	r2,-16(fp)
  81c5e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c5e4:	e0bffa17 	ldw	r2,-24(fp)
  81c5e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  81c5ec:	d0a04643 	ldbu	r2,-32487(gp)
  81c5f0:	10803fcc 	andi	r2,r2,255
  81c5f4:	10800058 	cmpnei	r2,r2,1
  81c5f8:	1000721e 	bne	r2,zero,81c7c4 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  81c5fc:	d0a04a03 	ldbu	r2,-32472(gp)
  81c600:	10803fcc 	andi	r2,r2,255
  81c604:	e0bfff15 	stw	r2,-4(fp)
  81c608:	e0ffff17 	ldw	r3,-4(fp)
  81c60c:	18800060 	cmpeqi	r2,r3,1
  81c610:	10000a1e 	bne	r2,zero,81c63c <OSTimeTick+0xa4>
  81c614:	e0ffff17 	ldw	r3,-4(fp)
  81c618:	188000a0 	cmpeqi	r2,r3,2
  81c61c:	1000091e 	bne	r2,zero,81c644 <OSTimeTick+0xac>
  81c620:	e0ffff17 	ldw	r3,-4(fp)
  81c624:	1805003a 	cmpeq	r2,r3,zero
  81c628:	1000011e 	bne	r2,zero,81c630 <OSTimeTick+0x98>
  81c62c:	00000a06 	br	81c658 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  81c630:	00800044 	movi	r2,1
  81c634:	e0bffd05 	stb	r2,-12(fp)
                 break;
  81c638:	00000a06 	br	81c664 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  81c63c:	e03ffd05 	stb	zero,-12(fp)
                 break;
  81c640:	00000806 	br	81c664 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  81c644:	00800044 	movi	r2,1
  81c648:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  81c64c:	00800044 	movi	r2,1
  81c650:	d0a04a05 	stb	r2,-32472(gp)
                 break;
  81c654:	00000306 	br	81c664 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  81c658:	00800044 	movi	r2,1
  81c65c:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  81c660:	d0204a05 	stb	zero,-32472(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  81c664:	e0bffd03 	ldbu	r2,-12(fp)
  81c668:	1005003a 	cmpeq	r2,r2,zero
  81c66c:	1000551e 	bne	r2,zero,81c7c4 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  81c670:	d0a04917 	ldw	r2,-32476(gp)
  81c674:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  81c678:	00004d06 	br	81c7b0 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c67c:	0005303a 	rdctl	r2,status
  81c680:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c684:	e0fff917 	ldw	r3,-28(fp)
  81c688:	00bfff84 	movi	r2,-2
  81c68c:	1884703a 	and	r2,r3,r2
  81c690:	1001703a 	wrctl	status,r2
  
  return context;
  81c694:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
  81c698:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  81c69c:	e0bffe17 	ldw	r2,-8(fp)
  81c6a0:	10800b8b 	ldhu	r2,46(r2)
  81c6a4:	10bfffcc 	andi	r2,r2,65535
  81c6a8:	1005003a 	cmpeq	r2,r2,zero
  81c6ac:	1000391e 	bne	r2,zero,81c794 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  81c6b0:	e0bffe17 	ldw	r2,-8(fp)
  81c6b4:	10800b8b 	ldhu	r2,46(r2)
  81c6b8:	10bfffc4 	addi	r2,r2,-1
  81c6bc:	1007883a 	mov	r3,r2
  81c6c0:	e0bffe17 	ldw	r2,-8(fp)
  81c6c4:	10c00b8d 	sth	r3,46(r2)
  81c6c8:	e0bffe17 	ldw	r2,-8(fp)
  81c6cc:	10800b8b 	ldhu	r2,46(r2)
  81c6d0:	10bfffcc 	andi	r2,r2,65535
  81c6d4:	1004c03a 	cmpne	r2,r2,zero
  81c6d8:	10002e1e 	bne	r2,zero,81c794 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  81c6dc:	e0bffe17 	ldw	r2,-8(fp)
  81c6e0:	10800c03 	ldbu	r2,48(r2)
  81c6e4:	10803fcc 	andi	r2,r2,255
  81c6e8:	10800dcc 	andi	r2,r2,55
  81c6ec:	1005003a 	cmpeq	r2,r2,zero
  81c6f0:	10000b1e 	bne	r2,zero,81c720 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  81c6f4:	e0bffe17 	ldw	r2,-8(fp)
  81c6f8:	10c00c03 	ldbu	r3,48(r2)
  81c6fc:	00bff204 	movi	r2,-56
  81c700:	1884703a 	and	r2,r3,r2
  81c704:	1007883a 	mov	r3,r2
  81c708:	e0bffe17 	ldw	r2,-8(fp)
  81c70c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  81c710:	e0fffe17 	ldw	r3,-8(fp)
  81c714:	00800044 	movi	r2,1
  81c718:	18800c45 	stb	r2,49(r3)
  81c71c:	00000206 	br	81c728 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  81c720:	e0bffe17 	ldw	r2,-8(fp)
  81c724:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  81c728:	e0bffe17 	ldw	r2,-8(fp)
  81c72c:	10800c03 	ldbu	r2,48(r2)
  81c730:	10803fcc 	andi	r2,r2,255
  81c734:	1080020c 	andi	r2,r2,8
  81c738:	1004c03a 	cmpne	r2,r2,zero
  81c73c:	1000151e 	bne	r2,zero,81c794 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  81c740:	e0bffe17 	ldw	r2,-8(fp)
  81c744:	10c00d83 	ldbu	r3,54(r2)
  81c748:	d0a05203 	ldbu	r2,-32440(gp)
  81c74c:	1884b03a 	or	r2,r3,r2
  81c750:	d0a05205 	stb	r2,-32440(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  81c754:	e0bffe17 	ldw	r2,-8(fp)
  81c758:	10800d03 	ldbu	r2,52(r2)
  81c75c:	11003fcc 	andi	r4,r2,255
  81c760:	e0bffe17 	ldw	r2,-8(fp)
  81c764:	10800d03 	ldbu	r2,52(r2)
  81c768:	10c03fcc 	andi	r3,r2,255
  81c76c:	d0a05244 	addi	r2,gp,-32439
  81c770:	1885883a 	add	r2,r3,r2
  81c774:	10c00003 	ldbu	r3,0(r2)
  81c778:	e0bffe17 	ldw	r2,-8(fp)
  81c77c:	10800d43 	ldbu	r2,53(r2)
  81c780:	1884b03a 	or	r2,r3,r2
  81c784:	1007883a 	mov	r3,r2
  81c788:	d0a05244 	addi	r2,gp,-32439
  81c78c:	2085883a 	add	r2,r4,r2
  81c790:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  81c794:	e0bffe17 	ldw	r2,-8(fp)
  81c798:	10800517 	ldw	r2,20(r2)
  81c79c:	e0bffe15 	stw	r2,-8(fp)
  81c7a0:	e0bffc17 	ldw	r2,-16(fp)
  81c7a4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c7a8:	e0bff817 	ldw	r2,-32(fp)
  81c7ac:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  81c7b0:	e0bffe17 	ldw	r2,-8(fp)
  81c7b4:	10800c83 	ldbu	r2,50(r2)
  81c7b8:	10803fcc 	andi	r2,r2,255
  81c7bc:	10800518 	cmpnei	r2,r2,20
  81c7c0:	103fae1e 	bne	r2,zero,81c67c <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  81c7c4:	e037883a 	mov	sp,fp
  81c7c8:	dfc00117 	ldw	ra,4(sp)
  81c7cc:	df000017 	ldw	fp,0(sp)
  81c7d0:	dec00204 	addi	sp,sp,8
  81c7d4:	f800283a 	ret

0081c7d8 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  81c7d8:	deffff04 	addi	sp,sp,-4
  81c7dc:	df000015 	stw	fp,0(sp)
  81c7e0:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  81c7e4:	00804784 	movi	r2,286
}
  81c7e8:	e037883a 	mov	sp,fp
  81c7ec:	df000017 	ldw	fp,0(sp)
  81c7f0:	dec00104 	addi	sp,sp,4
  81c7f4:	f800283a 	ret

0081c7f8 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  81c7f8:	deffff04 	addi	sp,sp,-4
  81c7fc:	df000015 	stw	fp,0(sp)
  81c800:	d839883a 	mov	fp,sp
}
  81c804:	e037883a 	mov	sp,fp
  81c808:	df000017 	ldw	fp,0(sp)
  81c80c:	dec00104 	addi	sp,sp,4
  81c810:	f800283a 	ret

0081c814 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  81c814:	defff804 	addi	sp,sp,-32
  81c818:	dfc00715 	stw	ra,28(sp)
  81c81c:	df000615 	stw	fp,24(sp)
  81c820:	df000604 	addi	fp,sp,24
  81c824:	e13ffc15 	stw	r4,-16(fp)
  81c828:	e17ffd15 	stw	r5,-12(fp)
  81c82c:	e1bffe05 	stb	r6,-8(fp)
  81c830:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  81c834:	e0bffc17 	ldw	r2,-16(fp)
  81c838:	10800283 	ldbu	r2,10(r2)
  81c83c:	10c03fcc 	andi	r3,r2,255
  81c840:	008020f4 	movhi	r2,131
  81c844:	10a28804 	addi	r2,r2,-30176
  81c848:	10c5883a 	add	r2,r2,r3
  81c84c:	10800003 	ldbu	r2,0(r2)
  81c850:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  81c854:	e0fffa83 	ldbu	r3,-22(fp)
  81c858:	e0bffc17 	ldw	r2,-16(fp)
  81c85c:	1885883a 	add	r2,r3,r2
  81c860:	10800204 	addi	r2,r2,8
  81c864:	108000c3 	ldbu	r2,3(r2)
  81c868:	10c03fcc 	andi	r3,r2,255
  81c86c:	008020f4 	movhi	r2,131
  81c870:	10a28804 	addi	r2,r2,-30176
  81c874:	10c5883a 	add	r2,r2,r3
  81c878:	10800003 	ldbu	r2,0(r2)
  81c87c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  81c880:	e0bffa83 	ldbu	r2,-22(fp)
  81c884:	100490fa 	slli	r2,r2,3
  81c888:	1007883a 	mov	r3,r2
  81c88c:	e0bffa43 	ldbu	r2,-23(fp)
  81c890:	1885883a 	add	r2,r3,r2
  81c894:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  81c898:	e0bffa03 	ldbu	r2,-24(fp)
  81c89c:	00c02534 	movhi	r3,148
  81c8a0:	18f74604 	addi	r3,r3,-8936
  81c8a4:	1085883a 	add	r2,r2,r2
  81c8a8:	1085883a 	add	r2,r2,r2
  81c8ac:	10c5883a 	add	r2,r2,r3
  81c8b0:	10800017 	ldw	r2,0(r2)
  81c8b4:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  81c8b8:	e0bffb17 	ldw	r2,-20(fp)
  81c8bc:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  81c8c0:	e0fffb17 	ldw	r3,-20(fp)
  81c8c4:	e0bffd17 	ldw	r2,-12(fp)
  81c8c8:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  81c8cc:	e0bffb17 	ldw	r2,-20(fp)
  81c8d0:	10800c03 	ldbu	r2,48(r2)
  81c8d4:	1007883a 	mov	r3,r2
  81c8d8:	e0bffe03 	ldbu	r2,-8(fp)
  81c8dc:	0084303a 	nor	r2,zero,r2
  81c8e0:	1884703a 	and	r2,r3,r2
  81c8e4:	1007883a 	mov	r3,r2
  81c8e8:	e0bffb17 	ldw	r2,-20(fp)
  81c8ec:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  81c8f0:	e0fffb17 	ldw	r3,-20(fp)
  81c8f4:	e0bfff03 	ldbu	r2,-4(fp)
  81c8f8:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  81c8fc:	e0bffb17 	ldw	r2,-20(fp)
  81c900:	10800c03 	ldbu	r2,48(r2)
  81c904:	10803fcc 	andi	r2,r2,255
  81c908:	1080020c 	andi	r2,r2,8
  81c90c:	1004c03a 	cmpne	r2,r2,zero
  81c910:	1000111e 	bne	r2,zero,81c958 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  81c914:	e0bffb17 	ldw	r2,-20(fp)
  81c918:	10c00d83 	ldbu	r3,54(r2)
  81c91c:	d0a05203 	ldbu	r2,-32440(gp)
  81c920:	1884b03a 	or	r2,r3,r2
  81c924:	d0a05205 	stb	r2,-32440(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  81c928:	e13ffa83 	ldbu	r4,-22(fp)
  81c92c:	e0fffa83 	ldbu	r3,-22(fp)
  81c930:	d0a05244 	addi	r2,gp,-32439
  81c934:	1885883a 	add	r2,r3,r2
  81c938:	10c00003 	ldbu	r3,0(r2)
  81c93c:	e0bffb17 	ldw	r2,-20(fp)
  81c940:	10800d43 	ldbu	r2,53(r2)
  81c944:	1884b03a 	or	r2,r3,r2
  81c948:	1007883a 	mov	r3,r2
  81c94c:	d0a05244 	addi	r2,gp,-32439
  81c950:	2085883a 	add	r2,r4,r2
  81c954:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  81c958:	e13ffb17 	ldw	r4,-20(fp)
  81c95c:	e17ffc17 	ldw	r5,-16(fp)
  81c960:	081cc0c0 	call	81cc0c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  81c964:	e0bffb17 	ldw	r2,-20(fp)
  81c968:	10800817 	ldw	r2,32(r2)
  81c96c:	1005003a 	cmpeq	r2,r2,zero
  81c970:	1000071e 	bne	r2,zero,81c990 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  81c974:	e0bffb17 	ldw	r2,-20(fp)
  81c978:	11400817 	ldw	r5,32(r2)
  81c97c:	e13ffb17 	ldw	r4,-20(fp)
  81c980:	081ccc40 	call	81ccc4 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  81c984:	e0fffb17 	ldw	r3,-20(fp)
  81c988:	e0bffc17 	ldw	r2,-16(fp)
  81c98c:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
  81c990:	e0bffa03 	ldbu	r2,-24(fp)
}
  81c994:	e037883a 	mov	sp,fp
  81c998:	dfc00117 	ldw	ra,4(sp)
  81c99c:	df000017 	ldw	fp,0(sp)
  81c9a0:	dec00204 	addi	sp,sp,8
  81c9a4:	f800283a 	ret

0081c9a8 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  81c9a8:	defffd04 	addi	sp,sp,-12
  81c9ac:	df000215 	stw	fp,8(sp)
  81c9b0:	df000204 	addi	fp,sp,8
  81c9b4:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  81c9b8:	d0e05517 	ldw	r3,-32428(gp)
  81c9bc:	e0bfff17 	ldw	r2,-4(fp)
  81c9c0:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  81c9c4:	d0a05517 	ldw	r2,-32428(gp)
  81c9c8:	10800d03 	ldbu	r2,52(r2)
  81c9cc:	11003fcc 	andi	r4,r2,255
  81c9d0:	d0a05517 	ldw	r2,-32428(gp)
  81c9d4:	10800d03 	ldbu	r2,52(r2)
  81c9d8:	10c03fcc 	andi	r3,r2,255
  81c9dc:	e0bfff17 	ldw	r2,-4(fp)
  81c9e0:	1885883a 	add	r2,r3,r2
  81c9e4:	10800204 	addi	r2,r2,8
  81c9e8:	10c000c3 	ldbu	r3,3(r2)
  81c9ec:	d0a05517 	ldw	r2,-32428(gp)
  81c9f0:	10800d43 	ldbu	r2,53(r2)
  81c9f4:	1884b03a 	or	r2,r3,r2
  81c9f8:	1007883a 	mov	r3,r2
  81c9fc:	e0bfff17 	ldw	r2,-4(fp)
  81ca00:	2085883a 	add	r2,r4,r2
  81ca04:	10800204 	addi	r2,r2,8
  81ca08:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  81ca0c:	e0bfff17 	ldw	r2,-4(fp)
  81ca10:	10c00283 	ldbu	r3,10(r2)
  81ca14:	d0a05517 	ldw	r2,-32428(gp)
  81ca18:	10800d83 	ldbu	r2,54(r2)
  81ca1c:	1884b03a 	or	r2,r3,r2
  81ca20:	1007883a 	mov	r3,r2
  81ca24:	e0bfff17 	ldw	r2,-4(fp)
  81ca28:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  81ca2c:	d0a05517 	ldw	r2,-32428(gp)
  81ca30:	10800d03 	ldbu	r2,52(r2)
  81ca34:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  81ca38:	e13ffe03 	ldbu	r4,-8(fp)
  81ca3c:	e0fffe03 	ldbu	r3,-8(fp)
  81ca40:	d0a05244 	addi	r2,gp,-32439
  81ca44:	1885883a 	add	r2,r3,r2
  81ca48:	10800003 	ldbu	r2,0(r2)
  81ca4c:	1007883a 	mov	r3,r2
  81ca50:	d0a05517 	ldw	r2,-32428(gp)
  81ca54:	10800d43 	ldbu	r2,53(r2)
  81ca58:	0084303a 	nor	r2,zero,r2
  81ca5c:	1884703a 	and	r2,r3,r2
  81ca60:	1007883a 	mov	r3,r2
  81ca64:	d0a05244 	addi	r2,gp,-32439
  81ca68:	2085883a 	add	r2,r4,r2
  81ca6c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  81ca70:	e0fffe03 	ldbu	r3,-8(fp)
  81ca74:	d0a05244 	addi	r2,gp,-32439
  81ca78:	1885883a 	add	r2,r3,r2
  81ca7c:	10800003 	ldbu	r2,0(r2)
  81ca80:	10803fcc 	andi	r2,r2,255
  81ca84:	1004c03a 	cmpne	r2,r2,zero
  81ca88:	1000071e 	bne	r2,zero,81caa8 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  81ca8c:	d0a05517 	ldw	r2,-32428(gp)
  81ca90:	10800d83 	ldbu	r2,54(r2)
  81ca94:	0084303a 	nor	r2,zero,r2
  81ca98:	1007883a 	mov	r3,r2
  81ca9c:	d0a05203 	ldbu	r2,-32440(gp)
  81caa0:	1884703a 	and	r2,r3,r2
  81caa4:	d0a05205 	stb	r2,-32440(gp)
    }
}
  81caa8:	e037883a 	mov	sp,fp
  81caac:	df000017 	ldw	fp,0(sp)
  81cab0:	dec00104 	addi	sp,sp,4
  81cab4:	f800283a 	ret

0081cab8 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  81cab8:	defffb04 	addi	sp,sp,-20
  81cabc:	df000415 	stw	fp,16(sp)
  81cac0:	df000404 	addi	fp,sp,16
  81cac4:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  81cac8:	d0a05517 	ldw	r2,-32428(gp)
  81cacc:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  81cad0:	d0e05517 	ldw	r3,-32428(gp)
  81cad4:	e0bfff17 	ldw	r2,-4(fp)
  81cad8:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
  81cadc:	e0bfff17 	ldw	r2,-4(fp)
  81cae0:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
  81cae4:	e0bffe17 	ldw	r2,-8(fp)
  81cae8:	10800017 	ldw	r2,0(r2)
  81caec:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  81caf0:	00002006 	br	81cb74 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  81caf4:	d0a05517 	ldw	r2,-32428(gp)
  81caf8:	10800d03 	ldbu	r2,52(r2)
  81cafc:	11003fcc 	andi	r4,r2,255
  81cb00:	d0a05517 	ldw	r2,-32428(gp)
  81cb04:	10800d03 	ldbu	r2,52(r2)
  81cb08:	10c03fcc 	andi	r3,r2,255
  81cb0c:	e0bffd17 	ldw	r2,-12(fp)
  81cb10:	1885883a 	add	r2,r3,r2
  81cb14:	10800204 	addi	r2,r2,8
  81cb18:	10c000c3 	ldbu	r3,3(r2)
  81cb1c:	d0a05517 	ldw	r2,-32428(gp)
  81cb20:	10800d43 	ldbu	r2,53(r2)
  81cb24:	1884b03a 	or	r2,r3,r2
  81cb28:	1007883a 	mov	r3,r2
  81cb2c:	e0bffd17 	ldw	r2,-12(fp)
  81cb30:	2085883a 	add	r2,r4,r2
  81cb34:	10800204 	addi	r2,r2,8
  81cb38:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  81cb3c:	e0bffd17 	ldw	r2,-12(fp)
  81cb40:	10c00283 	ldbu	r3,10(r2)
  81cb44:	d0a05517 	ldw	r2,-32428(gp)
  81cb48:	10800d83 	ldbu	r2,54(r2)
  81cb4c:	1884b03a 	or	r2,r3,r2
  81cb50:	1007883a 	mov	r3,r2
  81cb54:	e0bffd17 	ldw	r2,-12(fp)
  81cb58:	10c00285 	stb	r3,10(r2)
        pevents++;
  81cb5c:	e0bffe17 	ldw	r2,-8(fp)
  81cb60:	10800104 	addi	r2,r2,4
  81cb64:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
  81cb68:	e0bffe17 	ldw	r2,-8(fp)
  81cb6c:	10800017 	ldw	r2,0(r2)
  81cb70:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  81cb74:	e0bffd17 	ldw	r2,-12(fp)
  81cb78:	1004c03a 	cmpne	r2,r2,zero
  81cb7c:	103fdd1e 	bne	r2,zero,81caf4 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  81cb80:	d0a05517 	ldw	r2,-32428(gp)
  81cb84:	10800d03 	ldbu	r2,52(r2)
  81cb88:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  81cb8c:	e13ffc03 	ldbu	r4,-16(fp)
  81cb90:	e0fffc03 	ldbu	r3,-16(fp)
  81cb94:	d0a05244 	addi	r2,gp,-32439
  81cb98:	1885883a 	add	r2,r3,r2
  81cb9c:	10800003 	ldbu	r2,0(r2)
  81cba0:	1007883a 	mov	r3,r2
  81cba4:	d0a05517 	ldw	r2,-32428(gp)
  81cba8:	10800d43 	ldbu	r2,53(r2)
  81cbac:	0084303a 	nor	r2,zero,r2
  81cbb0:	1884703a 	and	r2,r3,r2
  81cbb4:	1007883a 	mov	r3,r2
  81cbb8:	d0a05244 	addi	r2,gp,-32439
  81cbbc:	2085883a 	add	r2,r4,r2
  81cbc0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  81cbc4:	e0fffc03 	ldbu	r3,-16(fp)
  81cbc8:	d0a05244 	addi	r2,gp,-32439
  81cbcc:	1885883a 	add	r2,r3,r2
  81cbd0:	10800003 	ldbu	r2,0(r2)
  81cbd4:	10803fcc 	andi	r2,r2,255
  81cbd8:	1004c03a 	cmpne	r2,r2,zero
  81cbdc:	1000071e 	bne	r2,zero,81cbfc <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  81cbe0:	d0a05517 	ldw	r2,-32428(gp)
  81cbe4:	10800d83 	ldbu	r2,54(r2)
  81cbe8:	0084303a 	nor	r2,zero,r2
  81cbec:	1007883a 	mov	r3,r2
  81cbf0:	d0a05203 	ldbu	r2,-32440(gp)
  81cbf4:	1884703a 	and	r2,r3,r2
  81cbf8:	d0a05205 	stb	r2,-32440(gp)
    }
}
  81cbfc:	e037883a 	mov	sp,fp
  81cc00:	df000017 	ldw	fp,0(sp)
  81cc04:	dec00104 	addi	sp,sp,4
  81cc08:	f800283a 	ret

0081cc0c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  81cc0c:	defffc04 	addi	sp,sp,-16
  81cc10:	df000315 	stw	fp,12(sp)
  81cc14:	df000304 	addi	fp,sp,12
  81cc18:	e13ffe15 	stw	r4,-8(fp)
  81cc1c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  81cc20:	e0bffe17 	ldw	r2,-8(fp)
  81cc24:	10800d03 	ldbu	r2,52(r2)
  81cc28:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  81cc2c:	e13ffd03 	ldbu	r4,-12(fp)
  81cc30:	e0fffd03 	ldbu	r3,-12(fp)
  81cc34:	e0bfff17 	ldw	r2,-4(fp)
  81cc38:	1885883a 	add	r2,r3,r2
  81cc3c:	10800204 	addi	r2,r2,8
  81cc40:	108000c3 	ldbu	r2,3(r2)
  81cc44:	1007883a 	mov	r3,r2
  81cc48:	e0bffe17 	ldw	r2,-8(fp)
  81cc4c:	10800d43 	ldbu	r2,53(r2)
  81cc50:	0084303a 	nor	r2,zero,r2
  81cc54:	1884703a 	and	r2,r3,r2
  81cc58:	1007883a 	mov	r3,r2
  81cc5c:	e0bfff17 	ldw	r2,-4(fp)
  81cc60:	2085883a 	add	r2,r4,r2
  81cc64:	10800204 	addi	r2,r2,8
  81cc68:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
  81cc6c:	e0fffd03 	ldbu	r3,-12(fp)
  81cc70:	e0bfff17 	ldw	r2,-4(fp)
  81cc74:	1885883a 	add	r2,r3,r2
  81cc78:	10800204 	addi	r2,r2,8
  81cc7c:	108000c3 	ldbu	r2,3(r2)
  81cc80:	10803fcc 	andi	r2,r2,255
  81cc84:	1004c03a 	cmpne	r2,r2,zero
  81cc88:	10000a1e 	bne	r2,zero,81ccb4 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  81cc8c:	e0bfff17 	ldw	r2,-4(fp)
  81cc90:	10800283 	ldbu	r2,10(r2)
  81cc94:	1007883a 	mov	r3,r2
  81cc98:	e0bffe17 	ldw	r2,-8(fp)
  81cc9c:	10800d83 	ldbu	r2,54(r2)
  81cca0:	0084303a 	nor	r2,zero,r2
  81cca4:	1884703a 	and	r2,r3,r2
  81cca8:	1007883a 	mov	r3,r2
  81ccac:	e0bfff17 	ldw	r2,-4(fp)
  81ccb0:	10c00285 	stb	r3,10(r2)
    }
}
  81ccb4:	e037883a 	mov	sp,fp
  81ccb8:	df000017 	ldw	fp,0(sp)
  81ccbc:	dec00104 	addi	sp,sp,4
  81ccc0:	f800283a 	ret

0081ccc4 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  81ccc4:	defffa04 	addi	sp,sp,-24
  81ccc8:	df000515 	stw	fp,20(sp)
  81cccc:	df000504 	addi	fp,sp,20
  81ccd0:	e13ffe15 	stw	r4,-8(fp)
  81ccd4:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  81ccd8:	e0bffe17 	ldw	r2,-8(fp)
  81ccdc:	10800d03 	ldbu	r2,52(r2)
  81cce0:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
  81cce4:	e0bffe17 	ldw	r2,-8(fp)
  81cce8:	10800d83 	ldbu	r2,54(r2)
  81ccec:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
  81ccf0:	e0bffe17 	ldw	r2,-8(fp)
  81ccf4:	10800d43 	ldbu	r2,53(r2)
  81ccf8:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
  81ccfc:	e0bfff17 	ldw	r2,-4(fp)
  81cd00:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
  81cd04:	e0bffd17 	ldw	r2,-12(fp)
  81cd08:	10800017 	ldw	r2,0(r2)
  81cd0c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  81cd10:	00002606 	br	81cdac <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
  81cd14:	e13ffb83 	ldbu	r4,-18(fp)
  81cd18:	e0fffb83 	ldbu	r3,-18(fp)
  81cd1c:	e0bffc17 	ldw	r2,-16(fp)
  81cd20:	1885883a 	add	r2,r3,r2
  81cd24:	10800204 	addi	r2,r2,8
  81cd28:	108000c3 	ldbu	r2,3(r2)
  81cd2c:	1007883a 	mov	r3,r2
  81cd30:	e0bffb03 	ldbu	r2,-20(fp)
  81cd34:	0084303a 	nor	r2,zero,r2
  81cd38:	1884703a 	and	r2,r3,r2
  81cd3c:	1007883a 	mov	r3,r2
  81cd40:	e0bffc17 	ldw	r2,-16(fp)
  81cd44:	2085883a 	add	r2,r4,r2
  81cd48:	10800204 	addi	r2,r2,8
  81cd4c:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
  81cd50:	e0fffb83 	ldbu	r3,-18(fp)
  81cd54:	e0bffc17 	ldw	r2,-16(fp)
  81cd58:	1885883a 	add	r2,r3,r2
  81cd5c:	10800204 	addi	r2,r2,8
  81cd60:	108000c3 	ldbu	r2,3(r2)
  81cd64:	10803fcc 	andi	r2,r2,255
  81cd68:	1004c03a 	cmpne	r2,r2,zero
  81cd6c:	1000091e 	bne	r2,zero,81cd94 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
  81cd70:	e0bffc17 	ldw	r2,-16(fp)
  81cd74:	10800283 	ldbu	r2,10(r2)
  81cd78:	1007883a 	mov	r3,r2
  81cd7c:	e0bffb43 	ldbu	r2,-19(fp)
  81cd80:	0084303a 	nor	r2,zero,r2
  81cd84:	1884703a 	and	r2,r3,r2
  81cd88:	1007883a 	mov	r3,r2
  81cd8c:	e0bffc17 	ldw	r2,-16(fp)
  81cd90:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  81cd94:	e0bffd17 	ldw	r2,-12(fp)
  81cd98:	10800104 	addi	r2,r2,4
  81cd9c:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
  81cda0:	e0bffd17 	ldw	r2,-12(fp)
  81cda4:	10800017 	ldw	r2,0(r2)
  81cda8:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  81cdac:	e0bffc17 	ldw	r2,-16(fp)
  81cdb0:	1004c03a 	cmpne	r2,r2,zero
  81cdb4:	103fd71e 	bne	r2,zero,81cd14 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  81cdb8:	e037883a 	mov	sp,fp
  81cdbc:	df000017 	ldw	fp,0(sp)
  81cdc0:	dec00104 	addi	sp,sp,4
  81cdc4:	f800283a 	ret

0081cdc8 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  81cdc8:	defffc04 	addi	sp,sp,-16
  81cdcc:	df000315 	stw	fp,12(sp)
  81cdd0:	df000304 	addi	fp,sp,12
  81cdd4:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  81cdd8:	e0bfff17 	ldw	r2,-4(fp)
  81cddc:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  81cde0:	e0bfff17 	ldw	r2,-4(fp)
  81cde4:	108002c4 	addi	r2,r2,11
  81cde8:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  81cdec:	e03ffd05 	stb	zero,-12(fp)
  81cdf0:	00000806 	br	81ce14 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
  81cdf4:	e0bffe17 	ldw	r2,-8(fp)
  81cdf8:	10000005 	stb	zero,0(r2)
  81cdfc:	e0bffe17 	ldw	r2,-8(fp)
  81ce00:	10800044 	addi	r2,r2,1
  81ce04:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  81ce08:	e0bffd03 	ldbu	r2,-12(fp)
  81ce0c:	10800044 	addi	r2,r2,1
  81ce10:	e0bffd05 	stb	r2,-12(fp)
  81ce14:	e0bffd03 	ldbu	r2,-12(fp)
  81ce18:	108000f0 	cmpltui	r2,r2,3
  81ce1c:	103ff51e 	bne	r2,zero,81cdf4 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
  81ce20:	e037883a 	mov	sp,fp
  81ce24:	df000017 	ldw	fp,0(sp)
  81ce28:	dec00104 	addi	sp,sp,4
  81ce2c:	f800283a 	ret

0081ce30 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  81ce30:	defffb04 	addi	sp,sp,-20
  81ce34:	dfc00415 	stw	ra,16(sp)
  81ce38:	df000315 	stw	fp,12(sp)
  81ce3c:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  81ce40:	01002534 	movhi	r4,148
  81ce44:	21333204 	addi	r4,r4,-13112
  81ce48:	0142d004 	movi	r5,2880
  81ce4c:	081d1940 	call	81d194 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  81ce50:	00802534 	movhi	r2,148
  81ce54:	10b33204 	addi	r2,r2,-13112
  81ce58:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  81ce5c:	00802534 	movhi	r2,148
  81ce60:	10b33e04 	addi	r2,r2,-13064
  81ce64:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  81ce68:	e03fff0d 	sth	zero,-4(fp)
  81ce6c:	00001306 	br	81cebc <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  81ce70:	e0bffe17 	ldw	r2,-8(fp)
  81ce74:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  81ce78:	e0fffe17 	ldw	r3,-8(fp)
  81ce7c:	e0bffd17 	ldw	r2,-12(fp)
  81ce80:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  81ce84:	e0fffe17 	ldw	r3,-8(fp)
  81ce88:	00800fc4 	movi	r2,63
  81ce8c:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  81ce90:	e0bffe17 	ldw	r2,-8(fp)
  81ce94:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  81ce98:	e0bffe17 	ldw	r2,-8(fp)
  81ce9c:	10800c04 	addi	r2,r2,48
  81cea0:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  81cea4:	e0bffd17 	ldw	r2,-12(fp)
  81cea8:	10800c04 	addi	r2,r2,48
  81ceac:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  81ceb0:	e0bfff0b 	ldhu	r2,-4(fp)
  81ceb4:	10800044 	addi	r2,r2,1
  81ceb8:	e0bfff0d 	sth	r2,-4(fp)
  81cebc:	e0bfff0b 	ldhu	r2,-4(fp)
  81cec0:	10800ef0 	cmpltui	r2,r2,59
  81cec4:	103fea1e 	bne	r2,zero,81ce70 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  81cec8:	e0bffe17 	ldw	r2,-8(fp)
  81cecc:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  81ced0:	e0bffe17 	ldw	r2,-8(fp)
  81ced4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  81ced8:	e0fffe17 	ldw	r3,-8(fp)
  81cedc:	00800fc4 	movi	r2,63
  81cee0:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  81cee4:	e0bffe17 	ldw	r2,-8(fp)
  81cee8:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  81ceec:	00802534 	movhi	r2,148
  81cef0:	10b33204 	addi	r2,r2,-13112
  81cef4:	d0a05315 	stw	r2,-32436(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  81cef8:	e037883a 	mov	sp,fp
  81cefc:	dfc00117 	ldw	ra,4(sp)
  81cf00:	df000017 	ldw	fp,0(sp)
  81cf04:	dec00204 	addi	sp,sp,8
  81cf08:	f800283a 	ret

0081cf0c <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  81cf0c:	deffff04 	addi	sp,sp,-4
  81cf10:	df000015 	stw	fp,0(sp)
  81cf14:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  81cf18:	d0205615 	stw	zero,-32424(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  81cf1c:	d0205405 	stb	zero,-32432(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  81cf20:	d0204605 	stb	zero,-32488(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  81cf24:	d0204e45 	stb	zero,-32455(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  81cf28:	d0204645 	stb	zero,-32487(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  81cf2c:	d0204b15 	stw	zero,-32468(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  81cf30:	d0204715 	stw	zero,-32484(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  81cf34:	d0205915 	stw	zero,-32412(gp)
    OSIdleCtrMax  = 0L;
  81cf38:	d0204c15 	stw	zero,-32464(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  81cf3c:	d0205805 	stb	zero,-32416(gp)
#endif
}
  81cf40:	e037883a 	mov	sp,fp
  81cf44:	df000017 	ldw	fp,0(sp)
  81cf48:	dec00104 	addi	sp,sp,4
  81cf4c:	f800283a 	ret

0081cf50 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  81cf50:	defffd04 	addi	sp,sp,-12
  81cf54:	df000215 	stw	fp,8(sp)
  81cf58:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  81cf5c:	d0205205 	stb	zero,-32440(gp)
    prdytbl       = &OSRdyTbl[0];
  81cf60:	d0a05244 	addi	r2,gp,-32439
  81cf64:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  81cf68:	e03fff05 	stb	zero,-4(fp)
  81cf6c:	00000806 	br	81cf90 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
  81cf70:	e0bffe17 	ldw	r2,-8(fp)
  81cf74:	10000005 	stb	zero,0(r2)
  81cf78:	e0bffe17 	ldw	r2,-8(fp)
  81cf7c:	10800044 	addi	r2,r2,1
  81cf80:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  81cf84:	e0bfff03 	ldbu	r2,-4(fp)
  81cf88:	10800044 	addi	r2,r2,1
  81cf8c:	e0bfff05 	stb	r2,-4(fp)
  81cf90:	e0bfff03 	ldbu	r2,-4(fp)
  81cf94:	108000f0 	cmpltui	r2,r2,3
  81cf98:	103ff51e 	bne	r2,zero,81cf70 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  81cf9c:	d0204845 	stb	zero,-32479(gp)
    OSPrioHighRdy = 0;
  81cfa0:	d0204805 	stb	zero,-32480(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  81cfa4:	d0205015 	stw	zero,-32448(gp)
    OSTCBCur      = (OS_TCB *)0;
  81cfa8:	d0205515 	stw	zero,-32428(gp)
}
  81cfac:	e037883a 	mov	sp,fp
  81cfb0:	df000017 	ldw	fp,0(sp)
  81cfb4:	dec00104 	addi	sp,sp,4
  81cfb8:	f800283a 	ret

0081cfbc <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  81cfbc:	defff804 	addi	sp,sp,-32
  81cfc0:	dfc00715 	stw	ra,28(sp)
  81cfc4:	df000615 	stw	fp,24(sp)
  81cfc8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  81cfcc:	01802534 	movhi	r6,148
  81cfd0:	31b33104 	addi	r6,r6,-13116
  81cfd4:	00bfffd4 	movui	r2,65535
  81cfd8:	d8800015 	stw	r2,0(sp)
  81cfdc:	00802534 	movhi	r2,148
  81cfe0:	10b13204 	addi	r2,r2,-15160
  81cfe4:	d8800115 	stw	r2,4(sp)
  81cfe8:	00808004 	movi	r2,512
  81cfec:	d8800215 	stw	r2,8(sp)
  81cff0:	d8000315 	stw	zero,12(sp)
  81cff4:	008000c4 	movi	r2,3
  81cff8:	d8800415 	stw	r2,16(sp)
  81cffc:	010020b4 	movhi	r4,130
  81d000:	21351c04 	addi	r4,r4,-11152
  81d004:	000b883a 	mov	r5,zero
  81d008:	01c00504 	movi	r7,20
  81d00c:	08222500 	call	822250 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  81d010:	014020f4 	movhi	r5,131
  81d014:	2962c804 	addi	r5,r5,-29920
  81d018:	01000504 	movi	r4,20
  81d01c:	e1bfff04 	addi	r6,fp,-4
  81d020:	0822b840 	call	822b84 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  81d024:	e037883a 	mov	sp,fp
  81d028:	dfc00117 	ldw	ra,4(sp)
  81d02c:	df000017 	ldw	fp,0(sp)
  81d030:	dec00204 	addi	sp,sp,8
  81d034:	f800283a 	ret

0081d038 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  81d038:	defff804 	addi	sp,sp,-32
  81d03c:	dfc00715 	stw	ra,28(sp)
  81d040:	df000615 	stw	fp,24(sp)
  81d044:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  81d048:	01802534 	movhi	r6,148
  81d04c:	31b0b904 	addi	r6,r6,-15644
  81d050:	00bfff94 	movui	r2,65534
  81d054:	d8800015 	stw	r2,0(sp)
  81d058:	00802534 	movhi	r2,148
  81d05c:	10aeba04 	addi	r2,r2,-17688
  81d060:	d8800115 	stw	r2,4(sp)
  81d064:	00808004 	movi	r2,512
  81d068:	d8800215 	stw	r2,8(sp)
  81d06c:	d8000315 	stw	zero,12(sp)
  81d070:	008000c4 	movi	r2,3
  81d074:	d8800415 	stw	r2,16(sp)
  81d078:	010020b4 	movhi	r4,130
  81d07c:	21353304 	addi	r4,r4,-11060
  81d080:	000b883a 	mov	r5,zero
  81d084:	01c004c4 	movi	r7,19
  81d088:	08222500 	call	822250 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  81d08c:	014020f4 	movhi	r5,131
  81d090:	2962cc04 	addi	r5,r5,-29904
  81d094:	010004c4 	movi	r4,19
  81d098:	e1bfff04 	addi	r6,fp,-4
  81d09c:	0822b840 	call	822b84 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  81d0a0:	e037883a 	mov	sp,fp
  81d0a4:	dfc00117 	ldw	ra,4(sp)
  81d0a8:	df000017 	ldw	fp,0(sp)
  81d0ac:	dec00204 	addi	sp,sp,8
  81d0b0:	f800283a 	ret

0081d0b4 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  81d0b4:	defffb04 	addi	sp,sp,-20
  81d0b8:	dfc00415 	stw	ra,16(sp)
  81d0bc:	df000315 	stw	fp,12(sp)
  81d0c0:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  81d0c4:	01002534 	movhi	r4,148
  81d0c8:	21360204 	addi	r4,r4,-10232
  81d0cc:	01414404 	movi	r5,1296
  81d0d0:	081d1940 	call	81d194 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  81d0d4:	01002534 	movhi	r4,148
  81d0d8:	21374604 	addi	r4,r4,-8936
  81d0dc:	01401504 	movi	r5,84
  81d0e0:	081d1940 	call	81d194 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  81d0e4:	00802534 	movhi	r2,148
  81d0e8:	10b60204 	addi	r2,r2,-10232
  81d0ec:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  81d0f0:	00802534 	movhi	r2,148
  81d0f4:	10b61d04 	addi	r2,r2,-10124
  81d0f8:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  81d0fc:	e03fff05 	stb	zero,-4(fp)
  81d100:	00001106 	br	81d148 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  81d104:	e0fffe17 	ldw	r3,-8(fp)
  81d108:	e0bffd17 	ldw	r2,-12(fp)
  81d10c:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  81d110:	e0fffe17 	ldw	r3,-8(fp)
  81d114:	00800fc4 	movi	r2,63
  81d118:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  81d11c:	e0bffe17 	ldw	r2,-8(fp)
  81d120:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  81d124:	e0bffe17 	ldw	r2,-8(fp)
  81d128:	10801b04 	addi	r2,r2,108
  81d12c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  81d130:	e0bffd17 	ldw	r2,-12(fp)
  81d134:	10801b04 	addi	r2,r2,108
  81d138:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  81d13c:	e0bfff03 	ldbu	r2,-4(fp)
  81d140:	10800044 	addi	r2,r2,1
  81d144:	e0bfff05 	stb	r2,-4(fp)
  81d148:	e0bfff03 	ldbu	r2,-4(fp)
  81d14c:	108002f0 	cmpltui	r2,r2,11
  81d150:	103fec1e 	bne	r2,zero,81d104 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  81d154:	e0bffe17 	ldw	r2,-8(fp)
  81d158:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  81d15c:	e0fffe17 	ldw	r3,-8(fp)
  81d160:	00800fc4 	movi	r2,63
  81d164:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  81d168:	e0bffe17 	ldw	r2,-8(fp)
  81d16c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  81d170:	d0204915 	stw	zero,-32476(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  81d174:	00802534 	movhi	r2,148
  81d178:	10b60204 	addi	r2,r2,-10232
  81d17c:	d0a04d15 	stw	r2,-32460(gp)
}
  81d180:	e037883a 	mov	sp,fp
  81d184:	dfc00117 	ldw	ra,4(sp)
  81d188:	df000017 	ldw	fp,0(sp)
  81d18c:	dec00204 	addi	sp,sp,8
  81d190:	f800283a 	ret

0081d194 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  81d194:	defffd04 	addi	sp,sp,-12
  81d198:	df000215 	stw	fp,8(sp)
  81d19c:	df000204 	addi	fp,sp,8
  81d1a0:	e13ffe15 	stw	r4,-8(fp)
  81d1a4:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
  81d1a8:	00000806 	br	81d1cc <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  81d1ac:	e0bffe17 	ldw	r2,-8(fp)
  81d1b0:	10000005 	stb	zero,0(r2)
  81d1b4:	e0bffe17 	ldw	r2,-8(fp)
  81d1b8:	10800044 	addi	r2,r2,1
  81d1bc:	e0bffe15 	stw	r2,-8(fp)
        size--;
  81d1c0:	e0bfff0b 	ldhu	r2,-4(fp)
  81d1c4:	10bfffc4 	addi	r2,r2,-1
  81d1c8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  81d1cc:	e0bfff0b 	ldhu	r2,-4(fp)
  81d1d0:	1004c03a 	cmpne	r2,r2,zero
  81d1d4:	103ff51e 	bne	r2,zero,81d1ac <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  81d1d8:	e037883a 	mov	sp,fp
  81d1dc:	df000017 	ldw	fp,0(sp)
  81d1e0:	dec00104 	addi	sp,sp,4
  81d1e4:	f800283a 	ret

0081d1e8 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  81d1e8:	defffc04 	addi	sp,sp,-16
  81d1ec:	df000315 	stw	fp,12(sp)
  81d1f0:	df000304 	addi	fp,sp,12
  81d1f4:	e13ffd15 	stw	r4,-12(fp)
  81d1f8:	e17ffe15 	stw	r5,-8(fp)
  81d1fc:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
  81d200:	00000d06 	br	81d238 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
  81d204:	e0bffe17 	ldw	r2,-8(fp)
  81d208:	10c00003 	ldbu	r3,0(r2)
  81d20c:	e0bffd17 	ldw	r2,-12(fp)
  81d210:	10c00005 	stb	r3,0(r2)
  81d214:	e0bffd17 	ldw	r2,-12(fp)
  81d218:	10800044 	addi	r2,r2,1
  81d21c:	e0bffd15 	stw	r2,-12(fp)
  81d220:	e0bffe17 	ldw	r2,-8(fp)
  81d224:	10800044 	addi	r2,r2,1
  81d228:	e0bffe15 	stw	r2,-8(fp)
        size--;
  81d22c:	e0bfff0b 	ldhu	r2,-4(fp)
  81d230:	10bfffc4 	addi	r2,r2,-1
  81d234:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  81d238:	e0bfff0b 	ldhu	r2,-4(fp)
  81d23c:	1004c03a 	cmpne	r2,r2,zero
  81d240:	103ff01e 	bne	r2,zero,81d204 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
  81d244:	e037883a 	mov	sp,fp
  81d248:	df000017 	ldw	fp,0(sp)
  81d24c:	dec00104 	addi	sp,sp,4
  81d250:	f800283a 	ret

0081d254 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  81d254:	defffb04 	addi	sp,sp,-20
  81d258:	dfc00415 	stw	ra,16(sp)
  81d25c:	df000315 	stw	fp,12(sp)
  81d260:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  81d264:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d268:	0005303a 	rdctl	r2,status
  81d26c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d270:	e0fffe17 	ldw	r3,-8(fp)
  81d274:	00bfff84 	movi	r2,-2
  81d278:	1884703a 	and	r2,r3,r2
  81d27c:	1001703a 	wrctl	status,r2
  
  return context;
  81d280:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  81d284:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  81d288:	d0a05403 	ldbu	r2,-32432(gp)
  81d28c:	10803fcc 	andi	r2,r2,255
  81d290:	1004c03a 	cmpne	r2,r2,zero
  81d294:	10001b1e 	bne	r2,zero,81d304 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  81d298:	d0a04603 	ldbu	r2,-32488(gp)
  81d29c:	10803fcc 	andi	r2,r2,255
  81d2a0:	1004c03a 	cmpne	r2,r2,zero
  81d2a4:	1000171e 	bne	r2,zero,81d304 <OS_Sched+0xb0>
            OS_SchedNew();
  81d2a8:	081d3280 	call	81d328 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  81d2ac:	d0a04803 	ldbu	r2,-32480(gp)
  81d2b0:	d0e04843 	ldbu	r3,-32479(gp)
  81d2b4:	11003fcc 	andi	r4,r2,255
  81d2b8:	18803fcc 	andi	r2,r3,255
  81d2bc:	20801126 	beq	r4,r2,81d304 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  81d2c0:	d0a04803 	ldbu	r2,-32480(gp)
  81d2c4:	10803fcc 	andi	r2,r2,255
  81d2c8:	00c02534 	movhi	r3,148
  81d2cc:	18f74604 	addi	r3,r3,-8936
  81d2d0:	1085883a 	add	r2,r2,r2
  81d2d4:	1085883a 	add	r2,r2,r2
  81d2d8:	10c5883a 	add	r2,r2,r3
  81d2dc:	10800017 	ldw	r2,0(r2)
  81d2e0:	d0a05015 	stw	r2,-32448(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  81d2e4:	d0e05017 	ldw	r3,-32448(gp)
  81d2e8:	18800e17 	ldw	r2,56(r3)
  81d2ec:	10800044 	addi	r2,r2,1
  81d2f0:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  81d2f4:	d0a04b17 	ldw	r2,-32468(gp)
  81d2f8:	10800044 	addi	r2,r2,1
  81d2fc:	d0a04b15 	stw	r2,-32468(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  81d300:	08269c80 	call	8269c8 <OSCtxSw>
  81d304:	e0bfff17 	ldw	r2,-4(fp)
  81d308:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d30c:	e0bffd17 	ldw	r2,-12(fp)
  81d310:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  81d314:	e037883a 	mov	sp,fp
  81d318:	dfc00117 	ldw	ra,4(sp)
  81d31c:	df000017 	ldw	fp,0(sp)
  81d320:	dec00204 	addi	sp,sp,8
  81d324:	f800283a 	ret

0081d328 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  81d328:	defffe04 	addi	sp,sp,-8
  81d32c:	df000115 	stw	fp,4(sp)
  81d330:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  81d334:	d0a05203 	ldbu	r2,-32440(gp)
  81d338:	10c03fcc 	andi	r3,r2,255
  81d33c:	008020f4 	movhi	r2,131
  81d340:	10a28804 	addi	r2,r2,-30176
  81d344:	10c5883a 	add	r2,r2,r3
  81d348:	10800003 	ldbu	r2,0(r2)
  81d34c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  81d350:	e0bfff03 	ldbu	r2,-4(fp)
  81d354:	100490fa 	slli	r2,r2,3
  81d358:	1009883a 	mov	r4,r2
  81d35c:	e0ffff03 	ldbu	r3,-4(fp)
  81d360:	d0a05244 	addi	r2,gp,-32439
  81d364:	1885883a 	add	r2,r3,r2
  81d368:	10800003 	ldbu	r2,0(r2)
  81d36c:	10c03fcc 	andi	r3,r2,255
  81d370:	008020f4 	movhi	r2,131
  81d374:	10a28804 	addi	r2,r2,-30176
  81d378:	10c5883a 	add	r2,r2,r3
  81d37c:	10800003 	ldbu	r2,0(r2)
  81d380:	2085883a 	add	r2,r4,r2
  81d384:	d0a04805 	stb	r2,-32480(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  81d388:	e037883a 	mov	sp,fp
  81d38c:	df000017 	ldw	fp,0(sp)
  81d390:	dec00104 	addi	sp,sp,4
  81d394:	f800283a 	ret

0081d398 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  81d398:	defffc04 	addi	sp,sp,-16
  81d39c:	df000315 	stw	fp,12(sp)
  81d3a0:	df000304 	addi	fp,sp,12
  81d3a4:	e13ffe15 	stw	r4,-8(fp)
  81d3a8:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  81d3ac:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  81d3b0:	00000d06 	br	81d3e8 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
  81d3b4:	e0bfff17 	ldw	r2,-4(fp)
  81d3b8:	10c00003 	ldbu	r3,0(r2)
  81d3bc:	e0bffe17 	ldw	r2,-8(fp)
  81d3c0:	10c00005 	stb	r3,0(r2)
  81d3c4:	e0bffe17 	ldw	r2,-8(fp)
  81d3c8:	10800044 	addi	r2,r2,1
  81d3cc:	e0bffe15 	stw	r2,-8(fp)
  81d3d0:	e0bfff17 	ldw	r2,-4(fp)
  81d3d4:	10800044 	addi	r2,r2,1
  81d3d8:	e0bfff15 	stw	r2,-4(fp)
        len++;
  81d3dc:	e0bffd03 	ldbu	r2,-12(fp)
  81d3e0:	10800044 	addi	r2,r2,1
  81d3e4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  81d3e8:	e0bfff17 	ldw	r2,-4(fp)
  81d3ec:	10800003 	ldbu	r2,0(r2)
  81d3f0:	10803fcc 	andi	r2,r2,255
  81d3f4:	1004c03a 	cmpne	r2,r2,zero
  81d3f8:	103fee1e 	bne	r2,zero,81d3b4 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  81d3fc:	e0bffe17 	ldw	r2,-8(fp)
  81d400:	10000005 	stb	zero,0(r2)
    return (len);
  81d404:	e0bffd03 	ldbu	r2,-12(fp)
}
  81d408:	e037883a 	mov	sp,fp
  81d40c:	df000017 	ldw	fp,0(sp)
  81d410:	dec00104 	addi	sp,sp,4
  81d414:	f800283a 	ret

0081d418 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  81d418:	defffd04 	addi	sp,sp,-12
  81d41c:	df000215 	stw	fp,8(sp)
  81d420:	df000204 	addi	fp,sp,8
  81d424:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  81d428:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  81d42c:	00000606 	br	81d448 <OS_StrLen+0x30>
        psrc++;
  81d430:	e0bfff17 	ldw	r2,-4(fp)
  81d434:	10800044 	addi	r2,r2,1
  81d438:	e0bfff15 	stw	r2,-4(fp)
        len++;
  81d43c:	e0bffe03 	ldbu	r2,-8(fp)
  81d440:	10800044 	addi	r2,r2,1
  81d444:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  81d448:	e0bfff17 	ldw	r2,-4(fp)
  81d44c:	10800003 	ldbu	r2,0(r2)
  81d450:	10803fcc 	andi	r2,r2,255
  81d454:	1004c03a 	cmpne	r2,r2,zero
  81d458:	103ff51e 	bne	r2,zero,81d430 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
  81d45c:	e0bffe03 	ldbu	r2,-8(fp)
}
  81d460:	e037883a 	mov	sp,fp
  81d464:	df000017 	ldw	fp,0(sp)
  81d468:	dec00104 	addi	sp,sp,4
  81d46c:	f800283a 	ret

0081d470 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  81d470:	defffa04 	addi	sp,sp,-24
  81d474:	dfc00515 	stw	ra,20(sp)
  81d478:	df000415 	stw	fp,16(sp)
  81d47c:	df000404 	addi	fp,sp,16
  81d480:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81d484:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d488:	0005303a 	rdctl	r2,status
  81d48c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d490:	e0fffd17 	ldw	r3,-12(fp)
  81d494:	00bfff84 	movi	r2,-2
  81d498:	1884703a 	and	r2,r3,r2
  81d49c:	1001703a 	wrctl	status,r2
  
  return context;
  81d4a0:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  81d4a4:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
  81d4a8:	d0a04717 	ldw	r2,-32484(gp)
  81d4ac:	10800044 	addi	r2,r2,1
  81d4b0:	d0a04715 	stw	r2,-32484(gp)
  81d4b4:	e0bffe17 	ldw	r2,-8(fp)
  81d4b8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d4bc:	e0bffc17 	ldw	r2,-16(fp)
  81d4c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  81d4c4:	0826e740 	call	826e74 <OSTaskIdleHook>
    }
  81d4c8:	003fef06 	br	81d488 <OS_TaskIdle+0x18>

0081d4cc <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  81d4cc:	defffa04 	addi	sp,sp,-24
  81d4d0:	dfc00515 	stw	ra,20(sp)
  81d4d4:	df000415 	stw	fp,16(sp)
  81d4d8:	df000404 	addi	fp,sp,16
  81d4dc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81d4e0:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  81d4e4:	00000206 	br	81d4f0 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  81d4e8:	01003204 	movi	r4,200
  81d4ec:	08235480 	call	823548 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  81d4f0:	d0a05803 	ldbu	r2,-32416(gp)
  81d4f4:	10803fcc 	andi	r2,r2,255
  81d4f8:	1005003a 	cmpeq	r2,r2,zero
  81d4fc:	103ffa1e 	bne	r2,zero,81d4e8 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  81d500:	d1204c17 	ldw	r4,-32464(gp)
  81d504:	01401904 	movi	r5,100
  81d508:	08111d40 	call	8111d4 <__udivsi3>
  81d50c:	d0a04c15 	stw	r2,-32464(gp)
    if (OSIdleCtrMax == 0L) {
  81d510:	d0a04c17 	ldw	r2,-32464(gp)
  81d514:	1004c03a 	cmpne	r2,r2,zero
  81d518:	1000031e 	bne	r2,zero,81d528 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
  81d51c:	d0204e05 	stb	zero,-32456(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  81d520:	01003fc4 	movi	r4,255
  81d524:	082315c0 	call	82315c <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d528:	0005303a 	rdctl	r2,status
  81d52c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d530:	e0fffd17 	ldw	r3,-12(fp)
  81d534:	00bfff84 	movi	r2,-2
  81d538:	1884703a 	and	r2,r3,r2
  81d53c:	1001703a 	wrctl	status,r2
  
  return context;
  81d540:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  81d544:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  81d548:	d0a04717 	ldw	r2,-32484(gp)
  81d54c:	d0a05915 	stw	r2,-32412(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  81d550:	d0204715 	stw	zero,-32484(gp)
  81d554:	e0bffe17 	ldw	r2,-8(fp)
  81d558:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d55c:	e0bffc17 	ldw	r2,-16(fp)
  81d560:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  81d564:	d1205917 	ldw	r4,-32412(gp)
  81d568:	d1604c17 	ldw	r5,-32464(gp)
  81d56c:	08111d40 	call	8111d4 <__udivsi3>
  81d570:	1007883a 	mov	r3,r2
  81d574:	00801904 	movi	r2,100
  81d578:	10c5c83a 	sub	r2,r2,r3
  81d57c:	d0a04e05 	stb	r2,-32456(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  81d580:	0826e040 	call	826e04 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  81d584:	081d5940 	call	81d594 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  81d588:	01001904 	movi	r4,100
  81d58c:	08235480 	call	823548 <OSTimeDly>
    }
  81d590:	003fe506 	br	81d528 <OS_TaskStat+0x5c>

0081d594 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  81d594:	defffa04 	addi	sp,sp,-24
  81d598:	dfc00515 	stw	ra,20(sp)
  81d59c:	df000415 	stw	fp,16(sp)
  81d5a0:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  81d5a4:	e03ffc05 	stb	zero,-16(fp)
  81d5a8:	00002406 	br	81d63c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  81d5ac:	e13ffc03 	ldbu	r4,-16(fp)
  81d5b0:	e17ffe04 	addi	r5,fp,-8
  81d5b4:	0822f600 	call	822f60 <OSTaskStkChk>
  81d5b8:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  81d5bc:	e0bffc43 	ldbu	r2,-15(fp)
  81d5c0:	1004c03a 	cmpne	r2,r2,zero
  81d5c4:	10001a1e 	bne	r2,zero,81d630 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  81d5c8:	e0bffc03 	ldbu	r2,-16(fp)
  81d5cc:	00c02534 	movhi	r3,148
  81d5d0:	18f74604 	addi	r3,r3,-8936
  81d5d4:	1085883a 	add	r2,r2,r2
  81d5d8:	1085883a 	add	r2,r2,r2
  81d5dc:	10c5883a 	add	r2,r2,r3
  81d5e0:	10800017 	ldw	r2,0(r2)
  81d5e4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  81d5e8:	e0bffd17 	ldw	r2,-12(fp)
  81d5ec:	1005003a 	cmpeq	r2,r2,zero
  81d5f0:	10000f1e 	bne	r2,zero,81d630 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  81d5f4:	e0bffd17 	ldw	r2,-12(fp)
  81d5f8:	10800060 	cmpeqi	r2,r2,1
  81d5fc:	10000c1e 	bne	r2,zero,81d630 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  81d600:	e0bffd17 	ldw	r2,-12(fp)
  81d604:	10c00217 	ldw	r3,8(r2)
  81d608:	e0bffd17 	ldw	r2,-12(fp)
  81d60c:	10800317 	ldw	r2,12(r2)
  81d610:	1085883a 	add	r2,r2,r2
  81d614:	1085883a 	add	r2,r2,r2
  81d618:	1887883a 	add	r3,r3,r2
  81d61c:	e0bffd17 	ldw	r2,-12(fp)
  81d620:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  81d624:	e0ffff17 	ldw	r3,-4(fp)
  81d628:	e0bffd17 	ldw	r2,-12(fp)
  81d62c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  81d630:	e0bffc03 	ldbu	r2,-16(fp)
  81d634:	10800044 	addi	r2,r2,1
  81d638:	e0bffc05 	stb	r2,-16(fp)
  81d63c:	e0bffc03 	ldbu	r2,-16(fp)
  81d640:	10800570 	cmpltui	r2,r2,21
  81d644:	103fd91e 	bne	r2,zero,81d5ac <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
  81d648:	e037883a 	mov	sp,fp
  81d64c:	dfc00117 	ldw	ra,4(sp)
  81d650:	df000017 	ldw	fp,0(sp)
  81d654:	dec00204 	addi	sp,sp,8
  81d658:	f800283a 	ret

0081d65c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  81d65c:	defff104 	addi	sp,sp,-60
  81d660:	dfc00e15 	stw	ra,56(sp)
  81d664:	df000d15 	stw	fp,52(sp)
  81d668:	df000d04 	addi	fp,sp,52
  81d66c:	e17ffb15 	stw	r5,-20(fp)
  81d670:	e1bffc15 	stw	r6,-16(fp)
  81d674:	e0800417 	ldw	r2,16(fp)
  81d678:	e13ffa05 	stb	r4,-24(fp)
  81d67c:	e1fffd0d 	sth	r7,-12(fp)
  81d680:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81d684:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d688:	0005303a 	rdctl	r2,status
  81d68c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d690:	e0fff717 	ldw	r3,-36(fp)
  81d694:	00bfff84 	movi	r2,-2
  81d698:	1884703a 	and	r2,r3,r2
  81d69c:	1001703a 	wrctl	status,r2
  
  return context;
  81d6a0:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
  81d6a4:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  81d6a8:	d0a04d17 	ldw	r2,-32460(gp)
  81d6ac:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
  81d6b0:	e0bff917 	ldw	r2,-28(fp)
  81d6b4:	1005003a 	cmpeq	r2,r2,zero
  81d6b8:	1000941e 	bne	r2,zero,81d90c <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  81d6bc:	e0bff917 	ldw	r2,-28(fp)
  81d6c0:	10800517 	ldw	r2,20(r2)
  81d6c4:	d0a04d15 	stw	r2,-32460(gp)
  81d6c8:	e0bff817 	ldw	r2,-32(fp)
  81d6cc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d6d0:	e0bff617 	ldw	r2,-40(fp)
  81d6d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  81d6d8:	e0fff917 	ldw	r3,-28(fp)
  81d6dc:	e0bffb17 	ldw	r2,-20(fp)
  81d6e0:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  81d6e4:	e0fff917 	ldw	r3,-28(fp)
  81d6e8:	e0bffa03 	ldbu	r2,-24(fp)
  81d6ec:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  81d6f0:	e0bff917 	ldw	r2,-28(fp)
  81d6f4:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  81d6f8:	e0bff917 	ldw	r2,-28(fp)
  81d6fc:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  81d700:	e0bff917 	ldw	r2,-28(fp)
  81d704:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  81d708:	e0fff917 	ldw	r3,-28(fp)
  81d70c:	e0800317 	ldw	r2,12(fp)
  81d710:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  81d714:	e0fff917 	ldw	r3,-28(fp)
  81d718:	e0800217 	ldw	r2,8(fp)
  81d71c:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  81d720:	e0fff917 	ldw	r3,-28(fp)
  81d724:	e0bffc17 	ldw	r2,-16(fp)
  81d728:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  81d72c:	e0fff917 	ldw	r3,-28(fp)
  81d730:	e0bffe0b 	ldhu	r2,-8(fp)
  81d734:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  81d738:	e0fff917 	ldw	r3,-28(fp)
  81d73c:	e0bffd0b 	ldhu	r2,-12(fp)
  81d740:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  81d744:	e0bff917 	ldw	r2,-28(fp)
  81d748:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  81d74c:	e0bffa03 	ldbu	r2,-24(fp)
  81d750:	1004d0fa 	srli	r2,r2,3
  81d754:	1007883a 	mov	r3,r2
  81d758:	e0bff917 	ldw	r2,-28(fp)
  81d75c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  81d760:	e0bffa03 	ldbu	r2,-24(fp)
  81d764:	108001cc 	andi	r2,r2,7
  81d768:	1007883a 	mov	r3,r2
  81d76c:	e0bff917 	ldw	r2,-28(fp)
  81d770:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  81d774:	e0bff917 	ldw	r2,-28(fp)
  81d778:	10800d03 	ldbu	r2,52(r2)
  81d77c:	10c03fcc 	andi	r3,r2,255
  81d780:	00800044 	movi	r2,1
  81d784:	10c4983a 	sll	r2,r2,r3
  81d788:	1007883a 	mov	r3,r2
  81d78c:	e0bff917 	ldw	r2,-28(fp)
  81d790:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  81d794:	e0bff917 	ldw	r2,-28(fp)
  81d798:	10800cc3 	ldbu	r2,51(r2)
  81d79c:	10c03fcc 	andi	r3,r2,255
  81d7a0:	00800044 	movi	r2,1
  81d7a4:	10c4983a 	sll	r2,r2,r3
  81d7a8:	1007883a 	mov	r3,r2
  81d7ac:	e0bff917 	ldw	r2,-28(fp)
  81d7b0:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  81d7b4:	e0bff917 	ldw	r2,-28(fp)
  81d7b8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  81d7bc:	e0bff917 	ldw	r2,-28(fp)
  81d7c0:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  81d7c4:	e0bff917 	ldw	r2,-28(fp)
  81d7c8:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  81d7cc:	e0bff917 	ldw	r2,-28(fp)
  81d7d0:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  81d7d4:	e0bff917 	ldw	r2,-28(fp)
  81d7d8:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  81d7dc:	e0bff917 	ldw	r2,-28(fp)
  81d7e0:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  81d7e4:	e0bff917 	ldw	r2,-28(fp)
  81d7e8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  81d7ec:	e0bff917 	ldw	r2,-28(fp)
  81d7f0:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  81d7f4:	e0bff917 	ldw	r2,-28(fp)
  81d7f8:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  81d7fc:	e0fff917 	ldw	r3,-28(fp)
  81d800:	00800fc4 	movi	r2,63
  81d804:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  81d808:	e0bff917 	ldw	r2,-28(fp)
  81d80c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  81d810:	e13ff917 	ldw	r4,-28(fp)
  81d814:	0826e900 	call	826e90 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  81d818:	e13ff917 	ldw	r4,-28(fp)
  81d81c:	0826da80 	call	826da8 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d820:	0005303a 	rdctl	r2,status
  81d824:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d828:	e0fff517 	ldw	r3,-44(fp)
  81d82c:	00bfff84 	movi	r2,-2
  81d830:	1884703a 	and	r2,r3,r2
  81d834:	1001703a 	wrctl	status,r2
  
  return context;
  81d838:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  81d83c:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
  81d840:	e0bffa03 	ldbu	r2,-24(fp)
  81d844:	00c02534 	movhi	r3,148
  81d848:	18f74604 	addi	r3,r3,-8936
  81d84c:	1085883a 	add	r2,r2,r2
  81d850:	1085883a 	add	r2,r2,r2
  81d854:	10c7883a 	add	r3,r2,r3
  81d858:	e0bff917 	ldw	r2,-28(fp)
  81d85c:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  81d860:	d0e04917 	ldw	r3,-32476(gp)
  81d864:	e0bff917 	ldw	r2,-28(fp)
  81d868:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  81d86c:	e0bff917 	ldw	r2,-28(fp)
  81d870:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  81d874:	d0a04917 	ldw	r2,-32476(gp)
  81d878:	1005003a 	cmpeq	r2,r2,zero
  81d87c:	1000031e 	bne	r2,zero,81d88c <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
  81d880:	d0e04917 	ldw	r3,-32476(gp)
  81d884:	e0bff917 	ldw	r2,-28(fp)
  81d888:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
  81d88c:	e0bff917 	ldw	r2,-28(fp)
  81d890:	d0a04915 	stw	r2,-32476(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  81d894:	e0bff917 	ldw	r2,-28(fp)
  81d898:	10c00d83 	ldbu	r3,54(r2)
  81d89c:	d0a05203 	ldbu	r2,-32440(gp)
  81d8a0:	1884b03a 	or	r2,r3,r2
  81d8a4:	d0a05205 	stb	r2,-32440(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  81d8a8:	e0bff917 	ldw	r2,-28(fp)
  81d8ac:	10800d03 	ldbu	r2,52(r2)
  81d8b0:	11003fcc 	andi	r4,r2,255
  81d8b4:	e0bff917 	ldw	r2,-28(fp)
  81d8b8:	10800d03 	ldbu	r2,52(r2)
  81d8bc:	10c03fcc 	andi	r3,r2,255
  81d8c0:	d0a05244 	addi	r2,gp,-32439
  81d8c4:	1885883a 	add	r2,r3,r2
  81d8c8:	10c00003 	ldbu	r3,0(r2)
  81d8cc:	e0bff917 	ldw	r2,-28(fp)
  81d8d0:	10800d43 	ldbu	r2,53(r2)
  81d8d4:	1884b03a 	or	r2,r3,r2
  81d8d8:	1007883a 	mov	r3,r2
  81d8dc:	d0a05244 	addi	r2,gp,-32439
  81d8e0:	2085883a 	add	r2,r4,r2
  81d8e4:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  81d8e8:	d0a04e43 	ldbu	r2,-32455(gp)
  81d8ec:	10800044 	addi	r2,r2,1
  81d8f0:	d0a04e45 	stb	r2,-32455(gp)
  81d8f4:	e0bff817 	ldw	r2,-32(fp)
  81d8f8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d8fc:	e0bff417 	ldw	r2,-48(fp)
  81d900:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  81d904:	e03fff15 	stw	zero,-4(fp)
  81d908:	00000606 	br	81d924 <OS_TCBInit+0x2c8>
  81d90c:	e0bff817 	ldw	r2,-32(fp)
  81d910:	e0bff315 	stw	r2,-52(fp)
  81d914:	e0bff317 	ldw	r2,-52(fp)
  81d918:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  81d91c:	00801084 	movi	r2,66
  81d920:	e0bfff15 	stw	r2,-4(fp)
  81d924:	e0bfff17 	ldw	r2,-4(fp)
}
  81d928:	e037883a 	mov	sp,fp
  81d92c:	dfc00117 	ldw	ra,4(sp)
  81d930:	df000017 	ldw	fp,0(sp)
  81d934:	dec00204 	addi	sp,sp,8
  81d938:	f800283a 	ret

0081d93c <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  81d93c:	defffe04 	addi	sp,sp,-8
  81d940:	df000115 	stw	fp,4(sp)
  81d944:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  81d948:	d0a01104 	addi	r2,gp,-32700
  81d94c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  81d950:	d0a01204 	addi	r2,gp,-32696
  81d954:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  81d958:	d0a01384 	addi	r2,gp,-32690
  81d95c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  81d960:	d0a01404 	addi	r2,gp,-32688
  81d964:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  81d968:	d0a01304 	addi	r2,gp,-32692
  81d96c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  81d970:	d0a01484 	addi	r2,gp,-32686
  81d974:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  81d978:	d0a01504 	addi	r2,gp,-32684
  81d97c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  81d980:	d0a01584 	addi	r2,gp,-32682
  81d984:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  81d988:	d0a01604 	addi	r2,gp,-32680
  81d98c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  81d990:	d0a01684 	addi	r2,gp,-32678
  81d994:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  81d998:	d0a01704 	addi	r2,gp,-32676
  81d99c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  81d9a0:	d0a01784 	addi	r2,gp,-32674
  81d9a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  81d9a8:	d0a01804 	addi	r2,gp,-32672
  81d9ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  81d9b0:	d0a01884 	addi	r2,gp,-32670
  81d9b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  81d9b8:	d0a01904 	addi	r2,gp,-32668
  81d9bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  81d9c0:	d0a01984 	addi	r2,gp,-32666
  81d9c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  81d9c8:	d0a01a04 	addi	r2,gp,-32664
  81d9cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  81d9d0:	d0a01a84 	addi	r2,gp,-32662
  81d9d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  81d9d8:	d0a01b04 	addi	r2,gp,-32660
  81d9dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  81d9e0:	d0a01b84 	addi	r2,gp,-32658
  81d9e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  81d9e8:	d0a01c04 	addi	r2,gp,-32656
  81d9ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  81d9f0:	d0a01c84 	addi	r2,gp,-32654
  81d9f4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  81d9f8:	d0a01d04 	addi	r2,gp,-32652
  81d9fc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  81da00:	d0a01d84 	addi	r2,gp,-32650
  81da04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  81da08:	d0a01e04 	addi	r2,gp,-32648
  81da0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  81da10:	d0a01e84 	addi	r2,gp,-32646
  81da14:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  81da18:	d0a01f04 	addi	r2,gp,-32644
  81da1c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  81da20:	d0a01f84 	addi	r2,gp,-32642
  81da24:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  81da28:	d0a02004 	addi	r2,gp,-32640
  81da2c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  81da30:	d0a02084 	addi	r2,gp,-32638
  81da34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  81da38:	d0a02104 	addi	r2,gp,-32636
  81da3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  81da40:	d0a02184 	addi	r2,gp,-32634
  81da44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  81da48:	d0a02204 	addi	r2,gp,-32632
  81da4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  81da50:	d0a02284 	addi	r2,gp,-32630
  81da54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  81da58:	d0a02304 	addi	r2,gp,-32628
  81da5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  81da60:	d0a02384 	addi	r2,gp,-32626
  81da64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  81da68:	d0a02404 	addi	r2,gp,-32624
  81da6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  81da70:	d0a02484 	addi	r2,gp,-32622
  81da74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  81da78:	d0a02504 	addi	r2,gp,-32620
  81da7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  81da80:	d0a02584 	addi	r2,gp,-32618
  81da84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  81da88:	d0a02604 	addi	r2,gp,-32616
  81da8c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  81da90:	d0a02684 	addi	r2,gp,-32614
  81da94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  81da98:	d0a02704 	addi	r2,gp,-32612
  81da9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  81daa0:	d0a02784 	addi	r2,gp,-32610
  81daa4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  81daa8:	d0a02804 	addi	r2,gp,-32608
  81daac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  81dab0:	d0a02d04 	addi	r2,gp,-32588
  81dab4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  81dab8:	e037883a 	mov	sp,fp
  81dabc:	df000017 	ldw	fp,0(sp)
  81dac0:	dec00104 	addi	sp,sp,4
  81dac4:	f800283a 	ret

0081dac8 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  81dac8:	defff104 	addi	sp,sp,-60
  81dacc:	df000e15 	stw	fp,56(sp)
  81dad0:	df000e04 	addi	fp,sp,56
  81dad4:	e13ffa15 	stw	r4,-24(fp)
  81dad8:	e1fffd15 	stw	r7,-12(fp)
  81dadc:	e17ffb0d 	sth	r5,-20(fp)
  81dae0:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  81dae4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  81dae8:	e0bffd17 	ldw	r2,-12(fp)
  81daec:	1004c03a 	cmpne	r2,r2,zero
  81daf0:	1000021e 	bne	r2,zero,81dafc <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
  81daf4:	e03fff15 	stw	zero,-4(fp)
  81daf8:	0000bb06 	br	81dde8 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  81dafc:	e0bffa17 	ldw	r2,-24(fp)
  81db00:	1004c03a 	cmpne	r2,r2,zero
  81db04:	1000051e 	bne	r2,zero,81db1c <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  81db08:	e0fffd17 	ldw	r3,-12(fp)
  81db0c:	00801b84 	movi	r2,110
  81db10:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  81db14:	e03fff15 	stw	zero,-4(fp)
  81db18:	0000b306 	br	81dde8 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  81db1c:	e0bffa17 	ldw	r2,-24(fp)
  81db20:	10800003 	ldbu	r2,0(r2)
  81db24:	10803fcc 	andi	r2,r2,255
  81db28:	10800160 	cmpeqi	r2,r2,5
  81db2c:	1000051e 	bne	r2,zero,81db44 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  81db30:	e0fffd17 	ldw	r3,-12(fp)
  81db34:	00800044 	movi	r2,1
  81db38:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  81db3c:	e03fff15 	stw	zero,-4(fp)
  81db40:	0000a906 	br	81dde8 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  81db44:	e0fffc03 	ldbu	r3,-16(fp)
  81db48:	00bfe004 	movi	r2,-128
  81db4c:	1884703a 	and	r2,r3,r2
  81db50:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  81db54:	e0bff943 	ldbu	r2,-27(fp)
  81db58:	1005003a 	cmpeq	r2,r2,zero
  81db5c:	1000061e 	bne	r2,zero,81db78 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
  81db60:	e0bffc03 	ldbu	r2,-16(fp)
  81db64:	10801fcc 	andi	r2,r2,127
  81db68:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
  81db6c:	00800044 	movi	r2,1
  81db70:	e0bff905 	stb	r2,-28(fp)
  81db74:	00000106 	br	81db7c <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
  81db78:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  81db7c:	e0bffd17 	ldw	r2,-12(fp)
  81db80:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81db84:	0005303a 	rdctl	r2,status
  81db88:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81db8c:	e0fff717 	ldw	r3,-36(fp)
  81db90:	00bfff84 	movi	r2,-2
  81db94:	1884703a 	and	r2,r3,r2
  81db98:	1001703a 	wrctl	status,r2
  
  return context;
  81db9c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  81dba0:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
  81dba4:	e0bffc03 	ldbu	r2,-16(fp)
  81dba8:	e0bffe15 	stw	r2,-8(fp)
  81dbac:	e0fffe17 	ldw	r3,-8(fp)
  81dbb0:	18800060 	cmpeqi	r2,r3,1
  81dbb4:	1000651e 	bne	r2,zero,81dd4c <OSFlagAccept+0x284>
  81dbb8:	e0fffe17 	ldw	r3,-8(fp)
  81dbbc:	18800088 	cmpgei	r2,r3,2
  81dbc0:	1000041e 	bne	r2,zero,81dbd4 <OSFlagAccept+0x10c>
  81dbc4:	e0fffe17 	ldw	r3,-8(fp)
  81dbc8:	1805003a 	cmpeq	r2,r3,zero
  81dbcc:	1000421e 	bne	r2,zero,81dcd8 <OSFlagAccept+0x210>
  81dbd0:	00007b06 	br	81ddc0 <OSFlagAccept+0x2f8>
  81dbd4:	e0fffe17 	ldw	r3,-8(fp)
  81dbd8:	188000a0 	cmpeqi	r2,r3,2
  81dbdc:	1000041e 	bne	r2,zero,81dbf0 <OSFlagAccept+0x128>
  81dbe0:	e0fffe17 	ldw	r3,-8(fp)
  81dbe4:	188000e0 	cmpeqi	r2,r3,3
  81dbe8:	10001e1e 	bne	r2,zero,81dc64 <OSFlagAccept+0x19c>
  81dbec:	00007406 	br	81ddc0 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  81dbf0:	e0bffa17 	ldw	r2,-24(fp)
  81dbf4:	10c0020b 	ldhu	r3,8(r2)
  81dbf8:	e0bffb0b 	ldhu	r2,-20(fp)
  81dbfc:	1884703a 	and	r2,r3,r2
  81dc00:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  81dc04:	e0fff98b 	ldhu	r3,-26(fp)
  81dc08:	e0bffb0b 	ldhu	r2,-20(fp)
  81dc0c:	18800d1e 	bne	r3,r2,81dc44 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  81dc10:	e0bff903 	ldbu	r2,-28(fp)
  81dc14:	10800058 	cmpnei	r2,r2,1
  81dc18:	10000d1e 	bne	r2,zero,81dc50 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  81dc1c:	e0bffa17 	ldw	r2,-24(fp)
  81dc20:	1080020b 	ldhu	r2,8(r2)
  81dc24:	1007883a 	mov	r3,r2
  81dc28:	e0bff98b 	ldhu	r2,-26(fp)
  81dc2c:	0084303a 	nor	r2,zero,r2
  81dc30:	1884703a 	and	r2,r3,r2
  81dc34:	1007883a 	mov	r3,r2
  81dc38:	e0bffa17 	ldw	r2,-24(fp)
  81dc3c:	10c0020d 	sth	r3,8(r2)
  81dc40:	00000306 	br	81dc50 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  81dc44:	e0fffd17 	ldw	r3,-12(fp)
  81dc48:	00801c04 	movi	r2,112
  81dc4c:	18800005 	stb	r2,0(r3)
  81dc50:	e0bff817 	ldw	r2,-32(fp)
  81dc54:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81dc58:	e0bff617 	ldw	r2,-40(fp)
  81dc5c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  81dc60:	00005f06 	br	81dde0 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  81dc64:	e0bffa17 	ldw	r2,-24(fp)
  81dc68:	10c0020b 	ldhu	r3,8(r2)
  81dc6c:	e0bffb0b 	ldhu	r2,-20(fp)
  81dc70:	1884703a 	and	r2,r3,r2
  81dc74:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  81dc78:	e0bff98b 	ldhu	r2,-26(fp)
  81dc7c:	1005003a 	cmpeq	r2,r2,zero
  81dc80:	10000d1e 	bne	r2,zero,81dcb8 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  81dc84:	e0bff903 	ldbu	r2,-28(fp)
  81dc88:	10800058 	cmpnei	r2,r2,1
  81dc8c:	10000d1e 	bne	r2,zero,81dcc4 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  81dc90:	e0bffa17 	ldw	r2,-24(fp)
  81dc94:	1080020b 	ldhu	r2,8(r2)
  81dc98:	1007883a 	mov	r3,r2
  81dc9c:	e0bff98b 	ldhu	r2,-26(fp)
  81dca0:	0084303a 	nor	r2,zero,r2
  81dca4:	1884703a 	and	r2,r3,r2
  81dca8:	1007883a 	mov	r3,r2
  81dcac:	e0bffa17 	ldw	r2,-24(fp)
  81dcb0:	10c0020d 	sth	r3,8(r2)
  81dcb4:	00000306 	br	81dcc4 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  81dcb8:	e0fffd17 	ldw	r3,-12(fp)
  81dcbc:	00801c04 	movi	r2,112
  81dcc0:	18800005 	stb	r2,0(r3)
  81dcc4:	e0bff817 	ldw	r2,-32(fp)
  81dcc8:	e0bff515 	stw	r2,-44(fp)
  81dccc:	e0bff517 	ldw	r2,-44(fp)
  81dcd0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  81dcd4:	00004206 	br	81dde0 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  81dcd8:	e0bffa17 	ldw	r2,-24(fp)
  81dcdc:	1080020b 	ldhu	r2,8(r2)
  81dce0:	0084303a 	nor	r2,zero,r2
  81dce4:	1007883a 	mov	r3,r2
  81dce8:	e0bffb0b 	ldhu	r2,-20(fp)
  81dcec:	1884703a 	and	r2,r3,r2
  81dcf0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  81dcf4:	e0fff98b 	ldhu	r3,-26(fp)
  81dcf8:	e0bffb0b 	ldhu	r2,-20(fp)
  81dcfc:	18800b1e 	bne	r3,r2,81dd2c <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  81dd00:	e0bff903 	ldbu	r2,-28(fp)
  81dd04:	10800058 	cmpnei	r2,r2,1
  81dd08:	10000b1e 	bne	r2,zero,81dd38 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  81dd0c:	e0bffa17 	ldw	r2,-24(fp)
  81dd10:	10c0020b 	ldhu	r3,8(r2)
  81dd14:	e0bff98b 	ldhu	r2,-26(fp)
  81dd18:	1884b03a 	or	r2,r3,r2
  81dd1c:	1007883a 	mov	r3,r2
  81dd20:	e0bffa17 	ldw	r2,-24(fp)
  81dd24:	10c0020d 	sth	r3,8(r2)
  81dd28:	00000306 	br	81dd38 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  81dd2c:	e0fffd17 	ldw	r3,-12(fp)
  81dd30:	00801c04 	movi	r2,112
  81dd34:	18800005 	stb	r2,0(r3)
  81dd38:	e0bff817 	ldw	r2,-32(fp)
  81dd3c:	e0bff415 	stw	r2,-48(fp)
  81dd40:	e0bff417 	ldw	r2,-48(fp)
  81dd44:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  81dd48:	00002506 	br	81dde0 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  81dd4c:	e0bffa17 	ldw	r2,-24(fp)
  81dd50:	1080020b 	ldhu	r2,8(r2)
  81dd54:	0084303a 	nor	r2,zero,r2
  81dd58:	1007883a 	mov	r3,r2
  81dd5c:	e0bffb0b 	ldhu	r2,-20(fp)
  81dd60:	1884703a 	and	r2,r3,r2
  81dd64:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  81dd68:	e0bff98b 	ldhu	r2,-26(fp)
  81dd6c:	1005003a 	cmpeq	r2,r2,zero
  81dd70:	10000b1e 	bne	r2,zero,81dda0 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  81dd74:	e0bff903 	ldbu	r2,-28(fp)
  81dd78:	10800058 	cmpnei	r2,r2,1
  81dd7c:	10000b1e 	bne	r2,zero,81ddac <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  81dd80:	e0bffa17 	ldw	r2,-24(fp)
  81dd84:	10c0020b 	ldhu	r3,8(r2)
  81dd88:	e0bff98b 	ldhu	r2,-26(fp)
  81dd8c:	1884b03a 	or	r2,r3,r2
  81dd90:	1007883a 	mov	r3,r2
  81dd94:	e0bffa17 	ldw	r2,-24(fp)
  81dd98:	10c0020d 	sth	r3,8(r2)
  81dd9c:	00000306 	br	81ddac <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  81dda0:	e0fffd17 	ldw	r3,-12(fp)
  81dda4:	00801c04 	movi	r2,112
  81dda8:	18800005 	stb	r2,0(r3)
  81ddac:	e0bff817 	ldw	r2,-32(fp)
  81ddb0:	e0bff315 	stw	r2,-52(fp)
  81ddb4:	e0bff317 	ldw	r2,-52(fp)
  81ddb8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  81ddbc:	00000806 	br	81dde0 <OSFlagAccept+0x318>
  81ddc0:	e0bff817 	ldw	r2,-32(fp)
  81ddc4:	e0bff215 	stw	r2,-56(fp)
  81ddc8:	e0bff217 	ldw	r2,-56(fp)
  81ddcc:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  81ddd0:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  81ddd4:	e0fffd17 	ldw	r3,-12(fp)
  81ddd8:	00801bc4 	movi	r2,111
  81dddc:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
  81dde0:	e0bff98b 	ldhu	r2,-26(fp)
  81dde4:	e0bfff15 	stw	r2,-4(fp)
  81dde8:	e0bfff17 	ldw	r2,-4(fp)
}
  81ddec:	e037883a 	mov	sp,fp
  81ddf0:	df000017 	ldw	fp,0(sp)
  81ddf4:	dec00104 	addi	sp,sp,4
  81ddf8:	f800283a 	ret

0081ddfc <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  81ddfc:	defff704 	addi	sp,sp,-36
  81de00:	df000815 	stw	fp,32(sp)
  81de04:	df000804 	addi	fp,sp,32
  81de08:	e17ffe15 	stw	r5,-8(fp)
  81de0c:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  81de10:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  81de14:	e0bffe17 	ldw	r2,-8(fp)
  81de18:	1004c03a 	cmpne	r2,r2,zero
  81de1c:	1000021e 	bne	r2,zero,81de28 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  81de20:	e03fff15 	stw	zero,-4(fp)
  81de24:	00003f06 	br	81df24 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  81de28:	008020f4 	movhi	r2,131
  81de2c:	10a9ec04 	addi	r2,r2,-22608
  81de30:	10800003 	ldbu	r2,0(r2)
  81de34:	10803fcc 	andi	r2,r2,255
  81de38:	1005003a 	cmpeq	r2,r2,zero
  81de3c:	1000051e 	bne	r2,zero,81de54 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  81de40:	e0fffe17 	ldw	r3,-8(fp)
  81de44:	00800404 	movi	r2,16
  81de48:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
  81de4c:	e03fff15 	stw	zero,-4(fp)
  81de50:	00003406 	br	81df24 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81de54:	0005303a 	rdctl	r2,status
  81de58:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81de5c:	e0fffa17 	ldw	r3,-24(fp)
  81de60:	00bfff84 	movi	r2,-2
  81de64:	1884703a 	and	r2,r3,r2
  81de68:	1001703a 	wrctl	status,r2
  
  return context;
  81de6c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81de70:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  81de74:	008020f4 	movhi	r2,131
  81de78:	10a9ef04 	addi	r2,r2,-22596
  81de7c:	10800017 	ldw	r2,0(r2)
  81de80:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  81de84:	e0bffc17 	ldw	r2,-16(fp)
  81de88:	1005003a 	cmpeq	r2,r2,zero
  81de8c:	10001c1e 	bne	r2,zero,81df00 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  81de90:	008020f4 	movhi	r2,131
  81de94:	10a9ef04 	addi	r2,r2,-22596
  81de98:	10800017 	ldw	r2,0(r2)
  81de9c:	10800117 	ldw	r2,4(r2)
  81dea0:	1007883a 	mov	r3,r2
  81dea4:	008020f4 	movhi	r2,131
  81dea8:	10a9ef04 	addi	r2,r2,-22596
  81deac:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  81deb0:	e0fffc17 	ldw	r3,-16(fp)
  81deb4:	00800144 	movi	r2,5
  81deb8:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  81debc:	e0fffc17 	ldw	r3,-16(fp)
  81dec0:	e0bffd0b 	ldhu	r2,-12(fp)
  81dec4:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  81dec8:	e0bffc17 	ldw	r2,-16(fp)
  81decc:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  81ded0:	e0fffc17 	ldw	r3,-16(fp)
  81ded4:	00800fc4 	movi	r2,63
  81ded8:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  81dedc:	e0bffc17 	ldw	r2,-16(fp)
  81dee0:	100002c5 	stb	zero,11(r2)
  81dee4:	e0bffb17 	ldw	r2,-20(fp)
  81dee8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81deec:	e0bff917 	ldw	r2,-28(fp)
  81def0:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  81def4:	e0bffe17 	ldw	r2,-8(fp)
  81def8:	10000005 	stb	zero,0(r2)
  81defc:	00000706 	br	81df1c <OSFlagCreate+0x120>
  81df00:	e0bffb17 	ldw	r2,-20(fp)
  81df04:	e0bff815 	stw	r2,-32(fp)
  81df08:	e0bff817 	ldw	r2,-32(fp)
  81df0c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  81df10:	e0fffe17 	ldw	r3,-8(fp)
  81df14:	00801c84 	movi	r2,114
  81df18:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  81df1c:	e0bffc17 	ldw	r2,-16(fp)
  81df20:	e0bfff15 	stw	r2,-4(fp)
  81df24:	e0bfff17 	ldw	r2,-4(fp)
}
  81df28:	e037883a 	mov	sp,fp
  81df2c:	df000017 	ldw	fp,0(sp)
  81df30:	dec00104 	addi	sp,sp,4
  81df34:	f800283a 	ret

0081df38 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  81df38:	defff004 	addi	sp,sp,-64
  81df3c:	dfc00f15 	stw	ra,60(sp)
  81df40:	df000e15 	stw	fp,56(sp)
  81df44:	df000e04 	addi	fp,sp,56
  81df48:	e13ffb15 	stw	r4,-20(fp)
  81df4c:	e1bffd15 	stw	r6,-12(fp)
  81df50:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  81df54:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  81df58:	e0bffd17 	ldw	r2,-12(fp)
  81df5c:	1004c03a 	cmpne	r2,r2,zero
  81df60:	1000031e 	bne	r2,zero,81df70 <OSFlagDel+0x38>
        return (pgrp);
  81df64:	e0bffb17 	ldw	r2,-20(fp)
  81df68:	e0bfff15 	stw	r2,-4(fp)
  81df6c:	00009606 	br	81e1c8 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  81df70:	e0bffb17 	ldw	r2,-20(fp)
  81df74:	1004c03a 	cmpne	r2,r2,zero
  81df78:	1000061e 	bne	r2,zero,81df94 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  81df7c:	e0fffd17 	ldw	r3,-12(fp)
  81df80:	00801b84 	movi	r2,110
  81df84:	18800005 	stb	r2,0(r3)
        return (pgrp);
  81df88:	e0fffb17 	ldw	r3,-20(fp)
  81df8c:	e0ffff15 	stw	r3,-4(fp)
  81df90:	00008d06 	br	81e1c8 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  81df94:	008020f4 	movhi	r2,131
  81df98:	10a9ec04 	addi	r2,r2,-22608
  81df9c:	10800003 	ldbu	r2,0(r2)
  81dfa0:	10803fcc 	andi	r2,r2,255
  81dfa4:	1005003a 	cmpeq	r2,r2,zero
  81dfa8:	1000061e 	bne	r2,zero,81dfc4 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  81dfac:	e0fffd17 	ldw	r3,-12(fp)
  81dfb0:	008003c4 	movi	r2,15
  81dfb4:	18800005 	stb	r2,0(r3)
        return (pgrp);
  81dfb8:	e0bffb17 	ldw	r2,-20(fp)
  81dfbc:	e0bfff15 	stw	r2,-4(fp)
  81dfc0:	00008106 	br	81e1c8 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  81dfc4:	e0bffb17 	ldw	r2,-20(fp)
  81dfc8:	10800003 	ldbu	r2,0(r2)
  81dfcc:	10803fcc 	andi	r2,r2,255
  81dfd0:	10800160 	cmpeqi	r2,r2,5
  81dfd4:	1000061e 	bne	r2,zero,81dff0 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
  81dfd8:	e0fffd17 	ldw	r3,-12(fp)
  81dfdc:	00800044 	movi	r2,1
  81dfe0:	18800005 	stb	r2,0(r3)
        return (pgrp);
  81dfe4:	e0fffb17 	ldw	r3,-20(fp)
  81dfe8:	e0ffff15 	stw	r3,-4(fp)
  81dfec:	00007606 	br	81e1c8 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81dff0:	0005303a 	rdctl	r2,status
  81dff4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81dff8:	e0fff617 	ldw	r3,-40(fp)
  81dffc:	00bfff84 	movi	r2,-2
  81e000:	1884703a 	and	r2,r3,r2
  81e004:	1001703a 	wrctl	status,r2
  
  return context;
  81e008:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  81e00c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  81e010:	e0bffb17 	ldw	r2,-20(fp)
  81e014:	10800117 	ldw	r2,4(r2)
  81e018:	1005003a 	cmpeq	r2,r2,zero
  81e01c:	1000031e 	bne	r2,zero,81e02c <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  81e020:	00800044 	movi	r2,1
  81e024:	e0bffa05 	stb	r2,-24(fp)
  81e028:	00000106 	br	81e030 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  81e02c:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  81e030:	e0bffc03 	ldbu	r2,-16(fp)
  81e034:	e0bffe15 	stw	r2,-8(fp)
  81e038:	e0fffe17 	ldw	r3,-8(fp)
  81e03c:	1805003a 	cmpeq	r2,r3,zero
  81e040:	1000041e 	bne	r2,zero,81e054 <OSFlagDel+0x11c>
  81e044:	e0fffe17 	ldw	r3,-8(fp)
  81e048:	18800060 	cmpeqi	r2,r3,1
  81e04c:	1000281e 	bne	r2,zero,81e0f0 <OSFlagDel+0x1b8>
  81e050:	00005206 	br	81e19c <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  81e054:	e0bffa03 	ldbu	r2,-24(fp)
  81e058:	1004c03a 	cmpne	r2,r2,zero
  81e05c:	10001a1e 	bne	r2,zero,81e0c8 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  81e060:	e0fffb17 	ldw	r3,-20(fp)
  81e064:	00800fc4 	movi	r2,63
  81e068:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  81e06c:	e0bffb17 	ldw	r2,-20(fp)
  81e070:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  81e074:	e0bffb17 	ldw	r2,-20(fp)
  81e078:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  81e07c:	008020f4 	movhi	r2,131
  81e080:	10a9ef04 	addi	r2,r2,-22596
  81e084:	10c00017 	ldw	r3,0(r2)
  81e088:	e0bffb17 	ldw	r2,-20(fp)
  81e08c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  81e090:	e0bffb17 	ldw	r2,-20(fp)
  81e094:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  81e098:	00c020f4 	movhi	r3,131
  81e09c:	18e9ef04 	addi	r3,r3,-22596
  81e0a0:	e0bffb17 	ldw	r2,-20(fp)
  81e0a4:	18800015 	stw	r2,0(r3)
  81e0a8:	e0bff717 	ldw	r2,-36(fp)
  81e0ac:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81e0b0:	e0bff517 	ldw	r2,-44(fp)
  81e0b4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  81e0b8:	e0bffd17 	ldw	r2,-12(fp)
  81e0bc:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  81e0c0:	e03ff815 	stw	zero,-32(fp)
  81e0c4:	00003e06 	br	81e1c0 <OSFlagDel+0x288>
  81e0c8:	e0bff717 	ldw	r2,-36(fp)
  81e0cc:	e0bff415 	stw	r2,-48(fp)
  81e0d0:	e0bff417 	ldw	r2,-48(fp)
  81e0d4:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  81e0d8:	e0fffd17 	ldw	r3,-12(fp)
  81e0dc:	00801244 	movi	r2,73
  81e0e0:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
  81e0e4:	e0bffb17 	ldw	r2,-20(fp)
  81e0e8:	e0bff815 	stw	r2,-32(fp)
             }
             break;
  81e0ec:	00003406 	br	81e1c0 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  81e0f0:	e0bffb17 	ldw	r2,-20(fp)
  81e0f4:	10800117 	ldw	r2,4(r2)
  81e0f8:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  81e0fc:	00000606 	br	81e118 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  81e100:	e13ff917 	ldw	r4,-28(fp)
  81e104:	000b883a 	mov	r5,zero
  81e108:	081f2480 	call	81f248 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  81e10c:	e0bff917 	ldw	r2,-28(fp)
  81e110:	10800017 	ldw	r2,0(r2)
  81e114:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  81e118:	e0bff917 	ldw	r2,-28(fp)
  81e11c:	1004c03a 	cmpne	r2,r2,zero
  81e120:	103ff71e 	bne	r2,zero,81e100 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  81e124:	e0fffb17 	ldw	r3,-20(fp)
  81e128:	00800fc4 	movi	r2,63
  81e12c:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  81e130:	e0bffb17 	ldw	r2,-20(fp)
  81e134:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  81e138:	e0bffb17 	ldw	r2,-20(fp)
  81e13c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  81e140:	008020f4 	movhi	r2,131
  81e144:	10a9ef04 	addi	r2,r2,-22596
  81e148:	10c00017 	ldw	r3,0(r2)
  81e14c:	e0bffb17 	ldw	r2,-20(fp)
  81e150:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  81e154:	e0bffb17 	ldw	r2,-20(fp)
  81e158:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  81e15c:	00c020f4 	movhi	r3,131
  81e160:	18e9ef04 	addi	r3,r3,-22596
  81e164:	e0bffb17 	ldw	r2,-20(fp)
  81e168:	18800015 	stw	r2,0(r3)
  81e16c:	e0bff717 	ldw	r2,-36(fp)
  81e170:	e0bff315 	stw	r2,-52(fp)
  81e174:	e0bff317 	ldw	r2,-52(fp)
  81e178:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  81e17c:	e0bffa03 	ldbu	r2,-24(fp)
  81e180:	10800058 	cmpnei	r2,r2,1
  81e184:	1000011e 	bne	r2,zero,81e18c <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  81e188:	081d2540 	call	81d254 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  81e18c:	e0bffd17 	ldw	r2,-12(fp)
  81e190:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  81e194:	e03ff815 	stw	zero,-32(fp)
             break;
  81e198:	00000906 	br	81e1c0 <OSFlagDel+0x288>
  81e19c:	e0bff717 	ldw	r2,-36(fp)
  81e1a0:	e0bff215 	stw	r2,-56(fp)
  81e1a4:	e0bff217 	ldw	r2,-56(fp)
  81e1a8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  81e1ac:	e0fffd17 	ldw	r3,-12(fp)
  81e1b0:	008001c4 	movi	r2,7
  81e1b4:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
  81e1b8:	e0bffb17 	ldw	r2,-20(fp)
  81e1bc:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
  81e1c0:	e0bff817 	ldw	r2,-32(fp)
  81e1c4:	e0bfff15 	stw	r2,-4(fp)
  81e1c8:	e0bfff17 	ldw	r2,-4(fp)
}
  81e1cc:	e037883a 	mov	sp,fp
  81e1d0:	dfc00117 	ldw	ra,4(sp)
  81e1d4:	df000017 	ldw	fp,0(sp)
  81e1d8:	dec00204 	addi	sp,sp,8
  81e1dc:	f800283a 	ret

0081e1e0 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  81e1e0:	defff504 	addi	sp,sp,-44
  81e1e4:	dfc00a15 	stw	ra,40(sp)
  81e1e8:	df000915 	stw	fp,36(sp)
  81e1ec:	df000904 	addi	fp,sp,36
  81e1f0:	e13ffc15 	stw	r4,-16(fp)
  81e1f4:	e17ffd15 	stw	r5,-12(fp)
  81e1f8:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81e1fc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  81e200:	e0bffe17 	ldw	r2,-8(fp)
  81e204:	1004c03a 	cmpne	r2,r2,zero
  81e208:	1000021e 	bne	r2,zero,81e214 <OSFlagNameGet+0x34>
        return (0);
  81e20c:	e03fff15 	stw	zero,-4(fp)
  81e210:	00003e06 	br	81e30c <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  81e214:	e0bffc17 	ldw	r2,-16(fp)
  81e218:	1004c03a 	cmpne	r2,r2,zero
  81e21c:	1000051e 	bne	r2,zero,81e234 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  81e220:	e0fffe17 	ldw	r3,-8(fp)
  81e224:	00801b84 	movi	r2,110
  81e228:	18800005 	stb	r2,0(r3)
        return (0);
  81e22c:	e03fff15 	stw	zero,-4(fp)
  81e230:	00003606 	br	81e30c <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  81e234:	e0bffd17 	ldw	r2,-12(fp)
  81e238:	1004c03a 	cmpne	r2,r2,zero
  81e23c:	1000051e 	bne	r2,zero,81e254 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  81e240:	e0fffe17 	ldw	r3,-8(fp)
  81e244:	00800304 	movi	r2,12
  81e248:	18800005 	stb	r2,0(r3)
        return (0);
  81e24c:	e03fff15 	stw	zero,-4(fp)
  81e250:	00002e06 	br	81e30c <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81e254:	008020f4 	movhi	r2,131
  81e258:	10a9ec04 	addi	r2,r2,-22608
  81e25c:	10800003 	ldbu	r2,0(r2)
  81e260:	10803fcc 	andi	r2,r2,255
  81e264:	1005003a 	cmpeq	r2,r2,zero
  81e268:	1000051e 	bne	r2,zero,81e280 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  81e26c:	e0fffe17 	ldw	r3,-8(fp)
  81e270:	00800444 	movi	r2,17
  81e274:	18800005 	stb	r2,0(r3)
        return (0);
  81e278:	e03fff15 	stw	zero,-4(fp)
  81e27c:	00002306 	br	81e30c <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81e280:	0005303a 	rdctl	r2,status
  81e284:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81e288:	e0fff917 	ldw	r3,-28(fp)
  81e28c:	00bfff84 	movi	r2,-2
  81e290:	1884703a 	and	r2,r3,r2
  81e294:	1001703a 	wrctl	status,r2
  
  return context;
  81e298:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81e29c:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  81e2a0:	e0bffc17 	ldw	r2,-16(fp)
  81e2a4:	10800003 	ldbu	r2,0(r2)
  81e2a8:	10803fcc 	andi	r2,r2,255
  81e2ac:	10800160 	cmpeqi	r2,r2,5
  81e2b0:	1000091e 	bne	r2,zero,81e2d8 <OSFlagNameGet+0xf8>
  81e2b4:	e0bffa17 	ldw	r2,-24(fp)
  81e2b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81e2bc:	e0bff817 	ldw	r2,-32(fp)
  81e2c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  81e2c4:	e0fffe17 	ldw	r3,-8(fp)
  81e2c8:	00800044 	movi	r2,1
  81e2cc:	18800005 	stb	r2,0(r3)
        return (0);
  81e2d0:	e03fff15 	stw	zero,-4(fp)
  81e2d4:	00000d06 	br	81e30c <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  81e2d8:	e0bffc17 	ldw	r2,-16(fp)
  81e2dc:	11400284 	addi	r5,r2,10
  81e2e0:	e13ffd17 	ldw	r4,-12(fp)
  81e2e4:	081d3980 	call	81d398 <OS_StrCopy>
  81e2e8:	e0bffb05 	stb	r2,-20(fp)
  81e2ec:	e0bffa17 	ldw	r2,-24(fp)
  81e2f0:	e0bff715 	stw	r2,-36(fp)
  81e2f4:	e0bff717 	ldw	r2,-36(fp)
  81e2f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81e2fc:	e0bffe17 	ldw	r2,-8(fp)
  81e300:	10000005 	stb	zero,0(r2)
    return (len);
  81e304:	e0bffb03 	ldbu	r2,-20(fp)
  81e308:	e0bfff15 	stw	r2,-4(fp)
  81e30c:	e0bfff17 	ldw	r2,-4(fp)
}
  81e310:	e037883a 	mov	sp,fp
  81e314:	dfc00117 	ldw	ra,4(sp)
  81e318:	df000017 	ldw	fp,0(sp)
  81e31c:	dec00204 	addi	sp,sp,8
  81e320:	f800283a 	ret

0081e324 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  81e324:	defff504 	addi	sp,sp,-44
  81e328:	dfc00a15 	stw	ra,40(sp)
  81e32c:	df000915 	stw	fp,36(sp)
  81e330:	df000904 	addi	fp,sp,36
  81e334:	e13ffd15 	stw	r4,-12(fp)
  81e338:	e17ffe15 	stw	r5,-8(fp)
  81e33c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81e340:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  81e344:	e0bfff17 	ldw	r2,-4(fp)
  81e348:	1005003a 	cmpeq	r2,r2,zero
  81e34c:	1000451e 	bne	r2,zero,81e464 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  81e350:	e0bffd17 	ldw	r2,-12(fp)
  81e354:	1004c03a 	cmpne	r2,r2,zero
  81e358:	1000041e 	bne	r2,zero,81e36c <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  81e35c:	e0ffff17 	ldw	r3,-4(fp)
  81e360:	00801b84 	movi	r2,110
  81e364:	18800005 	stb	r2,0(r3)
        return;
  81e368:	00003e06 	br	81e464 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  81e36c:	e0bffe17 	ldw	r2,-8(fp)
  81e370:	1004c03a 	cmpne	r2,r2,zero
  81e374:	1000041e 	bne	r2,zero,81e388 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  81e378:	e0ffff17 	ldw	r3,-4(fp)
  81e37c:	00800304 	movi	r2,12
  81e380:	18800005 	stb	r2,0(r3)
        return;
  81e384:	00003706 	br	81e464 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81e388:	008020f4 	movhi	r2,131
  81e38c:	10a9ec04 	addi	r2,r2,-22608
  81e390:	10800003 	ldbu	r2,0(r2)
  81e394:	10803fcc 	andi	r2,r2,255
  81e398:	1005003a 	cmpeq	r2,r2,zero
  81e39c:	1000041e 	bne	r2,zero,81e3b0 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  81e3a0:	e0ffff17 	ldw	r3,-4(fp)
  81e3a4:	00800484 	movi	r2,18
  81e3a8:	18800005 	stb	r2,0(r3)
        return;
  81e3ac:	00002d06 	br	81e464 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81e3b0:	0005303a 	rdctl	r2,status
  81e3b4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81e3b8:	e0fffa17 	ldw	r3,-24(fp)
  81e3bc:	00bfff84 	movi	r2,-2
  81e3c0:	1884703a 	and	r2,r3,r2
  81e3c4:	1001703a 	wrctl	status,r2
  
  return context;
  81e3c8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81e3cc:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  81e3d0:	e0bffd17 	ldw	r2,-12(fp)
  81e3d4:	10800003 	ldbu	r2,0(r2)
  81e3d8:	10803fcc 	andi	r2,r2,255
  81e3dc:	10800160 	cmpeqi	r2,r2,5
  81e3e0:	1000081e 	bne	r2,zero,81e404 <OSFlagNameSet+0xe0>
  81e3e4:	e0bffb17 	ldw	r2,-20(fp)
  81e3e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81e3ec:	e0bff917 	ldw	r2,-28(fp)
  81e3f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  81e3f4:	e0ffff17 	ldw	r3,-4(fp)
  81e3f8:	00800044 	movi	r2,1
  81e3fc:	18800005 	stb	r2,0(r3)
        return;
  81e400:	00001806 	br	81e464 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  81e404:	e13ffe17 	ldw	r4,-8(fp)
  81e408:	081d4180 	call	81d418 <OS_StrLen>
  81e40c:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  81e410:	e0bffc03 	ldbu	r2,-16(fp)
  81e414:	10800830 	cmpltui	r2,r2,32
  81e418:	1000081e 	bne	r2,zero,81e43c <OSFlagNameSet+0x118>
  81e41c:	e0bffb17 	ldw	r2,-20(fp)
  81e420:	e0bff815 	stw	r2,-32(fp)
  81e424:	e0bff817 	ldw	r2,-32(fp)
  81e428:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  81e42c:	e0ffff17 	ldw	r3,-4(fp)
  81e430:	00801cc4 	movi	r2,115
  81e434:	18800005 	stb	r2,0(r3)
        return;
  81e438:	00000a06 	br	81e464 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  81e43c:	e0bffd17 	ldw	r2,-12(fp)
  81e440:	11000284 	addi	r4,r2,10
  81e444:	e17ffe17 	ldw	r5,-8(fp)
  81e448:	081d3980 	call	81d398 <OS_StrCopy>
  81e44c:	e0bffb17 	ldw	r2,-20(fp)
  81e450:	e0bff715 	stw	r2,-36(fp)
  81e454:	e0bff717 	ldw	r2,-36(fp)
  81e458:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81e45c:	e0bfff17 	ldw	r2,-4(fp)
  81e460:	10000005 	stb	zero,0(r2)
    return;
}
  81e464:	e037883a 	mov	sp,fp
  81e468:	dfc00117 	ldw	ra,4(sp)
  81e46c:	df000017 	ldw	fp,0(sp)
  81e470:	dec00204 	addi	sp,sp,8
  81e474:	f800283a 	ret

0081e478 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  81e478:	deffe004 	addi	sp,sp,-128
  81e47c:	dfc01f15 	stw	ra,124(sp)
  81e480:	df001e15 	stw	fp,120(sp)
  81e484:	df001e04 	addi	fp,sp,120
  81e488:	e13ff915 	stw	r4,-28(fp)
  81e48c:	e17ffa0d 	sth	r5,-24(fp)
  81e490:	e1bffb05 	stb	r6,-20(fp)
  81e494:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  81e498:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  81e49c:	e0800217 	ldw	r2,8(fp)
  81e4a0:	1004c03a 	cmpne	r2,r2,zero
  81e4a4:	1000021e 	bne	r2,zero,81e4b0 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
  81e4a8:	e03fff15 	stw	zero,-4(fp)
  81e4ac:	00017d06 	br	81eaa4 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  81e4b0:	e0bff917 	ldw	r2,-28(fp)
  81e4b4:	1004c03a 	cmpne	r2,r2,zero
  81e4b8:	1000051e 	bne	r2,zero,81e4d0 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  81e4bc:	e0c00217 	ldw	r3,8(fp)
  81e4c0:	00801b84 	movi	r2,110
  81e4c4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  81e4c8:	e03fff15 	stw	zero,-4(fp)
  81e4cc:	00017506 	br	81eaa4 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  81e4d0:	008020f4 	movhi	r2,131
  81e4d4:	10a9ec04 	addi	r2,r2,-22608
  81e4d8:	10800003 	ldbu	r2,0(r2)
  81e4dc:	10803fcc 	andi	r2,r2,255
  81e4e0:	1005003a 	cmpeq	r2,r2,zero
  81e4e4:	1000051e 	bne	r2,zero,81e4fc <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  81e4e8:	e0c00217 	ldw	r3,8(fp)
  81e4ec:	00800084 	movi	r2,2
  81e4f0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  81e4f4:	e03fff15 	stw	zero,-4(fp)
  81e4f8:	00016a06 	br	81eaa4 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  81e4fc:	008020f4 	movhi	r2,131
  81e500:	10a9de04 	addi	r2,r2,-22664
  81e504:	10800003 	ldbu	r2,0(r2)
  81e508:	10803fcc 	andi	r2,r2,255
  81e50c:	1005003a 	cmpeq	r2,r2,zero
  81e510:	1000051e 	bne	r2,zero,81e528 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  81e514:	e0c00217 	ldw	r3,8(fp)
  81e518:	00800344 	movi	r2,13
  81e51c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  81e520:	e03fff15 	stw	zero,-4(fp)
  81e524:	00015f06 	br	81eaa4 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  81e528:	e0bff917 	ldw	r2,-28(fp)
  81e52c:	10800003 	ldbu	r2,0(r2)
  81e530:	10803fcc 	andi	r2,r2,255
  81e534:	10800160 	cmpeqi	r2,r2,5
  81e538:	1000051e 	bne	r2,zero,81e550 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
  81e53c:	e0c00217 	ldw	r3,8(fp)
  81e540:	00800044 	movi	r2,1
  81e544:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  81e548:	e03fff15 	stw	zero,-4(fp)
  81e54c:	00015506 	br	81eaa4 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  81e550:	e0fffb03 	ldbu	r3,-20(fp)
  81e554:	00bfe004 	movi	r2,-128
  81e558:	1884703a 	and	r2,r3,r2
  81e55c:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  81e560:	e0bff283 	ldbu	r2,-54(fp)
  81e564:	1005003a 	cmpeq	r2,r2,zero
  81e568:	1000071e 	bne	r2,zero,81e588 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  81e56c:	00c01fc4 	movi	r3,127
  81e570:	e0bffb03 	ldbu	r2,-20(fp)
  81e574:	10c4703a 	and	r2,r2,r3
  81e578:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
  81e57c:	00800044 	movi	r2,1
  81e580:	e0bff205 	stb	r2,-56(fp)
  81e584:	00000106 	br	81e58c <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
  81e588:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81e58c:	0005303a 	rdctl	r2,status
  81e590:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81e594:	e0fff017 	ldw	r3,-64(fp)
  81e598:	00bfff84 	movi	r2,-2
  81e59c:	1884703a 	and	r2,r3,r2
  81e5a0:	1001703a 	wrctl	status,r2
  
  return context;
  81e5a4:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  81e5a8:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
  81e5ac:	e0bffb03 	ldbu	r2,-20(fp)
  81e5b0:	e0bffe15 	stw	r2,-8(fp)
  81e5b4:	e0fffe17 	ldw	r3,-8(fp)
  81e5b8:	18800060 	cmpeqi	r2,r3,1
  81e5bc:	1000981e 	bne	r2,zero,81e820 <OSFlagPend+0x3a8>
  81e5c0:	e0fffe17 	ldw	r3,-8(fp)
  81e5c4:	18800088 	cmpgei	r2,r3,2
  81e5c8:	1000041e 	bne	r2,zero,81e5dc <OSFlagPend+0x164>
  81e5cc:	e0fffe17 	ldw	r3,-8(fp)
  81e5d0:	1805003a 	cmpeq	r2,r3,zero
  81e5d4:	1000641e 	bne	r2,zero,81e768 <OSFlagPend+0x2f0>
  81e5d8:	0000bf06 	br	81e8d8 <OSFlagPend+0x460>
  81e5dc:	e0fffe17 	ldw	r3,-8(fp)
  81e5e0:	188000a0 	cmpeqi	r2,r3,2
  81e5e4:	1000041e 	bne	r2,zero,81e5f8 <OSFlagPend+0x180>
  81e5e8:	e0fffe17 	ldw	r3,-8(fp)
  81e5ec:	188000e0 	cmpeqi	r2,r3,3
  81e5f0:	10002f1e 	bne	r2,zero,81e6b0 <OSFlagPend+0x238>
  81e5f4:	0000b806 	br	81e8d8 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  81e5f8:	e0bff917 	ldw	r2,-28(fp)
  81e5fc:	10c0020b 	ldhu	r3,8(r2)
  81e600:	e0bffa0b 	ldhu	r2,-24(fp)
  81e604:	1884703a 	and	r2,r3,r2
  81e608:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  81e60c:	e0fff30b 	ldhu	r3,-52(fp)
  81e610:	e0bffa0b 	ldhu	r2,-24(fp)
  81e614:	18801a1e 	bne	r3,r2,81e680 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  81e618:	e0bff203 	ldbu	r2,-56(fp)
  81e61c:	10800058 	cmpnei	r2,r2,1
  81e620:	1000091e 	bne	r2,zero,81e648 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  81e624:	e0bff917 	ldw	r2,-28(fp)
  81e628:	1080020b 	ldhu	r2,8(r2)
  81e62c:	1007883a 	mov	r3,r2
  81e630:	e0bff30b 	ldhu	r2,-52(fp)
  81e634:	0084303a 	nor	r2,zero,r2
  81e638:	1884703a 	and	r2,r3,r2
  81e63c:	1007883a 	mov	r3,r2
  81e640:	e0bff917 	ldw	r2,-28(fp)
  81e644:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  81e648:	008020f4 	movhi	r2,131
  81e64c:	10a9ed04 	addi	r2,r2,-22604
  81e650:	10c00017 	ldw	r3,0(r2)
  81e654:	e0bff30b 	ldhu	r2,-52(fp)
  81e658:	18800b0d 	sth	r2,44(r3)
  81e65c:	e0bff117 	ldw	r2,-60(fp)
  81e660:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81e664:	e0bfef17 	ldw	r2,-68(fp)
  81e668:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  81e66c:	e0800217 	ldw	r2,8(fp)
  81e670:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  81e674:	e0bff30b 	ldhu	r2,-52(fp)
  81e678:	e0bfff15 	stw	r2,-4(fp)
  81e67c:	00010906 	br	81eaa4 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  81e680:	e1bffa0b 	ldhu	r6,-24(fp)
  81e684:	e1fffb03 	ldbu	r7,-20(fp)
  81e688:	e0bffc0b 	ldhu	r2,-16(fp)
  81e68c:	e17ff404 	addi	r5,fp,-48
  81e690:	d8800015 	stw	r2,0(sp)
  81e694:	e13ff917 	ldw	r4,-28(fp)
  81e698:	081efa00 	call	81efa0 <OS_FlagBlock>
  81e69c:	e0bff117 	ldw	r2,-60(fp)
  81e6a0:	e0bfee15 	stw	r2,-72(fp)
  81e6a4:	e0bfee17 	ldw	r2,-72(fp)
  81e6a8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  81e6ac:	00009506 	br	81e904 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  81e6b0:	e0bff917 	ldw	r2,-28(fp)
  81e6b4:	10c0020b 	ldhu	r3,8(r2)
  81e6b8:	e0bffa0b 	ldhu	r2,-24(fp)
  81e6bc:	1884703a 	and	r2,r3,r2
  81e6c0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  81e6c4:	e0bff30b 	ldhu	r2,-52(fp)
  81e6c8:	1005003a 	cmpeq	r2,r2,zero
  81e6cc:	10001a1e 	bne	r2,zero,81e738 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  81e6d0:	e0bff203 	ldbu	r2,-56(fp)
  81e6d4:	10800058 	cmpnei	r2,r2,1
  81e6d8:	1000091e 	bne	r2,zero,81e700 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  81e6dc:	e0bff917 	ldw	r2,-28(fp)
  81e6e0:	1080020b 	ldhu	r2,8(r2)
  81e6e4:	1007883a 	mov	r3,r2
  81e6e8:	e0bff30b 	ldhu	r2,-52(fp)
  81e6ec:	0084303a 	nor	r2,zero,r2
  81e6f0:	1884703a 	and	r2,r3,r2
  81e6f4:	1007883a 	mov	r3,r2
  81e6f8:	e0bff917 	ldw	r2,-28(fp)
  81e6fc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  81e700:	008020f4 	movhi	r2,131
  81e704:	10a9ed04 	addi	r2,r2,-22604
  81e708:	10c00017 	ldw	r3,0(r2)
  81e70c:	e0bff30b 	ldhu	r2,-52(fp)
  81e710:	18800b0d 	sth	r2,44(r3)
  81e714:	e0bff117 	ldw	r2,-60(fp)
  81e718:	e0bfed15 	stw	r2,-76(fp)
  81e71c:	e0bfed17 	ldw	r2,-76(fp)
  81e720:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  81e724:	e0800217 	ldw	r2,8(fp)
  81e728:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  81e72c:	e0fff30b 	ldhu	r3,-52(fp)
  81e730:	e0ffff15 	stw	r3,-4(fp)
  81e734:	0000db06 	br	81eaa4 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  81e738:	e1bffa0b 	ldhu	r6,-24(fp)
  81e73c:	e1fffb03 	ldbu	r7,-20(fp)
  81e740:	e0bffc0b 	ldhu	r2,-16(fp)
  81e744:	e17ff404 	addi	r5,fp,-48
  81e748:	d8800015 	stw	r2,0(sp)
  81e74c:	e13ff917 	ldw	r4,-28(fp)
  81e750:	081efa00 	call	81efa0 <OS_FlagBlock>
  81e754:	e0bff117 	ldw	r2,-60(fp)
  81e758:	e0bfec15 	stw	r2,-80(fp)
  81e75c:	e0bfec17 	ldw	r2,-80(fp)
  81e760:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  81e764:	00006706 	br	81e904 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  81e768:	e0bff917 	ldw	r2,-28(fp)
  81e76c:	1080020b 	ldhu	r2,8(r2)
  81e770:	0084303a 	nor	r2,zero,r2
  81e774:	1007883a 	mov	r3,r2
  81e778:	e0bffa0b 	ldhu	r2,-24(fp)
  81e77c:	1884703a 	and	r2,r3,r2
  81e780:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  81e784:	e0fff30b 	ldhu	r3,-52(fp)
  81e788:	e0bffa0b 	ldhu	r2,-24(fp)
  81e78c:	1880181e 	bne	r3,r2,81e7f0 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  81e790:	e0bff203 	ldbu	r2,-56(fp)
  81e794:	10800058 	cmpnei	r2,r2,1
  81e798:	1000071e 	bne	r2,zero,81e7b8 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  81e79c:	e0bff917 	ldw	r2,-28(fp)
  81e7a0:	10c0020b 	ldhu	r3,8(r2)
  81e7a4:	e0bff30b 	ldhu	r2,-52(fp)
  81e7a8:	1884b03a 	or	r2,r3,r2
  81e7ac:	1007883a 	mov	r3,r2
  81e7b0:	e0bff917 	ldw	r2,-28(fp)
  81e7b4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  81e7b8:	008020f4 	movhi	r2,131
  81e7bc:	10a9ed04 	addi	r2,r2,-22604
  81e7c0:	10c00017 	ldw	r3,0(r2)
  81e7c4:	e0bff30b 	ldhu	r2,-52(fp)
  81e7c8:	18800b0d 	sth	r2,44(r3)
  81e7cc:	e0bff117 	ldw	r2,-60(fp)
  81e7d0:	e0bfeb15 	stw	r2,-84(fp)
  81e7d4:	e0bfeb17 	ldw	r2,-84(fp)
  81e7d8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  81e7dc:	e0800217 	ldw	r2,8(fp)
  81e7e0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  81e7e4:	e0bff30b 	ldhu	r2,-52(fp)
  81e7e8:	e0bfff15 	stw	r2,-4(fp)
  81e7ec:	0000ad06 	br	81eaa4 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  81e7f0:	e1bffa0b 	ldhu	r6,-24(fp)
  81e7f4:	e1fffb03 	ldbu	r7,-20(fp)
  81e7f8:	e0bffc0b 	ldhu	r2,-16(fp)
  81e7fc:	e17ff404 	addi	r5,fp,-48
  81e800:	d8800015 	stw	r2,0(sp)
  81e804:	e13ff917 	ldw	r4,-28(fp)
  81e808:	081efa00 	call	81efa0 <OS_FlagBlock>
  81e80c:	e0bff117 	ldw	r2,-60(fp)
  81e810:	e0bfea15 	stw	r2,-88(fp)
  81e814:	e0bfea17 	ldw	r2,-88(fp)
  81e818:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  81e81c:	00003906 	br	81e904 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  81e820:	e0bff917 	ldw	r2,-28(fp)
  81e824:	1080020b 	ldhu	r2,8(r2)
  81e828:	0084303a 	nor	r2,zero,r2
  81e82c:	1007883a 	mov	r3,r2
  81e830:	e0bffa0b 	ldhu	r2,-24(fp)
  81e834:	1884703a 	and	r2,r3,r2
  81e838:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  81e83c:	e0bff30b 	ldhu	r2,-52(fp)
  81e840:	1005003a 	cmpeq	r2,r2,zero
  81e844:	1000181e 	bne	r2,zero,81e8a8 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  81e848:	e0bff203 	ldbu	r2,-56(fp)
  81e84c:	10800058 	cmpnei	r2,r2,1
  81e850:	1000071e 	bne	r2,zero,81e870 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  81e854:	e0bff917 	ldw	r2,-28(fp)
  81e858:	10c0020b 	ldhu	r3,8(r2)
  81e85c:	e0bff30b 	ldhu	r2,-52(fp)
  81e860:	1884b03a 	or	r2,r3,r2
  81e864:	1007883a 	mov	r3,r2
  81e868:	e0bff917 	ldw	r2,-28(fp)
  81e86c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  81e870:	008020f4 	movhi	r2,131
  81e874:	10a9ed04 	addi	r2,r2,-22604
  81e878:	10c00017 	ldw	r3,0(r2)
  81e87c:	e0bff30b 	ldhu	r2,-52(fp)
  81e880:	18800b0d 	sth	r2,44(r3)
  81e884:	e0bff117 	ldw	r2,-60(fp)
  81e888:	e0bfe915 	stw	r2,-92(fp)
  81e88c:	e0bfe917 	ldw	r2,-92(fp)
  81e890:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  81e894:	e0800217 	ldw	r2,8(fp)
  81e898:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  81e89c:	e0fff30b 	ldhu	r3,-52(fp)
  81e8a0:	e0ffff15 	stw	r3,-4(fp)
  81e8a4:	00007f06 	br	81eaa4 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  81e8a8:	e1bffa0b 	ldhu	r6,-24(fp)
  81e8ac:	e1fffb03 	ldbu	r7,-20(fp)
  81e8b0:	e0bffc0b 	ldhu	r2,-16(fp)
  81e8b4:	e17ff404 	addi	r5,fp,-48
  81e8b8:	d8800015 	stw	r2,0(sp)
  81e8bc:	e13ff917 	ldw	r4,-28(fp)
  81e8c0:	081efa00 	call	81efa0 <OS_FlagBlock>
  81e8c4:	e0bff117 	ldw	r2,-60(fp)
  81e8c8:	e0bfe815 	stw	r2,-96(fp)
  81e8cc:	e0bfe817 	ldw	r2,-96(fp)
  81e8d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  81e8d4:	00000b06 	br	81e904 <OSFlagPend+0x48c>
  81e8d8:	e0bff117 	ldw	r2,-60(fp)
  81e8dc:	e0bfe715 	stw	r2,-100(fp)
  81e8e0:	e0bfe717 	ldw	r2,-100(fp)
  81e8e4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  81e8e8:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  81e8ec:	e0c00217 	ldw	r3,8(fp)
  81e8f0:	00801bc4 	movi	r2,111
  81e8f4:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
  81e8f8:	e0bff30b 	ldhu	r2,-52(fp)
  81e8fc:	e0bfff15 	stw	r2,-4(fp)
  81e900:	00006806 	br	81eaa4 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  81e904:	081d2540 	call	81d254 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81e908:	0005303a 	rdctl	r2,status
  81e90c:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81e910:	e0ffe617 	ldw	r3,-104(fp)
  81e914:	00bfff84 	movi	r2,-2
  81e918:	1884703a 	and	r2,r3,r2
  81e91c:	1001703a 	wrctl	status,r2
  
  return context;
  81e920:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
  81e924:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  81e928:	008020f4 	movhi	r2,131
  81e92c:	10a9ed04 	addi	r2,r2,-22604
  81e930:	10800017 	ldw	r2,0(r2)
  81e934:	10800c43 	ldbu	r2,49(r2)
  81e938:	10803fcc 	andi	r2,r2,255
  81e93c:	1005003a 	cmpeq	r2,r2,zero
  81e940:	1000221e 	bne	r2,zero,81e9cc <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  81e944:	008020f4 	movhi	r2,131
  81e948:	10a9ed04 	addi	r2,r2,-22604
  81e94c:	10800017 	ldw	r2,0(r2)
  81e950:	10800c43 	ldbu	r2,49(r2)
  81e954:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  81e958:	008020f4 	movhi	r2,131
  81e95c:	10a9ed04 	addi	r2,r2,-22604
  81e960:	10800017 	ldw	r2,0(r2)
  81e964:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  81e968:	e13ff404 	addi	r4,fp,-48
  81e96c:	081f3580 	call	81f358 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  81e970:	008020f4 	movhi	r2,131
  81e974:	10a9ed04 	addi	r2,r2,-22604
  81e978:	10800017 	ldw	r2,0(r2)
  81e97c:	10000c05 	stb	zero,48(r2)
  81e980:	e0bff117 	ldw	r2,-60(fp)
  81e984:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81e988:	e0bfe517 	ldw	r2,-108(fp)
  81e98c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  81e990:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
  81e994:	e0bff243 	ldbu	r2,-55(fp)
  81e998:	108000a0 	cmpeqi	r2,r2,2
  81e99c:	1000011e 	bne	r2,zero,81e9a4 <OSFlagPend+0x52c>
  81e9a0:	00000406 	br	81e9b4 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  81e9a4:	e0c00217 	ldw	r3,8(fp)
  81e9a8:	00800384 	movi	r2,14
  81e9ac:	18800005 	stb	r2,0(r3)
                 break;
  81e9b0:	00000306 	br	81e9c0 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  81e9b4:	e0c00217 	ldw	r3,8(fp)
  81e9b8:	00800284 	movi	r2,10
  81e9bc:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
  81e9c0:	e0fff30b 	ldhu	r3,-52(fp)
  81e9c4:	e0ffff15 	stw	r3,-4(fp)
  81e9c8:	00003606 	br	81eaa4 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  81e9cc:	008020f4 	movhi	r2,131
  81e9d0:	10a9ed04 	addi	r2,r2,-22604
  81e9d4:	10800017 	ldw	r2,0(r2)
  81e9d8:	10800b0b 	ldhu	r2,44(r2)
  81e9dc:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  81e9e0:	e0bff203 	ldbu	r2,-56(fp)
  81e9e4:	10800058 	cmpnei	r2,r2,1
  81e9e8:	1000261e 	bne	r2,zero,81ea84 <OSFlagPend+0x60c>
        switch (wait_type) {
  81e9ec:	e0bffb03 	ldbu	r2,-20(fp)
  81e9f0:	e0bffd15 	stw	r2,-12(fp)
  81e9f4:	e0fffd17 	ldw	r3,-12(fp)
  81e9f8:	1804803a 	cmplt	r2,r3,zero
  81e9fc:	1000181e 	bne	r2,zero,81ea60 <OSFlagPend+0x5e8>
  81ea00:	e0fffd17 	ldw	r3,-12(fp)
  81ea04:	18800090 	cmplti	r2,r3,2
  81ea08:	10000d1e 	bne	r2,zero,81ea40 <OSFlagPend+0x5c8>
  81ea0c:	e0fffd17 	ldw	r3,-12(fp)
  81ea10:	18800108 	cmpgei	r2,r3,4
  81ea14:	1000121e 	bne	r2,zero,81ea60 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  81ea18:	e0bff917 	ldw	r2,-28(fp)
  81ea1c:	1080020b 	ldhu	r2,8(r2)
  81ea20:	1007883a 	mov	r3,r2
  81ea24:	e0bff30b 	ldhu	r2,-52(fp)
  81ea28:	0084303a 	nor	r2,zero,r2
  81ea2c:	1884703a 	and	r2,r3,r2
  81ea30:	1007883a 	mov	r3,r2
  81ea34:	e0bff917 	ldw	r2,-28(fp)
  81ea38:	10c0020d 	sth	r3,8(r2)
                 break;
  81ea3c:	00001106 	br	81ea84 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  81ea40:	e0bff917 	ldw	r2,-28(fp)
  81ea44:	10c0020b 	ldhu	r3,8(r2)
  81ea48:	e0bff30b 	ldhu	r2,-52(fp)
  81ea4c:	1884b03a 	or	r2,r3,r2
  81ea50:	1007883a 	mov	r3,r2
  81ea54:	e0bff917 	ldw	r2,-28(fp)
  81ea58:	10c0020d 	sth	r3,8(r2)
                 break;
  81ea5c:	00000906 	br	81ea84 <OSFlagPend+0x60c>
  81ea60:	e0bff117 	ldw	r2,-60(fp)
  81ea64:	e0bfe415 	stw	r2,-112(fp)
  81ea68:	e0bfe417 	ldw	r2,-112(fp)
  81ea6c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  81ea70:	e0c00217 	ldw	r3,8(fp)
  81ea74:	00801bc4 	movi	r2,111
  81ea78:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  81ea7c:	e03fff15 	stw	zero,-4(fp)
  81ea80:	00000806 	br	81eaa4 <OSFlagPend+0x62c>
  81ea84:	e0bff117 	ldw	r2,-60(fp)
  81ea88:	e0bfe315 	stw	r2,-116(fp)
  81ea8c:	e0bfe317 	ldw	r2,-116(fp)
  81ea90:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  81ea94:	e0800217 	ldw	r2,8(fp)
  81ea98:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  81ea9c:	e0bff30b 	ldhu	r2,-52(fp)
  81eaa0:	e0bfff15 	stw	r2,-4(fp)
  81eaa4:	e0bfff17 	ldw	r2,-4(fp)
}
  81eaa8:	e037883a 	mov	sp,fp
  81eaac:	dfc00117 	ldw	ra,4(sp)
  81eab0:	df000017 	ldw	fp,0(sp)
  81eab4:	dec00204 	addi	sp,sp,8
  81eab8:	f800283a 	ret

0081eabc <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  81eabc:	defffb04 	addi	sp,sp,-20
  81eac0:	df000415 	stw	fp,16(sp)
  81eac4:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  81eac8:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81eacc:	0005303a 	rdctl	r2,status
  81ead0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ead4:	e0fffd17 	ldw	r3,-12(fp)
  81ead8:	00bfff84 	movi	r2,-2
  81eadc:	1884703a 	and	r2,r3,r2
  81eae0:	1001703a 	wrctl	status,r2
  
  return context;
  81eae4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  81eae8:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  81eaec:	008020f4 	movhi	r2,131
  81eaf0:	10a9ed04 	addi	r2,r2,-22604
  81eaf4:	10800017 	ldw	r2,0(r2)
  81eaf8:	10800b0b 	ldhu	r2,44(r2)
  81eafc:	e0bfff0d 	sth	r2,-4(fp)
  81eb00:	e0bffe17 	ldw	r2,-8(fp)
  81eb04:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81eb08:	e0bffc17 	ldw	r2,-16(fp)
  81eb0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  81eb10:	e0bfff0b 	ldhu	r2,-4(fp)
}
  81eb14:	e037883a 	mov	sp,fp
  81eb18:	df000017 	ldw	fp,0(sp)
  81eb1c:	dec00104 	addi	sp,sp,4
  81eb20:	f800283a 	ret

0081eb24 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  81eb24:	deffed04 	addi	sp,sp,-76
  81eb28:	dfc01215 	stw	ra,72(sp)
  81eb2c:	df001115 	stw	fp,68(sp)
  81eb30:	df001104 	addi	fp,sp,68
  81eb34:	e13ff915 	stw	r4,-28(fp)
  81eb38:	e1fffc15 	stw	r7,-16(fp)
  81eb3c:	e17ffa0d 	sth	r5,-24(fp)
  81eb40:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  81eb44:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  81eb48:	e0bffc17 	ldw	r2,-16(fp)
  81eb4c:	1004c03a 	cmpne	r2,r2,zero
  81eb50:	1000021e 	bne	r2,zero,81eb5c <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
  81eb54:	e03fff15 	stw	zero,-4(fp)
  81eb58:	0000d606 	br	81eeb4 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  81eb5c:	e0bff917 	ldw	r2,-28(fp)
  81eb60:	1004c03a 	cmpne	r2,r2,zero
  81eb64:	1000051e 	bne	r2,zero,81eb7c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  81eb68:	e0fffc17 	ldw	r3,-16(fp)
  81eb6c:	00801b84 	movi	r2,110
  81eb70:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  81eb74:	e03fff15 	stw	zero,-4(fp)
  81eb78:	0000ce06 	br	81eeb4 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  81eb7c:	e0bff917 	ldw	r2,-28(fp)
  81eb80:	10800003 	ldbu	r2,0(r2)
  81eb84:	10803fcc 	andi	r2,r2,255
  81eb88:	10800160 	cmpeqi	r2,r2,5
  81eb8c:	1000051e 	bne	r2,zero,81eba4 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  81eb90:	e0fffc17 	ldw	r3,-16(fp)
  81eb94:	00800044 	movi	r2,1
  81eb98:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  81eb9c:	e03fff15 	stw	zero,-4(fp)
  81eba0:	0000c406 	br	81eeb4 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81eba4:	0005303a 	rdctl	r2,status
  81eba8:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ebac:	e0fff417 	ldw	r3,-48(fp)
  81ebb0:	00bfff84 	movi	r2,-2
  81ebb4:	1884703a 	and	r2,r3,r2
  81ebb8:	1001703a 	wrctl	status,r2
  
  return context;
  81ebbc:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  81ebc0:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
  81ebc4:	e0bffb03 	ldbu	r2,-20(fp)
  81ebc8:	e0bffe15 	stw	r2,-8(fp)
  81ebcc:	e0fffe17 	ldw	r3,-8(fp)
  81ebd0:	1805003a 	cmpeq	r2,r3,zero
  81ebd4:	1000041e 	bne	r2,zero,81ebe8 <OSFlagPost+0xc4>
  81ebd8:	e0fffe17 	ldw	r3,-8(fp)
  81ebdc:	18800060 	cmpeqi	r2,r3,1
  81ebe0:	10000b1e 	bne	r2,zero,81ec10 <OSFlagPost+0xec>
  81ebe4:	00001206 	br	81ec30 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  81ebe8:	e0bff917 	ldw	r2,-28(fp)
  81ebec:	1080020b 	ldhu	r2,8(r2)
  81ebf0:	1007883a 	mov	r3,r2
  81ebf4:	e0bffa0b 	ldhu	r2,-24(fp)
  81ebf8:	0084303a 	nor	r2,zero,r2
  81ebfc:	1884703a 	and	r2,r3,r2
  81ec00:	1007883a 	mov	r3,r2
  81ec04:	e0bff917 	ldw	r2,-28(fp)
  81ec08:	10c0020d 	sth	r3,8(r2)
             break;
  81ec0c:	00001106 	br	81ec54 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  81ec10:	e0bff917 	ldw	r2,-28(fp)
  81ec14:	10c0020b 	ldhu	r3,8(r2)
  81ec18:	e0bffa0b 	ldhu	r2,-24(fp)
  81ec1c:	1884b03a 	or	r2,r3,r2
  81ec20:	1007883a 	mov	r3,r2
  81ec24:	e0bff917 	ldw	r2,-28(fp)
  81ec28:	10c0020d 	sth	r3,8(r2)
             break;
  81ec2c:	00000906 	br	81ec54 <OSFlagPost+0x130>
  81ec30:	e0bff517 	ldw	r2,-44(fp)
  81ec34:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81ec38:	e0bff317 	ldw	r2,-52(fp)
  81ec3c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  81ec40:	e0fffc17 	ldw	r3,-16(fp)
  81ec44:	00801c44 	movi	r2,113
  81ec48:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
  81ec4c:	e03fff15 	stw	zero,-4(fp)
  81ec50:	00009806 	br	81eeb4 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  81ec54:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  81ec58:	e0bff917 	ldw	r2,-28(fp)
  81ec5c:	10800117 	ldw	r2,4(r2)
  81ec60:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  81ec64:	00007506 	br	81ee3c <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
  81ec68:	e0bff817 	ldw	r2,-32(fp)
  81ec6c:	10800483 	ldbu	r2,18(r2)
  81ec70:	10803fcc 	andi	r2,r2,255
  81ec74:	e0bffd15 	stw	r2,-12(fp)
  81ec78:	e0fffd17 	ldw	r3,-12(fp)
  81ec7c:	18800060 	cmpeqi	r2,r3,1
  81ec80:	10004d1e 	bne	r2,zero,81edb8 <OSFlagPost+0x294>
  81ec84:	e0fffd17 	ldw	r3,-12(fp)
  81ec88:	18800088 	cmpgei	r2,r3,2
  81ec8c:	1000041e 	bne	r2,zero,81eca0 <OSFlagPost+0x17c>
  81ec90:	e0fffd17 	ldw	r3,-12(fp)
  81ec94:	1805003a 	cmpeq	r2,r3,zero
  81ec98:	1000301e 	bne	r2,zero,81ed5c <OSFlagPost+0x238>
  81ec9c:	00005b06 	br	81ee0c <OSFlagPost+0x2e8>
  81eca0:	e0fffd17 	ldw	r3,-12(fp)
  81eca4:	188000a0 	cmpeqi	r2,r3,2
  81eca8:	1000041e 	bne	r2,zero,81ecbc <OSFlagPost+0x198>
  81ecac:	e0fffd17 	ldw	r3,-12(fp)
  81ecb0:	188000e0 	cmpeqi	r2,r3,3
  81ecb4:	1000161e 	bne	r2,zero,81ed10 <OSFlagPost+0x1ec>
  81ecb8:	00005406 	br	81ee0c <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  81ecbc:	e0bff917 	ldw	r2,-28(fp)
  81ecc0:	10c0020b 	ldhu	r3,8(r2)
  81ecc4:	e0bff817 	ldw	r2,-32(fp)
  81ecc8:	1080040b 	ldhu	r2,16(r2)
  81eccc:	1884703a 	and	r2,r3,r2
  81ecd0:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  81ecd4:	e0bff817 	ldw	r2,-32(fp)
  81ecd8:	1080040b 	ldhu	r2,16(r2)
  81ecdc:	10ffffcc 	andi	r3,r2,65535
  81ece0:	e0bff68b 	ldhu	r2,-38(fp)
  81ece4:	1880521e 	bne	r3,r2,81ee30 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  81ece8:	e17ff68b 	ldhu	r5,-38(fp)
  81ecec:	e13ff817 	ldw	r4,-32(fp)
  81ecf0:	081f2480 	call	81f248 <OS_FlagTaskRdy>
  81ecf4:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  81ecf8:	e0bff603 	ldbu	r2,-40(fp)
  81ecfc:	10800058 	cmpnei	r2,r2,1
  81ed00:	10004b1e 	bne	r2,zero,81ee30 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  81ed04:	00800044 	movi	r2,1
  81ed08:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  81ed0c:	00004806 	br	81ee30 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  81ed10:	e0bff917 	ldw	r2,-28(fp)
  81ed14:	10c0020b 	ldhu	r3,8(r2)
  81ed18:	e0bff817 	ldw	r2,-32(fp)
  81ed1c:	1080040b 	ldhu	r2,16(r2)
  81ed20:	1884703a 	and	r2,r3,r2
  81ed24:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  81ed28:	e0bff68b 	ldhu	r2,-38(fp)
  81ed2c:	1005003a 	cmpeq	r2,r2,zero
  81ed30:	10003f1e 	bne	r2,zero,81ee30 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  81ed34:	e17ff68b 	ldhu	r5,-38(fp)
  81ed38:	e13ff817 	ldw	r4,-32(fp)
  81ed3c:	081f2480 	call	81f248 <OS_FlagTaskRdy>
  81ed40:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  81ed44:	e0bff603 	ldbu	r2,-40(fp)
  81ed48:	10800058 	cmpnei	r2,r2,1
  81ed4c:	1000381e 	bne	r2,zero,81ee30 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  81ed50:	00800044 	movi	r2,1
  81ed54:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  81ed58:	00003506 	br	81ee30 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  81ed5c:	e0bff917 	ldw	r2,-28(fp)
  81ed60:	1080020b 	ldhu	r2,8(r2)
  81ed64:	0084303a 	nor	r2,zero,r2
  81ed68:	1007883a 	mov	r3,r2
  81ed6c:	e0bff817 	ldw	r2,-32(fp)
  81ed70:	1080040b 	ldhu	r2,16(r2)
  81ed74:	1884703a 	and	r2,r3,r2
  81ed78:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  81ed7c:	e0bff817 	ldw	r2,-32(fp)
  81ed80:	1080040b 	ldhu	r2,16(r2)
  81ed84:	10ffffcc 	andi	r3,r2,65535
  81ed88:	e0bff68b 	ldhu	r2,-38(fp)
  81ed8c:	1880281e 	bne	r3,r2,81ee30 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  81ed90:	e17ff68b 	ldhu	r5,-38(fp)
  81ed94:	e13ff817 	ldw	r4,-32(fp)
  81ed98:	081f2480 	call	81f248 <OS_FlagTaskRdy>
  81ed9c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  81eda0:	e0bff603 	ldbu	r2,-40(fp)
  81eda4:	10800058 	cmpnei	r2,r2,1
  81eda8:	1000211e 	bne	r2,zero,81ee30 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  81edac:	00800044 	movi	r2,1
  81edb0:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  81edb4:	00001e06 	br	81ee30 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  81edb8:	e0bff917 	ldw	r2,-28(fp)
  81edbc:	1080020b 	ldhu	r2,8(r2)
  81edc0:	0084303a 	nor	r2,zero,r2
  81edc4:	1007883a 	mov	r3,r2
  81edc8:	e0bff817 	ldw	r2,-32(fp)
  81edcc:	1080040b 	ldhu	r2,16(r2)
  81edd0:	1884703a 	and	r2,r3,r2
  81edd4:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  81edd8:	e0bff68b 	ldhu	r2,-38(fp)
  81eddc:	1005003a 	cmpeq	r2,r2,zero
  81ede0:	1000131e 	bne	r2,zero,81ee30 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  81ede4:	e17ff68b 	ldhu	r5,-38(fp)
  81ede8:	e13ff817 	ldw	r4,-32(fp)
  81edec:	081f2480 	call	81f248 <OS_FlagTaskRdy>
  81edf0:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  81edf4:	e0bff603 	ldbu	r2,-40(fp)
  81edf8:	10800058 	cmpnei	r2,r2,1
  81edfc:	10000c1e 	bne	r2,zero,81ee30 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  81ee00:	00800044 	movi	r2,1
  81ee04:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  81ee08:	00000906 	br	81ee30 <OSFlagPost+0x30c>
  81ee0c:	e0bff517 	ldw	r2,-44(fp)
  81ee10:	e0bff215 	stw	r2,-56(fp)
  81ee14:	e0bff217 	ldw	r2,-56(fp)
  81ee18:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  81ee1c:	e0fffc17 	ldw	r3,-16(fp)
  81ee20:	00801bc4 	movi	r2,111
  81ee24:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  81ee28:	e03fff15 	stw	zero,-4(fp)
  81ee2c:	00002106 	br	81eeb4 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  81ee30:	e0bff817 	ldw	r2,-32(fp)
  81ee34:	10800017 	ldw	r2,0(r2)
  81ee38:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  81ee3c:	e0bff817 	ldw	r2,-32(fp)
  81ee40:	1004c03a 	cmpne	r2,r2,zero
  81ee44:	103f881e 	bne	r2,zero,81ec68 <OSFlagPost+0x144>
  81ee48:	e0bff517 	ldw	r2,-44(fp)
  81ee4c:	e0bff115 	stw	r2,-60(fp)
  81ee50:	e0bff117 	ldw	r2,-60(fp)
  81ee54:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  81ee58:	e0bff783 	ldbu	r2,-34(fp)
  81ee5c:	10800058 	cmpnei	r2,r2,1
  81ee60:	1000011e 	bne	r2,zero,81ee68 <OSFlagPost+0x344>
        OS_Sched();
  81ee64:	081d2540 	call	81d254 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81ee68:	0005303a 	rdctl	r2,status
  81ee6c:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ee70:	e0fff017 	ldw	r3,-64(fp)
  81ee74:	00bfff84 	movi	r2,-2
  81ee78:	1884703a 	and	r2,r3,r2
  81ee7c:	1001703a 	wrctl	status,r2
  
  return context;
  81ee80:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
  81ee84:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
  81ee88:	e0bff917 	ldw	r2,-28(fp)
  81ee8c:	1080020b 	ldhu	r2,8(r2)
  81ee90:	e0bff70d 	sth	r2,-36(fp)
  81ee94:	e0bff517 	ldw	r2,-44(fp)
  81ee98:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81ee9c:	e0bfef17 	ldw	r2,-68(fp)
  81eea0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  81eea4:	e0bffc17 	ldw	r2,-16(fp)
  81eea8:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  81eeac:	e0bff70b 	ldhu	r2,-36(fp)
  81eeb0:	e0bfff15 	stw	r2,-4(fp)
  81eeb4:	e0bfff17 	ldw	r2,-4(fp)
}
  81eeb8:	e037883a 	mov	sp,fp
  81eebc:	dfc00117 	ldw	ra,4(sp)
  81eec0:	df000017 	ldw	fp,0(sp)
  81eec4:	dec00204 	addi	sp,sp,8
  81eec8:	f800283a 	ret

0081eecc <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  81eecc:	defff804 	addi	sp,sp,-32
  81eed0:	df000715 	stw	fp,28(sp)
  81eed4:	df000704 	addi	fp,sp,28
  81eed8:	e13ffd15 	stw	r4,-12(fp)
  81eedc:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  81eee0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  81eee4:	e0bffe17 	ldw	r2,-8(fp)
  81eee8:	1004c03a 	cmpne	r2,r2,zero
  81eeec:	1000021e 	bne	r2,zero,81eef8 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
  81eef0:	e03fff15 	stw	zero,-4(fp)
  81eef4:	00002506 	br	81ef8c <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  81eef8:	e0bffd17 	ldw	r2,-12(fp)
  81eefc:	1004c03a 	cmpne	r2,r2,zero
  81ef00:	1000051e 	bne	r2,zero,81ef18 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  81ef04:	e0fffe17 	ldw	r3,-8(fp)
  81ef08:	00801b84 	movi	r2,110
  81ef0c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  81ef10:	e03fff15 	stw	zero,-4(fp)
  81ef14:	00001d06 	br	81ef8c <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  81ef18:	e0bffd17 	ldw	r2,-12(fp)
  81ef1c:	10800003 	ldbu	r2,0(r2)
  81ef20:	10803fcc 	andi	r2,r2,255
  81ef24:	10800160 	cmpeqi	r2,r2,5
  81ef28:	1000051e 	bne	r2,zero,81ef40 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  81ef2c:	e0fffe17 	ldw	r3,-8(fp)
  81ef30:	00800044 	movi	r2,1
  81ef34:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  81ef38:	e03fff15 	stw	zero,-4(fp)
  81ef3c:	00001306 	br	81ef8c <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81ef40:	0005303a 	rdctl	r2,status
  81ef44:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ef48:	e0fffa17 	ldw	r3,-24(fp)
  81ef4c:	00bfff84 	movi	r2,-2
  81ef50:	1884703a 	and	r2,r3,r2
  81ef54:	1001703a 	wrctl	status,r2
  
  return context;
  81ef58:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81ef5c:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
  81ef60:	e0bffd17 	ldw	r2,-12(fp)
  81ef64:	1080020b 	ldhu	r2,8(r2)
  81ef68:	e0bffc0d 	sth	r2,-16(fp)
  81ef6c:	e0bffb17 	ldw	r2,-20(fp)
  81ef70:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81ef74:	e0bff917 	ldw	r2,-28(fp)
  81ef78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81ef7c:	e0bffe17 	ldw	r2,-8(fp)
  81ef80:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  81ef84:	e0bffc0b 	ldhu	r2,-16(fp)
  81ef88:	e0bfff15 	stw	r2,-4(fp)
  81ef8c:	e0bfff17 	ldw	r2,-4(fp)
}
  81ef90:	e037883a 	mov	sp,fp
  81ef94:	df000017 	ldw	fp,0(sp)
  81ef98:	dec00104 	addi	sp,sp,4
  81ef9c:	f800283a 	ret

0081efa0 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  81efa0:	defff804 	addi	sp,sp,-32
  81efa4:	df000715 	stw	fp,28(sp)
  81efa8:	df000704 	addi	fp,sp,28
  81efac:	e13ffb15 	stw	r4,-20(fp)
  81efb0:	e17ffc15 	stw	r5,-16(fp)
  81efb4:	e0800117 	ldw	r2,4(fp)
  81efb8:	e1bffd0d 	sth	r6,-12(fp)
  81efbc:	e1fffe05 	stb	r7,-8(fp)
  81efc0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  81efc4:	008020f4 	movhi	r2,131
  81efc8:	10a9ed04 	addi	r2,r2,-22604
  81efcc:	10c00017 	ldw	r3,0(r2)
  81efd0:	008020f4 	movhi	r2,131
  81efd4:	10a9ed04 	addi	r2,r2,-22604
  81efd8:	10800017 	ldw	r2,0(r2)
  81efdc:	10800c03 	ldbu	r2,48(r2)
  81efe0:	10800814 	ori	r2,r2,32
  81efe4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  81efe8:	008020f4 	movhi	r2,131
  81efec:	10a9ed04 	addi	r2,r2,-22604
  81eff0:	10800017 	ldw	r2,0(r2)
  81eff4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  81eff8:	008020f4 	movhi	r2,131
  81effc:	10a9ed04 	addi	r2,r2,-22604
  81f000:	10c00017 	ldw	r3,0(r2)
  81f004:	e0bfff0b 	ldhu	r2,-4(fp)
  81f008:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  81f00c:	008020f4 	movhi	r2,131
  81f010:	10a9ed04 	addi	r2,r2,-22604
  81f014:	10c00017 	ldw	r3,0(r2)
  81f018:	e0bffc17 	ldw	r2,-16(fp)
  81f01c:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  81f020:	e0fffc17 	ldw	r3,-16(fp)
  81f024:	e0bffd0b 	ldhu	r2,-12(fp)
  81f028:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  81f02c:	e0fffc17 	ldw	r3,-16(fp)
  81f030:	e0bffe03 	ldbu	r2,-8(fp)
  81f034:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  81f038:	008020f4 	movhi	r2,131
  81f03c:	10a9ed04 	addi	r2,r2,-22604
  81f040:	10c00017 	ldw	r3,0(r2)
  81f044:	e0bffc17 	ldw	r2,-16(fp)
  81f048:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  81f04c:	e0bffb17 	ldw	r2,-20(fp)
  81f050:	10c00117 	ldw	r3,4(r2)
  81f054:	e0bffc17 	ldw	r2,-16(fp)
  81f058:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  81f05c:	e0bffc17 	ldw	r2,-16(fp)
  81f060:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  81f064:	e0fffc17 	ldw	r3,-16(fp)
  81f068:	e0bffb17 	ldw	r2,-20(fp)
  81f06c:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  81f070:	e0bffb17 	ldw	r2,-20(fp)
  81f074:	10800117 	ldw	r2,4(r2)
  81f078:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  81f07c:	e0bffa17 	ldw	r2,-24(fp)
  81f080:	1005003a 	cmpeq	r2,r2,zero
  81f084:	1000031e 	bne	r2,zero,81f094 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  81f088:	e0fffa17 	ldw	r3,-24(fp)
  81f08c:	e0bffc17 	ldw	r2,-16(fp)
  81f090:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  81f094:	e0fffb17 	ldw	r3,-20(fp)
  81f098:	e0bffc17 	ldw	r2,-16(fp)
  81f09c:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  81f0a0:	008020f4 	movhi	r2,131
  81f0a4:	10a9ed04 	addi	r2,r2,-22604
  81f0a8:	10800017 	ldw	r2,0(r2)
  81f0ac:	10800d03 	ldbu	r2,52(r2)
  81f0b0:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  81f0b4:	e13ff903 	ldbu	r4,-28(fp)
  81f0b8:	e0fff903 	ldbu	r3,-28(fp)
  81f0bc:	008020f4 	movhi	r2,131
  81f0c0:	10a9ea44 	addi	r2,r2,-22615
  81f0c4:	10c5883a 	add	r2,r2,r3
  81f0c8:	10800003 	ldbu	r2,0(r2)
  81f0cc:	1007883a 	mov	r3,r2
  81f0d0:	008020f4 	movhi	r2,131
  81f0d4:	10a9ed04 	addi	r2,r2,-22604
  81f0d8:	10800017 	ldw	r2,0(r2)
  81f0dc:	10800d43 	ldbu	r2,53(r2)
  81f0e0:	0084303a 	nor	r2,zero,r2
  81f0e4:	1884703a 	and	r2,r3,r2
  81f0e8:	1007883a 	mov	r3,r2
  81f0ec:	008020f4 	movhi	r2,131
  81f0f0:	10a9ea44 	addi	r2,r2,-22615
  81f0f4:	1105883a 	add	r2,r2,r4
  81f0f8:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  81f0fc:	e0fff903 	ldbu	r3,-28(fp)
  81f100:	008020f4 	movhi	r2,131
  81f104:	10a9ea44 	addi	r2,r2,-22615
  81f108:	10c5883a 	add	r2,r2,r3
  81f10c:	10800003 	ldbu	r2,0(r2)
  81f110:	10803fcc 	andi	r2,r2,255
  81f114:	1004c03a 	cmpne	r2,r2,zero
  81f118:	10000e1e 	bne	r2,zero,81f154 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  81f11c:	008020f4 	movhi	r2,131
  81f120:	10a9ed04 	addi	r2,r2,-22604
  81f124:	10800017 	ldw	r2,0(r2)
  81f128:	10800d83 	ldbu	r2,54(r2)
  81f12c:	0084303a 	nor	r2,zero,r2
  81f130:	1007883a 	mov	r3,r2
  81f134:	008020f4 	movhi	r2,131
  81f138:	10a9ea04 	addi	r2,r2,-22616
  81f13c:	10800003 	ldbu	r2,0(r2)
  81f140:	1884703a 	and	r2,r3,r2
  81f144:	1007883a 	mov	r3,r2
  81f148:	008020f4 	movhi	r2,131
  81f14c:	10a9ea04 	addi	r2,r2,-22616
  81f150:	10c00005 	stb	r3,0(r2)
    }
}
  81f154:	e037883a 	mov	sp,fp
  81f158:	df000017 	ldw	fp,0(sp)
  81f15c:	dec00104 	addi	sp,sp,4
  81f160:	f800283a 	ret

0081f164 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  81f164:	defffb04 	addi	sp,sp,-20
  81f168:	dfc00415 	stw	ra,16(sp)
  81f16c:	df000315 	stw	fp,12(sp)
  81f170:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  81f174:	01002534 	movhi	r4,148
  81f178:	212ad204 	addi	r4,r4,-21688
  81f17c:	0140dc04 	movi	r5,880
  81f180:	081d1940 	call	81d194 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  81f184:	00802534 	movhi	r2,148
  81f188:	10aad204 	addi	r2,r2,-21688
  81f18c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  81f190:	00802534 	movhi	r2,148
  81f194:	10aadd04 	addi	r2,r2,-21644
  81f198:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  81f19c:	e03fff0d 	sth	zero,-4(fp)
  81f1a0:	00001306 	br	81f1f0 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  81f1a4:	e0bffe17 	ldw	r2,-8(fp)
  81f1a8:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  81f1ac:	e0fffe17 	ldw	r3,-8(fp)
  81f1b0:	e0bffd17 	ldw	r2,-12(fp)
  81f1b4:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  81f1b8:	e0fffe17 	ldw	r3,-8(fp)
  81f1bc:	00800fc4 	movi	r2,63
  81f1c0:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  81f1c4:	e0bffe17 	ldw	r2,-8(fp)
  81f1c8:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  81f1cc:	e0bffe17 	ldw	r2,-8(fp)
  81f1d0:	10800b04 	addi	r2,r2,44
  81f1d4:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  81f1d8:	e0bffd17 	ldw	r2,-12(fp)
  81f1dc:	10800b04 	addi	r2,r2,44
  81f1e0:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  81f1e4:	e0bfff0b 	ldhu	r2,-4(fp)
  81f1e8:	10800044 	addi	r2,r2,1
  81f1ec:	e0bfff0d 	sth	r2,-4(fp)
  81f1f0:	e0bfff0b 	ldhu	r2,-4(fp)
  81f1f4:	108004f0 	cmpltui	r2,r2,19
  81f1f8:	103fea1e 	bne	r2,zero,81f1a4 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  81f1fc:	e0bffe17 	ldw	r2,-8(fp)
  81f200:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  81f204:	e0bffe17 	ldw	r2,-8(fp)
  81f208:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  81f20c:	e0fffe17 	ldw	r3,-8(fp)
  81f210:	00800fc4 	movi	r2,63
  81f214:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  81f218:	e0bffe17 	ldw	r2,-8(fp)
  81f21c:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  81f220:	00c020f4 	movhi	r3,131
  81f224:	18e9ef04 	addi	r3,r3,-22596
  81f228:	00802534 	movhi	r2,148
  81f22c:	10aad204 	addi	r2,r2,-21688
  81f230:	18800015 	stw	r2,0(r3)
#endif
}
  81f234:	e037883a 	mov	sp,fp
  81f238:	dfc00117 	ldw	ra,4(sp)
  81f23c:	df000017 	ldw	fp,0(sp)
  81f240:	dec00204 	addi	sp,sp,8
  81f244:	f800283a 	ret

0081f248 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  81f248:	defffa04 	addi	sp,sp,-24
  81f24c:	dfc00515 	stw	ra,20(sp)
  81f250:	df000415 	stw	fp,16(sp)
  81f254:	df000404 	addi	fp,sp,16
  81f258:	e13ffe15 	stw	r4,-8(fp)
  81f25c:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  81f260:	e0bffe17 	ldw	r2,-8(fp)
  81f264:	10800217 	ldw	r2,8(r2)
  81f268:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  81f26c:	e0bffd17 	ldw	r2,-12(fp)
  81f270:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  81f274:	e0fffd17 	ldw	r3,-12(fp)
  81f278:	e0bfff0b 	ldhu	r2,-4(fp)
  81f27c:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  81f280:	e0bffd17 	ldw	r2,-12(fp)
  81f284:	10c00c03 	ldbu	r3,48(r2)
  81f288:	00bff7c4 	movi	r2,-33
  81f28c:	1884703a 	and	r2,r3,r2
  81f290:	1007883a 	mov	r3,r2
  81f294:	e0bffd17 	ldw	r2,-12(fp)
  81f298:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  81f29c:	e0bffd17 	ldw	r2,-12(fp)
  81f2a0:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  81f2a4:	e0bffd17 	ldw	r2,-12(fp)
  81f2a8:	10800c03 	ldbu	r2,48(r2)
  81f2ac:	10803fcc 	andi	r2,r2,255
  81f2b0:	1004c03a 	cmpne	r2,r2,zero
  81f2b4:	10001f1e 	bne	r2,zero,81f334 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  81f2b8:	e0bffd17 	ldw	r2,-12(fp)
  81f2bc:	10c00d83 	ldbu	r3,54(r2)
  81f2c0:	008020f4 	movhi	r2,131
  81f2c4:	10a9ea04 	addi	r2,r2,-22616
  81f2c8:	10800003 	ldbu	r2,0(r2)
  81f2cc:	1884b03a 	or	r2,r3,r2
  81f2d0:	1007883a 	mov	r3,r2
  81f2d4:	008020f4 	movhi	r2,131
  81f2d8:	10a9ea04 	addi	r2,r2,-22616
  81f2dc:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  81f2e0:	e0bffd17 	ldw	r2,-12(fp)
  81f2e4:	10800d03 	ldbu	r2,52(r2)
  81f2e8:	11003fcc 	andi	r4,r2,255
  81f2ec:	e0bffd17 	ldw	r2,-12(fp)
  81f2f0:	10800d03 	ldbu	r2,52(r2)
  81f2f4:	10c03fcc 	andi	r3,r2,255
  81f2f8:	008020f4 	movhi	r2,131
  81f2fc:	10a9ea44 	addi	r2,r2,-22615
  81f300:	10c5883a 	add	r2,r2,r3
  81f304:	10c00003 	ldbu	r3,0(r2)
  81f308:	e0bffd17 	ldw	r2,-12(fp)
  81f30c:	10800d43 	ldbu	r2,53(r2)
  81f310:	1884b03a 	or	r2,r3,r2
  81f314:	1007883a 	mov	r3,r2
  81f318:	008020f4 	movhi	r2,131
  81f31c:	10a9ea44 	addi	r2,r2,-22615
  81f320:	1105883a 	add	r2,r2,r4
  81f324:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
  81f328:	00800044 	movi	r2,1
  81f32c:	e0bffc05 	stb	r2,-16(fp)
  81f330:	00000106 	br	81f338 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
  81f334:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  81f338:	e13ffe17 	ldw	r4,-8(fp)
  81f33c:	081f3580 	call	81f358 <OS_FlagUnlink>
    return (sched);
  81f340:	e0bffc03 	ldbu	r2,-16(fp)
}
  81f344:	e037883a 	mov	sp,fp
  81f348:	dfc00117 	ldw	ra,4(sp)
  81f34c:	df000017 	ldw	fp,0(sp)
  81f350:	dec00204 	addi	sp,sp,8
  81f354:	f800283a 	ret

0081f358 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  81f358:	defffa04 	addi	sp,sp,-24
  81f35c:	df000515 	stw	fp,20(sp)
  81f360:	df000504 	addi	fp,sp,20
  81f364:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  81f368:	e0bfff17 	ldw	r2,-4(fp)
  81f36c:	10800117 	ldw	r2,4(r2)
  81f370:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  81f374:	e0bfff17 	ldw	r2,-4(fp)
  81f378:	10800017 	ldw	r2,0(r2)
  81f37c:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  81f380:	e0bffc17 	ldw	r2,-16(fp)
  81f384:	1004c03a 	cmpne	r2,r2,zero
  81f388:	10000c1e 	bne	r2,zero,81f3bc <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  81f38c:	e0bfff17 	ldw	r2,-4(fp)
  81f390:	10800317 	ldw	r2,12(r2)
  81f394:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  81f398:	e0fffd17 	ldw	r3,-12(fp)
  81f39c:	e0bffb17 	ldw	r2,-20(fp)
  81f3a0:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  81f3a4:	e0bffb17 	ldw	r2,-20(fp)
  81f3a8:	1005003a 	cmpeq	r2,r2,zero
  81f3ac:	10000c1e 	bne	r2,zero,81f3e0 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  81f3b0:	e0bffb17 	ldw	r2,-20(fp)
  81f3b4:	10000115 	stw	zero,4(r2)
  81f3b8:	00000906 	br	81f3e0 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  81f3bc:	e0fffc17 	ldw	r3,-16(fp)
  81f3c0:	e0bffb17 	ldw	r2,-20(fp)
  81f3c4:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  81f3c8:	e0bffb17 	ldw	r2,-20(fp)
  81f3cc:	1005003a 	cmpeq	r2,r2,zero
  81f3d0:	1000031e 	bne	r2,zero,81f3e0 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  81f3d4:	e0fffb17 	ldw	r3,-20(fp)
  81f3d8:	e0bffc17 	ldw	r2,-16(fp)
  81f3dc:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  81f3e0:	e0bfff17 	ldw	r2,-4(fp)
  81f3e4:	10800217 	ldw	r2,8(r2)
  81f3e8:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  81f3ec:	e0bffe17 	ldw	r2,-8(fp)
  81f3f0:	10000a15 	stw	zero,40(r2)
#endif
}
  81f3f4:	e037883a 	mov	sp,fp
  81f3f8:	df000017 	ldw	fp,0(sp)
  81f3fc:	dec00104 	addi	sp,sp,4
  81f400:	f800283a 	ret

0081f404 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  81f404:	defff304 	addi	sp,sp,-52
  81f408:	df000c15 	stw	fp,48(sp)
  81f40c:	df000c04 	addi	fp,sp,48
  81f410:	e13ffb15 	stw	r4,-20(fp)
  81f414:	e17ffc15 	stw	r5,-16(fp)
  81f418:	e1bffd15 	stw	r6,-12(fp)
  81f41c:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81f420:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  81f424:	e0bffe17 	ldw	r2,-8(fp)
  81f428:	1004c03a 	cmpne	r2,r2,zero
  81f42c:	1000021e 	bne	r2,zero,81f438 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
  81f430:	e03fff15 	stw	zero,-4(fp)
  81f434:	00007506 	br	81f60c <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  81f438:	e0bffb17 	ldw	r2,-20(fp)
  81f43c:	1004c03a 	cmpne	r2,r2,zero
  81f440:	1000051e 	bne	r2,zero,81f458 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  81f444:	e0fffe17 	ldw	r3,-8(fp)
  81f448:	00801884 	movi	r2,98
  81f44c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  81f450:	e03fff15 	stw	zero,-4(fp)
  81f454:	00006d06 	br	81f60c <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  81f458:	e0bffb17 	ldw	r2,-20(fp)
  81f45c:	108000cc 	andi	r2,r2,3
  81f460:	1005003a 	cmpeq	r2,r2,zero
  81f464:	1000051e 	bne	r2,zero,81f47c <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  81f468:	e0fffe17 	ldw	r3,-8(fp)
  81f46c:	00801884 	movi	r2,98
  81f470:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  81f474:	e03fff15 	stw	zero,-4(fp)
  81f478:	00006406 	br	81f60c <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  81f47c:	e0bffc17 	ldw	r2,-16(fp)
  81f480:	108000a8 	cmpgeui	r2,r2,2
  81f484:	1000051e 	bne	r2,zero,81f49c <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  81f488:	e0fffe17 	ldw	r3,-8(fp)
  81f48c:	008016c4 	movi	r2,91
  81f490:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  81f494:	e03fff15 	stw	zero,-4(fp)
  81f498:	00005c06 	br	81f60c <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  81f49c:	e0bffd17 	ldw	r2,-12(fp)
  81f4a0:	10800128 	cmpgeui	r2,r2,4
  81f4a4:	1000051e 	bne	r2,zero,81f4bc <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  81f4a8:	e0fffe17 	ldw	r3,-8(fp)
  81f4ac:	00801704 	movi	r2,92
  81f4b0:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  81f4b4:	e03fff15 	stw	zero,-4(fp)
  81f4b8:	00005406 	br	81f60c <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81f4bc:	0005303a 	rdctl	r2,status
  81f4c0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81f4c4:	e0fff517 	ldw	r3,-44(fp)
  81f4c8:	00bfff84 	movi	r2,-2
  81f4cc:	1884703a 	and	r2,r3,r2
  81f4d0:	1001703a 	wrctl	status,r2
  
  return context;
  81f4d4:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81f4d8:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  81f4dc:	008020f4 	movhi	r2,131
  81f4e0:	10a9e704 	addi	r2,r2,-22628
  81f4e4:	10800017 	ldw	r2,0(r2)
  81f4e8:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  81f4ec:	008020f4 	movhi	r2,131
  81f4f0:	10a9e704 	addi	r2,r2,-22628
  81f4f4:	10800017 	ldw	r2,0(r2)
  81f4f8:	1005003a 	cmpeq	r2,r2,zero
  81f4fc:	1000081e 	bne	r2,zero,81f520 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  81f500:	008020f4 	movhi	r2,131
  81f504:	10a9e704 	addi	r2,r2,-22628
  81f508:	10800017 	ldw	r2,0(r2)
  81f50c:	10800117 	ldw	r2,4(r2)
  81f510:	1007883a 	mov	r3,r2
  81f514:	008020f4 	movhi	r2,131
  81f518:	10a9e704 	addi	r2,r2,-22628
  81f51c:	10c00015 	stw	r3,0(r2)
  81f520:	e0bff617 	ldw	r2,-40(fp)
  81f524:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81f528:	e0bff417 	ldw	r2,-48(fp)
  81f52c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  81f530:	e0bffa17 	ldw	r2,-24(fp)
  81f534:	1004c03a 	cmpne	r2,r2,zero
  81f538:	1000051e 	bne	r2,zero,81f550 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
  81f53c:	e0fffe17 	ldw	r3,-8(fp)
  81f540:	00801684 	movi	r2,90
  81f544:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  81f548:	e03fff15 	stw	zero,-4(fp)
  81f54c:	00002f06 	br	81f60c <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  81f550:	e0bffb17 	ldw	r2,-20(fp)
  81f554:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  81f558:	e0bffb17 	ldw	r2,-20(fp)
  81f55c:	1007883a 	mov	r3,r2
  81f560:	e0bffd17 	ldw	r2,-12(fp)
  81f564:	1885883a 	add	r2,r3,r2
  81f568:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
  81f56c:	e03ff715 	stw	zero,-36(fp)
  81f570:	00000d06 	br	81f5a8 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  81f574:	e0fff817 	ldw	r3,-32(fp)
  81f578:	e0bff917 	ldw	r2,-28(fp)
  81f57c:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  81f580:	e0bff917 	ldw	r2,-28(fp)
  81f584:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  81f588:	e0bff917 	ldw	r2,-28(fp)
  81f58c:	1007883a 	mov	r3,r2
  81f590:	e0bffd17 	ldw	r2,-12(fp)
  81f594:	1885883a 	add	r2,r3,r2
  81f598:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  81f59c:	e0bff717 	ldw	r2,-36(fp)
  81f5a0:	10800044 	addi	r2,r2,1
  81f5a4:	e0bff715 	stw	r2,-36(fp)
  81f5a8:	e0bffc17 	ldw	r2,-16(fp)
  81f5ac:	10ffffc4 	addi	r3,r2,-1
  81f5b0:	e0bff717 	ldw	r2,-36(fp)
  81f5b4:	10ffef36 	bltu	r2,r3,81f574 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  81f5b8:	e0bff817 	ldw	r2,-32(fp)
  81f5bc:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  81f5c0:	e0fffa17 	ldw	r3,-24(fp)
  81f5c4:	e0bffb17 	ldw	r2,-20(fp)
  81f5c8:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  81f5cc:	e0fffa17 	ldw	r3,-24(fp)
  81f5d0:	e0bffb17 	ldw	r2,-20(fp)
  81f5d4:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  81f5d8:	e0fffa17 	ldw	r3,-24(fp)
  81f5dc:	e0bffc17 	ldw	r2,-16(fp)
  81f5e0:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
  81f5e4:	e0fffa17 	ldw	r3,-24(fp)
  81f5e8:	e0bffc17 	ldw	r2,-16(fp)
  81f5ec:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  81f5f0:	e0fffa17 	ldw	r3,-24(fp)
  81f5f4:	e0bffd17 	ldw	r2,-12(fp)
  81f5f8:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
  81f5fc:	e0bffe17 	ldw	r2,-8(fp)
  81f600:	10000005 	stb	zero,0(r2)
    return (pmem);
  81f604:	e0bffa17 	ldw	r2,-24(fp)
  81f608:	e0bfff15 	stw	r2,-4(fp)
  81f60c:	e0bfff17 	ldw	r2,-4(fp)
}
  81f610:	e037883a 	mov	sp,fp
  81f614:	df000017 	ldw	fp,0(sp)
  81f618:	dec00104 	addi	sp,sp,4
  81f61c:	f800283a 	ret

0081f620 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  81f620:	defff704 	addi	sp,sp,-36
  81f624:	df000815 	stw	fp,32(sp)
  81f628:	df000804 	addi	fp,sp,32
  81f62c:	e13ffd15 	stw	r4,-12(fp)
  81f630:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81f634:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  81f638:	e0bffe17 	ldw	r2,-8(fp)
  81f63c:	1004c03a 	cmpne	r2,r2,zero
  81f640:	1000021e 	bne	r2,zero,81f64c <OSMemGet+0x2c>
        return ((void *)0);
  81f644:	e03fff15 	stw	zero,-4(fp)
  81f648:	00003106 	br	81f710 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  81f64c:	e0bffd17 	ldw	r2,-12(fp)
  81f650:	1004c03a 	cmpne	r2,r2,zero
  81f654:	1000051e 	bne	r2,zero,81f66c <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  81f658:	e0fffe17 	ldw	r3,-8(fp)
  81f65c:	00801804 	movi	r2,96
  81f660:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81f664:	e03fff15 	stw	zero,-4(fp)
  81f668:	00002906 	br	81f710 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81f66c:	0005303a 	rdctl	r2,status
  81f670:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81f674:	e0fffa17 	ldw	r3,-24(fp)
  81f678:	00bfff84 	movi	r2,-2
  81f67c:	1884703a 	and	r2,r3,r2
  81f680:	1001703a 	wrctl	status,r2
  
  return context;
  81f684:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81f688:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  81f68c:	e0bffd17 	ldw	r2,-12(fp)
  81f690:	10800417 	ldw	r2,16(r2)
  81f694:	1005003a 	cmpeq	r2,r2,zero
  81f698:	1000151e 	bne	r2,zero,81f6f0 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  81f69c:	e0bffd17 	ldw	r2,-12(fp)
  81f6a0:	10800117 	ldw	r2,4(r2)
  81f6a4:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  81f6a8:	e0bffc17 	ldw	r2,-16(fp)
  81f6ac:	10c00017 	ldw	r3,0(r2)
  81f6b0:	e0bffd17 	ldw	r2,-12(fp)
  81f6b4:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  81f6b8:	e0bffd17 	ldw	r2,-12(fp)
  81f6bc:	10800417 	ldw	r2,16(r2)
  81f6c0:	10ffffc4 	addi	r3,r2,-1
  81f6c4:	e0bffd17 	ldw	r2,-12(fp)
  81f6c8:	10c00415 	stw	r3,16(r2)
  81f6cc:	e0bffb17 	ldw	r2,-20(fp)
  81f6d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81f6d4:	e0bff917 	ldw	r2,-28(fp)
  81f6d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  81f6dc:	e0bffe17 	ldw	r2,-8(fp)
  81f6e0:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  81f6e4:	e0bffc17 	ldw	r2,-16(fp)
  81f6e8:	e0bfff15 	stw	r2,-4(fp)
  81f6ec:	00000806 	br	81f710 <OSMemGet+0xf0>
  81f6f0:	e0bffb17 	ldw	r2,-20(fp)
  81f6f4:	e0bff815 	stw	r2,-32(fp)
  81f6f8:	e0bff817 	ldw	r2,-32(fp)
  81f6fc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  81f700:	e0fffe17 	ldw	r3,-8(fp)
  81f704:	00801744 	movi	r2,93
  81f708:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  81f70c:	e03fff15 	stw	zero,-4(fp)
  81f710:	e0bfff17 	ldw	r2,-4(fp)
}
  81f714:	e037883a 	mov	sp,fp
  81f718:	df000017 	ldw	fp,0(sp)
  81f71c:	dec00104 	addi	sp,sp,4
  81f720:	f800283a 	ret

0081f724 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  81f724:	defff604 	addi	sp,sp,-40
  81f728:	dfc00915 	stw	ra,36(sp)
  81f72c:	df000815 	stw	fp,32(sp)
  81f730:	df000804 	addi	fp,sp,32
  81f734:	e13ffc15 	stw	r4,-16(fp)
  81f738:	e17ffd15 	stw	r5,-12(fp)
  81f73c:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81f740:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  81f744:	e0bffe17 	ldw	r2,-8(fp)
  81f748:	1004c03a 	cmpne	r2,r2,zero
  81f74c:	1000021e 	bne	r2,zero,81f758 <OSMemNameGet+0x34>
        return (0);
  81f750:	e03fff15 	stw	zero,-4(fp)
  81f754:	00003006 	br	81f818 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  81f758:	e0bffc17 	ldw	r2,-16(fp)
  81f75c:	1004c03a 	cmpne	r2,r2,zero
  81f760:	1000051e 	bne	r2,zero,81f778 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  81f764:	e0fffe17 	ldw	r3,-8(fp)
  81f768:	00801804 	movi	r2,96
  81f76c:	18800005 	stb	r2,0(r3)
        return (0);
  81f770:	e03fff15 	stw	zero,-4(fp)
  81f774:	00002806 	br	81f818 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  81f778:	e0bffd17 	ldw	r2,-12(fp)
  81f77c:	1004c03a 	cmpne	r2,r2,zero
  81f780:	1000051e 	bne	r2,zero,81f798 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  81f784:	e0fffe17 	ldw	r3,-8(fp)
  81f788:	00800304 	movi	r2,12
  81f78c:	18800005 	stb	r2,0(r3)
        return (0);
  81f790:	e03fff15 	stw	zero,-4(fp)
  81f794:	00002006 	br	81f818 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81f798:	008020f4 	movhi	r2,131
  81f79c:	10a9ec04 	addi	r2,r2,-22608
  81f7a0:	10800003 	ldbu	r2,0(r2)
  81f7a4:	10803fcc 	andi	r2,r2,255
  81f7a8:	1005003a 	cmpeq	r2,r2,zero
  81f7ac:	1000051e 	bne	r2,zero,81f7c4 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  81f7b0:	e0fffe17 	ldw	r3,-8(fp)
  81f7b4:	00800444 	movi	r2,17
  81f7b8:	18800005 	stb	r2,0(r3)
        return (0);
  81f7bc:	e03fff15 	stw	zero,-4(fp)
  81f7c0:	00001506 	br	81f818 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81f7c4:	0005303a 	rdctl	r2,status
  81f7c8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81f7cc:	e0fff917 	ldw	r3,-28(fp)
  81f7d0:	00bfff84 	movi	r2,-2
  81f7d4:	1884703a 	and	r2,r3,r2
  81f7d8:	1001703a 	wrctl	status,r2
  
  return context;
  81f7dc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81f7e0:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  81f7e4:	e0bffc17 	ldw	r2,-16(fp)
  81f7e8:	11400504 	addi	r5,r2,20
  81f7ec:	e13ffd17 	ldw	r4,-12(fp)
  81f7f0:	081d3980 	call	81d398 <OS_StrCopy>
  81f7f4:	e0bffb05 	stb	r2,-20(fp)
  81f7f8:	e0bffa17 	ldw	r2,-24(fp)
  81f7fc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81f800:	e0bff817 	ldw	r2,-32(fp)
  81f804:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81f808:	e0bffe17 	ldw	r2,-8(fp)
  81f80c:	10000005 	stb	zero,0(r2)
    return (len);
  81f810:	e0bffb03 	ldbu	r2,-20(fp)
  81f814:	e0bfff15 	stw	r2,-4(fp)
  81f818:	e0bfff17 	ldw	r2,-4(fp)
}
  81f81c:	e037883a 	mov	sp,fp
  81f820:	dfc00117 	ldw	ra,4(sp)
  81f824:	df000017 	ldw	fp,0(sp)
  81f828:	dec00204 	addi	sp,sp,8
  81f82c:	f800283a 	ret

0081f830 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  81f830:	defff604 	addi	sp,sp,-40
  81f834:	dfc00915 	stw	ra,36(sp)
  81f838:	df000815 	stw	fp,32(sp)
  81f83c:	df000804 	addi	fp,sp,32
  81f840:	e13ffd15 	stw	r4,-12(fp)
  81f844:	e17ffe15 	stw	r5,-8(fp)
  81f848:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81f84c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  81f850:	e0bfff17 	ldw	r2,-4(fp)
  81f854:	1005003a 	cmpeq	r2,r2,zero
  81f858:	1000381e 	bne	r2,zero,81f93c <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  81f85c:	e0bffd17 	ldw	r2,-12(fp)
  81f860:	1004c03a 	cmpne	r2,r2,zero
  81f864:	1000041e 	bne	r2,zero,81f878 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  81f868:	e0ffff17 	ldw	r3,-4(fp)
  81f86c:	00801804 	movi	r2,96
  81f870:	18800005 	stb	r2,0(r3)
        return;
  81f874:	00003106 	br	81f93c <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  81f878:	e0bffe17 	ldw	r2,-8(fp)
  81f87c:	1004c03a 	cmpne	r2,r2,zero
  81f880:	1000041e 	bne	r2,zero,81f894 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  81f884:	e0ffff17 	ldw	r3,-4(fp)
  81f888:	00800304 	movi	r2,12
  81f88c:	18800005 	stb	r2,0(r3)
        return;
  81f890:	00002a06 	br	81f93c <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81f894:	008020f4 	movhi	r2,131
  81f898:	10a9ec04 	addi	r2,r2,-22608
  81f89c:	10800003 	ldbu	r2,0(r2)
  81f8a0:	10803fcc 	andi	r2,r2,255
  81f8a4:	1005003a 	cmpeq	r2,r2,zero
  81f8a8:	1000041e 	bne	r2,zero,81f8bc <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  81f8ac:	e0ffff17 	ldw	r3,-4(fp)
  81f8b0:	00800484 	movi	r2,18
  81f8b4:	18800005 	stb	r2,0(r3)
        return;
  81f8b8:	00002006 	br	81f93c <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81f8bc:	0005303a 	rdctl	r2,status
  81f8c0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81f8c4:	e0fffa17 	ldw	r3,-24(fp)
  81f8c8:	00bfff84 	movi	r2,-2
  81f8cc:	1884703a 	and	r2,r3,r2
  81f8d0:	1001703a 	wrctl	status,r2
  
  return context;
  81f8d4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81f8d8:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  81f8dc:	e13ffe17 	ldw	r4,-8(fp)
  81f8e0:	081d4180 	call	81d418 <OS_StrLen>
  81f8e4:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  81f8e8:	e0bffc03 	ldbu	r2,-16(fp)
  81f8ec:	10800830 	cmpltui	r2,r2,32
  81f8f0:	1000081e 	bne	r2,zero,81f914 <OSMemNameSet+0xe4>
  81f8f4:	e0bffb17 	ldw	r2,-20(fp)
  81f8f8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81f8fc:	e0bff917 	ldw	r2,-28(fp)
  81f900:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  81f904:	e0ffff17 	ldw	r3,-4(fp)
  81f908:	008018c4 	movi	r2,99
  81f90c:	18800005 	stb	r2,0(r3)
        return;
  81f910:	00000a06 	br	81f93c <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  81f914:	e0bffd17 	ldw	r2,-12(fp)
  81f918:	11000504 	addi	r4,r2,20
  81f91c:	e17ffe17 	ldw	r5,-8(fp)
  81f920:	081d3980 	call	81d398 <OS_StrCopy>
  81f924:	e0bffb17 	ldw	r2,-20(fp)
  81f928:	e0bff815 	stw	r2,-32(fp)
  81f92c:	e0bff817 	ldw	r2,-32(fp)
  81f930:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81f934:	e0bfff17 	ldw	r2,-4(fp)
  81f938:	10000005 	stb	zero,0(r2)
}
  81f93c:	e037883a 	mov	sp,fp
  81f940:	dfc00117 	ldw	ra,4(sp)
  81f944:	df000017 	ldw	fp,0(sp)
  81f948:	dec00204 	addi	sp,sp,8
  81f94c:	f800283a 	ret

0081f950 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  81f950:	defff804 	addi	sp,sp,-32
  81f954:	df000715 	stw	fp,28(sp)
  81f958:	df000704 	addi	fp,sp,28
  81f95c:	e13ffd15 	stw	r4,-12(fp)
  81f960:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81f964:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  81f968:	e0bffd17 	ldw	r2,-12(fp)
  81f96c:	1004c03a 	cmpne	r2,r2,zero
  81f970:	1000031e 	bne	r2,zero,81f980 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  81f974:	00801804 	movi	r2,96
  81f978:	e0bfff15 	stw	r2,-4(fp)
  81f97c:	00002b06 	br	81fa2c <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  81f980:	e0bffe17 	ldw	r2,-8(fp)
  81f984:	1004c03a 	cmpne	r2,r2,zero
  81f988:	1000031e 	bne	r2,zero,81f998 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
  81f98c:	008017c4 	movi	r2,95
  81f990:	e0bfff15 	stw	r2,-4(fp)
  81f994:	00002506 	br	81fa2c <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81f998:	0005303a 	rdctl	r2,status
  81f99c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81f9a0:	e0fffb17 	ldw	r3,-20(fp)
  81f9a4:	00bfff84 	movi	r2,-2
  81f9a8:	1884703a 	and	r2,r3,r2
  81f9ac:	1001703a 	wrctl	status,r2
  
  return context;
  81f9b0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81f9b4:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  81f9b8:	e0bffd17 	ldw	r2,-12(fp)
  81f9bc:	10c00417 	ldw	r3,16(r2)
  81f9c0:	e0bffd17 	ldw	r2,-12(fp)
  81f9c4:	10800317 	ldw	r2,12(r2)
  81f9c8:	18800736 	bltu	r3,r2,81f9e8 <OSMemPut+0x98>
  81f9cc:	e0bffc17 	ldw	r2,-16(fp)
  81f9d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81f9d4:	e0bffa17 	ldw	r2,-24(fp)
  81f9d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  81f9dc:	00801784 	movi	r2,94
  81f9e0:	e0bfff15 	stw	r2,-4(fp)
  81f9e4:	00001106 	br	81fa2c <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  81f9e8:	e0fffe17 	ldw	r3,-8(fp)
  81f9ec:	e0bffd17 	ldw	r2,-12(fp)
  81f9f0:	10800117 	ldw	r2,4(r2)
  81f9f4:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
  81f9f8:	e0fffd17 	ldw	r3,-12(fp)
  81f9fc:	e0bffe17 	ldw	r2,-8(fp)
  81fa00:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  81fa04:	e0bffd17 	ldw	r2,-12(fp)
  81fa08:	10800417 	ldw	r2,16(r2)
  81fa0c:	10c00044 	addi	r3,r2,1
  81fa10:	e0bffd17 	ldw	r2,-12(fp)
  81fa14:	10c00415 	stw	r3,16(r2)
  81fa18:	e0bffc17 	ldw	r2,-16(fp)
  81fa1c:	e0bff915 	stw	r2,-28(fp)
  81fa20:	e0bff917 	ldw	r2,-28(fp)
  81fa24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  81fa28:	e03fff15 	stw	zero,-4(fp)
  81fa2c:	e0bfff17 	ldw	r2,-4(fp)
}
  81fa30:	e037883a 	mov	sp,fp
  81fa34:	df000017 	ldw	fp,0(sp)
  81fa38:	dec00104 	addi	sp,sp,4
  81fa3c:	f800283a 	ret

0081fa40 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  81fa40:	defff904 	addi	sp,sp,-28
  81fa44:	df000615 	stw	fp,24(sp)
  81fa48:	df000604 	addi	fp,sp,24
  81fa4c:	e13ffd15 	stw	r4,-12(fp)
  81fa50:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81fa54:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  81fa58:	e0bffd17 	ldw	r2,-12(fp)
  81fa5c:	1004c03a 	cmpne	r2,r2,zero
  81fa60:	1000031e 	bne	r2,zero,81fa70 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  81fa64:	00801804 	movi	r2,96
  81fa68:	e0bfff15 	stw	r2,-4(fp)
  81fa6c:	00002e06 	br	81fb28 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  81fa70:	e0bffe17 	ldw	r2,-8(fp)
  81fa74:	1004c03a 	cmpne	r2,r2,zero
  81fa78:	1000031e 	bne	r2,zero,81fa88 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
  81fa7c:	00801844 	movi	r2,97
  81fa80:	e0bfff15 	stw	r2,-4(fp)
  81fa84:	00002806 	br	81fb28 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81fa88:	0005303a 	rdctl	r2,status
  81fa8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81fa90:	e0fffb17 	ldw	r3,-20(fp)
  81fa94:	00bfff84 	movi	r2,-2
  81fa98:	1884703a 	and	r2,r3,r2
  81fa9c:	1001703a 	wrctl	status,r2
  
  return context;
  81faa0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81faa4:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  81faa8:	e0bffd17 	ldw	r2,-12(fp)
  81faac:	10c00017 	ldw	r3,0(r2)
  81fab0:	e0bffe17 	ldw	r2,-8(fp)
  81fab4:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  81fab8:	e0bffd17 	ldw	r2,-12(fp)
  81fabc:	10c00117 	ldw	r3,4(r2)
  81fac0:	e0bffe17 	ldw	r2,-8(fp)
  81fac4:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  81fac8:	e0bffd17 	ldw	r2,-12(fp)
  81facc:	10c00217 	ldw	r3,8(r2)
  81fad0:	e0bffe17 	ldw	r2,-8(fp)
  81fad4:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  81fad8:	e0bffd17 	ldw	r2,-12(fp)
  81fadc:	10c00317 	ldw	r3,12(r2)
  81fae0:	e0bffe17 	ldw	r2,-8(fp)
  81fae4:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  81fae8:	e0bffd17 	ldw	r2,-12(fp)
  81faec:	10c00417 	ldw	r3,16(r2)
  81faf0:	e0bffe17 	ldw	r2,-8(fp)
  81faf4:	10c00415 	stw	r3,16(r2)
  81faf8:	e0bffc17 	ldw	r2,-16(fp)
  81fafc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81fb00:	e0bffa17 	ldw	r2,-24(fp)
  81fb04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  81fb08:	e0bffe17 	ldw	r2,-8(fp)
  81fb0c:	10c00317 	ldw	r3,12(r2)
  81fb10:	e0bffe17 	ldw	r2,-8(fp)
  81fb14:	10800417 	ldw	r2,16(r2)
  81fb18:	1887c83a 	sub	r3,r3,r2
  81fb1c:	e0bffe17 	ldw	r2,-8(fp)
  81fb20:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  81fb24:	e03fff15 	stw	zero,-4(fp)
  81fb28:	e0bfff17 	ldw	r2,-4(fp)
}
  81fb2c:	e037883a 	mov	sp,fp
  81fb30:	df000017 	ldw	fp,0(sp)
  81fb34:	dec00104 	addi	sp,sp,4
  81fb38:	f800283a 	ret

0081fb3c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  81fb3c:	defffc04 	addi	sp,sp,-16
  81fb40:	dfc00315 	stw	ra,12(sp)
  81fb44:	df000215 	stw	fp,8(sp)
  81fb48:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  81fb4c:	01002534 	movhi	r4,148
  81fb50:	212bae04 	addi	r4,r4,-20808
  81fb54:	01430c04 	movi	r5,3120
  81fb58:	081d1940 	call	81d194 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  81fb5c:	00802534 	movhi	r2,148
  81fb60:	10abae04 	addi	r2,r2,-20808
  81fb64:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  81fb68:	e03ffe0d 	sth	zero,-8(fp)
  81fb6c:	00001306 	br	81fbbc <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  81fb70:	e0bffe0b 	ldhu	r2,-8(fp)
  81fb74:	10800d24 	muli	r2,r2,52
  81fb78:	1007883a 	mov	r3,r2
  81fb7c:	00802534 	movhi	r2,148
  81fb80:	10abbb04 	addi	r2,r2,-20756
  81fb84:	1887883a 	add	r3,r3,r2
  81fb88:	e0bfff17 	ldw	r2,-4(fp)
  81fb8c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  81fb90:	e0ffff17 	ldw	r3,-4(fp)
  81fb94:	00800fc4 	movi	r2,63
  81fb98:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  81fb9c:	e0bfff17 	ldw	r2,-4(fp)
  81fba0:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  81fba4:	e0bfff17 	ldw	r2,-4(fp)
  81fba8:	10800d04 	addi	r2,r2,52
  81fbac:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  81fbb0:	e0bffe0b 	ldhu	r2,-8(fp)
  81fbb4:	10800044 	addi	r2,r2,1
  81fbb8:	e0bffe0d 	sth	r2,-8(fp)
  81fbbc:	e0bffe0b 	ldhu	r2,-8(fp)
  81fbc0:	10800ef0 	cmpltui	r2,r2,59
  81fbc4:	103fea1e 	bne	r2,zero,81fb70 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  81fbc8:	e0bfff17 	ldw	r2,-4(fp)
  81fbcc:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  81fbd0:	e0ffff17 	ldw	r3,-4(fp)
  81fbd4:	00800fc4 	movi	r2,63
  81fbd8:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  81fbdc:	e0bfff17 	ldw	r2,-4(fp)
  81fbe0:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  81fbe4:	00c020f4 	movhi	r3,131
  81fbe8:	18e9e704 	addi	r3,r3,-22628
  81fbec:	00802534 	movhi	r2,148
  81fbf0:	10abae04 	addi	r2,r2,-20808
  81fbf4:	18800015 	stw	r2,0(r3)
#endif
}
  81fbf8:	e037883a 	mov	sp,fp
  81fbfc:	dfc00117 	ldw	ra,4(sp)
  81fc00:	df000017 	ldw	fp,0(sp)
  81fc04:	dec00204 	addi	sp,sp,8
  81fc08:	f800283a 	ret

0081fc0c <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  81fc0c:	defff704 	addi	sp,sp,-36
  81fc10:	df000815 	stw	fp,32(sp)
  81fc14:	df000804 	addi	fp,sp,32
  81fc18:	e13ffd15 	stw	r4,-12(fp)
  81fc1c:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81fc20:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  81fc24:	e0bffe17 	ldw	r2,-8(fp)
  81fc28:	1004c03a 	cmpne	r2,r2,zero
  81fc2c:	1000021e 	bne	r2,zero,81fc38 <OSQAccept+0x2c>
        return ((void *)0);
  81fc30:	e03fff15 	stw	zero,-4(fp)
  81fc34:	00004506 	br	81fd4c <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  81fc38:	e0bffd17 	ldw	r2,-12(fp)
  81fc3c:	1004c03a 	cmpne	r2,r2,zero
  81fc40:	1000051e 	bne	r2,zero,81fc58 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  81fc44:	e0fffe17 	ldw	r3,-8(fp)
  81fc48:	00800104 	movi	r2,4
  81fc4c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81fc50:	e03fff15 	stw	zero,-4(fp)
  81fc54:	00003d06 	br	81fd4c <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  81fc58:	e0bffd17 	ldw	r2,-12(fp)
  81fc5c:	10800003 	ldbu	r2,0(r2)
  81fc60:	10803fcc 	andi	r2,r2,255
  81fc64:	108000a0 	cmpeqi	r2,r2,2
  81fc68:	1000051e 	bne	r2,zero,81fc80 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  81fc6c:	e0fffe17 	ldw	r3,-8(fp)
  81fc70:	00800044 	movi	r2,1
  81fc74:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81fc78:	e03fff15 	stw	zero,-4(fp)
  81fc7c:	00003306 	br	81fd4c <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81fc80:	0005303a 	rdctl	r2,status
  81fc84:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81fc88:	e0fff917 	ldw	r3,-28(fp)
  81fc8c:	00bfff84 	movi	r2,-2
  81fc90:	1884703a 	and	r2,r3,r2
  81fc94:	1001703a 	wrctl	status,r2
  
  return context;
  81fc98:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81fc9c:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  81fca0:	e0bffd17 	ldw	r2,-12(fp)
  81fca4:	10800117 	ldw	r2,4(r2)
  81fca8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  81fcac:	e0bffb17 	ldw	r2,-20(fp)
  81fcb0:	1080058b 	ldhu	r2,22(r2)
  81fcb4:	10bfffcc 	andi	r2,r2,65535
  81fcb8:	1005003a 	cmpeq	r2,r2,zero
  81fcbc:	1000191e 	bne	r2,zero,81fd24 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  81fcc0:	e0bffb17 	ldw	r2,-20(fp)
  81fcc4:	10c00417 	ldw	r3,16(r2)
  81fcc8:	18800017 	ldw	r2,0(r3)
  81fccc:	e0bffc15 	stw	r2,-16(fp)
  81fcd0:	18c00104 	addi	r3,r3,4
  81fcd4:	e0bffb17 	ldw	r2,-20(fp)
  81fcd8:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  81fcdc:	e0bffb17 	ldw	r2,-20(fp)
  81fce0:	1080058b 	ldhu	r2,22(r2)
  81fce4:	10bfffc4 	addi	r2,r2,-1
  81fce8:	1007883a 	mov	r3,r2
  81fcec:	e0bffb17 	ldw	r2,-20(fp)
  81fcf0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  81fcf4:	e0bffb17 	ldw	r2,-20(fp)
  81fcf8:	10c00417 	ldw	r3,16(r2)
  81fcfc:	e0bffb17 	ldw	r2,-20(fp)
  81fd00:	10800217 	ldw	r2,8(r2)
  81fd04:	1880041e 	bne	r3,r2,81fd18 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
  81fd08:	e0bffb17 	ldw	r2,-20(fp)
  81fd0c:	10c00117 	ldw	r3,4(r2)
  81fd10:	e0bffb17 	ldw	r2,-20(fp)
  81fd14:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  81fd18:	e0bffe17 	ldw	r2,-8(fp)
  81fd1c:	10000005 	stb	zero,0(r2)
  81fd20:	00000406 	br	81fd34 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  81fd24:	e0fffe17 	ldw	r3,-8(fp)
  81fd28:	008007c4 	movi	r2,31
  81fd2c:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  81fd30:	e03ffc15 	stw	zero,-16(fp)
  81fd34:	e0bffa17 	ldw	r2,-24(fp)
  81fd38:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81fd3c:	e0bff817 	ldw	r2,-32(fp)
  81fd40:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  81fd44:	e0bffc17 	ldw	r2,-16(fp)
  81fd48:	e0bfff15 	stw	r2,-4(fp)
  81fd4c:	e0bfff17 	ldw	r2,-4(fp)
}
  81fd50:	e037883a 	mov	sp,fp
  81fd54:	df000017 	ldw	fp,0(sp)
  81fd58:	dec00104 	addi	sp,sp,4
  81fd5c:	f800283a 	ret

0081fd60 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  81fd60:	defff304 	addi	sp,sp,-52
  81fd64:	dfc00c15 	stw	ra,48(sp)
  81fd68:	df000b15 	stw	fp,44(sp)
  81fd6c:	df000b04 	addi	fp,sp,44
  81fd70:	e13ffd15 	stw	r4,-12(fp)
  81fd74:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81fd78:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  81fd7c:	008020f4 	movhi	r2,131
  81fd80:	10a9ec04 	addi	r2,r2,-22608
  81fd84:	10800003 	ldbu	r2,0(r2)
  81fd88:	10803fcc 	andi	r2,r2,255
  81fd8c:	1005003a 	cmpeq	r2,r2,zero
  81fd90:	1000021e 	bne	r2,zero,81fd9c <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  81fd94:	e03fff15 	stw	zero,-4(fp)
  81fd98:	00007006 	br	81ff5c <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81fd9c:	0005303a 	rdctl	r2,status
  81fda0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81fda4:	e0fff917 	ldw	r3,-28(fp)
  81fda8:	00bfff84 	movi	r2,-2
  81fdac:	1884703a 	and	r2,r3,r2
  81fdb0:	1001703a 	wrctl	status,r2
  
  return context;
  81fdb4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81fdb8:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  81fdbc:	008020f4 	movhi	r2,131
  81fdc0:	10a9eb04 	addi	r2,r2,-22612
  81fdc4:	10800017 	ldw	r2,0(r2)
  81fdc8:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  81fdcc:	008020f4 	movhi	r2,131
  81fdd0:	10a9eb04 	addi	r2,r2,-22612
  81fdd4:	10800017 	ldw	r2,0(r2)
  81fdd8:	1005003a 	cmpeq	r2,r2,zero
  81fddc:	1000081e 	bne	r2,zero,81fe00 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  81fde0:	008020f4 	movhi	r2,131
  81fde4:	10a9eb04 	addi	r2,r2,-22612
  81fde8:	10800017 	ldw	r2,0(r2)
  81fdec:	10800117 	ldw	r2,4(r2)
  81fdf0:	1007883a 	mov	r3,r2
  81fdf4:	008020f4 	movhi	r2,131
  81fdf8:	10a9eb04 	addi	r2,r2,-22612
  81fdfc:	10c00015 	stw	r3,0(r2)
  81fe00:	e0bffa17 	ldw	r2,-24(fp)
  81fe04:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81fe08:	e0bff817 	ldw	r2,-32(fp)
  81fe0c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  81fe10:	e0bffc17 	ldw	r2,-16(fp)
  81fe14:	1005003a 	cmpeq	r2,r2,zero
  81fe18:	10004e1e 	bne	r2,zero,81ff54 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81fe1c:	0005303a 	rdctl	r2,status
  81fe20:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81fe24:	e0fff717 	ldw	r3,-36(fp)
  81fe28:	00bfff84 	movi	r2,-2
  81fe2c:	1884703a 	and	r2,r3,r2
  81fe30:	1001703a 	wrctl	status,r2
  
  return context;
  81fe34:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
  81fe38:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  81fe3c:	008020f4 	movhi	r2,131
  81fe40:	10a9e904 	addi	r2,r2,-22620
  81fe44:	10800017 	ldw	r2,0(r2)
  81fe48:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  81fe4c:	e0bffb17 	ldw	r2,-20(fp)
  81fe50:	1005003a 	cmpeq	r2,r2,zero
  81fe54:	1000311e 	bne	r2,zero,81ff1c <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  81fe58:	008020f4 	movhi	r2,131
  81fe5c:	10a9e904 	addi	r2,r2,-22620
  81fe60:	10800017 	ldw	r2,0(r2)
  81fe64:	10c00017 	ldw	r3,0(r2)
  81fe68:	008020f4 	movhi	r2,131
  81fe6c:	10a9e904 	addi	r2,r2,-22620
  81fe70:	10c00015 	stw	r3,0(r2)
  81fe74:	e0bffa17 	ldw	r2,-24(fp)
  81fe78:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81fe7c:	e0bff617 	ldw	r2,-40(fp)
  81fe80:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  81fe84:	e0fffb17 	ldw	r3,-20(fp)
  81fe88:	e0bffd17 	ldw	r2,-12(fp)
  81fe8c:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
  81fe90:	e0bffe0b 	ldhu	r2,-8(fp)
  81fe94:	1085883a 	add	r2,r2,r2
  81fe98:	1085883a 	add	r2,r2,r2
  81fe9c:	1007883a 	mov	r3,r2
  81fea0:	e0bffd17 	ldw	r2,-12(fp)
  81fea4:	1887883a 	add	r3,r3,r2
  81fea8:	e0bffb17 	ldw	r2,-20(fp)
  81feac:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  81feb0:	e0fffb17 	ldw	r3,-20(fp)
  81feb4:	e0bffd17 	ldw	r2,-12(fp)
  81feb8:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
  81febc:	e0fffb17 	ldw	r3,-20(fp)
  81fec0:	e0bffd17 	ldw	r2,-12(fp)
  81fec4:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
  81fec8:	e0fffb17 	ldw	r3,-20(fp)
  81fecc:	e0bffe0b 	ldhu	r2,-8(fp)
  81fed0:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
  81fed4:	e0bffb17 	ldw	r2,-20(fp)
  81fed8:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  81fedc:	e0fffc17 	ldw	r3,-16(fp)
  81fee0:	00800084 	movi	r2,2
  81fee4:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
  81fee8:	e0bffc17 	ldw	r2,-16(fp)
  81feec:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  81fef0:	e0fffc17 	ldw	r3,-16(fp)
  81fef4:	e0bffb17 	ldw	r2,-20(fp)
  81fef8:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  81fefc:	e0fffc17 	ldw	r3,-16(fp)
  81ff00:	00800fc4 	movi	r2,63
  81ff04:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  81ff08:	e0bffc17 	ldw	r2,-16(fp)
  81ff0c:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  81ff10:	e13ffc17 	ldw	r4,-16(fp)
  81ff14:	081cdc80 	call	81cdc8 <OS_EventWaitListInit>
  81ff18:	00000e06 	br	81ff54 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  81ff1c:	008020f4 	movhi	r2,131
  81ff20:	10a9eb04 	addi	r2,r2,-22612
  81ff24:	10c00017 	ldw	r3,0(r2)
  81ff28:	e0bffc17 	ldw	r2,-16(fp)
  81ff2c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  81ff30:	00c020f4 	movhi	r3,131
  81ff34:	18e9eb04 	addi	r3,r3,-22612
  81ff38:	e0bffc17 	ldw	r2,-16(fp)
  81ff3c:	18800015 	stw	r2,0(r3)
  81ff40:	e0bffa17 	ldw	r2,-24(fp)
  81ff44:	e0bff515 	stw	r2,-44(fp)
  81ff48:	e0bff517 	ldw	r2,-44(fp)
  81ff4c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  81ff50:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
  81ff54:	e0bffc17 	ldw	r2,-16(fp)
  81ff58:	e0bfff15 	stw	r2,-4(fp)
  81ff5c:	e0bfff17 	ldw	r2,-4(fp)
}
  81ff60:	e037883a 	mov	sp,fp
  81ff64:	dfc00117 	ldw	ra,4(sp)
  81ff68:	df000017 	ldw	fp,0(sp)
  81ff6c:	dec00204 	addi	sp,sp,8
  81ff70:	f800283a 	ret

0081ff74 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  81ff74:	defff004 	addi	sp,sp,-64
  81ff78:	dfc00f15 	stw	ra,60(sp)
  81ff7c:	df000e15 	stw	fp,56(sp)
  81ff80:	df000e04 	addi	fp,sp,56
  81ff84:	e13ffb15 	stw	r4,-20(fp)
  81ff88:	e1bffd15 	stw	r6,-12(fp)
  81ff8c:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81ff90:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  81ff94:	e0bffd17 	ldw	r2,-12(fp)
  81ff98:	1004c03a 	cmpne	r2,r2,zero
  81ff9c:	1000031e 	bne	r2,zero,81ffac <OSQDel+0x38>
        return (pevent);
  81ffa0:	e0bffb17 	ldw	r2,-20(fp)
  81ffa4:	e0bfff15 	stw	r2,-4(fp)
  81ffa8:	0000ac06 	br	82025c <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  81ffac:	e0bffb17 	ldw	r2,-20(fp)
  81ffb0:	1004c03a 	cmpne	r2,r2,zero
  81ffb4:	1000061e 	bne	r2,zero,81ffd0 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  81ffb8:	e0fffd17 	ldw	r3,-12(fp)
  81ffbc:	00800104 	movi	r2,4
  81ffc0:	18800005 	stb	r2,0(r3)
        return (pevent);
  81ffc4:	e0fffb17 	ldw	r3,-20(fp)
  81ffc8:	e0ffff15 	stw	r3,-4(fp)
  81ffcc:	0000a306 	br	82025c <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  81ffd0:	e0bffb17 	ldw	r2,-20(fp)
  81ffd4:	10800003 	ldbu	r2,0(r2)
  81ffd8:	10803fcc 	andi	r2,r2,255
  81ffdc:	108000a0 	cmpeqi	r2,r2,2
  81ffe0:	1000061e 	bne	r2,zero,81fffc <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  81ffe4:	e0fffd17 	ldw	r3,-12(fp)
  81ffe8:	00800044 	movi	r2,1
  81ffec:	18800005 	stb	r2,0(r3)
        return (pevent);
  81fff0:	e0bffb17 	ldw	r2,-20(fp)
  81fff4:	e0bfff15 	stw	r2,-4(fp)
  81fff8:	00009806 	br	82025c <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  81fffc:	008020f4 	movhi	r2,131
  820000:	10a9ec04 	addi	r2,r2,-22608
  820004:	10800003 	ldbu	r2,0(r2)
  820008:	10803fcc 	andi	r2,r2,255
  82000c:	1005003a 	cmpeq	r2,r2,zero
  820010:	1000061e 	bne	r2,zero,82002c <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  820014:	e0fffd17 	ldw	r3,-12(fp)
  820018:	008003c4 	movi	r2,15
  82001c:	18800005 	stb	r2,0(r3)
        return (pevent);
  820020:	e0fffb17 	ldw	r3,-20(fp)
  820024:	e0ffff15 	stw	r3,-4(fp)
  820028:	00008c06 	br	82025c <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82002c:	0005303a 	rdctl	r2,status
  820030:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  820034:	e0fff617 	ldw	r3,-40(fp)
  820038:	00bfff84 	movi	r2,-2
  82003c:	1884703a 	and	r2,r3,r2
  820040:	1001703a 	wrctl	status,r2
  
  return context;
  820044:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  820048:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  82004c:	e0bffb17 	ldw	r2,-20(fp)
  820050:	10800283 	ldbu	r2,10(r2)
  820054:	10803fcc 	andi	r2,r2,255
  820058:	1005003a 	cmpeq	r2,r2,zero
  82005c:	1000031e 	bne	r2,zero,82006c <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  820060:	00800044 	movi	r2,1
  820064:	e0bffa05 	stb	r2,-24(fp)
  820068:	00000106 	br	820070 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  82006c:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  820070:	e0bffc03 	ldbu	r2,-16(fp)
  820074:	e0bffe15 	stw	r2,-8(fp)
  820078:	e0fffe17 	ldw	r3,-8(fp)
  82007c:	1805003a 	cmpeq	r2,r3,zero
  820080:	1000041e 	bne	r2,zero,820094 <OSQDel+0x120>
  820084:	e0fffe17 	ldw	r3,-8(fp)
  820088:	18800060 	cmpeqi	r2,r3,1
  82008c:	1000391e 	bne	r2,zero,820174 <OSQDel+0x200>
  820090:	00006706 	br	820230 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  820094:	e0bffa03 	ldbu	r2,-24(fp)
  820098:	1004c03a 	cmpne	r2,r2,zero
  82009c:	1000261e 	bne	r2,zero,820138 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  8200a0:	e0fffb17 	ldw	r3,-20(fp)
  8200a4:	00800fc4 	movi	r2,63
  8200a8:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  8200ac:	e0bffb17 	ldw	r2,-20(fp)
  8200b0:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  8200b4:	e0bffb17 	ldw	r2,-20(fp)
  8200b8:	10800117 	ldw	r2,4(r2)
  8200bc:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  8200c0:	008020f4 	movhi	r2,131
  8200c4:	10a9e904 	addi	r2,r2,-22620
  8200c8:	10c00017 	ldw	r3,0(r2)
  8200cc:	e0bff817 	ldw	r2,-32(fp)
  8200d0:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  8200d4:	00c020f4 	movhi	r3,131
  8200d8:	18e9e904 	addi	r3,r3,-22620
  8200dc:	e0bff817 	ldw	r2,-32(fp)
  8200e0:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  8200e4:	e0bffb17 	ldw	r2,-20(fp)
  8200e8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  8200ec:	008020f4 	movhi	r2,131
  8200f0:	10a9eb04 	addi	r2,r2,-22612
  8200f4:	10c00017 	ldw	r3,0(r2)
  8200f8:	e0bffb17 	ldw	r2,-20(fp)
  8200fc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  820100:	e0bffb17 	ldw	r2,-20(fp)
  820104:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  820108:	00c020f4 	movhi	r3,131
  82010c:	18e9eb04 	addi	r3,r3,-22612
  820110:	e0bffb17 	ldw	r2,-20(fp)
  820114:	18800015 	stw	r2,0(r3)
  820118:	e0bff717 	ldw	r2,-36(fp)
  82011c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  820120:	e0bff517 	ldw	r2,-44(fp)
  820124:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  820128:	e0bffd17 	ldw	r2,-12(fp)
  82012c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  820130:	e03ff915 	stw	zero,-28(fp)
  820134:	00004706 	br	820254 <OSQDel+0x2e0>
  820138:	e0bff717 	ldw	r2,-36(fp)
  82013c:	e0bff415 	stw	r2,-48(fp)
  820140:	e0bff417 	ldw	r2,-48(fp)
  820144:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  820148:	e0fffd17 	ldw	r3,-12(fp)
  82014c:	00801244 	movi	r2,73
  820150:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  820154:	e0bffb17 	ldw	r2,-20(fp)
  820158:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  82015c:	00003d06 	br	820254 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  820160:	e13ffb17 	ldw	r4,-20(fp)
  820164:	000b883a 	mov	r5,zero
  820168:	01800104 	movi	r6,4
  82016c:	000f883a 	mov	r7,zero
  820170:	081c8140 	call	81c814 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  820174:	e0bffb17 	ldw	r2,-20(fp)
  820178:	10800283 	ldbu	r2,10(r2)
  82017c:	10803fcc 	andi	r2,r2,255
  820180:	1004c03a 	cmpne	r2,r2,zero
  820184:	103ff61e 	bne	r2,zero,820160 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  820188:	e0fffb17 	ldw	r3,-20(fp)
  82018c:	00800fc4 	movi	r2,63
  820190:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  820194:	e0bffb17 	ldw	r2,-20(fp)
  820198:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  82019c:	e0bffb17 	ldw	r2,-20(fp)
  8201a0:	10800117 	ldw	r2,4(r2)
  8201a4:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  8201a8:	008020f4 	movhi	r2,131
  8201ac:	10a9e904 	addi	r2,r2,-22620
  8201b0:	10c00017 	ldw	r3,0(r2)
  8201b4:	e0bff817 	ldw	r2,-32(fp)
  8201b8:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  8201bc:	00c020f4 	movhi	r3,131
  8201c0:	18e9e904 	addi	r3,r3,-22620
  8201c4:	e0bff817 	ldw	r2,-32(fp)
  8201c8:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  8201cc:	e0bffb17 	ldw	r2,-20(fp)
  8201d0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  8201d4:	008020f4 	movhi	r2,131
  8201d8:	10a9eb04 	addi	r2,r2,-22612
  8201dc:	10c00017 	ldw	r3,0(r2)
  8201e0:	e0bffb17 	ldw	r2,-20(fp)
  8201e4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  8201e8:	e0bffb17 	ldw	r2,-20(fp)
  8201ec:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  8201f0:	00c020f4 	movhi	r3,131
  8201f4:	18e9eb04 	addi	r3,r3,-22612
  8201f8:	e0bffb17 	ldw	r2,-20(fp)
  8201fc:	18800015 	stw	r2,0(r3)
  820200:	e0bff717 	ldw	r2,-36(fp)
  820204:	e0bff315 	stw	r2,-52(fp)
  820208:	e0bff317 	ldw	r2,-52(fp)
  82020c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  820210:	e0bffa03 	ldbu	r2,-24(fp)
  820214:	10800058 	cmpnei	r2,r2,1
  820218:	1000011e 	bne	r2,zero,820220 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  82021c:	081d2540 	call	81d254 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  820220:	e0bffd17 	ldw	r2,-12(fp)
  820224:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  820228:	e03ff915 	stw	zero,-28(fp)
             break;
  82022c:	00000906 	br	820254 <OSQDel+0x2e0>
  820230:	e0bff717 	ldw	r2,-36(fp)
  820234:	e0bff215 	stw	r2,-56(fp)
  820238:	e0bff217 	ldw	r2,-56(fp)
  82023c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  820240:	e0fffd17 	ldw	r3,-12(fp)
  820244:	008001c4 	movi	r2,7
  820248:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  82024c:	e0bffb17 	ldw	r2,-20(fp)
  820250:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  820254:	e0bff917 	ldw	r2,-28(fp)
  820258:	e0bfff15 	stw	r2,-4(fp)
  82025c:	e0bfff17 	ldw	r2,-4(fp)
}
  820260:	e037883a 	mov	sp,fp
  820264:	dfc00117 	ldw	ra,4(sp)
  820268:	df000017 	ldw	fp,0(sp)
  82026c:	dec00204 	addi	sp,sp,8
  820270:	f800283a 	ret

00820274 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  820274:	defff904 	addi	sp,sp,-28
  820278:	df000615 	stw	fp,24(sp)
  82027c:	df000604 	addi	fp,sp,24
  820280:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  820284:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  820288:	e0bffe17 	ldw	r2,-8(fp)
  82028c:	1004c03a 	cmpne	r2,r2,zero
  820290:	1000031e 	bne	r2,zero,8202a0 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
  820294:	00800104 	movi	r2,4
  820298:	e0bfff15 	stw	r2,-4(fp)
  82029c:	00002206 	br	820328 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  8202a0:	e0bffe17 	ldw	r2,-8(fp)
  8202a4:	10800003 	ldbu	r2,0(r2)
  8202a8:	10803fcc 	andi	r2,r2,255
  8202ac:	108000a0 	cmpeqi	r2,r2,2
  8202b0:	1000031e 	bne	r2,zero,8202c0 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
  8202b4:	00800044 	movi	r2,1
  8202b8:	e0bfff15 	stw	r2,-4(fp)
  8202bc:	00001a06 	br	820328 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8202c0:	0005303a 	rdctl	r2,status
  8202c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8202c8:	e0fffb17 	ldw	r3,-20(fp)
  8202cc:	00bfff84 	movi	r2,-2
  8202d0:	1884703a 	and	r2,r3,r2
  8202d4:	1001703a 	wrctl	status,r2
  
  return context;
  8202d8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8202dc:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  8202e0:	e0bffe17 	ldw	r2,-8(fp)
  8202e4:	10800117 	ldw	r2,4(r2)
  8202e8:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
  8202ec:	e0bffd17 	ldw	r2,-12(fp)
  8202f0:	10c00117 	ldw	r3,4(r2)
  8202f4:	e0bffd17 	ldw	r2,-12(fp)
  8202f8:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  8202fc:	e0bffd17 	ldw	r2,-12(fp)
  820300:	10c00117 	ldw	r3,4(r2)
  820304:	e0bffd17 	ldw	r2,-12(fp)
  820308:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  82030c:	e0bffd17 	ldw	r2,-12(fp)
  820310:	1000058d 	sth	zero,22(r2)
  820314:	e0bffc17 	ldw	r2,-16(fp)
  820318:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82031c:	e0bffa17 	ldw	r2,-24(fp)
  820320:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  820324:	e03fff15 	stw	zero,-4(fp)
  820328:	e0bfff17 	ldw	r2,-4(fp)
}
  82032c:	e037883a 	mov	sp,fp
  820330:	df000017 	ldw	fp,0(sp)
  820334:	dec00104 	addi	sp,sp,4
  820338:	f800283a 	ret

0082033c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  82033c:	defff104 	addi	sp,sp,-60
  820340:	dfc00e15 	stw	ra,56(sp)
  820344:	df000d15 	stw	fp,52(sp)
  820348:	df000d04 	addi	fp,sp,52
  82034c:	e13ffb15 	stw	r4,-20(fp)
  820350:	e1bffd15 	stw	r6,-12(fp)
  820354:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  820358:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  82035c:	e0bffd17 	ldw	r2,-12(fp)
  820360:	1004c03a 	cmpne	r2,r2,zero
  820364:	1000021e 	bne	r2,zero,820370 <OSQPend+0x34>
        return ((void *)0);
  820368:	e03fff15 	stw	zero,-4(fp)
  82036c:	0000b506 	br	820644 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  820370:	e0bffb17 	ldw	r2,-20(fp)
  820374:	1004c03a 	cmpne	r2,r2,zero
  820378:	1000051e 	bne	r2,zero,820390 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  82037c:	e0fffd17 	ldw	r3,-12(fp)
  820380:	00800104 	movi	r2,4
  820384:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  820388:	e03fff15 	stw	zero,-4(fp)
  82038c:	0000ad06 	br	820644 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  820390:	e0bffb17 	ldw	r2,-20(fp)
  820394:	10800003 	ldbu	r2,0(r2)
  820398:	10803fcc 	andi	r2,r2,255
  82039c:	108000a0 	cmpeqi	r2,r2,2
  8203a0:	1000051e 	bne	r2,zero,8203b8 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  8203a4:	e0fffd17 	ldw	r3,-12(fp)
  8203a8:	00800044 	movi	r2,1
  8203ac:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  8203b0:	e03fff15 	stw	zero,-4(fp)
  8203b4:	0000a306 	br	820644 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  8203b8:	008020f4 	movhi	r2,131
  8203bc:	10a9ec04 	addi	r2,r2,-22608
  8203c0:	10800003 	ldbu	r2,0(r2)
  8203c4:	10803fcc 	andi	r2,r2,255
  8203c8:	1005003a 	cmpeq	r2,r2,zero
  8203cc:	1000051e 	bne	r2,zero,8203e4 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  8203d0:	e0fffd17 	ldw	r3,-12(fp)
  8203d4:	00800084 	movi	r2,2
  8203d8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  8203dc:	e03fff15 	stw	zero,-4(fp)
  8203e0:	00009806 	br	820644 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  8203e4:	008020f4 	movhi	r2,131
  8203e8:	10a9de04 	addi	r2,r2,-22664
  8203ec:	10800003 	ldbu	r2,0(r2)
  8203f0:	10803fcc 	andi	r2,r2,255
  8203f4:	1005003a 	cmpeq	r2,r2,zero
  8203f8:	1000051e 	bne	r2,zero,820410 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  8203fc:	e0fffd17 	ldw	r3,-12(fp)
  820400:	00800344 	movi	r2,13
  820404:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  820408:	e03fff15 	stw	zero,-4(fp)
  82040c:	00008d06 	br	820644 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  820410:	0005303a 	rdctl	r2,status
  820414:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  820418:	e0fff717 	ldw	r3,-36(fp)
  82041c:	00bfff84 	movi	r2,-2
  820420:	1884703a 	and	r2,r3,r2
  820424:	1001703a 	wrctl	status,r2
  
  return context;
  820428:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  82042c:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  820430:	e0bffb17 	ldw	r2,-20(fp)
  820434:	10800117 	ldw	r2,4(r2)
  820438:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  82043c:	e0bff917 	ldw	r2,-28(fp)
  820440:	1080058b 	ldhu	r2,22(r2)
  820444:	10bfffcc 	andi	r2,r2,65535
  820448:	1005003a 	cmpeq	r2,r2,zero
  82044c:	10001f1e 	bne	r2,zero,8204cc <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  820450:	e0bff917 	ldw	r2,-28(fp)
  820454:	10c00417 	ldw	r3,16(r2)
  820458:	18800017 	ldw	r2,0(r3)
  82045c:	e0bffa15 	stw	r2,-24(fp)
  820460:	18c00104 	addi	r3,r3,4
  820464:	e0bff917 	ldw	r2,-28(fp)
  820468:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  82046c:	e0bff917 	ldw	r2,-28(fp)
  820470:	1080058b 	ldhu	r2,22(r2)
  820474:	10bfffc4 	addi	r2,r2,-1
  820478:	1007883a 	mov	r3,r2
  82047c:	e0bff917 	ldw	r2,-28(fp)
  820480:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  820484:	e0bff917 	ldw	r2,-28(fp)
  820488:	10c00417 	ldw	r3,16(r2)
  82048c:	e0bff917 	ldw	r2,-28(fp)
  820490:	10800217 	ldw	r2,8(r2)
  820494:	1880041e 	bne	r3,r2,8204a8 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
  820498:	e0bff917 	ldw	r2,-28(fp)
  82049c:	10c00117 	ldw	r3,4(r2)
  8204a0:	e0bff917 	ldw	r2,-28(fp)
  8204a4:	10c00415 	stw	r3,16(r2)
  8204a8:	e0bff817 	ldw	r2,-32(fp)
  8204ac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8204b0:	e0bff617 	ldw	r2,-40(fp)
  8204b4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  8204b8:	e0bffd17 	ldw	r2,-12(fp)
  8204bc:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  8204c0:	e0bffa17 	ldw	r2,-24(fp)
  8204c4:	e0bfff15 	stw	r2,-4(fp)
  8204c8:	00005e06 	br	820644 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  8204cc:	008020f4 	movhi	r2,131
  8204d0:	10a9ed04 	addi	r2,r2,-22604
  8204d4:	10c00017 	ldw	r3,0(r2)
  8204d8:	008020f4 	movhi	r2,131
  8204dc:	10a9ed04 	addi	r2,r2,-22604
  8204e0:	10800017 	ldw	r2,0(r2)
  8204e4:	10800c03 	ldbu	r2,48(r2)
  8204e8:	10800114 	ori	r2,r2,4
  8204ec:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  8204f0:	008020f4 	movhi	r2,131
  8204f4:	10a9ed04 	addi	r2,r2,-22604
  8204f8:	10800017 	ldw	r2,0(r2)
  8204fc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  820500:	008020f4 	movhi	r2,131
  820504:	10a9ed04 	addi	r2,r2,-22604
  820508:	10c00017 	ldw	r3,0(r2)
  82050c:	e0bffc0b 	ldhu	r2,-16(fp)
  820510:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  820514:	e13ffb17 	ldw	r4,-20(fp)
  820518:	081c9a80 	call	81c9a8 <OS_EventTaskWait>
  82051c:	e0bff817 	ldw	r2,-32(fp)
  820520:	e0bff515 	stw	r2,-44(fp)
  820524:	e0bff517 	ldw	r2,-44(fp)
  820528:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  82052c:	081d2540 	call	81d254 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  820530:	0005303a 	rdctl	r2,status
  820534:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  820538:	e0fff417 	ldw	r3,-48(fp)
  82053c:	00bfff84 	movi	r2,-2
  820540:	1884703a 	and	r2,r3,r2
  820544:	1001703a 	wrctl	status,r2
  
  return context;
  820548:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
  82054c:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  820550:	008020f4 	movhi	r2,131
  820554:	10a9ed04 	addi	r2,r2,-22604
  820558:	10800017 	ldw	r2,0(r2)
  82055c:	10800c43 	ldbu	r2,49(r2)
  820560:	10803fcc 	andi	r2,r2,255
  820564:	e0bffe15 	stw	r2,-8(fp)
  820568:	e0fffe17 	ldw	r3,-8(fp)
  82056c:	1805003a 	cmpeq	r2,r3,zero
  820570:	1000041e 	bne	r2,zero,820584 <OSQPend+0x248>
  820574:	e0fffe17 	ldw	r3,-8(fp)
  820578:	188000a0 	cmpeqi	r2,r3,2
  82057c:	1000091e 	bne	r2,zero,8205a4 <OSQPend+0x268>
  820580:	00000d06 	br	8205b8 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  820584:	008020f4 	movhi	r2,131
  820588:	10a9ed04 	addi	r2,r2,-22604
  82058c:	10800017 	ldw	r2,0(r2)
  820590:	10800917 	ldw	r2,36(r2)
  820594:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
  820598:	e0bffd17 	ldw	r2,-12(fp)
  82059c:	10000005 	stb	zero,0(r2)
             break;
  8205a0:	00000e06 	br	8205dc <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  8205a4:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  8205a8:	e0fffd17 	ldw	r3,-12(fp)
  8205ac:	00800384 	movi	r2,14
  8205b0:	18800005 	stb	r2,0(r3)
             break;
  8205b4:	00000906 	br	8205dc <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  8205b8:	008020f4 	movhi	r2,131
  8205bc:	10a9ed04 	addi	r2,r2,-22604
  8205c0:	11000017 	ldw	r4,0(r2)
  8205c4:	e17ffb17 	ldw	r5,-20(fp)
  8205c8:	081cc0c0 	call	81cc0c <OS_EventTaskRemove>
             pmsg = (void *)0;
  8205cc:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  8205d0:	e0fffd17 	ldw	r3,-12(fp)
  8205d4:	00800284 	movi	r2,10
  8205d8:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  8205dc:	008020f4 	movhi	r2,131
  8205e0:	10a9ed04 	addi	r2,r2,-22604
  8205e4:	10800017 	ldw	r2,0(r2)
  8205e8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  8205ec:	008020f4 	movhi	r2,131
  8205f0:	10a9ed04 	addi	r2,r2,-22604
  8205f4:	10800017 	ldw	r2,0(r2)
  8205f8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  8205fc:	008020f4 	movhi	r2,131
  820600:	10a9ed04 	addi	r2,r2,-22604
  820604:	10800017 	ldw	r2,0(r2)
  820608:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  82060c:	008020f4 	movhi	r2,131
  820610:	10a9ed04 	addi	r2,r2,-22604
  820614:	10800017 	ldw	r2,0(r2)
  820618:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  82061c:	008020f4 	movhi	r2,131
  820620:	10a9ed04 	addi	r2,r2,-22604
  820624:	10800017 	ldw	r2,0(r2)
  820628:	10000915 	stw	zero,36(r2)
  82062c:	e0bff817 	ldw	r2,-32(fp)
  820630:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  820634:	e0bff317 	ldw	r2,-52(fp)
  820638:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  82063c:	e0bffa17 	ldw	r2,-24(fp)
  820640:	e0bfff15 	stw	r2,-4(fp)
  820644:	e0bfff17 	ldw	r2,-4(fp)
}
  820648:	e037883a 	mov	sp,fp
  82064c:	dfc00117 	ldw	ra,4(sp)
  820650:	df000017 	ldw	fp,0(sp)
  820654:	dec00204 	addi	sp,sp,8
  820658:	f800283a 	ret

0082065c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  82065c:	defff504 	addi	sp,sp,-44
  820660:	dfc00a15 	stw	ra,40(sp)
  820664:	df000915 	stw	fp,36(sp)
  820668:	df000904 	addi	fp,sp,36
  82066c:	e13ffc15 	stw	r4,-16(fp)
  820670:	e1bffe15 	stw	r6,-8(fp)
  820674:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  820678:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  82067c:	e0bffe17 	ldw	r2,-8(fp)
  820680:	1004c03a 	cmpne	r2,r2,zero
  820684:	1000021e 	bne	r2,zero,820690 <OSQPendAbort+0x34>
        return (0);
  820688:	e03fff15 	stw	zero,-4(fp)
  82068c:	00004c06 	br	8207c0 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  820690:	e0bffc17 	ldw	r2,-16(fp)
  820694:	1004c03a 	cmpne	r2,r2,zero
  820698:	1000051e 	bne	r2,zero,8206b0 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  82069c:	e0fffe17 	ldw	r3,-8(fp)
  8206a0:	00800104 	movi	r2,4
  8206a4:	18800005 	stb	r2,0(r3)
        return (0);
  8206a8:	e03fff15 	stw	zero,-4(fp)
  8206ac:	00004406 	br	8207c0 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  8206b0:	e0bffc17 	ldw	r2,-16(fp)
  8206b4:	10800003 	ldbu	r2,0(r2)
  8206b8:	10803fcc 	andi	r2,r2,255
  8206bc:	108000a0 	cmpeqi	r2,r2,2
  8206c0:	1000051e 	bne	r2,zero,8206d8 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  8206c4:	e0fffe17 	ldw	r3,-8(fp)
  8206c8:	00800044 	movi	r2,1
  8206cc:	18800005 	stb	r2,0(r3)
        return (0);
  8206d0:	e03fff15 	stw	zero,-4(fp)
  8206d4:	00003a06 	br	8207c0 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8206d8:	0005303a 	rdctl	r2,status
  8206dc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8206e0:	e0fff917 	ldw	r3,-28(fp)
  8206e4:	00bfff84 	movi	r2,-2
  8206e8:	1884703a 	and	r2,r3,r2
  8206ec:	1001703a 	wrctl	status,r2
  
  return context;
  8206f0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  8206f4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  8206f8:	e0bffc17 	ldw	r2,-16(fp)
  8206fc:	10800283 	ldbu	r2,10(r2)
  820700:	10803fcc 	andi	r2,r2,255
  820704:	1005003a 	cmpeq	r2,r2,zero
  820708:	1000261e 	bne	r2,zero,8207a4 <OSQPendAbort+0x148>
        nbr_tasks = 0;
  82070c:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  820710:	e0bffd03 	ldbu	r2,-12(fp)
  820714:	10800060 	cmpeqi	r2,r2,1
  820718:	1000091e 	bne	r2,zero,820740 <OSQPendAbort+0xe4>
  82071c:	00000e06 	br	820758 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  820720:	e13ffc17 	ldw	r4,-16(fp)
  820724:	000b883a 	mov	r5,zero
  820728:	01800104 	movi	r6,4
  82072c:	01c00084 	movi	r7,2
  820730:	081c8140 	call	81c814 <OS_EventTaskRdy>
                     nbr_tasks++;
  820734:	e0bffb03 	ldbu	r2,-20(fp)
  820738:	10800044 	addi	r2,r2,1
  82073c:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  820740:	e0bffc17 	ldw	r2,-16(fp)
  820744:	10800283 	ldbu	r2,10(r2)
  820748:	10803fcc 	andi	r2,r2,255
  82074c:	1004c03a 	cmpne	r2,r2,zero
  820750:	103ff31e 	bne	r2,zero,820720 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  820754:	00000806 	br	820778 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  820758:	e13ffc17 	ldw	r4,-16(fp)
  82075c:	000b883a 	mov	r5,zero
  820760:	01800104 	movi	r6,4
  820764:	01c00084 	movi	r7,2
  820768:	081c8140 	call	81c814 <OS_EventTaskRdy>
                 nbr_tasks++;
  82076c:	e0bffb03 	ldbu	r2,-20(fp)
  820770:	10800044 	addi	r2,r2,1
  820774:	e0bffb05 	stb	r2,-20(fp)
  820778:	e0bffa17 	ldw	r2,-24(fp)
  82077c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  820780:	e0bff817 	ldw	r2,-32(fp)
  820784:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  820788:	081d2540 	call	81d254 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  82078c:	e0fffe17 	ldw	r3,-8(fp)
  820790:	00800384 	movi	r2,14
  820794:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  820798:	e0bffb03 	ldbu	r2,-20(fp)
  82079c:	e0bfff15 	stw	r2,-4(fp)
  8207a0:	00000706 	br	8207c0 <OSQPendAbort+0x164>
  8207a4:	e0bffa17 	ldw	r2,-24(fp)
  8207a8:	e0bff715 	stw	r2,-36(fp)
  8207ac:	e0bff717 	ldw	r2,-36(fp)
  8207b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8207b4:	e0bffe17 	ldw	r2,-8(fp)
  8207b8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  8207bc:	e03fff15 	stw	zero,-4(fp)
  8207c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8207c4:	e037883a 	mov	sp,fp
  8207c8:	dfc00117 	ldw	ra,4(sp)
  8207cc:	df000017 	ldw	fp,0(sp)
  8207d0:	dec00204 	addi	sp,sp,8
  8207d4:	f800283a 	ret

008207d8 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  8207d8:	defff504 	addi	sp,sp,-44
  8207dc:	dfc00a15 	stw	ra,40(sp)
  8207e0:	df000915 	stw	fp,36(sp)
  8207e4:	df000904 	addi	fp,sp,36
  8207e8:	e13ffd15 	stw	r4,-12(fp)
  8207ec:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  8207f0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  8207f4:	e0bffd17 	ldw	r2,-12(fp)
  8207f8:	1004c03a 	cmpne	r2,r2,zero
  8207fc:	1000031e 	bne	r2,zero,82080c <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
  820800:	00800104 	movi	r2,4
  820804:	e0bfff15 	stw	r2,-4(fp)
  820808:	00004d06 	br	820940 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  82080c:	e0bffd17 	ldw	r2,-12(fp)
  820810:	10800003 	ldbu	r2,0(r2)
  820814:	10803fcc 	andi	r2,r2,255
  820818:	108000a0 	cmpeqi	r2,r2,2
  82081c:	1000031e 	bne	r2,zero,82082c <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
  820820:	00800044 	movi	r2,1
  820824:	e0bfff15 	stw	r2,-4(fp)
  820828:	00004506 	br	820940 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82082c:	0005303a 	rdctl	r2,status
  820830:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  820834:	e0fffa17 	ldw	r3,-24(fp)
  820838:	00bfff84 	movi	r2,-2
  82083c:	1884703a 	and	r2,r3,r2
  820840:	1001703a 	wrctl	status,r2
  
  return context;
  820844:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  820848:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  82084c:	e0bffd17 	ldw	r2,-12(fp)
  820850:	10800283 	ldbu	r2,10(r2)
  820854:	10803fcc 	andi	r2,r2,255
  820858:	1005003a 	cmpeq	r2,r2,zero
  82085c:	10000c1e 	bne	r2,zero,820890 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  820860:	e13ffd17 	ldw	r4,-12(fp)
  820864:	e17ffe17 	ldw	r5,-8(fp)
  820868:	01800104 	movi	r6,4
  82086c:	000f883a 	mov	r7,zero
  820870:	081c8140 	call	81c814 <OS_EventTaskRdy>
  820874:	e0bffb17 	ldw	r2,-20(fp)
  820878:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82087c:	e0bff917 	ldw	r2,-28(fp)
  820880:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  820884:	081d2540 	call	81d254 <OS_Sched>
        return (OS_ERR_NONE);
  820888:	e03fff15 	stw	zero,-4(fp)
  82088c:	00002c06 	br	820940 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  820890:	e0bffd17 	ldw	r2,-12(fp)
  820894:	10800117 	ldw	r2,4(r2)
  820898:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  82089c:	e0bffc17 	ldw	r2,-16(fp)
  8208a0:	10c0058b 	ldhu	r3,22(r2)
  8208a4:	e0bffc17 	ldw	r2,-16(fp)
  8208a8:	1080050b 	ldhu	r2,20(r2)
  8208ac:	18ffffcc 	andi	r3,r3,65535
  8208b0:	10bfffcc 	andi	r2,r2,65535
  8208b4:	18800736 	bltu	r3,r2,8208d4 <OSQPost+0xfc>
  8208b8:	e0bffb17 	ldw	r2,-20(fp)
  8208bc:	e0bff815 	stw	r2,-32(fp)
  8208c0:	e0bff817 	ldw	r2,-32(fp)
  8208c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  8208c8:	00800784 	movi	r2,30
  8208cc:	e0bfff15 	stw	r2,-4(fp)
  8208d0:	00001b06 	br	820940 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  8208d4:	e0bffc17 	ldw	r2,-16(fp)
  8208d8:	10c00317 	ldw	r3,12(r2)
  8208dc:	e0bffe17 	ldw	r2,-8(fp)
  8208e0:	18800015 	stw	r2,0(r3)
  8208e4:	18c00104 	addi	r3,r3,4
  8208e8:	e0bffc17 	ldw	r2,-16(fp)
  8208ec:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  8208f0:	e0bffc17 	ldw	r2,-16(fp)
  8208f4:	1080058b 	ldhu	r2,22(r2)
  8208f8:	10800044 	addi	r2,r2,1
  8208fc:	1007883a 	mov	r3,r2
  820900:	e0bffc17 	ldw	r2,-16(fp)
  820904:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  820908:	e0bffc17 	ldw	r2,-16(fp)
  82090c:	10c00317 	ldw	r3,12(r2)
  820910:	e0bffc17 	ldw	r2,-16(fp)
  820914:	10800217 	ldw	r2,8(r2)
  820918:	1880041e 	bne	r3,r2,82092c <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
  82091c:	e0bffc17 	ldw	r2,-16(fp)
  820920:	10c00117 	ldw	r3,4(r2)
  820924:	e0bffc17 	ldw	r2,-16(fp)
  820928:	10c00315 	stw	r3,12(r2)
  82092c:	e0bffb17 	ldw	r2,-20(fp)
  820930:	e0bff715 	stw	r2,-36(fp)
  820934:	e0bff717 	ldw	r2,-36(fp)
  820938:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  82093c:	e03fff15 	stw	zero,-4(fp)
  820940:	e0bfff17 	ldw	r2,-4(fp)
}
  820944:	e037883a 	mov	sp,fp
  820948:	dfc00117 	ldw	ra,4(sp)
  82094c:	df000017 	ldw	fp,0(sp)
  820950:	dec00204 	addi	sp,sp,8
  820954:	f800283a 	ret

00820958 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  820958:	defff504 	addi	sp,sp,-44
  82095c:	dfc00a15 	stw	ra,40(sp)
  820960:	df000915 	stw	fp,36(sp)
  820964:	df000904 	addi	fp,sp,36
  820968:	e13ffd15 	stw	r4,-12(fp)
  82096c:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  820970:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  820974:	e0bffd17 	ldw	r2,-12(fp)
  820978:	1004c03a 	cmpne	r2,r2,zero
  82097c:	1000031e 	bne	r2,zero,82098c <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
  820980:	00800104 	movi	r2,4
  820984:	e0bfff15 	stw	r2,-4(fp)
  820988:	00004f06 	br	820ac8 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  82098c:	e0bffd17 	ldw	r2,-12(fp)
  820990:	10800003 	ldbu	r2,0(r2)
  820994:	10803fcc 	andi	r2,r2,255
  820998:	108000a0 	cmpeqi	r2,r2,2
  82099c:	1000031e 	bne	r2,zero,8209ac <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
  8209a0:	00800044 	movi	r2,1
  8209a4:	e0bfff15 	stw	r2,-4(fp)
  8209a8:	00004706 	br	820ac8 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8209ac:	0005303a 	rdctl	r2,status
  8209b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8209b4:	e0fffa17 	ldw	r3,-24(fp)
  8209b8:	00bfff84 	movi	r2,-2
  8209bc:	1884703a 	and	r2,r3,r2
  8209c0:	1001703a 	wrctl	status,r2
  
  return context;
  8209c4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  8209c8:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  8209cc:	e0bffd17 	ldw	r2,-12(fp)
  8209d0:	10800283 	ldbu	r2,10(r2)
  8209d4:	10803fcc 	andi	r2,r2,255
  8209d8:	1005003a 	cmpeq	r2,r2,zero
  8209dc:	10000c1e 	bne	r2,zero,820a10 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  8209e0:	e13ffd17 	ldw	r4,-12(fp)
  8209e4:	e17ffe17 	ldw	r5,-8(fp)
  8209e8:	01800104 	movi	r6,4
  8209ec:	000f883a 	mov	r7,zero
  8209f0:	081c8140 	call	81c814 <OS_EventTaskRdy>
  8209f4:	e0bffb17 	ldw	r2,-20(fp)
  8209f8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8209fc:	e0bff917 	ldw	r2,-28(fp)
  820a00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  820a04:	081d2540 	call	81d254 <OS_Sched>
        return (OS_ERR_NONE);
  820a08:	e03fff15 	stw	zero,-4(fp)
  820a0c:	00002e06 	br	820ac8 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  820a10:	e0bffd17 	ldw	r2,-12(fp)
  820a14:	10800117 	ldw	r2,4(r2)
  820a18:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  820a1c:	e0bffc17 	ldw	r2,-16(fp)
  820a20:	10c0058b 	ldhu	r3,22(r2)
  820a24:	e0bffc17 	ldw	r2,-16(fp)
  820a28:	1080050b 	ldhu	r2,20(r2)
  820a2c:	18ffffcc 	andi	r3,r3,65535
  820a30:	10bfffcc 	andi	r2,r2,65535
  820a34:	18800736 	bltu	r3,r2,820a54 <OSQPostFront+0xfc>
  820a38:	e0bffb17 	ldw	r2,-20(fp)
  820a3c:	e0bff815 	stw	r2,-32(fp)
  820a40:	e0bff817 	ldw	r2,-32(fp)
  820a44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  820a48:	00800784 	movi	r2,30
  820a4c:	e0bfff15 	stw	r2,-4(fp)
  820a50:	00001d06 	br	820ac8 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  820a54:	e0bffc17 	ldw	r2,-16(fp)
  820a58:	10c00417 	ldw	r3,16(r2)
  820a5c:	e0bffc17 	ldw	r2,-16(fp)
  820a60:	10800117 	ldw	r2,4(r2)
  820a64:	1880041e 	bne	r3,r2,820a78 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
  820a68:	e0bffc17 	ldw	r2,-16(fp)
  820a6c:	10c00217 	ldw	r3,8(r2)
  820a70:	e0bffc17 	ldw	r2,-16(fp)
  820a74:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  820a78:	e0bffc17 	ldw	r2,-16(fp)
  820a7c:	10800417 	ldw	r2,16(r2)
  820a80:	10ffff04 	addi	r3,r2,-4
  820a84:	e0bffc17 	ldw	r2,-16(fp)
  820a88:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  820a8c:	e0bffc17 	ldw	r2,-16(fp)
  820a90:	10c00417 	ldw	r3,16(r2)
  820a94:	e0bffe17 	ldw	r2,-8(fp)
  820a98:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  820a9c:	e0bffc17 	ldw	r2,-16(fp)
  820aa0:	1080058b 	ldhu	r2,22(r2)
  820aa4:	10800044 	addi	r2,r2,1
  820aa8:	1007883a 	mov	r3,r2
  820aac:	e0bffc17 	ldw	r2,-16(fp)
  820ab0:	10c0058d 	sth	r3,22(r2)
  820ab4:	e0bffb17 	ldw	r2,-20(fp)
  820ab8:	e0bff715 	stw	r2,-36(fp)
  820abc:	e0bff717 	ldw	r2,-36(fp)
  820ac0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  820ac4:	e03fff15 	stw	zero,-4(fp)
  820ac8:	e0bfff17 	ldw	r2,-4(fp)
}
  820acc:	e037883a 	mov	sp,fp
  820ad0:	dfc00117 	ldw	ra,4(sp)
  820ad4:	df000017 	ldw	fp,0(sp)
  820ad8:	dec00204 	addi	sp,sp,8
  820adc:	f800283a 	ret

00820ae0 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  820ae0:	defff404 	addi	sp,sp,-48
  820ae4:	dfc00b15 	stw	ra,44(sp)
  820ae8:	df000a15 	stw	fp,40(sp)
  820aec:	df000a04 	addi	fp,sp,40
  820af0:	e13ffc15 	stw	r4,-16(fp)
  820af4:	e17ffd15 	stw	r5,-12(fp)
  820af8:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  820afc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  820b00:	e0bffc17 	ldw	r2,-16(fp)
  820b04:	1004c03a 	cmpne	r2,r2,zero
  820b08:	1000031e 	bne	r2,zero,820b18 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
  820b0c:	00800104 	movi	r2,4
  820b10:	e0bfff15 	stw	r2,-4(fp)
  820b14:	00007906 	br	820cfc <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  820b18:	e0bffc17 	ldw	r2,-16(fp)
  820b1c:	10800003 	ldbu	r2,0(r2)
  820b20:	10803fcc 	andi	r2,r2,255
  820b24:	108000a0 	cmpeqi	r2,r2,2
  820b28:	1000031e 	bne	r2,zero,820b38 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
  820b2c:	00800044 	movi	r2,1
  820b30:	e0bfff15 	stw	r2,-4(fp)
  820b34:	00007106 	br	820cfc <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  820b38:	0005303a 	rdctl	r2,status
  820b3c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  820b40:	e0fff917 	ldw	r3,-28(fp)
  820b44:	00bfff84 	movi	r2,-2
  820b48:	1884703a 	and	r2,r3,r2
  820b4c:	1001703a 	wrctl	status,r2
  
  return context;
  820b50:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  820b54:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  820b58:	e0bffc17 	ldw	r2,-16(fp)
  820b5c:	10800283 	ldbu	r2,10(r2)
  820b60:	10803fcc 	andi	r2,r2,255
  820b64:	1005003a 	cmpeq	r2,r2,zero
  820b68:	1000211e 	bne	r2,zero,820bf0 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  820b6c:	e0bffe03 	ldbu	r2,-8(fp)
  820b70:	1080004c 	andi	r2,r2,1
  820b74:	10803fcc 	andi	r2,r2,255
  820b78:	1005003a 	cmpeq	r2,r2,zero
  820b7c:	10000c1e 	bne	r2,zero,820bb0 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  820b80:	00000506 	br	820b98 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  820b84:	e13ffc17 	ldw	r4,-16(fp)
  820b88:	e17ffd17 	ldw	r5,-12(fp)
  820b8c:	01800104 	movi	r6,4
  820b90:	000f883a 	mov	r7,zero
  820b94:	081c8140 	call	81c814 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  820b98:	e0bffc17 	ldw	r2,-16(fp)
  820b9c:	10800283 	ldbu	r2,10(r2)
  820ba0:	10803fcc 	andi	r2,r2,255
  820ba4:	1004c03a 	cmpne	r2,r2,zero
  820ba8:	103ff61e 	bne	r2,zero,820b84 <OSQPostOpt+0xa4>
  820bac:	00000506 	br	820bc4 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  820bb0:	e13ffc17 	ldw	r4,-16(fp)
  820bb4:	e17ffd17 	ldw	r5,-12(fp)
  820bb8:	01800104 	movi	r6,4
  820bbc:	000f883a 	mov	r7,zero
  820bc0:	081c8140 	call	81c814 <OS_EventTaskRdy>
  820bc4:	e0bffa17 	ldw	r2,-24(fp)
  820bc8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  820bcc:	e0bff817 	ldw	r2,-32(fp)
  820bd0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  820bd4:	e0bffe03 	ldbu	r2,-8(fp)
  820bd8:	1080010c 	andi	r2,r2,4
  820bdc:	1004c03a 	cmpne	r2,r2,zero
  820be0:	1000011e 	bne	r2,zero,820be8 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
  820be4:	081d2540 	call	81d254 <OS_Sched>
        }
        return (OS_ERR_NONE);
  820be8:	e03fff15 	stw	zero,-4(fp)
  820bec:	00004306 	br	820cfc <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  820bf0:	e0bffc17 	ldw	r2,-16(fp)
  820bf4:	10800117 	ldw	r2,4(r2)
  820bf8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  820bfc:	e0bffb17 	ldw	r2,-20(fp)
  820c00:	10c0058b 	ldhu	r3,22(r2)
  820c04:	e0bffb17 	ldw	r2,-20(fp)
  820c08:	1080050b 	ldhu	r2,20(r2)
  820c0c:	18ffffcc 	andi	r3,r3,65535
  820c10:	10bfffcc 	andi	r2,r2,65535
  820c14:	18800736 	bltu	r3,r2,820c34 <OSQPostOpt+0x154>
  820c18:	e0bffa17 	ldw	r2,-24(fp)
  820c1c:	e0bff715 	stw	r2,-36(fp)
  820c20:	e0bff717 	ldw	r2,-36(fp)
  820c24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  820c28:	00800784 	movi	r2,30
  820c2c:	e0bfff15 	stw	r2,-4(fp)
  820c30:	00003206 	br	820cfc <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  820c34:	e0bffe03 	ldbu	r2,-8(fp)
  820c38:	1080008c 	andi	r2,r2,2
  820c3c:	1005003a 	cmpeq	r2,r2,zero
  820c40:	1000131e 	bne	r2,zero,820c90 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  820c44:	e0bffb17 	ldw	r2,-20(fp)
  820c48:	10c00417 	ldw	r3,16(r2)
  820c4c:	e0bffb17 	ldw	r2,-20(fp)
  820c50:	10800117 	ldw	r2,4(r2)
  820c54:	1880041e 	bne	r3,r2,820c68 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  820c58:	e0bffb17 	ldw	r2,-20(fp)
  820c5c:	10c00217 	ldw	r3,8(r2)
  820c60:	e0bffb17 	ldw	r2,-20(fp)
  820c64:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  820c68:	e0bffb17 	ldw	r2,-20(fp)
  820c6c:	10800417 	ldw	r2,16(r2)
  820c70:	10ffff04 	addi	r3,r2,-4
  820c74:	e0bffb17 	ldw	r2,-20(fp)
  820c78:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  820c7c:	e0bffb17 	ldw	r2,-20(fp)
  820c80:	10c00417 	ldw	r3,16(r2)
  820c84:	e0bffd17 	ldw	r2,-12(fp)
  820c88:	18800015 	stw	r2,0(r3)
  820c8c:	00001006 	br	820cd0 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  820c90:	e0bffb17 	ldw	r2,-20(fp)
  820c94:	10c00317 	ldw	r3,12(r2)
  820c98:	e0bffd17 	ldw	r2,-12(fp)
  820c9c:	18800015 	stw	r2,0(r3)
  820ca0:	18c00104 	addi	r3,r3,4
  820ca4:	e0bffb17 	ldw	r2,-20(fp)
  820ca8:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  820cac:	e0bffb17 	ldw	r2,-20(fp)
  820cb0:	10c00317 	ldw	r3,12(r2)
  820cb4:	e0bffb17 	ldw	r2,-20(fp)
  820cb8:	10800217 	ldw	r2,8(r2)
  820cbc:	1880041e 	bne	r3,r2,820cd0 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
  820cc0:	e0bffb17 	ldw	r2,-20(fp)
  820cc4:	10c00117 	ldw	r3,4(r2)
  820cc8:	e0bffb17 	ldw	r2,-20(fp)
  820ccc:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  820cd0:	e0bffb17 	ldw	r2,-20(fp)
  820cd4:	1080058b 	ldhu	r2,22(r2)
  820cd8:	10800044 	addi	r2,r2,1
  820cdc:	1007883a 	mov	r3,r2
  820ce0:	e0bffb17 	ldw	r2,-20(fp)
  820ce4:	10c0058d 	sth	r3,22(r2)
  820ce8:	e0bffa17 	ldw	r2,-24(fp)
  820cec:	e0bff615 	stw	r2,-40(fp)
  820cf0:	e0bff617 	ldw	r2,-40(fp)
  820cf4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  820cf8:	e03fff15 	stw	zero,-4(fp)
  820cfc:	e0bfff17 	ldw	r2,-4(fp)
}
  820d00:	e037883a 	mov	sp,fp
  820d04:	dfc00117 	ldw	ra,4(sp)
  820d08:	df000017 	ldw	fp,0(sp)
  820d0c:	dec00204 	addi	sp,sp,8
  820d10:	f800283a 	ret

00820d14 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  820d14:	defff504 	addi	sp,sp,-44
  820d18:	df000a15 	stw	fp,40(sp)
  820d1c:	df000a04 	addi	fp,sp,40
  820d20:	e13ffd15 	stw	r4,-12(fp)
  820d24:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  820d28:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  820d2c:	e0bffd17 	ldw	r2,-12(fp)
  820d30:	1004c03a 	cmpne	r2,r2,zero
  820d34:	1000031e 	bne	r2,zero,820d44 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  820d38:	00800104 	movi	r2,4
  820d3c:	e0bfff15 	stw	r2,-4(fp)
  820d40:	00004f06 	br	820e80 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  820d44:	e0bffe17 	ldw	r2,-8(fp)
  820d48:	1004c03a 	cmpne	r2,r2,zero
  820d4c:	1000031e 	bne	r2,zero,820d5c <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  820d50:	00800244 	movi	r2,9
  820d54:	e0bfff15 	stw	r2,-4(fp)
  820d58:	00004906 	br	820e80 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  820d5c:	e0bffd17 	ldw	r2,-12(fp)
  820d60:	10800003 	ldbu	r2,0(r2)
  820d64:	10803fcc 	andi	r2,r2,255
  820d68:	108000a0 	cmpeqi	r2,r2,2
  820d6c:	1000031e 	bne	r2,zero,820d7c <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  820d70:	00800044 	movi	r2,1
  820d74:	e0bfff15 	stw	r2,-4(fp)
  820d78:	00004106 	br	820e80 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  820d7c:	0005303a 	rdctl	r2,status
  820d80:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  820d84:	e0fff717 	ldw	r3,-36(fp)
  820d88:	00bfff84 	movi	r2,-2
  820d8c:	1884703a 	and	r2,r3,r2
  820d90:	1001703a 	wrctl	status,r2
  
  return context;
  820d94:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  820d98:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  820d9c:	e0bffd17 	ldw	r2,-12(fp)
  820da0:	10c00283 	ldbu	r3,10(r2)
  820da4:	e0bffe17 	ldw	r2,-8(fp)
  820da8:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  820dac:	e0bffd17 	ldw	r2,-12(fp)
  820db0:	108002c4 	addi	r2,r2,11
  820db4:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  820db8:	e0bffe17 	ldw	r2,-8(fp)
  820dbc:	10800204 	addi	r2,r2,8
  820dc0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  820dc4:	e03ffb05 	stb	zero,-20(fp)
  820dc8:	00000d06 	br	820e00 <OSQQuery+0xec>
        *pdest++ = *psrc++;
  820dcc:	e0bffa17 	ldw	r2,-24(fp)
  820dd0:	10c00003 	ldbu	r3,0(r2)
  820dd4:	e0bff917 	ldw	r2,-28(fp)
  820dd8:	10c00005 	stb	r3,0(r2)
  820ddc:	e0bff917 	ldw	r2,-28(fp)
  820de0:	10800044 	addi	r2,r2,1
  820de4:	e0bff915 	stw	r2,-28(fp)
  820de8:	e0bffa17 	ldw	r2,-24(fp)
  820dec:	10800044 	addi	r2,r2,1
  820df0:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  820df4:	e0bffb03 	ldbu	r2,-20(fp)
  820df8:	10800044 	addi	r2,r2,1
  820dfc:	e0bffb05 	stb	r2,-20(fp)
  820e00:	e0bffb03 	ldbu	r2,-20(fp)
  820e04:	108000f0 	cmpltui	r2,r2,3
  820e08:	103ff01e 	bne	r2,zero,820dcc <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  820e0c:	e0bffd17 	ldw	r2,-12(fp)
  820e10:	10800117 	ldw	r2,4(r2)
  820e14:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  820e18:	e0bffc17 	ldw	r2,-16(fp)
  820e1c:	1080058b 	ldhu	r2,22(r2)
  820e20:	10bfffcc 	andi	r2,r2,65535
  820e24:	1005003a 	cmpeq	r2,r2,zero
  820e28:	1000061e 	bne	r2,zero,820e44 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  820e2c:	e0bffc17 	ldw	r2,-16(fp)
  820e30:	10800417 	ldw	r2,16(r2)
  820e34:	10c00017 	ldw	r3,0(r2)
  820e38:	e0bffe17 	ldw	r2,-8(fp)
  820e3c:	10c00015 	stw	r3,0(r2)
  820e40:	00000206 	br	820e4c <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
  820e44:	e0bffe17 	ldw	r2,-8(fp)
  820e48:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  820e4c:	e0bffc17 	ldw	r2,-16(fp)
  820e50:	10c0058b 	ldhu	r3,22(r2)
  820e54:	e0bffe17 	ldw	r2,-8(fp)
  820e58:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  820e5c:	e0bffc17 	ldw	r2,-16(fp)
  820e60:	10c0050b 	ldhu	r3,20(r2)
  820e64:	e0bffe17 	ldw	r2,-8(fp)
  820e68:	10c0018d 	sth	r3,6(r2)
  820e6c:	e0bff817 	ldw	r2,-32(fp)
  820e70:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  820e74:	e0bff617 	ldw	r2,-40(fp)
  820e78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  820e7c:	e03fff15 	stw	zero,-4(fp)
  820e80:	e0bfff17 	ldw	r2,-4(fp)
}
  820e84:	e037883a 	mov	sp,fp
  820e88:	df000017 	ldw	fp,0(sp)
  820e8c:	dec00104 	addi	sp,sp,4
  820e90:	f800283a 	ret

00820e94 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  820e94:	defffb04 	addi	sp,sp,-20
  820e98:	dfc00415 	stw	ra,16(sp)
  820e9c:	df000315 	stw	fp,12(sp)
  820ea0:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  820ea4:	01002534 	movhi	r4,148
  820ea8:	2130ba04 	addi	r4,r4,-15640
  820eac:	01407804 	movi	r5,480
  820eb0:	081d1940 	call	81d194 <OS_MemClr>
    pq1 = &OSQTbl[0];
  820eb4:	00802534 	movhi	r2,148
  820eb8:	10b0ba04 	addi	r2,r2,-15640
  820ebc:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  820ec0:	00802534 	movhi	r2,148
  820ec4:	10b0c004 	addi	r2,r2,-15616
  820ec8:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  820ecc:	e03fff0d 	sth	zero,-4(fp)
  820ed0:	00000c06 	br	820f04 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  820ed4:	e0fffe17 	ldw	r3,-8(fp)
  820ed8:	e0bffd17 	ldw	r2,-12(fp)
  820edc:	18800015 	stw	r2,0(r3)
        pq1++;
  820ee0:	e0bffe17 	ldw	r2,-8(fp)
  820ee4:	10800604 	addi	r2,r2,24
  820ee8:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  820eec:	e0bffd17 	ldw	r2,-12(fp)
  820ef0:	10800604 	addi	r2,r2,24
  820ef4:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  820ef8:	e0bfff0b 	ldhu	r2,-4(fp)
  820efc:	10800044 	addi	r2,r2,1
  820f00:	e0bfff0d 	sth	r2,-4(fp)
  820f04:	e0bfff0b 	ldhu	r2,-4(fp)
  820f08:	108004f0 	cmpltui	r2,r2,19
  820f0c:	103ff11e 	bne	r2,zero,820ed4 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  820f10:	e0bffe17 	ldw	r2,-8(fp)
  820f14:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  820f18:	00c020f4 	movhi	r3,131
  820f1c:	18e9e904 	addi	r3,r3,-22620
  820f20:	00802534 	movhi	r2,148
  820f24:	10b0ba04 	addi	r2,r2,-15640
  820f28:	18800015 	stw	r2,0(r3)
#endif
}
  820f2c:	e037883a 	mov	sp,fp
  820f30:	dfc00117 	ldw	ra,4(sp)
  820f34:	df000017 	ldw	fp,0(sp)
  820f38:	dec00204 	addi	sp,sp,8
  820f3c:	f800283a 	ret

00820f40 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  820f40:	defff904 	addi	sp,sp,-28
  820f44:	df000615 	stw	fp,24(sp)
  820f48:	df000604 	addi	fp,sp,24
  820f4c:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  820f50:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  820f54:	e0bffe17 	ldw	r2,-8(fp)
  820f58:	1004c03a 	cmpne	r2,r2,zero
  820f5c:	1000021e 	bne	r2,zero,820f68 <OSSemAccept+0x28>
        return (0);
  820f60:	e03fff15 	stw	zero,-4(fp)
  820f64:	00002106 	br	820fec <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  820f68:	e0bffe17 	ldw	r2,-8(fp)
  820f6c:	10800003 	ldbu	r2,0(r2)
  820f70:	10803fcc 	andi	r2,r2,255
  820f74:	108000e0 	cmpeqi	r2,r2,3
  820f78:	1000021e 	bne	r2,zero,820f84 <OSSemAccept+0x44>
        return (0);
  820f7c:	e03fff15 	stw	zero,-4(fp)
  820f80:	00001a06 	br	820fec <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  820f84:	0005303a 	rdctl	r2,status
  820f88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  820f8c:	e0fffb17 	ldw	r3,-20(fp)
  820f90:	00bfff84 	movi	r2,-2
  820f94:	1884703a 	and	r2,r3,r2
  820f98:	1001703a 	wrctl	status,r2
  
  return context;
  820f9c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  820fa0:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
  820fa4:	e0bffe17 	ldw	r2,-8(fp)
  820fa8:	1080020b 	ldhu	r2,8(r2)
  820fac:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  820fb0:	e0bffd0b 	ldhu	r2,-12(fp)
  820fb4:	1005003a 	cmpeq	r2,r2,zero
  820fb8:	1000061e 	bne	r2,zero,820fd4 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  820fbc:	e0bffe17 	ldw	r2,-8(fp)
  820fc0:	1080020b 	ldhu	r2,8(r2)
  820fc4:	10bfffc4 	addi	r2,r2,-1
  820fc8:	1007883a 	mov	r3,r2
  820fcc:	e0bffe17 	ldw	r2,-8(fp)
  820fd0:	10c0020d 	sth	r3,8(r2)
  820fd4:	e0bffc17 	ldw	r2,-16(fp)
  820fd8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  820fdc:	e0bffa17 	ldw	r2,-24(fp)
  820fe0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  820fe4:	e0bffd0b 	ldhu	r2,-12(fp)
  820fe8:	e0bfff15 	stw	r2,-4(fp)
  820fec:	e0bfff17 	ldw	r2,-4(fp)
}
  820ff0:	e037883a 	mov	sp,fp
  820ff4:	df000017 	ldw	fp,0(sp)
  820ff8:	dec00104 	addi	sp,sp,4
  820ffc:	f800283a 	ret

00821000 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  821000:	defff804 	addi	sp,sp,-32
  821004:	dfc00715 	stw	ra,28(sp)
  821008:	df000615 	stw	fp,24(sp)
  82100c:	df000604 	addi	fp,sp,24
  821010:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  821014:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  821018:	008020f4 	movhi	r2,131
  82101c:	10a9ec04 	addi	r2,r2,-22608
  821020:	10800003 	ldbu	r2,0(r2)
  821024:	10803fcc 	andi	r2,r2,255
  821028:	1005003a 	cmpeq	r2,r2,zero
  82102c:	1000021e 	bne	r2,zero,821038 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  821030:	e03fff15 	stw	zero,-4(fp)
  821034:	00003106 	br	8210fc <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  821038:	0005303a 	rdctl	r2,status
  82103c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  821040:	e0fffb17 	ldw	r3,-20(fp)
  821044:	00bfff84 	movi	r2,-2
  821048:	1884703a 	and	r2,r3,r2
  82104c:	1001703a 	wrctl	status,r2
  
  return context;
  821050:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  821054:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  821058:	008020f4 	movhi	r2,131
  82105c:	10a9eb04 	addi	r2,r2,-22612
  821060:	10800017 	ldw	r2,0(r2)
  821064:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  821068:	008020f4 	movhi	r2,131
  82106c:	10a9eb04 	addi	r2,r2,-22612
  821070:	10800017 	ldw	r2,0(r2)
  821074:	1005003a 	cmpeq	r2,r2,zero
  821078:	1000081e 	bne	r2,zero,82109c <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  82107c:	008020f4 	movhi	r2,131
  821080:	10a9eb04 	addi	r2,r2,-22612
  821084:	10800017 	ldw	r2,0(r2)
  821088:	10800117 	ldw	r2,4(r2)
  82108c:	1007883a 	mov	r3,r2
  821090:	008020f4 	movhi	r2,131
  821094:	10a9eb04 	addi	r2,r2,-22612
  821098:	10c00015 	stw	r3,0(r2)
  82109c:	e0bffc17 	ldw	r2,-16(fp)
  8210a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8210a4:	e0bffa17 	ldw	r2,-24(fp)
  8210a8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  8210ac:	e0bffd17 	ldw	r2,-12(fp)
  8210b0:	1005003a 	cmpeq	r2,r2,zero
  8210b4:	10000f1e 	bne	r2,zero,8210f4 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  8210b8:	e0fffd17 	ldw	r3,-12(fp)
  8210bc:	008000c4 	movi	r2,3
  8210c0:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  8210c4:	e0fffd17 	ldw	r3,-12(fp)
  8210c8:	e0bffe0b 	ldhu	r2,-8(fp)
  8210cc:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  8210d0:	e0bffd17 	ldw	r2,-12(fp)
  8210d4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  8210d8:	e0fffd17 	ldw	r3,-12(fp)
  8210dc:	00800fc4 	movi	r2,63
  8210e0:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  8210e4:	e0bffd17 	ldw	r2,-12(fp)
  8210e8:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  8210ec:	e13ffd17 	ldw	r4,-12(fp)
  8210f0:	081cdc80 	call	81cdc8 <OS_EventWaitListInit>
    }
    return (pevent);
  8210f4:	e0bffd17 	ldw	r2,-12(fp)
  8210f8:	e0bfff15 	stw	r2,-4(fp)
  8210fc:	e0bfff17 	ldw	r2,-4(fp)
}
  821100:	e037883a 	mov	sp,fp
  821104:	dfc00117 	ldw	ra,4(sp)
  821108:	df000017 	ldw	fp,0(sp)
  82110c:	dec00204 	addi	sp,sp,8
  821110:	f800283a 	ret

00821114 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  821114:	defff104 	addi	sp,sp,-60
  821118:	dfc00e15 	stw	ra,56(sp)
  82111c:	df000d15 	stw	fp,52(sp)
  821120:	df000d04 	addi	fp,sp,52
  821124:	e13ffb15 	stw	r4,-20(fp)
  821128:	e1bffd15 	stw	r6,-12(fp)
  82112c:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  821130:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  821134:	e0bffd17 	ldw	r2,-12(fp)
  821138:	1004c03a 	cmpne	r2,r2,zero
  82113c:	1000031e 	bne	r2,zero,82114c <OSSemDel+0x38>
        return (pevent);
  821140:	e0bffb17 	ldw	r2,-20(fp)
  821144:	e0bfff15 	stw	r2,-4(fp)
  821148:	00009406 	br	82139c <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  82114c:	e0bffb17 	ldw	r2,-20(fp)
  821150:	1004c03a 	cmpne	r2,r2,zero
  821154:	1000061e 	bne	r2,zero,821170 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  821158:	e0fffd17 	ldw	r3,-12(fp)
  82115c:	00800104 	movi	r2,4
  821160:	18800005 	stb	r2,0(r3)
        return (pevent);
  821164:	e0fffb17 	ldw	r3,-20(fp)
  821168:	e0ffff15 	stw	r3,-4(fp)
  82116c:	00008b06 	br	82139c <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  821170:	e0bffb17 	ldw	r2,-20(fp)
  821174:	10800003 	ldbu	r2,0(r2)
  821178:	10803fcc 	andi	r2,r2,255
  82117c:	108000e0 	cmpeqi	r2,r2,3
  821180:	1000061e 	bne	r2,zero,82119c <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  821184:	e0fffd17 	ldw	r3,-12(fp)
  821188:	00800044 	movi	r2,1
  82118c:	18800005 	stb	r2,0(r3)
        return (pevent);
  821190:	e0bffb17 	ldw	r2,-20(fp)
  821194:	e0bfff15 	stw	r2,-4(fp)
  821198:	00008006 	br	82139c <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  82119c:	008020f4 	movhi	r2,131
  8211a0:	10a9ec04 	addi	r2,r2,-22608
  8211a4:	10800003 	ldbu	r2,0(r2)
  8211a8:	10803fcc 	andi	r2,r2,255
  8211ac:	1005003a 	cmpeq	r2,r2,zero
  8211b0:	1000061e 	bne	r2,zero,8211cc <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  8211b4:	e0fffd17 	ldw	r3,-12(fp)
  8211b8:	008003c4 	movi	r2,15
  8211bc:	18800005 	stb	r2,0(r3)
        return (pevent);
  8211c0:	e0fffb17 	ldw	r3,-20(fp)
  8211c4:	e0ffff15 	stw	r3,-4(fp)
  8211c8:	00007406 	br	82139c <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8211cc:	0005303a 	rdctl	r2,status
  8211d0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8211d4:	e0fff717 	ldw	r3,-36(fp)
  8211d8:	00bfff84 	movi	r2,-2
  8211dc:	1884703a 	and	r2,r3,r2
  8211e0:	1001703a 	wrctl	status,r2
  
  return context;
  8211e4:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  8211e8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  8211ec:	e0bffb17 	ldw	r2,-20(fp)
  8211f0:	10800283 	ldbu	r2,10(r2)
  8211f4:	10803fcc 	andi	r2,r2,255
  8211f8:	1005003a 	cmpeq	r2,r2,zero
  8211fc:	1000031e 	bne	r2,zero,82120c <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  821200:	00800044 	movi	r2,1
  821204:	e0bffa05 	stb	r2,-24(fp)
  821208:	00000106 	br	821210 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  82120c:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  821210:	e0bffc03 	ldbu	r2,-16(fp)
  821214:	e0bffe15 	stw	r2,-8(fp)
  821218:	e0fffe17 	ldw	r3,-8(fp)
  82121c:	1805003a 	cmpeq	r2,r3,zero
  821220:	1000041e 	bne	r2,zero,821234 <OSSemDel+0x120>
  821224:	e0fffe17 	ldw	r3,-8(fp)
  821228:	18800060 	cmpeqi	r2,r3,1
  82122c:	10002d1e 	bne	r2,zero,8212e4 <OSSemDel+0x1d0>
  821230:	00004f06 	br	821370 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  821234:	e0bffa03 	ldbu	r2,-24(fp)
  821238:	1004c03a 	cmpne	r2,r2,zero
  82123c:	10001a1e 	bne	r2,zero,8212a8 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  821240:	e0fffb17 	ldw	r3,-20(fp)
  821244:	00800fc4 	movi	r2,63
  821248:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  82124c:	e0bffb17 	ldw	r2,-20(fp)
  821250:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  821254:	e0bffb17 	ldw	r2,-20(fp)
  821258:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  82125c:	008020f4 	movhi	r2,131
  821260:	10a9eb04 	addi	r2,r2,-22612
  821264:	10c00017 	ldw	r3,0(r2)
  821268:	e0bffb17 	ldw	r2,-20(fp)
  82126c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  821270:	e0bffb17 	ldw	r2,-20(fp)
  821274:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  821278:	00c020f4 	movhi	r3,131
  82127c:	18e9eb04 	addi	r3,r3,-22612
  821280:	e0bffb17 	ldw	r2,-20(fp)
  821284:	18800015 	stw	r2,0(r3)
  821288:	e0bff817 	ldw	r2,-32(fp)
  82128c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  821290:	e0bff617 	ldw	r2,-40(fp)
  821294:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  821298:	e0bffd17 	ldw	r2,-12(fp)
  82129c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  8212a0:	e03ff915 	stw	zero,-28(fp)
  8212a4:	00003b06 	br	821394 <OSSemDel+0x280>
  8212a8:	e0bff817 	ldw	r2,-32(fp)
  8212ac:	e0bff515 	stw	r2,-44(fp)
  8212b0:	e0bff517 	ldw	r2,-44(fp)
  8212b4:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  8212b8:	e0fffd17 	ldw	r3,-12(fp)
  8212bc:	00801244 	movi	r2,73
  8212c0:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  8212c4:	e0bffb17 	ldw	r2,-20(fp)
  8212c8:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  8212cc:	00003106 	br	821394 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  8212d0:	e13ffb17 	ldw	r4,-20(fp)
  8212d4:	000b883a 	mov	r5,zero
  8212d8:	01800044 	movi	r6,1
  8212dc:	000f883a 	mov	r7,zero
  8212e0:	081c8140 	call	81c814 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  8212e4:	e0bffb17 	ldw	r2,-20(fp)
  8212e8:	10800283 	ldbu	r2,10(r2)
  8212ec:	10803fcc 	andi	r2,r2,255
  8212f0:	1004c03a 	cmpne	r2,r2,zero
  8212f4:	103ff61e 	bne	r2,zero,8212d0 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  8212f8:	e0fffb17 	ldw	r3,-20(fp)
  8212fc:	00800fc4 	movi	r2,63
  821300:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  821304:	e0bffb17 	ldw	r2,-20(fp)
  821308:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  82130c:	e0bffb17 	ldw	r2,-20(fp)
  821310:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  821314:	008020f4 	movhi	r2,131
  821318:	10a9eb04 	addi	r2,r2,-22612
  82131c:	10c00017 	ldw	r3,0(r2)
  821320:	e0bffb17 	ldw	r2,-20(fp)
  821324:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  821328:	e0bffb17 	ldw	r2,-20(fp)
  82132c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  821330:	00c020f4 	movhi	r3,131
  821334:	18e9eb04 	addi	r3,r3,-22612
  821338:	e0bffb17 	ldw	r2,-20(fp)
  82133c:	18800015 	stw	r2,0(r3)
  821340:	e0bff817 	ldw	r2,-32(fp)
  821344:	e0bff415 	stw	r2,-48(fp)
  821348:	e0bff417 	ldw	r2,-48(fp)
  82134c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  821350:	e0bffa03 	ldbu	r2,-24(fp)
  821354:	10800058 	cmpnei	r2,r2,1
  821358:	1000011e 	bne	r2,zero,821360 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  82135c:	081d2540 	call	81d254 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  821360:	e0bffd17 	ldw	r2,-12(fp)
  821364:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  821368:	e03ff915 	stw	zero,-28(fp)
             break;
  82136c:	00000906 	br	821394 <OSSemDel+0x280>
  821370:	e0bff817 	ldw	r2,-32(fp)
  821374:	e0bff315 	stw	r2,-52(fp)
  821378:	e0bff317 	ldw	r2,-52(fp)
  82137c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  821380:	e0fffd17 	ldw	r3,-12(fp)
  821384:	008001c4 	movi	r2,7
  821388:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  82138c:	e0bffb17 	ldw	r2,-20(fp)
  821390:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  821394:	e0bff917 	ldw	r2,-28(fp)
  821398:	e0bfff15 	stw	r2,-4(fp)
  82139c:	e0bfff17 	ldw	r2,-4(fp)
}
  8213a0:	e037883a 	mov	sp,fp
  8213a4:	dfc00117 	ldw	ra,4(sp)
  8213a8:	df000017 	ldw	fp,0(sp)
  8213ac:	dec00204 	addi	sp,sp,8
  8213b0:	f800283a 	ret

008213b4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  8213b4:	defff404 	addi	sp,sp,-48
  8213b8:	dfc00b15 	stw	ra,44(sp)
  8213bc:	df000a15 	stw	fp,40(sp)
  8213c0:	df000a04 	addi	fp,sp,40
  8213c4:	e13ffc15 	stw	r4,-16(fp)
  8213c8:	e1bffe15 	stw	r6,-8(fp)
  8213cc:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8213d0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8213d4:	e0bffe17 	ldw	r2,-8(fp)
  8213d8:	1005003a 	cmpeq	r2,r2,zero
  8213dc:	10008f1e 	bne	r2,zero,82161c <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8213e0:	e0bffc17 	ldw	r2,-16(fp)
  8213e4:	1004c03a 	cmpne	r2,r2,zero
  8213e8:	1000041e 	bne	r2,zero,8213fc <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  8213ec:	e0fffe17 	ldw	r3,-8(fp)
  8213f0:	00800104 	movi	r2,4
  8213f4:	18800005 	stb	r2,0(r3)
        return;
  8213f8:	00008806 	br	82161c <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8213fc:	e0bffc17 	ldw	r2,-16(fp)
  821400:	10800003 	ldbu	r2,0(r2)
  821404:	10803fcc 	andi	r2,r2,255
  821408:	108000e0 	cmpeqi	r2,r2,3
  82140c:	1000041e 	bne	r2,zero,821420 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  821410:	e0fffe17 	ldw	r3,-8(fp)
  821414:	00800044 	movi	r2,1
  821418:	18800005 	stb	r2,0(r3)
        return;
  82141c:	00007f06 	br	82161c <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  821420:	008020f4 	movhi	r2,131
  821424:	10a9ec04 	addi	r2,r2,-22608
  821428:	10800003 	ldbu	r2,0(r2)
  82142c:	10803fcc 	andi	r2,r2,255
  821430:	1005003a 	cmpeq	r2,r2,zero
  821434:	1000041e 	bne	r2,zero,821448 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  821438:	e0fffe17 	ldw	r3,-8(fp)
  82143c:	00800084 	movi	r2,2
  821440:	18800005 	stb	r2,0(r3)
        return;
  821444:	00007506 	br	82161c <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  821448:	008020f4 	movhi	r2,131
  82144c:	10a9de04 	addi	r2,r2,-22664
  821450:	10800003 	ldbu	r2,0(r2)
  821454:	10803fcc 	andi	r2,r2,255
  821458:	1005003a 	cmpeq	r2,r2,zero
  82145c:	1000041e 	bne	r2,zero,821470 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  821460:	e0fffe17 	ldw	r3,-8(fp)
  821464:	00800344 	movi	r2,13
  821468:	18800005 	stb	r2,0(r3)
        return;
  82146c:	00006b06 	br	82161c <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  821470:	0005303a 	rdctl	r2,status
  821474:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  821478:	e0fffa17 	ldw	r3,-24(fp)
  82147c:	00bfff84 	movi	r2,-2
  821480:	1884703a 	and	r2,r3,r2
  821484:	1001703a 	wrctl	status,r2
  
  return context;
  821488:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  82148c:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  821490:	e0bffc17 	ldw	r2,-16(fp)
  821494:	1080020b 	ldhu	r2,8(r2)
  821498:	10bfffcc 	andi	r2,r2,65535
  82149c:	1005003a 	cmpeq	r2,r2,zero
  8214a0:	10000d1e 	bne	r2,zero,8214d8 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  8214a4:	e0bffc17 	ldw	r2,-16(fp)
  8214a8:	1080020b 	ldhu	r2,8(r2)
  8214ac:	10bfffc4 	addi	r2,r2,-1
  8214b0:	1007883a 	mov	r3,r2
  8214b4:	e0bffc17 	ldw	r2,-16(fp)
  8214b8:	10c0020d 	sth	r3,8(r2)
  8214bc:	e0bffb17 	ldw	r2,-20(fp)
  8214c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8214c4:	e0bff917 	ldw	r2,-28(fp)
  8214c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  8214cc:	e0bffe17 	ldw	r2,-8(fp)
  8214d0:	10000005 	stb	zero,0(r2)
        return;
  8214d4:	00005106 	br	82161c <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  8214d8:	008020f4 	movhi	r2,131
  8214dc:	10a9ed04 	addi	r2,r2,-22604
  8214e0:	10c00017 	ldw	r3,0(r2)
  8214e4:	008020f4 	movhi	r2,131
  8214e8:	10a9ed04 	addi	r2,r2,-22604
  8214ec:	10800017 	ldw	r2,0(r2)
  8214f0:	10800c03 	ldbu	r2,48(r2)
  8214f4:	10800054 	ori	r2,r2,1
  8214f8:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  8214fc:	008020f4 	movhi	r2,131
  821500:	10a9ed04 	addi	r2,r2,-22604
  821504:	10800017 	ldw	r2,0(r2)
  821508:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  82150c:	008020f4 	movhi	r2,131
  821510:	10a9ed04 	addi	r2,r2,-22604
  821514:	10c00017 	ldw	r3,0(r2)
  821518:	e0bffd0b 	ldhu	r2,-12(fp)
  82151c:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  821520:	e13ffc17 	ldw	r4,-16(fp)
  821524:	081c9a80 	call	81c9a8 <OS_EventTaskWait>
  821528:	e0bffb17 	ldw	r2,-20(fp)
  82152c:	e0bff815 	stw	r2,-32(fp)
  821530:	e0bff817 	ldw	r2,-32(fp)
  821534:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  821538:	081d2540 	call	81d254 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82153c:	0005303a 	rdctl	r2,status
  821540:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  821544:	e0fff717 	ldw	r3,-36(fp)
  821548:	00bfff84 	movi	r2,-2
  82154c:	1884703a 	and	r2,r3,r2
  821550:	1001703a 	wrctl	status,r2
  
  return context;
  821554:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  821558:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  82155c:	008020f4 	movhi	r2,131
  821560:	10a9ed04 	addi	r2,r2,-22604
  821564:	10800017 	ldw	r2,0(r2)
  821568:	10800c43 	ldbu	r2,49(r2)
  82156c:	10803fcc 	andi	r2,r2,255
  821570:	e0bfff15 	stw	r2,-4(fp)
  821574:	e0ffff17 	ldw	r3,-4(fp)
  821578:	1805003a 	cmpeq	r2,r3,zero
  82157c:	1000041e 	bne	r2,zero,821590 <OSSemPend+0x1dc>
  821580:	e0ffff17 	ldw	r3,-4(fp)
  821584:	188000a0 	cmpeqi	r2,r3,2
  821588:	1000041e 	bne	r2,zero,82159c <OSSemPend+0x1e8>
  82158c:	00000706 	br	8215ac <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  821590:	e0bffe17 	ldw	r2,-8(fp)
  821594:	10000005 	stb	zero,0(r2)
             break;
  821598:	00000c06 	br	8215cc <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  82159c:	e0fffe17 	ldw	r3,-8(fp)
  8215a0:	00800384 	movi	r2,14
  8215a4:	18800005 	stb	r2,0(r3)
             break;
  8215a8:	00000806 	br	8215cc <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  8215ac:	008020f4 	movhi	r2,131
  8215b0:	10a9ed04 	addi	r2,r2,-22604
  8215b4:	11000017 	ldw	r4,0(r2)
  8215b8:	e17ffc17 	ldw	r5,-16(fp)
  8215bc:	081cc0c0 	call	81cc0c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  8215c0:	e0fffe17 	ldw	r3,-8(fp)
  8215c4:	00800284 	movi	r2,10
  8215c8:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  8215cc:	008020f4 	movhi	r2,131
  8215d0:	10a9ed04 	addi	r2,r2,-22604
  8215d4:	10800017 	ldw	r2,0(r2)
  8215d8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  8215dc:	008020f4 	movhi	r2,131
  8215e0:	10a9ed04 	addi	r2,r2,-22604
  8215e4:	10800017 	ldw	r2,0(r2)
  8215e8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  8215ec:	008020f4 	movhi	r2,131
  8215f0:	10a9ed04 	addi	r2,r2,-22604
  8215f4:	10800017 	ldw	r2,0(r2)
  8215f8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  8215fc:	008020f4 	movhi	r2,131
  821600:	10a9ed04 	addi	r2,r2,-22604
  821604:	10800017 	ldw	r2,0(r2)
  821608:	10000815 	stw	zero,32(r2)
  82160c:	e0bffb17 	ldw	r2,-20(fp)
  821610:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  821614:	e0bff617 	ldw	r2,-40(fp)
  821618:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
  82161c:	e037883a 	mov	sp,fp
  821620:	dfc00117 	ldw	ra,4(sp)
  821624:	df000017 	ldw	fp,0(sp)
  821628:	dec00204 	addi	sp,sp,8
  82162c:	f800283a 	ret

00821630 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  821630:	defff504 	addi	sp,sp,-44
  821634:	dfc00a15 	stw	ra,40(sp)
  821638:	df000915 	stw	fp,36(sp)
  82163c:	df000904 	addi	fp,sp,36
  821640:	e13ffc15 	stw	r4,-16(fp)
  821644:	e1bffe15 	stw	r6,-8(fp)
  821648:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  82164c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  821650:	e0bffe17 	ldw	r2,-8(fp)
  821654:	1004c03a 	cmpne	r2,r2,zero
  821658:	1000021e 	bne	r2,zero,821664 <OSSemPendAbort+0x34>
        return (0);
  82165c:	e03fff15 	stw	zero,-4(fp)
  821660:	00004c06 	br	821794 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  821664:	e0bffc17 	ldw	r2,-16(fp)
  821668:	1004c03a 	cmpne	r2,r2,zero
  82166c:	1000051e 	bne	r2,zero,821684 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  821670:	e0fffe17 	ldw	r3,-8(fp)
  821674:	00800104 	movi	r2,4
  821678:	18800005 	stb	r2,0(r3)
        return (0);
  82167c:	e03fff15 	stw	zero,-4(fp)
  821680:	00004406 	br	821794 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  821684:	e0bffc17 	ldw	r2,-16(fp)
  821688:	10800003 	ldbu	r2,0(r2)
  82168c:	10803fcc 	andi	r2,r2,255
  821690:	108000e0 	cmpeqi	r2,r2,3
  821694:	1000051e 	bne	r2,zero,8216ac <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  821698:	e0fffe17 	ldw	r3,-8(fp)
  82169c:	00800044 	movi	r2,1
  8216a0:	18800005 	stb	r2,0(r3)
        return (0);
  8216a4:	e03fff15 	stw	zero,-4(fp)
  8216a8:	00003a06 	br	821794 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8216ac:	0005303a 	rdctl	r2,status
  8216b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8216b4:	e0fff917 	ldw	r3,-28(fp)
  8216b8:	00bfff84 	movi	r2,-2
  8216bc:	1884703a 	and	r2,r3,r2
  8216c0:	1001703a 	wrctl	status,r2
  
  return context;
  8216c4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  8216c8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  8216cc:	e0bffc17 	ldw	r2,-16(fp)
  8216d0:	10800283 	ldbu	r2,10(r2)
  8216d4:	10803fcc 	andi	r2,r2,255
  8216d8:	1005003a 	cmpeq	r2,r2,zero
  8216dc:	1000261e 	bne	r2,zero,821778 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
  8216e0:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  8216e4:	e0bffd03 	ldbu	r2,-12(fp)
  8216e8:	10800060 	cmpeqi	r2,r2,1
  8216ec:	1000091e 	bne	r2,zero,821714 <OSSemPendAbort+0xe4>
  8216f0:	00000e06 	br	82172c <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  8216f4:	e13ffc17 	ldw	r4,-16(fp)
  8216f8:	000b883a 	mov	r5,zero
  8216fc:	01800044 	movi	r6,1
  821700:	01c00084 	movi	r7,2
  821704:	081c8140 	call	81c814 <OS_EventTaskRdy>
                     nbr_tasks++;
  821708:	e0bffb03 	ldbu	r2,-20(fp)
  82170c:	10800044 	addi	r2,r2,1
  821710:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  821714:	e0bffc17 	ldw	r2,-16(fp)
  821718:	10800283 	ldbu	r2,10(r2)
  82171c:	10803fcc 	andi	r2,r2,255
  821720:	1004c03a 	cmpne	r2,r2,zero
  821724:	103ff31e 	bne	r2,zero,8216f4 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  821728:	00000806 	br	82174c <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  82172c:	e13ffc17 	ldw	r4,-16(fp)
  821730:	000b883a 	mov	r5,zero
  821734:	01800044 	movi	r6,1
  821738:	01c00084 	movi	r7,2
  82173c:	081c8140 	call	81c814 <OS_EventTaskRdy>
                 nbr_tasks++;
  821740:	e0bffb03 	ldbu	r2,-20(fp)
  821744:	10800044 	addi	r2,r2,1
  821748:	e0bffb05 	stb	r2,-20(fp)
  82174c:	e0bffa17 	ldw	r2,-24(fp)
  821750:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  821754:	e0bff817 	ldw	r2,-32(fp)
  821758:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  82175c:	081d2540 	call	81d254 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  821760:	e0fffe17 	ldw	r3,-8(fp)
  821764:	00800384 	movi	r2,14
  821768:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  82176c:	e0bffb03 	ldbu	r2,-20(fp)
  821770:	e0bfff15 	stw	r2,-4(fp)
  821774:	00000706 	br	821794 <OSSemPendAbort+0x164>
  821778:	e0bffa17 	ldw	r2,-24(fp)
  82177c:	e0bff715 	stw	r2,-36(fp)
  821780:	e0bff717 	ldw	r2,-36(fp)
  821784:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  821788:	e0bffe17 	ldw	r2,-8(fp)
  82178c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  821790:	e03fff15 	stw	zero,-4(fp)
  821794:	e0bfff17 	ldw	r2,-4(fp)
}
  821798:	e037883a 	mov	sp,fp
  82179c:	dfc00117 	ldw	ra,4(sp)
  8217a0:	df000017 	ldw	fp,0(sp)
  8217a4:	dec00204 	addi	sp,sp,8
  8217a8:	f800283a 	ret

008217ac <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  8217ac:	defff704 	addi	sp,sp,-36
  8217b0:	dfc00815 	stw	ra,32(sp)
  8217b4:	df000715 	stw	fp,28(sp)
  8217b8:	df000704 	addi	fp,sp,28
  8217bc:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8217c0:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8217c4:	e0bffe17 	ldw	r2,-8(fp)
  8217c8:	1004c03a 	cmpne	r2,r2,zero
  8217cc:	1000031e 	bne	r2,zero,8217dc <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
  8217d0:	00800104 	movi	r2,4
  8217d4:	e0bfff15 	stw	r2,-4(fp)
  8217d8:	00003806 	br	8218bc <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8217dc:	e0bffe17 	ldw	r2,-8(fp)
  8217e0:	10800003 	ldbu	r2,0(r2)
  8217e4:	10803fcc 	andi	r2,r2,255
  8217e8:	108000e0 	cmpeqi	r2,r2,3
  8217ec:	1000031e 	bne	r2,zero,8217fc <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
  8217f0:	00800044 	movi	r2,1
  8217f4:	e0bfff15 	stw	r2,-4(fp)
  8217f8:	00003006 	br	8218bc <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8217fc:	0005303a 	rdctl	r2,status
  821800:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  821804:	e0fffc17 	ldw	r3,-16(fp)
  821808:	00bfff84 	movi	r2,-2
  82180c:	1884703a 	and	r2,r3,r2
  821810:	1001703a 	wrctl	status,r2
  
  return context;
  821814:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  821818:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  82181c:	e0bffe17 	ldw	r2,-8(fp)
  821820:	10800283 	ldbu	r2,10(r2)
  821824:	10803fcc 	andi	r2,r2,255
  821828:	1005003a 	cmpeq	r2,r2,zero
  82182c:	10000c1e 	bne	r2,zero,821860 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  821830:	e13ffe17 	ldw	r4,-8(fp)
  821834:	000b883a 	mov	r5,zero
  821838:	01800044 	movi	r6,1
  82183c:	000f883a 	mov	r7,zero
  821840:	081c8140 	call	81c814 <OS_EventTaskRdy>
  821844:	e0bffd17 	ldw	r2,-12(fp)
  821848:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82184c:	e0bffb17 	ldw	r2,-20(fp)
  821850:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  821854:	081d2540 	call	81d254 <OS_Sched>
        return (OS_ERR_NONE);
  821858:	e03fff15 	stw	zero,-4(fp)
  82185c:	00001706 	br	8218bc <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  821860:	e0bffe17 	ldw	r2,-8(fp)
  821864:	1080020b 	ldhu	r2,8(r2)
  821868:	10ffffcc 	andi	r3,r2,65535
  82186c:	00bfffd4 	movui	r2,65535
  821870:	18800c26 	beq	r3,r2,8218a4 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  821874:	e0bffe17 	ldw	r2,-8(fp)
  821878:	1080020b 	ldhu	r2,8(r2)
  82187c:	10800044 	addi	r2,r2,1
  821880:	1007883a 	mov	r3,r2
  821884:	e0bffe17 	ldw	r2,-8(fp)
  821888:	10c0020d 	sth	r3,8(r2)
  82188c:	e0bffd17 	ldw	r2,-12(fp)
  821890:	e0bffa15 	stw	r2,-24(fp)
  821894:	e0bffa17 	ldw	r2,-24(fp)
  821898:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  82189c:	e03fff15 	stw	zero,-4(fp)
  8218a0:	00000606 	br	8218bc <OSSemPost+0x110>
  8218a4:	e0bffd17 	ldw	r2,-12(fp)
  8218a8:	e0bff915 	stw	r2,-28(fp)
  8218ac:	e0bff917 	ldw	r2,-28(fp)
  8218b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  8218b4:	00800c84 	movi	r2,50
  8218b8:	e0bfff15 	stw	r2,-4(fp)
  8218bc:	e0bfff17 	ldw	r2,-4(fp)
}
  8218c0:	e037883a 	mov	sp,fp
  8218c4:	dfc00117 	ldw	ra,4(sp)
  8218c8:	df000017 	ldw	fp,0(sp)
  8218cc:	dec00204 	addi	sp,sp,8
  8218d0:	f800283a 	ret

008218d4 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  8218d4:	defff604 	addi	sp,sp,-40
  8218d8:	df000915 	stw	fp,36(sp)
  8218dc:	df000904 	addi	fp,sp,36
  8218e0:	e13ffd15 	stw	r4,-12(fp)
  8218e4:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8218e8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  8218ec:	e0bffd17 	ldw	r2,-12(fp)
  8218f0:	1004c03a 	cmpne	r2,r2,zero
  8218f4:	1000031e 	bne	r2,zero,821904 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  8218f8:	00800104 	movi	r2,4
  8218fc:	e0bfff15 	stw	r2,-4(fp)
  821900:	00003b06 	br	8219f0 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  821904:	e0bffe17 	ldw	r2,-8(fp)
  821908:	1004c03a 	cmpne	r2,r2,zero
  82190c:	1000031e 	bne	r2,zero,82191c <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  821910:	00800244 	movi	r2,9
  821914:	e0bfff15 	stw	r2,-4(fp)
  821918:	00003506 	br	8219f0 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  82191c:	e0bffd17 	ldw	r2,-12(fp)
  821920:	10800003 	ldbu	r2,0(r2)
  821924:	10803fcc 	andi	r2,r2,255
  821928:	108000e0 	cmpeqi	r2,r2,3
  82192c:	1000031e 	bne	r2,zero,82193c <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  821930:	00800044 	movi	r2,1
  821934:	e0bfff15 	stw	r2,-4(fp)
  821938:	00002d06 	br	8219f0 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82193c:	0005303a 	rdctl	r2,status
  821940:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  821944:	e0fff817 	ldw	r3,-32(fp)
  821948:	00bfff84 	movi	r2,-2
  82194c:	1884703a 	and	r2,r3,r2
  821950:	1001703a 	wrctl	status,r2
  
  return context;
  821954:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  821958:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  82195c:	e0bffd17 	ldw	r2,-12(fp)
  821960:	10c00283 	ldbu	r3,10(r2)
  821964:	e0bffe17 	ldw	r2,-8(fp)
  821968:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  82196c:	e0bffd17 	ldw	r2,-12(fp)
  821970:	108002c4 	addi	r2,r2,11
  821974:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  821978:	e0bffe17 	ldw	r2,-8(fp)
  82197c:	10800084 	addi	r2,r2,2
  821980:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  821984:	e03ffa05 	stb	zero,-24(fp)
  821988:	00000d06 	br	8219c0 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
  82198c:	e0bffc17 	ldw	r2,-16(fp)
  821990:	10c00003 	ldbu	r3,0(r2)
  821994:	e0bffb17 	ldw	r2,-20(fp)
  821998:	10c00005 	stb	r3,0(r2)
  82199c:	e0bffb17 	ldw	r2,-20(fp)
  8219a0:	10800044 	addi	r2,r2,1
  8219a4:	e0bffb15 	stw	r2,-20(fp)
  8219a8:	e0bffc17 	ldw	r2,-16(fp)
  8219ac:	10800044 	addi	r2,r2,1
  8219b0:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  8219b4:	e0bffa03 	ldbu	r2,-24(fp)
  8219b8:	10800044 	addi	r2,r2,1
  8219bc:	e0bffa05 	stb	r2,-24(fp)
  8219c0:	e0bffa03 	ldbu	r2,-24(fp)
  8219c4:	108000f0 	cmpltui	r2,r2,3
  8219c8:	103ff01e 	bne	r2,zero,82198c <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  8219cc:	e0bffd17 	ldw	r2,-12(fp)
  8219d0:	10c0020b 	ldhu	r3,8(r2)
  8219d4:	e0bffe17 	ldw	r2,-8(fp)
  8219d8:	10c0000d 	sth	r3,0(r2)
  8219dc:	e0bff917 	ldw	r2,-28(fp)
  8219e0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8219e4:	e0bff717 	ldw	r2,-36(fp)
  8219e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8219ec:	e03fff15 	stw	zero,-4(fp)
  8219f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8219f4:	e037883a 	mov	sp,fp
  8219f8:	df000017 	ldw	fp,0(sp)
  8219fc:	dec00104 	addi	sp,sp,4
  821a00:	f800283a 	ret

00821a04 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  821a04:	defff904 	addi	sp,sp,-28
  821a08:	df000615 	stw	fp,24(sp)
  821a0c:	df000604 	addi	fp,sp,24
  821a10:	e13ffd15 	stw	r4,-12(fp)
  821a14:	e1bfff15 	stw	r6,-4(fp)
  821a18:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  821a1c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  821a20:	e0bfff17 	ldw	r2,-4(fp)
  821a24:	1005003a 	cmpeq	r2,r2,zero
  821a28:	1000331e 	bne	r2,zero,821af8 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  821a2c:	e0bffd17 	ldw	r2,-12(fp)
  821a30:	1004c03a 	cmpne	r2,r2,zero
  821a34:	1000041e 	bne	r2,zero,821a48 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  821a38:	e0ffff17 	ldw	r3,-4(fp)
  821a3c:	00800104 	movi	r2,4
  821a40:	18800005 	stb	r2,0(r3)
        return;
  821a44:	00002c06 	br	821af8 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  821a48:	e0bffd17 	ldw	r2,-12(fp)
  821a4c:	10800003 	ldbu	r2,0(r2)
  821a50:	10803fcc 	andi	r2,r2,255
  821a54:	108000e0 	cmpeqi	r2,r2,3
  821a58:	1000041e 	bne	r2,zero,821a6c <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  821a5c:	e0ffff17 	ldw	r3,-4(fp)
  821a60:	00800044 	movi	r2,1
  821a64:	18800005 	stb	r2,0(r3)
        return;
  821a68:	00002306 	br	821af8 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  821a6c:	0005303a 	rdctl	r2,status
  821a70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  821a74:	e0fffb17 	ldw	r3,-20(fp)
  821a78:	00bfff84 	movi	r2,-2
  821a7c:	1884703a 	and	r2,r3,r2
  821a80:	1001703a 	wrctl	status,r2
  
  return context;
  821a84:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  821a88:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
  821a8c:	e0bfff17 	ldw	r2,-4(fp)
  821a90:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  821a94:	e0bffd17 	ldw	r2,-12(fp)
  821a98:	1080020b 	ldhu	r2,8(r2)
  821a9c:	10bfffcc 	andi	r2,r2,65535
  821aa0:	1005003a 	cmpeq	r2,r2,zero
  821aa4:	1000041e 	bne	r2,zero,821ab8 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  821aa8:	e0fffd17 	ldw	r3,-12(fp)
  821aac:	e0bffe0b 	ldhu	r2,-8(fp)
  821ab0:	1880020d 	sth	r2,8(r3)
  821ab4:	00000c06 	br	821ae8 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  821ab8:	e0bffd17 	ldw	r2,-12(fp)
  821abc:	10800283 	ldbu	r2,10(r2)
  821ac0:	10803fcc 	andi	r2,r2,255
  821ac4:	1004c03a 	cmpne	r2,r2,zero
  821ac8:	1000041e 	bne	r2,zero,821adc <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  821acc:	e0fffd17 	ldw	r3,-12(fp)
  821ad0:	e0bffe0b 	ldhu	r2,-8(fp)
  821ad4:	1880020d 	sth	r2,8(r3)
  821ad8:	00000306 	br	821ae8 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  821adc:	e0ffff17 	ldw	r3,-4(fp)
  821ae0:	00801244 	movi	r2,73
  821ae4:	18800005 	stb	r2,0(r3)
  821ae8:	e0bffc17 	ldw	r2,-16(fp)
  821aec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  821af0:	e0bffa17 	ldw	r2,-24(fp)
  821af4:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
  821af8:	e037883a 	mov	sp,fp
  821afc:	df000017 	ldw	fp,0(sp)
  821b00:	dec00104 	addi	sp,sp,4
  821b04:	f800283a 	ret

00821b08 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  821b08:	defff004 	addi	sp,sp,-64
  821b0c:	dfc00f15 	stw	ra,60(sp)
  821b10:	df000e15 	stw	fp,56(sp)
  821b14:	df000e04 	addi	fp,sp,56
  821b18:	e13ffd05 	stb	r4,-12(fp)
  821b1c:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  821b20:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  821b24:	e0bffd03 	ldbu	r2,-12(fp)
  821b28:	10800530 	cmpltui	r2,r2,20
  821b2c:	1000061e 	bne	r2,zero,821b48 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
  821b30:	e0bffd03 	ldbu	r2,-12(fp)
  821b34:	10803fe0 	cmpeqi	r2,r2,255
  821b38:	1000031e 	bne	r2,zero,821b48 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
  821b3c:	00800a84 	movi	r2,42
  821b40:	e0bfff15 	stw	r2,-4(fp)
  821b44:	00014706 	br	822064 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  821b48:	e0bffe03 	ldbu	r2,-8(fp)
  821b4c:	10800530 	cmpltui	r2,r2,20
  821b50:	1000031e 	bne	r2,zero,821b60 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  821b54:	00800a84 	movi	r2,42
  821b58:	e0bfff15 	stw	r2,-4(fp)
  821b5c:	00014106 	br	822064 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  821b60:	0005303a 	rdctl	r2,status
  821b64:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  821b68:	e0fff617 	ldw	r3,-40(fp)
  821b6c:	00bfff84 	movi	r2,-2
  821b70:	1884703a 	and	r2,r3,r2
  821b74:	1001703a 	wrctl	status,r2
  
  return context;
  821b78:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  821b7c:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  821b80:	e0bffe03 	ldbu	r2,-8(fp)
  821b84:	00c02534 	movhi	r3,148
  821b88:	18f74604 	addi	r3,r3,-8936
  821b8c:	1085883a 	add	r2,r2,r2
  821b90:	1085883a 	add	r2,r2,r2
  821b94:	10c5883a 	add	r2,r2,r3
  821b98:	10800017 	ldw	r2,0(r2)
  821b9c:	1005003a 	cmpeq	r2,r2,zero
  821ba0:	1000071e 	bne	r2,zero,821bc0 <OSTaskChangePrio+0xb8>
  821ba4:	e0bff717 	ldw	r2,-36(fp)
  821ba8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  821bac:	e0bff517 	ldw	r2,-44(fp)
  821bb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  821bb4:	00800a04 	movi	r2,40
  821bb8:	e0bfff15 	stw	r2,-4(fp)
  821bbc:	00012906 	br	822064 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  821bc0:	e0bffd03 	ldbu	r2,-12(fp)
  821bc4:	10803fd8 	cmpnei	r2,r2,255
  821bc8:	1000051e 	bne	r2,zero,821be0 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  821bcc:	008020f4 	movhi	r2,131
  821bd0:	10a9ed04 	addi	r2,r2,-22604
  821bd4:	10800017 	ldw	r2,0(r2)
  821bd8:	10800c83 	ldbu	r2,50(r2)
  821bdc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  821be0:	e0bffd03 	ldbu	r2,-12(fp)
  821be4:	00c02534 	movhi	r3,148
  821be8:	18f74604 	addi	r3,r3,-8936
  821bec:	1085883a 	add	r2,r2,r2
  821bf0:	1085883a 	add	r2,r2,r2
  821bf4:	10c5883a 	add	r2,r2,r3
  821bf8:	10800017 	ldw	r2,0(r2)
  821bfc:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  821c00:	e0bffa17 	ldw	r2,-24(fp)
  821c04:	1004c03a 	cmpne	r2,r2,zero
  821c08:	1000071e 	bne	r2,zero,821c28 <OSTaskChangePrio+0x120>
  821c0c:	e0bff717 	ldw	r2,-36(fp)
  821c10:	e0bff415 	stw	r2,-48(fp)
  821c14:	e0bff417 	ldw	r2,-48(fp)
  821c18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  821c1c:	00800a44 	movi	r2,41
  821c20:	e0bfff15 	stw	r2,-4(fp)
  821c24:	00010f06 	br	822064 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  821c28:	e0bffa17 	ldw	r2,-24(fp)
  821c2c:	10800058 	cmpnei	r2,r2,1
  821c30:	1000071e 	bne	r2,zero,821c50 <OSTaskChangePrio+0x148>
  821c34:	e0bff717 	ldw	r2,-36(fp)
  821c38:	e0bff315 	stw	r2,-52(fp)
  821c3c:	e0bff317 	ldw	r2,-52(fp)
  821c40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  821c44:	008010c4 	movi	r2,67
  821c48:	e0bfff15 	stw	r2,-4(fp)
  821c4c:	00010506 	br	822064 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  821c50:	e0bffe03 	ldbu	r2,-8(fp)
  821c54:	1004d0fa 	srli	r2,r2,3
  821c58:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  821c5c:	e0bffe03 	ldbu	r2,-8(fp)
  821c60:	108001cc 	andi	r2,r2,7
  821c64:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
  821c68:	e0fff983 	ldbu	r3,-26(fp)
  821c6c:	00800044 	movi	r2,1
  821c70:	10c4983a 	sll	r2,r2,r3
  821c74:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
  821c78:	e0fff943 	ldbu	r3,-27(fp)
  821c7c:	00800044 	movi	r2,1
  821c80:	10c4983a 	sll	r2,r2,r3
  821c84:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  821c88:	e0bffd03 	ldbu	r2,-12(fp)
  821c8c:	00c02534 	movhi	r3,148
  821c90:	18f74604 	addi	r3,r3,-8936
  821c94:	1085883a 	add	r2,r2,r2
  821c98:	1085883a 	add	r2,r2,r2
  821c9c:	10c5883a 	add	r2,r2,r3
  821ca0:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  821ca4:	e0bffe03 	ldbu	r2,-8(fp)
  821ca8:	00c02534 	movhi	r3,148
  821cac:	18f74604 	addi	r3,r3,-8936
  821cb0:	1085883a 	add	r2,r2,r2
  821cb4:	1085883a 	add	r2,r2,r2
  821cb8:	10c7883a 	add	r3,r2,r3
  821cbc:	e0bffa17 	ldw	r2,-24(fp)
  821cc0:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
  821cc4:	e0bffa17 	ldw	r2,-24(fp)
  821cc8:	10800d03 	ldbu	r2,52(r2)
  821ccc:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
  821cd0:	e0bffa17 	ldw	r2,-24(fp)
  821cd4:	10800d83 	ldbu	r2,54(r2)
  821cd8:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  821cdc:	e0bffa17 	ldw	r2,-24(fp)
  821ce0:	10800d43 	ldbu	r2,53(r2)
  821ce4:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  821ce8:	e0fff903 	ldbu	r3,-28(fp)
  821cec:	008020f4 	movhi	r2,131
  821cf0:	10a9ea44 	addi	r2,r2,-22615
  821cf4:	10c5883a 	add	r2,r2,r3
  821cf8:	10c00003 	ldbu	r3,0(r2)
  821cfc:	e0bff803 	ldbu	r2,-32(fp)
  821d00:	1884703a 	and	r2,r3,r2
  821d04:	10803fcc 	andi	r2,r2,255
  821d08:	1005003a 	cmpeq	r2,r2,zero
  821d0c:	1000381e 	bne	r2,zero,821df0 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
  821d10:	e13ff903 	ldbu	r4,-28(fp)
  821d14:	e0fff903 	ldbu	r3,-28(fp)
  821d18:	008020f4 	movhi	r2,131
  821d1c:	10a9ea44 	addi	r2,r2,-22615
  821d20:	10c5883a 	add	r2,r2,r3
  821d24:	10800003 	ldbu	r2,0(r2)
  821d28:	1007883a 	mov	r3,r2
  821d2c:	e0bff803 	ldbu	r2,-32(fp)
  821d30:	0084303a 	nor	r2,zero,r2
  821d34:	1884703a 	and	r2,r3,r2
  821d38:	1007883a 	mov	r3,r2
  821d3c:	008020f4 	movhi	r2,131
  821d40:	10a9ea44 	addi	r2,r2,-22615
  821d44:	1105883a 	add	r2,r2,r4
  821d48:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  821d4c:	e0fff903 	ldbu	r3,-28(fp)
  821d50:	008020f4 	movhi	r2,131
  821d54:	10a9ea44 	addi	r2,r2,-22615
  821d58:	10c5883a 	add	r2,r2,r3
  821d5c:	10800003 	ldbu	r2,0(r2)
  821d60:	10803fcc 	andi	r2,r2,255
  821d64:	1004c03a 	cmpne	r2,r2,zero
  821d68:	10000b1e 	bne	r2,zero,821d98 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
  821d6c:	e0bff843 	ldbu	r2,-31(fp)
  821d70:	0084303a 	nor	r2,zero,r2
  821d74:	1007883a 	mov	r3,r2
  821d78:	008020f4 	movhi	r2,131
  821d7c:	10a9ea04 	addi	r2,r2,-22616
  821d80:	10800003 	ldbu	r2,0(r2)
  821d84:	1884703a 	and	r2,r3,r2
  821d88:	1007883a 	mov	r3,r2
  821d8c:	008020f4 	movhi	r2,131
  821d90:	10a9ea04 	addi	r2,r2,-22616
  821d94:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  821d98:	008020f4 	movhi	r2,131
  821d9c:	10a9ea04 	addi	r2,r2,-22616
  821da0:	10c00003 	ldbu	r3,0(r2)
  821da4:	e0bff8c3 	ldbu	r2,-29(fp)
  821da8:	1884b03a 	or	r2,r3,r2
  821dac:	1007883a 	mov	r3,r2
  821db0:	008020f4 	movhi	r2,131
  821db4:	10a9ea04 	addi	r2,r2,-22616
  821db8:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
  821dbc:	e13ff983 	ldbu	r4,-26(fp)
  821dc0:	e0fff983 	ldbu	r3,-26(fp)
  821dc4:	008020f4 	movhi	r2,131
  821dc8:	10a9ea44 	addi	r2,r2,-22615
  821dcc:	10c5883a 	add	r2,r2,r3
  821dd0:	10c00003 	ldbu	r3,0(r2)
  821dd4:	e0bff883 	ldbu	r2,-30(fp)
  821dd8:	1884b03a 	or	r2,r3,r2
  821ddc:	1007883a 	mov	r3,r2
  821de0:	008020f4 	movhi	r2,131
  821de4:	10a9ea44 	addi	r2,r2,-22615
  821de8:	1105883a 	add	r2,r2,r4
  821dec:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  821df0:	e0bffa17 	ldw	r2,-24(fp)
  821df4:	10800717 	ldw	r2,28(r2)
  821df8:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
  821dfc:	e0bffc17 	ldw	r2,-16(fp)
  821e00:	1005003a 	cmpeq	r2,r2,zero
  821e04:	1000341e 	bne	r2,zero,821ed8 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  821e08:	e13ff903 	ldbu	r4,-28(fp)
  821e0c:	e0fff903 	ldbu	r3,-28(fp)
  821e10:	e0bffc17 	ldw	r2,-16(fp)
  821e14:	1885883a 	add	r2,r3,r2
  821e18:	10800204 	addi	r2,r2,8
  821e1c:	108000c3 	ldbu	r2,3(r2)
  821e20:	1007883a 	mov	r3,r2
  821e24:	e0bff803 	ldbu	r2,-32(fp)
  821e28:	0084303a 	nor	r2,zero,r2
  821e2c:	1884703a 	and	r2,r3,r2
  821e30:	1007883a 	mov	r3,r2
  821e34:	e0bffc17 	ldw	r2,-16(fp)
  821e38:	2085883a 	add	r2,r4,r2
  821e3c:	10800204 	addi	r2,r2,8
  821e40:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  821e44:	e0fff903 	ldbu	r3,-28(fp)
  821e48:	e0bffc17 	ldw	r2,-16(fp)
  821e4c:	1885883a 	add	r2,r3,r2
  821e50:	10800204 	addi	r2,r2,8
  821e54:	108000c3 	ldbu	r2,3(r2)
  821e58:	10803fcc 	andi	r2,r2,255
  821e5c:	1004c03a 	cmpne	r2,r2,zero
  821e60:	1000091e 	bne	r2,zero,821e88 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
  821e64:	e0bffc17 	ldw	r2,-16(fp)
  821e68:	10800283 	ldbu	r2,10(r2)
  821e6c:	1007883a 	mov	r3,r2
  821e70:	e0bff843 	ldbu	r2,-31(fp)
  821e74:	0084303a 	nor	r2,zero,r2
  821e78:	1884703a 	and	r2,r3,r2
  821e7c:	1007883a 	mov	r3,r2
  821e80:	e0bffc17 	ldw	r2,-16(fp)
  821e84:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  821e88:	e0bffc17 	ldw	r2,-16(fp)
  821e8c:	10c00283 	ldbu	r3,10(r2)
  821e90:	e0bff8c3 	ldbu	r2,-29(fp)
  821e94:	1884b03a 	or	r2,r3,r2
  821e98:	1007883a 	mov	r3,r2
  821e9c:	e0bffc17 	ldw	r2,-16(fp)
  821ea0:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  821ea4:	e13ff983 	ldbu	r4,-26(fp)
  821ea8:	e0fff983 	ldbu	r3,-26(fp)
  821eac:	e0bffc17 	ldw	r2,-16(fp)
  821eb0:	1885883a 	add	r2,r3,r2
  821eb4:	10800204 	addi	r2,r2,8
  821eb8:	10c000c3 	ldbu	r3,3(r2)
  821ebc:	e0bff883 	ldbu	r2,-30(fp)
  821ec0:	1884b03a 	or	r2,r3,r2
  821ec4:	1007883a 	mov	r3,r2
  821ec8:	e0bffc17 	ldw	r2,-16(fp)
  821ecc:	2085883a 	add	r2,r4,r2
  821ed0:	10800204 	addi	r2,r2,8
  821ed4:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  821ed8:	e0bffa17 	ldw	r2,-24(fp)
  821edc:	10800817 	ldw	r2,32(r2)
  821ee0:	1005003a 	cmpeq	r2,r2,zero
  821ee4:	1000441e 	bne	r2,zero,821ff8 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
  821ee8:	e0bffa17 	ldw	r2,-24(fp)
  821eec:	10800817 	ldw	r2,32(r2)
  821ef0:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
  821ef4:	e0bffb17 	ldw	r2,-20(fp)
  821ef8:	10800017 	ldw	r2,0(r2)
  821efc:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
  821f00:	00003a06 	br	821fec <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  821f04:	e13ff903 	ldbu	r4,-28(fp)
  821f08:	e0fff903 	ldbu	r3,-28(fp)
  821f0c:	e0bffc17 	ldw	r2,-16(fp)
  821f10:	1885883a 	add	r2,r3,r2
  821f14:	10800204 	addi	r2,r2,8
  821f18:	108000c3 	ldbu	r2,3(r2)
  821f1c:	1007883a 	mov	r3,r2
  821f20:	e0bff803 	ldbu	r2,-32(fp)
  821f24:	0084303a 	nor	r2,zero,r2
  821f28:	1884703a 	and	r2,r3,r2
  821f2c:	1007883a 	mov	r3,r2
  821f30:	e0bffc17 	ldw	r2,-16(fp)
  821f34:	2085883a 	add	r2,r4,r2
  821f38:	10800204 	addi	r2,r2,8
  821f3c:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  821f40:	e0fff903 	ldbu	r3,-28(fp)
  821f44:	e0bffc17 	ldw	r2,-16(fp)
  821f48:	1885883a 	add	r2,r3,r2
  821f4c:	10800204 	addi	r2,r2,8
  821f50:	108000c3 	ldbu	r2,3(r2)
  821f54:	10803fcc 	andi	r2,r2,255
  821f58:	1004c03a 	cmpne	r2,r2,zero
  821f5c:	1000091e 	bne	r2,zero,821f84 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
  821f60:	e0bffc17 	ldw	r2,-16(fp)
  821f64:	10800283 	ldbu	r2,10(r2)
  821f68:	1007883a 	mov	r3,r2
  821f6c:	e0bff843 	ldbu	r2,-31(fp)
  821f70:	0084303a 	nor	r2,zero,r2
  821f74:	1884703a 	and	r2,r3,r2
  821f78:	1007883a 	mov	r3,r2
  821f7c:	e0bffc17 	ldw	r2,-16(fp)
  821f80:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  821f84:	e0bffc17 	ldw	r2,-16(fp)
  821f88:	10c00283 	ldbu	r3,10(r2)
  821f8c:	e0bff8c3 	ldbu	r2,-29(fp)
  821f90:	1884b03a 	or	r2,r3,r2
  821f94:	1007883a 	mov	r3,r2
  821f98:	e0bffc17 	ldw	r2,-16(fp)
  821f9c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  821fa0:	e13ff983 	ldbu	r4,-26(fp)
  821fa4:	e0fff983 	ldbu	r3,-26(fp)
  821fa8:	e0bffc17 	ldw	r2,-16(fp)
  821fac:	1885883a 	add	r2,r3,r2
  821fb0:	10800204 	addi	r2,r2,8
  821fb4:	10c000c3 	ldbu	r3,3(r2)
  821fb8:	e0bff883 	ldbu	r2,-30(fp)
  821fbc:	1884b03a 	or	r2,r3,r2
  821fc0:	1007883a 	mov	r3,r2
  821fc4:	e0bffc17 	ldw	r2,-16(fp)
  821fc8:	2085883a 	add	r2,r4,r2
  821fcc:	10800204 	addi	r2,r2,8
  821fd0:	10c000c5 	stb	r3,3(r2)
            pevents++;
  821fd4:	e0bffb17 	ldw	r2,-20(fp)
  821fd8:	10800104 	addi	r2,r2,4
  821fdc:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
  821fe0:	e0bffb17 	ldw	r2,-20(fp)
  821fe4:	10800017 	ldw	r2,0(r2)
  821fe8:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  821fec:	e0bffc17 	ldw	r2,-16(fp)
  821ff0:	1004c03a 	cmpne	r2,r2,zero
  821ff4:	103fc31e 	bne	r2,zero,821f04 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  821ff8:	e0fffa17 	ldw	r3,-24(fp)
  821ffc:	e0bffe03 	ldbu	r2,-8(fp)
  822000:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
  822004:	e0fffa17 	ldw	r3,-24(fp)
  822008:	e0bff983 	ldbu	r2,-26(fp)
  82200c:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
  822010:	e0fffa17 	ldw	r3,-24(fp)
  822014:	e0bff943 	ldbu	r2,-27(fp)
  822018:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
  82201c:	e0fffa17 	ldw	r3,-24(fp)
  822020:	e0bff8c3 	ldbu	r2,-29(fp)
  822024:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
  822028:	e0fffa17 	ldw	r3,-24(fp)
  82202c:	e0bff883 	ldbu	r2,-30(fp)
  822030:	18800d45 	stb	r2,53(r3)
  822034:	e0bff717 	ldw	r2,-36(fp)
  822038:	e0bff215 	stw	r2,-56(fp)
  82203c:	e0bff217 	ldw	r2,-56(fp)
  822040:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  822044:	008020f4 	movhi	r2,131
  822048:	10a9de44 	addi	r2,r2,-22663
  82204c:	10800003 	ldbu	r2,0(r2)
  822050:	10803fcc 	andi	r2,r2,255
  822054:	10800058 	cmpnei	r2,r2,1
  822058:	1000011e 	bne	r2,zero,822060 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
  82205c:	081d2540 	call	81d254 <OS_Sched>
    }
    return (OS_ERR_NONE);
  822060:	e03fff15 	stw	zero,-4(fp)
  822064:	e0bfff17 	ldw	r2,-4(fp)
}
  822068:	e037883a 	mov	sp,fp
  82206c:	dfc00117 	ldw	ra,4(sp)
  822070:	df000017 	ldw	fp,0(sp)
  822074:	dec00204 	addi	sp,sp,8
  822078:	f800283a 	ret

0082207c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  82207c:	deffed04 	addi	sp,sp,-76
  822080:	dfc01215 	stw	ra,72(sp)
  822084:	df001115 	stw	fp,68(sp)
  822088:	df001104 	addi	fp,sp,68
  82208c:	e13ffb15 	stw	r4,-20(fp)
  822090:	e17ffc15 	stw	r5,-16(fp)
  822094:	e1bffd15 	stw	r6,-12(fp)
  822098:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  82209c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  8220a0:	e0bffe03 	ldbu	r2,-8(fp)
  8220a4:	10800570 	cmpltui	r2,r2,21
  8220a8:	1000031e 	bne	r2,zero,8220b8 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  8220ac:	00800a84 	movi	r2,42
  8220b0:	e0bfff15 	stw	r2,-4(fp)
  8220b4:	00006006 	br	822238 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8220b8:	0005303a 	rdctl	r2,status
  8220bc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8220c0:	e0fff717 	ldw	r3,-36(fp)
  8220c4:	00bfff84 	movi	r2,-2
  8220c8:	1884703a 	and	r2,r3,r2
  8220cc:	1001703a 	wrctl	status,r2
  
  return context;
  8220d0:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8220d4:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  8220d8:	008020f4 	movhi	r2,131
  8220dc:	10a9ec04 	addi	r2,r2,-22608
  8220e0:	10800003 	ldbu	r2,0(r2)
  8220e4:	10803fcc 	andi	r2,r2,255
  8220e8:	1005003a 	cmpeq	r2,r2,zero
  8220ec:	1000071e 	bne	r2,zero,82210c <OSTaskCreate+0x90>
  8220f0:	e0bff817 	ldw	r2,-32(fp)
  8220f4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8220f8:	e0bff617 	ldw	r2,-40(fp)
  8220fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  822100:	00800f04 	movi	r2,60
  822104:	e0bfff15 	stw	r2,-4(fp)
  822108:	00004b06 	br	822238 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  82210c:	e0bffe03 	ldbu	r2,-8(fp)
  822110:	00c02534 	movhi	r3,148
  822114:	18f74604 	addi	r3,r3,-8936
  822118:	1085883a 	add	r2,r2,r2
  82211c:	1085883a 	add	r2,r2,r2
  822120:	10c5883a 	add	r2,r2,r3
  822124:	10800017 	ldw	r2,0(r2)
  822128:	1004c03a 	cmpne	r2,r2,zero
  82212c:	10003c1e 	bne	r2,zero,822220 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  822130:	e0bffe03 	ldbu	r2,-8(fp)
  822134:	00c02534 	movhi	r3,148
  822138:	18f74604 	addi	r3,r3,-8936
  82213c:	1085883a 	add	r2,r2,r2
  822140:	1085883a 	add	r2,r2,r2
  822144:	10c7883a 	add	r3,r2,r3
  822148:	00800044 	movi	r2,1
  82214c:	18800015 	stw	r2,0(r3)
  822150:	e0bff817 	ldw	r2,-32(fp)
  822154:	e0bff515 	stw	r2,-44(fp)
  822158:	e0bff517 	ldw	r2,-44(fp)
  82215c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  822160:	e13ffb17 	ldw	r4,-20(fp)
  822164:	e17ffc17 	ldw	r5,-16(fp)
  822168:	e1bffd17 	ldw	r6,-12(fp)
  82216c:	000f883a 	mov	r7,zero
  822170:	0826a980 	call	826a98 <OSTaskStkInit>
  822174:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  822178:	e13ffe03 	ldbu	r4,-8(fp)
  82217c:	d8000015 	stw	zero,0(sp)
  822180:	d8000115 	stw	zero,4(sp)
  822184:	d8000215 	stw	zero,8(sp)
  822188:	e17ffa17 	ldw	r5,-24(fp)
  82218c:	000d883a 	mov	r6,zero
  822190:	000f883a 	mov	r7,zero
  822194:	081d65c0 	call	81d65c <OS_TCBInit>
  822198:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
  82219c:	e0bff903 	ldbu	r2,-28(fp)
  8221a0:	1004c03a 	cmpne	r2,r2,zero
  8221a4:	1000081e 	bne	r2,zero,8221c8 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  8221a8:	008020f4 	movhi	r2,131
  8221ac:	10a9de44 	addi	r2,r2,-22663
  8221b0:	10800003 	ldbu	r2,0(r2)
  8221b4:	10803fcc 	andi	r2,r2,255
  8221b8:	10800058 	cmpnei	r2,r2,1
  8221bc:	1000151e 	bne	r2,zero,822214 <OSTaskCreate+0x198>
                OS_Sched();
  8221c0:	081d2540 	call	81d254 <OS_Sched>
  8221c4:	00001306 	br	822214 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8221c8:	0005303a 	rdctl	r2,status
  8221cc:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8221d0:	e0fff417 	ldw	r3,-48(fp)
  8221d4:	00bfff84 	movi	r2,-2
  8221d8:	1884703a 	and	r2,r3,r2
  8221dc:	1001703a 	wrctl	status,r2
  
  return context;
  8221e0:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  8221e4:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  8221e8:	e0bffe03 	ldbu	r2,-8(fp)
  8221ec:	00c02534 	movhi	r3,148
  8221f0:	18f74604 	addi	r3,r3,-8936
  8221f4:	1085883a 	add	r2,r2,r2
  8221f8:	1085883a 	add	r2,r2,r2
  8221fc:	10c5883a 	add	r2,r2,r3
  822200:	10000015 	stw	zero,0(r2)
  822204:	e0bff817 	ldw	r2,-32(fp)
  822208:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82220c:	e0bff317 	ldw	r2,-52(fp)
  822210:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  822214:	e0bff903 	ldbu	r2,-28(fp)
  822218:	e0bfff15 	stw	r2,-4(fp)
  82221c:	00000606 	br	822238 <OSTaskCreate+0x1bc>
  822220:	e0bff817 	ldw	r2,-32(fp)
  822224:	e0bff215 	stw	r2,-56(fp)
  822228:	e0bff217 	ldw	r2,-56(fp)
  82222c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  822230:	00800a04 	movi	r2,40
  822234:	e0bfff15 	stw	r2,-4(fp)
  822238:	e0bfff17 	ldw	r2,-4(fp)
}
  82223c:	e037883a 	mov	sp,fp
  822240:	dfc00117 	ldw	ra,4(sp)
  822244:	df000017 	ldw	fp,0(sp)
  822248:	dec00204 	addi	sp,sp,8
  82224c:	f800283a 	ret

00822250 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  822250:	deffeb04 	addi	sp,sp,-84
  822254:	dfc01415 	stw	ra,80(sp)
  822258:	df001315 	stw	fp,76(sp)
  82225c:	df001304 	addi	fp,sp,76
  822260:	e13ff915 	stw	r4,-28(fp)
  822264:	e17ffa15 	stw	r5,-24(fp)
  822268:	e1bffb15 	stw	r6,-20(fp)
  82226c:	e0800217 	ldw	r2,8(fp)
  822270:	e0c00617 	ldw	r3,24(fp)
  822274:	e1fffc05 	stb	r7,-16(fp)
  822278:	e0bffd0d 	sth	r2,-12(fp)
  82227c:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  822280:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  822284:	e0bffc03 	ldbu	r2,-16(fp)
  822288:	10800570 	cmpltui	r2,r2,21
  82228c:	1000031e 	bne	r2,zero,82229c <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  822290:	00800a84 	movi	r2,42
  822294:	e0bfff15 	stw	r2,-4(fp)
  822298:	00006706 	br	822438 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82229c:	0005303a 	rdctl	r2,status
  8222a0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8222a4:	e0fff517 	ldw	r3,-44(fp)
  8222a8:	00bfff84 	movi	r2,-2
  8222ac:	1884703a 	and	r2,r3,r2
  8222b0:	1001703a 	wrctl	status,r2
  
  return context;
  8222b4:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8222b8:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  8222bc:	008020f4 	movhi	r2,131
  8222c0:	10a9ec04 	addi	r2,r2,-22608
  8222c4:	10800003 	ldbu	r2,0(r2)
  8222c8:	10803fcc 	andi	r2,r2,255
  8222cc:	1005003a 	cmpeq	r2,r2,zero
  8222d0:	1000071e 	bne	r2,zero,8222f0 <OSTaskCreateExt+0xa0>
  8222d4:	e0bff617 	ldw	r2,-40(fp)
  8222d8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8222dc:	e0bff417 	ldw	r2,-48(fp)
  8222e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  8222e4:	00800f04 	movi	r2,60
  8222e8:	e0bfff15 	stw	r2,-4(fp)
  8222ec:	00005206 	br	822438 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  8222f0:	e0bffc03 	ldbu	r2,-16(fp)
  8222f4:	00c02534 	movhi	r3,148
  8222f8:	18f74604 	addi	r3,r3,-8936
  8222fc:	1085883a 	add	r2,r2,r2
  822300:	1085883a 	add	r2,r2,r2
  822304:	10c5883a 	add	r2,r2,r3
  822308:	10800017 	ldw	r2,0(r2)
  82230c:	1004c03a 	cmpne	r2,r2,zero
  822310:	1000431e 	bne	r2,zero,822420 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  822314:	e0bffc03 	ldbu	r2,-16(fp)
  822318:	00c02534 	movhi	r3,148
  82231c:	18f74604 	addi	r3,r3,-8936
  822320:	1085883a 	add	r2,r2,r2
  822324:	1085883a 	add	r2,r2,r2
  822328:	10c7883a 	add	r3,r2,r3
  82232c:	00800044 	movi	r2,1
  822330:	18800015 	stw	r2,0(r3)
  822334:	e0bff617 	ldw	r2,-40(fp)
  822338:	e0bff315 	stw	r2,-52(fp)
  82233c:	e0bff317 	ldw	r2,-52(fp)
  822340:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  822344:	e1bffe0b 	ldhu	r6,-8(fp)
  822348:	e1000317 	ldw	r4,12(fp)
  82234c:	e1400417 	ldw	r5,16(fp)
  822350:	08234cc0 	call	8234cc <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  822354:	e1fffe0b 	ldhu	r7,-8(fp)
  822358:	e13ff917 	ldw	r4,-28(fp)
  82235c:	e17ffa17 	ldw	r5,-24(fp)
  822360:	e1bffb17 	ldw	r6,-20(fp)
  822364:	0826a980 	call	826a98 <OSTaskStkInit>
  822368:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  82236c:	e13ffc03 	ldbu	r4,-16(fp)
  822370:	e1fffd0b 	ldhu	r7,-12(fp)
  822374:	e0fffe0b 	ldhu	r3,-8(fp)
  822378:	e0800417 	ldw	r2,16(fp)
  82237c:	d8800015 	stw	r2,0(sp)
  822380:	e0800517 	ldw	r2,20(fp)
  822384:	d8800115 	stw	r2,4(sp)
  822388:	d8c00215 	stw	r3,8(sp)
  82238c:	e17ff817 	ldw	r5,-32(fp)
  822390:	e1800317 	ldw	r6,12(fp)
  822394:	081d65c0 	call	81d65c <OS_TCBInit>
  822398:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
  82239c:	e0bff703 	ldbu	r2,-36(fp)
  8223a0:	1004c03a 	cmpne	r2,r2,zero
  8223a4:	1000081e 	bne	r2,zero,8223c8 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  8223a8:	008020f4 	movhi	r2,131
  8223ac:	10a9de44 	addi	r2,r2,-22663
  8223b0:	10800003 	ldbu	r2,0(r2)
  8223b4:	10803fcc 	andi	r2,r2,255
  8223b8:	10800058 	cmpnei	r2,r2,1
  8223bc:	1000151e 	bne	r2,zero,822414 <OSTaskCreateExt+0x1c4>
                OS_Sched();
  8223c0:	081d2540 	call	81d254 <OS_Sched>
  8223c4:	00001306 	br	822414 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8223c8:	0005303a 	rdctl	r2,status
  8223cc:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8223d0:	e0fff217 	ldw	r3,-56(fp)
  8223d4:	00bfff84 	movi	r2,-2
  8223d8:	1884703a 	and	r2,r3,r2
  8223dc:	1001703a 	wrctl	status,r2
  
  return context;
  8223e0:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  8223e4:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  8223e8:	e0bffc03 	ldbu	r2,-16(fp)
  8223ec:	00c02534 	movhi	r3,148
  8223f0:	18f74604 	addi	r3,r3,-8936
  8223f4:	1085883a 	add	r2,r2,r2
  8223f8:	1085883a 	add	r2,r2,r2
  8223fc:	10c5883a 	add	r2,r2,r3
  822400:	10000015 	stw	zero,0(r2)
  822404:	e0bff617 	ldw	r2,-40(fp)
  822408:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82240c:	e0bff117 	ldw	r2,-60(fp)
  822410:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  822414:	e0bff703 	ldbu	r2,-36(fp)
  822418:	e0bfff15 	stw	r2,-4(fp)
  82241c:	00000606 	br	822438 <OSTaskCreateExt+0x1e8>
  822420:	e0bff617 	ldw	r2,-40(fp)
  822424:	e0bff015 	stw	r2,-64(fp)
  822428:	e0bff017 	ldw	r2,-64(fp)
  82242c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  822430:	00800a04 	movi	r2,40
  822434:	e0bfff15 	stw	r2,-4(fp)
  822438:	e0bfff17 	ldw	r2,-4(fp)
}
  82243c:	e037883a 	mov	sp,fp
  822440:	dfc00117 	ldw	ra,4(sp)
  822444:	df000017 	ldw	fp,0(sp)
  822448:	dec00204 	addi	sp,sp,8
  82244c:	f800283a 	ret

00822450 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  822450:	defff304 	addi	sp,sp,-52
  822454:	dfc00c15 	stw	ra,48(sp)
  822458:	df000b15 	stw	fp,44(sp)
  82245c:	df000b04 	addi	fp,sp,44
  822460:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  822464:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  822468:	008020f4 	movhi	r2,131
  82246c:	10a9ec04 	addi	r2,r2,-22608
  822470:	10800003 	ldbu	r2,0(r2)
  822474:	10803fcc 	andi	r2,r2,255
  822478:	1005003a 	cmpeq	r2,r2,zero
  82247c:	1000031e 	bne	r2,zero,82248c <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
  822480:	00801004 	movi	r2,64
  822484:	e0bfff15 	stw	r2,-4(fp)
  822488:	0000ee06 	br	822844 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  82248c:	e0bffe03 	ldbu	r2,-8(fp)
  822490:	10800518 	cmpnei	r2,r2,20
  822494:	1000031e 	bne	r2,zero,8224a4 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
  822498:	00800f84 	movi	r2,62
  82249c:	e0bfff15 	stw	r2,-4(fp)
  8224a0:	0000e806 	br	822844 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  8224a4:	e0bffe03 	ldbu	r2,-8(fp)
  8224a8:	10800530 	cmpltui	r2,r2,20
  8224ac:	1000061e 	bne	r2,zero,8224c8 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
  8224b0:	e0bffe03 	ldbu	r2,-8(fp)
  8224b4:	10803fe0 	cmpeqi	r2,r2,255
  8224b8:	1000031e 	bne	r2,zero,8224c8 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
  8224bc:	00800a84 	movi	r2,42
  8224c0:	e0bfff15 	stw	r2,-4(fp)
  8224c4:	0000df06 	br	822844 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8224c8:	0005303a 	rdctl	r2,status
  8224cc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8224d0:	e0fffa17 	ldw	r3,-24(fp)
  8224d4:	00bfff84 	movi	r2,-2
  8224d8:	1884703a 	and	r2,r3,r2
  8224dc:	1001703a 	wrctl	status,r2
  
  return context;
  8224e0:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  8224e4:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  8224e8:	e0bffe03 	ldbu	r2,-8(fp)
  8224ec:	10803fd8 	cmpnei	r2,r2,255
  8224f0:	1000051e 	bne	r2,zero,822508 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  8224f4:	008020f4 	movhi	r2,131
  8224f8:	10a9ed04 	addi	r2,r2,-22604
  8224fc:	10800017 	ldw	r2,0(r2)
  822500:	10800c83 	ldbu	r2,50(r2)
  822504:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  822508:	e0bffe03 	ldbu	r2,-8(fp)
  82250c:	00c02534 	movhi	r3,148
  822510:	18f74604 	addi	r3,r3,-8936
  822514:	1085883a 	add	r2,r2,r2
  822518:	1085883a 	add	r2,r2,r2
  82251c:	10c5883a 	add	r2,r2,r3
  822520:	10800017 	ldw	r2,0(r2)
  822524:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  822528:	e0bffc17 	ldw	r2,-16(fp)
  82252c:	1004c03a 	cmpne	r2,r2,zero
  822530:	1000071e 	bne	r2,zero,822550 <OSTaskDel+0x100>
  822534:	e0bffb17 	ldw	r2,-20(fp)
  822538:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82253c:	e0bff917 	ldw	r2,-28(fp)
  822540:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  822544:	008010c4 	movi	r2,67
  822548:	e0bfff15 	stw	r2,-4(fp)
  82254c:	0000bd06 	br	822844 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  822550:	e0bffc17 	ldw	r2,-16(fp)
  822554:	10800058 	cmpnei	r2,r2,1
  822558:	1000071e 	bne	r2,zero,822578 <OSTaskDel+0x128>
  82255c:	e0bffb17 	ldw	r2,-20(fp)
  822560:	e0bff815 	stw	r2,-32(fp)
  822564:	e0bff817 	ldw	r2,-32(fp)
  822568:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  82256c:	00800f44 	movi	r2,61
  822570:	e0bfff15 	stw	r2,-4(fp)
  822574:	0000b306 	br	822844 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  822578:	e0bffc17 	ldw	r2,-16(fp)
  82257c:	10800d03 	ldbu	r2,52(r2)
  822580:	11003fcc 	andi	r4,r2,255
  822584:	e0bffc17 	ldw	r2,-16(fp)
  822588:	10800d03 	ldbu	r2,52(r2)
  82258c:	10c03fcc 	andi	r3,r2,255
  822590:	008020f4 	movhi	r2,131
  822594:	10a9ea44 	addi	r2,r2,-22615
  822598:	10c5883a 	add	r2,r2,r3
  82259c:	10800003 	ldbu	r2,0(r2)
  8225a0:	1007883a 	mov	r3,r2
  8225a4:	e0bffc17 	ldw	r2,-16(fp)
  8225a8:	10800d43 	ldbu	r2,53(r2)
  8225ac:	0084303a 	nor	r2,zero,r2
  8225b0:	1884703a 	and	r2,r3,r2
  8225b4:	1007883a 	mov	r3,r2
  8225b8:	008020f4 	movhi	r2,131
  8225bc:	10a9ea44 	addi	r2,r2,-22615
  8225c0:	1105883a 	add	r2,r2,r4
  8225c4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  8225c8:	e0bffc17 	ldw	r2,-16(fp)
  8225cc:	10800d03 	ldbu	r2,52(r2)
  8225d0:	10c03fcc 	andi	r3,r2,255
  8225d4:	008020f4 	movhi	r2,131
  8225d8:	10a9ea44 	addi	r2,r2,-22615
  8225dc:	10c5883a 	add	r2,r2,r3
  8225e0:	10800003 	ldbu	r2,0(r2)
  8225e4:	10803fcc 	andi	r2,r2,255
  8225e8:	1004c03a 	cmpne	r2,r2,zero
  8225ec:	10000c1e 	bne	r2,zero,822620 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  8225f0:	e0bffc17 	ldw	r2,-16(fp)
  8225f4:	10800d83 	ldbu	r2,54(r2)
  8225f8:	0084303a 	nor	r2,zero,r2
  8225fc:	1007883a 	mov	r3,r2
  822600:	008020f4 	movhi	r2,131
  822604:	10a9ea04 	addi	r2,r2,-22616
  822608:	10800003 	ldbu	r2,0(r2)
  82260c:	1884703a 	and	r2,r3,r2
  822610:	1007883a 	mov	r3,r2
  822614:	008020f4 	movhi	r2,131
  822618:	10a9ea04 	addi	r2,r2,-22616
  82261c:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  822620:	e0bffc17 	ldw	r2,-16(fp)
  822624:	10800717 	ldw	r2,28(r2)
  822628:	1005003a 	cmpeq	r2,r2,zero
  82262c:	1000041e 	bne	r2,zero,822640 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  822630:	e0bffc17 	ldw	r2,-16(fp)
  822634:	11400717 	ldw	r5,28(r2)
  822638:	e13ffc17 	ldw	r4,-16(fp)
  82263c:	081cc0c0 	call	81cc0c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  822640:	e0bffc17 	ldw	r2,-16(fp)
  822644:	10800817 	ldw	r2,32(r2)
  822648:	1005003a 	cmpeq	r2,r2,zero
  82264c:	1000041e 	bne	r2,zero,822660 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  822650:	e0bffc17 	ldw	r2,-16(fp)
  822654:	11400817 	ldw	r5,32(r2)
  822658:	e13ffc17 	ldw	r4,-16(fp)
  82265c:	081ccc40 	call	81ccc4 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  822660:	e0bffc17 	ldw	r2,-16(fp)
  822664:	10800a17 	ldw	r2,40(r2)
  822668:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  82266c:	e0bffd17 	ldw	r2,-12(fp)
  822670:	1005003a 	cmpeq	r2,r2,zero
  822674:	1000021e 	bne	r2,zero,822680 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  822678:	e13ffd17 	ldw	r4,-12(fp)
  82267c:	081f3580 	call	81f358 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  822680:	e0bffc17 	ldw	r2,-16(fp)
  822684:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  822688:	e0bffc17 	ldw	r2,-16(fp)
  82268c:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  822690:	e0bffc17 	ldw	r2,-16(fp)
  822694:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  822698:	008020f4 	movhi	r2,131
  82269c:	10a9de04 	addi	r2,r2,-22664
  8226a0:	10800003 	ldbu	r2,0(r2)
  8226a4:	10803fcc 	andi	r2,r2,255
  8226a8:	10803fe0 	cmpeqi	r2,r2,255
  8226ac:	1000081e 	bne	r2,zero,8226d0 <OSTaskDel+0x280>
        OSLockNesting++;
  8226b0:	008020f4 	movhi	r2,131
  8226b4:	10a9de04 	addi	r2,r2,-22664
  8226b8:	10800003 	ldbu	r2,0(r2)
  8226bc:	10800044 	addi	r2,r2,1
  8226c0:	1007883a 	mov	r3,r2
  8226c4:	008020f4 	movhi	r2,131
  8226c8:	10a9de04 	addi	r2,r2,-22664
  8226cc:	10c00005 	stb	r3,0(r2)
  8226d0:	e0bffb17 	ldw	r2,-20(fp)
  8226d4:	e0bff715 	stw	r2,-36(fp)
  8226d8:	e0bff717 	ldw	r2,-36(fp)
  8226dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  8226e0:	081c7f80 	call	81c7f8 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8226e4:	0005303a 	rdctl	r2,status
  8226e8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8226ec:	e0fff617 	ldw	r3,-40(fp)
  8226f0:	00bfff84 	movi	r2,-2
  8226f4:	1884703a 	and	r2,r3,r2
  8226f8:	1001703a 	wrctl	status,r2
  
  return context;
  8226fc:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  822700:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  822704:	008020f4 	movhi	r2,131
  822708:	10a9de04 	addi	r2,r2,-22664
  82270c:	10800003 	ldbu	r2,0(r2)
  822710:	10803fcc 	andi	r2,r2,255
  822714:	1005003a 	cmpeq	r2,r2,zero
  822718:	1000081e 	bne	r2,zero,82273c <OSTaskDel+0x2ec>
        OSLockNesting--;
  82271c:	008020f4 	movhi	r2,131
  822720:	10a9de04 	addi	r2,r2,-22664
  822724:	10800003 	ldbu	r2,0(r2)
  822728:	10bfffc4 	addi	r2,r2,-1
  82272c:	1007883a 	mov	r3,r2
  822730:	008020f4 	movhi	r2,131
  822734:	10a9de04 	addi	r2,r2,-22664
  822738:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  82273c:	e13ffc17 	ldw	r4,-16(fp)
  822740:	0826dc80 	call	826dc8 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  822744:	008020f4 	movhi	r2,131
  822748:	10a9e644 	addi	r2,r2,-22631
  82274c:	10800003 	ldbu	r2,0(r2)
  822750:	10bfffc4 	addi	r2,r2,-1
  822754:	1007883a 	mov	r3,r2
  822758:	008020f4 	movhi	r2,131
  82275c:	10a9e644 	addi	r2,r2,-22631
  822760:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  822764:	e0bffe03 	ldbu	r2,-8(fp)
  822768:	00c02534 	movhi	r3,148
  82276c:	18f74604 	addi	r3,r3,-8936
  822770:	1085883a 	add	r2,r2,r2
  822774:	1085883a 	add	r2,r2,r2
  822778:	10c5883a 	add	r2,r2,r3
  82277c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  822780:	e0bffc17 	ldw	r2,-16(fp)
  822784:	10800617 	ldw	r2,24(r2)
  822788:	1004c03a 	cmpne	r2,r2,zero
  82278c:	1000091e 	bne	r2,zero,8227b4 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  822790:	e0bffc17 	ldw	r2,-16(fp)
  822794:	10800517 	ldw	r2,20(r2)
  822798:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  82279c:	e0bffc17 	ldw	r2,-16(fp)
  8227a0:	10c00517 	ldw	r3,20(r2)
  8227a4:	008020f4 	movhi	r2,131
  8227a8:	10a9e104 	addi	r2,r2,-22652
  8227ac:	10c00015 	stw	r3,0(r2)
  8227b0:	00000a06 	br	8227dc <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  8227b4:	e0bffc17 	ldw	r2,-16(fp)
  8227b8:	10c00617 	ldw	r3,24(r2)
  8227bc:	e0bffc17 	ldw	r2,-16(fp)
  8227c0:	10800517 	ldw	r2,20(r2)
  8227c4:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  8227c8:	e0bffc17 	ldw	r2,-16(fp)
  8227cc:	10c00517 	ldw	r3,20(r2)
  8227d0:	e0bffc17 	ldw	r2,-16(fp)
  8227d4:	10800617 	ldw	r2,24(r2)
  8227d8:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  8227dc:	008020f4 	movhi	r2,131
  8227e0:	10a9e504 	addi	r2,r2,-22636
  8227e4:	10c00017 	ldw	r3,0(r2)
  8227e8:	e0bffc17 	ldw	r2,-16(fp)
  8227ec:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  8227f0:	00c020f4 	movhi	r3,131
  8227f4:	18e9e504 	addi	r3,r3,-22636
  8227f8:	e0bffc17 	ldw	r2,-16(fp)
  8227fc:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  822800:	e0fffc17 	ldw	r3,-16(fp)
  822804:	00800fc4 	movi	r2,63
  822808:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  82280c:	e0bffc17 	ldw	r2,-16(fp)
  822810:	10001345 	stb	zero,77(r2)
  822814:	e0bffb17 	ldw	r2,-20(fp)
  822818:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82281c:	e0bff517 	ldw	r2,-44(fp)
  822820:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  822824:	008020f4 	movhi	r2,131
  822828:	10a9de44 	addi	r2,r2,-22663
  82282c:	10800003 	ldbu	r2,0(r2)
  822830:	10803fcc 	andi	r2,r2,255
  822834:	10800058 	cmpnei	r2,r2,1
  822838:	1000011e 	bne	r2,zero,822840 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
  82283c:	081d2540 	call	81d254 <OS_Sched>
    }
    return (OS_ERR_NONE);
  822840:	e03fff15 	stw	zero,-4(fp)
  822844:	e0bfff17 	ldw	r2,-4(fp)
}
  822848:	e037883a 	mov	sp,fp
  82284c:	dfc00117 	ldw	ra,4(sp)
  822850:	df000017 	ldw	fp,0(sp)
  822854:	dec00204 	addi	sp,sp,8
  822858:	f800283a 	ret

0082285c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  82285c:	defff404 	addi	sp,sp,-48
  822860:	df000b15 	stw	fp,44(sp)
  822864:	df000b04 	addi	fp,sp,44
  822868:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  82286c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  822870:	e0bffe03 	ldbu	r2,-8(fp)
  822874:	10800518 	cmpnei	r2,r2,20
  822878:	1000031e 	bne	r2,zero,822888 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  82287c:	00800f84 	movi	r2,62
  822880:	e0bfff15 	stw	r2,-4(fp)
  822884:	00004c06 	br	8229b8 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  822888:	e0bffe03 	ldbu	r2,-8(fp)
  82288c:	10800530 	cmpltui	r2,r2,20
  822890:	1000061e 	bne	r2,zero,8228ac <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
  822894:	e0bffe03 	ldbu	r2,-8(fp)
  822898:	10803fe0 	cmpeqi	r2,r2,255
  82289c:	1000031e 	bne	r2,zero,8228ac <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
  8228a0:	00800a84 	movi	r2,42
  8228a4:	e0bfff15 	stw	r2,-4(fp)
  8228a8:	00004306 	br	8229b8 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  8228ac:	e0bffe03 	ldbu	r2,-8(fp)
  8228b0:	10803fd8 	cmpnei	r2,r2,255
  8228b4:	1000141e 	bne	r2,zero,822908 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8228b8:	0005303a 	rdctl	r2,status
  8228bc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8228c0:	e0fffa17 	ldw	r3,-24(fp)
  8228c4:	00bfff84 	movi	r2,-2
  8228c8:	1884703a 	and	r2,r3,r2
  8228cc:	1001703a 	wrctl	status,r2
  
  return context;
  8228d0:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  8228d4:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  8228d8:	008020f4 	movhi	r2,131
  8228dc:	10a9ed04 	addi	r2,r2,-22604
  8228e0:	10800017 	ldw	r2,0(r2)
  8228e4:	10800dc3 	ldbu	r2,55(r2)
  8228e8:	e0bffd05 	stb	r2,-12(fp)
  8228ec:	e0bffb17 	ldw	r2,-20(fp)
  8228f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8228f4:	e0bff917 	ldw	r2,-28(fp)
  8228f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  8228fc:	e0bffd03 	ldbu	r2,-12(fp)
  822900:	e0bfff15 	stw	r2,-4(fp)
  822904:	00002c06 	br	8229b8 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  822908:	0005303a 	rdctl	r2,status
  82290c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  822910:	e0fff817 	ldw	r3,-32(fp)
  822914:	00bfff84 	movi	r2,-2
  822918:	1884703a 	and	r2,r3,r2
  82291c:	1001703a 	wrctl	status,r2
  
  return context;
  822920:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  822924:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
  822928:	e0bffe03 	ldbu	r2,-8(fp)
  82292c:	00c02534 	movhi	r3,148
  822930:	18f74604 	addi	r3,r3,-8936
  822934:	1085883a 	add	r2,r2,r2
  822938:	1085883a 	add	r2,r2,r2
  82293c:	10c5883a 	add	r2,r2,r3
  822940:	10800017 	ldw	r2,0(r2)
  822944:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  822948:	e0bffc17 	ldw	r2,-16(fp)
  82294c:	1004c03a 	cmpne	r2,r2,zero
  822950:	1000071e 	bne	r2,zero,822970 <OSTaskDelReq+0x114>
  822954:	e0bffb17 	ldw	r2,-20(fp)
  822958:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82295c:	e0bff717 	ldw	r2,-36(fp)
  822960:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  822964:	008010c4 	movi	r2,67
  822968:	e0bfff15 	stw	r2,-4(fp)
  82296c:	00001206 	br	8229b8 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  822970:	e0bffc17 	ldw	r2,-16(fp)
  822974:	10800058 	cmpnei	r2,r2,1
  822978:	1000071e 	bne	r2,zero,822998 <OSTaskDelReq+0x13c>
  82297c:	e0bffb17 	ldw	r2,-20(fp)
  822980:	e0bff615 	stw	r2,-40(fp)
  822984:	e0bff617 	ldw	r2,-40(fp)
  822988:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  82298c:	00800f44 	movi	r2,61
  822990:	e0bfff15 	stw	r2,-4(fp)
  822994:	00000806 	br	8229b8 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  822998:	e0fffc17 	ldw	r3,-16(fp)
  82299c:	00800fc4 	movi	r2,63
  8229a0:	18800dc5 	stb	r2,55(r3)
  8229a4:	e0bffb17 	ldw	r2,-20(fp)
  8229a8:	e0bff515 	stw	r2,-44(fp)
  8229ac:	e0bff517 	ldw	r2,-44(fp)
  8229b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8229b4:	e03fff15 	stw	zero,-4(fp)
  8229b8:	e0bfff17 	ldw	r2,-4(fp)
}
  8229bc:	e037883a 	mov	sp,fp
  8229c0:	df000017 	ldw	fp,0(sp)
  8229c4:	dec00104 	addi	sp,sp,4
  8229c8:	f800283a 	ret

008229cc <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  8229cc:	defff304 	addi	sp,sp,-52
  8229d0:	dfc00c15 	stw	ra,48(sp)
  8229d4:	df000b15 	stw	fp,44(sp)
  8229d8:	df000b04 	addi	fp,sp,44
  8229dc:	e17ffd15 	stw	r5,-12(fp)
  8229e0:	e1bffe15 	stw	r6,-8(fp)
  8229e4:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  8229e8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  8229ec:	e0bffe17 	ldw	r2,-8(fp)
  8229f0:	1004c03a 	cmpne	r2,r2,zero
  8229f4:	1000021e 	bne	r2,zero,822a00 <OSTaskNameGet+0x34>
        return (0);
  8229f8:	e03fff15 	stw	zero,-4(fp)
  8229fc:	00005b06 	br	822b6c <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  822a00:	e0bffc03 	ldbu	r2,-16(fp)
  822a04:	10800570 	cmpltui	r2,r2,21
  822a08:	1000081e 	bne	r2,zero,822a2c <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  822a0c:	e0bffc03 	ldbu	r2,-16(fp)
  822a10:	10803fe0 	cmpeqi	r2,r2,255
  822a14:	1000051e 	bne	r2,zero,822a2c <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  822a18:	e0fffe17 	ldw	r3,-8(fp)
  822a1c:	00800a84 	movi	r2,42
  822a20:	18800005 	stb	r2,0(r3)
            return (0);
  822a24:	e03fff15 	stw	zero,-4(fp)
  822a28:	00005006 	br	822b6c <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  822a2c:	e0bffd17 	ldw	r2,-12(fp)
  822a30:	1004c03a 	cmpne	r2,r2,zero
  822a34:	1000051e 	bne	r2,zero,822a4c <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  822a38:	e0fffe17 	ldw	r3,-8(fp)
  822a3c:	00800304 	movi	r2,12
  822a40:	18800005 	stb	r2,0(r3)
        return (0);
  822a44:	e03fff15 	stw	zero,-4(fp)
  822a48:	00004806 	br	822b6c <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  822a4c:	008020f4 	movhi	r2,131
  822a50:	10a9ec04 	addi	r2,r2,-22608
  822a54:	10800003 	ldbu	r2,0(r2)
  822a58:	10803fcc 	andi	r2,r2,255
  822a5c:	1005003a 	cmpeq	r2,r2,zero
  822a60:	1000051e 	bne	r2,zero,822a78 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
  822a64:	e0fffe17 	ldw	r3,-8(fp)
  822a68:	00800444 	movi	r2,17
  822a6c:	18800005 	stb	r2,0(r3)
        return (0);
  822a70:	e03fff15 	stw	zero,-4(fp)
  822a74:	00003d06 	br	822b6c <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  822a78:	0005303a 	rdctl	r2,status
  822a7c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  822a80:	e0fff817 	ldw	r3,-32(fp)
  822a84:	00bfff84 	movi	r2,-2
  822a88:	1884703a 	and	r2,r3,r2
  822a8c:	1001703a 	wrctl	status,r2
  
  return context;
  822a90:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  822a94:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  822a98:	e0bffc03 	ldbu	r2,-16(fp)
  822a9c:	10803fd8 	cmpnei	r2,r2,255
  822aa0:	1000051e 	bne	r2,zero,822ab8 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
  822aa4:	008020f4 	movhi	r2,131
  822aa8:	10a9ed04 	addi	r2,r2,-22604
  822aac:	10800017 	ldw	r2,0(r2)
  822ab0:	10800c83 	ldbu	r2,50(r2)
  822ab4:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  822ab8:	e0bffc03 	ldbu	r2,-16(fp)
  822abc:	00c02534 	movhi	r3,148
  822ac0:	18f74604 	addi	r3,r3,-8936
  822ac4:	1085883a 	add	r2,r2,r2
  822ac8:	1085883a 	add	r2,r2,r2
  822acc:	10c5883a 	add	r2,r2,r3
  822ad0:	10800017 	ldw	r2,0(r2)
  822ad4:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  822ad8:	e0bffb17 	ldw	r2,-20(fp)
  822adc:	1004c03a 	cmpne	r2,r2,zero
  822ae0:	1000091e 	bne	r2,zero,822b08 <OSTaskNameGet+0x13c>
  822ae4:	e0bff917 	ldw	r2,-28(fp)
  822ae8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  822aec:	e0bff717 	ldw	r2,-36(fp)
  822af0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  822af4:	e0fffe17 	ldw	r3,-8(fp)
  822af8:	008010c4 	movi	r2,67
  822afc:	18800005 	stb	r2,0(r3)
        return (0);
  822b00:	e03fff15 	stw	zero,-4(fp)
  822b04:	00001906 	br	822b6c <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  822b08:	e0bffb17 	ldw	r2,-20(fp)
  822b0c:	10800058 	cmpnei	r2,r2,1
  822b10:	1000091e 	bne	r2,zero,822b38 <OSTaskNameGet+0x16c>
  822b14:	e0bff917 	ldw	r2,-28(fp)
  822b18:	e0bff615 	stw	r2,-40(fp)
  822b1c:	e0bff617 	ldw	r2,-40(fp)
  822b20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  822b24:	e0fffe17 	ldw	r3,-8(fp)
  822b28:	008010c4 	movi	r2,67
  822b2c:	18800005 	stb	r2,0(r3)
        return (0);
  822b30:	e03fff15 	stw	zero,-4(fp)
  822b34:	00000d06 	br	822b6c <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  822b38:	e0bffb17 	ldw	r2,-20(fp)
  822b3c:	11401304 	addi	r5,r2,76
  822b40:	e13ffd17 	ldw	r4,-12(fp)
  822b44:	081d3980 	call	81d398 <OS_StrCopy>
  822b48:	e0bffa05 	stb	r2,-24(fp)
  822b4c:	e0bff917 	ldw	r2,-28(fp)
  822b50:	e0bff515 	stw	r2,-44(fp)
  822b54:	e0bff517 	ldw	r2,-44(fp)
  822b58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  822b5c:	e0bffe17 	ldw	r2,-8(fp)
  822b60:	10000005 	stb	zero,0(r2)
    return (len);
  822b64:	e0bffa03 	ldbu	r2,-24(fp)
  822b68:	e0bfff15 	stw	r2,-4(fp)
  822b6c:	e0bfff17 	ldw	r2,-4(fp)
}
  822b70:	e037883a 	mov	sp,fp
  822b74:	dfc00117 	ldw	ra,4(sp)
  822b78:	df000017 	ldw	fp,0(sp)
  822b7c:	dec00204 	addi	sp,sp,8
  822b80:	f800283a 	ret

00822b84 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  822b84:	defff304 	addi	sp,sp,-52
  822b88:	dfc00c15 	stw	ra,48(sp)
  822b8c:	df000b15 	stw	fp,44(sp)
  822b90:	df000b04 	addi	fp,sp,44
  822b94:	e17ffe15 	stw	r5,-8(fp)
  822b98:	e1bfff15 	stw	r6,-4(fp)
  822b9c:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  822ba0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  822ba4:	e0bfff17 	ldw	r2,-4(fp)
  822ba8:	1005003a 	cmpeq	r2,r2,zero
  822bac:	1000611e 	bne	r2,zero,822d34 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  822bb0:	e0bffd03 	ldbu	r2,-12(fp)
  822bb4:	10800570 	cmpltui	r2,r2,21
  822bb8:	1000071e 	bne	r2,zero,822bd8 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  822bbc:	e0bffd03 	ldbu	r2,-12(fp)
  822bc0:	10803fe0 	cmpeqi	r2,r2,255
  822bc4:	1000041e 	bne	r2,zero,822bd8 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  822bc8:	e0ffff17 	ldw	r3,-4(fp)
  822bcc:	00800a84 	movi	r2,42
  822bd0:	18800005 	stb	r2,0(r3)
            return;
  822bd4:	00005706 	br	822d34 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  822bd8:	e0bffe17 	ldw	r2,-8(fp)
  822bdc:	1004c03a 	cmpne	r2,r2,zero
  822be0:	1000041e 	bne	r2,zero,822bf4 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  822be4:	e0ffff17 	ldw	r3,-4(fp)
  822be8:	00800304 	movi	r2,12
  822bec:	18800005 	stb	r2,0(r3)
        return;
  822bf0:	00005006 	br	822d34 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  822bf4:	008020f4 	movhi	r2,131
  822bf8:	10a9ec04 	addi	r2,r2,-22608
  822bfc:	10800003 	ldbu	r2,0(r2)
  822c00:	10803fcc 	andi	r2,r2,255
  822c04:	1005003a 	cmpeq	r2,r2,zero
  822c08:	1000041e 	bne	r2,zero,822c1c <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
  822c0c:	e0ffff17 	ldw	r3,-4(fp)
  822c10:	00800484 	movi	r2,18
  822c14:	18800005 	stb	r2,0(r3)
        return;
  822c18:	00004606 	br	822d34 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  822c1c:	0005303a 	rdctl	r2,status
  822c20:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  822c24:	e0fff917 	ldw	r3,-28(fp)
  822c28:	00bfff84 	movi	r2,-2
  822c2c:	1884703a 	and	r2,r3,r2
  822c30:	1001703a 	wrctl	status,r2
  
  return context;
  822c34:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  822c38:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  822c3c:	e0bffd03 	ldbu	r2,-12(fp)
  822c40:	10803fd8 	cmpnei	r2,r2,255
  822c44:	1000051e 	bne	r2,zero,822c5c <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
  822c48:	008020f4 	movhi	r2,131
  822c4c:	10a9ed04 	addi	r2,r2,-22604
  822c50:	10800017 	ldw	r2,0(r2)
  822c54:	10800c83 	ldbu	r2,50(r2)
  822c58:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  822c5c:	e0bffd03 	ldbu	r2,-12(fp)
  822c60:	00c02534 	movhi	r3,148
  822c64:	18f74604 	addi	r3,r3,-8936
  822c68:	1085883a 	add	r2,r2,r2
  822c6c:	1085883a 	add	r2,r2,r2
  822c70:	10c5883a 	add	r2,r2,r3
  822c74:	10800017 	ldw	r2,0(r2)
  822c78:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  822c7c:	e0bffb17 	ldw	r2,-20(fp)
  822c80:	1004c03a 	cmpne	r2,r2,zero
  822c84:	1000081e 	bne	r2,zero,822ca8 <OSTaskNameSet+0x124>
  822c88:	e0bffa17 	ldw	r2,-24(fp)
  822c8c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  822c90:	e0bff817 	ldw	r2,-32(fp)
  822c94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  822c98:	e0ffff17 	ldw	r3,-4(fp)
  822c9c:	008010c4 	movi	r2,67
  822ca0:	18800005 	stb	r2,0(r3)
        return;
  822ca4:	00002306 	br	822d34 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  822ca8:	e0bffb17 	ldw	r2,-20(fp)
  822cac:	10800058 	cmpnei	r2,r2,1
  822cb0:	1000081e 	bne	r2,zero,822cd4 <OSTaskNameSet+0x150>
  822cb4:	e0bffa17 	ldw	r2,-24(fp)
  822cb8:	e0bff715 	stw	r2,-36(fp)
  822cbc:	e0bff717 	ldw	r2,-36(fp)
  822cc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  822cc4:	e0ffff17 	ldw	r3,-4(fp)
  822cc8:	008010c4 	movi	r2,67
  822ccc:	18800005 	stb	r2,0(r3)
        return;
  822cd0:	00001806 	br	822d34 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  822cd4:	e13ffe17 	ldw	r4,-8(fp)
  822cd8:	081d4180 	call	81d418 <OS_StrLen>
  822cdc:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  822ce0:	e0bffc03 	ldbu	r2,-16(fp)
  822ce4:	10800830 	cmpltui	r2,r2,32
  822ce8:	1000081e 	bne	r2,zero,822d0c <OSTaskNameSet+0x188>
  822cec:	e0bffa17 	ldw	r2,-24(fp)
  822cf0:	e0bff615 	stw	r2,-40(fp)
  822cf4:	e0bff617 	ldw	r2,-40(fp)
  822cf8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  822cfc:	e0ffff17 	ldw	r3,-4(fp)
  822d00:	00801044 	movi	r2,65
  822d04:	18800005 	stb	r2,0(r3)
        return;
  822d08:	00000a06 	br	822d34 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  822d0c:	e0bffb17 	ldw	r2,-20(fp)
  822d10:	11001304 	addi	r4,r2,76
  822d14:	e17ffe17 	ldw	r5,-8(fp)
  822d18:	081d3980 	call	81d398 <OS_StrCopy>
  822d1c:	e0bffa17 	ldw	r2,-24(fp)
  822d20:	e0bff515 	stw	r2,-44(fp)
  822d24:	e0bff517 	ldw	r2,-44(fp)
  822d28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  822d2c:	e0bfff17 	ldw	r2,-4(fp)
  822d30:	10000005 	stb	zero,0(r2)
}
  822d34:	e037883a 	mov	sp,fp
  822d38:	dfc00117 	ldw	ra,4(sp)
  822d3c:	df000017 	ldw	fp,0(sp)
  822d40:	dec00204 	addi	sp,sp,8
  822d44:	f800283a 	ret

00822d48 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  822d48:	defff304 	addi	sp,sp,-52
  822d4c:	dfc00c15 	stw	ra,48(sp)
  822d50:	df000b15 	stw	fp,44(sp)
  822d54:	df000b04 	addi	fp,sp,44
  822d58:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  822d5c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  822d60:	e0bffe03 	ldbu	r2,-8(fp)
  822d64:	10800530 	cmpltui	r2,r2,20
  822d68:	1000031e 	bne	r2,zero,822d78 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  822d6c:	00800a84 	movi	r2,42
  822d70:	e0bfff15 	stw	r2,-4(fp)
  822d74:	00007406 	br	822f48 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  822d78:	0005303a 	rdctl	r2,status
  822d7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  822d80:	e0fffb17 	ldw	r3,-20(fp)
  822d84:	00bfff84 	movi	r2,-2
  822d88:	1884703a 	and	r2,r3,r2
  822d8c:	1001703a 	wrctl	status,r2
  
  return context;
  822d90:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  822d94:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
  822d98:	e0bffe03 	ldbu	r2,-8(fp)
  822d9c:	00c02534 	movhi	r3,148
  822da0:	18f74604 	addi	r3,r3,-8936
  822da4:	1085883a 	add	r2,r2,r2
  822da8:	1085883a 	add	r2,r2,r2
  822dac:	10c5883a 	add	r2,r2,r3
  822db0:	10800017 	ldw	r2,0(r2)
  822db4:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  822db8:	e0bffd17 	ldw	r2,-12(fp)
  822dbc:	1004c03a 	cmpne	r2,r2,zero
  822dc0:	1000071e 	bne	r2,zero,822de0 <OSTaskResume+0x98>
  822dc4:	e0bffc17 	ldw	r2,-16(fp)
  822dc8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  822dcc:	e0bffa17 	ldw	r2,-24(fp)
  822dd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  822dd4:	00801184 	movi	r2,70
  822dd8:	e0bfff15 	stw	r2,-4(fp)
  822ddc:	00005a06 	br	822f48 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  822de0:	e0bffd17 	ldw	r2,-12(fp)
  822de4:	10800058 	cmpnei	r2,r2,1
  822de8:	1000071e 	bne	r2,zero,822e08 <OSTaskResume+0xc0>
  822dec:	e0bffc17 	ldw	r2,-16(fp)
  822df0:	e0bff915 	stw	r2,-28(fp)
  822df4:	e0bff917 	ldw	r2,-28(fp)
  822df8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  822dfc:	008010c4 	movi	r2,67
  822e00:	e0bfff15 	stw	r2,-4(fp)
  822e04:	00005006 	br	822f48 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  822e08:	e0bffd17 	ldw	r2,-12(fp)
  822e0c:	10800c03 	ldbu	r2,48(r2)
  822e10:	10803fcc 	andi	r2,r2,255
  822e14:	1080020c 	andi	r2,r2,8
  822e18:	1005003a 	cmpeq	r2,r2,zero
  822e1c:	1000441e 	bne	r2,zero,822f30 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  822e20:	e0bffd17 	ldw	r2,-12(fp)
  822e24:	10c00c03 	ldbu	r3,48(r2)
  822e28:	00bffdc4 	movi	r2,-9
  822e2c:	1884703a 	and	r2,r3,r2
  822e30:	1007883a 	mov	r3,r2
  822e34:	e0bffd17 	ldw	r2,-12(fp)
  822e38:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  822e3c:	e0bffd17 	ldw	r2,-12(fp)
  822e40:	10800c03 	ldbu	r2,48(r2)
  822e44:	10803fcc 	andi	r2,r2,255
  822e48:	1004c03a 	cmpne	r2,r2,zero
  822e4c:	1000321e 	bne	r2,zero,822f18 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
  822e50:	e0bffd17 	ldw	r2,-12(fp)
  822e54:	10800b8b 	ldhu	r2,46(r2)
  822e58:	10bfffcc 	andi	r2,r2,65535
  822e5c:	1004c03a 	cmpne	r2,r2,zero
  822e60:	1000281e 	bne	r2,zero,822f04 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  822e64:	e0bffd17 	ldw	r2,-12(fp)
  822e68:	10c00d83 	ldbu	r3,54(r2)
  822e6c:	008020f4 	movhi	r2,131
  822e70:	10a9ea04 	addi	r2,r2,-22616
  822e74:	10800003 	ldbu	r2,0(r2)
  822e78:	1884b03a 	or	r2,r3,r2
  822e7c:	1007883a 	mov	r3,r2
  822e80:	008020f4 	movhi	r2,131
  822e84:	10a9ea04 	addi	r2,r2,-22616
  822e88:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  822e8c:	e0bffd17 	ldw	r2,-12(fp)
  822e90:	10800d03 	ldbu	r2,52(r2)
  822e94:	11003fcc 	andi	r4,r2,255
  822e98:	e0bffd17 	ldw	r2,-12(fp)
  822e9c:	10800d03 	ldbu	r2,52(r2)
  822ea0:	10c03fcc 	andi	r3,r2,255
  822ea4:	008020f4 	movhi	r2,131
  822ea8:	10a9ea44 	addi	r2,r2,-22615
  822eac:	10c5883a 	add	r2,r2,r3
  822eb0:	10c00003 	ldbu	r3,0(r2)
  822eb4:	e0bffd17 	ldw	r2,-12(fp)
  822eb8:	10800d43 	ldbu	r2,53(r2)
  822ebc:	1884b03a 	or	r2,r3,r2
  822ec0:	1007883a 	mov	r3,r2
  822ec4:	008020f4 	movhi	r2,131
  822ec8:	10a9ea44 	addi	r2,r2,-22615
  822ecc:	1105883a 	add	r2,r2,r4
  822ed0:	10c00005 	stb	r3,0(r2)
  822ed4:	e0bffc17 	ldw	r2,-16(fp)
  822ed8:	e0bff815 	stw	r2,-32(fp)
  822edc:	e0bff817 	ldw	r2,-32(fp)
  822ee0:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  822ee4:	008020f4 	movhi	r2,131
  822ee8:	10a9de44 	addi	r2,r2,-22663
  822eec:	10800003 	ldbu	r2,0(r2)
  822ef0:	10803fcc 	andi	r2,r2,255
  822ef4:	10800058 	cmpnei	r2,r2,1
  822ef8:	10000b1e 	bne	r2,zero,822f28 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
  822efc:	081d2540 	call	81d254 <OS_Sched>
  822f00:	00000906 	br	822f28 <OSTaskResume+0x1e0>
  822f04:	e0bffc17 	ldw	r2,-16(fp)
  822f08:	e0bff715 	stw	r2,-36(fp)
  822f0c:	e0bff717 	ldw	r2,-36(fp)
  822f10:	1001703a 	wrctl	status,r2
  822f14:	00000406 	br	822f28 <OSTaskResume+0x1e0>
  822f18:	e0bffc17 	ldw	r2,-16(fp)
  822f1c:	e0bff615 	stw	r2,-40(fp)
  822f20:	e0bff617 	ldw	r2,-40(fp)
  822f24:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  822f28:	e03fff15 	stw	zero,-4(fp)
  822f2c:	00000606 	br	822f48 <OSTaskResume+0x200>
  822f30:	e0bffc17 	ldw	r2,-16(fp)
  822f34:	e0bff515 	stw	r2,-44(fp)
  822f38:	e0bff517 	ldw	r2,-44(fp)
  822f3c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  822f40:	00801104 	movi	r2,68
  822f44:	e0bfff15 	stw	r2,-4(fp)
  822f48:	e0bfff17 	ldw	r2,-4(fp)
}
  822f4c:	e037883a 	mov	sp,fp
  822f50:	dfc00117 	ldw	ra,4(sp)
  822f54:	df000017 	ldw	fp,0(sp)
  822f58:	dec00204 	addi	sp,sp,8
  822f5c:	f800283a 	ret

00822f60 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  822f60:	defff204 	addi	sp,sp,-56
  822f64:	df000d15 	stw	fp,52(sp)
  822f68:	df000d04 	addi	fp,sp,52
  822f6c:	e17ffe15 	stw	r5,-8(fp)
  822f70:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  822f74:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  822f78:	e0bffd03 	ldbu	r2,-12(fp)
  822f7c:	10800570 	cmpltui	r2,r2,21
  822f80:	1000061e 	bne	r2,zero,822f9c <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  822f84:	e0bffd03 	ldbu	r2,-12(fp)
  822f88:	10803fe0 	cmpeqi	r2,r2,255
  822f8c:	1000031e 	bne	r2,zero,822f9c <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  822f90:	00800a84 	movi	r2,42
  822f94:	e0bfff15 	stw	r2,-4(fp)
  822f98:	00006b06 	br	823148 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  822f9c:	e0bffe17 	ldw	r2,-8(fp)
  822fa0:	1004c03a 	cmpne	r2,r2,zero
  822fa4:	1000031e 	bne	r2,zero,822fb4 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
  822fa8:	00800244 	movi	r2,9
  822fac:	e0bfff15 	stw	r2,-4(fp)
  822fb0:	00006506 	br	823148 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  822fb4:	e0bffe17 	ldw	r2,-8(fp)
  822fb8:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  822fbc:	e0bffe17 	ldw	r2,-8(fp)
  822fc0:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  822fc4:	0005303a 	rdctl	r2,status
  822fc8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  822fcc:	e0fff717 	ldw	r3,-36(fp)
  822fd0:	00bfff84 	movi	r2,-2
  822fd4:	1884703a 	and	r2,r3,r2
  822fd8:	1001703a 	wrctl	status,r2
  
  return context;
  822fdc:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  822fe0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  822fe4:	e0bffd03 	ldbu	r2,-12(fp)
  822fe8:	10803fd8 	cmpnei	r2,r2,255
  822fec:	1000051e 	bne	r2,zero,823004 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
  822ff0:	008020f4 	movhi	r2,131
  822ff4:	10a9ed04 	addi	r2,r2,-22604
  822ff8:	10800017 	ldw	r2,0(r2)
  822ffc:	10800c83 	ldbu	r2,50(r2)
  823000:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  823004:	e0bffd03 	ldbu	r2,-12(fp)
  823008:	00c02534 	movhi	r3,148
  82300c:	18f74604 	addi	r3,r3,-8936
  823010:	1085883a 	add	r2,r2,r2
  823014:	1085883a 	add	r2,r2,r2
  823018:	10c5883a 	add	r2,r2,r3
  82301c:	10800017 	ldw	r2,0(r2)
  823020:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  823024:	e0bffc17 	ldw	r2,-16(fp)
  823028:	1004c03a 	cmpne	r2,r2,zero
  82302c:	1000071e 	bne	r2,zero,82304c <OSTaskStkChk+0xec>
  823030:	e0bff817 	ldw	r2,-32(fp)
  823034:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  823038:	e0bff617 	ldw	r2,-40(fp)
  82303c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  823040:	008010c4 	movi	r2,67
  823044:	e0bfff15 	stw	r2,-4(fp)
  823048:	00003f06 	br	823148 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  82304c:	e0bffc17 	ldw	r2,-16(fp)
  823050:	10800058 	cmpnei	r2,r2,1
  823054:	1000071e 	bne	r2,zero,823074 <OSTaskStkChk+0x114>
  823058:	e0bff817 	ldw	r2,-32(fp)
  82305c:	e0bff515 	stw	r2,-44(fp)
  823060:	e0bff517 	ldw	r2,-44(fp)
  823064:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  823068:	008010c4 	movi	r2,67
  82306c:	e0bfff15 	stw	r2,-4(fp)
  823070:	00003506 	br	823148 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  823074:	e0bffc17 	ldw	r2,-16(fp)
  823078:	1080040b 	ldhu	r2,16(r2)
  82307c:	10bfffcc 	andi	r2,r2,65535
  823080:	1080004c 	andi	r2,r2,1
  823084:	1004c03a 	cmpne	r2,r2,zero
  823088:	1000071e 	bne	r2,zero,8230a8 <OSTaskStkChk+0x148>
  82308c:	e0bff817 	ldw	r2,-32(fp)
  823090:	e0bff415 	stw	r2,-48(fp)
  823094:	e0bff417 	ldw	r2,-48(fp)
  823098:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  82309c:	00801144 	movi	r2,69
  8230a0:	e0bfff15 	stw	r2,-4(fp)
  8230a4:	00002806 	br	823148 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
  8230a8:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
  8230ac:	e0bffc17 	ldw	r2,-16(fp)
  8230b0:	10800317 	ldw	r2,12(r2)
  8230b4:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
  8230b8:	e0bffc17 	ldw	r2,-16(fp)
  8230bc:	10800217 	ldw	r2,8(r2)
  8230c0:	e0bffb15 	stw	r2,-20(fp)
  8230c4:	e0bff817 	ldw	r2,-32(fp)
  8230c8:	e0bff315 	stw	r2,-52(fp)
  8230cc:	e0bff317 	ldw	r2,-52(fp)
  8230d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  8230d4:	00000306 	br	8230e4 <OSTaskStkChk+0x184>
        nfree++;
  8230d8:	e0bffa17 	ldw	r2,-24(fp)
  8230dc:	10800044 	addi	r2,r2,1
  8230e0:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  8230e4:	e0bffb17 	ldw	r2,-20(fp)
  8230e8:	10800017 	ldw	r2,0(r2)
  8230ec:	1005003a 	cmpeq	r2,r2,zero
  8230f0:	1007883a 	mov	r3,r2
  8230f4:	e0bffb17 	ldw	r2,-20(fp)
  8230f8:	10800104 	addi	r2,r2,4
  8230fc:	e0bffb15 	stw	r2,-20(fp)
  823100:	18803fcc 	andi	r2,r3,255
  823104:	1004c03a 	cmpne	r2,r2,zero
  823108:	103ff31e 	bne	r2,zero,8230d8 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  82310c:	e0bffa17 	ldw	r2,-24(fp)
  823110:	1085883a 	add	r2,r2,r2
  823114:	1085883a 	add	r2,r2,r2
  823118:	1007883a 	mov	r3,r2
  82311c:	e0bffe17 	ldw	r2,-8(fp)
  823120:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  823124:	e0fff917 	ldw	r3,-28(fp)
  823128:	e0bffa17 	ldw	r2,-24(fp)
  82312c:	1885c83a 	sub	r2,r3,r2
  823130:	1085883a 	add	r2,r2,r2
  823134:	1085883a 	add	r2,r2,r2
  823138:	1007883a 	mov	r3,r2
  82313c:	e0bffe17 	ldw	r2,-8(fp)
  823140:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  823144:	e03fff15 	stw	zero,-4(fp)
  823148:	e0bfff17 	ldw	r2,-4(fp)
}
  82314c:	e037883a 	mov	sp,fp
  823150:	df000017 	ldw	fp,0(sp)
  823154:	dec00104 	addi	sp,sp,4
  823158:	f800283a 	ret

0082315c <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  82315c:	defff404 	addi	sp,sp,-48
  823160:	dfc00b15 	stw	ra,44(sp)
  823164:	df000a15 	stw	fp,40(sp)
  823168:	df000a04 	addi	fp,sp,40
  82316c:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  823170:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  823174:	e0bffe03 	ldbu	r2,-8(fp)
  823178:	10800518 	cmpnei	r2,r2,20
  82317c:	1000031e 	bne	r2,zero,82318c <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  823180:	008011c4 	movi	r2,71
  823184:	e0bfff15 	stw	r2,-4(fp)
  823188:	00007906 	br	823370 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  82318c:	e0bffe03 	ldbu	r2,-8(fp)
  823190:	10800530 	cmpltui	r2,r2,20
  823194:	1000061e 	bne	r2,zero,8231b0 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
  823198:	e0bffe03 	ldbu	r2,-8(fp)
  82319c:	10803fe0 	cmpeqi	r2,r2,255
  8231a0:	1000031e 	bne	r2,zero,8231b0 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
  8231a4:	00800a84 	movi	r2,42
  8231a8:	e0bfff15 	stw	r2,-4(fp)
  8231ac:	00007006 	br	823370 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8231b0:	0005303a 	rdctl	r2,status
  8231b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8231b8:	e0fff917 	ldw	r3,-28(fp)
  8231bc:	00bfff84 	movi	r2,-2
  8231c0:	1884703a 	and	r2,r3,r2
  8231c4:	1001703a 	wrctl	status,r2
  
  return context;
  8231c8:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  8231cc:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  8231d0:	e0bffe03 	ldbu	r2,-8(fp)
  8231d4:	10803fd8 	cmpnei	r2,r2,255
  8231d8:	1000081e 	bne	r2,zero,8231fc <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
  8231dc:	008020f4 	movhi	r2,131
  8231e0:	10a9ed04 	addi	r2,r2,-22604
  8231e4:	10800017 	ldw	r2,0(r2)
  8231e8:	10800c83 	ldbu	r2,50(r2)
  8231ec:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
  8231f0:	00800044 	movi	r2,1
  8231f4:	e0bffd05 	stb	r2,-12(fp)
  8231f8:	00000b06 	br	823228 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  8231fc:	008020f4 	movhi	r2,131
  823200:	10a9ed04 	addi	r2,r2,-22604
  823204:	10800017 	ldw	r2,0(r2)
  823208:	10800c83 	ldbu	r2,50(r2)
  82320c:	10c03fcc 	andi	r3,r2,255
  823210:	e0bffe03 	ldbu	r2,-8(fp)
  823214:	1880031e 	bne	r3,r2,823224 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
  823218:	00800044 	movi	r2,1
  82321c:	e0bffd05 	stb	r2,-12(fp)
  823220:	00000106 	br	823228 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  823224:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  823228:	e0bffe03 	ldbu	r2,-8(fp)
  82322c:	00c02534 	movhi	r3,148
  823230:	18f74604 	addi	r3,r3,-8936
  823234:	1085883a 	add	r2,r2,r2
  823238:	1085883a 	add	r2,r2,r2
  82323c:	10c5883a 	add	r2,r2,r3
  823240:	10800017 	ldw	r2,0(r2)
  823244:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  823248:	e0bffc17 	ldw	r2,-16(fp)
  82324c:	1004c03a 	cmpne	r2,r2,zero
  823250:	1000071e 	bne	r2,zero,823270 <OSTaskSuspend+0x114>
  823254:	e0bffa17 	ldw	r2,-24(fp)
  823258:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82325c:	e0bff817 	ldw	r2,-32(fp)
  823260:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  823264:	00801204 	movi	r2,72
  823268:	e0bfff15 	stw	r2,-4(fp)
  82326c:	00004006 	br	823370 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  823270:	e0bffc17 	ldw	r2,-16(fp)
  823274:	10800058 	cmpnei	r2,r2,1
  823278:	1000071e 	bne	r2,zero,823298 <OSTaskSuspend+0x13c>
  82327c:	e0bffa17 	ldw	r2,-24(fp)
  823280:	e0bff715 	stw	r2,-36(fp)
  823284:	e0bff717 	ldw	r2,-36(fp)
  823288:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  82328c:	008010c4 	movi	r2,67
  823290:	e0bfff15 	stw	r2,-4(fp)
  823294:	00003606 	br	823370 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
  823298:	e0bffc17 	ldw	r2,-16(fp)
  82329c:	10800d03 	ldbu	r2,52(r2)
  8232a0:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  8232a4:	e13ffb03 	ldbu	r4,-20(fp)
  8232a8:	e0fffb03 	ldbu	r3,-20(fp)
  8232ac:	008020f4 	movhi	r2,131
  8232b0:	10a9ea44 	addi	r2,r2,-22615
  8232b4:	10c5883a 	add	r2,r2,r3
  8232b8:	10800003 	ldbu	r2,0(r2)
  8232bc:	1007883a 	mov	r3,r2
  8232c0:	e0bffc17 	ldw	r2,-16(fp)
  8232c4:	10800d43 	ldbu	r2,53(r2)
  8232c8:	0084303a 	nor	r2,zero,r2
  8232cc:	1884703a 	and	r2,r3,r2
  8232d0:	1007883a 	mov	r3,r2
  8232d4:	008020f4 	movhi	r2,131
  8232d8:	10a9ea44 	addi	r2,r2,-22615
  8232dc:	1105883a 	add	r2,r2,r4
  8232e0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  8232e4:	e0fffb03 	ldbu	r3,-20(fp)
  8232e8:	008020f4 	movhi	r2,131
  8232ec:	10a9ea44 	addi	r2,r2,-22615
  8232f0:	10c5883a 	add	r2,r2,r3
  8232f4:	10800003 	ldbu	r2,0(r2)
  8232f8:	10803fcc 	andi	r2,r2,255
  8232fc:	1004c03a 	cmpne	r2,r2,zero
  823300:	10000c1e 	bne	r2,zero,823334 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  823304:	e0bffc17 	ldw	r2,-16(fp)
  823308:	10800d83 	ldbu	r2,54(r2)
  82330c:	0084303a 	nor	r2,zero,r2
  823310:	1007883a 	mov	r3,r2
  823314:	008020f4 	movhi	r2,131
  823318:	10a9ea04 	addi	r2,r2,-22616
  82331c:	10800003 	ldbu	r2,0(r2)
  823320:	1884703a 	and	r2,r3,r2
  823324:	1007883a 	mov	r3,r2
  823328:	008020f4 	movhi	r2,131
  82332c:	10a9ea04 	addi	r2,r2,-22616
  823330:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  823334:	e0bffc17 	ldw	r2,-16(fp)
  823338:	10800c03 	ldbu	r2,48(r2)
  82333c:	10800214 	ori	r2,r2,8
  823340:	1007883a 	mov	r3,r2
  823344:	e0bffc17 	ldw	r2,-16(fp)
  823348:	10c00c05 	stb	r3,48(r2)
  82334c:	e0bffa17 	ldw	r2,-24(fp)
  823350:	e0bff615 	stw	r2,-40(fp)
  823354:	e0bff617 	ldw	r2,-40(fp)
  823358:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  82335c:	e0bffd03 	ldbu	r2,-12(fp)
  823360:	10800058 	cmpnei	r2,r2,1
  823364:	1000011e 	bne	r2,zero,82336c <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
  823368:	081d2540 	call	81d254 <OS_Sched>
    }
    return (OS_ERR_NONE);
  82336c:	e03fff15 	stw	zero,-4(fp)
  823370:	e0bfff17 	ldw	r2,-4(fp)
}
  823374:	e037883a 	mov	sp,fp
  823378:	dfc00117 	ldw	ra,4(sp)
  82337c:	df000017 	ldw	fp,0(sp)
  823380:	dec00204 	addi	sp,sp,8
  823384:	f800283a 	ret

00823388 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  823388:	defff504 	addi	sp,sp,-44
  82338c:	dfc00a15 	stw	ra,40(sp)
  823390:	df000915 	stw	fp,36(sp)
  823394:	df000904 	addi	fp,sp,36
  823398:	e17ffe15 	stw	r5,-8(fp)
  82339c:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8233a0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  8233a4:	e0bffd03 	ldbu	r2,-12(fp)
  8233a8:	10800570 	cmpltui	r2,r2,21
  8233ac:	1000061e 	bne	r2,zero,8233c8 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  8233b0:	e0bffd03 	ldbu	r2,-12(fp)
  8233b4:	10803fe0 	cmpeqi	r2,r2,255
  8233b8:	1000031e 	bne	r2,zero,8233c8 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  8233bc:	00800a84 	movi	r2,42
  8233c0:	e0bfff15 	stw	r2,-4(fp)
  8233c4:	00003b06 	br	8234b4 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  8233c8:	e0bffe17 	ldw	r2,-8(fp)
  8233cc:	1004c03a 	cmpne	r2,r2,zero
  8233d0:	1000031e 	bne	r2,zero,8233e0 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
  8233d4:	00800244 	movi	r2,9
  8233d8:	e0bfff15 	stw	r2,-4(fp)
  8233dc:	00003506 	br	8234b4 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8233e0:	0005303a 	rdctl	r2,status
  8233e4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8233e8:	e0fffa17 	ldw	r3,-24(fp)
  8233ec:	00bfff84 	movi	r2,-2
  8233f0:	1884703a 	and	r2,r3,r2
  8233f4:	1001703a 	wrctl	status,r2
  
  return context;
  8233f8:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8233fc:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  823400:	e0bffd03 	ldbu	r2,-12(fp)
  823404:	10803fd8 	cmpnei	r2,r2,255
  823408:	1000051e 	bne	r2,zero,823420 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
  82340c:	008020f4 	movhi	r2,131
  823410:	10a9ed04 	addi	r2,r2,-22604
  823414:	10800017 	ldw	r2,0(r2)
  823418:	10800c83 	ldbu	r2,50(r2)
  82341c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  823420:	e0bffd03 	ldbu	r2,-12(fp)
  823424:	00c02534 	movhi	r3,148
  823428:	18f74604 	addi	r3,r3,-8936
  82342c:	1085883a 	add	r2,r2,r2
  823430:	1085883a 	add	r2,r2,r2
  823434:	10c5883a 	add	r2,r2,r3
  823438:	10800017 	ldw	r2,0(r2)
  82343c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  823440:	e0bffc17 	ldw	r2,-16(fp)
  823444:	1004c03a 	cmpne	r2,r2,zero
  823448:	1000071e 	bne	r2,zero,823468 <OSTaskQuery+0xe0>
  82344c:	e0bffb17 	ldw	r2,-20(fp)
  823450:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  823454:	e0bff917 	ldw	r2,-28(fp)
  823458:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  82345c:	00800a44 	movi	r2,41
  823460:	e0bfff15 	stw	r2,-4(fp)
  823464:	00001306 	br	8234b4 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  823468:	e0bffc17 	ldw	r2,-16(fp)
  82346c:	10800058 	cmpnei	r2,r2,1
  823470:	1000071e 	bne	r2,zero,823490 <OSTaskQuery+0x108>
  823474:	e0bffb17 	ldw	r2,-20(fp)
  823478:	e0bff815 	stw	r2,-32(fp)
  82347c:	e0bff817 	ldw	r2,-32(fp)
  823480:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  823484:	008010c4 	movi	r2,67
  823488:	e0bfff15 	stw	r2,-4(fp)
  82348c:	00000906 	br	8234b4 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  823490:	e13ffe17 	ldw	r4,-8(fp)
  823494:	e17ffc17 	ldw	r5,-16(fp)
  823498:	01801b04 	movi	r6,108
  82349c:	081d1e80 	call	81d1e8 <OS_MemCopy>
  8234a0:	e0bffb17 	ldw	r2,-20(fp)
  8234a4:	e0bff715 	stw	r2,-36(fp)
  8234a8:	e0bff717 	ldw	r2,-36(fp)
  8234ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8234b0:	e03fff15 	stw	zero,-4(fp)
  8234b4:	e0bfff17 	ldw	r2,-4(fp)
}
  8234b8:	e037883a 	mov	sp,fp
  8234bc:	dfc00117 	ldw	ra,4(sp)
  8234c0:	df000017 	ldw	fp,0(sp)
  8234c4:	dec00204 	addi	sp,sp,8
  8234c8:	f800283a 	ret

008234cc <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  8234cc:	defffc04 	addi	sp,sp,-16
  8234d0:	df000315 	stw	fp,12(sp)
  8234d4:	df000304 	addi	fp,sp,12
  8234d8:	e13ffd15 	stw	r4,-12(fp)
  8234dc:	e17ffe15 	stw	r5,-8(fp)
  8234e0:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  8234e4:	e0bfff0b 	ldhu	r2,-4(fp)
  8234e8:	1080004c 	andi	r2,r2,1
  8234ec:	10803fcc 	andi	r2,r2,255
  8234f0:	1005003a 	cmpeq	r2,r2,zero
  8234f4:	1000101e 	bne	r2,zero,823538 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  8234f8:	e0bfff0b 	ldhu	r2,-4(fp)
  8234fc:	1080008c 	andi	r2,r2,2
  823500:	1005003a 	cmpeq	r2,r2,zero
  823504:	10000c1e 	bne	r2,zero,823538 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  823508:	00000806 	br	82352c <OS_TaskStkClr+0x60>
                size--;
  82350c:	e0bffe17 	ldw	r2,-8(fp)
  823510:	10bfffc4 	addi	r2,r2,-1
  823514:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  823518:	e0bffd17 	ldw	r2,-12(fp)
  82351c:	10000015 	stw	zero,0(r2)
  823520:	e0bffd17 	ldw	r2,-12(fp)
  823524:	10800104 	addi	r2,r2,4
  823528:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  82352c:	e0bffe17 	ldw	r2,-8(fp)
  823530:	1004c03a 	cmpne	r2,r2,zero
  823534:	103ff51e 	bne	r2,zero,82350c <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  823538:	e037883a 	mov	sp,fp
  82353c:	df000017 	ldw	fp,0(sp)
  823540:	dec00104 	addi	sp,sp,4
  823544:	f800283a 	ret

00823548 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  823548:	defff904 	addi	sp,sp,-28
  82354c:	dfc00615 	stw	ra,24(sp)
  823550:	df000515 	stw	fp,20(sp)
  823554:	df000504 	addi	fp,sp,20
  823558:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  82355c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  823560:	008020f4 	movhi	r2,131
  823564:	10a9ec04 	addi	r2,r2,-22608
  823568:	10800003 	ldbu	r2,0(r2)
  82356c:	10803fcc 	andi	r2,r2,255
  823570:	1004c03a 	cmpne	r2,r2,zero
  823574:	1000421e 	bne	r2,zero,823680 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  823578:	e0bfff0b 	ldhu	r2,-4(fp)
  82357c:	1005003a 	cmpeq	r2,r2,zero
  823580:	10003f1e 	bne	r2,zero,823680 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  823584:	0005303a 	rdctl	r2,status
  823588:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  82358c:	e0fffc17 	ldw	r3,-16(fp)
  823590:	00bfff84 	movi	r2,-2
  823594:	1884703a 	and	r2,r3,r2
  823598:	1001703a 	wrctl	status,r2
  
  return context;
  82359c:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
  8235a0:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  8235a4:	008020f4 	movhi	r2,131
  8235a8:	10a9ed04 	addi	r2,r2,-22604
  8235ac:	10800017 	ldw	r2,0(r2)
  8235b0:	10800d03 	ldbu	r2,52(r2)
  8235b4:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  8235b8:	e13ffe03 	ldbu	r4,-8(fp)
  8235bc:	e0fffe03 	ldbu	r3,-8(fp)
  8235c0:	008020f4 	movhi	r2,131
  8235c4:	10a9ea44 	addi	r2,r2,-22615
  8235c8:	10c5883a 	add	r2,r2,r3
  8235cc:	10800003 	ldbu	r2,0(r2)
  8235d0:	1007883a 	mov	r3,r2
  8235d4:	008020f4 	movhi	r2,131
  8235d8:	10a9ed04 	addi	r2,r2,-22604
  8235dc:	10800017 	ldw	r2,0(r2)
  8235e0:	10800d43 	ldbu	r2,53(r2)
  8235e4:	0084303a 	nor	r2,zero,r2
  8235e8:	1884703a 	and	r2,r3,r2
  8235ec:	1007883a 	mov	r3,r2
  8235f0:	008020f4 	movhi	r2,131
  8235f4:	10a9ea44 	addi	r2,r2,-22615
  8235f8:	1105883a 	add	r2,r2,r4
  8235fc:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
  823600:	e0fffe03 	ldbu	r3,-8(fp)
  823604:	008020f4 	movhi	r2,131
  823608:	10a9ea44 	addi	r2,r2,-22615
  82360c:	10c5883a 	add	r2,r2,r3
  823610:	10800003 	ldbu	r2,0(r2)
  823614:	10803fcc 	andi	r2,r2,255
  823618:	1004c03a 	cmpne	r2,r2,zero
  82361c:	10000e1e 	bne	r2,zero,823658 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  823620:	008020f4 	movhi	r2,131
  823624:	10a9ed04 	addi	r2,r2,-22604
  823628:	10800017 	ldw	r2,0(r2)
  82362c:	10800d83 	ldbu	r2,54(r2)
  823630:	0084303a 	nor	r2,zero,r2
  823634:	1007883a 	mov	r3,r2
  823638:	008020f4 	movhi	r2,131
  82363c:	10a9ea04 	addi	r2,r2,-22616
  823640:	10800003 	ldbu	r2,0(r2)
  823644:	1884703a 	and	r2,r3,r2
  823648:	1007883a 	mov	r3,r2
  82364c:	008020f4 	movhi	r2,131
  823650:	10a9ea04 	addi	r2,r2,-22616
  823654:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  823658:	008020f4 	movhi	r2,131
  82365c:	10a9ed04 	addi	r2,r2,-22604
  823660:	10c00017 	ldw	r3,0(r2)
  823664:	e0bfff0b 	ldhu	r2,-4(fp)
  823668:	18800b8d 	sth	r2,46(r3)
  82366c:	e0bffd17 	ldw	r2,-12(fp)
  823670:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  823674:	e0bffb17 	ldw	r2,-20(fp)
  823678:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  82367c:	081d2540 	call	81d254 <OS_Sched>
    }
}
  823680:	e037883a 	mov	sp,fp
  823684:	dfc00117 	ldw	ra,4(sp)
  823688:	df000017 	ldw	fp,0(sp)
  82368c:	dec00204 	addi	sp,sp,8
  823690:	f800283a 	ret

00823694 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  823694:	defff604 	addi	sp,sp,-40
  823698:	dfc00915 	stw	ra,36(sp)
  82369c:	df000815 	stw	fp,32(sp)
  8236a0:	dc000715 	stw	r16,28(sp)
  8236a4:	df000704 	addi	fp,sp,28
  8236a8:	e13ffb05 	stb	r4,-20(fp)
  8236ac:	e17ffc05 	stb	r5,-16(fp)
  8236b0:	e1bffd05 	stb	r6,-12(fp)
  8236b4:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8236b8:	008020f4 	movhi	r2,131
  8236bc:	10a9ec04 	addi	r2,r2,-22608
  8236c0:	10800003 	ldbu	r2,0(r2)
  8236c4:	10803fcc 	andi	r2,r2,255
  8236c8:	1005003a 	cmpeq	r2,r2,zero
  8236cc:	1000031e 	bne	r2,zero,8236dc <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  8236d0:	00801544 	movi	r2,85
  8236d4:	e0bfff15 	stw	r2,-4(fp)
  8236d8:	00004406 	br	8237ec <OSTimeDlyHMSM+0x158>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  8236dc:	e0bffb03 	ldbu	r2,-20(fp)
  8236e0:	1004c03a 	cmpne	r2,r2,zero
  8236e4:	10000c1e 	bne	r2,zero,823718 <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
  8236e8:	e0bffc03 	ldbu	r2,-16(fp)
  8236ec:	1004c03a 	cmpne	r2,r2,zero
  8236f0:	1000091e 	bne	r2,zero,823718 <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
  8236f4:	e0bffd03 	ldbu	r2,-12(fp)
  8236f8:	1004c03a 	cmpne	r2,r2,zero
  8236fc:	1000061e 	bne	r2,zero,823718 <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
  823700:	e0bffe0b 	ldhu	r2,-8(fp)
  823704:	1004c03a 	cmpne	r2,r2,zero
  823708:	1000031e 	bne	r2,zero,823718 <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
  82370c:	00801504 	movi	r2,84
  823710:	e0bfff15 	stw	r2,-4(fp)
  823714:	00003506 	br	8237ec <OSTimeDlyHMSM+0x158>
                }
            }
        }
    }
    if (minutes > 59) {
  823718:	e0bffc03 	ldbu	r2,-16(fp)
  82371c:	10800f30 	cmpltui	r2,r2,60
  823720:	1000031e 	bne	r2,zero,823730 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  823724:	00801444 	movi	r2,81
  823728:	e0bfff15 	stw	r2,-4(fp)
  82372c:	00002f06 	br	8237ec <OSTimeDlyHMSM+0x158>
    }
    if (seconds > 59) {
  823730:	e0bffd03 	ldbu	r2,-12(fp)
  823734:	10800f30 	cmpltui	r2,r2,60
  823738:	1000031e 	bne	r2,zero,823748 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
  82373c:	00801484 	movi	r2,82
  823740:	e0bfff15 	stw	r2,-4(fp)
  823744:	00002906 	br	8237ec <OSTimeDlyHMSM+0x158>
    }
    if (ms > 999) {
  823748:	e0bffe0b 	ldhu	r2,-8(fp)
  82374c:	1080fa30 	cmpltui	r2,r2,1000
  823750:	1000031e 	bne	r2,zero,823760 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
  823754:	008014c4 	movi	r2,83
  823758:	e0bfff15 	stw	r2,-4(fp)
  82375c:	00002306 	br	8237ec <OSTimeDlyHMSM+0x158>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  823760:	e0bffb03 	ldbu	r2,-20(fp)
  823764:	10c38424 	muli	r3,r2,3600
  823768:	e0bffc03 	ldbu	r2,-16(fp)
  82376c:	10800f24 	muli	r2,r2,60
  823770:	1887883a 	add	r3,r3,r2
  823774:	e0bffd03 	ldbu	r2,-12(fp)
  823778:	1885883a 	add	r2,r3,r2
  82377c:	1400fa24 	muli	r16,r2,1000
  823780:	e0bffe0b 	ldhu	r2,-8(fp)
  823784:	1100fa24 	muli	r4,r2,1000
  823788:	0140fa04 	movi	r5,1000
  82378c:	08111d40 	call	8111d4 <__udivsi3>
  823790:	8085883a 	add	r2,r16,r2
  823794:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  823798:	e0bffa17 	ldw	r2,-24(fp)
  82379c:	1004d43a 	srli	r2,r2,16
  8237a0:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  8237a4:	e0bffa17 	ldw	r2,-24(fp)
  8237a8:	10bfffcc 	andi	r2,r2,65535
  8237ac:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  8237b0:	e0bffa17 	ldw	r2,-24(fp)
  8237b4:	113fffcc 	andi	r4,r2,65535
  8237b8:	08235480 	call	823548 <OSTimeDly>
    while (loops > 0) {
  8237bc:	00000706 	br	8237dc <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
  8237c0:	01200014 	movui	r4,32768
  8237c4:	08235480 	call	823548 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  8237c8:	01200014 	movui	r4,32768
  8237cc:	08235480 	call	823548 <OSTimeDly>
        loops--;
  8237d0:	e0bff90b 	ldhu	r2,-28(fp)
  8237d4:	10bfffc4 	addi	r2,r2,-1
  8237d8:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  8237dc:	e0bff90b 	ldhu	r2,-28(fp)
  8237e0:	1004c03a 	cmpne	r2,r2,zero
  8237e4:	103ff61e 	bne	r2,zero,8237c0 <OSTimeDlyHMSM+0x12c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  8237e8:	e03fff15 	stw	zero,-4(fp)
  8237ec:	e0bfff17 	ldw	r2,-4(fp)
}
  8237f0:	e037883a 	mov	sp,fp
  8237f4:	dfc00217 	ldw	ra,8(sp)
  8237f8:	df000117 	ldw	fp,4(sp)
  8237fc:	dc000017 	ldw	r16,0(sp)
  823800:	dec00304 	addi	sp,sp,12
  823804:	f800283a 	ret

00823808 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  823808:	defff404 	addi	sp,sp,-48
  82380c:	dfc00b15 	stw	ra,44(sp)
  823810:	df000a15 	stw	fp,40(sp)
  823814:	df000a04 	addi	fp,sp,40
  823818:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  82381c:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  823820:	e0bffe03 	ldbu	r2,-8(fp)
  823824:	10800530 	cmpltui	r2,r2,20
  823828:	1000031e 	bne	r2,zero,823838 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  82382c:	00800a84 	movi	r2,42
  823830:	e0bfff15 	stw	r2,-4(fp)
  823834:	00007206 	br	823a00 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  823838:	0005303a 	rdctl	r2,status
  82383c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  823840:	e0fffb17 	ldw	r3,-20(fp)
  823844:	00bfff84 	movi	r2,-2
  823848:	1884703a 	and	r2,r3,r2
  82384c:	1001703a 	wrctl	status,r2
  
  return context;
  823850:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  823854:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  823858:	e0bffe03 	ldbu	r2,-8(fp)
  82385c:	00c02534 	movhi	r3,148
  823860:	18f74604 	addi	r3,r3,-8936
  823864:	1085883a 	add	r2,r2,r2
  823868:	1085883a 	add	r2,r2,r2
  82386c:	10c5883a 	add	r2,r2,r3
  823870:	10800017 	ldw	r2,0(r2)
  823874:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
  823878:	e0bffd17 	ldw	r2,-12(fp)
  82387c:	1004c03a 	cmpne	r2,r2,zero
  823880:	1000071e 	bne	r2,zero,8238a0 <OSTimeDlyResume+0x98>
  823884:	e0bffc17 	ldw	r2,-16(fp)
  823888:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82388c:	e0bffa17 	ldw	r2,-24(fp)
  823890:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  823894:	008010c4 	movi	r2,67
  823898:	e0bfff15 	stw	r2,-4(fp)
  82389c:	00005806 	br	823a00 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  8238a0:	e0bffd17 	ldw	r2,-12(fp)
  8238a4:	10800058 	cmpnei	r2,r2,1
  8238a8:	1000071e 	bne	r2,zero,8238c8 <OSTimeDlyResume+0xc0>
  8238ac:	e0bffc17 	ldw	r2,-16(fp)
  8238b0:	e0bff915 	stw	r2,-28(fp)
  8238b4:	e0bff917 	ldw	r2,-28(fp)
  8238b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  8238bc:	008010c4 	movi	r2,67
  8238c0:	e0bfff15 	stw	r2,-4(fp)
  8238c4:	00004e06 	br	823a00 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  8238c8:	e0bffd17 	ldw	r2,-12(fp)
  8238cc:	10800b8b 	ldhu	r2,46(r2)
  8238d0:	10bfffcc 	andi	r2,r2,65535
  8238d4:	1004c03a 	cmpne	r2,r2,zero
  8238d8:	1000071e 	bne	r2,zero,8238f8 <OSTimeDlyResume+0xf0>
  8238dc:	e0bffc17 	ldw	r2,-16(fp)
  8238e0:	e0bff815 	stw	r2,-32(fp)
  8238e4:	e0bff817 	ldw	r2,-32(fp)
  8238e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  8238ec:	00801404 	movi	r2,80
  8238f0:	e0bfff15 	stw	r2,-4(fp)
  8238f4:	00004206 	br	823a00 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  8238f8:	e0bffd17 	ldw	r2,-12(fp)
  8238fc:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  823900:	e0bffd17 	ldw	r2,-12(fp)
  823904:	10800c03 	ldbu	r2,48(r2)
  823908:	10803fcc 	andi	r2,r2,255
  82390c:	10800dcc 	andi	r2,r2,55
  823910:	1005003a 	cmpeq	r2,r2,zero
  823914:	10000b1e 	bne	r2,zero,823944 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  823918:	e0bffd17 	ldw	r2,-12(fp)
  82391c:	10c00c03 	ldbu	r3,48(r2)
  823920:	00bff204 	movi	r2,-56
  823924:	1884703a 	and	r2,r3,r2
  823928:	1007883a 	mov	r3,r2
  82392c:	e0bffd17 	ldw	r2,-12(fp)
  823930:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  823934:	e0fffd17 	ldw	r3,-12(fp)
  823938:	00800044 	movi	r2,1
  82393c:	18800c45 	stb	r2,49(r3)
  823940:	00000206 	br	82394c <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  823944:	e0bffd17 	ldw	r2,-12(fp)
  823948:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  82394c:	e0bffd17 	ldw	r2,-12(fp)
  823950:	10800c03 	ldbu	r2,48(r2)
  823954:	10803fcc 	andi	r2,r2,255
  823958:	1080020c 	andi	r2,r2,8
  82395c:	1004c03a 	cmpne	r2,r2,zero
  823960:	1000221e 	bne	r2,zero,8239ec <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  823964:	e0bffd17 	ldw	r2,-12(fp)
  823968:	10c00d83 	ldbu	r3,54(r2)
  82396c:	008020f4 	movhi	r2,131
  823970:	10a9ea04 	addi	r2,r2,-22616
  823974:	10800003 	ldbu	r2,0(r2)
  823978:	1884b03a 	or	r2,r3,r2
  82397c:	1007883a 	mov	r3,r2
  823980:	008020f4 	movhi	r2,131
  823984:	10a9ea04 	addi	r2,r2,-22616
  823988:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  82398c:	e0bffd17 	ldw	r2,-12(fp)
  823990:	10800d03 	ldbu	r2,52(r2)
  823994:	11003fcc 	andi	r4,r2,255
  823998:	e0bffd17 	ldw	r2,-12(fp)
  82399c:	10800d03 	ldbu	r2,52(r2)
  8239a0:	10c03fcc 	andi	r3,r2,255
  8239a4:	008020f4 	movhi	r2,131
  8239a8:	10a9ea44 	addi	r2,r2,-22615
  8239ac:	10c5883a 	add	r2,r2,r3
  8239b0:	10c00003 	ldbu	r3,0(r2)
  8239b4:	e0bffd17 	ldw	r2,-12(fp)
  8239b8:	10800d43 	ldbu	r2,53(r2)
  8239bc:	1884b03a 	or	r2,r3,r2
  8239c0:	1007883a 	mov	r3,r2
  8239c4:	008020f4 	movhi	r2,131
  8239c8:	10a9ea44 	addi	r2,r2,-22615
  8239cc:	1105883a 	add	r2,r2,r4
  8239d0:	10c00005 	stb	r3,0(r2)
  8239d4:	e0bffc17 	ldw	r2,-16(fp)
  8239d8:	e0bff715 	stw	r2,-36(fp)
  8239dc:	e0bff717 	ldw	r2,-36(fp)
  8239e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  8239e4:	081d2540 	call	81d254 <OS_Sched>
  8239e8:	00000406 	br	8239fc <OSTimeDlyResume+0x1f4>
  8239ec:	e0bffc17 	ldw	r2,-16(fp)
  8239f0:	e0bff615 	stw	r2,-40(fp)
  8239f4:	e0bff617 	ldw	r2,-40(fp)
  8239f8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  8239fc:	e03fff15 	stw	zero,-4(fp)
  823a00:	e0bfff17 	ldw	r2,-4(fp)
}
  823a04:	e037883a 	mov	sp,fp
  823a08:	dfc00117 	ldw	ra,4(sp)
  823a0c:	df000017 	ldw	fp,0(sp)
  823a10:	dec00204 	addi	sp,sp,8
  823a14:	f800283a 	ret

00823a18 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  823a18:	defffb04 	addi	sp,sp,-20
  823a1c:	df000415 	stw	fp,16(sp)
  823a20:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  823a24:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  823a28:	0005303a 	rdctl	r2,status
  823a2c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  823a30:	e0fffd17 	ldw	r3,-12(fp)
  823a34:	00bfff84 	movi	r2,-2
  823a38:	1884703a 	and	r2,r3,r2
  823a3c:	1001703a 	wrctl	status,r2
  
  return context;
  823a40:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  823a44:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
  823a48:	008020f4 	movhi	r2,131
  823a4c:	10a9ee04 	addi	r2,r2,-22600
  823a50:	10800017 	ldw	r2,0(r2)
  823a54:	e0bfff15 	stw	r2,-4(fp)
  823a58:	e0bffe17 	ldw	r2,-8(fp)
  823a5c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  823a60:	e0bffc17 	ldw	r2,-16(fp)
  823a64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  823a68:	e0bfff17 	ldw	r2,-4(fp)
}
  823a6c:	e037883a 	mov	sp,fp
  823a70:	df000017 	ldw	fp,0(sp)
  823a74:	dec00104 	addi	sp,sp,4
  823a78:	f800283a 	ret

00823a7c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  823a7c:	defffb04 	addi	sp,sp,-20
  823a80:	df000415 	stw	fp,16(sp)
  823a84:	df000404 	addi	fp,sp,16
  823a88:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  823a8c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  823a90:	0005303a 	rdctl	r2,status
  823a94:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  823a98:	e0fffd17 	ldw	r3,-12(fp)
  823a9c:	00bfff84 	movi	r2,-2
  823aa0:	1884703a 	and	r2,r3,r2
  823aa4:	1001703a 	wrctl	status,r2
  
  return context;
  823aa8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  823aac:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
  823ab0:	00c020f4 	movhi	r3,131
  823ab4:	18e9ee04 	addi	r3,r3,-22600
  823ab8:	e0bfff17 	ldw	r2,-4(fp)
  823abc:	18800015 	stw	r2,0(r3)
  823ac0:	e0bffe17 	ldw	r2,-8(fp)
  823ac4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  823ac8:	e0bffc17 	ldw	r2,-16(fp)
  823acc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  823ad0:	e037883a 	mov	sp,fp
  823ad4:	df000017 	ldw	fp,0(sp)
  823ad8:	dec00104 	addi	sp,sp,4
  823adc:	f800283a 	ret

00823ae0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  823ae0:	defffd04 	addi	sp,sp,-12
  823ae4:	dfc00215 	stw	ra,8(sp)
  823ae8:	df000115 	stw	fp,4(sp)
  823aec:	df000104 	addi	fp,sp,4
  823af0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  823af4:	08269a80 	call	8269a8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  823af8:	00800044 	movi	r2,1
  823afc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  823b00:	e037883a 	mov	sp,fp
  823b04:	dfc00117 	ldw	ra,4(sp)
  823b08:	df000017 	ldw	fp,0(sp)
  823b0c:	dec00204 	addi	sp,sp,8
  823b10:	f800283a 	ret

00823b14 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  823b14:	defffe04 	addi	sp,sp,-8
  823b18:	dfc00115 	stw	ra,4(sp)
  823b1c:	df000015 	stw	fp,0(sp)
  823b20:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  823b24:	01006474 	movhi	r4,401
  823b28:	21241004 	addi	r4,r4,-28608
  823b2c:	000b883a 	mov	r5,zero
  823b30:	000d883a 	mov	r6,zero
  823b34:	01c0fa04 	movi	r7,1000
  823b38:	08249a40 	call	8249a4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  823b3c:	010020f4 	movhi	r4,131
  823b40:	21256404 	addi	r4,r4,-27248
  823b44:	000b883a 	mov	r5,zero
  823b48:	01800044 	movi	r6,1
  823b4c:	0823d200 	call	823d20 <altera_avalon_jtag_uart_init>
  823b50:	010020f4 	movhi	r4,131
  823b54:	21255a04 	addi	r4,r4,-27288
  823b58:	0823ba00 	call	823ba0 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SD_CARD_SPI_MASTER, sd_card_spi_master);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
  823b5c:	010020f4 	movhi	r4,131
  823b60:	21297504 	addi	r4,r4,-23084
  823b64:	0823ba00 	call	823ba0 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
  823b68:	010020f4 	movhi	r4,131
  823b6c:	21298104 	addi	r4,r4,-23036
  823b70:	0823ba00 	call	823ba0 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  823b74:	010020f4 	movhi	r4,131
  823b78:	21298d04 	addi	r4,r4,-22988
  823b7c:	0825a700 	call	825a70 <alt_up_character_lcd_init>
  823b80:	010020f4 	movhi	r4,131
  823b84:	21298d04 	addi	r4,r4,-22988
  823b88:	0823ba00 	call	823ba0 <alt_dev_reg>
}
  823b8c:	e037883a 	mov	sp,fp
  823b90:	dfc00117 	ldw	ra,4(sp)
  823b94:	df000017 	ldw	fp,0(sp)
  823b98:	dec00204 	addi	sp,sp,8
  823b9c:	f800283a 	ret

00823ba0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  823ba0:	defffd04 	addi	sp,sp,-12
  823ba4:	dfc00215 	stw	ra,8(sp)
  823ba8:	df000115 	stw	fp,4(sp)
  823bac:	df000104 	addi	fp,sp,4
  823bb0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  823bb4:	e13fff17 	ldw	r4,-4(fp)
  823bb8:	014020f4 	movhi	r5,131
  823bbc:	2969a104 	addi	r5,r5,-22908
  823bc0:	08261900 	call	826190 <alt_dev_llist_insert>
}
  823bc4:	e037883a 	mov	sp,fp
  823bc8:	dfc00117 	ldw	ra,4(sp)
  823bcc:	df000017 	ldw	fp,0(sp)
  823bd0:	dec00204 	addi	sp,sp,8
  823bd4:	f800283a 	ret

00823bd8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  823bd8:	defffa04 	addi	sp,sp,-24
  823bdc:	dfc00515 	stw	ra,20(sp)
  823be0:	df000415 	stw	fp,16(sp)
  823be4:	df000404 	addi	fp,sp,16
  823be8:	e13ffd15 	stw	r4,-12(fp)
  823bec:	e17ffe15 	stw	r5,-8(fp)
  823bf0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  823bf4:	e0bffd17 	ldw	r2,-12(fp)
  823bf8:	10800017 	ldw	r2,0(r2)
  823bfc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  823c00:	e0bffc17 	ldw	r2,-16(fp)
  823c04:	11000a04 	addi	r4,r2,40
  823c08:	e0bffd17 	ldw	r2,-12(fp)
  823c0c:	11c00217 	ldw	r7,8(r2)
  823c10:	e17ffe17 	ldw	r5,-8(fp)
  823c14:	e1bfff17 	ldw	r6,-4(fp)
  823c18:	08243940 	call	824394 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  823c1c:	e037883a 	mov	sp,fp
  823c20:	dfc00117 	ldw	ra,4(sp)
  823c24:	df000017 	ldw	fp,0(sp)
  823c28:	dec00204 	addi	sp,sp,8
  823c2c:	f800283a 	ret

00823c30 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  823c30:	defffa04 	addi	sp,sp,-24
  823c34:	dfc00515 	stw	ra,20(sp)
  823c38:	df000415 	stw	fp,16(sp)
  823c3c:	df000404 	addi	fp,sp,16
  823c40:	e13ffd15 	stw	r4,-12(fp)
  823c44:	e17ffe15 	stw	r5,-8(fp)
  823c48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  823c4c:	e0bffd17 	ldw	r2,-12(fp)
  823c50:	10800017 	ldw	r2,0(r2)
  823c54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  823c58:	e0bffc17 	ldw	r2,-16(fp)
  823c5c:	11000a04 	addi	r4,r2,40
  823c60:	e0bffd17 	ldw	r2,-12(fp)
  823c64:	11c00217 	ldw	r7,8(r2)
  823c68:	e17ffe17 	ldw	r5,-8(fp)
  823c6c:	e1bfff17 	ldw	r6,-4(fp)
  823c70:	08246540 	call	824654 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  823c74:	e037883a 	mov	sp,fp
  823c78:	dfc00117 	ldw	ra,4(sp)
  823c7c:	df000017 	ldw	fp,0(sp)
  823c80:	dec00204 	addi	sp,sp,8
  823c84:	f800283a 	ret

00823c88 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  823c88:	defffc04 	addi	sp,sp,-16
  823c8c:	dfc00315 	stw	ra,12(sp)
  823c90:	df000215 	stw	fp,8(sp)
  823c94:	df000204 	addi	fp,sp,8
  823c98:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  823c9c:	e0bfff17 	ldw	r2,-4(fp)
  823ca0:	10800017 	ldw	r2,0(r2)
  823ca4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  823ca8:	e0bffe17 	ldw	r2,-8(fp)
  823cac:	11000a04 	addi	r4,r2,40
  823cb0:	e0bfff17 	ldw	r2,-4(fp)
  823cb4:	11400217 	ldw	r5,8(r2)
  823cb8:	082422c0 	call	82422c <altera_avalon_jtag_uart_close>
}
  823cbc:	e037883a 	mov	sp,fp
  823cc0:	dfc00117 	ldw	ra,4(sp)
  823cc4:	df000017 	ldw	fp,0(sp)
  823cc8:	dec00204 	addi	sp,sp,8
  823ccc:	f800283a 	ret

00823cd0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  823cd0:	defffa04 	addi	sp,sp,-24
  823cd4:	dfc00515 	stw	ra,20(sp)
  823cd8:	df000415 	stw	fp,16(sp)
  823cdc:	df000404 	addi	fp,sp,16
  823ce0:	e13ffd15 	stw	r4,-12(fp)
  823ce4:	e17ffe15 	stw	r5,-8(fp)
  823ce8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  823cec:	e0bffd17 	ldw	r2,-12(fp)
  823cf0:	10800017 	ldw	r2,0(r2)
  823cf4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  823cf8:	e0bffc17 	ldw	r2,-16(fp)
  823cfc:	11000a04 	addi	r4,r2,40
  823d00:	e17ffe17 	ldw	r5,-8(fp)
  823d04:	e1bfff17 	ldw	r6,-4(fp)
  823d08:	08242a00 	call	8242a0 <altera_avalon_jtag_uart_ioctl>
}
  823d0c:	e037883a 	mov	sp,fp
  823d10:	dfc00117 	ldw	ra,4(sp)
  823d14:	df000017 	ldw	fp,0(sp)
  823d18:	dec00204 	addi	sp,sp,8
  823d1c:	f800283a 	ret

00823d20 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  823d20:	defff504 	addi	sp,sp,-44
  823d24:	dfc00a15 	stw	ra,40(sp)
  823d28:	df000915 	stw	fp,36(sp)
  823d2c:	df000904 	addi	fp,sp,36
  823d30:	e13ffd15 	stw	r4,-12(fp)
  823d34:	e17ffe15 	stw	r5,-8(fp)
  823d38:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  823d3c:	e0bffd17 	ldw	r2,-12(fp)
  823d40:	10800c04 	addi	r2,r2,48
  823d44:	e0bffb15 	stw	r2,-20(fp)
  823d48:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  823d4c:	e13ffc0b 	ldhu	r4,-16(fp)
  823d50:	e17ffc84 	addi	r5,fp,-14
  823d54:	081ddfc0 	call	81ddfc <OSFlagCreate>
  823d58:	1007883a 	mov	r3,r2
  823d5c:	e0bffb17 	ldw	r2,-20(fp)
  823d60:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  823d64:	e0bffd17 	ldw	r2,-12(fp)
  823d68:	10800a04 	addi	r2,r2,40
  823d6c:	e0bff915 	stw	r2,-28(fp)
  823d70:	00800044 	movi	r2,1
  823d74:	e0bffa0d 	sth	r2,-24(fp)
  823d78:	e13ffa0b 	ldhu	r4,-24(fp)
  823d7c:	08210000 	call	821000 <OSSemCreate>
  823d80:	1007883a 	mov	r3,r2
  823d84:	e0bff917 	ldw	r2,-28(fp)
  823d88:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  823d8c:	e0bffd17 	ldw	r2,-12(fp)
  823d90:	10800b04 	addi	r2,r2,44
  823d94:	e0bff715 	stw	r2,-36(fp)
  823d98:	00800044 	movi	r2,1
  823d9c:	e0bff80d 	sth	r2,-32(fp)
  823da0:	e13ff80b 	ldhu	r4,-32(fp)
  823da4:	08210000 	call	821000 <OSSemCreate>
  823da8:	1007883a 	mov	r3,r2
  823dac:	e0bff717 	ldw	r2,-36(fp)
  823db0:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  823db4:	e0fffd17 	ldw	r3,-12(fp)
  823db8:	00800044 	movi	r2,1
  823dbc:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  823dc0:	e0bffd17 	ldw	r2,-12(fp)
  823dc4:	10800017 	ldw	r2,0(r2)
  823dc8:	11000104 	addi	r4,r2,4
  823dcc:	e0bffd17 	ldw	r2,-12(fp)
  823dd0:	10800817 	ldw	r2,32(r2)
  823dd4:	1007883a 	mov	r3,r2
  823dd8:	2005883a 	mov	r2,r4
  823ddc:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  823de0:	e13fff17 	ldw	r4,-4(fp)
  823de4:	e17ffd17 	ldw	r5,-12(fp)
  823de8:	018020b4 	movhi	r6,130
  823dec:	318f9404 	addi	r6,r6,15952
  823df0:	081ab080 	call	81ab08 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  823df4:	e0bffd17 	ldw	r2,-12(fp)
  823df8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  823dfc:	e0bffd17 	ldw	r2,-12(fp)
  823e00:	11000204 	addi	r4,r2,8
  823e04:	008020f4 	movhi	r2,131
  823e08:	10a9f204 	addi	r2,r2,-22584
  823e0c:	10800017 	ldw	r2,0(r2)
  823e10:	100b883a 	mov	r5,r2
  823e14:	018020b4 	movhi	r6,130
  823e18:	31904604 	addi	r6,r6,16664
  823e1c:	e1fffd17 	ldw	r7,-12(fp)
  823e20:	0825ef00 	call	825ef0 <alt_alarm_start>
  823e24:	1004403a 	cmpge	r2,r2,zero
  823e28:	1000041e 	bne	r2,zero,823e3c <altera_avalon_jtag_uart_init+0x11c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  823e2c:	e0fffd17 	ldw	r3,-12(fp)
  823e30:	00a00034 	movhi	r2,32768
  823e34:	10bfffc4 	addi	r2,r2,-1
  823e38:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  823e3c:	e037883a 	mov	sp,fp
  823e40:	dfc00117 	ldw	ra,4(sp)
  823e44:	df000017 	ldw	fp,0(sp)
  823e48:	dec00204 	addi	sp,sp,8
  823e4c:	f800283a 	ret

00823e50 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  823e50:	defff104 	addi	sp,sp,-60
  823e54:	dfc00e15 	stw	ra,56(sp)
  823e58:	df000d15 	stw	fp,52(sp)
  823e5c:	df000d04 	addi	fp,sp,52
  823e60:	e13ffe15 	stw	r4,-8(fp)
  823e64:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  823e68:	e0bffe17 	ldw	r2,-8(fp)
  823e6c:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
  823e70:	e0bffc17 	ldw	r2,-16(fp)
  823e74:	10800017 	ldw	r2,0(r2)
  823e78:	e0bffb15 	stw	r2,-20(fp)
  823e7c:	00000006 	br	823e80 <altera_avalon_jtag_uart_irq+0x30>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  823e80:	e0bffb17 	ldw	r2,-20(fp)
  823e84:	10800104 	addi	r2,r2,4
  823e88:	10800037 	ldwio	r2,0(r2)
  823e8c:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  823e90:	e0bffa17 	ldw	r2,-24(fp)
  823e94:	1080c00c 	andi	r2,r2,768
  823e98:	1005003a 	cmpeq	r2,r2,zero
  823e9c:	1000991e 	bne	r2,zero,824104 <altera_avalon_jtag_uart_irq+0x2b4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  823ea0:	e0bffa17 	ldw	r2,-24(fp)
  823ea4:	1080400c 	andi	r2,r2,256
  823ea8:	1005003a 	cmpeq	r2,r2,zero
  823eac:	1000481e 	bne	r2,zero,823fd0 <altera_avalon_jtag_uart_irq+0x180>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  823eb0:	00800074 	movhi	r2,1
  823eb4:	e0bff915 	stw	r2,-28(fp)
  823eb8:	00000006 	br	823ebc <altera_avalon_jtag_uart_irq+0x6c>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  823ebc:	e0bffc17 	ldw	r2,-16(fp)
  823ec0:	10800d17 	ldw	r2,52(r2)
  823ec4:	10800044 	addi	r2,r2,1
  823ec8:	1081ffcc 	andi	r2,r2,2047
  823ecc:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
  823ed0:	e0bffc17 	ldw	r2,-16(fp)
  823ed4:	10c00e17 	ldw	r3,56(r2)
  823ed8:	e0bff817 	ldw	r2,-32(fp)
  823edc:	18802826 	beq	r3,r2,823f80 <altera_avalon_jtag_uart_irq+0x130>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  823ee0:	e0bffb17 	ldw	r2,-20(fp)
  823ee4:	10800037 	ldwio	r2,0(r2)
  823ee8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  823eec:	e0bff917 	ldw	r2,-28(fp)
  823ef0:	10a0000c 	andi	r2,r2,32768
  823ef4:	1005003a 	cmpeq	r2,r2,zero
  823ef8:	1000211e 	bne	r2,zero,823f80 <altera_avalon_jtag_uart_irq+0x130>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  823efc:	e0bffc17 	ldw	r2,-16(fp)
  823f00:	10c00d17 	ldw	r3,52(r2)
  823f04:	e0bff917 	ldw	r2,-28(fp)
  823f08:	1009883a 	mov	r4,r2
  823f0c:	e0bffc17 	ldw	r2,-16(fp)
  823f10:	1885883a 	add	r2,r3,r2
  823f14:	10801104 	addi	r2,r2,68
  823f18:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  823f1c:	e0bffc17 	ldw	r2,-16(fp)
  823f20:	10800d17 	ldw	r2,52(r2)
  823f24:	10800044 	addi	r2,r2,1
  823f28:	10c1ffcc 	andi	r3,r2,2047
  823f2c:	e0bffc17 	ldw	r2,-16(fp)
  823f30:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  823f34:	e0bffc17 	ldw	r2,-16(fp)
  823f38:	10800c17 	ldw	r2,48(r2)
  823f3c:	e0bff515 	stw	r2,-44(fp)
  823f40:	00800044 	movi	r2,1
  823f44:	e0bff60d 	sth	r2,-40(fp)
  823f48:	00800044 	movi	r2,1
  823f4c:	e0bff685 	stb	r2,-38(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  823f50:	008020f4 	movhi	r2,131
  823f54:	10a9de44 	addi	r2,r2,-22663
  823f58:	10800003 	ldbu	r2,0(r2)
  823f5c:	10803fcc 	andi	r2,r2,255
  823f60:	1005003a 	cmpeq	r2,r2,zero
  823f64:	103fd51e 	bne	r2,zero,823ebc <altera_avalon_jtag_uart_irq+0x6c>
  {
    OSFlagPost (group, flags, opt, &err);
  823f68:	e17ff60b 	ldhu	r5,-40(fp)
  823f6c:	e1bff683 	ldbu	r6,-38(fp)
  823f70:	e1fffd04 	addi	r7,fp,-12
  823f74:	e13ff517 	ldw	r4,-44(fp)
  823f78:	081eb240 	call	81eb24 <OSFlagPost>
    return err;
  823f7c:	003fcf06 	br	823ebc <altera_avalon_jtag_uart_irq+0x6c>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  823f80:	e0bff917 	ldw	r2,-28(fp)
  823f84:	10bfffec 	andhi	r2,r2,65535
  823f88:	1005003a 	cmpeq	r2,r2,zero
  823f8c:	1000101e 	bne	r2,zero,823fd0 <altera_avalon_jtag_uart_irq+0x180>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  823f90:	e0bffc17 	ldw	r2,-16(fp)
  823f94:	10c00817 	ldw	r3,32(r2)
  823f98:	00bfff84 	movi	r2,-2
  823f9c:	1886703a 	and	r3,r3,r2
  823fa0:	e0bffc17 	ldw	r2,-16(fp)
  823fa4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  823fa8:	e0bffb17 	ldw	r2,-20(fp)
  823fac:	11000104 	addi	r4,r2,4
  823fb0:	e0bffc17 	ldw	r2,-16(fp)
  823fb4:	10800817 	ldw	r2,32(r2)
  823fb8:	1007883a 	mov	r3,r2
  823fbc:	2005883a 	mov	r2,r4
  823fc0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  823fc4:	e0bffb17 	ldw	r2,-20(fp)
  823fc8:	10800104 	addi	r2,r2,4
  823fcc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  823fd0:	e0bffa17 	ldw	r2,-24(fp)
  823fd4:	1080800c 	andi	r2,r2,512
  823fd8:	1005003a 	cmpeq	r2,r2,zero
  823fdc:	103fa81e 	bne	r2,zero,823e80 <altera_avalon_jtag_uart_irq+0x30>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  823fe0:	e0bffa17 	ldw	r2,-24(fp)
  823fe4:	10bfffec 	andhi	r2,r2,65535
  823fe8:	1004d43a 	srli	r2,r2,16
  823fec:	e0bff715 	stw	r2,-36(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  823ff0:	00002706 	br	824090 <altera_avalon_jtag_uart_irq+0x240>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  823ff4:	e13ffb17 	ldw	r4,-20(fp)
  823ff8:	e0bffc17 	ldw	r2,-16(fp)
  823ffc:	10c01017 	ldw	r3,64(r2)
  824000:	e0bffc17 	ldw	r2,-16(fp)
  824004:	1885883a 	add	r2,r3,r2
  824008:	10821104 	addi	r2,r2,2116
  82400c:	10800003 	ldbu	r2,0(r2)
  824010:	10c03fcc 	andi	r3,r2,255
  824014:	18c0201c 	xori	r3,r3,128
  824018:	18ffe004 	addi	r3,r3,-128
  82401c:	2005883a 	mov	r2,r4
  824020:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  824024:	e0bffc17 	ldw	r2,-16(fp)
  824028:	10801017 	ldw	r2,64(r2)
  82402c:	10800044 	addi	r2,r2,1
  824030:	10c1ffcc 	andi	r3,r2,2047
  824034:	e0bffc17 	ldw	r2,-16(fp)
  824038:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  82403c:	e0bffc17 	ldw	r2,-16(fp)
  824040:	10800c17 	ldw	r2,48(r2)
  824044:	e0bff315 	stw	r2,-52(fp)
  824048:	00800084 	movi	r2,2
  82404c:	e0bff40d 	sth	r2,-48(fp)
  824050:	00800044 	movi	r2,1
  824054:	e0bff485 	stb	r2,-46(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  824058:	008020f4 	movhi	r2,131
  82405c:	10a9de44 	addi	r2,r2,-22663
  824060:	10800003 	ldbu	r2,0(r2)
  824064:	10803fcc 	andi	r2,r2,255
  824068:	1005003a 	cmpeq	r2,r2,zero
  82406c:	1000051e 	bne	r2,zero,824084 <altera_avalon_jtag_uart_irq+0x234>
  {
    OSFlagPost (group, flags, opt, &err);
  824070:	e17ff40b 	ldhu	r5,-48(fp)
  824074:	e1bff483 	ldbu	r6,-46(fp)
  824078:	e1fffd44 	addi	r7,fp,-11
  82407c:	e13ff317 	ldw	r4,-52(fp)
  824080:	081eb240 	call	81eb24 <OSFlagPost>

        space--;
  824084:	e0bff717 	ldw	r2,-36(fp)
  824088:	10bfffc4 	addi	r2,r2,-1
  82408c:	e0bff715 	stw	r2,-36(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  824090:	e0bff717 	ldw	r2,-36(fp)
  824094:	1005003a 	cmpeq	r2,r2,zero
  824098:	1000051e 	bne	r2,zero,8240b0 <altera_avalon_jtag_uart_irq+0x260>
  82409c:	e0bffc17 	ldw	r2,-16(fp)
  8240a0:	10c01017 	ldw	r3,64(r2)
  8240a4:	e0bffc17 	ldw	r2,-16(fp)
  8240a8:	10800f17 	ldw	r2,60(r2)
  8240ac:	18bfd11e 	bne	r3,r2,823ff4 <altera_avalon_jtag_uart_irq+0x1a4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  8240b0:	e0bff717 	ldw	r2,-36(fp)
  8240b4:	1005003a 	cmpeq	r2,r2,zero
  8240b8:	103f711e 	bne	r2,zero,823e80 <altera_avalon_jtag_uart_irq+0x30>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8240bc:	e0bffc17 	ldw	r2,-16(fp)
  8240c0:	10c00817 	ldw	r3,32(r2)
  8240c4:	00bfff44 	movi	r2,-3
  8240c8:	1886703a 	and	r3,r3,r2
  8240cc:	e0bffc17 	ldw	r2,-16(fp)
  8240d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8240d4:	e0bffc17 	ldw	r2,-16(fp)
  8240d8:	10800017 	ldw	r2,0(r2)
  8240dc:	11000104 	addi	r4,r2,4
  8240e0:	e0bffc17 	ldw	r2,-16(fp)
  8240e4:	10800817 	ldw	r2,32(r2)
  8240e8:	1007883a 	mov	r3,r2
  8240ec:	2005883a 	mov	r2,r4
  8240f0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8240f4:	e0bffb17 	ldw	r2,-20(fp)
  8240f8:	10800104 	addi	r2,r2,4
  8240fc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  824100:	003f5f06 	br	823e80 <altera_avalon_jtag_uart_irq+0x30>
}
  824104:	e037883a 	mov	sp,fp
  824108:	dfc00117 	ldw	ra,4(sp)
  82410c:	df000017 	ldw	fp,0(sp)
  824110:	dec00204 	addi	sp,sp,8
  824114:	f800283a 	ret

00824118 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  824118:	defff804 	addi	sp,sp,-32
  82411c:	dfc00715 	stw	ra,28(sp)
  824120:	df000615 	stw	fp,24(sp)
  824124:	df000604 	addi	fp,sp,24
  824128:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  82412c:	e0bfff17 	ldw	r2,-4(fp)
  824130:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  824134:	e0bffd17 	ldw	r2,-12(fp)
  824138:	10800017 	ldw	r2,0(r2)
  82413c:	10800104 	addi	r2,r2,4
  824140:	10800037 	ldwio	r2,0(r2)
  824144:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  824148:	e0bffc17 	ldw	r2,-16(fp)
  82414c:	1081000c 	andi	r2,r2,1024
  824150:	1005003a 	cmpeq	r2,r2,zero
  824154:	10000c1e 	bne	r2,zero,824188 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  824158:	e0bffd17 	ldw	r2,-12(fp)
  82415c:	10800017 	ldw	r2,0(r2)
  824160:	11000104 	addi	r4,r2,4
  824164:	e0bffd17 	ldw	r2,-12(fp)
  824168:	10800817 	ldw	r2,32(r2)
  82416c:	10810014 	ori	r2,r2,1024
  824170:	1007883a 	mov	r3,r2
  824174:	2005883a 	mov	r2,r4
  824178:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  82417c:	e0bffd17 	ldw	r2,-12(fp)
  824180:	10000915 	stw	zero,36(r2)
  824184:	00002106 	br	82420c <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  824188:	e0bffd17 	ldw	r2,-12(fp)
  82418c:	10c00917 	ldw	r3,36(r2)
  824190:	00a00034 	movhi	r2,32768
  824194:	10bfff04 	addi	r2,r2,-4
  824198:	10c01c36 	bltu	r2,r3,82420c <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
  82419c:	e0bffd17 	ldw	r2,-12(fp)
  8241a0:	10800917 	ldw	r2,36(r2)
  8241a4:	10c00044 	addi	r3,r2,1
  8241a8:	e0bffd17 	ldw	r2,-12(fp)
  8241ac:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  8241b0:	e0bffd17 	ldw	r2,-12(fp)
  8241b4:	10c00917 	ldw	r3,36(r2)
  8241b8:	e0bffd17 	ldw	r2,-12(fp)
  8241bc:	10800117 	ldw	r2,4(r2)
  8241c0:	18801236 	bltu	r3,r2,82420c <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  8241c4:	e0bffd17 	ldw	r2,-12(fp)
  8241c8:	10800c17 	ldw	r2,48(r2)
  8241cc:	e0bffa15 	stw	r2,-24(fp)
  8241d0:	00800104 	movi	r2,4
  8241d4:	e0bffb0d 	sth	r2,-20(fp)
  8241d8:	00800044 	movi	r2,1
  8241dc:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  8241e0:	008020f4 	movhi	r2,131
  8241e4:	10a9de44 	addi	r2,r2,-22663
  8241e8:	10800003 	ldbu	r2,0(r2)
  8241ec:	10803fcc 	andi	r2,r2,255
  8241f0:	1005003a 	cmpeq	r2,r2,zero
  8241f4:	1000051e 	bne	r2,zero,82420c <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
  8241f8:	e17ffb0b 	ldhu	r5,-20(fp)
  8241fc:	e1bffb83 	ldbu	r6,-18(fp)
  824200:	e1fffe04 	addi	r7,fp,-8
  824204:	e13ffa17 	ldw	r4,-24(fp)
  824208:	081eb240 	call	81eb24 <OSFlagPost>
  82420c:	008020f4 	movhi	r2,131
  824210:	10a9f204 	addi	r2,r2,-22584
  824214:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
  824218:	e037883a 	mov	sp,fp
  82421c:	dfc00117 	ldw	ra,4(sp)
  824220:	df000017 	ldw	fp,0(sp)
  824224:	dec00204 	addi	sp,sp,8
  824228:	f800283a 	ret

0082422c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  82422c:	defffc04 	addi	sp,sp,-16
  824230:	df000315 	stw	fp,12(sp)
  824234:	df000304 	addi	fp,sp,12
  824238:	e13ffd15 	stw	r4,-12(fp)
  82423c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  824240:	00000706 	br	824260 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  824244:	e0bffe17 	ldw	r2,-8(fp)
  824248:	1090000c 	andi	r2,r2,16384
  82424c:	1005003a 	cmpeq	r2,r2,zero
  824250:	1000031e 	bne	r2,zero,824260 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  824254:	00bffd44 	movi	r2,-11
  824258:	e0bfff15 	stw	r2,-4(fp)
  82425c:	00000b06 	br	82428c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  824260:	e0bffd17 	ldw	r2,-12(fp)
  824264:	10c01017 	ldw	r3,64(r2)
  824268:	e0bffd17 	ldw	r2,-12(fp)
  82426c:	10800f17 	ldw	r2,60(r2)
  824270:	18800526 	beq	r3,r2,824288 <altera_avalon_jtag_uart_close+0x5c>
  824274:	e0bffd17 	ldw	r2,-12(fp)
  824278:	10c00917 	ldw	r3,36(r2)
  82427c:	e0bffd17 	ldw	r2,-12(fp)
  824280:	10800117 	ldw	r2,4(r2)
  824284:	18bfef36 	bltu	r3,r2,824244 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  824288:	e03fff15 	stw	zero,-4(fp)
  82428c:	e0bfff17 	ldw	r2,-4(fp)
}
  824290:	e037883a 	mov	sp,fp
  824294:	df000017 	ldw	fp,0(sp)
  824298:	dec00104 	addi	sp,sp,4
  82429c:	f800283a 	ret

008242a0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  8242a0:	defff804 	addi	sp,sp,-32
  8242a4:	df000715 	stw	fp,28(sp)
  8242a8:	df000704 	addi	fp,sp,28
  8242ac:	e13ffb15 	stw	r4,-20(fp)
  8242b0:	e17ffc15 	stw	r5,-16(fp)
  8242b4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  8242b8:	00bff9c4 	movi	r2,-25
  8242bc:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  8242c0:	e0bffc17 	ldw	r2,-16(fp)
  8242c4:	e0bfff15 	stw	r2,-4(fp)
  8242c8:	e0ffff17 	ldw	r3,-4(fp)
  8242cc:	189a8060 	cmpeqi	r2,r3,27137
  8242d0:	1000041e 	bne	r2,zero,8242e4 <altera_avalon_jtag_uart_ioctl+0x44>
  8242d4:	e0ffff17 	ldw	r3,-4(fp)
  8242d8:	189a80a0 	cmpeqi	r2,r3,27138
  8242dc:	10001b1e 	bne	r2,zero,82434c <altera_avalon_jtag_uart_ioctl+0xac>
  8242e0:	00002706 	br	824380 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  8242e4:	e0bffb17 	ldw	r2,-20(fp)
  8242e8:	10c00117 	ldw	r3,4(r2)
  8242ec:	00a00034 	movhi	r2,32768
  8242f0:	10bfffc4 	addi	r2,r2,-1
  8242f4:	18802226 	beq	r3,r2,824380 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  8242f8:	e0bffd17 	ldw	r2,-12(fp)
  8242fc:	10800017 	ldw	r2,0(r2)
  824300:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  824304:	e0bff917 	ldw	r2,-28(fp)
  824308:	10800090 	cmplti	r2,r2,2
  82430c:	1000071e 	bne	r2,zero,82432c <altera_avalon_jtag_uart_ioctl+0x8c>
  824310:	e0fff917 	ldw	r3,-28(fp)
  824314:	00a00034 	movhi	r2,32768
  824318:	10bfffc4 	addi	r2,r2,-1
  82431c:	18800326 	beq	r3,r2,82432c <altera_avalon_jtag_uart_ioctl+0x8c>
  824320:	e0bff917 	ldw	r2,-28(fp)
  824324:	e0bffe15 	stw	r2,-8(fp)
  824328:	00000306 	br	824338 <altera_avalon_jtag_uart_ioctl+0x98>
  82432c:	00e00034 	movhi	r3,32768
  824330:	18ffff84 	addi	r3,r3,-2
  824334:	e0fffe15 	stw	r3,-8(fp)
  824338:	e0bffb17 	ldw	r2,-20(fp)
  82433c:	e0fffe17 	ldw	r3,-8(fp)
  824340:	10c00115 	stw	r3,4(r2)
      rc = 0;
  824344:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  824348:	00000d06 	br	824380 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  82434c:	e0bffb17 	ldw	r2,-20(fp)
  824350:	10c00117 	ldw	r3,4(r2)
  824354:	00a00034 	movhi	r2,32768
  824358:	10bfffc4 	addi	r2,r2,-1
  82435c:	18800826 	beq	r3,r2,824380 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  824360:	e13ffd17 	ldw	r4,-12(fp)
  824364:	e0bffb17 	ldw	r2,-20(fp)
  824368:	10c00917 	ldw	r3,36(r2)
  82436c:	e0bffb17 	ldw	r2,-20(fp)
  824370:	10800117 	ldw	r2,4(r2)
  824374:	1885803a 	cmpltu	r2,r3,r2
  824378:	20800015 	stw	r2,0(r4)
      rc = 0;
  82437c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  824380:	e0bffa17 	ldw	r2,-24(fp)
}
  824384:	e037883a 	mov	sp,fp
  824388:	df000017 	ldw	fp,0(sp)
  82438c:	dec00104 	addi	sp,sp,4
  824390:	f800283a 	ret

00824394 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  824394:	deffeb04 	addi	sp,sp,-84
  824398:	dfc01415 	stw	ra,80(sp)
  82439c:	df001315 	stw	fp,76(sp)
  8243a0:	df001304 	addi	fp,sp,76
  8243a4:	e13ffb15 	stw	r4,-20(fp)
  8243a8:	e17ffc15 	stw	r5,-16(fp)
  8243ac:	e1bffd15 	stw	r6,-12(fp)
  8243b0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  8243b4:	e0bffc17 	ldw	r2,-16(fp)
  8243b8:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  8243bc:	e0bffb17 	ldw	r2,-20(fp)
  8243c0:	10800a17 	ldw	r2,40(r2)
  8243c4:	e0bff315 	stw	r2,-52(fp)
  8243c8:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  8243cc:	e17ff40b 	ldhu	r5,-48(fp)
  8243d0:	e1bffa44 	addi	r6,fp,-23
  8243d4:	e13ff317 	ldw	r4,-52(fp)
  8243d8:	08213b40 	call	8213b4 <OSSemPend>

  while (space > 0)
  8243dc:	00006406 	br	824570 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  8243e0:	e0bffb17 	ldw	r2,-20(fp)
  8243e4:	10800d17 	ldw	r2,52(r2)
  8243e8:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
  8243ec:	e0bffb17 	ldw	r2,-20(fp)
  8243f0:	10800e17 	ldw	r2,56(r2)
  8243f4:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
  8243f8:	e0fff617 	ldw	r3,-40(fp)
  8243fc:	e0bff517 	ldw	r2,-44(fp)
  824400:	18800536 	bltu	r3,r2,824418 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
  824404:	e0bff617 	ldw	r2,-40(fp)
  824408:	e0fff517 	ldw	r3,-44(fp)
  82440c:	10c5c83a 	sub	r2,r2,r3
  824410:	e0bff715 	stw	r2,-36(fp)
  824414:	00000406 	br	824428 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  824418:	00820004 	movi	r2,2048
  82441c:	e0fff517 	ldw	r3,-44(fp)
  824420:	10c5c83a 	sub	r2,r2,r3
  824424:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  824428:	e0bff717 	ldw	r2,-36(fp)
  82442c:	1005003a 	cmpeq	r2,r2,zero
  824430:	10001f1e 	bne	r2,zero,8244b0 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  824434:	e0fffd17 	ldw	r3,-12(fp)
  824438:	e0bff717 	ldw	r2,-36(fp)
  82443c:	1880022e 	bgeu	r3,r2,824448 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
  824440:	e0bffd17 	ldw	r2,-12(fp)
  824444:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  824448:	e0bffb17 	ldw	r2,-20(fp)
  82444c:	10c01104 	addi	r3,r2,68
  824450:	e0bff517 	ldw	r2,-44(fp)
  824454:	1887883a 	add	r3,r3,r2
  824458:	e0bff917 	ldw	r2,-28(fp)
  82445c:	1009883a 	mov	r4,r2
  824460:	180b883a 	mov	r5,r3
  824464:	e1bff717 	ldw	r6,-36(fp)
  824468:	08122840 	call	812284 <memcpy>
      ptr   += n;
  82446c:	e0fff717 	ldw	r3,-36(fp)
  824470:	e0bff917 	ldw	r2,-28(fp)
  824474:	10c5883a 	add	r2,r2,r3
  824478:	e0bff915 	stw	r2,-28(fp)
      space -= n;
  82447c:	e0fffd17 	ldw	r3,-12(fp)
  824480:	e0bff717 	ldw	r2,-36(fp)
  824484:	1885c83a 	sub	r2,r3,r2
  824488:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  82448c:	e0fff517 	ldw	r3,-44(fp)
  824490:	e0bff717 	ldw	r2,-36(fp)
  824494:	1885883a 	add	r2,r3,r2
  824498:	10c1ffcc 	andi	r3,r2,2047
  82449c:	e0bffb17 	ldw	r2,-20(fp)
  8244a0:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  8244a4:	e0bffd17 	ldw	r2,-12(fp)
  8244a8:	10800048 	cmpgei	r2,r2,1
  8244ac:	103fcc1e 	bne	r2,zero,8243e0 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
  8244b0:	e0fff917 	ldw	r3,-28(fp)
  8244b4:	e0bffc17 	ldw	r2,-16(fp)
  8244b8:	1880301e 	bne	r3,r2,82457c <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8244bc:	e0bffe17 	ldw	r2,-8(fp)
  8244c0:	1090000c 	andi	r2,r2,16384
  8244c4:	1004c03a 	cmpne	r2,r2,zero
  8244c8:	10002c1e 	bne	r2,zero,82457c <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  8244cc:	008020f4 	movhi	r2,131
  8244d0:	10a9de44 	addi	r2,r2,-22663
  8244d4:	10800003 	ldbu	r2,0(r2)
  8244d8:	10803fcc 	andi	r2,r2,255
  8244dc:	10800058 	cmpnei	r2,r2,1
  8244e0:	1000161e 	bne	r2,zero,82453c <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  8244e4:	e0bffb17 	ldw	r2,-20(fp)
  8244e8:	10800c17 	ldw	r2,48(r2)
  8244ec:	e0bff015 	stw	r2,-64(fp)
  8244f0:	00800144 	movi	r2,5
  8244f4:	e0bff10d 	sth	r2,-60(fp)
  8244f8:	00bfe0c4 	movi	r2,-125
  8244fc:	e0bff185 	stb	r2,-58(fp)
  824500:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  824504:	008020f4 	movhi	r2,131
  824508:	10a9de44 	addi	r2,r2,-22663
  82450c:	10800003 	ldbu	r2,0(r2)
  824510:	10803fcc 	andi	r2,r2,255
  824514:	1005003a 	cmpeq	r2,r2,zero
  824518:	1000111e 	bne	r2,zero,824560 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  82451c:	e17ff10b 	ldhu	r5,-60(fp)
  824520:	e1bff183 	ldbu	r6,-58(fp)
  824524:	e1fff20b 	ldhu	r7,-56(fp)
  824528:	e0bffa04 	addi	r2,fp,-24
  82452c:	d8800015 	stw	r2,0(sp)
  824530:	e13ff017 	ldw	r4,-64(fp)
  824534:	081e4780 	call	81e478 <OSFlagPend>
    return err;
  824538:	00000906 	br	824560 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  82453c:	e0bffb17 	ldw	r2,-20(fp)
  824540:	10c00d17 	ldw	r3,52(r2)
  824544:	e0bff617 	ldw	r2,-40(fp)
  824548:	1880051e 	bne	r3,r2,824560 <altera_avalon_jtag_uart_read+0x1cc>
  82454c:	e0bffb17 	ldw	r2,-20(fp)
  824550:	10c00917 	ldw	r3,36(r2)
  824554:	e0bffb17 	ldw	r2,-20(fp)
  824558:	10800117 	ldw	r2,4(r2)
  82455c:	18bff736 	bltu	r3,r2,82453c <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  824560:	e0bffb17 	ldw	r2,-20(fp)
  824564:	10c00d17 	ldw	r3,52(r2)
  824568:	e0bff617 	ldw	r2,-40(fp)
  82456c:	18800326 	beq	r3,r2,82457c <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  824570:	e0bffd17 	ldw	r2,-12(fp)
  824574:	10800048 	cmpgei	r2,r2,1
  824578:	103f991e 	bne	r2,zero,8243e0 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  82457c:	e0bffb17 	ldw	r2,-20(fp)
  824580:	11000a17 	ldw	r4,40(r2)
  824584:	08217ac0 	call	8217ac <OSSemPost>

  if (ptr != buffer)
  824588:	e0fff917 	ldw	r3,-28(fp)
  82458c:	e0bffc17 	ldw	r2,-16(fp)
  824590:	18801926 	beq	r3,r2,8245f8 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  824594:	0005303a 	rdctl	r2,status
  824598:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  82459c:	e0ffef17 	ldw	r3,-68(fp)
  8245a0:	00bfff84 	movi	r2,-2
  8245a4:	1884703a 	and	r2,r3,r2
  8245a8:	1001703a 	wrctl	status,r2
  
  return context;
  8245ac:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  8245b0:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8245b4:	e0bffb17 	ldw	r2,-20(fp)
  8245b8:	10800817 	ldw	r2,32(r2)
  8245bc:	10c00054 	ori	r3,r2,1
  8245c0:	e0bffb17 	ldw	r2,-20(fp)
  8245c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8245c8:	e0bffb17 	ldw	r2,-20(fp)
  8245cc:	10800017 	ldw	r2,0(r2)
  8245d0:	11000104 	addi	r4,r2,4
  8245d4:	e0bffb17 	ldw	r2,-20(fp)
  8245d8:	10800817 	ldw	r2,32(r2)
  8245dc:	1007883a 	mov	r3,r2
  8245e0:	2005883a 	mov	r2,r4
  8245e4:	10c00035 	stwio	r3,0(r2)
  8245e8:	e0bff817 	ldw	r2,-32(fp)
  8245ec:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8245f0:	e0bfee17 	ldw	r2,-72(fp)
  8245f4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8245f8:	e0fff917 	ldw	r3,-28(fp)
  8245fc:	e0bffc17 	ldw	r2,-16(fp)
  824600:	18800526 	beq	r3,r2,824618 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
  824604:	e0fff917 	ldw	r3,-28(fp)
  824608:	e0bffc17 	ldw	r2,-16(fp)
  82460c:	1887c83a 	sub	r3,r3,r2
  824610:	e0ffff15 	stw	r3,-4(fp)
  824614:	00000906 	br	82463c <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  824618:	e0bffe17 	ldw	r2,-8(fp)
  82461c:	1090000c 	andi	r2,r2,16384
  824620:	1005003a 	cmpeq	r2,r2,zero
  824624:	1000031e 	bne	r2,zero,824634 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
  824628:	00bffd44 	movi	r2,-11
  82462c:	e0bfff15 	stw	r2,-4(fp)
  824630:	00000206 	br	82463c <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  824634:	00bffec4 	movi	r2,-5
  824638:	e0bfff15 	stw	r2,-4(fp)
  82463c:	e0bfff17 	ldw	r2,-4(fp)
}
  824640:	e037883a 	mov	sp,fp
  824644:	dfc00117 	ldw	ra,4(sp)
  824648:	df000017 	ldw	fp,0(sp)
  82464c:	dec00204 	addi	sp,sp,8
  824650:	f800283a 	ret

00824654 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  824654:	deffeb04 	addi	sp,sp,-84
  824658:	dfc01415 	stw	ra,80(sp)
  82465c:	df001315 	stw	fp,76(sp)
  824660:	df001304 	addi	fp,sp,76
  824664:	e13ffb15 	stw	r4,-20(fp)
  824668:	e17ffc15 	stw	r5,-16(fp)
  82466c:	e1bffd15 	stw	r6,-12(fp)
  824670:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  824674:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  824678:	e0bffc17 	ldw	r2,-16(fp)
  82467c:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  824680:	e0bffb17 	ldw	r2,-20(fp)
  824684:	10800b17 	ldw	r2,44(r2)
  824688:	e0bff315 	stw	r2,-52(fp)
  82468c:	e03ff40d 	sth	zero,-48(fp)
  824690:	e17ff40b 	ldhu	r5,-48(fp)
  824694:	e1bffa04 	addi	r6,fp,-24
  824698:	e13ff317 	ldw	r4,-52(fp)
  82469c:	08213b40 	call	8213b4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8246a0:	00003a06 	br	82478c <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  8246a4:	e0bffb17 	ldw	r2,-20(fp)
  8246a8:	10800f17 	ldw	r2,60(r2)
  8246ac:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  8246b0:	e0bffb17 	ldw	r2,-20(fp)
  8246b4:	10801017 	ldw	r2,64(r2)
  8246b8:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
  8246bc:	e0fff917 	ldw	r3,-28(fp)
  8246c0:	e0bff817 	ldw	r2,-32(fp)
  8246c4:	1880062e 	bgeu	r3,r2,8246e0 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
  8246c8:	e0fff817 	ldw	r3,-32(fp)
  8246cc:	e0bff917 	ldw	r2,-28(fp)
  8246d0:	1885c83a 	sub	r2,r3,r2
  8246d4:	10bfffc4 	addi	r2,r2,-1
  8246d8:	e0bff715 	stw	r2,-36(fp)
  8246dc:	00000c06 	br	824710 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
  8246e0:	e0bff817 	ldw	r2,-32(fp)
  8246e4:	1005003a 	cmpeq	r2,r2,zero
  8246e8:	1000051e 	bne	r2,zero,824700 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8246ec:	00820004 	movi	r2,2048
  8246f0:	e0fff917 	ldw	r3,-28(fp)
  8246f4:	10c5c83a 	sub	r2,r2,r3
  8246f8:	e0bff715 	stw	r2,-36(fp)
  8246fc:	00000406 	br	824710 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  824700:	0081ffc4 	movi	r2,2047
  824704:	e0fff917 	ldw	r3,-28(fp)
  824708:	10c5c83a 	sub	r2,r2,r3
  82470c:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  824710:	e0bff717 	ldw	r2,-36(fp)
  824714:	1005003a 	cmpeq	r2,r2,zero
  824718:	10001f1e 	bne	r2,zero,824798 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
  82471c:	e0fffd17 	ldw	r3,-12(fp)
  824720:	e0bff717 	ldw	r2,-36(fp)
  824724:	1880022e 	bgeu	r3,r2,824730 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  824728:	e0bffd17 	ldw	r2,-12(fp)
  82472c:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  824730:	e0bffb17 	ldw	r2,-20(fp)
  824734:	10c21104 	addi	r3,r2,2116
  824738:	e0bff917 	ldw	r2,-28(fp)
  82473c:	1885883a 	add	r2,r3,r2
  824740:	e0fffc17 	ldw	r3,-16(fp)
  824744:	1009883a 	mov	r4,r2
  824748:	180b883a 	mov	r5,r3
  82474c:	e1bff717 	ldw	r6,-36(fp)
  824750:	08122840 	call	812284 <memcpy>
      ptr   += n;
  824754:	e0fff717 	ldw	r3,-36(fp)
  824758:	e0bffc17 	ldw	r2,-16(fp)
  82475c:	10c5883a 	add	r2,r2,r3
  824760:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  824764:	e0fffd17 	ldw	r3,-12(fp)
  824768:	e0bff717 	ldw	r2,-36(fp)
  82476c:	1885c83a 	sub	r2,r3,r2
  824770:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  824774:	e0fff917 	ldw	r3,-28(fp)
  824778:	e0bff717 	ldw	r2,-36(fp)
  82477c:	1885883a 	add	r2,r3,r2
  824780:	10c1ffcc 	andi	r3,r2,2047
  824784:	e0bffb17 	ldw	r2,-20(fp)
  824788:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  82478c:	e0bffd17 	ldw	r2,-12(fp)
  824790:	10800048 	cmpgei	r2,r2,1
  824794:	103fc31e 	bne	r2,zero,8246a4 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  824798:	0005303a 	rdctl	r2,status
  82479c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8247a0:	e0fff217 	ldw	r3,-56(fp)
  8247a4:	00bfff84 	movi	r2,-2
  8247a8:	1884703a 	and	r2,r3,r2
  8247ac:	1001703a 	wrctl	status,r2
  
  return context;
  8247b0:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  8247b4:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8247b8:	e0bffb17 	ldw	r2,-20(fp)
  8247bc:	10800817 	ldw	r2,32(r2)
  8247c0:	10c00094 	ori	r3,r2,2
  8247c4:	e0bffb17 	ldw	r2,-20(fp)
  8247c8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8247cc:	e0bffb17 	ldw	r2,-20(fp)
  8247d0:	10800017 	ldw	r2,0(r2)
  8247d4:	11000104 	addi	r4,r2,4
  8247d8:	e0bffb17 	ldw	r2,-20(fp)
  8247dc:	10800817 	ldw	r2,32(r2)
  8247e0:	1007883a 	mov	r3,r2
  8247e4:	2005883a 	mov	r2,r4
  8247e8:	10c00035 	stwio	r3,0(r2)
  8247ec:	e0bff617 	ldw	r2,-40(fp)
  8247f0:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8247f4:	e0bff117 	ldw	r2,-60(fp)
  8247f8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8247fc:	e0bffd17 	ldw	r2,-12(fp)
  824800:	10800050 	cmplti	r2,r2,1
  824804:	10002d1e 	bne	r2,zero,8248bc <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
  824808:	e0bffe17 	ldw	r2,-8(fp)
  82480c:	1090000c 	andi	r2,r2,16384
  824810:	1004c03a 	cmpne	r2,r2,zero
  824814:	10002c1e 	bne	r2,zero,8248c8 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  824818:	008020f4 	movhi	r2,131
  82481c:	10a9de44 	addi	r2,r2,-22663
  824820:	10800003 	ldbu	r2,0(r2)
  824824:	10803fcc 	andi	r2,r2,255
  824828:	10800058 	cmpnei	r2,r2,1
  82482c:	1000161e 	bne	r2,zero,824888 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
  824830:	e0bffb17 	ldw	r2,-20(fp)
  824834:	10800c17 	ldw	r2,48(r2)
  824838:	e0bfee15 	stw	r2,-72(fp)
  82483c:	00800184 	movi	r2,6
  824840:	e0bfef0d 	sth	r2,-68(fp)
  824844:	00bfe0c4 	movi	r2,-125
  824848:	e0bfef85 	stb	r2,-66(fp)
  82484c:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  824850:	008020f4 	movhi	r2,131
  824854:	10a9de44 	addi	r2,r2,-22663
  824858:	10800003 	ldbu	r2,0(r2)
  82485c:	10803fcc 	andi	r2,r2,255
  824860:	1005003a 	cmpeq	r2,r2,zero
  824864:	1000111e 	bne	r2,zero,8248ac <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  824868:	e17fef0b 	ldhu	r5,-68(fp)
  82486c:	e1bfef83 	ldbu	r6,-66(fp)
  824870:	e1fff00b 	ldhu	r7,-64(fp)
  824874:	e0bffa44 	addi	r2,fp,-23
  824878:	d8800015 	stw	r2,0(sp)
  82487c:	e13fee17 	ldw	r4,-72(fp)
  824880:	081e4780 	call	81e478 <OSFlagPend>
    return err;
  824884:	00000906 	br	8248ac <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  824888:	e0bffb17 	ldw	r2,-20(fp)
  82488c:	10c01017 	ldw	r3,64(r2)
  824890:	e0bff817 	ldw	r2,-32(fp)
  824894:	1880051e 	bne	r3,r2,8248ac <altera_avalon_jtag_uart_write+0x258>
  824898:	e0bffb17 	ldw	r2,-20(fp)
  82489c:	10c00917 	ldw	r3,36(r2)
  8248a0:	e0bffb17 	ldw	r2,-20(fp)
  8248a4:	10800117 	ldw	r2,4(r2)
  8248a8:	18bff736 	bltu	r3,r2,824888 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  8248ac:	e0bffb17 	ldw	r2,-20(fp)
  8248b0:	10c01017 	ldw	r3,64(r2)
  8248b4:	e0bff817 	ldw	r2,-32(fp)
  8248b8:	18800326 	beq	r3,r2,8248c8 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
  8248bc:	e0bffd17 	ldw	r2,-12(fp)
  8248c0:	10800048 	cmpgei	r2,r2,1
  8248c4:	103fb11e 	bne	r2,zero,82478c <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  8248c8:	e0bffb17 	ldw	r2,-20(fp)
  8248cc:	11000b17 	ldw	r4,44(r2)
  8248d0:	08217ac0 	call	8217ac <OSSemPost>

  if (ptr != start)
  8248d4:	e0fffc17 	ldw	r3,-16(fp)
  8248d8:	e0bff517 	ldw	r2,-44(fp)
  8248dc:	18800526 	beq	r3,r2,8248f4 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
  8248e0:	e0fffc17 	ldw	r3,-16(fp)
  8248e4:	e0bff517 	ldw	r2,-44(fp)
  8248e8:	1887c83a 	sub	r3,r3,r2
  8248ec:	e0ffff15 	stw	r3,-4(fp)
  8248f0:	00000906 	br	824918 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
  8248f4:	e0bffe17 	ldw	r2,-8(fp)
  8248f8:	1090000c 	andi	r2,r2,16384
  8248fc:	1005003a 	cmpeq	r2,r2,zero
  824900:	1000031e 	bne	r2,zero,824910 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
  824904:	00bffd44 	movi	r2,-11
  824908:	e0bfff15 	stw	r2,-4(fp)
  82490c:	00000206 	br	824918 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
  824910:	00bffec4 	movi	r2,-5
  824914:	e0bfff15 	stw	r2,-4(fp)
  824918:	e0bfff17 	ldw	r2,-4(fp)
}
  82491c:	e037883a 	mov	sp,fp
  824920:	dfc00117 	ldw	ra,4(sp)
  824924:	df000017 	ldw	fp,0(sp)
  824928:	dec00204 	addi	sp,sp,8
  82492c:	f800283a 	ret

00824930 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  824930:	defff904 	addi	sp,sp,-28
  824934:	dfc00615 	stw	ra,24(sp)
  824938:	df000515 	stw	fp,20(sp)
  82493c:	df000504 	addi	fp,sp,20
  824940:	e13ffe15 	stw	r4,-8(fp)
  824944:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  824948:	e0bffe17 	ldw	r2,-8(fp)
  82494c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  824950:	e0bffe17 	ldw	r2,-8(fp)
  824954:	10800104 	addi	r2,r2,4
  824958:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82495c:	0005303a 	rdctl	r2,status
  824960:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  824964:	e0fffc17 	ldw	r3,-16(fp)
  824968:	00bfff84 	movi	r2,-2
  82496c:	1884703a 	and	r2,r3,r2
  824970:	1001703a 	wrctl	status,r2
  
  return context;
  824974:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  824978:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
  82497c:	08268980 	call	826898 <alt_tick>
  824980:	e0bffd17 	ldw	r2,-12(fp)
  824984:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  824988:	e0bffb17 	ldw	r2,-20(fp)
  82498c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  824990:	e037883a 	mov	sp,fp
  824994:	dfc00117 	ldw	ra,4(sp)
  824998:	df000017 	ldw	fp,0(sp)
  82499c:	dec00204 	addi	sp,sp,8
  8249a0:	f800283a 	ret

008249a4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8249a4:	defff904 	addi	sp,sp,-28
  8249a8:	dfc00615 	stw	ra,24(sp)
  8249ac:	df000515 	stw	fp,20(sp)
  8249b0:	df000504 	addi	fp,sp,20
  8249b4:	e13ffc15 	stw	r4,-16(fp)
  8249b8:	e17ffd15 	stw	r5,-12(fp)
  8249bc:	e1bffe15 	stw	r6,-8(fp)
  8249c0:	e1ffff15 	stw	r7,-4(fp)
  8249c4:	e0bfff17 	ldw	r2,-4(fp)
  8249c8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8249cc:	008020f4 	movhi	r2,131
  8249d0:	10a9f204 	addi	r2,r2,-22584
  8249d4:	10800017 	ldw	r2,0(r2)
  8249d8:	1004c03a 	cmpne	r2,r2,zero
  8249dc:	1000041e 	bne	r2,zero,8249f0 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  8249e0:	00c020f4 	movhi	r3,131
  8249e4:	18e9f204 	addi	r3,r3,-22584
  8249e8:	e0bffb17 	ldw	r2,-20(fp)
  8249ec:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8249f0:	e0bffc17 	ldw	r2,-16(fp)
  8249f4:	10800104 	addi	r2,r2,4
  8249f8:	1007883a 	mov	r3,r2
  8249fc:	008001c4 	movi	r2,7
  824a00:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  824a04:	e13ffe17 	ldw	r4,-8(fp)
  824a08:	e17ffc17 	ldw	r5,-16(fp)
  824a0c:	018020b4 	movhi	r6,130
  824a10:	31924c04 	addi	r6,r6,18736
  824a14:	081ab080 	call	81ab08 <alt_irq_register>
#endif  
}
  824a18:	e037883a 	mov	sp,fp
  824a1c:	dfc00117 	ldw	ra,4(sp)
  824a20:	df000017 	ldw	fp,0(sp)
  824a24:	dec00204 	addi	sp,sp,8
  824a28:	f800283a 	ret

00824a2c <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
  824a2c:	defffc04 	addi	sp,sp,-16
  824a30:	dfc00315 	stw	ra,12(sp)
  824a34:	df000215 	stw	fp,8(sp)
  824a38:	df000204 	addi	fp,sp,8
  824a3c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
  824a40:	e13fff17 	ldw	r4,-4(fp)
  824a44:	014020f4 	movhi	r5,131
  824a48:	2969a104 	addi	r5,r5,-22908
  824a4c:	082636c0 	call	82636c <alt_find_dev>
  824a50:	e0bffe15 	stw	r2,-8(fp)
  return dev;
  824a54:	e0bffe17 	ldw	r2,-8(fp)
}
  824a58:	e037883a 	mov	sp,fp
  824a5c:	dfc00117 	ldw	ra,4(sp)
  824a60:	df000017 	ldw	fp,0(sp)
  824a64:	dec00204 	addi	sp,sp,8
  824a68:	f800283a 	ret

00824a6c <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
  824a6c:	defffd04 	addi	sp,sp,-12
  824a70:	df000215 	stw	fp,8(sp)
  824a74:	df000204 	addi	fp,sp,8
  824a78:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  824a7c:	e0bfff17 	ldw	r2,-4(fp)
  824a80:	10800a17 	ldw	r2,40(r2)
  824a84:	10800037 	ldwio	r2,0(r2)
  824a88:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
  824a8c:	e0bffe17 	ldw	r2,-8(fp)
  824a90:	10800054 	ori	r2,r2,1
  824a94:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  824a98:	e0bfff17 	ldw	r2,-4(fp)
  824a9c:	10800a17 	ldw	r2,40(r2)
  824aa0:	e0fffe17 	ldw	r3,-8(fp)
  824aa4:	10c00035 	stwio	r3,0(r2)
}
  824aa8:	e037883a 	mov	sp,fp
  824aac:	df000017 	ldw	fp,0(sp)
  824ab0:	dec00104 	addi	sp,sp,4
  824ab4:	f800283a 	ret

00824ab8 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
  824ab8:	defffd04 	addi	sp,sp,-12
  824abc:	df000215 	stw	fp,8(sp)
  824ac0:	df000204 	addi	fp,sp,8
  824ac4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  824ac8:	e0bfff17 	ldw	r2,-4(fp)
  824acc:	10800a17 	ldw	r2,40(r2)
  824ad0:	10800037 	ldwio	r2,0(r2)
  824ad4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
  824ad8:	e0fffe17 	ldw	r3,-8(fp)
  824adc:	00bfff84 	movi	r2,-2
  824ae0:	1884703a 	and	r2,r3,r2
  824ae4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  824ae8:	e0bfff17 	ldw	r2,-4(fp)
  824aec:	10800a17 	ldw	r2,40(r2)
  824af0:	e0fffe17 	ldw	r3,-8(fp)
  824af4:	10c00035 	stwio	r3,0(r2)
}
  824af8:	e037883a 	mov	sp,fp
  824afc:	df000017 	ldw	fp,0(sp)
  824b00:	dec00104 	addi	sp,sp,4
  824b04:	f800283a 	ret

00824b08 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
  824b08:	defffd04 	addi	sp,sp,-12
  824b0c:	df000215 	stw	fp,8(sp)
  824b10:	df000204 	addi	fp,sp,8
  824b14:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  824b18:	e0bfff17 	ldw	r2,-4(fp)
  824b1c:	10800a17 	ldw	r2,40(r2)
  824b20:	10800037 	ldwio	r2,0(r2)
  824b24:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
  824b28:	e0bffe17 	ldw	r2,-8(fp)
  824b2c:	10800094 	ori	r2,r2,2
  824b30:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  824b34:	e0bfff17 	ldw	r2,-4(fp)
  824b38:	10800a17 	ldw	r2,40(r2)
  824b3c:	e0fffe17 	ldw	r3,-8(fp)
  824b40:	10c00035 	stwio	r3,0(r2)
}
  824b44:	e037883a 	mov	sp,fp
  824b48:	df000017 	ldw	fp,0(sp)
  824b4c:	dec00104 	addi	sp,sp,4
  824b50:	f800283a 	ret

00824b54 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
  824b54:	defffd04 	addi	sp,sp,-12
  824b58:	df000215 	stw	fp,8(sp)
  824b5c:	df000204 	addi	fp,sp,8
  824b60:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  824b64:	e0bfff17 	ldw	r2,-4(fp)
  824b68:	10800a17 	ldw	r2,40(r2)
  824b6c:	10800037 	ldwio	r2,0(r2)
  824b70:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
  824b74:	e0fffe17 	ldw	r3,-8(fp)
  824b78:	00bfff44 	movi	r2,-3
  824b7c:	1884703a 	and	r2,r3,r2
  824b80:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  824b84:	e0bfff17 	ldw	r2,-4(fp)
  824b88:	10800a17 	ldw	r2,40(r2)
  824b8c:	e0fffe17 	ldw	r3,-8(fp)
  824b90:	10c00035 	stwio	r3,0(r2)
}
  824b94:	e037883a 	mov	sp,fp
  824b98:	df000017 	ldw	fp,0(sp)
  824b9c:	dec00104 	addi	sp,sp,4
  824ba0:	f800283a 	ret

00824ba4 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
  824ba4:	defffd04 	addi	sp,sp,-12
  824ba8:	df000215 	stw	fp,8(sp)
  824bac:	df000204 	addi	fp,sp,8
  824bb0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  824bb4:	e0bfff17 	ldw	r2,-4(fp)
  824bb8:	10800a17 	ldw	r2,40(r2)
  824bbc:	10800037 	ldwio	r2,0(r2)
  824bc0:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
  824bc4:	e0bffe17 	ldw	r2,-8(fp)
  824bc8:	1080400c 	andi	r2,r2,256
  824bcc:	1004c03a 	cmpne	r2,r2,zero
}
  824bd0:	e037883a 	mov	sp,fp
  824bd4:	df000017 	ldw	fp,0(sp)
  824bd8:	dec00104 	addi	sp,sp,4
  824bdc:	f800283a 	ret

00824be0 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
  824be0:	defffd04 	addi	sp,sp,-12
  824be4:	df000215 	stw	fp,8(sp)
  824be8:	df000204 	addi	fp,sp,8
  824bec:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  824bf0:	e0bfff17 	ldw	r2,-4(fp)
  824bf4:	10800a17 	ldw	r2,40(r2)
  824bf8:	10800037 	ldwio	r2,0(r2)
  824bfc:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
  824c00:	e0bffe17 	ldw	r2,-8(fp)
  824c04:	1080800c 	andi	r2,r2,512
  824c08:	1004c03a 	cmpne	r2,r2,zero
}
  824c0c:	e037883a 	mov	sp,fp
  824c10:	df000017 	ldw	fp,0(sp)
  824c14:	dec00104 	addi	sp,sp,4
  824c18:	f800283a 	ret

00824c1c <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
  824c1c:	defffd04 	addi	sp,sp,-12
  824c20:	df000215 	stw	fp,8(sp)
  824c24:	df000204 	addi	fp,sp,8
  824c28:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  824c2c:	e0bfff17 	ldw	r2,-4(fp)
  824c30:	10800a17 	ldw	r2,40(r2)
  824c34:	10800037 	ldwio	r2,0(r2)
  824c38:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
  824c3c:	e0bffe17 	ldw	r2,-8(fp)
  824c40:	10800114 	ori	r2,r2,4
  824c44:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
  824c48:	e0bffe17 	ldw	r2,-8(fp)
  824c4c:	10800214 	ori	r2,r2,8
  824c50:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  824c54:	e0bfff17 	ldw	r2,-4(fp)
  824c58:	10800a17 	ldw	r2,40(r2)
  824c5c:	e0fffe17 	ldw	r3,-8(fp)
  824c60:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
  824c64:	e0fffe17 	ldw	r3,-8(fp)
  824c68:	00bffec4 	movi	r2,-5
  824c6c:	1884703a 	and	r2,r3,r2
  824c70:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
  824c74:	e0fffe17 	ldw	r3,-8(fp)
  824c78:	00bffdc4 	movi	r2,-9
  824c7c:	1884703a 	and	r2,r3,r2
  824c80:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  824c84:	e0bfff17 	ldw	r2,-4(fp)
  824c88:	10800a17 	ldw	r2,40(r2)
  824c8c:	e0fffe17 	ldw	r3,-8(fp)
  824c90:	10c00035 	stwio	r3,0(r2)
}
  824c94:	e037883a 	mov	sp,fp
  824c98:	df000017 	ldw	fp,0(sp)
  824c9c:	dec00104 	addi	sp,sp,4
  824ca0:	f800283a 	ret

00824ca4 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
  824ca4:	defffb04 	addi	sp,sp,-20
  824ca8:	df000415 	stw	fp,16(sp)
  824cac:	df000404 	addi	fp,sp,16
  824cb0:	e13ffd15 	stw	r4,-12(fp)
  824cb4:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  824cb8:	e0bffd17 	ldw	r2,-12(fp)
  824cbc:	10800a17 	ldw	r2,40(r2)
  824cc0:	10800104 	addi	r2,r2,4
  824cc4:	10800037 	ldwio	r2,0(r2)
  824cc8:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  824ccc:	e0bffe17 	ldw	r2,-8(fp)
  824cd0:	1004c03a 	cmpne	r2,r2,zero
  824cd4:	1000051e 	bne	r2,zero,824cec <alt_up_audio_read_fifo_avail+0x48>
  824cd8:	e0bffc17 	ldw	r2,-16(fp)
  824cdc:	10bfc00c 	andi	r2,r2,65280
  824ce0:	1004d23a 	srli	r2,r2,8
  824ce4:	e0bfff15 	stw	r2,-4(fp)
  824ce8:	00000306 	br	824cf8 <alt_up_audio_read_fifo_avail+0x54>
  824cec:	e0bffc17 	ldw	r2,-16(fp)
  824cf0:	10803fcc 	andi	r2,r2,255
  824cf4:	e0bfff15 	stw	r2,-4(fp)
  824cf8:	e0bfff17 	ldw	r2,-4(fp)
  824cfc:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
  824d00:	e0bffc17 	ldw	r2,-16(fp)
}
  824d04:	e037883a 	mov	sp,fp
  824d08:	df000017 	ldw	fp,0(sp)
  824d0c:	dec00104 	addi	sp,sp,4
  824d10:	f800283a 	ret

00824d14 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  824d14:	defff904 	addi	sp,sp,-28
  824d18:	dfc00615 	stw	ra,24(sp)
  824d1c:	df000515 	stw	fp,20(sp)
  824d20:	df000504 	addi	fp,sp,20
  824d24:	e13ffc15 	stw	r4,-16(fp)
  824d28:	e17ffd15 	stw	r5,-12(fp)
  824d2c:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
  824d30:	e13ffc17 	ldw	r4,-16(fp)
  824d34:	01400044 	movi	r5,1
  824d38:	0824ca40 	call	824ca4 <alt_up_audio_read_fifo_avail>
  824d3c:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  824d40:	e0bffb17 	ldw	r2,-20(fp)
  824d44:	10801868 	cmpgeui	r2,r2,97
  824d48:	1000021e 	bne	r2,zero,824d54 <alt_up_audio_record_r+0x40>
		return 0;
  824d4c:	e03fff15 	stw	zero,-4(fp)
  824d50:	00000606 	br	824d6c <alt_up_audio_record_r+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  824d54:	e13ffc17 	ldw	r4,-16(fp)
  824d58:	e17ffd17 	ldw	r5,-12(fp)
  824d5c:	e1bffe17 	ldw	r6,-8(fp)
  824d60:	01c00044 	movi	r7,1
  824d64:	0824f480 	call	824f48 <alt_up_audio_read_fifo>
  824d68:	e0bfff15 	stw	r2,-4(fp)
  824d6c:	e0bfff17 	ldw	r2,-4(fp)
}
  824d70:	e037883a 	mov	sp,fp
  824d74:	dfc00117 	ldw	ra,4(sp)
  824d78:	df000017 	ldw	fp,0(sp)
  824d7c:	dec00204 	addi	sp,sp,8
  824d80:	f800283a 	ret

00824d84 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  824d84:	defff904 	addi	sp,sp,-28
  824d88:	dfc00615 	stw	ra,24(sp)
  824d8c:	df000515 	stw	fp,20(sp)
  824d90:	df000504 	addi	fp,sp,20
  824d94:	e13ffc15 	stw	r4,-16(fp)
  824d98:	e17ffd15 	stw	r5,-12(fp)
  824d9c:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
  824da0:	e13ffc17 	ldw	r4,-16(fp)
  824da4:	000b883a 	mov	r5,zero
  824da8:	0824ca40 	call	824ca4 <alt_up_audio_read_fifo_avail>
  824dac:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  824db0:	e0bffb17 	ldw	r2,-20(fp)
  824db4:	10801868 	cmpgeui	r2,r2,97
  824db8:	1000021e 	bne	r2,zero,824dc4 <alt_up_audio_record_l+0x40>
		return 0;
  824dbc:	e03fff15 	stw	zero,-4(fp)
  824dc0:	00000606 	br	824ddc <alt_up_audio_record_l+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  824dc4:	e13ffc17 	ldw	r4,-16(fp)
  824dc8:	e17ffd17 	ldw	r5,-12(fp)
  824dcc:	e1bffe17 	ldw	r6,-8(fp)
  824dd0:	000f883a 	mov	r7,zero
  824dd4:	0824f480 	call	824f48 <alt_up_audio_read_fifo>
  824dd8:	e0bfff15 	stw	r2,-4(fp)
  824ddc:	e0bfff17 	ldw	r2,-4(fp)
}
  824de0:	e037883a 	mov	sp,fp
  824de4:	dfc00117 	ldw	ra,4(sp)
  824de8:	df000017 	ldw	fp,0(sp)
  824dec:	dec00204 	addi	sp,sp,8
  824df0:	f800283a 	ret

00824df4 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
  824df4:	defffb04 	addi	sp,sp,-20
  824df8:	df000415 	stw	fp,16(sp)
  824dfc:	df000404 	addi	fp,sp,16
  824e00:	e13ffd15 	stw	r4,-12(fp)
  824e04:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  824e08:	e0bffd17 	ldw	r2,-12(fp)
  824e0c:	10800a17 	ldw	r2,40(r2)
  824e10:	10800104 	addi	r2,r2,4
  824e14:	10800037 	ldwio	r2,0(r2)
  824e18:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  824e1c:	e0bffe17 	ldw	r2,-8(fp)
  824e20:	1004c03a 	cmpne	r2,r2,zero
  824e24:	1000051e 	bne	r2,zero,824e3c <alt_up_audio_write_fifo_space+0x48>
  824e28:	e0bffc17 	ldw	r2,-16(fp)
  824e2c:	10bfc02c 	andhi	r2,r2,65280
  824e30:	1004d63a 	srli	r2,r2,24
  824e34:	e0bfff15 	stw	r2,-4(fp)
  824e38:	00000406 	br	824e4c <alt_up_audio_write_fifo_space+0x58>
  824e3c:	e0bffc17 	ldw	r2,-16(fp)
  824e40:	10803fec 	andhi	r2,r2,255
  824e44:	1004d43a 	srli	r2,r2,16
  824e48:	e0bfff15 	stw	r2,-4(fp)
  824e4c:	e0bfff17 	ldw	r2,-4(fp)
  824e50:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
  824e54:	e0bffc17 	ldw	r2,-16(fp)
}
  824e58:	e037883a 	mov	sp,fp
  824e5c:	df000017 	ldw	fp,0(sp)
  824e60:	dec00104 	addi	sp,sp,4
  824e64:	f800283a 	ret

00824e68 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  824e68:	defff904 	addi	sp,sp,-28
  824e6c:	dfc00615 	stw	ra,24(sp)
  824e70:	df000515 	stw	fp,20(sp)
  824e74:	df000504 	addi	fp,sp,20
  824e78:	e13ffc15 	stw	r4,-16(fp)
  824e7c:	e17ffd15 	stw	r5,-12(fp)
  824e80:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
  824e84:	e13ffc17 	ldw	r4,-16(fp)
  824e88:	01400044 	movi	r5,1
  824e8c:	0824df40 	call	824df4 <alt_up_audio_write_fifo_space>
  824e90:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  824e94:	e0bffb17 	ldw	r2,-20(fp)
  824e98:	10801868 	cmpgeui	r2,r2,97
  824e9c:	1000021e 	bne	r2,zero,824ea8 <alt_up_audio_play_r+0x40>
		return 0;
  824ea0:	e03fff15 	stw	zero,-4(fp)
  824ea4:	00000606 	br	824ec0 <alt_up_audio_play_r+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  824ea8:	e13ffc17 	ldw	r4,-16(fp)
  824eac:	e17ffd17 	ldw	r5,-12(fp)
  824eb0:	e1bffe17 	ldw	r6,-8(fp)
  824eb4:	01c00044 	movi	r7,1
  824eb8:	082504c0 	call	82504c <alt_up_audio_write_fifo>
  824ebc:	e0bfff15 	stw	r2,-4(fp)
  824ec0:	e0bfff17 	ldw	r2,-4(fp)
}
  824ec4:	e037883a 	mov	sp,fp
  824ec8:	dfc00117 	ldw	ra,4(sp)
  824ecc:	df000017 	ldw	fp,0(sp)
  824ed0:	dec00204 	addi	sp,sp,8
  824ed4:	f800283a 	ret

00824ed8 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  824ed8:	defff904 	addi	sp,sp,-28
  824edc:	dfc00615 	stw	ra,24(sp)
  824ee0:	df000515 	stw	fp,20(sp)
  824ee4:	df000504 	addi	fp,sp,20
  824ee8:	e13ffc15 	stw	r4,-16(fp)
  824eec:	e17ffd15 	stw	r5,-12(fp)
  824ef0:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
  824ef4:	e13ffc17 	ldw	r4,-16(fp)
  824ef8:	000b883a 	mov	r5,zero
  824efc:	0824df40 	call	824df4 <alt_up_audio_write_fifo_space>
  824f00:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  824f04:	e0bffb17 	ldw	r2,-20(fp)
  824f08:	10801868 	cmpgeui	r2,r2,97
  824f0c:	1000021e 	bne	r2,zero,824f18 <alt_up_audio_play_l+0x40>
		return 0;
  824f10:	e03fff15 	stw	zero,-4(fp)
  824f14:	00000606 	br	824f30 <alt_up_audio_play_l+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  824f18:	e13ffc17 	ldw	r4,-16(fp)
  824f1c:	e17ffd17 	ldw	r5,-12(fp)
  824f20:	e1bffe17 	ldw	r6,-8(fp)
  824f24:	000f883a 	mov	r7,zero
  824f28:	082504c0 	call	82504c <alt_up_audio_write_fifo>
  824f2c:	e0bfff15 	stw	r2,-4(fp)
  824f30:	e0bfff17 	ldw	r2,-4(fp)
}
  824f34:	e037883a 	mov	sp,fp
  824f38:	dfc00117 	ldw	ra,4(sp)
  824f3c:	df000017 	ldw	fp,0(sp)
  824f40:	dec00204 	addi	sp,sp,8
  824f44:	f800283a 	ret

00824f48 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  824f48:	defff604 	addi	sp,sp,-40
  824f4c:	df000915 	stw	fp,36(sp)
  824f50:	df000904 	addi	fp,sp,36
  824f54:	e13ff915 	stw	r4,-28(fp)
  824f58:	e17ffa15 	stw	r5,-24(fp)
  824f5c:	e1bffb15 	stw	r6,-20(fp)
  824f60:	e1fffc15 	stw	r7,-16(fp)
	unsigned int fifospace;
	int count = 0;
  824f64:	e03ff715 	stw	zero,-36(fp)
	while ( count < len ) 
  824f68:	00003006 	br	82502c <alt_up_audio_read_fifo+0xe4>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  824f6c:	e0bff917 	ldw	r2,-28(fp)
  824f70:	10800a17 	ldw	r2,40(r2)
  824f74:	10800104 	addi	r2,r2,4
  824f78:	10800037 	ldwio	r2,0(r2)
  824f7c:	e0bff815 	stw	r2,-32(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  824f80:	e0bffc17 	ldw	r2,-16(fp)
  824f84:	1004c03a 	cmpne	r2,r2,zero
  824f88:	1000051e 	bne	r2,zero,824fa0 <alt_up_audio_read_fifo+0x58>
  824f8c:	e0bff817 	ldw	r2,-32(fp)
  824f90:	10bfc00c 	andi	r2,r2,65280
  824f94:	1004d23a 	srli	r2,r2,8
  824f98:	e0bfff15 	stw	r2,-4(fp)
  824f9c:	00000306 	br	824fac <alt_up_audio_read_fifo+0x64>
  824fa0:	e0bff817 	ldw	r2,-32(fp)
  824fa4:	10803fcc 	andi	r2,r2,255
  824fa8:	e0bfff15 	stw	r2,-4(fp)
  824fac:	e0bfff17 	ldw	r2,-4(fp)
  824fb0:	e0bff815 	stw	r2,-32(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
  824fb4:	e0bff817 	ldw	r2,-32(fp)
  824fb8:	1005003a 	cmpeq	r2,r2,zero
  824fbc:	10001e1e 	bne	r2,zero,825038 <alt_up_audio_read_fifo+0xf0>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  824fc0:	e0bff717 	ldw	r2,-36(fp)
  824fc4:	1085883a 	add	r2,r2,r2
  824fc8:	1085883a 	add	r2,r2,r2
  824fcc:	1007883a 	mov	r3,r2
  824fd0:	e0bffa17 	ldw	r2,-24(fp)
  824fd4:	1887883a 	add	r3,r3,r2
  824fd8:	e0fffe15 	stw	r3,-8(fp)
  824fdc:	e0bffc17 	ldw	r2,-16(fp)
  824fe0:	1004c03a 	cmpne	r2,r2,zero
  824fe4:	1000061e 	bne	r2,zero,825000 <alt_up_audio_read_fifo+0xb8>
  824fe8:	e0bff917 	ldw	r2,-28(fp)
  824fec:	10800a17 	ldw	r2,40(r2)
  824ff0:	10800204 	addi	r2,r2,8
  824ff4:	10800037 	ldwio	r2,0(r2)
  824ff8:	e0bffd15 	stw	r2,-12(fp)
  824ffc:	00000506 	br	825014 <alt_up_audio_read_fifo+0xcc>
  825000:	e0bff917 	ldw	r2,-28(fp)
  825004:	10800a17 	ldw	r2,40(r2)
  825008:	10800304 	addi	r2,r2,12
  82500c:	10800037 	ldwio	r2,0(r2)
  825010:	e0bffd15 	stw	r2,-12(fp)
  825014:	e0fffd17 	ldw	r3,-12(fp)
  825018:	e0bffe17 	ldw	r2,-8(fp)
  82501c:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  825020:	e0bff717 	ldw	r2,-36(fp)
  825024:	10800044 	addi	r2,r2,1
  825028:	e0bff715 	stw	r2,-36(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  82502c:	e0fff717 	ldw	r3,-36(fp)
  825030:	e0bffb17 	ldw	r2,-20(fp)
  825034:	18bfcd16 	blt	r3,r2,824f6c <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
  825038:	e0bff717 	ldw	r2,-36(fp)
}
  82503c:	e037883a 	mov	sp,fp
  825040:	df000017 	ldw	fp,0(sp)
  825044:	dec00104 	addi	sp,sp,4
  825048:	f800283a 	ret

0082504c <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  82504c:	defff804 	addi	sp,sp,-32
  825050:	df000715 	stw	fp,28(sp)
  825054:	df000704 	addi	fp,sp,28
  825058:	e13ffb15 	stw	r4,-20(fp)
  82505c:	e17ffc15 	stw	r5,-16(fp)
  825060:	e1bffd15 	stw	r6,-12(fp)
  825064:	e1fffe15 	stw	r7,-8(fp)
	unsigned int fifospace;
	int count = 0;
  825068:	e03ff915 	stw	zero,-28(fp)
	while ( count < len ) 
  82506c:	00003a06 	br	825158 <alt_up_audio_write_fifo+0x10c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  825070:	e0bffb17 	ldw	r2,-20(fp)
  825074:	10800a17 	ldw	r2,40(r2)
  825078:	10800104 	addi	r2,r2,4
  82507c:	10800037 	ldwio	r2,0(r2)
  825080:	e0bffa15 	stw	r2,-24(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  825084:	e0bffe17 	ldw	r2,-8(fp)
  825088:	1004c03a 	cmpne	r2,r2,zero
  82508c:	1000051e 	bne	r2,zero,8250a4 <alt_up_audio_write_fifo+0x58>
  825090:	e0bffa17 	ldw	r2,-24(fp)
  825094:	10bfc02c 	andhi	r2,r2,65280
  825098:	1004d63a 	srli	r2,r2,24
  82509c:	e0bfff15 	stw	r2,-4(fp)
  8250a0:	00000406 	br	8250b4 <alt_up_audio_write_fifo+0x68>
  8250a4:	e0bffa17 	ldw	r2,-24(fp)
  8250a8:	10803fec 	andhi	r2,r2,255
  8250ac:	1004d43a 	srli	r2,r2,16
  8250b0:	e0bfff15 	stw	r2,-4(fp)
  8250b4:	e0bfff17 	ldw	r2,-4(fp)
  8250b8:	e0bffa15 	stw	r2,-24(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
  8250bc:	e0bffa17 	ldw	r2,-24(fp)
  8250c0:	1005003a 	cmpeq	r2,r2,zero
  8250c4:	1000271e 	bne	r2,zero,825164 <alt_up_audio_write_fifo+0x118>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
  8250c8:	e0bffe17 	ldw	r2,-8(fp)
  8250cc:	1004c03a 	cmpne	r2,r2,zero
  8250d0:	1000111e 	bne	r2,zero,825118 <alt_up_audio_write_fifo+0xcc>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
  8250d4:	e0bffb17 	ldw	r2,-20(fp)
  8250d8:	10800a17 	ldw	r2,40(r2)
  8250dc:	11000204 	addi	r4,r2,8
  8250e0:	e0bff917 	ldw	r2,-28(fp)
  8250e4:	1085883a 	add	r2,r2,r2
  8250e8:	1085883a 	add	r2,r2,r2
  8250ec:	1007883a 	mov	r3,r2
  8250f0:	e0bffc17 	ldw	r2,-16(fp)
  8250f4:	1885883a 	add	r2,r3,r2
  8250f8:	10800017 	ldw	r2,0(r2)
  8250fc:	1007883a 	mov	r3,r2
  825100:	e0bff917 	ldw	r2,-28(fp)
  825104:	10800044 	addi	r2,r2,1
  825108:	e0bff915 	stw	r2,-28(fp)
  82510c:	2005883a 	mov	r2,r4
  825110:	10c00035 	stwio	r3,0(r2)
  825114:	00001006 	br	825158 <alt_up_audio_write_fifo+0x10c>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
  825118:	e0bffb17 	ldw	r2,-20(fp)
  82511c:	10800a17 	ldw	r2,40(r2)
  825120:	11000304 	addi	r4,r2,12
  825124:	e0bff917 	ldw	r2,-28(fp)
  825128:	1085883a 	add	r2,r2,r2
  82512c:	1085883a 	add	r2,r2,r2
  825130:	1007883a 	mov	r3,r2
  825134:	e0bffc17 	ldw	r2,-16(fp)
  825138:	1885883a 	add	r2,r3,r2
  82513c:	10800017 	ldw	r2,0(r2)
  825140:	1007883a 	mov	r3,r2
  825144:	e0bff917 	ldw	r2,-28(fp)
  825148:	10800044 	addi	r2,r2,1
  82514c:	e0bff915 	stw	r2,-28(fp)
  825150:	2005883a 	mov	r2,r4
  825154:	10c00035 	stwio	r3,0(r2)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  825158:	e0fff917 	ldw	r3,-28(fp)
  82515c:	e0bffd17 	ldw	r2,-12(fp)
  825160:	18bfc316 	blt	r3,r2,825070 <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
  825164:	e0bff917 	ldw	r2,-28(fp)
}
  825168:	e037883a 	mov	sp,fp
  82516c:	df000017 	ldw	fp,0(sp)
  825170:	dec00104 	addi	sp,sp,4
  825174:	f800283a 	ret

00825178 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
  825178:	defffc04 	addi	sp,sp,-16
  82517c:	df000315 	stw	fp,12(sp)
  825180:	df000304 	addi	fp,sp,12
  825184:	e13ffd15 	stw	r4,-12(fp)
  825188:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  82518c:	e0bffe17 	ldw	r2,-8(fp)
  825190:	1004c03a 	cmpne	r2,r2,zero
  825194:	1000061e 	bne	r2,zero,8251b0 <alt_up_audio_read_fifo_head+0x38>
  825198:	e0bffd17 	ldw	r2,-12(fp)
  82519c:	10800a17 	ldw	r2,40(r2)
  8251a0:	10800204 	addi	r2,r2,8
  8251a4:	10800037 	ldwio	r2,0(r2)
  8251a8:	e0bfff15 	stw	r2,-4(fp)
  8251ac:	00000506 	br	8251c4 <alt_up_audio_read_fifo_head+0x4c>
  8251b0:	e0bffd17 	ldw	r2,-12(fp)
  8251b4:	10800a17 	ldw	r2,40(r2)
  8251b8:	10800304 	addi	r2,r2,12
  8251bc:	10800037 	ldwio	r2,0(r2)
  8251c0:	e0bfff15 	stw	r2,-4(fp)
  8251c4:	e0bfff17 	ldw	r2,-4(fp)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
  8251c8:	e037883a 	mov	sp,fp
  8251cc:	df000017 	ldw	fp,0(sp)
  8251d0:	dec00104 	addi	sp,sp,4
  8251d4:	f800283a 	ret

008251d8 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
  8251d8:	defffc04 	addi	sp,sp,-16
  8251dc:	df000315 	stw	fp,12(sp)
  8251e0:	df000304 	addi	fp,sp,12
  8251e4:	e13ffd15 	stw	r4,-12(fp)
  8251e8:	e17ffe15 	stw	r5,-8(fp)
  8251ec:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
  8251f0:	e0bfff17 	ldw	r2,-4(fp)
  8251f4:	1004c03a 	cmpne	r2,r2,zero
  8251f8:	1000061e 	bne	r2,zero,825214 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
  8251fc:	e0bffd17 	ldw	r2,-12(fp)
  825200:	10800a17 	ldw	r2,40(r2)
  825204:	10800204 	addi	r2,r2,8
  825208:	e0fffe17 	ldw	r3,-8(fp)
  82520c:	10c00035 	stwio	r3,0(r2)
  825210:	00000506 	br	825228 <alt_up_audio_write_fifo_head+0x50>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
  825214:	e0bffd17 	ldw	r2,-12(fp)
  825218:	10800a17 	ldw	r2,40(r2)
  82521c:	10800304 	addi	r2,r2,12
  825220:	e0fffe17 	ldw	r3,-8(fp)
  825224:	10c00035 	stwio	r3,0(r2)
}
  825228:	e037883a 	mov	sp,fp
  82522c:	df000017 	ldw	fp,0(sp)
  825230:	dec00104 	addi	sp,sp,4
  825234:	f800283a 	ret

00825238 <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
  825238:	defffc04 	addi	sp,sp,-16
  82523c:	dfc00315 	stw	ra,12(sp)
  825240:	df000215 	stw	fp,8(sp)
  825244:	df000204 	addi	fp,sp,8
  825248:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
  82524c:	e13fff17 	ldw	r4,-4(fp)
  825250:	014020f4 	movhi	r5,131
  825254:	2969a104 	addi	r5,r5,-22908
  825258:	082636c0 	call	82636c <alt_find_dev>
  82525c:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
  825260:	e0bffe17 	ldw	r2,-8(fp)
  825264:	10800a17 	ldw	r2,40(r2)
  825268:	10800104 	addi	r2,r2,4
  82526c:	10800037 	ldwio	r2,0(r2)
  825270:	10803fec 	andhi	r2,r2,255
  825274:	1005d43a 	srai	r2,r2,16
  825278:	1007883a 	mov	r3,r2
  82527c:	e0bffe17 	ldw	r2,-8(fp)
  825280:	10c00b15 	stw	r3,44(r2)

  return dev;
  825284:	e0bffe17 	ldw	r2,-8(fp)
}
  825288:	e037883a 	mov	sp,fp
  82528c:	dfc00117 	ldw	ra,4(sp)
  825290:	df000017 	ldw	fp,0(sp)
  825294:	dec00204 	addi	sp,sp,8
  825298:	f800283a 	ret

0082529c <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  82529c:	defffc04 	addi	sp,sp,-16
  8252a0:	df000315 	stw	fp,12(sp)
  8252a4:	df000304 	addi	fp,sp,12
  8252a8:	e13ffd15 	stw	r4,-12(fp)
  8252ac:	e17ffe15 	stw	r5,-8(fp)
  8252b0:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  8252b4:	e0bffd17 	ldw	r2,-12(fp)
  8252b8:	10800a17 	ldw	r2,40(r2)
  8252bc:	11000204 	addi	r4,r2,8
  8252c0:	e0bffe17 	ldw	r2,-8(fp)
  8252c4:	10c03fcc 	andi	r3,r2,255
  8252c8:	2005883a 	mov	r2,r4
  8252cc:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
  8252d0:	e0bffd17 	ldw	r2,-12(fp)
  8252d4:	10800a17 	ldw	r2,40(r2)
  8252d8:	11000304 	addi	r4,r2,12
  8252dc:	e0bfff17 	ldw	r2,-4(fp)
  8252e0:	10ffffcc 	andi	r3,r2,65535
  8252e4:	2005883a 	mov	r2,r4
  8252e8:	10c00035 	stwio	r3,0(r2)

	return 0;
  8252ec:	0005883a 	mov	r2,zero
}
  8252f0:	e037883a 	mov	sp,fp
  8252f4:	df000017 	ldw	fp,0(sp)
  8252f8:	dec00104 	addi	sp,sp,4
  8252fc:	f800283a 	ret

00825300 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
  825300:	defffa04 	addi	sp,sp,-24
  825304:	dfc00515 	stw	ra,20(sp)
  825308:	df000415 	stw	fp,16(sp)
  82530c:	df000404 	addi	fp,sp,16
  825310:	e13ffc15 	stw	r4,-16(fp)
  825314:	e17ffd15 	stw	r5,-12(fp)
  825318:	e1bffe15 	stw	r6,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  82531c:	e0bffc17 	ldw	r2,-16(fp)
  825320:	10800a17 	ldw	r2,40(r2)
  825324:	11000204 	addi	r4,r2,8
  825328:	e0bffd17 	ldw	r2,-12(fp)
  82532c:	10c03fcc 	andi	r3,r2,255
  825330:	2005883a 	mov	r2,r4
  825334:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
  825338:	e0bffc17 	ldw	r2,-16(fp)
  82533c:	10800a17 	ldw	r2,40(r2)
  825340:	10800304 	addi	r2,r2,12
  825344:	10800037 	ldwio	r2,0(r2)
  825348:	1007883a 	mov	r3,r2
  82534c:	e0bffe17 	ldw	r2,-8(fp)
  825350:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
  825354:	e13ffc17 	ldw	r4,-16(fp)
  825358:	082542c0 	call	82542c <alt_up_av_config_read_acknowledge>
  82535c:	1005003a 	cmpeq	r2,r2,zero
  825360:	1000031e 	bne	r2,zero,825370 <alt_up_av_config_read_data+0x70>
		return -1;
  825364:	00bfffc4 	movi	r2,-1
  825368:	e0bfff15 	stw	r2,-4(fp)
  82536c:	00000106 	br	825374 <alt_up_av_config_read_data+0x74>

	return 0;
  825370:	e03fff15 	stw	zero,-4(fp)
  825374:	e0bfff17 	ldw	r2,-4(fp)
}
  825378:	e037883a 	mov	sp,fp
  82537c:	dfc00117 	ldw	ra,4(sp)
  825380:	df000017 	ldw	fp,0(sp)
  825384:	dec00204 	addi	sp,sp,8
  825388:	f800283a 	ret

0082538c <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
  82538c:	defffe04 	addi	sp,sp,-8
  825390:	df000115 	stw	fp,4(sp)
  825394:	df000104 	addi	fp,sp,4
  825398:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
  82539c:	e0bfff17 	ldw	r2,-4(fp)
  8253a0:	10800a17 	ldw	r2,40(r2)
  8253a4:	1007883a 	mov	r3,r2
  8253a8:	00800044 	movi	r2,1
  8253ac:	18800025 	stbio	r2,0(r3)
	return 0;
  8253b0:	0005883a 	mov	r2,zero
}
  8253b4:	e037883a 	mov	sp,fp
  8253b8:	df000017 	ldw	fp,0(sp)
  8253bc:	dec00104 	addi	sp,sp,4
  8253c0:	f800283a 	ret

008253c4 <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
  8253c4:	defffe04 	addi	sp,sp,-8
  8253c8:	df000115 	stw	fp,4(sp)
  8253cc:	df000104 	addi	fp,sp,4
  8253d0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
  8253d4:	e0bfff17 	ldw	r2,-4(fp)
  8253d8:	10800a17 	ldw	r2,40(r2)
  8253dc:	1007883a 	mov	r3,r2
  8253e0:	00800084 	movi	r2,2
  8253e4:	18800025 	stbio	r2,0(r3)
	return 0;
  8253e8:	0005883a 	mov	r2,zero
}
  8253ec:	e037883a 	mov	sp,fp
  8253f0:	df000017 	ldw	fp,0(sp)
  8253f4:	dec00104 	addi	sp,sp,4
  8253f8:	f800283a 	ret

008253fc <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
  8253fc:	defffe04 	addi	sp,sp,-8
  825400:	df000115 	stw	fp,4(sp)
  825404:	df000104 	addi	fp,sp,4
  825408:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
  82540c:	e0bfff17 	ldw	r2,-4(fp)
  825410:	10800a17 	ldw	r2,40(r2)
  825414:	10000025 	stbio	zero,0(r2)
	return 0;
  825418:	0005883a 	mov	r2,zero
}
  82541c:	e037883a 	mov	sp,fp
  825420:	df000017 	ldw	fp,0(sp)
  825424:	dec00104 	addi	sp,sp,4
  825428:	f800283a 	ret

0082542c <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
  82542c:	defffd04 	addi	sp,sp,-12
  825430:	df000215 	stw	fp,8(sp)
  825434:	df000204 	addi	fp,sp,8
  825438:	e13ffe15 	stw	r4,-8(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
  82543c:	e0bffe17 	ldw	r2,-8(fp)
  825440:	10800a17 	ldw	r2,40(r2)
  825444:	10800104 	addi	r2,r2,4
  825448:	10800037 	ldwio	r2,0(r2)
  82544c:	1080008c 	andi	r2,r2,2
  825450:	1005d07a 	srai	r2,r2,1
  825454:	1005003a 	cmpeq	r2,r2,zero
  825458:	1000071e 	bne	r2,zero,825478 <alt_up_av_config_read_acknowledge+0x4c>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
  82545c:	e0bffe17 	ldw	r2,-8(fp)
  825460:	10800a17 	ldw	r2,40(r2)
  825464:	10800104 	addi	r2,r2,4
  825468:	10800037 	ldwio	r2,0(r2)
  82546c:	1080004c 	andi	r2,r2,1
  825470:	e0bfff15 	stw	r2,-4(fp)
  825474:	00000206 	br	825480 <alt_up_av_config_read_acknowledge+0x54>
	return -1;
  825478:	00bfffc4 	movi	r2,-1
  82547c:	e0bfff15 	stw	r2,-4(fp)
  825480:	e0bfff17 	ldw	r2,-4(fp)
}
  825484:	e037883a 	mov	sp,fp
  825488:	df000017 	ldw	fp,0(sp)
  82548c:	dec00104 	addi	sp,sp,4
  825490:	f800283a 	ret

00825494 <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
  825494:	defffe04 	addi	sp,sp,-8
  825498:	df000115 	stw	fp,4(sp)
  82549c:	df000104 	addi	fp,sp,4
  8254a0:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
  8254a4:	e0bfff17 	ldw	r2,-4(fp)
  8254a8:	10800a17 	ldw	r2,40(r2)
  8254ac:	10800104 	addi	r2,r2,4
  8254b0:	10800037 	ldwio	r2,0(r2)
  8254b4:	1080008c 	andi	r2,r2,2
  8254b8:	1005d07a 	srai	r2,r2,1
}
  8254bc:	e037883a 	mov	sp,fp
  8254c0:	df000017 	ldw	fp,0(sp)
  8254c4:	dec00104 	addi	sp,sp,4
  8254c8:	f800283a 	ret

008254cc <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  8254cc:	defff904 	addi	sp,sp,-28
  8254d0:	dfc00615 	stw	ra,24(sp)
  8254d4:	df000515 	stw	fp,20(sp)
  8254d8:	df000504 	addi	fp,sp,20
  8254dc:	e13ffc15 	stw	r4,-16(fp)
  8254e0:	e17ffd15 	stw	r5,-12(fp)
  8254e4:	e1bffe15 	stw	r6,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  8254e8:	e0bffc17 	ldw	r2,-16(fp)
  8254ec:	10800b17 	ldw	r2,44(r2)
  8254f0:	10800060 	cmpeqi	r2,r2,1
  8254f4:	10000f1e 	bne	r2,zero,825534 <alt_up_av_config_write_audio_cfg_register+0x68>
  8254f8:	e0bffc17 	ldw	r2,-16(fp)
  8254fc:	10800b17 	ldw	r2,44(r2)
  825500:	108000a0 	cmpeqi	r2,r2,2
  825504:	10000b1e 	bne	r2,zero,825534 <alt_up_av_config_write_audio_cfg_register+0x68>
  825508:	e0bffc17 	ldw	r2,-16(fp)
  82550c:	10800b17 	ldw	r2,44(r2)
  825510:	108000e0 	cmpeqi	r2,r2,3
  825514:	1000071e 	bne	r2,zero,825534 <alt_up_av_config_write_audio_cfg_register+0x68>
  825518:	e0bffc17 	ldw	r2,-16(fp)
  82551c:	10800b17 	ldw	r2,44(r2)
  825520:	10800120 	cmpeqi	r2,r2,4
  825524:	1000031e 	bne	r2,zero,825534 <alt_up_av_config_write_audio_cfg_register+0x68>
		return -EINVAL;
  825528:	00bffa84 	movi	r2,-22
  82552c:	e0bfff15 	stw	r2,-4(fp)
  825530:	00000b06 	br	825560 <alt_up_av_config_write_audio_cfg_register+0x94>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
  825534:	e03ffb15 	stw	zero,-20(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
  825538:	e0bffc17 	ldw	r2,-16(fp)
  82553c:	10800a17 	ldw	r2,40(r2)
  825540:	10800084 	addi	r2,r2,2
  825544:	e0fffb17 	ldw	r3,-20(fp)
  825548:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  82554c:	e13ffc17 	ldw	r4,-16(fp)
  825550:	e17ffd17 	ldw	r5,-12(fp)
  825554:	e1bffe17 	ldw	r6,-8(fp)
  825558:	082529c0 	call	82529c <alt_up_av_config_write_data>
  82555c:	e0bfff15 	stw	r2,-4(fp)
  825560:	e0bfff17 	ldw	r2,-4(fp)
}
  825564:	e037883a 	mov	sp,fp
  825568:	dfc00117 	ldw	ra,4(sp)
  82556c:	df000017 	ldw	fp,0(sp)
  825570:	dec00204 	addi	sp,sp,8
  825574:	f800283a 	ret

00825578 <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
  825578:	defff904 	addi	sp,sp,-28
  82557c:	dfc00615 	stw	ra,24(sp)
  825580:	df000515 	stw	fp,20(sp)
  825584:	df000504 	addi	fp,sp,20
  825588:	e13ffb15 	stw	r4,-20(fp)
  82558c:	e17ffc15 	stw	r5,-16(fp)
  825590:	e1bffd15 	stw	r6,-12(fp)
  825594:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  825598:	e0bffb17 	ldw	r2,-20(fp)
  82559c:	10800b17 	ldw	r2,44(r2)
  8255a0:	108000a0 	cmpeqi	r2,r2,2
  8255a4:	10000b1e 	bne	r2,zero,8255d4 <alt_up_av_config_read_video_cfg_register+0x5c>
  8255a8:	e0bffb17 	ldw	r2,-20(fp)
  8255ac:	10800b17 	ldw	r2,44(r2)
  8255b0:	108000e0 	cmpeqi	r2,r2,3
  8255b4:	1000071e 	bne	r2,zero,8255d4 <alt_up_av_config_read_video_cfg_register+0x5c>
  8255b8:	e0bffb17 	ldw	r2,-20(fp)
  8255bc:	10800b17 	ldw	r2,44(r2)
  8255c0:	10800120 	cmpeqi	r2,r2,4
  8255c4:	1000031e 	bne	r2,zero,8255d4 <alt_up_av_config_read_video_cfg_register+0x5c>
		return -EINVAL;
  8255c8:	00bffa84 	movi	r2,-22
  8255cc:	e0bfff15 	stw	r2,-4(fp)
  8255d0:	00002106 	br	825658 <alt_up_av_config_read_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  8255d4:	e0bffb17 	ldw	r2,-20(fp)
  8255d8:	10800b17 	ldw	r2,44(r2)
  8255dc:	108000a0 	cmpeqi	r2,r2,2
  8255e0:	1000041e 	bne	r2,zero,8255f4 <alt_up_av_config_read_video_cfg_register+0x7c>
  8255e4:	e0bffb17 	ldw	r2,-20(fp)
  8255e8:	10800b17 	ldw	r2,44(r2)
  8255ec:	10800118 	cmpnei	r2,r2,4
  8255f0:	1000061e 	bne	r2,zero,82560c <alt_up_av_config_read_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  8255f4:	e0bffe17 	ldw	r2,-8(fp)
  8255f8:	10800060 	cmpeqi	r2,r2,1
  8255fc:	10000c1e 	bne	r2,zero,825630 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  825600:	00bffa84 	movi	r2,-22
  825604:	e0bfff15 	stw	r2,-4(fp)
  825608:	00001306 	br	825658 <alt_up_av_config_read_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  82560c:	e0bffe17 	ldw	r2,-8(fp)
  825610:	10800060 	cmpeqi	r2,r2,1
  825614:	1000061e 	bne	r2,zero,825630 <alt_up_av_config_read_video_cfg_register+0xb8>
  825618:	e0bffe17 	ldw	r2,-8(fp)
  82561c:	108000a0 	cmpeqi	r2,r2,2
  825620:	1000031e 	bne	r2,zero,825630 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  825624:	00bffa84 	movi	r2,-22
  825628:	e0bfff15 	stw	r2,-4(fp)
  82562c:	00000a06 	br	825658 <alt_up_av_config_read_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  825630:	e0bffb17 	ldw	r2,-20(fp)
  825634:	10800a17 	ldw	r2,40(r2)
  825638:	10800084 	addi	r2,r2,2
  82563c:	e0fffe17 	ldw	r3,-8(fp)
  825640:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_read_data(av_config, addr, data);
  825644:	e13ffb17 	ldw	r4,-20(fp)
  825648:	e17ffc17 	ldw	r5,-16(fp)
  82564c:	e1bffd17 	ldw	r6,-12(fp)
  825650:	08253000 	call	825300 <alt_up_av_config_read_data>
  825654:	e0bfff15 	stw	r2,-4(fp)
  825658:	e0bfff17 	ldw	r2,-4(fp)
}
  82565c:	e037883a 	mov	sp,fp
  825660:	dfc00117 	ldw	ra,4(sp)
  825664:	df000017 	ldw	fp,0(sp)
  825668:	dec00204 	addi	sp,sp,8
  82566c:	f800283a 	ret

00825670 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
  825670:	defff904 	addi	sp,sp,-28
  825674:	dfc00615 	stw	ra,24(sp)
  825678:	df000515 	stw	fp,20(sp)
  82567c:	df000504 	addi	fp,sp,20
  825680:	e13ffb15 	stw	r4,-20(fp)
  825684:	e17ffc15 	stw	r5,-16(fp)
  825688:	e1bffd15 	stw	r6,-12(fp)
  82568c:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  825690:	e0bffb17 	ldw	r2,-20(fp)
  825694:	10800b17 	ldw	r2,44(r2)
  825698:	108000a0 	cmpeqi	r2,r2,2
  82569c:	10000b1e 	bne	r2,zero,8256cc <alt_up_av_config_write_video_cfg_register+0x5c>
  8256a0:	e0bffb17 	ldw	r2,-20(fp)
  8256a4:	10800b17 	ldw	r2,44(r2)
  8256a8:	108000e0 	cmpeqi	r2,r2,3
  8256ac:	1000071e 	bne	r2,zero,8256cc <alt_up_av_config_write_video_cfg_register+0x5c>
  8256b0:	e0bffb17 	ldw	r2,-20(fp)
  8256b4:	10800b17 	ldw	r2,44(r2)
  8256b8:	10800120 	cmpeqi	r2,r2,4
  8256bc:	1000031e 	bne	r2,zero,8256cc <alt_up_av_config_write_video_cfg_register+0x5c>
		return -EINVAL;
  8256c0:	00bffa84 	movi	r2,-22
  8256c4:	e0bfff15 	stw	r2,-4(fp)
  8256c8:	00002106 	br	825750 <alt_up_av_config_write_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  8256cc:	e0bffb17 	ldw	r2,-20(fp)
  8256d0:	10800b17 	ldw	r2,44(r2)
  8256d4:	108000a0 	cmpeqi	r2,r2,2
  8256d8:	1000041e 	bne	r2,zero,8256ec <alt_up_av_config_write_video_cfg_register+0x7c>
  8256dc:	e0bffb17 	ldw	r2,-20(fp)
  8256e0:	10800b17 	ldw	r2,44(r2)
  8256e4:	10800118 	cmpnei	r2,r2,4
  8256e8:	1000061e 	bne	r2,zero,825704 <alt_up_av_config_write_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  8256ec:	e0bffe17 	ldw	r2,-8(fp)
  8256f0:	10800060 	cmpeqi	r2,r2,1
  8256f4:	10000c1e 	bne	r2,zero,825728 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  8256f8:	00bffa84 	movi	r2,-22
  8256fc:	e0bfff15 	stw	r2,-4(fp)
  825700:	00001306 	br	825750 <alt_up_av_config_write_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  825704:	e0bffe17 	ldw	r2,-8(fp)
  825708:	10800060 	cmpeqi	r2,r2,1
  82570c:	1000061e 	bne	r2,zero,825728 <alt_up_av_config_write_video_cfg_register+0xb8>
  825710:	e0bffe17 	ldw	r2,-8(fp)
  825714:	108000a0 	cmpeqi	r2,r2,2
  825718:	1000031e 	bne	r2,zero,825728 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  82571c:	00bffa84 	movi	r2,-22
  825720:	e0bfff15 	stw	r2,-4(fp)
  825724:	00000a06 	br	825750 <alt_up_av_config_write_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  825728:	e0bffb17 	ldw	r2,-20(fp)
  82572c:	10800a17 	ldw	r2,40(r2)
  825730:	10800084 	addi	r2,r2,2
  825734:	e0fffe17 	ldw	r3,-8(fp)
  825738:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  82573c:	e13ffb17 	ldw	r4,-20(fp)
  825740:	e17ffc17 	ldw	r5,-16(fp)
  825744:	e1bffd17 	ldw	r6,-12(fp)
  825748:	082529c0 	call	82529c <alt_up_av_config_write_data>
  82574c:	e0bfff15 	stw	r2,-4(fp)
  825750:	e0bfff17 	ldw	r2,-4(fp)
}
  825754:	e037883a 	mov	sp,fp
  825758:	dfc00117 	ldw	ra,4(sp)
  82575c:	df000017 	ldw	fp,0(sp)
  825760:	dec00204 	addi	sp,sp,8
  825764:	f800283a 	ret

00825768 <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  825768:	defffa04 	addi	sp,sp,-24
  82576c:	dfc00515 	stw	ra,20(sp)
  825770:	df000415 	stw	fp,16(sp)
  825774:	df000404 	addi	fp,sp,16
  825778:	e13ffc15 	stw	r4,-16(fp)
  82577c:	e17ffd15 	stw	r5,-12(fp)
  825780:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  825784:	e0bffc17 	ldw	r2,-16(fp)
  825788:	10800b17 	ldw	r2,44(r2)
  82578c:	10800220 	cmpeqi	r2,r2,8
  825790:	1000031e 	bne	r2,zero,8257a0 <alt_up_av_config_read_DC2_cfg_register+0x38>
		return -EINVAL;
  825794:	00bffa84 	movi	r2,-22
  825798:	e0bfff15 	stw	r2,-4(fp)
  82579c:	00000506 	br	8257b4 <alt_up_av_config_read_DC2_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  8257a0:	e13ffc17 	ldw	r4,-16(fp)
  8257a4:	e17ffd17 	ldw	r5,-12(fp)
  8257a8:	e1bffe17 	ldw	r6,-8(fp)
  8257ac:	08253000 	call	825300 <alt_up_av_config_read_data>
  8257b0:	e0bfff15 	stw	r2,-4(fp)
  8257b4:	e0bfff17 	ldw	r2,-4(fp)
}
  8257b8:	e037883a 	mov	sp,fp
  8257bc:	dfc00117 	ldw	ra,4(sp)
  8257c0:	df000017 	ldw	fp,0(sp)
  8257c4:	dec00204 	addi	sp,sp,8
  8257c8:	f800283a 	ret

008257cc <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  8257cc:	defffa04 	addi	sp,sp,-24
  8257d0:	dfc00515 	stw	ra,20(sp)
  8257d4:	df000415 	stw	fp,16(sp)
  8257d8:	df000404 	addi	fp,sp,16
  8257dc:	e13ffc15 	stw	r4,-16(fp)
  8257e0:	e17ffd15 	stw	r5,-12(fp)
  8257e4:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  8257e8:	e0bffc17 	ldw	r2,-16(fp)
  8257ec:	10800b17 	ldw	r2,44(r2)
  8257f0:	10800220 	cmpeqi	r2,r2,8
  8257f4:	1000031e 	bne	r2,zero,825804 <alt_up_av_config_write_DC2_cfg_register+0x38>
		return -EINVAL;
  8257f8:	00bffa84 	movi	r2,-22
  8257fc:	e0bfff15 	stw	r2,-4(fp)
  825800:	00000506 	br	825818 <alt_up_av_config_write_DC2_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  825804:	e13ffc17 	ldw	r4,-16(fp)
  825808:	e17ffd17 	ldw	r5,-12(fp)
  82580c:	e1bffe17 	ldw	r6,-8(fp)
  825810:	082529c0 	call	82529c <alt_up_av_config_write_data>
  825814:	e0bfff15 	stw	r2,-4(fp)
  825818:	e0bfff17 	ldw	r2,-4(fp)
}
  82581c:	e037883a 	mov	sp,fp
  825820:	dfc00117 	ldw	ra,4(sp)
  825824:	df000017 	ldw	fp,0(sp)
  825828:	dec00204 	addi	sp,sp,8
  82582c:	f800283a 	ret

00825830 <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  825830:	defffa04 	addi	sp,sp,-24
  825834:	dfc00515 	stw	ra,20(sp)
  825838:	df000415 	stw	fp,16(sp)
  82583c:	df000404 	addi	fp,sp,16
  825840:	e13ffc15 	stw	r4,-16(fp)
  825844:	e17ffd15 	stw	r5,-12(fp)
  825848:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  82584c:	e0bffc17 	ldw	r2,-16(fp)
  825850:	10800b17 	ldw	r2,44(r2)
  825854:	10800260 	cmpeqi	r2,r2,9
  825858:	1000031e 	bne	r2,zero,825868 <alt_up_av_config_read_D5M_cfg_register+0x38>
		return -EINVAL;
  82585c:	00bffa84 	movi	r2,-22
  825860:	e0bfff15 	stw	r2,-4(fp)
  825864:	00000506 	br	82587c <alt_up_av_config_read_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_read_data(av_config, addr, data);
  825868:	e13ffc17 	ldw	r4,-16(fp)
  82586c:	e17ffd17 	ldw	r5,-12(fp)
  825870:	e1bffe17 	ldw	r6,-8(fp)
  825874:	08253000 	call	825300 <alt_up_av_config_read_data>
  825878:	e0bfff15 	stw	r2,-4(fp)
  82587c:	e0bfff17 	ldw	r2,-4(fp)
}
  825880:	e037883a 	mov	sp,fp
  825884:	dfc00117 	ldw	ra,4(sp)
  825888:	df000017 	ldw	fp,0(sp)
  82588c:	dec00204 	addi	sp,sp,8
  825890:	f800283a 	ret

00825894 <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  825894:	defffa04 	addi	sp,sp,-24
  825898:	dfc00515 	stw	ra,20(sp)
  82589c:	df000415 	stw	fp,16(sp)
  8258a0:	df000404 	addi	fp,sp,16
  8258a4:	e13ffc15 	stw	r4,-16(fp)
  8258a8:	e17ffd15 	stw	r5,-12(fp)
  8258ac:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  8258b0:	e0bffc17 	ldw	r2,-16(fp)
  8258b4:	10800b17 	ldw	r2,44(r2)
  8258b8:	10800260 	cmpeqi	r2,r2,9
  8258bc:	1000031e 	bne	r2,zero,8258cc <alt_up_av_config_write_D5M_cfg_register+0x38>
		return -EINVAL;
  8258c0:	00bffa84 	movi	r2,-22
  8258c4:	e0bfff15 	stw	r2,-4(fp)
  8258c8:	00000506 	br	8258e0 <alt_up_av_config_write_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_write_data(av_config, addr, data);
  8258cc:	e13ffc17 	ldw	r4,-16(fp)
  8258d0:	e17ffd17 	ldw	r5,-12(fp)
  8258d4:	e1bffe17 	ldw	r6,-8(fp)
  8258d8:	082529c0 	call	82529c <alt_up_av_config_write_data>
  8258dc:	e0bfff15 	stw	r2,-4(fp)
  8258e0:	e0bfff17 	ldw	r2,-4(fp)
}
  8258e4:	e037883a 	mov	sp,fp
  8258e8:	dfc00117 	ldw	ra,4(sp)
  8258ec:	df000017 	ldw	fp,0(sp)
  8258f0:	dec00204 	addi	sp,sp,8
  8258f4:	f800283a 	ret

008258f8 <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  8258f8:	defffa04 	addi	sp,sp,-24
  8258fc:	dfc00515 	stw	ra,20(sp)
  825900:	df000415 	stw	fp,16(sp)
  825904:	df000404 	addi	fp,sp,16
  825908:	e13ffc15 	stw	r4,-16(fp)
  82590c:	e17ffd15 	stw	r5,-12(fp)
  825910:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  825914:	e0bffc17 	ldw	r2,-16(fp)
  825918:	10800b17 	ldw	r2,44(r2)
  82591c:	108002a0 	cmpeqi	r2,r2,10
  825920:	1000031e 	bne	r2,zero,825930 <alt_up_av_config_read_LTM_cfg_register+0x38>
		return -EINVAL;
  825924:	00bffa84 	movi	r2,-22
  825928:	e0bfff15 	stw	r2,-4(fp)
  82592c:	00000506 	br	825944 <alt_up_av_config_read_LTM_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  825930:	e13ffc17 	ldw	r4,-16(fp)
  825934:	e17ffd17 	ldw	r5,-12(fp)
  825938:	e1bffe17 	ldw	r6,-8(fp)
  82593c:	08253000 	call	825300 <alt_up_av_config_read_data>
  825940:	e0bfff15 	stw	r2,-4(fp)
  825944:	e0bfff17 	ldw	r2,-4(fp)
}
  825948:	e037883a 	mov	sp,fp
  82594c:	dfc00117 	ldw	ra,4(sp)
  825950:	df000017 	ldw	fp,0(sp)
  825954:	dec00204 	addi	sp,sp,8
  825958:	f800283a 	ret

0082595c <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  82595c:	defffa04 	addi	sp,sp,-24
  825960:	dfc00515 	stw	ra,20(sp)
  825964:	df000415 	stw	fp,16(sp)
  825968:	df000404 	addi	fp,sp,16
  82596c:	e13ffc15 	stw	r4,-16(fp)
  825970:	e17ffd15 	stw	r5,-12(fp)
  825974:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  825978:	e0bffc17 	ldw	r2,-16(fp)
  82597c:	10800b17 	ldw	r2,44(r2)
  825980:	108002a0 	cmpeqi	r2,r2,10
  825984:	1000031e 	bne	r2,zero,825994 <alt_up_av_config_write_LTM_cfg_register+0x38>
		return -EINVAL;
  825988:	00bffa84 	movi	r2,-22
  82598c:	e0bfff15 	stw	r2,-4(fp)
  825990:	00000506 	br	8259a8 <alt_up_av_config_write_LTM_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  825994:	e13ffc17 	ldw	r4,-16(fp)
  825998:	e17ffd17 	ldw	r5,-12(fp)
  82599c:	e1bffe17 	ldw	r6,-8(fp)
  8259a0:	082529c0 	call	82529c <alt_up_av_config_write_data>
  8259a4:	e0bfff15 	stw	r2,-4(fp)
  8259a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8259ac:	e037883a 	mov	sp,fp
  8259b0:	dfc00117 	ldw	ra,4(sp)
  8259b4:	df000017 	ldw	fp,0(sp)
  8259b8:	dec00204 	addi	sp,sp,8
  8259bc:	f800283a 	ret

008259c0 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  8259c0:	defffc04 	addi	sp,sp,-16
  8259c4:	df000315 	stw	fp,12(sp)
  8259c8:	df000304 	addi	fp,sp,12
  8259cc:	e13ffe15 	stw	r4,-8(fp)
  8259d0:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  8259d4:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  8259d8:	e0bfff17 	ldw	r2,-4(fp)
  8259dc:	1004c03a 	cmpne	r2,r2,zero
  8259e0:	1000061e 	bne	r2,zero,8259fc <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  8259e4:	e0bffe17 	ldw	r2,-8(fp)
  8259e8:	1007883a 	mov	r3,r2
  8259ec:	e0bffd03 	ldbu	r2,-12(fp)
  8259f0:	10c4b03a 	or	r2,r2,r3
  8259f4:	e0bffd05 	stb	r2,-12(fp)
  8259f8:	00000806 	br	825a1c <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  8259fc:	e0bffe17 	ldw	r2,-8(fp)
  825a00:	1007883a 	mov	r3,r2
  825a04:	e0bffd03 	ldbu	r2,-12(fp)
  825a08:	10c4b03a 	or	r2,r2,r3
  825a0c:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  825a10:	e0bffd03 	ldbu	r2,-12(fp)
  825a14:	10801014 	ori	r2,r2,64
  825a18:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  825a1c:	e0fffd03 	ldbu	r3,-12(fp)
  825a20:	00bfe004 	movi	r2,-128
  825a24:	1884b03a 	or	r2,r3,r2
  825a28:	10803fcc 	andi	r2,r2,255
}
  825a2c:	e037883a 	mov	sp,fp
  825a30:	df000017 	ldw	fp,0(sp)
  825a34:	dec00104 	addi	sp,sp,4
  825a38:	f800283a 	ret

00825a3c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  825a3c:	defffd04 	addi	sp,sp,-12
  825a40:	df000215 	stw	fp,8(sp)
  825a44:	df000204 	addi	fp,sp,8
  825a48:	e13ffe15 	stw	r4,-8(fp)
  825a4c:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  825a50:	e0bffe17 	ldw	r2,-8(fp)
  825a54:	10800a17 	ldw	r2,40(r2)
  825a58:	e0ffff03 	ldbu	r3,-4(fp)
  825a5c:	10c00025 	stbio	r3,0(r2)
}
  825a60:	e037883a 	mov	sp,fp
  825a64:	df000017 	ldw	fp,0(sp)
  825a68:	dec00104 	addi	sp,sp,4
  825a6c:	f800283a 	ret

00825a70 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  825a70:	defffe04 	addi	sp,sp,-8
  825a74:	df000115 	stw	fp,4(sp)
  825a78:	df000104 	addi	fp,sp,4
  825a7c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  825a80:	e0bfff17 	ldw	r2,-4(fp)
  825a84:	10800a17 	ldw	r2,40(r2)
  825a88:	1007883a 	mov	r3,r2
  825a8c:	00800044 	movi	r2,1
  825a90:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  825a94:	e037883a 	mov	sp,fp
  825a98:	df000017 	ldw	fp,0(sp)
  825a9c:	dec00104 	addi	sp,sp,4
  825aa0:	f800283a 	ret

00825aa4 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  825aa4:	defffc04 	addi	sp,sp,-16
  825aa8:	dfc00315 	stw	ra,12(sp)
  825aac:	df000215 	stw	fp,8(sp)
  825ab0:	df000204 	addi	fp,sp,8
  825ab4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  825ab8:	e13fff17 	ldw	r4,-4(fp)
  825abc:	014020f4 	movhi	r5,131
  825ac0:	2969a104 	addi	r5,r5,-22908
  825ac4:	082636c0 	call	82636c <alt_find_dev>
  825ac8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  825acc:	e0bffe17 	ldw	r2,-8(fp)
}
  825ad0:	e037883a 	mov	sp,fp
  825ad4:	dfc00117 	ldw	ra,4(sp)
  825ad8:	df000017 	ldw	fp,0(sp)
  825adc:	dec00204 	addi	sp,sp,8
  825ae0:	f800283a 	ret

00825ae4 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  825ae4:	defffb04 	addi	sp,sp,-20
  825ae8:	df000415 	stw	fp,16(sp)
  825aec:	df000404 	addi	fp,sp,16
  825af0:	e13ffd15 	stw	r4,-12(fp)
  825af4:	e17ffe15 	stw	r5,-8(fp)
  825af8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  825afc:	e03ffc15 	stw	zero,-16(fp)
  825b00:	00000f06 	br	825b40 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  825b04:	e0bffd17 	ldw	r2,-12(fp)
  825b08:	10800a17 	ldw	r2,40(r2)
  825b0c:	11000044 	addi	r4,r2,1
  825b10:	e0fffc17 	ldw	r3,-16(fp)
  825b14:	e0bffe17 	ldw	r2,-8(fp)
  825b18:	1885883a 	add	r2,r3,r2
  825b1c:	10800003 	ldbu	r2,0(r2)
  825b20:	10c03fcc 	andi	r3,r2,255
  825b24:	18c0201c 	xori	r3,r3,128
  825b28:	18ffe004 	addi	r3,r3,-128
  825b2c:	2005883a 	mov	r2,r4
  825b30:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  825b34:	e0bffc17 	ldw	r2,-16(fp)
  825b38:	10800044 	addi	r2,r2,1
  825b3c:	e0bffc15 	stw	r2,-16(fp)
  825b40:	e0fffc17 	ldw	r3,-16(fp)
  825b44:	e0bfff17 	ldw	r2,-4(fp)
  825b48:	18bfee36 	bltu	r3,r2,825b04 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  825b4c:	e037883a 	mov	sp,fp
  825b50:	df000017 	ldw	fp,0(sp)
  825b54:	dec00104 	addi	sp,sp,4
  825b58:	f800283a 	ret

00825b5c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  825b5c:	defffd04 	addi	sp,sp,-12
  825b60:	df000215 	stw	fp,8(sp)
  825b64:	df000204 	addi	fp,sp,8
  825b68:	e13ffe15 	stw	r4,-8(fp)
  825b6c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  825b70:	00000d06 	br	825ba8 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  825b74:	e0bffe17 	ldw	r2,-8(fp)
  825b78:	10800a17 	ldw	r2,40(r2)
  825b7c:	11000044 	addi	r4,r2,1
  825b80:	e0bfff17 	ldw	r2,-4(fp)
  825b84:	10800003 	ldbu	r2,0(r2)
  825b88:	10c03fcc 	andi	r3,r2,255
  825b8c:	18c0201c 	xori	r3,r3,128
  825b90:	18ffe004 	addi	r3,r3,-128
  825b94:	2005883a 	mov	r2,r4
  825b98:	10c00025 	stbio	r3,0(r2)
		++ptr;
  825b9c:	e0bfff17 	ldw	r2,-4(fp)
  825ba0:	10800044 	addi	r2,r2,1
  825ba4:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  825ba8:	e0bfff17 	ldw	r2,-4(fp)
  825bac:	10800003 	ldbu	r2,0(r2)
  825bb0:	10803fcc 	andi	r2,r2,255
  825bb4:	1080201c 	xori	r2,r2,128
  825bb8:	10bfe004 	addi	r2,r2,-128
  825bbc:	1004c03a 	cmpne	r2,r2,zero
  825bc0:	103fec1e 	bne	r2,zero,825b74 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  825bc4:	e037883a 	mov	sp,fp
  825bc8:	df000017 	ldw	fp,0(sp)
  825bcc:	dec00104 	addi	sp,sp,4
  825bd0:	f800283a 	ret

00825bd4 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  825bd4:	defffb04 	addi	sp,sp,-20
  825bd8:	dfc00415 	stw	ra,16(sp)
  825bdc:	df000315 	stw	fp,12(sp)
  825be0:	df000304 	addi	fp,sp,12
  825be4:	e13ffd15 	stw	r4,-12(fp)
  825be8:	e17ffe15 	stw	r5,-8(fp)
  825bec:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  825bf0:	e0bffd17 	ldw	r2,-12(fp)
  825bf4:	10800017 	ldw	r2,0(r2)
  825bf8:	1009883a 	mov	r4,r2
  825bfc:	e1bfff17 	ldw	r6,-4(fp)
  825c00:	e17ffe17 	ldw	r5,-8(fp)
  825c04:	0825ae40 	call	825ae4 <alt_up_character_lcd_write>
	return 0;
  825c08:	0005883a 	mov	r2,zero
}
  825c0c:	e037883a 	mov	sp,fp
  825c10:	dfc00117 	ldw	ra,4(sp)
  825c14:	df000017 	ldw	fp,0(sp)
  825c18:	dec00204 	addi	sp,sp,8
  825c1c:	f800283a 	ret

00825c20 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  825c20:	defff904 	addi	sp,sp,-28
  825c24:	dfc00615 	stw	ra,24(sp)
  825c28:	df000515 	stw	fp,20(sp)
  825c2c:	df000504 	addi	fp,sp,20
  825c30:	e13ffc15 	stw	r4,-16(fp)
  825c34:	e17ffd15 	stw	r5,-12(fp)
  825c38:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  825c3c:	e0bffd17 	ldw	r2,-12(fp)
  825c40:	10800a28 	cmpgeui	r2,r2,40
  825c44:	1000031e 	bne	r2,zero,825c54 <alt_up_character_lcd_set_cursor_pos+0x34>
  825c48:	e0bffe17 	ldw	r2,-8(fp)
  825c4c:	108000b0 	cmpltui	r2,r2,2
  825c50:	1000031e 	bne	r2,zero,825c60 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  825c54:	00bfffc4 	movi	r2,-1
  825c58:	e0bfff15 	stw	r2,-4(fp)
  825c5c:	00000806 	br	825c80 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  825c60:	e13ffd17 	ldw	r4,-12(fp)
  825c64:	e17ffe17 	ldw	r5,-8(fp)
  825c68:	08259c00 	call	8259c0 <get_DDRAM_addr>
  825c6c:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  825c70:	e17ffb03 	ldbu	r5,-20(fp)
  825c74:	e13ffc17 	ldw	r4,-16(fp)
  825c78:	0825a3c0 	call	825a3c <alt_up_character_lcd_send_cmd>
	return 0;
  825c7c:	e03fff15 	stw	zero,-4(fp)
  825c80:	e0bfff17 	ldw	r2,-4(fp)
}
  825c84:	e037883a 	mov	sp,fp
  825c88:	dfc00117 	ldw	ra,4(sp)
  825c8c:	df000017 	ldw	fp,0(sp)
  825c90:	dec00204 	addi	sp,sp,8
  825c94:	f800283a 	ret

00825c98 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  825c98:	defff904 	addi	sp,sp,-28
  825c9c:	dfc00615 	stw	ra,24(sp)
  825ca0:	df000515 	stw	fp,20(sp)
  825ca4:	df000504 	addi	fp,sp,20
  825ca8:	e13ffc15 	stw	r4,-16(fp)
  825cac:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  825cb0:	e0bffd17 	ldw	r2,-12(fp)
  825cb4:	1005003a 	cmpeq	r2,r2,zero
  825cb8:	10001e1e 	bne	r2,zero,825d34 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  825cbc:	e0bffd17 	ldw	r2,-12(fp)
  825cc0:	10800050 	cmplti	r2,r2,1
  825cc4:	1000031e 	bne	r2,zero,825cd4 <alt_up_character_lcd_shift_cursor+0x3c>
  825cc8:	00800504 	movi	r2,20
  825ccc:	e0bfff05 	stb	r2,-4(fp)
  825cd0:	00000206 	br	825cdc <alt_up_character_lcd_shift_cursor+0x44>
  825cd4:	00c00404 	movi	r3,16
  825cd8:	e0ffff05 	stb	r3,-4(fp)
  825cdc:	e0bfff03 	ldbu	r2,-4(fp)
  825ce0:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  825ce4:	e0fffd17 	ldw	r3,-12(fp)
  825ce8:	e0fffe15 	stw	r3,-8(fp)
  825cec:	e0fffe17 	ldw	r3,-8(fp)
  825cf0:	1804403a 	cmpge	r2,r3,zero
  825cf4:	1000031e 	bne	r2,zero,825d04 <alt_up_character_lcd_shift_cursor+0x6c>
  825cf8:	e0bffe17 	ldw	r2,-8(fp)
  825cfc:	0085c83a 	sub	r2,zero,r2
  825d00:	e0bffe15 	stw	r2,-8(fp)
  825d04:	e0fffe17 	ldw	r3,-8(fp)
  825d08:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  825d0c:	00000306 	br	825d1c <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  825d10:	e17ffb43 	ldbu	r5,-19(fp)
  825d14:	e13ffc17 	ldw	r4,-16(fp)
  825d18:	0825a3c0 	call	825a3c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  825d1c:	e0bffb03 	ldbu	r2,-20(fp)
  825d20:	10bfffc4 	addi	r2,r2,-1
  825d24:	e0bffb05 	stb	r2,-20(fp)
  825d28:	e0bffb03 	ldbu	r2,-20(fp)
  825d2c:	10803fd8 	cmpnei	r2,r2,255
  825d30:	103ff71e 	bne	r2,zero,825d10 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  825d34:	e037883a 	mov	sp,fp
  825d38:	dfc00117 	ldw	ra,4(sp)
  825d3c:	df000017 	ldw	fp,0(sp)
  825d40:	dec00204 	addi	sp,sp,8
  825d44:	f800283a 	ret

00825d48 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  825d48:	defff904 	addi	sp,sp,-28
  825d4c:	dfc00615 	stw	ra,24(sp)
  825d50:	df000515 	stw	fp,20(sp)
  825d54:	df000504 	addi	fp,sp,20
  825d58:	e13ffc15 	stw	r4,-16(fp)
  825d5c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  825d60:	e0bffd17 	ldw	r2,-12(fp)
  825d64:	1005003a 	cmpeq	r2,r2,zero
  825d68:	10001e1e 	bne	r2,zero,825de4 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  825d6c:	e0bffd17 	ldw	r2,-12(fp)
  825d70:	10800050 	cmplti	r2,r2,1
  825d74:	1000031e 	bne	r2,zero,825d84 <alt_up_character_lcd_shift_display+0x3c>
  825d78:	00800704 	movi	r2,28
  825d7c:	e0bfff05 	stb	r2,-4(fp)
  825d80:	00000206 	br	825d8c <alt_up_character_lcd_shift_display+0x44>
  825d84:	00c00604 	movi	r3,24
  825d88:	e0ffff05 	stb	r3,-4(fp)
  825d8c:	e0bfff03 	ldbu	r2,-4(fp)
  825d90:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  825d94:	e0fffd17 	ldw	r3,-12(fp)
  825d98:	e0fffe15 	stw	r3,-8(fp)
  825d9c:	e0fffe17 	ldw	r3,-8(fp)
  825da0:	1804403a 	cmpge	r2,r3,zero
  825da4:	1000031e 	bne	r2,zero,825db4 <alt_up_character_lcd_shift_display+0x6c>
  825da8:	e0bffe17 	ldw	r2,-8(fp)
  825dac:	0085c83a 	sub	r2,zero,r2
  825db0:	e0bffe15 	stw	r2,-8(fp)
  825db4:	e0fffe17 	ldw	r3,-8(fp)
  825db8:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  825dbc:	00000306 	br	825dcc <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  825dc0:	e17ffb43 	ldbu	r5,-19(fp)
  825dc4:	e13ffc17 	ldw	r4,-16(fp)
  825dc8:	0825a3c0 	call	825a3c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  825dcc:	e0bffb03 	ldbu	r2,-20(fp)
  825dd0:	10bfffc4 	addi	r2,r2,-1
  825dd4:	e0bffb05 	stb	r2,-20(fp)
  825dd8:	e0bffb03 	ldbu	r2,-20(fp)
  825ddc:	10803fd8 	cmpnei	r2,r2,255
  825de0:	103ff71e 	bne	r2,zero,825dc0 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  825de4:	e037883a 	mov	sp,fp
  825de8:	dfc00117 	ldw	ra,4(sp)
  825dec:	df000017 	ldw	fp,0(sp)
  825df0:	dec00204 	addi	sp,sp,8
  825df4:	f800283a 	ret

00825df8 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  825df8:	defff904 	addi	sp,sp,-28
  825dfc:	dfc00615 	stw	ra,24(sp)
  825e00:	df000515 	stw	fp,20(sp)
  825e04:	df000504 	addi	fp,sp,20
  825e08:	e13ffc15 	stw	r4,-16(fp)
  825e0c:	e17ffd15 	stw	r5,-12(fp)
  825e10:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  825e14:	e0bffd17 	ldw	r2,-12(fp)
  825e18:	10800a28 	cmpgeui	r2,r2,40
  825e1c:	1000031e 	bne	r2,zero,825e2c <alt_up_character_lcd_erase_pos+0x34>
  825e20:	e0bffe17 	ldw	r2,-8(fp)
  825e24:	108000b0 	cmpltui	r2,r2,2
  825e28:	1000031e 	bne	r2,zero,825e38 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  825e2c:	00bfffc4 	movi	r2,-1
  825e30:	e0bfff15 	stw	r2,-4(fp)
  825e34:	00000e06 	br	825e70 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  825e38:	e13ffd17 	ldw	r4,-12(fp)
  825e3c:	e17ffe17 	ldw	r5,-8(fp)
  825e40:	08259c00 	call	8259c0 <get_DDRAM_addr>
  825e44:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  825e48:	e17ffb03 	ldbu	r5,-20(fp)
  825e4c:	e13ffc17 	ldw	r4,-16(fp)
  825e50:	0825a3c0 	call	825a3c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
  825e54:	e0bffc17 	ldw	r2,-16(fp)
  825e58:	10800a17 	ldw	r2,40(r2)
  825e5c:	10800044 	addi	r2,r2,1
  825e60:	1007883a 	mov	r3,r2
  825e64:	00800084 	movi	r2,2
  825e68:	18800025 	stbio	r2,0(r3)
	return 0;
  825e6c:	e03fff15 	stw	zero,-4(fp)
  825e70:	e0bfff17 	ldw	r2,-4(fp)
}
  825e74:	e037883a 	mov	sp,fp
  825e78:	dfc00117 	ldw	ra,4(sp)
  825e7c:	df000017 	ldw	fp,0(sp)
  825e80:	dec00204 	addi	sp,sp,8
  825e84:	f800283a 	ret

00825e88 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  825e88:	defffd04 	addi	sp,sp,-12
  825e8c:	dfc00215 	stw	ra,8(sp)
  825e90:	df000115 	stw	fp,4(sp)
  825e94:	df000104 	addi	fp,sp,4
  825e98:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  825e9c:	e13fff17 	ldw	r4,-4(fp)
  825ea0:	01400304 	movi	r5,12
  825ea4:	0825a3c0 	call	825a3c <alt_up_character_lcd_send_cmd>
}
  825ea8:	e037883a 	mov	sp,fp
  825eac:	dfc00117 	ldw	ra,4(sp)
  825eb0:	df000017 	ldw	fp,0(sp)
  825eb4:	dec00204 	addi	sp,sp,8
  825eb8:	f800283a 	ret

00825ebc <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  825ebc:	defffd04 	addi	sp,sp,-12
  825ec0:	dfc00215 	stw	ra,8(sp)
  825ec4:	df000115 	stw	fp,4(sp)
  825ec8:	df000104 	addi	fp,sp,4
  825ecc:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  825ed0:	e13fff17 	ldw	r4,-4(fp)
  825ed4:	014003c4 	movi	r5,15
  825ed8:	0825a3c0 	call	825a3c <alt_up_character_lcd_send_cmd>
}
  825edc:	e037883a 	mov	sp,fp
  825ee0:	dfc00117 	ldw	ra,4(sp)
  825ee4:	df000017 	ldw	fp,0(sp)
  825ee8:	dec00204 	addi	sp,sp,8
  825eec:	f800283a 	ret

00825ef0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  825ef0:	defff404 	addi	sp,sp,-48
  825ef4:	df000b15 	stw	fp,44(sp)
  825ef8:	df000b04 	addi	fp,sp,44
  825efc:	e13ffb15 	stw	r4,-20(fp)
  825f00:	e17ffc15 	stw	r5,-16(fp)
  825f04:	e1bffd15 	stw	r6,-12(fp)
  825f08:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  825f0c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  825f10:	008020f4 	movhi	r2,131
  825f14:	10a9f204 	addi	r2,r2,-22584
  825f18:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  825f1c:	1005003a 	cmpeq	r2,r2,zero
  825f20:	1000411e 	bne	r2,zero,826028 <alt_alarm_start+0x138>
  {
    if (alarm)
  825f24:	e0bffb17 	ldw	r2,-20(fp)
  825f28:	1005003a 	cmpeq	r2,r2,zero
  825f2c:	10003b1e 	bne	r2,zero,82601c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  825f30:	e0fffb17 	ldw	r3,-20(fp)
  825f34:	e0bffd17 	ldw	r2,-12(fp)
  825f38:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  825f3c:	e0fffb17 	ldw	r3,-20(fp)
  825f40:	e0bffe17 	ldw	r2,-8(fp)
  825f44:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  825f48:	0005303a 	rdctl	r2,status
  825f4c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  825f50:	e0fff817 	ldw	r3,-32(fp)
  825f54:	00bfff84 	movi	r2,-2
  825f58:	1884703a 	and	r2,r3,r2
  825f5c:	1001703a 	wrctl	status,r2
  
  return context;
  825f60:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  825f64:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  825f68:	008020f4 	movhi	r2,131
  825f6c:	10a9f304 	addi	r2,r2,-22580
  825f70:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  825f74:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  825f78:	e0fffc17 	ldw	r3,-16(fp)
  825f7c:	e0bff917 	ldw	r2,-28(fp)
  825f80:	1885883a 	add	r2,r3,r2
  825f84:	10c00044 	addi	r3,r2,1
  825f88:	e0bffb17 	ldw	r2,-20(fp)
  825f8c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  825f90:	e0bffb17 	ldw	r2,-20(fp)
  825f94:	10c00217 	ldw	r3,8(r2)
  825f98:	e0bff917 	ldw	r2,-28(fp)
  825f9c:	1880042e 	bgeu	r3,r2,825fb0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  825fa0:	e0fffb17 	ldw	r3,-20(fp)
  825fa4:	00800044 	movi	r2,1
  825fa8:	18800405 	stb	r2,16(r3)
  825fac:	00000206 	br	825fb8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  825fb0:	e0bffb17 	ldw	r2,-20(fp)
  825fb4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  825fb8:	e0fffb17 	ldw	r3,-20(fp)
  825fbc:	008020f4 	movhi	r2,131
  825fc0:	10a9c604 	addi	r2,r2,-22760
  825fc4:	e0bff615 	stw	r2,-40(fp)
  825fc8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  825fcc:	e0fff717 	ldw	r3,-36(fp)
  825fd0:	e0bff617 	ldw	r2,-40(fp)
  825fd4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  825fd8:	e0bff617 	ldw	r2,-40(fp)
  825fdc:	10c00017 	ldw	r3,0(r2)
  825fe0:	e0bff717 	ldw	r2,-36(fp)
  825fe4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  825fe8:	e0bff617 	ldw	r2,-40(fp)
  825fec:	10c00017 	ldw	r3,0(r2)
  825ff0:	e0bff717 	ldw	r2,-36(fp)
  825ff4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  825ff8:	e0fff617 	ldw	r3,-40(fp)
  825ffc:	e0bff717 	ldw	r2,-36(fp)
  826000:	18800015 	stw	r2,0(r3)
  826004:	e0bffa17 	ldw	r2,-24(fp)
  826008:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82600c:	e0bff517 	ldw	r2,-44(fp)
  826010:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  826014:	e03fff15 	stw	zero,-4(fp)
  826018:	00000506 	br	826030 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  82601c:	00bffa84 	movi	r2,-22
  826020:	e0bfff15 	stw	r2,-4(fp)
  826024:	00000206 	br	826030 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  826028:	00bfde84 	movi	r2,-134
  82602c:	e0bfff15 	stw	r2,-4(fp)
  826030:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  826034:	e037883a 	mov	sp,fp
  826038:	df000017 	ldw	fp,0(sp)
  82603c:	dec00104 	addi	sp,sp,4
  826040:	f800283a 	ret

00826044 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  826044:	defffa04 	addi	sp,sp,-24
  826048:	dfc00515 	stw	ra,20(sp)
  82604c:	df000415 	stw	fp,16(sp)
  826050:	df000404 	addi	fp,sp,16
  826054:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  826058:	008000c4 	movi	r2,3
  82605c:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  826060:	e0fffc17 	ldw	r3,-16(fp)
  826064:	008003f4 	movhi	r2,15
  826068:	10909004 	addi	r2,r2,16960
  82606c:	188b383a 	mul	r5,r3,r2
  826070:	0100bef4 	movhi	r4,763
  826074:	213c2004 	addi	r4,r4,-3968
  826078:	08111d40 	call	8111d4 <__udivsi3>
  82607c:	100b883a 	mov	r5,r2
  826080:	01200034 	movhi	r4,32768
  826084:	213fffc4 	addi	r4,r4,-1
  826088:	08111d40 	call	8111d4 <__udivsi3>
  82608c:	100b883a 	mov	r5,r2
  826090:	e13fff17 	ldw	r4,-4(fp)
  826094:	08111d40 	call	8111d4 <__udivsi3>
  826098:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  82609c:	e0bffd17 	ldw	r2,-12(fp)
  8260a0:	1005003a 	cmpeq	r2,r2,zero
  8260a4:	1000281e 	bne	r2,zero,826148 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  8260a8:	e03ffe15 	stw	zero,-8(fp)
  8260ac:	00001606 	br	826108 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  8260b0:	00a00034 	movhi	r2,32768
  8260b4:	10bfffc4 	addi	r2,r2,-1
  8260b8:	10bfffc4 	addi	r2,r2,-1
  8260bc:	103ffe1e 	bne	r2,zero,8260b8 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  8260c0:	e0fffc17 	ldw	r3,-16(fp)
  8260c4:	008003f4 	movhi	r2,15
  8260c8:	10909004 	addi	r2,r2,16960
  8260cc:	188b383a 	mul	r5,r3,r2
  8260d0:	0100bef4 	movhi	r4,763
  8260d4:	213c2004 	addi	r4,r4,-3968
  8260d8:	08111d40 	call	8111d4 <__udivsi3>
  8260dc:	100b883a 	mov	r5,r2
  8260e0:	01200034 	movhi	r4,32768
  8260e4:	213fffc4 	addi	r4,r4,-1
  8260e8:	08111d40 	call	8111d4 <__udivsi3>
  8260ec:	1007883a 	mov	r3,r2
  8260f0:	e0bfff17 	ldw	r2,-4(fp)
  8260f4:	10c5c83a 	sub	r2,r2,r3
  8260f8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  8260fc:	e0bffe17 	ldw	r2,-8(fp)
  826100:	10800044 	addi	r2,r2,1
  826104:	e0bffe15 	stw	r2,-8(fp)
  826108:	e0fffe17 	ldw	r3,-8(fp)
  82610c:	e0bffd17 	ldw	r2,-12(fp)
  826110:	18bfe716 	blt	r3,r2,8260b0 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  826114:	e0fffc17 	ldw	r3,-16(fp)
  826118:	008003f4 	movhi	r2,15
  82611c:	10909004 	addi	r2,r2,16960
  826120:	188b383a 	mul	r5,r3,r2
  826124:	0100bef4 	movhi	r4,763
  826128:	213c2004 	addi	r4,r4,-3968
  82612c:	08111d40 	call	8111d4 <__udivsi3>
  826130:	1007883a 	mov	r3,r2
  826134:	e0bfff17 	ldw	r2,-4(fp)
  826138:	1885383a 	mul	r2,r3,r2
  82613c:	10bfffc4 	addi	r2,r2,-1
  826140:	103ffe1e 	bne	r2,zero,82613c <alt_busy_sleep+0xf8>
  826144:	00000c06 	br	826178 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  826148:	e0fffc17 	ldw	r3,-16(fp)
  82614c:	008003f4 	movhi	r2,15
  826150:	10909004 	addi	r2,r2,16960
  826154:	188b383a 	mul	r5,r3,r2
  826158:	0100bef4 	movhi	r4,763
  82615c:	213c2004 	addi	r4,r4,-3968
  826160:	08111d40 	call	8111d4 <__udivsi3>
  826164:	1007883a 	mov	r3,r2
  826168:	e0bfff17 	ldw	r2,-4(fp)
  82616c:	1885383a 	mul	r2,r3,r2
  826170:	10bfffc4 	addi	r2,r2,-1
  826174:	00bffe16 	blt	zero,r2,826170 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  826178:	0005883a 	mov	r2,zero
}
  82617c:	e037883a 	mov	sp,fp
  826180:	dfc00117 	ldw	ra,4(sp)
  826184:	df000017 	ldw	fp,0(sp)
  826188:	dec00204 	addi	sp,sp,8
  82618c:	f800283a 	ret

00826190 <alt_dev_llist_insert>:
  826190:	defff904 	addi	sp,sp,-28
  826194:	dfc00615 	stw	ra,24(sp)
  826198:	df000515 	stw	fp,20(sp)
  82619c:	df000504 	addi	fp,sp,20
  8261a0:	e13ffd15 	stw	r4,-12(fp)
  8261a4:	e17ffe15 	stw	r5,-8(fp)
  8261a8:	e0bffd17 	ldw	r2,-12(fp)
  8261ac:	1005003a 	cmpeq	r2,r2,zero
  8261b0:	1000041e 	bne	r2,zero,8261c4 <alt_dev_llist_insert+0x34>
  8261b4:	e0bffd17 	ldw	r2,-12(fp)
  8261b8:	10800217 	ldw	r2,8(r2)
  8261bc:	1004c03a 	cmpne	r2,r2,zero
  8261c0:	1000071e 	bne	r2,zero,8261e0 <alt_dev_llist_insert+0x50>
  8261c4:	08262440 	call	826244 <alt_get_errno>
  8261c8:	1007883a 	mov	r3,r2
  8261cc:	00800584 	movi	r2,22
  8261d0:	18800015 	stw	r2,0(r3)
  8261d4:	00bffa84 	movi	r2,-22
  8261d8:	e0bfff15 	stw	r2,-4(fp)
  8261dc:	00001306 	br	82622c <alt_dev_llist_insert+0x9c>
  8261e0:	e0fffd17 	ldw	r3,-12(fp)
  8261e4:	e0bffe17 	ldw	r2,-8(fp)
  8261e8:	e0bffb15 	stw	r2,-20(fp)
  8261ec:	e0fffc15 	stw	r3,-16(fp)
  8261f0:	e0fffc17 	ldw	r3,-16(fp)
  8261f4:	e0bffb17 	ldw	r2,-20(fp)
  8261f8:	18800115 	stw	r2,4(r3)
  8261fc:	e0bffb17 	ldw	r2,-20(fp)
  826200:	10c00017 	ldw	r3,0(r2)
  826204:	e0bffc17 	ldw	r2,-16(fp)
  826208:	10c00015 	stw	r3,0(r2)
  82620c:	e0bffb17 	ldw	r2,-20(fp)
  826210:	10c00017 	ldw	r3,0(r2)
  826214:	e0bffc17 	ldw	r2,-16(fp)
  826218:	18800115 	stw	r2,4(r3)
  82621c:	e0fffb17 	ldw	r3,-20(fp)
  826220:	e0bffc17 	ldw	r2,-16(fp)
  826224:	18800015 	stw	r2,0(r3)
  826228:	e03fff15 	stw	zero,-4(fp)
  82622c:	e0bfff17 	ldw	r2,-4(fp)
  826230:	e037883a 	mov	sp,fp
  826234:	dfc00117 	ldw	ra,4(sp)
  826238:	df000017 	ldw	fp,0(sp)
  82623c:	dec00204 	addi	sp,sp,8
  826240:	f800283a 	ret

00826244 <alt_get_errno>:
  826244:	defffd04 	addi	sp,sp,-12
  826248:	dfc00215 	stw	ra,8(sp)
  82624c:	df000115 	stw	fp,4(sp)
  826250:	df000104 	addi	fp,sp,4
  826254:	008020f4 	movhi	r2,131
  826258:	10a9a404 	addi	r2,r2,-22896
  82625c:	10800017 	ldw	r2,0(r2)
  826260:	1005003a 	cmpeq	r2,r2,zero
  826264:	1000061e 	bne	r2,zero,826280 <alt_get_errno+0x3c>
  826268:	008020f4 	movhi	r2,131
  82626c:	10a9a404 	addi	r2,r2,-22896
  826270:	10800017 	ldw	r2,0(r2)
  826274:	103ee83a 	callr	r2
  826278:	e0bfff15 	stw	r2,-4(fp)
  82627c:	00000306 	br	82628c <alt_get_errno+0x48>
  826280:	008020f4 	movhi	r2,131
  826284:	10a9d104 	addi	r2,r2,-22716
  826288:	e0bfff15 	stw	r2,-4(fp)
  82628c:	e0bfff17 	ldw	r2,-4(fp)
  826290:	e037883a 	mov	sp,fp
  826294:	dfc00117 	ldw	ra,4(sp)
  826298:	df000017 	ldw	fp,0(sp)
  82629c:	dec00204 	addi	sp,sp,8
  8262a0:	f800283a 	ret

008262a4 <_do_ctors>:
  8262a4:	defffd04 	addi	sp,sp,-12
  8262a8:	dfc00215 	stw	ra,8(sp)
  8262ac:	df000115 	stw	fp,4(sp)
  8262b0:	df000104 	addi	fp,sp,4
  8262b4:	00bfff04 	movi	r2,-4
  8262b8:	00c020b4 	movhi	r3,130
  8262bc:	18dd3704 	addi	r3,r3,29916
  8262c0:	1885883a 	add	r2,r3,r2
  8262c4:	e0bfff15 	stw	r2,-4(fp)
  8262c8:	00000606 	br	8262e4 <_do_ctors+0x40>
  8262cc:	e0bfff17 	ldw	r2,-4(fp)
  8262d0:	10800017 	ldw	r2,0(r2)
  8262d4:	103ee83a 	callr	r2
  8262d8:	e0bfff17 	ldw	r2,-4(fp)
  8262dc:	10bfff04 	addi	r2,r2,-4
  8262e0:	e0bfff15 	stw	r2,-4(fp)
  8262e4:	e0ffff17 	ldw	r3,-4(fp)
  8262e8:	008020b4 	movhi	r2,130
  8262ec:	109d3604 	addi	r2,r2,29912
  8262f0:	18bff62e 	bgeu	r3,r2,8262cc <_do_ctors+0x28>
  8262f4:	e037883a 	mov	sp,fp
  8262f8:	dfc00117 	ldw	ra,4(sp)
  8262fc:	df000017 	ldw	fp,0(sp)
  826300:	dec00204 	addi	sp,sp,8
  826304:	f800283a 	ret

00826308 <_do_dtors>:
  826308:	defffd04 	addi	sp,sp,-12
  82630c:	dfc00215 	stw	ra,8(sp)
  826310:	df000115 	stw	fp,4(sp)
  826314:	df000104 	addi	fp,sp,4
  826318:	00bfff04 	movi	r2,-4
  82631c:	00c020b4 	movhi	r3,130
  826320:	18dd3704 	addi	r3,r3,29916
  826324:	1885883a 	add	r2,r3,r2
  826328:	e0bfff15 	stw	r2,-4(fp)
  82632c:	00000606 	br	826348 <_do_dtors+0x40>
  826330:	e0bfff17 	ldw	r2,-4(fp)
  826334:	10800017 	ldw	r2,0(r2)
  826338:	103ee83a 	callr	r2
  82633c:	e0bfff17 	ldw	r2,-4(fp)
  826340:	10bfff04 	addi	r2,r2,-4
  826344:	e0bfff15 	stw	r2,-4(fp)
  826348:	e0ffff17 	ldw	r3,-4(fp)
  82634c:	008020b4 	movhi	r2,130
  826350:	109d3704 	addi	r2,r2,29916
  826354:	18bff62e 	bgeu	r3,r2,826330 <_do_dtors+0x28>
  826358:	e037883a 	mov	sp,fp
  82635c:	dfc00117 	ldw	ra,4(sp)
  826360:	df000017 	ldw	fp,0(sp)
  826364:	dec00204 	addi	sp,sp,8
  826368:	f800283a 	ret

0082636c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  82636c:	defff904 	addi	sp,sp,-28
  826370:	dfc00615 	stw	ra,24(sp)
  826374:	df000515 	stw	fp,20(sp)
  826378:	df000504 	addi	fp,sp,20
  82637c:	e13ffd15 	stw	r4,-12(fp)
  826380:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  826384:	e0bffe17 	ldw	r2,-8(fp)
  826388:	10800017 	ldw	r2,0(r2)
  82638c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  826390:	e13ffd17 	ldw	r4,-12(fp)
  826394:	0812bd80 	call	812bd8 <strlen>
  826398:	10800044 	addi	r2,r2,1
  82639c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8263a0:	00000d06 	br	8263d8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8263a4:	e0bffc17 	ldw	r2,-16(fp)
  8263a8:	11000217 	ldw	r4,8(r2)
  8263ac:	e1bffb17 	ldw	r6,-20(fp)
  8263b0:	e17ffd17 	ldw	r5,-12(fp)
  8263b4:	08271100 	call	827110 <memcmp>
  8263b8:	1004c03a 	cmpne	r2,r2,zero
  8263bc:	1000031e 	bne	r2,zero,8263cc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  8263c0:	e0bffc17 	ldw	r2,-16(fp)
  8263c4:	e0bfff15 	stw	r2,-4(fp)
  8263c8:	00000706 	br	8263e8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8263cc:	e0bffc17 	ldw	r2,-16(fp)
  8263d0:	10800017 	ldw	r2,0(r2)
  8263d4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8263d8:	e0fffe17 	ldw	r3,-8(fp)
  8263dc:	e0bffc17 	ldw	r2,-16(fp)
  8263e0:	10fff01e 	bne	r2,r3,8263a4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8263e4:	e03fff15 	stw	zero,-4(fp)
  8263e8:	e0bfff17 	ldw	r2,-4(fp)
}
  8263ec:	e037883a 	mov	sp,fp
  8263f0:	dfc00117 	ldw	ra,4(sp)
  8263f4:	df000017 	ldw	fp,0(sp)
  8263f8:	dec00204 	addi	sp,sp,8
  8263fc:	f800283a 	ret

00826400 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  826400:	defff904 	addi	sp,sp,-28
  826404:	dfc00615 	stw	ra,24(sp)
  826408:	df000515 	stw	fp,20(sp)
  82640c:	df000504 	addi	fp,sp,20
  826410:	e13ffc15 	stw	r4,-16(fp)
  826414:	e17ffd15 	stw	r5,-12(fp)
  826418:	e1bffe15 	stw	r6,-8(fp)
  82641c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  826420:	e13ffd17 	ldw	r4,-12(fp)
  826424:	e17ffe17 	ldw	r5,-8(fp)
  826428:	e1bfff17 	ldw	r6,-4(fp)
  82642c:	08266180 	call	826618 <open>
  826430:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  826434:	e0bffb17 	ldw	r2,-20(fp)
  826438:	1004803a 	cmplt	r2,r2,zero
  82643c:	10001c1e 	bne	r2,zero,8264b0 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  826440:	e0bffb17 	ldw	r2,-20(fp)
  826444:	00c020f4 	movhi	r3,131
  826448:	18e4fa04 	addi	r3,r3,-27672
  82644c:	10800324 	muli	r2,r2,12
  826450:	10c5883a 	add	r2,r2,r3
  826454:	10c00017 	ldw	r3,0(r2)
  826458:	e0bffc17 	ldw	r2,-16(fp)
  82645c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  826460:	e0bffb17 	ldw	r2,-20(fp)
  826464:	00c020f4 	movhi	r3,131
  826468:	18e4fa04 	addi	r3,r3,-27672
  82646c:	10800324 	muli	r2,r2,12
  826470:	10c5883a 	add	r2,r2,r3
  826474:	10800104 	addi	r2,r2,4
  826478:	10c00017 	ldw	r3,0(r2)
  82647c:	e0bffc17 	ldw	r2,-16(fp)
  826480:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  826484:	e0bffb17 	ldw	r2,-20(fp)
  826488:	00c020f4 	movhi	r3,131
  82648c:	18e4fa04 	addi	r3,r3,-27672
  826490:	10800324 	muli	r2,r2,12
  826494:	10c5883a 	add	r2,r2,r3
  826498:	10800204 	addi	r2,r2,8
  82649c:	10c00017 	ldw	r3,0(r2)
  8264a0:	e0bffc17 	ldw	r2,-16(fp)
  8264a4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8264a8:	e13ffb17 	ldw	r4,-20(fp)
  8264ac:	081b1800 	call	81b180 <alt_release_fd>
  }
} 
  8264b0:	e037883a 	mov	sp,fp
  8264b4:	dfc00117 	ldw	ra,4(sp)
  8264b8:	df000017 	ldw	fp,0(sp)
  8264bc:	dec00204 	addi	sp,sp,8
  8264c0:	f800283a 	ret

008264c4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8264c4:	defffb04 	addi	sp,sp,-20
  8264c8:	dfc00415 	stw	ra,16(sp)
  8264cc:	df000315 	stw	fp,12(sp)
  8264d0:	df000304 	addi	fp,sp,12
  8264d4:	e13ffd15 	stw	r4,-12(fp)
  8264d8:	e17ffe15 	stw	r5,-8(fp)
  8264dc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8264e0:	010020f4 	movhi	r4,131
  8264e4:	2124fd04 	addi	r4,r4,-27660
  8264e8:	e17ffd17 	ldw	r5,-12(fp)
  8264ec:	01800044 	movi	r6,1
  8264f0:	01c07fc4 	movi	r7,511
  8264f4:	08264000 	call	826400 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8264f8:	010020f4 	movhi	r4,131
  8264fc:	2124fa04 	addi	r4,r4,-27672
  826500:	e17ffe17 	ldw	r5,-8(fp)
  826504:	000d883a 	mov	r6,zero
  826508:	01c07fc4 	movi	r7,511
  82650c:	08264000 	call	826400 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  826510:	010020f4 	movhi	r4,131
  826514:	21250004 	addi	r4,r4,-27648
  826518:	e17fff17 	ldw	r5,-4(fp)
  82651c:	01800044 	movi	r6,1
  826520:	01c07fc4 	movi	r7,511
  826524:	08264000 	call	826400 <alt_open_fd>
}  
  826528:	e037883a 	mov	sp,fp
  82652c:	dfc00117 	ldw	ra,4(sp)
  826530:	df000017 	ldw	fp,0(sp)
  826534:	dec00204 	addi	sp,sp,8
  826538:	f800283a 	ret

0082653c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  82653c:	defffc04 	addi	sp,sp,-16
  826540:	df000315 	stw	fp,12(sp)
  826544:	df000304 	addi	fp,sp,12
  826548:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  82654c:	e0bffe17 	ldw	r2,-8(fp)
  826550:	10800217 	ldw	r2,8(r2)
  826554:	10d00034 	orhi	r3,r2,16384
  826558:	e0bffe17 	ldw	r2,-8(fp)
  82655c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  826560:	e03ffd15 	stw	zero,-12(fp)
  826564:	00002006 	br	8265e8 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  826568:	e0bffd17 	ldw	r2,-12(fp)
  82656c:	00c020f4 	movhi	r3,131
  826570:	18e4fa04 	addi	r3,r3,-27672
  826574:	10800324 	muli	r2,r2,12
  826578:	10c5883a 	add	r2,r2,r3
  82657c:	10c00017 	ldw	r3,0(r2)
  826580:	e0bffe17 	ldw	r2,-8(fp)
  826584:	10800017 	ldw	r2,0(r2)
  826588:	1880141e 	bne	r3,r2,8265dc <alt_file_locked+0xa0>
  82658c:	e0bffd17 	ldw	r2,-12(fp)
  826590:	00c020f4 	movhi	r3,131
  826594:	18e4fa04 	addi	r3,r3,-27672
  826598:	10800324 	muli	r2,r2,12
  82659c:	10c5883a 	add	r2,r2,r3
  8265a0:	10800204 	addi	r2,r2,8
  8265a4:	10800017 	ldw	r2,0(r2)
  8265a8:	1004403a 	cmpge	r2,r2,zero
  8265ac:	10000b1e 	bne	r2,zero,8265dc <alt_file_locked+0xa0>
  8265b0:	e0bffd17 	ldw	r2,-12(fp)
  8265b4:	10800324 	muli	r2,r2,12
  8265b8:	1007883a 	mov	r3,r2
  8265bc:	008020f4 	movhi	r2,131
  8265c0:	10a4fa04 	addi	r2,r2,-27672
  8265c4:	1887883a 	add	r3,r3,r2
  8265c8:	e0bffe17 	ldw	r2,-8(fp)
  8265cc:	18800326 	beq	r3,r2,8265dc <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8265d0:	00bffcc4 	movi	r2,-13
  8265d4:	e0bfff15 	stw	r2,-4(fp)
  8265d8:	00000a06 	br	826604 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8265dc:	e0bffd17 	ldw	r2,-12(fp)
  8265e0:	10800044 	addi	r2,r2,1
  8265e4:	e0bffd15 	stw	r2,-12(fp)
  8265e8:	008020f4 	movhi	r2,131
  8265ec:	10a9a304 	addi	r2,r2,-22900
  8265f0:	10800017 	ldw	r2,0(r2)
  8265f4:	1007883a 	mov	r3,r2
  8265f8:	e0bffd17 	ldw	r2,-12(fp)
  8265fc:	18bfda2e 	bgeu	r3,r2,826568 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  826600:	e03fff15 	stw	zero,-4(fp)
  826604:	e0bfff17 	ldw	r2,-4(fp)
}
  826608:	e037883a 	mov	sp,fp
  82660c:	df000017 	ldw	fp,0(sp)
  826610:	dec00104 	addi	sp,sp,4
  826614:	f800283a 	ret

00826618 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  826618:	defff404 	addi	sp,sp,-48
  82661c:	dfc00b15 	stw	ra,44(sp)
  826620:	df000a15 	stw	fp,40(sp)
  826624:	df000a04 	addi	fp,sp,40
  826628:	e13ffb15 	stw	r4,-20(fp)
  82662c:	e17ffc15 	stw	r5,-16(fp)
  826630:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  826634:	00bfffc4 	movi	r2,-1
  826638:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  82663c:	00bffb44 	movi	r2,-19
  826640:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  826644:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  826648:	e13ffb17 	ldw	r4,-20(fp)
  82664c:	014020f4 	movhi	r5,131
  826650:	2969a104 	addi	r5,r5,-22908
  826654:	082636c0 	call	82636c <alt_find_dev>
  826658:	e0bffa15 	stw	r2,-24(fp)
  82665c:	e0bffa17 	ldw	r2,-24(fp)
  826660:	1004c03a 	cmpne	r2,r2,zero
  826664:	1000051e 	bne	r2,zero,82667c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  826668:	e13ffb17 	ldw	r4,-20(fp)
  82666c:	0826eb00 	call	826eb0 <alt_find_file>
  826670:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  826674:	00800044 	movi	r2,1
  826678:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  82667c:	e0bffa17 	ldw	r2,-24(fp)
  826680:	1005003a 	cmpeq	r2,r2,zero
  826684:	1000301e 	bne	r2,zero,826748 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  826688:	e13ffa17 	ldw	r4,-24(fp)
  82668c:	0826fd00 	call	826fd0 <alt_get_fd>
  826690:	e0bff815 	stw	r2,-32(fp)
  826694:	e0bff817 	ldw	r2,-32(fp)
  826698:	1004403a 	cmpge	r2,r2,zero
  82669c:	1000031e 	bne	r2,zero,8266ac <open+0x94>
    {
      status = index;
  8266a0:	e0bff817 	ldw	r2,-32(fp)
  8266a4:	e0bff715 	stw	r2,-36(fp)
  8266a8:	00002906 	br	826750 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  8266ac:	e0bff817 	ldw	r2,-32(fp)
  8266b0:	10800324 	muli	r2,r2,12
  8266b4:	1007883a 	mov	r3,r2
  8266b8:	008020f4 	movhi	r2,131
  8266bc:	10a4fa04 	addi	r2,r2,-27672
  8266c0:	1885883a 	add	r2,r3,r2
  8266c4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8266c8:	e0fffc17 	ldw	r3,-16(fp)
  8266cc:	00900034 	movhi	r2,16384
  8266d0:	10bfffc4 	addi	r2,r2,-1
  8266d4:	1886703a 	and	r3,r3,r2
  8266d8:	e0bff917 	ldw	r2,-28(fp)
  8266dc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8266e0:	e0bff617 	ldw	r2,-40(fp)
  8266e4:	1004c03a 	cmpne	r2,r2,zero
  8266e8:	1000061e 	bne	r2,zero,826704 <open+0xec>
  8266ec:	e13ff917 	ldw	r4,-28(fp)
  8266f0:	082653c0 	call	82653c <alt_file_locked>
  8266f4:	e0bff715 	stw	r2,-36(fp)
  8266f8:	e0bff717 	ldw	r2,-36(fp)
  8266fc:	1004803a 	cmplt	r2,r2,zero
  826700:	1000131e 	bne	r2,zero,826750 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  826704:	e0bffa17 	ldw	r2,-24(fp)
  826708:	10800317 	ldw	r2,12(r2)
  82670c:	1005003a 	cmpeq	r2,r2,zero
  826710:	1000091e 	bne	r2,zero,826738 <open+0x120>
  826714:	e0bffa17 	ldw	r2,-24(fp)
  826718:	10800317 	ldw	r2,12(r2)
  82671c:	e13ff917 	ldw	r4,-28(fp)
  826720:	e17ffb17 	ldw	r5,-20(fp)
  826724:	e1bffc17 	ldw	r6,-16(fp)
  826728:	e1fffd17 	ldw	r7,-12(fp)
  82672c:	103ee83a 	callr	r2
  826730:	e0bfff15 	stw	r2,-4(fp)
  826734:	00000106 	br	82673c <open+0x124>
  826738:	e03fff15 	stw	zero,-4(fp)
  82673c:	e0bfff17 	ldw	r2,-4(fp)
  826740:	e0bff715 	stw	r2,-36(fp)
  826744:	00000206 	br	826750 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  826748:	00bffb44 	movi	r2,-19
  82674c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  826750:	e0bff717 	ldw	r2,-36(fp)
  826754:	1004403a 	cmpge	r2,r2,zero
  826758:	1000091e 	bne	r2,zero,826780 <open+0x168>
  {
    alt_release_fd (index);  
  82675c:	e13ff817 	ldw	r4,-32(fp)
  826760:	081b1800 	call	81b180 <alt_release_fd>
    ALT_ERRNO = -status;
  826764:	08267a00 	call	8267a0 <alt_get_errno>
  826768:	e0fff717 	ldw	r3,-36(fp)
  82676c:	00c7c83a 	sub	r3,zero,r3
  826770:	10c00015 	stw	r3,0(r2)
    return -1;
  826774:	00bfffc4 	movi	r2,-1
  826778:	e0bffe15 	stw	r2,-8(fp)
  82677c:	00000206 	br	826788 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  826780:	e0bff817 	ldw	r2,-32(fp)
  826784:	e0bffe15 	stw	r2,-8(fp)
  826788:	e0bffe17 	ldw	r2,-8(fp)
}
  82678c:	e037883a 	mov	sp,fp
  826790:	dfc00117 	ldw	ra,4(sp)
  826794:	df000017 	ldw	fp,0(sp)
  826798:	dec00204 	addi	sp,sp,8
  82679c:	f800283a 	ret

008267a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8267a0:	defffd04 	addi	sp,sp,-12
  8267a4:	dfc00215 	stw	ra,8(sp)
  8267a8:	df000115 	stw	fp,4(sp)
  8267ac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8267b0:	008020f4 	movhi	r2,131
  8267b4:	10a9a404 	addi	r2,r2,-22896
  8267b8:	10800017 	ldw	r2,0(r2)
  8267bc:	1005003a 	cmpeq	r2,r2,zero
  8267c0:	1000061e 	bne	r2,zero,8267dc <alt_get_errno+0x3c>
  8267c4:	008020f4 	movhi	r2,131
  8267c8:	10a9a404 	addi	r2,r2,-22896
  8267cc:	10800017 	ldw	r2,0(r2)
  8267d0:	103ee83a 	callr	r2
  8267d4:	e0bfff15 	stw	r2,-4(fp)
  8267d8:	00000306 	br	8267e8 <alt_get_errno+0x48>
  8267dc:	008020f4 	movhi	r2,131
  8267e0:	10a9d104 	addi	r2,r2,-22716
  8267e4:	e0bfff15 	stw	r2,-4(fp)
  8267e8:	e0bfff17 	ldw	r2,-4(fp)
}
  8267ec:	e037883a 	mov	sp,fp
  8267f0:	dfc00117 	ldw	ra,4(sp)
  8267f4:	df000017 	ldw	fp,0(sp)
  8267f8:	dec00204 	addi	sp,sp,8
  8267fc:	f800283a 	ret

00826800 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  826800:	defffa04 	addi	sp,sp,-24
  826804:	df000515 	stw	fp,20(sp)
  826808:	df000504 	addi	fp,sp,20
  82680c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  826810:	0005303a 	rdctl	r2,status
  826814:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  826818:	e0fffd17 	ldw	r3,-12(fp)
  82681c:	00bfff84 	movi	r2,-2
  826820:	1884703a 	and	r2,r3,r2
  826824:	1001703a 	wrctl	status,r2
  
  return context;
  826828:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  82682c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  826830:	e0bfff17 	ldw	r2,-4(fp)
  826834:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  826838:	e0bffc17 	ldw	r2,-16(fp)
  82683c:	10c00017 	ldw	r3,0(r2)
  826840:	e0bffc17 	ldw	r2,-16(fp)
  826844:	10800117 	ldw	r2,4(r2)
  826848:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  82684c:	e0bffc17 	ldw	r2,-16(fp)
  826850:	10c00117 	ldw	r3,4(r2)
  826854:	e0bffc17 	ldw	r2,-16(fp)
  826858:	10800017 	ldw	r2,0(r2)
  82685c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  826860:	e0fffc17 	ldw	r3,-16(fp)
  826864:	e0bffc17 	ldw	r2,-16(fp)
  826868:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  82686c:	e0fffc17 	ldw	r3,-16(fp)
  826870:	e0bffc17 	ldw	r2,-16(fp)
  826874:	18800015 	stw	r2,0(r3)
  826878:	e0bffe17 	ldw	r2,-8(fp)
  82687c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  826880:	e0bffb17 	ldw	r2,-20(fp)
  826884:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  826888:	e037883a 	mov	sp,fp
  82688c:	df000017 	ldw	fp,0(sp)
  826890:	dec00104 	addi	sp,sp,4
  826894:	f800283a 	ret

00826898 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  826898:	defffb04 	addi	sp,sp,-20
  82689c:	dfc00415 	stw	ra,16(sp)
  8268a0:	df000315 	stw	fp,12(sp)
  8268a4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  8268a8:	d0a02e17 	ldw	r2,-32584(gp)
  8268ac:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8268b0:	d0a05b17 	ldw	r2,-32404(gp)
  8268b4:	10800044 	addi	r2,r2,1
  8268b8:	d0a05b15 	stw	r2,-32404(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8268bc:	00003106 	br	826984 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  8268c0:	e0bffe17 	ldw	r2,-8(fp)
  8268c4:	10800017 	ldw	r2,0(r2)
  8268c8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8268cc:	e0bffe17 	ldw	r2,-8(fp)
  8268d0:	10800403 	ldbu	r2,16(r2)
  8268d4:	10803fcc 	andi	r2,r2,255
  8268d8:	1005003a 	cmpeq	r2,r2,zero
  8268dc:	1000051e 	bne	r2,zero,8268f4 <alt_tick+0x5c>
  8268e0:	d0a05b17 	ldw	r2,-32404(gp)
  8268e4:	1004c03a 	cmpne	r2,r2,zero
  8268e8:	1000021e 	bne	r2,zero,8268f4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  8268ec:	e0bffe17 	ldw	r2,-8(fp)
  8268f0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8268f4:	e0bffe17 	ldw	r2,-8(fp)
  8268f8:	10c00217 	ldw	r3,8(r2)
  8268fc:	d0a05b17 	ldw	r2,-32404(gp)
  826900:	10c01e36 	bltu	r2,r3,82697c <alt_tick+0xe4>
  826904:	e0bffe17 	ldw	r2,-8(fp)
  826908:	10800403 	ldbu	r2,16(r2)
  82690c:	10803fcc 	andi	r2,r2,255
  826910:	1004c03a 	cmpne	r2,r2,zero
  826914:	1000191e 	bne	r2,zero,82697c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  826918:	e0bffe17 	ldw	r2,-8(fp)
  82691c:	10c00317 	ldw	r3,12(r2)
  826920:	e0bffe17 	ldw	r2,-8(fp)
  826924:	11000517 	ldw	r4,20(r2)
  826928:	183ee83a 	callr	r3
  82692c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  826930:	e0bffd17 	ldw	r2,-12(fp)
  826934:	1004c03a 	cmpne	r2,r2,zero
  826938:	1000031e 	bne	r2,zero,826948 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  82693c:	e13ffe17 	ldw	r4,-8(fp)
  826940:	08268000 	call	826800 <alt_alarm_stop>
  826944:	00000d06 	br	82697c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  826948:	e0bffe17 	ldw	r2,-8(fp)
  82694c:	10c00217 	ldw	r3,8(r2)
  826950:	e0bffd17 	ldw	r2,-12(fp)
  826954:	1887883a 	add	r3,r3,r2
  826958:	e0bffe17 	ldw	r2,-8(fp)
  82695c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  826960:	e0bffe17 	ldw	r2,-8(fp)
  826964:	10c00217 	ldw	r3,8(r2)
  826968:	d0a05b17 	ldw	r2,-32404(gp)
  82696c:	1880032e 	bgeu	r3,r2,82697c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  826970:	e0fffe17 	ldw	r3,-8(fp)
  826974:	00800044 	movi	r2,1
  826978:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  82697c:	e0bfff17 	ldw	r2,-4(fp)
  826980:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  826984:	d0e02e04 	addi	r3,gp,-32584
  826988:	e0bffe17 	ldw	r2,-8(fp)
  82698c:	10ffcc1e 	bne	r2,r3,8268c0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  826990:	081c5980 	call	81c598 <OSTimeTick>
}
  826994:	e037883a 	mov	sp,fp
  826998:	dfc00117 	ldw	ra,4(sp)
  82699c:	df000017 	ldw	fp,0(sp)
  8269a0:	dec00204 	addi	sp,sp,8
  8269a4:	f800283a 	ret

008269a8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  8269a8:	deffff04 	addi	sp,sp,-4
  8269ac:	df000015 	stw	fp,0(sp)
  8269b0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8269b4:	000170fa 	wrctl	ienable,zero
}
  8269b8:	e037883a 	mov	sp,fp
  8269bc:	df000017 	ldw	fp,0(sp)
  8269c0:	dec00104 	addi	sp,sp,4
  8269c4:	f800283a 	ret

008269c8 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  8269c8:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  8269cc:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  8269d0:	d1205517 	ldw	r4,-32428(gp)

      stw ra,  0(sp)
  8269d4:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  8269d8:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  8269dc:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  8269e0:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  8269e4:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  8269e8:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  8269ec:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  8269f0:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  8269f4:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  8269f8:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  8269fc:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  826a00:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  826a04:	0826de80 	call	826de8 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  826a08:	d1205017 	ldw	r4,-32448(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  826a0c:	d1604807 	ldb	r5,-32480(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  826a10:	d1205515 	stw	r4,-32428(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  826a14:	d1604845 	stb	r5,-32479(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  826a18:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  826a1c:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  826a20:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  826a24:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  826a28:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  826a2c:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  826a30:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  826a34:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  826a38:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  826a3c:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  826a40:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  826a44:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  826a48:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  826a4c:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  826a50:	f800283a 	ret

00826a54 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  826a54:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  826a58:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  826a5c:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  826a60:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  826a64:	0826de80 	call	826de8 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  826a68:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  826a6c:	d4a04645 	stb	r18,-32487(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  826a70:	003fe506 	br	826a08 <OSCtxSw+0x40>

00826a74 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  826a74:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  826a78:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  826a7c:	10800054 	ori	r2,r2,1
      wrctl status, r2
  826a80:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  826a84:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  826a88:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  826a8c:	dec00204 	addi	sp,sp,8

      callr r2
  826a90:	103ee83a 	callr	r2

      nop
  826a94:	0001883a 	nop

00826a98 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  826a98:	defff704 	addi	sp,sp,-36
  826a9c:	dfc00815 	stw	ra,32(sp)
  826aa0:	df000715 	stw	fp,28(sp)
  826aa4:	df000704 	addi	fp,sp,28
  826aa8:	e13ffc15 	stw	r4,-16(fp)
  826aac:	e17ffd15 	stw	r5,-12(fp)
  826ab0:	e1bffe15 	stw	r6,-8(fp)
  826ab4:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  826ab8:	e0bffe17 	ldw	r2,-8(fp)
  826abc:	1007883a 	mov	r3,r2
  826ac0:	00bfff04 	movi	r2,-4
  826ac4:	1884703a 	and	r2,r3,r2
  826ac8:	10bf0004 	addi	r2,r2,-1024
  826acc:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  826ad0:	e0bff917 	ldw	r2,-28(fp)
  826ad4:	10000015 	stw	zero,0(r2)
  826ad8:	e0bff917 	ldw	r2,-28(fp)
  826adc:	10c0bb04 	addi	r3,r2,748
  826ae0:	e0bff917 	ldw	r2,-28(fp)
  826ae4:	10c00115 	stw	r3,4(r2)
  826ae8:	e0bff917 	ldw	r2,-28(fp)
  826aec:	1080bb04 	addi	r2,r2,748
  826af0:	10c01704 	addi	r3,r2,92
  826af4:	e0bff917 	ldw	r2,-28(fp)
  826af8:	10c00215 	stw	r3,8(r2)
  826afc:	e0bff917 	ldw	r2,-28(fp)
  826b00:	1080bb04 	addi	r2,r2,748
  826b04:	10c02e04 	addi	r3,r2,184
  826b08:	e0bff917 	ldw	r2,-28(fp)
  826b0c:	10c00315 	stw	r3,12(r2)
  826b10:	e0bff917 	ldw	r2,-28(fp)
  826b14:	10000415 	stw	zero,16(r2)
  826b18:	e0bff917 	ldw	r2,-28(fp)
  826b1c:	10800504 	addi	r2,r2,20
  826b20:	1009883a 	mov	r4,r2
  826b24:	01800644 	movi	r6,25
  826b28:	000b883a 	mov	r5,zero
  826b2c:	08179380 	call	817938 <memset>
  826b30:	e0bff917 	ldw	r2,-28(fp)
  826b34:	10000c15 	stw	zero,48(r2)
  826b38:	e0fff917 	ldw	r3,-28(fp)
  826b3c:	008020f4 	movhi	r2,131
  826b40:	10a2e704 	addi	r2,r2,-29796
  826b44:	18800d15 	stw	r2,52(r3)
  826b48:	e0bff917 	ldw	r2,-28(fp)
  826b4c:	10000e15 	stw	zero,56(r2)
  826b50:	e0bff917 	ldw	r2,-28(fp)
  826b54:	10000f15 	stw	zero,60(r2)
  826b58:	e0bff917 	ldw	r2,-28(fp)
  826b5c:	10001015 	stw	zero,64(r2)
  826b60:	e0bff917 	ldw	r2,-28(fp)
  826b64:	10001115 	stw	zero,68(r2)
  826b68:	e0bff917 	ldw	r2,-28(fp)
  826b6c:	10001215 	stw	zero,72(r2)
  826b70:	e0bff917 	ldw	r2,-28(fp)
  826b74:	10001315 	stw	zero,76(r2)
  826b78:	e0bff917 	ldw	r2,-28(fp)
  826b7c:	10001415 	stw	zero,80(r2)
  826b80:	e0bff917 	ldw	r2,-28(fp)
  826b84:	10001515 	stw	zero,84(r2)
  826b88:	e0bff917 	ldw	r2,-28(fp)
  826b8c:	10001615 	stw	zero,88(r2)
  826b90:	e0bff917 	ldw	r2,-28(fp)
  826b94:	10001715 	stw	zero,92(r2)
  826b98:	e0bff917 	ldw	r2,-28(fp)
  826b9c:	10001805 	stb	zero,96(r2)
  826ba0:	e0bff917 	ldw	r2,-28(fp)
  826ba4:	10801f04 	addi	r2,r2,124
  826ba8:	10000015 	stw	zero,0(r2)
  826bac:	10000115 	stw	zero,4(r2)
  826bb0:	10000215 	stw	zero,8(r2)
  826bb4:	10000315 	stw	zero,12(r2)
  826bb8:	10000415 	stw	zero,16(r2)
  826bbc:	10000515 	stw	zero,20(r2)
  826bc0:	10000615 	stw	zero,24(r2)
  826bc4:	10000715 	stw	zero,28(r2)
  826bc8:	10000815 	stw	zero,32(r2)
  826bcc:	e0bff917 	ldw	r2,-28(fp)
  826bd0:	10002815 	stw	zero,160(r2)
  826bd4:	e0fff917 	ldw	r3,-28(fp)
  826bd8:	00800044 	movi	r2,1
  826bdc:	18802915 	stw	r2,164(r3)
  826be0:	18002a15 	stw	zero,168(r3)
  826be4:	e0fff917 	ldw	r3,-28(fp)
  826be8:	008cc384 	movi	r2,13070
  826bec:	18802b0d 	sth	r2,172(r3)
  826bf0:	e0fff917 	ldw	r3,-28(fp)
  826bf4:	00aaf344 	movi	r2,-21555
  826bf8:	18802b8d 	sth	r2,174(r3)
  826bfc:	e0fff917 	ldw	r3,-28(fp)
  826c00:	00848d04 	movi	r2,4660
  826c04:	18802c0d 	sth	r2,176(r3)
  826c08:	e0fff917 	ldw	r3,-28(fp)
  826c0c:	00b99b44 	movi	r2,-6547
  826c10:	18802c8d 	sth	r2,178(r3)
  826c14:	e0fff917 	ldw	r3,-28(fp)
  826c18:	00b7bb04 	movi	r2,-8468
  826c1c:	18802d0d 	sth	r2,180(r3)
  826c20:	e0fff917 	ldw	r3,-28(fp)
  826c24:	00800144 	movi	r2,5
  826c28:	18802d8d 	sth	r2,182(r3)
  826c2c:	e0fff917 	ldw	r3,-28(fp)
  826c30:	008002c4 	movi	r2,11
  826c34:	18802e0d 	sth	r2,184(r3)
  826c38:	e0bff917 	ldw	r2,-28(fp)
  826c3c:	10002f15 	stw	zero,188(r2)
  826c40:	e0bff917 	ldw	r2,-28(fp)
  826c44:	10003015 	stw	zero,192(r2)
  826c48:	e0bff917 	ldw	r2,-28(fp)
  826c4c:	10003115 	stw	zero,196(r2)
  826c50:	e0bff917 	ldw	r2,-28(fp)
  826c54:	10003215 	stw	zero,200(r2)
  826c58:	e0bff917 	ldw	r2,-28(fp)
  826c5c:	10003315 	stw	zero,204(r2)
  826c60:	e0bff917 	ldw	r2,-28(fp)
  826c64:	10003415 	stw	zero,208(r2)
  826c68:	e0bff917 	ldw	r2,-28(fp)
  826c6c:	10003e15 	stw	zero,248(r2)
  826c70:	e0bff917 	ldw	r2,-28(fp)
  826c74:	10003f15 	stw	zero,252(r2)
  826c78:	e0bff917 	ldw	r2,-28(fp)
  826c7c:	10004015 	stw	zero,256(r2)
  826c80:	e0bff917 	ldw	r2,-28(fp)
  826c84:	10004115 	stw	zero,260(r2)
  826c88:	e0bff917 	ldw	r2,-28(fp)
  826c8c:	10004215 	stw	zero,264(r2)
  826c90:	e0bff917 	ldw	r2,-28(fp)
  826c94:	10004315 	stw	zero,268(r2)
  826c98:	e0bff917 	ldw	r2,-28(fp)
  826c9c:	10004415 	stw	zero,272(r2)
  826ca0:	e0bff917 	ldw	r2,-28(fp)
  826ca4:	10004515 	stw	zero,276(r2)
  826ca8:	e0bff917 	ldw	r2,-28(fp)
  826cac:	10004615 	stw	zero,280(r2)
  826cb0:	e0bff917 	ldw	r2,-28(fp)
  826cb4:	10004715 	stw	zero,284(r2)
  826cb8:	e0bff917 	ldw	r2,-28(fp)
  826cbc:	10003505 	stb	zero,212(r2)
  826cc0:	e0bff917 	ldw	r2,-28(fp)
  826cc4:	10003705 	stb	zero,220(r2)
  826cc8:	e0bff917 	ldw	r2,-28(fp)
  826ccc:	10003d15 	stw	zero,244(r2)
  826cd0:	e0bff917 	ldw	r2,-28(fp)
  826cd4:	10005215 	stw	zero,328(r2)
  826cd8:	e0bff917 	ldw	r2,-28(fp)
  826cdc:	10005315 	stw	zero,332(r2)
  826ce0:	e0bff917 	ldw	r2,-28(fp)
  826ce4:	10005415 	stw	zero,336(r2)
  826ce8:	e0bff917 	ldw	r2,-28(fp)
  826cec:	10005515 	stw	zero,340(r2)
  826cf0:	e0bff917 	ldw	r2,-28(fp)
  826cf4:	1000b515 	stw	zero,724(r2)
  826cf8:	e0bff917 	ldw	r2,-28(fp)
  826cfc:	10007515 	stw	zero,468(r2)
  826d00:	e0bff917 	ldw	r2,-28(fp)
  826d04:	1000b715 	stw	zero,732(r2)
  826d08:	e0bff917 	ldw	r2,-28(fp)
  826d0c:	1000b815 	stw	zero,736(r2)
  826d10:	e0bff917 	ldw	r2,-28(fp)
  826d14:	1000b915 	stw	zero,740(r2)
  826d18:	e0bff917 	ldw	r2,-28(fp)
  826d1c:	1000ba15 	stw	zero,744(r2)
  826d20:	e0bff917 	ldw	r2,-28(fp)
  826d24:	1080bb04 	addi	r2,r2,748
  826d28:	1009883a 	mov	r4,r2
  826d2c:	01804504 	movi	r6,276
  826d30:	000b883a 	mov	r5,zero
  826d34:	08179380 	call	817938 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  826d38:	e0bff917 	ldw	r2,-28(fp)
  826d3c:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  826d40:	e0bffb17 	ldw	r2,-20(fp)
  826d44:	10bff304 	addi	r2,r2,-52
  826d48:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  826d4c:	e0bffa17 	ldw	r2,-24(fp)
  826d50:	10c00c04 	addi	r3,r2,48
  826d54:	e0bffc17 	ldw	r2,-16(fp)
  826d58:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  826d5c:	e0bffa17 	ldw	r2,-24(fp)
  826d60:	10c00b04 	addi	r3,r2,44
  826d64:	e0bffd17 	ldw	r2,-12(fp)
  826d68:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  826d6c:	e0bffa17 	ldw	r2,-24(fp)
  826d70:	10c00a04 	addi	r3,r2,40
  826d74:	e0bff917 	ldw	r2,-28(fp)
  826d78:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  826d7c:	008020b4 	movhi	r2,130
  826d80:	109a9d04 	addi	r2,r2,27252
  826d84:	10c00104 	addi	r3,r2,4
  826d88:	e0bffa17 	ldw	r2,-24(fp)
  826d8c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  826d90:	e0bffa17 	ldw	r2,-24(fp)
}
  826d94:	e037883a 	mov	sp,fp
  826d98:	dfc00117 	ldw	ra,4(sp)
  826d9c:	df000017 	ldw	fp,0(sp)
  826da0:	dec00204 	addi	sp,sp,8
  826da4:	f800283a 	ret

00826da8 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  826da8:	defffe04 	addi	sp,sp,-8
  826dac:	df000115 	stw	fp,4(sp)
  826db0:	df000104 	addi	fp,sp,4
  826db4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  826db8:	e037883a 	mov	sp,fp
  826dbc:	df000017 	ldw	fp,0(sp)
  826dc0:	dec00104 	addi	sp,sp,4
  826dc4:	f800283a 	ret

00826dc8 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  826dc8:	defffe04 	addi	sp,sp,-8
  826dcc:	df000115 	stw	fp,4(sp)
  826dd0:	df000104 	addi	fp,sp,4
  826dd4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  826dd8:	e037883a 	mov	sp,fp
  826ddc:	df000017 	ldw	fp,0(sp)
  826de0:	dec00104 	addi	sp,sp,4
  826de4:	f800283a 	ret

00826de8 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  826de8:	deffff04 	addi	sp,sp,-4
  826dec:	df000015 	stw	fp,0(sp)
  826df0:	d839883a 	mov	fp,sp
}
  826df4:	e037883a 	mov	sp,fp
  826df8:	df000017 	ldw	fp,0(sp)
  826dfc:	dec00104 	addi	sp,sp,4
  826e00:	f800283a 	ret

00826e04 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  826e04:	deffff04 	addi	sp,sp,-4
  826e08:	df000015 	stw	fp,0(sp)
  826e0c:	d839883a 	mov	fp,sp
}
  826e10:	e037883a 	mov	sp,fp
  826e14:	df000017 	ldw	fp,0(sp)
  826e18:	dec00104 	addi	sp,sp,4
  826e1c:	f800283a 	ret

00826e20 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  826e20:	deffff04 	addi	sp,sp,-4
  826e24:	df000015 	stw	fp,0(sp)
  826e28:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  826e2c:	e037883a 	mov	sp,fp
  826e30:	df000017 	ldw	fp,0(sp)
  826e34:	dec00104 	addi	sp,sp,4
  826e38:	f800283a 	ret

00826e3c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  826e3c:	deffff04 	addi	sp,sp,-4
  826e40:	df000015 	stw	fp,0(sp)
  826e44:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  826e48:	e037883a 	mov	sp,fp
  826e4c:	df000017 	ldw	fp,0(sp)
  826e50:	dec00104 	addi	sp,sp,4
  826e54:	f800283a 	ret

00826e58 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  826e58:	deffff04 	addi	sp,sp,-4
  826e5c:	df000015 	stw	fp,0(sp)
  826e60:	d839883a 	mov	fp,sp
}
  826e64:	e037883a 	mov	sp,fp
  826e68:	df000017 	ldw	fp,0(sp)
  826e6c:	dec00104 	addi	sp,sp,4
  826e70:	f800283a 	ret

00826e74 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  826e74:	deffff04 	addi	sp,sp,-4
  826e78:	df000015 	stw	fp,0(sp)
  826e7c:	d839883a 	mov	fp,sp
}
  826e80:	e037883a 	mov	sp,fp
  826e84:	df000017 	ldw	fp,0(sp)
  826e88:	dec00104 	addi	sp,sp,4
  826e8c:	f800283a 	ret

00826e90 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  826e90:	defffe04 	addi	sp,sp,-8
  826e94:	df000115 	stw	fp,4(sp)
  826e98:	df000104 	addi	fp,sp,4
  826e9c:	e13fff15 	stw	r4,-4(fp)
}
  826ea0:	e037883a 	mov	sp,fp
  826ea4:	df000017 	ldw	fp,0(sp)
  826ea8:	dec00104 	addi	sp,sp,4
  826eac:	f800283a 	ret

00826eb0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  826eb0:	defffa04 	addi	sp,sp,-24
  826eb4:	dfc00515 	stw	ra,20(sp)
  826eb8:	df000415 	stw	fp,16(sp)
  826ebc:	df000404 	addi	fp,sp,16
  826ec0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  826ec4:	008020f4 	movhi	r2,131
  826ec8:	10a99f04 	addi	r2,r2,-22916
  826ecc:	10800017 	ldw	r2,0(r2)
  826ed0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  826ed4:	00003306 	br	826fa4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  826ed8:	e0bffd17 	ldw	r2,-12(fp)
  826edc:	11000217 	ldw	r4,8(r2)
  826ee0:	0812bd80 	call	812bd8 <strlen>
  826ee4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  826ee8:	e0bffd17 	ldw	r2,-12(fp)
  826eec:	10c00217 	ldw	r3,8(r2)
  826ef0:	e0bffc17 	ldw	r2,-16(fp)
  826ef4:	1885883a 	add	r2,r3,r2
  826ef8:	10bfffc4 	addi	r2,r2,-1
  826efc:	10800003 	ldbu	r2,0(r2)
  826f00:	10803fcc 	andi	r2,r2,255
  826f04:	1080201c 	xori	r2,r2,128
  826f08:	10bfe004 	addi	r2,r2,-128
  826f0c:	10800bd8 	cmpnei	r2,r2,47
  826f10:	1000031e 	bne	r2,zero,826f20 <alt_find_file+0x70>
    {
      len -= 1;
  826f14:	e0bffc17 	ldw	r2,-16(fp)
  826f18:	10bfffc4 	addi	r2,r2,-1
  826f1c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  826f20:	e0bffc17 	ldw	r2,-16(fp)
  826f24:	1007883a 	mov	r3,r2
  826f28:	e0bffe17 	ldw	r2,-8(fp)
  826f2c:	1885883a 	add	r2,r3,r2
  826f30:	10800003 	ldbu	r2,0(r2)
  826f34:	10803fcc 	andi	r2,r2,255
  826f38:	1080201c 	xori	r2,r2,128
  826f3c:	10bfe004 	addi	r2,r2,-128
  826f40:	10800be0 	cmpeqi	r2,r2,47
  826f44:	10000a1e 	bne	r2,zero,826f70 <alt_find_file+0xc0>
  826f48:	e0bffc17 	ldw	r2,-16(fp)
  826f4c:	1007883a 	mov	r3,r2
  826f50:	e0bffe17 	ldw	r2,-8(fp)
  826f54:	1885883a 	add	r2,r3,r2
  826f58:	10800003 	ldbu	r2,0(r2)
  826f5c:	10803fcc 	andi	r2,r2,255
  826f60:	1080201c 	xori	r2,r2,128
  826f64:	10bfe004 	addi	r2,r2,-128
  826f68:	1004c03a 	cmpne	r2,r2,zero
  826f6c:	10000a1e 	bne	r2,zero,826f98 <alt_find_file+0xe8>
  826f70:	e0bffd17 	ldw	r2,-12(fp)
  826f74:	11000217 	ldw	r4,8(r2)
  826f78:	e1bffc17 	ldw	r6,-16(fp)
  826f7c:	e17ffe17 	ldw	r5,-8(fp)
  826f80:	08271100 	call	827110 <memcmp>
  826f84:	1004c03a 	cmpne	r2,r2,zero
  826f88:	1000031e 	bne	r2,zero,826f98 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  826f8c:	e0bffd17 	ldw	r2,-12(fp)
  826f90:	e0bfff15 	stw	r2,-4(fp)
  826f94:	00000806 	br	826fb8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  826f98:	e0bffd17 	ldw	r2,-12(fp)
  826f9c:	10800017 	ldw	r2,0(r2)
  826fa0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  826fa4:	00c020f4 	movhi	r3,131
  826fa8:	18e99f04 	addi	r3,r3,-22916
  826fac:	e0bffd17 	ldw	r2,-12(fp)
  826fb0:	10ffc91e 	bne	r2,r3,826ed8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  826fb4:	e03fff15 	stw	zero,-4(fp)
  826fb8:	e0bfff17 	ldw	r2,-4(fp)
}
  826fbc:	e037883a 	mov	sp,fp
  826fc0:	dfc00117 	ldw	ra,4(sp)
  826fc4:	df000017 	ldw	fp,0(sp)
  826fc8:	dec00204 	addi	sp,sp,8
  826fcc:	f800283a 	ret

00826fd0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  826fd0:	defff804 	addi	sp,sp,-32
  826fd4:	dfc00715 	stw	ra,28(sp)
  826fd8:	df000615 	stw	fp,24(sp)
  826fdc:	df000604 	addi	fp,sp,24
  826fe0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  826fe4:	00bffa04 	movi	r2,-24
  826fe8:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  826fec:	008020f4 	movhi	r2,131
  826ff0:	10a9d504 	addi	r2,r2,-22700
  826ff4:	10800017 	ldw	r2,0(r2)
  826ff8:	e0bffa15 	stw	r2,-24(fp)
  826ffc:	e03ffb0d 	sth	zero,-20(fp)
  827000:	e17ffb0b 	ldhu	r5,-20(fp)
  827004:	e1bffe04 	addi	r6,fp,-8
  827008:	e13ffa17 	ldw	r4,-24(fp)
  82700c:	08213b40 	call	8213b4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  827010:	e03ffd15 	stw	zero,-12(fp)
  827014:	00001e06 	br	827090 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
  827018:	e0bffd17 	ldw	r2,-12(fp)
  82701c:	00c020f4 	movhi	r3,131
  827020:	18e4fa04 	addi	r3,r3,-27672
  827024:	10800324 	muli	r2,r2,12
  827028:	10c5883a 	add	r2,r2,r3
  82702c:	10800017 	ldw	r2,0(r2)
  827030:	1004c03a 	cmpne	r2,r2,zero
  827034:	1000131e 	bne	r2,zero,827084 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
  827038:	e0bffd17 	ldw	r2,-12(fp)
  82703c:	00c020f4 	movhi	r3,131
  827040:	18e4fa04 	addi	r3,r3,-27672
  827044:	10800324 	muli	r2,r2,12
  827048:	10c7883a 	add	r3,r2,r3
  82704c:	e0bfff17 	ldw	r2,-4(fp)
  827050:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  827054:	008020f4 	movhi	r2,131
  827058:	10a9a304 	addi	r2,r2,-22900
  82705c:	10c00017 	ldw	r3,0(r2)
  827060:	e0bffd17 	ldw	r2,-12(fp)
  827064:	1880040e 	bge	r3,r2,827078 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
  827068:	00c020f4 	movhi	r3,131
  82706c:	18e9a304 	addi	r3,r3,-22900
  827070:	e0bffd17 	ldw	r2,-12(fp)
  827074:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  827078:	e0bffd17 	ldw	r2,-12(fp)
  82707c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
  827080:	00000606 	br	82709c <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  827084:	e0bffd17 	ldw	r2,-12(fp)
  827088:	10800044 	addi	r2,r2,1
  82708c:	e0bffd15 	stw	r2,-12(fp)
  827090:	e0bffd17 	ldw	r2,-12(fp)
  827094:	10800810 	cmplti	r2,r2,32
  827098:	103fdf1e 	bne	r2,zero,827018 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  82709c:	008020f4 	movhi	r2,131
  8270a0:	10a9d504 	addi	r2,r2,-22700
  8270a4:	11000017 	ldw	r4,0(r2)
  8270a8:	08217ac0 	call	8217ac <OSSemPost>

  return rc;
  8270ac:	e0bffc17 	ldw	r2,-16(fp)
}
  8270b0:	e037883a 	mov	sp,fp
  8270b4:	dfc00117 	ldw	ra,4(sp)
  8270b8:	df000017 	ldw	fp,0(sp)
  8270bc:	dec00204 	addi	sp,sp,8
  8270c0:	f800283a 	ret

008270c4 <atexit>:
  8270c4:	200b883a 	mov	r5,r4
  8270c8:	000d883a 	mov	r6,zero
  8270cc:	0009883a 	mov	r4,zero
  8270d0:	000f883a 	mov	r7,zero
  8270d4:	08271841 	jmpi	827184 <__register_exitproc>

008270d8 <exit>:
  8270d8:	defffe04 	addi	sp,sp,-8
  8270dc:	000b883a 	mov	r5,zero
  8270e0:	dc000015 	stw	r16,0(sp)
  8270e4:	dfc00115 	stw	ra,4(sp)
  8270e8:	2021883a 	mov	r16,r4
  8270ec:	08272bc0 	call	8272bc <__call_exitprocs>
  8270f0:	008020f4 	movhi	r2,131
  8270f4:	10a99a04 	addi	r2,r2,-22936
  8270f8:	11000017 	ldw	r4,0(r2)
  8270fc:	20800f17 	ldw	r2,60(r4)
  827100:	10000126 	beq	r2,zero,827108 <exit+0x30>
  827104:	103ee83a 	callr	r2
  827108:	8009883a 	mov	r4,r16
  82710c:	08274ac0 	call	8274ac <_exit>

00827110 <memcmp>:
  827110:	00c000c4 	movi	r3,3
  827114:	1980032e 	bgeu	r3,r6,827124 <memcmp+0x14>
  827118:	2144b03a 	or	r2,r4,r5
  82711c:	10c4703a 	and	r2,r2,r3
  827120:	10000f26 	beq	r2,zero,827160 <memcmp+0x50>
  827124:	31ffffc4 	addi	r7,r6,-1
  827128:	3000061e 	bne	r6,zero,827144 <memcmp+0x34>
  82712c:	00000a06 	br	827158 <memcmp+0x48>
  827130:	39ffffc4 	addi	r7,r7,-1
  827134:	00bfffc4 	movi	r2,-1
  827138:	21000044 	addi	r4,r4,1
  82713c:	29400044 	addi	r5,r5,1
  827140:	38800526 	beq	r7,r2,827158 <memcmp+0x48>
  827144:	20c00003 	ldbu	r3,0(r4)
  827148:	28800003 	ldbu	r2,0(r5)
  82714c:	18bff826 	beq	r3,r2,827130 <memcmp+0x20>
  827150:	1885c83a 	sub	r2,r3,r2
  827154:	f800283a 	ret
  827158:	0005883a 	mov	r2,zero
  82715c:	f800283a 	ret
  827160:	180f883a 	mov	r7,r3
  827164:	20c00017 	ldw	r3,0(r4)
  827168:	28800017 	ldw	r2,0(r5)
  82716c:	18bfed1e 	bne	r3,r2,827124 <memcmp+0x14>
  827170:	31bfff04 	addi	r6,r6,-4
  827174:	21000104 	addi	r4,r4,4
  827178:	29400104 	addi	r5,r5,4
  82717c:	39bff936 	bltu	r7,r6,827164 <memcmp+0x54>
  827180:	003fe806 	br	827124 <memcmp+0x14>

00827184 <__register_exitproc>:
  827184:	defffa04 	addi	sp,sp,-24
  827188:	008020f4 	movhi	r2,131
  82718c:	10a99a04 	addi	r2,r2,-22936
  827190:	dc000015 	stw	r16,0(sp)
  827194:	14000017 	ldw	r16,0(r2)
  827198:	dd000415 	stw	r20,16(sp)
  82719c:	2829883a 	mov	r20,r5
  8271a0:	81405217 	ldw	r5,328(r16)
  8271a4:	dcc00315 	stw	r19,12(sp)
  8271a8:	dc800215 	stw	r18,8(sp)
  8271ac:	dc400115 	stw	r17,4(sp)
  8271b0:	dfc00515 	stw	ra,20(sp)
  8271b4:	2023883a 	mov	r17,r4
  8271b8:	3027883a 	mov	r19,r6
  8271bc:	3825883a 	mov	r18,r7
  8271c0:	28002526 	beq	r5,zero,827258 <__register_exitproc+0xd4>
  8271c4:	29000117 	ldw	r4,4(r5)
  8271c8:	008007c4 	movi	r2,31
  8271cc:	11002716 	blt	r2,r4,82726c <__register_exitproc+0xe8>
  8271d0:	8800101e 	bne	r17,zero,827214 <__register_exitproc+0x90>
  8271d4:	2105883a 	add	r2,r4,r4
  8271d8:	1085883a 	add	r2,r2,r2
  8271dc:	20c00044 	addi	r3,r4,1
  8271e0:	1145883a 	add	r2,r2,r5
  8271e4:	0009883a 	mov	r4,zero
  8271e8:	15000215 	stw	r20,8(r2)
  8271ec:	28c00115 	stw	r3,4(r5)
  8271f0:	2005883a 	mov	r2,r4
  8271f4:	dfc00517 	ldw	ra,20(sp)
  8271f8:	dd000417 	ldw	r20,16(sp)
  8271fc:	dcc00317 	ldw	r19,12(sp)
  827200:	dc800217 	ldw	r18,8(sp)
  827204:	dc400117 	ldw	r17,4(sp)
  827208:	dc000017 	ldw	r16,0(sp)
  82720c:	dec00604 	addi	sp,sp,24
  827210:	f800283a 	ret
  827214:	29802204 	addi	r6,r5,136
  827218:	00800044 	movi	r2,1
  82721c:	110e983a 	sll	r7,r2,r4
  827220:	30c04017 	ldw	r3,256(r6)
  827224:	2105883a 	add	r2,r4,r4
  827228:	1085883a 	add	r2,r2,r2
  82722c:	1185883a 	add	r2,r2,r6
  827230:	19c6b03a 	or	r3,r3,r7
  827234:	14802015 	stw	r18,128(r2)
  827238:	14c00015 	stw	r19,0(r2)
  82723c:	00800084 	movi	r2,2
  827240:	30c04015 	stw	r3,256(r6)
  827244:	88bfe31e 	bne	r17,r2,8271d4 <__register_exitproc+0x50>
  827248:	30804117 	ldw	r2,260(r6)
  82724c:	11c4b03a 	or	r2,r2,r7
  827250:	30804115 	stw	r2,260(r6)
  827254:	003fdf06 	br	8271d4 <__register_exitproc+0x50>
  827258:	00802534 	movhi	r2,148
  82725c:	10b79b04 	addi	r2,r2,-8596
  827260:	100b883a 	mov	r5,r2
  827264:	80805215 	stw	r2,328(r16)
  827268:	003fd606 	br	8271c4 <__register_exitproc+0x40>
  82726c:	00802074 	movhi	r2,129
  827270:	1086cc04 	addi	r2,r2,6960
  827274:	1000021e 	bne	r2,zero,827280 <__register_exitproc+0xfc>
  827278:	013fffc4 	movi	r4,-1
  82727c:	003fdc06 	br	8271f0 <__register_exitproc+0x6c>
  827280:	01006404 	movi	r4,400
  827284:	103ee83a 	callr	r2
  827288:	1007883a 	mov	r3,r2
  82728c:	103ffa26 	beq	r2,zero,827278 <__register_exitproc+0xf4>
  827290:	80805217 	ldw	r2,328(r16)
  827294:	180b883a 	mov	r5,r3
  827298:	18000115 	stw	zero,4(r3)
  82729c:	18800015 	stw	r2,0(r3)
  8272a0:	80c05215 	stw	r3,328(r16)
  8272a4:	18006215 	stw	zero,392(r3)
  8272a8:	18006315 	stw	zero,396(r3)
  8272ac:	0009883a 	mov	r4,zero
  8272b0:	883fc826 	beq	r17,zero,8271d4 <__register_exitproc+0x50>
  8272b4:	003fd706 	br	827214 <__register_exitproc+0x90>

008272b8 <register_fini>:
  8272b8:	f800283a 	ret

008272bc <__call_exitprocs>:
  8272bc:	008020f4 	movhi	r2,131
  8272c0:	10a99a04 	addi	r2,r2,-22936
  8272c4:	10800017 	ldw	r2,0(r2)
  8272c8:	defff304 	addi	sp,sp,-52
  8272cc:	df000b15 	stw	fp,44(sp)
  8272d0:	d8800115 	stw	r2,4(sp)
  8272d4:	00802074 	movhi	r2,129
  8272d8:	1086c704 	addi	r2,r2,6940
  8272dc:	1005003a 	cmpeq	r2,r2,zero
  8272e0:	d8800215 	stw	r2,8(sp)
  8272e4:	d8800117 	ldw	r2,4(sp)
  8272e8:	dd400815 	stw	r21,32(sp)
  8272ec:	dd000715 	stw	r20,28(sp)
  8272f0:	10805204 	addi	r2,r2,328
  8272f4:	dfc00c15 	stw	ra,48(sp)
  8272f8:	ddc00a15 	stw	r23,40(sp)
  8272fc:	dd800915 	stw	r22,36(sp)
  827300:	dcc00615 	stw	r19,24(sp)
  827304:	dc800515 	stw	r18,20(sp)
  827308:	dc400415 	stw	r17,16(sp)
  82730c:	dc000315 	stw	r16,12(sp)
  827310:	282b883a 	mov	r21,r5
  827314:	2039883a 	mov	fp,r4
  827318:	d8800015 	stw	r2,0(sp)
  82731c:	2829003a 	cmpeq	r20,r5,zero
  827320:	d8800117 	ldw	r2,4(sp)
  827324:	14405217 	ldw	r17,328(r2)
  827328:	88001026 	beq	r17,zero,82736c <__call_exitprocs+0xb0>
  82732c:	ddc00017 	ldw	r23,0(sp)
  827330:	88800117 	ldw	r2,4(r17)
  827334:	8c802204 	addi	r18,r17,136
  827338:	143fffc4 	addi	r16,r2,-1
  82733c:	80000916 	blt	r16,zero,827364 <__call_exitprocs+0xa8>
  827340:	05bfffc4 	movi	r22,-1
  827344:	a000151e 	bne	r20,zero,82739c <__call_exitprocs+0xe0>
  827348:	8409883a 	add	r4,r16,r16
  82734c:	2105883a 	add	r2,r4,r4
  827350:	1485883a 	add	r2,r2,r18
  827354:	10c02017 	ldw	r3,128(r2)
  827358:	a8c01126 	beq	r21,r3,8273a0 <__call_exitprocs+0xe4>
  82735c:	843fffc4 	addi	r16,r16,-1
  827360:	85bff81e 	bne	r16,r22,827344 <__call_exitprocs+0x88>
  827364:	d8800217 	ldw	r2,8(sp)
  827368:	10003126 	beq	r2,zero,827430 <__call_exitprocs+0x174>
  82736c:	dfc00c17 	ldw	ra,48(sp)
  827370:	df000b17 	ldw	fp,44(sp)
  827374:	ddc00a17 	ldw	r23,40(sp)
  827378:	dd800917 	ldw	r22,36(sp)
  82737c:	dd400817 	ldw	r21,32(sp)
  827380:	dd000717 	ldw	r20,28(sp)
  827384:	dcc00617 	ldw	r19,24(sp)
  827388:	dc800517 	ldw	r18,20(sp)
  82738c:	dc400417 	ldw	r17,16(sp)
  827390:	dc000317 	ldw	r16,12(sp)
  827394:	dec00d04 	addi	sp,sp,52
  827398:	f800283a 	ret
  82739c:	8409883a 	add	r4,r16,r16
  8273a0:	88c00117 	ldw	r3,4(r17)
  8273a4:	2105883a 	add	r2,r4,r4
  8273a8:	1445883a 	add	r2,r2,r17
  8273ac:	18ffffc4 	addi	r3,r3,-1
  8273b0:	11800217 	ldw	r6,8(r2)
  8273b4:	1c001526 	beq	r3,r16,82740c <__call_exitprocs+0x150>
  8273b8:	10000215 	stw	zero,8(r2)
  8273bc:	303fe726 	beq	r6,zero,82735c <__call_exitprocs+0xa0>
  8273c0:	00c00044 	movi	r3,1
  8273c4:	1c06983a 	sll	r3,r3,r16
  8273c8:	90804017 	ldw	r2,256(r18)
  8273cc:	8cc00117 	ldw	r19,4(r17)
  8273d0:	1884703a 	and	r2,r3,r2
  8273d4:	10001426 	beq	r2,zero,827428 <__call_exitprocs+0x16c>
  8273d8:	90804117 	ldw	r2,260(r18)
  8273dc:	1884703a 	and	r2,r3,r2
  8273e0:	10000c1e 	bne	r2,zero,827414 <__call_exitprocs+0x158>
  8273e4:	2105883a 	add	r2,r4,r4
  8273e8:	1485883a 	add	r2,r2,r18
  8273ec:	11400017 	ldw	r5,0(r2)
  8273f0:	e009883a 	mov	r4,fp
  8273f4:	303ee83a 	callr	r6
  8273f8:	88800117 	ldw	r2,4(r17)
  8273fc:	98bfc81e 	bne	r19,r2,827320 <__call_exitprocs+0x64>
  827400:	b8800017 	ldw	r2,0(r23)
  827404:	147fd526 	beq	r2,r17,82735c <__call_exitprocs+0xa0>
  827408:	003fc506 	br	827320 <__call_exitprocs+0x64>
  82740c:	8c000115 	stw	r16,4(r17)
  827410:	003fea06 	br	8273bc <__call_exitprocs+0x100>
  827414:	2105883a 	add	r2,r4,r4
  827418:	1485883a 	add	r2,r2,r18
  82741c:	11000017 	ldw	r4,0(r2)
  827420:	303ee83a 	callr	r6
  827424:	003ff406 	br	8273f8 <__call_exitprocs+0x13c>
  827428:	303ee83a 	callr	r6
  82742c:	003ff206 	br	8273f8 <__call_exitprocs+0x13c>
  827430:	88800117 	ldw	r2,4(r17)
  827434:	1000081e 	bne	r2,zero,827458 <__call_exitprocs+0x19c>
  827438:	89000017 	ldw	r4,0(r17)
  82743c:	20000726 	beq	r4,zero,82745c <__call_exitprocs+0x1a0>
  827440:	b9000015 	stw	r4,0(r23)
  827444:	8809883a 	mov	r4,r17
  827448:	0811b1c0 	call	811b1c <free>
  82744c:	bc400017 	ldw	r17,0(r23)
  827450:	883fb71e 	bne	r17,zero,827330 <__call_exitprocs+0x74>
  827454:	003fc506 	br	82736c <__call_exitprocs+0xb0>
  827458:	89000017 	ldw	r4,0(r17)
  82745c:	882f883a 	mov	r23,r17
  827460:	2023883a 	mov	r17,r4
  827464:	883fb21e 	bne	r17,zero,827330 <__call_exitprocs+0x74>
  827468:	003fc006 	br	82736c <__call_exitprocs+0xb0>

0082746c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  82746c:	defffd04 	addi	sp,sp,-12
  827470:	df000215 	stw	fp,8(sp)
  827474:	df000204 	addi	fp,sp,8
  827478:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  82747c:	e0bfff17 	ldw	r2,-4(fp)
  827480:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  827484:	e0bffe17 	ldw	r2,-8(fp)
  827488:	1005003a 	cmpeq	r2,r2,zero
  82748c:	1000021e 	bne	r2,zero,827498 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  827490:	002af070 	cmpltui	zero,zero,43969
  827494:	00000106 	br	82749c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  827498:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  82749c:	e037883a 	mov	sp,fp
  8274a0:	df000017 	ldw	fp,0(sp)
  8274a4:	dec00104 	addi	sp,sp,4
  8274a8:	f800283a 	ret

008274ac <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  8274ac:	defffd04 	addi	sp,sp,-12
  8274b0:	dfc00215 	stw	ra,8(sp)
  8274b4:	df000115 	stw	fp,4(sp)
  8274b8:	df000104 	addi	fp,sp,4
  8274bc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  8274c0:	008020f4 	movhi	r2,131
  8274c4:	10a9de44 	addi	r2,r2,-22663
  8274c8:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  8274cc:	e13fff17 	ldw	r4,-4(fp)
  8274d0:	082746c0 	call	82746c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8274d4:	003fff06 	br	8274d4 <_exit+0x28>
  8274d8:	008272b8 	rdprs	r2,zero,2506
